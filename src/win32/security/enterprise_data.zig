//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (8)
//--------------------------------------------------------------------------------
const IID_IProtectionPolicyManagerInterop_Value = Guid.initString("4652651d-c1fe-4ba1-9f0a-c0f56596f721");
pub const IID_IProtectionPolicyManagerInterop = &IID_IProtectionPolicyManagerInterop_Value;
pub const IProtectionPolicyManagerInterop = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        RequestAccessForWindowAsync: *const fn (
            self: *const IProtectionPolicyManagerInterop,
            app_window: ?HWND,
            source_identity: ?HSTRING,
            target_identity: ?HSTRING,
            riid: ?*const Guid,
            async_operation: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForWindow: *const fn (
            self: *const IProtectionPolicyManagerInterop,
            app_window: ?HWND,
            riid: ?*const Guid,
            result: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IInspectable.MethodMixin(T);
            pub inline fn requestAccessForWindowAsync(self: *const T, app_window_: ?HWND, source_identity_: ?HSTRING, target_identity_: ?HSTRING, riid_: ?*const Guid, async_operation_: ?*?*anyopaque) HRESULT {
                return @as(*const IProtectionPolicyManagerInterop.VTable, @ptrCast(self.vtable)).RequestAccessForWindowAsync(@as(*const IProtectionPolicyManagerInterop, @ptrCast(self)), app_window_, source_identity_, target_identity_, riid_, async_operation_);
            }
            pub inline fn getForWindow(self: *const T, app_window_: ?HWND, riid_: ?*const Guid, result_: ?*?*anyopaque) HRESULT {
                return @as(*const IProtectionPolicyManagerInterop.VTable, @ptrCast(self.vtable)).GetForWindow(@as(*const IProtectionPolicyManagerInterop, @ptrCast(self)), app_window_, riid_, result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IProtectionPolicyManagerInterop2_Value = Guid.initString("157cfbe4-a78d-4156-b384-61fdac41e686");
pub const IID_IProtectionPolicyManagerInterop2 = &IID_IProtectionPolicyManagerInterop2_Value;
pub const IProtectionPolicyManagerInterop2 = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        RequestAccessForAppWithWindowAsync: *const fn (
            self: *const IProtectionPolicyManagerInterop2,
            app_window: ?HWND,
            source_identity: ?HSTRING,
            app_package_family_name: ?HSTRING,
            riid: ?*const Guid,
            async_operation: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestAccessWithAuditingInfoForWindowAsync: *const fn (
            self: *const IProtectionPolicyManagerInterop2,
            app_window: ?HWND,
            source_identity: ?HSTRING,
            target_identity: ?HSTRING,
            audit_info_unk: ?*IUnknown,
            riid: ?*const Guid,
            async_operation: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestAccessWithMessageForWindowAsync: *const fn (
            self: *const IProtectionPolicyManagerInterop2,
            app_window: ?HWND,
            source_identity: ?HSTRING,
            target_identity: ?HSTRING,
            audit_info_unk: ?*IUnknown,
            message_from_app: ?HSTRING,
            riid: ?*const Guid,
            async_operation: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestAccessForAppWithAuditingInfoForWindowAsync: *const fn (
            self: *const IProtectionPolicyManagerInterop2,
            app_window: ?HWND,
            source_identity: ?HSTRING,
            app_package_family_name: ?HSTRING,
            audit_info_unk: ?*IUnknown,
            riid: ?*const Guid,
            async_operation: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestAccessForAppWithMessageForWindowAsync: *const fn (
            self: *const IProtectionPolicyManagerInterop2,
            app_window: ?HWND,
            source_identity: ?HSTRING,
            app_package_family_name: ?HSTRING,
            audit_info_unk: ?*IUnknown,
            message_from_app: ?HSTRING,
            riid: ?*const Guid,
            async_operation: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IInspectable.MethodMixin(T);
            pub inline fn requestAccessForAppWithWindowAsync(self: *const T, app_window_: ?HWND, source_identity_: ?HSTRING, app_package_family_name_: ?HSTRING, riid_: ?*const Guid, async_operation_: ?*?*anyopaque) HRESULT {
                return @as(*const IProtectionPolicyManagerInterop2.VTable, @ptrCast(self.vtable)).RequestAccessForAppWithWindowAsync(@as(*const IProtectionPolicyManagerInterop2, @ptrCast(self)), app_window_, source_identity_, app_package_family_name_, riid_, async_operation_);
            }
            pub inline fn requestAccessWithAuditingInfoForWindowAsync(self: *const T, app_window_: ?HWND, source_identity_: ?HSTRING, target_identity_: ?HSTRING, audit_info_unk_: ?*IUnknown, riid_: ?*const Guid, async_operation_: ?*?*anyopaque) HRESULT {
                return @as(*const IProtectionPolicyManagerInterop2.VTable, @ptrCast(self.vtable)).RequestAccessWithAuditingInfoForWindowAsync(@as(*const IProtectionPolicyManagerInterop2, @ptrCast(self)), app_window_, source_identity_, target_identity_, audit_info_unk_, riid_, async_operation_);
            }
            pub inline fn requestAccessWithMessageForWindowAsync(self: *const T, app_window_: ?HWND, source_identity_: ?HSTRING, target_identity_: ?HSTRING, audit_info_unk_: ?*IUnknown, message_from_app_: ?HSTRING, riid_: ?*const Guid, async_operation_: ?*?*anyopaque) HRESULT {
                return @as(*const IProtectionPolicyManagerInterop2.VTable, @ptrCast(self.vtable)).RequestAccessWithMessageForWindowAsync(@as(*const IProtectionPolicyManagerInterop2, @ptrCast(self)), app_window_, source_identity_, target_identity_, audit_info_unk_, message_from_app_, riid_, async_operation_);
            }
            pub inline fn requestAccessForAppWithAuditingInfoForWindowAsync(self: *const T, app_window_: ?HWND, source_identity_: ?HSTRING, app_package_family_name_: ?HSTRING, audit_info_unk_: ?*IUnknown, riid_: ?*const Guid, async_operation_: ?*?*anyopaque) HRESULT {
                return @as(*const IProtectionPolicyManagerInterop2.VTable, @ptrCast(self.vtable)).RequestAccessForAppWithAuditingInfoForWindowAsync(@as(*const IProtectionPolicyManagerInterop2, @ptrCast(self)), app_window_, source_identity_, app_package_family_name_, audit_info_unk_, riid_, async_operation_);
            }
            pub inline fn requestAccessForAppWithMessageForWindowAsync(self: *const T, app_window_: ?HWND, source_identity_: ?HSTRING, app_package_family_name_: ?HSTRING, audit_info_unk_: ?*IUnknown, message_from_app_: ?HSTRING, riid_: ?*const Guid, async_operation_: ?*?*anyopaque) HRESULT {
                return @as(*const IProtectionPolicyManagerInterop2.VTable, @ptrCast(self.vtable)).RequestAccessForAppWithMessageForWindowAsync(@as(*const IProtectionPolicyManagerInterop2, @ptrCast(self)), app_window_, source_identity_, app_package_family_name_, audit_info_unk_, message_from_app_, riid_, async_operation_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IProtectionPolicyManagerInterop3_Value = Guid.initString("c1c03933-b398-4d93-b0fd-2972adf802c2");
pub const IID_IProtectionPolicyManagerInterop3 = &IID_IProtectionPolicyManagerInterop3_Value;
pub const IProtectionPolicyManagerInterop3 = extern struct {
    pub const VTable = extern struct {
        base: IInspectable.VTable,
        RequestAccessWithBehaviorForWindowAsync: *const fn (
            self: *const IProtectionPolicyManagerInterop3,
            app_window: ?HWND,
            source_identity: ?HSTRING,
            target_identity: ?HSTRING,
            audit_info_unk: ?*IUnknown,
            message_from_app: ?HSTRING,
            behavior: u32,
            riid: ?*const Guid,
            async_operation: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestAccessForAppWithBehaviorForWindowAsync: *const fn (
            self: *const IProtectionPolicyManagerInterop3,
            app_window: ?HWND,
            source_identity: ?HSTRING,
            app_package_family_name: ?HSTRING,
            audit_info_unk: ?*IUnknown,
            message_from_app: ?HSTRING,
            behavior: u32,
            riid: ?*const Guid,
            async_operation: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestAccessToFilesForAppForWindowAsync: *const fn (
            self: *const IProtectionPolicyManagerInterop3,
            app_window: ?HWND,
            source_item_list_unk: ?*IUnknown,
            app_package_family_name: ?HSTRING,
            audit_info_unk: ?*IUnknown,
            riid: ?*const Guid,
            async_operation: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestAccessToFilesForAppWithMessageAndBehaviorForWindowAsync: *const fn (
            self: *const IProtectionPolicyManagerInterop3,
            app_window: ?HWND,
            source_item_list_unk: ?*IUnknown,
            app_package_family_name: ?HSTRING,
            audit_info_unk: ?*IUnknown,
            message_from_app: ?HSTRING,
            behavior: u32,
            riid: ?*const Guid,
            async_operation: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestAccessToFilesForProcessForWindowAsync: *const fn (
            self: *const IProtectionPolicyManagerInterop3,
            app_window: ?HWND,
            source_item_list_unk: ?*IUnknown,
            process_id: u32,
            audit_info_unk: ?*IUnknown,
            riid: ?*const Guid,
            async_operation: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestAccessToFilesForProcessWithMessageAndBehaviorForWindowAsync: *const fn (
            self: *const IProtectionPolicyManagerInterop3,
            app_window: ?HWND,
            source_item_list_unk: ?*IUnknown,
            process_id: u32,
            audit_info_unk: ?*IUnknown,
            message_from_app: ?HSTRING,
            behavior: u32,
            riid: ?*const Guid,
            async_operation: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IInspectable.MethodMixin(T);
            pub inline fn requestAccessWithBehaviorForWindowAsync(self: *const T, app_window_: ?HWND, source_identity_: ?HSTRING, target_identity_: ?HSTRING, audit_info_unk_: ?*IUnknown, message_from_app_: ?HSTRING, behavior_: u32, riid_: ?*const Guid, async_operation_: ?*?*anyopaque) HRESULT {
                return @as(*const IProtectionPolicyManagerInterop3.VTable, @ptrCast(self.vtable)).RequestAccessWithBehaviorForWindowAsync(@as(*const IProtectionPolicyManagerInterop3, @ptrCast(self)), app_window_, source_identity_, target_identity_, audit_info_unk_, message_from_app_, behavior_, riid_, async_operation_);
            }
            pub inline fn requestAccessForAppWithBehaviorForWindowAsync(self: *const T, app_window_: ?HWND, source_identity_: ?HSTRING, app_package_family_name_: ?HSTRING, audit_info_unk_: ?*IUnknown, message_from_app_: ?HSTRING, behavior_: u32, riid_: ?*const Guid, async_operation_: ?*?*anyopaque) HRESULT {
                return @as(*const IProtectionPolicyManagerInterop3.VTable, @ptrCast(self.vtable)).RequestAccessForAppWithBehaviorForWindowAsync(@as(*const IProtectionPolicyManagerInterop3, @ptrCast(self)), app_window_, source_identity_, app_package_family_name_, audit_info_unk_, message_from_app_, behavior_, riid_, async_operation_);
            }
            pub inline fn requestAccessToFilesForAppForWindowAsync(self: *const T, app_window_: ?HWND, source_item_list_unk_: ?*IUnknown, app_package_family_name_: ?HSTRING, audit_info_unk_: ?*IUnknown, riid_: ?*const Guid, async_operation_: ?*?*anyopaque) HRESULT {
                return @as(*const IProtectionPolicyManagerInterop3.VTable, @ptrCast(self.vtable)).RequestAccessToFilesForAppForWindowAsync(@as(*const IProtectionPolicyManagerInterop3, @ptrCast(self)), app_window_, source_item_list_unk_, app_package_family_name_, audit_info_unk_, riid_, async_operation_);
            }
            pub inline fn requestAccessToFilesForAppWithMessageAndBehaviorForWindowAsync(self: *const T, app_window_: ?HWND, source_item_list_unk_: ?*IUnknown, app_package_family_name_: ?HSTRING, audit_info_unk_: ?*IUnknown, message_from_app_: ?HSTRING, behavior_: u32, riid_: ?*const Guid, async_operation_: ?*?*anyopaque) HRESULT {
                return @as(*const IProtectionPolicyManagerInterop3.VTable, @ptrCast(self.vtable)).RequestAccessToFilesForAppWithMessageAndBehaviorForWindowAsync(@as(*const IProtectionPolicyManagerInterop3, @ptrCast(self)), app_window_, source_item_list_unk_, app_package_family_name_, audit_info_unk_, message_from_app_, behavior_, riid_, async_operation_);
            }
            pub inline fn requestAccessToFilesForProcessForWindowAsync(self: *const T, app_window_: ?HWND, source_item_list_unk_: ?*IUnknown, process_id_: u32, audit_info_unk_: ?*IUnknown, riid_: ?*const Guid, async_operation_: ?*?*anyopaque) HRESULT {
                return @as(*const IProtectionPolicyManagerInterop3.VTable, @ptrCast(self.vtable)).RequestAccessToFilesForProcessForWindowAsync(@as(*const IProtectionPolicyManagerInterop3, @ptrCast(self)), app_window_, source_item_list_unk_, process_id_, audit_info_unk_, riid_, async_operation_);
            }
            pub inline fn requestAccessToFilesForProcessWithMessageAndBehaviorForWindowAsync(self: *const T, app_window_: ?HWND, source_item_list_unk_: ?*IUnknown, process_id_: u32, audit_info_unk_: ?*IUnknown, message_from_app_: ?HSTRING, behavior_: u32, riid_: ?*const Guid, async_operation_: ?*?*anyopaque) HRESULT {
                return @as(*const IProtectionPolicyManagerInterop3.VTable, @ptrCast(self.vtable)).RequestAccessToFilesForProcessWithMessageAndBehaviorForWindowAsync(@as(*const IProtectionPolicyManagerInterop3, @ptrCast(self)), app_window_, source_item_list_unk_, process_id_, audit_info_unk_, message_from_app_, behavior_, riid_, async_operation_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const HTHREAD_NETWORK_CONTEXT = extern struct {
    ThreadId: u32,
    ThreadContext: ?HANDLE,
};

pub const ENTERPRISE_DATA_POLICIES = enum(u32) {
    NONE = 0,
    ALLOWED = 1,
    ENLIGHTENED = 2,
    EXEMPT = 4,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        ALLOWED: u1 = 0,
        ENLIGHTENED: u1 = 0,
        EXEMPT: u1 = 0,
    }) ENTERPRISE_DATA_POLICIES {
        return @as(ENTERPRISE_DATA_POLICIES, @enumFromInt((if (o.NONE == 1) @intFromEnum(ENTERPRISE_DATA_POLICIES.NONE) else 0) | (if (o.ALLOWED == 1) @intFromEnum(ENTERPRISE_DATA_POLICIES.ALLOWED) else 0) | (if (o.ENLIGHTENED == 1) @intFromEnum(ENTERPRISE_DATA_POLICIES.ENLIGHTENED) else 0) | (if (o.EXEMPT == 1) @intFromEnum(ENTERPRISE_DATA_POLICIES.EXEMPT) else 0)));
    }
};
pub const ENTERPRISE_POLICY_NONE = ENTERPRISE_DATA_POLICIES.NONE;
pub const ENTERPRISE_POLICY_ALLOWED = ENTERPRISE_DATA_POLICIES.ALLOWED;
pub const ENTERPRISE_POLICY_ENLIGHTENED = ENTERPRISE_DATA_POLICIES.ENLIGHTENED;
pub const ENTERPRISE_POLICY_EXEMPT = ENTERPRISE_DATA_POLICIES.EXEMPT;

pub const SRPHOSTING_TYPE = enum(i32) {
    NONE = 0,
    WINHTTP = 1,
    WININET = 2,
};
pub const SRPHOSTING_TYPE_NONE = SRPHOSTING_TYPE.NONE;
pub const SRPHOSTING_TYPE_WINHTTP = SRPHOSTING_TYPE.WINHTTP;
pub const SRPHOSTING_TYPE_WININET = SRPHOSTING_TYPE.WININET;

pub const SRPHOSTING_VERSION = enum(i32) {
    @"1" = 1,
};
pub const SRPHOSTING_VERSION1 = SRPHOSTING_VERSION.@"1";

pub const FILE_UNPROTECT_OPTIONS = extern struct {
    audit: bool,
};

//--------------------------------------------------------------------------------
// Section: Functions (13)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "srpapi" fn SrpCreateThreadNetworkContext(
    enterprise_id: ?[*:0]const u16,
    thread_network_context: ?*HTHREAD_NETWORK_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "srpapi" fn SrpCloseThreadNetworkContext(
    thread_network_context: ?*HTHREAD_NETWORK_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "srpapi" fn SrpSetTokenEnterpriseId(
    token_handle: ?HANDLE,
    enterprise_id: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "srpapi" fn SrpGetEnterpriseIds(
    token_handle: ?HANDLE,
    number_of_bytes: ?*u32,
    // TODO: what to do with BytesParamIndex 1?
    enterprise_ids: ?*?PWSTR,
    enterprise_id_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "srpapi" fn SrpEnablePermissiveModeFileEncryption(
    enterprise_id: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "srpapi" fn SrpDisablePermissiveModeFileEncryption() callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "srpapi" fn SrpGetEnterprisePolicy(
    token_handle: ?HANDLE,
    policy_flags: ?*ENTERPRISE_DATA_POLICIES,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "srpapi" fn SrpIsTokenService(
    token_handle: ?HANDLE,
    is_token_service: ?*u8,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "srpapi" fn SrpDoesPolicyAllowAppExecution(
    package_id: ?*const PACKAGE_ID,
    is_allowed: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "srpapi" fn SrpHostingInitialize(
    version: SRPHOSTING_VERSION,
    type: SRPHOSTING_TYPE,
    pv_data: ?*anyopaque,
    cb_data: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "srpapi" fn SrpHostingTerminate(
    type: SRPHOSTING_TYPE,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "efswrt" fn ProtectFileToEnterpriseIdentity(
    file_or_folder_path: ?[*:0]const u16,
    identity: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "efswrt" fn UnprotectFile(
    file_or_folder_path: ?[*:0]const u16,
    options: ?*const FILE_UNPROTECT_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (11)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const HANDLE = @import("../foundation.zig").HANDLE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HSTRING = @import("../system/win_rt.zig").HSTRING;
const HWND = @import("../foundation.zig").HWND;
const IInspectable = @import("../system/win_rt.zig").IInspectable;
const IUnknown = @import("../system/com.zig").IUnknown;
const NTSTATUS = @import("../foundation.zig").NTSTATUS;
const PACKAGE_ID = @import("../storage/packaging/appx.zig").PACKAGE_ID;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
