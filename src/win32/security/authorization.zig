//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (282)
//--------------------------------------------------------------------------------
pub const SDDL_REVISION_1 = @as(u32, 1);
pub const SDDL_REVISION = @as(u32, 1);
pub const SDDL_OWNER = "O";
pub const SDDL_GROUP = "G";
pub const SDDL_DACL = "D";
pub const SDDL_SACL = "S";
pub const SDDL_PROTECTED = "P";
pub const SDDL_AUTO_INHERIT_REQ = "AR";
pub const SDDL_AUTO_INHERITED = "AI";
pub const SDDL_NULL_ACL = "NO_ACCESS_CONTROL";
pub const SDDL_ACCESS_ALLOWED = "A";
pub const SDDL_ACCESS_DENIED = "D";
pub const SDDL_OBJECT_ACCESS_ALLOWED = "OA";
pub const SDDL_OBJECT_ACCESS_DENIED = "OD";
pub const SDDL_AUDIT = "AU";
pub const SDDL_ALARM = "AL";
pub const SDDL_OBJECT_AUDIT = "OU";
pub const SDDL_OBJECT_ALARM = "OL";
pub const SDDL_MANDATORY_LABEL = "ML";
pub const SDDL_PROCESS_TRUST_LABEL = "TL";
pub const SDDL_CALLBACK_ACCESS_ALLOWED = "XA";
pub const SDDL_CALLBACK_ACCESS_DENIED = "XD";
pub const SDDL_RESOURCE_ATTRIBUTE = "RA";
pub const SDDL_SCOPED_POLICY_ID = "SP";
pub const SDDL_CALLBACK_AUDIT = "XU";
pub const SDDL_CALLBACK_OBJECT_ACCESS_ALLOWED = "ZA";
pub const SDDL_ACCESS_FILTER = "FL";
pub const SDDL_INT = "TI";
pub const SDDL_UINT = "TU";
pub const SDDL_WSTRING = "TS";
pub const SDDL_SID = "TD";
pub const SDDL_BLOB = "TX";
pub const SDDL_BOOLEAN = "TB";
pub const SDDL_CONTAINER_INHERIT = "CI";
pub const SDDL_OBJECT_INHERIT = "OI";
pub const SDDL_NO_PROPAGATE = "NP";
pub const SDDL_INHERIT_ONLY = "IO";
pub const SDDL_INHERITED = "ID";
pub const SDDL_CRITICAL = "CR";
pub const SDDL_TRUST_PROTECTED_FILTER = "TP";
pub const SDDL_AUDIT_SUCCESS = "SA";
pub const SDDL_AUDIT_FAILURE = "FA";
pub const SDDL_READ_PROPERTY = "RP";
pub const SDDL_WRITE_PROPERTY = "WP";
pub const SDDL_CREATE_CHILD = "CC";
pub const SDDL_DELETE_CHILD = "DC";
pub const SDDL_LIST_CHILDREN = "LC";
pub const SDDL_SELF_WRITE = "SW";
pub const SDDL_LIST_OBJECT = "LO";
pub const SDDL_DELETE_TREE = "DT";
pub const SDDL_CONTROL_ACCESS = "CR";
pub const SDDL_READ_CONTROL = "RC";
pub const SDDL_WRITE_DAC = "WD";
pub const SDDL_WRITE_OWNER = "WO";
pub const SDDL_STANDARD_DELETE = "SD";
pub const SDDL_GENERIC_ALL = "GA";
pub const SDDL_GENERIC_READ = "GR";
pub const SDDL_GENERIC_WRITE = "GW";
pub const SDDL_GENERIC_EXECUTE = "GX";
pub const SDDL_FILE_ALL = "FA";
pub const SDDL_FILE_READ = "FR";
pub const SDDL_FILE_WRITE = "FW";
pub const SDDL_FILE_EXECUTE = "FX";
pub const SDDL_KEY_ALL = "KA";
pub const SDDL_KEY_READ = "KR";
pub const SDDL_KEY_WRITE = "KW";
pub const SDDL_KEY_EXECUTE = "KX";
pub const SDDL_NO_WRITE_UP = "NW";
pub const SDDL_NO_READ_UP = "NR";
pub const SDDL_NO_EXECUTE_UP = "NX";
pub const SDDL_ALIAS_SIZE = @as(u32, 2);
pub const SDDL_DOMAIN_ADMINISTRATORS = "DA";
pub const SDDL_DOMAIN_GUESTS = "DG";
pub const SDDL_DOMAIN_USERS = "DU";
pub const SDDL_ENTERPRISE_DOMAIN_CONTROLLERS = "ED";
pub const SDDL_DOMAIN_DOMAIN_CONTROLLERS = "DD";
pub const SDDL_DOMAIN_COMPUTERS = "DC";
pub const SDDL_BUILTIN_ADMINISTRATORS = "BA";
pub const SDDL_BUILTIN_GUESTS = "BG";
pub const SDDL_BUILTIN_USERS = "BU";
pub const SDDL_LOCAL_ADMIN = "LA";
pub const SDDL_LOCAL_GUEST = "LG";
pub const SDDL_ACCOUNT_OPERATORS = "AO";
pub const SDDL_BACKUP_OPERATORS = "BO";
pub const SDDL_PRINTER_OPERATORS = "PO";
pub const SDDL_SERVER_OPERATORS = "SO";
pub const SDDL_AUTHENTICATED_USERS = "AU";
pub const SDDL_PERSONAL_SELF = "PS";
pub const SDDL_CREATOR_OWNER = "CO";
pub const SDDL_CREATOR_GROUP = "CG";
pub const SDDL_LOCAL_SYSTEM = "SY";
pub const SDDL_POWER_USERS = "PU";
pub const SDDL_EVERYONE = "WD";
pub const SDDL_REPLICATOR = "RE";
pub const SDDL_INTERACTIVE = "IU";
pub const SDDL_NETWORK = "NU";
pub const SDDL_SERVICE = "SU";
pub const SDDL_RESTRICTED_CODE = "RC";
pub const SDDL_WRITE_RESTRICTED_CODE = "WR";
pub const SDDL_ANONYMOUS = "AN";
pub const SDDL_SCHEMA_ADMINISTRATORS = "SA";
pub const SDDL_CERT_SERV_ADMINISTRATORS = "CA";
pub const SDDL_RAS_SERVERS = "RS";
pub const SDDL_ENTERPRISE_ADMINS = "EA";
pub const SDDL_GROUP_POLICY_ADMINS = "PA";
pub const SDDL_ALIAS_PREW2KCOMPACC = "RU";
pub const SDDL_LOCAL_SERVICE = "LS";
pub const SDDL_NETWORK_SERVICE = "NS";
pub const SDDL_REMOTE_DESKTOP = "RD";
pub const SDDL_NETWORK_CONFIGURATION_OPS = "NO";
pub const SDDL_PERFMON_USERS = "MU";
pub const SDDL_PERFLOG_USERS = "LU";
pub const SDDL_IIS_USERS = "IS";
pub const SDDL_CRYPTO_OPERATORS = "CY";
pub const SDDL_OWNER_RIGHTS = "OW";
pub const SDDL_EVENT_LOG_READERS = "ER";
pub const SDDL_ENTERPRISE_RO_DCs = "RO";
pub const SDDL_CERTSVC_DCOM_ACCESS = "CD";
pub const SDDL_ALL_APP_PACKAGES = "AC";
pub const SDDL_RDS_REMOTE_ACCESS_SERVERS = "RA";
pub const SDDL_RDS_ENDPOINT_SERVERS = "ES";
pub const SDDL_RDS_MANAGEMENT_SERVERS = "MS";
pub const SDDL_USER_MODE_DRIVERS = "UD";
pub const SDDL_HYPER_V_ADMINS = "HA";
pub const SDDL_CLONEABLE_CONTROLLERS = "CN";
pub const SDDL_ACCESS_CONTROL_ASSISTANCE_OPS = "AA";
pub const SDDL_REMOTE_MANAGEMENT_USERS = "RM";
pub const SDDL_AUTHORITY_ASSERTED = "AS";
pub const SDDL_SERVICE_ASSERTED = "SS";
pub const SDDL_PROTECTED_USERS = "AP";
pub const SDDL_KEY_ADMINS = "KA";
pub const SDDL_ENTERPRISE_KEY_ADMINS = "EK";
pub const SDDL_ML_LOW = "LW";
pub const SDDL_ML_MEDIUM = "ME";
pub const SDDL_ML_MEDIUM_PLUS = "MP";
pub const SDDL_ML_HIGH = "HI";
pub const SDDL_ML_SYSTEM = "SI";
pub const SDDL_SEPERATOR = ";";
pub const SDDL_DELIMINATOR = ":";
pub const SDDL_ACE_BEGIN = "(";
pub const SDDL_ACE_END = ")";
pub const SDDL_ACE_COND_BEGIN = "(";
pub const SDDL_ACE_COND_END = ")";
pub const SDDL_SPACE = " ";
pub const SDDL_ACE_COND_BLOB_PREFIX = "#";
pub const SDDL_ACE_COND_SID_PREFIX = "SID";
pub const SDDL_ACE_COND_ATTRIBUTE_PREFIX = "@";
pub const SDDL_ACE_COND_USER_ATTRIBUTE_PREFIX = "@USER.";
pub const SDDL_ACE_COND_RESOURCE_ATTRIBUTE_PREFIX = "@RESOURCE.";
pub const SDDL_ACE_COND_DEVICE_ATTRIBUTE_PREFIX = "@DEVICE.";
pub const SDDL_ACE_COND_TOKEN_ATTRIBUTE_PREFIX = "@TOKEN.";
pub const INHERITED_ACCESS_ENTRY = @as(u32, 16);
pub const INHERITED_PARENT = @as(u32, 268435456);
pub const INHERITED_GRANDPARENT = @as(u32, 536870912);
pub const ACCCTRL_DEFAULT_PROVIDERA = "Windows NT Access Provider";
pub const ACCCTRL_DEFAULT_PROVIDERW = "Windows NT Access Provider";
pub const ACCCTRL_DEFAULT_PROVIDER = "Windows NT Access Provider";
pub const TRUSTEE_ACCESS_ALLOWED = @as(i32, 1);
pub const TRUSTEE_ACCESS_READ = @as(i32, 2);
pub const TRUSTEE_ACCESS_WRITE = @as(i32, 4);
pub const TRUSTEE_ACCESS_EXPLICIT = @as(i32, 1);
pub const TRUSTEE_ACCESS_ALL = @as(i32, -1);
pub const ACTRL_RESERVED = @as(u32, 0);
pub const ACTRL_PERM_1 = @as(u32, 1);
pub const ACTRL_PERM_2 = @as(u32, 2);
pub const ACTRL_PERM_3 = @as(u32, 4);
pub const ACTRL_PERM_4 = @as(u32, 8);
pub const ACTRL_PERM_5 = @as(u32, 16);
pub const ACTRL_PERM_6 = @as(u32, 32);
pub const ACTRL_PERM_7 = @as(u32, 64);
pub const ACTRL_PERM_8 = @as(u32, 128);
pub const ACTRL_PERM_9 = @as(u32, 256);
pub const ACTRL_PERM_10 = @as(u32, 512);
pub const ACTRL_PERM_11 = @as(u32, 1024);
pub const ACTRL_PERM_12 = @as(u32, 2048);
pub const ACTRL_PERM_13 = @as(u32, 4096);
pub const ACTRL_PERM_14 = @as(u32, 8192);
pub const ACTRL_PERM_15 = @as(u32, 16384);
pub const ACTRL_PERM_16 = @as(u32, 32768);
pub const ACTRL_PERM_17 = @as(u32, 65536);
pub const ACTRL_PERM_18 = @as(u32, 131072);
pub const ACTRL_PERM_19 = @as(u32, 262144);
pub const ACTRL_PERM_20 = @as(u32, 524288);
pub const ACTRL_ACCESS_PROTECTED = @as(u32, 1);
pub const ACTRL_SYSTEM_ACCESS = @as(u32, 67108864);
pub const ACTRL_DELETE = @as(u32, 134217728);
pub const ACTRL_READ_CONTROL = @as(u32, 268435456);
pub const ACTRL_CHANGE_ACCESS = @as(u32, 536870912);
pub const ACTRL_CHANGE_OWNER = @as(u32, 1073741824);
pub const ACTRL_SYNCHRONIZE = @as(u32, 2147483648);
pub const ACTRL_STD_RIGHTS_ALL = @as(u32, 4160749568);
pub const ACTRL_FILE_READ = @as(u32, 1);
pub const ACTRL_FILE_WRITE = @as(u32, 2);
pub const ACTRL_FILE_APPEND = @as(u32, 4);
pub const ACTRL_FILE_READ_PROP = @as(u32, 8);
pub const ACTRL_FILE_WRITE_PROP = @as(u32, 16);
pub const ACTRL_FILE_EXECUTE = @as(u32, 32);
pub const ACTRL_FILE_READ_ATTRIB = @as(u32, 128);
pub const ACTRL_FILE_WRITE_ATTRIB = @as(u32, 256);
pub const ACTRL_FILE_CREATE_PIPE = @as(u32, 512);
pub const ACTRL_DIR_LIST = @as(u32, 1);
pub const ACTRL_DIR_CREATE_OBJECT = @as(u32, 2);
pub const ACTRL_DIR_CREATE_CHILD = @as(u32, 4);
pub const ACTRL_DIR_DELETE_CHILD = @as(u32, 64);
pub const ACTRL_DIR_TRAVERSE = @as(u32, 32);
pub const ACTRL_KERNEL_TERMINATE = @as(u32, 1);
pub const ACTRL_KERNEL_THREAD = @as(u32, 2);
pub const ACTRL_KERNEL_VM = @as(u32, 4);
pub const ACTRL_KERNEL_VM_READ = @as(u32, 8);
pub const ACTRL_KERNEL_VM_WRITE = @as(u32, 16);
pub const ACTRL_KERNEL_DUP_HANDLE = @as(u32, 32);
pub const ACTRL_KERNEL_PROCESS = @as(u32, 64);
pub const ACTRL_KERNEL_SET_INFO = @as(u32, 128);
pub const ACTRL_KERNEL_GET_INFO = @as(u32, 256);
pub const ACTRL_KERNEL_CONTROL = @as(u32, 512);
pub const ACTRL_KERNEL_ALERT = @as(u32, 1024);
pub const ACTRL_KERNEL_GET_CONTEXT = @as(u32, 2048);
pub const ACTRL_KERNEL_SET_CONTEXT = @as(u32, 4096);
pub const ACTRL_KERNEL_TOKEN = @as(u32, 8192);
pub const ACTRL_KERNEL_IMPERSONATE = @as(u32, 16384);
pub const ACTRL_KERNEL_DIMPERSONATE = @as(u32, 32768);
pub const ACTRL_PRINT_SADMIN = @as(u32, 1);
pub const ACTRL_PRINT_SLIST = @as(u32, 2);
pub const ACTRL_PRINT_PADMIN = @as(u32, 4);
pub const ACTRL_PRINT_PUSE = @as(u32, 8);
pub const ACTRL_PRINT_JADMIN = @as(u32, 16);
pub const ACTRL_SVC_GET_INFO = @as(u32, 1);
pub const ACTRL_SVC_SET_INFO = @as(u32, 2);
pub const ACTRL_SVC_STATUS = @as(u32, 4);
pub const ACTRL_SVC_LIST = @as(u32, 8);
pub const ACTRL_SVC_START = @as(u32, 16);
pub const ACTRL_SVC_STOP = @as(u32, 32);
pub const ACTRL_SVC_PAUSE = @as(u32, 64);
pub const ACTRL_SVC_INTERROGATE = @as(u32, 128);
pub const ACTRL_SVC_UCONTROL = @as(u32, 256);
pub const ACTRL_REG_QUERY = @as(u32, 1);
pub const ACTRL_REG_SET = @as(u32, 2);
pub const ACTRL_REG_CREATE_CHILD = @as(u32, 4);
pub const ACTRL_REG_LIST = @as(u32, 8);
pub const ACTRL_REG_NOTIFY = @as(u32, 16);
pub const ACTRL_REG_LINK = @as(u32, 32);
pub const ACTRL_WIN_CLIPBRD = @as(u32, 1);
pub const ACTRL_WIN_GLOBAL_ATOMS = @as(u32, 2);
pub const ACTRL_WIN_CREATE = @as(u32, 4);
pub const ACTRL_WIN_LIST_DESK = @as(u32, 8);
pub const ACTRL_WIN_LIST = @as(u32, 16);
pub const ACTRL_WIN_READ_ATTRIBS = @as(u32, 32);
pub const ACTRL_WIN_WRITE_ATTRIBS = @as(u32, 64);
pub const ACTRL_WIN_SCREEN = @as(u32, 128);
pub const ACTRL_WIN_EXIT = @as(u32, 256);
pub const ACTRL_ACCESS_NO_OPTIONS = @as(u32, 0);
pub const ACTRL_ACCESS_SUPPORTS_OBJECT_ENTRIES = @as(u32, 1);
pub const AUDIT_TYPE_LEGACY = @as(u32, 1);
pub const AUDIT_TYPE_WMI = @as(u32, 2);
pub const AP_ParamTypeBits = @as(u32, 8);
pub const AP_ParamTypeMask = @as(i32, 255);
pub const _AUTHZ_SS_MAXSIZE = @as(u32, 128);
pub const APF_AuditFailure = @as(u32, 0);
pub const APF_AuditSuccess = @as(u32, 1);
pub const APF_ValidFlags = @as(u32, 1);
pub const AUTHZP_WPD_EVENT = @as(u32, 16);
pub const AUTHZ_ALLOW_MULTIPLE_SOURCE_INSTANCES = @as(u32, 1);
pub const AUTHZ_MIGRATED_LEGACY_PUBLISHER = @as(u32, 2);
pub const AUTHZ_AUDIT_INSTANCE_INFORMATION = @as(u32, 2);
pub const AUTHZ_SKIP_TOKEN_GROUPS = @as(u32, 2);
pub const AUTHZ_REQUIRE_S4U_LOGON = @as(u32, 4);
pub const AUTHZ_COMPUTE_PRIVILEGES = @as(u32, 8);
pub const AUTHZ_SECURITY_ATTRIBUTE_TYPE_INVALID = @as(u32, 0);
pub const AUTHZ_SECURITY_ATTRIBUTE_TYPE_INT64 = @as(u32, 1);
pub const AUTHZ_SECURITY_ATTRIBUTE_TYPE_UINT64 = @as(u32, 2);
pub const AUTHZ_SECURITY_ATTRIBUTE_TYPE_STRING = @as(u32, 3);
pub const AUTHZ_SECURITY_ATTRIBUTE_TYPE_FQBN = @as(u32, 4);
pub const AUTHZ_SECURITY_ATTRIBUTE_TYPE_SID = @as(u32, 5);
pub const AUTHZ_SECURITY_ATTRIBUTE_TYPE_BOOLEAN = @as(u32, 6);
pub const AUTHZ_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING = @as(u32, 16);
pub const AUTHZ_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1 = @as(u32, 1);
pub const AUTHZ_SECURITY_ATTRIBUTES_INFORMATION_VERSION = @as(u32, 1);
pub const AUTHZ_RPC_INIT_INFO_CLIENT_VERSION_V1 = @as(u32, 1);
pub const AUTHZ_INIT_INFO_VERSION_V1 = @as(u32, 1);
pub const AUTHZ_WPD_CATEGORY_FLAG = @as(u32, 16);
pub const AUTHZ_FLAG_ALLOW_MULTIPLE_SOURCE_INSTANCES = @as(u32, 1);
pub const OLESCRIPT_E_SYNTAX = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147352319));

//--------------------------------------------------------------------------------
// Section: Types (112)
//--------------------------------------------------------------------------------
pub const AUTHZ_RESOURCE_MANAGER_FLAGS = enum(u32) {
    NO_AUDIT = 1,
    INITIALIZE_UNDER_IMPERSONATION = 2,
    NO_CENTRAL_ACCESS_POLICIES = 4,
    _,
    pub fn initFlags(o: struct {
        NO_AUDIT: u1 = 0,
        INITIALIZE_UNDER_IMPERSONATION: u1 = 0,
        NO_CENTRAL_ACCESS_POLICIES: u1 = 0,
    }) AUTHZ_RESOURCE_MANAGER_FLAGS {
        return @as(AUTHZ_RESOURCE_MANAGER_FLAGS, @enumFromInt((if (o.NO_AUDIT == 1) @intFromEnum(AUTHZ_RESOURCE_MANAGER_FLAGS.NO_AUDIT) else 0) | (if (o.INITIALIZE_UNDER_IMPERSONATION == 1) @intFromEnum(AUTHZ_RESOURCE_MANAGER_FLAGS.INITIALIZE_UNDER_IMPERSONATION) else 0) | (if (o.NO_CENTRAL_ACCESS_POLICIES == 1) @intFromEnum(AUTHZ_RESOURCE_MANAGER_FLAGS.NO_CENTRAL_ACCESS_POLICIES) else 0)));
    }
};
pub const AUTHZ_RM_FLAG_NO_AUDIT = AUTHZ_RESOURCE_MANAGER_FLAGS.NO_AUDIT;
pub const AUTHZ_RM_FLAG_INITIALIZE_UNDER_IMPERSONATION = AUTHZ_RESOURCE_MANAGER_FLAGS.INITIALIZE_UNDER_IMPERSONATION;
pub const AUTHZ_RM_FLAG_NO_CENTRAL_ACCESS_POLICIES = AUTHZ_RESOURCE_MANAGER_FLAGS.NO_CENTRAL_ACCESS_POLICIES;

pub const AUTHZ_ACCESS_CHECK_FLAGS = enum(u32) {
    D = 1,
};
pub const AUTHZ_ACCESS_CHECK_NO_DEEP_COPY_SD = AUTHZ_ACCESS_CHECK_FLAGS.D;

pub const AUTHZ_INITIALIZE_OBJECT_ACCESS_AUDIT_EVENT_FLAGS = enum(u32) {
    SUCCESS_AUDIT = 1,
    FAILURE_AUDIT = 2,
    ALLOC_STRINGS = 4,
};
pub const AUTHZ_NO_SUCCESS_AUDIT = AUTHZ_INITIALIZE_OBJECT_ACCESS_AUDIT_EVENT_FLAGS.SUCCESS_AUDIT;
pub const AUTHZ_NO_FAILURE_AUDIT = AUTHZ_INITIALIZE_OBJECT_ACCESS_AUDIT_EVENT_FLAGS.FAILURE_AUDIT;
pub const AUTHZ_NO_ALLOC_STRINGS = AUTHZ_INITIALIZE_OBJECT_ACCESS_AUDIT_EVENT_FLAGS.ALLOC_STRINGS;

pub const TREE_SEC_INFO = enum(u32) {
    SET = 1,
    RESET = 2,
    RESET_KEEP_EXPLICIT = 3,
};
pub const TREE_SEC_INFO_SET = TREE_SEC_INFO.SET;
pub const TREE_SEC_INFO_RESET = TREE_SEC_INFO.RESET;
pub const TREE_SEC_INFO_RESET_KEEP_EXPLICIT = TREE_SEC_INFO.RESET_KEEP_EXPLICIT;

pub const AUTHZ_GENERATE_RESULTS = enum(u32) {
    SUCCESS_AUDIT = 1,
    FAILURE_AUDIT = 2,
};
pub const AUTHZ_GENERATE_SUCCESS_AUDIT = AUTHZ_GENERATE_RESULTS.SUCCESS_AUDIT;
pub const AUTHZ_GENERATE_FAILURE_AUDIT = AUTHZ_GENERATE_RESULTS.FAILURE_AUDIT;

pub const ACTRL_ACCESS_ENTRY_ACCESS_FLAGS = enum(u32) {
    CCESS_ALLOWED = 1,
    CCESS_DENIED = 2,
    UDIT_SUCCESS = 4,
    UDIT_FAILURE = 8,
};
pub const ACTRL_ACCESS_ALLOWED = ACTRL_ACCESS_ENTRY_ACCESS_FLAGS.CCESS_ALLOWED;
pub const ACTRL_ACCESS_DENIED = ACTRL_ACCESS_ENTRY_ACCESS_FLAGS.CCESS_DENIED;
pub const ACTRL_AUDIT_SUCCESS = ACTRL_ACCESS_ENTRY_ACCESS_FLAGS.UDIT_SUCCESS;
pub const ACTRL_AUDIT_FAILURE = ACTRL_ACCESS_ENTRY_ACCESS_FLAGS.UDIT_FAILURE;

pub const AUTHZ_SECURITY_ATTRIBUTE_FLAGS = enum(u32) {
    NON_INHERITABLE = 1,
    VALUE_CASE_SENSITIVE = 2,
    _,
    pub fn initFlags(o: struct {
        NON_INHERITABLE: u1 = 0,
        VALUE_CASE_SENSITIVE: u1 = 0,
    }) AUTHZ_SECURITY_ATTRIBUTE_FLAGS {
        return @as(AUTHZ_SECURITY_ATTRIBUTE_FLAGS, @enumFromInt((if (o.NON_INHERITABLE == 1) @intFromEnum(AUTHZ_SECURITY_ATTRIBUTE_FLAGS.NON_INHERITABLE) else 0) | (if (o.VALUE_CASE_SENSITIVE == 1) @intFromEnum(AUTHZ_SECURITY_ATTRIBUTE_FLAGS.VALUE_CASE_SENSITIVE) else 0)));
    }
};
pub const AUTHZ_SECURITY_ATTRIBUTE_NON_INHERITABLE = AUTHZ_SECURITY_ATTRIBUTE_FLAGS.NON_INHERITABLE;
pub const AUTHZ_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE = AUTHZ_SECURITY_ATTRIBUTE_FLAGS.VALUE_CASE_SENSITIVE;

pub const SE_OBJECT_TYPE = enum(i32) {
    UNKNOWN_OBJECT_TYPE = 0,
    FILE_OBJECT = 1,
    SERVICE = 2,
    PRINTER = 3,
    REGISTRY_KEY = 4,
    LMSHARE = 5,
    KERNEL_OBJECT = 6,
    WINDOW_OBJECT = 7,
    DS_OBJECT = 8,
    DS_OBJECT_ALL = 9,
    PROVIDER_DEFINED_OBJECT = 10,
    WMIGUID_OBJECT = 11,
    REGISTRY_WOW64_32KEY = 12,
    REGISTRY_WOW64_64KEY = 13,
};
pub const SE_UNKNOWN_OBJECT_TYPE = SE_OBJECT_TYPE.UNKNOWN_OBJECT_TYPE;
pub const SE_FILE_OBJECT = SE_OBJECT_TYPE.FILE_OBJECT;
pub const SE_SERVICE = SE_OBJECT_TYPE.SERVICE;
pub const SE_PRINTER = SE_OBJECT_TYPE.PRINTER;
pub const SE_REGISTRY_KEY = SE_OBJECT_TYPE.REGISTRY_KEY;
pub const SE_LMSHARE = SE_OBJECT_TYPE.LMSHARE;
pub const SE_KERNEL_OBJECT = SE_OBJECT_TYPE.KERNEL_OBJECT;
pub const SE_WINDOW_OBJECT = SE_OBJECT_TYPE.WINDOW_OBJECT;
pub const SE_DS_OBJECT = SE_OBJECT_TYPE.DS_OBJECT;
pub const SE_DS_OBJECT_ALL = SE_OBJECT_TYPE.DS_OBJECT_ALL;
pub const SE_PROVIDER_DEFINED_OBJECT = SE_OBJECT_TYPE.PROVIDER_DEFINED_OBJECT;
pub const SE_WMIGUID_OBJECT = SE_OBJECT_TYPE.WMIGUID_OBJECT;
pub const SE_REGISTRY_WOW64_32KEY = SE_OBJECT_TYPE.REGISTRY_WOW64_32KEY;
pub const SE_REGISTRY_WOW64_64KEY = SE_OBJECT_TYPE.REGISTRY_WOW64_64KEY;

pub const TRUSTEE_TYPE = enum(i32) {
    UNKNOWN = 0,
    USER = 1,
    GROUP = 2,
    DOMAIN = 3,
    ALIAS = 4,
    WELL_KNOWN_GROUP = 5,
    DELETED = 6,
    INVALID = 7,
    COMPUTER = 8,
};
pub const TRUSTEE_IS_UNKNOWN = TRUSTEE_TYPE.UNKNOWN;
pub const TRUSTEE_IS_USER = TRUSTEE_TYPE.USER;
pub const TRUSTEE_IS_GROUP = TRUSTEE_TYPE.GROUP;
pub const TRUSTEE_IS_DOMAIN = TRUSTEE_TYPE.DOMAIN;
pub const TRUSTEE_IS_ALIAS = TRUSTEE_TYPE.ALIAS;
pub const TRUSTEE_IS_WELL_KNOWN_GROUP = TRUSTEE_TYPE.WELL_KNOWN_GROUP;
pub const TRUSTEE_IS_DELETED = TRUSTEE_TYPE.DELETED;
pub const TRUSTEE_IS_INVALID = TRUSTEE_TYPE.INVALID;
pub const TRUSTEE_IS_COMPUTER = TRUSTEE_TYPE.COMPUTER;

pub const TRUSTEE_FORM = enum(i32) {
    IS_SID = 0,
    IS_NAME = 1,
    BAD_FORM = 2,
    IS_OBJECTS_AND_SID = 3,
    IS_OBJECTS_AND_NAME = 4,
};
pub const TRUSTEE_IS_SID = TRUSTEE_FORM.IS_SID;
pub const TRUSTEE_IS_NAME = TRUSTEE_FORM.IS_NAME;
pub const TRUSTEE_BAD_FORM = TRUSTEE_FORM.BAD_FORM;
pub const TRUSTEE_IS_OBJECTS_AND_SID = TRUSTEE_FORM.IS_OBJECTS_AND_SID;
pub const TRUSTEE_IS_OBJECTS_AND_NAME = TRUSTEE_FORM.IS_OBJECTS_AND_NAME;

pub const MULTIPLE_TRUSTEE_OPERATION = enum(i32) {
    NO_MULTIPLE_TRUSTEE = 0,
    TRUSTEE_IS_IMPERSONATE = 1,
};
pub const NO_MULTIPLE_TRUSTEE = MULTIPLE_TRUSTEE_OPERATION.NO_MULTIPLE_TRUSTEE;
pub const TRUSTEE_IS_IMPERSONATE = MULTIPLE_TRUSTEE_OPERATION.TRUSTEE_IS_IMPERSONATE;

pub const OBJECTS_AND_SID = extern struct {
    ObjectsPresent: SYSTEM_AUDIT_OBJECT_ACE_FLAGS,
    ObjectTypeGuid: Guid,
    InheritedObjectTypeGuid: Guid,
    pSid: ?*SID,
};

pub const OBJECTS_AND_NAME_A = extern struct {
    ObjectsPresent: SYSTEM_AUDIT_OBJECT_ACE_FLAGS,
    ObjectType: SE_OBJECT_TYPE,
    ObjectTypeName: ?PSTR,
    InheritedObjectTypeName: ?PSTR,
    ptstrName: ?PSTR,
};

pub const OBJECTS_AND_NAME_W = extern struct {
    ObjectsPresent: SYSTEM_AUDIT_OBJECT_ACE_FLAGS,
    ObjectType: SE_OBJECT_TYPE,
    ObjectTypeName: ?PWSTR,
    InheritedObjectTypeName: ?PWSTR,
    ptstrName: ?PWSTR,
};

pub const TRUSTEE_A = extern struct {
    pMultipleTrustee: ?*TRUSTEE_A,
    MultipleTrusteeOperation: MULTIPLE_TRUSTEE_OPERATION,
    TrusteeForm: TRUSTEE_FORM,
    TrusteeType: TRUSTEE_TYPE,
    ptstrName: ?[*]u8,
};

pub const TRUSTEE_W = extern struct {
    pMultipleTrustee: ?*TRUSTEE_W,
    MultipleTrusteeOperation: MULTIPLE_TRUSTEE_OPERATION,
    TrusteeForm: TRUSTEE_FORM,
    TrusteeType: TRUSTEE_TYPE,
    ptstrName: ?[*]u16,
};

pub const ACCESS_MODE = enum(i32) {
    NOT_USED_ACCESS = 0,
    GRANT_ACCESS = 1,
    SET_ACCESS = 2,
    DENY_ACCESS = 3,
    REVOKE_ACCESS = 4,
    SET_AUDIT_SUCCESS = 5,
    SET_AUDIT_FAILURE = 6,
};
pub const NOT_USED_ACCESS = ACCESS_MODE.NOT_USED_ACCESS;
pub const GRANT_ACCESS = ACCESS_MODE.GRANT_ACCESS;
pub const SET_ACCESS = ACCESS_MODE.SET_ACCESS;
pub const DENY_ACCESS = ACCESS_MODE.DENY_ACCESS;
pub const REVOKE_ACCESS = ACCESS_MODE.REVOKE_ACCESS;
pub const SET_AUDIT_SUCCESS = ACCESS_MODE.SET_AUDIT_SUCCESS;
pub const SET_AUDIT_FAILURE = ACCESS_MODE.SET_AUDIT_FAILURE;

pub const EXPLICIT_ACCESS_A = extern struct {
    grfAccessPermissions: u32,
    grfAccessMode: ACCESS_MODE,
    grfInheritance: ACE_FLAGS,
    Trustee: TRUSTEE_A,
};

pub const EXPLICIT_ACCESS_W = extern struct {
    grfAccessPermissions: u32,
    grfAccessMode: ACCESS_MODE,
    grfInheritance: ACE_FLAGS,
    Trustee: TRUSTEE_W,
};

pub const ACTRL_ACCESS_ENTRYA = extern struct {
    Trustee: TRUSTEE_A,
    fAccessFlags: ACTRL_ACCESS_ENTRY_ACCESS_FLAGS,
    Access: u32,
    ProvSpecificAccess: u32,
    Inheritance: ACE_FLAGS,
    lpInheritProperty: ?PSTR,
};

pub const ACTRL_ACCESS_ENTRYW = extern struct {
    Trustee: TRUSTEE_W,
    fAccessFlags: ACTRL_ACCESS_ENTRY_ACCESS_FLAGS,
    Access: u32,
    ProvSpecificAccess: u32,
    Inheritance: ACE_FLAGS,
    lpInheritProperty: ?PWSTR,
};

pub const ACTRL_ACCESS_ENTRY_LISTA = extern struct {
    cEntries: u32,
    pAccessList: ?*ACTRL_ACCESS_ENTRYA,
};

pub const ACTRL_ACCESS_ENTRY_LISTW = extern struct {
    cEntries: u32,
    pAccessList: ?*ACTRL_ACCESS_ENTRYW,
};

pub const ACTRL_PROPERTY_ENTRYA = extern struct {
    lpProperty: ?PSTR,
    pAccessEntryList: ?*ACTRL_ACCESS_ENTRY_LISTA,
    fListFlags: u32,
};

pub const ACTRL_PROPERTY_ENTRYW = extern struct {
    lpProperty: ?PWSTR,
    pAccessEntryList: ?*ACTRL_ACCESS_ENTRY_LISTW,
    fListFlags: u32,
};

pub const ACTRL_ACCESSA = extern struct {
    cEntries: u32,
    pPropertyAccessList: ?*ACTRL_PROPERTY_ENTRYA,
};

pub const ACTRL_ACCESSW = extern struct {
    cEntries: u32,
    pPropertyAccessList: ?*ACTRL_PROPERTY_ENTRYW,
};

pub const TRUSTEE_ACCESSA = extern struct {
    lpProperty: ?PSTR,
    Access: u32,
    fAccessFlags: u32,
    fReturnedAccess: u32,
};

pub const TRUSTEE_ACCESSW = extern struct {
    lpProperty: ?PWSTR,
    Access: u32,
    fAccessFlags: u32,
    fReturnedAccess: u32,
};

pub const ACTRL_OVERLAPPED = extern struct {
    Anonymous: extern union {
        Provider: ?*anyopaque,
        Reserved1: u32,
    },
    Reserved2: u32,
    hEvent: ?HANDLE,
};

pub const ACTRL_ACCESS_INFOA = extern struct {
    fAccessPermission: u32,
    lpAccessPermissionName: ?PSTR,
};

pub const ACTRL_ACCESS_INFOW = extern struct {
    fAccessPermission: u32,
    lpAccessPermissionName: ?PWSTR,
};

pub const ACTRL_CONTROL_INFOA = extern struct {
    lpControlId: ?PSTR,
    lpControlName: ?PSTR,
};

pub const ACTRL_CONTROL_INFOW = extern struct {
    lpControlId: ?PWSTR,
    lpControlName: ?PWSTR,
};

pub const PROG_INVOKE_SETTING = enum(i32) {
    InvokeNever = 1,
    InvokeEveryObject = 2,
    InvokeOnError = 3,
    CancelOperation = 4,
    RetryOperation = 5,
    InvokePrePostError = 6,
};
pub const ProgressInvokeNever = PROG_INVOKE_SETTING.InvokeNever;
pub const ProgressInvokeEveryObject = PROG_INVOKE_SETTING.InvokeEveryObject;
pub const ProgressInvokeOnError = PROG_INVOKE_SETTING.InvokeOnError;
pub const ProgressCancelOperation = PROG_INVOKE_SETTING.CancelOperation;
pub const ProgressRetryOperation = PROG_INVOKE_SETTING.RetryOperation;
pub const ProgressInvokePrePostError = PROG_INVOKE_SETTING.InvokePrePostError;

pub const FN_OBJECT_MGR_FUNCTIONS = extern struct {
    Placeholder: u32,
};

pub const INHERITED_FROMA = extern struct {
    GenerationGap: i32,
    AncestorName: ?PSTR,
};

pub const INHERITED_FROMW = extern struct {
    GenerationGap: i32,
    AncestorName: ?PWSTR,
};

pub const AUDIT_PARAM_TYPE = enum(i32) {
    None = 1,
    String = 2,
    Ulong = 3,
    Pointer = 4,
    Sid = 5,
    LogonId = 6,
    ObjectTypeList = 7,
    Luid = 8,
    Guid = 9,
    Time = 10,
    Int64 = 11,
    IpAddress = 12,
    LogonIdWithSid = 13,
};
pub const APT_None = AUDIT_PARAM_TYPE.None;
pub const APT_String = AUDIT_PARAM_TYPE.String;
pub const APT_Ulong = AUDIT_PARAM_TYPE.Ulong;
pub const APT_Pointer = AUDIT_PARAM_TYPE.Pointer;
pub const APT_Sid = AUDIT_PARAM_TYPE.Sid;
pub const APT_LogonId = AUDIT_PARAM_TYPE.LogonId;
pub const APT_ObjectTypeList = AUDIT_PARAM_TYPE.ObjectTypeList;
pub const APT_Luid = AUDIT_PARAM_TYPE.Luid;
pub const APT_Guid = AUDIT_PARAM_TYPE.Guid;
pub const APT_Time = AUDIT_PARAM_TYPE.Time;
pub const APT_Int64 = AUDIT_PARAM_TYPE.Int64;
pub const APT_IpAddress = AUDIT_PARAM_TYPE.IpAddress;
pub const APT_LogonIdWithSid = AUDIT_PARAM_TYPE.LogonIdWithSid;

pub const AUDIT_OBJECT_TYPE = extern struct {
    ObjectType: Guid,
    Flags: u16,
    Level: u16,
    AccessMask: u32,
};

pub const AUDIT_OBJECT_TYPES = extern struct {
    Count: u16,
    Flags: u16,
    pObjectTypes: ?*AUDIT_OBJECT_TYPE,
};

pub const AUDIT_IP_ADDRESS = extern struct {
    pIpAddress: [128]u8,
};

pub const AUDIT_PARAM = extern struct {
    Type: AUDIT_PARAM_TYPE,
    Length: u32,
    Flags: u32,
    Anonymous1: extern union {
        Data0: usize,
        String: ?PWSTR,
        u: usize,
        psid: ?*SID,
        pguid: ?*Guid,
        LogonId_LowPart: u32,
        pObjectTypes: ?*AUDIT_OBJECT_TYPES,
        pIpAddress: ?*AUDIT_IP_ADDRESS,
    },
    Anonymous2: extern union {
        Data1: usize,
        LogonId_HighPart: i32,
    },
};

pub const AUDIT_PARAMS = extern struct {
    Length: u32,
    Flags: u32,
    Count: u16,
    Parameters: ?*AUDIT_PARAM,
};

pub const AUTHZ_AUDIT_EVENT_TYPE_LEGACY = extern struct {
    CategoryId: u16,
    AuditId: u16,
    ParameterCount: u16,
};

pub const AUTHZ_AUDIT_EVENT_TYPE_UNION = extern union {
    Legacy: AUTHZ_AUDIT_EVENT_TYPE_LEGACY,
};

pub const AUTHZ_AUDIT_EVENT_TYPE_OLD = extern struct {
    Version: u32,
    dwFlags: u32,
    RefCount: i32,
    hAudit: usize,
    LinkId: LUID,
    u: AUTHZ_AUDIT_EVENT_TYPE_UNION,
};

pub const AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__ = extern struct {
    unused: i32,
};

pub const AUTHZ_ACCESS_REQUEST = extern struct {
    DesiredAccess: u32,
    PrincipalSelfSid: ?PSID,
    ObjectTypeList: ?*OBJECT_TYPE_LIST,
    ObjectTypeListLength: u32,
    OptionalArguments: ?*anyopaque,
};

pub const AUTHZ_ACCESS_REPLY = extern struct {
    ResultListLength: u32,
    GrantedAccessMask: ?*u32,
    SaclEvaluationResults: ?*AUTHZ_GENERATE_RESULTS,
    Error: ?*u32,
};

pub const PFN_AUTHZ_DYNAMIC_ACCESS_CHECK = *const fn (
    h_authz_client_context: AUTHZ_CLIENT_CONTEXT_HANDLE,
    p_ace: ?*ACE_HEADER,
    p_args: ?*anyopaque,
    pb_ace_applicable: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS = *const fn (
    h_authz_client_context: AUTHZ_CLIENT_CONTEXT_HANDLE,
    args: ?*anyopaque,
    p_sid_attr_array: ?*?*SID_AND_ATTRIBUTES,
    p_sid_count: ?*u32,
    p_restricted_sid_attr_array: ?*?*SID_AND_ATTRIBUTES,
    p_restricted_sid_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_AUTHZ_FREE_DYNAMIC_GROUPS = *const fn (
    p_sid_attr_array: ?*SID_AND_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PFN_AUTHZ_GET_CENTRAL_ACCESS_POLICY = *const fn (
    h_authz_client_context: AUTHZ_CLIENT_CONTEXT_HANDLE,
    capid: ?PSID,
    p_args: ?*anyopaque,
    p_central_access_policy_applicable: ?*BOOL,
    pp_central_access_policy: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_AUTHZ_FREE_CENTRAL_ACCESS_POLICY = *const fn (
    p_central_access_policy: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE = extern struct {
    Version: u64,
    pName: ?PWSTR,
};

pub const AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = extern struct {
    pValue: ?*anyopaque,
    ValueLength: u32,
};

pub const AUTHZ_SECURITY_ATTRIBUTE_OPERATION = enum(i32) {
    NONE = 0,
    REPLACE_ALL = 1,
    ADD = 2,
    DELETE = 3,
    REPLACE = 4,
};
pub const AUTHZ_SECURITY_ATTRIBUTE_OPERATION_NONE = AUTHZ_SECURITY_ATTRIBUTE_OPERATION.NONE;
pub const AUTHZ_SECURITY_ATTRIBUTE_OPERATION_REPLACE_ALL = AUTHZ_SECURITY_ATTRIBUTE_OPERATION.REPLACE_ALL;
pub const AUTHZ_SECURITY_ATTRIBUTE_OPERATION_ADD = AUTHZ_SECURITY_ATTRIBUTE_OPERATION.ADD;
pub const AUTHZ_SECURITY_ATTRIBUTE_OPERATION_DELETE = AUTHZ_SECURITY_ATTRIBUTE_OPERATION.DELETE;
pub const AUTHZ_SECURITY_ATTRIBUTE_OPERATION_REPLACE = AUTHZ_SECURITY_ATTRIBUTE_OPERATION.REPLACE;

pub const AUTHZ_SID_OPERATION = enum(i32) {
    NONE = 0,
    REPLACE_ALL = 1,
    ADD = 2,
    DELETE = 3,
    REPLACE = 4,
};
pub const AUTHZ_SID_OPERATION_NONE = AUTHZ_SID_OPERATION.NONE;
pub const AUTHZ_SID_OPERATION_REPLACE_ALL = AUTHZ_SID_OPERATION.REPLACE_ALL;
pub const AUTHZ_SID_OPERATION_ADD = AUTHZ_SID_OPERATION.ADD;
pub const AUTHZ_SID_OPERATION_DELETE = AUTHZ_SID_OPERATION.DELETE;
pub const AUTHZ_SID_OPERATION_REPLACE = AUTHZ_SID_OPERATION.REPLACE;

pub const AUTHZ_SECURITY_ATTRIBUTE_V1 = extern struct {
    pName: ?PWSTR,
    ValueType: u16,
    Reserved: u16,
    Flags: AUTHZ_SECURITY_ATTRIBUTE_FLAGS,
    ValueCount: u32,
    Values: extern union {
        pInt64: ?*i64,
        pUint64: ?*u64,
        ppString: ?*?PWSTR,
        pFqbn: ?*AUTHZ_SECURITY_ATTRIBUTE_FQBN_VALUE,
        pOctetString: ?*AUTHZ_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE,
    },
};

pub const AUTHZ_SECURITY_ATTRIBUTES_INFORMATION = extern struct {
    Version: u16,
    Reserved: u16,
    AttributeCount: u32,
    Attribute: extern union {
        pAttributeV1: ?*AUTHZ_SECURITY_ATTRIBUTE_V1,
    },
};

pub const AUTHZ_RPC_INIT_INFO_CLIENT = extern struct {
    version: u16,
    ObjectUuid: ?PWSTR,
    ProtSeq: ?PWSTR,
    NetworkAddr: ?PWSTR,
    Endpoint: ?PWSTR,
    Options: ?PWSTR,
    ServerSpn: ?PWSTR,
};

pub const AUTHZ_INIT_INFO = extern struct {
    version: u16,
    szResourceManagerName: ?[*:0]const u16,
    pfnDynamicAccessCheck: ?PFN_AUTHZ_DYNAMIC_ACCESS_CHECK,
    pfnComputeDynamicGroups: ?PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS,
    pfnFreeDynamicGroups: ?PFN_AUTHZ_FREE_DYNAMIC_GROUPS,
    pfnGetCentralAccessPolicy: ?PFN_AUTHZ_GET_CENTRAL_ACCESS_POLICY,
    pfnFreeCentralAccessPolicy: ?PFN_AUTHZ_FREE_CENTRAL_ACCESS_POLICY,
};

pub const AUTHZ_CONTEXT_INFORMATION_CLASS = enum(i32) {
    UserSid = 1,
    GroupsSids = 2,
    RestrictedSids = 3,
    Privileges = 4,
    ExpirationTime = 5,
    ServerContext = 6,
    Identifier = 7,
    Source = 8,
    All = 9,
    AuthenticationId = 10,
    SecurityAttributes = 11,
    DeviceSids = 12,
    UserClaims = 13,
    DeviceClaims = 14,
    AppContainerSid = 15,
    CapabilitySids = 16,
};
pub const AuthzContextInfoUserSid = AUTHZ_CONTEXT_INFORMATION_CLASS.UserSid;
pub const AuthzContextInfoGroupsSids = AUTHZ_CONTEXT_INFORMATION_CLASS.GroupsSids;
pub const AuthzContextInfoRestrictedSids = AUTHZ_CONTEXT_INFORMATION_CLASS.RestrictedSids;
pub const AuthzContextInfoPrivileges = AUTHZ_CONTEXT_INFORMATION_CLASS.Privileges;
pub const AuthzContextInfoExpirationTime = AUTHZ_CONTEXT_INFORMATION_CLASS.ExpirationTime;
pub const AuthzContextInfoServerContext = AUTHZ_CONTEXT_INFORMATION_CLASS.ServerContext;
pub const AuthzContextInfoIdentifier = AUTHZ_CONTEXT_INFORMATION_CLASS.Identifier;
pub const AuthzContextInfoSource = AUTHZ_CONTEXT_INFORMATION_CLASS.Source;
pub const AuthzContextInfoAll = AUTHZ_CONTEXT_INFORMATION_CLASS.All;
pub const AuthzContextInfoAuthenticationId = AUTHZ_CONTEXT_INFORMATION_CLASS.AuthenticationId;
pub const AuthzContextInfoSecurityAttributes = AUTHZ_CONTEXT_INFORMATION_CLASS.SecurityAttributes;
pub const AuthzContextInfoDeviceSids = AUTHZ_CONTEXT_INFORMATION_CLASS.DeviceSids;
pub const AuthzContextInfoUserClaims = AUTHZ_CONTEXT_INFORMATION_CLASS.UserClaims;
pub const AuthzContextInfoDeviceClaims = AUTHZ_CONTEXT_INFORMATION_CLASS.DeviceClaims;
pub const AuthzContextInfoAppContainerSid = AUTHZ_CONTEXT_INFORMATION_CLASS.AppContainerSid;
pub const AuthzContextInfoCapabilitySids = AUTHZ_CONTEXT_INFORMATION_CLASS.CapabilitySids;

pub const AUTHZ_AUDIT_EVENT_INFORMATION_CLASS = enum(i32) {
    Flags = 1,
    OperationType = 2,
    ObjectType = 3,
    ObjectName = 4,
    AdditionalInfo = 5,
};
pub const AuthzAuditEventInfoFlags = AUTHZ_AUDIT_EVENT_INFORMATION_CLASS.Flags;
pub const AuthzAuditEventInfoOperationType = AUTHZ_AUDIT_EVENT_INFORMATION_CLASS.OperationType;
pub const AuthzAuditEventInfoObjectType = AUTHZ_AUDIT_EVENT_INFORMATION_CLASS.ObjectType;
pub const AuthzAuditEventInfoObjectName = AUTHZ_AUDIT_EVENT_INFORMATION_CLASS.ObjectName;
pub const AuthzAuditEventInfoAdditionalInfo = AUTHZ_AUDIT_EVENT_INFORMATION_CLASS.AdditionalInfo;

pub const AUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET = extern struct {
    szObjectTypeName: ?PWSTR,
    dwOffset: u32,
};

pub const AUTHZ_SOURCE_SCHEMA_REGISTRATION = extern struct {
    dwFlags: u32,
    szEventSourceName: ?PWSTR,
    szEventMessageFile: ?PWSTR,
    szEventSourceXmlSchemaFile: ?PWSTR,
    szEventAccessStringsFile: ?PWSTR,
    szExecutableImagePath: ?PWSTR,
    Anonymous: extern union {
        pReserved: ?*anyopaque,
        pProviderGuid: ?*Guid,
    },
    dwObjectTypeNameCount: u32,
    ObjectTypeNames: [1]AUTHZ_REGISTRATION_OBJECT_TYPE_NAME_OFFSET,
};

const CLSID_AzAuthorizationStore_Value = Guid.initString("b2bcff59-a757-4b0b-a1bc-ea69981da69e");
pub const CLSID_AzAuthorizationStore = &CLSID_AzAuthorizationStore_Value;

const CLSID_AzBizRuleContext_Value = Guid.initString("5c2dc96f-8d51-434b-b33c-379bccae77c3");
pub const CLSID_AzBizRuleContext = &CLSID_AzBizRuleContext_Value;

const CLSID_AzPrincipalLocator_Value = Guid.initString("483afb5d-70df-4e16-abdc-a1de4d015a3e");
pub const CLSID_AzPrincipalLocator = &CLSID_AzPrincipalLocator_Value;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzAuthorizationStore_Value = Guid.initString("edbd9ca9-9b82-4f6a-9e8b-98301e450f14");
pub const IID_IAzAuthorizationStore = &IID_IAzAuthorizationStore_Value;
pub const IAzAuthorizationStore = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            pbstr_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ApplicationData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            pbstr_application_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ApplicationData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            bstr_application_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DomainTimeout: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            pl_prop: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DomainTimeout: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            l_prop: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ScriptEngineTimeout: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            pl_prop: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ScriptEngineTimeout: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            l_prop: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxScriptEngines: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            pl_prop: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxScriptEngines: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            l_prop: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GenerateAudits: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            pb_prop: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GenerateAudits: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            b_prop: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Writable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            pf_prop: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn (
            self: *const IAzAuthorizationStore,
            l_prop_id: i32,
            var_reserved: VARIANT,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn (
            self: *const IAzAuthorizationStore,
            l_prop_id: i32,
            var_prop: VARIANT,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPropertyItem: *const fn (
            self: *const IAzAuthorizationStore,
            l_prop_id: AZ_PROP_CONSTANTS,
            var_prop: VARIANT,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePropertyItem: *const fn (
            self: *const IAzAuthorizationStore,
            l_prop_id: i32,
            var_prop: VARIANT,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyAdministrators: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            pvar_admins: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyReaders: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            pvar_readers: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyAdministrator: *const fn (
            self: *const IAzAuthorizationStore,
            bstr_admin: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyAdministrator: *const fn (
            self: *const IAzAuthorizationStore,
            bstr_admin: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyReader: *const fn (
            self: *const IAzAuthorizationStore,
            bstr_reader: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyReader: *const fn (
            self: *const IAzAuthorizationStore,
            bstr_reader: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: *const fn (
            self: *const IAzAuthorizationStore,
            l_flags: AZ_PROP_CONSTANTS,
            bstr_policy_u_r_l: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateCache: *const fn (
            self: *const IAzAuthorizationStore,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IAzAuthorizationStore,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Applications: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            pp_app_collection: ?*?*IAzApplications,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenApplication: *const fn (
            self: *const IAzAuthorizationStore,
            bstr_application_name: ?BSTR,
            var_reserved: VARIANT,
            pp_application: ?*?*IAzApplication,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateApplication: *const fn (
            self: *const IAzAuthorizationStore,
            bstr_application_name: ?BSTR,
            var_reserved: VARIANT,
            pp_application: ?*?*IAzApplication,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteApplication: *const fn (
            self: *const IAzAuthorizationStore,
            bstr_application_name: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ApplicationGroups: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            pp_group_collection: ?*?*IAzApplicationGroups,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateApplicationGroup: *const fn (
            self: *const IAzAuthorizationStore,
            bstr_group_name: ?BSTR,
            var_reserved: VARIANT,
            pp_group: ?*?*IAzApplicationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenApplicationGroup: *const fn (
            self: *const IAzAuthorizationStore,
            bstr_group_name: ?BSTR,
            var_reserved: VARIANT,
            pp_group: ?*?*IAzApplicationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteApplicationGroup: *const fn (
            self: *const IAzAuthorizationStore,
            bstr_group_name: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Submit: *const fn (
            self: *const IAzAuthorizationStore,
            l_flags: i32,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DelegatedPolicyUsers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            pvar_delegated_policy_users: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDelegatedPolicyUser: *const fn (
            self: *const IAzAuthorizationStore,
            bstr_delegated_policy_user: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteDelegatedPolicyUser: *const fn (
            self: *const IAzAuthorizationStore,
            bstr_delegated_policy_user: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TargetMachine: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            pbstr_target_machine: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ApplyStoreSacl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            pb_apply_store_sacl: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ApplyStoreSacl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            b_apply_store_sacl: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyAdministratorsName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            pvar_admins: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyReadersName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            pvar_readers: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyAdministratorName: *const fn (
            self: *const IAzAuthorizationStore,
            bstr_admin: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyAdministratorName: *const fn (
            self: *const IAzAuthorizationStore,
            bstr_admin: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyReaderName: *const fn (
            self: *const IAzAuthorizationStore,
            bstr_reader: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyReaderName: *const fn (
            self: *const IAzAuthorizationStore,
            bstr_reader: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DelegatedPolicyUsersName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzAuthorizationStore,
            pvar_delegated_policy_users: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDelegatedPolicyUserName: *const fn (
            self: *const IAzAuthorizationStore,
            bstr_delegated_policy_user: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteDelegatedPolicyUserName: *const fn (
            self: *const IAzAuthorizationStore,
            bstr_delegated_policy_user: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseApplication: *const fn (
            self: *const IAzAuthorizationStore,
            bstr_application_name: ?BSTR,
            l_flag: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDescription(self: *const T, pbstr_description_: ?*?BSTR) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IAzAuthorizationStore, @ptrCast(self)), pbstr_description_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_description_);
            }
            pub inline fn getApplicationData(self: *const T, pbstr_application_data_: ?*?BSTR) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).get_ApplicationData(@as(*const IAzAuthorizationStore, @ptrCast(self)), pbstr_application_data_);
            }
            pub inline fn putApplicationData(self: *const T, bstr_application_data_: ?BSTR) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).put_ApplicationData(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_application_data_);
            }
            pub inline fn getDomainTimeout(self: *const T, pl_prop_: ?*i32) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).get_DomainTimeout(@as(*const IAzAuthorizationStore, @ptrCast(self)), pl_prop_);
            }
            pub inline fn putDomainTimeout(self: *const T, l_prop_: i32) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).put_DomainTimeout(@as(*const IAzAuthorizationStore, @ptrCast(self)), l_prop_);
            }
            pub inline fn getScriptEngineTimeout(self: *const T, pl_prop_: ?*i32) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).get_ScriptEngineTimeout(@as(*const IAzAuthorizationStore, @ptrCast(self)), pl_prop_);
            }
            pub inline fn putScriptEngineTimeout(self: *const T, l_prop_: i32) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).put_ScriptEngineTimeout(@as(*const IAzAuthorizationStore, @ptrCast(self)), l_prop_);
            }
            pub inline fn getMaxScriptEngines(self: *const T, pl_prop_: ?*i32) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).get_MaxScriptEngines(@as(*const IAzAuthorizationStore, @ptrCast(self)), pl_prop_);
            }
            pub inline fn putMaxScriptEngines(self: *const T, l_prop_: i32) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).put_MaxScriptEngines(@as(*const IAzAuthorizationStore, @ptrCast(self)), l_prop_);
            }
            pub inline fn getGenerateAudits(self: *const T, pb_prop_: ?*BOOL) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).get_GenerateAudits(@as(*const IAzAuthorizationStore, @ptrCast(self)), pb_prop_);
            }
            pub inline fn putGenerateAudits(self: *const T, b_prop_: BOOL) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).put_GenerateAudits(@as(*const IAzAuthorizationStore, @ptrCast(self)), b_prop_);
            }
            pub inline fn getWritable(self: *const T, pf_prop_: ?*BOOL) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).get_Writable(@as(*const IAzAuthorizationStore, @ptrCast(self)), pf_prop_);
            }
            pub inline fn getProperty(self: *const T, l_prop_id_: i32, var_reserved_: VARIANT, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IAzAuthorizationStore, @ptrCast(self)), l_prop_id_, var_reserved_, pvar_prop_);
            }
            pub inline fn setProperty(self: *const T, l_prop_id_: i32, var_prop_: VARIANT, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).SetProperty(@as(*const IAzAuthorizationStore, @ptrCast(self)), l_prop_id_, var_prop_, var_reserved_);
            }
            pub inline fn addPropertyItem(self: *const T, l_prop_id_: AZ_PROP_CONSTANTS, var_prop_: VARIANT, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).AddPropertyItem(@as(*const IAzAuthorizationStore, @ptrCast(self)), l_prop_id_, var_prop_, var_reserved_);
            }
            pub inline fn deletePropertyItem(self: *const T, l_prop_id_: i32, var_prop_: VARIANT, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).DeletePropertyItem(@as(*const IAzAuthorizationStore, @ptrCast(self)), l_prop_id_, var_prop_, var_reserved_);
            }
            pub inline fn getPolicyAdministrators(self: *const T, pvar_admins_: ?*VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).get_PolicyAdministrators(@as(*const IAzAuthorizationStore, @ptrCast(self)), pvar_admins_);
            }
            pub inline fn getPolicyReaders(self: *const T, pvar_readers_: ?*VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).get_PolicyReaders(@as(*const IAzAuthorizationStore, @ptrCast(self)), pvar_readers_);
            }
            pub inline fn addPolicyAdministrator(self: *const T, bstr_admin_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).AddPolicyAdministrator(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_admin_, var_reserved_);
            }
            pub inline fn deletePolicyAdministrator(self: *const T, bstr_admin_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).DeletePolicyAdministrator(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_admin_, var_reserved_);
            }
            pub inline fn addPolicyReader(self: *const T, bstr_reader_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).AddPolicyReader(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_reader_, var_reserved_);
            }
            pub inline fn deletePolicyReader(self: *const T, bstr_reader_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).DeletePolicyReader(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_reader_, var_reserved_);
            }
            pub inline fn initialize(self: *const T, l_flags_: AZ_PROP_CONSTANTS, bstr_policy_u_r_l_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IAzAuthorizationStore, @ptrCast(self)), l_flags_, bstr_policy_u_r_l_, var_reserved_);
            }
            pub inline fn updateCache(self: *const T, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).UpdateCache(@as(*const IAzAuthorizationStore, @ptrCast(self)), var_reserved_);
            }
            pub inline fn delete(self: *const T, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).Delete(@as(*const IAzAuthorizationStore, @ptrCast(self)), var_reserved_);
            }
            pub inline fn getApplications(self: *const T, pp_app_collection_: ?*?*IAzApplications) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).get_Applications(@as(*const IAzAuthorizationStore, @ptrCast(self)), pp_app_collection_);
            }
            pub inline fn openApplication(self: *const T, bstr_application_name_: ?BSTR, var_reserved_: VARIANT, pp_application_: ?*?*IAzApplication) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).OpenApplication(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_application_name_, var_reserved_, pp_application_);
            }
            pub inline fn createApplication(self: *const T, bstr_application_name_: ?BSTR, var_reserved_: VARIANT, pp_application_: ?*?*IAzApplication) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).CreateApplication(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_application_name_, var_reserved_, pp_application_);
            }
            pub inline fn deleteApplication(self: *const T, bstr_application_name_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).DeleteApplication(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_application_name_, var_reserved_);
            }
            pub inline fn getApplicationGroups(self: *const T, pp_group_collection_: ?*?*IAzApplicationGroups) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).get_ApplicationGroups(@as(*const IAzAuthorizationStore, @ptrCast(self)), pp_group_collection_);
            }
            pub inline fn createApplicationGroup(self: *const T, bstr_group_name_: ?BSTR, var_reserved_: VARIANT, pp_group_: ?*?*IAzApplicationGroup) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).CreateApplicationGroup(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_group_name_, var_reserved_, pp_group_);
            }
            pub inline fn openApplicationGroup(self: *const T, bstr_group_name_: ?BSTR, var_reserved_: VARIANT, pp_group_: ?*?*IAzApplicationGroup) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).OpenApplicationGroup(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_group_name_, var_reserved_, pp_group_);
            }
            pub inline fn deleteApplicationGroup(self: *const T, bstr_group_name_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).DeleteApplicationGroup(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_group_name_, var_reserved_);
            }
            pub inline fn submit(self: *const T, l_flags_: i32, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).Submit(@as(*const IAzAuthorizationStore, @ptrCast(self)), l_flags_, var_reserved_);
            }
            pub inline fn getDelegatedPolicyUsers(self: *const T, pvar_delegated_policy_users_: ?*VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).get_DelegatedPolicyUsers(@as(*const IAzAuthorizationStore, @ptrCast(self)), pvar_delegated_policy_users_);
            }
            pub inline fn addDelegatedPolicyUser(self: *const T, bstr_delegated_policy_user_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).AddDelegatedPolicyUser(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_delegated_policy_user_, var_reserved_);
            }
            pub inline fn deleteDelegatedPolicyUser(self: *const T, bstr_delegated_policy_user_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).DeleteDelegatedPolicyUser(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_delegated_policy_user_, var_reserved_);
            }
            pub inline fn getTargetMachine(self: *const T, pbstr_target_machine_: ?*?BSTR) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).get_TargetMachine(@as(*const IAzAuthorizationStore, @ptrCast(self)), pbstr_target_machine_);
            }
            pub inline fn getApplyStoreSacl(self: *const T, pb_apply_store_sacl_: ?*BOOL) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).get_ApplyStoreSacl(@as(*const IAzAuthorizationStore, @ptrCast(self)), pb_apply_store_sacl_);
            }
            pub inline fn putApplyStoreSacl(self: *const T, b_apply_store_sacl_: BOOL) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).put_ApplyStoreSacl(@as(*const IAzAuthorizationStore, @ptrCast(self)), b_apply_store_sacl_);
            }
            pub inline fn getPolicyAdministratorsName(self: *const T, pvar_admins_: ?*VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).get_PolicyAdministratorsName(@as(*const IAzAuthorizationStore, @ptrCast(self)), pvar_admins_);
            }
            pub inline fn getPolicyReadersName(self: *const T, pvar_readers_: ?*VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).get_PolicyReadersName(@as(*const IAzAuthorizationStore, @ptrCast(self)), pvar_readers_);
            }
            pub inline fn addPolicyAdministratorName(self: *const T, bstr_admin_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).AddPolicyAdministratorName(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_admin_, var_reserved_);
            }
            pub inline fn deletePolicyAdministratorName(self: *const T, bstr_admin_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).DeletePolicyAdministratorName(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_admin_, var_reserved_);
            }
            pub inline fn addPolicyReaderName(self: *const T, bstr_reader_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).AddPolicyReaderName(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_reader_, var_reserved_);
            }
            pub inline fn deletePolicyReaderName(self: *const T, bstr_reader_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).DeletePolicyReaderName(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_reader_, var_reserved_);
            }
            pub inline fn getDelegatedPolicyUsersName(self: *const T, pvar_delegated_policy_users_: ?*VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).get_DelegatedPolicyUsersName(@as(*const IAzAuthorizationStore, @ptrCast(self)), pvar_delegated_policy_users_);
            }
            pub inline fn addDelegatedPolicyUserName(self: *const T, bstr_delegated_policy_user_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).AddDelegatedPolicyUserName(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_delegated_policy_user_, var_reserved_);
            }
            pub inline fn deleteDelegatedPolicyUserName(self: *const T, bstr_delegated_policy_user_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).DeleteDelegatedPolicyUserName(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_delegated_policy_user_, var_reserved_);
            }
            pub inline fn closeApplication(self: *const T, bstr_application_name_: ?BSTR, l_flag_: i32) HRESULT {
                return @as(*const IAzAuthorizationStore.VTable, @ptrCast(self.vtable)).CloseApplication(@as(*const IAzAuthorizationStore, @ptrCast(self)), bstr_application_name_, l_flag_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IAzAuthorizationStore2_Value = Guid.initString("b11e5584-d577-4273-b6c5-0973e0f8e80d");
pub const IID_IAzAuthorizationStore2 = &IID_IAzAuthorizationStore2_Value;
pub const IAzAuthorizationStore2 = extern struct {
    pub const VTable = extern struct {
        base: IAzAuthorizationStore.VTable,
        OpenApplication2: *const fn (
            self: *const IAzAuthorizationStore2,
            bstr_application_name: ?BSTR,
            var_reserved: VARIANT,
            pp_application: ?*?*IAzApplication2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateApplication2: *const fn (
            self: *const IAzAuthorizationStore2,
            bstr_application_name: ?BSTR,
            var_reserved: VARIANT,
            pp_application: ?*?*IAzApplication2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IAzAuthorizationStore.MethodMixin(T);
            pub inline fn openApplication2(self: *const T, bstr_application_name_: ?BSTR, var_reserved_: VARIANT, pp_application_: ?*?*IAzApplication2) HRESULT {
                return @as(*const IAzAuthorizationStore2.VTable, @ptrCast(self.vtable)).OpenApplication2(@as(*const IAzAuthorizationStore2, @ptrCast(self)), bstr_application_name_, var_reserved_, pp_application_);
            }
            pub inline fn createApplication2(self: *const T, bstr_application_name_: ?BSTR, var_reserved_: VARIANT, pp_application_: ?*?*IAzApplication2) HRESULT {
                return @as(*const IAzAuthorizationStore2.VTable, @ptrCast(self.vtable)).CreateApplication2(@as(*const IAzAuthorizationStore2, @ptrCast(self)), bstr_application_name_, var_reserved_, pp_application_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzAuthorizationStore3_Value = Guid.initString("abc08425-0c86-4fa0-9be3-7189956c926e");
pub const IID_IAzAuthorizationStore3 = &IID_IAzAuthorizationStore3_Value;
pub const IAzAuthorizationStore3 = extern struct {
    pub const VTable = extern struct {
        base: IAzAuthorizationStore2.VTable,
        IsUpdateNeeded: *const fn (
            self: *const IAzAuthorizationStore3,
            pb_is_update_needed: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BizruleGroupSupported: *const fn (
            self: *const IAzAuthorizationStore3,
            pb_supported: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpgradeStoresFunctionalLevel: *const fn (
            self: *const IAzAuthorizationStore3,
            l_functional_level: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsFunctionalLevelUpgradeSupported: *const fn (
            self: *const IAzAuthorizationStore3,
            l_functional_level: i32,
            pb_supported: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSchemaVersion: *const fn (
            self: *const IAzAuthorizationStore3,
            pl_major_version: ?*i32,
            pl_minor_version: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IAzAuthorizationStore2.MethodMixin(T);
            pub inline fn isUpdateNeeded(self: *const T, pb_is_update_needed_: ?*i16) HRESULT {
                return @as(*const IAzAuthorizationStore3.VTable, @ptrCast(self.vtable)).IsUpdateNeeded(@as(*const IAzAuthorizationStore3, @ptrCast(self)), pb_is_update_needed_);
            }
            pub inline fn bizruleGroupSupported(self: *const T, pb_supported_: ?*i16) HRESULT {
                return @as(*const IAzAuthorizationStore3.VTable, @ptrCast(self.vtable)).BizruleGroupSupported(@as(*const IAzAuthorizationStore3, @ptrCast(self)), pb_supported_);
            }
            pub inline fn upgradeStoresFunctionalLevel(self: *const T, l_functional_level_: i32) HRESULT {
                return @as(*const IAzAuthorizationStore3.VTable, @ptrCast(self.vtable)).UpgradeStoresFunctionalLevel(@as(*const IAzAuthorizationStore3, @ptrCast(self)), l_functional_level_);
            }
            pub inline fn isFunctionalLevelUpgradeSupported(self: *const T, l_functional_level_: i32, pb_supported_: ?*i16) HRESULT {
                return @as(*const IAzAuthorizationStore3.VTable, @ptrCast(self.vtable)).IsFunctionalLevelUpgradeSupported(@as(*const IAzAuthorizationStore3, @ptrCast(self)), l_functional_level_, pb_supported_);
            }
            pub inline fn getSchemaVersion(self: *const T, pl_major_version_: ?*i32, pl_minor_version_: ?*i32) HRESULT {
                return @as(*const IAzAuthorizationStore3.VTable, @ptrCast(self.vtable)).GetSchemaVersion(@as(*const IAzAuthorizationStore3, @ptrCast(self)), pl_major_version_, pl_minor_version_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzApplication_Value = Guid.initString("987bc7c7-b813-4d27-bede-6ba5ae867e95");
pub const IID_IAzApplication = &IID_IAzApplication_Value;
pub const IAzApplication = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            bstr_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            pbstr_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ApplicationData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            pbstr_application_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ApplicationData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            bstr_application_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthzInterfaceClsid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            pbstr_prop: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthzInterfaceClsid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            bstr_prop: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Version: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            pbstr_prop: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Version: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            bstr_prop: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GenerateAudits: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            pb_prop: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GenerateAudits: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            b_prop: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ApplyStoreSacl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            pb_prop: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ApplyStoreSacl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            b_prop: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Writable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            pf_prop: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn (
            self: *const IAzApplication,
            l_prop_id: i32,
            var_reserved: VARIANT,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn (
            self: *const IAzApplication,
            l_prop_id: i32,
            var_prop: VARIANT,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyAdministrators: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            pvar_admins: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyReaders: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            pvar_readers: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyAdministrator: *const fn (
            self: *const IAzApplication,
            bstr_admin: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyAdministrator: *const fn (
            self: *const IAzApplication,
            bstr_admin: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyReader: *const fn (
            self: *const IAzApplication,
            bstr_reader: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyReader: *const fn (
            self: *const IAzApplication,
            bstr_reader: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Scopes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            pp_scope_collection: ?*?*IAzScopes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenScope: *const fn (
            self: *const IAzApplication,
            bstr_scope_name: ?BSTR,
            var_reserved: VARIANT,
            pp_scope: ?*?*IAzScope,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateScope: *const fn (
            self: *const IAzApplication,
            bstr_scope_name: ?BSTR,
            var_reserved: VARIANT,
            pp_scope: ?*?*IAzScope,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteScope: *const fn (
            self: *const IAzApplication,
            bstr_scope_name: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Operations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            pp_operation_collection: ?*?*IAzOperations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenOperation: *const fn (
            self: *const IAzApplication,
            bstr_operation_name: ?BSTR,
            var_reserved: VARIANT,
            pp_operation: ?*?*IAzOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateOperation: *const fn (
            self: *const IAzApplication,
            bstr_operation_name: ?BSTR,
            var_reserved: VARIANT,
            pp_operation: ?*?*IAzOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteOperation: *const fn (
            self: *const IAzApplication,
            bstr_operation_name: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Tasks: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            pp_task_collection: ?*?*IAzTasks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenTask: *const fn (
            self: *const IAzApplication,
            bstr_task_name: ?BSTR,
            var_reserved: VARIANT,
            pp_task: ?*?*IAzTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTask: *const fn (
            self: *const IAzApplication,
            bstr_task_name: ?BSTR,
            var_reserved: VARIANT,
            pp_task: ?*?*IAzTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteTask: *const fn (
            self: *const IAzApplication,
            bstr_task_name: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ApplicationGroups: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            pp_group_collection: ?*?*IAzApplicationGroups,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenApplicationGroup: *const fn (
            self: *const IAzApplication,
            bstr_group_name: ?BSTR,
            var_reserved: VARIANT,
            pp_group: ?*?*IAzApplicationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateApplicationGroup: *const fn (
            self: *const IAzApplication,
            bstr_group_name: ?BSTR,
            var_reserved: VARIANT,
            pp_group: ?*?*IAzApplicationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteApplicationGroup: *const fn (
            self: *const IAzApplication,
            bstr_group_name: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Roles: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            pp_role_collection: ?*?*IAzRoles,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenRole: *const fn (
            self: *const IAzApplication,
            bstr_role_name: ?BSTR,
            var_reserved: VARIANT,
            pp_role: ?*?*IAzRole,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRole: *const fn (
            self: *const IAzApplication,
            bstr_role_name: ?BSTR,
            var_reserved: VARIANT,
            pp_role: ?*?*IAzRole,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRole: *const fn (
            self: *const IAzApplication,
            bstr_role_name: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeClientContextFromToken: *const fn (
            self: *const IAzApplication,
            ull_token_handle: u64,
            var_reserved: VARIANT,
            pp_client_context: ?*?*IAzClientContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPropertyItem: *const fn (
            self: *const IAzApplication,
            l_prop_id: i32,
            var_prop: VARIANT,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePropertyItem: *const fn (
            self: *const IAzApplication,
            l_prop_id: i32,
            var_prop: VARIANT,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Submit: *const fn (
            self: *const IAzApplication,
            l_flags: i32,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeClientContextFromName: *const fn (
            self: *const IAzApplication,
            client_name: ?BSTR,
            domain_name: ?BSTR,
            var_reserved: VARIANT,
            pp_client_context: ?*?*IAzClientContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DelegatedPolicyUsers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            pvar_delegated_policy_users: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDelegatedPolicyUser: *const fn (
            self: *const IAzApplication,
            bstr_delegated_policy_user: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteDelegatedPolicyUser: *const fn (
            self: *const IAzApplication,
            bstr_delegated_policy_user: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeClientContextFromStringSid: *const fn (
            self: *const IAzApplication,
            sid_string: ?BSTR,
            l_options: i32,
            var_reserved: VARIANT,
            pp_client_context: ?*?*IAzClientContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyAdministratorsName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            pvar_admins: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyReadersName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            pvar_readers: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyAdministratorName: *const fn (
            self: *const IAzApplication,
            bstr_admin: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyAdministratorName: *const fn (
            self: *const IAzApplication,
            bstr_admin: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyReaderName: *const fn (
            self: *const IAzApplication,
            bstr_reader: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyReaderName: *const fn (
            self: *const IAzApplication,
            bstr_reader: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DelegatedPolicyUsersName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication,
            pvar_delegated_policy_users: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDelegatedPolicyUserName: *const fn (
            self: *const IAzApplication,
            bstr_delegated_policy_user: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteDelegatedPolicyUserName: *const fn (
            self: *const IAzApplication,
            bstr_delegated_policy_user: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IAzApplication, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn putName(self: *const T, bstr_name_: ?BSTR) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IAzApplication, @ptrCast(self)), bstr_name_);
            }
            pub inline fn getDescription(self: *const T, pbstr_description_: ?*?BSTR) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IAzApplication, @ptrCast(self)), pbstr_description_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IAzApplication, @ptrCast(self)), bstr_description_);
            }
            pub inline fn getApplicationData(self: *const T, pbstr_application_data_: ?*?BSTR) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).get_ApplicationData(@as(*const IAzApplication, @ptrCast(self)), pbstr_application_data_);
            }
            pub inline fn putApplicationData(self: *const T, bstr_application_data_: ?BSTR) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).put_ApplicationData(@as(*const IAzApplication, @ptrCast(self)), bstr_application_data_);
            }
            pub inline fn getAuthzInterfaceClsid(self: *const T, pbstr_prop_: ?*?BSTR) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).get_AuthzInterfaceClsid(@as(*const IAzApplication, @ptrCast(self)), pbstr_prop_);
            }
            pub inline fn putAuthzInterfaceClsid(self: *const T, bstr_prop_: ?BSTR) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).put_AuthzInterfaceClsid(@as(*const IAzApplication, @ptrCast(self)), bstr_prop_);
            }
            pub inline fn getVersion(self: *const T, pbstr_prop_: ?*?BSTR) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).get_Version(@as(*const IAzApplication, @ptrCast(self)), pbstr_prop_);
            }
            pub inline fn putVersion(self: *const T, bstr_prop_: ?BSTR) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).put_Version(@as(*const IAzApplication, @ptrCast(self)), bstr_prop_);
            }
            pub inline fn getGenerateAudits(self: *const T, pb_prop_: ?*BOOL) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).get_GenerateAudits(@as(*const IAzApplication, @ptrCast(self)), pb_prop_);
            }
            pub inline fn putGenerateAudits(self: *const T, b_prop_: BOOL) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).put_GenerateAudits(@as(*const IAzApplication, @ptrCast(self)), b_prop_);
            }
            pub inline fn getApplyStoreSacl(self: *const T, pb_prop_: ?*BOOL) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).get_ApplyStoreSacl(@as(*const IAzApplication, @ptrCast(self)), pb_prop_);
            }
            pub inline fn putApplyStoreSacl(self: *const T, b_prop_: BOOL) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).put_ApplyStoreSacl(@as(*const IAzApplication, @ptrCast(self)), b_prop_);
            }
            pub inline fn getWritable(self: *const T, pf_prop_: ?*BOOL) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).get_Writable(@as(*const IAzApplication, @ptrCast(self)), pf_prop_);
            }
            pub inline fn getProperty(self: *const T, l_prop_id_: i32, var_reserved_: VARIANT, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IAzApplication, @ptrCast(self)), l_prop_id_, var_reserved_, pvar_prop_);
            }
            pub inline fn setProperty(self: *const T, l_prop_id_: i32, var_prop_: VARIANT, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).SetProperty(@as(*const IAzApplication, @ptrCast(self)), l_prop_id_, var_prop_, var_reserved_);
            }
            pub inline fn getPolicyAdministrators(self: *const T, pvar_admins_: ?*VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).get_PolicyAdministrators(@as(*const IAzApplication, @ptrCast(self)), pvar_admins_);
            }
            pub inline fn getPolicyReaders(self: *const T, pvar_readers_: ?*VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).get_PolicyReaders(@as(*const IAzApplication, @ptrCast(self)), pvar_readers_);
            }
            pub inline fn addPolicyAdministrator(self: *const T, bstr_admin_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).AddPolicyAdministrator(@as(*const IAzApplication, @ptrCast(self)), bstr_admin_, var_reserved_);
            }
            pub inline fn deletePolicyAdministrator(self: *const T, bstr_admin_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).DeletePolicyAdministrator(@as(*const IAzApplication, @ptrCast(self)), bstr_admin_, var_reserved_);
            }
            pub inline fn addPolicyReader(self: *const T, bstr_reader_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).AddPolicyReader(@as(*const IAzApplication, @ptrCast(self)), bstr_reader_, var_reserved_);
            }
            pub inline fn deletePolicyReader(self: *const T, bstr_reader_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).DeletePolicyReader(@as(*const IAzApplication, @ptrCast(self)), bstr_reader_, var_reserved_);
            }
            pub inline fn getScopes(self: *const T, pp_scope_collection_: ?*?*IAzScopes) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).get_Scopes(@as(*const IAzApplication, @ptrCast(self)), pp_scope_collection_);
            }
            pub inline fn openScope(self: *const T, bstr_scope_name_: ?BSTR, var_reserved_: VARIANT, pp_scope_: ?*?*IAzScope) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).OpenScope(@as(*const IAzApplication, @ptrCast(self)), bstr_scope_name_, var_reserved_, pp_scope_);
            }
            pub inline fn createScope(self: *const T, bstr_scope_name_: ?BSTR, var_reserved_: VARIANT, pp_scope_: ?*?*IAzScope) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).CreateScope(@as(*const IAzApplication, @ptrCast(self)), bstr_scope_name_, var_reserved_, pp_scope_);
            }
            pub inline fn deleteScope(self: *const T, bstr_scope_name_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).DeleteScope(@as(*const IAzApplication, @ptrCast(self)), bstr_scope_name_, var_reserved_);
            }
            pub inline fn getOperations(self: *const T, pp_operation_collection_: ?*?*IAzOperations) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).get_Operations(@as(*const IAzApplication, @ptrCast(self)), pp_operation_collection_);
            }
            pub inline fn openOperation(self: *const T, bstr_operation_name_: ?BSTR, var_reserved_: VARIANT, pp_operation_: ?*?*IAzOperation) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).OpenOperation(@as(*const IAzApplication, @ptrCast(self)), bstr_operation_name_, var_reserved_, pp_operation_);
            }
            pub inline fn createOperation(self: *const T, bstr_operation_name_: ?BSTR, var_reserved_: VARIANT, pp_operation_: ?*?*IAzOperation) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).CreateOperation(@as(*const IAzApplication, @ptrCast(self)), bstr_operation_name_, var_reserved_, pp_operation_);
            }
            pub inline fn deleteOperation(self: *const T, bstr_operation_name_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).DeleteOperation(@as(*const IAzApplication, @ptrCast(self)), bstr_operation_name_, var_reserved_);
            }
            pub inline fn getTasks(self: *const T, pp_task_collection_: ?*?*IAzTasks) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).get_Tasks(@as(*const IAzApplication, @ptrCast(self)), pp_task_collection_);
            }
            pub inline fn openTask(self: *const T, bstr_task_name_: ?BSTR, var_reserved_: VARIANT, pp_task_: ?*?*IAzTask) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).OpenTask(@as(*const IAzApplication, @ptrCast(self)), bstr_task_name_, var_reserved_, pp_task_);
            }
            pub inline fn createTask(self: *const T, bstr_task_name_: ?BSTR, var_reserved_: VARIANT, pp_task_: ?*?*IAzTask) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).CreateTask(@as(*const IAzApplication, @ptrCast(self)), bstr_task_name_, var_reserved_, pp_task_);
            }
            pub inline fn deleteTask(self: *const T, bstr_task_name_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).DeleteTask(@as(*const IAzApplication, @ptrCast(self)), bstr_task_name_, var_reserved_);
            }
            pub inline fn getApplicationGroups(self: *const T, pp_group_collection_: ?*?*IAzApplicationGroups) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).get_ApplicationGroups(@as(*const IAzApplication, @ptrCast(self)), pp_group_collection_);
            }
            pub inline fn openApplicationGroup(self: *const T, bstr_group_name_: ?BSTR, var_reserved_: VARIANT, pp_group_: ?*?*IAzApplicationGroup) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).OpenApplicationGroup(@as(*const IAzApplication, @ptrCast(self)), bstr_group_name_, var_reserved_, pp_group_);
            }
            pub inline fn createApplicationGroup(self: *const T, bstr_group_name_: ?BSTR, var_reserved_: VARIANT, pp_group_: ?*?*IAzApplicationGroup) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).CreateApplicationGroup(@as(*const IAzApplication, @ptrCast(self)), bstr_group_name_, var_reserved_, pp_group_);
            }
            pub inline fn deleteApplicationGroup(self: *const T, bstr_group_name_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).DeleteApplicationGroup(@as(*const IAzApplication, @ptrCast(self)), bstr_group_name_, var_reserved_);
            }
            pub inline fn getRoles(self: *const T, pp_role_collection_: ?*?*IAzRoles) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).get_Roles(@as(*const IAzApplication, @ptrCast(self)), pp_role_collection_);
            }
            pub inline fn openRole(self: *const T, bstr_role_name_: ?BSTR, var_reserved_: VARIANT, pp_role_: ?*?*IAzRole) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).OpenRole(@as(*const IAzApplication, @ptrCast(self)), bstr_role_name_, var_reserved_, pp_role_);
            }
            pub inline fn createRole(self: *const T, bstr_role_name_: ?BSTR, var_reserved_: VARIANT, pp_role_: ?*?*IAzRole) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).CreateRole(@as(*const IAzApplication, @ptrCast(self)), bstr_role_name_, var_reserved_, pp_role_);
            }
            pub inline fn deleteRole(self: *const T, bstr_role_name_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).DeleteRole(@as(*const IAzApplication, @ptrCast(self)), bstr_role_name_, var_reserved_);
            }
            pub inline fn initializeClientContextFromToken(self: *const T, ull_token_handle_: u64, var_reserved_: VARIANT, pp_client_context_: ?*?*IAzClientContext) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).InitializeClientContextFromToken(@as(*const IAzApplication, @ptrCast(self)), ull_token_handle_, var_reserved_, pp_client_context_);
            }
            pub inline fn addPropertyItem(self: *const T, l_prop_id_: i32, var_prop_: VARIANT, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).AddPropertyItem(@as(*const IAzApplication, @ptrCast(self)), l_prop_id_, var_prop_, var_reserved_);
            }
            pub inline fn deletePropertyItem(self: *const T, l_prop_id_: i32, var_prop_: VARIANT, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).DeletePropertyItem(@as(*const IAzApplication, @ptrCast(self)), l_prop_id_, var_prop_, var_reserved_);
            }
            pub inline fn submit(self: *const T, l_flags_: i32, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).Submit(@as(*const IAzApplication, @ptrCast(self)), l_flags_, var_reserved_);
            }
            pub inline fn initializeClientContextFromName(self: *const T, client_name_: ?BSTR, domain_name_: ?BSTR, var_reserved_: VARIANT, pp_client_context_: ?*?*IAzClientContext) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).InitializeClientContextFromName(@as(*const IAzApplication, @ptrCast(self)), client_name_, domain_name_, var_reserved_, pp_client_context_);
            }
            pub inline fn getDelegatedPolicyUsers(self: *const T, pvar_delegated_policy_users_: ?*VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).get_DelegatedPolicyUsers(@as(*const IAzApplication, @ptrCast(self)), pvar_delegated_policy_users_);
            }
            pub inline fn addDelegatedPolicyUser(self: *const T, bstr_delegated_policy_user_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).AddDelegatedPolicyUser(@as(*const IAzApplication, @ptrCast(self)), bstr_delegated_policy_user_, var_reserved_);
            }
            pub inline fn deleteDelegatedPolicyUser(self: *const T, bstr_delegated_policy_user_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).DeleteDelegatedPolicyUser(@as(*const IAzApplication, @ptrCast(self)), bstr_delegated_policy_user_, var_reserved_);
            }
            pub inline fn initializeClientContextFromStringSid(self: *const T, sid_string_: ?BSTR, l_options_: i32, var_reserved_: VARIANT, pp_client_context_: ?*?*IAzClientContext) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).InitializeClientContextFromStringSid(@as(*const IAzApplication, @ptrCast(self)), sid_string_, l_options_, var_reserved_, pp_client_context_);
            }
            pub inline fn getPolicyAdministratorsName(self: *const T, pvar_admins_: ?*VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).get_PolicyAdministratorsName(@as(*const IAzApplication, @ptrCast(self)), pvar_admins_);
            }
            pub inline fn getPolicyReadersName(self: *const T, pvar_readers_: ?*VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).get_PolicyReadersName(@as(*const IAzApplication, @ptrCast(self)), pvar_readers_);
            }
            pub inline fn addPolicyAdministratorName(self: *const T, bstr_admin_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).AddPolicyAdministratorName(@as(*const IAzApplication, @ptrCast(self)), bstr_admin_, var_reserved_);
            }
            pub inline fn deletePolicyAdministratorName(self: *const T, bstr_admin_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).DeletePolicyAdministratorName(@as(*const IAzApplication, @ptrCast(self)), bstr_admin_, var_reserved_);
            }
            pub inline fn addPolicyReaderName(self: *const T, bstr_reader_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).AddPolicyReaderName(@as(*const IAzApplication, @ptrCast(self)), bstr_reader_, var_reserved_);
            }
            pub inline fn deletePolicyReaderName(self: *const T, bstr_reader_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).DeletePolicyReaderName(@as(*const IAzApplication, @ptrCast(self)), bstr_reader_, var_reserved_);
            }
            pub inline fn getDelegatedPolicyUsersName(self: *const T, pvar_delegated_policy_users_: ?*VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).get_DelegatedPolicyUsersName(@as(*const IAzApplication, @ptrCast(self)), pvar_delegated_policy_users_);
            }
            pub inline fn addDelegatedPolicyUserName(self: *const T, bstr_delegated_policy_user_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).AddDelegatedPolicyUserName(@as(*const IAzApplication, @ptrCast(self)), bstr_delegated_policy_user_, var_reserved_);
            }
            pub inline fn deleteDelegatedPolicyUserName(self: *const T, bstr_delegated_policy_user_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplication.VTable, @ptrCast(self.vtable)).DeleteDelegatedPolicyUserName(@as(*const IAzApplication, @ptrCast(self)), bstr_delegated_policy_user_, var_reserved_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzApplication2_Value = Guid.initString("086a68af-a249-437c-b18d-d4d86d6a9660");
pub const IID_IAzApplication2 = &IID_IAzApplication2_Value;
pub const IAzApplication2 = extern struct {
    pub const VTable = extern struct {
        base: IAzApplication.VTable,
        InitializeClientContextFromToken2: *const fn (
            self: *const IAzApplication2,
            ul_token_handle_low_part: u32,
            ul_token_handle_high_part: u32,
            var_reserved: VARIANT,
            pp_client_context: ?*?*IAzClientContext2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeClientContext2: *const fn (
            self: *const IAzApplication2,
            identifying_string: ?BSTR,
            var_reserved: VARIANT,
            pp_client_context: ?*?*IAzClientContext2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IAzApplication.MethodMixin(T);
            pub inline fn initializeClientContextFromToken2(self: *const T, ul_token_handle_low_part_: u32, ul_token_handle_high_part_: u32, var_reserved_: VARIANT, pp_client_context_: ?*?*IAzClientContext2) HRESULT {
                return @as(*const IAzApplication2.VTable, @ptrCast(self.vtable)).InitializeClientContextFromToken2(@as(*const IAzApplication2, @ptrCast(self)), ul_token_handle_low_part_, ul_token_handle_high_part_, var_reserved_, pp_client_context_);
            }
            pub inline fn initializeClientContext2(self: *const T, identifying_string_: ?BSTR, var_reserved_: VARIANT, pp_client_context_: ?*?*IAzClientContext2) HRESULT {
                return @as(*const IAzApplication2.VTable, @ptrCast(self.vtable)).InitializeClientContext2(@as(*const IAzApplication2, @ptrCast(self)), identifying_string_, var_reserved_, pp_client_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzApplications_Value = Guid.initString("929b11a9-95c5-4a84-a29a-20ad42c2f16c");
pub const IID_IAzApplications = &IID_IAzApplications_Value;
pub const IAzApplications = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplications,
            index: i32,
            pvar_obt_ptr: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplications,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplications,
            pp_enum_ptr: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItem(self: *const T, index_: i32, pvar_obt_ptr_: ?*VARIANT) HRESULT {
                return @as(*const IAzApplications.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IAzApplications, @ptrCast(self)), index_, pvar_obt_ptr_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IAzApplications.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IAzApplications, @ptrCast(self)), pl_count_);
            }
            pub inline fn getNewEnum(self: *const T, pp_enum_ptr_: ?*?*IUnknown) HRESULT {
                return @as(*const IAzApplications.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IAzApplications, @ptrCast(self)), pp_enum_ptr_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzOperation_Value = Guid.initString("5e56b24f-ea01-4d61-be44-c49b5e4eaf74");
pub const IID_IAzOperation = &IID_IAzOperation_Value;
pub const IAzOperation = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzOperation,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzOperation,
            bstr_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzOperation,
            pbstr_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzOperation,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ApplicationData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzOperation,
            pbstr_application_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ApplicationData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzOperation,
            bstr_application_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OperationID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzOperation,
            pl_prop: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OperationID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzOperation,
            l_prop: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Writable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzOperation,
            pf_prop: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn (
            self: *const IAzOperation,
            l_prop_id: i32,
            var_reserved: VARIANT,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn (
            self: *const IAzOperation,
            l_prop_id: i32,
            var_prop: VARIANT,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Submit: *const fn (
            self: *const IAzOperation,
            l_flags: i32,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IAzOperation.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IAzOperation, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn putName(self: *const T, bstr_name_: ?BSTR) HRESULT {
                return @as(*const IAzOperation.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IAzOperation, @ptrCast(self)), bstr_name_);
            }
            pub inline fn getDescription(self: *const T, pbstr_description_: ?*?BSTR) HRESULT {
                return @as(*const IAzOperation.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IAzOperation, @ptrCast(self)), pbstr_description_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IAzOperation.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IAzOperation, @ptrCast(self)), bstr_description_);
            }
            pub inline fn getApplicationData(self: *const T, pbstr_application_data_: ?*?BSTR) HRESULT {
                return @as(*const IAzOperation.VTable, @ptrCast(self.vtable)).get_ApplicationData(@as(*const IAzOperation, @ptrCast(self)), pbstr_application_data_);
            }
            pub inline fn putApplicationData(self: *const T, bstr_application_data_: ?BSTR) HRESULT {
                return @as(*const IAzOperation.VTable, @ptrCast(self.vtable)).put_ApplicationData(@as(*const IAzOperation, @ptrCast(self)), bstr_application_data_);
            }
            pub inline fn getOperationID(self: *const T, pl_prop_: ?*i32) HRESULT {
                return @as(*const IAzOperation.VTable, @ptrCast(self.vtable)).get_OperationID(@as(*const IAzOperation, @ptrCast(self)), pl_prop_);
            }
            pub inline fn putOperationID(self: *const T, l_prop_: i32) HRESULT {
                return @as(*const IAzOperation.VTable, @ptrCast(self.vtable)).put_OperationID(@as(*const IAzOperation, @ptrCast(self)), l_prop_);
            }
            pub inline fn getWritable(self: *const T, pf_prop_: ?*BOOL) HRESULT {
                return @as(*const IAzOperation.VTable, @ptrCast(self.vtable)).get_Writable(@as(*const IAzOperation, @ptrCast(self)), pf_prop_);
            }
            pub inline fn getProperty(self: *const T, l_prop_id_: i32, var_reserved_: VARIANT, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzOperation.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IAzOperation, @ptrCast(self)), l_prop_id_, var_reserved_, pvar_prop_);
            }
            pub inline fn setProperty(self: *const T, l_prop_id_: i32, var_prop_: VARIANT, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzOperation.VTable, @ptrCast(self.vtable)).SetProperty(@as(*const IAzOperation, @ptrCast(self)), l_prop_id_, var_prop_, var_reserved_);
            }
            pub inline fn submit(self: *const T, l_flags_: i32, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzOperation.VTable, @ptrCast(self.vtable)).Submit(@as(*const IAzOperation, @ptrCast(self)), l_flags_, var_reserved_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzOperations_Value = Guid.initString("90ef9c07-9706-49d9-af80-0438a5f3ec35");
pub const IID_IAzOperations = &IID_IAzOperations_Value;
pub const IAzOperations = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzOperations,
            index: i32,
            pvar_obt_ptr: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzOperations,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzOperations,
            pp_enum_ptr: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItem(self: *const T, index_: i32, pvar_obt_ptr_: ?*VARIANT) HRESULT {
                return @as(*const IAzOperations.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IAzOperations, @ptrCast(self)), index_, pvar_obt_ptr_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IAzOperations.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IAzOperations, @ptrCast(self)), pl_count_);
            }
            pub inline fn getNewEnum(self: *const T, pp_enum_ptr_: ?*?*IUnknown) HRESULT {
                return @as(*const IAzOperations.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IAzOperations, @ptrCast(self)), pp_enum_ptr_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzTask_Value = Guid.initString("cb94e592-2e0e-4a6c-a336-b89a6dc1e388");
pub const IID_IAzTask = &IID_IAzTask_Value;
pub const IAzTask = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzTask,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzTask,
            bstr_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzTask,
            pbstr_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzTask,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ApplicationData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzTask,
            pbstr_application_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ApplicationData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzTask,
            bstr_application_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BizRule: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzTask,
            pbstr_prop: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BizRule: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzTask,
            bstr_prop: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BizRuleLanguage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzTask,
            pbstr_prop: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BizRuleLanguage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzTask,
            bstr_prop: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BizRuleImportedPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzTask,
            pbstr_prop: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BizRuleImportedPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzTask,
            bstr_prop: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsRoleDefinition: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzTask,
            pf_prop: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IsRoleDefinition: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzTask,
            f_prop: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Operations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzTask,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Tasks: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzTask,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddOperation: *const fn (
            self: *const IAzTask,
            bstr_op: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteOperation: *const fn (
            self: *const IAzTask,
            bstr_op: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTask: *const fn (
            self: *const IAzTask,
            bstr_task: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteTask: *const fn (
            self: *const IAzTask,
            bstr_task: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Writable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzTask,
            pf_prop: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn (
            self: *const IAzTask,
            l_prop_id: i32,
            var_reserved: VARIANT,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn (
            self: *const IAzTask,
            l_prop_id: i32,
            var_prop: VARIANT,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPropertyItem: *const fn (
            self: *const IAzTask,
            l_prop_id: i32,
            var_prop: VARIANT,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePropertyItem: *const fn (
            self: *const IAzTask,
            l_prop_id: i32,
            var_prop: VARIANT,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Submit: *const fn (
            self: *const IAzTask,
            l_flags: i32,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IAzTask, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn putName(self: *const T, bstr_name_: ?BSTR) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IAzTask, @ptrCast(self)), bstr_name_);
            }
            pub inline fn getDescription(self: *const T, pbstr_description_: ?*?BSTR) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IAzTask, @ptrCast(self)), pbstr_description_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IAzTask, @ptrCast(self)), bstr_description_);
            }
            pub inline fn getApplicationData(self: *const T, pbstr_application_data_: ?*?BSTR) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).get_ApplicationData(@as(*const IAzTask, @ptrCast(self)), pbstr_application_data_);
            }
            pub inline fn putApplicationData(self: *const T, bstr_application_data_: ?BSTR) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).put_ApplicationData(@as(*const IAzTask, @ptrCast(self)), bstr_application_data_);
            }
            pub inline fn getBizRule(self: *const T, pbstr_prop_: ?*?BSTR) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).get_BizRule(@as(*const IAzTask, @ptrCast(self)), pbstr_prop_);
            }
            pub inline fn putBizRule(self: *const T, bstr_prop_: ?BSTR) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).put_BizRule(@as(*const IAzTask, @ptrCast(self)), bstr_prop_);
            }
            pub inline fn getBizRuleLanguage(self: *const T, pbstr_prop_: ?*?BSTR) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).get_BizRuleLanguage(@as(*const IAzTask, @ptrCast(self)), pbstr_prop_);
            }
            pub inline fn putBizRuleLanguage(self: *const T, bstr_prop_: ?BSTR) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).put_BizRuleLanguage(@as(*const IAzTask, @ptrCast(self)), bstr_prop_);
            }
            pub inline fn getBizRuleImportedPath(self: *const T, pbstr_prop_: ?*?BSTR) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).get_BizRuleImportedPath(@as(*const IAzTask, @ptrCast(self)), pbstr_prop_);
            }
            pub inline fn putBizRuleImportedPath(self: *const T, bstr_prop_: ?BSTR) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).put_BizRuleImportedPath(@as(*const IAzTask, @ptrCast(self)), bstr_prop_);
            }
            pub inline fn getIsRoleDefinition(self: *const T, pf_prop_: ?*BOOL) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).get_IsRoleDefinition(@as(*const IAzTask, @ptrCast(self)), pf_prop_);
            }
            pub inline fn putIsRoleDefinition(self: *const T, f_prop_: BOOL) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).put_IsRoleDefinition(@as(*const IAzTask, @ptrCast(self)), f_prop_);
            }
            pub inline fn getOperations(self: *const T, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).get_Operations(@as(*const IAzTask, @ptrCast(self)), pvar_prop_);
            }
            pub inline fn getTasks(self: *const T, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).get_Tasks(@as(*const IAzTask, @ptrCast(self)), pvar_prop_);
            }
            pub inline fn addOperation(self: *const T, bstr_op_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).AddOperation(@as(*const IAzTask, @ptrCast(self)), bstr_op_, var_reserved_);
            }
            pub inline fn deleteOperation(self: *const T, bstr_op_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).DeleteOperation(@as(*const IAzTask, @ptrCast(self)), bstr_op_, var_reserved_);
            }
            pub inline fn addTask(self: *const T, bstr_task_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).AddTask(@as(*const IAzTask, @ptrCast(self)), bstr_task_, var_reserved_);
            }
            pub inline fn deleteTask(self: *const T, bstr_task_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).DeleteTask(@as(*const IAzTask, @ptrCast(self)), bstr_task_, var_reserved_);
            }
            pub inline fn getWritable(self: *const T, pf_prop_: ?*BOOL) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).get_Writable(@as(*const IAzTask, @ptrCast(self)), pf_prop_);
            }
            pub inline fn getProperty(self: *const T, l_prop_id_: i32, var_reserved_: VARIANT, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IAzTask, @ptrCast(self)), l_prop_id_, var_reserved_, pvar_prop_);
            }
            pub inline fn setProperty(self: *const T, l_prop_id_: i32, var_prop_: VARIANT, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).SetProperty(@as(*const IAzTask, @ptrCast(self)), l_prop_id_, var_prop_, var_reserved_);
            }
            pub inline fn addPropertyItem(self: *const T, l_prop_id_: i32, var_prop_: VARIANT, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).AddPropertyItem(@as(*const IAzTask, @ptrCast(self)), l_prop_id_, var_prop_, var_reserved_);
            }
            pub inline fn deletePropertyItem(self: *const T, l_prop_id_: i32, var_prop_: VARIANT, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).DeletePropertyItem(@as(*const IAzTask, @ptrCast(self)), l_prop_id_, var_prop_, var_reserved_);
            }
            pub inline fn submit(self: *const T, l_flags_: i32, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzTask.VTable, @ptrCast(self.vtable)).Submit(@as(*const IAzTask, @ptrCast(self)), l_flags_, var_reserved_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzTasks_Value = Guid.initString("b338ccab-4c85-4388-8c0a-c58592bad398");
pub const IID_IAzTasks = &IID_IAzTasks_Value;
pub const IAzTasks = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzTasks,
            index: i32,
            pvar_obt_ptr: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzTasks,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzTasks,
            pp_enum_ptr: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItem(self: *const T, index_: i32, pvar_obt_ptr_: ?*VARIANT) HRESULT {
                return @as(*const IAzTasks.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IAzTasks, @ptrCast(self)), index_, pvar_obt_ptr_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IAzTasks.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IAzTasks, @ptrCast(self)), pl_count_);
            }
            pub inline fn getNewEnum(self: *const T, pp_enum_ptr_: ?*?*IUnknown) HRESULT {
                return @as(*const IAzTasks.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IAzTasks, @ptrCast(self)), pp_enum_ptr_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzScope_Value = Guid.initString("00e52487-e08d-4514-b62e-877d5645f5ab");
pub const IID_IAzScope = &IID_IAzScope_Value;
pub const IAzScope = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScope,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScope,
            bstr_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScope,
            pbstr_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScope,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ApplicationData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScope,
            pbstr_application_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ApplicationData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScope,
            bstr_application_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Writable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScope,
            pf_prop: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn (
            self: *const IAzScope,
            l_prop_id: i32,
            var_reserved: VARIANT,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn (
            self: *const IAzScope,
            l_prop_id: i32,
            var_prop: VARIANT,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPropertyItem: *const fn (
            self: *const IAzScope,
            l_prop_id: i32,
            var_prop: VARIANT,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePropertyItem: *const fn (
            self: *const IAzScope,
            l_prop_id: i32,
            var_prop: VARIANT,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyAdministrators: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScope,
            pvar_admins: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyReaders: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScope,
            pvar_readers: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyAdministrator: *const fn (
            self: *const IAzScope,
            bstr_admin: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyAdministrator: *const fn (
            self: *const IAzScope,
            bstr_admin: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyReader: *const fn (
            self: *const IAzScope,
            bstr_reader: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyReader: *const fn (
            self: *const IAzScope,
            bstr_reader: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ApplicationGroups: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScope,
            pp_group_collection: ?*?*IAzApplicationGroups,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenApplicationGroup: *const fn (
            self: *const IAzScope,
            bstr_group_name: ?BSTR,
            var_reserved: VARIANT,
            pp_group: ?*?*IAzApplicationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateApplicationGroup: *const fn (
            self: *const IAzScope,
            bstr_group_name: ?BSTR,
            var_reserved: VARIANT,
            pp_group: ?*?*IAzApplicationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteApplicationGroup: *const fn (
            self: *const IAzScope,
            bstr_group_name: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Roles: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScope,
            pp_role_collection: ?*?*IAzRoles,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenRole: *const fn (
            self: *const IAzScope,
            bstr_role_name: ?BSTR,
            var_reserved: VARIANT,
            pp_role: ?*?*IAzRole,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRole: *const fn (
            self: *const IAzScope,
            bstr_role_name: ?BSTR,
            var_reserved: VARIANT,
            pp_role: ?*?*IAzRole,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRole: *const fn (
            self: *const IAzScope,
            bstr_role_name: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Tasks: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScope,
            pp_task_collection: ?*?*IAzTasks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenTask: *const fn (
            self: *const IAzScope,
            bstr_task_name: ?BSTR,
            var_reserved: VARIANT,
            pp_task: ?*?*IAzTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTask: *const fn (
            self: *const IAzScope,
            bstr_task_name: ?BSTR,
            var_reserved: VARIANT,
            pp_task: ?*?*IAzTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteTask: *const fn (
            self: *const IAzScope,
            bstr_task_name: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Submit: *const fn (
            self: *const IAzScope,
            l_flags: i32,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CanBeDelegated: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScope,
            pf_prop: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BizrulesWritable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScope,
            pf_prop: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyAdministratorsName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScope,
            pvar_admins: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyReadersName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScope,
            pvar_readers: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyAdministratorName: *const fn (
            self: *const IAzScope,
            bstr_admin: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyAdministratorName: *const fn (
            self: *const IAzScope,
            bstr_admin: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPolicyReaderName: *const fn (
            self: *const IAzScope,
            bstr_reader: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePolicyReaderName: *const fn (
            self: *const IAzScope,
            bstr_reader: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IAzScope, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn putName(self: *const T, bstr_name_: ?BSTR) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IAzScope, @ptrCast(self)), bstr_name_);
            }
            pub inline fn getDescription(self: *const T, pbstr_description_: ?*?BSTR) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IAzScope, @ptrCast(self)), pbstr_description_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IAzScope, @ptrCast(self)), bstr_description_);
            }
            pub inline fn getApplicationData(self: *const T, pbstr_application_data_: ?*?BSTR) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).get_ApplicationData(@as(*const IAzScope, @ptrCast(self)), pbstr_application_data_);
            }
            pub inline fn putApplicationData(self: *const T, bstr_application_data_: ?BSTR) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).put_ApplicationData(@as(*const IAzScope, @ptrCast(self)), bstr_application_data_);
            }
            pub inline fn getWritable(self: *const T, pf_prop_: ?*BOOL) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).get_Writable(@as(*const IAzScope, @ptrCast(self)), pf_prop_);
            }
            pub inline fn getProperty(self: *const T, l_prop_id_: i32, var_reserved_: VARIANT, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IAzScope, @ptrCast(self)), l_prop_id_, var_reserved_, pvar_prop_);
            }
            pub inline fn setProperty(self: *const T, l_prop_id_: i32, var_prop_: VARIANT, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).SetProperty(@as(*const IAzScope, @ptrCast(self)), l_prop_id_, var_prop_, var_reserved_);
            }
            pub inline fn addPropertyItem(self: *const T, l_prop_id_: i32, var_prop_: VARIANT, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).AddPropertyItem(@as(*const IAzScope, @ptrCast(self)), l_prop_id_, var_prop_, var_reserved_);
            }
            pub inline fn deletePropertyItem(self: *const T, l_prop_id_: i32, var_prop_: VARIANT, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).DeletePropertyItem(@as(*const IAzScope, @ptrCast(self)), l_prop_id_, var_prop_, var_reserved_);
            }
            pub inline fn getPolicyAdministrators(self: *const T, pvar_admins_: ?*VARIANT) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).get_PolicyAdministrators(@as(*const IAzScope, @ptrCast(self)), pvar_admins_);
            }
            pub inline fn getPolicyReaders(self: *const T, pvar_readers_: ?*VARIANT) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).get_PolicyReaders(@as(*const IAzScope, @ptrCast(self)), pvar_readers_);
            }
            pub inline fn addPolicyAdministrator(self: *const T, bstr_admin_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).AddPolicyAdministrator(@as(*const IAzScope, @ptrCast(self)), bstr_admin_, var_reserved_);
            }
            pub inline fn deletePolicyAdministrator(self: *const T, bstr_admin_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).DeletePolicyAdministrator(@as(*const IAzScope, @ptrCast(self)), bstr_admin_, var_reserved_);
            }
            pub inline fn addPolicyReader(self: *const T, bstr_reader_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).AddPolicyReader(@as(*const IAzScope, @ptrCast(self)), bstr_reader_, var_reserved_);
            }
            pub inline fn deletePolicyReader(self: *const T, bstr_reader_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).DeletePolicyReader(@as(*const IAzScope, @ptrCast(self)), bstr_reader_, var_reserved_);
            }
            pub inline fn getApplicationGroups(self: *const T, pp_group_collection_: ?*?*IAzApplicationGroups) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).get_ApplicationGroups(@as(*const IAzScope, @ptrCast(self)), pp_group_collection_);
            }
            pub inline fn openApplicationGroup(self: *const T, bstr_group_name_: ?BSTR, var_reserved_: VARIANT, pp_group_: ?*?*IAzApplicationGroup) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).OpenApplicationGroup(@as(*const IAzScope, @ptrCast(self)), bstr_group_name_, var_reserved_, pp_group_);
            }
            pub inline fn createApplicationGroup(self: *const T, bstr_group_name_: ?BSTR, var_reserved_: VARIANT, pp_group_: ?*?*IAzApplicationGroup) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).CreateApplicationGroup(@as(*const IAzScope, @ptrCast(self)), bstr_group_name_, var_reserved_, pp_group_);
            }
            pub inline fn deleteApplicationGroup(self: *const T, bstr_group_name_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).DeleteApplicationGroup(@as(*const IAzScope, @ptrCast(self)), bstr_group_name_, var_reserved_);
            }
            pub inline fn getRoles(self: *const T, pp_role_collection_: ?*?*IAzRoles) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).get_Roles(@as(*const IAzScope, @ptrCast(self)), pp_role_collection_);
            }
            pub inline fn openRole(self: *const T, bstr_role_name_: ?BSTR, var_reserved_: VARIANT, pp_role_: ?*?*IAzRole) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).OpenRole(@as(*const IAzScope, @ptrCast(self)), bstr_role_name_, var_reserved_, pp_role_);
            }
            pub inline fn createRole(self: *const T, bstr_role_name_: ?BSTR, var_reserved_: VARIANT, pp_role_: ?*?*IAzRole) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).CreateRole(@as(*const IAzScope, @ptrCast(self)), bstr_role_name_, var_reserved_, pp_role_);
            }
            pub inline fn deleteRole(self: *const T, bstr_role_name_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).DeleteRole(@as(*const IAzScope, @ptrCast(self)), bstr_role_name_, var_reserved_);
            }
            pub inline fn getTasks(self: *const T, pp_task_collection_: ?*?*IAzTasks) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).get_Tasks(@as(*const IAzScope, @ptrCast(self)), pp_task_collection_);
            }
            pub inline fn openTask(self: *const T, bstr_task_name_: ?BSTR, var_reserved_: VARIANT, pp_task_: ?*?*IAzTask) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).OpenTask(@as(*const IAzScope, @ptrCast(self)), bstr_task_name_, var_reserved_, pp_task_);
            }
            pub inline fn createTask(self: *const T, bstr_task_name_: ?BSTR, var_reserved_: VARIANT, pp_task_: ?*?*IAzTask) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).CreateTask(@as(*const IAzScope, @ptrCast(self)), bstr_task_name_, var_reserved_, pp_task_);
            }
            pub inline fn deleteTask(self: *const T, bstr_task_name_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).DeleteTask(@as(*const IAzScope, @ptrCast(self)), bstr_task_name_, var_reserved_);
            }
            pub inline fn submit(self: *const T, l_flags_: i32, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).Submit(@as(*const IAzScope, @ptrCast(self)), l_flags_, var_reserved_);
            }
            pub inline fn getCanBeDelegated(self: *const T, pf_prop_: ?*BOOL) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).get_CanBeDelegated(@as(*const IAzScope, @ptrCast(self)), pf_prop_);
            }
            pub inline fn getBizrulesWritable(self: *const T, pf_prop_: ?*BOOL) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).get_BizrulesWritable(@as(*const IAzScope, @ptrCast(self)), pf_prop_);
            }
            pub inline fn getPolicyAdministratorsName(self: *const T, pvar_admins_: ?*VARIANT) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).get_PolicyAdministratorsName(@as(*const IAzScope, @ptrCast(self)), pvar_admins_);
            }
            pub inline fn getPolicyReadersName(self: *const T, pvar_readers_: ?*VARIANT) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).get_PolicyReadersName(@as(*const IAzScope, @ptrCast(self)), pvar_readers_);
            }
            pub inline fn addPolicyAdministratorName(self: *const T, bstr_admin_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).AddPolicyAdministratorName(@as(*const IAzScope, @ptrCast(self)), bstr_admin_, var_reserved_);
            }
            pub inline fn deletePolicyAdministratorName(self: *const T, bstr_admin_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).DeletePolicyAdministratorName(@as(*const IAzScope, @ptrCast(self)), bstr_admin_, var_reserved_);
            }
            pub inline fn addPolicyReaderName(self: *const T, bstr_reader_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).AddPolicyReaderName(@as(*const IAzScope, @ptrCast(self)), bstr_reader_, var_reserved_);
            }
            pub inline fn deletePolicyReaderName(self: *const T, bstr_reader_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzScope.VTable, @ptrCast(self.vtable)).DeletePolicyReaderName(@as(*const IAzScope, @ptrCast(self)), bstr_reader_, var_reserved_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzScopes_Value = Guid.initString("78e14853-9f5e-406d-9b91-6bdba6973510");
pub const IID_IAzScopes = &IID_IAzScopes_Value;
pub const IAzScopes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScopes,
            index: i32,
            pvar_obt_ptr: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScopes,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScopes,
            pp_enum_ptr: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItem(self: *const T, index_: i32, pvar_obt_ptr_: ?*VARIANT) HRESULT {
                return @as(*const IAzScopes.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IAzScopes, @ptrCast(self)), index_, pvar_obt_ptr_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IAzScopes.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IAzScopes, @ptrCast(self)), pl_count_);
            }
            pub inline fn getNewEnum(self: *const T, pp_enum_ptr_: ?*?*IUnknown) HRESULT {
                return @as(*const IAzScopes.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IAzScopes, @ptrCast(self)), pp_enum_ptr_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzApplicationGroup_Value = Guid.initString("f1b744cd-58a6-4e06-9fbf-36f6d779e21e");
pub const IID_IAzApplicationGroup = &IID_IAzApplicationGroup_Value;
pub const IAzApplicationGroup = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup,
            bstr_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup,
            pl_prop: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup,
            l_prop: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LdapQuery: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup,
            pbstr_prop: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LdapQuery: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup,
            bstr_prop: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AppMembers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AppNonMembers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Members: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NonMembers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup,
            pbstr_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAppMember: *const fn (
            self: *const IAzApplicationGroup,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAppMember: *const fn (
            self: *const IAzApplicationGroup,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAppNonMember: *const fn (
            self: *const IAzApplicationGroup,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAppNonMember: *const fn (
            self: *const IAzApplicationGroup,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddMember: *const fn (
            self: *const IAzApplicationGroup,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteMember: *const fn (
            self: *const IAzApplicationGroup,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddNonMember: *const fn (
            self: *const IAzApplicationGroup,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteNonMember: *const fn (
            self: *const IAzApplicationGroup,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Writable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup,
            pf_prop: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn (
            self: *const IAzApplicationGroup,
            l_prop_id: i32,
            var_reserved: VARIANT,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn (
            self: *const IAzApplicationGroup,
            l_prop_id: i32,
            var_prop: VARIANT,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPropertyItem: *const fn (
            self: *const IAzApplicationGroup,
            l_prop_id: i32,
            var_prop: VARIANT,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePropertyItem: *const fn (
            self: *const IAzApplicationGroup,
            l_prop_id: i32,
            var_prop: VARIANT,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Submit: *const fn (
            self: *const IAzApplicationGroup,
            l_flags: i32,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddMemberName: *const fn (
            self: *const IAzApplicationGroup,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteMemberName: *const fn (
            self: *const IAzApplicationGroup,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddNonMemberName: *const fn (
            self: *const IAzApplicationGroup,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteNonMemberName: *const fn (
            self: *const IAzApplicationGroup,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MembersName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NonMembersName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IAzApplicationGroup, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn putName(self: *const T, bstr_name_: ?BSTR) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IAzApplicationGroup, @ptrCast(self)), bstr_name_);
            }
            pub inline fn getType(self: *const T, pl_prop_: ?*i32) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IAzApplicationGroup, @ptrCast(self)), pl_prop_);
            }
            pub inline fn putType(self: *const T, l_prop_: i32) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).put_Type(@as(*const IAzApplicationGroup, @ptrCast(self)), l_prop_);
            }
            pub inline fn getLdapQuery(self: *const T, pbstr_prop_: ?*?BSTR) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).get_LdapQuery(@as(*const IAzApplicationGroup, @ptrCast(self)), pbstr_prop_);
            }
            pub inline fn putLdapQuery(self: *const T, bstr_prop_: ?BSTR) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).put_LdapQuery(@as(*const IAzApplicationGroup, @ptrCast(self)), bstr_prop_);
            }
            pub inline fn getAppMembers(self: *const T, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).get_AppMembers(@as(*const IAzApplicationGroup, @ptrCast(self)), pvar_prop_);
            }
            pub inline fn getAppNonMembers(self: *const T, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).get_AppNonMembers(@as(*const IAzApplicationGroup, @ptrCast(self)), pvar_prop_);
            }
            pub inline fn getMembers(self: *const T, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).get_Members(@as(*const IAzApplicationGroup, @ptrCast(self)), pvar_prop_);
            }
            pub inline fn getNonMembers(self: *const T, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).get_NonMembers(@as(*const IAzApplicationGroup, @ptrCast(self)), pvar_prop_);
            }
            pub inline fn getDescription(self: *const T, pbstr_description_: ?*?BSTR) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IAzApplicationGroup, @ptrCast(self)), pbstr_description_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IAzApplicationGroup, @ptrCast(self)), bstr_description_);
            }
            pub inline fn addAppMember(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).AddAppMember(@as(*const IAzApplicationGroup, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn deleteAppMember(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).DeleteAppMember(@as(*const IAzApplicationGroup, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn addAppNonMember(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).AddAppNonMember(@as(*const IAzApplicationGroup, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn deleteAppNonMember(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).DeleteAppNonMember(@as(*const IAzApplicationGroup, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn addMember(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).AddMember(@as(*const IAzApplicationGroup, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn deleteMember(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).DeleteMember(@as(*const IAzApplicationGroup, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn addNonMember(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).AddNonMember(@as(*const IAzApplicationGroup, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn deleteNonMember(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).DeleteNonMember(@as(*const IAzApplicationGroup, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn getWritable(self: *const T, pf_prop_: ?*BOOL) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).get_Writable(@as(*const IAzApplicationGroup, @ptrCast(self)), pf_prop_);
            }
            pub inline fn getProperty(self: *const T, l_prop_id_: i32, var_reserved_: VARIANT, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IAzApplicationGroup, @ptrCast(self)), l_prop_id_, var_reserved_, pvar_prop_);
            }
            pub inline fn setProperty(self: *const T, l_prop_id_: i32, var_prop_: VARIANT, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).SetProperty(@as(*const IAzApplicationGroup, @ptrCast(self)), l_prop_id_, var_prop_, var_reserved_);
            }
            pub inline fn addPropertyItem(self: *const T, l_prop_id_: i32, var_prop_: VARIANT, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).AddPropertyItem(@as(*const IAzApplicationGroup, @ptrCast(self)), l_prop_id_, var_prop_, var_reserved_);
            }
            pub inline fn deletePropertyItem(self: *const T, l_prop_id_: i32, var_prop_: VARIANT, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).DeletePropertyItem(@as(*const IAzApplicationGroup, @ptrCast(self)), l_prop_id_, var_prop_, var_reserved_);
            }
            pub inline fn submit(self: *const T, l_flags_: i32, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).Submit(@as(*const IAzApplicationGroup, @ptrCast(self)), l_flags_, var_reserved_);
            }
            pub inline fn addMemberName(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).AddMemberName(@as(*const IAzApplicationGroup, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn deleteMemberName(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).DeleteMemberName(@as(*const IAzApplicationGroup, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn addNonMemberName(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).AddNonMemberName(@as(*const IAzApplicationGroup, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn deleteNonMemberName(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).DeleteNonMemberName(@as(*const IAzApplicationGroup, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn getMembersName(self: *const T, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).get_MembersName(@as(*const IAzApplicationGroup, @ptrCast(self)), pvar_prop_);
            }
            pub inline fn getNonMembersName(self: *const T, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzApplicationGroup.VTable, @ptrCast(self.vtable)).get_NonMembersName(@as(*const IAzApplicationGroup, @ptrCast(self)), pvar_prop_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzApplicationGroups_Value = Guid.initString("4ce66ad5-9f3c-469d-a911-b99887a7e685");
pub const IID_IAzApplicationGroups = &IID_IAzApplicationGroups_Value;
pub const IAzApplicationGroups = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroups,
            index: i32,
            pvar_obt_ptr: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroups,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroups,
            pp_enum_ptr: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItem(self: *const T, index_: i32, pvar_obt_ptr_: ?*VARIANT) HRESULT {
                return @as(*const IAzApplicationGroups.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IAzApplicationGroups, @ptrCast(self)), index_, pvar_obt_ptr_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IAzApplicationGroups.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IAzApplicationGroups, @ptrCast(self)), pl_count_);
            }
            pub inline fn getNewEnum(self: *const T, pp_enum_ptr_: ?*?*IUnknown) HRESULT {
                return @as(*const IAzApplicationGroups.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IAzApplicationGroups, @ptrCast(self)), pp_enum_ptr_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzRole_Value = Guid.initString("859e0d8d-62d7-41d8-a034-c0cd5d43fdfa");
pub const IID_IAzRole = &IID_IAzRole_Value;
pub const IAzRole = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRole,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRole,
            bstr_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRole,
            pbstr_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRole,
            bstr_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ApplicationData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRole,
            pbstr_application_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ApplicationData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRole,
            bstr_application_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAppMember: *const fn (
            self: *const IAzRole,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAppMember: *const fn (
            self: *const IAzRole,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTask: *const fn (
            self: *const IAzRole,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteTask: *const fn (
            self: *const IAzRole,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddOperation: *const fn (
            self: *const IAzRole,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteOperation: *const fn (
            self: *const IAzRole,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddMember: *const fn (
            self: *const IAzRole,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteMember: *const fn (
            self: *const IAzRole,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Writable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRole,
            pf_prop: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn (
            self: *const IAzRole,
            l_prop_id: i32,
            var_reserved: VARIANT,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn (
            self: *const IAzRole,
            l_prop_id: i32,
            var_prop: VARIANT,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AppMembers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRole,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Members: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRole,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Operations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRole,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Tasks: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRole,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPropertyItem: *const fn (
            self: *const IAzRole,
            l_prop_id: i32,
            var_prop: VARIANT,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePropertyItem: *const fn (
            self: *const IAzRole,
            l_prop_id: i32,
            var_prop: VARIANT,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Submit: *const fn (
            self: *const IAzRole,
            l_flags: i32,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddMemberName: *const fn (
            self: *const IAzRole,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteMemberName: *const fn (
            self: *const IAzRole,
            bstr_prop: ?BSTR,
            var_reserved: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MembersName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRole,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IAzRole, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn putName(self: *const T, bstr_name_: ?BSTR) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IAzRole, @ptrCast(self)), bstr_name_);
            }
            pub inline fn getDescription(self: *const T, pbstr_description_: ?*?BSTR) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IAzRole, @ptrCast(self)), pbstr_description_);
            }
            pub inline fn putDescription(self: *const T, bstr_description_: ?BSTR) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IAzRole, @ptrCast(self)), bstr_description_);
            }
            pub inline fn getApplicationData(self: *const T, pbstr_application_data_: ?*?BSTR) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).get_ApplicationData(@as(*const IAzRole, @ptrCast(self)), pbstr_application_data_);
            }
            pub inline fn putApplicationData(self: *const T, bstr_application_data_: ?BSTR) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).put_ApplicationData(@as(*const IAzRole, @ptrCast(self)), bstr_application_data_);
            }
            pub inline fn addAppMember(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).AddAppMember(@as(*const IAzRole, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn deleteAppMember(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).DeleteAppMember(@as(*const IAzRole, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn addTask(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).AddTask(@as(*const IAzRole, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn deleteTask(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).DeleteTask(@as(*const IAzRole, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn addOperation(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).AddOperation(@as(*const IAzRole, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn deleteOperation(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).DeleteOperation(@as(*const IAzRole, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn addMember(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).AddMember(@as(*const IAzRole, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn deleteMember(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).DeleteMember(@as(*const IAzRole, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn getWritable(self: *const T, pf_prop_: ?*BOOL) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).get_Writable(@as(*const IAzRole, @ptrCast(self)), pf_prop_);
            }
            pub inline fn getProperty(self: *const T, l_prop_id_: i32, var_reserved_: VARIANT, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IAzRole, @ptrCast(self)), l_prop_id_, var_reserved_, pvar_prop_);
            }
            pub inline fn setProperty(self: *const T, l_prop_id_: i32, var_prop_: VARIANT, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).SetProperty(@as(*const IAzRole, @ptrCast(self)), l_prop_id_, var_prop_, var_reserved_);
            }
            pub inline fn getAppMembers(self: *const T, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).get_AppMembers(@as(*const IAzRole, @ptrCast(self)), pvar_prop_);
            }
            pub inline fn getMembers(self: *const T, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).get_Members(@as(*const IAzRole, @ptrCast(self)), pvar_prop_);
            }
            pub inline fn getOperations(self: *const T, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).get_Operations(@as(*const IAzRole, @ptrCast(self)), pvar_prop_);
            }
            pub inline fn getTasks(self: *const T, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).get_Tasks(@as(*const IAzRole, @ptrCast(self)), pvar_prop_);
            }
            pub inline fn addPropertyItem(self: *const T, l_prop_id_: i32, var_prop_: VARIANT, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).AddPropertyItem(@as(*const IAzRole, @ptrCast(self)), l_prop_id_, var_prop_, var_reserved_);
            }
            pub inline fn deletePropertyItem(self: *const T, l_prop_id_: i32, var_prop_: VARIANT, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).DeletePropertyItem(@as(*const IAzRole, @ptrCast(self)), l_prop_id_, var_prop_, var_reserved_);
            }
            pub inline fn submit(self: *const T, l_flags_: i32, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).Submit(@as(*const IAzRole, @ptrCast(self)), l_flags_, var_reserved_);
            }
            pub inline fn addMemberName(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).AddMemberName(@as(*const IAzRole, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn deleteMemberName(self: *const T, bstr_prop_: ?BSTR, var_reserved_: VARIANT) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).DeleteMemberName(@as(*const IAzRole, @ptrCast(self)), bstr_prop_, var_reserved_);
            }
            pub inline fn getMembersName(self: *const T, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzRole.VTable, @ptrCast(self.vtable)).get_MembersName(@as(*const IAzRole, @ptrCast(self)), pvar_prop_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzRoles_Value = Guid.initString("95e0f119-13b4-4dae-b65f-2f7d60d822e4");
pub const IID_IAzRoles = &IID_IAzRoles_Value;
pub const IAzRoles = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRoles,
            index: i32,
            pvar_obt_ptr: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRoles,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRoles,
            pp_enum_ptr: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItem(self: *const T, index_: i32, pvar_obt_ptr_: ?*VARIANT) HRESULT {
                return @as(*const IAzRoles.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IAzRoles, @ptrCast(self)), index_, pvar_obt_ptr_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IAzRoles.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IAzRoles, @ptrCast(self)), pl_count_);
            }
            pub inline fn getNewEnum(self: *const T, pp_enum_ptr_: ?*?*IUnknown) HRESULT {
                return @as(*const IAzRoles.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IAzRoles, @ptrCast(self)), pp_enum_ptr_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzClientContext_Value = Guid.initString("eff1f00b-488a-466d-afd9-a401c5f9eef5");
pub const IID_IAzClientContext = &IID_IAzClientContext_Value;
pub const IAzClientContext = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        AccessCheck: *const fn (
            self: *const IAzClientContext,
            bstr_object_name: ?BSTR,
            var_scope_names: VARIANT,
            var_operations: VARIANT,
            var_parameter_names: VARIANT,
            var_parameter_values: VARIANT,
            var_interface_names: VARIANT,
            var_interface_flags: VARIANT,
            var_interfaces: VARIANT,
            pvar_results: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBusinessRuleString: *const fn (
            self: *const IAzClientContext,
            pbstr_business_rule_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserDn: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzClientContext,
            pbstr_prop: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserSamCompat: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzClientContext,
            pbstr_prop: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserDisplay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzClientContext,
            pbstr_prop: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzClientContext,
            pbstr_prop: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserCanonical: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzClientContext,
            pbstr_prop: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserUpn: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzClientContext,
            pbstr_prop: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserDnsSamCompat: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzClientContext,
            pbstr_prop: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn (
            self: *const IAzClientContext,
            l_prop_id: i32,
            var_reserved: VARIANT,
            pvar_prop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRoles: *const fn (
            self: *const IAzClientContext,
            bstr_scope_name: ?BSTR,
            pvar_role_names: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RoleForAccessCheck: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzClientContext,
            pbstr_prop: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RoleForAccessCheck: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzClientContext,
            bstr_prop: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn accessCheck(self: *const T, bstr_object_name_: ?BSTR, var_scope_names_: VARIANT, var_operations_: VARIANT, var_parameter_names_: VARIANT, var_parameter_values_: VARIANT, var_interface_names_: VARIANT, var_interface_flags_: VARIANT, var_interfaces_: VARIANT, pvar_results_: ?*VARIANT) HRESULT {
                return @as(*const IAzClientContext.VTable, @ptrCast(self.vtable)).AccessCheck(@as(*const IAzClientContext, @ptrCast(self)), bstr_object_name_, var_scope_names_, var_operations_, var_parameter_names_, var_parameter_values_, var_interface_names_, var_interface_flags_, var_interfaces_, pvar_results_);
            }
            pub inline fn getBusinessRuleString(self: *const T, pbstr_business_rule_string_: ?*?BSTR) HRESULT {
                return @as(*const IAzClientContext.VTable, @ptrCast(self.vtable)).GetBusinessRuleString(@as(*const IAzClientContext, @ptrCast(self)), pbstr_business_rule_string_);
            }
            pub inline fn getUserDn(self: *const T, pbstr_prop_: ?*?BSTR) HRESULT {
                return @as(*const IAzClientContext.VTable, @ptrCast(self.vtable)).get_UserDn(@as(*const IAzClientContext, @ptrCast(self)), pbstr_prop_);
            }
            pub inline fn getUserSamCompat(self: *const T, pbstr_prop_: ?*?BSTR) HRESULT {
                return @as(*const IAzClientContext.VTable, @ptrCast(self.vtable)).get_UserSamCompat(@as(*const IAzClientContext, @ptrCast(self)), pbstr_prop_);
            }
            pub inline fn getUserDisplay(self: *const T, pbstr_prop_: ?*?BSTR) HRESULT {
                return @as(*const IAzClientContext.VTable, @ptrCast(self.vtable)).get_UserDisplay(@as(*const IAzClientContext, @ptrCast(self)), pbstr_prop_);
            }
            pub inline fn getUserGuid(self: *const T, pbstr_prop_: ?*?BSTR) HRESULT {
                return @as(*const IAzClientContext.VTable, @ptrCast(self.vtable)).get_UserGuid(@as(*const IAzClientContext, @ptrCast(self)), pbstr_prop_);
            }
            pub inline fn getUserCanonical(self: *const T, pbstr_prop_: ?*?BSTR) HRESULT {
                return @as(*const IAzClientContext.VTable, @ptrCast(self.vtable)).get_UserCanonical(@as(*const IAzClientContext, @ptrCast(self)), pbstr_prop_);
            }
            pub inline fn getUserUpn(self: *const T, pbstr_prop_: ?*?BSTR) HRESULT {
                return @as(*const IAzClientContext.VTable, @ptrCast(self.vtable)).get_UserUpn(@as(*const IAzClientContext, @ptrCast(self)), pbstr_prop_);
            }
            pub inline fn getUserDnsSamCompat(self: *const T, pbstr_prop_: ?*?BSTR) HRESULT {
                return @as(*const IAzClientContext.VTable, @ptrCast(self.vtable)).get_UserDnsSamCompat(@as(*const IAzClientContext, @ptrCast(self)), pbstr_prop_);
            }
            pub inline fn getProperty(self: *const T, l_prop_id_: i32, var_reserved_: VARIANT, pvar_prop_: ?*VARIANT) HRESULT {
                return @as(*const IAzClientContext.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IAzClientContext, @ptrCast(self)), l_prop_id_, var_reserved_, pvar_prop_);
            }
            pub inline fn getRoles(self: *const T, bstr_scope_name_: ?BSTR, pvar_role_names_: ?*VARIANT) HRESULT {
                return @as(*const IAzClientContext.VTable, @ptrCast(self.vtable)).GetRoles(@as(*const IAzClientContext, @ptrCast(self)), bstr_scope_name_, pvar_role_names_);
            }
            pub inline fn getRoleForAccessCheck(self: *const T, pbstr_prop_: ?*?BSTR) HRESULT {
                return @as(*const IAzClientContext.VTable, @ptrCast(self.vtable)).get_RoleForAccessCheck(@as(*const IAzClientContext, @ptrCast(self)), pbstr_prop_);
            }
            pub inline fn putRoleForAccessCheck(self: *const T, bstr_prop_: ?BSTR) HRESULT {
                return @as(*const IAzClientContext.VTable, @ptrCast(self.vtable)).put_RoleForAccessCheck(@as(*const IAzClientContext, @ptrCast(self)), bstr_prop_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IAzClientContext2_Value = Guid.initString("2b0c92b8-208a-488a-8f81-e4edb22111cd");
pub const IID_IAzClientContext2 = &IID_IAzClientContext2_Value;
pub const IAzClientContext2 = extern struct {
    pub const VTable = extern struct {
        base: IAzClientContext.VTable,
        GetAssignedScopesPage: *const fn (
            self: *const IAzClientContext2,
            l_options: i32,
            page_size: i32,
            pvar_cursor: ?*VARIANT,
            pvar_scope_names: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRoles: *const fn (
            self: *const IAzClientContext2,
            var_roles: VARIANT,
            bstr_scope_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddApplicationGroups: *const fn (
            self: *const IAzClientContext2,
            var_application_groups: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStringSids: *const fn (
            self: *const IAzClientContext2,
            var_string_sids: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LDAPQueryDN: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzClientContext2,
            bstr_l_d_a_p_query_d_n: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LDAPQueryDN: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzClientContext2,
            pbstr_l_d_a_p_query_d_n: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IAzClientContext.MethodMixin(T);
            pub inline fn getAssignedScopesPage(self: *const T, l_options_: i32, page_size_: i32, pvar_cursor_: ?*VARIANT, pvar_scope_names_: ?*VARIANT) HRESULT {
                return @as(*const IAzClientContext2.VTable, @ptrCast(self.vtable)).GetAssignedScopesPage(@as(*const IAzClientContext2, @ptrCast(self)), l_options_, page_size_, pvar_cursor_, pvar_scope_names_);
            }
            pub inline fn addRoles(self: *const T, var_roles_: VARIANT, bstr_scope_name_: ?BSTR) HRESULT {
                return @as(*const IAzClientContext2.VTable, @ptrCast(self.vtable)).AddRoles(@as(*const IAzClientContext2, @ptrCast(self)), var_roles_, bstr_scope_name_);
            }
            pub inline fn addApplicationGroups(self: *const T, var_application_groups_: VARIANT) HRESULT {
                return @as(*const IAzClientContext2.VTable, @ptrCast(self.vtable)).AddApplicationGroups(@as(*const IAzClientContext2, @ptrCast(self)), var_application_groups_);
            }
            pub inline fn addStringSids(self: *const T, var_string_sids_: VARIANT) HRESULT {
                return @as(*const IAzClientContext2.VTable, @ptrCast(self.vtable)).AddStringSids(@as(*const IAzClientContext2, @ptrCast(self)), var_string_sids_);
            }
            pub inline fn putLDAPQueryDN(self: *const T, bstr_l_d_a_p_query_d_n_: ?BSTR) HRESULT {
                return @as(*const IAzClientContext2.VTable, @ptrCast(self.vtable)).put_LDAPQueryDN(@as(*const IAzClientContext2, @ptrCast(self)), bstr_l_d_a_p_query_d_n_);
            }
            pub inline fn getLDAPQueryDN(self: *const T, pbstr_l_d_a_p_query_d_n_: ?*?BSTR) HRESULT {
                return @as(*const IAzClientContext2.VTable, @ptrCast(self.vtable)).get_LDAPQueryDN(@as(*const IAzClientContext2, @ptrCast(self)), pbstr_l_d_a_p_query_d_n_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzBizRuleContext_Value = Guid.initString("e192f17d-d59f-455e-a152-940316cd77b2");
pub const IID_IAzBizRuleContext = &IID_IAzBizRuleContext_Value;
pub const IAzBizRuleContext = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BusinessRuleResult: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzBizRuleContext,
            b_result: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BusinessRuleString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzBizRuleContext,
            bstr_business_rule_string: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BusinessRuleString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzBizRuleContext,
            pbstr_business_rule_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParameter: *const fn (
            self: *const IAzBizRuleContext,
            bstr_parameter_name: ?BSTR,
            pvar_parameter_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn putBusinessRuleResult(self: *const T, b_result_: BOOL) HRESULT {
                return @as(*const IAzBizRuleContext.VTable, @ptrCast(self.vtable)).put_BusinessRuleResult(@as(*const IAzBizRuleContext, @ptrCast(self)), b_result_);
            }
            pub inline fn putBusinessRuleString(self: *const T, bstr_business_rule_string_: ?BSTR) HRESULT {
                return @as(*const IAzBizRuleContext.VTable, @ptrCast(self.vtable)).put_BusinessRuleString(@as(*const IAzBizRuleContext, @ptrCast(self)), bstr_business_rule_string_);
            }
            pub inline fn getBusinessRuleString(self: *const T, pbstr_business_rule_string_: ?*?BSTR) HRESULT {
                return @as(*const IAzBizRuleContext.VTable, @ptrCast(self.vtable)).get_BusinessRuleString(@as(*const IAzBizRuleContext, @ptrCast(self)), pbstr_business_rule_string_);
            }
            pub inline fn getParameter(self: *const T, bstr_parameter_name_: ?BSTR, pvar_parameter_value_: ?*VARIANT) HRESULT {
                return @as(*const IAzBizRuleContext.VTable, @ptrCast(self.vtable)).GetParameter(@as(*const IAzBizRuleContext, @ptrCast(self)), bstr_parameter_name_, pvar_parameter_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzBizRuleParameters_Value = Guid.initString("fc17685f-e25d-4dcd-bae1-276ec9533cb5");
pub const IID_IAzBizRuleParameters = &IID_IAzBizRuleParameters_Value;
pub const IAzBizRuleParameters = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        AddParameter: *const fn (
            self: *const IAzBizRuleParameters,
            bstr_parameter_name: ?BSTR,
            var_parameter_value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddParameters: *const fn (
            self: *const IAzBizRuleParameters,
            var_parameter_names: VARIANT,
            var_parameter_values: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParameterValue: *const fn (
            self: *const IAzBizRuleParameters,
            bstr_parameter_name: ?BSTR,
            pvar_parameter_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IAzBizRuleParameters,
            var_parameter_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAll: *const fn (
            self: *const IAzBizRuleParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzBizRuleParameters,
            pl_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn addParameter(self: *const T, bstr_parameter_name_: ?BSTR, var_parameter_value_: VARIANT) HRESULT {
                return @as(*const IAzBizRuleParameters.VTable, @ptrCast(self.vtable)).AddParameter(@as(*const IAzBizRuleParameters, @ptrCast(self)), bstr_parameter_name_, var_parameter_value_);
            }
            pub inline fn addParameters(self: *const T, var_parameter_names_: VARIANT, var_parameter_values_: VARIANT) HRESULT {
                return @as(*const IAzBizRuleParameters.VTable, @ptrCast(self.vtable)).AddParameters(@as(*const IAzBizRuleParameters, @ptrCast(self)), var_parameter_names_, var_parameter_values_);
            }
            pub inline fn getParameterValue(self: *const T, bstr_parameter_name_: ?BSTR, pvar_parameter_value_: ?*VARIANT) HRESULT {
                return @as(*const IAzBizRuleParameters.VTable, @ptrCast(self.vtable)).GetParameterValue(@as(*const IAzBizRuleParameters, @ptrCast(self)), bstr_parameter_name_, pvar_parameter_value_);
            }
            pub inline fn remove(self: *const T, var_parameter_name_: ?BSTR) HRESULT {
                return @as(*const IAzBizRuleParameters.VTable, @ptrCast(self.vtable)).Remove(@as(*const IAzBizRuleParameters, @ptrCast(self)), var_parameter_name_);
            }
            pub inline fn removeAll(self: *const T) HRESULT {
                return @as(*const IAzBizRuleParameters.VTable, @ptrCast(self.vtable)).RemoveAll(@as(*const IAzBizRuleParameters, @ptrCast(self)));
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*u32) HRESULT {
                return @as(*const IAzBizRuleParameters.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IAzBizRuleParameters, @ptrCast(self)), pl_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzBizRuleInterfaces_Value = Guid.initString("e94128c7-e9da-44cc-b0bd-53036f3aab3d");
pub const IID_IAzBizRuleInterfaces = &IID_IAzBizRuleInterfaces_Value;
pub const IAzBizRuleInterfaces = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        AddInterface: *const fn (
            self: *const IAzBizRuleInterfaces,
            bstr_interface_name: ?BSTR,
            l_interface_flag: i32,
            var_interface: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddInterfaces: *const fn (
            self: *const IAzBizRuleInterfaces,
            var_interface_names: VARIANT,
            var_interface_flags: VARIANT,
            var_interfaces: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInterfaceValue: *const fn (
            self: *const IAzBizRuleInterfaces,
            bstr_interface_name: ?BSTR,
            l_interface_flag: ?*i32,
            var_interface: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IAzBizRuleInterfaces,
            bstr_interface_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAll: *const fn (
            self: *const IAzBizRuleInterfaces,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzBizRuleInterfaces,
            pl_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn addInterface(self: *const T, bstr_interface_name_: ?BSTR, l_interface_flag_: i32, var_interface_: VARIANT) HRESULT {
                return @as(*const IAzBizRuleInterfaces.VTable, @ptrCast(self.vtable)).AddInterface(@as(*const IAzBizRuleInterfaces, @ptrCast(self)), bstr_interface_name_, l_interface_flag_, var_interface_);
            }
            pub inline fn addInterfaces(self: *const T, var_interface_names_: VARIANT, var_interface_flags_: VARIANT, var_interfaces_: VARIANT) HRESULT {
                return @as(*const IAzBizRuleInterfaces.VTable, @ptrCast(self.vtable)).AddInterfaces(@as(*const IAzBizRuleInterfaces, @ptrCast(self)), var_interface_names_, var_interface_flags_, var_interfaces_);
            }
            pub inline fn getInterfaceValue(self: *const T, bstr_interface_name_: ?BSTR, l_interface_flag_: ?*i32, var_interface_: ?*VARIANT) HRESULT {
                return @as(*const IAzBizRuleInterfaces.VTable, @ptrCast(self.vtable)).GetInterfaceValue(@as(*const IAzBizRuleInterfaces, @ptrCast(self)), bstr_interface_name_, l_interface_flag_, var_interface_);
            }
            pub inline fn remove(self: *const T, bstr_interface_name_: ?BSTR) HRESULT {
                return @as(*const IAzBizRuleInterfaces.VTable, @ptrCast(self.vtable)).Remove(@as(*const IAzBizRuleInterfaces, @ptrCast(self)), bstr_interface_name_);
            }
            pub inline fn removeAll(self: *const T) HRESULT {
                return @as(*const IAzBizRuleInterfaces.VTable, @ptrCast(self.vtable)).RemoveAll(@as(*const IAzBizRuleInterfaces, @ptrCast(self)));
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*u32) HRESULT {
                return @as(*const IAzBizRuleInterfaces.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IAzBizRuleInterfaces, @ptrCast(self)), pl_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzClientContext3_Value = Guid.initString("11894fde-1deb-4b4b-8907-6d1cda1f5d4f");
pub const IID_IAzClientContext3 = &IID_IAzClientContext3_Value;
pub const IAzClientContext3 = extern struct {
    pub const VTable = extern struct {
        base: IAzClientContext2.VTable,
        AccessCheck2: *const fn (
            self: *const IAzClientContext3,
            bstr_object_name: ?BSTR,
            bstr_scope_name: ?BSTR,
            l_operation: i32,
            pl_result: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsInRoleAssignment: *const fn (
            self: *const IAzClientContext3,
            bstr_scope_name: ?BSTR,
            bstr_role_name: ?BSTR,
            pb_is_in_role: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOperations: *const fn (
            self: *const IAzClientContext3,
            bstr_scope_name: ?BSTR,
            pp_operation_collection: ?*?*IAzOperations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTasks: *const fn (
            self: *const IAzClientContext3,
            bstr_scope_name: ?BSTR,
            pp_task_collection: ?*?*IAzTasks,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BizRuleParameters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzClientContext3,
            pp_biz_rule_param: ?*?*IAzBizRuleParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BizRuleInterfaces: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzClientContext3,
            pp_biz_rule_interfaces: ?*?*IAzBizRuleInterfaces,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroups: *const fn (
            self: *const IAzClientContext3,
            bstr_scope_name: ?BSTR,
            ul_options: AZ_PROP_CONSTANTS,
            p_group_array: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Sids: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzClientContext3,
            p_string_sid_array: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IAzClientContext2.MethodMixin(T);
            pub inline fn accessCheck2(self: *const T, bstr_object_name_: ?BSTR, bstr_scope_name_: ?BSTR, l_operation_: i32, pl_result_: ?*u32) HRESULT {
                return @as(*const IAzClientContext3.VTable, @ptrCast(self.vtable)).AccessCheck2(@as(*const IAzClientContext3, @ptrCast(self)), bstr_object_name_, bstr_scope_name_, l_operation_, pl_result_);
            }
            pub inline fn isInRoleAssignment(self: *const T, bstr_scope_name_: ?BSTR, bstr_role_name_: ?BSTR, pb_is_in_role_: ?*i16) HRESULT {
                return @as(*const IAzClientContext3.VTable, @ptrCast(self.vtable)).IsInRoleAssignment(@as(*const IAzClientContext3, @ptrCast(self)), bstr_scope_name_, bstr_role_name_, pb_is_in_role_);
            }
            pub inline fn getOperations(self: *const T, bstr_scope_name_: ?BSTR, pp_operation_collection_: ?*?*IAzOperations) HRESULT {
                return @as(*const IAzClientContext3.VTable, @ptrCast(self.vtable)).GetOperations(@as(*const IAzClientContext3, @ptrCast(self)), bstr_scope_name_, pp_operation_collection_);
            }
            pub inline fn getTasks(self: *const T, bstr_scope_name_: ?BSTR, pp_task_collection_: ?*?*IAzTasks) HRESULT {
                return @as(*const IAzClientContext3.VTable, @ptrCast(self.vtable)).GetTasks(@as(*const IAzClientContext3, @ptrCast(self)), bstr_scope_name_, pp_task_collection_);
            }
            pub inline fn getBizRuleParameters(self: *const T, pp_biz_rule_param_: ?*?*IAzBizRuleParameters) HRESULT {
                return @as(*const IAzClientContext3.VTable, @ptrCast(self.vtable)).get_BizRuleParameters(@as(*const IAzClientContext3, @ptrCast(self)), pp_biz_rule_param_);
            }
            pub inline fn getBizRuleInterfaces(self: *const T, pp_biz_rule_interfaces_: ?*?*IAzBizRuleInterfaces) HRESULT {
                return @as(*const IAzClientContext3.VTable, @ptrCast(self.vtable)).get_BizRuleInterfaces(@as(*const IAzClientContext3, @ptrCast(self)), pp_biz_rule_interfaces_);
            }
            pub inline fn getGroups(self: *const T, bstr_scope_name_: ?BSTR, ul_options_: AZ_PROP_CONSTANTS, p_group_array_: ?*VARIANT) HRESULT {
                return @as(*const IAzClientContext3.VTable, @ptrCast(self.vtable)).GetGroups(@as(*const IAzClientContext3, @ptrCast(self)), bstr_scope_name_, ul_options_, p_group_array_);
            }
            pub inline fn getSids(self: *const T, p_string_sid_array_: ?*VARIANT) HRESULT {
                return @as(*const IAzClientContext3.VTable, @ptrCast(self.vtable)).get_Sids(@as(*const IAzClientContext3, @ptrCast(self)), p_string_sid_array_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzScope2_Value = Guid.initString("ee9fe8c9-c9f3-40e2-aa12-d1d8599727fd");
pub const IID_IAzScope2 = &IID_IAzScope2_Value;
pub const IAzScope2 = extern struct {
    pub const VTable = extern struct {
        base: IAzScope.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RoleDefinitions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScope2,
            pp_role_definitions: ?*?*IAzRoleDefinitions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRoleDefinition: *const fn (
            self: *const IAzScope2,
            bstr_role_definition_name: ?BSTR,
            pp_role_definitions: ?*?*IAzRoleDefinition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenRoleDefinition: *const fn (
            self: *const IAzScope2,
            bstr_role_definition_name: ?BSTR,
            pp_role_definitions: ?*?*IAzRoleDefinition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRoleDefinition: *const fn (
            self: *const IAzScope2,
            bstr_role_definition_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RoleAssignments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzScope2,
            pp_role_assignments: ?*?*IAzRoleAssignments,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRoleAssignment: *const fn (
            self: *const IAzScope2,
            bstr_role_assignment_name: ?BSTR,
            pp_role_assignment: ?*?*IAzRoleAssignment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenRoleAssignment: *const fn (
            self: *const IAzScope2,
            bstr_role_assignment_name: ?BSTR,
            pp_role_assignment: ?*?*IAzRoleAssignment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRoleAssignment: *const fn (
            self: *const IAzScope2,
            bstr_role_assignment_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IAzScope.MethodMixin(T);
            pub inline fn getRoleDefinitions(self: *const T, pp_role_definitions_: ?*?*IAzRoleDefinitions) HRESULT {
                return @as(*const IAzScope2.VTable, @ptrCast(self.vtable)).get_RoleDefinitions(@as(*const IAzScope2, @ptrCast(self)), pp_role_definitions_);
            }
            pub inline fn createRoleDefinition(self: *const T, bstr_role_definition_name_: ?BSTR, pp_role_definitions_: ?*?*IAzRoleDefinition) HRESULT {
                return @as(*const IAzScope2.VTable, @ptrCast(self.vtable)).CreateRoleDefinition(@as(*const IAzScope2, @ptrCast(self)), bstr_role_definition_name_, pp_role_definitions_);
            }
            pub inline fn openRoleDefinition(self: *const T, bstr_role_definition_name_: ?BSTR, pp_role_definitions_: ?*?*IAzRoleDefinition) HRESULT {
                return @as(*const IAzScope2.VTable, @ptrCast(self.vtable)).OpenRoleDefinition(@as(*const IAzScope2, @ptrCast(self)), bstr_role_definition_name_, pp_role_definitions_);
            }
            pub inline fn deleteRoleDefinition(self: *const T, bstr_role_definition_name_: ?BSTR) HRESULT {
                return @as(*const IAzScope2.VTable, @ptrCast(self.vtable)).DeleteRoleDefinition(@as(*const IAzScope2, @ptrCast(self)), bstr_role_definition_name_);
            }
            pub inline fn getRoleAssignments(self: *const T, pp_role_assignments_: ?*?*IAzRoleAssignments) HRESULT {
                return @as(*const IAzScope2.VTable, @ptrCast(self.vtable)).get_RoleAssignments(@as(*const IAzScope2, @ptrCast(self)), pp_role_assignments_);
            }
            pub inline fn createRoleAssignment(self: *const T, bstr_role_assignment_name_: ?BSTR, pp_role_assignment_: ?*?*IAzRoleAssignment) HRESULT {
                return @as(*const IAzScope2.VTable, @ptrCast(self.vtable)).CreateRoleAssignment(@as(*const IAzScope2, @ptrCast(self)), bstr_role_assignment_name_, pp_role_assignment_);
            }
            pub inline fn openRoleAssignment(self: *const T, bstr_role_assignment_name_: ?BSTR, pp_role_assignment_: ?*?*IAzRoleAssignment) HRESULT {
                return @as(*const IAzScope2.VTable, @ptrCast(self.vtable)).OpenRoleAssignment(@as(*const IAzScope2, @ptrCast(self)), bstr_role_assignment_name_, pp_role_assignment_);
            }
            pub inline fn deleteRoleAssignment(self: *const T, bstr_role_assignment_name_: ?BSTR) HRESULT {
                return @as(*const IAzScope2.VTable, @ptrCast(self.vtable)).DeleteRoleAssignment(@as(*const IAzScope2, @ptrCast(self)), bstr_role_assignment_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzApplication3_Value = Guid.initString("181c845e-7196-4a7d-ac2e-020c0bb7a303");
pub const IID_IAzApplication3 = &IID_IAzApplication3_Value;
pub const IAzApplication3 = extern struct {
    pub const VTable = extern struct {
        base: IAzApplication2.VTable,
        ScopeExists: *const fn (
            self: *const IAzApplication3,
            bstr_scope_name: ?BSTR,
            pb_exist: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenScope2: *const fn (
            self: *const IAzApplication3,
            bstr_scope_name: ?BSTR,
            pp_scope2: ?*?*IAzScope2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateScope2: *const fn (
            self: *const IAzApplication3,
            bstr_scope_name: ?BSTR,
            pp_scope2: ?*?*IAzScope2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteScope2: *const fn (
            self: *const IAzApplication3,
            bstr_scope_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RoleDefinitions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication3,
            pp_role_definitions: ?*?*IAzRoleDefinitions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRoleDefinition: *const fn (
            self: *const IAzApplication3,
            bstr_role_definition_name: ?BSTR,
            pp_role_definitions: ?*?*IAzRoleDefinition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenRoleDefinition: *const fn (
            self: *const IAzApplication3,
            bstr_role_definition_name: ?BSTR,
            pp_role_definitions: ?*?*IAzRoleDefinition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRoleDefinition: *const fn (
            self: *const IAzApplication3,
            bstr_role_definition_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RoleAssignments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication3,
            pp_role_assignments: ?*?*IAzRoleAssignments,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRoleAssignment: *const fn (
            self: *const IAzApplication3,
            bstr_role_assignment_name: ?BSTR,
            pp_role_assignment: ?*?*IAzRoleAssignment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenRoleAssignment: *const fn (
            self: *const IAzApplication3,
            bstr_role_assignment_name: ?BSTR,
            pp_role_assignment: ?*?*IAzRoleAssignment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRoleAssignment: *const fn (
            self: *const IAzApplication3,
            bstr_role_assignment_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BizRulesEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication3,
            pb_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BizRulesEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplication3,
            b_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IAzApplication2.MethodMixin(T);
            pub inline fn scopeExists(self: *const T, bstr_scope_name_: ?BSTR, pb_exist_: ?*i16) HRESULT {
                return @as(*const IAzApplication3.VTable, @ptrCast(self.vtable)).ScopeExists(@as(*const IAzApplication3, @ptrCast(self)), bstr_scope_name_, pb_exist_);
            }
            pub inline fn openScope2(self: *const T, bstr_scope_name_: ?BSTR, pp_scope2_: ?*?*IAzScope2) HRESULT {
                return @as(*const IAzApplication3.VTable, @ptrCast(self.vtable)).OpenScope2(@as(*const IAzApplication3, @ptrCast(self)), bstr_scope_name_, pp_scope2_);
            }
            pub inline fn createScope2(self: *const T, bstr_scope_name_: ?BSTR, pp_scope2_: ?*?*IAzScope2) HRESULT {
                return @as(*const IAzApplication3.VTable, @ptrCast(self.vtable)).CreateScope2(@as(*const IAzApplication3, @ptrCast(self)), bstr_scope_name_, pp_scope2_);
            }
            pub inline fn deleteScope2(self: *const T, bstr_scope_name_: ?BSTR) HRESULT {
                return @as(*const IAzApplication3.VTable, @ptrCast(self.vtable)).DeleteScope2(@as(*const IAzApplication3, @ptrCast(self)), bstr_scope_name_);
            }
            pub inline fn getRoleDefinitions(self: *const T, pp_role_definitions_: ?*?*IAzRoleDefinitions) HRESULT {
                return @as(*const IAzApplication3.VTable, @ptrCast(self.vtable)).get_RoleDefinitions(@as(*const IAzApplication3, @ptrCast(self)), pp_role_definitions_);
            }
            pub inline fn createRoleDefinition(self: *const T, bstr_role_definition_name_: ?BSTR, pp_role_definitions_: ?*?*IAzRoleDefinition) HRESULT {
                return @as(*const IAzApplication3.VTable, @ptrCast(self.vtable)).CreateRoleDefinition(@as(*const IAzApplication3, @ptrCast(self)), bstr_role_definition_name_, pp_role_definitions_);
            }
            pub inline fn openRoleDefinition(self: *const T, bstr_role_definition_name_: ?BSTR, pp_role_definitions_: ?*?*IAzRoleDefinition) HRESULT {
                return @as(*const IAzApplication3.VTable, @ptrCast(self.vtable)).OpenRoleDefinition(@as(*const IAzApplication3, @ptrCast(self)), bstr_role_definition_name_, pp_role_definitions_);
            }
            pub inline fn deleteRoleDefinition(self: *const T, bstr_role_definition_name_: ?BSTR) HRESULT {
                return @as(*const IAzApplication3.VTable, @ptrCast(self.vtable)).DeleteRoleDefinition(@as(*const IAzApplication3, @ptrCast(self)), bstr_role_definition_name_);
            }
            pub inline fn getRoleAssignments(self: *const T, pp_role_assignments_: ?*?*IAzRoleAssignments) HRESULT {
                return @as(*const IAzApplication3.VTable, @ptrCast(self.vtable)).get_RoleAssignments(@as(*const IAzApplication3, @ptrCast(self)), pp_role_assignments_);
            }
            pub inline fn createRoleAssignment(self: *const T, bstr_role_assignment_name_: ?BSTR, pp_role_assignment_: ?*?*IAzRoleAssignment) HRESULT {
                return @as(*const IAzApplication3.VTable, @ptrCast(self.vtable)).CreateRoleAssignment(@as(*const IAzApplication3, @ptrCast(self)), bstr_role_assignment_name_, pp_role_assignment_);
            }
            pub inline fn openRoleAssignment(self: *const T, bstr_role_assignment_name_: ?BSTR, pp_role_assignment_: ?*?*IAzRoleAssignment) HRESULT {
                return @as(*const IAzApplication3.VTable, @ptrCast(self.vtable)).OpenRoleAssignment(@as(*const IAzApplication3, @ptrCast(self)), bstr_role_assignment_name_, pp_role_assignment_);
            }
            pub inline fn deleteRoleAssignment(self: *const T, bstr_role_assignment_name_: ?BSTR) HRESULT {
                return @as(*const IAzApplication3.VTable, @ptrCast(self.vtable)).DeleteRoleAssignment(@as(*const IAzApplication3, @ptrCast(self)), bstr_role_assignment_name_);
            }
            pub inline fn getBizRulesEnabled(self: *const T, pb_enabled_: ?*i16) HRESULT {
                return @as(*const IAzApplication3.VTable, @ptrCast(self.vtable)).get_BizRulesEnabled(@as(*const IAzApplication3, @ptrCast(self)), pb_enabled_);
            }
            pub inline fn putBizRulesEnabled(self: *const T, b_enabled_: i16) HRESULT {
                return @as(*const IAzApplication3.VTable, @ptrCast(self.vtable)).put_BizRulesEnabled(@as(*const IAzApplication3, @ptrCast(self)), b_enabled_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzOperation2_Value = Guid.initString("1f5ea01f-44a2-4184-9c48-a75b4dcc8ccc");
pub const IID_IAzOperation2 = &IID_IAzOperation2_Value;
pub const IAzOperation2 = extern struct {
    pub const VTable = extern struct {
        base: IAzOperation.VTable,
        RoleAssignments: *const fn (
            self: *const IAzOperation2,
            bstr_scope_name: ?BSTR,
            b_recursive: i16,
            pp_role_assignments: ?*?*IAzRoleAssignments,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IAzOperation.MethodMixin(T);
            pub inline fn roleAssignments(self: *const T, bstr_scope_name_: ?BSTR, b_recursive_: i16, pp_role_assignments_: ?*?*IAzRoleAssignments) HRESULT {
                return @as(*const IAzOperation2.VTable, @ptrCast(self.vtable)).RoleAssignments(@as(*const IAzOperation2, @ptrCast(self)), bstr_scope_name_, b_recursive_, pp_role_assignments_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzRoleDefinitions_Value = Guid.initString("881f25a5-d755-4550-957a-d503a3b34001");
pub const IID_IAzRoleDefinitions = &IID_IAzRoleDefinitions_Value;
pub const IAzRoleDefinitions = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRoleDefinitions,
            index: i32,
            pvar_obt_ptr: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRoleDefinitions,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRoleDefinitions,
            pp_enum_ptr: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItem(self: *const T, index_: i32, pvar_obt_ptr_: ?*VARIANT) HRESULT {
                return @as(*const IAzRoleDefinitions.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IAzRoleDefinitions, @ptrCast(self)), index_, pvar_obt_ptr_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IAzRoleDefinitions.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IAzRoleDefinitions, @ptrCast(self)), pl_count_);
            }
            pub inline fn getNewEnum(self: *const T, pp_enum_ptr_: ?*?*IUnknown) HRESULT {
                return @as(*const IAzRoleDefinitions.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IAzRoleDefinitions, @ptrCast(self)), pp_enum_ptr_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzRoleDefinition_Value = Guid.initString("d97fcea1-2599-44f1-9fc3-58e9fbe09466");
pub const IID_IAzRoleDefinition = &IID_IAzRoleDefinition_Value;
pub const IAzRoleDefinition = extern struct {
    pub const VTable = extern struct {
        base: IAzTask.VTable,
        RoleAssignments: *const fn (
            self: *const IAzRoleDefinition,
            bstr_scope_name: ?BSTR,
            b_recursive: i16,
            pp_role_assignments: ?*?*IAzRoleAssignments,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRoleDefinition: *const fn (
            self: *const IAzRoleDefinition,
            bstr_role_definition: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRoleDefinition: *const fn (
            self: *const IAzRoleDefinition,
            bstr_role_definition: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RoleDefinitions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRoleDefinition,
            pp_role_definitions: ?*?*IAzRoleDefinitions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IAzTask.MethodMixin(T);
            pub inline fn roleAssignments(self: *const T, bstr_scope_name_: ?BSTR, b_recursive_: i16, pp_role_assignments_: ?*?*IAzRoleAssignments) HRESULT {
                return @as(*const IAzRoleDefinition.VTable, @ptrCast(self.vtable)).RoleAssignments(@as(*const IAzRoleDefinition, @ptrCast(self)), bstr_scope_name_, b_recursive_, pp_role_assignments_);
            }
            pub inline fn addRoleDefinition(self: *const T, bstr_role_definition_: ?BSTR) HRESULT {
                return @as(*const IAzRoleDefinition.VTable, @ptrCast(self.vtable)).AddRoleDefinition(@as(*const IAzRoleDefinition, @ptrCast(self)), bstr_role_definition_);
            }
            pub inline fn deleteRoleDefinition(self: *const T, bstr_role_definition_: ?BSTR) HRESULT {
                return @as(*const IAzRoleDefinition.VTable, @ptrCast(self.vtable)).DeleteRoleDefinition(@as(*const IAzRoleDefinition, @ptrCast(self)), bstr_role_definition_);
            }
            pub inline fn getRoleDefinitions(self: *const T, pp_role_definitions_: ?*?*IAzRoleDefinitions) HRESULT {
                return @as(*const IAzRoleDefinition.VTable, @ptrCast(self.vtable)).get_RoleDefinitions(@as(*const IAzRoleDefinition, @ptrCast(self)), pp_role_definitions_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzRoleAssignment_Value = Guid.initString("55647d31-0d5a-4fa3-b4ac-2b5f9ad5ab76");
pub const IID_IAzRoleAssignment = &IID_IAzRoleAssignment_Value;
pub const IAzRoleAssignment = extern struct {
    pub const VTable = extern struct {
        base: IAzRole.VTable,
        AddRoleDefinition: *const fn (
            self: *const IAzRoleAssignment,
            bstr_role_definition: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRoleDefinition: *const fn (
            self: *const IAzRoleAssignment,
            bstr_role_definition: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RoleDefinitions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRoleAssignment,
            pp_role_definitions: ?*?*IAzRoleDefinitions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Scope: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRoleAssignment,
            pp_scope: ?*?*IAzScope,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IAzRole.MethodMixin(T);
            pub inline fn addRoleDefinition(self: *const T, bstr_role_definition_: ?BSTR) HRESULT {
                return @as(*const IAzRoleAssignment.VTable, @ptrCast(self.vtable)).AddRoleDefinition(@as(*const IAzRoleAssignment, @ptrCast(self)), bstr_role_definition_);
            }
            pub inline fn deleteRoleDefinition(self: *const T, bstr_role_definition_: ?BSTR) HRESULT {
                return @as(*const IAzRoleAssignment.VTable, @ptrCast(self.vtable)).DeleteRoleDefinition(@as(*const IAzRoleAssignment, @ptrCast(self)), bstr_role_definition_);
            }
            pub inline fn getRoleDefinitions(self: *const T, pp_role_definitions_: ?*?*IAzRoleDefinitions) HRESULT {
                return @as(*const IAzRoleAssignment.VTable, @ptrCast(self.vtable)).get_RoleDefinitions(@as(*const IAzRoleAssignment, @ptrCast(self)), pp_role_definitions_);
            }
            pub inline fn getScope(self: *const T, pp_scope_: ?*?*IAzScope) HRESULT {
                return @as(*const IAzRoleAssignment.VTable, @ptrCast(self.vtable)).get_Scope(@as(*const IAzRoleAssignment, @ptrCast(self)), pp_scope_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzRoleAssignments_Value = Guid.initString("9c80b900-fceb-4d73-a0f4-c83b0bbf2481");
pub const IID_IAzRoleAssignments = &IID_IAzRoleAssignments_Value;
pub const IAzRoleAssignments = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRoleAssignments,
            index: i32,
            pvar_obt_ptr: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRoleAssignments,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzRoleAssignments,
            pp_enum_ptr: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItem(self: *const T, index_: i32, pvar_obt_ptr_: ?*VARIANT) HRESULT {
                return @as(*const IAzRoleAssignments.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IAzRoleAssignments, @ptrCast(self)), index_, pvar_obt_ptr_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IAzRoleAssignments.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IAzRoleAssignments, @ptrCast(self)), pl_count_);
            }
            pub inline fn getNewEnum(self: *const T, pp_enum_ptr_: ?*?*IUnknown) HRESULT {
                return @as(*const IAzRoleAssignments.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IAzRoleAssignments, @ptrCast(self)), pp_enum_ptr_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzPrincipalLocator_Value = Guid.initString("e5c3507d-ad6a-4992-9c7f-74ab480b44cc");
pub const IID_IAzPrincipalLocator = &IID_IAzPrincipalLocator_Value;
pub const IAzPrincipalLocator = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NameResolver: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzPrincipalLocator,
            pp_name_resolver: ?*?*IAzNameResolver,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectPicker: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzPrincipalLocator,
            pp_object_picker: ?*?*IAzObjectPicker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNameResolver(self: *const T, pp_name_resolver_: ?*?*IAzNameResolver) HRESULT {
                return @as(*const IAzPrincipalLocator.VTable, @ptrCast(self.vtable)).get_NameResolver(@as(*const IAzPrincipalLocator, @ptrCast(self)), pp_name_resolver_);
            }
            pub inline fn getObjectPicker(self: *const T, pp_object_picker_: ?*?*IAzObjectPicker) HRESULT {
                return @as(*const IAzPrincipalLocator.VTable, @ptrCast(self.vtable)).get_ObjectPicker(@as(*const IAzPrincipalLocator, @ptrCast(self)), pp_object_picker_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzNameResolver_Value = Guid.initString("504d0f15-73e2-43df-a870-a64f40714f53");
pub const IID_IAzNameResolver = &IID_IAzNameResolver_Value;
pub const IAzNameResolver = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        NameFromSid: *const fn (
            self: *const IAzNameResolver,
            bstr_sid: ?BSTR,
            p_sid_type: ?*i32,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NamesFromSids: *const fn (
            self: *const IAzNameResolver,
            v_sids: VARIANT,
            pv_sid_types: ?*VARIANT,
            pv_names: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn nameFromSid(self: *const T, bstr_sid_: ?BSTR, p_sid_type_: ?*i32, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IAzNameResolver.VTable, @ptrCast(self.vtable)).NameFromSid(@as(*const IAzNameResolver, @ptrCast(self)), bstr_sid_, p_sid_type_, pbstr_name_);
            }
            pub inline fn namesFromSids(self: *const T, v_sids_: VARIANT, pv_sid_types_: ?*VARIANT, pv_names_: ?*VARIANT) HRESULT {
                return @as(*const IAzNameResolver.VTable, @ptrCast(self.vtable)).NamesFromSids(@as(*const IAzNameResolver, @ptrCast(self)), v_sids_, pv_sid_types_, pv_names_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzObjectPicker_Value = Guid.initString("63130a48-699a-42d8-bf01-c62ac3fb79f9");
pub const IID_IAzObjectPicker = &IID_IAzObjectPicker_Value;
pub const IAzObjectPicker = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetPrincipals: *const fn (
            self: *const IAzObjectPicker,
            h_parent_wnd: ?HWND,
            bstr_title: ?BSTR,
            pv_sid_types: ?*VARIANT,
            pv_names: ?*VARIANT,
            pv_sids: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzObjectPicker,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getPrincipals(self: *const T, h_parent_wnd_: ?HWND, bstr_title_: ?BSTR, pv_sid_types_: ?*VARIANT, pv_names_: ?*VARIANT, pv_sids_: ?*VARIANT) HRESULT {
                return @as(*const IAzObjectPicker.VTable, @ptrCast(self.vtable)).GetPrincipals(@as(*const IAzObjectPicker, @ptrCast(self)), h_parent_wnd_, bstr_title_, pv_sid_types_, pv_names_, pv_sids_);
            }
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IAzObjectPicker.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IAzObjectPicker, @ptrCast(self)), pbstr_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzApplicationGroup2_Value = Guid.initString("3f0613fc-b71a-464e-a11d-5b881a56cefa");
pub const IID_IAzApplicationGroup2 = &IID_IAzApplicationGroup2_Value;
pub const IAzApplicationGroup2 = extern struct {
    pub const VTable = extern struct {
        base: IAzApplicationGroup.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BizRule: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup2,
            pbstr_prop: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BizRule: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup2,
            bstr_prop: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BizRuleLanguage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup2,
            pbstr_prop: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BizRuleLanguage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup2,
            bstr_prop: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BizRuleImportedPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup2,
            pbstr_prop: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BizRuleImportedPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAzApplicationGroup2,
            bstr_prop: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RoleAssignments: *const fn (
            self: *const IAzApplicationGroup2,
            bstr_scope_name: ?BSTR,
            b_recursive: i16,
            pp_role_assignments: ?*?*IAzRoleAssignments,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IAzApplicationGroup.MethodMixin(T);
            pub inline fn getBizRule(self: *const T, pbstr_prop_: ?*?BSTR) HRESULT {
                return @as(*const IAzApplicationGroup2.VTable, @ptrCast(self.vtable)).get_BizRule(@as(*const IAzApplicationGroup2, @ptrCast(self)), pbstr_prop_);
            }
            pub inline fn putBizRule(self: *const T, bstr_prop_: ?BSTR) HRESULT {
                return @as(*const IAzApplicationGroup2.VTable, @ptrCast(self.vtable)).put_BizRule(@as(*const IAzApplicationGroup2, @ptrCast(self)), bstr_prop_);
            }
            pub inline fn getBizRuleLanguage(self: *const T, pbstr_prop_: ?*?BSTR) HRESULT {
                return @as(*const IAzApplicationGroup2.VTable, @ptrCast(self.vtable)).get_BizRuleLanguage(@as(*const IAzApplicationGroup2, @ptrCast(self)), pbstr_prop_);
            }
            pub inline fn putBizRuleLanguage(self: *const T, bstr_prop_: ?BSTR) HRESULT {
                return @as(*const IAzApplicationGroup2.VTable, @ptrCast(self.vtable)).put_BizRuleLanguage(@as(*const IAzApplicationGroup2, @ptrCast(self)), bstr_prop_);
            }
            pub inline fn getBizRuleImportedPath(self: *const T, pbstr_prop_: ?*?BSTR) HRESULT {
                return @as(*const IAzApplicationGroup2.VTable, @ptrCast(self.vtable)).get_BizRuleImportedPath(@as(*const IAzApplicationGroup2, @ptrCast(self)), pbstr_prop_);
            }
            pub inline fn putBizRuleImportedPath(self: *const T, bstr_prop_: ?BSTR) HRESULT {
                return @as(*const IAzApplicationGroup2.VTable, @ptrCast(self.vtable)).put_BizRuleImportedPath(@as(*const IAzApplicationGroup2, @ptrCast(self)), bstr_prop_);
            }
            pub inline fn roleAssignments(self: *const T, bstr_scope_name_: ?BSTR, b_recursive_: i16, pp_role_assignments_: ?*?*IAzRoleAssignments) HRESULT {
                return @as(*const IAzApplicationGroup2.VTable, @ptrCast(self.vtable)).RoleAssignments(@as(*const IAzApplicationGroup2, @ptrCast(self)), bstr_scope_name_, b_recursive_, pp_role_assignments_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAzTask2_Value = Guid.initString("03a9a5ee-48c8-4832-9025-aad503c46526");
pub const IID_IAzTask2 = &IID_IAzTask2_Value;
pub const IAzTask2 = extern struct {
    pub const VTable = extern struct {
        base: IAzTask.VTable,
        RoleAssignments: *const fn (
            self: *const IAzTask2,
            bstr_scope_name: ?BSTR,
            b_recursive: i16,
            pp_role_assignments: ?*?*IAzRoleAssignments,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IAzTask.MethodMixin(T);
            pub inline fn roleAssignments(self: *const T, bstr_scope_name_: ?BSTR, b_recursive_: i16, pp_role_assignments_: ?*?*IAzRoleAssignments) HRESULT {
                return @as(*const IAzTask2.VTable, @ptrCast(self.vtable)).RoleAssignments(@as(*const IAzTask2, @ptrCast(self)), bstr_scope_name_, b_recursive_, pp_role_assignments_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const AZ_PROP_CONSTANTS = enum(i32) {
    PROP_NAME = 1,
    PROP_DESCRIPTION = 2,
    PROP_WRITABLE = 3,
    PROP_APPLICATION_DATA = 4,
    PROP_CHILD_CREATE = 5,
    MAX_APPLICATION_NAME_LENGTH = 512,
    MAX_OPERATION_NAME_LENGTH = 64,
    // MAX_TASK_NAME_LENGTH = 64, this enum value conflicts with MAX_OPERATION_NAME_LENGTH
    MAX_SCOPE_NAME_LENGTH = 65536,
    // MAX_GROUP_NAME_LENGTH = 64, this enum value conflicts with MAX_OPERATION_NAME_LENGTH
    // MAX_ROLE_NAME_LENGTH = 64, this enum value conflicts with MAX_OPERATION_NAME_LENGTH
    // MAX_NAME_LENGTH = 65536, this enum value conflicts with MAX_SCOPE_NAME_LENGTH
    MAX_DESCRIPTION_LENGTH = 1024,
    MAX_APPLICATION_DATA_LENGTH = 4096,
    // SUBMIT_FLAG_ABORT = 1, this enum value conflicts with PROP_NAME
    // SUBMIT_FLAG_FLUSH = 2, this enum value conflicts with PROP_DESCRIPTION
    // MAX_POLICY_URL_LENGTH = 65536, this enum value conflicts with MAX_SCOPE_NAME_LENGTH
    // AZSTORE_FLAG_CREATE = 1, this enum value conflicts with PROP_NAME
    // AZSTORE_FLAG_MANAGE_STORE_ONLY = 2, this enum value conflicts with PROP_DESCRIPTION
    // AZSTORE_FLAG_BATCH_UPDATE = 4, this enum value conflicts with PROP_APPLICATION_DATA
    AZSTORE_FLAG_AUDIT_IS_CRITICAL = 8,
    AZSTORE_FORCE_APPLICATION_CLOSE = 16,
    AZSTORE_NT6_FUNCTION_LEVEL = 32,
    AZSTORE_FLAG_MANAGE_ONLY_PASSIVE_SUBMIT = 32768,
    PROP_AZSTORE_DOMAIN_TIMEOUT = 100,
    AZSTORE_DEFAULT_DOMAIN_TIMEOUT = 15000,
    PROP_AZSTORE_SCRIPT_ENGINE_TIMEOUT = 101,
    AZSTORE_MIN_DOMAIN_TIMEOUT = 500,
    AZSTORE_MIN_SCRIPT_ENGINE_TIMEOUT = 5000,
    AZSTORE_DEFAULT_SCRIPT_ENGINE_TIMEOUT = 45000,
    PROP_AZSTORE_MAX_SCRIPT_ENGINES = 102,
    AZSTORE_DEFAULT_MAX_SCRIPT_ENGINES = 120,
    PROP_AZSTORE_MAJOR_VERSION = 103,
    PROP_AZSTORE_MINOR_VERSION = 104,
    PROP_AZSTORE_TARGET_MACHINE = 105,
    PROP_AZTORE_IS_ADAM_INSTANCE = 106,
    PROP_OPERATION_ID = 200,
    PROP_TASK_OPERATIONS = 300,
    PROP_TASK_BIZRULE = 301,
    PROP_TASK_BIZRULE_LANGUAGE = 302,
    PROP_TASK_TASKS = 303,
    PROP_TASK_BIZRULE_IMPORTED_PATH = 304,
    PROP_TASK_IS_ROLE_DEFINITION = 305,
    // MAX_TASK_BIZRULE_LENGTH = 65536, this enum value conflicts with MAX_SCOPE_NAME_LENGTH
    // MAX_TASK_BIZRULE_LANGUAGE_LENGTH = 64, this enum value conflicts with MAX_OPERATION_NAME_LENGTH
    // MAX_TASK_BIZRULE_IMPORTED_PATH_LENGTH = 512, this enum value conflicts with MAX_APPLICATION_NAME_LENGTH
    // MAX_BIZRULE_STRING = 65536, this enum value conflicts with MAX_SCOPE_NAME_LENGTH
    PROP_GROUP_TYPE = 400,
    // GROUPTYPE_LDAP_QUERY = 1, this enum value conflicts with PROP_NAME
    // GROUPTYPE_BASIC = 2, this enum value conflicts with PROP_DESCRIPTION
    // GROUPTYPE_BIZRULE = 3, this enum value conflicts with PROP_WRITABLE
    PROP_GROUP_APP_MEMBERS = 401,
    PROP_GROUP_APP_NON_MEMBERS = 402,
    PROP_GROUP_LDAP_QUERY = 403,
    // MAX_GROUP_LDAP_QUERY_LENGTH = 4096, this enum value conflicts with MAX_APPLICATION_DATA_LENGTH
    PROP_GROUP_MEMBERS = 404,
    PROP_GROUP_NON_MEMBERS = 405,
    PROP_GROUP_MEMBERS_NAME = 406,
    PROP_GROUP_NON_MEMBERS_NAME = 407,
    PROP_GROUP_BIZRULE = 408,
    PROP_GROUP_BIZRULE_LANGUAGE = 409,
    PROP_GROUP_BIZRULE_IMPORTED_PATH = 410,
    // MAX_GROUP_BIZRULE_LENGTH = 65536, this enum value conflicts with MAX_SCOPE_NAME_LENGTH
    // MAX_GROUP_BIZRULE_LANGUAGE_LENGTH = 64, this enum value conflicts with MAX_OPERATION_NAME_LENGTH
    // MAX_GROUP_BIZRULE_IMPORTED_PATH_LENGTH = 512, this enum value conflicts with MAX_APPLICATION_NAME_LENGTH
    // PROP_ROLE_APP_MEMBERS = 500, this enum value conflicts with AZSTORE_MIN_DOMAIN_TIMEOUT
    PROP_ROLE_MEMBERS = 501,
    PROP_ROLE_OPERATIONS = 502,
    PROP_ROLE_TASKS = 504,
    PROP_ROLE_MEMBERS_NAME = 505,
    PROP_SCOPE_BIZRULES_WRITABLE = 600,
    PROP_SCOPE_CAN_BE_DELEGATED = 601,
    PROP_CLIENT_CONTEXT_USER_DN = 700,
    PROP_CLIENT_CONTEXT_USER_SAM_COMPAT = 701,
    PROP_CLIENT_CONTEXT_USER_DISPLAY = 702,
    PROP_CLIENT_CONTEXT_USER_GUID = 703,
    PROP_CLIENT_CONTEXT_USER_CANONICAL = 704,
    PROP_CLIENT_CONTEXT_USER_UPN = 705,
    PROP_CLIENT_CONTEXT_USER_DNS_SAM_COMPAT = 707,
    PROP_CLIENT_CONTEXT_ROLE_FOR_ACCESS_CHECK = 708,
    PROP_CLIENT_CONTEXT_LDAP_QUERY_DN = 709,
    PROP_APPLICATION_AUTHZ_INTERFACE_CLSID = 800,
    PROP_APPLICATION_VERSION = 801,
    // MAX_APPLICATION_VERSION_LENGTH = 512, this enum value conflicts with MAX_APPLICATION_NAME_LENGTH
    PROP_APPLICATION_NAME = 802,
    PROP_APPLICATION_BIZRULE_ENABLED = 803,
    PROP_APPLY_STORE_SACL = 900,
    PROP_GENERATE_AUDITS = 901,
    PROP_POLICY_ADMINS = 902,
    PROP_POLICY_READERS = 903,
    PROP_DELEGATED_POLICY_USERS = 904,
    PROP_POLICY_ADMINS_NAME = 905,
    PROP_POLICY_READERS_NAME = 906,
    PROP_DELEGATED_POLICY_USERS_NAME = 907,
    // CLIENT_CONTEXT_SKIP_GROUP = 1, this enum value conflicts with PROP_NAME
    // CLIENT_CONTEXT_SKIP_LDAP_QUERY = 1, this enum value conflicts with PROP_NAME
    // CLIENT_CONTEXT_GET_GROUP_RECURSIVE = 2, this enum value conflicts with PROP_DESCRIPTION
    // CLIENT_CONTEXT_GET_GROUPS_STORE_LEVEL_ONLY = 2, this enum value conflicts with PROP_DESCRIPTION
};
pub const AZ_PROP_NAME = AZ_PROP_CONSTANTS.PROP_NAME;
pub const AZ_PROP_DESCRIPTION = AZ_PROP_CONSTANTS.PROP_DESCRIPTION;
pub const AZ_PROP_WRITABLE = AZ_PROP_CONSTANTS.PROP_WRITABLE;
pub const AZ_PROP_APPLICATION_DATA = AZ_PROP_CONSTANTS.PROP_APPLICATION_DATA;
pub const AZ_PROP_CHILD_CREATE = AZ_PROP_CONSTANTS.PROP_CHILD_CREATE;
pub const AZ_MAX_APPLICATION_NAME_LENGTH = AZ_PROP_CONSTANTS.MAX_APPLICATION_NAME_LENGTH;
pub const AZ_MAX_OPERATION_NAME_LENGTH = AZ_PROP_CONSTANTS.MAX_OPERATION_NAME_LENGTH;
pub const AZ_MAX_TASK_NAME_LENGTH = AZ_PROP_CONSTANTS.MAX_OPERATION_NAME_LENGTH;
pub const AZ_MAX_SCOPE_NAME_LENGTH = AZ_PROP_CONSTANTS.MAX_SCOPE_NAME_LENGTH;
pub const AZ_MAX_GROUP_NAME_LENGTH = AZ_PROP_CONSTANTS.MAX_OPERATION_NAME_LENGTH;
pub const AZ_MAX_ROLE_NAME_LENGTH = AZ_PROP_CONSTANTS.MAX_OPERATION_NAME_LENGTH;
pub const AZ_MAX_NAME_LENGTH = AZ_PROP_CONSTANTS.MAX_SCOPE_NAME_LENGTH;
pub const AZ_MAX_DESCRIPTION_LENGTH = AZ_PROP_CONSTANTS.MAX_DESCRIPTION_LENGTH;
pub const AZ_MAX_APPLICATION_DATA_LENGTH = AZ_PROP_CONSTANTS.MAX_APPLICATION_DATA_LENGTH;
pub const AZ_SUBMIT_FLAG_ABORT = AZ_PROP_CONSTANTS.PROP_NAME;
pub const AZ_SUBMIT_FLAG_FLUSH = AZ_PROP_CONSTANTS.PROP_DESCRIPTION;
pub const AZ_MAX_POLICY_URL_LENGTH = AZ_PROP_CONSTANTS.MAX_SCOPE_NAME_LENGTH;
pub const AZ_AZSTORE_FLAG_CREATE = AZ_PROP_CONSTANTS.PROP_NAME;
pub const AZ_AZSTORE_FLAG_MANAGE_STORE_ONLY = AZ_PROP_CONSTANTS.PROP_DESCRIPTION;
pub const AZ_AZSTORE_FLAG_BATCH_UPDATE = AZ_PROP_CONSTANTS.PROP_APPLICATION_DATA;
pub const AZ_AZSTORE_FLAG_AUDIT_IS_CRITICAL = AZ_PROP_CONSTANTS.AZSTORE_FLAG_AUDIT_IS_CRITICAL;
pub const AZ_AZSTORE_FORCE_APPLICATION_CLOSE = AZ_PROP_CONSTANTS.AZSTORE_FORCE_APPLICATION_CLOSE;
pub const AZ_AZSTORE_NT6_FUNCTION_LEVEL = AZ_PROP_CONSTANTS.AZSTORE_NT6_FUNCTION_LEVEL;
pub const AZ_AZSTORE_FLAG_MANAGE_ONLY_PASSIVE_SUBMIT = AZ_PROP_CONSTANTS.AZSTORE_FLAG_MANAGE_ONLY_PASSIVE_SUBMIT;
pub const AZ_PROP_AZSTORE_DOMAIN_TIMEOUT = AZ_PROP_CONSTANTS.PROP_AZSTORE_DOMAIN_TIMEOUT;
pub const AZ_AZSTORE_DEFAULT_DOMAIN_TIMEOUT = AZ_PROP_CONSTANTS.AZSTORE_DEFAULT_DOMAIN_TIMEOUT;
pub const AZ_PROP_AZSTORE_SCRIPT_ENGINE_TIMEOUT = AZ_PROP_CONSTANTS.PROP_AZSTORE_SCRIPT_ENGINE_TIMEOUT;
pub const AZ_AZSTORE_MIN_DOMAIN_TIMEOUT = AZ_PROP_CONSTANTS.AZSTORE_MIN_DOMAIN_TIMEOUT;
pub const AZ_AZSTORE_MIN_SCRIPT_ENGINE_TIMEOUT = AZ_PROP_CONSTANTS.AZSTORE_MIN_SCRIPT_ENGINE_TIMEOUT;
pub const AZ_AZSTORE_DEFAULT_SCRIPT_ENGINE_TIMEOUT = AZ_PROP_CONSTANTS.AZSTORE_DEFAULT_SCRIPT_ENGINE_TIMEOUT;
pub const AZ_PROP_AZSTORE_MAX_SCRIPT_ENGINES = AZ_PROP_CONSTANTS.PROP_AZSTORE_MAX_SCRIPT_ENGINES;
pub const AZ_AZSTORE_DEFAULT_MAX_SCRIPT_ENGINES = AZ_PROP_CONSTANTS.AZSTORE_DEFAULT_MAX_SCRIPT_ENGINES;
pub const AZ_PROP_AZSTORE_MAJOR_VERSION = AZ_PROP_CONSTANTS.PROP_AZSTORE_MAJOR_VERSION;
pub const AZ_PROP_AZSTORE_MINOR_VERSION = AZ_PROP_CONSTANTS.PROP_AZSTORE_MINOR_VERSION;
pub const AZ_PROP_AZSTORE_TARGET_MACHINE = AZ_PROP_CONSTANTS.PROP_AZSTORE_TARGET_MACHINE;
pub const AZ_PROP_AZTORE_IS_ADAM_INSTANCE = AZ_PROP_CONSTANTS.PROP_AZTORE_IS_ADAM_INSTANCE;
pub const AZ_PROP_OPERATION_ID = AZ_PROP_CONSTANTS.PROP_OPERATION_ID;
pub const AZ_PROP_TASK_OPERATIONS = AZ_PROP_CONSTANTS.PROP_TASK_OPERATIONS;
pub const AZ_PROP_TASK_BIZRULE = AZ_PROP_CONSTANTS.PROP_TASK_BIZRULE;
pub const AZ_PROP_TASK_BIZRULE_LANGUAGE = AZ_PROP_CONSTANTS.PROP_TASK_BIZRULE_LANGUAGE;
pub const AZ_PROP_TASK_TASKS = AZ_PROP_CONSTANTS.PROP_TASK_TASKS;
pub const AZ_PROP_TASK_BIZRULE_IMPORTED_PATH = AZ_PROP_CONSTANTS.PROP_TASK_BIZRULE_IMPORTED_PATH;
pub const AZ_PROP_TASK_IS_ROLE_DEFINITION = AZ_PROP_CONSTANTS.PROP_TASK_IS_ROLE_DEFINITION;
pub const AZ_MAX_TASK_BIZRULE_LENGTH = AZ_PROP_CONSTANTS.MAX_SCOPE_NAME_LENGTH;
pub const AZ_MAX_TASK_BIZRULE_LANGUAGE_LENGTH = AZ_PROP_CONSTANTS.MAX_OPERATION_NAME_LENGTH;
pub const AZ_MAX_TASK_BIZRULE_IMPORTED_PATH_LENGTH = AZ_PROP_CONSTANTS.MAX_APPLICATION_NAME_LENGTH;
pub const AZ_MAX_BIZRULE_STRING = AZ_PROP_CONSTANTS.MAX_SCOPE_NAME_LENGTH;
pub const AZ_PROP_GROUP_TYPE = AZ_PROP_CONSTANTS.PROP_GROUP_TYPE;
pub const AZ_GROUPTYPE_LDAP_QUERY = AZ_PROP_CONSTANTS.PROP_NAME;
pub const AZ_GROUPTYPE_BASIC = AZ_PROP_CONSTANTS.PROP_DESCRIPTION;
pub const AZ_GROUPTYPE_BIZRULE = AZ_PROP_CONSTANTS.PROP_WRITABLE;
pub const AZ_PROP_GROUP_APP_MEMBERS = AZ_PROP_CONSTANTS.PROP_GROUP_APP_MEMBERS;
pub const AZ_PROP_GROUP_APP_NON_MEMBERS = AZ_PROP_CONSTANTS.PROP_GROUP_APP_NON_MEMBERS;
pub const AZ_PROP_GROUP_LDAP_QUERY = AZ_PROP_CONSTANTS.PROP_GROUP_LDAP_QUERY;
pub const AZ_MAX_GROUP_LDAP_QUERY_LENGTH = AZ_PROP_CONSTANTS.MAX_APPLICATION_DATA_LENGTH;
pub const AZ_PROP_GROUP_MEMBERS = AZ_PROP_CONSTANTS.PROP_GROUP_MEMBERS;
pub const AZ_PROP_GROUP_NON_MEMBERS = AZ_PROP_CONSTANTS.PROP_GROUP_NON_MEMBERS;
pub const AZ_PROP_GROUP_MEMBERS_NAME = AZ_PROP_CONSTANTS.PROP_GROUP_MEMBERS_NAME;
pub const AZ_PROP_GROUP_NON_MEMBERS_NAME = AZ_PROP_CONSTANTS.PROP_GROUP_NON_MEMBERS_NAME;
pub const AZ_PROP_GROUP_BIZRULE = AZ_PROP_CONSTANTS.PROP_GROUP_BIZRULE;
pub const AZ_PROP_GROUP_BIZRULE_LANGUAGE = AZ_PROP_CONSTANTS.PROP_GROUP_BIZRULE_LANGUAGE;
pub const AZ_PROP_GROUP_BIZRULE_IMPORTED_PATH = AZ_PROP_CONSTANTS.PROP_GROUP_BIZRULE_IMPORTED_PATH;
pub const AZ_MAX_GROUP_BIZRULE_LENGTH = AZ_PROP_CONSTANTS.MAX_SCOPE_NAME_LENGTH;
pub const AZ_MAX_GROUP_BIZRULE_LANGUAGE_LENGTH = AZ_PROP_CONSTANTS.MAX_OPERATION_NAME_LENGTH;
pub const AZ_MAX_GROUP_BIZRULE_IMPORTED_PATH_LENGTH = AZ_PROP_CONSTANTS.MAX_APPLICATION_NAME_LENGTH;
pub const AZ_PROP_ROLE_APP_MEMBERS = AZ_PROP_CONSTANTS.AZSTORE_MIN_DOMAIN_TIMEOUT;
pub const AZ_PROP_ROLE_MEMBERS = AZ_PROP_CONSTANTS.PROP_ROLE_MEMBERS;
pub const AZ_PROP_ROLE_OPERATIONS = AZ_PROP_CONSTANTS.PROP_ROLE_OPERATIONS;
pub const AZ_PROP_ROLE_TASKS = AZ_PROP_CONSTANTS.PROP_ROLE_TASKS;
pub const AZ_PROP_ROLE_MEMBERS_NAME = AZ_PROP_CONSTANTS.PROP_ROLE_MEMBERS_NAME;
pub const AZ_PROP_SCOPE_BIZRULES_WRITABLE = AZ_PROP_CONSTANTS.PROP_SCOPE_BIZRULES_WRITABLE;
pub const AZ_PROP_SCOPE_CAN_BE_DELEGATED = AZ_PROP_CONSTANTS.PROP_SCOPE_CAN_BE_DELEGATED;
pub const AZ_PROP_CLIENT_CONTEXT_USER_DN = AZ_PROP_CONSTANTS.PROP_CLIENT_CONTEXT_USER_DN;
pub const AZ_PROP_CLIENT_CONTEXT_USER_SAM_COMPAT = AZ_PROP_CONSTANTS.PROP_CLIENT_CONTEXT_USER_SAM_COMPAT;
pub const AZ_PROP_CLIENT_CONTEXT_USER_DISPLAY = AZ_PROP_CONSTANTS.PROP_CLIENT_CONTEXT_USER_DISPLAY;
pub const AZ_PROP_CLIENT_CONTEXT_USER_GUID = AZ_PROP_CONSTANTS.PROP_CLIENT_CONTEXT_USER_GUID;
pub const AZ_PROP_CLIENT_CONTEXT_USER_CANONICAL = AZ_PROP_CONSTANTS.PROP_CLIENT_CONTEXT_USER_CANONICAL;
pub const AZ_PROP_CLIENT_CONTEXT_USER_UPN = AZ_PROP_CONSTANTS.PROP_CLIENT_CONTEXT_USER_UPN;
pub const AZ_PROP_CLIENT_CONTEXT_USER_DNS_SAM_COMPAT = AZ_PROP_CONSTANTS.PROP_CLIENT_CONTEXT_USER_DNS_SAM_COMPAT;
pub const AZ_PROP_CLIENT_CONTEXT_ROLE_FOR_ACCESS_CHECK = AZ_PROP_CONSTANTS.PROP_CLIENT_CONTEXT_ROLE_FOR_ACCESS_CHECK;
pub const AZ_PROP_CLIENT_CONTEXT_LDAP_QUERY_DN = AZ_PROP_CONSTANTS.PROP_CLIENT_CONTEXT_LDAP_QUERY_DN;
pub const AZ_PROP_APPLICATION_AUTHZ_INTERFACE_CLSID = AZ_PROP_CONSTANTS.PROP_APPLICATION_AUTHZ_INTERFACE_CLSID;
pub const AZ_PROP_APPLICATION_VERSION = AZ_PROP_CONSTANTS.PROP_APPLICATION_VERSION;
pub const AZ_MAX_APPLICATION_VERSION_LENGTH = AZ_PROP_CONSTANTS.MAX_APPLICATION_NAME_LENGTH;
pub const AZ_PROP_APPLICATION_NAME = AZ_PROP_CONSTANTS.PROP_APPLICATION_NAME;
pub const AZ_PROP_APPLICATION_BIZRULE_ENABLED = AZ_PROP_CONSTANTS.PROP_APPLICATION_BIZRULE_ENABLED;
pub const AZ_PROP_APPLY_STORE_SACL = AZ_PROP_CONSTANTS.PROP_APPLY_STORE_SACL;
pub const AZ_PROP_GENERATE_AUDITS = AZ_PROP_CONSTANTS.PROP_GENERATE_AUDITS;
pub const AZ_PROP_POLICY_ADMINS = AZ_PROP_CONSTANTS.PROP_POLICY_ADMINS;
pub const AZ_PROP_POLICY_READERS = AZ_PROP_CONSTANTS.PROP_POLICY_READERS;
pub const AZ_PROP_DELEGATED_POLICY_USERS = AZ_PROP_CONSTANTS.PROP_DELEGATED_POLICY_USERS;
pub const AZ_PROP_POLICY_ADMINS_NAME = AZ_PROP_CONSTANTS.PROP_POLICY_ADMINS_NAME;
pub const AZ_PROP_POLICY_READERS_NAME = AZ_PROP_CONSTANTS.PROP_POLICY_READERS_NAME;
pub const AZ_PROP_DELEGATED_POLICY_USERS_NAME = AZ_PROP_CONSTANTS.PROP_DELEGATED_POLICY_USERS_NAME;
pub const AZ_CLIENT_CONTEXT_SKIP_GROUP = AZ_PROP_CONSTANTS.PROP_NAME;
pub const AZ_CLIENT_CONTEXT_SKIP_LDAP_QUERY = AZ_PROP_CONSTANTS.PROP_NAME;
pub const AZ_CLIENT_CONTEXT_GET_GROUP_RECURSIVE = AZ_PROP_CONSTANTS.PROP_DESCRIPTION;
pub const AZ_CLIENT_CONTEXT_GET_GROUPS_STORE_LEVEL_ONLY = AZ_PROP_CONSTANTS.PROP_DESCRIPTION;

pub const FN_PROGRESS = *const fn (
    p_object_name: ?PWSTR,
    status: u32,
    p_invoke_setting: ?*PROG_INVOKE_SETTING,
    args: ?*anyopaque,
    security_set: BOOL,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const AUTHZ_ACCESS_CHECK_RESULTS_HANDLE = isize;

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const AUTHZ_CLIENT_CONTEXT_HANDLE = isize;

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const AUTHZ_RESOURCE_MANAGER_HANDLE = isize;

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const AUTHZ_AUDIT_EVENT_HANDLE = *opaque {};

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const AUTHZ_AUDIT_EVENT_TYPE_HANDLE = isize;

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE = isize;

//--------------------------------------------------------------------------------
// Section: Functions (90)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "authz" fn AuthzAccessCheck(
    flags: AUTHZ_ACCESS_CHECK_FLAGS,
    h_authz_client_context: AUTHZ_CLIENT_CONTEXT_HANDLE,
    p_request: ?*AUTHZ_ACCESS_REQUEST,
    h_audit_event: ?AUTHZ_AUDIT_EVENT_HANDLE,
    p_security_descriptor: ?PSECURITY_DESCRIPTOR,
    optional_security_descriptor_array: ?[*]?PSECURITY_DESCRIPTOR,
    optional_security_descriptor_count: u32,
    p_reply: ?*AUTHZ_ACCESS_REPLY,
    ph_access_check_results: ?*isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "authz" fn AuthzCachedAccessCheck(
    flags: u32,
    h_access_check_results: AUTHZ_ACCESS_CHECK_RESULTS_HANDLE,
    p_request: ?*AUTHZ_ACCESS_REQUEST,
    h_audit_event: ?AUTHZ_AUDIT_EVENT_HANDLE,
    p_reply: ?*AUTHZ_ACCESS_REPLY,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "authz" fn AuthzOpenObjectAudit(
    flags: u32,
    h_authz_client_context: AUTHZ_CLIENT_CONTEXT_HANDLE,
    p_request: ?*AUTHZ_ACCESS_REQUEST,
    h_audit_event: ?AUTHZ_AUDIT_EVENT_HANDLE,
    p_security_descriptor: ?PSECURITY_DESCRIPTOR,
    optional_security_descriptor_array: ?[*]?PSECURITY_DESCRIPTOR,
    optional_security_descriptor_count: u32,
    p_reply: ?*AUTHZ_ACCESS_REPLY,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "authz" fn AuthzFreeHandle(
    h_access_check_results: AUTHZ_ACCESS_CHECK_RESULTS_HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "authz" fn AuthzInitializeResourceManager(
    flags: u32,
    pfn_dynamic_access_check: ?PFN_AUTHZ_DYNAMIC_ACCESS_CHECK,
    pfn_compute_dynamic_groups: ?PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS,
    pfn_free_dynamic_groups: ?PFN_AUTHZ_FREE_DYNAMIC_GROUPS,
    sz_resource_manager_name: ?[*:0]const u16,
    ph_authz_resource_manager: ?*AUTHZ_RESOURCE_MANAGER_HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
// This function from dll 'AUTHZ' is being skipped because it has some sort of issue
pub fn AuthzInitializeResourceManagerEx() void {
    @panic("this function is not working");
}

// TODO: this type is limited to platform 'windows8.0'
pub extern "authz" fn AuthzInitializeRemoteResourceManager(
    p_rpc_init_info: ?*AUTHZ_RPC_INIT_INFO_CLIENT,
    ph_authz_resource_manager: ?*AUTHZ_RESOURCE_MANAGER_HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "authz" fn AuthzFreeResourceManager(
    h_authz_resource_manager: AUTHZ_RESOURCE_MANAGER_HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "authz" fn AuthzInitializeContextFromToken(
    flags: u32,
    token_handle: ?HANDLE,
    h_authz_resource_manager: AUTHZ_RESOURCE_MANAGER_HANDLE,
    p_expiration_time: ?*LARGE_INTEGER,
    identifier: LUID,
    dynamic_group_args: ?*anyopaque,
    ph_authz_client_context: ?*isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "authz" fn AuthzInitializeContextFromSid(
    flags: u32,
    user_sid: ?PSID,
    h_authz_resource_manager: AUTHZ_RESOURCE_MANAGER_HANDLE,
    p_expiration_time: ?*LARGE_INTEGER,
    identifier: LUID,
    dynamic_group_args: ?*anyopaque,
    ph_authz_client_context: ?*isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "authz" fn AuthzInitializeContextFromAuthzContext(
    flags: u32,
    h_authz_client_context: AUTHZ_CLIENT_CONTEXT_HANDLE,
    p_expiration_time: ?*LARGE_INTEGER,
    identifier: LUID,
    dynamic_group_args: ?*anyopaque,
    ph_new_authz_client_context: ?*isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "authz" fn AuthzInitializeCompoundContext(
    user_context: AUTHZ_CLIENT_CONTEXT_HANDLE,
    device_context: AUTHZ_CLIENT_CONTEXT_HANDLE,
    ph_compound_context: ?*isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "authz" fn AuthzAddSidsToContext(
    h_authz_client_context: AUTHZ_CLIENT_CONTEXT_HANDLE,
    sids: ?*SID_AND_ATTRIBUTES,
    sid_count: u32,
    restricted_sids: ?*SID_AND_ATTRIBUTES,
    restricted_sid_count: u32,
    ph_new_authz_client_context: ?*isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "authz" fn AuthzModifySecurityAttributes(
    h_authz_client_context: AUTHZ_CLIENT_CONTEXT_HANDLE,
    p_operations: ?*AUTHZ_SECURITY_ATTRIBUTE_OPERATION,
    p_attributes: ?*AUTHZ_SECURITY_ATTRIBUTES_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "authz" fn AuthzModifyClaims(
    h_authz_client_context: AUTHZ_CLIENT_CONTEXT_HANDLE,
    claim_class: AUTHZ_CONTEXT_INFORMATION_CLASS,
    p_claim_operations: ?*AUTHZ_SECURITY_ATTRIBUTE_OPERATION,
    p_claims: ?*AUTHZ_SECURITY_ATTRIBUTES_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "authz" fn AuthzModifySids(
    h_authz_client_context: AUTHZ_CLIENT_CONTEXT_HANDLE,
    sid_class: AUTHZ_CONTEXT_INFORMATION_CLASS,
    p_sid_operations: ?*AUTHZ_SID_OPERATION,
    p_sids: ?*TOKEN_GROUPS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "authz" fn AuthzSetAppContainerInformation(
    h_authz_client_context: AUTHZ_CLIENT_CONTEXT_HANDLE,
    p_app_container_sid: ?PSID,
    capability_count: u32,
    p_capability_sids: ?[*]SID_AND_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "authz" fn AuthzGetInformationFromContext(
    h_authz_client_context: AUTHZ_CLIENT_CONTEXT_HANDLE,
    info_class: AUTHZ_CONTEXT_INFORMATION_CLASS,
    buffer_size: u32,
    p_size_required: ?*u32,
    buffer: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "authz" fn AuthzFreeContext(
    h_authz_client_context: AUTHZ_CLIENT_CONTEXT_HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "authz" fn AuthzInitializeObjectAccessAuditEvent(
    flags: AUTHZ_INITIALIZE_OBJECT_ACCESS_AUDIT_EVENT_FLAGS,
    h_audit_event_type: AUTHZ_AUDIT_EVENT_TYPE_HANDLE,
    sz_operation_type: ?PWSTR,
    sz_object_type: ?PWSTR,
    sz_object_name: ?PWSTR,
    sz_additional_info: ?PWSTR,
    ph_audit_event: ?*isize,
    dw_additional_parameter_count: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "authz" fn AuthzInitializeObjectAccessAuditEvent2(
    flags: u32,
    h_audit_event_type: AUTHZ_AUDIT_EVENT_TYPE_HANDLE,
    sz_operation_type: ?PWSTR,
    sz_object_type: ?PWSTR,
    sz_object_name: ?PWSTR,
    sz_additional_info: ?PWSTR,
    sz_additional_info2: ?PWSTR,
    ph_audit_event: ?*isize,
    dw_additional_parameter_count: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "authz" fn AuthzFreeAuditEvent(
    h_audit_event: ?AUTHZ_AUDIT_EVENT_HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "authz" fn AuthzEvaluateSacl(
    authz_client_context: AUTHZ_CLIENT_CONTEXT_HANDLE,
    p_request: ?*AUTHZ_ACCESS_REQUEST,
    sacl: ?*ACL,
    granted_access: u32,
    access_granted: BOOL,
    pb_generate_audit: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "authz" fn AuthzInstallSecurityEventSource(
    dw_flags: u32,
    p_registration: ?*AUTHZ_SOURCE_SCHEMA_REGISTRATION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "authz" fn AuthzUninstallSecurityEventSource(
    dw_flags: u32,
    sz_event_source_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "authz" fn AuthzEnumerateSecurityEventSources(
    dw_flags: u32,
    buffer: ?*AUTHZ_SOURCE_SCHEMA_REGISTRATION,
    pdw_count: ?*u32,
    pdw_length: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "authz" fn AuthzRegisterSecurityEventSource(
    dw_flags: u32,
    sz_event_source_name: ?[*:0]const u16,
    ph_event_provider: ?*isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "authz" fn AuthzUnregisterSecurityEventSource(
    dw_flags: u32,
    ph_event_provider: ?*isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "authz" fn AuthzReportSecurityEvent(
    dw_flags: u32,
    h_event_provider: AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE,
    dw_audit_id: u32,
    p_user_sid: ?PSID,
    dw_count: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "authz" fn AuthzReportSecurityEventFromParams(
    dw_flags: u32,
    h_event_provider: AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE,
    dw_audit_id: u32,
    p_user_sid: ?PSID,
    p_params: ?*AUDIT_PARAMS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "authz" fn AuthzRegisterCapChangeNotification(
    ph_cap_change_subscription: ?*?*AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__,
    pfn_cap_change_callback: ?LPTHREAD_START_ROUTINE,
    p_callback_context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "authz" fn AuthzUnregisterCapChangeNotification(
    h_cap_change_subscription: ?*AUTHZ_CAP_CHANGE_SUBSCRIPTION_HANDLE__,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "authz" fn AuthzFreeCentralAccessPolicyCache() callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn SetEntriesInAclA(
    c_count_of_explicit_entries: u32,
    p_list_of_explicit_entries: ?[*]EXPLICIT_ACCESS_A,
    old_acl: ?*ACL,
    new_acl: ?*?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn SetEntriesInAclW(
    c_count_of_explicit_entries: u32,
    p_list_of_explicit_entries: ?[*]EXPLICIT_ACCESS_W,
    old_acl: ?*ACL,
    new_acl: ?*?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn GetExplicitEntriesFromAclA(
    pacl: ?*ACL,
    pc_count_of_explicit_entries: ?*u32,
    p_list_of_explicit_entries: ?*?*EXPLICIT_ACCESS_A,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn GetExplicitEntriesFromAclW(
    pacl: ?*ACL,
    pc_count_of_explicit_entries: ?*u32,
    p_list_of_explicit_entries: ?*?*EXPLICIT_ACCESS_W,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn GetEffectiveRightsFromAclA(
    pacl: ?*ACL,
    p_trustee: ?*TRUSTEE_A,
    p_access_rights: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn GetEffectiveRightsFromAclW(
    pacl: ?*ACL,
    p_trustee: ?*TRUSTEE_W,
    p_access_rights: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn GetAuditedPermissionsFromAclA(
    pacl: ?*ACL,
    p_trustee: ?*TRUSTEE_A,
    p_successful_audited_rights: ?*u32,
    p_failed_audit_rights: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn GetAuditedPermissionsFromAclW(
    pacl: ?*ACL,
    p_trustee: ?*TRUSTEE_W,
    p_successful_audited_rights: ?*u32,
    p_failed_audit_rights: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn GetNamedSecurityInfoA(
    p_object_name: ?[*:0]const u8,
    object_type: SE_OBJECT_TYPE,
    security_info: OBJECT_SECURITY_INFORMATION,
    ppsid_owner: ?*?PSID,
    ppsid_group: ?*?PSID,
    pp_dacl: ?*?*ACL,
    pp_sacl: ?*?*ACL,
    pp_security_descriptor: ?*?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn GetNamedSecurityInfoW(
    p_object_name: ?[*:0]const u16,
    object_type: SE_OBJECT_TYPE,
    security_info: OBJECT_SECURITY_INFORMATION,
    ppsid_owner: ?*?PSID,
    ppsid_group: ?*?PSID,
    pp_dacl: ?*?*ACL,
    pp_sacl: ?*?*ACL,
    pp_security_descriptor: ?*?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn GetSecurityInfo(
    handle: ?HANDLE,
    object_type: SE_OBJECT_TYPE,
    security_info: u32,
    ppsid_owner: ?*?PSID,
    ppsid_group: ?*?PSID,
    pp_dacl: ?*?*ACL,
    pp_sacl: ?*?*ACL,
    pp_security_descriptor: ?*?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn SetNamedSecurityInfoA(
    p_object_name: ?PSTR,
    object_type: SE_OBJECT_TYPE,
    security_info: OBJECT_SECURITY_INFORMATION,
    psid_owner: ?PSID,
    psid_group: ?PSID,
    p_dacl: ?*ACL,
    p_sacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn SetNamedSecurityInfoW(
    p_object_name: ?PWSTR,
    object_type: SE_OBJECT_TYPE,
    security_info: OBJECT_SECURITY_INFORMATION,
    psid_owner: ?PSID,
    psid_group: ?PSID,
    p_dacl: ?*ACL,
    p_sacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn SetSecurityInfo(
    handle: ?HANDLE,
    object_type: SE_OBJECT_TYPE,
    security_info: u32,
    psid_owner: ?PSID,
    psid_group: ?PSID,
    p_dacl: ?*ACL,
    p_sacl: ?*ACL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn GetInheritanceSourceA(
    p_object_name: ?PSTR,
    object_type: SE_OBJECT_TYPE,
    security_info: u32,
    container: BOOL,
    p_object_class_guids: ?[*]?*Guid,
    guid_count: u32,
    p_acl: ?*ACL,
    pfn_array: ?*FN_OBJECT_MGR_FUNCTIONS,
    p_generic_mapping: ?*GENERIC_MAPPING,
    p_inherit_array: ?*INHERITED_FROMA,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn GetInheritanceSourceW(
    p_object_name: ?PWSTR,
    object_type: SE_OBJECT_TYPE,
    security_info: u32,
    container: BOOL,
    p_object_class_guids: ?[*]?*Guid,
    guid_count: u32,
    p_acl: ?*ACL,
    pfn_array: ?*FN_OBJECT_MGR_FUNCTIONS,
    p_generic_mapping: ?*GENERIC_MAPPING,
    p_inherit_array: ?*INHERITED_FROMW,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn FreeInheritedFromArray(
    p_inherit_array: [*]INHERITED_FROMW,
    ace_cnt: u16,
    pfn_array: ?*FN_OBJECT_MGR_FUNCTIONS,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn TreeResetNamedSecurityInfoA(
    p_object_name: ?PSTR,
    object_type: SE_OBJECT_TYPE,
    security_info: u32,
    p_owner: ?PSID,
    p_group: ?PSID,
    p_dacl: ?*ACL,
    p_sacl: ?*ACL,
    keep_explicit: BOOL,
    fn_progress: ?FN_PROGRESS,
    progress_invoke_setting: PROG_INVOKE_SETTING,
    args: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn TreeResetNamedSecurityInfoW(
    p_object_name: ?PWSTR,
    object_type: SE_OBJECT_TYPE,
    security_info: u32,
    p_owner: ?PSID,
    p_group: ?PSID,
    p_dacl: ?*ACL,
    p_sacl: ?*ACL,
    keep_explicit: BOOL,
    fn_progress: ?FN_PROGRESS,
    progress_invoke_setting: PROG_INVOKE_SETTING,
    args: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn TreeSetNamedSecurityInfoA(
    p_object_name: ?PSTR,
    object_type: SE_OBJECT_TYPE,
    security_info: u32,
    p_owner: ?PSID,
    p_group: ?PSID,
    p_dacl: ?*ACL,
    p_sacl: ?*ACL,
    dw_action: TREE_SEC_INFO,
    fn_progress: ?FN_PROGRESS,
    progress_invoke_setting: PROG_INVOKE_SETTING,
    args: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "advapi32" fn TreeSetNamedSecurityInfoW(
    p_object_name: ?PWSTR,
    object_type: SE_OBJECT_TYPE,
    security_info: u32,
    p_owner: ?PSID,
    p_group: ?PSID,
    p_dacl: ?*ACL,
    p_sacl: ?*ACL,
    dw_action: TREE_SEC_INFO,
    fn_progress: ?FN_PROGRESS,
    progress_invoke_setting: PROG_INVOKE_SETTING,
    args: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn BuildSecurityDescriptorA(
    p_owner: ?*TRUSTEE_A,
    p_group: ?*TRUSTEE_A,
    c_count_of_access_entries: u32,
    p_list_of_access_entries: ?[*]EXPLICIT_ACCESS_A,
    c_count_of_audit_entries: u32,
    p_list_of_audit_entries: ?[*]EXPLICIT_ACCESS_A,
    p_old_s_d: ?PSECURITY_DESCRIPTOR,
    p_size_new_s_d: ?*u32,
    p_new_s_d: ?*?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn BuildSecurityDescriptorW(
    p_owner: ?*TRUSTEE_W,
    p_group: ?*TRUSTEE_W,
    c_count_of_access_entries: u32,
    p_list_of_access_entries: ?[*]EXPLICIT_ACCESS_W,
    c_count_of_audit_entries: u32,
    p_list_of_audit_entries: ?[*]EXPLICIT_ACCESS_W,
    p_old_s_d: ?PSECURITY_DESCRIPTOR,
    p_size_new_s_d: ?*u32,
    p_new_s_d: ?*?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn LookupSecurityDescriptorPartsA(
    pp_owner: ?*?*TRUSTEE_A,
    pp_group: ?*?*TRUSTEE_A,
    pc_count_of_access_entries: ?*u32,
    pp_list_of_access_entries: ?*?*EXPLICIT_ACCESS_A,
    pc_count_of_audit_entries: ?*u32,
    pp_list_of_audit_entries: ?*?*EXPLICIT_ACCESS_A,
    p_s_d: ?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn LookupSecurityDescriptorPartsW(
    pp_owner: ?*?*TRUSTEE_W,
    pp_group: ?*?*TRUSTEE_W,
    pc_count_of_access_entries: ?*u32,
    pp_list_of_access_entries: ?*?*EXPLICIT_ACCESS_W,
    pc_count_of_audit_entries: ?*u32,
    pp_list_of_audit_entries: ?*?*EXPLICIT_ACCESS_W,
    p_s_d: ?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn BuildExplicitAccessWithNameA(
    p_explicit_access: ?*EXPLICIT_ACCESS_A,
    p_trustee_name: ?PSTR,
    access_permissions: u32,
    access_mode: ACCESS_MODE,
    inheritance: ACE_FLAGS,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn BuildExplicitAccessWithNameW(
    p_explicit_access: ?*EXPLICIT_ACCESS_W,
    p_trustee_name: ?PWSTR,
    access_permissions: u32,
    access_mode: ACCESS_MODE,
    inheritance: ACE_FLAGS,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "advapi32" fn BuildImpersonateExplicitAccessWithNameA(
    p_explicit_access: ?*EXPLICIT_ACCESS_A,
    p_trustee_name: ?PSTR,
    p_trustee: ?*TRUSTEE_A,
    access_permissions: u32,
    access_mode: ACCESS_MODE,
    inheritance: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "advapi32" fn BuildImpersonateExplicitAccessWithNameW(
    p_explicit_access: ?*EXPLICIT_ACCESS_W,
    p_trustee_name: ?PWSTR,
    p_trustee: ?*TRUSTEE_W,
    access_permissions: u32,
    access_mode: ACCESS_MODE,
    inheritance: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn BuildTrusteeWithNameA(
    p_trustee: ?*TRUSTEE_A,
    p_name: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn BuildTrusteeWithNameW(
    p_trustee: ?*TRUSTEE_W,
    p_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "advapi32" fn BuildImpersonateTrusteeA(
    p_trustee: ?*TRUSTEE_A,
    p_impersonate_trustee: ?*TRUSTEE_A,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "advapi32" fn BuildImpersonateTrusteeW(
    p_trustee: ?*TRUSTEE_W,
    p_impersonate_trustee: ?*TRUSTEE_W,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn BuildTrusteeWithSidA(
    p_trustee: ?*TRUSTEE_A,
    p_sid: ?PSID,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn BuildTrusteeWithSidW(
    p_trustee: ?*TRUSTEE_W,
    p_sid: ?PSID,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn BuildTrusteeWithObjectsAndSidA(
    p_trustee: ?*TRUSTEE_A,
    p_obj_sid: ?*OBJECTS_AND_SID,
    p_object_guid: ?*Guid,
    p_inherited_object_guid: ?*Guid,
    p_sid: ?PSID,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn BuildTrusteeWithObjectsAndSidW(
    p_trustee: ?*TRUSTEE_W,
    p_obj_sid: ?*OBJECTS_AND_SID,
    p_object_guid: ?*Guid,
    p_inherited_object_guid: ?*Guid,
    p_sid: ?PSID,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
// This function from dll 'ADVAPI32' is being skipped because it has some sort of issue
pub fn BuildTrusteeWithObjectsAndNameA() void {
    @panic("this function is not working");
}

// TODO: this type is limited to platform 'windows5.1.2600'
// This function from dll 'ADVAPI32' is being skipped because it has some sort of issue
pub fn BuildTrusteeWithObjectsAndNameW() void {
    @panic("this function is not working");
}

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn GetTrusteeNameA(
    p_trustee: ?*TRUSTEE_A,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn GetTrusteeNameW(
    p_trustee: ?*TRUSTEE_W,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn GetTrusteeTypeA(
    p_trustee: ?*TRUSTEE_A,
) callconv(@import("std").os.windows.WINAPI) TRUSTEE_TYPE;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn GetTrusteeTypeW(
    p_trustee: ?*TRUSTEE_W,
) callconv(@import("std").os.windows.WINAPI) TRUSTEE_TYPE;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn GetTrusteeFormA(
    p_trustee: ?*TRUSTEE_A,
) callconv(@import("std").os.windows.WINAPI) TRUSTEE_FORM;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn GetTrusteeFormW(
    p_trustee: ?*TRUSTEE_W,
) callconv(@import("std").os.windows.WINAPI) TRUSTEE_FORM;

pub extern "advapi32" fn GetMultipleTrusteeOperationA(
    p_trustee: ?*TRUSTEE_A,
) callconv(@import("std").os.windows.WINAPI) MULTIPLE_TRUSTEE_OPERATION;

pub extern "advapi32" fn GetMultipleTrusteeOperationW(
    p_trustee: ?*TRUSTEE_W,
) callconv(@import("std").os.windows.WINAPI) MULTIPLE_TRUSTEE_OPERATION;

pub extern "advapi32" fn GetMultipleTrusteeA(
    p_trustee: ?*TRUSTEE_A,
) callconv(@import("std").os.windows.WINAPI) ?*TRUSTEE_A;

pub extern "advapi32" fn GetMultipleTrusteeW(
    p_trustee: ?*TRUSTEE_W,
) callconv(@import("std").os.windows.WINAPI) ?*TRUSTEE_W;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn ConvertSidToStringSidA(
    sid: ?PSID,
    string_sid: ?*?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn ConvertSidToStringSidW(
    sid: ?PSID,
    string_sid: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn ConvertStringSidToSidA(
    string_sid: ?[*:0]const u8,
    sid: ?*?PSID,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn ConvertStringSidToSidW(
    string_sid: ?[*:0]const u16,
    sid: ?*?PSID,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn ConvertStringSecurityDescriptorToSecurityDescriptorA(
    string_security_descriptor: ?[*:0]const u8,
    string_s_d_revision: u32,
    security_descriptor: ?*?PSECURITY_DESCRIPTOR,
    security_descriptor_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn ConvertStringSecurityDescriptorToSecurityDescriptorW(
    string_security_descriptor: ?[*:0]const u16,
    string_s_d_revision: u32,
    security_descriptor: ?*?PSECURITY_DESCRIPTOR,
    security_descriptor_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn ConvertSecurityDescriptorToStringSecurityDescriptorA(
    security_descriptor: ?PSECURITY_DESCRIPTOR,
    requested_string_s_d_revision: u32,
    security_information: u32,
    string_security_descriptor: ?*?PSTR,
    string_security_descriptor_len: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "advapi32" fn ConvertSecurityDescriptorToStringSecurityDescriptorW(
    security_descriptor: ?PSECURITY_DESCRIPTOR,
    requested_string_s_d_revision: u32,
    security_information: u32,
    string_security_descriptor: ?*?PWSTR,
    string_security_descriptor_len: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (38)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const OBJECTS_AND_NAME_ = thismodule.OBJECTS_AND_NAME_A;
        pub const TRUSTEE_ = thismodule.TRUSTEE_A;
        pub const EXPLICIT_ACCESS_ = thismodule.EXPLICIT_ACCESS_A;
        pub const ACTRL_ACCESS_ENTRY = thismodule.ACTRL_ACCESS_ENTRYA;
        pub const ACTRL_ACCESS_ENTRY_LIST = thismodule.ACTRL_ACCESS_ENTRY_LISTA;
        pub const ACTRL_PROPERTY_ENTRY = thismodule.ACTRL_PROPERTY_ENTRYA;
        pub const ACTRL_ACCESS = thismodule.ACTRL_ACCESSA;
        pub const TRUSTEE_ACCESS = thismodule.TRUSTEE_ACCESSA;
        pub const ACTRL_ACCESS_INFO = thismodule.ACTRL_ACCESS_INFOA;
        pub const ACTRL_CONTROL_INFO = thismodule.ACTRL_CONTROL_INFOA;
        pub const INHERITED_FROM = thismodule.INHERITED_FROMA;
        pub const SetEntriesInAcl = thismodule.SetEntriesInAclA;
        pub const GetExplicitEntriesFromAcl = thismodule.GetExplicitEntriesFromAclA;
        pub const GetEffectiveRightsFromAcl = thismodule.GetEffectiveRightsFromAclA;
        pub const GetAuditedPermissionsFromAcl = thismodule.GetAuditedPermissionsFromAclA;
        pub const GetNamedSecurityInfo = thismodule.GetNamedSecurityInfoA;
        pub const SetNamedSecurityInfo = thismodule.SetNamedSecurityInfoA;
        pub const GetInheritanceSource = thismodule.GetInheritanceSourceA;
        pub const TreeResetNamedSecurityInfo = thismodule.TreeResetNamedSecurityInfoA;
        pub const TreeSetNamedSecurityInfo = thismodule.TreeSetNamedSecurityInfoA;
        pub const BuildSecurityDescriptor = thismodule.BuildSecurityDescriptorA;
        pub const LookupSecurityDescriptorParts = thismodule.LookupSecurityDescriptorPartsA;
        pub const BuildExplicitAccessWithName = thismodule.BuildExplicitAccessWithNameA;
        pub const BuildImpersonateExplicitAccessWithName = thismodule.BuildImpersonateExplicitAccessWithNameA;
        pub const BuildTrusteeWithName = thismodule.BuildTrusteeWithNameA;
        pub const BuildImpersonateTrustee = thismodule.BuildImpersonateTrusteeA;
        pub const BuildTrusteeWithSid = thismodule.BuildTrusteeWithSidA;
        pub const BuildTrusteeWithObjectsAndSid = thismodule.BuildTrusteeWithObjectsAndSidA;
        pub const BuildTrusteeWithObjectsAndName = thismodule.BuildTrusteeWithObjectsAndNameA;
        pub const GetTrusteeName = thismodule.GetTrusteeNameA;
        pub const GetTrusteeType = thismodule.GetTrusteeTypeA;
        pub const GetTrusteeForm = thismodule.GetTrusteeFormA;
        pub const GetMultipleTrusteeOperation = thismodule.GetMultipleTrusteeOperationA;
        pub const GetMultipleTrustee = thismodule.GetMultipleTrusteeA;
        pub const ConvertSidToStringSid = thismodule.ConvertSidToStringSidA;
        pub const ConvertStringSidToSid = thismodule.ConvertStringSidToSidA;
        pub const ConvertStringSecurityDescriptorToSecurityDescriptor = thismodule.ConvertStringSecurityDescriptorToSecurityDescriptorA;
        pub const ConvertSecurityDescriptorToStringSecurityDescriptor = thismodule.ConvertSecurityDescriptorToStringSecurityDescriptorA;
    },
    .wide => struct {
        pub const OBJECTS_AND_NAME_ = thismodule.OBJECTS_AND_NAME_W;
        pub const TRUSTEE_ = thismodule.TRUSTEE_W;
        pub const EXPLICIT_ACCESS_ = thismodule.EXPLICIT_ACCESS_W;
        pub const ACTRL_ACCESS_ENTRY = thismodule.ACTRL_ACCESS_ENTRYW;
        pub const ACTRL_ACCESS_ENTRY_LIST = thismodule.ACTRL_ACCESS_ENTRY_LISTW;
        pub const ACTRL_PROPERTY_ENTRY = thismodule.ACTRL_PROPERTY_ENTRYW;
        pub const ACTRL_ACCESS = thismodule.ACTRL_ACCESSW;
        pub const TRUSTEE_ACCESS = thismodule.TRUSTEE_ACCESSW;
        pub const ACTRL_ACCESS_INFO = thismodule.ACTRL_ACCESS_INFOW;
        pub const ACTRL_CONTROL_INFO = thismodule.ACTRL_CONTROL_INFOW;
        pub const INHERITED_FROM = thismodule.INHERITED_FROMW;
        pub const SetEntriesInAcl = thismodule.SetEntriesInAclW;
        pub const GetExplicitEntriesFromAcl = thismodule.GetExplicitEntriesFromAclW;
        pub const GetEffectiveRightsFromAcl = thismodule.GetEffectiveRightsFromAclW;
        pub const GetAuditedPermissionsFromAcl = thismodule.GetAuditedPermissionsFromAclW;
        pub const GetNamedSecurityInfo = thismodule.GetNamedSecurityInfoW;
        pub const SetNamedSecurityInfo = thismodule.SetNamedSecurityInfoW;
        pub const GetInheritanceSource = thismodule.GetInheritanceSourceW;
        pub const TreeResetNamedSecurityInfo = thismodule.TreeResetNamedSecurityInfoW;
        pub const TreeSetNamedSecurityInfo = thismodule.TreeSetNamedSecurityInfoW;
        pub const BuildSecurityDescriptor = thismodule.BuildSecurityDescriptorW;
        pub const LookupSecurityDescriptorParts = thismodule.LookupSecurityDescriptorPartsW;
        pub const BuildExplicitAccessWithName = thismodule.BuildExplicitAccessWithNameW;
        pub const BuildImpersonateExplicitAccessWithName = thismodule.BuildImpersonateExplicitAccessWithNameW;
        pub const BuildTrusteeWithName = thismodule.BuildTrusteeWithNameW;
        pub const BuildImpersonateTrustee = thismodule.BuildImpersonateTrusteeW;
        pub const BuildTrusteeWithSid = thismodule.BuildTrusteeWithSidW;
        pub const BuildTrusteeWithObjectsAndSid = thismodule.BuildTrusteeWithObjectsAndSidW;
        pub const BuildTrusteeWithObjectsAndName = thismodule.BuildTrusteeWithObjectsAndNameW;
        pub const GetTrusteeName = thismodule.GetTrusteeNameW;
        pub const GetTrusteeType = thismodule.GetTrusteeTypeW;
        pub const GetTrusteeForm = thismodule.GetTrusteeFormW;
        pub const GetMultipleTrusteeOperation = thismodule.GetMultipleTrusteeOperationW;
        pub const GetMultipleTrustee = thismodule.GetMultipleTrusteeW;
        pub const ConvertSidToStringSid = thismodule.ConvertSidToStringSidW;
        pub const ConvertStringSidToSid = thismodule.ConvertStringSidToSidW;
        pub const ConvertStringSecurityDescriptorToSecurityDescriptor = thismodule.ConvertStringSecurityDescriptorToSecurityDescriptorW;
        pub const ConvertSecurityDescriptorToStringSecurityDescriptor = thismodule.ConvertSecurityDescriptorToStringSecurityDescriptorW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const OBJECTS_AND_NAME_ = *opaque {};
        pub const TRUSTEE_ = *opaque {};
        pub const EXPLICIT_ACCESS_ = *opaque {};
        pub const ACTRL_ACCESS_ENTRY = *opaque {};
        pub const ACTRL_ACCESS_ENTRY_LIST = *opaque {};
        pub const ACTRL_PROPERTY_ENTRY = *opaque {};
        pub const ACTRL_ACCESS = *opaque {};
        pub const TRUSTEE_ACCESS = *opaque {};
        pub const ACTRL_ACCESS_INFO = *opaque {};
        pub const ACTRL_CONTROL_INFO = *opaque {};
        pub const INHERITED_FROM = *opaque {};
        pub const SetEntriesInAcl = *opaque {};
        pub const GetExplicitEntriesFromAcl = *opaque {};
        pub const GetEffectiveRightsFromAcl = *opaque {};
        pub const GetAuditedPermissionsFromAcl = *opaque {};
        pub const GetNamedSecurityInfo = *opaque {};
        pub const SetNamedSecurityInfo = *opaque {};
        pub const GetInheritanceSource = *opaque {};
        pub const TreeResetNamedSecurityInfo = *opaque {};
        pub const TreeSetNamedSecurityInfo = *opaque {};
        pub const BuildSecurityDescriptor = *opaque {};
        pub const LookupSecurityDescriptorParts = *opaque {};
        pub const BuildExplicitAccessWithName = *opaque {};
        pub const BuildImpersonateExplicitAccessWithName = *opaque {};
        pub const BuildTrusteeWithName = *opaque {};
        pub const BuildImpersonateTrustee = *opaque {};
        pub const BuildTrusteeWithSid = *opaque {};
        pub const BuildTrusteeWithObjectsAndSid = *opaque {};
        pub const BuildTrusteeWithObjectsAndName = *opaque {};
        pub const GetTrusteeName = *opaque {};
        pub const GetTrusteeType = *opaque {};
        pub const GetTrusteeForm = *opaque {};
        pub const GetMultipleTrusteeOperation = *opaque {};
        pub const GetMultipleTrustee = *opaque {};
        pub const ConvertSidToStringSid = *opaque {};
        pub const ConvertStringSidToSid = *opaque {};
        pub const ConvertStringSecurityDescriptorToSecurityDescriptor = *opaque {};
        pub const ConvertSecurityDescriptorToStringSecurityDescriptor = *opaque {};
    } else struct {
        pub const OBJECTS_AND_NAME_ = @compileError("'OBJECTS_AND_NAME_' requires that UNICODE be set to true or false in the root module");
        pub const TRUSTEE_ = @compileError("'TRUSTEE_' requires that UNICODE be set to true or false in the root module");
        pub const EXPLICIT_ACCESS_ = @compileError("'EXPLICIT_ACCESS_' requires that UNICODE be set to true or false in the root module");
        pub const ACTRL_ACCESS_ENTRY = @compileError("'ACTRL_ACCESS_ENTRY' requires that UNICODE be set to true or false in the root module");
        pub const ACTRL_ACCESS_ENTRY_LIST = @compileError("'ACTRL_ACCESS_ENTRY_LIST' requires that UNICODE be set to true or false in the root module");
        pub const ACTRL_PROPERTY_ENTRY = @compileError("'ACTRL_PROPERTY_ENTRY' requires that UNICODE be set to true or false in the root module");
        pub const ACTRL_ACCESS = @compileError("'ACTRL_ACCESS' requires that UNICODE be set to true or false in the root module");
        pub const TRUSTEE_ACCESS = @compileError("'TRUSTEE_ACCESS' requires that UNICODE be set to true or false in the root module");
        pub const ACTRL_ACCESS_INFO = @compileError("'ACTRL_ACCESS_INFO' requires that UNICODE be set to true or false in the root module");
        pub const ACTRL_CONTROL_INFO = @compileError("'ACTRL_CONTROL_INFO' requires that UNICODE be set to true or false in the root module");
        pub const INHERITED_FROM = @compileError("'INHERITED_FROM' requires that UNICODE be set to true or false in the root module");
        pub const SetEntriesInAcl = @compileError("'SetEntriesInAcl' requires that UNICODE be set to true or false in the root module");
        pub const GetExplicitEntriesFromAcl = @compileError("'GetExplicitEntriesFromAcl' requires that UNICODE be set to true or false in the root module");
        pub const GetEffectiveRightsFromAcl = @compileError("'GetEffectiveRightsFromAcl' requires that UNICODE be set to true or false in the root module");
        pub const GetAuditedPermissionsFromAcl = @compileError("'GetAuditedPermissionsFromAcl' requires that UNICODE be set to true or false in the root module");
        pub const GetNamedSecurityInfo = @compileError("'GetNamedSecurityInfo' requires that UNICODE be set to true or false in the root module");
        pub const SetNamedSecurityInfo = @compileError("'SetNamedSecurityInfo' requires that UNICODE be set to true or false in the root module");
        pub const GetInheritanceSource = @compileError("'GetInheritanceSource' requires that UNICODE be set to true or false in the root module");
        pub const TreeResetNamedSecurityInfo = @compileError("'TreeResetNamedSecurityInfo' requires that UNICODE be set to true or false in the root module");
        pub const TreeSetNamedSecurityInfo = @compileError("'TreeSetNamedSecurityInfo' requires that UNICODE be set to true or false in the root module");
        pub const BuildSecurityDescriptor = @compileError("'BuildSecurityDescriptor' requires that UNICODE be set to true or false in the root module");
        pub const LookupSecurityDescriptorParts = @compileError("'LookupSecurityDescriptorParts' requires that UNICODE be set to true or false in the root module");
        pub const BuildExplicitAccessWithName = @compileError("'BuildExplicitAccessWithName' requires that UNICODE be set to true or false in the root module");
        pub const BuildImpersonateExplicitAccessWithName = @compileError("'BuildImpersonateExplicitAccessWithName' requires that UNICODE be set to true or false in the root module");
        pub const BuildTrusteeWithName = @compileError("'BuildTrusteeWithName' requires that UNICODE be set to true or false in the root module");
        pub const BuildImpersonateTrustee = @compileError("'BuildImpersonateTrustee' requires that UNICODE be set to true or false in the root module");
        pub const BuildTrusteeWithSid = @compileError("'BuildTrusteeWithSid' requires that UNICODE be set to true or false in the root module");
        pub const BuildTrusteeWithObjectsAndSid = @compileError("'BuildTrusteeWithObjectsAndSid' requires that UNICODE be set to true or false in the root module");
        pub const BuildTrusteeWithObjectsAndName = @compileError("'BuildTrusteeWithObjectsAndName' requires that UNICODE be set to true or false in the root module");
        pub const GetTrusteeName = @compileError("'GetTrusteeName' requires that UNICODE be set to true or false in the root module");
        pub const GetTrusteeType = @compileError("'GetTrusteeType' requires that UNICODE be set to true or false in the root module");
        pub const GetTrusteeForm = @compileError("'GetTrusteeForm' requires that UNICODE be set to true or false in the root module");
        pub const GetMultipleTrusteeOperation = @compileError("'GetMultipleTrusteeOperation' requires that UNICODE be set to true or false in the root module");
        pub const GetMultipleTrustee = @compileError("'GetMultipleTrustee' requires that UNICODE be set to true or false in the root module");
        pub const ConvertSidToStringSid = @compileError("'ConvertSidToStringSid' requires that UNICODE be set to true or false in the root module");
        pub const ConvertStringSidToSid = @compileError("'ConvertStringSidToSid' requires that UNICODE be set to true or false in the root module");
        pub const ConvertStringSecurityDescriptorToSecurityDescriptor = @compileError("'ConvertStringSecurityDescriptorToSecurityDescriptor' requires that UNICODE be set to true or false in the root module");
        pub const ConvertSecurityDescriptorToStringSecurityDescriptor = @compileError("'ConvertSecurityDescriptorToStringSecurityDescriptor' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (26)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const ACE_FLAGS = @import("../security.zig").ACE_FLAGS;
const ACE_HEADER = @import("../security.zig").ACE_HEADER;
const ACL = @import("../security.zig").ACL;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const GENERIC_MAPPING = @import("../security.zig").GENERIC_MAPPING;
const HANDLE = @import("../foundation.zig").HANDLE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IDispatch = @import("../system/com.zig").IDispatch;
const IUnknown = @import("../system/com.zig").IUnknown;
const LARGE_INTEGER = @import("../foundation.zig").LARGE_INTEGER;
const LPTHREAD_START_ROUTINE = @import("../system/threading.zig").LPTHREAD_START_ROUTINE;
const LUID = @import("../foundation.zig").LUID;
const OBJECT_SECURITY_INFORMATION = @import("../security.zig").OBJECT_SECURITY_INFORMATION;
const OBJECT_TYPE_LIST = @import("../security.zig").OBJECT_TYPE_LIST;
const PSECURITY_DESCRIPTOR = @import("../security.zig").PSECURITY_DESCRIPTOR;
const PSID = @import("../foundation.zig").PSID;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const SID = @import("../security.zig").SID;
const SID_AND_ATTRIBUTES = @import("../security.zig").SID_AND_ATTRIBUTES;
const SYSTEM_AUDIT_OBJECT_ACE_FLAGS = @import("../security.zig").SYSTEM_AUDIT_OBJECT_ACE_FLAGS;
const TOKEN_GROUPS = @import("../security.zig").TOKEN_GROUPS;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PFN_AUTHZ_DYNAMIC_ACCESS_CHECK")) {
        _ = PFN_AUTHZ_DYNAMIC_ACCESS_CHECK;
    }
    if (@hasDecl(@This(), "PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS")) {
        _ = PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS;
    }
    if (@hasDecl(@This(), "PFN_AUTHZ_FREE_DYNAMIC_GROUPS")) {
        _ = PFN_AUTHZ_FREE_DYNAMIC_GROUPS;
    }
    if (@hasDecl(@This(), "PFN_AUTHZ_GET_CENTRAL_ACCESS_POLICY")) {
        _ = PFN_AUTHZ_GET_CENTRAL_ACCESS_POLICY;
    }
    if (@hasDecl(@This(), "PFN_AUTHZ_FREE_CENTRAL_ACCESS_POLICY")) {
        _ = PFN_AUTHZ_FREE_CENTRAL_ACCESS_POLICY;
    }
    if (@hasDecl(@This(), "FN_PROGRESS")) {
        _ = FN_PROGRESS;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
//--------------------------------------------------------------------------------
// Section: SubModules (1)
//--------------------------------------------------------------------------------
pub const ui = @import("authorization/ui.zig");
