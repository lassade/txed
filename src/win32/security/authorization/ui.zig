//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (28)
//--------------------------------------------------------------------------------
pub const SI_EDIT_PERMS = @as(i32, 0);
pub const SI_EDIT_OWNER = @as(i32, 1);
pub const SI_CONTAINER = @as(i32, 4);
pub const SI_READONLY = @as(i32, 8);
pub const SI_RESET = @as(i32, 32);
pub const SI_OWNER_READONLY = @as(i32, 64);
pub const SI_OWNER_RECURSE = @as(i32, 256);
pub const SI_NO_ACL_PROTECT = @as(i32, 512);
pub const SI_NO_TREE_APPLY = @as(i32, 1024);
pub const SI_PAGE_TITLE = @as(i32, 2048);
pub const SI_SERVER_IS_DC = @as(i32, 4096);
pub const SI_RESET_DACL_TREE = @as(i32, 16384);
pub const SI_RESET_SACL_TREE = @as(i32, 32768);
pub const SI_OBJECT_GUID = @as(i32, 65536);
pub const SI_ACCESS_SPECIFIC = @as(i32, 65536);
pub const SI_ACCESS_GENERAL = @as(i32, 131072);
pub const SI_ACCESS_CONTAINER = @as(i32, 262144);
pub const SI_ACCESS_PROPERTY = @as(i32, 524288);
pub const DOBJ_RES_CONT = @as(i32, 1);
pub const DOBJ_RES_ROOT = @as(i32, 2);
pub const DOBJ_VOL_NTACLS = @as(i32, 4);
pub const DOBJ_COND_NTACLS = @as(i32, 8);
pub const DOBJ_RIBBON_LAUNCH = @as(i32, 16);
pub const CFSTR_ACLUI_SID_INFO_LIST = "CFSTR_ACLUI_SID_INFO_LIST";
pub const SECURITY_OBJECT_ID_OBJECT_SD = @as(u32, 1);
pub const SECURITY_OBJECT_ID_SHARE = @as(u32, 2);
pub const SECURITY_OBJECT_ID_CENTRAL_POLICY = @as(u32, 3);
pub const SECURITY_OBJECT_ID_CENTRAL_ACCESS_RULE = @as(u32, 4);

//--------------------------------------------------------------------------------
// Section: Types (18)
//--------------------------------------------------------------------------------
pub const SECURITY_INFO_PAGE_FLAGS = enum(u32) {
    ADVANCED = 16,
    EDIT_AUDITS = 2,
    EDIT_PROPERTIES = 128,
    _,
    pub fn initFlags(o: struct {
        ADVANCED: u1 = 0,
        EDIT_AUDITS: u1 = 0,
        EDIT_PROPERTIES: u1 = 0,
    }) SECURITY_INFO_PAGE_FLAGS {
        return @as(SECURITY_INFO_PAGE_FLAGS, @enumFromInt((if (o.ADVANCED == 1) @intFromEnum(SECURITY_INFO_PAGE_FLAGS.ADVANCED) else 0) | (if (o.EDIT_AUDITS == 1) @intFromEnum(SECURITY_INFO_PAGE_FLAGS.EDIT_AUDITS) else 0) | (if (o.EDIT_PROPERTIES == 1) @intFromEnum(SECURITY_INFO_PAGE_FLAGS.EDIT_PROPERTIES) else 0)));
    }
};
pub const SI_ADVANCED = SECURITY_INFO_PAGE_FLAGS.ADVANCED;
pub const SI_EDIT_AUDITS = SECURITY_INFO_PAGE_FLAGS.EDIT_AUDITS;
pub const SI_EDIT_PROPERTIES = SECURITY_INFO_PAGE_FLAGS.EDIT_PROPERTIES;

pub const SI_OBJECT_INFO_FLAGS = enum(u32) {
    AUDITS_ELEVATION_REQUIRED = 33554432,
    DISABLE_DENY_ACE = 2147483648,
    EDIT_EFFECTIVE = 131072,
    ENABLE_CENTRAL_POLICY = 1073741824,
    ENABLE_EDIT_ATTRIBUTE_CONDITION = 536870912,
    MAY_WRITE = 268435456,
    NO_ADDITIONAL_PERMISSION = 2097152,
    OWNER_ELEVATION_REQUIRED = 67108864,
    PERMS_ELEVATION_REQUIRED = 16777216,
    RESET_DACL = 262144,
    RESET_OWNER = 1048576,
    RESET_SACL = 524288,
    SCOPE_ELEVATION_REQUIRED = 134217728,
    VIEW_ONLY = 4194304,
    _,
    pub fn initFlags(o: struct {
        AUDITS_ELEVATION_REQUIRED: u1 = 0,
        DISABLE_DENY_ACE: u1 = 0,
        EDIT_EFFECTIVE: u1 = 0,
        ENABLE_CENTRAL_POLICY: u1 = 0,
        ENABLE_EDIT_ATTRIBUTE_CONDITION: u1 = 0,
        MAY_WRITE: u1 = 0,
        NO_ADDITIONAL_PERMISSION: u1 = 0,
        OWNER_ELEVATION_REQUIRED: u1 = 0,
        PERMS_ELEVATION_REQUIRED: u1 = 0,
        RESET_DACL: u1 = 0,
        RESET_OWNER: u1 = 0,
        RESET_SACL: u1 = 0,
        SCOPE_ELEVATION_REQUIRED: u1 = 0,
        VIEW_ONLY: u1 = 0,
    }) SI_OBJECT_INFO_FLAGS {
        return @as(SI_OBJECT_INFO_FLAGS, @enumFromInt((if (o.AUDITS_ELEVATION_REQUIRED == 1) @intFromEnum(SI_OBJECT_INFO_FLAGS.AUDITS_ELEVATION_REQUIRED) else 0) | (if (o.DISABLE_DENY_ACE == 1) @intFromEnum(SI_OBJECT_INFO_FLAGS.DISABLE_DENY_ACE) else 0) | (if (o.EDIT_EFFECTIVE == 1) @intFromEnum(SI_OBJECT_INFO_FLAGS.EDIT_EFFECTIVE) else 0) | (if (o.ENABLE_CENTRAL_POLICY == 1) @intFromEnum(SI_OBJECT_INFO_FLAGS.ENABLE_CENTRAL_POLICY) else 0) | (if (o.ENABLE_EDIT_ATTRIBUTE_CONDITION == 1) @intFromEnum(SI_OBJECT_INFO_FLAGS.ENABLE_EDIT_ATTRIBUTE_CONDITION) else 0) | (if (o.MAY_WRITE == 1) @intFromEnum(SI_OBJECT_INFO_FLAGS.MAY_WRITE) else 0) | (if (o.NO_ADDITIONAL_PERMISSION == 1) @intFromEnum(SI_OBJECT_INFO_FLAGS.NO_ADDITIONAL_PERMISSION) else 0) | (if (o.OWNER_ELEVATION_REQUIRED == 1) @intFromEnum(SI_OBJECT_INFO_FLAGS.OWNER_ELEVATION_REQUIRED) else 0) | (if (o.PERMS_ELEVATION_REQUIRED == 1) @intFromEnum(SI_OBJECT_INFO_FLAGS.PERMS_ELEVATION_REQUIRED) else 0) | (if (o.RESET_DACL == 1) @intFromEnum(SI_OBJECT_INFO_FLAGS.RESET_DACL) else 0) | (if (o.RESET_OWNER == 1) @intFromEnum(SI_OBJECT_INFO_FLAGS.RESET_OWNER) else 0) | (if (o.RESET_SACL == 1) @intFromEnum(SI_OBJECT_INFO_FLAGS.RESET_SACL) else 0) | (if (o.SCOPE_ELEVATION_REQUIRED == 1) @intFromEnum(SI_OBJECT_INFO_FLAGS.SCOPE_ELEVATION_REQUIRED) else 0) | (if (o.VIEW_ONLY == 1) @intFromEnum(SI_OBJECT_INFO_FLAGS.VIEW_ONLY) else 0)));
    }
};
pub const SI_AUDITS_ELEVATION_REQUIRED = SI_OBJECT_INFO_FLAGS.AUDITS_ELEVATION_REQUIRED;
pub const SI_DISABLE_DENY_ACE = SI_OBJECT_INFO_FLAGS.DISABLE_DENY_ACE;
pub const SI_EDIT_EFFECTIVE = SI_OBJECT_INFO_FLAGS.EDIT_EFFECTIVE;
pub const SI_ENABLE_CENTRAL_POLICY = SI_OBJECT_INFO_FLAGS.ENABLE_CENTRAL_POLICY;
pub const SI_ENABLE_EDIT_ATTRIBUTE_CONDITION = SI_OBJECT_INFO_FLAGS.ENABLE_EDIT_ATTRIBUTE_CONDITION;
pub const SI_MAY_WRITE = SI_OBJECT_INFO_FLAGS.MAY_WRITE;
pub const SI_NO_ADDITIONAL_PERMISSION = SI_OBJECT_INFO_FLAGS.NO_ADDITIONAL_PERMISSION;
pub const SI_OWNER_ELEVATION_REQUIRED = SI_OBJECT_INFO_FLAGS.OWNER_ELEVATION_REQUIRED;
pub const SI_PERMS_ELEVATION_REQUIRED = SI_OBJECT_INFO_FLAGS.PERMS_ELEVATION_REQUIRED;
pub const SI_RESET_DACL = SI_OBJECT_INFO_FLAGS.RESET_DACL;
pub const SI_RESET_OWNER = SI_OBJECT_INFO_FLAGS.RESET_OWNER;
pub const SI_RESET_SACL = SI_OBJECT_INFO_FLAGS.RESET_SACL;
pub const SI_SCOPE_ELEVATION_REQUIRED = SI_OBJECT_INFO_FLAGS.SCOPE_ELEVATION_REQUIRED;
pub const SI_VIEW_ONLY = SI_OBJECT_INFO_FLAGS.VIEW_ONLY;

pub const SI_OBJECT_INFO = extern struct {
    dwFlags: SI_OBJECT_INFO_FLAGS,
    hInstance: ?HINSTANCE,
    pszServerName: ?PWSTR,
    pszObjectName: ?PWSTR,
    pszPageTitle: ?PWSTR,
    guidObjectType: Guid,
};

pub const SI_ACCESS = extern struct {
    pguid: ?*const Guid,
    mask: u32,
    pszName: ?[*:0]const u16,
    dwFlags: u32,
};

pub const SI_INHERIT_TYPE = extern struct {
    pguid: ?*const Guid,
    dwFlags: ACE_FLAGS,
    pszName: ?[*:0]const u16,
};

pub const SI_PAGE_TYPE = enum(i32) {
    PERM = 0,
    ADVPERM = 1,
    AUDIT = 2,
    OWNER = 3,
    EFFECTIVE = 4,
    TAKEOWNERSHIP = 5,
    SHARE = 6,
};
pub const SI_PAGE_PERM = SI_PAGE_TYPE.PERM;
pub const SI_PAGE_ADVPERM = SI_PAGE_TYPE.ADVPERM;
pub const SI_PAGE_AUDIT = SI_PAGE_TYPE.AUDIT;
pub const SI_PAGE_OWNER = SI_PAGE_TYPE.OWNER;
pub const SI_PAGE_EFFECTIVE = SI_PAGE_TYPE.EFFECTIVE;
pub const SI_PAGE_TAKEOWNERSHIP = SI_PAGE_TYPE.TAKEOWNERSHIP;
pub const SI_PAGE_SHARE = SI_PAGE_TYPE.SHARE;

pub const SI_PAGE_ACTIVATED = enum(i32) {
    DEFAULT = 0,
    PERM_ACTIVATED = 1,
    AUDIT_ACTIVATED = 2,
    OWNER_ACTIVATED = 3,
    EFFECTIVE_ACTIVATED = 4,
    SHARE_ACTIVATED = 5,
    CENTRAL_POLICY_ACTIVATED = 6,
};
pub const SI_SHOW_DEFAULT = SI_PAGE_ACTIVATED.DEFAULT;
pub const SI_SHOW_PERM_ACTIVATED = SI_PAGE_ACTIVATED.PERM_ACTIVATED;
pub const SI_SHOW_AUDIT_ACTIVATED = SI_PAGE_ACTIVATED.AUDIT_ACTIVATED;
pub const SI_SHOW_OWNER_ACTIVATED = SI_PAGE_ACTIVATED.OWNER_ACTIVATED;
pub const SI_SHOW_EFFECTIVE_ACTIVATED = SI_PAGE_ACTIVATED.EFFECTIVE_ACTIVATED;
pub const SI_SHOW_SHARE_ACTIVATED = SI_PAGE_ACTIVATED.SHARE_ACTIVATED;
pub const SI_SHOW_CENTRAL_POLICY_ACTIVATED = SI_PAGE_ACTIVATED.CENTRAL_POLICY_ACTIVATED;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ISecurityInformation_Value = Guid.initString("965fc360-16ff-11d0-91cb-00aa00bbb723");
pub const IID_ISecurityInformation = &IID_ISecurityInformation_Value;
pub const ISecurityInformation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetObjectInformation: *const fn (
            self: *const ISecurityInformation,
            p_object_info: ?*SI_OBJECT_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSecurity: *const fn (
            self: *const ISecurityInformation,
            requested_information: OBJECT_SECURITY_INFORMATION,
            pp_security_descriptor: ?*?PSECURITY_DESCRIPTOR,
            f_default: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSecurity: *const fn (
            self: *const ISecurityInformation,
            security_information: OBJECT_SECURITY_INFORMATION,
            p_security_descriptor: ?PSECURITY_DESCRIPTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAccessRights: *const fn (
            self: *const ISecurityInformation,
            pguid_object_type: ?*const Guid,
            dw_flags: SECURITY_INFO_PAGE_FLAGS,
            pp_access: ?*?*SI_ACCESS,
            pc_accesses: ?*u32,
            pi_default_access: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MapGeneric: *const fn (
            self: *const ISecurityInformation,
            pguid_object_type: ?*const Guid,
            p_ace_flags: ?*u8,
            p_mask: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInheritTypes: *const fn (
            self: *const ISecurityInformation,
            pp_inherit_types: ?*?*SI_INHERIT_TYPE,
            pc_inherit_types: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PropertySheetPageCallback: *const fn (
            self: *const ISecurityInformation,
            hwnd: ?HWND,
            u_msg: PSPCB_MESSAGE,
            u_page: SI_PAGE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getObjectInformation(self: *const T, p_object_info_: ?*SI_OBJECT_INFO) HRESULT {
                return @as(*const ISecurityInformation.VTable, @ptrCast(self.vtable)).GetObjectInformation(@as(*const ISecurityInformation, @ptrCast(self)), p_object_info_);
            }
            pub inline fn getSecurity(self: *const T, requested_information_: OBJECT_SECURITY_INFORMATION, pp_security_descriptor_: ?*?PSECURITY_DESCRIPTOR, f_default_: BOOL) HRESULT {
                return @as(*const ISecurityInformation.VTable, @ptrCast(self.vtable)).GetSecurity(@as(*const ISecurityInformation, @ptrCast(self)), requested_information_, pp_security_descriptor_, f_default_);
            }
            pub inline fn setSecurity(self: *const T, security_information_: OBJECT_SECURITY_INFORMATION, p_security_descriptor_: ?PSECURITY_DESCRIPTOR) HRESULT {
                return @as(*const ISecurityInformation.VTable, @ptrCast(self.vtable)).SetSecurity(@as(*const ISecurityInformation, @ptrCast(self)), security_information_, p_security_descriptor_);
            }
            pub inline fn getAccessRights(self: *const T, pguid_object_type_: ?*const Guid, dw_flags_: SECURITY_INFO_PAGE_FLAGS, pp_access_: ?*?*SI_ACCESS, pc_accesses_: ?*u32, pi_default_access_: ?*u32) HRESULT {
                return @as(*const ISecurityInformation.VTable, @ptrCast(self.vtable)).GetAccessRights(@as(*const ISecurityInformation, @ptrCast(self)), pguid_object_type_, dw_flags_, pp_access_, pc_accesses_, pi_default_access_);
            }
            pub inline fn mapGeneric(self: *const T, pguid_object_type_: ?*const Guid, p_ace_flags_: ?*u8, p_mask_: ?*u32) HRESULT {
                return @as(*const ISecurityInformation.VTable, @ptrCast(self.vtable)).MapGeneric(@as(*const ISecurityInformation, @ptrCast(self)), pguid_object_type_, p_ace_flags_, p_mask_);
            }
            pub inline fn getInheritTypes(self: *const T, pp_inherit_types_: ?*?*SI_INHERIT_TYPE, pc_inherit_types_: ?*u32) HRESULT {
                return @as(*const ISecurityInformation.VTable, @ptrCast(self.vtable)).GetInheritTypes(@as(*const ISecurityInformation, @ptrCast(self)), pp_inherit_types_, pc_inherit_types_);
            }
            pub inline fn propertySheetPageCallback(self: *const T, hwnd_: ?HWND, u_msg_: PSPCB_MESSAGE, u_page_: SI_PAGE_TYPE) HRESULT {
                return @as(*const ISecurityInformation.VTable, @ptrCast(self.vtable)).PropertySheetPageCallback(@as(*const ISecurityInformation, @ptrCast(self)), hwnd_, u_msg_, u_page_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ISecurityInformation2_Value = Guid.initString("c3ccfdb4-6f88-11d2-a3ce-00c04fb1782a");
pub const IID_ISecurityInformation2 = &IID_ISecurityInformation2_Value;
pub const ISecurityInformation2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsDaclCanonical: *const fn (
            self: *const ISecurityInformation2,
            p_dacl: ?*ACL,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        LookupSids: *const fn (
            self: *const ISecurityInformation2,
            c_sids: u32,
            rgp_sids: ?*?PSID,
            ppdo: ?*?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isDaclCanonical(self: *const T, p_dacl_: ?*ACL) BOOL {
                return @as(*const ISecurityInformation2.VTable, @ptrCast(self.vtable)).IsDaclCanonical(@as(*const ISecurityInformation2, @ptrCast(self)), p_dacl_);
            }
            pub inline fn lookupSids(self: *const T, c_sids_: u32, rgp_sids_: ?*?PSID, ppdo_: ?*?*IDataObject) HRESULT {
                return @as(*const ISecurityInformation2.VTable, @ptrCast(self.vtable)).LookupSids(@as(*const ISecurityInformation2, @ptrCast(self)), c_sids_, rgp_sids_, ppdo_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SID_INFO = extern struct {
    pSid: ?PSID,
    pwzCommonName: ?PWSTR,
    pwzClass: ?PWSTR,
    pwzUPN: ?PWSTR,
};

pub const SID_INFO_LIST = extern struct {
    cItems: u32,
    aSidInfo: [1]SID_INFO,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEffectivePermission_Value = Guid.initString("3853dc76-9f35-407c-88a1-d19344365fbc");
pub const IID_IEffectivePermission = &IID_IEffectivePermission_Value;
pub const IEffectivePermission = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetEffectivePermission: *const fn (
            self: *const IEffectivePermission,
            pguid_object_type: ?*const Guid,
            p_user_sid: ?PSID,
            psz_server_name: ?[*:0]const u16,
            p_s_d: ?PSECURITY_DESCRIPTOR,
            pp_object_type_list: ?*?*OBJECT_TYPE_LIST,
            pc_object_type_list_length: ?*u32,
            pp_granted_access_list: ?*?*u32,
            pc_granted_access_list_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getEffectivePermission(self: *const T, pguid_object_type_: ?*const Guid, p_user_sid_: ?PSID, psz_server_name_: ?[*:0]const u16, p_s_d_: ?PSECURITY_DESCRIPTOR, pp_object_type_list_: ?*?*OBJECT_TYPE_LIST, pc_object_type_list_length_: ?*u32, pp_granted_access_list_: ?*?*u32, pc_granted_access_list_length_: ?*u32) HRESULT {
                return @as(*const IEffectivePermission.VTable, @ptrCast(self.vtable)).GetEffectivePermission(@as(*const IEffectivePermission, @ptrCast(self)), pguid_object_type_, p_user_sid_, psz_server_name_, p_s_d_, pp_object_type_list_, pc_object_type_list_length_, pp_granted_access_list_, pc_granted_access_list_length_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ISecurityObjectTypeInfo_Value = Guid.initString("fc3066eb-79ef-444b-9111-d18a75ebf2fa");
pub const IID_ISecurityObjectTypeInfo = &IID_ISecurityObjectTypeInfo_Value;
pub const ISecurityObjectTypeInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInheritSource: *const fn (
            self: *const ISecurityObjectTypeInfo,
            si: u32,
            p_a_c_l: ?*ACL,
            pp_inherit_array: ?*?*INHERITED_FROMA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getInheritSource(self: *const T, si_: u32, p_a_c_l_: ?*ACL, pp_inherit_array_: ?*?*INHERITED_FROMA) HRESULT {
                return @as(*const ISecurityObjectTypeInfo.VTable, @ptrCast(self.vtable)).GetInheritSource(@as(*const ISecurityObjectTypeInfo, @ptrCast(self)), si_, p_a_c_l_, pp_inherit_array_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISecurityInformation3_Value = Guid.initString("e2cdc9cc-31bd-4f8f-8c8b-b641af516a1a");
pub const IID_ISecurityInformation3 = &IID_ISecurityInformation3_Value;
pub const ISecurityInformation3 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFullResourceName: *const fn (
            self: *const ISecurityInformation3,
            ppsz_resource_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenElevatedEditor: *const fn (
            self: *const ISecurityInformation3,
            h_wnd: ?HWND,
            u_page: SI_PAGE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFullResourceName(self: *const T, ppsz_resource_name_: ?*?PWSTR) HRESULT {
                return @as(*const ISecurityInformation3.VTable, @ptrCast(self.vtable)).GetFullResourceName(@as(*const ISecurityInformation3, @ptrCast(self)), ppsz_resource_name_);
            }
            pub inline fn openElevatedEditor(self: *const T, h_wnd_: ?HWND, u_page_: SI_PAGE_TYPE) HRESULT {
                return @as(*const ISecurityInformation3.VTable, @ptrCast(self.vtable)).OpenElevatedEditor(@as(*const ISecurityInformation3, @ptrCast(self)), h_wnd_, u_page_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SECURITY_OBJECT = extern struct {
    pwszName: ?PWSTR,
    pData: ?*anyopaque,
    cbData: u32,
    pData2: ?*anyopaque,
    cbData2: u32,
    Id: u32,
    fWellKnown: BOOLEAN,
};

pub const EFFPERM_RESULT_LIST = extern struct {
    fEvaluated: BOOLEAN,
    cObjectTypeListLength: u32,
    pObjectTypeList: ?*OBJECT_TYPE_LIST,
    pGrantedAccessList: ?*u32,
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ISecurityInformation4_Value = Guid.initString("ea961070-cd14-4621-ace4-f63c03e583e4");
pub const IID_ISecurityInformation4 = &IID_ISecurityInformation4_Value;
pub const ISecurityInformation4 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSecondarySecurity: *const fn (
            self: *const ISecurityInformation4,
            p_security_objects: ?*?*SECURITY_OBJECT,
            p_security_object_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSecondarySecurity(self: *const T, p_security_objects_: ?*?*SECURITY_OBJECT, p_security_object_count_: ?*u32) HRESULT {
                return @as(*const ISecurityInformation4.VTable, @ptrCast(self.vtable)).GetSecondarySecurity(@as(*const ISecurityInformation4, @ptrCast(self)), p_security_objects_, p_security_object_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IEffectivePermission2_Value = Guid.initString("941fabca-dd47-4fca-90bb-b0e10255f20d");
pub const IID_IEffectivePermission2 = &IID_IEffectivePermission2_Value;
pub const IEffectivePermission2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ComputeEffectivePermissionWithSecondarySecurity: *const fn (
            self: *const IEffectivePermission2,
            p_sid: ?PSID,
            p_device_sid: ?PSID,
            psz_server_name: ?[*:0]const u16,
            p_security_objects: [*]SECURITY_OBJECT,
            dw_security_object_count: u32,
            p_user_groups: ?*TOKEN_GROUPS,
            p_authz_user_groups_operations: ?*AUTHZ_SID_OPERATION,
            p_device_groups: ?*TOKEN_GROUPS,
            p_authz_device_groups_operations: ?*AUTHZ_SID_OPERATION,
            p_authz_user_claims: ?*AUTHZ_SECURITY_ATTRIBUTES_INFORMATION,
            p_authz_user_claims_operations: ?*AUTHZ_SECURITY_ATTRIBUTE_OPERATION,
            p_authz_device_claims: ?*AUTHZ_SECURITY_ATTRIBUTES_INFORMATION,
            p_authz_device_claims_operations: ?*AUTHZ_SECURITY_ATTRIBUTE_OPERATION,
            p_effperm_result_lists: [*]EFFPERM_RESULT_LIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn computeEffectivePermissionWithSecondarySecurity(self: *const T, p_sid_: ?PSID, p_device_sid_: ?PSID, psz_server_name_: ?[*:0]const u16, p_security_objects_: [*]SECURITY_OBJECT, dw_security_object_count_: u32, p_user_groups_: ?*TOKEN_GROUPS, p_authz_user_groups_operations_: ?*AUTHZ_SID_OPERATION, p_device_groups_: ?*TOKEN_GROUPS, p_authz_device_groups_operations_: ?*AUTHZ_SID_OPERATION, p_authz_user_claims_: ?*AUTHZ_SECURITY_ATTRIBUTES_INFORMATION, p_authz_user_claims_operations_: ?*AUTHZ_SECURITY_ATTRIBUTE_OPERATION, p_authz_device_claims_: ?*AUTHZ_SECURITY_ATTRIBUTES_INFORMATION, p_authz_device_claims_operations_: ?*AUTHZ_SECURITY_ATTRIBUTE_OPERATION, p_effperm_result_lists_: [*]EFFPERM_RESULT_LIST) HRESULT {
                return @as(*const IEffectivePermission2.VTable, @ptrCast(self.vtable)).ComputeEffectivePermissionWithSecondarySecurity(@as(*const IEffectivePermission2, @ptrCast(self)), p_sid_, p_device_sid_, psz_server_name_, p_security_objects_, dw_security_object_count_, p_user_groups_, p_authz_user_groups_operations_, p_device_groups_, p_authz_device_groups_operations_, p_authz_user_claims_, p_authz_user_claims_operations_, p_authz_device_claims_, p_authz_device_claims_operations_, p_effperm_result_lists_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (3)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "aclui" fn CreateSecurityPage(
    psi: ?*ISecurityInformation,
) callconv(@import("std").os.windows.WINAPI) ?HPROPSHEETPAGE;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "aclui" fn EditSecurity(
    hwnd_owner: ?HWND,
    psi: ?*ISecurityInformation,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "aclui" fn EditSecurityAdvanced(
    hwnd_owner: ?HWND,
    psi: ?*ISecurityInformation,
    u_s_i_page: SI_PAGE_TYPE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (22)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const ACE_FLAGS = @import("../../security.zig").ACE_FLAGS;
const ACL = @import("../../security.zig").ACL;
const AUTHZ_SECURITY_ATTRIBUTE_OPERATION = @import("../../security/authorization.zig").AUTHZ_SECURITY_ATTRIBUTE_OPERATION;
const AUTHZ_SECURITY_ATTRIBUTES_INFORMATION = @import("../../security/authorization.zig").AUTHZ_SECURITY_ATTRIBUTES_INFORMATION;
const AUTHZ_SID_OPERATION = @import("../../security/authorization.zig").AUTHZ_SID_OPERATION;
const BOOL = @import("../../foundation.zig").BOOL;
const BOOLEAN = @import("../../foundation.zig").BOOLEAN;
const HINSTANCE = @import("../../foundation.zig").HINSTANCE;
const HPROPSHEETPAGE = @import("../../ui/controls.zig").HPROPSHEETPAGE;
const HRESULT = @import("../../foundation.zig").HRESULT;
const HWND = @import("../../foundation.zig").HWND;
const IDataObject = @import("../../system/com.zig").IDataObject;
const INHERITED_FROMA = @import("../../security/authorization.zig").INHERITED_FROMA;
const IUnknown = @import("../../system/com.zig").IUnknown;
const OBJECT_SECURITY_INFORMATION = @import("../../security.zig").OBJECT_SECURITY_INFORMATION;
const OBJECT_TYPE_LIST = @import("../../security.zig").OBJECT_TYPE_LIST;
const PSECURITY_DESCRIPTOR = @import("../../security.zig").PSECURITY_DESCRIPTOR;
const PSID = @import("../../foundation.zig").PSID;
const PSPCB_MESSAGE = @import("../../ui/controls.zig").PSPCB_MESSAGE;
const PWSTR = @import("../../foundation.zig").PWSTR;
const TOKEN_GROUPS = @import("../../security.zig").TOKEN_GROUPS;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
