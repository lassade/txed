//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (242)
//--------------------------------------------------------------------------------
pub const FACILITY_EAP_MESSAGE = @as(u32, 2114);
pub const EAP_GROUP_MASK = @as(i32, 65280);
pub const EAP_E_EAPHOST_FIRST = @as(i32, -2143158272);
pub const EAP_E_EAPHOST_LAST = @as(i32, -2143158017);
pub const EAP_I_EAPHOST_FIRST = @as(i32, -2143158272);
pub const EAP_I_EAPHOST_LAST = @as(i32, -2143158017);
pub const EAP_E_CERT_STORE_INACCESSIBLE = @as(u32, 2151809040);
pub const EAP_E_EAPHOST_METHOD_NOT_INSTALLED = @as(u32, 2151809041);
pub const EAP_E_EAPHOST_THIRDPARTY_METHOD_HOST_RESET = @as(u32, 2151809042);
pub const EAP_E_EAPHOST_EAPQEC_INACCESSIBLE = @as(u32, 2151809043);
pub const EAP_E_EAPHOST_IDENTITY_UNKNOWN = @as(u32, 2151809044);
pub const EAP_E_AUTHENTICATION_FAILED = @as(u32, 2151809045);
pub const EAP_I_EAPHOST_EAP_NEGOTIATION_FAILED = @as(u32, 1078067222);
pub const EAP_E_EAPHOST_METHOD_INVALID_PACKET = @as(u32, 2151809047);
pub const EAP_E_EAPHOST_REMOTE_INVALID_PACKET = @as(u32, 2151809048);
pub const EAP_E_EAPHOST_XML_MALFORMED = @as(u32, 2151809049);
pub const EAP_E_METHOD_CONFIG_DOES_NOT_SUPPORT_SSO = @as(u32, 2151809050);
pub const EAP_E_EAPHOST_METHOD_OPERATION_NOT_SUPPORTED = @as(u32, 2151809056);
pub const EAP_E_USER_FIRST = @as(i32, -2143158016);
pub const EAP_E_USER_LAST = @as(i32, -2143157761);
pub const EAP_I_USER_FIRST = @as(i32, 1078067456);
pub const EAP_I_USER_LAST = @as(i32, 1078067711);
pub const EAP_E_USER_CERT_NOT_FOUND = @as(u32, 2151809280);
pub const EAP_E_USER_CERT_INVALID = @as(u32, 2151809281);
pub const EAP_E_USER_CERT_EXPIRED = @as(u32, 2151809282);
pub const EAP_E_USER_CERT_REVOKED = @as(u32, 2151809283);
pub const EAP_E_USER_CERT_OTHER_ERROR = @as(u32, 2151809284);
pub const EAP_E_USER_CERT_REJECTED = @as(u32, 2151809285);
pub const EAP_I_USER_ACCOUNT_OTHER_ERROR = @as(u32, 1078067472);
pub const EAP_E_USER_CREDENTIALS_REJECTED = @as(u32, 2151809297);
pub const EAP_E_USER_NAME_PASSWORD_REJECTED = @as(u32, 2151809298);
pub const EAP_E_NO_SMART_CARD_READER = @as(u32, 2151809299);
pub const EAP_E_SERVER_FIRST = @as(i32, -2143157760);
pub const EAP_E_SERVER_LAST = @as(i32, -2143157505);
pub const EAP_E_SERVER_CERT_NOT_FOUND = @as(u32, 2151809536);
pub const EAP_E_SERVER_CERT_INVALID = @as(u32, 2151809537);
pub const EAP_E_SERVER_CERT_EXPIRED = @as(u32, 2151809538);
pub const EAP_E_SERVER_CERT_REVOKED = @as(u32, 2151809539);
pub const EAP_E_SERVER_CERT_OTHER_ERROR = @as(u32, 2151809540);
pub const EAP_E_USER_ROOT_CERT_FIRST = @as(i32, -2143157504);
pub const EAP_E_USER_ROOT_CERT_LAST = @as(i32, -2143157249);
pub const EAP_E_USER_ROOT_CERT_NOT_FOUND = @as(u32, 2151809792);
pub const EAP_E_USER_ROOT_CERT_INVALID = @as(u32, 2151809793);
pub const EAP_E_USER_ROOT_CERT_EXPIRED = @as(u32, 2151809794);
pub const EAP_E_SERVER_ROOT_CERT_FIRST = @as(i32, -2143157248);
pub const EAP_E_SERVER_ROOT_CERT_LAST = @as(i32, -2143156993);
pub const EAP_E_SERVER_ROOT_CERT_NOT_FOUND = @as(u32, 2151810048);
pub const EAP_E_SERVER_ROOT_CERT_INVALID = @as(u32, 2151810049);
pub const EAP_E_SERVER_ROOT_CERT_NAME_REQUIRED = @as(u32, 2151810054);
pub const EAP_E_SIM_NOT_VALID = @as(u32, 2151810304);
pub const EAP_METHOD_INVALID_PACKET = @as(u32, 2151809047);
pub const EAP_INVALID_PACKET = @as(u32, 2151809048);
pub const EAP_PEER_FLAG_GUEST_ACCESS = @as(u32, 64);
pub const eapPropCipherSuiteNegotiation = @as(u32, 1);
pub const eapPropMutualAuth = @as(u32, 2);
pub const eapPropIntegrity = @as(u32, 4);
pub const eapPropReplayProtection = @as(u32, 8);
pub const eapPropConfidentiality = @as(u32, 16);
pub const eapPropKeyDerivation = @as(u32, 32);
pub const eapPropKeyStrength64 = @as(u32, 64);
pub const eapPropKeyStrength128 = @as(u32, 128);
pub const eapPropKeyStrength256 = @as(u32, 256);
pub const eapPropKeyStrength512 = @as(u32, 512);
pub const eapPropKeyStrength1024 = @as(u32, 1024);
pub const eapPropDictionaryAttackResistance = @as(u32, 2048);
pub const eapPropFastReconnect = @as(u32, 4096);
pub const eapPropCryptoBinding = @as(u32, 8192);
pub const eapPropSessionIndependence = @as(u32, 16384);
pub const eapPropFragmentation = @as(u32, 32768);
pub const eapPropChannelBinding = @as(u32, 65536);
pub const eapPropNap = @as(u32, 131072);
pub const eapPropStandalone = @as(u32, 262144);
pub const eapPropMppeEncryption = @as(u32, 524288);
pub const eapPropTunnelMethod = @as(u32, 1048576);
pub const eapPropSupportsConfig = @as(u32, 2097152);
pub const eapPropCertifiedMethod = @as(u32, 4194304);
pub const eapPropHiddenMethod = @as(u32, 8388608);
pub const eapPropMachineAuth = @as(u32, 16777216);
pub const eapPropUserAuth = @as(u32, 33554432);
pub const eapPropIdentityPrivacy = @as(u32, 67108864);
pub const eapPropMethodChaining = @as(u32, 134217728);
pub const eapPropSharedStateEquivalence = @as(u32, 268435456);
pub const eapPropReserved = @as(u32, 2147483648);
pub const EAP_VALUENAME_PROPERTIES = "Properties";
pub const EAP_FLAG_Reserved1 = @as(u32, 1);
pub const EAP_FLAG_NON_INTERACTIVE = @as(u32, 2);
pub const EAP_FLAG_LOGON = @as(u32, 4);
pub const EAP_FLAG_PREVIEW = @as(u32, 8);
pub const EAP_FLAG_Reserved2 = @as(u32, 16);
pub const EAP_FLAG_MACHINE_AUTH = @as(u32, 32);
pub const EAP_FLAG_GUEST_ACCESS = @as(u32, 64);
pub const EAP_FLAG_Reserved3 = @as(u32, 128);
pub const EAP_FLAG_Reserved4 = @as(u32, 256);
pub const EAP_FLAG_RESUME_FROM_HIBERNATE = @as(u32, 512);
pub const EAP_FLAG_Reserved5 = @as(u32, 1024);
pub const EAP_FLAG_Reserved6 = @as(u32, 2048);
pub const EAP_FLAG_FULL_AUTH = @as(u32, 4096);
pub const EAP_FLAG_PREFER_ALT_CREDENTIALS = @as(u32, 8192);
pub const EAP_FLAG_Reserved7 = @as(u32, 16384);
pub const EAP_PEER_FLAG_HEALTH_STATE_CHANGE = @as(u32, 32768);
pub const EAP_FLAG_SUPRESS_UI = @as(u32, 65536);
pub const EAP_FLAG_PRE_LOGON = @as(u32, 131072);
pub const EAP_FLAG_USER_AUTH = @as(u32, 262144);
pub const EAP_FLAG_CONFG_READONLY = @as(u32, 524288);
pub const EAP_FLAG_Reserved8 = @as(u32, 1048576);
pub const EAP_FLAG_Reserved9 = @as(u32, 4194304);
pub const EAP_FLAG_VPN = @as(u32, 8388608);
pub const EAP_FLAG_ONLY_EAP_TLS = @as(u32, 16777216);
pub const EAP_FLAG_SERVER_VALIDATION_REQUIRED = @as(u32, 33554432);
pub const EAP_CONFIG_INPUT_FIELD_PROPS_DEFAULT = @as(u32, 0);
pub const EAP_CONFIG_INPUT_FIELD_PROPS_NON_DISPLAYABLE = @as(u32, 1);
pub const EAP_CONFIG_INPUT_FIELD_PROPS_NON_PERSIST = @as(u32, 2);
pub const EAP_UI_INPUT_FIELD_PROPS_DEFAULT = @as(u32, 0);
pub const EAP_UI_INPUT_FIELD_PROPS_NON_DISPLAYABLE = @as(u32, 1);
pub const EAP_UI_INPUT_FIELD_PROPS_NON_PERSIST = @as(u32, 2);
pub const EAP_UI_INPUT_FIELD_PROPS_READ_ONLY = @as(u32, 4);
pub const EAP_CREDENTIAL_VERSION = @as(u32, 1);
pub const EAP_INTERACTIVE_UI_DATA_VERSION = @as(u32, 1);
pub const EAPHOST_PEER_API_VERSION = @as(u32, 1);
pub const EAPHOST_METHOD_API_VERSION = @as(u32, 1);
pub const MAX_EAP_CONFIG_INPUT_FIELD_LENGTH = @as(u32, 256);
pub const MAX_EAP_CONFIG_INPUT_FIELD_VALUE_LENGTH = @as(u32, 1024);
pub const CERTIFICATE_HASH_LENGTH = @as(u32, 20);
pub const NCRYPT_PIN_CACHE_PIN_BYTE_LENGTH = @as(u32, 90);
pub const EAP_REGISTRY_LOCATION = "System\\CurrentControlSet\\Services\\EapHost\\Methods";
pub const EAP_PEER_VALUENAME_DLL_PATH = "PeerDllPath";
pub const EAP_PEER_VALUENAME_FRIENDLY_NAME = "PeerFriendlyName";
pub const EAP_PEER_VALUENAME_CONFIGUI = "PeerConfigUIPath";
pub const EAP_PEER_VALUENAME_REQUIRE_CONFIGUI = "PeerRequireConfigUI";
pub const EAP_PEER_VALUENAME_IDENTITY = "PeerIdentityPath";
pub const EAP_PEER_VALUENAME_INTERACTIVEUI = "PeerInteractiveUIPath";
pub const EAP_PEER_VALUENAME_INVOKE_NAMEDLG = "PeerInvokeUsernameDialog";
pub const EAP_PEER_VALUENAME_INVOKE_PWDDLG = "PeerInvokePasswordDialog";
pub const EAP_PEER_VALUENAME_PROPERTIES = "Properties";
pub const EAP_AUTHENTICATOR_VALUENAME_DLL_PATH = "AuthenticatorDllPath";
pub const EAP_AUTHENTICATOR_VALUENAME_FRIENDLY_NAME = "AuthenticatorFriendlyName";
pub const EAP_AUTHENTICATOR_VALUENAME_PROPERTIES = "Properties";
pub const EAP_AUTHENTICATOR_VALUENAME_CONFIGUI = "AuthenticatorConfigUIPath";
pub const EAP_METHOD_AUTHENTICATOR_CONFIG_IS_IDENTITY_PRIVACY = @as(u32, 1);
pub const RAS_EAP_REGISTRY_LOCATION = "System\\CurrentControlSet\\Services\\Rasman\\PPP\\EAP";
pub const RAS_EAP_VALUENAME_PATH = "Path";
pub const RAS_EAP_VALUENAME_CONFIGUI = "ConfigUIPath";
pub const RAS_EAP_VALUENAME_INTERACTIVEUI = "InteractiveUIPath";
pub const RAS_EAP_VALUENAME_IDENTITY = "IdentityPath";
pub const RAS_EAP_VALUENAME_FRIENDLY_NAME = "FriendlyName";
pub const RAS_EAP_VALUENAME_DEFAULT_DATA = "ConfigData";
pub const RAS_EAP_VALUENAME_REQUIRE_CONFIGUI = "RequireConfigUI";
pub const RAS_EAP_VALUENAME_ENCRYPTION = "MPPEEncryptionSupported";
pub const RAS_EAP_VALUENAME_INVOKE_NAMEDLG = "InvokeUsernameDialog";
pub const RAS_EAP_VALUENAME_INVOKE_PWDDLG = "InvokePasswordDialog";
pub const RAS_EAP_VALUENAME_CONFIG_CLSID = "ConfigCLSID";
pub const RAS_EAP_VALUENAME_STANDALONE_SUPPORTED = "StandaloneSupported";
pub const RAS_EAP_VALUENAME_ROLES_SUPPORTED = "RolesSupported";
pub const RAS_EAP_VALUENAME_PER_POLICY_CONFIG = "PerPolicyConfig";
pub const RAS_EAP_VALUENAME_ISTUNNEL_METHOD = "IsTunnelMethod";
pub const RAS_EAP_VALUENAME_FILTER_INNERMETHODS = "FilterInnerMethods";
pub const RAS_EAP_ROLE_AUTHENTICATOR = @as(u32, 1);
pub const RAS_EAP_ROLE_AUTHENTICATEE = @as(u32, 2);
pub const RAS_EAP_ROLE_EXCLUDE_IN_EAP = @as(u32, 4);
pub const RAS_EAP_ROLE_EXCLUDE_IN_PEAP = @as(u32, 8);
pub const RAS_EAP_ROLE_EXCLUDE_IN_VPN = @as(u32, 16);
pub const raatARAPChallenge = @as(u32, 33);
pub const raatARAPOldPassword = @as(u32, 19);
pub const raatARAPNewPassword = @as(u32, 20);
pub const raatARAPPasswordChangeReason = @as(u32, 21);
pub const EAPCODE_Request = @as(u32, 1);
pub const EAPCODE_Response = @as(u32, 2);
pub const EAPCODE_Success = @as(u32, 3);
pub const EAPCODE_Failure = @as(u32, 4);
pub const MAXEAPCODE = @as(u32, 4);
pub const RAS_EAP_FLAG_ROUTER = @as(u32, 1);
pub const RAS_EAP_FLAG_NON_INTERACTIVE = @as(u32, 2);
pub const RAS_EAP_FLAG_LOGON = @as(u32, 4);
pub const RAS_EAP_FLAG_PREVIEW = @as(u32, 8);
pub const RAS_EAP_FLAG_FIRST_LINK = @as(u32, 16);
pub const RAS_EAP_FLAG_MACHINE_AUTH = @as(u32, 32);
pub const RAS_EAP_FLAG_GUEST_ACCESS = @as(u32, 64);
pub const RAS_EAP_FLAG_8021X_AUTH = @as(u32, 128);
pub const RAS_EAP_FLAG_HOSTED_IN_PEAP = @as(u32, 256);
pub const RAS_EAP_FLAG_RESUME_FROM_HIBERNATE = @as(u32, 512);
pub const RAS_EAP_FLAG_PEAP_UPFRONT = @as(u32, 1024);
pub const RAS_EAP_FLAG_ALTERNATIVE_USER_DB = @as(u32, 2048);
pub const RAS_EAP_FLAG_PEAP_FORCE_FULL_AUTH = @as(u32, 4096);
pub const RAS_EAP_FLAG_PRE_LOGON = @as(u32, 131072);
pub const RAS_EAP_FLAG_CONFG_READONLY = @as(u32, 524288);
pub const RAS_EAP_FLAG_RESERVED = @as(u32, 1048576);
pub const RAS_EAP_FLAG_SAVE_CREDMAN = @as(u32, 2097152);
pub const RAS_EAP_FLAG_SERVER_VALIDATION_REQUIRED = @as(u32, 33554432);
pub const GUID_EapHost_Default = Guid.initString("00000000-0000-0000-0000-000000000000");
pub const GUID_EapHost_Cause_MethodDLLNotFound = Guid.initString("9612fc67-6150-4209-a85e-a8d800000001");
pub const GUID_EapHost_Repair_ContactSysadmin = Guid.initString("9612fc67-6150-4209-a85e-a8d800000002");
pub const GUID_EapHost_Cause_CertStoreInaccessible = Guid.initString("9612fc67-6150-4209-a85e-a8d800000004");
pub const GUID_EapHost_Cause_Generic_AuthFailure = Guid.initString("9612fc67-6150-4209-a85e-a8d800000104");
pub const GUID_EapHost_Cause_IdentityUnknown = Guid.initString("9612fc67-6150-4209-a85e-a8d800000204");
pub const GUID_EapHost_Cause_SimNotValid = Guid.initString("9612fc67-6150-4209-a85e-a8d800000304");
pub const GUID_EapHost_Cause_Server_CertExpired = Guid.initString("9612fc67-6150-4209-a85e-a8d800000005");
pub const GUID_EapHost_Cause_Server_CertInvalid = Guid.initString("9612fc67-6150-4209-a85e-a8d800000006");
pub const GUID_EapHost_Cause_Server_CertNotFound = Guid.initString("9612fc67-6150-4209-a85e-a8d800000007");
pub const GUID_EapHost_Cause_Server_CertRevoked = Guid.initString("9612fc67-6150-4209-a85e-a8d800000008");
pub const GUID_EapHost_Cause_Server_CertOtherError = Guid.initString("9612fc67-6150-4209-a85e-a8d800000108");
pub const GUID_EapHost_Cause_User_CertExpired = Guid.initString("9612fc67-6150-4209-a85e-a8d800000009");
pub const GUID_EapHost_Cause_User_CertInvalid = Guid.initString("9612fc67-6150-4209-a85e-a8d80000000a");
pub const GUID_EapHost_Cause_User_CertNotFound = Guid.initString("9612fc67-6150-4209-a85e-a8d80000000b");
pub const GUID_EapHost_Cause_User_CertOtherError = Guid.initString("9612fc67-6150-4209-a85e-a8d80000000c");
pub const GUID_EapHost_Cause_User_CertRejected = Guid.initString("9612fc67-6150-4209-a85e-a8d80000000d");
pub const GUID_EapHost_Cause_User_CertRevoked = Guid.initString("9612fc67-6150-4209-a85e-a8d80000000e");
pub const GUID_EapHost_Cause_User_Account_OtherProblem = Guid.initString("9612fc67-6150-4209-a85e-a8d80000010e");
pub const GUID_EapHost_Cause_User_CredsRejected = Guid.initString("9612fc67-6150-4209-a85e-a8d80000020e");
pub const GUID_EapHost_Cause_User_Root_CertExpired = Guid.initString("9612fc67-6150-4209-a85e-a8d80000000f");
pub const GUID_EapHost_Cause_User_Root_CertInvalid = Guid.initString("9612fc67-6150-4209-a85e-a8d800000010");
pub const GUID_EapHost_Cause_User_Root_CertNotFound = Guid.initString("9612fc67-6150-4209-a85e-a8d800000011");
pub const GUID_EapHost_Cause_Server_Root_CertNameRequired = Guid.initString("9612fc67-6150-4209-a85e-a8d800000012");
pub const GUID_EapHost_Cause_Server_Root_CertNotFound = Guid.initString("9612fc67-6150-4209-a85e-a8d800000112");
pub const GUID_EapHost_Cause_ThirdPartyMethod_Host_Reset = Guid.initString("9612fc67-6150-4209-a85e-a8d800000212");
pub const GUID_EapHost_Cause_EapQecInaccessible = Guid.initString("9612fc67-6150-4209-a85e-a8d800000312");
pub const GUID_EapHost_Repair_Server_ClientSelectServerCert = Guid.initString("9612fc67-6150-4209-a85e-a8d800000018");
pub const GUID_EapHost_Repair_User_AuthFailure = Guid.initString("9612fc67-6150-4209-a85e-a8d800000019");
pub const GUID_EapHost_Repair_User_GetNewCert = Guid.initString("9612fc67-6150-4209-a85e-a8d80000001a");
pub const GUID_EapHost_Repair_User_SelectValidCert = Guid.initString("9612fc67-6150-4209-a85e-a8d80000001b");
pub const GUID_EapHost_Repair_Retry_Authentication = Guid.initString("9612fc67-6150-4209-a85e-a8d80000011b");
pub const GUID_EapHost_Cause_EapNegotiationFailed = Guid.initString("9612fc67-6150-4209-a85e-a8d80000001c");
pub const GUID_EapHost_Cause_XmlMalformed = Guid.initString("9612fc67-6150-4209-a85e-a8d80000001d");
pub const GUID_EapHost_Cause_MethodDoesNotSupportOperation = Guid.initString("9612fc67-6150-4209-a85e-a8d80000001e");
pub const GUID_EapHost_Repair_ContactAdmin_AuthFailure = Guid.initString("9612fc67-6150-4209-a85e-a8d80000001f");
pub const GUID_EapHost_Repair_ContactAdmin_IdentityUnknown = Guid.initString("9612fc67-6150-4209-a85e-a8d800000020");
pub const GUID_EapHost_Repair_ContactAdmin_NegotiationFailed = Guid.initString("9612fc67-6150-4209-a85e-a8d800000021");
pub const GUID_EapHost_Repair_ContactAdmin_MethodNotFound = Guid.initString("9612fc67-6150-4209-a85e-a8d800000022");
pub const GUID_EapHost_Repair_RestartNap = Guid.initString("9612fc67-6150-4209-a85e-a8d800000023");
pub const GUID_EapHost_Repair_ContactAdmin_CertStoreInaccessible = Guid.initString("9612fc67-6150-4209-a85e-a8d800000024");
pub const GUID_EapHost_Repair_ContactAdmin_InvalidUserAccount = Guid.initString("9612fc67-6150-4209-a85e-a8d800000025");
pub const GUID_EapHost_Repair_ContactAdmin_RootCertInvalid = Guid.initString("9612fc67-6150-4209-a85e-a8d800000026");
pub const GUID_EapHost_Repair_ContactAdmin_RootCertNotFound = Guid.initString("9612fc67-6150-4209-a85e-a8d800000027");
pub const GUID_EapHost_Repair_ContactAdmin_RootExpired = Guid.initString("9612fc67-6150-4209-a85e-a8d800000028");
pub const GUID_EapHost_Repair_ContactAdmin_CertNameAbsent = Guid.initString("9612fc67-6150-4209-a85e-a8d800000029");
pub const GUID_EapHost_Repair_ContactAdmin_NoSmartCardReader = Guid.initString("9612fc67-6150-4209-a85e-a8d80000002a");
pub const GUID_EapHost_Cause_No_SmartCardReader_Found = Guid.initString("9612fc67-6150-4209-a85e-a8d80000002b");
pub const GUID_EapHost_Repair_ContactAdmin_InvalidUserCert = Guid.initString("9612fc67-6150-4209-a85e-a8d80000002c");
pub const GUID_EapHost_Repair_Method_Not_Support_Sso = Guid.initString("9612fc67-6150-4209-a85e-a8d80000002d");
pub const GUID_EapHost_Repair_No_ValidSim_Found = Guid.initString("9612fc67-6150-4209-a85e-a8d80000002e");
pub const GUID_EapHost_Help_ObtainingCerts = Guid.initString("f535eea3-1bdd-46ca-a2fc-a6655939b7e8");
pub const GUID_EapHost_Help_Troubleshooting = Guid.initString("33307acf-0698-41ba-b014-ea0a2eb8d0a8");
pub const GUID_EapHost_Cause_Method_Config_Does_Not_Support_Sso = Guid.initString("da18bd32-004f-41fa-ae08-0bc85e5845ac");

//--------------------------------------------------------------------------------
// Section: Types (68)
//--------------------------------------------------------------------------------
pub const RAS_AUTH_ATTRIBUTE_TYPE = enum(i32) {
    Minimum = 0,
    UserName = 1,
    UserPassword = 2,
    MD5CHAPPassword = 3,
    NASIPAddress = 4,
    NASPort = 5,
    ServiceType = 6,
    FramedProtocol = 7,
    FramedIPAddress = 8,
    FramedIPNetmask = 9,
    FramedRouting = 10,
    FilterId = 11,
    FramedMTU = 12,
    FramedCompression = 13,
    LoginIPHost = 14,
    LoginService = 15,
    LoginTCPPort = 16,
    Unassigned17 = 17,
    ReplyMessage = 18,
    CallbackNumber = 19,
    CallbackId = 20,
    Unassigned21 = 21,
    FramedRoute = 22,
    FramedIPXNetwork = 23,
    State = 24,
    Class = 25,
    VendorSpecific = 26,
    SessionTimeout = 27,
    IdleTimeout = 28,
    TerminationAction = 29,
    CalledStationId = 30,
    CallingStationId = 31,
    NASIdentifier = 32,
    ProxyState = 33,
    LoginLATService = 34,
    LoginLATNode = 35,
    LoginLATGroup = 36,
    FramedAppleTalkLink = 37,
    FramedAppleTalkNetwork = 38,
    FramedAppleTalkZone = 39,
    AcctStatusType = 40,
    AcctDelayTime = 41,
    AcctInputOctets = 42,
    AcctOutputOctets = 43,
    AcctSessionId = 44,
    AcctAuthentic = 45,
    AcctSessionTime = 46,
    AcctInputPackets = 47,
    AcctOutputPackets = 48,
    AcctTerminateCause = 49,
    AcctMultiSessionId = 50,
    AcctLinkCount = 51,
    AcctEventTimeStamp = 55,
    MD5CHAPChallenge = 60,
    NASPortType = 61,
    PortLimit = 62,
    LoginLATPort = 63,
    TunnelType = 64,
    TunnelMediumType = 65,
    TunnelClientEndpoint = 66,
    TunnelServerEndpoint = 67,
    ARAPPassword = 70,
    ARAPFeatures = 71,
    ARAPZoneAccess = 72,
    ARAPSecurity = 73,
    ARAPSecurityData = 74,
    PasswordRetry = 75,
    Prompt = 76,
    ConnectInfo = 77,
    ConfigurationToken = 78,
    EAPMessage = 79,
    Signature = 80,
    ARAPChallengeResponse = 84,
    AcctInterimInterval = 85,
    NASIPv6Address = 95,
    FramedInterfaceId = 96,
    FramedIPv6Prefix = 97,
    LoginIPv6Host = 98,
    FramedIPv6Route = 99,
    FramedIPv6Pool = 100,
    ARAPGuestLogon = 8096,
    CertificateOID = 8097,
    EAPConfiguration = 8098,
    PEAPEmbeddedEAPTypeId = 8099,
    // InnerEAPTypeId = 8099, this enum value conflicts with PEAPEmbeddedEAPTypeId
    PEAPFastRoamedSession = 8100,
    // FastRoamedSession = 8100, this enum value conflicts with PEAPFastRoamedSession
    EAPTLV = 8102,
    CredentialsChanged = 8103,
    CertificateThumbprint = 8250,
    PeerId = 9000,
    ServerId = 9001,
    MethodId = 9002,
    EMSK = 9003,
    SessionId = 9004,
    Reserved = -1,
};
pub const raatMinimum = RAS_AUTH_ATTRIBUTE_TYPE.Minimum;
pub const raatUserName = RAS_AUTH_ATTRIBUTE_TYPE.UserName;
pub const raatUserPassword = RAS_AUTH_ATTRIBUTE_TYPE.UserPassword;
pub const raatMD5CHAPPassword = RAS_AUTH_ATTRIBUTE_TYPE.MD5CHAPPassword;
pub const raatNASIPAddress = RAS_AUTH_ATTRIBUTE_TYPE.NASIPAddress;
pub const raatNASPort = RAS_AUTH_ATTRIBUTE_TYPE.NASPort;
pub const raatServiceType = RAS_AUTH_ATTRIBUTE_TYPE.ServiceType;
pub const raatFramedProtocol = RAS_AUTH_ATTRIBUTE_TYPE.FramedProtocol;
pub const raatFramedIPAddress = RAS_AUTH_ATTRIBUTE_TYPE.FramedIPAddress;
pub const raatFramedIPNetmask = RAS_AUTH_ATTRIBUTE_TYPE.FramedIPNetmask;
pub const raatFramedRouting = RAS_AUTH_ATTRIBUTE_TYPE.FramedRouting;
pub const raatFilterId = RAS_AUTH_ATTRIBUTE_TYPE.FilterId;
pub const raatFramedMTU = RAS_AUTH_ATTRIBUTE_TYPE.FramedMTU;
pub const raatFramedCompression = RAS_AUTH_ATTRIBUTE_TYPE.FramedCompression;
pub const raatLoginIPHost = RAS_AUTH_ATTRIBUTE_TYPE.LoginIPHost;
pub const raatLoginService = RAS_AUTH_ATTRIBUTE_TYPE.LoginService;
pub const raatLoginTCPPort = RAS_AUTH_ATTRIBUTE_TYPE.LoginTCPPort;
pub const raatUnassigned17 = RAS_AUTH_ATTRIBUTE_TYPE.Unassigned17;
pub const raatReplyMessage = RAS_AUTH_ATTRIBUTE_TYPE.ReplyMessage;
pub const raatCallbackNumber = RAS_AUTH_ATTRIBUTE_TYPE.CallbackNumber;
pub const raatCallbackId = RAS_AUTH_ATTRIBUTE_TYPE.CallbackId;
pub const raatUnassigned21 = RAS_AUTH_ATTRIBUTE_TYPE.Unassigned21;
pub const raatFramedRoute = RAS_AUTH_ATTRIBUTE_TYPE.FramedRoute;
pub const raatFramedIPXNetwork = RAS_AUTH_ATTRIBUTE_TYPE.FramedIPXNetwork;
pub const raatState = RAS_AUTH_ATTRIBUTE_TYPE.State;
pub const raatClass = RAS_AUTH_ATTRIBUTE_TYPE.Class;
pub const raatVendorSpecific = RAS_AUTH_ATTRIBUTE_TYPE.VendorSpecific;
pub const raatSessionTimeout = RAS_AUTH_ATTRIBUTE_TYPE.SessionTimeout;
pub const raatIdleTimeout = RAS_AUTH_ATTRIBUTE_TYPE.IdleTimeout;
pub const raatTerminationAction = RAS_AUTH_ATTRIBUTE_TYPE.TerminationAction;
pub const raatCalledStationId = RAS_AUTH_ATTRIBUTE_TYPE.CalledStationId;
pub const raatCallingStationId = RAS_AUTH_ATTRIBUTE_TYPE.CallingStationId;
pub const raatNASIdentifier = RAS_AUTH_ATTRIBUTE_TYPE.NASIdentifier;
pub const raatProxyState = RAS_AUTH_ATTRIBUTE_TYPE.ProxyState;
pub const raatLoginLATService = RAS_AUTH_ATTRIBUTE_TYPE.LoginLATService;
pub const raatLoginLATNode = RAS_AUTH_ATTRIBUTE_TYPE.LoginLATNode;
pub const raatLoginLATGroup = RAS_AUTH_ATTRIBUTE_TYPE.LoginLATGroup;
pub const raatFramedAppleTalkLink = RAS_AUTH_ATTRIBUTE_TYPE.FramedAppleTalkLink;
pub const raatFramedAppleTalkNetwork = RAS_AUTH_ATTRIBUTE_TYPE.FramedAppleTalkNetwork;
pub const raatFramedAppleTalkZone = RAS_AUTH_ATTRIBUTE_TYPE.FramedAppleTalkZone;
pub const raatAcctStatusType = RAS_AUTH_ATTRIBUTE_TYPE.AcctStatusType;
pub const raatAcctDelayTime = RAS_AUTH_ATTRIBUTE_TYPE.AcctDelayTime;
pub const raatAcctInputOctets = RAS_AUTH_ATTRIBUTE_TYPE.AcctInputOctets;
pub const raatAcctOutputOctets = RAS_AUTH_ATTRIBUTE_TYPE.AcctOutputOctets;
pub const raatAcctSessionId = RAS_AUTH_ATTRIBUTE_TYPE.AcctSessionId;
pub const raatAcctAuthentic = RAS_AUTH_ATTRIBUTE_TYPE.AcctAuthentic;
pub const raatAcctSessionTime = RAS_AUTH_ATTRIBUTE_TYPE.AcctSessionTime;
pub const raatAcctInputPackets = RAS_AUTH_ATTRIBUTE_TYPE.AcctInputPackets;
pub const raatAcctOutputPackets = RAS_AUTH_ATTRIBUTE_TYPE.AcctOutputPackets;
pub const raatAcctTerminateCause = RAS_AUTH_ATTRIBUTE_TYPE.AcctTerminateCause;
pub const raatAcctMultiSessionId = RAS_AUTH_ATTRIBUTE_TYPE.AcctMultiSessionId;
pub const raatAcctLinkCount = RAS_AUTH_ATTRIBUTE_TYPE.AcctLinkCount;
pub const raatAcctEventTimeStamp = RAS_AUTH_ATTRIBUTE_TYPE.AcctEventTimeStamp;
pub const raatMD5CHAPChallenge = RAS_AUTH_ATTRIBUTE_TYPE.MD5CHAPChallenge;
pub const raatNASPortType = RAS_AUTH_ATTRIBUTE_TYPE.NASPortType;
pub const raatPortLimit = RAS_AUTH_ATTRIBUTE_TYPE.PortLimit;
pub const raatLoginLATPort = RAS_AUTH_ATTRIBUTE_TYPE.LoginLATPort;
pub const raatTunnelType = RAS_AUTH_ATTRIBUTE_TYPE.TunnelType;
pub const raatTunnelMediumType = RAS_AUTH_ATTRIBUTE_TYPE.TunnelMediumType;
pub const raatTunnelClientEndpoint = RAS_AUTH_ATTRIBUTE_TYPE.TunnelClientEndpoint;
pub const raatTunnelServerEndpoint = RAS_AUTH_ATTRIBUTE_TYPE.TunnelServerEndpoint;
pub const raatARAPPassword = RAS_AUTH_ATTRIBUTE_TYPE.ARAPPassword;
pub const raatARAPFeatures = RAS_AUTH_ATTRIBUTE_TYPE.ARAPFeatures;
pub const raatARAPZoneAccess = RAS_AUTH_ATTRIBUTE_TYPE.ARAPZoneAccess;
pub const raatARAPSecurity = RAS_AUTH_ATTRIBUTE_TYPE.ARAPSecurity;
pub const raatARAPSecurityData = RAS_AUTH_ATTRIBUTE_TYPE.ARAPSecurityData;
pub const raatPasswordRetry = RAS_AUTH_ATTRIBUTE_TYPE.PasswordRetry;
pub const raatPrompt = RAS_AUTH_ATTRIBUTE_TYPE.Prompt;
pub const raatConnectInfo = RAS_AUTH_ATTRIBUTE_TYPE.ConnectInfo;
pub const raatConfigurationToken = RAS_AUTH_ATTRIBUTE_TYPE.ConfigurationToken;
pub const raatEAPMessage = RAS_AUTH_ATTRIBUTE_TYPE.EAPMessage;
pub const raatSignature = RAS_AUTH_ATTRIBUTE_TYPE.Signature;
pub const raatARAPChallengeResponse = RAS_AUTH_ATTRIBUTE_TYPE.ARAPChallengeResponse;
pub const raatAcctInterimInterval = RAS_AUTH_ATTRIBUTE_TYPE.AcctInterimInterval;
pub const raatNASIPv6Address = RAS_AUTH_ATTRIBUTE_TYPE.NASIPv6Address;
pub const raatFramedInterfaceId = RAS_AUTH_ATTRIBUTE_TYPE.FramedInterfaceId;
pub const raatFramedIPv6Prefix = RAS_AUTH_ATTRIBUTE_TYPE.FramedIPv6Prefix;
pub const raatLoginIPv6Host = RAS_AUTH_ATTRIBUTE_TYPE.LoginIPv6Host;
pub const raatFramedIPv6Route = RAS_AUTH_ATTRIBUTE_TYPE.FramedIPv6Route;
pub const raatFramedIPv6Pool = RAS_AUTH_ATTRIBUTE_TYPE.FramedIPv6Pool;
pub const raatARAPGuestLogon = RAS_AUTH_ATTRIBUTE_TYPE.ARAPGuestLogon;
pub const raatCertificateOID = RAS_AUTH_ATTRIBUTE_TYPE.CertificateOID;
pub const raatEAPConfiguration = RAS_AUTH_ATTRIBUTE_TYPE.EAPConfiguration;
pub const raatPEAPEmbeddedEAPTypeId = RAS_AUTH_ATTRIBUTE_TYPE.PEAPEmbeddedEAPTypeId;
pub const raatInnerEAPTypeId = RAS_AUTH_ATTRIBUTE_TYPE.PEAPEmbeddedEAPTypeId;
pub const raatPEAPFastRoamedSession = RAS_AUTH_ATTRIBUTE_TYPE.PEAPFastRoamedSession;
pub const raatFastRoamedSession = RAS_AUTH_ATTRIBUTE_TYPE.PEAPFastRoamedSession;
pub const raatEAPTLV = RAS_AUTH_ATTRIBUTE_TYPE.EAPTLV;
pub const raatCredentialsChanged = RAS_AUTH_ATTRIBUTE_TYPE.CredentialsChanged;
pub const raatCertificateThumbprint = RAS_AUTH_ATTRIBUTE_TYPE.CertificateThumbprint;
pub const raatPeerId = RAS_AUTH_ATTRIBUTE_TYPE.PeerId;
pub const raatServerId = RAS_AUTH_ATTRIBUTE_TYPE.ServerId;
pub const raatMethodId = RAS_AUTH_ATTRIBUTE_TYPE.MethodId;
pub const raatEMSK = RAS_AUTH_ATTRIBUTE_TYPE.EMSK;
pub const raatSessionId = RAS_AUTH_ATTRIBUTE_TYPE.SessionId;
pub const raatReserved = RAS_AUTH_ATTRIBUTE_TYPE.Reserved;

pub const NgcTicketContext = extern struct {
    wszTicket: [45]u16,
    hKey: NCRYPT_KEY_HANDLE,
    hImpersonateToken: ?HANDLE,
};

pub const RAS_AUTH_ATTRIBUTE = extern struct {
    raaType: RAS_AUTH_ATTRIBUTE_TYPE,
    dwLength: u32,
    Value: ?*anyopaque,
};

pub const PPP_EAP_PACKET = extern struct {
    Code: u8,
    Id: u8,
    Length: [2]u8,
    Data: [1]u8,
};

pub const PPP_EAP_INPUT = extern struct {
    dwSizeInBytes: u32,
    fFlags: u32,
    fAuthenticator: BOOL,
    pwszIdentity: ?PWSTR,
    pwszPassword: ?PWSTR,
    bInitialId: u8,
    pUserAttributes: ?*RAS_AUTH_ATTRIBUTE,
    fAuthenticationComplete: BOOL,
    dwAuthResultCode: u32,
    hTokenImpersonateUser: ?HANDLE,
    fSuccessPacketReceived: BOOL,
    fDataReceivedFromInteractiveUI: BOOL,
    pDataFromInteractiveUI: ?*u8,
    dwSizeOfDataFromInteractiveUI: u32,
    pConnectionData: ?*u8,
    dwSizeOfConnectionData: u32,
    pUserData: ?*u8,
    dwSizeOfUserData: u32,
    hReserved: ?HANDLE,
    guidConnectionId: Guid,
    isVpn: BOOL,
};

pub const PPP_EAP_ACTION = enum(i32) {
    NoAction = 0,
    Authenticate = 1,
    Done = 2,
    SendAndDone = 3,
    Send = 4,
    SendWithTimeout = 5,
    SendWithTimeoutInteractive = 6,
    IndicateTLV = 7,
    IndicateIdentity = 8,
};
pub const EAPACTION_NoAction = PPP_EAP_ACTION.NoAction;
pub const EAPACTION_Authenticate = PPP_EAP_ACTION.Authenticate;
pub const EAPACTION_Done = PPP_EAP_ACTION.Done;
pub const EAPACTION_SendAndDone = PPP_EAP_ACTION.SendAndDone;
pub const EAPACTION_Send = PPP_EAP_ACTION.Send;
pub const EAPACTION_SendWithTimeout = PPP_EAP_ACTION.SendWithTimeout;
pub const EAPACTION_SendWithTimeoutInteractive = PPP_EAP_ACTION.SendWithTimeoutInteractive;
pub const EAPACTION_IndicateTLV = PPP_EAP_ACTION.IndicateTLV;
pub const EAPACTION_IndicateIdentity = PPP_EAP_ACTION.IndicateIdentity;

pub const PPP_EAP_OUTPUT = extern struct {
    dwSizeInBytes: u32,
    Action: PPP_EAP_ACTION,
    dwAuthResultCode: u32,
    pUserAttributes: ?*RAS_AUTH_ATTRIBUTE,
    fInvokeInteractiveUI: BOOL,
    pUIContextData: ?*u8,
    dwSizeOfUIContextData: u32,
    fSaveConnectionData: BOOL,
    pConnectionData: ?*u8,
    dwSizeOfConnectionData: u32,
    fSaveUserData: BOOL,
    pUserData: ?*u8,
    dwSizeOfUserData: u32,
    pNgcKerbTicket: ?*NgcTicketContext,
    fSaveToCredMan: BOOL,
};

pub const PPP_EAP_INFO = extern struct {
    dwSizeInBytes: u32,
    dwEapTypeId: u32,
    RasEapInitialize: isize,
    RasEapBegin: isize,
    RasEapEnd: isize,
    RasEapMakeMessage: isize,
};

pub const LEGACY_IDENTITY_UI_PARAMS = extern struct {
    eapType: u32,
    dwFlags: u32,
    dwSizeofConnectionData: u32,
    pConnectionData: ?*u8,
    dwSizeofUserData: u32,
    pUserData: ?*u8,
    dwSizeofUserDataOut: u32,
    pUserDataOut: ?*u8,
    pwszIdentity: ?PWSTR,
    dwError: u32,
};

pub const LEGACY_INTERACTIVE_UI_PARAMS = extern struct {
    eapType: u32,
    dwSizeofContextData: u32,
    pContextData: ?*u8,
    dwSizeofInteractiveUIData: u32,
    pInteractiveUIData: ?*u8,
    dwError: u32,
};

const IID_IRouterProtocolConfig_Value = Guid.initString("66a2db16-d706-11d0-a37b-00c04fc9da04");
pub const IID_IRouterProtocolConfig = &IID_IRouterProtocolConfig_Value;
pub const IRouterProtocolConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddProtocol: *const fn (
            self: *const IRouterProtocolConfig,
            psz_machine_name: ?[*:0]const u16,
            dw_transport_id: u32,
            dw_protocol_id: u32,
            h_wnd: ?HWND,
            dw_flags: u32,
            p_router: ?*IUnknown,
            u_reserved1: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveProtocol: *const fn (
            self: *const IRouterProtocolConfig,
            psz_machine_name: ?[*:0]const u16,
            dw_transport_id: u32,
            dw_protocol_id: u32,
            h_wnd: ?HWND,
            dw_flags: u32,
            p_router: ?*IUnknown,
            u_reserved1: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addProtocol(self: *const T, psz_machine_name_: ?[*:0]const u16, dw_transport_id_: u32, dw_protocol_id_: u32, h_wnd_: ?HWND, dw_flags_: u32, p_router_: ?*IUnknown, u_reserved1_: usize) HRESULT {
                return @as(*const IRouterProtocolConfig.VTable, @ptrCast(self.vtable)).AddProtocol(@as(*const IRouterProtocolConfig, @ptrCast(self)), psz_machine_name_, dw_transport_id_, dw_protocol_id_, h_wnd_, dw_flags_, p_router_, u_reserved1_);
            }
            pub inline fn removeProtocol(self: *const T, psz_machine_name_: ?[*:0]const u16, dw_transport_id_: u32, dw_protocol_id_: u32, h_wnd_: ?HWND, dw_flags_: u32, p_router_: ?*IUnknown, u_reserved1_: usize) HRESULT {
                return @as(*const IRouterProtocolConfig.VTable, @ptrCast(self.vtable)).RemoveProtocol(@as(*const IRouterProtocolConfig, @ptrCast(self)), psz_machine_name_, dw_transport_id_, dw_protocol_id_, h_wnd_, dw_flags_, p_router_, u_reserved1_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IAuthenticationProviderConfig_Value = Guid.initString("66a2db17-d706-11d0-a37b-00c04fc9da04");
pub const IID_IAuthenticationProviderConfig = &IID_IAuthenticationProviderConfig_Value;
pub const IAuthenticationProviderConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IAuthenticationProviderConfig,
            psz_machine_name: ?[*:0]const u16,
            pu_connection_param: ?*usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Uninitialize: *const fn (
            self: *const IAuthenticationProviderConfig,
            u_connection_param: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Configure: *const fn (
            self: *const IAuthenticationProviderConfig,
            u_connection_param: usize,
            h_wnd: ?HWND,
            dw_flags: u32,
            u_reserved1: usize,
            u_reserved2: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Activate: *const fn (
            self: *const IAuthenticationProviderConfig,
            u_connection_param: usize,
            u_reserved1: usize,
            u_reserved2: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Deactivate: *const fn (
            self: *const IAuthenticationProviderConfig,
            u_connection_param: usize,
            u_reserved1: usize,
            u_reserved2: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, psz_machine_name_: ?[*:0]const u16, pu_connection_param_: ?*usize) HRESULT {
                return @as(*const IAuthenticationProviderConfig.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IAuthenticationProviderConfig, @ptrCast(self)), psz_machine_name_, pu_connection_param_);
            }
            pub inline fn uninitialize(self: *const T, u_connection_param_: usize) HRESULT {
                return @as(*const IAuthenticationProviderConfig.VTable, @ptrCast(self.vtable)).Uninitialize(@as(*const IAuthenticationProviderConfig, @ptrCast(self)), u_connection_param_);
            }
            pub inline fn configure(self: *const T, u_connection_param_: usize, h_wnd_: ?HWND, dw_flags_: u32, u_reserved1_: usize, u_reserved2_: usize) HRESULT {
                return @as(*const IAuthenticationProviderConfig.VTable, @ptrCast(self.vtable)).Configure(@as(*const IAuthenticationProviderConfig, @ptrCast(self)), u_connection_param_, h_wnd_, dw_flags_, u_reserved1_, u_reserved2_);
            }
            pub inline fn activate(self: *const T, u_connection_param_: usize, u_reserved1_: usize, u_reserved2_: usize) HRESULT {
                return @as(*const IAuthenticationProviderConfig.VTable, @ptrCast(self.vtable)).Activate(@as(*const IAuthenticationProviderConfig, @ptrCast(self)), u_connection_param_, u_reserved1_, u_reserved2_);
            }
            pub inline fn deactivate(self: *const T, u_connection_param_: usize, u_reserved1_: usize, u_reserved2_: usize) HRESULT {
                return @as(*const IAuthenticationProviderConfig.VTable, @ptrCast(self.vtable)).Deactivate(@as(*const IAuthenticationProviderConfig, @ptrCast(self)), u_connection_param_, u_reserved1_, u_reserved2_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IAccountingProviderConfig_Value = Guid.initString("66a2db18-d706-11d0-a37b-00c04fc9da04");
pub const IID_IAccountingProviderConfig = &IID_IAccountingProviderConfig_Value;
pub const IAccountingProviderConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IAccountingProviderConfig,
            psz_machine_name: ?[*:0]const u16,
            pu_connection_param: ?*usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Uninitialize: *const fn (
            self: *const IAccountingProviderConfig,
            u_connection_param: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Configure: *const fn (
            self: *const IAccountingProviderConfig,
            u_connection_param: usize,
            h_wnd: ?HWND,
            dw_flags: u32,
            u_reserved1: usize,
            u_reserved2: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Activate: *const fn (
            self: *const IAccountingProviderConfig,
            u_connection_param: usize,
            u_reserved1: usize,
            u_reserved2: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Deactivate: *const fn (
            self: *const IAccountingProviderConfig,
            u_connection_param: usize,
            u_reserved1: usize,
            u_reserved2: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, psz_machine_name_: ?[*:0]const u16, pu_connection_param_: ?*usize) HRESULT {
                return @as(*const IAccountingProviderConfig.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IAccountingProviderConfig, @ptrCast(self)), psz_machine_name_, pu_connection_param_);
            }
            pub inline fn uninitialize(self: *const T, u_connection_param_: usize) HRESULT {
                return @as(*const IAccountingProviderConfig.VTable, @ptrCast(self.vtable)).Uninitialize(@as(*const IAccountingProviderConfig, @ptrCast(self)), u_connection_param_);
            }
            pub inline fn configure(self: *const T, u_connection_param_: usize, h_wnd_: ?HWND, dw_flags_: u32, u_reserved1_: usize, u_reserved2_: usize) HRESULT {
                return @as(*const IAccountingProviderConfig.VTable, @ptrCast(self.vtable)).Configure(@as(*const IAccountingProviderConfig, @ptrCast(self)), u_connection_param_, h_wnd_, dw_flags_, u_reserved1_, u_reserved2_);
            }
            pub inline fn activate(self: *const T, u_connection_param_: usize, u_reserved1_: usize, u_reserved2_: usize) HRESULT {
                return @as(*const IAccountingProviderConfig.VTable, @ptrCast(self.vtable)).Activate(@as(*const IAccountingProviderConfig, @ptrCast(self)), u_connection_param_, u_reserved1_, u_reserved2_);
            }
            pub inline fn deactivate(self: *const T, u_connection_param_: usize, u_reserved1_: usize, u_reserved2_: usize) HRESULT {
                return @as(*const IAccountingProviderConfig.VTable, @ptrCast(self.vtable)).Deactivate(@as(*const IAccountingProviderConfig, @ptrCast(self)), u_connection_param_, u_reserved1_, u_reserved2_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEAPProviderConfig_Value = Guid.initString("66a2db19-d706-11d0-a37b-00c04fc9da04");
pub const IID_IEAPProviderConfig = &IID_IEAPProviderConfig_Value;
pub const IEAPProviderConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IEAPProviderConfig,
            psz_machine_name: ?[*:0]const u16,
            dw_eap_type_id: u32,
            pu_connection_param: ?*usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Uninitialize: *const fn (
            self: *const IEAPProviderConfig,
            dw_eap_type_id: u32,
            u_connection_param: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ServerInvokeConfigUI: *const fn (
            self: *const IEAPProviderConfig,
            dw_eap_type_id: u32,
            u_connection_param: usize,
            h_wnd: ?HWND,
            u_reserved1: usize,
            u_reserved2: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RouterInvokeConfigUI: *const fn (
            self: *const IEAPProviderConfig,
            dw_eap_type_id: u32,
            u_connection_param: usize,
            hwnd_parent: ?HWND,
            dw_flags: u32,
            p_connection_data_in: [*:0]u8,
            dw_size_of_connection_data_in: u32,
            pp_connection_data_out: [*]?*u8,
            pdw_size_of_connection_data_out: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RouterInvokeCredentialsUI: *const fn (
            self: *const IEAPProviderConfig,
            dw_eap_type_id: u32,
            u_connection_param: usize,
            hwnd_parent: ?HWND,
            dw_flags: u32,
            p_connection_data_in: [*:0]u8,
            dw_size_of_connection_data_in: u32,
            p_user_data_in: [*:0]u8,
            dw_size_of_user_data_in: u32,
            pp_user_data_out: [*]?*u8,
            pdw_size_of_user_data_out: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, psz_machine_name_: ?[*:0]const u16, dw_eap_type_id_: u32, pu_connection_param_: ?*usize) HRESULT {
                return @as(*const IEAPProviderConfig.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IEAPProviderConfig, @ptrCast(self)), psz_machine_name_, dw_eap_type_id_, pu_connection_param_);
            }
            pub inline fn uninitialize(self: *const T, dw_eap_type_id_: u32, u_connection_param_: usize) HRESULT {
                return @as(*const IEAPProviderConfig.VTable, @ptrCast(self.vtable)).Uninitialize(@as(*const IEAPProviderConfig, @ptrCast(self)), dw_eap_type_id_, u_connection_param_);
            }
            pub inline fn serverInvokeConfigUI(self: *const T, dw_eap_type_id_: u32, u_connection_param_: usize, h_wnd_: ?HWND, u_reserved1_: usize, u_reserved2_: usize) HRESULT {
                return @as(*const IEAPProviderConfig.VTable, @ptrCast(self.vtable)).ServerInvokeConfigUI(@as(*const IEAPProviderConfig, @ptrCast(self)), dw_eap_type_id_, u_connection_param_, h_wnd_, u_reserved1_, u_reserved2_);
            }
            pub inline fn routerInvokeConfigUI(self: *const T, dw_eap_type_id_: u32, u_connection_param_: usize, hwnd_parent_: ?HWND, dw_flags_: u32, p_connection_data_in_: [*:0]u8, dw_size_of_connection_data_in_: u32, pp_connection_data_out_: [*]?*u8, pdw_size_of_connection_data_out_: ?*u32) HRESULT {
                return @as(*const IEAPProviderConfig.VTable, @ptrCast(self.vtable)).RouterInvokeConfigUI(@as(*const IEAPProviderConfig, @ptrCast(self)), dw_eap_type_id_, u_connection_param_, hwnd_parent_, dw_flags_, p_connection_data_in_, dw_size_of_connection_data_in_, pp_connection_data_out_, pdw_size_of_connection_data_out_);
            }
            pub inline fn routerInvokeCredentialsUI(self: *const T, dw_eap_type_id_: u32, u_connection_param_: usize, hwnd_parent_: ?HWND, dw_flags_: u32, p_connection_data_in_: [*:0]u8, dw_size_of_connection_data_in_: u32, p_user_data_in_: [*:0]u8, dw_size_of_user_data_in_: u32, pp_user_data_out_: [*]?*u8, pdw_size_of_user_data_out_: ?*u32) HRESULT {
                return @as(*const IEAPProviderConfig.VTable, @ptrCast(self.vtable)).RouterInvokeCredentialsUI(@as(*const IEAPProviderConfig, @ptrCast(self)), dw_eap_type_id_, u_connection_param_, hwnd_parent_, dw_flags_, p_connection_data_in_, dw_size_of_connection_data_in_, p_user_data_in_, dw_size_of_user_data_in_, pp_user_data_out_, pdw_size_of_user_data_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEAPProviderConfig2_Value = Guid.initString("d565917a-85c4-4466-856e-671c3742ea9a");
pub const IID_IEAPProviderConfig2 = &IID_IEAPProviderConfig2_Value;
pub const IEAPProviderConfig2 = extern struct {
    pub const VTable = extern struct {
        base: IEAPProviderConfig.VTable,
        ServerInvokeConfigUI2: *const fn (
            self: *const IEAPProviderConfig2,
            dw_eap_type_id: u32,
            u_connection_param: usize,
            h_wnd: ?HWND,
            p_config_data_in: ?*const u8,
            dw_size_of_config_data_in: u32,
            pp_config_data_out: ?*?*u8,
            pdw_size_of_config_data_out: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlobalConfig: *const fn (
            self: *const IEAPProviderConfig2,
            dw_eap_type_id: u32,
            pp_config_data_out: ?*?*u8,
            pdw_size_of_config_data_out: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IEAPProviderConfig.MethodMixin(T);
            pub inline fn serverInvokeConfigUI2(self: *const T, dw_eap_type_id_: u32, u_connection_param_: usize, h_wnd_: ?HWND, p_config_data_in_: ?*const u8, dw_size_of_config_data_in_: u32, pp_config_data_out_: ?*?*u8, pdw_size_of_config_data_out_: ?*u32) HRESULT {
                return @as(*const IEAPProviderConfig2.VTable, @ptrCast(self.vtable)).ServerInvokeConfigUI2(@as(*const IEAPProviderConfig2, @ptrCast(self)), dw_eap_type_id_, u_connection_param_, h_wnd_, p_config_data_in_, dw_size_of_config_data_in_, pp_config_data_out_, pdw_size_of_config_data_out_);
            }
            pub inline fn getGlobalConfig(self: *const T, dw_eap_type_id_: u32, pp_config_data_out_: ?*?*u8, pdw_size_of_config_data_out_: ?*u32) HRESULT {
                return @as(*const IEAPProviderConfig2.VTable, @ptrCast(self.vtable)).GetGlobalConfig(@as(*const IEAPProviderConfig2, @ptrCast(self)), dw_eap_type_id_, pp_config_data_out_, pdw_size_of_config_data_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEAPProviderConfig3_Value = Guid.initString("b78ecd12-68bb-4f86-9bf0-8438dd3be982");
pub const IID_IEAPProviderConfig3 = &IID_IEAPProviderConfig3_Value;
pub const IEAPProviderConfig3 = extern struct {
    pub const VTable = extern struct {
        base: IEAPProviderConfig2.VTable,
        ServerInvokeCertificateConfigUI: *const fn (
            self: *const IEAPProviderConfig3,
            dw_eap_type_id: u32,
            u_connection_param: usize,
            h_wnd: ?HWND,
            p_config_data_in: ?*const u8,
            dw_size_of_config_data_in: u32,
            pp_config_data_out: ?*?*u8,
            pdw_size_of_config_data_out: ?*u32,
            u_reserved: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IEAPProviderConfig2.MethodMixin(T);
            pub inline fn serverInvokeCertificateConfigUI(self: *const T, dw_eap_type_id_: u32, u_connection_param_: usize, h_wnd_: ?HWND, p_config_data_in_: ?*const u8, dw_size_of_config_data_in_: u32, pp_config_data_out_: ?*?*u8, pdw_size_of_config_data_out_: ?*u32, u_reserved_: usize) HRESULT {
                return @as(*const IEAPProviderConfig3.VTable, @ptrCast(self.vtable)).ServerInvokeCertificateConfigUI(@as(*const IEAPProviderConfig3, @ptrCast(self)), dw_eap_type_id_, u_connection_param_, h_wnd_, p_config_data_in_, dw_size_of_config_data_in_, pp_config_data_out_, pdw_size_of_config_data_out_, u_reserved_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const EAP_TYPE = extern struct {
    type: u8,
    dwVendorId: u32,
    dwVendorType: u32,
};

pub const EAP_METHOD_TYPE = extern struct {
    eapType: EAP_TYPE,
    dwAuthorId: u32,
};

pub const EAP_METHOD_INFO = extern struct {
    eaptype: EAP_METHOD_TYPE,
    pwszAuthorName: ?PWSTR,
    pwszFriendlyName: ?PWSTR,
    eapProperties: u32,
    pInnerMethodInfo: ?*EAP_METHOD_INFO,
};

pub const EAP_METHOD_INFO_EX = extern struct {
    eaptype: EAP_METHOD_TYPE,
    pwszAuthorName: ?PWSTR,
    pwszFriendlyName: ?PWSTR,
    eapProperties: u32,
    pInnerMethodInfoArray: ?*EAP_METHOD_INFO_ARRAY_EX,
};

pub const EAP_METHOD_INFO_ARRAY = extern struct {
    dwNumberOfMethods: u32,
    pEapMethods: ?*EAP_METHOD_INFO,
};

pub const EAP_METHOD_INFO_ARRAY_EX = extern struct {
    dwNumberOfMethods: u32,
    pEapMethods: ?*EAP_METHOD_INFO_EX,
};

pub const EAP_ERROR = extern struct {
    dwWinError: u32,
    type: EAP_METHOD_TYPE,
    dwReasonCode: u32,
    rootCauseGuid: Guid,
    repairGuid: Guid,
    helpLinkGuid: Guid,
    pRootCauseString: ?PWSTR,
    pRepairString: ?PWSTR,
};

pub const EAP_ATTRIBUTE_TYPE = enum(i32) {
    Minimum = 0,
    UserName = 1,
    UserPassword = 2,
    MD5CHAPPassword = 3,
    NASIPAddress = 4,
    NASPort = 5,
    ServiceType = 6,
    FramedProtocol = 7,
    FramedIPAddress = 8,
    FramedIPNetmask = 9,
    FramedRouting = 10,
    FilterId = 11,
    FramedMTU = 12,
    FramedCompression = 13,
    LoginIPHost = 14,
    LoginService = 15,
    LoginTCPPort = 16,
    Unassigned17 = 17,
    ReplyMessage = 18,
    CallbackNumber = 19,
    CallbackId = 20,
    Unassigned21 = 21,
    FramedRoute = 22,
    FramedIPXNetwork = 23,
    State = 24,
    Class = 25,
    VendorSpecific = 26,
    SessionTimeout = 27,
    IdleTimeout = 28,
    TerminationAction = 29,
    CalledStationId = 30,
    CallingStationId = 31,
    NASIdentifier = 32,
    ProxyState = 33,
    LoginLATService = 34,
    LoginLATNode = 35,
    LoginLATGroup = 36,
    FramedAppleTalkLink = 37,
    FramedAppleTalkNetwork = 38,
    FramedAppleTalkZone = 39,
    AcctStatusType = 40,
    AcctDelayTime = 41,
    AcctInputOctets = 42,
    AcctOutputOctets = 43,
    AcctSessionId = 44,
    AcctAuthentic = 45,
    AcctSessionTime = 46,
    AcctInputPackets = 47,
    AcctOutputPackets = 48,
    AcctTerminateCause = 49,
    AcctMultiSessionId = 50,
    AcctLinkCount = 51,
    AcctEventTimeStamp = 55,
    MD5CHAPChallenge = 60,
    NASPortType = 61,
    PortLimit = 62,
    LoginLATPort = 63,
    TunnelType = 64,
    TunnelMediumType = 65,
    TunnelClientEndpoint = 66,
    TunnelServerEndpoint = 67,
    ARAPPassword = 70,
    ARAPFeatures = 71,
    ARAPZoneAccess = 72,
    ARAPSecurity = 73,
    ARAPSecurityData = 74,
    PasswordRetry = 75,
    Prompt = 76,
    ConnectInfo = 77,
    ConfigurationToken = 78,
    EAPMessage = 79,
    Signature = 80,
    ARAPChallengeResponse = 84,
    AcctInterimInterval = 85,
    NASIPv6Address = 95,
    FramedInterfaceId = 96,
    FramedIPv6Prefix = 97,
    LoginIPv6Host = 98,
    FramedIPv6Route = 99,
    FramedIPv6Pool = 100,
    ARAPGuestLogon = 8096,
    CertificateOID = 8097,
    EAPConfiguration = 8098,
    PEAPEmbeddedEAPTypeId = 8099,
    PEAPFastRoamedSession = 8100,
    // FastRoamedSession = 8100, this enum value conflicts with PEAPFastRoamedSession
    EAPTLV = 8102,
    CredentialsChanged = 8103,
    InnerEapMethodType = 8104,
    ClearTextPassword = 8107,
    QuarantineSoH = 8150,
    CertificateThumbprint = 8250,
    PeerId = 9000,
    ServerId = 9001,
    MethodId = 9002,
    EMSK = 9003,
    SessionId = 9004,
    Reserved = -1,
};
pub const eatMinimum = EAP_ATTRIBUTE_TYPE.Minimum;
pub const eatUserName = EAP_ATTRIBUTE_TYPE.UserName;
pub const eatUserPassword = EAP_ATTRIBUTE_TYPE.UserPassword;
pub const eatMD5CHAPPassword = EAP_ATTRIBUTE_TYPE.MD5CHAPPassword;
pub const eatNASIPAddress = EAP_ATTRIBUTE_TYPE.NASIPAddress;
pub const eatNASPort = EAP_ATTRIBUTE_TYPE.NASPort;
pub const eatServiceType = EAP_ATTRIBUTE_TYPE.ServiceType;
pub const eatFramedProtocol = EAP_ATTRIBUTE_TYPE.FramedProtocol;
pub const eatFramedIPAddress = EAP_ATTRIBUTE_TYPE.FramedIPAddress;
pub const eatFramedIPNetmask = EAP_ATTRIBUTE_TYPE.FramedIPNetmask;
pub const eatFramedRouting = EAP_ATTRIBUTE_TYPE.FramedRouting;
pub const eatFilterId = EAP_ATTRIBUTE_TYPE.FilterId;
pub const eatFramedMTU = EAP_ATTRIBUTE_TYPE.FramedMTU;
pub const eatFramedCompression = EAP_ATTRIBUTE_TYPE.FramedCompression;
pub const eatLoginIPHost = EAP_ATTRIBUTE_TYPE.LoginIPHost;
pub const eatLoginService = EAP_ATTRIBUTE_TYPE.LoginService;
pub const eatLoginTCPPort = EAP_ATTRIBUTE_TYPE.LoginTCPPort;
pub const eatUnassigned17 = EAP_ATTRIBUTE_TYPE.Unassigned17;
pub const eatReplyMessage = EAP_ATTRIBUTE_TYPE.ReplyMessage;
pub const eatCallbackNumber = EAP_ATTRIBUTE_TYPE.CallbackNumber;
pub const eatCallbackId = EAP_ATTRIBUTE_TYPE.CallbackId;
pub const eatUnassigned21 = EAP_ATTRIBUTE_TYPE.Unassigned21;
pub const eatFramedRoute = EAP_ATTRIBUTE_TYPE.FramedRoute;
pub const eatFramedIPXNetwork = EAP_ATTRIBUTE_TYPE.FramedIPXNetwork;
pub const eatState = EAP_ATTRIBUTE_TYPE.State;
pub const eatClass = EAP_ATTRIBUTE_TYPE.Class;
pub const eatVendorSpecific = EAP_ATTRIBUTE_TYPE.VendorSpecific;
pub const eatSessionTimeout = EAP_ATTRIBUTE_TYPE.SessionTimeout;
pub const eatIdleTimeout = EAP_ATTRIBUTE_TYPE.IdleTimeout;
pub const eatTerminationAction = EAP_ATTRIBUTE_TYPE.TerminationAction;
pub const eatCalledStationId = EAP_ATTRIBUTE_TYPE.CalledStationId;
pub const eatCallingStationId = EAP_ATTRIBUTE_TYPE.CallingStationId;
pub const eatNASIdentifier = EAP_ATTRIBUTE_TYPE.NASIdentifier;
pub const eatProxyState = EAP_ATTRIBUTE_TYPE.ProxyState;
pub const eatLoginLATService = EAP_ATTRIBUTE_TYPE.LoginLATService;
pub const eatLoginLATNode = EAP_ATTRIBUTE_TYPE.LoginLATNode;
pub const eatLoginLATGroup = EAP_ATTRIBUTE_TYPE.LoginLATGroup;
pub const eatFramedAppleTalkLink = EAP_ATTRIBUTE_TYPE.FramedAppleTalkLink;
pub const eatFramedAppleTalkNetwork = EAP_ATTRIBUTE_TYPE.FramedAppleTalkNetwork;
pub const eatFramedAppleTalkZone = EAP_ATTRIBUTE_TYPE.FramedAppleTalkZone;
pub const eatAcctStatusType = EAP_ATTRIBUTE_TYPE.AcctStatusType;
pub const eatAcctDelayTime = EAP_ATTRIBUTE_TYPE.AcctDelayTime;
pub const eatAcctInputOctets = EAP_ATTRIBUTE_TYPE.AcctInputOctets;
pub const eatAcctOutputOctets = EAP_ATTRIBUTE_TYPE.AcctOutputOctets;
pub const eatAcctSessionId = EAP_ATTRIBUTE_TYPE.AcctSessionId;
pub const eatAcctAuthentic = EAP_ATTRIBUTE_TYPE.AcctAuthentic;
pub const eatAcctSessionTime = EAP_ATTRIBUTE_TYPE.AcctSessionTime;
pub const eatAcctInputPackets = EAP_ATTRIBUTE_TYPE.AcctInputPackets;
pub const eatAcctOutputPackets = EAP_ATTRIBUTE_TYPE.AcctOutputPackets;
pub const eatAcctTerminateCause = EAP_ATTRIBUTE_TYPE.AcctTerminateCause;
pub const eatAcctMultiSessionId = EAP_ATTRIBUTE_TYPE.AcctMultiSessionId;
pub const eatAcctLinkCount = EAP_ATTRIBUTE_TYPE.AcctLinkCount;
pub const eatAcctEventTimeStamp = EAP_ATTRIBUTE_TYPE.AcctEventTimeStamp;
pub const eatMD5CHAPChallenge = EAP_ATTRIBUTE_TYPE.MD5CHAPChallenge;
pub const eatNASPortType = EAP_ATTRIBUTE_TYPE.NASPortType;
pub const eatPortLimit = EAP_ATTRIBUTE_TYPE.PortLimit;
pub const eatLoginLATPort = EAP_ATTRIBUTE_TYPE.LoginLATPort;
pub const eatTunnelType = EAP_ATTRIBUTE_TYPE.TunnelType;
pub const eatTunnelMediumType = EAP_ATTRIBUTE_TYPE.TunnelMediumType;
pub const eatTunnelClientEndpoint = EAP_ATTRIBUTE_TYPE.TunnelClientEndpoint;
pub const eatTunnelServerEndpoint = EAP_ATTRIBUTE_TYPE.TunnelServerEndpoint;
pub const eatARAPPassword = EAP_ATTRIBUTE_TYPE.ARAPPassword;
pub const eatARAPFeatures = EAP_ATTRIBUTE_TYPE.ARAPFeatures;
pub const eatARAPZoneAccess = EAP_ATTRIBUTE_TYPE.ARAPZoneAccess;
pub const eatARAPSecurity = EAP_ATTRIBUTE_TYPE.ARAPSecurity;
pub const eatARAPSecurityData = EAP_ATTRIBUTE_TYPE.ARAPSecurityData;
pub const eatPasswordRetry = EAP_ATTRIBUTE_TYPE.PasswordRetry;
pub const eatPrompt = EAP_ATTRIBUTE_TYPE.Prompt;
pub const eatConnectInfo = EAP_ATTRIBUTE_TYPE.ConnectInfo;
pub const eatConfigurationToken = EAP_ATTRIBUTE_TYPE.ConfigurationToken;
pub const eatEAPMessage = EAP_ATTRIBUTE_TYPE.EAPMessage;
pub const eatSignature = EAP_ATTRIBUTE_TYPE.Signature;
pub const eatARAPChallengeResponse = EAP_ATTRIBUTE_TYPE.ARAPChallengeResponse;
pub const eatAcctInterimInterval = EAP_ATTRIBUTE_TYPE.AcctInterimInterval;
pub const eatNASIPv6Address = EAP_ATTRIBUTE_TYPE.NASIPv6Address;
pub const eatFramedInterfaceId = EAP_ATTRIBUTE_TYPE.FramedInterfaceId;
pub const eatFramedIPv6Prefix = EAP_ATTRIBUTE_TYPE.FramedIPv6Prefix;
pub const eatLoginIPv6Host = EAP_ATTRIBUTE_TYPE.LoginIPv6Host;
pub const eatFramedIPv6Route = EAP_ATTRIBUTE_TYPE.FramedIPv6Route;
pub const eatFramedIPv6Pool = EAP_ATTRIBUTE_TYPE.FramedIPv6Pool;
pub const eatARAPGuestLogon = EAP_ATTRIBUTE_TYPE.ARAPGuestLogon;
pub const eatCertificateOID = EAP_ATTRIBUTE_TYPE.CertificateOID;
pub const eatEAPConfiguration = EAP_ATTRIBUTE_TYPE.EAPConfiguration;
pub const eatPEAPEmbeddedEAPTypeId = EAP_ATTRIBUTE_TYPE.PEAPEmbeddedEAPTypeId;
pub const eatPEAPFastRoamedSession = EAP_ATTRIBUTE_TYPE.PEAPFastRoamedSession;
pub const eatFastRoamedSession = EAP_ATTRIBUTE_TYPE.PEAPFastRoamedSession;
pub const eatEAPTLV = EAP_ATTRIBUTE_TYPE.EAPTLV;
pub const eatCredentialsChanged = EAP_ATTRIBUTE_TYPE.CredentialsChanged;
pub const eatInnerEapMethodType = EAP_ATTRIBUTE_TYPE.InnerEapMethodType;
pub const eatClearTextPassword = EAP_ATTRIBUTE_TYPE.ClearTextPassword;
pub const eatQuarantineSoH = EAP_ATTRIBUTE_TYPE.QuarantineSoH;
pub const eatCertificateThumbprint = EAP_ATTRIBUTE_TYPE.CertificateThumbprint;
pub const eatPeerId = EAP_ATTRIBUTE_TYPE.PeerId;
pub const eatServerId = EAP_ATTRIBUTE_TYPE.ServerId;
pub const eatMethodId = EAP_ATTRIBUTE_TYPE.MethodId;
pub const eatEMSK = EAP_ATTRIBUTE_TYPE.EMSK;
pub const eatSessionId = EAP_ATTRIBUTE_TYPE.SessionId;
pub const eatReserved = EAP_ATTRIBUTE_TYPE.Reserved;

pub const EAP_ATTRIBUTE = extern struct {
    eaType: EAP_ATTRIBUTE_TYPE,
    dwLength: u32,
    pValue: ?*u8,
};

pub const EAP_ATTRIBUTES = extern struct {
    dwNumberOfAttributes: u32,
    pAttribs: ?*EAP_ATTRIBUTE,
};

pub const EAP_CONFIG_INPUT_FIELD_TYPE = enum(i32) {
    InputUsername = 0,
    InputPassword = 1,
    InputNetworkUsername = 2,
    InputNetworkPassword = 3,
    InputPin = 4,
    InputPSK = 5,
    InputEdit = 6,
    SmartCardUsername = 7,
    SmartCardError = 8,
};
pub const EapConfigInputUsername = EAP_CONFIG_INPUT_FIELD_TYPE.InputUsername;
pub const EapConfigInputPassword = EAP_CONFIG_INPUT_FIELD_TYPE.InputPassword;
pub const EapConfigInputNetworkUsername = EAP_CONFIG_INPUT_FIELD_TYPE.InputNetworkUsername;
pub const EapConfigInputNetworkPassword = EAP_CONFIG_INPUT_FIELD_TYPE.InputNetworkPassword;
pub const EapConfigInputPin = EAP_CONFIG_INPUT_FIELD_TYPE.InputPin;
pub const EapConfigInputPSK = EAP_CONFIG_INPUT_FIELD_TYPE.InputPSK;
pub const EapConfigInputEdit = EAP_CONFIG_INPUT_FIELD_TYPE.InputEdit;
pub const EapConfigSmartCardUsername = EAP_CONFIG_INPUT_FIELD_TYPE.SmartCardUsername;
pub const EapConfigSmartCardError = EAP_CONFIG_INPUT_FIELD_TYPE.SmartCardError;

pub const EAP_CONFIG_INPUT_FIELD_DATA = extern struct {
    dwSize: u32,
    Type: EAP_CONFIG_INPUT_FIELD_TYPE,
    dwFlagProps: u32,
    pwszLabel: ?PWSTR,
    pwszData: ?PWSTR,
    dwMinDataLength: u32,
    dwMaxDataLength: u32,
};

pub const EAP_CONFIG_INPUT_FIELD_ARRAY = extern struct {
    dwVersion: u32,
    dwNumberOfFields: u32,
    pFields: ?*EAP_CONFIG_INPUT_FIELD_DATA,
};

pub const EAP_INTERACTIVE_UI_DATA_TYPE = enum(i32) {
    Req = 0,
    Resp = 1,
    ExpiryReq = 2,
    ExpiryResp = 3,
    LogonReq = 4,
    LogonResp = 5,
};
pub const EapCredReq = EAP_INTERACTIVE_UI_DATA_TYPE.Req;
pub const EapCredResp = EAP_INTERACTIVE_UI_DATA_TYPE.Resp;
pub const EapCredExpiryReq = EAP_INTERACTIVE_UI_DATA_TYPE.ExpiryReq;
pub const EapCredExpiryResp = EAP_INTERACTIVE_UI_DATA_TYPE.ExpiryResp;
pub const EapCredLogonReq = EAP_INTERACTIVE_UI_DATA_TYPE.LogonReq;
pub const EapCredLogonResp = EAP_INTERACTIVE_UI_DATA_TYPE.LogonResp;

pub const EAP_CRED_EXPIRY_REQ = extern struct {
    curCreds: EAP_CONFIG_INPUT_FIELD_ARRAY,
    newCreds: EAP_CONFIG_INPUT_FIELD_ARRAY,
};

pub const EAP_UI_DATA_FORMAT = extern union {
    credData: ?*EAP_CONFIG_INPUT_FIELD_ARRAY,
    credExpiryData: ?*EAP_CRED_EXPIRY_REQ,
    credLogonData: ?*EAP_CONFIG_INPUT_FIELD_ARRAY,
};

pub const EAP_INTERACTIVE_UI_DATA = extern struct {
    dwVersion: u32,
    dwSize: u32,
    dwDataType: EAP_INTERACTIVE_UI_DATA_TYPE,
    cbUiData: u32,
    pbUiData: EAP_UI_DATA_FORMAT,
};

pub const EAP_METHOD_PROPERTY_TYPE = enum(i32) {
    PropCipherSuiteNegotiation = 0,
    PropMutualAuth = 1,
    PropIntegrity = 2,
    PropReplayProtection = 3,
    PropConfidentiality = 4,
    PropKeyDerivation = 5,
    PropKeyStrength64 = 6,
    PropKeyStrength128 = 7,
    PropKeyStrength256 = 8,
    PropKeyStrength512 = 9,
    PropKeyStrength1024 = 10,
    PropDictionaryAttackResistance = 11,
    PropFastReconnect = 12,
    PropCryptoBinding = 13,
    PropSessionIndependence = 14,
    PropFragmentation = 15,
    PropChannelBinding = 16,
    PropNap = 17,
    PropStandalone = 18,
    PropMppeEncryption = 19,
    PropTunnelMethod = 20,
    PropSupportsConfig = 21,
    PropCertifiedMethod = 22,
    PropHiddenMethod = 23,
    PropMachineAuth = 24,
    PropUserAuth = 25,
    PropIdentityPrivacy = 26,
    PropMethodChaining = 27,
    PropSharedStateEquivalence = 28,
    LegacyMethodPropertyFlag = 31,
    PropVendorSpecific = 255,
};
pub const emptPropCipherSuiteNegotiation = EAP_METHOD_PROPERTY_TYPE.PropCipherSuiteNegotiation;
pub const emptPropMutualAuth = EAP_METHOD_PROPERTY_TYPE.PropMutualAuth;
pub const emptPropIntegrity = EAP_METHOD_PROPERTY_TYPE.PropIntegrity;
pub const emptPropReplayProtection = EAP_METHOD_PROPERTY_TYPE.PropReplayProtection;
pub const emptPropConfidentiality = EAP_METHOD_PROPERTY_TYPE.PropConfidentiality;
pub const emptPropKeyDerivation = EAP_METHOD_PROPERTY_TYPE.PropKeyDerivation;
pub const emptPropKeyStrength64 = EAP_METHOD_PROPERTY_TYPE.PropKeyStrength64;
pub const emptPropKeyStrength128 = EAP_METHOD_PROPERTY_TYPE.PropKeyStrength128;
pub const emptPropKeyStrength256 = EAP_METHOD_PROPERTY_TYPE.PropKeyStrength256;
pub const emptPropKeyStrength512 = EAP_METHOD_PROPERTY_TYPE.PropKeyStrength512;
pub const emptPropKeyStrength1024 = EAP_METHOD_PROPERTY_TYPE.PropKeyStrength1024;
pub const emptPropDictionaryAttackResistance = EAP_METHOD_PROPERTY_TYPE.PropDictionaryAttackResistance;
pub const emptPropFastReconnect = EAP_METHOD_PROPERTY_TYPE.PropFastReconnect;
pub const emptPropCryptoBinding = EAP_METHOD_PROPERTY_TYPE.PropCryptoBinding;
pub const emptPropSessionIndependence = EAP_METHOD_PROPERTY_TYPE.PropSessionIndependence;
pub const emptPropFragmentation = EAP_METHOD_PROPERTY_TYPE.PropFragmentation;
pub const emptPropChannelBinding = EAP_METHOD_PROPERTY_TYPE.PropChannelBinding;
pub const emptPropNap = EAP_METHOD_PROPERTY_TYPE.PropNap;
pub const emptPropStandalone = EAP_METHOD_PROPERTY_TYPE.PropStandalone;
pub const emptPropMppeEncryption = EAP_METHOD_PROPERTY_TYPE.PropMppeEncryption;
pub const emptPropTunnelMethod = EAP_METHOD_PROPERTY_TYPE.PropTunnelMethod;
pub const emptPropSupportsConfig = EAP_METHOD_PROPERTY_TYPE.PropSupportsConfig;
pub const emptPropCertifiedMethod = EAP_METHOD_PROPERTY_TYPE.PropCertifiedMethod;
pub const emptPropHiddenMethod = EAP_METHOD_PROPERTY_TYPE.PropHiddenMethod;
pub const emptPropMachineAuth = EAP_METHOD_PROPERTY_TYPE.PropMachineAuth;
pub const emptPropUserAuth = EAP_METHOD_PROPERTY_TYPE.PropUserAuth;
pub const emptPropIdentityPrivacy = EAP_METHOD_PROPERTY_TYPE.PropIdentityPrivacy;
pub const emptPropMethodChaining = EAP_METHOD_PROPERTY_TYPE.PropMethodChaining;
pub const emptPropSharedStateEquivalence = EAP_METHOD_PROPERTY_TYPE.PropSharedStateEquivalence;
pub const emptLegacyMethodPropertyFlag = EAP_METHOD_PROPERTY_TYPE.LegacyMethodPropertyFlag;
pub const emptPropVendorSpecific = EAP_METHOD_PROPERTY_TYPE.PropVendorSpecific;

pub const EAP_METHOD_PROPERTY_VALUE_TYPE = enum(i32) {
    Bool = 0,
    Dword = 1,
    String = 2,
};
pub const empvtBool = EAP_METHOD_PROPERTY_VALUE_TYPE.Bool;
pub const empvtDword = EAP_METHOD_PROPERTY_VALUE_TYPE.Dword;
pub const empvtString = EAP_METHOD_PROPERTY_VALUE_TYPE.String;

pub const EAP_METHOD_PROPERTY_VALUE_BOOL = extern struct {
    length: u32,
    value: BOOL,
};

pub const EAP_METHOD_PROPERTY_VALUE_DWORD = extern struct {
    length: u32,
    value: u32,
};

pub const EAP_METHOD_PROPERTY_VALUE_STRING = extern struct {
    length: u32,
    value: ?*u8,
};

pub const EAP_METHOD_PROPERTY_VALUE = extern union {
    empvBool: EAP_METHOD_PROPERTY_VALUE_BOOL,
    empvDword: EAP_METHOD_PROPERTY_VALUE_DWORD,
    empvString: EAP_METHOD_PROPERTY_VALUE_STRING,
};

pub const EAP_METHOD_PROPERTY = extern struct {
    eapMethodPropertyType: EAP_METHOD_PROPERTY_TYPE,
    eapMethodPropertyValueType: EAP_METHOD_PROPERTY_VALUE_TYPE,
    eapMethodPropertyValue: EAP_METHOD_PROPERTY_VALUE,
};

pub const EAP_METHOD_PROPERTY_ARRAY = extern struct {
    dwNumberOfProperties: u32,
    pMethodProperty: ?*EAP_METHOD_PROPERTY,
};

pub const EAPHOST_IDENTITY_UI_PARAMS = extern struct {
    eapMethodType: EAP_METHOD_TYPE,
    dwFlags: u32,
    dwSizeofConnectionData: u32,
    pConnectionData: ?*u8,
    dwSizeofUserData: u32,
    pUserData: ?*u8,
    dwSizeofUserDataOut: u32,
    pUserDataOut: ?*u8,
    pwszIdentity: ?PWSTR,
    dwError: u32,
    pEapError: ?*EAP_ERROR,
};

pub const EAPHOST_INTERACTIVE_UI_PARAMS = extern struct {
    dwSizeofContextData: u32,
    pContextData: ?*u8,
    dwSizeofInteractiveUIData: u32,
    pInteractiveUIData: ?*u8,
    dwError: u32,
    pEapError: ?*EAP_ERROR,
};

pub const EapCredentialType = enum(i32) {
    EMPTY_CREDENTIAL = 0,
    USERNAME_PASSWORD_CREDENTIAL = 1,
    WINLOGON_CREDENTIAL = 2,
    CERTIFICATE_CREDENTIAL = 3,
    SIM_CREDENTIAL = 4,
};
pub const EAP_EMPTY_CREDENTIAL = EapCredentialType.EMPTY_CREDENTIAL;
pub const EAP_USERNAME_PASSWORD_CREDENTIAL = EapCredentialType.USERNAME_PASSWORD_CREDENTIAL;
pub const EAP_WINLOGON_CREDENTIAL = EapCredentialType.WINLOGON_CREDENTIAL;
pub const EAP_CERTIFICATE_CREDENTIAL = EapCredentialType.CERTIFICATE_CREDENTIAL;
pub const EAP_SIM_CREDENTIAL = EapCredentialType.SIM_CREDENTIAL;

pub const EapUsernamePasswordCredential = extern struct {
    username: ?PWSTR,
    password: ?PWSTR,
};

pub const EapCertificateCredential = extern struct {
    certHash: [20]u8,
    password: ?PWSTR,
};

pub const EapSimCredential = extern struct {
    iccID: ?PWSTR,
};

pub const EapCredentialTypeData = extern union {
    username_password: EapUsernamePasswordCredential,
    certificate: EapCertificateCredential,
    sim: EapSimCredential,
};

pub const EapCredential = extern struct {
    credType: EapCredentialType,
    credData: EapCredentialTypeData,
};

pub const EapHostPeerMethodResultReason = enum(i32) {
    AltSuccessReceived = 1,
    Timeout = 2,
    FromMethod = 3,
};
pub const EapHostPeerMethodResultAltSuccessReceived = EapHostPeerMethodResultReason.AltSuccessReceived;
pub const EapHostPeerMethodResultTimeout = EapHostPeerMethodResultReason.Timeout;
pub const EapHostPeerMethodResultFromMethod = EapHostPeerMethodResultReason.FromMethod;

pub const EapHostPeerResponseAction = enum(i32) {
    Discard = 0,
    Send = 1,
    Result = 2,
    InvokeUi = 3,
    Respond = 4,
    StartAuthentication = 5,
    None = 6,
};
pub const EapHostPeerResponseDiscard = EapHostPeerResponseAction.Discard;
pub const EapHostPeerResponseSend = EapHostPeerResponseAction.Send;
pub const EapHostPeerResponseResult = EapHostPeerResponseAction.Result;
pub const EapHostPeerResponseInvokeUi = EapHostPeerResponseAction.InvokeUi;
pub const EapHostPeerResponseRespond = EapHostPeerResponseAction.Respond;
pub const EapHostPeerResponseStartAuthentication = EapHostPeerResponseAction.StartAuthentication;
pub const EapHostPeerResponseNone = EapHostPeerResponseAction.None;

pub const EapHostPeerAuthParams = enum(i32) {
    PeerAuthStatus = 1,
    PeerIdentity = 2,
    PeerIdentityExtendedInfo = 3,
    NapInfo = 4,
};
pub const EapHostPeerAuthStatus = EapHostPeerAuthParams.PeerAuthStatus;
pub const EapHostPeerIdentity = EapHostPeerAuthParams.PeerIdentity;
pub const EapHostPeerIdentityExtendedInfo = EapHostPeerAuthParams.PeerIdentityExtendedInfo;
pub const EapHostNapInfo = EapHostPeerAuthParams.NapInfo;

pub const EAPHOST_AUTH_STATUS = enum(i32) {
    InvalidSession = 0,
    AuthNotStarted = 1,
    AuthIdentityExchange = 2,
    AuthNegotiatingType = 3,
    AuthInProgress = 4,
    AuthSucceeded = 5,
    AuthFailed = 6,
};
pub const EapHostInvalidSession = EAPHOST_AUTH_STATUS.InvalidSession;
pub const EapHostAuthNotStarted = EAPHOST_AUTH_STATUS.AuthNotStarted;
pub const EapHostAuthIdentityExchange = EAPHOST_AUTH_STATUS.AuthIdentityExchange;
pub const EapHostAuthNegotiatingType = EAPHOST_AUTH_STATUS.AuthNegotiatingType;
pub const EapHostAuthInProgress = EAPHOST_AUTH_STATUS.AuthInProgress;
pub const EapHostAuthSucceeded = EAPHOST_AUTH_STATUS.AuthSucceeded;
pub const EapHostAuthFailed = EAPHOST_AUTH_STATUS.AuthFailed;

pub const EAPHOST_AUTH_INFO = extern struct {
    status: EAPHOST_AUTH_STATUS,
    dwErrorCode: u32,
    dwReasonCode: u32,
};

pub const ISOLATION_STATE = enum(i32) {
    UNKNOWN = 0,
    NOT_RESTRICTED = 1,
    IN_PROBATION = 2,
    RESTRICTED_ACCESS = 3,
};
pub const ISOLATION_STATE_UNKNOWN = ISOLATION_STATE.UNKNOWN;
pub const ISOLATION_STATE_NOT_RESTRICTED = ISOLATION_STATE.NOT_RESTRICTED;
pub const ISOLATION_STATE_IN_PROBATION = ISOLATION_STATE.IN_PROBATION;
pub const ISOLATION_STATE_RESTRICTED_ACCESS = ISOLATION_STATE.RESTRICTED_ACCESS;

pub const EapHostPeerMethodResult = extern struct {
    fIsSuccess: BOOL,
    dwFailureReasonCode: u32,
    fSaveConnectionData: BOOL,
    dwSizeofConnectionData: u32,
    pConnectionData: ?*u8,
    fSaveUserData: BOOL,
    dwSizeofUserData: u32,
    pUserData: ?*u8,
    pAttribArray: ?*EAP_ATTRIBUTES,
    isolationState: ISOLATION_STATE,
    pEapMethodInfo: ?*EAP_METHOD_INFO,
    pEapError: ?*EAP_ERROR,
};

pub const EapPacket = extern struct {
    Code: u8,
    Id: u8,
    Length: [2]u8,
    Data: [1]u8,
};

pub const EapCode = enum(i32) {
    Minimum = 1,
    // Request = 1, this enum value conflicts with Minimum
    Response = 2,
    Success = 3,
    Failure = 4,
    // Maximum = 4, this enum value conflicts with Failure
};
pub const EapCodeMinimum = EapCode.Minimum;
pub const EapCodeRequest = EapCode.Minimum;
pub const EapCodeResponse = EapCode.Response;
pub const EapCodeSuccess = EapCode.Success;
pub const EapCodeFailure = EapCode.Failure;
pub const EapCodeMaximum = EapCode.Failure;

pub const NotificationHandler = *const fn (
    connection_id: Guid,
    p_context_data: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const EAP_METHOD_AUTHENTICATOR_RESPONSE_ACTION = enum(i32) {
    DISCARD = 0,
    SEND = 1,
    RESULT = 2,
    RESPOND = 3,
    AUTHENTICATE = 4,
    HANDLE_IDENTITY = 5,
};
pub const EAP_METHOD_AUTHENTICATOR_RESPONSE_DISCARD = EAP_METHOD_AUTHENTICATOR_RESPONSE_ACTION.DISCARD;
pub const EAP_METHOD_AUTHENTICATOR_RESPONSE_SEND = EAP_METHOD_AUTHENTICATOR_RESPONSE_ACTION.SEND;
pub const EAP_METHOD_AUTHENTICATOR_RESPONSE_RESULT = EAP_METHOD_AUTHENTICATOR_RESPONSE_ACTION.RESULT;
pub const EAP_METHOD_AUTHENTICATOR_RESPONSE_RESPOND = EAP_METHOD_AUTHENTICATOR_RESPONSE_ACTION.RESPOND;
pub const EAP_METHOD_AUTHENTICATOR_RESPONSE_AUTHENTICATE = EAP_METHOD_AUTHENTICATOR_RESPONSE_ACTION.AUTHENTICATE;
pub const EAP_METHOD_AUTHENTICATOR_RESPONSE_HANDLE_IDENTITY = EAP_METHOD_AUTHENTICATOR_RESPONSE_ACTION.HANDLE_IDENTITY;

pub const EAP_METHOD_AUTHENTICATOR_RESULT = extern struct {
    fIsSuccess: BOOL,
    dwFailureReason: u32,
    pAuthAttribs: ?*EAP_ATTRIBUTES,
};

pub const EapPeerMethodResponseAction = enum(i32) {
    Discard = 0,
    Send = 1,
    Result = 2,
    InvokeUI = 3,
    Respond = 4,
    None = 5,
};
pub const EapPeerMethodResponseActionDiscard = EapPeerMethodResponseAction.Discard;
pub const EapPeerMethodResponseActionSend = EapPeerMethodResponseAction.Send;
pub const EapPeerMethodResponseActionResult = EapPeerMethodResponseAction.Result;
pub const EapPeerMethodResponseActionInvokeUI = EapPeerMethodResponseAction.InvokeUI;
pub const EapPeerMethodResponseActionRespond = EapPeerMethodResponseAction.Respond;
pub const EapPeerMethodResponseActionNone = EapPeerMethodResponseAction.None;

pub const EapPeerMethodOutput = extern struct {
    action: EapPeerMethodResponseAction,
    fAllowNotifications: BOOL,
};

pub const EapPeerMethodResultReason = enum(i32) {
    Unknown = 1,
    Success = 2,
    Failure = 3,
};
pub const EapPeerMethodResultUnknown = EapPeerMethodResultReason.Unknown;
pub const EapPeerMethodResultSuccess = EapPeerMethodResultReason.Success;
pub const EapPeerMethodResultFailure = EapPeerMethodResultReason.Failure;

pub const EapPeerMethodResult = extern struct {
    fIsSuccess: BOOL,
    dwFailureReasonCode: u32,
    fSaveConnectionData: BOOL,
    dwSizeofConnectionData: u32,
    pConnectionData: ?*u8,
    fSaveUserData: BOOL,
    dwSizeofUserData: u32,
    pUserData: ?*u8,
    pAttribArray: ?*EAP_ATTRIBUTES,
    pEapError: ?*EAP_ERROR,
    pNgcKerbTicket: ?*NgcTicketContext,
    fSaveToCredMan: BOOL,
};

pub const EAP_PEER_METHOD_ROUTINES = extern struct {
    dwVersion: u32,
    pEapType: ?*EAP_TYPE,
    EapPeerInitialize: isize,
    EapPeerGetIdentity: isize,
    EapPeerBeginSession: isize,
    EapPeerSetCredentials: isize,
    EapPeerProcessRequestPacket: isize,
    EapPeerGetResponsePacket: isize,
    EapPeerGetResult: isize,
    EapPeerGetUIContext: isize,
    EapPeerSetUIContext: isize,
    EapPeerGetResponseAttributes: isize,
    EapPeerSetResponseAttributes: isize,
    EapPeerEndSession: isize,
    EapPeerShutdown: isize,
};

pub const EAP_AUTHENTICATOR_SEND_TIMEOUT = enum(i32) {
    NONE = 0,
    BASIC = 1,
    INTERACTIVE = 2,
};
pub const EAP_AUTHENTICATOR_SEND_TIMEOUT_NONE = EAP_AUTHENTICATOR_SEND_TIMEOUT.NONE;
pub const EAP_AUTHENTICATOR_SEND_TIMEOUT_BASIC = EAP_AUTHENTICATOR_SEND_TIMEOUT.BASIC;
pub const EAP_AUTHENTICATOR_SEND_TIMEOUT_INTERACTIVE = EAP_AUTHENTICATOR_SEND_TIMEOUT.INTERACTIVE;

pub const EAP_AUTHENTICATOR_METHOD_ROUTINES = extern struct {
    dwSizeInBytes: u32,
    pEapType: ?*EAP_METHOD_TYPE,
    EapMethodAuthenticatorInitialize: isize,
    EapMethodAuthenticatorBeginSession: isize,
    EapMethodAuthenticatorUpdateInnerMethodParams: isize,
    EapMethodAuthenticatorReceivePacket: isize,
    EapMethodAuthenticatorSendPacket: isize,
    EapMethodAuthenticatorGetAttributes: isize,
    EapMethodAuthenticatorSetAttributes: isize,
    EapMethodAuthenticatorGetResult: isize,
    EapMethodAuthenticatorEndSession: isize,
    EapMethodAuthenticatorShutdown: isize,
};

//--------------------------------------------------------------------------------
// Section: Functions (32)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappcfg" fn EapHostPeerGetMethods(
    p_eap_method_info_array: ?*EAP_METHOD_INFO_ARRAY,
    pp_eap_error: ?*?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "eappcfg" fn EapHostPeerGetMethodProperties(
    dw_version: u32,
    dw_flags: u32,
    eap_method_type: EAP_METHOD_TYPE,
    h_user_impersonation_token: ?HANDLE,
    dw_eap_conn_data_size: u32,
    pb_eap_conn_data: [*:0]const u8,
    dw_user_data_size: u32,
    pb_user_data: [*:0]const u8,
    p_method_property_array: ?*EAP_METHOD_PROPERTY_ARRAY,
    pp_eap_error: ?*?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappcfg" fn EapHostPeerInvokeConfigUI(
    hwnd_parent: ?HWND,
    dw_flags: u32,
    eap_method_type: EAP_METHOD_TYPE,
    dw_size_of_config_in: u32,
    p_config_in: ?[*:0]const u8,
    pdw_size_of_config_out: ?*u32,
    pp_config_out: ?*?*u8,
    pp_eap_error: ?*?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappcfg" fn EapHostPeerQueryCredentialInputFields(
    h_user_impersonation_token: ?HANDLE,
    eap_method_type: EAP_METHOD_TYPE,
    dw_flags: u32,
    dw_eap_conn_data_size: u32,
    pb_eap_conn_data: [*:0]const u8,
    p_eap_config_input_field_array: ?*EAP_CONFIG_INPUT_FIELD_ARRAY,
    pp_eap_error: ?*?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappcfg" fn EapHostPeerQueryUserBlobFromCredentialInputFields(
    h_user_impersonation_token: ?HANDLE,
    eap_method_type: EAP_METHOD_TYPE,
    dw_flags: u32,
    dw_eap_conn_data_size: u32,
    pb_eap_conn_data: [*:0]const u8,
    p_eap_config_input_field_array: ?*const EAP_CONFIG_INPUT_FIELD_ARRAY,
    pdw_user_blob_size: ?*u32,
    ppb_user_blob: [*]?*u8,
    pp_eap_error: ?*?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappcfg" fn EapHostPeerInvokeIdentityUI(
    dw_version: u32,
    eap_method_type: EAP_METHOD_TYPE,
    dw_flags: u32,
    hwnd_parent: ?HWND,
    dw_sizeof_connection_data: u32,
    p_connection_data: [*:0]const u8,
    dw_sizeof_user_data: u32,
    p_user_data: ?[*:0]const u8,
    pdw_size_of_user_data_out: ?*u32,
    pp_user_data_out: ?*?*u8,
    ppwsz_identity: ?*?PWSTR,
    pp_eap_error: ?*?*EAP_ERROR,
    ppv_reserved: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappcfg" fn EapHostPeerInvokeInteractiveUI(
    hwnd_parent: ?HWND,
    dw_sizeof_u_i_context_data: u32,
    p_u_i_context_data: ?[*:0]const u8,
    pdw_size_of_data_from_interactive_u_i: ?*u32,
    pp_data_from_interactive_u_i: ?*?*u8,
    pp_eap_error: ?*?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappcfg" fn EapHostPeerQueryInteractiveUIInputFields(
    dw_version: u32,
    dw_flags: u32,
    dw_sizeof_u_i_context_data: u32,
    p_u_i_context_data: [*:0]const u8,
    p_eap_interactive_u_i_data: ?*EAP_INTERACTIVE_UI_DATA,
    pp_eap_error: ?*?*EAP_ERROR,
    ppv_reserved: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappcfg" fn EapHostPeerQueryUIBlobFromInteractiveUIInputFields(
    dw_version: u32,
    dw_flags: u32,
    dw_sizeof_u_i_context_data: u32,
    p_u_i_context_data: [*:0]const u8,
    p_eap_interactive_u_i_data: ?*const EAP_INTERACTIVE_UI_DATA,
    pdw_size_of_data_from_interactive_u_i: ?*u32,
    pp_data_from_interactive_u_i: ?*?*u8,
    pp_eap_error: ?*?*EAP_ERROR,
    ppv_reserved: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappcfg" fn EapHostPeerConfigXml2Blob(
    dw_flags: u32,
    p_config_doc: ?*IXMLDOMNode,
    pdw_size_of_config_out: ?*u32,
    pp_config_out: ?*?*u8,
    p_eap_method_type: ?*EAP_METHOD_TYPE,
    pp_eap_error: ?*?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappcfg" fn EapHostPeerCredentialsXml2Blob(
    dw_flags: u32,
    p_credentials_doc: ?*IXMLDOMNode,
    dw_size_of_config_in: u32,
    p_config_in: [*:0]u8,
    pdw_size_of_credentials_out: ?*u32,
    pp_credentials_out: ?*?*u8,
    p_eap_method_type: ?*EAP_METHOD_TYPE,
    pp_eap_error: ?*?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappcfg" fn EapHostPeerConfigBlob2Xml(
    dw_flags: u32,
    eap_method_type: EAP_METHOD_TYPE,
    dw_size_of_config_in: u32,
    p_config_in: [*:0]u8,
    pp_config_doc: ?*?*IXMLDOMDocument2,
    pp_eap_error: ?*?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappcfg" fn EapHostPeerFreeMemory(
    p_data: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappcfg" fn EapHostPeerFreeErrorMemory(
    p_eap_error: ?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappprxy" fn EapHostPeerInitialize() callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappprxy" fn EapHostPeerUninitialize() callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappprxy" fn EapHostPeerBeginSession(
    dw_flags: u32,
    eap_type: EAP_METHOD_TYPE,
    p_attribute_array: ?*const EAP_ATTRIBUTES,
    h_token_impersonate_user: ?HANDLE,
    dw_sizeof_connection_data: u32,
    p_connection_data: ?*const u8,
    dw_sizeof_user_data: u32,
    p_user_data: ?*const u8,
    dw_max_send_packet_size: u32,
    p_connection_id: ?*const Guid,
    func: ?NotificationHandler,
    p_context_data: ?*anyopaque,
    p_session_id: ?*u32,
    pp_eap_error: ?*?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappprxy" fn EapHostPeerProcessReceivedPacket(
    session_handle: u32,
    cb_receive_packet: u32,
    p_receive_packet: ?*const u8,
    p_eap_output: ?*EapHostPeerResponseAction,
    pp_eap_error: ?*?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappprxy" fn EapHostPeerGetSendPacket(
    session_handle: u32,
    pcb_send_packet: ?*u32,
    pp_send_packet: ?*?*u8,
    pp_eap_error: ?*?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappprxy" fn EapHostPeerGetResult(
    session_handle: u32,
    reason: EapHostPeerMethodResultReason,
    pp_result: ?*EapHostPeerMethodResult,
    pp_eap_error: ?*?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappprxy" fn EapHostPeerGetUIContext(
    session_handle: u32,
    pdw_size_of_u_i_context_data: ?*u32,
    pp_u_i_context_data: ?*?*u8,
    pp_eap_error: ?*?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappprxy" fn EapHostPeerSetUIContext(
    session_handle: u32,
    dw_size_of_u_i_context_data: u32,
    p_u_i_context_data: ?*const u8,
    p_eap_output: ?*EapHostPeerResponseAction,
    pp_eap_error: ?*?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappprxy" fn EapHostPeerGetResponseAttributes(
    session_handle: u32,
    p_attribs: ?*EAP_ATTRIBUTES,
    pp_eap_error: ?*?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappprxy" fn EapHostPeerSetResponseAttributes(
    session_handle: u32,
    p_attribs: ?*const EAP_ATTRIBUTES,
    p_eap_output: ?*EapHostPeerResponseAction,
    pp_eap_error: ?*?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappprxy" fn EapHostPeerGetAuthStatus(
    session_handle: u32,
    auth_param: EapHostPeerAuthParams,
    pcb_auth_data: ?*u32,
    pp_auth_data: ?*?*u8,
    pp_eap_error: ?*?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappprxy" fn EapHostPeerEndSession(
    session_handle: u32,
    pp_eap_error: ?*?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "eappprxy" fn EapHostPeerGetDataToUnplumbCredentials(
    p_connection_id_that_last_saved_creds: ?*Guid,
    ph_credential_impersonation_token: ?*isize,
    session_handle: u32,
    pp_eap_error: ?*?*EAP_ERROR,
    f_save_to_cred_man: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappprxy" fn EapHostPeerClearConnection(
    p_connection_id: ?*Guid,
    pp_eap_error: ?*?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappprxy" fn EapHostPeerFreeEapError(
    p_eap_error: ?*EAP_ERROR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappprxy" fn EapHostPeerGetIdentity(
    dw_version: u32,
    dw_flags: u32,
    eap_method_type: EAP_METHOD_TYPE,
    dw_sizeof_connection_data: u32,
    p_connection_data: [*:0]const u8,
    dw_sizeof_user_data: u32,
    p_user_data: ?[*:0]const u8,
    h_token_impersonate_user: ?HANDLE,
    pf_invoke_u_i: ?*BOOL,
    pdw_size_of_user_data_out: ?*u32,
    pp_user_data_out: ?*?*u8,
    ppwsz_identity: ?*?PWSTR,
    pp_eap_error: ?*?*EAP_ERROR,
    ppv_reserved: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "eappprxy" fn EapHostPeerGetEncryptedPassword(
    dw_sizeof_password: u32,
    // TODO: what to do with BytesParamIndex 0?
    sz_password: ?PWSTR,
    ppsz_enc_password: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "eappprxy" fn EapHostPeerFreeRuntimeMemory(
    p_data: ?*u8,
) callconv(@import("std").os.windows.WINAPI) void;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (10)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const HANDLE = @import("../foundation.zig").HANDLE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IUnknown = @import("../system/com.zig").IUnknown;
const IXMLDOMDocument2 = @import("../data/xml/ms_xml.zig").IXMLDOMDocument2;
const IXMLDOMNode = @import("../data/xml/ms_xml.zig").IXMLDOMNode;
const NCRYPT_KEY_HANDLE = @import("../security/cryptography.zig").NCRYPT_KEY_HANDLE;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "NotificationHandler")) {
        _ = NotificationHandler;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
