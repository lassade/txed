//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (12)
//--------------------------------------------------------------------------------
pub const IDENTITY_KEYWORD_ASSOCIATED = "associated";
pub const IDENTITY_KEYWORD_LOCAL = "local";
pub const IDENTITY_KEYWORD_HOMEGROUP = "homegroup";
pub const IDENTITY_KEYWORD_CONNECTED = "connected";
pub const OID_OAssociatedIdentityProviderObject = Guid.initString("98c5a3dd-db68-4f1a-8d2b-9079cdfeaf61");
pub const STR_OUT_OF_BOX_EXPERIENCE = "OutOfBoxExperience";
pub const STR_MODERN_SETTINGS_ADD_USER = "ModernSettingsAddUser";
pub const STR_OUT_OF_BOX_UPGRADE_EXPERIENCE = "OutOfBoxUpgradeExperience";
pub const STR_COMPLETE_ACCOUNT = "CompleteAccount";
pub const STR_NTH_USER_FIRST_AUTH = "NthUserFirstAuth";
pub const STR_USER_NAME = "Username";
pub const STR_PROPERTY_STORE = "PropertyStore";

//--------------------------------------------------------------------------------
// Section: Types (20)
//--------------------------------------------------------------------------------
pub const IDENTITY_TYPE = enum(i32) {
    ALL = 0,
    ME_ONLY = 1,
};
pub const IDENTITIES_ALL = IDENTITY_TYPE.ALL;
pub const IDENTITIES_ME_ONLY = IDENTITY_TYPE.ME_ONLY;

pub const IdentityUpdateEvent = enum(u32) {
    ASSOCIATED = 1,
    DISASSOCIATED = 2,
    CREATED = 4,
    IMPORTED = 8,
    DELETED = 16,
    PROPCHANGED = 32,
    CONNECTED = 64,
    DISCONNECTED = 128,
    _,
    pub fn initFlags(o: struct {
        ASSOCIATED: u1 = 0,
        DISASSOCIATED: u1 = 0,
        CREATED: u1 = 0,
        IMPORTED: u1 = 0,
        DELETED: u1 = 0,
        PROPCHANGED: u1 = 0,
        CONNECTED: u1 = 0,
        DISCONNECTED: u1 = 0,
    }) IdentityUpdateEvent {
        return @as(IdentityUpdateEvent, @enumFromInt((if (o.ASSOCIATED == 1) @intFromEnum(IdentityUpdateEvent.ASSOCIATED) else 0) | (if (o.DISASSOCIATED == 1) @intFromEnum(IdentityUpdateEvent.DISASSOCIATED) else 0) | (if (o.CREATED == 1) @intFromEnum(IdentityUpdateEvent.CREATED) else 0) | (if (o.IMPORTED == 1) @intFromEnum(IdentityUpdateEvent.IMPORTED) else 0) | (if (o.DELETED == 1) @intFromEnum(IdentityUpdateEvent.DELETED) else 0) | (if (o.PROPCHANGED == 1) @intFromEnum(IdentityUpdateEvent.PROPCHANGED) else 0) | (if (o.CONNECTED == 1) @intFromEnum(IdentityUpdateEvent.CONNECTED) else 0) | (if (o.DISCONNECTED == 1) @intFromEnum(IdentityUpdateEvent.DISCONNECTED) else 0)));
    }
};
pub const IDENTITY_ASSOCIATED = IdentityUpdateEvent.ASSOCIATED;
pub const IDENTITY_DISASSOCIATED = IdentityUpdateEvent.DISASSOCIATED;
pub const IDENTITY_CREATED = IdentityUpdateEvent.CREATED;
pub const IDENTITY_IMPORTED = IdentityUpdateEvent.IMPORTED;
pub const IDENTITY_DELETED = IdentityUpdateEvent.DELETED;
pub const IDENTITY_PROPCHANGED = IdentityUpdateEvent.PROPCHANGED;
pub const IDENTITY_CONNECTED = IdentityUpdateEvent.CONNECTED;
pub const IDENTITY_DISCONNECTED = IdentityUpdateEvent.DISCONNECTED;

// TODO: this type is limited to platform 'windows6.1'
const IID_IIdentityAdvise_Value = Guid.initString("4e982fed-d14b-440c-b8d6-bb386453d386");
pub const IID_IIdentityAdvise = &IID_IIdentityAdvise_Value;
pub const IIdentityAdvise = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IdentityUpdated: *const fn (
            self: *const IIdentityAdvise,
            dw_identity_update_events: IdentityUpdateEvent,
            lpsz_unique_i_d: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn identityUpdated(self: *const T, dw_identity_update_events_: IdentityUpdateEvent, lpsz_unique_i_d_: ?[*:0]const u16) HRESULT {
                return @as(*const IIdentityAdvise.VTable, @ptrCast(self.vtable)).IdentityUpdated(@as(*const IIdentityAdvise, @ptrCast(self)), dw_identity_update_events_, lpsz_unique_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_AsyncIIdentityAdvise_Value = Guid.initString("3ab4c8da-d038-4830-8dd9-3253c55a127f");
pub const IID_AsyncIIdentityAdvise = &IID_AsyncIIdentityAdvise_Value;
pub const AsyncIIdentityAdvise = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin_IdentityUpdated: *const fn (
            self: *const AsyncIIdentityAdvise,
            dw_identity_update_events: u32,
            lpsz_unique_i_d: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_IdentityUpdated: *const fn (
            self: *const AsyncIIdentityAdvise,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn beginIdentityUpdated(self: *const T, dw_identity_update_events_: u32, lpsz_unique_i_d_: ?[*:0]const u16) HRESULT {
                return @as(*const AsyncIIdentityAdvise.VTable, @ptrCast(self.vtable)).Begin_IdentityUpdated(@as(*const AsyncIIdentityAdvise, @ptrCast(self)), dw_identity_update_events_, lpsz_unique_i_d_);
            }
            pub inline fn finishIdentityUpdated(self: *const T) HRESULT {
                return @as(*const AsyncIIdentityAdvise.VTable, @ptrCast(self.vtable)).Finish_IdentityUpdated(@as(*const AsyncIIdentityAdvise, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IIdentityProvider_Value = Guid.initString("0d1b9e0c-e8ba-4f55-a81b-bce934b948f5");
pub const IID_IIdentityProvider = &IID_IIdentityProvider_Value;
pub const IIdentityProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIdentityEnum: *const fn (
            self: *const IIdentityProvider,
            e_identity_type: IDENTITY_TYPE,
            p_filterkey: ?*const PROPERTYKEY,
            p_filter_prop_var_value: ?*const PROPVARIANT,
            pp_identity_enum: ?*?*IEnumUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn (
            self: *const IIdentityProvider,
            lpsz_user_name: ?[*:0]const u16,
            pp_property_store: ?*?*IPropertyStore,
            p_keywords_to_add: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Import: *const fn (
            self: *const IIdentityProvider,
            p_property_store: ?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IIdentityProvider,
            lpsz_unique_i_d: ?[*:0]const u16,
            p_keywords_to_delete: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindByUniqueID: *const fn (
            self: *const IIdentityProvider,
            lpsz_unique_i_d: ?[*:0]const u16,
            pp_property_store: ?*?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProviderPropertyStore: *const fn (
            self: *const IIdentityProvider,
            pp_property_store: ?*?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: *const fn (
            self: *const IIdentityProvider,
            p_identity_advise: ?*IIdentityAdvise,
            dw_identity_update_events: IdentityUpdateEvent,
            pdw_cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnAdvise: *const fn (
            self: *const IIdentityProvider,
            dw_cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getIdentityEnum(self: *const T, e_identity_type_: IDENTITY_TYPE, p_filterkey_: ?*const PROPERTYKEY, p_filter_prop_var_value_: ?*const PROPVARIANT, pp_identity_enum_: ?*?*IEnumUnknown) HRESULT {
                return @as(*const IIdentityProvider.VTable, @ptrCast(self.vtable)).GetIdentityEnum(@as(*const IIdentityProvider, @ptrCast(self)), e_identity_type_, p_filterkey_, p_filter_prop_var_value_, pp_identity_enum_);
            }
            pub inline fn create(self: *const T, lpsz_user_name_: ?[*:0]const u16, pp_property_store_: ?*?*IPropertyStore, p_keywords_to_add_: ?*const PROPVARIANT) HRESULT {
                return @as(*const IIdentityProvider.VTable, @ptrCast(self.vtable)).Create(@as(*const IIdentityProvider, @ptrCast(self)), lpsz_user_name_, pp_property_store_, p_keywords_to_add_);
            }
            pub inline fn import(self: *const T, p_property_store_: ?*IPropertyStore) HRESULT {
                return @as(*const IIdentityProvider.VTable, @ptrCast(self.vtable)).Import(@as(*const IIdentityProvider, @ptrCast(self)), p_property_store_);
            }
            pub inline fn delete(self: *const T, lpsz_unique_i_d_: ?[*:0]const u16, p_keywords_to_delete_: ?*const PROPVARIANT) HRESULT {
                return @as(*const IIdentityProvider.VTable, @ptrCast(self.vtable)).Delete(@as(*const IIdentityProvider, @ptrCast(self)), lpsz_unique_i_d_, p_keywords_to_delete_);
            }
            pub inline fn findByUniqueID(self: *const T, lpsz_unique_i_d_: ?[*:0]const u16, pp_property_store_: ?*?*IPropertyStore) HRESULT {
                return @as(*const IIdentityProvider.VTable, @ptrCast(self.vtable)).FindByUniqueID(@as(*const IIdentityProvider, @ptrCast(self)), lpsz_unique_i_d_, pp_property_store_);
            }
            pub inline fn getProviderPropertyStore(self: *const T, pp_property_store_: ?*?*IPropertyStore) HRESULT {
                return @as(*const IIdentityProvider.VTable, @ptrCast(self.vtable)).GetProviderPropertyStore(@as(*const IIdentityProvider, @ptrCast(self)), pp_property_store_);
            }
            pub inline fn advise(self: *const T, p_identity_advise_: ?*IIdentityAdvise, dw_identity_update_events_: IdentityUpdateEvent, pdw_cookie_: ?*u32) HRESULT {
                return @as(*const IIdentityProvider.VTable, @ptrCast(self.vtable)).Advise(@as(*const IIdentityProvider, @ptrCast(self)), p_identity_advise_, dw_identity_update_events_, pdw_cookie_);
            }
            pub inline fn unAdvise(self: *const T, dw_cookie_: u32) HRESULT {
                return @as(*const IIdentityProvider.VTable, @ptrCast(self.vtable)).UnAdvise(@as(*const IIdentityProvider, @ptrCast(self)), dw_cookie_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_AsyncIIdentityProvider_Value = Guid.initString("c6fc9901-c433-4646-8f48-4e4687aae2a0");
pub const IID_AsyncIIdentityProvider = &IID_AsyncIIdentityProvider_Value;
pub const AsyncIIdentityProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin_GetIdentityEnum: *const fn (
            self: *const AsyncIIdentityProvider,
            e_identity_type: IDENTITY_TYPE,
            p_filterkey: ?*const PROPERTYKEY,
            p_filter_prop_var_value: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_GetIdentityEnum: *const fn (
            self: *const AsyncIIdentityProvider,
            pp_identity_enum: ?*?*IEnumUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_Create: *const fn (
            self: *const AsyncIIdentityProvider,
            lpsz_user_name: ?[*:0]const u16,
            p_keywords_to_add: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_Create: *const fn (
            self: *const AsyncIIdentityProvider,
            pp_property_store: ?*?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_Import: *const fn (
            self: *const AsyncIIdentityProvider,
            p_property_store: ?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_Import: *const fn (
            self: *const AsyncIIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_Delete: *const fn (
            self: *const AsyncIIdentityProvider,
            lpsz_unique_i_d: ?[*:0]const u16,
            p_keywords_to_delete: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_Delete: *const fn (
            self: *const AsyncIIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_FindByUniqueID: *const fn (
            self: *const AsyncIIdentityProvider,
            lpsz_unique_i_d: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_FindByUniqueID: *const fn (
            self: *const AsyncIIdentityProvider,
            pp_property_store: ?*?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_GetProviderPropertyStore: *const fn (
            self: *const AsyncIIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_GetProviderPropertyStore: *const fn (
            self: *const AsyncIIdentityProvider,
            pp_property_store: ?*?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_Advise: *const fn (
            self: *const AsyncIIdentityProvider,
            p_identity_advise: ?*IIdentityAdvise,
            dw_identity_update_events: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_Advise: *const fn (
            self: *const AsyncIIdentityProvider,
            pdw_cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_UnAdvise: *const fn (
            self: *const AsyncIIdentityProvider,
            dw_cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_UnAdvise: *const fn (
            self: *const AsyncIIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn beginGetIdentityEnum(self: *const T, e_identity_type_: IDENTITY_TYPE, p_filterkey_: ?*const PROPERTYKEY, p_filter_prop_var_value_: ?*const PROPVARIANT) HRESULT {
                return @as(*const AsyncIIdentityProvider.VTable, @ptrCast(self.vtable)).Begin_GetIdentityEnum(@as(*const AsyncIIdentityProvider, @ptrCast(self)), e_identity_type_, p_filterkey_, p_filter_prop_var_value_);
            }
            pub inline fn finishGetIdentityEnum(self: *const T, pp_identity_enum_: ?*?*IEnumUnknown) HRESULT {
                return @as(*const AsyncIIdentityProvider.VTable, @ptrCast(self.vtable)).Finish_GetIdentityEnum(@as(*const AsyncIIdentityProvider, @ptrCast(self)), pp_identity_enum_);
            }
            pub inline fn beginCreate(self: *const T, lpsz_user_name_: ?[*:0]const u16, p_keywords_to_add_: ?*const PROPVARIANT) HRESULT {
                return @as(*const AsyncIIdentityProvider.VTable, @ptrCast(self.vtable)).Begin_Create(@as(*const AsyncIIdentityProvider, @ptrCast(self)), lpsz_user_name_, p_keywords_to_add_);
            }
            pub inline fn finishCreate(self: *const T, pp_property_store_: ?*?*IPropertyStore) HRESULT {
                return @as(*const AsyncIIdentityProvider.VTable, @ptrCast(self.vtable)).Finish_Create(@as(*const AsyncIIdentityProvider, @ptrCast(self)), pp_property_store_);
            }
            pub inline fn beginImport(self: *const T, p_property_store_: ?*IPropertyStore) HRESULT {
                return @as(*const AsyncIIdentityProvider.VTable, @ptrCast(self.vtable)).Begin_Import(@as(*const AsyncIIdentityProvider, @ptrCast(self)), p_property_store_);
            }
            pub inline fn finishImport(self: *const T) HRESULT {
                return @as(*const AsyncIIdentityProvider.VTable, @ptrCast(self.vtable)).Finish_Import(@as(*const AsyncIIdentityProvider, @ptrCast(self)));
            }
            pub inline fn beginDelete(self: *const T, lpsz_unique_i_d_: ?[*:0]const u16, p_keywords_to_delete_: ?*const PROPVARIANT) HRESULT {
                return @as(*const AsyncIIdentityProvider.VTable, @ptrCast(self.vtable)).Begin_Delete(@as(*const AsyncIIdentityProvider, @ptrCast(self)), lpsz_unique_i_d_, p_keywords_to_delete_);
            }
            pub inline fn finishDelete(self: *const T) HRESULT {
                return @as(*const AsyncIIdentityProvider.VTable, @ptrCast(self.vtable)).Finish_Delete(@as(*const AsyncIIdentityProvider, @ptrCast(self)));
            }
            pub inline fn beginFindByUniqueID(self: *const T, lpsz_unique_i_d_: ?[*:0]const u16) HRESULT {
                return @as(*const AsyncIIdentityProvider.VTable, @ptrCast(self.vtable)).Begin_FindByUniqueID(@as(*const AsyncIIdentityProvider, @ptrCast(self)), lpsz_unique_i_d_);
            }
            pub inline fn finishFindByUniqueID(self: *const T, pp_property_store_: ?*?*IPropertyStore) HRESULT {
                return @as(*const AsyncIIdentityProvider.VTable, @ptrCast(self.vtable)).Finish_FindByUniqueID(@as(*const AsyncIIdentityProvider, @ptrCast(self)), pp_property_store_);
            }
            pub inline fn beginGetProviderPropertyStore(self: *const T) HRESULT {
                return @as(*const AsyncIIdentityProvider.VTable, @ptrCast(self.vtable)).Begin_GetProviderPropertyStore(@as(*const AsyncIIdentityProvider, @ptrCast(self)));
            }
            pub inline fn finishGetProviderPropertyStore(self: *const T, pp_property_store_: ?*?*IPropertyStore) HRESULT {
                return @as(*const AsyncIIdentityProvider.VTable, @ptrCast(self.vtable)).Finish_GetProviderPropertyStore(@as(*const AsyncIIdentityProvider, @ptrCast(self)), pp_property_store_);
            }
            pub inline fn beginAdvise(self: *const T, p_identity_advise_: ?*IIdentityAdvise, dw_identity_update_events_: u32) HRESULT {
                return @as(*const AsyncIIdentityProvider.VTable, @ptrCast(self.vtable)).Begin_Advise(@as(*const AsyncIIdentityProvider, @ptrCast(self)), p_identity_advise_, dw_identity_update_events_);
            }
            pub inline fn finishAdvise(self: *const T, pdw_cookie_: ?*u32) HRESULT {
                return @as(*const AsyncIIdentityProvider.VTable, @ptrCast(self.vtable)).Finish_Advise(@as(*const AsyncIIdentityProvider, @ptrCast(self)), pdw_cookie_);
            }
            pub inline fn beginUnAdvise(self: *const T, dw_cookie_: u32) HRESULT {
                return @as(*const AsyncIIdentityProvider.VTable, @ptrCast(self.vtable)).Begin_UnAdvise(@as(*const AsyncIIdentityProvider, @ptrCast(self)), dw_cookie_);
            }
            pub inline fn finishUnAdvise(self: *const T) HRESULT {
                return @as(*const AsyncIIdentityProvider.VTable, @ptrCast(self.vtable)).Finish_UnAdvise(@as(*const AsyncIIdentityProvider, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IAssociatedIdentityProvider_Value = Guid.initString("2af066b3-4cbb-4cba-a798-204b6af68cc0");
pub const IID_IAssociatedIdentityProvider = &IID_IAssociatedIdentityProvider_Value;
pub const IAssociatedIdentityProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AssociateIdentity: *const fn (
            self: *const IAssociatedIdentityProvider,
            hwnd_parent: ?HWND,
            pp_property_store: ?*?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisassociateIdentity: *const fn (
            self: *const IAssociatedIdentityProvider,
            hwnd_parent: ?HWND,
            lpsz_unique_i_d: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ChangeCredential: *const fn (
            self: *const IAssociatedIdentityProvider,
            hwnd_parent: ?HWND,
            lpsz_unique_i_d: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn associateIdentity(self: *const T, hwnd_parent_: ?HWND, pp_property_store_: ?*?*IPropertyStore) HRESULT {
                return @as(*const IAssociatedIdentityProvider.VTable, @ptrCast(self.vtable)).AssociateIdentity(@as(*const IAssociatedIdentityProvider, @ptrCast(self)), hwnd_parent_, pp_property_store_);
            }
            pub inline fn disassociateIdentity(self: *const T, hwnd_parent_: ?HWND, lpsz_unique_i_d_: ?[*:0]const u16) HRESULT {
                return @as(*const IAssociatedIdentityProvider.VTable, @ptrCast(self.vtable)).DisassociateIdentity(@as(*const IAssociatedIdentityProvider, @ptrCast(self)), hwnd_parent_, lpsz_unique_i_d_);
            }
            pub inline fn changeCredential(self: *const T, hwnd_parent_: ?HWND, lpsz_unique_i_d_: ?[*:0]const u16) HRESULT {
                return @as(*const IAssociatedIdentityProvider.VTable, @ptrCast(self.vtable)).ChangeCredential(@as(*const IAssociatedIdentityProvider, @ptrCast(self)), hwnd_parent_, lpsz_unique_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_AsyncIAssociatedIdentityProvider_Value = Guid.initString("2834d6ed-297e-4e72-8a51-961e86f05152");
pub const IID_AsyncIAssociatedIdentityProvider = &IID_AsyncIAssociatedIdentityProvider_Value;
pub const AsyncIAssociatedIdentityProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin_AssociateIdentity: *const fn (
            self: *const AsyncIAssociatedIdentityProvider,
            hwnd_parent: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_AssociateIdentity: *const fn (
            self: *const AsyncIAssociatedIdentityProvider,
            pp_property_store: ?*?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_DisassociateIdentity: *const fn (
            self: *const AsyncIAssociatedIdentityProvider,
            hwnd_parent: ?HWND,
            lpsz_unique_i_d: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_DisassociateIdentity: *const fn (
            self: *const AsyncIAssociatedIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_ChangeCredential: *const fn (
            self: *const AsyncIAssociatedIdentityProvider,
            hwnd_parent: ?HWND,
            lpsz_unique_i_d: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_ChangeCredential: *const fn (
            self: *const AsyncIAssociatedIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn beginAssociateIdentity(self: *const T, hwnd_parent_: ?HWND) HRESULT {
                return @as(*const AsyncIAssociatedIdentityProvider.VTable, @ptrCast(self.vtable)).Begin_AssociateIdentity(@as(*const AsyncIAssociatedIdentityProvider, @ptrCast(self)), hwnd_parent_);
            }
            pub inline fn finishAssociateIdentity(self: *const T, pp_property_store_: ?*?*IPropertyStore) HRESULT {
                return @as(*const AsyncIAssociatedIdentityProvider.VTable, @ptrCast(self.vtable)).Finish_AssociateIdentity(@as(*const AsyncIAssociatedIdentityProvider, @ptrCast(self)), pp_property_store_);
            }
            pub inline fn beginDisassociateIdentity(self: *const T, hwnd_parent_: ?HWND, lpsz_unique_i_d_: ?[*:0]const u16) HRESULT {
                return @as(*const AsyncIAssociatedIdentityProvider.VTable, @ptrCast(self.vtable)).Begin_DisassociateIdentity(@as(*const AsyncIAssociatedIdentityProvider, @ptrCast(self)), hwnd_parent_, lpsz_unique_i_d_);
            }
            pub inline fn finishDisassociateIdentity(self: *const T) HRESULT {
                return @as(*const AsyncIAssociatedIdentityProvider.VTable, @ptrCast(self.vtable)).Finish_DisassociateIdentity(@as(*const AsyncIAssociatedIdentityProvider, @ptrCast(self)));
            }
            pub inline fn beginChangeCredential(self: *const T, hwnd_parent_: ?HWND, lpsz_unique_i_d_: ?[*:0]const u16) HRESULT {
                return @as(*const AsyncIAssociatedIdentityProvider.VTable, @ptrCast(self.vtable)).Begin_ChangeCredential(@as(*const AsyncIAssociatedIdentityProvider, @ptrCast(self)), hwnd_parent_, lpsz_unique_i_d_);
            }
            pub inline fn finishChangeCredential(self: *const T) HRESULT {
                return @as(*const AsyncIAssociatedIdentityProvider.VTable, @ptrCast(self.vtable)).Finish_ChangeCredential(@as(*const AsyncIAssociatedIdentityProvider, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const IDENTITY_URL = enum(i32) {
    CREATE_ACCOUNT_WIZARD = 0,
    SIGN_IN_WIZARD = 1,
    CHANGE_PASSWORD_WIZARD = 2,
    IFEXISTS_WIZARD = 3,
    ACCOUNT_SETTINGS = 4,
    RESTORE_WIZARD = 5,
    CONNECT_WIZARD = 6,
};
pub const IDENTITY_URL_CREATE_ACCOUNT_WIZARD = IDENTITY_URL.CREATE_ACCOUNT_WIZARD;
pub const IDENTITY_URL_SIGN_IN_WIZARD = IDENTITY_URL.SIGN_IN_WIZARD;
pub const IDENTITY_URL_CHANGE_PASSWORD_WIZARD = IDENTITY_URL.CHANGE_PASSWORD_WIZARD;
pub const IDENTITY_URL_IFEXISTS_WIZARD = IDENTITY_URL.IFEXISTS_WIZARD;
pub const IDENTITY_URL_ACCOUNT_SETTINGS = IDENTITY_URL.ACCOUNT_SETTINGS;
pub const IDENTITY_URL_RESTORE_WIZARD = IDENTITY_URL.RESTORE_WIZARD;
pub const IDENTITY_URL_CONNECT_WIZARD = IDENTITY_URL.CONNECT_WIZARD;

pub const ACCOUNT_STATE = enum(i32) {
    NOT_CONNECTED = 0,
    CONNECTING = 1,
    CONNECT_COMPLETED = 2,
};
pub const NOT_CONNECTED = ACCOUNT_STATE.NOT_CONNECTED;
pub const CONNECTING = ACCOUNT_STATE.CONNECTING;
pub const CONNECT_COMPLETED = ACCOUNT_STATE.CONNECT_COMPLETED;

// TODO: this type is limited to platform 'windows8.0'
const IID_IConnectedIdentityProvider_Value = Guid.initString("b7417b54-e08c-429b-96c8-678d1369ecb1");
pub const IID_IConnectedIdentityProvider = &IID_IConnectedIdentityProvider_Value;
pub const IConnectedIdentityProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ConnectIdentity: *const fn (
            self: *const IConnectedIdentityProvider,
            auth_buffer: [*:0]u8,
            auth_buffer_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisconnectIdentity: *const fn (
            self: *const IConnectedIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsConnected: *const fn (
            self: *const IConnectedIdentityProvider,
            connected: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUrl: *const fn (
            self: *const IConnectedIdentityProvider,
            identifier: IDENTITY_URL,
            context: ?*IBindCtx,
            post_data: ?*VARIANT,
            url: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAccountState: *const fn (
            self: *const IConnectedIdentityProvider,
            p_state: ?*ACCOUNT_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn connectIdentity(self: *const T, auth_buffer_: [*:0]u8, auth_buffer_size_: u32) HRESULT {
                return @as(*const IConnectedIdentityProvider.VTable, @ptrCast(self.vtable)).ConnectIdentity(@as(*const IConnectedIdentityProvider, @ptrCast(self)), auth_buffer_, auth_buffer_size_);
            }
            pub inline fn disconnectIdentity(self: *const T) HRESULT {
                return @as(*const IConnectedIdentityProvider.VTable, @ptrCast(self.vtable)).DisconnectIdentity(@as(*const IConnectedIdentityProvider, @ptrCast(self)));
            }
            pub inline fn isConnected(self: *const T, connected_: ?*BOOL) HRESULT {
                return @as(*const IConnectedIdentityProvider.VTable, @ptrCast(self.vtable)).IsConnected(@as(*const IConnectedIdentityProvider, @ptrCast(self)), connected_);
            }
            pub inline fn getUrl(self: *const T, identifier_: IDENTITY_URL, context_: ?*IBindCtx, post_data_: ?*VARIANT, url_: ?*?PWSTR) HRESULT {
                return @as(*const IConnectedIdentityProvider.VTable, @ptrCast(self.vtable)).GetUrl(@as(*const IConnectedIdentityProvider, @ptrCast(self)), identifier_, context_, post_data_, url_);
            }
            pub inline fn getAccountState(self: *const T, p_state_: ?*ACCOUNT_STATE) HRESULT {
                return @as(*const IConnectedIdentityProvider.VTable, @ptrCast(self.vtable)).GetAccountState(@as(*const IConnectedIdentityProvider, @ptrCast(self)), p_state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_AsyncIConnectedIdentityProvider_Value = Guid.initString("9ce55141-bce9-4e15-824d-43d79f512f93");
pub const IID_AsyncIConnectedIdentityProvider = &IID_AsyncIConnectedIdentityProvider_Value;
pub const AsyncIConnectedIdentityProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin_ConnectIdentity: *const fn (
            self: *const AsyncIConnectedIdentityProvider,
            auth_buffer: [*:0]u8,
            auth_buffer_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_ConnectIdentity: *const fn (
            self: *const AsyncIConnectedIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_DisconnectIdentity: *const fn (
            self: *const AsyncIConnectedIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_DisconnectIdentity: *const fn (
            self: *const AsyncIConnectedIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_IsConnected: *const fn (
            self: *const AsyncIConnectedIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_IsConnected: *const fn (
            self: *const AsyncIConnectedIdentityProvider,
            connected: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_GetUrl: *const fn (
            self: *const AsyncIConnectedIdentityProvider,
            identifier: IDENTITY_URL,
            context: ?*IBindCtx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_GetUrl: *const fn (
            self: *const AsyncIConnectedIdentityProvider,
            post_data: ?*VARIANT,
            url: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_GetAccountState: *const fn (
            self: *const AsyncIConnectedIdentityProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_GetAccountState: *const fn (
            self: *const AsyncIConnectedIdentityProvider,
            p_state: ?*ACCOUNT_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn beginConnectIdentity(self: *const T, auth_buffer_: [*:0]u8, auth_buffer_size_: u32) HRESULT {
                return @as(*const AsyncIConnectedIdentityProvider.VTable, @ptrCast(self.vtable)).Begin_ConnectIdentity(@as(*const AsyncIConnectedIdentityProvider, @ptrCast(self)), auth_buffer_, auth_buffer_size_);
            }
            pub inline fn finishConnectIdentity(self: *const T) HRESULT {
                return @as(*const AsyncIConnectedIdentityProvider.VTable, @ptrCast(self.vtable)).Finish_ConnectIdentity(@as(*const AsyncIConnectedIdentityProvider, @ptrCast(self)));
            }
            pub inline fn beginDisconnectIdentity(self: *const T) HRESULT {
                return @as(*const AsyncIConnectedIdentityProvider.VTable, @ptrCast(self.vtable)).Begin_DisconnectIdentity(@as(*const AsyncIConnectedIdentityProvider, @ptrCast(self)));
            }
            pub inline fn finishDisconnectIdentity(self: *const T) HRESULT {
                return @as(*const AsyncIConnectedIdentityProvider.VTable, @ptrCast(self.vtable)).Finish_DisconnectIdentity(@as(*const AsyncIConnectedIdentityProvider, @ptrCast(self)));
            }
            pub inline fn beginIsConnected(self: *const T) HRESULT {
                return @as(*const AsyncIConnectedIdentityProvider.VTable, @ptrCast(self.vtable)).Begin_IsConnected(@as(*const AsyncIConnectedIdentityProvider, @ptrCast(self)));
            }
            pub inline fn finishIsConnected(self: *const T, connected_: ?*BOOL) HRESULT {
                return @as(*const AsyncIConnectedIdentityProvider.VTable, @ptrCast(self.vtable)).Finish_IsConnected(@as(*const AsyncIConnectedIdentityProvider, @ptrCast(self)), connected_);
            }
            pub inline fn beginGetUrl(self: *const T, identifier_: IDENTITY_URL, context_: ?*IBindCtx) HRESULT {
                return @as(*const AsyncIConnectedIdentityProvider.VTable, @ptrCast(self.vtable)).Begin_GetUrl(@as(*const AsyncIConnectedIdentityProvider, @ptrCast(self)), identifier_, context_);
            }
            pub inline fn finishGetUrl(self: *const T, post_data_: ?*VARIANT, url_: ?*?PWSTR) HRESULT {
                return @as(*const AsyncIConnectedIdentityProvider.VTable, @ptrCast(self.vtable)).Finish_GetUrl(@as(*const AsyncIConnectedIdentityProvider, @ptrCast(self)), post_data_, url_);
            }
            pub inline fn beginGetAccountState(self: *const T) HRESULT {
                return @as(*const AsyncIConnectedIdentityProvider.VTable, @ptrCast(self.vtable)).Begin_GetAccountState(@as(*const AsyncIConnectedIdentityProvider, @ptrCast(self)));
            }
            pub inline fn finishGetAccountState(self: *const T, p_state_: ?*ACCOUNT_STATE) HRESULT {
                return @as(*const AsyncIConnectedIdentityProvider.VTable, @ptrCast(self.vtable)).Finish_GetAccountState(@as(*const AsyncIConnectedIdentityProvider, @ptrCast(self)), p_state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IIdentityAuthentication_Value = Guid.initString("5e7ef254-979f-43b5-b74e-06e4eb7df0f9");
pub const IID_IIdentityAuthentication = &IID_IIdentityAuthentication_Value;
pub const IIdentityAuthentication = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetIdentityCredential: *const fn (
            self: *const IIdentityAuthentication,
            cred_buffer: ?[*:0]u8,
            cred_buffer_length: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ValidateIdentityCredential: *const fn (
            self: *const IIdentityAuthentication,
            cred_buffer: [*:0]u8,
            cred_buffer_length: u32,
            pp_identity_properties: ?*?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setIdentityCredential(self: *const T, cred_buffer_: ?[*:0]u8, cred_buffer_length_: u32) HRESULT {
                return @as(*const IIdentityAuthentication.VTable, @ptrCast(self.vtable)).SetIdentityCredential(@as(*const IIdentityAuthentication, @ptrCast(self)), cred_buffer_, cred_buffer_length_);
            }
            pub inline fn validateIdentityCredential(self: *const T, cred_buffer_: [*:0]u8, cred_buffer_length_: u32, pp_identity_properties_: ?*?*IPropertyStore) HRESULT {
                return @as(*const IIdentityAuthentication.VTable, @ptrCast(self.vtable)).ValidateIdentityCredential(@as(*const IIdentityAuthentication, @ptrCast(self)), cred_buffer_, cred_buffer_length_, pp_identity_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_AsyncIIdentityAuthentication_Value = Guid.initString("f9a2f918-feca-4e9c-9633-61cbf13ed34d");
pub const IID_AsyncIIdentityAuthentication = &IID_AsyncIIdentityAuthentication_Value;
pub const AsyncIIdentityAuthentication = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin_SetIdentityCredential: *const fn (
            self: *const AsyncIIdentityAuthentication,
            cred_buffer: ?[*:0]u8,
            cred_buffer_length: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_SetIdentityCredential: *const fn (
            self: *const AsyncIIdentityAuthentication,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_ValidateIdentityCredential: *const fn (
            self: *const AsyncIIdentityAuthentication,
            cred_buffer: [*:0]u8,
            cred_buffer_length: u32,
            pp_identity_properties: ?*?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_ValidateIdentityCredential: *const fn (
            self: *const AsyncIIdentityAuthentication,
            pp_identity_properties: ?*?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn beginSetIdentityCredential(self: *const T, cred_buffer_: ?[*:0]u8, cred_buffer_length_: u32) HRESULT {
                return @as(*const AsyncIIdentityAuthentication.VTable, @ptrCast(self.vtable)).Begin_SetIdentityCredential(@as(*const AsyncIIdentityAuthentication, @ptrCast(self)), cred_buffer_, cred_buffer_length_);
            }
            pub inline fn finishSetIdentityCredential(self: *const T) HRESULT {
                return @as(*const AsyncIIdentityAuthentication.VTable, @ptrCast(self.vtable)).Finish_SetIdentityCredential(@as(*const AsyncIIdentityAuthentication, @ptrCast(self)));
            }
            pub inline fn beginValidateIdentityCredential(self: *const T, cred_buffer_: [*:0]u8, cred_buffer_length_: u32, pp_identity_properties_: ?*?*IPropertyStore) HRESULT {
                return @as(*const AsyncIIdentityAuthentication.VTable, @ptrCast(self.vtable)).Begin_ValidateIdentityCredential(@as(*const AsyncIIdentityAuthentication, @ptrCast(self)), cred_buffer_, cred_buffer_length_, pp_identity_properties_);
            }
            pub inline fn finishValidateIdentityCredential(self: *const T, pp_identity_properties_: ?*?*IPropertyStore) HRESULT {
                return @as(*const AsyncIIdentityAuthentication.VTable, @ptrCast(self.vtable)).Finish_ValidateIdentityCredential(@as(*const AsyncIIdentityAuthentication, @ptrCast(self)), pp_identity_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_CoClassIdentityStore_Value = Guid.initString("30d49246-d217-465f-b00b-ac9ddd652eb7");
pub const CLSID_CoClassIdentityStore = &CLSID_CoClassIdentityStore_Value;

const CLSID_CIdentityProfileHandler_Value = Guid.initString("ecf5bf46-e3b6-449a-b56b-43f58f867814");
pub const CLSID_CIdentityProfileHandler = &CLSID_CIdentityProfileHandler_Value;

// TODO: this type is limited to platform 'windows6.1'
const IID_IIdentityStore_Value = Guid.initString("df586fa5-6f35-44f1-b209-b38e169772eb");
pub const IID_IIdentityStore = &IID_IIdentityStore_Value;
pub const IIdentityStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IIdentityStore,
            pdw_providers: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IIdentityStore,
            dw_provider: u32,
            p_prov_guid: ?*Guid,
            pp_identity_provider: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddToCache: *const fn (
            self: *const IIdentityStore,
            lpsz_unique_i_d: ?[*:0]const u16,
            provider_g_u_i_d: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertToSid: *const fn (
            self: *const IIdentityStore,
            lpsz_unique_i_d: ?[*:0]const u16,
            provider_g_u_i_d: ?*const Guid,
            cb_sid: u16,
            p_sid: ?[*:0]u8,
            pcb_required_sid: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateIdentities: *const fn (
            self: *const IIdentityStore,
            e_identity_type: IDENTITY_TYPE,
            p_filterkey: ?*const PROPERTYKEY,
            p_filter_prop_var_value: ?*const PROPVARIANT,
            pp_identity_enum: ?*?*IEnumUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IIdentityStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, pdw_providers_: ?*u32) HRESULT {
                return @as(*const IIdentityStore.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IIdentityStore, @ptrCast(self)), pdw_providers_);
            }
            pub inline fn getAt(self: *const T, dw_provider_: u32, p_prov_guid_: ?*Guid, pp_identity_provider_: ?*?*IUnknown) HRESULT {
                return @as(*const IIdentityStore.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IIdentityStore, @ptrCast(self)), dw_provider_, p_prov_guid_, pp_identity_provider_);
            }
            pub inline fn addToCache(self: *const T, lpsz_unique_i_d_: ?[*:0]const u16, provider_g_u_i_d_: ?*const Guid) HRESULT {
                return @as(*const IIdentityStore.VTable, @ptrCast(self.vtable)).AddToCache(@as(*const IIdentityStore, @ptrCast(self)), lpsz_unique_i_d_, provider_g_u_i_d_);
            }
            pub inline fn convertToSid(self: *const T, lpsz_unique_i_d_: ?[*:0]const u16, provider_g_u_i_d_: ?*const Guid, cb_sid_: u16, p_sid_: ?[*:0]u8, pcb_required_sid_: ?*u16) HRESULT {
                return @as(*const IIdentityStore.VTable, @ptrCast(self.vtable)).ConvertToSid(@as(*const IIdentityStore, @ptrCast(self)), lpsz_unique_i_d_, provider_g_u_i_d_, cb_sid_, p_sid_, pcb_required_sid_);
            }
            pub inline fn enumerateIdentities(self: *const T, e_identity_type_: IDENTITY_TYPE, p_filterkey_: ?*const PROPERTYKEY, p_filter_prop_var_value_: ?*const PROPVARIANT, pp_identity_enum_: ?*?*IEnumUnknown) HRESULT {
                return @as(*const IIdentityStore.VTable, @ptrCast(self.vtable)).EnumerateIdentities(@as(*const IIdentityStore, @ptrCast(self)), e_identity_type_, p_filterkey_, p_filter_prop_var_value_, pp_identity_enum_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IIdentityStore.VTable, @ptrCast(self.vtable)).Reset(@as(*const IIdentityStore, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_AsyncIIdentityStore_Value = Guid.initString("eefa1616-48de-4872-aa64-6e6206535a51");
pub const IID_AsyncIIdentityStore = &IID_AsyncIIdentityStore_Value;
pub const AsyncIIdentityStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin_GetCount: *const fn (
            self: *const AsyncIIdentityStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_GetCount: *const fn (
            self: *const AsyncIIdentityStore,
            pdw_providers: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_GetAt: *const fn (
            self: *const AsyncIIdentityStore,
            dw_provider: u32,
            p_prov_guid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_GetAt: *const fn (
            self: *const AsyncIIdentityStore,
            p_prov_guid: ?*Guid,
            pp_identity_provider: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_AddToCache: *const fn (
            self: *const AsyncIIdentityStore,
            lpsz_unique_i_d: ?[*:0]const u16,
            provider_g_u_i_d: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_AddToCache: *const fn (
            self: *const AsyncIIdentityStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_ConvertToSid: *const fn (
            self: *const AsyncIIdentityStore,
            lpsz_unique_i_d: ?[*:0]const u16,
            provider_g_u_i_d: ?*const Guid,
            cb_sid: u16,
            p_sid: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_ConvertToSid: *const fn (
            self: *const AsyncIIdentityStore,
            p_sid: ?*u8,
            pcb_required_sid: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_EnumerateIdentities: *const fn (
            self: *const AsyncIIdentityStore,
            e_identity_type: IDENTITY_TYPE,
            p_filterkey: ?*const PROPERTYKEY,
            p_filter_prop_var_value: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_EnumerateIdentities: *const fn (
            self: *const AsyncIIdentityStore,
            pp_identity_enum: ?*?*IEnumUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_Reset: *const fn (
            self: *const AsyncIIdentityStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_Reset: *const fn (
            self: *const AsyncIIdentityStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn beginGetCount(self: *const T) HRESULT {
                return @as(*const AsyncIIdentityStore.VTable, @ptrCast(self.vtable)).Begin_GetCount(@as(*const AsyncIIdentityStore, @ptrCast(self)));
            }
            pub inline fn finishGetCount(self: *const T, pdw_providers_: ?*u32) HRESULT {
                return @as(*const AsyncIIdentityStore.VTable, @ptrCast(self.vtable)).Finish_GetCount(@as(*const AsyncIIdentityStore, @ptrCast(self)), pdw_providers_);
            }
            pub inline fn beginGetAt(self: *const T, dw_provider_: u32, p_prov_guid_: ?*Guid) HRESULT {
                return @as(*const AsyncIIdentityStore.VTable, @ptrCast(self.vtable)).Begin_GetAt(@as(*const AsyncIIdentityStore, @ptrCast(self)), dw_provider_, p_prov_guid_);
            }
            pub inline fn finishGetAt(self: *const T, p_prov_guid_: ?*Guid, pp_identity_provider_: ?*?*IUnknown) HRESULT {
                return @as(*const AsyncIIdentityStore.VTable, @ptrCast(self.vtable)).Finish_GetAt(@as(*const AsyncIIdentityStore, @ptrCast(self)), p_prov_guid_, pp_identity_provider_);
            }
            pub inline fn beginAddToCache(self: *const T, lpsz_unique_i_d_: ?[*:0]const u16, provider_g_u_i_d_: ?*const Guid) HRESULT {
                return @as(*const AsyncIIdentityStore.VTable, @ptrCast(self.vtable)).Begin_AddToCache(@as(*const AsyncIIdentityStore, @ptrCast(self)), lpsz_unique_i_d_, provider_g_u_i_d_);
            }
            pub inline fn finishAddToCache(self: *const T) HRESULT {
                return @as(*const AsyncIIdentityStore.VTable, @ptrCast(self.vtable)).Finish_AddToCache(@as(*const AsyncIIdentityStore, @ptrCast(self)));
            }
            pub inline fn beginConvertToSid(self: *const T, lpsz_unique_i_d_: ?[*:0]const u16, provider_g_u_i_d_: ?*const Guid, cb_sid_: u16, p_sid_: ?*u8) HRESULT {
                return @as(*const AsyncIIdentityStore.VTable, @ptrCast(self.vtable)).Begin_ConvertToSid(@as(*const AsyncIIdentityStore, @ptrCast(self)), lpsz_unique_i_d_, provider_g_u_i_d_, cb_sid_, p_sid_);
            }
            pub inline fn finishConvertToSid(self: *const T, p_sid_: ?*u8, pcb_required_sid_: ?*u16) HRESULT {
                return @as(*const AsyncIIdentityStore.VTable, @ptrCast(self.vtable)).Finish_ConvertToSid(@as(*const AsyncIIdentityStore, @ptrCast(self)), p_sid_, pcb_required_sid_);
            }
            pub inline fn beginEnumerateIdentities(self: *const T, e_identity_type_: IDENTITY_TYPE, p_filterkey_: ?*const PROPERTYKEY, p_filter_prop_var_value_: ?*const PROPVARIANT) HRESULT {
                return @as(*const AsyncIIdentityStore.VTable, @ptrCast(self.vtable)).Begin_EnumerateIdentities(@as(*const AsyncIIdentityStore, @ptrCast(self)), e_identity_type_, p_filterkey_, p_filter_prop_var_value_);
            }
            pub inline fn finishEnumerateIdentities(self: *const T, pp_identity_enum_: ?*?*IEnumUnknown) HRESULT {
                return @as(*const AsyncIIdentityStore.VTable, @ptrCast(self.vtable)).Finish_EnumerateIdentities(@as(*const AsyncIIdentityStore, @ptrCast(self)), pp_identity_enum_);
            }
            pub inline fn beginReset(self: *const T) HRESULT {
                return @as(*const AsyncIIdentityStore.VTable, @ptrCast(self.vtable)).Begin_Reset(@as(*const AsyncIIdentityStore, @ptrCast(self)));
            }
            pub inline fn finishReset(self: *const T) HRESULT {
                return @as(*const AsyncIIdentityStore.VTable, @ptrCast(self.vtable)).Finish_Reset(@as(*const AsyncIIdentityStore, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IIdentityStoreEx_Value = Guid.initString("f9f9eb98-8f7f-4e38-9577-6980114ce32b");
pub const IID_IIdentityStoreEx = &IID_IIdentityStoreEx_Value;
pub const IIdentityStoreEx = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateConnectedIdentity: *const fn (
            self: *const IIdentityStoreEx,
            local_name: ?[*:0]const u16,
            connected_name: ?[*:0]const u16,
            provider_g_u_i_d: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteConnectedIdentity: *const fn (
            self: *const IIdentityStoreEx,
            connected_name: ?[*:0]const u16,
            provider_g_u_i_d: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createConnectedIdentity(self: *const T, local_name_: ?[*:0]const u16, connected_name_: ?[*:0]const u16, provider_g_u_i_d_: ?*const Guid) HRESULT {
                return @as(*const IIdentityStoreEx.VTable, @ptrCast(self.vtable)).CreateConnectedIdentity(@as(*const IIdentityStoreEx, @ptrCast(self)), local_name_, connected_name_, provider_g_u_i_d_);
            }
            pub inline fn deleteConnectedIdentity(self: *const T, connected_name_: ?[*:0]const u16, provider_g_u_i_d_: ?*const Guid) HRESULT {
                return @as(*const IIdentityStoreEx.VTable, @ptrCast(self.vtable)).DeleteConnectedIdentity(@as(*const IIdentityStoreEx, @ptrCast(self)), connected_name_, provider_g_u_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_AsyncIIdentityStoreEx_Value = Guid.initString("fca3af9a-8a07-4eae-8632-ec3de658a36a");
pub const IID_AsyncIIdentityStoreEx = &IID_AsyncIIdentityStoreEx_Value;
pub const AsyncIIdentityStoreEx = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin_CreateConnectedIdentity: *const fn (
            self: *const AsyncIIdentityStoreEx,
            local_name: ?[*:0]const u16,
            connected_name: ?[*:0]const u16,
            provider_g_u_i_d: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_CreateConnectedIdentity: *const fn (
            self: *const AsyncIIdentityStoreEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Begin_DeleteConnectedIdentity: *const fn (
            self: *const AsyncIIdentityStoreEx,
            connected_name: ?[*:0]const u16,
            provider_g_u_i_d: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish_DeleteConnectedIdentity: *const fn (
            self: *const AsyncIIdentityStoreEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn beginCreateConnectedIdentity(self: *const T, local_name_: ?[*:0]const u16, connected_name_: ?[*:0]const u16, provider_g_u_i_d_: ?*const Guid) HRESULT {
                return @as(*const AsyncIIdentityStoreEx.VTable, @ptrCast(self.vtable)).Begin_CreateConnectedIdentity(@as(*const AsyncIIdentityStoreEx, @ptrCast(self)), local_name_, connected_name_, provider_g_u_i_d_);
            }
            pub inline fn finishCreateConnectedIdentity(self: *const T) HRESULT {
                return @as(*const AsyncIIdentityStoreEx.VTable, @ptrCast(self.vtable)).Finish_CreateConnectedIdentity(@as(*const AsyncIIdentityStoreEx, @ptrCast(self)));
            }
            pub inline fn beginDeleteConnectedIdentity(self: *const T, connected_name_: ?[*:0]const u16, provider_g_u_i_d_: ?*const Guid) HRESULT {
                return @as(*const AsyncIIdentityStoreEx.VTable, @ptrCast(self.vtable)).Begin_DeleteConnectedIdentity(@as(*const AsyncIIdentityStoreEx, @ptrCast(self)), connected_name_, provider_g_u_i_d_);
            }
            pub inline fn finishDeleteConnectedIdentity(self: *const T) HRESULT {
                return @as(*const AsyncIIdentityStoreEx.VTable, @ptrCast(self.vtable)).Finish_DeleteConnectedIdentity(@as(*const AsyncIIdentityStoreEx, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (12)
//--------------------------------------------------------------------------------
const Guid = @import("../../../zig.zig").Guid;
const BOOL = @import("../../../foundation.zig").BOOL;
const HRESULT = @import("../../../foundation.zig").HRESULT;
const HWND = @import("../../../foundation.zig").HWND;
const IBindCtx = @import("../../../system/com.zig").IBindCtx;
const IEnumUnknown = @import("../../../system/com.zig").IEnumUnknown;
const IPropertyStore = @import("../../../ui/shell/properties_system.zig").IPropertyStore;
const IUnknown = @import("../../../system/com.zig").IUnknown;
const PROPERTYKEY = @import("../../../ui/shell/properties_system.zig").PROPERTYKEY;
const PROPVARIANT = @import("../../../system/com/structured_storage.zig").PROPVARIANT;
const PWSTR = @import("../../../foundation.zig").PWSTR;
const VARIANT = @import("../../../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
