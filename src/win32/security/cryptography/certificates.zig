//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (978)
//--------------------------------------------------------------------------------
pub const wszREGKEYNOSYSTEMCERTSVCPATH = "CurrentControlSet\\Services\\CertSvc";
pub const wszREGKEYCERTSVCPATH = "SYSTEM\\CurrentControlSet\\Services\\CertSvc";
pub const CA_DISP_INCOMPLETE = @as(u32, 0);
pub const CA_DISP_ERROR = @as(u32, 1);
pub const CA_DISP_REVOKED = @as(u32, 2);
pub const CA_DISP_VALID = @as(u32, 3);
pub const CA_DISP_INVALID = @as(u32, 4);
pub const CA_DISP_UNDER_SUBMISSION = @as(u32, 5);
pub const KRA_DISP_EXPIRED = @as(u32, 0);
pub const KRA_DISP_NOTFOUND = @as(u32, 1);
pub const KRA_DISP_REVOKED = @as(u32, 2);
pub const KRA_DISP_VALID = @as(u32, 3);
pub const KRA_DISP_INVALID = @as(u32, 4);
pub const KRA_DISP_UNTRUSTED = @as(u32, 5);
pub const KRA_DISP_NOTLOADED = @as(u32, 6);
pub const CA_ACCESS_MASKROLES = @as(u32, 255);
pub const CA_CRL_BASE = @as(u32, 1);
pub const CA_CRL_DELTA = @as(u32, 2);
pub const CA_CRL_REPUBLISH = @as(u32, 16);
pub const ICF_ALLOWFOREIGN = @as(u32, 65536);
pub const ICF_EXISTINGROW = @as(u32, 131072);
pub const IKF_OVERWRITE = @as(u32, 65536);
pub const wszOCSPCAPROP_CACERTIFICATE = "CACertificate";
pub const wszOCSPCAPROP_HASHALGORITHMID = "HashAlgorithmId";
pub const wszOCSPCAPROP_SIGNINGFLAGS = "SigningFlags";
pub const wszOCSPCAPROP_REMINDERDURATION = "ReminderDuration";
pub const wszOCSPCAPROP_SIGNINGCERTIFICATE = "SigningCertificate";
pub const wszOCSPCAPROP_CSPNAME = "CSPName";
pub const wszOCSPCAPROP_KEYSPEC = "KeySpec";
pub const wszOCSPCAPROP_ERRORCODE = "ErrorCode";
pub const wszOCSPCAPROP_PROVIDERCLSID = "ProviderCLSID";
pub const wszOCSPCAPROP_PROVIDERPROPERTIES = "Provider";
pub const wszOCSPCAPROP_LOCALREVOCATIONINFORMATION = "LocalRevocationInformation";
pub const wszOCSPCAPROP_SIGNINGCERTIFICATETEMPLATE = "SigningCertificateTemplate";
pub const wszOCSPCAPROP_CACONFIG = "CAConfig";
pub const wszOCSPPROP_LOGLEVEL = "LogLevel";
pub const wszOCSPPROP_DEBUG = "Debug";
pub const wszOCSPPROP_AUDITFILTER = "AuditFilter";
pub const wszOCSPPROP_ARRAYCONTROLLER = "ArrayController";
pub const wszOCSPPROP_ARRAYMEMBERS = "ArrayMembers";
pub const wszOCSPPROP_ENROLLPOLLINTERVAL = "EnrollPollInterval";
pub const wszOCSPISAPIPROP_VIRTUALROOTNAME = "VirtualRootName";
pub const wszOCSPISAPIPROP_NUMOFTHREADS = "NumOfThreads";
pub const wszOCSPISAPIPROP_NUMOFBACKENDCONNECTIONS = "NumOfBackendConnections";
pub const wszOCSPISAPIPROP_REFRESHRATE = "RefreshRate";
pub const wszOCSPISAPIPROP_MAXNUMOFCACHEENTRIES = "MaxNumOfCacheEntries";
pub const wszOCSPISAPIPROP_MAXAGE = "MaxAge";
pub const wszOCSPISAPIPROP_DEBUG = "ISAPIDebug";
pub const wszOCSPCOMMONPROP_REQFLAGS = "RequestFlags";
pub const wszOCSPCOMMONPROP_MAXINCOMINGMESSAGESIZE = "MaxIncomingMessageSize";
pub const wszOCSPCOMMONPROP_MAXNUMOFREQUESTENTRIES = "MaxNumOfRequestEntries";
pub const wszOCSPREVPROP_CRLURLTIMEOUT = "CrlUrlTimeOut";
pub const wszOCSPREVPROP_BASECRLURLS = "BaseCrlUrls";
pub const wszOCSPREVPROP_SERIALNUMBERSDIRS = "IssuedSerialNumbersDirectories";
pub const wszOCSPREVPROP_BASECRL = "BaseCrl";
pub const wszOCSPREVPROP_DELTACRLURLS = "DeltaCrlUrls";
pub const wszOCSPREVPROP_DELTACRL = "DeltaCrl";
pub const wszOCSPREVPROP_REFRESHTIMEOUT = "RefreshTimeOut";
pub const wszOCSPREVPROP_ERRORCODE = "RevocationErrorCode";
pub const szBACKUPANNOTATION = "Cert Server Backup Interface";
pub const szRESTOREANNOTATION = "Cert Server Restore Interface";
pub const CSBACKUP_TYPE_MASK = @as(u32, 3);
pub const CSRESTORE_TYPE_FULL = @as(u32, 1);
pub const CSRESTORE_TYPE_ONLINE = @as(u32, 2);
pub const CSRESTORE_TYPE_CATCHUP = @as(u32, 4);
pub const CSRESTORE_TYPE_MASK = @as(u32, 5);
pub const CSBACKUP_DISABLE_INCREMENTAL = @as(u32, 4294967295);
pub const CSBFT_DIRECTORY = @as(u32, 128);
pub const CSBFT_DATABASE_DIRECTORY = @as(u32, 64);
pub const CSBFT_LOG_DIRECTORY = @as(u32, 32);
pub const CSCONTROL_SHUTDOWN = @as(u64, 1);
pub const CSCONTROL_SUSPEND = @as(u64, 2);
pub const CSCONTROL_RESTART = @as(u64, 3);
pub const wszCONFIG_COMMONNAME = "CommonName";
pub const wszCONFIG_ORGUNIT = "OrgUnit";
pub const wszCONFIG_ORGANIZATION = "Organization";
pub const wszCONFIG_LOCALITY = "Locality";
pub const wszCONFIG_STATE = "State";
pub const wszCONFIG_COUNTRY = "Country";
pub const wszCONFIG_CONFIG = "Config";
pub const wszCONFIG_EXCHANGECERTIFICATE = "ExchangeCertificate";
pub const wszCONFIG_SIGNATURECERTIFICATE = "SignatureCertificate";
pub const wszCONFIG_DESCRIPTION = "Description";
pub const wszCONFIG_COMMENT = "Comment";
pub const wszCONFIG_SERVER = "Server";
pub const wszCONFIG_AUTHORITY = "Authority";
pub const wszCONFIG_SANITIZEDNAME = "SanitizedName";
pub const wszCONFIG_SHORTNAME = "ShortName";
pub const wszCONFIG_SANITIZEDSHORTNAME = "SanitizedShortName";
pub const wszCONFIG_FLAGS = "Flags";
pub const wszCONFIG_WEBENROLLMENTSERVERS = "WebEnrollmentServers";
pub const CAIF_DSENTRY = @as(u32, 1);
pub const CAIF_SHAREDFOLDERENTRY = @as(u32, 2);
pub const CAIF_REGISTRY = @as(u32, 4);
pub const CAIF_LOCAL = @as(u32, 8);
pub const CAIF_REGISTRYPARENT = @as(u32, 16);
pub const CR_IN_ENCODEANY = @as(u32, 255);
pub const CR_IN_ENCODEMASK = @as(u32, 255);
pub const CR_IN_FORMATANY = @as(u32, 0);
pub const CR_IN_PKCS10 = @as(u32, 256);
pub const CR_IN_KEYGEN = @as(u32, 512);
pub const CR_IN_PKCS7 = @as(u32, 768);
pub const CR_IN_CMC = @as(u32, 1024);
pub const CR_IN_CHALLENGERESPONSE = @as(u32, 1280);
pub const CR_IN_SIGNEDCERTIFICATETIMESTAMPLIST = @as(u32, 1536);
pub const CR_IN_FORMATMASK = @as(u32, 65280);
pub const CR_IN_SCEP = @as(u32, 65536);
pub const CR_IN_RPC = @as(u32, 131072);
pub const CR_IN_HTTP = @as(u32, 196608);
pub const CR_IN_FULLRESPONSE = @as(u32, 262144);
pub const CR_IN_CRLS = @as(u32, 524288);
pub const CR_IN_MACHINE = @as(u32, 1048576);
pub const CR_IN_ROBO = @as(u32, 2097152);
pub const CR_IN_CLIENTIDNONE = @as(u32, 4194304);
pub const CR_IN_CONNECTONLY = @as(u32, 8388608);
pub const CR_IN_RETURNCHALLENGE = @as(u32, 16777216);
pub const CR_IN_SCEPPOST = @as(u32, 33554432);
pub const CR_IN_CERTIFICATETRANSPARENCY = @as(u32, 67108864);
pub const CC_UIPICKCONFIGSKIPLOCALCA = @as(u32, 5);
pub const CR_DISP_REVOKED = @as(u32, 6);
pub const CR_OUT_BASE64REQUESTHEADER = @as(u32, 3);
pub const CR_OUT_HEX = @as(u32, 4);
pub const CR_OUT_HEXASCII = @as(u32, 5);
pub const CR_OUT_BASE64X509CRLHEADER = @as(u32, 9);
pub const CR_OUT_HEXADDR = @as(u32, 10);
pub const CR_OUT_HEXASCIIADDR = @as(u32, 11);
pub const CR_OUT_HEXRAW = @as(u32, 12);
pub const CR_OUT_ENCODEMASK = @as(u32, 255);
pub const CR_OUT_CHAIN = @as(u32, 256);
pub const CR_OUT_CRLS = @as(u32, 512);
pub const CR_OUT_NOCRLF = @as(u32, 1073741824);
pub const CR_OUT_NOCR = @as(u32, 2147483648);
pub const CR_GEMT_DEFAULT = @as(u32, 0);
pub const CR_GEMT_HRESULT_STRING = @as(u32, 1);
pub const CR_GEMT_HTTP_ERROR = @as(u32, 2);
pub const CR_PROP_NONE = @as(u32, 0);
pub const CR_PROP_FILEVERSION = @as(u32, 1);
pub const CR_PROP_PRODUCTVERSION = @as(u32, 2);
pub const CR_PROP_EXITCOUNT = @as(u32, 3);
pub const CR_PROP_EXITDESCRIPTION = @as(u32, 4);
pub const CR_PROP_POLICYDESCRIPTION = @as(u32, 5);
pub const CR_PROP_CANAME = @as(u32, 6);
pub const CR_PROP_SANITIZEDCANAME = @as(u32, 7);
pub const CR_PROP_SHAREDFOLDER = @as(u32, 8);
pub const CR_PROP_PARENTCA = @as(u32, 9);
pub const CR_PROP_CATYPE = @as(u32, 10);
pub const CR_PROP_CASIGCERTCOUNT = @as(u32, 11);
pub const CR_PROP_CASIGCERT = @as(u32, 12);
pub const CR_PROP_CASIGCERTCHAIN = @as(u32, 13);
pub const CR_PROP_CAXCHGCERTCOUNT = @as(u32, 14);
pub const CR_PROP_CAXCHGCERT = @as(u32, 15);
pub const CR_PROP_CAXCHGCERTCHAIN = @as(u32, 16);
pub const CR_PROP_BASECRL = @as(u32, 17);
pub const CR_PROP_DELTACRL = @as(u32, 18);
pub const CR_PROP_CACERTSTATE = @as(u32, 19);
pub const CR_PROP_CRLSTATE = @as(u32, 20);
pub const CR_PROP_CAPROPIDMAX = @as(u32, 21);
pub const CR_PROP_DNSNAME = @as(u32, 22);
pub const CR_PROP_ROLESEPARATIONENABLED = @as(u32, 23);
pub const CR_PROP_KRACERTUSEDCOUNT = @as(u32, 24);
pub const CR_PROP_KRACERTCOUNT = @as(u32, 25);
pub const CR_PROP_KRACERT = @as(u32, 26);
pub const CR_PROP_KRACERTSTATE = @as(u32, 27);
pub const CR_PROP_ADVANCEDSERVER = @as(u32, 28);
pub const CR_PROP_TEMPLATES = @as(u32, 29);
pub const CR_PROP_BASECRLPUBLISHSTATUS = @as(u32, 30);
pub const CR_PROP_DELTACRLPUBLISHSTATUS = @as(u32, 31);
pub const CR_PROP_CASIGCERTCRLCHAIN = @as(u32, 32);
pub const CR_PROP_CAXCHGCERTCRLCHAIN = @as(u32, 33);
pub const CR_PROP_CACERTSTATUSCODE = @as(u32, 34);
pub const CR_PROP_CAFORWARDCROSSCERT = @as(u32, 35);
pub const CR_PROP_CABACKWARDCROSSCERT = @as(u32, 36);
pub const CR_PROP_CAFORWARDCROSSCERTSTATE = @as(u32, 37);
pub const CR_PROP_CABACKWARDCROSSCERTSTATE = @as(u32, 38);
pub const CR_PROP_CACERTVERSION = @as(u32, 39);
pub const CR_PROP_SANITIZEDCASHORTNAME = @as(u32, 40);
pub const CR_PROP_CERTCDPURLS = @as(u32, 41);
pub const CR_PROP_CERTAIAURLS = @as(u32, 42);
pub const CR_PROP_CERTAIAOCSPURLS = @as(u32, 43);
pub const CR_PROP_LOCALENAME = @as(u32, 44);
pub const CR_PROP_SUBJECTTEMPLATE_OIDS = @as(u32, 45);
pub const CR_PROP_SCEPSERVERCERTS = @as(u32, 1000);
pub const CR_PROP_SCEPSERVERCAPABILITIES = @as(u32, 1001);
pub const CR_PROP_SCEPSERVERCERTSCHAIN = @as(u32, 1002);
pub const CR_PROP_SCEPMIN = @as(u32, 1000);
pub const CR_PROP_SCEPMAX = @as(u32, 1002);
pub const FR_PROP_CLAIMCHALLENGE = @as(u32, 22);
pub const EAN_NAMEOBJECTID = @as(u32, 2147483648);
pub const EANR_SUPPRESS_IA5CONVERSION = @as(u32, 2147483648);
pub const CERTENROLL_INDEX_BASE = @as(u32, 0);
pub const EXITEVENT_INVALID = @as(u32, 0);
pub const EXITEVENT_STARTUP = @as(u32, 128);
pub const EXITEVENT_CERTIMPORTED = @as(u32, 512);
pub const ENUMEXT_OBJECTID = @as(u32, 1);
pub const CMM_REFRESHONLY = @as(u32, 1);
pub const CMM_READONLY = @as(u32, 2);
pub const DBG_CERTSRV = @as(u32, 1);
pub const wszSERVICE_NAME = "CertSvc";
pub const wszREGKEYBASE = "SYSTEM\\CurrentControlSet\\Services\\CertSvc";
pub const wszREGKEYCONFIG = "Configuration";
pub const wszREGACTIVE = "Active";
pub const wszREGDIRECTORY = "ConfigurationDirectory";
pub const wszREGDBDIRECTORY = "DBDirectory";
pub const wszREGDBLOGDIRECTORY = "DBLogDirectory";
pub const wszREGDBSYSDIRECTORY = "DBSystemDirectory";
pub const wszREGDBTEMPDIRECTORY = "DBTempDirectory";
pub const wszREGDBSESSIONCOUNT = "DBSessionCount";
pub const wszREGDBMAXREADSESSIONCOUNT = "DBMaxReadSessionCount";
pub const wszREGDBFLAGS = "DBFlags";
pub const wszREGDBLASTFULLBACKUP = "DBLastFullBackup";
pub const wszREGDBLASTINCREMENTALBACKUP = "DBLastIncrementalBackup";
pub const wszREGDBLASTRECOVERY = "DBLastRecovery";
pub const wszREGWEBCLIENTCAMACHINE = "WebClientCAMachine";
pub const wszREGVERSION = "Version";
pub const wszREGWEBCLIENTCANAME = "WebClientCAName";
pub const wszREGWEBCLIENTCATYPE = "WebClientCAType";
pub const wszREGLDAPFLAGS = "LDAPFlags";
pub const wszREGCERTSRVDEBUG = "Debug";
pub const DBSESSIONCOUNTDEFAULT = @as(u32, 100);
pub const DBFLAGS_READONLY = @as(u32, 1);
pub const DBFLAGS_CREATEIFNEEDED = @as(u32, 2);
pub const DBFLAGS_CIRCULARLOGGING = @as(u32, 4);
pub const DBFLAGS_LAZYFLUSH = @as(u32, 8);
pub const DBFLAGS_MAXCACHESIZEX100 = @as(u32, 16);
pub const DBFLAGS_CHECKPOINTDEPTH60MB = @as(u32, 32);
pub const DBFLAGS_LOGBUFFERSLARGE = @as(u32, 64);
pub const DBFLAGS_LOGBUFFERSHUGE = @as(u32, 128);
pub const DBFLAGS_LOGFILESIZE16MB = @as(u32, 256);
pub const DBFLAGS_MULTITHREADTRANSACTIONS = @as(u32, 512);
pub const DBFLAGS_DISABLESNAPSHOTBACKUP = @as(u32, 1024);
pub const DBFLAGS_ENABLEVOLATILEREQUESTS = @as(u32, 2048);
pub const LDAPF_SSLENABLE = @as(u32, 1);
pub const LDAPF_SIGNDISABLE = @as(u32, 2);
pub const CSVER_MAJOR_WIN2K = @as(u32, 1);
pub const CSVER_MINOR_WIN2K = @as(u32, 1);
pub const CSVER_MAJOR_WHISTLER = @as(u32, 2);
pub const CSVER_MINOR_WHISTLER_BETA2 = @as(u32, 1);
pub const CSVER_MINOR_WHISTLER_BETA3 = @as(u32, 2);
pub const CSVER_MAJOR_LONGHORN = @as(u32, 3);
pub const CSVER_MINOR_LONGHORN_BETA1 = @as(u32, 1);
pub const CSVER_MAJOR_WIN7 = @as(u32, 4);
pub const CSVER_MINOR_WIN7 = @as(u32, 1);
pub const CSVER_MAJOR_WIN8 = @as(u32, 5);
pub const CSVER_MINOR_WIN8 = @as(u32, 1);
pub const CSVER_MAJOR_WINBLUE = @as(u32, 6);
pub const CSVER_MINOR_WINBLUE = @as(u32, 1);
pub const CSVER_MAJOR_THRESHOLD = @as(u32, 7);
pub const CSVER_MINOR_THRESHOLD = @as(u32, 1);
pub const CSVER_MAJOR = @as(u32, 7);
pub const CSVER_MINOR = @as(u32, 1);
pub const wszREGKEYRESTOREINPROGRESS = "RestoreInProgress";
pub const wszREGKEYDBPARAMETERS = "DBParameters";
pub const wszREGCADESCRIPTION = "CADescription";
pub const wszREGCACERTHASH = "CACertHash";
pub const wszREGCASERIALNUMBER = "CACertSerialNumber";
pub const wszREGCAXCHGCERTHASH = "CAXchgCertHash";
pub const wszREGKRACERTHASH = "KRACertHash";
pub const wszREGKRACERTCOUNT = "KRACertCount";
pub const wszREGKRAFLAGS = "KRAFlags";
pub const wszREGCATYPE = "CAType";
pub const wszREGCERTENROLLCOMPATIBLE = "CertEnrollCompatible";
pub const wszREGENFORCEX500NAMELENGTHS = "EnforceX500NameLengths";
pub const wszREGCOMMONNAME = "CommonName";
pub const wszREGCLOCKSKEWMINUTES = "ClockSkewMinutes";
pub const wszREGCRLNEXTPUBLISH = "CRLNextPublish";
pub const wszREGCRLPERIODSTRING = "CRLPeriod";
pub const wszREGCRLPERIODCOUNT = "CRLPeriodUnits";
pub const wszREGCRLOVERLAPPERIODSTRING = "CRLOverlapPeriod";
pub const wszREGCRLOVERLAPPERIODCOUNT = "CRLOverlapUnits";
pub const wszREGCRLDELTANEXTPUBLISH = "CRLDeltaNextPublish";
pub const wszREGCRLDELTAPERIODSTRING = "CRLDeltaPeriod";
pub const wszREGCRLDELTAPERIODCOUNT = "CRLDeltaPeriodUnits";
pub const wszREGCRLDELTAOVERLAPPERIODSTRING = "CRLDeltaOverlapPeriod";
pub const wszREGCRLDELTAOVERLAPPERIODCOUNT = "CRLDeltaOverlapUnits";
pub const wszREGCRLPUBLICATIONURLS = "CRLPublicationURLs";
pub const wszREGCACERTPUBLICATIONURLS = "CACertPublicationURLs";
pub const wszREGCAXCHGVALIDITYPERIODSTRING = "CAXchgValidityPeriod";
pub const wszREGCAXCHGVALIDITYPERIODCOUNT = "CAXchgValidityPeriodUnits";
pub const wszREGCAXCHGOVERLAPPERIODSTRING = "CAXchgOverlapPeriod";
pub const wszREGCAXCHGOVERLAPPERIODCOUNT = "CAXchgOverlapPeriodUnits";
pub const wszREGCRLPATH_OLD = "CRLPath";
pub const wszREGCRLEDITFLAGS = "CRLEditFlags";
pub const wszREGCRLFLAGS = "CRLFlags";
pub const wszREGCRLATTEMPTREPUBLISH = "CRLAttemptRepublish";
pub const wszREGENABLED = "Enabled";
pub const wszREGFORCETELETEX = "ForceTeletex";
pub const wszREGLOGLEVEL = "LogLevel";
pub const wszREGHIGHSERIAL = "HighSerial";
pub const wszREGPOLICYFLAGS = "PolicyFlags";
pub const wszREGNAMESEPARATOR = "SubjectNameSeparator";
pub const wszREGSUBJECTTEMPLATE = "SubjectTemplate";
pub const wszREGCAUSEDS = "UseDS";
pub const wszREGVALIDITYPERIODSTRING = "ValidityPeriod";
pub const wszREGVALIDITYPERIODCOUNT = "ValidityPeriodUnits";
pub const wszREGPARENTCAMACHINE = "ParentCAMachine";
pub const wszREGPARENTCANAME = "ParentCAName";
pub const wszREGREQUESTFILENAME = "RequestFileName";
pub const wszREGREQUESTID = "RequestId";
pub const wszREGREQUESTKEYCONTAINER = "RequestKeyContainer";
pub const wszREGREQUESTKEYINDEX = "RequestKeyIndex";
pub const wszREGCASERVERNAME = "CAServerName";
pub const wszREGCACERTFILENAME = "CACertFileName";
pub const wszREGCASECURITY = "Security";
pub const wszREGAUDITFILTER = "AuditFilter";
pub const wszREGOFFICERRIGHTS = "OfficerRights";
pub const wszENROLLMENTAGENTRIGHTS = "EnrollmentAgentRights";
pub const wszREGMAXINCOMINGMESSAGESIZE = "MaxIncomingMessageSize";
pub const wszREGMAXINCOMINGALLOCSIZE = "MaxIncomingAllocSize";
pub const wszREGROLESEPARATIONENABLED = "RoleSeparationEnabled";
pub const wszREGALTERNATEPUBLISHDOMAINS = "AlternatePublishDomains";
pub const wszREGSETUPSTATUS = "SetupStatus";
pub const wszREGINTERFACEFLAGS = "InterfaceFlags";
pub const wszREGDSCONFIGDN = "DSConfigDN";
pub const wszREGDSDOMAINDN = "DSDomainDN";
pub const wszREGVIEWAGEMINUTES = "ViewAgeMinutes";
pub const wszREGVIEWIDLEMINUTES = "ViewIdleMinutes";
pub const wszREGEKPUBLISTDIRECTORIES = "EndorsementKeyListDirectories";
pub const wszCERTIFICATETRANSPARENCYFLAGS = "CertificateTransparencyFlags";
pub const wszREGMAXSCTLISTSIZE = "MaxSCTListSize";
pub const wszREGCERTIFICATETRANSPARENCYINFOOID = "CTInformationExtensionOid";
pub const wszREGPROCESSINGFLAGS = "ProcessingFlags";
pub const wszREGUSEDEFINEDCACERTINREQ = "UseDefinedCACertInRequest";
pub const wszREGENABLEDEKUFORDEFINEDCACERT = "EnabledEKUForDefinedCACert";
pub const wszREGEKUOIDSFORPUBLISHEXPIREDCERTINCRL = "EKUOIDsForPublishExpiredCertInCRL";
pub const wszCRTFILENAMEEXT = ".crt";
pub const wszPFXFILENAMEEXT = ".p12";
pub const wszDATFILENAMEEXT = ".dat";
pub const wszLOGFILENAMEEXT = ".log";
pub const wszDBFILENAMEEXT = ".edb";
pub const szDBBASENAMEPARM = "edb";
pub const wszLOGPATH = "CertLog";
pub const wszDBBACKUPSUBDIR = "DataBase";
pub const wszDBBACKUPCERTBACKDAT = "certbkxp.dat";
pub const CCLOCKSKEWMINUTESDEFAULT = @as(u32, 10);
pub const CVIEWAGEMINUTESDEFAULT = @as(u32, 16);
pub const dwVALIDITYPERIODCOUNTDEFAULT_ROOT = @as(u32, 5);
pub const dwVALIDITYPERIODCOUNTDEFAULT_ENTERPRISE = @as(u32, 2);
pub const dwVALIDITYPERIODCOUNTDEFAULT_STANDALONE = @as(u32, 1);
pub const dwCAXCHGVALIDITYPERIODCOUNTDEFAULT = @as(u32, 1);
pub const dwCAXCHGOVERLAPPERIODCOUNTDEFAULT = @as(u32, 1);
pub const dwCRLPERIODCOUNTDEFAULT = @as(u32, 1);
pub const dwCRLOVERLAPPERIODCOUNTDEFAULT = @as(u32, 0);
pub const dwCRLDELTAPERIODCOUNTDEFAULT = @as(u32, 1);
pub const dwCRLDELTAOVERLAPPERIODCOUNTDEFAULT = @as(u32, 0);
pub const SETUP_SERVER_FLAG = @as(u32, 1);
pub const SETUP_CLIENT_FLAG = @as(u32, 2);
pub const SETUP_SUSPEND_FLAG = @as(u32, 4);
pub const SETUP_REQUEST_FLAG = @as(u32, 8);
pub const SETUP_ONLINE_FLAG = @as(u32, 16);
pub const SETUP_DENIED_FLAG = @as(u32, 32);
pub const SETUP_CREATEDB_FLAG = @as(u32, 64);
pub const SETUP_ATTEMPT_VROOT_CREATE = @as(u32, 128);
pub const SETUP_FORCECRL_FLAG = @as(u32, 256);
pub const SETUP_UPDATE_CAOBJECT_SVRTYPE = @as(u32, 512);
pub const SETUP_SERVER_UPGRADED_FLAG = @as(u32, 1024);
pub const SETUP_W2K_SECURITY_NOT_UPGRADED_FLAG = @as(u32, 2048);
pub const SETUP_SECURITY_CHANGED = @as(u32, 4096);
pub const SETUP_DCOM_SECURITY_UPDATED_FLAG = @as(u32, 8192);
pub const SETUP_SERVER_IS_UP_TO_DATE_FLAG = @as(u32, 16384);
pub const CRLF_DELTA_USE_OLDEST_UNEXPIRED_BASE = @as(u32, 1);
pub const CRLF_DELETE_EXPIRED_CRLS = @as(u32, 2);
pub const CRLF_CRLNUMBER_CRITICAL = @as(u32, 4);
pub const CRLF_REVCHECK_IGNORE_OFFLINE = @as(u32, 8);
pub const CRLF_IGNORE_INVALID_POLICIES = @as(u32, 16);
pub const CRLF_REBUILD_MODIFIED_SUBJECT_ONLY = @as(u32, 32);
pub const CRLF_SAVE_FAILED_CERTS = @as(u32, 64);
pub const CRLF_IGNORE_UNKNOWN_CMC_ATTRIBUTES = @as(u32, 128);
pub const CRLF_IGNORE_CROSS_CERT_TRUST_ERROR = @as(u32, 256);
pub const CRLF_PUBLISH_EXPIRED_CERT_CRLS = @as(u32, 512);
pub const CRLF_ENFORCE_ENROLLMENT_AGENT = @as(u32, 1024);
pub const CRLF_DISABLE_RDN_REORDER = @as(u32, 2048);
pub const CRLF_DISABLE_ROOT_CROSS_CERTS = @as(u32, 4096);
pub const CRLF_LOG_FULL_RESPONSE = @as(u32, 8192);
pub const CRLF_USE_XCHG_CERT_TEMPLATE = @as(u32, 16384);
pub const CRLF_USE_CROSS_CERT_TEMPLATE = @as(u32, 32768);
pub const CRLF_ALLOW_REQUEST_ATTRIBUTE_SUBJECT = @as(u32, 65536);
pub const CRLF_REVCHECK_IGNORE_NOREVCHECK = @as(u32, 131072);
pub const CRLF_PRESERVE_EXPIRED_CA_CERTS = @as(u32, 262144);
pub const CRLF_PRESERVE_REVOKED_CA_CERTS = @as(u32, 524288);
pub const CRLF_DISABLE_CHAIN_VERIFICATION = @as(u32, 1048576);
pub const CRLF_BUILD_ROOTCA_CRLENTRIES_BASEDONKEY = @as(u32, 2097152);
pub const KRAF_ENABLEFOREIGN = @as(u32, 1);
pub const KRAF_SAVEBADREQUESTKEY = @as(u32, 2);
pub const KRAF_ENABLEARCHIVEALL = @as(u32, 4);
pub const KRAF_DISABLEUSEDEFAULTPROVIDER = @as(u32, 8);
pub const IF_LOCKICERTREQUEST = @as(u32, 1);
pub const IF_NOREMOTEICERTREQUEST = @as(u32, 2);
pub const IF_NOLOCALICERTREQUEST = @as(u32, 4);
pub const IF_NORPCICERTREQUEST = @as(u32, 8);
pub const IF_NOREMOTEICERTADMIN = @as(u32, 16);
pub const IF_NOLOCALICERTADMIN = @as(u32, 32);
pub const IF_NOREMOTEICERTADMINBACKUP = @as(u32, 64);
pub const IF_NOLOCALICERTADMINBACKUP = @as(u32, 128);
pub const IF_NOSNAPSHOTBACKUP = @as(u32, 256);
pub const IF_ENFORCEENCRYPTICERTREQUEST = @as(u32, 512);
pub const IF_ENFORCEENCRYPTICERTADMIN = @as(u32, 1024);
pub const IF_ENABLEEXITKEYRETRIEVAL = @as(u32, 2048);
pub const IF_ENABLEADMINASAUDITOR = @as(u32, 4096);
pub const PROCFLG_NONE = @as(u32, 0);
pub const PROCFLG_ENFORCEGOODKEYS = @as(u32, 1);
pub const CSURL_SERVERPUBLISH = @as(u32, 1);
pub const CSURL_ADDTOCERTCDP = @as(u32, 2);
pub const CSURL_ADDTOFRESHESTCRL = @as(u32, 4);
pub const CSURL_ADDTOCRLCDP = @as(u32, 8);
pub const CSURL_PUBLISHRETRY = @as(u32, 16);
pub const CSURL_ADDTOCERTOCSP = @as(u32, 32);
pub const CSURL_SERVERPUBLISHDELTA = @as(u32, 64);
pub const CSURL_ADDTOIDP = @as(u32, 128);
pub const wszREGKEYCSP = "CSP";
pub const wszREGKEYENCRYPTIONCSP = "EncryptionCSP";
pub const wszREGKEYEXITMODULES = "ExitModules";
pub const wszREGKEYPOLICYMODULES = "PolicyModules";
pub const wszSECUREDATTRIBUTES = "SignedAttributes";
pub const wszzDEFAULTSIGNEDATTRIBUTES = "RequesterName\x00";
pub const wszREGBACKUPLOGDIRECTORY = "BackupLogDirectory";
pub const wszREGCHECKPOINTFILE = "CheckPointFile";
pub const wszREGHIGHLOGNUMBER = "HighLogNumber";
pub const wszREGLOWLOGNUMBER = "LowLogNumber";
pub const wszREGLOGPATH = "LogPath";
pub const wszREGRESTOREMAPCOUNT = "RestoreMapCount";
pub const wszREGRESTOREMAP = "RestoreMap";
pub const wszREGDATABASERECOVERED = "DatabaseRecovered";
pub const wszREGRESTORESTATUS = "RestoreStatus";
pub const wszREGB2ICERTMANAGEMODULE = "ICertManageModule";
pub const wszREGSP4DEFAULTCONFIGURATION = "DefaultConfiguration";
pub const wszREGSP4KEYSETNAME = "KeySetName";
pub const wszREGSP4SUBJECTNAMESEPARATOR = "SubjectNameSeparator";
pub const wszREGSP4NAMES = "Names";
pub const wszREGSP4QUERIES = "Queries";
pub const wszREGNETSCAPECERTTYPE = "NetscapeCertType";
pub const wszNETSCAPEREVOCATIONTYPE = "Netscape";
pub const wszREGPROVIDERTYPE = "ProviderType";
pub const wszREGPROVIDER = "Provider";
pub const wszHASHALGORITHM = "HashAlgorithm";
pub const wszENCRYPTIONALGORITHM = "EncryptionAlgorithm";
pub const wszMACHINEKEYSET = "MachineKeyset";
pub const wszREGKEYSIZE = "KeySize";
pub const wszREGSYMMETRICKEYSIZE = "SymmetricKeySize";
pub const wszCNGPUBLICKEYALGORITHM = "CNGPublicKeyAlgorithm";
pub const wszCNGHASHALGORITHM = "CNGHashAlgorithm";
pub const wszCNGENCRYPTIONALGORITHM = "CNGEncryptionAlgorithm";
pub const wszREGALTERNATESIGNATUREALGORITHM = "AlternateSignatureAlgorithm";
pub const szNAMESEPARATORDEFAULT = "\n";
pub const wszPERIODYEARS = "Years";
pub const wszPERIODMONTHS = "Months";
pub const wszPERIODWEEKS = "Weeks";
pub const wszPERIODDAYS = "Days";
pub const wszPERIODHOURS = "Hours";
pub const wszPERIODMINUTES = "Minutes";
pub const wszPERIODSECONDS = "Seconds";
pub const wszREGISSUERCERTURLFLAGS = "IssuerCertURLFlags";
pub const wszREGEDITFLAGS = "EditFlags";
pub const wszREGUPNMAP = "UPNMap";
pub const wszREGSUBJECTALTNAME = "SubjectAltName";
pub const wszREGSUBJECTALTNAME2 = "SubjectAltName2";
pub const wszREGREQUESTDISPOSITION = "RequestDisposition";
pub const wszREGCAPATHLENGTH = "CAPathLength";
pub const wszREGREVOCATIONTYPE = "RevocationType";
pub const wszREGLDAPREVOCATIONCRLURL_OLD = "LDAPRevocationCRLURL";
pub const wszREGREVOCATIONCRLURL_OLD = "RevocationCRLURL";
pub const wszREGFTPREVOCATIONCRLURL_OLD = "FTPRevocationCRLURL";
pub const wszREGFILEREVOCATIONCRLURL_OLD = "FileRevocationCRLURL";
pub const wszREGREVOCATIONURL = "RevocationURL";
pub const wszREGLDAPISSUERCERTURL_OLD = "LDAPIssuerCertURL";
pub const wszREGISSUERCERTURL_OLD = "IssuerCertURL";
pub const wszREGFTPISSUERCERTURL_OLD = "FTPIssuerCertURL";
pub const wszREGFILEISSUERCERTURL_OLD = "FileIssuerCertURL";
pub const wszREGENABLEREQUESTEXTENSIONLIST = "EnableRequestExtensionList";
pub const wszREGENABLEENROLLEEREQUESTEXTENSIONLIST = "EnableEnrolleeRequestExtensionList";
pub const wszREGDISABLEEXTENSIONLIST = "DisableExtensionList";
pub const wszREGEKUOIDSFORVOLATILEREQUESTS = "EKUOIDsforVolatileRequests";
pub const wszREGLDAPSESSIONOPTIONS = "LDAPSessionOptions";
pub const wszLDAPSESSIONOPTIONVALUE = "LDAPSessionOptionValue";
pub const wszREGDEFAULTSMIME = "DefaultSMIME";
pub const CAPATHLENGTH_INFINITE = @as(u32, 4294967295);
pub const REQDISP_PENDING = @as(u32, 0);
pub const REQDISP_ISSUE = @as(u32, 1);
pub const REQDISP_DENY = @as(u32, 2);
pub const REQDISP_USEREQUESTATTRIBUTE = @as(u32, 3);
pub const REQDISP_MASK = @as(u32, 255);
pub const REQDISP_PENDINGFIRST = @as(u32, 256);
pub const REQDISP_DEFAULT_ENTERPRISE = @as(u32, 1);
pub const REVEXT_CDPLDAPURL_OLD = @as(u32, 1);
pub const REVEXT_CDPHTTPURL_OLD = @as(u32, 2);
pub const REVEXT_CDPFTPURL_OLD = @as(u32, 4);
pub const REVEXT_CDPFILEURL_OLD = @as(u32, 8);
pub const REVEXT_CDPURLMASK_OLD = @as(u32, 255);
pub const REVEXT_CDPENABLE = @as(u32, 256);
pub const REVEXT_ASPENABLE = @as(u32, 512);
pub const REVEXT_DEFAULT_NODS = @as(u32, 256);
pub const REVEXT_DEFAULT_DS = @as(u32, 256);
pub const ISSCERT_LDAPURL_OLD = @as(u32, 1);
pub const ISSCERT_HTTPURL_OLD = @as(u32, 2);
pub const ISSCERT_FTPURL_OLD = @as(u32, 4);
pub const ISSCERT_FILEURL_OLD = @as(u32, 8);
pub const ISSCERT_URLMASK_OLD = @as(u32, 255);
pub const ISSCERT_ENABLE = @as(u32, 256);
pub const ISSCERT_DEFAULT_NODS = @as(u32, 256);
pub const ISSCERT_DEFAULT_DS = @as(u32, 256);
pub const EDITF_ENABLEREQUESTEXTENSIONS = @as(u32, 1);
pub const EDITF_REQUESTEXTENSIONLIST = @as(u32, 2);
pub const EDITF_DISABLEEXTENSIONLIST = @as(u32, 4);
pub const EDITF_ADDOLDKEYUSAGE = @as(u32, 8);
pub const EDITF_ADDOLDCERTTYPE = @as(u32, 16);
pub const EDITF_ATTRIBUTEENDDATE = @as(u32, 32);
pub const EDITF_BASICCONSTRAINTSCRITICAL = @as(u32, 64);
pub const EDITF_BASICCONSTRAINTSCA = @as(u32, 128);
pub const EDITF_ENABLEAKIKEYID = @as(u32, 256);
pub const EDITF_ATTRIBUTECA = @as(u32, 512);
pub const EDITF_IGNOREREQUESTERGROUP = @as(u32, 1024);
pub const EDITF_ENABLEAKIISSUERNAME = @as(u32, 2048);
pub const EDITF_ENABLEAKIISSUERSERIAL = @as(u32, 4096);
pub const EDITF_ENABLEAKICRITICAL = @as(u32, 8192);
pub const EDITF_SERVERUPGRADED = @as(u32, 16384);
pub const EDITF_ATTRIBUTEEKU = @as(u32, 32768);
pub const EDITF_ENABLEDEFAULTSMIME = @as(u32, 65536);
pub const EDITF_EMAILOPTIONAL = @as(u32, 131072);
pub const EDITF_ATTRIBUTESUBJECTALTNAME2 = @as(u32, 262144);
pub const EDITF_ENABLELDAPREFERRALS = @as(u32, 524288);
pub const EDITF_ENABLECHASECLIENTDC = @as(u32, 1048576);
pub const EDITF_AUDITCERTTEMPLATELOAD = @as(u32, 2097152);
pub const EDITF_DISABLEOLDOSCNUPN = @as(u32, 4194304);
pub const EDITF_DISABLELDAPPACKAGELIST = @as(u32, 8388608);
pub const EDITF_ENABLEUPNMAP = @as(u32, 16777216);
pub const EDITF_ENABLEOCSPREVNOCHECK = @as(u32, 33554432);
pub const EDITF_ENABLERENEWONBEHALFOF = @as(u32, 67108864);
pub const EDITF_ENABLEKEYENCIPHERMENTCACERT = @as(u32, 134217728);
pub const wszREGLDAPREVOCATIONDN_OLD = "LDAPRevocationDN";
pub const wszREGLDAPREVOCATIONDNTEMPLATE_OLD = "LDAPRevocationDNTemplate";
pub const wszCRLPUBLISHRETRYCOUNT = "CRLPublishRetryCount";
pub const wszREGCERTPUBLISHFLAGS = "PublishCertFlags";
pub const EXITPUB_FILE = @as(u32, 1);
pub const EXITPUB_ACTIVEDIRECTORY = @as(u32, 2);
pub const EXITPUB_REMOVEOLDCERTS = @as(u32, 16);
pub const EXITPUB_DEFAULT_ENTERPRISE = @as(u32, 2);
pub const EXITPUB_DEFAULT_STANDALONE = @as(u32, 1);
pub const wszCLASS_CERTADMIN = "CertificateAuthority.Admin";
pub const wszCLASS_CERTCONFIG = "CertificateAuthority.Config";
pub const wszCLASS_CERTGETCONFIG = "CertificateAuthority.GetConfig";
pub const wszCLASS_CERTENCODE = "CertificateAuthority.Encode";
pub const wszCLASS_CERTDBMEM = "CertificateAuthority.DBMem";
pub const wszCLASS_CERTREQUEST = "CertificateAuthority.Request";
pub const wszCLASS_CERTSERVEREXIT = "CertificateAuthority.ServerExit";
pub const wszCLASS_CERTSERVERPOLICY = "CertificateAuthority.ServerPolicy";
pub const wszCLASS_CERTVIEW = "CertificateAuthority.View";
pub const wszMICROSOFTCERTMODULE_PREFIX = "CertificateAuthority_MicrosoftDefault";
pub const wszCERTMANAGE_SUFFIX = "Manage";
pub const wszCERTEXITMODULE_POSTFIX = ".Exit";
pub const wszCERTPOLICYMODULE_POSTFIX = ".Policy";
pub const wszCAPOLICYFILE = "CAPolicy.inf";
pub const wszINFSECTION_CDP = "CRLDistributionPoint";
pub const wszINFSECTION_AIA = "AuthorityInformationAccess";
pub const wszINFSECTION_EKU = "EnhancedKeyUsageExtension";
pub const wszINFSECTION_CCDP = "CrossCertificateDistributionPointsExtension";
pub const wszINFSECTION_CERTSERVER = "certsrv_server";
pub const wszINFKEY_RENEWALKEYLENGTH = "RenewalKeyLength";
pub const wszINFKEY_RENEWALVALIDITYPERIODSTRING = "RenewalValidityPeriod";
pub const wszINFKEY_RENEWALVALIDITYPERIODCOUNT = "RenewalValidityPeriodUnits";
pub const wszINFKEY_UTF8 = "UTF8";
pub const wszINFKEY_CRLPERIODSTRING = "CRLPeriod";
pub const wszINFKEY_CRLPERIODCOUNT = "CRLPeriodUnits";
pub const wszINFKEY_CRLDELTAPERIODSTRING = "CRLDeltaPeriod";
pub const wszINFKEY_CRLDELTAPERIODCOUNT = "CRLDeltaPeriodUnits";
pub const wszINFKEY_LOADDEFAULTTEMPLATES = "LoadDefaultTemplates";
pub const wszINFKEY_ENABLEKEYCOUNTING = "EnableKeyCounting";
pub const wszINFKEY_FORCEUTF8 = "ForceUTF8";
pub const wszINFKEY_ALTERNATESIGNATUREALGORITHM = "AlternateSignatureAlgorithm";
pub const wszINFKEY_SHOWALLCSPS = "ShowAllCSPs";
pub const wszINFKEY_CRITICAL = "Critical";
pub const wszINFKEY_EMPTY = "Empty";
pub const wszINFKEY_CCDPSYNCDELTATIME = "SyncDeltaTime";
pub const wszINFSECTION_CAPOLICY = "CAPolicy";
pub const wszINFSECTION_POLICYSTATEMENT = "PolicyStatementExtension";
pub const wszINFSECTION_APPLICATIONPOLICYSTATEMENT = "ApplicationPolicyStatementExtension";
pub const wszINFKEY_POLICIES = "Policies";
pub const wszINFKEY_OID = "OID";
pub const wszINFKEY_NOTICE = "Notice";
pub const wszINFKEY_FLAGS = "Flags";
pub const wszINFSECTION_REQUESTATTRIBUTES = "RequestAttributes";
pub const wszINFSECTION_NAMECONSTRAINTS = "NameConstraintsExtension";
pub const wszINFKEY_INCLUDE = "Include";
pub const wszINFKEY_EXCLUDE = "Exclude";
pub const wszINFKEY_SUBTREE = "SubTree";
pub const wszINFKEY_UPN = "UPN";
pub const wszINFKEY_EMAIL = "EMail";
pub const wszINFKEY_DNS = "DNS";
pub const wszINFKEY_DIRECTORYNAME = "DirectoryName";
pub const wszINFKEY_URL = "URL";
pub const wszINFKEY_IPADDRESS = "IPAddress";
pub const wszINFKEY_REGISTEREDID = "RegisteredId";
pub const wszINFKEY_OTHERNAME = "OtherName";
pub const wszINFSECTION_POLICYMAPPINGS = "PolicyMappingsExtension";
pub const wszINFSECTION_APPLICATIONPOLICYMAPPINGS = "ApplicationPolicyMappingsExtension";
pub const wszINFSECTION_POLICYCONSTRAINTS = "PolicyConstraintsExtension";
pub const wszINFSECTION_APPLICATIONPOLICYCONSTRAINTS = "ApplicationPolicyConstraintsExtension";
pub const wszINFKEY_REQUIREEXPLICITPOLICY = "RequireExplicitPolicy";
pub const wszINFKEY_INHIBITPOLICYMAPPING = "InhibitPolicyMapping";
pub const wszINFSECTION_BASICCONSTRAINTS = "BasicConstraintsExtension";
pub const wszINFKEY_PATHLENGTH = "PathLength";
pub const wszINFSECTION_EXTENSIONS = "Extensions";
pub const wszINFSECTION_PROPERTIES = "Properties";
pub const wszINFKEY_CONTINUE = "_continue_";
pub const wszINFSECTION_NEWREQUEST = "NewRequest";
pub const wszINFKEY_SUBJECT = "Subject";
pub const wszINFKEY_SUBJECTNAMEFLAGS = "SubjectNameFlags";
pub const wszINFKEY_X500NAMEFLAGS = "X500NameFlags";
pub const wszINFKEY_EXPORTABLE = "Exportable";
pub const wszINFKEY_EXPORTABLEENCRYPTED = "ExportableEncrypted";
pub const wszINFKEY_HASHALGORITHM = "HashAlgorithm";
pub const wszINFKEY_KEYALGORITHM = "KeyAlgorithm";
pub const wszINFKEY_KEYALGORITHMPARMETERS = "KeyAlgorithmParameters";
pub const wszINFKEY_KEYCONTAINER = "KeyContainer";
pub const wszINFKEY_READERNAME = "ReaderName";
pub const wszINFKEY_KEYLENGTH = "KeyLength";
pub const wszINFKEY_LEGACYKEYSPEC = "KeySpec";
pub const wszINFKEY_KEYUSAGEEXTENSION = "KeyUsage";
pub const wszINFKEY_KEYUSAGEPROPERTY = "KeyUsageProperty";
pub const wszINFKEY_MACHINEKEYSET = "MachineKeySet";
pub const wszINFKEY_PRIVATEKEYARCHIVE = "PrivateKeyArchive";
pub const wszINFKEY_ENCRYPTIONALGORITHM = "EncryptionAlgorithm";
pub const wszINFKEY_ENCRYPTIONLENGTH = "EncryptionLength";
pub const wszINFKEY_PROVIDERNAME = "ProviderName";
pub const wszINFKEY_PROVIDERTYPE = "ProviderType";
pub const wszINFKEY_RENEWALCERT = "RenewalCert";
pub const wszINFKEY_REQUESTTYPE = "RequestType";
pub const wszINFKEY_SECURITYDESCRIPTOR = "SecurityDescriptor";
pub const wszINFKEY_SILENT = "Silent";
pub const wszINFKEY_SMIME = "SMIME";
pub const wszINFKEY_SUPPRESSDEFAULTS = "SuppressDefaults";
pub const wszINFKEY_USEEXISTINGKEY = "UseExistingKeySet";
pub const wszINFKEY_USERPROTECTED = "UserProtected";
pub const wszINFKEY_KEYPROTECTION = "KeyProtection";
pub const wszINFKEY_UICONTEXTMESSAGE = "UIContextMessage";
pub const wszINFKEY_FRIENDLYNAME = "FriendlyName";
pub const wszINFKEY_NOTBEFORE = "NotBefore";
pub const wszINFKEY_NOTAFTER = "NotAfter";
pub const wszINFKEY_ATTESTPRIVATEKEY = "AttestPrivateKey";
pub const wszINFKEY_PUBLICKEY = "PublicKey";
pub const wszINFKEY_PUBLICKEYPARAMETERS = "PublicKeyParameters";
pub const wszINFKEY_ECCKEYPARAMETERS = "EccKeyParameters";
pub const wszINFKEY_ECCKEYPARAMETERS_P = "EccKeyParameters_P";
pub const wszINFKEY_ECCKEYPARAMETERS_A = "EccKeyParameters_A";
pub const wszINFKEY_ECCKEYPARAMETERS_B = "EccKeyParameters_B";
pub const wszINFKEY_ECCKEYPARAMETERS_SEED = "EccKeyParameters_Seed";
pub const wszINFKEY_ECCKEYPARAMETERS_BASE = "EccKeyParameters_Base";
pub const wszINFKEY_ECCKEYPARAMETERS_ORDER = "EccKeyParameters_Order";
pub const wszINFKEY_ECCKEYPARAMETERS_COFACTOR = "EccKeyParameters_Cofactor";
pub const wszINFKEY_ECCKEYPARAMETERSTYPE = "EccKeyParametersType";
pub const wszINFKEY_SERIALNUMBER = "SerialNumber";
pub const wszINFKEY_CATHUMBPRINT = "CAThumbprint";
pub const wszINFKEY_CACERTS = "CACerts";
pub const wszINFKEY_CACAPABILITIES = "CACapabilities";
pub const wszINFKEY_CHALLENGEPASSWORD = "ChallengePassword";
pub const wszINFVALUE_REQUESTTYPE_PKCS10 = "PKCS10";
pub const wszINFVALUE_REQUESTTYPE_PKCS7 = "PKCS7";
pub const wszINFVALUE_REQUESTTYPE_CMC = "CMC";
pub const wszINFVALUE_REQUESTTYPE_CERT = "Cert";
pub const wszINFVALUE_REQUESTTYPE_SCEP = "SCEP";
pub const wszINFVALUE_ENDORSEMENTKEY = "EndorsementKey";
pub const wszREGEXITSMTPKEY = "SMTP";
pub const wszREGEXITSMTPTEMPLATES = "Templates";
pub const wszREGEXITSMTPEVENTFILTER = "EventFilter";
pub const wszREGEXITSMTPSERVER = "SMTPServer";
pub const wszREGEXITSMTPAUTHENTICATE = "SMTPAuthenticate";
pub const wszREGEXITDENIEDKEY = "Denied";
pub const wszREGEXITISSUEDKEY = "Issued";
pub const wszREGEXITPENDINGKEY = "Pending";
pub const wszREGEXITREVOKEDKEY = "Revoked";
pub const wszREGEXITCRLISSUEDKEY = "CRLIssued";
pub const wszREGEXITSHUTDOWNKEY = "Shutdown";
pub const wszREGEXITSTARTUPKEY = "Startup";
pub const wszREGEXITIMPORTEDKEY = "Imported";
pub const wszREGEXITSMTPFROM = "From";
pub const wszREGEXITSMTPTO = "To";
pub const wszREGEXITSMTPCC = "Cc";
pub const wszREGEXITTITLEFORMAT = "TitleFormat";
pub const wszREGEXITTITLEARG = "TitleArg";
pub const wszREGEXITBODYFORMAT = "BodyFormat";
pub const wszREGEXITBODYARG = "BodyArg";
pub const wszREGEXITPROPNOTFOUND = "???";
pub const wszREGKEYENROLLMENT = "Software\\Microsoft\\Cryptography\\AutoEnrollment";
pub const wszREGKEYGROUPPOLICYENROLLMENT = "Software\\Policies\\Microsoft\\Cryptography\\AutoEnrollment";
pub const wszREGMAXPENDINGREQUESTDAYS = "MaxPendingRequestDays";
pub const wszREGAELOGLEVEL_OLD = "AEEventLogLevel";
pub const wszREGENROLLFLAGS = "EnrollFlags";
pub const wszREGVERIFYFLAGS = "VerifyFlags";
pub const wszREGUNICODE = "Unicode";
pub const wszREGAIKCLOUDCAURL = "AIKCloudCAURL";
pub const wszREGAIKKEYALGORITHM = "AIKKeyAlgorithm";
pub const wszREGAIKKEYLENGTH = "AIKKeyLength";
pub const wszREGPRESERVESCEPDUMMYCERTS = "PreserveSCEPDummyCerts";
pub const wszREGALLPROVIDERS = "All";
pub const TP_MACHINEPOLICY = @as(u32, 1);
pub const wszREGKEYREPAIR = "KeyRepair";
pub const KR_ENABLE_MACHINE = @as(u32, 1);
pub const KR_ENABLE_USER = @as(u32, 2);
pub const wszPROPDISTINGUISHEDNAME = "DistinguishedName";
pub const wszPROPRAWNAME = "RawName";
pub const wszPROPCOUNTRY = "Country";
pub const wszPROPORGANIZATION = "Organization";
pub const wszPROPORGUNIT = "OrgUnit";
pub const wszPROPCOMMONNAME = "CommonName";
pub const wszPROPLOCALITY = "Locality";
pub const wszPROPSTATE = "State";
pub const wszPROPTITLE = "Title";
pub const wszPROPGIVENNAME = "GivenName";
pub const wszPROPINITIALS = "Initials";
pub const wszPROPSURNAME = "SurName";
pub const wszPROPDOMAINCOMPONENT = "DomainComponent";
pub const wszPROPEMAIL = "EMail";
pub const wszPROPSTREETADDRESS = "StreetAddress";
pub const wszPROPUNSTRUCTUREDNAME = "UnstructuredName";
pub const wszPROPUNSTRUCTUREDADDRESS = "UnstructuredAddress";
pub const wszPROPDEVICESERIALNUMBER = "DeviceSerialNumber";
pub const wszPROPSUBJECTDOT = "Subject.";
pub const wszPROPREQUESTDOT = "Request.";
pub const wszPROPREQUESTREQUESTID = "RequestID";
pub const wszPROPREQUESTRAWREQUEST = "RawRequest";
pub const wszPROPREQUESTRAWARCHIVEDKEY = "RawArchivedKey";
pub const wszPROPREQUESTARCHIVEDKEY = "ArchivedKey";
pub const wszPROPREQUESTKEYRECOVERYHASHES = "KeyRecoveryHashes";
pub const wszPROPREQUESTRAWOLDCERTIFICATE = "RawOldCertificate";
pub const wszPROPREQUESTATTRIBUTES = "RequestAttributes";
pub const wszPROPREQUESTTYPE = "RequestType";
pub const wszPROPREQUESTFLAGS = "RequestFlags";
pub const wszPROPREQUESTSTATUSCODE = "StatusCode";
pub const wszPROPREQUESTDISPOSITION = "Disposition";
pub const wszPROPREQUESTDISPOSITIONMESSAGE = "DispositionMessage";
pub const wszPROPREQUESTSUBMITTEDWHEN = "SubmittedWhen";
pub const wszPROPREQUESTRESOLVEDWHEN = "ResolvedWhen";
pub const wszPROPREQUESTREVOKEDWHEN = "RevokedWhen";
pub const wszPROPREQUESTREVOKEDEFFECTIVEWHEN = "RevokedEffectiveWhen";
pub const wszPROPREQUESTREVOKEDREASON = "RevokedReason";
pub const wszPROPREQUESTERNAME = "RequesterName";
pub const wszPROPCALLERNAME = "CallerName";
pub const wszPROPSIGNERPOLICIES = "SignerPolicies";
pub const wszPROPSIGNERAPPLICATIONPOLICIES = "SignerApplicationPolicies";
pub const wszPROPOFFICER = "Officer";
pub const wszPROPPUBLISHEXPIREDCERTINCRL = "PublishExpiredCertInCRL";
pub const wszPROPREQUESTERNAMEFROMOLDCERTIFICATE = "RequesterNameFromOldCertificate";
pub const wszPROPATTESTATIONCHALLENGE = "AttestationChallenge";
pub const wszPROPENDORSEMENTKEYHASH = "EndorsementKeyHash";
pub const wszPROPENDORSEMENTCERTIFICATEHASH = "EndorsementCertificateHash";
pub const wszPROPRAWPRECERTIFICATE = "RawPrecertificate";
pub const wszPROPCHALLENGE = "Challenge";
pub const wszPROPEXPECTEDCHALLENGE = "ExpectedChallenge";
pub const wszPROPDISPOSITION = "Disposition";
pub const wszPROPDISPOSITIONDENY = "Deny";
pub const wszPROPDISPOSITIONPENDING = "Pending";
pub const wszPROPVALIDITYPERIODSTRING = "ValidityPeriod";
pub const wszPROPVALIDITYPERIODCOUNT = "ValidityPeriodUnits";
pub const wszPROPEXPIRATIONDATE = "ExpirationDate";
pub const wszPROPCERTTYPE = "CertType";
pub const wszPROPCERTTEMPLATE = "CertificateTemplate";
pub const wszPROPCERTUSAGE = "CertificateUsage";
pub const wszPROPREQUESTOSVERSION = "RequestOSVersion";
pub const wszPROPREQUESTCSPPROVIDER = "RequestCSPProvider";
pub const wszPROPEXITCERTFILE = "CertFile";
pub const wszPROPCLIENTBROWSERMACHINE = "cbm";
pub const wszPROPCERTCLIENTMACHINE = "ccm";
pub const wszPROPCLIENTDCDNS = "cdc";
pub const wszPROPREQUESTMACHINEDNS = "rmd";
pub const wszPROPSUBJECTALTNAME2 = "san";
pub const wszPROPDNS = "dns";
pub const wszPROPDN = "dn";
pub const wszPROPURL = "url";
pub const wszPROPIPADDRESS = "ipaddress";
pub const wszPROPGUID = "guid";
pub const wszPROPOID = "oid";
pub const wszPROPUPN = "upn";
pub const szPROPASNTAG = "{asn}";
pub const wszPROPCRITICALTAG = "{critical}";
pub const wszPROPUTF8TAG = "{utf8}";
pub const wszPROPOCTETTAG = "{octet}";
pub const wszPROPHEXTAG = "{hex}";
pub const wszPROPTEXTTAG = "{text}";
pub const wszPROPDECIMALTAG = "{decimal}";
pub const wszPROPFILETAG = "{file}";
pub const wszAT_EKCERTINF = "@EKCert";
pub const wszAT_TESTROOT = "@TestRoot";
pub const wszPROPCATYPE = "CAType";
pub const wszPROPSANITIZEDCANAME = "SanitizedCAName";
pub const wszPROPSANITIZEDSHORTNAME = "SanitizedShortName";
pub const wszPROPMACHINEDNSNAME = "MachineDNSName";
pub const wszPROPMODULEREGLOC = "ModuleRegistryLocation";
pub const wszPROPUSEDS = "fUseDS";
pub const wszPROPDELTACRLSDISABLED = "fDeltaCRLsDisabled";
pub const wszPROPSERVERUPGRADED = "fServerUpgraded";
pub const wszPROPCONFIGDN = "ConfigDN";
pub const wszPROPDOMAINDN = "DomainDN";
pub const wszPROPLOGLEVEL = "LogLevel";
pub const wszPROPSESSIONCOUNT = "SessionCount";
pub const wszPROPTEMPLATECHANGESEQUENCENUMBER = "TemplateChangeSequenceNumber";
pub const wszPROPVOLATILEMODE = "VolatileMode";
pub const wszLOCALIZEDTIMEPERIODUNITS = "LocalizedTimePeriodUnits";
pub const wszPROPREQUESTERCAACCESS = "RequesterCAAccess";
pub const wszPROPUSERDN = "UserDN";
pub const wszPROPKEYARCHIVED = "KeyArchived";
pub const wszPROPCERTCOUNT = "CertCount";
pub const wszPROPRAWCACERTIFICATE = "RawCACertificate";
pub const wszPROPCERTSTATE = "CertState";
pub const wszPROPCERTSUFFIX = "CertSuffix";
pub const wszPROPRAWCRL = "RawCRL";
pub const wszPROPRAWDELTACRL = "RawDeltaCRL";
pub const wszPROPCRLINDEX = "CRLIndex";
pub const wszPROPCRLSTATE = "CRLState";
pub const wszPROPCRLSUFFIX = "CRLSuffix";
pub const wszPROPEVENTLOGTERSE = "EventLogTerse";
pub const wszPROPEVENTLOGERROR = "EventLogError";
pub const wszPROPEVENTLOGWARNING = "EventLogWarning";
pub const wszPROPEVENTLOGVERBOSE = "EventLogVerbose";
pub const wszPROPEVENTLOGEXHAUSTIVE = "EventLogExhaustive";
pub const wszPROPDCNAME = "DCName";
pub const wszPROPCROSSFOREST = "CrossForest";
pub const wszPROPREQUESTERSAMNAME = "RequesterSAMName";
pub const wszPROPREQUESTERUPN = "RequesterUPN";
pub const wszPROPREQUESTERDN = "RequesterDN";
pub const wszPROPSEAUDITID = "SEAuditId";
pub const wszPROPSEAUDITFILTER = "SEAuditFilter";
pub const wszPROPCERTIFICATEREQUESTID = "RequestID";
pub const wszPROPRAWCERTIFICATE = "RawCertificate";
pub const wszPROPCERTIFICATEHASH = "CertificateHash";
pub const wszPROPCERTIFICATETEMPLATE = "CertificateTemplate";
pub const wszPROPCERTIFICATEENROLLMENTFLAGS = "EnrollmentFlags";
pub const wszPROPCERTIFICATEGENERALFLAGS = "GeneralFlags";
pub const wszPROPCERTIFICATEPRIVATEKEYFLAGS = "PrivatekeyFlags";
pub const wszPROPCERTIFICATESERIALNUMBER = "SerialNumber";
pub const wszPROPCERTIFICATENOTBEFOREDATE = "NotBefore";
pub const wszPROPCERTIFICATENOTAFTERDATE = "NotAfter";
pub const wszPROPCERTIFICATESUBJECTKEYIDENTIFIER = "SubjectKeyIdentifier";
pub const wszPROPCERTIFICATERAWPUBLICKEY = "RawPublicKey";
pub const wszPROPCERTIFICATEPUBLICKEYLENGTH = "PublicKeyLength";
pub const wszPROPCERTIFICATEPUBLICKEYALGORITHM = "PublicKeyAlgorithm";
pub const wszPROPCERTIFICATERAWPUBLICKEYALGORITHMPARAMETERS = "RawPublicKeyAlgorithmParameters";
pub const wszPROPCERTIFICATEUPN = "UPN";
pub const wszPROPCERTIFICATETYPE = "CertificateType";
pub const wszPROPCERTIFICATERAWSMIMECAPABILITIES = "RawSMIMECapabilities";
pub const wszPROPNAMETYPE = "NameType";
pub const EXTENSION_CRITICAL_FLAG = @as(u32, 1);
pub const EXTENSION_DISABLE_FLAG = @as(u32, 2);
pub const EXTENSION_DELETE_FLAG = @as(u32, 4);
pub const EXTENSION_POLICY_MASK = @as(u32, 65535);
pub const EXTENSION_ORIGIN_REQUEST = @as(u32, 65536);
pub const EXTENSION_ORIGIN_POLICY = @as(u32, 131072);
pub const EXTENSION_ORIGIN_ADMIN = @as(u32, 196608);
pub const EXTENSION_ORIGIN_SERVER = @as(u32, 262144);
pub const EXTENSION_ORIGIN_RENEWALCERT = @as(u32, 327680);
pub const EXTENSION_ORIGIN_IMPORTEDCERT = @as(u32, 393216);
pub const EXTENSION_ORIGIN_PKCS7 = @as(u32, 458752);
pub const EXTENSION_ORIGIN_CMC = @as(u32, 524288);
pub const EXTENSION_ORIGIN_CACERT = @as(u32, 589824);
pub const EXTENSION_ORIGIN_MASK = @as(u32, 983040);
pub const wszPROPEXTREQUESTID = "ExtensionRequestId";
pub const wszPROPEXTNAME = "ExtensionName";
pub const wszPROPEXTFLAGS = "ExtensionFlags";
pub const wszPROPEXTRAWVALUE = "ExtensionRawValue";
pub const wszPROPATTRIBREQUESTID = "AttributeRequestId";
pub const wszPROPATTRIBNAME = "AttributeName";
pub const wszPROPATTRIBVALUE = "AttributeValue";
pub const wszPROPCRLROWID = "CRLRowId";
pub const wszPROPCRLNUMBER = "CRLNumber";
pub const wszPROPCRLMINBASE = "CRLMinBase";
pub const wszPROPCRLNAMEID = "CRLNameId";
pub const wszPROPCRLCOUNT = "CRLCount";
pub const wszPROPCRLTHISUPDATE = "CRLThisUpdate";
pub const wszPROPCRLNEXTUPDATE = "CRLNextUpdate";
pub const wszPROPCRLTHISPUBLISH = "CRLThisPublish";
pub const wszPROPCRLNEXTPUBLISH = "CRLNextPublish";
pub const wszPROPCRLEFFECTIVE = "CRLEffective";
pub const wszPROPCRLPROPAGATIONCOMPLETE = "CRLPropagationComplete";
pub const wszPROPCRLLASTPUBLISHED = "CRLLastPublished";
pub const wszPROPCRLPUBLISHATTEMPTS = "CRLPublishAttempts";
pub const wszPROPCRLPUBLISHFLAGS = "CRLPublishFlags";
pub const wszPROPCRLPUBLISHSTATUSCODE = "CRLPublishStatusCode";
pub const wszPROPCRLPUBLISHERROR = "CRLPublishError";
pub const wszPROPCRLRAWCRL = "CRLRawCRL";
pub const CPF_BASE = @as(u32, 1);
pub const CPF_DELTA = @as(u32, 2);
pub const CPF_COMPLETE = @as(u32, 4);
pub const CPF_SHADOW = @as(u32, 8);
pub const CPF_CASTORE_ERROR = @as(u32, 16);
pub const CPF_BADURL_ERROR = @as(u32, 32);
pub const CPF_MANUAL = @as(u32, 64);
pub const CPF_SIGNATURE_ERROR = @as(u32, 128);
pub const CPF_LDAP_ERROR = @as(u32, 256);
pub const CPF_FILE_ERROR = @as(u32, 512);
pub const CPF_FTP_ERROR = @as(u32, 1024);
pub const CPF_HTTP_ERROR = @as(u32, 2048);
pub const CPF_POSTPONED_BASE_LDAP_ERROR = @as(u32, 4096);
pub const CPF_POSTPONED_BASE_FILE_ERROR = @as(u32, 8192);
pub const PROPTYPE_MASK = @as(u32, 255);
pub const PROPCALLER_SERVER = @as(u32, 256);
pub const PROPCALLER_POLICY = @as(u32, 512);
pub const PROPCALLER_EXIT = @as(u32, 768);
pub const PROPCALLER_ADMIN = @as(u32, 1024);
pub const PROPCALLER_REQUEST = @as(u32, 1280);
pub const PROPCALLER_MASK = @as(u32, 3840);
pub const PROPFLAGS_INDEXED = @as(u32, 65536);
pub const CR_FLG_FORCETELETEX = @as(u32, 1);
pub const CR_FLG_RENEWAL = @as(u32, 2);
pub const CR_FLG_FORCEUTF8 = @as(u32, 4);
pub const CR_FLG_CAXCHGCERT = @as(u32, 8);
pub const CR_FLG_ENROLLONBEHALFOF = @as(u32, 16);
pub const CR_FLG_SUBJECTUNMODIFIED = @as(u32, 32);
pub const CR_FLG_VALIDENCRYPTEDKEYHASH = @as(u32, 64);
pub const CR_FLG_CACROSSCERT = @as(u32, 128);
pub const CR_FLG_ENFORCEUTF8 = @as(u32, 256);
pub const CR_FLG_DEFINEDCACERT = @as(u32, 512);
pub const CR_FLG_CHALLENGEPENDING = @as(u32, 1024);
pub const CR_FLG_CHALLENGESATISFIED = @as(u32, 2048);
pub const CR_FLG_TRUSTONUSE = @as(u32, 4096);
pub const CR_FLG_TRUSTEKCERT = @as(u32, 8192);
pub const CR_FLG_TRUSTEKKEY = @as(u32, 16384);
pub const CR_FLG_PUBLISHERROR = @as(u32, 2147483648);
pub const DB_DISP_ACTIVE = @as(u32, 8);
pub const DB_DISP_PENDING = @as(u32, 9);
pub const DB_DISP_QUEUE_MAX = @as(u32, 9);
pub const DB_DISP_FOREIGN = @as(u32, 12);
pub const DB_DISP_CA_CERT = @as(u32, 15);
pub const DB_DISP_CA_CERT_CHAIN = @as(u32, 16);
pub const DB_DISP_KRA_CERT = @as(u32, 17);
pub const DB_DISP_LOG_MIN = @as(u32, 20);
pub const DB_DISP_ISSUED = @as(u32, 20);
pub const DB_DISP_REVOKED = @as(u32, 21);
pub const DB_DISP_LOG_FAILED_MIN = @as(u32, 30);
pub const DB_DISP_ERROR = @as(u32, 30);
pub const DB_DISP_DENIED = @as(u32, 31);
pub const VR_PENDING = @as(u32, 0);
pub const VR_INSTANT_OK = @as(u32, 1);
pub const VR_INSTANT_BAD = @as(u32, 2);
pub const wszCERT_TYPE = "RequestType";
pub const wszCERT_TYPE_CLIENT = "Client";
pub const wszCERT_TYPE_SERVER = "Server";
pub const wszCERT_TYPE_CODESIGN = "CodeSign";
pub const wszCERT_TYPE_CUSTOMER = "SetCustomer";
pub const wszCERT_TYPE_MERCHANT = "SetMerchant";
pub const wszCERT_TYPE_PAYMENT = "SetPayment";
pub const wszCERT_VERSION = "Version";
pub const wszCERT_VERSION_1 = "1";
pub const wszCERT_VERSION_2 = "2";
pub const wszCERT_VERSION_3 = "3";
pub const CV_OUT_HEXRAW = @as(u32, 12);
pub const CV_OUT_ENCODEMASK = @as(u32, 255);
pub const CV_OUT_NOCRLF = @as(u32, 1073741824);
pub const CV_OUT_NOCR = @as(u32, 2147483648);
pub const CVR_SEEK_NONE = @as(u32, 0);
pub const CVR_SEEK_MASK = @as(u32, 255);
pub const CVR_SEEK_NODELTA = @as(u32, 4096);
pub const CVR_SORT_NONE = @as(u32, 0);
pub const CVR_SORT_ASCEND = @as(u32, 1);
pub const CVR_SORT_DESCEND = @as(u32, 2);
pub const CV_COLUMN_EXTENSION_DEFAULT = @as(i32, -4);
pub const CV_COLUMN_ATTRIBUTE_DEFAULT = @as(i32, -5);
pub const CV_COLUMN_CRL_DEFAULT = @as(i32, -6);
pub const CV_COLUMN_LOG_REVOKED_DEFAULT = @as(i32, -7);
pub const CVRC_TABLE_MASK = @as(u32, 61440);
pub const CVRC_TABLE_SHIFT = @as(u32, 12);
pub const CRYPT_ENUM_ALL_PROVIDERS = @as(u32, 1);
pub const XEPR_ENUM_FIRST = @as(i32, -1);
pub const XEPR_DATE = @as(u32, 5);
pub const XEPR_TEMPLATENAME = @as(u32, 6);
pub const XEPR_VERSION = @as(u32, 7);
pub const XEPR_V1TEMPLATENAME = @as(u32, 9);
pub const XEPR_V2TEMPLATEOID = @as(u32, 16);
pub const XEKL_KEYSIZE_DEFAULT = @as(u32, 4);
pub const XECP_STRING_PROPERTY = @as(u32, 1);
pub const XECI_DISABLE = @as(u32, 0);
pub const XECI_XENROLL = @as(u32, 1);
pub const XECI_AUTOENROLL = @as(u32, 2);
pub const XECI_REQWIZARD = @as(u32, 3);
pub const XECI_CERTREQ = @as(u32, 4);
pub const wszCMM_PROP_NAME = "Name";
pub const wszCMM_PROP_DESCRIPTION = "Description";
pub const wszCMM_PROP_COPYRIGHT = "Copyright";
pub const wszCMM_PROP_FILEVER = "File Version";
pub const wszCMM_PROP_PRODUCTVER = "Product Version";
pub const wszCMM_PROP_DISPLAY_HWND = "HWND";
pub const wszCMM_PROP_ISMULTITHREADED = "IsMultiThreaded";

//--------------------------------------------------------------------------------
// Section: Types (344)
//--------------------------------------------------------------------------------
pub const CERT_VIEW_COLUMN_INDEX = enum(i32) {
    LOG_DEFAULT = -2,
    LOG_FAILED_DEFAULT = -3,
    QUEUE_DEFAULT = -1,
};
pub const CV_COLUMN_LOG_DEFAULT = CERT_VIEW_COLUMN_INDEX.LOG_DEFAULT;
pub const CV_COLUMN_LOG_FAILED_DEFAULT = CERT_VIEW_COLUMN_INDEX.LOG_FAILED_DEFAULT;
pub const CV_COLUMN_QUEUE_DEFAULT = CERT_VIEW_COLUMN_INDEX.QUEUE_DEFAULT;

pub const CERT_DELETE_ROW_FLAGS = enum(u32) {
    EXPIRED = 1,
    REQUEST_LAST_CHANGED = 2,
};
pub const CDR_EXPIRED = CERT_DELETE_ROW_FLAGS.EXPIRED;
pub const CDR_REQUEST_LAST_CHANGED = CERT_DELETE_ROW_FLAGS.REQUEST_LAST_CHANGED;

pub const FULL_RESPONSE_PROPERTY_ID = enum(u32) {
    NONE = 0,
    FULLRESPONSE = 1,
    STATUSINFOCOUNT = 2,
    BODYPARTSTRING = 3,
    STATUS = 4,
    STATUSSTRING = 5,
    OTHERINFOCHOICE = 6,
    FAILINFO = 7,
    PENDINFOTOKEN = 8,
    PENDINFOTIME = 9,
    ISSUEDCERTIFICATEHASH = 10,
    ISSUEDCERTIFICATE = 11,
    ISSUEDCERTIFICATECHAIN = 12,
    ISSUEDCERTIFICATECRLCHAIN = 13,
    ENCRYPTEDKEYHASH = 14,
    FULLRESPONSENOPKCS7 = 15,
    CAEXCHANGECERTIFICATEHASH = 16,
    CAEXCHANGECERTIFICATE = 17,
    CAEXCHANGECERTIFICATECHAIN = 18,
    CAEXCHANGECERTIFICATECRLCHAIN = 19,
    ATTESTATIONCHALLENGE = 20,
    ATTESTATIONPROVIDERNAME = 21,
};
pub const FR_PROP_NONE = FULL_RESPONSE_PROPERTY_ID.NONE;
pub const FR_PROP_FULLRESPONSE = FULL_RESPONSE_PROPERTY_ID.FULLRESPONSE;
pub const FR_PROP_STATUSINFOCOUNT = FULL_RESPONSE_PROPERTY_ID.STATUSINFOCOUNT;
pub const FR_PROP_BODYPARTSTRING = FULL_RESPONSE_PROPERTY_ID.BODYPARTSTRING;
pub const FR_PROP_STATUS = FULL_RESPONSE_PROPERTY_ID.STATUS;
pub const FR_PROP_STATUSSTRING = FULL_RESPONSE_PROPERTY_ID.STATUSSTRING;
pub const FR_PROP_OTHERINFOCHOICE = FULL_RESPONSE_PROPERTY_ID.OTHERINFOCHOICE;
pub const FR_PROP_FAILINFO = FULL_RESPONSE_PROPERTY_ID.FAILINFO;
pub const FR_PROP_PENDINFOTOKEN = FULL_RESPONSE_PROPERTY_ID.PENDINFOTOKEN;
pub const FR_PROP_PENDINFOTIME = FULL_RESPONSE_PROPERTY_ID.PENDINFOTIME;
pub const FR_PROP_ISSUEDCERTIFICATEHASH = FULL_RESPONSE_PROPERTY_ID.ISSUEDCERTIFICATEHASH;
pub const FR_PROP_ISSUEDCERTIFICATE = FULL_RESPONSE_PROPERTY_ID.ISSUEDCERTIFICATE;
pub const FR_PROP_ISSUEDCERTIFICATECHAIN = FULL_RESPONSE_PROPERTY_ID.ISSUEDCERTIFICATECHAIN;
pub const FR_PROP_ISSUEDCERTIFICATECRLCHAIN = FULL_RESPONSE_PROPERTY_ID.ISSUEDCERTIFICATECRLCHAIN;
pub const FR_PROP_ENCRYPTEDKEYHASH = FULL_RESPONSE_PROPERTY_ID.ENCRYPTEDKEYHASH;
pub const FR_PROP_FULLRESPONSENOPKCS7 = FULL_RESPONSE_PROPERTY_ID.FULLRESPONSENOPKCS7;
pub const FR_PROP_CAEXCHANGECERTIFICATEHASH = FULL_RESPONSE_PROPERTY_ID.CAEXCHANGECERTIFICATEHASH;
pub const FR_PROP_CAEXCHANGECERTIFICATE = FULL_RESPONSE_PROPERTY_ID.CAEXCHANGECERTIFICATE;
pub const FR_PROP_CAEXCHANGECERTIFICATECHAIN = FULL_RESPONSE_PROPERTY_ID.CAEXCHANGECERTIFICATECHAIN;
pub const FR_PROP_CAEXCHANGECERTIFICATECRLCHAIN = FULL_RESPONSE_PROPERTY_ID.CAEXCHANGECERTIFICATECRLCHAIN;
pub const FR_PROP_ATTESTATIONCHALLENGE = FULL_RESPONSE_PROPERTY_ID.ATTESTATIONCHALLENGE;
pub const FR_PROP_ATTESTATIONPROVIDERNAME = FULL_RESPONSE_PROPERTY_ID.ATTESTATIONPROVIDERNAME;

pub const CVRC_COLUMN = enum(u32) {
    SCHEMA = 0,
    RESULT = 1,
    VALUE = 2,
    MASK = 4095,
};
pub const CVRC_COLUMN_SCHEMA = CVRC_COLUMN.SCHEMA;
pub const CVRC_COLUMN_RESULT = CVRC_COLUMN.RESULT;
pub const CVRC_COLUMN_VALUE = CVRC_COLUMN.VALUE;
pub const CVRC_COLUMN_MASK = CVRC_COLUMN.MASK;

pub const CERT_IMPORT_FLAGS = enum(u32) {
    ASE64HEADER = 0,
    ASE64 = 1,
    INARY = 2,
};
pub const CR_IN_BASE64HEADER = CERT_IMPORT_FLAGS.ASE64HEADER;
pub const CR_IN_BASE64 = CERT_IMPORT_FLAGS.ASE64;
pub const CR_IN_BINARY = CERT_IMPORT_FLAGS.INARY;

pub const CERT_GET_CONFIG_FLAGS = enum(u32) {
    DEFAULTCONFIG = 0,
    FIRSTCONFIG = 2,
    LOCALACTIVECONFIG = 4,
    LOCALCONFIG = 3,
    UIPICKCONFIG = 1,
    UIPICKCONFIGSKIPLOCALCA_ = 5,
};
pub const CC_DEFAULTCONFIG = CERT_GET_CONFIG_FLAGS.DEFAULTCONFIG;
pub const CC_FIRSTCONFIG = CERT_GET_CONFIG_FLAGS.FIRSTCONFIG;
pub const CC_LOCALACTIVECONFIG = CERT_GET_CONFIG_FLAGS.LOCALACTIVECONFIG;
pub const CC_LOCALCONFIG = CERT_GET_CONFIG_FLAGS.LOCALCONFIG;
pub const CC_UIPICKCONFIG = CERT_GET_CONFIG_FLAGS.UIPICKCONFIG;
pub const CC_UIPICKCONFIGSKIPLOCALCA_ = CERT_GET_CONFIG_FLAGS.UIPICKCONFIGSKIPLOCALCA_;

pub const ENUM_CERT_COLUMN_VALUE_FLAGS = enum(u32) {
    BASE64 = 1,
    BASE64HEADER = 0,
    BASE64REQUESTHEADER = 3,
    BASE64X509CRLHEADER = 9,
    BINARY = 2,
    HEX = 4,
    HEXADDR = 10,
    HEXASCII = 5,
    HEXASCIIADDR = 11,
};
pub const CV_OUT_BASE64 = ENUM_CERT_COLUMN_VALUE_FLAGS.BASE64;
pub const CV_OUT_BASE64HEADER = ENUM_CERT_COLUMN_VALUE_FLAGS.BASE64HEADER;
pub const CV_OUT_BASE64REQUESTHEADER = ENUM_CERT_COLUMN_VALUE_FLAGS.BASE64REQUESTHEADER;
pub const CV_OUT_BASE64X509CRLHEADER = ENUM_CERT_COLUMN_VALUE_FLAGS.BASE64X509CRLHEADER;
pub const CV_OUT_BINARY = ENUM_CERT_COLUMN_VALUE_FLAGS.BINARY;
pub const CV_OUT_HEX = ENUM_CERT_COLUMN_VALUE_FLAGS.HEX;
pub const CV_OUT_HEXADDR = ENUM_CERT_COLUMN_VALUE_FLAGS.HEXADDR;
pub const CV_OUT_HEXASCII = ENUM_CERT_COLUMN_VALUE_FLAGS.HEXASCII;
pub const CV_OUT_HEXASCIIADDR = ENUM_CERT_COLUMN_VALUE_FLAGS.HEXASCIIADDR;

pub const PENDING_REQUEST_DESIRED_PROPERTY = enum(u32) {
    CADNS = 1,
    CAFRIENDLYNAME = 3,
    CANAME = 2,
    HASH = 8,
    REQUESTID = 4,
};
pub const XEPR_CADNS = PENDING_REQUEST_DESIRED_PROPERTY.CADNS;
pub const XEPR_CAFRIENDLYNAME = PENDING_REQUEST_DESIRED_PROPERTY.CAFRIENDLYNAME;
pub const XEPR_CANAME = PENDING_REQUEST_DESIRED_PROPERTY.CANAME;
pub const XEPR_HASH = PENDING_REQUEST_DESIRED_PROPERTY.HASH;
pub const XEPR_REQUESTID = PENDING_REQUEST_DESIRED_PROPERTY.REQUESTID;

pub const CERTADMIN_GET_ROLES_FLAGS = enum(u32) {
    ADMIN = 1,
    AUDITOR = 4,
    ENROLL = 512,
    OFFICER = 2,
    OPERATOR = 8,
    READ = 256,
    _,
    pub fn initFlags(o: struct {
        ADMIN: u1 = 0,
        AUDITOR: u1 = 0,
        ENROLL: u1 = 0,
        OFFICER: u1 = 0,
        OPERATOR: u1 = 0,
        READ: u1 = 0,
    }) CERTADMIN_GET_ROLES_FLAGS {
        return @as(CERTADMIN_GET_ROLES_FLAGS, @enumFromInt((if (o.ADMIN == 1) @intFromEnum(CERTADMIN_GET_ROLES_FLAGS.ADMIN) else 0) | (if (o.AUDITOR == 1) @intFromEnum(CERTADMIN_GET_ROLES_FLAGS.AUDITOR) else 0) | (if (o.ENROLL == 1) @intFromEnum(CERTADMIN_GET_ROLES_FLAGS.ENROLL) else 0) | (if (o.OFFICER == 1) @intFromEnum(CERTADMIN_GET_ROLES_FLAGS.OFFICER) else 0) | (if (o.OPERATOR == 1) @intFromEnum(CERTADMIN_GET_ROLES_FLAGS.OPERATOR) else 0) | (if (o.READ == 1) @intFromEnum(CERTADMIN_GET_ROLES_FLAGS.READ) else 0)));
    }
};
pub const CA_ACCESS_ADMIN = CERTADMIN_GET_ROLES_FLAGS.ADMIN;
pub const CA_ACCESS_AUDITOR = CERTADMIN_GET_ROLES_FLAGS.AUDITOR;
pub const CA_ACCESS_ENROLL = CERTADMIN_GET_ROLES_FLAGS.ENROLL;
pub const CA_ACCESS_OFFICER = CERTADMIN_GET_ROLES_FLAGS.OFFICER;
pub const CA_ACCESS_OPERATOR = CERTADMIN_GET_ROLES_FLAGS.OPERATOR;
pub const CA_ACCESS_READ = CERTADMIN_GET_ROLES_FLAGS.READ;

pub const CR_DISP = enum(u32) {
    DENIED = 2,
    ERROR = 1,
    INCOMPLETE = 0,
    ISSUED = 3,
    ISSUED_OUT_OF_BAND = 4,
    UNDER_SUBMISSION = 5,
};
pub const CR_DISP_DENIED = CR_DISP.DENIED;
pub const CR_DISP_ERROR = CR_DISP.ERROR;
pub const CR_DISP_INCOMPLETE = CR_DISP.INCOMPLETE;
pub const CR_DISP_ISSUED = CR_DISP.ISSUED;
pub const CR_DISP_ISSUED_OUT_OF_BAND = CR_DISP.ISSUED_OUT_OF_BAND;
pub const CR_DISP_UNDER_SUBMISSION = CR_DISP.UNDER_SUBMISSION;

pub const XEKL_KEYSIZE = enum(u32) {
    MIN = 1,
    MAX = 2,
    INC = 3,
};
pub const XEKL_KEYSIZE_MIN = XEKL_KEYSIZE.MIN;
pub const XEKL_KEYSIZE_MAX = XEKL_KEYSIZE.MAX;
pub const XEKL_KEYSIZE_INC = XEKL_KEYSIZE.INC;

pub const CERT_CREATE_REQUEST_FLAGS = enum(u32) {
    CMC = 3,
    PKCS10_V1_5 = 4,
    PKCS10_V2_0 = 1,
    PKCS7 = 2,
};
pub const XECR_CMC = CERT_CREATE_REQUEST_FLAGS.CMC;
pub const XECR_PKCS10_V1_5 = CERT_CREATE_REQUEST_FLAGS.PKCS10_V1_5;
pub const XECR_PKCS10_V2_0 = CERT_CREATE_REQUEST_FLAGS.PKCS10_V2_0;
pub const XECR_PKCS7 = CERT_CREATE_REQUEST_FLAGS.PKCS7;

pub const CERT_EXIT_EVENT_MASK = enum(u32) {
    CERTDENIED = 4,
    CERTISSUED = 1,
    CERTPENDING = 2,
    CERTRETRIEVEPENDING = 16,
    CERTREVOKED = 8,
    CRLISSUED = 32,
    SHUTDOWN = 64,
    _,
    pub fn initFlags(o: struct {
        CERTDENIED: u1 = 0,
        CERTISSUED: u1 = 0,
        CERTPENDING: u1 = 0,
        CERTRETRIEVEPENDING: u1 = 0,
        CERTREVOKED: u1 = 0,
        CRLISSUED: u1 = 0,
        SHUTDOWN: u1 = 0,
    }) CERT_EXIT_EVENT_MASK {
        return @as(CERT_EXIT_EVENT_MASK, @enumFromInt((if (o.CERTDENIED == 1) @intFromEnum(CERT_EXIT_EVENT_MASK.CERTDENIED) else 0) | (if (o.CERTISSUED == 1) @intFromEnum(CERT_EXIT_EVENT_MASK.CERTISSUED) else 0) | (if (o.CERTPENDING == 1) @intFromEnum(CERT_EXIT_EVENT_MASK.CERTPENDING) else 0) | (if (o.CERTRETRIEVEPENDING == 1) @intFromEnum(CERT_EXIT_EVENT_MASK.CERTRETRIEVEPENDING) else 0) | (if (o.CERTREVOKED == 1) @intFromEnum(CERT_EXIT_EVENT_MASK.CERTREVOKED) else 0) | (if (o.CRLISSUED == 1) @intFromEnum(CERT_EXIT_EVENT_MASK.CRLISSUED) else 0) | (if (o.SHUTDOWN == 1) @intFromEnum(CERT_EXIT_EVENT_MASK.SHUTDOWN) else 0)));
    }
};
pub const EXITEVENT_CERTDENIED = CERT_EXIT_EVENT_MASK.CERTDENIED;
pub const EXITEVENT_CERTISSUED = CERT_EXIT_EVENT_MASK.CERTISSUED;
pub const EXITEVENT_CERTPENDING = CERT_EXIT_EVENT_MASK.CERTPENDING;
pub const EXITEVENT_CERTRETRIEVEPENDING = CERT_EXIT_EVENT_MASK.CERTRETRIEVEPENDING;
pub const EXITEVENT_CERTREVOKED = CERT_EXIT_EVENT_MASK.CERTREVOKED;
pub const EXITEVENT_CRLISSUED = CERT_EXIT_EVENT_MASK.CRLISSUED;
pub const EXITEVENT_SHUTDOWN = CERT_EXIT_EVENT_MASK.SHUTDOWN;

pub const ADDED_CERT_TYPE = enum(u32) {
    @"1" = 1,
    @"2" = 2,
};
pub const XECT_EXTENSION_V1 = ADDED_CERT_TYPE.@"1";
pub const XECT_EXTENSION_V2 = ADDED_CERT_TYPE.@"2";

pub const CVRC_TABLE = enum(u32) {
    ATTRIBUTES = 16384,
    CRL = 20480,
    EXTENSIONS = 12288,
    REQCERT = 0,
};
pub const CVRC_TABLE_ATTRIBUTES = CVRC_TABLE.ATTRIBUTES;
pub const CVRC_TABLE_CRL = CVRC_TABLE.CRL;
pub const CVRC_TABLE_EXTENSIONS = CVRC_TABLE.EXTENSIONS;
pub const CVRC_TABLE_REQCERT = CVRC_TABLE.REQCERT;

pub const CERT_PROPERTY_TYPE = enum(u32) {
    BINARY = 3,
    DATE = 2,
    LONG = 1,
    STRING = 4,
};
pub const PROPTYPE_BINARY = CERT_PROPERTY_TYPE.BINARY;
pub const PROPTYPE_DATE = CERT_PROPERTY_TYPE.DATE;
pub const PROPTYPE_LONG = CERT_PROPERTY_TYPE.LONG;
pub const PROPTYPE_STRING = CERT_PROPERTY_TYPE.STRING;

pub const CERT_ALT_NAME = enum(u32) {
    RFC822_NAME = 2,
    DNS_NAME = 3,
    URL = 7,
    REGISTERED_ID = 9,
    DIRECTORY_NAME = 5,
    IP_ADDRESS = 8,
    OTHER_NAME = 1,
};
pub const CERT_ALT_NAME_RFC822_NAME = CERT_ALT_NAME.RFC822_NAME;
pub const CERT_ALT_NAME_DNS_NAME = CERT_ALT_NAME.DNS_NAME;
pub const CERT_ALT_NAME_URL = CERT_ALT_NAME.URL;
pub const CERT_ALT_NAME_REGISTERED_ID = CERT_ALT_NAME.REGISTERED_ID;
pub const CERT_ALT_NAME_DIRECTORY_NAME = CERT_ALT_NAME.DIRECTORY_NAME;
pub const CERT_ALT_NAME_IP_ADDRESS = CERT_ALT_NAME.IP_ADDRESS;
pub const CERT_ALT_NAME_OTHER_NAME = CERT_ALT_NAME.OTHER_NAME;

pub const CSBACKUP_TYPE = enum(u32) {
    FULL = 1,
    LOGS_ONLY = 2,
};
pub const CSBACKUP_TYPE_FULL = CSBACKUP_TYPE.FULL;
pub const CSBACKUP_TYPE_LOGS_ONLY = CSBACKUP_TYPE.LOGS_ONLY;

pub const XEKL_KEYSPEC = enum(u32) {
    KEYX = 1,
    SIG = 2,
};
pub const XEKL_KEYSPEC_KEYX = XEKL_KEYSPEC.KEYX;
pub const XEKL_KEYSPEC_SIG = XEKL_KEYSPEC.SIG;

pub const CERT_REQUEST_OUT_TYPE = enum(u32) {
    ASE64HEADER = 0,
    ASE64 = 1,
    INARY = 2,
};
pub const CR_OUT_BASE64HEADER = CERT_REQUEST_OUT_TYPE.ASE64HEADER;
pub const CR_OUT_BASE64 = CERT_REQUEST_OUT_TYPE.ASE64;
pub const CR_OUT_BINARY = CERT_REQUEST_OUT_TYPE.INARY;

pub const CERT_VIEW_SEEK_OPERATOR_FLAGS = enum(u32) {
    EQ = 1,
    LE = 4,
    LT = 2,
    GE = 8,
    GT = 16,
};
pub const CVR_SEEK_EQ = CERT_VIEW_SEEK_OPERATOR_FLAGS.EQ;
pub const CVR_SEEK_LE = CERT_VIEW_SEEK_OPERATOR_FLAGS.LE;
pub const CVR_SEEK_LT = CERT_VIEW_SEEK_OPERATOR_FLAGS.LT;
pub const CVR_SEEK_GE = CERT_VIEW_SEEK_OPERATOR_FLAGS.GE;
pub const CVR_SEEK_GT = CERT_VIEW_SEEK_OPERATOR_FLAGS.GT;

const CLSID_CCertAdmin_Value = Guid.initString("37eabaf0-7fb6-11d0-8817-00a0c903b83c");
pub const CLSID_CCertAdmin = &CLSID_CCertAdmin_Value;

const CLSID_CCertView_Value = Guid.initString("a12d0f7a-1e84-11d1-9bd6-00c04fb683fa");
pub const CLSID_CCertView = &CLSID_CCertView_Value;

const CLSID_OCSPPropertyCollection_Value = Guid.initString("f935a528-ba8a-4dd9-ba79-f283275cb2de");
pub const CLSID_OCSPPropertyCollection = &CLSID_OCSPPropertyCollection_Value;

const CLSID_OCSPAdmin_Value = Guid.initString("d3f73511-92c9-47cb-8ff2-8d891a7c4de4");
pub const CLSID_OCSPAdmin = &CLSID_OCSPAdmin_Value;

// TODO: this type is limited to platform 'windowsServer2003'
const IID_IEnumCERTVIEWCOLUMN_Value = Guid.initString("9c735be2-57a5-11d1-9bdb-00c04fb683fa");
pub const IID_IEnumCERTVIEWCOLUMN = &IID_IEnumCERTVIEWCOLUMN_Value;
pub const IEnumCERTVIEWCOLUMN = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Next: *const fn (
            self: *const IEnumCERTVIEWCOLUMN,
            p_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn (
            self: *const IEnumCERTVIEWCOLUMN,
            pstr_out: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayName: *const fn (
            self: *const IEnumCERTVIEWCOLUMN,
            pstr_out: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: *const fn (
            self: *const IEnumCERTVIEWCOLUMN,
            p_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsIndexed: *const fn (
            self: *const IEnumCERTVIEWCOLUMN,
            p_indexed: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxLength: *const fn (
            self: *const IEnumCERTVIEWCOLUMN,
            p_max_length: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn (
            self: *const IEnumCERTVIEWCOLUMN,
            flags: ENUM_CERT_COLUMN_VALUE_FLAGS,
            pvar_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumCERTVIEWCOLUMN,
            celt: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumCERTVIEWCOLUMN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumCERTVIEWCOLUMN,
            ppenum: ?*?*IEnumCERTVIEWCOLUMN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn next(self: *const T, p_index_: ?*i32) HRESULT {
                return @as(*const IEnumCERTVIEWCOLUMN.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumCERTVIEWCOLUMN, @ptrCast(self)), p_index_);
            }
            pub inline fn getName(self: *const T, pstr_out_: ?*?BSTR) HRESULT {
                return @as(*const IEnumCERTVIEWCOLUMN.VTable, @ptrCast(self.vtable)).GetName(@as(*const IEnumCERTVIEWCOLUMN, @ptrCast(self)), pstr_out_);
            }
            pub inline fn getDisplayName(self: *const T, pstr_out_: ?*?BSTR) HRESULT {
                return @as(*const IEnumCERTVIEWCOLUMN.VTable, @ptrCast(self.vtable)).GetDisplayName(@as(*const IEnumCERTVIEWCOLUMN, @ptrCast(self)), pstr_out_);
            }
            pub inline fn getType(self: *const T, p_type_: ?*i32) HRESULT {
                return @as(*const IEnumCERTVIEWCOLUMN.VTable, @ptrCast(self.vtable)).GetType(@as(*const IEnumCERTVIEWCOLUMN, @ptrCast(self)), p_type_);
            }
            pub inline fn isIndexed(self: *const T, p_indexed_: ?*i32) HRESULT {
                return @as(*const IEnumCERTVIEWCOLUMN.VTable, @ptrCast(self.vtable)).IsIndexed(@as(*const IEnumCERTVIEWCOLUMN, @ptrCast(self)), p_indexed_);
            }
            pub inline fn getMaxLength(self: *const T, p_max_length_: ?*i32) HRESULT {
                return @as(*const IEnumCERTVIEWCOLUMN.VTable, @ptrCast(self.vtable)).GetMaxLength(@as(*const IEnumCERTVIEWCOLUMN, @ptrCast(self)), p_max_length_);
            }
            pub inline fn getValue(self: *const T, flags_: ENUM_CERT_COLUMN_VALUE_FLAGS, pvar_value_: ?*VARIANT) HRESULT {
                return @as(*const IEnumCERTVIEWCOLUMN.VTable, @ptrCast(self.vtable)).GetValue(@as(*const IEnumCERTVIEWCOLUMN, @ptrCast(self)), flags_, pvar_value_);
            }
            pub inline fn skip(self: *const T, celt_: i32) HRESULT {
                return @as(*const IEnumCERTVIEWCOLUMN.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumCERTVIEWCOLUMN, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumCERTVIEWCOLUMN.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumCERTVIEWCOLUMN, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumCERTVIEWCOLUMN) HRESULT {
                return @as(*const IEnumCERTVIEWCOLUMN.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumCERTVIEWCOLUMN, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_IEnumCERTVIEWATTRIBUTE_Value = Guid.initString("e77db656-7653-11d1-9bde-00c04fb683fa");
pub const IID_IEnumCERTVIEWATTRIBUTE = &IID_IEnumCERTVIEWATTRIBUTE_Value;
pub const IEnumCERTVIEWATTRIBUTE = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Next: *const fn (
            self: *const IEnumCERTVIEWATTRIBUTE,
            p_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn (
            self: *const IEnumCERTVIEWATTRIBUTE,
            pstr_out: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn (
            self: *const IEnumCERTVIEWATTRIBUTE,
            pstr_out: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumCERTVIEWATTRIBUTE,
            celt: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumCERTVIEWATTRIBUTE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumCERTVIEWATTRIBUTE,
            ppenum: ?*?*IEnumCERTVIEWATTRIBUTE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn next(self: *const T, p_index_: ?*i32) HRESULT {
                return @as(*const IEnumCERTVIEWATTRIBUTE.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumCERTVIEWATTRIBUTE, @ptrCast(self)), p_index_);
            }
            pub inline fn getName(self: *const T, pstr_out_: ?*?BSTR) HRESULT {
                return @as(*const IEnumCERTVIEWATTRIBUTE.VTable, @ptrCast(self.vtable)).GetName(@as(*const IEnumCERTVIEWATTRIBUTE, @ptrCast(self)), pstr_out_);
            }
            pub inline fn getValue(self: *const T, pstr_out_: ?*?BSTR) HRESULT {
                return @as(*const IEnumCERTVIEWATTRIBUTE.VTable, @ptrCast(self.vtable)).GetValue(@as(*const IEnumCERTVIEWATTRIBUTE, @ptrCast(self)), pstr_out_);
            }
            pub inline fn skip(self: *const T, celt_: i32) HRESULT {
                return @as(*const IEnumCERTVIEWATTRIBUTE.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumCERTVIEWATTRIBUTE, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumCERTVIEWATTRIBUTE.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumCERTVIEWATTRIBUTE, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumCERTVIEWATTRIBUTE) HRESULT {
                return @as(*const IEnumCERTVIEWATTRIBUTE.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumCERTVIEWATTRIBUTE, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_IEnumCERTVIEWEXTENSION_Value = Guid.initString("e7dd1466-7653-11d1-9bde-00c04fb683fa");
pub const IID_IEnumCERTVIEWEXTENSION = &IID_IEnumCERTVIEWEXTENSION_Value;
pub const IEnumCERTVIEWEXTENSION = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Next: *const fn (
            self: *const IEnumCERTVIEWEXTENSION,
            p_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn (
            self: *const IEnumCERTVIEWEXTENSION,
            pstr_out: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn (
            self: *const IEnumCERTVIEWEXTENSION,
            p_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn (
            self: *const IEnumCERTVIEWEXTENSION,
            type: CERT_PROPERTY_TYPE,
            flags: ENUM_CERT_COLUMN_VALUE_FLAGS,
            pvar_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumCERTVIEWEXTENSION,
            celt: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumCERTVIEWEXTENSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumCERTVIEWEXTENSION,
            ppenum: ?*?*IEnumCERTVIEWEXTENSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn next(self: *const T, p_index_: ?*i32) HRESULT {
                return @as(*const IEnumCERTVIEWEXTENSION.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumCERTVIEWEXTENSION, @ptrCast(self)), p_index_);
            }
            pub inline fn getName(self: *const T, pstr_out_: ?*?BSTR) HRESULT {
                return @as(*const IEnumCERTVIEWEXTENSION.VTable, @ptrCast(self.vtable)).GetName(@as(*const IEnumCERTVIEWEXTENSION, @ptrCast(self)), pstr_out_);
            }
            pub inline fn getFlags(self: *const T, p_flags_: ?*i32) HRESULT {
                return @as(*const IEnumCERTVIEWEXTENSION.VTable, @ptrCast(self.vtable)).GetFlags(@as(*const IEnumCERTVIEWEXTENSION, @ptrCast(self)), p_flags_);
            }
            pub inline fn getValue(self: *const T, type_: CERT_PROPERTY_TYPE, flags_: ENUM_CERT_COLUMN_VALUE_FLAGS, pvar_value_: ?*VARIANT) HRESULT {
                return @as(*const IEnumCERTVIEWEXTENSION.VTable, @ptrCast(self.vtable)).GetValue(@as(*const IEnumCERTVIEWEXTENSION, @ptrCast(self)), type_, flags_, pvar_value_);
            }
            pub inline fn skip(self: *const T, celt_: i32) HRESULT {
                return @as(*const IEnumCERTVIEWEXTENSION.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumCERTVIEWEXTENSION, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumCERTVIEWEXTENSION.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumCERTVIEWEXTENSION, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumCERTVIEWEXTENSION) HRESULT {
                return @as(*const IEnumCERTVIEWEXTENSION.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumCERTVIEWEXTENSION, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_IEnumCERTVIEWROW_Value = Guid.initString("d1157f4c-5af2-11d1-9bdc-00c04fb683fa");
pub const IID_IEnumCERTVIEWROW = &IID_IEnumCERTVIEWROW_Value;
pub const IEnumCERTVIEWROW = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Next: *const fn (
            self: *const IEnumCERTVIEWROW,
            p_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCertViewColumn: *const fn (
            self: *const IEnumCERTVIEWROW,
            ppenum: ?*?*IEnumCERTVIEWCOLUMN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCertViewAttribute: *const fn (
            self: *const IEnumCERTVIEWROW,
            flags: i32,
            ppenum: ?*?*IEnumCERTVIEWATTRIBUTE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCertViewExtension: *const fn (
            self: *const IEnumCERTVIEWROW,
            flags: i32,
            ppenum: ?*?*IEnumCERTVIEWEXTENSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumCERTVIEWROW,
            celt: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumCERTVIEWROW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumCERTVIEWROW,
            ppenum: ?*?*IEnumCERTVIEWROW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxIndex: *const fn (
            self: *const IEnumCERTVIEWROW,
            p_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn next(self: *const T, p_index_: ?*i32) HRESULT {
                return @as(*const IEnumCERTVIEWROW.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumCERTVIEWROW, @ptrCast(self)), p_index_);
            }
            pub inline fn enumCertViewColumn(self: *const T, ppenum_: ?*?*IEnumCERTVIEWCOLUMN) HRESULT {
                return @as(*const IEnumCERTVIEWROW.VTable, @ptrCast(self.vtable)).EnumCertViewColumn(@as(*const IEnumCERTVIEWROW, @ptrCast(self)), ppenum_);
            }
            pub inline fn enumCertViewAttribute(self: *const T, flags_: i32, ppenum_: ?*?*IEnumCERTVIEWATTRIBUTE) HRESULT {
                return @as(*const IEnumCERTVIEWROW.VTable, @ptrCast(self.vtable)).EnumCertViewAttribute(@as(*const IEnumCERTVIEWROW, @ptrCast(self)), flags_, ppenum_);
            }
            pub inline fn enumCertViewExtension(self: *const T, flags_: i32, ppenum_: ?*?*IEnumCERTVIEWEXTENSION) HRESULT {
                return @as(*const IEnumCERTVIEWROW.VTable, @ptrCast(self.vtable)).EnumCertViewExtension(@as(*const IEnumCERTVIEWROW, @ptrCast(self)), flags_, ppenum_);
            }
            pub inline fn skip(self: *const T, celt_: i32) HRESULT {
                return @as(*const IEnumCERTVIEWROW.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumCERTVIEWROW, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumCERTVIEWROW.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumCERTVIEWROW, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumCERTVIEWROW) HRESULT {
                return @as(*const IEnumCERTVIEWROW.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumCERTVIEWROW, @ptrCast(self)), ppenum_);
            }
            pub inline fn getMaxIndex(self: *const T, p_index_: ?*i32) HRESULT {
                return @as(*const IEnumCERTVIEWROW.VTable, @ptrCast(self.vtable)).GetMaxIndex(@as(*const IEnumCERTVIEWROW, @ptrCast(self)), p_index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertView_Value = Guid.initString("c3fac344-1e84-11d1-9bd6-00c04fb683fa");
pub const IID_ICertView = &IID_ICertView_Value;
pub const ICertView = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        OpenConnection: *const fn (
            self: *const ICertView,
            str_config: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCertViewColumn: *const fn (
            self: *const ICertView,
            f_result_column: CVRC_COLUMN,
            ppenum: ?*?*IEnumCERTVIEWCOLUMN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnCount: *const fn (
            self: *const ICertView,
            f_result_column: CVRC_COLUMN,
            pc_column: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnIndex: *const fn (
            self: *const ICertView,
            f_result_column: CVRC_COLUMN,
            str_column_name: ?BSTR,
            p_column_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetResultColumnCount: *const fn (
            self: *const ICertView,
            c_result_column: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetResultColumn: *const fn (
            self: *const ICertView,
            column_index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRestriction: *const fn (
            self: *const ICertView,
            column_index: CERT_VIEW_COLUMN_INDEX,
            seek_operator: CERT_VIEW_SEEK_OPERATOR_FLAGS,
            sort_order: i32,
            pvar_value: ?*const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenView: *const fn (
            self: *const ICertView,
            ppenum: ?*?*IEnumCERTVIEWROW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn openConnection(self: *const T, str_config_: ?BSTR) HRESULT {
                return @as(*const ICertView.VTable, @ptrCast(self.vtable)).OpenConnection(@as(*const ICertView, @ptrCast(self)), str_config_);
            }
            pub inline fn enumCertViewColumn(self: *const T, f_result_column_: CVRC_COLUMN, ppenum_: ?*?*IEnumCERTVIEWCOLUMN) HRESULT {
                return @as(*const ICertView.VTable, @ptrCast(self.vtable)).EnumCertViewColumn(@as(*const ICertView, @ptrCast(self)), f_result_column_, ppenum_);
            }
            pub inline fn getColumnCount(self: *const T, f_result_column_: CVRC_COLUMN, pc_column_: ?*i32) HRESULT {
                return @as(*const ICertView.VTable, @ptrCast(self.vtable)).GetColumnCount(@as(*const ICertView, @ptrCast(self)), f_result_column_, pc_column_);
            }
            pub inline fn getColumnIndex(self: *const T, f_result_column_: CVRC_COLUMN, str_column_name_: ?BSTR, p_column_index_: ?*i32) HRESULT {
                return @as(*const ICertView.VTable, @ptrCast(self.vtable)).GetColumnIndex(@as(*const ICertView, @ptrCast(self)), f_result_column_, str_column_name_, p_column_index_);
            }
            pub inline fn setResultColumnCount(self: *const T, c_result_column_: i32) HRESULT {
                return @as(*const ICertView.VTable, @ptrCast(self.vtable)).SetResultColumnCount(@as(*const ICertView, @ptrCast(self)), c_result_column_);
            }
            pub inline fn setResultColumn(self: *const T, column_index_: i32) HRESULT {
                return @as(*const ICertView.VTable, @ptrCast(self.vtable)).SetResultColumn(@as(*const ICertView, @ptrCast(self)), column_index_);
            }
            pub inline fn setRestriction(self: *const T, column_index_: CERT_VIEW_COLUMN_INDEX, seek_operator_: CERT_VIEW_SEEK_OPERATOR_FLAGS, sort_order_: i32, pvar_value_: ?*const VARIANT) HRESULT {
                return @as(*const ICertView.VTable, @ptrCast(self.vtable)).SetRestriction(@as(*const ICertView, @ptrCast(self)), column_index_, seek_operator_, sort_order_, pvar_value_);
            }
            pub inline fn openView(self: *const T, ppenum_: ?*?*IEnumCERTVIEWROW) HRESULT {
                return @as(*const ICertView.VTable, @ptrCast(self.vtable)).OpenView(@as(*const ICertView, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertView2_Value = Guid.initString("d594b282-8851-4b61-9c66-3edadf848863");
pub const IID_ICertView2 = &IID_ICertView2_Value;
pub const ICertView2 = extern struct {
    pub const VTable = extern struct {
        base: ICertView.VTable,
        SetTable: *const fn (
            self: *const ICertView2,
            table: CVRC_TABLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertView.MethodMixin(T);
            pub inline fn setTable(self: *const T, table_: CVRC_TABLE) HRESULT {
                return @as(*const ICertView2.VTable, @ptrCast(self.vtable)).SetTable(@as(*const ICertView2, @ptrCast(self)), table_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertAdmin_Value = Guid.initString("34df6950-7fb6-11d0-8817-00a0c903b83c");
pub const IID_ICertAdmin = &IID_ICertAdmin_Value;
pub const ICertAdmin = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        IsValidCertificate: *const fn (
            self: *const ICertAdmin,
            str_config: ?BSTR,
            str_serial_number: ?BSTR,
            p_disposition: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRevocationReason: *const fn (
            self: *const ICertAdmin,
            p_reason: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RevokeCertificate: *const fn (
            self: *const ICertAdmin,
            str_config: ?BSTR,
            str_serial_number: ?BSTR,
            reason: i32,
            date: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRequestAttributes: *const fn (
            self: *const ICertAdmin,
            str_config: ?BSTR,
            request_id: i32,
            str_attributes: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCertificateExtension: *const fn (
            self: *const ICertAdmin,
            str_config: ?BSTR,
            request_id: i32,
            str_extension_name: ?BSTR,
            type: CERT_PROPERTY_TYPE,
            flags: i32,
            pvar_value: ?*const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DenyRequest: *const fn (
            self: *const ICertAdmin,
            str_config: ?BSTR,
            request_id: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResubmitRequest: *const fn (
            self: *const ICertAdmin,
            str_config: ?BSTR,
            request_id: i32,
            p_disposition: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PublishCRL: *const fn (
            self: *const ICertAdmin,
            str_config: ?BSTR,
            date: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCRL: *const fn (
            self: *const ICertAdmin,
            str_config: ?BSTR,
            flags: i32,
            pstr_c_r_l: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportCertificate: *const fn (
            self: *const ICertAdmin,
            str_config: ?BSTR,
            str_certificate: ?BSTR,
            flags: CERT_IMPORT_FLAGS,
            p_request_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn isValidCertificate(self: *const T, str_config_: ?BSTR, str_serial_number_: ?BSTR, p_disposition_: ?*i32) HRESULT {
                return @as(*const ICertAdmin.VTable, @ptrCast(self.vtable)).IsValidCertificate(@as(*const ICertAdmin, @ptrCast(self)), str_config_, str_serial_number_, p_disposition_);
            }
            pub inline fn getRevocationReason(self: *const T, p_reason_: ?*i32) HRESULT {
                return @as(*const ICertAdmin.VTable, @ptrCast(self.vtable)).GetRevocationReason(@as(*const ICertAdmin, @ptrCast(self)), p_reason_);
            }
            pub inline fn revokeCertificate(self: *const T, str_config_: ?BSTR, str_serial_number_: ?BSTR, reason_: i32, date_: f64) HRESULT {
                return @as(*const ICertAdmin.VTable, @ptrCast(self.vtable)).RevokeCertificate(@as(*const ICertAdmin, @ptrCast(self)), str_config_, str_serial_number_, reason_, date_);
            }
            pub inline fn setRequestAttributes(self: *const T, str_config_: ?BSTR, request_id_: i32, str_attributes_: ?BSTR) HRESULT {
                return @as(*const ICertAdmin.VTable, @ptrCast(self.vtable)).SetRequestAttributes(@as(*const ICertAdmin, @ptrCast(self)), str_config_, request_id_, str_attributes_);
            }
            pub inline fn setCertificateExtension(self: *const T, str_config_: ?BSTR, request_id_: i32, str_extension_name_: ?BSTR, type_: CERT_PROPERTY_TYPE, flags_: i32, pvar_value_: ?*const VARIANT) HRESULT {
                return @as(*const ICertAdmin.VTable, @ptrCast(self.vtable)).SetCertificateExtension(@as(*const ICertAdmin, @ptrCast(self)), str_config_, request_id_, str_extension_name_, type_, flags_, pvar_value_);
            }
            pub inline fn denyRequest(self: *const T, str_config_: ?BSTR, request_id_: i32) HRESULT {
                return @as(*const ICertAdmin.VTable, @ptrCast(self.vtable)).DenyRequest(@as(*const ICertAdmin, @ptrCast(self)), str_config_, request_id_);
            }
            pub inline fn resubmitRequest(self: *const T, str_config_: ?BSTR, request_id_: i32, p_disposition_: ?*i32) HRESULT {
                return @as(*const ICertAdmin.VTable, @ptrCast(self.vtable)).ResubmitRequest(@as(*const ICertAdmin, @ptrCast(self)), str_config_, request_id_, p_disposition_);
            }
            pub inline fn publishCRL(self: *const T, str_config_: ?BSTR, date_: f64) HRESULT {
                return @as(*const ICertAdmin.VTable, @ptrCast(self.vtable)).PublishCRL(@as(*const ICertAdmin, @ptrCast(self)), str_config_, date_);
            }
            pub inline fn getCRL(self: *const T, str_config_: ?BSTR, flags_: i32, pstr_c_r_l_: ?*?BSTR) HRESULT {
                return @as(*const ICertAdmin.VTable, @ptrCast(self.vtable)).GetCRL(@as(*const ICertAdmin, @ptrCast(self)), str_config_, flags_, pstr_c_r_l_);
            }
            pub inline fn importCertificate(self: *const T, str_config_: ?BSTR, str_certificate_: ?BSTR, flags_: CERT_IMPORT_FLAGS, p_request_id_: ?*i32) HRESULT {
                return @as(*const ICertAdmin.VTable, @ptrCast(self.vtable)).ImportCertificate(@as(*const ICertAdmin, @ptrCast(self)), str_config_, str_certificate_, flags_, p_request_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertAdmin2_Value = Guid.initString("f7c3ac41-b8ce-4fb4-aa58-3d1dc0e36b39");
pub const IID_ICertAdmin2 = &IID_ICertAdmin2_Value;
pub const ICertAdmin2 = extern struct {
    pub const VTable = extern struct {
        base: ICertAdmin.VTable,
        PublishCRLs: *const fn (
            self: *const ICertAdmin2,
            str_config: ?BSTR,
            date: f64,
            c_r_l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAProperty: *const fn (
            self: *const ICertAdmin2,
            str_config: ?BSTR,
            prop_id: i32,
            prop_index: i32,
            prop_type: i32,
            flags: i32,
            pvar_property_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCAProperty: *const fn (
            self: *const ICertAdmin2,
            str_config: ?BSTR,
            prop_id: i32,
            prop_index: i32,
            prop_type: CERT_PROPERTY_TYPE,
            pvar_property_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAPropertyFlags: *const fn (
            self: *const ICertAdmin2,
            str_config: ?BSTR,
            prop_id: i32,
            p_prop_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAPropertyDisplayName: *const fn (
            self: *const ICertAdmin2,
            str_config: ?BSTR,
            prop_id: i32,
            pstr_display_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetArchivedKey: *const fn (
            self: *const ICertAdmin2,
            str_config: ?BSTR,
            request_id: i32,
            flags: i32,
            pstr_archived_key: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConfigEntry: *const fn (
            self: *const ICertAdmin2,
            str_config: ?BSTR,
            str_node_path: ?BSTR,
            str_entry_name: ?BSTR,
            pvar_entry: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConfigEntry: *const fn (
            self: *const ICertAdmin2,
            str_config: ?BSTR,
            str_node_path: ?BSTR,
            str_entry_name: ?BSTR,
            pvar_entry: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportKey: *const fn (
            self: *const ICertAdmin2,
            str_config: ?BSTR,
            request_id: i32,
            str_cert_hash: ?BSTR,
            flags: CERT_IMPORT_FLAGS,
            str_key: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMyRoles: *const fn (
            self: *const ICertAdmin2,
            str_config: ?BSTR,
            p_roles: ?*CERTADMIN_GET_ROLES_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRow: *const fn (
            self: *const ICertAdmin2,
            str_config: ?BSTR,
            flags: CERT_DELETE_ROW_FLAGS,
            date: f64,
            table: CVRC_TABLE,
            row_id: i32,
            pc_deleted: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertAdmin.MethodMixin(T);
            pub inline fn publishCRLs(self: *const T, str_config_: ?BSTR, date_: f64, c_r_l_flags_: i32) HRESULT {
                return @as(*const ICertAdmin2.VTable, @ptrCast(self.vtable)).PublishCRLs(@as(*const ICertAdmin2, @ptrCast(self)), str_config_, date_, c_r_l_flags_);
            }
            pub inline fn getCAProperty(self: *const T, str_config_: ?BSTR, prop_id_: i32, prop_index_: i32, prop_type_: i32, flags_: i32, pvar_property_value_: ?*VARIANT) HRESULT {
                return @as(*const ICertAdmin2.VTable, @ptrCast(self.vtable)).GetCAProperty(@as(*const ICertAdmin2, @ptrCast(self)), str_config_, prop_id_, prop_index_, prop_type_, flags_, pvar_property_value_);
            }
            pub inline fn setCAProperty(self: *const T, str_config_: ?BSTR, prop_id_: i32, prop_index_: i32, prop_type_: CERT_PROPERTY_TYPE, pvar_property_value_: ?*VARIANT) HRESULT {
                return @as(*const ICertAdmin2.VTable, @ptrCast(self.vtable)).SetCAProperty(@as(*const ICertAdmin2, @ptrCast(self)), str_config_, prop_id_, prop_index_, prop_type_, pvar_property_value_);
            }
            pub inline fn getCAPropertyFlags(self: *const T, str_config_: ?BSTR, prop_id_: i32, p_prop_flags_: ?*i32) HRESULT {
                return @as(*const ICertAdmin2.VTable, @ptrCast(self.vtable)).GetCAPropertyFlags(@as(*const ICertAdmin2, @ptrCast(self)), str_config_, prop_id_, p_prop_flags_);
            }
            pub inline fn getCAPropertyDisplayName(self: *const T, str_config_: ?BSTR, prop_id_: i32, pstr_display_name_: ?*?BSTR) HRESULT {
                return @as(*const ICertAdmin2.VTable, @ptrCast(self.vtable)).GetCAPropertyDisplayName(@as(*const ICertAdmin2, @ptrCast(self)), str_config_, prop_id_, pstr_display_name_);
            }
            pub inline fn getArchivedKey(self: *const T, str_config_: ?BSTR, request_id_: i32, flags_: i32, pstr_archived_key_: ?*?BSTR) HRESULT {
                return @as(*const ICertAdmin2.VTable, @ptrCast(self.vtable)).GetArchivedKey(@as(*const ICertAdmin2, @ptrCast(self)), str_config_, request_id_, flags_, pstr_archived_key_);
            }
            pub inline fn getConfigEntry(self: *const T, str_config_: ?BSTR, str_node_path_: ?BSTR, str_entry_name_: ?BSTR, pvar_entry_: ?*VARIANT) HRESULT {
                return @as(*const ICertAdmin2.VTable, @ptrCast(self.vtable)).GetConfigEntry(@as(*const ICertAdmin2, @ptrCast(self)), str_config_, str_node_path_, str_entry_name_, pvar_entry_);
            }
            pub inline fn setConfigEntry(self: *const T, str_config_: ?BSTR, str_node_path_: ?BSTR, str_entry_name_: ?BSTR, pvar_entry_: ?*VARIANT) HRESULT {
                return @as(*const ICertAdmin2.VTable, @ptrCast(self.vtable)).SetConfigEntry(@as(*const ICertAdmin2, @ptrCast(self)), str_config_, str_node_path_, str_entry_name_, pvar_entry_);
            }
            pub inline fn importKey(self: *const T, str_config_: ?BSTR, request_id_: i32, str_cert_hash_: ?BSTR, flags_: CERT_IMPORT_FLAGS, str_key_: ?BSTR) HRESULT {
                return @as(*const ICertAdmin2.VTable, @ptrCast(self.vtable)).ImportKey(@as(*const ICertAdmin2, @ptrCast(self)), str_config_, request_id_, str_cert_hash_, flags_, str_key_);
            }
            pub inline fn getMyRoles(self: *const T, str_config_: ?BSTR, p_roles_: ?*CERTADMIN_GET_ROLES_FLAGS) HRESULT {
                return @as(*const ICertAdmin2.VTable, @ptrCast(self.vtable)).GetMyRoles(@as(*const ICertAdmin2, @ptrCast(self)), str_config_, p_roles_);
            }
            pub inline fn deleteRow(self: *const T, str_config_: ?BSTR, flags_: CERT_DELETE_ROW_FLAGS, date_: f64, table_: CVRC_TABLE, row_id_: i32, pc_deleted_: ?*i32) HRESULT {
                return @as(*const ICertAdmin2.VTable, @ptrCast(self.vtable)).DeleteRow(@as(*const ICertAdmin2, @ptrCast(self)), str_config_, flags_, date_, table_, row_id_, pc_deleted_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IOCSPProperty_Value = Guid.initString("66fb7839-5f04-4c25-ad18-9ff1a8376ee0");
pub const IID_IOCSPProperty = &IID_IOCSPProperty_Value;
pub const IOCSPProperty = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPProperty,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPProperty,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPProperty,
            new_val: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Modified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPProperty,
            p_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IOCSPProperty.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IOCSPProperty, @ptrCast(self)), p_val_);
            }
            pub inline fn getValue(self: *const T, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IOCSPProperty.VTable, @ptrCast(self.vtable)).get_Value(@as(*const IOCSPProperty, @ptrCast(self)), p_val_);
            }
            pub inline fn putValue(self: *const T, new_val_: VARIANT) HRESULT {
                return @as(*const IOCSPProperty.VTable, @ptrCast(self.vtable)).put_Value(@as(*const IOCSPProperty, @ptrCast(self)), new_val_);
            }
            pub inline fn getModified(self: *const T, p_val_: ?*i16) HRESULT {
                return @as(*const IOCSPProperty.VTable, @ptrCast(self.vtable)).get_Modified(@as(*const IOCSPProperty, @ptrCast(self)), p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IOCSPPropertyCollection_Value = Guid.initString("2597c18d-54e6-4b74-9fa9-a6bfda99cbbe");
pub const IID_IOCSPPropertyCollection = &IID_IOCSPPropertyCollection_Value;
pub const IOCSPPropertyCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPPropertyCollection,
            pp_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPPropertyCollection,
            index: i32,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPPropertyCollection,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPPropertyCollection,
            bstr_prop_name: ?BSTR,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateProperty: *const fn (
            self: *const IOCSPPropertyCollection,
            bstr_prop_name: ?BSTR,
            p_var_prop_value: ?*const VARIANT,
            pp_val: ?*?*IOCSPProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteProperty: *const fn (
            self: *const IOCSPPropertyCollection,
            bstr_prop_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromProperties: *const fn (
            self: *const IOCSPPropertyCollection,
            p_var_properties: ?*const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllProperties: *const fn (
            self: *const IOCSPPropertyCollection,
            p_var_properties: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, pp_val_: ?*?*IUnknown) HRESULT {
                return @as(*const IOCSPPropertyCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IOCSPPropertyCollection, @ptrCast(self)), pp_val_);
            }
            pub inline fn getItem(self: *const T, index_: i32, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IOCSPPropertyCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IOCSPPropertyCollection, @ptrCast(self)), index_, p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IOCSPPropertyCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IOCSPPropertyCollection, @ptrCast(self)), p_val_);
            }
            pub inline fn getItemByName(self: *const T, bstr_prop_name_: ?BSTR, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IOCSPPropertyCollection.VTable, @ptrCast(self.vtable)).get_ItemByName(@as(*const IOCSPPropertyCollection, @ptrCast(self)), bstr_prop_name_, p_val_);
            }
            pub inline fn createProperty(self: *const T, bstr_prop_name_: ?BSTR, p_var_prop_value_: ?*const VARIANT, pp_val_: ?*?*IOCSPProperty) HRESULT {
                return @as(*const IOCSPPropertyCollection.VTable, @ptrCast(self.vtable)).CreateProperty(@as(*const IOCSPPropertyCollection, @ptrCast(self)), bstr_prop_name_, p_var_prop_value_, pp_val_);
            }
            pub inline fn deleteProperty(self: *const T, bstr_prop_name_: ?BSTR) HRESULT {
                return @as(*const IOCSPPropertyCollection.VTable, @ptrCast(self.vtable)).DeleteProperty(@as(*const IOCSPPropertyCollection, @ptrCast(self)), bstr_prop_name_);
            }
            pub inline fn initializeFromProperties(self: *const T, p_var_properties_: ?*const VARIANT) HRESULT {
                return @as(*const IOCSPPropertyCollection.VTable, @ptrCast(self.vtable)).InitializeFromProperties(@as(*const IOCSPPropertyCollection, @ptrCast(self)), p_var_properties_);
            }
            pub inline fn getAllProperties(self: *const T, p_var_properties_: ?*VARIANT) HRESULT {
                return @as(*const IOCSPPropertyCollection.VTable, @ptrCast(self.vtable)).GetAllProperties(@as(*const IOCSPPropertyCollection, @ptrCast(self)), p_var_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IOCSPCAConfiguration_Value = Guid.initString("aec92b40-3d46-433f-87d1-b84d5c1e790d");
pub const IID_IOCSPCAConfiguration = &IID_IOCSPCAConfiguration_Value;
pub const IOCSPCAConfiguration = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Identifier: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CACertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SigningFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            p_val: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SigningFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            new_val: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SigningCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SigningCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            new_val: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReminderDuration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            p_val: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReminderDuration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            new_val: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ErrorCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            p_val: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CSPName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeySpec: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            p_val: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderCLSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderCLSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderProperties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderProperties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            new_val: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Modified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            p_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalRevocationInformation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LocalRevocationInformation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            new_val: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SigningCertificateTemplate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SigningCertificateTemplate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CAConfig: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CAConfig: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfiguration,
            new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getIdentifier(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).get_Identifier(@as(*const IOCSPCAConfiguration, @ptrCast(self)), p_val_);
            }
            pub inline fn getCACertificate(self: *const T, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).get_CACertificate(@as(*const IOCSPCAConfiguration, @ptrCast(self)), p_val_);
            }
            pub inline fn getHashAlgorithm(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).get_HashAlgorithm(@as(*const IOCSPCAConfiguration, @ptrCast(self)), p_val_);
            }
            pub inline fn putHashAlgorithm(self: *const T, new_val_: ?BSTR) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).put_HashAlgorithm(@as(*const IOCSPCAConfiguration, @ptrCast(self)), new_val_);
            }
            pub inline fn getSigningFlags(self: *const T, p_val_: ?*u32) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).get_SigningFlags(@as(*const IOCSPCAConfiguration, @ptrCast(self)), p_val_);
            }
            pub inline fn putSigningFlags(self: *const T, new_val_: u32) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).put_SigningFlags(@as(*const IOCSPCAConfiguration, @ptrCast(self)), new_val_);
            }
            pub inline fn getSigningCertificate(self: *const T, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).get_SigningCertificate(@as(*const IOCSPCAConfiguration, @ptrCast(self)), p_val_);
            }
            pub inline fn putSigningCertificate(self: *const T, new_val_: VARIANT) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).put_SigningCertificate(@as(*const IOCSPCAConfiguration, @ptrCast(self)), new_val_);
            }
            pub inline fn getReminderDuration(self: *const T, p_val_: ?*u32) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).get_ReminderDuration(@as(*const IOCSPCAConfiguration, @ptrCast(self)), p_val_);
            }
            pub inline fn putReminderDuration(self: *const T, new_val_: u32) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).put_ReminderDuration(@as(*const IOCSPCAConfiguration, @ptrCast(self)), new_val_);
            }
            pub inline fn getErrorCode(self: *const T, p_val_: ?*u32) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).get_ErrorCode(@as(*const IOCSPCAConfiguration, @ptrCast(self)), p_val_);
            }
            pub inline fn getCSPName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).get_CSPName(@as(*const IOCSPCAConfiguration, @ptrCast(self)), p_val_);
            }
            pub inline fn getKeySpec(self: *const T, p_val_: ?*u32) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).get_KeySpec(@as(*const IOCSPCAConfiguration, @ptrCast(self)), p_val_);
            }
            pub inline fn getProviderCLSID(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).get_ProviderCLSID(@as(*const IOCSPCAConfiguration, @ptrCast(self)), p_val_);
            }
            pub inline fn putProviderCLSID(self: *const T, new_val_: ?BSTR) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).put_ProviderCLSID(@as(*const IOCSPCAConfiguration, @ptrCast(self)), new_val_);
            }
            pub inline fn getProviderProperties(self: *const T, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).get_ProviderProperties(@as(*const IOCSPCAConfiguration, @ptrCast(self)), p_val_);
            }
            pub inline fn putProviderProperties(self: *const T, new_val_: VARIANT) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).put_ProviderProperties(@as(*const IOCSPCAConfiguration, @ptrCast(self)), new_val_);
            }
            pub inline fn getModified(self: *const T, p_val_: ?*i16) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).get_Modified(@as(*const IOCSPCAConfiguration, @ptrCast(self)), p_val_);
            }
            pub inline fn getLocalRevocationInformation(self: *const T, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).get_LocalRevocationInformation(@as(*const IOCSPCAConfiguration, @ptrCast(self)), p_val_);
            }
            pub inline fn putLocalRevocationInformation(self: *const T, new_val_: VARIANT) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).put_LocalRevocationInformation(@as(*const IOCSPCAConfiguration, @ptrCast(self)), new_val_);
            }
            pub inline fn getSigningCertificateTemplate(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).get_SigningCertificateTemplate(@as(*const IOCSPCAConfiguration, @ptrCast(self)), p_val_);
            }
            pub inline fn putSigningCertificateTemplate(self: *const T, new_val_: ?BSTR) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).put_SigningCertificateTemplate(@as(*const IOCSPCAConfiguration, @ptrCast(self)), new_val_);
            }
            pub inline fn getCAConfig(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).get_CAConfig(@as(*const IOCSPCAConfiguration, @ptrCast(self)), p_val_);
            }
            pub inline fn putCAConfig(self: *const T, new_val_: ?BSTR) HRESULT {
                return @as(*const IOCSPCAConfiguration.VTable, @ptrCast(self.vtable)).put_CAConfig(@as(*const IOCSPCAConfiguration, @ptrCast(self)), new_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IOCSPCAConfigurationCollection_Value = Guid.initString("2bebea0b-5ece-4f28-a91c-86b4bb20f0d3");
pub const IID_IOCSPCAConfigurationCollection = &IID_IOCSPCAConfigurationCollection_Value;
pub const IOCSPCAConfigurationCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfigurationCollection,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfigurationCollection,
            index: i32,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfigurationCollection,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPCAConfigurationCollection,
            bstr_identifier: ?BSTR,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCAConfiguration: *const fn (
            self: *const IOCSPCAConfigurationCollection,
            bstr_identifier: ?BSTR,
            var_c_a_cert: VARIANT,
            pp_val: ?*?*IOCSPCAConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteCAConfiguration: *const fn (
            self: *const IOCSPCAConfigurationCollection,
            bstr_identifier: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const IOCSPCAConfigurationCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IOCSPCAConfigurationCollection, @ptrCast(self)), p_val_);
            }
            pub inline fn getItem(self: *const T, index_: i32, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IOCSPCAConfigurationCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IOCSPCAConfigurationCollection, @ptrCast(self)), index_, p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IOCSPCAConfigurationCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IOCSPCAConfigurationCollection, @ptrCast(self)), p_val_);
            }
            pub inline fn getItemByName(self: *const T, bstr_identifier_: ?BSTR, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IOCSPCAConfigurationCollection.VTable, @ptrCast(self.vtable)).get_ItemByName(@as(*const IOCSPCAConfigurationCollection, @ptrCast(self)), bstr_identifier_, p_val_);
            }
            pub inline fn createCAConfiguration(self: *const T, bstr_identifier_: ?BSTR, var_c_a_cert_: VARIANT, pp_val_: ?*?*IOCSPCAConfiguration) HRESULT {
                return @as(*const IOCSPCAConfigurationCollection.VTable, @ptrCast(self.vtable)).CreateCAConfiguration(@as(*const IOCSPCAConfigurationCollection, @ptrCast(self)), bstr_identifier_, var_c_a_cert_, pp_val_);
            }
            pub inline fn deleteCAConfiguration(self: *const T, bstr_identifier_: ?BSTR) HRESULT {
                return @as(*const IOCSPCAConfigurationCollection.VTable, @ptrCast(self.vtable)).DeleteCAConfiguration(@as(*const IOCSPCAConfigurationCollection, @ptrCast(self)), bstr_identifier_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IOCSPAdmin_Value = Guid.initString("322e830d-67db-4fe9-9577-4596d9f09294");
pub const IID_IOCSPAdmin = &IID_IOCSPAdmin_Value;
pub const IOCSPAdmin = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OCSPServiceProperties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPAdmin,
            pp_val: ?*?*IOCSPPropertyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OCSPCAConfigurationCollection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IOCSPAdmin,
            p_val: ?*?*IOCSPCAConfigurationCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConfiguration: *const fn (
            self: *const IOCSPAdmin,
            bstr_server_name: ?BSTR,
            b_force: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConfiguration: *const fn (
            self: *const IOCSPAdmin,
            bstr_server_name: ?BSTR,
            b_force: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMyRoles: *const fn (
            self: *const IOCSPAdmin,
            bstr_server_name: ?BSTR,
            p_roles: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Ping: *const fn (
            self: *const IOCSPAdmin,
            bstr_server_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSecurity: *const fn (
            self: *const IOCSPAdmin,
            bstr_server_name: ?BSTR,
            bstr_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSecurity: *const fn (
            self: *const IOCSPAdmin,
            bstr_server_name: ?BSTR,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSigningCertificates: *const fn (
            self: *const IOCSPAdmin,
            bstr_server_name: ?BSTR,
            p_c_a_cert_var: ?*const VARIANT,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHashAlgorithms: *const fn (
            self: *const IOCSPAdmin,
            bstr_server_name: ?BSTR,
            bstr_c_a_id: ?BSTR,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getOCSPServiceProperties(self: *const T, pp_val_: ?*?*IOCSPPropertyCollection) HRESULT {
                return @as(*const IOCSPAdmin.VTable, @ptrCast(self.vtable)).get_OCSPServiceProperties(@as(*const IOCSPAdmin, @ptrCast(self)), pp_val_);
            }
            pub inline fn getOCSPCAConfigurationCollection(self: *const T, p_val_: ?*?*IOCSPCAConfigurationCollection) HRESULT {
                return @as(*const IOCSPAdmin.VTable, @ptrCast(self.vtable)).get_OCSPCAConfigurationCollection(@as(*const IOCSPAdmin, @ptrCast(self)), p_val_);
            }
            pub inline fn getConfiguration(self: *const T, bstr_server_name_: ?BSTR, b_force_: i16) HRESULT {
                return @as(*const IOCSPAdmin.VTable, @ptrCast(self.vtable)).GetConfiguration(@as(*const IOCSPAdmin, @ptrCast(self)), bstr_server_name_, b_force_);
            }
            pub inline fn setConfiguration(self: *const T, bstr_server_name_: ?BSTR, b_force_: i16) HRESULT {
                return @as(*const IOCSPAdmin.VTable, @ptrCast(self.vtable)).SetConfiguration(@as(*const IOCSPAdmin, @ptrCast(self)), bstr_server_name_, b_force_);
            }
            pub inline fn getMyRoles(self: *const T, bstr_server_name_: ?BSTR, p_roles_: ?*i32) HRESULT {
                return @as(*const IOCSPAdmin.VTable, @ptrCast(self.vtable)).GetMyRoles(@as(*const IOCSPAdmin, @ptrCast(self)), bstr_server_name_, p_roles_);
            }
            pub inline fn ping(self: *const T, bstr_server_name_: ?BSTR) HRESULT {
                return @as(*const IOCSPAdmin.VTable, @ptrCast(self.vtable)).Ping(@as(*const IOCSPAdmin, @ptrCast(self)), bstr_server_name_);
            }
            pub inline fn setSecurity(self: *const T, bstr_server_name_: ?BSTR, bstr_val_: ?BSTR) HRESULT {
                return @as(*const IOCSPAdmin.VTable, @ptrCast(self.vtable)).SetSecurity(@as(*const IOCSPAdmin, @ptrCast(self)), bstr_server_name_, bstr_val_);
            }
            pub inline fn getSecurity(self: *const T, bstr_server_name_: ?BSTR, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IOCSPAdmin.VTable, @ptrCast(self.vtable)).GetSecurity(@as(*const IOCSPAdmin, @ptrCast(self)), bstr_server_name_, p_val_);
            }
            pub inline fn getSigningCertificates(self: *const T, bstr_server_name_: ?BSTR, p_c_a_cert_var_: ?*const VARIANT, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IOCSPAdmin.VTable, @ptrCast(self.vtable)).GetSigningCertificates(@as(*const IOCSPAdmin, @ptrCast(self)), bstr_server_name_, p_c_a_cert_var_, p_val_);
            }
            pub inline fn getHashAlgorithms(self: *const T, bstr_server_name_: ?BSTR, bstr_c_a_id_: ?BSTR, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IOCSPAdmin.VTable, @ptrCast(self.vtable)).GetHashAlgorithms(@as(*const IOCSPAdmin, @ptrCast(self)), bstr_server_name_, bstr_c_a_id_, p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const OCSPSigningFlag = enum(i32) {
    SILENT = 1,
    USE_CACERT = 2,
    ALLOW_SIGNINGCERT_AUTORENEWAL = 4,
    FORCE_SIGNINGCERT_ISSUER_ISCA = 8,
    AUTODISCOVER_SIGNINGCERT = 16,
    MANUAL_ASSIGN_SIGNINGCERT = 32,
    RESPONDER_ID_KEYHASH = 64,
    RESPONDER_ID_NAME = 128,
    ALLOW_NONCE_EXTENSION = 256,
    ALLOW_SIGNINGCERT_AUTOENROLLMENT = 512,
};
pub const OCSP_SF_SILENT = OCSPSigningFlag.SILENT;
pub const OCSP_SF_USE_CACERT = OCSPSigningFlag.USE_CACERT;
pub const OCSP_SF_ALLOW_SIGNINGCERT_AUTORENEWAL = OCSPSigningFlag.ALLOW_SIGNINGCERT_AUTORENEWAL;
pub const OCSP_SF_FORCE_SIGNINGCERT_ISSUER_ISCA = OCSPSigningFlag.FORCE_SIGNINGCERT_ISSUER_ISCA;
pub const OCSP_SF_AUTODISCOVER_SIGNINGCERT = OCSPSigningFlag.AUTODISCOVER_SIGNINGCERT;
pub const OCSP_SF_MANUAL_ASSIGN_SIGNINGCERT = OCSPSigningFlag.MANUAL_ASSIGN_SIGNINGCERT;
pub const OCSP_SF_RESPONDER_ID_KEYHASH = OCSPSigningFlag.RESPONDER_ID_KEYHASH;
pub const OCSP_SF_RESPONDER_ID_NAME = OCSPSigningFlag.RESPONDER_ID_NAME;
pub const OCSP_SF_ALLOW_NONCE_EXTENSION = OCSPSigningFlag.ALLOW_NONCE_EXTENSION;
pub const OCSP_SF_ALLOW_SIGNINGCERT_AUTOENROLLMENT = OCSPSigningFlag.ALLOW_SIGNINGCERT_AUTOENROLLMENT;

pub const OCSPRequestFlag = enum(i32) {
    S = 1,
};
pub const OCSP_RF_REJECT_SIGNED_REQUESTS = OCSPRequestFlag.S;

pub const CSEDB_RSTMAPW = extern struct {
    pwszDatabaseName: ?PWSTR,
    pwszNewDatabaseName: ?PWSTR,
};

pub const FNCERTSRVISSERVERONLINEW = *const fn (
    pwsz_server_name: ?[*:0]const u16,
    pf_server_online: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPGETDYNAMICFILELISTW = *const fn (
    hbc: ?*anyopaque,
    ppwszz_file_list: ?*?*u16,
    pcb_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPPREPAREW = *const fn (
    pwsz_server_name: ?[*:0]const u16,
    grbit_jet: u32,
    dw_backup_flags: u32,
    phbc: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPGETDATABASENAMESW = *const fn (
    hbc: ?*anyopaque,
    ppwszz_attachment_information: ?*?*u16,
    pcb_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPOPENFILEW = *const fn (
    hbc: ?*anyopaque,
    pwsz_attachment_name: ?[*:0]const u16,
    cb_read_hint_size: u32,
    pli_file_size: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPREAD = *const fn (
    hbc: ?*anyopaque,
    pv_buffer: ?*anyopaque,
    cb_buffer: u32,
    pcb_read: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPCLOSE = *const fn (
    hbc: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPGETBACKUPLOGSW = *const fn (
    hbc: ?*anyopaque,
    ppwszz_backup_log_files: ?*?*u16,
    pcb_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPTRUNCATELOGS = *const fn (
    hbc: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPEND = *const fn (
    hbc: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVBACKUPFREE = *const fn (
    pv: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const FNCERTSRVRESTOREGETDATABASELOCATIONSW = *const fn (
    hbc: ?*anyopaque,
    ppwszz_database_location_list: ?*?*u16,
    pcb_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVRESTOREPREPAREW = *const fn (
    pwsz_server_name: ?[*:0]const u16,
    dw_restore_flags: u32,
    phbc: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVRESTOREREGISTERW = *const fn (
    hbc: ?*anyopaque,
    pwsz_check_point_file_path: ?[*:0]const u16,
    pwsz_log_path: ?[*:0]const u16,
    rgrstmap: ?*CSEDB_RSTMAPW,
    crstmap: i32,
    pwsz_backup_log_path: ?[*:0]const u16,
    gen_low: u32,
    gen_high: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVRESTOREREGISTERCOMPLETE = *const fn (
    hbc: ?*anyopaque,
    hr_restore_state: HRESULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVRESTOREEND = *const fn (
    hbc: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNCERTSRVSERVERCONTROLW = *const fn (
    pwsz_server_name: ?[*:0]const u16,
    dw_control_flags: u32,
    pcb_out: ?*u32,
    ppb_out: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

const CLSID_CCertGetConfig_Value = Guid.initString("c6cc49b0-ce17-11d0-8833-00a0c903b83c");
pub const CLSID_CCertGetConfig = &CLSID_CCertGetConfig_Value;

const CLSID_CCertConfig_Value = Guid.initString("372fce38-4324-11d0-8810-00a0c903b83c");
pub const CLSID_CCertConfig = &CLSID_CCertConfig_Value;

const CLSID_CCertRequest_Value = Guid.initString("98aff3f0-5524-11d0-8812-00a0c903b83c");
pub const CLSID_CCertRequest = &CLSID_CCertRequest_Value;

const CLSID_CCertServerPolicy_Value = Guid.initString("aa000926-ffbe-11cf-8800-00a0c903b83c");
pub const CLSID_CCertServerPolicy = &CLSID_CCertServerPolicy_Value;

const CLSID_CCertServerExit_Value = Guid.initString("4c4a5e40-732c-11d0-8816-00a0c903b83c");
pub const CLSID_CCertServerExit = &CLSID_CCertServerExit_Value;

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertServerPolicy_Value = Guid.initString("aa000922-ffbe-11cf-8800-00a0c903b83c");
pub const IID_ICertServerPolicy = &IID_ICertServerPolicy_Value;
pub const ICertServerPolicy = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        SetContext: *const fn (
            self: *const ICertServerPolicy,
            context: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestProperty: *const fn (
            self: *const ICertServerPolicy,
            str_property_name: ?BSTR,
            property_type: i32,
            pvar_property_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestAttribute: *const fn (
            self: *const ICertServerPolicy,
            str_attribute_name: ?BSTR,
            pstr_attribute_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateProperty: *const fn (
            self: *const ICertServerPolicy,
            str_property_name: ?BSTR,
            property_type: CERT_PROPERTY_TYPE,
            pvar_property_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCertificateProperty: *const fn (
            self: *const ICertServerPolicy,
            str_property_name: ?BSTR,
            property_type: i32,
            pvar_property_value: ?*const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateExtension: *const fn (
            self: *const ICertServerPolicy,
            str_extension_name: ?BSTR,
            type: CERT_PROPERTY_TYPE,
            pvar_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateExtensionFlags: *const fn (
            self: *const ICertServerPolicy,
            p_ext_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCertificateExtension: *const fn (
            self: *const ICertServerPolicy,
            str_extension_name: ?BSTR,
            type: i32,
            ext_flags: i32,
            pvar_value: ?*const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateExtensionsSetup: *const fn (
            self: *const ICertServerPolicy,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateExtensions: *const fn (
            self: *const ICertServerPolicy,
            pstr_extension_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateExtensionsClose: *const fn (
            self: *const ICertServerPolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAttributesSetup: *const fn (
            self: *const ICertServerPolicy,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAttributes: *const fn (
            self: *const ICertServerPolicy,
            pstr_attribute_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAttributesClose: *const fn (
            self: *const ICertServerPolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn setContext(self: *const T, context_: i32) HRESULT {
                return @as(*const ICertServerPolicy.VTable, @ptrCast(self.vtable)).SetContext(@as(*const ICertServerPolicy, @ptrCast(self)), context_);
            }
            pub inline fn getRequestProperty(self: *const T, str_property_name_: ?BSTR, property_type_: i32, pvar_property_value_: ?*VARIANT) HRESULT {
                return @as(*const ICertServerPolicy.VTable, @ptrCast(self.vtable)).GetRequestProperty(@as(*const ICertServerPolicy, @ptrCast(self)), str_property_name_, property_type_, pvar_property_value_);
            }
            pub inline fn getRequestAttribute(self: *const T, str_attribute_name_: ?BSTR, pstr_attribute_value_: ?*?BSTR) HRESULT {
                return @as(*const ICertServerPolicy.VTable, @ptrCast(self.vtable)).GetRequestAttribute(@as(*const ICertServerPolicy, @ptrCast(self)), str_attribute_name_, pstr_attribute_value_);
            }
            pub inline fn getCertificateProperty(self: *const T, str_property_name_: ?BSTR, property_type_: CERT_PROPERTY_TYPE, pvar_property_value_: ?*VARIANT) HRESULT {
                return @as(*const ICertServerPolicy.VTable, @ptrCast(self.vtable)).GetCertificateProperty(@as(*const ICertServerPolicy, @ptrCast(self)), str_property_name_, property_type_, pvar_property_value_);
            }
            pub inline fn setCertificateProperty(self: *const T, str_property_name_: ?BSTR, property_type_: i32, pvar_property_value_: ?*const VARIANT) HRESULT {
                return @as(*const ICertServerPolicy.VTable, @ptrCast(self.vtable)).SetCertificateProperty(@as(*const ICertServerPolicy, @ptrCast(self)), str_property_name_, property_type_, pvar_property_value_);
            }
            pub inline fn getCertificateExtension(self: *const T, str_extension_name_: ?BSTR, type_: CERT_PROPERTY_TYPE, pvar_value_: ?*VARIANT) HRESULT {
                return @as(*const ICertServerPolicy.VTable, @ptrCast(self.vtable)).GetCertificateExtension(@as(*const ICertServerPolicy, @ptrCast(self)), str_extension_name_, type_, pvar_value_);
            }
            pub inline fn getCertificateExtensionFlags(self: *const T, p_ext_flags_: ?*i32) HRESULT {
                return @as(*const ICertServerPolicy.VTable, @ptrCast(self.vtable)).GetCertificateExtensionFlags(@as(*const ICertServerPolicy, @ptrCast(self)), p_ext_flags_);
            }
            pub inline fn setCertificateExtension(self: *const T, str_extension_name_: ?BSTR, type_: i32, ext_flags_: i32, pvar_value_: ?*const VARIANT) HRESULT {
                return @as(*const ICertServerPolicy.VTable, @ptrCast(self.vtable)).SetCertificateExtension(@as(*const ICertServerPolicy, @ptrCast(self)), str_extension_name_, type_, ext_flags_, pvar_value_);
            }
            pub inline fn enumerateExtensionsSetup(self: *const T, flags_: i32) HRESULT {
                return @as(*const ICertServerPolicy.VTable, @ptrCast(self.vtable)).EnumerateExtensionsSetup(@as(*const ICertServerPolicy, @ptrCast(self)), flags_);
            }
            pub inline fn enumerateExtensions(self: *const T, pstr_extension_name_: ?*?BSTR) HRESULT {
                return @as(*const ICertServerPolicy.VTable, @ptrCast(self.vtable)).EnumerateExtensions(@as(*const ICertServerPolicy, @ptrCast(self)), pstr_extension_name_);
            }
            pub inline fn enumerateExtensionsClose(self: *const T) HRESULT {
                return @as(*const ICertServerPolicy.VTable, @ptrCast(self.vtable)).EnumerateExtensionsClose(@as(*const ICertServerPolicy, @ptrCast(self)));
            }
            pub inline fn enumerateAttributesSetup(self: *const T, flags_: i32) HRESULT {
                return @as(*const ICertServerPolicy.VTable, @ptrCast(self.vtable)).EnumerateAttributesSetup(@as(*const ICertServerPolicy, @ptrCast(self)), flags_);
            }
            pub inline fn enumerateAttributes(self: *const T, pstr_attribute_name_: ?*?BSTR) HRESULT {
                return @as(*const ICertServerPolicy.VTable, @ptrCast(self.vtable)).EnumerateAttributes(@as(*const ICertServerPolicy, @ptrCast(self)), pstr_attribute_name_);
            }
            pub inline fn enumerateAttributesClose(self: *const T) HRESULT {
                return @as(*const ICertServerPolicy.VTable, @ptrCast(self.vtable)).EnumerateAttributesClose(@as(*const ICertServerPolicy, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertServerExit_Value = Guid.initString("4ba9eb90-732c-11d0-8816-00a0c903b83c");
pub const IID_ICertServerExit = &IID_ICertServerExit_Value;
pub const ICertServerExit = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        SetContext: *const fn (
            self: *const ICertServerExit,
            context: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestProperty: *const fn (
            self: *const ICertServerExit,
            str_property_name: ?BSTR,
            property_type: i32,
            pvar_property_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestAttribute: *const fn (
            self: *const ICertServerExit,
            str_attribute_name: ?BSTR,
            pstr_attribute_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateProperty: *const fn (
            self: *const ICertServerExit,
            str_property_name: ?BSTR,
            property_type: i32,
            pvar_property_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateExtension: *const fn (
            self: *const ICertServerExit,
            str_extension_name: ?BSTR,
            type: i32,
            pvar_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateExtensionFlags: *const fn (
            self: *const ICertServerExit,
            p_ext_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateExtensionsSetup: *const fn (
            self: *const ICertServerExit,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateExtensions: *const fn (
            self: *const ICertServerExit,
            pstr_extension_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateExtensionsClose: *const fn (
            self: *const ICertServerExit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAttributesSetup: *const fn (
            self: *const ICertServerExit,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAttributes: *const fn (
            self: *const ICertServerExit,
            pstr_attribute_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateAttributesClose: *const fn (
            self: *const ICertServerExit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn setContext(self: *const T, context_: i32) HRESULT {
                return @as(*const ICertServerExit.VTable, @ptrCast(self.vtable)).SetContext(@as(*const ICertServerExit, @ptrCast(self)), context_);
            }
            pub inline fn getRequestProperty(self: *const T, str_property_name_: ?BSTR, property_type_: i32, pvar_property_value_: ?*VARIANT) HRESULT {
                return @as(*const ICertServerExit.VTable, @ptrCast(self.vtable)).GetRequestProperty(@as(*const ICertServerExit, @ptrCast(self)), str_property_name_, property_type_, pvar_property_value_);
            }
            pub inline fn getRequestAttribute(self: *const T, str_attribute_name_: ?BSTR, pstr_attribute_value_: ?*?BSTR) HRESULT {
                return @as(*const ICertServerExit.VTable, @ptrCast(self.vtable)).GetRequestAttribute(@as(*const ICertServerExit, @ptrCast(self)), str_attribute_name_, pstr_attribute_value_);
            }
            pub inline fn getCertificateProperty(self: *const T, str_property_name_: ?BSTR, property_type_: i32, pvar_property_value_: ?*VARIANT) HRESULT {
                return @as(*const ICertServerExit.VTable, @ptrCast(self.vtable)).GetCertificateProperty(@as(*const ICertServerExit, @ptrCast(self)), str_property_name_, property_type_, pvar_property_value_);
            }
            pub inline fn getCertificateExtension(self: *const T, str_extension_name_: ?BSTR, type_: i32, pvar_value_: ?*VARIANT) HRESULT {
                return @as(*const ICertServerExit.VTable, @ptrCast(self.vtable)).GetCertificateExtension(@as(*const ICertServerExit, @ptrCast(self)), str_extension_name_, type_, pvar_value_);
            }
            pub inline fn getCertificateExtensionFlags(self: *const T, p_ext_flags_: ?*i32) HRESULT {
                return @as(*const ICertServerExit.VTable, @ptrCast(self.vtable)).GetCertificateExtensionFlags(@as(*const ICertServerExit, @ptrCast(self)), p_ext_flags_);
            }
            pub inline fn enumerateExtensionsSetup(self: *const T, flags_: i32) HRESULT {
                return @as(*const ICertServerExit.VTable, @ptrCast(self.vtable)).EnumerateExtensionsSetup(@as(*const ICertServerExit, @ptrCast(self)), flags_);
            }
            pub inline fn enumerateExtensions(self: *const T, pstr_extension_name_: ?*?BSTR) HRESULT {
                return @as(*const ICertServerExit.VTable, @ptrCast(self.vtable)).EnumerateExtensions(@as(*const ICertServerExit, @ptrCast(self)), pstr_extension_name_);
            }
            pub inline fn enumerateExtensionsClose(self: *const T) HRESULT {
                return @as(*const ICertServerExit.VTable, @ptrCast(self.vtable)).EnumerateExtensionsClose(@as(*const ICertServerExit, @ptrCast(self)));
            }
            pub inline fn enumerateAttributesSetup(self: *const T, flags_: i32) HRESULT {
                return @as(*const ICertServerExit.VTable, @ptrCast(self.vtable)).EnumerateAttributesSetup(@as(*const ICertServerExit, @ptrCast(self)), flags_);
            }
            pub inline fn enumerateAttributes(self: *const T, pstr_attribute_name_: ?*?BSTR) HRESULT {
                return @as(*const ICertServerExit.VTable, @ptrCast(self.vtable)).EnumerateAttributes(@as(*const ICertServerExit, @ptrCast(self)), pstr_attribute_name_);
            }
            pub inline fn enumerateAttributesClose(self: *const T) HRESULT {
                return @as(*const ICertServerExit.VTable, @ptrCast(self.vtable)).EnumerateAttributesClose(@as(*const ICertServerExit, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertGetConfig_Value = Guid.initString("c7ea09c0-ce17-11d0-8833-00a0c903b83c");
pub const IID_ICertGetConfig = &IID_ICertGetConfig_Value;
pub const ICertGetConfig = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetConfig: *const fn (
            self: *const ICertGetConfig,
            flags: CERT_GET_CONFIG_FLAGS,
            pstr_out: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getConfig(self: *const T, flags_: CERT_GET_CONFIG_FLAGS, pstr_out_: ?*?BSTR) HRESULT {
                return @as(*const ICertGetConfig.VTable, @ptrCast(self.vtable)).GetConfig(@as(*const ICertGetConfig, @ptrCast(self)), flags_, pstr_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertConfig_Value = Guid.initString("372fce34-4324-11d0-8810-00a0c903b83c");
pub const IID_ICertConfig = &IID_ICertConfig_Value;
pub const ICertConfig = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Reset: *const fn (
            self: *const ICertConfig,
            index: i32,
            p_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn (
            self: *const ICertConfig,
            p_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetField: *const fn (
            self: *const ICertConfig,
            str_field_name: ?BSTR,
            pstr_out: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConfig: *const fn (
            self: *const ICertConfig,
            flags: i32,
            pstr_out: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn reset(self: *const T, index_: i32, p_count_: ?*i32) HRESULT {
                return @as(*const ICertConfig.VTable, @ptrCast(self.vtable)).Reset(@as(*const ICertConfig, @ptrCast(self)), index_, p_count_);
            }
            pub inline fn next(self: *const T, p_index_: ?*i32) HRESULT {
                return @as(*const ICertConfig.VTable, @ptrCast(self.vtable)).Next(@as(*const ICertConfig, @ptrCast(self)), p_index_);
            }
            pub inline fn getField(self: *const T, str_field_name_: ?BSTR, pstr_out_: ?*?BSTR) HRESULT {
                return @as(*const ICertConfig.VTable, @ptrCast(self.vtable)).GetField(@as(*const ICertConfig, @ptrCast(self)), str_field_name_, pstr_out_);
            }
            pub inline fn getConfig(self: *const T, flags_: i32, pstr_out_: ?*?BSTR) HRESULT {
                return @as(*const ICertConfig.VTable, @ptrCast(self.vtable)).GetConfig(@as(*const ICertConfig, @ptrCast(self)), flags_, pstr_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertConfig2_Value = Guid.initString("7a18edde-7e78-4163-8ded-78e2c9cee924");
pub const IID_ICertConfig2 = &IID_ICertConfig2_Value;
pub const ICertConfig2 = extern struct {
    pub const VTable = extern struct {
        base: ICertConfig.VTable,
        SetSharedFolder: *const fn (
            self: *const ICertConfig2,
            str_shared_folder: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertConfig.MethodMixin(T);
            pub inline fn setSharedFolder(self: *const T, str_shared_folder_: ?BSTR) HRESULT {
                return @as(*const ICertConfig2.VTable, @ptrCast(self.vtable)).SetSharedFolder(@as(*const ICertConfig2, @ptrCast(self)), str_shared_folder_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICertRequest_Value = Guid.initString("014e4840-5523-11d0-8812-00a0c903b83c");
pub const IID_ICertRequest = &IID_ICertRequest_Value;
pub const ICertRequest = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Submit: *const fn (
            self: *const ICertRequest,
            flags: i32,
            str_request: ?BSTR,
            str_attributes: ?BSTR,
            str_config: ?BSTR,
            p_disposition: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RetrievePending: *const fn (
            self: *const ICertRequest,
            request_id: i32,
            str_config: ?BSTR,
            p_disposition: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastStatus: *const fn (
            self: *const ICertRequest,
            p_status: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestId: *const fn (
            self: *const ICertRequest,
            p_request_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDispositionMessage: *const fn (
            self: *const ICertRequest,
            pstr_disposition_message: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCACertificate: *const fn (
            self: *const ICertRequest,
            f_exchange_certificate: i32,
            str_config: ?BSTR,
            flags: i32,
            pstr_certificate: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificate: *const fn (
            self: *const ICertRequest,
            flags: i32,
            pstr_certificate: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn submit(self: *const T, flags_: i32, str_request_: ?BSTR, str_attributes_: ?BSTR, str_config_: ?BSTR, p_disposition_: ?*i32) HRESULT {
                return @as(*const ICertRequest.VTable, @ptrCast(self.vtable)).Submit(@as(*const ICertRequest, @ptrCast(self)), flags_, str_request_, str_attributes_, str_config_, p_disposition_);
            }
            pub inline fn retrievePending(self: *const T, request_id_: i32, str_config_: ?BSTR, p_disposition_: ?*i32) HRESULT {
                return @as(*const ICertRequest.VTable, @ptrCast(self.vtable)).RetrievePending(@as(*const ICertRequest, @ptrCast(self)), request_id_, str_config_, p_disposition_);
            }
            pub inline fn getLastStatus(self: *const T, p_status_: ?*i32) HRESULT {
                return @as(*const ICertRequest.VTable, @ptrCast(self.vtable)).GetLastStatus(@as(*const ICertRequest, @ptrCast(self)), p_status_);
            }
            pub inline fn getRequestId(self: *const T, p_request_id_: ?*i32) HRESULT {
                return @as(*const ICertRequest.VTable, @ptrCast(self.vtable)).GetRequestId(@as(*const ICertRequest, @ptrCast(self)), p_request_id_);
            }
            pub inline fn getDispositionMessage(self: *const T, pstr_disposition_message_: ?*?BSTR) HRESULT {
                return @as(*const ICertRequest.VTable, @ptrCast(self.vtable)).GetDispositionMessage(@as(*const ICertRequest, @ptrCast(self)), pstr_disposition_message_);
            }
            pub inline fn getCACertificate(self: *const T, f_exchange_certificate_: i32, str_config_: ?BSTR, flags_: i32, pstr_certificate_: ?*?BSTR) HRESULT {
                return @as(*const ICertRequest.VTable, @ptrCast(self.vtable)).GetCACertificate(@as(*const ICertRequest, @ptrCast(self)), f_exchange_certificate_, str_config_, flags_, pstr_certificate_);
            }
            pub inline fn getCertificate(self: *const T, flags_: i32, pstr_certificate_: ?*?BSTR) HRESULT {
                return @as(*const ICertRequest.VTable, @ptrCast(self.vtable)).GetCertificate(@as(*const ICertRequest, @ptrCast(self)), flags_, pstr_certificate_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICertRequest2_Value = Guid.initString("a4772988-4a85-4fa9-824e-b5cf5c16405a");
pub const IID_ICertRequest2 = &IID_ICertRequest2_Value;
pub const ICertRequest2 = extern struct {
    pub const VTable = extern struct {
        base: ICertRequest.VTable,
        GetIssuedCertificate: *const fn (
            self: *const ICertRequest2,
            str_config: ?BSTR,
            request_id: i32,
            str_serial_number: ?BSTR,
            p_disposition: ?*CR_DISP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorMessageText: *const fn (
            self: *const ICertRequest2,
            hr_message: i32,
            flags: i32,
            pstr_error_message_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAProperty: *const fn (
            self: *const ICertRequest2,
            str_config: ?BSTR,
            prop_id: i32,
            prop_index: i32,
            prop_type: i32,
            flags: i32,
            pvar_property_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAPropertyFlags: *const fn (
            self: *const ICertRequest2,
            str_config: ?BSTR,
            prop_id: i32,
            p_prop_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAPropertyDisplayName: *const fn (
            self: *const ICertRequest2,
            str_config: ?BSTR,
            prop_id: i32,
            pstr_display_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFullResponseProperty: *const fn (
            self: *const ICertRequest2,
            prop_id: FULL_RESPONSE_PROPERTY_ID,
            prop_index: i32,
            prop_type: CERT_PROPERTY_TYPE,
            flags: CERT_REQUEST_OUT_TYPE,
            pvar_property_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertRequest.MethodMixin(T);
            pub inline fn getIssuedCertificate(self: *const T, str_config_: ?BSTR, request_id_: i32, str_serial_number_: ?BSTR, p_disposition_: ?*CR_DISP) HRESULT {
                return @as(*const ICertRequest2.VTable, @ptrCast(self.vtable)).GetIssuedCertificate(@as(*const ICertRequest2, @ptrCast(self)), str_config_, request_id_, str_serial_number_, p_disposition_);
            }
            pub inline fn getErrorMessageText(self: *const T, hr_message_: i32, flags_: i32, pstr_error_message_text_: ?*?BSTR) HRESULT {
                return @as(*const ICertRequest2.VTable, @ptrCast(self.vtable)).GetErrorMessageText(@as(*const ICertRequest2, @ptrCast(self)), hr_message_, flags_, pstr_error_message_text_);
            }
            pub inline fn getCAProperty(self: *const T, str_config_: ?BSTR, prop_id_: i32, prop_index_: i32, prop_type_: i32, flags_: i32, pvar_property_value_: ?*VARIANT) HRESULT {
                return @as(*const ICertRequest2.VTable, @ptrCast(self.vtable)).GetCAProperty(@as(*const ICertRequest2, @ptrCast(self)), str_config_, prop_id_, prop_index_, prop_type_, flags_, pvar_property_value_);
            }
            pub inline fn getCAPropertyFlags(self: *const T, str_config_: ?BSTR, prop_id_: i32, p_prop_flags_: ?*i32) HRESULT {
                return @as(*const ICertRequest2.VTable, @ptrCast(self.vtable)).GetCAPropertyFlags(@as(*const ICertRequest2, @ptrCast(self)), str_config_, prop_id_, p_prop_flags_);
            }
            pub inline fn getCAPropertyDisplayName(self: *const T, str_config_: ?BSTR, prop_id_: i32, pstr_display_name_: ?*?BSTR) HRESULT {
                return @as(*const ICertRequest2.VTable, @ptrCast(self.vtable)).GetCAPropertyDisplayName(@as(*const ICertRequest2, @ptrCast(self)), str_config_, prop_id_, pstr_display_name_);
            }
            pub inline fn getFullResponseProperty(self: *const T, prop_id_: FULL_RESPONSE_PROPERTY_ID, prop_index_: i32, prop_type_: CERT_PROPERTY_TYPE, flags_: CERT_REQUEST_OUT_TYPE, pvar_property_value_: ?*VARIANT) HRESULT {
                return @as(*const ICertRequest2.VTable, @ptrCast(self.vtable)).GetFullResponseProperty(@as(*const ICertRequest2, @ptrCast(self)), prop_id_, prop_index_, prop_type_, flags_, pvar_property_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const X509EnrollmentAuthFlags = enum(i32) {
    None = 0,
    Anonymous = 1,
    Kerberos = 2,
    Username = 4,
    Certificate = 8,
};
pub const X509AuthNone = X509EnrollmentAuthFlags.None;
pub const X509AuthAnonymous = X509EnrollmentAuthFlags.Anonymous;
pub const X509AuthKerberos = X509EnrollmentAuthFlags.Kerberos;
pub const X509AuthUsername = X509EnrollmentAuthFlags.Username;
pub const X509AuthCertificate = X509EnrollmentAuthFlags.Certificate;

// TODO: this type is limited to platform 'windows6.1'
const IID_ICertRequest3_Value = Guid.initString("afc8f92b-33a2-4861-bf36-2933b7cd67b3");
pub const IID_ICertRequest3 = &IID_ICertRequest3_Value;
pub const ICertRequest3 = extern struct {
    pub const VTable = extern struct {
        base: ICertRequest2.VTable,
        SetCredential: *const fn (
            self: *const ICertRequest3,
            h_wnd: i32,
            auth_type: X509EnrollmentAuthFlags,
            str_credential: ?BSTR,
            str_password: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestIdString: *const fn (
            self: *const ICertRequest3,
            pstr_request_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIssuedCertificate2: *const fn (
            self: *const ICertRequest3,
            str_config: ?BSTR,
            str_request_id: ?BSTR,
            str_serial_number: ?BSTR,
            p_disposition: ?*CR_DISP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRefreshPolicy: *const fn (
            self: *const ICertRequest3,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertRequest2.MethodMixin(T);
            pub inline fn setCredential(self: *const T, h_wnd_: i32, auth_type_: X509EnrollmentAuthFlags, str_credential_: ?BSTR, str_password_: ?BSTR) HRESULT {
                return @as(*const ICertRequest3.VTable, @ptrCast(self.vtable)).SetCredential(@as(*const ICertRequest3, @ptrCast(self)), h_wnd_, auth_type_, str_credential_, str_password_);
            }
            pub inline fn getRequestIdString(self: *const T, pstr_request_id_: ?*?BSTR) HRESULT {
                return @as(*const ICertRequest3.VTable, @ptrCast(self.vtable)).GetRequestIdString(@as(*const ICertRequest3, @ptrCast(self)), pstr_request_id_);
            }
            pub inline fn getIssuedCertificate2(self: *const T, str_config_: ?BSTR, str_request_id_: ?BSTR, str_serial_number_: ?BSTR, p_disposition_: ?*CR_DISP) HRESULT {
                return @as(*const ICertRequest3.VTable, @ptrCast(self.vtable)).GetIssuedCertificate2(@as(*const ICertRequest3, @ptrCast(self)), str_config_, str_request_id_, str_serial_number_, p_disposition_);
            }
            pub inline fn getRefreshPolicy(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const ICertRequest3.VTable, @ptrCast(self.vtable)).GetRefreshPolicy(@as(*const ICertRequest3, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_CCertEncodeStringArray_Value = Guid.initString("19a76fe0-7494-11d0-8816-00a0c903b83c");
pub const CLSID_CCertEncodeStringArray = &CLSID_CCertEncodeStringArray_Value;

const CLSID_CCertEncodeLongArray_Value = Guid.initString("4e0680a0-a0a2-11d0-8821-00a0c903b83c");
pub const CLSID_CCertEncodeLongArray = &CLSID_CCertEncodeLongArray_Value;

const CLSID_CCertEncodeDateArray_Value = Guid.initString("301f77b0-a470-11d0-8821-00a0c903b83c");
pub const CLSID_CCertEncodeDateArray = &CLSID_CCertEncodeDateArray_Value;

const CLSID_CCertEncodeCRLDistInfo_Value = Guid.initString("01fa60a0-bbff-11d0-8825-00a0c903b83c");
pub const CLSID_CCertEncodeCRLDistInfo = &CLSID_CCertEncodeCRLDistInfo_Value;

const CLSID_CCertEncodeAltName_Value = Guid.initString("1cfc4cda-1271-11d1-9bd4-00c04fb683fa");
pub const CLSID_CCertEncodeAltName = &CLSID_CCertEncodeAltName_Value;

const CLSID_CCertEncodeBitString_Value = Guid.initString("6d6b3cd8-1278-11d1-9bd4-00c04fb683fa");
pub const CLSID_CCertEncodeBitString = &CLSID_CCertEncodeBitString_Value;

const CLSID_CObjectId_Value = Guid.initString("884e2000-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CObjectId = &CLSID_CObjectId_Value;

const CLSID_CObjectIds_Value = Guid.initString("884e2001-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CObjectIds = &CLSID_CObjectIds_Value;

const CLSID_CBinaryConverter_Value = Guid.initString("884e2002-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CBinaryConverter = &CLSID_CBinaryConverter_Value;

const CLSID_CX500DistinguishedName_Value = Guid.initString("884e2003-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX500DistinguishedName = &CLSID_CX500DistinguishedName_Value;

const CLSID_CCspInformation_Value = Guid.initString("884e2007-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCspInformation = &CLSID_CCspInformation_Value;

const CLSID_CCspInformations_Value = Guid.initString("884e2008-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCspInformations = &CLSID_CCspInformations_Value;

const CLSID_CCspStatus_Value = Guid.initString("884e2009-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCspStatus = &CLSID_CCspStatus_Value;

const CLSID_CX509PublicKey_Value = Guid.initString("884e200b-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509PublicKey = &CLSID_CX509PublicKey_Value;

const CLSID_CX509PrivateKey_Value = Guid.initString("884e200c-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509PrivateKey = &CLSID_CX509PrivateKey_Value;

const CLSID_CX509EndorsementKey_Value = Guid.initString("11a25a1d-b9a3-4edd-af83-3b59adbed361");
pub const CLSID_CX509EndorsementKey = &CLSID_CX509EndorsementKey_Value;

const CLSID_CX509Extension_Value = Guid.initString("884e200d-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509Extension = &CLSID_CX509Extension_Value;

const CLSID_CX509Extensions_Value = Guid.initString("884e200e-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509Extensions = &CLSID_CX509Extensions_Value;

const CLSID_CX509ExtensionKeyUsage_Value = Guid.initString("884e200f-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionKeyUsage = &CLSID_CX509ExtensionKeyUsage_Value;

const CLSID_CX509ExtensionEnhancedKeyUsage_Value = Guid.initString("884e2010-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionEnhancedKeyUsage = &CLSID_CX509ExtensionEnhancedKeyUsage_Value;

const CLSID_CX509ExtensionTemplateName_Value = Guid.initString("884e2011-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionTemplateName = &CLSID_CX509ExtensionTemplateName_Value;

const CLSID_CX509ExtensionTemplate_Value = Guid.initString("884e2012-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionTemplate = &CLSID_CX509ExtensionTemplate_Value;

const CLSID_CAlternativeName_Value = Guid.initString("884e2013-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CAlternativeName = &CLSID_CAlternativeName_Value;

const CLSID_CAlternativeNames_Value = Guid.initString("884e2014-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CAlternativeNames = &CLSID_CAlternativeNames_Value;

const CLSID_CX509ExtensionAlternativeNames_Value = Guid.initString("884e2015-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionAlternativeNames = &CLSID_CX509ExtensionAlternativeNames_Value;

const CLSID_CX509ExtensionBasicConstraints_Value = Guid.initString("884e2016-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionBasicConstraints = &CLSID_CX509ExtensionBasicConstraints_Value;

const CLSID_CX509ExtensionSubjectKeyIdentifier_Value = Guid.initString("884e2017-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionSubjectKeyIdentifier = &CLSID_CX509ExtensionSubjectKeyIdentifier_Value;

const CLSID_CX509ExtensionAuthorityKeyIdentifier_Value = Guid.initString("884e2018-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionAuthorityKeyIdentifier = &CLSID_CX509ExtensionAuthorityKeyIdentifier_Value;

const CLSID_CSmimeCapability_Value = Guid.initString("884e2019-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CSmimeCapability = &CLSID_CSmimeCapability_Value;

const CLSID_CSmimeCapabilities_Value = Guid.initString("884e201a-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CSmimeCapabilities = &CLSID_CSmimeCapabilities_Value;

const CLSID_CX509ExtensionSmimeCapabilities_Value = Guid.initString("884e201b-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionSmimeCapabilities = &CLSID_CX509ExtensionSmimeCapabilities_Value;

const CLSID_CPolicyQualifier_Value = Guid.initString("884e201c-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CPolicyQualifier = &CLSID_CPolicyQualifier_Value;

const CLSID_CPolicyQualifiers_Value = Guid.initString("884e201d-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CPolicyQualifiers = &CLSID_CPolicyQualifiers_Value;

const CLSID_CCertificatePolicy_Value = Guid.initString("884e201e-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertificatePolicy = &CLSID_CCertificatePolicy_Value;

const CLSID_CCertificatePolicies_Value = Guid.initString("884e201f-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertificatePolicies = &CLSID_CCertificatePolicies_Value;

const CLSID_CX509ExtensionCertificatePolicies_Value = Guid.initString("884e2020-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionCertificatePolicies = &CLSID_CX509ExtensionCertificatePolicies_Value;

const CLSID_CX509ExtensionMSApplicationPolicies_Value = Guid.initString("884e2021-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509ExtensionMSApplicationPolicies = &CLSID_CX509ExtensionMSApplicationPolicies_Value;

const CLSID_CX509Attribute_Value = Guid.initString("884e2022-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509Attribute = &CLSID_CX509Attribute_Value;

const CLSID_CX509Attributes_Value = Guid.initString("884e2023-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509Attributes = &CLSID_CX509Attributes_Value;

const CLSID_CX509AttributeExtensions_Value = Guid.initString("884e2024-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509AttributeExtensions = &CLSID_CX509AttributeExtensions_Value;

const CLSID_CX509AttributeClientId_Value = Guid.initString("884e2025-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509AttributeClientId = &CLSID_CX509AttributeClientId_Value;

const CLSID_CX509AttributeRenewalCertificate_Value = Guid.initString("884e2026-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509AttributeRenewalCertificate = &CLSID_CX509AttributeRenewalCertificate_Value;

const CLSID_CX509AttributeArchiveKey_Value = Guid.initString("884e2027-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509AttributeArchiveKey = &CLSID_CX509AttributeArchiveKey_Value;

const CLSID_CX509AttributeArchiveKeyHash_Value = Guid.initString("884e2028-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509AttributeArchiveKeyHash = &CLSID_CX509AttributeArchiveKeyHash_Value;

const CLSID_CX509AttributeOSVersion_Value = Guid.initString("884e202a-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509AttributeOSVersion = &CLSID_CX509AttributeOSVersion_Value;

const CLSID_CX509AttributeCspProvider_Value = Guid.initString("884e202b-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509AttributeCspProvider = &CLSID_CX509AttributeCspProvider_Value;

const CLSID_CCryptAttribute_Value = Guid.initString("884e202c-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCryptAttribute = &CLSID_CCryptAttribute_Value;

const CLSID_CCryptAttributes_Value = Guid.initString("884e202d-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCryptAttributes = &CLSID_CCryptAttributes_Value;

const CLSID_CCertProperty_Value = Guid.initString("884e202e-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertProperty = &CLSID_CCertProperty_Value;

const CLSID_CCertProperties_Value = Guid.initString("884e202f-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertProperties = &CLSID_CCertProperties_Value;

const CLSID_CCertPropertyFriendlyName_Value = Guid.initString("884e2030-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyFriendlyName = &CLSID_CCertPropertyFriendlyName_Value;

const CLSID_CCertPropertyDescription_Value = Guid.initString("884e2031-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyDescription = &CLSID_CCertPropertyDescription_Value;

const CLSID_CCertPropertyAutoEnroll_Value = Guid.initString("884e2032-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyAutoEnroll = &CLSID_CCertPropertyAutoEnroll_Value;

const CLSID_CCertPropertyRequestOriginator_Value = Guid.initString("884e2033-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyRequestOriginator = &CLSID_CCertPropertyRequestOriginator_Value;

const CLSID_CCertPropertySHA1Hash_Value = Guid.initString("884e2034-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertySHA1Hash = &CLSID_CCertPropertySHA1Hash_Value;

const CLSID_CCertPropertyKeyProvInfo_Value = Guid.initString("884e2036-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyKeyProvInfo = &CLSID_CCertPropertyKeyProvInfo_Value;

const CLSID_CCertPropertyArchived_Value = Guid.initString("884e2037-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyArchived = &CLSID_CCertPropertyArchived_Value;

const CLSID_CCertPropertyBackedUp_Value = Guid.initString("884e2038-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyBackedUp = &CLSID_CCertPropertyBackedUp_Value;

const CLSID_CCertPropertyEnrollment_Value = Guid.initString("884e2039-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyEnrollment = &CLSID_CCertPropertyEnrollment_Value;

const CLSID_CCertPropertyRenewal_Value = Guid.initString("884e203a-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyRenewal = &CLSID_CCertPropertyRenewal_Value;

const CLSID_CCertPropertyArchivedKeyHash_Value = Guid.initString("884e203b-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyArchivedKeyHash = &CLSID_CCertPropertyArchivedKeyHash_Value;

const CLSID_CCertPropertyEnrollmentPolicyServer_Value = Guid.initString("884e204c-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CCertPropertyEnrollmentPolicyServer = &CLSID_CCertPropertyEnrollmentPolicyServer_Value;

const CLSID_CSignerCertificate_Value = Guid.initString("884e203d-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CSignerCertificate = &CLSID_CSignerCertificate_Value;

const CLSID_CX509NameValuePair_Value = Guid.initString("884e203f-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509NameValuePair = &CLSID_CX509NameValuePair_Value;

const CLSID_CCertificateAttestationChallenge_Value = Guid.initString("1362ada1-eb60-456a-b6e1-118050db741b");
pub const CLSID_CCertificateAttestationChallenge = &CLSID_CCertificateAttestationChallenge_Value;

const CLSID_CX509CertificateRequestPkcs10_Value = Guid.initString("884e2042-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509CertificateRequestPkcs10 = &CLSID_CX509CertificateRequestPkcs10_Value;

const CLSID_CX509CertificateRequestCertificate_Value = Guid.initString("884e2043-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509CertificateRequestCertificate = &CLSID_CX509CertificateRequestCertificate_Value;

const CLSID_CX509CertificateRequestPkcs7_Value = Guid.initString("884e2044-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509CertificateRequestPkcs7 = &CLSID_CX509CertificateRequestPkcs7_Value;

const CLSID_CX509CertificateRequestCmc_Value = Guid.initString("884e2045-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509CertificateRequestCmc = &CLSID_CX509CertificateRequestCmc_Value;

const CLSID_CX509Enrollment_Value = Guid.initString("884e2046-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509Enrollment = &CLSID_CX509Enrollment_Value;

const CLSID_CX509EnrollmentWebClassFactory_Value = Guid.initString("884e2049-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509EnrollmentWebClassFactory = &CLSID_CX509EnrollmentWebClassFactory_Value;

const CLSID_CX509EnrollmentHelper_Value = Guid.initString("884e2050-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509EnrollmentHelper = &CLSID_CX509EnrollmentHelper_Value;

const CLSID_CX509MachineEnrollmentFactory_Value = Guid.initString("884e2051-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509MachineEnrollmentFactory = &CLSID_CX509MachineEnrollmentFactory_Value;

const CLSID_CX509EnrollmentPolicyActiveDirectory_Value = Guid.initString("91f39027-217f-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509EnrollmentPolicyActiveDirectory = &CLSID_CX509EnrollmentPolicyActiveDirectory_Value;

const CLSID_CX509EnrollmentPolicyWebService_Value = Guid.initString("91f39028-217f-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509EnrollmentPolicyWebService = &CLSID_CX509EnrollmentPolicyWebService_Value;

const CLSID_CX509PolicyServerListManager_Value = Guid.initString("91f39029-217f-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509PolicyServerListManager = &CLSID_CX509PolicyServerListManager_Value;

const CLSID_CX509PolicyServerUrl_Value = Guid.initString("91f3902a-217f-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509PolicyServerUrl = &CLSID_CX509PolicyServerUrl_Value;

const CLSID_CX509CertificateTemplateADWritable_Value = Guid.initString("8336e323-2e6a-4a04-937c-548f681839b3");
pub const CLSID_CX509CertificateTemplateADWritable = &CLSID_CX509CertificateTemplateADWritable_Value;

const CLSID_CX509CertificateRevocationListEntry_Value = Guid.initString("884e205e-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509CertificateRevocationListEntry = &CLSID_CX509CertificateRevocationListEntry_Value;

const CLSID_CX509CertificateRevocationListEntries_Value = Guid.initString("884e205f-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509CertificateRevocationListEntries = &CLSID_CX509CertificateRevocationListEntries_Value;

const CLSID_CX509CertificateRevocationList_Value = Guid.initString("884e2060-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509CertificateRevocationList = &CLSID_CX509CertificateRevocationList_Value;

const CLSID_CX509SCEPEnrollment_Value = Guid.initString("884e2061-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509SCEPEnrollment = &CLSID_CX509SCEPEnrollment_Value;

const CLSID_CX509SCEPEnrollmentHelper_Value = Guid.initString("884e2062-217d-11da-b2a4-000e7bbb2b09");
pub const CLSID_CX509SCEPEnrollmentHelper = &CLSID_CX509SCEPEnrollmentHelper_Value;

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertManageModule_Value = Guid.initString("e7d7ad42-bd3d-11d1-9a4d-00c04fc297eb");
pub const IID_ICertManageModule = &IID_ICertManageModule_Value;
pub const ICertManageModule = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetProperty: *const fn (
            self: *const ICertManageModule,
            str_config: ?BSTR,
            str_storage_location: ?BSTR,
            str_property_name: ?BSTR,
            flags: i32,
            pvar_property: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn (
            self: *const ICertManageModule,
            str_config: ?BSTR,
            str_storage_location: ?BSTR,
            str_property_name: ?BSTR,
            flags: i32,
            pvar_property: ?*const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Configure: *const fn (
            self: *const ICertManageModule,
            str_config: ?BSTR,
            str_storage_location: ?BSTR,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getProperty(self: *const T, str_config_: ?BSTR, str_storage_location_: ?BSTR, str_property_name_: ?BSTR, flags_: i32, pvar_property_: ?*VARIANT) HRESULT {
                return @as(*const ICertManageModule.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const ICertManageModule, @ptrCast(self)), str_config_, str_storage_location_, str_property_name_, flags_, pvar_property_);
            }
            pub inline fn setProperty(self: *const T, str_config_: ?BSTR, str_storage_location_: ?BSTR, str_property_name_: ?BSTR, flags_: i32, pvar_property_: ?*const VARIANT) HRESULT {
                return @as(*const ICertManageModule.VTable, @ptrCast(self.vtable)).SetProperty(@as(*const ICertManageModule, @ptrCast(self)), str_config_, str_storage_location_, str_property_name_, flags_, pvar_property_);
            }
            pub inline fn configure(self: *const T, str_config_: ?BSTR, str_storage_location_: ?BSTR, flags_: i32) HRESULT {
                return @as(*const ICertManageModule.VTable, @ptrCast(self.vtable)).Configure(@as(*const ICertManageModule, @ptrCast(self)), str_config_, str_storage_location_, flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CERTTRANSBLOB = extern struct {
    cb: u32,
    pb: ?*u8,
};

pub const CERTVIEWRESTRICTION = extern struct {
    ColumnIndex: u32,
    SeekOperator: i32,
    SortOrder: i32,
    pbValue: ?*u8,
    cbValue: u32,
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertPolicy_Value = Guid.initString("38bb5a00-7636-11d0-b413-00a0c91bbf8c");
pub const IID_ICertPolicy = &IID_ICertPolicy_Value;
pub const ICertPolicy = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const ICertPolicy,
            str_config: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        VerifyRequest: *const fn (
            self: *const ICertPolicy,
            str_config: ?BSTR,
            context: i32,
            b_new_request: i32,
            flags: i32,
            p_disposition: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: *const fn (
            self: *const ICertPolicy,
            pstr_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShutDown: *const fn (
            self: *const ICertPolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, str_config_: ?BSTR) HRESULT {
                return @as(*const ICertPolicy.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ICertPolicy, @ptrCast(self)), str_config_);
            }
            pub inline fn verifyRequest(self: *const T, str_config_: ?BSTR, context_: i32, b_new_request_: i32, flags_: i32, p_disposition_: ?*i32) HRESULT {
                return @as(*const ICertPolicy.VTable, @ptrCast(self.vtable)).VerifyRequest(@as(*const ICertPolicy, @ptrCast(self)), str_config_, context_, b_new_request_, flags_, p_disposition_);
            }
            pub inline fn getDescription(self: *const T, pstr_description_: ?*?BSTR) HRESULT {
                return @as(*const ICertPolicy.VTable, @ptrCast(self.vtable)).GetDescription(@as(*const ICertPolicy, @ptrCast(self)), pstr_description_);
            }
            pub inline fn shutDown(self: *const T) HRESULT {
                return @as(*const ICertPolicy.VTable, @ptrCast(self.vtable)).ShutDown(@as(*const ICertPolicy, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertPolicy2_Value = Guid.initString("3db4910e-8001-4bf1-aa1b-f43a808317a0");
pub const IID_ICertPolicy2 = &IID_ICertPolicy2_Value;
pub const ICertPolicy2 = extern struct {
    pub const VTable = extern struct {
        base: ICertPolicy.VTable,
        GetManageModule: *const fn (
            self: *const ICertPolicy2,
            pp_manage_module: ?*?*ICertManageModule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertPolicy.MethodMixin(T);
            pub inline fn getManageModule(self: *const T, pp_manage_module_: ?*?*ICertManageModule) HRESULT {
                return @as(*const ICertPolicy2.VTable, @ptrCast(self.vtable)).GetManageModule(@as(*const ICertPolicy2, @ptrCast(self)), pp_manage_module_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const X509SCEPMessageType = enum(i32) {
    Unknown = -1,
    CertResponse = 3,
    PKCSRequest = 19,
    GetCertInitial = 20,
    GetCert = 21,
    GetCRL = 22,
    ClaimChallengeAnswer = 41,
};
pub const SCEPMessageUnknown = X509SCEPMessageType.Unknown;
pub const SCEPMessageCertResponse = X509SCEPMessageType.CertResponse;
pub const SCEPMessagePKCSRequest = X509SCEPMessageType.PKCSRequest;
pub const SCEPMessageGetCertInitial = X509SCEPMessageType.GetCertInitial;
pub const SCEPMessageGetCert = X509SCEPMessageType.GetCert;
pub const SCEPMessageGetCRL = X509SCEPMessageType.GetCRL;
pub const SCEPMessageClaimChallengeAnswer = X509SCEPMessageType.ClaimChallengeAnswer;

pub const X509SCEPDisposition = enum(i32) {
    Unknown = -1,
    Success = 0,
    Failure = 2,
    Pending = 3,
    PendingChallenge = 11,
};
pub const SCEPDispositionUnknown = X509SCEPDisposition.Unknown;
pub const SCEPDispositionSuccess = X509SCEPDisposition.Success;
pub const SCEPDispositionFailure = X509SCEPDisposition.Failure;
pub const SCEPDispositionPending = X509SCEPDisposition.Pending;
pub const SCEPDispositionPendingChallenge = X509SCEPDisposition.PendingChallenge;

pub const X509SCEPFailInfo = enum(i32) {
    Unknown = -1,
    BadAlgorithm = 0,
    BadMessageCheck = 1,
    BadRequest = 2,
    BadTime = 3,
    BadCertId = 4,
};
pub const SCEPFailUnknown = X509SCEPFailInfo.Unknown;
pub const SCEPFailBadAlgorithm = X509SCEPFailInfo.BadAlgorithm;
pub const SCEPFailBadMessageCheck = X509SCEPFailInfo.BadMessageCheck;
pub const SCEPFailBadRequest = X509SCEPFailInfo.BadRequest;
pub const SCEPFailBadTime = X509SCEPFailInfo.BadTime;
pub const SCEPFailBadCertId = X509SCEPFailInfo.BadCertId;

const IID_INDESPolicy_Value = Guid.initString("13ca515d-431d-46cc-8c2e-1da269bbd625");
pub const IID_INDESPolicy = &IID_INDESPolicy_Value;
pub const INDESPolicy = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const INDESPolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Uninitialize: *const fn (
            self: *const INDESPolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateChallenge: *const fn (
            self: *const INDESPolicy,
            pwsz_template: ?[*:0]const u16,
            pwsz_params: ?[*:0]const u16,
            ppwsz_response: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        VerifyRequest: *const fn (
            self: *const INDESPolicy,
            pctb_request: ?*CERTTRANSBLOB,
            pctb_signing_cert_encoded: ?*CERTTRANSBLOB,
            pwsz_template: ?[*:0]const u16,
            pwsz_transaction_id: ?[*:0]const u16,
            pf_verified: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Notify: *const fn (
            self: *const INDESPolicy,
            pwsz_challenge: ?[*:0]const u16,
            pwsz_transaction_id: ?[*:0]const u16,
            disposition: X509SCEPDisposition,
            last_h_result: i32,
            pctb_issued_cert_encoded: ?*CERTTRANSBLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T) HRESULT {
                return @as(*const INDESPolicy.VTable, @ptrCast(self.vtable)).Initialize(@as(*const INDESPolicy, @ptrCast(self)));
            }
            pub inline fn uninitialize(self: *const T) HRESULT {
                return @as(*const INDESPolicy.VTable, @ptrCast(self.vtable)).Uninitialize(@as(*const INDESPolicy, @ptrCast(self)));
            }
            pub inline fn generateChallenge(self: *const T, pwsz_template_: ?[*:0]const u16, pwsz_params_: ?[*:0]const u16, ppwsz_response_: ?*?PWSTR) HRESULT {
                return @as(*const INDESPolicy.VTable, @ptrCast(self.vtable)).GenerateChallenge(@as(*const INDESPolicy, @ptrCast(self)), pwsz_template_, pwsz_params_, ppwsz_response_);
            }
            pub inline fn verifyRequest(self: *const T, pctb_request_: ?*CERTTRANSBLOB, pctb_signing_cert_encoded_: ?*CERTTRANSBLOB, pwsz_template_: ?[*:0]const u16, pwsz_transaction_id_: ?[*:0]const u16, pf_verified_: ?*BOOL) HRESULT {
                return @as(*const INDESPolicy.VTable, @ptrCast(self.vtable)).VerifyRequest(@as(*const INDESPolicy, @ptrCast(self)), pctb_request_, pctb_signing_cert_encoded_, pwsz_template_, pwsz_transaction_id_, pf_verified_);
            }
            pub inline fn notify(self: *const T, pwsz_challenge_: ?[*:0]const u16, pwsz_transaction_id_: ?[*:0]const u16, disposition_: X509SCEPDisposition, last_h_result_: i32, pctb_issued_cert_encoded_: ?*CERTTRANSBLOB) HRESULT {
                return @as(*const INDESPolicy.VTable, @ptrCast(self.vtable)).Notify(@as(*const INDESPolicy, @ptrCast(self)), pwsz_challenge_, pwsz_transaction_id_, disposition_, last_h_result_, pctb_issued_cert_encoded_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CERTENROLL_OBJECTID = enum(i32) {
    _NONE = 0,
    _RSA = 1,
    _PKCS = 2,
    _RSA_HASH = 3,
    _RSA_ENCRYPT = 4,
    _PKCS_1 = 5,
    _PKCS_2 = 6,
    _PKCS_3 = 7,
    _PKCS_4 = 8,
    _PKCS_5 = 9,
    _PKCS_6 = 10,
    _PKCS_7 = 11,
    _PKCS_8 = 12,
    _PKCS_9 = 13,
    _PKCS_10 = 14,
    _PKCS_12 = 15,
    _RSA_RSA = 16,
    _RSA_MD2RSA = 17,
    _RSA_MD4RSA = 18,
    _RSA_MD5RSA = 19,
    _RSA_SHA1RSA = 20,
    _RSA_SETOAEP_RSA = 21,
    _RSA_DH = 22,
    _RSA_data = 23,
    _RSA_signedData = 24,
    _RSA_envelopedData = 25,
    _RSA_signEnvData = 26,
    _RSA_digestedData = 27,
    _RSA_hashedData = 28,
    _RSA_encryptedData = 29,
    _RSA_emailAddr = 30,
    _RSA_unstructName = 31,
    _RSA_contentType = 32,
    _RSA_messageDigest = 33,
    _RSA_signingTime = 34,
    _RSA_counterSign = 35,
    _RSA_challengePwd = 36,
    _RSA_unstructAddr = 37,
    _RSA_extCertAttrs = 38,
    _RSA_certExtensions = 39,
    _RSA_SMIMECapabilities = 40,
    _RSA_preferSignedData = 41,
    _RSA_SMIMEalg = 42,
    _RSA_SMIMEalgESDH = 43,
    _RSA_SMIMEalgCMS3DESwrap = 44,
    _RSA_SMIMEalgCMSRC2wrap = 45,
    _RSA_MD2 = 46,
    _RSA_MD4 = 47,
    _RSA_MD5 = 48,
    _RSA_RC2CBC = 49,
    _RSA_RC4 = 50,
    _RSA_DES_EDE3_CBC = 51,
    _RSA_RC5_CBCPad = 52,
    _ANSI_X942 = 53,
    _ANSI_X942_DH = 54,
    _X957 = 55,
    _X957_DSA = 56,
    _X957_SHA1DSA = 57,
    _DS = 58,
    _DSALG = 59,
    _DSALG_CRPT = 60,
    _DSALG_HASH = 61,
    _DSALG_SIGN = 62,
    _DSALG_RSA = 63,
    _OIW = 64,
    _OIWSEC = 65,
    _OIWSEC_md4RSA = 66,
    _OIWSEC_md5RSA = 67,
    _OIWSEC_md4RSA2 = 68,
    _OIWSEC_desECB = 69,
    _OIWSEC_desCBC = 70,
    _OIWSEC_desOFB = 71,
    _OIWSEC_desCFB = 72,
    _OIWSEC_desMAC = 73,
    _OIWSEC_rsaSign = 74,
    _OIWSEC_dsa = 75,
    _OIWSEC_shaDSA = 76,
    _OIWSEC_mdc2RSA = 77,
    _OIWSEC_shaRSA = 78,
    _OIWSEC_dhCommMod = 79,
    _OIWSEC_desEDE = 80,
    _OIWSEC_sha = 81,
    _OIWSEC_mdc2 = 82,
    _OIWSEC_dsaComm = 83,
    _OIWSEC_dsaCommSHA = 84,
    _OIWSEC_rsaXchg = 85,
    _OIWSEC_keyHashSeal = 86,
    _OIWSEC_md2RSASign = 87,
    _OIWSEC_md5RSASign = 88,
    _OIWSEC_sha1 = 89,
    _OIWSEC_dsaSHA1 = 90,
    _OIWSEC_dsaCommSHA1 = 91,
    _OIWSEC_sha1RSASign = 92,
    _OIWDIR = 93,
    _OIWDIR_CRPT = 94,
    _OIWDIR_HASH = 95,
    _OIWDIR_SIGN = 96,
    _OIWDIR_md2 = 97,
    _OIWDIR_md2RSA = 98,
    _INFOSEC = 99,
    _INFOSEC_sdnsSignature = 100,
    _INFOSEC_mosaicSignature = 101,
    _INFOSEC_sdnsConfidentiality = 102,
    _INFOSEC_mosaicConfidentiality = 103,
    _INFOSEC_sdnsIntegrity = 104,
    _INFOSEC_mosaicIntegrity = 105,
    _INFOSEC_sdnsTokenProtection = 106,
    _INFOSEC_mosaicTokenProtection = 107,
    _INFOSEC_sdnsKeyManagement = 108,
    _INFOSEC_mosaicKeyManagement = 109,
    _INFOSEC_sdnsKMandSig = 110,
    _INFOSEC_mosaicKMandSig = 111,
    _INFOSEC_SuiteASignature = 112,
    _INFOSEC_SuiteAConfidentiality = 113,
    _INFOSEC_SuiteAIntegrity = 114,
    _INFOSEC_SuiteATokenProtection = 115,
    _INFOSEC_SuiteAKeyManagement = 116,
    _INFOSEC_SuiteAKMandSig = 117,
    _INFOSEC_mosaicUpdatedSig = 118,
    _INFOSEC_mosaicKMandUpdSig = 119,
    _INFOSEC_mosaicUpdatedInteg = 120,
    _COMMON_NAME = 121,
    _SUR_NAME = 122,
    _DEVICE_SERIAL_NUMBER = 123,
    _COUNTRY_NAME = 124,
    _LOCALITY_NAME = 125,
    _STATE_OR_PROVINCE_NAME = 126,
    _STREET_ADDRESS = 127,
    _ORGANIZATION_NAME = 128,
    _ORGANIZATIONAL_UNIT_NAME = 129,
    _TITLE = 130,
    _DESCRIPTION = 131,
    _SEARCH_GUIDE = 132,
    _BUSINESS_CATEGORY = 133,
    _POSTAL_ADDRESS = 134,
    _POSTAL_CODE = 135,
    _POST_OFFICE_BOX = 136,
    _PHYSICAL_DELIVERY_OFFICE_NAME = 137,
    _TELEPHONE_NUMBER = 138,
    _TELEX_NUMBER = 139,
    _TELETEXT_TERMINAL_IDENTIFIER = 140,
    _FACSIMILE_TELEPHONE_NUMBER = 141,
    _X21_ADDRESS = 142,
    _INTERNATIONAL_ISDN_NUMBER = 143,
    _REGISTERED_ADDRESS = 144,
    _DESTINATION_INDICATOR = 145,
    _PREFERRED_DELIVERY_METHOD = 146,
    _PRESENTATION_ADDRESS = 147,
    _SUPPORTED_APPLICATION_CONTEXT = 148,
    _MEMBER = 149,
    _OWNER = 150,
    _ROLE_OCCUPANT = 151,
    _SEE_ALSO = 152,
    _USER_PASSWORD = 153,
    _USER_CERTIFICATE = 154,
    _CA_CERTIFICATE = 155,
    _AUTHORITY_REVOCATION_LIST = 156,
    _CERTIFICATE_REVOCATION_LIST = 157,
    _CROSS_CERTIFICATE_PAIR = 158,
    _GIVEN_NAME = 159,
    _INITIALS = 160,
    _DN_QUALIFIER = 161,
    _DOMAIN_COMPONENT = 162,
    _PKCS_12_FRIENDLY_NAME_ATTR = 163,
    _PKCS_12_LOCAL_KEY_ID = 164,
    _PKCS_12_KEY_PROVIDER_NAME_ATTR = 165,
    _LOCAL_MACHINE_KEYSET = 166,
    _PKCS_12_EXTENDED_ATTRIBUTES = 167,
    _KEYID_RDN = 168,
    _AUTHORITY_KEY_IDENTIFIER = 169,
    _KEY_ATTRIBUTES = 170,
    _CERT_POLICIES_95 = 171,
    _KEY_USAGE_RESTRICTION = 172,
    _SUBJECT_ALT_NAME = 173,
    _ISSUER_ALT_NAME = 174,
    _BASIC_CONSTRAINTS = 175,
    _KEY_USAGE = 176,
    _PRIVATEKEY_USAGE_PERIOD = 177,
    _BASIC_CONSTRAINTS2 = 178,
    _CERT_POLICIES = 179,
    _ANY_CERT_POLICY = 180,
    _AUTHORITY_KEY_IDENTIFIER2 = 181,
    _SUBJECT_KEY_IDENTIFIER = 182,
    _SUBJECT_ALT_NAME2 = 183,
    _ISSUER_ALT_NAME2 = 184,
    _CRL_REASON_CODE = 185,
    _REASON_CODE_HOLD = 186,
    _CRL_DIST_POINTS = 187,
    _ENHANCED_KEY_USAGE = 188,
    _CRL_NUMBER = 189,
    _DELTA_CRL_INDICATOR = 190,
    _ISSUING_DIST_POINT = 191,
    _FRESHEST_CRL = 192,
    _NAME_CONSTRAINTS = 193,
    _POLICY_MAPPINGS = 194,
    _LEGACY_POLICY_MAPPINGS = 195,
    _POLICY_CONSTRAINTS = 196,
    _RENEWAL_CERTIFICATE = 197,
    _ENROLLMENT_NAME_VALUE_PAIR = 198,
    _ENROLLMENT_CSP_PROVIDER = 199,
    _OS_VERSION = 200,
    _ENROLLMENT_AGENT = 201,
    _PKIX = 202,
    _PKIX_PE = 203,
    _AUTHORITY_INFO_ACCESS = 204,
    _BIOMETRIC_EXT = 205,
    _LOGOTYPE_EXT = 206,
    _CERT_EXTENSIONS = 207,
    _NEXT_UPDATE_LOCATION = 208,
    _REMOVE_CERTIFICATE = 209,
    _CROSS_CERT_DIST_POINTS = 210,
    _CTL = 211,
    _SORTED_CTL = 212,
    _SERIALIZED = 213,
    _NT_PRINCIPAL_NAME = 214,
    _PRODUCT_UPDATE = 215,
    _ANY_APPLICATION_POLICY = 216,
    _AUTO_ENROLL_CTL_USAGE = 217,
    _ENROLL_CERTTYPE_EXTENSION = 218,
    _CERT_MANIFOLD = 219,
    _CERTSRV_CA_VERSION = 220,
    _CERTSRV_PREVIOUS_CERT_HASH = 221,
    _CRL_VIRTUAL_BASE = 222,
    _CRL_NEXT_PUBLISH = 223,
    _KP_CA_EXCHANGE = 224,
    _KP_KEY_RECOVERY_AGENT = 225,
    _CERTIFICATE_TEMPLATE = 226,
    _ENTERPRISE_OID_ROOT = 227,
    _RDN_DUMMY_SIGNER = 228,
    _APPLICATION_CERT_POLICIES = 229,
    _APPLICATION_POLICY_MAPPINGS = 230,
    _APPLICATION_POLICY_CONSTRAINTS = 231,
    _ARCHIVED_KEY_ATTR = 232,
    _CRL_SELF_CDP = 233,
    _REQUIRE_CERT_CHAIN_POLICY = 234,
    _ARCHIVED_KEY_CERT_HASH = 235,
    _ISSUED_CERT_HASH = 236,
    _DS_EMAIL_REPLICATION = 237,
    _REQUEST_CLIENT_INFO = 238,
    _ENCRYPTED_KEY_HASH = 239,
    _CERTSRV_CROSSCA_VERSION = 240,
    _NTDS_REPLICATION = 241,
    _SUBJECT_DIR_ATTRS = 242,
    _PKIX_KP = 243,
    _PKIX_KP_SERVER_AUTH = 244,
    _PKIX_KP_CLIENT_AUTH = 245,
    _PKIX_KP_CODE_SIGNING = 246,
    _PKIX_KP_EMAIL_PROTECTION = 247,
    _PKIX_KP_IPSEC_END_SYSTEM = 248,
    _PKIX_KP_IPSEC_TUNNEL = 249,
    _PKIX_KP_IPSEC_USER = 250,
    _PKIX_KP_TIMESTAMP_SIGNING = 251,
    _PKIX_KP_OCSP_SIGNING = 252,
    _PKIX_OCSP_NOCHECK = 253,
    _IPSEC_KP_IKE_INTERMEDIATE = 254,
    _KP_CTL_USAGE_SIGNING = 255,
    _KP_TIME_STAMP_SIGNING = 256,
    _SERVER_GATED_CRYPTO = 257,
    _SGC_NETSCAPE = 258,
    _KP_EFS = 259,
    _EFS_RECOVERY = 260,
    _WHQL_CRYPTO = 261,
    _NT5_CRYPTO = 262,
    _OEM_WHQL_CRYPTO = 263,
    _EMBEDDED_NT_CRYPTO = 264,
    _ROOT_LIST_SIGNER = 265,
    _KP_QUALIFIED_SUBORDINATION = 266,
    _KP_KEY_RECOVERY = 267,
    _KP_DOCUMENT_SIGNING = 268,
    _KP_LIFETIME_SIGNING = 269,
    _KP_MOBILE_DEVICE_SOFTWARE = 270,
    _KP_SMART_DISPLAY = 271,
    _KP_CSP_SIGNATURE = 272,
    _DRM = 273,
    _DRM_INDIVIDUALIZATION = 274,
    _LICENSES = 275,
    _LICENSE_SERVER = 276,
    _KP_SMARTCARD_LOGON = 277,
    _YESNO_TRUST_ATTR = 278,
    _PKIX_POLICY_QUALIFIER_CPS = 279,
    _PKIX_POLICY_QUALIFIER_USERNOTICE = 280,
    _CERT_POLICIES_95_QUALIFIER1 = 281,
    _PKIX_ACC_DESCR = 282,
    _PKIX_OCSP = 283,
    _PKIX_CA_ISSUERS = 284,
    _VERISIGN_PRIVATE_6_9 = 285,
    _VERISIGN_ONSITE_JURISDICTION_HASH = 286,
    _VERISIGN_BITSTRING_6_13 = 287,
    _VERISIGN_ISS_STRONG_CRYPTO = 288,
    _NETSCAPE = 289,
    _NETSCAPE_CERT_EXTENSION = 290,
    _NETSCAPE_CERT_TYPE = 291,
    _NETSCAPE_BASE_URL = 292,
    _NETSCAPE_REVOCATION_URL = 293,
    _NETSCAPE_CA_REVOCATION_URL = 294,
    _NETSCAPE_CERT_RENEWAL_URL = 295,
    _NETSCAPE_CA_POLICY_URL = 296,
    _NETSCAPE_SSL_SERVER_NAME = 297,
    _NETSCAPE_COMMENT = 298,
    _NETSCAPE_DATA_TYPE = 299,
    _NETSCAPE_CERT_SEQUENCE = 300,
    _CT_PKI_DATA = 301,
    _CT_PKI_RESPONSE = 302,
    _PKIX_NO_SIGNATURE = 303,
    _CMC = 304,
    _CMC_STATUS_INFO = 305,
    _CMC_IDENTIFICATION = 306,
    _CMC_IDENTITY_PROOF = 307,
    _CMC_DATA_RETURN = 308,
    _CMC_TRANSACTION_ID = 309,
    _CMC_SENDER_NONCE = 310,
    _CMC_RECIPIENT_NONCE = 311,
    _CMC_ADD_EXTENSIONS = 312,
    _CMC_ENCRYPTED_POP = 313,
    _CMC_DECRYPTED_POP = 314,
    _CMC_LRA_POP_WITNESS = 315,
    _CMC_GET_CERT = 316,
    _CMC_GET_CRL = 317,
    _CMC_REVOKE_REQUEST = 318,
    _CMC_REG_INFO = 319,
    _CMC_RESPONSE_INFO = 320,
    _CMC_QUERY_PENDING = 321,
    _CMC_ID_POP_LINK_RANDOM = 322,
    _CMC_ID_POP_LINK_WITNESS = 323,
    _CMC_ID_CONFIRM_CERT_ACCEPTANCE = 324,
    _CMC_ADD_ATTRIBUTES = 325,
    _LOYALTY_OTHER_LOGOTYPE = 326,
    _BACKGROUND_OTHER_LOGOTYPE = 327,
    _PKIX_OCSP_BASIC_SIGNED_RESPONSE = 328,
    _PKCS_7_DATA = 329,
    _PKCS_7_SIGNED = 330,
    _PKCS_7_ENVELOPED = 331,
    _PKCS_7_SIGNEDANDENVELOPED = 332,
    _PKCS_7_DIGESTED = 333,
    _PKCS_7_ENCRYPTED = 334,
    _PKCS_9_CONTENT_TYPE = 335,
    _PKCS_9_MESSAGE_DIGEST = 336,
    _CERT_PROP_ID_PREFIX = 337,
    _CERT_KEY_IDENTIFIER_PROP_ID = 338,
    _CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 339,
    _CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 340,
    _CERT_MD5_HASH_PROP_ID = 341,
    _RSA_SHA256RSA = 342,
    _RSA_SHA384RSA = 343,
    _RSA_SHA512RSA = 344,
    _NIST_sha256 = 345,
    _NIST_sha384 = 346,
    _NIST_sha512 = 347,
    _RSA_MGF1 = 348,
    _ECC_PUBLIC_KEY = 349,
    _ECDSA_SHA1 = 350,
    _ECDSA_SPECIFIED = 351,
    _ANY_ENHANCED_KEY_USAGE = 352,
    _RSA_SSA_PSS = 353,
    _ATTR_SUPPORTED_ALGORITHMS = 355,
    _ATTR_TPM_SECURITY_ASSERTIONS = 356,
    _ATTR_TPM_SPECIFICATION = 357,
    _CERT_DISALLOWED_FILETIME_PROP_ID = 358,
    _CERT_SIGNATURE_HASH_PROP_ID = 359,
    _CERT_STRONG_KEY_OS_1 = 360,
    _CERT_STRONG_KEY_OS_CURRENT = 361,
    _CERT_STRONG_KEY_OS_PREFIX = 362,
    _CERT_STRONG_SIGN_OS_1 = 363,
    _CERT_STRONG_SIGN_OS_CURRENT = 364,
    _CERT_STRONG_SIGN_OS_PREFIX = 365,
    _DH_SINGLE_PASS_STDDH_SHA1_KDF = 366,
    _DH_SINGLE_PASS_STDDH_SHA256_KDF = 367,
    _DH_SINGLE_PASS_STDDH_SHA384_KDF = 368,
    _DISALLOWED_HASH = 369,
    _DISALLOWED_LIST = 370,
    _ECC_CURVE_P256 = 371,
    _ECC_CURVE_P384 = 372,
    _ECC_CURVE_P521 = 373,
    _ECDSA_SHA256 = 374,
    _ECDSA_SHA384 = 375,
    _ECDSA_SHA512 = 376,
    _ENROLL_CAXCHGCERT_HASH = 377,
    _ENROLL_EK_INFO = 378,
    _ENROLL_EKPUB_CHALLENGE = 379,
    _ENROLL_EKVERIFYCERT = 380,
    _ENROLL_EKVERIFYCREDS = 381,
    _ENROLL_EKVERIFYKEY = 382,
    _EV_RDN_COUNTRY = 383,
    _EV_RDN_LOCALE = 384,
    _EV_RDN_STATE_OR_PROVINCE = 385,
    _INHIBIT_ANY_POLICY = 386,
    _INTERNATIONALIZED_EMAIL_ADDRESS = 387,
    _KP_KERNEL_MODE_CODE_SIGNING = 388,
    _KP_KERNEL_MODE_HAL_EXTENSION_SIGNING = 389,
    _KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING = 390,
    _KP_TPM_AIK_CERTIFICATE = 391,
    _KP_TPM_EK_CERTIFICATE = 392,
    _KP_TPM_PLATFORM_CERTIFICATE = 393,
    _NIST_AES128_CBC = 394,
    _NIST_AES128_WRAP = 395,
    _NIST_AES192_CBC = 396,
    _NIST_AES192_WRAP = 397,
    _NIST_AES256_CBC = 398,
    _NIST_AES256_WRAP = 399,
    _PKCS_12_PbeIds = 400,
    _PKCS_12_pbeWithSHA1And128BitRC2 = 401,
    _PKCS_12_pbeWithSHA1And128BitRC4 = 402,
    _PKCS_12_pbeWithSHA1And2KeyTripleDES = 403,
    _PKCS_12_pbeWithSHA1And3KeyTripleDES = 404,
    _PKCS_12_pbeWithSHA1And40BitRC2 = 405,
    _PKCS_12_pbeWithSHA1And40BitRC4 = 406,
    _PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID = 407,
    _PKINIT_KP_KDC = 408,
    _PKIX_CA_REPOSITORY = 409,
    _PKIX_OCSP_NONCE = 410,
    _PKIX_TIME_STAMPING = 411,
    _QC_EU_COMPLIANCE = 412,
    _QC_SSCD = 413,
    _QC_STATEMENTS_EXT = 414,
    _RDN_TPM_MANUFACTURER = 415,
    _RDN_TPM_MODEL = 416,
    _RDN_TPM_VERSION = 417,
    _REVOKED_LIST_SIGNER = 418,
    _RFC3161_counterSign = 419,
    _ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION = 420,
    _ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION = 421,
    _ROOT_PROGRAM_FLAGS = 422,
    _ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL = 423,
    _RSA_PSPECIFIED = 424,
    _RSAES_OAEP = 425,
    _SUBJECT_INFO_ACCESS = 426,
    _TIMESTAMP_TOKEN = 427,
    _ENROLL_SCEP_ERROR = 428,
    Verisign_MessageType = 429,
    Verisign_PkiStatus = 430,
    Verisign_FailInfo = 431,
    Verisign_SenderNonce = 432,
    Verisign_RecipientNonce = 433,
    Verisign_TransactionID = 434,
    _ENROLL_ATTESTATION_CHALLENGE = 435,
    _ENROLL_ATTESTATION_STATEMENT = 436,
    _ENROLL_ENCRYPTION_ALGORITHM = 437,
    _ENROLL_KSP_NAME = 438,
};
pub const XCN_OID_NONE = CERTENROLL_OBJECTID._NONE;
pub const XCN_OID_RSA = CERTENROLL_OBJECTID._RSA;
pub const XCN_OID_PKCS = CERTENROLL_OBJECTID._PKCS;
pub const XCN_OID_RSA_HASH = CERTENROLL_OBJECTID._RSA_HASH;
pub const XCN_OID_RSA_ENCRYPT = CERTENROLL_OBJECTID._RSA_ENCRYPT;
pub const XCN_OID_PKCS_1 = CERTENROLL_OBJECTID._PKCS_1;
pub const XCN_OID_PKCS_2 = CERTENROLL_OBJECTID._PKCS_2;
pub const XCN_OID_PKCS_3 = CERTENROLL_OBJECTID._PKCS_3;
pub const XCN_OID_PKCS_4 = CERTENROLL_OBJECTID._PKCS_4;
pub const XCN_OID_PKCS_5 = CERTENROLL_OBJECTID._PKCS_5;
pub const XCN_OID_PKCS_6 = CERTENROLL_OBJECTID._PKCS_6;
pub const XCN_OID_PKCS_7 = CERTENROLL_OBJECTID._PKCS_7;
pub const XCN_OID_PKCS_8 = CERTENROLL_OBJECTID._PKCS_8;
pub const XCN_OID_PKCS_9 = CERTENROLL_OBJECTID._PKCS_9;
pub const XCN_OID_PKCS_10 = CERTENROLL_OBJECTID._PKCS_10;
pub const XCN_OID_PKCS_12 = CERTENROLL_OBJECTID._PKCS_12;
pub const XCN_OID_RSA_RSA = CERTENROLL_OBJECTID._RSA_RSA;
pub const XCN_OID_RSA_MD2RSA = CERTENROLL_OBJECTID._RSA_MD2RSA;
pub const XCN_OID_RSA_MD4RSA = CERTENROLL_OBJECTID._RSA_MD4RSA;
pub const XCN_OID_RSA_MD5RSA = CERTENROLL_OBJECTID._RSA_MD5RSA;
pub const XCN_OID_RSA_SHA1RSA = CERTENROLL_OBJECTID._RSA_SHA1RSA;
pub const XCN_OID_RSA_SETOAEP_RSA = CERTENROLL_OBJECTID._RSA_SETOAEP_RSA;
pub const XCN_OID_RSA_DH = CERTENROLL_OBJECTID._RSA_DH;
pub const XCN_OID_RSA_data = CERTENROLL_OBJECTID._RSA_data;
pub const XCN_OID_RSA_signedData = CERTENROLL_OBJECTID._RSA_signedData;
pub const XCN_OID_RSA_envelopedData = CERTENROLL_OBJECTID._RSA_envelopedData;
pub const XCN_OID_RSA_signEnvData = CERTENROLL_OBJECTID._RSA_signEnvData;
pub const XCN_OID_RSA_digestedData = CERTENROLL_OBJECTID._RSA_digestedData;
pub const XCN_OID_RSA_hashedData = CERTENROLL_OBJECTID._RSA_hashedData;
pub const XCN_OID_RSA_encryptedData = CERTENROLL_OBJECTID._RSA_encryptedData;
pub const XCN_OID_RSA_emailAddr = CERTENROLL_OBJECTID._RSA_emailAddr;
pub const XCN_OID_RSA_unstructName = CERTENROLL_OBJECTID._RSA_unstructName;
pub const XCN_OID_RSA_contentType = CERTENROLL_OBJECTID._RSA_contentType;
pub const XCN_OID_RSA_messageDigest = CERTENROLL_OBJECTID._RSA_messageDigest;
pub const XCN_OID_RSA_signingTime = CERTENROLL_OBJECTID._RSA_signingTime;
pub const XCN_OID_RSA_counterSign = CERTENROLL_OBJECTID._RSA_counterSign;
pub const XCN_OID_RSA_challengePwd = CERTENROLL_OBJECTID._RSA_challengePwd;
pub const XCN_OID_RSA_unstructAddr = CERTENROLL_OBJECTID._RSA_unstructAddr;
pub const XCN_OID_RSA_extCertAttrs = CERTENROLL_OBJECTID._RSA_extCertAttrs;
pub const XCN_OID_RSA_certExtensions = CERTENROLL_OBJECTID._RSA_certExtensions;
pub const XCN_OID_RSA_SMIMECapabilities = CERTENROLL_OBJECTID._RSA_SMIMECapabilities;
pub const XCN_OID_RSA_preferSignedData = CERTENROLL_OBJECTID._RSA_preferSignedData;
pub const XCN_OID_RSA_SMIMEalg = CERTENROLL_OBJECTID._RSA_SMIMEalg;
pub const XCN_OID_RSA_SMIMEalgESDH = CERTENROLL_OBJECTID._RSA_SMIMEalgESDH;
pub const XCN_OID_RSA_SMIMEalgCMS3DESwrap = CERTENROLL_OBJECTID._RSA_SMIMEalgCMS3DESwrap;
pub const XCN_OID_RSA_SMIMEalgCMSRC2wrap = CERTENROLL_OBJECTID._RSA_SMIMEalgCMSRC2wrap;
pub const XCN_OID_RSA_MD2 = CERTENROLL_OBJECTID._RSA_MD2;
pub const XCN_OID_RSA_MD4 = CERTENROLL_OBJECTID._RSA_MD4;
pub const XCN_OID_RSA_MD5 = CERTENROLL_OBJECTID._RSA_MD5;
pub const XCN_OID_RSA_RC2CBC = CERTENROLL_OBJECTID._RSA_RC2CBC;
pub const XCN_OID_RSA_RC4 = CERTENROLL_OBJECTID._RSA_RC4;
pub const XCN_OID_RSA_DES_EDE3_CBC = CERTENROLL_OBJECTID._RSA_DES_EDE3_CBC;
pub const XCN_OID_RSA_RC5_CBCPad = CERTENROLL_OBJECTID._RSA_RC5_CBCPad;
pub const XCN_OID_ANSI_X942 = CERTENROLL_OBJECTID._ANSI_X942;
pub const XCN_OID_ANSI_X942_DH = CERTENROLL_OBJECTID._ANSI_X942_DH;
pub const XCN_OID_X957 = CERTENROLL_OBJECTID._X957;
pub const XCN_OID_X957_DSA = CERTENROLL_OBJECTID._X957_DSA;
pub const XCN_OID_X957_SHA1DSA = CERTENROLL_OBJECTID._X957_SHA1DSA;
pub const XCN_OID_DS = CERTENROLL_OBJECTID._DS;
pub const XCN_OID_DSALG = CERTENROLL_OBJECTID._DSALG;
pub const XCN_OID_DSALG_CRPT = CERTENROLL_OBJECTID._DSALG_CRPT;
pub const XCN_OID_DSALG_HASH = CERTENROLL_OBJECTID._DSALG_HASH;
pub const XCN_OID_DSALG_SIGN = CERTENROLL_OBJECTID._DSALG_SIGN;
pub const XCN_OID_DSALG_RSA = CERTENROLL_OBJECTID._DSALG_RSA;
pub const XCN_OID_OIW = CERTENROLL_OBJECTID._OIW;
pub const XCN_OID_OIWSEC = CERTENROLL_OBJECTID._OIWSEC;
pub const XCN_OID_OIWSEC_md4RSA = CERTENROLL_OBJECTID._OIWSEC_md4RSA;
pub const XCN_OID_OIWSEC_md5RSA = CERTENROLL_OBJECTID._OIWSEC_md5RSA;
pub const XCN_OID_OIWSEC_md4RSA2 = CERTENROLL_OBJECTID._OIWSEC_md4RSA2;
pub const XCN_OID_OIWSEC_desECB = CERTENROLL_OBJECTID._OIWSEC_desECB;
pub const XCN_OID_OIWSEC_desCBC = CERTENROLL_OBJECTID._OIWSEC_desCBC;
pub const XCN_OID_OIWSEC_desOFB = CERTENROLL_OBJECTID._OIWSEC_desOFB;
pub const XCN_OID_OIWSEC_desCFB = CERTENROLL_OBJECTID._OIWSEC_desCFB;
pub const XCN_OID_OIWSEC_desMAC = CERTENROLL_OBJECTID._OIWSEC_desMAC;
pub const XCN_OID_OIWSEC_rsaSign = CERTENROLL_OBJECTID._OIWSEC_rsaSign;
pub const XCN_OID_OIWSEC_dsa = CERTENROLL_OBJECTID._OIWSEC_dsa;
pub const XCN_OID_OIWSEC_shaDSA = CERTENROLL_OBJECTID._OIWSEC_shaDSA;
pub const XCN_OID_OIWSEC_mdc2RSA = CERTENROLL_OBJECTID._OIWSEC_mdc2RSA;
pub const XCN_OID_OIWSEC_shaRSA = CERTENROLL_OBJECTID._OIWSEC_shaRSA;
pub const XCN_OID_OIWSEC_dhCommMod = CERTENROLL_OBJECTID._OIWSEC_dhCommMod;
pub const XCN_OID_OIWSEC_desEDE = CERTENROLL_OBJECTID._OIWSEC_desEDE;
pub const XCN_OID_OIWSEC_sha = CERTENROLL_OBJECTID._OIWSEC_sha;
pub const XCN_OID_OIWSEC_mdc2 = CERTENROLL_OBJECTID._OIWSEC_mdc2;
pub const XCN_OID_OIWSEC_dsaComm = CERTENROLL_OBJECTID._OIWSEC_dsaComm;
pub const XCN_OID_OIWSEC_dsaCommSHA = CERTENROLL_OBJECTID._OIWSEC_dsaCommSHA;
pub const XCN_OID_OIWSEC_rsaXchg = CERTENROLL_OBJECTID._OIWSEC_rsaXchg;
pub const XCN_OID_OIWSEC_keyHashSeal = CERTENROLL_OBJECTID._OIWSEC_keyHashSeal;
pub const XCN_OID_OIWSEC_md2RSASign = CERTENROLL_OBJECTID._OIWSEC_md2RSASign;
pub const XCN_OID_OIWSEC_md5RSASign = CERTENROLL_OBJECTID._OIWSEC_md5RSASign;
pub const XCN_OID_OIWSEC_sha1 = CERTENROLL_OBJECTID._OIWSEC_sha1;
pub const XCN_OID_OIWSEC_dsaSHA1 = CERTENROLL_OBJECTID._OIWSEC_dsaSHA1;
pub const XCN_OID_OIWSEC_dsaCommSHA1 = CERTENROLL_OBJECTID._OIWSEC_dsaCommSHA1;
pub const XCN_OID_OIWSEC_sha1RSASign = CERTENROLL_OBJECTID._OIWSEC_sha1RSASign;
pub const XCN_OID_OIWDIR = CERTENROLL_OBJECTID._OIWDIR;
pub const XCN_OID_OIWDIR_CRPT = CERTENROLL_OBJECTID._OIWDIR_CRPT;
pub const XCN_OID_OIWDIR_HASH = CERTENROLL_OBJECTID._OIWDIR_HASH;
pub const XCN_OID_OIWDIR_SIGN = CERTENROLL_OBJECTID._OIWDIR_SIGN;
pub const XCN_OID_OIWDIR_md2 = CERTENROLL_OBJECTID._OIWDIR_md2;
pub const XCN_OID_OIWDIR_md2RSA = CERTENROLL_OBJECTID._OIWDIR_md2RSA;
pub const XCN_OID_INFOSEC = CERTENROLL_OBJECTID._INFOSEC;
pub const XCN_OID_INFOSEC_sdnsSignature = CERTENROLL_OBJECTID._INFOSEC_sdnsSignature;
pub const XCN_OID_INFOSEC_mosaicSignature = CERTENROLL_OBJECTID._INFOSEC_mosaicSignature;
pub const XCN_OID_INFOSEC_sdnsConfidentiality = CERTENROLL_OBJECTID._INFOSEC_sdnsConfidentiality;
pub const XCN_OID_INFOSEC_mosaicConfidentiality = CERTENROLL_OBJECTID._INFOSEC_mosaicConfidentiality;
pub const XCN_OID_INFOSEC_sdnsIntegrity = CERTENROLL_OBJECTID._INFOSEC_sdnsIntegrity;
pub const XCN_OID_INFOSEC_mosaicIntegrity = CERTENROLL_OBJECTID._INFOSEC_mosaicIntegrity;
pub const XCN_OID_INFOSEC_sdnsTokenProtection = CERTENROLL_OBJECTID._INFOSEC_sdnsTokenProtection;
pub const XCN_OID_INFOSEC_mosaicTokenProtection = CERTENROLL_OBJECTID._INFOSEC_mosaicTokenProtection;
pub const XCN_OID_INFOSEC_sdnsKeyManagement = CERTENROLL_OBJECTID._INFOSEC_sdnsKeyManagement;
pub const XCN_OID_INFOSEC_mosaicKeyManagement = CERTENROLL_OBJECTID._INFOSEC_mosaicKeyManagement;
pub const XCN_OID_INFOSEC_sdnsKMandSig = CERTENROLL_OBJECTID._INFOSEC_sdnsKMandSig;
pub const XCN_OID_INFOSEC_mosaicKMandSig = CERTENROLL_OBJECTID._INFOSEC_mosaicKMandSig;
pub const XCN_OID_INFOSEC_SuiteASignature = CERTENROLL_OBJECTID._INFOSEC_SuiteASignature;
pub const XCN_OID_INFOSEC_SuiteAConfidentiality = CERTENROLL_OBJECTID._INFOSEC_SuiteAConfidentiality;
pub const XCN_OID_INFOSEC_SuiteAIntegrity = CERTENROLL_OBJECTID._INFOSEC_SuiteAIntegrity;
pub const XCN_OID_INFOSEC_SuiteATokenProtection = CERTENROLL_OBJECTID._INFOSEC_SuiteATokenProtection;
pub const XCN_OID_INFOSEC_SuiteAKeyManagement = CERTENROLL_OBJECTID._INFOSEC_SuiteAKeyManagement;
pub const XCN_OID_INFOSEC_SuiteAKMandSig = CERTENROLL_OBJECTID._INFOSEC_SuiteAKMandSig;
pub const XCN_OID_INFOSEC_mosaicUpdatedSig = CERTENROLL_OBJECTID._INFOSEC_mosaicUpdatedSig;
pub const XCN_OID_INFOSEC_mosaicKMandUpdSig = CERTENROLL_OBJECTID._INFOSEC_mosaicKMandUpdSig;
pub const XCN_OID_INFOSEC_mosaicUpdatedInteg = CERTENROLL_OBJECTID._INFOSEC_mosaicUpdatedInteg;
pub const XCN_OID_COMMON_NAME = CERTENROLL_OBJECTID._COMMON_NAME;
pub const XCN_OID_SUR_NAME = CERTENROLL_OBJECTID._SUR_NAME;
pub const XCN_OID_DEVICE_SERIAL_NUMBER = CERTENROLL_OBJECTID._DEVICE_SERIAL_NUMBER;
pub const XCN_OID_COUNTRY_NAME = CERTENROLL_OBJECTID._COUNTRY_NAME;
pub const XCN_OID_LOCALITY_NAME = CERTENROLL_OBJECTID._LOCALITY_NAME;
pub const XCN_OID_STATE_OR_PROVINCE_NAME = CERTENROLL_OBJECTID._STATE_OR_PROVINCE_NAME;
pub const XCN_OID_STREET_ADDRESS = CERTENROLL_OBJECTID._STREET_ADDRESS;
pub const XCN_OID_ORGANIZATION_NAME = CERTENROLL_OBJECTID._ORGANIZATION_NAME;
pub const XCN_OID_ORGANIZATIONAL_UNIT_NAME = CERTENROLL_OBJECTID._ORGANIZATIONAL_UNIT_NAME;
pub const XCN_OID_TITLE = CERTENROLL_OBJECTID._TITLE;
pub const XCN_OID_DESCRIPTION = CERTENROLL_OBJECTID._DESCRIPTION;
pub const XCN_OID_SEARCH_GUIDE = CERTENROLL_OBJECTID._SEARCH_GUIDE;
pub const XCN_OID_BUSINESS_CATEGORY = CERTENROLL_OBJECTID._BUSINESS_CATEGORY;
pub const XCN_OID_POSTAL_ADDRESS = CERTENROLL_OBJECTID._POSTAL_ADDRESS;
pub const XCN_OID_POSTAL_CODE = CERTENROLL_OBJECTID._POSTAL_CODE;
pub const XCN_OID_POST_OFFICE_BOX = CERTENROLL_OBJECTID._POST_OFFICE_BOX;
pub const XCN_OID_PHYSICAL_DELIVERY_OFFICE_NAME = CERTENROLL_OBJECTID._PHYSICAL_DELIVERY_OFFICE_NAME;
pub const XCN_OID_TELEPHONE_NUMBER = CERTENROLL_OBJECTID._TELEPHONE_NUMBER;
pub const XCN_OID_TELEX_NUMBER = CERTENROLL_OBJECTID._TELEX_NUMBER;
pub const XCN_OID_TELETEXT_TERMINAL_IDENTIFIER = CERTENROLL_OBJECTID._TELETEXT_TERMINAL_IDENTIFIER;
pub const XCN_OID_FACSIMILE_TELEPHONE_NUMBER = CERTENROLL_OBJECTID._FACSIMILE_TELEPHONE_NUMBER;
pub const XCN_OID_X21_ADDRESS = CERTENROLL_OBJECTID._X21_ADDRESS;
pub const XCN_OID_INTERNATIONAL_ISDN_NUMBER = CERTENROLL_OBJECTID._INTERNATIONAL_ISDN_NUMBER;
pub const XCN_OID_REGISTERED_ADDRESS = CERTENROLL_OBJECTID._REGISTERED_ADDRESS;
pub const XCN_OID_DESTINATION_INDICATOR = CERTENROLL_OBJECTID._DESTINATION_INDICATOR;
pub const XCN_OID_PREFERRED_DELIVERY_METHOD = CERTENROLL_OBJECTID._PREFERRED_DELIVERY_METHOD;
pub const XCN_OID_PRESENTATION_ADDRESS = CERTENROLL_OBJECTID._PRESENTATION_ADDRESS;
pub const XCN_OID_SUPPORTED_APPLICATION_CONTEXT = CERTENROLL_OBJECTID._SUPPORTED_APPLICATION_CONTEXT;
pub const XCN_OID_MEMBER = CERTENROLL_OBJECTID._MEMBER;
pub const XCN_OID_OWNER = CERTENROLL_OBJECTID._OWNER;
pub const XCN_OID_ROLE_OCCUPANT = CERTENROLL_OBJECTID._ROLE_OCCUPANT;
pub const XCN_OID_SEE_ALSO = CERTENROLL_OBJECTID._SEE_ALSO;
pub const XCN_OID_USER_PASSWORD = CERTENROLL_OBJECTID._USER_PASSWORD;
pub const XCN_OID_USER_CERTIFICATE = CERTENROLL_OBJECTID._USER_CERTIFICATE;
pub const XCN_OID_CA_CERTIFICATE = CERTENROLL_OBJECTID._CA_CERTIFICATE;
pub const XCN_OID_AUTHORITY_REVOCATION_LIST = CERTENROLL_OBJECTID._AUTHORITY_REVOCATION_LIST;
pub const XCN_OID_CERTIFICATE_REVOCATION_LIST = CERTENROLL_OBJECTID._CERTIFICATE_REVOCATION_LIST;
pub const XCN_OID_CROSS_CERTIFICATE_PAIR = CERTENROLL_OBJECTID._CROSS_CERTIFICATE_PAIR;
pub const XCN_OID_GIVEN_NAME = CERTENROLL_OBJECTID._GIVEN_NAME;
pub const XCN_OID_INITIALS = CERTENROLL_OBJECTID._INITIALS;
pub const XCN_OID_DN_QUALIFIER = CERTENROLL_OBJECTID._DN_QUALIFIER;
pub const XCN_OID_DOMAIN_COMPONENT = CERTENROLL_OBJECTID._DOMAIN_COMPONENT;
pub const XCN_OID_PKCS_12_FRIENDLY_NAME_ATTR = CERTENROLL_OBJECTID._PKCS_12_FRIENDLY_NAME_ATTR;
pub const XCN_OID_PKCS_12_LOCAL_KEY_ID = CERTENROLL_OBJECTID._PKCS_12_LOCAL_KEY_ID;
pub const XCN_OID_PKCS_12_KEY_PROVIDER_NAME_ATTR = CERTENROLL_OBJECTID._PKCS_12_KEY_PROVIDER_NAME_ATTR;
pub const XCN_OID_LOCAL_MACHINE_KEYSET = CERTENROLL_OBJECTID._LOCAL_MACHINE_KEYSET;
pub const XCN_OID_PKCS_12_EXTENDED_ATTRIBUTES = CERTENROLL_OBJECTID._PKCS_12_EXTENDED_ATTRIBUTES;
pub const XCN_OID_KEYID_RDN = CERTENROLL_OBJECTID._KEYID_RDN;
pub const XCN_OID_AUTHORITY_KEY_IDENTIFIER = CERTENROLL_OBJECTID._AUTHORITY_KEY_IDENTIFIER;
pub const XCN_OID_KEY_ATTRIBUTES = CERTENROLL_OBJECTID._KEY_ATTRIBUTES;
pub const XCN_OID_CERT_POLICIES_95 = CERTENROLL_OBJECTID._CERT_POLICIES_95;
pub const XCN_OID_KEY_USAGE_RESTRICTION = CERTENROLL_OBJECTID._KEY_USAGE_RESTRICTION;
pub const XCN_OID_SUBJECT_ALT_NAME = CERTENROLL_OBJECTID._SUBJECT_ALT_NAME;
pub const XCN_OID_ISSUER_ALT_NAME = CERTENROLL_OBJECTID._ISSUER_ALT_NAME;
pub const XCN_OID_BASIC_CONSTRAINTS = CERTENROLL_OBJECTID._BASIC_CONSTRAINTS;
pub const XCN_OID_KEY_USAGE = CERTENROLL_OBJECTID._KEY_USAGE;
pub const XCN_OID_PRIVATEKEY_USAGE_PERIOD = CERTENROLL_OBJECTID._PRIVATEKEY_USAGE_PERIOD;
pub const XCN_OID_BASIC_CONSTRAINTS2 = CERTENROLL_OBJECTID._BASIC_CONSTRAINTS2;
pub const XCN_OID_CERT_POLICIES = CERTENROLL_OBJECTID._CERT_POLICIES;
pub const XCN_OID_ANY_CERT_POLICY = CERTENROLL_OBJECTID._ANY_CERT_POLICY;
pub const XCN_OID_AUTHORITY_KEY_IDENTIFIER2 = CERTENROLL_OBJECTID._AUTHORITY_KEY_IDENTIFIER2;
pub const XCN_OID_SUBJECT_KEY_IDENTIFIER = CERTENROLL_OBJECTID._SUBJECT_KEY_IDENTIFIER;
pub const XCN_OID_SUBJECT_ALT_NAME2 = CERTENROLL_OBJECTID._SUBJECT_ALT_NAME2;
pub const XCN_OID_ISSUER_ALT_NAME2 = CERTENROLL_OBJECTID._ISSUER_ALT_NAME2;
pub const XCN_OID_CRL_REASON_CODE = CERTENROLL_OBJECTID._CRL_REASON_CODE;
pub const XCN_OID_REASON_CODE_HOLD = CERTENROLL_OBJECTID._REASON_CODE_HOLD;
pub const XCN_OID_CRL_DIST_POINTS = CERTENROLL_OBJECTID._CRL_DIST_POINTS;
pub const XCN_OID_ENHANCED_KEY_USAGE = CERTENROLL_OBJECTID._ENHANCED_KEY_USAGE;
pub const XCN_OID_CRL_NUMBER = CERTENROLL_OBJECTID._CRL_NUMBER;
pub const XCN_OID_DELTA_CRL_INDICATOR = CERTENROLL_OBJECTID._DELTA_CRL_INDICATOR;
pub const XCN_OID_ISSUING_DIST_POINT = CERTENROLL_OBJECTID._ISSUING_DIST_POINT;
pub const XCN_OID_FRESHEST_CRL = CERTENROLL_OBJECTID._FRESHEST_CRL;
pub const XCN_OID_NAME_CONSTRAINTS = CERTENROLL_OBJECTID._NAME_CONSTRAINTS;
pub const XCN_OID_POLICY_MAPPINGS = CERTENROLL_OBJECTID._POLICY_MAPPINGS;
pub const XCN_OID_LEGACY_POLICY_MAPPINGS = CERTENROLL_OBJECTID._LEGACY_POLICY_MAPPINGS;
pub const XCN_OID_POLICY_CONSTRAINTS = CERTENROLL_OBJECTID._POLICY_CONSTRAINTS;
pub const XCN_OID_RENEWAL_CERTIFICATE = CERTENROLL_OBJECTID._RENEWAL_CERTIFICATE;
pub const XCN_OID_ENROLLMENT_NAME_VALUE_PAIR = CERTENROLL_OBJECTID._ENROLLMENT_NAME_VALUE_PAIR;
pub const XCN_OID_ENROLLMENT_CSP_PROVIDER = CERTENROLL_OBJECTID._ENROLLMENT_CSP_PROVIDER;
pub const XCN_OID_OS_VERSION = CERTENROLL_OBJECTID._OS_VERSION;
pub const XCN_OID_ENROLLMENT_AGENT = CERTENROLL_OBJECTID._ENROLLMENT_AGENT;
pub const XCN_OID_PKIX = CERTENROLL_OBJECTID._PKIX;
pub const XCN_OID_PKIX_PE = CERTENROLL_OBJECTID._PKIX_PE;
pub const XCN_OID_AUTHORITY_INFO_ACCESS = CERTENROLL_OBJECTID._AUTHORITY_INFO_ACCESS;
pub const XCN_OID_BIOMETRIC_EXT = CERTENROLL_OBJECTID._BIOMETRIC_EXT;
pub const XCN_OID_LOGOTYPE_EXT = CERTENROLL_OBJECTID._LOGOTYPE_EXT;
pub const XCN_OID_CERT_EXTENSIONS = CERTENROLL_OBJECTID._CERT_EXTENSIONS;
pub const XCN_OID_NEXT_UPDATE_LOCATION = CERTENROLL_OBJECTID._NEXT_UPDATE_LOCATION;
pub const XCN_OID_REMOVE_CERTIFICATE = CERTENROLL_OBJECTID._REMOVE_CERTIFICATE;
pub const XCN_OID_CROSS_CERT_DIST_POINTS = CERTENROLL_OBJECTID._CROSS_CERT_DIST_POINTS;
pub const XCN_OID_CTL = CERTENROLL_OBJECTID._CTL;
pub const XCN_OID_SORTED_CTL = CERTENROLL_OBJECTID._SORTED_CTL;
pub const XCN_OID_SERIALIZED = CERTENROLL_OBJECTID._SERIALIZED;
pub const XCN_OID_NT_PRINCIPAL_NAME = CERTENROLL_OBJECTID._NT_PRINCIPAL_NAME;
pub const XCN_OID_PRODUCT_UPDATE = CERTENROLL_OBJECTID._PRODUCT_UPDATE;
pub const XCN_OID_ANY_APPLICATION_POLICY = CERTENROLL_OBJECTID._ANY_APPLICATION_POLICY;
pub const XCN_OID_AUTO_ENROLL_CTL_USAGE = CERTENROLL_OBJECTID._AUTO_ENROLL_CTL_USAGE;
pub const XCN_OID_ENROLL_CERTTYPE_EXTENSION = CERTENROLL_OBJECTID._ENROLL_CERTTYPE_EXTENSION;
pub const XCN_OID_CERT_MANIFOLD = CERTENROLL_OBJECTID._CERT_MANIFOLD;
pub const XCN_OID_CERTSRV_CA_VERSION = CERTENROLL_OBJECTID._CERTSRV_CA_VERSION;
pub const XCN_OID_CERTSRV_PREVIOUS_CERT_HASH = CERTENROLL_OBJECTID._CERTSRV_PREVIOUS_CERT_HASH;
pub const XCN_OID_CRL_VIRTUAL_BASE = CERTENROLL_OBJECTID._CRL_VIRTUAL_BASE;
pub const XCN_OID_CRL_NEXT_PUBLISH = CERTENROLL_OBJECTID._CRL_NEXT_PUBLISH;
pub const XCN_OID_KP_CA_EXCHANGE = CERTENROLL_OBJECTID._KP_CA_EXCHANGE;
pub const XCN_OID_KP_KEY_RECOVERY_AGENT = CERTENROLL_OBJECTID._KP_KEY_RECOVERY_AGENT;
pub const XCN_OID_CERTIFICATE_TEMPLATE = CERTENROLL_OBJECTID._CERTIFICATE_TEMPLATE;
pub const XCN_OID_ENTERPRISE_OID_ROOT = CERTENROLL_OBJECTID._ENTERPRISE_OID_ROOT;
pub const XCN_OID_RDN_DUMMY_SIGNER = CERTENROLL_OBJECTID._RDN_DUMMY_SIGNER;
pub const XCN_OID_APPLICATION_CERT_POLICIES = CERTENROLL_OBJECTID._APPLICATION_CERT_POLICIES;
pub const XCN_OID_APPLICATION_POLICY_MAPPINGS = CERTENROLL_OBJECTID._APPLICATION_POLICY_MAPPINGS;
pub const XCN_OID_APPLICATION_POLICY_CONSTRAINTS = CERTENROLL_OBJECTID._APPLICATION_POLICY_CONSTRAINTS;
pub const XCN_OID_ARCHIVED_KEY_ATTR = CERTENROLL_OBJECTID._ARCHIVED_KEY_ATTR;
pub const XCN_OID_CRL_SELF_CDP = CERTENROLL_OBJECTID._CRL_SELF_CDP;
pub const XCN_OID_REQUIRE_CERT_CHAIN_POLICY = CERTENROLL_OBJECTID._REQUIRE_CERT_CHAIN_POLICY;
pub const XCN_OID_ARCHIVED_KEY_CERT_HASH = CERTENROLL_OBJECTID._ARCHIVED_KEY_CERT_HASH;
pub const XCN_OID_ISSUED_CERT_HASH = CERTENROLL_OBJECTID._ISSUED_CERT_HASH;
pub const XCN_OID_DS_EMAIL_REPLICATION = CERTENROLL_OBJECTID._DS_EMAIL_REPLICATION;
pub const XCN_OID_REQUEST_CLIENT_INFO = CERTENROLL_OBJECTID._REQUEST_CLIENT_INFO;
pub const XCN_OID_ENCRYPTED_KEY_HASH = CERTENROLL_OBJECTID._ENCRYPTED_KEY_HASH;
pub const XCN_OID_CERTSRV_CROSSCA_VERSION = CERTENROLL_OBJECTID._CERTSRV_CROSSCA_VERSION;
pub const XCN_OID_NTDS_REPLICATION = CERTENROLL_OBJECTID._NTDS_REPLICATION;
pub const XCN_OID_SUBJECT_DIR_ATTRS = CERTENROLL_OBJECTID._SUBJECT_DIR_ATTRS;
pub const XCN_OID_PKIX_KP = CERTENROLL_OBJECTID._PKIX_KP;
pub const XCN_OID_PKIX_KP_SERVER_AUTH = CERTENROLL_OBJECTID._PKIX_KP_SERVER_AUTH;
pub const XCN_OID_PKIX_KP_CLIENT_AUTH = CERTENROLL_OBJECTID._PKIX_KP_CLIENT_AUTH;
pub const XCN_OID_PKIX_KP_CODE_SIGNING = CERTENROLL_OBJECTID._PKIX_KP_CODE_SIGNING;
pub const XCN_OID_PKIX_KP_EMAIL_PROTECTION = CERTENROLL_OBJECTID._PKIX_KP_EMAIL_PROTECTION;
pub const XCN_OID_PKIX_KP_IPSEC_END_SYSTEM = CERTENROLL_OBJECTID._PKIX_KP_IPSEC_END_SYSTEM;
pub const XCN_OID_PKIX_KP_IPSEC_TUNNEL = CERTENROLL_OBJECTID._PKIX_KP_IPSEC_TUNNEL;
pub const XCN_OID_PKIX_KP_IPSEC_USER = CERTENROLL_OBJECTID._PKIX_KP_IPSEC_USER;
pub const XCN_OID_PKIX_KP_TIMESTAMP_SIGNING = CERTENROLL_OBJECTID._PKIX_KP_TIMESTAMP_SIGNING;
pub const XCN_OID_PKIX_KP_OCSP_SIGNING = CERTENROLL_OBJECTID._PKIX_KP_OCSP_SIGNING;
pub const XCN_OID_PKIX_OCSP_NOCHECK = CERTENROLL_OBJECTID._PKIX_OCSP_NOCHECK;
pub const XCN_OID_IPSEC_KP_IKE_INTERMEDIATE = CERTENROLL_OBJECTID._IPSEC_KP_IKE_INTERMEDIATE;
pub const XCN_OID_KP_CTL_USAGE_SIGNING = CERTENROLL_OBJECTID._KP_CTL_USAGE_SIGNING;
pub const XCN_OID_KP_TIME_STAMP_SIGNING = CERTENROLL_OBJECTID._KP_TIME_STAMP_SIGNING;
pub const XCN_OID_SERVER_GATED_CRYPTO = CERTENROLL_OBJECTID._SERVER_GATED_CRYPTO;
pub const XCN_OID_SGC_NETSCAPE = CERTENROLL_OBJECTID._SGC_NETSCAPE;
pub const XCN_OID_KP_EFS = CERTENROLL_OBJECTID._KP_EFS;
pub const XCN_OID_EFS_RECOVERY = CERTENROLL_OBJECTID._EFS_RECOVERY;
pub const XCN_OID_WHQL_CRYPTO = CERTENROLL_OBJECTID._WHQL_CRYPTO;
pub const XCN_OID_NT5_CRYPTO = CERTENROLL_OBJECTID._NT5_CRYPTO;
pub const XCN_OID_OEM_WHQL_CRYPTO = CERTENROLL_OBJECTID._OEM_WHQL_CRYPTO;
pub const XCN_OID_EMBEDDED_NT_CRYPTO = CERTENROLL_OBJECTID._EMBEDDED_NT_CRYPTO;
pub const XCN_OID_ROOT_LIST_SIGNER = CERTENROLL_OBJECTID._ROOT_LIST_SIGNER;
pub const XCN_OID_KP_QUALIFIED_SUBORDINATION = CERTENROLL_OBJECTID._KP_QUALIFIED_SUBORDINATION;
pub const XCN_OID_KP_KEY_RECOVERY = CERTENROLL_OBJECTID._KP_KEY_RECOVERY;
pub const XCN_OID_KP_DOCUMENT_SIGNING = CERTENROLL_OBJECTID._KP_DOCUMENT_SIGNING;
pub const XCN_OID_KP_LIFETIME_SIGNING = CERTENROLL_OBJECTID._KP_LIFETIME_SIGNING;
pub const XCN_OID_KP_MOBILE_DEVICE_SOFTWARE = CERTENROLL_OBJECTID._KP_MOBILE_DEVICE_SOFTWARE;
pub const XCN_OID_KP_SMART_DISPLAY = CERTENROLL_OBJECTID._KP_SMART_DISPLAY;
pub const XCN_OID_KP_CSP_SIGNATURE = CERTENROLL_OBJECTID._KP_CSP_SIGNATURE;
pub const XCN_OID_DRM = CERTENROLL_OBJECTID._DRM;
pub const XCN_OID_DRM_INDIVIDUALIZATION = CERTENROLL_OBJECTID._DRM_INDIVIDUALIZATION;
pub const XCN_OID_LICENSES = CERTENROLL_OBJECTID._LICENSES;
pub const XCN_OID_LICENSE_SERVER = CERTENROLL_OBJECTID._LICENSE_SERVER;
pub const XCN_OID_KP_SMARTCARD_LOGON = CERTENROLL_OBJECTID._KP_SMARTCARD_LOGON;
pub const XCN_OID_YESNO_TRUST_ATTR = CERTENROLL_OBJECTID._YESNO_TRUST_ATTR;
pub const XCN_OID_PKIX_POLICY_QUALIFIER_CPS = CERTENROLL_OBJECTID._PKIX_POLICY_QUALIFIER_CPS;
pub const XCN_OID_PKIX_POLICY_QUALIFIER_USERNOTICE = CERTENROLL_OBJECTID._PKIX_POLICY_QUALIFIER_USERNOTICE;
pub const XCN_OID_CERT_POLICIES_95_QUALIFIER1 = CERTENROLL_OBJECTID._CERT_POLICIES_95_QUALIFIER1;
pub const XCN_OID_PKIX_ACC_DESCR = CERTENROLL_OBJECTID._PKIX_ACC_DESCR;
pub const XCN_OID_PKIX_OCSP = CERTENROLL_OBJECTID._PKIX_OCSP;
pub const XCN_OID_PKIX_CA_ISSUERS = CERTENROLL_OBJECTID._PKIX_CA_ISSUERS;
pub const XCN_OID_VERISIGN_PRIVATE_6_9 = CERTENROLL_OBJECTID._VERISIGN_PRIVATE_6_9;
pub const XCN_OID_VERISIGN_ONSITE_JURISDICTION_HASH = CERTENROLL_OBJECTID._VERISIGN_ONSITE_JURISDICTION_HASH;
pub const XCN_OID_VERISIGN_BITSTRING_6_13 = CERTENROLL_OBJECTID._VERISIGN_BITSTRING_6_13;
pub const XCN_OID_VERISIGN_ISS_STRONG_CRYPTO = CERTENROLL_OBJECTID._VERISIGN_ISS_STRONG_CRYPTO;
pub const XCN_OID_NETSCAPE = CERTENROLL_OBJECTID._NETSCAPE;
pub const XCN_OID_NETSCAPE_CERT_EXTENSION = CERTENROLL_OBJECTID._NETSCAPE_CERT_EXTENSION;
pub const XCN_OID_NETSCAPE_CERT_TYPE = CERTENROLL_OBJECTID._NETSCAPE_CERT_TYPE;
pub const XCN_OID_NETSCAPE_BASE_URL = CERTENROLL_OBJECTID._NETSCAPE_BASE_URL;
pub const XCN_OID_NETSCAPE_REVOCATION_URL = CERTENROLL_OBJECTID._NETSCAPE_REVOCATION_URL;
pub const XCN_OID_NETSCAPE_CA_REVOCATION_URL = CERTENROLL_OBJECTID._NETSCAPE_CA_REVOCATION_URL;
pub const XCN_OID_NETSCAPE_CERT_RENEWAL_URL = CERTENROLL_OBJECTID._NETSCAPE_CERT_RENEWAL_URL;
pub const XCN_OID_NETSCAPE_CA_POLICY_URL = CERTENROLL_OBJECTID._NETSCAPE_CA_POLICY_URL;
pub const XCN_OID_NETSCAPE_SSL_SERVER_NAME = CERTENROLL_OBJECTID._NETSCAPE_SSL_SERVER_NAME;
pub const XCN_OID_NETSCAPE_COMMENT = CERTENROLL_OBJECTID._NETSCAPE_COMMENT;
pub const XCN_OID_NETSCAPE_DATA_TYPE = CERTENROLL_OBJECTID._NETSCAPE_DATA_TYPE;
pub const XCN_OID_NETSCAPE_CERT_SEQUENCE = CERTENROLL_OBJECTID._NETSCAPE_CERT_SEQUENCE;
pub const XCN_OID_CT_PKI_DATA = CERTENROLL_OBJECTID._CT_PKI_DATA;
pub const XCN_OID_CT_PKI_RESPONSE = CERTENROLL_OBJECTID._CT_PKI_RESPONSE;
pub const XCN_OID_PKIX_NO_SIGNATURE = CERTENROLL_OBJECTID._PKIX_NO_SIGNATURE;
pub const XCN_OID_CMC = CERTENROLL_OBJECTID._CMC;
pub const XCN_OID_CMC_STATUS_INFO = CERTENROLL_OBJECTID._CMC_STATUS_INFO;
pub const XCN_OID_CMC_IDENTIFICATION = CERTENROLL_OBJECTID._CMC_IDENTIFICATION;
pub const XCN_OID_CMC_IDENTITY_PROOF = CERTENROLL_OBJECTID._CMC_IDENTITY_PROOF;
pub const XCN_OID_CMC_DATA_RETURN = CERTENROLL_OBJECTID._CMC_DATA_RETURN;
pub const XCN_OID_CMC_TRANSACTION_ID = CERTENROLL_OBJECTID._CMC_TRANSACTION_ID;
pub const XCN_OID_CMC_SENDER_NONCE = CERTENROLL_OBJECTID._CMC_SENDER_NONCE;
pub const XCN_OID_CMC_RECIPIENT_NONCE = CERTENROLL_OBJECTID._CMC_RECIPIENT_NONCE;
pub const XCN_OID_CMC_ADD_EXTENSIONS = CERTENROLL_OBJECTID._CMC_ADD_EXTENSIONS;
pub const XCN_OID_CMC_ENCRYPTED_POP = CERTENROLL_OBJECTID._CMC_ENCRYPTED_POP;
pub const XCN_OID_CMC_DECRYPTED_POP = CERTENROLL_OBJECTID._CMC_DECRYPTED_POP;
pub const XCN_OID_CMC_LRA_POP_WITNESS = CERTENROLL_OBJECTID._CMC_LRA_POP_WITNESS;
pub const XCN_OID_CMC_GET_CERT = CERTENROLL_OBJECTID._CMC_GET_CERT;
pub const XCN_OID_CMC_GET_CRL = CERTENROLL_OBJECTID._CMC_GET_CRL;
pub const XCN_OID_CMC_REVOKE_REQUEST = CERTENROLL_OBJECTID._CMC_REVOKE_REQUEST;
pub const XCN_OID_CMC_REG_INFO = CERTENROLL_OBJECTID._CMC_REG_INFO;
pub const XCN_OID_CMC_RESPONSE_INFO = CERTENROLL_OBJECTID._CMC_RESPONSE_INFO;
pub const XCN_OID_CMC_QUERY_PENDING = CERTENROLL_OBJECTID._CMC_QUERY_PENDING;
pub const XCN_OID_CMC_ID_POP_LINK_RANDOM = CERTENROLL_OBJECTID._CMC_ID_POP_LINK_RANDOM;
pub const XCN_OID_CMC_ID_POP_LINK_WITNESS = CERTENROLL_OBJECTID._CMC_ID_POP_LINK_WITNESS;
pub const XCN_OID_CMC_ID_CONFIRM_CERT_ACCEPTANCE = CERTENROLL_OBJECTID._CMC_ID_CONFIRM_CERT_ACCEPTANCE;
pub const XCN_OID_CMC_ADD_ATTRIBUTES = CERTENROLL_OBJECTID._CMC_ADD_ATTRIBUTES;
pub const XCN_OID_LOYALTY_OTHER_LOGOTYPE = CERTENROLL_OBJECTID._LOYALTY_OTHER_LOGOTYPE;
pub const XCN_OID_BACKGROUND_OTHER_LOGOTYPE = CERTENROLL_OBJECTID._BACKGROUND_OTHER_LOGOTYPE;
pub const XCN_OID_PKIX_OCSP_BASIC_SIGNED_RESPONSE = CERTENROLL_OBJECTID._PKIX_OCSP_BASIC_SIGNED_RESPONSE;
pub const XCN_OID_PKCS_7_DATA = CERTENROLL_OBJECTID._PKCS_7_DATA;
pub const XCN_OID_PKCS_7_SIGNED = CERTENROLL_OBJECTID._PKCS_7_SIGNED;
pub const XCN_OID_PKCS_7_ENVELOPED = CERTENROLL_OBJECTID._PKCS_7_ENVELOPED;
pub const XCN_OID_PKCS_7_SIGNEDANDENVELOPED = CERTENROLL_OBJECTID._PKCS_7_SIGNEDANDENVELOPED;
pub const XCN_OID_PKCS_7_DIGESTED = CERTENROLL_OBJECTID._PKCS_7_DIGESTED;
pub const XCN_OID_PKCS_7_ENCRYPTED = CERTENROLL_OBJECTID._PKCS_7_ENCRYPTED;
pub const XCN_OID_PKCS_9_CONTENT_TYPE = CERTENROLL_OBJECTID._PKCS_9_CONTENT_TYPE;
pub const XCN_OID_PKCS_9_MESSAGE_DIGEST = CERTENROLL_OBJECTID._PKCS_9_MESSAGE_DIGEST;
pub const XCN_OID_CERT_PROP_ID_PREFIX = CERTENROLL_OBJECTID._CERT_PROP_ID_PREFIX;
pub const XCN_OID_CERT_KEY_IDENTIFIER_PROP_ID = CERTENROLL_OBJECTID._CERT_KEY_IDENTIFIER_PROP_ID;
pub const XCN_OID_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = CERTENROLL_OBJECTID._CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID;
pub const XCN_OID_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = CERTENROLL_OBJECTID._CERT_SUBJECT_NAME_MD5_HASH_PROP_ID;
pub const XCN_OID_CERT_MD5_HASH_PROP_ID = CERTENROLL_OBJECTID._CERT_MD5_HASH_PROP_ID;
pub const XCN_OID_RSA_SHA256RSA = CERTENROLL_OBJECTID._RSA_SHA256RSA;
pub const XCN_OID_RSA_SHA384RSA = CERTENROLL_OBJECTID._RSA_SHA384RSA;
pub const XCN_OID_RSA_SHA512RSA = CERTENROLL_OBJECTID._RSA_SHA512RSA;
pub const XCN_OID_NIST_sha256 = CERTENROLL_OBJECTID._NIST_sha256;
pub const XCN_OID_NIST_sha384 = CERTENROLL_OBJECTID._NIST_sha384;
pub const XCN_OID_NIST_sha512 = CERTENROLL_OBJECTID._NIST_sha512;
pub const XCN_OID_RSA_MGF1 = CERTENROLL_OBJECTID._RSA_MGF1;
pub const XCN_OID_ECC_PUBLIC_KEY = CERTENROLL_OBJECTID._ECC_PUBLIC_KEY;
pub const XCN_OID_ECDSA_SHA1 = CERTENROLL_OBJECTID._ECDSA_SHA1;
pub const XCN_OID_ECDSA_SPECIFIED = CERTENROLL_OBJECTID._ECDSA_SPECIFIED;
pub const XCN_OID_ANY_ENHANCED_KEY_USAGE = CERTENROLL_OBJECTID._ANY_ENHANCED_KEY_USAGE;
pub const XCN_OID_RSA_SSA_PSS = CERTENROLL_OBJECTID._RSA_SSA_PSS;
pub const XCN_OID_ATTR_SUPPORTED_ALGORITHMS = CERTENROLL_OBJECTID._ATTR_SUPPORTED_ALGORITHMS;
pub const XCN_OID_ATTR_TPM_SECURITY_ASSERTIONS = CERTENROLL_OBJECTID._ATTR_TPM_SECURITY_ASSERTIONS;
pub const XCN_OID_ATTR_TPM_SPECIFICATION = CERTENROLL_OBJECTID._ATTR_TPM_SPECIFICATION;
pub const XCN_OID_CERT_DISALLOWED_FILETIME_PROP_ID = CERTENROLL_OBJECTID._CERT_DISALLOWED_FILETIME_PROP_ID;
pub const XCN_OID_CERT_SIGNATURE_HASH_PROP_ID = CERTENROLL_OBJECTID._CERT_SIGNATURE_HASH_PROP_ID;
pub const XCN_OID_CERT_STRONG_KEY_OS_1 = CERTENROLL_OBJECTID._CERT_STRONG_KEY_OS_1;
pub const XCN_OID_CERT_STRONG_KEY_OS_CURRENT = CERTENROLL_OBJECTID._CERT_STRONG_KEY_OS_CURRENT;
pub const XCN_OID_CERT_STRONG_KEY_OS_PREFIX = CERTENROLL_OBJECTID._CERT_STRONG_KEY_OS_PREFIX;
pub const XCN_OID_CERT_STRONG_SIGN_OS_1 = CERTENROLL_OBJECTID._CERT_STRONG_SIGN_OS_1;
pub const XCN_OID_CERT_STRONG_SIGN_OS_CURRENT = CERTENROLL_OBJECTID._CERT_STRONG_SIGN_OS_CURRENT;
pub const XCN_OID_CERT_STRONG_SIGN_OS_PREFIX = CERTENROLL_OBJECTID._CERT_STRONG_SIGN_OS_PREFIX;
pub const XCN_OID_DH_SINGLE_PASS_STDDH_SHA1_KDF = CERTENROLL_OBJECTID._DH_SINGLE_PASS_STDDH_SHA1_KDF;
pub const XCN_OID_DH_SINGLE_PASS_STDDH_SHA256_KDF = CERTENROLL_OBJECTID._DH_SINGLE_PASS_STDDH_SHA256_KDF;
pub const XCN_OID_DH_SINGLE_PASS_STDDH_SHA384_KDF = CERTENROLL_OBJECTID._DH_SINGLE_PASS_STDDH_SHA384_KDF;
pub const XCN_OID_DISALLOWED_HASH = CERTENROLL_OBJECTID._DISALLOWED_HASH;
pub const XCN_OID_DISALLOWED_LIST = CERTENROLL_OBJECTID._DISALLOWED_LIST;
pub const XCN_OID_ECC_CURVE_P256 = CERTENROLL_OBJECTID._ECC_CURVE_P256;
pub const XCN_OID_ECC_CURVE_P384 = CERTENROLL_OBJECTID._ECC_CURVE_P384;
pub const XCN_OID_ECC_CURVE_P521 = CERTENROLL_OBJECTID._ECC_CURVE_P521;
pub const XCN_OID_ECDSA_SHA256 = CERTENROLL_OBJECTID._ECDSA_SHA256;
pub const XCN_OID_ECDSA_SHA384 = CERTENROLL_OBJECTID._ECDSA_SHA384;
pub const XCN_OID_ECDSA_SHA512 = CERTENROLL_OBJECTID._ECDSA_SHA512;
pub const XCN_OID_ENROLL_CAXCHGCERT_HASH = CERTENROLL_OBJECTID._ENROLL_CAXCHGCERT_HASH;
pub const XCN_OID_ENROLL_EK_INFO = CERTENROLL_OBJECTID._ENROLL_EK_INFO;
pub const XCN_OID_ENROLL_EKPUB_CHALLENGE = CERTENROLL_OBJECTID._ENROLL_EKPUB_CHALLENGE;
pub const XCN_OID_ENROLL_EKVERIFYCERT = CERTENROLL_OBJECTID._ENROLL_EKVERIFYCERT;
pub const XCN_OID_ENROLL_EKVERIFYCREDS = CERTENROLL_OBJECTID._ENROLL_EKVERIFYCREDS;
pub const XCN_OID_ENROLL_EKVERIFYKEY = CERTENROLL_OBJECTID._ENROLL_EKVERIFYKEY;
pub const XCN_OID_EV_RDN_COUNTRY = CERTENROLL_OBJECTID._EV_RDN_COUNTRY;
pub const XCN_OID_EV_RDN_LOCALE = CERTENROLL_OBJECTID._EV_RDN_LOCALE;
pub const XCN_OID_EV_RDN_STATE_OR_PROVINCE = CERTENROLL_OBJECTID._EV_RDN_STATE_OR_PROVINCE;
pub const XCN_OID_INHIBIT_ANY_POLICY = CERTENROLL_OBJECTID._INHIBIT_ANY_POLICY;
pub const XCN_OID_INTERNATIONALIZED_EMAIL_ADDRESS = CERTENROLL_OBJECTID._INTERNATIONALIZED_EMAIL_ADDRESS;
pub const XCN_OID_KP_KERNEL_MODE_CODE_SIGNING = CERTENROLL_OBJECTID._KP_KERNEL_MODE_CODE_SIGNING;
pub const XCN_OID_KP_KERNEL_MODE_HAL_EXTENSION_SIGNING = CERTENROLL_OBJECTID._KP_KERNEL_MODE_HAL_EXTENSION_SIGNING;
pub const XCN_OID_KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING = CERTENROLL_OBJECTID._KP_KERNEL_MODE_TRUSTED_BOOT_SIGNING;
pub const XCN_OID_KP_TPM_AIK_CERTIFICATE = CERTENROLL_OBJECTID._KP_TPM_AIK_CERTIFICATE;
pub const XCN_OID_KP_TPM_EK_CERTIFICATE = CERTENROLL_OBJECTID._KP_TPM_EK_CERTIFICATE;
pub const XCN_OID_KP_TPM_PLATFORM_CERTIFICATE = CERTENROLL_OBJECTID._KP_TPM_PLATFORM_CERTIFICATE;
pub const XCN_OID_NIST_AES128_CBC = CERTENROLL_OBJECTID._NIST_AES128_CBC;
pub const XCN_OID_NIST_AES128_WRAP = CERTENROLL_OBJECTID._NIST_AES128_WRAP;
pub const XCN_OID_NIST_AES192_CBC = CERTENROLL_OBJECTID._NIST_AES192_CBC;
pub const XCN_OID_NIST_AES192_WRAP = CERTENROLL_OBJECTID._NIST_AES192_WRAP;
pub const XCN_OID_NIST_AES256_CBC = CERTENROLL_OBJECTID._NIST_AES256_CBC;
pub const XCN_OID_NIST_AES256_WRAP = CERTENROLL_OBJECTID._NIST_AES256_WRAP;
pub const XCN_OID_PKCS_12_PbeIds = CERTENROLL_OBJECTID._PKCS_12_PbeIds;
pub const XCN_OID_PKCS_12_pbeWithSHA1And128BitRC2 = CERTENROLL_OBJECTID._PKCS_12_pbeWithSHA1And128BitRC2;
pub const XCN_OID_PKCS_12_pbeWithSHA1And128BitRC4 = CERTENROLL_OBJECTID._PKCS_12_pbeWithSHA1And128BitRC4;
pub const XCN_OID_PKCS_12_pbeWithSHA1And2KeyTripleDES = CERTENROLL_OBJECTID._PKCS_12_pbeWithSHA1And2KeyTripleDES;
pub const XCN_OID_PKCS_12_pbeWithSHA1And3KeyTripleDES = CERTENROLL_OBJECTID._PKCS_12_pbeWithSHA1And3KeyTripleDES;
pub const XCN_OID_PKCS_12_pbeWithSHA1And40BitRC2 = CERTENROLL_OBJECTID._PKCS_12_pbeWithSHA1And40BitRC2;
pub const XCN_OID_PKCS_12_pbeWithSHA1And40BitRC4 = CERTENROLL_OBJECTID._PKCS_12_pbeWithSHA1And40BitRC4;
pub const XCN_OID_PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID = CERTENROLL_OBJECTID._PKCS_12_PROTECTED_PASSWORD_SECRET_BAG_TYPE_ID;
pub const XCN_OID_PKINIT_KP_KDC = CERTENROLL_OBJECTID._PKINIT_KP_KDC;
pub const XCN_OID_PKIX_CA_REPOSITORY = CERTENROLL_OBJECTID._PKIX_CA_REPOSITORY;
pub const XCN_OID_PKIX_OCSP_NONCE = CERTENROLL_OBJECTID._PKIX_OCSP_NONCE;
pub const XCN_OID_PKIX_TIME_STAMPING = CERTENROLL_OBJECTID._PKIX_TIME_STAMPING;
pub const XCN_OID_QC_EU_COMPLIANCE = CERTENROLL_OBJECTID._QC_EU_COMPLIANCE;
pub const XCN_OID_QC_SSCD = CERTENROLL_OBJECTID._QC_SSCD;
pub const XCN_OID_QC_STATEMENTS_EXT = CERTENROLL_OBJECTID._QC_STATEMENTS_EXT;
pub const XCN_OID_RDN_TPM_MANUFACTURER = CERTENROLL_OBJECTID._RDN_TPM_MANUFACTURER;
pub const XCN_OID_RDN_TPM_MODEL = CERTENROLL_OBJECTID._RDN_TPM_MODEL;
pub const XCN_OID_RDN_TPM_VERSION = CERTENROLL_OBJECTID._RDN_TPM_VERSION;
pub const XCN_OID_REVOKED_LIST_SIGNER = CERTENROLL_OBJECTID._REVOKED_LIST_SIGNER;
pub const XCN_OID_RFC3161_counterSign = CERTENROLL_OBJECTID._RFC3161_counterSign;
pub const XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION = CERTENROLL_OBJECTID._ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION;
pub const XCN_OID_ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION = CERTENROLL_OBJECTID._ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION;
pub const XCN_OID_ROOT_PROGRAM_FLAGS = CERTENROLL_OBJECTID._ROOT_PROGRAM_FLAGS;
pub const XCN_OID_ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL = CERTENROLL_OBJECTID._ROOT_PROGRAM_NO_OCSP_FAILOVER_TO_CRL;
pub const XCN_OID_RSA_PSPECIFIED = CERTENROLL_OBJECTID._RSA_PSPECIFIED;
pub const XCN_OID_RSAES_OAEP = CERTENROLL_OBJECTID._RSAES_OAEP;
pub const XCN_OID_SUBJECT_INFO_ACCESS = CERTENROLL_OBJECTID._SUBJECT_INFO_ACCESS;
pub const XCN_OID_TIMESTAMP_TOKEN = CERTENROLL_OBJECTID._TIMESTAMP_TOKEN;
pub const XCN_OID_ENROLL_SCEP_ERROR = CERTENROLL_OBJECTID._ENROLL_SCEP_ERROR;
pub const XCN_OIDVerisign_MessageType = CERTENROLL_OBJECTID.Verisign_MessageType;
pub const XCN_OIDVerisign_PkiStatus = CERTENROLL_OBJECTID.Verisign_PkiStatus;
pub const XCN_OIDVerisign_FailInfo = CERTENROLL_OBJECTID.Verisign_FailInfo;
pub const XCN_OIDVerisign_SenderNonce = CERTENROLL_OBJECTID.Verisign_SenderNonce;
pub const XCN_OIDVerisign_RecipientNonce = CERTENROLL_OBJECTID.Verisign_RecipientNonce;
pub const XCN_OIDVerisign_TransactionID = CERTENROLL_OBJECTID.Verisign_TransactionID;
pub const XCN_OID_ENROLL_ATTESTATION_CHALLENGE = CERTENROLL_OBJECTID._ENROLL_ATTESTATION_CHALLENGE;
pub const XCN_OID_ENROLL_ATTESTATION_STATEMENT = CERTENROLL_OBJECTID._ENROLL_ATTESTATION_STATEMENT;
pub const XCN_OID_ENROLL_ENCRYPTION_ALGORITHM = CERTENROLL_OBJECTID._ENROLL_ENCRYPTION_ALGORITHM;
pub const XCN_OID_ENROLL_KSP_NAME = CERTENROLL_OBJECTID._ENROLL_KSP_NAME;

pub const WebSecurityLevel = enum(i32) {
    Unsafe = 0,
    Safe = 1,
};
pub const LevelUnsafe = WebSecurityLevel.Unsafe;
pub const LevelSafe = WebSecurityLevel.Safe;

pub const EncodingType = enum(i32) {
    BASE64HEADER = 0,
    BASE64 = 1,
    BINARY = 2,
    BASE64REQUESTHEADER = 3,
    HEX = 4,
    HEXASCII = 5,
    BASE64_ANY = 6,
    ANY = 7,
    HEX_ANY = 8,
    BASE64X509CRLHEADER = 9,
    HEXADDR = 10,
    HEXASCIIADDR = 11,
    HEXRAW = 12,
    BASE64URI = 13,
    ENCODEMASK = 255,
    CHAIN = 256,
    TEXT = 512,
    PERCENTESCAPE = 134217728,
    HASHDATA = 268435456,
    STRICT = 536870912,
    NOCRLF = 1073741824,
    NOCR = -2147483648,
};
pub const XCN_CRYPT_STRING_BASE64HEADER = EncodingType.BASE64HEADER;
pub const XCN_CRYPT_STRING_BASE64 = EncodingType.BASE64;
pub const XCN_CRYPT_STRING_BINARY = EncodingType.BINARY;
pub const XCN_CRYPT_STRING_BASE64REQUESTHEADER = EncodingType.BASE64REQUESTHEADER;
pub const XCN_CRYPT_STRING_HEX = EncodingType.HEX;
pub const XCN_CRYPT_STRING_HEXASCII = EncodingType.HEXASCII;
pub const XCN_CRYPT_STRING_BASE64_ANY = EncodingType.BASE64_ANY;
pub const XCN_CRYPT_STRING_ANY = EncodingType.ANY;
pub const XCN_CRYPT_STRING_HEX_ANY = EncodingType.HEX_ANY;
pub const XCN_CRYPT_STRING_BASE64X509CRLHEADER = EncodingType.BASE64X509CRLHEADER;
pub const XCN_CRYPT_STRING_HEXADDR = EncodingType.HEXADDR;
pub const XCN_CRYPT_STRING_HEXASCIIADDR = EncodingType.HEXASCIIADDR;
pub const XCN_CRYPT_STRING_HEXRAW = EncodingType.HEXRAW;
pub const XCN_CRYPT_STRING_BASE64URI = EncodingType.BASE64URI;
pub const XCN_CRYPT_STRING_ENCODEMASK = EncodingType.ENCODEMASK;
pub const XCN_CRYPT_STRING_CHAIN = EncodingType.CHAIN;
pub const XCN_CRYPT_STRING_TEXT = EncodingType.TEXT;
pub const XCN_CRYPT_STRING_PERCENTESCAPE = EncodingType.PERCENTESCAPE;
pub const XCN_CRYPT_STRING_HASHDATA = EncodingType.HASHDATA;
pub const XCN_CRYPT_STRING_STRICT = EncodingType.STRICT;
pub const XCN_CRYPT_STRING_NOCRLF = EncodingType.NOCRLF;
pub const XCN_CRYPT_STRING_NOCR = EncodingType.NOCR;

pub const PFXExportOptions = enum(i32) {
    EEOnly = 0,
    ChainNoRoot = 1,
    ChainWithRoot = 2,
};
pub const PFXExportEEOnly = PFXExportOptions.EEOnly;
pub const PFXExportChainNoRoot = PFXExportOptions.ChainNoRoot;
pub const PFXExportChainWithRoot = PFXExportOptions.ChainWithRoot;

pub const ObjectIdGroupId = enum(i32) {
    ANY_GROUP_ID = 0,
    HASH_ALG_OID_GROUP_ID = 1,
    ENCRYPT_ALG_OID_GROUP_ID = 2,
    PUBKEY_ALG_OID_GROUP_ID = 3,
    SIGN_ALG_OID_GROUP_ID = 4,
    RDN_ATTR_OID_GROUP_ID = 5,
    EXT_OR_ATTR_OID_GROUP_ID = 6,
    ENHKEY_USAGE_OID_GROUP_ID = 7,
    POLICY_OID_GROUP_ID = 8,
    TEMPLATE_OID_GROUP_ID = 9,
    KDF_OID_GROUP_ID = 10,
    // LAST_OID_GROUP_ID = 10, this enum value conflicts with KDF_OID_GROUP_ID
    // FIRST_ALG_OID_GROUP_ID = 1, this enum value conflicts with HASH_ALG_OID_GROUP_ID
    // LAST_ALG_OID_GROUP_ID = 4, this enum value conflicts with SIGN_ALG_OID_GROUP_ID
    GROUP_ID_MASK = 65535,
    OID_PREFER_CNG_ALGID_FLAG = 1073741824,
    OID_DISABLE_SEARCH_DS_FLAG = -2147483648,
    OID_INFO_OID_GROUP_BIT_LEN_MASK = 268369920,
    OID_INFO_OID_GROUP_BIT_LEN_SHIFT = 16,
    // KEY_LENGTH_MASK = 268369920, this enum value conflicts with OID_INFO_OID_GROUP_BIT_LEN_MASK
};
pub const XCN_CRYPT_ANY_GROUP_ID = ObjectIdGroupId.ANY_GROUP_ID;
pub const XCN_CRYPT_HASH_ALG_OID_GROUP_ID = ObjectIdGroupId.HASH_ALG_OID_GROUP_ID;
pub const XCN_CRYPT_ENCRYPT_ALG_OID_GROUP_ID = ObjectIdGroupId.ENCRYPT_ALG_OID_GROUP_ID;
pub const XCN_CRYPT_PUBKEY_ALG_OID_GROUP_ID = ObjectIdGroupId.PUBKEY_ALG_OID_GROUP_ID;
pub const XCN_CRYPT_SIGN_ALG_OID_GROUP_ID = ObjectIdGroupId.SIGN_ALG_OID_GROUP_ID;
pub const XCN_CRYPT_RDN_ATTR_OID_GROUP_ID = ObjectIdGroupId.RDN_ATTR_OID_GROUP_ID;
pub const XCN_CRYPT_EXT_OR_ATTR_OID_GROUP_ID = ObjectIdGroupId.EXT_OR_ATTR_OID_GROUP_ID;
pub const XCN_CRYPT_ENHKEY_USAGE_OID_GROUP_ID = ObjectIdGroupId.ENHKEY_USAGE_OID_GROUP_ID;
pub const XCN_CRYPT_POLICY_OID_GROUP_ID = ObjectIdGroupId.POLICY_OID_GROUP_ID;
pub const XCN_CRYPT_TEMPLATE_OID_GROUP_ID = ObjectIdGroupId.TEMPLATE_OID_GROUP_ID;
pub const XCN_CRYPT_KDF_OID_GROUP_ID = ObjectIdGroupId.KDF_OID_GROUP_ID;
pub const XCN_CRYPT_LAST_OID_GROUP_ID = ObjectIdGroupId.KDF_OID_GROUP_ID;
pub const XCN_CRYPT_FIRST_ALG_OID_GROUP_ID = ObjectIdGroupId.HASH_ALG_OID_GROUP_ID;
pub const XCN_CRYPT_LAST_ALG_OID_GROUP_ID = ObjectIdGroupId.SIGN_ALG_OID_GROUP_ID;
pub const XCN_CRYPT_GROUP_ID_MASK = ObjectIdGroupId.GROUP_ID_MASK;
pub const XCN_CRYPT_OID_PREFER_CNG_ALGID_FLAG = ObjectIdGroupId.OID_PREFER_CNG_ALGID_FLAG;
pub const XCN_CRYPT_OID_DISABLE_SEARCH_DS_FLAG = ObjectIdGroupId.OID_DISABLE_SEARCH_DS_FLAG;
pub const XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_MASK = ObjectIdGroupId.OID_INFO_OID_GROUP_BIT_LEN_MASK;
pub const XCN_CRYPT_OID_INFO_OID_GROUP_BIT_LEN_SHIFT = ObjectIdGroupId.OID_INFO_OID_GROUP_BIT_LEN_SHIFT;
pub const XCN_CRYPT_KEY_LENGTH_MASK = ObjectIdGroupId.OID_INFO_OID_GROUP_BIT_LEN_MASK;

pub const ObjectIdPublicKeyFlags = enum(i32) {
    ANY = 0,
    SIGN_KEY_FLAG = -2147483648,
    ENCRYPT_KEY_FLAG = 1073741824,
};
pub const XCN_CRYPT_OID_INFO_PUBKEY_ANY = ObjectIdPublicKeyFlags.ANY;
pub const XCN_CRYPT_OID_INFO_PUBKEY_SIGN_KEY_FLAG = ObjectIdPublicKeyFlags.SIGN_KEY_FLAG;
pub const XCN_CRYPT_OID_INFO_PUBKEY_ENCRYPT_KEY_FLAG = ObjectIdPublicKeyFlags.ENCRYPT_KEY_FLAG;

pub const AlgorithmFlags = enum(i32) {
    None = 0,
    Wrap = 1,
};
pub const AlgorithmFlagsNone = AlgorithmFlags.None;
pub const AlgorithmFlagsWrap = AlgorithmFlags.Wrap;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IObjectId_Value = Guid.initString("728ab300-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IObjectId = &IID_IObjectId_Value;
pub const IObjectId = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InitializeFromName: *const fn (
            self: *const IObjectId,
            name: CERTENROLL_OBJECTID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromValue: *const fn (
            self: *const IObjectId,
            str_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromAlgorithmName: *const fn (
            self: *const IObjectId,
            group_id: ObjectIdGroupId,
            key_flags: ObjectIdPublicKeyFlags,
            alg_flags: AlgorithmFlags,
            str_algorithm_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IObjectId,
            p_value: ?*CERTENROLL_OBJECTID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FriendlyName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IObjectId,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FriendlyName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IObjectId,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IObjectId,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAlgorithmName: *const fn (
            self: *const IObjectId,
            group_id: ObjectIdGroupId,
            key_flags: ObjectIdPublicKeyFlags,
            pstr_algorithm_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initializeFromName(self: *const T, name_: CERTENROLL_OBJECTID) HRESULT {
                return @as(*const IObjectId.VTable, @ptrCast(self.vtable)).InitializeFromName(@as(*const IObjectId, @ptrCast(self)), name_);
            }
            pub inline fn initializeFromValue(self: *const T, str_value_: ?BSTR) HRESULT {
                return @as(*const IObjectId.VTable, @ptrCast(self.vtable)).InitializeFromValue(@as(*const IObjectId, @ptrCast(self)), str_value_);
            }
            pub inline fn initializeFromAlgorithmName(self: *const T, group_id_: ObjectIdGroupId, key_flags_: ObjectIdPublicKeyFlags, alg_flags_: AlgorithmFlags, str_algorithm_name_: ?BSTR) HRESULT {
                return @as(*const IObjectId.VTable, @ptrCast(self.vtable)).InitializeFromAlgorithmName(@as(*const IObjectId, @ptrCast(self)), group_id_, key_flags_, alg_flags_, str_algorithm_name_);
            }
            pub inline fn getName(self: *const T, p_value_: ?*CERTENROLL_OBJECTID) HRESULT {
                return @as(*const IObjectId.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IObjectId, @ptrCast(self)), p_value_);
            }
            pub inline fn getFriendlyName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IObjectId.VTable, @ptrCast(self.vtable)).get_FriendlyName(@as(*const IObjectId, @ptrCast(self)), p_value_);
            }
            pub inline fn putFriendlyName(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IObjectId.VTable, @ptrCast(self.vtable)).put_FriendlyName(@as(*const IObjectId, @ptrCast(self)), value_);
            }
            pub inline fn getValue(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IObjectId.VTable, @ptrCast(self.vtable)).get_Value(@as(*const IObjectId, @ptrCast(self)), p_value_);
            }
            pub inline fn getAlgorithmName(self: *const T, group_id_: ObjectIdGroupId, key_flags_: ObjectIdPublicKeyFlags, pstr_algorithm_name_: ?*?BSTR) HRESULT {
                return @as(*const IObjectId.VTable, @ptrCast(self.vtable)).GetAlgorithmName(@as(*const IObjectId, @ptrCast(self)), group_id_, key_flags_, pstr_algorithm_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IObjectIds_Value = Guid.initString("728ab301-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IObjectIds = &IID_IObjectIds_Value;
pub const IObjectIds = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IObjectIds,
            index: i32,
            p_val: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IObjectIds,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IObjectIds,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IObjectIds,
            p_val: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IObjectIds,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: *const fn (
            self: *const IObjectIds,
            p_value: ?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItemByIndex(self: *const T, index_: i32, p_val_: ?*?*IObjectId) HRESULT {
                return @as(*const IObjectIds.VTable, @ptrCast(self.vtable)).get_ItemByIndex(@as(*const IObjectIds, @ptrCast(self)), index_, p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IObjectIds.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IObjectIds, @ptrCast(self)), p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const IObjectIds.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IObjectIds, @ptrCast(self)), p_val_);
            }
            pub inline fn add(self: *const T, p_val_: ?*IObjectId) HRESULT {
                return @as(*const IObjectIds.VTable, @ptrCast(self.vtable)).Add(@as(*const IObjectIds, @ptrCast(self)), p_val_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const IObjectIds.VTable, @ptrCast(self.vtable)).Remove(@as(*const IObjectIds, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IObjectIds.VTable, @ptrCast(self.vtable)).Clear(@as(*const IObjectIds, @ptrCast(self)));
            }
            pub inline fn addRange(self: *const T, p_value_: ?*IObjectIds) HRESULT {
                return @as(*const IObjectIds.VTable, @ptrCast(self.vtable)).AddRange(@as(*const IObjectIds, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBinaryConverter_Value = Guid.initString("728ab302-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IBinaryConverter = &IID_IBinaryConverter_Value;
pub const IBinaryConverter = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        StringToString: *const fn (
            self: *const IBinaryConverter,
            str_encoded_in: ?BSTR,
            encoding_in: EncodingType,
            encoding: EncodingType,
            pstr_encoded: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        VariantByteArrayToString: *const fn (
            self: *const IBinaryConverter,
            pvar_byte_array: ?*VARIANT,
            encoding: EncodingType,
            pstr_encoded: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StringToVariantByteArray: *const fn (
            self: *const IBinaryConverter,
            str_encoded: ?BSTR,
            encoding: EncodingType,
            pvar_byte_array: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn stringToString(self: *const T, str_encoded_in_: ?BSTR, encoding_in_: EncodingType, encoding_: EncodingType, pstr_encoded_: ?*?BSTR) HRESULT {
                return @as(*const IBinaryConverter.VTable, @ptrCast(self.vtable)).StringToString(@as(*const IBinaryConverter, @ptrCast(self)), str_encoded_in_, encoding_in_, encoding_, pstr_encoded_);
            }
            pub inline fn variantByteArrayToString(self: *const T, pvar_byte_array_: ?*VARIANT, encoding_: EncodingType, pstr_encoded_: ?*?BSTR) HRESULT {
                return @as(*const IBinaryConverter.VTable, @ptrCast(self.vtable)).VariantByteArrayToString(@as(*const IBinaryConverter, @ptrCast(self)), pvar_byte_array_, encoding_, pstr_encoded_);
            }
            pub inline fn stringToVariantByteArray(self: *const T, str_encoded_: ?BSTR, encoding_: EncodingType, pvar_byte_array_: ?*VARIANT) HRESULT {
                return @as(*const IBinaryConverter.VTable, @ptrCast(self.vtable)).StringToVariantByteArray(@as(*const IBinaryConverter, @ptrCast(self)), str_encoded_, encoding_, pvar_byte_array_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IBinaryConverter2_Value = Guid.initString("8d7928b4-4e17-428d-9a17-728df00d1b2b");
pub const IID_IBinaryConverter2 = &IID_IBinaryConverter2_Value;
pub const IBinaryConverter2 = extern struct {
    pub const VTable = extern struct {
        base: IBinaryConverter.VTable,
        StringArrayToVariantArray: *const fn (
            self: *const IBinaryConverter2,
            pvar_string_array: ?*VARIANT,
            pvar_variant_array: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        VariantArrayToStringArray: *const fn (
            self: *const IBinaryConverter2,
            pvar_variant_array: ?*VARIANT,
            pvar_string_array: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IBinaryConverter.MethodMixin(T);
            pub inline fn stringArrayToVariantArray(self: *const T, pvar_string_array_: ?*VARIANT, pvar_variant_array_: ?*VARIANT) HRESULT {
                return @as(*const IBinaryConverter2.VTable, @ptrCast(self.vtable)).StringArrayToVariantArray(@as(*const IBinaryConverter2, @ptrCast(self)), pvar_string_array_, pvar_variant_array_);
            }
            pub inline fn variantArrayToStringArray(self: *const T, pvar_variant_array_: ?*VARIANT, pvar_string_array_: ?*VARIANT) HRESULT {
                return @as(*const IBinaryConverter2.VTable, @ptrCast(self.vtable)).VariantArrayToStringArray(@as(*const IBinaryConverter2, @ptrCast(self)), pvar_variant_array_, pvar_string_array_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const X500NameFlags = enum(i32) {
    NAME_STR_NONE = 0,
    SIMPLE_NAME_STR = 1,
    OID_NAME_STR = 2,
    X500_NAME_STR = 3,
    XML_NAME_STR = 4,
    NAME_STR_SEMICOLON_FLAG = 1073741824,
    NAME_STR_NO_PLUS_FLAG = 536870912,
    NAME_STR_NO_QUOTING_FLAG = 268435456,
    NAME_STR_CRLF_FLAG = 134217728,
    NAME_STR_COMMA_FLAG = 67108864,
    NAME_STR_REVERSE_FLAG = 33554432,
    NAME_STR_FORWARD_FLAG = 16777216,
    NAME_STR_AMBIGUOUS_SEPARATOR_FLAGS = 1275068416,
    NAME_STR_DISABLE_IE4_UTF8_FLAG = 65536,
    NAME_STR_ENABLE_T61_UNICODE_FLAG = 131072,
    NAME_STR_ENABLE_UTF8_UNICODE_FLAG = 262144,
    NAME_STR_FORCE_UTF8_DIR_STR_FLAG = 524288,
    NAME_STR_DISABLE_UTF8_DIR_STR_FLAG = 1048576,
    NAME_STR_ENABLE_PUNYCODE_FLAG = 2097152,
    NAME_STR_DS_ESCAPED = 8388608,
};
pub const XCN_CERT_NAME_STR_NONE = X500NameFlags.NAME_STR_NONE;
pub const XCN_CERT_SIMPLE_NAME_STR = X500NameFlags.SIMPLE_NAME_STR;
pub const XCN_CERT_OID_NAME_STR = X500NameFlags.OID_NAME_STR;
pub const XCN_CERT_X500_NAME_STR = X500NameFlags.X500_NAME_STR;
pub const XCN_CERT_XML_NAME_STR = X500NameFlags.XML_NAME_STR;
pub const XCN_CERT_NAME_STR_SEMICOLON_FLAG = X500NameFlags.NAME_STR_SEMICOLON_FLAG;
pub const XCN_CERT_NAME_STR_NO_PLUS_FLAG = X500NameFlags.NAME_STR_NO_PLUS_FLAG;
pub const XCN_CERT_NAME_STR_NO_QUOTING_FLAG = X500NameFlags.NAME_STR_NO_QUOTING_FLAG;
pub const XCN_CERT_NAME_STR_CRLF_FLAG = X500NameFlags.NAME_STR_CRLF_FLAG;
pub const XCN_CERT_NAME_STR_COMMA_FLAG = X500NameFlags.NAME_STR_COMMA_FLAG;
pub const XCN_CERT_NAME_STR_REVERSE_FLAG = X500NameFlags.NAME_STR_REVERSE_FLAG;
pub const XCN_CERT_NAME_STR_FORWARD_FLAG = X500NameFlags.NAME_STR_FORWARD_FLAG;
pub const XCN_CERT_NAME_STR_AMBIGUOUS_SEPARATOR_FLAGS = X500NameFlags.NAME_STR_AMBIGUOUS_SEPARATOR_FLAGS;
pub const XCN_CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG = X500NameFlags.NAME_STR_DISABLE_IE4_UTF8_FLAG;
pub const XCN_CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG = X500NameFlags.NAME_STR_ENABLE_T61_UNICODE_FLAG;
pub const XCN_CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG = X500NameFlags.NAME_STR_ENABLE_UTF8_UNICODE_FLAG;
pub const XCN_CERT_NAME_STR_FORCE_UTF8_DIR_STR_FLAG = X500NameFlags.NAME_STR_FORCE_UTF8_DIR_STR_FLAG;
pub const XCN_CERT_NAME_STR_DISABLE_UTF8_DIR_STR_FLAG = X500NameFlags.NAME_STR_DISABLE_UTF8_DIR_STR_FLAG;
pub const XCN_CERT_NAME_STR_ENABLE_PUNYCODE_FLAG = X500NameFlags.NAME_STR_ENABLE_PUNYCODE_FLAG;
pub const XCN_CERT_NAME_STR_DS_ESCAPED = X500NameFlags.NAME_STR_DS_ESCAPED;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX500DistinguishedName_Value = Guid.initString("728ab303-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX500DistinguishedName = &IID_IX500DistinguishedName_Value;
pub const IX500DistinguishedName = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: *const fn (
            self: *const IX500DistinguishedName,
            str_encoded_name: ?BSTR,
            encoding: EncodingType,
            name_flags: X500NameFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: *const fn (
            self: *const IX500DistinguishedName,
            str_name: ?BSTR,
            name_flags: X500NameFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX500DistinguishedName,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncodedName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX500DistinguishedName,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn decode(self: *const T, str_encoded_name_: ?BSTR, encoding_: EncodingType, name_flags_: X500NameFlags) HRESULT {
                return @as(*const IX500DistinguishedName.VTable, @ptrCast(self.vtable)).Decode(@as(*const IX500DistinguishedName, @ptrCast(self)), str_encoded_name_, encoding_, name_flags_);
            }
            pub inline fn encode(self: *const T, str_name_: ?BSTR, name_flags_: X500NameFlags) HRESULT {
                return @as(*const IX500DistinguishedName.VTable, @ptrCast(self.vtable)).Encode(@as(*const IX500DistinguishedName, @ptrCast(self)), str_name_, name_flags_);
            }
            pub inline fn getName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX500DistinguishedName.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IX500DistinguishedName, @ptrCast(self)), p_value_);
            }
            pub inline fn getEncodedName(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX500DistinguishedName.VTable, @ptrCast(self.vtable)).get_EncodedName(@as(*const IX500DistinguishedName, @ptrCast(self)), encoding_, p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const X509CertificateEnrollmentContext = enum(i32) {
    None = 0,
    User = 1,
    Machine = 2,
    AdministratorForceMachine = 3,
};
pub const ContextNone = X509CertificateEnrollmentContext.None;
pub const ContextUser = X509CertificateEnrollmentContext.User;
pub const ContextMachine = X509CertificateEnrollmentContext.Machine;
pub const ContextAdministratorForceMachine = X509CertificateEnrollmentContext.AdministratorForceMachine;

pub const EnrollmentEnrollStatus = enum(i32) {
    ed = 1,
    Pended = 2,
    UIDeferredEnrollmentRequired = 4,
    Error = 16,
    Unknown = 32,
    Skipped = 64,
    Denied = 256,
};
pub const Enrolled = EnrollmentEnrollStatus.ed;
pub const EnrollPended = EnrollmentEnrollStatus.Pended;
pub const EnrollUIDeferredEnrollmentRequired = EnrollmentEnrollStatus.UIDeferredEnrollmentRequired;
pub const EnrollError = EnrollmentEnrollStatus.Error;
pub const EnrollUnknown = EnrollmentEnrollStatus.Unknown;
pub const EnrollSkipped = EnrollmentEnrollStatus.Skipped;
pub const EnrollDenied = EnrollmentEnrollStatus.Denied;

pub const EnrollmentSelectionStatus = enum(i32) {
    No = 0,
    Yes = 1,
};
pub const SelectedNo = EnrollmentSelectionStatus.No;
pub const SelectedYes = EnrollmentSelectionStatus.Yes;

pub const EnrollmentDisplayStatus = enum(i32) {
    No = 0,
    Yes = 1,
};
pub const DisplayNo = EnrollmentDisplayStatus.No;
pub const DisplayYes = EnrollmentDisplayStatus.Yes;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509EnrollmentStatus_Value = Guid.initString("728ab304-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509EnrollmentStatus = &IID_IX509EnrollmentStatus_Value;
pub const IX509EnrollmentStatus = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        AppendText: *const fn (
            self: *const IX509EnrollmentStatus,
            str_text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Text: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509EnrollmentStatus,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Text: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509EnrollmentStatus,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Selected: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509EnrollmentStatus,
            p_value: ?*EnrollmentSelectionStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Selected: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509EnrollmentStatus,
            value: EnrollmentSelectionStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Display: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509EnrollmentStatus,
            p_value: ?*EnrollmentDisplayStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Display: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509EnrollmentStatus,
            value: EnrollmentDisplayStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509EnrollmentStatus,
            p_value: ?*EnrollmentEnrollStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509EnrollmentStatus,
            value: EnrollmentEnrollStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Error: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509EnrollmentStatus,
            p_value: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Error: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509EnrollmentStatus,
            value: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ErrorText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509EnrollmentStatus,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn appendText(self: *const T, str_text_: ?BSTR) HRESULT {
                return @as(*const IX509EnrollmentStatus.VTable, @ptrCast(self.vtable)).AppendText(@as(*const IX509EnrollmentStatus, @ptrCast(self)), str_text_);
            }
            pub inline fn getText(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509EnrollmentStatus.VTable, @ptrCast(self.vtable)).get_Text(@as(*const IX509EnrollmentStatus, @ptrCast(self)), p_value_);
            }
            pub inline fn putText(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IX509EnrollmentStatus.VTable, @ptrCast(self.vtable)).put_Text(@as(*const IX509EnrollmentStatus, @ptrCast(self)), value_);
            }
            pub inline fn getSelected(self: *const T, p_value_: ?*EnrollmentSelectionStatus) HRESULT {
                return @as(*const IX509EnrollmentStatus.VTable, @ptrCast(self.vtable)).get_Selected(@as(*const IX509EnrollmentStatus, @ptrCast(self)), p_value_);
            }
            pub inline fn putSelected(self: *const T, value_: EnrollmentSelectionStatus) HRESULT {
                return @as(*const IX509EnrollmentStatus.VTable, @ptrCast(self.vtable)).put_Selected(@as(*const IX509EnrollmentStatus, @ptrCast(self)), value_);
            }
            pub inline fn getDisplay(self: *const T, p_value_: ?*EnrollmentDisplayStatus) HRESULT {
                return @as(*const IX509EnrollmentStatus.VTable, @ptrCast(self.vtable)).get_Display(@as(*const IX509EnrollmentStatus, @ptrCast(self)), p_value_);
            }
            pub inline fn putDisplay(self: *const T, value_: EnrollmentDisplayStatus) HRESULT {
                return @as(*const IX509EnrollmentStatus.VTable, @ptrCast(self.vtable)).put_Display(@as(*const IX509EnrollmentStatus, @ptrCast(self)), value_);
            }
            pub inline fn getStatus(self: *const T, p_value_: ?*EnrollmentEnrollStatus) HRESULT {
                return @as(*const IX509EnrollmentStatus.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IX509EnrollmentStatus, @ptrCast(self)), p_value_);
            }
            pub inline fn putStatus(self: *const T, value_: EnrollmentEnrollStatus) HRESULT {
                return @as(*const IX509EnrollmentStatus.VTable, @ptrCast(self.vtable)).put_Status(@as(*const IX509EnrollmentStatus, @ptrCast(self)), value_);
            }
            pub inline fn getError(self: *const T, p_value_: ?*HRESULT) HRESULT {
                return @as(*const IX509EnrollmentStatus.VTable, @ptrCast(self.vtable)).get_Error(@as(*const IX509EnrollmentStatus, @ptrCast(self)), p_value_);
            }
            pub inline fn putError(self: *const T, value_: HRESULT) HRESULT {
                return @as(*const IX509EnrollmentStatus.VTable, @ptrCast(self.vtable)).put_Error(@as(*const IX509EnrollmentStatus, @ptrCast(self)), value_);
            }
            pub inline fn getErrorText(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509EnrollmentStatus.VTable, @ptrCast(self.vtable)).get_ErrorText(@as(*const IX509EnrollmentStatus, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const X509ProviderType = enum(i32) {
    NONE = 0,
    RSA_FULL = 1,
    RSA_SIG = 2,
    DSS = 3,
    FORTEZZA = 4,
    MS_EXCHANGE = 5,
    SSL = 6,
    RSA_SCHANNEL = 12,
    DSS_DH = 13,
    EC_ECDSA_SIG = 14,
    EC_ECNRA_SIG = 15,
    EC_ECDSA_FULL = 16,
    EC_ECNRA_FULL = 17,
    DH_SCHANNEL = 18,
    SPYRUS_LYNKS = 20,
    RNG = 21,
    INTEL_SEC = 22,
    REPLACE_OWF = 23,
    RSA_AES = 24,
};
pub const XCN_PROV_NONE = X509ProviderType.NONE;
pub const XCN_PROV_RSA_FULL = X509ProviderType.RSA_FULL;
pub const XCN_PROV_RSA_SIG = X509ProviderType.RSA_SIG;
pub const XCN_PROV_DSS = X509ProviderType.DSS;
pub const XCN_PROV_FORTEZZA = X509ProviderType.FORTEZZA;
pub const XCN_PROV_MS_EXCHANGE = X509ProviderType.MS_EXCHANGE;
pub const XCN_PROV_SSL = X509ProviderType.SSL;
pub const XCN_PROV_RSA_SCHANNEL = X509ProviderType.RSA_SCHANNEL;
pub const XCN_PROV_DSS_DH = X509ProviderType.DSS_DH;
pub const XCN_PROV_EC_ECDSA_SIG = X509ProviderType.EC_ECDSA_SIG;
pub const XCN_PROV_EC_ECNRA_SIG = X509ProviderType.EC_ECNRA_SIG;
pub const XCN_PROV_EC_ECDSA_FULL = X509ProviderType.EC_ECDSA_FULL;
pub const XCN_PROV_EC_ECNRA_FULL = X509ProviderType.EC_ECNRA_FULL;
pub const XCN_PROV_DH_SCHANNEL = X509ProviderType.DH_SCHANNEL;
pub const XCN_PROV_SPYRUS_LYNKS = X509ProviderType.SPYRUS_LYNKS;
pub const XCN_PROV_RNG = X509ProviderType.RNG;
pub const XCN_PROV_INTEL_SEC = X509ProviderType.INTEL_SEC;
pub const XCN_PROV_REPLACE_OWF = X509ProviderType.REPLACE_OWF;
pub const XCN_PROV_RSA_AES = X509ProviderType.RSA_AES;

pub const AlgorithmType = enum(i32) {
    UNKNOWN_INTERFACE = 0,
    CIPHER_INTERFACE = 1,
    HASH_INTERFACE = 2,
    ASYMMETRIC_ENCRYPTION_INTERFACE = 3,
    SIGNATURE_INTERFACE = 5,
    SECRET_AGREEMENT_INTERFACE = 4,
    RNG_INTERFACE = 6,
    KEY_DERIVATION_INTERFACE = 7,
};
pub const XCN_BCRYPT_UNKNOWN_INTERFACE = AlgorithmType.UNKNOWN_INTERFACE;
pub const XCN_BCRYPT_CIPHER_INTERFACE = AlgorithmType.CIPHER_INTERFACE;
pub const XCN_BCRYPT_HASH_INTERFACE = AlgorithmType.HASH_INTERFACE;
pub const XCN_BCRYPT_ASYMMETRIC_ENCRYPTION_INTERFACE = AlgorithmType.ASYMMETRIC_ENCRYPTION_INTERFACE;
pub const XCN_BCRYPT_SIGNATURE_INTERFACE = AlgorithmType.SIGNATURE_INTERFACE;
pub const XCN_BCRYPT_SECRET_AGREEMENT_INTERFACE = AlgorithmType.SECRET_AGREEMENT_INTERFACE;
pub const XCN_BCRYPT_RNG_INTERFACE = AlgorithmType.RNG_INTERFACE;
pub const XCN_BCRYPT_KEY_DERIVATION_INTERFACE = AlgorithmType.KEY_DERIVATION_INTERFACE;

pub const AlgorithmOperationFlags = enum(i32) {
    NO_OPERATION = 0,
    CIPHER_OPERATION = 1,
    HASH_OPERATION = 2,
    ASYMMETRIC_ENCRYPTION_OPERATION = 4,
    SECRET_AGREEMENT_OPERATION = 8,
    SIGNATURE_OPERATION = 16,
    RNG_OPERATION = 32,
    KEY_DERIVATION_OPERATION = 64,
    ANY_ASYMMETRIC_OPERATION = 28,
    PREFER_SIGNATURE_ONLY_OPERATION = 2097152,
    PREFER_NON_SIGNATURE_OPERATION = 4194304,
    EXACT_MATCH_OPERATION = 8388608,
    PREFERENCE_MASK_OPERATION = 14680064,
};
pub const XCN_NCRYPT_NO_OPERATION = AlgorithmOperationFlags.NO_OPERATION;
pub const XCN_NCRYPT_CIPHER_OPERATION = AlgorithmOperationFlags.CIPHER_OPERATION;
pub const XCN_NCRYPT_HASH_OPERATION = AlgorithmOperationFlags.HASH_OPERATION;
pub const XCN_NCRYPT_ASYMMETRIC_ENCRYPTION_OPERATION = AlgorithmOperationFlags.ASYMMETRIC_ENCRYPTION_OPERATION;
pub const XCN_NCRYPT_SECRET_AGREEMENT_OPERATION = AlgorithmOperationFlags.SECRET_AGREEMENT_OPERATION;
pub const XCN_NCRYPT_SIGNATURE_OPERATION = AlgorithmOperationFlags.SIGNATURE_OPERATION;
pub const XCN_NCRYPT_RNG_OPERATION = AlgorithmOperationFlags.RNG_OPERATION;
pub const XCN_NCRYPT_KEY_DERIVATION_OPERATION = AlgorithmOperationFlags.KEY_DERIVATION_OPERATION;
pub const XCN_NCRYPT_ANY_ASYMMETRIC_OPERATION = AlgorithmOperationFlags.ANY_ASYMMETRIC_OPERATION;
pub const XCN_NCRYPT_PREFER_SIGNATURE_ONLY_OPERATION = AlgorithmOperationFlags.PREFER_SIGNATURE_ONLY_OPERATION;
pub const XCN_NCRYPT_PREFER_NON_SIGNATURE_OPERATION = AlgorithmOperationFlags.PREFER_NON_SIGNATURE_OPERATION;
pub const XCN_NCRYPT_EXACT_MATCH_OPERATION = AlgorithmOperationFlags.EXACT_MATCH_OPERATION;
pub const XCN_NCRYPT_PREFERENCE_MASK_OPERATION = AlgorithmOperationFlags.PREFERENCE_MASK_OPERATION;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICspAlgorithm_Value = Guid.initString("728ab305-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICspAlgorithm = &IID_ICspAlgorithm_Value;
pub const ICspAlgorithm = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetAlgorithmOid: *const fn (
            self: *const ICspAlgorithm,
            length: i32,
            alg_flags: AlgorithmFlags,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DefaultLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspAlgorithm,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IncrementLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspAlgorithm,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LongName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspAlgorithm,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Valid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspAlgorithm,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspAlgorithm,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspAlgorithm,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspAlgorithm,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspAlgorithm,
            p_value: ?*AlgorithmType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Operations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspAlgorithm,
            p_value: ?*AlgorithmOperationFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAlgorithmOid(self: *const T, length_: i32, alg_flags_: AlgorithmFlags, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const ICspAlgorithm.VTable, @ptrCast(self.vtable)).GetAlgorithmOid(@as(*const ICspAlgorithm, @ptrCast(self)), length_, alg_flags_, pp_value_);
            }
            pub inline fn getDefaultLength(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const ICspAlgorithm.VTable, @ptrCast(self.vtable)).get_DefaultLength(@as(*const ICspAlgorithm, @ptrCast(self)), p_value_);
            }
            pub inline fn getIncrementLength(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const ICspAlgorithm.VTable, @ptrCast(self.vtable)).get_IncrementLength(@as(*const ICspAlgorithm, @ptrCast(self)), p_value_);
            }
            pub inline fn getLongName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ICspAlgorithm.VTable, @ptrCast(self.vtable)).get_LongName(@as(*const ICspAlgorithm, @ptrCast(self)), p_value_);
            }
            pub inline fn getValid(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const ICspAlgorithm.VTable, @ptrCast(self.vtable)).get_Valid(@as(*const ICspAlgorithm, @ptrCast(self)), p_value_);
            }
            pub inline fn getMaxLength(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const ICspAlgorithm.VTable, @ptrCast(self.vtable)).get_MaxLength(@as(*const ICspAlgorithm, @ptrCast(self)), p_value_);
            }
            pub inline fn getMinLength(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const ICspAlgorithm.VTable, @ptrCast(self.vtable)).get_MinLength(@as(*const ICspAlgorithm, @ptrCast(self)), p_value_);
            }
            pub inline fn getName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ICspAlgorithm.VTable, @ptrCast(self.vtable)).get_Name(@as(*const ICspAlgorithm, @ptrCast(self)), p_value_);
            }
            pub inline fn getType(self: *const T, p_value_: ?*AlgorithmType) HRESULT {
                return @as(*const ICspAlgorithm.VTable, @ptrCast(self.vtable)).get_Type(@as(*const ICspAlgorithm, @ptrCast(self)), p_value_);
            }
            pub inline fn getOperations(self: *const T, p_value_: ?*AlgorithmOperationFlags) HRESULT {
                return @as(*const ICspAlgorithm.VTable, @ptrCast(self.vtable)).get_Operations(@as(*const ICspAlgorithm, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICspAlgorithms_Value = Guid.initString("728ab306-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICspAlgorithms = &IID_ICspAlgorithms_Value;
pub const ICspAlgorithms = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspAlgorithms,
            index: i32,
            p_val: ?*?*ICspAlgorithm,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspAlgorithms,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspAlgorithms,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const ICspAlgorithms,
            p_val: ?*ICspAlgorithm,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ICspAlgorithms,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const ICspAlgorithms,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspAlgorithms,
            str_name: ?BSTR,
            pp_value: ?*?*ICspAlgorithm,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IndexByObjectId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspAlgorithms,
            p_object_id: ?*IObjectId,
            p_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItemByIndex(self: *const T, index_: i32, p_val_: ?*?*ICspAlgorithm) HRESULT {
                return @as(*const ICspAlgorithms.VTable, @ptrCast(self.vtable)).get_ItemByIndex(@as(*const ICspAlgorithms, @ptrCast(self)), index_, p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const ICspAlgorithms.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ICspAlgorithms, @ptrCast(self)), p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const ICspAlgorithms.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ICspAlgorithms, @ptrCast(self)), p_val_);
            }
            pub inline fn add(self: *const T, p_val_: ?*ICspAlgorithm) HRESULT {
                return @as(*const ICspAlgorithms.VTable, @ptrCast(self.vtable)).Add(@as(*const ICspAlgorithms, @ptrCast(self)), p_val_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const ICspAlgorithms.VTable, @ptrCast(self.vtable)).Remove(@as(*const ICspAlgorithms, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const ICspAlgorithms.VTable, @ptrCast(self.vtable)).Clear(@as(*const ICspAlgorithms, @ptrCast(self)));
            }
            pub inline fn getItemByName(self: *const T, str_name_: ?BSTR, pp_value_: ?*?*ICspAlgorithm) HRESULT {
                return @as(*const ICspAlgorithms.VTable, @ptrCast(self.vtable)).get_ItemByName(@as(*const ICspAlgorithms, @ptrCast(self)), str_name_, pp_value_);
            }
            pub inline fn getIndexByObjectId(self: *const T, p_object_id_: ?*IObjectId, p_index_: ?*i32) HRESULT {
                return @as(*const ICspAlgorithms.VTable, @ptrCast(self.vtable)).get_IndexByObjectId(@as(*const ICspAlgorithms, @ptrCast(self)), p_object_id_, p_index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const X509KeySpec = enum(i32) {
    NONE = 0,
    KEYEXCHANGE = 1,
    SIGNATURE = 2,
};
pub const XCN_AT_NONE = X509KeySpec.NONE;
pub const XCN_AT_KEYEXCHANGE = X509KeySpec.KEYEXCHANGE;
pub const XCN_AT_SIGNATURE = X509KeySpec.SIGNATURE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICspInformation_Value = Guid.initString("728ab307-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICspInformation = &IID_ICspInformation_Value;
pub const ICspInformation = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InitializeFromName: *const fn (
            self: *const ICspInformation,
            str_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromType: *const fn (
            self: *const ICspInformation,
            type: X509ProviderType,
            p_algorithm: ?*IObjectId,
            machine_context: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CspAlgorithms: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspInformation,
            pp_value: ?*?*ICspAlgorithms,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HasHardwareRandomNumberGenerator: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspInformation,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsHardwareDevice: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspInformation,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsRemovable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspInformation,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsSoftwareDevice: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspInformation,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Valid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspInformation,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxKeyContainerNameLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspInformation,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspInformation,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspInformation,
            p_value: ?*X509ProviderType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Version: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspInformation,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeySpec: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspInformation,
            p_value: ?*X509KeySpec,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsSmartCard: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspInformation,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultSecurityDescriptor: *const fn (
            self: *const ICspInformation,
            machine_context: i16,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LegacyCsp: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspInformation,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCspStatusFromOperations: *const fn (
            self: *const ICspInformation,
            p_algorithm: ?*IObjectId,
            operations: AlgorithmOperationFlags,
            pp_value: ?*?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initializeFromName(self: *const T, str_name_: ?BSTR) HRESULT {
                return @as(*const ICspInformation.VTable, @ptrCast(self.vtable)).InitializeFromName(@as(*const ICspInformation, @ptrCast(self)), str_name_);
            }
            pub inline fn initializeFromType(self: *const T, type_: X509ProviderType, p_algorithm_: ?*IObjectId, machine_context_: i16) HRESULT {
                return @as(*const ICspInformation.VTable, @ptrCast(self.vtable)).InitializeFromType(@as(*const ICspInformation, @ptrCast(self)), type_, p_algorithm_, machine_context_);
            }
            pub inline fn getCspAlgorithms(self: *const T, pp_value_: ?*?*ICspAlgorithms) HRESULT {
                return @as(*const ICspInformation.VTable, @ptrCast(self.vtable)).get_CspAlgorithms(@as(*const ICspInformation, @ptrCast(self)), pp_value_);
            }
            pub inline fn getHasHardwareRandomNumberGenerator(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const ICspInformation.VTable, @ptrCast(self.vtable)).get_HasHardwareRandomNumberGenerator(@as(*const ICspInformation, @ptrCast(self)), p_value_);
            }
            pub inline fn getIsHardwareDevice(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const ICspInformation.VTable, @ptrCast(self.vtable)).get_IsHardwareDevice(@as(*const ICspInformation, @ptrCast(self)), p_value_);
            }
            pub inline fn getIsRemovable(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const ICspInformation.VTable, @ptrCast(self.vtable)).get_IsRemovable(@as(*const ICspInformation, @ptrCast(self)), p_value_);
            }
            pub inline fn getIsSoftwareDevice(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const ICspInformation.VTable, @ptrCast(self.vtable)).get_IsSoftwareDevice(@as(*const ICspInformation, @ptrCast(self)), p_value_);
            }
            pub inline fn getValid(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const ICspInformation.VTable, @ptrCast(self.vtable)).get_Valid(@as(*const ICspInformation, @ptrCast(self)), p_value_);
            }
            pub inline fn getMaxKeyContainerNameLength(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const ICspInformation.VTable, @ptrCast(self.vtable)).get_MaxKeyContainerNameLength(@as(*const ICspInformation, @ptrCast(self)), p_value_);
            }
            pub inline fn getName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ICspInformation.VTable, @ptrCast(self.vtable)).get_Name(@as(*const ICspInformation, @ptrCast(self)), p_value_);
            }
            pub inline fn getType(self: *const T, p_value_: ?*X509ProviderType) HRESULT {
                return @as(*const ICspInformation.VTable, @ptrCast(self.vtable)).get_Type(@as(*const ICspInformation, @ptrCast(self)), p_value_);
            }
            pub inline fn getVersion(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const ICspInformation.VTable, @ptrCast(self.vtable)).get_Version(@as(*const ICspInformation, @ptrCast(self)), p_value_);
            }
            pub inline fn getKeySpec(self: *const T, p_value_: ?*X509KeySpec) HRESULT {
                return @as(*const ICspInformation.VTable, @ptrCast(self.vtable)).get_KeySpec(@as(*const ICspInformation, @ptrCast(self)), p_value_);
            }
            pub inline fn getIsSmartCard(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const ICspInformation.VTable, @ptrCast(self.vtable)).get_IsSmartCard(@as(*const ICspInformation, @ptrCast(self)), p_value_);
            }
            pub inline fn getDefaultSecurityDescriptor(self: *const T, machine_context_: i16, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ICspInformation.VTable, @ptrCast(self.vtable)).GetDefaultSecurityDescriptor(@as(*const ICspInformation, @ptrCast(self)), machine_context_, p_value_);
            }
            pub inline fn getLegacyCsp(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const ICspInformation.VTable, @ptrCast(self.vtable)).get_LegacyCsp(@as(*const ICspInformation, @ptrCast(self)), p_value_);
            }
            pub inline fn getCspStatusFromOperations(self: *const T, p_algorithm_: ?*IObjectId, operations_: AlgorithmOperationFlags, pp_value_: ?*?*ICspStatus) HRESULT {
                return @as(*const ICspInformation.VTable, @ptrCast(self.vtable)).GetCspStatusFromOperations(@as(*const ICspInformation, @ptrCast(self)), p_algorithm_, operations_, pp_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICspInformations_Value = Guid.initString("728ab308-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICspInformations = &IID_ICspInformations_Value;
pub const ICspInformations = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspInformations,
            index: i32,
            p_val: ?*?*ICspInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspInformations,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspInformations,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const ICspInformations,
            p_val: ?*ICspInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ICspInformations,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const ICspInformations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAvailableCsps: *const fn (
            self: *const ICspInformations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspInformations,
            str_name: ?BSTR,
            pp_csp_information: ?*?*ICspInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCspStatusFromProviderName: *const fn (
            self: *const ICspInformations,
            str_provider_name: ?BSTR,
            legacy_key_spec: X509KeySpec,
            pp_value: ?*?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCspStatusesFromOperations: *const fn (
            self: *const ICspInformations,
            operations: AlgorithmOperationFlags,
            p_csp_information: ?*ICspInformation,
            pp_value: ?*?*ICspStatuses,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEncryptionCspAlgorithms: *const fn (
            self: *const ICspInformations,
            p_csp_information: ?*ICspInformation,
            pp_value: ?*?*ICspAlgorithms,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHashAlgorithms: *const fn (
            self: *const ICspInformations,
            p_csp_information: ?*ICspInformation,
            pp_value: ?*?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItemByIndex(self: *const T, index_: i32, p_val_: ?*?*ICspInformation) HRESULT {
                return @as(*const ICspInformations.VTable, @ptrCast(self.vtable)).get_ItemByIndex(@as(*const ICspInformations, @ptrCast(self)), index_, p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const ICspInformations.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ICspInformations, @ptrCast(self)), p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const ICspInformations.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ICspInformations, @ptrCast(self)), p_val_);
            }
            pub inline fn add(self: *const T, p_val_: ?*ICspInformation) HRESULT {
                return @as(*const ICspInformations.VTable, @ptrCast(self.vtable)).Add(@as(*const ICspInformations, @ptrCast(self)), p_val_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const ICspInformations.VTable, @ptrCast(self.vtable)).Remove(@as(*const ICspInformations, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const ICspInformations.VTable, @ptrCast(self.vtable)).Clear(@as(*const ICspInformations, @ptrCast(self)));
            }
            pub inline fn addAvailableCsps(self: *const T) HRESULT {
                return @as(*const ICspInformations.VTable, @ptrCast(self.vtable)).AddAvailableCsps(@as(*const ICspInformations, @ptrCast(self)));
            }
            pub inline fn getItemByName(self: *const T, str_name_: ?BSTR, pp_csp_information_: ?*?*ICspInformation) HRESULT {
                return @as(*const ICspInformations.VTable, @ptrCast(self.vtable)).get_ItemByName(@as(*const ICspInformations, @ptrCast(self)), str_name_, pp_csp_information_);
            }
            pub inline fn getCspStatusFromProviderName(self: *const T, str_provider_name_: ?BSTR, legacy_key_spec_: X509KeySpec, pp_value_: ?*?*ICspStatus) HRESULT {
                return @as(*const ICspInformations.VTable, @ptrCast(self.vtable)).GetCspStatusFromProviderName(@as(*const ICspInformations, @ptrCast(self)), str_provider_name_, legacy_key_spec_, pp_value_);
            }
            pub inline fn getCspStatusesFromOperations(self: *const T, operations_: AlgorithmOperationFlags, p_csp_information_: ?*ICspInformation, pp_value_: ?*?*ICspStatuses) HRESULT {
                return @as(*const ICspInformations.VTable, @ptrCast(self.vtable)).GetCspStatusesFromOperations(@as(*const ICspInformations, @ptrCast(self)), operations_, p_csp_information_, pp_value_);
            }
            pub inline fn getEncryptionCspAlgorithms(self: *const T, p_csp_information_: ?*ICspInformation, pp_value_: ?*?*ICspAlgorithms) HRESULT {
                return @as(*const ICspInformations.VTable, @ptrCast(self.vtable)).GetEncryptionCspAlgorithms(@as(*const ICspInformations, @ptrCast(self)), p_csp_information_, pp_value_);
            }
            pub inline fn getHashAlgorithms(self: *const T, p_csp_information_: ?*ICspInformation, pp_value_: ?*?*IObjectIds) HRESULT {
                return @as(*const ICspInformations.VTable, @ptrCast(self.vtable)).GetHashAlgorithms(@as(*const ICspInformations, @ptrCast(self)), p_csp_information_, pp_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICspStatus_Value = Guid.initString("728ab309-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICspStatus = &IID_ICspStatus_Value;
pub const ICspStatus = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const ICspStatus,
            p_csp: ?*ICspInformation,
            p_algorithm: ?*ICspAlgorithm,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Ordinal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspStatus,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Ordinal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspStatus,
            value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CspAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspStatus,
            pp_value: ?*?*ICspAlgorithm,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CspInformation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspStatus,
            pp_value: ?*?*ICspInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnrollmentStatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspStatus,
            pp_value: ?*?*IX509EnrollmentStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspStatus,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_csp_: ?*ICspInformation, p_algorithm_: ?*ICspAlgorithm) HRESULT {
                return @as(*const ICspStatus.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ICspStatus, @ptrCast(self)), p_csp_, p_algorithm_);
            }
            pub inline fn getOrdinal(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const ICspStatus.VTable, @ptrCast(self.vtable)).get_Ordinal(@as(*const ICspStatus, @ptrCast(self)), p_value_);
            }
            pub inline fn putOrdinal(self: *const T, value_: i32) HRESULT {
                return @as(*const ICspStatus.VTable, @ptrCast(self.vtable)).put_Ordinal(@as(*const ICspStatus, @ptrCast(self)), value_);
            }
            pub inline fn getCspAlgorithm(self: *const T, pp_value_: ?*?*ICspAlgorithm) HRESULT {
                return @as(*const ICspStatus.VTable, @ptrCast(self.vtable)).get_CspAlgorithm(@as(*const ICspStatus, @ptrCast(self)), pp_value_);
            }
            pub inline fn getCspInformation(self: *const T, pp_value_: ?*?*ICspInformation) HRESULT {
                return @as(*const ICspStatus.VTable, @ptrCast(self.vtable)).get_CspInformation(@as(*const ICspStatus, @ptrCast(self)), pp_value_);
            }
            pub inline fn getEnrollmentStatus(self: *const T, pp_value_: ?*?*IX509EnrollmentStatus) HRESULT {
                return @as(*const ICspStatus.VTable, @ptrCast(self.vtable)).get_EnrollmentStatus(@as(*const ICspStatus, @ptrCast(self)), pp_value_);
            }
            pub inline fn getDisplayName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ICspStatus.VTable, @ptrCast(self.vtable)).get_DisplayName(@as(*const ICspStatus, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICspStatuses_Value = Guid.initString("728ab30a-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICspStatuses = &IID_ICspStatuses_Value;
pub const ICspStatuses = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspStatuses,
            index: i32,
            p_val: ?*?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspStatuses,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspStatuses,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const ICspStatuses,
            p_val: ?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ICspStatuses,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const ICspStatuses,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspStatuses,
            str_csp_name: ?BSTR,
            str_algorithm_name: ?BSTR,
            pp_value: ?*?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByOrdinal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspStatuses,
            ordinal: i32,
            pp_value: ?*?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByOperations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspStatuses,
            str_csp_name: ?BSTR,
            str_algorithm_name: ?BSTR,
            operations: AlgorithmOperationFlags,
            pp_value: ?*?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByProvider: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICspStatuses,
            p_csp_status: ?*ICspStatus,
            pp_value: ?*?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItemByIndex(self: *const T, index_: i32, p_val_: ?*?*ICspStatus) HRESULT {
                return @as(*const ICspStatuses.VTable, @ptrCast(self.vtable)).get_ItemByIndex(@as(*const ICspStatuses, @ptrCast(self)), index_, p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const ICspStatuses.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ICspStatuses, @ptrCast(self)), p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const ICspStatuses.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ICspStatuses, @ptrCast(self)), p_val_);
            }
            pub inline fn add(self: *const T, p_val_: ?*ICspStatus) HRESULT {
                return @as(*const ICspStatuses.VTable, @ptrCast(self.vtable)).Add(@as(*const ICspStatuses, @ptrCast(self)), p_val_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const ICspStatuses.VTable, @ptrCast(self.vtable)).Remove(@as(*const ICspStatuses, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const ICspStatuses.VTable, @ptrCast(self.vtable)).Clear(@as(*const ICspStatuses, @ptrCast(self)));
            }
            pub inline fn getItemByName(self: *const T, str_csp_name_: ?BSTR, str_algorithm_name_: ?BSTR, pp_value_: ?*?*ICspStatus) HRESULT {
                return @as(*const ICspStatuses.VTable, @ptrCast(self.vtable)).get_ItemByName(@as(*const ICspStatuses, @ptrCast(self)), str_csp_name_, str_algorithm_name_, pp_value_);
            }
            pub inline fn getItemByOrdinal(self: *const T, ordinal_: i32, pp_value_: ?*?*ICspStatus) HRESULT {
                return @as(*const ICspStatuses.VTable, @ptrCast(self.vtable)).get_ItemByOrdinal(@as(*const ICspStatuses, @ptrCast(self)), ordinal_, pp_value_);
            }
            pub inline fn getItemByOperations(self: *const T, str_csp_name_: ?BSTR, str_algorithm_name_: ?BSTR, operations_: AlgorithmOperationFlags, pp_value_: ?*?*ICspStatus) HRESULT {
                return @as(*const ICspStatuses.VTable, @ptrCast(self.vtable)).get_ItemByOperations(@as(*const ICspStatuses, @ptrCast(self)), str_csp_name_, str_algorithm_name_, operations_, pp_value_);
            }
            pub inline fn getItemByProvider(self: *const T, p_csp_status_: ?*ICspStatus, pp_value_: ?*?*ICspStatus) HRESULT {
                return @as(*const ICspStatuses.VTable, @ptrCast(self.vtable)).get_ItemByProvider(@as(*const ICspStatuses, @ptrCast(self)), p_csp_status_, pp_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const KeyIdentifierHashAlgorithm = enum(i32) {
    Default = 0,
    Sha1 = 1,
    CapiSha1 = 2,
    Sha256 = 3,
    HPKP = 5,
};
pub const SKIHashDefault = KeyIdentifierHashAlgorithm.Default;
pub const SKIHashSha1 = KeyIdentifierHashAlgorithm.Sha1;
pub const SKIHashCapiSha1 = KeyIdentifierHashAlgorithm.CapiSha1;
pub const SKIHashSha256 = KeyIdentifierHashAlgorithm.Sha256;
pub const SKIHashHPKP = KeyIdentifierHashAlgorithm.HPKP;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509PublicKey_Value = Guid.initString("728ab30b-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509PublicKey = &IID_IX509PublicKey_Value;
pub const IX509PublicKey = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const IX509PublicKey,
            p_object_id: ?*IObjectId,
            str_encoded_key: ?BSTR,
            str_encoded_parameters: ?BSTR,
            encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromEncodedPublicKeyInfo: *const fn (
            self: *const IX509PublicKey,
            str_encoded_public_key_info: ?BSTR,
            encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Algorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PublicKey,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Length: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PublicKey,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncodedKey: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PublicKey,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncodedParameters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PublicKey,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ComputeKeyIdentifier: *const fn (
            self: *const IX509PublicKey,
            algorithm: KeyIdentifierHashAlgorithm,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_object_id_: ?*IObjectId, str_encoded_key_: ?BSTR, str_encoded_parameters_: ?BSTR, encoding_: EncodingType) HRESULT {
                return @as(*const IX509PublicKey.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IX509PublicKey, @ptrCast(self)), p_object_id_, str_encoded_key_, str_encoded_parameters_, encoding_);
            }
            pub inline fn initializeFromEncodedPublicKeyInfo(self: *const T, str_encoded_public_key_info_: ?BSTR, encoding_: EncodingType) HRESULT {
                return @as(*const IX509PublicKey.VTable, @ptrCast(self.vtable)).InitializeFromEncodedPublicKeyInfo(@as(*const IX509PublicKey, @ptrCast(self)), str_encoded_public_key_info_, encoding_);
            }
            pub inline fn getAlgorithm(self: *const T, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const IX509PublicKey.VTable, @ptrCast(self.vtable)).get_Algorithm(@as(*const IX509PublicKey, @ptrCast(self)), pp_value_);
            }
            pub inline fn getLength(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const IX509PublicKey.VTable, @ptrCast(self.vtable)).get_Length(@as(*const IX509PublicKey, @ptrCast(self)), p_value_);
            }
            pub inline fn getEncodedKey(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509PublicKey.VTable, @ptrCast(self.vtable)).get_EncodedKey(@as(*const IX509PublicKey, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn getEncodedParameters(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509PublicKey.VTable, @ptrCast(self.vtable)).get_EncodedParameters(@as(*const IX509PublicKey, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn computeKeyIdentifier(self: *const T, algorithm_: KeyIdentifierHashAlgorithm, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509PublicKey.VTable, @ptrCast(self.vtable)).ComputeKeyIdentifier(@as(*const IX509PublicKey, @ptrCast(self)), algorithm_, encoding_, p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const X509PrivateKeyExportFlags = enum(i32) {
    EXPORT_NONE = 0,
    EXPORT_FLAG = 1,
    PLAINTEXT_EXPORT_FLAG = 2,
    ARCHIVING_FLAG = 4,
    PLAINTEXT_ARCHIVING_FLAG = 8,
};
pub const XCN_NCRYPT_ALLOW_EXPORT_NONE = X509PrivateKeyExportFlags.EXPORT_NONE;
pub const XCN_NCRYPT_ALLOW_EXPORT_FLAG = X509PrivateKeyExportFlags.EXPORT_FLAG;
pub const XCN_NCRYPT_ALLOW_PLAINTEXT_EXPORT_FLAG = X509PrivateKeyExportFlags.PLAINTEXT_EXPORT_FLAG;
pub const XCN_NCRYPT_ALLOW_ARCHIVING_FLAG = X509PrivateKeyExportFlags.ARCHIVING_FLAG;
pub const XCN_NCRYPT_ALLOW_PLAINTEXT_ARCHIVING_FLAG = X509PrivateKeyExportFlags.PLAINTEXT_ARCHIVING_FLAG;

pub const X509PrivateKeyUsageFlags = enum(i32) {
    USAGES_NONE = 0,
    DECRYPT_FLAG = 1,
    SIGNING_FLAG = 2,
    KEY_AGREEMENT_FLAG = 4,
    KEY_IMPORT_FLAG = 8,
    ALL_USAGES = 16777215,
};
pub const XCN_NCRYPT_ALLOW_USAGES_NONE = X509PrivateKeyUsageFlags.USAGES_NONE;
pub const XCN_NCRYPT_ALLOW_DECRYPT_FLAG = X509PrivateKeyUsageFlags.DECRYPT_FLAG;
pub const XCN_NCRYPT_ALLOW_SIGNING_FLAG = X509PrivateKeyUsageFlags.SIGNING_FLAG;
pub const XCN_NCRYPT_ALLOW_KEY_AGREEMENT_FLAG = X509PrivateKeyUsageFlags.KEY_AGREEMENT_FLAG;
pub const XCN_NCRYPT_ALLOW_KEY_IMPORT_FLAG = X509PrivateKeyUsageFlags.KEY_IMPORT_FLAG;
pub const XCN_NCRYPT_ALLOW_ALL_USAGES = X509PrivateKeyUsageFlags.ALL_USAGES;

pub const X509PrivateKeyProtection = enum(i32) {
    NO_PROTECTION_FLAG = 0,
    PROTECT_KEY_FLAG = 1,
    FORCE_HIGH_PROTECTION_FLAG = 2,
    FINGERPRINT_PROTECTION_FLAG = 4,
    APPCONTAINER_ACCESS_MEDIUM_FLAG = 8,
};
pub const XCN_NCRYPT_UI_NO_PROTECTION_FLAG = X509PrivateKeyProtection.NO_PROTECTION_FLAG;
pub const XCN_NCRYPT_UI_PROTECT_KEY_FLAG = X509PrivateKeyProtection.PROTECT_KEY_FLAG;
pub const XCN_NCRYPT_UI_FORCE_HIGH_PROTECTION_FLAG = X509PrivateKeyProtection.FORCE_HIGH_PROTECTION_FLAG;
pub const XCN_NCRYPT_UI_FINGERPRINT_PROTECTION_FLAG = X509PrivateKeyProtection.FINGERPRINT_PROTECTION_FLAG;
pub const XCN_NCRYPT_UI_APPCONTAINER_ACCESS_MEDIUM_FLAG = X509PrivateKeyProtection.APPCONTAINER_ACCESS_MEDIUM_FLAG;

pub const X509PrivateKeyVerify = enum(i32) {
    None = 0,
    Silent = 1,
    SmartCardNone = 2,
    SmartCardSilent = 3,
    AllowUI = 4,
};
pub const VerifyNone = X509PrivateKeyVerify.None;
pub const VerifySilent = X509PrivateKeyVerify.Silent;
pub const VerifySmartCardNone = X509PrivateKeyVerify.SmartCardNone;
pub const VerifySmartCardSilent = X509PrivateKeyVerify.SmartCardSilent;
pub const VerifyAllowUI = X509PrivateKeyVerify.AllowUI;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509PrivateKey_Value = Guid.initString("728ab30c-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509PrivateKey = &IID_IX509PrivateKey_Value;
pub const IX509PrivateKey = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Open: *const fn (
            self: *const IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn (
            self: *const IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Verify: *const fn (
            self: *const IX509PrivateKey,
            verify_type: X509PrivateKeyVerify,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Import: *const fn (
            self: *const IX509PrivateKey,
            str_export_type: ?BSTR,
            str_encoded_key: ?BSTR,
            encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Export: *const fn (
            self: *const IX509PrivateKey,
            str_export_type: ?BSTR,
            encoding: EncodingType,
            pstr_encoded_key: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExportPublicKey: *const fn (
            self: *const IX509PrivateKey,
            pp_public_key: ?*?*IX509PublicKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ContainerName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ContainerName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ContainerNamePrefix: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ContainerNamePrefix: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReaderName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReaderName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CspInformations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            pp_value: ?*?*ICspInformations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CspInformations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*ICspInformations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CspStatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            pp_value: ?*?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CspStatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*ICspStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*X509ProviderType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            value: X509ProviderType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LegacyCsp: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LegacyCsp: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Algorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Algorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeySpec: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*X509KeySpec,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_KeySpec: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            value: X509KeySpec,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Length: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Length: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExportPolicy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*X509PrivateKeyExportFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExportPolicy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            value: X509PrivateKeyExportFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeyUsage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*X509PrivateKeyUsageFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_KeyUsage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            value: X509PrivateKeyUsageFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeyProtection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*X509PrivateKeyProtection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_KeyProtection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            value: X509PrivateKeyProtection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MachineContext: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MachineContext: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SecurityDescriptor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SecurityDescriptor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Certificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Certificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            encoding: EncodingType,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UniqueContainerName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Opened: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DefaultContainer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Existing: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Existing: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Silent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Silent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ParentWindow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ParentWindow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UIContextMessage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UIContextMessage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Pin: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FriendlyName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FriendlyName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn open(self: *const T) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).Open(@as(*const IX509PrivateKey, @ptrCast(self)));
            }
            pub inline fn create(self: *const T) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).Create(@as(*const IX509PrivateKey, @ptrCast(self)));
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).Close(@as(*const IX509PrivateKey, @ptrCast(self)));
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).Delete(@as(*const IX509PrivateKey, @ptrCast(self)));
            }
            pub inline fn verify(self: *const T, verify_type_: X509PrivateKeyVerify) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).Verify(@as(*const IX509PrivateKey, @ptrCast(self)), verify_type_);
            }
            pub inline fn import(self: *const T, str_export_type_: ?BSTR, str_encoded_key_: ?BSTR, encoding_: EncodingType) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).Import(@as(*const IX509PrivateKey, @ptrCast(self)), str_export_type_, str_encoded_key_, encoding_);
            }
            pub inline fn @"export"(self: *const T, str_export_type_: ?BSTR, encoding_: EncodingType, pstr_encoded_key_: ?*?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).Export(@as(*const IX509PrivateKey, @ptrCast(self)), str_export_type_, encoding_, pstr_encoded_key_);
            }
            pub inline fn exportPublicKey(self: *const T, pp_public_key_: ?*?*IX509PublicKey) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).ExportPublicKey(@as(*const IX509PrivateKey, @ptrCast(self)), pp_public_key_);
            }
            pub inline fn getContainerName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_ContainerName(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn putContainerName(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_ContainerName(@as(*const IX509PrivateKey, @ptrCast(self)), value_);
            }
            pub inline fn getContainerNamePrefix(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_ContainerNamePrefix(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn putContainerNamePrefix(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_ContainerNamePrefix(@as(*const IX509PrivateKey, @ptrCast(self)), value_);
            }
            pub inline fn getReaderName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_ReaderName(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn putReaderName(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_ReaderName(@as(*const IX509PrivateKey, @ptrCast(self)), value_);
            }
            pub inline fn getCspInformations(self: *const T, pp_value_: ?*?*ICspInformations) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_CspInformations(@as(*const IX509PrivateKey, @ptrCast(self)), pp_value_);
            }
            pub inline fn putCspInformations(self: *const T, p_value_: ?*ICspInformations) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_CspInformations(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn getCspStatus(self: *const T, pp_value_: ?*?*ICspStatus) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_CspStatus(@as(*const IX509PrivateKey, @ptrCast(self)), pp_value_);
            }
            pub inline fn putCspStatus(self: *const T, p_value_: ?*ICspStatus) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_CspStatus(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn getProviderName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_ProviderName(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn putProviderName(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_ProviderName(@as(*const IX509PrivateKey, @ptrCast(self)), value_);
            }
            pub inline fn getProviderType(self: *const T, p_value_: ?*X509ProviderType) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_ProviderType(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn putProviderType(self: *const T, value_: X509ProviderType) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_ProviderType(@as(*const IX509PrivateKey, @ptrCast(self)), value_);
            }
            pub inline fn getLegacyCsp(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_LegacyCsp(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn putLegacyCsp(self: *const T, value_: i16) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_LegacyCsp(@as(*const IX509PrivateKey, @ptrCast(self)), value_);
            }
            pub inline fn getAlgorithm(self: *const T, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_Algorithm(@as(*const IX509PrivateKey, @ptrCast(self)), pp_value_);
            }
            pub inline fn putAlgorithm(self: *const T, p_value_: ?*IObjectId) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_Algorithm(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn getKeySpec(self: *const T, p_value_: ?*X509KeySpec) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_KeySpec(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn putKeySpec(self: *const T, value_: X509KeySpec) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_KeySpec(@as(*const IX509PrivateKey, @ptrCast(self)), value_);
            }
            pub inline fn getLength(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_Length(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn putLength(self: *const T, value_: i32) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_Length(@as(*const IX509PrivateKey, @ptrCast(self)), value_);
            }
            pub inline fn getExportPolicy(self: *const T, p_value_: ?*X509PrivateKeyExportFlags) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_ExportPolicy(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn putExportPolicy(self: *const T, value_: X509PrivateKeyExportFlags) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_ExportPolicy(@as(*const IX509PrivateKey, @ptrCast(self)), value_);
            }
            pub inline fn getKeyUsage(self: *const T, p_value_: ?*X509PrivateKeyUsageFlags) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_KeyUsage(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn putKeyUsage(self: *const T, value_: X509PrivateKeyUsageFlags) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_KeyUsage(@as(*const IX509PrivateKey, @ptrCast(self)), value_);
            }
            pub inline fn getKeyProtection(self: *const T, p_value_: ?*X509PrivateKeyProtection) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_KeyProtection(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn putKeyProtection(self: *const T, value_: X509PrivateKeyProtection) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_KeyProtection(@as(*const IX509PrivateKey, @ptrCast(self)), value_);
            }
            pub inline fn getMachineContext(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_MachineContext(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn putMachineContext(self: *const T, value_: i16) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_MachineContext(@as(*const IX509PrivateKey, @ptrCast(self)), value_);
            }
            pub inline fn getSecurityDescriptor(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_SecurityDescriptor(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn putSecurityDescriptor(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_SecurityDescriptor(@as(*const IX509PrivateKey, @ptrCast(self)), value_);
            }
            pub inline fn getCertificate(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_Certificate(@as(*const IX509PrivateKey, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn putCertificate(self: *const T, encoding_: EncodingType, value_: ?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_Certificate(@as(*const IX509PrivateKey, @ptrCast(self)), encoding_, value_);
            }
            pub inline fn getUniqueContainerName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_UniqueContainerName(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn getOpened(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_Opened(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn getDefaultContainer(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_DefaultContainer(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn getExisting(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_Existing(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn putExisting(self: *const T, value_: i16) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_Existing(@as(*const IX509PrivateKey, @ptrCast(self)), value_);
            }
            pub inline fn getSilent(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_Silent(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn putSilent(self: *const T, value_: i16) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_Silent(@as(*const IX509PrivateKey, @ptrCast(self)), value_);
            }
            pub inline fn getParentWindow(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_ParentWindow(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn putParentWindow(self: *const T, value_: i32) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_ParentWindow(@as(*const IX509PrivateKey, @ptrCast(self)), value_);
            }
            pub inline fn getUIContextMessage(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_UIContextMessage(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn putUIContextMessage(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_UIContextMessage(@as(*const IX509PrivateKey, @ptrCast(self)), value_);
            }
            pub inline fn putPin(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_Pin(@as(*const IX509PrivateKey, @ptrCast(self)), value_);
            }
            pub inline fn getFriendlyName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_FriendlyName(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn putFriendlyName(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_FriendlyName(@as(*const IX509PrivateKey, @ptrCast(self)), value_);
            }
            pub inline fn getDescription(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IX509PrivateKey, @ptrCast(self)), p_value_);
            }
            pub inline fn putDescription(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IX509PrivateKey.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IX509PrivateKey, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const X509HardwareKeyUsageFlags = enum(i32) {
    PCP_NONE = 0,
    TPM12_PROVIDER = 65536,
    PCP_SIGNATURE_KEY = 1,
    PCP_ENCRYPTION_KEY = 2,
    PCP_GENERIC_KEY = 3,
    PCP_STORAGE_KEY = 4,
    PCP_IDENTITY_KEY = 8,
};
pub const XCN_NCRYPT_PCP_NONE = X509HardwareKeyUsageFlags.PCP_NONE;
pub const XCN_NCRYPT_TPM12_PROVIDER = X509HardwareKeyUsageFlags.TPM12_PROVIDER;
pub const XCN_NCRYPT_PCP_SIGNATURE_KEY = X509HardwareKeyUsageFlags.PCP_SIGNATURE_KEY;
pub const XCN_NCRYPT_PCP_ENCRYPTION_KEY = X509HardwareKeyUsageFlags.PCP_ENCRYPTION_KEY;
pub const XCN_NCRYPT_PCP_GENERIC_KEY = X509HardwareKeyUsageFlags.PCP_GENERIC_KEY;
pub const XCN_NCRYPT_PCP_STORAGE_KEY = X509HardwareKeyUsageFlags.PCP_STORAGE_KEY;
pub const XCN_NCRYPT_PCP_IDENTITY_KEY = X509HardwareKeyUsageFlags.PCP_IDENTITY_KEY;

pub const X509KeyParametersExportType = enum(i32) {
    NONE = 0,
    NAME_FOR_ENCODE_FLAG = 536870912,
    PARAMETERS_FOR_ENCODE_FLAG = 268435456,
};
pub const XCN_CRYPT_OID_USE_CURVE_NONE = X509KeyParametersExportType.NONE;
pub const XCN_CRYPT_OID_USE_CURVE_NAME_FOR_ENCODE_FLAG = X509KeyParametersExportType.NAME_FOR_ENCODE_FLAG;
pub const XCN_CRYPT_OID_USE_CURVE_PARAMETERS_FOR_ENCODE_FLAG = X509KeyParametersExportType.PARAMETERS_FOR_ENCODE_FLAG;

const IID_IX509PrivateKey2_Value = Guid.initString("728ab362-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509PrivateKey2 = &IID_IX509PrivateKey2_Value;
pub const IX509PrivateKey2 = extern struct {
    pub const VTable = extern struct {
        base: IX509PrivateKey.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HardwareKeyUsage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey2,
            p_value: ?*X509HardwareKeyUsageFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HardwareKeyUsage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey2,
            value: X509HardwareKeyUsageFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AlternateStorageLocation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey2,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AlternateStorageLocation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey2,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AlgorithmName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey2,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AlgorithmName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey2,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AlgorithmParameters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey2,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AlgorithmParameters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey2,
            encoding: EncodingType,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ParametersExportType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey2,
            p_value: ?*X509KeyParametersExportType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ParametersExportType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PrivateKey2,
            value: X509KeyParametersExportType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509PrivateKey.MethodMixin(T);
            pub inline fn getHardwareKeyUsage(self: *const T, p_value_: ?*X509HardwareKeyUsageFlags) HRESULT {
                return @as(*const IX509PrivateKey2.VTable, @ptrCast(self.vtable)).get_HardwareKeyUsage(@as(*const IX509PrivateKey2, @ptrCast(self)), p_value_);
            }
            pub inline fn putHardwareKeyUsage(self: *const T, value_: X509HardwareKeyUsageFlags) HRESULT {
                return @as(*const IX509PrivateKey2.VTable, @ptrCast(self.vtable)).put_HardwareKeyUsage(@as(*const IX509PrivateKey2, @ptrCast(self)), value_);
            }
            pub inline fn getAlternateStorageLocation(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509PrivateKey2.VTable, @ptrCast(self.vtable)).get_AlternateStorageLocation(@as(*const IX509PrivateKey2, @ptrCast(self)), p_value_);
            }
            pub inline fn putAlternateStorageLocation(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IX509PrivateKey2.VTable, @ptrCast(self.vtable)).put_AlternateStorageLocation(@as(*const IX509PrivateKey2, @ptrCast(self)), value_);
            }
            pub inline fn getAlgorithmName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509PrivateKey2.VTable, @ptrCast(self.vtable)).get_AlgorithmName(@as(*const IX509PrivateKey2, @ptrCast(self)), p_value_);
            }
            pub inline fn putAlgorithmName(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IX509PrivateKey2.VTable, @ptrCast(self.vtable)).put_AlgorithmName(@as(*const IX509PrivateKey2, @ptrCast(self)), value_);
            }
            pub inline fn getAlgorithmParameters(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509PrivateKey2.VTable, @ptrCast(self.vtable)).get_AlgorithmParameters(@as(*const IX509PrivateKey2, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn putAlgorithmParameters(self: *const T, encoding_: EncodingType, value_: ?BSTR) HRESULT {
                return @as(*const IX509PrivateKey2.VTable, @ptrCast(self.vtable)).put_AlgorithmParameters(@as(*const IX509PrivateKey2, @ptrCast(self)), encoding_, value_);
            }
            pub inline fn getParametersExportType(self: *const T, p_value_: ?*X509KeyParametersExportType) HRESULT {
                return @as(*const IX509PrivateKey2.VTable, @ptrCast(self.vtable)).get_ParametersExportType(@as(*const IX509PrivateKey2, @ptrCast(self)), p_value_);
            }
            pub inline fn putParametersExportType(self: *const T, value_: X509KeyParametersExportType) HRESULT {
                return @as(*const IX509PrivateKey2.VTable, @ptrCast(self.vtable)).put_ParametersExportType(@as(*const IX509PrivateKey2, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509EndorsementKey_Value = Guid.initString("b11cd855-f4c4-4fc6-b710-4422237f09e9");
pub const IID_IX509EndorsementKey = &IID_IX509EndorsementKey_Value;
pub const IX509EndorsementKey = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509EndorsementKey,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509EndorsementKey,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Length: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509EndorsementKey,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Opened: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509EndorsementKey,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCertificate: *const fn (
            self: *const IX509EndorsementKey,
            encoding: EncodingType,
            str_certificate: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveCertificate: *const fn (
            self: *const IX509EndorsementKey,
            encoding: EncodingType,
            str_certificate: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateByIndex: *const fn (
            self: *const IX509EndorsementKey,
            manufacturer_only: i16,
            dw_index: i32,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificateCount: *const fn (
            self: *const IX509EndorsementKey,
            manufacturer_only: i16,
            p_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExportPublicKey: *const fn (
            self: *const IX509EndorsementKey,
            pp_public_key: ?*?*IX509PublicKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: *const fn (
            self: *const IX509EndorsementKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IX509EndorsementKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getProviderName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509EndorsementKey.VTable, @ptrCast(self.vtable)).get_ProviderName(@as(*const IX509EndorsementKey, @ptrCast(self)), p_value_);
            }
            pub inline fn putProviderName(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IX509EndorsementKey.VTable, @ptrCast(self.vtable)).put_ProviderName(@as(*const IX509EndorsementKey, @ptrCast(self)), value_);
            }
            pub inline fn getLength(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const IX509EndorsementKey.VTable, @ptrCast(self.vtable)).get_Length(@as(*const IX509EndorsementKey, @ptrCast(self)), p_value_);
            }
            pub inline fn getOpened(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509EndorsementKey.VTable, @ptrCast(self.vtable)).get_Opened(@as(*const IX509EndorsementKey, @ptrCast(self)), p_value_);
            }
            pub inline fn addCertificate(self: *const T, encoding_: EncodingType, str_certificate_: ?BSTR) HRESULT {
                return @as(*const IX509EndorsementKey.VTable, @ptrCast(self.vtable)).AddCertificate(@as(*const IX509EndorsementKey, @ptrCast(self)), encoding_, str_certificate_);
            }
            pub inline fn removeCertificate(self: *const T, encoding_: EncodingType, str_certificate_: ?BSTR) HRESULT {
                return @as(*const IX509EndorsementKey.VTable, @ptrCast(self.vtable)).RemoveCertificate(@as(*const IX509EndorsementKey, @ptrCast(self)), encoding_, str_certificate_);
            }
            pub inline fn getCertificateByIndex(self: *const T, manufacturer_only_: i16, dw_index_: i32, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509EndorsementKey.VTable, @ptrCast(self.vtable)).GetCertificateByIndex(@as(*const IX509EndorsementKey, @ptrCast(self)), manufacturer_only_, dw_index_, encoding_, p_value_);
            }
            pub inline fn getCertificateCount(self: *const T, manufacturer_only_: i16, p_count_: ?*i32) HRESULT {
                return @as(*const IX509EndorsementKey.VTable, @ptrCast(self.vtable)).GetCertificateCount(@as(*const IX509EndorsementKey, @ptrCast(self)), manufacturer_only_, p_count_);
            }
            pub inline fn exportPublicKey(self: *const T, pp_public_key_: ?*?*IX509PublicKey) HRESULT {
                return @as(*const IX509EndorsementKey.VTable, @ptrCast(self.vtable)).ExportPublicKey(@as(*const IX509EndorsementKey, @ptrCast(self)), pp_public_key_);
            }
            pub inline fn open(self: *const T) HRESULT {
                return @as(*const IX509EndorsementKey.VTable, @ptrCast(self.vtable)).Open(@as(*const IX509EndorsementKey, @ptrCast(self)));
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IX509EndorsementKey.VTable, @ptrCast(self.vtable)).Close(@as(*const IX509EndorsementKey, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509Extension_Value = Guid.initString("728ab30d-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509Extension = &IID_IX509Extension_Value;
pub const IX509Extension = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const IX509Extension,
            p_object_id: ?*IObjectId,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Extension,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RawData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Extension,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Critical: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Extension,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Critical: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Extension,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_object_id_: ?*IObjectId, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const IX509Extension.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IX509Extension, @ptrCast(self)), p_object_id_, encoding_, str_encoded_data_);
            }
            pub inline fn getObjectId(self: *const T, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const IX509Extension.VTable, @ptrCast(self.vtable)).get_ObjectId(@as(*const IX509Extension, @ptrCast(self)), pp_value_);
            }
            pub inline fn getRawData(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509Extension.VTable, @ptrCast(self.vtable)).get_RawData(@as(*const IX509Extension, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn getCritical(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509Extension.VTable, @ptrCast(self.vtable)).get_Critical(@as(*const IX509Extension, @ptrCast(self)), p_value_);
            }
            pub inline fn putCritical(self: *const T, value_: i16) HRESULT {
                return @as(*const IX509Extension.VTable, @ptrCast(self.vtable)).put_Critical(@as(*const IX509Extension, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509Extensions_Value = Guid.initString("728ab30e-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509Extensions = &IID_IX509Extensions_Value;
pub const IX509Extensions = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Extensions,
            index: i32,
            p_val: ?*?*IX509Extension,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Extensions,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Extensions,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IX509Extensions,
            p_val: ?*IX509Extension,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IX509Extensions,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IndexByObjectId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Extensions,
            p_object_id: ?*IObjectId,
            p_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: *const fn (
            self: *const IX509Extensions,
            p_value: ?*IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItemByIndex(self: *const T, index_: i32, p_val_: ?*?*IX509Extension) HRESULT {
                return @as(*const IX509Extensions.VTable, @ptrCast(self.vtable)).get_ItemByIndex(@as(*const IX509Extensions, @ptrCast(self)), index_, p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IX509Extensions.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IX509Extensions, @ptrCast(self)), p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const IX509Extensions.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IX509Extensions, @ptrCast(self)), p_val_);
            }
            pub inline fn add(self: *const T, p_val_: ?*IX509Extension) HRESULT {
                return @as(*const IX509Extensions.VTable, @ptrCast(self.vtable)).Add(@as(*const IX509Extensions, @ptrCast(self)), p_val_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const IX509Extensions.VTable, @ptrCast(self.vtable)).Remove(@as(*const IX509Extensions, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IX509Extensions.VTable, @ptrCast(self.vtable)).Clear(@as(*const IX509Extensions, @ptrCast(self)));
            }
            pub inline fn getIndexByObjectId(self: *const T, p_object_id_: ?*IObjectId, p_index_: ?*i32) HRESULT {
                return @as(*const IX509Extensions.VTable, @ptrCast(self.vtable)).get_IndexByObjectId(@as(*const IX509Extensions, @ptrCast(self)), p_object_id_, p_index_);
            }
            pub inline fn addRange(self: *const T, p_value_: ?*IX509Extensions) HRESULT {
                return @as(*const IX509Extensions.VTable, @ptrCast(self.vtable)).AddRange(@as(*const IX509Extensions, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const X509KeyUsageFlags = enum(i32) {
    NO_KEY_USAGE = 0,
    DIGITAL_SIGNATURE_KEY_USAGE = 128,
    NON_REPUDIATION_KEY_USAGE = 64,
    KEY_ENCIPHERMENT_KEY_USAGE = 32,
    DATA_ENCIPHERMENT_KEY_USAGE = 16,
    KEY_AGREEMENT_KEY_USAGE = 8,
    KEY_CERT_SIGN_KEY_USAGE = 4,
    OFFLINE_CRL_SIGN_KEY_USAGE = 2,
    // CRL_SIGN_KEY_USAGE = 2, this enum value conflicts with OFFLINE_CRL_SIGN_KEY_USAGE
    ENCIPHER_ONLY_KEY_USAGE = 1,
    DECIPHER_ONLY_KEY_USAGE = 32768,
};
pub const XCN_CERT_NO_KEY_USAGE = X509KeyUsageFlags.NO_KEY_USAGE;
pub const XCN_CERT_DIGITAL_SIGNATURE_KEY_USAGE = X509KeyUsageFlags.DIGITAL_SIGNATURE_KEY_USAGE;
pub const XCN_CERT_NON_REPUDIATION_KEY_USAGE = X509KeyUsageFlags.NON_REPUDIATION_KEY_USAGE;
pub const XCN_CERT_KEY_ENCIPHERMENT_KEY_USAGE = X509KeyUsageFlags.KEY_ENCIPHERMENT_KEY_USAGE;
pub const XCN_CERT_DATA_ENCIPHERMENT_KEY_USAGE = X509KeyUsageFlags.DATA_ENCIPHERMENT_KEY_USAGE;
pub const XCN_CERT_KEY_AGREEMENT_KEY_USAGE = X509KeyUsageFlags.KEY_AGREEMENT_KEY_USAGE;
pub const XCN_CERT_KEY_CERT_SIGN_KEY_USAGE = X509KeyUsageFlags.KEY_CERT_SIGN_KEY_USAGE;
pub const XCN_CERT_OFFLINE_CRL_SIGN_KEY_USAGE = X509KeyUsageFlags.OFFLINE_CRL_SIGN_KEY_USAGE;
pub const XCN_CERT_CRL_SIGN_KEY_USAGE = X509KeyUsageFlags.OFFLINE_CRL_SIGN_KEY_USAGE;
pub const XCN_CERT_ENCIPHER_ONLY_KEY_USAGE = X509KeyUsageFlags.ENCIPHER_ONLY_KEY_USAGE;
pub const XCN_CERT_DECIPHER_ONLY_KEY_USAGE = X509KeyUsageFlags.DECIPHER_ONLY_KEY_USAGE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionKeyUsage_Value = Guid.initString("728ab30f-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionKeyUsage = &IID_IX509ExtensionKeyUsage_Value;
pub const IX509ExtensionKeyUsage = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn (
            self: *const IX509ExtensionKeyUsage,
            usage_flags: X509KeyUsageFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509ExtensionKeyUsage,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeyUsage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509ExtensionKeyUsage,
            p_value: ?*X509KeyUsageFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509Extension.MethodMixin(T);
            pub inline fn initializeEncode(self: *const T, usage_flags_: X509KeyUsageFlags) HRESULT {
                return @as(*const IX509ExtensionKeyUsage.VTable, @ptrCast(self.vtable)).InitializeEncode(@as(*const IX509ExtensionKeyUsage, @ptrCast(self)), usage_flags_);
            }
            pub inline fn initializeDecode(self: *const T, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const IX509ExtensionKeyUsage.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509ExtensionKeyUsage, @ptrCast(self)), encoding_, str_encoded_data_);
            }
            pub inline fn getKeyUsage(self: *const T, p_value_: ?*X509KeyUsageFlags) HRESULT {
                return @as(*const IX509ExtensionKeyUsage.VTable, @ptrCast(self.vtable)).get_KeyUsage(@as(*const IX509ExtensionKeyUsage, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionEnhancedKeyUsage_Value = Guid.initString("728ab310-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionEnhancedKeyUsage = &IID_IX509ExtensionEnhancedKeyUsage_Value;
pub const IX509ExtensionEnhancedKeyUsage = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn (
            self: *const IX509ExtensionEnhancedKeyUsage,
            p_value: ?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509ExtensionEnhancedKeyUsage,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnhancedKeyUsage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509ExtensionEnhancedKeyUsage,
            pp_value: ?*?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509Extension.MethodMixin(T);
            pub inline fn initializeEncode(self: *const T, p_value_: ?*IObjectIds) HRESULT {
                return @as(*const IX509ExtensionEnhancedKeyUsage.VTable, @ptrCast(self.vtable)).InitializeEncode(@as(*const IX509ExtensionEnhancedKeyUsage, @ptrCast(self)), p_value_);
            }
            pub inline fn initializeDecode(self: *const T, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const IX509ExtensionEnhancedKeyUsage.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509ExtensionEnhancedKeyUsage, @ptrCast(self)), encoding_, str_encoded_data_);
            }
            pub inline fn getEnhancedKeyUsage(self: *const T, pp_value_: ?*?*IObjectIds) HRESULT {
                return @as(*const IX509ExtensionEnhancedKeyUsage.VTable, @ptrCast(self.vtable)).get_EnhancedKeyUsage(@as(*const IX509ExtensionEnhancedKeyUsage, @ptrCast(self)), pp_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionTemplateName_Value = Guid.initString("728ab311-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionTemplateName = &IID_IX509ExtensionTemplateName_Value;
pub const IX509ExtensionTemplateName = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn (
            self: *const IX509ExtensionTemplateName,
            str_template_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509ExtensionTemplateName,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TemplateName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509ExtensionTemplateName,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509Extension.MethodMixin(T);
            pub inline fn initializeEncode(self: *const T, str_template_name_: ?BSTR) HRESULT {
                return @as(*const IX509ExtensionTemplateName.VTable, @ptrCast(self.vtable)).InitializeEncode(@as(*const IX509ExtensionTemplateName, @ptrCast(self)), str_template_name_);
            }
            pub inline fn initializeDecode(self: *const T, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const IX509ExtensionTemplateName.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509ExtensionTemplateName, @ptrCast(self)), encoding_, str_encoded_data_);
            }
            pub inline fn getTemplateName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509ExtensionTemplateName.VTable, @ptrCast(self.vtable)).get_TemplateName(@as(*const IX509ExtensionTemplateName, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionTemplate_Value = Guid.initString("728ab312-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionTemplate = &IID_IX509ExtensionTemplate_Value;
pub const IX509ExtensionTemplate = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn (
            self: *const IX509ExtensionTemplate,
            p_template_oid: ?*IObjectId,
            major_version: i32,
            minor_version: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509ExtensionTemplate,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TemplateOid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509ExtensionTemplate,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MajorVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509ExtensionTemplate,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinorVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509ExtensionTemplate,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509Extension.MethodMixin(T);
            pub inline fn initializeEncode(self: *const T, p_template_oid_: ?*IObjectId, major_version_: i32, minor_version_: i32) HRESULT {
                return @as(*const IX509ExtensionTemplate.VTable, @ptrCast(self.vtable)).InitializeEncode(@as(*const IX509ExtensionTemplate, @ptrCast(self)), p_template_oid_, major_version_, minor_version_);
            }
            pub inline fn initializeDecode(self: *const T, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const IX509ExtensionTemplate.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509ExtensionTemplate, @ptrCast(self)), encoding_, str_encoded_data_);
            }
            pub inline fn getTemplateOid(self: *const T, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const IX509ExtensionTemplate.VTable, @ptrCast(self.vtable)).get_TemplateOid(@as(*const IX509ExtensionTemplate, @ptrCast(self)), pp_value_);
            }
            pub inline fn getMajorVersion(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const IX509ExtensionTemplate.VTable, @ptrCast(self.vtable)).get_MajorVersion(@as(*const IX509ExtensionTemplate, @ptrCast(self)), p_value_);
            }
            pub inline fn getMinorVersion(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const IX509ExtensionTemplate.VTable, @ptrCast(self.vtable)).get_MinorVersion(@as(*const IX509ExtensionTemplate, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const AlternativeNameType = enum(i32) {
    UNKNOWN = 0,
    OTHER_NAME = 1,
    RFC822_NAME = 2,
    DNS_NAME = 3,
    X400_ADDRESS = 4,
    DIRECTORY_NAME = 5,
    EDI_PARTY_NAME = 6,
    URL = 7,
    IP_ADDRESS = 8,
    REGISTERED_ID = 9,
    GUID = 10,
    USER_PRINCIPLE_NAME = 11,
};
pub const XCN_CERT_ALT_NAME_UNKNOWN = AlternativeNameType.UNKNOWN;
pub const XCN_CERT_ALT_NAME_OTHER_NAME = AlternativeNameType.OTHER_NAME;
pub const XCN_CERT_ALT_NAME_RFC822_NAME = AlternativeNameType.RFC822_NAME;
pub const XCN_CERT_ALT_NAME_DNS_NAME = AlternativeNameType.DNS_NAME;
pub const XCN_CERT_ALT_NAME_X400_ADDRESS = AlternativeNameType.X400_ADDRESS;
pub const XCN_CERT_ALT_NAME_DIRECTORY_NAME = AlternativeNameType.DIRECTORY_NAME;
pub const XCN_CERT_ALT_NAME_EDI_PARTY_NAME = AlternativeNameType.EDI_PARTY_NAME;
pub const XCN_CERT_ALT_NAME_URL = AlternativeNameType.URL;
pub const XCN_CERT_ALT_NAME_IP_ADDRESS = AlternativeNameType.IP_ADDRESS;
pub const XCN_CERT_ALT_NAME_REGISTERED_ID = AlternativeNameType.REGISTERED_ID;
pub const XCN_CERT_ALT_NAME_GUID = AlternativeNameType.GUID;
pub const XCN_CERT_ALT_NAME_USER_PRINCIPLE_NAME = AlternativeNameType.USER_PRINCIPLE_NAME;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAlternativeName_Value = Guid.initString("728ab313-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IAlternativeName = &IID_IAlternativeName_Value;
pub const IAlternativeName = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InitializeFromString: *const fn (
            self: *const IAlternativeName,
            type: AlternativeNameType,
            str_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromRawData: *const fn (
            self: *const IAlternativeName,
            type: AlternativeNameType,
            encoding: EncodingType,
            str_raw_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromOtherName: *const fn (
            self: *const IAlternativeName,
            p_object_id: ?*IObjectId,
            encoding: EncodingType,
            str_raw_data: ?BSTR,
            to_be_wrapped: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlternativeName,
            p_value: ?*AlternativeNameType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StrValue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlternativeName,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlternativeName,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RawData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlternativeName,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initializeFromString(self: *const T, type_: AlternativeNameType, str_value_: ?BSTR) HRESULT {
                return @as(*const IAlternativeName.VTable, @ptrCast(self.vtable)).InitializeFromString(@as(*const IAlternativeName, @ptrCast(self)), type_, str_value_);
            }
            pub inline fn initializeFromRawData(self: *const T, type_: AlternativeNameType, encoding_: EncodingType, str_raw_data_: ?BSTR) HRESULT {
                return @as(*const IAlternativeName.VTable, @ptrCast(self.vtable)).InitializeFromRawData(@as(*const IAlternativeName, @ptrCast(self)), type_, encoding_, str_raw_data_);
            }
            pub inline fn initializeFromOtherName(self: *const T, p_object_id_: ?*IObjectId, encoding_: EncodingType, str_raw_data_: ?BSTR, to_be_wrapped_: i16) HRESULT {
                return @as(*const IAlternativeName.VTable, @ptrCast(self.vtable)).InitializeFromOtherName(@as(*const IAlternativeName, @ptrCast(self)), p_object_id_, encoding_, str_raw_data_, to_be_wrapped_);
            }
            pub inline fn getType(self: *const T, p_value_: ?*AlternativeNameType) HRESULT {
                return @as(*const IAlternativeName.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IAlternativeName, @ptrCast(self)), p_value_);
            }
            pub inline fn getStrValue(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IAlternativeName.VTable, @ptrCast(self.vtable)).get_StrValue(@as(*const IAlternativeName, @ptrCast(self)), p_value_);
            }
            pub inline fn getObjectId(self: *const T, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const IAlternativeName.VTable, @ptrCast(self.vtable)).get_ObjectId(@as(*const IAlternativeName, @ptrCast(self)), pp_value_);
            }
            pub inline fn getRawData(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IAlternativeName.VTable, @ptrCast(self.vtable)).get_RawData(@as(*const IAlternativeName, @ptrCast(self)), encoding_, p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAlternativeNames_Value = Guid.initString("728ab314-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IAlternativeNames = &IID_IAlternativeNames_Value;
pub const IAlternativeNames = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlternativeNames,
            index: i32,
            p_val: ?*?*IAlternativeName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlternativeNames,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAlternativeNames,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IAlternativeNames,
            p_val: ?*IAlternativeName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IAlternativeNames,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IAlternativeNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItemByIndex(self: *const T, index_: i32, p_val_: ?*?*IAlternativeName) HRESULT {
                return @as(*const IAlternativeNames.VTable, @ptrCast(self.vtable)).get_ItemByIndex(@as(*const IAlternativeNames, @ptrCast(self)), index_, p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IAlternativeNames.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IAlternativeNames, @ptrCast(self)), p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const IAlternativeNames.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IAlternativeNames, @ptrCast(self)), p_val_);
            }
            pub inline fn add(self: *const T, p_val_: ?*IAlternativeName) HRESULT {
                return @as(*const IAlternativeNames.VTable, @ptrCast(self.vtable)).Add(@as(*const IAlternativeNames, @ptrCast(self)), p_val_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const IAlternativeNames.VTable, @ptrCast(self.vtable)).Remove(@as(*const IAlternativeNames, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IAlternativeNames.VTable, @ptrCast(self.vtable)).Clear(@as(*const IAlternativeNames, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionAlternativeNames_Value = Guid.initString("728ab315-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionAlternativeNames = &IID_IX509ExtensionAlternativeNames_Value;
pub const IX509ExtensionAlternativeNames = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn (
            self: *const IX509ExtensionAlternativeNames,
            p_value: ?*IAlternativeNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509ExtensionAlternativeNames,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AlternativeNames: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509ExtensionAlternativeNames,
            pp_value: ?*?*IAlternativeNames,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509Extension.MethodMixin(T);
            pub inline fn initializeEncode(self: *const T, p_value_: ?*IAlternativeNames) HRESULT {
                return @as(*const IX509ExtensionAlternativeNames.VTable, @ptrCast(self.vtable)).InitializeEncode(@as(*const IX509ExtensionAlternativeNames, @ptrCast(self)), p_value_);
            }
            pub inline fn initializeDecode(self: *const T, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const IX509ExtensionAlternativeNames.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509ExtensionAlternativeNames, @ptrCast(self)), encoding_, str_encoded_data_);
            }
            pub inline fn getAlternativeNames(self: *const T, pp_value_: ?*?*IAlternativeNames) HRESULT {
                return @as(*const IX509ExtensionAlternativeNames.VTable, @ptrCast(self.vtable)).get_AlternativeNames(@as(*const IX509ExtensionAlternativeNames, @ptrCast(self)), pp_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionBasicConstraints_Value = Guid.initString("728ab316-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionBasicConstraints = &IID_IX509ExtensionBasicConstraints_Value;
pub const IX509ExtensionBasicConstraints = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn (
            self: *const IX509ExtensionBasicConstraints,
            is_c_a: i16,
            path_len_constraint: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509ExtensionBasicConstraints,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsCA: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509ExtensionBasicConstraints,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PathLenConstraint: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509ExtensionBasicConstraints,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509Extension.MethodMixin(T);
            pub inline fn initializeEncode(self: *const T, is_c_a_: i16, path_len_constraint_: i32) HRESULT {
                return @as(*const IX509ExtensionBasicConstraints.VTable, @ptrCast(self.vtable)).InitializeEncode(@as(*const IX509ExtensionBasicConstraints, @ptrCast(self)), is_c_a_, path_len_constraint_);
            }
            pub inline fn initializeDecode(self: *const T, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const IX509ExtensionBasicConstraints.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509ExtensionBasicConstraints, @ptrCast(self)), encoding_, str_encoded_data_);
            }
            pub inline fn getIsCA(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509ExtensionBasicConstraints.VTable, @ptrCast(self.vtable)).get_IsCA(@as(*const IX509ExtensionBasicConstraints, @ptrCast(self)), p_value_);
            }
            pub inline fn getPathLenConstraint(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const IX509ExtensionBasicConstraints.VTable, @ptrCast(self.vtable)).get_PathLenConstraint(@as(*const IX509ExtensionBasicConstraints, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionSubjectKeyIdentifier_Value = Guid.initString("728ab317-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionSubjectKeyIdentifier = &IID_IX509ExtensionSubjectKeyIdentifier_Value;
pub const IX509ExtensionSubjectKeyIdentifier = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn (
            self: *const IX509ExtensionSubjectKeyIdentifier,
            encoding: EncodingType,
            str_key_identifier: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509ExtensionSubjectKeyIdentifier,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubjectKeyIdentifier: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509ExtensionSubjectKeyIdentifier,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509Extension.MethodMixin(T);
            pub inline fn initializeEncode(self: *const T, encoding_: EncodingType, str_key_identifier_: ?BSTR) HRESULT {
                return @as(*const IX509ExtensionSubjectKeyIdentifier.VTable, @ptrCast(self.vtable)).InitializeEncode(@as(*const IX509ExtensionSubjectKeyIdentifier, @ptrCast(self)), encoding_, str_key_identifier_);
            }
            pub inline fn initializeDecode(self: *const T, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const IX509ExtensionSubjectKeyIdentifier.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509ExtensionSubjectKeyIdentifier, @ptrCast(self)), encoding_, str_encoded_data_);
            }
            pub inline fn getSubjectKeyIdentifier(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509ExtensionSubjectKeyIdentifier.VTable, @ptrCast(self.vtable)).get_SubjectKeyIdentifier(@as(*const IX509ExtensionSubjectKeyIdentifier, @ptrCast(self)), encoding_, p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionAuthorityKeyIdentifier_Value = Guid.initString("728ab318-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionAuthorityKeyIdentifier = &IID_IX509ExtensionAuthorityKeyIdentifier_Value;
pub const IX509ExtensionAuthorityKeyIdentifier = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn (
            self: *const IX509ExtensionAuthorityKeyIdentifier,
            encoding: EncodingType,
            str_key_identifier: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509ExtensionAuthorityKeyIdentifier,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthorityKeyIdentifier: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509ExtensionAuthorityKeyIdentifier,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509Extension.MethodMixin(T);
            pub inline fn initializeEncode(self: *const T, encoding_: EncodingType, str_key_identifier_: ?BSTR) HRESULT {
                return @as(*const IX509ExtensionAuthorityKeyIdentifier.VTable, @ptrCast(self.vtable)).InitializeEncode(@as(*const IX509ExtensionAuthorityKeyIdentifier, @ptrCast(self)), encoding_, str_key_identifier_);
            }
            pub inline fn initializeDecode(self: *const T, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const IX509ExtensionAuthorityKeyIdentifier.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509ExtensionAuthorityKeyIdentifier, @ptrCast(self)), encoding_, str_encoded_data_);
            }
            pub inline fn getAuthorityKeyIdentifier(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509ExtensionAuthorityKeyIdentifier.VTable, @ptrCast(self.vtable)).get_AuthorityKeyIdentifier(@as(*const IX509ExtensionAuthorityKeyIdentifier, @ptrCast(self)), encoding_, p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISmimeCapability_Value = Guid.initString("728ab319-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ISmimeCapability = &IID_ISmimeCapability_Value;
pub const ISmimeCapability = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const ISmimeCapability,
            p_object_id: ?*IObjectId,
            bit_count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISmimeCapability,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BitCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISmimeCapability,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_object_id_: ?*IObjectId, bit_count_: i32) HRESULT {
                return @as(*const ISmimeCapability.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ISmimeCapability, @ptrCast(self)), p_object_id_, bit_count_);
            }
            pub inline fn getObjectId(self: *const T, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const ISmimeCapability.VTable, @ptrCast(self.vtable)).get_ObjectId(@as(*const ISmimeCapability, @ptrCast(self)), pp_value_);
            }
            pub inline fn getBitCount(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const ISmimeCapability.VTable, @ptrCast(self.vtable)).get_BitCount(@as(*const ISmimeCapability, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISmimeCapabilities_Value = Guid.initString("728ab31a-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ISmimeCapabilities = &IID_ISmimeCapabilities_Value;
pub const ISmimeCapabilities = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISmimeCapabilities,
            index: i32,
            p_val: ?*?*ISmimeCapability,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISmimeCapabilities,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISmimeCapabilities,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const ISmimeCapabilities,
            p_val: ?*ISmimeCapability,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ISmimeCapabilities,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const ISmimeCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFromCsp: *const fn (
            self: *const ISmimeCapabilities,
            p_value: ?*ICspInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAvailableSmimeCapabilities: *const fn (
            self: *const ISmimeCapabilities,
            machine_context: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItemByIndex(self: *const T, index_: i32, p_val_: ?*?*ISmimeCapability) HRESULT {
                return @as(*const ISmimeCapabilities.VTable, @ptrCast(self.vtable)).get_ItemByIndex(@as(*const ISmimeCapabilities, @ptrCast(self)), index_, p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const ISmimeCapabilities.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ISmimeCapabilities, @ptrCast(self)), p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const ISmimeCapabilities.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ISmimeCapabilities, @ptrCast(self)), p_val_);
            }
            pub inline fn add(self: *const T, p_val_: ?*ISmimeCapability) HRESULT {
                return @as(*const ISmimeCapabilities.VTable, @ptrCast(self.vtable)).Add(@as(*const ISmimeCapabilities, @ptrCast(self)), p_val_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const ISmimeCapabilities.VTable, @ptrCast(self.vtable)).Remove(@as(*const ISmimeCapabilities, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const ISmimeCapabilities.VTable, @ptrCast(self.vtable)).Clear(@as(*const ISmimeCapabilities, @ptrCast(self)));
            }
            pub inline fn addFromCsp(self: *const T, p_value_: ?*ICspInformation) HRESULT {
                return @as(*const ISmimeCapabilities.VTable, @ptrCast(self.vtable)).AddFromCsp(@as(*const ISmimeCapabilities, @ptrCast(self)), p_value_);
            }
            pub inline fn addAvailableSmimeCapabilities(self: *const T, machine_context_: i16) HRESULT {
                return @as(*const ISmimeCapabilities.VTable, @ptrCast(self.vtable)).AddAvailableSmimeCapabilities(@as(*const ISmimeCapabilities, @ptrCast(self)), machine_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionSmimeCapabilities_Value = Guid.initString("728ab31b-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionSmimeCapabilities = &IID_IX509ExtensionSmimeCapabilities_Value;
pub const IX509ExtensionSmimeCapabilities = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn (
            self: *const IX509ExtensionSmimeCapabilities,
            p_value: ?*ISmimeCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509ExtensionSmimeCapabilities,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SmimeCapabilities: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509ExtensionSmimeCapabilities,
            pp_value: ?*?*ISmimeCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509Extension.MethodMixin(T);
            pub inline fn initializeEncode(self: *const T, p_value_: ?*ISmimeCapabilities) HRESULT {
                return @as(*const IX509ExtensionSmimeCapabilities.VTable, @ptrCast(self.vtable)).InitializeEncode(@as(*const IX509ExtensionSmimeCapabilities, @ptrCast(self)), p_value_);
            }
            pub inline fn initializeDecode(self: *const T, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const IX509ExtensionSmimeCapabilities.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509ExtensionSmimeCapabilities, @ptrCast(self)), encoding_, str_encoded_data_);
            }
            pub inline fn getSmimeCapabilities(self: *const T, pp_value_: ?*?*ISmimeCapabilities) HRESULT {
                return @as(*const IX509ExtensionSmimeCapabilities.VTable, @ptrCast(self.vtable)).get_SmimeCapabilities(@as(*const IX509ExtensionSmimeCapabilities, @ptrCast(self)), pp_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PolicyQualifierType = enum(i32) {
    Unknown = 0,
    Url = 1,
    UserNotice = 2,
    Flags = 3,
};
pub const PolicyQualifierTypeUnknown = PolicyQualifierType.Unknown;
pub const PolicyQualifierTypeUrl = PolicyQualifierType.Url;
pub const PolicyQualifierTypeUserNotice = PolicyQualifierType.UserNotice;
pub const PolicyQualifierTypeFlags = PolicyQualifierType.Flags;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPolicyQualifier_Value = Guid.initString("728ab31c-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IPolicyQualifier = &IID_IPolicyQualifier_Value;
pub const IPolicyQualifier = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InitializeEncode: *const fn (
            self: *const IPolicyQualifier,
            str_qualifier: ?BSTR,
            type: PolicyQualifierType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPolicyQualifier,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Qualifier: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPolicyQualifier,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPolicyQualifier,
            p_value: ?*PolicyQualifierType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RawData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPolicyQualifier,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initializeEncode(self: *const T, str_qualifier_: ?BSTR, type_: PolicyQualifierType) HRESULT {
                return @as(*const IPolicyQualifier.VTable, @ptrCast(self.vtable)).InitializeEncode(@as(*const IPolicyQualifier, @ptrCast(self)), str_qualifier_, type_);
            }
            pub inline fn getObjectId(self: *const T, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const IPolicyQualifier.VTable, @ptrCast(self.vtable)).get_ObjectId(@as(*const IPolicyQualifier, @ptrCast(self)), pp_value_);
            }
            pub inline fn getQualifier(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IPolicyQualifier.VTable, @ptrCast(self.vtable)).get_Qualifier(@as(*const IPolicyQualifier, @ptrCast(self)), p_value_);
            }
            pub inline fn getType(self: *const T, p_value_: ?*PolicyQualifierType) HRESULT {
                return @as(*const IPolicyQualifier.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IPolicyQualifier, @ptrCast(self)), p_value_);
            }
            pub inline fn getRawData(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IPolicyQualifier.VTable, @ptrCast(self.vtable)).get_RawData(@as(*const IPolicyQualifier, @ptrCast(self)), encoding_, p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPolicyQualifiers_Value = Guid.initString("728ab31d-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IPolicyQualifiers = &IID_IPolicyQualifiers_Value;
pub const IPolicyQualifiers = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPolicyQualifiers,
            index: i32,
            p_val: ?*?*IPolicyQualifier,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPolicyQualifiers,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPolicyQualifiers,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IPolicyQualifiers,
            p_val: ?*IPolicyQualifier,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IPolicyQualifiers,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IPolicyQualifiers,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItemByIndex(self: *const T, index_: i32, p_val_: ?*?*IPolicyQualifier) HRESULT {
                return @as(*const IPolicyQualifiers.VTable, @ptrCast(self.vtable)).get_ItemByIndex(@as(*const IPolicyQualifiers, @ptrCast(self)), index_, p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IPolicyQualifiers.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IPolicyQualifiers, @ptrCast(self)), p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const IPolicyQualifiers.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IPolicyQualifiers, @ptrCast(self)), p_val_);
            }
            pub inline fn add(self: *const T, p_val_: ?*IPolicyQualifier) HRESULT {
                return @as(*const IPolicyQualifiers.VTable, @ptrCast(self.vtable)).Add(@as(*const IPolicyQualifiers, @ptrCast(self)), p_val_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const IPolicyQualifiers.VTable, @ptrCast(self.vtable)).Remove(@as(*const IPolicyQualifiers, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IPolicyQualifiers.VTable, @ptrCast(self.vtable)).Clear(@as(*const IPolicyQualifiers, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertificatePolicy_Value = Guid.initString("728ab31e-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertificatePolicy = &IID_ICertificatePolicy_Value;
pub const ICertificatePolicy = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const ICertificatePolicy,
            p_value: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertificatePolicy,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyQualifiers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertificatePolicy,
            pp_value: ?*?*IPolicyQualifiers,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_value_: ?*IObjectId) HRESULT {
                return @as(*const ICertificatePolicy.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ICertificatePolicy, @ptrCast(self)), p_value_);
            }
            pub inline fn getObjectId(self: *const T, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const ICertificatePolicy.VTable, @ptrCast(self.vtable)).get_ObjectId(@as(*const ICertificatePolicy, @ptrCast(self)), pp_value_);
            }
            pub inline fn getPolicyQualifiers(self: *const T, pp_value_: ?*?*IPolicyQualifiers) HRESULT {
                return @as(*const ICertificatePolicy.VTable, @ptrCast(self.vtable)).get_PolicyQualifiers(@as(*const ICertificatePolicy, @ptrCast(self)), pp_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertificatePolicies_Value = Guid.initString("728ab31f-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertificatePolicies = &IID_ICertificatePolicies_Value;
pub const ICertificatePolicies = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertificatePolicies,
            index: i32,
            p_val: ?*?*ICertificatePolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertificatePolicies,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertificatePolicies,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const ICertificatePolicies,
            p_val: ?*ICertificatePolicy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ICertificatePolicies,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const ICertificatePolicies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItemByIndex(self: *const T, index_: i32, p_val_: ?*?*ICertificatePolicy) HRESULT {
                return @as(*const ICertificatePolicies.VTable, @ptrCast(self.vtable)).get_ItemByIndex(@as(*const ICertificatePolicies, @ptrCast(self)), index_, p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const ICertificatePolicies.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ICertificatePolicies, @ptrCast(self)), p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const ICertificatePolicies.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ICertificatePolicies, @ptrCast(self)), p_val_);
            }
            pub inline fn add(self: *const T, p_val_: ?*ICertificatePolicy) HRESULT {
                return @as(*const ICertificatePolicies.VTable, @ptrCast(self.vtable)).Add(@as(*const ICertificatePolicies, @ptrCast(self)), p_val_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const ICertificatePolicies.VTable, @ptrCast(self.vtable)).Remove(@as(*const ICertificatePolicies, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const ICertificatePolicies.VTable, @ptrCast(self.vtable)).Clear(@as(*const ICertificatePolicies, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionCertificatePolicies_Value = Guid.initString("728ab320-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionCertificatePolicies = &IID_IX509ExtensionCertificatePolicies_Value;
pub const IX509ExtensionCertificatePolicies = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn (
            self: *const IX509ExtensionCertificatePolicies,
            p_value: ?*ICertificatePolicies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509ExtensionCertificatePolicies,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Policies: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509ExtensionCertificatePolicies,
            pp_value: ?*?*ICertificatePolicies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509Extension.MethodMixin(T);
            pub inline fn initializeEncode(self: *const T, p_value_: ?*ICertificatePolicies) HRESULT {
                return @as(*const IX509ExtensionCertificatePolicies.VTable, @ptrCast(self.vtable)).InitializeEncode(@as(*const IX509ExtensionCertificatePolicies, @ptrCast(self)), p_value_);
            }
            pub inline fn initializeDecode(self: *const T, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const IX509ExtensionCertificatePolicies.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509ExtensionCertificatePolicies, @ptrCast(self)), encoding_, str_encoded_data_);
            }
            pub inline fn getPolicies(self: *const T, pp_value_: ?*?*ICertificatePolicies) HRESULT {
                return @as(*const IX509ExtensionCertificatePolicies.VTable, @ptrCast(self.vtable)).get_Policies(@as(*const IX509ExtensionCertificatePolicies, @ptrCast(self)), pp_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509ExtensionMSApplicationPolicies_Value = Guid.initString("728ab321-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509ExtensionMSApplicationPolicies = &IID_IX509ExtensionMSApplicationPolicies_Value;
pub const IX509ExtensionMSApplicationPolicies = extern struct {
    pub const VTable = extern struct {
        base: IX509Extension.VTable,
        InitializeEncode: *const fn (
            self: *const IX509ExtensionMSApplicationPolicies,
            p_value: ?*ICertificatePolicies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509ExtensionMSApplicationPolicies,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Policies: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509ExtensionMSApplicationPolicies,
            pp_value: ?*?*ICertificatePolicies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509Extension.MethodMixin(T);
            pub inline fn initializeEncode(self: *const T, p_value_: ?*ICertificatePolicies) HRESULT {
                return @as(*const IX509ExtensionMSApplicationPolicies.VTable, @ptrCast(self.vtable)).InitializeEncode(@as(*const IX509ExtensionMSApplicationPolicies, @ptrCast(self)), p_value_);
            }
            pub inline fn initializeDecode(self: *const T, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const IX509ExtensionMSApplicationPolicies.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509ExtensionMSApplicationPolicies, @ptrCast(self)), encoding_, str_encoded_data_);
            }
            pub inline fn getPolicies(self: *const T, pp_value_: ?*?*ICertificatePolicies) HRESULT {
                return @as(*const IX509ExtensionMSApplicationPolicies.VTable, @ptrCast(self.vtable)).get_Policies(@as(*const IX509ExtensionMSApplicationPolicies, @ptrCast(self)), pp_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509Attribute_Value = Guid.initString("728ab322-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509Attribute = &IID_IX509Attribute_Value;
pub const IX509Attribute = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const IX509Attribute,
            p_object_id: ?*IObjectId,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Attribute,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RawData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Attribute,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_object_id_: ?*IObjectId, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const IX509Attribute.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IX509Attribute, @ptrCast(self)), p_object_id_, encoding_, str_encoded_data_);
            }
            pub inline fn getObjectId(self: *const T, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const IX509Attribute.VTable, @ptrCast(self.vtable)).get_ObjectId(@as(*const IX509Attribute, @ptrCast(self)), pp_value_);
            }
            pub inline fn getRawData(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509Attribute.VTable, @ptrCast(self.vtable)).get_RawData(@as(*const IX509Attribute, @ptrCast(self)), encoding_, p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509Attributes_Value = Guid.initString("728ab323-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509Attributes = &IID_IX509Attributes_Value;
pub const IX509Attributes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Attributes,
            index: i32,
            p_val: ?*?*IX509Attribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Attributes,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Attributes,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IX509Attributes,
            p_val: ?*IX509Attribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IX509Attributes,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IX509Attributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItemByIndex(self: *const T, index_: i32, p_val_: ?*?*IX509Attribute) HRESULT {
                return @as(*const IX509Attributes.VTable, @ptrCast(self.vtable)).get_ItemByIndex(@as(*const IX509Attributes, @ptrCast(self)), index_, p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IX509Attributes.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IX509Attributes, @ptrCast(self)), p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const IX509Attributes.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IX509Attributes, @ptrCast(self)), p_val_);
            }
            pub inline fn add(self: *const T, p_val_: ?*IX509Attribute) HRESULT {
                return @as(*const IX509Attributes.VTable, @ptrCast(self.vtable)).Add(@as(*const IX509Attributes, @ptrCast(self)), p_val_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const IX509Attributes.VTable, @ptrCast(self.vtable)).Remove(@as(*const IX509Attributes, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IX509Attributes.VTable, @ptrCast(self.vtable)).Clear(@as(*const IX509Attributes, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509AttributeExtensions_Value = Guid.initString("728ab324-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509AttributeExtensions = &IID_IX509AttributeExtensions_Value;
pub const IX509AttributeExtensions = extern struct {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncode: *const fn (
            self: *const IX509AttributeExtensions,
            p_extensions: ?*IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509AttributeExtensions,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_X509Extensions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509AttributeExtensions,
            pp_value: ?*?*IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509Attribute.MethodMixin(T);
            pub inline fn initializeEncode(self: *const T, p_extensions_: ?*IX509Extensions) HRESULT {
                return @as(*const IX509AttributeExtensions.VTable, @ptrCast(self.vtable)).InitializeEncode(@as(*const IX509AttributeExtensions, @ptrCast(self)), p_extensions_);
            }
            pub inline fn initializeDecode(self: *const T, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const IX509AttributeExtensions.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509AttributeExtensions, @ptrCast(self)), encoding_, str_encoded_data_);
            }
            pub inline fn getX509Extensions(self: *const T, pp_value_: ?*?*IX509Extensions) HRESULT {
                return @as(*const IX509AttributeExtensions.VTable, @ptrCast(self.vtable)).get_X509Extensions(@as(*const IX509AttributeExtensions, @ptrCast(self)), pp_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const RequestClientInfoClientId = enum(i32) {
    None = 0,
    XEnroll2003 = 1,
    AutoEnroll2003 = 2,
    Wizard2003 = 3,
    CertReq2003 = 4,
    DefaultRequest = 5,
    AutoEnroll = 6,
    RequestWizard = 7,
    EOBO = 8,
    CertReq = 9,
    Test = 10,
    WinRT = 11,
    UserStart = 1000,
};
pub const ClientIdNone = RequestClientInfoClientId.None;
pub const ClientIdXEnroll2003 = RequestClientInfoClientId.XEnroll2003;
pub const ClientIdAutoEnroll2003 = RequestClientInfoClientId.AutoEnroll2003;
pub const ClientIdWizard2003 = RequestClientInfoClientId.Wizard2003;
pub const ClientIdCertReq2003 = RequestClientInfoClientId.CertReq2003;
pub const ClientIdDefaultRequest = RequestClientInfoClientId.DefaultRequest;
pub const ClientIdAutoEnroll = RequestClientInfoClientId.AutoEnroll;
pub const ClientIdRequestWizard = RequestClientInfoClientId.RequestWizard;
pub const ClientIdEOBO = RequestClientInfoClientId.EOBO;
pub const ClientIdCertReq = RequestClientInfoClientId.CertReq;
pub const ClientIdTest = RequestClientInfoClientId.Test;
pub const ClientIdWinRT = RequestClientInfoClientId.WinRT;
pub const ClientIdUserStart = RequestClientInfoClientId.UserStart;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509AttributeClientId_Value = Guid.initString("728ab325-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509AttributeClientId = &IID_IX509AttributeClientId_Value;
pub const IX509AttributeClientId = extern struct {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncode: *const fn (
            self: *const IX509AttributeClientId,
            client_id: RequestClientInfoClientId,
            str_machine_dns_name: ?BSTR,
            str_user_sam_name: ?BSTR,
            str_process_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509AttributeClientId,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClientId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509AttributeClientId,
            p_value: ?*RequestClientInfoClientId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MachineDnsName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509AttributeClientId,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserSamName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509AttributeClientId,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProcessName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509AttributeClientId,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509Attribute.MethodMixin(T);
            pub inline fn initializeEncode(self: *const T, client_id_: RequestClientInfoClientId, str_machine_dns_name_: ?BSTR, str_user_sam_name_: ?BSTR, str_process_name_: ?BSTR) HRESULT {
                return @as(*const IX509AttributeClientId.VTable, @ptrCast(self.vtable)).InitializeEncode(@as(*const IX509AttributeClientId, @ptrCast(self)), client_id_, str_machine_dns_name_, str_user_sam_name_, str_process_name_);
            }
            pub inline fn initializeDecode(self: *const T, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const IX509AttributeClientId.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509AttributeClientId, @ptrCast(self)), encoding_, str_encoded_data_);
            }
            pub inline fn getClientId(self: *const T, p_value_: ?*RequestClientInfoClientId) HRESULT {
                return @as(*const IX509AttributeClientId.VTable, @ptrCast(self.vtable)).get_ClientId(@as(*const IX509AttributeClientId, @ptrCast(self)), p_value_);
            }
            pub inline fn getMachineDnsName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509AttributeClientId.VTable, @ptrCast(self.vtable)).get_MachineDnsName(@as(*const IX509AttributeClientId, @ptrCast(self)), p_value_);
            }
            pub inline fn getUserSamName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509AttributeClientId.VTable, @ptrCast(self.vtable)).get_UserSamName(@as(*const IX509AttributeClientId, @ptrCast(self)), p_value_);
            }
            pub inline fn getProcessName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509AttributeClientId.VTable, @ptrCast(self.vtable)).get_ProcessName(@as(*const IX509AttributeClientId, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509AttributeRenewalCertificate_Value = Guid.initString("728ab326-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509AttributeRenewalCertificate = &IID_IX509AttributeRenewalCertificate_Value;
pub const IX509AttributeRenewalCertificate = extern struct {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncode: *const fn (
            self: *const IX509AttributeRenewalCertificate,
            encoding: EncodingType,
            str_cert: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509AttributeRenewalCertificate,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RenewalCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509AttributeRenewalCertificate,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509Attribute.MethodMixin(T);
            pub inline fn initializeEncode(self: *const T, encoding_: EncodingType, str_cert_: ?BSTR) HRESULT {
                return @as(*const IX509AttributeRenewalCertificate.VTable, @ptrCast(self.vtable)).InitializeEncode(@as(*const IX509AttributeRenewalCertificate, @ptrCast(self)), encoding_, str_cert_);
            }
            pub inline fn initializeDecode(self: *const T, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const IX509AttributeRenewalCertificate.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509AttributeRenewalCertificate, @ptrCast(self)), encoding_, str_encoded_data_);
            }
            pub inline fn getRenewalCertificate(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509AttributeRenewalCertificate.VTable, @ptrCast(self.vtable)).get_RenewalCertificate(@as(*const IX509AttributeRenewalCertificate, @ptrCast(self)), encoding_, p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509AttributeArchiveKey_Value = Guid.initString("728ab327-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509AttributeArchiveKey = &IID_IX509AttributeArchiveKey_Value;
pub const IX509AttributeArchiveKey = extern struct {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncode: *const fn (
            self: *const IX509AttributeArchiveKey,
            p_key: ?*IX509PrivateKey,
            encoding: EncodingType,
            str_c_a_x_cert: ?BSTR,
            p_algorithm: ?*IObjectId,
            encryption_strength: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509AttributeArchiveKey,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptedKeyBlob: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509AttributeArchiveKey,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptionAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509AttributeArchiveKey,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptionStrength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509AttributeArchiveKey,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509Attribute.MethodMixin(T);
            pub inline fn initializeEncode(self: *const T, p_key_: ?*IX509PrivateKey, encoding_: EncodingType, str_c_a_x_cert_: ?BSTR, p_algorithm_: ?*IObjectId, encryption_strength_: i32) HRESULT {
                return @as(*const IX509AttributeArchiveKey.VTable, @ptrCast(self.vtable)).InitializeEncode(@as(*const IX509AttributeArchiveKey, @ptrCast(self)), p_key_, encoding_, str_c_a_x_cert_, p_algorithm_, encryption_strength_);
            }
            pub inline fn initializeDecode(self: *const T, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const IX509AttributeArchiveKey.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509AttributeArchiveKey, @ptrCast(self)), encoding_, str_encoded_data_);
            }
            pub inline fn getEncryptedKeyBlob(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509AttributeArchiveKey.VTable, @ptrCast(self.vtable)).get_EncryptedKeyBlob(@as(*const IX509AttributeArchiveKey, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn getEncryptionAlgorithm(self: *const T, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const IX509AttributeArchiveKey.VTable, @ptrCast(self.vtable)).get_EncryptionAlgorithm(@as(*const IX509AttributeArchiveKey, @ptrCast(self)), pp_value_);
            }
            pub inline fn getEncryptionStrength(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const IX509AttributeArchiveKey.VTable, @ptrCast(self.vtable)).get_EncryptionStrength(@as(*const IX509AttributeArchiveKey, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509AttributeArchiveKeyHash_Value = Guid.initString("728ab328-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509AttributeArchiveKeyHash = &IID_IX509AttributeArchiveKeyHash_Value;
pub const IX509AttributeArchiveKeyHash = extern struct {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncodeFromEncryptedKeyBlob: *const fn (
            self: *const IX509AttributeArchiveKeyHash,
            encoding: EncodingType,
            str_encrypted_key_blob: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509AttributeArchiveKeyHash,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptedKeyHashBlob: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509AttributeArchiveKeyHash,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509Attribute.MethodMixin(T);
            pub inline fn initializeEncodeFromEncryptedKeyBlob(self: *const T, encoding_: EncodingType, str_encrypted_key_blob_: ?BSTR) HRESULT {
                return @as(*const IX509AttributeArchiveKeyHash.VTable, @ptrCast(self.vtable)).InitializeEncodeFromEncryptedKeyBlob(@as(*const IX509AttributeArchiveKeyHash, @ptrCast(self)), encoding_, str_encrypted_key_blob_);
            }
            pub inline fn initializeDecode(self: *const T, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const IX509AttributeArchiveKeyHash.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509AttributeArchiveKeyHash, @ptrCast(self)), encoding_, str_encoded_data_);
            }
            pub inline fn getEncryptedKeyHashBlob(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509AttributeArchiveKeyHash.VTable, @ptrCast(self.vtable)).get_EncryptedKeyHashBlob(@as(*const IX509AttributeArchiveKeyHash, @ptrCast(self)), encoding_, p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509AttributeOSVersion_Value = Guid.initString("728ab32a-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509AttributeOSVersion = &IID_IX509AttributeOSVersion_Value;
pub const IX509AttributeOSVersion = extern struct {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncode: *const fn (
            self: *const IX509AttributeOSVersion,
            str_o_s_version: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509AttributeOSVersion,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OSVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509AttributeOSVersion,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509Attribute.MethodMixin(T);
            pub inline fn initializeEncode(self: *const T, str_o_s_version_: ?BSTR) HRESULT {
                return @as(*const IX509AttributeOSVersion.VTable, @ptrCast(self.vtable)).InitializeEncode(@as(*const IX509AttributeOSVersion, @ptrCast(self)), str_o_s_version_);
            }
            pub inline fn initializeDecode(self: *const T, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const IX509AttributeOSVersion.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509AttributeOSVersion, @ptrCast(self)), encoding_, str_encoded_data_);
            }
            pub inline fn getOSVersion(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509AttributeOSVersion.VTable, @ptrCast(self.vtable)).get_OSVersion(@as(*const IX509AttributeOSVersion, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509AttributeCspProvider_Value = Guid.initString("728ab32b-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509AttributeCspProvider = &IID_IX509AttributeCspProvider_Value;
pub const IX509AttributeCspProvider = extern struct {
    pub const VTable = extern struct {
        base: IX509Attribute.VTable,
        InitializeEncode: *const fn (
            self: *const IX509AttributeCspProvider,
            key_spec: X509KeySpec,
            str_provider_name: ?BSTR,
            encoding: EncodingType,
            str_signature: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509AttributeCspProvider,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeySpec: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509AttributeCspProvider,
            p_value: ?*X509KeySpec,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509AttributeCspProvider,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Signature: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509AttributeCspProvider,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509Attribute.MethodMixin(T);
            pub inline fn initializeEncode(self: *const T, key_spec_: X509KeySpec, str_provider_name_: ?BSTR, encoding_: EncodingType, str_signature_: ?BSTR) HRESULT {
                return @as(*const IX509AttributeCspProvider.VTable, @ptrCast(self.vtable)).InitializeEncode(@as(*const IX509AttributeCspProvider, @ptrCast(self)), key_spec_, str_provider_name_, encoding_, str_signature_);
            }
            pub inline fn initializeDecode(self: *const T, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const IX509AttributeCspProvider.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509AttributeCspProvider, @ptrCast(self)), encoding_, str_encoded_data_);
            }
            pub inline fn getKeySpec(self: *const T, p_value_: ?*X509KeySpec) HRESULT {
                return @as(*const IX509AttributeCspProvider.VTable, @ptrCast(self.vtable)).get_KeySpec(@as(*const IX509AttributeCspProvider, @ptrCast(self)), p_value_);
            }
            pub inline fn getProviderName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509AttributeCspProvider.VTable, @ptrCast(self.vtable)).get_ProviderName(@as(*const IX509AttributeCspProvider, @ptrCast(self)), p_value_);
            }
            pub inline fn getSignature(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509AttributeCspProvider.VTable, @ptrCast(self.vtable)).get_Signature(@as(*const IX509AttributeCspProvider, @ptrCast(self)), encoding_, p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICryptAttribute_Value = Guid.initString("728ab32c-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICryptAttribute = &IID_ICryptAttribute_Value;
pub const ICryptAttribute = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InitializeFromObjectId: *const fn (
            self: *const ICryptAttribute,
            p_object_id: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromValues: *const fn (
            self: *const ICryptAttribute,
            p_attributes: ?*IX509Attributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICryptAttribute,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Values: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICryptAttribute,
            pp_value: ?*?*IX509Attributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initializeFromObjectId(self: *const T, p_object_id_: ?*IObjectId) HRESULT {
                return @as(*const ICryptAttribute.VTable, @ptrCast(self.vtable)).InitializeFromObjectId(@as(*const ICryptAttribute, @ptrCast(self)), p_object_id_);
            }
            pub inline fn initializeFromValues(self: *const T, p_attributes_: ?*IX509Attributes) HRESULT {
                return @as(*const ICryptAttribute.VTable, @ptrCast(self.vtable)).InitializeFromValues(@as(*const ICryptAttribute, @ptrCast(self)), p_attributes_);
            }
            pub inline fn getObjectId(self: *const T, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const ICryptAttribute.VTable, @ptrCast(self.vtable)).get_ObjectId(@as(*const ICryptAttribute, @ptrCast(self)), pp_value_);
            }
            pub inline fn getValues(self: *const T, pp_value_: ?*?*IX509Attributes) HRESULT {
                return @as(*const ICryptAttribute.VTable, @ptrCast(self.vtable)).get_Values(@as(*const ICryptAttribute, @ptrCast(self)), pp_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICryptAttributes_Value = Guid.initString("728ab32d-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICryptAttributes = &IID_ICryptAttributes_Value;
pub const ICryptAttributes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICryptAttributes,
            index: i32,
            p_val: ?*?*ICryptAttribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICryptAttributes,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICryptAttributes,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const ICryptAttributes,
            p_val: ?*ICryptAttribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ICryptAttributes,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const ICryptAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IndexByObjectId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICryptAttributes,
            p_object_id: ?*IObjectId,
            p_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: *const fn (
            self: *const ICryptAttributes,
            p_value: ?*ICryptAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItemByIndex(self: *const T, index_: i32, p_val_: ?*?*ICryptAttribute) HRESULT {
                return @as(*const ICryptAttributes.VTable, @ptrCast(self.vtable)).get_ItemByIndex(@as(*const ICryptAttributes, @ptrCast(self)), index_, p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const ICryptAttributes.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ICryptAttributes, @ptrCast(self)), p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const ICryptAttributes.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ICryptAttributes, @ptrCast(self)), p_val_);
            }
            pub inline fn add(self: *const T, p_val_: ?*ICryptAttribute) HRESULT {
                return @as(*const ICryptAttributes.VTable, @ptrCast(self.vtable)).Add(@as(*const ICryptAttributes, @ptrCast(self)), p_val_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const ICryptAttributes.VTable, @ptrCast(self.vtable)).Remove(@as(*const ICryptAttributes, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const ICryptAttributes.VTable, @ptrCast(self.vtable)).Clear(@as(*const ICryptAttributes, @ptrCast(self)));
            }
            pub inline fn getIndexByObjectId(self: *const T, p_object_id_: ?*IObjectId, p_index_: ?*i32) HRESULT {
                return @as(*const ICryptAttributes.VTable, @ptrCast(self.vtable)).get_IndexByObjectId(@as(*const ICryptAttributes, @ptrCast(self)), p_object_id_, p_index_);
            }
            pub inline fn addRange(self: *const T, p_value_: ?*ICryptAttributes) HRESULT {
                return @as(*const ICryptAttributes.VTable, @ptrCast(self.vtable)).AddRange(@as(*const ICryptAttributes, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CERTENROLL_PROPERTYID = enum(i32) {
    PROPERTYID_NONE = 0,
    CERT_KEY_PROV_HANDLE_PROP_ID = 1,
    CERT_KEY_PROV_INFO_PROP_ID = 2,
    CERT_SHA1_HASH_PROP_ID = 3,
    CERT_MD5_HASH_PROP_ID = 4,
    // CERT_HASH_PROP_ID = 3, this enum value conflicts with CERT_SHA1_HASH_PROP_ID
    CERT_KEY_CONTEXT_PROP_ID = 5,
    CERT_KEY_SPEC_PROP_ID = 6,
    CERT_IE30_RESERVED_PROP_ID = 7,
    CERT_PUBKEY_HASH_RESERVED_PROP_ID = 8,
    CERT_ENHKEY_USAGE_PROP_ID = 9,
    // CERT_CTL_USAGE_PROP_ID = 9, this enum value conflicts with CERT_ENHKEY_USAGE_PROP_ID
    CERT_NEXT_UPDATE_LOCATION_PROP_ID = 10,
    CERT_FRIENDLY_NAME_PROP_ID = 11,
    CERT_PVK_FILE_PROP_ID = 12,
    CERT_DESCRIPTION_PROP_ID = 13,
    CERT_ACCESS_STATE_PROP_ID = 14,
    CERT_SIGNATURE_HASH_PROP_ID = 15,
    CERT_SMART_CARD_DATA_PROP_ID = 16,
    CERT_EFS_PROP_ID = 17,
    CERT_FORTEZZA_DATA_PROP_ID = 18,
    CERT_ARCHIVED_PROP_ID = 19,
    CERT_KEY_IDENTIFIER_PROP_ID = 20,
    CERT_AUTO_ENROLL_PROP_ID = 21,
    CERT_PUBKEY_ALG_PARA_PROP_ID = 22,
    CERT_CROSS_CERT_DIST_POINTS_PROP_ID = 23,
    CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = 24,
    CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = 25,
    CERT_ENROLLMENT_PROP_ID = 26,
    CERT_DATE_STAMP_PROP_ID = 27,
    CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = 28,
    CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = 29,
    CERT_EXTENDED_ERROR_INFO_PROP_ID = 30,
    CERT_RENEWAL_PROP_ID = 64,
    CERT_ARCHIVED_KEY_HASH_PROP_ID = 65,
    CERT_AUTO_ENROLL_RETRY_PROP_ID = 66,
    CERT_AIA_URL_RETRIEVED_PROP_ID = 67,
    CERT_AUTHORITY_INFO_ACCESS_PROP_ID = 68,
    CERT_BACKED_UP_PROP_ID = 69,
    CERT_OCSP_RESPONSE_PROP_ID = 70,
    CERT_REQUEST_ORIGINATOR_PROP_ID = 71,
    CERT_SOURCE_LOCATION_PROP_ID = 72,
    CERT_SOURCE_URL_PROP_ID = 73,
    CERT_NEW_KEY_PROP_ID = 74,
    CERT_OCSP_CACHE_PREFIX_PROP_ID = 75,
    CERT_SMART_CARD_ROOT_INFO_PROP_ID = 76,
    CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID = 77,
    CERT_NCRYPT_KEY_HANDLE_PROP_ID = 78,
    CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID = 79,
    CERT_SUBJECT_INFO_ACCESS_PROP_ID = 80,
    CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 81,
    CERT_CA_DISABLE_CRL_PROP_ID = 82,
    CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID = 83,
    CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID = 84,
    CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = 85,
    CERT_SUBJECT_DISABLE_CRL_PROP_ID = 86,
    CERT_CEP_PROP_ID = 87,
    CERT_SIGN_HASH_CNG_ALG_PROP_ID = 89,
    CERT_SCARD_PIN_ID_PROP_ID = 90,
    CERT_SCARD_PIN_INFO_PROP_ID = 91,
    CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID = 92,
    CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 93,
    CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID = 94,
    CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID = 95,
    CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = 96,
    CERT_NO_EXPIRE_NOTIFICATION_PROP_ID = 97,
    CERT_AUTH_ROOT_SHA256_HASH_PROP_ID = 98,
    CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID = 99,
    CERT_HCRYPTPROV_TRANSFER_PROP_ID = 100,
    CERT_SMART_CARD_READER_PROP_ID = 101,
    CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID = 102,
    CERT_KEY_REPAIR_ATTEMPTED_PROP_ID = 103,
    CERT_DISALLOWED_FILETIME_PROP_ID = 104,
    CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID = 105,
    CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID = 106,
    CERT_SHA256_HASH_PROP_ID = 107,
    CERT_SCEP_SERVER_CERTS_PROP_ID = 108,
    CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID = 109,
    CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID = 110,
    CERT_SCEP_CA_CERT_PROP_ID = 111,
    CERT_SCEP_SIGNER_CERT_PROP_ID = 112,
    CERT_SCEP_NONCE_PROP_ID = 113,
    CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID = 114,
    CERT_SCEP_FLAGS_PROP_ID = 115,
    CERT_SCEP_GUID_PROP_ID = 116,
    CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID = 117,
    CERT_ISOLATED_KEY_PROP_ID = 118,
    CERT_SERIAL_CHAIN_PROP_ID = 119,
    CERT_KEY_CLASSIFICATION_PROP_ID = 120,
    CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID = 122,
    CERT_NONCOMPLIANT_ROOT_URL_PROP_ID = 123,
    CERT_PIN_SHA256_HASH_PROP_ID = 124,
    CERT_CLR_DELETE_KEY_PROP_ID = 125,
    CERT_NOT_BEFORE_FILETIME_PROP_ID = 126,
    CERT_CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID = 127,
    CERT_FIRST_RESERVED_PROP_ID = 128,
    CERT_LAST_RESERVED_PROP_ID = 32767,
    CERT_FIRST_USER_PROP_ID = 32768,
    CERT_LAST_USER_PROP_ID = 65535,
    CERT_STORE_LOCALIZED_NAME_PROP_ID = 4096,
};
pub const XCN_PROPERTYID_NONE = CERTENROLL_PROPERTYID.PROPERTYID_NONE;
pub const XCN_CERT_KEY_PROV_HANDLE_PROP_ID = CERTENROLL_PROPERTYID.CERT_KEY_PROV_HANDLE_PROP_ID;
pub const XCN_CERT_KEY_PROV_INFO_PROP_ID = CERTENROLL_PROPERTYID.CERT_KEY_PROV_INFO_PROP_ID;
pub const XCN_CERT_SHA1_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_SHA1_HASH_PROP_ID;
pub const XCN_CERT_MD5_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_MD5_HASH_PROP_ID;
pub const XCN_CERT_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_SHA1_HASH_PROP_ID;
pub const XCN_CERT_KEY_CONTEXT_PROP_ID = CERTENROLL_PROPERTYID.CERT_KEY_CONTEXT_PROP_ID;
pub const XCN_CERT_KEY_SPEC_PROP_ID = CERTENROLL_PROPERTYID.CERT_KEY_SPEC_PROP_ID;
pub const XCN_CERT_IE30_RESERVED_PROP_ID = CERTENROLL_PROPERTYID.CERT_IE30_RESERVED_PROP_ID;
pub const XCN_CERT_PUBKEY_HASH_RESERVED_PROP_ID = CERTENROLL_PROPERTYID.CERT_PUBKEY_HASH_RESERVED_PROP_ID;
pub const XCN_CERT_ENHKEY_USAGE_PROP_ID = CERTENROLL_PROPERTYID.CERT_ENHKEY_USAGE_PROP_ID;
pub const XCN_CERT_CTL_USAGE_PROP_ID = CERTENROLL_PROPERTYID.CERT_ENHKEY_USAGE_PROP_ID;
pub const XCN_CERT_NEXT_UPDATE_LOCATION_PROP_ID = CERTENROLL_PROPERTYID.CERT_NEXT_UPDATE_LOCATION_PROP_ID;
pub const XCN_CERT_FRIENDLY_NAME_PROP_ID = CERTENROLL_PROPERTYID.CERT_FRIENDLY_NAME_PROP_ID;
pub const XCN_CERT_PVK_FILE_PROP_ID = CERTENROLL_PROPERTYID.CERT_PVK_FILE_PROP_ID;
pub const XCN_CERT_DESCRIPTION_PROP_ID = CERTENROLL_PROPERTYID.CERT_DESCRIPTION_PROP_ID;
pub const XCN_CERT_ACCESS_STATE_PROP_ID = CERTENROLL_PROPERTYID.CERT_ACCESS_STATE_PROP_ID;
pub const XCN_CERT_SIGNATURE_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_SIGNATURE_HASH_PROP_ID;
pub const XCN_CERT_SMART_CARD_DATA_PROP_ID = CERTENROLL_PROPERTYID.CERT_SMART_CARD_DATA_PROP_ID;
pub const XCN_CERT_EFS_PROP_ID = CERTENROLL_PROPERTYID.CERT_EFS_PROP_ID;
pub const XCN_CERT_FORTEZZA_DATA_PROP_ID = CERTENROLL_PROPERTYID.CERT_FORTEZZA_DATA_PROP_ID;
pub const XCN_CERT_ARCHIVED_PROP_ID = CERTENROLL_PROPERTYID.CERT_ARCHIVED_PROP_ID;
pub const XCN_CERT_KEY_IDENTIFIER_PROP_ID = CERTENROLL_PROPERTYID.CERT_KEY_IDENTIFIER_PROP_ID;
pub const XCN_CERT_AUTO_ENROLL_PROP_ID = CERTENROLL_PROPERTYID.CERT_AUTO_ENROLL_PROP_ID;
pub const XCN_CERT_PUBKEY_ALG_PARA_PROP_ID = CERTENROLL_PROPERTYID.CERT_PUBKEY_ALG_PARA_PROP_ID;
pub const XCN_CERT_CROSS_CERT_DIST_POINTS_PROP_ID = CERTENROLL_PROPERTYID.CERT_CROSS_CERT_DIST_POINTS_PROP_ID;
pub const XCN_CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_ISSUER_PUBLIC_KEY_MD5_HASH_PROP_ID;
pub const XCN_CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_SUBJECT_PUBLIC_KEY_MD5_HASH_PROP_ID;
pub const XCN_CERT_ENROLLMENT_PROP_ID = CERTENROLL_PROPERTYID.CERT_ENROLLMENT_PROP_ID;
pub const XCN_CERT_DATE_STAMP_PROP_ID = CERTENROLL_PROPERTYID.CERT_DATE_STAMP_PROP_ID;
pub const XCN_CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_ISSUER_SERIAL_NUMBER_MD5_HASH_PROP_ID;
pub const XCN_CERT_SUBJECT_NAME_MD5_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_SUBJECT_NAME_MD5_HASH_PROP_ID;
pub const XCN_CERT_EXTENDED_ERROR_INFO_PROP_ID = CERTENROLL_PROPERTYID.CERT_EXTENDED_ERROR_INFO_PROP_ID;
pub const XCN_CERT_RENEWAL_PROP_ID = CERTENROLL_PROPERTYID.CERT_RENEWAL_PROP_ID;
pub const XCN_CERT_ARCHIVED_KEY_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_ARCHIVED_KEY_HASH_PROP_ID;
pub const XCN_CERT_AUTO_ENROLL_RETRY_PROP_ID = CERTENROLL_PROPERTYID.CERT_AUTO_ENROLL_RETRY_PROP_ID;
pub const XCN_CERT_AIA_URL_RETRIEVED_PROP_ID = CERTENROLL_PROPERTYID.CERT_AIA_URL_RETRIEVED_PROP_ID;
pub const XCN_CERT_AUTHORITY_INFO_ACCESS_PROP_ID = CERTENROLL_PROPERTYID.CERT_AUTHORITY_INFO_ACCESS_PROP_ID;
pub const XCN_CERT_BACKED_UP_PROP_ID = CERTENROLL_PROPERTYID.CERT_BACKED_UP_PROP_ID;
pub const XCN_CERT_OCSP_RESPONSE_PROP_ID = CERTENROLL_PROPERTYID.CERT_OCSP_RESPONSE_PROP_ID;
pub const XCN_CERT_REQUEST_ORIGINATOR_PROP_ID = CERTENROLL_PROPERTYID.CERT_REQUEST_ORIGINATOR_PROP_ID;
pub const XCN_CERT_SOURCE_LOCATION_PROP_ID = CERTENROLL_PROPERTYID.CERT_SOURCE_LOCATION_PROP_ID;
pub const XCN_CERT_SOURCE_URL_PROP_ID = CERTENROLL_PROPERTYID.CERT_SOURCE_URL_PROP_ID;
pub const XCN_CERT_NEW_KEY_PROP_ID = CERTENROLL_PROPERTYID.CERT_NEW_KEY_PROP_ID;
pub const XCN_CERT_OCSP_CACHE_PREFIX_PROP_ID = CERTENROLL_PROPERTYID.CERT_OCSP_CACHE_PREFIX_PROP_ID;
pub const XCN_CERT_SMART_CARD_ROOT_INFO_PROP_ID = CERTENROLL_PROPERTYID.CERT_SMART_CARD_ROOT_INFO_PROP_ID;
pub const XCN_CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID = CERTENROLL_PROPERTYID.CERT_NO_AUTO_EXPIRE_CHECK_PROP_ID;
pub const XCN_CERT_NCRYPT_KEY_HANDLE_PROP_ID = CERTENROLL_PROPERTYID.CERT_NCRYPT_KEY_HANDLE_PROP_ID;
pub const XCN_CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID = CERTENROLL_PROPERTYID.CERT_HCRYPTPROV_OR_NCRYPT_KEY_HANDLE_PROP_ID;
pub const XCN_CERT_SUBJECT_INFO_ACCESS_PROP_ID = CERTENROLL_PROPERTYID.CERT_SUBJECT_INFO_ACCESS_PROP_ID;
pub const XCN_CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = CERTENROLL_PROPERTYID.CERT_CA_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID;
pub const XCN_CERT_CA_DISABLE_CRL_PROP_ID = CERTENROLL_PROPERTYID.CERT_CA_DISABLE_CRL_PROP_ID;
pub const XCN_CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID = CERTENROLL_PROPERTYID.CERT_ROOT_PROGRAM_CERT_POLICIES_PROP_ID;
pub const XCN_CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID = CERTENROLL_PROPERTYID.CERT_ROOT_PROGRAM_NAME_CONSTRAINTS_PROP_ID;
pub const XCN_CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID = CERTENROLL_PROPERTYID.CERT_SUBJECT_OCSP_AUTHORITY_INFO_ACCESS_PROP_ID;
pub const XCN_CERT_SUBJECT_DISABLE_CRL_PROP_ID = CERTENROLL_PROPERTYID.CERT_SUBJECT_DISABLE_CRL_PROP_ID;
pub const XCN_CERT_CEP_PROP_ID = CERTENROLL_PROPERTYID.CERT_CEP_PROP_ID;
pub const XCN_CERT_SIGN_HASH_CNG_ALG_PROP_ID = CERTENROLL_PROPERTYID.CERT_SIGN_HASH_CNG_ALG_PROP_ID;
pub const XCN_CERT_SCARD_PIN_ID_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCARD_PIN_ID_PROP_ID;
pub const XCN_CERT_SCARD_PIN_INFO_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCARD_PIN_INFO_PROP_ID;
pub const XCN_CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID = CERTENROLL_PROPERTYID.CERT_SUBJECT_PUB_KEY_BIT_LENGTH_PROP_ID;
pub const XCN_CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = CERTENROLL_PROPERTYID.CERT_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID;
pub const XCN_CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID = CERTENROLL_PROPERTYID.CERT_ISSUER_PUB_KEY_BIT_LENGTH_PROP_ID;
pub const XCN_CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID = CERTENROLL_PROPERTYID.CERT_ISSUER_CHAIN_SIGN_HASH_CNG_ALG_PROP_ID;
pub const XCN_CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID = CERTENROLL_PROPERTYID.CERT_ISSUER_CHAIN_PUB_KEY_CNG_ALG_BIT_LENGTH_PROP_ID;
pub const XCN_CERT_NO_EXPIRE_NOTIFICATION_PROP_ID = CERTENROLL_PROPERTYID.CERT_NO_EXPIRE_NOTIFICATION_PROP_ID;
pub const XCN_CERT_AUTH_ROOT_SHA256_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_AUTH_ROOT_SHA256_HASH_PROP_ID;
pub const XCN_CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID = CERTENROLL_PROPERTYID.CERT_NCRYPT_KEY_HANDLE_TRANSFER_PROP_ID;
pub const XCN_CERT_HCRYPTPROV_TRANSFER_PROP_ID = CERTENROLL_PROPERTYID.CERT_HCRYPTPROV_TRANSFER_PROP_ID;
pub const XCN_CERT_SMART_CARD_READER_PROP_ID = CERTENROLL_PROPERTYID.CERT_SMART_CARD_READER_PROP_ID;
pub const XCN_CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID = CERTENROLL_PROPERTYID.CERT_SEND_AS_TRUSTED_ISSUER_PROP_ID;
pub const XCN_CERT_KEY_REPAIR_ATTEMPTED_PROP_ID = CERTENROLL_PROPERTYID.CERT_KEY_REPAIR_ATTEMPTED_PROP_ID;
pub const XCN_CERT_DISALLOWED_FILETIME_PROP_ID = CERTENROLL_PROPERTYID.CERT_DISALLOWED_FILETIME_PROP_ID;
pub const XCN_CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID = CERTENROLL_PROPERTYID.CERT_ROOT_PROGRAM_CHAIN_POLICIES_PROP_ID;
pub const XCN_CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID = CERTENROLL_PROPERTYID.CERT_SMART_CARD_READER_NON_REMOVABLE_PROP_ID;
pub const XCN_CERT_SHA256_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_SHA256_HASH_PROP_ID;
pub const XCN_CERT_SCEP_SERVER_CERTS_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCEP_SERVER_CERTS_PROP_ID;
pub const XCN_CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCEP_RA_SIGNATURE_CERT_PROP_ID;
pub const XCN_CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCEP_RA_ENCRYPTION_CERT_PROP_ID;
pub const XCN_CERT_SCEP_CA_CERT_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCEP_CA_CERT_PROP_ID;
pub const XCN_CERT_SCEP_SIGNER_CERT_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCEP_SIGNER_CERT_PROP_ID;
pub const XCN_CERT_SCEP_NONCE_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCEP_NONCE_PROP_ID;
pub const XCN_CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCEP_ENCRYPT_HASH_CNG_ALG_PROP_ID;
pub const XCN_CERT_SCEP_FLAGS_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCEP_FLAGS_PROP_ID;
pub const XCN_CERT_SCEP_GUID_PROP_ID = CERTENROLL_PROPERTYID.CERT_SCEP_GUID_PROP_ID;
pub const XCN_CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID = CERTENROLL_PROPERTYID.CERT_SERIALIZABLE_KEY_CONTEXT_PROP_ID;
pub const XCN_CERT_ISOLATED_KEY_PROP_ID = CERTENROLL_PROPERTYID.CERT_ISOLATED_KEY_PROP_ID;
pub const XCN_CERT_SERIAL_CHAIN_PROP_ID = CERTENROLL_PROPERTYID.CERT_SERIAL_CHAIN_PROP_ID;
pub const XCN_CERT_KEY_CLASSIFICATION_PROP_ID = CERTENROLL_PROPERTYID.CERT_KEY_CLASSIFICATION_PROP_ID;
pub const XCN_CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID = CERTENROLL_PROPERTYID.CERT_DISALLOWED_ENHKEY_USAGE_PROP_ID;
pub const XCN_CERT_NONCOMPLIANT_ROOT_URL_PROP_ID = CERTENROLL_PROPERTYID.CERT_NONCOMPLIANT_ROOT_URL_PROP_ID;
pub const XCN_CERT_PIN_SHA256_HASH_PROP_ID = CERTENROLL_PROPERTYID.CERT_PIN_SHA256_HASH_PROP_ID;
pub const XCN_CERT_CLR_DELETE_KEY_PROP_ID = CERTENROLL_PROPERTYID.CERT_CLR_DELETE_KEY_PROP_ID;
pub const XCN_CERT_NOT_BEFORE_FILETIME_PROP_ID = CERTENROLL_PROPERTYID.CERT_NOT_BEFORE_FILETIME_PROP_ID;
pub const XCN_CERT_CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID = CERTENROLL_PROPERTYID.CERT_CERT_NOT_BEFORE_ENHKEY_USAGE_PROP_ID;
pub const XCN_CERT_FIRST_RESERVED_PROP_ID = CERTENROLL_PROPERTYID.CERT_FIRST_RESERVED_PROP_ID;
pub const XCN_CERT_LAST_RESERVED_PROP_ID = CERTENROLL_PROPERTYID.CERT_LAST_RESERVED_PROP_ID;
pub const XCN_CERT_FIRST_USER_PROP_ID = CERTENROLL_PROPERTYID.CERT_FIRST_USER_PROP_ID;
pub const XCN_CERT_LAST_USER_PROP_ID = CERTENROLL_PROPERTYID.CERT_LAST_USER_PROP_ID;
pub const XCN_CERT_STORE_LOCALIZED_NAME_PROP_ID = CERTENROLL_PROPERTYID.CERT_STORE_LOCALIZED_NAME_PROP_ID;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertProperty_Value = Guid.initString("728ab32e-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertProperty = &IID_ICertProperty_Value;
pub const ICertProperty = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InitializeFromCertificate: *const fn (
            self: *const ICertProperty,
            machine_context: i16,
            encoding: EncodingType,
            str_certificate: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const ICertProperty,
            encoding: EncodingType,
            str_encoded_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PropertyId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertProperty,
            p_value: ?*CERTENROLL_PROPERTYID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PropertyId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertProperty,
            value: CERTENROLL_PROPERTYID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RawData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertProperty,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveFromCertificate: *const fn (
            self: *const ICertProperty,
            machine_context: i16,
            encoding: EncodingType,
            str_certificate: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValueOnCertificate: *const fn (
            self: *const ICertProperty,
            machine_context: i16,
            encoding: EncodingType,
            str_certificate: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initializeFromCertificate(self: *const T, machine_context_: i16, encoding_: EncodingType, str_certificate_: ?BSTR) HRESULT {
                return @as(*const ICertProperty.VTable, @ptrCast(self.vtable)).InitializeFromCertificate(@as(*const ICertProperty, @ptrCast(self)), machine_context_, encoding_, str_certificate_);
            }
            pub inline fn initializeDecode(self: *const T, encoding_: EncodingType, str_encoded_data_: ?BSTR) HRESULT {
                return @as(*const ICertProperty.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const ICertProperty, @ptrCast(self)), encoding_, str_encoded_data_);
            }
            pub inline fn getPropertyId(self: *const T, p_value_: ?*CERTENROLL_PROPERTYID) HRESULT {
                return @as(*const ICertProperty.VTable, @ptrCast(self.vtable)).get_PropertyId(@as(*const ICertProperty, @ptrCast(self)), p_value_);
            }
            pub inline fn putPropertyId(self: *const T, value_: CERTENROLL_PROPERTYID) HRESULT {
                return @as(*const ICertProperty.VTable, @ptrCast(self.vtable)).put_PropertyId(@as(*const ICertProperty, @ptrCast(self)), value_);
            }
            pub inline fn getRawData(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ICertProperty.VTable, @ptrCast(self.vtable)).get_RawData(@as(*const ICertProperty, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn removeFromCertificate(self: *const T, machine_context_: i16, encoding_: EncodingType, str_certificate_: ?BSTR) HRESULT {
                return @as(*const ICertProperty.VTable, @ptrCast(self.vtable)).RemoveFromCertificate(@as(*const ICertProperty, @ptrCast(self)), machine_context_, encoding_, str_certificate_);
            }
            pub inline fn setValueOnCertificate(self: *const T, machine_context_: i16, encoding_: EncodingType, str_certificate_: ?BSTR) HRESULT {
                return @as(*const ICertProperty.VTable, @ptrCast(self.vtable)).SetValueOnCertificate(@as(*const ICertProperty, @ptrCast(self)), machine_context_, encoding_, str_certificate_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertProperties_Value = Guid.initString("728ab32f-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertProperties = &IID_ICertProperties_Value;
pub const ICertProperties = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertProperties,
            index: i32,
            p_val: ?*?*ICertProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertProperties,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertProperties,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const ICertProperties,
            p_val: ?*ICertProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ICertProperties,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const ICertProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromCertificate: *const fn (
            self: *const ICertProperties,
            machine_context: i16,
            encoding: EncodingType,
            str_certificate: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItemByIndex(self: *const T, index_: i32, p_val_: ?*?*ICertProperty) HRESULT {
                return @as(*const ICertProperties.VTable, @ptrCast(self.vtable)).get_ItemByIndex(@as(*const ICertProperties, @ptrCast(self)), index_, p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const ICertProperties.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ICertProperties, @ptrCast(self)), p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const ICertProperties.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ICertProperties, @ptrCast(self)), p_val_);
            }
            pub inline fn add(self: *const T, p_val_: ?*ICertProperty) HRESULT {
                return @as(*const ICertProperties.VTable, @ptrCast(self.vtable)).Add(@as(*const ICertProperties, @ptrCast(self)), p_val_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const ICertProperties.VTable, @ptrCast(self.vtable)).Remove(@as(*const ICertProperties, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const ICertProperties.VTable, @ptrCast(self.vtable)).Clear(@as(*const ICertProperties, @ptrCast(self)));
            }
            pub inline fn initializeFromCertificate(self: *const T, machine_context_: i16, encoding_: EncodingType, str_certificate_: ?BSTR) HRESULT {
                return @as(*const ICertProperties.VTable, @ptrCast(self.vtable)).InitializeFromCertificate(@as(*const ICertProperties, @ptrCast(self)), machine_context_, encoding_, str_certificate_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertyFriendlyName_Value = Guid.initString("728ab330-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyFriendlyName = &IID_ICertPropertyFriendlyName_Value;
pub const ICertPropertyFriendlyName = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn (
            self: *const ICertPropertyFriendlyName,
            str_friendly_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FriendlyName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertPropertyFriendlyName,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertProperty.MethodMixin(T);
            pub inline fn initialize(self: *const T, str_friendly_name_: ?BSTR) HRESULT {
                return @as(*const ICertPropertyFriendlyName.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ICertPropertyFriendlyName, @ptrCast(self)), str_friendly_name_);
            }
            pub inline fn getFriendlyName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ICertPropertyFriendlyName.VTable, @ptrCast(self.vtable)).get_FriendlyName(@as(*const ICertPropertyFriendlyName, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertyDescription_Value = Guid.initString("728ab331-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyDescription = &IID_ICertPropertyDescription_Value;
pub const ICertPropertyDescription = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn (
            self: *const ICertPropertyDescription,
            str_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertPropertyDescription,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertProperty.MethodMixin(T);
            pub inline fn initialize(self: *const T, str_description_: ?BSTR) HRESULT {
                return @as(*const ICertPropertyDescription.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ICertPropertyDescription, @ptrCast(self)), str_description_);
            }
            pub inline fn getDescription(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ICertPropertyDescription.VTable, @ptrCast(self.vtable)).get_Description(@as(*const ICertPropertyDescription, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertyAutoEnroll_Value = Guid.initString("728ab332-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyAutoEnroll = &IID_ICertPropertyAutoEnroll_Value;
pub const ICertPropertyAutoEnroll = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn (
            self: *const ICertPropertyAutoEnroll,
            str_template_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TemplateName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertPropertyAutoEnroll,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertProperty.MethodMixin(T);
            pub inline fn initialize(self: *const T, str_template_name_: ?BSTR) HRESULT {
                return @as(*const ICertPropertyAutoEnroll.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ICertPropertyAutoEnroll, @ptrCast(self)), str_template_name_);
            }
            pub inline fn getTemplateName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ICertPropertyAutoEnroll.VTable, @ptrCast(self.vtable)).get_TemplateName(@as(*const ICertPropertyAutoEnroll, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertyRequestOriginator_Value = Guid.initString("728ab333-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyRequestOriginator = &IID_ICertPropertyRequestOriginator_Value;
pub const ICertPropertyRequestOriginator = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn (
            self: *const ICertPropertyRequestOriginator,
            str_request_originator: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromLocalRequestOriginator: *const fn (
            self: *const ICertPropertyRequestOriginator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestOriginator: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertPropertyRequestOriginator,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertProperty.MethodMixin(T);
            pub inline fn initialize(self: *const T, str_request_originator_: ?BSTR) HRESULT {
                return @as(*const ICertPropertyRequestOriginator.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ICertPropertyRequestOriginator, @ptrCast(self)), str_request_originator_);
            }
            pub inline fn initializeFromLocalRequestOriginator(self: *const T) HRESULT {
                return @as(*const ICertPropertyRequestOriginator.VTable, @ptrCast(self.vtable)).InitializeFromLocalRequestOriginator(@as(*const ICertPropertyRequestOriginator, @ptrCast(self)));
            }
            pub inline fn getRequestOriginator(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ICertPropertyRequestOriginator.VTable, @ptrCast(self.vtable)).get_RequestOriginator(@as(*const ICertPropertyRequestOriginator, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertySHA1Hash_Value = Guid.initString("728ab334-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertySHA1Hash = &IID_ICertPropertySHA1Hash_Value;
pub const ICertPropertySHA1Hash = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn (
            self: *const ICertPropertySHA1Hash,
            encoding: EncodingType,
            str_renewal_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SHA1Hash: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertPropertySHA1Hash,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertProperty.MethodMixin(T);
            pub inline fn initialize(self: *const T, encoding_: EncodingType, str_renewal_value_: ?BSTR) HRESULT {
                return @as(*const ICertPropertySHA1Hash.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ICertPropertySHA1Hash, @ptrCast(self)), encoding_, str_renewal_value_);
            }
            pub inline fn getSHA1Hash(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ICertPropertySHA1Hash.VTable, @ptrCast(self.vtable)).get_SHA1Hash(@as(*const ICertPropertySHA1Hash, @ptrCast(self)), encoding_, p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertyKeyProvInfo_Value = Guid.initString("728ab336-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyKeyProvInfo = &IID_ICertPropertyKeyProvInfo_Value;
pub const ICertPropertyKeyProvInfo = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn (
            self: *const ICertPropertyKeyProvInfo,
            p_value: ?*IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivateKey: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertPropertyKeyProvInfo,
            pp_value: ?*?*IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertProperty.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_value_: ?*IX509PrivateKey) HRESULT {
                return @as(*const ICertPropertyKeyProvInfo.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ICertPropertyKeyProvInfo, @ptrCast(self)), p_value_);
            }
            pub inline fn getPrivateKey(self: *const T, pp_value_: ?*?*IX509PrivateKey) HRESULT {
                return @as(*const ICertPropertyKeyProvInfo.VTable, @ptrCast(self.vtable)).get_PrivateKey(@as(*const ICertPropertyKeyProvInfo, @ptrCast(self)), pp_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertyArchived_Value = Guid.initString("728ab337-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyArchived = &IID_ICertPropertyArchived_Value;
pub const ICertPropertyArchived = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn (
            self: *const ICertPropertyArchived,
            archived_value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Archived: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertPropertyArchived,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertProperty.MethodMixin(T);
            pub inline fn initialize(self: *const T, archived_value_: i16) HRESULT {
                return @as(*const ICertPropertyArchived.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ICertPropertyArchived, @ptrCast(self)), archived_value_);
            }
            pub inline fn getArchived(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const ICertPropertyArchived.VTable, @ptrCast(self.vtable)).get_Archived(@as(*const ICertPropertyArchived, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertyBackedUp_Value = Guid.initString("728ab338-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyBackedUp = &IID_ICertPropertyBackedUp_Value;
pub const ICertPropertyBackedUp = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        InitializeFromCurrentTime: *const fn (
            self: *const ICertPropertyBackedUp,
            backed_up_value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: *const fn (
            self: *const ICertPropertyBackedUp,
            backed_up_value: i16,
            date: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackedUpValue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertPropertyBackedUp,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackedUpTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertPropertyBackedUp,
            p_date: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertProperty.MethodMixin(T);
            pub inline fn initializeFromCurrentTime(self: *const T, backed_up_value_: i16) HRESULT {
                return @as(*const ICertPropertyBackedUp.VTable, @ptrCast(self.vtable)).InitializeFromCurrentTime(@as(*const ICertPropertyBackedUp, @ptrCast(self)), backed_up_value_);
            }
            pub inline fn initialize(self: *const T, backed_up_value_: i16, date_: f64) HRESULT {
                return @as(*const ICertPropertyBackedUp.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ICertPropertyBackedUp, @ptrCast(self)), backed_up_value_, date_);
            }
            pub inline fn getBackedUpValue(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const ICertPropertyBackedUp.VTable, @ptrCast(self.vtable)).get_BackedUpValue(@as(*const ICertPropertyBackedUp, @ptrCast(self)), p_value_);
            }
            pub inline fn getBackedUpTime(self: *const T, p_date_: ?*f64) HRESULT {
                return @as(*const ICertPropertyBackedUp.VTable, @ptrCast(self.vtable)).get_BackedUpTime(@as(*const ICertPropertyBackedUp, @ptrCast(self)), p_date_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertyEnrollment_Value = Guid.initString("728ab339-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyEnrollment = &IID_ICertPropertyEnrollment_Value;
pub const ICertPropertyEnrollment = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn (
            self: *const ICertPropertyEnrollment,
            request_id: i32,
            str_c_a_dns_name: ?BSTR,
            str_c_a_name: ?BSTR,
            str_friendly_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertPropertyEnrollment,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CADnsName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertPropertyEnrollment,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CAName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertPropertyEnrollment,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FriendlyName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertPropertyEnrollment,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertProperty.MethodMixin(T);
            pub inline fn initialize(self: *const T, request_id_: i32, str_c_a_dns_name_: ?BSTR, str_c_a_name_: ?BSTR, str_friendly_name_: ?BSTR) HRESULT {
                return @as(*const ICertPropertyEnrollment.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ICertPropertyEnrollment, @ptrCast(self)), request_id_, str_c_a_dns_name_, str_c_a_name_, str_friendly_name_);
            }
            pub inline fn getRequestId(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const ICertPropertyEnrollment.VTable, @ptrCast(self.vtable)).get_RequestId(@as(*const ICertPropertyEnrollment, @ptrCast(self)), p_value_);
            }
            pub inline fn getCADnsName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ICertPropertyEnrollment.VTable, @ptrCast(self.vtable)).get_CADnsName(@as(*const ICertPropertyEnrollment, @ptrCast(self)), p_value_);
            }
            pub inline fn getCAName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ICertPropertyEnrollment.VTable, @ptrCast(self.vtable)).get_CAName(@as(*const ICertPropertyEnrollment, @ptrCast(self)), p_value_);
            }
            pub inline fn getFriendlyName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ICertPropertyEnrollment.VTable, @ptrCast(self.vtable)).get_FriendlyName(@as(*const ICertPropertyEnrollment, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertyRenewal_Value = Guid.initString("728ab33a-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyRenewal = &IID_ICertPropertyRenewal_Value;
pub const ICertPropertyRenewal = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn (
            self: *const ICertPropertyRenewal,
            encoding: EncodingType,
            str_renewal_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromCertificateHash: *const fn (
            self: *const ICertPropertyRenewal,
            machine_context: i16,
            encoding: EncodingType,
            str_certificate: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Renewal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertPropertyRenewal,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertProperty.MethodMixin(T);
            pub inline fn initialize(self: *const T, encoding_: EncodingType, str_renewal_value_: ?BSTR) HRESULT {
                return @as(*const ICertPropertyRenewal.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ICertPropertyRenewal, @ptrCast(self)), encoding_, str_renewal_value_);
            }
            pub inline fn initializeFromCertificateHash(self: *const T, machine_context_: i16, encoding_: EncodingType, str_certificate_: ?BSTR) HRESULT {
                return @as(*const ICertPropertyRenewal.VTable, @ptrCast(self.vtable)).InitializeFromCertificateHash(@as(*const ICertPropertyRenewal, @ptrCast(self)), machine_context_, encoding_, str_certificate_);
            }
            pub inline fn getRenewal(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ICertPropertyRenewal.VTable, @ptrCast(self.vtable)).get_Renewal(@as(*const ICertPropertyRenewal, @ptrCast(self)), encoding_, p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICertPropertyArchivedKeyHash_Value = Guid.initString("728ab33b-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyArchivedKeyHash = &IID_ICertPropertyArchivedKeyHash_Value;
pub const ICertPropertyArchivedKeyHash = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn (
            self: *const ICertPropertyArchivedKeyHash,
            encoding: EncodingType,
            str_archived_key_hash_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ArchivedKeyHash: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertPropertyArchivedKeyHash,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertProperty.MethodMixin(T);
            pub inline fn initialize(self: *const T, encoding_: EncodingType, str_archived_key_hash_value_: ?BSTR) HRESULT {
                return @as(*const ICertPropertyArchivedKeyHash.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ICertPropertyArchivedKeyHash, @ptrCast(self)), encoding_, str_archived_key_hash_value_);
            }
            pub inline fn getArchivedKeyHash(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ICertPropertyArchivedKeyHash.VTable, @ptrCast(self.vtable)).get_ArchivedKeyHash(@as(*const ICertPropertyArchivedKeyHash, @ptrCast(self)), encoding_, p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const EnrollmentPolicyServerPropertyFlags = enum(i32) {
    None = 0,
    PolicyServer = 1,
};
pub const DefaultNone = EnrollmentPolicyServerPropertyFlags.None;
pub const DefaultPolicyServer = EnrollmentPolicyServerPropertyFlags.PolicyServer;

pub const PolicyServerUrlFlags = enum(i32) {
    None = 0,
    LocationGroupPolicy = 1,
    LocationRegistry = 2,
    UseClientId = 4,
    AutoEnrollmentEnabled = 16,
    AllowUnTrustedCA = 32,
};
pub const PsfNone = PolicyServerUrlFlags.None;
pub const PsfLocationGroupPolicy = PolicyServerUrlFlags.LocationGroupPolicy;
pub const PsfLocationRegistry = PolicyServerUrlFlags.LocationRegistry;
pub const PsfUseClientId = PolicyServerUrlFlags.UseClientId;
pub const PsfAutoEnrollmentEnabled = PolicyServerUrlFlags.AutoEnrollmentEnabled;
pub const PsfAllowUnTrustedCA = PolicyServerUrlFlags.AllowUnTrustedCA;

// TODO: this type is limited to platform 'windows6.1'
const IID_ICertPropertyEnrollmentPolicyServer_Value = Guid.initString("728ab34a-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ICertPropertyEnrollmentPolicyServer = &IID_ICertPropertyEnrollmentPolicyServer_Value;
pub const ICertPropertyEnrollmentPolicyServer = extern struct {
    pub const VTable = extern struct {
        base: ICertProperty.VTable,
        Initialize: *const fn (
            self: *const ICertPropertyEnrollmentPolicyServer,
            property_flags: EnrollmentPolicyServerPropertyFlags,
            auth_flags: X509EnrollmentAuthFlags,
            enrollment_server_auth_flags: X509EnrollmentAuthFlags,
            url_flags: PolicyServerUrlFlags,
            str_request_id: ?BSTR,
            str_url: ?BSTR,
            str_id: ?BSTR,
            str_enrollment_server_url: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicyServerUrl: *const fn (
            self: *const ICertPropertyEnrollmentPolicyServer,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicyServerId: *const fn (
            self: *const ICertPropertyEnrollmentPolicyServer,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnrollmentServerUrl: *const fn (
            self: *const ICertPropertyEnrollmentPolicyServer,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestIdString: *const fn (
            self: *const ICertPropertyEnrollmentPolicyServer,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyFlags: *const fn (
            self: *const ICertPropertyEnrollmentPolicyServer,
            p_value: ?*EnrollmentPolicyServerPropertyFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUrlFlags: *const fn (
            self: *const ICertPropertyEnrollmentPolicyServer,
            p_value: ?*PolicyServerUrlFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAuthentication: *const fn (
            self: *const ICertPropertyEnrollmentPolicyServer,
            p_value: ?*X509EnrollmentAuthFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnrollmentServerAuthentication: *const fn (
            self: *const ICertPropertyEnrollmentPolicyServer,
            p_value: ?*X509EnrollmentAuthFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertProperty.MethodMixin(T);
            pub inline fn initialize(self: *const T, property_flags_: EnrollmentPolicyServerPropertyFlags, auth_flags_: X509EnrollmentAuthFlags, enrollment_server_auth_flags_: X509EnrollmentAuthFlags, url_flags_: PolicyServerUrlFlags, str_request_id_: ?BSTR, str_url_: ?BSTR, str_id_: ?BSTR, str_enrollment_server_url_: ?BSTR) HRESULT {
                return @as(*const ICertPropertyEnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ICertPropertyEnrollmentPolicyServer, @ptrCast(self)), property_flags_, auth_flags_, enrollment_server_auth_flags_, url_flags_, str_request_id_, str_url_, str_id_, str_enrollment_server_url_);
            }
            pub inline fn getPolicyServerUrl(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ICertPropertyEnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetPolicyServerUrl(@as(*const ICertPropertyEnrollmentPolicyServer, @ptrCast(self)), p_value_);
            }
            pub inline fn getPolicyServerId(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ICertPropertyEnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetPolicyServerId(@as(*const ICertPropertyEnrollmentPolicyServer, @ptrCast(self)), p_value_);
            }
            pub inline fn getEnrollmentServerUrl(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ICertPropertyEnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetEnrollmentServerUrl(@as(*const ICertPropertyEnrollmentPolicyServer, @ptrCast(self)), p_value_);
            }
            pub inline fn getRequestIdString(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ICertPropertyEnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetRequestIdString(@as(*const ICertPropertyEnrollmentPolicyServer, @ptrCast(self)), p_value_);
            }
            pub inline fn getPropertyFlags(self: *const T, p_value_: ?*EnrollmentPolicyServerPropertyFlags) HRESULT {
                return @as(*const ICertPropertyEnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetPropertyFlags(@as(*const ICertPropertyEnrollmentPolicyServer, @ptrCast(self)), p_value_);
            }
            pub inline fn getUrlFlags(self: *const T, p_value_: ?*PolicyServerUrlFlags) HRESULT {
                return @as(*const ICertPropertyEnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetUrlFlags(@as(*const ICertPropertyEnrollmentPolicyServer, @ptrCast(self)), p_value_);
            }
            pub inline fn getAuthentication(self: *const T, p_value_: ?*X509EnrollmentAuthFlags) HRESULT {
                return @as(*const ICertPropertyEnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetAuthentication(@as(*const ICertPropertyEnrollmentPolicyServer, @ptrCast(self)), p_value_);
            }
            pub inline fn getEnrollmentServerAuthentication(self: *const T, p_value_: ?*X509EnrollmentAuthFlags) HRESULT {
                return @as(*const ICertPropertyEnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetEnrollmentServerAuthentication(@as(*const ICertPropertyEnrollmentPolicyServer, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509SignatureInformation_Value = Guid.initString("728ab33c-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509SignatureInformation = &IID_IX509SignatureInformation_Value;
pub const IX509SignatureInformation = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SignatureInformation,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SignatureInformation,
            p_value: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PublicKeyAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SignatureInformation,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PublicKeyAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SignatureInformation,
            p_value: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parameters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SignatureInformation,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Parameters: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SignatureInformation,
            encoding: EncodingType,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AlternateSignatureAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SignatureInformation,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AlternateSignatureAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SignatureInformation,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AlternateSignatureAlgorithmSet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SignatureInformation,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NullSigned: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SignatureInformation,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NullSigned: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SignatureInformation,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSignatureAlgorithm: *const fn (
            self: *const IX509SignatureInformation,
            pkcs7_signature: i16,
            signature_key: i16,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultValues: *const fn (
            self: *const IX509SignatureInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getHashAlgorithm(self: *const T, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const IX509SignatureInformation.VTable, @ptrCast(self.vtable)).get_HashAlgorithm(@as(*const IX509SignatureInformation, @ptrCast(self)), pp_value_);
            }
            pub inline fn putHashAlgorithm(self: *const T, p_value_: ?*IObjectId) HRESULT {
                return @as(*const IX509SignatureInformation.VTable, @ptrCast(self.vtable)).put_HashAlgorithm(@as(*const IX509SignatureInformation, @ptrCast(self)), p_value_);
            }
            pub inline fn getPublicKeyAlgorithm(self: *const T, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const IX509SignatureInformation.VTable, @ptrCast(self.vtable)).get_PublicKeyAlgorithm(@as(*const IX509SignatureInformation, @ptrCast(self)), pp_value_);
            }
            pub inline fn putPublicKeyAlgorithm(self: *const T, p_value_: ?*IObjectId) HRESULT {
                return @as(*const IX509SignatureInformation.VTable, @ptrCast(self.vtable)).put_PublicKeyAlgorithm(@as(*const IX509SignatureInformation, @ptrCast(self)), p_value_);
            }
            pub inline fn getParameters(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509SignatureInformation.VTable, @ptrCast(self.vtable)).get_Parameters(@as(*const IX509SignatureInformation, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn putParameters(self: *const T, encoding_: EncodingType, value_: ?BSTR) HRESULT {
                return @as(*const IX509SignatureInformation.VTable, @ptrCast(self.vtable)).put_Parameters(@as(*const IX509SignatureInformation, @ptrCast(self)), encoding_, value_);
            }
            pub inline fn getAlternateSignatureAlgorithm(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509SignatureInformation.VTable, @ptrCast(self.vtable)).get_AlternateSignatureAlgorithm(@as(*const IX509SignatureInformation, @ptrCast(self)), p_value_);
            }
            pub inline fn putAlternateSignatureAlgorithm(self: *const T, value_: i16) HRESULT {
                return @as(*const IX509SignatureInformation.VTable, @ptrCast(self.vtable)).put_AlternateSignatureAlgorithm(@as(*const IX509SignatureInformation, @ptrCast(self)), value_);
            }
            pub inline fn getAlternateSignatureAlgorithmSet(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509SignatureInformation.VTable, @ptrCast(self.vtable)).get_AlternateSignatureAlgorithmSet(@as(*const IX509SignatureInformation, @ptrCast(self)), p_value_);
            }
            pub inline fn getNullSigned(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509SignatureInformation.VTable, @ptrCast(self.vtable)).get_NullSigned(@as(*const IX509SignatureInformation, @ptrCast(self)), p_value_);
            }
            pub inline fn putNullSigned(self: *const T, value_: i16) HRESULT {
                return @as(*const IX509SignatureInformation.VTable, @ptrCast(self.vtable)).put_NullSigned(@as(*const IX509SignatureInformation, @ptrCast(self)), value_);
            }
            pub inline fn getSignatureAlgorithm(self: *const T, pkcs7_signature_: i16, signature_key_: i16, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const IX509SignatureInformation.VTable, @ptrCast(self.vtable)).GetSignatureAlgorithm(@as(*const IX509SignatureInformation, @ptrCast(self)), pkcs7_signature_, signature_key_, pp_value_);
            }
            pub inline fn setDefaultValues(self: *const T) HRESULT {
                return @as(*const IX509SignatureInformation.VTable, @ptrCast(self.vtable)).SetDefaultValues(@as(*const IX509SignatureInformation, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISignerCertificate_Value = Guid.initString("728ab33d-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ISignerCertificate = &IID_ISignerCertificate_Value;
pub const ISignerCertificate = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const ISignerCertificate,
            machine_context: i16,
            verify_type: X509PrivateKeyVerify,
            encoding: EncodingType,
            str_certificate: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Certificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISignerCertificate,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivateKey: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISignerCertificate,
            pp_value: ?*?*IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Silent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISignerCertificate,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Silent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISignerCertificate,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ParentWindow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISignerCertificate,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ParentWindow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISignerCertificate,
            value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UIContextMessage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISignerCertificate,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UIContextMessage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISignerCertificate,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Pin: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISignerCertificate,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SignatureInformation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISignerCertificate,
            pp_value: ?*?*IX509SignatureInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, machine_context_: i16, verify_type_: X509PrivateKeyVerify, encoding_: EncodingType, str_certificate_: ?BSTR) HRESULT {
                return @as(*const ISignerCertificate.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ISignerCertificate, @ptrCast(self)), machine_context_, verify_type_, encoding_, str_certificate_);
            }
            pub inline fn getCertificate(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ISignerCertificate.VTable, @ptrCast(self.vtable)).get_Certificate(@as(*const ISignerCertificate, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn getPrivateKey(self: *const T, pp_value_: ?*?*IX509PrivateKey) HRESULT {
                return @as(*const ISignerCertificate.VTable, @ptrCast(self.vtable)).get_PrivateKey(@as(*const ISignerCertificate, @ptrCast(self)), pp_value_);
            }
            pub inline fn getSilent(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const ISignerCertificate.VTable, @ptrCast(self.vtable)).get_Silent(@as(*const ISignerCertificate, @ptrCast(self)), p_value_);
            }
            pub inline fn putSilent(self: *const T, value_: i16) HRESULT {
                return @as(*const ISignerCertificate.VTable, @ptrCast(self.vtable)).put_Silent(@as(*const ISignerCertificate, @ptrCast(self)), value_);
            }
            pub inline fn getParentWindow(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const ISignerCertificate.VTable, @ptrCast(self.vtable)).get_ParentWindow(@as(*const ISignerCertificate, @ptrCast(self)), p_value_);
            }
            pub inline fn putParentWindow(self: *const T, value_: i32) HRESULT {
                return @as(*const ISignerCertificate.VTable, @ptrCast(self.vtable)).put_ParentWindow(@as(*const ISignerCertificate, @ptrCast(self)), value_);
            }
            pub inline fn getUIContextMessage(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ISignerCertificate.VTable, @ptrCast(self.vtable)).get_UIContextMessage(@as(*const ISignerCertificate, @ptrCast(self)), p_value_);
            }
            pub inline fn putUIContextMessage(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const ISignerCertificate.VTable, @ptrCast(self.vtable)).put_UIContextMessage(@as(*const ISignerCertificate, @ptrCast(self)), value_);
            }
            pub inline fn putPin(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const ISignerCertificate.VTable, @ptrCast(self.vtable)).put_Pin(@as(*const ISignerCertificate, @ptrCast(self)), value_);
            }
            pub inline fn getSignatureInformation(self: *const T, pp_value_: ?*?*IX509SignatureInformation) HRESULT {
                return @as(*const ISignerCertificate.VTable, @ptrCast(self.vtable)).get_SignatureInformation(@as(*const ISignerCertificate, @ptrCast(self)), pp_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISignerCertificates_Value = Guid.initString("728ab33e-217d-11da-b2a4-000e7bbb2b09");
pub const IID_ISignerCertificates = &IID_ISignerCertificates_Value;
pub const ISignerCertificates = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISignerCertificates,
            index: i32,
            p_val: ?*?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISignerCertificates,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISignerCertificates,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const ISignerCertificates,
            p_val: ?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ISignerCertificates,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const ISignerCertificates,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Find: *const fn (
            self: *const ISignerCertificates,
            p_signer_cert: ?*ISignerCertificate,
            pi_signer_cert: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItemByIndex(self: *const T, index_: i32, p_val_: ?*?*ISignerCertificate) HRESULT {
                return @as(*const ISignerCertificates.VTable, @ptrCast(self.vtable)).get_ItemByIndex(@as(*const ISignerCertificates, @ptrCast(self)), index_, p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const ISignerCertificates.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ISignerCertificates, @ptrCast(self)), p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const ISignerCertificates.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ISignerCertificates, @ptrCast(self)), p_val_);
            }
            pub inline fn add(self: *const T, p_val_: ?*ISignerCertificate) HRESULT {
                return @as(*const ISignerCertificates.VTable, @ptrCast(self.vtable)).Add(@as(*const ISignerCertificates, @ptrCast(self)), p_val_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const ISignerCertificates.VTable, @ptrCast(self.vtable)).Remove(@as(*const ISignerCertificates, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const ISignerCertificates.VTable, @ptrCast(self.vtable)).Clear(@as(*const ISignerCertificates, @ptrCast(self)));
            }
            pub inline fn find(self: *const T, p_signer_cert_: ?*ISignerCertificate, pi_signer_cert_: ?*i32) HRESULT {
                return @as(*const ISignerCertificates.VTable, @ptrCast(self.vtable)).Find(@as(*const ISignerCertificates, @ptrCast(self)), p_signer_cert_, pi_signer_cert_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509NameValuePair_Value = Guid.initString("728ab33f-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509NameValuePair = &IID_IX509NameValuePair_Value;
pub const IX509NameValuePair = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const IX509NameValuePair,
            str_name: ?BSTR,
            str_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509NameValuePair,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509NameValuePair,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, str_name_: ?BSTR, str_value_: ?BSTR) HRESULT {
                return @as(*const IX509NameValuePair.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IX509NameValuePair, @ptrCast(self)), str_name_, str_value_);
            }
            pub inline fn getValue(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509NameValuePair.VTable, @ptrCast(self.vtable)).get_Value(@as(*const IX509NameValuePair, @ptrCast(self)), p_value_);
            }
            pub inline fn getName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509NameValuePair.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IX509NameValuePair, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509NameValuePairs_Value = Guid.initString("728ab340-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509NameValuePairs = &IID_IX509NameValuePairs_Value;
pub const IX509NameValuePairs = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509NameValuePairs,
            index: i32,
            p_val: ?*?*IX509NameValuePair,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509NameValuePairs,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509NameValuePairs,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IX509NameValuePairs,
            p_val: ?*IX509NameValuePair,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IX509NameValuePairs,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IX509NameValuePairs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItemByIndex(self: *const T, index_: i32, p_val_: ?*?*IX509NameValuePair) HRESULT {
                return @as(*const IX509NameValuePairs.VTable, @ptrCast(self.vtable)).get_ItemByIndex(@as(*const IX509NameValuePairs, @ptrCast(self)), index_, p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IX509NameValuePairs.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IX509NameValuePairs, @ptrCast(self)), p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const IX509NameValuePairs.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IX509NameValuePairs, @ptrCast(self)), p_val_);
            }
            pub inline fn add(self: *const T, p_val_: ?*IX509NameValuePair) HRESULT {
                return @as(*const IX509NameValuePairs.VTable, @ptrCast(self.vtable)).Add(@as(*const IX509NameValuePairs, @ptrCast(self)), p_val_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const IX509NameValuePairs.VTable, @ptrCast(self.vtable)).Remove(@as(*const IX509NameValuePairs, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IX509NameValuePairs.VTable, @ptrCast(self.vtable)).Clear(@as(*const IX509NameValuePairs, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const EnrollmentTemplateProperty = enum(i32) {
    CommonName = 1,
    FriendlyName = 2,
    EKUs = 3,
    CryptoProviders = 4,
    MajorRevision = 5,
    Description = 6,
    KeySpec = 7,
    SchemaVersion = 8,
    MinorRevision = 9,
    RASignatureCount = 10,
    MinimumKeySize = 11,
    OID = 12,
    Supersede = 13,
    RACertificatePolicies = 14,
    RAEKUs = 15,
    CertificatePolicies = 16,
    V1ApplicationPolicy = 17,
    AsymmetricAlgorithm = 18,
    KeySecurityDescriptor = 19,
    SymmetricAlgorithm = 20,
    SymmetricKeyLength = 21,
    HashAlgorithm = 22,
    KeyUsage = 23,
    EnrollmentFlags = 24,
    SubjectNameFlags = 25,
    PrivateKeyFlags = 26,
    GeneralFlags = 27,
    SecurityDescriptor = 28,
    Extensions = 29,
    ValidityPeriod = 30,
    RenewalPeriod = 31,
};
pub const TemplatePropCommonName = EnrollmentTemplateProperty.CommonName;
pub const TemplatePropFriendlyName = EnrollmentTemplateProperty.FriendlyName;
pub const TemplatePropEKUs = EnrollmentTemplateProperty.EKUs;
pub const TemplatePropCryptoProviders = EnrollmentTemplateProperty.CryptoProviders;
pub const TemplatePropMajorRevision = EnrollmentTemplateProperty.MajorRevision;
pub const TemplatePropDescription = EnrollmentTemplateProperty.Description;
pub const TemplatePropKeySpec = EnrollmentTemplateProperty.KeySpec;
pub const TemplatePropSchemaVersion = EnrollmentTemplateProperty.SchemaVersion;
pub const TemplatePropMinorRevision = EnrollmentTemplateProperty.MinorRevision;
pub const TemplatePropRASignatureCount = EnrollmentTemplateProperty.RASignatureCount;
pub const TemplatePropMinimumKeySize = EnrollmentTemplateProperty.MinimumKeySize;
pub const TemplatePropOID = EnrollmentTemplateProperty.OID;
pub const TemplatePropSupersede = EnrollmentTemplateProperty.Supersede;
pub const TemplatePropRACertificatePolicies = EnrollmentTemplateProperty.RACertificatePolicies;
pub const TemplatePropRAEKUs = EnrollmentTemplateProperty.RAEKUs;
pub const TemplatePropCertificatePolicies = EnrollmentTemplateProperty.CertificatePolicies;
pub const TemplatePropV1ApplicationPolicy = EnrollmentTemplateProperty.V1ApplicationPolicy;
pub const TemplatePropAsymmetricAlgorithm = EnrollmentTemplateProperty.AsymmetricAlgorithm;
pub const TemplatePropKeySecurityDescriptor = EnrollmentTemplateProperty.KeySecurityDescriptor;
pub const TemplatePropSymmetricAlgorithm = EnrollmentTemplateProperty.SymmetricAlgorithm;
pub const TemplatePropSymmetricKeyLength = EnrollmentTemplateProperty.SymmetricKeyLength;
pub const TemplatePropHashAlgorithm = EnrollmentTemplateProperty.HashAlgorithm;
pub const TemplatePropKeyUsage = EnrollmentTemplateProperty.KeyUsage;
pub const TemplatePropEnrollmentFlags = EnrollmentTemplateProperty.EnrollmentFlags;
pub const TemplatePropSubjectNameFlags = EnrollmentTemplateProperty.SubjectNameFlags;
pub const TemplatePropPrivateKeyFlags = EnrollmentTemplateProperty.PrivateKeyFlags;
pub const TemplatePropGeneralFlags = EnrollmentTemplateProperty.GeneralFlags;
pub const TemplatePropSecurityDescriptor = EnrollmentTemplateProperty.SecurityDescriptor;
pub const TemplatePropExtensions = EnrollmentTemplateProperty.Extensions;
pub const TemplatePropValidityPeriod = EnrollmentTemplateProperty.ValidityPeriod;
pub const TemplatePropRenewalPeriod = EnrollmentTemplateProperty.RenewalPeriod;

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509CertificateTemplate_Value = Guid.initString("54244a13-555a-4e22-896d-1b0e52f76406");
pub const IID_IX509CertificateTemplate = &IID_IX509CertificateTemplate_Value;
pub const IX509CertificateTemplate = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Property: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateTemplate,
            property: EnrollmentTemplateProperty,
            p_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getProperty(self: *const T, property_: EnrollmentTemplateProperty, p_value_: ?*VARIANT) HRESULT {
                return @as(*const IX509CertificateTemplate.VTable, @ptrCast(self.vtable)).get_Property(@as(*const IX509CertificateTemplate, @ptrCast(self)), property_, p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509CertificateTemplates_Value = Guid.initString("13b79003-2181-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateTemplates = &IID_IX509CertificateTemplates_Value;
pub const IX509CertificateTemplates = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateTemplates,
            index: i32,
            p_val: ?*?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateTemplates,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateTemplates,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IX509CertificateTemplates,
            p_val: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IX509CertificateTemplates,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IX509CertificateTemplates,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateTemplates,
            bstr_name: ?BSTR,
            pp_value: ?*?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByOid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateTemplates,
            p_oid: ?*IObjectId,
            pp_value: ?*?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItemByIndex(self: *const T, index_: i32, p_val_: ?*?*IX509CertificateTemplate) HRESULT {
                return @as(*const IX509CertificateTemplates.VTable, @ptrCast(self.vtable)).get_ItemByIndex(@as(*const IX509CertificateTemplates, @ptrCast(self)), index_, p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IX509CertificateTemplates.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IX509CertificateTemplates, @ptrCast(self)), p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const IX509CertificateTemplates.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IX509CertificateTemplates, @ptrCast(self)), p_val_);
            }
            pub inline fn add(self: *const T, p_val_: ?*IX509CertificateTemplate) HRESULT {
                return @as(*const IX509CertificateTemplates.VTable, @ptrCast(self.vtable)).Add(@as(*const IX509CertificateTemplates, @ptrCast(self)), p_val_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const IX509CertificateTemplates.VTable, @ptrCast(self.vtable)).Remove(@as(*const IX509CertificateTemplates, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IX509CertificateTemplates.VTable, @ptrCast(self.vtable)).Clear(@as(*const IX509CertificateTemplates, @ptrCast(self)));
            }
            pub inline fn getItemByName(self: *const T, bstr_name_: ?BSTR, pp_value_: ?*?*IX509CertificateTemplate) HRESULT {
                return @as(*const IX509CertificateTemplates.VTable, @ptrCast(self.vtable)).get_ItemByName(@as(*const IX509CertificateTemplates, @ptrCast(self)), bstr_name_, pp_value_);
            }
            pub inline fn getItemByOid(self: *const T, p_oid_: ?*IObjectId, pp_value_: ?*?*IX509CertificateTemplate) HRESULT {
                return @as(*const IX509CertificateTemplates.VTable, @ptrCast(self.vtable)).get_ItemByOid(@as(*const IX509CertificateTemplates, @ptrCast(self)), p_oid_, pp_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CommitTemplateFlags = enum(i32) {
    SaveTemplateGenerateOID = 1,
    SaveTemplateUseCurrentOID = 2,
    SaveTemplateOverwrite = 3,
    DeleteTemplate = 4,
};
pub const CommitFlagSaveTemplateGenerateOID = CommitTemplateFlags.SaveTemplateGenerateOID;
pub const CommitFlagSaveTemplateUseCurrentOID = CommitTemplateFlags.SaveTemplateUseCurrentOID;
pub const CommitFlagSaveTemplateOverwrite = CommitTemplateFlags.SaveTemplateOverwrite;
pub const CommitFlagDeleteTemplate = CommitTemplateFlags.DeleteTemplate;

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509CertificateTemplateWritable_Value = Guid.initString("f49466a7-395a-4e9e-b6e7-32b331600dc0");
pub const IID_IX509CertificateTemplateWritable = &IID_IX509CertificateTemplateWritable_Value;
pub const IX509CertificateTemplateWritable = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const IX509CertificateTemplateWritable,
            p_value: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: *const fn (
            self: *const IX509CertificateTemplateWritable,
            commit_flags: CommitTemplateFlags,
            str_server_context: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Property: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateTemplateWritable,
            property: EnrollmentTemplateProperty,
            p_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Property: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateTemplateWritable,
            property: EnrollmentTemplateProperty,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Template: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateTemplateWritable,
            pp_value: ?*?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_value_: ?*IX509CertificateTemplate) HRESULT {
                return @as(*const IX509CertificateTemplateWritable.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IX509CertificateTemplateWritable, @ptrCast(self)), p_value_);
            }
            pub inline fn commit(self: *const T, commit_flags_: CommitTemplateFlags, str_server_context_: ?BSTR) HRESULT {
                return @as(*const IX509CertificateTemplateWritable.VTable, @ptrCast(self.vtable)).Commit(@as(*const IX509CertificateTemplateWritable, @ptrCast(self)), commit_flags_, str_server_context_);
            }
            pub inline fn getProperty(self: *const T, property_: EnrollmentTemplateProperty, p_value_: ?*VARIANT) HRESULT {
                return @as(*const IX509CertificateTemplateWritable.VTable, @ptrCast(self.vtable)).get_Property(@as(*const IX509CertificateTemplateWritable, @ptrCast(self)), property_, p_value_);
            }
            pub inline fn putProperty(self: *const T, property_: EnrollmentTemplateProperty, value_: VARIANT) HRESULT {
                return @as(*const IX509CertificateTemplateWritable.VTable, @ptrCast(self.vtable)).put_Property(@as(*const IX509CertificateTemplateWritable, @ptrCast(self)), property_, value_);
            }
            pub inline fn getTemplate(self: *const T, pp_value_: ?*?*IX509CertificateTemplate) HRESULT {
                return @as(*const IX509CertificateTemplateWritable.VTable, @ptrCast(self.vtable)).get_Template(@as(*const IX509CertificateTemplateWritable, @ptrCast(self)), pp_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const EnrollmentCAProperty = enum(i32) {
    CommonName = 1,
    DistinguishedName = 2,
    SanitizedName = 3,
    SanitizedShortName = 4,
    DNSName = 5,
    CertificateTypes = 6,
    Certificate = 7,
    Description = 8,
    WebServers = 9,
    SiteName = 10,
    Security = 11,
    RenewalOnly = 12,
};
pub const CAPropCommonName = EnrollmentCAProperty.CommonName;
pub const CAPropDistinguishedName = EnrollmentCAProperty.DistinguishedName;
pub const CAPropSanitizedName = EnrollmentCAProperty.SanitizedName;
pub const CAPropSanitizedShortName = EnrollmentCAProperty.SanitizedShortName;
pub const CAPropDNSName = EnrollmentCAProperty.DNSName;
pub const CAPropCertificateTypes = EnrollmentCAProperty.CertificateTypes;
pub const CAPropCertificate = EnrollmentCAProperty.Certificate;
pub const CAPropDescription = EnrollmentCAProperty.Description;
pub const CAPropWebServers = EnrollmentCAProperty.WebServers;
pub const CAPropSiteName = EnrollmentCAProperty.SiteName;
pub const CAPropSecurity = EnrollmentCAProperty.Security;
pub const CAPropRenewalOnly = EnrollmentCAProperty.RenewalOnly;

// TODO: this type is limited to platform 'windows6.1'
const IID_ICertificationAuthority_Value = Guid.initString("835d1f61-1e95-4bc8-b4d3-976c42b968f7");
pub const IID_ICertificationAuthority = &IID_ICertificationAuthority_Value;
pub const ICertificationAuthority = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Property: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertificationAuthority,
            property: EnrollmentCAProperty,
            p_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getProperty(self: *const T, property_: EnrollmentCAProperty, p_value_: ?*VARIANT) HRESULT {
                return @as(*const ICertificationAuthority.VTable, @ptrCast(self.vtable)).get_Property(@as(*const ICertificationAuthority, @ptrCast(self)), property_, p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ICertificationAuthorities_Value = Guid.initString("13b79005-2181-11da-b2a4-000e7bbb2b09");
pub const IID_ICertificationAuthorities = &IID_ICertificationAuthorities_Value;
pub const ICertificationAuthorities = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertificationAuthorities,
            index: i32,
            p_val: ?*?*ICertificationAuthority,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertificationAuthorities,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertificationAuthorities,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const ICertificationAuthorities,
            p_val: ?*ICertificationAuthority,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ICertificationAuthorities,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const ICertificationAuthorities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ComputeSiteCosts: *const fn (
            self: *const ICertificationAuthorities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertificationAuthorities,
            str_name: ?BSTR,
            pp_value: ?*?*ICertificationAuthority,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItemByIndex(self: *const T, index_: i32, p_val_: ?*?*ICertificationAuthority) HRESULT {
                return @as(*const ICertificationAuthorities.VTable, @ptrCast(self.vtable)).get_ItemByIndex(@as(*const ICertificationAuthorities, @ptrCast(self)), index_, p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const ICertificationAuthorities.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ICertificationAuthorities, @ptrCast(self)), p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const ICertificationAuthorities.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ICertificationAuthorities, @ptrCast(self)), p_val_);
            }
            pub inline fn add(self: *const T, p_val_: ?*ICertificationAuthority) HRESULT {
                return @as(*const ICertificationAuthorities.VTable, @ptrCast(self.vtable)).Add(@as(*const ICertificationAuthorities, @ptrCast(self)), p_val_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const ICertificationAuthorities.VTable, @ptrCast(self.vtable)).Remove(@as(*const ICertificationAuthorities, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const ICertificationAuthorities.VTable, @ptrCast(self.vtable)).Clear(@as(*const ICertificationAuthorities, @ptrCast(self)));
            }
            pub inline fn computeSiteCosts(self: *const T) HRESULT {
                return @as(*const ICertificationAuthorities.VTable, @ptrCast(self.vtable)).ComputeSiteCosts(@as(*const ICertificationAuthorities, @ptrCast(self)));
            }
            pub inline fn getItemByName(self: *const T, str_name_: ?BSTR, pp_value_: ?*?*ICertificationAuthority) HRESULT {
                return @as(*const ICertificationAuthorities.VTable, @ptrCast(self.vtable)).get_ItemByName(@as(*const ICertificationAuthorities, @ptrCast(self)), str_name_, pp_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const X509EnrollmentPolicyLoadOption = enum(i32) {
    Default = 0,
    CacheOnly = 1,
    Reload = 2,
    RegisterForADChanges = 4,
};
pub const LoadOptionDefault = X509EnrollmentPolicyLoadOption.Default;
pub const LoadOptionCacheOnly = X509EnrollmentPolicyLoadOption.CacheOnly;
pub const LoadOptionReload = X509EnrollmentPolicyLoadOption.Reload;
pub const LoadOptionRegisterForADChanges = X509EnrollmentPolicyLoadOption.RegisterForADChanges;

pub const EnrollmentPolicyFlags = enum(i32) {
    GroupPolicyList = 2,
    UserServerList = 4,
};
pub const DisableGroupPolicyList = EnrollmentPolicyFlags.GroupPolicyList;
pub const DisableUserServerList = EnrollmentPolicyFlags.UserServerList;

pub const PolicyServerUrlPropertyID = enum(i32) {
    PolicyID = 0,
    FriendlyName = 1,
};
pub const PsPolicyID = PolicyServerUrlPropertyID.PolicyID;
pub const PsFriendlyName = PolicyServerUrlPropertyID.FriendlyName;

pub const X509EnrollmentPolicyExportFlags = enum(i32) {
    Templates = 1,
    OIDs = 2,
    CAs = 4,
};
pub const ExportTemplates = X509EnrollmentPolicyExportFlags.Templates;
pub const ExportOIDs = X509EnrollmentPolicyExportFlags.OIDs;
pub const ExportCAs = X509EnrollmentPolicyExportFlags.CAs;

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509EnrollmentPolicyServer_Value = Guid.initString("13b79026-2181-11da-b2a4-000e7bbb2b09");
pub const IID_IX509EnrollmentPolicyServer = &IID_IX509EnrollmentPolicyServer_Value;
pub const IX509EnrollmentPolicyServer = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            bstr_policy_server_url: ?BSTR,
            bstr_policy_server_id: ?BSTR,
            auth_flags: X509EnrollmentAuthFlags,
            f_is_un_trusted: i16,
            context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadPolicy: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            option: X509EnrollmentPolicyLoadOption,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTemplates: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            p_templates: ?*?*IX509CertificateTemplates,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAsForTemplate: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            p_template: ?*IX509CertificateTemplate,
            pp_c_as: ?*?*ICertificationAuthorities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAs: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            pp_c_as: ?*?*ICertificationAuthorities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Validate: *const fn (
            self: *const IX509EnrollmentPolicyServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCustomOids: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            pp_object_ids: ?*?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextUpdateTime: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            p_date: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastUpdateTime: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            p_date: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicyServerUrl: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicyServerId: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFriendlyName: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIsDefaultCEP: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUseClientId: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllowUnTrustedCA: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCachePath: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCacheDir: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAuthFlags: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            p_value: ?*X509EnrollmentAuthFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCredential: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            h_wnd_parent: i32,
            flag: X509EnrollmentAuthFlags,
            str_credential: ?BSTR,
            str_password: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryChanges: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeImport: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            val: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Export: *const fn (
            self: *const IX509EnrollmentPolicyServer,
            export_flags: X509EnrollmentPolicyExportFlags,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Cost: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509EnrollmentPolicyServer,
            p_value: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Cost: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509EnrollmentPolicyServer,
            value: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, bstr_policy_server_url_: ?BSTR, bstr_policy_server_id_: ?BSTR, auth_flags_: X509EnrollmentAuthFlags, f_is_un_trusted_: i16, context_: X509CertificateEnrollmentContext) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), bstr_policy_server_url_, bstr_policy_server_id_, auth_flags_, f_is_un_trusted_, context_);
            }
            pub inline fn loadPolicy(self: *const T, option_: X509EnrollmentPolicyLoadOption) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).LoadPolicy(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), option_);
            }
            pub inline fn getTemplates(self: *const T, p_templates_: ?*?*IX509CertificateTemplates) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetTemplates(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), p_templates_);
            }
            pub inline fn getCAsForTemplate(self: *const T, p_template_: ?*IX509CertificateTemplate, pp_c_as_: ?*?*ICertificationAuthorities) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetCAsForTemplate(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), p_template_, pp_c_as_);
            }
            pub inline fn getCAs(self: *const T, pp_c_as_: ?*?*ICertificationAuthorities) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetCAs(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), pp_c_as_);
            }
            pub inline fn validate(self: *const T) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).Validate(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)));
            }
            pub inline fn getCustomOids(self: *const T, pp_object_ids_: ?*?*IObjectIds) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetCustomOids(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), pp_object_ids_);
            }
            pub inline fn getNextUpdateTime(self: *const T, p_date_: ?*f64) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetNextUpdateTime(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), p_date_);
            }
            pub inline fn getLastUpdateTime(self: *const T, p_date_: ?*f64) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetLastUpdateTime(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), p_date_);
            }
            pub inline fn getPolicyServerUrl(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetPolicyServerUrl(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), p_value_);
            }
            pub inline fn getPolicyServerId(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetPolicyServerId(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), p_value_);
            }
            pub inline fn getFriendlyName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetFriendlyName(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), p_value_);
            }
            pub inline fn getIsDefaultCEP(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetIsDefaultCEP(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), p_value_);
            }
            pub inline fn getUseClientId(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetUseClientId(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), p_value_);
            }
            pub inline fn getAllowUnTrustedCA(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetAllowUnTrustedCA(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), p_value_);
            }
            pub inline fn getCachePath(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetCachePath(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), p_value_);
            }
            pub inline fn getCacheDir(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetCacheDir(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), p_value_);
            }
            pub inline fn getAuthFlags(self: *const T, p_value_: ?*X509EnrollmentAuthFlags) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).GetAuthFlags(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), p_value_);
            }
            pub inline fn setCredential(self: *const T, h_wnd_parent_: i32, flag_: X509EnrollmentAuthFlags, str_credential_: ?BSTR, str_password_: ?BSTR) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).SetCredential(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), h_wnd_parent_, flag_, str_credential_, str_password_);
            }
            pub inline fn queryChanges(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).QueryChanges(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), p_value_);
            }
            pub inline fn initializeImport(self: *const T, val_: VARIANT) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).InitializeImport(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), val_);
            }
            pub inline fn @"export"(self: *const T, export_flags_: X509EnrollmentPolicyExportFlags, p_val_: ?*VARIANT) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).Export(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), export_flags_, p_val_);
            }
            pub inline fn getCost(self: *const T, p_value_: ?*u32) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).get_Cost(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), p_value_);
            }
            pub inline fn putCost(self: *const T, value_: u32) HRESULT {
                return @as(*const IX509EnrollmentPolicyServer.VTable, @ptrCast(self.vtable)).put_Cost(@as(*const IX509EnrollmentPolicyServer, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509PolicyServerUrl_Value = Guid.initString("884e204a-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509PolicyServerUrl = &IID_IX509PolicyServerUrl_Value;
pub const IX509PolicyServerUrl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const IX509PolicyServerUrl,
            context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Url: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PolicyServerUrl,
            pp_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Url: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PolicyServerUrl,
            p_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Default: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PolicyServerUrl,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Default: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PolicyServerUrl,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Flags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PolicyServerUrl,
            p_value: ?*PolicyServerUrlFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Flags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PolicyServerUrl,
            flags: PolicyServerUrlFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AuthFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PolicyServerUrl,
            p_value: ?*X509EnrollmentAuthFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AuthFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PolicyServerUrl,
            flags: X509EnrollmentAuthFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Cost: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PolicyServerUrl,
            p_value: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Cost: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PolicyServerUrl,
            value: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringProperty: *const fn (
            self: *const IX509PolicyServerUrl,
            property_id: PolicyServerUrlPropertyID,
            pp_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStringProperty: *const fn (
            self: *const IX509PolicyServerUrl,
            property_id: PolicyServerUrlPropertyID,
            p_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateRegistry: *const fn (
            self: *const IX509PolicyServerUrl,
            context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveFromRegistry: *const fn (
            self: *const IX509PolicyServerUrl,
            context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, context_: X509CertificateEnrollmentContext) HRESULT {
                return @as(*const IX509PolicyServerUrl.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IX509PolicyServerUrl, @ptrCast(self)), context_);
            }
            pub inline fn getUrl(self: *const T, pp_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509PolicyServerUrl.VTable, @ptrCast(self.vtable)).get_Url(@as(*const IX509PolicyServerUrl, @ptrCast(self)), pp_value_);
            }
            pub inline fn putUrl(self: *const T, p_value_: ?BSTR) HRESULT {
                return @as(*const IX509PolicyServerUrl.VTable, @ptrCast(self.vtable)).put_Url(@as(*const IX509PolicyServerUrl, @ptrCast(self)), p_value_);
            }
            pub inline fn getDefault(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509PolicyServerUrl.VTable, @ptrCast(self.vtable)).get_Default(@as(*const IX509PolicyServerUrl, @ptrCast(self)), p_value_);
            }
            pub inline fn putDefault(self: *const T, value_: i16) HRESULT {
                return @as(*const IX509PolicyServerUrl.VTable, @ptrCast(self.vtable)).put_Default(@as(*const IX509PolicyServerUrl, @ptrCast(self)), value_);
            }
            pub inline fn getFlags(self: *const T, p_value_: ?*PolicyServerUrlFlags) HRESULT {
                return @as(*const IX509PolicyServerUrl.VTable, @ptrCast(self.vtable)).get_Flags(@as(*const IX509PolicyServerUrl, @ptrCast(self)), p_value_);
            }
            pub inline fn putFlags(self: *const T, flags_: PolicyServerUrlFlags) HRESULT {
                return @as(*const IX509PolicyServerUrl.VTable, @ptrCast(self.vtable)).put_Flags(@as(*const IX509PolicyServerUrl, @ptrCast(self)), flags_);
            }
            pub inline fn getAuthFlags(self: *const T, p_value_: ?*X509EnrollmentAuthFlags) HRESULT {
                return @as(*const IX509PolicyServerUrl.VTable, @ptrCast(self.vtable)).get_AuthFlags(@as(*const IX509PolicyServerUrl, @ptrCast(self)), p_value_);
            }
            pub inline fn putAuthFlags(self: *const T, flags_: X509EnrollmentAuthFlags) HRESULT {
                return @as(*const IX509PolicyServerUrl.VTable, @ptrCast(self.vtable)).put_AuthFlags(@as(*const IX509PolicyServerUrl, @ptrCast(self)), flags_);
            }
            pub inline fn getCost(self: *const T, p_value_: ?*u32) HRESULT {
                return @as(*const IX509PolicyServerUrl.VTable, @ptrCast(self.vtable)).get_Cost(@as(*const IX509PolicyServerUrl, @ptrCast(self)), p_value_);
            }
            pub inline fn putCost(self: *const T, value_: u32) HRESULT {
                return @as(*const IX509PolicyServerUrl.VTable, @ptrCast(self.vtable)).put_Cost(@as(*const IX509PolicyServerUrl, @ptrCast(self)), value_);
            }
            pub inline fn getStringProperty(self: *const T, property_id_: PolicyServerUrlPropertyID, pp_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509PolicyServerUrl.VTable, @ptrCast(self.vtable)).GetStringProperty(@as(*const IX509PolicyServerUrl, @ptrCast(self)), property_id_, pp_value_);
            }
            pub inline fn setStringProperty(self: *const T, property_id_: PolicyServerUrlPropertyID, p_value_: ?BSTR) HRESULT {
                return @as(*const IX509PolicyServerUrl.VTable, @ptrCast(self.vtable)).SetStringProperty(@as(*const IX509PolicyServerUrl, @ptrCast(self)), property_id_, p_value_);
            }
            pub inline fn updateRegistry(self: *const T, context_: X509CertificateEnrollmentContext) HRESULT {
                return @as(*const IX509PolicyServerUrl.VTable, @ptrCast(self.vtable)).UpdateRegistry(@as(*const IX509PolicyServerUrl, @ptrCast(self)), context_);
            }
            pub inline fn removeFromRegistry(self: *const T, context_: X509CertificateEnrollmentContext) HRESULT {
                return @as(*const IX509PolicyServerUrl.VTable, @ptrCast(self.vtable)).RemoveFromRegistry(@as(*const IX509PolicyServerUrl, @ptrCast(self)), context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509PolicyServerListManager_Value = Guid.initString("884e204b-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509PolicyServerListManager = &IID_IX509PolicyServerListManager_Value;
pub const IX509PolicyServerListManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PolicyServerListManager,
            index: i32,
            p_val: ?*?*IX509PolicyServerUrl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PolicyServerListManager,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509PolicyServerListManager,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IX509PolicyServerListManager,
            p_val: ?*IX509PolicyServerUrl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IX509PolicyServerListManager,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IX509PolicyServerListManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: *const fn (
            self: *const IX509PolicyServerListManager,
            context: X509CertificateEnrollmentContext,
            flags: PolicyServerUrlFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItemByIndex(self: *const T, index_: i32, p_val_: ?*?*IX509PolicyServerUrl) HRESULT {
                return @as(*const IX509PolicyServerListManager.VTable, @ptrCast(self.vtable)).get_ItemByIndex(@as(*const IX509PolicyServerListManager, @ptrCast(self)), index_, p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IX509PolicyServerListManager.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IX509PolicyServerListManager, @ptrCast(self)), p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const IX509PolicyServerListManager.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IX509PolicyServerListManager, @ptrCast(self)), p_val_);
            }
            pub inline fn add(self: *const T, p_val_: ?*IX509PolicyServerUrl) HRESULT {
                return @as(*const IX509PolicyServerListManager.VTable, @ptrCast(self.vtable)).Add(@as(*const IX509PolicyServerListManager, @ptrCast(self)), p_val_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const IX509PolicyServerListManager.VTable, @ptrCast(self.vtable)).Remove(@as(*const IX509PolicyServerListManager, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IX509PolicyServerListManager.VTable, @ptrCast(self.vtable)).Clear(@as(*const IX509PolicyServerListManager, @ptrCast(self)));
            }
            pub inline fn initialize(self: *const T, context_: X509CertificateEnrollmentContext, flags_: PolicyServerUrlFlags) HRESULT {
                return @as(*const IX509PolicyServerListManager.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IX509PolicyServerListManager, @ptrCast(self)), context_, flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const X509RequestType = enum(i32) {
    Any = 0,
    Pkcs10 = 1,
    Pkcs7 = 2,
    Cmc = 3,
    Certificate = 4,
};
pub const TypeAny = X509RequestType.Any;
pub const TypePkcs10 = X509RequestType.Pkcs10;
pub const TypePkcs7 = X509RequestType.Pkcs7;
pub const TypeCmc = X509RequestType.Cmc;
pub const TypeCertificate = X509RequestType.Certificate;

pub const X509RequestInheritOptions = enum(i32) {
    Default = 0,
    NewDefaultKey = 1,
    NewSimilarKey = 2,
    PrivateKey = 3,
    PublicKey = 4,
    KeyMask = 15,
    None = 16,
    RenewalCertificateFlag = 32,
    TemplateFlag = 64,
    SubjectFlag = 128,
    ExtensionsFlag = 256,
    SubjectAltNameFlag = 512,
    ValidityPeriodFlag = 1024,
    Reserved80000000 = -2147483648,
};
pub const InheritDefault = X509RequestInheritOptions.Default;
pub const InheritNewDefaultKey = X509RequestInheritOptions.NewDefaultKey;
pub const InheritNewSimilarKey = X509RequestInheritOptions.NewSimilarKey;
pub const InheritPrivateKey = X509RequestInheritOptions.PrivateKey;
pub const InheritPublicKey = X509RequestInheritOptions.PublicKey;
pub const InheritKeyMask = X509RequestInheritOptions.KeyMask;
pub const InheritNone = X509RequestInheritOptions.None;
pub const InheritRenewalCertificateFlag = X509RequestInheritOptions.RenewalCertificateFlag;
pub const InheritTemplateFlag = X509RequestInheritOptions.TemplateFlag;
pub const InheritSubjectFlag = X509RequestInheritOptions.SubjectFlag;
pub const InheritExtensionsFlag = X509RequestInheritOptions.ExtensionsFlag;
pub const InheritSubjectAltNameFlag = X509RequestInheritOptions.SubjectAltNameFlag;
pub const InheritValidityPeriodFlag = X509RequestInheritOptions.ValidityPeriodFlag;
pub const InheritReserved80000000 = X509RequestInheritOptions.Reserved80000000;

pub const InnerRequestLevel = enum(i32) {
    Innermost = 0,
    Next = 1,
};
pub const LevelInnermost = InnerRequestLevel.Innermost;
pub const LevelNext = InnerRequestLevel.Next;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509CertificateRequest_Value = Guid.initString("728ab341-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRequest = &IID_IX509CertificateRequest_Value;
pub const IX509CertificateRequest = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const IX509CertificateRequest,
            context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: *const fn (
            self: *const IX509CertificateRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetForEncode: *const fn (
            self: *const IX509CertificateRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInnerRequest: *const fn (
            self: *const IX509CertificateRequest,
            level: InnerRequestLevel,
            pp_value: ?*?*IX509CertificateRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            p_value: ?*X509RequestType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnrollmentContext: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            p_value: ?*X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Silent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Silent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ParentWindow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ParentWindow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UIContextMessage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UIContextMessage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SuppressDefaults: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SuppressDefaults: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RenewalCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RenewalCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            encoding: EncodingType,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClientId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            p_value: ?*RequestClientInfoClientId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClientId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            value: RequestClientInfoClientId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CspInformations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            pp_value: ?*?*ICspInformations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CspInformations: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            p_value: ?*ICspInformations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            p_value: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AlternateSignatureAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AlternateSignatureAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RawData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequest,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, context_: X509CertificateEnrollmentContext) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IX509CertificateRequest, @ptrCast(self)), context_);
            }
            pub inline fn encode(self: *const T) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).Encode(@as(*const IX509CertificateRequest, @ptrCast(self)));
            }
            pub inline fn resetForEncode(self: *const T) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).ResetForEncode(@as(*const IX509CertificateRequest, @ptrCast(self)));
            }
            pub inline fn getInnerRequest(self: *const T, level_: InnerRequestLevel, pp_value_: ?*?*IX509CertificateRequest) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).GetInnerRequest(@as(*const IX509CertificateRequest, @ptrCast(self)), level_, pp_value_);
            }
            pub inline fn getType(self: *const T, p_value_: ?*X509RequestType) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IX509CertificateRequest, @ptrCast(self)), p_value_);
            }
            pub inline fn getEnrollmentContext(self: *const T, p_value_: ?*X509CertificateEnrollmentContext) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).get_EnrollmentContext(@as(*const IX509CertificateRequest, @ptrCast(self)), p_value_);
            }
            pub inline fn getSilent(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).get_Silent(@as(*const IX509CertificateRequest, @ptrCast(self)), p_value_);
            }
            pub inline fn putSilent(self: *const T, value_: i16) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).put_Silent(@as(*const IX509CertificateRequest, @ptrCast(self)), value_);
            }
            pub inline fn getParentWindow(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).get_ParentWindow(@as(*const IX509CertificateRequest, @ptrCast(self)), p_value_);
            }
            pub inline fn putParentWindow(self: *const T, value_: i32) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).put_ParentWindow(@as(*const IX509CertificateRequest, @ptrCast(self)), value_);
            }
            pub inline fn getUIContextMessage(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).get_UIContextMessage(@as(*const IX509CertificateRequest, @ptrCast(self)), p_value_);
            }
            pub inline fn putUIContextMessage(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).put_UIContextMessage(@as(*const IX509CertificateRequest, @ptrCast(self)), value_);
            }
            pub inline fn getSuppressDefaults(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).get_SuppressDefaults(@as(*const IX509CertificateRequest, @ptrCast(self)), p_value_);
            }
            pub inline fn putSuppressDefaults(self: *const T, value_: i16) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).put_SuppressDefaults(@as(*const IX509CertificateRequest, @ptrCast(self)), value_);
            }
            pub inline fn getRenewalCertificate(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).get_RenewalCertificate(@as(*const IX509CertificateRequest, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn putRenewalCertificate(self: *const T, encoding_: EncodingType, value_: ?BSTR) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).put_RenewalCertificate(@as(*const IX509CertificateRequest, @ptrCast(self)), encoding_, value_);
            }
            pub inline fn getClientId(self: *const T, p_value_: ?*RequestClientInfoClientId) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).get_ClientId(@as(*const IX509CertificateRequest, @ptrCast(self)), p_value_);
            }
            pub inline fn putClientId(self: *const T, value_: RequestClientInfoClientId) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).put_ClientId(@as(*const IX509CertificateRequest, @ptrCast(self)), value_);
            }
            pub inline fn getCspInformations(self: *const T, pp_value_: ?*?*ICspInformations) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).get_CspInformations(@as(*const IX509CertificateRequest, @ptrCast(self)), pp_value_);
            }
            pub inline fn putCspInformations(self: *const T, p_value_: ?*ICspInformations) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).put_CspInformations(@as(*const IX509CertificateRequest, @ptrCast(self)), p_value_);
            }
            pub inline fn getHashAlgorithm(self: *const T, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).get_HashAlgorithm(@as(*const IX509CertificateRequest, @ptrCast(self)), pp_value_);
            }
            pub inline fn putHashAlgorithm(self: *const T, p_value_: ?*IObjectId) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).put_HashAlgorithm(@as(*const IX509CertificateRequest, @ptrCast(self)), p_value_);
            }
            pub inline fn getAlternateSignatureAlgorithm(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).get_AlternateSignatureAlgorithm(@as(*const IX509CertificateRequest, @ptrCast(self)), p_value_);
            }
            pub inline fn putAlternateSignatureAlgorithm(self: *const T, value_: i16) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).put_AlternateSignatureAlgorithm(@as(*const IX509CertificateRequest, @ptrCast(self)), value_);
            }
            pub inline fn getRawData(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509CertificateRequest.VTable, @ptrCast(self.vtable)).get_RawData(@as(*const IX509CertificateRequest, @ptrCast(self)), encoding_, p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const Pkcs10AllowedSignatureTypes = enum(i32) {
    KeySignature = 1,
    NullSignature = 2,
};
pub const AllowedKeySignature = Pkcs10AllowedSignatureTypes.KeySignature;
pub const AllowedNullSignature = Pkcs10AllowedSignatureTypes.NullSignature;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509CertificateRequestPkcs10_Value = Guid.initString("728ab342-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRequestPkcs10 = &IID_IX509CertificateRequestPkcs10_Value;
pub const IX509CertificateRequestPkcs10 = extern struct {
    pub const VTable = extern struct {
        base: IX509CertificateRequest.VTable,
        InitializeFromTemplateName: *const fn (
            self: *const IX509CertificateRequestPkcs10,
            context: X509CertificateEnrollmentContext,
            str_template_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromPrivateKey: *const fn (
            self: *const IX509CertificateRequestPkcs10,
            context: X509CertificateEnrollmentContext,
            p_private_key: ?*IX509PrivateKey,
            str_template_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromPublicKey: *const fn (
            self: *const IX509CertificateRequestPkcs10,
            context: X509CertificateEnrollmentContext,
            p_public_key: ?*IX509PublicKey,
            str_template_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromCertificate: *const fn (
            self: *const IX509CertificateRequestPkcs10,
            context: X509CertificateEnrollmentContext,
            str_certificate: ?BSTR,
            encoding: EncodingType,
            inherit_options: X509RequestInheritOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509CertificateRequestPkcs10,
            str_encoded_data: ?BSTR,
            encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckSignature: *const fn (
            self: *const IX509CertificateRequestPkcs10,
            allowed_signature_types: Pkcs10AllowedSignatureTypes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSmartCard: *const fn (
            self: *const IX509CertificateRequestPkcs10,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TemplateObjectId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PublicKey: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10,
            pp_value: ?*?*IX509PublicKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivateKey: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10,
            pp_value: ?*?*IX509PrivateKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NullSigned: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReuseKey: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OldCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Subject: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10,
            pp_value: ?*?*IX500DistinguishedName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Subject: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10,
            p_value: ?*IX500DistinguishedName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CspStatuses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10,
            pp_value: ?*?*ICspStatuses,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SmimeCapabilities: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SmimeCapabilities: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SignatureInformation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10,
            pp_value: ?*?*IX509SignatureInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeyContainerNamePrefix: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_KeyContainerNamePrefix: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CryptAttributes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10,
            pp_value: ?*?*ICryptAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_X509Extensions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10,
            pp_value: ?*?*IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CriticalExtensions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10,
            pp_value: ?*?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SuppressOids: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10,
            pp_value: ?*?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RawDataToBeSigned: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Signature: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCspStatuses: *const fn (
            self: *const IX509CertificateRequestPkcs10,
            key_spec: X509KeySpec,
            pp_csp_statuses: ?*?*ICspStatuses,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509CertificateRequest.MethodMixin(T);
            pub inline fn initializeFromTemplateName(self: *const T, context_: X509CertificateEnrollmentContext, str_template_name_: ?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).InitializeFromTemplateName(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), context_, str_template_name_);
            }
            pub inline fn initializeFromPrivateKey(self: *const T, context_: X509CertificateEnrollmentContext, p_private_key_: ?*IX509PrivateKey, str_template_name_: ?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).InitializeFromPrivateKey(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), context_, p_private_key_, str_template_name_);
            }
            pub inline fn initializeFromPublicKey(self: *const T, context_: X509CertificateEnrollmentContext, p_public_key_: ?*IX509PublicKey, str_template_name_: ?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).InitializeFromPublicKey(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), context_, p_public_key_, str_template_name_);
            }
            pub inline fn initializeFromCertificate(self: *const T, context_: X509CertificateEnrollmentContext, str_certificate_: ?BSTR, encoding_: EncodingType, inherit_options_: X509RequestInheritOptions) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).InitializeFromCertificate(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), context_, str_certificate_, encoding_, inherit_options_);
            }
            pub inline fn initializeDecode(self: *const T, str_encoded_data_: ?BSTR, encoding_: EncodingType) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), str_encoded_data_, encoding_);
            }
            pub inline fn checkSignature(self: *const T, allowed_signature_types_: Pkcs10AllowedSignatureTypes) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).CheckSignature(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), allowed_signature_types_);
            }
            pub inline fn isSmartCard(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).IsSmartCard(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), p_value_);
            }
            pub inline fn getTemplateObjectId(self: *const T, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).get_TemplateObjectId(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), pp_value_);
            }
            pub inline fn getPublicKey(self: *const T, pp_value_: ?*?*IX509PublicKey) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).get_PublicKey(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), pp_value_);
            }
            pub inline fn getPrivateKey(self: *const T, pp_value_: ?*?*IX509PrivateKey) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).get_PrivateKey(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), pp_value_);
            }
            pub inline fn getNullSigned(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).get_NullSigned(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), p_value_);
            }
            pub inline fn getReuseKey(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).get_ReuseKey(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), p_value_);
            }
            pub inline fn getOldCertificate(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).get_OldCertificate(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn getSubject(self: *const T, pp_value_: ?*?*IX500DistinguishedName) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).get_Subject(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), pp_value_);
            }
            pub inline fn putSubject(self: *const T, p_value_: ?*IX500DistinguishedName) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).put_Subject(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), p_value_);
            }
            pub inline fn getCspStatuses(self: *const T, pp_value_: ?*?*ICspStatuses) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).get_CspStatuses(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), pp_value_);
            }
            pub inline fn getSmimeCapabilities(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).get_SmimeCapabilities(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), p_value_);
            }
            pub inline fn putSmimeCapabilities(self: *const T, value_: i16) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).put_SmimeCapabilities(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), value_);
            }
            pub inline fn getSignatureInformation(self: *const T, pp_value_: ?*?*IX509SignatureInformation) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).get_SignatureInformation(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), pp_value_);
            }
            pub inline fn getKeyContainerNamePrefix(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).get_KeyContainerNamePrefix(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), p_value_);
            }
            pub inline fn putKeyContainerNamePrefix(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).put_KeyContainerNamePrefix(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), value_);
            }
            pub inline fn getCryptAttributes(self: *const T, pp_value_: ?*?*ICryptAttributes) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).get_CryptAttributes(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), pp_value_);
            }
            pub inline fn getX509Extensions(self: *const T, pp_value_: ?*?*IX509Extensions) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).get_X509Extensions(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), pp_value_);
            }
            pub inline fn getCriticalExtensions(self: *const T, pp_value_: ?*?*IObjectIds) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).get_CriticalExtensions(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), pp_value_);
            }
            pub inline fn getSuppressOids(self: *const T, pp_value_: ?*?*IObjectIds) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).get_SuppressOids(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), pp_value_);
            }
            pub inline fn getRawDataToBeSigned(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).get_RawDataToBeSigned(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn getSignature(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).get_Signature(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn getCspStatuses1(self: *const T, key_spec_: X509KeySpec, pp_csp_statuses_: ?*?*ICspStatuses) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10.VTable, @ptrCast(self.vtable)).GetCspStatuses(@as(*const IX509CertificateRequestPkcs10, @ptrCast(self)), key_spec_, pp_csp_statuses_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509CertificateRequestPkcs10V2_Value = Guid.initString("728ab35b-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRequestPkcs10V2 = &IID_IX509CertificateRequestPkcs10V2_Value;
pub const IX509CertificateRequestPkcs10V2 = extern struct {
    pub const VTable = extern struct {
        base: IX509CertificateRequestPkcs10.VTable,
        InitializeFromTemplate: *const fn (
            self: *const IX509CertificateRequestPkcs10V2,
            context: X509CertificateEnrollmentContext,
            p_policy_server: ?*IX509EnrollmentPolicyServer,
            p_template: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromPrivateKeyTemplate: *const fn (
            self: *const IX509CertificateRequestPkcs10V2,
            context: X509CertificateEnrollmentContext,
            p_private_key: ?*IX509PrivateKey,
            p_policy_server: ?*IX509EnrollmentPolicyServer,
            p_template: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromPublicKeyTemplate: *const fn (
            self: *const IX509CertificateRequestPkcs10V2,
            context: X509CertificateEnrollmentContext,
            p_public_key: ?*IX509PublicKey,
            p_policy_server: ?*IX509EnrollmentPolicyServer,
            p_template: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyServer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10V2,
            pp_policy_server: ?*?*IX509EnrollmentPolicyServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Template: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10V2,
            pp_template: ?*?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509CertificateRequestPkcs10.MethodMixin(T);
            pub inline fn initializeFromTemplate(self: *const T, context_: X509CertificateEnrollmentContext, p_policy_server_: ?*IX509EnrollmentPolicyServer, p_template_: ?*IX509CertificateTemplate) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10V2.VTable, @ptrCast(self.vtable)).InitializeFromTemplate(@as(*const IX509CertificateRequestPkcs10V2, @ptrCast(self)), context_, p_policy_server_, p_template_);
            }
            pub inline fn initializeFromPrivateKeyTemplate(self: *const T, context_: X509CertificateEnrollmentContext, p_private_key_: ?*IX509PrivateKey, p_policy_server_: ?*IX509EnrollmentPolicyServer, p_template_: ?*IX509CertificateTemplate) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10V2.VTable, @ptrCast(self.vtable)).InitializeFromPrivateKeyTemplate(@as(*const IX509CertificateRequestPkcs10V2, @ptrCast(self)), context_, p_private_key_, p_policy_server_, p_template_);
            }
            pub inline fn initializeFromPublicKeyTemplate(self: *const T, context_: X509CertificateEnrollmentContext, p_public_key_: ?*IX509PublicKey, p_policy_server_: ?*IX509EnrollmentPolicyServer, p_template_: ?*IX509CertificateTemplate) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10V2.VTable, @ptrCast(self.vtable)).InitializeFromPublicKeyTemplate(@as(*const IX509CertificateRequestPkcs10V2, @ptrCast(self)), context_, p_public_key_, p_policy_server_, p_template_);
            }
            pub inline fn getPolicyServer(self: *const T, pp_policy_server_: ?*?*IX509EnrollmentPolicyServer) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10V2.VTable, @ptrCast(self.vtable)).get_PolicyServer(@as(*const IX509CertificateRequestPkcs10V2, @ptrCast(self)), pp_policy_server_);
            }
            pub inline fn getTemplate(self: *const T, pp_template_: ?*?*IX509CertificateTemplate) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10V2.VTable, @ptrCast(self.vtable)).get_Template(@as(*const IX509CertificateRequestPkcs10V2, @ptrCast(self)), pp_template_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509CertificateRequestPkcs10V3_Value = Guid.initString("54ea9942-3d66-4530-b76e-7c9170d3ec52");
pub const IID_IX509CertificateRequestPkcs10V3 = &IID_IX509CertificateRequestPkcs10V3_Value;
pub const IX509CertificateRequestPkcs10V3 = extern struct {
    pub const VTable = extern struct {
        base: IX509CertificateRequestPkcs10V2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AttestPrivateKey: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10V3,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AttestPrivateKey: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10V3,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AttestationEncryptionCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10V3,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AttestationEncryptionCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10V3,
            encoding: EncodingType,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptionAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10V3,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EncryptionAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10V3,
            p_value: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptionStrength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10V3,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EncryptionStrength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10V3,
            value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ChallengePassword: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10V3,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ChallengePassword: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10V3,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NameValuePairs: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10V3,
            pp_value: ?*?*IX509NameValuePairs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509CertificateRequestPkcs10V2.MethodMixin(T);
            pub inline fn getAttestPrivateKey(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10V3.VTable, @ptrCast(self.vtable)).get_AttestPrivateKey(@as(*const IX509CertificateRequestPkcs10V3, @ptrCast(self)), p_value_);
            }
            pub inline fn putAttestPrivateKey(self: *const T, value_: i16) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10V3.VTable, @ptrCast(self.vtable)).put_AttestPrivateKey(@as(*const IX509CertificateRequestPkcs10V3, @ptrCast(self)), value_);
            }
            pub inline fn getAttestationEncryptionCertificate(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10V3.VTable, @ptrCast(self.vtable)).get_AttestationEncryptionCertificate(@as(*const IX509CertificateRequestPkcs10V3, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn putAttestationEncryptionCertificate(self: *const T, encoding_: EncodingType, value_: ?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10V3.VTable, @ptrCast(self.vtable)).put_AttestationEncryptionCertificate(@as(*const IX509CertificateRequestPkcs10V3, @ptrCast(self)), encoding_, value_);
            }
            pub inline fn getEncryptionAlgorithm(self: *const T, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10V3.VTable, @ptrCast(self.vtable)).get_EncryptionAlgorithm(@as(*const IX509CertificateRequestPkcs10V3, @ptrCast(self)), pp_value_);
            }
            pub inline fn putEncryptionAlgorithm(self: *const T, p_value_: ?*IObjectId) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10V3.VTable, @ptrCast(self.vtable)).put_EncryptionAlgorithm(@as(*const IX509CertificateRequestPkcs10V3, @ptrCast(self)), p_value_);
            }
            pub inline fn getEncryptionStrength(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10V3.VTable, @ptrCast(self.vtable)).get_EncryptionStrength(@as(*const IX509CertificateRequestPkcs10V3, @ptrCast(self)), p_value_);
            }
            pub inline fn putEncryptionStrength(self: *const T, value_: i32) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10V3.VTable, @ptrCast(self.vtable)).put_EncryptionStrength(@as(*const IX509CertificateRequestPkcs10V3, @ptrCast(self)), value_);
            }
            pub inline fn getChallengePassword(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10V3.VTable, @ptrCast(self.vtable)).get_ChallengePassword(@as(*const IX509CertificateRequestPkcs10V3, @ptrCast(self)), p_value_);
            }
            pub inline fn putChallengePassword(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10V3.VTable, @ptrCast(self.vtable)).put_ChallengePassword(@as(*const IX509CertificateRequestPkcs10V3, @ptrCast(self)), value_);
            }
            pub inline fn getNameValuePairs(self: *const T, pp_value_: ?*?*IX509NameValuePairs) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10V3.VTable, @ptrCast(self.vtable)).get_NameValuePairs(@as(*const IX509CertificateRequestPkcs10V3, @ptrCast(self)), pp_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const KeyAttestationClaimType = enum(i32) {
    NONE = 0,
    AUTHORITY_AND_SUBJECT = 3,
    AUTHORITY_ONLY = 1,
    SUBJECT_ONLY = 2,
    UNKNOWN = 4096,
};
pub const XCN_NCRYPT_CLAIM_NONE = KeyAttestationClaimType.NONE;
pub const XCN_NCRYPT_CLAIM_AUTHORITY_AND_SUBJECT = KeyAttestationClaimType.AUTHORITY_AND_SUBJECT;
pub const XCN_NCRYPT_CLAIM_AUTHORITY_ONLY = KeyAttestationClaimType.AUTHORITY_ONLY;
pub const XCN_NCRYPT_CLAIM_SUBJECT_ONLY = KeyAttestationClaimType.SUBJECT_ONLY;
pub const XCN_NCRYPT_CLAIM_UNKNOWN = KeyAttestationClaimType.UNKNOWN;

const IID_IX509CertificateRequestPkcs10V4_Value = Guid.initString("728ab363-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRequestPkcs10V4 = &IID_IX509CertificateRequestPkcs10V4_Value;
pub const IX509CertificateRequestPkcs10V4 = extern struct {
    pub const VTable = extern struct {
        base: IX509CertificateRequestPkcs10V3.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClaimType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10V4,
            p_value: ?*KeyAttestationClaimType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClaimType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10V4,
            value: KeyAttestationClaimType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AttestPrivateKeyPreferred: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10V4,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AttestPrivateKeyPreferred: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs10V4,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509CertificateRequestPkcs10V3.MethodMixin(T);
            pub inline fn getClaimType(self: *const T, p_value_: ?*KeyAttestationClaimType) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10V4.VTable, @ptrCast(self.vtable)).get_ClaimType(@as(*const IX509CertificateRequestPkcs10V4, @ptrCast(self)), p_value_);
            }
            pub inline fn putClaimType(self: *const T, value_: KeyAttestationClaimType) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10V4.VTable, @ptrCast(self.vtable)).put_ClaimType(@as(*const IX509CertificateRequestPkcs10V4, @ptrCast(self)), value_);
            }
            pub inline fn getAttestPrivateKeyPreferred(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10V4.VTable, @ptrCast(self.vtable)).get_AttestPrivateKeyPreferred(@as(*const IX509CertificateRequestPkcs10V4, @ptrCast(self)), p_value_);
            }
            pub inline fn putAttestPrivateKeyPreferred(self: *const T, value_: i16) HRESULT {
                return @as(*const IX509CertificateRequestPkcs10V4.VTable, @ptrCast(self.vtable)).put_AttestPrivateKeyPreferred(@as(*const IX509CertificateRequestPkcs10V4, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509CertificateRequestCertificate_Value = Guid.initString("728ab343-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRequestCertificate = &IID_IX509CertificateRequestCertificate_Value;
pub const IX509CertificateRequestCertificate = extern struct {
    pub const VTable = extern struct {
        base: IX509CertificateRequestPkcs10.VTable,
        CheckPublicKeySignature: *const fn (
            self: *const IX509CertificateRequestCertificate,
            p_public_key: ?*IX509PublicKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Issuer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCertificate,
            pp_value: ?*?*IX500DistinguishedName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Issuer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCertificate,
            p_value: ?*IX500DistinguishedName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NotBefore: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCertificate,
            p_value: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NotBefore: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCertificate,
            value: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NotAfter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCertificate,
            p_value: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NotAfter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCertificate,
            value: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SerialNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCertificate,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SerialNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCertificate,
            encoding: EncodingType,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SignerCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCertificate,
            pp_value: ?*?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SignerCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCertificate,
            p_value: ?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509CertificateRequestPkcs10.MethodMixin(T);
            pub inline fn checkPublicKeySignature(self: *const T, p_public_key_: ?*IX509PublicKey) HRESULT {
                return @as(*const IX509CertificateRequestCertificate.VTable, @ptrCast(self.vtable)).CheckPublicKeySignature(@as(*const IX509CertificateRequestCertificate, @ptrCast(self)), p_public_key_);
            }
            pub inline fn getIssuer(self: *const T, pp_value_: ?*?*IX500DistinguishedName) HRESULT {
                return @as(*const IX509CertificateRequestCertificate.VTable, @ptrCast(self.vtable)).get_Issuer(@as(*const IX509CertificateRequestCertificate, @ptrCast(self)), pp_value_);
            }
            pub inline fn putIssuer(self: *const T, p_value_: ?*IX500DistinguishedName) HRESULT {
                return @as(*const IX509CertificateRequestCertificate.VTable, @ptrCast(self.vtable)).put_Issuer(@as(*const IX509CertificateRequestCertificate, @ptrCast(self)), p_value_);
            }
            pub inline fn getNotBefore(self: *const T, p_value_: ?*f64) HRESULT {
                return @as(*const IX509CertificateRequestCertificate.VTable, @ptrCast(self.vtable)).get_NotBefore(@as(*const IX509CertificateRequestCertificate, @ptrCast(self)), p_value_);
            }
            pub inline fn putNotBefore(self: *const T, value_: f64) HRESULT {
                return @as(*const IX509CertificateRequestCertificate.VTable, @ptrCast(self.vtable)).put_NotBefore(@as(*const IX509CertificateRequestCertificate, @ptrCast(self)), value_);
            }
            pub inline fn getNotAfter(self: *const T, p_value_: ?*f64) HRESULT {
                return @as(*const IX509CertificateRequestCertificate.VTable, @ptrCast(self.vtable)).get_NotAfter(@as(*const IX509CertificateRequestCertificate, @ptrCast(self)), p_value_);
            }
            pub inline fn putNotAfter(self: *const T, value_: f64) HRESULT {
                return @as(*const IX509CertificateRequestCertificate.VTable, @ptrCast(self.vtable)).put_NotAfter(@as(*const IX509CertificateRequestCertificate, @ptrCast(self)), value_);
            }
            pub inline fn getSerialNumber(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestCertificate.VTable, @ptrCast(self.vtable)).get_SerialNumber(@as(*const IX509CertificateRequestCertificate, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn putSerialNumber(self: *const T, encoding_: EncodingType, value_: ?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestCertificate.VTable, @ptrCast(self.vtable)).put_SerialNumber(@as(*const IX509CertificateRequestCertificate, @ptrCast(self)), encoding_, value_);
            }
            pub inline fn getSignerCertificate(self: *const T, pp_value_: ?*?*ISignerCertificate) HRESULT {
                return @as(*const IX509CertificateRequestCertificate.VTable, @ptrCast(self.vtable)).get_SignerCertificate(@as(*const IX509CertificateRequestCertificate, @ptrCast(self)), pp_value_);
            }
            pub inline fn putSignerCertificate(self: *const T, p_value_: ?*ISignerCertificate) HRESULT {
                return @as(*const IX509CertificateRequestCertificate.VTable, @ptrCast(self.vtable)).put_SignerCertificate(@as(*const IX509CertificateRequestCertificate, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509CertificateRequestCertificate2_Value = Guid.initString("728ab35a-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRequestCertificate2 = &IID_IX509CertificateRequestCertificate2_Value;
pub const IX509CertificateRequestCertificate2 = extern struct {
    pub const VTable = extern struct {
        base: IX509CertificateRequestCertificate.VTable,
        InitializeFromTemplate: *const fn (
            self: *const IX509CertificateRequestCertificate2,
            context: X509CertificateEnrollmentContext,
            p_policy_server: ?*IX509EnrollmentPolicyServer,
            p_template: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromPrivateKeyTemplate: *const fn (
            self: *const IX509CertificateRequestCertificate2,
            context: X509CertificateEnrollmentContext,
            p_private_key: ?*IX509PrivateKey,
            p_policy_server: ?*IX509EnrollmentPolicyServer,
            p_template: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyServer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCertificate2,
            pp_policy_server: ?*?*IX509EnrollmentPolicyServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Template: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCertificate2,
            pp_template: ?*?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509CertificateRequestCertificate.MethodMixin(T);
            pub inline fn initializeFromTemplate(self: *const T, context_: X509CertificateEnrollmentContext, p_policy_server_: ?*IX509EnrollmentPolicyServer, p_template_: ?*IX509CertificateTemplate) HRESULT {
                return @as(*const IX509CertificateRequestCertificate2.VTable, @ptrCast(self.vtable)).InitializeFromTemplate(@as(*const IX509CertificateRequestCertificate2, @ptrCast(self)), context_, p_policy_server_, p_template_);
            }
            pub inline fn initializeFromPrivateKeyTemplate(self: *const T, context_: X509CertificateEnrollmentContext, p_private_key_: ?*IX509PrivateKey, p_policy_server_: ?*IX509EnrollmentPolicyServer, p_template_: ?*IX509CertificateTemplate) HRESULT {
                return @as(*const IX509CertificateRequestCertificate2.VTable, @ptrCast(self.vtable)).InitializeFromPrivateKeyTemplate(@as(*const IX509CertificateRequestCertificate2, @ptrCast(self)), context_, p_private_key_, p_policy_server_, p_template_);
            }
            pub inline fn getPolicyServer(self: *const T, pp_policy_server_: ?*?*IX509EnrollmentPolicyServer) HRESULT {
                return @as(*const IX509CertificateRequestCertificate2.VTable, @ptrCast(self.vtable)).get_PolicyServer(@as(*const IX509CertificateRequestCertificate2, @ptrCast(self)), pp_policy_server_);
            }
            pub inline fn getTemplate(self: *const T, pp_template_: ?*?*IX509CertificateTemplate) HRESULT {
                return @as(*const IX509CertificateRequestCertificate2.VTable, @ptrCast(self.vtable)).get_Template(@as(*const IX509CertificateRequestCertificate2, @ptrCast(self)), pp_template_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509CertificateRequestPkcs7_Value = Guid.initString("728ab344-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRequestPkcs7 = &IID_IX509CertificateRequestPkcs7_Value;
pub const IX509CertificateRequestPkcs7 = extern struct {
    pub const VTable = extern struct {
        base: IX509CertificateRequest.VTable,
        InitializeFromTemplateName: *const fn (
            self: *const IX509CertificateRequestPkcs7,
            context: X509CertificateEnrollmentContext,
            str_template_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromCertificate: *const fn (
            self: *const IX509CertificateRequestPkcs7,
            context: X509CertificateEnrollmentContext,
            renewal_request: i16,
            str_certificate: ?BSTR,
            encoding: EncodingType,
            inherit_options: X509RequestInheritOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromInnerRequest: *const fn (
            self: *const IX509CertificateRequestPkcs7,
            p_inner_request: ?*IX509CertificateRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509CertificateRequestPkcs7,
            str_encoded_data: ?BSTR,
            encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequesterName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs7,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RequesterName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs7,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SignerCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs7,
            pp_value: ?*?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SignerCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs7,
            p_value: ?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509CertificateRequest.MethodMixin(T);
            pub inline fn initializeFromTemplateName(self: *const T, context_: X509CertificateEnrollmentContext, str_template_name_: ?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestPkcs7.VTable, @ptrCast(self.vtable)).InitializeFromTemplateName(@as(*const IX509CertificateRequestPkcs7, @ptrCast(self)), context_, str_template_name_);
            }
            pub inline fn initializeFromCertificate(self: *const T, context_: X509CertificateEnrollmentContext, renewal_request_: i16, str_certificate_: ?BSTR, encoding_: EncodingType, inherit_options_: X509RequestInheritOptions) HRESULT {
                return @as(*const IX509CertificateRequestPkcs7.VTable, @ptrCast(self.vtable)).InitializeFromCertificate(@as(*const IX509CertificateRequestPkcs7, @ptrCast(self)), context_, renewal_request_, str_certificate_, encoding_, inherit_options_);
            }
            pub inline fn initializeFromInnerRequest(self: *const T, p_inner_request_: ?*IX509CertificateRequest) HRESULT {
                return @as(*const IX509CertificateRequestPkcs7.VTable, @ptrCast(self.vtable)).InitializeFromInnerRequest(@as(*const IX509CertificateRequestPkcs7, @ptrCast(self)), p_inner_request_);
            }
            pub inline fn initializeDecode(self: *const T, str_encoded_data_: ?BSTR, encoding_: EncodingType) HRESULT {
                return @as(*const IX509CertificateRequestPkcs7.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509CertificateRequestPkcs7, @ptrCast(self)), str_encoded_data_, encoding_);
            }
            pub inline fn getRequesterName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestPkcs7.VTable, @ptrCast(self.vtable)).get_RequesterName(@as(*const IX509CertificateRequestPkcs7, @ptrCast(self)), p_value_);
            }
            pub inline fn putRequesterName(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestPkcs7.VTable, @ptrCast(self.vtable)).put_RequesterName(@as(*const IX509CertificateRequestPkcs7, @ptrCast(self)), value_);
            }
            pub inline fn getSignerCertificate(self: *const T, pp_value_: ?*?*ISignerCertificate) HRESULT {
                return @as(*const IX509CertificateRequestPkcs7.VTable, @ptrCast(self.vtable)).get_SignerCertificate(@as(*const IX509CertificateRequestPkcs7, @ptrCast(self)), pp_value_);
            }
            pub inline fn putSignerCertificate(self: *const T, p_value_: ?*ISignerCertificate) HRESULT {
                return @as(*const IX509CertificateRequestPkcs7.VTable, @ptrCast(self.vtable)).put_SignerCertificate(@as(*const IX509CertificateRequestPkcs7, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509CertificateRequestPkcs7V2_Value = Guid.initString("728ab35c-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRequestPkcs7V2 = &IID_IX509CertificateRequestPkcs7V2_Value;
pub const IX509CertificateRequestPkcs7V2 = extern struct {
    pub const VTable = extern struct {
        base: IX509CertificateRequestPkcs7.VTable,
        InitializeFromTemplate: *const fn (
            self: *const IX509CertificateRequestPkcs7V2,
            context: X509CertificateEnrollmentContext,
            p_policy_server: ?*IX509EnrollmentPolicyServer,
            p_template: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyServer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs7V2,
            pp_policy_server: ?*?*IX509EnrollmentPolicyServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Template: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestPkcs7V2,
            pp_template: ?*?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckCertificateSignature: *const fn (
            self: *const IX509CertificateRequestPkcs7V2,
            validate_certificate_chain: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509CertificateRequestPkcs7.MethodMixin(T);
            pub inline fn initializeFromTemplate(self: *const T, context_: X509CertificateEnrollmentContext, p_policy_server_: ?*IX509EnrollmentPolicyServer, p_template_: ?*IX509CertificateTemplate) HRESULT {
                return @as(*const IX509CertificateRequestPkcs7V2.VTable, @ptrCast(self.vtable)).InitializeFromTemplate(@as(*const IX509CertificateRequestPkcs7V2, @ptrCast(self)), context_, p_policy_server_, p_template_);
            }
            pub inline fn getPolicyServer(self: *const T, pp_policy_server_: ?*?*IX509EnrollmentPolicyServer) HRESULT {
                return @as(*const IX509CertificateRequestPkcs7V2.VTable, @ptrCast(self.vtable)).get_PolicyServer(@as(*const IX509CertificateRequestPkcs7V2, @ptrCast(self)), pp_policy_server_);
            }
            pub inline fn getTemplate(self: *const T, pp_template_: ?*?*IX509CertificateTemplate) HRESULT {
                return @as(*const IX509CertificateRequestPkcs7V2.VTable, @ptrCast(self.vtable)).get_Template(@as(*const IX509CertificateRequestPkcs7V2, @ptrCast(self)), pp_template_);
            }
            pub inline fn checkCertificateSignature(self: *const T, validate_certificate_chain_: i16) HRESULT {
                return @as(*const IX509CertificateRequestPkcs7V2.VTable, @ptrCast(self.vtable)).CheckCertificateSignature(@as(*const IX509CertificateRequestPkcs7V2, @ptrCast(self)), validate_certificate_chain_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509CertificateRequestCmc_Value = Guid.initString("728ab345-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRequestCmc = &IID_IX509CertificateRequestCmc_Value;
pub const IX509CertificateRequestCmc = extern struct {
    pub const VTable = extern struct {
        base: IX509CertificateRequestPkcs7.VTable,
        InitializeFromInnerRequestTemplateName: *const fn (
            self: *const IX509CertificateRequestCmc,
            p_inner_request: ?*IX509CertificateRequest,
            str_template_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TemplateObjectId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NullSigned: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CryptAttributes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            pp_value: ?*?*ICryptAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NameValuePairs: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            pp_value: ?*?*IX509NameValuePairs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_X509Extensions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            pp_value: ?*?*IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CriticalExtensions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            pp_value: ?*?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SuppressOids: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            pp_value: ?*?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransactionId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TransactionId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SenderNonce: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SenderNonce: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            encoding: EncodingType,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SignatureInformation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            pp_value: ?*?*IX509SignatureInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ArchivePrivateKey: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ArchivePrivateKey: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeyArchivalCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_KeyArchivalCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            encoding: EncodingType,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptionAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EncryptionAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            p_value: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptionStrength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EncryptionStrength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EncryptedKeyHash: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SignerCertificates: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc,
            pp_value: ?*?*ISignerCertificates,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509CertificateRequestPkcs7.MethodMixin(T);
            pub inline fn initializeFromInnerRequestTemplateName(self: *const T, p_inner_request_: ?*IX509CertificateRequest, str_template_name_: ?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).InitializeFromInnerRequestTemplateName(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), p_inner_request_, str_template_name_);
            }
            pub inline fn getTemplateObjectId(self: *const T, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).get_TemplateObjectId(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), pp_value_);
            }
            pub inline fn getNullSigned(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).get_NullSigned(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), p_value_);
            }
            pub inline fn getCryptAttributes(self: *const T, pp_value_: ?*?*ICryptAttributes) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).get_CryptAttributes(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), pp_value_);
            }
            pub inline fn getNameValuePairs(self: *const T, pp_value_: ?*?*IX509NameValuePairs) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).get_NameValuePairs(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), pp_value_);
            }
            pub inline fn getX509Extensions(self: *const T, pp_value_: ?*?*IX509Extensions) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).get_X509Extensions(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), pp_value_);
            }
            pub inline fn getCriticalExtensions(self: *const T, pp_value_: ?*?*IObjectIds) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).get_CriticalExtensions(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), pp_value_);
            }
            pub inline fn getSuppressOids(self: *const T, pp_value_: ?*?*IObjectIds) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).get_SuppressOids(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), pp_value_);
            }
            pub inline fn getTransactionId(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).get_TransactionId(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), p_value_);
            }
            pub inline fn putTransactionId(self: *const T, value_: i32) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).put_TransactionId(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), value_);
            }
            pub inline fn getSenderNonce(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).get_SenderNonce(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn putSenderNonce(self: *const T, encoding_: EncodingType, value_: ?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).put_SenderNonce(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), encoding_, value_);
            }
            pub inline fn getSignatureInformation(self: *const T, pp_value_: ?*?*IX509SignatureInformation) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).get_SignatureInformation(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), pp_value_);
            }
            pub inline fn getArchivePrivateKey(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).get_ArchivePrivateKey(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), p_value_);
            }
            pub inline fn putArchivePrivateKey(self: *const T, value_: i16) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).put_ArchivePrivateKey(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), value_);
            }
            pub inline fn getKeyArchivalCertificate(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).get_KeyArchivalCertificate(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn putKeyArchivalCertificate(self: *const T, encoding_: EncodingType, value_: ?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).put_KeyArchivalCertificate(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), encoding_, value_);
            }
            pub inline fn getEncryptionAlgorithm(self: *const T, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).get_EncryptionAlgorithm(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), pp_value_);
            }
            pub inline fn putEncryptionAlgorithm(self: *const T, p_value_: ?*IObjectId) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).put_EncryptionAlgorithm(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), p_value_);
            }
            pub inline fn getEncryptionStrength(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).get_EncryptionStrength(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), p_value_);
            }
            pub inline fn putEncryptionStrength(self: *const T, value_: i32) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).put_EncryptionStrength(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), value_);
            }
            pub inline fn getEncryptedKeyHash(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).get_EncryptedKeyHash(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn getSignerCertificates(self: *const T, pp_value_: ?*?*ISignerCertificates) HRESULT {
                return @as(*const IX509CertificateRequestCmc.VTable, @ptrCast(self.vtable)).get_SignerCertificates(@as(*const IX509CertificateRequestCmc, @ptrCast(self)), pp_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509CertificateRequestCmc2_Value = Guid.initString("728ab35d-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRequestCmc2 = &IID_IX509CertificateRequestCmc2_Value;
pub const IX509CertificateRequestCmc2 = extern struct {
    pub const VTable = extern struct {
        base: IX509CertificateRequestCmc.VTable,
        InitializeFromTemplate: *const fn (
            self: *const IX509CertificateRequestCmc2,
            context: X509CertificateEnrollmentContext,
            p_policy_server: ?*IX509EnrollmentPolicyServer,
            p_template: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromInnerRequestTemplate: *const fn (
            self: *const IX509CertificateRequestCmc2,
            p_inner_request: ?*IX509CertificateRequest,
            p_policy_server: ?*IX509EnrollmentPolicyServer,
            p_template: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyServer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc2,
            pp_policy_server: ?*?*IX509EnrollmentPolicyServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Template: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRequestCmc2,
            pp_template: ?*?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckSignature: *const fn (
            self: *const IX509CertificateRequestCmc2,
            allowed_signature_types: Pkcs10AllowedSignatureTypes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckCertificateSignature: *const fn (
            self: *const IX509CertificateRequestCmc2,
            p_signer_certificate: ?*ISignerCertificate,
            validate_certificate_chain: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509CertificateRequestCmc.MethodMixin(T);
            pub inline fn initializeFromTemplate(self: *const T, context_: X509CertificateEnrollmentContext, p_policy_server_: ?*IX509EnrollmentPolicyServer, p_template_: ?*IX509CertificateTemplate) HRESULT {
                return @as(*const IX509CertificateRequestCmc2.VTable, @ptrCast(self.vtable)).InitializeFromTemplate(@as(*const IX509CertificateRequestCmc2, @ptrCast(self)), context_, p_policy_server_, p_template_);
            }
            pub inline fn initializeFromInnerRequestTemplate(self: *const T, p_inner_request_: ?*IX509CertificateRequest, p_policy_server_: ?*IX509EnrollmentPolicyServer, p_template_: ?*IX509CertificateTemplate) HRESULT {
                return @as(*const IX509CertificateRequestCmc2.VTable, @ptrCast(self.vtable)).InitializeFromInnerRequestTemplate(@as(*const IX509CertificateRequestCmc2, @ptrCast(self)), p_inner_request_, p_policy_server_, p_template_);
            }
            pub inline fn getPolicyServer(self: *const T, pp_policy_server_: ?*?*IX509EnrollmentPolicyServer) HRESULT {
                return @as(*const IX509CertificateRequestCmc2.VTable, @ptrCast(self.vtable)).get_PolicyServer(@as(*const IX509CertificateRequestCmc2, @ptrCast(self)), pp_policy_server_);
            }
            pub inline fn getTemplate(self: *const T, pp_template_: ?*?*IX509CertificateTemplate) HRESULT {
                return @as(*const IX509CertificateRequestCmc2.VTable, @ptrCast(self.vtable)).get_Template(@as(*const IX509CertificateRequestCmc2, @ptrCast(self)), pp_template_);
            }
            pub inline fn checkSignature(self: *const T, allowed_signature_types_: Pkcs10AllowedSignatureTypes) HRESULT {
                return @as(*const IX509CertificateRequestCmc2.VTable, @ptrCast(self.vtable)).CheckSignature(@as(*const IX509CertificateRequestCmc2, @ptrCast(self)), allowed_signature_types_);
            }
            pub inline fn checkCertificateSignature(self: *const T, p_signer_certificate_: ?*ISignerCertificate, validate_certificate_chain_: i16) HRESULT {
                return @as(*const IX509CertificateRequestCmc2.VTable, @ptrCast(self.vtable)).CheckCertificateSignature(@as(*const IX509CertificateRequestCmc2, @ptrCast(self)), p_signer_certificate_, validate_certificate_chain_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const InstallResponseRestrictionFlags = enum(i32) {
    None = 0,
    NoOutstandingRequest = 1,
    UntrustedCertificate = 2,
    UntrustedRoot = 4,
};
pub const AllowNone = InstallResponseRestrictionFlags.None;
pub const AllowNoOutstandingRequest = InstallResponseRestrictionFlags.NoOutstandingRequest;
pub const AllowUntrustedCertificate = InstallResponseRestrictionFlags.UntrustedCertificate;
pub const AllowUntrustedRoot = InstallResponseRestrictionFlags.UntrustedRoot;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509Enrollment_Value = Guid.initString("728ab346-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509Enrollment = &IID_IX509Enrollment_Value;
pub const IX509Enrollment = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const IX509Enrollment,
            context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromTemplateName: *const fn (
            self: *const IX509Enrollment,
            context: X509CertificateEnrollmentContext,
            str_template_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromRequest: *const fn (
            self: *const IX509Enrollment,
            p_request: ?*IX509CertificateRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRequest: *const fn (
            self: *const IX509Enrollment,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enroll: *const fn (
            self: *const IX509Enrollment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallResponse: *const fn (
            self: *const IX509Enrollment,
            restrictions: InstallResponseRestrictionFlags,
            str_response: ?BSTR,
            encoding: EncodingType,
            str_password: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePFX: *const fn (
            self: *const IX509Enrollment,
            str_password: ?BSTR,
            export_options: PFXExportOptions,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Request: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Enrollment,
            p_value: ?*?*IX509CertificateRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Silent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Enrollment,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Silent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Enrollment,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ParentWindow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Enrollment,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ParentWindow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Enrollment,
            value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NameValuePairs: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Enrollment,
            pp_value: ?*?*IX509NameValuePairs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnrollmentContext: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Enrollment,
            p_value: ?*X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Enrollment,
            pp_value: ?*?*IX509EnrollmentStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Certificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Enrollment,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Response: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Enrollment,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CertificateFriendlyName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Enrollment,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CertificateFriendlyName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Enrollment,
            str_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CertificateDescription: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Enrollment,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CertificateDescription: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Enrollment,
            str_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Enrollment,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CAConfigString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Enrollment,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, context_: X509CertificateEnrollmentContext) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IX509Enrollment, @ptrCast(self)), context_);
            }
            pub inline fn initializeFromTemplateName(self: *const T, context_: X509CertificateEnrollmentContext, str_template_name_: ?BSTR) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).InitializeFromTemplateName(@as(*const IX509Enrollment, @ptrCast(self)), context_, str_template_name_);
            }
            pub inline fn initializeFromRequest(self: *const T, p_request_: ?*IX509CertificateRequest) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).InitializeFromRequest(@as(*const IX509Enrollment, @ptrCast(self)), p_request_);
            }
            pub inline fn createRequest(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).CreateRequest(@as(*const IX509Enrollment, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn enroll(self: *const T) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).Enroll(@as(*const IX509Enrollment, @ptrCast(self)));
            }
            pub inline fn installResponse(self: *const T, restrictions_: InstallResponseRestrictionFlags, str_response_: ?BSTR, encoding_: EncodingType, str_password_: ?BSTR) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).InstallResponse(@as(*const IX509Enrollment, @ptrCast(self)), restrictions_, str_response_, encoding_, str_password_);
            }
            pub inline fn createPFX(self: *const T, str_password_: ?BSTR, export_options_: PFXExportOptions, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).CreatePFX(@as(*const IX509Enrollment, @ptrCast(self)), str_password_, export_options_, encoding_, p_value_);
            }
            pub inline fn getRequest(self: *const T, p_value_: ?*?*IX509CertificateRequest) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).get_Request(@as(*const IX509Enrollment, @ptrCast(self)), p_value_);
            }
            pub inline fn getSilent(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).get_Silent(@as(*const IX509Enrollment, @ptrCast(self)), p_value_);
            }
            pub inline fn putSilent(self: *const T, value_: i16) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).put_Silent(@as(*const IX509Enrollment, @ptrCast(self)), value_);
            }
            pub inline fn getParentWindow(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).get_ParentWindow(@as(*const IX509Enrollment, @ptrCast(self)), p_value_);
            }
            pub inline fn putParentWindow(self: *const T, value_: i32) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).put_ParentWindow(@as(*const IX509Enrollment, @ptrCast(self)), value_);
            }
            pub inline fn getNameValuePairs(self: *const T, pp_value_: ?*?*IX509NameValuePairs) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).get_NameValuePairs(@as(*const IX509Enrollment, @ptrCast(self)), pp_value_);
            }
            pub inline fn getEnrollmentContext(self: *const T, p_value_: ?*X509CertificateEnrollmentContext) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).get_EnrollmentContext(@as(*const IX509Enrollment, @ptrCast(self)), p_value_);
            }
            pub inline fn getStatus(self: *const T, pp_value_: ?*?*IX509EnrollmentStatus) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IX509Enrollment, @ptrCast(self)), pp_value_);
            }
            pub inline fn getCertificate(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).get_Certificate(@as(*const IX509Enrollment, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn getResponse(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).get_Response(@as(*const IX509Enrollment, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn getCertificateFriendlyName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).get_CertificateFriendlyName(@as(*const IX509Enrollment, @ptrCast(self)), p_value_);
            }
            pub inline fn putCertificateFriendlyName(self: *const T, str_value_: ?BSTR) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).put_CertificateFriendlyName(@as(*const IX509Enrollment, @ptrCast(self)), str_value_);
            }
            pub inline fn getCertificateDescription(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).get_CertificateDescription(@as(*const IX509Enrollment, @ptrCast(self)), p_value_);
            }
            pub inline fn putCertificateDescription(self: *const T, str_value_: ?BSTR) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).put_CertificateDescription(@as(*const IX509Enrollment, @ptrCast(self)), str_value_);
            }
            pub inline fn getRequestId(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).get_RequestId(@as(*const IX509Enrollment, @ptrCast(self)), p_value_);
            }
            pub inline fn getCAConfigString(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509Enrollment.VTable, @ptrCast(self.vtable)).get_CAConfigString(@as(*const IX509Enrollment, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509Enrollment2_Value = Guid.initString("728ab350-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509Enrollment2 = &IID_IX509Enrollment2_Value;
pub const IX509Enrollment2 = extern struct {
    pub const VTable = extern struct {
        base: IX509Enrollment.VTable,
        InitializeFromTemplate: *const fn (
            self: *const IX509Enrollment2,
            context: X509CertificateEnrollmentContext,
            p_policy_server: ?*IX509EnrollmentPolicyServer,
            p_template: ?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallResponse2: *const fn (
            self: *const IX509Enrollment2,
            restrictions: InstallResponseRestrictionFlags,
            str_response: ?BSTR,
            encoding: EncodingType,
            str_password: ?BSTR,
            str_enrollment_policy_server_url: ?BSTR,
            str_enrollment_policy_server_i_d: ?BSTR,
            enrollment_policy_server_flags: PolicyServerUrlFlags,
            auth_flags: X509EnrollmentAuthFlags,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolicyServer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Enrollment2,
            pp_policy_server: ?*?*IX509EnrollmentPolicyServer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Template: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Enrollment2,
            pp_template: ?*?*IX509CertificateTemplate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestIdString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509Enrollment2,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509Enrollment.MethodMixin(T);
            pub inline fn initializeFromTemplate(self: *const T, context_: X509CertificateEnrollmentContext, p_policy_server_: ?*IX509EnrollmentPolicyServer, p_template_: ?*IX509CertificateTemplate) HRESULT {
                return @as(*const IX509Enrollment2.VTable, @ptrCast(self.vtable)).InitializeFromTemplate(@as(*const IX509Enrollment2, @ptrCast(self)), context_, p_policy_server_, p_template_);
            }
            pub inline fn installResponse2(self: *const T, restrictions_: InstallResponseRestrictionFlags, str_response_: ?BSTR, encoding_: EncodingType, str_password_: ?BSTR, str_enrollment_policy_server_url_: ?BSTR, str_enrollment_policy_server_i_d_: ?BSTR, enrollment_policy_server_flags_: PolicyServerUrlFlags, auth_flags_: X509EnrollmentAuthFlags) HRESULT {
                return @as(*const IX509Enrollment2.VTable, @ptrCast(self.vtable)).InstallResponse2(@as(*const IX509Enrollment2, @ptrCast(self)), restrictions_, str_response_, encoding_, str_password_, str_enrollment_policy_server_url_, str_enrollment_policy_server_i_d_, enrollment_policy_server_flags_, auth_flags_);
            }
            pub inline fn getPolicyServer(self: *const T, pp_policy_server_: ?*?*IX509EnrollmentPolicyServer) HRESULT {
                return @as(*const IX509Enrollment2.VTable, @ptrCast(self.vtable)).get_PolicyServer(@as(*const IX509Enrollment2, @ptrCast(self)), pp_policy_server_);
            }
            pub inline fn getTemplate(self: *const T, pp_template_: ?*?*IX509CertificateTemplate) HRESULT {
                return @as(*const IX509Enrollment2.VTable, @ptrCast(self.vtable)).get_Template(@as(*const IX509Enrollment2, @ptrCast(self)), pp_template_);
            }
            pub inline fn getRequestIdString(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509Enrollment2.VTable, @ptrCast(self.vtable)).get_RequestIdString(@as(*const IX509Enrollment2, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WebEnrollmentFlags = enum(i32) {
    t = 1,
};
pub const EnrollPrompt = WebEnrollmentFlags.t;

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509EnrollmentHelper_Value = Guid.initString("728ab351-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509EnrollmentHelper = &IID_IX509EnrollmentHelper_Value;
pub const IX509EnrollmentHelper = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        AddPolicyServer: *const fn (
            self: *const IX509EnrollmentHelper,
            str_enrollment_policy_server_u_r_i: ?BSTR,
            str_enrollment_policy_i_d: ?BSTR,
            enrollment_policy_server_flags: PolicyServerUrlFlags,
            auth_flags: X509EnrollmentAuthFlags,
            str_credential: ?BSTR,
            str_password: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddEnrollmentServer: *const fn (
            self: *const IX509EnrollmentHelper,
            str_enrollment_server_u_r_i: ?BSTR,
            auth_flags: X509EnrollmentAuthFlags,
            str_credential: ?BSTR,
            str_password: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enroll: *const fn (
            self: *const IX509EnrollmentHelper,
            str_enrollment_policy_server_u_r_i: ?BSTR,
            str_template_name: ?BSTR,
            encoding: EncodingType,
            enroll_flags: WebEnrollmentFlags,
            pstr_certificate: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: *const fn (
            self: *const IX509EnrollmentHelper,
            context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn addPolicyServer(self: *const T, str_enrollment_policy_server_u_r_i_: ?BSTR, str_enrollment_policy_i_d_: ?BSTR, enrollment_policy_server_flags_: PolicyServerUrlFlags, auth_flags_: X509EnrollmentAuthFlags, str_credential_: ?BSTR, str_password_: ?BSTR) HRESULT {
                return @as(*const IX509EnrollmentHelper.VTable, @ptrCast(self.vtable)).AddPolicyServer(@as(*const IX509EnrollmentHelper, @ptrCast(self)), str_enrollment_policy_server_u_r_i_, str_enrollment_policy_i_d_, enrollment_policy_server_flags_, auth_flags_, str_credential_, str_password_);
            }
            pub inline fn addEnrollmentServer(self: *const T, str_enrollment_server_u_r_i_: ?BSTR, auth_flags_: X509EnrollmentAuthFlags, str_credential_: ?BSTR, str_password_: ?BSTR) HRESULT {
                return @as(*const IX509EnrollmentHelper.VTable, @ptrCast(self.vtable)).AddEnrollmentServer(@as(*const IX509EnrollmentHelper, @ptrCast(self)), str_enrollment_server_u_r_i_, auth_flags_, str_credential_, str_password_);
            }
            pub inline fn enroll(self: *const T, str_enrollment_policy_server_u_r_i_: ?BSTR, str_template_name_: ?BSTR, encoding_: EncodingType, enroll_flags_: WebEnrollmentFlags, pstr_certificate_: ?*?BSTR) HRESULT {
                return @as(*const IX509EnrollmentHelper.VTable, @ptrCast(self.vtable)).Enroll(@as(*const IX509EnrollmentHelper, @ptrCast(self)), str_enrollment_policy_server_u_r_i_, str_template_name_, encoding_, enroll_flags_, pstr_certificate_);
            }
            pub inline fn initialize(self: *const T, context_: X509CertificateEnrollmentContext) HRESULT {
                return @as(*const IX509EnrollmentHelper.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IX509EnrollmentHelper, @ptrCast(self)), context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IX509EnrollmentWebClassFactory_Value = Guid.initString("728ab349-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509EnrollmentWebClassFactory = &IID_IX509EnrollmentWebClassFactory_Value;
pub const IX509EnrollmentWebClassFactory = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreateObject: *const fn (
            self: *const IX509EnrollmentWebClassFactory,
            str_prog_i_d: ?BSTR,
            pp_i_unknown: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn createObject(self: *const T, str_prog_i_d_: ?BSTR, pp_i_unknown_: ?*?*IUnknown) HRESULT {
                return @as(*const IX509EnrollmentWebClassFactory.VTable, @ptrCast(self.vtable)).CreateObject(@as(*const IX509EnrollmentWebClassFactory, @ptrCast(self)), str_prog_i_d_, pp_i_unknown_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IX509MachineEnrollmentFactory_Value = Guid.initString("728ab352-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509MachineEnrollmentFactory = &IID_IX509MachineEnrollmentFactory_Value;
pub const IX509MachineEnrollmentFactory = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        CreateObject: *const fn (
            self: *const IX509MachineEnrollmentFactory,
            str_prog_i_d: ?BSTR,
            pp_i_helper: ?*?*IX509EnrollmentHelper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn createObject(self: *const T, str_prog_i_d_: ?BSTR, pp_i_helper_: ?*?*IX509EnrollmentHelper) HRESULT {
                return @as(*const IX509MachineEnrollmentFactory.VTable, @ptrCast(self.vtable)).CreateObject(@as(*const IX509MachineEnrollmentFactory, @ptrCast(self)), str_prog_i_d_, pp_i_helper_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CRLRevocationReason = enum(i32) {
    UNSPECIFIED = 0,
    KEY_COMPROMISE = 1,
    CA_COMPROMISE = 2,
    AFFILIATION_CHANGED = 3,
    SUPERSEDED = 4,
    CESSATION_OF_OPERATION = 5,
    CERTIFICATE_HOLD = 6,
    REMOVE_FROM_CRL = 8,
    PRIVILEGE_WITHDRAWN = 9,
    AA_COMPROMISE = 10,
};
pub const XCN_CRL_REASON_UNSPECIFIED = CRLRevocationReason.UNSPECIFIED;
pub const XCN_CRL_REASON_KEY_COMPROMISE = CRLRevocationReason.KEY_COMPROMISE;
pub const XCN_CRL_REASON_CA_COMPROMISE = CRLRevocationReason.CA_COMPROMISE;
pub const XCN_CRL_REASON_AFFILIATION_CHANGED = CRLRevocationReason.AFFILIATION_CHANGED;
pub const XCN_CRL_REASON_SUPERSEDED = CRLRevocationReason.SUPERSEDED;
pub const XCN_CRL_REASON_CESSATION_OF_OPERATION = CRLRevocationReason.CESSATION_OF_OPERATION;
pub const XCN_CRL_REASON_CERTIFICATE_HOLD = CRLRevocationReason.CERTIFICATE_HOLD;
pub const XCN_CRL_REASON_REMOVE_FROM_CRL = CRLRevocationReason.REMOVE_FROM_CRL;
pub const XCN_CRL_REASON_PRIVILEGE_WITHDRAWN = CRLRevocationReason.PRIVILEGE_WITHDRAWN;
pub const XCN_CRL_REASON_AA_COMPROMISE = CRLRevocationReason.AA_COMPROMISE;

const IID_IX509CertificateRevocationListEntry_Value = Guid.initString("728ab35e-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRevocationListEntry = &IID_IX509CertificateRevocationListEntry_Value;
pub const IX509CertificateRevocationListEntry = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const IX509CertificateRevocationListEntry,
            encoding: EncodingType,
            serial_number: ?BSTR,
            revocation_date: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SerialNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationListEntry,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RevocationDate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationListEntry,
            p_value: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RevocationReason: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationListEntry,
            p_value: ?*CRLRevocationReason,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RevocationReason: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationListEntry,
            value: CRLRevocationReason,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_X509Extensions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationListEntry,
            pp_value: ?*?*IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CriticalExtensions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationListEntry,
            pp_value: ?*?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, encoding_: EncodingType, serial_number_: ?BSTR, revocation_date_: f64) HRESULT {
                return @as(*const IX509CertificateRevocationListEntry.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IX509CertificateRevocationListEntry, @ptrCast(self)), encoding_, serial_number_, revocation_date_);
            }
            pub inline fn getSerialNumber(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509CertificateRevocationListEntry.VTable, @ptrCast(self.vtable)).get_SerialNumber(@as(*const IX509CertificateRevocationListEntry, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn getRevocationDate(self: *const T, p_value_: ?*f64) HRESULT {
                return @as(*const IX509CertificateRevocationListEntry.VTable, @ptrCast(self.vtable)).get_RevocationDate(@as(*const IX509CertificateRevocationListEntry, @ptrCast(self)), p_value_);
            }
            pub inline fn getRevocationReason(self: *const T, p_value_: ?*CRLRevocationReason) HRESULT {
                return @as(*const IX509CertificateRevocationListEntry.VTable, @ptrCast(self.vtable)).get_RevocationReason(@as(*const IX509CertificateRevocationListEntry, @ptrCast(self)), p_value_);
            }
            pub inline fn putRevocationReason(self: *const T, value_: CRLRevocationReason) HRESULT {
                return @as(*const IX509CertificateRevocationListEntry.VTable, @ptrCast(self.vtable)).put_RevocationReason(@as(*const IX509CertificateRevocationListEntry, @ptrCast(self)), value_);
            }
            pub inline fn getX509Extensions(self: *const T, pp_value_: ?*?*IX509Extensions) HRESULT {
                return @as(*const IX509CertificateRevocationListEntry.VTable, @ptrCast(self.vtable)).get_X509Extensions(@as(*const IX509CertificateRevocationListEntry, @ptrCast(self)), pp_value_);
            }
            pub inline fn getCriticalExtensions(self: *const T, pp_value_: ?*?*IObjectIds) HRESULT {
                return @as(*const IX509CertificateRevocationListEntry.VTable, @ptrCast(self.vtable)).get_CriticalExtensions(@as(*const IX509CertificateRevocationListEntry, @ptrCast(self)), pp_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509CertificateRevocationListEntries_Value = Guid.initString("728ab35f-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRevocationListEntries = &IID_IX509CertificateRevocationListEntries_Value;
pub const IX509CertificateRevocationListEntries = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemByIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationListEntries,
            index: i32,
            p_val: ?*?*IX509CertificateRevocationListEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationListEntries,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationListEntries,
            p_val: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IX509CertificateRevocationListEntries,
            p_val: ?*IX509CertificateRevocationListEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IX509CertificateRevocationListEntries,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IX509CertificateRevocationListEntries,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IndexBySerialNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationListEntries,
            encoding: EncodingType,
            serial_number: ?BSTR,
            p_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRange: *const fn (
            self: *const IX509CertificateRevocationListEntries,
            p_value: ?*IX509CertificateRevocationListEntries,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItemByIndex(self: *const T, index_: i32, p_val_: ?*?*IX509CertificateRevocationListEntry) HRESULT {
                return @as(*const IX509CertificateRevocationListEntries.VTable, @ptrCast(self.vtable)).get_ItemByIndex(@as(*const IX509CertificateRevocationListEntries, @ptrCast(self)), index_, p_val_);
            }
            pub inline fn getCount(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IX509CertificateRevocationListEntries.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IX509CertificateRevocationListEntries, @ptrCast(self)), p_val_);
            }
            pub inline fn getNewEnum(self: *const T, p_val_: ?*?*IUnknown) HRESULT {
                return @as(*const IX509CertificateRevocationListEntries.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IX509CertificateRevocationListEntries, @ptrCast(self)), p_val_);
            }
            pub inline fn add(self: *const T, p_val_: ?*IX509CertificateRevocationListEntry) HRESULT {
                return @as(*const IX509CertificateRevocationListEntries.VTable, @ptrCast(self.vtable)).Add(@as(*const IX509CertificateRevocationListEntries, @ptrCast(self)), p_val_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const IX509CertificateRevocationListEntries.VTable, @ptrCast(self.vtable)).Remove(@as(*const IX509CertificateRevocationListEntries, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IX509CertificateRevocationListEntries.VTable, @ptrCast(self.vtable)).Clear(@as(*const IX509CertificateRevocationListEntries, @ptrCast(self)));
            }
            pub inline fn getIndexBySerialNumber(self: *const T, encoding_: EncodingType, serial_number_: ?BSTR, p_index_: ?*i32) HRESULT {
                return @as(*const IX509CertificateRevocationListEntries.VTable, @ptrCast(self.vtable)).get_IndexBySerialNumber(@as(*const IX509CertificateRevocationListEntries, @ptrCast(self)), encoding_, serial_number_, p_index_);
            }
            pub inline fn addRange(self: *const T, p_value_: ?*IX509CertificateRevocationListEntries) HRESULT {
                return @as(*const IX509CertificateRevocationListEntries.VTable, @ptrCast(self.vtable)).AddRange(@as(*const IX509CertificateRevocationListEntries, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509CertificateRevocationList_Value = Guid.initString("728ab360-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509CertificateRevocationList = &IID_IX509CertificateRevocationList_Value;
pub const IX509CertificateRevocationList = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const IX509CertificateRevocationList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDecode: *const fn (
            self: *const IX509CertificateRevocationList,
            str_encoded_data: ?BSTR,
            encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: *const fn (
            self: *const IX509CertificateRevocationList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetForEncode: *const fn (
            self: *const IX509CertificateRevocationList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckPublicKeySignature: *const fn (
            self: *const IX509CertificateRevocationList,
            p_public_key: ?*IX509PublicKey,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckSignature: *const fn (
            self: *const IX509CertificateRevocationList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Issuer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            pp_value: ?*?*IX500DistinguishedName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Issuer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            p_value: ?*IX500DistinguishedName,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ThisUpdate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            p_value: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ThisUpdate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            value: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NextUpdate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            p_value: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NextUpdate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            value: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_X509CRLEntries: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            pp_value: ?*?*IX509CertificateRevocationListEntries,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_X509Extensions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            pp_value: ?*?*IX509Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CriticalExtensions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            pp_value: ?*?*IObjectIds,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SignerCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            pp_value: ?*?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SignerCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            p_value: ?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CRLNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CRLNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            encoding: EncodingType,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CAVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CAVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            p_value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BaseCRL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NullSigned: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            pp_value: ?*?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            p_value: ?*IObjectId,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AlternateSignatureAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AlternateSignatureAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SignatureInformation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            pp_value: ?*?*IX509SignatureInformation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RawData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RawDataToBeSigned: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Signature: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509CertificateRevocationList,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IX509CertificateRevocationList, @ptrCast(self)));
            }
            pub inline fn initializeDecode(self: *const T, str_encoded_data_: ?BSTR, encoding_: EncodingType) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).InitializeDecode(@as(*const IX509CertificateRevocationList, @ptrCast(self)), str_encoded_data_, encoding_);
            }
            pub inline fn encode(self: *const T) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).Encode(@as(*const IX509CertificateRevocationList, @ptrCast(self)));
            }
            pub inline fn resetForEncode(self: *const T) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).ResetForEncode(@as(*const IX509CertificateRevocationList, @ptrCast(self)));
            }
            pub inline fn checkPublicKeySignature(self: *const T, p_public_key_: ?*IX509PublicKey) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).CheckPublicKeySignature(@as(*const IX509CertificateRevocationList, @ptrCast(self)), p_public_key_);
            }
            pub inline fn checkSignature(self: *const T) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).CheckSignature(@as(*const IX509CertificateRevocationList, @ptrCast(self)));
            }
            pub inline fn getIssuer(self: *const T, pp_value_: ?*?*IX500DistinguishedName) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).get_Issuer(@as(*const IX509CertificateRevocationList, @ptrCast(self)), pp_value_);
            }
            pub inline fn putIssuer(self: *const T, p_value_: ?*IX500DistinguishedName) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).put_Issuer(@as(*const IX509CertificateRevocationList, @ptrCast(self)), p_value_);
            }
            pub inline fn getThisUpdate(self: *const T, p_value_: ?*f64) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).get_ThisUpdate(@as(*const IX509CertificateRevocationList, @ptrCast(self)), p_value_);
            }
            pub inline fn putThisUpdate(self: *const T, value_: f64) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).put_ThisUpdate(@as(*const IX509CertificateRevocationList, @ptrCast(self)), value_);
            }
            pub inline fn getNextUpdate(self: *const T, p_value_: ?*f64) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).get_NextUpdate(@as(*const IX509CertificateRevocationList, @ptrCast(self)), p_value_);
            }
            pub inline fn putNextUpdate(self: *const T, value_: f64) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).put_NextUpdate(@as(*const IX509CertificateRevocationList, @ptrCast(self)), value_);
            }
            pub inline fn getX509CRLEntries(self: *const T, pp_value_: ?*?*IX509CertificateRevocationListEntries) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).get_X509CRLEntries(@as(*const IX509CertificateRevocationList, @ptrCast(self)), pp_value_);
            }
            pub inline fn getX509Extensions(self: *const T, pp_value_: ?*?*IX509Extensions) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).get_X509Extensions(@as(*const IX509CertificateRevocationList, @ptrCast(self)), pp_value_);
            }
            pub inline fn getCriticalExtensions(self: *const T, pp_value_: ?*?*IObjectIds) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).get_CriticalExtensions(@as(*const IX509CertificateRevocationList, @ptrCast(self)), pp_value_);
            }
            pub inline fn getSignerCertificate(self: *const T, pp_value_: ?*?*ISignerCertificate) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).get_SignerCertificate(@as(*const IX509CertificateRevocationList, @ptrCast(self)), pp_value_);
            }
            pub inline fn putSignerCertificate(self: *const T, p_value_: ?*ISignerCertificate) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).put_SignerCertificate(@as(*const IX509CertificateRevocationList, @ptrCast(self)), p_value_);
            }
            pub inline fn getCRLNumber(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).get_CRLNumber(@as(*const IX509CertificateRevocationList, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn putCRLNumber(self: *const T, encoding_: EncodingType, value_: ?BSTR) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).put_CRLNumber(@as(*const IX509CertificateRevocationList, @ptrCast(self)), encoding_, value_);
            }
            pub inline fn getCAVersion(self: *const T, p_value_: ?*i32) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).get_CAVersion(@as(*const IX509CertificateRevocationList, @ptrCast(self)), p_value_);
            }
            pub inline fn putCAVersion(self: *const T, p_value_: i32) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).put_CAVersion(@as(*const IX509CertificateRevocationList, @ptrCast(self)), p_value_);
            }
            pub inline fn getBaseCRL(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).get_BaseCRL(@as(*const IX509CertificateRevocationList, @ptrCast(self)), p_value_);
            }
            pub inline fn getNullSigned(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).get_NullSigned(@as(*const IX509CertificateRevocationList, @ptrCast(self)), p_value_);
            }
            pub inline fn getHashAlgorithm(self: *const T, pp_value_: ?*?*IObjectId) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).get_HashAlgorithm(@as(*const IX509CertificateRevocationList, @ptrCast(self)), pp_value_);
            }
            pub inline fn putHashAlgorithm(self: *const T, p_value_: ?*IObjectId) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).put_HashAlgorithm(@as(*const IX509CertificateRevocationList, @ptrCast(self)), p_value_);
            }
            pub inline fn getAlternateSignatureAlgorithm(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).get_AlternateSignatureAlgorithm(@as(*const IX509CertificateRevocationList, @ptrCast(self)), p_value_);
            }
            pub inline fn putAlternateSignatureAlgorithm(self: *const T, value_: i16) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).put_AlternateSignatureAlgorithm(@as(*const IX509CertificateRevocationList, @ptrCast(self)), value_);
            }
            pub inline fn getSignatureInformation(self: *const T, pp_value_: ?*?*IX509SignatureInformation) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).get_SignatureInformation(@as(*const IX509CertificateRevocationList, @ptrCast(self)), pp_value_);
            }
            pub inline fn getRawData(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).get_RawData(@as(*const IX509CertificateRevocationList, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn getRawDataToBeSigned(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).get_RawDataToBeSigned(@as(*const IX509CertificateRevocationList, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn getSignature(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509CertificateRevocationList.VTable, @ptrCast(self.vtable)).get_Signature(@as(*const IX509CertificateRevocationList, @ptrCast(self)), encoding_, p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertificateAttestationChallenge_Value = Guid.initString("6f175a7c-4a3a-40ae-9dba-592fd6bbf9b8");
pub const IID_ICertificateAttestationChallenge = &IID_ICertificateAttestationChallenge_Value;
pub const ICertificateAttestationChallenge = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const ICertificateAttestationChallenge,
            encoding: EncodingType,
            str_pending_full_cmc_response_with_challenge: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DecryptChallenge: *const fn (
            self: *const ICertificateAttestationChallenge,
            encoding: EncodingType,
            pstr_enveloped_pkcs7_reencrypted_to_c_a: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertificateAttestationChallenge,
            pstr_request_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, encoding_: EncodingType, str_pending_full_cmc_response_with_challenge_: ?BSTR) HRESULT {
                return @as(*const ICertificateAttestationChallenge.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ICertificateAttestationChallenge, @ptrCast(self)), encoding_, str_pending_full_cmc_response_with_challenge_);
            }
            pub inline fn decryptChallenge(self: *const T, encoding_: EncodingType, pstr_enveloped_pkcs7_reencrypted_to_c_a_: ?*?BSTR) HRESULT {
                return @as(*const ICertificateAttestationChallenge.VTable, @ptrCast(self.vtable)).DecryptChallenge(@as(*const ICertificateAttestationChallenge, @ptrCast(self)), encoding_, pstr_enveloped_pkcs7_reencrypted_to_c_a_);
            }
            pub inline fn getRequestID(self: *const T, pstr_request_i_d_: ?*?BSTR) HRESULT {
                return @as(*const ICertificateAttestationChallenge.VTable, @ptrCast(self.vtable)).get_RequestID(@as(*const ICertificateAttestationChallenge, @ptrCast(self)), pstr_request_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertificateAttestationChallenge2_Value = Guid.initString("4631334d-e266-47d6-bd79-be53cb2e2753");
pub const IID_ICertificateAttestationChallenge2 = &IID_ICertificateAttestationChallenge2_Value;
pub const ICertificateAttestationChallenge2 = extern struct {
    pub const VTable = extern struct {
        base: ICertificateAttestationChallenge.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_KeyContainerName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertificateAttestationChallenge2,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_KeyBlob: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICertificateAttestationChallenge2,
            encoding: EncodingType,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertificateAttestationChallenge.MethodMixin(T);
            pub inline fn putKeyContainerName(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const ICertificateAttestationChallenge2.VTable, @ptrCast(self.vtable)).put_KeyContainerName(@as(*const ICertificateAttestationChallenge2, @ptrCast(self)), value_);
            }
            pub inline fn putKeyBlob(self: *const T, encoding_: EncodingType, value_: ?BSTR) HRESULT {
                return @as(*const ICertificateAttestationChallenge2.VTable, @ptrCast(self.vtable)).put_KeyBlob(@as(*const ICertificateAttestationChallenge2, @ptrCast(self)), encoding_, value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509SCEPEnrollment_Value = Guid.initString("728ab361-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509SCEPEnrollment = &IID_IX509SCEPEnrollment_Value;
pub const IX509SCEPEnrollment = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const IX509SCEPEnrollment,
            p_request: ?*IX509CertificateRequestPkcs10,
            str_thumbprint: ?BSTR,
            thumprint_encoding: EncodingType,
            str_server_certificates: ?BSTR,
            encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeForPending: *const fn (
            self: *const IX509SCEPEnrollment,
            context: X509CertificateEnrollmentContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRequestMessage: *const fn (
            self: *const IX509SCEPEnrollment,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRetrievePendingMessage: *const fn (
            self: *const IX509SCEPEnrollment,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRetrieveCertificateMessage: *const fn (
            self: *const IX509SCEPEnrollment,
            context: X509CertificateEnrollmentContext,
            str_issuer: ?BSTR,
            issuer_encoding: EncodingType,
            str_serial_number: ?BSTR,
            serial_number_encoding: EncodingType,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessResponseMessage: *const fn (
            self: *const IX509SCEPEnrollment,
            str_response: ?BSTR,
            encoding: EncodingType,
            p_disposition: ?*X509SCEPDisposition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServerCapabilities: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollment,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FailInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollment,
            p_value: ?*X509SCEPFailInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SignerCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollment,
            pp_value: ?*?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SignerCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollment,
            p_value: ?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OldCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollment,
            pp_value: ?*?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OldCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollment,
            p_value: ?*ISignerCertificate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TransactionId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollment,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TransactionId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollment,
            encoding: EncodingType,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Request: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollment,
            pp_value: ?*?*IX509CertificateRequestPkcs10,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CertificateFriendlyName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollment,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CertificateFriendlyName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollment,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollment,
            pp_value: ?*?*IX509EnrollmentStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Certificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollment,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Silent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollment,
            p_value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Silent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollment,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteRequest: *const fn (
            self: *const IX509SCEPEnrollment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_request_: ?*IX509CertificateRequestPkcs10, str_thumbprint_: ?BSTR, thumprint_encoding_: EncodingType, str_server_certificates_: ?BSTR, encoding_: EncodingType) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IX509SCEPEnrollment, @ptrCast(self)), p_request_, str_thumbprint_, thumprint_encoding_, str_server_certificates_, encoding_);
            }
            pub inline fn initializeForPending(self: *const T, context_: X509CertificateEnrollmentContext) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).InitializeForPending(@as(*const IX509SCEPEnrollment, @ptrCast(self)), context_);
            }
            pub inline fn createRequestMessage(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).CreateRequestMessage(@as(*const IX509SCEPEnrollment, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn createRetrievePendingMessage(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).CreateRetrievePendingMessage(@as(*const IX509SCEPEnrollment, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn createRetrieveCertificateMessage(self: *const T, context_: X509CertificateEnrollmentContext, str_issuer_: ?BSTR, issuer_encoding_: EncodingType, str_serial_number_: ?BSTR, serial_number_encoding_: EncodingType, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).CreateRetrieveCertificateMessage(@as(*const IX509SCEPEnrollment, @ptrCast(self)), context_, str_issuer_, issuer_encoding_, str_serial_number_, serial_number_encoding_, encoding_, p_value_);
            }
            pub inline fn processResponseMessage(self: *const T, str_response_: ?BSTR, encoding_: EncodingType, p_disposition_: ?*X509SCEPDisposition) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).ProcessResponseMessage(@as(*const IX509SCEPEnrollment, @ptrCast(self)), str_response_, encoding_, p_disposition_);
            }
            pub inline fn putServerCapabilities(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).put_ServerCapabilities(@as(*const IX509SCEPEnrollment, @ptrCast(self)), value_);
            }
            pub inline fn getFailInfo(self: *const T, p_value_: ?*X509SCEPFailInfo) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).get_FailInfo(@as(*const IX509SCEPEnrollment, @ptrCast(self)), p_value_);
            }
            pub inline fn getSignerCertificate(self: *const T, pp_value_: ?*?*ISignerCertificate) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).get_SignerCertificate(@as(*const IX509SCEPEnrollment, @ptrCast(self)), pp_value_);
            }
            pub inline fn putSignerCertificate(self: *const T, p_value_: ?*ISignerCertificate) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).put_SignerCertificate(@as(*const IX509SCEPEnrollment, @ptrCast(self)), p_value_);
            }
            pub inline fn getOldCertificate(self: *const T, pp_value_: ?*?*ISignerCertificate) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).get_OldCertificate(@as(*const IX509SCEPEnrollment, @ptrCast(self)), pp_value_);
            }
            pub inline fn putOldCertificate(self: *const T, p_value_: ?*ISignerCertificate) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).put_OldCertificate(@as(*const IX509SCEPEnrollment, @ptrCast(self)), p_value_);
            }
            pub inline fn getTransactionId(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).get_TransactionId(@as(*const IX509SCEPEnrollment, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn putTransactionId(self: *const T, encoding_: EncodingType, value_: ?BSTR) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).put_TransactionId(@as(*const IX509SCEPEnrollment, @ptrCast(self)), encoding_, value_);
            }
            pub inline fn getRequest(self: *const T, pp_value_: ?*?*IX509CertificateRequestPkcs10) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).get_Request(@as(*const IX509SCEPEnrollment, @ptrCast(self)), pp_value_);
            }
            pub inline fn getCertificateFriendlyName(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).get_CertificateFriendlyName(@as(*const IX509SCEPEnrollment, @ptrCast(self)), p_value_);
            }
            pub inline fn putCertificateFriendlyName(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).put_CertificateFriendlyName(@as(*const IX509SCEPEnrollment, @ptrCast(self)), value_);
            }
            pub inline fn getStatus(self: *const T, pp_value_: ?*?*IX509EnrollmentStatus) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IX509SCEPEnrollment, @ptrCast(self)), pp_value_);
            }
            pub inline fn getCertificate(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).get_Certificate(@as(*const IX509SCEPEnrollment, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn getSilent(self: *const T, p_value_: ?*i16) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).get_Silent(@as(*const IX509SCEPEnrollment, @ptrCast(self)), p_value_);
            }
            pub inline fn putSilent(self: *const T, value_: i16) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).put_Silent(@as(*const IX509SCEPEnrollment, @ptrCast(self)), value_);
            }
            pub inline fn deleteRequest(self: *const T) HRESULT {
                return @as(*const IX509SCEPEnrollment.VTable, @ptrCast(self.vtable)).DeleteRequest(@as(*const IX509SCEPEnrollment, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const X509SCEPProcessMessageFlags = enum(i32) {
    Default = 0,
    SkipCertInstall = 1,
};
pub const SCEPProcessDefault = X509SCEPProcessMessageFlags.Default;
pub const SCEPProcessSkipCertInstall = X509SCEPProcessMessageFlags.SkipCertInstall;

pub const DelayRetryAction = enum(i32) {
    Unknown = 0,
    None = 1,
    Short = 2,
    Long = 3,
    Success = 4,
    PastSuccess = 5,
};
pub const DelayRetryUnknown = DelayRetryAction.Unknown;
pub const DelayRetryNone = DelayRetryAction.None;
pub const DelayRetryShort = DelayRetryAction.Short;
pub const DelayRetryLong = DelayRetryAction.Long;
pub const DelayRetrySuccess = DelayRetryAction.Success;
pub const DelayRetryPastSuccess = DelayRetryAction.PastSuccess;

const IID_IX509SCEPEnrollment2_Value = Guid.initString("728ab364-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509SCEPEnrollment2 = &IID_IX509SCEPEnrollment2_Value;
pub const IX509SCEPEnrollment2 = extern struct {
    pub const VTable = extern struct {
        base: IX509SCEPEnrollment.VTable,
        CreateChallengeAnswerMessage: *const fn (
            self: *const IX509SCEPEnrollment2,
            encoding: EncodingType,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessResponseMessage2: *const fn (
            self: *const IX509SCEPEnrollment2,
            flags: X509SCEPProcessMessageFlags,
            str_response: ?BSTR,
            encoding: EncodingType,
            p_disposition: ?*X509SCEPDisposition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResultMessageText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollment2,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DelayRetry: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollment2,
            p_value: ?*DelayRetryAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ActivityId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollment2,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ActivityId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollment2,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IX509SCEPEnrollment.MethodMixin(T);
            pub inline fn createChallengeAnswerMessage(self: *const T, encoding_: EncodingType, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509SCEPEnrollment2.VTable, @ptrCast(self.vtable)).CreateChallengeAnswerMessage(@as(*const IX509SCEPEnrollment2, @ptrCast(self)), encoding_, p_value_);
            }
            pub inline fn processResponseMessage2(self: *const T, flags_: X509SCEPProcessMessageFlags, str_response_: ?BSTR, encoding_: EncodingType, p_disposition_: ?*X509SCEPDisposition) HRESULT {
                return @as(*const IX509SCEPEnrollment2.VTable, @ptrCast(self.vtable)).ProcessResponseMessage2(@as(*const IX509SCEPEnrollment2, @ptrCast(self)), flags_, str_response_, encoding_, p_disposition_);
            }
            pub inline fn getResultMessageText(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509SCEPEnrollment2.VTable, @ptrCast(self.vtable)).get_ResultMessageText(@as(*const IX509SCEPEnrollment2, @ptrCast(self)), p_value_);
            }
            pub inline fn getDelayRetry(self: *const T, p_value_: ?*DelayRetryAction) HRESULT {
                return @as(*const IX509SCEPEnrollment2.VTable, @ptrCast(self.vtable)).get_DelayRetry(@as(*const IX509SCEPEnrollment2, @ptrCast(self)), p_value_);
            }
            pub inline fn getActivityId(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509SCEPEnrollment2.VTable, @ptrCast(self.vtable)).get_ActivityId(@as(*const IX509SCEPEnrollment2, @ptrCast(self)), p_value_);
            }
            pub inline fn putActivityId(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IX509SCEPEnrollment2.VTable, @ptrCast(self.vtable)).put_ActivityId(@as(*const IX509SCEPEnrollment2, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IX509SCEPEnrollmentHelper_Value = Guid.initString("728ab365-217d-11da-b2a4-000e7bbb2b09");
pub const IID_IX509SCEPEnrollmentHelper = &IID_IX509SCEPEnrollmentHelper_Value;
pub const IX509SCEPEnrollmentHelper = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const IX509SCEPEnrollmentHelper,
            str_server_url: ?BSTR,
            str_request_headers: ?BSTR,
            p_request: ?*IX509CertificateRequestPkcs10,
            str_c_a_certificate_thumbprint: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeForPending: *const fn (
            self: *const IX509SCEPEnrollmentHelper,
            str_server_url: ?BSTR,
            str_request_headers: ?BSTR,
            context: X509CertificateEnrollmentContext,
            str_transaction_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enroll: *const fn (
            self: *const IX509SCEPEnrollmentHelper,
            process_flags: X509SCEPProcessMessageFlags,
            p_disposition: ?*X509SCEPDisposition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FetchPending: *const fn (
            self: *const IX509SCEPEnrollmentHelper,
            process_flags: X509SCEPProcessMessageFlags,
            p_disposition: ?*X509SCEPDisposition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_X509SCEPEnrollment: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollmentHelper,
            pp_value: ?*?*IX509SCEPEnrollment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ResultMessageText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IX509SCEPEnrollmentHelper,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, str_server_url_: ?BSTR, str_request_headers_: ?BSTR, p_request_: ?*IX509CertificateRequestPkcs10, str_c_a_certificate_thumbprint_: ?BSTR) HRESULT {
                return @as(*const IX509SCEPEnrollmentHelper.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IX509SCEPEnrollmentHelper, @ptrCast(self)), str_server_url_, str_request_headers_, p_request_, str_c_a_certificate_thumbprint_);
            }
            pub inline fn initializeForPending(self: *const T, str_server_url_: ?BSTR, str_request_headers_: ?BSTR, context_: X509CertificateEnrollmentContext, str_transaction_id_: ?BSTR) HRESULT {
                return @as(*const IX509SCEPEnrollmentHelper.VTable, @ptrCast(self.vtable)).InitializeForPending(@as(*const IX509SCEPEnrollmentHelper, @ptrCast(self)), str_server_url_, str_request_headers_, context_, str_transaction_id_);
            }
            pub inline fn enroll(self: *const T, process_flags_: X509SCEPProcessMessageFlags, p_disposition_: ?*X509SCEPDisposition) HRESULT {
                return @as(*const IX509SCEPEnrollmentHelper.VTable, @ptrCast(self.vtable)).Enroll(@as(*const IX509SCEPEnrollmentHelper, @ptrCast(self)), process_flags_, p_disposition_);
            }
            pub inline fn fetchPending(self: *const T, process_flags_: X509SCEPProcessMessageFlags, p_disposition_: ?*X509SCEPDisposition) HRESULT {
                return @as(*const IX509SCEPEnrollmentHelper.VTable, @ptrCast(self.vtable)).FetchPending(@as(*const IX509SCEPEnrollmentHelper, @ptrCast(self)), process_flags_, p_disposition_);
            }
            pub inline fn getX509SCEPEnrollment(self: *const T, pp_value_: ?*?*IX509SCEPEnrollment) HRESULT {
                return @as(*const IX509SCEPEnrollmentHelper.VTable, @ptrCast(self.vtable)).get_X509SCEPEnrollment(@as(*const IX509SCEPEnrollmentHelper, @ptrCast(self)), pp_value_);
            }
            pub inline fn getResultMessageText(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IX509SCEPEnrollmentHelper.VTable, @ptrCast(self.vtable)).get_ResultMessageText(@as(*const IX509SCEPEnrollmentHelper, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const X509CertificateTemplateGeneralFlag = enum(i32) {
    MachineType = 64,
    CA = 128,
    CrossCA = 2048,
    Default = 65536,
    Modified = 131072,
    DonotPersist = 4096,
};
pub const GeneralMachineType = X509CertificateTemplateGeneralFlag.MachineType;
pub const GeneralCA = X509CertificateTemplateGeneralFlag.CA;
pub const GeneralCrossCA = X509CertificateTemplateGeneralFlag.CrossCA;
pub const GeneralDefault = X509CertificateTemplateGeneralFlag.Default;
pub const GeneralModified = X509CertificateTemplateGeneralFlag.Modified;
pub const GeneralDonotPersist = X509CertificateTemplateGeneralFlag.DonotPersist;

pub const X509CertificateTemplateEnrollmentFlag = enum(i32) {
    IncludeSymmetricAlgorithms = 1,
    PendAllRequests = 2,
    PublishToKRAContainer = 4,
    PublishToDS = 8,
    AutoEnrollmentCheckUserDSCertificate = 16,
    AutoEnrollment = 32,
    DomainAuthenticationNotRequired = 128,
    PreviousApprovalValidateReenrollment = 64,
    UserInteractionRequired = 256,
    AddTemplateName = 512,
    RemoveInvalidCertificateFromPersonalStore = 1024,
    AllowEnrollOnBehalfOf = 2048,
    AddOCSPNoCheck = 4096,
    ReuseKeyOnFullSmartCard = 8192,
    NoRevocationInfoInCerts = 16384,
    IncludeBasicConstraintsForEECerts = 32768,
    PreviousApprovalKeyBasedValidateReenrollment = 65536,
    CertificateIssuancePoliciesFromRequest = 131072,
    SkipAutoRenewal = 262144,
};
pub const EnrollmentIncludeSymmetricAlgorithms = X509CertificateTemplateEnrollmentFlag.IncludeSymmetricAlgorithms;
pub const EnrollmentPendAllRequests = X509CertificateTemplateEnrollmentFlag.PendAllRequests;
pub const EnrollmentPublishToKRAContainer = X509CertificateTemplateEnrollmentFlag.PublishToKRAContainer;
pub const EnrollmentPublishToDS = X509CertificateTemplateEnrollmentFlag.PublishToDS;
pub const EnrollmentAutoEnrollmentCheckUserDSCertificate = X509CertificateTemplateEnrollmentFlag.AutoEnrollmentCheckUserDSCertificate;
pub const EnrollmentAutoEnrollment = X509CertificateTemplateEnrollmentFlag.AutoEnrollment;
pub const EnrollmentDomainAuthenticationNotRequired = X509CertificateTemplateEnrollmentFlag.DomainAuthenticationNotRequired;
pub const EnrollmentPreviousApprovalValidateReenrollment = X509CertificateTemplateEnrollmentFlag.PreviousApprovalValidateReenrollment;
pub const EnrollmentUserInteractionRequired = X509CertificateTemplateEnrollmentFlag.UserInteractionRequired;
pub const EnrollmentAddTemplateName = X509CertificateTemplateEnrollmentFlag.AddTemplateName;
pub const EnrollmentRemoveInvalidCertificateFromPersonalStore = X509CertificateTemplateEnrollmentFlag.RemoveInvalidCertificateFromPersonalStore;
pub const EnrollmentAllowEnrollOnBehalfOf = X509CertificateTemplateEnrollmentFlag.AllowEnrollOnBehalfOf;
pub const EnrollmentAddOCSPNoCheck = X509CertificateTemplateEnrollmentFlag.AddOCSPNoCheck;
pub const EnrollmentReuseKeyOnFullSmartCard = X509CertificateTemplateEnrollmentFlag.ReuseKeyOnFullSmartCard;
pub const EnrollmentNoRevocationInfoInCerts = X509CertificateTemplateEnrollmentFlag.NoRevocationInfoInCerts;
pub const EnrollmentIncludeBasicConstraintsForEECerts = X509CertificateTemplateEnrollmentFlag.IncludeBasicConstraintsForEECerts;
pub const EnrollmentPreviousApprovalKeyBasedValidateReenrollment = X509CertificateTemplateEnrollmentFlag.PreviousApprovalKeyBasedValidateReenrollment;
pub const EnrollmentCertificateIssuancePoliciesFromRequest = X509CertificateTemplateEnrollmentFlag.CertificateIssuancePoliciesFromRequest;
pub const EnrollmentSkipAutoRenewal = X509CertificateTemplateEnrollmentFlag.SkipAutoRenewal;

pub const X509CertificateTemplateSubjectNameFlag = enum(i32) {
    NameEnrolleeSupplies = 1,
    NameRequireDirectoryPath = -2147483648,
    NameRequireCommonName = 1073741824,
    NameRequireEmail = 536870912,
    NameRequireDNS = 268435456,
    NameAndAlternativeNameOldCertSupplies = 8,
    AlternativeNameEnrolleeSupplies = 65536,
    AlternativeNameRequireDirectoryGUID = 16777216,
    AlternativeNameRequireUPN = 33554432,
    AlternativeNameRequireEmail = 67108864,
    AlternativeNameRequireSPN = 8388608,
    AlternativeNameRequireDNS = 134217728,
    AlternativeNameRequireDomainDNS = 4194304,
};
pub const SubjectNameEnrolleeSupplies = X509CertificateTemplateSubjectNameFlag.NameEnrolleeSupplies;
pub const SubjectNameRequireDirectoryPath = X509CertificateTemplateSubjectNameFlag.NameRequireDirectoryPath;
pub const SubjectNameRequireCommonName = X509CertificateTemplateSubjectNameFlag.NameRequireCommonName;
pub const SubjectNameRequireEmail = X509CertificateTemplateSubjectNameFlag.NameRequireEmail;
pub const SubjectNameRequireDNS = X509CertificateTemplateSubjectNameFlag.NameRequireDNS;
pub const SubjectNameAndAlternativeNameOldCertSupplies = X509CertificateTemplateSubjectNameFlag.NameAndAlternativeNameOldCertSupplies;
pub const SubjectAlternativeNameEnrolleeSupplies = X509CertificateTemplateSubjectNameFlag.AlternativeNameEnrolleeSupplies;
pub const SubjectAlternativeNameRequireDirectoryGUID = X509CertificateTemplateSubjectNameFlag.AlternativeNameRequireDirectoryGUID;
pub const SubjectAlternativeNameRequireUPN = X509CertificateTemplateSubjectNameFlag.AlternativeNameRequireUPN;
pub const SubjectAlternativeNameRequireEmail = X509CertificateTemplateSubjectNameFlag.AlternativeNameRequireEmail;
pub const SubjectAlternativeNameRequireSPN = X509CertificateTemplateSubjectNameFlag.AlternativeNameRequireSPN;
pub const SubjectAlternativeNameRequireDNS = X509CertificateTemplateSubjectNameFlag.AlternativeNameRequireDNS;
pub const SubjectAlternativeNameRequireDomainDNS = X509CertificateTemplateSubjectNameFlag.AlternativeNameRequireDomainDNS;

pub const X509CertificateTemplatePrivateKeyFlag = enum(i32) {
    RequireArchival = 1,
    Exportable = 16,
    RequireStrongKeyProtection = 32,
    RequireAlternateSignatureAlgorithm = 64,
    RequireSameKeyRenewal = 128,
    UseLegacyProvider = 256,
    EKTrustOnUse = 512,
    EKValidateCert = 1024,
    EKValidateKey = 2048,
    AttestNone = 0,
    AttestPreferred = 4096,
    AttestRequired = 8192,
    AttestMask = 12288,
    AttestWithoutPolicy = 16384,
    ServerVersionMask = 983040,
    // ServerVersionShift = 16, this enum value conflicts with Exportable
    HelloKspKey = 1048576,
    HelloLogonKey = 2097152,
    ClientVersionMask = 251658240,
    ClientVersionShift = 24,
};
pub const PrivateKeyRequireArchival = X509CertificateTemplatePrivateKeyFlag.RequireArchival;
pub const PrivateKeyExportable = X509CertificateTemplatePrivateKeyFlag.Exportable;
pub const PrivateKeyRequireStrongKeyProtection = X509CertificateTemplatePrivateKeyFlag.RequireStrongKeyProtection;
pub const PrivateKeyRequireAlternateSignatureAlgorithm = X509CertificateTemplatePrivateKeyFlag.RequireAlternateSignatureAlgorithm;
pub const PrivateKeyRequireSameKeyRenewal = X509CertificateTemplatePrivateKeyFlag.RequireSameKeyRenewal;
pub const PrivateKeyUseLegacyProvider = X509CertificateTemplatePrivateKeyFlag.UseLegacyProvider;
pub const PrivateKeyEKTrustOnUse = X509CertificateTemplatePrivateKeyFlag.EKTrustOnUse;
pub const PrivateKeyEKValidateCert = X509CertificateTemplatePrivateKeyFlag.EKValidateCert;
pub const PrivateKeyEKValidateKey = X509CertificateTemplatePrivateKeyFlag.EKValidateKey;
pub const PrivateKeyAttestNone = X509CertificateTemplatePrivateKeyFlag.AttestNone;
pub const PrivateKeyAttestPreferred = X509CertificateTemplatePrivateKeyFlag.AttestPreferred;
pub const PrivateKeyAttestRequired = X509CertificateTemplatePrivateKeyFlag.AttestRequired;
pub const PrivateKeyAttestMask = X509CertificateTemplatePrivateKeyFlag.AttestMask;
pub const PrivateKeyAttestWithoutPolicy = X509CertificateTemplatePrivateKeyFlag.AttestWithoutPolicy;
pub const PrivateKeyServerVersionMask = X509CertificateTemplatePrivateKeyFlag.ServerVersionMask;
pub const PrivateKeyServerVersionShift = X509CertificateTemplatePrivateKeyFlag.Exportable;
pub const PrivateKeyHelloKspKey = X509CertificateTemplatePrivateKeyFlag.HelloKspKey;
pub const PrivateKeyHelloLogonKey = X509CertificateTemplatePrivateKeyFlag.HelloLogonKey;
pub const PrivateKeyClientVersionMask = X509CertificateTemplatePrivateKeyFlag.ClientVersionMask;
pub const PrivateKeyClientVersionShift = X509CertificateTemplatePrivateKeyFlag.ClientVersionShift;

pub const ImportPFXFlags = enum(i32) {
    None = 0,
    MachineContext = 1,
    ForceOverwrite = 2,
    Silent = 4,
    SaveProperties = 8,
    Exportable = 16,
    ExportableEncrypted = 32,
    NoUserProtected = 64,
    UserProtected = 128,
    UserProtectedHigh = 256,
    InstallCertificate = 512,
    InstallChain = 1024,
    InstallChainAndRoot = 2048,
};
pub const ImportNone = ImportPFXFlags.None;
pub const ImportMachineContext = ImportPFXFlags.MachineContext;
pub const ImportForceOverwrite = ImportPFXFlags.ForceOverwrite;
pub const ImportSilent = ImportPFXFlags.Silent;
pub const ImportSaveProperties = ImportPFXFlags.SaveProperties;
pub const ImportExportable = ImportPFXFlags.Exportable;
pub const ImportExportableEncrypted = ImportPFXFlags.ExportableEncrypted;
pub const ImportNoUserProtected = ImportPFXFlags.NoUserProtected;
pub const ImportUserProtected = ImportPFXFlags.UserProtected;
pub const ImportUserProtectedHigh = ImportPFXFlags.UserProtectedHigh;
pub const ImportInstallCertificate = ImportPFXFlags.InstallCertificate;
pub const ImportInstallChain = ImportPFXFlags.InstallChain;
pub const ImportInstallChainAndRoot = ImportPFXFlags.InstallChainAndRoot;

pub const FNIMPORTPFXTOPROVIDER = *const fn (
    h_wnd_parent: ?HWND,
    // TODO: what to do with BytesParamIndex 2?
    pb_p_f_x: ?*const u8,
    cb_p_f_x: u32,
    import_flags: ImportPFXFlags,
    pwsz_password: ?[*:0]const u16,
    pwsz_provider_name: ?[*:0]const u16,
    pwsz_reader_name: ?[*:0]const u16,
    pwsz_container_name_prefix: ?[*:0]const u16,
    pwsz_pin: ?[*:0]const u16,
    pwsz_friendly_name: ?[*:0]const u16,
    pc_cert_out: ?*u32,
    prgp_cert_out: ?*?*?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const FNIMPORTPFXTOPROVIDERFREEDATA = *const fn (
    c_cert: u32,
    rgp_cert: ?[*]?*CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertEncodeStringArray_Value = Guid.initString("12a88820-7494-11d0-8816-00a0c903b83c");
pub const IID_ICertEncodeStringArray = &IID_ICertEncodeStringArray_Value;
pub const ICertEncodeStringArray = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: *const fn (
            self: *const ICertEncodeStringArray,
            str_binary: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringType: *const fn (
            self: *const ICertEncodeStringArray,
            p_string_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn (
            self: *const ICertEncodeStringArray,
            p_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn (
            self: *const ICertEncodeStringArray,
            index: i32,
            pstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const ICertEncodeStringArray,
            count: i32,
            string_type: CERT_RDN_ATTR_VALUE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValue: *const fn (
            self: *const ICertEncodeStringArray,
            index: i32,
            str: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: *const fn (
            self: *const ICertEncodeStringArray,
            pstr_binary: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn decode(self: *const T, str_binary_: ?BSTR) HRESULT {
                return @as(*const ICertEncodeStringArray.VTable, @ptrCast(self.vtable)).Decode(@as(*const ICertEncodeStringArray, @ptrCast(self)), str_binary_);
            }
            pub inline fn getStringType(self: *const T, p_string_type_: ?*i32) HRESULT {
                return @as(*const ICertEncodeStringArray.VTable, @ptrCast(self.vtable)).GetStringType(@as(*const ICertEncodeStringArray, @ptrCast(self)), p_string_type_);
            }
            pub inline fn getCount(self: *const T, p_count_: ?*i32) HRESULT {
                return @as(*const ICertEncodeStringArray.VTable, @ptrCast(self.vtable)).GetCount(@as(*const ICertEncodeStringArray, @ptrCast(self)), p_count_);
            }
            pub inline fn getValue(self: *const T, index_: i32, pstr_: ?*?BSTR) HRESULT {
                return @as(*const ICertEncodeStringArray.VTable, @ptrCast(self.vtable)).GetValue(@as(*const ICertEncodeStringArray, @ptrCast(self)), index_, pstr_);
            }
            pub inline fn reset(self: *const T, count_: i32, string_type_: CERT_RDN_ATTR_VALUE_TYPE) HRESULT {
                return @as(*const ICertEncodeStringArray.VTable, @ptrCast(self.vtable)).Reset(@as(*const ICertEncodeStringArray, @ptrCast(self)), count_, string_type_);
            }
            pub inline fn setValue(self: *const T, index_: i32, str_: ?BSTR) HRESULT {
                return @as(*const ICertEncodeStringArray.VTable, @ptrCast(self.vtable)).SetValue(@as(*const ICertEncodeStringArray, @ptrCast(self)), index_, str_);
            }
            pub inline fn encode(self: *const T, pstr_binary_: ?*?BSTR) HRESULT {
                return @as(*const ICertEncodeStringArray.VTable, @ptrCast(self.vtable)).Encode(@as(*const ICertEncodeStringArray, @ptrCast(self)), pstr_binary_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertEncodeStringArray2_Value = Guid.initString("9c680d93-9b7d-4e95-9018-4ffe10ba5ada");
pub const IID_ICertEncodeStringArray2 = &IID_ICertEncodeStringArray2_Value;
pub const ICertEncodeStringArray2 = extern struct {
    pub const VTable = extern struct {
        base: ICertEncodeStringArray.VTable,
        DecodeBlob: *const fn (
            self: *const ICertEncodeStringArray2,
            str_encoded_data: ?BSTR,
            encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncodeBlob: *const fn (
            self: *const ICertEncodeStringArray2,
            encoding: EncodingType,
            pstr_encoded_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertEncodeStringArray.MethodMixin(T);
            pub inline fn decodeBlob(self: *const T, str_encoded_data_: ?BSTR, encoding_: EncodingType) HRESULT {
                return @as(*const ICertEncodeStringArray2.VTable, @ptrCast(self.vtable)).DecodeBlob(@as(*const ICertEncodeStringArray2, @ptrCast(self)), str_encoded_data_, encoding_);
            }
            pub inline fn encodeBlob(self: *const T, encoding_: EncodingType, pstr_encoded_data_: ?*?BSTR) HRESULT {
                return @as(*const ICertEncodeStringArray2.VTable, @ptrCast(self.vtable)).EncodeBlob(@as(*const ICertEncodeStringArray2, @ptrCast(self)), encoding_, pstr_encoded_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertEncodeLongArray_Value = Guid.initString("15e2f230-a0a2-11d0-8821-00a0c903b83c");
pub const IID_ICertEncodeLongArray = &IID_ICertEncodeLongArray_Value;
pub const ICertEncodeLongArray = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: *const fn (
            self: *const ICertEncodeLongArray,
            str_binary: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn (
            self: *const ICertEncodeLongArray,
            p_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn (
            self: *const ICertEncodeLongArray,
            index: i32,
            p_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const ICertEncodeLongArray,
            count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValue: *const fn (
            self: *const ICertEncodeLongArray,
            index: i32,
            value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: *const fn (
            self: *const ICertEncodeLongArray,
            pstr_binary: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn decode(self: *const T, str_binary_: ?BSTR) HRESULT {
                return @as(*const ICertEncodeLongArray.VTable, @ptrCast(self.vtable)).Decode(@as(*const ICertEncodeLongArray, @ptrCast(self)), str_binary_);
            }
            pub inline fn getCount(self: *const T, p_count_: ?*i32) HRESULT {
                return @as(*const ICertEncodeLongArray.VTable, @ptrCast(self.vtable)).GetCount(@as(*const ICertEncodeLongArray, @ptrCast(self)), p_count_);
            }
            pub inline fn getValue(self: *const T, index_: i32, p_value_: ?*i32) HRESULT {
                return @as(*const ICertEncodeLongArray.VTable, @ptrCast(self.vtable)).GetValue(@as(*const ICertEncodeLongArray, @ptrCast(self)), index_, p_value_);
            }
            pub inline fn reset(self: *const T, count_: i32) HRESULT {
                return @as(*const ICertEncodeLongArray.VTable, @ptrCast(self.vtable)).Reset(@as(*const ICertEncodeLongArray, @ptrCast(self)), count_);
            }
            pub inline fn setValue(self: *const T, index_: i32, value_: i32) HRESULT {
                return @as(*const ICertEncodeLongArray.VTable, @ptrCast(self.vtable)).SetValue(@as(*const ICertEncodeLongArray, @ptrCast(self)), index_, value_);
            }
            pub inline fn encode(self: *const T, pstr_binary_: ?*?BSTR) HRESULT {
                return @as(*const ICertEncodeLongArray.VTable, @ptrCast(self.vtable)).Encode(@as(*const ICertEncodeLongArray, @ptrCast(self)), pstr_binary_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertEncodeLongArray2_Value = Guid.initString("4efde84a-bd9b-4fc2-a108-c347d478840f");
pub const IID_ICertEncodeLongArray2 = &IID_ICertEncodeLongArray2_Value;
pub const ICertEncodeLongArray2 = extern struct {
    pub const VTable = extern struct {
        base: ICertEncodeLongArray.VTable,
        DecodeBlob: *const fn (
            self: *const ICertEncodeLongArray2,
            str_encoded_data: ?BSTR,
            encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncodeBlob: *const fn (
            self: *const ICertEncodeLongArray2,
            encoding: EncodingType,
            pstr_encoded_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertEncodeLongArray.MethodMixin(T);
            pub inline fn decodeBlob(self: *const T, str_encoded_data_: ?BSTR, encoding_: EncodingType) HRESULT {
                return @as(*const ICertEncodeLongArray2.VTable, @ptrCast(self.vtable)).DecodeBlob(@as(*const ICertEncodeLongArray2, @ptrCast(self)), str_encoded_data_, encoding_);
            }
            pub inline fn encodeBlob(self: *const T, encoding_: EncodingType, pstr_encoded_data_: ?*?BSTR) HRESULT {
                return @as(*const ICertEncodeLongArray2.VTable, @ptrCast(self.vtable)).EncodeBlob(@as(*const ICertEncodeLongArray2, @ptrCast(self)), encoding_, pstr_encoded_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertEncodeDateArray_Value = Guid.initString("2f9469a0-a470-11d0-8821-00a0c903b83c");
pub const IID_ICertEncodeDateArray = &IID_ICertEncodeDateArray_Value;
pub const ICertEncodeDateArray = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: *const fn (
            self: *const ICertEncodeDateArray,
            str_binary: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn (
            self: *const ICertEncodeDateArray,
            p_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn (
            self: *const ICertEncodeDateArray,
            index: i32,
            p_value: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const ICertEncodeDateArray,
            count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValue: *const fn (
            self: *const ICertEncodeDateArray,
            index: i32,
            value: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: *const fn (
            self: *const ICertEncodeDateArray,
            pstr_binary: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn decode(self: *const T, str_binary_: ?BSTR) HRESULT {
                return @as(*const ICertEncodeDateArray.VTable, @ptrCast(self.vtable)).Decode(@as(*const ICertEncodeDateArray, @ptrCast(self)), str_binary_);
            }
            pub inline fn getCount(self: *const T, p_count_: ?*i32) HRESULT {
                return @as(*const ICertEncodeDateArray.VTable, @ptrCast(self.vtable)).GetCount(@as(*const ICertEncodeDateArray, @ptrCast(self)), p_count_);
            }
            pub inline fn getValue(self: *const T, index_: i32, p_value_: ?*f64) HRESULT {
                return @as(*const ICertEncodeDateArray.VTable, @ptrCast(self.vtable)).GetValue(@as(*const ICertEncodeDateArray, @ptrCast(self)), index_, p_value_);
            }
            pub inline fn reset(self: *const T, count_: i32) HRESULT {
                return @as(*const ICertEncodeDateArray.VTable, @ptrCast(self.vtable)).Reset(@as(*const ICertEncodeDateArray, @ptrCast(self)), count_);
            }
            pub inline fn setValue(self: *const T, index_: i32, value_: f64) HRESULT {
                return @as(*const ICertEncodeDateArray.VTable, @ptrCast(self.vtable)).SetValue(@as(*const ICertEncodeDateArray, @ptrCast(self)), index_, value_);
            }
            pub inline fn encode(self: *const T, pstr_binary_: ?*?BSTR) HRESULT {
                return @as(*const ICertEncodeDateArray.VTable, @ptrCast(self.vtable)).Encode(@as(*const ICertEncodeDateArray, @ptrCast(self)), pstr_binary_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertEncodeDateArray2_Value = Guid.initString("99a4edb5-2b8e-448d-bf95-bba8d7789dc8");
pub const IID_ICertEncodeDateArray2 = &IID_ICertEncodeDateArray2_Value;
pub const ICertEncodeDateArray2 = extern struct {
    pub const VTable = extern struct {
        base: ICertEncodeDateArray.VTable,
        DecodeBlob: *const fn (
            self: *const ICertEncodeDateArray2,
            str_encoded_data: ?BSTR,
            encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncodeBlob: *const fn (
            self: *const ICertEncodeDateArray2,
            encoding: EncodingType,
            pstr_encoded_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertEncodeDateArray.MethodMixin(T);
            pub inline fn decodeBlob(self: *const T, str_encoded_data_: ?BSTR, encoding_: EncodingType) HRESULT {
                return @as(*const ICertEncodeDateArray2.VTable, @ptrCast(self.vtable)).DecodeBlob(@as(*const ICertEncodeDateArray2, @ptrCast(self)), str_encoded_data_, encoding_);
            }
            pub inline fn encodeBlob(self: *const T, encoding_: EncodingType, pstr_encoded_data_: ?*?BSTR) HRESULT {
                return @as(*const ICertEncodeDateArray2.VTable, @ptrCast(self.vtable)).EncodeBlob(@as(*const ICertEncodeDateArray2, @ptrCast(self)), encoding_, pstr_encoded_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertEncodeCRLDistInfo_Value = Guid.initString("01958640-bbff-11d0-8825-00a0c903b83c");
pub const IID_ICertEncodeCRLDistInfo = &IID_ICertEncodeCRLDistInfo_Value;
pub const ICertEncodeCRLDistInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: *const fn (
            self: *const ICertEncodeCRLDistInfo,
            str_binary: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDistPointCount: *const fn (
            self: *const ICertEncodeCRLDistInfo,
            p_dist_point_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameCount: *const fn (
            self: *const ICertEncodeCRLDistInfo,
            dist_point_index: i32,
            p_name_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameChoice: *const fn (
            self: *const ICertEncodeCRLDistInfo,
            dist_point_index: i32,
            name_index: i32,
            p_name_choice: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn (
            self: *const ICertEncodeCRLDistInfo,
            dist_point_index: i32,
            name_index: i32,
            pstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const ICertEncodeCRLDistInfo,
            dist_point_count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNameCount: *const fn (
            self: *const ICertEncodeCRLDistInfo,
            dist_point_index: i32,
            name_count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNameEntry: *const fn (
            self: *const ICertEncodeCRLDistInfo,
            dist_point_index: i32,
            name_index: i32,
            name_choice: CERT_ALT_NAME,
            str_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: *const fn (
            self: *const ICertEncodeCRLDistInfo,
            pstr_binary: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn decode(self: *const T, str_binary_: ?BSTR) HRESULT {
                return @as(*const ICertEncodeCRLDistInfo.VTable, @ptrCast(self.vtable)).Decode(@as(*const ICertEncodeCRLDistInfo, @ptrCast(self)), str_binary_);
            }
            pub inline fn getDistPointCount(self: *const T, p_dist_point_count_: ?*i32) HRESULT {
                return @as(*const ICertEncodeCRLDistInfo.VTable, @ptrCast(self.vtable)).GetDistPointCount(@as(*const ICertEncodeCRLDistInfo, @ptrCast(self)), p_dist_point_count_);
            }
            pub inline fn getNameCount(self: *const T, dist_point_index_: i32, p_name_count_: ?*i32) HRESULT {
                return @as(*const ICertEncodeCRLDistInfo.VTable, @ptrCast(self.vtable)).GetNameCount(@as(*const ICertEncodeCRLDistInfo, @ptrCast(self)), dist_point_index_, p_name_count_);
            }
            pub inline fn getNameChoice(self: *const T, dist_point_index_: i32, name_index_: i32, p_name_choice_: ?*i32) HRESULT {
                return @as(*const ICertEncodeCRLDistInfo.VTable, @ptrCast(self.vtable)).GetNameChoice(@as(*const ICertEncodeCRLDistInfo, @ptrCast(self)), dist_point_index_, name_index_, p_name_choice_);
            }
            pub inline fn getName(self: *const T, dist_point_index_: i32, name_index_: i32, pstr_name_: ?*?BSTR) HRESULT {
                return @as(*const ICertEncodeCRLDistInfo.VTable, @ptrCast(self.vtable)).GetName(@as(*const ICertEncodeCRLDistInfo, @ptrCast(self)), dist_point_index_, name_index_, pstr_name_);
            }
            pub inline fn reset(self: *const T, dist_point_count_: i32) HRESULT {
                return @as(*const ICertEncodeCRLDistInfo.VTable, @ptrCast(self.vtable)).Reset(@as(*const ICertEncodeCRLDistInfo, @ptrCast(self)), dist_point_count_);
            }
            pub inline fn setNameCount(self: *const T, dist_point_index_: i32, name_count_: i32) HRESULT {
                return @as(*const ICertEncodeCRLDistInfo.VTable, @ptrCast(self.vtable)).SetNameCount(@as(*const ICertEncodeCRLDistInfo, @ptrCast(self)), dist_point_index_, name_count_);
            }
            pub inline fn setNameEntry(self: *const T, dist_point_index_: i32, name_index_: i32, name_choice_: CERT_ALT_NAME, str_name_: ?BSTR) HRESULT {
                return @as(*const ICertEncodeCRLDistInfo.VTable, @ptrCast(self.vtable)).SetNameEntry(@as(*const ICertEncodeCRLDistInfo, @ptrCast(self)), dist_point_index_, name_index_, name_choice_, str_name_);
            }
            pub inline fn encode(self: *const T, pstr_binary_: ?*?BSTR) HRESULT {
                return @as(*const ICertEncodeCRLDistInfo.VTable, @ptrCast(self.vtable)).Encode(@as(*const ICertEncodeCRLDistInfo, @ptrCast(self)), pstr_binary_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertEncodeCRLDistInfo2_Value = Guid.initString("b4275d4b-3e30-446f-ad36-09d03120b078");
pub const IID_ICertEncodeCRLDistInfo2 = &IID_ICertEncodeCRLDistInfo2_Value;
pub const ICertEncodeCRLDistInfo2 = extern struct {
    pub const VTable = extern struct {
        base: ICertEncodeCRLDistInfo.VTable,
        DecodeBlob: *const fn (
            self: *const ICertEncodeCRLDistInfo2,
            str_encoded_data: ?BSTR,
            encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncodeBlob: *const fn (
            self: *const ICertEncodeCRLDistInfo2,
            encoding: EncodingType,
            pstr_encoded_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertEncodeCRLDistInfo.MethodMixin(T);
            pub inline fn decodeBlob(self: *const T, str_encoded_data_: ?BSTR, encoding_: EncodingType) HRESULT {
                return @as(*const ICertEncodeCRLDistInfo2.VTable, @ptrCast(self.vtable)).DecodeBlob(@as(*const ICertEncodeCRLDistInfo2, @ptrCast(self)), str_encoded_data_, encoding_);
            }
            pub inline fn encodeBlob(self: *const T, encoding_: EncodingType, pstr_encoded_data_: ?*?BSTR) HRESULT {
                return @as(*const ICertEncodeCRLDistInfo2.VTable, @ptrCast(self.vtable)).EncodeBlob(@as(*const ICertEncodeCRLDistInfo2, @ptrCast(self)), encoding_, pstr_encoded_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertEncodeAltName_Value = Guid.initString("1c9a8c70-1271-11d1-9bd4-00c04fb683fa");
pub const IID_ICertEncodeAltName = &IID_ICertEncodeAltName_Value;
pub const ICertEncodeAltName = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: *const fn (
            self: *const ICertEncodeAltName,
            str_binary: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameCount: *const fn (
            self: *const ICertEncodeAltName,
            p_name_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameChoice: *const fn (
            self: *const ICertEncodeAltName,
            name_index: i32,
            p_name_choice: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn (
            self: *const ICertEncodeAltName,
            name_index: i32,
            pstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const ICertEncodeAltName,
            name_count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNameEntry: *const fn (
            self: *const ICertEncodeAltName,
            name_index: i32,
            name_choice: CERT_ALT_NAME,
            str_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: *const fn (
            self: *const ICertEncodeAltName,
            pstr_binary: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn decode(self: *const T, str_binary_: ?BSTR) HRESULT {
                return @as(*const ICertEncodeAltName.VTable, @ptrCast(self.vtable)).Decode(@as(*const ICertEncodeAltName, @ptrCast(self)), str_binary_);
            }
            pub inline fn getNameCount(self: *const T, p_name_count_: ?*i32) HRESULT {
                return @as(*const ICertEncodeAltName.VTable, @ptrCast(self.vtable)).GetNameCount(@as(*const ICertEncodeAltName, @ptrCast(self)), p_name_count_);
            }
            pub inline fn getNameChoice(self: *const T, name_index_: i32, p_name_choice_: ?*i32) HRESULT {
                return @as(*const ICertEncodeAltName.VTable, @ptrCast(self.vtable)).GetNameChoice(@as(*const ICertEncodeAltName, @ptrCast(self)), name_index_, p_name_choice_);
            }
            pub inline fn getName(self: *const T, name_index_: i32, pstr_name_: ?*?BSTR) HRESULT {
                return @as(*const ICertEncodeAltName.VTable, @ptrCast(self.vtable)).GetName(@as(*const ICertEncodeAltName, @ptrCast(self)), name_index_, pstr_name_);
            }
            pub inline fn reset(self: *const T, name_count_: i32) HRESULT {
                return @as(*const ICertEncodeAltName.VTable, @ptrCast(self.vtable)).Reset(@as(*const ICertEncodeAltName, @ptrCast(self)), name_count_);
            }
            pub inline fn setNameEntry(self: *const T, name_index_: i32, name_choice_: CERT_ALT_NAME, str_name_: ?BSTR) HRESULT {
                return @as(*const ICertEncodeAltName.VTable, @ptrCast(self.vtable)).SetNameEntry(@as(*const ICertEncodeAltName, @ptrCast(self)), name_index_, name_choice_, str_name_);
            }
            pub inline fn encode(self: *const T, pstr_binary_: ?*?BSTR) HRESULT {
                return @as(*const ICertEncodeAltName.VTable, @ptrCast(self.vtable)).Encode(@as(*const ICertEncodeAltName, @ptrCast(self)), pstr_binary_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertEncodeAltName2_Value = Guid.initString("f67fe177-5ef1-4535-b4ce-29df15e2e0c3");
pub const IID_ICertEncodeAltName2 = &IID_ICertEncodeAltName2_Value;
pub const ICertEncodeAltName2 = extern struct {
    pub const VTable = extern struct {
        base: ICertEncodeAltName.VTable,
        DecodeBlob: *const fn (
            self: *const ICertEncodeAltName2,
            str_encoded_data: ?BSTR,
            encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncodeBlob: *const fn (
            self: *const ICertEncodeAltName2,
            encoding: EncodingType,
            pstr_encoded_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameBlob: *const fn (
            self: *const ICertEncodeAltName2,
            name_index: i32,
            encoding: EncodingType,
            pstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNameEntryBlob: *const fn (
            self: *const ICertEncodeAltName2,
            name_index: i32,
            name_choice: i32,
            str_name: ?BSTR,
            encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertEncodeAltName.MethodMixin(T);
            pub inline fn decodeBlob(self: *const T, str_encoded_data_: ?BSTR, encoding_: EncodingType) HRESULT {
                return @as(*const ICertEncodeAltName2.VTable, @ptrCast(self.vtable)).DecodeBlob(@as(*const ICertEncodeAltName2, @ptrCast(self)), str_encoded_data_, encoding_);
            }
            pub inline fn encodeBlob(self: *const T, encoding_: EncodingType, pstr_encoded_data_: ?*?BSTR) HRESULT {
                return @as(*const ICertEncodeAltName2.VTable, @ptrCast(self.vtable)).EncodeBlob(@as(*const ICertEncodeAltName2, @ptrCast(self)), encoding_, pstr_encoded_data_);
            }
            pub inline fn getNameBlob(self: *const T, name_index_: i32, encoding_: EncodingType, pstr_name_: ?*?BSTR) HRESULT {
                return @as(*const ICertEncodeAltName2.VTable, @ptrCast(self.vtable)).GetNameBlob(@as(*const ICertEncodeAltName2, @ptrCast(self)), name_index_, encoding_, pstr_name_);
            }
            pub inline fn setNameEntryBlob(self: *const T, name_index_: i32, name_choice_: i32, str_name_: ?BSTR, encoding_: EncodingType) HRESULT {
                return @as(*const ICertEncodeAltName2.VTable, @ptrCast(self.vtable)).SetNameEntryBlob(@as(*const ICertEncodeAltName2, @ptrCast(self)), name_index_, name_choice_, str_name_, encoding_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertEncodeBitString_Value = Guid.initString("6db525be-1278-11d1-9bd4-00c04fb683fa");
pub const IID_ICertEncodeBitString = &IID_ICertEncodeBitString_Value;
pub const ICertEncodeBitString = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Decode: *const fn (
            self: *const ICertEncodeBitString,
            str_binary: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitCount: *const fn (
            self: *const ICertEncodeBitString,
            p_bit_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitString: *const fn (
            self: *const ICertEncodeBitString,
            pstr_bit_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Encode: *const fn (
            self: *const ICertEncodeBitString,
            bit_count: i32,
            str_bit_string: ?BSTR,
            pstr_binary: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn decode(self: *const T, str_binary_: ?BSTR) HRESULT {
                return @as(*const ICertEncodeBitString.VTable, @ptrCast(self.vtable)).Decode(@as(*const ICertEncodeBitString, @ptrCast(self)), str_binary_);
            }
            pub inline fn getBitCount(self: *const T, p_bit_count_: ?*i32) HRESULT {
                return @as(*const ICertEncodeBitString.VTable, @ptrCast(self.vtable)).GetBitCount(@as(*const ICertEncodeBitString, @ptrCast(self)), p_bit_count_);
            }
            pub inline fn getBitString(self: *const T, pstr_bit_string_: ?*?BSTR) HRESULT {
                return @as(*const ICertEncodeBitString.VTable, @ptrCast(self.vtable)).GetBitString(@as(*const ICertEncodeBitString, @ptrCast(self)), pstr_bit_string_);
            }
            pub inline fn encode(self: *const T, bit_count_: i32, str_bit_string_: ?BSTR, pstr_binary_: ?*?BSTR) HRESULT {
                return @as(*const ICertEncodeBitString.VTable, @ptrCast(self.vtable)).Encode(@as(*const ICertEncodeBitString, @ptrCast(self)), bit_count_, str_bit_string_, pstr_binary_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertEncodeBitString2_Value = Guid.initString("e070d6e7-23ef-4dd2-8242-ebd9c928cb30");
pub const IID_ICertEncodeBitString2 = &IID_ICertEncodeBitString2_Value;
pub const ICertEncodeBitString2 = extern struct {
    pub const VTable = extern struct {
        base: ICertEncodeBitString.VTable,
        DecodeBlob: *const fn (
            self: *const ICertEncodeBitString2,
            str_encoded_data: ?BSTR,
            encoding: EncodingType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncodeBlob: *const fn (
            self: *const ICertEncodeBitString2,
            bit_count: i32,
            str_bit_string: ?BSTR,
            encoding_in: EncodingType,
            encoding: EncodingType,
            pstr_encoded_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitStringBlob: *const fn (
            self: *const ICertEncodeBitString2,
            encoding: EncodingType,
            pstr_bit_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertEncodeBitString.MethodMixin(T);
            pub inline fn decodeBlob(self: *const T, str_encoded_data_: ?BSTR, encoding_: EncodingType) HRESULT {
                return @as(*const ICertEncodeBitString2.VTable, @ptrCast(self.vtable)).DecodeBlob(@as(*const ICertEncodeBitString2, @ptrCast(self)), str_encoded_data_, encoding_);
            }
            pub inline fn encodeBlob(self: *const T, bit_count_: i32, str_bit_string_: ?BSTR, encoding_in_: EncodingType, encoding_: EncodingType, pstr_encoded_data_: ?*?BSTR) HRESULT {
                return @as(*const ICertEncodeBitString2.VTable, @ptrCast(self.vtable)).EncodeBlob(@as(*const ICertEncodeBitString2, @ptrCast(self)), bit_count_, str_bit_string_, encoding_in_, encoding_, pstr_encoded_data_);
            }
            pub inline fn getBitStringBlob(self: *const T, encoding_: EncodingType, pstr_bit_string_: ?*?BSTR) HRESULT {
                return @as(*const ICertEncodeBitString2.VTable, @ptrCast(self.vtable)).GetBitStringBlob(@as(*const ICertEncodeBitString2, @ptrCast(self)), encoding_, pstr_bit_string_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertExit_Value = Guid.initString("e19ae1a0-7364-11d0-8816-00a0c903b83c");
pub const IID_ICertExit = &IID_ICertExit_Value;
pub const ICertExit = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Initialize: *const fn (
            self: *const ICertExit,
            str_config: ?BSTR,
            p_event_mask: ?*CERT_EXIT_EVENT_MASK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Notify: *const fn (
            self: *const ICertExit,
            exit_event: i32,
            context: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: *const fn (
            self: *const ICertExit,
            pstr_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn initialize(self: *const T, str_config_: ?BSTR, p_event_mask_: ?*CERT_EXIT_EVENT_MASK) HRESULT {
                return @as(*const ICertExit.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ICertExit, @ptrCast(self)), str_config_, p_event_mask_);
            }
            pub inline fn notify(self: *const T, exit_event_: i32, context_: i32) HRESULT {
                return @as(*const ICertExit.VTable, @ptrCast(self.vtable)).Notify(@as(*const ICertExit, @ptrCast(self)), exit_event_, context_);
            }
            pub inline fn getDescription(self: *const T, pstr_description_: ?*?BSTR) HRESULT {
                return @as(*const ICertExit.VTable, @ptrCast(self.vtable)).GetDescription(@as(*const ICertExit, @ptrCast(self)), pstr_description_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2003'
const IID_ICertExit2_Value = Guid.initString("0abf484b-d049-464d-a7ed-552e7529b0ff");
pub const IID_ICertExit2 = &IID_ICertExit2_Value;
pub const ICertExit2 = extern struct {
    pub const VTable = extern struct {
        base: ICertExit.VTable,
        GetManageModule: *const fn (
            self: *const ICertExit2,
            pp_manage_module: ?*?*ICertManageModule,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertExit.MethodMixin(T);
            pub inline fn getManageModule(self: *const T, pp_manage_module_: ?*?*ICertManageModule) HRESULT {
                return @as(*const ICertExit2.VTable, @ptrCast(self.vtable)).GetManageModule(@as(*const ICertExit2, @ptrCast(self)), pp_manage_module_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const ENUM_CATYPES = enum(i32) {
    ENTERPRISE_ROOTCA = 0,
    ENTERPRISE_SUBCA = 1,
    STANDALONE_ROOTCA = 3,
    STANDALONE_SUBCA = 4,
    UNKNOWN_CA = 5,
};
pub const ENUM_ENTERPRISE_ROOTCA = ENUM_CATYPES.ENTERPRISE_ROOTCA;
pub const ENUM_ENTERPRISE_SUBCA = ENUM_CATYPES.ENTERPRISE_SUBCA;
pub const ENUM_STANDALONE_ROOTCA = ENUM_CATYPES.STANDALONE_ROOTCA;
pub const ENUM_STANDALONE_SUBCA = ENUM_CATYPES.STANDALONE_SUBCA;
pub const ENUM_UNKNOWN_CA = ENUM_CATYPES.UNKNOWN_CA;

pub const CAINFO = extern struct {
    cbSize: u32,
    CAType: ENUM_CATYPES,
    cCASignatureCerts: u32,
    cCAExchangeCerts: u32,
    cExitModules: u32,
    lPropIdMax: i32,
    lRoleSeparationEnabled: i32,
    cKRACertUsedCount: u32,
    cKRACertCount: u32,
    fAdvancedServer: u32,
};

const CLSID_CEnroll2_Value = Guid.initString("127698e4-e730-4e5c-a2b1-21490a70c8a1");
pub const CLSID_CEnroll2 = &CLSID_CEnroll2_Value;

const CLSID_CEnroll_Value = Guid.initString("43f8f289-7a20-11d0-8f06-00c04fc295e1");
pub const CLSID_CEnroll = &CLSID_CEnroll_Value;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICEnroll_Value = Guid.initString("43f8f288-7a20-11d0-8f06-00c04fc295e1");
pub const IID_ICEnroll = &IID_ICEnroll_Value;
pub const ICEnroll = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        createFilePKCS10: *const fn (
            self: *const ICEnroll,
            d_n_name: ?BSTR,
            usage: ?BSTR,
            wsz_p_k_c_s10_file_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptFilePKCS7: *const fn (
            self: *const ICEnroll,
            wsz_p_k_c_s7_file_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createPKCS10: *const fn (
            self: *const ICEnroll,
            d_n_name: ?BSTR,
            usage: ?BSTR,
            p_p_k_c_s10: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptPKCS7: *const fn (
            self: *const ICEnroll,
            p_k_c_s7: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getCertFromPKCS7: *const fn (
            self: *const ICEnroll,
            wsz_p_k_c_s7: ?BSTR,
            pbstr_cert: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        enumProviders: *const fn (
            self: *const ICEnroll,
            dw_index: i32,
            dw_flags: i32,
            pbstr_prov_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        enumContainers: *const fn (
            self: *const ICEnroll,
            dw_index: i32,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        freeRequestInfo: *const fn (
            self: *const ICEnroll,
            p_k_c_s7_or_p_k_c_s10: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MyStoreName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MyStoreName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            bstr_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MyStoreType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pbstr_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MyStoreType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            bstr_type: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MyStoreFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pdw_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MyStoreFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            dw_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CAStoreName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CAStoreName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            bstr_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CAStoreType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pbstr_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CAStoreType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            bstr_type: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CAStoreFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pdw_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CAStoreFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            dw_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RootStoreName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RootStoreName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            bstr_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RootStoreType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pbstr_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RootStoreType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            bstr_type: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RootStoreFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pdw_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RootStoreFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            dw_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestStoreName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RequestStoreName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            bstr_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestStoreType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pbstr_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RequestStoreType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            bstr_type: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestStoreFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pdw_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RequestStoreFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            dw_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ContainerName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pbstr_container: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ContainerName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            bstr_container: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pbstr_provider: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            bstr_provider: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pdw_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            dw_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeySpec: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pdw: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_KeySpec: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            dw: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pdw_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            dw_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UseExistingKeySet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            f_use_existing_keys: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UseExistingKeySet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            f_use_existing_keys: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GenKeyFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pdw_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GenKeyFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            dw_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeleteRequestCert: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            f_delete: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DeleteRequestCert: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            f_delete: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WriteCertToCSP: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            f_bool: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WriteCertToCSP: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            f_bool: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SPCFileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SPCFileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            bstr: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PVKFileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PVKFileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            bstr: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgorithm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll,
            bstr: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn createFilePKCS10(self: *const T, d_n_name_: ?BSTR, usage_: ?BSTR, wsz_p_k_c_s10_file_name_: ?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).createFilePKCS10(@as(*const ICEnroll, @ptrCast(self)), d_n_name_, usage_, wsz_p_k_c_s10_file_name_);
            }
            pub inline fn acceptFilePKCS7(self: *const T, wsz_p_k_c_s7_file_name_: ?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).acceptFilePKCS7(@as(*const ICEnroll, @ptrCast(self)), wsz_p_k_c_s7_file_name_);
            }
            pub inline fn createPKCS10(self: *const T, d_n_name_: ?BSTR, usage_: ?BSTR, p_p_k_c_s10_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).createPKCS10(@as(*const ICEnroll, @ptrCast(self)), d_n_name_, usage_, p_p_k_c_s10_);
            }
            pub inline fn acceptPKCS7(self: *const T, p_k_c_s7_: ?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).acceptPKCS7(@as(*const ICEnroll, @ptrCast(self)), p_k_c_s7_);
            }
            pub inline fn getCertFromPKCS7(self: *const T, wsz_p_k_c_s7_: ?BSTR, pbstr_cert_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).getCertFromPKCS7(@as(*const ICEnroll, @ptrCast(self)), wsz_p_k_c_s7_, pbstr_cert_);
            }
            pub inline fn enumProviders(self: *const T, dw_index_: i32, dw_flags_: i32, pbstr_prov_name_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).enumProviders(@as(*const ICEnroll, @ptrCast(self)), dw_index_, dw_flags_, pbstr_prov_name_);
            }
            pub inline fn enumContainers(self: *const T, dw_index_: i32, pbstr_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).enumContainers(@as(*const ICEnroll, @ptrCast(self)), dw_index_, pbstr_);
            }
            pub inline fn freeRequestInfo(self: *const T, p_k_c_s7_or_p_k_c_s10_: ?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).freeRequestInfo(@as(*const ICEnroll, @ptrCast(self)), p_k_c_s7_or_p_k_c_s10_);
            }
            pub inline fn getMyStoreName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_MyStoreName(@as(*const ICEnroll, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn putMyStoreName(self: *const T, bstr_name_: ?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_MyStoreName(@as(*const ICEnroll, @ptrCast(self)), bstr_name_);
            }
            pub inline fn getMyStoreType(self: *const T, pbstr_type_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_MyStoreType(@as(*const ICEnroll, @ptrCast(self)), pbstr_type_);
            }
            pub inline fn putMyStoreType(self: *const T, bstr_type_: ?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_MyStoreType(@as(*const ICEnroll, @ptrCast(self)), bstr_type_);
            }
            pub inline fn getMyStoreFlags(self: *const T, pdw_flags_: ?*i32) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_MyStoreFlags(@as(*const ICEnroll, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn putMyStoreFlags(self: *const T, dw_flags_: i32) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_MyStoreFlags(@as(*const ICEnroll, @ptrCast(self)), dw_flags_);
            }
            pub inline fn getCAStoreName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_CAStoreName(@as(*const ICEnroll, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn putCAStoreName(self: *const T, bstr_name_: ?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_CAStoreName(@as(*const ICEnroll, @ptrCast(self)), bstr_name_);
            }
            pub inline fn getCAStoreType(self: *const T, pbstr_type_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_CAStoreType(@as(*const ICEnroll, @ptrCast(self)), pbstr_type_);
            }
            pub inline fn putCAStoreType(self: *const T, bstr_type_: ?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_CAStoreType(@as(*const ICEnroll, @ptrCast(self)), bstr_type_);
            }
            pub inline fn getCAStoreFlags(self: *const T, pdw_flags_: ?*i32) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_CAStoreFlags(@as(*const ICEnroll, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn putCAStoreFlags(self: *const T, dw_flags_: i32) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_CAStoreFlags(@as(*const ICEnroll, @ptrCast(self)), dw_flags_);
            }
            pub inline fn getRootStoreName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_RootStoreName(@as(*const ICEnroll, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn putRootStoreName(self: *const T, bstr_name_: ?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_RootStoreName(@as(*const ICEnroll, @ptrCast(self)), bstr_name_);
            }
            pub inline fn getRootStoreType(self: *const T, pbstr_type_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_RootStoreType(@as(*const ICEnroll, @ptrCast(self)), pbstr_type_);
            }
            pub inline fn putRootStoreType(self: *const T, bstr_type_: ?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_RootStoreType(@as(*const ICEnroll, @ptrCast(self)), bstr_type_);
            }
            pub inline fn getRootStoreFlags(self: *const T, pdw_flags_: ?*i32) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_RootStoreFlags(@as(*const ICEnroll, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn putRootStoreFlags(self: *const T, dw_flags_: i32) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_RootStoreFlags(@as(*const ICEnroll, @ptrCast(self)), dw_flags_);
            }
            pub inline fn getRequestStoreName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_RequestStoreName(@as(*const ICEnroll, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn putRequestStoreName(self: *const T, bstr_name_: ?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_RequestStoreName(@as(*const ICEnroll, @ptrCast(self)), bstr_name_);
            }
            pub inline fn getRequestStoreType(self: *const T, pbstr_type_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_RequestStoreType(@as(*const ICEnroll, @ptrCast(self)), pbstr_type_);
            }
            pub inline fn putRequestStoreType(self: *const T, bstr_type_: ?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_RequestStoreType(@as(*const ICEnroll, @ptrCast(self)), bstr_type_);
            }
            pub inline fn getRequestStoreFlags(self: *const T, pdw_flags_: ?*i32) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_RequestStoreFlags(@as(*const ICEnroll, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn putRequestStoreFlags(self: *const T, dw_flags_: i32) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_RequestStoreFlags(@as(*const ICEnroll, @ptrCast(self)), dw_flags_);
            }
            pub inline fn getContainerName(self: *const T, pbstr_container_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_ContainerName(@as(*const ICEnroll, @ptrCast(self)), pbstr_container_);
            }
            pub inline fn putContainerName(self: *const T, bstr_container_: ?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_ContainerName(@as(*const ICEnroll, @ptrCast(self)), bstr_container_);
            }
            pub inline fn getProviderName(self: *const T, pbstr_provider_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_ProviderName(@as(*const ICEnroll, @ptrCast(self)), pbstr_provider_);
            }
            pub inline fn putProviderName(self: *const T, bstr_provider_: ?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_ProviderName(@as(*const ICEnroll, @ptrCast(self)), bstr_provider_);
            }
            pub inline fn getProviderType(self: *const T, pdw_type_: ?*i32) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_ProviderType(@as(*const ICEnroll, @ptrCast(self)), pdw_type_);
            }
            pub inline fn putProviderType(self: *const T, dw_type_: i32) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_ProviderType(@as(*const ICEnroll, @ptrCast(self)), dw_type_);
            }
            pub inline fn getKeySpec(self: *const T, pdw_: ?*i32) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_KeySpec(@as(*const ICEnroll, @ptrCast(self)), pdw_);
            }
            pub inline fn putKeySpec(self: *const T, dw_: i32) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_KeySpec(@as(*const ICEnroll, @ptrCast(self)), dw_);
            }
            pub inline fn getProviderFlags(self: *const T, pdw_flags_: ?*i32) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_ProviderFlags(@as(*const ICEnroll, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn putProviderFlags(self: *const T, dw_flags_: i32) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_ProviderFlags(@as(*const ICEnroll, @ptrCast(self)), dw_flags_);
            }
            pub inline fn getUseExistingKeySet(self: *const T, f_use_existing_keys_: ?*BOOL) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_UseExistingKeySet(@as(*const ICEnroll, @ptrCast(self)), f_use_existing_keys_);
            }
            pub inline fn putUseExistingKeySet(self: *const T, f_use_existing_keys_: BOOL) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_UseExistingKeySet(@as(*const ICEnroll, @ptrCast(self)), f_use_existing_keys_);
            }
            pub inline fn getGenKeyFlags(self: *const T, pdw_flags_: ?*i32) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_GenKeyFlags(@as(*const ICEnroll, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn putGenKeyFlags(self: *const T, dw_flags_: i32) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_GenKeyFlags(@as(*const ICEnroll, @ptrCast(self)), dw_flags_);
            }
            pub inline fn getDeleteRequestCert(self: *const T, f_delete_: ?*BOOL) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_DeleteRequestCert(@as(*const ICEnroll, @ptrCast(self)), f_delete_);
            }
            pub inline fn putDeleteRequestCert(self: *const T, f_delete_: BOOL) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_DeleteRequestCert(@as(*const ICEnroll, @ptrCast(self)), f_delete_);
            }
            pub inline fn getWriteCertToCSP(self: *const T, f_bool_: ?*BOOL) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_WriteCertToCSP(@as(*const ICEnroll, @ptrCast(self)), f_bool_);
            }
            pub inline fn putWriteCertToCSP(self: *const T, f_bool_: BOOL) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_WriteCertToCSP(@as(*const ICEnroll, @ptrCast(self)), f_bool_);
            }
            pub inline fn getSPCFileName(self: *const T, pbstr_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_SPCFileName(@as(*const ICEnroll, @ptrCast(self)), pbstr_);
            }
            pub inline fn putSPCFileName(self: *const T, bstr_: ?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_SPCFileName(@as(*const ICEnroll, @ptrCast(self)), bstr_);
            }
            pub inline fn getPVKFileName(self: *const T, pbstr_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_PVKFileName(@as(*const ICEnroll, @ptrCast(self)), pbstr_);
            }
            pub inline fn putPVKFileName(self: *const T, bstr_: ?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_PVKFileName(@as(*const ICEnroll, @ptrCast(self)), bstr_);
            }
            pub inline fn getHashAlgorithm(self: *const T, pbstr_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).get_HashAlgorithm(@as(*const ICEnroll, @ptrCast(self)), pbstr_);
            }
            pub inline fn putHashAlgorithm(self: *const T, bstr_: ?BSTR) HRESULT {
                return @as(*const ICEnroll.VTable, @ptrCast(self.vtable)).put_HashAlgorithm(@as(*const ICEnroll, @ptrCast(self)), bstr_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICEnroll2_Value = Guid.initString("704ca730-c90b-11d1-9bec-00c04fc295e1");
pub const IID_ICEnroll2 = &IID_ICEnroll2_Value;
pub const ICEnroll2 = extern struct {
    pub const VTable = extern struct {
        base: ICEnroll.VTable,
        addCertTypeToRequest: *const fn (
            self: *const ICEnroll2,
            cert_type: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addNameValuePairToSignature: *const fn (
            self: *const ICEnroll2,
            name: ?BSTR,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WriteCertToUserDS: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll2,
            f_bool: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WriteCertToUserDS: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll2,
            f_bool: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnableT61DNEncoding: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll2,
            f_bool: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnableT61DNEncoding: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll2,
            f_bool: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICEnroll.MethodMixin(T);
            pub inline fn addCertTypeToRequest(self: *const T, cert_type_: ?BSTR) HRESULT {
                return @as(*const ICEnroll2.VTable, @ptrCast(self.vtable)).addCertTypeToRequest(@as(*const ICEnroll2, @ptrCast(self)), cert_type_);
            }
            pub inline fn addNameValuePairToSignature(self: *const T, name_: ?BSTR, value_: ?BSTR) HRESULT {
                return @as(*const ICEnroll2.VTable, @ptrCast(self.vtable)).addNameValuePairToSignature(@as(*const ICEnroll2, @ptrCast(self)), name_, value_);
            }
            pub inline fn getWriteCertToUserDS(self: *const T, f_bool_: ?*BOOL) HRESULT {
                return @as(*const ICEnroll2.VTable, @ptrCast(self.vtable)).get_WriteCertToUserDS(@as(*const ICEnroll2, @ptrCast(self)), f_bool_);
            }
            pub inline fn putWriteCertToUserDS(self: *const T, f_bool_: BOOL) HRESULT {
                return @as(*const ICEnroll2.VTable, @ptrCast(self.vtable)).put_WriteCertToUserDS(@as(*const ICEnroll2, @ptrCast(self)), f_bool_);
            }
            pub inline fn getEnableT61DNEncoding(self: *const T, f_bool_: ?*BOOL) HRESULT {
                return @as(*const ICEnroll2.VTable, @ptrCast(self.vtable)).get_EnableT61DNEncoding(@as(*const ICEnroll2, @ptrCast(self)), f_bool_);
            }
            pub inline fn putEnableT61DNEncoding(self: *const T, f_bool_: BOOL) HRESULT {
                return @as(*const ICEnroll2.VTable, @ptrCast(self.vtable)).put_EnableT61DNEncoding(@as(*const ICEnroll2, @ptrCast(self)), f_bool_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICEnroll3_Value = Guid.initString("c28c2d95-b7de-11d2-a421-00c04f79fe8e");
pub const IID_ICEnroll3 = &IID_ICEnroll3_Value;
pub const ICEnroll3 = extern struct {
    pub const VTable = extern struct {
        base: ICEnroll2.VTable,
        InstallPKCS7: *const fn (
            self: *const ICEnroll3,
            p_k_c_s7: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const ICEnroll3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedKeySpec: *const fn (
            self: *const ICEnroll3,
            pdw_key_spec: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyLen: *const fn (
            self: *const ICEnroll3,
            f_min: BOOL,
            f_exchange: BOOL,
            pdw_key_size: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumAlgs: *const fn (
            self: *const ICEnroll3,
            dw_index: i32,
            alg_class: i32,
            pdw_alg_i_d: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAlgName: *const fn (
            self: *const ICEnroll3,
            alg_i_d: i32,
            pbstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReuseHardwareKeyIfUnableToGenNew: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll3,
            f_reuse_hardware_key_if_unable_to_gen_new: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReuseHardwareKeyIfUnableToGenNew: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll3,
            f_reuse_hardware_key_if_unable_to_gen_new: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll3,
            hash_alg_i_d: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll3,
            hash_alg_i_d: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LimitExchangeKeyToEncipherment: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll3,
            f_limit_exchange_key_to_encipherment: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LimitExchangeKeyToEncipherment: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll3,
            f_limit_exchange_key_to_encipherment: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnableSMIMECapabilities: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll3,
            f_enable_s_m_i_m_e_capabilities: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnableSMIMECapabilities: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll3,
            f_enable_s_m_i_m_e_capabilities: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICEnroll2.MethodMixin(T);
            pub inline fn installPKCS7(self: *const T, p_k_c_s7_: ?BSTR) HRESULT {
                return @as(*const ICEnroll3.VTable, @ptrCast(self.vtable)).InstallPKCS7(@as(*const ICEnroll3, @ptrCast(self)), p_k_c_s7_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const ICEnroll3.VTable, @ptrCast(self.vtable)).Reset(@as(*const ICEnroll3, @ptrCast(self)));
            }
            pub inline fn getSupportedKeySpec(self: *const T, pdw_key_spec_: ?*i32) HRESULT {
                return @as(*const ICEnroll3.VTable, @ptrCast(self.vtable)).GetSupportedKeySpec(@as(*const ICEnroll3, @ptrCast(self)), pdw_key_spec_);
            }
            pub inline fn getKeyLen(self: *const T, f_min_: BOOL, f_exchange_: BOOL, pdw_key_size_: ?*i32) HRESULT {
                return @as(*const ICEnroll3.VTable, @ptrCast(self.vtable)).GetKeyLen(@as(*const ICEnroll3, @ptrCast(self)), f_min_, f_exchange_, pdw_key_size_);
            }
            pub inline fn enumAlgs(self: *const T, dw_index_: i32, alg_class_: i32, pdw_alg_i_d_: ?*i32) HRESULT {
                return @as(*const ICEnroll3.VTable, @ptrCast(self.vtable)).EnumAlgs(@as(*const ICEnroll3, @ptrCast(self)), dw_index_, alg_class_, pdw_alg_i_d_);
            }
            pub inline fn getAlgName(self: *const T, alg_i_d_: i32, pbstr_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll3.VTable, @ptrCast(self.vtable)).GetAlgName(@as(*const ICEnroll3, @ptrCast(self)), alg_i_d_, pbstr_);
            }
            pub inline fn putReuseHardwareKeyIfUnableToGenNew(self: *const T, f_reuse_hardware_key_if_unable_to_gen_new_: BOOL) HRESULT {
                return @as(*const ICEnroll3.VTable, @ptrCast(self.vtable)).put_ReuseHardwareKeyIfUnableToGenNew(@as(*const ICEnroll3, @ptrCast(self)), f_reuse_hardware_key_if_unable_to_gen_new_);
            }
            pub inline fn getReuseHardwareKeyIfUnableToGenNew(self: *const T, f_reuse_hardware_key_if_unable_to_gen_new_: ?*BOOL) HRESULT {
                return @as(*const ICEnroll3.VTable, @ptrCast(self.vtable)).get_ReuseHardwareKeyIfUnableToGenNew(@as(*const ICEnroll3, @ptrCast(self)), f_reuse_hardware_key_if_unable_to_gen_new_);
            }
            pub inline fn putHashAlgID(self: *const T, hash_alg_i_d_: i32) HRESULT {
                return @as(*const ICEnroll3.VTable, @ptrCast(self.vtable)).put_HashAlgID(@as(*const ICEnroll3, @ptrCast(self)), hash_alg_i_d_);
            }
            pub inline fn getHashAlgID(self: *const T, hash_alg_i_d_: ?*i32) HRESULT {
                return @as(*const ICEnroll3.VTable, @ptrCast(self.vtable)).get_HashAlgID(@as(*const ICEnroll3, @ptrCast(self)), hash_alg_i_d_);
            }
            pub inline fn putLimitExchangeKeyToEncipherment(self: *const T, f_limit_exchange_key_to_encipherment_: BOOL) HRESULT {
                return @as(*const ICEnroll3.VTable, @ptrCast(self.vtable)).put_LimitExchangeKeyToEncipherment(@as(*const ICEnroll3, @ptrCast(self)), f_limit_exchange_key_to_encipherment_);
            }
            pub inline fn getLimitExchangeKeyToEncipherment(self: *const T, f_limit_exchange_key_to_encipherment_: ?*BOOL) HRESULT {
                return @as(*const ICEnroll3.VTable, @ptrCast(self.vtable)).get_LimitExchangeKeyToEncipherment(@as(*const ICEnroll3, @ptrCast(self)), f_limit_exchange_key_to_encipherment_);
            }
            pub inline fn putEnableSMIMECapabilities(self: *const T, f_enable_s_m_i_m_e_capabilities_: BOOL) HRESULT {
                return @as(*const ICEnroll3.VTable, @ptrCast(self.vtable)).put_EnableSMIMECapabilities(@as(*const ICEnroll3, @ptrCast(self)), f_enable_s_m_i_m_e_capabilities_);
            }
            pub inline fn getEnableSMIMECapabilities(self: *const T, f_enable_s_m_i_m_e_capabilities_: ?*BOOL) HRESULT {
                return @as(*const ICEnroll3.VTable, @ptrCast(self.vtable)).get_EnableSMIMECapabilities(@as(*const ICEnroll3, @ptrCast(self)), f_enable_s_m_i_m_e_capabilities_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICEnroll4_Value = Guid.initString("c1f1188a-2eb5-4a80-841b-7e729a356d90");
pub const IID_ICEnroll4 = &IID_ICEnroll4_Value;
pub const ICEnroll4 = extern struct {
    pub const VTable = extern struct {
        base: ICEnroll3.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrivateKeyArchiveCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll4,
            bstr_cert: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivateKeyArchiveCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll4,
            pbstr_cert: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ThumbPrint: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll4,
            bstr_thumb_print: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ThumbPrint: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll4,
            pbstr_thumb_print: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        binaryToString: *const fn (
            self: *const ICEnroll4,
            flags: i32,
            str_binary: ?BSTR,
            pstr_encoded: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        stringToBinary: *const fn (
            self: *const ICEnroll4,
            flags: i32,
            str_encoded: ?BSTR,
            pstr_binary: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addExtensionToRequest: *const fn (
            self: *const ICEnroll4,
            flags: i32,
            str_name: ?BSTR,
            str_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addAttributeToRequest: *const fn (
            self: *const ICEnroll4,
            flags: i32,
            str_name: ?BSTR,
            str_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addNameValuePairToRequest: *const fn (
            self: *const ICEnroll4,
            flags: i32,
            str_name: ?BSTR,
            str_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        resetExtensions: *const fn (
            self: *const ICEnroll4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        resetAttributes: *const fn (
            self: *const ICEnroll4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createRequest: *const fn (
            self: *const ICEnroll4,
            flags: CERT_CREATE_REQUEST_FLAGS,
            str_d_n_name: ?BSTR,
            usage: ?BSTR,
            pstr_request: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createFileRequest: *const fn (
            self: *const ICEnroll4,
            flags: CERT_CREATE_REQUEST_FLAGS,
            str_d_n_name: ?BSTR,
            str_usage: ?BSTR,
            str_request_file_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptResponse: *const fn (
            self: *const ICEnroll4,
            str_response: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptFileResponse: *const fn (
            self: *const ICEnroll4,
            str_response_file_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getCertFromResponse: *const fn (
            self: *const ICEnroll4,
            str_response: ?BSTR,
            pstr_cert: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getCertFromFileResponse: *const fn (
            self: *const ICEnroll4,
            str_response_file_name: ?BSTR,
            pstr_cert: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createPFX: *const fn (
            self: *const ICEnroll4,
            str_password: ?BSTR,
            pstr_p_f_x: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createFilePFX: *const fn (
            self: *const ICEnroll4,
            str_password: ?BSTR,
            str_p_f_x_file_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setPendingRequestInfo: *const fn (
            self: *const ICEnroll4,
            l_request_i_d: i32,
            str_c_a_d_n_s: ?BSTR,
            str_c_a_name: ?BSTR,
            str_friendly_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        enumPendingRequest: *const fn (
            self: *const ICEnroll4,
            l_index: i32,
            l_desired_property: PENDING_REQUEST_DESIRED_PROPERTY,
            pvar_property: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removePendingRequest: *const fn (
            self: *const ICEnroll4,
            str_thumbprint: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyLenEx: *const fn (
            self: *const ICEnroll4,
            l_size_spec: XEKL_KEYSIZE,
            l_key_spec: XEKL_KEYSPEC,
            pdw_key_size: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallPKCS7Ex: *const fn (
            self: *const ICEnroll4,
            p_k_c_s7: ?BSTR,
            pl_cert_installed: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addCertTypeToRequestEx: *const fn (
            self: *const ICEnroll4,
            l_type: ADDED_CERT_TYPE,
            bstr_o_i_d_or_name: ?BSTR,
            l_major_version: i32,
            f_minor_version: BOOL,
            l_minor_version: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProviderType: *const fn (
            self: *const ICEnroll4,
            str_prov_name: ?BSTR,
            pl_prov_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SignerCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll4,
            bstr_cert: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClientId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll4,
            l_client_id: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClientId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll4,
            pl_client_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addBlobPropertyToCertificate: *const fn (
            self: *const ICEnroll4,
            l_property_id: i32,
            l_reserved: i32,
            bstr_property: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        resetBlobProperties: *const fn (
            self: *const ICEnroll4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IncludeSubjectKeyID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll4,
            f_include: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IncludeSubjectKeyID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICEnroll4,
            pf_include: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICEnroll3.MethodMixin(T);
            pub inline fn putPrivateKeyArchiveCertificate(self: *const T, bstr_cert_: ?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).put_PrivateKeyArchiveCertificate(@as(*const ICEnroll4, @ptrCast(self)), bstr_cert_);
            }
            pub inline fn getPrivateKeyArchiveCertificate(self: *const T, pbstr_cert_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).get_PrivateKeyArchiveCertificate(@as(*const ICEnroll4, @ptrCast(self)), pbstr_cert_);
            }
            pub inline fn putThumbPrint(self: *const T, bstr_thumb_print_: ?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).put_ThumbPrint(@as(*const ICEnroll4, @ptrCast(self)), bstr_thumb_print_);
            }
            pub inline fn getThumbPrint(self: *const T, pbstr_thumb_print_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).get_ThumbPrint(@as(*const ICEnroll4, @ptrCast(self)), pbstr_thumb_print_);
            }
            pub inline fn binaryToString(self: *const T, flags_: i32, str_binary_: ?BSTR, pstr_encoded_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).binaryToString(@as(*const ICEnroll4, @ptrCast(self)), flags_, str_binary_, pstr_encoded_);
            }
            pub inline fn stringToBinary(self: *const T, flags_: i32, str_encoded_: ?BSTR, pstr_binary_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).stringToBinary(@as(*const ICEnroll4, @ptrCast(self)), flags_, str_encoded_, pstr_binary_);
            }
            pub inline fn addExtensionToRequest(self: *const T, flags_: i32, str_name_: ?BSTR, str_value_: ?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).addExtensionToRequest(@as(*const ICEnroll4, @ptrCast(self)), flags_, str_name_, str_value_);
            }
            pub inline fn addAttributeToRequest(self: *const T, flags_: i32, str_name_: ?BSTR, str_value_: ?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).addAttributeToRequest(@as(*const ICEnroll4, @ptrCast(self)), flags_, str_name_, str_value_);
            }
            pub inline fn addNameValuePairToRequest(self: *const T, flags_: i32, str_name_: ?BSTR, str_value_: ?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).addNameValuePairToRequest(@as(*const ICEnroll4, @ptrCast(self)), flags_, str_name_, str_value_);
            }
            pub inline fn resetExtensions(self: *const T) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).resetExtensions(@as(*const ICEnroll4, @ptrCast(self)));
            }
            pub inline fn resetAttributes(self: *const T) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).resetAttributes(@as(*const ICEnroll4, @ptrCast(self)));
            }
            pub inline fn createRequest(self: *const T, flags_: CERT_CREATE_REQUEST_FLAGS, str_d_n_name_: ?BSTR, usage_: ?BSTR, pstr_request_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).createRequest(@as(*const ICEnroll4, @ptrCast(self)), flags_, str_d_n_name_, usage_, pstr_request_);
            }
            pub inline fn createFileRequest(self: *const T, flags_: CERT_CREATE_REQUEST_FLAGS, str_d_n_name_: ?BSTR, str_usage_: ?BSTR, str_request_file_name_: ?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).createFileRequest(@as(*const ICEnroll4, @ptrCast(self)), flags_, str_d_n_name_, str_usage_, str_request_file_name_);
            }
            pub inline fn acceptResponse(self: *const T, str_response_: ?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).acceptResponse(@as(*const ICEnroll4, @ptrCast(self)), str_response_);
            }
            pub inline fn acceptFileResponse(self: *const T, str_response_file_name_: ?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).acceptFileResponse(@as(*const ICEnroll4, @ptrCast(self)), str_response_file_name_);
            }
            pub inline fn getCertFromResponse(self: *const T, str_response_: ?BSTR, pstr_cert_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).getCertFromResponse(@as(*const ICEnroll4, @ptrCast(self)), str_response_, pstr_cert_);
            }
            pub inline fn getCertFromFileResponse(self: *const T, str_response_file_name_: ?BSTR, pstr_cert_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).getCertFromFileResponse(@as(*const ICEnroll4, @ptrCast(self)), str_response_file_name_, pstr_cert_);
            }
            pub inline fn createPFX(self: *const T, str_password_: ?BSTR, pstr_p_f_x_: ?*?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).createPFX(@as(*const ICEnroll4, @ptrCast(self)), str_password_, pstr_p_f_x_);
            }
            pub inline fn createFilePFX(self: *const T, str_password_: ?BSTR, str_p_f_x_file_name_: ?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).createFilePFX(@as(*const ICEnroll4, @ptrCast(self)), str_password_, str_p_f_x_file_name_);
            }
            pub inline fn setPendingRequestInfo(self: *const T, l_request_i_d_: i32, str_c_a_d_n_s_: ?BSTR, str_c_a_name_: ?BSTR, str_friendly_name_: ?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).setPendingRequestInfo(@as(*const ICEnroll4, @ptrCast(self)), l_request_i_d_, str_c_a_d_n_s_, str_c_a_name_, str_friendly_name_);
            }
            pub inline fn enumPendingRequest(self: *const T, l_index_: i32, l_desired_property_: PENDING_REQUEST_DESIRED_PROPERTY, pvar_property_: ?*VARIANT) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).enumPendingRequest(@as(*const ICEnroll4, @ptrCast(self)), l_index_, l_desired_property_, pvar_property_);
            }
            pub inline fn removePendingRequest(self: *const T, str_thumbprint_: ?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).removePendingRequest(@as(*const ICEnroll4, @ptrCast(self)), str_thumbprint_);
            }
            pub inline fn getKeyLenEx(self: *const T, l_size_spec_: XEKL_KEYSIZE, l_key_spec_: XEKL_KEYSPEC, pdw_key_size_: ?*i32) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).GetKeyLenEx(@as(*const ICEnroll4, @ptrCast(self)), l_size_spec_, l_key_spec_, pdw_key_size_);
            }
            pub inline fn installPKCS7Ex(self: *const T, p_k_c_s7_: ?BSTR, pl_cert_installed_: ?*i32) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).InstallPKCS7Ex(@as(*const ICEnroll4, @ptrCast(self)), p_k_c_s7_, pl_cert_installed_);
            }
            pub inline fn addCertTypeToRequestEx(self: *const T, l_type_: ADDED_CERT_TYPE, bstr_o_i_d_or_name_: ?BSTR, l_major_version_: i32, f_minor_version_: BOOL, l_minor_version_: i32) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).addCertTypeToRequestEx(@as(*const ICEnroll4, @ptrCast(self)), l_type_, bstr_o_i_d_or_name_, l_major_version_, f_minor_version_, l_minor_version_);
            }
            pub inline fn getProviderType(self: *const T, str_prov_name_: ?BSTR, pl_prov_type_: ?*i32) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).getProviderType(@as(*const ICEnroll4, @ptrCast(self)), str_prov_name_, pl_prov_type_);
            }
            pub inline fn putSignerCertificate(self: *const T, bstr_cert_: ?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).put_SignerCertificate(@as(*const ICEnroll4, @ptrCast(self)), bstr_cert_);
            }
            pub inline fn putClientId(self: *const T, l_client_id_: i32) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).put_ClientId(@as(*const ICEnroll4, @ptrCast(self)), l_client_id_);
            }
            pub inline fn getClientId(self: *const T, pl_client_id_: ?*i32) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).get_ClientId(@as(*const ICEnroll4, @ptrCast(self)), pl_client_id_);
            }
            pub inline fn addBlobPropertyToCertificate(self: *const T, l_property_id_: i32, l_reserved_: i32, bstr_property_: ?BSTR) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).addBlobPropertyToCertificate(@as(*const ICEnroll4, @ptrCast(self)), l_property_id_, l_reserved_, bstr_property_);
            }
            pub inline fn resetBlobProperties(self: *const T) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).resetBlobProperties(@as(*const ICEnroll4, @ptrCast(self)));
            }
            pub inline fn putIncludeSubjectKeyID(self: *const T, f_include_: BOOL) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).put_IncludeSubjectKeyID(@as(*const ICEnroll4, @ptrCast(self)), f_include_);
            }
            pub inline fn getIncludeSubjectKeyID(self: *const T, pf_include_: ?*BOOL) HRESULT {
                return @as(*const ICEnroll4.VTable, @ptrCast(self.vtable)).get_IncludeSubjectKeyID(@as(*const ICEnroll4, @ptrCast(self)), pf_include_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnroll_Value = Guid.initString("acaa7838-4585-11d1-ab57-00c04fc295e1");
pub const IID_IEnroll = &IID_IEnroll_Value;
pub const IEnroll = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        createFilePKCS10WStr: *const fn (
            self: *const IEnroll,
            d_n_name: ?[*:0]const u16,
            usage: ?[*:0]const u16,
            wsz_p_k_c_s10_file_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptFilePKCS7WStr: *const fn (
            self: *const IEnroll,
            wsz_p_k_c_s7_file_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createPKCS10WStr: *const fn (
            self: *const IEnroll,
            d_n_name: ?[*:0]const u16,
            usage: ?[*:0]const u16,
            p_pkcs10_blob: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptPKCS7Blob: *const fn (
            self: *const IEnroll,
            p_blob_p_k_c_s7: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getCertContextFromPKCS7: *const fn (
            self: *const IEnroll,
            p_blob_p_k_c_s7: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) ?*CERT_CONTEXT,
        getMyStore: *const fn (
            self: *const IEnroll,
        ) callconv(@import("std").os.windows.WINAPI) ?HCERTSTORE,
        getCAStore: *const fn (
            self: *const IEnroll,
        ) callconv(@import("std").os.windows.WINAPI) ?HCERTSTORE,
        getROOTHStore: *const fn (
            self: *const IEnroll,
        ) callconv(@import("std").os.windows.WINAPI) ?HCERTSTORE,
        enumProvidersWStr: *const fn (
            self: *const IEnroll,
            dw_index: i32,
            dw_flags: i32,
            pbstr_prov_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        enumContainersWStr: *const fn (
            self: *const IEnroll,
            dw_index: i32,
            pbstr: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        freeRequestInfoBlob: *const fn (
            self: *const IEnroll,
            pkcs7_or_pkcs10: CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MyStoreNameWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MyStoreNameWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MyStoreTypeWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw_type: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MyStoreTypeWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw_type: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MyStoreFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            pdw_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MyStoreFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            dw_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CAStoreNameWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CAStoreNameWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CAStoreTypeWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw_type: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CAStoreTypeWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw_type: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CAStoreFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            pdw_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CAStoreFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            dw_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RootStoreNameWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RootStoreNameWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RootStoreTypeWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw_type: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RootStoreTypeWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw_type: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RootStoreFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            pdw_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RootStoreFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            dw_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestStoreNameWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RequestStoreNameWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestStoreTypeWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw_type: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RequestStoreTypeWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw_type: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequestStoreFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            pdw_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RequestStoreFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            dw_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ContainerNameWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw_container: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ContainerNameWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw_container: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderNameWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw_provider: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderNameWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw_provider: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            pdw_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            dw_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_KeySpec: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            pdw: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_KeySpec: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            dw: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            pdw_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProviderFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            dw_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UseExistingKeySet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            f_use_existing_keys: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UseExistingKeySet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            f_use_existing_keys: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GenKeyFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            pdw_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GenKeyFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            dw_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeleteRequestCert: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            f_delete: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DeleteRequestCert: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            f_delete: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WriteCertToUserDS: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            f_bool: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WriteCertToUserDS: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            f_bool: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnableT61DNEncoding: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            f_bool: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnableT61DNEncoding: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            f_bool: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WriteCertToCSP: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            f_bool: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WriteCertToCSP: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            f_bool: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SPCFileNameWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SPCFileNameWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PVKFileNameWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PVKFileNameWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgorithmWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgorithmWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            szw: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RenewalCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            pp_cert_context: ?*?*CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RenewalCertificate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll,
            p_cert_context: ?*const CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCertTypeToRequestWStr: *const fn (
            self: *const IEnroll,
            szw: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddNameValuePairToSignatureWStr: *const fn (
            self: *const IEnroll,
            name: ?PWSTR,
            value: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddExtensionsToRequest: *const fn (
            self: *const IEnroll,
            p_cert_extensions: ?*CERT_EXTENSIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAuthenticatedAttributesToPKCS7Request: *const fn (
            self: *const IEnroll,
            p_attributes: ?*CRYPT_ATTRIBUTES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePKCS7RequestFromRequest: *const fn (
            self: *const IEnroll,
            p_request: ?*CRYPTOAPI_BLOB,
            p_signing_cert_context: ?*const CERT_CONTEXT,
            p_pkcs7_blob: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createFilePKCS10WStr(self: *const T, d_n_name_: ?[*:0]const u16, usage_: ?[*:0]const u16, wsz_p_k_c_s10_file_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).createFilePKCS10WStr(@as(*const IEnroll, @ptrCast(self)), d_n_name_, usage_, wsz_p_k_c_s10_file_name_);
            }
            pub inline fn acceptFilePKCS7WStr(self: *const T, wsz_p_k_c_s7_file_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).acceptFilePKCS7WStr(@as(*const IEnroll, @ptrCast(self)), wsz_p_k_c_s7_file_name_);
            }
            pub inline fn createPKCS10WStr(self: *const T, d_n_name_: ?[*:0]const u16, usage_: ?[*:0]const u16, p_pkcs10_blob_: ?*CRYPTOAPI_BLOB) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).createPKCS10WStr(@as(*const IEnroll, @ptrCast(self)), d_n_name_, usage_, p_pkcs10_blob_);
            }
            pub inline fn acceptPKCS7Blob(self: *const T, p_blob_p_k_c_s7_: ?*CRYPTOAPI_BLOB) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).acceptPKCS7Blob(@as(*const IEnroll, @ptrCast(self)), p_blob_p_k_c_s7_);
            }
            pub inline fn getCertContextFromPKCS7(self: *const T, p_blob_p_k_c_s7_: ?*CRYPTOAPI_BLOB) ?*CERT_CONTEXT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).getCertContextFromPKCS7(@as(*const IEnroll, @ptrCast(self)), p_blob_p_k_c_s7_);
            }
            pub inline fn getMyStore(self: *const T) ?HCERTSTORE {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).getMyStore(@as(*const IEnroll, @ptrCast(self)));
            }
            pub inline fn getCAStore(self: *const T) ?HCERTSTORE {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).getCAStore(@as(*const IEnroll, @ptrCast(self)));
            }
            pub inline fn getROOTHStore(self: *const T) ?HCERTSTORE {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).getROOTHStore(@as(*const IEnroll, @ptrCast(self)));
            }
            pub inline fn enumProvidersWStr(self: *const T, dw_index_: i32, dw_flags_: i32, pbstr_prov_name_: ?*?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).enumProvidersWStr(@as(*const IEnroll, @ptrCast(self)), dw_index_, dw_flags_, pbstr_prov_name_);
            }
            pub inline fn enumContainersWStr(self: *const T, dw_index_: i32, pbstr_: ?*?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).enumContainersWStr(@as(*const IEnroll, @ptrCast(self)), dw_index_, pbstr_);
            }
            pub inline fn freeRequestInfoBlob(self: *const T, pkcs7_or_pkcs10_: CRYPTOAPI_BLOB) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).freeRequestInfoBlob(@as(*const IEnroll, @ptrCast(self)), pkcs7_or_pkcs10_);
            }
            pub inline fn getMyStoreNameWStr(self: *const T, szw_name_: ?*?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_MyStoreNameWStr(@as(*const IEnroll, @ptrCast(self)), szw_name_);
            }
            pub inline fn putMyStoreNameWStr(self: *const T, szw_name_: ?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_MyStoreNameWStr(@as(*const IEnroll, @ptrCast(self)), szw_name_);
            }
            pub inline fn getMyStoreTypeWStr(self: *const T, szw_type_: ?*?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_MyStoreTypeWStr(@as(*const IEnroll, @ptrCast(self)), szw_type_);
            }
            pub inline fn putMyStoreTypeWStr(self: *const T, szw_type_: ?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_MyStoreTypeWStr(@as(*const IEnroll, @ptrCast(self)), szw_type_);
            }
            pub inline fn getMyStoreFlags(self: *const T, pdw_flags_: ?*i32) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_MyStoreFlags(@as(*const IEnroll, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn putMyStoreFlags(self: *const T, dw_flags_: i32) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_MyStoreFlags(@as(*const IEnroll, @ptrCast(self)), dw_flags_);
            }
            pub inline fn getCAStoreNameWStr(self: *const T, szw_name_: ?*?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_CAStoreNameWStr(@as(*const IEnroll, @ptrCast(self)), szw_name_);
            }
            pub inline fn putCAStoreNameWStr(self: *const T, szw_name_: ?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_CAStoreNameWStr(@as(*const IEnroll, @ptrCast(self)), szw_name_);
            }
            pub inline fn getCAStoreTypeWStr(self: *const T, szw_type_: ?*?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_CAStoreTypeWStr(@as(*const IEnroll, @ptrCast(self)), szw_type_);
            }
            pub inline fn putCAStoreTypeWStr(self: *const T, szw_type_: ?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_CAStoreTypeWStr(@as(*const IEnroll, @ptrCast(self)), szw_type_);
            }
            pub inline fn getCAStoreFlags(self: *const T, pdw_flags_: ?*i32) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_CAStoreFlags(@as(*const IEnroll, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn putCAStoreFlags(self: *const T, dw_flags_: i32) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_CAStoreFlags(@as(*const IEnroll, @ptrCast(self)), dw_flags_);
            }
            pub inline fn getRootStoreNameWStr(self: *const T, szw_name_: ?*?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_RootStoreNameWStr(@as(*const IEnroll, @ptrCast(self)), szw_name_);
            }
            pub inline fn putRootStoreNameWStr(self: *const T, szw_name_: ?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_RootStoreNameWStr(@as(*const IEnroll, @ptrCast(self)), szw_name_);
            }
            pub inline fn getRootStoreTypeWStr(self: *const T, szw_type_: ?*?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_RootStoreTypeWStr(@as(*const IEnroll, @ptrCast(self)), szw_type_);
            }
            pub inline fn putRootStoreTypeWStr(self: *const T, szw_type_: ?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_RootStoreTypeWStr(@as(*const IEnroll, @ptrCast(self)), szw_type_);
            }
            pub inline fn getRootStoreFlags(self: *const T, pdw_flags_: ?*i32) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_RootStoreFlags(@as(*const IEnroll, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn putRootStoreFlags(self: *const T, dw_flags_: i32) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_RootStoreFlags(@as(*const IEnroll, @ptrCast(self)), dw_flags_);
            }
            pub inline fn getRequestStoreNameWStr(self: *const T, szw_name_: ?*?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_RequestStoreNameWStr(@as(*const IEnroll, @ptrCast(self)), szw_name_);
            }
            pub inline fn putRequestStoreNameWStr(self: *const T, szw_name_: ?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_RequestStoreNameWStr(@as(*const IEnroll, @ptrCast(self)), szw_name_);
            }
            pub inline fn getRequestStoreTypeWStr(self: *const T, szw_type_: ?*?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_RequestStoreTypeWStr(@as(*const IEnroll, @ptrCast(self)), szw_type_);
            }
            pub inline fn putRequestStoreTypeWStr(self: *const T, szw_type_: ?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_RequestStoreTypeWStr(@as(*const IEnroll, @ptrCast(self)), szw_type_);
            }
            pub inline fn getRequestStoreFlags(self: *const T, pdw_flags_: ?*i32) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_RequestStoreFlags(@as(*const IEnroll, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn putRequestStoreFlags(self: *const T, dw_flags_: i32) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_RequestStoreFlags(@as(*const IEnroll, @ptrCast(self)), dw_flags_);
            }
            pub inline fn getContainerNameWStr(self: *const T, szw_container_: ?*?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_ContainerNameWStr(@as(*const IEnroll, @ptrCast(self)), szw_container_);
            }
            pub inline fn putContainerNameWStr(self: *const T, szw_container_: ?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_ContainerNameWStr(@as(*const IEnroll, @ptrCast(self)), szw_container_);
            }
            pub inline fn getProviderNameWStr(self: *const T, szw_provider_: ?*?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_ProviderNameWStr(@as(*const IEnroll, @ptrCast(self)), szw_provider_);
            }
            pub inline fn putProviderNameWStr(self: *const T, szw_provider_: ?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_ProviderNameWStr(@as(*const IEnroll, @ptrCast(self)), szw_provider_);
            }
            pub inline fn getProviderType(self: *const T, pdw_type_: ?*i32) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_ProviderType(@as(*const IEnroll, @ptrCast(self)), pdw_type_);
            }
            pub inline fn putProviderType(self: *const T, dw_type_: i32) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_ProviderType(@as(*const IEnroll, @ptrCast(self)), dw_type_);
            }
            pub inline fn getKeySpec(self: *const T, pdw_: ?*i32) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_KeySpec(@as(*const IEnroll, @ptrCast(self)), pdw_);
            }
            pub inline fn putKeySpec(self: *const T, dw_: i32) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_KeySpec(@as(*const IEnroll, @ptrCast(self)), dw_);
            }
            pub inline fn getProviderFlags(self: *const T, pdw_flags_: ?*i32) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_ProviderFlags(@as(*const IEnroll, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn putProviderFlags(self: *const T, dw_flags_: i32) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_ProviderFlags(@as(*const IEnroll, @ptrCast(self)), dw_flags_);
            }
            pub inline fn getUseExistingKeySet(self: *const T, f_use_existing_keys_: ?*BOOL) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_UseExistingKeySet(@as(*const IEnroll, @ptrCast(self)), f_use_existing_keys_);
            }
            pub inline fn putUseExistingKeySet(self: *const T, f_use_existing_keys_: BOOL) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_UseExistingKeySet(@as(*const IEnroll, @ptrCast(self)), f_use_existing_keys_);
            }
            pub inline fn getGenKeyFlags(self: *const T, pdw_flags_: ?*i32) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_GenKeyFlags(@as(*const IEnroll, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn putGenKeyFlags(self: *const T, dw_flags_: i32) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_GenKeyFlags(@as(*const IEnroll, @ptrCast(self)), dw_flags_);
            }
            pub inline fn getDeleteRequestCert(self: *const T, f_delete_: ?*BOOL) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_DeleteRequestCert(@as(*const IEnroll, @ptrCast(self)), f_delete_);
            }
            pub inline fn putDeleteRequestCert(self: *const T, f_delete_: BOOL) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_DeleteRequestCert(@as(*const IEnroll, @ptrCast(self)), f_delete_);
            }
            pub inline fn getWriteCertToUserDS(self: *const T, f_bool_: ?*BOOL) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_WriteCertToUserDS(@as(*const IEnroll, @ptrCast(self)), f_bool_);
            }
            pub inline fn putWriteCertToUserDS(self: *const T, f_bool_: BOOL) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_WriteCertToUserDS(@as(*const IEnroll, @ptrCast(self)), f_bool_);
            }
            pub inline fn getEnableT61DNEncoding(self: *const T, f_bool_: ?*BOOL) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_EnableT61DNEncoding(@as(*const IEnroll, @ptrCast(self)), f_bool_);
            }
            pub inline fn putEnableT61DNEncoding(self: *const T, f_bool_: BOOL) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_EnableT61DNEncoding(@as(*const IEnroll, @ptrCast(self)), f_bool_);
            }
            pub inline fn getWriteCertToCSP(self: *const T, f_bool_: ?*BOOL) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_WriteCertToCSP(@as(*const IEnroll, @ptrCast(self)), f_bool_);
            }
            pub inline fn putWriteCertToCSP(self: *const T, f_bool_: BOOL) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_WriteCertToCSP(@as(*const IEnroll, @ptrCast(self)), f_bool_);
            }
            pub inline fn getSPCFileNameWStr(self: *const T, szw_: ?*?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_SPCFileNameWStr(@as(*const IEnroll, @ptrCast(self)), szw_);
            }
            pub inline fn putSPCFileNameWStr(self: *const T, szw_: ?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_SPCFileNameWStr(@as(*const IEnroll, @ptrCast(self)), szw_);
            }
            pub inline fn getPVKFileNameWStr(self: *const T, szw_: ?*?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_PVKFileNameWStr(@as(*const IEnroll, @ptrCast(self)), szw_);
            }
            pub inline fn putPVKFileNameWStr(self: *const T, szw_: ?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_PVKFileNameWStr(@as(*const IEnroll, @ptrCast(self)), szw_);
            }
            pub inline fn getHashAlgorithmWStr(self: *const T, szw_: ?*?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_HashAlgorithmWStr(@as(*const IEnroll, @ptrCast(self)), szw_);
            }
            pub inline fn putHashAlgorithmWStr(self: *const T, szw_: ?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_HashAlgorithmWStr(@as(*const IEnroll, @ptrCast(self)), szw_);
            }
            pub inline fn getRenewalCertificate(self: *const T, pp_cert_context_: ?*?*CERT_CONTEXT) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).get_RenewalCertificate(@as(*const IEnroll, @ptrCast(self)), pp_cert_context_);
            }
            pub inline fn putRenewalCertificate(self: *const T, p_cert_context_: ?*const CERT_CONTEXT) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).put_RenewalCertificate(@as(*const IEnroll, @ptrCast(self)), p_cert_context_);
            }
            pub inline fn addCertTypeToRequestWStr(self: *const T, szw_: ?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).AddCertTypeToRequestWStr(@as(*const IEnroll, @ptrCast(self)), szw_);
            }
            pub inline fn addNameValuePairToSignatureWStr(self: *const T, name_: ?PWSTR, value_: ?PWSTR) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).AddNameValuePairToSignatureWStr(@as(*const IEnroll, @ptrCast(self)), name_, value_);
            }
            pub inline fn addExtensionsToRequest(self: *const T, p_cert_extensions_: ?*CERT_EXTENSIONS) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).AddExtensionsToRequest(@as(*const IEnroll, @ptrCast(self)), p_cert_extensions_);
            }
            pub inline fn addAuthenticatedAttributesToPKCS7Request(self: *const T, p_attributes_: ?*CRYPT_ATTRIBUTES) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).AddAuthenticatedAttributesToPKCS7Request(@as(*const IEnroll, @ptrCast(self)), p_attributes_);
            }
            pub inline fn createPKCS7RequestFromRequest(self: *const T, p_request_: ?*CRYPTOAPI_BLOB, p_signing_cert_context_: ?*const CERT_CONTEXT, p_pkcs7_blob_: ?*CRYPTOAPI_BLOB) HRESULT {
                return @as(*const IEnroll.VTable, @ptrCast(self.vtable)).CreatePKCS7RequestFromRequest(@as(*const IEnroll, @ptrCast(self)), p_request_, p_signing_cert_context_, p_pkcs7_blob_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnroll2_Value = Guid.initString("c080e199-b7df-11d2-a421-00c04f79fe8e");
pub const IID_IEnroll2 = &IID_IEnroll2_Value;
pub const IEnroll2 = extern struct {
    pub const VTable = extern struct {
        base: IEnroll.VTable,
        InstallPKCS7Blob: *const fn (
            self: *const IEnroll2,
            p_blob_p_k_c_s7: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnroll2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedKeySpec: *const fn (
            self: *const IEnroll2,
            pdw_key_spec: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyLen: *const fn (
            self: *const IEnroll2,
            f_min: BOOL,
            f_exchange: BOOL,
            pdw_key_size: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumAlgs: *const fn (
            self: *const IEnroll2,
            dw_index: i32,
            alg_class: i32,
            pdw_alg_i_d: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAlgNameWStr: *const fn (
            self: *const IEnroll2,
            alg_i_d: i32,
            ppwsz: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReuseHardwareKeyIfUnableToGenNew: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll2,
            f_reuse_hardware_key_if_unable_to_gen_new: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReuseHardwareKeyIfUnableToGenNew: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll2,
            f_reuse_hardware_key_if_unable_to_gen_new: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HashAlgID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll2,
            hash_alg_i_d: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HashAlgID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll2,
            hash_alg_i_d: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHStoreMy: *const fn (
            self: *const IEnroll2,
            h_store: ?HCERTSTORE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHStoreCA: *const fn (
            self: *const IEnroll2,
            h_store: ?HCERTSTORE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHStoreROOT: *const fn (
            self: *const IEnroll2,
            h_store: ?HCERTSTORE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHStoreRequest: *const fn (
            self: *const IEnroll2,
            h_store: ?HCERTSTORE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LimitExchangeKeyToEncipherment: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll2,
            f_limit_exchange_key_to_encipherment: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LimitExchangeKeyToEncipherment: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll2,
            f_limit_exchange_key_to_encipherment: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnableSMIMECapabilities: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll2,
            f_enable_s_m_i_m_e_capabilities: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnableSMIMECapabilities: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll2,
            f_enable_s_m_i_m_e_capabilities: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IEnroll.MethodMixin(T);
            pub inline fn installPKCS7Blob(self: *const T, p_blob_p_k_c_s7_: ?*CRYPTOAPI_BLOB) HRESULT {
                return @as(*const IEnroll2.VTable, @ptrCast(self.vtable)).InstallPKCS7Blob(@as(*const IEnroll2, @ptrCast(self)), p_blob_p_k_c_s7_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnroll2.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnroll2, @ptrCast(self)));
            }
            pub inline fn getSupportedKeySpec(self: *const T, pdw_key_spec_: ?*i32) HRESULT {
                return @as(*const IEnroll2.VTable, @ptrCast(self.vtable)).GetSupportedKeySpec(@as(*const IEnroll2, @ptrCast(self)), pdw_key_spec_);
            }
            pub inline fn getKeyLen(self: *const T, f_min_: BOOL, f_exchange_: BOOL, pdw_key_size_: ?*i32) HRESULT {
                return @as(*const IEnroll2.VTable, @ptrCast(self.vtable)).GetKeyLen(@as(*const IEnroll2, @ptrCast(self)), f_min_, f_exchange_, pdw_key_size_);
            }
            pub inline fn enumAlgs(self: *const T, dw_index_: i32, alg_class_: i32, pdw_alg_i_d_: ?*i32) HRESULT {
                return @as(*const IEnroll2.VTable, @ptrCast(self.vtable)).EnumAlgs(@as(*const IEnroll2, @ptrCast(self)), dw_index_, alg_class_, pdw_alg_i_d_);
            }
            pub inline fn getAlgNameWStr(self: *const T, alg_i_d_: i32, ppwsz_: ?*?PWSTR) HRESULT {
                return @as(*const IEnroll2.VTable, @ptrCast(self.vtable)).GetAlgNameWStr(@as(*const IEnroll2, @ptrCast(self)), alg_i_d_, ppwsz_);
            }
            pub inline fn putReuseHardwareKeyIfUnableToGenNew(self: *const T, f_reuse_hardware_key_if_unable_to_gen_new_: BOOL) HRESULT {
                return @as(*const IEnroll2.VTable, @ptrCast(self.vtable)).put_ReuseHardwareKeyIfUnableToGenNew(@as(*const IEnroll2, @ptrCast(self)), f_reuse_hardware_key_if_unable_to_gen_new_);
            }
            pub inline fn getReuseHardwareKeyIfUnableToGenNew(self: *const T, f_reuse_hardware_key_if_unable_to_gen_new_: ?*BOOL) HRESULT {
                return @as(*const IEnroll2.VTable, @ptrCast(self.vtable)).get_ReuseHardwareKeyIfUnableToGenNew(@as(*const IEnroll2, @ptrCast(self)), f_reuse_hardware_key_if_unable_to_gen_new_);
            }
            pub inline fn putHashAlgID(self: *const T, hash_alg_i_d_: i32) HRESULT {
                return @as(*const IEnroll2.VTable, @ptrCast(self.vtable)).put_HashAlgID(@as(*const IEnroll2, @ptrCast(self)), hash_alg_i_d_);
            }
            pub inline fn getHashAlgID(self: *const T, hash_alg_i_d_: ?*i32) HRESULT {
                return @as(*const IEnroll2.VTable, @ptrCast(self.vtable)).get_HashAlgID(@as(*const IEnroll2, @ptrCast(self)), hash_alg_i_d_);
            }
            pub inline fn setHStoreMy(self: *const T, h_store_: ?HCERTSTORE) HRESULT {
                return @as(*const IEnroll2.VTable, @ptrCast(self.vtable)).SetHStoreMy(@as(*const IEnroll2, @ptrCast(self)), h_store_);
            }
            pub inline fn setHStoreCA(self: *const T, h_store_: ?HCERTSTORE) HRESULT {
                return @as(*const IEnroll2.VTable, @ptrCast(self.vtable)).SetHStoreCA(@as(*const IEnroll2, @ptrCast(self)), h_store_);
            }
            pub inline fn setHStoreROOT(self: *const T, h_store_: ?HCERTSTORE) HRESULT {
                return @as(*const IEnroll2.VTable, @ptrCast(self.vtable)).SetHStoreROOT(@as(*const IEnroll2, @ptrCast(self)), h_store_);
            }
            pub inline fn setHStoreRequest(self: *const T, h_store_: ?HCERTSTORE) HRESULT {
                return @as(*const IEnroll2.VTable, @ptrCast(self.vtable)).SetHStoreRequest(@as(*const IEnroll2, @ptrCast(self)), h_store_);
            }
            pub inline fn putLimitExchangeKeyToEncipherment(self: *const T, f_limit_exchange_key_to_encipherment_: BOOL) HRESULT {
                return @as(*const IEnroll2.VTable, @ptrCast(self.vtable)).put_LimitExchangeKeyToEncipherment(@as(*const IEnroll2, @ptrCast(self)), f_limit_exchange_key_to_encipherment_);
            }
            pub inline fn getLimitExchangeKeyToEncipherment(self: *const T, f_limit_exchange_key_to_encipherment_: ?*BOOL) HRESULT {
                return @as(*const IEnroll2.VTable, @ptrCast(self.vtable)).get_LimitExchangeKeyToEncipherment(@as(*const IEnroll2, @ptrCast(self)), f_limit_exchange_key_to_encipherment_);
            }
            pub inline fn putEnableSMIMECapabilities(self: *const T, f_enable_s_m_i_m_e_capabilities_: BOOL) HRESULT {
                return @as(*const IEnroll2.VTable, @ptrCast(self.vtable)).put_EnableSMIMECapabilities(@as(*const IEnroll2, @ptrCast(self)), f_enable_s_m_i_m_e_capabilities_);
            }
            pub inline fn getEnableSMIMECapabilities(self: *const T, f_enable_s_m_i_m_e_capabilities_: ?*BOOL) HRESULT {
                return @as(*const IEnroll2.VTable, @ptrCast(self.vtable)).get_EnableSMIMECapabilities(@as(*const IEnroll2, @ptrCast(self)), f_enable_s_m_i_m_e_capabilities_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnroll4_Value = Guid.initString("f8053fe5-78f4-448f-a0db-41d61b73446b");
pub const IID_IEnroll4 = &IID_IEnroll4_Value;
pub const IEnroll4 = extern struct {
    pub const VTable = extern struct {
        base: IEnroll2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ThumbPrintWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll4,
            thumb_print_blob: CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ThumbPrintWStr: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll4,
            thumb_print_blob: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrivateKeyArchiveCertificate: *const fn (
            self: *const IEnroll4,
            p_private_key_archive_cert: ?*const CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrivateKeyArchiveCertificate: *const fn (
            self: *const IEnroll4,
        ) callconv(@import("std").os.windows.WINAPI) ?*CERT_CONTEXT,
        binaryBlobToString: *const fn (
            self: *const IEnroll4,
            flags: i32,
            pblob_binary: ?*CRYPTOAPI_BLOB,
            ppwsz_string: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        stringToBinaryBlob: *const fn (
            self: *const IEnroll4,
            flags: i32,
            pwsz_string: ?[*:0]const u16,
            pblob_binary: ?*CRYPTOAPI_BLOB,
            pdw_skip: ?*i32,
            pdw_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addExtensionToRequestWStr: *const fn (
            self: *const IEnroll4,
            flags: i32,
            pwsz_name: ?[*:0]const u16,
            pblob_value: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addAttributeToRequestWStr: *const fn (
            self: *const IEnroll4,
            flags: i32,
            pwsz_name: ?[*:0]const u16,
            pblob_value: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addNameValuePairToRequestWStr: *const fn (
            self: *const IEnroll4,
            flags: i32,
            pwsz_name: ?[*:0]const u16,
            pwsz_value: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        resetExtensions: *const fn (
            self: *const IEnroll4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        resetAttributes: *const fn (
            self: *const IEnroll4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createRequestWStr: *const fn (
            self: *const IEnroll4,
            flags: CERT_CREATE_REQUEST_FLAGS,
            pwsz_d_n_name: ?[*:0]const u16,
            pwsz_usage: ?[*:0]const u16,
            pblob_request: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createFileRequestWStr: *const fn (
            self: *const IEnroll4,
            flags: CERT_CREATE_REQUEST_FLAGS,
            pwsz_d_n_name: ?[*:0]const u16,
            pwsz_usage: ?[*:0]const u16,
            pwsz_request_file_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptResponseBlob: *const fn (
            self: *const IEnroll4,
            pblob_response: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        acceptFileResponseWStr: *const fn (
            self: *const IEnroll4,
            pwsz_response_file_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getCertContextFromResponseBlob: *const fn (
            self: *const IEnroll4,
            pblob_response: ?*CRYPTOAPI_BLOB,
            pp_cert_context: ?*?*CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getCertContextFromFileResponseWStr: *const fn (
            self: *const IEnroll4,
            pwsz_response_file_name: ?[*:0]const u16,
            pp_cert_context: ?*?*CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createPFXWStr: *const fn (
            self: *const IEnroll4,
            pwsz_password: ?[*:0]const u16,
            pblob_p_f_x: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createFilePFXWStr: *const fn (
            self: *const IEnroll4,
            pwsz_password: ?[*:0]const u16,
            pwsz_p_f_x_file_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setPendingRequestInfoWStr: *const fn (
            self: *const IEnroll4,
            l_request_i_d: i32,
            pwsz_c_a_d_n_s: ?[*:0]const u16,
            pwsz_c_a_name: ?[*:0]const u16,
            pwsz_friendly_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        enumPendingRequestWStr: *const fn (
            self: *const IEnroll4,
            l_index: i32,
            l_desired_property: PENDING_REQUEST_DESIRED_PROPERTY,
            pp_property: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removePendingRequestWStr: *const fn (
            self: *const IEnroll4,
            thumb_print_blob: CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyLenEx: *const fn (
            self: *const IEnroll4,
            l_size_spec: XEKL_KEYSIZE,
            l_key_spec: XEKL_KEYSPEC,
            pdw_key_size: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallPKCS7BlobEx: *const fn (
            self: *const IEnroll4,
            p_blob_p_k_c_s7: ?*CRYPTOAPI_BLOB,
            pl_cert_installed: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCertTypeToRequestWStrEx: *const fn (
            self: *const IEnroll4,
            l_type: ADDED_CERT_TYPE,
            pwsz_o_i_d_or_name: ?[*:0]const u16,
            l_major_version: i32,
            f_minor_version: BOOL,
            l_minor_version: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProviderTypeWStr: *const fn (
            self: *const IEnroll4,
            pwsz_prov_name: ?[*:0]const u16,
            pl_prov_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        addBlobPropertyToCertificateWStr: *const fn (
            self: *const IEnroll4,
            l_property_id: i32,
            l_reserved: i32,
            p_blob_property: ?*CRYPTOAPI_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSignerCertificate: *const fn (
            self: *const IEnroll4,
            p_signer_cert: ?*const CERT_CONTEXT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClientId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll4,
            l_client_id: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClientId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll4,
            pl_client_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IncludeSubjectKeyID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll4,
            f_include: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IncludeSubjectKeyID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEnroll4,
            pf_include: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IEnroll2.MethodMixin(T);
            pub inline fn putThumbPrintWStr(self: *const T, thumb_print_blob_: CRYPTOAPI_BLOB) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).put_ThumbPrintWStr(@as(*const IEnroll4, @ptrCast(self)), thumb_print_blob_);
            }
            pub inline fn getThumbPrintWStr(self: *const T, thumb_print_blob_: ?*CRYPTOAPI_BLOB) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).get_ThumbPrintWStr(@as(*const IEnroll4, @ptrCast(self)), thumb_print_blob_);
            }
            pub inline fn setPrivateKeyArchiveCertificate(self: *const T, p_private_key_archive_cert_: ?*const CERT_CONTEXT) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).SetPrivateKeyArchiveCertificate(@as(*const IEnroll4, @ptrCast(self)), p_private_key_archive_cert_);
            }
            pub inline fn getPrivateKeyArchiveCertificate(self: *const T) ?*CERT_CONTEXT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).GetPrivateKeyArchiveCertificate(@as(*const IEnroll4, @ptrCast(self)));
            }
            pub inline fn binaryBlobToString(self: *const T, flags_: i32, pblob_binary_: ?*CRYPTOAPI_BLOB, ppwsz_string_: ?*?PWSTR) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).binaryBlobToString(@as(*const IEnroll4, @ptrCast(self)), flags_, pblob_binary_, ppwsz_string_);
            }
            pub inline fn stringToBinaryBlob(self: *const T, flags_: i32, pwsz_string_: ?[*:0]const u16, pblob_binary_: ?*CRYPTOAPI_BLOB, pdw_skip_: ?*i32, pdw_flags_: ?*i32) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).stringToBinaryBlob(@as(*const IEnroll4, @ptrCast(self)), flags_, pwsz_string_, pblob_binary_, pdw_skip_, pdw_flags_);
            }
            pub inline fn addExtensionToRequestWStr(self: *const T, flags_: i32, pwsz_name_: ?[*:0]const u16, pblob_value_: ?*CRYPTOAPI_BLOB) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).addExtensionToRequestWStr(@as(*const IEnroll4, @ptrCast(self)), flags_, pwsz_name_, pblob_value_);
            }
            pub inline fn addAttributeToRequestWStr(self: *const T, flags_: i32, pwsz_name_: ?[*:0]const u16, pblob_value_: ?*CRYPTOAPI_BLOB) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).addAttributeToRequestWStr(@as(*const IEnroll4, @ptrCast(self)), flags_, pwsz_name_, pblob_value_);
            }
            pub inline fn addNameValuePairToRequestWStr(self: *const T, flags_: i32, pwsz_name_: ?[*:0]const u16, pwsz_value_: ?[*:0]const u16) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).addNameValuePairToRequestWStr(@as(*const IEnroll4, @ptrCast(self)), flags_, pwsz_name_, pwsz_value_);
            }
            pub inline fn resetExtensions(self: *const T) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).resetExtensions(@as(*const IEnroll4, @ptrCast(self)));
            }
            pub inline fn resetAttributes(self: *const T) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).resetAttributes(@as(*const IEnroll4, @ptrCast(self)));
            }
            pub inline fn createRequestWStr(self: *const T, flags_: CERT_CREATE_REQUEST_FLAGS, pwsz_d_n_name_: ?[*:0]const u16, pwsz_usage_: ?[*:0]const u16, pblob_request_: ?*CRYPTOAPI_BLOB) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).createRequestWStr(@as(*const IEnroll4, @ptrCast(self)), flags_, pwsz_d_n_name_, pwsz_usage_, pblob_request_);
            }
            pub inline fn createFileRequestWStr(self: *const T, flags_: CERT_CREATE_REQUEST_FLAGS, pwsz_d_n_name_: ?[*:0]const u16, pwsz_usage_: ?[*:0]const u16, pwsz_request_file_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).createFileRequestWStr(@as(*const IEnroll4, @ptrCast(self)), flags_, pwsz_d_n_name_, pwsz_usage_, pwsz_request_file_name_);
            }
            pub inline fn acceptResponseBlob(self: *const T, pblob_response_: ?*CRYPTOAPI_BLOB) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).acceptResponseBlob(@as(*const IEnroll4, @ptrCast(self)), pblob_response_);
            }
            pub inline fn acceptFileResponseWStr(self: *const T, pwsz_response_file_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).acceptFileResponseWStr(@as(*const IEnroll4, @ptrCast(self)), pwsz_response_file_name_);
            }
            pub inline fn getCertContextFromResponseBlob(self: *const T, pblob_response_: ?*CRYPTOAPI_BLOB, pp_cert_context_: ?*?*CERT_CONTEXT) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).getCertContextFromResponseBlob(@as(*const IEnroll4, @ptrCast(self)), pblob_response_, pp_cert_context_);
            }
            pub inline fn getCertContextFromFileResponseWStr(self: *const T, pwsz_response_file_name_: ?[*:0]const u16, pp_cert_context_: ?*?*CERT_CONTEXT) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).getCertContextFromFileResponseWStr(@as(*const IEnroll4, @ptrCast(self)), pwsz_response_file_name_, pp_cert_context_);
            }
            pub inline fn createPFXWStr(self: *const T, pwsz_password_: ?[*:0]const u16, pblob_p_f_x_: ?*CRYPTOAPI_BLOB) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).createPFXWStr(@as(*const IEnroll4, @ptrCast(self)), pwsz_password_, pblob_p_f_x_);
            }
            pub inline fn createFilePFXWStr(self: *const T, pwsz_password_: ?[*:0]const u16, pwsz_p_f_x_file_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).createFilePFXWStr(@as(*const IEnroll4, @ptrCast(self)), pwsz_password_, pwsz_p_f_x_file_name_);
            }
            pub inline fn setPendingRequestInfoWStr(self: *const T, l_request_i_d_: i32, pwsz_c_a_d_n_s_: ?[*:0]const u16, pwsz_c_a_name_: ?[*:0]const u16, pwsz_friendly_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).setPendingRequestInfoWStr(@as(*const IEnroll4, @ptrCast(self)), l_request_i_d_, pwsz_c_a_d_n_s_, pwsz_c_a_name_, pwsz_friendly_name_);
            }
            pub inline fn enumPendingRequestWStr(self: *const T, l_index_: i32, l_desired_property_: PENDING_REQUEST_DESIRED_PROPERTY, pp_property_: ?*anyopaque) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).enumPendingRequestWStr(@as(*const IEnroll4, @ptrCast(self)), l_index_, l_desired_property_, pp_property_);
            }
            pub inline fn removePendingRequestWStr(self: *const T, thumb_print_blob_: CRYPTOAPI_BLOB) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).removePendingRequestWStr(@as(*const IEnroll4, @ptrCast(self)), thumb_print_blob_);
            }
            pub inline fn getKeyLenEx(self: *const T, l_size_spec_: XEKL_KEYSIZE, l_key_spec_: XEKL_KEYSPEC, pdw_key_size_: ?*i32) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).GetKeyLenEx(@as(*const IEnroll4, @ptrCast(self)), l_size_spec_, l_key_spec_, pdw_key_size_);
            }
            pub inline fn installPKCS7BlobEx(self: *const T, p_blob_p_k_c_s7_: ?*CRYPTOAPI_BLOB, pl_cert_installed_: ?*i32) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).InstallPKCS7BlobEx(@as(*const IEnroll4, @ptrCast(self)), p_blob_p_k_c_s7_, pl_cert_installed_);
            }
            pub inline fn addCertTypeToRequestWStrEx(self: *const T, l_type_: ADDED_CERT_TYPE, pwsz_o_i_d_or_name_: ?[*:0]const u16, l_major_version_: i32, f_minor_version_: BOOL, l_minor_version_: i32) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).AddCertTypeToRequestWStrEx(@as(*const IEnroll4, @ptrCast(self)), l_type_, pwsz_o_i_d_or_name_, l_major_version_, f_minor_version_, l_minor_version_);
            }
            pub inline fn getProviderTypeWStr(self: *const T, pwsz_prov_name_: ?[*:0]const u16, pl_prov_type_: ?*i32) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).getProviderTypeWStr(@as(*const IEnroll4, @ptrCast(self)), pwsz_prov_name_, pl_prov_type_);
            }
            pub inline fn addBlobPropertyToCertificateWStr(self: *const T, l_property_id_: i32, l_reserved_: i32, p_blob_property_: ?*CRYPTOAPI_BLOB) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).addBlobPropertyToCertificateWStr(@as(*const IEnroll4, @ptrCast(self)), l_property_id_, l_reserved_, p_blob_property_);
            }
            pub inline fn setSignerCertificate(self: *const T, p_signer_cert_: ?*const CERT_CONTEXT) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).SetSignerCertificate(@as(*const IEnroll4, @ptrCast(self)), p_signer_cert_);
            }
            pub inline fn putClientId(self: *const T, l_client_id_: i32) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).put_ClientId(@as(*const IEnroll4, @ptrCast(self)), l_client_id_);
            }
            pub inline fn getClientId(self: *const T, pl_client_id_: ?*i32) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).get_ClientId(@as(*const IEnroll4, @ptrCast(self)), pl_client_id_);
            }
            pub inline fn putIncludeSubjectKeyID(self: *const T, f_include_: BOOL) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).put_IncludeSubjectKeyID(@as(*const IEnroll4, @ptrCast(self)), f_include_);
            }
            pub inline fn getIncludeSubjectKeyID(self: *const T, pf_include_: ?*BOOL) HRESULT {
                return @as(*const IEnroll4.VTable, @ptrCast(self.vtable)).get_IncludeSubjectKeyID(@as(*const IEnroll4, @ptrCast(self)), pf_include_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertRequestD_Value = Guid.initString("d99e6e70-fc88-11d0-b498-00a0c90312f3");
pub const IID_ICertRequestD = &IID_ICertRequestD_Value;
pub const ICertRequestD = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Request: *const fn (
            self: *const ICertRequestD,
            dw_flags: u32,
            pwsz_authority: ?[*:0]const u16,
            pdw_request_id: ?*u32,
            pdw_disposition: ?*u32,
            pwsz_attributes: ?[*:0]const u16,
            pctb_request: ?*const CERTTRANSBLOB,
            pctb_cert_chain: ?*CERTTRANSBLOB,
            pctb_encoded_cert: ?*CERTTRANSBLOB,
            pctb_disposition_message: ?*CERTTRANSBLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCACert: *const fn (
            self: *const ICertRequestD,
            fchain: u32,
            pwsz_authority: ?[*:0]const u16,
            pctb_out: ?*CERTTRANSBLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Ping: *const fn (
            self: *const ICertRequestD,
            pwsz_authority: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn request(self: *const T, dw_flags_: u32, pwsz_authority_: ?[*:0]const u16, pdw_request_id_: ?*u32, pdw_disposition_: ?*u32, pwsz_attributes_: ?[*:0]const u16, pctb_request_: ?*const CERTTRANSBLOB, pctb_cert_chain_: ?*CERTTRANSBLOB, pctb_encoded_cert_: ?*CERTTRANSBLOB, pctb_disposition_message_: ?*CERTTRANSBLOB) HRESULT {
                return @as(*const ICertRequestD.VTable, @ptrCast(self.vtable)).Request(@as(*const ICertRequestD, @ptrCast(self)), dw_flags_, pwsz_authority_, pdw_request_id_, pdw_disposition_, pwsz_attributes_, pctb_request_, pctb_cert_chain_, pctb_encoded_cert_, pctb_disposition_message_);
            }
            pub inline fn getCACert(self: *const T, fchain_: u32, pwsz_authority_: ?[*:0]const u16, pctb_out_: ?*CERTTRANSBLOB) HRESULT {
                return @as(*const ICertRequestD.VTable, @ptrCast(self.vtable)).GetCACert(@as(*const ICertRequestD, @ptrCast(self)), fchain_, pwsz_authority_, pctb_out_);
            }
            pub inline fn ping(self: *const T, pwsz_authority_: ?[*:0]const u16) HRESULT {
                return @as(*const ICertRequestD.VTable, @ptrCast(self.vtable)).Ping(@as(*const ICertRequestD, @ptrCast(self)), pwsz_authority_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICertRequestD2_Value = Guid.initString("5422fd3a-d4b8-4cef-a12e-e87d4ca22e90");
pub const IID_ICertRequestD2 = &IID_ICertRequestD2_Value;
pub const ICertRequestD2 = extern struct {
    pub const VTable = extern struct {
        base: ICertRequestD.VTable,
        Request2: *const fn (
            self: *const ICertRequestD2,
            pwsz_authority: ?[*:0]const u16,
            dw_flags: u32,
            pwsz_serial_number: ?[*:0]const u16,
            pdw_request_id: ?*u32,
            pdw_disposition: ?*u32,
            pwsz_attributes: ?[*:0]const u16,
            pctb_request: ?*const CERTTRANSBLOB,
            pctb_full_response: ?*CERTTRANSBLOB,
            pctb_encoded_cert: ?*CERTTRANSBLOB,
            pctb_disposition_message: ?*CERTTRANSBLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAProperty: *const fn (
            self: *const ICertRequestD2,
            pwsz_authority: ?[*:0]const u16,
            prop_id: i32,
            prop_index: i32,
            prop_type: i32,
            pctb_property_value: ?*CERTTRANSBLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCAPropertyInfo: *const fn (
            self: *const ICertRequestD2,
            pwsz_authority: ?[*:0]const u16,
            pc_property: ?*i32,
            pctb_prop_info: ?*CERTTRANSBLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Ping2: *const fn (
            self: *const ICertRequestD2,
            pwsz_authority: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICertRequestD.MethodMixin(T);
            pub inline fn request2(self: *const T, pwsz_authority_: ?[*:0]const u16, dw_flags_: u32, pwsz_serial_number_: ?[*:0]const u16, pdw_request_id_: ?*u32, pdw_disposition_: ?*u32, pwsz_attributes_: ?[*:0]const u16, pctb_request_: ?*const CERTTRANSBLOB, pctb_full_response_: ?*CERTTRANSBLOB, pctb_encoded_cert_: ?*CERTTRANSBLOB, pctb_disposition_message_: ?*CERTTRANSBLOB) HRESULT {
                return @as(*const ICertRequestD2.VTable, @ptrCast(self.vtable)).Request2(@as(*const ICertRequestD2, @ptrCast(self)), pwsz_authority_, dw_flags_, pwsz_serial_number_, pdw_request_id_, pdw_disposition_, pwsz_attributes_, pctb_request_, pctb_full_response_, pctb_encoded_cert_, pctb_disposition_message_);
            }
            pub inline fn getCAProperty(self: *const T, pwsz_authority_: ?[*:0]const u16, prop_id_: i32, prop_index_: i32, prop_type_: i32, pctb_property_value_: ?*CERTTRANSBLOB) HRESULT {
                return @as(*const ICertRequestD2.VTable, @ptrCast(self.vtable)).GetCAProperty(@as(*const ICertRequestD2, @ptrCast(self)), pwsz_authority_, prop_id_, prop_index_, prop_type_, pctb_property_value_);
            }
            pub inline fn getCAPropertyInfo(self: *const T, pwsz_authority_: ?[*:0]const u16, pc_property_: ?*i32, pctb_prop_info_: ?*CERTTRANSBLOB) HRESULT {
                return @as(*const ICertRequestD2.VTable, @ptrCast(self.vtable)).GetCAPropertyInfo(@as(*const ICertRequestD2, @ptrCast(self)), pwsz_authority_, pc_property_, pctb_prop_info_);
            }
            pub inline fn ping2(self: *const T, pwsz_authority_: ?[*:0]const u16) HRESULT {
                return @as(*const ICertRequestD2.VTable, @ptrCast(self.vtable)).Ping2(@as(*const ICertRequestD2, @ptrCast(self)), pwsz_authority_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (26)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvIsServerOnlineW(
    pwsz_server_name: ?[*:0]const u16,
    pf_server_online: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvBackupGetDynamicFileListW(
    hbc: ?*anyopaque,
    ppwszz_file_list: ?*?PWSTR,
    pcb_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvBackupPrepareW(
    pwsz_server_name: ?[*:0]const u16,
    grbit_jet: u32,
    dw_backup_flags: CSBACKUP_TYPE,
    phbc: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvBackupGetDatabaseNamesW(
    hbc: ?*anyopaque,
    ppwszz_attachment_information: ?*?PWSTR,
    pcb_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvBackupOpenFileW(
    hbc: ?*anyopaque,
    pwsz_attachment_name: ?[*:0]const u16,
    cb_read_hint_size: u32,
    pli_file_size: ?*LARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvBackupRead(
    hbc: ?*anyopaque,
    pv_buffer: ?*anyopaque,
    cb_buffer: u32,
    pcb_read: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvBackupClose(
    hbc: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvBackupGetBackupLogsW(
    hbc: ?*anyopaque,
    ppwszz_backup_log_files: ?*?PWSTR,
    pcb_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvBackupTruncateLogs(
    hbc: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvBackupEnd(
    hbc: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvBackupFree(
    pv: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvRestoreGetDatabaseLocationsW(
    hbc: ?*anyopaque,
    ppwszz_database_location_list: ?*?PWSTR,
    pcb_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvRestorePrepareW(
    pwsz_server_name: ?[*:0]const u16,
    dw_restore_flags: u32,
    phbc: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvRestoreRegisterW(
    hbc: ?*anyopaque,
    pwsz_check_point_file_path: ?[*:0]const u16,
    pwsz_log_path: ?[*:0]const u16,
    rgrstmap: ?*CSEDB_RSTMAPW,
    crstmap: i32,
    pwsz_backup_log_path: ?[*:0]const u16,
    gen_low: u32,
    gen_high: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvRestoreRegisterThroughFile(
    hbc: ?*anyopaque,
    pwsz_check_point_file_path: ?[*:0]const u16,
    pwsz_log_path: ?[*:0]const u16,
    rgrstmap: ?*CSEDB_RSTMAPW,
    crstmap: i32,
    pwsz_backup_log_path: ?[*:0]const u16,
    gen_low: u32,
    gen_high: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvRestoreRegisterComplete(
    hbc: ?*anyopaque,
    hr_restore_state: HRESULT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvRestoreEnd(
    hbc: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windowsServer2003'
pub extern "certadm" fn CertSrvServerControlW(
    pwsz_server_name: ?[*:0]const u16,
    dw_control_flags: u32,
    pcb_out: ?*u32,
    ppb_out: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "certpoleng" fn PstGetTrustAnchors(
    p_target_name: ?*UNICODE_STRING,
    c_criteria: u32,
    rgp_criteria: ?[*]CERT_SELECT_CRITERIA,
    pp_trusted_issuers: ?*?*SecPkgContext_IssuerListInfoEx,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "certpoleng" fn PstGetTrustAnchorsEx(
    p_target_name: ?*UNICODE_STRING,
    c_criteria: u32,
    rgp_criteria: ?[*]CERT_SELECT_CRITERIA,
    p_cert_context: ?*const CERT_CONTEXT,
    pp_trusted_issuers: ?*?*SecPkgContext_IssuerListInfoEx,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

pub extern "certpoleng" fn PstGetCertificateChain(
    p_cert: ?*const CERT_CONTEXT,
    p_trusted_issuers: ?*SecPkgContext_IssuerListInfoEx,
    pp_cert_chain_context: ?*?*CERT_CHAIN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// TODO: this type is limited to platform 'windows6.1'
pub extern "certpoleng" fn PstGetCertificates(
    p_target_name: ?*UNICODE_STRING,
    c_criteria: u32,
    rgp_criteria: ?[*]CERT_SELECT_CRITERIA,
    b_is_client: BOOL,
    pdw_cert_chain_context_count: ?*u32,
    pp_cert_chain_contexts: ?*?*?*CERT_CHAIN_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// TODO: this type is limited to platform 'windows6.1'
pub extern "certpoleng" fn PstAcquirePrivateKey(
    p_cert: ?*const CERT_CONTEXT,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// TODO: this type is limited to platform 'windows6.1'
pub extern "certpoleng" fn PstValidate(
    p_target_name: ?*UNICODE_STRING,
    b_is_client: BOOL,
    p_requested_issuance_policy: ?*CERT_USAGE_MATCH,
    ph_additional_cert_store: ?*?HCERTSTORE,
    p_cert: ?*const CERT_CONTEXT,
    p_prov_g_u_i_d: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// TODO: this type is limited to platform 'windows6.1'
pub extern "certpoleng" fn PstMapCertificate(
    p_cert: ?*const CERT_CONTEXT,
    p_token_information_type: ?*LSA_TOKEN_INFORMATION_TYPE,
    pp_token_information: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

// TODO: this type is limited to platform 'windows6.1'
pub extern "certpoleng" fn PstGetUserNameForCertificate(
    p_cert_context: ?*const CERT_CONTEXT,
    user_name: ?*UNICODE_STRING,
) callconv(@import("std").os.windows.WINAPI) NTSTATUS;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (23)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BOOL = @import("../../foundation.zig").BOOL;
const BSTR = @import("../../foundation.zig").BSTR;
const CERT_CHAIN_CONTEXT = @import("../../security/cryptography.zig").CERT_CHAIN_CONTEXT;
const CERT_CONTEXT = @import("../../security/cryptography.zig").CERT_CONTEXT;
const CERT_EXTENSIONS = @import("../../security/cryptography.zig").CERT_EXTENSIONS;
const CERT_RDN_ATTR_VALUE_TYPE = @import("../../security/cryptography.zig").CERT_RDN_ATTR_VALUE_TYPE;
const CERT_SELECT_CRITERIA = @import("../../security/cryptography.zig").CERT_SELECT_CRITERIA;
const CERT_USAGE_MATCH = @import("../../security/cryptography.zig").CERT_USAGE_MATCH;
const CRYPT_ATTRIBUTES = @import("../../security/cryptography.zig").CRYPT_ATTRIBUTES;
const CRYPTOAPI_BLOB = @import("../../security/cryptography.zig").CRYPTOAPI_BLOB;
const HCERTSTORE = @import("../../security/cryptography.zig").HCERTSTORE;
const HRESULT = @import("../../foundation.zig").HRESULT;
const HWND = @import("../../foundation.zig").HWND;
const IDispatch = @import("../../system/com.zig").IDispatch;
const IUnknown = @import("../../system/com.zig").IUnknown;
const LARGE_INTEGER = @import("../../foundation.zig").LARGE_INTEGER;
const LSA_TOKEN_INFORMATION_TYPE = @import("../../security/authentication/identity.zig").LSA_TOKEN_INFORMATION_TYPE;
const NTSTATUS = @import("../../foundation.zig").NTSTATUS;
const PWSTR = @import("../../foundation.zig").PWSTR;
const SecPkgContext_IssuerListInfoEx = @import("../../security/authentication/identity.zig").SecPkgContext_IssuerListInfoEx;
const UNICODE_STRING = @import("../../foundation.zig").UNICODE_STRING;
const VARIANT = @import("../../system/com.zig").VARIANT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "FNCERTSRVISSERVERONLINEW")) {
        _ = FNCERTSRVISSERVERONLINEW;
    }
    if (@hasDecl(@This(), "FNCERTSRVBACKUPGETDYNAMICFILELISTW")) {
        _ = FNCERTSRVBACKUPGETDYNAMICFILELISTW;
    }
    if (@hasDecl(@This(), "FNCERTSRVBACKUPPREPAREW")) {
        _ = FNCERTSRVBACKUPPREPAREW;
    }
    if (@hasDecl(@This(), "FNCERTSRVBACKUPGETDATABASENAMESW")) {
        _ = FNCERTSRVBACKUPGETDATABASENAMESW;
    }
    if (@hasDecl(@This(), "FNCERTSRVBACKUPOPENFILEW")) {
        _ = FNCERTSRVBACKUPOPENFILEW;
    }
    if (@hasDecl(@This(), "FNCERTSRVBACKUPREAD")) {
        _ = FNCERTSRVBACKUPREAD;
    }
    if (@hasDecl(@This(), "FNCERTSRVBACKUPCLOSE")) {
        _ = FNCERTSRVBACKUPCLOSE;
    }
    if (@hasDecl(@This(), "FNCERTSRVBACKUPGETBACKUPLOGSW")) {
        _ = FNCERTSRVBACKUPGETBACKUPLOGSW;
    }
    if (@hasDecl(@This(), "FNCERTSRVBACKUPTRUNCATELOGS")) {
        _ = FNCERTSRVBACKUPTRUNCATELOGS;
    }
    if (@hasDecl(@This(), "FNCERTSRVBACKUPEND")) {
        _ = FNCERTSRVBACKUPEND;
    }
    if (@hasDecl(@This(), "FNCERTSRVBACKUPFREE")) {
        _ = FNCERTSRVBACKUPFREE;
    }
    if (@hasDecl(@This(), "FNCERTSRVRESTOREGETDATABASELOCATIONSW")) {
        _ = FNCERTSRVRESTOREGETDATABASELOCATIONSW;
    }
    if (@hasDecl(@This(), "FNCERTSRVRESTOREPREPAREW")) {
        _ = FNCERTSRVRESTOREPREPAREW;
    }
    if (@hasDecl(@This(), "FNCERTSRVRESTOREREGISTERW")) {
        _ = FNCERTSRVRESTOREREGISTERW;
    }
    if (@hasDecl(@This(), "FNCERTSRVRESTOREREGISTERCOMPLETE")) {
        _ = FNCERTSRVRESTOREREGISTERCOMPLETE;
    }
    if (@hasDecl(@This(), "FNCERTSRVRESTOREEND")) {
        _ = FNCERTSRVRESTOREEND;
    }
    if (@hasDecl(@This(), "FNCERTSRVSERVERCONTROLW")) {
        _ = FNCERTSRVSERVERCONTROLW;
    }
    if (@hasDecl(@This(), "FNIMPORTPFXTOPROVIDER")) {
        _ = FNIMPORTPFXTOPROVIDER;
    }
    if (@hasDecl(@This(), "FNIMPORTPFXTOPROVIDERFREEDATA")) {
        _ = FNIMPORTPFXTOPROVIDERFREEDATA;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
