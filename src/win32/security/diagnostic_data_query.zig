//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (13)
//--------------------------------------------------------------------------------
pub const DdqAccessLevel = enum(i32) {
    NoData = 0,
    CurrentUserData = 1,
    AllUserData = 2,
};
pub const NoData = DdqAccessLevel.NoData;
pub const CurrentUserData = DdqAccessLevel.CurrentUserData;
pub const AllUserData = DdqAccessLevel.AllUserData;

pub const DIAGNOSTIC_DATA_RECORD = extern struct {
    rowId: i64,
    timestamp: u64,
    eventKeywords: u64,
    fullEventName: ?PWSTR,
    providerGroupGuid: ?PWSTR,
    producerName: ?PWSTR,
    privacyTags: ?*i32,
    privacyTagCount: u32,
    categoryIds: ?*i32,
    categoryIdCount: u32,
    isCoreData: BOOL,
    extra1: ?PWSTR,
    extra2: ?PWSTR,
    extra3: ?PWSTR,
};

pub const DIAGNOSTIC_DATA_SEARCH_CRITERIA = extern struct {
    producerNames: ?*?PWSTR,
    producerNameCount: u32,
    textToMatch: ?[*:0]const u16,
    categoryIds: ?*const i32,
    categoryIdCount: u32,
    privacyTags: ?*const i32,
    privacyTagCount: u32,
    coreDataOnly: BOOL,
};

pub const DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION = extern struct {
    privacyTag: i32,
    name: ?PWSTR,
    description: ?PWSTR,
};

pub const DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION = extern struct {
    name: ?PWSTR,
};

pub const DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION = extern struct {
    id: i32,
    name: ?PWSTR,
};

pub const DIAGNOSTIC_DATA_EVENT_TAG_STATS = extern struct {
    privacyTag: i32,
    eventCount: u32,
};

pub const DIAGNOSTIC_DATA_EVENT_BINARY_STATS = extern struct {
    moduleName: ?PWSTR,
    friendlyModuleName: ?PWSTR,
    eventCount: u32,
    uploadSizeBytes: u64,
};

pub const DIAGNOSTIC_DATA_GENERAL_STATS = extern struct {
    optInLevel: u32,
    transcriptSizeBytes: u64,
    oldestEventTimestamp: u64,
    totalEventCountLast24Hours: u32,
    averageDailyEvents: f32,
};

pub const DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION = extern struct {
    hoursOfHistoryToKeep: u32,
    maxStoreMegabytes: u32,
    requestedMaxStoreMegabytes: u32,
};

pub const DIAGNOSTIC_REPORT_PARAMETER = extern struct {
    name: [129]u16,
    value: [260]u16,
};

pub const DIAGNOSTIC_REPORT_SIGNATURE = extern struct {
    eventName: [65]u16,
    parameters: [10]DIAGNOSTIC_REPORT_PARAMETER,
};

pub const DIAGNOSTIC_REPORT_DATA = extern struct {
    signature: DIAGNOSTIC_REPORT_SIGNATURE,
    bucketId: Guid,
    reportId: Guid,
    creationTime: FILETIME,
    sizeInBytes: u64,
    cabId: ?PWSTR,
    reportStatus: u32,
    reportIntegratorId: Guid,
    fileNames: ?*?PWSTR,
    fileCount: u32,
    friendlyEventName: ?PWSTR,
    applicationName: ?PWSTR,
    applicationPath: ?PWSTR,
    description: ?PWSTR,
    bucketIdString: ?PWSTR,
    legacyBucketId: u64,
    reportKey: ?PWSTR,
};

//--------------------------------------------------------------------------------
// Section: Functions (35)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqCreateSession(
    access_level: DdqAccessLevel,
    h_session: ?*HDIAGNOSTIC_DATA_QUERY_SESSION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqCloseSession(
    h_session: HDIAGNOSTIC_DATA_QUERY_SESSION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetSessionAccessLevel(
    h_session: HDIAGNOSTIC_DATA_QUERY_SESSION,
    access_level: ?*DdqAccessLevel,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticDataAccessLevelAllowed(
    access_level: ?*DdqAccessLevel,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticRecordStats(
    h_session: HDIAGNOSTIC_DATA_QUERY_SESSION,
    search_criteria: ?*const DIAGNOSTIC_DATA_SEARCH_CRITERIA,
    record_count: ?*u32,
    min_row_id: ?*i64,
    max_row_id: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticRecordPayload(
    h_session: HDIAGNOSTIC_DATA_QUERY_SESSION,
    row_id: i64,
    payload: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticRecordLocaleTags(
    h_session: HDIAGNOSTIC_DATA_QUERY_SESSION,
    locale: ?[*:0]const u16,
    h_tag_description: ?*HDIAGNOSTIC_EVENT_TAG_DESCRIPTION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqFreeDiagnosticRecordLocaleTags(
    h_tag_description: HDIAGNOSTIC_EVENT_TAG_DESCRIPTION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticRecordLocaleTagAtIndex(
    h_tag_description: HDIAGNOSTIC_EVENT_TAG_DESCRIPTION,
    index: u32,
    tag_description: ?*DIAGNOSTIC_DATA_EVENT_TAG_DESCRIPTION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticRecordLocaleTagCount(
    h_tag_description: HDIAGNOSTIC_EVENT_TAG_DESCRIPTION,
    tag_description_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticRecordProducers(
    h_session: HDIAGNOSTIC_DATA_QUERY_SESSION,
    h_producer_description: ?*HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqFreeDiagnosticRecordProducers(
    h_producer_description: HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticRecordProducerAtIndex(
    h_producer_description: HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION,
    index: u32,
    producer_description: ?*DIAGNOSTIC_DATA_EVENT_PRODUCER_DESCRIPTION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticRecordProducerCount(
    h_producer_description: HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION,
    producer_description_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticRecordProducerCategories(
    h_session: HDIAGNOSTIC_DATA_QUERY_SESSION,
    producer_name: ?[*:0]const u16,
    h_category_description: ?*HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqFreeDiagnosticRecordProducerCategories(
    h_category_description: HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticRecordCategoryAtIndex(
    h_category_description: HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION,
    index: u32,
    category_description: ?*DIAGNOSTIC_DATA_EVENT_CATEGORY_DESCRIPTION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticRecordCategoryCount(
    h_category_description: HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION,
    category_description_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqIsDiagnosticRecordSampledIn(
    h_session: HDIAGNOSTIC_DATA_QUERY_SESSION,
    provider_group: ?*const Guid,
    provider_id: ?*const Guid,
    provider_name: ?[*:0]const u16,
    event_id: ?*const u32,
    event_name: ?[*:0]const u16,
    event_version: ?*const u32,
    event_keywords: ?*const u64,
    is_sampled_in: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticRecordPage(
    h_session: HDIAGNOSTIC_DATA_QUERY_SESSION,
    search_criteria: ?*DIAGNOSTIC_DATA_SEARCH_CRITERIA,
    offset: u32,
    page_record_count: u32,
    base_row_id: i64,
    h_record: ?*HDIAGNOSTIC_RECORD,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqFreeDiagnosticRecordPage(
    h_record: HDIAGNOSTIC_RECORD,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticRecordAtIndex(
    h_record: HDIAGNOSTIC_RECORD,
    index: u32,
    record: ?*DIAGNOSTIC_DATA_RECORD,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticRecordCount(
    h_record: HDIAGNOSTIC_RECORD,
    record_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticReportStoreReportCount(
    h_session: HDIAGNOSTIC_DATA_QUERY_SESSION,
    report_store_type: u32,
    report_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqCancelDiagnosticRecordOperation(
    h_session: HDIAGNOSTIC_DATA_QUERY_SESSION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticReport(
    h_session: HDIAGNOSTIC_DATA_QUERY_SESSION,
    report_store_type: u32,
    h_report: ?*HDIAGNOSTIC_REPORT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqFreeDiagnosticReport(
    h_report: HDIAGNOSTIC_REPORT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticReportAtIndex(
    h_report: HDIAGNOSTIC_REPORT,
    index: u32,
    report: ?*DIAGNOSTIC_REPORT_DATA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticReportCount(
    h_report: HDIAGNOSTIC_REPORT,
    report_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqExtractDiagnosticReport(
    h_session: HDIAGNOSTIC_DATA_QUERY_SESSION,
    report_store_type: u32,
    report_key: ?[*:0]const u16,
    destination_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticRecordTagDistribution(
    h_session: HDIAGNOSTIC_DATA_QUERY_SESSION,
    producer_names: [*]?PWSTR,
    producer_name_count: u32,
    tag_stats: [*]?*DIAGNOSTIC_DATA_EVENT_TAG_STATS,
    stat_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticRecordBinaryDistribution(
    h_session: HDIAGNOSTIC_DATA_QUERY_SESSION,
    producer_names: [*]?PWSTR,
    producer_name_count: u32,
    top_n_binaries: u32,
    binary_stats: [*]?*DIAGNOSTIC_DATA_EVENT_BINARY_STATS,
    stat_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetDiagnosticRecordSummary(
    h_session: HDIAGNOSTIC_DATA_QUERY_SESSION,
    producer_names: [*]const ?[*:0]const u16,
    producer_name_count: u32,
    general_stats: ?*DIAGNOSTIC_DATA_GENERAL_STATS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqSetTranscriptConfiguration(
    h_session: HDIAGNOSTIC_DATA_QUERY_SESSION,
    desired_config: ?*const DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.19041'
pub extern "diagnosticdataquery" fn DdqGetTranscriptConfiguration(
    h_session: HDIAGNOSTIC_DATA_QUERY_SESSION,
    current_config: ?*DIAGNOSTIC_DATA_EVENT_TRANSCRIPT_CONFIGURATION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (11)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const FILETIME = @import("../foundation.zig").FILETIME;
const HDIAGNOSTIC_DATA_QUERY_SESSION = @import("../security.zig").HDIAGNOSTIC_DATA_QUERY_SESSION;
const HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION = @import("../security.zig").HDIAGNOSTIC_EVENT_CATEGORY_DESCRIPTION;
const HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION = @import("../security.zig").HDIAGNOSTIC_EVENT_PRODUCER_DESCRIPTION;
const HDIAGNOSTIC_EVENT_TAG_DESCRIPTION = @import("../security.zig").HDIAGNOSTIC_EVENT_TAG_DESCRIPTION;
const HDIAGNOSTIC_RECORD = @import("../security.zig").HDIAGNOSTIC_RECORD;
const HDIAGNOSTIC_REPORT = @import("../security.zig").HDIAGNOSTIC_REPORT;
const HRESULT = @import("../foundation.zig").HRESULT;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
