//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (3)
//--------------------------------------------------------------------------------
const CLSID_IsolatedAppLauncher_Value = Guid.initString("bc812430-e75e-4fd1-9641-1f9f1e2d9a1f");
pub const CLSID_IsolatedAppLauncher = &CLSID_IsolatedAppLauncher_Value;

pub const IsolatedAppLauncherTelemetryParameters = extern struct {
    EnableForLaunch: BOOL,
    CorrelationGUID: Guid,
};

const IID_IIsolatedAppLauncher_Value = Guid.initString("f686878f-7b42-4cc4-96fb-f4f3b6e3d24d");
pub const IID_IIsolatedAppLauncher = &IID_IIsolatedAppLauncher_Value;
pub const IIsolatedAppLauncher = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Launch: *const fn (
            self: *const IIsolatedAppLauncher,
            app_user_model_id: ?[*:0]const u16,
            arguments: ?[*:0]const u16,
            telemetry_parameters: ?*const IsolatedAppLauncherTelemetryParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn launch(self: *const T, app_user_model_id_: ?[*:0]const u16, arguments_: ?[*:0]const u16, telemetry_parameters_: ?*const IsolatedAppLauncherTelemetryParameters) HRESULT {
                return @as(*const IIsolatedAppLauncher.VTable, @ptrCast(self.vtable)).Launch(@as(*const IIsolatedAppLauncher, @ptrCast(self)), app_user_model_id_, arguments_, telemetry_parameters_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (10)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows8.0'
pub extern "kernel32" fn GetAppContainerNamedObjectPath(
    token: ?HANDLE,
    app_container_sid: ?PSID,
    object_path_length: u32,
    object_path: ?[*:0]u16,
    return_length: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "api-ms-win-security-isolatedcontainer-l1-1-1" fn IsProcessInWDAGContainer(
    reserved: ?*anyopaque,
    is_process_in_w_d_a_g_container: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-security-isolatedcontainer-l1-1-0" fn IsProcessInIsolatedContainer(
    is_process_in_isolated_container: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "isolatedwindowsenvironmentutils" fn IsProcessInIsolatedWindowsEnvironment(
    is_process_in_isolated_windows_environment: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "userenv" fn CreateAppContainerProfile(
    psz_app_container_name: ?[*:0]const u16,
    psz_display_name: ?[*:0]const u16,
    psz_description: ?[*:0]const u16,
    p_capabilities: ?[*]SID_AND_ATTRIBUTES,
    dw_capability_count: u32,
    pp_sid_app_container_sid: ?*?PSID,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "userenv" fn DeleteAppContainerProfile(
    psz_app_container_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "userenv" fn GetAppContainerRegistryLocation(
    desired_access: u32,
    ph_app_container_key: ?*?HKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "userenv" fn GetAppContainerFolderPath(
    psz_app_container_sid: ?[*:0]const u16,
    ppsz_path: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "userenv" fn DeriveRestrictedAppContainerSidFromAppContainerSidAndRestrictedName(
    psid_app_container_sid: ?PSID,
    psz_restricted_app_container_name: ?[*:0]const u16,
    ppsid_restricted_app_container_sid: ?*?PSID,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "userenv" fn DeriveAppContainerSidFromAppContainerName(
    psz_app_container_name: ?[*:0]const u16,
    ppsid_app_container_sid: ?*?PSID,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (9)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const HANDLE = @import("../foundation.zig").HANDLE;
const HKEY = @import("../system/registry.zig").HKEY;
const HRESULT = @import("../foundation.zig").HRESULT;
const IUnknown = @import("../system/com.zig").IUnknown;
const PSID = @import("../foundation.zig").PSID;
const PWSTR = @import("../foundation.zig").PWSTR;
const SID_AND_ATTRIBUTES = @import("../security.zig").SID_AND_ATTRIBUTES;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
