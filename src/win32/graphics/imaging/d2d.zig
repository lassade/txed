//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (2)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows8.0'
const IID_IWICImageEncoder_Value = Guid.initString("04c75bf8-3ce1-473b-acc5-3cc4f5e94999");
pub const IID_IWICImageEncoder = &IID_IWICImageEncoder_Value;
pub const IWICImageEncoder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        WriteFrame: *const fn (
            self: *const IWICImageEncoder,
            p_image: ?*ID2D1Image,
            p_frame_encode: ?*IWICBitmapFrameEncode,
            p_image_parameters: ?*const WICImageParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteFrameThumbnail: *const fn (
            self: *const IWICImageEncoder,
            p_image: ?*ID2D1Image,
            p_frame_encode: ?*IWICBitmapFrameEncode,
            p_image_parameters: ?*const WICImageParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteThumbnail: *const fn (
            self: *const IWICImageEncoder,
            p_image: ?*ID2D1Image,
            p_encoder: ?*IWICBitmapEncoder,
            p_image_parameters: ?*const WICImageParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn writeFrame(self: *const T, p_image_: ?*ID2D1Image, p_frame_encode_: ?*IWICBitmapFrameEncode, p_image_parameters_: ?*const WICImageParameters) HRESULT {
                return @as(*const IWICImageEncoder.VTable, @ptrCast(self.vtable)).WriteFrame(@as(*const IWICImageEncoder, @ptrCast(self)), p_image_, p_frame_encode_, p_image_parameters_);
            }
            pub inline fn writeFrameThumbnail(self: *const T, p_image_: ?*ID2D1Image, p_frame_encode_: ?*IWICBitmapFrameEncode, p_image_parameters_: ?*const WICImageParameters) HRESULT {
                return @as(*const IWICImageEncoder.VTable, @ptrCast(self.vtable)).WriteFrameThumbnail(@as(*const IWICImageEncoder, @ptrCast(self)), p_image_, p_frame_encode_, p_image_parameters_);
            }
            pub inline fn writeThumbnail(self: *const T, p_image_: ?*ID2D1Image, p_encoder_: ?*IWICBitmapEncoder, p_image_parameters_: ?*const WICImageParameters) HRESULT {
                return @as(*const IWICImageEncoder.VTable, @ptrCast(self.vtable)).WriteThumbnail(@as(*const IWICImageEncoder, @ptrCast(self)), p_image_, p_encoder_, p_image_parameters_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IWICImagingFactory2_Value = Guid.initString("7b816b45-1996-4476-b132-de9e247c8af0");
pub const IID_IWICImagingFactory2 = &IID_IWICImagingFactory2_Value;
pub const IWICImagingFactory2 = extern struct {
    pub const VTable = extern struct {
        base: IWICImagingFactory.VTable,
        CreateImageEncoder: *const fn (
            self: *const IWICImagingFactory2,
            p_d2_d_device: ?*ID2D1Device,
            pp_w_i_c_image_encoder: ?*?*IWICImageEncoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICImagingFactory.MethodMixin(T);
            pub inline fn createImageEncoder(self: *const T, p_d2_d_device_: ?*ID2D1Device, pp_w_i_c_image_encoder_: ?*?*IWICImageEncoder) HRESULT {
                return @as(*const IWICImagingFactory2.VTable, @ptrCast(self.vtable)).CreateImageEncoder(@as(*const IWICImagingFactory2, @ptrCast(self)), p_d2_d_device_, pp_w_i_c_image_encoder_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (9)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const HRESULT = @import("../../foundation.zig").HRESULT;
const ID2D1Device = @import("../../graphics/direct2d.zig").ID2D1Device;
const ID2D1Image = @import("../../graphics/direct2d.zig").ID2D1Image;
const IUnknown = @import("../../system/com.zig").IUnknown;
const IWICBitmapEncoder = @import("../../graphics/imaging.zig").IWICBitmapEncoder;
const IWICBitmapFrameEncode = @import("../../graphics/imaging.zig").IWICBitmapFrameEncode;
const IWICImagingFactory = @import("../../graphics/imaging.zig").IWICImagingFactory;
const WICImageParameters = @import("../../graphics/imaging.zig").WICImageParameters;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
