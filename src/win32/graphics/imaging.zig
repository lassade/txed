//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (301)
//--------------------------------------------------------------------------------
pub const WINCODEC_SDK_VERSION1 = @as(u32, 566);
pub const WINCODEC_SDK_VERSION2 = @as(u32, 567);
pub const CLSID_WICImagingFactory = Guid.initString("cacaf262-9370-4615-a13b-9f5539da4c0a");
pub const CLSID_WICImagingFactory1 = Guid.initString("cacaf262-9370-4615-a13b-9f5539da4c0a");
pub const CLSID_WICImagingFactory2 = Guid.initString("317d06e8-5f24-433d-bdf7-79ce68d8abc2");
pub const WINCODEC_SDK_VERSION = @as(u32, 567);
pub const GUID_VendorMicrosoft = Guid.initString("f0e749ca-edef-4589-a73a-ee0e626a2a2b");
pub const GUID_VendorMicrosoftBuiltIn = Guid.initString("257a30fd-06b6-462b-aea4-63f70b86e533");
pub const CLSID_WICPngDecoder = Guid.initString("389ea17b-5078-4cde-b6ef-25c15175c751");
pub const CLSID_WICPngDecoder1 = Guid.initString("389ea17b-5078-4cde-b6ef-25c15175c751");
pub const CLSID_WICPngDecoder2 = Guid.initString("e018945b-aa86-4008-9bd4-6777a1e40c11");
pub const CLSID_WICBmpDecoder = Guid.initString("6b462062-7cbf-400d-9fdb-813dd10f2778");
pub const CLSID_WICIcoDecoder = Guid.initString("c61bfcdf-2e0f-4aad-a8d7-e06bafebcdfe");
pub const CLSID_WICJpegDecoder = Guid.initString("9456a480-e88b-43ea-9e73-0b2d9b71b1ca");
pub const CLSID_WICGifDecoder = Guid.initString("381dda3c-9ce9-4834-a23e-1f98f8fc52be");
pub const CLSID_WICTiffDecoder = Guid.initString("b54e85d9-fe23-499f-8b88-6acea713752b");
pub const CLSID_WICWmpDecoder = Guid.initString("a26cec36-234c-4950-ae16-e34aace71d0d");
pub const CLSID_WICDdsDecoder = Guid.initString("9053699f-a341-429d-9e90-ee437cf80c73");
pub const CLSID_WICBmpEncoder = Guid.initString("69be8bb4-d66d-47c8-865a-ed1589433782");
pub const CLSID_WICPngEncoder = Guid.initString("27949969-876a-41d7-9447-568f6a35a4dc");
pub const CLSID_WICJpegEncoder = Guid.initString("1a34f5c1-4a5a-46dc-b644-1f4567e7a676");
pub const CLSID_WICGifEncoder = Guid.initString("114f5598-0b22-40a0-86a1-c83ea495adbd");
pub const CLSID_WICTiffEncoder = Guid.initString("0131be10-2001-4c5f-a9b0-cc88fab64ce8");
pub const CLSID_WICWmpEncoder = Guid.initString("ac4ce3cb-e1c1-44cd-8215-5a1665509ec2");
pub const CLSID_WICDdsEncoder = Guid.initString("a61dde94-66ce-4ac1-881b-71680588895e");
pub const CLSID_WICAdngDecoder = Guid.initString("981d9411-909e-42a7-8f5d-a747ff052edb");
pub const CLSID_WICJpegQualcommPhoneEncoder = Guid.initString("68ed5c62-f534-4979-b2b3-686a12b2b34c");
pub const CLSID_WICHeifDecoder = Guid.initString("e9a4a80a-44fe-4de4-8971-7150b10a5199");
pub const CLSID_WICHeifEncoder = Guid.initString("0dbecec1-9eb3-4860-9c6f-ddbe86634575");
pub const CLSID_WICWebpDecoder = Guid.initString("7693e886-51c9-4070-8419-9f70738ec8fa");
pub const CLSID_WICRAWDecoder = Guid.initString("41945702-8302-44a6-9445-ac98e8afa086");
pub const GUID_ContainerFormatBmp = Guid.initString("0af1d87e-fcfe-4188-bdeb-a7906471cbe3");
pub const GUID_ContainerFormatPng = Guid.initString("1b7cfaf4-713f-473c-bbcd-6137425faeaf");
pub const GUID_ContainerFormatIco = Guid.initString("a3a860c4-338f-4c17-919a-fba4b5628f21");
pub const GUID_ContainerFormatJpeg = Guid.initString("19e4a5aa-5662-4fc5-a0c0-1758028e1057");
pub const GUID_ContainerFormatTiff = Guid.initString("163bcc30-e2e9-4f0b-961d-a3e9fdb788a3");
pub const GUID_ContainerFormatGif = Guid.initString("1f8a5601-7d4d-4cbd-9c82-1bc8d4eeb9a5");
pub const GUID_ContainerFormatWmp = Guid.initString("57a37caa-367a-4540-916b-f183c5093a4b");
pub const GUID_ContainerFormatDds = Guid.initString("9967cb95-2e85-4ac8-8ca2-83d7ccd425c9");
pub const GUID_ContainerFormatAdng = Guid.initString("f3ff6d0d-38c0-41c4-b1fe-1f3824f17b84");
pub const GUID_ContainerFormatHeif = Guid.initString("e1e62521-6787-405b-a339-500715b5763f");
pub const GUID_ContainerFormatWebp = Guid.initString("e094b0e2-67f2-45b3-b0ea-115337ca7cf3");
pub const GUID_ContainerFormatRaw = Guid.initString("fe99ce60-f19c-433c-a3ae-00acefa9ca21");
pub const CLSID_WICImagingCategories = Guid.initString("fae3d380-fea4-4623-8c75-c6b61110b681");
pub const CATID_WICBitmapDecoders = Guid.initString("7ed96837-96f0-4812-b211-f13c24117ed3");
pub const CATID_WICBitmapEncoders = Guid.initString("ac757296-3522-4e11-9862-c17be5a1767e");
pub const CATID_WICPixelFormats = Guid.initString("2b46e70f-cda7-473e-89f6-dc9630a2390b");
pub const CATID_WICFormatConverters = Guid.initString("7835eae8-bf14-49d1-93ce-533a407b2248");
pub const CATID_WICMetadataReader = Guid.initString("05af94d8-7174-4cd2-be4a-4124b80ee4b8");
pub const CATID_WICMetadataWriter = Guid.initString("abe3b9a4-257d-4b97-bd1a-294af496222e");
pub const CLSID_WICDefaultFormatConverter = Guid.initString("1a3f11dc-b514-4b17-8c5f-2154513852f1");
pub const CLSID_WICFormatConverterHighColor = Guid.initString("ac75d454-9f37-48f8-b972-4e19bc856011");
pub const CLSID_WICFormatConverterNChannel = Guid.initString("c17cabb2-d4a3-47d7-a557-339b2efbd4f1");
pub const CLSID_WICFormatConverterWMPhoto = Guid.initString("9cb5172b-d600-46ba-ab77-77bb7e3a00d9");
pub const CLSID_WICPlanarFormatConverter = Guid.initString("184132b8-32f8-4784-9131-dd7224b23438");
pub const WIC_JPEG_MAX_COMPONENT_COUNT = @as(u32, 4);
pub const WIC_JPEG_MAX_TABLE_INDEX = @as(u32, 3);
pub const WIC_JPEG_SAMPLE_FACTORS_ONE = @as(u32, 17);
pub const WIC_JPEG_SAMPLE_FACTORS_THREE_420 = @as(u32, 1118498);
pub const WIC_JPEG_SAMPLE_FACTORS_THREE_422 = @as(u32, 1118497);
pub const WIC_JPEG_SAMPLE_FACTORS_THREE_440 = @as(u32, 1118482);
pub const WIC_JPEG_SAMPLE_FACTORS_THREE_444 = @as(u32, 1118481);
pub const WIC_JPEG_QUANTIZATION_BASELINE_ONE = @as(u32, 0);
pub const WIC_JPEG_QUANTIZATION_BASELINE_THREE = @as(u32, 65792);
pub const WIC_JPEG_HUFFMAN_BASELINE_ONE = @as(u32, 0);
pub const WIC_JPEG_HUFFMAN_BASELINE_THREE = @as(u32, 1118464);
pub const GUID_WICPixelFormatDontCare = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc900");
pub const GUID_WICPixelFormat1bppIndexed = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc901");
pub const GUID_WICPixelFormat2bppIndexed = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc902");
pub const GUID_WICPixelFormat4bppIndexed = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc903");
pub const GUID_WICPixelFormat8bppIndexed = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc904");
pub const GUID_WICPixelFormatBlackWhite = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc905");
pub const GUID_WICPixelFormat2bppGray = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc906");
pub const GUID_WICPixelFormat4bppGray = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc907");
pub const GUID_WICPixelFormat8bppGray = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc908");
pub const GUID_WICPixelFormat8bppAlpha = Guid.initString("e6cd0116-eeba-4161-aa85-27dd9fb3a895");
pub const GUID_WICPixelFormat16bppBGR555 = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc909");
pub const GUID_WICPixelFormat16bppBGR565 = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc90a");
pub const GUID_WICPixelFormat16bppBGRA5551 = Guid.initString("05ec7c2b-f1e6-4961-ad46-e1cc810a87d2");
pub const GUID_WICPixelFormat16bppGray = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc90b");
pub const GUID_WICPixelFormat24bppBGR = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc90c");
pub const GUID_WICPixelFormat24bppRGB = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc90d");
pub const GUID_WICPixelFormat32bppBGR = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc90e");
pub const GUID_WICPixelFormat32bppBGRA = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc90f");
pub const GUID_WICPixelFormat32bppPBGRA = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc910");
pub const GUID_WICPixelFormat32bppGrayFloat = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc911");
pub const GUID_WICPixelFormat32bppRGB = Guid.initString("d98c6b95-3efe-47d6-bb25-eb1748ab0cf1");
pub const GUID_WICPixelFormat32bppRGBA = Guid.initString("f5c7ad2d-6a8d-43dd-a7a8-a29935261ae9");
pub const GUID_WICPixelFormat32bppPRGBA = Guid.initString("3cc4a650-a527-4d37-a916-3142c7ebedba");
pub const GUID_WICPixelFormat48bppRGB = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc915");
pub const GUID_WICPixelFormat48bppBGR = Guid.initString("e605a384-b468-46ce-bb2e-36f180e64313");
pub const GUID_WICPixelFormat64bppRGB = Guid.initString("a1182111-186d-4d42-bc6a-9c8303a8dff9");
pub const GUID_WICPixelFormat64bppRGBA = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc916");
pub const GUID_WICPixelFormat64bppBGRA = Guid.initString("1562ff7c-d352-46f9-979e-42976b792246");
pub const GUID_WICPixelFormat64bppPRGBA = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc917");
pub const GUID_WICPixelFormat64bppPBGRA = Guid.initString("8c518e8e-a4ec-468b-ae70-c9a35a9c5530");
pub const GUID_WICPixelFormat16bppGrayFixedPoint = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc913");
pub const GUID_WICPixelFormat32bppBGR101010 = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc914");
pub const GUID_WICPixelFormat48bppRGBFixedPoint = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc912");
pub const GUID_WICPixelFormat48bppBGRFixedPoint = Guid.initString("49ca140e-cab6-493b-9ddf-60187c37532a");
pub const GUID_WICPixelFormat96bppRGBFixedPoint = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc918");
pub const GUID_WICPixelFormat96bppRGBFloat = Guid.initString("e3fed78f-e8db-4acf-84c1-e97f6136b327");
pub const GUID_WICPixelFormat128bppRGBAFloat = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc919");
pub const GUID_WICPixelFormat128bppPRGBAFloat = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc91a");
pub const GUID_WICPixelFormat128bppRGBFloat = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc91b");
pub const GUID_WICPixelFormat32bppCMYK = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc91c");
pub const GUID_WICPixelFormat64bppRGBAFixedPoint = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc91d");
pub const GUID_WICPixelFormat64bppBGRAFixedPoint = Guid.initString("356de33c-54d2-4a23-bb04-9b7bf9b1d42d");
pub const GUID_WICPixelFormat64bppRGBFixedPoint = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc940");
pub const GUID_WICPixelFormat128bppRGBAFixedPoint = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc91e");
pub const GUID_WICPixelFormat128bppRGBFixedPoint = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc941");
pub const GUID_WICPixelFormat64bppRGBAHalf = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc93a");
pub const GUID_WICPixelFormat64bppPRGBAHalf = Guid.initString("58ad26c2-c623-4d9d-b320-387e49f8c442");
pub const GUID_WICPixelFormat64bppRGBHalf = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc942");
pub const GUID_WICPixelFormat48bppRGBHalf = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc93b");
pub const GUID_WICPixelFormat32bppRGBE = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc93d");
pub const GUID_WICPixelFormat16bppGrayHalf = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc93e");
pub const GUID_WICPixelFormat32bppGrayFixedPoint = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc93f");
pub const GUID_WICPixelFormat32bppRGBA1010102 = Guid.initString("25238d72-fcf9-4522-b514-5578e5ad55e0");
pub const GUID_WICPixelFormat32bppRGBA1010102XR = Guid.initString("00de6b9a-c101-434b-b502-d0165ee1122c");
pub const GUID_WICPixelFormat32bppR10G10B10A2 = Guid.initString("604e1bb5-8a3c-4b65-b11c-bc0b8dd75b7f");
pub const GUID_WICPixelFormat32bppR10G10B10A2HDR10 = Guid.initString("9c215c5d-1acc-4f0e-a4bc-70fb3ae8fd28");
pub const GUID_WICPixelFormat64bppCMYK = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc91f");
pub const GUID_WICPixelFormat24bpp3Channels = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc920");
pub const GUID_WICPixelFormat32bpp4Channels = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc921");
pub const GUID_WICPixelFormat40bpp5Channels = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc922");
pub const GUID_WICPixelFormat48bpp6Channels = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc923");
pub const GUID_WICPixelFormat56bpp7Channels = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc924");
pub const GUID_WICPixelFormat64bpp8Channels = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc925");
pub const GUID_WICPixelFormat48bpp3Channels = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc926");
pub const GUID_WICPixelFormat64bpp4Channels = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc927");
pub const GUID_WICPixelFormat80bpp5Channels = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc928");
pub const GUID_WICPixelFormat96bpp6Channels = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc929");
pub const GUID_WICPixelFormat112bpp7Channels = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc92a");
pub const GUID_WICPixelFormat128bpp8Channels = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc92b");
pub const GUID_WICPixelFormat40bppCMYKAlpha = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc92c");
pub const GUID_WICPixelFormat80bppCMYKAlpha = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc92d");
pub const GUID_WICPixelFormat32bpp3ChannelsAlpha = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc92e");
pub const GUID_WICPixelFormat40bpp4ChannelsAlpha = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc92f");
pub const GUID_WICPixelFormat48bpp5ChannelsAlpha = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc930");
pub const GUID_WICPixelFormat56bpp6ChannelsAlpha = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc931");
pub const GUID_WICPixelFormat64bpp7ChannelsAlpha = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc932");
pub const GUID_WICPixelFormat72bpp8ChannelsAlpha = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc933");
pub const GUID_WICPixelFormat64bpp3ChannelsAlpha = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc934");
pub const GUID_WICPixelFormat80bpp4ChannelsAlpha = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc935");
pub const GUID_WICPixelFormat96bpp5ChannelsAlpha = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc936");
pub const GUID_WICPixelFormat112bpp6ChannelsAlpha = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc937");
pub const GUID_WICPixelFormat128bpp7ChannelsAlpha = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc938");
pub const GUID_WICPixelFormat144bpp8ChannelsAlpha = Guid.initString("6fddc324-4e03-4bfe-b185-3d77768dc939");
pub const GUID_WICPixelFormat8bppY = Guid.initString("91b4db54-2df9-42f0-b449-2909bb3df88e");
pub const GUID_WICPixelFormat8bppCb = Guid.initString("1339f224-6bfe-4c3e-9302-e4f3a6d0ca2a");
pub const GUID_WICPixelFormat8bppCr = Guid.initString("b8145053-2116-49f0-8835-ed844b205c51");
pub const GUID_WICPixelFormat16bppCbCr = Guid.initString("ff95ba6e-11e0-4263-bb45-01721f3460a4");
pub const GUID_WICPixelFormat16bppYQuantizedDctCoefficients = Guid.initString("a355f433-48e8-4a42-84d8-e2aa26ca80a4");
pub const GUID_WICPixelFormat16bppCbQuantizedDctCoefficients = Guid.initString("d2c4ff61-56a5-49c2-8b5c-4c1925964837");
pub const GUID_WICPixelFormat16bppCrQuantizedDctCoefficients = Guid.initString("2fe354f0-1680-42d8-9231-e73c0565bfc1");
pub const FACILITY_WINCODEC_ERR = @as(u32, 2200);
pub const WINCODEC_ERR_BASE = @as(u32, 8192);
pub const WINCODEC_ERR_GENERIC_ERROR = @as(i32, -2147467259);
pub const WINCODEC_ERR_INVALIDPARAMETER = @as(i32, -2147024809);
pub const WINCODEC_ERR_OUTOFMEMORY = @as(i32, -2147024882);
pub const WINCODEC_ERR_NOTIMPLEMENTED = @as(i32, -2147467263);
pub const WINCODEC_ERR_ABORTED = @as(i32, -2147467260);
pub const WINCODEC_ERR_ACCESSDENIED = @as(i32, -2147024891);
pub const WICRawChangeNotification_ExposureCompensation = @as(u32, 1);
pub const WICRawChangeNotification_NamedWhitePoint = @as(u32, 2);
pub const WICRawChangeNotification_KelvinWhitePoint = @as(u32, 4);
pub const WICRawChangeNotification_RGBWhitePoint = @as(u32, 8);
pub const WICRawChangeNotification_Contrast = @as(u32, 16);
pub const WICRawChangeNotification_Gamma = @as(u32, 32);
pub const WICRawChangeNotification_Sharpness = @as(u32, 64);
pub const WICRawChangeNotification_Saturation = @as(u32, 128);
pub const WICRawChangeNotification_Tint = @as(u32, 256);
pub const WICRawChangeNotification_NoiseReduction = @as(u32, 512);
pub const WICRawChangeNotification_DestinationColorContext = @as(u32, 1024);
pub const WICRawChangeNotification_ToneCurve = @as(u32, 2048);
pub const WICRawChangeNotification_Rotation = @as(u32, 4096);
pub const WICRawChangeNotification_RenderMode = @as(u32, 8192);
pub const GUID_MetadataFormatUnknown = Guid.initString("a45e592f-9078-4a7c-adb5-4edc4fd61b1f");
pub const GUID_MetadataFormatIfd = Guid.initString("537396c6-2d8a-4bb6-9bf8-2f0a8e2a3adf");
pub const GUID_MetadataFormatSubIfd = Guid.initString("58a2e128-2db9-4e57-bb14-5177891ed331");
pub const GUID_MetadataFormatExif = Guid.initString("1c3c4f9d-b84a-467d-9493-36cfbd59ea57");
pub const GUID_MetadataFormatGps = Guid.initString("7134ab8a-9351-44ad-af62-448db6b502ec");
pub const GUID_MetadataFormatInterop = Guid.initString("ed686f8e-681f-4c8b-bd41-a8addbf6b3fc");
pub const GUID_MetadataFormatApp0 = Guid.initString("79007028-268d-45d6-a3c2-354e6a504bc9");
pub const GUID_MetadataFormatApp1 = Guid.initString("8fd3dfc3-f951-492b-817f-69c2e6d9a5b0");
pub const GUID_MetadataFormatApp13 = Guid.initString("326556a2-f502-4354-9cc0-8e3f48eaf6b5");
pub const GUID_MetadataFormatIPTC = Guid.initString("4fab0914-e129-4087-a1d1-bc812d45a7b5");
pub const GUID_MetadataFormatIRB = Guid.initString("16100d66-8570-4bb9-b92d-fda4b23ece67");
pub const GUID_MetadataFormat8BIMIPTC = Guid.initString("0010568c-0852-4e6a-b191-5c33ac5b0430");
pub const GUID_MetadataFormat8BIMResolutionInfo = Guid.initString("739f305d-81db-43cb-ac5e-55013ef9f003");
pub const GUID_MetadataFormat8BIMIPTCDigest = Guid.initString("1ca32285-9ccd-4786-8bd8-79539db6a006");
pub const GUID_MetadataFormatXMP = Guid.initString("bb5acc38-f216-4cec-a6c5-5f6e739763a9");
pub const GUID_MetadataFormatThumbnail = Guid.initString("243dcee9-8703-40ee-8ef0-22a600b8058c");
pub const GUID_MetadataFormatChunktEXt = Guid.initString("568d8936-c0a9-4923-905d-df2b38238fbc");
pub const GUID_MetadataFormatXMPStruct = Guid.initString("22383cf1-ed17-4e2e-af17-d85b8f6b30d0");
pub const GUID_MetadataFormatXMPBag = Guid.initString("833cca5f-dcb7-4516-806f-6596ab26dce4");
pub const GUID_MetadataFormatXMPSeq = Guid.initString("63e8df02-eb6c-456c-a224-b25e794fd648");
pub const GUID_MetadataFormatXMPAlt = Guid.initString("7b08a675-91aa-481b-a798-4da94908613b");
pub const GUID_MetadataFormatLSD = Guid.initString("e256031e-6299-4929-b98d-5ac884afba92");
pub const GUID_MetadataFormatIMD = Guid.initString("bd2bb086-4d52-48dd-9677-db483e85ae8f");
pub const GUID_MetadataFormatGCE = Guid.initString("2a25cad8-deeb-4c69-a788-0ec2266dcafd");
pub const GUID_MetadataFormatAPE = Guid.initString("2e043dc2-c967-4e05-875e-618bf67e85c3");
pub const GUID_MetadataFormatJpegChrominance = Guid.initString("f73d0dcf-cec6-4f85-9b0e-1c3956b1bef7");
pub const GUID_MetadataFormatJpegLuminance = Guid.initString("86908007-edfc-4860-8d4b-4ee6e83e6058");
pub const GUID_MetadataFormatJpegComment = Guid.initString("220e5f33-afd3-474e-9d31-7d4fe730f557");
pub const GUID_MetadataFormatGifComment = Guid.initString("c4b6e0e0-cfb4-4ad3-ab33-9aad2355a34a");
pub const GUID_MetadataFormatChunkgAMA = Guid.initString("f00935a5-1d5d-4cd1-81b2-9324d7eca781");
pub const GUID_MetadataFormatChunkbKGD = Guid.initString("e14d3571-6b47-4dea-b60a-87ce0a78dfb7");
pub const GUID_MetadataFormatChunkiTXt = Guid.initString("c2bec729-0b68-4b77-aa0e-6295a6ac1814");
pub const GUID_MetadataFormatChunkcHRM = Guid.initString("9db3655b-2842-44b3-8067-12e9b375556a");
pub const GUID_MetadataFormatChunkhIST = Guid.initString("c59a82da-db74-48a4-bd6a-b69c4931ef95");
pub const GUID_MetadataFormatChunkiCCP = Guid.initString("eb4349ab-b685-450f-91b5-e802e892536c");
pub const GUID_MetadataFormatChunksRGB = Guid.initString("c115fd36-cc6f-4e3f-8363-524b87c6b0d9");
pub const GUID_MetadataFormatChunktIME = Guid.initString("6b00ae2d-e24b-460a-98b6-878bd03072fd");
pub const GUID_MetadataFormatDds = Guid.initString("4a064603-8c33-4e60-9c29-136231702d08");
pub const GUID_MetadataFormatHeif = Guid.initString("817ef3e1-1288-45f4-a852-260d9e7cce83");
pub const GUID_MetadataFormatHeifHDR = Guid.initString("568b8d8a-1e65-438c-8968-d60e1012beb9");
pub const GUID_MetadataFormatWebpANIM = Guid.initString("6dc4fda6-78e6-4102-ae35-bcfa1edcc78b");
pub const GUID_MetadataFormatWebpANMF = Guid.initString("43c105ee-b93b-4abb-b003-a08c0d870471");
pub const CLSID_WICUnknownMetadataReader = Guid.initString("699745c2-5066-4b82-a8e3-d40478dbec8c");
pub const CLSID_WICUnknownMetadataWriter = Guid.initString("a09cca86-27ba-4f39-9053-121fa4dc08fc");
pub const CLSID_WICApp0MetadataWriter = Guid.initString("f3c633a2-46c8-498e-8fbb-cc6f721bbcde");
pub const CLSID_WICApp0MetadataReader = Guid.initString("43324b33-a78f-480f-9111-9638aaccc832");
pub const CLSID_WICApp1MetadataWriter = Guid.initString("ee366069-1832-420f-b381-0479ad066f19");
pub const CLSID_WICApp1MetadataReader = Guid.initString("dde33513-774e-4bcd-ae79-02f4adfe62fc");
pub const CLSID_WICApp13MetadataWriter = Guid.initString("7b19a919-a9d6-49e5-bd45-02c34e4e4cd5");
pub const CLSID_WICApp13MetadataReader = Guid.initString("aa7e3c50-864c-4604-bc04-8b0b76e637f6");
pub const CLSID_WICIfdMetadataReader = Guid.initString("8f914656-9d0a-4eb2-9019-0bf96d8a9ee6");
pub const CLSID_WICIfdMetadataWriter = Guid.initString("b1ebfc28-c9bd-47a2-8d33-b948769777a7");
pub const CLSID_WICSubIfdMetadataReader = Guid.initString("50d42f09-ecd1-4b41-b65d-da1fdaa75663");
pub const CLSID_WICSubIfdMetadataWriter = Guid.initString("8ade5386-8e9b-4f4c-acf2-f0008706b238");
pub const CLSID_WICExifMetadataReader = Guid.initString("d9403860-297f-4a49-bf9b-77898150a442");
pub const CLSID_WICExifMetadataWriter = Guid.initString("c9a14cda-c339-460b-9078-d4debcfabe91");
pub const CLSID_WICGpsMetadataReader = Guid.initString("3697790b-223b-484e-9925-c4869218f17a");
pub const CLSID_WICGpsMetadataWriter = Guid.initString("cb8c13e4-62b5-4c96-a48b-6ba6ace39c76");
pub const CLSID_WICInteropMetadataReader = Guid.initString("b5c8b898-0074-459f-b700-860d4651ea14");
pub const CLSID_WICInteropMetadataWriter = Guid.initString("122ec645-cd7e-44d8-b186-2c8c20c3b50f");
pub const CLSID_WICThumbnailMetadataReader = Guid.initString("fb012959-f4f6-44d7-9d09-daa087a9db57");
pub const CLSID_WICThumbnailMetadataWriter = Guid.initString("d049b20c-5dd0-44fe-b0b3-8f92c8e6d080");
pub const CLSID_WICIPTCMetadataReader = Guid.initString("03012959-f4f6-44d7-9d09-daa087a9db57");
pub const CLSID_WICIPTCMetadataWriter = Guid.initString("1249b20c-5dd0-44fe-b0b3-8f92c8e6d080");
pub const CLSID_WICIRBMetadataReader = Guid.initString("d4dcd3d7-b4c2-47d9-a6bf-b89ba396a4a3");
pub const CLSID_WICIRBMetadataWriter = Guid.initString("5c5c1935-0235-4434-80bc-251bc1ec39c6");
pub const CLSID_WIC8BIMIPTCMetadataReader = Guid.initString("0010668c-0801-4da6-a4a4-826522b6d28f");
pub const CLSID_WIC8BIMIPTCMetadataWriter = Guid.initString("00108226-ee41-44a2-9e9c-4be4d5b1d2cd");
pub const CLSID_WIC8BIMResolutionInfoMetadataReader = Guid.initString("5805137a-e348-4f7c-b3cc-6db9965a0599");
pub const CLSID_WIC8BIMResolutionInfoMetadataWriter = Guid.initString("4ff2fe0e-e74a-4b71-98c4-ab7dc16707ba");
pub const CLSID_WIC8BIMIPTCDigestMetadataReader = Guid.initString("02805f1e-d5aa-415b-82c5-61c033a988a6");
pub const CLSID_WIC8BIMIPTCDigestMetadataWriter = Guid.initString("2db5e62b-0d67-495f-8f9d-c2f0188647ac");
pub const CLSID_WICPngTextMetadataReader = Guid.initString("4b59afcc-b8c3-408a-b670-89e5fab6fda7");
pub const CLSID_WICPngTextMetadataWriter = Guid.initString("b5ebafb9-253e-4a72-a744-0762d2685683");
pub const CLSID_WICXMPMetadataReader = Guid.initString("72b624df-ae11-4948-a65c-351eb0829419");
pub const CLSID_WICXMPMetadataWriter = Guid.initString("1765e14e-1bd4-462e-b6b1-590bf1262ac6");
pub const CLSID_WICXMPStructMetadataReader = Guid.initString("01b90d9a-8209-47f7-9c52-e1244bf50ced");
pub const CLSID_WICXMPStructMetadataWriter = Guid.initString("22c21f93-7ddb-411c-9b17-c5b7bd064abc");
pub const CLSID_WICXMPBagMetadataReader = Guid.initString("e7e79a30-4f2c-4fab-8d00-394f2d6bbebe");
pub const CLSID_WICXMPBagMetadataWriter = Guid.initString("ed822c8c-d6be-4301-a631-0e1416bad28f");
pub const CLSID_WICXMPSeqMetadataReader = Guid.initString("7f12e753-fc71-43d7-a51d-92f35977abb5");
pub const CLSID_WICXMPSeqMetadataWriter = Guid.initString("6d68d1de-d432-4b0f-923a-091183a9bda7");
pub const CLSID_WICXMPAltMetadataReader = Guid.initString("aa94dcc2-b8b0-4898-b835-000aabd74393");
pub const CLSID_WICXMPAltMetadataWriter = Guid.initString("076c2a6c-f78f-4c46-a723-3583e70876ea");
pub const CLSID_WICLSDMetadataReader = Guid.initString("41070793-59e4-479a-a1f7-954adc2ef5fc");
pub const CLSID_WICLSDMetadataWriter = Guid.initString("73c037e7-e5d9-4954-876a-6da81d6e5768");
pub const CLSID_WICGCEMetadataReader = Guid.initString("b92e345d-f52d-41f3-b562-081bc772e3b9");
pub const CLSID_WICGCEMetadataWriter = Guid.initString("af95dc76-16b2-47f4-b3ea-3c31796693e7");
pub const CLSID_WICIMDMetadataReader = Guid.initString("7447a267-0015-42c8-a8f1-fb3b94c68361");
pub const CLSID_WICIMDMetadataWriter = Guid.initString("8c89071f-452e-4e95-9682-9d1024627172");
pub const CLSID_WICAPEMetadataReader = Guid.initString("1767b93a-b021-44ea-920f-863c11f4f768");
pub const CLSID_WICAPEMetadataWriter = Guid.initString("bd6edfca-2890-482f-b233-8d7339a1cf8d");
pub const CLSID_WICJpegChrominanceMetadataReader = Guid.initString("50b1904b-f28f-4574-93f4-0bade82c69e9");
pub const CLSID_WICJpegChrominanceMetadataWriter = Guid.initString("3ff566f0-6e6b-49d4-96e6-b78886692c62");
pub const CLSID_WICJpegLuminanceMetadataReader = Guid.initString("356f2f88-05a6-4728-b9a4-1bfbce04d838");
pub const CLSID_WICJpegLuminanceMetadataWriter = Guid.initString("1d583abc-8a0e-4657-9982-a380ca58fb4b");
pub const CLSID_WICJpegCommentMetadataReader = Guid.initString("9f66347c-60c4-4c4d-ab58-d2358685f607");
pub const CLSID_WICJpegCommentMetadataWriter = Guid.initString("e573236f-55b1-4eda-81ea-9f65db0290d3");
pub const CLSID_WICGifCommentMetadataReader = Guid.initString("32557d3b-69dc-4f95-836e-f5972b2f6159");
pub const CLSID_WICGifCommentMetadataWriter = Guid.initString("a02797fc-c4ae-418c-af95-e637c7ead2a1");
pub const CLSID_WICPngGamaMetadataReader = Guid.initString("3692ca39-e082-4350-9e1f-3704cb083cd5");
pub const CLSID_WICPngGamaMetadataWriter = Guid.initString("ff036d13-5d4b-46dd-b10f-106693d9fe4f");
pub const CLSID_WICPngBkgdMetadataReader = Guid.initString("0ce7a4a6-03e8-4a60-9d15-282ef32ee7da");
pub const CLSID_WICPngBkgdMetadataWriter = Guid.initString("68e3f2fd-31ae-4441-bb6a-fd7047525f90");
pub const CLSID_WICPngItxtMetadataReader = Guid.initString("aabfb2fa-3e1e-4a8f-8977-5556fb94ea23");
pub const CLSID_WICPngItxtMetadataWriter = Guid.initString("31879719-e751-4df8-981d-68dff67704ed");
pub const CLSID_WICPngChrmMetadataReader = Guid.initString("f90b5f36-367b-402a-9dd1-bc0fd59d8f62");
pub const CLSID_WICPngChrmMetadataWriter = Guid.initString("e23ce3eb-5608-4e83-bcef-27b1987e51d7");
pub const CLSID_WICPngHistMetadataReader = Guid.initString("877a0bb7-a313-4491-87b5-2e6d0594f520");
pub const CLSID_WICPngHistMetadataWriter = Guid.initString("8a03e749-672e-446e-bf1f-2c11d233b6ff");
pub const CLSID_WICPngIccpMetadataReader = Guid.initString("f5d3e63b-cb0f-4628-a478-6d8244be36b1");
pub const CLSID_WICPngIccpMetadataWriter = Guid.initString("16671e5f-0ce6-4cc4-9768-e89fe5018ade");
pub const CLSID_WICPngSrgbMetadataReader = Guid.initString("fb40360c-547e-4956-a3b9-d4418859ba66");
pub const CLSID_WICPngSrgbMetadataWriter = Guid.initString("a6ee35c6-87ec-47df-9f22-1d5aad840c82");
pub const CLSID_WICPngTimeMetadataReader = Guid.initString("d94edf02-efe5-4f0d-85c8-f5a68b3000b1");
pub const CLSID_WICPngTimeMetadataWriter = Guid.initString("1ab78400-b5a3-4d91-8ace-33fcd1499be6");
pub const CLSID_WICDdsMetadataReader = Guid.initString("276c88ca-7533-4a86-b676-66b36080d484");
pub const CLSID_WICDdsMetadataWriter = Guid.initString("fd688bbd-31ed-4db7-a723-934927d38367");
pub const CLSID_WICHeifMetadataReader = Guid.initString("acddfc3f-85ec-41bc-bdef-1bc262e4db05");
pub const CLSID_WICHeifMetadataWriter = Guid.initString("3ae45e79-40bc-4401-ace5-dd3cb16e6afe");
pub const CLSID_WICHeifHDRMetadataReader = Guid.initString("2438de3d-94d9-4be8-84a8-4de95a575e75");
pub const CLSID_WICWebpAnimMetadataReader = Guid.initString("076f9911-a348-465c-a807-a252f3f2d3de");
pub const CLSID_WICWebpAnmfMetadataReader = Guid.initString("85a10b03-c9f6-439f-be5e-c0fbef67807c");

//--------------------------------------------------------------------------------
// Section: Types (123)
//--------------------------------------------------------------------------------
pub const WICRect = extern struct {
    X: i32,
    Y: i32,
    Width: i32,
    Height: i32,
};

pub const WICColorContextType = enum(i32) {
    Uninitialized = 0,
    Profile = 1,
    ExifColorSpace = 2,
};
pub const WICColorContextUninitialized = WICColorContextType.Uninitialized;
pub const WICColorContextProfile = WICColorContextType.Profile;
pub const WICColorContextExifColorSpace = WICColorContextType.ExifColorSpace;

pub const WICBitmapCreateCacheOption = enum(i32) {
    itmapNoCache = 0,
    itmapCacheOnDemand = 1,
    itmapCacheOnLoad = 2,
    ITMAPCREATECACHEOPTION_FORCE_DWORD = 2147483647,
};
pub const WICBitmapNoCache = WICBitmapCreateCacheOption.itmapNoCache;
pub const WICBitmapCacheOnDemand = WICBitmapCreateCacheOption.itmapCacheOnDemand;
pub const WICBitmapCacheOnLoad = WICBitmapCreateCacheOption.itmapCacheOnLoad;
pub const WICBITMAPCREATECACHEOPTION_FORCE_DWORD = WICBitmapCreateCacheOption.ITMAPCREATECACHEOPTION_FORCE_DWORD;

pub const WICDecodeOptions = enum(i32) {
    DecodeMetadataCacheOnDemand = 0,
    DecodeMetadataCacheOnLoad = 1,
    METADATACACHEOPTION_FORCE_DWORD = 2147483647,
};
pub const WICDecodeMetadataCacheOnDemand = WICDecodeOptions.DecodeMetadataCacheOnDemand;
pub const WICDecodeMetadataCacheOnLoad = WICDecodeOptions.DecodeMetadataCacheOnLoad;
pub const WICMETADATACACHEOPTION_FORCE_DWORD = WICDecodeOptions.METADATACACHEOPTION_FORCE_DWORD;

pub const WICBitmapEncoderCacheOption = enum(i32) {
    itmapEncoderCacheInMemory = 0,
    itmapEncoderCacheTempFile = 1,
    itmapEncoderNoCache = 2,
    ITMAPENCODERCACHEOPTION_FORCE_DWORD = 2147483647,
};
pub const WICBitmapEncoderCacheInMemory = WICBitmapEncoderCacheOption.itmapEncoderCacheInMemory;
pub const WICBitmapEncoderCacheTempFile = WICBitmapEncoderCacheOption.itmapEncoderCacheTempFile;
pub const WICBitmapEncoderNoCache = WICBitmapEncoderCacheOption.itmapEncoderNoCache;
pub const WICBITMAPENCODERCACHEOPTION_FORCE_DWORD = WICBitmapEncoderCacheOption.ITMAPENCODERCACHEOPTION_FORCE_DWORD;

pub const WICComponentType = enum(i32) {
    Decoder = 1,
    Encoder = 2,
    PixelFormatConverter = 4,
    MetadataReader = 8,
    MetadataWriter = 16,
    PixelFormat = 32,
    AllComponents = 63,
    COMPONENTTYPE_FORCE_DWORD = 2147483647,
};
pub const WICDecoder = WICComponentType.Decoder;
pub const WICEncoder = WICComponentType.Encoder;
pub const WICPixelFormatConverter = WICComponentType.PixelFormatConverter;
pub const WICMetadataReader = WICComponentType.MetadataReader;
pub const WICMetadataWriter = WICComponentType.MetadataWriter;
pub const WICPixelFormat = WICComponentType.PixelFormat;
pub const WICAllComponents = WICComponentType.AllComponents;
pub const WICCOMPONENTTYPE_FORCE_DWORD = WICComponentType.COMPONENTTYPE_FORCE_DWORD;

pub const WICComponentEnumerateOptions = enum(i32) {
    omponentEnumerateDefault = 0,
    omponentEnumerateRefresh = 1,
    omponentEnumerateDisabled = -2147483648,
    omponentEnumerateUnsigned = 1073741824,
    omponentEnumerateBuiltInOnly = 536870912,
    OMPONENTENUMERATEOPTIONS_FORCE_DWORD = 2147483647,
};
pub const WICComponentEnumerateDefault = WICComponentEnumerateOptions.omponentEnumerateDefault;
pub const WICComponentEnumerateRefresh = WICComponentEnumerateOptions.omponentEnumerateRefresh;
pub const WICComponentEnumerateDisabled = WICComponentEnumerateOptions.omponentEnumerateDisabled;
pub const WICComponentEnumerateUnsigned = WICComponentEnumerateOptions.omponentEnumerateUnsigned;
pub const WICComponentEnumerateBuiltInOnly = WICComponentEnumerateOptions.omponentEnumerateBuiltInOnly;
pub const WICCOMPONENTENUMERATEOPTIONS_FORCE_DWORD = WICComponentEnumerateOptions.OMPONENTENUMERATEOPTIONS_FORCE_DWORD;

pub const WICBitmapPattern = extern struct {
    Position: ULARGE_INTEGER,
    Length: u32,
    Pattern: ?*u8,
    Mask: ?*u8,
    EndOfStream: BOOL,
};

pub const WICBitmapInterpolationMode = enum(i32) {
    itmapInterpolationModeNearestNeighbor = 0,
    itmapInterpolationModeLinear = 1,
    itmapInterpolationModeCubic = 2,
    itmapInterpolationModeFant = 3,
    itmapInterpolationModeHighQualityCubic = 4,
    ITMAPINTERPOLATIONMODE_FORCE_DWORD = 2147483647,
};
pub const WICBitmapInterpolationModeNearestNeighbor = WICBitmapInterpolationMode.itmapInterpolationModeNearestNeighbor;
pub const WICBitmapInterpolationModeLinear = WICBitmapInterpolationMode.itmapInterpolationModeLinear;
pub const WICBitmapInterpolationModeCubic = WICBitmapInterpolationMode.itmapInterpolationModeCubic;
pub const WICBitmapInterpolationModeFant = WICBitmapInterpolationMode.itmapInterpolationModeFant;
pub const WICBitmapInterpolationModeHighQualityCubic = WICBitmapInterpolationMode.itmapInterpolationModeHighQualityCubic;
pub const WICBITMAPINTERPOLATIONMODE_FORCE_DWORD = WICBitmapInterpolationMode.ITMAPINTERPOLATIONMODE_FORCE_DWORD;

pub const WICBitmapPaletteType = enum(i32) {
    itmapPaletteTypeCustom = 0,
    itmapPaletteTypeMedianCut = 1,
    itmapPaletteTypeFixedBW = 2,
    itmapPaletteTypeFixedHalftone8 = 3,
    itmapPaletteTypeFixedHalftone27 = 4,
    itmapPaletteTypeFixedHalftone64 = 5,
    itmapPaletteTypeFixedHalftone125 = 6,
    itmapPaletteTypeFixedHalftone216 = 7,
    // itmapPaletteTypeFixedWebPalette = 7, this enum value conflicts with itmapPaletteTypeFixedHalftone216
    itmapPaletteTypeFixedHalftone252 = 8,
    itmapPaletteTypeFixedHalftone256 = 9,
    itmapPaletteTypeFixedGray4 = 10,
    itmapPaletteTypeFixedGray16 = 11,
    itmapPaletteTypeFixedGray256 = 12,
    ITMAPPALETTETYPE_FORCE_DWORD = 2147483647,
};
pub const WICBitmapPaletteTypeCustom = WICBitmapPaletteType.itmapPaletteTypeCustom;
pub const WICBitmapPaletteTypeMedianCut = WICBitmapPaletteType.itmapPaletteTypeMedianCut;
pub const WICBitmapPaletteTypeFixedBW = WICBitmapPaletteType.itmapPaletteTypeFixedBW;
pub const WICBitmapPaletteTypeFixedHalftone8 = WICBitmapPaletteType.itmapPaletteTypeFixedHalftone8;
pub const WICBitmapPaletteTypeFixedHalftone27 = WICBitmapPaletteType.itmapPaletteTypeFixedHalftone27;
pub const WICBitmapPaletteTypeFixedHalftone64 = WICBitmapPaletteType.itmapPaletteTypeFixedHalftone64;
pub const WICBitmapPaletteTypeFixedHalftone125 = WICBitmapPaletteType.itmapPaletteTypeFixedHalftone125;
pub const WICBitmapPaletteTypeFixedHalftone216 = WICBitmapPaletteType.itmapPaletteTypeFixedHalftone216;
pub const WICBitmapPaletteTypeFixedWebPalette = WICBitmapPaletteType.itmapPaletteTypeFixedHalftone216;
pub const WICBitmapPaletteTypeFixedHalftone252 = WICBitmapPaletteType.itmapPaletteTypeFixedHalftone252;
pub const WICBitmapPaletteTypeFixedHalftone256 = WICBitmapPaletteType.itmapPaletteTypeFixedHalftone256;
pub const WICBitmapPaletteTypeFixedGray4 = WICBitmapPaletteType.itmapPaletteTypeFixedGray4;
pub const WICBitmapPaletteTypeFixedGray16 = WICBitmapPaletteType.itmapPaletteTypeFixedGray16;
pub const WICBitmapPaletteTypeFixedGray256 = WICBitmapPaletteType.itmapPaletteTypeFixedGray256;
pub const WICBITMAPPALETTETYPE_FORCE_DWORD = WICBitmapPaletteType.ITMAPPALETTETYPE_FORCE_DWORD;

pub const WICBitmapDitherType = enum(i32) {
    itmapDitherTypeNone = 0,
    // itmapDitherTypeSolid = 0, this enum value conflicts with itmapDitherTypeNone
    itmapDitherTypeOrdered4x4 = 1,
    itmapDitherTypeOrdered8x8 = 2,
    itmapDitherTypeOrdered16x16 = 3,
    itmapDitherTypeSpiral4x4 = 4,
    itmapDitherTypeSpiral8x8 = 5,
    itmapDitherTypeDualSpiral4x4 = 6,
    itmapDitherTypeDualSpiral8x8 = 7,
    itmapDitherTypeErrorDiffusion = 8,
    ITMAPDITHERTYPE_FORCE_DWORD = 2147483647,
};
pub const WICBitmapDitherTypeNone = WICBitmapDitherType.itmapDitherTypeNone;
pub const WICBitmapDitherTypeSolid = WICBitmapDitherType.itmapDitherTypeNone;
pub const WICBitmapDitherTypeOrdered4x4 = WICBitmapDitherType.itmapDitherTypeOrdered4x4;
pub const WICBitmapDitherTypeOrdered8x8 = WICBitmapDitherType.itmapDitherTypeOrdered8x8;
pub const WICBitmapDitherTypeOrdered16x16 = WICBitmapDitherType.itmapDitherTypeOrdered16x16;
pub const WICBitmapDitherTypeSpiral4x4 = WICBitmapDitherType.itmapDitherTypeSpiral4x4;
pub const WICBitmapDitherTypeSpiral8x8 = WICBitmapDitherType.itmapDitherTypeSpiral8x8;
pub const WICBitmapDitherTypeDualSpiral4x4 = WICBitmapDitherType.itmapDitherTypeDualSpiral4x4;
pub const WICBitmapDitherTypeDualSpiral8x8 = WICBitmapDitherType.itmapDitherTypeDualSpiral8x8;
pub const WICBitmapDitherTypeErrorDiffusion = WICBitmapDitherType.itmapDitherTypeErrorDiffusion;
pub const WICBITMAPDITHERTYPE_FORCE_DWORD = WICBitmapDitherType.ITMAPDITHERTYPE_FORCE_DWORD;

pub const WICBitmapAlphaChannelOption = enum(i32) {
    itmapUseAlpha = 0,
    itmapUsePremultipliedAlpha = 1,
    itmapIgnoreAlpha = 2,
    ITMAPALPHACHANNELOPTIONS_FORCE_DWORD = 2147483647,
};
pub const WICBitmapUseAlpha = WICBitmapAlphaChannelOption.itmapUseAlpha;
pub const WICBitmapUsePremultipliedAlpha = WICBitmapAlphaChannelOption.itmapUsePremultipliedAlpha;
pub const WICBitmapIgnoreAlpha = WICBitmapAlphaChannelOption.itmapIgnoreAlpha;
pub const WICBITMAPALPHACHANNELOPTIONS_FORCE_DWORD = WICBitmapAlphaChannelOption.ITMAPALPHACHANNELOPTIONS_FORCE_DWORD;

pub const WICBitmapTransformOptions = enum(i32) {
    itmapTransformRotate0 = 0,
    itmapTransformRotate90 = 1,
    itmapTransformRotate180 = 2,
    itmapTransformRotate270 = 3,
    itmapTransformFlipHorizontal = 8,
    itmapTransformFlipVertical = 16,
    ITMAPTRANSFORMOPTIONS_FORCE_DWORD = 2147483647,
};
pub const WICBitmapTransformRotate0 = WICBitmapTransformOptions.itmapTransformRotate0;
pub const WICBitmapTransformRotate90 = WICBitmapTransformOptions.itmapTransformRotate90;
pub const WICBitmapTransformRotate180 = WICBitmapTransformOptions.itmapTransformRotate180;
pub const WICBitmapTransformRotate270 = WICBitmapTransformOptions.itmapTransformRotate270;
pub const WICBitmapTransformFlipHorizontal = WICBitmapTransformOptions.itmapTransformFlipHorizontal;
pub const WICBitmapTransformFlipVertical = WICBitmapTransformOptions.itmapTransformFlipVertical;
pub const WICBITMAPTRANSFORMOPTIONS_FORCE_DWORD = WICBitmapTransformOptions.ITMAPTRANSFORMOPTIONS_FORCE_DWORD;

pub const WICBitmapLockFlags = enum(i32) {
    itmapLockRead = 1,
    itmapLockWrite = 2,
    ITMAPLOCKFLAGS_FORCE_DWORD = 2147483647,
};
pub const WICBitmapLockRead = WICBitmapLockFlags.itmapLockRead;
pub const WICBitmapLockWrite = WICBitmapLockFlags.itmapLockWrite;
pub const WICBITMAPLOCKFLAGS_FORCE_DWORD = WICBitmapLockFlags.ITMAPLOCKFLAGS_FORCE_DWORD;

pub const WICBitmapDecoderCapabilities = enum(i32) {
    itmapDecoderCapabilitySameEncoder = 1,
    itmapDecoderCapabilityCanDecodeAllImages = 2,
    itmapDecoderCapabilityCanDecodeSomeImages = 4,
    itmapDecoderCapabilityCanEnumerateMetadata = 8,
    itmapDecoderCapabilityCanDecodeThumbnail = 16,
    ITMAPDECODERCAPABILITIES_FORCE_DWORD = 2147483647,
};
pub const WICBitmapDecoderCapabilitySameEncoder = WICBitmapDecoderCapabilities.itmapDecoderCapabilitySameEncoder;
pub const WICBitmapDecoderCapabilityCanDecodeAllImages = WICBitmapDecoderCapabilities.itmapDecoderCapabilityCanDecodeAllImages;
pub const WICBitmapDecoderCapabilityCanDecodeSomeImages = WICBitmapDecoderCapabilities.itmapDecoderCapabilityCanDecodeSomeImages;
pub const WICBitmapDecoderCapabilityCanEnumerateMetadata = WICBitmapDecoderCapabilities.itmapDecoderCapabilityCanEnumerateMetadata;
pub const WICBitmapDecoderCapabilityCanDecodeThumbnail = WICBitmapDecoderCapabilities.itmapDecoderCapabilityCanDecodeThumbnail;
pub const WICBITMAPDECODERCAPABILITIES_FORCE_DWORD = WICBitmapDecoderCapabilities.ITMAPDECODERCAPABILITIES_FORCE_DWORD;

pub const WICProgressOperation = enum(i32) {
    rogressOperationCopyPixels = 1,
    rogressOperationWritePixels = 2,
    rogressOperationAll = 65535,
    ROGRESSOPERATION_FORCE_DWORD = 2147483647,
};
pub const WICProgressOperationCopyPixels = WICProgressOperation.rogressOperationCopyPixels;
pub const WICProgressOperationWritePixels = WICProgressOperation.rogressOperationWritePixels;
pub const WICProgressOperationAll = WICProgressOperation.rogressOperationAll;
pub const WICPROGRESSOPERATION_FORCE_DWORD = WICProgressOperation.ROGRESSOPERATION_FORCE_DWORD;

pub const WICProgressNotification = enum(i32) {
    rogressNotificationBegin = 65536,
    rogressNotificationEnd = 131072,
    rogressNotificationFrequent = 262144,
    rogressNotificationAll = -65536,
    ROGRESSNOTIFICATION_FORCE_DWORD = 2147483647,
};
pub const WICProgressNotificationBegin = WICProgressNotification.rogressNotificationBegin;
pub const WICProgressNotificationEnd = WICProgressNotification.rogressNotificationEnd;
pub const WICProgressNotificationFrequent = WICProgressNotification.rogressNotificationFrequent;
pub const WICProgressNotificationAll = WICProgressNotification.rogressNotificationAll;
pub const WICPROGRESSNOTIFICATION_FORCE_DWORD = WICProgressNotification.ROGRESSNOTIFICATION_FORCE_DWORD;

pub const WICComponentSigning = enum(i32) {
    omponentSigned = 1,
    omponentUnsigned = 2,
    omponentSafe = 4,
    omponentDisabled = -2147483648,
    OMPONENTSIGNING_FORCE_DWORD = 2147483647,
};
pub const WICComponentSigned = WICComponentSigning.omponentSigned;
pub const WICComponentUnsigned = WICComponentSigning.omponentUnsigned;
pub const WICComponentSafe = WICComponentSigning.omponentSafe;
pub const WICComponentDisabled = WICComponentSigning.omponentDisabled;
pub const WICCOMPONENTSIGNING_FORCE_DWORD = WICComponentSigning.OMPONENTSIGNING_FORCE_DWORD;

pub const WICGifLogicalScreenDescriptorProperties = enum(u32) {
    Signature = 1,
    DescriptorWidth = 2,
    DescriptorHeight = 3,
    DescriptorGlobalColorTableFlag = 4,
    DescriptorColorResolution = 5,
    DescriptorSortFlag = 6,
    DescriptorGlobalColorTableSize = 7,
    DescriptorBackgroundColorIndex = 8,
    DescriptorPixelAspectRatio = 9,
    DescriptorProperties_FORCE_DWORD = 2147483647,
};
pub const WICGifLogicalScreenSignature = WICGifLogicalScreenDescriptorProperties.Signature;
pub const WICGifLogicalScreenDescriptorWidth = WICGifLogicalScreenDescriptorProperties.DescriptorWidth;
pub const WICGifLogicalScreenDescriptorHeight = WICGifLogicalScreenDescriptorProperties.DescriptorHeight;
pub const WICGifLogicalScreenDescriptorGlobalColorTableFlag = WICGifLogicalScreenDescriptorProperties.DescriptorGlobalColorTableFlag;
pub const WICGifLogicalScreenDescriptorColorResolution = WICGifLogicalScreenDescriptorProperties.DescriptorColorResolution;
pub const WICGifLogicalScreenDescriptorSortFlag = WICGifLogicalScreenDescriptorProperties.DescriptorSortFlag;
pub const WICGifLogicalScreenDescriptorGlobalColorTableSize = WICGifLogicalScreenDescriptorProperties.DescriptorGlobalColorTableSize;
pub const WICGifLogicalScreenDescriptorBackgroundColorIndex = WICGifLogicalScreenDescriptorProperties.DescriptorBackgroundColorIndex;
pub const WICGifLogicalScreenDescriptorPixelAspectRatio = WICGifLogicalScreenDescriptorProperties.DescriptorPixelAspectRatio;
pub const WICGifLogicalScreenDescriptorProperties_FORCE_DWORD = WICGifLogicalScreenDescriptorProperties.DescriptorProperties_FORCE_DWORD;

pub const WICGifImageDescriptorProperties = enum(u32) {
    Left = 1,
    Top = 2,
    Width = 3,
    Height = 4,
    LocalColorTableFlag = 5,
    InterlaceFlag = 6,
    SortFlag = 7,
    LocalColorTableSize = 8,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WICGifImageDescriptorLeft = WICGifImageDescriptorProperties.Left;
pub const WICGifImageDescriptorTop = WICGifImageDescriptorProperties.Top;
pub const WICGifImageDescriptorWidth = WICGifImageDescriptorProperties.Width;
pub const WICGifImageDescriptorHeight = WICGifImageDescriptorProperties.Height;
pub const WICGifImageDescriptorLocalColorTableFlag = WICGifImageDescriptorProperties.LocalColorTableFlag;
pub const WICGifImageDescriptorInterlaceFlag = WICGifImageDescriptorProperties.InterlaceFlag;
pub const WICGifImageDescriptorSortFlag = WICGifImageDescriptorProperties.SortFlag;
pub const WICGifImageDescriptorLocalColorTableSize = WICGifImageDescriptorProperties.LocalColorTableSize;
pub const WICGifImageDescriptorProperties_FORCE_DWORD = WICGifImageDescriptorProperties.Properties_FORCE_DWORD;

pub const WICGifGraphicControlExtensionProperties = enum(u32) {
    Disposal = 1,
    UserInputFlag = 2,
    TransparencyFlag = 3,
    Delay = 4,
    TransparentColorIndex = 5,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WICGifGraphicControlExtensionDisposal = WICGifGraphicControlExtensionProperties.Disposal;
pub const WICGifGraphicControlExtensionUserInputFlag = WICGifGraphicControlExtensionProperties.UserInputFlag;
pub const WICGifGraphicControlExtensionTransparencyFlag = WICGifGraphicControlExtensionProperties.TransparencyFlag;
pub const WICGifGraphicControlExtensionDelay = WICGifGraphicControlExtensionProperties.Delay;
pub const WICGifGraphicControlExtensionTransparentColorIndex = WICGifGraphicControlExtensionProperties.TransparentColorIndex;
pub const WICGifGraphicControlExtensionProperties_FORCE_DWORD = WICGifGraphicControlExtensionProperties.Properties_FORCE_DWORD;

pub const WICGifApplicationExtensionProperties = enum(u32) {
    Application = 1,
    Data = 2,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WICGifApplicationExtensionApplication = WICGifApplicationExtensionProperties.Application;
pub const WICGifApplicationExtensionData = WICGifApplicationExtensionProperties.Data;
pub const WICGifApplicationExtensionProperties_FORCE_DWORD = WICGifApplicationExtensionProperties.Properties_FORCE_DWORD;

pub const WICGifCommentExtensionProperties = enum(u32) {
    Text = 1,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WICGifCommentExtensionText = WICGifCommentExtensionProperties.Text;
pub const WICGifCommentExtensionProperties_FORCE_DWORD = WICGifCommentExtensionProperties.Properties_FORCE_DWORD;

pub const WICJpegCommentProperties = enum(u32) {
    Text = 1,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WICJpegCommentText = WICJpegCommentProperties.Text;
pub const WICJpegCommentProperties_FORCE_DWORD = WICJpegCommentProperties.Properties_FORCE_DWORD;

pub const WICJpegLuminanceProperties = enum(u32) {
    Table = 1,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WICJpegLuminanceTable = WICJpegLuminanceProperties.Table;
pub const WICJpegLuminanceProperties_FORCE_DWORD = WICJpegLuminanceProperties.Properties_FORCE_DWORD;

pub const WICJpegChrominanceProperties = enum(u32) {
    Table = 1,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WICJpegChrominanceTable = WICJpegChrominanceProperties.Table;
pub const WICJpegChrominanceProperties_FORCE_DWORD = WICJpegChrominanceProperties.Properties_FORCE_DWORD;

pub const WIC8BIMIptcProperties = enum(u32) {
    PString = 0,
    EmbeddedIPTC = 1,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WIC8BIMIptcPString = WIC8BIMIptcProperties.PString;
pub const WIC8BIMIptcEmbeddedIPTC = WIC8BIMIptcProperties.EmbeddedIPTC;
pub const WIC8BIMIptcProperties_FORCE_DWORD = WIC8BIMIptcProperties.Properties_FORCE_DWORD;

pub const WIC8BIMResolutionInfoProperties = enum(u32) {
    PString = 1,
    HResolution = 2,
    HResolutionUnit = 3,
    WidthUnit = 4,
    VResolution = 5,
    VResolutionUnit = 6,
    HeightUnit = 7,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WIC8BIMResolutionInfoPString = WIC8BIMResolutionInfoProperties.PString;
pub const WIC8BIMResolutionInfoHResolution = WIC8BIMResolutionInfoProperties.HResolution;
pub const WIC8BIMResolutionInfoHResolutionUnit = WIC8BIMResolutionInfoProperties.HResolutionUnit;
pub const WIC8BIMResolutionInfoWidthUnit = WIC8BIMResolutionInfoProperties.WidthUnit;
pub const WIC8BIMResolutionInfoVResolution = WIC8BIMResolutionInfoProperties.VResolution;
pub const WIC8BIMResolutionInfoVResolutionUnit = WIC8BIMResolutionInfoProperties.VResolutionUnit;
pub const WIC8BIMResolutionInfoHeightUnit = WIC8BIMResolutionInfoProperties.HeightUnit;
pub const WIC8BIMResolutionInfoProperties_FORCE_DWORD = WIC8BIMResolutionInfoProperties.Properties_FORCE_DWORD;

pub const WIC8BIMIptcDigestProperties = enum(u32) {
    PString = 1,
    IptcDigest = 2,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WIC8BIMIptcDigestPString = WIC8BIMIptcDigestProperties.PString;
pub const WIC8BIMIptcDigestIptcDigest = WIC8BIMIptcDigestProperties.IptcDigest;
pub const WIC8BIMIptcDigestProperties_FORCE_DWORD = WIC8BIMIptcDigestProperties.Properties_FORCE_DWORD;

pub const WICPngGamaProperties = enum(u32) {
    Gamma = 1,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WICPngGamaGamma = WICPngGamaProperties.Gamma;
pub const WICPngGamaProperties_FORCE_DWORD = WICPngGamaProperties.Properties_FORCE_DWORD;

pub const WICPngBkgdProperties = enum(u32) {
    BackgroundColor = 1,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WICPngBkgdBackgroundColor = WICPngBkgdProperties.BackgroundColor;
pub const WICPngBkgdProperties_FORCE_DWORD = WICPngBkgdProperties.Properties_FORCE_DWORD;

pub const WICPngItxtProperties = enum(u32) {
    Keyword = 1,
    CompressionFlag = 2,
    LanguageTag = 3,
    TranslatedKeyword = 4,
    Text = 5,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WICPngItxtKeyword = WICPngItxtProperties.Keyword;
pub const WICPngItxtCompressionFlag = WICPngItxtProperties.CompressionFlag;
pub const WICPngItxtLanguageTag = WICPngItxtProperties.LanguageTag;
pub const WICPngItxtTranslatedKeyword = WICPngItxtProperties.TranslatedKeyword;
pub const WICPngItxtText = WICPngItxtProperties.Text;
pub const WICPngItxtProperties_FORCE_DWORD = WICPngItxtProperties.Properties_FORCE_DWORD;

pub const WICPngChrmProperties = enum(u32) {
    WhitePointX = 1,
    WhitePointY = 2,
    RedX = 3,
    RedY = 4,
    GreenX = 5,
    GreenY = 6,
    BlueX = 7,
    BlueY = 8,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WICPngChrmWhitePointX = WICPngChrmProperties.WhitePointX;
pub const WICPngChrmWhitePointY = WICPngChrmProperties.WhitePointY;
pub const WICPngChrmRedX = WICPngChrmProperties.RedX;
pub const WICPngChrmRedY = WICPngChrmProperties.RedY;
pub const WICPngChrmGreenX = WICPngChrmProperties.GreenX;
pub const WICPngChrmGreenY = WICPngChrmProperties.GreenY;
pub const WICPngChrmBlueX = WICPngChrmProperties.BlueX;
pub const WICPngChrmBlueY = WICPngChrmProperties.BlueY;
pub const WICPngChrmProperties_FORCE_DWORD = WICPngChrmProperties.Properties_FORCE_DWORD;

pub const WICPngHistProperties = enum(u32) {
    Frequencies = 1,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WICPngHistFrequencies = WICPngHistProperties.Frequencies;
pub const WICPngHistProperties_FORCE_DWORD = WICPngHistProperties.Properties_FORCE_DWORD;

pub const WICPngIccpProperties = enum(u32) {
    fileName = 1,
    fileData = 2,
    perties_FORCE_DWORD = 2147483647,
};
pub const WICPngIccpProfileName = WICPngIccpProperties.fileName;
pub const WICPngIccpProfileData = WICPngIccpProperties.fileData;
pub const WICPngIccpProperties_FORCE_DWORD = WICPngIccpProperties.perties_FORCE_DWORD;

pub const WICPngSrgbProperties = enum(u32) {
    RenderingIntent = 1,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WICPngSrgbRenderingIntent = WICPngSrgbProperties.RenderingIntent;
pub const WICPngSrgbProperties_FORCE_DWORD = WICPngSrgbProperties.Properties_FORCE_DWORD;

pub const WICPngTimeProperties = enum(u32) {
    Year = 1,
    Month = 2,
    Day = 3,
    Hour = 4,
    Minute = 5,
    Second = 6,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WICPngTimeYear = WICPngTimeProperties.Year;
pub const WICPngTimeMonth = WICPngTimeProperties.Month;
pub const WICPngTimeDay = WICPngTimeProperties.Day;
pub const WICPngTimeHour = WICPngTimeProperties.Hour;
pub const WICPngTimeMinute = WICPngTimeProperties.Minute;
pub const WICPngTimeSecond = WICPngTimeProperties.Second;
pub const WICPngTimeProperties_FORCE_DWORD = WICPngTimeProperties.Properties_FORCE_DWORD;

pub const WICHeifProperties = enum(u32) {
    Orientation = 1,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WICHeifOrientation = WICHeifProperties.Orientation;
pub const WICHeifProperties_FORCE_DWORD = WICHeifProperties.Properties_FORCE_DWORD;

pub const WICHeifHdrProperties = enum(u32) {
    MaximumLuminanceLevel = 1,
    MaximumFrameAverageLuminanceLevel = 2,
    MinimumMasteringDisplayLuminanceLevel = 3,
    MaximumMasteringDisplayLuminanceLevel = 4,
    CustomVideoPrimaries = 5,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WICHeifHdrMaximumLuminanceLevel = WICHeifHdrProperties.MaximumLuminanceLevel;
pub const WICHeifHdrMaximumFrameAverageLuminanceLevel = WICHeifHdrProperties.MaximumFrameAverageLuminanceLevel;
pub const WICHeifHdrMinimumMasteringDisplayLuminanceLevel = WICHeifHdrProperties.MinimumMasteringDisplayLuminanceLevel;
pub const WICHeifHdrMaximumMasteringDisplayLuminanceLevel = WICHeifHdrProperties.MaximumMasteringDisplayLuminanceLevel;
pub const WICHeifHdrCustomVideoPrimaries = WICHeifHdrProperties.CustomVideoPrimaries;
pub const WICHeifHdrProperties_FORCE_DWORD = WICHeifHdrProperties.Properties_FORCE_DWORD;

pub const WICWebpAnimProperties = enum(u32) {
    LoopCount = 1,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WICWebpAnimLoopCount = WICWebpAnimProperties.LoopCount;
pub const WICWebpAnimProperties_FORCE_DWORD = WICWebpAnimProperties.Properties_FORCE_DWORD;

pub const WICWebpAnmfProperties = enum(u32) {
    FrameDuration = 1,
    Properties_FORCE_DWORD = 2147483647,
};
pub const WICWebpAnmfFrameDuration = WICWebpAnmfProperties.FrameDuration;
pub const WICWebpAnmfProperties_FORCE_DWORD = WICWebpAnmfProperties.Properties_FORCE_DWORD;

pub const WICSectionAccessLevel = enum(u32) {
    Read = 1,
    ReadWrite = 3,
    _FORCE_DWORD = 2147483647,
};
pub const WICSectionAccessLevelRead = WICSectionAccessLevel.Read;
pub const WICSectionAccessLevelReadWrite = WICSectionAccessLevel.ReadWrite;
pub const WICSectionAccessLevel_FORCE_DWORD = WICSectionAccessLevel._FORCE_DWORD;

pub const WICPixelFormatNumericRepresentation = enum(u32) {
    Unspecified = 0,
    Indexed = 1,
    UnsignedInteger = 2,
    SignedInteger = 3,
    Fixed = 4,
    Float = 5,
    _FORCE_DWORD = 2147483647,
};
pub const WICPixelFormatNumericRepresentationUnspecified = WICPixelFormatNumericRepresentation.Unspecified;
pub const WICPixelFormatNumericRepresentationIndexed = WICPixelFormatNumericRepresentation.Indexed;
pub const WICPixelFormatNumericRepresentationUnsignedInteger = WICPixelFormatNumericRepresentation.UnsignedInteger;
pub const WICPixelFormatNumericRepresentationSignedInteger = WICPixelFormatNumericRepresentation.SignedInteger;
pub const WICPixelFormatNumericRepresentationFixed = WICPixelFormatNumericRepresentation.Fixed;
pub const WICPixelFormatNumericRepresentationFloat = WICPixelFormatNumericRepresentation.Float;
pub const WICPixelFormatNumericRepresentation_FORCE_DWORD = WICPixelFormatNumericRepresentation._FORCE_DWORD;

pub const WICPlanarOptions = enum(i32) {
    lanarOptionsDefault = 0,
    lanarOptionsPreserveSubsampling = 1,
    LANAROPTIONS_FORCE_DWORD = 2147483647,
};
pub const WICPlanarOptionsDefault = WICPlanarOptions.lanarOptionsDefault;
pub const WICPlanarOptionsPreserveSubsampling = WICPlanarOptions.lanarOptionsPreserveSubsampling;
pub const WICPLANAROPTIONS_FORCE_DWORD = WICPlanarOptions.LANAROPTIONS_FORCE_DWORD;

pub const WICJpegIndexingOptions = enum(u32) {
    GenerateOnDemand = 0,
    GenerateOnLoad = 1,
    _FORCE_DWORD = 2147483647,
};
pub const WICJpegIndexingOptionsGenerateOnDemand = WICJpegIndexingOptions.GenerateOnDemand;
pub const WICJpegIndexingOptionsGenerateOnLoad = WICJpegIndexingOptions.GenerateOnLoad;
pub const WICJpegIndexingOptions_FORCE_DWORD = WICJpegIndexingOptions._FORCE_DWORD;

pub const WICJpegTransferMatrix = enum(u32) {
    Identity = 0,
    BT601 = 1,
    _FORCE_DWORD = 2147483647,
};
pub const WICJpegTransferMatrixIdentity = WICJpegTransferMatrix.Identity;
pub const WICJpegTransferMatrixBT601 = WICJpegTransferMatrix.BT601;
pub const WICJpegTransferMatrix_FORCE_DWORD = WICJpegTransferMatrix._FORCE_DWORD;

pub const WICJpegScanType = enum(u32) {
    Interleaved = 0,
    PlanarComponents = 1,
    Progressive = 2,
    _FORCE_DWORD = 2147483647,
};
pub const WICJpegScanTypeInterleaved = WICJpegScanType.Interleaved;
pub const WICJpegScanTypePlanarComponents = WICJpegScanType.PlanarComponents;
pub const WICJpegScanTypeProgressive = WICJpegScanType.Progressive;
pub const WICJpegScanType_FORCE_DWORD = WICJpegScanType._FORCE_DWORD;

pub const WICImageParameters = extern struct {
    PixelFormat: D2D1_PIXEL_FORMAT,
    DpiX: f32,
    DpiY: f32,
    Top: f32,
    Left: f32,
    PixelWidth: u32,
    PixelHeight: u32,
};

pub const WICBitmapPlaneDescription = extern struct {
    Format: Guid,
    Width: u32,
    Height: u32,
};

pub const WICBitmapPlane = extern struct {
    Format: Guid,
    pbBuffer: ?*u8,
    cbStride: u32,
    cbBufferSize: u32,
};

pub const WICJpegFrameHeader = extern struct {
    Width: u32,
    Height: u32,
    TransferMatrix: WICJpegTransferMatrix,
    ScanType: WICJpegScanType,
    cComponents: u32,
    ComponentIdentifiers: u32,
    SampleFactors: u32,
    QuantizationTableIndices: u32,
};

pub const WICJpegScanHeader = extern struct {
    cComponents: u32,
    RestartInterval: u32,
    ComponentSelectors: u32,
    HuffmanTableIndices: u32,
    StartSpectralSelection: u8,
    EndSpectralSelection: u8,
    SuccessiveApproximationHigh: u8,
    SuccessiveApproximationLow: u8,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICPalette_Value = Guid.initString("00000040-a8f2-4877-ba0a-fd2b6645fb94");
pub const IID_IWICPalette = &IID_IWICPalette_Value;
pub const IWICPalette = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitializePredefined: *const fn (
            self: *const IWICPalette,
            e_palette_type: WICBitmapPaletteType,
            f_add_transparent_color: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeCustom: *const fn (
            self: *const IWICPalette,
            p_colors: [*]u32,
            c_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromBitmap: *const fn (
            self: *const IWICPalette,
            p_i_surface: ?*IWICBitmapSource,
            c_count: u32,
            f_add_transparent_color: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromPalette: *const fn (
            self: *const IWICPalette,
            p_i_palette: ?*IWICPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: *const fn (
            self: *const IWICPalette,
            pe_palette_type: ?*WICBitmapPaletteType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorCount: *const fn (
            self: *const IWICPalette,
            pc_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColors: *const fn (
            self: *const IWICPalette,
            c_count: u32,
            p_colors: [*]u32,
            pc_actual_colors: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsBlackWhite: *const fn (
            self: *const IWICPalette,
            pf_is_black_white: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsGrayscale: *const fn (
            self: *const IWICPalette,
            pf_is_grayscale: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasAlpha: *const fn (
            self: *const IWICPalette,
            pf_has_alpha: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initializePredefined(self: *const T, e_palette_type_: WICBitmapPaletteType, f_add_transparent_color_: BOOL) HRESULT {
                return @as(*const IWICPalette.VTable, @ptrCast(self.vtable)).InitializePredefined(@as(*const IWICPalette, @ptrCast(self)), e_palette_type_, f_add_transparent_color_);
            }
            pub inline fn initializeCustom(self: *const T, p_colors_: [*]u32, c_count_: u32) HRESULT {
                return @as(*const IWICPalette.VTable, @ptrCast(self.vtable)).InitializeCustom(@as(*const IWICPalette, @ptrCast(self)), p_colors_, c_count_);
            }
            pub inline fn initializeFromBitmap(self: *const T, p_i_surface_: ?*IWICBitmapSource, c_count_: u32, f_add_transparent_color_: BOOL) HRESULT {
                return @as(*const IWICPalette.VTable, @ptrCast(self.vtable)).InitializeFromBitmap(@as(*const IWICPalette, @ptrCast(self)), p_i_surface_, c_count_, f_add_transparent_color_);
            }
            pub inline fn initializeFromPalette(self: *const T, p_i_palette_: ?*IWICPalette) HRESULT {
                return @as(*const IWICPalette.VTable, @ptrCast(self.vtable)).InitializeFromPalette(@as(*const IWICPalette, @ptrCast(self)), p_i_palette_);
            }
            pub inline fn getType(self: *const T, pe_palette_type_: ?*WICBitmapPaletteType) HRESULT {
                return @as(*const IWICPalette.VTable, @ptrCast(self.vtable)).GetType(@as(*const IWICPalette, @ptrCast(self)), pe_palette_type_);
            }
            pub inline fn getColorCount(self: *const T, pc_count_: ?*u32) HRESULT {
                return @as(*const IWICPalette.VTable, @ptrCast(self.vtable)).GetColorCount(@as(*const IWICPalette, @ptrCast(self)), pc_count_);
            }
            pub inline fn getColors(self: *const T, c_count_: u32, p_colors_: [*]u32, pc_actual_colors_: ?*u32) HRESULT {
                return @as(*const IWICPalette.VTable, @ptrCast(self.vtable)).GetColors(@as(*const IWICPalette, @ptrCast(self)), c_count_, p_colors_, pc_actual_colors_);
            }
            pub inline fn isBlackWhite(self: *const T, pf_is_black_white_: ?*BOOL) HRESULT {
                return @as(*const IWICPalette.VTable, @ptrCast(self.vtable)).IsBlackWhite(@as(*const IWICPalette, @ptrCast(self)), pf_is_black_white_);
            }
            pub inline fn isGrayscale(self: *const T, pf_is_grayscale_: ?*BOOL) HRESULT {
                return @as(*const IWICPalette.VTable, @ptrCast(self.vtable)).IsGrayscale(@as(*const IWICPalette, @ptrCast(self)), pf_is_grayscale_);
            }
            pub inline fn hasAlpha(self: *const T, pf_has_alpha_: ?*BOOL) HRESULT {
                return @as(*const IWICPalette.VTable, @ptrCast(self.vtable)).HasAlpha(@as(*const IWICPalette, @ptrCast(self)), pf_has_alpha_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICBitmapSource_Value = Guid.initString("00000120-a8f2-4877-ba0a-fd2b6645fb94");
pub const IID_IWICBitmapSource = &IID_IWICBitmapSource_Value;
pub const IWICBitmapSource = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSize: *const fn (
            self: *const IWICBitmapSource,
            pui_width: ?*u32,
            pui_height: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelFormat: *const fn (
            self: *const IWICBitmapSource,
            p_pixel_format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResolution: *const fn (
            self: *const IWICBitmapSource,
            p_dpi_x: ?*f64,
            p_dpi_y: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyPalette: *const fn (
            self: *const IWICBitmapSource,
            p_i_palette: ?*IWICPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyPixels: *const fn (
            self: *const IWICBitmapSource,
            prc: ?*const WICRect,
            cb_stride: u32,
            cb_buffer_size: u32,
            pb_buffer: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSize(self: *const T, pui_width_: ?*u32, pui_height_: ?*u32) HRESULT {
                return @as(*const IWICBitmapSource.VTable, @ptrCast(self.vtable)).GetSize(@as(*const IWICBitmapSource, @ptrCast(self)), pui_width_, pui_height_);
            }
            pub inline fn getPixelFormat(self: *const T, p_pixel_format_: ?*Guid) HRESULT {
                return @as(*const IWICBitmapSource.VTable, @ptrCast(self.vtable)).GetPixelFormat(@as(*const IWICBitmapSource, @ptrCast(self)), p_pixel_format_);
            }
            pub inline fn getResolution(self: *const T, p_dpi_x_: ?*f64, p_dpi_y_: ?*f64) HRESULT {
                return @as(*const IWICBitmapSource.VTable, @ptrCast(self.vtable)).GetResolution(@as(*const IWICBitmapSource, @ptrCast(self)), p_dpi_x_, p_dpi_y_);
            }
            pub inline fn copyPalette(self: *const T, p_i_palette_: ?*IWICPalette) HRESULT {
                return @as(*const IWICBitmapSource.VTable, @ptrCast(self.vtable)).CopyPalette(@as(*const IWICBitmapSource, @ptrCast(self)), p_i_palette_);
            }
            pub inline fn copyPixels(self: *const T, prc_: ?*const WICRect, cb_stride_: u32, cb_buffer_size_: u32, pb_buffer_: [*:0]u8) HRESULT {
                return @as(*const IWICBitmapSource.VTable, @ptrCast(self.vtable)).CopyPixels(@as(*const IWICBitmapSource, @ptrCast(self)), prc_, cb_stride_, cb_buffer_size_, pb_buffer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICFormatConverter_Value = Guid.initString("00000301-a8f2-4877-ba0a-fd2b6645fb94");
pub const IID_IWICFormatConverter = &IID_IWICFormatConverter_Value;
pub const IWICFormatConverter = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapSource.VTable,
        Initialize: *const fn (
            self: *const IWICFormatConverter,
            p_i_source: ?*IWICBitmapSource,
            dst_format: ?*Guid,
            dither: WICBitmapDitherType,
            p_i_palette: ?*IWICPalette,
            alpha_threshold_percent: f64,
            palette_translate: WICBitmapPaletteType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanConvert: *const fn (
            self: *const IWICFormatConverter,
            src_pixel_format: ?*Guid,
            dst_pixel_format: ?*Guid,
            pf_can_convert: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICBitmapSource.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_i_source_: ?*IWICBitmapSource, dst_format_: ?*Guid, dither_: WICBitmapDitherType, p_i_palette_: ?*IWICPalette, alpha_threshold_percent_: f64, palette_translate_: WICBitmapPaletteType) HRESULT {
                return @as(*const IWICFormatConverter.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IWICFormatConverter, @ptrCast(self)), p_i_source_, dst_format_, dither_, p_i_palette_, alpha_threshold_percent_, palette_translate_);
            }
            pub inline fn canConvert(self: *const T, src_pixel_format_: ?*Guid, dst_pixel_format_: ?*Guid, pf_can_convert_: ?*BOOL) HRESULT {
                return @as(*const IWICFormatConverter.VTable, @ptrCast(self.vtable)).CanConvert(@as(*const IWICFormatConverter, @ptrCast(self)), src_pixel_format_, dst_pixel_format_, pf_can_convert_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IWICPlanarFormatConverter_Value = Guid.initString("bebee9cb-83b0-4dcc-8132-b0aaa55eac96");
pub const IID_IWICPlanarFormatConverter = &IID_IWICPlanarFormatConverter_Value;
pub const IWICPlanarFormatConverter = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapSource.VTable,
        Initialize: *const fn (
            self: *const IWICPlanarFormatConverter,
            pp_planes: [*]?*IWICBitmapSource,
            c_planes: u32,
            dst_format: ?*Guid,
            dither: WICBitmapDitherType,
            p_i_palette: ?*IWICPalette,
            alpha_threshold_percent: f64,
            palette_translate: WICBitmapPaletteType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanConvert: *const fn (
            self: *const IWICPlanarFormatConverter,
            p_src_pixel_formats: [*]const Guid,
            c_src_planes: u32,
            dst_pixel_format: ?*Guid,
            pf_can_convert: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICBitmapSource.MethodMixin(T);
            pub inline fn initialize(self: *const T, pp_planes_: [*]?*IWICBitmapSource, c_planes_: u32, dst_format_: ?*Guid, dither_: WICBitmapDitherType, p_i_palette_: ?*IWICPalette, alpha_threshold_percent_: f64, palette_translate_: WICBitmapPaletteType) HRESULT {
                return @as(*const IWICPlanarFormatConverter.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IWICPlanarFormatConverter, @ptrCast(self)), pp_planes_, c_planes_, dst_format_, dither_, p_i_palette_, alpha_threshold_percent_, palette_translate_);
            }
            pub inline fn canConvert(self: *const T, p_src_pixel_formats_: [*]const Guid, c_src_planes_: u32, dst_pixel_format_: ?*Guid, pf_can_convert_: ?*BOOL) HRESULT {
                return @as(*const IWICPlanarFormatConverter.VTable, @ptrCast(self.vtable)).CanConvert(@as(*const IWICPlanarFormatConverter, @ptrCast(self)), p_src_pixel_formats_, c_src_planes_, dst_pixel_format_, pf_can_convert_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICBitmapScaler_Value = Guid.initString("00000302-a8f2-4877-ba0a-fd2b6645fb94");
pub const IID_IWICBitmapScaler = &IID_IWICBitmapScaler_Value;
pub const IWICBitmapScaler = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapSource.VTable,
        Initialize: *const fn (
            self: *const IWICBitmapScaler,
            p_i_source: ?*IWICBitmapSource,
            ui_width: u32,
            ui_height: u32,
            mode: WICBitmapInterpolationMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICBitmapSource.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_i_source_: ?*IWICBitmapSource, ui_width_: u32, ui_height_: u32, mode_: WICBitmapInterpolationMode) HRESULT {
                return @as(*const IWICBitmapScaler.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IWICBitmapScaler, @ptrCast(self)), p_i_source_, ui_width_, ui_height_, mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICBitmapClipper_Value = Guid.initString("e4fbcf03-223d-4e81-9333-d635556dd1b5");
pub const IID_IWICBitmapClipper = &IID_IWICBitmapClipper_Value;
pub const IWICBitmapClipper = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapSource.VTable,
        Initialize: *const fn (
            self: *const IWICBitmapClipper,
            p_i_source: ?*IWICBitmapSource,
            prc: ?*const WICRect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICBitmapSource.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_i_source_: ?*IWICBitmapSource, prc_: ?*const WICRect) HRESULT {
                return @as(*const IWICBitmapClipper.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IWICBitmapClipper, @ptrCast(self)), p_i_source_, prc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICBitmapFlipRotator_Value = Guid.initString("5009834f-2d6a-41ce-9e1b-17c5aff7a782");
pub const IID_IWICBitmapFlipRotator = &IID_IWICBitmapFlipRotator_Value;
pub const IWICBitmapFlipRotator = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapSource.VTable,
        Initialize: *const fn (
            self: *const IWICBitmapFlipRotator,
            p_i_source: ?*IWICBitmapSource,
            options: WICBitmapTransformOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICBitmapSource.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_i_source_: ?*IWICBitmapSource, options_: WICBitmapTransformOptions) HRESULT {
                return @as(*const IWICBitmapFlipRotator.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IWICBitmapFlipRotator, @ptrCast(self)), p_i_source_, options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICBitmapLock_Value = Guid.initString("00000123-a8f2-4877-ba0a-fd2b6645fb94");
pub const IID_IWICBitmapLock = &IID_IWICBitmapLock_Value;
pub const IWICBitmapLock = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSize: *const fn (
            self: *const IWICBitmapLock,
            pui_width: ?*u32,
            pui_height: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStride: *const fn (
            self: *const IWICBitmapLock,
            pcb_stride: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDataPointer: *const fn (
            self: *const IWICBitmapLock,
            pcb_buffer_size: ?*u32,
            ppb_data: [*]?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelFormat: *const fn (
            self: *const IWICBitmapLock,
            p_pixel_format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSize(self: *const T, pui_width_: ?*u32, pui_height_: ?*u32) HRESULT {
                return @as(*const IWICBitmapLock.VTable, @ptrCast(self.vtable)).GetSize(@as(*const IWICBitmapLock, @ptrCast(self)), pui_width_, pui_height_);
            }
            pub inline fn getStride(self: *const T, pcb_stride_: ?*u32) HRESULT {
                return @as(*const IWICBitmapLock.VTable, @ptrCast(self.vtable)).GetStride(@as(*const IWICBitmapLock, @ptrCast(self)), pcb_stride_);
            }
            pub inline fn getDataPointer(self: *const T, pcb_buffer_size_: ?*u32, ppb_data_: [*]?*u8) HRESULT {
                return @as(*const IWICBitmapLock.VTable, @ptrCast(self.vtable)).GetDataPointer(@as(*const IWICBitmapLock, @ptrCast(self)), pcb_buffer_size_, ppb_data_);
            }
            pub inline fn getPixelFormat(self: *const T, p_pixel_format_: ?*Guid) HRESULT {
                return @as(*const IWICBitmapLock.VTable, @ptrCast(self.vtable)).GetPixelFormat(@as(*const IWICBitmapLock, @ptrCast(self)), p_pixel_format_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICBitmap_Value = Guid.initString("00000121-a8f2-4877-ba0a-fd2b6645fb94");
pub const IID_IWICBitmap = &IID_IWICBitmap_Value;
pub const IWICBitmap = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapSource.VTable,
        Lock: *const fn (
            self: *const IWICBitmap,
            prc_lock: ?*const WICRect,
            flags: u32,
            pp_i_lock: ?*?*IWICBitmapLock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPalette: *const fn (
            self: *const IWICBitmap,
            p_i_palette: ?*IWICPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetResolution: *const fn (
            self: *const IWICBitmap,
            dpi_x: f64,
            dpi_y: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICBitmapSource.MethodMixin(T);
            pub inline fn lock(self: *const T, prc_lock_: ?*const WICRect, flags_: u32, pp_i_lock_: ?*?*IWICBitmapLock) HRESULT {
                return @as(*const IWICBitmap.VTable, @ptrCast(self.vtable)).Lock(@as(*const IWICBitmap, @ptrCast(self)), prc_lock_, flags_, pp_i_lock_);
            }
            pub inline fn setPalette(self: *const T, p_i_palette_: ?*IWICPalette) HRESULT {
                return @as(*const IWICBitmap.VTable, @ptrCast(self.vtable)).SetPalette(@as(*const IWICBitmap, @ptrCast(self)), p_i_palette_);
            }
            pub inline fn setResolution(self: *const T, dpi_x_: f64, dpi_y_: f64) HRESULT {
                return @as(*const IWICBitmap.VTable, @ptrCast(self.vtable)).SetResolution(@as(*const IWICBitmap, @ptrCast(self)), dpi_x_, dpi_y_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICColorContext_Value = Guid.initString("3c613a02-34b2-44ea-9a7c-45aea9c6fd6d");
pub const IID_IWICColorContext = &IID_IWICColorContext_Value;
pub const IWICColorContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitializeFromFilename: *const fn (
            self: *const IWICColorContext,
            wz_filename: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromMemory: *const fn (
            self: *const IWICColorContext,
            pb_buffer: [*:0]const u8,
            cb_buffer_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromExifColorSpace: *const fn (
            self: *const IWICColorContext,
            value: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: *const fn (
            self: *const IWICColorContext,
            p_type: ?*WICColorContextType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProfileBytes: *const fn (
            self: *const IWICColorContext,
            cb_buffer: u32,
            pb_buffer: [*:0]u8,
            pcb_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExifColorSpace: *const fn (
            self: *const IWICColorContext,
            p_value: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initializeFromFilename(self: *const T, wz_filename_: ?[*:0]const u16) HRESULT {
                return @as(*const IWICColorContext.VTable, @ptrCast(self.vtable)).InitializeFromFilename(@as(*const IWICColorContext, @ptrCast(self)), wz_filename_);
            }
            pub inline fn initializeFromMemory(self: *const T, pb_buffer_: [*:0]const u8, cb_buffer_size_: u32) HRESULT {
                return @as(*const IWICColorContext.VTable, @ptrCast(self.vtable)).InitializeFromMemory(@as(*const IWICColorContext, @ptrCast(self)), pb_buffer_, cb_buffer_size_);
            }
            pub inline fn initializeFromExifColorSpace(self: *const T, value_: u32) HRESULT {
                return @as(*const IWICColorContext.VTable, @ptrCast(self.vtable)).InitializeFromExifColorSpace(@as(*const IWICColorContext, @ptrCast(self)), value_);
            }
            pub inline fn getType(self: *const T, p_type_: ?*WICColorContextType) HRESULT {
                return @as(*const IWICColorContext.VTable, @ptrCast(self.vtable)).GetType(@as(*const IWICColorContext, @ptrCast(self)), p_type_);
            }
            pub inline fn getProfileBytes(self: *const T, cb_buffer_: u32, pb_buffer_: [*:0]u8, pcb_actual_: ?*u32) HRESULT {
                return @as(*const IWICColorContext.VTable, @ptrCast(self.vtable)).GetProfileBytes(@as(*const IWICColorContext, @ptrCast(self)), cb_buffer_, pb_buffer_, pcb_actual_);
            }
            pub inline fn getExifColorSpace(self: *const T, p_value_: ?*u32) HRESULT {
                return @as(*const IWICColorContext.VTable, @ptrCast(self.vtable)).GetExifColorSpace(@as(*const IWICColorContext, @ptrCast(self)), p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICColorTransform_Value = Guid.initString("b66f034f-d0e2-40ab-b436-6de39e321a94");
pub const IID_IWICColorTransform = &IID_IWICColorTransform_Value;
pub const IWICColorTransform = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapSource.VTable,
        Initialize: *const fn (
            self: *const IWICColorTransform,
            p_i_bitmap_source: ?*IWICBitmapSource,
            p_i_context_source: ?*IWICColorContext,
            p_i_context_dest: ?*IWICColorContext,
            pixel_fmt_dest: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICBitmapSource.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_i_bitmap_source_: ?*IWICBitmapSource, p_i_context_source_: ?*IWICColorContext, p_i_context_dest_: ?*IWICColorContext, pixel_fmt_dest_: ?*Guid) HRESULT {
                return @as(*const IWICColorTransform.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IWICColorTransform, @ptrCast(self)), p_i_bitmap_source_, p_i_context_source_, p_i_context_dest_, pixel_fmt_dest_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICFastMetadataEncoder_Value = Guid.initString("b84e2c09-78c9-4ac4-8bd3-524ae1663a2f");
pub const IID_IWICFastMetadataEncoder = &IID_IWICFastMetadataEncoder_Value;
pub const IWICFastMetadataEncoder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Commit: *const fn (
            self: *const IWICFastMetadataEncoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMetadataQueryWriter: *const fn (
            self: *const IWICFastMetadataEncoder,
            pp_i_metadata_query_writer: ?*?*IWICMetadataQueryWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn commit(self: *const T) HRESULT {
                return @as(*const IWICFastMetadataEncoder.VTable, @ptrCast(self.vtable)).Commit(@as(*const IWICFastMetadataEncoder, @ptrCast(self)));
            }
            pub inline fn getMetadataQueryWriter(self: *const T, pp_i_metadata_query_writer_: ?*?*IWICMetadataQueryWriter) HRESULT {
                return @as(*const IWICFastMetadataEncoder.VTable, @ptrCast(self.vtable)).GetMetadataQueryWriter(@as(*const IWICFastMetadataEncoder, @ptrCast(self)), pp_i_metadata_query_writer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICStream_Value = Guid.initString("135ff860-22b7-4ddf-b0f6-218f4f299a43");
pub const IID_IWICStream = &IID_IWICStream_Value;
pub const IWICStream = extern struct {
    pub const VTable = extern struct {
        base: IStream.VTable,
        InitializeFromIStream: *const fn (
            self: *const IWICStream,
            p_i_stream: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromFilename: *const fn (
            self: *const IWICStream,
            wz_file_name: ?[*:0]const u16,
            dw_desired_access: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromMemory: *const fn (
            self: *const IWICStream,
            pb_buffer: [*:0]u8,
            cb_buffer_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromIStreamRegion: *const fn (
            self: *const IWICStream,
            p_i_stream: ?*IStream,
            ul_offset: ULARGE_INTEGER,
            ul_max_size: ULARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IStream.MethodMixin(T);
            pub inline fn initializeFromIStream(self: *const T, p_i_stream_: ?*IStream) HRESULT {
                return @as(*const IWICStream.VTable, @ptrCast(self.vtable)).InitializeFromIStream(@as(*const IWICStream, @ptrCast(self)), p_i_stream_);
            }
            pub inline fn initializeFromFilename(self: *const T, wz_file_name_: ?[*:0]const u16, dw_desired_access_: u32) HRESULT {
                return @as(*const IWICStream.VTable, @ptrCast(self.vtable)).InitializeFromFilename(@as(*const IWICStream, @ptrCast(self)), wz_file_name_, dw_desired_access_);
            }
            pub inline fn initializeFromMemory(self: *const T, pb_buffer_: [*:0]u8, cb_buffer_size_: u32) HRESULT {
                return @as(*const IWICStream.VTable, @ptrCast(self.vtable)).InitializeFromMemory(@as(*const IWICStream, @ptrCast(self)), pb_buffer_, cb_buffer_size_);
            }
            pub inline fn initializeFromIStreamRegion(self: *const T, p_i_stream_: ?*IStream, ul_offset_: ULARGE_INTEGER, ul_max_size_: ULARGE_INTEGER) HRESULT {
                return @as(*const IWICStream.VTable, @ptrCast(self.vtable)).InitializeFromIStreamRegion(@as(*const IWICStream, @ptrCast(self)), p_i_stream_, ul_offset_, ul_max_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICEnumMetadataItem_Value = Guid.initString("dc2bb46d-3f07-481e-8625-220c4aedbb33");
pub const IID_IWICEnumMetadataItem = &IID_IWICEnumMetadataItem_Value;
pub const IWICEnumMetadataItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IWICEnumMetadataItem,
            celt: u32,
            rgelt_schema: [*]PROPVARIANT,
            rgelt_id: [*]PROPVARIANT,
            rgelt_value: [*]PROPVARIANT,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IWICEnumMetadataItem,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IWICEnumMetadataItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IWICEnumMetadataItem,
            pp_i_enum_metadata_item: ?*?*IWICEnumMetadataItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_schema_: [*]PROPVARIANT, rgelt_id_: [*]PROPVARIANT, rgelt_value_: [*]PROPVARIANT, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IWICEnumMetadataItem.VTable, @ptrCast(self.vtable)).Next(@as(*const IWICEnumMetadataItem, @ptrCast(self)), celt_, rgelt_schema_, rgelt_id_, rgelt_value_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IWICEnumMetadataItem.VTable, @ptrCast(self.vtable)).Skip(@as(*const IWICEnumMetadataItem, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IWICEnumMetadataItem.VTable, @ptrCast(self.vtable)).Reset(@as(*const IWICEnumMetadataItem, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, pp_i_enum_metadata_item_: ?*?*IWICEnumMetadataItem) HRESULT {
                return @as(*const IWICEnumMetadataItem.VTable, @ptrCast(self.vtable)).Clone(@as(*const IWICEnumMetadataItem, @ptrCast(self)), pp_i_enum_metadata_item_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICMetadataQueryReader_Value = Guid.initString("30989668-e1c9-4597-b395-458eedb808df");
pub const IID_IWICMetadataQueryReader = &IID_IWICMetadataQueryReader_Value;
pub const IWICMetadataQueryReader = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetContainerFormat: *const fn (
            self: *const IWICMetadataQueryReader,
            pguid_container_format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocation: *const fn (
            self: *const IWICMetadataQueryReader,
            cch_max_length: u32,
            wz_namespace: [*:0]u16,
            pcch_actual_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMetadataByName: *const fn (
            self: *const IWICMetadataQueryReader,
            wz_name: ?[*:0]const u16,
            pvar_value: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumerator: *const fn (
            self: *const IWICMetadataQueryReader,
            pp_i_enum_string: ?*?*IEnumString,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getContainerFormat(self: *const T, pguid_container_format_: ?*Guid) HRESULT {
                return @as(*const IWICMetadataQueryReader.VTable, @ptrCast(self.vtable)).GetContainerFormat(@as(*const IWICMetadataQueryReader, @ptrCast(self)), pguid_container_format_);
            }
            pub inline fn getLocation(self: *const T, cch_max_length_: u32, wz_namespace_: [*:0]u16, pcch_actual_length_: ?*u32) HRESULT {
                return @as(*const IWICMetadataQueryReader.VTable, @ptrCast(self.vtable)).GetLocation(@as(*const IWICMetadataQueryReader, @ptrCast(self)), cch_max_length_, wz_namespace_, pcch_actual_length_);
            }
            pub inline fn getMetadataByName(self: *const T, wz_name_: ?[*:0]const u16, pvar_value_: ?*PROPVARIANT) HRESULT {
                return @as(*const IWICMetadataQueryReader.VTable, @ptrCast(self.vtable)).GetMetadataByName(@as(*const IWICMetadataQueryReader, @ptrCast(self)), wz_name_, pvar_value_);
            }
            pub inline fn getEnumerator(self: *const T, pp_i_enum_string_: ?*?*IEnumString) HRESULT {
                return @as(*const IWICMetadataQueryReader.VTable, @ptrCast(self.vtable)).GetEnumerator(@as(*const IWICMetadataQueryReader, @ptrCast(self)), pp_i_enum_string_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICMetadataQueryWriter_Value = Guid.initString("a721791a-0def-4d06-bd91-2118bf1db10b");
pub const IID_IWICMetadataQueryWriter = &IID_IWICMetadataQueryWriter_Value;
pub const IWICMetadataQueryWriter = extern struct {
    pub const VTable = extern struct {
        base: IWICMetadataQueryReader.VTable,
        SetMetadataByName: *const fn (
            self: *const IWICMetadataQueryWriter,
            wz_name: ?[*:0]const u16,
            pvar_value: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveMetadataByName: *const fn (
            self: *const IWICMetadataQueryWriter,
            wz_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICMetadataQueryReader.MethodMixin(T);
            pub inline fn setMetadataByName(self: *const T, wz_name_: ?[*:0]const u16, pvar_value_: ?*const PROPVARIANT) HRESULT {
                return @as(*const IWICMetadataQueryWriter.VTable, @ptrCast(self.vtable)).SetMetadataByName(@as(*const IWICMetadataQueryWriter, @ptrCast(self)), wz_name_, pvar_value_);
            }
            pub inline fn removeMetadataByName(self: *const T, wz_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IWICMetadataQueryWriter.VTable, @ptrCast(self.vtable)).RemoveMetadataByName(@as(*const IWICMetadataQueryWriter, @ptrCast(self)), wz_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWICBitmapEncoder_Value = Guid.initString("00000103-a8f2-4877-ba0a-fd2b6645fb94");
pub const IID_IWICBitmapEncoder = &IID_IWICBitmapEncoder_Value;
pub const IWICBitmapEncoder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IWICBitmapEncoder,
            p_i_stream: ?*IStream,
            cache_option: WICBitmapEncoderCacheOption,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContainerFormat: *const fn (
            self: *const IWICBitmapEncoder,
            pguid_container_format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEncoderInfo: *const fn (
            self: *const IWICBitmapEncoder,
            pp_i_encoder_info: ?*?*IWICBitmapEncoderInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColorContexts: *const fn (
            self: *const IWICBitmapEncoder,
            c_count: u32,
            pp_i_color_context: [*]?*IWICColorContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPalette: *const fn (
            self: *const IWICBitmapEncoder,
            p_i_palette: ?*IWICPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThumbnail: *const fn (
            self: *const IWICBitmapEncoder,
            p_i_thumbnail: ?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPreview: *const fn (
            self: *const IWICBitmapEncoder,
            p_i_preview: ?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateNewFrame: *const fn (
            self: *const IWICBitmapEncoder,
            pp_i_frame_encode: ?*?*IWICBitmapFrameEncode,
            pp_i_encoder_options: ?*?*IPropertyBag2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: *const fn (
            self: *const IWICBitmapEncoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMetadataQueryWriter: *const fn (
            self: *const IWICBitmapEncoder,
            pp_i_metadata_query_writer: ?*?*IWICMetadataQueryWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_i_stream_: ?*IStream, cache_option_: WICBitmapEncoderCacheOption) HRESULT {
                return @as(*const IWICBitmapEncoder.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IWICBitmapEncoder, @ptrCast(self)), p_i_stream_, cache_option_);
            }
            pub inline fn getContainerFormat(self: *const T, pguid_container_format_: ?*Guid) HRESULT {
                return @as(*const IWICBitmapEncoder.VTable, @ptrCast(self.vtable)).GetContainerFormat(@as(*const IWICBitmapEncoder, @ptrCast(self)), pguid_container_format_);
            }
            pub inline fn getEncoderInfo(self: *const T, pp_i_encoder_info_: ?*?*IWICBitmapEncoderInfo) HRESULT {
                return @as(*const IWICBitmapEncoder.VTable, @ptrCast(self.vtable)).GetEncoderInfo(@as(*const IWICBitmapEncoder, @ptrCast(self)), pp_i_encoder_info_);
            }
            pub inline fn setColorContexts(self: *const T, c_count_: u32, pp_i_color_context_: [*]?*IWICColorContext) HRESULT {
                return @as(*const IWICBitmapEncoder.VTable, @ptrCast(self.vtable)).SetColorContexts(@as(*const IWICBitmapEncoder, @ptrCast(self)), c_count_, pp_i_color_context_);
            }
            pub inline fn setPalette(self: *const T, p_i_palette_: ?*IWICPalette) HRESULT {
                return @as(*const IWICBitmapEncoder.VTable, @ptrCast(self.vtable)).SetPalette(@as(*const IWICBitmapEncoder, @ptrCast(self)), p_i_palette_);
            }
            pub inline fn setThumbnail(self: *const T, p_i_thumbnail_: ?*IWICBitmapSource) HRESULT {
                return @as(*const IWICBitmapEncoder.VTable, @ptrCast(self.vtable)).SetThumbnail(@as(*const IWICBitmapEncoder, @ptrCast(self)), p_i_thumbnail_);
            }
            pub inline fn setPreview(self: *const T, p_i_preview_: ?*IWICBitmapSource) HRESULT {
                return @as(*const IWICBitmapEncoder.VTable, @ptrCast(self.vtable)).SetPreview(@as(*const IWICBitmapEncoder, @ptrCast(self)), p_i_preview_);
            }
            pub inline fn createNewFrame(self: *const T, pp_i_frame_encode_: ?*?*IWICBitmapFrameEncode, pp_i_encoder_options_: ?*?*IPropertyBag2) HRESULT {
                return @as(*const IWICBitmapEncoder.VTable, @ptrCast(self.vtable)).CreateNewFrame(@as(*const IWICBitmapEncoder, @ptrCast(self)), pp_i_frame_encode_, pp_i_encoder_options_);
            }
            pub inline fn commit(self: *const T) HRESULT {
                return @as(*const IWICBitmapEncoder.VTable, @ptrCast(self.vtable)).Commit(@as(*const IWICBitmapEncoder, @ptrCast(self)));
            }
            pub inline fn getMetadataQueryWriter(self: *const T, pp_i_metadata_query_writer_: ?*?*IWICMetadataQueryWriter) HRESULT {
                return @as(*const IWICBitmapEncoder.VTable, @ptrCast(self.vtable)).GetMetadataQueryWriter(@as(*const IWICBitmapEncoder, @ptrCast(self)), pp_i_metadata_query_writer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICBitmapFrameEncode_Value = Guid.initString("00000105-a8f2-4877-ba0a-fd2b6645fb94");
pub const IID_IWICBitmapFrameEncode = &IID_IWICBitmapFrameEncode_Value;
pub const IWICBitmapFrameEncode = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IWICBitmapFrameEncode,
            p_i_encoder_options: ?*IPropertyBag2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSize: *const fn (
            self: *const IWICBitmapFrameEncode,
            ui_width: u32,
            ui_height: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetResolution: *const fn (
            self: *const IWICBitmapFrameEncode,
            dpi_x: f64,
            dpi_y: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPixelFormat: *const fn (
            self: *const IWICBitmapFrameEncode,
            p_pixel_format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColorContexts: *const fn (
            self: *const IWICBitmapFrameEncode,
            c_count: u32,
            pp_i_color_context: [*]?*IWICColorContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPalette: *const fn (
            self: *const IWICBitmapFrameEncode,
            p_i_palette: ?*IWICPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThumbnail: *const fn (
            self: *const IWICBitmapFrameEncode,
            p_i_thumbnail: ?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WritePixels: *const fn (
            self: *const IWICBitmapFrameEncode,
            line_count: u32,
            cb_stride: u32,
            cb_buffer_size: u32,
            pb_pixels: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteSource: *const fn (
            self: *const IWICBitmapFrameEncode,
            p_i_bitmap_source: ?*IWICBitmapSource,
            prc: ?*WICRect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: *const fn (
            self: *const IWICBitmapFrameEncode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMetadataQueryWriter: *const fn (
            self: *const IWICBitmapFrameEncode,
            pp_i_metadata_query_writer: ?*?*IWICMetadataQueryWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_i_encoder_options_: ?*IPropertyBag2) HRESULT {
                return @as(*const IWICBitmapFrameEncode.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IWICBitmapFrameEncode, @ptrCast(self)), p_i_encoder_options_);
            }
            pub inline fn setSize(self: *const T, ui_width_: u32, ui_height_: u32) HRESULT {
                return @as(*const IWICBitmapFrameEncode.VTable, @ptrCast(self.vtable)).SetSize(@as(*const IWICBitmapFrameEncode, @ptrCast(self)), ui_width_, ui_height_);
            }
            pub inline fn setResolution(self: *const T, dpi_x_: f64, dpi_y_: f64) HRESULT {
                return @as(*const IWICBitmapFrameEncode.VTable, @ptrCast(self.vtable)).SetResolution(@as(*const IWICBitmapFrameEncode, @ptrCast(self)), dpi_x_, dpi_y_);
            }
            pub inline fn setPixelFormat(self: *const T, p_pixel_format_: ?*Guid) HRESULT {
                return @as(*const IWICBitmapFrameEncode.VTable, @ptrCast(self.vtable)).SetPixelFormat(@as(*const IWICBitmapFrameEncode, @ptrCast(self)), p_pixel_format_);
            }
            pub inline fn setColorContexts(self: *const T, c_count_: u32, pp_i_color_context_: [*]?*IWICColorContext) HRESULT {
                return @as(*const IWICBitmapFrameEncode.VTable, @ptrCast(self.vtable)).SetColorContexts(@as(*const IWICBitmapFrameEncode, @ptrCast(self)), c_count_, pp_i_color_context_);
            }
            pub inline fn setPalette(self: *const T, p_i_palette_: ?*IWICPalette) HRESULT {
                return @as(*const IWICBitmapFrameEncode.VTable, @ptrCast(self.vtable)).SetPalette(@as(*const IWICBitmapFrameEncode, @ptrCast(self)), p_i_palette_);
            }
            pub inline fn setThumbnail(self: *const T, p_i_thumbnail_: ?*IWICBitmapSource) HRESULT {
                return @as(*const IWICBitmapFrameEncode.VTable, @ptrCast(self.vtable)).SetThumbnail(@as(*const IWICBitmapFrameEncode, @ptrCast(self)), p_i_thumbnail_);
            }
            pub inline fn writePixels(self: *const T, line_count_: u32, cb_stride_: u32, cb_buffer_size_: u32, pb_pixels_: [*:0]u8) HRESULT {
                return @as(*const IWICBitmapFrameEncode.VTable, @ptrCast(self.vtable)).WritePixels(@as(*const IWICBitmapFrameEncode, @ptrCast(self)), line_count_, cb_stride_, cb_buffer_size_, pb_pixels_);
            }
            pub inline fn writeSource(self: *const T, p_i_bitmap_source_: ?*IWICBitmapSource, prc_: ?*WICRect) HRESULT {
                return @as(*const IWICBitmapFrameEncode.VTable, @ptrCast(self.vtable)).WriteSource(@as(*const IWICBitmapFrameEncode, @ptrCast(self)), p_i_bitmap_source_, prc_);
            }
            pub inline fn commit(self: *const T) HRESULT {
                return @as(*const IWICBitmapFrameEncode.VTable, @ptrCast(self.vtable)).Commit(@as(*const IWICBitmapFrameEncode, @ptrCast(self)));
            }
            pub inline fn getMetadataQueryWriter(self: *const T, pp_i_metadata_query_writer_: ?*?*IWICMetadataQueryWriter) HRESULT {
                return @as(*const IWICBitmapFrameEncode.VTable, @ptrCast(self.vtable)).GetMetadataQueryWriter(@as(*const IWICBitmapFrameEncode, @ptrCast(self)), pp_i_metadata_query_writer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IWICPlanarBitmapFrameEncode_Value = Guid.initString("f928b7b8-2221-40c1-b72e-7e82f1974d1a");
pub const IID_IWICPlanarBitmapFrameEncode = &IID_IWICPlanarBitmapFrameEncode_Value;
pub const IWICPlanarBitmapFrameEncode = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        WritePixels: *const fn (
            self: *const IWICPlanarBitmapFrameEncode,
            line_count: u32,
            p_planes: [*]WICBitmapPlane,
            c_planes: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteSource: *const fn (
            self: *const IWICPlanarBitmapFrameEncode,
            pp_planes: [*]?*IWICBitmapSource,
            c_planes: u32,
            prc_source: ?*WICRect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn writePixels(self: *const T, line_count_: u32, p_planes_: [*]WICBitmapPlane, c_planes_: u32) HRESULT {
                return @as(*const IWICPlanarBitmapFrameEncode.VTable, @ptrCast(self.vtable)).WritePixels(@as(*const IWICPlanarBitmapFrameEncode, @ptrCast(self)), line_count_, p_planes_, c_planes_);
            }
            pub inline fn writeSource(self: *const T, pp_planes_: [*]?*IWICBitmapSource, c_planes_: u32, prc_source_: ?*WICRect) HRESULT {
                return @as(*const IWICPlanarBitmapFrameEncode.VTable, @ptrCast(self.vtable)).WriteSource(@as(*const IWICPlanarBitmapFrameEncode, @ptrCast(self)), pp_planes_, c_planes_, prc_source_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICBitmapDecoder_Value = Guid.initString("9edde9e7-8dee-47ea-99df-e6faf2ed44bf");
pub const IID_IWICBitmapDecoder = &IID_IWICBitmapDecoder_Value;
pub const IWICBitmapDecoder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryCapability: *const fn (
            self: *const IWICBitmapDecoder,
            p_i_stream: ?*IStream,
            pdw_capability: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: *const fn (
            self: *const IWICBitmapDecoder,
            p_i_stream: ?*IStream,
            cache_options: WICDecodeOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContainerFormat: *const fn (
            self: *const IWICBitmapDecoder,
            pguid_container_format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDecoderInfo: *const fn (
            self: *const IWICBitmapDecoder,
            pp_i_decoder_info: ?*?*IWICBitmapDecoderInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyPalette: *const fn (
            self: *const IWICBitmapDecoder,
            p_i_palette: ?*IWICPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMetadataQueryReader: *const fn (
            self: *const IWICBitmapDecoder,
            pp_i_metadata_query_reader: ?*?*IWICMetadataQueryReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreview: *const fn (
            self: *const IWICBitmapDecoder,
            pp_i_bitmap_source: ?*?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorContexts: *const fn (
            self: *const IWICBitmapDecoder,
            c_count: u32,
            pp_i_color_contexts: [*]?*IWICColorContext,
            pc_actual_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetThumbnail: *const fn (
            self: *const IWICBitmapDecoder,
            pp_i_thumbnail: ?*?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFrameCount: *const fn (
            self: *const IWICBitmapDecoder,
            p_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFrame: *const fn (
            self: *const IWICBitmapDecoder,
            index: u32,
            pp_i_bitmap_frame: ?*?*IWICBitmapFrameDecode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn queryCapability(self: *const T, p_i_stream_: ?*IStream, pdw_capability_: ?*u32) HRESULT {
                return @as(*const IWICBitmapDecoder.VTable, @ptrCast(self.vtable)).QueryCapability(@as(*const IWICBitmapDecoder, @ptrCast(self)), p_i_stream_, pdw_capability_);
            }
            pub inline fn initialize(self: *const T, p_i_stream_: ?*IStream, cache_options_: WICDecodeOptions) HRESULT {
                return @as(*const IWICBitmapDecoder.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IWICBitmapDecoder, @ptrCast(self)), p_i_stream_, cache_options_);
            }
            pub inline fn getContainerFormat(self: *const T, pguid_container_format_: ?*Guid) HRESULT {
                return @as(*const IWICBitmapDecoder.VTable, @ptrCast(self.vtable)).GetContainerFormat(@as(*const IWICBitmapDecoder, @ptrCast(self)), pguid_container_format_);
            }
            pub inline fn getDecoderInfo(self: *const T, pp_i_decoder_info_: ?*?*IWICBitmapDecoderInfo) HRESULT {
                return @as(*const IWICBitmapDecoder.VTable, @ptrCast(self.vtable)).GetDecoderInfo(@as(*const IWICBitmapDecoder, @ptrCast(self)), pp_i_decoder_info_);
            }
            pub inline fn copyPalette(self: *const T, p_i_palette_: ?*IWICPalette) HRESULT {
                return @as(*const IWICBitmapDecoder.VTable, @ptrCast(self.vtable)).CopyPalette(@as(*const IWICBitmapDecoder, @ptrCast(self)), p_i_palette_);
            }
            pub inline fn getMetadataQueryReader(self: *const T, pp_i_metadata_query_reader_: ?*?*IWICMetadataQueryReader) HRESULT {
                return @as(*const IWICBitmapDecoder.VTable, @ptrCast(self.vtable)).GetMetadataQueryReader(@as(*const IWICBitmapDecoder, @ptrCast(self)), pp_i_metadata_query_reader_);
            }
            pub inline fn getPreview(self: *const T, pp_i_bitmap_source_: ?*?*IWICBitmapSource) HRESULT {
                return @as(*const IWICBitmapDecoder.VTable, @ptrCast(self.vtable)).GetPreview(@as(*const IWICBitmapDecoder, @ptrCast(self)), pp_i_bitmap_source_);
            }
            pub inline fn getColorContexts(self: *const T, c_count_: u32, pp_i_color_contexts_: [*]?*IWICColorContext, pc_actual_count_: ?*u32) HRESULT {
                return @as(*const IWICBitmapDecoder.VTable, @ptrCast(self.vtable)).GetColorContexts(@as(*const IWICBitmapDecoder, @ptrCast(self)), c_count_, pp_i_color_contexts_, pc_actual_count_);
            }
            pub inline fn getThumbnail(self: *const T, pp_i_thumbnail_: ?*?*IWICBitmapSource) HRESULT {
                return @as(*const IWICBitmapDecoder.VTable, @ptrCast(self.vtable)).GetThumbnail(@as(*const IWICBitmapDecoder, @ptrCast(self)), pp_i_thumbnail_);
            }
            pub inline fn getFrameCount(self: *const T, p_count_: ?*u32) HRESULT {
                return @as(*const IWICBitmapDecoder.VTable, @ptrCast(self.vtable)).GetFrameCount(@as(*const IWICBitmapDecoder, @ptrCast(self)), p_count_);
            }
            pub inline fn getFrame(self: *const T, index_: u32, pp_i_bitmap_frame_: ?*?*IWICBitmapFrameDecode) HRESULT {
                return @as(*const IWICBitmapDecoder.VTable, @ptrCast(self.vtable)).GetFrame(@as(*const IWICBitmapDecoder, @ptrCast(self)), index_, pp_i_bitmap_frame_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICBitmapSourceTransform_Value = Guid.initString("3b16811b-6a43-4ec9-b713-3d5a0c13b940");
pub const IID_IWICBitmapSourceTransform = &IID_IWICBitmapSourceTransform_Value;
pub const IWICBitmapSourceTransform = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CopyPixels: *const fn (
            self: *const IWICBitmapSourceTransform,
            prc: ?*const WICRect,
            ui_width: u32,
            ui_height: u32,
            pguid_dst_format: ?*Guid,
            dst_transform: WICBitmapTransformOptions,
            n_stride: u32,
            cb_buffer_size: u32,
            pb_buffer: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClosestSize: *const fn (
            self: *const IWICBitmapSourceTransform,
            pui_width: ?*u32,
            pui_height: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClosestPixelFormat: *const fn (
            self: *const IWICBitmapSourceTransform,
            pguid_dst_format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoesSupportTransform: *const fn (
            self: *const IWICBitmapSourceTransform,
            dst_transform: WICBitmapTransformOptions,
            pf_is_supported: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn copyPixels(self: *const T, prc_: ?*const WICRect, ui_width_: u32, ui_height_: u32, pguid_dst_format_: ?*Guid, dst_transform_: WICBitmapTransformOptions, n_stride_: u32, cb_buffer_size_: u32, pb_buffer_: [*:0]u8) HRESULT {
                return @as(*const IWICBitmapSourceTransform.VTable, @ptrCast(self.vtable)).CopyPixels(@as(*const IWICBitmapSourceTransform, @ptrCast(self)), prc_, ui_width_, ui_height_, pguid_dst_format_, dst_transform_, n_stride_, cb_buffer_size_, pb_buffer_);
            }
            pub inline fn getClosestSize(self: *const T, pui_width_: ?*u32, pui_height_: ?*u32) HRESULT {
                return @as(*const IWICBitmapSourceTransform.VTable, @ptrCast(self.vtable)).GetClosestSize(@as(*const IWICBitmapSourceTransform, @ptrCast(self)), pui_width_, pui_height_);
            }
            pub inline fn getClosestPixelFormat(self: *const T, pguid_dst_format_: ?*Guid) HRESULT {
                return @as(*const IWICBitmapSourceTransform.VTable, @ptrCast(self.vtable)).GetClosestPixelFormat(@as(*const IWICBitmapSourceTransform, @ptrCast(self)), pguid_dst_format_);
            }
            pub inline fn doesSupportTransform(self: *const T, dst_transform_: WICBitmapTransformOptions, pf_is_supported_: ?*BOOL) HRESULT {
                return @as(*const IWICBitmapSourceTransform.VTable, @ptrCast(self.vtable)).DoesSupportTransform(@as(*const IWICBitmapSourceTransform, @ptrCast(self)), dst_transform_, pf_is_supported_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IWICPlanarBitmapSourceTransform_Value = Guid.initString("3aff9cce-be95-4303-b927-e7d16ff4a613");
pub const IID_IWICPlanarBitmapSourceTransform = &IID_IWICPlanarBitmapSourceTransform_Value;
pub const IWICPlanarBitmapSourceTransform = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DoesSupportTransform: *const fn (
            self: *const IWICPlanarBitmapSourceTransform,
            pui_width: ?*u32,
            pui_height: ?*u32,
            dst_transform: WICBitmapTransformOptions,
            dst_planar_options: WICPlanarOptions,
            pguid_dst_formats: [*]const Guid,
            p_plane_descriptions: [*]WICBitmapPlaneDescription,
            c_planes: u32,
            pf_is_supported: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyPixels: *const fn (
            self: *const IWICPlanarBitmapSourceTransform,
            prc_source: ?*const WICRect,
            ui_width: u32,
            ui_height: u32,
            dst_transform: WICBitmapTransformOptions,
            dst_planar_options: WICPlanarOptions,
            p_dst_planes: [*]const WICBitmapPlane,
            c_planes: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn doesSupportTransform(self: *const T, pui_width_: ?*u32, pui_height_: ?*u32, dst_transform_: WICBitmapTransformOptions, dst_planar_options_: WICPlanarOptions, pguid_dst_formats_: [*]const Guid, p_plane_descriptions_: [*]WICBitmapPlaneDescription, c_planes_: u32, pf_is_supported_: ?*BOOL) HRESULT {
                return @as(*const IWICPlanarBitmapSourceTransform.VTable, @ptrCast(self.vtable)).DoesSupportTransform(@as(*const IWICPlanarBitmapSourceTransform, @ptrCast(self)), pui_width_, pui_height_, dst_transform_, dst_planar_options_, pguid_dst_formats_, p_plane_descriptions_, c_planes_, pf_is_supported_);
            }
            pub inline fn copyPixels(self: *const T, prc_source_: ?*const WICRect, ui_width_: u32, ui_height_: u32, dst_transform_: WICBitmapTransformOptions, dst_planar_options_: WICPlanarOptions, p_dst_planes_: [*]const WICBitmapPlane, c_planes_: u32) HRESULT {
                return @as(*const IWICPlanarBitmapSourceTransform.VTable, @ptrCast(self.vtable)).CopyPixels(@as(*const IWICPlanarBitmapSourceTransform, @ptrCast(self)), prc_source_, ui_width_, ui_height_, dst_transform_, dst_planar_options_, p_dst_planes_, c_planes_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICBitmapFrameDecode_Value = Guid.initString("3b16811b-6a43-4ec9-a813-3d930c13b940");
pub const IID_IWICBitmapFrameDecode = &IID_IWICBitmapFrameDecode_Value;
pub const IWICBitmapFrameDecode = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapSource.VTable,
        GetMetadataQueryReader: *const fn (
            self: *const IWICBitmapFrameDecode,
            pp_i_metadata_query_reader: ?*?*IWICMetadataQueryReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorContexts: *const fn (
            self: *const IWICBitmapFrameDecode,
            c_count: u32,
            pp_i_color_contexts: [*]?*IWICColorContext,
            pc_actual_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetThumbnail: *const fn (
            self: *const IWICBitmapFrameDecode,
            pp_i_thumbnail: ?*?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICBitmapSource.MethodMixin(T);
            pub inline fn getMetadataQueryReader(self: *const T, pp_i_metadata_query_reader_: ?*?*IWICMetadataQueryReader) HRESULT {
                return @as(*const IWICBitmapFrameDecode.VTable, @ptrCast(self.vtable)).GetMetadataQueryReader(@as(*const IWICBitmapFrameDecode, @ptrCast(self)), pp_i_metadata_query_reader_);
            }
            pub inline fn getColorContexts(self: *const T, c_count_: u32, pp_i_color_contexts_: [*]?*IWICColorContext, pc_actual_count_: ?*u32) HRESULT {
                return @as(*const IWICBitmapFrameDecode.VTable, @ptrCast(self.vtable)).GetColorContexts(@as(*const IWICBitmapFrameDecode, @ptrCast(self)), c_count_, pp_i_color_contexts_, pc_actual_count_);
            }
            pub inline fn getThumbnail(self: *const T, pp_i_thumbnail_: ?*?*IWICBitmapSource) HRESULT {
                return @as(*const IWICBitmapFrameDecode.VTable, @ptrCast(self.vtable)).GetThumbnail(@as(*const IWICBitmapFrameDecode, @ptrCast(self)), pp_i_thumbnail_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IWICProgressiveLevelControl_Value = Guid.initString("daac296f-7aa5-4dbf-8d15-225c5976f891");
pub const IID_IWICProgressiveLevelControl = &IID_IWICProgressiveLevelControl_Value;
pub const IWICProgressiveLevelControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLevelCount: *const fn (
            self: *const IWICProgressiveLevelControl,
            pc_levels: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentLevel: *const fn (
            self: *const IWICProgressiveLevelControl,
            pn_level: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCurrentLevel: *const fn (
            self: *const IWICProgressiveLevelControl,
            n_level: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getLevelCount(self: *const T, pc_levels_: ?*u32) HRESULT {
                return @as(*const IWICProgressiveLevelControl.VTable, @ptrCast(self.vtable)).GetLevelCount(@as(*const IWICProgressiveLevelControl, @ptrCast(self)), pc_levels_);
            }
            pub inline fn getCurrentLevel(self: *const T, pn_level_: ?*u32) HRESULT {
                return @as(*const IWICProgressiveLevelControl.VTable, @ptrCast(self.vtable)).GetCurrentLevel(@as(*const IWICProgressiveLevelControl, @ptrCast(self)), pn_level_);
            }
            pub inline fn setCurrentLevel(self: *const T, n_level_: u32) HRESULT {
                return @as(*const IWICProgressiveLevelControl.VTable, @ptrCast(self.vtable)).SetCurrentLevel(@as(*const IWICProgressiveLevelControl, @ptrCast(self)), n_level_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IWICProgressCallback_Value = Guid.initString("4776f9cd-9517-45fa-bf24-e89c5ec5c60c");
pub const IID_IWICProgressCallback = &IID_IWICProgressCallback_Value;
pub const IWICProgressCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Notify: *const fn (
            self: *const IWICProgressCallback,
            u_frame_num: u32,
            operation: WICProgressOperation,
            dbl_progress: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn notify(self: *const T, u_frame_num_: u32, operation_: WICProgressOperation, dbl_progress_: f64) HRESULT {
                return @as(*const IWICProgressCallback.VTable, @ptrCast(self.vtable)).Notify(@as(*const IWICProgressCallback, @ptrCast(self)), u_frame_num_, operation_, dbl_progress_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PFNProgressNotification = *const fn (
    pv_data: ?*anyopaque,
    u_frame_num: u32,
    operation: WICProgressOperation,
    dbl_progress: f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICBitmapCodecProgressNotification_Value = Guid.initString("64c1024e-c3cf-4462-8078-88c2b11c46d9");
pub const IID_IWICBitmapCodecProgressNotification = &IID_IWICBitmapCodecProgressNotification_Value;
pub const IWICBitmapCodecProgressNotification = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterProgressNotification: *const fn (
            self: *const IWICBitmapCodecProgressNotification,
            pfn_progress_notification: ?PFNProgressNotification,
            pv_data: ?*anyopaque,
            dw_progress_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn registerProgressNotification(self: *const T, pfn_progress_notification_: ?PFNProgressNotification, pv_data_: ?*anyopaque, dw_progress_flags_: u32) HRESULT {
                return @as(*const IWICBitmapCodecProgressNotification.VTable, @ptrCast(self.vtable)).RegisterProgressNotification(@as(*const IWICBitmapCodecProgressNotification, @ptrCast(self)), pfn_progress_notification_, pv_data_, dw_progress_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICComponentInfo_Value = Guid.initString("23bc3f0a-698b-4357-886b-f24d50671334");
pub const IID_IWICComponentInfo = &IID_IWICComponentInfo_Value;
pub const IWICComponentInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetComponentType: *const fn (
            self: *const IWICComponentInfo,
            p_type: ?*WICComponentType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCLSID: *const fn (
            self: *const IWICComponentInfo,
            pclsid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSigningStatus: *const fn (
            self: *const IWICComponentInfo,
            p_status: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAuthor: *const fn (
            self: *const IWICComponentInfo,
            cch_author: u32,
            wz_author: [*:0]u16,
            pcch_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVendorGUID: *const fn (
            self: *const IWICComponentInfo,
            pguid_vendor: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVersion: *const fn (
            self: *const IWICComponentInfo,
            cch_version: u32,
            wz_version: [*:0]u16,
            pcch_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpecVersion: *const fn (
            self: *const IWICComponentInfo,
            cch_spec_version: u32,
            wz_spec_version: [*:0]u16,
            pcch_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFriendlyName: *const fn (
            self: *const IWICComponentInfo,
            cch_friendly_name: u32,
            wz_friendly_name: [*:0]u16,
            pcch_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getComponentType(self: *const T, p_type_: ?*WICComponentType) HRESULT {
                return @as(*const IWICComponentInfo.VTable, @ptrCast(self.vtable)).GetComponentType(@as(*const IWICComponentInfo, @ptrCast(self)), p_type_);
            }
            pub inline fn getCLSID(self: *const T, pclsid_: ?*Guid) HRESULT {
                return @as(*const IWICComponentInfo.VTable, @ptrCast(self.vtable)).GetCLSID(@as(*const IWICComponentInfo, @ptrCast(self)), pclsid_);
            }
            pub inline fn getSigningStatus(self: *const T, p_status_: ?*u32) HRESULT {
                return @as(*const IWICComponentInfo.VTable, @ptrCast(self.vtable)).GetSigningStatus(@as(*const IWICComponentInfo, @ptrCast(self)), p_status_);
            }
            pub inline fn getAuthor(self: *const T, cch_author_: u32, wz_author_: [*:0]u16, pcch_actual_: ?*u32) HRESULT {
                return @as(*const IWICComponentInfo.VTable, @ptrCast(self.vtable)).GetAuthor(@as(*const IWICComponentInfo, @ptrCast(self)), cch_author_, wz_author_, pcch_actual_);
            }
            pub inline fn getVendorGUID(self: *const T, pguid_vendor_: ?*Guid) HRESULT {
                return @as(*const IWICComponentInfo.VTable, @ptrCast(self.vtable)).GetVendorGUID(@as(*const IWICComponentInfo, @ptrCast(self)), pguid_vendor_);
            }
            pub inline fn getVersion(self: *const T, cch_version_: u32, wz_version_: [*:0]u16, pcch_actual_: ?*u32) HRESULT {
                return @as(*const IWICComponentInfo.VTable, @ptrCast(self.vtable)).GetVersion(@as(*const IWICComponentInfo, @ptrCast(self)), cch_version_, wz_version_, pcch_actual_);
            }
            pub inline fn getSpecVersion(self: *const T, cch_spec_version_: u32, wz_spec_version_: [*:0]u16, pcch_actual_: ?*u32) HRESULT {
                return @as(*const IWICComponentInfo.VTable, @ptrCast(self.vtable)).GetSpecVersion(@as(*const IWICComponentInfo, @ptrCast(self)), cch_spec_version_, wz_spec_version_, pcch_actual_);
            }
            pub inline fn getFriendlyName(self: *const T, cch_friendly_name_: u32, wz_friendly_name_: [*:0]u16, pcch_actual_: ?*u32) HRESULT {
                return @as(*const IWICComponentInfo.VTable, @ptrCast(self.vtable)).GetFriendlyName(@as(*const IWICComponentInfo, @ptrCast(self)), cch_friendly_name_, wz_friendly_name_, pcch_actual_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICFormatConverterInfo_Value = Guid.initString("9f34fb65-13f4-4f15-bc57-3726b5e53d9f");
pub const IID_IWICFormatConverterInfo = &IID_IWICFormatConverterInfo_Value;
pub const IWICFormatConverterInfo = extern struct {
    pub const VTable = extern struct {
        base: IWICComponentInfo.VTable,
        GetPixelFormats: *const fn (
            self: *const IWICFormatConverterInfo,
            c_formats: u32,
            p_pixel_format_g_u_i_ds: [*]Guid,
            pc_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInstance: *const fn (
            self: *const IWICFormatConverterInfo,
            pp_i_converter: ?*?*IWICFormatConverter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICComponentInfo.MethodMixin(T);
            pub inline fn getPixelFormats(self: *const T, c_formats_: u32, p_pixel_format_g_u_i_ds_: [*]Guid, pc_actual_: ?*u32) HRESULT {
                return @as(*const IWICFormatConverterInfo.VTable, @ptrCast(self.vtable)).GetPixelFormats(@as(*const IWICFormatConverterInfo, @ptrCast(self)), c_formats_, p_pixel_format_g_u_i_ds_, pc_actual_);
            }
            pub inline fn createInstance(self: *const T, pp_i_converter_: ?*?*IWICFormatConverter) HRESULT {
                return @as(*const IWICFormatConverterInfo.VTable, @ptrCast(self.vtable)).CreateInstance(@as(*const IWICFormatConverterInfo, @ptrCast(self)), pp_i_converter_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICBitmapCodecInfo_Value = Guid.initString("e87a44c4-b76e-4c47-8b09-298eb12a2714");
pub const IID_IWICBitmapCodecInfo = &IID_IWICBitmapCodecInfo_Value;
pub const IWICBitmapCodecInfo = extern struct {
    pub const VTable = extern struct {
        base: IWICComponentInfo.VTable,
        GetContainerFormat: *const fn (
            self: *const IWICBitmapCodecInfo,
            pguid_container_format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelFormats: *const fn (
            self: *const IWICBitmapCodecInfo,
            c_formats: u32,
            pguid_pixel_formats: [*]Guid,
            pc_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorManagementVersion: *const fn (
            self: *const IWICBitmapCodecInfo,
            cch_color_management_version: u32,
            wz_color_management_version: [*:0]u16,
            pcch_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceManufacturer: *const fn (
            self: *const IWICBitmapCodecInfo,
            cch_device_manufacturer: u32,
            wz_device_manufacturer: [*:0]u16,
            pcch_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceModels: *const fn (
            self: *const IWICBitmapCodecInfo,
            cch_device_models: u32,
            wz_device_models: [*:0]u16,
            pcch_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMimeTypes: *const fn (
            self: *const IWICBitmapCodecInfo,
            cch_mime_types: u32,
            wz_mime_types: [*:0]u16,
            pcch_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileExtensions: *const fn (
            self: *const IWICBitmapCodecInfo,
            cch_file_extensions: u32,
            wz_file_extensions: [*:0]u16,
            pcch_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoesSupportAnimation: *const fn (
            self: *const IWICBitmapCodecInfo,
            pf_support_animation: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoesSupportChromakey: *const fn (
            self: *const IWICBitmapCodecInfo,
            pf_support_chromakey: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoesSupportLossless: *const fn (
            self: *const IWICBitmapCodecInfo,
            pf_support_lossless: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoesSupportMultiframe: *const fn (
            self: *const IWICBitmapCodecInfo,
            pf_support_multiframe: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MatchesMimeType: *const fn (
            self: *const IWICBitmapCodecInfo,
            wz_mime_type: ?[*:0]const u16,
            pf_matches: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICComponentInfo.MethodMixin(T);
            pub inline fn getContainerFormat(self: *const T, pguid_container_format_: ?*Guid) HRESULT {
                return @as(*const IWICBitmapCodecInfo.VTable, @ptrCast(self.vtable)).GetContainerFormat(@as(*const IWICBitmapCodecInfo, @ptrCast(self)), pguid_container_format_);
            }
            pub inline fn getPixelFormats(self: *const T, c_formats_: u32, pguid_pixel_formats_: [*]Guid, pc_actual_: ?*u32) HRESULT {
                return @as(*const IWICBitmapCodecInfo.VTable, @ptrCast(self.vtable)).GetPixelFormats(@as(*const IWICBitmapCodecInfo, @ptrCast(self)), c_formats_, pguid_pixel_formats_, pc_actual_);
            }
            pub inline fn getColorManagementVersion(self: *const T, cch_color_management_version_: u32, wz_color_management_version_: [*:0]u16, pcch_actual_: ?*u32) HRESULT {
                return @as(*const IWICBitmapCodecInfo.VTable, @ptrCast(self.vtable)).GetColorManagementVersion(@as(*const IWICBitmapCodecInfo, @ptrCast(self)), cch_color_management_version_, wz_color_management_version_, pcch_actual_);
            }
            pub inline fn getDeviceManufacturer(self: *const T, cch_device_manufacturer_: u32, wz_device_manufacturer_: [*:0]u16, pcch_actual_: ?*u32) HRESULT {
                return @as(*const IWICBitmapCodecInfo.VTable, @ptrCast(self.vtable)).GetDeviceManufacturer(@as(*const IWICBitmapCodecInfo, @ptrCast(self)), cch_device_manufacturer_, wz_device_manufacturer_, pcch_actual_);
            }
            pub inline fn getDeviceModels(self: *const T, cch_device_models_: u32, wz_device_models_: [*:0]u16, pcch_actual_: ?*u32) HRESULT {
                return @as(*const IWICBitmapCodecInfo.VTable, @ptrCast(self.vtable)).GetDeviceModels(@as(*const IWICBitmapCodecInfo, @ptrCast(self)), cch_device_models_, wz_device_models_, pcch_actual_);
            }
            pub inline fn getMimeTypes(self: *const T, cch_mime_types_: u32, wz_mime_types_: [*:0]u16, pcch_actual_: ?*u32) HRESULT {
                return @as(*const IWICBitmapCodecInfo.VTable, @ptrCast(self.vtable)).GetMimeTypes(@as(*const IWICBitmapCodecInfo, @ptrCast(self)), cch_mime_types_, wz_mime_types_, pcch_actual_);
            }
            pub inline fn getFileExtensions(self: *const T, cch_file_extensions_: u32, wz_file_extensions_: [*:0]u16, pcch_actual_: ?*u32) HRESULT {
                return @as(*const IWICBitmapCodecInfo.VTable, @ptrCast(self.vtable)).GetFileExtensions(@as(*const IWICBitmapCodecInfo, @ptrCast(self)), cch_file_extensions_, wz_file_extensions_, pcch_actual_);
            }
            pub inline fn doesSupportAnimation(self: *const T, pf_support_animation_: ?*BOOL) HRESULT {
                return @as(*const IWICBitmapCodecInfo.VTable, @ptrCast(self.vtable)).DoesSupportAnimation(@as(*const IWICBitmapCodecInfo, @ptrCast(self)), pf_support_animation_);
            }
            pub inline fn doesSupportChromakey(self: *const T, pf_support_chromakey_: ?*BOOL) HRESULT {
                return @as(*const IWICBitmapCodecInfo.VTable, @ptrCast(self.vtable)).DoesSupportChromakey(@as(*const IWICBitmapCodecInfo, @ptrCast(self)), pf_support_chromakey_);
            }
            pub inline fn doesSupportLossless(self: *const T, pf_support_lossless_: ?*BOOL) HRESULT {
                return @as(*const IWICBitmapCodecInfo.VTable, @ptrCast(self.vtable)).DoesSupportLossless(@as(*const IWICBitmapCodecInfo, @ptrCast(self)), pf_support_lossless_);
            }
            pub inline fn doesSupportMultiframe(self: *const T, pf_support_multiframe_: ?*BOOL) HRESULT {
                return @as(*const IWICBitmapCodecInfo.VTable, @ptrCast(self.vtable)).DoesSupportMultiframe(@as(*const IWICBitmapCodecInfo, @ptrCast(self)), pf_support_multiframe_);
            }
            pub inline fn matchesMimeType(self: *const T, wz_mime_type_: ?[*:0]const u16, pf_matches_: ?*BOOL) HRESULT {
                return @as(*const IWICBitmapCodecInfo.VTable, @ptrCast(self.vtable)).MatchesMimeType(@as(*const IWICBitmapCodecInfo, @ptrCast(self)), wz_mime_type_, pf_matches_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICBitmapEncoderInfo_Value = Guid.initString("94c9b4ee-a09f-4f92-8a1e-4a9bce7e76fb");
pub const IID_IWICBitmapEncoderInfo = &IID_IWICBitmapEncoderInfo_Value;
pub const IWICBitmapEncoderInfo = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapCodecInfo.VTable,
        CreateInstance: *const fn (
            self: *const IWICBitmapEncoderInfo,
            pp_i_bitmap_encoder: ?*?*IWICBitmapEncoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICBitmapCodecInfo.MethodMixin(T);
            pub inline fn createInstance(self: *const T, pp_i_bitmap_encoder_: ?*?*IWICBitmapEncoder) HRESULT {
                return @as(*const IWICBitmapEncoderInfo.VTable, @ptrCast(self.vtable)).CreateInstance(@as(*const IWICBitmapEncoderInfo, @ptrCast(self)), pp_i_bitmap_encoder_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICBitmapDecoderInfo_Value = Guid.initString("d8cd007f-d08f-4191-9bfc-236ea7f0e4b5");
pub const IID_IWICBitmapDecoderInfo = &IID_IWICBitmapDecoderInfo_Value;
pub const IWICBitmapDecoderInfo = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapCodecInfo.VTable,
        GetPatterns: *const fn (
            self: *const IWICBitmapDecoderInfo,
            cb_size_patterns: u32,
            // TODO: what to do with BytesParamIndex 0?
            p_patterns: ?*WICBitmapPattern,
            pc_patterns: ?*u32,
            pcb_patterns_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MatchesPattern: *const fn (
            self: *const IWICBitmapDecoderInfo,
            p_i_stream: ?*IStream,
            pf_matches: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInstance: *const fn (
            self: *const IWICBitmapDecoderInfo,
            pp_i_bitmap_decoder: ?*?*IWICBitmapDecoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICBitmapCodecInfo.MethodMixin(T);
            pub inline fn getPatterns(self: *const T, cb_size_patterns_: u32, p_patterns_: ?*WICBitmapPattern, pc_patterns_: ?*u32, pcb_patterns_actual_: ?*u32) HRESULT {
                return @as(*const IWICBitmapDecoderInfo.VTable, @ptrCast(self.vtable)).GetPatterns(@as(*const IWICBitmapDecoderInfo, @ptrCast(self)), cb_size_patterns_, p_patterns_, pc_patterns_, pcb_patterns_actual_);
            }
            pub inline fn matchesPattern(self: *const T, p_i_stream_: ?*IStream, pf_matches_: ?*BOOL) HRESULT {
                return @as(*const IWICBitmapDecoderInfo.VTable, @ptrCast(self.vtable)).MatchesPattern(@as(*const IWICBitmapDecoderInfo, @ptrCast(self)), p_i_stream_, pf_matches_);
            }
            pub inline fn createInstance(self: *const T, pp_i_bitmap_decoder_: ?*?*IWICBitmapDecoder) HRESULT {
                return @as(*const IWICBitmapDecoderInfo.VTable, @ptrCast(self.vtable)).CreateInstance(@as(*const IWICBitmapDecoderInfo, @ptrCast(self)), pp_i_bitmap_decoder_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICPixelFormatInfo_Value = Guid.initString("e8eda601-3d48-431a-ab44-69059be88bbe");
pub const IID_IWICPixelFormatInfo = &IID_IWICPixelFormatInfo_Value;
pub const IWICPixelFormatInfo = extern struct {
    pub const VTable = extern struct {
        base: IWICComponentInfo.VTable,
        GetFormatGUID: *const fn (
            self: *const IWICPixelFormatInfo,
            p_format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColorContext: *const fn (
            self: *const IWICPixelFormatInfo,
            pp_i_color_context: ?*?*IWICColorContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitsPerPixel: *const fn (
            self: *const IWICPixelFormatInfo,
            pui_bits_per_pixel: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChannelCount: *const fn (
            self: *const IWICPixelFormatInfo,
            pui_channel_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChannelMask: *const fn (
            self: *const IWICPixelFormatInfo,
            ui_channel_index: u32,
            cb_mask_buffer: u32,
            pb_mask_buffer: [*:0]u8,
            pcb_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICComponentInfo.MethodMixin(T);
            pub inline fn getFormatGUID(self: *const T, p_format_: ?*Guid) HRESULT {
                return @as(*const IWICPixelFormatInfo.VTable, @ptrCast(self.vtable)).GetFormatGUID(@as(*const IWICPixelFormatInfo, @ptrCast(self)), p_format_);
            }
            pub inline fn getColorContext(self: *const T, pp_i_color_context_: ?*?*IWICColorContext) HRESULT {
                return @as(*const IWICPixelFormatInfo.VTable, @ptrCast(self.vtable)).GetColorContext(@as(*const IWICPixelFormatInfo, @ptrCast(self)), pp_i_color_context_);
            }
            pub inline fn getBitsPerPixel(self: *const T, pui_bits_per_pixel_: ?*u32) HRESULT {
                return @as(*const IWICPixelFormatInfo.VTable, @ptrCast(self.vtable)).GetBitsPerPixel(@as(*const IWICPixelFormatInfo, @ptrCast(self)), pui_bits_per_pixel_);
            }
            pub inline fn getChannelCount(self: *const T, pui_channel_count_: ?*u32) HRESULT {
                return @as(*const IWICPixelFormatInfo.VTable, @ptrCast(self.vtable)).GetChannelCount(@as(*const IWICPixelFormatInfo, @ptrCast(self)), pui_channel_count_);
            }
            pub inline fn getChannelMask(self: *const T, ui_channel_index_: u32, cb_mask_buffer_: u32, pb_mask_buffer_: [*:0]u8, pcb_actual_: ?*u32) HRESULT {
                return @as(*const IWICPixelFormatInfo.VTable, @ptrCast(self.vtable)).GetChannelMask(@as(*const IWICPixelFormatInfo, @ptrCast(self)), ui_channel_index_, cb_mask_buffer_, pb_mask_buffer_, pcb_actual_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IWICPixelFormatInfo2_Value = Guid.initString("a9db33a2-af5f-43c7-b679-74f5984b5aa4");
pub const IID_IWICPixelFormatInfo2 = &IID_IWICPixelFormatInfo2_Value;
pub const IWICPixelFormatInfo2 = extern struct {
    pub const VTable = extern struct {
        base: IWICPixelFormatInfo.VTable,
        SupportsTransparency: *const fn (
            self: *const IWICPixelFormatInfo2,
            pf_supports_transparency: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumericRepresentation: *const fn (
            self: *const IWICPixelFormatInfo2,
            p_numeric_representation: ?*WICPixelFormatNumericRepresentation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICPixelFormatInfo.MethodMixin(T);
            pub inline fn supportsTransparency(self: *const T, pf_supports_transparency_: ?*BOOL) HRESULT {
                return @as(*const IWICPixelFormatInfo2.VTable, @ptrCast(self.vtable)).SupportsTransparency(@as(*const IWICPixelFormatInfo2, @ptrCast(self)), pf_supports_transparency_);
            }
            pub inline fn getNumericRepresentation(self: *const T, p_numeric_representation_: ?*WICPixelFormatNumericRepresentation) HRESULT {
                return @as(*const IWICPixelFormatInfo2.VTable, @ptrCast(self.vtable)).GetNumericRepresentation(@as(*const IWICPixelFormatInfo2, @ptrCast(self)), p_numeric_representation_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICImagingFactory_Value = Guid.initString("ec5ec8a9-c395-4314-9c77-54d7a935ff70");
pub const IID_IWICImagingFactory = &IID_IWICImagingFactory_Value;
pub const IWICImagingFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateDecoderFromFilename: *const fn (
            self: *const IWICImagingFactory,
            wz_filename: ?[*:0]const u16,
            pguid_vendor: ?*const Guid,
            dw_desired_access: u32,
            metadata_options: WICDecodeOptions,
            pp_i_decoder: ?*?*IWICBitmapDecoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDecoderFromStream: *const fn (
            self: *const IWICImagingFactory,
            p_i_stream: ?*IStream,
            pguid_vendor: ?*const Guid,
            metadata_options: WICDecodeOptions,
            pp_i_decoder: ?*?*IWICBitmapDecoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDecoderFromFileHandle: *const fn (
            self: *const IWICImagingFactory,
            h_file: usize,
            pguid_vendor: ?*const Guid,
            metadata_options: WICDecodeOptions,
            pp_i_decoder: ?*?*IWICBitmapDecoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateComponentInfo: *const fn (
            self: *const IWICImagingFactory,
            clsid_component: ?*const Guid,
            pp_i_info: ?*?*IWICComponentInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDecoder: *const fn (
            self: *const IWICImagingFactory,
            guid_container_format: ?*const Guid,
            pguid_vendor: ?*const Guid,
            pp_i_decoder: ?*?*IWICBitmapDecoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEncoder: *const fn (
            self: *const IWICImagingFactory,
            guid_container_format: ?*const Guid,
            pguid_vendor: ?*const Guid,
            pp_i_encoder: ?*?*IWICBitmapEncoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePalette: *const fn (
            self: *const IWICImagingFactory,
            pp_i_palette: ?*?*IWICPalette,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFormatConverter: *const fn (
            self: *const IWICImagingFactory,
            pp_i_format_converter: ?*?*IWICFormatConverter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapScaler: *const fn (
            self: *const IWICImagingFactory,
            pp_i_bitmap_scaler: ?*?*IWICBitmapScaler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapClipper: *const fn (
            self: *const IWICImagingFactory,
            pp_i_bitmap_clipper: ?*?*IWICBitmapClipper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapFlipRotator: *const fn (
            self: *const IWICImagingFactory,
            pp_i_bitmap_flip_rotator: ?*?*IWICBitmapFlipRotator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStream: *const fn (
            self: *const IWICImagingFactory,
            pp_i_w_i_c_stream: ?*?*IWICStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateColorContext: *const fn (
            self: *const IWICImagingFactory,
            pp_i_w_i_c_color_context: ?*?*IWICColorContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateColorTransformer: *const fn (
            self: *const IWICImagingFactory,
            pp_i_w_i_c_color_transform: ?*?*IWICColorTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmap: *const fn (
            self: *const IWICImagingFactory,
            ui_width: u32,
            ui_height: u32,
            pixel_format: ?*Guid,
            option: WICBitmapCreateCacheOption,
            pp_i_bitmap: ?*?*IWICBitmap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapFromSource: *const fn (
            self: *const IWICImagingFactory,
            p_i_bitmap_source: ?*IWICBitmapSource,
            option: WICBitmapCreateCacheOption,
            pp_i_bitmap: ?*?*IWICBitmap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapFromSourceRect: *const fn (
            self: *const IWICImagingFactory,
            p_i_bitmap_source: ?*IWICBitmapSource,
            x: u32,
            y: u32,
            width: u32,
            height: u32,
            pp_i_bitmap: ?*?*IWICBitmap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapFromMemory: *const fn (
            self: *const IWICImagingFactory,
            ui_width: u32,
            ui_height: u32,
            pixel_format: ?*Guid,
            cb_stride: u32,
            cb_buffer_size: u32,
            pb_buffer: [*:0]u8,
            pp_i_bitmap: ?*?*IWICBitmap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapFromHBITMAP: *const fn (
            self: *const IWICImagingFactory,
            h_bitmap: ?HBITMAP,
            h_palette: ?HPALETTE,
            options: WICBitmapAlphaChannelOption,
            pp_i_bitmap: ?*?*IWICBitmap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapFromHICON: *const fn (
            self: *const IWICImagingFactory,
            h_icon: ?HICON,
            pp_i_bitmap: ?*?*IWICBitmap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateComponentEnumerator: *const fn (
            self: *const IWICImagingFactory,
            component_types: u32,
            options: u32,
            pp_i_enum_unknown: ?*?*IEnumUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFastMetadataEncoderFromDecoder: *const fn (
            self: *const IWICImagingFactory,
            p_i_decoder: ?*IWICBitmapDecoder,
            pp_i_fast_encoder: ?*?*IWICFastMetadataEncoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFastMetadataEncoderFromFrameDecode: *const fn (
            self: *const IWICImagingFactory,
            p_i_frame_decoder: ?*IWICBitmapFrameDecode,
            pp_i_fast_encoder: ?*?*IWICFastMetadataEncoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateQueryWriter: *const fn (
            self: *const IWICImagingFactory,
            guid_metadata_format: ?*const Guid,
            pguid_vendor: ?*const Guid,
            pp_i_query_writer: ?*?*IWICMetadataQueryWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateQueryWriterFromReader: *const fn (
            self: *const IWICImagingFactory,
            p_i_query_reader: ?*IWICMetadataQueryReader,
            pguid_vendor: ?*const Guid,
            pp_i_query_writer: ?*?*IWICMetadataQueryWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createDecoderFromFilename(self: *const T, wz_filename_: ?[*:0]const u16, pguid_vendor_: ?*const Guid, dw_desired_access_: u32, metadata_options_: WICDecodeOptions, pp_i_decoder_: ?*?*IWICBitmapDecoder) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateDecoderFromFilename(@as(*const IWICImagingFactory, @ptrCast(self)), wz_filename_, pguid_vendor_, dw_desired_access_, metadata_options_, pp_i_decoder_);
            }
            pub inline fn createDecoderFromStream(self: *const T, p_i_stream_: ?*IStream, pguid_vendor_: ?*const Guid, metadata_options_: WICDecodeOptions, pp_i_decoder_: ?*?*IWICBitmapDecoder) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateDecoderFromStream(@as(*const IWICImagingFactory, @ptrCast(self)), p_i_stream_, pguid_vendor_, metadata_options_, pp_i_decoder_);
            }
            pub inline fn createDecoderFromFileHandle(self: *const T, h_file_: usize, pguid_vendor_: ?*const Guid, metadata_options_: WICDecodeOptions, pp_i_decoder_: ?*?*IWICBitmapDecoder) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateDecoderFromFileHandle(@as(*const IWICImagingFactory, @ptrCast(self)), h_file_, pguid_vendor_, metadata_options_, pp_i_decoder_);
            }
            pub inline fn createComponentInfo(self: *const T, clsid_component_: ?*const Guid, pp_i_info_: ?*?*IWICComponentInfo) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateComponentInfo(@as(*const IWICImagingFactory, @ptrCast(self)), clsid_component_, pp_i_info_);
            }
            pub inline fn createDecoder(self: *const T, guid_container_format_: ?*const Guid, pguid_vendor_: ?*const Guid, pp_i_decoder_: ?*?*IWICBitmapDecoder) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateDecoder(@as(*const IWICImagingFactory, @ptrCast(self)), guid_container_format_, pguid_vendor_, pp_i_decoder_);
            }
            pub inline fn createEncoder(self: *const T, guid_container_format_: ?*const Guid, pguid_vendor_: ?*const Guid, pp_i_encoder_: ?*?*IWICBitmapEncoder) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateEncoder(@as(*const IWICImagingFactory, @ptrCast(self)), guid_container_format_, pguid_vendor_, pp_i_encoder_);
            }
            pub inline fn createPalette(self: *const T, pp_i_palette_: ?*?*IWICPalette) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreatePalette(@as(*const IWICImagingFactory, @ptrCast(self)), pp_i_palette_);
            }
            pub inline fn createFormatConverter(self: *const T, pp_i_format_converter_: ?*?*IWICFormatConverter) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateFormatConverter(@as(*const IWICImagingFactory, @ptrCast(self)), pp_i_format_converter_);
            }
            pub inline fn createBitmapScaler(self: *const T, pp_i_bitmap_scaler_: ?*?*IWICBitmapScaler) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateBitmapScaler(@as(*const IWICImagingFactory, @ptrCast(self)), pp_i_bitmap_scaler_);
            }
            pub inline fn createBitmapClipper(self: *const T, pp_i_bitmap_clipper_: ?*?*IWICBitmapClipper) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateBitmapClipper(@as(*const IWICImagingFactory, @ptrCast(self)), pp_i_bitmap_clipper_);
            }
            pub inline fn createBitmapFlipRotator(self: *const T, pp_i_bitmap_flip_rotator_: ?*?*IWICBitmapFlipRotator) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateBitmapFlipRotator(@as(*const IWICImagingFactory, @ptrCast(self)), pp_i_bitmap_flip_rotator_);
            }
            pub inline fn createStream(self: *const T, pp_i_w_i_c_stream_: ?*?*IWICStream) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateStream(@as(*const IWICImagingFactory, @ptrCast(self)), pp_i_w_i_c_stream_);
            }
            pub inline fn createColorContext(self: *const T, pp_i_w_i_c_color_context_: ?*?*IWICColorContext) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateColorContext(@as(*const IWICImagingFactory, @ptrCast(self)), pp_i_w_i_c_color_context_);
            }
            pub inline fn createColorTransformer(self: *const T, pp_i_w_i_c_color_transform_: ?*?*IWICColorTransform) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateColorTransformer(@as(*const IWICImagingFactory, @ptrCast(self)), pp_i_w_i_c_color_transform_);
            }
            pub inline fn createBitmap(self: *const T, ui_width_: u32, ui_height_: u32, pixel_format_: ?*Guid, option_: WICBitmapCreateCacheOption, pp_i_bitmap_: ?*?*IWICBitmap) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateBitmap(@as(*const IWICImagingFactory, @ptrCast(self)), ui_width_, ui_height_, pixel_format_, option_, pp_i_bitmap_);
            }
            pub inline fn createBitmapFromSource(self: *const T, p_i_bitmap_source_: ?*IWICBitmapSource, option_: WICBitmapCreateCacheOption, pp_i_bitmap_: ?*?*IWICBitmap) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateBitmapFromSource(@as(*const IWICImagingFactory, @ptrCast(self)), p_i_bitmap_source_, option_, pp_i_bitmap_);
            }
            pub inline fn createBitmapFromSourceRect(self: *const T, p_i_bitmap_source_: ?*IWICBitmapSource, x_: u32, y_: u32, width_: u32, height_: u32, pp_i_bitmap_: ?*?*IWICBitmap) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateBitmapFromSourceRect(@as(*const IWICImagingFactory, @ptrCast(self)), p_i_bitmap_source_, x_, y_, width_, height_, pp_i_bitmap_);
            }
            pub inline fn createBitmapFromMemory(self: *const T, ui_width_: u32, ui_height_: u32, pixel_format_: ?*Guid, cb_stride_: u32, cb_buffer_size_: u32, pb_buffer_: [*:0]u8, pp_i_bitmap_: ?*?*IWICBitmap) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateBitmapFromMemory(@as(*const IWICImagingFactory, @ptrCast(self)), ui_width_, ui_height_, pixel_format_, cb_stride_, cb_buffer_size_, pb_buffer_, pp_i_bitmap_);
            }
            pub inline fn createBitmapFromHBITMAP(self: *const T, h_bitmap_: ?HBITMAP, h_palette_: ?HPALETTE, options_: WICBitmapAlphaChannelOption, pp_i_bitmap_: ?*?*IWICBitmap) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateBitmapFromHBITMAP(@as(*const IWICImagingFactory, @ptrCast(self)), h_bitmap_, h_palette_, options_, pp_i_bitmap_);
            }
            pub inline fn createBitmapFromHICON(self: *const T, h_icon_: ?HICON, pp_i_bitmap_: ?*?*IWICBitmap) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateBitmapFromHICON(@as(*const IWICImagingFactory, @ptrCast(self)), h_icon_, pp_i_bitmap_);
            }
            pub inline fn createComponentEnumerator(self: *const T, component_types_: u32, options_: u32, pp_i_enum_unknown_: ?*?*IEnumUnknown) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateComponentEnumerator(@as(*const IWICImagingFactory, @ptrCast(self)), component_types_, options_, pp_i_enum_unknown_);
            }
            pub inline fn createFastMetadataEncoderFromDecoder(self: *const T, p_i_decoder_: ?*IWICBitmapDecoder, pp_i_fast_encoder_: ?*?*IWICFastMetadataEncoder) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateFastMetadataEncoderFromDecoder(@as(*const IWICImagingFactory, @ptrCast(self)), p_i_decoder_, pp_i_fast_encoder_);
            }
            pub inline fn createFastMetadataEncoderFromFrameDecode(self: *const T, p_i_frame_decoder_: ?*IWICBitmapFrameDecode, pp_i_fast_encoder_: ?*?*IWICFastMetadataEncoder) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateFastMetadataEncoderFromFrameDecode(@as(*const IWICImagingFactory, @ptrCast(self)), p_i_frame_decoder_, pp_i_fast_encoder_);
            }
            pub inline fn createQueryWriter(self: *const T, guid_metadata_format_: ?*const Guid, pguid_vendor_: ?*const Guid, pp_i_query_writer_: ?*?*IWICMetadataQueryWriter) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateQueryWriter(@as(*const IWICImagingFactory, @ptrCast(self)), guid_metadata_format_, pguid_vendor_, pp_i_query_writer_);
            }
            pub inline fn createQueryWriterFromReader(self: *const T, p_i_query_reader_: ?*IWICMetadataQueryReader, pguid_vendor_: ?*const Guid, pp_i_query_writer_: ?*?*IWICMetadataQueryWriter) HRESULT {
                return @as(*const IWICImagingFactory.VTable, @ptrCast(self.vtable)).CreateQueryWriterFromReader(@as(*const IWICImagingFactory, @ptrCast(self)), p_i_query_reader_, pguid_vendor_, pp_i_query_writer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WICTiffCompressionOption = enum(i32) {
    iffCompressionDontCare = 0,
    iffCompressionNone = 1,
    iffCompressionCCITT3 = 2,
    iffCompressionCCITT4 = 3,
    iffCompressionLZW = 4,
    iffCompressionRLE = 5,
    iffCompressionZIP = 6,
    iffCompressionLZWHDifferencing = 7,
    IFFCOMPRESSIONOPTION_FORCE_DWORD = 2147483647,
};
pub const WICTiffCompressionDontCare = WICTiffCompressionOption.iffCompressionDontCare;
pub const WICTiffCompressionNone = WICTiffCompressionOption.iffCompressionNone;
pub const WICTiffCompressionCCITT3 = WICTiffCompressionOption.iffCompressionCCITT3;
pub const WICTiffCompressionCCITT4 = WICTiffCompressionOption.iffCompressionCCITT4;
pub const WICTiffCompressionLZW = WICTiffCompressionOption.iffCompressionLZW;
pub const WICTiffCompressionRLE = WICTiffCompressionOption.iffCompressionRLE;
pub const WICTiffCompressionZIP = WICTiffCompressionOption.iffCompressionZIP;
pub const WICTiffCompressionLZWHDifferencing = WICTiffCompressionOption.iffCompressionLZWHDifferencing;
pub const WICTIFFCOMPRESSIONOPTION_FORCE_DWORD = WICTiffCompressionOption.IFFCOMPRESSIONOPTION_FORCE_DWORD;

pub const WICJpegYCrCbSubsamplingOption = enum(i32) {
    pegYCrCbSubsamplingDefault = 0,
    pegYCrCbSubsampling420 = 1,
    pegYCrCbSubsampling422 = 2,
    pegYCrCbSubsampling444 = 3,
    pegYCrCbSubsampling440 = 4,
    PEGYCRCBSUBSAMPLING_FORCE_DWORD = 2147483647,
};
pub const WICJpegYCrCbSubsamplingDefault = WICJpegYCrCbSubsamplingOption.pegYCrCbSubsamplingDefault;
pub const WICJpegYCrCbSubsampling420 = WICJpegYCrCbSubsamplingOption.pegYCrCbSubsampling420;
pub const WICJpegYCrCbSubsampling422 = WICJpegYCrCbSubsamplingOption.pegYCrCbSubsampling422;
pub const WICJpegYCrCbSubsampling444 = WICJpegYCrCbSubsamplingOption.pegYCrCbSubsampling444;
pub const WICJpegYCrCbSubsampling440 = WICJpegYCrCbSubsamplingOption.pegYCrCbSubsampling440;
pub const WICJPEGYCRCBSUBSAMPLING_FORCE_DWORD = WICJpegYCrCbSubsamplingOption.PEGYCRCBSUBSAMPLING_FORCE_DWORD;

pub const WICPngFilterOption = enum(i32) {
    ngFilterUnspecified = 0,
    ngFilterNone = 1,
    ngFilterSub = 2,
    ngFilterUp = 3,
    ngFilterAverage = 4,
    ngFilterPaeth = 5,
    ngFilterAdaptive = 6,
    NGFILTEROPTION_FORCE_DWORD = 2147483647,
};
pub const WICPngFilterUnspecified = WICPngFilterOption.ngFilterUnspecified;
pub const WICPngFilterNone = WICPngFilterOption.ngFilterNone;
pub const WICPngFilterSub = WICPngFilterOption.ngFilterSub;
pub const WICPngFilterUp = WICPngFilterOption.ngFilterUp;
pub const WICPngFilterAverage = WICPngFilterOption.ngFilterAverage;
pub const WICPngFilterPaeth = WICPngFilterOption.ngFilterPaeth;
pub const WICPngFilterAdaptive = WICPngFilterOption.ngFilterAdaptive;
pub const WICPNGFILTEROPTION_FORCE_DWORD = WICPngFilterOption.NGFILTEROPTION_FORCE_DWORD;

pub const WICNamedWhitePoint = enum(i32) {
    WhitePointDefault = 1,
    WhitePointDaylight = 2,
    WhitePointCloudy = 4,
    WhitePointShade = 8,
    WhitePointTungsten = 16,
    WhitePointFluorescent = 32,
    WhitePointFlash = 64,
    WhitePointUnderwater = 128,
    WhitePointCustom = 256,
    WhitePointAutoWhiteBalance = 512,
    // WhitePointAsShot = 1, this enum value conflicts with WhitePointDefault
    NAMEDWHITEPOINT_FORCE_DWORD = 2147483647,
};
pub const WICWhitePointDefault = WICNamedWhitePoint.WhitePointDefault;
pub const WICWhitePointDaylight = WICNamedWhitePoint.WhitePointDaylight;
pub const WICWhitePointCloudy = WICNamedWhitePoint.WhitePointCloudy;
pub const WICWhitePointShade = WICNamedWhitePoint.WhitePointShade;
pub const WICWhitePointTungsten = WICNamedWhitePoint.WhitePointTungsten;
pub const WICWhitePointFluorescent = WICNamedWhitePoint.WhitePointFluorescent;
pub const WICWhitePointFlash = WICNamedWhitePoint.WhitePointFlash;
pub const WICWhitePointUnderwater = WICNamedWhitePoint.WhitePointUnderwater;
pub const WICWhitePointCustom = WICNamedWhitePoint.WhitePointCustom;
pub const WICWhitePointAutoWhiteBalance = WICNamedWhitePoint.WhitePointAutoWhiteBalance;
pub const WICWhitePointAsShot = WICNamedWhitePoint.WhitePointDefault;
pub const WICNAMEDWHITEPOINT_FORCE_DWORD = WICNamedWhitePoint.NAMEDWHITEPOINT_FORCE_DWORD;

pub const WICRawCapabilities = enum(i32) {
    awCapabilityNotSupported = 0,
    awCapabilityGetSupported = 1,
    awCapabilityFullySupported = 2,
    AWCAPABILITIES_FORCE_DWORD = 2147483647,
};
pub const WICRawCapabilityNotSupported = WICRawCapabilities.awCapabilityNotSupported;
pub const WICRawCapabilityGetSupported = WICRawCapabilities.awCapabilityGetSupported;
pub const WICRawCapabilityFullySupported = WICRawCapabilities.awCapabilityFullySupported;
pub const WICRAWCAPABILITIES_FORCE_DWORD = WICRawCapabilities.AWCAPABILITIES_FORCE_DWORD;

pub const WICRawRotationCapabilities = enum(i32) {
    awRotationCapabilityNotSupported = 0,
    awRotationCapabilityGetSupported = 1,
    awRotationCapabilityNinetyDegreesSupported = 2,
    awRotationCapabilityFullySupported = 3,
    AWROTATIONCAPABILITIES_FORCE_DWORD = 2147483647,
};
pub const WICRawRotationCapabilityNotSupported = WICRawRotationCapabilities.awRotationCapabilityNotSupported;
pub const WICRawRotationCapabilityGetSupported = WICRawRotationCapabilities.awRotationCapabilityGetSupported;
pub const WICRawRotationCapabilityNinetyDegreesSupported = WICRawRotationCapabilities.awRotationCapabilityNinetyDegreesSupported;
pub const WICRawRotationCapabilityFullySupported = WICRawRotationCapabilities.awRotationCapabilityFullySupported;
pub const WICRAWROTATIONCAPABILITIES_FORCE_DWORD = WICRawRotationCapabilities.AWROTATIONCAPABILITIES_FORCE_DWORD;

pub const WICRawCapabilitiesInfo = extern struct {
    cbSize: u32,
    CodecMajorVersion: u32,
    CodecMinorVersion: u32,
    ExposureCompensationSupport: WICRawCapabilities,
    ContrastSupport: WICRawCapabilities,
    RGBWhitePointSupport: WICRawCapabilities,
    NamedWhitePointSupport: WICRawCapabilities,
    NamedWhitePointSupportMask: u32,
    KelvinWhitePointSupport: WICRawCapabilities,
    GammaSupport: WICRawCapabilities,
    TintSupport: WICRawCapabilities,
    SaturationSupport: WICRawCapabilities,
    SharpnessSupport: WICRawCapabilities,
    NoiseReductionSupport: WICRawCapabilities,
    DestinationColorProfileSupport: WICRawCapabilities,
    ToneCurveSupport: WICRawCapabilities,
    RotationSupport: WICRawRotationCapabilities,
    RenderModeSupport: WICRawCapabilities,
};

pub const WICRawParameterSet = enum(i32) {
    AsShotParameterSet = 1,
    UserAdjustedParameterSet = 2,
    AutoAdjustedParameterSet = 3,
    RAWPARAMETERSET_FORCE_DWORD = 2147483647,
};
pub const WICAsShotParameterSet = WICRawParameterSet.AsShotParameterSet;
pub const WICUserAdjustedParameterSet = WICRawParameterSet.UserAdjustedParameterSet;
pub const WICAutoAdjustedParameterSet = WICRawParameterSet.AutoAdjustedParameterSet;
pub const WICRAWPARAMETERSET_FORCE_DWORD = WICRawParameterSet.RAWPARAMETERSET_FORCE_DWORD;

pub const WICRawRenderMode = enum(i32) {
    awRenderModeDraft = 1,
    awRenderModeNormal = 2,
    awRenderModeBestQuality = 3,
    AWRENDERMODE_FORCE_DWORD = 2147483647,
};
pub const WICRawRenderModeDraft = WICRawRenderMode.awRenderModeDraft;
pub const WICRawRenderModeNormal = WICRawRenderMode.awRenderModeNormal;
pub const WICRawRenderModeBestQuality = WICRawRenderMode.awRenderModeBestQuality;
pub const WICRAWRENDERMODE_FORCE_DWORD = WICRawRenderMode.AWRENDERMODE_FORCE_DWORD;

pub const WICRawToneCurvePoint = extern struct {
    Input: f64,
    Output: f64,
};

pub const WICRawToneCurve = extern struct {
    cPoints: u32,
    aPoints: [1]WICRawToneCurvePoint,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICDevelopRawNotificationCallback_Value = Guid.initString("95c75a6e-3e8c-4ec2-85a8-aebcc551e59b");
pub const IID_IWICDevelopRawNotificationCallback = &IID_IWICDevelopRawNotificationCallback_Value;
pub const IWICDevelopRawNotificationCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Notify: *const fn (
            self: *const IWICDevelopRawNotificationCallback,
            notification_mask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn notify(self: *const T, notification_mask_: u32) HRESULT {
                return @as(*const IWICDevelopRawNotificationCallback.VTable, @ptrCast(self.vtable)).Notify(@as(*const IWICDevelopRawNotificationCallback, @ptrCast(self)), notification_mask_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICDevelopRaw_Value = Guid.initString("fbec5e44-f7be-4b65-b7f8-c0c81fef026d");
pub const IID_IWICDevelopRaw = &IID_IWICDevelopRaw_Value;
pub const IWICDevelopRaw = extern struct {
    pub const VTable = extern struct {
        base: IWICBitmapFrameDecode.VTable,
        QueryRawCapabilitiesInfo: *const fn (
            self: *const IWICDevelopRaw,
            p_info: ?*WICRawCapabilitiesInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadParameterSet: *const fn (
            self: *const IWICDevelopRaw,
            parameter_set: WICRawParameterSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentParameterSet: *const fn (
            self: *const IWICDevelopRaw,
            pp_current_parameter_set: ?*?*IPropertyBag2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetExposureCompensation: *const fn (
            self: *const IWICDevelopRaw,
            ev: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExposureCompensation: *const fn (
            self: *const IWICDevelopRaw,
            p_e_v: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWhitePointRGB: *const fn (
            self: *const IWICDevelopRaw,
            red: u32,
            green: u32,
            blue: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWhitePointRGB: *const fn (
            self: *const IWICDevelopRaw,
            p_red: ?*u32,
            p_green: ?*u32,
            p_blue: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNamedWhitePoint: *const fn (
            self: *const IWICDevelopRaw,
            white_point: WICNamedWhitePoint,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNamedWhitePoint: *const fn (
            self: *const IWICDevelopRaw,
            p_white_point: ?*WICNamedWhitePoint,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWhitePointKelvin: *const fn (
            self: *const IWICDevelopRaw,
            white_point_kelvin: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWhitePointKelvin: *const fn (
            self: *const IWICDevelopRaw,
            p_white_point_kelvin: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKelvinRangeInfo: *const fn (
            self: *const IWICDevelopRaw,
            p_min_kelvin_temp: ?*u32,
            p_max_kelvin_temp: ?*u32,
            p_kelvin_temp_step_value: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContrast: *const fn (
            self: *const IWICDevelopRaw,
            contrast: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContrast: *const fn (
            self: *const IWICDevelopRaw,
            p_contrast: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGamma: *const fn (
            self: *const IWICDevelopRaw,
            gamma: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGamma: *const fn (
            self: *const IWICDevelopRaw,
            p_gamma: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSharpness: *const fn (
            self: *const IWICDevelopRaw,
            sharpness: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSharpness: *const fn (
            self: *const IWICDevelopRaw,
            p_sharpness: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSaturation: *const fn (
            self: *const IWICDevelopRaw,
            saturation: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSaturation: *const fn (
            self: *const IWICDevelopRaw,
            p_saturation: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTint: *const fn (
            self: *const IWICDevelopRaw,
            tint: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTint: *const fn (
            self: *const IWICDevelopRaw,
            p_tint: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNoiseReduction: *const fn (
            self: *const IWICDevelopRaw,
            noise_reduction: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNoiseReduction: *const fn (
            self: *const IWICDevelopRaw,
            p_noise_reduction: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDestinationColorContext: *const fn (
            self: *const IWICDevelopRaw,
            p_color_context: ?*IWICColorContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetToneCurve: *const fn (
            self: *const IWICDevelopRaw,
            cb_tone_curve_size: u32,
            // TODO: what to do with BytesParamIndex 0?
            p_tone_curve: ?*const WICRawToneCurve,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetToneCurve: *const fn (
            self: *const IWICDevelopRaw,
            cb_tone_curve_buffer_size: u32,
            // TODO: what to do with BytesParamIndex 0?
            p_tone_curve: ?*WICRawToneCurve,
            pcb_actual_tone_curve_buffer_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRotation: *const fn (
            self: *const IWICDevelopRaw,
            rotation: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRotation: *const fn (
            self: *const IWICDevelopRaw,
            p_rotation: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRenderMode: *const fn (
            self: *const IWICDevelopRaw,
            render_mode: WICRawRenderMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRenderMode: *const fn (
            self: *const IWICDevelopRaw,
            p_render_mode: ?*WICRawRenderMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNotificationCallback: *const fn (
            self: *const IWICDevelopRaw,
            p_callback: ?*IWICDevelopRawNotificationCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICBitmapFrameDecode.MethodMixin(T);
            pub inline fn queryRawCapabilitiesInfo(self: *const T, p_info_: ?*WICRawCapabilitiesInfo) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).QueryRawCapabilitiesInfo(@as(*const IWICDevelopRaw, @ptrCast(self)), p_info_);
            }
            pub inline fn loadParameterSet(self: *const T, parameter_set_: WICRawParameterSet) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).LoadParameterSet(@as(*const IWICDevelopRaw, @ptrCast(self)), parameter_set_);
            }
            pub inline fn getCurrentParameterSet(self: *const T, pp_current_parameter_set_: ?*?*IPropertyBag2) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).GetCurrentParameterSet(@as(*const IWICDevelopRaw, @ptrCast(self)), pp_current_parameter_set_);
            }
            pub inline fn setExposureCompensation(self: *const T, ev_: f64) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).SetExposureCompensation(@as(*const IWICDevelopRaw, @ptrCast(self)), ev_);
            }
            pub inline fn getExposureCompensation(self: *const T, p_e_v_: ?*f64) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).GetExposureCompensation(@as(*const IWICDevelopRaw, @ptrCast(self)), p_e_v_);
            }
            pub inline fn setWhitePointRGB(self: *const T, red_: u32, green_: u32, blue_: u32) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).SetWhitePointRGB(@as(*const IWICDevelopRaw, @ptrCast(self)), red_, green_, blue_);
            }
            pub inline fn getWhitePointRGB(self: *const T, p_red_: ?*u32, p_green_: ?*u32, p_blue_: ?*u32) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).GetWhitePointRGB(@as(*const IWICDevelopRaw, @ptrCast(self)), p_red_, p_green_, p_blue_);
            }
            pub inline fn setNamedWhitePoint(self: *const T, white_point_: WICNamedWhitePoint) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).SetNamedWhitePoint(@as(*const IWICDevelopRaw, @ptrCast(self)), white_point_);
            }
            pub inline fn getNamedWhitePoint(self: *const T, p_white_point_: ?*WICNamedWhitePoint) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).GetNamedWhitePoint(@as(*const IWICDevelopRaw, @ptrCast(self)), p_white_point_);
            }
            pub inline fn setWhitePointKelvin(self: *const T, white_point_kelvin_: u32) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).SetWhitePointKelvin(@as(*const IWICDevelopRaw, @ptrCast(self)), white_point_kelvin_);
            }
            pub inline fn getWhitePointKelvin(self: *const T, p_white_point_kelvin_: ?*u32) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).GetWhitePointKelvin(@as(*const IWICDevelopRaw, @ptrCast(self)), p_white_point_kelvin_);
            }
            pub inline fn getKelvinRangeInfo(self: *const T, p_min_kelvin_temp_: ?*u32, p_max_kelvin_temp_: ?*u32, p_kelvin_temp_step_value_: ?*u32) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).GetKelvinRangeInfo(@as(*const IWICDevelopRaw, @ptrCast(self)), p_min_kelvin_temp_, p_max_kelvin_temp_, p_kelvin_temp_step_value_);
            }
            pub inline fn setContrast(self: *const T, contrast_: f64) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).SetContrast(@as(*const IWICDevelopRaw, @ptrCast(self)), contrast_);
            }
            pub inline fn getContrast(self: *const T, p_contrast_: ?*f64) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).GetContrast(@as(*const IWICDevelopRaw, @ptrCast(self)), p_contrast_);
            }
            pub inline fn setGamma(self: *const T, gamma_: f64) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).SetGamma(@as(*const IWICDevelopRaw, @ptrCast(self)), gamma_);
            }
            pub inline fn getGamma(self: *const T, p_gamma_: ?*f64) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).GetGamma(@as(*const IWICDevelopRaw, @ptrCast(self)), p_gamma_);
            }
            pub inline fn setSharpness(self: *const T, sharpness_: f64) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).SetSharpness(@as(*const IWICDevelopRaw, @ptrCast(self)), sharpness_);
            }
            pub inline fn getSharpness(self: *const T, p_sharpness_: ?*f64) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).GetSharpness(@as(*const IWICDevelopRaw, @ptrCast(self)), p_sharpness_);
            }
            pub inline fn setSaturation(self: *const T, saturation_: f64) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).SetSaturation(@as(*const IWICDevelopRaw, @ptrCast(self)), saturation_);
            }
            pub inline fn getSaturation(self: *const T, p_saturation_: ?*f64) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).GetSaturation(@as(*const IWICDevelopRaw, @ptrCast(self)), p_saturation_);
            }
            pub inline fn setTint(self: *const T, tint_: f64) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).SetTint(@as(*const IWICDevelopRaw, @ptrCast(self)), tint_);
            }
            pub inline fn getTint(self: *const T, p_tint_: ?*f64) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).GetTint(@as(*const IWICDevelopRaw, @ptrCast(self)), p_tint_);
            }
            pub inline fn setNoiseReduction(self: *const T, noise_reduction_: f64) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).SetNoiseReduction(@as(*const IWICDevelopRaw, @ptrCast(self)), noise_reduction_);
            }
            pub inline fn getNoiseReduction(self: *const T, p_noise_reduction_: ?*f64) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).GetNoiseReduction(@as(*const IWICDevelopRaw, @ptrCast(self)), p_noise_reduction_);
            }
            pub inline fn setDestinationColorContext(self: *const T, p_color_context_: ?*IWICColorContext) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).SetDestinationColorContext(@as(*const IWICDevelopRaw, @ptrCast(self)), p_color_context_);
            }
            pub inline fn setToneCurve(self: *const T, cb_tone_curve_size_: u32, p_tone_curve_: ?*const WICRawToneCurve) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).SetToneCurve(@as(*const IWICDevelopRaw, @ptrCast(self)), cb_tone_curve_size_, p_tone_curve_);
            }
            pub inline fn getToneCurve(self: *const T, cb_tone_curve_buffer_size_: u32, p_tone_curve_: ?*WICRawToneCurve, pcb_actual_tone_curve_buffer_size_: ?*u32) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).GetToneCurve(@as(*const IWICDevelopRaw, @ptrCast(self)), cb_tone_curve_buffer_size_, p_tone_curve_, pcb_actual_tone_curve_buffer_size_);
            }
            pub inline fn setRotation(self: *const T, rotation_: f64) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).SetRotation(@as(*const IWICDevelopRaw, @ptrCast(self)), rotation_);
            }
            pub inline fn getRotation(self: *const T, p_rotation_: ?*f64) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).GetRotation(@as(*const IWICDevelopRaw, @ptrCast(self)), p_rotation_);
            }
            pub inline fn setRenderMode(self: *const T, render_mode_: WICRawRenderMode) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).SetRenderMode(@as(*const IWICDevelopRaw, @ptrCast(self)), render_mode_);
            }
            pub inline fn getRenderMode(self: *const T, p_render_mode_: ?*WICRawRenderMode) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).GetRenderMode(@as(*const IWICDevelopRaw, @ptrCast(self)), p_render_mode_);
            }
            pub inline fn setNotificationCallback(self: *const T, p_callback_: ?*IWICDevelopRawNotificationCallback) HRESULT {
                return @as(*const IWICDevelopRaw.VTable, @ptrCast(self.vtable)).SetNotificationCallback(@as(*const IWICDevelopRaw, @ptrCast(self)), p_callback_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WICDdsDimension = enum(i32) {
    dsTexture1D = 0,
    dsTexture2D = 1,
    dsTexture3D = 2,
    dsTextureCube = 3,
    DSTEXTURE_FORCE_DWORD = 2147483647,
};
pub const WICDdsTexture1D = WICDdsDimension.dsTexture1D;
pub const WICDdsTexture2D = WICDdsDimension.dsTexture2D;
pub const WICDdsTexture3D = WICDdsDimension.dsTexture3D;
pub const WICDdsTextureCube = WICDdsDimension.dsTextureCube;
pub const WICDDSTEXTURE_FORCE_DWORD = WICDdsDimension.DSTEXTURE_FORCE_DWORD;

pub const WICDdsAlphaMode = enum(i32) {
    dsAlphaModeUnknown = 0,
    dsAlphaModeStraight = 1,
    dsAlphaModePremultiplied = 2,
    dsAlphaModeOpaque = 3,
    dsAlphaModeCustom = 4,
    DSALPHAMODE_FORCE_DWORD = 2147483647,
};
pub const WICDdsAlphaModeUnknown = WICDdsAlphaMode.dsAlphaModeUnknown;
pub const WICDdsAlphaModeStraight = WICDdsAlphaMode.dsAlphaModeStraight;
pub const WICDdsAlphaModePremultiplied = WICDdsAlphaMode.dsAlphaModePremultiplied;
pub const WICDdsAlphaModeOpaque = WICDdsAlphaMode.dsAlphaModeOpaque;
pub const WICDdsAlphaModeCustom = WICDdsAlphaMode.dsAlphaModeCustom;
pub const WICDDSALPHAMODE_FORCE_DWORD = WICDdsAlphaMode.DSALPHAMODE_FORCE_DWORD;

pub const WICDdsParameters = extern struct {
    Width: u32,
    Height: u32,
    Depth: u32,
    MipLevels: u32,
    ArraySize: u32,
    DxgiFormat: DXGI_FORMAT,
    Dimension: WICDdsDimension,
    AlphaMode: WICDdsAlphaMode,
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IWICDdsDecoder_Value = Guid.initString("409cd537-8532-40cb-9774-e2feb2df4e9c");
pub const IID_IWICDdsDecoder = &IID_IWICDdsDecoder_Value;
pub const IWICDdsDecoder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetParameters: *const fn (
            self: *const IWICDdsDecoder,
            p_parameters: ?*WICDdsParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFrame: *const fn (
            self: *const IWICDdsDecoder,
            array_index: u32,
            mip_level: u32,
            slice_index: u32,
            pp_i_bitmap_frame: ?*?*IWICBitmapFrameDecode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getParameters(self: *const T, p_parameters_: ?*WICDdsParameters) HRESULT {
                return @as(*const IWICDdsDecoder.VTable, @ptrCast(self.vtable)).GetParameters(@as(*const IWICDdsDecoder, @ptrCast(self)), p_parameters_);
            }
            pub inline fn getFrame(self: *const T, array_index_: u32, mip_level_: u32, slice_index_: u32, pp_i_bitmap_frame_: ?*?*IWICBitmapFrameDecode) HRESULT {
                return @as(*const IWICDdsDecoder.VTable, @ptrCast(self.vtable)).GetFrame(@as(*const IWICDdsDecoder, @ptrCast(self)), array_index_, mip_level_, slice_index_, pp_i_bitmap_frame_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IWICDdsEncoder_Value = Guid.initString("5cacdb4c-407e-41b3-b936-d0f010cd6732");
pub const IID_IWICDdsEncoder = &IID_IWICDdsEncoder_Value;
pub const IWICDdsEncoder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetParameters: *const fn (
            self: *const IWICDdsEncoder,
            p_parameters: ?*WICDdsParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParameters: *const fn (
            self: *const IWICDdsEncoder,
            p_parameters: ?*WICDdsParameters,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateNewFrame: *const fn (
            self: *const IWICDdsEncoder,
            pp_i_frame_encode: ?*?*IWICBitmapFrameEncode,
            p_array_index: ?*u32,
            p_mip_level: ?*u32,
            p_slice_index: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setParameters(self: *const T, p_parameters_: ?*WICDdsParameters) HRESULT {
                return @as(*const IWICDdsEncoder.VTable, @ptrCast(self.vtable)).SetParameters(@as(*const IWICDdsEncoder, @ptrCast(self)), p_parameters_);
            }
            pub inline fn getParameters(self: *const T, p_parameters_: ?*WICDdsParameters) HRESULT {
                return @as(*const IWICDdsEncoder.VTable, @ptrCast(self.vtable)).GetParameters(@as(*const IWICDdsEncoder, @ptrCast(self)), p_parameters_);
            }
            pub inline fn createNewFrame(self: *const T, pp_i_frame_encode_: ?*?*IWICBitmapFrameEncode, p_array_index_: ?*u32, p_mip_level_: ?*u32, p_slice_index_: ?*u32) HRESULT {
                return @as(*const IWICDdsEncoder.VTable, @ptrCast(self.vtable)).CreateNewFrame(@as(*const IWICDdsEncoder, @ptrCast(self)), pp_i_frame_encode_, p_array_index_, p_mip_level_, p_slice_index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WICDdsFormatInfo = extern struct {
    DxgiFormat: DXGI_FORMAT,
    BytesPerBlock: u32,
    BlockWidth: u32,
    BlockHeight: u32,
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IWICDdsFrameDecode_Value = Guid.initString("3d4c0c61-18a4-41e4-bd80-481a4fc9f464");
pub const IID_IWICDdsFrameDecode = &IID_IWICDdsFrameDecode_Value;
pub const IWICDdsFrameDecode = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSizeInBlocks: *const fn (
            self: *const IWICDdsFrameDecode,
            p_width_in_blocks: ?*u32,
            p_height_in_blocks: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormatInfo: *const fn (
            self: *const IWICDdsFrameDecode,
            p_format_info: ?*WICDdsFormatInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyBlocks: *const fn (
            self: *const IWICDdsFrameDecode,
            prc_bounds_in_blocks: ?*const WICRect,
            cb_stride: u32,
            cb_buffer_size: u32,
            pb_buffer: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSizeInBlocks(self: *const T, p_width_in_blocks_: ?*u32, p_height_in_blocks_: ?*u32) HRESULT {
                return @as(*const IWICDdsFrameDecode.VTable, @ptrCast(self.vtable)).GetSizeInBlocks(@as(*const IWICDdsFrameDecode, @ptrCast(self)), p_width_in_blocks_, p_height_in_blocks_);
            }
            pub inline fn getFormatInfo(self: *const T, p_format_info_: ?*WICDdsFormatInfo) HRESULT {
                return @as(*const IWICDdsFrameDecode.VTable, @ptrCast(self.vtable)).GetFormatInfo(@as(*const IWICDdsFrameDecode, @ptrCast(self)), p_format_info_);
            }
            pub inline fn copyBlocks(self: *const T, prc_bounds_in_blocks_: ?*const WICRect, cb_stride_: u32, cb_buffer_size_: u32, pb_buffer_: [*:0]u8) HRESULT {
                return @as(*const IWICDdsFrameDecode.VTable, @ptrCast(self.vtable)).CopyBlocks(@as(*const IWICDdsFrameDecode, @ptrCast(self)), prc_bounds_in_blocks_, cb_stride_, cb_buffer_size_, pb_buffer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IWICJpegFrameDecode_Value = Guid.initString("8939f66e-c46a-4c21-a9d1-98b327ce1679");
pub const IID_IWICJpegFrameDecode = &IID_IWICJpegFrameDecode_Value;
pub const IWICJpegFrameDecode = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DoesSupportIndexing: *const fn (
            self: *const IWICJpegFrameDecode,
            pf_indexing_supported: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIndexing: *const fn (
            self: *const IWICJpegFrameDecode,
            options: WICJpegIndexingOptions,
            horizontal_interval_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearIndexing: *const fn (
            self: *const IWICJpegFrameDecode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAcHuffmanTable: *const fn (
            self: *const IWICJpegFrameDecode,
            scan_index: u32,
            table_index: u32,
            p_ac_huffman_table: ?*DXGI_JPEG_AC_HUFFMAN_TABLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDcHuffmanTable: *const fn (
            self: *const IWICJpegFrameDecode,
            scan_index: u32,
            table_index: u32,
            p_dc_huffman_table: ?*DXGI_JPEG_DC_HUFFMAN_TABLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetQuantizationTable: *const fn (
            self: *const IWICJpegFrameDecode,
            scan_index: u32,
            table_index: u32,
            p_quantization_table: ?*DXGI_JPEG_QUANTIZATION_TABLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFrameHeader: *const fn (
            self: *const IWICJpegFrameDecode,
            p_frame_header: ?*WICJpegFrameHeader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScanHeader: *const fn (
            self: *const IWICJpegFrameDecode,
            scan_index: u32,
            p_scan_header: ?*WICJpegScanHeader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyScan: *const fn (
            self: *const IWICJpegFrameDecode,
            scan_index: u32,
            scan_offset: u32,
            cb_scan_data: u32,
            pb_scan_data: [*:0]u8,
            pcb_scan_data_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyMinimalStream: *const fn (
            self: *const IWICJpegFrameDecode,
            stream_offset: u32,
            cb_stream_data: u32,
            pb_stream_data: [*:0]u8,
            pcb_stream_data_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn doesSupportIndexing(self: *const T, pf_indexing_supported_: ?*BOOL) HRESULT {
                return @as(*const IWICJpegFrameDecode.VTable, @ptrCast(self.vtable)).DoesSupportIndexing(@as(*const IWICJpegFrameDecode, @ptrCast(self)), pf_indexing_supported_);
            }
            pub inline fn setIndexing(self: *const T, options_: WICJpegIndexingOptions, horizontal_interval_size_: u32) HRESULT {
                return @as(*const IWICJpegFrameDecode.VTable, @ptrCast(self.vtable)).SetIndexing(@as(*const IWICJpegFrameDecode, @ptrCast(self)), options_, horizontal_interval_size_);
            }
            pub inline fn clearIndexing(self: *const T) HRESULT {
                return @as(*const IWICJpegFrameDecode.VTable, @ptrCast(self.vtable)).ClearIndexing(@as(*const IWICJpegFrameDecode, @ptrCast(self)));
            }
            pub inline fn getAcHuffmanTable(self: *const T, scan_index_: u32, table_index_: u32, p_ac_huffman_table_: ?*DXGI_JPEG_AC_HUFFMAN_TABLE) HRESULT {
                return @as(*const IWICJpegFrameDecode.VTable, @ptrCast(self.vtable)).GetAcHuffmanTable(@as(*const IWICJpegFrameDecode, @ptrCast(self)), scan_index_, table_index_, p_ac_huffman_table_);
            }
            pub inline fn getDcHuffmanTable(self: *const T, scan_index_: u32, table_index_: u32, p_dc_huffman_table_: ?*DXGI_JPEG_DC_HUFFMAN_TABLE) HRESULT {
                return @as(*const IWICJpegFrameDecode.VTable, @ptrCast(self.vtable)).GetDcHuffmanTable(@as(*const IWICJpegFrameDecode, @ptrCast(self)), scan_index_, table_index_, p_dc_huffman_table_);
            }
            pub inline fn getQuantizationTable(self: *const T, scan_index_: u32, table_index_: u32, p_quantization_table_: ?*DXGI_JPEG_QUANTIZATION_TABLE) HRESULT {
                return @as(*const IWICJpegFrameDecode.VTable, @ptrCast(self.vtable)).GetQuantizationTable(@as(*const IWICJpegFrameDecode, @ptrCast(self)), scan_index_, table_index_, p_quantization_table_);
            }
            pub inline fn getFrameHeader(self: *const T, p_frame_header_: ?*WICJpegFrameHeader) HRESULT {
                return @as(*const IWICJpegFrameDecode.VTable, @ptrCast(self.vtable)).GetFrameHeader(@as(*const IWICJpegFrameDecode, @ptrCast(self)), p_frame_header_);
            }
            pub inline fn getScanHeader(self: *const T, scan_index_: u32, p_scan_header_: ?*WICJpegScanHeader) HRESULT {
                return @as(*const IWICJpegFrameDecode.VTable, @ptrCast(self.vtable)).GetScanHeader(@as(*const IWICJpegFrameDecode, @ptrCast(self)), scan_index_, p_scan_header_);
            }
            pub inline fn copyScan(self: *const T, scan_index_: u32, scan_offset_: u32, cb_scan_data_: u32, pb_scan_data_: [*:0]u8, pcb_scan_data_actual_: ?*u32) HRESULT {
                return @as(*const IWICJpegFrameDecode.VTable, @ptrCast(self.vtable)).CopyScan(@as(*const IWICJpegFrameDecode, @ptrCast(self)), scan_index_, scan_offset_, cb_scan_data_, pb_scan_data_, pcb_scan_data_actual_);
            }
            pub inline fn copyMinimalStream(self: *const T, stream_offset_: u32, cb_stream_data_: u32, pb_stream_data_: [*:0]u8, pcb_stream_data_actual_: ?*u32) HRESULT {
                return @as(*const IWICJpegFrameDecode.VTable, @ptrCast(self.vtable)).CopyMinimalStream(@as(*const IWICJpegFrameDecode, @ptrCast(self)), stream_offset_, cb_stream_data_, pb_stream_data_, pcb_stream_data_actual_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IWICJpegFrameEncode_Value = Guid.initString("2f0c601f-d2c6-468c-abfa-49495d983ed1");
pub const IID_IWICJpegFrameEncode = &IID_IWICJpegFrameEncode_Value;
pub const IWICJpegFrameEncode = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAcHuffmanTable: *const fn (
            self: *const IWICJpegFrameEncode,
            scan_index: u32,
            table_index: u32,
            p_ac_huffman_table: ?*DXGI_JPEG_AC_HUFFMAN_TABLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDcHuffmanTable: *const fn (
            self: *const IWICJpegFrameEncode,
            scan_index: u32,
            table_index: u32,
            p_dc_huffman_table: ?*DXGI_JPEG_DC_HUFFMAN_TABLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetQuantizationTable: *const fn (
            self: *const IWICJpegFrameEncode,
            scan_index: u32,
            table_index: u32,
            p_quantization_table: ?*DXGI_JPEG_QUANTIZATION_TABLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteScan: *const fn (
            self: *const IWICJpegFrameEncode,
            cb_scan_data: u32,
            pb_scan_data: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAcHuffmanTable(self: *const T, scan_index_: u32, table_index_: u32, p_ac_huffman_table_: ?*DXGI_JPEG_AC_HUFFMAN_TABLE) HRESULT {
                return @as(*const IWICJpegFrameEncode.VTable, @ptrCast(self.vtable)).GetAcHuffmanTable(@as(*const IWICJpegFrameEncode, @ptrCast(self)), scan_index_, table_index_, p_ac_huffman_table_);
            }
            pub inline fn getDcHuffmanTable(self: *const T, scan_index_: u32, table_index_: u32, p_dc_huffman_table_: ?*DXGI_JPEG_DC_HUFFMAN_TABLE) HRESULT {
                return @as(*const IWICJpegFrameEncode.VTable, @ptrCast(self.vtable)).GetDcHuffmanTable(@as(*const IWICJpegFrameEncode, @ptrCast(self)), scan_index_, table_index_, p_dc_huffman_table_);
            }
            pub inline fn getQuantizationTable(self: *const T, scan_index_: u32, table_index_: u32, p_quantization_table_: ?*DXGI_JPEG_QUANTIZATION_TABLE) HRESULT {
                return @as(*const IWICJpegFrameEncode.VTable, @ptrCast(self.vtable)).GetQuantizationTable(@as(*const IWICJpegFrameEncode, @ptrCast(self)), scan_index_, table_index_, p_quantization_table_);
            }
            pub inline fn writeScan(self: *const T, cb_scan_data_: u32, pb_scan_data_: [*:0]const u8) HRESULT {
                return @as(*const IWICJpegFrameEncode.VTable, @ptrCast(self.vtable)).WriteScan(@as(*const IWICJpegFrameEncode, @ptrCast(self)), cb_scan_data_, pb_scan_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WICMetadataCreationOptions = enum(i32) {
    Default = 0,
    // AllowUnknown = 0, this enum value conflicts with Default
    FailUnknown = 65536,
    Mask = -65536,
};
pub const WICMetadataCreationDefault = WICMetadataCreationOptions.Default;
pub const WICMetadataCreationAllowUnknown = WICMetadataCreationOptions.Default;
pub const WICMetadataCreationFailUnknown = WICMetadataCreationOptions.FailUnknown;
pub const WICMetadataCreationMask = WICMetadataCreationOptions.Mask;

pub const WICPersistOptions = enum(i32) {
    Default = 0,
    // LittleEndian = 0, this enum value conflicts with Default
    BigEndian = 1,
    StrictFormat = 2,
    NoCacheStream = 4,
    PreferUTF8 = 8,
    Mask = 65535,
};
pub const WICPersistOptionDefault = WICPersistOptions.Default;
pub const WICPersistOptionLittleEndian = WICPersistOptions.Default;
pub const WICPersistOptionBigEndian = WICPersistOptions.BigEndian;
pub const WICPersistOptionStrictFormat = WICPersistOptions.StrictFormat;
pub const WICPersistOptionNoCacheStream = WICPersistOptions.NoCacheStream;
pub const WICPersistOptionPreferUTF8 = WICPersistOptions.PreferUTF8;
pub const WICPersistOptionMask = WICPersistOptions.Mask;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICMetadataBlockReader_Value = Guid.initString("feaa2a8d-b3f3-43e4-b25c-d1de990a1ae1");
pub const IID_IWICMetadataBlockReader = &IID_IWICMetadataBlockReader_Value;
pub const IWICMetadataBlockReader = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetContainerFormat: *const fn (
            self: *const IWICMetadataBlockReader,
            pguid_container_format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn (
            self: *const IWICMetadataBlockReader,
            pc_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReaderByIndex: *const fn (
            self: *const IWICMetadataBlockReader,
            n_index: u32,
            pp_i_metadata_reader: ?*?*IWICMetadataReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumerator: *const fn (
            self: *const IWICMetadataBlockReader,
            pp_i_enum_metadata: ?*?*IEnumUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getContainerFormat(self: *const T, pguid_container_format_: ?*Guid) HRESULT {
                return @as(*const IWICMetadataBlockReader.VTable, @ptrCast(self.vtable)).GetContainerFormat(@as(*const IWICMetadataBlockReader, @ptrCast(self)), pguid_container_format_);
            }
            pub inline fn getCount(self: *const T, pc_count_: ?*u32) HRESULT {
                return @as(*const IWICMetadataBlockReader.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IWICMetadataBlockReader, @ptrCast(self)), pc_count_);
            }
            pub inline fn getReaderByIndex(self: *const T, n_index_: u32, pp_i_metadata_reader_: ?*?*IWICMetadataReader) HRESULT {
                return @as(*const IWICMetadataBlockReader.VTable, @ptrCast(self.vtable)).GetReaderByIndex(@as(*const IWICMetadataBlockReader, @ptrCast(self)), n_index_, pp_i_metadata_reader_);
            }
            pub inline fn getEnumerator(self: *const T, pp_i_enum_metadata_: ?*?*IEnumUnknown) HRESULT {
                return @as(*const IWICMetadataBlockReader.VTable, @ptrCast(self.vtable)).GetEnumerator(@as(*const IWICMetadataBlockReader, @ptrCast(self)), pp_i_enum_metadata_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICMetadataBlockWriter_Value = Guid.initString("08fb9676-b444-41e8-8dbe-6a53a542bff1");
pub const IID_IWICMetadataBlockWriter = &IID_IWICMetadataBlockWriter_Value;
pub const IWICMetadataBlockWriter = extern struct {
    pub const VTable = extern struct {
        base: IWICMetadataBlockReader.VTable,
        InitializeFromBlockReader: *const fn (
            self: *const IWICMetadataBlockWriter,
            p_i_m_d_block_reader: ?*IWICMetadataBlockReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWriterByIndex: *const fn (
            self: *const IWICMetadataBlockWriter,
            n_index: u32,
            pp_i_metadata_writer: ?*?*IWICMetadataWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddWriter: *const fn (
            self: *const IWICMetadataBlockWriter,
            p_i_metadata_writer: ?*IWICMetadataWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWriterByIndex: *const fn (
            self: *const IWICMetadataBlockWriter,
            n_index: u32,
            p_i_metadata_writer: ?*IWICMetadataWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveWriterByIndex: *const fn (
            self: *const IWICMetadataBlockWriter,
            n_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICMetadataBlockReader.MethodMixin(T);
            pub inline fn initializeFromBlockReader(self: *const T, p_i_m_d_block_reader_: ?*IWICMetadataBlockReader) HRESULT {
                return @as(*const IWICMetadataBlockWriter.VTable, @ptrCast(self.vtable)).InitializeFromBlockReader(@as(*const IWICMetadataBlockWriter, @ptrCast(self)), p_i_m_d_block_reader_);
            }
            pub inline fn getWriterByIndex(self: *const T, n_index_: u32, pp_i_metadata_writer_: ?*?*IWICMetadataWriter) HRESULT {
                return @as(*const IWICMetadataBlockWriter.VTable, @ptrCast(self.vtable)).GetWriterByIndex(@as(*const IWICMetadataBlockWriter, @ptrCast(self)), n_index_, pp_i_metadata_writer_);
            }
            pub inline fn addWriter(self: *const T, p_i_metadata_writer_: ?*IWICMetadataWriter) HRESULT {
                return @as(*const IWICMetadataBlockWriter.VTable, @ptrCast(self.vtable)).AddWriter(@as(*const IWICMetadataBlockWriter, @ptrCast(self)), p_i_metadata_writer_);
            }
            pub inline fn setWriterByIndex(self: *const T, n_index_: u32, p_i_metadata_writer_: ?*IWICMetadataWriter) HRESULT {
                return @as(*const IWICMetadataBlockWriter.VTable, @ptrCast(self.vtable)).SetWriterByIndex(@as(*const IWICMetadataBlockWriter, @ptrCast(self)), n_index_, p_i_metadata_writer_);
            }
            pub inline fn removeWriterByIndex(self: *const T, n_index_: u32) HRESULT {
                return @as(*const IWICMetadataBlockWriter.VTable, @ptrCast(self.vtable)).RemoveWriterByIndex(@as(*const IWICMetadataBlockWriter, @ptrCast(self)), n_index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICMetadataReader_Value = Guid.initString("9204fe99-d8fc-4fd5-a001-9536b067a899");
pub const IID_IWICMetadataReader = &IID_IWICMetadataReader_Value;
pub const IWICMetadataReader = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMetadataFormat: *const fn (
            self: *const IWICMetadataReader,
            pguid_metadata_format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMetadataHandlerInfo: *const fn (
            self: *const IWICMetadataReader,
            pp_i_handler: ?*?*IWICMetadataHandlerInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn (
            self: *const IWICMetadataReader,
            pc_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValueByIndex: *const fn (
            self: *const IWICMetadataReader,
            n_index: u32,
            pvar_schema: ?*PROPVARIANT,
            pvar_id: ?*PROPVARIANT,
            pvar_value: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn (
            self: *const IWICMetadataReader,
            pvar_schema: ?*const PROPVARIANT,
            pvar_id: ?*const PROPVARIANT,
            pvar_value: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumerator: *const fn (
            self: *const IWICMetadataReader,
            pp_i_enum_metadata: ?*?*IWICEnumMetadataItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getMetadataFormat(self: *const T, pguid_metadata_format_: ?*Guid) HRESULT {
                return @as(*const IWICMetadataReader.VTable, @ptrCast(self.vtable)).GetMetadataFormat(@as(*const IWICMetadataReader, @ptrCast(self)), pguid_metadata_format_);
            }
            pub inline fn getMetadataHandlerInfo(self: *const T, pp_i_handler_: ?*?*IWICMetadataHandlerInfo) HRESULT {
                return @as(*const IWICMetadataReader.VTable, @ptrCast(self.vtable)).GetMetadataHandlerInfo(@as(*const IWICMetadataReader, @ptrCast(self)), pp_i_handler_);
            }
            pub inline fn getCount(self: *const T, pc_count_: ?*u32) HRESULT {
                return @as(*const IWICMetadataReader.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IWICMetadataReader, @ptrCast(self)), pc_count_);
            }
            pub inline fn getValueByIndex(self: *const T, n_index_: u32, pvar_schema_: ?*PROPVARIANT, pvar_id_: ?*PROPVARIANT, pvar_value_: ?*PROPVARIANT) HRESULT {
                return @as(*const IWICMetadataReader.VTable, @ptrCast(self.vtable)).GetValueByIndex(@as(*const IWICMetadataReader, @ptrCast(self)), n_index_, pvar_schema_, pvar_id_, pvar_value_);
            }
            pub inline fn getValue(self: *const T, pvar_schema_: ?*const PROPVARIANT, pvar_id_: ?*const PROPVARIANT, pvar_value_: ?*PROPVARIANT) HRESULT {
                return @as(*const IWICMetadataReader.VTable, @ptrCast(self.vtable)).GetValue(@as(*const IWICMetadataReader, @ptrCast(self)), pvar_schema_, pvar_id_, pvar_value_);
            }
            pub inline fn getEnumerator(self: *const T, pp_i_enum_metadata_: ?*?*IWICEnumMetadataItem) HRESULT {
                return @as(*const IWICMetadataReader.VTable, @ptrCast(self.vtable)).GetEnumerator(@as(*const IWICMetadataReader, @ptrCast(self)), pp_i_enum_metadata_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICMetadataWriter_Value = Guid.initString("f7836e16-3be0-470b-86bb-160d0aecd7de");
pub const IID_IWICMetadataWriter = &IID_IWICMetadataWriter_Value;
pub const IWICMetadataWriter = extern struct {
    pub const VTable = extern struct {
        base: IWICMetadataReader.VTable,
        SetValue: *const fn (
            self: *const IWICMetadataWriter,
            pvar_schema: ?*const PROPVARIANT,
            pvar_id: ?*const PROPVARIANT,
            pvar_value: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValueByIndex: *const fn (
            self: *const IWICMetadataWriter,
            n_index: u32,
            pvar_schema: ?*const PROPVARIANT,
            pvar_id: ?*const PROPVARIANT,
            pvar_value: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveValue: *const fn (
            self: *const IWICMetadataWriter,
            pvar_schema: ?*const PROPVARIANT,
            pvar_id: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveValueByIndex: *const fn (
            self: *const IWICMetadataWriter,
            n_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICMetadataReader.MethodMixin(T);
            pub inline fn setValue(self: *const T, pvar_schema_: ?*const PROPVARIANT, pvar_id_: ?*const PROPVARIANT, pvar_value_: ?*const PROPVARIANT) HRESULT {
                return @as(*const IWICMetadataWriter.VTable, @ptrCast(self.vtable)).SetValue(@as(*const IWICMetadataWriter, @ptrCast(self)), pvar_schema_, pvar_id_, pvar_value_);
            }
            pub inline fn setValueByIndex(self: *const T, n_index_: u32, pvar_schema_: ?*const PROPVARIANT, pvar_id_: ?*const PROPVARIANT, pvar_value_: ?*const PROPVARIANT) HRESULT {
                return @as(*const IWICMetadataWriter.VTable, @ptrCast(self.vtable)).SetValueByIndex(@as(*const IWICMetadataWriter, @ptrCast(self)), n_index_, pvar_schema_, pvar_id_, pvar_value_);
            }
            pub inline fn removeValue(self: *const T, pvar_schema_: ?*const PROPVARIANT, pvar_id_: ?*const PROPVARIANT) HRESULT {
                return @as(*const IWICMetadataWriter.VTable, @ptrCast(self.vtable)).RemoveValue(@as(*const IWICMetadataWriter, @ptrCast(self)), pvar_schema_, pvar_id_);
            }
            pub inline fn removeValueByIndex(self: *const T, n_index_: u32) HRESULT {
                return @as(*const IWICMetadataWriter.VTable, @ptrCast(self.vtable)).RemoveValueByIndex(@as(*const IWICMetadataWriter, @ptrCast(self)), n_index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICStreamProvider_Value = Guid.initString("449494bc-b468-4927-96d7-ba90d31ab505");
pub const IID_IWICStreamProvider = &IID_IWICStreamProvider_Value;
pub const IWICStreamProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetStream: *const fn (
            self: *const IWICStreamProvider,
            pp_i_stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPersistOptions: *const fn (
            self: *const IWICStreamProvider,
            pdw_persist_options: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreferredVendorGUID: *const fn (
            self: *const IWICStreamProvider,
            pguid_preferred_vendor: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshStream: *const fn (
            self: *const IWICStreamProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getStream(self: *const T, pp_i_stream_: ?*?*IStream) HRESULT {
                return @as(*const IWICStreamProvider.VTable, @ptrCast(self.vtable)).GetStream(@as(*const IWICStreamProvider, @ptrCast(self)), pp_i_stream_);
            }
            pub inline fn getPersistOptions(self: *const T, pdw_persist_options_: ?*u32) HRESULT {
                return @as(*const IWICStreamProvider.VTable, @ptrCast(self.vtable)).GetPersistOptions(@as(*const IWICStreamProvider, @ptrCast(self)), pdw_persist_options_);
            }
            pub inline fn getPreferredVendorGUID(self: *const T, pguid_preferred_vendor_: ?*Guid) HRESULT {
                return @as(*const IWICStreamProvider.VTable, @ptrCast(self.vtable)).GetPreferredVendorGUID(@as(*const IWICStreamProvider, @ptrCast(self)), pguid_preferred_vendor_);
            }
            pub inline fn refreshStream(self: *const T) HRESULT {
                return @as(*const IWICStreamProvider.VTable, @ptrCast(self.vtable)).RefreshStream(@as(*const IWICStreamProvider, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICPersistStream_Value = Guid.initString("00675040-6908-45f8-86a3-49c7dfd6d9ad");
pub const IID_IWICPersistStream = &IID_IWICPersistStream_Value;
pub const IWICPersistStream = extern struct {
    pub const VTable = extern struct {
        base: IPersistStream.VTable,
        LoadEx: *const fn (
            self: *const IWICPersistStream,
            p_i_stream: ?*IStream,
            pguid_preferred_vendor: ?*const Guid,
            dw_persist_options: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveEx: *const fn (
            self: *const IWICPersistStream,
            p_i_stream: ?*IStream,
            dw_persist_options: u32,
            f_clear_dirty: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPersistStream.MethodMixin(T);
            pub inline fn loadEx(self: *const T, p_i_stream_: ?*IStream, pguid_preferred_vendor_: ?*const Guid, dw_persist_options_: u32) HRESULT {
                return @as(*const IWICPersistStream.VTable, @ptrCast(self.vtable)).LoadEx(@as(*const IWICPersistStream, @ptrCast(self)), p_i_stream_, pguid_preferred_vendor_, dw_persist_options_);
            }
            pub inline fn saveEx(self: *const T, p_i_stream_: ?*IStream, dw_persist_options_: u32, f_clear_dirty_: BOOL) HRESULT {
                return @as(*const IWICPersistStream.VTable, @ptrCast(self.vtable)).SaveEx(@as(*const IWICPersistStream, @ptrCast(self)), p_i_stream_, dw_persist_options_, f_clear_dirty_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICMetadataHandlerInfo_Value = Guid.initString("aba958bf-c672-44d1-8d61-ce6df2e682c2");
pub const IID_IWICMetadataHandlerInfo = &IID_IWICMetadataHandlerInfo_Value;
pub const IWICMetadataHandlerInfo = extern struct {
    pub const VTable = extern struct {
        base: IWICComponentInfo.VTable,
        GetMetadataFormat: *const fn (
            self: *const IWICMetadataHandlerInfo,
            pguid_metadata_format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContainerFormats: *const fn (
            self: *const IWICMetadataHandlerInfo,
            c_container_formats: u32,
            pguid_container_formats: [*]Guid,
            pcch_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceManufacturer: *const fn (
            self: *const IWICMetadataHandlerInfo,
            cch_device_manufacturer: u32,
            wz_device_manufacturer: [*:0]u16,
            pcch_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceModels: *const fn (
            self: *const IWICMetadataHandlerInfo,
            cch_device_models: u32,
            wz_device_models: [*:0]u16,
            pcch_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoesRequireFullStream: *const fn (
            self: *const IWICMetadataHandlerInfo,
            pf_requires_full_stream: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoesSupportPadding: *const fn (
            self: *const IWICMetadataHandlerInfo,
            pf_supports_padding: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoesRequireFixedSize: *const fn (
            self: *const IWICMetadataHandlerInfo,
            pf_fixed_size: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICComponentInfo.MethodMixin(T);
            pub inline fn getMetadataFormat(self: *const T, pguid_metadata_format_: ?*Guid) HRESULT {
                return @as(*const IWICMetadataHandlerInfo.VTable, @ptrCast(self.vtable)).GetMetadataFormat(@as(*const IWICMetadataHandlerInfo, @ptrCast(self)), pguid_metadata_format_);
            }
            pub inline fn getContainerFormats(self: *const T, c_container_formats_: u32, pguid_container_formats_: [*]Guid, pcch_actual_: ?*u32) HRESULT {
                return @as(*const IWICMetadataHandlerInfo.VTable, @ptrCast(self.vtable)).GetContainerFormats(@as(*const IWICMetadataHandlerInfo, @ptrCast(self)), c_container_formats_, pguid_container_formats_, pcch_actual_);
            }
            pub inline fn getDeviceManufacturer(self: *const T, cch_device_manufacturer_: u32, wz_device_manufacturer_: [*:0]u16, pcch_actual_: ?*u32) HRESULT {
                return @as(*const IWICMetadataHandlerInfo.VTable, @ptrCast(self.vtable)).GetDeviceManufacturer(@as(*const IWICMetadataHandlerInfo, @ptrCast(self)), cch_device_manufacturer_, wz_device_manufacturer_, pcch_actual_);
            }
            pub inline fn getDeviceModels(self: *const T, cch_device_models_: u32, wz_device_models_: [*:0]u16, pcch_actual_: ?*u32) HRESULT {
                return @as(*const IWICMetadataHandlerInfo.VTable, @ptrCast(self.vtable)).GetDeviceModels(@as(*const IWICMetadataHandlerInfo, @ptrCast(self)), cch_device_models_, wz_device_models_, pcch_actual_);
            }
            pub inline fn doesRequireFullStream(self: *const T, pf_requires_full_stream_: ?*BOOL) HRESULT {
                return @as(*const IWICMetadataHandlerInfo.VTable, @ptrCast(self.vtable)).DoesRequireFullStream(@as(*const IWICMetadataHandlerInfo, @ptrCast(self)), pf_requires_full_stream_);
            }
            pub inline fn doesSupportPadding(self: *const T, pf_supports_padding_: ?*BOOL) HRESULT {
                return @as(*const IWICMetadataHandlerInfo.VTable, @ptrCast(self.vtable)).DoesSupportPadding(@as(*const IWICMetadataHandlerInfo, @ptrCast(self)), pf_supports_padding_);
            }
            pub inline fn doesRequireFixedSize(self: *const T, pf_fixed_size_: ?*BOOL) HRESULT {
                return @as(*const IWICMetadataHandlerInfo.VTable, @ptrCast(self.vtable)).DoesRequireFixedSize(@as(*const IWICMetadataHandlerInfo, @ptrCast(self)), pf_fixed_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WICMetadataPattern = extern struct {
    Position: ULARGE_INTEGER,
    Length: u32,
    Pattern: ?*u8,
    Mask: ?*u8,
    DataOffset: ULARGE_INTEGER,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICMetadataReaderInfo_Value = Guid.initString("eebf1f5b-07c1-4447-a3ab-22acaf78a804");
pub const IID_IWICMetadataReaderInfo = &IID_IWICMetadataReaderInfo_Value;
pub const IWICMetadataReaderInfo = extern struct {
    pub const VTable = extern struct {
        base: IWICMetadataHandlerInfo.VTable,
        GetPatterns: *const fn (
            self: *const IWICMetadataReaderInfo,
            guid_container_format: ?*const Guid,
            cb_size: u32,
            // TODO: what to do with BytesParamIndex 1?
            p_pattern: ?*WICMetadataPattern,
            pc_count: ?*u32,
            pcb_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MatchesPattern: *const fn (
            self: *const IWICMetadataReaderInfo,
            guid_container_format: ?*const Guid,
            p_i_stream: ?*IStream,
            pf_matches: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInstance: *const fn (
            self: *const IWICMetadataReaderInfo,
            pp_i_reader: ?*?*IWICMetadataReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICMetadataHandlerInfo.MethodMixin(T);
            pub inline fn getPatterns(self: *const T, guid_container_format_: ?*const Guid, cb_size_: u32, p_pattern_: ?*WICMetadataPattern, pc_count_: ?*u32, pcb_actual_: ?*u32) HRESULT {
                return @as(*const IWICMetadataReaderInfo.VTable, @ptrCast(self.vtable)).GetPatterns(@as(*const IWICMetadataReaderInfo, @ptrCast(self)), guid_container_format_, cb_size_, p_pattern_, pc_count_, pcb_actual_);
            }
            pub inline fn matchesPattern(self: *const T, guid_container_format_: ?*const Guid, p_i_stream_: ?*IStream, pf_matches_: ?*BOOL) HRESULT {
                return @as(*const IWICMetadataReaderInfo.VTable, @ptrCast(self.vtable)).MatchesPattern(@as(*const IWICMetadataReaderInfo, @ptrCast(self)), guid_container_format_, p_i_stream_, pf_matches_);
            }
            pub inline fn createInstance(self: *const T, pp_i_reader_: ?*?*IWICMetadataReader) HRESULT {
                return @as(*const IWICMetadataReaderInfo.VTable, @ptrCast(self.vtable)).CreateInstance(@as(*const IWICMetadataReaderInfo, @ptrCast(self)), pp_i_reader_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WICMetadataHeader = extern struct {
    Position: ULARGE_INTEGER,
    Length: u32,
    Header: ?*u8,
    DataOffset: ULARGE_INTEGER,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICMetadataWriterInfo_Value = Guid.initString("b22e3fba-3925-4323-b5c1-9ebfc430f236");
pub const IID_IWICMetadataWriterInfo = &IID_IWICMetadataWriterInfo_Value;
pub const IWICMetadataWriterInfo = extern struct {
    pub const VTable = extern struct {
        base: IWICMetadataHandlerInfo.VTable,
        GetHeader: *const fn (
            self: *const IWICMetadataWriterInfo,
            guid_container_format: ?*const Guid,
            cb_size: u32,
            // TODO: what to do with BytesParamIndex 1?
            p_header: ?*WICMetadataHeader,
            pcb_actual: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInstance: *const fn (
            self: *const IWICMetadataWriterInfo,
            pp_i_writer: ?*?*IWICMetadataWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICMetadataHandlerInfo.MethodMixin(T);
            pub inline fn getHeader(self: *const T, guid_container_format_: ?*const Guid, cb_size_: u32, p_header_: ?*WICMetadataHeader, pcb_actual_: ?*u32) HRESULT {
                return @as(*const IWICMetadataWriterInfo.VTable, @ptrCast(self.vtable)).GetHeader(@as(*const IWICMetadataWriterInfo, @ptrCast(self)), guid_container_format_, cb_size_, p_header_, pcb_actual_);
            }
            pub inline fn createInstance(self: *const T, pp_i_writer_: ?*?*IWICMetadataWriter) HRESULT {
                return @as(*const IWICMetadataWriterInfo.VTable, @ptrCast(self.vtable)).CreateInstance(@as(*const IWICMetadataWriterInfo, @ptrCast(self)), pp_i_writer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWICComponentFactory_Value = Guid.initString("412d0c3a-9650-44fa-af5b-dd2a06c8e8fb");
pub const IID_IWICComponentFactory = &IID_IWICComponentFactory_Value;
pub const IWICComponentFactory = extern struct {
    pub const VTable = extern struct {
        base: IWICImagingFactory.VTable,
        CreateMetadataReader: *const fn (
            self: *const IWICComponentFactory,
            guid_metadata_format: ?*const Guid,
            pguid_vendor: ?*const Guid,
            dw_options: u32,
            p_i_stream: ?*IStream,
            pp_i_reader: ?*?*IWICMetadataReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMetadataReaderFromContainer: *const fn (
            self: *const IWICComponentFactory,
            guid_container_format: ?*const Guid,
            pguid_vendor: ?*const Guid,
            dw_options: u32,
            p_i_stream: ?*IStream,
            pp_i_reader: ?*?*IWICMetadataReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMetadataWriter: *const fn (
            self: *const IWICComponentFactory,
            guid_metadata_format: ?*const Guid,
            pguid_vendor: ?*const Guid,
            dw_metadata_options: u32,
            pp_i_writer: ?*?*IWICMetadataWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMetadataWriterFromReader: *const fn (
            self: *const IWICComponentFactory,
            p_i_reader: ?*IWICMetadataReader,
            pguid_vendor: ?*const Guid,
            pp_i_writer: ?*?*IWICMetadataWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateQueryReaderFromBlockReader: *const fn (
            self: *const IWICComponentFactory,
            p_i_block_reader: ?*IWICMetadataBlockReader,
            pp_i_query_reader: ?*?*IWICMetadataQueryReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateQueryWriterFromBlockWriter: *const fn (
            self: *const IWICComponentFactory,
            p_i_block_writer: ?*IWICMetadataBlockWriter,
            pp_i_query_writer: ?*?*IWICMetadataQueryWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEncoderPropertyBag: *const fn (
            self: *const IWICComponentFactory,
            pprop_options: [*]PROPBAG2,
            c_count: u32,
            pp_i_property_bag: ?*?*IPropertyBag2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWICImagingFactory.MethodMixin(T);
            pub inline fn createMetadataReader(self: *const T, guid_metadata_format_: ?*const Guid, pguid_vendor_: ?*const Guid, dw_options_: u32, p_i_stream_: ?*IStream, pp_i_reader_: ?*?*IWICMetadataReader) HRESULT {
                return @as(*const IWICComponentFactory.VTable, @ptrCast(self.vtable)).CreateMetadataReader(@as(*const IWICComponentFactory, @ptrCast(self)), guid_metadata_format_, pguid_vendor_, dw_options_, p_i_stream_, pp_i_reader_);
            }
            pub inline fn createMetadataReaderFromContainer(self: *const T, guid_container_format_: ?*const Guid, pguid_vendor_: ?*const Guid, dw_options_: u32, p_i_stream_: ?*IStream, pp_i_reader_: ?*?*IWICMetadataReader) HRESULT {
                return @as(*const IWICComponentFactory.VTable, @ptrCast(self.vtable)).CreateMetadataReaderFromContainer(@as(*const IWICComponentFactory, @ptrCast(self)), guid_container_format_, pguid_vendor_, dw_options_, p_i_stream_, pp_i_reader_);
            }
            pub inline fn createMetadataWriter(self: *const T, guid_metadata_format_: ?*const Guid, pguid_vendor_: ?*const Guid, dw_metadata_options_: u32, pp_i_writer_: ?*?*IWICMetadataWriter) HRESULT {
                return @as(*const IWICComponentFactory.VTable, @ptrCast(self.vtable)).CreateMetadataWriter(@as(*const IWICComponentFactory, @ptrCast(self)), guid_metadata_format_, pguid_vendor_, dw_metadata_options_, pp_i_writer_);
            }
            pub inline fn createMetadataWriterFromReader(self: *const T, p_i_reader_: ?*IWICMetadataReader, pguid_vendor_: ?*const Guid, pp_i_writer_: ?*?*IWICMetadataWriter) HRESULT {
                return @as(*const IWICComponentFactory.VTable, @ptrCast(self.vtable)).CreateMetadataWriterFromReader(@as(*const IWICComponentFactory, @ptrCast(self)), p_i_reader_, pguid_vendor_, pp_i_writer_);
            }
            pub inline fn createQueryReaderFromBlockReader(self: *const T, p_i_block_reader_: ?*IWICMetadataBlockReader, pp_i_query_reader_: ?*?*IWICMetadataQueryReader) HRESULT {
                return @as(*const IWICComponentFactory.VTable, @ptrCast(self.vtable)).CreateQueryReaderFromBlockReader(@as(*const IWICComponentFactory, @ptrCast(self)), p_i_block_reader_, pp_i_query_reader_);
            }
            pub inline fn createQueryWriterFromBlockWriter(self: *const T, p_i_block_writer_: ?*IWICMetadataBlockWriter, pp_i_query_writer_: ?*?*IWICMetadataQueryWriter) HRESULT {
                return @as(*const IWICComponentFactory.VTable, @ptrCast(self.vtable)).CreateQueryWriterFromBlockWriter(@as(*const IWICComponentFactory, @ptrCast(self)), p_i_block_writer_, pp_i_query_writer_);
            }
            pub inline fn createEncoderPropertyBag(self: *const T, pprop_options_: [*]PROPBAG2, c_count_: u32, pp_i_property_bag_: ?*?*IPropertyBag2) HRESULT {
                return @as(*const IWICComponentFactory.VTable, @ptrCast(self.vtable)).CreateEncoderPropertyBag(@as(*const IWICComponentFactory, @ptrCast(self)), pprop_options_, c_count_, pp_i_property_bag_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (9)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "windowscodecs" fn WICConvertBitmapSource(
    dst_format: ?*Guid,
    p_i_src: ?*IWICBitmapSource,
    pp_i_dst: ?*?*IWICBitmapSource,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "windowscodecs" fn WICCreateBitmapFromSection(
    width: u32,
    height: u32,
    pixel_format: ?*Guid,
    h_section: ?HANDLE,
    stride: u32,
    offset: u32,
    pp_i_bitmap: ?*?*IWICBitmap,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "windowscodecs" fn WICCreateBitmapFromSectionEx(
    width: u32,
    height: u32,
    pixel_format: ?*Guid,
    h_section: ?HANDLE,
    stride: u32,
    offset: u32,
    desired_access_level: WICSectionAccessLevel,
    pp_i_bitmap: ?*?*IWICBitmap,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "windowscodecs" fn WICMapGuidToShortName(
    guid: ?*const Guid,
    cch_name: u32,
    wz_name: ?[*:0]u16,
    pcch_actual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "windowscodecs" fn WICMapShortNameToGuid(
    wz_name: ?[*:0]const u16,
    pguid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "windowscodecs" fn WICMapSchemaToName(
    guid_metadata_format: ?*const Guid,
    pwz_schema: ?PWSTR,
    cch_name: u32,
    wz_name: ?[*:0]u16,
    pcch_actual: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "windowscodecs" fn WICMatchMetadataContent(
    guid_container_format: ?*const Guid,
    pguid_vendor: ?*const Guid,
    p_i_stream: ?*IStream,
    pguid_metadata_format: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "windowscodecs" fn WICSerializeMetadataContent(
    guid_container_format: ?*const Guid,
    p_i_writer: ?*IWICMetadataWriter,
    dw_persist_options: u32,
    p_i_stream: ?*IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "windowscodecs" fn WICGetMetadataContentSize(
    guid_container_format: ?*const Guid,
    p_i_writer: ?*IWICMetadataWriter,
    pcb_size: ?*ULARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (22)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const D2D1_PIXEL_FORMAT = @import("../graphics/direct2d/common.zig").D2D1_PIXEL_FORMAT;
const DXGI_FORMAT = @import("../graphics/dxgi/common.zig").DXGI_FORMAT;
const DXGI_JPEG_AC_HUFFMAN_TABLE = @import("../graphics/dxgi/common.zig").DXGI_JPEG_AC_HUFFMAN_TABLE;
const DXGI_JPEG_DC_HUFFMAN_TABLE = @import("../graphics/dxgi/common.zig").DXGI_JPEG_DC_HUFFMAN_TABLE;
const DXGI_JPEG_QUANTIZATION_TABLE = @import("../graphics/dxgi/common.zig").DXGI_JPEG_QUANTIZATION_TABLE;
const HANDLE = @import("../foundation.zig").HANDLE;
const HBITMAP = @import("../graphics/gdi.zig").HBITMAP;
const HICON = @import("../ui/windows_and_messaging.zig").HICON;
const HPALETTE = @import("../graphics/gdi.zig").HPALETTE;
const HRESULT = @import("../foundation.zig").HRESULT;
const IEnumString = @import("../system/com.zig").IEnumString;
const IEnumUnknown = @import("../system/com.zig").IEnumUnknown;
const IPersistStream = @import("../system/com.zig").IPersistStream;
const IPropertyBag2 = @import("../system/com/structured_storage.zig").IPropertyBag2;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const PROPBAG2 = @import("../system/com/structured_storage.zig").PROPBAG2;
const PROPVARIANT = @import("../system/com/structured_storage.zig").PROPVARIANT;
const PWSTR = @import("../foundation.zig").PWSTR;
const ULARGE_INTEGER = @import("../foundation.zig").ULARGE_INTEGER;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PFNProgressNotification")) {
        _ = PFNProgressNotification;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
//--------------------------------------------------------------------------------
// Section: SubModules (1)
//--------------------------------------------------------------------------------
pub const d2d = @import("imaging/d2d.zig");
