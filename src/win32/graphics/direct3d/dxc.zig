//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (41)
//--------------------------------------------------------------------------------
pub const DXC_HASHFLAG_INCLUDES_SOURCE = @as(u32, 1);
pub const DXC_ARG_DEBUG = "-Zi";
pub const DXC_ARG_SKIP_VALIDATION = "-Vd";
pub const DXC_ARG_SKIP_OPTIMIZATIONS = "-Od";
pub const DXC_ARG_PACK_MATRIX_ROW_MAJOR = "-Zpr";
pub const DXC_ARG_PACK_MATRIX_COLUMN_MAJOR = "-Zpc";
pub const DXC_ARG_AVOID_FLOW_CONTROL = "-Gfa";
pub const DXC_ARG_PREFER_FLOW_CONTROL = "-Gfp";
pub const DXC_ARG_ENABLE_STRICTNESS = "-Ges";
pub const DXC_ARG_ENABLE_BACKWARDS_COMPATIBILITY = "-Gec";
pub const DXC_ARG_IEEE_STRICTNESS = "-Gis";
pub const DXC_ARG_OPTIMIZATION_LEVEL0 = "-O0";
pub const DXC_ARG_OPTIMIZATION_LEVEL1 = "-O1";
pub const DXC_ARG_OPTIMIZATION_LEVEL2 = "-O2";
pub const DXC_ARG_OPTIMIZATION_LEVEL3 = "-O3";
pub const DXC_ARG_WARNINGS_ARE_ERRORS = "-WX";
pub const DXC_ARG_RESOURCES_MAY_ALIAS = "-res_may_alias";
pub const DXC_ARG_ALL_RESOURCES_BOUND = "-all_resources_bound";
pub const DXC_ARG_DEBUG_NAME_FOR_SOURCE = "-Zss";
pub const DXC_ARG_DEBUG_NAME_FOR_BINARY = "-Zsb";
pub const DXC_EXTRA_OUTPUT_NAME_STDOUT = "*stdout*";
pub const DXC_EXTRA_OUTPUT_NAME_STDERR = "*stderr*";
pub const DxcValidatorFlags_Default = @as(u32, 0);
pub const DxcValidatorFlags_InPlaceEdit = @as(u32, 1);
pub const DxcValidatorFlags_RootSignatureOnly = @as(u32, 2);
pub const DxcValidatorFlags_ModuleOnly = @as(u32, 4);
pub const DxcValidatorFlags_ValidMask = @as(u32, 7);
pub const DxcVersionInfoFlags_None = @as(u32, 0);
pub const DxcVersionInfoFlags_Debug = @as(u32, 1);
pub const DxcVersionInfoFlags_Internal = @as(u32, 2);
pub const CLSID_DxcCompiler = Guid.initString("73e22d93-e6ce-47f3-b5bf-f0664f39c1b0");
pub const CLSID_DxcLinker = Guid.initString("ef6a8087-b0ea-4d56-9e45-d07e1a8b7806");
pub const CLSID_DxcDiaDataSource = Guid.initString("cd1f6b73-2ab0-484d-8edc-ebe7a43ca09f");
pub const CLSID_DxcCompilerArgs = Guid.initString("3e56ae82-224d-470f-a1a1-fe3016ee9f9d");
pub const CLSID_DxcLibrary = Guid.initString("6245d6af-66e0-48fd-80b4-4d271796748c");
pub const CLSID_DxcValidator = Guid.initString("8ca3e215-f728-4cf3-8cdd-88af917587a1");
pub const CLSID_DxcAssembler = Guid.initString("d728db68-f903-4f80-94cd-dccf76ec7151");
pub const CLSID_DxcContainerReflection = Guid.initString("b9f54489-55b8-400c-ba3a-1675e4728b91");
pub const CLSID_DxcOptimizer = Guid.initString("ae2cd79f-cc22-453f-9b6b-b124e7a5204c");
pub const CLSID_DxcContainerBuilder = Guid.initString("94134294-411f-4574-b4d0-8741e25240d2");
pub const CLSID_DxcPdbUtils = Guid.initString("54621dfb-f2ce-457e-ae8c-ec355faeec7c");

//--------------------------------------------------------------------------------
// Section: Types (34)
//--------------------------------------------------------------------------------
pub const DXC_CP = enum(u32) {
    ACP = 0,
    UTF16 = 1200,
    UTF8 = 65001,
};
pub const DXC_CP_ACP = DXC_CP.ACP;
pub const DXC_CP_UTF16 = DXC_CP.UTF16;
pub const DXC_CP_UTF8 = DXC_CP.UTF8;

pub const DxcCreateInstanceProc = *const fn (
    rclsid: ?*const Guid,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const DxcCreateInstance2Proc = *const fn (
    p_malloc: ?*IMalloc,
    rclsid: ?*const Guid,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const DxcShaderHash = extern struct {
    Flags: u32,
    HashDigest: [16]u8,
};

const IID_IDxcBlob_Value = Guid.initString("8ba5fb08-5195-40e2-ac58-0d989c3a0102");
pub const IID_IDxcBlob = &IID_IDxcBlob_Value;
pub const IDxcBlob = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetBufferPointer: *const fn (
            self: *const IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) ?*anyopaque,
        GetBufferSize: *const fn (
            self: *const IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) usize,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getBufferPointer(self: *const T) ?*anyopaque {
                return @as(*const IDxcBlob.VTable, @ptrCast(self.vtable)).GetBufferPointer(@as(*const IDxcBlob, @ptrCast(self)));
            }
            pub inline fn getBufferSize(self: *const T) usize {
                return @as(*const IDxcBlob.VTable, @ptrCast(self.vtable)).GetBufferSize(@as(*const IDxcBlob, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcBlobEncoding_Value = Guid.initString("7241d424-2646-4191-97c0-98e96e42fc68");
pub const IID_IDxcBlobEncoding = &IID_IDxcBlobEncoding_Value;
pub const IDxcBlobEncoding = extern struct {
    pub const VTable = extern struct {
        base: IDxcBlob.VTable,
        GetEncoding: *const fn (
            self: *const IDxcBlobEncoding,
            p_known: ?*BOOL,
            p_code_page: ?*DXC_CP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDxcBlob.MethodMixin(T);
            pub inline fn getEncoding(self: *const T, p_known_: ?*BOOL, p_code_page_: ?*DXC_CP) HRESULT {
                return @as(*const IDxcBlobEncoding.VTable, @ptrCast(self.vtable)).GetEncoding(@as(*const IDxcBlobEncoding, @ptrCast(self)), p_known_, p_code_page_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcBlobUtf16_Value = Guid.initString("a3f84eab-0faa-497e-a39c-ee6ed60b2d84");
pub const IID_IDxcBlobUtf16 = &IID_IDxcBlobUtf16_Value;
pub const IDxcBlobUtf16 = extern struct {
    pub const VTable = extern struct {
        base: IDxcBlobEncoding.VTable,
        GetStringPointer: *const fn (
            self: *const IDxcBlobUtf16,
        ) callconv(@import("std").os.windows.WINAPI) ?PWSTR,
        GetStringLength: *const fn (
            self: *const IDxcBlobUtf16,
        ) callconv(@import("std").os.windows.WINAPI) usize,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDxcBlobEncoding.MethodMixin(T);
            pub inline fn getStringPointer(self: *const T) ?PWSTR {
                return @as(*const IDxcBlobUtf16.VTable, @ptrCast(self.vtable)).GetStringPointer(@as(*const IDxcBlobUtf16, @ptrCast(self)));
            }
            pub inline fn getStringLength(self: *const T) usize {
                return @as(*const IDxcBlobUtf16.VTable, @ptrCast(self.vtable)).GetStringLength(@as(*const IDxcBlobUtf16, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcBlobUtf8_Value = Guid.initString("3da636c9-ba71-4024-a301-30cbf125305b");
pub const IID_IDxcBlobUtf8 = &IID_IDxcBlobUtf8_Value;
pub const IDxcBlobUtf8 = extern struct {
    pub const VTable = extern struct {
        base: IDxcBlobEncoding.VTable,
        GetStringPointer: *const fn (
            self: *const IDxcBlobUtf8,
        ) callconv(@import("std").os.windows.WINAPI) ?PSTR,
        GetStringLength: *const fn (
            self: *const IDxcBlobUtf8,
        ) callconv(@import("std").os.windows.WINAPI) usize,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDxcBlobEncoding.MethodMixin(T);
            pub inline fn getStringPointer(self: *const T) ?PSTR {
                return @as(*const IDxcBlobUtf8.VTable, @ptrCast(self.vtable)).GetStringPointer(@as(*const IDxcBlobUtf8, @ptrCast(self)));
            }
            pub inline fn getStringLength(self: *const T) usize {
                return @as(*const IDxcBlobUtf8.VTable, @ptrCast(self.vtable)).GetStringLength(@as(*const IDxcBlobUtf8, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcIncludeHandler_Value = Guid.initString("7f61fc7d-950d-467f-b3e3-3c02fb49187c");
pub const IID_IDxcIncludeHandler = &IID_IDxcIncludeHandler_Value;
pub const IDxcIncludeHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LoadSource: *const fn (
            self: *const IDxcIncludeHandler,
            p_filename: ?[*:0]const u16,
            pp_include_source: ?*?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn loadSource(self: *const T, p_filename_: ?[*:0]const u16, pp_include_source_: ?*?*IDxcBlob) HRESULT {
                return @as(*const IDxcIncludeHandler.VTable, @ptrCast(self.vtable)).LoadSource(@as(*const IDxcIncludeHandler, @ptrCast(self)), p_filename_, pp_include_source_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DxcBuffer = extern struct {
    Ptr: ?*const anyopaque,
    Size: usize,
    Encoding: u32,
};

pub const DxcDefine = extern struct {
    Name: ?[*:0]const u16,
    Value: ?[*:0]const u16,
};

const IID_IDxcCompilerArgs_Value = Guid.initString("73effe2a-70dc-45f8-9690-eff64c02429d");
pub const IID_IDxcCompilerArgs = &IID_IDxcCompilerArgs_Value;
pub const IDxcCompilerArgs = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetArguments: *const fn (
            self: *const IDxcCompilerArgs,
        ) callconv(@import("std").os.windows.WINAPI) ?*?PWSTR,
        GetCount: *const fn (
            self: *const IDxcCompilerArgs,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        AddArguments: *const fn (
            self: *const IDxcCompilerArgs,
            p_arguments: ?[*]?PWSTR,
            arg_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddArgumentsUTF8: *const fn (
            self: *const IDxcCompilerArgs,
            p_arguments: ?[*]?PSTR,
            arg_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDefines: *const fn (
            self: *const IDxcCompilerArgs,
            p_defines: [*]const DxcDefine,
            define_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getArguments(self: *const T) ?*?PWSTR {
                return @as(*const IDxcCompilerArgs.VTable, @ptrCast(self.vtable)).GetArguments(@as(*const IDxcCompilerArgs, @ptrCast(self)));
            }
            pub inline fn getCount(self: *const T) u32 {
                return @as(*const IDxcCompilerArgs.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IDxcCompilerArgs, @ptrCast(self)));
            }
            pub inline fn addArguments(self: *const T, p_arguments_: ?[*]?PWSTR, arg_count_: u32) HRESULT {
                return @as(*const IDxcCompilerArgs.VTable, @ptrCast(self.vtable)).AddArguments(@as(*const IDxcCompilerArgs, @ptrCast(self)), p_arguments_, arg_count_);
            }
            pub inline fn addArgumentsUTF8(self: *const T, p_arguments_: ?[*]?PSTR, arg_count_: u32) HRESULT {
                return @as(*const IDxcCompilerArgs.VTable, @ptrCast(self.vtable)).AddArgumentsUTF8(@as(*const IDxcCompilerArgs, @ptrCast(self)), p_arguments_, arg_count_);
            }
            pub inline fn addDefines(self: *const T, p_defines_: [*]const DxcDefine, define_count_: u32) HRESULT {
                return @as(*const IDxcCompilerArgs.VTable, @ptrCast(self.vtable)).AddDefines(@as(*const IDxcCompilerArgs, @ptrCast(self)), p_defines_, define_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcLibrary_Value = Guid.initString("e5204dc7-d18c-4c3c-bdfb-851673980fe7");
pub const IID_IDxcLibrary = &IID_IDxcLibrary_Value;
pub const IDxcLibrary = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetMalloc: *const fn (
            self: *const IDxcLibrary,
            p_malloc: ?*IMalloc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBlobFromBlob: *const fn (
            self: *const IDxcLibrary,
            p_blob: ?*IDxcBlob,
            offset: u32,
            length: u32,
            pp_result: ?*?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBlobFromFile: *const fn (
            self: *const IDxcLibrary,
            p_file_name: ?[*:0]const u16,
            code_page: ?*DXC_CP,
            p_blob_encoding: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBlobWithEncodingFromPinned: *const fn (
            self: *const IDxcLibrary,
            // TODO: what to do with BytesParamIndex 1?
            p_text: ?*const anyopaque,
            size: u32,
            code_page: DXC_CP,
            p_blob_encoding: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBlobWithEncodingOnHeapCopy: *const fn (
            self: *const IDxcLibrary,
            // TODO: what to do with BytesParamIndex 1?
            p_text: ?*const anyopaque,
            size: u32,
            code_page: DXC_CP,
            p_blob_encoding: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBlobWithEncodingOnMalloc: *const fn (
            self: *const IDxcLibrary,
            // TODO: what to do with BytesParamIndex 2?
            p_text: ?*const anyopaque,
            p_i_malloc: ?*IMalloc,
            size: u32,
            code_page: DXC_CP,
            p_blob_encoding: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateIncludeHandler: *const fn (
            self: *const IDxcLibrary,
            pp_result: ?*?*IDxcIncludeHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStreamFromBlobReadOnly: *const fn (
            self: *const IDxcLibrary,
            p_blob: ?*IDxcBlob,
            pp_stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBlobAsUtf8: *const fn (
            self: *const IDxcLibrary,
            p_blob: ?*IDxcBlob,
            p_blob_encoding: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBlobAsUtf16: *const fn (
            self: *const IDxcLibrary,
            p_blob: ?*IDxcBlob,
            p_blob_encoding: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setMalloc(self: *const T, p_malloc_: ?*IMalloc) HRESULT {
                return @as(*const IDxcLibrary.VTable, @ptrCast(self.vtable)).SetMalloc(@as(*const IDxcLibrary, @ptrCast(self)), p_malloc_);
            }
            pub inline fn createBlobFromBlob(self: *const T, p_blob_: ?*IDxcBlob, offset_: u32, length_: u32, pp_result_: ?*?*IDxcBlob) HRESULT {
                return @as(*const IDxcLibrary.VTable, @ptrCast(self.vtable)).CreateBlobFromBlob(@as(*const IDxcLibrary, @ptrCast(self)), p_blob_, offset_, length_, pp_result_);
            }
            pub inline fn createBlobFromFile(self: *const T, p_file_name_: ?[*:0]const u16, code_page_: ?*DXC_CP, p_blob_encoding_: ?*?*IDxcBlobEncoding) HRESULT {
                return @as(*const IDxcLibrary.VTable, @ptrCast(self.vtable)).CreateBlobFromFile(@as(*const IDxcLibrary, @ptrCast(self)), p_file_name_, code_page_, p_blob_encoding_);
            }
            pub inline fn createBlobWithEncodingFromPinned(self: *const T, p_text_: ?*const anyopaque, size_: u32, code_page_: DXC_CP, p_blob_encoding_: ?*?*IDxcBlobEncoding) HRESULT {
                return @as(*const IDxcLibrary.VTable, @ptrCast(self.vtable)).CreateBlobWithEncodingFromPinned(@as(*const IDxcLibrary, @ptrCast(self)), p_text_, size_, code_page_, p_blob_encoding_);
            }
            pub inline fn createBlobWithEncodingOnHeapCopy(self: *const T, p_text_: ?*const anyopaque, size_: u32, code_page_: DXC_CP, p_blob_encoding_: ?*?*IDxcBlobEncoding) HRESULT {
                return @as(*const IDxcLibrary.VTable, @ptrCast(self.vtable)).CreateBlobWithEncodingOnHeapCopy(@as(*const IDxcLibrary, @ptrCast(self)), p_text_, size_, code_page_, p_blob_encoding_);
            }
            pub inline fn createBlobWithEncodingOnMalloc(self: *const T, p_text_: ?*const anyopaque, p_i_malloc_: ?*IMalloc, size_: u32, code_page_: DXC_CP, p_blob_encoding_: ?*?*IDxcBlobEncoding) HRESULT {
                return @as(*const IDxcLibrary.VTable, @ptrCast(self.vtable)).CreateBlobWithEncodingOnMalloc(@as(*const IDxcLibrary, @ptrCast(self)), p_text_, p_i_malloc_, size_, code_page_, p_blob_encoding_);
            }
            pub inline fn createIncludeHandler(self: *const T, pp_result_: ?*?*IDxcIncludeHandler) HRESULT {
                return @as(*const IDxcLibrary.VTable, @ptrCast(self.vtable)).CreateIncludeHandler(@as(*const IDxcLibrary, @ptrCast(self)), pp_result_);
            }
            pub inline fn createStreamFromBlobReadOnly(self: *const T, p_blob_: ?*IDxcBlob, pp_stream_: ?*?*IStream) HRESULT {
                return @as(*const IDxcLibrary.VTable, @ptrCast(self.vtable)).CreateStreamFromBlobReadOnly(@as(*const IDxcLibrary, @ptrCast(self)), p_blob_, pp_stream_);
            }
            pub inline fn getBlobAsUtf8(self: *const T, p_blob_: ?*IDxcBlob, p_blob_encoding_: ?*?*IDxcBlobEncoding) HRESULT {
                return @as(*const IDxcLibrary.VTable, @ptrCast(self.vtable)).GetBlobAsUtf8(@as(*const IDxcLibrary, @ptrCast(self)), p_blob_, p_blob_encoding_);
            }
            pub inline fn getBlobAsUtf16(self: *const T, p_blob_: ?*IDxcBlob, p_blob_encoding_: ?*?*IDxcBlobEncoding) HRESULT {
                return @as(*const IDxcLibrary.VTable, @ptrCast(self.vtable)).GetBlobAsUtf16(@as(*const IDxcLibrary, @ptrCast(self)), p_blob_, p_blob_encoding_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcOperationResult_Value = Guid.initString("cedb484a-d4e9-445a-b991-ca21ca157dc2");
pub const IID_IDxcOperationResult = &IID_IDxcOperationResult_Value;
pub const IDxcOperationResult = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetStatus: *const fn (
            self: *const IDxcOperationResult,
            p_status: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResult: *const fn (
            self: *const IDxcOperationResult,
            pp_result: ?*?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorBuffer: *const fn (
            self: *const IDxcOperationResult,
            pp_errors: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getStatus(self: *const T, p_status_: ?*HRESULT) HRESULT {
                return @as(*const IDxcOperationResult.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IDxcOperationResult, @ptrCast(self)), p_status_);
            }
            pub inline fn getResult(self: *const T, pp_result_: ?*?*IDxcBlob) HRESULT {
                return @as(*const IDxcOperationResult.VTable, @ptrCast(self.vtable)).GetResult(@as(*const IDxcOperationResult, @ptrCast(self)), pp_result_);
            }
            pub inline fn getErrorBuffer(self: *const T, pp_errors_: ?*?*IDxcBlobEncoding) HRESULT {
                return @as(*const IDxcOperationResult.VTable, @ptrCast(self.vtable)).GetErrorBuffer(@as(*const IDxcOperationResult, @ptrCast(self)), pp_errors_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcCompiler_Value = Guid.initString("8c210bf3-011f-4422-8d70-6f9acb8db617");
pub const IID_IDxcCompiler = &IID_IDxcCompiler_Value;
pub const IDxcCompiler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Compile: *const fn (
            self: *const IDxcCompiler,
            p_source: ?*IDxcBlob,
            p_source_name: ?[*:0]const u16,
            p_entry_point: ?[*:0]const u16,
            p_target_profile: ?[*:0]const u16,
            p_arguments: ?[*]?PWSTR,
            arg_count: u32,
            p_defines: [*]const DxcDefine,
            define_count: u32,
            p_include_handler: ?*IDxcIncludeHandler,
            pp_result: ?*?*IDxcOperationResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Preprocess: *const fn (
            self: *const IDxcCompiler,
            p_source: ?*IDxcBlob,
            p_source_name: ?[*:0]const u16,
            p_arguments: ?[*]?PWSTR,
            arg_count: u32,
            p_defines: [*]const DxcDefine,
            define_count: u32,
            p_include_handler: ?*IDxcIncludeHandler,
            pp_result: ?*?*IDxcOperationResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disassemble: *const fn (
            self: *const IDxcCompiler,
            p_source: ?*IDxcBlob,
            pp_disassembly: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn compile(self: *const T, p_source_: ?*IDxcBlob, p_source_name_: ?[*:0]const u16, p_entry_point_: ?[*:0]const u16, p_target_profile_: ?[*:0]const u16, p_arguments_: ?[*]?PWSTR, arg_count_: u32, p_defines_: [*]const DxcDefine, define_count_: u32, p_include_handler_: ?*IDxcIncludeHandler, pp_result_: ?*?*IDxcOperationResult) HRESULT {
                return @as(*const IDxcCompiler.VTable, @ptrCast(self.vtable)).Compile(@as(*const IDxcCompiler, @ptrCast(self)), p_source_, p_source_name_, p_entry_point_, p_target_profile_, p_arguments_, arg_count_, p_defines_, define_count_, p_include_handler_, pp_result_);
            }
            pub inline fn preprocess(self: *const T, p_source_: ?*IDxcBlob, p_source_name_: ?[*:0]const u16, p_arguments_: ?[*]?PWSTR, arg_count_: u32, p_defines_: [*]const DxcDefine, define_count_: u32, p_include_handler_: ?*IDxcIncludeHandler, pp_result_: ?*?*IDxcOperationResult) HRESULT {
                return @as(*const IDxcCompiler.VTable, @ptrCast(self.vtable)).Preprocess(@as(*const IDxcCompiler, @ptrCast(self)), p_source_, p_source_name_, p_arguments_, arg_count_, p_defines_, define_count_, p_include_handler_, pp_result_);
            }
            pub inline fn disassemble(self: *const T, p_source_: ?*IDxcBlob, pp_disassembly_: ?*?*IDxcBlobEncoding) HRESULT {
                return @as(*const IDxcCompiler.VTable, @ptrCast(self.vtable)).Disassemble(@as(*const IDxcCompiler, @ptrCast(self)), p_source_, pp_disassembly_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcCompiler2_Value = Guid.initString("a005a9d9-b8bb-4594-b5c9-0e633bec4d37");
pub const IID_IDxcCompiler2 = &IID_IDxcCompiler2_Value;
pub const IDxcCompiler2 = extern struct {
    pub const VTable = extern struct {
        base: IDxcCompiler.VTable,
        CompileWithDebug: *const fn (
            self: *const IDxcCompiler2,
            p_source: ?*IDxcBlob,
            p_source_name: ?[*:0]const u16,
            p_entry_point: ?[*:0]const u16,
            p_target_profile: ?[*:0]const u16,
            p_arguments: ?[*]?PWSTR,
            arg_count: u32,
            p_defines: [*]const DxcDefine,
            define_count: u32,
            p_include_handler: ?*IDxcIncludeHandler,
            pp_result: ?*?*IDxcOperationResult,
            pp_debug_blob_name: ?*?PWSTR,
            pp_debug_blob: ?*?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDxcCompiler.MethodMixin(T);
            pub inline fn compileWithDebug(self: *const T, p_source_: ?*IDxcBlob, p_source_name_: ?[*:0]const u16, p_entry_point_: ?[*:0]const u16, p_target_profile_: ?[*:0]const u16, p_arguments_: ?[*]?PWSTR, arg_count_: u32, p_defines_: [*]const DxcDefine, define_count_: u32, p_include_handler_: ?*IDxcIncludeHandler, pp_result_: ?*?*IDxcOperationResult, pp_debug_blob_name_: ?*?PWSTR, pp_debug_blob_: ?*?*IDxcBlob) HRESULT {
                return @as(*const IDxcCompiler2.VTable, @ptrCast(self.vtable)).CompileWithDebug(@as(*const IDxcCompiler2, @ptrCast(self)), p_source_, p_source_name_, p_entry_point_, p_target_profile_, p_arguments_, arg_count_, p_defines_, define_count_, p_include_handler_, pp_result_, pp_debug_blob_name_, pp_debug_blob_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcLinker_Value = Guid.initString("f1b5be2a-62dd-4327-a1c2-42ac1e1e78e6");
pub const IID_IDxcLinker = &IID_IDxcLinker_Value;
pub const IDxcLinker = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterLibrary: *const fn (
            self: *const IDxcLinker,
            p_lib_name: ?[*:0]const u16,
            p_lib: ?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Link: *const fn (
            self: *const IDxcLinker,
            p_entry_name: ?[*:0]const u16,
            p_target_profile: ?[*:0]const u16,
            p_lib_names: [*]const ?[*:0]const u16,
            lib_count: u32,
            p_arguments: ?[*]const ?[*:0]const u16,
            arg_count: u32,
            pp_result: ?*?*IDxcOperationResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn registerLibrary(self: *const T, p_lib_name_: ?[*:0]const u16, p_lib_: ?*IDxcBlob) HRESULT {
                return @as(*const IDxcLinker.VTable, @ptrCast(self.vtable)).RegisterLibrary(@as(*const IDxcLinker, @ptrCast(self)), p_lib_name_, p_lib_);
            }
            pub inline fn link(self: *const T, p_entry_name_: ?[*:0]const u16, p_target_profile_: ?[*:0]const u16, p_lib_names_: [*]const ?[*:0]const u16, lib_count_: u32, p_arguments_: ?[*]const ?[*:0]const u16, arg_count_: u32, pp_result_: ?*?*IDxcOperationResult) HRESULT {
                return @as(*const IDxcLinker.VTable, @ptrCast(self.vtable)).Link(@as(*const IDxcLinker, @ptrCast(self)), p_entry_name_, p_target_profile_, p_lib_names_, lib_count_, p_arguments_, arg_count_, pp_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcUtils_Value = Guid.initString("4605c4cb-2019-492a-ada4-65f20bb7d67f");
pub const IID_IDxcUtils = &IID_IDxcUtils_Value;
pub const IDxcUtils = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateBlobFromBlob: *const fn (
            self: *const IDxcUtils,
            p_blob: ?*IDxcBlob,
            offset: u32,
            length: u32,
            pp_result: ?*?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBlobFromPinned: *const fn (
            self: *const IDxcUtils,
            // TODO: what to do with BytesParamIndex 1?
            p_data: ?*const anyopaque,
            size: u32,
            code_page: DXC_CP,
            p_blob_encoding: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveToBlob: *const fn (
            self: *const IDxcUtils,
            // TODO: what to do with BytesParamIndex 2?
            p_data: ?*const anyopaque,
            p_i_malloc: ?*IMalloc,
            size: u32,
            code_page: DXC_CP,
            p_blob_encoding: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBlob: *const fn (
            self: *const IDxcUtils,
            // TODO: what to do with BytesParamIndex 1?
            p_data: ?*const anyopaque,
            size: u32,
            code_page: DXC_CP,
            p_blob_encoding: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadFile: *const fn (
            self: *const IDxcUtils,
            p_file_name: ?[*:0]const u16,
            p_code_page: ?*DXC_CP,
            p_blob_encoding: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateReadOnlyStreamFromBlob: *const fn (
            self: *const IDxcUtils,
            p_blob: ?*IDxcBlob,
            pp_stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDefaultIncludeHandler: *const fn (
            self: *const IDxcUtils,
            pp_result: ?*?*IDxcIncludeHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBlobAsUtf8: *const fn (
            self: *const IDxcUtils,
            p_blob: ?*IDxcBlob,
            p_blob_encoding: ?*?*IDxcBlobUtf8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBlobAsUtf16: *const fn (
            self: *const IDxcUtils,
            p_blob: ?*IDxcBlob,
            p_blob_encoding: ?*?*IDxcBlobUtf16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDxilContainerPart: *const fn (
            self: *const IDxcUtils,
            p_shader: ?*const DxcBuffer,
            dxc_part: u32,
            pp_part_data: ?*?*anyopaque,
            p_part_size_in_bytes: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateReflection: *const fn (
            self: *const IDxcUtils,
            p_data: ?*const DxcBuffer,
            iid: ?*const Guid,
            ppv_reflection: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BuildArguments: *const fn (
            self: *const IDxcUtils,
            p_source_name: ?[*:0]const u16,
            p_entry_point: ?[*:0]const u16,
            p_target_profile: ?[*:0]const u16,
            p_arguments: ?[*]?PWSTR,
            arg_count: u32,
            p_defines: [*]const DxcDefine,
            define_count: u32,
            pp_args: ?*?*IDxcCompilerArgs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPDBContents: *const fn (
            self: *const IDxcUtils,
            p_p_d_b_blob: ?*IDxcBlob,
            pp_hash: ?*?*IDxcBlob,
            pp_container: ?*?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createBlobFromBlob(self: *const T, p_blob_: ?*IDxcBlob, offset_: u32, length_: u32, pp_result_: ?*?*IDxcBlob) HRESULT {
                return @as(*const IDxcUtils.VTable, @ptrCast(self.vtable)).CreateBlobFromBlob(@as(*const IDxcUtils, @ptrCast(self)), p_blob_, offset_, length_, pp_result_);
            }
            pub inline fn createBlobFromPinned(self: *const T, p_data_: ?*const anyopaque, size_: u32, code_page_: DXC_CP, p_blob_encoding_: ?*?*IDxcBlobEncoding) HRESULT {
                return @as(*const IDxcUtils.VTable, @ptrCast(self.vtable)).CreateBlobFromPinned(@as(*const IDxcUtils, @ptrCast(self)), p_data_, size_, code_page_, p_blob_encoding_);
            }
            pub inline fn moveToBlob(self: *const T, p_data_: ?*const anyopaque, p_i_malloc_: ?*IMalloc, size_: u32, code_page_: DXC_CP, p_blob_encoding_: ?*?*IDxcBlobEncoding) HRESULT {
                return @as(*const IDxcUtils.VTable, @ptrCast(self.vtable)).MoveToBlob(@as(*const IDxcUtils, @ptrCast(self)), p_data_, p_i_malloc_, size_, code_page_, p_blob_encoding_);
            }
            pub inline fn createBlob(self: *const T, p_data_: ?*const anyopaque, size_: u32, code_page_: DXC_CP, p_blob_encoding_: ?*?*IDxcBlobEncoding) HRESULT {
                return @as(*const IDxcUtils.VTable, @ptrCast(self.vtable)).CreateBlob(@as(*const IDxcUtils, @ptrCast(self)), p_data_, size_, code_page_, p_blob_encoding_);
            }
            pub inline fn loadFile(self: *const T, p_file_name_: ?[*:0]const u16, p_code_page_: ?*DXC_CP, p_blob_encoding_: ?*?*IDxcBlobEncoding) HRESULT {
                return @as(*const IDxcUtils.VTable, @ptrCast(self.vtable)).LoadFile(@as(*const IDxcUtils, @ptrCast(self)), p_file_name_, p_code_page_, p_blob_encoding_);
            }
            pub inline fn createReadOnlyStreamFromBlob(self: *const T, p_blob_: ?*IDxcBlob, pp_stream_: ?*?*IStream) HRESULT {
                return @as(*const IDxcUtils.VTable, @ptrCast(self.vtable)).CreateReadOnlyStreamFromBlob(@as(*const IDxcUtils, @ptrCast(self)), p_blob_, pp_stream_);
            }
            pub inline fn createDefaultIncludeHandler(self: *const T, pp_result_: ?*?*IDxcIncludeHandler) HRESULT {
                return @as(*const IDxcUtils.VTable, @ptrCast(self.vtable)).CreateDefaultIncludeHandler(@as(*const IDxcUtils, @ptrCast(self)), pp_result_);
            }
            pub inline fn getBlobAsUtf8(self: *const T, p_blob_: ?*IDxcBlob, p_blob_encoding_: ?*?*IDxcBlobUtf8) HRESULT {
                return @as(*const IDxcUtils.VTable, @ptrCast(self.vtable)).GetBlobAsUtf8(@as(*const IDxcUtils, @ptrCast(self)), p_blob_, p_blob_encoding_);
            }
            pub inline fn getBlobAsUtf16(self: *const T, p_blob_: ?*IDxcBlob, p_blob_encoding_: ?*?*IDxcBlobUtf16) HRESULT {
                return @as(*const IDxcUtils.VTable, @ptrCast(self.vtable)).GetBlobAsUtf16(@as(*const IDxcUtils, @ptrCast(self)), p_blob_, p_blob_encoding_);
            }
            pub inline fn getDxilContainerPart(self: *const T, p_shader_: ?*const DxcBuffer, dxc_part_: u32, pp_part_data_: ?*?*anyopaque, p_part_size_in_bytes_: ?*u32) HRESULT {
                return @as(*const IDxcUtils.VTable, @ptrCast(self.vtable)).GetDxilContainerPart(@as(*const IDxcUtils, @ptrCast(self)), p_shader_, dxc_part_, pp_part_data_, p_part_size_in_bytes_);
            }
            pub inline fn createReflection(self: *const T, p_data_: ?*const DxcBuffer, iid_: ?*const Guid, ppv_reflection_: ?*?*anyopaque) HRESULT {
                return @as(*const IDxcUtils.VTable, @ptrCast(self.vtable)).CreateReflection(@as(*const IDxcUtils, @ptrCast(self)), p_data_, iid_, ppv_reflection_);
            }
            pub inline fn buildArguments(self: *const T, p_source_name_: ?[*:0]const u16, p_entry_point_: ?[*:0]const u16, p_target_profile_: ?[*:0]const u16, p_arguments_: ?[*]?PWSTR, arg_count_: u32, p_defines_: [*]const DxcDefine, define_count_: u32, pp_args_: ?*?*IDxcCompilerArgs) HRESULT {
                return @as(*const IDxcUtils.VTable, @ptrCast(self.vtable)).BuildArguments(@as(*const IDxcUtils, @ptrCast(self)), p_source_name_, p_entry_point_, p_target_profile_, p_arguments_, arg_count_, p_defines_, define_count_, pp_args_);
            }
            pub inline fn getPDBContents(self: *const T, p_p_d_b_blob_: ?*IDxcBlob, pp_hash_: ?*?*IDxcBlob, pp_container_: ?*?*IDxcBlob) HRESULT {
                return @as(*const IDxcUtils.VTable, @ptrCast(self.vtable)).GetPDBContents(@as(*const IDxcUtils, @ptrCast(self)), p_p_d_b_blob_, pp_hash_, pp_container_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DXC_OUT_KIND = enum(i32) {
    NONE = 0,
    OBJECT = 1,
    ERRORS = 2,
    PDB = 3,
    SHADER_HASH = 4,
    DISASSEMBLY = 5,
    HLSL = 6,
    TEXT = 7,
    REFLECTION = 8,
    ROOT_SIGNATURE = 9,
    EXTRA_OUTPUTS = 10,
    FORCE_DWORD = -1,
};
pub const DXC_OUT_NONE = DXC_OUT_KIND.NONE;
pub const DXC_OUT_OBJECT = DXC_OUT_KIND.OBJECT;
pub const DXC_OUT_ERRORS = DXC_OUT_KIND.ERRORS;
pub const DXC_OUT_PDB = DXC_OUT_KIND.PDB;
pub const DXC_OUT_SHADER_HASH = DXC_OUT_KIND.SHADER_HASH;
pub const DXC_OUT_DISASSEMBLY = DXC_OUT_KIND.DISASSEMBLY;
pub const DXC_OUT_HLSL = DXC_OUT_KIND.HLSL;
pub const DXC_OUT_TEXT = DXC_OUT_KIND.TEXT;
pub const DXC_OUT_REFLECTION = DXC_OUT_KIND.REFLECTION;
pub const DXC_OUT_ROOT_SIGNATURE = DXC_OUT_KIND.ROOT_SIGNATURE;
pub const DXC_OUT_EXTRA_OUTPUTS = DXC_OUT_KIND.EXTRA_OUTPUTS;
pub const DXC_OUT_FORCE_DWORD = DXC_OUT_KIND.FORCE_DWORD;

const IID_IDxcResult_Value = Guid.initString("58346cda-dde7-4497-9461-6f87af5e0659");
pub const IID_IDxcResult = &IID_IDxcResult_Value;
pub const IDxcResult = extern struct {
    pub const VTable = extern struct {
        base: IDxcOperationResult.VTable,
        HasOutput: *const fn (
            self: *const IDxcResult,
            dxc_out_kind: DXC_OUT_KIND,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetOutput: *const fn (
            self: *const IDxcResult,
            dxc_out_kind: DXC_OUT_KIND,
            iid: ?*const Guid,
            ppv_object: ?*?*anyopaque,
            pp_output_name: ?*?*IDxcBlobUtf16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumOutputs: *const fn (
            self: *const IDxcResult,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetOutputByIndex: *const fn (
            self: *const IDxcResult,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) DXC_OUT_KIND,
        PrimaryOutput: *const fn (
            self: *const IDxcResult,
        ) callconv(@import("std").os.windows.WINAPI) DXC_OUT_KIND,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDxcOperationResult.MethodMixin(T);
            pub inline fn hasOutput(self: *const T, dxc_out_kind_: DXC_OUT_KIND) BOOL {
                return @as(*const IDxcResult.VTable, @ptrCast(self.vtable)).HasOutput(@as(*const IDxcResult, @ptrCast(self)), dxc_out_kind_);
            }
            pub inline fn getOutput(self: *const T, dxc_out_kind_: DXC_OUT_KIND, iid_: ?*const Guid, ppv_object_: ?*?*anyopaque, pp_output_name_: ?*?*IDxcBlobUtf16) HRESULT {
                return @as(*const IDxcResult.VTable, @ptrCast(self.vtable)).GetOutput(@as(*const IDxcResult, @ptrCast(self)), dxc_out_kind_, iid_, ppv_object_, pp_output_name_);
            }
            pub inline fn getNumOutputs(self: *const T) u32 {
                return @as(*const IDxcResult.VTable, @ptrCast(self.vtable)).GetNumOutputs(@as(*const IDxcResult, @ptrCast(self)));
            }
            pub inline fn getOutputByIndex(self: *const T, index_: u32) DXC_OUT_KIND {
                return @as(*const IDxcResult.VTable, @ptrCast(self.vtable)).GetOutputByIndex(@as(*const IDxcResult, @ptrCast(self)), index_);
            }
            pub inline fn primaryOutput(self: *const T) DXC_OUT_KIND {
                return @as(*const IDxcResult.VTable, @ptrCast(self.vtable)).PrimaryOutput(@as(*const IDxcResult, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcExtraOutputs_Value = Guid.initString("319b37a2-a5c2-494a-a5de-4801b2faf989");
pub const IID_IDxcExtraOutputs = &IID_IDxcExtraOutputs_Value;
pub const IDxcExtraOutputs = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOutputCount: *const fn (
            self: *const IDxcExtraOutputs,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetOutput: *const fn (
            self: *const IDxcExtraOutputs,
            u_index: u32,
            iid: ?*const Guid,
            ppv_object: ?*?*anyopaque,
            pp_output_type: ?*?*IDxcBlobUtf16,
            pp_output_name: ?*?*IDxcBlobUtf16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getOutputCount(self: *const T) u32 {
                return @as(*const IDxcExtraOutputs.VTable, @ptrCast(self.vtable)).GetOutputCount(@as(*const IDxcExtraOutputs, @ptrCast(self)));
            }
            pub inline fn getOutput(self: *const T, u_index_: u32, iid_: ?*const Guid, ppv_object_: ?*?*anyopaque, pp_output_type_: ?*?*IDxcBlobUtf16, pp_output_name_: ?*?*IDxcBlobUtf16) HRESULT {
                return @as(*const IDxcExtraOutputs.VTable, @ptrCast(self.vtable)).GetOutput(@as(*const IDxcExtraOutputs, @ptrCast(self)), u_index_, iid_, ppv_object_, pp_output_type_, pp_output_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcCompiler3_Value = Guid.initString("228b4687-5a6a-4730-900c-9702b2203f54");
pub const IID_IDxcCompiler3 = &IID_IDxcCompiler3_Value;
pub const IDxcCompiler3 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Compile: *const fn (
            self: *const IDxcCompiler3,
            p_source: ?*const DxcBuffer,
            p_arguments: ?[*]?PWSTR,
            arg_count: u32,
            p_include_handler: ?*IDxcIncludeHandler,
            riid: ?*const Guid,
            pp_result: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disassemble: *const fn (
            self: *const IDxcCompiler3,
            p_object: ?*const DxcBuffer,
            riid: ?*const Guid,
            pp_result: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn compile(self: *const T, p_source_: ?*const DxcBuffer, p_arguments_: ?[*]?PWSTR, arg_count_: u32, p_include_handler_: ?*IDxcIncludeHandler, riid_: ?*const Guid, pp_result_: ?*?*anyopaque) HRESULT {
                return @as(*const IDxcCompiler3.VTable, @ptrCast(self.vtable)).Compile(@as(*const IDxcCompiler3, @ptrCast(self)), p_source_, p_arguments_, arg_count_, p_include_handler_, riid_, pp_result_);
            }
            pub inline fn disassemble(self: *const T, p_object_: ?*const DxcBuffer, riid_: ?*const Guid, pp_result_: ?*?*anyopaque) HRESULT {
                return @as(*const IDxcCompiler3.VTable, @ptrCast(self.vtable)).Disassemble(@as(*const IDxcCompiler3, @ptrCast(self)), p_object_, riid_, pp_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcValidator_Value = Guid.initString("a6e82bd2-1fd7-4826-9811-2857e797f49a");
pub const IID_IDxcValidator = &IID_IDxcValidator_Value;
pub const IDxcValidator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Validate: *const fn (
            self: *const IDxcValidator,
            p_shader: ?*IDxcBlob,
            flags: u32,
            pp_result: ?*?*IDxcOperationResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn validate(self: *const T, p_shader_: ?*IDxcBlob, flags_: u32, pp_result_: ?*?*IDxcOperationResult) HRESULT {
                return @as(*const IDxcValidator.VTable, @ptrCast(self.vtable)).Validate(@as(*const IDxcValidator, @ptrCast(self)), p_shader_, flags_, pp_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcValidator2_Value = Guid.initString("458e1fd1-b1b2-4750-a6e1-9c10f03bed92");
pub const IID_IDxcValidator2 = &IID_IDxcValidator2_Value;
pub const IDxcValidator2 = extern struct {
    pub const VTable = extern struct {
        base: IDxcValidator.VTable,
        ValidateWithDebug: *const fn (
            self: *const IDxcValidator2,
            p_shader: ?*IDxcBlob,
            flags: u32,
            p_opt_debug_bitcode: ?*DxcBuffer,
            pp_result: ?*?*IDxcOperationResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDxcValidator.MethodMixin(T);
            pub inline fn validateWithDebug(self: *const T, p_shader_: ?*IDxcBlob, flags_: u32, p_opt_debug_bitcode_: ?*DxcBuffer, pp_result_: ?*?*IDxcOperationResult) HRESULT {
                return @as(*const IDxcValidator2.VTable, @ptrCast(self.vtable)).ValidateWithDebug(@as(*const IDxcValidator2, @ptrCast(self)), p_shader_, flags_, p_opt_debug_bitcode_, pp_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcContainerBuilder_Value = Guid.initString("334b1f50-2292-4b35-99a1-25588d8c17fe");
pub const IID_IDxcContainerBuilder = &IID_IDxcContainerBuilder_Value;
pub const IDxcContainerBuilder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Load: *const fn (
            self: *const IDxcContainerBuilder,
            p_dxil_container_header: ?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPart: *const fn (
            self: *const IDxcContainerBuilder,
            four_c_c: u32,
            p_source: ?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemovePart: *const fn (
            self: *const IDxcContainerBuilder,
            four_c_c: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SerializeContainer: *const fn (
            self: *const IDxcContainerBuilder,
            pp_result: ?*?*IDxcOperationResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn load(self: *const T, p_dxil_container_header_: ?*IDxcBlob) HRESULT {
                return @as(*const IDxcContainerBuilder.VTable, @ptrCast(self.vtable)).Load(@as(*const IDxcContainerBuilder, @ptrCast(self)), p_dxil_container_header_);
            }
            pub inline fn addPart(self: *const T, four_c_c_: u32, p_source_: ?*IDxcBlob) HRESULT {
                return @as(*const IDxcContainerBuilder.VTable, @ptrCast(self.vtable)).AddPart(@as(*const IDxcContainerBuilder, @ptrCast(self)), four_c_c_, p_source_);
            }
            pub inline fn removePart(self: *const T, four_c_c_: u32) HRESULT {
                return @as(*const IDxcContainerBuilder.VTable, @ptrCast(self.vtable)).RemovePart(@as(*const IDxcContainerBuilder, @ptrCast(self)), four_c_c_);
            }
            pub inline fn serializeContainer(self: *const T, pp_result_: ?*?*IDxcOperationResult) HRESULT {
                return @as(*const IDxcContainerBuilder.VTable, @ptrCast(self.vtable)).SerializeContainer(@as(*const IDxcContainerBuilder, @ptrCast(self)), pp_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcAssembler_Value = Guid.initString("091f7a26-1c1f-4948-904b-e6e3a8a771d5");
pub const IID_IDxcAssembler = &IID_IDxcAssembler_Value;
pub const IDxcAssembler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AssembleToContainer: *const fn (
            self: *const IDxcAssembler,
            p_shader: ?*IDxcBlob,
            pp_result: ?*?*IDxcOperationResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn assembleToContainer(self: *const T, p_shader_: ?*IDxcBlob, pp_result_: ?*?*IDxcOperationResult) HRESULT {
                return @as(*const IDxcAssembler.VTable, @ptrCast(self.vtable)).AssembleToContainer(@as(*const IDxcAssembler, @ptrCast(self)), p_shader_, pp_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcContainerReflection_Value = Guid.initString("d2c21b26-8350-4bdc-976a-331ce6f4c54c");
pub const IID_IDxcContainerReflection = &IID_IDxcContainerReflection_Value;
pub const IDxcContainerReflection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Load: *const fn (
            self: *const IDxcContainerReflection,
            p_container: ?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPartCount: *const fn (
            self: *const IDxcContainerReflection,
            p_result: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPartKind: *const fn (
            self: *const IDxcContainerReflection,
            idx: u32,
            p_result: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPartContent: *const fn (
            self: *const IDxcContainerReflection,
            idx: u32,
            pp_result: ?*?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstPartKind: *const fn (
            self: *const IDxcContainerReflection,
            kind: u32,
            p_result: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPartReflection: *const fn (
            self: *const IDxcContainerReflection,
            idx: u32,
            iid: ?*const Guid,
            ppv_object: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn load(self: *const T, p_container_: ?*IDxcBlob) HRESULT {
                return @as(*const IDxcContainerReflection.VTable, @ptrCast(self.vtable)).Load(@as(*const IDxcContainerReflection, @ptrCast(self)), p_container_);
            }
            pub inline fn getPartCount(self: *const T, p_result_: ?*u32) HRESULT {
                return @as(*const IDxcContainerReflection.VTable, @ptrCast(self.vtable)).GetPartCount(@as(*const IDxcContainerReflection, @ptrCast(self)), p_result_);
            }
            pub inline fn getPartKind(self: *const T, idx_: u32, p_result_: ?*u32) HRESULT {
                return @as(*const IDxcContainerReflection.VTable, @ptrCast(self.vtable)).GetPartKind(@as(*const IDxcContainerReflection, @ptrCast(self)), idx_, p_result_);
            }
            pub inline fn getPartContent(self: *const T, idx_: u32, pp_result_: ?*?*IDxcBlob) HRESULT {
                return @as(*const IDxcContainerReflection.VTable, @ptrCast(self.vtable)).GetPartContent(@as(*const IDxcContainerReflection, @ptrCast(self)), idx_, pp_result_);
            }
            pub inline fn findFirstPartKind(self: *const T, kind_: u32, p_result_: ?*u32) HRESULT {
                return @as(*const IDxcContainerReflection.VTable, @ptrCast(self.vtable)).FindFirstPartKind(@as(*const IDxcContainerReflection, @ptrCast(self)), kind_, p_result_);
            }
            pub inline fn getPartReflection(self: *const T, idx_: u32, iid_: ?*const Guid, ppv_object_: ?*?*anyopaque) HRESULT {
                return @as(*const IDxcContainerReflection.VTable, @ptrCast(self.vtable)).GetPartReflection(@as(*const IDxcContainerReflection, @ptrCast(self)), idx_, iid_, ppv_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcOptimizerPass_Value = Guid.initString("ae2cd79f-cc22-453f-9b6b-b124e7a5204c");
pub const IID_IDxcOptimizerPass = &IID_IDxcOptimizerPass_Value;
pub const IDxcOptimizerPass = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOptionName: *const fn (
            self: *const IDxcOptimizerPass,
            pp_result: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: *const fn (
            self: *const IDxcOptimizerPass,
            pp_result: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptionArgCount: *const fn (
            self: *const IDxcOptimizerPass,
            p_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptionArgName: *const fn (
            self: *const IDxcOptimizerPass,
            arg_index: u32,
            pp_result: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptionArgDescription: *const fn (
            self: *const IDxcOptimizerPass,
            arg_index: u32,
            pp_result: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getOptionName(self: *const T, pp_result_: ?*?PWSTR) HRESULT {
                return @as(*const IDxcOptimizerPass.VTable, @ptrCast(self.vtable)).GetOptionName(@as(*const IDxcOptimizerPass, @ptrCast(self)), pp_result_);
            }
            pub inline fn getDescription(self: *const T, pp_result_: ?*?PWSTR) HRESULT {
                return @as(*const IDxcOptimizerPass.VTable, @ptrCast(self.vtable)).GetDescription(@as(*const IDxcOptimizerPass, @ptrCast(self)), pp_result_);
            }
            pub inline fn getOptionArgCount(self: *const T, p_count_: ?*u32) HRESULT {
                return @as(*const IDxcOptimizerPass.VTable, @ptrCast(self.vtable)).GetOptionArgCount(@as(*const IDxcOptimizerPass, @ptrCast(self)), p_count_);
            }
            pub inline fn getOptionArgName(self: *const T, arg_index_: u32, pp_result_: ?*?PWSTR) HRESULT {
                return @as(*const IDxcOptimizerPass.VTable, @ptrCast(self.vtable)).GetOptionArgName(@as(*const IDxcOptimizerPass, @ptrCast(self)), arg_index_, pp_result_);
            }
            pub inline fn getOptionArgDescription(self: *const T, arg_index_: u32, pp_result_: ?*?PWSTR) HRESULT {
                return @as(*const IDxcOptimizerPass.VTable, @ptrCast(self.vtable)).GetOptionArgDescription(@as(*const IDxcOptimizerPass, @ptrCast(self)), arg_index_, pp_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcOptimizer_Value = Guid.initString("25740e2e-9cba-401b-9119-4fb42f39f270");
pub const IID_IDxcOptimizer = &IID_IDxcOptimizer_Value;
pub const IDxcOptimizer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAvailablePassCount: *const fn (
            self: *const IDxcOptimizer,
            p_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAvailablePass: *const fn (
            self: *const IDxcOptimizer,
            index: u32,
            pp_result: ?*?*IDxcOptimizerPass,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunOptimizer: *const fn (
            self: *const IDxcOptimizer,
            p_blob: ?*IDxcBlob,
            pp_options: [*]?PWSTR,
            option_count: u32,
            p_output_module: ?*?*IDxcBlob,
            pp_output_text: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAvailablePassCount(self: *const T, p_count_: ?*u32) HRESULT {
                return @as(*const IDxcOptimizer.VTable, @ptrCast(self.vtable)).GetAvailablePassCount(@as(*const IDxcOptimizer, @ptrCast(self)), p_count_);
            }
            pub inline fn getAvailablePass(self: *const T, index_: u32, pp_result_: ?*?*IDxcOptimizerPass) HRESULT {
                return @as(*const IDxcOptimizer.VTable, @ptrCast(self.vtable)).GetAvailablePass(@as(*const IDxcOptimizer, @ptrCast(self)), index_, pp_result_);
            }
            pub inline fn runOptimizer(self: *const T, p_blob_: ?*IDxcBlob, pp_options_: [*]?PWSTR, option_count_: u32, p_output_module_: ?*?*IDxcBlob, pp_output_text_: ?*?*IDxcBlobEncoding) HRESULT {
                return @as(*const IDxcOptimizer.VTable, @ptrCast(self.vtable)).RunOptimizer(@as(*const IDxcOptimizer, @ptrCast(self)), p_blob_, pp_options_, option_count_, p_output_module_, pp_output_text_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcVersionInfo_Value = Guid.initString("b04f5b50-2059-4f12-a8ff-a1e0cde1cc7e");
pub const IID_IDxcVersionInfo = &IID_IDxcVersionInfo_Value;
pub const IDxcVersionInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetVersion: *const fn (
            self: *const IDxcVersionInfo,
            p_major: ?*u32,
            p_minor: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn (
            self: *const IDxcVersionInfo,
            p_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getVersion(self: *const T, p_major_: ?*u32, p_minor_: ?*u32) HRESULT {
                return @as(*const IDxcVersionInfo.VTable, @ptrCast(self.vtable)).GetVersion(@as(*const IDxcVersionInfo, @ptrCast(self)), p_major_, p_minor_);
            }
            pub inline fn getFlags(self: *const T, p_flags_: ?*u32) HRESULT {
                return @as(*const IDxcVersionInfo.VTable, @ptrCast(self.vtable)).GetFlags(@as(*const IDxcVersionInfo, @ptrCast(self)), p_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcVersionInfo2_Value = Guid.initString("fb6904c4-42f0-4b62-9c46-983af7da7c83");
pub const IID_IDxcVersionInfo2 = &IID_IDxcVersionInfo2_Value;
pub const IDxcVersionInfo2 = extern struct {
    pub const VTable = extern struct {
        base: IDxcVersionInfo.VTable,
        GetCommitInfo: *const fn (
            self: *const IDxcVersionInfo2,
            p_commit_count: ?*u32,
            p_commit_hash: ?*?*i8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDxcVersionInfo.MethodMixin(T);
            pub inline fn getCommitInfo(self: *const T, p_commit_count_: ?*u32, p_commit_hash_: ?*?*i8) HRESULT {
                return @as(*const IDxcVersionInfo2.VTable, @ptrCast(self.vtable)).GetCommitInfo(@as(*const IDxcVersionInfo2, @ptrCast(self)), p_commit_count_, p_commit_hash_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDxcVersionInfo3_Value = Guid.initString("5e13e843-9d25-473c-9ad2-03b2d0b44b1e");
pub const IID_IDxcVersionInfo3 = &IID_IDxcVersionInfo3_Value;
pub const IDxcVersionInfo3 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCustomVersionString: *const fn (
            self: *const IDxcVersionInfo3,
            p_version_string: ?*?*i8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCustomVersionString(self: *const T, p_version_string_: ?*?*i8) HRESULT {
                return @as(*const IDxcVersionInfo3.VTable, @ptrCast(self.vtable)).GetCustomVersionString(@as(*const IDxcVersionInfo3, @ptrCast(self)), p_version_string_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DxcArgPair = extern struct {
    pName: ?[*:0]const u16,
    pValue: ?[*:0]const u16,
};

const IID_IDxcPdbUtils_Value = Guid.initString("e6c9647e-9d6a-4c3b-b94c-524b5a6c343d");
pub const IID_IDxcPdbUtils = &IID_IDxcPdbUtils_Value;
pub const IDxcPdbUtils = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Load: *const fn (
            self: *const IDxcPdbUtils,
            p_pdb_or_dxil: ?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceCount: *const fn (
            self: *const IDxcPdbUtils,
            p_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSource: *const fn (
            self: *const IDxcPdbUtils,
            u_index: u32,
            pp_result: ?*?*IDxcBlobEncoding,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceName: *const fn (
            self: *const IDxcPdbUtils,
            u_index: u32,
            p_result: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlagCount: *const fn (
            self: *const IDxcPdbUtils,
            p_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlag: *const fn (
            self: *const IDxcPdbUtils,
            u_index: u32,
            p_result: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetArgCount: *const fn (
            self: *const IDxcPdbUtils,
            p_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetArg: *const fn (
            self: *const IDxcPdbUtils,
            u_index: u32,
            p_result: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetArgPairCount: *const fn (
            self: *const IDxcPdbUtils,
            p_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetArgPair: *const fn (
            self: *const IDxcPdbUtils,
            u_index: u32,
            p_name: ?*?BSTR,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefineCount: *const fn (
            self: *const IDxcPdbUtils,
            p_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefine: *const fn (
            self: *const IDxcPdbUtils,
            u_index: u32,
            p_result: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTargetProfile: *const fn (
            self: *const IDxcPdbUtils,
            p_result: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEntryPoint: *const fn (
            self: *const IDxcPdbUtils,
            p_result: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMainFileName: *const fn (
            self: *const IDxcPdbUtils,
            p_result: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHash: *const fn (
            self: *const IDxcPdbUtils,
            pp_result: ?*?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn (
            self: *const IDxcPdbUtils,
            p_result: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsFullPDB: *const fn (
            self: *const IDxcPdbUtils,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetFullPDB: *const fn (
            self: *const IDxcPdbUtils,
            pp_full_p_d_b: ?*?*IDxcBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVersionInfo: *const fn (
            self: *const IDxcPdbUtils,
            pp_version_info: ?*?*IDxcVersionInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompiler: *const fn (
            self: *const IDxcPdbUtils,
            p_compiler: ?*IDxcCompiler3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompileForFullPDB: *const fn (
            self: *const IDxcPdbUtils,
            pp_result: ?*?*IDxcResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OverrideArgs: *const fn (
            self: *const IDxcPdbUtils,
            p_arg_pairs: ?*DxcArgPair,
            u_num_arg_pairs: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OverrideRootSignature: *const fn (
            self: *const IDxcPdbUtils,
            p_root_signature: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn load(self: *const T, p_pdb_or_dxil_: ?*IDxcBlob) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).Load(@as(*const IDxcPdbUtils, @ptrCast(self)), p_pdb_or_dxil_);
            }
            pub inline fn getSourceCount(self: *const T, p_count_: ?*u32) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).GetSourceCount(@as(*const IDxcPdbUtils, @ptrCast(self)), p_count_);
            }
            pub inline fn getSource(self: *const T, u_index_: u32, pp_result_: ?*?*IDxcBlobEncoding) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).GetSource(@as(*const IDxcPdbUtils, @ptrCast(self)), u_index_, pp_result_);
            }
            pub inline fn getSourceName(self: *const T, u_index_: u32, p_result_: ?*?BSTR) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).GetSourceName(@as(*const IDxcPdbUtils, @ptrCast(self)), u_index_, p_result_);
            }
            pub inline fn getFlagCount(self: *const T, p_count_: ?*u32) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).GetFlagCount(@as(*const IDxcPdbUtils, @ptrCast(self)), p_count_);
            }
            pub inline fn getFlag(self: *const T, u_index_: u32, p_result_: ?*?BSTR) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).GetFlag(@as(*const IDxcPdbUtils, @ptrCast(self)), u_index_, p_result_);
            }
            pub inline fn getArgCount(self: *const T, p_count_: ?*u32) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).GetArgCount(@as(*const IDxcPdbUtils, @ptrCast(self)), p_count_);
            }
            pub inline fn getArg(self: *const T, u_index_: u32, p_result_: ?*?BSTR) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).GetArg(@as(*const IDxcPdbUtils, @ptrCast(self)), u_index_, p_result_);
            }
            pub inline fn getArgPairCount(self: *const T, p_count_: ?*u32) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).GetArgPairCount(@as(*const IDxcPdbUtils, @ptrCast(self)), p_count_);
            }
            pub inline fn getArgPair(self: *const T, u_index_: u32, p_name_: ?*?BSTR, p_value_: ?*?BSTR) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).GetArgPair(@as(*const IDxcPdbUtils, @ptrCast(self)), u_index_, p_name_, p_value_);
            }
            pub inline fn getDefineCount(self: *const T, p_count_: ?*u32) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).GetDefineCount(@as(*const IDxcPdbUtils, @ptrCast(self)), p_count_);
            }
            pub inline fn getDefine(self: *const T, u_index_: u32, p_result_: ?*?BSTR) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).GetDefine(@as(*const IDxcPdbUtils, @ptrCast(self)), u_index_, p_result_);
            }
            pub inline fn getTargetProfile(self: *const T, p_result_: ?*?BSTR) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).GetTargetProfile(@as(*const IDxcPdbUtils, @ptrCast(self)), p_result_);
            }
            pub inline fn getEntryPoint(self: *const T, p_result_: ?*?BSTR) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).GetEntryPoint(@as(*const IDxcPdbUtils, @ptrCast(self)), p_result_);
            }
            pub inline fn getMainFileName(self: *const T, p_result_: ?*?BSTR) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).GetMainFileName(@as(*const IDxcPdbUtils, @ptrCast(self)), p_result_);
            }
            pub inline fn getHash(self: *const T, pp_result_: ?*?*IDxcBlob) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).GetHash(@as(*const IDxcPdbUtils, @ptrCast(self)), pp_result_);
            }
            pub inline fn getName(self: *const T, p_result_: ?*?BSTR) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).GetName(@as(*const IDxcPdbUtils, @ptrCast(self)), p_result_);
            }
            pub inline fn isFullPDB(self: *const T) BOOL {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).IsFullPDB(@as(*const IDxcPdbUtils, @ptrCast(self)));
            }
            pub inline fn getFullPDB(self: *const T, pp_full_p_d_b_: ?*?*IDxcBlob) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).GetFullPDB(@as(*const IDxcPdbUtils, @ptrCast(self)), pp_full_p_d_b_);
            }
            pub inline fn getVersionInfo(self: *const T, pp_version_info_: ?*?*IDxcVersionInfo) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).GetVersionInfo(@as(*const IDxcPdbUtils, @ptrCast(self)), pp_version_info_);
            }
            pub inline fn setCompiler(self: *const T, p_compiler_: ?*IDxcCompiler3) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).SetCompiler(@as(*const IDxcPdbUtils, @ptrCast(self)), p_compiler_);
            }
            pub inline fn compileForFullPDB(self: *const T, pp_result_: ?*?*IDxcResult) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).CompileForFullPDB(@as(*const IDxcPdbUtils, @ptrCast(self)), pp_result_);
            }
            pub inline fn overrideArgs(self: *const T, p_arg_pairs_: ?*DxcArgPair, u_num_arg_pairs_: u32) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).OverrideArgs(@as(*const IDxcPdbUtils, @ptrCast(self)), p_arg_pairs_, u_num_arg_pairs_);
            }
            pub inline fn overrideRootSignature(self: *const T, p_root_signature_: ?[*:0]const u16) HRESULT {
                return @as(*const IDxcPdbUtils.VTable, @ptrCast(self.vtable)).OverrideRootSignature(@as(*const IDxcPdbUtils, @ptrCast(self)), p_root_signature_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (2)
//--------------------------------------------------------------------------------
pub extern "dxcompiler" fn DxcCreateInstance(
    rclsid: ?*const Guid,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dxcompiler" fn DxcCreateInstance2(
    p_malloc: ?*IMalloc,
    rclsid: ?*const Guid,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (9)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BOOL = @import("../../foundation.zig").BOOL;
const BSTR = @import("../../foundation.zig").BSTR;
const HRESULT = @import("../../foundation.zig").HRESULT;
const IMalloc = @import("../../system/com.zig").IMalloc;
const IStream = @import("../../system/com.zig").IStream;
const IUnknown = @import("../../system/com.zig").IUnknown;
const PSTR = @import("../../foundation.zig").PSTR;
const PWSTR = @import("../../foundation.zig").PWSTR;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "DxcCreateInstanceProc")) {
        _ = DxcCreateInstanceProc;
    }
    if (@hasDecl(@This(), "DxcCreateInstance2Proc")) {
        _ = DxcCreateInstance2Proc;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
