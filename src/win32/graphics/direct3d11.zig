//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (504)
//--------------------------------------------------------------------------------
pub const D3D11_16BIT_INDEX_STRIP_CUT_VALUE = @as(u32, 65535);
pub const D3D11_32BIT_INDEX_STRIP_CUT_VALUE = @as(u32, 4294967295);
pub const D3D11_8BIT_INDEX_STRIP_CUT_VALUE = @as(u32, 255);
pub const D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = @as(u32, 9);
pub const D3D11_CLIP_OR_CULL_DISTANCE_COUNT = @as(u32, 8);
pub const D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = @as(u32, 2);
pub const D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = @as(u32, 14);
pub const D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = @as(u32, 4);
pub const D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = @as(u32, 15);
pub const D3D11_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = @as(u32, 16);
pub const D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = @as(u32, 4);
pub const D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = @as(u32, 15);
pub const D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = @as(u32, 1);
pub const D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = @as(u32, 1);
pub const D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = @as(u32, 64);
pub const D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = @as(u32, 4);
pub const D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = @as(u32, 1);
pub const D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = @as(u32, 1);
pub const D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = @as(u32, 1);
pub const D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = @as(u32, 1);
pub const D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = @as(u32, 128);
pub const D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = @as(u32, 1);
pub const D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = @as(u32, 1);
pub const D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = @as(u32, 128);
pub const D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = @as(u32, 1);
pub const D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT = @as(u32, 16);
pub const D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = @as(u32, 1);
pub const D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = @as(u32, 1);
pub const D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT = @as(u32, 16);
pub const D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = @as(u32, 32);
pub const D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS = @as(u32, 4);
pub const D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_COMMONSHADER_TEMP_REGISTER_COUNT = @as(u32, 4096);
pub const D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = @as(u32, 3);
pub const D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS = @as(u32, 3);
pub const D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = @as(u32, 10);
pub const D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = @as(i32, -10);
pub const D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = @as(i32, -8);
pub const D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = @as(u32, 7);
pub const D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = @as(u32, 256);
pub const D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = @as(u32, 64);
pub const D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = @as(u32, 240);
pub const D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = @as(u32, 68);
pub const D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = @as(u32, 224);
pub const D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = @as(u32, 72);
pub const D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = @as(u32, 208);
pub const D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = @as(u32, 76);
pub const D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = @as(u32, 192);
pub const D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = @as(u32, 84);
pub const D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = @as(u32, 176);
pub const D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = @as(u32, 92);
pub const D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = @as(u32, 160);
pub const D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = @as(u32, 100);
pub const D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = @as(u32, 144);
pub const D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = @as(u32, 112);
pub const D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = @as(u32, 128);
pub const D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = @as(u32, 128);
pub const D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = @as(u32, 112);
pub const D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = @as(u32, 144);
pub const D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = @as(u32, 96);
pub const D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = @as(u32, 168);
pub const D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = @as(u32, 80);
pub const D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = @as(u32, 204);
pub const D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = @as(u32, 64);
pub const D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = @as(u32, 256);
pub const D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = @as(u32, 48);
pub const D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = @as(u32, 340);
pub const D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = @as(u32, 32);
pub const D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = @as(u32, 512);
pub const D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = @as(u32, 16);
pub const D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = @as(u32, 768);
pub const D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = @as(u32, 1);
pub const D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = @as(u32, 256);
pub const D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = @as(u32, 768);
pub const D3D11_CS_4_X_THREAD_GROUP_MAX_X = @as(u32, 768);
pub const D3D11_CS_4_X_THREAD_GROUP_MAX_Y = @as(u32, 768);
pub const D3D11_CS_4_X_UAV_REGISTER_COUNT = @as(u32, 1);
pub const D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = @as(u32, 65535);
pub const D3D11_CS_TGSM_REGISTER_COUNT = @as(u32, 8192);
pub const D3D11_CS_TGSM_REGISTER_READS_PER_INST = @as(u32, 1);
pub const D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = @as(u32, 1);
pub const D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = @as(u32, 1);
pub const D3D11_CS_THREADGROUPID_REGISTER_COMPONENTS = @as(u32, 3);
pub const D3D11_CS_THREADGROUPID_REGISTER_COUNT = @as(u32, 1);
pub const D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = @as(u32, 1);
pub const D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = @as(u32, 1);
pub const D3D11_CS_THREADIDINGROUP_REGISTER_COMPONENTS = @as(u32, 3);
pub const D3D11_CS_THREADIDINGROUP_REGISTER_COUNT = @as(u32, 1);
pub const D3D11_CS_THREADID_REGISTER_COMPONENTS = @as(u32, 3);
pub const D3D11_CS_THREADID_REGISTER_COUNT = @as(u32, 1);
pub const D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = @as(u32, 1024);
pub const D3D11_CS_THREAD_GROUP_MAX_X = @as(u32, 1024);
pub const D3D11_CS_THREAD_GROUP_MAX_Y = @as(u32, 1024);
pub const D3D11_CS_THREAD_GROUP_MAX_Z = @as(u32, 64);
pub const D3D11_CS_THREAD_GROUP_MIN_X = @as(u32, 1);
pub const D3D11_CS_THREAD_GROUP_MIN_Y = @as(u32, 1);
pub const D3D11_CS_THREAD_GROUP_MIN_Z = @as(u32, 1);
pub const D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = @as(u32, 16384);
pub const D3D11_DEFAULT_BLEND_FACTOR_ALPHA = @as(f32, 1);
pub const D3D11_DEFAULT_BLEND_FACTOR_BLUE = @as(f32, 1);
pub const D3D11_DEFAULT_BLEND_FACTOR_GREEN = @as(f32, 1);
pub const D3D11_DEFAULT_BLEND_FACTOR_RED = @as(f32, 1);
pub const D3D11_DEFAULT_BORDER_COLOR_COMPONENT = @as(f32, 0);
pub const D3D11_DEFAULT_DEPTH_BIAS = @as(u32, 0);
pub const D3D11_DEFAULT_DEPTH_BIAS_CLAMP = @as(f32, 0);
pub const D3D11_DEFAULT_MAX_ANISOTROPY = @as(u32, 16);
pub const D3D11_DEFAULT_MIP_LOD_BIAS = @as(f32, 0);
pub const D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX = @as(u32, 0);
pub const D3D11_DEFAULT_SAMPLE_MASK = @as(u32, 4294967295);
pub const D3D11_DEFAULT_SCISSOR_ENDX = @as(u32, 0);
pub const D3D11_DEFAULT_SCISSOR_ENDY = @as(u32, 0);
pub const D3D11_DEFAULT_SCISSOR_STARTX = @as(u32, 0);
pub const D3D11_DEFAULT_SCISSOR_STARTY = @as(u32, 0);
pub const D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = @as(f32, 0);
pub const D3D11_DEFAULT_STENCIL_READ_MASK = @as(u32, 255);
pub const D3D11_DEFAULT_STENCIL_REFERENCE = @as(u32, 0);
pub const D3D11_DEFAULT_STENCIL_WRITE_MASK = @as(u32, 255);
pub const D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = @as(u32, 0);
pub const D3D11_DEFAULT_VIEWPORT_HEIGHT = @as(u32, 0);
pub const D3D11_DEFAULT_VIEWPORT_MAX_DEPTH = @as(f32, 0);
pub const D3D11_DEFAULT_VIEWPORT_MIN_DEPTH = @as(f32, 0);
pub const D3D11_DEFAULT_VIEWPORT_TOPLEFTX = @as(u32, 0);
pub const D3D11_DEFAULT_VIEWPORT_TOPLEFTY = @as(u32, 0);
pub const D3D11_DEFAULT_VIEWPORT_WIDTH = @as(u32, 0);
pub const D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = @as(u32, 3968);
pub const D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = @as(u32, 4);
pub const D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = @as(u32, 32);
pub const D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = @as(u32, 2);
pub const D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = @as(u32, 1);
pub const D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = @as(u32, 3);
pub const D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = @as(u32, 1);
pub const D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = @as(u32, 2);
pub const D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = @as(u32, 1);
pub const D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = @as(u32, 4);
pub const D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = @as(u32, 32);
pub const D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = @as(u32, 2);
pub const D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = @as(u32, 1);
pub const D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = @as(u32, 1);
pub const D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = @as(u32, 1);
pub const D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = @as(u32, 2);
pub const D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = @as(u32, 1);
pub const D3D11_DS_OUTPUT_REGISTER_COMPONENTS = @as(u32, 4);
pub const D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_DS_OUTPUT_REGISTER_COUNT = @as(u32, 32);
pub const D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP = @as(f64, 6.0e-01);
pub const D3D11_FLOAT32_MAX = @as(f32, 3.4028235e+38);
pub const D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = @as(f32, 6.0e-01);
pub const D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = @as(f32, 2.4e+00);
pub const D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = @as(f32, 1);
pub const D3D11_FLOAT_TO_SRGB_OFFSET = @as(f32, 5.5e-02);
pub const D3D11_FLOAT_TO_SRGB_SCALE_1 = @as(f32, 1.292e+01);
pub const D3D11_FLOAT_TO_SRGB_SCALE_2 = @as(f32, 1.055e+00);
pub const D3D11_FLOAT_TO_SRGB_THRESHOLD = @as(f32, 3.1308e-03);
pub const D3D11_FTOI_INSTRUCTION_MAX_INPUT = @as(f32, 2.1474836e+09);
pub const D3D11_FTOI_INSTRUCTION_MIN_INPUT = @as(f32, -2.1474836e+09);
pub const D3D11_FTOU_INSTRUCTION_MAX_INPUT = @as(f32, 4.2949673e+09);
pub const D3D11_FTOU_INSTRUCTION_MIN_INPUT = @as(f32, 0);
pub const D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST = @as(u32, 2);
pub const D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS = @as(u32, 1);
pub const D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = @as(u32, 1);
pub const D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = @as(u32, 1);
pub const D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = @as(u32, 1);
pub const D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT = @as(u32, 1);
pub const D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = @as(u32, 2);
pub const D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = @as(u32, 1);
pub const D3D11_GS_INPUT_REGISTER_COMPONENTS = @as(u32, 4);
pub const D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_GS_INPUT_REGISTER_COUNT = @as(u32, 32);
pub const D3D11_GS_INPUT_REGISTER_READS_PER_INST = @as(u32, 2);
pub const D3D11_GS_INPUT_REGISTER_READ_PORTS = @as(u32, 1);
pub const D3D11_GS_INPUT_REGISTER_VERTICES = @as(u32, 32);
pub const D3D11_GS_MAX_INSTANCE_COUNT = @as(u32, 32);
pub const D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = @as(u32, 1024);
pub const D3D11_GS_OUTPUT_ELEMENTS = @as(u32, 32);
pub const D3D11_GS_OUTPUT_REGISTER_COMPONENTS = @as(u32, 4);
pub const D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_GS_OUTPUT_REGISTER_COUNT = @as(u32, 32);
pub const D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = @as(u32, 32);
pub const D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = @as(u32, 32);
pub const D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS = @as(u32, 4);
pub const D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST = @as(u32, 2);
pub const D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS = @as(u32, 1);
pub const D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = @as(u32, 4294967295);
pub const D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = @as(u32, 1);
pub const D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = @as(u32, 1);
pub const D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = @as(u32, 2);
pub const D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = @as(u32, 1);
pub const D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = @as(u32, 1);
pub const D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = @as(u32, 1);
pub const D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = @as(u32, 2);
pub const D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = @as(u32, 1);
pub const D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = @as(u32, 1);
pub const D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = @as(u32, 1);
pub const D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = @as(u32, 2);
pub const D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = @as(u32, 1);
pub const D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = @as(u32, 4294967295);
pub const D3D11_HS_MAXTESSFACTOR_LOWER_BOUND = @as(f32, 1);
pub const D3D11_HS_MAXTESSFACTOR_UPPER_BOUND = @as(f32, 64);
pub const D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = @as(u32, 3968);
pub const D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = @as(u32, 1);
pub const D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = @as(u32, 1);
pub const D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = @as(u32, 2);
pub const D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = @as(u32, 1);
pub const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = @as(u32, 4);
pub const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = @as(u32, 32);
pub const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = @as(u32, 2);
pub const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = @as(u32, 1);
pub const D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = @as(u32, 128);
pub const D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = @as(u32, 0);
pub const D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY = @as(u32, 0);
pub const D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = @as(u32, 0);
pub const D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = @as(u32, 1);
pub const D3D11_IA_INSTANCE_ID_BIT_COUNT = @as(u32, 32);
pub const D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT = @as(u32, 32);
pub const D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT = @as(u32, 32);
pub const D3D11_IA_PRIMITIVE_ID_BIT_COUNT = @as(u32, 32);
pub const D3D11_IA_VERTEX_ID_BIT_COUNT = @as(u32, 32);
pub const D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = @as(u32, 32);
pub const D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = @as(u32, 128);
pub const D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = @as(u32, 32);
pub const D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = @as(u32, 4294967295);
pub const D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER = @as(u32, 4294967295);
pub const D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = @as(u32, 4294967295);
pub const D3D11_KEEP_UNORDERED_ACCESS_VIEWS = @as(u32, 4294967295);
pub const D3D11_LINEAR_GAMMA = @as(f32, 1);
pub const D3D11_MAJOR_VERSION = @as(u32, 11);
pub const D3D11_MAX_BORDER_COLOR_COMPONENT = @as(f32, 1);
pub const D3D11_MAX_DEPTH = @as(f32, 1);
pub const D3D11_MAX_MAXANISOTROPY = @as(u32, 16);
pub const D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT = @as(u32, 32);
pub const D3D11_MAX_POSITION_VALUE = @as(f32, 3.4028236e+34);
pub const D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP = @as(u32, 17);
pub const D3D11_MINOR_VERSION = @as(u32, 0);
pub const D3D11_MIN_BORDER_COLOR_COMPONENT = @as(f32, 0);
pub const D3D11_MIN_DEPTH = @as(f32, 0);
pub const D3D11_MIN_MAXANISOTROPY = @as(u32, 0);
pub const D3D11_MIP_LOD_BIAS_MAX = @as(f32, 1.599e+01);
pub const D3D11_MIP_LOD_BIAS_MIN = @as(f32, -16);
pub const D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT = @as(u32, 8);
pub const D3D11_MIP_LOD_RANGE_BIT_COUNT = @as(u32, 8);
pub const D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = @as(f32, 1.4e+00);
pub const D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = @as(u32, 0);
pub const D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT = @as(u32, 15);
pub const D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = @as(u32, 16);
pub const D3D11_PS_CS_UAV_REGISTER_COMPONENTS = @as(u32, 1);
pub const D3D11_PS_CS_UAV_REGISTER_COUNT = @as(u32, 8);
pub const D3D11_PS_CS_UAV_REGISTER_READS_PER_INST = @as(u32, 1);
pub const D3D11_PS_CS_UAV_REGISTER_READ_PORTS = @as(u32, 1);
pub const D3D11_PS_FRONTFACING_DEFAULT_VALUE = @as(u32, 4294967295);
pub const D3D11_PS_FRONTFACING_FALSE_VALUE = @as(u32, 0);
pub const D3D11_PS_FRONTFACING_TRUE_VALUE = @as(u32, 4294967295);
pub const D3D11_PS_INPUT_REGISTER_COMPONENTS = @as(u32, 4);
pub const D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_PS_INPUT_REGISTER_COUNT = @as(u32, 32);
pub const D3D11_PS_INPUT_REGISTER_READS_PER_INST = @as(u32, 2);
pub const D3D11_PS_INPUT_REGISTER_READ_PORTS = @as(u32, 1);
pub const D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = @as(f32, 0);
pub const D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = @as(u32, 1);
pub const D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT = @as(u32, 1);
pub const D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS = @as(u32, 1);
pub const D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_PS_OUTPUT_MASK_REGISTER_COUNT = @as(u32, 1);
pub const D3D11_PS_OUTPUT_REGISTER_COMPONENTS = @as(u32, 4);
pub const D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_PS_OUTPUT_REGISTER_COUNT = @as(u32, 8);
pub const D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = @as(f32, 5.0e-01);
pub const D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT = @as(u32, 16);
pub const D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = @as(u32, 4096);
pub const D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = @as(u32, 27);
pub const D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = @as(u32, 4096);
pub const D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = @as(u32, 4096);
pub const D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = @as(u32, 32);
pub const D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = @as(u32, 32);
pub const D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = @as(u32, 16384);
pub const D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = @as(u32, 1024);
pub const D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = @as(u32, 4096);
pub const D3D11_REQ_MAXANISOTROPY = @as(u32, 16);
pub const D3D11_REQ_MIP_LEVELS = @as(u32, 15);
pub const D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = @as(u32, 2048);
pub const D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = @as(u32, 4096);
pub const D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = @as(u32, 16384);
pub const D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = @as(u32, 128);
pub const D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = @as(f32, 2.5e-01);
pub const D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = @as(u32, 2048);
pub const D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = @as(u32, 20);
pub const D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = @as(u32, 4096);
pub const D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = @as(u32, 2048);
pub const D3D11_REQ_TEXTURE1D_U_DIMENSION = @as(u32, 16384);
pub const D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = @as(u32, 2048);
pub const D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION = @as(u32, 16384);
pub const D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = @as(u32, 2048);
pub const D3D11_REQ_TEXTURECUBE_DIMENSION = @as(u32, 16384);
pub const D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = @as(u32, 0);
pub const D3D11_SHADER_MAJOR_VERSION = @as(u32, 5);
pub const D3D11_SHADER_MAX_INSTANCES = @as(u32, 65535);
pub const D3D11_SHADER_MAX_INTERFACES = @as(u32, 253);
pub const D3D11_SHADER_MAX_INTERFACE_CALL_SITES = @as(u32, 4096);
pub const D3D11_SHADER_MAX_TYPES = @as(u32, 65535);
pub const D3D11_SHADER_MINOR_VERSION = @as(u32, 0);
pub const D3D11_SHIFT_INSTRUCTION_PAD_VALUE = @as(u32, 0);
pub const D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = @as(u32, 5);
pub const D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT = @as(u32, 8);
pub const D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES = @as(u32, 2048);
pub const D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = @as(u32, 512);
pub const D3D11_SO_BUFFER_SLOT_COUNT = @as(u32, 4);
pub const D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP = @as(u32, 4294967295);
pub const D3D11_SO_NO_RASTERIZED_STREAM = @as(u32, 4294967295);
pub const D3D11_SO_OUTPUT_COMPONENT_COUNT = @as(u32, 128);
pub const D3D11_SO_STREAM_COUNT = @as(u32, 4);
pub const D3D11_SPEC_DATE_DAY = @as(u32, 16);
pub const D3D11_SPEC_DATE_MONTH = @as(u32, 5);
pub const D3D11_SPEC_DATE_YEAR = @as(u32, 2011);
pub const D3D11_SPEC_VERSION = @as(f64, 1.07e+00);
pub const D3D11_SRGB_GAMMA = @as(f32, 2.2e+00);
pub const D3D11_SRGB_TO_FLOAT_DENOMINATOR_1 = @as(f32, 1.292e+01);
pub const D3D11_SRGB_TO_FLOAT_DENOMINATOR_2 = @as(f32, 1.055e+00);
pub const D3D11_SRGB_TO_FLOAT_EXPONENT = @as(f32, 2.4e+00);
pub const D3D11_SRGB_TO_FLOAT_OFFSET = @as(f32, 5.5e-02);
pub const D3D11_SRGB_TO_FLOAT_THRESHOLD = @as(f32, 4.045e-02);
pub const D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = @as(f32, 5.0e-01);
pub const D3D11_STANDARD_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = @as(u32, 64);
pub const D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = @as(u32, 4);
pub const D3D11_STANDARD_PIXEL_COMPONENT_COUNT = @as(u32, 128);
pub const D3D11_STANDARD_PIXEL_ELEMENT_COUNT = @as(u32, 32);
pub const D3D11_STANDARD_VECTOR_SIZE = @as(u32, 4);
pub const D3D11_STANDARD_VERTEX_ELEMENT_COUNT = @as(u32, 32);
pub const D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = @as(u32, 64);
pub const D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT = @as(u32, 8);
pub const D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT = @as(u32, 8);
pub const D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = @as(u32, 64);
pub const D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = @as(u32, 64);
pub const D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = @as(u32, 63);
pub const D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR = @as(u32, 64);
pub const D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = @as(u32, 2);
pub const D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = @as(u32, 1);
pub const D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = @as(u32, 1);
pub const D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT = @as(u32, 16);
pub const D3D11_UNBOUND_MEMORY_ACCESS_RESULT = @as(u32, 0);
pub const D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = @as(u32, 15);
pub const D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = @as(u32, 16);
pub const D3D11_VIEWPORT_BOUNDS_MAX = @as(u32, 32767);
pub const D3D11_VIEWPORT_BOUNDS_MIN = @as(i32, -32768);
pub const D3D11_VS_INPUT_REGISTER_COMPONENTS = @as(u32, 4);
pub const D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_VS_INPUT_REGISTER_COUNT = @as(u32, 32);
pub const D3D11_VS_INPUT_REGISTER_READS_PER_INST = @as(u32, 2);
pub const D3D11_VS_INPUT_REGISTER_READ_PORTS = @as(u32, 1);
pub const D3D11_VS_OUTPUT_REGISTER_COMPONENTS = @as(u32, 4);
pub const D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = @as(u32, 32);
pub const D3D11_VS_OUTPUT_REGISTER_COUNT = @as(u32, 32);
pub const D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = @as(u32, 10);
pub const D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = @as(u32, 25);
pub const D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = @as(u32, 25);
pub const D3D11_1_UAV_SLOT_COUNT = @as(u32, 64);
pub const D3D11_2_TILED_RESOURCE_TILE_SIZE_IN_BYTES = @as(u32, 65536);
pub const D3D11_4_VIDEO_DECODER_MAX_HISTOGRAM_COMPONENTS = @as(u32, 4);
pub const D3D11_4_VIDEO_DECODER_HISTOGRAM_OFFSET_ALIGNMENT = @as(u32, 256);
pub const _FACD3D11 = @as(u32, 2172);
pub const D3D11_APPEND_ALIGNED_ELEMENT = @as(u32, 4294967295);
pub const D3D11_FILTER_REDUCTION_TYPE_MASK = @as(u32, 3);
pub const D3D11_FILTER_REDUCTION_TYPE_SHIFT = @as(u32, 7);
pub const D3D11_FILTER_TYPE_MASK = @as(u32, 3);
pub const D3D11_MIN_FILTER_SHIFT = @as(u32, 4);
pub const D3D11_MAG_FILTER_SHIFT = @as(u32, 2);
pub const D3D11_MIP_FILTER_SHIFT = @as(u32, 0);
pub const D3D11_COMPARISON_FILTERING_BIT = @as(u32, 128);
pub const D3D11_ANISOTROPIC_FILTERING_BIT = @as(u32, 64);
pub const D3D11_DECODER_PROFILE_MPEG2_MOCOMP = Guid.initString("e6a9f44b-61b0-4563-9ea4-63d2a3c6fe66");
pub const D3D11_DECODER_PROFILE_MPEG2_IDCT = Guid.initString("bf22ad00-03ea-4690-8077-473346209b7e");
pub const D3D11_DECODER_PROFILE_MPEG2_VLD = Guid.initString("ee27417f-5e28-4e65-beea-1d26b508adc9");
pub const D3D11_DECODER_PROFILE_MPEG1_VLD = Guid.initString("6f3ec719-3735-42cc-8063-65cc3cb36616");
pub const D3D11_DECODER_PROFILE_MPEG2and1_VLD = Guid.initString("86695f12-340e-4f04-9fd3-9253dd327460");
pub const D3D11_DECODER_PROFILE_H264_MOCOMP_NOFGT = Guid.initString("1b81be64-a0c7-11d3-b984-00c04f2e73c5");
pub const D3D11_DECODER_PROFILE_H264_MOCOMP_FGT = Guid.initString("1b81be65-a0c7-11d3-b984-00c04f2e73c5");
pub const D3D11_DECODER_PROFILE_H264_IDCT_NOFGT = Guid.initString("1b81be66-a0c7-11d3-b984-00c04f2e73c5");
pub const D3D11_DECODER_PROFILE_H264_IDCT_FGT = Guid.initString("1b81be67-a0c7-11d3-b984-00c04f2e73c5");
pub const D3D11_DECODER_PROFILE_H264_VLD_NOFGT = Guid.initString("1b81be68-a0c7-11d3-b984-00c04f2e73c5");
pub const D3D11_DECODER_PROFILE_H264_VLD_FGT = Guid.initString("1b81be69-a0c7-11d3-b984-00c04f2e73c5");
pub const D3D11_DECODER_PROFILE_H264_VLD_WITHFMOASO_NOFGT = Guid.initString("d5f04ff9-3418-45d8-9561-32a76aae2ddd");
pub const D3D11_DECODER_PROFILE_H264_VLD_STEREO_PROGRESSIVE_NOFGT = Guid.initString("d79be8da-0cf1-4c81-b82a-69a4e236f43d");
pub const D3D11_DECODER_PROFILE_H264_VLD_STEREO_NOFGT = Guid.initString("f9aaccbb-c2b6-4cfc-8779-5707b1760552");
pub const D3D11_DECODER_PROFILE_H264_VLD_MULTIVIEW_NOFGT = Guid.initString("705b9d82-76cf-49d6-b7e6-ac8872db013c");
pub const D3D11_DECODER_PROFILE_WMV8_POSTPROC = Guid.initString("1b81be80-a0c7-11d3-b984-00c04f2e73c5");
pub const D3D11_DECODER_PROFILE_WMV8_MOCOMP = Guid.initString("1b81be81-a0c7-11d3-b984-00c04f2e73c5");
pub const D3D11_DECODER_PROFILE_WMV9_POSTPROC = Guid.initString("1b81be90-a0c7-11d3-b984-00c04f2e73c5");
pub const D3D11_DECODER_PROFILE_WMV9_MOCOMP = Guid.initString("1b81be91-a0c7-11d3-b984-00c04f2e73c5");
pub const D3D11_DECODER_PROFILE_WMV9_IDCT = Guid.initString("1b81be94-a0c7-11d3-b984-00c04f2e73c5");
pub const D3D11_DECODER_PROFILE_VC1_POSTPROC = Guid.initString("1b81bea0-a0c7-11d3-b984-00c04f2e73c5");
pub const D3D11_DECODER_PROFILE_VC1_MOCOMP = Guid.initString("1b81bea1-a0c7-11d3-b984-00c04f2e73c5");
pub const D3D11_DECODER_PROFILE_VC1_IDCT = Guid.initString("1b81bea2-a0c7-11d3-b984-00c04f2e73c5");
pub const D3D11_DECODER_PROFILE_VC1_VLD = Guid.initString("1b81bea3-a0c7-11d3-b984-00c04f2e73c5");
pub const D3D11_DECODER_PROFILE_VC1_D2010 = Guid.initString("1b81bea4-a0c7-11d3-b984-00c04f2e73c5");
pub const D3D11_DECODER_PROFILE_MPEG4PT2_VLD_SIMPLE = Guid.initString("efd64d74-c9e8-41d7-a5e9-e9b0e39fa319");
pub const D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_NOGMC = Guid.initString("ed418a9f-010d-4eda-9ae3-9a65358d8d2e");
pub const D3D11_DECODER_PROFILE_MPEG4PT2_VLD_ADVSIMPLE_GMC = Guid.initString("ab998b5b-4258-44a9-9feb-94e597a6baae");
pub const D3D11_DECODER_PROFILE_HEVC_VLD_MAIN = Guid.initString("5b11d51b-2f4c-4452-bcc3-09f2a1160cc0");
pub const D3D11_DECODER_PROFILE_HEVC_VLD_MAIN10 = Guid.initString("107af0e0-ef1a-4d19-aba8-67a163073d13");
pub const D3D11_DECODER_PROFILE_VP9_VLD_PROFILE0 = Guid.initString("463707f8-a1d0-4585-876d-83aa6d60b89e");
pub const D3D11_DECODER_PROFILE_VP9_VLD_10BIT_PROFILE2 = Guid.initString("a4c749ef-6ecf-48aa-8448-50a7a1165ff7");
pub const D3D11_DECODER_PROFILE_VP8_VLD = Guid.initString("90b899ea-3a62-4705-88b3-8df04b2744e7");
pub const D3D11_DECODER_PROFILE_AV1_VLD_PROFILE0 = Guid.initString("b8be4ccb-cf53-46ba-8d59-d6b8a6da5d2a");
pub const D3D11_DECODER_PROFILE_AV1_VLD_PROFILE1 = Guid.initString("6936ff0f-45b1-4163-9cc1-646ef6946108");
pub const D3D11_DECODER_PROFILE_AV1_VLD_PROFILE2 = Guid.initString("0c5f2aa1-e541-4089-bb7b-98110a19d7c8");
pub const D3D11_DECODER_PROFILE_AV1_VLD_12BIT_PROFILE2 = Guid.initString("17127009-a00f-4ce1-994e-bf4081f6f3f0");
pub const D3D11_DECODER_PROFILE_AV1_VLD_12BIT_PROFILE2_420 = Guid.initString("2d80bed6-9cac-4835-9e91-327bbc4f9ee8");
pub const D3D11_CRYPTO_TYPE_AES128_CTR = Guid.initString("9b6bd711-4f74-41c9-9e7b-0be2d7d93b4f");
pub const D3D11_DECODER_ENCRYPTION_HW_CENC = Guid.initString("89d6ac4f-09f2-4229-b2cd-37740a6dfd81");
pub const D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CENC = Guid.initString("b0405235-c13d-44f2-9ae5-dd48e08e5b67");
pub const D3D11_DECODER_BITSTREAM_ENCRYPTION_TYPE_CBCS = Guid.initString("422d9319-9d21-4bb7-9371-faf5a82c3e04");
pub const D3D11_KEY_EXCHANGE_HW_PROTECTION = Guid.initString("b1170d8a-628d-4da3-ad3b-82ddb08b4970");
pub const D3D11_AUTHENTICATED_QUERY_PROTECTION = Guid.initString("a84eb584-c495-48aa-b94d-8bd2d6fbce05");
pub const D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE = Guid.initString("bc1b18a5-b1fb-42ab-bd94-b5828b4bf7be");
pub const D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE = Guid.initString("ec1c539d-8cff-4e2a-bcc4-f5692f99f480");
pub const D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION = Guid.initString("2634499e-d018-4d74-ac17-7f724059528d");
pub const D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT = Guid.initString("0db207b3-9450-46a6-82de-1b96d44f9cf2");
pub const D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS = Guid.initString("649bbadb-f0f4-4639-a15b-24393fc3abac");
pub const D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT = Guid.initString("012f0bd6-e662-4474-befd-aa53e5143c6d");
pub const D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT = Guid.initString("2c042b5e-8c07-46d5-aabe-8f75cbad4c31");
pub const D3D11_AUTHENTICATED_QUERY_OUTPUT_ID = Guid.initString("839ddca3-9b4e-41e4-b053-892bd2a11ee7");
pub const D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ATTRIBUTES = Guid.initString("6214d9d2-432c-4abb-9fce-216eea269e3b");
pub const D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID_COUNT = Guid.initString("b30f7066-203c-4b07-93fc-ceaafd61241e");
pub const D3D11_AUTHENTICATED_QUERY_ENCRYPTION_WHEN_ACCESSIBLE_GUID = Guid.initString("f83a5958-e986-4bda-beb0-411f6a7a01b7");
pub const D3D11_AUTHENTICATED_QUERY_CURRENT_ENCRYPTION_WHEN_ACCESSIBLE = Guid.initString("ec1791c7-dad3-4f15-9ec3-faa93d60d4f0");
pub const D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE = Guid.initString("06114bdb-3523-470a-8dca-fbc2845154f0");
pub const D3D11_AUTHENTICATED_CONFIGURE_PROTECTION = Guid.initString("50455658-3f47-4362-bf99-bfdfcde9ed29");
pub const D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION = Guid.initString("6346cc54-2cfc-4ad4-8224-d15837de7700");
pub const D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE = Guid.initString("0772d047-1b40-48e8-9ca6-b5f510de9f01");
pub const D3D11_AUTHENTICATED_CONFIGURE_ENCRYPTION_WHEN_ACCESSIBLE = Guid.initString("41fff286-6ae0-4d43-9d55-a46e9efd158a");
pub const D3D11_KEY_EXCHANGE_RSAES_OAEP = Guid.initString("c1949895-d72a-4a1d-8e5d-ed857d171520");
pub const D3D11_SDK_VERSION = @as(u32, 7);
pub const D3D11_PACKED_TILE = @as(u32, 4294967295);
pub const D3D11_SDK_LAYERS_VERSION = @as(u32, 1);
pub const D3D11_DEBUG_FEATURE_FLUSH_PER_RENDER_OP = @as(u32, 1);
pub const D3D11_DEBUG_FEATURE_FINISH_PER_RENDER_OP = @as(u32, 2);
pub const D3D11_DEBUG_FEATURE_PRESENT_PER_RENDER_OP = @as(u32, 4);
pub const D3D11_DEBUG_FEATURE_ALWAYS_DISCARD_OFFERED_RESOURCE = @as(u32, 8);
pub const D3D11_DEBUG_FEATURE_NEVER_DISCARD_OFFERED_RESOURCE = @as(u32, 16);
pub const D3D11_DEBUG_FEATURE_AVOID_BEHAVIOR_CHANGING_DEBUG_AIDS = @as(u32, 64);
pub const D3D11_DEBUG_FEATURE_DISABLE_TILED_RESOURCE_MAPPING_TRACKING_AND_VALIDATION = @as(u32, 128);
pub const DXGI_DEBUG_D3D11 = Guid.initString("4b99317b-ac39-4aa6-bb0b-baa04784798f");
pub const D3D11_REGKEY_PATH = "Software\\Microsoft\\Direct3D";
pub const D3D11_MUTE_DEBUG_OUTPUT = "MuteDebugOutput";
pub const D3D11_ENABLE_BREAK_ON_MESSAGE = "EnableBreakOnMessage";
pub const D3D11_INFOQUEUE_STORAGE_FILTER_OVERRIDE = "InfoQueueStorageFilterOverride";
pub const D3D11_MUTE_CATEGORY = "Mute_CATEGORY_%s";
pub const D3D11_MUTE_SEVERITY = "Mute_SEVERITY_%s";
pub const D3D11_MUTE_ID_STRING = "Mute_ID_%s";
pub const D3D11_MUTE_ID_DECIMAL = "Mute_ID_%d";
pub const D3D11_UNMUTE_SEVERITY_INFO = "Unmute_SEVERITY_INFO";
pub const D3D11_BREAKON_CATEGORY = "BreakOn_CATEGORY_%s";
pub const D3D11_BREAKON_SEVERITY = "BreakOn_SEVERITY_%s";
pub const D3D11_BREAKON_ID_STRING = "BreakOn_ID_%s";
pub const D3D11_BREAKON_ID_DECIMAL = "BreakOn_ID_%d";
pub const D3D11_APPSIZE_STRING = "Size";
pub const D3D11_APPNAME_STRING = "Name";
pub const D3D11_FORCE_DEBUGGABLE = "ForceDebuggable";
pub const D3D11_FORCE_SHADER_SKIP_OPTIMIZATION = "ForceShaderSkipOptimization";
pub const D3D11_INFO_QUEUE_DEFAULT_MESSAGE_COUNT_LIMIT = @as(u32, 1024);
pub const D3D_RETURN_PARAMETER_INDEX = @as(i32, -1);
pub const D3D_SHADER_REQUIRES_DOUBLES = @as(u32, 1);
pub const D3D_SHADER_REQUIRES_EARLY_DEPTH_STENCIL = @as(u32, 2);
pub const D3D_SHADER_REQUIRES_UAVS_AT_EVERY_STAGE = @as(u32, 4);
pub const D3D_SHADER_REQUIRES_64_UAVS = @as(u32, 8);
pub const D3D_SHADER_REQUIRES_MINIMUM_PRECISION = @as(u32, 16);
pub const D3D_SHADER_REQUIRES_11_1_DOUBLE_EXTENSIONS = @as(u32, 32);
pub const D3D_SHADER_REQUIRES_11_1_SHADER_EXTENSIONS = @as(u32, 64);
pub const D3D_SHADER_REQUIRES_LEVEL_9_COMPARISON_FILTERING = @as(u32, 128);
pub const D3D_SHADER_REQUIRES_TILED_RESOURCES = @as(u32, 256);
pub const D3D11_TRACE_COMPONENT_X = @as(u32, 1);
pub const D3D11_TRACE_COMPONENT_Y = @as(u32, 2);
pub const D3D11_TRACE_COMPONENT_Z = @as(u32, 4);
pub const D3D11_TRACE_COMPONENT_W = @as(u32, 8);
pub const D3D11_SHADER_TRACE_FLAG_RECORD_REGISTER_WRITES = @as(u32, 1);
pub const D3D11_SHADER_TRACE_FLAG_RECORD_REGISTER_READS = @as(u32, 2);
pub const D3D11_TRACE_REGISTER_FLAGS_RELATIVE_INDEXING = @as(u32, 1);
pub const D3D11_TRACE_MISC_GS_EMIT = @as(u32, 1);
pub const D3D11_TRACE_MISC_GS_CUT = @as(u32, 2);
pub const D3D11_TRACE_MISC_PS_DISCARD = @as(u32, 4);
pub const D3D11_TRACE_MISC_GS_EMIT_STREAM = @as(u32, 8);
pub const D3D11_TRACE_MISC_GS_CUT_STREAM = @as(u32, 16);
pub const D3D11_TRACE_MISC_HALT = @as(u32, 32);
pub const D3D11_TRACE_MISC_MESSAGE = @as(u32, 64);
pub const D3DCSX_DLL_W = "d3dcsx_47.dll";
pub const D3DCSX_DLL_A = "d3dcsx_47.dll";
pub const D3DCSX_DLL = "d3dcsx_47.dll";
pub const D3DX11_FFT_MAX_PRECOMPUTE_BUFFERS = @as(u32, 4);
pub const D3DX11_FFT_MAX_TEMP_BUFFERS = @as(u32, 4);
pub const D3DX11_FFT_MAX_DIMENSIONS = @as(u32, 32);

//--------------------------------------------------------------------------------
// Section: Types (390)
//--------------------------------------------------------------------------------
pub const D3D11_INPUT_CLASSIFICATION = enum(i32) {
    VERTEX_DATA = 0,
    INSTANCE_DATA = 1,
};
pub const D3D11_INPUT_PER_VERTEX_DATA = D3D11_INPUT_CLASSIFICATION.VERTEX_DATA;
pub const D3D11_INPUT_PER_INSTANCE_DATA = D3D11_INPUT_CLASSIFICATION.INSTANCE_DATA;

pub const D3D11_INPUT_ELEMENT_DESC = extern struct {
    SemanticName: ?[*:0]const u8,
    SemanticIndex: u32,
    Format: DXGI_FORMAT,
    InputSlot: u32,
    AlignedByteOffset: u32,
    InputSlotClass: D3D11_INPUT_CLASSIFICATION,
    InstanceDataStepRate: u32,
};

pub const D3D11_FILL_MODE = enum(i32) {
    WIREFRAME = 2,
    SOLID = 3,
};
pub const D3D11_FILL_WIREFRAME = D3D11_FILL_MODE.WIREFRAME;
pub const D3D11_FILL_SOLID = D3D11_FILL_MODE.SOLID;

pub const D3D11_CULL_MODE = enum(i32) {
    NONE = 1,
    FRONT = 2,
    BACK = 3,
};
pub const D3D11_CULL_NONE = D3D11_CULL_MODE.NONE;
pub const D3D11_CULL_FRONT = D3D11_CULL_MODE.FRONT;
pub const D3D11_CULL_BACK = D3D11_CULL_MODE.BACK;

pub const D3D11_SO_DECLARATION_ENTRY = extern struct {
    Stream: u32,
    SemanticName: ?[*:0]const u8,
    SemanticIndex: u32,
    StartComponent: u8,
    ComponentCount: u8,
    OutputSlot: u8,
};

pub const D3D11_VIEWPORT = extern struct {
    TopLeftX: f32,
    TopLeftY: f32,
    Width: f32,
    Height: f32,
    MinDepth: f32,
    MaxDepth: f32,
};

pub const D3D11_DRAW_INSTANCED_INDIRECT_ARGS = extern struct {
    VertexCountPerInstance: u32,
    InstanceCount: u32,
    StartVertexLocation: u32,
    StartInstanceLocation: u32,
};

pub const D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS = extern struct {
    IndexCountPerInstance: u32,
    InstanceCount: u32,
    StartIndexLocation: u32,
    BaseVertexLocation: i32,
    StartInstanceLocation: u32,
};

pub const D3D11_RESOURCE_DIMENSION = enum(i32) {
    UNKNOWN = 0,
    BUFFER = 1,
    TEXTURE1D = 2,
    TEXTURE2D = 3,
    TEXTURE3D = 4,
};
pub const D3D11_RESOURCE_DIMENSION_UNKNOWN = D3D11_RESOURCE_DIMENSION.UNKNOWN;
pub const D3D11_RESOURCE_DIMENSION_BUFFER = D3D11_RESOURCE_DIMENSION.BUFFER;
pub const D3D11_RESOURCE_DIMENSION_TEXTURE1D = D3D11_RESOURCE_DIMENSION.TEXTURE1D;
pub const D3D11_RESOURCE_DIMENSION_TEXTURE2D = D3D11_RESOURCE_DIMENSION.TEXTURE2D;
pub const D3D11_RESOURCE_DIMENSION_TEXTURE3D = D3D11_RESOURCE_DIMENSION.TEXTURE3D;

pub const D3D11_DSV_DIMENSION = enum(i32) {
    UNKNOWN = 0,
    TEXTURE1D = 1,
    TEXTURE1DARRAY = 2,
    TEXTURE2D = 3,
    TEXTURE2DARRAY = 4,
    TEXTURE2DMS = 5,
    TEXTURE2DMSARRAY = 6,
};
pub const D3D11_DSV_DIMENSION_UNKNOWN = D3D11_DSV_DIMENSION.UNKNOWN;
pub const D3D11_DSV_DIMENSION_TEXTURE1D = D3D11_DSV_DIMENSION.TEXTURE1D;
pub const D3D11_DSV_DIMENSION_TEXTURE1DARRAY = D3D11_DSV_DIMENSION.TEXTURE1DARRAY;
pub const D3D11_DSV_DIMENSION_TEXTURE2D = D3D11_DSV_DIMENSION.TEXTURE2D;
pub const D3D11_DSV_DIMENSION_TEXTURE2DARRAY = D3D11_DSV_DIMENSION.TEXTURE2DARRAY;
pub const D3D11_DSV_DIMENSION_TEXTURE2DMS = D3D11_DSV_DIMENSION.TEXTURE2DMS;
pub const D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = D3D11_DSV_DIMENSION.TEXTURE2DMSARRAY;

pub const D3D11_RTV_DIMENSION = enum(i32) {
    UNKNOWN = 0,
    BUFFER = 1,
    TEXTURE1D = 2,
    TEXTURE1DARRAY = 3,
    TEXTURE2D = 4,
    TEXTURE2DARRAY = 5,
    TEXTURE2DMS = 6,
    TEXTURE2DMSARRAY = 7,
    TEXTURE3D = 8,
};
pub const D3D11_RTV_DIMENSION_UNKNOWN = D3D11_RTV_DIMENSION.UNKNOWN;
pub const D3D11_RTV_DIMENSION_BUFFER = D3D11_RTV_DIMENSION.BUFFER;
pub const D3D11_RTV_DIMENSION_TEXTURE1D = D3D11_RTV_DIMENSION.TEXTURE1D;
pub const D3D11_RTV_DIMENSION_TEXTURE1DARRAY = D3D11_RTV_DIMENSION.TEXTURE1DARRAY;
pub const D3D11_RTV_DIMENSION_TEXTURE2D = D3D11_RTV_DIMENSION.TEXTURE2D;
pub const D3D11_RTV_DIMENSION_TEXTURE2DARRAY = D3D11_RTV_DIMENSION.TEXTURE2DARRAY;
pub const D3D11_RTV_DIMENSION_TEXTURE2DMS = D3D11_RTV_DIMENSION.TEXTURE2DMS;
pub const D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = D3D11_RTV_DIMENSION.TEXTURE2DMSARRAY;
pub const D3D11_RTV_DIMENSION_TEXTURE3D = D3D11_RTV_DIMENSION.TEXTURE3D;

pub const D3D11_UAV_DIMENSION = enum(i32) {
    UNKNOWN = 0,
    BUFFER = 1,
    TEXTURE1D = 2,
    TEXTURE1DARRAY = 3,
    TEXTURE2D = 4,
    TEXTURE2DARRAY = 5,
    TEXTURE3D = 8,
};
pub const D3D11_UAV_DIMENSION_UNKNOWN = D3D11_UAV_DIMENSION.UNKNOWN;
pub const D3D11_UAV_DIMENSION_BUFFER = D3D11_UAV_DIMENSION.BUFFER;
pub const D3D11_UAV_DIMENSION_TEXTURE1D = D3D11_UAV_DIMENSION.TEXTURE1D;
pub const D3D11_UAV_DIMENSION_TEXTURE1DARRAY = D3D11_UAV_DIMENSION.TEXTURE1DARRAY;
pub const D3D11_UAV_DIMENSION_TEXTURE2D = D3D11_UAV_DIMENSION.TEXTURE2D;
pub const D3D11_UAV_DIMENSION_TEXTURE2DARRAY = D3D11_UAV_DIMENSION.TEXTURE2DARRAY;
pub const D3D11_UAV_DIMENSION_TEXTURE3D = D3D11_UAV_DIMENSION.TEXTURE3D;

pub const D3D11_USAGE = enum(i32) {
    DEFAULT = 0,
    IMMUTABLE = 1,
    DYNAMIC = 2,
    STAGING = 3,
};
pub const D3D11_USAGE_DEFAULT = D3D11_USAGE.DEFAULT;
pub const D3D11_USAGE_IMMUTABLE = D3D11_USAGE.IMMUTABLE;
pub const D3D11_USAGE_DYNAMIC = D3D11_USAGE.DYNAMIC;
pub const D3D11_USAGE_STAGING = D3D11_USAGE.STAGING;

pub const D3D11_BIND_FLAG = enum(u32) {
    VERTEX_BUFFER = 1,
    INDEX_BUFFER = 2,
    CONSTANT_BUFFER = 4,
    SHADER_RESOURCE = 8,
    STREAM_OUTPUT = 16,
    RENDER_TARGET = 32,
    DEPTH_STENCIL = 64,
    UNORDERED_ACCESS = 128,
    DECODER = 512,
    VIDEO_ENCODER = 1024,
    _,
    pub fn initFlags(o: struct {
        VERTEX_BUFFER: u1 = 0,
        INDEX_BUFFER: u1 = 0,
        CONSTANT_BUFFER: u1 = 0,
        SHADER_RESOURCE: u1 = 0,
        STREAM_OUTPUT: u1 = 0,
        RENDER_TARGET: u1 = 0,
        DEPTH_STENCIL: u1 = 0,
        UNORDERED_ACCESS: u1 = 0,
        DECODER: u1 = 0,
        VIDEO_ENCODER: u1 = 0,
    }) D3D11_BIND_FLAG {
        return @as(D3D11_BIND_FLAG, @enumFromInt((if (o.VERTEX_BUFFER == 1) @intFromEnum(D3D11_BIND_FLAG.VERTEX_BUFFER) else 0) | (if (o.INDEX_BUFFER == 1) @intFromEnum(D3D11_BIND_FLAG.INDEX_BUFFER) else 0) | (if (o.CONSTANT_BUFFER == 1) @intFromEnum(D3D11_BIND_FLAG.CONSTANT_BUFFER) else 0) | (if (o.SHADER_RESOURCE == 1) @intFromEnum(D3D11_BIND_FLAG.SHADER_RESOURCE) else 0) | (if (o.STREAM_OUTPUT == 1) @intFromEnum(D3D11_BIND_FLAG.STREAM_OUTPUT) else 0) | (if (o.RENDER_TARGET == 1) @intFromEnum(D3D11_BIND_FLAG.RENDER_TARGET) else 0) | (if (o.DEPTH_STENCIL == 1) @intFromEnum(D3D11_BIND_FLAG.DEPTH_STENCIL) else 0) | (if (o.UNORDERED_ACCESS == 1) @intFromEnum(D3D11_BIND_FLAG.UNORDERED_ACCESS) else 0) | (if (o.DECODER == 1) @intFromEnum(D3D11_BIND_FLAG.DECODER) else 0) | (if (o.VIDEO_ENCODER == 1) @intFromEnum(D3D11_BIND_FLAG.VIDEO_ENCODER) else 0)));
    }
};
pub const D3D11_BIND_VERTEX_BUFFER = D3D11_BIND_FLAG.VERTEX_BUFFER;
pub const D3D11_BIND_INDEX_BUFFER = D3D11_BIND_FLAG.INDEX_BUFFER;
pub const D3D11_BIND_CONSTANT_BUFFER = D3D11_BIND_FLAG.CONSTANT_BUFFER;
pub const D3D11_BIND_SHADER_RESOURCE = D3D11_BIND_FLAG.SHADER_RESOURCE;
pub const D3D11_BIND_STREAM_OUTPUT = D3D11_BIND_FLAG.STREAM_OUTPUT;
pub const D3D11_BIND_RENDER_TARGET = D3D11_BIND_FLAG.RENDER_TARGET;
pub const D3D11_BIND_DEPTH_STENCIL = D3D11_BIND_FLAG.DEPTH_STENCIL;
pub const D3D11_BIND_UNORDERED_ACCESS = D3D11_BIND_FLAG.UNORDERED_ACCESS;
pub const D3D11_BIND_DECODER = D3D11_BIND_FLAG.DECODER;
pub const D3D11_BIND_VIDEO_ENCODER = D3D11_BIND_FLAG.VIDEO_ENCODER;

pub const D3D11_CPU_ACCESS_FLAG = enum(u32) {
    WRITE = 65536,
    READ = 131072,
    _,
    pub fn initFlags(o: struct {
        WRITE: u1 = 0,
        READ: u1 = 0,
    }) D3D11_CPU_ACCESS_FLAG {
        return @as(D3D11_CPU_ACCESS_FLAG, @enumFromInt((if (o.WRITE == 1) @intFromEnum(D3D11_CPU_ACCESS_FLAG.WRITE) else 0) | (if (o.READ == 1) @intFromEnum(D3D11_CPU_ACCESS_FLAG.READ) else 0)));
    }
};
pub const D3D11_CPU_ACCESS_WRITE = D3D11_CPU_ACCESS_FLAG.WRITE;
pub const D3D11_CPU_ACCESS_READ = D3D11_CPU_ACCESS_FLAG.READ;

pub const D3D11_RESOURCE_MISC_FLAG = enum(u32) {
    GENERATE_MIPS = 1,
    SHARED = 2,
    TEXTURECUBE = 4,
    DRAWINDIRECT_ARGS = 16,
    BUFFER_ALLOW_RAW_VIEWS = 32,
    BUFFER_STRUCTURED = 64,
    RESOURCE_CLAMP = 128,
    SHARED_KEYEDMUTEX = 256,
    GDI_COMPATIBLE = 512,
    SHARED_NTHANDLE = 2048,
    RESTRICTED_CONTENT = 4096,
    RESTRICT_SHARED_RESOURCE = 8192,
    RESTRICT_SHARED_RESOURCE_DRIVER = 16384,
    GUARDED = 32768,
    TILE_POOL = 131072,
    TILED = 262144,
    HW_PROTECTED = 524288,
    SHARED_DISPLAYABLE = 1048576,
    SHARED_EXCLUSIVE_WRITER = 2097152,
    _,
    pub fn initFlags(o: struct {
        GENERATE_MIPS: u1 = 0,
        SHARED: u1 = 0,
        TEXTURECUBE: u1 = 0,
        DRAWINDIRECT_ARGS: u1 = 0,
        BUFFER_ALLOW_RAW_VIEWS: u1 = 0,
        BUFFER_STRUCTURED: u1 = 0,
        RESOURCE_CLAMP: u1 = 0,
        SHARED_KEYEDMUTEX: u1 = 0,
        GDI_COMPATIBLE: u1 = 0,
        SHARED_NTHANDLE: u1 = 0,
        RESTRICTED_CONTENT: u1 = 0,
        RESTRICT_SHARED_RESOURCE: u1 = 0,
        RESTRICT_SHARED_RESOURCE_DRIVER: u1 = 0,
        GUARDED: u1 = 0,
        TILE_POOL: u1 = 0,
        TILED: u1 = 0,
        HW_PROTECTED: u1 = 0,
        SHARED_DISPLAYABLE: u1 = 0,
        SHARED_EXCLUSIVE_WRITER: u1 = 0,
    }) D3D11_RESOURCE_MISC_FLAG {
        return @as(D3D11_RESOURCE_MISC_FLAG, @enumFromInt((if (o.GENERATE_MIPS == 1) @intFromEnum(D3D11_RESOURCE_MISC_FLAG.GENERATE_MIPS) else 0) | (if (o.SHARED == 1) @intFromEnum(D3D11_RESOURCE_MISC_FLAG.SHARED) else 0) | (if (o.TEXTURECUBE == 1) @intFromEnum(D3D11_RESOURCE_MISC_FLAG.TEXTURECUBE) else 0) | (if (o.DRAWINDIRECT_ARGS == 1) @intFromEnum(D3D11_RESOURCE_MISC_FLAG.DRAWINDIRECT_ARGS) else 0) | (if (o.BUFFER_ALLOW_RAW_VIEWS == 1) @intFromEnum(D3D11_RESOURCE_MISC_FLAG.BUFFER_ALLOW_RAW_VIEWS) else 0) | (if (o.BUFFER_STRUCTURED == 1) @intFromEnum(D3D11_RESOURCE_MISC_FLAG.BUFFER_STRUCTURED) else 0) | (if (o.RESOURCE_CLAMP == 1) @intFromEnum(D3D11_RESOURCE_MISC_FLAG.RESOURCE_CLAMP) else 0) | (if (o.SHARED_KEYEDMUTEX == 1) @intFromEnum(D3D11_RESOURCE_MISC_FLAG.SHARED_KEYEDMUTEX) else 0) | (if (o.GDI_COMPATIBLE == 1) @intFromEnum(D3D11_RESOURCE_MISC_FLAG.GDI_COMPATIBLE) else 0) | (if (o.SHARED_NTHANDLE == 1) @intFromEnum(D3D11_RESOURCE_MISC_FLAG.SHARED_NTHANDLE) else 0) | (if (o.RESTRICTED_CONTENT == 1) @intFromEnum(D3D11_RESOURCE_MISC_FLAG.RESTRICTED_CONTENT) else 0) | (if (o.RESTRICT_SHARED_RESOURCE == 1) @intFromEnum(D3D11_RESOURCE_MISC_FLAG.RESTRICT_SHARED_RESOURCE) else 0) | (if (o.RESTRICT_SHARED_RESOURCE_DRIVER == 1) @intFromEnum(D3D11_RESOURCE_MISC_FLAG.RESTRICT_SHARED_RESOURCE_DRIVER) else 0) | (if (o.GUARDED == 1) @intFromEnum(D3D11_RESOURCE_MISC_FLAG.GUARDED) else 0) | (if (o.TILE_POOL == 1) @intFromEnum(D3D11_RESOURCE_MISC_FLAG.TILE_POOL) else 0) | (if (o.TILED == 1) @intFromEnum(D3D11_RESOURCE_MISC_FLAG.TILED) else 0) | (if (o.HW_PROTECTED == 1) @intFromEnum(D3D11_RESOURCE_MISC_FLAG.HW_PROTECTED) else 0) | (if (o.SHARED_DISPLAYABLE == 1) @intFromEnum(D3D11_RESOURCE_MISC_FLAG.SHARED_DISPLAYABLE) else 0) | (if (o.SHARED_EXCLUSIVE_WRITER == 1) @intFromEnum(D3D11_RESOURCE_MISC_FLAG.SHARED_EXCLUSIVE_WRITER) else 0)));
    }
};
pub const D3D11_RESOURCE_MISC_GENERATE_MIPS = D3D11_RESOURCE_MISC_FLAG.GENERATE_MIPS;
pub const D3D11_RESOURCE_MISC_SHARED = D3D11_RESOURCE_MISC_FLAG.SHARED;
pub const D3D11_RESOURCE_MISC_TEXTURECUBE = D3D11_RESOURCE_MISC_FLAG.TEXTURECUBE;
pub const D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS = D3D11_RESOURCE_MISC_FLAG.DRAWINDIRECT_ARGS;
pub const D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS = D3D11_RESOURCE_MISC_FLAG.BUFFER_ALLOW_RAW_VIEWS;
pub const D3D11_RESOURCE_MISC_BUFFER_STRUCTURED = D3D11_RESOURCE_MISC_FLAG.BUFFER_STRUCTURED;
pub const D3D11_RESOURCE_MISC_RESOURCE_CLAMP = D3D11_RESOURCE_MISC_FLAG.RESOURCE_CLAMP;
pub const D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX = D3D11_RESOURCE_MISC_FLAG.SHARED_KEYEDMUTEX;
pub const D3D11_RESOURCE_MISC_GDI_COMPATIBLE = D3D11_RESOURCE_MISC_FLAG.GDI_COMPATIBLE;
pub const D3D11_RESOURCE_MISC_SHARED_NTHANDLE = D3D11_RESOURCE_MISC_FLAG.SHARED_NTHANDLE;
pub const D3D11_RESOURCE_MISC_RESTRICTED_CONTENT = D3D11_RESOURCE_MISC_FLAG.RESTRICTED_CONTENT;
pub const D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE = D3D11_RESOURCE_MISC_FLAG.RESTRICT_SHARED_RESOURCE;
pub const D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER = D3D11_RESOURCE_MISC_FLAG.RESTRICT_SHARED_RESOURCE_DRIVER;
pub const D3D11_RESOURCE_MISC_GUARDED = D3D11_RESOURCE_MISC_FLAG.GUARDED;
pub const D3D11_RESOURCE_MISC_TILE_POOL = D3D11_RESOURCE_MISC_FLAG.TILE_POOL;
pub const D3D11_RESOURCE_MISC_TILED = D3D11_RESOURCE_MISC_FLAG.TILED;
pub const D3D11_RESOURCE_MISC_HW_PROTECTED = D3D11_RESOURCE_MISC_FLAG.HW_PROTECTED;
pub const D3D11_RESOURCE_MISC_SHARED_DISPLAYABLE = D3D11_RESOURCE_MISC_FLAG.SHARED_DISPLAYABLE;
pub const D3D11_RESOURCE_MISC_SHARED_EXCLUSIVE_WRITER = D3D11_RESOURCE_MISC_FLAG.SHARED_EXCLUSIVE_WRITER;

pub const D3D11_MAP = enum(i32) {
    READ = 1,
    WRITE = 2,
    READ_WRITE = 3,
    WRITE_DISCARD = 4,
    WRITE_NO_OVERWRITE = 5,
};
pub const D3D11_MAP_READ = D3D11_MAP.READ;
pub const D3D11_MAP_WRITE = D3D11_MAP.WRITE;
pub const D3D11_MAP_READ_WRITE = D3D11_MAP.READ_WRITE;
pub const D3D11_MAP_WRITE_DISCARD = D3D11_MAP.WRITE_DISCARD;
pub const D3D11_MAP_WRITE_NO_OVERWRITE = D3D11_MAP.WRITE_NO_OVERWRITE;

pub const D3D11_MAP_FLAG = enum(i32) {
    T = 1048576,
};
pub const D3D11_MAP_FLAG_DO_NOT_WAIT = D3D11_MAP_FLAG.T;

pub const D3D11_RAISE_FLAG = enum(i32) {
    R = 1,
};
pub const D3D11_RAISE_FLAG_DRIVER_INTERNAL_ERROR = D3D11_RAISE_FLAG.R;

pub const D3D11_CLEAR_FLAG = enum(i32) {
    DEPTH = 1,
    STENCIL = 2,
};
pub const D3D11_CLEAR_DEPTH = D3D11_CLEAR_FLAG.DEPTH;
pub const D3D11_CLEAR_STENCIL = D3D11_CLEAR_FLAG.STENCIL;

pub const D3D11_BOX = extern struct {
    left: u32,
    top: u32,
    front: u32,
    right: u32,
    bottom: u32,
    back: u32,
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11DeviceChild_Value = Guid.initString("1841e5c8-16b0-489b-bcc8-44cfb0d5deae");
pub const IID_ID3D11DeviceChild = &IID_ID3D11DeviceChild_Value;
pub const ID3D11DeviceChild = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDevice: *const fn (
            self: *const ID3D11DeviceChild,
            pp_device: ?*?*ID3D11Device,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetPrivateData: *const fn (
            self: *const ID3D11DeviceChild,
            guid: ?*const Guid,
            p_data_size: ?*u32,
            // TODO: what to do with BytesParamIndex 1?
            p_data: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrivateData: *const fn (
            self: *const ID3D11DeviceChild,
            guid: ?*const Guid,
            data_size: u32,
            // TODO: what to do with BytesParamIndex 1?
            p_data: ?*const anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrivateDataInterface: *const fn (
            self: *const ID3D11DeviceChild,
            guid: ?*const Guid,
            p_data: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDevice(self: *const T, pp_device_: ?*?*ID3D11Device) void {
                return @as(*const ID3D11DeviceChild.VTable, @ptrCast(self.vtable)).GetDevice(@as(*const ID3D11DeviceChild, @ptrCast(self)), pp_device_);
            }
            pub inline fn getPrivateData(self: *const T, guid_: ?*const Guid, p_data_size_: ?*u32, p_data_: ?*anyopaque) HRESULT {
                return @as(*const ID3D11DeviceChild.VTable, @ptrCast(self.vtable)).GetPrivateData(@as(*const ID3D11DeviceChild, @ptrCast(self)), guid_, p_data_size_, p_data_);
            }
            pub inline fn setPrivateData(self: *const T, guid_: ?*const Guid, data_size_: u32, p_data_: ?*const anyopaque) HRESULT {
                return @as(*const ID3D11DeviceChild.VTable, @ptrCast(self.vtable)).SetPrivateData(@as(*const ID3D11DeviceChild, @ptrCast(self)), guid_, data_size_, p_data_);
            }
            pub inline fn setPrivateDataInterface(self: *const T, guid_: ?*const Guid, p_data_: ?*IUnknown) HRESULT {
                return @as(*const ID3D11DeviceChild.VTable, @ptrCast(self.vtable)).SetPrivateDataInterface(@as(*const ID3D11DeviceChild, @ptrCast(self)), guid_, p_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_COMPARISON_FUNC = enum(i32) {
    NEVER = 1,
    LESS = 2,
    EQUAL = 3,
    LESS_EQUAL = 4,
    GREATER = 5,
    NOT_EQUAL = 6,
    GREATER_EQUAL = 7,
    ALWAYS = 8,
};
pub const D3D11_COMPARISON_NEVER = D3D11_COMPARISON_FUNC.NEVER;
pub const D3D11_COMPARISON_LESS = D3D11_COMPARISON_FUNC.LESS;
pub const D3D11_COMPARISON_EQUAL = D3D11_COMPARISON_FUNC.EQUAL;
pub const D3D11_COMPARISON_LESS_EQUAL = D3D11_COMPARISON_FUNC.LESS_EQUAL;
pub const D3D11_COMPARISON_GREATER = D3D11_COMPARISON_FUNC.GREATER;
pub const D3D11_COMPARISON_NOT_EQUAL = D3D11_COMPARISON_FUNC.NOT_EQUAL;
pub const D3D11_COMPARISON_GREATER_EQUAL = D3D11_COMPARISON_FUNC.GREATER_EQUAL;
pub const D3D11_COMPARISON_ALWAYS = D3D11_COMPARISON_FUNC.ALWAYS;

pub const D3D11_DEPTH_WRITE_MASK = enum(i32) {
    ZERO = 0,
    ALL = 1,
};
pub const D3D11_DEPTH_WRITE_MASK_ZERO = D3D11_DEPTH_WRITE_MASK.ZERO;
pub const D3D11_DEPTH_WRITE_MASK_ALL = D3D11_DEPTH_WRITE_MASK.ALL;

pub const D3D11_STENCIL_OP = enum(i32) {
    KEEP = 1,
    ZERO = 2,
    REPLACE = 3,
    INCR_SAT = 4,
    DECR_SAT = 5,
    INVERT = 6,
    INCR = 7,
    DECR = 8,
};
pub const D3D11_STENCIL_OP_KEEP = D3D11_STENCIL_OP.KEEP;
pub const D3D11_STENCIL_OP_ZERO = D3D11_STENCIL_OP.ZERO;
pub const D3D11_STENCIL_OP_REPLACE = D3D11_STENCIL_OP.REPLACE;
pub const D3D11_STENCIL_OP_INCR_SAT = D3D11_STENCIL_OP.INCR_SAT;
pub const D3D11_STENCIL_OP_DECR_SAT = D3D11_STENCIL_OP.DECR_SAT;
pub const D3D11_STENCIL_OP_INVERT = D3D11_STENCIL_OP.INVERT;
pub const D3D11_STENCIL_OP_INCR = D3D11_STENCIL_OP.INCR;
pub const D3D11_STENCIL_OP_DECR = D3D11_STENCIL_OP.DECR;

pub const D3D11_DEPTH_STENCILOP_DESC = extern struct {
    StencilFailOp: D3D11_STENCIL_OP,
    StencilDepthFailOp: D3D11_STENCIL_OP,
    StencilPassOp: D3D11_STENCIL_OP,
    StencilFunc: D3D11_COMPARISON_FUNC,
};

pub const D3D11_DEPTH_STENCIL_DESC = extern struct {
    DepthEnable: BOOL,
    DepthWriteMask: D3D11_DEPTH_WRITE_MASK,
    DepthFunc: D3D11_COMPARISON_FUNC,
    StencilEnable: BOOL,
    StencilReadMask: u8,
    StencilWriteMask: u8,
    FrontFace: D3D11_DEPTH_STENCILOP_DESC,
    BackFace: D3D11_DEPTH_STENCILOP_DESC,
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11DepthStencilState_Value = Guid.initString("03823efb-8d8f-4e1c-9aa2-f64bb2cbfdf1");
pub const IID_ID3D11DepthStencilState = &IID_ID3D11DepthStencilState_Value;
pub const ID3D11DepthStencilState = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetDesc: *const fn (
            self: *const ID3D11DepthStencilState,
            p_desc: ?*D3D11_DEPTH_STENCIL_DESC,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_DEPTH_STENCIL_DESC) void {
                return @as(*const ID3D11DepthStencilState.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11DepthStencilState, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_BLEND = enum(i32) {
    ZERO = 1,
    ONE = 2,
    SRC_COLOR = 3,
    INV_SRC_COLOR = 4,
    SRC_ALPHA = 5,
    INV_SRC_ALPHA = 6,
    DEST_ALPHA = 7,
    INV_DEST_ALPHA = 8,
    DEST_COLOR = 9,
    INV_DEST_COLOR = 10,
    SRC_ALPHA_SAT = 11,
    BLEND_FACTOR = 14,
    INV_BLEND_FACTOR = 15,
    SRC1_COLOR = 16,
    INV_SRC1_COLOR = 17,
    SRC1_ALPHA = 18,
    INV_SRC1_ALPHA = 19,
};
pub const D3D11_BLEND_ZERO = D3D11_BLEND.ZERO;
pub const D3D11_BLEND_ONE = D3D11_BLEND.ONE;
pub const D3D11_BLEND_SRC_COLOR = D3D11_BLEND.SRC_COLOR;
pub const D3D11_BLEND_INV_SRC_COLOR = D3D11_BLEND.INV_SRC_COLOR;
pub const D3D11_BLEND_SRC_ALPHA = D3D11_BLEND.SRC_ALPHA;
pub const D3D11_BLEND_INV_SRC_ALPHA = D3D11_BLEND.INV_SRC_ALPHA;
pub const D3D11_BLEND_DEST_ALPHA = D3D11_BLEND.DEST_ALPHA;
pub const D3D11_BLEND_INV_DEST_ALPHA = D3D11_BLEND.INV_DEST_ALPHA;
pub const D3D11_BLEND_DEST_COLOR = D3D11_BLEND.DEST_COLOR;
pub const D3D11_BLEND_INV_DEST_COLOR = D3D11_BLEND.INV_DEST_COLOR;
pub const D3D11_BLEND_SRC_ALPHA_SAT = D3D11_BLEND.SRC_ALPHA_SAT;
pub const D3D11_BLEND_BLEND_FACTOR = D3D11_BLEND.BLEND_FACTOR;
pub const D3D11_BLEND_INV_BLEND_FACTOR = D3D11_BLEND.INV_BLEND_FACTOR;
pub const D3D11_BLEND_SRC1_COLOR = D3D11_BLEND.SRC1_COLOR;
pub const D3D11_BLEND_INV_SRC1_COLOR = D3D11_BLEND.INV_SRC1_COLOR;
pub const D3D11_BLEND_SRC1_ALPHA = D3D11_BLEND.SRC1_ALPHA;
pub const D3D11_BLEND_INV_SRC1_ALPHA = D3D11_BLEND.INV_SRC1_ALPHA;

pub const D3D11_BLEND_OP = enum(i32) {
    ADD = 1,
    SUBTRACT = 2,
    REV_SUBTRACT = 3,
    MIN = 4,
    MAX = 5,
};
pub const D3D11_BLEND_OP_ADD = D3D11_BLEND_OP.ADD;
pub const D3D11_BLEND_OP_SUBTRACT = D3D11_BLEND_OP.SUBTRACT;
pub const D3D11_BLEND_OP_REV_SUBTRACT = D3D11_BLEND_OP.REV_SUBTRACT;
pub const D3D11_BLEND_OP_MIN = D3D11_BLEND_OP.MIN;
pub const D3D11_BLEND_OP_MAX = D3D11_BLEND_OP.MAX;

pub const D3D11_COLOR_WRITE_ENABLE = enum(i32) {
    RED = 1,
    GREEN = 2,
    BLUE = 4,
    ALPHA = 8,
    ALL = 15,
};
pub const D3D11_COLOR_WRITE_ENABLE_RED = D3D11_COLOR_WRITE_ENABLE.RED;
pub const D3D11_COLOR_WRITE_ENABLE_GREEN = D3D11_COLOR_WRITE_ENABLE.GREEN;
pub const D3D11_COLOR_WRITE_ENABLE_BLUE = D3D11_COLOR_WRITE_ENABLE.BLUE;
pub const D3D11_COLOR_WRITE_ENABLE_ALPHA = D3D11_COLOR_WRITE_ENABLE.ALPHA;
pub const D3D11_COLOR_WRITE_ENABLE_ALL = D3D11_COLOR_WRITE_ENABLE.ALL;

pub const D3D11_RENDER_TARGET_BLEND_DESC = extern struct {
    BlendEnable: BOOL,
    SrcBlend: D3D11_BLEND,
    DestBlend: D3D11_BLEND,
    BlendOp: D3D11_BLEND_OP,
    SrcBlendAlpha: D3D11_BLEND,
    DestBlendAlpha: D3D11_BLEND,
    BlendOpAlpha: D3D11_BLEND_OP,
    RenderTargetWriteMask: u8,
};

pub const D3D11_BLEND_DESC = extern struct {
    AlphaToCoverageEnable: BOOL,
    IndependentBlendEnable: BOOL,
    RenderTarget: [8]D3D11_RENDER_TARGET_BLEND_DESC,
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11BlendState_Value = Guid.initString("75b68faa-347d-4159-8f45-a0640f01cd9a");
pub const IID_ID3D11BlendState = &IID_ID3D11BlendState_Value;
pub const ID3D11BlendState = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetDesc: *const fn (
            self: *const ID3D11BlendState,
            p_desc: ?*D3D11_BLEND_DESC,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_BLEND_DESC) void {
                return @as(*const ID3D11BlendState.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11BlendState, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_RASTERIZER_DESC = extern struct {
    FillMode: D3D11_FILL_MODE,
    CullMode: D3D11_CULL_MODE,
    FrontCounterClockwise: BOOL,
    DepthBias: i32,
    DepthBiasClamp: f32,
    SlopeScaledDepthBias: f32,
    DepthClipEnable: BOOL,
    ScissorEnable: BOOL,
    MultisampleEnable: BOOL,
    AntialiasedLineEnable: BOOL,
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11RasterizerState_Value = Guid.initString("9bb4ab81-ab1a-4d8f-b506-fc04200b6ee7");
pub const IID_ID3D11RasterizerState = &IID_ID3D11RasterizerState_Value;
pub const ID3D11RasterizerState = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetDesc: *const fn (
            self: *const ID3D11RasterizerState,
            p_desc: ?*D3D11_RASTERIZER_DESC,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_RASTERIZER_DESC) void {
                return @as(*const ID3D11RasterizerState.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11RasterizerState, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_SUBRESOURCE_DATA = extern struct {
    pSysMem: ?*const anyopaque,
    SysMemPitch: u32,
    SysMemSlicePitch: u32,
};

pub const D3D11_MAPPED_SUBRESOURCE = extern struct {
    pData: ?*anyopaque,
    RowPitch: u32,
    DepthPitch: u32,
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11Resource_Value = Guid.initString("dc8e63f3-d12b-4952-b47b-5e45026a862d");
pub const IID_ID3D11Resource = &IID_ID3D11Resource_Value;
pub const ID3D11Resource = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetType: *const fn (
            self: *const ID3D11Resource,
            p_resource_dimension: ?*D3D11_RESOURCE_DIMENSION,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetEvictionPriority: *const fn (
            self: *const ID3D11Resource,
            eviction_priority: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetEvictionPriority: *const fn (
            self: *const ID3D11Resource,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
            pub inline fn getType(self: *const T, p_resource_dimension_: ?*D3D11_RESOURCE_DIMENSION) void {
                return @as(*const ID3D11Resource.VTable, @ptrCast(self.vtable)).GetType(@as(*const ID3D11Resource, @ptrCast(self)), p_resource_dimension_);
            }
            pub inline fn setEvictionPriority(self: *const T, eviction_priority_: u32) void {
                return @as(*const ID3D11Resource.VTable, @ptrCast(self.vtable)).SetEvictionPriority(@as(*const ID3D11Resource, @ptrCast(self)), eviction_priority_);
            }
            pub inline fn getEvictionPriority(self: *const T) u32 {
                return @as(*const ID3D11Resource.VTable, @ptrCast(self.vtable)).GetEvictionPriority(@as(*const ID3D11Resource, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_BUFFER_DESC = extern struct {
    ByteWidth: u32,
    Usage: D3D11_USAGE,
    BindFlags: u32,
    CPUAccessFlags: u32,
    MiscFlags: u32,
    StructureByteStride: u32,
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11Buffer_Value = Guid.initString("48570b85-d1ee-4fcd-a250-eb350722b037");
pub const IID_ID3D11Buffer = &IID_ID3D11Buffer_Value;
pub const ID3D11Buffer = extern struct {
    pub const VTable = extern struct {
        base: ID3D11Resource.VTable,
        GetDesc: *const fn (
            self: *const ID3D11Buffer,
            p_desc: ?*D3D11_BUFFER_DESC,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11Resource.MethodMixin(T);
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_BUFFER_DESC) void {
                return @as(*const ID3D11Buffer.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11Buffer, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_TEXTURE1D_DESC = extern struct {
    Width: u32,
    MipLevels: u32,
    ArraySize: u32,
    Format: DXGI_FORMAT,
    Usage: D3D11_USAGE,
    BindFlags: u32,
    CPUAccessFlags: u32,
    MiscFlags: u32,
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11Texture1D_Value = Guid.initString("f8fb5c27-c6b3-4f75-a4c8-439af2ef564c");
pub const IID_ID3D11Texture1D = &IID_ID3D11Texture1D_Value;
pub const ID3D11Texture1D = extern struct {
    pub const VTable = extern struct {
        base: ID3D11Resource.VTable,
        GetDesc: *const fn (
            self: *const ID3D11Texture1D,
            p_desc: ?*D3D11_TEXTURE1D_DESC,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11Resource.MethodMixin(T);
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_TEXTURE1D_DESC) void {
                return @as(*const ID3D11Texture1D.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11Texture1D, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_TEXTURE2D_DESC = extern struct {
    Width: u32,
    Height: u32,
    MipLevels: u32,
    ArraySize: u32,
    Format: DXGI_FORMAT,
    SampleDesc: DXGI_SAMPLE_DESC,
    Usage: D3D11_USAGE,
    BindFlags: D3D11_BIND_FLAG,
    CPUAccessFlags: D3D11_CPU_ACCESS_FLAG,
    MiscFlags: D3D11_RESOURCE_MISC_FLAG,
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11Texture2D_Value = Guid.initString("6f15aaf2-d208-4e89-9ab4-489535d34f9c");
pub const IID_ID3D11Texture2D = &IID_ID3D11Texture2D_Value;
pub const ID3D11Texture2D = extern struct {
    pub const VTable = extern struct {
        base: ID3D11Resource.VTable,
        GetDesc: *const fn (
            self: *const ID3D11Texture2D,
            p_desc: ?*D3D11_TEXTURE2D_DESC,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11Resource.MethodMixin(T);
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_TEXTURE2D_DESC) void {
                return @as(*const ID3D11Texture2D.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11Texture2D, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_TEXTURE3D_DESC = extern struct {
    Width: u32,
    Height: u32,
    Depth: u32,
    MipLevels: u32,
    Format: DXGI_FORMAT,
    Usage: D3D11_USAGE,
    BindFlags: u32,
    CPUAccessFlags: u32,
    MiscFlags: u32,
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11Texture3D_Value = Guid.initString("037e866e-f56d-4357-a8af-9dabbe6e250e");
pub const IID_ID3D11Texture3D = &IID_ID3D11Texture3D_Value;
pub const ID3D11Texture3D = extern struct {
    pub const VTable = extern struct {
        base: ID3D11Resource.VTable,
        GetDesc: *const fn (
            self: *const ID3D11Texture3D,
            p_desc: ?*D3D11_TEXTURE3D_DESC,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11Resource.MethodMixin(T);
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_TEXTURE3D_DESC) void {
                return @as(*const ID3D11Texture3D.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11Texture3D, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_TEXTURECUBE_FACE = enum(i32) {
    POSITIVE_X = 0,
    NEGATIVE_X = 1,
    POSITIVE_Y = 2,
    NEGATIVE_Y = 3,
    POSITIVE_Z = 4,
    NEGATIVE_Z = 5,
};
pub const D3D11_TEXTURECUBE_FACE_POSITIVE_X = D3D11_TEXTURECUBE_FACE.POSITIVE_X;
pub const D3D11_TEXTURECUBE_FACE_NEGATIVE_X = D3D11_TEXTURECUBE_FACE.NEGATIVE_X;
pub const D3D11_TEXTURECUBE_FACE_POSITIVE_Y = D3D11_TEXTURECUBE_FACE.POSITIVE_Y;
pub const D3D11_TEXTURECUBE_FACE_NEGATIVE_Y = D3D11_TEXTURECUBE_FACE.NEGATIVE_Y;
pub const D3D11_TEXTURECUBE_FACE_POSITIVE_Z = D3D11_TEXTURECUBE_FACE.POSITIVE_Z;
pub const D3D11_TEXTURECUBE_FACE_NEGATIVE_Z = D3D11_TEXTURECUBE_FACE.NEGATIVE_Z;

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11View_Value = Guid.initString("839d1216-bb2e-412b-b7f4-a9dbebe08ed1");
pub const IID_ID3D11View = &IID_ID3D11View_Value;
pub const ID3D11View = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetResource: *const fn (
            self: *const ID3D11View,
            pp_resource: ?*?*ID3D11Resource,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
            pub inline fn getResource(self: *const T, pp_resource_: ?*?*ID3D11Resource) void {
                return @as(*const ID3D11View.VTable, @ptrCast(self.vtable)).GetResource(@as(*const ID3D11View, @ptrCast(self)), pp_resource_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_BUFFER_SRV = extern struct {
    Anonymous1: extern union {
        FirstElement: u32,
        ElementOffset: u32,
    },
    Anonymous2: extern union {
        NumElements: u32,
        ElementWidth: u32,
    },
};

pub const D3D11_BUFFEREX_SRV_FLAG = enum(i32) {
    W = 1,
};
pub const D3D11_BUFFEREX_SRV_FLAG_RAW = D3D11_BUFFEREX_SRV_FLAG.W;

pub const D3D11_BUFFEREX_SRV = extern struct {
    FirstElement: u32,
    NumElements: u32,
    Flags: u32,
};

pub const D3D11_TEX1D_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
};

pub const D3D11_TEX1D_ARRAY_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};

pub const D3D11_TEX2D_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
};

pub const D3D11_TEX2D_ARRAY_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};

pub const D3D11_TEX3D_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
};

pub const D3D11_TEXCUBE_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
};

pub const D3D11_TEXCUBE_ARRAY_SRV = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
    First2DArrayFace: u32,
    NumCubes: u32,
};

pub const D3D11_TEX2DMS_SRV = extern struct {
    UnusedField_NothingToDefine: u32,
};

pub const D3D11_TEX2DMS_ARRAY_SRV = extern struct {
    FirstArraySlice: u32,
    ArraySize: u32,
};

pub const D3D11_SHADER_RESOURCE_VIEW_DESC = extern struct {
    Format: DXGI_FORMAT,
    ViewDimension: D3D_SRV_DIMENSION,
    Anonymous: extern union {
        Buffer: D3D11_BUFFER_SRV,
        Texture1D: D3D11_TEX1D_SRV,
        Texture1DArray: D3D11_TEX1D_ARRAY_SRV,
        Texture2D: D3D11_TEX2D_SRV,
        Texture2DArray: D3D11_TEX2D_ARRAY_SRV,
        Texture2DMS: D3D11_TEX2DMS_SRV,
        Texture2DMSArray: D3D11_TEX2DMS_ARRAY_SRV,
        Texture3D: D3D11_TEX3D_SRV,
        TextureCube: D3D11_TEXCUBE_SRV,
        TextureCubeArray: D3D11_TEXCUBE_ARRAY_SRV,
        BufferEx: D3D11_BUFFEREX_SRV,
    },
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11ShaderResourceView_Value = Guid.initString("b0e06fe0-8192-4e1a-b1ca-36d7414710b2");
pub const IID_ID3D11ShaderResourceView = &IID_ID3D11ShaderResourceView_Value;
pub const ID3D11ShaderResourceView = extern struct {
    pub const VTable = extern struct {
        base: ID3D11View.VTable,
        GetDesc: *const fn (
            self: *const ID3D11ShaderResourceView,
            p_desc: ?*D3D11_SHADER_RESOURCE_VIEW_DESC,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11View.MethodMixin(T);
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_SHADER_RESOURCE_VIEW_DESC) void {
                return @as(*const ID3D11ShaderResourceView.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11ShaderResourceView, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_BUFFER_RTV = extern struct {
    Anonymous1: extern union {
        FirstElement: u32,
        ElementOffset: u32,
    },
    Anonymous2: extern union {
        NumElements: u32,
        ElementWidth: u32,
    },
};

pub const D3D11_TEX1D_RTV = extern struct {
    MipSlice: u32,
};

pub const D3D11_TEX1D_ARRAY_RTV = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};

pub const D3D11_TEX2D_RTV = extern struct {
    MipSlice: u32,
};

pub const D3D11_TEX2DMS_RTV = extern struct {
    UnusedField_NothingToDefine: u32,
};

pub const D3D11_TEX2D_ARRAY_RTV = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};

pub const D3D11_TEX2DMS_ARRAY_RTV = extern struct {
    FirstArraySlice: u32,
    ArraySize: u32,
};

pub const D3D11_TEX3D_RTV = extern struct {
    MipSlice: u32,
    FirstWSlice: u32,
    WSize: u32,
};

pub const D3D11_RENDER_TARGET_VIEW_DESC = extern struct {
    Format: DXGI_FORMAT,
    ViewDimension: D3D11_RTV_DIMENSION,
    Anonymous: extern union {
        Buffer: D3D11_BUFFER_RTV,
        Texture1D: D3D11_TEX1D_RTV,
        Texture1DArray: D3D11_TEX1D_ARRAY_RTV,
        Texture2D: D3D11_TEX2D_RTV,
        Texture2DArray: D3D11_TEX2D_ARRAY_RTV,
        Texture2DMS: D3D11_TEX2DMS_RTV,
        Texture2DMSArray: D3D11_TEX2DMS_ARRAY_RTV,
        Texture3D: D3D11_TEX3D_RTV,
    },
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11RenderTargetView_Value = Guid.initString("dfdba067-0b8d-4865-875b-d7b4516cc164");
pub const IID_ID3D11RenderTargetView = &IID_ID3D11RenderTargetView_Value;
pub const ID3D11RenderTargetView = extern struct {
    pub const VTable = extern struct {
        base: ID3D11View.VTable,
        GetDesc: *const fn (
            self: *const ID3D11RenderTargetView,
            p_desc: ?*D3D11_RENDER_TARGET_VIEW_DESC,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11View.MethodMixin(T);
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_RENDER_TARGET_VIEW_DESC) void {
                return @as(*const ID3D11RenderTargetView.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11RenderTargetView, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_TEX1D_DSV = extern struct {
    MipSlice: u32,
};

pub const D3D11_TEX1D_ARRAY_DSV = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};

pub const D3D11_TEX2D_DSV = extern struct {
    MipSlice: u32,
};

pub const D3D11_TEX2D_ARRAY_DSV = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};

pub const D3D11_TEX2DMS_DSV = extern struct {
    UnusedField_NothingToDefine: u32,
};

pub const D3D11_TEX2DMS_ARRAY_DSV = extern struct {
    FirstArraySlice: u32,
    ArraySize: u32,
};

pub const D3D11_DSV_FLAG = enum(i32) {
    DEPTH = 1,
    STENCIL = 2,
};
pub const D3D11_DSV_READ_ONLY_DEPTH = D3D11_DSV_FLAG.DEPTH;
pub const D3D11_DSV_READ_ONLY_STENCIL = D3D11_DSV_FLAG.STENCIL;

pub const D3D11_DEPTH_STENCIL_VIEW_DESC = extern struct {
    Format: DXGI_FORMAT,
    ViewDimension: D3D11_DSV_DIMENSION,
    Flags: u32,
    Anonymous: extern union {
        Texture1D: D3D11_TEX1D_DSV,
        Texture1DArray: D3D11_TEX1D_ARRAY_DSV,
        Texture2D: D3D11_TEX2D_DSV,
        Texture2DArray: D3D11_TEX2D_ARRAY_DSV,
        Texture2DMS: D3D11_TEX2DMS_DSV,
        Texture2DMSArray: D3D11_TEX2DMS_ARRAY_DSV,
    },
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11DepthStencilView_Value = Guid.initString("9fdac92a-1876-48c3-afad-25b94f84a9b6");
pub const IID_ID3D11DepthStencilView = &IID_ID3D11DepthStencilView_Value;
pub const ID3D11DepthStencilView = extern struct {
    pub const VTable = extern struct {
        base: ID3D11View.VTable,
        GetDesc: *const fn (
            self: *const ID3D11DepthStencilView,
            p_desc: ?*D3D11_DEPTH_STENCIL_VIEW_DESC,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11View.MethodMixin(T);
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_DEPTH_STENCIL_VIEW_DESC) void {
                return @as(*const ID3D11DepthStencilView.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11DepthStencilView, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_BUFFER_UAV_FLAG = enum(i32) {
    RAW = 1,
    APPEND = 2,
    COUNTER = 4,
};
pub const D3D11_BUFFER_UAV_FLAG_RAW = D3D11_BUFFER_UAV_FLAG.RAW;
pub const D3D11_BUFFER_UAV_FLAG_APPEND = D3D11_BUFFER_UAV_FLAG.APPEND;
pub const D3D11_BUFFER_UAV_FLAG_COUNTER = D3D11_BUFFER_UAV_FLAG.COUNTER;

pub const D3D11_BUFFER_UAV = extern struct {
    FirstElement: u32,
    NumElements: u32,
    Flags: u32,
};

pub const D3D11_TEX1D_UAV = extern struct {
    MipSlice: u32,
};

pub const D3D11_TEX1D_ARRAY_UAV = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};

pub const D3D11_TEX2D_UAV = extern struct {
    MipSlice: u32,
};

pub const D3D11_TEX2D_ARRAY_UAV = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};

pub const D3D11_TEX3D_UAV = extern struct {
    MipSlice: u32,
    FirstWSlice: u32,
    WSize: u32,
};

pub const D3D11_UNORDERED_ACCESS_VIEW_DESC = extern struct {
    Format: DXGI_FORMAT,
    ViewDimension: D3D11_UAV_DIMENSION,
    Anonymous: extern union {
        Buffer: D3D11_BUFFER_UAV,
        Texture1D: D3D11_TEX1D_UAV,
        Texture1DArray: D3D11_TEX1D_ARRAY_UAV,
        Texture2D: D3D11_TEX2D_UAV,
        Texture2DArray: D3D11_TEX2D_ARRAY_UAV,
        Texture3D: D3D11_TEX3D_UAV,
    },
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11UnorderedAccessView_Value = Guid.initString("28acf509-7f5c-48f6-8611-f316010a6380");
pub const IID_ID3D11UnorderedAccessView = &IID_ID3D11UnorderedAccessView_Value;
pub const ID3D11UnorderedAccessView = extern struct {
    pub const VTable = extern struct {
        base: ID3D11View.VTable,
        GetDesc: *const fn (
            self: *const ID3D11UnorderedAccessView,
            p_desc: ?*D3D11_UNORDERED_ACCESS_VIEW_DESC,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11View.MethodMixin(T);
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_UNORDERED_ACCESS_VIEW_DESC) void {
                return @as(*const ID3D11UnorderedAccessView.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11UnorderedAccessView, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11VertexShader_Value = Guid.initString("3b301d64-d678-4289-8897-22f8928b72f3");
pub const IID_ID3D11VertexShader = &IID_ID3D11VertexShader_Value;
pub const ID3D11VertexShader = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11HullShader_Value = Guid.initString("8e5c6061-628a-4c8e-8264-bbe45cb3d5dd");
pub const IID_ID3D11HullShader = &IID_ID3D11HullShader_Value;
pub const ID3D11HullShader = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11DomainShader_Value = Guid.initString("f582c508-0f36-490c-9977-31eece268cfa");
pub const IID_ID3D11DomainShader = &IID_ID3D11DomainShader_Value;
pub const ID3D11DomainShader = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11GeometryShader_Value = Guid.initString("38325b96-effb-4022-ba02-2e795b70275c");
pub const IID_ID3D11GeometryShader = &IID_ID3D11GeometryShader_Value;
pub const ID3D11GeometryShader = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11PixelShader_Value = Guid.initString("ea82e40d-51dc-4f33-93d4-db7c9125ae8c");
pub const IID_ID3D11PixelShader = &IID_ID3D11PixelShader_Value;
pub const ID3D11PixelShader = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11ComputeShader_Value = Guid.initString("4f5b196e-c2bd-495e-bd01-1fded38e4969");
pub const IID_ID3D11ComputeShader = &IID_ID3D11ComputeShader_Value;
pub const ID3D11ComputeShader = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11InputLayout_Value = Guid.initString("e4819ddc-4cf0-4025-bd26-5de82a3e07b7");
pub const IID_ID3D11InputLayout = &IID_ID3D11InputLayout_Value;
pub const ID3D11InputLayout = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_FILTER = enum(i32) {
    MIN_MAG_MIP_POINT = 0,
    MIN_MAG_POINT_MIP_LINEAR = 1,
    MIN_POINT_MAG_LINEAR_MIP_POINT = 4,
    MIN_POINT_MAG_MIP_LINEAR = 5,
    MIN_LINEAR_MAG_MIP_POINT = 16,
    MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17,
    MIN_MAG_LINEAR_MIP_POINT = 20,
    MIN_MAG_MIP_LINEAR = 21,
    ANISOTROPIC = 85,
    COMPARISON_MIN_MAG_MIP_POINT = 128,
    COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 129,
    COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 132,
    COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 133,
    COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 144,
    COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 145,
    COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 148,
    COMPARISON_MIN_MAG_MIP_LINEAR = 149,
    COMPARISON_ANISOTROPIC = 213,
    MINIMUM_MIN_MAG_MIP_POINT = 256,
    MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 257,
    MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 260,
    MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 261,
    MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 272,
    MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 273,
    MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 276,
    MINIMUM_MIN_MAG_MIP_LINEAR = 277,
    MINIMUM_ANISOTROPIC = 341,
    MAXIMUM_MIN_MAG_MIP_POINT = 384,
    MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 385,
    MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 388,
    MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 389,
    MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 400,
    MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 401,
    MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 404,
    MAXIMUM_MIN_MAG_MIP_LINEAR = 405,
    MAXIMUM_ANISOTROPIC = 469,
};
pub const D3D11_FILTER_MIN_MAG_MIP_POINT = D3D11_FILTER.MIN_MAG_MIP_POINT;
pub const D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR = D3D11_FILTER.MIN_MAG_POINT_MIP_LINEAR;
pub const D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = D3D11_FILTER.MIN_POINT_MAG_LINEAR_MIP_POINT;
pub const D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR = D3D11_FILTER.MIN_POINT_MAG_MIP_LINEAR;
pub const D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT = D3D11_FILTER.MIN_LINEAR_MAG_MIP_POINT;
pub const D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = D3D11_FILTER.MIN_LINEAR_MAG_POINT_MIP_LINEAR;
pub const D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT = D3D11_FILTER.MIN_MAG_LINEAR_MIP_POINT;
pub const D3D11_FILTER_MIN_MAG_MIP_LINEAR = D3D11_FILTER.MIN_MAG_MIP_LINEAR;
pub const D3D11_FILTER_ANISOTROPIC = D3D11_FILTER.ANISOTROPIC;
pub const D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT = D3D11_FILTER.COMPARISON_MIN_MAG_MIP_POINT;
pub const D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = D3D11_FILTER.COMPARISON_MIN_MAG_POINT_MIP_LINEAR;
pub const D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = D3D11_FILTER.COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT;
pub const D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = D3D11_FILTER.COMPARISON_MIN_POINT_MAG_MIP_LINEAR;
pub const D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = D3D11_FILTER.COMPARISON_MIN_LINEAR_MAG_MIP_POINT;
pub const D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = D3D11_FILTER.COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
pub const D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = D3D11_FILTER.COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
pub const D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = D3D11_FILTER.COMPARISON_MIN_MAG_MIP_LINEAR;
pub const D3D11_FILTER_COMPARISON_ANISOTROPIC = D3D11_FILTER.COMPARISON_ANISOTROPIC;
pub const D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT = D3D11_FILTER.MINIMUM_MIN_MAG_MIP_POINT;
pub const D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = D3D11_FILTER.MINIMUM_MIN_MAG_POINT_MIP_LINEAR;
pub const D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = D3D11_FILTER.MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT;
pub const D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = D3D11_FILTER.MINIMUM_MIN_POINT_MAG_MIP_LINEAR;
pub const D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = D3D11_FILTER.MINIMUM_MIN_LINEAR_MAG_MIP_POINT;
pub const D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = D3D11_FILTER.MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
pub const D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = D3D11_FILTER.MINIMUM_MIN_MAG_LINEAR_MIP_POINT;
pub const D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = D3D11_FILTER.MINIMUM_MIN_MAG_MIP_LINEAR;
pub const D3D11_FILTER_MINIMUM_ANISOTROPIC = D3D11_FILTER.MINIMUM_ANISOTROPIC;
pub const D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = D3D11_FILTER.MAXIMUM_MIN_MAG_MIP_POINT;
pub const D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = D3D11_FILTER.MAXIMUM_MIN_MAG_POINT_MIP_LINEAR;
pub const D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = D3D11_FILTER.MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT;
pub const D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = D3D11_FILTER.MAXIMUM_MIN_POINT_MAG_MIP_LINEAR;
pub const D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = D3D11_FILTER.MAXIMUM_MIN_LINEAR_MAG_MIP_POINT;
pub const D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = D3D11_FILTER.MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR;
pub const D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = D3D11_FILTER.MAXIMUM_MIN_MAG_LINEAR_MIP_POINT;
pub const D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = D3D11_FILTER.MAXIMUM_MIN_MAG_MIP_LINEAR;
pub const D3D11_FILTER_MAXIMUM_ANISOTROPIC = D3D11_FILTER.MAXIMUM_ANISOTROPIC;

pub const D3D11_FILTER_TYPE = enum(i32) {
    POINT = 0,
    LINEAR = 1,
};
pub const D3D11_FILTER_TYPE_POINT = D3D11_FILTER_TYPE.POINT;
pub const D3D11_FILTER_TYPE_LINEAR = D3D11_FILTER_TYPE.LINEAR;

pub const D3D11_FILTER_REDUCTION_TYPE = enum(i32) {
    STANDARD = 0,
    COMPARISON = 1,
    MINIMUM = 2,
    MAXIMUM = 3,
};
pub const D3D11_FILTER_REDUCTION_TYPE_STANDARD = D3D11_FILTER_REDUCTION_TYPE.STANDARD;
pub const D3D11_FILTER_REDUCTION_TYPE_COMPARISON = D3D11_FILTER_REDUCTION_TYPE.COMPARISON;
pub const D3D11_FILTER_REDUCTION_TYPE_MINIMUM = D3D11_FILTER_REDUCTION_TYPE.MINIMUM;
pub const D3D11_FILTER_REDUCTION_TYPE_MAXIMUM = D3D11_FILTER_REDUCTION_TYPE.MAXIMUM;

pub const D3D11_TEXTURE_ADDRESS_MODE = enum(i32) {
    WRAP = 1,
    MIRROR = 2,
    CLAMP = 3,
    BORDER = 4,
    MIRROR_ONCE = 5,
};
pub const D3D11_TEXTURE_ADDRESS_WRAP = D3D11_TEXTURE_ADDRESS_MODE.WRAP;
pub const D3D11_TEXTURE_ADDRESS_MIRROR = D3D11_TEXTURE_ADDRESS_MODE.MIRROR;
pub const D3D11_TEXTURE_ADDRESS_CLAMP = D3D11_TEXTURE_ADDRESS_MODE.CLAMP;
pub const D3D11_TEXTURE_ADDRESS_BORDER = D3D11_TEXTURE_ADDRESS_MODE.BORDER;
pub const D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = D3D11_TEXTURE_ADDRESS_MODE.MIRROR_ONCE;

pub const D3D11_SAMPLER_DESC = extern struct {
    Filter: D3D11_FILTER,
    AddressU: D3D11_TEXTURE_ADDRESS_MODE,
    AddressV: D3D11_TEXTURE_ADDRESS_MODE,
    AddressW: D3D11_TEXTURE_ADDRESS_MODE,
    MipLODBias: f32,
    MaxAnisotropy: u32,
    ComparisonFunc: D3D11_COMPARISON_FUNC,
    BorderColor: [4]f32,
    MinLOD: f32,
    MaxLOD: f32,
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11SamplerState_Value = Guid.initString("da6fea51-564c-4487-9810-f0d0f9b4e3a5");
pub const IID_ID3D11SamplerState = &IID_ID3D11SamplerState_Value;
pub const ID3D11SamplerState = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetDesc: *const fn (
            self: *const ID3D11SamplerState,
            p_desc: ?*D3D11_SAMPLER_DESC,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_SAMPLER_DESC) void {
                return @as(*const ID3D11SamplerState.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11SamplerState, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_FORMAT_SUPPORT = enum(i32) {
    BUFFER = 1,
    IA_VERTEX_BUFFER = 2,
    IA_INDEX_BUFFER = 4,
    SO_BUFFER = 8,
    TEXTURE1D = 16,
    TEXTURE2D = 32,
    TEXTURE3D = 64,
    TEXTURECUBE = 128,
    SHADER_LOAD = 256,
    SHADER_SAMPLE = 512,
    SHADER_SAMPLE_COMPARISON = 1024,
    SHADER_SAMPLE_MONO_TEXT = 2048,
    MIP = 4096,
    MIP_AUTOGEN = 8192,
    RENDER_TARGET = 16384,
    BLENDABLE = 32768,
    DEPTH_STENCIL = 65536,
    CPU_LOCKABLE = 131072,
    MULTISAMPLE_RESOLVE = 262144,
    DISPLAY = 524288,
    CAST_WITHIN_BIT_LAYOUT = 1048576,
    MULTISAMPLE_RENDERTARGET = 2097152,
    MULTISAMPLE_LOAD = 4194304,
    SHADER_GATHER = 8388608,
    BACK_BUFFER_CAST = 16777216,
    TYPED_UNORDERED_ACCESS_VIEW = 33554432,
    SHADER_GATHER_COMPARISON = 67108864,
    DECODER_OUTPUT = 134217728,
    VIDEO_PROCESSOR_OUTPUT = 268435456,
    VIDEO_PROCESSOR_INPUT = 536870912,
    VIDEO_ENCODER = 1073741824,
};
pub const D3D11_FORMAT_SUPPORT_BUFFER = D3D11_FORMAT_SUPPORT.BUFFER;
pub const D3D11_FORMAT_SUPPORT_IA_VERTEX_BUFFER = D3D11_FORMAT_SUPPORT.IA_VERTEX_BUFFER;
pub const D3D11_FORMAT_SUPPORT_IA_INDEX_BUFFER = D3D11_FORMAT_SUPPORT.IA_INDEX_BUFFER;
pub const D3D11_FORMAT_SUPPORT_SO_BUFFER = D3D11_FORMAT_SUPPORT.SO_BUFFER;
pub const D3D11_FORMAT_SUPPORT_TEXTURE1D = D3D11_FORMAT_SUPPORT.TEXTURE1D;
pub const D3D11_FORMAT_SUPPORT_TEXTURE2D = D3D11_FORMAT_SUPPORT.TEXTURE2D;
pub const D3D11_FORMAT_SUPPORT_TEXTURE3D = D3D11_FORMAT_SUPPORT.TEXTURE3D;
pub const D3D11_FORMAT_SUPPORT_TEXTURECUBE = D3D11_FORMAT_SUPPORT.TEXTURECUBE;
pub const D3D11_FORMAT_SUPPORT_SHADER_LOAD = D3D11_FORMAT_SUPPORT.SHADER_LOAD;
pub const D3D11_FORMAT_SUPPORT_SHADER_SAMPLE = D3D11_FORMAT_SUPPORT.SHADER_SAMPLE;
pub const D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_COMPARISON = D3D11_FORMAT_SUPPORT.SHADER_SAMPLE_COMPARISON;
pub const D3D11_FORMAT_SUPPORT_SHADER_SAMPLE_MONO_TEXT = D3D11_FORMAT_SUPPORT.SHADER_SAMPLE_MONO_TEXT;
pub const D3D11_FORMAT_SUPPORT_MIP = D3D11_FORMAT_SUPPORT.MIP;
pub const D3D11_FORMAT_SUPPORT_MIP_AUTOGEN = D3D11_FORMAT_SUPPORT.MIP_AUTOGEN;
pub const D3D11_FORMAT_SUPPORT_RENDER_TARGET = D3D11_FORMAT_SUPPORT.RENDER_TARGET;
pub const D3D11_FORMAT_SUPPORT_BLENDABLE = D3D11_FORMAT_SUPPORT.BLENDABLE;
pub const D3D11_FORMAT_SUPPORT_DEPTH_STENCIL = D3D11_FORMAT_SUPPORT.DEPTH_STENCIL;
pub const D3D11_FORMAT_SUPPORT_CPU_LOCKABLE = D3D11_FORMAT_SUPPORT.CPU_LOCKABLE;
pub const D3D11_FORMAT_SUPPORT_MULTISAMPLE_RESOLVE = D3D11_FORMAT_SUPPORT.MULTISAMPLE_RESOLVE;
pub const D3D11_FORMAT_SUPPORT_DISPLAY = D3D11_FORMAT_SUPPORT.DISPLAY;
pub const D3D11_FORMAT_SUPPORT_CAST_WITHIN_BIT_LAYOUT = D3D11_FORMAT_SUPPORT.CAST_WITHIN_BIT_LAYOUT;
pub const D3D11_FORMAT_SUPPORT_MULTISAMPLE_RENDERTARGET = D3D11_FORMAT_SUPPORT.MULTISAMPLE_RENDERTARGET;
pub const D3D11_FORMAT_SUPPORT_MULTISAMPLE_LOAD = D3D11_FORMAT_SUPPORT.MULTISAMPLE_LOAD;
pub const D3D11_FORMAT_SUPPORT_SHADER_GATHER = D3D11_FORMAT_SUPPORT.SHADER_GATHER;
pub const D3D11_FORMAT_SUPPORT_BACK_BUFFER_CAST = D3D11_FORMAT_SUPPORT.BACK_BUFFER_CAST;
pub const D3D11_FORMAT_SUPPORT_TYPED_UNORDERED_ACCESS_VIEW = D3D11_FORMAT_SUPPORT.TYPED_UNORDERED_ACCESS_VIEW;
pub const D3D11_FORMAT_SUPPORT_SHADER_GATHER_COMPARISON = D3D11_FORMAT_SUPPORT.SHADER_GATHER_COMPARISON;
pub const D3D11_FORMAT_SUPPORT_DECODER_OUTPUT = D3D11_FORMAT_SUPPORT.DECODER_OUTPUT;
pub const D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_OUTPUT = D3D11_FORMAT_SUPPORT.VIDEO_PROCESSOR_OUTPUT;
pub const D3D11_FORMAT_SUPPORT_VIDEO_PROCESSOR_INPUT = D3D11_FORMAT_SUPPORT.VIDEO_PROCESSOR_INPUT;
pub const D3D11_FORMAT_SUPPORT_VIDEO_ENCODER = D3D11_FORMAT_SUPPORT.VIDEO_ENCODER;

pub const D3D11_FORMAT_SUPPORT2 = enum(i32) {
    UAV_ATOMIC_ADD = 1,
    UAV_ATOMIC_BITWISE_OPS = 2,
    UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 4,
    UAV_ATOMIC_EXCHANGE = 8,
    UAV_ATOMIC_SIGNED_MIN_OR_MAX = 16,
    UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 32,
    UAV_TYPED_LOAD = 64,
    UAV_TYPED_STORE = 128,
    OUTPUT_MERGER_LOGIC_OP = 256,
    TILED = 512,
    SHAREABLE = 1024,
    MULTIPLANE_OVERLAY = 16384,
};
pub const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_ADD = D3D11_FORMAT_SUPPORT2.UAV_ATOMIC_ADD;
pub const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS = D3D11_FORMAT_SUPPORT2.UAV_ATOMIC_BITWISE_OPS;
pub const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = D3D11_FORMAT_SUPPORT2.UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE;
pub const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE = D3D11_FORMAT_SUPPORT2.UAV_ATOMIC_EXCHANGE;
pub const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX = D3D11_FORMAT_SUPPORT2.UAV_ATOMIC_SIGNED_MIN_OR_MAX;
pub const D3D11_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = D3D11_FORMAT_SUPPORT2.UAV_ATOMIC_UNSIGNED_MIN_OR_MAX;
pub const D3D11_FORMAT_SUPPORT2_UAV_TYPED_LOAD = D3D11_FORMAT_SUPPORT2.UAV_TYPED_LOAD;
pub const D3D11_FORMAT_SUPPORT2_UAV_TYPED_STORE = D3D11_FORMAT_SUPPORT2.UAV_TYPED_STORE;
pub const D3D11_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP = D3D11_FORMAT_SUPPORT2.OUTPUT_MERGER_LOGIC_OP;
pub const D3D11_FORMAT_SUPPORT2_TILED = D3D11_FORMAT_SUPPORT2.TILED;
pub const D3D11_FORMAT_SUPPORT2_SHAREABLE = D3D11_FORMAT_SUPPORT2.SHAREABLE;
pub const D3D11_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY = D3D11_FORMAT_SUPPORT2.MULTIPLANE_OVERLAY;

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11Asynchronous_Value = Guid.initString("4b35d0cd-1e15-4258-9c98-1b1333f6dd3b");
pub const IID_ID3D11Asynchronous = &IID_ID3D11Asynchronous_Value;
pub const ID3D11Asynchronous = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetDataSize: *const fn (
            self: *const ID3D11Asynchronous,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
            pub inline fn getDataSize(self: *const T) u32 {
                return @as(*const ID3D11Asynchronous.VTable, @ptrCast(self.vtable)).GetDataSize(@as(*const ID3D11Asynchronous, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_ASYNC_GETDATA_FLAG = enum(i32) {
    H = 1,
};
pub const D3D11_ASYNC_GETDATA_DONOTFLUSH = D3D11_ASYNC_GETDATA_FLAG.H;

pub const D3D11_QUERY = enum(i32) {
    EVENT = 0,
    OCCLUSION = 1,
    TIMESTAMP = 2,
    TIMESTAMP_DISJOINT = 3,
    PIPELINE_STATISTICS = 4,
    OCCLUSION_PREDICATE = 5,
    SO_STATISTICS = 6,
    SO_OVERFLOW_PREDICATE = 7,
    SO_STATISTICS_STREAM0 = 8,
    SO_OVERFLOW_PREDICATE_STREAM0 = 9,
    SO_STATISTICS_STREAM1 = 10,
    SO_OVERFLOW_PREDICATE_STREAM1 = 11,
    SO_STATISTICS_STREAM2 = 12,
    SO_OVERFLOW_PREDICATE_STREAM2 = 13,
    SO_STATISTICS_STREAM3 = 14,
    SO_OVERFLOW_PREDICATE_STREAM3 = 15,
};
pub const D3D11_QUERY_EVENT = D3D11_QUERY.EVENT;
pub const D3D11_QUERY_OCCLUSION = D3D11_QUERY.OCCLUSION;
pub const D3D11_QUERY_TIMESTAMP = D3D11_QUERY.TIMESTAMP;
pub const D3D11_QUERY_TIMESTAMP_DISJOINT = D3D11_QUERY.TIMESTAMP_DISJOINT;
pub const D3D11_QUERY_PIPELINE_STATISTICS = D3D11_QUERY.PIPELINE_STATISTICS;
pub const D3D11_QUERY_OCCLUSION_PREDICATE = D3D11_QUERY.OCCLUSION_PREDICATE;
pub const D3D11_QUERY_SO_STATISTICS = D3D11_QUERY.SO_STATISTICS;
pub const D3D11_QUERY_SO_OVERFLOW_PREDICATE = D3D11_QUERY.SO_OVERFLOW_PREDICATE;
pub const D3D11_QUERY_SO_STATISTICS_STREAM0 = D3D11_QUERY.SO_STATISTICS_STREAM0;
pub const D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0 = D3D11_QUERY.SO_OVERFLOW_PREDICATE_STREAM0;
pub const D3D11_QUERY_SO_STATISTICS_STREAM1 = D3D11_QUERY.SO_STATISTICS_STREAM1;
pub const D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1 = D3D11_QUERY.SO_OVERFLOW_PREDICATE_STREAM1;
pub const D3D11_QUERY_SO_STATISTICS_STREAM2 = D3D11_QUERY.SO_STATISTICS_STREAM2;
pub const D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2 = D3D11_QUERY.SO_OVERFLOW_PREDICATE_STREAM2;
pub const D3D11_QUERY_SO_STATISTICS_STREAM3 = D3D11_QUERY.SO_STATISTICS_STREAM3;
pub const D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3 = D3D11_QUERY.SO_OVERFLOW_PREDICATE_STREAM3;

pub const D3D11_QUERY_MISC_FLAG = enum(i32) {
    T = 1,
};
pub const D3D11_QUERY_MISC_PREDICATEHINT = D3D11_QUERY_MISC_FLAG.T;

pub const D3D11_QUERY_DESC = extern struct {
    Query: D3D11_QUERY,
    MiscFlags: u32,
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11Query_Value = Guid.initString("d6c00747-87b7-425e-b84d-44d108560afd");
pub const IID_ID3D11Query = &IID_ID3D11Query_Value;
pub const ID3D11Query = extern struct {
    pub const VTable = extern struct {
        base: ID3D11Asynchronous.VTable,
        GetDesc: *const fn (
            self: *const ID3D11Query,
            p_desc: ?*D3D11_QUERY_DESC,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11Asynchronous.MethodMixin(T);
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_QUERY_DESC) void {
                return @as(*const ID3D11Query.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11Query, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11Predicate_Value = Guid.initString("9eb576dd-9f77-4d86-81aa-8bab5fe490e2");
pub const IID_ID3D11Predicate = &IID_ID3D11Predicate_Value;
pub const ID3D11Predicate = extern struct {
    pub const VTable = extern struct {
        base: ID3D11Query.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11Query.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_QUERY_DATA_TIMESTAMP_DISJOINT = extern struct {
    Frequency: u64,
    Disjoint: BOOL,
};

pub const D3D11_QUERY_DATA_PIPELINE_STATISTICS = extern struct {
    IAVertices: u64,
    IAPrimitives: u64,
    VSInvocations: u64,
    GSInvocations: u64,
    GSPrimitives: u64,
    CInvocations: u64,
    CPrimitives: u64,
    PSInvocations: u64,
    HSInvocations: u64,
    DSInvocations: u64,
    CSInvocations: u64,
};

pub const D3D11_QUERY_DATA_SO_STATISTICS = extern struct {
    NumPrimitivesWritten: u64,
    PrimitivesStorageNeeded: u64,
};

pub const D3D11_COUNTER = enum(i32) {
    @"0" = 1073741824,
};
pub const D3D11_COUNTER_DEVICE_DEPENDENT_0 = D3D11_COUNTER.@"0";

pub const D3D11_COUNTER_TYPE = enum(i32) {
    FLOAT32 = 0,
    UINT16 = 1,
    UINT32 = 2,
    UINT64 = 3,
};
pub const D3D11_COUNTER_TYPE_FLOAT32 = D3D11_COUNTER_TYPE.FLOAT32;
pub const D3D11_COUNTER_TYPE_UINT16 = D3D11_COUNTER_TYPE.UINT16;
pub const D3D11_COUNTER_TYPE_UINT32 = D3D11_COUNTER_TYPE.UINT32;
pub const D3D11_COUNTER_TYPE_UINT64 = D3D11_COUNTER_TYPE.UINT64;

pub const D3D11_COUNTER_DESC = extern struct {
    Counter: D3D11_COUNTER,
    MiscFlags: u32,
};

pub const D3D11_COUNTER_INFO = extern struct {
    LastDeviceDependentCounter: D3D11_COUNTER,
    NumSimultaneousCounters: u32,
    NumDetectableParallelUnits: u8,
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11Counter_Value = Guid.initString("6e8c49fb-a371-4770-b440-29086022b741");
pub const IID_ID3D11Counter = &IID_ID3D11Counter_Value;
pub const ID3D11Counter = extern struct {
    pub const VTable = extern struct {
        base: ID3D11Asynchronous.VTable,
        GetDesc: *const fn (
            self: *const ID3D11Counter,
            p_desc: ?*D3D11_COUNTER_DESC,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11Asynchronous.MethodMixin(T);
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_COUNTER_DESC) void {
                return @as(*const ID3D11Counter.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11Counter, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS = enum(i32) {
    STANDARD_MULTISAMPLE_PATTERN = -1,
    CENTER_MULTISAMPLE_PATTERN = -2,
};
pub const D3D11_STANDARD_MULTISAMPLE_PATTERN = D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS.STANDARD_MULTISAMPLE_PATTERN;
pub const D3D11_CENTER_MULTISAMPLE_PATTERN = D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS.CENTER_MULTISAMPLE_PATTERN;

pub const D3D11_DEVICE_CONTEXT_TYPE = enum(i32) {
    IMMEDIATE = 0,
    DEFERRED = 1,
};
pub const D3D11_DEVICE_CONTEXT_IMMEDIATE = D3D11_DEVICE_CONTEXT_TYPE.IMMEDIATE;
pub const D3D11_DEVICE_CONTEXT_DEFERRED = D3D11_DEVICE_CONTEXT_TYPE.DEFERRED;

pub const D3D11_CLASS_INSTANCE_DESC = extern struct {
    InstanceId: u32,
    InstanceIndex: u32,
    TypeId: u32,
    ConstantBuffer: u32,
    BaseConstantBufferOffset: u32,
    BaseTexture: u32,
    BaseSampler: u32,
    Created: BOOL,
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11ClassInstance_Value = Guid.initString("a6cd7faa-b0b7-4a2f-9436-8662a65797cb");
pub const IID_ID3D11ClassInstance = &IID_ID3D11ClassInstance_Value;
pub const ID3D11ClassInstance = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetClassLinkage: *const fn (
            self: *const ID3D11ClassInstance,
            pp_linkage: ?*?*ID3D11ClassLinkage,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetDesc: *const fn (
            self: *const ID3D11ClassInstance,
            p_desc: ?*D3D11_CLASS_INSTANCE_DESC,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetInstanceName: *const fn (
            self: *const ID3D11ClassInstance,
            p_instance_name: ?[*:0]u8,
            p_buffer_length: ?*usize,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetTypeName: *const fn (
            self: *const ID3D11ClassInstance,
            p_type_name: ?[*:0]u8,
            p_buffer_length: ?*usize,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
            pub inline fn getClassLinkage(self: *const T, pp_linkage_: ?*?*ID3D11ClassLinkage) void {
                return @as(*const ID3D11ClassInstance.VTable, @ptrCast(self.vtable)).GetClassLinkage(@as(*const ID3D11ClassInstance, @ptrCast(self)), pp_linkage_);
            }
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_CLASS_INSTANCE_DESC) void {
                return @as(*const ID3D11ClassInstance.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11ClassInstance, @ptrCast(self)), p_desc_);
            }
            pub inline fn getInstanceName(self: *const T, p_instance_name_: ?[*:0]u8, p_buffer_length_: ?*usize) void {
                return @as(*const ID3D11ClassInstance.VTable, @ptrCast(self.vtable)).GetInstanceName(@as(*const ID3D11ClassInstance, @ptrCast(self)), p_instance_name_, p_buffer_length_);
            }
            pub inline fn getTypeName(self: *const T, p_type_name_: ?[*:0]u8, p_buffer_length_: ?*usize) void {
                return @as(*const ID3D11ClassInstance.VTable, @ptrCast(self.vtable)).GetTypeName(@as(*const ID3D11ClassInstance, @ptrCast(self)), p_type_name_, p_buffer_length_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11ClassLinkage_Value = Guid.initString("ddf57cba-9543-46e4-a12b-f207a0fe7fed");
pub const IID_ID3D11ClassLinkage = &IID_ID3D11ClassLinkage_Value;
pub const ID3D11ClassLinkage = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetClassInstance: *const fn (
            self: *const ID3D11ClassLinkage,
            p_class_instance_name: ?[*:0]const u8,
            instance_index: u32,
            pp_instance: ?*?*ID3D11ClassInstance,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateClassInstance: *const fn (
            self: *const ID3D11ClassLinkage,
            p_class_type_name: ?[*:0]const u8,
            constant_buffer_offset: u32,
            constant_vector_offset: u32,
            texture_offset: u32,
            sampler_offset: u32,
            pp_instance: ?*?*ID3D11ClassInstance,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
            pub inline fn getClassInstance(self: *const T, p_class_instance_name_: ?[*:0]const u8, instance_index_: u32, pp_instance_: ?*?*ID3D11ClassInstance) HRESULT {
                return @as(*const ID3D11ClassLinkage.VTable, @ptrCast(self.vtable)).GetClassInstance(@as(*const ID3D11ClassLinkage, @ptrCast(self)), p_class_instance_name_, instance_index_, pp_instance_);
            }
            pub inline fn createClassInstance(self: *const T, p_class_type_name_: ?[*:0]const u8, constant_buffer_offset_: u32, constant_vector_offset_: u32, texture_offset_: u32, sampler_offset_: u32, pp_instance_: ?*?*ID3D11ClassInstance) HRESULT {
                return @as(*const ID3D11ClassLinkage.VTable, @ptrCast(self.vtable)).CreateClassInstance(@as(*const ID3D11ClassLinkage, @ptrCast(self)), p_class_type_name_, constant_buffer_offset_, constant_vector_offset_, texture_offset_, sampler_offset_, pp_instance_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11CommandList_Value = Guid.initString("a24bc4d1-769e-43f7-8013-98ff566c18e2");
pub const IID_ID3D11CommandList = &IID_ID3D11CommandList_Value;
pub const ID3D11CommandList = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetContextFlags: *const fn (
            self: *const ID3D11CommandList,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
            pub inline fn getContextFlags(self: *const T) u32 {
                return @as(*const ID3D11CommandList.VTable, @ptrCast(self.vtable)).GetContextFlags(@as(*const ID3D11CommandList, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_FEATURE = enum(i32) {
    THREADING = 0,
    DOUBLES = 1,
    FORMAT_SUPPORT = 2,
    FORMAT_SUPPORT2 = 3,
    D3D10_X_HARDWARE_OPTIONS = 4,
    D3D11_OPTIONS = 5,
    ARCHITECTURE_INFO = 6,
    D3D9_OPTIONS = 7,
    SHADER_MIN_PRECISION_SUPPORT = 8,
    D3D9_SHADOW_SUPPORT = 9,
    D3D11_OPTIONS1 = 10,
    D3D9_SIMPLE_INSTANCING_SUPPORT = 11,
    MARKER_SUPPORT = 12,
    D3D9_OPTIONS1 = 13,
    D3D11_OPTIONS2 = 14,
    D3D11_OPTIONS3 = 15,
    GPU_VIRTUAL_ADDRESS_SUPPORT = 16,
    D3D11_OPTIONS4 = 17,
    SHADER_CACHE = 18,
    D3D11_OPTIONS5 = 19,
    DISPLAYABLE = 20,
};
pub const D3D11_FEATURE_THREADING = D3D11_FEATURE.THREADING;
pub const D3D11_FEATURE_DOUBLES = D3D11_FEATURE.DOUBLES;
pub const D3D11_FEATURE_FORMAT_SUPPORT = D3D11_FEATURE.FORMAT_SUPPORT;
pub const D3D11_FEATURE_FORMAT_SUPPORT2 = D3D11_FEATURE.FORMAT_SUPPORT2;
pub const D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS = D3D11_FEATURE.D3D10_X_HARDWARE_OPTIONS;
pub const D3D11_FEATURE_D3D11_OPTIONS = D3D11_FEATURE.D3D11_OPTIONS;
pub const D3D11_FEATURE_ARCHITECTURE_INFO = D3D11_FEATURE.ARCHITECTURE_INFO;
pub const D3D11_FEATURE_D3D9_OPTIONS = D3D11_FEATURE.D3D9_OPTIONS;
pub const D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT = D3D11_FEATURE.SHADER_MIN_PRECISION_SUPPORT;
pub const D3D11_FEATURE_D3D9_SHADOW_SUPPORT = D3D11_FEATURE.D3D9_SHADOW_SUPPORT;
pub const D3D11_FEATURE_D3D11_OPTIONS1 = D3D11_FEATURE.D3D11_OPTIONS1;
pub const D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT = D3D11_FEATURE.D3D9_SIMPLE_INSTANCING_SUPPORT;
pub const D3D11_FEATURE_MARKER_SUPPORT = D3D11_FEATURE.MARKER_SUPPORT;
pub const D3D11_FEATURE_D3D9_OPTIONS1 = D3D11_FEATURE.D3D9_OPTIONS1;
pub const D3D11_FEATURE_D3D11_OPTIONS2 = D3D11_FEATURE.D3D11_OPTIONS2;
pub const D3D11_FEATURE_D3D11_OPTIONS3 = D3D11_FEATURE.D3D11_OPTIONS3;
pub const D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT = D3D11_FEATURE.GPU_VIRTUAL_ADDRESS_SUPPORT;
pub const D3D11_FEATURE_D3D11_OPTIONS4 = D3D11_FEATURE.D3D11_OPTIONS4;
pub const D3D11_FEATURE_SHADER_CACHE = D3D11_FEATURE.SHADER_CACHE;
pub const D3D11_FEATURE_D3D11_OPTIONS5 = D3D11_FEATURE.D3D11_OPTIONS5;
pub const D3D11_FEATURE_DISPLAYABLE = D3D11_FEATURE.DISPLAYABLE;

pub const D3D11_FEATURE_DATA_THREADING = extern struct {
    DriverConcurrentCreates: BOOL,
    DriverCommandLists: BOOL,
};

pub const D3D11_FEATURE_DATA_DOUBLES = extern struct {
    DoublePrecisionFloatShaderOps: BOOL,
};

pub const D3D11_FEATURE_DATA_FORMAT_SUPPORT = extern struct {
    InFormat: DXGI_FORMAT,
    OutFormatSupport: u32,
};

pub const D3D11_FEATURE_DATA_FORMAT_SUPPORT2 = extern struct {
    InFormat: DXGI_FORMAT,
    OutFormatSupport2: u32,
};

pub const D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS = extern struct {
    ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x: BOOL,
};

pub const D3D11_FEATURE_DATA_D3D11_OPTIONS = extern struct {
    OutputMergerLogicOp: BOOL,
    UAVOnlyRenderingForcedSampleCount: BOOL,
    DiscardAPIsSeenByDriver: BOOL,
    FlagsForUpdateAndCopySeenByDriver: BOOL,
    ClearView: BOOL,
    CopyWithOverlap: BOOL,
    ConstantBufferPartialUpdate: BOOL,
    ConstantBufferOffsetting: BOOL,
    MapNoOverwriteOnDynamicConstantBuffer: BOOL,
    MapNoOverwriteOnDynamicBufferSRV: BOOL,
    MultisampleRTVWithForcedSampleCountOne: BOOL,
    SAD4ShaderInstructions: BOOL,
    ExtendedDoublesShaderInstructions: BOOL,
    ExtendedResourceSharing: BOOL,
};

pub const D3D11_FEATURE_DATA_ARCHITECTURE_INFO = extern struct {
    TileBasedDeferredRenderer: BOOL,
};

pub const D3D11_FEATURE_DATA_D3D9_OPTIONS = extern struct {
    FullNonPow2TextureSupport: BOOL,
};

pub const D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT = extern struct {
    SupportsDepthAsTextureWithLessEqualComparisonFilter: BOOL,
};

pub const D3D11_SHADER_MIN_PRECISION_SUPPORT = enum(i32) {
    @"0_BIT" = 1,
    @"6_BIT" = 2,
};
pub const D3D11_SHADER_MIN_PRECISION_10_BIT = D3D11_SHADER_MIN_PRECISION_SUPPORT.@"0_BIT";
pub const D3D11_SHADER_MIN_PRECISION_16_BIT = D3D11_SHADER_MIN_PRECISION_SUPPORT.@"6_BIT";

pub const D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT = extern struct {
    PixelShaderMinPrecision: u32,
    AllOtherShaderStagesMinPrecision: u32,
};

pub const D3D11_TILED_RESOURCES_TIER = enum(i32) {
    NOT_SUPPORTED = 0,
    TIER_1 = 1,
    TIER_2 = 2,
    TIER_3 = 3,
};
pub const D3D11_TILED_RESOURCES_NOT_SUPPORTED = D3D11_TILED_RESOURCES_TIER.NOT_SUPPORTED;
pub const D3D11_TILED_RESOURCES_TIER_1 = D3D11_TILED_RESOURCES_TIER.TIER_1;
pub const D3D11_TILED_RESOURCES_TIER_2 = D3D11_TILED_RESOURCES_TIER.TIER_2;
pub const D3D11_TILED_RESOURCES_TIER_3 = D3D11_TILED_RESOURCES_TIER.TIER_3;

pub const D3D11_FEATURE_DATA_D3D11_OPTIONS1 = extern struct {
    TiledResourcesTier: D3D11_TILED_RESOURCES_TIER,
    MinMaxFiltering: BOOL,
    ClearViewAlsoSupportsDepthOnlyFormats: BOOL,
    MapOnDefaultBuffers: BOOL,
};

pub const D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT = extern struct {
    SimpleInstancingSupported: BOOL,
};

pub const D3D11_FEATURE_DATA_MARKER_SUPPORT = extern struct {
    Profile: BOOL,
};

pub const D3D11_FEATURE_DATA_D3D9_OPTIONS1 = extern struct {
    FullNonPow2TextureSupported: BOOL,
    DepthAsTextureWithLessEqualComparisonFilterSupported: BOOL,
    SimpleInstancingSupported: BOOL,
    TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported: BOOL,
};

pub const D3D11_CONSERVATIVE_RASTERIZATION_TIER = enum(i32) {
    NOT_SUPPORTED = 0,
    TIER_1 = 1,
    TIER_2 = 2,
    TIER_3 = 3,
};
pub const D3D11_CONSERVATIVE_RASTERIZATION_NOT_SUPPORTED = D3D11_CONSERVATIVE_RASTERIZATION_TIER.NOT_SUPPORTED;
pub const D3D11_CONSERVATIVE_RASTERIZATION_TIER_1 = D3D11_CONSERVATIVE_RASTERIZATION_TIER.TIER_1;
pub const D3D11_CONSERVATIVE_RASTERIZATION_TIER_2 = D3D11_CONSERVATIVE_RASTERIZATION_TIER.TIER_2;
pub const D3D11_CONSERVATIVE_RASTERIZATION_TIER_3 = D3D11_CONSERVATIVE_RASTERIZATION_TIER.TIER_3;

pub const D3D11_FEATURE_DATA_D3D11_OPTIONS2 = extern struct {
    PSSpecifiedStencilRefSupported: BOOL,
    TypedUAVLoadAdditionalFormats: BOOL,
    ROVsSupported: BOOL,
    ConservativeRasterizationTier: D3D11_CONSERVATIVE_RASTERIZATION_TIER,
    TiledResourcesTier: D3D11_TILED_RESOURCES_TIER,
    MapOnDefaultTextures: BOOL,
    StandardSwizzle: BOOL,
    UnifiedMemoryArchitecture: BOOL,
};

pub const D3D11_FEATURE_DATA_D3D11_OPTIONS3 = extern struct {
    VPAndRTArrayIndexFromAnyShaderFeedingRasterizer: BOOL,
};

pub const D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT = extern struct {
    MaxGPUVirtualAddressBitsPerResource: u32,
    MaxGPUVirtualAddressBitsPerProcess: u32,
};

pub const D3D11_SHADER_CACHE_SUPPORT_FLAGS = enum(i32) {
    NONE = 0,
    AUTOMATIC_INPROC_CACHE = 1,
    AUTOMATIC_DISK_CACHE = 2,
};
pub const D3D11_SHADER_CACHE_SUPPORT_NONE = D3D11_SHADER_CACHE_SUPPORT_FLAGS.NONE;
pub const D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE = D3D11_SHADER_CACHE_SUPPORT_FLAGS.AUTOMATIC_INPROC_CACHE;
pub const D3D11_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE = D3D11_SHADER_CACHE_SUPPORT_FLAGS.AUTOMATIC_DISK_CACHE;

pub const D3D11_FEATURE_DATA_SHADER_CACHE = extern struct {
    SupportFlags: u32,
};

pub const D3D11_SHARED_RESOURCE_TIER = enum(i32) {
    @"0" = 0,
    @"1" = 1,
    @"2" = 2,
    @"3" = 3,
};
pub const D3D11_SHARED_RESOURCE_TIER_0 = D3D11_SHARED_RESOURCE_TIER.@"0";
pub const D3D11_SHARED_RESOURCE_TIER_1 = D3D11_SHARED_RESOURCE_TIER.@"1";
pub const D3D11_SHARED_RESOURCE_TIER_2 = D3D11_SHARED_RESOURCE_TIER.@"2";
pub const D3D11_SHARED_RESOURCE_TIER_3 = D3D11_SHARED_RESOURCE_TIER.@"3";

pub const D3D11_FEATURE_DATA_DISPLAYABLE = extern struct {
    DisplayableTexture: BOOL,
    SharedResourceTier: D3D11_SHARED_RESOURCE_TIER,
};

pub const D3D11_FEATURE_DATA_D3D11_OPTIONS5 = extern struct {
    SharedResourceTier: D3D11_SHARED_RESOURCE_TIER,
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11DeviceContext_Value = Guid.initString("c0bfa96c-e089-44fb-8eaf-26f8796190da");
pub const IID_ID3D11DeviceContext = &IID_ID3D11DeviceContext_Value;
pub const ID3D11DeviceContext = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        VSSetConstantBuffers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PSSetShaderResources: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_views: u32,
            pp_shader_resource_views: ?[*]?*ID3D11ShaderResourceView,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PSSetShader: *const fn (
            self: *const ID3D11DeviceContext,
            p_pixel_shader: ?*ID3D11PixelShader,
            pp_class_instances: ?[*]?*ID3D11ClassInstance,
            num_class_instances: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PSSetSamplers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_samplers: u32,
            pp_samplers: ?[*]?*ID3D11SamplerState,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VSSetShader: *const fn (
            self: *const ID3D11DeviceContext,
            p_vertex_shader: ?*ID3D11VertexShader,
            pp_class_instances: ?[*]?*ID3D11ClassInstance,
            num_class_instances: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawIndexed: *const fn (
            self: *const ID3D11DeviceContext,
            index_count: u32,
            start_index_location: u32,
            base_vertex_location: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Draw: *const fn (
            self: *const ID3D11DeviceContext,
            vertex_count: u32,
            start_vertex_location: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Map: *const fn (
            self: *const ID3D11DeviceContext,
            p_resource: ?*ID3D11Resource,
            subresource: u32,
            map_type: D3D11_MAP,
            map_flags: u32,
            p_mapped_resource: ?*D3D11_MAPPED_SUBRESOURCE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unmap: *const fn (
            self: *const ID3D11DeviceContext,
            p_resource: ?*ID3D11Resource,
            subresource: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PSSetConstantBuffers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        IASetInputLayout: *const fn (
            self: *const ID3D11DeviceContext,
            p_input_layout: ?*ID3D11InputLayout,
        ) callconv(@import("std").os.windows.WINAPI) void,
        IASetVertexBuffers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_buffers: u32,
            pp_vertex_buffers: ?[*]?*ID3D11Buffer,
            p_strides: ?[*]const u32,
            p_offsets: ?[*]const u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        IASetIndexBuffer: *const fn (
            self: *const ID3D11DeviceContext,
            p_index_buffer: ?*ID3D11Buffer,
            format: DXGI_FORMAT,
            offset: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawIndexedInstanced: *const fn (
            self: *const ID3D11DeviceContext,
            index_count_per_instance: u32,
            instance_count: u32,
            start_index_location: u32,
            base_vertex_location: i32,
            start_instance_location: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawInstanced: *const fn (
            self: *const ID3D11DeviceContext,
            vertex_count_per_instance: u32,
            instance_count: u32,
            start_vertex_location: u32,
            start_instance_location: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GSSetConstantBuffers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GSSetShader: *const fn (
            self: *const ID3D11DeviceContext,
            p_shader: ?*ID3D11GeometryShader,
            pp_class_instances: ?[*]?*ID3D11ClassInstance,
            num_class_instances: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        IASetPrimitiveTopology: *const fn (
            self: *const ID3D11DeviceContext,
            topology: D3D_PRIMITIVE_TOPOLOGY,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VSSetShaderResources: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_views: u32,
            pp_shader_resource_views: ?[*]?*ID3D11ShaderResourceView,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VSSetSamplers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_samplers: u32,
            pp_samplers: ?[*]?*ID3D11SamplerState,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Begin: *const fn (
            self: *const ID3D11DeviceContext,
            p_async: ?*ID3D11Asynchronous,
        ) callconv(@import("std").os.windows.WINAPI) void,
        End: *const fn (
            self: *const ID3D11DeviceContext,
            p_async: ?*ID3D11Asynchronous,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetData: *const fn (
            self: *const ID3D11DeviceContext,
            p_async: ?*ID3D11Asynchronous,
            // TODO: what to do with BytesParamIndex 2?
            p_data: ?*anyopaque,
            data_size: u32,
            get_data_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPredication: *const fn (
            self: *const ID3D11DeviceContext,
            p_predicate: ?*ID3D11Predicate,
            predicate_value: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GSSetShaderResources: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_views: u32,
            pp_shader_resource_views: ?[*]?*ID3D11ShaderResourceView,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GSSetSamplers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_samplers: u32,
            pp_samplers: ?[*]?*ID3D11SamplerState,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OMSetRenderTargets: *const fn (
            self: *const ID3D11DeviceContext,
            num_views: u32,
            pp_render_target_views: ?[*]?*ID3D11RenderTargetView,
            p_depth_stencil_view: ?*ID3D11DepthStencilView,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OMSetRenderTargetsAndUnorderedAccessViews: *const fn (
            self: *const ID3D11DeviceContext,
            num_r_t_vs: u32,
            pp_render_target_views: ?[*]?*ID3D11RenderTargetView,
            p_depth_stencil_view: ?*ID3D11DepthStencilView,
            u_a_v_start_slot: u32,
            num_u_a_vs: u32,
            pp_unordered_access_views: ?[*]?*ID3D11UnorderedAccessView,
            p_u_a_v_initial_counts: ?[*]const u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OMSetBlendState: *const fn (
            self: *const ID3D11DeviceContext,
            p_blend_state: ?*ID3D11BlendState,
            blend_factor: ?*const f32,
            sample_mask: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OMSetDepthStencilState: *const fn (
            self: *const ID3D11DeviceContext,
            p_depth_stencil_state: ?*ID3D11DepthStencilState,
            stencil_ref: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SOSetTargets: *const fn (
            self: *const ID3D11DeviceContext,
            num_buffers: u32,
            pp_s_o_targets: ?[*]?*ID3D11Buffer,
            p_offsets: ?[*]const u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawAuto: *const fn (
            self: *const ID3D11DeviceContext,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawIndexedInstancedIndirect: *const fn (
            self: *const ID3D11DeviceContext,
            p_buffer_for_args: ?*ID3D11Buffer,
            aligned_byte_offset_for_args: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawInstancedIndirect: *const fn (
            self: *const ID3D11DeviceContext,
            p_buffer_for_args: ?*ID3D11Buffer,
            aligned_byte_offset_for_args: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Dispatch: *const fn (
            self: *const ID3D11DeviceContext,
            thread_group_count_x: u32,
            thread_group_count_y: u32,
            thread_group_count_z: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DispatchIndirect: *const fn (
            self: *const ID3D11DeviceContext,
            p_buffer_for_args: ?*ID3D11Buffer,
            aligned_byte_offset_for_args: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        RSSetState: *const fn (
            self: *const ID3D11DeviceContext,
            p_rasterizer_state: ?*ID3D11RasterizerState,
        ) callconv(@import("std").os.windows.WINAPI) void,
        RSSetViewports: *const fn (
            self: *const ID3D11DeviceContext,
            num_viewports: u32,
            p_viewports: ?[*]const D3D11_VIEWPORT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        RSSetScissorRects: *const fn (
            self: *const ID3D11DeviceContext,
            num_rects: u32,
            p_rects: ?[*]const RECT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CopySubresourceRegion: *const fn (
            self: *const ID3D11DeviceContext,
            p_dst_resource: ?*ID3D11Resource,
            dst_subresource: u32,
            dst_x: u32,
            dst_y: u32,
            dst_z: u32,
            p_src_resource: ?*ID3D11Resource,
            src_subresource: u32,
            p_src_box: ?*const D3D11_BOX,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CopyResource: *const fn (
            self: *const ID3D11DeviceContext,
            p_dst_resource: ?*ID3D11Resource,
            p_src_resource: ?*ID3D11Resource,
        ) callconv(@import("std").os.windows.WINAPI) void,
        UpdateSubresource: *const fn (
            self: *const ID3D11DeviceContext,
            p_dst_resource: ?*ID3D11Resource,
            dst_subresource: u32,
            p_dst_box: ?*const D3D11_BOX,
            p_src_data: ?*const anyopaque,
            src_row_pitch: u32,
            src_depth_pitch: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CopyStructureCount: *const fn (
            self: *const ID3D11DeviceContext,
            p_dst_buffer: ?*ID3D11Buffer,
            dst_aligned_byte_offset: u32,
            p_src_view: ?*ID3D11UnorderedAccessView,
        ) callconv(@import("std").os.windows.WINAPI) void,
        ClearRenderTargetView: *const fn (
            self: *const ID3D11DeviceContext,
            p_render_target_view: ?*ID3D11RenderTargetView,
            color_r_g_b_a: ?*const f32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        ClearUnorderedAccessViewUint: *const fn (
            self: *const ID3D11DeviceContext,
            p_unordered_access_view: ?*ID3D11UnorderedAccessView,
            values: ?*const u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        ClearUnorderedAccessViewFloat: *const fn (
            self: *const ID3D11DeviceContext,
            p_unordered_access_view: ?*ID3D11UnorderedAccessView,
            values: ?*const f32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        ClearDepthStencilView: *const fn (
            self: *const ID3D11DeviceContext,
            p_depth_stencil_view: ?*ID3D11DepthStencilView,
            clear_flags: u32,
            depth: f32,
            stencil: u8,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GenerateMips: *const fn (
            self: *const ID3D11DeviceContext,
            p_shader_resource_view: ?*ID3D11ShaderResourceView,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetResourceMinLOD: *const fn (
            self: *const ID3D11DeviceContext,
            p_resource: ?*ID3D11Resource,
            min_l_o_d: f32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetResourceMinLOD: *const fn (
            self: *const ID3D11DeviceContext,
            p_resource: ?*ID3D11Resource,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        ResolveSubresource: *const fn (
            self: *const ID3D11DeviceContext,
            p_dst_resource: ?*ID3D11Resource,
            dst_subresource: u32,
            p_src_resource: ?*ID3D11Resource,
            src_subresource: u32,
            format: DXGI_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        ExecuteCommandList: *const fn (
            self: *const ID3D11DeviceContext,
            p_command_list: ?*ID3D11CommandList,
            restore_context_state: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        HSSetShaderResources: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_views: u32,
            pp_shader_resource_views: ?[*]?*ID3D11ShaderResourceView,
        ) callconv(@import("std").os.windows.WINAPI) void,
        HSSetShader: *const fn (
            self: *const ID3D11DeviceContext,
            p_hull_shader: ?*ID3D11HullShader,
            pp_class_instances: ?[*]?*ID3D11ClassInstance,
            num_class_instances: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        HSSetSamplers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_samplers: u32,
            pp_samplers: ?[*]?*ID3D11SamplerState,
        ) callconv(@import("std").os.windows.WINAPI) void,
        HSSetConstantBuffers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DSSetShaderResources: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_views: u32,
            pp_shader_resource_views: ?[*]?*ID3D11ShaderResourceView,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DSSetShader: *const fn (
            self: *const ID3D11DeviceContext,
            p_domain_shader: ?*ID3D11DomainShader,
            pp_class_instances: ?[*]?*ID3D11ClassInstance,
            num_class_instances: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DSSetSamplers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_samplers: u32,
            pp_samplers: ?[*]?*ID3D11SamplerState,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DSSetConstantBuffers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CSSetShaderResources: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_views: u32,
            pp_shader_resource_views: ?[*]?*ID3D11ShaderResourceView,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CSSetUnorderedAccessViews: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_u_a_vs: u32,
            pp_unordered_access_views: ?[*]?*ID3D11UnorderedAccessView,
            p_u_a_v_initial_counts: ?[*]const u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CSSetShader: *const fn (
            self: *const ID3D11DeviceContext,
            p_compute_shader: ?*ID3D11ComputeShader,
            pp_class_instances: ?[*]?*ID3D11ClassInstance,
            num_class_instances: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CSSetSamplers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_samplers: u32,
            pp_samplers: ?[*]?*ID3D11SamplerState,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CSSetConstantBuffers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VSGetConstantBuffers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PSGetShaderResources: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_views: u32,
            pp_shader_resource_views: ?[*]?*ID3D11ShaderResourceView,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PSGetShader: *const fn (
            self: *const ID3D11DeviceContext,
            pp_pixel_shader: ?*?*ID3D11PixelShader,
            pp_class_instances: ?[*]?*ID3D11ClassInstance,
            p_num_class_instances: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PSGetSamplers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_samplers: u32,
            pp_samplers: ?[*]?*ID3D11SamplerState,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VSGetShader: *const fn (
            self: *const ID3D11DeviceContext,
            pp_vertex_shader: ?*?*ID3D11VertexShader,
            pp_class_instances: ?[*]?*ID3D11ClassInstance,
            p_num_class_instances: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PSGetConstantBuffers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        IAGetInputLayout: *const fn (
            self: *const ID3D11DeviceContext,
            pp_input_layout: ?*?*ID3D11InputLayout,
        ) callconv(@import("std").os.windows.WINAPI) void,
        IAGetVertexBuffers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_buffers: u32,
            pp_vertex_buffers: ?[*]?*ID3D11Buffer,
            p_strides: ?[*]u32,
            p_offsets: ?[*]u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        IAGetIndexBuffer: *const fn (
            self: *const ID3D11DeviceContext,
            p_index_buffer: ?*?*ID3D11Buffer,
            format: ?*DXGI_FORMAT,
            offset: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GSGetConstantBuffers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GSGetShader: *const fn (
            self: *const ID3D11DeviceContext,
            pp_geometry_shader: ?*?*ID3D11GeometryShader,
            pp_class_instances: ?[*]?*ID3D11ClassInstance,
            p_num_class_instances: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        IAGetPrimitiveTopology: *const fn (
            self: *const ID3D11DeviceContext,
            p_topology: ?*D3D_PRIMITIVE_TOPOLOGY,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VSGetShaderResources: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_views: u32,
            pp_shader_resource_views: ?[*]?*ID3D11ShaderResourceView,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VSGetSamplers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_samplers: u32,
            pp_samplers: ?[*]?*ID3D11SamplerState,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetPredication: *const fn (
            self: *const ID3D11DeviceContext,
            pp_predicate: ?*?*ID3D11Predicate,
            p_predicate_value: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GSGetShaderResources: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_views: u32,
            pp_shader_resource_views: ?[*]?*ID3D11ShaderResourceView,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GSGetSamplers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_samplers: u32,
            pp_samplers: ?[*]?*ID3D11SamplerState,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OMGetRenderTargets: *const fn (
            self: *const ID3D11DeviceContext,
            num_views: u32,
            pp_render_target_views: ?[*]?*ID3D11RenderTargetView,
            pp_depth_stencil_view: ?*?*ID3D11DepthStencilView,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OMGetRenderTargetsAndUnorderedAccessViews: *const fn (
            self: *const ID3D11DeviceContext,
            num_r_t_vs: u32,
            pp_render_target_views: ?[*]?*ID3D11RenderTargetView,
            pp_depth_stencil_view: ?*?*ID3D11DepthStencilView,
            u_a_v_start_slot: u32,
            num_u_a_vs: u32,
            pp_unordered_access_views: ?[*]?*ID3D11UnorderedAccessView,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OMGetBlendState: *const fn (
            self: *const ID3D11DeviceContext,
            pp_blend_state: ?*?*ID3D11BlendState,
            blend_factor: ?*f32,
            p_sample_mask: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OMGetDepthStencilState: *const fn (
            self: *const ID3D11DeviceContext,
            pp_depth_stencil_state: ?*?*ID3D11DepthStencilState,
            p_stencil_ref: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SOGetTargets: *const fn (
            self: *const ID3D11DeviceContext,
            num_buffers: u32,
            pp_s_o_targets: ?[*]?*ID3D11Buffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        RSGetState: *const fn (
            self: *const ID3D11DeviceContext,
            pp_rasterizer_state: ?*?*ID3D11RasterizerState,
        ) callconv(@import("std").os.windows.WINAPI) void,
        RSGetViewports: *const fn (
            self: *const ID3D11DeviceContext,
            p_num_viewports: ?*u32,
            p_viewports: ?[*]D3D11_VIEWPORT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        RSGetScissorRects: *const fn (
            self: *const ID3D11DeviceContext,
            p_num_rects: ?*u32,
            p_rects: ?[*]RECT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        HSGetShaderResources: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_views: u32,
            pp_shader_resource_views: ?[*]?*ID3D11ShaderResourceView,
        ) callconv(@import("std").os.windows.WINAPI) void,
        HSGetShader: *const fn (
            self: *const ID3D11DeviceContext,
            pp_hull_shader: ?*?*ID3D11HullShader,
            pp_class_instances: ?[*]?*ID3D11ClassInstance,
            p_num_class_instances: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        HSGetSamplers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_samplers: u32,
            pp_samplers: ?[*]?*ID3D11SamplerState,
        ) callconv(@import("std").os.windows.WINAPI) void,
        HSGetConstantBuffers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DSGetShaderResources: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_views: u32,
            pp_shader_resource_views: ?[*]?*ID3D11ShaderResourceView,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DSGetShader: *const fn (
            self: *const ID3D11DeviceContext,
            pp_domain_shader: ?*?*ID3D11DomainShader,
            pp_class_instances: ?[*]?*ID3D11ClassInstance,
            p_num_class_instances: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DSGetSamplers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_samplers: u32,
            pp_samplers: ?[*]?*ID3D11SamplerState,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DSGetConstantBuffers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CSGetShaderResources: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_views: u32,
            pp_shader_resource_views: ?[*]?*ID3D11ShaderResourceView,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CSGetUnorderedAccessViews: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_u_a_vs: u32,
            pp_unordered_access_views: ?[*]?*ID3D11UnorderedAccessView,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CSGetShader: *const fn (
            self: *const ID3D11DeviceContext,
            pp_compute_shader: ?*?*ID3D11ComputeShader,
            pp_class_instances: ?[*]?*ID3D11ClassInstance,
            p_num_class_instances: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CSGetSamplers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_samplers: u32,
            pp_samplers: ?[*]?*ID3D11SamplerState,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CSGetConstantBuffers: *const fn (
            self: *const ID3D11DeviceContext,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        ClearState: *const fn (
            self: *const ID3D11DeviceContext,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Flush: *const fn (
            self: *const ID3D11DeviceContext,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetType: *const fn (
            self: *const ID3D11DeviceContext,
        ) callconv(@import("std").os.windows.WINAPI) D3D11_DEVICE_CONTEXT_TYPE,
        GetContextFlags: *const fn (
            self: *const ID3D11DeviceContext,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        FinishCommandList: *const fn (
            self: *const ID3D11DeviceContext,
            restore_deferred_context_state: BOOL,
            pp_command_list: ?*?*ID3D11CommandList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
            pub inline fn vsSetConstantBuffers(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).VSSetConstantBuffers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_);
            }
            pub inline fn psSetShaderResources(self: *const T, start_slot_: u32, num_views_: u32, pp_shader_resource_views_: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).PSSetShaderResources(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_views_, pp_shader_resource_views_);
            }
            pub inline fn psSetShader(self: *const T, p_pixel_shader_: ?*ID3D11PixelShader, pp_class_instances_: ?[*]?*ID3D11ClassInstance, num_class_instances_: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).PSSetShader(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_pixel_shader_, pp_class_instances_, num_class_instances_);
            }
            pub inline fn psSetSamplers(self: *const T, start_slot_: u32, num_samplers_: u32, pp_samplers_: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).PSSetSamplers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_samplers_, pp_samplers_);
            }
            pub inline fn vsSetShader(self: *const T, p_vertex_shader_: ?*ID3D11VertexShader, pp_class_instances_: ?[*]?*ID3D11ClassInstance, num_class_instances_: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).VSSetShader(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_vertex_shader_, pp_class_instances_, num_class_instances_);
            }
            pub inline fn drawIndexed(self: *const T, index_count_: u32, start_index_location_: u32, base_vertex_location_: i32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DrawIndexed(@as(*const ID3D11DeviceContext, @ptrCast(self)), index_count_, start_index_location_, base_vertex_location_);
            }
            pub inline fn draw(self: *const T, vertex_count_: u32, start_vertex_location_: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).Draw(@as(*const ID3D11DeviceContext, @ptrCast(self)), vertex_count_, start_vertex_location_);
            }
            pub inline fn map(self: *const T, p_resource_: ?*ID3D11Resource, subresource_: u32, map_type_: D3D11_MAP, map_flags_: u32, p_mapped_resource_: ?*D3D11_MAPPED_SUBRESOURCE) HRESULT {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).Map(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_resource_, subresource_, map_type_, map_flags_, p_mapped_resource_);
            }
            pub inline fn unmap(self: *const T, p_resource_: ?*ID3D11Resource, subresource_: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).Unmap(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_resource_, subresource_);
            }
            pub inline fn psSetConstantBuffers(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).PSSetConstantBuffers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_);
            }
            pub inline fn iaSetInputLayout(self: *const T, p_input_layout_: ?*ID3D11InputLayout) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).IASetInputLayout(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_input_layout_);
            }
            pub inline fn iaSetVertexBuffers(self: *const T, start_slot_: u32, num_buffers_: u32, pp_vertex_buffers_: ?[*]?*ID3D11Buffer, p_strides_: ?[*]const u32, p_offsets_: ?[*]const u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).IASetVertexBuffers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_buffers_, pp_vertex_buffers_, p_strides_, p_offsets_);
            }
            pub inline fn iaSetIndexBuffer(self: *const T, p_index_buffer_: ?*ID3D11Buffer, format_: DXGI_FORMAT, offset_: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).IASetIndexBuffer(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_index_buffer_, format_, offset_);
            }
            pub inline fn drawIndexedInstanced(self: *const T, index_count_per_instance_: u32, instance_count_: u32, start_index_location_: u32, base_vertex_location_: i32, start_instance_location_: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DrawIndexedInstanced(@as(*const ID3D11DeviceContext, @ptrCast(self)), index_count_per_instance_, instance_count_, start_index_location_, base_vertex_location_, start_instance_location_);
            }
            pub inline fn drawInstanced(self: *const T, vertex_count_per_instance_: u32, instance_count_: u32, start_vertex_location_: u32, start_instance_location_: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DrawInstanced(@as(*const ID3D11DeviceContext, @ptrCast(self)), vertex_count_per_instance_, instance_count_, start_vertex_location_, start_instance_location_);
            }
            pub inline fn gsSetConstantBuffers(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GSSetConstantBuffers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_);
            }
            pub inline fn gsSetShader(self: *const T, p_shader_: ?*ID3D11GeometryShader, pp_class_instances_: ?[*]?*ID3D11ClassInstance, num_class_instances_: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GSSetShader(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_shader_, pp_class_instances_, num_class_instances_);
            }
            pub inline fn iaSetPrimitiveTopology(self: *const T, topology_: D3D_PRIMITIVE_TOPOLOGY) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).IASetPrimitiveTopology(@as(*const ID3D11DeviceContext, @ptrCast(self)), topology_);
            }
            pub inline fn vsSetShaderResources(self: *const T, start_slot_: u32, num_views_: u32, pp_shader_resource_views_: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).VSSetShaderResources(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_views_, pp_shader_resource_views_);
            }
            pub inline fn vsSetSamplers(self: *const T, start_slot_: u32, num_samplers_: u32, pp_samplers_: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).VSSetSamplers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_samplers_, pp_samplers_);
            }
            pub inline fn begin(self: *const T, p_async_: ?*ID3D11Asynchronous) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).Begin(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_async_);
            }
            pub inline fn end(self: *const T, p_async_: ?*ID3D11Asynchronous) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).End(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_async_);
            }
            pub inline fn getData(self: *const T, p_async_: ?*ID3D11Asynchronous, p_data_: ?*anyopaque, data_size_: u32, get_data_flags_: u32) HRESULT {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GetData(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_async_, p_data_, data_size_, get_data_flags_);
            }
            pub inline fn setPredication(self: *const T, p_predicate_: ?*ID3D11Predicate, predicate_value_: BOOL) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).SetPredication(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_predicate_, predicate_value_);
            }
            pub inline fn gsSetShaderResources(self: *const T, start_slot_: u32, num_views_: u32, pp_shader_resource_views_: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GSSetShaderResources(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_views_, pp_shader_resource_views_);
            }
            pub inline fn gsSetSamplers(self: *const T, start_slot_: u32, num_samplers_: u32, pp_samplers_: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GSSetSamplers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_samplers_, pp_samplers_);
            }
            pub inline fn omSetRenderTargets(self: *const T, num_views_: u32, pp_render_target_views_: ?[*]?*ID3D11RenderTargetView, p_depth_stencil_view_: ?*ID3D11DepthStencilView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).OMSetRenderTargets(@as(*const ID3D11DeviceContext, @ptrCast(self)), num_views_, pp_render_target_views_, p_depth_stencil_view_);
            }
            pub inline fn omSetRenderTargetsAndUnorderedAccessViews(self: *const T, num_r_t_vs_: u32, pp_render_target_views_: ?[*]?*ID3D11RenderTargetView, p_depth_stencil_view_: ?*ID3D11DepthStencilView, u_a_v_start_slot_: u32, num_u_a_vs_: u32, pp_unordered_access_views_: ?[*]?*ID3D11UnorderedAccessView, p_u_a_v_initial_counts_: ?[*]const u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).OMSetRenderTargetsAndUnorderedAccessViews(@as(*const ID3D11DeviceContext, @ptrCast(self)), num_r_t_vs_, pp_render_target_views_, p_depth_stencil_view_, u_a_v_start_slot_, num_u_a_vs_, pp_unordered_access_views_, p_u_a_v_initial_counts_);
            }
            pub inline fn omSetBlendState(self: *const T, p_blend_state_: ?*ID3D11BlendState, blend_factor_: ?*const f32, sample_mask_: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).OMSetBlendState(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_blend_state_, blend_factor_, sample_mask_);
            }
            pub inline fn omSetDepthStencilState(self: *const T, p_depth_stencil_state_: ?*ID3D11DepthStencilState, stencil_ref_: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).OMSetDepthStencilState(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_depth_stencil_state_, stencil_ref_);
            }
            pub inline fn soSetTargets(self: *const T, num_buffers_: u32, pp_s_o_targets_: ?[*]?*ID3D11Buffer, p_offsets_: ?[*]const u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).SOSetTargets(@as(*const ID3D11DeviceContext, @ptrCast(self)), num_buffers_, pp_s_o_targets_, p_offsets_);
            }
            pub inline fn drawAuto(self: *const T) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DrawAuto(@as(*const ID3D11DeviceContext, @ptrCast(self)));
            }
            pub inline fn drawIndexedInstancedIndirect(self: *const T, p_buffer_for_args_: ?*ID3D11Buffer, aligned_byte_offset_for_args_: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DrawIndexedInstancedIndirect(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_buffer_for_args_, aligned_byte_offset_for_args_);
            }
            pub inline fn drawInstancedIndirect(self: *const T, p_buffer_for_args_: ?*ID3D11Buffer, aligned_byte_offset_for_args_: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DrawInstancedIndirect(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_buffer_for_args_, aligned_byte_offset_for_args_);
            }
            pub inline fn dispatch(self: *const T, thread_group_count_x_: u32, thread_group_count_y_: u32, thread_group_count_z_: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).Dispatch(@as(*const ID3D11DeviceContext, @ptrCast(self)), thread_group_count_x_, thread_group_count_y_, thread_group_count_z_);
            }
            pub inline fn dispatchIndirect(self: *const T, p_buffer_for_args_: ?*ID3D11Buffer, aligned_byte_offset_for_args_: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DispatchIndirect(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_buffer_for_args_, aligned_byte_offset_for_args_);
            }
            pub inline fn rsSetState(self: *const T, p_rasterizer_state_: ?*ID3D11RasterizerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).RSSetState(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_rasterizer_state_);
            }
            pub inline fn rsSetViewports(self: *const T, num_viewports_: u32, p_viewports_: ?[*]const D3D11_VIEWPORT) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).RSSetViewports(@as(*const ID3D11DeviceContext, @ptrCast(self)), num_viewports_, p_viewports_);
            }
            pub inline fn rsSetScissorRects(self: *const T, num_rects_: u32, p_rects_: ?[*]const RECT) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).RSSetScissorRects(@as(*const ID3D11DeviceContext, @ptrCast(self)), num_rects_, p_rects_);
            }
            pub inline fn copySubresourceRegion(self: *const T, p_dst_resource_: ?*ID3D11Resource, dst_subresource_: u32, dst_x_: u32, dst_y_: u32, dst_z_: u32, p_src_resource_: ?*ID3D11Resource, src_subresource_: u32, p_src_box_: ?*const D3D11_BOX) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CopySubresourceRegion(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_dst_resource_, dst_subresource_, dst_x_, dst_y_, dst_z_, p_src_resource_, src_subresource_, p_src_box_);
            }
            pub inline fn copyResource(self: *const T, p_dst_resource_: ?*ID3D11Resource, p_src_resource_: ?*ID3D11Resource) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CopyResource(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_dst_resource_, p_src_resource_);
            }
            pub inline fn updateSubresource(self: *const T, p_dst_resource_: ?*ID3D11Resource, dst_subresource_: u32, p_dst_box_: ?*const D3D11_BOX, p_src_data_: ?*const anyopaque, src_row_pitch_: u32, src_depth_pitch_: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).UpdateSubresource(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_dst_resource_, dst_subresource_, p_dst_box_, p_src_data_, src_row_pitch_, src_depth_pitch_);
            }
            pub inline fn copyStructureCount(self: *const T, p_dst_buffer_: ?*ID3D11Buffer, dst_aligned_byte_offset_: u32, p_src_view_: ?*ID3D11UnorderedAccessView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CopyStructureCount(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_dst_buffer_, dst_aligned_byte_offset_, p_src_view_);
            }
            pub inline fn clearRenderTargetView(self: *const T, p_render_target_view_: ?*ID3D11RenderTargetView, color_r_g_b_a_: ?*const f32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).ClearRenderTargetView(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_render_target_view_, color_r_g_b_a_);
            }
            pub inline fn clearUnorderedAccessViewUint(self: *const T, p_unordered_access_view_: ?*ID3D11UnorderedAccessView, values_: ?*const u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).ClearUnorderedAccessViewUint(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_unordered_access_view_, values_);
            }
            pub inline fn clearUnorderedAccessViewFloat(self: *const T, p_unordered_access_view_: ?*ID3D11UnorderedAccessView, values_: ?*const f32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).ClearUnorderedAccessViewFloat(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_unordered_access_view_, values_);
            }
            pub inline fn clearDepthStencilView(self: *const T, p_depth_stencil_view_: ?*ID3D11DepthStencilView, clear_flags_: u32, depth_: f32, stencil_: u8) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).ClearDepthStencilView(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_depth_stencil_view_, clear_flags_, depth_, stencil_);
            }
            pub inline fn generateMips(self: *const T, p_shader_resource_view_: ?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GenerateMips(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_shader_resource_view_);
            }
            pub inline fn setResourceMinLOD(self: *const T, p_resource_: ?*ID3D11Resource, min_l_o_d_: f32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).SetResourceMinLOD(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_resource_, min_l_o_d_);
            }
            pub inline fn getResourceMinLOD(self: *const T, p_resource_: ?*ID3D11Resource) f32 {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GetResourceMinLOD(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_resource_);
            }
            pub inline fn resolveSubresource(self: *const T, p_dst_resource_: ?*ID3D11Resource, dst_subresource_: u32, p_src_resource_: ?*ID3D11Resource, src_subresource_: u32, format_: DXGI_FORMAT) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).ResolveSubresource(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_dst_resource_, dst_subresource_, p_src_resource_, src_subresource_, format_);
            }
            pub inline fn executeCommandList(self: *const T, p_command_list_: ?*ID3D11CommandList, restore_context_state_: BOOL) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).ExecuteCommandList(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_command_list_, restore_context_state_);
            }
            pub inline fn hsSetShaderResources(self: *const T, start_slot_: u32, num_views_: u32, pp_shader_resource_views_: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).HSSetShaderResources(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_views_, pp_shader_resource_views_);
            }
            pub inline fn hsSetShader(self: *const T, p_hull_shader_: ?*ID3D11HullShader, pp_class_instances_: ?[*]?*ID3D11ClassInstance, num_class_instances_: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).HSSetShader(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_hull_shader_, pp_class_instances_, num_class_instances_);
            }
            pub inline fn hsSetSamplers(self: *const T, start_slot_: u32, num_samplers_: u32, pp_samplers_: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).HSSetSamplers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_samplers_, pp_samplers_);
            }
            pub inline fn hsSetConstantBuffers(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).HSSetConstantBuffers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_);
            }
            pub inline fn dsSetShaderResources(self: *const T, start_slot_: u32, num_views_: u32, pp_shader_resource_views_: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DSSetShaderResources(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_views_, pp_shader_resource_views_);
            }
            pub inline fn dsSetShader(self: *const T, p_domain_shader_: ?*ID3D11DomainShader, pp_class_instances_: ?[*]?*ID3D11ClassInstance, num_class_instances_: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DSSetShader(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_domain_shader_, pp_class_instances_, num_class_instances_);
            }
            pub inline fn dsSetSamplers(self: *const T, start_slot_: u32, num_samplers_: u32, pp_samplers_: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DSSetSamplers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_samplers_, pp_samplers_);
            }
            pub inline fn dsSetConstantBuffers(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DSSetConstantBuffers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_);
            }
            pub inline fn csSetShaderResources(self: *const T, start_slot_: u32, num_views_: u32, pp_shader_resource_views_: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CSSetShaderResources(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_views_, pp_shader_resource_views_);
            }
            pub inline fn csSetUnorderedAccessViews(self: *const T, start_slot_: u32, num_u_a_vs_: u32, pp_unordered_access_views_: ?[*]?*ID3D11UnorderedAccessView, p_u_a_v_initial_counts_: ?[*]const u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CSSetUnorderedAccessViews(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_u_a_vs_, pp_unordered_access_views_, p_u_a_v_initial_counts_);
            }
            pub inline fn csSetShader(self: *const T, p_compute_shader_: ?*ID3D11ComputeShader, pp_class_instances_: ?[*]?*ID3D11ClassInstance, num_class_instances_: u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CSSetShader(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_compute_shader_, pp_class_instances_, num_class_instances_);
            }
            pub inline fn csSetSamplers(self: *const T, start_slot_: u32, num_samplers_: u32, pp_samplers_: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CSSetSamplers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_samplers_, pp_samplers_);
            }
            pub inline fn csSetConstantBuffers(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CSSetConstantBuffers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_);
            }
            pub inline fn vsGetConstantBuffers(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).VSGetConstantBuffers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_);
            }
            pub inline fn psGetShaderResources(self: *const T, start_slot_: u32, num_views_: u32, pp_shader_resource_views_: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).PSGetShaderResources(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_views_, pp_shader_resource_views_);
            }
            pub inline fn psGetShader(self: *const T, pp_pixel_shader_: ?*?*ID3D11PixelShader, pp_class_instances_: ?[*]?*ID3D11ClassInstance, p_num_class_instances_: ?*u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).PSGetShader(@as(*const ID3D11DeviceContext, @ptrCast(self)), pp_pixel_shader_, pp_class_instances_, p_num_class_instances_);
            }
            pub inline fn psGetSamplers(self: *const T, start_slot_: u32, num_samplers_: u32, pp_samplers_: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).PSGetSamplers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_samplers_, pp_samplers_);
            }
            pub inline fn vsGetShader(self: *const T, pp_vertex_shader_: ?*?*ID3D11VertexShader, pp_class_instances_: ?[*]?*ID3D11ClassInstance, p_num_class_instances_: ?*u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).VSGetShader(@as(*const ID3D11DeviceContext, @ptrCast(self)), pp_vertex_shader_, pp_class_instances_, p_num_class_instances_);
            }
            pub inline fn psGetConstantBuffers(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).PSGetConstantBuffers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_);
            }
            pub inline fn iaGetInputLayout(self: *const T, pp_input_layout_: ?*?*ID3D11InputLayout) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).IAGetInputLayout(@as(*const ID3D11DeviceContext, @ptrCast(self)), pp_input_layout_);
            }
            pub inline fn iaGetVertexBuffers(self: *const T, start_slot_: u32, num_buffers_: u32, pp_vertex_buffers_: ?[*]?*ID3D11Buffer, p_strides_: ?[*]u32, p_offsets_: ?[*]u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).IAGetVertexBuffers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_buffers_, pp_vertex_buffers_, p_strides_, p_offsets_);
            }
            pub inline fn iaGetIndexBuffer(self: *const T, p_index_buffer_: ?*?*ID3D11Buffer, format_: ?*DXGI_FORMAT, offset_: ?*u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).IAGetIndexBuffer(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_index_buffer_, format_, offset_);
            }
            pub inline fn gsGetConstantBuffers(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GSGetConstantBuffers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_);
            }
            pub inline fn gsGetShader(self: *const T, pp_geometry_shader_: ?*?*ID3D11GeometryShader, pp_class_instances_: ?[*]?*ID3D11ClassInstance, p_num_class_instances_: ?*u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GSGetShader(@as(*const ID3D11DeviceContext, @ptrCast(self)), pp_geometry_shader_, pp_class_instances_, p_num_class_instances_);
            }
            pub inline fn iaGetPrimitiveTopology(self: *const T, p_topology_: ?*D3D_PRIMITIVE_TOPOLOGY) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).IAGetPrimitiveTopology(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_topology_);
            }
            pub inline fn vsGetShaderResources(self: *const T, start_slot_: u32, num_views_: u32, pp_shader_resource_views_: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).VSGetShaderResources(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_views_, pp_shader_resource_views_);
            }
            pub inline fn vsGetSamplers(self: *const T, start_slot_: u32, num_samplers_: u32, pp_samplers_: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).VSGetSamplers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_samplers_, pp_samplers_);
            }
            pub inline fn getPredication(self: *const T, pp_predicate_: ?*?*ID3D11Predicate, p_predicate_value_: ?*BOOL) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GetPredication(@as(*const ID3D11DeviceContext, @ptrCast(self)), pp_predicate_, p_predicate_value_);
            }
            pub inline fn gsGetShaderResources(self: *const T, start_slot_: u32, num_views_: u32, pp_shader_resource_views_: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GSGetShaderResources(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_views_, pp_shader_resource_views_);
            }
            pub inline fn gsGetSamplers(self: *const T, start_slot_: u32, num_samplers_: u32, pp_samplers_: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GSGetSamplers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_samplers_, pp_samplers_);
            }
            pub inline fn omGetRenderTargets(self: *const T, num_views_: u32, pp_render_target_views_: ?[*]?*ID3D11RenderTargetView, pp_depth_stencil_view_: ?*?*ID3D11DepthStencilView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).OMGetRenderTargets(@as(*const ID3D11DeviceContext, @ptrCast(self)), num_views_, pp_render_target_views_, pp_depth_stencil_view_);
            }
            pub inline fn omGetRenderTargetsAndUnorderedAccessViews(self: *const T, num_r_t_vs_: u32, pp_render_target_views_: ?[*]?*ID3D11RenderTargetView, pp_depth_stencil_view_: ?*?*ID3D11DepthStencilView, u_a_v_start_slot_: u32, num_u_a_vs_: u32, pp_unordered_access_views_: ?[*]?*ID3D11UnorderedAccessView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).OMGetRenderTargetsAndUnorderedAccessViews(@as(*const ID3D11DeviceContext, @ptrCast(self)), num_r_t_vs_, pp_render_target_views_, pp_depth_stencil_view_, u_a_v_start_slot_, num_u_a_vs_, pp_unordered_access_views_);
            }
            pub inline fn omGetBlendState(self: *const T, pp_blend_state_: ?*?*ID3D11BlendState, blend_factor_: ?*f32, p_sample_mask_: ?*u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).OMGetBlendState(@as(*const ID3D11DeviceContext, @ptrCast(self)), pp_blend_state_, blend_factor_, p_sample_mask_);
            }
            pub inline fn omGetDepthStencilState(self: *const T, pp_depth_stencil_state_: ?*?*ID3D11DepthStencilState, p_stencil_ref_: ?*u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).OMGetDepthStencilState(@as(*const ID3D11DeviceContext, @ptrCast(self)), pp_depth_stencil_state_, p_stencil_ref_);
            }
            pub inline fn soGetTargets(self: *const T, num_buffers_: u32, pp_s_o_targets_: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).SOGetTargets(@as(*const ID3D11DeviceContext, @ptrCast(self)), num_buffers_, pp_s_o_targets_);
            }
            pub inline fn rsGetState(self: *const T, pp_rasterizer_state_: ?*?*ID3D11RasterizerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).RSGetState(@as(*const ID3D11DeviceContext, @ptrCast(self)), pp_rasterizer_state_);
            }
            pub inline fn rsGetViewports(self: *const T, p_num_viewports_: ?*u32, p_viewports_: ?[*]D3D11_VIEWPORT) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).RSGetViewports(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_num_viewports_, p_viewports_);
            }
            pub inline fn rsGetScissorRects(self: *const T, p_num_rects_: ?*u32, p_rects_: ?[*]RECT) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).RSGetScissorRects(@as(*const ID3D11DeviceContext, @ptrCast(self)), p_num_rects_, p_rects_);
            }
            pub inline fn hsGetShaderResources(self: *const T, start_slot_: u32, num_views_: u32, pp_shader_resource_views_: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).HSGetShaderResources(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_views_, pp_shader_resource_views_);
            }
            pub inline fn hsGetShader(self: *const T, pp_hull_shader_: ?*?*ID3D11HullShader, pp_class_instances_: ?[*]?*ID3D11ClassInstance, p_num_class_instances_: ?*u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).HSGetShader(@as(*const ID3D11DeviceContext, @ptrCast(self)), pp_hull_shader_, pp_class_instances_, p_num_class_instances_);
            }
            pub inline fn hsGetSamplers(self: *const T, start_slot_: u32, num_samplers_: u32, pp_samplers_: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).HSGetSamplers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_samplers_, pp_samplers_);
            }
            pub inline fn hsGetConstantBuffers(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).HSGetConstantBuffers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_);
            }
            pub inline fn dsGetShaderResources(self: *const T, start_slot_: u32, num_views_: u32, pp_shader_resource_views_: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DSGetShaderResources(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_views_, pp_shader_resource_views_);
            }
            pub inline fn dsGetShader(self: *const T, pp_domain_shader_: ?*?*ID3D11DomainShader, pp_class_instances_: ?[*]?*ID3D11ClassInstance, p_num_class_instances_: ?*u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DSGetShader(@as(*const ID3D11DeviceContext, @ptrCast(self)), pp_domain_shader_, pp_class_instances_, p_num_class_instances_);
            }
            pub inline fn dsGetSamplers(self: *const T, start_slot_: u32, num_samplers_: u32, pp_samplers_: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DSGetSamplers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_samplers_, pp_samplers_);
            }
            pub inline fn dsGetConstantBuffers(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).DSGetConstantBuffers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_);
            }
            pub inline fn csGetShaderResources(self: *const T, start_slot_: u32, num_views_: u32, pp_shader_resource_views_: ?[*]?*ID3D11ShaderResourceView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CSGetShaderResources(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_views_, pp_shader_resource_views_);
            }
            pub inline fn csGetUnorderedAccessViews(self: *const T, start_slot_: u32, num_u_a_vs_: u32, pp_unordered_access_views_: ?[*]?*ID3D11UnorderedAccessView) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CSGetUnorderedAccessViews(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_u_a_vs_, pp_unordered_access_views_);
            }
            pub inline fn csGetShader(self: *const T, pp_compute_shader_: ?*?*ID3D11ComputeShader, pp_class_instances_: ?[*]?*ID3D11ClassInstance, p_num_class_instances_: ?*u32) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CSGetShader(@as(*const ID3D11DeviceContext, @ptrCast(self)), pp_compute_shader_, pp_class_instances_, p_num_class_instances_);
            }
            pub inline fn csGetSamplers(self: *const T, start_slot_: u32, num_samplers_: u32, pp_samplers_: ?[*]?*ID3D11SamplerState) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CSGetSamplers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_samplers_, pp_samplers_);
            }
            pub inline fn csGetConstantBuffers(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).CSGetConstantBuffers(@as(*const ID3D11DeviceContext, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_);
            }
            pub inline fn clearState(self: *const T) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).ClearState(@as(*const ID3D11DeviceContext, @ptrCast(self)));
            }
            pub inline fn flush(self: *const T) void {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).Flush(@as(*const ID3D11DeviceContext, @ptrCast(self)));
            }
            pub inline fn getType(self: *const T) D3D11_DEVICE_CONTEXT_TYPE {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GetType(@as(*const ID3D11DeviceContext, @ptrCast(self)));
            }
            pub inline fn getContextFlags(self: *const T) u32 {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).GetContextFlags(@as(*const ID3D11DeviceContext, @ptrCast(self)));
            }
            pub inline fn finishCommandList(self: *const T, restore_deferred_context_state_: BOOL, pp_command_list_: ?*?*ID3D11CommandList) HRESULT {
                return @as(*const ID3D11DeviceContext.VTable, @ptrCast(self.vtable)).FinishCommandList(@as(*const ID3D11DeviceContext, @ptrCast(self)), restore_deferred_context_state_, pp_command_list_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CD3D11_VIDEO_DEFAULT = extern struct {
    placeholder: usize, // TODO: why is this type empty?
};

pub const D3D11_VIDEO_DECODER_DESC = extern struct {
    Guid: Guid,
    SampleWidth: u32,
    SampleHeight: u32,
    OutputFormat: DXGI_FORMAT,
};

pub const D3D11_VIDEO_DECODER_CONFIG = extern struct {
    guidConfigBitstreamEncryption: Guid,
    guidConfigMBcontrolEncryption: Guid,
    guidConfigResidDiffEncryption: Guid,
    ConfigBitstreamRaw: u32,
    ConfigMBcontrolRasterOrder: u32,
    ConfigResidDiffHost: u32,
    ConfigSpatialResid8: u32,
    ConfigResid8Subtraction: u32,
    ConfigSpatialHost8or9Clipping: u32,
    ConfigSpatialResidInterleaved: u32,
    ConfigIntraResidUnsigned: u32,
    ConfigResidDiffAccelerator: u32,
    ConfigHostInverseScan: u32,
    ConfigSpecificIDCT: u32,
    Config4GroupedCoefs: u32,
    ConfigMinRenderTargetBuffCount: u16,
    ConfigDecoderSpecific: u16,
};

pub const D3D11_VIDEO_DECODER_BUFFER_TYPE = enum(i32) {
    PICTURE_PARAMETERS = 0,
    MACROBLOCK_CONTROL = 1,
    RESIDUAL_DIFFERENCE = 2,
    DEBLOCKING_CONTROL = 3,
    INVERSE_QUANTIZATION_MATRIX = 4,
    SLICE_CONTROL = 5,
    BITSTREAM = 6,
    MOTION_VECTOR = 7,
    FILM_GRAIN = 8,
};
pub const D3D11_VIDEO_DECODER_BUFFER_PICTURE_PARAMETERS = D3D11_VIDEO_DECODER_BUFFER_TYPE.PICTURE_PARAMETERS;
pub const D3D11_VIDEO_DECODER_BUFFER_MACROBLOCK_CONTROL = D3D11_VIDEO_DECODER_BUFFER_TYPE.MACROBLOCK_CONTROL;
pub const D3D11_VIDEO_DECODER_BUFFER_RESIDUAL_DIFFERENCE = D3D11_VIDEO_DECODER_BUFFER_TYPE.RESIDUAL_DIFFERENCE;
pub const D3D11_VIDEO_DECODER_BUFFER_DEBLOCKING_CONTROL = D3D11_VIDEO_DECODER_BUFFER_TYPE.DEBLOCKING_CONTROL;
pub const D3D11_VIDEO_DECODER_BUFFER_INVERSE_QUANTIZATION_MATRIX = D3D11_VIDEO_DECODER_BUFFER_TYPE.INVERSE_QUANTIZATION_MATRIX;
pub const D3D11_VIDEO_DECODER_BUFFER_SLICE_CONTROL = D3D11_VIDEO_DECODER_BUFFER_TYPE.SLICE_CONTROL;
pub const D3D11_VIDEO_DECODER_BUFFER_BITSTREAM = D3D11_VIDEO_DECODER_BUFFER_TYPE.BITSTREAM;
pub const D3D11_VIDEO_DECODER_BUFFER_MOTION_VECTOR = D3D11_VIDEO_DECODER_BUFFER_TYPE.MOTION_VECTOR;
pub const D3D11_VIDEO_DECODER_BUFFER_FILM_GRAIN = D3D11_VIDEO_DECODER_BUFFER_TYPE.FILM_GRAIN;

pub const D3D11_AES_CTR_IV = extern struct {
    IV: u64,
    Count: u64,
};

pub const D3D11_ENCRYPTED_BLOCK_INFO = extern struct {
    NumEncryptedBytesAtBeginning: u32,
    NumBytesInSkipPattern: u32,
    NumBytesInEncryptPattern: u32,
};

pub const D3D11_VIDEO_DECODER_BUFFER_DESC = extern struct {
    BufferType: D3D11_VIDEO_DECODER_BUFFER_TYPE,
    BufferIndex: u32,
    DataOffset: u32,
    DataSize: u32,
    FirstMBaddress: u32,
    NumMBsInBuffer: u32,
    Width: u32,
    Height: u32,
    Stride: u32,
    ReservedBits: u32,
    pIV: ?*anyopaque,
    IVSize: u32,
    PartialEncryption: BOOL,
    EncryptedBlockInfo: D3D11_ENCRYPTED_BLOCK_INFO,
};

pub const D3D11_VIDEO_DECODER_EXTENSION = extern struct {
    Function: u32,
    pPrivateInputData: ?*anyopaque,
    PrivateInputDataSize: u32,
    pPrivateOutputData: ?*anyopaque,
    PrivateOutputDataSize: u32,
    ResourceCount: u32,
    ppResourceList: ?*?*ID3D11Resource,
};

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3D11VideoDecoder_Value = Guid.initString("3c9c5b51-995d-48d1-9b8d-fa5caeded65c");
pub const IID_ID3D11VideoDecoder = &IID_ID3D11VideoDecoder_Value;
pub const ID3D11VideoDecoder = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetCreationParameters: *const fn (
            self: *const ID3D11VideoDecoder,
            p_video_desc: ?*D3D11_VIDEO_DECODER_DESC,
            p_config: ?*D3D11_VIDEO_DECODER_CONFIG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDriverHandle: *const fn (
            self: *const ID3D11VideoDecoder,
            p_driver_handle: ?*?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
            pub inline fn getCreationParameters(self: *const T, p_video_desc_: ?*D3D11_VIDEO_DECODER_DESC, p_config_: ?*D3D11_VIDEO_DECODER_CONFIG) HRESULT {
                return @as(*const ID3D11VideoDecoder.VTable, @ptrCast(self.vtable)).GetCreationParameters(@as(*const ID3D11VideoDecoder, @ptrCast(self)), p_video_desc_, p_config_);
            }
            pub inline fn getDriverHandle(self: *const T, p_driver_handle_: ?*?HANDLE) HRESULT {
                return @as(*const ID3D11VideoDecoder.VTable, @ptrCast(self.vtable)).GetDriverHandle(@as(*const ID3D11VideoDecoder, @ptrCast(self)), p_driver_handle_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT = enum(i32) {
    INPUT = 1,
    OUTPUT = 2,
};
pub const D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_INPUT = D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT.INPUT;
pub const D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT_OUTPUT = D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT.OUTPUT;

pub const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS = enum(i32) {
    LINEAR_SPACE = 1,
    xvYCC = 2,
    RGB_RANGE_CONVERSION = 4,
    YCbCr_MATRIX_CONVERSION = 8,
    NOMINAL_RANGE = 16,
};
pub const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_LINEAR_SPACE = D3D11_VIDEO_PROCESSOR_DEVICE_CAPS.LINEAR_SPACE;
pub const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_xvYCC = D3D11_VIDEO_PROCESSOR_DEVICE_CAPS.xvYCC;
pub const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_RGB_RANGE_CONVERSION = D3D11_VIDEO_PROCESSOR_DEVICE_CAPS.RGB_RANGE_CONVERSION;
pub const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_YCbCr_MATRIX_CONVERSION = D3D11_VIDEO_PROCESSOR_DEVICE_CAPS.YCbCr_MATRIX_CONVERSION;
pub const D3D11_VIDEO_PROCESSOR_DEVICE_CAPS_NOMINAL_RANGE = D3D11_VIDEO_PROCESSOR_DEVICE_CAPS.NOMINAL_RANGE;

pub const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS = enum(i32) {
    ALPHA_FILL = 1,
    CONSTRICTION = 2,
    LUMA_KEY = 4,
    ALPHA_PALETTE = 8,
    LEGACY = 16,
    STEREO = 32,
    ROTATION = 64,
    ALPHA_STREAM = 128,
    PIXEL_ASPECT_RATIO = 256,
    MIRROR = 512,
    SHADER_USAGE = 1024,
    METADATA_HDR10 = 2048,
};
pub const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_FILL = D3D11_VIDEO_PROCESSOR_FEATURE_CAPS.ALPHA_FILL;
pub const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_CONSTRICTION = D3D11_VIDEO_PROCESSOR_FEATURE_CAPS.CONSTRICTION;
pub const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LUMA_KEY = D3D11_VIDEO_PROCESSOR_FEATURE_CAPS.LUMA_KEY;
pub const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_PALETTE = D3D11_VIDEO_PROCESSOR_FEATURE_CAPS.ALPHA_PALETTE;
pub const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_LEGACY = D3D11_VIDEO_PROCESSOR_FEATURE_CAPS.LEGACY;
pub const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_STEREO = D3D11_VIDEO_PROCESSOR_FEATURE_CAPS.STEREO;
pub const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ROTATION = D3D11_VIDEO_PROCESSOR_FEATURE_CAPS.ROTATION;
pub const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_ALPHA_STREAM = D3D11_VIDEO_PROCESSOR_FEATURE_CAPS.ALPHA_STREAM;
pub const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_PIXEL_ASPECT_RATIO = D3D11_VIDEO_PROCESSOR_FEATURE_CAPS.PIXEL_ASPECT_RATIO;
pub const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_MIRROR = D3D11_VIDEO_PROCESSOR_FEATURE_CAPS.MIRROR;
pub const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_SHADER_USAGE = D3D11_VIDEO_PROCESSOR_FEATURE_CAPS.SHADER_USAGE;
pub const D3D11_VIDEO_PROCESSOR_FEATURE_CAPS_METADATA_HDR10 = D3D11_VIDEO_PROCESSOR_FEATURE_CAPS.METADATA_HDR10;

pub const D3D11_VIDEO_PROCESSOR_FILTER_CAPS = enum(i32) {
    BRIGHTNESS = 1,
    CONTRAST = 2,
    HUE = 4,
    SATURATION = 8,
    NOISE_REDUCTION = 16,
    EDGE_ENHANCEMENT = 32,
    ANAMORPHIC_SCALING = 64,
    STEREO_ADJUSTMENT = 128,
};
pub const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_BRIGHTNESS = D3D11_VIDEO_PROCESSOR_FILTER_CAPS.BRIGHTNESS;
pub const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_CONTRAST = D3D11_VIDEO_PROCESSOR_FILTER_CAPS.CONTRAST;
pub const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_HUE = D3D11_VIDEO_PROCESSOR_FILTER_CAPS.HUE;
pub const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_SATURATION = D3D11_VIDEO_PROCESSOR_FILTER_CAPS.SATURATION;
pub const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_NOISE_REDUCTION = D3D11_VIDEO_PROCESSOR_FILTER_CAPS.NOISE_REDUCTION;
pub const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_EDGE_ENHANCEMENT = D3D11_VIDEO_PROCESSOR_FILTER_CAPS.EDGE_ENHANCEMENT;
pub const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_ANAMORPHIC_SCALING = D3D11_VIDEO_PROCESSOR_FILTER_CAPS.ANAMORPHIC_SCALING;
pub const D3D11_VIDEO_PROCESSOR_FILTER_CAPS_STEREO_ADJUSTMENT = D3D11_VIDEO_PROCESSOR_FILTER_CAPS.STEREO_ADJUSTMENT;

pub const D3D11_VIDEO_PROCESSOR_FORMAT_CAPS = enum(i32) {
    RGB_INTERLACED = 1,
    RGB_PROCAMP = 2,
    RGB_LUMA_KEY = 4,
    PALETTE_INTERLACED = 8,
};
pub const D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_INTERLACED = D3D11_VIDEO_PROCESSOR_FORMAT_CAPS.RGB_INTERLACED;
pub const D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_PROCAMP = D3D11_VIDEO_PROCESSOR_FORMAT_CAPS.RGB_PROCAMP;
pub const D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_RGB_LUMA_KEY = D3D11_VIDEO_PROCESSOR_FORMAT_CAPS.RGB_LUMA_KEY;
pub const D3D11_VIDEO_PROCESSOR_FORMAT_CAPS_PALETTE_INTERLACED = D3D11_VIDEO_PROCESSOR_FORMAT_CAPS.PALETTE_INTERLACED;

pub const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS = enum(i32) {
    DENOISE = 1,
    DERINGING = 2,
    EDGE_ENHANCEMENT = 4,
    COLOR_CORRECTION = 8,
    FLESH_TONE_MAPPING = 16,
    IMAGE_STABILIZATION = 32,
    SUPER_RESOLUTION = 64,
    ANAMORPHIC_SCALING = 128,
};
pub const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DENOISE = D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS.DENOISE;
pub const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_DERINGING = D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS.DERINGING;
pub const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_EDGE_ENHANCEMENT = D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS.EDGE_ENHANCEMENT;
pub const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_COLOR_CORRECTION = D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS.COLOR_CORRECTION;
pub const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_FLESH_TONE_MAPPING = D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS.FLESH_TONE_MAPPING;
pub const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_IMAGE_STABILIZATION = D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS.IMAGE_STABILIZATION;
pub const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_SUPER_RESOLUTION = D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS.SUPER_RESOLUTION;
pub const D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS_ANAMORPHIC_SCALING = D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS.ANAMORPHIC_SCALING;

pub const D3D11_VIDEO_PROCESSOR_STEREO_CAPS = enum(i32) {
    MONO_OFFSET = 1,
    ROW_INTERLEAVED = 2,
    COLUMN_INTERLEAVED = 4,
    CHECKERBOARD = 8,
    FLIP_MODE = 16,
};
pub const D3D11_VIDEO_PROCESSOR_STEREO_CAPS_MONO_OFFSET = D3D11_VIDEO_PROCESSOR_STEREO_CAPS.MONO_OFFSET;
pub const D3D11_VIDEO_PROCESSOR_STEREO_CAPS_ROW_INTERLEAVED = D3D11_VIDEO_PROCESSOR_STEREO_CAPS.ROW_INTERLEAVED;
pub const D3D11_VIDEO_PROCESSOR_STEREO_CAPS_COLUMN_INTERLEAVED = D3D11_VIDEO_PROCESSOR_STEREO_CAPS.COLUMN_INTERLEAVED;
pub const D3D11_VIDEO_PROCESSOR_STEREO_CAPS_CHECKERBOARD = D3D11_VIDEO_PROCESSOR_STEREO_CAPS.CHECKERBOARD;
pub const D3D11_VIDEO_PROCESSOR_STEREO_CAPS_FLIP_MODE = D3D11_VIDEO_PROCESSOR_STEREO_CAPS.FLIP_MODE;

pub const D3D11_VIDEO_PROCESSOR_CAPS = extern struct {
    DeviceCaps: u32,
    FeatureCaps: u32,
    FilterCaps: u32,
    InputFormatCaps: u32,
    AutoStreamCaps: u32,
    StereoCaps: u32,
    RateConversionCapsCount: u32,
    MaxInputStreams: u32,
    MaxStreamStates: u32,
};

pub const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS = enum(i32) {
    DEINTERLACE_BLEND = 1,
    DEINTERLACE_BOB = 2,
    DEINTERLACE_ADAPTIVE = 4,
    DEINTERLACE_MOTION_COMPENSATION = 8,
    INVERSE_TELECINE = 16,
    FRAME_RATE_CONVERSION = 32,
};
pub const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BLEND = D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS.DEINTERLACE_BLEND;
pub const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_BOB = D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS.DEINTERLACE_BOB;
pub const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_ADAPTIVE = D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS.DEINTERLACE_ADAPTIVE;
pub const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_DEINTERLACE_MOTION_COMPENSATION = D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS.DEINTERLACE_MOTION_COMPENSATION;
pub const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_INVERSE_TELECINE = D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS.INVERSE_TELECINE;
pub const D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS_FRAME_RATE_CONVERSION = D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS.FRAME_RATE_CONVERSION;

pub const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS = enum(i32) {
    @"32" = 1,
    @"22" = 2,
    @"2224" = 4,
    @"2332" = 8,
    @"32322" = 16,
    @"55" = 32,
    @"64" = 64,
    @"87" = 128,
    @"222222222223" = 256,
    OTHER = -2147483648,
};
pub const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32 = D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS.@"32";
pub const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_22 = D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS.@"22";
pub const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2224 = D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS.@"2224";
pub const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_2332 = D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS.@"2332";
pub const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_32322 = D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS.@"32322";
pub const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_55 = D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS.@"55";
pub const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_64 = D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS.@"64";
pub const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_87 = D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS.@"87";
pub const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_222222222223 = D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS.@"222222222223";
pub const D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS_OTHER = D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS.OTHER;

pub const D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS = extern struct {
    PastFrames: u32,
    FutureFrames: u32,
    ProcessorCaps: u32,
    ITelecineCaps: u32,
    CustomRateCount: u32,
};

pub const D3D11_CONTENT_PROTECTION_CAPS = enum(i32) {
    SOFTWARE = 1,
    HARDWARE = 2,
    PROTECTION_ALWAYS_ON = 4,
    PARTIAL_DECRYPTION = 8,
    CONTENT_KEY = 16,
    FRESHEN_SESSION_KEY = 32,
    ENCRYPTED_READ_BACK = 64,
    ENCRYPTED_READ_BACK_KEY = 128,
    SEQUENTIAL_CTR_IV = 256,
    ENCRYPT_SLICEDATA_ONLY = 512,
    DECRYPTION_BLT = 1024,
    HARDWARE_PROTECT_UNCOMPRESSED = 2048,
    HARDWARE_PROTECTED_MEMORY_PAGEABLE = 4096,
    HARDWARE_TEARDOWN = 8192,
    HARDWARE_DRM_COMMUNICATION = 16384,
    HARDWARE_DRM_COMMUNICATION_MULTI_THREADED = 32768,
};
pub const D3D11_CONTENT_PROTECTION_CAPS_SOFTWARE = D3D11_CONTENT_PROTECTION_CAPS.SOFTWARE;
pub const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE = D3D11_CONTENT_PROTECTION_CAPS.HARDWARE;
pub const D3D11_CONTENT_PROTECTION_CAPS_PROTECTION_ALWAYS_ON = D3D11_CONTENT_PROTECTION_CAPS.PROTECTION_ALWAYS_ON;
pub const D3D11_CONTENT_PROTECTION_CAPS_PARTIAL_DECRYPTION = D3D11_CONTENT_PROTECTION_CAPS.PARTIAL_DECRYPTION;
pub const D3D11_CONTENT_PROTECTION_CAPS_CONTENT_KEY = D3D11_CONTENT_PROTECTION_CAPS.CONTENT_KEY;
pub const D3D11_CONTENT_PROTECTION_CAPS_FRESHEN_SESSION_KEY = D3D11_CONTENT_PROTECTION_CAPS.FRESHEN_SESSION_KEY;
pub const D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK = D3D11_CONTENT_PROTECTION_CAPS.ENCRYPTED_READ_BACK;
pub const D3D11_CONTENT_PROTECTION_CAPS_ENCRYPTED_READ_BACK_KEY = D3D11_CONTENT_PROTECTION_CAPS.ENCRYPTED_READ_BACK_KEY;
pub const D3D11_CONTENT_PROTECTION_CAPS_SEQUENTIAL_CTR_IV = D3D11_CONTENT_PROTECTION_CAPS.SEQUENTIAL_CTR_IV;
pub const D3D11_CONTENT_PROTECTION_CAPS_ENCRYPT_SLICEDATA_ONLY = D3D11_CONTENT_PROTECTION_CAPS.ENCRYPT_SLICEDATA_ONLY;
pub const D3D11_CONTENT_PROTECTION_CAPS_DECRYPTION_BLT = D3D11_CONTENT_PROTECTION_CAPS.DECRYPTION_BLT;
pub const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECT_UNCOMPRESSED = D3D11_CONTENT_PROTECTION_CAPS.HARDWARE_PROTECT_UNCOMPRESSED;
pub const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_PROTECTED_MEMORY_PAGEABLE = D3D11_CONTENT_PROTECTION_CAPS.HARDWARE_PROTECTED_MEMORY_PAGEABLE;
pub const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_TEARDOWN = D3D11_CONTENT_PROTECTION_CAPS.HARDWARE_TEARDOWN;
pub const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION = D3D11_CONTENT_PROTECTION_CAPS.HARDWARE_DRM_COMMUNICATION;
pub const D3D11_CONTENT_PROTECTION_CAPS_HARDWARE_DRM_COMMUNICATION_MULTI_THREADED = D3D11_CONTENT_PROTECTION_CAPS.HARDWARE_DRM_COMMUNICATION_MULTI_THREADED;

pub const D3D11_VIDEO_CONTENT_PROTECTION_CAPS = extern struct {
    Caps: u32,
    KeyExchangeTypeCount: u32,
    BlockAlignmentSize: u32,
    ProtectedMemorySize: u64,
};

pub const D3D11_VIDEO_PROCESSOR_CUSTOM_RATE = extern struct {
    CustomRate: DXGI_RATIONAL,
    OutputFrames: u32,
    InputInterlaced: BOOL,
    InputFramesOrFields: u32,
};

pub const D3D11_VIDEO_PROCESSOR_FILTER = enum(i32) {
    BRIGHTNESS = 0,
    CONTRAST = 1,
    HUE = 2,
    SATURATION = 3,
    NOISE_REDUCTION = 4,
    EDGE_ENHANCEMENT = 5,
    ANAMORPHIC_SCALING = 6,
    STEREO_ADJUSTMENT = 7,
};
pub const D3D11_VIDEO_PROCESSOR_FILTER_BRIGHTNESS = D3D11_VIDEO_PROCESSOR_FILTER.BRIGHTNESS;
pub const D3D11_VIDEO_PROCESSOR_FILTER_CONTRAST = D3D11_VIDEO_PROCESSOR_FILTER.CONTRAST;
pub const D3D11_VIDEO_PROCESSOR_FILTER_HUE = D3D11_VIDEO_PROCESSOR_FILTER.HUE;
pub const D3D11_VIDEO_PROCESSOR_FILTER_SATURATION = D3D11_VIDEO_PROCESSOR_FILTER.SATURATION;
pub const D3D11_VIDEO_PROCESSOR_FILTER_NOISE_REDUCTION = D3D11_VIDEO_PROCESSOR_FILTER.NOISE_REDUCTION;
pub const D3D11_VIDEO_PROCESSOR_FILTER_EDGE_ENHANCEMENT = D3D11_VIDEO_PROCESSOR_FILTER.EDGE_ENHANCEMENT;
pub const D3D11_VIDEO_PROCESSOR_FILTER_ANAMORPHIC_SCALING = D3D11_VIDEO_PROCESSOR_FILTER.ANAMORPHIC_SCALING;
pub const D3D11_VIDEO_PROCESSOR_FILTER_STEREO_ADJUSTMENT = D3D11_VIDEO_PROCESSOR_FILTER.STEREO_ADJUSTMENT;

pub const D3D11_VIDEO_PROCESSOR_FILTER_RANGE = extern struct {
    Minimum: i32,
    Maximum: i32,
    Default: i32,
    Multiplier: f32,
};

pub const D3D11_VIDEO_FRAME_FORMAT = enum(i32) {
    PROGRESSIVE = 0,
    INTERLACED_TOP_FIELD_FIRST = 1,
    INTERLACED_BOTTOM_FIELD_FIRST = 2,
};
pub const D3D11_VIDEO_FRAME_FORMAT_PROGRESSIVE = D3D11_VIDEO_FRAME_FORMAT.PROGRESSIVE;
pub const D3D11_VIDEO_FRAME_FORMAT_INTERLACED_TOP_FIELD_FIRST = D3D11_VIDEO_FRAME_FORMAT.INTERLACED_TOP_FIELD_FIRST;
pub const D3D11_VIDEO_FRAME_FORMAT_INTERLACED_BOTTOM_FIELD_FIRST = D3D11_VIDEO_FRAME_FORMAT.INTERLACED_BOTTOM_FIELD_FIRST;

pub const D3D11_VIDEO_USAGE = enum(i32) {
    PLAYBACK_NORMAL = 0,
    OPTIMAL_SPEED = 1,
    OPTIMAL_QUALITY = 2,
};
pub const D3D11_VIDEO_USAGE_PLAYBACK_NORMAL = D3D11_VIDEO_USAGE.PLAYBACK_NORMAL;
pub const D3D11_VIDEO_USAGE_OPTIMAL_SPEED = D3D11_VIDEO_USAGE.OPTIMAL_SPEED;
pub const D3D11_VIDEO_USAGE_OPTIMAL_QUALITY = D3D11_VIDEO_USAGE.OPTIMAL_QUALITY;

pub const D3D11_VIDEO_PROCESSOR_CONTENT_DESC = extern struct {
    InputFrameFormat: D3D11_VIDEO_FRAME_FORMAT,
    InputFrameRate: DXGI_RATIONAL,
    InputWidth: u32,
    InputHeight: u32,
    OutputFrameRate: DXGI_RATIONAL,
    OutputWidth: u32,
    OutputHeight: u32,
    Usage: D3D11_VIDEO_USAGE,
};

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3D11VideoProcessorEnumerator_Value = Guid.initString("31627037-53ab-4200-9061-05faa9ab45f9");
pub const IID_ID3D11VideoProcessorEnumerator = &IID_ID3D11VideoProcessorEnumerator_Value;
pub const ID3D11VideoProcessorEnumerator = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetVideoProcessorContentDesc: *const fn (
            self: *const ID3D11VideoProcessorEnumerator,
            p_content_desc: ?*D3D11_VIDEO_PROCESSOR_CONTENT_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckVideoProcessorFormat: *const fn (
            self: *const ID3D11VideoProcessorEnumerator,
            format: DXGI_FORMAT,
            p_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVideoProcessorCaps: *const fn (
            self: *const ID3D11VideoProcessorEnumerator,
            p_caps: ?*D3D11_VIDEO_PROCESSOR_CAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVideoProcessorRateConversionCaps: *const fn (
            self: *const ID3D11VideoProcessorEnumerator,
            type_index: u32,
            p_caps: ?*D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVideoProcessorCustomRate: *const fn (
            self: *const ID3D11VideoProcessorEnumerator,
            type_index: u32,
            custom_rate_index: u32,
            p_rate: ?*D3D11_VIDEO_PROCESSOR_CUSTOM_RATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVideoProcessorFilterRange: *const fn (
            self: *const ID3D11VideoProcessorEnumerator,
            filter: D3D11_VIDEO_PROCESSOR_FILTER,
            p_range: ?*D3D11_VIDEO_PROCESSOR_FILTER_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
            pub inline fn getVideoProcessorContentDesc(self: *const T, p_content_desc_: ?*D3D11_VIDEO_PROCESSOR_CONTENT_DESC) HRESULT {
                return @as(*const ID3D11VideoProcessorEnumerator.VTable, @ptrCast(self.vtable)).GetVideoProcessorContentDesc(@as(*const ID3D11VideoProcessorEnumerator, @ptrCast(self)), p_content_desc_);
            }
            pub inline fn checkVideoProcessorFormat(self: *const T, format_: DXGI_FORMAT, p_flags_: ?*u32) HRESULT {
                return @as(*const ID3D11VideoProcessorEnumerator.VTable, @ptrCast(self.vtable)).CheckVideoProcessorFormat(@as(*const ID3D11VideoProcessorEnumerator, @ptrCast(self)), format_, p_flags_);
            }
            pub inline fn getVideoProcessorCaps(self: *const T, p_caps_: ?*D3D11_VIDEO_PROCESSOR_CAPS) HRESULT {
                return @as(*const ID3D11VideoProcessorEnumerator.VTable, @ptrCast(self.vtable)).GetVideoProcessorCaps(@as(*const ID3D11VideoProcessorEnumerator, @ptrCast(self)), p_caps_);
            }
            pub inline fn getVideoProcessorRateConversionCaps(self: *const T, type_index_: u32, p_caps_: ?*D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS) HRESULT {
                return @as(*const ID3D11VideoProcessorEnumerator.VTable, @ptrCast(self.vtable)).GetVideoProcessorRateConversionCaps(@as(*const ID3D11VideoProcessorEnumerator, @ptrCast(self)), type_index_, p_caps_);
            }
            pub inline fn getVideoProcessorCustomRate(self: *const T, type_index_: u32, custom_rate_index_: u32, p_rate_: ?*D3D11_VIDEO_PROCESSOR_CUSTOM_RATE) HRESULT {
                return @as(*const ID3D11VideoProcessorEnumerator.VTable, @ptrCast(self.vtable)).GetVideoProcessorCustomRate(@as(*const ID3D11VideoProcessorEnumerator, @ptrCast(self)), type_index_, custom_rate_index_, p_rate_);
            }
            pub inline fn getVideoProcessorFilterRange(self: *const T, filter_: D3D11_VIDEO_PROCESSOR_FILTER, p_range_: ?*D3D11_VIDEO_PROCESSOR_FILTER_RANGE) HRESULT {
                return @as(*const ID3D11VideoProcessorEnumerator.VTable, @ptrCast(self.vtable)).GetVideoProcessorFilterRange(@as(*const ID3D11VideoProcessorEnumerator, @ptrCast(self)), filter_, p_range_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_VIDEO_COLOR_RGBA = extern struct {
    R: f32,
    G: f32,
    B: f32,
    A: f32,
};

pub const D3D11_VIDEO_COLOR_YCbCrA = extern struct {
    Y: f32,
    Cb: f32,
    Cr: f32,
    A: f32,
};

pub const D3D11_VIDEO_COLOR = extern struct {
    Anonymous: extern union {
        YCbCr: D3D11_VIDEO_COLOR_YCbCrA,
        RGBA: D3D11_VIDEO_COLOR_RGBA,
    },
};

pub const D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE = enum(i32) {
    UNDEFINED = 0,
    @"16_235" = 1,
    @"0_255" = 2,
};
pub const D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_UNDEFINED = D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE.UNDEFINED;
pub const D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_16_235 = D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE.@"16_235";
pub const D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE_0_255 = D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE.@"0_255";

pub const D3D11_VIDEO_PROCESSOR_COLOR_SPACE = extern struct {
    _bitfield: u32,
};

pub const D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE = enum(i32) {
    OPAQUE = 0,
    BACKGROUND = 1,
    DESTINATION = 2,
    SOURCE_STREAM = 3,
};
pub const D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_OPAQUE = D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE.OPAQUE;
pub const D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_BACKGROUND = D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE.BACKGROUND;
pub const D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_DESTINATION = D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE.DESTINATION;
pub const D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE_SOURCE_STREAM = D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE.SOURCE_STREAM;

pub const D3D11_VIDEO_PROCESSOR_OUTPUT_RATE = enum(i32) {
    NORMAL = 0,
    HALF = 1,
    CUSTOM = 2,
};
pub const D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_NORMAL = D3D11_VIDEO_PROCESSOR_OUTPUT_RATE.NORMAL;
pub const D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_HALF = D3D11_VIDEO_PROCESSOR_OUTPUT_RATE.HALF;
pub const D3D11_VIDEO_PROCESSOR_OUTPUT_RATE_CUSTOM = D3D11_VIDEO_PROCESSOR_OUTPUT_RATE.CUSTOM;

pub const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT = enum(i32) {
    MONO = 0,
    HORIZONTAL = 1,
    VERTICAL = 2,
    SEPARATE = 3,
    MONO_OFFSET = 4,
    ROW_INTERLEAVED = 5,
    COLUMN_INTERLEAVED = 6,
    CHECKERBOARD = 7,
};
pub const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO = D3D11_VIDEO_PROCESSOR_STEREO_FORMAT.MONO;
pub const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_HORIZONTAL = D3D11_VIDEO_PROCESSOR_STEREO_FORMAT.HORIZONTAL;
pub const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_VERTICAL = D3D11_VIDEO_PROCESSOR_STEREO_FORMAT.VERTICAL;
pub const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_SEPARATE = D3D11_VIDEO_PROCESSOR_STEREO_FORMAT.SEPARATE;
pub const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_MONO_OFFSET = D3D11_VIDEO_PROCESSOR_STEREO_FORMAT.MONO_OFFSET;
pub const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_ROW_INTERLEAVED = D3D11_VIDEO_PROCESSOR_STEREO_FORMAT.ROW_INTERLEAVED;
pub const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_COLUMN_INTERLEAVED = D3D11_VIDEO_PROCESSOR_STEREO_FORMAT.COLUMN_INTERLEAVED;
pub const D3D11_VIDEO_PROCESSOR_STEREO_FORMAT_CHECKERBOARD = D3D11_VIDEO_PROCESSOR_STEREO_FORMAT.CHECKERBOARD;

pub const D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE = enum(i32) {
    NONE = 0,
    FRAME0 = 1,
    FRAME1 = 2,
};
pub const D3D11_VIDEO_PROCESSOR_STEREO_FLIP_NONE = D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE.NONE;
pub const D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME0 = D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE.FRAME0;
pub const D3D11_VIDEO_PROCESSOR_STEREO_FLIP_FRAME1 = D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE.FRAME1;

pub const D3D11_VIDEO_PROCESSOR_ROTATION = enum(i32) {
    IDENTITY = 0,
    @"90" = 1,
    @"180" = 2,
    @"270" = 3,
};
pub const D3D11_VIDEO_PROCESSOR_ROTATION_IDENTITY = D3D11_VIDEO_PROCESSOR_ROTATION.IDENTITY;
pub const D3D11_VIDEO_PROCESSOR_ROTATION_90 = D3D11_VIDEO_PROCESSOR_ROTATION.@"90";
pub const D3D11_VIDEO_PROCESSOR_ROTATION_180 = D3D11_VIDEO_PROCESSOR_ROTATION.@"180";
pub const D3D11_VIDEO_PROCESSOR_ROTATION_270 = D3D11_VIDEO_PROCESSOR_ROTATION.@"270";

pub const D3D11_VIDEO_PROCESSOR_STREAM = extern struct {
    Enable: BOOL,
    OutputIndex: u32,
    InputFrameOrField: u32,
    PastFrames: u32,
    FutureFrames: u32,
    ppPastSurfaces: ?*?*ID3D11VideoProcessorInputView,
    pInputSurface: ?*ID3D11VideoProcessorInputView,
    ppFutureSurfaces: ?*?*ID3D11VideoProcessorInputView,
    ppPastSurfacesRight: ?*?*ID3D11VideoProcessorInputView,
    pInputSurfaceRight: ?*ID3D11VideoProcessorInputView,
    ppFutureSurfacesRight: ?*?*ID3D11VideoProcessorInputView,
};

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3D11VideoProcessor_Value = Guid.initString("1d7b0652-185f-41c6-85ce-0c5be3d4ae6c");
pub const IID_ID3D11VideoProcessor = &IID_ID3D11VideoProcessor_Value;
pub const ID3D11VideoProcessor = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetContentDesc: *const fn (
            self: *const ID3D11VideoProcessor,
            p_desc: ?*D3D11_VIDEO_PROCESSOR_CONTENT_DESC,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetRateConversionCaps: *const fn (
            self: *const ID3D11VideoProcessor,
            p_caps: ?*D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
            pub inline fn getContentDesc(self: *const T, p_desc_: ?*D3D11_VIDEO_PROCESSOR_CONTENT_DESC) void {
                return @as(*const ID3D11VideoProcessor.VTable, @ptrCast(self.vtable)).GetContentDesc(@as(*const ID3D11VideoProcessor, @ptrCast(self)), p_desc_);
            }
            pub inline fn getRateConversionCaps(self: *const T, p_caps_: ?*D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS) void {
                return @as(*const ID3D11VideoProcessor.VTable, @ptrCast(self.vtable)).GetRateConversionCaps(@as(*const ID3D11VideoProcessor, @ptrCast(self)), p_caps_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_OMAC = extern struct {
    Omac: [16]u8,
};

pub const D3D11_AUTHENTICATED_CHANNEL_TYPE = enum(i32) {
    @"3D11" = 1,
    RIVER_SOFTWARE = 2,
    RIVER_HARDWARE = 3,
};
pub const D3D11_AUTHENTICATED_CHANNEL_D3D11 = D3D11_AUTHENTICATED_CHANNEL_TYPE.@"3D11";
pub const D3D11_AUTHENTICATED_CHANNEL_DRIVER_SOFTWARE = D3D11_AUTHENTICATED_CHANNEL_TYPE.RIVER_SOFTWARE;
pub const D3D11_AUTHENTICATED_CHANNEL_DRIVER_HARDWARE = D3D11_AUTHENTICATED_CHANNEL_TYPE.RIVER_HARDWARE;

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3D11AuthenticatedChannel_Value = Guid.initString("3015a308-dcbd-47aa-a747-192486d14d4a");
pub const IID_ID3D11AuthenticatedChannel = &IID_ID3D11AuthenticatedChannel_Value;
pub const ID3D11AuthenticatedChannel = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetCertificateSize: *const fn (
            self: *const ID3D11AuthenticatedChannel,
            p_certificate_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificate: *const fn (
            self: *const ID3D11AuthenticatedChannel,
            certificate_size: u32,
            // TODO: what to do with BytesParamIndex 0?
            p_certificate: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChannelHandle: *const fn (
            self: *const ID3D11AuthenticatedChannel,
            p_channel_handle: ?*?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
            pub inline fn getCertificateSize(self: *const T, p_certificate_size_: ?*u32) HRESULT {
                return @as(*const ID3D11AuthenticatedChannel.VTable, @ptrCast(self.vtable)).GetCertificateSize(@as(*const ID3D11AuthenticatedChannel, @ptrCast(self)), p_certificate_size_);
            }
            pub inline fn getCertificate(self: *const T, certificate_size_: u32, p_certificate_: ?*u8) HRESULT {
                return @as(*const ID3D11AuthenticatedChannel.VTable, @ptrCast(self.vtable)).GetCertificate(@as(*const ID3D11AuthenticatedChannel, @ptrCast(self)), certificate_size_, p_certificate_);
            }
            pub inline fn getChannelHandle(self: *const T, p_channel_handle_: ?*?HANDLE) void {
                return @as(*const ID3D11AuthenticatedChannel.VTable, @ptrCast(self.vtable)).GetChannelHandle(@as(*const ID3D11AuthenticatedChannel, @ptrCast(self)), p_channel_handle_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_AUTHENTICATED_QUERY_INPUT = extern struct {
    QueryType: Guid,
    hChannel: ?HANDLE,
    SequenceNumber: u32,
};

pub const D3D11_AUTHENTICATED_QUERY_OUTPUT = extern struct {
    omac: D3D11_OMAC,
    QueryType: Guid,
    hChannel: ?HANDLE,
    SequenceNumber: u32,
    ReturnCode: HRESULT,
};

pub const D3D11_AUTHENTICATED_PROTECTION_FLAGS = extern union {
    Flags: extern struct {
        _bitfield: u32,
    },
    Value: u32,
};

pub const D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    ProtectionFlags: D3D11_AUTHENTICATED_PROTECTION_FLAGS,
};

pub const D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    ChannelType: D3D11_AUTHENTICATED_CHANNEL_TYPE,
};

pub const D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    DeviceHandle: ?HANDLE,
};

pub const D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT = extern struct {
    Input: D3D11_AUTHENTICATED_QUERY_INPUT,
    DecoderHandle: ?HANDLE,
};

pub const D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    DecoderHandle: ?HANDLE,
    CryptoSessionHandle: ?HANDLE,
    DeviceHandle: ?HANDLE,
};

pub const D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    RestrictedSharedResourceProcessCount: u32,
};

pub const D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT = extern struct {
    Input: D3D11_AUTHENTICATED_QUERY_INPUT,
    ProcessIndex: u32,
};

pub const D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE = enum(i32) {
    UNKNOWN = 0,
    DWM = 1,
    HANDLE = 2,
};
pub const D3D11_PROCESSIDTYPE_UNKNOWN = D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE.UNKNOWN;
pub const D3D11_PROCESSIDTYPE_DWM = D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE.DWM;
pub const D3D11_PROCESSIDTYPE_HANDLE = D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE.HANDLE;

pub const D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    ProcessIndex: u32,
    ProcessIdentifier: D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE,
    ProcessHandle: ?HANDLE,
};

pub const D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    UnrestrictedProtectedSharedResourceCount: u32,
};

pub const D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT = extern struct {
    Input: D3D11_AUTHENTICATED_QUERY_INPUT,
    DeviceHandle: ?HANDLE,
    CryptoSessionHandle: ?HANDLE,
};

pub const D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    DeviceHandle: ?HANDLE,
    CryptoSessionHandle: ?HANDLE,
    OutputIDCount: u32,
};

pub const D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT = extern struct {
    Input: D3D11_AUTHENTICATED_QUERY_INPUT,
    DeviceHandle: ?HANDLE,
    CryptoSessionHandle: ?HANDLE,
    OutputIDIndex: u32,
};

pub const D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    DeviceHandle: ?HANDLE,
    CryptoSessionHandle: ?HANDLE,
    OutputIDIndex: u32,
    OutputID: u64,
};

pub const D3D11_BUS_TYPE = enum(i32) {
    TYPE_OTHER = 0,
    TYPE_PCI = 1,
    TYPE_PCIX = 2,
    TYPE_PCIEXPRESS = 3,
    TYPE_AGP = 4,
    IMPL_MODIFIER_INSIDE_OF_CHIPSET = 65536,
    IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 131072,
    IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 196608,
    IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 262144,
    IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 327680,
    IMPL_MODIFIER_NON_STANDARD = -2147483648,
};
pub const D3D11_BUS_TYPE_OTHER = D3D11_BUS_TYPE.TYPE_OTHER;
pub const D3D11_BUS_TYPE_PCI = D3D11_BUS_TYPE.TYPE_PCI;
pub const D3D11_BUS_TYPE_PCIX = D3D11_BUS_TYPE.TYPE_PCIX;
pub const D3D11_BUS_TYPE_PCIEXPRESS = D3D11_BUS_TYPE.TYPE_PCIEXPRESS;
pub const D3D11_BUS_TYPE_AGP = D3D11_BUS_TYPE.TYPE_AGP;
pub const D3D11_BUS_IMPL_MODIFIER_INSIDE_OF_CHIPSET = D3D11_BUS_TYPE.IMPL_MODIFIER_INSIDE_OF_CHIPSET;
pub const D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = D3D11_BUS_TYPE.IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP;
pub const D3D11_BUS_IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = D3D11_BUS_TYPE.IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET;
pub const D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = D3D11_BUS_TYPE.IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR;
pub const D3D11_BUS_IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = D3D11_BUS_TYPE.IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE;
pub const D3D11_BUS_IMPL_MODIFIER_NON_STANDARD = D3D11_BUS_TYPE.IMPL_MODIFIER_NON_STANDARD;

pub const D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    BusType: D3D11_BUS_TYPE,
    AccessibleInContiguousBlocks: BOOL,
    AccessibleInNonContiguousBlocks: BOOL,
};

pub const D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    EncryptionGuidCount: u32,
};

pub const D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT = extern struct {
    Input: D3D11_AUTHENTICATED_QUERY_INPUT,
    EncryptionGuidIndex: u32,
};

pub const D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    EncryptionGuidIndex: u32,
    EncryptionGuid: Guid,
};

pub const D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT = extern struct {
    Output: D3D11_AUTHENTICATED_QUERY_OUTPUT,
    EncryptionGuid: Guid,
};

pub const D3D11_AUTHENTICATED_CONFIGURE_INPUT = extern struct {
    omac: D3D11_OMAC,
    ConfigureType: Guid,
    hChannel: ?HANDLE,
    SequenceNumber: u32,
};

pub const D3D11_AUTHENTICATED_CONFIGURE_OUTPUT = extern struct {
    omac: D3D11_OMAC,
    ConfigureType: Guid,
    hChannel: ?HANDLE,
    SequenceNumber: u32,
    ReturnCode: HRESULT,
};

pub const D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT = extern struct {
    Parameters: D3D11_AUTHENTICATED_CONFIGURE_INPUT,
    StartSequenceQuery: u32,
    StartSequenceConfigure: u32,
};

pub const D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT = extern struct {
    Parameters: D3D11_AUTHENTICATED_CONFIGURE_INPUT,
    Protections: D3D11_AUTHENTICATED_PROTECTION_FLAGS,
};

pub const D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT = extern struct {
    Parameters: D3D11_AUTHENTICATED_CONFIGURE_INPUT,
    DecoderHandle: ?HANDLE,
    CryptoSessionHandle: ?HANDLE,
    DeviceHandle: ?HANDLE,
};

pub const D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT = extern struct {
    Parameters: D3D11_AUTHENTICATED_CONFIGURE_INPUT,
    ProcessType: D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE,
    ProcessHandle: ?HANDLE,
    AllowAccess: BOOL,
};

pub const D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT = extern struct {
    Parameters: D3D11_AUTHENTICATED_CONFIGURE_INPUT,
    EncryptionGuid: Guid,
};

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3D11CryptoSession_Value = Guid.initString("9b32f9ad-bdcc-40a6-a39d-d5c865845720");
pub const IID_ID3D11CryptoSession = &IID_ID3D11CryptoSession_Value;
pub const ID3D11CryptoSession = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetCryptoType: *const fn (
            self: *const ID3D11CryptoSession,
            p_crypto_type: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetDecoderProfile: *const fn (
            self: *const ID3D11CryptoSession,
            p_decoder_profile: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetCertificateSize: *const fn (
            self: *const ID3D11CryptoSession,
            p_certificate_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCertificate: *const fn (
            self: *const ID3D11CryptoSession,
            certificate_size: u32,
            // TODO: what to do with BytesParamIndex 0?
            p_certificate: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCryptoSessionHandle: *const fn (
            self: *const ID3D11CryptoSession,
            p_crypto_session_handle: ?*?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
            pub inline fn getCryptoType(self: *const T, p_crypto_type_: ?*Guid) void {
                return @as(*const ID3D11CryptoSession.VTable, @ptrCast(self.vtable)).GetCryptoType(@as(*const ID3D11CryptoSession, @ptrCast(self)), p_crypto_type_);
            }
            pub inline fn getDecoderProfile(self: *const T, p_decoder_profile_: ?*Guid) void {
                return @as(*const ID3D11CryptoSession.VTable, @ptrCast(self.vtable)).GetDecoderProfile(@as(*const ID3D11CryptoSession, @ptrCast(self)), p_decoder_profile_);
            }
            pub inline fn getCertificateSize(self: *const T, p_certificate_size_: ?*u32) HRESULT {
                return @as(*const ID3D11CryptoSession.VTable, @ptrCast(self.vtable)).GetCertificateSize(@as(*const ID3D11CryptoSession, @ptrCast(self)), p_certificate_size_);
            }
            pub inline fn getCertificate(self: *const T, certificate_size_: u32, p_certificate_: ?*u8) HRESULT {
                return @as(*const ID3D11CryptoSession.VTable, @ptrCast(self.vtable)).GetCertificate(@as(*const ID3D11CryptoSession, @ptrCast(self)), certificate_size_, p_certificate_);
            }
            pub inline fn getCryptoSessionHandle(self: *const T, p_crypto_session_handle_: ?*?HANDLE) void {
                return @as(*const ID3D11CryptoSession.VTable, @ptrCast(self.vtable)).GetCryptoSessionHandle(@as(*const ID3D11CryptoSession, @ptrCast(self)), p_crypto_session_handle_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_VDOV_DIMENSION = enum(i32) {
    UNKNOWN = 0,
    TEXTURE2D = 1,
};
pub const D3D11_VDOV_DIMENSION_UNKNOWN = D3D11_VDOV_DIMENSION.UNKNOWN;
pub const D3D11_VDOV_DIMENSION_TEXTURE2D = D3D11_VDOV_DIMENSION.TEXTURE2D;

pub const D3D11_TEX2D_VDOV = extern struct {
    ArraySlice: u32,
};

pub const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC = extern struct {
    DecodeProfile: Guid,
    ViewDimension: D3D11_VDOV_DIMENSION,
    Anonymous: extern union {
        Texture2D: D3D11_TEX2D_VDOV,
    },
};

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3D11VideoDecoderOutputView_Value = Guid.initString("c2931aea-2a85-4f20-860f-fba1fd256e18");
pub const IID_ID3D11VideoDecoderOutputView = &IID_ID3D11VideoDecoderOutputView_Value;
pub const ID3D11VideoDecoderOutputView = extern struct {
    pub const VTable = extern struct {
        base: ID3D11View.VTable,
        GetDesc: *const fn (
            self: *const ID3D11VideoDecoderOutputView,
            p_desc: ?*D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11View.MethodMixin(T);
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC) void {
                return @as(*const ID3D11VideoDecoderOutputView.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11VideoDecoderOutputView, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_VPIV_DIMENSION = enum(i32) {
    UNKNOWN = 0,
    TEXTURE2D = 1,
};
pub const D3D11_VPIV_DIMENSION_UNKNOWN = D3D11_VPIV_DIMENSION.UNKNOWN;
pub const D3D11_VPIV_DIMENSION_TEXTURE2D = D3D11_VPIV_DIMENSION.TEXTURE2D;

pub const D3D11_TEX2D_VPIV = extern struct {
    MipSlice: u32,
    ArraySlice: u32,
};

pub const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC = extern struct {
    FourCC: u32,
    ViewDimension: D3D11_VPIV_DIMENSION,
    Anonymous: extern union {
        Texture2D: D3D11_TEX2D_VPIV,
    },
};

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3D11VideoProcessorInputView_Value = Guid.initString("11ec5a5f-51dc-4945-ab34-6e8c21300ea5");
pub const IID_ID3D11VideoProcessorInputView = &IID_ID3D11VideoProcessorInputView_Value;
pub const ID3D11VideoProcessorInputView = extern struct {
    pub const VTable = extern struct {
        base: ID3D11View.VTable,
        GetDesc: *const fn (
            self: *const ID3D11VideoProcessorInputView,
            p_desc: ?*D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11View.MethodMixin(T);
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC) void {
                return @as(*const ID3D11VideoProcessorInputView.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11VideoProcessorInputView, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_VPOV_DIMENSION = enum(i32) {
    UNKNOWN = 0,
    TEXTURE2D = 1,
    TEXTURE2DARRAY = 2,
};
pub const D3D11_VPOV_DIMENSION_UNKNOWN = D3D11_VPOV_DIMENSION.UNKNOWN;
pub const D3D11_VPOV_DIMENSION_TEXTURE2D = D3D11_VPOV_DIMENSION.TEXTURE2D;
pub const D3D11_VPOV_DIMENSION_TEXTURE2DARRAY = D3D11_VPOV_DIMENSION.TEXTURE2DARRAY;

pub const D3D11_TEX2D_VPOV = extern struct {
    MipSlice: u32,
};

pub const D3D11_TEX2D_ARRAY_VPOV = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
};

pub const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC = extern struct {
    ViewDimension: D3D11_VPOV_DIMENSION,
    Anonymous: extern union {
        Texture2D: D3D11_TEX2D_VPOV,
        Texture2DArray: D3D11_TEX2D_ARRAY_VPOV,
    },
};

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3D11VideoProcessorOutputView_Value = Guid.initString("a048285e-25a9-4527-bd93-d68b68c44254");
pub const IID_ID3D11VideoProcessorOutputView = &IID_ID3D11VideoProcessorOutputView_Value;
pub const ID3D11VideoProcessorOutputView = extern struct {
    pub const VTable = extern struct {
        base: ID3D11View.VTable,
        GetDesc: *const fn (
            self: *const ID3D11VideoProcessorOutputView,
            p_desc: ?*D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11View.MethodMixin(T);
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC) void {
                return @as(*const ID3D11VideoProcessorOutputView.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11VideoProcessorOutputView, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3D11VideoContext_Value = Guid.initString("61f21c45-3c0e-4a74-9cea-67100d9ad5e4");
pub const IID_ID3D11VideoContext = &IID_ID3D11VideoContext_Value;
pub const ID3D11VideoContext = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        GetDecoderBuffer: *const fn (
            self: *const ID3D11VideoContext,
            p_decoder: ?*ID3D11VideoDecoder,
            type: D3D11_VIDEO_DECODER_BUFFER_TYPE,
            p_buffer_size: ?*u32,
            pp_buffer: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseDecoderBuffer: *const fn (
            self: *const ID3D11VideoContext,
            p_decoder: ?*ID3D11VideoDecoder,
            type: D3D11_VIDEO_DECODER_BUFFER_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DecoderBeginFrame: *const fn (
            self: *const ID3D11VideoContext,
            p_decoder: ?*ID3D11VideoDecoder,
            p_view: ?*ID3D11VideoDecoderOutputView,
            content_key_size: u32,
            // TODO: what to do with BytesParamIndex 2?
            p_content_key: ?*const anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DecoderEndFrame: *const fn (
            self: *const ID3D11VideoContext,
            p_decoder: ?*ID3D11VideoDecoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SubmitDecoderBuffers: *const fn (
            self: *const ID3D11VideoContext,
            p_decoder: ?*ID3D11VideoDecoder,
            num_buffers: u32,
            p_buffer_desc: [*]const D3D11_VIDEO_DECODER_BUFFER_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DecoderExtension: *const fn (
            self: *const ID3D11VideoContext,
            p_decoder: ?*ID3D11VideoDecoder,
            p_extension_data: ?*const D3D11_VIDEO_DECODER_EXTENSION,
        ) callconv(@import("std").os.windows.WINAPI) i32,
        VideoProcessorSetOutputTargetRect: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            enable: BOOL,
            p_rect: ?*const RECT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetOutputBackgroundColor: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            y_cb_cr: BOOL,
            p_color: ?*const D3D11_VIDEO_COLOR,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetOutputColorSpace: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            p_color_space: ?*const D3D11_VIDEO_PROCESSOR_COLOR_SPACE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetOutputAlphaFillMode: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            alpha_fill_mode: D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE,
            stream_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetOutputConstriction: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            enable: BOOL,
            size: SIZE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetOutputStereoMode: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetOutputExtension: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            p_extension_guid: ?*const Guid,
            data_size: u32,
            p_data: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) i32,
        VideoProcessorGetOutputTargetRect: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            enabled: ?*BOOL,
            p_rect: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetOutputBackgroundColor: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            p_y_cb_cr: ?*BOOL,
            p_color: ?*D3D11_VIDEO_COLOR,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetOutputColorSpace: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            p_color_space: ?*D3D11_VIDEO_PROCESSOR_COLOR_SPACE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetOutputAlphaFillMode: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            p_alpha_fill_mode: ?*D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE,
            p_stream_index: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetOutputConstriction: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            p_enabled: ?*BOOL,
            p_size: ?*SIZE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetOutputStereoMode: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            p_enabled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetOutputExtension: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            p_extension_guid: ?*const Guid,
            data_size: u32,
            // TODO: what to do with BytesParamIndex 2?
            p_data: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) i32,
        VideoProcessorSetStreamFrameFormat: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            frame_format: D3D11_VIDEO_FRAME_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetStreamColorSpace: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            p_color_space: ?*const D3D11_VIDEO_PROCESSOR_COLOR_SPACE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetStreamOutputRate: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            output_rate: D3D11_VIDEO_PROCESSOR_OUTPUT_RATE,
            repeat_frame: BOOL,
            p_custom_rate: ?*const DXGI_RATIONAL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetStreamSourceRect: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            enable: BOOL,
            p_rect: ?*const RECT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetStreamDestRect: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            enable: BOOL,
            p_rect: ?*const RECT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetStreamAlpha: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            enable: BOOL,
            alpha: f32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetStreamPalette: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            count: u32,
            p_entries: ?[*]const u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetStreamPixelAspectRatio: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            enable: BOOL,
            p_source_aspect_ratio: ?*const DXGI_RATIONAL,
            p_destination_aspect_ratio: ?*const DXGI_RATIONAL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetStreamLumaKey: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            enable: BOOL,
            lower: f32,
            upper: f32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetStreamStereoFormat: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            enable: BOOL,
            format: D3D11_VIDEO_PROCESSOR_STEREO_FORMAT,
            left_view_frame0: BOOL,
            base_view_frame0: BOOL,
            flip_mode: D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE,
            mono_offset: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetStreamAutoProcessingMode: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetStreamFilter: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            filter: D3D11_VIDEO_PROCESSOR_FILTER,
            enable: BOOL,
            level: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetStreamExtension: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            p_extension_guid: ?*const Guid,
            data_size: u32,
            p_data: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) i32,
        VideoProcessorGetStreamFrameFormat: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            p_frame_format: ?*D3D11_VIDEO_FRAME_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetStreamColorSpace: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            p_color_space: ?*D3D11_VIDEO_PROCESSOR_COLOR_SPACE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetStreamOutputRate: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            p_output_rate: ?*D3D11_VIDEO_PROCESSOR_OUTPUT_RATE,
            p_repeat_frame: ?*BOOL,
            p_custom_rate: ?*DXGI_RATIONAL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetStreamSourceRect: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            p_enabled: ?*BOOL,
            p_rect: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetStreamDestRect: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            p_enabled: ?*BOOL,
            p_rect: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetStreamAlpha: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            p_enabled: ?*BOOL,
            p_alpha: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetStreamPalette: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            count: u32,
            p_entries: [*]u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetStreamPixelAspectRatio: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            p_enabled: ?*BOOL,
            p_source_aspect_ratio: ?*DXGI_RATIONAL,
            p_destination_aspect_ratio: ?*DXGI_RATIONAL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetStreamLumaKey: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            p_enabled: ?*BOOL,
            p_lower: ?*f32,
            p_upper: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetStreamStereoFormat: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            p_enable: ?*BOOL,
            p_format: ?*D3D11_VIDEO_PROCESSOR_STEREO_FORMAT,
            p_left_view_frame0: ?*BOOL,
            p_base_view_frame0: ?*BOOL,
            p_flip_mode: ?*D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE,
            mono_offset: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetStreamAutoProcessingMode: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            p_enabled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetStreamFilter: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            filter: D3D11_VIDEO_PROCESSOR_FILTER,
            p_enabled: ?*BOOL,
            p_level: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetStreamExtension: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            p_extension_guid: ?*const Guid,
            data_size: u32,
            // TODO: what to do with BytesParamIndex 3?
            p_data: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) i32,
        VideoProcessorBlt: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            p_view: ?*ID3D11VideoProcessorOutputView,
            output_frame: u32,
            stream_count: u32,
            p_streams: [*]const D3D11_VIDEO_PROCESSOR_STREAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NegotiateCryptoSessionKeyExchange: *const fn (
            self: *const ID3D11VideoContext,
            p_crypto_session: ?*ID3D11CryptoSession,
            data_size: u32,
            // TODO: what to do with BytesParamIndex 1?
            p_data: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EncryptionBlt: *const fn (
            self: *const ID3D11VideoContext,
            p_crypto_session: ?*ID3D11CryptoSession,
            p_src_surface: ?*ID3D11Texture2D,
            p_dst_surface: ?*ID3D11Texture2D,
            i_v_size: u32,
            // TODO: what to do with BytesParamIndex 3?
            p_i_v: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DecryptionBlt: *const fn (
            self: *const ID3D11VideoContext,
            p_crypto_session: ?*ID3D11CryptoSession,
            p_src_surface: ?*ID3D11Texture2D,
            p_dst_surface: ?*ID3D11Texture2D,
            p_encrypted_block_info: ?*D3D11_ENCRYPTED_BLOCK_INFO,
            content_key_size: u32,
            // TODO: what to do with BytesParamIndex 4?
            p_content_key: ?*const anyopaque,
            i_v_size: u32,
            // TODO: what to do with BytesParamIndex 6?
            p_i_v: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) void,
        StartSessionKeyRefresh: *const fn (
            self: *const ID3D11VideoContext,
            p_crypto_session: ?*ID3D11CryptoSession,
            random_number_size: u32,
            // TODO: what to do with BytesParamIndex 1?
            p_random_number: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) void,
        FinishSessionKeyRefresh: *const fn (
            self: *const ID3D11VideoContext,
            p_crypto_session: ?*ID3D11CryptoSession,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetEncryptionBltKey: *const fn (
            self: *const ID3D11VideoContext,
            p_crypto_session: ?*ID3D11CryptoSession,
            key_size: u32,
            // TODO: what to do with BytesParamIndex 1?
            p_readback_key: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NegotiateAuthenticatedChannelKeyExchange: *const fn (
            self: *const ID3D11VideoContext,
            p_channel: ?*ID3D11AuthenticatedChannel,
            data_size: u32,
            // TODO: what to do with BytesParamIndex 1?
            p_data: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryAuthenticatedChannel: *const fn (
            self: *const ID3D11VideoContext,
            p_channel: ?*ID3D11AuthenticatedChannel,
            input_size: u32,
            // TODO: what to do with BytesParamIndex 1?
            p_input: ?*const anyopaque,
            output_size: u32,
            // TODO: what to do with BytesParamIndex 3?
            p_output: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConfigureAuthenticatedChannel: *const fn (
            self: *const ID3D11VideoContext,
            p_channel: ?*ID3D11AuthenticatedChannel,
            input_size: u32,
            // TODO: what to do with BytesParamIndex 1?
            p_input: ?*const anyopaque,
            p_output: ?*D3D11_AUTHENTICATED_CONFIGURE_OUTPUT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        VideoProcessorSetStreamRotation: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            enable: BOOL,
            rotation: D3D11_VIDEO_PROCESSOR_ROTATION,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetStreamRotation: *const fn (
            self: *const ID3D11VideoContext,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            p_enable: ?*BOOL,
            p_rotation: ?*D3D11_VIDEO_PROCESSOR_ROTATION,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
            pub inline fn getDecoderBuffer(self: *const T, p_decoder_: ?*ID3D11VideoDecoder, type_: D3D11_VIDEO_DECODER_BUFFER_TYPE, p_buffer_size_: ?*u32, pp_buffer_: ?*?*anyopaque) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).GetDecoderBuffer(@as(*const ID3D11VideoContext, @ptrCast(self)), p_decoder_, type_, p_buffer_size_, pp_buffer_);
            }
            pub inline fn releaseDecoderBuffer(self: *const T, p_decoder_: ?*ID3D11VideoDecoder, type_: D3D11_VIDEO_DECODER_BUFFER_TYPE) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).ReleaseDecoderBuffer(@as(*const ID3D11VideoContext, @ptrCast(self)), p_decoder_, type_);
            }
            pub inline fn decoderBeginFrame(self: *const T, p_decoder_: ?*ID3D11VideoDecoder, p_view_: ?*ID3D11VideoDecoderOutputView, content_key_size_: u32, p_content_key_: ?*const anyopaque) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).DecoderBeginFrame(@as(*const ID3D11VideoContext, @ptrCast(self)), p_decoder_, p_view_, content_key_size_, p_content_key_);
            }
            pub inline fn decoderEndFrame(self: *const T, p_decoder_: ?*ID3D11VideoDecoder) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).DecoderEndFrame(@as(*const ID3D11VideoContext, @ptrCast(self)), p_decoder_);
            }
            pub inline fn submitDecoderBuffers(self: *const T, p_decoder_: ?*ID3D11VideoDecoder, num_buffers_: u32, p_buffer_desc_: [*]const D3D11_VIDEO_DECODER_BUFFER_DESC) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).SubmitDecoderBuffers(@as(*const ID3D11VideoContext, @ptrCast(self)), p_decoder_, num_buffers_, p_buffer_desc_);
            }
            pub inline fn decoderExtension(self: *const T, p_decoder_: ?*ID3D11VideoDecoder, p_extension_data_: ?*const D3D11_VIDEO_DECODER_EXTENSION) i32 {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).DecoderExtension(@as(*const ID3D11VideoContext, @ptrCast(self)), p_decoder_, p_extension_data_);
            }
            pub inline fn videoProcessorSetOutputTargetRect(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, enable_: BOOL, p_rect_: ?*const RECT) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetOutputTargetRect(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, enable_, p_rect_);
            }
            pub inline fn videoProcessorSetOutputBackgroundColor(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, y_cb_cr_: BOOL, p_color_: ?*const D3D11_VIDEO_COLOR) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetOutputBackgroundColor(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, y_cb_cr_, p_color_);
            }
            pub inline fn videoProcessorSetOutputColorSpace(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, p_color_space_: ?*const D3D11_VIDEO_PROCESSOR_COLOR_SPACE) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetOutputColorSpace(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, p_color_space_);
            }
            pub inline fn videoProcessorSetOutputAlphaFillMode(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, alpha_fill_mode_: D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, stream_index_: u32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetOutputAlphaFillMode(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, alpha_fill_mode_, stream_index_);
            }
            pub inline fn videoProcessorSetOutputConstriction(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, enable_: BOOL, size_: SIZE) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetOutputConstriction(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, enable_, size_);
            }
            pub inline fn videoProcessorSetOutputStereoMode(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, enable_: BOOL) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetOutputStereoMode(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, enable_);
            }
            pub inline fn videoProcessorSetOutputExtension(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, p_extension_guid_: ?*const Guid, data_size_: u32, p_data_: ?*anyopaque) i32 {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetOutputExtension(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, p_extension_guid_, data_size_, p_data_);
            }
            pub inline fn videoProcessorGetOutputTargetRect(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, enabled_: ?*BOOL, p_rect_: ?*RECT) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetOutputTargetRect(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, enabled_, p_rect_);
            }
            pub inline fn videoProcessorGetOutputBackgroundColor(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, p_y_cb_cr_: ?*BOOL, p_color_: ?*D3D11_VIDEO_COLOR) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetOutputBackgroundColor(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, p_y_cb_cr_, p_color_);
            }
            pub inline fn videoProcessorGetOutputColorSpace(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, p_color_space_: ?*D3D11_VIDEO_PROCESSOR_COLOR_SPACE) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetOutputColorSpace(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, p_color_space_);
            }
            pub inline fn videoProcessorGetOutputAlphaFillMode(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, p_alpha_fill_mode_: ?*D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE, p_stream_index_: ?*u32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetOutputAlphaFillMode(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, p_alpha_fill_mode_, p_stream_index_);
            }
            pub inline fn videoProcessorGetOutputConstriction(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, p_enabled_: ?*BOOL, p_size_: ?*SIZE) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetOutputConstriction(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, p_enabled_, p_size_);
            }
            pub inline fn videoProcessorGetOutputStereoMode(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, p_enabled_: ?*BOOL) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetOutputStereoMode(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, p_enabled_);
            }
            pub inline fn videoProcessorGetOutputExtension(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, p_extension_guid_: ?*const Guid, data_size_: u32, p_data_: ?*anyopaque) i32 {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetOutputExtension(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, p_extension_guid_, data_size_, p_data_);
            }
            pub inline fn videoProcessorSetStreamFrameFormat(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, frame_format_: D3D11_VIDEO_FRAME_FORMAT) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamFrameFormat(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, frame_format_);
            }
            pub inline fn videoProcessorSetStreamColorSpace(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, p_color_space_: ?*const D3D11_VIDEO_PROCESSOR_COLOR_SPACE) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamColorSpace(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, p_color_space_);
            }
            pub inline fn videoProcessorSetStreamOutputRate(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, output_rate_: D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, repeat_frame_: BOOL, p_custom_rate_: ?*const DXGI_RATIONAL) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamOutputRate(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, output_rate_, repeat_frame_, p_custom_rate_);
            }
            pub inline fn videoProcessorSetStreamSourceRect(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, enable_: BOOL, p_rect_: ?*const RECT) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamSourceRect(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, enable_, p_rect_);
            }
            pub inline fn videoProcessorSetStreamDestRect(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, enable_: BOOL, p_rect_: ?*const RECT) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamDestRect(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, enable_, p_rect_);
            }
            pub inline fn videoProcessorSetStreamAlpha(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, enable_: BOOL, alpha_: f32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamAlpha(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, enable_, alpha_);
            }
            pub inline fn videoProcessorSetStreamPalette(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, count_: u32, p_entries_: ?[*]const u32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamPalette(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, count_, p_entries_);
            }
            pub inline fn videoProcessorSetStreamPixelAspectRatio(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, enable_: BOOL, p_source_aspect_ratio_: ?*const DXGI_RATIONAL, p_destination_aspect_ratio_: ?*const DXGI_RATIONAL) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamPixelAspectRatio(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, enable_, p_source_aspect_ratio_, p_destination_aspect_ratio_);
            }
            pub inline fn videoProcessorSetStreamLumaKey(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, enable_: BOOL, lower_: f32, upper_: f32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamLumaKey(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, enable_, lower_, upper_);
            }
            pub inline fn videoProcessorSetStreamStereoFormat(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, enable_: BOOL, format_: D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, left_view_frame0_: BOOL, base_view_frame0_: BOOL, flip_mode_: D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, mono_offset_: i32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamStereoFormat(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, enable_, format_, left_view_frame0_, base_view_frame0_, flip_mode_, mono_offset_);
            }
            pub inline fn videoProcessorSetStreamAutoProcessingMode(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, enable_: BOOL) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamAutoProcessingMode(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, enable_);
            }
            pub inline fn videoProcessorSetStreamFilter(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, filter_: D3D11_VIDEO_PROCESSOR_FILTER, enable_: BOOL, level_: i32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamFilter(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, filter_, enable_, level_);
            }
            pub inline fn videoProcessorSetStreamExtension(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, p_extension_guid_: ?*const Guid, data_size_: u32, p_data_: ?*anyopaque) i32 {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamExtension(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, p_extension_guid_, data_size_, p_data_);
            }
            pub inline fn videoProcessorGetStreamFrameFormat(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, p_frame_format_: ?*D3D11_VIDEO_FRAME_FORMAT) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamFrameFormat(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, p_frame_format_);
            }
            pub inline fn videoProcessorGetStreamColorSpace(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, p_color_space_: ?*D3D11_VIDEO_PROCESSOR_COLOR_SPACE) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamColorSpace(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, p_color_space_);
            }
            pub inline fn videoProcessorGetStreamOutputRate(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, p_output_rate_: ?*D3D11_VIDEO_PROCESSOR_OUTPUT_RATE, p_repeat_frame_: ?*BOOL, p_custom_rate_: ?*DXGI_RATIONAL) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamOutputRate(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, p_output_rate_, p_repeat_frame_, p_custom_rate_);
            }
            pub inline fn videoProcessorGetStreamSourceRect(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, p_enabled_: ?*BOOL, p_rect_: ?*RECT) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamSourceRect(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, p_enabled_, p_rect_);
            }
            pub inline fn videoProcessorGetStreamDestRect(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, p_enabled_: ?*BOOL, p_rect_: ?*RECT) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamDestRect(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, p_enabled_, p_rect_);
            }
            pub inline fn videoProcessorGetStreamAlpha(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, p_enabled_: ?*BOOL, p_alpha_: ?*f32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamAlpha(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, p_enabled_, p_alpha_);
            }
            pub inline fn videoProcessorGetStreamPalette(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, count_: u32, p_entries_: [*]u32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamPalette(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, count_, p_entries_);
            }
            pub inline fn videoProcessorGetStreamPixelAspectRatio(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, p_enabled_: ?*BOOL, p_source_aspect_ratio_: ?*DXGI_RATIONAL, p_destination_aspect_ratio_: ?*DXGI_RATIONAL) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamPixelAspectRatio(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, p_enabled_, p_source_aspect_ratio_, p_destination_aspect_ratio_);
            }
            pub inline fn videoProcessorGetStreamLumaKey(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, p_enabled_: ?*BOOL, p_lower_: ?*f32, p_upper_: ?*f32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamLumaKey(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, p_enabled_, p_lower_, p_upper_);
            }
            pub inline fn videoProcessorGetStreamStereoFormat(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, p_enable_: ?*BOOL, p_format_: ?*D3D11_VIDEO_PROCESSOR_STEREO_FORMAT, p_left_view_frame0_: ?*BOOL, p_base_view_frame0_: ?*BOOL, p_flip_mode_: ?*D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE, mono_offset_: ?*i32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamStereoFormat(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, p_enable_, p_format_, p_left_view_frame0_, p_base_view_frame0_, p_flip_mode_, mono_offset_);
            }
            pub inline fn videoProcessorGetStreamAutoProcessingMode(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, p_enabled_: ?*BOOL) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamAutoProcessingMode(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, p_enabled_);
            }
            pub inline fn videoProcessorGetStreamFilter(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, filter_: D3D11_VIDEO_PROCESSOR_FILTER, p_enabled_: ?*BOOL, p_level_: ?*i32) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamFilter(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, filter_, p_enabled_, p_level_);
            }
            pub inline fn videoProcessorGetStreamExtension(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, p_extension_guid_: ?*const Guid, data_size_: u32, p_data_: ?*anyopaque) i32 {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamExtension(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, p_extension_guid_, data_size_, p_data_);
            }
            pub inline fn videoProcessorBlt(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, p_view_: ?*ID3D11VideoProcessorOutputView, output_frame_: u32, stream_count_: u32, p_streams_: [*]const D3D11_VIDEO_PROCESSOR_STREAM) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorBlt(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, p_view_, output_frame_, stream_count_, p_streams_);
            }
            pub inline fn negotiateCryptoSessionKeyExchange(self: *const T, p_crypto_session_: ?*ID3D11CryptoSession, data_size_: u32, p_data_: ?*anyopaque) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).NegotiateCryptoSessionKeyExchange(@as(*const ID3D11VideoContext, @ptrCast(self)), p_crypto_session_, data_size_, p_data_);
            }
            pub inline fn encryptionBlt(self: *const T, p_crypto_session_: ?*ID3D11CryptoSession, p_src_surface_: ?*ID3D11Texture2D, p_dst_surface_: ?*ID3D11Texture2D, i_v_size_: u32, p_i_v_: ?*anyopaque) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).EncryptionBlt(@as(*const ID3D11VideoContext, @ptrCast(self)), p_crypto_session_, p_src_surface_, p_dst_surface_, i_v_size_, p_i_v_);
            }
            pub inline fn decryptionBlt(self: *const T, p_crypto_session_: ?*ID3D11CryptoSession, p_src_surface_: ?*ID3D11Texture2D, p_dst_surface_: ?*ID3D11Texture2D, p_encrypted_block_info_: ?*D3D11_ENCRYPTED_BLOCK_INFO, content_key_size_: u32, p_content_key_: ?*const anyopaque, i_v_size_: u32, p_i_v_: ?*anyopaque) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).DecryptionBlt(@as(*const ID3D11VideoContext, @ptrCast(self)), p_crypto_session_, p_src_surface_, p_dst_surface_, p_encrypted_block_info_, content_key_size_, p_content_key_, i_v_size_, p_i_v_);
            }
            pub inline fn startSessionKeyRefresh(self: *const T, p_crypto_session_: ?*ID3D11CryptoSession, random_number_size_: u32, p_random_number_: ?*anyopaque) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).StartSessionKeyRefresh(@as(*const ID3D11VideoContext, @ptrCast(self)), p_crypto_session_, random_number_size_, p_random_number_);
            }
            pub inline fn finishSessionKeyRefresh(self: *const T, p_crypto_session_: ?*ID3D11CryptoSession) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).FinishSessionKeyRefresh(@as(*const ID3D11VideoContext, @ptrCast(self)), p_crypto_session_);
            }
            pub inline fn getEncryptionBltKey(self: *const T, p_crypto_session_: ?*ID3D11CryptoSession, key_size_: u32, p_readback_key_: ?*anyopaque) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).GetEncryptionBltKey(@as(*const ID3D11VideoContext, @ptrCast(self)), p_crypto_session_, key_size_, p_readback_key_);
            }
            pub inline fn negotiateAuthenticatedChannelKeyExchange(self: *const T, p_channel_: ?*ID3D11AuthenticatedChannel, data_size_: u32, p_data_: ?*anyopaque) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).NegotiateAuthenticatedChannelKeyExchange(@as(*const ID3D11VideoContext, @ptrCast(self)), p_channel_, data_size_, p_data_);
            }
            pub inline fn queryAuthenticatedChannel(self: *const T, p_channel_: ?*ID3D11AuthenticatedChannel, input_size_: u32, p_input_: ?*const anyopaque, output_size_: u32, p_output_: ?*anyopaque) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).QueryAuthenticatedChannel(@as(*const ID3D11VideoContext, @ptrCast(self)), p_channel_, input_size_, p_input_, output_size_, p_output_);
            }
            pub inline fn configureAuthenticatedChannel(self: *const T, p_channel_: ?*ID3D11AuthenticatedChannel, input_size_: u32, p_input_: ?*const anyopaque, p_output_: ?*D3D11_AUTHENTICATED_CONFIGURE_OUTPUT) HRESULT {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).ConfigureAuthenticatedChannel(@as(*const ID3D11VideoContext, @ptrCast(self)), p_channel_, input_size_, p_input_, p_output_);
            }
            pub inline fn videoProcessorSetStreamRotation(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, enable_: BOOL, rotation_: D3D11_VIDEO_PROCESSOR_ROTATION) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamRotation(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, enable_, rotation_);
            }
            pub inline fn videoProcessorGetStreamRotation(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, p_enable_: ?*BOOL, p_rotation_: ?*D3D11_VIDEO_PROCESSOR_ROTATION) void {
                return @as(*const ID3D11VideoContext.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamRotation(@as(*const ID3D11VideoContext, @ptrCast(self)), p_video_processor_, stream_index_, p_enable_, p_rotation_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3D11VideoDevice_Value = Guid.initString("10ec4d5b-975a-4689-b9e4-d0aac30fe333");
pub const IID_ID3D11VideoDevice = &IID_ID3D11VideoDevice_Value;
pub const ID3D11VideoDevice = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateVideoDecoder: *const fn (
            self: *const ID3D11VideoDevice,
            p_video_desc: ?*const D3D11_VIDEO_DECODER_DESC,
            p_config: ?*const D3D11_VIDEO_DECODER_CONFIG,
            pp_decoder: ?*?*ID3D11VideoDecoder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVideoProcessor: *const fn (
            self: *const ID3D11VideoDevice,
            p_enum: ?*ID3D11VideoProcessorEnumerator,
            rate_conversion_index: u32,
            pp_video_processor: ?*?*ID3D11VideoProcessor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAuthenticatedChannel: *const fn (
            self: *const ID3D11VideoDevice,
            channel_type: D3D11_AUTHENTICATED_CHANNEL_TYPE,
            pp_authenticated_channel: ?*?*ID3D11AuthenticatedChannel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCryptoSession: *const fn (
            self: *const ID3D11VideoDevice,
            p_crypto_type: ?*const Guid,
            p_decoder_profile: ?*const Guid,
            p_key_exchange_type: ?*const Guid,
            pp_crypto_session: ?*?*ID3D11CryptoSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVideoDecoderOutputView: *const fn (
            self: *const ID3D11VideoDevice,
            p_resource: ?*ID3D11Resource,
            p_desc: ?*const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC,
            pp_v_d_o_v_view: ?*?*ID3D11VideoDecoderOutputView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVideoProcessorInputView: *const fn (
            self: *const ID3D11VideoDevice,
            p_resource: ?*ID3D11Resource,
            p_enum: ?*ID3D11VideoProcessorEnumerator,
            p_desc: ?*const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC,
            pp_v_p_i_view: ?*?*ID3D11VideoProcessorInputView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVideoProcessorOutputView: *const fn (
            self: *const ID3D11VideoDevice,
            p_resource: ?*ID3D11Resource,
            p_enum: ?*ID3D11VideoProcessorEnumerator,
            p_desc: ?*const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC,
            pp_v_p_o_view: ?*?*ID3D11VideoProcessorOutputView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVideoProcessorEnumerator: *const fn (
            self: *const ID3D11VideoDevice,
            p_desc: ?*const D3D11_VIDEO_PROCESSOR_CONTENT_DESC,
            pp_enum: ?*?*ID3D11VideoProcessorEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVideoDecoderProfileCount: *const fn (
            self: *const ID3D11VideoDevice,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetVideoDecoderProfile: *const fn (
            self: *const ID3D11VideoDevice,
            index: u32,
            p_decoder_profile: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckVideoDecoderFormat: *const fn (
            self: *const ID3D11VideoDevice,
            p_decoder_profile: ?*const Guid,
            format: DXGI_FORMAT,
            p_supported: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVideoDecoderConfigCount: *const fn (
            self: *const ID3D11VideoDevice,
            p_desc: ?*const D3D11_VIDEO_DECODER_DESC,
            p_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVideoDecoderConfig: *const fn (
            self: *const ID3D11VideoDevice,
            p_desc: ?*const D3D11_VIDEO_DECODER_DESC,
            index: u32,
            p_config: ?*D3D11_VIDEO_DECODER_CONFIG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContentProtectionCaps: *const fn (
            self: *const ID3D11VideoDevice,
            p_crypto_type: ?*const Guid,
            p_decoder_profile: ?*const Guid,
            p_caps: ?*D3D11_VIDEO_CONTENT_PROTECTION_CAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckCryptoKeyExchange: *const fn (
            self: *const ID3D11VideoDevice,
            p_crypto_type: ?*const Guid,
            p_decoder_profile: ?*const Guid,
            index: u32,
            p_key_exchange_type: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrivateData: *const fn (
            self: *const ID3D11VideoDevice,
            guid: ?*const Guid,
            data_size: u32,
            // TODO: what to do with BytesParamIndex 1?
            p_data: ?*const anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrivateDataInterface: *const fn (
            self: *const ID3D11VideoDevice,
            guid: ?*const Guid,
            p_data: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createVideoDecoder(self: *const T, p_video_desc_: ?*const D3D11_VIDEO_DECODER_DESC, p_config_: ?*const D3D11_VIDEO_DECODER_CONFIG, pp_decoder_: ?*?*ID3D11VideoDecoder) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).CreateVideoDecoder(@as(*const ID3D11VideoDevice, @ptrCast(self)), p_video_desc_, p_config_, pp_decoder_);
            }
            pub inline fn createVideoProcessor(self: *const T, p_enum_: ?*ID3D11VideoProcessorEnumerator, rate_conversion_index_: u32, pp_video_processor_: ?*?*ID3D11VideoProcessor) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).CreateVideoProcessor(@as(*const ID3D11VideoDevice, @ptrCast(self)), p_enum_, rate_conversion_index_, pp_video_processor_);
            }
            pub inline fn createAuthenticatedChannel(self: *const T, channel_type_: D3D11_AUTHENTICATED_CHANNEL_TYPE, pp_authenticated_channel_: ?*?*ID3D11AuthenticatedChannel) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).CreateAuthenticatedChannel(@as(*const ID3D11VideoDevice, @ptrCast(self)), channel_type_, pp_authenticated_channel_);
            }
            pub inline fn createCryptoSession(self: *const T, p_crypto_type_: ?*const Guid, p_decoder_profile_: ?*const Guid, p_key_exchange_type_: ?*const Guid, pp_crypto_session_: ?*?*ID3D11CryptoSession) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).CreateCryptoSession(@as(*const ID3D11VideoDevice, @ptrCast(self)), p_crypto_type_, p_decoder_profile_, p_key_exchange_type_, pp_crypto_session_);
            }
            pub inline fn createVideoDecoderOutputView(self: *const T, p_resource_: ?*ID3D11Resource, p_desc_: ?*const D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC, pp_v_d_o_v_view_: ?*?*ID3D11VideoDecoderOutputView) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).CreateVideoDecoderOutputView(@as(*const ID3D11VideoDevice, @ptrCast(self)), p_resource_, p_desc_, pp_v_d_o_v_view_);
            }
            pub inline fn createVideoProcessorInputView(self: *const T, p_resource_: ?*ID3D11Resource, p_enum_: ?*ID3D11VideoProcessorEnumerator, p_desc_: ?*const D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC, pp_v_p_i_view_: ?*?*ID3D11VideoProcessorInputView) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).CreateVideoProcessorInputView(@as(*const ID3D11VideoDevice, @ptrCast(self)), p_resource_, p_enum_, p_desc_, pp_v_p_i_view_);
            }
            pub inline fn createVideoProcessorOutputView(self: *const T, p_resource_: ?*ID3D11Resource, p_enum_: ?*ID3D11VideoProcessorEnumerator, p_desc_: ?*const D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC, pp_v_p_o_view_: ?*?*ID3D11VideoProcessorOutputView) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).CreateVideoProcessorOutputView(@as(*const ID3D11VideoDevice, @ptrCast(self)), p_resource_, p_enum_, p_desc_, pp_v_p_o_view_);
            }
            pub inline fn createVideoProcessorEnumerator(self: *const T, p_desc_: ?*const D3D11_VIDEO_PROCESSOR_CONTENT_DESC, pp_enum_: ?*?*ID3D11VideoProcessorEnumerator) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).CreateVideoProcessorEnumerator(@as(*const ID3D11VideoDevice, @ptrCast(self)), p_desc_, pp_enum_);
            }
            pub inline fn getVideoDecoderProfileCount(self: *const T) u32 {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).GetVideoDecoderProfileCount(@as(*const ID3D11VideoDevice, @ptrCast(self)));
            }
            pub inline fn getVideoDecoderProfile(self: *const T, index_: u32, p_decoder_profile_: ?*Guid) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).GetVideoDecoderProfile(@as(*const ID3D11VideoDevice, @ptrCast(self)), index_, p_decoder_profile_);
            }
            pub inline fn checkVideoDecoderFormat(self: *const T, p_decoder_profile_: ?*const Guid, format_: DXGI_FORMAT, p_supported_: ?*BOOL) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).CheckVideoDecoderFormat(@as(*const ID3D11VideoDevice, @ptrCast(self)), p_decoder_profile_, format_, p_supported_);
            }
            pub inline fn getVideoDecoderConfigCount(self: *const T, p_desc_: ?*const D3D11_VIDEO_DECODER_DESC, p_count_: ?*u32) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).GetVideoDecoderConfigCount(@as(*const ID3D11VideoDevice, @ptrCast(self)), p_desc_, p_count_);
            }
            pub inline fn getVideoDecoderConfig(self: *const T, p_desc_: ?*const D3D11_VIDEO_DECODER_DESC, index_: u32, p_config_: ?*D3D11_VIDEO_DECODER_CONFIG) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).GetVideoDecoderConfig(@as(*const ID3D11VideoDevice, @ptrCast(self)), p_desc_, index_, p_config_);
            }
            pub inline fn getContentProtectionCaps(self: *const T, p_crypto_type_: ?*const Guid, p_decoder_profile_: ?*const Guid, p_caps_: ?*D3D11_VIDEO_CONTENT_PROTECTION_CAPS) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).GetContentProtectionCaps(@as(*const ID3D11VideoDevice, @ptrCast(self)), p_crypto_type_, p_decoder_profile_, p_caps_);
            }
            pub inline fn checkCryptoKeyExchange(self: *const T, p_crypto_type_: ?*const Guid, p_decoder_profile_: ?*const Guid, index_: u32, p_key_exchange_type_: ?*Guid) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).CheckCryptoKeyExchange(@as(*const ID3D11VideoDevice, @ptrCast(self)), p_crypto_type_, p_decoder_profile_, index_, p_key_exchange_type_);
            }
            pub inline fn setPrivateData(self: *const T, guid_: ?*const Guid, data_size_: u32, p_data_: ?*const anyopaque) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).SetPrivateData(@as(*const ID3D11VideoDevice, @ptrCast(self)), guid_, data_size_, p_data_);
            }
            pub inline fn setPrivateDataInterface(self: *const T, guid_: ?*const Guid, p_data_: ?*IUnknown) HRESULT {
                return @as(*const ID3D11VideoDevice.VTable, @ptrCast(self.vtable)).SetPrivateDataInterface(@as(*const ID3D11VideoDevice, @ptrCast(self)), guid_, p_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11Device_Value = Guid.initString("db6f6ddb-ac77-4e88-8253-819df9bbf140");
pub const IID_ID3D11Device = &IID_ID3D11Device_Value;
pub const ID3D11Device = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateBuffer: *const fn (
            self: *const ID3D11Device,
            p_desc: ?*const D3D11_BUFFER_DESC,
            p_initial_data: ?*const D3D11_SUBRESOURCE_DATA,
            pp_buffer: ?*?*ID3D11Buffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTexture1D: *const fn (
            self: *const ID3D11Device,
            p_desc: ?*const D3D11_TEXTURE1D_DESC,
            p_initial_data: ?*const D3D11_SUBRESOURCE_DATA,
            pp_texture1_d: ?*?*ID3D11Texture1D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTexture2D: *const fn (
            self: *const ID3D11Device,
            p_desc: ?*const D3D11_TEXTURE2D_DESC,
            p_initial_data: ?*const D3D11_SUBRESOURCE_DATA,
            pp_texture2_d: ?*?*ID3D11Texture2D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTexture3D: *const fn (
            self: *const ID3D11Device,
            p_desc: ?*const D3D11_TEXTURE3D_DESC,
            p_initial_data: ?*const D3D11_SUBRESOURCE_DATA,
            pp_texture3_d: ?*?*ID3D11Texture3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateShaderResourceView: *const fn (
            self: *const ID3D11Device,
            p_resource: ?*ID3D11Resource,
            p_desc: ?*const D3D11_SHADER_RESOURCE_VIEW_DESC,
            pp_s_r_view: ?*?*ID3D11ShaderResourceView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateUnorderedAccessView: *const fn (
            self: *const ID3D11Device,
            p_resource: ?*ID3D11Resource,
            p_desc: ?*const D3D11_UNORDERED_ACCESS_VIEW_DESC,
            pp_u_a_view: ?*?*ID3D11UnorderedAccessView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRenderTargetView: *const fn (
            self: *const ID3D11Device,
            p_resource: ?*ID3D11Resource,
            p_desc: ?*const D3D11_RENDER_TARGET_VIEW_DESC,
            pp_r_t_view: ?*?*ID3D11RenderTargetView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDepthStencilView: *const fn (
            self: *const ID3D11Device,
            p_resource: ?*ID3D11Resource,
            p_desc: ?*const D3D11_DEPTH_STENCIL_VIEW_DESC,
            pp_depth_stencil_view: ?*?*ID3D11DepthStencilView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInputLayout: *const fn (
            self: *const ID3D11Device,
            p_input_element_descs: [*]const D3D11_INPUT_ELEMENT_DESC,
            num_elements: u32,
            p_shader_bytecode_with_input_signature: [*]const u8,
            bytecode_length: usize,
            pp_input_layout: ?*?*ID3D11InputLayout,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVertexShader: *const fn (
            self: *const ID3D11Device,
            p_shader_bytecode: [*]const u8,
            bytecode_length: usize,
            p_class_linkage: ?*ID3D11ClassLinkage,
            pp_vertex_shader: ?*?*ID3D11VertexShader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGeometryShader: *const fn (
            self: *const ID3D11Device,
            p_shader_bytecode: [*]const u8,
            bytecode_length: usize,
            p_class_linkage: ?*ID3D11ClassLinkage,
            pp_geometry_shader: ?*?*ID3D11GeometryShader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGeometryShaderWithStreamOutput: *const fn (
            self: *const ID3D11Device,
            p_shader_bytecode: [*]const u8,
            bytecode_length: usize,
            p_s_o_declaration: ?[*]const D3D11_SO_DECLARATION_ENTRY,
            num_entries: u32,
            p_buffer_strides: ?[*]const u32,
            num_strides: u32,
            rasterized_stream: u32,
            p_class_linkage: ?*ID3D11ClassLinkage,
            pp_geometry_shader: ?*?*ID3D11GeometryShader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePixelShader: *const fn (
            self: *const ID3D11Device,
            p_shader_bytecode: [*]const u8,
            bytecode_length: usize,
            p_class_linkage: ?*ID3D11ClassLinkage,
            pp_pixel_shader: ?*?*ID3D11PixelShader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateHullShader: *const fn (
            self: *const ID3D11Device,
            p_shader_bytecode: [*]const u8,
            bytecode_length: usize,
            p_class_linkage: ?*ID3D11ClassLinkage,
            pp_hull_shader: ?*?*ID3D11HullShader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDomainShader: *const fn (
            self: *const ID3D11Device,
            p_shader_bytecode: [*]const u8,
            bytecode_length: usize,
            p_class_linkage: ?*ID3D11ClassLinkage,
            pp_domain_shader: ?*?*ID3D11DomainShader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateComputeShader: *const fn (
            self: *const ID3D11Device,
            p_shader_bytecode: [*]const u8,
            bytecode_length: usize,
            p_class_linkage: ?*ID3D11ClassLinkage,
            pp_compute_shader: ?*?*ID3D11ComputeShader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateClassLinkage: *const fn (
            self: *const ID3D11Device,
            pp_linkage: ?*?*ID3D11ClassLinkage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBlendState: *const fn (
            self: *const ID3D11Device,
            p_blend_state_desc: ?*const D3D11_BLEND_DESC,
            pp_blend_state: ?*?*ID3D11BlendState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDepthStencilState: *const fn (
            self: *const ID3D11Device,
            p_depth_stencil_desc: ?*const D3D11_DEPTH_STENCIL_DESC,
            pp_depth_stencil_state: ?*?*ID3D11DepthStencilState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRasterizerState: *const fn (
            self: *const ID3D11Device,
            p_rasterizer_desc: ?*const D3D11_RASTERIZER_DESC,
            pp_rasterizer_state: ?*?*ID3D11RasterizerState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSamplerState: *const fn (
            self: *const ID3D11Device,
            p_sampler_desc: ?*const D3D11_SAMPLER_DESC,
            pp_sampler_state: ?*?*ID3D11SamplerState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateQuery: *const fn (
            self: *const ID3D11Device,
            p_query_desc: ?*const D3D11_QUERY_DESC,
            pp_query: ?*?*ID3D11Query,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePredicate: *const fn (
            self: *const ID3D11Device,
            p_predicate_desc: ?*const D3D11_QUERY_DESC,
            pp_predicate: ?*?*ID3D11Predicate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCounter: *const fn (
            self: *const ID3D11Device,
            p_counter_desc: ?*const D3D11_COUNTER_DESC,
            pp_counter: ?*?*ID3D11Counter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDeferredContext: *const fn (
            self: *const ID3D11Device,
            context_flags: u32,
            pp_deferred_context: ?*?*ID3D11DeviceContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenSharedResource: *const fn (
            self: *const ID3D11Device,
            h_resource: ?HANDLE,
            returned_interface: ?*const Guid,
            pp_resource: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckFormatSupport: *const fn (
            self: *const ID3D11Device,
            format: DXGI_FORMAT,
            p_format_support: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckMultisampleQualityLevels: *const fn (
            self: *const ID3D11Device,
            format: DXGI_FORMAT,
            sample_count: u32,
            p_num_quality_levels: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckCounterInfo: *const fn (
            self: *const ID3D11Device,
            p_counter_info: ?*D3D11_COUNTER_INFO,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CheckCounter: *const fn (
            self: *const ID3D11Device,
            p_desc: ?*const D3D11_COUNTER_DESC,
            p_type: ?*D3D11_COUNTER_TYPE,
            p_active_counters: ?*u32,
            sz_name: ?[*:0]u8,
            p_name_length: ?*u32,
            sz_units: ?[*:0]u8,
            p_units_length: ?*u32,
            sz_description: ?[*:0]u8,
            p_description_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckFeatureSupport: *const fn (
            self: *const ID3D11Device,
            feature: D3D11_FEATURE,
            // TODO: what to do with BytesParamIndex 2?
            p_feature_support_data: ?*anyopaque,
            feature_support_data_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrivateData: *const fn (
            self: *const ID3D11Device,
            guid: ?*const Guid,
            p_data_size: ?*u32,
            // TODO: what to do with BytesParamIndex 1?
            p_data: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrivateData: *const fn (
            self: *const ID3D11Device,
            guid: ?*const Guid,
            data_size: u32,
            // TODO: what to do with BytesParamIndex 1?
            p_data: ?*const anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrivateDataInterface: *const fn (
            self: *const ID3D11Device,
            guid: ?*const Guid,
            p_data: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFeatureLevel: *const fn (
            self: *const ID3D11Device,
        ) callconv(@import("std").os.windows.WINAPI) D3D_FEATURE_LEVEL,
        GetCreationFlags: *const fn (
            self: *const ID3D11Device,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetDeviceRemovedReason: *const fn (
            self: *const ID3D11Device,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImmediateContext: *const fn (
            self: *const ID3D11Device,
            pp_immediate_context: ?*?*ID3D11DeviceContext,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetExceptionMode: *const fn (
            self: *const ID3D11Device,
            raise_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExceptionMode: *const fn (
            self: *const ID3D11Device,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createBuffer(self: *const T, p_desc_: ?*const D3D11_BUFFER_DESC, p_initial_data_: ?*const D3D11_SUBRESOURCE_DATA, pp_buffer_: ?*?*ID3D11Buffer) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateBuffer(@as(*const ID3D11Device, @ptrCast(self)), p_desc_, p_initial_data_, pp_buffer_);
            }
            pub inline fn createTexture1D(self: *const T, p_desc_: ?*const D3D11_TEXTURE1D_DESC, p_initial_data_: ?*const D3D11_SUBRESOURCE_DATA, pp_texture1_d_: ?*?*ID3D11Texture1D) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateTexture1D(@as(*const ID3D11Device, @ptrCast(self)), p_desc_, p_initial_data_, pp_texture1_d_);
            }
            pub inline fn createTexture2D(self: *const T, p_desc_: ?*const D3D11_TEXTURE2D_DESC, p_initial_data_: ?*const D3D11_SUBRESOURCE_DATA, pp_texture2_d_: ?*?*ID3D11Texture2D) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateTexture2D(@as(*const ID3D11Device, @ptrCast(self)), p_desc_, p_initial_data_, pp_texture2_d_);
            }
            pub inline fn createTexture3D(self: *const T, p_desc_: ?*const D3D11_TEXTURE3D_DESC, p_initial_data_: ?*const D3D11_SUBRESOURCE_DATA, pp_texture3_d_: ?*?*ID3D11Texture3D) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateTexture3D(@as(*const ID3D11Device, @ptrCast(self)), p_desc_, p_initial_data_, pp_texture3_d_);
            }
            pub inline fn createShaderResourceView(self: *const T, p_resource_: ?*ID3D11Resource, p_desc_: ?*const D3D11_SHADER_RESOURCE_VIEW_DESC, pp_s_r_view_: ?*?*ID3D11ShaderResourceView) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateShaderResourceView(@as(*const ID3D11Device, @ptrCast(self)), p_resource_, p_desc_, pp_s_r_view_);
            }
            pub inline fn createUnorderedAccessView(self: *const T, p_resource_: ?*ID3D11Resource, p_desc_: ?*const D3D11_UNORDERED_ACCESS_VIEW_DESC, pp_u_a_view_: ?*?*ID3D11UnorderedAccessView) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateUnorderedAccessView(@as(*const ID3D11Device, @ptrCast(self)), p_resource_, p_desc_, pp_u_a_view_);
            }
            pub inline fn createRenderTargetView(self: *const T, p_resource_: ?*ID3D11Resource, p_desc_: ?*const D3D11_RENDER_TARGET_VIEW_DESC, pp_r_t_view_: ?*?*ID3D11RenderTargetView) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateRenderTargetView(@as(*const ID3D11Device, @ptrCast(self)), p_resource_, p_desc_, pp_r_t_view_);
            }
            pub inline fn createDepthStencilView(self: *const T, p_resource_: ?*ID3D11Resource, p_desc_: ?*const D3D11_DEPTH_STENCIL_VIEW_DESC, pp_depth_stencil_view_: ?*?*ID3D11DepthStencilView) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateDepthStencilView(@as(*const ID3D11Device, @ptrCast(self)), p_resource_, p_desc_, pp_depth_stencil_view_);
            }
            pub inline fn createInputLayout(self: *const T, p_input_element_descs_: [*]const D3D11_INPUT_ELEMENT_DESC, num_elements_: u32, p_shader_bytecode_with_input_signature_: [*]const u8, bytecode_length_: usize, pp_input_layout_: ?*?*ID3D11InputLayout) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateInputLayout(@as(*const ID3D11Device, @ptrCast(self)), p_input_element_descs_, num_elements_, p_shader_bytecode_with_input_signature_, bytecode_length_, pp_input_layout_);
            }
            pub inline fn createVertexShader(self: *const T, p_shader_bytecode_: [*]const u8, bytecode_length_: usize, p_class_linkage_: ?*ID3D11ClassLinkage, pp_vertex_shader_: ?*?*ID3D11VertexShader) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateVertexShader(@as(*const ID3D11Device, @ptrCast(self)), p_shader_bytecode_, bytecode_length_, p_class_linkage_, pp_vertex_shader_);
            }
            pub inline fn createGeometryShader(self: *const T, p_shader_bytecode_: [*]const u8, bytecode_length_: usize, p_class_linkage_: ?*ID3D11ClassLinkage, pp_geometry_shader_: ?*?*ID3D11GeometryShader) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateGeometryShader(@as(*const ID3D11Device, @ptrCast(self)), p_shader_bytecode_, bytecode_length_, p_class_linkage_, pp_geometry_shader_);
            }
            pub inline fn createGeometryShaderWithStreamOutput(self: *const T, p_shader_bytecode_: [*]const u8, bytecode_length_: usize, p_s_o_declaration_: ?[*]const D3D11_SO_DECLARATION_ENTRY, num_entries_: u32, p_buffer_strides_: ?[*]const u32, num_strides_: u32, rasterized_stream_: u32, p_class_linkage_: ?*ID3D11ClassLinkage, pp_geometry_shader_: ?*?*ID3D11GeometryShader) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateGeometryShaderWithStreamOutput(@as(*const ID3D11Device, @ptrCast(self)), p_shader_bytecode_, bytecode_length_, p_s_o_declaration_, num_entries_, p_buffer_strides_, num_strides_, rasterized_stream_, p_class_linkage_, pp_geometry_shader_);
            }
            pub inline fn createPixelShader(self: *const T, p_shader_bytecode_: [*]const u8, bytecode_length_: usize, p_class_linkage_: ?*ID3D11ClassLinkage, pp_pixel_shader_: ?*?*ID3D11PixelShader) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreatePixelShader(@as(*const ID3D11Device, @ptrCast(self)), p_shader_bytecode_, bytecode_length_, p_class_linkage_, pp_pixel_shader_);
            }
            pub inline fn createHullShader(self: *const T, p_shader_bytecode_: [*]const u8, bytecode_length_: usize, p_class_linkage_: ?*ID3D11ClassLinkage, pp_hull_shader_: ?*?*ID3D11HullShader) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateHullShader(@as(*const ID3D11Device, @ptrCast(self)), p_shader_bytecode_, bytecode_length_, p_class_linkage_, pp_hull_shader_);
            }
            pub inline fn createDomainShader(self: *const T, p_shader_bytecode_: [*]const u8, bytecode_length_: usize, p_class_linkage_: ?*ID3D11ClassLinkage, pp_domain_shader_: ?*?*ID3D11DomainShader) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateDomainShader(@as(*const ID3D11Device, @ptrCast(self)), p_shader_bytecode_, bytecode_length_, p_class_linkage_, pp_domain_shader_);
            }
            pub inline fn createComputeShader(self: *const T, p_shader_bytecode_: [*]const u8, bytecode_length_: usize, p_class_linkage_: ?*ID3D11ClassLinkage, pp_compute_shader_: ?*?*ID3D11ComputeShader) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateComputeShader(@as(*const ID3D11Device, @ptrCast(self)), p_shader_bytecode_, bytecode_length_, p_class_linkage_, pp_compute_shader_);
            }
            pub inline fn createClassLinkage(self: *const T, pp_linkage_: ?*?*ID3D11ClassLinkage) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateClassLinkage(@as(*const ID3D11Device, @ptrCast(self)), pp_linkage_);
            }
            pub inline fn createBlendState(self: *const T, p_blend_state_desc_: ?*const D3D11_BLEND_DESC, pp_blend_state_: ?*?*ID3D11BlendState) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateBlendState(@as(*const ID3D11Device, @ptrCast(self)), p_blend_state_desc_, pp_blend_state_);
            }
            pub inline fn createDepthStencilState(self: *const T, p_depth_stencil_desc_: ?*const D3D11_DEPTH_STENCIL_DESC, pp_depth_stencil_state_: ?*?*ID3D11DepthStencilState) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateDepthStencilState(@as(*const ID3D11Device, @ptrCast(self)), p_depth_stencil_desc_, pp_depth_stencil_state_);
            }
            pub inline fn createRasterizerState(self: *const T, p_rasterizer_desc_: ?*const D3D11_RASTERIZER_DESC, pp_rasterizer_state_: ?*?*ID3D11RasterizerState) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateRasterizerState(@as(*const ID3D11Device, @ptrCast(self)), p_rasterizer_desc_, pp_rasterizer_state_);
            }
            pub inline fn createSamplerState(self: *const T, p_sampler_desc_: ?*const D3D11_SAMPLER_DESC, pp_sampler_state_: ?*?*ID3D11SamplerState) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateSamplerState(@as(*const ID3D11Device, @ptrCast(self)), p_sampler_desc_, pp_sampler_state_);
            }
            pub inline fn createQuery(self: *const T, p_query_desc_: ?*const D3D11_QUERY_DESC, pp_query_: ?*?*ID3D11Query) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateQuery(@as(*const ID3D11Device, @ptrCast(self)), p_query_desc_, pp_query_);
            }
            pub inline fn createPredicate(self: *const T, p_predicate_desc_: ?*const D3D11_QUERY_DESC, pp_predicate_: ?*?*ID3D11Predicate) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreatePredicate(@as(*const ID3D11Device, @ptrCast(self)), p_predicate_desc_, pp_predicate_);
            }
            pub inline fn createCounter(self: *const T, p_counter_desc_: ?*const D3D11_COUNTER_DESC, pp_counter_: ?*?*ID3D11Counter) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateCounter(@as(*const ID3D11Device, @ptrCast(self)), p_counter_desc_, pp_counter_);
            }
            pub inline fn createDeferredContext(self: *const T, context_flags_: u32, pp_deferred_context_: ?*?*ID3D11DeviceContext) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CreateDeferredContext(@as(*const ID3D11Device, @ptrCast(self)), context_flags_, pp_deferred_context_);
            }
            pub inline fn openSharedResource(self: *const T, h_resource_: ?HANDLE, returned_interface_: ?*const Guid, pp_resource_: ?*?*anyopaque) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).OpenSharedResource(@as(*const ID3D11Device, @ptrCast(self)), h_resource_, returned_interface_, pp_resource_);
            }
            pub inline fn checkFormatSupport(self: *const T, format_: DXGI_FORMAT, p_format_support_: ?*u32) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CheckFormatSupport(@as(*const ID3D11Device, @ptrCast(self)), format_, p_format_support_);
            }
            pub inline fn checkMultisampleQualityLevels(self: *const T, format_: DXGI_FORMAT, sample_count_: u32, p_num_quality_levels_: ?*u32) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CheckMultisampleQualityLevels(@as(*const ID3D11Device, @ptrCast(self)), format_, sample_count_, p_num_quality_levels_);
            }
            pub inline fn checkCounterInfo(self: *const T, p_counter_info_: ?*D3D11_COUNTER_INFO) void {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CheckCounterInfo(@as(*const ID3D11Device, @ptrCast(self)), p_counter_info_);
            }
            pub inline fn checkCounter(self: *const T, p_desc_: ?*const D3D11_COUNTER_DESC, p_type_: ?*D3D11_COUNTER_TYPE, p_active_counters_: ?*u32, sz_name_: ?[*:0]u8, p_name_length_: ?*u32, sz_units_: ?[*:0]u8, p_units_length_: ?*u32, sz_description_: ?[*:0]u8, p_description_length_: ?*u32) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CheckCounter(@as(*const ID3D11Device, @ptrCast(self)), p_desc_, p_type_, p_active_counters_, sz_name_, p_name_length_, sz_units_, p_units_length_, sz_description_, p_description_length_);
            }
            pub inline fn checkFeatureSupport(self: *const T, feature_: D3D11_FEATURE, p_feature_support_data_: ?*anyopaque, feature_support_data_size_: u32) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).CheckFeatureSupport(@as(*const ID3D11Device, @ptrCast(self)), feature_, p_feature_support_data_, feature_support_data_size_);
            }
            pub inline fn getPrivateData(self: *const T, guid_: ?*const Guid, p_data_size_: ?*u32, p_data_: ?*anyopaque) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).GetPrivateData(@as(*const ID3D11Device, @ptrCast(self)), guid_, p_data_size_, p_data_);
            }
            pub inline fn setPrivateData(self: *const T, guid_: ?*const Guid, data_size_: u32, p_data_: ?*const anyopaque) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).SetPrivateData(@as(*const ID3D11Device, @ptrCast(self)), guid_, data_size_, p_data_);
            }
            pub inline fn setPrivateDataInterface(self: *const T, guid_: ?*const Guid, p_data_: ?*IUnknown) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).SetPrivateDataInterface(@as(*const ID3D11Device, @ptrCast(self)), guid_, p_data_);
            }
            pub inline fn getFeatureLevel(self: *const T) D3D_FEATURE_LEVEL {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).GetFeatureLevel(@as(*const ID3D11Device, @ptrCast(self)));
            }
            pub inline fn getCreationFlags(self: *const T) u32 {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).GetCreationFlags(@as(*const ID3D11Device, @ptrCast(self)));
            }
            pub inline fn getDeviceRemovedReason(self: *const T) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).GetDeviceRemovedReason(@as(*const ID3D11Device, @ptrCast(self)));
            }
            pub inline fn getImmediateContext(self: *const T, pp_immediate_context_: ?*?*ID3D11DeviceContext) void {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).GetImmediateContext(@as(*const ID3D11Device, @ptrCast(self)), pp_immediate_context_);
            }
            pub inline fn setExceptionMode(self: *const T, raise_flags_: u32) HRESULT {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).SetExceptionMode(@as(*const ID3D11Device, @ptrCast(self)), raise_flags_);
            }
            pub inline fn getExceptionMode(self: *const T) u32 {
                return @as(*const ID3D11Device.VTable, @ptrCast(self.vtable)).GetExceptionMode(@as(*const ID3D11Device, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_CREATE_DEVICE_FLAG = enum(u32) {
    SINGLETHREADED = 1,
    DEBUG = 2,
    SWITCH_TO_REF = 4,
    PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 8,
    BGRA_SUPPORT = 32,
    DEBUGGABLE = 64,
    PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 128,
    DISABLE_GPU_TIMEOUT = 256,
    VIDEO_SUPPORT = 2048,
    _,
    pub fn initFlags(o: struct {
        SINGLETHREADED: u1 = 0,
        DEBUG: u1 = 0,
        SWITCH_TO_REF: u1 = 0,
        PREVENT_INTERNAL_THREADING_OPTIMIZATIONS: u1 = 0,
        BGRA_SUPPORT: u1 = 0,
        DEBUGGABLE: u1 = 0,
        PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY: u1 = 0,
        DISABLE_GPU_TIMEOUT: u1 = 0,
        VIDEO_SUPPORT: u1 = 0,
    }) D3D11_CREATE_DEVICE_FLAG {
        return @as(D3D11_CREATE_DEVICE_FLAG, @enumFromInt((if (o.SINGLETHREADED == 1) @intFromEnum(D3D11_CREATE_DEVICE_FLAG.SINGLETHREADED) else 0) | (if (o.DEBUG == 1) @intFromEnum(D3D11_CREATE_DEVICE_FLAG.DEBUG) else 0) | (if (o.SWITCH_TO_REF == 1) @intFromEnum(D3D11_CREATE_DEVICE_FLAG.SWITCH_TO_REF) else 0) | (if (o.PREVENT_INTERNAL_THREADING_OPTIMIZATIONS == 1) @intFromEnum(D3D11_CREATE_DEVICE_FLAG.PREVENT_INTERNAL_THREADING_OPTIMIZATIONS) else 0) | (if (o.BGRA_SUPPORT == 1) @intFromEnum(D3D11_CREATE_DEVICE_FLAG.BGRA_SUPPORT) else 0) | (if (o.DEBUGGABLE == 1) @intFromEnum(D3D11_CREATE_DEVICE_FLAG.DEBUGGABLE) else 0) | (if (o.PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY == 1) @intFromEnum(D3D11_CREATE_DEVICE_FLAG.PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY) else 0) | (if (o.DISABLE_GPU_TIMEOUT == 1) @intFromEnum(D3D11_CREATE_DEVICE_FLAG.DISABLE_GPU_TIMEOUT) else 0) | (if (o.VIDEO_SUPPORT == 1) @intFromEnum(D3D11_CREATE_DEVICE_FLAG.VIDEO_SUPPORT) else 0)));
    }
};
pub const D3D11_CREATE_DEVICE_SINGLETHREADED = D3D11_CREATE_DEVICE_FLAG.SINGLETHREADED;
pub const D3D11_CREATE_DEVICE_DEBUG = D3D11_CREATE_DEVICE_FLAG.DEBUG;
pub const D3D11_CREATE_DEVICE_SWITCH_TO_REF = D3D11_CREATE_DEVICE_FLAG.SWITCH_TO_REF;
pub const D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = D3D11_CREATE_DEVICE_FLAG.PREVENT_INTERNAL_THREADING_OPTIMIZATIONS;
pub const D3D11_CREATE_DEVICE_BGRA_SUPPORT = D3D11_CREATE_DEVICE_FLAG.BGRA_SUPPORT;
pub const D3D11_CREATE_DEVICE_DEBUGGABLE = D3D11_CREATE_DEVICE_FLAG.DEBUGGABLE;
pub const D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = D3D11_CREATE_DEVICE_FLAG.PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY;
pub const D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT = D3D11_CREATE_DEVICE_FLAG.DISABLE_GPU_TIMEOUT;
pub const D3D11_CREATE_DEVICE_VIDEO_SUPPORT = D3D11_CREATE_DEVICE_FLAG.VIDEO_SUPPORT;

pub const D3D11_RLDO_FLAGS = enum(i32) {
    SUMMARY = 1,
    DETAIL = 2,
    IGNORE_INTERNAL = 4,
};
pub const D3D11_RLDO_SUMMARY = D3D11_RLDO_FLAGS.SUMMARY;
pub const D3D11_RLDO_DETAIL = D3D11_RLDO_FLAGS.DETAIL;
pub const D3D11_RLDO_IGNORE_INTERNAL = D3D11_RLDO_FLAGS.IGNORE_INTERNAL;

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11Debug_Value = Guid.initString("79cf2233-7536-4948-9d36-1e4692dc5760");
pub const IID_ID3D11Debug = &IID_ID3D11Debug_Value;
pub const ID3D11Debug = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFeatureMask: *const fn (
            self: *const ID3D11Debug,
            mask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFeatureMask: *const fn (
            self: *const ID3D11Debug,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        SetPresentPerRenderOpDelay: *const fn (
            self: *const ID3D11Debug,
            milliseconds: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPresentPerRenderOpDelay: *const fn (
            self: *const ID3D11Debug,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        SetSwapChain: *const fn (
            self: *const ID3D11Debug,
            p_swap_chain: ?*IDXGISwapChain,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSwapChain: *const fn (
            self: *const ID3D11Debug,
            pp_swap_chain: ?*?*IDXGISwapChain,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ValidateContext: *const fn (
            self: *const ID3D11Debug,
            p_context: ?*ID3D11DeviceContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReportLiveDeviceObjects: *const fn (
            self: *const ID3D11Debug,
            flags: D3D11_RLDO_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ValidateContextForDispatch: *const fn (
            self: *const ID3D11Debug,
            p_context: ?*ID3D11DeviceContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setFeatureMask(self: *const T, mask_: u32) HRESULT {
                return @as(*const ID3D11Debug.VTable, @ptrCast(self.vtable)).SetFeatureMask(@as(*const ID3D11Debug, @ptrCast(self)), mask_);
            }
            pub inline fn getFeatureMask(self: *const T) u32 {
                return @as(*const ID3D11Debug.VTable, @ptrCast(self.vtable)).GetFeatureMask(@as(*const ID3D11Debug, @ptrCast(self)));
            }
            pub inline fn setPresentPerRenderOpDelay(self: *const T, milliseconds_: u32) HRESULT {
                return @as(*const ID3D11Debug.VTable, @ptrCast(self.vtable)).SetPresentPerRenderOpDelay(@as(*const ID3D11Debug, @ptrCast(self)), milliseconds_);
            }
            pub inline fn getPresentPerRenderOpDelay(self: *const T) u32 {
                return @as(*const ID3D11Debug.VTable, @ptrCast(self.vtable)).GetPresentPerRenderOpDelay(@as(*const ID3D11Debug, @ptrCast(self)));
            }
            pub inline fn setSwapChain(self: *const T, p_swap_chain_: ?*IDXGISwapChain) HRESULT {
                return @as(*const ID3D11Debug.VTable, @ptrCast(self.vtable)).SetSwapChain(@as(*const ID3D11Debug, @ptrCast(self)), p_swap_chain_);
            }
            pub inline fn getSwapChain(self: *const T, pp_swap_chain_: ?*?*IDXGISwapChain) HRESULT {
                return @as(*const ID3D11Debug.VTable, @ptrCast(self.vtable)).GetSwapChain(@as(*const ID3D11Debug, @ptrCast(self)), pp_swap_chain_);
            }
            pub inline fn validateContext(self: *const T, p_context_: ?*ID3D11DeviceContext) HRESULT {
                return @as(*const ID3D11Debug.VTable, @ptrCast(self.vtable)).ValidateContext(@as(*const ID3D11Debug, @ptrCast(self)), p_context_);
            }
            pub inline fn reportLiveDeviceObjects(self: *const T, flags_: D3D11_RLDO_FLAGS) HRESULT {
                return @as(*const ID3D11Debug.VTable, @ptrCast(self.vtable)).ReportLiveDeviceObjects(@as(*const ID3D11Debug, @ptrCast(self)), flags_);
            }
            pub inline fn validateContextForDispatch(self: *const T, p_context_: ?*ID3D11DeviceContext) HRESULT {
                return @as(*const ID3D11Debug.VTable, @ptrCast(self.vtable)).ValidateContextForDispatch(@as(*const ID3D11Debug, @ptrCast(self)), p_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11SwitchToRef_Value = Guid.initString("1ef337e3-58e7-4f83-a692-db221f5ed47e");
pub const IID_ID3D11SwitchToRef = &IID_ID3D11SwitchToRef_Value;
pub const ID3D11SwitchToRef = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetUseRef: *const fn (
            self: *const ID3D11SwitchToRef,
            use_ref: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetUseRef: *const fn (
            self: *const ID3D11SwitchToRef,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setUseRef(self: *const T, use_ref_: BOOL) BOOL {
                return @as(*const ID3D11SwitchToRef.VTable, @ptrCast(self.vtable)).SetUseRef(@as(*const ID3D11SwitchToRef, @ptrCast(self)), use_ref_);
            }
            pub inline fn getUseRef(self: *const T) BOOL {
                return @as(*const ID3D11SwitchToRef.VTable, @ptrCast(self.vtable)).GetUseRef(@as(*const ID3D11SwitchToRef, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_SHADER_TRACKING_RESOURCE_TYPE = enum(i32) {
    NONE = 0,
    UAV_DEVICEMEMORY = 1,
    NON_UAV_DEVICEMEMORY = 2,
    ALL_DEVICEMEMORY = 3,
    GROUPSHARED_MEMORY = 4,
    ALL_SHARED_MEMORY = 5,
    GROUPSHARED_NON_UAV = 6,
    ALL = 7,
};
pub const D3D11_SHADER_TRACKING_RESOURCE_TYPE_NONE = D3D11_SHADER_TRACKING_RESOURCE_TYPE.NONE;
pub const D3D11_SHADER_TRACKING_RESOURCE_TYPE_UAV_DEVICEMEMORY = D3D11_SHADER_TRACKING_RESOURCE_TYPE.UAV_DEVICEMEMORY;
pub const D3D11_SHADER_TRACKING_RESOURCE_TYPE_NON_UAV_DEVICEMEMORY = D3D11_SHADER_TRACKING_RESOURCE_TYPE.NON_UAV_DEVICEMEMORY;
pub const D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL_DEVICEMEMORY = D3D11_SHADER_TRACKING_RESOURCE_TYPE.ALL_DEVICEMEMORY;
pub const D3D11_SHADER_TRACKING_RESOURCE_TYPE_GROUPSHARED_MEMORY = D3D11_SHADER_TRACKING_RESOURCE_TYPE.GROUPSHARED_MEMORY;
pub const D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL_SHARED_MEMORY = D3D11_SHADER_TRACKING_RESOURCE_TYPE.ALL_SHARED_MEMORY;
pub const D3D11_SHADER_TRACKING_RESOURCE_TYPE_GROUPSHARED_NON_UAV = D3D11_SHADER_TRACKING_RESOURCE_TYPE.GROUPSHARED_NON_UAV;
pub const D3D11_SHADER_TRACKING_RESOURCE_TYPE_ALL = D3D11_SHADER_TRACKING_RESOURCE_TYPE.ALL;

pub const D3D11_SHADER_TRACKING_OPTIONS = enum(i32) {
    IGNORE = 0,
    TRACK_UNINITIALIZED = 1,
    TRACK_RAW = 2,
    TRACK_WAR = 4,
    TRACK_WAW = 8,
    ALLOW_SAME = 16,
    TRACK_ATOMIC_CONSISTENCY = 32,
    TRACK_RAW_ACROSS_THREADGROUPS = 64,
    TRACK_WAR_ACROSS_THREADGROUPS = 128,
    TRACK_WAW_ACROSS_THREADGROUPS = 256,
    TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS = 512,
    UAV_SPECIFIC_FLAGS = 960,
    ALL_HAZARDS = 1006,
    ALL_HAZARDS_ALLOWING_SAME = 1022,
    ALL_OPTIONS = 1023,
};
pub const D3D11_SHADER_TRACKING_OPTION_IGNORE = D3D11_SHADER_TRACKING_OPTIONS.IGNORE;
pub const D3D11_SHADER_TRACKING_OPTION_TRACK_UNINITIALIZED = D3D11_SHADER_TRACKING_OPTIONS.TRACK_UNINITIALIZED;
pub const D3D11_SHADER_TRACKING_OPTION_TRACK_RAW = D3D11_SHADER_TRACKING_OPTIONS.TRACK_RAW;
pub const D3D11_SHADER_TRACKING_OPTION_TRACK_WAR = D3D11_SHADER_TRACKING_OPTIONS.TRACK_WAR;
pub const D3D11_SHADER_TRACKING_OPTION_TRACK_WAW = D3D11_SHADER_TRACKING_OPTIONS.TRACK_WAW;
pub const D3D11_SHADER_TRACKING_OPTION_ALLOW_SAME = D3D11_SHADER_TRACKING_OPTIONS.ALLOW_SAME;
pub const D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY = D3D11_SHADER_TRACKING_OPTIONS.TRACK_ATOMIC_CONSISTENCY;
pub const D3D11_SHADER_TRACKING_OPTION_TRACK_RAW_ACROSS_THREADGROUPS = D3D11_SHADER_TRACKING_OPTIONS.TRACK_RAW_ACROSS_THREADGROUPS;
pub const D3D11_SHADER_TRACKING_OPTION_TRACK_WAR_ACROSS_THREADGROUPS = D3D11_SHADER_TRACKING_OPTIONS.TRACK_WAR_ACROSS_THREADGROUPS;
pub const D3D11_SHADER_TRACKING_OPTION_TRACK_WAW_ACROSS_THREADGROUPS = D3D11_SHADER_TRACKING_OPTIONS.TRACK_WAW_ACROSS_THREADGROUPS;
pub const D3D11_SHADER_TRACKING_OPTION_TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS = D3D11_SHADER_TRACKING_OPTIONS.TRACK_ATOMIC_CONSISTENCY_ACROSS_THREADGROUPS;
pub const D3D11_SHADER_TRACKING_OPTION_UAV_SPECIFIC_FLAGS = D3D11_SHADER_TRACKING_OPTIONS.UAV_SPECIFIC_FLAGS;
pub const D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS = D3D11_SHADER_TRACKING_OPTIONS.ALL_HAZARDS;
pub const D3D11_SHADER_TRACKING_OPTION_ALL_HAZARDS_ALLOWING_SAME = D3D11_SHADER_TRACKING_OPTIONS.ALL_HAZARDS_ALLOWING_SAME;
pub const D3D11_SHADER_TRACKING_OPTION_ALL_OPTIONS = D3D11_SHADER_TRACKING_OPTIONS.ALL_OPTIONS;

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3D11TracingDevice_Value = Guid.initString("1911c771-1587-413e-a7e0-fb26c3de0268");
pub const IID_ID3D11TracingDevice = &IID_ID3D11TracingDevice_Value;
pub const ID3D11TracingDevice = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetShaderTrackingOptionsByType: *const fn (
            self: *const ID3D11TracingDevice,
            resource_type_flags: u32,
            options: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetShaderTrackingOptions: *const fn (
            self: *const ID3D11TracingDevice,
            p_shader: ?*IUnknown,
            options: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setShaderTrackingOptionsByType(self: *const T, resource_type_flags_: u32, options_: u32) HRESULT {
                return @as(*const ID3D11TracingDevice.VTable, @ptrCast(self.vtable)).SetShaderTrackingOptionsByType(@as(*const ID3D11TracingDevice, @ptrCast(self)), resource_type_flags_, options_);
            }
            pub inline fn setShaderTrackingOptions(self: *const T, p_shader_: ?*IUnknown, options_: u32) HRESULT {
                return @as(*const ID3D11TracingDevice.VTable, @ptrCast(self.vtable)).SetShaderTrackingOptions(@as(*const ID3D11TracingDevice, @ptrCast(self)), p_shader_, options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3D11RefTrackingOptions_Value = Guid.initString("193dacdf-0db2-4c05-a55c-ef06cac56fd9");
pub const IID_ID3D11RefTrackingOptions = &IID_ID3D11RefTrackingOptions_Value;
pub const ID3D11RefTrackingOptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetTrackingOptions: *const fn (
            self: *const ID3D11RefTrackingOptions,
            u_options: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setTrackingOptions(self: *const T, u_options_: u32) HRESULT {
                return @as(*const ID3D11RefTrackingOptions.VTable, @ptrCast(self.vtable)).SetTrackingOptions(@as(*const ID3D11RefTrackingOptions, @ptrCast(self)), u_options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3D11RefDefaultTrackingOptions_Value = Guid.initString("03916615-c644-418c-9bf4-75db5be63ca0");
pub const IID_ID3D11RefDefaultTrackingOptions = &IID_ID3D11RefDefaultTrackingOptions_Value;
pub const ID3D11RefDefaultTrackingOptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetTrackingOptions: *const fn (
            self: *const ID3D11RefDefaultTrackingOptions,
            resource_type_flags: u32,
            options: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setTrackingOptions(self: *const T, resource_type_flags_: u32, options_: u32) HRESULT {
                return @as(*const ID3D11RefDefaultTrackingOptions.VTable, @ptrCast(self.vtable)).SetTrackingOptions(@as(*const ID3D11RefDefaultTrackingOptions, @ptrCast(self)), resource_type_flags_, options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_MESSAGE_CATEGORY = enum(i32) {
    APPLICATION_DEFINED = 0,
    MISCELLANEOUS = 1,
    INITIALIZATION = 2,
    CLEANUP = 3,
    COMPILATION = 4,
    STATE_CREATION = 5,
    STATE_SETTING = 6,
    STATE_GETTING = 7,
    RESOURCE_MANIPULATION = 8,
    EXECUTION = 9,
    SHADER = 10,
};
pub const D3D11_MESSAGE_CATEGORY_APPLICATION_DEFINED = D3D11_MESSAGE_CATEGORY.APPLICATION_DEFINED;
pub const D3D11_MESSAGE_CATEGORY_MISCELLANEOUS = D3D11_MESSAGE_CATEGORY.MISCELLANEOUS;
pub const D3D11_MESSAGE_CATEGORY_INITIALIZATION = D3D11_MESSAGE_CATEGORY.INITIALIZATION;
pub const D3D11_MESSAGE_CATEGORY_CLEANUP = D3D11_MESSAGE_CATEGORY.CLEANUP;
pub const D3D11_MESSAGE_CATEGORY_COMPILATION = D3D11_MESSAGE_CATEGORY.COMPILATION;
pub const D3D11_MESSAGE_CATEGORY_STATE_CREATION = D3D11_MESSAGE_CATEGORY.STATE_CREATION;
pub const D3D11_MESSAGE_CATEGORY_STATE_SETTING = D3D11_MESSAGE_CATEGORY.STATE_SETTING;
pub const D3D11_MESSAGE_CATEGORY_STATE_GETTING = D3D11_MESSAGE_CATEGORY.STATE_GETTING;
pub const D3D11_MESSAGE_CATEGORY_RESOURCE_MANIPULATION = D3D11_MESSAGE_CATEGORY.RESOURCE_MANIPULATION;
pub const D3D11_MESSAGE_CATEGORY_EXECUTION = D3D11_MESSAGE_CATEGORY.EXECUTION;
pub const D3D11_MESSAGE_CATEGORY_SHADER = D3D11_MESSAGE_CATEGORY.SHADER;

pub const D3D11_MESSAGE_SEVERITY = enum(i32) {
    CORRUPTION = 0,
    ERROR = 1,
    WARNING = 2,
    INFO = 3,
    MESSAGE = 4,
};
pub const D3D11_MESSAGE_SEVERITY_CORRUPTION = D3D11_MESSAGE_SEVERITY.CORRUPTION;
pub const D3D11_MESSAGE_SEVERITY_ERROR = D3D11_MESSAGE_SEVERITY.ERROR;
pub const D3D11_MESSAGE_SEVERITY_WARNING = D3D11_MESSAGE_SEVERITY.WARNING;
pub const D3D11_MESSAGE_SEVERITY_INFO = D3D11_MESSAGE_SEVERITY.INFO;
pub const D3D11_MESSAGE_SEVERITY_MESSAGE = D3D11_MESSAGE_SEVERITY.MESSAGE;

pub const D3D11_MESSAGE_ID = enum(i32) {
    UNKNOWN = 0,
    DEVICE_IASETVERTEXBUFFERS_HAZARD = 1,
    DEVICE_IASETINDEXBUFFER_HAZARD = 2,
    DEVICE_VSSETSHADERRESOURCES_HAZARD = 3,
    DEVICE_VSSETCONSTANTBUFFERS_HAZARD = 4,
    DEVICE_GSSETSHADERRESOURCES_HAZARD = 5,
    DEVICE_GSSETCONSTANTBUFFERS_HAZARD = 6,
    DEVICE_PSSETSHADERRESOURCES_HAZARD = 7,
    DEVICE_PSSETCONSTANTBUFFERS_HAZARD = 8,
    DEVICE_OMSETRENDERTARGETS_HAZARD = 9,
    DEVICE_SOSETTARGETS_HAZARD = 10,
    STRING_FROM_APPLICATION = 11,
    CORRUPTED_THIS = 12,
    CORRUPTED_PARAMETER1 = 13,
    CORRUPTED_PARAMETER2 = 14,
    CORRUPTED_PARAMETER3 = 15,
    CORRUPTED_PARAMETER4 = 16,
    CORRUPTED_PARAMETER5 = 17,
    CORRUPTED_PARAMETER6 = 18,
    CORRUPTED_PARAMETER7 = 19,
    CORRUPTED_PARAMETER8 = 20,
    CORRUPTED_PARAMETER9 = 21,
    CORRUPTED_PARAMETER10 = 22,
    CORRUPTED_PARAMETER11 = 23,
    CORRUPTED_PARAMETER12 = 24,
    CORRUPTED_PARAMETER13 = 25,
    CORRUPTED_PARAMETER14 = 26,
    CORRUPTED_PARAMETER15 = 27,
    CORRUPTED_MULTITHREADING = 28,
    MESSAGE_REPORTING_OUTOFMEMORY = 29,
    IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = 30,
    IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = 31,
    IASETINDEXBUFFER_UNBINDDELETINGOBJECT = 32,
    VSSETSHADER_UNBINDDELETINGOBJECT = 33,
    VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 34,
    VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 35,
    VSSETSAMPLERS_UNBINDDELETINGOBJECT = 36,
    GSSETSHADER_UNBINDDELETINGOBJECT = 37,
    GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 38,
    GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 39,
    GSSETSAMPLERS_UNBINDDELETINGOBJECT = 40,
    SOSETTARGETS_UNBINDDELETINGOBJECT = 41,
    PSSETSHADER_UNBINDDELETINGOBJECT = 42,
    PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 43,
    PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 44,
    PSSETSAMPLERS_UNBINDDELETINGOBJECT = 45,
    RSSETSTATE_UNBINDDELETINGOBJECT = 46,
    OMSETBLENDSTATE_UNBINDDELETINGOBJECT = 47,
    OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = 48,
    OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = 49,
    SETPREDICATION_UNBINDDELETINGOBJECT = 50,
    GETPRIVATEDATA_MOREDATA = 51,
    SETPRIVATEDATA_INVALIDFREEDATA = 52,
    SETPRIVATEDATA_INVALIDIUNKNOWN = 53,
    SETPRIVATEDATA_INVALIDFLAGS = 54,
    SETPRIVATEDATA_CHANGINGPARAMS = 55,
    SETPRIVATEDATA_OUTOFMEMORY = 56,
    CREATEBUFFER_UNRECOGNIZEDFORMAT = 57,
    CREATEBUFFER_INVALIDSAMPLES = 58,
    CREATEBUFFER_UNRECOGNIZEDUSAGE = 59,
    CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = 60,
    CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = 61,
    CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = 62,
    CREATEBUFFER_INVALIDCPUACCESSFLAGS = 63,
    CREATEBUFFER_INVALIDBINDFLAGS = 64,
    CREATEBUFFER_INVALIDINITIALDATA = 65,
    CREATEBUFFER_INVALIDDIMENSIONS = 66,
    CREATEBUFFER_INVALIDMIPLEVELS = 67,
    CREATEBUFFER_INVALIDMISCFLAGS = 68,
    CREATEBUFFER_INVALIDARG_RETURN = 69,
    CREATEBUFFER_OUTOFMEMORY_RETURN = 70,
    CREATEBUFFER_NULLDESC = 71,
    CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = 72,
    CREATEBUFFER_LARGEALLOCATION = 73,
    CREATETEXTURE1D_UNRECOGNIZEDFORMAT = 74,
    CREATETEXTURE1D_UNSUPPORTEDFORMAT = 75,
    CREATETEXTURE1D_INVALIDSAMPLES = 76,
    CREATETEXTURE1D_UNRECOGNIZEDUSAGE = 77,
    CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = 78,
    CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = 79,
    CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = 80,
    CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = 81,
    CREATETEXTURE1D_INVALIDBINDFLAGS = 82,
    CREATETEXTURE1D_INVALIDINITIALDATA = 83,
    CREATETEXTURE1D_INVALIDDIMENSIONS = 84,
    CREATETEXTURE1D_INVALIDMIPLEVELS = 85,
    CREATETEXTURE1D_INVALIDMISCFLAGS = 86,
    CREATETEXTURE1D_INVALIDARG_RETURN = 87,
    CREATETEXTURE1D_OUTOFMEMORY_RETURN = 88,
    CREATETEXTURE1D_NULLDESC = 89,
    CREATETEXTURE1D_LARGEALLOCATION = 90,
    CREATETEXTURE2D_UNRECOGNIZEDFORMAT = 91,
    CREATETEXTURE2D_UNSUPPORTEDFORMAT = 92,
    CREATETEXTURE2D_INVALIDSAMPLES = 93,
    CREATETEXTURE2D_UNRECOGNIZEDUSAGE = 94,
    CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = 95,
    CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = 96,
    CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = 97,
    CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = 98,
    CREATETEXTURE2D_INVALIDBINDFLAGS = 99,
    CREATETEXTURE2D_INVALIDINITIALDATA = 100,
    CREATETEXTURE2D_INVALIDDIMENSIONS = 101,
    CREATETEXTURE2D_INVALIDMIPLEVELS = 102,
    CREATETEXTURE2D_INVALIDMISCFLAGS = 103,
    CREATETEXTURE2D_INVALIDARG_RETURN = 104,
    CREATETEXTURE2D_OUTOFMEMORY_RETURN = 105,
    CREATETEXTURE2D_NULLDESC = 106,
    CREATETEXTURE2D_LARGEALLOCATION = 107,
    CREATETEXTURE3D_UNRECOGNIZEDFORMAT = 108,
    CREATETEXTURE3D_UNSUPPORTEDFORMAT = 109,
    CREATETEXTURE3D_INVALIDSAMPLES = 110,
    CREATETEXTURE3D_UNRECOGNIZEDUSAGE = 111,
    CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = 112,
    CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = 113,
    CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = 114,
    CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = 115,
    CREATETEXTURE3D_INVALIDBINDFLAGS = 116,
    CREATETEXTURE3D_INVALIDINITIALDATA = 117,
    CREATETEXTURE3D_INVALIDDIMENSIONS = 118,
    CREATETEXTURE3D_INVALIDMIPLEVELS = 119,
    CREATETEXTURE3D_INVALIDMISCFLAGS = 120,
    CREATETEXTURE3D_INVALIDARG_RETURN = 121,
    CREATETEXTURE3D_OUTOFMEMORY_RETURN = 122,
    CREATETEXTURE3D_NULLDESC = 123,
    CREATETEXTURE3D_LARGEALLOCATION = 124,
    CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = 125,
    CREATESHADERRESOURCEVIEW_INVALIDDESC = 126,
    CREATESHADERRESOURCEVIEW_INVALIDFORMAT = 127,
    CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = 128,
    CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = 129,
    CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = 130,
    CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = 131,
    CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = 132,
    CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = 133,
    CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = 134,
    CREATERENDERTARGETVIEW_INVALIDDESC = 135,
    CREATERENDERTARGETVIEW_INVALIDFORMAT = 136,
    CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = 137,
    CREATERENDERTARGETVIEW_INVALIDRESOURCE = 138,
    CREATERENDERTARGETVIEW_TOOMANYOBJECTS = 139,
    CREATERENDERTARGETVIEW_INVALIDARG_RETURN = 140,
    CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = 141,
    CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = 142,
    CREATEDEPTHSTENCILVIEW_INVALIDDESC = 143,
    CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = 144,
    CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = 145,
    CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = 146,
    CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = 147,
    CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = 148,
    CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = 149,
    CREATEINPUTLAYOUT_OUTOFMEMORY = 150,
    CREATEINPUTLAYOUT_TOOMANYELEMENTS = 151,
    CREATEINPUTLAYOUT_INVALIDFORMAT = 152,
    CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = 153,
    CREATEINPUTLAYOUT_INVALIDSLOT = 154,
    CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = 155,
    CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = 156,
    CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = 157,
    CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = 158,
    CREATEINPUTLAYOUT_INVALIDALIGNMENT = 159,
    CREATEINPUTLAYOUT_DUPLICATESEMANTIC = 160,
    CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = 161,
    CREATEINPUTLAYOUT_NULLSEMANTIC = 162,
    CREATEINPUTLAYOUT_MISSINGELEMENT = 163,
    CREATEINPUTLAYOUT_NULLDESC = 164,
    CREATEVERTEXSHADER_OUTOFMEMORY = 165,
    CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = 166,
    CREATEVERTEXSHADER_INVALIDSHADERTYPE = 167,
    CREATEGEOMETRYSHADER_OUTOFMEMORY = 168,
    CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = 169,
    CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = 170,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = 171,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = 172,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = 173,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = 174,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = 175,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = 176,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = 177,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = 178,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = 179,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = 180,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = 181,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = 182,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = 183,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = 184,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = 185,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = 186,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = 187,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = 188,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = 189,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = 190,
    CREATEPIXELSHADER_OUTOFMEMORY = 191,
    CREATEPIXELSHADER_INVALIDSHADERBYTECODE = 192,
    CREATEPIXELSHADER_INVALIDSHADERTYPE = 193,
    CREATERASTERIZERSTATE_INVALIDFILLMODE = 194,
    CREATERASTERIZERSTATE_INVALIDCULLMODE = 195,
    CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = 196,
    CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = 197,
    CREATERASTERIZERSTATE_TOOMANYOBJECTS = 198,
    CREATERASTERIZERSTATE_NULLDESC = 199,
    CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = 200,
    CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = 201,
    CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = 202,
    CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = 203,
    CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = 204,
    CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = 205,
    CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = 206,
    CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = 207,
    CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = 208,
    CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = 209,
    CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = 210,
    CREATEDEPTHSTENCILSTATE_NULLDESC = 211,
    CREATEBLENDSTATE_INVALIDSRCBLEND = 212,
    CREATEBLENDSTATE_INVALIDDESTBLEND = 213,
    CREATEBLENDSTATE_INVALIDBLENDOP = 214,
    CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = 215,
    CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = 216,
    CREATEBLENDSTATE_INVALIDBLENDOPALPHA = 217,
    CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = 218,
    CREATEBLENDSTATE_TOOMANYOBJECTS = 219,
    CREATEBLENDSTATE_NULLDESC = 220,
    CREATESAMPLERSTATE_INVALIDFILTER = 221,
    CREATESAMPLERSTATE_INVALIDADDRESSU = 222,
    CREATESAMPLERSTATE_INVALIDADDRESSV = 223,
    CREATESAMPLERSTATE_INVALIDADDRESSW = 224,
    CREATESAMPLERSTATE_INVALIDMIPLODBIAS = 225,
    CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = 226,
    CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = 227,
    CREATESAMPLERSTATE_INVALIDMINLOD = 228,
    CREATESAMPLERSTATE_INVALIDMAXLOD = 229,
    CREATESAMPLERSTATE_TOOMANYOBJECTS = 230,
    CREATESAMPLERSTATE_NULLDESC = 231,
    CREATEQUERYORPREDICATE_INVALIDQUERY = 232,
    CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = 233,
    CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = 234,
    CREATEQUERYORPREDICATE_NULLDESC = 235,
    DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = 236,
    DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = 237,
    IASETVERTEXBUFFERS_INVALIDBUFFER = 238,
    DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = 239,
    DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = 240,
    IASETINDEXBUFFER_INVALIDBUFFER = 241,
    DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = 242,
    DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = 243,
    DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = 244,
    DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = 245,
    VSSETCONSTANTBUFFERS_INVALIDBUFFER = 246,
    DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 247,
    DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = 248,
    DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = 249,
    GSSETCONSTANTBUFFERS_INVALIDBUFFER = 250,
    DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 251,
    DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = 252,
    SOSETTARGETS_INVALIDBUFFER = 253,
    DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = 254,
    DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = 255,
    PSSETCONSTANTBUFFERS_INVALIDBUFFER = 256,
    DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 257,
    DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = 258,
    DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = 259,
    DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = 260,
    CLEARRENDERTARGETVIEW_DENORMFLUSH = 261,
    CLEARDEPTHSTENCILVIEW_DENORMFLUSH = 262,
    CLEARDEPTHSTENCILVIEW_INVALID = 263,
    DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = 264,
    DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = 265,
    DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 266,
    DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = 267,
    DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = 268,
    DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 269,
    DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = 270,
    DEVICE_SOGETTARGETS_BUFFERS_EMPTY = 271,
    DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = 272,
    DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 273,
    DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = 274,
    DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = 275,
    DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = 276,
    DEVICE_GENERATEMIPS_RESOURCE_INVALID = 277,
    COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = 278,
    COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = 279,
    COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = 280,
    COPYSUBRESOURCEREGION_INVALIDSOURCE = 281,
    COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = 282,
    COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = 283,
    COPYRESOURCE_INVALIDSOURCE = 284,
    COPYRESOURCE_INVALIDDESTINATIONSTATE = 285,
    COPYRESOURCE_INVALIDSOURCESTATE = 286,
    UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = 287,
    UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = 288,
    UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = 289,
    DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = 290,
    DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = 291,
    DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = 292,
    DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = 293,
    DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = 294,
    BUFFER_MAP_INVALIDMAPTYPE = 295,
    BUFFER_MAP_INVALIDFLAGS = 296,
    BUFFER_MAP_ALREADYMAPPED = 297,
    BUFFER_MAP_DEVICEREMOVED_RETURN = 298,
    BUFFER_UNMAP_NOTMAPPED = 299,
    TEXTURE1D_MAP_INVALIDMAPTYPE = 300,
    TEXTURE1D_MAP_INVALIDSUBRESOURCE = 301,
    TEXTURE1D_MAP_INVALIDFLAGS = 302,
    TEXTURE1D_MAP_ALREADYMAPPED = 303,
    TEXTURE1D_MAP_DEVICEREMOVED_RETURN = 304,
    TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = 305,
    TEXTURE1D_UNMAP_NOTMAPPED = 306,
    TEXTURE2D_MAP_INVALIDMAPTYPE = 307,
    TEXTURE2D_MAP_INVALIDSUBRESOURCE = 308,
    TEXTURE2D_MAP_INVALIDFLAGS = 309,
    TEXTURE2D_MAP_ALREADYMAPPED = 310,
    TEXTURE2D_MAP_DEVICEREMOVED_RETURN = 311,
    TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = 312,
    TEXTURE2D_UNMAP_NOTMAPPED = 313,
    TEXTURE3D_MAP_INVALIDMAPTYPE = 314,
    TEXTURE3D_MAP_INVALIDSUBRESOURCE = 315,
    TEXTURE3D_MAP_INVALIDFLAGS = 316,
    TEXTURE3D_MAP_ALREADYMAPPED = 317,
    TEXTURE3D_MAP_DEVICEREMOVED_RETURN = 318,
    TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = 319,
    TEXTURE3D_UNMAP_NOTMAPPED = 320,
    CHECKFORMATSUPPORT_FORMAT_DEPRECATED = 321,
    CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = 322,
    SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = 323,
    SETEXCEPTIONMODE_INVALIDARG_RETURN = 324,
    SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = 325,
    REF_SIMULATING_INFINITELY_FAST_HARDWARE = 326,
    REF_THREADING_MODE = 327,
    REF_UMDRIVER_EXCEPTION = 328,
    REF_KMDRIVER_EXCEPTION = 329,
    REF_HARDWARE_EXCEPTION = 330,
    REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = 331,
    REF_PROBLEM_PARSING_SHADER = 332,
    REF_OUT_OF_MEMORY = 333,
    REF_INFO = 334,
    DEVICE_DRAW_VERTEXPOS_OVERFLOW = 335,
    DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = 336,
    DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = 337,
    DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = 338,
    DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = 339,
    DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = 340,
    DEVICE_DRAW_VERTEX_SHADER_NOT_SET = 341,
    DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = 342,
    DEVICE_SHADER_LINKAGE_REGISTERINDEX = 343,
    DEVICE_SHADER_LINKAGE_COMPONENTTYPE = 344,
    DEVICE_SHADER_LINKAGE_REGISTERMASK = 345,
    DEVICE_SHADER_LINKAGE_SYSTEMVALUE = 346,
    DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = 347,
    DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = 348,
    DEVICE_DRAW_INPUTLAYOUT_NOT_SET = 349,
    DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = 350,
    DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = 351,
    DEVICE_DRAW_SAMPLER_NOT_SET = 352,
    DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = 353,
    DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = 354,
    DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = 355,
    DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = 356,
    DEVICE_DRAW_INDEX_BUFFER_NOT_SET = 357,
    DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = 358,
    DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = 359,
    DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = 360,
    DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = 361,
    DEVICE_DRAW_POSITION_NOT_PRESENT = 362,
    DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = 363,
    DEVICE_DRAW_BOUND_RESOURCE_MAPPED = 364,
    DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = 365,
    DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = 366,
    DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = 367,
    DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = 368,
    DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = 369,
    DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = 370,
    DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = 371,
    DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = 372,
    DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = 373,
    DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = 374,
    DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = 375,
    DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = 376,
    DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = 377,
    DEVICE_REMOVAL_PROCESS_AT_FAULT = 378,
    DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = 379,
    DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = 380,
    DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = 381,
    DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = 382,
    DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = 383,
    DEVICE_DRAW_VIEWPORT_NOT_SET = 384,
    CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = 385,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = 386,
    DEVICE_RSSETVIEWPORTS_DENORMFLUSH = 387,
    OMSETRENDERTARGETS_INVALIDVIEW = 388,
    DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = 389,
    DEVICE_DRAW_SAMPLER_MISMATCH = 390,
    CREATEINPUTLAYOUT_TYPE_MISMATCH = 391,
    BLENDSTATE_GETDESC_LEGACY = 392,
    SHADERRESOURCEVIEW_GETDESC_LEGACY = 393,
    CREATEQUERY_OUTOFMEMORY_RETURN = 394,
    CREATEPREDICATE_OUTOFMEMORY_RETURN = 395,
    CREATECOUNTER_OUTOFRANGE_COUNTER = 396,
    CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = 397,
    CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 398,
    CREATECOUNTER_OUTOFMEMORY_RETURN = 399,
    CREATECOUNTER_NONEXCLUSIVE_RETURN = 400,
    CREATECOUNTER_NULLDESC = 401,
    CHECKCOUNTER_OUTOFRANGE_COUNTER = 402,
    CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = 403,
    SETPREDICATION_INVALID_PREDICATE_STATE = 404,
    QUERY_BEGIN_UNSUPPORTED = 405,
    PREDICATE_BEGIN_DURING_PREDICATION = 406,
    QUERY_BEGIN_DUPLICATE = 407,
    QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = 408,
    PREDICATE_END_DURING_PREDICATION = 409,
    QUERY_END_ABANDONING_PREVIOUS_RESULTS = 410,
    QUERY_END_WITHOUT_BEGIN = 411,
    QUERY_GETDATA_INVALID_DATASIZE = 412,
    QUERY_GETDATA_INVALID_FLAGS = 413,
    QUERY_GETDATA_INVALID_CALL = 414,
    DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = 415,
    DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = 416,
    DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = 417,
    DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = 418,
    DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = 419,
    CREATEINPUTLAYOUT_EMPTY_LAYOUT = 420,
    DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = 421,
    LIVE_OBJECT_SUMMARY = 422,
    LIVE_BUFFER = 423,
    LIVE_TEXTURE1D = 424,
    LIVE_TEXTURE2D = 425,
    LIVE_TEXTURE3D = 426,
    LIVE_SHADERRESOURCEVIEW = 427,
    LIVE_RENDERTARGETVIEW = 428,
    LIVE_DEPTHSTENCILVIEW = 429,
    LIVE_VERTEXSHADER = 430,
    LIVE_GEOMETRYSHADER = 431,
    LIVE_PIXELSHADER = 432,
    LIVE_INPUTLAYOUT = 433,
    LIVE_SAMPLER = 434,
    LIVE_BLENDSTATE = 435,
    LIVE_DEPTHSTENCILSTATE = 436,
    LIVE_RASTERIZERSTATE = 437,
    LIVE_QUERY = 438,
    LIVE_PREDICATE = 439,
    LIVE_COUNTER = 440,
    LIVE_DEVICE = 441,
    LIVE_SWAPCHAIN = 442,
    D3D10_MESSAGES_END = 443,
    D3D10L9_MESSAGES_START = 1048576,
    CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = 1048577,
    CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = 1048578,
    CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = 1048579,
    CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = 1048580,
    CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = 1048581,
    VSSETSAMPLERS_NOT_SUPPORTED = 1048582,
    VSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048583,
    PSSETSAMPLERS_TOO_MANY_SAMPLERS = 1048584,
    CREATERESOURCE_NO_ARRAYS = 1048585,
    CREATERESOURCE_NO_VB_AND_IB_BIND = 1048586,
    CREATERESOURCE_NO_TEXTURE_1D = 1048587,
    CREATERESOURCE_DIMENSION_OUT_OF_RANGE = 1048588,
    CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = 1048589,
    OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = 1048590,
    OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = 1048591,
    IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = 1048592,
    DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = 1048593,
    DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = 1048594,
    DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = 1048595,
    COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = 1048596,
    COPYRESOURCE_NO_TEXTURE_3D_READBACK = 1048597,
    COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = 1048598,
    CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = 1048599,
    CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = 1048600,
    CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = 1048601,
    DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = 1048602,
    CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = 1048603,
    CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = 1048604,
    CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = 1048605,
    CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = 1048606,
    CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = 1048607,
    CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = 1048608,
    CREATERESOURCE_NO_DWORD_INDEX_BUFFER = 1048609,
    CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = 1048610,
    CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = 1048611,
    CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = 1048612,
    CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = 1048613,
    CREATERESOURCE_NO_STREAM_OUT = 1048614,
    CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = 1048615,
    CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = 1048616,
    CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = 1048617,
    VSSHADERRESOURCES_NOT_SUPPORTED = 1048618,
    GEOMETRY_SHADER_NOT_SUPPORTED = 1048619,
    STREAM_OUT_NOT_SUPPORTED = 1048620,
    TEXT_FILTER_NOT_SUPPORTED = 1048621,
    CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = 1048622,
    CREATEBLENDSTATE_NO_MRT_BLEND = 1048623,
    CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = 1048624,
    CREATESAMPLERSTATE_NO_MIRRORONCE = 1048625,
    DRAWINSTANCED_NOT_SUPPORTED = 1048626,
    DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = 1048627,
    DRAWINDEXED_POINTLIST_UNSUPPORTED = 1048628,
    SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = 1048629,
    CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = 1048630,
    CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = 1048631,
    DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = 1048632,
    SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = 1048633,
    CREATERESOURCE_NON_POW_2_MIPMAP = 1048634,
    CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = 1048635,
    OMSETRENDERTARGETS_NO_SRGB_MRT = 1048636,
    COPYRESOURCE_NO_3D_MISMATCHED_UPDATES = 1048637,
    D3D10L9_MESSAGES_END = 1048638,
    D3D11_MESSAGES_START = 2097152,
    CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = 2097153,
    CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = 2097154,
    CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = 2097155,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS = 2097156,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = 2097157,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS = 2097158,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE = 2097159,
    CREATEPIXELSHADER_INVALIDCLASSLINKAGE = 2097160,
    CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS = 2097161,
    CREATEDEFERREDCONTEXT_SINGLETHREADED = 2097162,
    CREATEDEFERREDCONTEXT_INVALIDARG_RETURN = 2097163,
    CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN = 2097164,
    CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN = 2097165,
    FINISHDISPLAYLIST_ONIMMEDIATECONTEXT = 2097166,
    FINISHDISPLAYLIST_OUTOFMEMORY_RETURN = 2097167,
    FINISHDISPLAYLIST_INVALID_CALL_RETURN = 2097168,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = 2097169,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = 2097170,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = 2097171,
    CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = 2097172,
    DEVICE_HSSETSHADERRESOURCES_HAZARD = 2097173,
    DEVICE_HSSETCONSTANTBUFFERS_HAZARD = 2097174,
    HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 2097175,
    HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 2097176,
    CREATEHULLSHADER_INVALIDCALL = 2097177,
    CREATEHULLSHADER_OUTOFMEMORY = 2097178,
    CREATEHULLSHADER_INVALIDSHADERBYTECODE = 2097179,
    CREATEHULLSHADER_INVALIDSHADERTYPE = 2097180,
    CREATEHULLSHADER_INVALIDCLASSLINKAGE = 2097181,
    DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY = 2097182,
    HSSETCONSTANTBUFFERS_INVALIDBUFFER = 2097183,
    DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097184,
    DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY = 2097185,
    DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY = 2097186,
    DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097187,
    DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY = 2097188,
    DEVICE_DSSETSHADERRESOURCES_HAZARD = 2097189,
    DEVICE_DSSETCONSTANTBUFFERS_HAZARD = 2097190,
    DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 2097191,
    DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 2097192,
    CREATEDOMAINSHADER_INVALIDCALL = 2097193,
    CREATEDOMAINSHADER_OUTOFMEMORY = 2097194,
    CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = 2097195,
    CREATEDOMAINSHADER_INVALIDSHADERTYPE = 2097196,
    CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = 2097197,
    DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY = 2097198,
    DSSETCONSTANTBUFFERS_INVALIDBUFFER = 2097199,
    DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097200,
    DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY = 2097201,
    DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY = 2097202,
    DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097203,
    DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY = 2097204,
    DEVICE_DRAW_HS_XOR_DS_MISMATCH = 2097205,
    DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT = 2097206,
    DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER = 2097207,
    DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED = 2097208,
    DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW = 2097209,
    RESOURCE_MAP_INVALIDMAPTYPE = 2097210,
    RESOURCE_MAP_INVALIDSUBRESOURCE = 2097211,
    RESOURCE_MAP_INVALIDFLAGS = 2097212,
    RESOURCE_MAP_ALREADYMAPPED = 2097213,
    RESOURCE_MAP_DEVICEREMOVED_RETURN = 2097214,
    RESOURCE_MAP_OUTOFMEMORY_RETURN = 2097215,
    RESOURCE_MAP_WITHOUT_INITIAL_DISCARD = 2097216,
    RESOURCE_UNMAP_INVALIDSUBRESOURCE = 2097217,
    RESOURCE_UNMAP_NOTMAPPED = 2097218,
    DEVICE_DRAW_RASTERIZING_CONTROL_POINTS = 2097219,
    DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED = 2097220,
    DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH = 2097221,
    DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = 2097222,
    DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH = 2097223,
    DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = 2097224,
    CREATE_CONTEXT = 2097225,
    LIVE_CONTEXT = 2097226,
    DESTROY_CONTEXT = 2097227,
    CREATE_BUFFER = 2097228,
    LIVE_BUFFER_WIN7 = 2097229,
    DESTROY_BUFFER = 2097230,
    CREATE_TEXTURE1D = 2097231,
    LIVE_TEXTURE1D_WIN7 = 2097232,
    DESTROY_TEXTURE1D = 2097233,
    CREATE_TEXTURE2D = 2097234,
    LIVE_TEXTURE2D_WIN7 = 2097235,
    DESTROY_TEXTURE2D = 2097236,
    CREATE_TEXTURE3D = 2097237,
    LIVE_TEXTURE3D_WIN7 = 2097238,
    DESTROY_TEXTURE3D = 2097239,
    CREATE_SHADERRESOURCEVIEW = 2097240,
    LIVE_SHADERRESOURCEVIEW_WIN7 = 2097241,
    DESTROY_SHADERRESOURCEVIEW = 2097242,
    CREATE_RENDERTARGETVIEW = 2097243,
    LIVE_RENDERTARGETVIEW_WIN7 = 2097244,
    DESTROY_RENDERTARGETVIEW = 2097245,
    CREATE_DEPTHSTENCILVIEW = 2097246,
    LIVE_DEPTHSTENCILVIEW_WIN7 = 2097247,
    DESTROY_DEPTHSTENCILVIEW = 2097248,
    CREATE_VERTEXSHADER = 2097249,
    LIVE_VERTEXSHADER_WIN7 = 2097250,
    DESTROY_VERTEXSHADER = 2097251,
    CREATE_HULLSHADER = 2097252,
    LIVE_HULLSHADER = 2097253,
    DESTROY_HULLSHADER = 2097254,
    CREATE_DOMAINSHADER = 2097255,
    LIVE_DOMAINSHADER = 2097256,
    DESTROY_DOMAINSHADER = 2097257,
    CREATE_GEOMETRYSHADER = 2097258,
    LIVE_GEOMETRYSHADER_WIN7 = 2097259,
    DESTROY_GEOMETRYSHADER = 2097260,
    CREATE_PIXELSHADER = 2097261,
    LIVE_PIXELSHADER_WIN7 = 2097262,
    DESTROY_PIXELSHADER = 2097263,
    CREATE_INPUTLAYOUT = 2097264,
    LIVE_INPUTLAYOUT_WIN7 = 2097265,
    DESTROY_INPUTLAYOUT = 2097266,
    CREATE_SAMPLER = 2097267,
    LIVE_SAMPLER_WIN7 = 2097268,
    DESTROY_SAMPLER = 2097269,
    CREATE_BLENDSTATE = 2097270,
    LIVE_BLENDSTATE_WIN7 = 2097271,
    DESTROY_BLENDSTATE = 2097272,
    CREATE_DEPTHSTENCILSTATE = 2097273,
    LIVE_DEPTHSTENCILSTATE_WIN7 = 2097274,
    DESTROY_DEPTHSTENCILSTATE = 2097275,
    CREATE_RASTERIZERSTATE = 2097276,
    LIVE_RASTERIZERSTATE_WIN7 = 2097277,
    DESTROY_RASTERIZERSTATE = 2097278,
    CREATE_QUERY = 2097279,
    LIVE_QUERY_WIN7 = 2097280,
    DESTROY_QUERY = 2097281,
    CREATE_PREDICATE = 2097282,
    LIVE_PREDICATE_WIN7 = 2097283,
    DESTROY_PREDICATE = 2097284,
    CREATE_COUNTER = 2097285,
    DESTROY_COUNTER = 2097286,
    CREATE_COMMANDLIST = 2097287,
    LIVE_COMMANDLIST = 2097288,
    DESTROY_COMMANDLIST = 2097289,
    CREATE_CLASSINSTANCE = 2097290,
    LIVE_CLASSINSTANCE = 2097291,
    DESTROY_CLASSINSTANCE = 2097292,
    CREATE_CLASSLINKAGE = 2097293,
    LIVE_CLASSLINKAGE = 2097294,
    DESTROY_CLASSLINKAGE = 2097295,
    LIVE_DEVICE_WIN7 = 2097296,
    LIVE_OBJECT_SUMMARY_WIN7 = 2097297,
    CREATE_COMPUTESHADER = 2097298,
    LIVE_COMPUTESHADER = 2097299,
    DESTROY_COMPUTESHADER = 2097300,
    CREATE_UNORDEREDACCESSVIEW = 2097301,
    LIVE_UNORDEREDACCESSVIEW = 2097302,
    DESTROY_UNORDEREDACCESSVIEW = 2097303,
    DEVICE_SETSHADER_INTERFACES_FEATURELEVEL = 2097304,
    DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH = 2097305,
    DEVICE_SETSHADER_INVALID_INSTANCE = 2097306,
    DEVICE_SETSHADER_INVALID_INSTANCE_INDEX = 2097307,
    DEVICE_SETSHADER_INVALID_INSTANCE_TYPE = 2097308,
    DEVICE_SETSHADER_INVALID_INSTANCE_DATA = 2097309,
    DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA = 2097310,
    DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS = 2097311,
    DEVICE_CREATESHADER_CLASSLINKAGE_FULL = 2097312,
    DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE = 2097313,
    DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = 2097314,
    DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN = 2097315,
    DEVICE_CSSETSHADERRESOURCES_HAZARD = 2097316,
    DEVICE_CSSETCONSTANTBUFFERS_HAZARD = 2097317,
    CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = 2097318,
    CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = 2097319,
    CREATECOMPUTESHADER_INVALIDCALL = 2097320,
    CREATECOMPUTESHADER_OUTOFMEMORY = 2097321,
    CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = 2097322,
    CREATECOMPUTESHADER_INVALIDSHADERTYPE = 2097323,
    CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = 2097324,
    DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY = 2097325,
    CSSETCONSTANTBUFFERS_INVALIDBUFFER = 2097326,
    DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097327,
    DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY = 2097328,
    DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY = 2097329,
    DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY = 2097330,
    DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY = 2097331,
    DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097332,
    DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097333,
    DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097334,
    DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097335,
    DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = 2097336,
    DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097337,
    DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = 2097338,
    CREATEBUFFER_INVALIDSTRUCTURESTRIDE = 2097339,
    CREATESHADERRESOURCEVIEW_INVALIDFLAGS = 2097340,
    CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = 2097341,
    CREATEUNORDEREDACCESSVIEW_INVALIDDESC = 2097342,
    CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = 2097343,
    CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = 2097344,
    CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = 2097345,
    DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD = 2097346,
    DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS = 2097347,
    DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP = 2097348,
    CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 2097349,
    PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = 2097350,
    CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN = 2097351,
    CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN = 2097352,
    CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS = 2097353,
    DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD = 2097354,
    CLEARUNORDEREDACCESSVIEW_DENORMFLUSH = 2097355,
    DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY = 2097356,
    DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY = 2097357,
    CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = 2097358,
    CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS = 2097359,
    DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER = 2097360,
    DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED = 2097361,
    DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW = 2097362,
    DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT = 2097363,
    DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE = 2097364,
    DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD = 2097365,
    DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT = 2097366,
    DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE = 2097367,
    OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT = 2097368,
    CLEARDEPTHSTENCILVIEW_DEPTH_READONLY = 2097369,
    CLEARDEPTHSTENCILVIEW_STENCIL_READONLY = 2097370,
    CHECKFEATURESUPPORT_FORMAT_DEPRECATED = 2097371,
    DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH = 2097372,
    DEVICE_UNORDEREDACCESSVIEW_NOT_SET = 2097373,
    DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP = 2097374,
    DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH = 2097375,
    DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED = 2097376,
    DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED = 2097377,
    DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH = 2097378,
    DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH = 2097379,
    DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED = 2097380,
    DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED = 2097381,
    DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED = 2097382,
    DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED = 2097383,
    DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED = 2097384,
    DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED = 2097385,
    DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED = 2097386,
    DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED = 2097387,
    DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED = 2097388,
    DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED = 2097389,
    DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW = 2097390,
    DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO = 2097391,
    DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH = 2097392,
    DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH = 2097393,
    DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED = 2097394,
    DEVICE_DISPATCH_UNSUPPORTED = 2097395,
    DEVICE_DISPATCHINDIRECT_UNSUPPORTED = 2097396,
    COPYSTRUCTURECOUNT_INVALIDOFFSET = 2097397,
    COPYSTRUCTURECOUNT_LARGEOFFSET = 2097398,
    COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE = 2097399,
    COPYSTRUCTURECOUNT_INVALIDSOURCESTATE = 2097400,
    CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED = 2097401,
    DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW = 2097402,
    DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET = 2097403,
    DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS = 2097404,
    CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT = 2097405,
    DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED = 2097406,
    REF_WARNING = 2097407,
    DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV = 2097408,
    SHADER_ABORT = 2097409,
    SHADER_MESSAGE = 2097410,
    SHADER_ERROR = 2097411,
    OFFERRESOURCES_INVALIDRESOURCE = 2097412,
    HSSETSAMPLERS_UNBINDDELETINGOBJECT = 2097413,
    DSSETSAMPLERS_UNBINDDELETINGOBJECT = 2097414,
    CSSETSAMPLERS_UNBINDDELETINGOBJECT = 2097415,
    HSSETSHADER_UNBINDDELETINGOBJECT = 2097416,
    DSSETSHADER_UNBINDDELETINGOBJECT = 2097417,
    CSSETSHADER_UNBINDDELETINGOBJECT = 2097418,
    ENQUEUESETEVENT_INVALIDARG_RETURN = 2097419,
    ENQUEUESETEVENT_OUTOFMEMORY_RETURN = 2097420,
    ENQUEUESETEVENT_ACCESSDENIED_RETURN = 2097421,
    DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NUMUAVS_INVALIDRANGE = 2097422,
    USE_OF_ZERO_REFCOUNT_OBJECT = 2097423,
    D3D11_MESSAGES_END = 2097424,
    D3D11_1_MESSAGES_START = 3145728,
    CREATE_VIDEODECODER = 3145729,
    CREATE_VIDEOPROCESSORENUM = 3145730,
    CREATE_VIDEOPROCESSOR = 3145731,
    CREATE_DECODEROUTPUTVIEW = 3145732,
    CREATE_PROCESSORINPUTVIEW = 3145733,
    CREATE_PROCESSOROUTPUTVIEW = 3145734,
    CREATE_DEVICECONTEXTSTATE = 3145735,
    LIVE_VIDEODECODER = 3145736,
    LIVE_VIDEOPROCESSORENUM = 3145737,
    LIVE_VIDEOPROCESSOR = 3145738,
    LIVE_DECODEROUTPUTVIEW = 3145739,
    LIVE_PROCESSORINPUTVIEW = 3145740,
    LIVE_PROCESSOROUTPUTVIEW = 3145741,
    LIVE_DEVICECONTEXTSTATE = 3145742,
    DESTROY_VIDEODECODER = 3145743,
    DESTROY_VIDEOPROCESSORENUM = 3145744,
    DESTROY_VIDEOPROCESSOR = 3145745,
    DESTROY_DECODEROUTPUTVIEW = 3145746,
    DESTROY_PROCESSORINPUTVIEW = 3145747,
    DESTROY_PROCESSOROUTPUTVIEW = 3145748,
    DESTROY_DEVICECONTEXTSTATE = 3145749,
    CREATEDEVICECONTEXTSTATE_INVALIDFLAGS = 3145750,
    CREATEDEVICECONTEXTSTATE_INVALIDFEATURELEVEL = 3145751,
    CREATEDEVICECONTEXTSTATE_FEATURELEVELS_NOT_SUPPORTED = 3145752,
    CREATEDEVICECONTEXTSTATE_INVALIDREFIID = 3145753,
    DEVICE_DISCARDVIEW_INVALIDVIEW = 3145754,
    COPYSUBRESOURCEREGION1_INVALIDCOPYFLAGS = 3145755,
    UPDATESUBRESOURCE1_INVALIDCOPYFLAGS = 3145756,
    CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT = 3145757,
    CREATEVIDEODECODER_OUTOFMEMORY_RETURN = 3145758,
    CREATEVIDEODECODER_NULLPARAM = 3145759,
    CREATEVIDEODECODER_INVALIDFORMAT = 3145760,
    CREATEVIDEODECODER_ZEROWIDTHHEIGHT = 3145761,
    CREATEVIDEODECODER_DRIVER_INVALIDBUFFERSIZE = 3145762,
    CREATEVIDEODECODER_DRIVER_INVALIDBUFFERUSAGE = 3145763,
    GETVIDEODECODERPROFILECOUNT_OUTOFMEMORY = 3145764,
    GETVIDEODECODERPROFILE_NULLPARAM = 3145765,
    GETVIDEODECODERPROFILE_INVALIDINDEX = 3145766,
    GETVIDEODECODERPROFILE_OUTOFMEMORY_RETURN = 3145767,
    CHECKVIDEODECODERFORMAT_NULLPARAM = 3145768,
    CHECKVIDEODECODERFORMAT_OUTOFMEMORY_RETURN = 3145769,
    GETVIDEODECODERCONFIGCOUNT_NULLPARAM = 3145770,
    GETVIDEODECODERCONFIGCOUNT_OUTOFMEMORY_RETURN = 3145771,
    GETVIDEODECODERCONFIG_NULLPARAM = 3145772,
    GETVIDEODECODERCONFIG_INVALIDINDEX = 3145773,
    GETVIDEODECODERCONFIG_OUTOFMEMORY_RETURN = 3145774,
    GETDECODERCREATIONPARAMS_NULLPARAM = 3145775,
    GETDECODERDRIVERHANDLE_NULLPARAM = 3145776,
    GETDECODERBUFFER_NULLPARAM = 3145777,
    GETDECODERBUFFER_INVALIDBUFFER = 3145778,
    GETDECODERBUFFER_INVALIDTYPE = 3145779,
    GETDECODERBUFFER_LOCKED = 3145780,
    RELEASEDECODERBUFFER_NULLPARAM = 3145781,
    RELEASEDECODERBUFFER_INVALIDTYPE = 3145782,
    RELEASEDECODERBUFFER_NOTLOCKED = 3145783,
    DECODERBEGINFRAME_NULLPARAM = 3145784,
    DECODERBEGINFRAME_HAZARD = 3145785,
    DECODERENDFRAME_NULLPARAM = 3145786,
    SUBMITDECODERBUFFERS_NULLPARAM = 3145787,
    SUBMITDECODERBUFFERS_INVALIDTYPE = 3145788,
    DECODEREXTENSION_NULLPARAM = 3145789,
    DECODEREXTENSION_INVALIDRESOURCE = 3145790,
    CREATEVIDEOPROCESSORENUMERATOR_OUTOFMEMORY_RETURN = 3145791,
    CREATEVIDEOPROCESSORENUMERATOR_NULLPARAM = 3145792,
    CREATEVIDEOPROCESSORENUMERATOR_INVALIDFRAMEFORMAT = 3145793,
    CREATEVIDEOPROCESSORENUMERATOR_INVALIDUSAGE = 3145794,
    CREATEVIDEOPROCESSORENUMERATOR_INVALIDINPUTFRAMERATE = 3145795,
    CREATEVIDEOPROCESSORENUMERATOR_INVALIDOUTPUTFRAMERATE = 3145796,
    CREATEVIDEOPROCESSORENUMERATOR_INVALIDWIDTHHEIGHT = 3145797,
    GETVIDEOPROCESSORCONTENTDESC_NULLPARAM = 3145798,
    CHECKVIDEOPROCESSORFORMAT_NULLPARAM = 3145799,
    GETVIDEOPROCESSORCAPS_NULLPARAM = 3145800,
    GETVIDEOPROCESSORRATECONVERSIONCAPS_NULLPARAM = 3145801,
    GETVIDEOPROCESSORRATECONVERSIONCAPS_INVALIDINDEX = 3145802,
    GETVIDEOPROCESSORCUSTOMRATE_NULLPARAM = 3145803,
    GETVIDEOPROCESSORCUSTOMRATE_INVALIDINDEX = 3145804,
    GETVIDEOPROCESSORFILTERRANGE_NULLPARAM = 3145805,
    GETVIDEOPROCESSORFILTERRANGE_UNSUPPORTED = 3145806,
    CREATEVIDEOPROCESSOR_OUTOFMEMORY_RETURN = 3145807,
    CREATEVIDEOPROCESSOR_NULLPARAM = 3145808,
    VIDEOPROCESSORSETOUTPUTTARGETRECT_NULLPARAM = 3145809,
    VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_NULLPARAM = 3145810,
    VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_INVALIDALPHA = 3145811,
    VIDEOPROCESSORSETOUTPUTCOLORSPACE_NULLPARAM = 3145812,
    VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_NULLPARAM = 3145813,
    VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_UNSUPPORTED = 3145814,
    VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDSTREAM = 3145815,
    VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDFILLMODE = 3145816,
    VIDEOPROCESSORSETOUTPUTCONSTRICTION_NULLPARAM = 3145817,
    VIDEOPROCESSORSETOUTPUTSTEREOMODE_NULLPARAM = 3145818,
    VIDEOPROCESSORSETOUTPUTSTEREOMODE_UNSUPPORTED = 3145819,
    VIDEOPROCESSORSETOUTPUTEXTENSION_NULLPARAM = 3145820,
    VIDEOPROCESSORGETOUTPUTTARGETRECT_NULLPARAM = 3145821,
    VIDEOPROCESSORGETOUTPUTBACKGROUNDCOLOR_NULLPARAM = 3145822,
    VIDEOPROCESSORGETOUTPUTCOLORSPACE_NULLPARAM = 3145823,
    VIDEOPROCESSORGETOUTPUTALPHAFILLMODE_NULLPARAM = 3145824,
    VIDEOPROCESSORGETOUTPUTCONSTRICTION_NULLPARAM = 3145825,
    VIDEOPROCESSORSETOUTPUTCONSTRICTION_UNSUPPORTED = 3145826,
    VIDEOPROCESSORSETOUTPUTCONSTRICTION_INVALIDSIZE = 3145827,
    VIDEOPROCESSORGETOUTPUTSTEREOMODE_NULLPARAM = 3145828,
    VIDEOPROCESSORGETOUTPUTEXTENSION_NULLPARAM = 3145829,
    VIDEOPROCESSORSETSTREAMFRAMEFORMAT_NULLPARAM = 3145830,
    VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDFORMAT = 3145831,
    VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDSTREAM = 3145832,
    VIDEOPROCESSORSETSTREAMCOLORSPACE_NULLPARAM = 3145833,
    VIDEOPROCESSORSETSTREAMCOLORSPACE_INVALIDSTREAM = 3145834,
    VIDEOPROCESSORSETSTREAMOUTPUTRATE_NULLPARAM = 3145835,
    VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDRATE = 3145836,
    VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDFLAG = 3145837,
    VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDSTREAM = 3145838,
    VIDEOPROCESSORSETSTREAMSOURCERECT_NULLPARAM = 3145839,
    VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDSTREAM = 3145840,
    VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDRECT = 3145841,
    VIDEOPROCESSORSETSTREAMDESTRECT_NULLPARAM = 3145842,
    VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDSTREAM = 3145843,
    VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDRECT = 3145844,
    VIDEOPROCESSORSETSTREAMALPHA_NULLPARAM = 3145845,
    VIDEOPROCESSORSETSTREAMALPHA_INVALIDSTREAM = 3145846,
    VIDEOPROCESSORSETSTREAMALPHA_INVALIDALPHA = 3145847,
    VIDEOPROCESSORSETSTREAMPALETTE_NULLPARAM = 3145848,
    VIDEOPROCESSORSETSTREAMPALETTE_INVALIDSTREAM = 3145849,
    VIDEOPROCESSORSETSTREAMPALETTE_INVALIDCOUNT = 3145850,
    VIDEOPROCESSORSETSTREAMPALETTE_INVALIDALPHA = 3145851,
    VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_NULLPARAM = 3145852,
    VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDSTREAM = 3145853,
    VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDRATIO = 3145854,
    VIDEOPROCESSORSETSTREAMLUMAKEY_NULLPARAM = 3145855,
    VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDSTREAM = 3145856,
    VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDRANGE = 3145857,
    VIDEOPROCESSORSETSTREAMLUMAKEY_UNSUPPORTED = 3145858,
    VIDEOPROCESSORSETSTREAMSTEREOFORMAT_NULLPARAM = 3145859,
    VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDSTREAM = 3145860,
    VIDEOPROCESSORSETSTREAMSTEREOFORMAT_UNSUPPORTED = 3145861,
    VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FLIPUNSUPPORTED = 3145862,
    VIDEOPROCESSORSETSTREAMSTEREOFORMAT_MONOOFFSETUNSUPPORTED = 3145863,
    VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FORMATUNSUPPORTED = 3145864,
    VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDFORMAT = 3145865,
    VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_NULLPARAM = 3145866,
    VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM = 3145867,
    VIDEOPROCESSORSETSTREAMFILTER_NULLPARAM = 3145868,
    VIDEOPROCESSORSETSTREAMFILTER_INVALIDSTREAM = 3145869,
    VIDEOPROCESSORSETSTREAMFILTER_INVALIDFILTER = 3145870,
    VIDEOPROCESSORSETSTREAMFILTER_UNSUPPORTED = 3145871,
    VIDEOPROCESSORSETSTREAMFILTER_INVALIDLEVEL = 3145872,
    VIDEOPROCESSORSETSTREAMEXTENSION_NULLPARAM = 3145873,
    VIDEOPROCESSORSETSTREAMEXTENSION_INVALIDSTREAM = 3145874,
    VIDEOPROCESSORGETSTREAMFRAMEFORMAT_NULLPARAM = 3145875,
    VIDEOPROCESSORGETSTREAMCOLORSPACE_NULLPARAM = 3145876,
    VIDEOPROCESSORGETSTREAMOUTPUTRATE_NULLPARAM = 3145877,
    VIDEOPROCESSORGETSTREAMSOURCERECT_NULLPARAM = 3145878,
    VIDEOPROCESSORGETSTREAMDESTRECT_NULLPARAM = 3145879,
    VIDEOPROCESSORGETSTREAMALPHA_NULLPARAM = 3145880,
    VIDEOPROCESSORGETSTREAMPALETTE_NULLPARAM = 3145881,
    VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_NULLPARAM = 3145882,
    VIDEOPROCESSORGETSTREAMLUMAKEY_NULLPARAM = 3145883,
    VIDEOPROCESSORGETSTREAMSTEREOFORMAT_NULLPARAM = 3145884,
    VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_NULLPARAM = 3145885,
    VIDEOPROCESSORGETSTREAMFILTER_NULLPARAM = 3145886,
    VIDEOPROCESSORGETSTREAMEXTENSION_NULLPARAM = 3145887,
    VIDEOPROCESSORGETSTREAMEXTENSION_INVALIDSTREAM = 3145888,
    VIDEOPROCESSORBLT_NULLPARAM = 3145889,
    VIDEOPROCESSORBLT_INVALIDSTREAMCOUNT = 3145890,
    VIDEOPROCESSORBLT_TARGETRECT = 3145891,
    VIDEOPROCESSORBLT_INVALIDOUTPUT = 3145892,
    VIDEOPROCESSORBLT_INVALIDPASTFRAMES = 3145893,
    VIDEOPROCESSORBLT_INVALIDFUTUREFRAMES = 3145894,
    VIDEOPROCESSORBLT_INVALIDSOURCERECT = 3145895,
    VIDEOPROCESSORBLT_INVALIDDESTRECT = 3145896,
    VIDEOPROCESSORBLT_INVALIDINPUTRESOURCE = 3145897,
    VIDEOPROCESSORBLT_INVALIDARRAYSIZE = 3145898,
    VIDEOPROCESSORBLT_INVALIDARRAY = 3145899,
    VIDEOPROCESSORBLT_RIGHTEXPECTED = 3145900,
    VIDEOPROCESSORBLT_RIGHTNOTEXPECTED = 3145901,
    VIDEOPROCESSORBLT_STEREONOTENABLED = 3145902,
    VIDEOPROCESSORBLT_INVALIDRIGHTRESOURCE = 3145903,
    VIDEOPROCESSORBLT_NOSTEREOSTREAMS = 3145904,
    VIDEOPROCESSORBLT_INPUTHAZARD = 3145905,
    VIDEOPROCESSORBLT_OUTPUTHAZARD = 3145906,
    CREATEVIDEODECODEROUTPUTVIEW_OUTOFMEMORY_RETURN = 3145907,
    CREATEVIDEODECODEROUTPUTVIEW_NULLPARAM = 3145908,
    CREATEVIDEODECODEROUTPUTVIEW_INVALIDTYPE = 3145909,
    CREATEVIDEODECODEROUTPUTVIEW_INVALIDBIND = 3145910,
    CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEDFORMAT = 3145911,
    CREATEVIDEODECODEROUTPUTVIEW_INVALIDMIP = 3145912,
    CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEMIP = 3145913,
    CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAYSIZE = 3145914,
    CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAY = 3145915,
    CREATEVIDEODECODEROUTPUTVIEW_INVALIDDIMENSION = 3145916,
    CREATEVIDEOPROCESSORINPUTVIEW_OUTOFMEMORY_RETURN = 3145917,
    CREATEVIDEOPROCESSORINPUTVIEW_NULLPARAM = 3145918,
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDTYPE = 3145919,
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDBIND = 3145920,
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMISC = 3145921,
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDUSAGE = 3145922,
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFORMAT = 3145923,
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFOURCC = 3145924,
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMIP = 3145925,
    CREATEVIDEOPROCESSORINPUTVIEW_UNSUPPORTEDMIP = 3145926,
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAYSIZE = 3145927,
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAY = 3145928,
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDDIMENSION = 3145929,
    CREATEVIDEOPROCESSOROUTPUTVIEW_OUTOFMEMORY_RETURN = 3145930,
    CREATEVIDEOPROCESSOROUTPUTVIEW_NULLPARAM = 3145931,
    CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDTYPE = 3145932,
    CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDBIND = 3145933,
    CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDFORMAT = 3145934,
    CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMIP = 3145935,
    CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDMIP = 3145936,
    CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDARRAY = 3145937,
    CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDARRAY = 3145938,
    CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDDIMENSION = 3145939,
    DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT = 3145940,
    CREATEBLENDSTATE_INVALIDLOGICOPS = 3145941,
    CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER = 3145942,
    CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER = 3145943,
    CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER = 3145944,
    DEVICE_LOCKEDOUT_INTERFACE = 3145945,
    REF_WARNING_ATOMIC_INCONSISTENT = 3145946,
    REF_WARNING_READING_UNINITIALIZED_RESOURCE = 3145947,
    REF_WARNING_RAW_HAZARD = 3145948,
    REF_WARNING_WAR_HAZARD = 3145949,
    REF_WARNING_WAW_HAZARD = 3145950,
    CREATECRYPTOSESSION_NULLPARAM = 3145951,
    CREATECRYPTOSESSION_OUTOFMEMORY_RETURN = 3145952,
    GETCRYPTOTYPE_NULLPARAM = 3145953,
    GETDECODERPROFILE_NULLPARAM = 3145954,
    GETCRYPTOSESSIONCERTIFICATESIZE_NULLPARAM = 3145955,
    GETCRYPTOSESSIONCERTIFICATE_NULLPARAM = 3145956,
    GETCRYPTOSESSIONCERTIFICATE_WRONGSIZE = 3145957,
    GETCRYPTOSESSIONHANDLE_WRONGSIZE = 3145958,
    NEGOTIATECRPYTOSESSIONKEYEXCHANGE_NULLPARAM = 3145959,
    ENCRYPTIONBLT_UNSUPPORTED = 3145960,
    ENCRYPTIONBLT_NULLPARAM = 3145961,
    ENCRYPTIONBLT_SRC_WRONGDEVICE = 3145962,
    ENCRYPTIONBLT_DST_WRONGDEVICE = 3145963,
    ENCRYPTIONBLT_FORMAT_MISMATCH = 3145964,
    ENCRYPTIONBLT_SIZE_MISMATCH = 3145965,
    ENCRYPTIONBLT_SRC_MULTISAMPLED = 3145966,
    ENCRYPTIONBLT_DST_NOT_STAGING = 3145967,
    ENCRYPTIONBLT_SRC_MAPPED = 3145968,
    ENCRYPTIONBLT_DST_MAPPED = 3145969,
    ENCRYPTIONBLT_SRC_OFFERED = 3145970,
    ENCRYPTIONBLT_DST_OFFERED = 3145971,
    ENCRYPTIONBLT_SRC_CONTENT_UNDEFINED = 3145972,
    DECRYPTIONBLT_UNSUPPORTED = 3145973,
    DECRYPTIONBLT_NULLPARAM = 3145974,
    DECRYPTIONBLT_SRC_WRONGDEVICE = 3145975,
    DECRYPTIONBLT_DST_WRONGDEVICE = 3145976,
    DECRYPTIONBLT_FORMAT_MISMATCH = 3145977,
    DECRYPTIONBLT_SIZE_MISMATCH = 3145978,
    DECRYPTIONBLT_DST_MULTISAMPLED = 3145979,
    DECRYPTIONBLT_SRC_NOT_STAGING = 3145980,
    DECRYPTIONBLT_DST_NOT_RENDER_TARGET = 3145981,
    DECRYPTIONBLT_SRC_MAPPED = 3145982,
    DECRYPTIONBLT_DST_MAPPED = 3145983,
    DECRYPTIONBLT_SRC_OFFERED = 3145984,
    DECRYPTIONBLT_DST_OFFERED = 3145985,
    DECRYPTIONBLT_SRC_CONTENT_UNDEFINED = 3145986,
    STARTSESSIONKEYREFRESH_NULLPARAM = 3145987,
    STARTSESSIONKEYREFRESH_INVALIDSIZE = 3145988,
    FINISHSESSIONKEYREFRESH_NULLPARAM = 3145989,
    GETENCRYPTIONBLTKEY_NULLPARAM = 3145990,
    GETENCRYPTIONBLTKEY_INVALIDSIZE = 3145991,
    GETCONTENTPROTECTIONCAPS_NULLPARAM = 3145992,
    CHECKCRYPTOKEYEXCHANGE_NULLPARAM = 3145993,
    CHECKCRYPTOKEYEXCHANGE_INVALIDINDEX = 3145994,
    CREATEAUTHENTICATEDCHANNEL_NULLPARAM = 3145995,
    CREATEAUTHENTICATEDCHANNEL_UNSUPPORTED = 3145996,
    CREATEAUTHENTICATEDCHANNEL_INVALIDTYPE = 3145997,
    CREATEAUTHENTICATEDCHANNEL_OUTOFMEMORY_RETURN = 3145998,
    GETAUTHENTICATEDCHANNELCERTIFICATESIZE_INVALIDCHANNEL = 3145999,
    GETAUTHENTICATEDCHANNELCERTIFICATESIZE_NULLPARAM = 3146000,
    GETAUTHENTICATEDCHANNELCERTIFICATE_INVALIDCHANNEL = 3146001,
    GETAUTHENTICATEDCHANNELCERTIFICATE_NULLPARAM = 3146002,
    GETAUTHENTICATEDCHANNELCERTIFICATE_WRONGSIZE = 3146003,
    NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDCHANNEL = 3146004,
    NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_NULLPARAM = 3146005,
    QUERYAUTHENTICATEDCHANNEL_NULLPARAM = 3146006,
    QUERYAUTHENTICATEDCHANNEL_WRONGCHANNEL = 3146007,
    QUERYAUTHENTICATEDCHANNEL_UNSUPPORTEDQUERY = 3146008,
    QUERYAUTHENTICATEDCHANNEL_WRONGSIZE = 3146009,
    QUERYAUTHENTICATEDCHANNEL_INVALIDPROCESSINDEX = 3146010,
    CONFIGUREAUTHENTICATEDCHANNEL_NULLPARAM = 3146011,
    CONFIGUREAUTHENTICATEDCHANNEL_WRONGCHANNEL = 3146012,
    CONFIGUREAUTHENTICATEDCHANNEL_UNSUPPORTEDCONFIGURE = 3146013,
    CONFIGUREAUTHENTICATEDCHANNEL_WRONGSIZE = 3146014,
    CONFIGUREAUTHENTICATEDCHANNEL_INVALIDPROCESSIDTYPE = 3146015,
    VSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146016,
    DSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146017,
    HSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146018,
    GSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146019,
    PSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146020,
    CSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = 3146021,
    NEGOTIATECRPYTOSESSIONKEYEXCHANGE_INVALIDSIZE = 3146022,
    NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDSIZE = 3146023,
    OFFERRESOURCES_INVALIDPRIORITY = 3146024,
    GETCRYPTOSESSIONHANDLE_OUTOFMEMORY = 3146025,
    ACQUIREHANDLEFORCAPTURE_NULLPARAM = 3146026,
    ACQUIREHANDLEFORCAPTURE_INVALIDTYPE = 3146027,
    ACQUIREHANDLEFORCAPTURE_INVALIDBIND = 3146028,
    ACQUIREHANDLEFORCAPTURE_INVALIDARRAY = 3146029,
    VIDEOPROCESSORSETSTREAMROTATION_NULLPARAM = 3146030,
    VIDEOPROCESSORSETSTREAMROTATION_INVALIDSTREAM = 3146031,
    VIDEOPROCESSORSETSTREAMROTATION_INVALID = 3146032,
    VIDEOPROCESSORSETSTREAMROTATION_UNSUPPORTED = 3146033,
    VIDEOPROCESSORGETSTREAMROTATION_NULLPARAM = 3146034,
    DEVICE_CLEARVIEW_INVALIDVIEW = 3146035,
    DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146036,
    DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146037,
    DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146038,
    DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146039,
    DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146040,
    DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146041,
    DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146042,
    DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146043,
    DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED = 3146044,
    DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED = 3146045,
    DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146046,
    DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146047,
    DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED = 3146048,
    DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED = 3146049,
    DEVICE_SHADER_LINKAGE_MINPRECISION = 3146050,
    VIDEOPROCESSORSETSTREAMALPHA_UNSUPPORTED = 3146051,
    VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_UNSUPPORTED = 3146052,
    DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED = 3146053,
    DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED = 3146054,
    DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED = 3146055,
    DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED = 3146056,
    DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED = 3146057,
    DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED = 3146058,
    DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED = 3146059,
    DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET = 3146060,
    DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS = 3146061,
    DEVICE_CLEARVIEW_NOTSUPPORTED = 3146062,
    SWAPDEVICECONTEXTSTATE_NOTSUPPORTED = 3146063,
    UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1 = 3146064,
    GETDC_INACCESSIBLE = 3146065,
    DEVICE_CLEARVIEW_INVALIDRECT = 3146066,
    DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9 = 3146067,
    DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED = 3146068,
    DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED = 3146069,
    ENQUEUESETEVENT_NOT_SUPPORTED = 3146070,
    OFFERRELEASE_NOT_SUPPORTED = 3146071,
    OFFERRESOURCES_INACCESSIBLE = 3146072,
    CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA = 3146073,
    CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA = 3146074,
    DEVICE_CLEARVIEW_INVALIDSOURCERECT = 3146075,
    DEVICE_CLEARVIEW_EMPTYRECT = 3146076,
    UPDATESUBRESOURCE_EMPTYDESTBOX = 3146077,
    COPYSUBRESOURCEREGION_EMPTYSOURCEBOX = 3146078,
    DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS = 3146079,
    DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET = 3146080,
    DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET = 3146081,
    DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT = 3146082,
    DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT = 3146083,
    GETDATAFORNEWHARDWAREKEY_NULLPARAM = 3146084,
    CHECKCRYPTOSESSIONSTATUS_NULLPARAM = 3146085,
    GETCRYPTOSESSIONPRIVATEDATASIZE_NULLPARAM = 3146086,
    GETVIDEODECODERCAPS_NULLPARAM = 3146087,
    GETVIDEODECODERCAPS_ZEROWIDTHHEIGHT = 3146088,
    CHECKVIDEODECODERDOWNSAMPLING_NULLPARAM = 3146089,
    CHECKVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE = 3146090,
    CHECKVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT = 3146091,
    VIDEODECODERENABLEDOWNSAMPLING_NULLPARAM = 3146092,
    VIDEODECODERENABLEDOWNSAMPLING_UNSUPPORTED = 3146093,
    VIDEODECODERUPDATEDOWNSAMPLING_NULLPARAM = 3146094,
    VIDEODECODERUPDATEDOWNSAMPLING_UNSUPPORTED = 3146095,
    CHECKVIDEOPROCESSORFORMATCONVERSION_NULLPARAM = 3146096,
    VIDEOPROCESSORSETOUTPUTCOLORSPACE1_NULLPARAM = 3146097,
    VIDEOPROCESSORGETOUTPUTCOLORSPACE1_NULLPARAM = 3146098,
    VIDEOPROCESSORSETSTREAMCOLORSPACE1_NULLPARAM = 3146099,
    VIDEOPROCESSORSETSTREAMCOLORSPACE1_INVALIDSTREAM = 3146100,
    VIDEOPROCESSORSETSTREAMMIRROR_NULLPARAM = 3146101,
    VIDEOPROCESSORSETSTREAMMIRROR_INVALIDSTREAM = 3146102,
    VIDEOPROCESSORSETSTREAMMIRROR_UNSUPPORTED = 3146103,
    VIDEOPROCESSORGETSTREAMCOLORSPACE1_NULLPARAM = 3146104,
    VIDEOPROCESSORGETSTREAMMIRROR_NULLPARAM = 3146105,
    RECOMMENDVIDEODECODERDOWNSAMPLING_NULLPARAM = 3146106,
    RECOMMENDVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE = 3146107,
    RECOMMENDVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT = 3146108,
    VIDEOPROCESSORSETOUTPUTSHADERUSAGE_NULLPARAM = 3146109,
    VIDEOPROCESSORGETOUTPUTSHADERUSAGE_NULLPARAM = 3146110,
    VIDEOPROCESSORGETBEHAVIORHINTS_NULLPARAM = 3146111,
    VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSTREAMCOUNT = 3146112,
    VIDEOPROCESSORGETBEHAVIORHINTS_TARGETRECT = 3146113,
    VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSOURCERECT = 3146114,
    VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDDESTRECT = 3146115,
    GETCRYPTOSESSIONPRIVATEDATASIZE_INVALID_KEY_EXCHANGE_TYPE = 3146116,
    D3D11_1_MESSAGES_END = 3146117,
    D3D11_2_MESSAGES_START = 3146118,
    CREATEBUFFER_INVALIDUSAGE = 3146119,
    CREATETEXTURE1D_INVALIDUSAGE = 3146120,
    CREATETEXTURE2D_INVALIDUSAGE = 3146121,
    CREATEINPUTLAYOUT_LEVEL9_STEPRATE_NOT_1 = 3146122,
    CREATEINPUTLAYOUT_LEVEL9_INSTANCING_NOT_SUPPORTED = 3146123,
    UPDATETILEMAPPINGS_INVALID_PARAMETER = 3146124,
    COPYTILEMAPPINGS_INVALID_PARAMETER = 3146125,
    COPYTILES_INVALID_PARAMETER = 3146126,
    UPDATETILES_INVALID_PARAMETER = 3146127,
    RESIZETILEPOOL_INVALID_PARAMETER = 3146128,
    TILEDRESOURCEBARRIER_INVALID_PARAMETER = 3146129,
    NULL_TILE_MAPPING_ACCESS_WARNING = 3146130,
    NULL_TILE_MAPPING_ACCESS_ERROR = 3146131,
    DIRTY_TILE_MAPPING_ACCESS = 3146132,
    DUPLICATE_TILE_MAPPINGS_IN_COVERED_AREA = 3146133,
    TILE_MAPPINGS_IN_COVERED_AREA_DUPLICATED_OUTSIDE = 3146134,
    TILE_MAPPINGS_SHARED_BETWEEN_INCOMPATIBLE_RESOURCES = 3146135,
    TILE_MAPPINGS_SHARED_BETWEEN_INPUT_AND_OUTPUT = 3146136,
    CHECKMULTISAMPLEQUALITYLEVELS_INVALIDFLAGS = 3146137,
    GETRESOURCETILING_NONTILED_RESOURCE = 3146138,
    RESIZETILEPOOL_SHRINK_WITH_MAPPINGS_STILL_DEFINED_PAST_END = 3146139,
    NEED_TO_CALL_TILEDRESOURCEBARRIER = 3146140,
    CREATEDEVICE_INVALIDARGS = 3146141,
    CREATEDEVICE_WARNING = 3146142,
    CLEARUNORDEREDACCESSVIEWUINT_HAZARD = 3146143,
    CLEARUNORDEREDACCESSVIEWFLOAT_HAZARD = 3146144,
    TILED_RESOURCE_TIER_1_BUFFER_TEXTURE_MISMATCH = 3146145,
    CREATE_CRYPTOSESSION = 3146146,
    CREATE_AUTHENTICATEDCHANNEL = 3146147,
    LIVE_CRYPTOSESSION = 3146148,
    LIVE_AUTHENTICATEDCHANNEL = 3146149,
    DESTROY_CRYPTOSESSION = 3146150,
    DESTROY_AUTHENTICATEDCHANNEL = 3146151,
    D3D11_2_MESSAGES_END = 3146152,
    D3D11_3_MESSAGES_START = 3146153,
    CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE = 3146154,
    DEVICE_DRAW_INVALID_SYSTEMVALUE = 3146155,
    CREATEQUERYORPREDICATE_INVALIDCONTEXTTYPE = 3146156,
    CREATEQUERYORPREDICATE_DECODENOTSUPPORTED = 3146157,
    CREATEQUERYORPREDICATE_ENCODENOTSUPPORTED = 3146158,
    CREATESHADERRESOURCEVIEW_INVALIDPLANEINDEX = 3146159,
    CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANEINDEX = 3146160,
    CREATESHADERRESOURCEVIEW_AMBIGUOUSVIDEOPLANEINDEX = 3146161,
    CREATERENDERTARGETVIEW_INVALIDPLANEINDEX = 3146162,
    CREATERENDERTARGETVIEW_INVALIDVIDEOPLANEINDEX = 3146163,
    CREATERENDERTARGETVIEW_AMBIGUOUSVIDEOPLANEINDEX = 3146164,
    CREATEUNORDEREDACCESSVIEW_INVALIDPLANEINDEX = 3146165,
    CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANEINDEX = 3146166,
    CREATEUNORDEREDACCESSVIEW_AMBIGUOUSVIDEOPLANEINDEX = 3146167,
    JPEGDECODE_INVALIDSCANDATAOFFSET = 3146168,
    JPEGDECODE_NOTSUPPORTED = 3146169,
    JPEGDECODE_DIMENSIONSTOOLARGE = 3146170,
    JPEGDECODE_INVALIDCOMPONENTS = 3146171,
    JPEGDECODE_DESTINATIONNOT2D = 3146172,
    JPEGDECODE_TILEDRESOURCESUNSUPPORTED = 3146173,
    JPEGDECODE_GUARDRECTSUNSUPPORTED = 3146174,
    JPEGDECODE_FORMATUNSUPPORTED = 3146175,
    JPEGDECODE_INVALIDSUBRESOURCE = 3146176,
    JPEGDECODE_INVALIDMIPLEVEL = 3146177,
    JPEGDECODE_EMPTYDESTBOX = 3146178,
    JPEGDECODE_DESTBOXNOT2D = 3146179,
    JPEGDECODE_DESTBOXNOTSUB = 3146180,
    JPEGDECODE_DESTBOXESINTERSECT = 3146181,
    JPEGDECODE_XSUBSAMPLEMISMATCH = 3146182,
    JPEGDECODE_YSUBSAMPLEMISMATCH = 3146183,
    JPEGDECODE_XSUBSAMPLEODD = 3146184,
    JPEGDECODE_YSUBSAMPLEODD = 3146185,
    JPEGDECODE_OUTPUTDIMENSIONSTOOLARGE = 3146186,
    JPEGDECODE_NONPOW2SCALEUNSUPPORTED = 3146187,
    JPEGDECODE_FRACTIONALDOWNSCALETOLARGE = 3146188,
    JPEGDECODE_CHROMASIZEMISMATCH = 3146189,
    JPEGDECODE_LUMACHROMASIZEMISMATCH = 3146190,
    JPEGDECODE_INVALIDNUMDESTINATIONS = 3146191,
    JPEGDECODE_SUBBOXUNSUPPORTED = 3146192,
    JPEGDECODE_1DESTUNSUPPORTEDFORMAT = 3146193,
    JPEGDECODE_3DESTUNSUPPORTEDFORMAT = 3146194,
    JPEGDECODE_SCALEUNSUPPORTED = 3146195,
    JPEGDECODE_INVALIDSOURCESIZE = 3146196,
    JPEGDECODE_INVALIDCOPYFLAGS = 3146197,
    JPEGDECODE_HAZARD = 3146198,
    JPEGDECODE_UNSUPPORTEDSRCBUFFERUSAGE = 3146199,
    JPEGDECODE_UNSUPPORTEDSRCBUFFERMISCFLAGS = 3146200,
    JPEGDECODE_UNSUPPORTEDDSTTEXTUREUSAGE = 3146201,
    JPEGDECODE_BACKBUFFERNOTSUPPORTED = 3146202,
    JPEGDECODE_UNSUPPRTEDCOPYFLAGS = 3146203,
    JPEGENCODE_NOTSUPPORTED = 3146204,
    JPEGENCODE_INVALIDSCANDATAOFFSET = 3146205,
    JPEGENCODE_INVALIDCOMPONENTS = 3146206,
    JPEGENCODE_SOURCENOT2D = 3146207,
    JPEGENCODE_TILEDRESOURCESUNSUPPORTED = 3146208,
    JPEGENCODE_GUARDRECTSUNSUPPORTED = 3146209,
    JPEGENCODE_XSUBSAMPLEMISMATCH = 3146210,
    JPEGENCODE_YSUBSAMPLEMISMATCH = 3146211,
    JPEGENCODE_FORMATUNSUPPORTED = 3146212,
    JPEGENCODE_INVALIDSUBRESOURCE = 3146213,
    JPEGENCODE_INVALIDMIPLEVEL = 3146214,
    JPEGENCODE_DIMENSIONSTOOLARGE = 3146215,
    JPEGENCODE_HAZARD = 3146216,
    JPEGENCODE_UNSUPPORTEDDSTBUFFERUSAGE = 3146217,
    JPEGENCODE_UNSUPPORTEDDSTBUFFERMISCFLAGS = 3146218,
    JPEGENCODE_UNSUPPORTEDSRCTEXTUREUSAGE = 3146219,
    JPEGENCODE_BACKBUFFERNOTSUPPORTED = 3146220,
    CREATEQUERYORPREDICATE_UNSUPPORTEDCONTEXTTTYPEFORQUERY = 3146221,
    FLUSH1_INVALIDCONTEXTTYPE = 3146222,
    DEVICE_SETHARDWAREPROTECTION_INVALIDCONTEXT = 3146223,
    VIDEOPROCESSORSETOUTPUTHDRMETADATA_NULLPARAM = 3146224,
    VIDEOPROCESSORSETOUTPUTHDRMETADATA_INVALIDSIZE = 3146225,
    VIDEOPROCESSORGETOUTPUTHDRMETADATA_NULLPARAM = 3146226,
    VIDEOPROCESSORGETOUTPUTHDRMETADATA_INVALIDSIZE = 3146227,
    VIDEOPROCESSORSETSTREAMHDRMETADATA_NULLPARAM = 3146228,
    VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSTREAM = 3146229,
    VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSIZE = 3146230,
    VIDEOPROCESSORGETSTREAMHDRMETADATA_NULLPARAM = 3146231,
    VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSTREAM = 3146232,
    VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSIZE = 3146233,
    VIDEOPROCESSORGETSTREAMFRAMEFORMAT_INVALIDSTREAM = 3146234,
    VIDEOPROCESSORGETSTREAMCOLORSPACE_INVALIDSTREAM = 3146235,
    VIDEOPROCESSORGETSTREAMOUTPUTRATE_INVALIDSTREAM = 3146236,
    VIDEOPROCESSORGETSTREAMSOURCERECT_INVALIDSTREAM = 3146237,
    VIDEOPROCESSORGETSTREAMDESTRECT_INVALIDSTREAM = 3146238,
    VIDEOPROCESSORGETSTREAMALPHA_INVALIDSTREAM = 3146239,
    VIDEOPROCESSORGETSTREAMPALETTE_INVALIDSTREAM = 3146240,
    VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_INVALIDSTREAM = 3146241,
    VIDEOPROCESSORGETSTREAMLUMAKEY_INVALIDSTREAM = 3146242,
    VIDEOPROCESSORGETSTREAMSTEREOFORMAT_INVALIDSTREAM = 3146243,
    VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM = 3146244,
    VIDEOPROCESSORGETSTREAMFILTER_INVALIDSTREAM = 3146245,
    VIDEOPROCESSORGETSTREAMROTATION_INVALIDSTREAM = 3146246,
    VIDEOPROCESSORGETSTREAMCOLORSPACE1_INVALIDSTREAM = 3146247,
    VIDEOPROCESSORGETSTREAMMIRROR_INVALIDSTREAM = 3146248,
    CREATE_FENCE = 3146249,
    LIVE_FENCE = 3146250,
    DESTROY_FENCE = 3146251,
    CREATE_SYNCHRONIZEDCHANNEL = 3146252,
    LIVE_SYNCHRONIZEDCHANNEL = 3146253,
    DESTROY_SYNCHRONIZEDCHANNEL = 3146254,
    CREATEFENCE_INVALIDFLAGS = 3146255,
    D3D11_3_MESSAGES_END = 3146256,
    D3D11_5_MESSAGES_START = 3146257,
    NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_INVALIDKEYEXCHANGETYPE = 3146258,
    NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_NOT_SUPPORTED = 3146259,
    DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT_COUNT = 3146260,
    DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT = 3146261,
    DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_SIZE = 3146262,
    DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_USAGE = 3146263,
    DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_MISC_FLAGS = 3146264,
    DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_OFFSET = 3146265,
    CREATE_TRACKEDWORKLOAD = 3146266,
    LIVE_TRACKEDWORKLOAD = 3146267,
    DESTROY_TRACKEDWORKLOAD = 3146268,
    CREATE_TRACKED_WORKLOAD_NULLPARAM = 3146269,
    CREATE_TRACKED_WORKLOAD_INVALID_MAX_INSTANCES = 3146270,
    CREATE_TRACKED_WORKLOAD_INVALID_DEADLINE_TYPE = 3146271,
    CREATE_TRACKED_WORKLOAD_INVALID_ENGINE_TYPE = 3146272,
    MULTIPLE_TRACKED_WORKLOADS = 3146273,
    MULTIPLE_TRACKED_WORKLOAD_PAIRS = 3146274,
    INCOMPLETE_TRACKED_WORKLOAD_PAIR = 3146275,
    OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR = 3146276,
    CANNOT_ADD_TRACKED_WORKLOAD = 3146277,
    TRACKED_WORKLOAD_NOT_SUPPORTED = 3146278,
    TRACKED_WORKLOAD_ENGINE_TYPE_NOT_FOUND = 3146279,
    NO_TRACKED_WORKLOAD_SLOT_AVAILABLE = 3146280,
    END_TRACKED_WORKLOAD_INVALID_ARG = 3146281,
    TRACKED_WORKLOAD_DISJOINT_FAILURE = 3146282,
    D3D11_5_MESSAGES_END = 3146283,
};
pub const D3D11_MESSAGE_ID_UNKNOWN = D3D11_MESSAGE_ID.UNKNOWN;
pub const D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_HAZARD = D3D11_MESSAGE_ID.DEVICE_IASETVERTEXBUFFERS_HAZARD;
pub const D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_HAZARD = D3D11_MESSAGE_ID.DEVICE_IASETINDEXBUFFER_HAZARD;
pub const D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_HAZARD = D3D11_MESSAGE_ID.DEVICE_VSSETSHADERRESOURCES_HAZARD;
pub const D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_HAZARD = D3D11_MESSAGE_ID.DEVICE_VSSETCONSTANTBUFFERS_HAZARD;
pub const D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_HAZARD = D3D11_MESSAGE_ID.DEVICE_GSSETSHADERRESOURCES_HAZARD;
pub const D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_HAZARD = D3D11_MESSAGE_ID.DEVICE_GSSETCONSTANTBUFFERS_HAZARD;
pub const D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_HAZARD = D3D11_MESSAGE_ID.DEVICE_PSSETSHADERRESOURCES_HAZARD;
pub const D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_HAZARD = D3D11_MESSAGE_ID.DEVICE_PSSETCONSTANTBUFFERS_HAZARD;
pub const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETS_HAZARD = D3D11_MESSAGE_ID.DEVICE_OMSETRENDERTARGETS_HAZARD;
pub const D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_HAZARD = D3D11_MESSAGE_ID.DEVICE_SOSETTARGETS_HAZARD;
pub const D3D11_MESSAGE_ID_STRING_FROM_APPLICATION = D3D11_MESSAGE_ID.STRING_FROM_APPLICATION;
pub const D3D11_MESSAGE_ID_CORRUPTED_THIS = D3D11_MESSAGE_ID.CORRUPTED_THIS;
pub const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER1 = D3D11_MESSAGE_ID.CORRUPTED_PARAMETER1;
pub const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER2 = D3D11_MESSAGE_ID.CORRUPTED_PARAMETER2;
pub const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER3 = D3D11_MESSAGE_ID.CORRUPTED_PARAMETER3;
pub const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER4 = D3D11_MESSAGE_ID.CORRUPTED_PARAMETER4;
pub const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER5 = D3D11_MESSAGE_ID.CORRUPTED_PARAMETER5;
pub const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER6 = D3D11_MESSAGE_ID.CORRUPTED_PARAMETER6;
pub const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER7 = D3D11_MESSAGE_ID.CORRUPTED_PARAMETER7;
pub const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER8 = D3D11_MESSAGE_ID.CORRUPTED_PARAMETER8;
pub const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER9 = D3D11_MESSAGE_ID.CORRUPTED_PARAMETER9;
pub const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER10 = D3D11_MESSAGE_ID.CORRUPTED_PARAMETER10;
pub const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER11 = D3D11_MESSAGE_ID.CORRUPTED_PARAMETER11;
pub const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER12 = D3D11_MESSAGE_ID.CORRUPTED_PARAMETER12;
pub const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER13 = D3D11_MESSAGE_ID.CORRUPTED_PARAMETER13;
pub const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER14 = D3D11_MESSAGE_ID.CORRUPTED_PARAMETER14;
pub const D3D11_MESSAGE_ID_CORRUPTED_PARAMETER15 = D3D11_MESSAGE_ID.CORRUPTED_PARAMETER15;
pub const D3D11_MESSAGE_ID_CORRUPTED_MULTITHREADING = D3D11_MESSAGE_ID.CORRUPTED_MULTITHREADING;
pub const D3D11_MESSAGE_ID_MESSAGE_REPORTING_OUTOFMEMORY = D3D11_MESSAGE_ID.MESSAGE_REPORTING_OUTOFMEMORY;
pub const D3D11_MESSAGE_ID_IASETINPUTLAYOUT_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.IASETINPUTLAYOUT_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.IASETVERTEXBUFFERS_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_IASETINDEXBUFFER_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.IASETINDEXBUFFER_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_VSSETSHADER_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.VSSETSHADER_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.VSSETSHADERRESOURCES_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.VSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_VSSETSAMPLERS_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.VSSETSAMPLERS_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_GSSETSHADER_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.GSSETSHADER_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.GSSETSHADERRESOURCES_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.GSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_GSSETSAMPLERS_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.GSSETSAMPLERS_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_SOSETTARGETS_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.SOSETTARGETS_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_PSSETSHADER_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.PSSETSHADER_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.PSSETSHADERRESOURCES_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.PSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_PSSETSAMPLERS_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.PSSETSAMPLERS_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_RSSETSTATE_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.RSSETSTATE_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_OMSETBLENDSTATE_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.OMSETBLENDSTATE_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.OMSETDEPTHSTENCILSTATE_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_OMSETRENDERTARGETS_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.OMSETRENDERTARGETS_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_SETPREDICATION_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.SETPREDICATION_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_GETPRIVATEDATA_MOREDATA = D3D11_MESSAGE_ID.GETPRIVATEDATA_MOREDATA;
pub const D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFREEDATA = D3D11_MESSAGE_ID.SETPRIVATEDATA_INVALIDFREEDATA;
pub const D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDIUNKNOWN = D3D11_MESSAGE_ID.SETPRIVATEDATA_INVALIDIUNKNOWN;
pub const D3D11_MESSAGE_ID_SETPRIVATEDATA_INVALIDFLAGS = D3D11_MESSAGE_ID.SETPRIVATEDATA_INVALIDFLAGS;
pub const D3D11_MESSAGE_ID_SETPRIVATEDATA_CHANGINGPARAMS = D3D11_MESSAGE_ID.SETPRIVATEDATA_CHANGINGPARAMS;
pub const D3D11_MESSAGE_ID_SETPRIVATEDATA_OUTOFMEMORY = D3D11_MESSAGE_ID.SETPRIVATEDATA_OUTOFMEMORY;
pub const D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDFORMAT = D3D11_MESSAGE_ID.CREATEBUFFER_UNRECOGNIZEDFORMAT;
pub const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSAMPLES = D3D11_MESSAGE_ID.CREATEBUFFER_INVALIDSAMPLES;
pub const D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDUSAGE = D3D11_MESSAGE_ID.CREATEBUFFER_UNRECOGNIZEDUSAGE;
pub const D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDBINDFLAGS = D3D11_MESSAGE_ID.CREATEBUFFER_UNRECOGNIZEDBINDFLAGS;
pub const D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS = D3D11_MESSAGE_ID.CREATEBUFFER_UNRECOGNIZEDCPUACCESSFLAGS;
pub const D3D11_MESSAGE_ID_CREATEBUFFER_UNRECOGNIZEDMISCFLAGS = D3D11_MESSAGE_ID.CREATEBUFFER_UNRECOGNIZEDMISCFLAGS;
pub const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCPUACCESSFLAGS = D3D11_MESSAGE_ID.CREATEBUFFER_INVALIDCPUACCESSFLAGS;
pub const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDBINDFLAGS = D3D11_MESSAGE_ID.CREATEBUFFER_INVALIDBINDFLAGS;
pub const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDINITIALDATA = D3D11_MESSAGE_ID.CREATEBUFFER_INVALIDINITIALDATA;
pub const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDDIMENSIONS = D3D11_MESSAGE_ID.CREATEBUFFER_INVALIDDIMENSIONS;
pub const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMIPLEVELS = D3D11_MESSAGE_ID.CREATEBUFFER_INVALIDMIPLEVELS;
pub const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDMISCFLAGS = D3D11_MESSAGE_ID.CREATEBUFFER_INVALIDMISCFLAGS;
pub const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDARG_RETURN = D3D11_MESSAGE_ID.CREATEBUFFER_INVALIDARG_RETURN;
pub const D3D11_MESSAGE_ID_CREATEBUFFER_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CREATEBUFFER_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_CREATEBUFFER_NULLDESC = D3D11_MESSAGE_ID.CREATEBUFFER_NULLDESC;
pub const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS = D3D11_MESSAGE_ID.CREATEBUFFER_INVALIDCONSTANTBUFFERBINDINGS;
pub const D3D11_MESSAGE_ID_CREATEBUFFER_LARGEALLOCATION = D3D11_MESSAGE_ID.CREATEBUFFER_LARGEALLOCATION;
pub const D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDFORMAT = D3D11_MESSAGE_ID.CREATETEXTURE1D_UNRECOGNIZEDFORMAT;
pub const D3D11_MESSAGE_ID_CREATETEXTURE1D_UNSUPPORTEDFORMAT = D3D11_MESSAGE_ID.CREATETEXTURE1D_UNSUPPORTEDFORMAT;
pub const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDSAMPLES = D3D11_MESSAGE_ID.CREATETEXTURE1D_INVALIDSAMPLES;
pub const D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDUSAGE = D3D11_MESSAGE_ID.CREATETEXTURE1D_UNRECOGNIZEDUSAGE;
pub const D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS = D3D11_MESSAGE_ID.CREATETEXTURE1D_UNRECOGNIZEDBINDFLAGS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS = D3D11_MESSAGE_ID.CREATETEXTURE1D_UNRECOGNIZEDCPUACCESSFLAGS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS = D3D11_MESSAGE_ID.CREATETEXTURE1D_UNRECOGNIZEDMISCFLAGS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDCPUACCESSFLAGS = D3D11_MESSAGE_ID.CREATETEXTURE1D_INVALIDCPUACCESSFLAGS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDBINDFLAGS = D3D11_MESSAGE_ID.CREATETEXTURE1D_INVALIDBINDFLAGS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDINITIALDATA = D3D11_MESSAGE_ID.CREATETEXTURE1D_INVALIDINITIALDATA;
pub const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDDIMENSIONS = D3D11_MESSAGE_ID.CREATETEXTURE1D_INVALIDDIMENSIONS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMIPLEVELS = D3D11_MESSAGE_ID.CREATETEXTURE1D_INVALIDMIPLEVELS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDMISCFLAGS = D3D11_MESSAGE_ID.CREATETEXTURE1D_INVALIDMISCFLAGS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDARG_RETURN = D3D11_MESSAGE_ID.CREATETEXTURE1D_INVALIDARG_RETURN;
pub const D3D11_MESSAGE_ID_CREATETEXTURE1D_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CREATETEXTURE1D_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_CREATETEXTURE1D_NULLDESC = D3D11_MESSAGE_ID.CREATETEXTURE1D_NULLDESC;
pub const D3D11_MESSAGE_ID_CREATETEXTURE1D_LARGEALLOCATION = D3D11_MESSAGE_ID.CREATETEXTURE1D_LARGEALLOCATION;
pub const D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDFORMAT = D3D11_MESSAGE_ID.CREATETEXTURE2D_UNRECOGNIZEDFORMAT;
pub const D3D11_MESSAGE_ID_CREATETEXTURE2D_UNSUPPORTEDFORMAT = D3D11_MESSAGE_ID.CREATETEXTURE2D_UNSUPPORTEDFORMAT;
pub const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDSAMPLES = D3D11_MESSAGE_ID.CREATETEXTURE2D_INVALIDSAMPLES;
pub const D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDUSAGE = D3D11_MESSAGE_ID.CREATETEXTURE2D_UNRECOGNIZEDUSAGE;
pub const D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS = D3D11_MESSAGE_ID.CREATETEXTURE2D_UNRECOGNIZEDBINDFLAGS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS = D3D11_MESSAGE_ID.CREATETEXTURE2D_UNRECOGNIZEDCPUACCESSFLAGS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS = D3D11_MESSAGE_ID.CREATETEXTURE2D_UNRECOGNIZEDMISCFLAGS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDCPUACCESSFLAGS = D3D11_MESSAGE_ID.CREATETEXTURE2D_INVALIDCPUACCESSFLAGS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDBINDFLAGS = D3D11_MESSAGE_ID.CREATETEXTURE2D_INVALIDBINDFLAGS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDINITIALDATA = D3D11_MESSAGE_ID.CREATETEXTURE2D_INVALIDINITIALDATA;
pub const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDDIMENSIONS = D3D11_MESSAGE_ID.CREATETEXTURE2D_INVALIDDIMENSIONS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMIPLEVELS = D3D11_MESSAGE_ID.CREATETEXTURE2D_INVALIDMIPLEVELS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDMISCFLAGS = D3D11_MESSAGE_ID.CREATETEXTURE2D_INVALIDMISCFLAGS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDARG_RETURN = D3D11_MESSAGE_ID.CREATETEXTURE2D_INVALIDARG_RETURN;
pub const D3D11_MESSAGE_ID_CREATETEXTURE2D_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CREATETEXTURE2D_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_CREATETEXTURE2D_NULLDESC = D3D11_MESSAGE_ID.CREATETEXTURE2D_NULLDESC;
pub const D3D11_MESSAGE_ID_CREATETEXTURE2D_LARGEALLOCATION = D3D11_MESSAGE_ID.CREATETEXTURE2D_LARGEALLOCATION;
pub const D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDFORMAT = D3D11_MESSAGE_ID.CREATETEXTURE3D_UNRECOGNIZEDFORMAT;
pub const D3D11_MESSAGE_ID_CREATETEXTURE3D_UNSUPPORTEDFORMAT = D3D11_MESSAGE_ID.CREATETEXTURE3D_UNSUPPORTEDFORMAT;
pub const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDSAMPLES = D3D11_MESSAGE_ID.CREATETEXTURE3D_INVALIDSAMPLES;
pub const D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDUSAGE = D3D11_MESSAGE_ID.CREATETEXTURE3D_UNRECOGNIZEDUSAGE;
pub const D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS = D3D11_MESSAGE_ID.CREATETEXTURE3D_UNRECOGNIZEDBINDFLAGS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS = D3D11_MESSAGE_ID.CREATETEXTURE3D_UNRECOGNIZEDCPUACCESSFLAGS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS = D3D11_MESSAGE_ID.CREATETEXTURE3D_UNRECOGNIZEDMISCFLAGS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDCPUACCESSFLAGS = D3D11_MESSAGE_ID.CREATETEXTURE3D_INVALIDCPUACCESSFLAGS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDBINDFLAGS = D3D11_MESSAGE_ID.CREATETEXTURE3D_INVALIDBINDFLAGS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDINITIALDATA = D3D11_MESSAGE_ID.CREATETEXTURE3D_INVALIDINITIALDATA;
pub const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDDIMENSIONS = D3D11_MESSAGE_ID.CREATETEXTURE3D_INVALIDDIMENSIONS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMIPLEVELS = D3D11_MESSAGE_ID.CREATETEXTURE3D_INVALIDMIPLEVELS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDMISCFLAGS = D3D11_MESSAGE_ID.CREATETEXTURE3D_INVALIDMISCFLAGS;
pub const D3D11_MESSAGE_ID_CREATETEXTURE3D_INVALIDARG_RETURN = D3D11_MESSAGE_ID.CREATETEXTURE3D_INVALIDARG_RETURN;
pub const D3D11_MESSAGE_ID_CREATETEXTURE3D_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CREATETEXTURE3D_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_CREATETEXTURE3D_NULLDESC = D3D11_MESSAGE_ID.CREATETEXTURE3D_NULLDESC;
pub const D3D11_MESSAGE_ID_CREATETEXTURE3D_LARGEALLOCATION = D3D11_MESSAGE_ID.CREATETEXTURE3D_LARGEALLOCATION;
pub const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT = D3D11_MESSAGE_ID.CREATESHADERRESOURCEVIEW_UNRECOGNIZEDFORMAT;
pub const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDESC = D3D11_MESSAGE_ID.CREATESHADERRESOURCEVIEW_INVALIDDESC;
pub const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFORMAT = D3D11_MESSAGE_ID.CREATESHADERRESOURCEVIEW_INVALIDFORMAT;
pub const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS = D3D11_MESSAGE_ID.CREATESHADERRESOURCEVIEW_INVALIDDIMENSIONS;
pub const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDRESOURCE = D3D11_MESSAGE_ID.CREATESHADERRESOURCEVIEW_INVALIDRESOURCE;
pub const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS = D3D11_MESSAGE_ID.CREATESHADERRESOURCEVIEW_TOOMANYOBJECTS;
pub const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN = D3D11_MESSAGE_ID.CREATESHADERRESOURCEVIEW_INVALIDARG_RETURN;
pub const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CREATESHADERRESOURCEVIEW_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT = D3D11_MESSAGE_ID.CREATERENDERTARGETVIEW_UNRECOGNIZEDFORMAT;
pub const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT = D3D11_MESSAGE_ID.CREATERENDERTARGETVIEW_UNSUPPORTEDFORMAT;
pub const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDESC = D3D11_MESSAGE_ID.CREATERENDERTARGETVIEW_INVALIDDESC;
pub const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDFORMAT = D3D11_MESSAGE_ID.CREATERENDERTARGETVIEW_INVALIDFORMAT;
pub const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDIMENSIONS = D3D11_MESSAGE_ID.CREATERENDERTARGETVIEW_INVALIDDIMENSIONS;
pub const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDRESOURCE = D3D11_MESSAGE_ID.CREATERENDERTARGETVIEW_INVALIDRESOURCE;
pub const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_TOOMANYOBJECTS = D3D11_MESSAGE_ID.CREATERENDERTARGETVIEW_TOOMANYOBJECTS;
pub const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDARG_RETURN = D3D11_MESSAGE_ID.CREATERENDERTARGETVIEW_INVALIDARG_RETURN;
pub const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CREATERENDERTARGETVIEW_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILVIEW_UNRECOGNIZEDFORMAT;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDESC = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILVIEW_INVALIDDESC;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFORMAT = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILVIEW_INVALIDFORMAT;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILVIEW_INVALIDDIMENSIONS;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILVIEW_INVALIDRESOURCE;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILVIEW_TOOMANYOBJECTS;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILVIEW_INVALIDARG_RETURN;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILVIEW_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_OUTOFMEMORY = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_OUTOFMEMORY;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TOOMANYELEMENTS = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_TOOMANYELEMENTS;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDFORMAT = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_INVALIDFORMAT;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_INCOMPATIBLEFORMAT;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOT = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_INVALIDSLOT;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_INVALIDINPUTSLOTCLASS;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_STEPRATESLOTCLASSMISMATCH;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_INVALIDSLOTCLASSCHANGE;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_INVALIDSTEPRATECHANGE;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_INVALIDALIGNMENT = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_INVALIDALIGNMENT;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_DUPLICATESEMANTIC = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_DUPLICATESEMANTIC;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_UNPARSEABLEINPUTSIGNATURE;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLSEMANTIC = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_NULLSEMANTIC;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_MISSINGELEMENT = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_MISSINGELEMENT;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_NULLDESC = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_NULLDESC;
pub const D3D11_MESSAGE_ID_CREATEVERTEXSHADER_OUTOFMEMORY = D3D11_MESSAGE_ID.CREATEVERTEXSHADER_OUTOFMEMORY;
pub const D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERBYTECODE = D3D11_MESSAGE_ID.CREATEVERTEXSHADER_INVALIDSHADERBYTECODE;
pub const D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDSHADERTYPE = D3D11_MESSAGE_ID.CREATEVERTEXSHADER_INVALIDSHADERTYPE;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_OUTOFMEMORY = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADER_OUTOFMEMORY;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADER_INVALIDSHADERBYTECODE;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDSHADERTYPE = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADER_INVALIDSHADERTYPE;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTOFMEMORY;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERBYTECODE;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSHADERTYPE;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMENTRIES;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSTREAMSTRIDEUNUSED;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDDECL;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_EXPECTEDDECL;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_OUTPUTSLOT0EXPECTED;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSLOT;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_ONLYONEELEMENTPERSLOT;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCOMPONENTCOUNT;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTARTCOMPONENTANDCOMPONENTCOUNT;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDGAPDEFINITION;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_REPEATEDOUTPUT;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDOUTPUTSTREAMSTRIDE;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGSEMANTIC;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MASKMISMATCH;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_CANTHAVEONLYGAPS;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DECLTOOCOMPLEX;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_MISSINGOUTPUTSIGNATURE;
pub const D3D11_MESSAGE_ID_CREATEPIXELSHADER_OUTOFMEMORY = D3D11_MESSAGE_ID.CREATEPIXELSHADER_OUTOFMEMORY;
pub const D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERBYTECODE = D3D11_MESSAGE_ID.CREATEPIXELSHADER_INVALIDSHADERBYTECODE;
pub const D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDSHADERTYPE = D3D11_MESSAGE_ID.CREATEPIXELSHADER_INVALIDSHADERTYPE;
pub const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFILLMODE = D3D11_MESSAGE_ID.CREATERASTERIZERSTATE_INVALIDFILLMODE;
pub const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDCULLMODE = D3D11_MESSAGE_ID.CREATERASTERIZERSTATE_INVALIDCULLMODE;
pub const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP = D3D11_MESSAGE_ID.CREATERASTERIZERSTATE_INVALIDDEPTHBIASCLAMP;
pub const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS = D3D11_MESSAGE_ID.CREATERASTERIZERSTATE_INVALIDSLOPESCALEDDEPTHBIAS;
pub const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_TOOMANYOBJECTS = D3D11_MESSAGE_ID.CREATERASTERIZERSTATE_TOOMANYOBJECTS;
pub const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_NULLDESC = D3D11_MESSAGE_ID.CREATERASTERIZERSTATE_NULLDESC;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILSTATE_INVALIDDEPTHWRITEMASK;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILSTATE_INVALIDDEPTHFUNC;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFAILOP;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILZFAILOP;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILPASSOP;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILSTATE_INVALIDFRONTFACESTENCILFUNC;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFAILOP;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILZFAILOP;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILPASSOP;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILSTATE_INVALIDBACKFACESTENCILFUNC;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILSTATE_TOOMANYOBJECTS;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_NULLDESC = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILSTATE_NULLDESC;
pub const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLEND = D3D11_MESSAGE_ID.CREATEBLENDSTATE_INVALIDSRCBLEND;
pub const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLEND = D3D11_MESSAGE_ID.CREATEBLENDSTATE_INVALIDDESTBLEND;
pub const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOP = D3D11_MESSAGE_ID.CREATEBLENDSTATE_INVALIDBLENDOP;
pub const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDSRCBLENDALPHA = D3D11_MESSAGE_ID.CREATEBLENDSTATE_INVALIDSRCBLENDALPHA;
pub const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDDESTBLENDALPHA = D3D11_MESSAGE_ID.CREATEBLENDSTATE_INVALIDDESTBLENDALPHA;
pub const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDBLENDOPALPHA = D3D11_MESSAGE_ID.CREATEBLENDSTATE_INVALIDBLENDOPALPHA;
pub const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK = D3D11_MESSAGE_ID.CREATEBLENDSTATE_INVALIDRENDERTARGETWRITEMASK;
pub const D3D11_MESSAGE_ID_CREATEBLENDSTATE_TOOMANYOBJECTS = D3D11_MESSAGE_ID.CREATEBLENDSTATE_TOOMANYOBJECTS;
pub const D3D11_MESSAGE_ID_CREATEBLENDSTATE_NULLDESC = D3D11_MESSAGE_ID.CREATEBLENDSTATE_NULLDESC;
pub const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDFILTER = D3D11_MESSAGE_ID.CREATESAMPLERSTATE_INVALIDFILTER;
pub const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSU = D3D11_MESSAGE_ID.CREATESAMPLERSTATE_INVALIDADDRESSU;
pub const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSV = D3D11_MESSAGE_ID.CREATESAMPLERSTATE_INVALIDADDRESSV;
pub const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDADDRESSW = D3D11_MESSAGE_ID.CREATESAMPLERSTATE_INVALIDADDRESSW;
pub const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMIPLODBIAS = D3D11_MESSAGE_ID.CREATESAMPLERSTATE_INVALIDMIPLODBIAS;
pub const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXANISOTROPY = D3D11_MESSAGE_ID.CREATESAMPLERSTATE_INVALIDMAXANISOTROPY;
pub const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC = D3D11_MESSAGE_ID.CREATESAMPLERSTATE_INVALIDCOMPARISONFUNC;
pub const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMINLOD = D3D11_MESSAGE_ID.CREATESAMPLERSTATE_INVALIDMINLOD;
pub const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_INVALIDMAXLOD = D3D11_MESSAGE_ID.CREATESAMPLERSTATE_INVALIDMAXLOD;
pub const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_TOOMANYOBJECTS = D3D11_MESSAGE_ID.CREATESAMPLERSTATE_TOOMANYOBJECTS;
pub const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NULLDESC = D3D11_MESSAGE_ID.CREATESAMPLERSTATE_NULLDESC;
pub const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDQUERY = D3D11_MESSAGE_ID.CREATEQUERYORPREDICATE_INVALIDQUERY;
pub const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDMISCFLAGS = D3D11_MESSAGE_ID.CREATEQUERYORPREDICATE_INVALIDMISCFLAGS;
pub const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG = D3D11_MESSAGE_ID.CREATEQUERYORPREDICATE_UNEXPECTEDMISCFLAG;
pub const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_NULLDESC = D3D11_MESSAGE_ID.CREATEQUERYORPREDICATE_NULLDESC;
pub const D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED = D3D11_MESSAGE_ID.DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNRECOGNIZED;
pub const D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED = D3D11_MESSAGE_ID.DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNDEFINED;
pub const D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_INVALIDBUFFER = D3D11_MESSAGE_ID.IASETVERTEXBUFFERS_INVALIDBUFFER;
pub const D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE = D3D11_MESSAGE_ID.DEVICE_IASETVERTEXBUFFERS_OFFSET_TOO_LARGE;
pub const D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_IASETVERTEXBUFFERS_BUFFERS_EMPTY;
pub const D3D11_MESSAGE_ID_IASETINDEXBUFFER_INVALIDBUFFER = D3D11_MESSAGE_ID.IASETINDEXBUFFER_INVALIDBUFFER;
pub const D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_FORMAT_INVALID = D3D11_MESSAGE_ID.DEVICE_IASETINDEXBUFFER_FORMAT_INVALID;
pub const D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE = D3D11_MESSAGE_ID.DEVICE_IASETINDEXBUFFER_OFFSET_TOO_LARGE;
pub const D3D11_MESSAGE_ID_DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED = D3D11_MESSAGE_ID.DEVICE_IASETINDEXBUFFER_OFFSET_UNALIGNED;
pub const D3D11_MESSAGE_ID_DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY = D3D11_MESSAGE_ID.DEVICE_VSSETSHADERRESOURCES_VIEWS_EMPTY;
pub const D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFER = D3D11_MESSAGE_ID.VSSETCONSTANTBUFFERS_INVALIDBUFFER;
pub const D3D11_MESSAGE_ID_DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_VSSETCONSTANTBUFFERS_BUFFERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_VSSETSAMPLERS_SAMPLERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY = D3D11_MESSAGE_ID.DEVICE_GSSETSHADERRESOURCES_VIEWS_EMPTY;
pub const D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFER = D3D11_MESSAGE_ID.GSSETCONSTANTBUFFERS_INVALIDBUFFER;
pub const D3D11_MESSAGE_ID_DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_GSSETCONSTANTBUFFERS_BUFFERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_GSSETSAMPLERS_SAMPLERS_EMPTY;
pub const D3D11_MESSAGE_ID_SOSETTARGETS_INVALIDBUFFER = D3D11_MESSAGE_ID.SOSETTARGETS_INVALIDBUFFER;
pub const D3D11_MESSAGE_ID_DEVICE_SOSETTARGETS_OFFSET_UNALIGNED = D3D11_MESSAGE_ID.DEVICE_SOSETTARGETS_OFFSET_UNALIGNED;
pub const D3D11_MESSAGE_ID_DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY = D3D11_MESSAGE_ID.DEVICE_PSSETSHADERRESOURCES_VIEWS_EMPTY;
pub const D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFER = D3D11_MESSAGE_ID.PSSETCONSTANTBUFFERS_INVALIDBUFFER;
pub const D3D11_MESSAGE_ID_DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_PSSETCONSTANTBUFFERS_BUFFERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_PSSETSAMPLERS_SAMPLERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT = D3D11_MESSAGE_ID.DEVICE_RSSETVIEWPORTS_INVALIDVIEWPORT;
pub const D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR = D3D11_MESSAGE_ID.DEVICE_RSSETSCISSORRECTS_INVALIDSCISSOR;
pub const D3D11_MESSAGE_ID_CLEARRENDERTARGETVIEW_DENORMFLUSH = D3D11_MESSAGE_ID.CLEARRENDERTARGETVIEW_DENORMFLUSH;
pub const D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DENORMFLUSH = D3D11_MESSAGE_ID.CLEARDEPTHSTENCILVIEW_DENORMFLUSH;
pub const D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_INVALID = D3D11_MESSAGE_ID.CLEARDEPTHSTENCILVIEW_INVALID;
pub const D3D11_MESSAGE_ID_DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_IAGETVERTEXBUFFERS_BUFFERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY = D3D11_MESSAGE_ID.DEVICE_VSGETSHADERRESOURCES_VIEWS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_VSGETCONSTANTBUFFERS_BUFFERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_VSGETSAMPLERS_SAMPLERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY = D3D11_MESSAGE_ID.DEVICE_GSGETSHADERRESOURCES_VIEWS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_GSGETCONSTANTBUFFERS_BUFFERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_GSGETSAMPLERS_SAMPLERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_SOGETTARGETS_BUFFERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_SOGETTARGETS_BUFFERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY = D3D11_MESSAGE_ID.DEVICE_PSGETSHADERRESOURCES_VIEWS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_PSGETCONSTANTBUFFERS_BUFFERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_PSGETSAMPLERS_SAMPLERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY = D3D11_MESSAGE_ID.DEVICE_RSGETVIEWPORTS_VIEWPORTS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY = D3D11_MESSAGE_ID.DEVICE_RSGETSCISSORRECTS_RECTS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_GENERATEMIPS_RESOURCE_INVALID = D3D11_MESSAGE_ID.DEVICE_GENERATEMIPS_RESOURCE_INVALID;
pub const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE = D3D11_MESSAGE_ID.COPYSUBRESOURCEREGION_INVALIDDESTINATIONSUBRESOURCE;
pub const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE = D3D11_MESSAGE_ID.COPYSUBRESOURCEREGION_INVALIDSOURCESUBRESOURCE;
pub const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCEBOX = D3D11_MESSAGE_ID.COPYSUBRESOURCEREGION_INVALIDSOURCEBOX;
pub const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCE = D3D11_MESSAGE_ID.COPYSUBRESOURCEREGION_INVALIDSOURCE;
pub const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE = D3D11_MESSAGE_ID.COPYSUBRESOURCEREGION_INVALIDDESTINATIONSTATE;
pub const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_INVALIDSOURCESTATE = D3D11_MESSAGE_ID.COPYSUBRESOURCEREGION_INVALIDSOURCESTATE;
pub const D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCE = D3D11_MESSAGE_ID.COPYRESOURCE_INVALIDSOURCE;
pub const D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDDESTINATIONSTATE = D3D11_MESSAGE_ID.COPYRESOURCE_INVALIDDESTINATIONSTATE;
pub const D3D11_MESSAGE_ID_COPYRESOURCE_INVALIDSOURCESTATE = D3D11_MESSAGE_ID.COPYRESOURCE_INVALIDSOURCESTATE;
pub const D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE = D3D11_MESSAGE_ID.UPDATESUBRESOURCE_INVALIDDESTINATIONSUBRESOURCE;
pub const D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONBOX = D3D11_MESSAGE_ID.UPDATESUBRESOURCE_INVALIDDESTINATIONBOX;
pub const D3D11_MESSAGE_ID_UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE = D3D11_MESSAGE_ID.UPDATESUBRESOURCE_INVALIDDESTINATIONSTATE;
pub const D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID = D3D11_MESSAGE_ID.DEVICE_RESOLVESUBRESOURCE_DESTINATION_INVALID;
pub const D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID = D3D11_MESSAGE_ID.DEVICE_RESOLVESUBRESOURCE_DESTINATION_SUBRESOURCE_INVALID;
pub const D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID = D3D11_MESSAGE_ID.DEVICE_RESOLVESUBRESOURCE_SOURCE_INVALID;
pub const D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID = D3D11_MESSAGE_ID.DEVICE_RESOLVESUBRESOURCE_SOURCE_SUBRESOURCE_INVALID;
pub const D3D11_MESSAGE_ID_DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID = D3D11_MESSAGE_ID.DEVICE_RESOLVESUBRESOURCE_FORMAT_INVALID;
pub const D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDMAPTYPE = D3D11_MESSAGE_ID.BUFFER_MAP_INVALIDMAPTYPE;
pub const D3D11_MESSAGE_ID_BUFFER_MAP_INVALIDFLAGS = D3D11_MESSAGE_ID.BUFFER_MAP_INVALIDFLAGS;
pub const D3D11_MESSAGE_ID_BUFFER_MAP_ALREADYMAPPED = D3D11_MESSAGE_ID.BUFFER_MAP_ALREADYMAPPED;
pub const D3D11_MESSAGE_ID_BUFFER_MAP_DEVICEREMOVED_RETURN = D3D11_MESSAGE_ID.BUFFER_MAP_DEVICEREMOVED_RETURN;
pub const D3D11_MESSAGE_ID_BUFFER_UNMAP_NOTMAPPED = D3D11_MESSAGE_ID.BUFFER_UNMAP_NOTMAPPED;
pub const D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDMAPTYPE = D3D11_MESSAGE_ID.TEXTURE1D_MAP_INVALIDMAPTYPE;
pub const D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDSUBRESOURCE = D3D11_MESSAGE_ID.TEXTURE1D_MAP_INVALIDSUBRESOURCE;
pub const D3D11_MESSAGE_ID_TEXTURE1D_MAP_INVALIDFLAGS = D3D11_MESSAGE_ID.TEXTURE1D_MAP_INVALIDFLAGS;
pub const D3D11_MESSAGE_ID_TEXTURE1D_MAP_ALREADYMAPPED = D3D11_MESSAGE_ID.TEXTURE1D_MAP_ALREADYMAPPED;
pub const D3D11_MESSAGE_ID_TEXTURE1D_MAP_DEVICEREMOVED_RETURN = D3D11_MESSAGE_ID.TEXTURE1D_MAP_DEVICEREMOVED_RETURN;
pub const D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_INVALIDSUBRESOURCE = D3D11_MESSAGE_ID.TEXTURE1D_UNMAP_INVALIDSUBRESOURCE;
pub const D3D11_MESSAGE_ID_TEXTURE1D_UNMAP_NOTMAPPED = D3D11_MESSAGE_ID.TEXTURE1D_UNMAP_NOTMAPPED;
pub const D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDMAPTYPE = D3D11_MESSAGE_ID.TEXTURE2D_MAP_INVALIDMAPTYPE;
pub const D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDSUBRESOURCE = D3D11_MESSAGE_ID.TEXTURE2D_MAP_INVALIDSUBRESOURCE;
pub const D3D11_MESSAGE_ID_TEXTURE2D_MAP_INVALIDFLAGS = D3D11_MESSAGE_ID.TEXTURE2D_MAP_INVALIDFLAGS;
pub const D3D11_MESSAGE_ID_TEXTURE2D_MAP_ALREADYMAPPED = D3D11_MESSAGE_ID.TEXTURE2D_MAP_ALREADYMAPPED;
pub const D3D11_MESSAGE_ID_TEXTURE2D_MAP_DEVICEREMOVED_RETURN = D3D11_MESSAGE_ID.TEXTURE2D_MAP_DEVICEREMOVED_RETURN;
pub const D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_INVALIDSUBRESOURCE = D3D11_MESSAGE_ID.TEXTURE2D_UNMAP_INVALIDSUBRESOURCE;
pub const D3D11_MESSAGE_ID_TEXTURE2D_UNMAP_NOTMAPPED = D3D11_MESSAGE_ID.TEXTURE2D_UNMAP_NOTMAPPED;
pub const D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDMAPTYPE = D3D11_MESSAGE_ID.TEXTURE3D_MAP_INVALIDMAPTYPE;
pub const D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDSUBRESOURCE = D3D11_MESSAGE_ID.TEXTURE3D_MAP_INVALIDSUBRESOURCE;
pub const D3D11_MESSAGE_ID_TEXTURE3D_MAP_INVALIDFLAGS = D3D11_MESSAGE_ID.TEXTURE3D_MAP_INVALIDFLAGS;
pub const D3D11_MESSAGE_ID_TEXTURE3D_MAP_ALREADYMAPPED = D3D11_MESSAGE_ID.TEXTURE3D_MAP_ALREADYMAPPED;
pub const D3D11_MESSAGE_ID_TEXTURE3D_MAP_DEVICEREMOVED_RETURN = D3D11_MESSAGE_ID.TEXTURE3D_MAP_DEVICEREMOVED_RETURN;
pub const D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_INVALIDSUBRESOURCE = D3D11_MESSAGE_ID.TEXTURE3D_UNMAP_INVALIDSUBRESOURCE;
pub const D3D11_MESSAGE_ID_TEXTURE3D_UNMAP_NOTMAPPED = D3D11_MESSAGE_ID.TEXTURE3D_UNMAP_NOTMAPPED;
pub const D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_DEPRECATED = D3D11_MESSAGE_ID.CHECKFORMATSUPPORT_FORMAT_DEPRECATED;
pub const D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED = D3D11_MESSAGE_ID.CHECKMULTISAMPLEQUALITYLEVELS_FORMAT_DEPRECATED;
pub const D3D11_MESSAGE_ID_SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS = D3D11_MESSAGE_ID.SETEXCEPTIONMODE_UNRECOGNIZEDFLAGS;
pub const D3D11_MESSAGE_ID_SETEXCEPTIONMODE_INVALIDARG_RETURN = D3D11_MESSAGE_ID.SETEXCEPTIONMODE_INVALIDARG_RETURN;
pub const D3D11_MESSAGE_ID_SETEXCEPTIONMODE_DEVICEREMOVED_RETURN = D3D11_MESSAGE_ID.SETEXCEPTIONMODE_DEVICEREMOVED_RETURN;
pub const D3D11_MESSAGE_ID_REF_SIMULATING_INFINITELY_FAST_HARDWARE = D3D11_MESSAGE_ID.REF_SIMULATING_INFINITELY_FAST_HARDWARE;
pub const D3D11_MESSAGE_ID_REF_THREADING_MODE = D3D11_MESSAGE_ID.REF_THREADING_MODE;
pub const D3D11_MESSAGE_ID_REF_UMDRIVER_EXCEPTION = D3D11_MESSAGE_ID.REF_UMDRIVER_EXCEPTION;
pub const D3D11_MESSAGE_ID_REF_KMDRIVER_EXCEPTION = D3D11_MESSAGE_ID.REF_KMDRIVER_EXCEPTION;
pub const D3D11_MESSAGE_ID_REF_HARDWARE_EXCEPTION = D3D11_MESSAGE_ID.REF_HARDWARE_EXCEPTION;
pub const D3D11_MESSAGE_ID_REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE = D3D11_MESSAGE_ID.REF_ACCESSING_INDEXABLE_TEMP_OUT_OF_RANGE;
pub const D3D11_MESSAGE_ID_REF_PROBLEM_PARSING_SHADER = D3D11_MESSAGE_ID.REF_PROBLEM_PARSING_SHADER;
pub const D3D11_MESSAGE_ID_REF_OUT_OF_MEMORY = D3D11_MESSAGE_ID.REF_OUT_OF_MEMORY;
pub const D3D11_MESSAGE_ID_REF_INFO = D3D11_MESSAGE_ID.REF_INFO;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEXPOS_OVERFLOW = D3D11_MESSAGE_ID.DEVICE_DRAW_VERTEXPOS_OVERFLOW;
pub const D3D11_MESSAGE_ID_DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW = D3D11_MESSAGE_ID.DEVICE_DRAWINDEXED_INDEXPOS_OVERFLOW;
pub const D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW = D3D11_MESSAGE_ID.DEVICE_DRAWINSTANCED_VERTEXPOS_OVERFLOW;
pub const D3D11_MESSAGE_ID_DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW = D3D11_MESSAGE_ID.DEVICE_DRAWINSTANCED_INSTANCEPOS_OVERFLOW;
pub const D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW = D3D11_MESSAGE_ID.DEVICE_DRAWINDEXEDINSTANCED_INSTANCEPOS_OVERFLOW;
pub const D3D11_MESSAGE_ID_DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW = D3D11_MESSAGE_ID.DEVICE_DRAWINDEXEDINSTANCED_INDEXPOS_OVERFLOW;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_SHADER_NOT_SET = D3D11_MESSAGE_ID.DEVICE_DRAW_VERTEX_SHADER_NOT_SET;
pub const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND = D3D11_MESSAGE_ID.DEVICE_SHADER_LINKAGE_SEMANTICNAME_NOT_FOUND;
pub const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERINDEX = D3D11_MESSAGE_ID.DEVICE_SHADER_LINKAGE_REGISTERINDEX;
pub const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_COMPONENTTYPE = D3D11_MESSAGE_ID.DEVICE_SHADER_LINKAGE_COMPONENTTYPE;
pub const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_REGISTERMASK = D3D11_MESSAGE_ID.DEVICE_SHADER_LINKAGE_REGISTERMASK;
pub const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_SYSTEMVALUE = D3D11_MESSAGE_ID.DEVICE_SHADER_LINKAGE_SYSTEMVALUE;
pub const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS = D3D11_MESSAGE_ID.DEVICE_SHADER_LINKAGE_NEVERWRITTEN_ALWAYSREADS;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_NOT_SET = D3D11_MESSAGE_ID.DEVICE_DRAW_VERTEX_BUFFER_NOT_SET;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_INPUTLAYOUT_NOT_SET = D3D11_MESSAGE_ID.DEVICE_DRAW_INPUTLAYOUT_NOT_SET;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET = D3D11_MESSAGE_ID.DEVICE_DRAW_CONSTANT_BUFFER_NOT_SET;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL = D3D11_MESSAGE_ID.DEVICE_DRAW_CONSTANT_BUFFER_TOO_SMALL;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_NOT_SET = D3D11_MESSAGE_ID.DEVICE_DRAW_SAMPLER_NOT_SET;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET = D3D11_MESSAGE_ID.DEVICE_DRAW_SHADERRESOURCEVIEW_NOT_SET;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_VIEW_DIMENSION_MISMATCH = D3D11_MESSAGE_ID.DEVICE_DRAW_VIEW_DIMENSION_MISMATCH;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL = D3D11_MESSAGE_ID.DEVICE_DRAW_VERTEX_BUFFER_STRIDE_TOO_SMALL;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL = D3D11_MESSAGE_ID.DEVICE_DRAW_VERTEX_BUFFER_TOO_SMALL;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_NOT_SET = D3D11_MESSAGE_ID.DEVICE_DRAW_INDEX_BUFFER_NOT_SET;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID = D3D11_MESSAGE_ID.DEVICE_DRAW_INDEX_BUFFER_FORMAT_INVALID;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL = D3D11_MESSAGE_ID.DEVICE_DRAW_INDEX_BUFFER_TOO_SMALL;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH = D3D11_MESSAGE_ID.DEVICE_DRAW_GS_INPUT_PRIMITIVE_MISMATCH;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH = D3D11_MESSAGE_ID.DEVICE_DRAW_RESOURCE_RETURN_TYPE_MISMATCH;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_POSITION_NOT_PRESENT = D3D11_MESSAGE_ID.DEVICE_DRAW_POSITION_NOT_PRESENT;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_NOT_SET = D3D11_MESSAGE_ID.DEVICE_DRAW_OUTPUT_STREAM_NOT_SET;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_BOUND_RESOURCE_MAPPED = D3D11_MESSAGE_ID.DEVICE_DRAW_BOUND_RESOURCE_MAPPED;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY = D3D11_MESSAGE_ID.DEVICE_DRAW_INVALID_PRIMITIVETOPOLOGY;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED = D3D11_MESSAGE_ID.DEVICE_DRAW_VERTEX_OFFSET_UNALIGNED;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED = D3D11_MESSAGE_ID.DEVICE_DRAW_VERTEX_STRIDE_UNALIGNED;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_INDEX_OFFSET_UNALIGNED = D3D11_MESSAGE_ID.DEVICE_DRAW_INDEX_OFFSET_UNALIGNED;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED = D3D11_MESSAGE_ID.DEVICE_DRAW_OUTPUT_STREAM_OFFSET_UNALIGNED;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_DRAW_RESOURCE_FORMAT_LD_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_DRAW_RESOURCE_FORMAT_SAMPLE_C_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_DRAW_RESOURCE_MULTISAMPLE_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE = D3D11_MESSAGE_ID.DEVICE_DRAW_SO_TARGETS_BOUND_WITHOUT_SOURCE;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER = D3D11_MESSAGE_ID.DEVICE_DRAW_SO_STRIDE_LARGER_THAN_BUFFER;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING = D3D11_MESSAGE_ID.DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_BLENDING;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0 = D3D11_MESSAGE_ID.DEVICE_DRAW_OM_DUAL_SOURCE_BLENDING_CAN_ONLY_HAVE_RENDER_TARGET_0;
pub const D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_AT_FAULT = D3D11_MESSAGE_ID.DEVICE_REMOVAL_PROCESS_AT_FAULT;
pub const D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT = D3D11_MESSAGE_ID.DEVICE_REMOVAL_PROCESS_POSSIBLY_AT_FAULT;
pub const D3D11_MESSAGE_ID_DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT = D3D11_MESSAGE_ID.DEVICE_REMOVAL_PROCESS_NOT_AT_FAULT;
pub const D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN = D3D11_MESSAGE_ID.DEVICE_OPEN_SHARED_RESOURCE_INVALIDARG_RETURN;
pub const D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.DEVICE_OPEN_SHARED_RESOURCE_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN = D3D11_MESSAGE_ID.DEVICE_OPEN_SHARED_RESOURCE_BADINTERFACE_RETURN;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_VIEWPORT_NOT_SET = D3D11_MESSAGE_ID.DEVICE_DRAW_VIEWPORT_NOT_SET;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_TRAILING_DIGIT_IN_SEMANTIC;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_TRAILING_DIGIT_IN_SEMANTIC;
pub const D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_DENORMFLUSH = D3D11_MESSAGE_ID.DEVICE_RSSETVIEWPORTS_DENORMFLUSH;
pub const D3D11_MESSAGE_ID_OMSETRENDERTARGETS_INVALIDVIEW = D3D11_MESSAGE_ID.OMSETRENDERTARGETS_INVALIDVIEW;
pub const D3D11_MESSAGE_ID_DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS = D3D11_MESSAGE_ID.DEVICE_SETTEXTFILTERSIZE_INVALIDDIMENSIONS;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLER_MISMATCH = D3D11_MESSAGE_ID.DEVICE_DRAW_SAMPLER_MISMATCH;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_TYPE_MISMATCH = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_TYPE_MISMATCH;
pub const D3D11_MESSAGE_ID_BLENDSTATE_GETDESC_LEGACY = D3D11_MESSAGE_ID.BLENDSTATE_GETDESC_LEGACY;
pub const D3D11_MESSAGE_ID_SHADERRESOURCEVIEW_GETDESC_LEGACY = D3D11_MESSAGE_ID.SHADERRESOURCEVIEW_GETDESC_LEGACY;
pub const D3D11_MESSAGE_ID_CREATEQUERY_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CREATEQUERY_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_CREATEPREDICATE_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CREATEPREDICATE_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFRANGE_COUNTER = D3D11_MESSAGE_ID.CREATECOUNTER_OUTOFRANGE_COUNTER;
pub const D3D11_MESSAGE_ID_CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED = D3D11_MESSAGE_ID.CREATECOUNTER_SIMULTANEOUS_ACTIVE_COUNTERS_EXHAUSTED;
pub const D3D11_MESSAGE_ID_CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = D3D11_MESSAGE_ID.CREATECOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER;
pub const D3D11_MESSAGE_ID_CREATECOUNTER_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CREATECOUNTER_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_CREATECOUNTER_NONEXCLUSIVE_RETURN = D3D11_MESSAGE_ID.CREATECOUNTER_NONEXCLUSIVE_RETURN;
pub const D3D11_MESSAGE_ID_CREATECOUNTER_NULLDESC = D3D11_MESSAGE_ID.CREATECOUNTER_NULLDESC;
pub const D3D11_MESSAGE_ID_CHECKCOUNTER_OUTOFRANGE_COUNTER = D3D11_MESSAGE_ID.CHECKCOUNTER_OUTOFRANGE_COUNTER;
pub const D3D11_MESSAGE_ID_CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER = D3D11_MESSAGE_ID.CHECKCOUNTER_UNSUPPORTED_WELLKNOWN_COUNTER;
pub const D3D11_MESSAGE_ID_SETPREDICATION_INVALID_PREDICATE_STATE = D3D11_MESSAGE_ID.SETPREDICATION_INVALID_PREDICATE_STATE;
pub const D3D11_MESSAGE_ID_QUERY_BEGIN_UNSUPPORTED = D3D11_MESSAGE_ID.QUERY_BEGIN_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_PREDICATE_BEGIN_DURING_PREDICATION = D3D11_MESSAGE_ID.PREDICATE_BEGIN_DURING_PREDICATION;
pub const D3D11_MESSAGE_ID_QUERY_BEGIN_DUPLICATE = D3D11_MESSAGE_ID.QUERY_BEGIN_DUPLICATE;
pub const D3D11_MESSAGE_ID_QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS = D3D11_MESSAGE_ID.QUERY_BEGIN_ABANDONING_PREVIOUS_RESULTS;
pub const D3D11_MESSAGE_ID_PREDICATE_END_DURING_PREDICATION = D3D11_MESSAGE_ID.PREDICATE_END_DURING_PREDICATION;
pub const D3D11_MESSAGE_ID_QUERY_END_ABANDONING_PREVIOUS_RESULTS = D3D11_MESSAGE_ID.QUERY_END_ABANDONING_PREVIOUS_RESULTS;
pub const D3D11_MESSAGE_ID_QUERY_END_WITHOUT_BEGIN = D3D11_MESSAGE_ID.QUERY_END_WITHOUT_BEGIN;
pub const D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_DATASIZE = D3D11_MESSAGE_ID.QUERY_GETDATA_INVALID_DATASIZE;
pub const D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_FLAGS = D3D11_MESSAGE_ID.QUERY_GETDATA_INVALID_FLAGS;
pub const D3D11_MESSAGE_ID_QUERY_GETDATA_INVALID_CALL = D3D11_MESSAGE_ID.QUERY_GETDATA_INVALID_CALL;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH = D3D11_MESSAGE_ID.DEVICE_DRAW_PS_OUTPUT_TYPE_MISMATCH;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_DRAW_RESOURCE_FORMAT_GATHER_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN = D3D11_MESSAGE_ID.DEVICE_DRAW_INVALID_USE_OF_CENTER_MULTISAMPLE_PATTERN;
pub const D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE = D3D11_MESSAGE_ID.DEVICE_IASETVERTEXBUFFERS_STRIDE_TOO_LARGE;
pub const D3D11_MESSAGE_ID_DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE = D3D11_MESSAGE_ID.DEVICE_IASETVERTEXBUFFERS_INVALIDRANGE;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_EMPTY_LAYOUT = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_EMPTY_LAYOUT;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH = D3D11_MESSAGE_ID.DEVICE_DRAW_RESOURCE_SAMPLE_COUNT_MISMATCH;
pub const D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY = D3D11_MESSAGE_ID.LIVE_OBJECT_SUMMARY;
pub const D3D11_MESSAGE_ID_LIVE_BUFFER = D3D11_MESSAGE_ID.LIVE_BUFFER;
pub const D3D11_MESSAGE_ID_LIVE_TEXTURE1D = D3D11_MESSAGE_ID.LIVE_TEXTURE1D;
pub const D3D11_MESSAGE_ID_LIVE_TEXTURE2D = D3D11_MESSAGE_ID.LIVE_TEXTURE2D;
pub const D3D11_MESSAGE_ID_LIVE_TEXTURE3D = D3D11_MESSAGE_ID.LIVE_TEXTURE3D;
pub const D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW = D3D11_MESSAGE_ID.LIVE_SHADERRESOURCEVIEW;
pub const D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW = D3D11_MESSAGE_ID.LIVE_RENDERTARGETVIEW;
pub const D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW = D3D11_MESSAGE_ID.LIVE_DEPTHSTENCILVIEW;
pub const D3D11_MESSAGE_ID_LIVE_VERTEXSHADER = D3D11_MESSAGE_ID.LIVE_VERTEXSHADER;
pub const D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER = D3D11_MESSAGE_ID.LIVE_GEOMETRYSHADER;
pub const D3D11_MESSAGE_ID_LIVE_PIXELSHADER = D3D11_MESSAGE_ID.LIVE_PIXELSHADER;
pub const D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT = D3D11_MESSAGE_ID.LIVE_INPUTLAYOUT;
pub const D3D11_MESSAGE_ID_LIVE_SAMPLER = D3D11_MESSAGE_ID.LIVE_SAMPLER;
pub const D3D11_MESSAGE_ID_LIVE_BLENDSTATE = D3D11_MESSAGE_ID.LIVE_BLENDSTATE;
pub const D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE = D3D11_MESSAGE_ID.LIVE_DEPTHSTENCILSTATE;
pub const D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE = D3D11_MESSAGE_ID.LIVE_RASTERIZERSTATE;
pub const D3D11_MESSAGE_ID_LIVE_QUERY = D3D11_MESSAGE_ID.LIVE_QUERY;
pub const D3D11_MESSAGE_ID_LIVE_PREDICATE = D3D11_MESSAGE_ID.LIVE_PREDICATE;
pub const D3D11_MESSAGE_ID_LIVE_COUNTER = D3D11_MESSAGE_ID.LIVE_COUNTER;
pub const D3D11_MESSAGE_ID_LIVE_DEVICE = D3D11_MESSAGE_ID.LIVE_DEVICE;
pub const D3D11_MESSAGE_ID_LIVE_SWAPCHAIN = D3D11_MESSAGE_ID.LIVE_SWAPCHAIN;
pub const D3D11_MESSAGE_ID_D3D10_MESSAGES_END = D3D11_MESSAGE_ID.D3D10_MESSAGES_END;
pub const D3D11_MESSAGE_ID_D3D10L9_MESSAGES_START = D3D11_MESSAGE_ID.D3D10L9_MESSAGES_START;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILSTATE_STENCIL_NO_TWO_SIDED;
pub const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED = D3D11_MESSAGE_ID.CREATERASTERIZERSTATE_DepthBiasClamp_NOT_SUPPORTED;
pub const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT = D3D11_MESSAGE_ID.CREATESAMPLERSTATE_NO_COMPARISON_SUPPORT;
pub const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY = D3D11_MESSAGE_ID.CREATESAMPLERSTATE_EXCESSIVE_ANISOTROPY;
pub const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE = D3D11_MESSAGE_ID.CREATESAMPLERSTATE_BORDER_OUT_OF_RANGE;
pub const D3D11_MESSAGE_ID_VSSETSAMPLERS_NOT_SUPPORTED = D3D11_MESSAGE_ID.VSSETSAMPLERS_NOT_SUPPORTED;
pub const D3D11_MESSAGE_ID_VSSETSAMPLERS_TOO_MANY_SAMPLERS = D3D11_MESSAGE_ID.VSSETSAMPLERS_TOO_MANY_SAMPLERS;
pub const D3D11_MESSAGE_ID_PSSETSAMPLERS_TOO_MANY_SAMPLERS = D3D11_MESSAGE_ID.PSSETSAMPLERS_TOO_MANY_SAMPLERS;
pub const D3D11_MESSAGE_ID_CREATERESOURCE_NO_ARRAYS = D3D11_MESSAGE_ID.CREATERESOURCE_NO_ARRAYS;
pub const D3D11_MESSAGE_ID_CREATERESOURCE_NO_VB_AND_IB_BIND = D3D11_MESSAGE_ID.CREATERESOURCE_NO_VB_AND_IB_BIND;
pub const D3D11_MESSAGE_ID_CREATERESOURCE_NO_TEXTURE_1D = D3D11_MESSAGE_ID.CREATERESOURCE_NO_TEXTURE_1D;
pub const D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_OUT_OF_RANGE = D3D11_MESSAGE_ID.CREATERESOURCE_DIMENSION_OUT_OF_RANGE;
pub const D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE = D3D11_MESSAGE_ID.CREATERESOURCE_NOT_BINDABLE_AS_SHADER_RESOURCE;
pub const D3D11_MESSAGE_ID_OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS = D3D11_MESSAGE_ID.OMSETRENDERTARGETS_TOO_MANY_RENDER_TARGETS;
pub const D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS = D3D11_MESSAGE_ID.OMSETRENDERTARGETS_NO_DIFFERING_BIT_DEPTHS;
pub const D3D11_MESSAGE_ID_IASETVERTEXBUFFERS_BAD_BUFFER_INDEX = D3D11_MESSAGE_ID.IASETVERTEXBUFFERS_BAD_BUFFER_INDEX;
pub const D3D11_MESSAGE_ID_DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS = D3D11_MESSAGE_ID.DEVICE_RSSETVIEWPORTS_TOO_MANY_VIEWPORTS;
pub const D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_IASETPRIMITIVETOPOLOGY_ADJACENCY_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS = D3D11_MESSAGE_ID.DEVICE_RSSETSCISSORRECTS_TOO_MANY_SCISSORS;
pub const D3D11_MESSAGE_ID_COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY = D3D11_MESSAGE_ID.COPYRESOURCE_ONLY_TEXTURE_2D_WITHIN_GPU_MEMORY;
pub const D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_3D_READBACK = D3D11_MESSAGE_ID.COPYRESOURCE_NO_TEXTURE_3D_READBACK;
pub const D3D11_MESSAGE_ID_COPYRESOURCE_NO_TEXTURE_ONLY_READBACK = D3D11_MESSAGE_ID.COPYRESOURCE_NO_TEXTURE_ONLY_READBACK;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_UNSUPPORTED_FORMAT;
pub const D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE = D3D11_MESSAGE_ID.CREATEBLENDSTATE_NO_ALPHA_TO_COVERAGE;
pub const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE = D3D11_MESSAGE_ID.CREATERASTERIZERSTATE_DepthClipEnable_MUST_BE_TRUE;
pub const D3D11_MESSAGE_ID_DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE = D3D11_MESSAGE_ID.DRAWINDEXED_STARTINDEXLOCATION_MUST_BE_POSITIVE;
pub const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD = D3D11_MESSAGE_ID.CREATESHADERRESOURCEVIEW_MUST_USE_LOWEST_LOD;
pub const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL = D3D11_MESSAGE_ID.CREATESAMPLERSTATE_MINLOD_MUST_NOT_BE_FRACTIONAL;
pub const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX = D3D11_MESSAGE_ID.CREATESAMPLERSTATE_MAXLOD_MUST_BE_FLT_MAX;
pub const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO = D3D11_MESSAGE_ID.CREATESHADERRESOURCEVIEW_FIRSTARRAYSLICE_MUST_BE_ZERO;
pub const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES = D3D11_MESSAGE_ID.CREATESHADERRESOURCEVIEW_CUBES_MUST_HAVE_6_SIDES;
pub const D3D11_MESSAGE_ID_CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET = D3D11_MESSAGE_ID.CREATERESOURCE_NOT_BINDABLE_AS_RENDER_TARGET;
pub const D3D11_MESSAGE_ID_CREATERESOURCE_NO_DWORD_INDEX_BUFFER = D3D11_MESSAGE_ID.CREATERESOURCE_NO_DWORD_INDEX_BUFFER;
pub const D3D11_MESSAGE_ID_CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE = D3D11_MESSAGE_ID.CREATERESOURCE_MSAA_PRECLUDES_SHADER_RESOURCE;
pub const D3D11_MESSAGE_ID_CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE = D3D11_MESSAGE_ID.CREATERESOURCE_PRESENTATION_PRECLUDES_SHADER_RESOURCE;
pub const D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE = D3D11_MESSAGE_ID.CREATEBLENDSTATE_NO_INDEPENDENT_BLEND_ENABLE;
pub const D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS = D3D11_MESSAGE_ID.CREATEBLENDSTATE_NO_INDEPENDENT_WRITE_MASKS;
pub const D3D11_MESSAGE_ID_CREATERESOURCE_NO_STREAM_OUT = D3D11_MESSAGE_ID.CREATERESOURCE_NO_STREAM_OUT;
pub const D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS = D3D11_MESSAGE_ID.CREATERESOURCE_ONLY_VB_IB_FOR_BUFFERS;
pub const D3D11_MESSAGE_ID_CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES = D3D11_MESSAGE_ID.CREATERESOURCE_NO_AUTOGEN_FOR_VOLUMES;
pub const D3D11_MESSAGE_ID_CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED = D3D11_MESSAGE_ID.CREATERESOURCE_DXGI_FORMAT_R8G8B8A8_CANNOT_BE_SHARED;
pub const D3D11_MESSAGE_ID_VSSHADERRESOURCES_NOT_SUPPORTED = D3D11_MESSAGE_ID.VSSHADERRESOURCES_NOT_SUPPORTED;
pub const D3D11_MESSAGE_ID_GEOMETRY_SHADER_NOT_SUPPORTED = D3D11_MESSAGE_ID.GEOMETRY_SHADER_NOT_SUPPORTED;
pub const D3D11_MESSAGE_ID_STREAM_OUT_NOT_SUPPORTED = D3D11_MESSAGE_ID.STREAM_OUT_NOT_SUPPORTED;
pub const D3D11_MESSAGE_ID_TEXT_FILTER_NOT_SUPPORTED = D3D11_MESSAGE_ID.TEXT_FILTER_NOT_SUPPORTED;
pub const D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND = D3D11_MESSAGE_ID.CREATEBLENDSTATE_NO_SEPARATE_ALPHA_BLEND;
pub const D3D11_MESSAGE_ID_CREATEBLENDSTATE_NO_MRT_BLEND = D3D11_MESSAGE_ID.CREATEBLENDSTATE_NO_MRT_BLEND;
pub const D3D11_MESSAGE_ID_CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED = D3D11_MESSAGE_ID.CREATEBLENDSTATE_OPERATION_NOT_SUPPORTED;
pub const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_NO_MIRRORONCE = D3D11_MESSAGE_ID.CREATESAMPLERSTATE_NO_MIRRORONCE;
pub const D3D11_MESSAGE_ID_DRAWINSTANCED_NOT_SUPPORTED = D3D11_MESSAGE_ID.DRAWINSTANCED_NOT_SUPPORTED;
pub const D3D11_MESSAGE_ID_DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3 = D3D11_MESSAGE_ID.DRAWINDEXEDINSTANCED_NOT_SUPPORTED_BELOW_9_3;
pub const D3D11_MESSAGE_ID_DRAWINDEXED_POINTLIST_UNSUPPORTED = D3D11_MESSAGE_ID.DRAWINDEXED_POINTLIST_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO = D3D11_MESSAGE_ID.SETBLENDSTATE_SAMPLE_MASK_CANNOT_BE_ZERO;
pub const D3D11_MESSAGE_ID_CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION = D3D11_MESSAGE_ID.CREATERESOURCE_DIMENSION_EXCEEDS_FEATURE_LEVEL_DEFINITION;
pub const D3D11_MESSAGE_ID_CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED = D3D11_MESSAGE_ID.CREATERESOURCE_ONLY_SINGLE_MIP_LEVEL_DEPTH_STENCIL_SUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR = D3D11_MESSAGE_ID.DEVICE_RSSETSCISSORRECTS_NEGATIVESCISSOR;
pub const D3D11_MESSAGE_ID_SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA = D3D11_MESSAGE_ID.SLOT_ZERO_MUST_BE_D3D10_INPUT_PER_VERTEX_DATA;
pub const D3D11_MESSAGE_ID_CREATERESOURCE_NON_POW_2_MIPMAP = D3D11_MESSAGE_ID.CREATERESOURCE_NON_POW_2_MIPMAP;
pub const D3D11_MESSAGE_ID_CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED = D3D11_MESSAGE_ID.CREATESAMPLERSTATE_BORDER_NOT_SUPPORTED;
pub const D3D11_MESSAGE_ID_OMSETRENDERTARGETS_NO_SRGB_MRT = D3D11_MESSAGE_ID.OMSETRENDERTARGETS_NO_SRGB_MRT;
pub const D3D11_MESSAGE_ID_COPYRESOURCE_NO_3D_MISMATCHED_UPDATES = D3D11_MESSAGE_ID.COPYRESOURCE_NO_3D_MISMATCHED_UPDATES;
pub const D3D11_MESSAGE_ID_D3D10L9_MESSAGES_END = D3D11_MESSAGE_ID.D3D10L9_MESSAGES_END;
pub const D3D11_MESSAGE_ID_D3D11_MESSAGES_START = D3D11_MESSAGE_ID.D3D11_MESSAGES_START;
pub const D3D11_MESSAGE_ID_CREATEDEPTHSTENCILVIEW_INVALIDFLAGS = D3D11_MESSAGE_ID.CREATEDEPTHSTENCILVIEW_INVALIDFLAGS;
pub const D3D11_MESSAGE_ID_CREATEVERTEXSHADER_INVALIDCLASSLINKAGE = D3D11_MESSAGE_ID.CREATEVERTEXSHADER_INVALIDCLASSLINKAGE;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADER_INVALIDCLASSLINKAGE;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTREAMS;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAMTORASTERIZER;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTREAMS;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDCLASSLINKAGE;
pub const D3D11_MESSAGE_ID_CREATEPIXELSHADER_INVALIDCLASSLINKAGE = D3D11_MESSAGE_ID.CREATEPIXELSHADER_INVALIDCLASSLINKAGE;
pub const D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS = D3D11_MESSAGE_ID.CREATEDEFERREDCONTEXT_INVALID_COMMANDLISTFLAGS;
pub const D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_SINGLETHREADED = D3D11_MESSAGE_ID.CREATEDEFERREDCONTEXT_SINGLETHREADED;
pub const D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALIDARG_RETURN = D3D11_MESSAGE_ID.CREATEDEFERREDCONTEXT_INVALIDARG_RETURN;
pub const D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN = D3D11_MESSAGE_ID.CREATEDEFERREDCONTEXT_INVALID_CALL_RETURN;
pub const D3D11_MESSAGE_ID_CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CREATEDEFERREDCONTEXT_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_FINISHDISPLAYLIST_ONIMMEDIATECONTEXT = D3D11_MESSAGE_ID.FINISHDISPLAYLIST_ONIMMEDIATECONTEXT;
pub const D3D11_MESSAGE_ID_FINISHDISPLAYLIST_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.FINISHDISPLAYLIST_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_FINISHDISPLAYLIST_INVALID_CALL_RETURN = D3D11_MESSAGE_ID.FINISHDISPLAYLIST_INVALID_CALL_RETURN;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDENTRIES;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UNEXPECTEDSTRIDES;
pub const D3D11_MESSAGE_ID_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES = D3D11_MESSAGE_ID.CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_INVALIDNUMSTRIDES;
pub const D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_HAZARD = D3D11_MESSAGE_ID.DEVICE_HSSETSHADERRESOURCES_HAZARD;
pub const D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_HAZARD = D3D11_MESSAGE_ID.DEVICE_HSSETCONSTANTBUFFERS_HAZARD;
pub const D3D11_MESSAGE_ID_HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.HSSETSHADERRESOURCES_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.HSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCALL = D3D11_MESSAGE_ID.CREATEHULLSHADER_INVALIDCALL;
pub const D3D11_MESSAGE_ID_CREATEHULLSHADER_OUTOFMEMORY = D3D11_MESSAGE_ID.CREATEHULLSHADER_OUTOFMEMORY;
pub const D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERBYTECODE = D3D11_MESSAGE_ID.CREATEHULLSHADER_INVALIDSHADERBYTECODE;
pub const D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDSHADERTYPE = D3D11_MESSAGE_ID.CREATEHULLSHADER_INVALIDSHADERTYPE;
pub const D3D11_MESSAGE_ID_CREATEHULLSHADER_INVALIDCLASSLINKAGE = D3D11_MESSAGE_ID.CREATEHULLSHADER_INVALIDCLASSLINKAGE;
pub const D3D11_MESSAGE_ID_DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY = D3D11_MESSAGE_ID.DEVICE_HSSETSHADERRESOURCES_VIEWS_EMPTY;
pub const D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFER = D3D11_MESSAGE_ID.HSSETCONSTANTBUFFERS_INVALIDBUFFER;
pub const D3D11_MESSAGE_ID_DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_HSSETCONSTANTBUFFERS_BUFFERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_HSSETSAMPLERS_SAMPLERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY = D3D11_MESSAGE_ID.DEVICE_HSGETSHADERRESOURCES_VIEWS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_HSGETCONSTANTBUFFERS_BUFFERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_HSGETSAMPLERS_SAMPLERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_HAZARD = D3D11_MESSAGE_ID.DEVICE_DSSETSHADERRESOURCES_HAZARD;
pub const D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_HAZARD = D3D11_MESSAGE_ID.DEVICE_DSSETCONSTANTBUFFERS_HAZARD;
pub const D3D11_MESSAGE_ID_DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.DSSETSHADERRESOURCES_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.DSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCALL = D3D11_MESSAGE_ID.CREATEDOMAINSHADER_INVALIDCALL;
pub const D3D11_MESSAGE_ID_CREATEDOMAINSHADER_OUTOFMEMORY = D3D11_MESSAGE_ID.CREATEDOMAINSHADER_OUTOFMEMORY;
pub const D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERBYTECODE = D3D11_MESSAGE_ID.CREATEDOMAINSHADER_INVALIDSHADERBYTECODE;
pub const D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDSHADERTYPE = D3D11_MESSAGE_ID.CREATEDOMAINSHADER_INVALIDSHADERTYPE;
pub const D3D11_MESSAGE_ID_CREATEDOMAINSHADER_INVALIDCLASSLINKAGE = D3D11_MESSAGE_ID.CREATEDOMAINSHADER_INVALIDCLASSLINKAGE;
pub const D3D11_MESSAGE_ID_DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY = D3D11_MESSAGE_ID.DEVICE_DSSETSHADERRESOURCES_VIEWS_EMPTY;
pub const D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFER = D3D11_MESSAGE_ID.DSSETCONSTANTBUFFERS_INVALIDBUFFER;
pub const D3D11_MESSAGE_ID_DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_DSSETCONSTANTBUFFERS_BUFFERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_DSSETSAMPLERS_SAMPLERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY = D3D11_MESSAGE_ID.DEVICE_DSGETSHADERRESOURCES_VIEWS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_DSGETCONSTANTBUFFERS_BUFFERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_DSGETSAMPLERS_SAMPLERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_HS_XOR_DS_MISMATCH = D3D11_MESSAGE_ID.DEVICE_DRAW_HS_XOR_DS_MISMATCH;
pub const D3D11_MESSAGE_ID_DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT = D3D11_MESSAGE_ID.DEFERRED_CONTEXT_REMOVAL_PROCESS_AT_FAULT;
pub const D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER = D3D11_MESSAGE_ID.DEVICE_DRAWINDIRECT_INVALID_ARG_BUFFER;
pub const D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED = D3D11_MESSAGE_ID.DEVICE_DRAWINDIRECT_OFFSET_UNALIGNED;
pub const D3D11_MESSAGE_ID_DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW = D3D11_MESSAGE_ID.DEVICE_DRAWINDIRECT_OFFSET_OVERFLOW;
pub const D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDMAPTYPE = D3D11_MESSAGE_ID.RESOURCE_MAP_INVALIDMAPTYPE;
pub const D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDSUBRESOURCE = D3D11_MESSAGE_ID.RESOURCE_MAP_INVALIDSUBRESOURCE;
pub const D3D11_MESSAGE_ID_RESOURCE_MAP_INVALIDFLAGS = D3D11_MESSAGE_ID.RESOURCE_MAP_INVALIDFLAGS;
pub const D3D11_MESSAGE_ID_RESOURCE_MAP_ALREADYMAPPED = D3D11_MESSAGE_ID.RESOURCE_MAP_ALREADYMAPPED;
pub const D3D11_MESSAGE_ID_RESOURCE_MAP_DEVICEREMOVED_RETURN = D3D11_MESSAGE_ID.RESOURCE_MAP_DEVICEREMOVED_RETURN;
pub const D3D11_MESSAGE_ID_RESOURCE_MAP_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.RESOURCE_MAP_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_RESOURCE_MAP_WITHOUT_INITIAL_DISCARD = D3D11_MESSAGE_ID.RESOURCE_MAP_WITHOUT_INITIAL_DISCARD;
pub const D3D11_MESSAGE_ID_RESOURCE_UNMAP_INVALIDSUBRESOURCE = D3D11_MESSAGE_ID.RESOURCE_UNMAP_INVALIDSUBRESOURCE;
pub const D3D11_MESSAGE_ID_RESOURCE_UNMAP_NOTMAPPED = D3D11_MESSAGE_ID.RESOURCE_UNMAP_NOTMAPPED;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_RASTERIZING_CONTROL_POINTS = D3D11_MESSAGE_ID.DEVICE_DRAW_RASTERIZING_CONTROL_POINTS;
pub const D3D11_MESSAGE_ID_DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_IASETPRIMITIVETOPOLOGY_TOPOLOGY_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH = D3D11_MESSAGE_ID.DEVICE_DRAW_HS_DS_SIGNATURE_MISMATCH;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH = D3D11_MESSAGE_ID.DEVICE_DRAW_HULL_SHADER_INPUT_TOPOLOGY_MISMATCH;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH = D3D11_MESSAGE_ID.DEVICE_DRAW_HS_DS_CONTROL_POINT_COUNT_MISMATCH;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH = D3D11_MESSAGE_ID.DEVICE_DRAW_HS_DS_TESSELLATOR_DOMAIN_MISMATCH;
pub const D3D11_MESSAGE_ID_CREATE_CONTEXT = D3D11_MESSAGE_ID.CREATE_CONTEXT;
pub const D3D11_MESSAGE_ID_LIVE_CONTEXT = D3D11_MESSAGE_ID.LIVE_CONTEXT;
pub const D3D11_MESSAGE_ID_DESTROY_CONTEXT = D3D11_MESSAGE_ID.DESTROY_CONTEXT;
pub const D3D11_MESSAGE_ID_CREATE_BUFFER = D3D11_MESSAGE_ID.CREATE_BUFFER;
pub const D3D11_MESSAGE_ID_LIVE_BUFFER_WIN7 = D3D11_MESSAGE_ID.LIVE_BUFFER_WIN7;
pub const D3D11_MESSAGE_ID_DESTROY_BUFFER = D3D11_MESSAGE_ID.DESTROY_BUFFER;
pub const D3D11_MESSAGE_ID_CREATE_TEXTURE1D = D3D11_MESSAGE_ID.CREATE_TEXTURE1D;
pub const D3D11_MESSAGE_ID_LIVE_TEXTURE1D_WIN7 = D3D11_MESSAGE_ID.LIVE_TEXTURE1D_WIN7;
pub const D3D11_MESSAGE_ID_DESTROY_TEXTURE1D = D3D11_MESSAGE_ID.DESTROY_TEXTURE1D;
pub const D3D11_MESSAGE_ID_CREATE_TEXTURE2D = D3D11_MESSAGE_ID.CREATE_TEXTURE2D;
pub const D3D11_MESSAGE_ID_LIVE_TEXTURE2D_WIN7 = D3D11_MESSAGE_ID.LIVE_TEXTURE2D_WIN7;
pub const D3D11_MESSAGE_ID_DESTROY_TEXTURE2D = D3D11_MESSAGE_ID.DESTROY_TEXTURE2D;
pub const D3D11_MESSAGE_ID_CREATE_TEXTURE3D = D3D11_MESSAGE_ID.CREATE_TEXTURE3D;
pub const D3D11_MESSAGE_ID_LIVE_TEXTURE3D_WIN7 = D3D11_MESSAGE_ID.LIVE_TEXTURE3D_WIN7;
pub const D3D11_MESSAGE_ID_DESTROY_TEXTURE3D = D3D11_MESSAGE_ID.DESTROY_TEXTURE3D;
pub const D3D11_MESSAGE_ID_CREATE_SHADERRESOURCEVIEW = D3D11_MESSAGE_ID.CREATE_SHADERRESOURCEVIEW;
pub const D3D11_MESSAGE_ID_LIVE_SHADERRESOURCEVIEW_WIN7 = D3D11_MESSAGE_ID.LIVE_SHADERRESOURCEVIEW_WIN7;
pub const D3D11_MESSAGE_ID_DESTROY_SHADERRESOURCEVIEW = D3D11_MESSAGE_ID.DESTROY_SHADERRESOURCEVIEW;
pub const D3D11_MESSAGE_ID_CREATE_RENDERTARGETVIEW = D3D11_MESSAGE_ID.CREATE_RENDERTARGETVIEW;
pub const D3D11_MESSAGE_ID_LIVE_RENDERTARGETVIEW_WIN7 = D3D11_MESSAGE_ID.LIVE_RENDERTARGETVIEW_WIN7;
pub const D3D11_MESSAGE_ID_DESTROY_RENDERTARGETVIEW = D3D11_MESSAGE_ID.DESTROY_RENDERTARGETVIEW;
pub const D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILVIEW = D3D11_MESSAGE_ID.CREATE_DEPTHSTENCILVIEW;
pub const D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILVIEW_WIN7 = D3D11_MESSAGE_ID.LIVE_DEPTHSTENCILVIEW_WIN7;
pub const D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILVIEW = D3D11_MESSAGE_ID.DESTROY_DEPTHSTENCILVIEW;
pub const D3D11_MESSAGE_ID_CREATE_VERTEXSHADER = D3D11_MESSAGE_ID.CREATE_VERTEXSHADER;
pub const D3D11_MESSAGE_ID_LIVE_VERTEXSHADER_WIN7 = D3D11_MESSAGE_ID.LIVE_VERTEXSHADER_WIN7;
pub const D3D11_MESSAGE_ID_DESTROY_VERTEXSHADER = D3D11_MESSAGE_ID.DESTROY_VERTEXSHADER;
pub const D3D11_MESSAGE_ID_CREATE_HULLSHADER = D3D11_MESSAGE_ID.CREATE_HULLSHADER;
pub const D3D11_MESSAGE_ID_LIVE_HULLSHADER = D3D11_MESSAGE_ID.LIVE_HULLSHADER;
pub const D3D11_MESSAGE_ID_DESTROY_HULLSHADER = D3D11_MESSAGE_ID.DESTROY_HULLSHADER;
pub const D3D11_MESSAGE_ID_CREATE_DOMAINSHADER = D3D11_MESSAGE_ID.CREATE_DOMAINSHADER;
pub const D3D11_MESSAGE_ID_LIVE_DOMAINSHADER = D3D11_MESSAGE_ID.LIVE_DOMAINSHADER;
pub const D3D11_MESSAGE_ID_DESTROY_DOMAINSHADER = D3D11_MESSAGE_ID.DESTROY_DOMAINSHADER;
pub const D3D11_MESSAGE_ID_CREATE_GEOMETRYSHADER = D3D11_MESSAGE_ID.CREATE_GEOMETRYSHADER;
pub const D3D11_MESSAGE_ID_LIVE_GEOMETRYSHADER_WIN7 = D3D11_MESSAGE_ID.LIVE_GEOMETRYSHADER_WIN7;
pub const D3D11_MESSAGE_ID_DESTROY_GEOMETRYSHADER = D3D11_MESSAGE_ID.DESTROY_GEOMETRYSHADER;
pub const D3D11_MESSAGE_ID_CREATE_PIXELSHADER = D3D11_MESSAGE_ID.CREATE_PIXELSHADER;
pub const D3D11_MESSAGE_ID_LIVE_PIXELSHADER_WIN7 = D3D11_MESSAGE_ID.LIVE_PIXELSHADER_WIN7;
pub const D3D11_MESSAGE_ID_DESTROY_PIXELSHADER = D3D11_MESSAGE_ID.DESTROY_PIXELSHADER;
pub const D3D11_MESSAGE_ID_CREATE_INPUTLAYOUT = D3D11_MESSAGE_ID.CREATE_INPUTLAYOUT;
pub const D3D11_MESSAGE_ID_LIVE_INPUTLAYOUT_WIN7 = D3D11_MESSAGE_ID.LIVE_INPUTLAYOUT_WIN7;
pub const D3D11_MESSAGE_ID_DESTROY_INPUTLAYOUT = D3D11_MESSAGE_ID.DESTROY_INPUTLAYOUT;
pub const D3D11_MESSAGE_ID_CREATE_SAMPLER = D3D11_MESSAGE_ID.CREATE_SAMPLER;
pub const D3D11_MESSAGE_ID_LIVE_SAMPLER_WIN7 = D3D11_MESSAGE_ID.LIVE_SAMPLER_WIN7;
pub const D3D11_MESSAGE_ID_DESTROY_SAMPLER = D3D11_MESSAGE_ID.DESTROY_SAMPLER;
pub const D3D11_MESSAGE_ID_CREATE_BLENDSTATE = D3D11_MESSAGE_ID.CREATE_BLENDSTATE;
pub const D3D11_MESSAGE_ID_LIVE_BLENDSTATE_WIN7 = D3D11_MESSAGE_ID.LIVE_BLENDSTATE_WIN7;
pub const D3D11_MESSAGE_ID_DESTROY_BLENDSTATE = D3D11_MESSAGE_ID.DESTROY_BLENDSTATE;
pub const D3D11_MESSAGE_ID_CREATE_DEPTHSTENCILSTATE = D3D11_MESSAGE_ID.CREATE_DEPTHSTENCILSTATE;
pub const D3D11_MESSAGE_ID_LIVE_DEPTHSTENCILSTATE_WIN7 = D3D11_MESSAGE_ID.LIVE_DEPTHSTENCILSTATE_WIN7;
pub const D3D11_MESSAGE_ID_DESTROY_DEPTHSTENCILSTATE = D3D11_MESSAGE_ID.DESTROY_DEPTHSTENCILSTATE;
pub const D3D11_MESSAGE_ID_CREATE_RASTERIZERSTATE = D3D11_MESSAGE_ID.CREATE_RASTERIZERSTATE;
pub const D3D11_MESSAGE_ID_LIVE_RASTERIZERSTATE_WIN7 = D3D11_MESSAGE_ID.LIVE_RASTERIZERSTATE_WIN7;
pub const D3D11_MESSAGE_ID_DESTROY_RASTERIZERSTATE = D3D11_MESSAGE_ID.DESTROY_RASTERIZERSTATE;
pub const D3D11_MESSAGE_ID_CREATE_QUERY = D3D11_MESSAGE_ID.CREATE_QUERY;
pub const D3D11_MESSAGE_ID_LIVE_QUERY_WIN7 = D3D11_MESSAGE_ID.LIVE_QUERY_WIN7;
pub const D3D11_MESSAGE_ID_DESTROY_QUERY = D3D11_MESSAGE_ID.DESTROY_QUERY;
pub const D3D11_MESSAGE_ID_CREATE_PREDICATE = D3D11_MESSAGE_ID.CREATE_PREDICATE;
pub const D3D11_MESSAGE_ID_LIVE_PREDICATE_WIN7 = D3D11_MESSAGE_ID.LIVE_PREDICATE_WIN7;
pub const D3D11_MESSAGE_ID_DESTROY_PREDICATE = D3D11_MESSAGE_ID.DESTROY_PREDICATE;
pub const D3D11_MESSAGE_ID_CREATE_COUNTER = D3D11_MESSAGE_ID.CREATE_COUNTER;
pub const D3D11_MESSAGE_ID_DESTROY_COUNTER = D3D11_MESSAGE_ID.DESTROY_COUNTER;
pub const D3D11_MESSAGE_ID_CREATE_COMMANDLIST = D3D11_MESSAGE_ID.CREATE_COMMANDLIST;
pub const D3D11_MESSAGE_ID_LIVE_COMMANDLIST = D3D11_MESSAGE_ID.LIVE_COMMANDLIST;
pub const D3D11_MESSAGE_ID_DESTROY_COMMANDLIST = D3D11_MESSAGE_ID.DESTROY_COMMANDLIST;
pub const D3D11_MESSAGE_ID_CREATE_CLASSINSTANCE = D3D11_MESSAGE_ID.CREATE_CLASSINSTANCE;
pub const D3D11_MESSAGE_ID_LIVE_CLASSINSTANCE = D3D11_MESSAGE_ID.LIVE_CLASSINSTANCE;
pub const D3D11_MESSAGE_ID_DESTROY_CLASSINSTANCE = D3D11_MESSAGE_ID.DESTROY_CLASSINSTANCE;
pub const D3D11_MESSAGE_ID_CREATE_CLASSLINKAGE = D3D11_MESSAGE_ID.CREATE_CLASSLINKAGE;
pub const D3D11_MESSAGE_ID_LIVE_CLASSLINKAGE = D3D11_MESSAGE_ID.LIVE_CLASSLINKAGE;
pub const D3D11_MESSAGE_ID_DESTROY_CLASSLINKAGE = D3D11_MESSAGE_ID.DESTROY_CLASSLINKAGE;
pub const D3D11_MESSAGE_ID_LIVE_DEVICE_WIN7 = D3D11_MESSAGE_ID.LIVE_DEVICE_WIN7;
pub const D3D11_MESSAGE_ID_LIVE_OBJECT_SUMMARY_WIN7 = D3D11_MESSAGE_ID.LIVE_OBJECT_SUMMARY_WIN7;
pub const D3D11_MESSAGE_ID_CREATE_COMPUTESHADER = D3D11_MESSAGE_ID.CREATE_COMPUTESHADER;
pub const D3D11_MESSAGE_ID_LIVE_COMPUTESHADER = D3D11_MESSAGE_ID.LIVE_COMPUTESHADER;
pub const D3D11_MESSAGE_ID_DESTROY_COMPUTESHADER = D3D11_MESSAGE_ID.DESTROY_COMPUTESHADER;
pub const D3D11_MESSAGE_ID_CREATE_UNORDEREDACCESSVIEW = D3D11_MESSAGE_ID.CREATE_UNORDEREDACCESSVIEW;
pub const D3D11_MESSAGE_ID_LIVE_UNORDEREDACCESSVIEW = D3D11_MESSAGE_ID.LIVE_UNORDEREDACCESSVIEW;
pub const D3D11_MESSAGE_ID_DESTROY_UNORDEREDACCESSVIEW = D3D11_MESSAGE_ID.DESTROY_UNORDEREDACCESSVIEW;
pub const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACES_FEATURELEVEL = D3D11_MESSAGE_ID.DEVICE_SETSHADER_INTERFACES_FEATURELEVEL;
pub const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH = D3D11_MESSAGE_ID.DEVICE_SETSHADER_INTERFACE_COUNT_MISMATCH;
pub const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE = D3D11_MESSAGE_ID.DEVICE_SETSHADER_INVALID_INSTANCE;
pub const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_INDEX = D3D11_MESSAGE_ID.DEVICE_SETSHADER_INVALID_INSTANCE_INDEX;
pub const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_TYPE = D3D11_MESSAGE_ID.DEVICE_SETSHADER_INVALID_INSTANCE_TYPE;
pub const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INVALID_INSTANCE_DATA = D3D11_MESSAGE_ID.DEVICE_SETSHADER_INVALID_INSTANCE_DATA;
pub const D3D11_MESSAGE_ID_DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA = D3D11_MESSAGE_ID.DEVICE_SETSHADER_UNBOUND_INSTANCE_DATA;
pub const D3D11_MESSAGE_ID_DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS = D3D11_MESSAGE_ID.DEVICE_SETSHADER_INSTANCE_DATA_BINDINGS;
pub const D3D11_MESSAGE_ID_DEVICE_CREATESHADER_CLASSLINKAGE_FULL = D3D11_MESSAGE_ID.DEVICE_CREATESHADER_CLASSLINKAGE_FULL;
pub const D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE = D3D11_MESSAGE_ID.DEVICE_CHECKFEATURESUPPORT_UNRECOGNIZED_FEATURE;
pub const D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE = D3D11_MESSAGE_ID.DEVICE_CHECKFEATURESUPPORT_MISMATCHED_DATA_SIZE;
pub const D3D11_MESSAGE_ID_DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN = D3D11_MESSAGE_ID.DEVICE_CHECKFEATURESUPPORT_INVALIDARG_RETURN;
pub const D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_HAZARD = D3D11_MESSAGE_ID.DEVICE_CSSETSHADERRESOURCES_HAZARD;
pub const D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_HAZARD = D3D11_MESSAGE_ID.DEVICE_CSSETCONSTANTBUFFERS_HAZARD;
pub const D3D11_MESSAGE_ID_CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.CSSETSHADERRESOURCES_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.CSSETCONSTANTBUFFERS_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCALL = D3D11_MESSAGE_ID.CREATECOMPUTESHADER_INVALIDCALL;
pub const D3D11_MESSAGE_ID_CREATECOMPUTESHADER_OUTOFMEMORY = D3D11_MESSAGE_ID.CREATECOMPUTESHADER_OUTOFMEMORY;
pub const D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERBYTECODE = D3D11_MESSAGE_ID.CREATECOMPUTESHADER_INVALIDSHADERBYTECODE;
pub const D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDSHADERTYPE = D3D11_MESSAGE_ID.CREATECOMPUTESHADER_INVALIDSHADERTYPE;
pub const D3D11_MESSAGE_ID_CREATECOMPUTESHADER_INVALIDCLASSLINKAGE = D3D11_MESSAGE_ID.CREATECOMPUTESHADER_INVALIDCLASSLINKAGE;
pub const D3D11_MESSAGE_ID_DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY = D3D11_MESSAGE_ID.DEVICE_CSSETSHADERRESOURCES_VIEWS_EMPTY;
pub const D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFER = D3D11_MESSAGE_ID.CSSETCONSTANTBUFFERS_INVALIDBUFFER;
pub const D3D11_MESSAGE_ID_DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_CSSETCONSTANTBUFFERS_BUFFERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_CSSETSAMPLERS_SAMPLERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY = D3D11_MESSAGE_ID.DEVICE_CSGETSHADERRESOURCES_VIEWS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_CSGETCONSTANTBUFFERS_BUFFERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY = D3D11_MESSAGE_ID.DEVICE_CSGETSAMPLERS_SAMPLERS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEVERTEXSHADER_DOUBLEFLOATOPSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEHULLSHADER_DOUBLEFLOATOPSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEDOMAINSHADER_DOUBLEFLOATOPSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEGEOMETRYSHADER_DOUBLEFLOATOPSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEFLOATOPSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEPIXELSHADER_DOUBLEFLOATOPSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATECOMPUTESHADER_DOUBLEFLOATOPSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDSTRUCTURESTRIDE = D3D11_MESSAGE_ID.CREATEBUFFER_INVALIDSTRUCTURESTRIDE;
pub const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDFLAGS = D3D11_MESSAGE_ID.CREATESHADERRESOURCEVIEW_INVALIDFLAGS;
pub const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE = D3D11_MESSAGE_ID.CREATEUNORDEREDACCESSVIEW_INVALIDRESOURCE;
pub const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDESC = D3D11_MESSAGE_ID.CREATEUNORDEREDACCESSVIEW_INVALIDDESC;
pub const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT = D3D11_MESSAGE_ID.CREATEUNORDEREDACCESSVIEW_INVALIDFORMAT;
pub const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS = D3D11_MESSAGE_ID.CREATEUNORDEREDACCESSVIEW_INVALIDDIMENSIONS;
pub const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT = D3D11_MESSAGE_ID.CREATEUNORDEREDACCESSVIEW_UNRECOGNIZEDFORMAT;
pub const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD = D3D11_MESSAGE_ID.DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_HAZARD;
pub const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS = D3D11_MESSAGE_ID.DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_OVERLAPPING_OLD_SLOTS;
pub const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP = D3D11_MESSAGE_ID.DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NO_OP;
pub const D3D11_MESSAGE_ID_CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.CSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.PSSETUNORDEREDACCESSVIEWS_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN = D3D11_MESSAGE_ID.CREATEUNORDEREDACCESSVIEW_INVALIDARG_RETURN;
pub const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CREATEUNORDEREDACCESSVIEW_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS = D3D11_MESSAGE_ID.CREATEUNORDEREDACCESSVIEW_TOOMANYOBJECTS;
pub const D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD = D3D11_MESSAGE_ID.DEVICE_CSSETUNORDEREDACCESSVIEWS_HAZARD;
pub const D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEW_DENORMFLUSH = D3D11_MESSAGE_ID.CLEARUNORDEREDACCESSVIEW_DENORMFLUSH;
pub const D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY = D3D11_MESSAGE_ID.DEVICE_CSSETUNORDEREDACCESSS_VIEWS_EMPTY;
pub const D3D11_MESSAGE_ID_DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY = D3D11_MESSAGE_ID.DEVICE_CSGETUNORDEREDACCESSS_VIEWS_EMPTY;
pub const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS = D3D11_MESSAGE_ID.CREATEUNORDEREDACCESSVIEW_INVALIDFLAGS;
pub const D3D11_MESSAGE_ID_CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS = D3D11_MESSAGE_ID.CREATESHADERRESESOURCEVIEW_TOOMANYOBJECTS;
pub const D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER = D3D11_MESSAGE_ID.DEVICE_DISPATCHINDIRECT_INVALID_ARG_BUFFER;
pub const D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED = D3D11_MESSAGE_ID.DEVICE_DISPATCHINDIRECT_OFFSET_UNALIGNED;
pub const D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW = D3D11_MESSAGE_ID.DEVICE_DISPATCHINDIRECT_OFFSET_OVERFLOW;
pub const D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT = D3D11_MESSAGE_ID.DEVICE_SETRESOURCEMINLOD_INVALIDCONTEXT;
pub const D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE = D3D11_MESSAGE_ID.DEVICE_SETRESOURCEMINLOD_INVALIDRESOURCE;
pub const D3D11_MESSAGE_ID_DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD = D3D11_MESSAGE_ID.DEVICE_SETRESOURCEMINLOD_INVALIDMINLOD;
pub const D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT = D3D11_MESSAGE_ID.DEVICE_GETRESOURCEMINLOD_INVALIDCONTEXT;
pub const D3D11_MESSAGE_ID_DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE = D3D11_MESSAGE_ID.DEVICE_GETRESOURCEMINLOD_INVALIDRESOURCE;
pub const D3D11_MESSAGE_ID_OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.OMSETDEPTHSTENCIL_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_DEPTH_READONLY = D3D11_MESSAGE_ID.CLEARDEPTHSTENCILVIEW_DEPTH_READONLY;
pub const D3D11_MESSAGE_ID_CLEARDEPTHSTENCILVIEW_STENCIL_READONLY = D3D11_MESSAGE_ID.CLEARDEPTHSTENCILVIEW_STENCIL_READONLY;
pub const D3D11_MESSAGE_ID_CHECKFEATURESUPPORT_FORMAT_DEPRECATED = D3D11_MESSAGE_ID.CHECKFEATURESUPPORT_FORMAT_DEPRECATED;
pub const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH = D3D11_MESSAGE_ID.DEVICE_UNORDEREDACCESSVIEW_RETURN_TYPE_MISMATCH;
pub const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET = D3D11_MESSAGE_ID.DEVICE_UNORDEREDACCESSVIEW_NOT_SET;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP = D3D11_MESSAGE_ID.DEVICE_DRAW_UNORDEREDACCESSVIEW_RENDERTARGETVIEW_OVERLAP;
pub const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH = D3D11_MESSAGE_ID.DEVICE_UNORDEREDACCESSVIEW_DIMENSION_MISMATCH;
pub const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_UNORDEREDACCESSVIEW_APPEND_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_UNORDEREDACCESSVIEW_ATOMICS_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH = D3D11_MESSAGE_ID.DEVICE_UNORDEREDACCESSVIEW_STRUCTURE_STRIDE_MISMATCH;
pub const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH = D3D11_MESSAGE_ID.DEVICE_UNORDEREDACCESSVIEW_BUFFER_TYPE_MISMATCH;
pub const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_UNORDEREDACCESSVIEW_RAW_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_UNORDEREDACCESSVIEW_FORMAT_LD_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_UNORDEREDACCESSVIEW_FORMAT_STORE_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_UNORDEREDACCESSVIEW_ATOMIC_ADD_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_UNORDEREDACCESSVIEW_ATOMIC_BITWISE_OPS_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_UNORDEREDACCESSVIEW_ATOMIC_CMPSTORE_CMPEXCHANGE_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_UNORDEREDACCESSVIEW_ATOMIC_EXCHANGE_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_UNORDEREDACCESSVIEW_ATOMIC_SIGNED_MINMAX_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_UNORDEREDACCESSVIEW_ATOMIC_UNSIGNED_MINMAX_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED = D3D11_MESSAGE_ID.DEVICE_DISPATCH_BOUND_RESOURCE_MAPPED;
pub const D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW = D3D11_MESSAGE_ID.DEVICE_DISPATCH_THREADGROUPCOUNT_OVERFLOW;
pub const D3D11_MESSAGE_ID_DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO = D3D11_MESSAGE_ID.DEVICE_DISPATCH_THREADGROUPCOUNT_ZERO;
pub const D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH = D3D11_MESSAGE_ID.DEVICE_SHADERRESOURCEVIEW_STRUCTURE_STRIDE_MISMATCH;
pub const D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH = D3D11_MESSAGE_ID.DEVICE_SHADERRESOURCEVIEW_BUFFER_TYPE_MISMATCH;
pub const D3D11_MESSAGE_ID_DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_SHADERRESOURCEVIEW_RAW_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_DISPATCH_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_DISPATCH_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_DISPATCHINDIRECT_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_DISPATCHINDIRECT_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDOFFSET = D3D11_MESSAGE_ID.COPYSTRUCTURECOUNT_INVALIDOFFSET;
pub const D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_LARGEOFFSET = D3D11_MESSAGE_ID.COPYSTRUCTURECOUNT_LARGEOFFSET;
pub const D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE = D3D11_MESSAGE_ID.COPYSTRUCTURECOUNT_INVALIDDESTINATIONSTATE;
pub const D3D11_MESSAGE_ID_COPYSTRUCTURECOUNT_INVALIDSOURCESTATE = D3D11_MESSAGE_ID.COPYSTRUCTURECOUNT_INVALIDSOURCESTATE;
pub const D3D11_MESSAGE_ID_CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED = D3D11_MESSAGE_ID.CHECKFORMATSUPPORT_FORMAT_NOT_SUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW = D3D11_MESSAGE_ID.DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDVIEW;
pub const D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET = D3D11_MESSAGE_ID.DEVICE_CSSETUNORDEREDACCESSVIEWS_INVALIDOFFSET;
pub const D3D11_MESSAGE_ID_DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS = D3D11_MESSAGE_ID.DEVICE_CSSETUNORDEREDACCESSVIEWS_TOOMANYVIEWS;
pub const D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT = D3D11_MESSAGE_ID.CLEARUNORDEREDACCESSVIEWFLOAT_INVALIDFORMAT;
pub const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED = D3D11_MESSAGE_ID.DEVICE_UNORDEREDACCESSVIEW_COUNTER_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_REF_WARNING = D3D11_MESSAGE_ID.REF_WARNING;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV = D3D11_MESSAGE_ID.DEVICE_DRAW_PIXEL_SHADER_WITHOUT_RTV_OR_DSV;
pub const D3D11_MESSAGE_ID_SHADER_ABORT = D3D11_MESSAGE_ID.SHADER_ABORT;
pub const D3D11_MESSAGE_ID_SHADER_MESSAGE = D3D11_MESSAGE_ID.SHADER_MESSAGE;
pub const D3D11_MESSAGE_ID_SHADER_ERROR = D3D11_MESSAGE_ID.SHADER_ERROR;
pub const D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDRESOURCE = D3D11_MESSAGE_ID.OFFERRESOURCES_INVALIDRESOURCE;
pub const D3D11_MESSAGE_ID_HSSETSAMPLERS_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.HSSETSAMPLERS_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_DSSETSAMPLERS_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.DSSETSAMPLERS_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_CSSETSAMPLERS_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.CSSETSAMPLERS_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_HSSETSHADER_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.HSSETSHADER_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_DSSETSHADER_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.DSSETSHADER_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_CSSETSHADER_UNBINDDELETINGOBJECT = D3D11_MESSAGE_ID.CSSETSHADER_UNBINDDELETINGOBJECT;
pub const D3D11_MESSAGE_ID_ENQUEUESETEVENT_INVALIDARG_RETURN = D3D11_MESSAGE_ID.ENQUEUESETEVENT_INVALIDARG_RETURN;
pub const D3D11_MESSAGE_ID_ENQUEUESETEVENT_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.ENQUEUESETEVENT_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_ENQUEUESETEVENT_ACCESSDENIED_RETURN = D3D11_MESSAGE_ID.ENQUEUESETEVENT_ACCESSDENIED_RETURN;
pub const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NUMUAVS_INVALIDRANGE = D3D11_MESSAGE_ID.DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_NUMUAVS_INVALIDRANGE;
pub const D3D11_MESSAGE_ID_USE_OF_ZERO_REFCOUNT_OBJECT = D3D11_MESSAGE_ID.USE_OF_ZERO_REFCOUNT_OBJECT;
pub const D3D11_MESSAGE_ID_D3D11_MESSAGES_END = D3D11_MESSAGE_ID.D3D11_MESSAGES_END;
pub const D3D11_MESSAGE_ID_D3D11_1_MESSAGES_START = D3D11_MESSAGE_ID.D3D11_1_MESSAGES_START;
pub const D3D11_MESSAGE_ID_CREATE_VIDEODECODER = D3D11_MESSAGE_ID.CREATE_VIDEODECODER;
pub const D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSORENUM = D3D11_MESSAGE_ID.CREATE_VIDEOPROCESSORENUM;
pub const D3D11_MESSAGE_ID_CREATE_VIDEOPROCESSOR = D3D11_MESSAGE_ID.CREATE_VIDEOPROCESSOR;
pub const D3D11_MESSAGE_ID_CREATE_DECODEROUTPUTVIEW = D3D11_MESSAGE_ID.CREATE_DECODEROUTPUTVIEW;
pub const D3D11_MESSAGE_ID_CREATE_PROCESSORINPUTVIEW = D3D11_MESSAGE_ID.CREATE_PROCESSORINPUTVIEW;
pub const D3D11_MESSAGE_ID_CREATE_PROCESSOROUTPUTVIEW = D3D11_MESSAGE_ID.CREATE_PROCESSOROUTPUTVIEW;
pub const D3D11_MESSAGE_ID_CREATE_DEVICECONTEXTSTATE = D3D11_MESSAGE_ID.CREATE_DEVICECONTEXTSTATE;
pub const D3D11_MESSAGE_ID_LIVE_VIDEODECODER = D3D11_MESSAGE_ID.LIVE_VIDEODECODER;
pub const D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSORENUM = D3D11_MESSAGE_ID.LIVE_VIDEOPROCESSORENUM;
pub const D3D11_MESSAGE_ID_LIVE_VIDEOPROCESSOR = D3D11_MESSAGE_ID.LIVE_VIDEOPROCESSOR;
pub const D3D11_MESSAGE_ID_LIVE_DECODEROUTPUTVIEW = D3D11_MESSAGE_ID.LIVE_DECODEROUTPUTVIEW;
pub const D3D11_MESSAGE_ID_LIVE_PROCESSORINPUTVIEW = D3D11_MESSAGE_ID.LIVE_PROCESSORINPUTVIEW;
pub const D3D11_MESSAGE_ID_LIVE_PROCESSOROUTPUTVIEW = D3D11_MESSAGE_ID.LIVE_PROCESSOROUTPUTVIEW;
pub const D3D11_MESSAGE_ID_LIVE_DEVICECONTEXTSTATE = D3D11_MESSAGE_ID.LIVE_DEVICECONTEXTSTATE;
pub const D3D11_MESSAGE_ID_DESTROY_VIDEODECODER = D3D11_MESSAGE_ID.DESTROY_VIDEODECODER;
pub const D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSORENUM = D3D11_MESSAGE_ID.DESTROY_VIDEOPROCESSORENUM;
pub const D3D11_MESSAGE_ID_DESTROY_VIDEOPROCESSOR = D3D11_MESSAGE_ID.DESTROY_VIDEOPROCESSOR;
pub const D3D11_MESSAGE_ID_DESTROY_DECODEROUTPUTVIEW = D3D11_MESSAGE_ID.DESTROY_DECODEROUTPUTVIEW;
pub const D3D11_MESSAGE_ID_DESTROY_PROCESSORINPUTVIEW = D3D11_MESSAGE_ID.DESTROY_PROCESSORINPUTVIEW;
pub const D3D11_MESSAGE_ID_DESTROY_PROCESSOROUTPUTVIEW = D3D11_MESSAGE_ID.DESTROY_PROCESSOROUTPUTVIEW;
pub const D3D11_MESSAGE_ID_DESTROY_DEVICECONTEXTSTATE = D3D11_MESSAGE_ID.DESTROY_DEVICECONTEXTSTATE;
pub const D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFLAGS = D3D11_MESSAGE_ID.CREATEDEVICECONTEXTSTATE_INVALIDFLAGS;
pub const D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDFEATURELEVEL = D3D11_MESSAGE_ID.CREATEDEVICECONTEXTSTATE_INVALIDFEATURELEVEL;
pub const D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_FEATURELEVELS_NOT_SUPPORTED = D3D11_MESSAGE_ID.CREATEDEVICECONTEXTSTATE_FEATURELEVELS_NOT_SUPPORTED;
pub const D3D11_MESSAGE_ID_CREATEDEVICECONTEXTSTATE_INVALIDREFIID = D3D11_MESSAGE_ID.CREATEDEVICECONTEXTSTATE_INVALIDREFIID;
pub const D3D11_MESSAGE_ID_DEVICE_DISCARDVIEW_INVALIDVIEW = D3D11_MESSAGE_ID.DEVICE_DISCARDVIEW_INVALIDVIEW;
pub const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION1_INVALIDCOPYFLAGS = D3D11_MESSAGE_ID.COPYSUBRESOURCEREGION1_INVALIDCOPYFLAGS;
pub const D3D11_MESSAGE_ID_UPDATESUBRESOURCE1_INVALIDCOPYFLAGS = D3D11_MESSAGE_ID.UPDATESUBRESOURCE1_INVALIDCOPYFLAGS;
pub const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT = D3D11_MESSAGE_ID.CREATERASTERIZERSTATE_INVALIDFORCEDSAMPLECOUNT;
pub const D3D11_MESSAGE_ID_CREATEVIDEODECODER_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CREATEVIDEODECODER_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_CREATEVIDEODECODER_NULLPARAM = D3D11_MESSAGE_ID.CREATEVIDEODECODER_NULLPARAM;
pub const D3D11_MESSAGE_ID_CREATEVIDEODECODER_INVALIDFORMAT = D3D11_MESSAGE_ID.CREATEVIDEODECODER_INVALIDFORMAT;
pub const D3D11_MESSAGE_ID_CREATEVIDEODECODER_ZEROWIDTHHEIGHT = D3D11_MESSAGE_ID.CREATEVIDEODECODER_ZEROWIDTHHEIGHT;
pub const D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERSIZE = D3D11_MESSAGE_ID.CREATEVIDEODECODER_DRIVER_INVALIDBUFFERSIZE;
pub const D3D11_MESSAGE_ID_CREATEVIDEODECODER_DRIVER_INVALIDBUFFERUSAGE = D3D11_MESSAGE_ID.CREATEVIDEODECODER_DRIVER_INVALIDBUFFERUSAGE;
pub const D3D11_MESSAGE_ID_GETVIDEODECODERPROFILECOUNT_OUTOFMEMORY = D3D11_MESSAGE_ID.GETVIDEODECODERPROFILECOUNT_OUTOFMEMORY;
pub const D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_NULLPARAM = D3D11_MESSAGE_ID.GETVIDEODECODERPROFILE_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_INVALIDINDEX = D3D11_MESSAGE_ID.GETVIDEODECODERPROFILE_INVALIDINDEX;
pub const D3D11_MESSAGE_ID_GETVIDEODECODERPROFILE_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.GETVIDEODECODERPROFILE_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_NULLPARAM = D3D11_MESSAGE_ID.CHECKVIDEODECODERFORMAT_NULLPARAM;
pub const D3D11_MESSAGE_ID_CHECKVIDEODECODERFORMAT_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CHECKVIDEODECODERFORMAT_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_NULLPARAM = D3D11_MESSAGE_ID.GETVIDEODECODERCONFIGCOUNT_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETVIDEODECODERCONFIGCOUNT_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.GETVIDEODECODERCONFIGCOUNT_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_NULLPARAM = D3D11_MESSAGE_ID.GETVIDEODECODERCONFIG_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_INVALIDINDEX = D3D11_MESSAGE_ID.GETVIDEODECODERCONFIG_INVALIDINDEX;
pub const D3D11_MESSAGE_ID_GETVIDEODECODERCONFIG_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.GETVIDEODECODERCONFIG_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_GETDECODERCREATIONPARAMS_NULLPARAM = D3D11_MESSAGE_ID.GETDECODERCREATIONPARAMS_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETDECODERDRIVERHANDLE_NULLPARAM = D3D11_MESSAGE_ID.GETDECODERDRIVERHANDLE_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETDECODERBUFFER_NULLPARAM = D3D11_MESSAGE_ID.GETDECODERBUFFER_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDBUFFER = D3D11_MESSAGE_ID.GETDECODERBUFFER_INVALIDBUFFER;
pub const D3D11_MESSAGE_ID_GETDECODERBUFFER_INVALIDTYPE = D3D11_MESSAGE_ID.GETDECODERBUFFER_INVALIDTYPE;
pub const D3D11_MESSAGE_ID_GETDECODERBUFFER_LOCKED = D3D11_MESSAGE_ID.GETDECODERBUFFER_LOCKED;
pub const D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NULLPARAM = D3D11_MESSAGE_ID.RELEASEDECODERBUFFER_NULLPARAM;
pub const D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_INVALIDTYPE = D3D11_MESSAGE_ID.RELEASEDECODERBUFFER_INVALIDTYPE;
pub const D3D11_MESSAGE_ID_RELEASEDECODERBUFFER_NOTLOCKED = D3D11_MESSAGE_ID.RELEASEDECODERBUFFER_NOTLOCKED;
pub const D3D11_MESSAGE_ID_DECODERBEGINFRAME_NULLPARAM = D3D11_MESSAGE_ID.DECODERBEGINFRAME_NULLPARAM;
pub const D3D11_MESSAGE_ID_DECODERBEGINFRAME_HAZARD = D3D11_MESSAGE_ID.DECODERBEGINFRAME_HAZARD;
pub const D3D11_MESSAGE_ID_DECODERENDFRAME_NULLPARAM = D3D11_MESSAGE_ID.DECODERENDFRAME_NULLPARAM;
pub const D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_NULLPARAM = D3D11_MESSAGE_ID.SUBMITDECODERBUFFERS_NULLPARAM;
pub const D3D11_MESSAGE_ID_SUBMITDECODERBUFFERS_INVALIDTYPE = D3D11_MESSAGE_ID.SUBMITDECODERBUFFERS_INVALIDTYPE;
pub const D3D11_MESSAGE_ID_DECODEREXTENSION_NULLPARAM = D3D11_MESSAGE_ID.DECODEREXTENSION_NULLPARAM;
pub const D3D11_MESSAGE_ID_DECODEREXTENSION_INVALIDRESOURCE = D3D11_MESSAGE_ID.DECODEREXTENSION_INVALIDRESOURCE;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORENUMERATOR_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_NULLPARAM = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORENUMERATOR_NULLPARAM;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDFRAMEFORMAT = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORENUMERATOR_INVALIDFRAMEFORMAT;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDUSAGE = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORENUMERATOR_INVALIDUSAGE;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDINPUTFRAMERATE = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORENUMERATOR_INVALIDINPUTFRAMERATE;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDOUTPUTFRAMERATE = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORENUMERATOR_INVALIDOUTPUTFRAMERATE;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORENUMERATOR_INVALIDWIDTHHEIGHT = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORENUMERATOR_INVALIDWIDTHHEIGHT;
pub const D3D11_MESSAGE_ID_GETVIDEOPROCESSORCONTENTDESC_NULLPARAM = D3D11_MESSAGE_ID.GETVIDEOPROCESSORCONTENTDESC_NULLPARAM;
pub const D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMAT_NULLPARAM = D3D11_MESSAGE_ID.CHECKVIDEOPROCESSORFORMAT_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETVIDEOPROCESSORCAPS_NULLPARAM = D3D11_MESSAGE_ID.GETVIDEOPROCESSORCAPS_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_NULLPARAM = D3D11_MESSAGE_ID.GETVIDEOPROCESSORRATECONVERSIONCAPS_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETVIDEOPROCESSORRATECONVERSIONCAPS_INVALIDINDEX = D3D11_MESSAGE_ID.GETVIDEOPROCESSORRATECONVERSIONCAPS_INVALIDINDEX;
pub const D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_NULLPARAM = D3D11_MESSAGE_ID.GETVIDEOPROCESSORCUSTOMRATE_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETVIDEOPROCESSORCUSTOMRATE_INVALIDINDEX = D3D11_MESSAGE_ID.GETVIDEOPROCESSORCUSTOMRATE_INVALIDINDEX;
pub const D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_NULLPARAM = D3D11_MESSAGE_ID.GETVIDEOPROCESSORFILTERRANGE_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETVIDEOPROCESSORFILTERRANGE_UNSUPPORTED = D3D11_MESSAGE_ID.GETVIDEOPROCESSORFILTERRANGE_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSOR_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOR_NULLPARAM = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSOR_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTTARGETRECT_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETOUTPUTTARGETRECT_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_INVALIDALPHA = D3D11_MESSAGE_ID.VIDEOPROCESSORSETOUTPUTBACKGROUNDCOLOR_INVALIDALPHA;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETOUTPUTCOLORSPACE_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_UNSUPPORTED = D3D11_MESSAGE_ID.VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDFILLMODE = D3D11_MESSAGE_ID.VIDEOPROCESSORSETOUTPUTALPHAFILLMODE_INVALIDFILLMODE;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETOUTPUTCONSTRICTION_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETOUTPUTSTEREOMODE_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSTEREOMODE_UNSUPPORTED = D3D11_MESSAGE_ID.VIDEOPROCESSORSETOUTPUTSTEREOMODE_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTEXTENSION_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETOUTPUTEXTENSION_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTTARGETRECT_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETOUTPUTTARGETRECT_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTBACKGROUNDCOLOR_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETOUTPUTBACKGROUNDCOLOR_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETOUTPUTCOLORSPACE_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTALPHAFILLMODE_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETOUTPUTALPHAFILLMODE_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCONSTRICTION_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETOUTPUTCONSTRICTION_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_UNSUPPORTED = D3D11_MESSAGE_ID.VIDEOPROCESSORSETOUTPUTCONSTRICTION_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCONSTRICTION_INVALIDSIZE = D3D11_MESSAGE_ID.VIDEOPROCESSORSETOUTPUTCONSTRICTION_INVALIDSIZE;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSTEREOMODE_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETOUTPUTSTEREOMODE_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTEXTENSION_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETOUTPUTEXTENSION_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMFRAMEFORMAT_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDFORMAT = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDFORMAT;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMFRAMEFORMAT_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMCOLORSPACE_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMCOLORSPACE_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMOUTPUTRATE_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDRATE = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDRATE;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDFLAG = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDFLAG;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMOUTPUTRATE_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMSOURCERECT_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDRECT = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMSOURCERECT_INVALIDRECT;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMDESTRECT_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDRECT = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMDESTRECT_INVALIDRECT;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMALPHA_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMALPHA_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_INVALIDALPHA = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMALPHA_INVALIDALPHA;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMPALETTE_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMPALETTE_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDCOUNT = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMPALETTE_INVALIDCOUNT;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPALETTE_INVALIDALPHA = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMPALETTE_INVALIDALPHA;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDRATIO = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_INVALIDRATIO;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMLUMAKEY_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDRANGE = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMLUMAKEY_INVALIDRANGE;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMLUMAKEY_UNSUPPORTED = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMLUMAKEY_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMSTEREOFORMAT_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_UNSUPPORTED = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMSTEREOFORMAT_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FLIPUNSUPPORTED = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FLIPUNSUPPORTED;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_MONOOFFSETUNSUPPORTED = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMSTEREOFORMAT_MONOOFFSETUNSUPPORTED;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FORMATUNSUPPORTED = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMSTEREOFORMAT_FORMATUNSUPPORTED;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDFORMAT = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMSTEREOFORMAT_INVALIDFORMAT;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMFILTER_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMFILTER_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDFILTER = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMFILTER_INVALIDFILTER;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_UNSUPPORTED = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMFILTER_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMFILTER_INVALIDLEVEL = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMFILTER_INVALIDLEVEL;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMEXTENSION_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMEXTENSION_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMEXTENSION_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMFRAMEFORMAT_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMCOLORSPACE_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMOUTPUTRATE_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMSOURCERECT_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMDESTRECT_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMALPHA_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMPALETTE_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMLUMAKEY_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMSTEREOFORMAT_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMFILTER_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMEXTENSION_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMEXTENSION_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMEXTENSION_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORBLT_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSTREAMCOUNT = D3D11_MESSAGE_ID.VIDEOPROCESSORBLT_INVALIDSTREAMCOUNT;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_TARGETRECT = D3D11_MESSAGE_ID.VIDEOPROCESSORBLT_TARGETRECT;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDOUTPUT = D3D11_MESSAGE_ID.VIDEOPROCESSORBLT_INVALIDOUTPUT;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDPASTFRAMES = D3D11_MESSAGE_ID.VIDEOPROCESSORBLT_INVALIDPASTFRAMES;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDFUTUREFRAMES = D3D11_MESSAGE_ID.VIDEOPROCESSORBLT_INVALIDFUTUREFRAMES;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDSOURCERECT = D3D11_MESSAGE_ID.VIDEOPROCESSORBLT_INVALIDSOURCERECT;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDDESTRECT = D3D11_MESSAGE_ID.VIDEOPROCESSORBLT_INVALIDDESTRECT;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDINPUTRESOURCE = D3D11_MESSAGE_ID.VIDEOPROCESSORBLT_INVALIDINPUTRESOURCE;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAYSIZE = D3D11_MESSAGE_ID.VIDEOPROCESSORBLT_INVALIDARRAYSIZE;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDARRAY = D3D11_MESSAGE_ID.VIDEOPROCESSORBLT_INVALIDARRAY;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTEXPECTED = D3D11_MESSAGE_ID.VIDEOPROCESSORBLT_RIGHTEXPECTED;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_RIGHTNOTEXPECTED = D3D11_MESSAGE_ID.VIDEOPROCESSORBLT_RIGHTNOTEXPECTED;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_STEREONOTENABLED = D3D11_MESSAGE_ID.VIDEOPROCESSORBLT_STEREONOTENABLED;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INVALIDRIGHTRESOURCE = D3D11_MESSAGE_ID.VIDEOPROCESSORBLT_INVALIDRIGHTRESOURCE;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_NOSTEREOSTREAMS = D3D11_MESSAGE_ID.VIDEOPROCESSORBLT_NOSTEREOSTREAMS;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_INPUTHAZARD = D3D11_MESSAGE_ID.VIDEOPROCESSORBLT_INPUTHAZARD;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORBLT_OUTPUTHAZARD = D3D11_MESSAGE_ID.VIDEOPROCESSORBLT_OUTPUTHAZARD;
pub const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CREATEVIDEODECODEROUTPUTVIEW_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_NULLPARAM = D3D11_MESSAGE_ID.CREATEVIDEODECODEROUTPUTVIEW_NULLPARAM;
pub const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDTYPE = D3D11_MESSAGE_ID.CREATEVIDEODECODEROUTPUTVIEW_INVALIDTYPE;
pub const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDBIND = D3D11_MESSAGE_ID.CREATEVIDEODECODEROUTPUTVIEW_INVALIDBIND;
pub const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEDFORMAT = D3D11_MESSAGE_ID.CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEDFORMAT;
pub const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDMIP = D3D11_MESSAGE_ID.CREATEVIDEODECODEROUTPUTVIEW_INVALIDMIP;
pub const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEMIP = D3D11_MESSAGE_ID.CREATEVIDEODECODEROUTPUTVIEW_UNSUPPORTEMIP;
pub const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAYSIZE = D3D11_MESSAGE_ID.CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAYSIZE;
pub const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAY = D3D11_MESSAGE_ID.CREATEVIDEODECODEROUTPUTVIEW_INVALIDARRAY;
pub const D3D11_MESSAGE_ID_CREATEVIDEODECODEROUTPUTVIEW_INVALIDDIMENSION = D3D11_MESSAGE_ID.CREATEVIDEODECODEROUTPUTVIEW_INVALIDDIMENSION;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORINPUTVIEW_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_NULLPARAM = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORINPUTVIEW_NULLPARAM;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDTYPE = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORINPUTVIEW_INVALIDTYPE;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDBIND = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORINPUTVIEW_INVALIDBIND;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMISC = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMISC;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDUSAGE = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORINPUTVIEW_INVALIDUSAGE;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFORMAT = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFORMAT;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFOURCC = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORINPUTVIEW_INVALIDFOURCC;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMIP = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMIP;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_UNSUPPORTEDMIP = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORINPUTVIEW_UNSUPPORTEDMIP;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAYSIZE = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAYSIZE;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAY = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORINPUTVIEW_INVALIDARRAY;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDDIMENSION = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORINPUTVIEW_INVALIDDIMENSION;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSOROUTPUTVIEW_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_NULLPARAM = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSOROUTPUTVIEW_NULLPARAM;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDTYPE = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDTYPE;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDBIND = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDBIND;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDFORMAT = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDFORMAT;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMIP = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMIP;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDMIP = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDMIP;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDARRAY = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSOROUTPUTVIEW_UNSUPPORTEDARRAY;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDARRAY = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDARRAY;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDDIMENSION = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDDIMENSION;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT = D3D11_MESSAGE_ID.DEVICE_DRAW_INVALID_USE_OF_FORCED_SAMPLE_COUNT;
pub const D3D11_MESSAGE_ID_CREATEBLENDSTATE_INVALIDLOGICOPS = D3D11_MESSAGE_ID.CREATEBLENDSTATE_INVALIDLOGICOPS;
pub const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER = D3D11_MESSAGE_ID.CREATESHADERRESOURCEVIEW_INVALIDDARRAYWITHDECODER;
pub const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER = D3D11_MESSAGE_ID.CREATEUNORDEREDACCESSVIEW_INVALIDDARRAYWITHDECODER;
pub const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER = D3D11_MESSAGE_ID.CREATERENDERTARGETVIEW_INVALIDDARRAYWITHDECODER;
pub const D3D11_MESSAGE_ID_DEVICE_LOCKEDOUT_INTERFACE = D3D11_MESSAGE_ID.DEVICE_LOCKEDOUT_INTERFACE;
pub const D3D11_MESSAGE_ID_REF_WARNING_ATOMIC_INCONSISTENT = D3D11_MESSAGE_ID.REF_WARNING_ATOMIC_INCONSISTENT;
pub const D3D11_MESSAGE_ID_REF_WARNING_READING_UNINITIALIZED_RESOURCE = D3D11_MESSAGE_ID.REF_WARNING_READING_UNINITIALIZED_RESOURCE;
pub const D3D11_MESSAGE_ID_REF_WARNING_RAW_HAZARD = D3D11_MESSAGE_ID.REF_WARNING_RAW_HAZARD;
pub const D3D11_MESSAGE_ID_REF_WARNING_WAR_HAZARD = D3D11_MESSAGE_ID.REF_WARNING_WAR_HAZARD;
pub const D3D11_MESSAGE_ID_REF_WARNING_WAW_HAZARD = D3D11_MESSAGE_ID.REF_WARNING_WAW_HAZARD;
pub const D3D11_MESSAGE_ID_CREATECRYPTOSESSION_NULLPARAM = D3D11_MESSAGE_ID.CREATECRYPTOSESSION_NULLPARAM;
pub const D3D11_MESSAGE_ID_CREATECRYPTOSESSION_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CREATECRYPTOSESSION_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_GETCRYPTOTYPE_NULLPARAM = D3D11_MESSAGE_ID.GETCRYPTOTYPE_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETDECODERPROFILE_NULLPARAM = D3D11_MESSAGE_ID.GETDECODERPROFILE_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATESIZE_NULLPARAM = D3D11_MESSAGE_ID.GETCRYPTOSESSIONCERTIFICATESIZE_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_NULLPARAM = D3D11_MESSAGE_ID.GETCRYPTOSESSIONCERTIFICATE_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETCRYPTOSESSIONCERTIFICATE_WRONGSIZE = D3D11_MESSAGE_ID.GETCRYPTOSESSIONCERTIFICATE_WRONGSIZE;
pub const D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_WRONGSIZE = D3D11_MESSAGE_ID.GETCRYPTOSESSIONHANDLE_WRONGSIZE;
pub const D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_NULLPARAM = D3D11_MESSAGE_ID.NEGOTIATECRPYTOSESSIONKEYEXCHANGE_NULLPARAM;
pub const D3D11_MESSAGE_ID_ENCRYPTIONBLT_UNSUPPORTED = D3D11_MESSAGE_ID.ENCRYPTIONBLT_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_ENCRYPTIONBLT_NULLPARAM = D3D11_MESSAGE_ID.ENCRYPTIONBLT_NULLPARAM;
pub const D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_WRONGDEVICE = D3D11_MESSAGE_ID.ENCRYPTIONBLT_SRC_WRONGDEVICE;
pub const D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_WRONGDEVICE = D3D11_MESSAGE_ID.ENCRYPTIONBLT_DST_WRONGDEVICE;
pub const D3D11_MESSAGE_ID_ENCRYPTIONBLT_FORMAT_MISMATCH = D3D11_MESSAGE_ID.ENCRYPTIONBLT_FORMAT_MISMATCH;
pub const D3D11_MESSAGE_ID_ENCRYPTIONBLT_SIZE_MISMATCH = D3D11_MESSAGE_ID.ENCRYPTIONBLT_SIZE_MISMATCH;
pub const D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MULTISAMPLED = D3D11_MESSAGE_ID.ENCRYPTIONBLT_SRC_MULTISAMPLED;
pub const D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_NOT_STAGING = D3D11_MESSAGE_ID.ENCRYPTIONBLT_DST_NOT_STAGING;
pub const D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_MAPPED = D3D11_MESSAGE_ID.ENCRYPTIONBLT_SRC_MAPPED;
pub const D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_MAPPED = D3D11_MESSAGE_ID.ENCRYPTIONBLT_DST_MAPPED;
pub const D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_OFFERED = D3D11_MESSAGE_ID.ENCRYPTIONBLT_SRC_OFFERED;
pub const D3D11_MESSAGE_ID_ENCRYPTIONBLT_DST_OFFERED = D3D11_MESSAGE_ID.ENCRYPTIONBLT_DST_OFFERED;
pub const D3D11_MESSAGE_ID_ENCRYPTIONBLT_SRC_CONTENT_UNDEFINED = D3D11_MESSAGE_ID.ENCRYPTIONBLT_SRC_CONTENT_UNDEFINED;
pub const D3D11_MESSAGE_ID_DECRYPTIONBLT_UNSUPPORTED = D3D11_MESSAGE_ID.DECRYPTIONBLT_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DECRYPTIONBLT_NULLPARAM = D3D11_MESSAGE_ID.DECRYPTIONBLT_NULLPARAM;
pub const D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_WRONGDEVICE = D3D11_MESSAGE_ID.DECRYPTIONBLT_SRC_WRONGDEVICE;
pub const D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_WRONGDEVICE = D3D11_MESSAGE_ID.DECRYPTIONBLT_DST_WRONGDEVICE;
pub const D3D11_MESSAGE_ID_DECRYPTIONBLT_FORMAT_MISMATCH = D3D11_MESSAGE_ID.DECRYPTIONBLT_FORMAT_MISMATCH;
pub const D3D11_MESSAGE_ID_DECRYPTIONBLT_SIZE_MISMATCH = D3D11_MESSAGE_ID.DECRYPTIONBLT_SIZE_MISMATCH;
pub const D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MULTISAMPLED = D3D11_MESSAGE_ID.DECRYPTIONBLT_DST_MULTISAMPLED;
pub const D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_NOT_STAGING = D3D11_MESSAGE_ID.DECRYPTIONBLT_SRC_NOT_STAGING;
pub const D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_NOT_RENDER_TARGET = D3D11_MESSAGE_ID.DECRYPTIONBLT_DST_NOT_RENDER_TARGET;
pub const D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_MAPPED = D3D11_MESSAGE_ID.DECRYPTIONBLT_SRC_MAPPED;
pub const D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_MAPPED = D3D11_MESSAGE_ID.DECRYPTIONBLT_DST_MAPPED;
pub const D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_OFFERED = D3D11_MESSAGE_ID.DECRYPTIONBLT_SRC_OFFERED;
pub const D3D11_MESSAGE_ID_DECRYPTIONBLT_DST_OFFERED = D3D11_MESSAGE_ID.DECRYPTIONBLT_DST_OFFERED;
pub const D3D11_MESSAGE_ID_DECRYPTIONBLT_SRC_CONTENT_UNDEFINED = D3D11_MESSAGE_ID.DECRYPTIONBLT_SRC_CONTENT_UNDEFINED;
pub const D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_NULLPARAM = D3D11_MESSAGE_ID.STARTSESSIONKEYREFRESH_NULLPARAM;
pub const D3D11_MESSAGE_ID_STARTSESSIONKEYREFRESH_INVALIDSIZE = D3D11_MESSAGE_ID.STARTSESSIONKEYREFRESH_INVALIDSIZE;
pub const D3D11_MESSAGE_ID_FINISHSESSIONKEYREFRESH_NULLPARAM = D3D11_MESSAGE_ID.FINISHSESSIONKEYREFRESH_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_NULLPARAM = D3D11_MESSAGE_ID.GETENCRYPTIONBLTKEY_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETENCRYPTIONBLTKEY_INVALIDSIZE = D3D11_MESSAGE_ID.GETENCRYPTIONBLTKEY_INVALIDSIZE;
pub const D3D11_MESSAGE_ID_GETCONTENTPROTECTIONCAPS_NULLPARAM = D3D11_MESSAGE_ID.GETCONTENTPROTECTIONCAPS_NULLPARAM;
pub const D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_NULLPARAM = D3D11_MESSAGE_ID.CHECKCRYPTOKEYEXCHANGE_NULLPARAM;
pub const D3D11_MESSAGE_ID_CHECKCRYPTOKEYEXCHANGE_INVALIDINDEX = D3D11_MESSAGE_ID.CHECKCRYPTOKEYEXCHANGE_INVALIDINDEX;
pub const D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_NULLPARAM = D3D11_MESSAGE_ID.CREATEAUTHENTICATEDCHANNEL_NULLPARAM;
pub const D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_UNSUPPORTED = D3D11_MESSAGE_ID.CREATEAUTHENTICATEDCHANNEL_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_INVALIDTYPE = D3D11_MESSAGE_ID.CREATEAUTHENTICATEDCHANNEL_INVALIDTYPE;
pub const D3D11_MESSAGE_ID_CREATEAUTHENTICATEDCHANNEL_OUTOFMEMORY_RETURN = D3D11_MESSAGE_ID.CREATEAUTHENTICATEDCHANNEL_OUTOFMEMORY_RETURN;
pub const D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_INVALIDCHANNEL = D3D11_MESSAGE_ID.GETAUTHENTICATEDCHANNELCERTIFICATESIZE_INVALIDCHANNEL;
pub const D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATESIZE_NULLPARAM = D3D11_MESSAGE_ID.GETAUTHENTICATEDCHANNELCERTIFICATESIZE_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_INVALIDCHANNEL = D3D11_MESSAGE_ID.GETAUTHENTICATEDCHANNELCERTIFICATE_INVALIDCHANNEL;
pub const D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_NULLPARAM = D3D11_MESSAGE_ID.GETAUTHENTICATEDCHANNELCERTIFICATE_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETAUTHENTICATEDCHANNELCERTIFICATE_WRONGSIZE = D3D11_MESSAGE_ID.GETAUTHENTICATEDCHANNELCERTIFICATE_WRONGSIZE;
pub const D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDCHANNEL = D3D11_MESSAGE_ID.NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDCHANNEL;
pub const D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_NULLPARAM = D3D11_MESSAGE_ID.NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_NULLPARAM;
pub const D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_NULLPARAM = D3D11_MESSAGE_ID.QUERYAUTHENTICATEDCHANNEL_NULLPARAM;
pub const D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGCHANNEL = D3D11_MESSAGE_ID.QUERYAUTHENTICATEDCHANNEL_WRONGCHANNEL;
pub const D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_UNSUPPORTEDQUERY = D3D11_MESSAGE_ID.QUERYAUTHENTICATEDCHANNEL_UNSUPPORTEDQUERY;
pub const D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_WRONGSIZE = D3D11_MESSAGE_ID.QUERYAUTHENTICATEDCHANNEL_WRONGSIZE;
pub const D3D11_MESSAGE_ID_QUERYAUTHENTICATEDCHANNEL_INVALIDPROCESSINDEX = D3D11_MESSAGE_ID.QUERYAUTHENTICATEDCHANNEL_INVALIDPROCESSINDEX;
pub const D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_NULLPARAM = D3D11_MESSAGE_ID.CONFIGUREAUTHENTICATEDCHANNEL_NULLPARAM;
pub const D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGCHANNEL = D3D11_MESSAGE_ID.CONFIGUREAUTHENTICATEDCHANNEL_WRONGCHANNEL;
pub const D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_UNSUPPORTEDCONFIGURE = D3D11_MESSAGE_ID.CONFIGUREAUTHENTICATEDCHANNEL_UNSUPPORTEDCONFIGURE;
pub const D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_WRONGSIZE = D3D11_MESSAGE_ID.CONFIGUREAUTHENTICATEDCHANNEL_WRONGSIZE;
pub const D3D11_MESSAGE_ID_CONFIGUREAUTHENTICATEDCHANNEL_INVALIDPROCESSIDTYPE = D3D11_MESSAGE_ID.CONFIGUREAUTHENTICATEDCHANNEL_INVALIDPROCESSIDTYPE;
pub const D3D11_MESSAGE_ID_VSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = D3D11_MESSAGE_ID.VSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT;
pub const D3D11_MESSAGE_ID_DSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = D3D11_MESSAGE_ID.DSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT;
pub const D3D11_MESSAGE_ID_HSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = D3D11_MESSAGE_ID.HSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT;
pub const D3D11_MESSAGE_ID_GSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = D3D11_MESSAGE_ID.GSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT;
pub const D3D11_MESSAGE_ID_PSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = D3D11_MESSAGE_ID.PSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT;
pub const D3D11_MESSAGE_ID_CSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT = D3D11_MESSAGE_ID.CSSETCONSTANTBUFFERS_INVALIDBUFFEROFFSETORCOUNT;
pub const D3D11_MESSAGE_ID_NEGOTIATECRPYTOSESSIONKEYEXCHANGE_INVALIDSIZE = D3D11_MESSAGE_ID.NEGOTIATECRPYTOSESSIONKEYEXCHANGE_INVALIDSIZE;
pub const D3D11_MESSAGE_ID_NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDSIZE = D3D11_MESSAGE_ID.NEGOTIATEAUTHENTICATEDCHANNELKEYEXCHANGE_INVALIDSIZE;
pub const D3D11_MESSAGE_ID_OFFERRESOURCES_INVALIDPRIORITY = D3D11_MESSAGE_ID.OFFERRESOURCES_INVALIDPRIORITY;
pub const D3D11_MESSAGE_ID_GETCRYPTOSESSIONHANDLE_OUTOFMEMORY = D3D11_MESSAGE_ID.GETCRYPTOSESSIONHANDLE_OUTOFMEMORY;
pub const D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_NULLPARAM = D3D11_MESSAGE_ID.ACQUIREHANDLEFORCAPTURE_NULLPARAM;
pub const D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDTYPE = D3D11_MESSAGE_ID.ACQUIREHANDLEFORCAPTURE_INVALIDTYPE;
pub const D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDBIND = D3D11_MESSAGE_ID.ACQUIREHANDLEFORCAPTURE_INVALIDBIND;
pub const D3D11_MESSAGE_ID_ACQUIREHANDLEFORCAPTURE_INVALIDARRAY = D3D11_MESSAGE_ID.ACQUIREHANDLEFORCAPTURE_INVALIDARRAY;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMROTATION_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMROTATION_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_INVALID = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMROTATION_INVALID;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMROTATION_UNSUPPORTED = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMROTATION_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMROTATION_NULLPARAM;
pub const D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDVIEW = D3D11_MESSAGE_ID.DEVICE_CLEARVIEW_INVALIDVIEW;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEVERTEXSHADER_DOUBLEEXTENSIONSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEVERTEXSHADER_SHADEREXTENSIONSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEHULLSHADER_DOUBLEEXTENSIONSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEHULLSHADER_SHADEREXTENSIONSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEDOMAINSHADER_DOUBLEEXTENSIONSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEDOMAINSHADER_SHADEREXTENSIONSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEGEOMETRYSHADER_DOUBLEEXTENSIONSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEGEOMETRYSHADER_SHADEREXTENSIONSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_DOUBLEEXTENSIONSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_SHADEREXTENSIONSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEPIXELSHADER_DOUBLEEXTENSIONSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEPIXELSHADER_SHADEREXTENSIONSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATECOMPUTESHADER_DOUBLEEXTENSIONSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATECOMPUTESHADER_SHADEREXTENSIONSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_SHADER_LINKAGE_MINPRECISION = D3D11_MESSAGE_ID.DEVICE_SHADER_LINKAGE_MINPRECISION;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMALPHA_UNSUPPORTED = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMALPHA_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_UNSUPPORTED = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMPIXELASPECTRATIO_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEVERTEXSHADER_UAVSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEHULLSHADER_UAVSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEDOMAINSHADER_UAVSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEGEOMETRYSHADER_UAVSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEGEOMETRYSHADERWITHSTREAMOUTPUT_UAVSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATEPIXELSHADER_UAVSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CREATECOMPUTESHADER_UAVSNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET = D3D11_MESSAGE_ID.DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_INVALIDOFFSET;
pub const D3D11_MESSAGE_ID_DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS = D3D11_MESSAGE_ID.DEVICE_OMSETRENDERTARGETSANDUNORDEREDACCESSVIEWS_TOOMANYVIEWS;
pub const D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_NOTSUPPORTED = D3D11_MESSAGE_ID.DEVICE_CLEARVIEW_NOTSUPPORTED;
pub const D3D11_MESSAGE_ID_SWAPDEVICECONTEXTSTATE_NOTSUPPORTED = D3D11_MESSAGE_ID.SWAPDEVICECONTEXTSTATE_NOTSUPPORTED;
pub const D3D11_MESSAGE_ID_UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1 = D3D11_MESSAGE_ID.UPDATESUBRESOURCE_PREFERUPDATESUBRESOURCE1;
pub const D3D11_MESSAGE_ID_GETDC_INACCESSIBLE = D3D11_MESSAGE_ID.GETDC_INACCESSIBLE;
pub const D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDRECT = D3D11_MESSAGE_ID.DEVICE_CLEARVIEW_INVALIDRECT;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9 = D3D11_MESSAGE_ID.DEVICE_DRAW_SAMPLE_MASK_IGNORED_ON_FL9;
pub const D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED = D3D11_MESSAGE_ID.DEVICE_OPEN_SHARED_RESOURCE1_NOT_SUPPORTED;
pub const D3D11_MESSAGE_ID_DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED = D3D11_MESSAGE_ID.DEVICE_OPEN_SHARED_RESOURCE_BY_NAME_NOT_SUPPORTED;
pub const D3D11_MESSAGE_ID_ENQUEUESETEVENT_NOT_SUPPORTED = D3D11_MESSAGE_ID.ENQUEUESETEVENT_NOT_SUPPORTED;
pub const D3D11_MESSAGE_ID_OFFERRELEASE_NOT_SUPPORTED = D3D11_MESSAGE_ID.OFFERRELEASE_NOT_SUPPORTED;
pub const D3D11_MESSAGE_ID_OFFERRESOURCES_INACCESSIBLE = D3D11_MESSAGE_ID.OFFERRESOURCES_INACCESSIBLE;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSORINPUTVIEW_INVALIDMSAA;
pub const D3D11_MESSAGE_ID_CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA = D3D11_MESSAGE_ID.CREATEVIDEOPROCESSOROUTPUTVIEW_INVALIDMSAA;
pub const D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_INVALIDSOURCERECT = D3D11_MESSAGE_ID.DEVICE_CLEARVIEW_INVALIDSOURCERECT;
pub const D3D11_MESSAGE_ID_DEVICE_CLEARVIEW_EMPTYRECT = D3D11_MESSAGE_ID.DEVICE_CLEARVIEW_EMPTYRECT;
pub const D3D11_MESSAGE_ID_UPDATESUBRESOURCE_EMPTYDESTBOX = D3D11_MESSAGE_ID.UPDATESUBRESOURCE_EMPTYDESTBOX;
pub const D3D11_MESSAGE_ID_COPYSUBRESOURCEREGION_EMPTYSOURCEBOX = D3D11_MESSAGE_ID.COPYSUBRESOURCEREGION_EMPTYSOURCEBOX;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS = D3D11_MESSAGE_ID.DEVICE_DRAW_OM_RENDER_TARGET_DOES_NOT_SUPPORT_LOGIC_OPS;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET = D3D11_MESSAGE_ID.DEVICE_DRAW_DEPTHSTENCILVIEW_NOT_SET;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET = D3D11_MESSAGE_ID.DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT = D3D11_MESSAGE_ID.DEVICE_DRAW_RENDERTARGETVIEW_NOT_SET_DUE_TO_FLIP_PRESENT;
pub const D3D11_MESSAGE_ID_DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT = D3D11_MESSAGE_ID.DEVICE_UNORDEREDACCESSVIEW_NOT_SET_DUE_TO_FLIP_PRESENT;
pub const D3D11_MESSAGE_ID_GETDATAFORNEWHARDWAREKEY_NULLPARAM = D3D11_MESSAGE_ID.GETDATAFORNEWHARDWAREKEY_NULLPARAM;
pub const D3D11_MESSAGE_ID_CHECKCRYPTOSESSIONSTATUS_NULLPARAM = D3D11_MESSAGE_ID.CHECKCRYPTOSESSIONSTATUS_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETCRYPTOSESSIONPRIVATEDATASIZE_NULLPARAM = D3D11_MESSAGE_ID.GETCRYPTOSESSIONPRIVATEDATASIZE_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETVIDEODECODERCAPS_NULLPARAM = D3D11_MESSAGE_ID.GETVIDEODECODERCAPS_NULLPARAM;
pub const D3D11_MESSAGE_ID_GETVIDEODECODERCAPS_ZEROWIDTHHEIGHT = D3D11_MESSAGE_ID.GETVIDEODECODERCAPS_ZEROWIDTHHEIGHT;
pub const D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_NULLPARAM = D3D11_MESSAGE_ID.CHECKVIDEODECODERDOWNSAMPLING_NULLPARAM;
pub const D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE = D3D11_MESSAGE_ID.CHECKVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE;
pub const D3D11_MESSAGE_ID_CHECKVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT = D3D11_MESSAGE_ID.CHECKVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT;
pub const D3D11_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_NULLPARAM = D3D11_MESSAGE_ID.VIDEODECODERENABLEDOWNSAMPLING_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEODECODERENABLEDOWNSAMPLING_UNSUPPORTED = D3D11_MESSAGE_ID.VIDEODECODERENABLEDOWNSAMPLING_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_NULLPARAM = D3D11_MESSAGE_ID.VIDEODECODERUPDATEDOWNSAMPLING_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEODECODERUPDATEDOWNSAMPLING_UNSUPPORTED = D3D11_MESSAGE_ID.VIDEODECODERUPDATEDOWNSAMPLING_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_CHECKVIDEOPROCESSORFORMATCONVERSION_NULLPARAM = D3D11_MESSAGE_ID.CHECKVIDEOPROCESSORFORMATCONVERSION_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTCOLORSPACE1_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETOUTPUTCOLORSPACE1_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTCOLORSPACE1_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETOUTPUTCOLORSPACE1_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMCOLORSPACE1_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMCOLORSPACE1_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMCOLORSPACE1_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMMIRROR_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMMIRROR_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMMIRROR_UNSUPPORTED = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMMIRROR_UNSUPPORTED;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMCOLORSPACE1_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMMIRROR_NULLPARAM;
pub const D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_NULLPARAM = D3D11_MESSAGE_ID.RECOMMENDVIDEODECODERDOWNSAMPLING_NULLPARAM;
pub const D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE = D3D11_MESSAGE_ID.RECOMMENDVIDEODECODERDOWNSAMPLING_INVALIDCOLORSPACE;
pub const D3D11_MESSAGE_ID_RECOMMENDVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT = D3D11_MESSAGE_ID.RECOMMENDVIDEODECODERDOWNSAMPLING_ZEROWIDTHHEIGHT;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTSHADERUSAGE_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETOUTPUTSHADERUSAGE_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTSHADERUSAGE_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETOUTPUTSHADERUSAGE_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETBEHAVIORHINTS_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSTREAMCOUNT = D3D11_MESSAGE_ID.VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSTREAMCOUNT;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_TARGETRECT = D3D11_MESSAGE_ID.VIDEOPROCESSORGETBEHAVIORHINTS_TARGETRECT;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSOURCERECT = D3D11_MESSAGE_ID.VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDSOURCERECT;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDDESTRECT = D3D11_MESSAGE_ID.VIDEOPROCESSORGETBEHAVIORHINTS_INVALIDDESTRECT;
pub const D3D11_MESSAGE_ID_GETCRYPTOSESSIONPRIVATEDATASIZE_INVALID_KEY_EXCHANGE_TYPE = D3D11_MESSAGE_ID.GETCRYPTOSESSIONPRIVATEDATASIZE_INVALID_KEY_EXCHANGE_TYPE;
pub const D3D11_MESSAGE_ID_D3D11_1_MESSAGES_END = D3D11_MESSAGE_ID.D3D11_1_MESSAGES_END;
pub const D3D11_MESSAGE_ID_D3D11_2_MESSAGES_START = D3D11_MESSAGE_ID.D3D11_2_MESSAGES_START;
pub const D3D11_MESSAGE_ID_CREATEBUFFER_INVALIDUSAGE = D3D11_MESSAGE_ID.CREATEBUFFER_INVALIDUSAGE;
pub const D3D11_MESSAGE_ID_CREATETEXTURE1D_INVALIDUSAGE = D3D11_MESSAGE_ID.CREATETEXTURE1D_INVALIDUSAGE;
pub const D3D11_MESSAGE_ID_CREATETEXTURE2D_INVALIDUSAGE = D3D11_MESSAGE_ID.CREATETEXTURE2D_INVALIDUSAGE;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_STEPRATE_NOT_1 = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_LEVEL9_STEPRATE_NOT_1;
pub const D3D11_MESSAGE_ID_CREATEINPUTLAYOUT_LEVEL9_INSTANCING_NOT_SUPPORTED = D3D11_MESSAGE_ID.CREATEINPUTLAYOUT_LEVEL9_INSTANCING_NOT_SUPPORTED;
pub const D3D11_MESSAGE_ID_UPDATETILEMAPPINGS_INVALID_PARAMETER = D3D11_MESSAGE_ID.UPDATETILEMAPPINGS_INVALID_PARAMETER;
pub const D3D11_MESSAGE_ID_COPYTILEMAPPINGS_INVALID_PARAMETER = D3D11_MESSAGE_ID.COPYTILEMAPPINGS_INVALID_PARAMETER;
pub const D3D11_MESSAGE_ID_COPYTILES_INVALID_PARAMETER = D3D11_MESSAGE_ID.COPYTILES_INVALID_PARAMETER;
pub const D3D11_MESSAGE_ID_UPDATETILES_INVALID_PARAMETER = D3D11_MESSAGE_ID.UPDATETILES_INVALID_PARAMETER;
pub const D3D11_MESSAGE_ID_RESIZETILEPOOL_INVALID_PARAMETER = D3D11_MESSAGE_ID.RESIZETILEPOOL_INVALID_PARAMETER;
pub const D3D11_MESSAGE_ID_TILEDRESOURCEBARRIER_INVALID_PARAMETER = D3D11_MESSAGE_ID.TILEDRESOURCEBARRIER_INVALID_PARAMETER;
pub const D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_WARNING = D3D11_MESSAGE_ID.NULL_TILE_MAPPING_ACCESS_WARNING;
pub const D3D11_MESSAGE_ID_NULL_TILE_MAPPING_ACCESS_ERROR = D3D11_MESSAGE_ID.NULL_TILE_MAPPING_ACCESS_ERROR;
pub const D3D11_MESSAGE_ID_DIRTY_TILE_MAPPING_ACCESS = D3D11_MESSAGE_ID.DIRTY_TILE_MAPPING_ACCESS;
pub const D3D11_MESSAGE_ID_DUPLICATE_TILE_MAPPINGS_IN_COVERED_AREA = D3D11_MESSAGE_ID.DUPLICATE_TILE_MAPPINGS_IN_COVERED_AREA;
pub const D3D11_MESSAGE_ID_TILE_MAPPINGS_IN_COVERED_AREA_DUPLICATED_OUTSIDE = D3D11_MESSAGE_ID.TILE_MAPPINGS_IN_COVERED_AREA_DUPLICATED_OUTSIDE;
pub const D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INCOMPATIBLE_RESOURCES = D3D11_MESSAGE_ID.TILE_MAPPINGS_SHARED_BETWEEN_INCOMPATIBLE_RESOURCES;
pub const D3D11_MESSAGE_ID_TILE_MAPPINGS_SHARED_BETWEEN_INPUT_AND_OUTPUT = D3D11_MESSAGE_ID.TILE_MAPPINGS_SHARED_BETWEEN_INPUT_AND_OUTPUT;
pub const D3D11_MESSAGE_ID_CHECKMULTISAMPLEQUALITYLEVELS_INVALIDFLAGS = D3D11_MESSAGE_ID.CHECKMULTISAMPLEQUALITYLEVELS_INVALIDFLAGS;
pub const D3D11_MESSAGE_ID_GETRESOURCETILING_NONTILED_RESOURCE = D3D11_MESSAGE_ID.GETRESOURCETILING_NONTILED_RESOURCE;
pub const D3D11_MESSAGE_ID_RESIZETILEPOOL_SHRINK_WITH_MAPPINGS_STILL_DEFINED_PAST_END = D3D11_MESSAGE_ID.RESIZETILEPOOL_SHRINK_WITH_MAPPINGS_STILL_DEFINED_PAST_END;
pub const D3D11_MESSAGE_ID_NEED_TO_CALL_TILEDRESOURCEBARRIER = D3D11_MESSAGE_ID.NEED_TO_CALL_TILEDRESOURCEBARRIER;
pub const D3D11_MESSAGE_ID_CREATEDEVICE_INVALIDARGS = D3D11_MESSAGE_ID.CREATEDEVICE_INVALIDARGS;
pub const D3D11_MESSAGE_ID_CREATEDEVICE_WARNING = D3D11_MESSAGE_ID.CREATEDEVICE_WARNING;
pub const D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWUINT_HAZARD = D3D11_MESSAGE_ID.CLEARUNORDEREDACCESSVIEWUINT_HAZARD;
pub const D3D11_MESSAGE_ID_CLEARUNORDEREDACCESSVIEWFLOAT_HAZARD = D3D11_MESSAGE_ID.CLEARUNORDEREDACCESSVIEWFLOAT_HAZARD;
pub const D3D11_MESSAGE_ID_TILED_RESOURCE_TIER_1_BUFFER_TEXTURE_MISMATCH = D3D11_MESSAGE_ID.TILED_RESOURCE_TIER_1_BUFFER_TEXTURE_MISMATCH;
pub const D3D11_MESSAGE_ID_CREATE_CRYPTOSESSION = D3D11_MESSAGE_ID.CREATE_CRYPTOSESSION;
pub const D3D11_MESSAGE_ID_CREATE_AUTHENTICATEDCHANNEL = D3D11_MESSAGE_ID.CREATE_AUTHENTICATEDCHANNEL;
pub const D3D11_MESSAGE_ID_LIVE_CRYPTOSESSION = D3D11_MESSAGE_ID.LIVE_CRYPTOSESSION;
pub const D3D11_MESSAGE_ID_LIVE_AUTHENTICATEDCHANNEL = D3D11_MESSAGE_ID.LIVE_AUTHENTICATEDCHANNEL;
pub const D3D11_MESSAGE_ID_DESTROY_CRYPTOSESSION = D3D11_MESSAGE_ID.DESTROY_CRYPTOSESSION;
pub const D3D11_MESSAGE_ID_DESTROY_AUTHENTICATEDCHANNEL = D3D11_MESSAGE_ID.DESTROY_AUTHENTICATEDCHANNEL;
pub const D3D11_MESSAGE_ID_D3D11_2_MESSAGES_END = D3D11_MESSAGE_ID.D3D11_2_MESSAGES_END;
pub const D3D11_MESSAGE_ID_D3D11_3_MESSAGES_START = D3D11_MESSAGE_ID.D3D11_3_MESSAGES_START;
pub const D3D11_MESSAGE_ID_CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE = D3D11_MESSAGE_ID.CREATERASTERIZERSTATE_INVALID_CONSERVATIVERASTERMODE;
pub const D3D11_MESSAGE_ID_DEVICE_DRAW_INVALID_SYSTEMVALUE = D3D11_MESSAGE_ID.DEVICE_DRAW_INVALID_SYSTEMVALUE;
pub const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_INVALIDCONTEXTTYPE = D3D11_MESSAGE_ID.CREATEQUERYORPREDICATE_INVALIDCONTEXTTYPE;
pub const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_DECODENOTSUPPORTED = D3D11_MESSAGE_ID.CREATEQUERYORPREDICATE_DECODENOTSUPPORTED;
pub const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_ENCODENOTSUPPORTED = D3D11_MESSAGE_ID.CREATEQUERYORPREDICATE_ENCODENOTSUPPORTED;
pub const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDPLANEINDEX = D3D11_MESSAGE_ID.CREATESHADERRESOURCEVIEW_INVALIDPLANEINDEX;
pub const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANEINDEX = D3D11_MESSAGE_ID.CREATESHADERRESOURCEVIEW_INVALIDVIDEOPLANEINDEX;
pub const D3D11_MESSAGE_ID_CREATESHADERRESOURCEVIEW_AMBIGUOUSVIDEOPLANEINDEX = D3D11_MESSAGE_ID.CREATESHADERRESOURCEVIEW_AMBIGUOUSVIDEOPLANEINDEX;
pub const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDPLANEINDEX = D3D11_MESSAGE_ID.CREATERENDERTARGETVIEW_INVALIDPLANEINDEX;
pub const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_INVALIDVIDEOPLANEINDEX = D3D11_MESSAGE_ID.CREATERENDERTARGETVIEW_INVALIDVIDEOPLANEINDEX;
pub const D3D11_MESSAGE_ID_CREATERENDERTARGETVIEW_AMBIGUOUSVIDEOPLANEINDEX = D3D11_MESSAGE_ID.CREATERENDERTARGETVIEW_AMBIGUOUSVIDEOPLANEINDEX;
pub const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDPLANEINDEX = D3D11_MESSAGE_ID.CREATEUNORDEREDACCESSVIEW_INVALIDPLANEINDEX;
pub const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANEINDEX = D3D11_MESSAGE_ID.CREATEUNORDEREDACCESSVIEW_INVALIDVIDEOPLANEINDEX;
pub const D3D11_MESSAGE_ID_CREATEUNORDEREDACCESSVIEW_AMBIGUOUSVIDEOPLANEINDEX = D3D11_MESSAGE_ID.CREATEUNORDEREDACCESSVIEW_AMBIGUOUSVIDEOPLANEINDEX;
pub const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSCANDATAOFFSET = D3D11_MESSAGE_ID.JPEGDECODE_INVALIDSCANDATAOFFSET;
pub const D3D11_MESSAGE_ID_JPEGDECODE_NOTSUPPORTED = D3D11_MESSAGE_ID.JPEGDECODE_NOTSUPPORTED;
pub const D3D11_MESSAGE_ID_JPEGDECODE_DIMENSIONSTOOLARGE = D3D11_MESSAGE_ID.JPEGDECODE_DIMENSIONSTOOLARGE;
pub const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDCOMPONENTS = D3D11_MESSAGE_ID.JPEGDECODE_INVALIDCOMPONENTS;
pub const D3D11_MESSAGE_ID_JPEGDECODE_DESTINATIONNOT2D = D3D11_MESSAGE_ID.JPEGDECODE_DESTINATIONNOT2D;
pub const D3D11_MESSAGE_ID_JPEGDECODE_TILEDRESOURCESUNSUPPORTED = D3D11_MESSAGE_ID.JPEGDECODE_TILEDRESOURCESUNSUPPORTED;
pub const D3D11_MESSAGE_ID_JPEGDECODE_GUARDRECTSUNSUPPORTED = D3D11_MESSAGE_ID.JPEGDECODE_GUARDRECTSUNSUPPORTED;
pub const D3D11_MESSAGE_ID_JPEGDECODE_FORMATUNSUPPORTED = D3D11_MESSAGE_ID.JPEGDECODE_FORMATUNSUPPORTED;
pub const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSUBRESOURCE = D3D11_MESSAGE_ID.JPEGDECODE_INVALIDSUBRESOURCE;
pub const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDMIPLEVEL = D3D11_MESSAGE_ID.JPEGDECODE_INVALIDMIPLEVEL;
pub const D3D11_MESSAGE_ID_JPEGDECODE_EMPTYDESTBOX = D3D11_MESSAGE_ID.JPEGDECODE_EMPTYDESTBOX;
pub const D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXNOT2D = D3D11_MESSAGE_ID.JPEGDECODE_DESTBOXNOT2D;
pub const D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXNOTSUB = D3D11_MESSAGE_ID.JPEGDECODE_DESTBOXNOTSUB;
pub const D3D11_MESSAGE_ID_JPEGDECODE_DESTBOXESINTERSECT = D3D11_MESSAGE_ID.JPEGDECODE_DESTBOXESINTERSECT;
pub const D3D11_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEMISMATCH = D3D11_MESSAGE_ID.JPEGDECODE_XSUBSAMPLEMISMATCH;
pub const D3D11_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEMISMATCH = D3D11_MESSAGE_ID.JPEGDECODE_YSUBSAMPLEMISMATCH;
pub const D3D11_MESSAGE_ID_JPEGDECODE_XSUBSAMPLEODD = D3D11_MESSAGE_ID.JPEGDECODE_XSUBSAMPLEODD;
pub const D3D11_MESSAGE_ID_JPEGDECODE_YSUBSAMPLEODD = D3D11_MESSAGE_ID.JPEGDECODE_YSUBSAMPLEODD;
pub const D3D11_MESSAGE_ID_JPEGDECODE_OUTPUTDIMENSIONSTOOLARGE = D3D11_MESSAGE_ID.JPEGDECODE_OUTPUTDIMENSIONSTOOLARGE;
pub const D3D11_MESSAGE_ID_JPEGDECODE_NONPOW2SCALEUNSUPPORTED = D3D11_MESSAGE_ID.JPEGDECODE_NONPOW2SCALEUNSUPPORTED;
pub const D3D11_MESSAGE_ID_JPEGDECODE_FRACTIONALDOWNSCALETOLARGE = D3D11_MESSAGE_ID.JPEGDECODE_FRACTIONALDOWNSCALETOLARGE;
pub const D3D11_MESSAGE_ID_JPEGDECODE_CHROMASIZEMISMATCH = D3D11_MESSAGE_ID.JPEGDECODE_CHROMASIZEMISMATCH;
pub const D3D11_MESSAGE_ID_JPEGDECODE_LUMACHROMASIZEMISMATCH = D3D11_MESSAGE_ID.JPEGDECODE_LUMACHROMASIZEMISMATCH;
pub const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDNUMDESTINATIONS = D3D11_MESSAGE_ID.JPEGDECODE_INVALIDNUMDESTINATIONS;
pub const D3D11_MESSAGE_ID_JPEGDECODE_SUBBOXUNSUPPORTED = D3D11_MESSAGE_ID.JPEGDECODE_SUBBOXUNSUPPORTED;
pub const D3D11_MESSAGE_ID_JPEGDECODE_1DESTUNSUPPORTEDFORMAT = D3D11_MESSAGE_ID.JPEGDECODE_1DESTUNSUPPORTEDFORMAT;
pub const D3D11_MESSAGE_ID_JPEGDECODE_3DESTUNSUPPORTEDFORMAT = D3D11_MESSAGE_ID.JPEGDECODE_3DESTUNSUPPORTEDFORMAT;
pub const D3D11_MESSAGE_ID_JPEGDECODE_SCALEUNSUPPORTED = D3D11_MESSAGE_ID.JPEGDECODE_SCALEUNSUPPORTED;
pub const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDSOURCESIZE = D3D11_MESSAGE_ID.JPEGDECODE_INVALIDSOURCESIZE;
pub const D3D11_MESSAGE_ID_JPEGDECODE_INVALIDCOPYFLAGS = D3D11_MESSAGE_ID.JPEGDECODE_INVALIDCOPYFLAGS;
pub const D3D11_MESSAGE_ID_JPEGDECODE_HAZARD = D3D11_MESSAGE_ID.JPEGDECODE_HAZARD;
pub const D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERUSAGE = D3D11_MESSAGE_ID.JPEGDECODE_UNSUPPORTEDSRCBUFFERUSAGE;
pub const D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDSRCBUFFERMISCFLAGS = D3D11_MESSAGE_ID.JPEGDECODE_UNSUPPORTEDSRCBUFFERMISCFLAGS;
pub const D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPORTEDDSTTEXTUREUSAGE = D3D11_MESSAGE_ID.JPEGDECODE_UNSUPPORTEDDSTTEXTUREUSAGE;
pub const D3D11_MESSAGE_ID_JPEGDECODE_BACKBUFFERNOTSUPPORTED = D3D11_MESSAGE_ID.JPEGDECODE_BACKBUFFERNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_JPEGDECODE_UNSUPPRTEDCOPYFLAGS = D3D11_MESSAGE_ID.JPEGDECODE_UNSUPPRTEDCOPYFLAGS;
pub const D3D11_MESSAGE_ID_JPEGENCODE_NOTSUPPORTED = D3D11_MESSAGE_ID.JPEGENCODE_NOTSUPPORTED;
pub const D3D11_MESSAGE_ID_JPEGENCODE_INVALIDSCANDATAOFFSET = D3D11_MESSAGE_ID.JPEGENCODE_INVALIDSCANDATAOFFSET;
pub const D3D11_MESSAGE_ID_JPEGENCODE_INVALIDCOMPONENTS = D3D11_MESSAGE_ID.JPEGENCODE_INVALIDCOMPONENTS;
pub const D3D11_MESSAGE_ID_JPEGENCODE_SOURCENOT2D = D3D11_MESSAGE_ID.JPEGENCODE_SOURCENOT2D;
pub const D3D11_MESSAGE_ID_JPEGENCODE_TILEDRESOURCESUNSUPPORTED = D3D11_MESSAGE_ID.JPEGENCODE_TILEDRESOURCESUNSUPPORTED;
pub const D3D11_MESSAGE_ID_JPEGENCODE_GUARDRECTSUNSUPPORTED = D3D11_MESSAGE_ID.JPEGENCODE_GUARDRECTSUNSUPPORTED;
pub const D3D11_MESSAGE_ID_JPEGENCODE_XSUBSAMPLEMISMATCH = D3D11_MESSAGE_ID.JPEGENCODE_XSUBSAMPLEMISMATCH;
pub const D3D11_MESSAGE_ID_JPEGENCODE_YSUBSAMPLEMISMATCH = D3D11_MESSAGE_ID.JPEGENCODE_YSUBSAMPLEMISMATCH;
pub const D3D11_MESSAGE_ID_JPEGENCODE_FORMATUNSUPPORTED = D3D11_MESSAGE_ID.JPEGENCODE_FORMATUNSUPPORTED;
pub const D3D11_MESSAGE_ID_JPEGENCODE_INVALIDSUBRESOURCE = D3D11_MESSAGE_ID.JPEGENCODE_INVALIDSUBRESOURCE;
pub const D3D11_MESSAGE_ID_JPEGENCODE_INVALIDMIPLEVEL = D3D11_MESSAGE_ID.JPEGENCODE_INVALIDMIPLEVEL;
pub const D3D11_MESSAGE_ID_JPEGENCODE_DIMENSIONSTOOLARGE = D3D11_MESSAGE_ID.JPEGENCODE_DIMENSIONSTOOLARGE;
pub const D3D11_MESSAGE_ID_JPEGENCODE_HAZARD = D3D11_MESSAGE_ID.JPEGENCODE_HAZARD;
pub const D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERUSAGE = D3D11_MESSAGE_ID.JPEGENCODE_UNSUPPORTEDDSTBUFFERUSAGE;
pub const D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDDSTBUFFERMISCFLAGS = D3D11_MESSAGE_ID.JPEGENCODE_UNSUPPORTEDDSTBUFFERMISCFLAGS;
pub const D3D11_MESSAGE_ID_JPEGENCODE_UNSUPPORTEDSRCTEXTUREUSAGE = D3D11_MESSAGE_ID.JPEGENCODE_UNSUPPORTEDSRCTEXTUREUSAGE;
pub const D3D11_MESSAGE_ID_JPEGENCODE_BACKBUFFERNOTSUPPORTED = D3D11_MESSAGE_ID.JPEGENCODE_BACKBUFFERNOTSUPPORTED;
pub const D3D11_MESSAGE_ID_CREATEQUERYORPREDICATE_UNSUPPORTEDCONTEXTTTYPEFORQUERY = D3D11_MESSAGE_ID.CREATEQUERYORPREDICATE_UNSUPPORTEDCONTEXTTTYPEFORQUERY;
pub const D3D11_MESSAGE_ID_FLUSH1_INVALIDCONTEXTTYPE = D3D11_MESSAGE_ID.FLUSH1_INVALIDCONTEXTTYPE;
pub const D3D11_MESSAGE_ID_DEVICE_SETHARDWAREPROTECTION_INVALIDCONTEXT = D3D11_MESSAGE_ID.DEVICE_SETHARDWAREPROTECTION_INVALIDCONTEXT;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTHDRMETADATA_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETOUTPUTHDRMETADATA_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETOUTPUTHDRMETADATA_INVALIDSIZE = D3D11_MESSAGE_ID.VIDEOPROCESSORSETOUTPUTHDRMETADATA_INVALIDSIZE;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTHDRMETADATA_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETOUTPUTHDRMETADATA_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETOUTPUTHDRMETADATA_INVALIDSIZE = D3D11_MESSAGE_ID.VIDEOPROCESSORGETOUTPUTHDRMETADATA_INVALIDSIZE;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMHDRMETADATA_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSIZE = D3D11_MESSAGE_ID.VIDEOPROCESSORSETSTREAMHDRMETADATA_INVALIDSIZE;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_NULLPARAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMHDRMETADATA_NULLPARAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSIZE = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMHDRMETADATA_INVALIDSIZE;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFRAMEFORMAT_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMFRAMEFORMAT_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMCOLORSPACE_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMOUTPUTRATE_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMOUTPUTRATE_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSOURCERECT_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMSOURCERECT_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMDESTRECT_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMDESTRECT_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMALPHA_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMALPHA_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPALETTE_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMPALETTE_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMPIXELASPECTRATIO_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMLUMAKEY_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMLUMAKEY_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMSTEREOFORMAT_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMSTEREOFORMAT_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMAUTOPROCESSINGMODE_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMFILTER_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMFILTER_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMROTATION_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMROTATION_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMCOLORSPACE1_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMCOLORSPACE1_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_VIDEOPROCESSORGETSTREAMMIRROR_INVALIDSTREAM = D3D11_MESSAGE_ID.VIDEOPROCESSORGETSTREAMMIRROR_INVALIDSTREAM;
pub const D3D11_MESSAGE_ID_CREATE_FENCE = D3D11_MESSAGE_ID.CREATE_FENCE;
pub const D3D11_MESSAGE_ID_LIVE_FENCE = D3D11_MESSAGE_ID.LIVE_FENCE;
pub const D3D11_MESSAGE_ID_DESTROY_FENCE = D3D11_MESSAGE_ID.DESTROY_FENCE;
pub const D3D11_MESSAGE_ID_CREATE_SYNCHRONIZEDCHANNEL = D3D11_MESSAGE_ID.CREATE_SYNCHRONIZEDCHANNEL;
pub const D3D11_MESSAGE_ID_LIVE_SYNCHRONIZEDCHANNEL = D3D11_MESSAGE_ID.LIVE_SYNCHRONIZEDCHANNEL;
pub const D3D11_MESSAGE_ID_DESTROY_SYNCHRONIZEDCHANNEL = D3D11_MESSAGE_ID.DESTROY_SYNCHRONIZEDCHANNEL;
pub const D3D11_MESSAGE_ID_CREATEFENCE_INVALIDFLAGS = D3D11_MESSAGE_ID.CREATEFENCE_INVALIDFLAGS;
pub const D3D11_MESSAGE_ID_D3D11_3_MESSAGES_END = D3D11_MESSAGE_ID.D3D11_3_MESSAGES_END;
pub const D3D11_MESSAGE_ID_D3D11_5_MESSAGES_START = D3D11_MESSAGE_ID.D3D11_5_MESSAGES_START;
pub const D3D11_MESSAGE_ID_NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_INVALIDKEYEXCHANGETYPE = D3D11_MESSAGE_ID.NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_INVALIDKEYEXCHANGETYPE;
pub const D3D11_MESSAGE_ID_NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_NOT_SUPPORTED = D3D11_MESSAGE_ID.NEGOTIATECRYPTOSESSIONKEYEXCHANGEMT_NOT_SUPPORTED;
pub const D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT_COUNT = D3D11_MESSAGE_ID.DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT_COUNT;
pub const D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT = D3D11_MESSAGE_ID.DECODERBEGINFRAME_INVALID_HISTOGRAM_COMPONENT;
pub const D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_SIZE = D3D11_MESSAGE_ID.DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_SIZE;
pub const D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_USAGE = D3D11_MESSAGE_ID.DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_USAGE;
pub const D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_MISC_FLAGS = D3D11_MESSAGE_ID.DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_MISC_FLAGS;
pub const D3D11_MESSAGE_ID_DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_OFFSET = D3D11_MESSAGE_ID.DECODERBEGINFRAME_INVALID_HISTOGRAM_BUFFER_OFFSET;
pub const D3D11_MESSAGE_ID_CREATE_TRACKEDWORKLOAD = D3D11_MESSAGE_ID.CREATE_TRACKEDWORKLOAD;
pub const D3D11_MESSAGE_ID_LIVE_TRACKEDWORKLOAD = D3D11_MESSAGE_ID.LIVE_TRACKEDWORKLOAD;
pub const D3D11_MESSAGE_ID_DESTROY_TRACKEDWORKLOAD = D3D11_MESSAGE_ID.DESTROY_TRACKEDWORKLOAD;
pub const D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_NULLPARAM = D3D11_MESSAGE_ID.CREATE_TRACKED_WORKLOAD_NULLPARAM;
pub const D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_MAX_INSTANCES = D3D11_MESSAGE_ID.CREATE_TRACKED_WORKLOAD_INVALID_MAX_INSTANCES;
pub const D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_DEADLINE_TYPE = D3D11_MESSAGE_ID.CREATE_TRACKED_WORKLOAD_INVALID_DEADLINE_TYPE;
pub const D3D11_MESSAGE_ID_CREATE_TRACKED_WORKLOAD_INVALID_ENGINE_TYPE = D3D11_MESSAGE_ID.CREATE_TRACKED_WORKLOAD_INVALID_ENGINE_TYPE;
pub const D3D11_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOADS = D3D11_MESSAGE_ID.MULTIPLE_TRACKED_WORKLOADS;
pub const D3D11_MESSAGE_ID_MULTIPLE_TRACKED_WORKLOAD_PAIRS = D3D11_MESSAGE_ID.MULTIPLE_TRACKED_WORKLOAD_PAIRS;
pub const D3D11_MESSAGE_ID_INCOMPLETE_TRACKED_WORKLOAD_PAIR = D3D11_MESSAGE_ID.INCOMPLETE_TRACKED_WORKLOAD_PAIR;
pub const D3D11_MESSAGE_ID_OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR = D3D11_MESSAGE_ID.OUT_OF_ORDER_TRACKED_WORKLOAD_PAIR;
pub const D3D11_MESSAGE_ID_CANNOT_ADD_TRACKED_WORKLOAD = D3D11_MESSAGE_ID.CANNOT_ADD_TRACKED_WORKLOAD;
pub const D3D11_MESSAGE_ID_TRACKED_WORKLOAD_NOT_SUPPORTED = D3D11_MESSAGE_ID.TRACKED_WORKLOAD_NOT_SUPPORTED;
pub const D3D11_MESSAGE_ID_TRACKED_WORKLOAD_ENGINE_TYPE_NOT_FOUND = D3D11_MESSAGE_ID.TRACKED_WORKLOAD_ENGINE_TYPE_NOT_FOUND;
pub const D3D11_MESSAGE_ID_NO_TRACKED_WORKLOAD_SLOT_AVAILABLE = D3D11_MESSAGE_ID.NO_TRACKED_WORKLOAD_SLOT_AVAILABLE;
pub const D3D11_MESSAGE_ID_END_TRACKED_WORKLOAD_INVALID_ARG = D3D11_MESSAGE_ID.END_TRACKED_WORKLOAD_INVALID_ARG;
pub const D3D11_MESSAGE_ID_TRACKED_WORKLOAD_DISJOINT_FAILURE = D3D11_MESSAGE_ID.TRACKED_WORKLOAD_DISJOINT_FAILURE;
pub const D3D11_MESSAGE_ID_D3D11_5_MESSAGES_END = D3D11_MESSAGE_ID.D3D11_5_MESSAGES_END;

pub const D3D11_MESSAGE = extern struct {
    Category: D3D11_MESSAGE_CATEGORY,
    Severity: D3D11_MESSAGE_SEVERITY,
    ID: D3D11_MESSAGE_ID,
    pDescription: ?*const u8,
    DescriptionByteLength: usize,
};

pub const D3D11_INFO_QUEUE_FILTER_DESC = extern struct {
    NumCategories: u32,
    pCategoryList: ?*D3D11_MESSAGE_CATEGORY,
    NumSeverities: u32,
    pSeverityList: ?*D3D11_MESSAGE_SEVERITY,
    NumIDs: u32,
    pIDList: ?*D3D11_MESSAGE_ID,
};

pub const D3D11_INFO_QUEUE_FILTER = extern struct {
    AllowList: D3D11_INFO_QUEUE_FILTER_DESC,
    DenyList: D3D11_INFO_QUEUE_FILTER_DESC,
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11InfoQueue_Value = Guid.initString("6543dbb6-1b48-42f5-ab82-e97ec74326f6");
pub const IID_ID3D11InfoQueue = &IID_ID3D11InfoQueue_Value;
pub const ID3D11InfoQueue = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetMessageCountLimit: *const fn (
            self: *const ID3D11InfoQueue,
            message_count_limit: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearStoredMessages: *const fn (
            self: *const ID3D11InfoQueue,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetMessage: *const fn (
            self: *const ID3D11InfoQueue,
            message_index: u64,
            // TODO: what to do with BytesParamIndex 2?
            p_message: ?*D3D11_MESSAGE,
            p_message_byte_length: ?*usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumMessagesAllowedByStorageFilter: *const fn (
            self: *const ID3D11InfoQueue,
        ) callconv(@import("std").os.windows.WINAPI) u64,
        GetNumMessagesDeniedByStorageFilter: *const fn (
            self: *const ID3D11InfoQueue,
        ) callconv(@import("std").os.windows.WINAPI) u64,
        GetNumStoredMessages: *const fn (
            self: *const ID3D11InfoQueue,
        ) callconv(@import("std").os.windows.WINAPI) u64,
        GetNumStoredMessagesAllowedByRetrievalFilter: *const fn (
            self: *const ID3D11InfoQueue,
        ) callconv(@import("std").os.windows.WINAPI) u64,
        GetNumMessagesDiscardedByMessageCountLimit: *const fn (
            self: *const ID3D11InfoQueue,
        ) callconv(@import("std").os.windows.WINAPI) u64,
        GetMessageCountLimit: *const fn (
            self: *const ID3D11InfoQueue,
        ) callconv(@import("std").os.windows.WINAPI) u64,
        AddStorageFilterEntries: *const fn (
            self: *const ID3D11InfoQueue,
            p_filter: ?*D3D11_INFO_QUEUE_FILTER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStorageFilter: *const fn (
            self: *const ID3D11InfoQueue,
            // TODO: what to do with BytesParamIndex 1?
            p_filter: ?*D3D11_INFO_QUEUE_FILTER,
            p_filter_byte_length: ?*usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearStorageFilter: *const fn (
            self: *const ID3D11InfoQueue,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PushEmptyStorageFilter: *const fn (
            self: *const ID3D11InfoQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PushCopyOfStorageFilter: *const fn (
            self: *const ID3D11InfoQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PushStorageFilter: *const fn (
            self: *const ID3D11InfoQueue,
            p_filter: ?*D3D11_INFO_QUEUE_FILTER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PopStorageFilter: *const fn (
            self: *const ID3D11InfoQueue,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetStorageFilterStackSize: *const fn (
            self: *const ID3D11InfoQueue,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        AddRetrievalFilterEntries: *const fn (
            self: *const ID3D11InfoQueue,
            p_filter: ?*D3D11_INFO_QUEUE_FILTER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRetrievalFilter: *const fn (
            self: *const ID3D11InfoQueue,
            // TODO: what to do with BytesParamIndex 1?
            p_filter: ?*D3D11_INFO_QUEUE_FILTER,
            p_filter_byte_length: ?*usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearRetrievalFilter: *const fn (
            self: *const ID3D11InfoQueue,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PushEmptyRetrievalFilter: *const fn (
            self: *const ID3D11InfoQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PushCopyOfRetrievalFilter: *const fn (
            self: *const ID3D11InfoQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PushRetrievalFilter: *const fn (
            self: *const ID3D11InfoQueue,
            p_filter: ?*D3D11_INFO_QUEUE_FILTER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PopRetrievalFilter: *const fn (
            self: *const ID3D11InfoQueue,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetRetrievalFilterStackSize: *const fn (
            self: *const ID3D11InfoQueue,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        AddMessage: *const fn (
            self: *const ID3D11InfoQueue,
            category: D3D11_MESSAGE_CATEGORY,
            severity: D3D11_MESSAGE_SEVERITY,
            i_d: D3D11_MESSAGE_ID,
            p_description: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddApplicationMessage: *const fn (
            self: *const ID3D11InfoQueue,
            severity: D3D11_MESSAGE_SEVERITY,
            p_description: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBreakOnCategory: *const fn (
            self: *const ID3D11InfoQueue,
            category: D3D11_MESSAGE_CATEGORY,
            b_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBreakOnSeverity: *const fn (
            self: *const ID3D11InfoQueue,
            severity: D3D11_MESSAGE_SEVERITY,
            b_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBreakOnID: *const fn (
            self: *const ID3D11InfoQueue,
            i_d: D3D11_MESSAGE_ID,
            b_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBreakOnCategory: *const fn (
            self: *const ID3D11InfoQueue,
            category: D3D11_MESSAGE_CATEGORY,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetBreakOnSeverity: *const fn (
            self: *const ID3D11InfoQueue,
            severity: D3D11_MESSAGE_SEVERITY,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetBreakOnID: *const fn (
            self: *const ID3D11InfoQueue,
            i_d: D3D11_MESSAGE_ID,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        SetMuteDebugOutput: *const fn (
            self: *const ID3D11InfoQueue,
            b_mute: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetMuteDebugOutput: *const fn (
            self: *const ID3D11InfoQueue,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setMessageCountLimit(self: *const T, message_count_limit_: u64) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).SetMessageCountLimit(@as(*const ID3D11InfoQueue, @ptrCast(self)), message_count_limit_);
            }
            pub inline fn clearStoredMessages(self: *const T) void {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).ClearStoredMessages(@as(*const ID3D11InfoQueue, @ptrCast(self)));
            }
            pub inline fn getMessage(self: *const T, message_index_: u64, p_message_: ?*D3D11_MESSAGE, p_message_byte_length_: ?*usize) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetMessage(@as(*const ID3D11InfoQueue, @ptrCast(self)), message_index_, p_message_, p_message_byte_length_);
            }
            pub inline fn getNumMessagesAllowedByStorageFilter(self: *const T) u64 {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetNumMessagesAllowedByStorageFilter(@as(*const ID3D11InfoQueue, @ptrCast(self)));
            }
            pub inline fn getNumMessagesDeniedByStorageFilter(self: *const T) u64 {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetNumMessagesDeniedByStorageFilter(@as(*const ID3D11InfoQueue, @ptrCast(self)));
            }
            pub inline fn getNumStoredMessages(self: *const T) u64 {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetNumStoredMessages(@as(*const ID3D11InfoQueue, @ptrCast(self)));
            }
            pub inline fn getNumStoredMessagesAllowedByRetrievalFilter(self: *const T) u64 {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetNumStoredMessagesAllowedByRetrievalFilter(@as(*const ID3D11InfoQueue, @ptrCast(self)));
            }
            pub inline fn getNumMessagesDiscardedByMessageCountLimit(self: *const T) u64 {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetNumMessagesDiscardedByMessageCountLimit(@as(*const ID3D11InfoQueue, @ptrCast(self)));
            }
            pub inline fn getMessageCountLimit(self: *const T) u64 {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetMessageCountLimit(@as(*const ID3D11InfoQueue, @ptrCast(self)));
            }
            pub inline fn addStorageFilterEntries(self: *const T, p_filter_: ?*D3D11_INFO_QUEUE_FILTER) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).AddStorageFilterEntries(@as(*const ID3D11InfoQueue, @ptrCast(self)), p_filter_);
            }
            pub inline fn getStorageFilter(self: *const T, p_filter_: ?*D3D11_INFO_QUEUE_FILTER, p_filter_byte_length_: ?*usize) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetStorageFilter(@as(*const ID3D11InfoQueue, @ptrCast(self)), p_filter_, p_filter_byte_length_);
            }
            pub inline fn clearStorageFilter(self: *const T) void {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).ClearStorageFilter(@as(*const ID3D11InfoQueue, @ptrCast(self)));
            }
            pub inline fn pushEmptyStorageFilter(self: *const T) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).PushEmptyStorageFilter(@as(*const ID3D11InfoQueue, @ptrCast(self)));
            }
            pub inline fn pushCopyOfStorageFilter(self: *const T) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).PushCopyOfStorageFilter(@as(*const ID3D11InfoQueue, @ptrCast(self)));
            }
            pub inline fn pushStorageFilter(self: *const T, p_filter_: ?*D3D11_INFO_QUEUE_FILTER) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).PushStorageFilter(@as(*const ID3D11InfoQueue, @ptrCast(self)), p_filter_);
            }
            pub inline fn popStorageFilter(self: *const T) void {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).PopStorageFilter(@as(*const ID3D11InfoQueue, @ptrCast(self)));
            }
            pub inline fn getStorageFilterStackSize(self: *const T) u32 {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetStorageFilterStackSize(@as(*const ID3D11InfoQueue, @ptrCast(self)));
            }
            pub inline fn addRetrievalFilterEntries(self: *const T, p_filter_: ?*D3D11_INFO_QUEUE_FILTER) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).AddRetrievalFilterEntries(@as(*const ID3D11InfoQueue, @ptrCast(self)), p_filter_);
            }
            pub inline fn getRetrievalFilter(self: *const T, p_filter_: ?*D3D11_INFO_QUEUE_FILTER, p_filter_byte_length_: ?*usize) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetRetrievalFilter(@as(*const ID3D11InfoQueue, @ptrCast(self)), p_filter_, p_filter_byte_length_);
            }
            pub inline fn clearRetrievalFilter(self: *const T) void {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).ClearRetrievalFilter(@as(*const ID3D11InfoQueue, @ptrCast(self)));
            }
            pub inline fn pushEmptyRetrievalFilter(self: *const T) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).PushEmptyRetrievalFilter(@as(*const ID3D11InfoQueue, @ptrCast(self)));
            }
            pub inline fn pushCopyOfRetrievalFilter(self: *const T) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).PushCopyOfRetrievalFilter(@as(*const ID3D11InfoQueue, @ptrCast(self)));
            }
            pub inline fn pushRetrievalFilter(self: *const T, p_filter_: ?*D3D11_INFO_QUEUE_FILTER) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).PushRetrievalFilter(@as(*const ID3D11InfoQueue, @ptrCast(self)), p_filter_);
            }
            pub inline fn popRetrievalFilter(self: *const T) void {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).PopRetrievalFilter(@as(*const ID3D11InfoQueue, @ptrCast(self)));
            }
            pub inline fn getRetrievalFilterStackSize(self: *const T) u32 {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetRetrievalFilterStackSize(@as(*const ID3D11InfoQueue, @ptrCast(self)));
            }
            pub inline fn addMessage(self: *const T, category_: D3D11_MESSAGE_CATEGORY, severity_: D3D11_MESSAGE_SEVERITY, i_d_: D3D11_MESSAGE_ID, p_description_: ?[*:0]const u8) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).AddMessage(@as(*const ID3D11InfoQueue, @ptrCast(self)), category_, severity_, i_d_, p_description_);
            }
            pub inline fn addApplicationMessage(self: *const T, severity_: D3D11_MESSAGE_SEVERITY, p_description_: ?[*:0]const u8) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).AddApplicationMessage(@as(*const ID3D11InfoQueue, @ptrCast(self)), severity_, p_description_);
            }
            pub inline fn setBreakOnCategory(self: *const T, category_: D3D11_MESSAGE_CATEGORY, b_enable_: BOOL) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).SetBreakOnCategory(@as(*const ID3D11InfoQueue, @ptrCast(self)), category_, b_enable_);
            }
            pub inline fn setBreakOnSeverity(self: *const T, severity_: D3D11_MESSAGE_SEVERITY, b_enable_: BOOL) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).SetBreakOnSeverity(@as(*const ID3D11InfoQueue, @ptrCast(self)), severity_, b_enable_);
            }
            pub inline fn setBreakOnID(self: *const T, i_d_: D3D11_MESSAGE_ID, b_enable_: BOOL) HRESULT {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).SetBreakOnID(@as(*const ID3D11InfoQueue, @ptrCast(self)), i_d_, b_enable_);
            }
            pub inline fn getBreakOnCategory(self: *const T, category_: D3D11_MESSAGE_CATEGORY) BOOL {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetBreakOnCategory(@as(*const ID3D11InfoQueue, @ptrCast(self)), category_);
            }
            pub inline fn getBreakOnSeverity(self: *const T, severity_: D3D11_MESSAGE_SEVERITY) BOOL {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetBreakOnSeverity(@as(*const ID3D11InfoQueue, @ptrCast(self)), severity_);
            }
            pub inline fn getBreakOnID(self: *const T, i_d_: D3D11_MESSAGE_ID) BOOL {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetBreakOnID(@as(*const ID3D11InfoQueue, @ptrCast(self)), i_d_);
            }
            pub inline fn setMuteDebugOutput(self: *const T, b_mute_: BOOL) void {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).SetMuteDebugOutput(@as(*const ID3D11InfoQueue, @ptrCast(self)), b_mute_);
            }
            pub inline fn getMuteDebugOutput(self: *const T) BOOL {
                return @as(*const ID3D11InfoQueue.VTable, @ptrCast(self.vtable)).GetMuteDebugOutput(@as(*const ID3D11InfoQueue, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PFN_D3D11_CREATE_DEVICE = *const fn (
    param0: ?*IDXGIAdapter,
    param1: D3D_DRIVER_TYPE,
    param2: ?HINSTANCE,
    param3: u32,
    param4: ?[*]const D3D_FEATURE_LEVEL,
    feature_levels: u32,
    param6: u32,
    param7: ?*?*ID3D11Device,
    param8: ?*D3D_FEATURE_LEVEL,
    param9: ?*?*ID3D11DeviceContext,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN = *const fn (
    param0: ?*IDXGIAdapter,
    param1: D3D_DRIVER_TYPE,
    param2: ?HINSTANCE,
    param3: u32,
    param4: ?[*]const D3D_FEATURE_LEVEL,
    feature_levels: u32,
    param6: u32,
    param7: ?*const DXGI_SWAP_CHAIN_DESC,
    param8: ?*?*IDXGISwapChain,
    param9: ?*?*ID3D11Device,
    param10: ?*D3D_FEATURE_LEVEL,
    param11: ?*?*ID3D11DeviceContext,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const D3D11_COPY_FLAGS = enum(i32) {
    NO_OVERWRITE = 1,
    DISCARD = 2,
};
pub const D3D11_COPY_NO_OVERWRITE = D3D11_COPY_FLAGS.NO_OVERWRITE;
pub const D3D11_COPY_DISCARD = D3D11_COPY_FLAGS.DISCARD;

pub const D3D11_LOGIC_OP = enum(i32) {
    CLEAR = 0,
    SET = 1,
    COPY = 2,
    COPY_INVERTED = 3,
    NOOP = 4,
    INVERT = 5,
    AND = 6,
    NAND = 7,
    OR = 8,
    NOR = 9,
    XOR = 10,
    EQUIV = 11,
    AND_REVERSE = 12,
    AND_INVERTED = 13,
    OR_REVERSE = 14,
    OR_INVERTED = 15,
};
pub const D3D11_LOGIC_OP_CLEAR = D3D11_LOGIC_OP.CLEAR;
pub const D3D11_LOGIC_OP_SET = D3D11_LOGIC_OP.SET;
pub const D3D11_LOGIC_OP_COPY = D3D11_LOGIC_OP.COPY;
pub const D3D11_LOGIC_OP_COPY_INVERTED = D3D11_LOGIC_OP.COPY_INVERTED;
pub const D3D11_LOGIC_OP_NOOP = D3D11_LOGIC_OP.NOOP;
pub const D3D11_LOGIC_OP_INVERT = D3D11_LOGIC_OP.INVERT;
pub const D3D11_LOGIC_OP_AND = D3D11_LOGIC_OP.AND;
pub const D3D11_LOGIC_OP_NAND = D3D11_LOGIC_OP.NAND;
pub const D3D11_LOGIC_OP_OR = D3D11_LOGIC_OP.OR;
pub const D3D11_LOGIC_OP_NOR = D3D11_LOGIC_OP.NOR;
pub const D3D11_LOGIC_OP_XOR = D3D11_LOGIC_OP.XOR;
pub const D3D11_LOGIC_OP_EQUIV = D3D11_LOGIC_OP.EQUIV;
pub const D3D11_LOGIC_OP_AND_REVERSE = D3D11_LOGIC_OP.AND_REVERSE;
pub const D3D11_LOGIC_OP_AND_INVERTED = D3D11_LOGIC_OP.AND_INVERTED;
pub const D3D11_LOGIC_OP_OR_REVERSE = D3D11_LOGIC_OP.OR_REVERSE;
pub const D3D11_LOGIC_OP_OR_INVERTED = D3D11_LOGIC_OP.OR_INVERTED;

pub const D3D11_RENDER_TARGET_BLEND_DESC1 = extern struct {
    BlendEnable: BOOL,
    LogicOpEnable: BOOL,
    SrcBlend: D3D11_BLEND,
    DestBlend: D3D11_BLEND,
    BlendOp: D3D11_BLEND_OP,
    SrcBlendAlpha: D3D11_BLEND,
    DestBlendAlpha: D3D11_BLEND,
    BlendOpAlpha: D3D11_BLEND_OP,
    LogicOp: D3D11_LOGIC_OP,
    RenderTargetWriteMask: u8,
};

pub const D3D11_BLEND_DESC1 = extern struct {
    AlphaToCoverageEnable: BOOL,
    IndependentBlendEnable: BOOL,
    RenderTarget: [8]D3D11_RENDER_TARGET_BLEND_DESC1,
};

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3D11BlendState1_Value = Guid.initString("cc86fabe-da55-401d-85e7-e3c9de2877e9");
pub const IID_ID3D11BlendState1 = &IID_ID3D11BlendState1_Value;
pub const ID3D11BlendState1 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11BlendState.VTable,
        GetDesc1: *const fn (
            self: *const ID3D11BlendState1,
            p_desc: ?*D3D11_BLEND_DESC1,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11BlendState.MethodMixin(T);
            pub inline fn getDesc1(self: *const T, p_desc_: ?*D3D11_BLEND_DESC1) void {
                return @as(*const ID3D11BlendState1.VTable, @ptrCast(self.vtable)).GetDesc1(@as(*const ID3D11BlendState1, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_RASTERIZER_DESC1 = extern struct {
    FillMode: D3D11_FILL_MODE,
    CullMode: D3D11_CULL_MODE,
    FrontCounterClockwise: BOOL,
    DepthBias: i32,
    DepthBiasClamp: f32,
    SlopeScaledDepthBias: f32,
    DepthClipEnable: BOOL,
    ScissorEnable: BOOL,
    MultisampleEnable: BOOL,
    AntialiasedLineEnable: BOOL,
    ForcedSampleCount: u32,
};

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3D11RasterizerState1_Value = Guid.initString("1217d7a6-5039-418c-b042-9cbe256afd6e");
pub const IID_ID3D11RasterizerState1 = &IID_ID3D11RasterizerState1_Value;
pub const ID3D11RasterizerState1 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11RasterizerState.VTable,
        GetDesc1: *const fn (
            self: *const ID3D11RasterizerState1,
            p_desc: ?*D3D11_RASTERIZER_DESC1,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11RasterizerState.MethodMixin(T);
            pub inline fn getDesc1(self: *const T, p_desc_: ?*D3D11_RASTERIZER_DESC1) void {
                return @as(*const ID3D11RasterizerState1.VTable, @ptrCast(self.vtable)).GetDesc1(@as(*const ID3D11RasterizerState1, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_1_CREATE_DEVICE_CONTEXT_STATE_FLAG = enum(i32) {
    D = 1,
};
pub const D3D11_1_CREATE_DEVICE_CONTEXT_STATE_SINGLETHREADED = D3D11_1_CREATE_DEVICE_CONTEXT_STATE_FLAG.D;

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3DDeviceContextState_Value = Guid.initString("5c1e0d8a-7c23-48f9-8c59-a92958ceff11");
pub const IID_ID3DDeviceContextState = &IID_ID3DDeviceContextState_Value;
pub const ID3DDeviceContextState = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3D11DeviceContext1_Value = Guid.initString("bb2c6faa-b5fb-4082-8e6b-388b8cfa90e1");
pub const IID_ID3D11DeviceContext1 = &IID_ID3D11DeviceContext1_Value;
pub const ID3D11DeviceContext1 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceContext.VTable,
        CopySubresourceRegion1: *const fn (
            self: *const ID3D11DeviceContext1,
            p_dst_resource: ?*ID3D11Resource,
            dst_subresource: u32,
            dst_x: u32,
            dst_y: u32,
            dst_z: u32,
            p_src_resource: ?*ID3D11Resource,
            src_subresource: u32,
            p_src_box: ?*const D3D11_BOX,
            copy_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        UpdateSubresource1: *const fn (
            self: *const ID3D11DeviceContext1,
            p_dst_resource: ?*ID3D11Resource,
            dst_subresource: u32,
            p_dst_box: ?*const D3D11_BOX,
            p_src_data: ?*const anyopaque,
            src_row_pitch: u32,
            src_depth_pitch: u32,
            copy_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DiscardResource: *const fn (
            self: *const ID3D11DeviceContext1,
            p_resource: ?*ID3D11Resource,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DiscardView: *const fn (
            self: *const ID3D11DeviceContext1,
            p_resource_view: ?*ID3D11View,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VSSetConstantBuffers1: *const fn (
            self: *const ID3D11DeviceContext1,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
            p_first_constant: ?[*]const u32,
            p_num_constants: ?[*]const u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        HSSetConstantBuffers1: *const fn (
            self: *const ID3D11DeviceContext1,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
            p_first_constant: ?[*]const u32,
            p_num_constants: ?[*]const u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DSSetConstantBuffers1: *const fn (
            self: *const ID3D11DeviceContext1,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
            p_first_constant: ?[*]const u32,
            p_num_constants: ?[*]const u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GSSetConstantBuffers1: *const fn (
            self: *const ID3D11DeviceContext1,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
            p_first_constant: ?[*]const u32,
            p_num_constants: ?[*]const u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PSSetConstantBuffers1: *const fn (
            self: *const ID3D11DeviceContext1,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
            p_first_constant: ?[*]const u32,
            p_num_constants: ?[*]const u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CSSetConstantBuffers1: *const fn (
            self: *const ID3D11DeviceContext1,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
            p_first_constant: ?[*]const u32,
            p_num_constants: ?[*]const u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VSGetConstantBuffers1: *const fn (
            self: *const ID3D11DeviceContext1,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
            p_first_constant: ?[*]u32,
            p_num_constants: ?[*]u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        HSGetConstantBuffers1: *const fn (
            self: *const ID3D11DeviceContext1,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
            p_first_constant: ?[*]u32,
            p_num_constants: ?[*]u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DSGetConstantBuffers1: *const fn (
            self: *const ID3D11DeviceContext1,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
            p_first_constant: ?[*]u32,
            p_num_constants: ?[*]u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GSGetConstantBuffers1: *const fn (
            self: *const ID3D11DeviceContext1,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
            p_first_constant: ?[*]u32,
            p_num_constants: ?[*]u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PSGetConstantBuffers1: *const fn (
            self: *const ID3D11DeviceContext1,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
            p_first_constant: ?[*]u32,
            p_num_constants: ?[*]u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CSGetConstantBuffers1: *const fn (
            self: *const ID3D11DeviceContext1,
            start_slot: u32,
            num_buffers: u32,
            pp_constant_buffers: ?[*]?*ID3D11Buffer,
            p_first_constant: ?[*]u32,
            p_num_constants: ?[*]u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SwapDeviceContextState: *const fn (
            self: *const ID3D11DeviceContext1,
            p_state: ?*ID3DDeviceContextState,
            pp_previous_state: ?*?*ID3DDeviceContextState,
        ) callconv(@import("std").os.windows.WINAPI) void,
        ClearView: *const fn (
            self: *const ID3D11DeviceContext1,
            p_view: ?*ID3D11View,
            color: ?*const f32,
            p_rect: ?[*]const RECT,
            num_rects: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DiscardView1: *const fn (
            self: *const ID3D11DeviceContext1,
            p_resource_view: ?*ID3D11View,
            p_rects: ?[*]const RECT,
            num_rects: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceContext.MethodMixin(T);
            pub inline fn copySubresourceRegion1(self: *const T, p_dst_resource_: ?*ID3D11Resource, dst_subresource_: u32, dst_x_: u32, dst_y_: u32, dst_z_: u32, p_src_resource_: ?*ID3D11Resource, src_subresource_: u32, p_src_box_: ?*const D3D11_BOX, copy_flags_: u32) void {
                return @as(*const ID3D11DeviceContext1.VTable, @ptrCast(self.vtable)).CopySubresourceRegion1(@as(*const ID3D11DeviceContext1, @ptrCast(self)), p_dst_resource_, dst_subresource_, dst_x_, dst_y_, dst_z_, p_src_resource_, src_subresource_, p_src_box_, copy_flags_);
            }
            pub inline fn updateSubresource1(self: *const T, p_dst_resource_: ?*ID3D11Resource, dst_subresource_: u32, p_dst_box_: ?*const D3D11_BOX, p_src_data_: ?*const anyopaque, src_row_pitch_: u32, src_depth_pitch_: u32, copy_flags_: u32) void {
                return @as(*const ID3D11DeviceContext1.VTable, @ptrCast(self.vtable)).UpdateSubresource1(@as(*const ID3D11DeviceContext1, @ptrCast(self)), p_dst_resource_, dst_subresource_, p_dst_box_, p_src_data_, src_row_pitch_, src_depth_pitch_, copy_flags_);
            }
            pub inline fn discardResource(self: *const T, p_resource_: ?*ID3D11Resource) void {
                return @as(*const ID3D11DeviceContext1.VTable, @ptrCast(self.vtable)).DiscardResource(@as(*const ID3D11DeviceContext1, @ptrCast(self)), p_resource_);
            }
            pub inline fn discardView(self: *const T, p_resource_view_: ?*ID3D11View) void {
                return @as(*const ID3D11DeviceContext1.VTable, @ptrCast(self.vtable)).DiscardView(@as(*const ID3D11DeviceContext1, @ptrCast(self)), p_resource_view_);
            }
            pub inline fn vsSetConstantBuffers1(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer, p_first_constant_: ?[*]const u32, p_num_constants_: ?[*]const u32) void {
                return @as(*const ID3D11DeviceContext1.VTable, @ptrCast(self.vtable)).VSSetConstantBuffers1(@as(*const ID3D11DeviceContext1, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_, p_first_constant_, p_num_constants_);
            }
            pub inline fn hsSetConstantBuffers1(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer, p_first_constant_: ?[*]const u32, p_num_constants_: ?[*]const u32) void {
                return @as(*const ID3D11DeviceContext1.VTable, @ptrCast(self.vtable)).HSSetConstantBuffers1(@as(*const ID3D11DeviceContext1, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_, p_first_constant_, p_num_constants_);
            }
            pub inline fn dsSetConstantBuffers1(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer, p_first_constant_: ?[*]const u32, p_num_constants_: ?[*]const u32) void {
                return @as(*const ID3D11DeviceContext1.VTable, @ptrCast(self.vtable)).DSSetConstantBuffers1(@as(*const ID3D11DeviceContext1, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_, p_first_constant_, p_num_constants_);
            }
            pub inline fn gsSetConstantBuffers1(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer, p_first_constant_: ?[*]const u32, p_num_constants_: ?[*]const u32) void {
                return @as(*const ID3D11DeviceContext1.VTable, @ptrCast(self.vtable)).GSSetConstantBuffers1(@as(*const ID3D11DeviceContext1, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_, p_first_constant_, p_num_constants_);
            }
            pub inline fn psSetConstantBuffers1(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer, p_first_constant_: ?[*]const u32, p_num_constants_: ?[*]const u32) void {
                return @as(*const ID3D11DeviceContext1.VTable, @ptrCast(self.vtable)).PSSetConstantBuffers1(@as(*const ID3D11DeviceContext1, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_, p_first_constant_, p_num_constants_);
            }
            pub inline fn csSetConstantBuffers1(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer, p_first_constant_: ?[*]const u32, p_num_constants_: ?[*]const u32) void {
                return @as(*const ID3D11DeviceContext1.VTable, @ptrCast(self.vtable)).CSSetConstantBuffers1(@as(*const ID3D11DeviceContext1, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_, p_first_constant_, p_num_constants_);
            }
            pub inline fn vsGetConstantBuffers1(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer, p_first_constant_: ?[*]u32, p_num_constants_: ?[*]u32) void {
                return @as(*const ID3D11DeviceContext1.VTable, @ptrCast(self.vtable)).VSGetConstantBuffers1(@as(*const ID3D11DeviceContext1, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_, p_first_constant_, p_num_constants_);
            }
            pub inline fn hsGetConstantBuffers1(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer, p_first_constant_: ?[*]u32, p_num_constants_: ?[*]u32) void {
                return @as(*const ID3D11DeviceContext1.VTable, @ptrCast(self.vtable)).HSGetConstantBuffers1(@as(*const ID3D11DeviceContext1, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_, p_first_constant_, p_num_constants_);
            }
            pub inline fn dsGetConstantBuffers1(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer, p_first_constant_: ?[*]u32, p_num_constants_: ?[*]u32) void {
                return @as(*const ID3D11DeviceContext1.VTable, @ptrCast(self.vtable)).DSGetConstantBuffers1(@as(*const ID3D11DeviceContext1, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_, p_first_constant_, p_num_constants_);
            }
            pub inline fn gsGetConstantBuffers1(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer, p_first_constant_: ?[*]u32, p_num_constants_: ?[*]u32) void {
                return @as(*const ID3D11DeviceContext1.VTable, @ptrCast(self.vtable)).GSGetConstantBuffers1(@as(*const ID3D11DeviceContext1, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_, p_first_constant_, p_num_constants_);
            }
            pub inline fn psGetConstantBuffers1(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer, p_first_constant_: ?[*]u32, p_num_constants_: ?[*]u32) void {
                return @as(*const ID3D11DeviceContext1.VTable, @ptrCast(self.vtable)).PSGetConstantBuffers1(@as(*const ID3D11DeviceContext1, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_, p_first_constant_, p_num_constants_);
            }
            pub inline fn csGetConstantBuffers1(self: *const T, start_slot_: u32, num_buffers_: u32, pp_constant_buffers_: ?[*]?*ID3D11Buffer, p_first_constant_: ?[*]u32, p_num_constants_: ?[*]u32) void {
                return @as(*const ID3D11DeviceContext1.VTable, @ptrCast(self.vtable)).CSGetConstantBuffers1(@as(*const ID3D11DeviceContext1, @ptrCast(self)), start_slot_, num_buffers_, pp_constant_buffers_, p_first_constant_, p_num_constants_);
            }
            pub inline fn swapDeviceContextState(self: *const T, p_state_: ?*ID3DDeviceContextState, pp_previous_state_: ?*?*ID3DDeviceContextState) void {
                return @as(*const ID3D11DeviceContext1.VTable, @ptrCast(self.vtable)).SwapDeviceContextState(@as(*const ID3D11DeviceContext1, @ptrCast(self)), p_state_, pp_previous_state_);
            }
            pub inline fn clearView(self: *const T, p_view_: ?*ID3D11View, color_: ?*const f32, p_rect_: ?[*]const RECT, num_rects_: u32) void {
                return @as(*const ID3D11DeviceContext1.VTable, @ptrCast(self.vtable)).ClearView(@as(*const ID3D11DeviceContext1, @ptrCast(self)), p_view_, color_, p_rect_, num_rects_);
            }
            pub inline fn discardView1(self: *const T, p_resource_view_: ?*ID3D11View, p_rects_: ?[*]const RECT, num_rects_: u32) void {
                return @as(*const ID3D11DeviceContext1.VTable, @ptrCast(self.vtable)).DiscardView1(@as(*const ID3D11DeviceContext1, @ptrCast(self)), p_resource_view_, p_rects_, num_rects_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK = extern struct {
    ClearSize: u32,
    EncryptedSize: u32,
};

pub const D3D11_VIDEO_DECODER_BUFFER_DESC1 = extern struct {
    BufferType: D3D11_VIDEO_DECODER_BUFFER_TYPE,
    DataOffset: u32,
    DataSize: u32,
    pIV: ?*anyopaque,
    IVSize: u32,
    pSubSampleMappingBlock: ?*D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK,
    SubSampleMappingCount: u32,
};

pub const D3D11_VIDEO_DECODER_BEGIN_FRAME_CRYPTO_SESSION = extern struct {
    pCryptoSession: ?*ID3D11CryptoSession,
    BlobSize: u32,
    pBlob: ?*anyopaque,
    pKeyInfoId: ?*Guid,
    PrivateDataSize: u32,
    pPrivateData: ?*anyopaque,
};

pub const D3D11_VIDEO_DECODER_CAPS = enum(i32) {
    DOWNSAMPLE = 1,
    NON_REAL_TIME = 2,
    DOWNSAMPLE_DYNAMIC = 4,
    DOWNSAMPLE_REQUIRED = 8,
    UNSUPPORTED = 16,
};
pub const D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE = D3D11_VIDEO_DECODER_CAPS.DOWNSAMPLE;
pub const D3D11_VIDEO_DECODER_CAPS_NON_REAL_TIME = D3D11_VIDEO_DECODER_CAPS.NON_REAL_TIME;
pub const D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE_DYNAMIC = D3D11_VIDEO_DECODER_CAPS.DOWNSAMPLE_DYNAMIC;
pub const D3D11_VIDEO_DECODER_CAPS_DOWNSAMPLE_REQUIRED = D3D11_VIDEO_DECODER_CAPS.DOWNSAMPLE_REQUIRED;
pub const D3D11_VIDEO_DECODER_CAPS_UNSUPPORTED = D3D11_VIDEO_DECODER_CAPS.UNSUPPORTED;

pub const D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINTS = enum(i32) {
    MULTIPLANE_OVERLAY_ROTATION = 1,
    MULTIPLANE_OVERLAY_RESIZE = 2,
    MULTIPLANE_OVERLAY_COLOR_SPACE_CONVERSION = 4,
    TRIPLE_BUFFER_OUTPUT = 8,
};
pub const D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_ROTATION = D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINTS.MULTIPLANE_OVERLAY_ROTATION;
pub const D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_RESIZE = D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINTS.MULTIPLANE_OVERLAY_RESIZE;
pub const D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_MULTIPLANE_OVERLAY_COLOR_SPACE_CONVERSION = D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINTS.MULTIPLANE_OVERLAY_COLOR_SPACE_CONVERSION;
pub const D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINT_TRIPLE_BUFFER_OUTPUT = D3D11_VIDEO_PROCESSOR_BEHAVIOR_HINTS.TRIPLE_BUFFER_OUTPUT;

pub const D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT = extern struct {
    Enable: BOOL,
    Width: u32,
    Height: u32,
    Format: DXGI_FORMAT,
};

pub const D3D11_CRYPTO_SESSION_STATUS = enum(i32) {
    OK = 0,
    KEY_LOST = 1,
    KEY_AND_CONTENT_LOST = 2,
};
pub const D3D11_CRYPTO_SESSION_STATUS_OK = D3D11_CRYPTO_SESSION_STATUS.OK;
pub const D3D11_CRYPTO_SESSION_STATUS_KEY_LOST = D3D11_CRYPTO_SESSION_STATUS.KEY_LOST;
pub const D3D11_CRYPTO_SESSION_STATUS_KEY_AND_CONTENT_LOST = D3D11_CRYPTO_SESSION_STATUS.KEY_AND_CONTENT_LOST;

pub const D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA = extern struct {
    PrivateDataSize: u32,
    HWProtectionDataSize: u32,
    pbInput: [4]u8,
};

pub const D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA = extern struct {
    PrivateDataSize: u32,
    MaxHWProtectionDataSize: u32,
    HWProtectionDataSize: u32,
    TransportTime: u64,
    ExecutionTime: u64,
    pbOutput: [4]u8,
};

pub const D3D11_KEY_EXCHANGE_HW_PROTECTION_DATA = extern struct {
    HWProtectionFunctionID: u32,
    pInputData: ?*D3D11_KEY_EXCHANGE_HW_PROTECTION_INPUT_DATA,
    pOutputData: ?*D3D11_KEY_EXCHANGE_HW_PROTECTION_OUTPUT_DATA,
    Status: HRESULT,
};

pub const D3D11_VIDEO_SAMPLE_DESC = extern struct {
    Width: u32,
    Height: u32,
    Format: DXGI_FORMAT,
    ColorSpace: DXGI_COLOR_SPACE_TYPE,
};

// TODO: this type is limited to platform 'windows10.0.10240'
// This COM type is Agile, not sure what that means
const IID_ID3D11VideoContext1_Value = Guid.initString("a7f026da-a5f8-4487-a564-15e34357651e");
pub const IID_ID3D11VideoContext1 = &IID_ID3D11VideoContext1_Value;
pub const ID3D11VideoContext1 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11VideoContext.VTable,
        SubmitDecoderBuffers1: *const fn (
            self: *const ID3D11VideoContext1,
            p_decoder: ?*ID3D11VideoDecoder,
            num_buffers: u32,
            p_buffer_desc: [*]const D3D11_VIDEO_DECODER_BUFFER_DESC1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDataForNewHardwareKey: *const fn (
            self: *const ID3D11VideoContext1,
            p_crypto_session: ?*ID3D11CryptoSession,
            private_input_size: u32,
            p_privat_input_data: [*]const u8,
            p_private_output_data: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckCryptoSessionStatus: *const fn (
            self: *const ID3D11VideoContext1,
            p_crypto_session: ?*ID3D11CryptoSession,
            p_status: ?*D3D11_CRYPTO_SESSION_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DecoderEnableDownsampling: *const fn (
            self: *const ID3D11VideoContext1,
            p_decoder: ?*ID3D11VideoDecoder,
            input_color_space: DXGI_COLOR_SPACE_TYPE,
            p_output_desc: ?*const D3D11_VIDEO_SAMPLE_DESC,
            reference_frame_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DecoderUpdateDownsampling: *const fn (
            self: *const ID3D11VideoContext1,
            p_decoder: ?*ID3D11VideoDecoder,
            p_output_desc: ?*const D3D11_VIDEO_SAMPLE_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        VideoProcessorSetOutputColorSpace1: *const fn (
            self: *const ID3D11VideoContext1,
            p_video_processor: ?*ID3D11VideoProcessor,
            color_space: DXGI_COLOR_SPACE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetOutputShaderUsage: *const fn (
            self: *const ID3D11VideoContext1,
            p_video_processor: ?*ID3D11VideoProcessor,
            shader_usage: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetOutputColorSpace1: *const fn (
            self: *const ID3D11VideoContext1,
            p_video_processor: ?*ID3D11VideoProcessor,
            p_color_space: ?*DXGI_COLOR_SPACE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetOutputShaderUsage: *const fn (
            self: *const ID3D11VideoContext1,
            p_video_processor: ?*ID3D11VideoProcessor,
            p_shader_usage: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetStreamColorSpace1: *const fn (
            self: *const ID3D11VideoContext1,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            color_space: DXGI_COLOR_SPACE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetStreamMirror: *const fn (
            self: *const ID3D11VideoContext1,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            enable: BOOL,
            flip_horizontal: BOOL,
            flip_vertical: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetStreamColorSpace1: *const fn (
            self: *const ID3D11VideoContext1,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            p_color_space: ?*DXGI_COLOR_SPACE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetStreamMirror: *const fn (
            self: *const ID3D11VideoContext1,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            p_enable: ?*BOOL,
            p_flip_horizontal: ?*BOOL,
            p_flip_vertical: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetBehaviorHints: *const fn (
            self: *const ID3D11VideoContext1,
            p_video_processor: ?*ID3D11VideoProcessor,
            output_width: u32,
            output_height: u32,
            output_format: DXGI_FORMAT,
            stream_count: u32,
            p_streams: [*]const D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT,
            p_behavior_hints: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11VideoContext.MethodMixin(T);
            pub inline fn submitDecoderBuffers1(self: *const T, p_decoder_: ?*ID3D11VideoDecoder, num_buffers_: u32, p_buffer_desc_: [*]const D3D11_VIDEO_DECODER_BUFFER_DESC1) HRESULT {
                return @as(*const ID3D11VideoContext1.VTable, @ptrCast(self.vtable)).SubmitDecoderBuffers1(@as(*const ID3D11VideoContext1, @ptrCast(self)), p_decoder_, num_buffers_, p_buffer_desc_);
            }
            pub inline fn getDataForNewHardwareKey(self: *const T, p_crypto_session_: ?*ID3D11CryptoSession, private_input_size_: u32, p_privat_input_data_: [*]const u8, p_private_output_data_: ?*u64) HRESULT {
                return @as(*const ID3D11VideoContext1.VTable, @ptrCast(self.vtable)).GetDataForNewHardwareKey(@as(*const ID3D11VideoContext1, @ptrCast(self)), p_crypto_session_, private_input_size_, p_privat_input_data_, p_private_output_data_);
            }
            pub inline fn checkCryptoSessionStatus(self: *const T, p_crypto_session_: ?*ID3D11CryptoSession, p_status_: ?*D3D11_CRYPTO_SESSION_STATUS) HRESULT {
                return @as(*const ID3D11VideoContext1.VTable, @ptrCast(self.vtable)).CheckCryptoSessionStatus(@as(*const ID3D11VideoContext1, @ptrCast(self)), p_crypto_session_, p_status_);
            }
            pub inline fn decoderEnableDownsampling(self: *const T, p_decoder_: ?*ID3D11VideoDecoder, input_color_space_: DXGI_COLOR_SPACE_TYPE, p_output_desc_: ?*const D3D11_VIDEO_SAMPLE_DESC, reference_frame_count_: u32) HRESULT {
                return @as(*const ID3D11VideoContext1.VTable, @ptrCast(self.vtable)).DecoderEnableDownsampling(@as(*const ID3D11VideoContext1, @ptrCast(self)), p_decoder_, input_color_space_, p_output_desc_, reference_frame_count_);
            }
            pub inline fn decoderUpdateDownsampling(self: *const T, p_decoder_: ?*ID3D11VideoDecoder, p_output_desc_: ?*const D3D11_VIDEO_SAMPLE_DESC) HRESULT {
                return @as(*const ID3D11VideoContext1.VTable, @ptrCast(self.vtable)).DecoderUpdateDownsampling(@as(*const ID3D11VideoContext1, @ptrCast(self)), p_decoder_, p_output_desc_);
            }
            pub inline fn videoProcessorSetOutputColorSpace1(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, color_space_: DXGI_COLOR_SPACE_TYPE) void {
                return @as(*const ID3D11VideoContext1.VTable, @ptrCast(self.vtable)).VideoProcessorSetOutputColorSpace1(@as(*const ID3D11VideoContext1, @ptrCast(self)), p_video_processor_, color_space_);
            }
            pub inline fn videoProcessorSetOutputShaderUsage(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, shader_usage_: BOOL) void {
                return @as(*const ID3D11VideoContext1.VTable, @ptrCast(self.vtable)).VideoProcessorSetOutputShaderUsage(@as(*const ID3D11VideoContext1, @ptrCast(self)), p_video_processor_, shader_usage_);
            }
            pub inline fn videoProcessorGetOutputColorSpace1(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, p_color_space_: ?*DXGI_COLOR_SPACE_TYPE) void {
                return @as(*const ID3D11VideoContext1.VTable, @ptrCast(self.vtable)).VideoProcessorGetOutputColorSpace1(@as(*const ID3D11VideoContext1, @ptrCast(self)), p_video_processor_, p_color_space_);
            }
            pub inline fn videoProcessorGetOutputShaderUsage(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, p_shader_usage_: ?*BOOL) void {
                return @as(*const ID3D11VideoContext1.VTable, @ptrCast(self.vtable)).VideoProcessorGetOutputShaderUsage(@as(*const ID3D11VideoContext1, @ptrCast(self)), p_video_processor_, p_shader_usage_);
            }
            pub inline fn videoProcessorSetStreamColorSpace1(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, color_space_: DXGI_COLOR_SPACE_TYPE) void {
                return @as(*const ID3D11VideoContext1.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamColorSpace1(@as(*const ID3D11VideoContext1, @ptrCast(self)), p_video_processor_, stream_index_, color_space_);
            }
            pub inline fn videoProcessorSetStreamMirror(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, enable_: BOOL, flip_horizontal_: BOOL, flip_vertical_: BOOL) void {
                return @as(*const ID3D11VideoContext1.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamMirror(@as(*const ID3D11VideoContext1, @ptrCast(self)), p_video_processor_, stream_index_, enable_, flip_horizontal_, flip_vertical_);
            }
            pub inline fn videoProcessorGetStreamColorSpace1(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, p_color_space_: ?*DXGI_COLOR_SPACE_TYPE) void {
                return @as(*const ID3D11VideoContext1.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamColorSpace1(@as(*const ID3D11VideoContext1, @ptrCast(self)), p_video_processor_, stream_index_, p_color_space_);
            }
            pub inline fn videoProcessorGetStreamMirror(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, p_enable_: ?*BOOL, p_flip_horizontal_: ?*BOOL, p_flip_vertical_: ?*BOOL) void {
                return @as(*const ID3D11VideoContext1.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamMirror(@as(*const ID3D11VideoContext1, @ptrCast(self)), p_video_processor_, stream_index_, p_enable_, p_flip_horizontal_, p_flip_vertical_);
            }
            pub inline fn videoProcessorGetBehaviorHints(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, output_width_: u32, output_height_: u32, output_format_: DXGI_FORMAT, stream_count_: u32, p_streams_: [*]const D3D11_VIDEO_PROCESSOR_STREAM_BEHAVIOR_HINT, p_behavior_hints_: ?*u32) HRESULT {
                return @as(*const ID3D11VideoContext1.VTable, @ptrCast(self.vtable)).VideoProcessorGetBehaviorHints(@as(*const ID3D11VideoContext1, @ptrCast(self)), p_video_processor_, output_width_, output_height_, output_format_, stream_count_, p_streams_, p_behavior_hints_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
// This COM type is Agile, not sure what that means
const IID_ID3D11VideoDevice1_Value = Guid.initString("29da1d51-1321-4454-804b-f5fc9f861f0f");
pub const IID_ID3D11VideoDevice1 = &IID_ID3D11VideoDevice1_Value;
pub const ID3D11VideoDevice1 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11VideoDevice.VTable,
        GetCryptoSessionPrivateDataSize: *const fn (
            self: *const ID3D11VideoDevice1,
            p_crypto_type: ?*const Guid,
            p_decoder_profile: ?*const Guid,
            p_key_exchange_type: ?*const Guid,
            p_private_input_size: ?*u32,
            p_private_output_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVideoDecoderCaps: *const fn (
            self: *const ID3D11VideoDevice1,
            p_decoder_profile: ?*const Guid,
            sample_width: u32,
            sample_height: u32,
            p_frame_rate: ?*const DXGI_RATIONAL,
            bit_rate: u32,
            p_crypto_type: ?*const Guid,
            p_decoder_caps: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckVideoDecoderDownsampling: *const fn (
            self: *const ID3D11VideoDevice1,
            p_input_desc: ?*const D3D11_VIDEO_DECODER_DESC,
            input_color_space: DXGI_COLOR_SPACE_TYPE,
            p_input_config: ?*const D3D11_VIDEO_DECODER_CONFIG,
            p_frame_rate: ?*const DXGI_RATIONAL,
            p_output_desc: ?*const D3D11_VIDEO_SAMPLE_DESC,
            p_supported: ?*BOOL,
            p_real_time_hint: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RecommendVideoDecoderDownsampleParameters: *const fn (
            self: *const ID3D11VideoDevice1,
            p_input_desc: ?*const D3D11_VIDEO_DECODER_DESC,
            input_color_space: DXGI_COLOR_SPACE_TYPE,
            p_input_config: ?*const D3D11_VIDEO_DECODER_CONFIG,
            p_frame_rate: ?*const DXGI_RATIONAL,
            p_recommended_output_desc: ?*D3D11_VIDEO_SAMPLE_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11VideoDevice.MethodMixin(T);
            pub inline fn getCryptoSessionPrivateDataSize(self: *const T, p_crypto_type_: ?*const Guid, p_decoder_profile_: ?*const Guid, p_key_exchange_type_: ?*const Guid, p_private_input_size_: ?*u32, p_private_output_size_: ?*u32) HRESULT {
                return @as(*const ID3D11VideoDevice1.VTable, @ptrCast(self.vtable)).GetCryptoSessionPrivateDataSize(@as(*const ID3D11VideoDevice1, @ptrCast(self)), p_crypto_type_, p_decoder_profile_, p_key_exchange_type_, p_private_input_size_, p_private_output_size_);
            }
            pub inline fn getVideoDecoderCaps(self: *const T, p_decoder_profile_: ?*const Guid, sample_width_: u32, sample_height_: u32, p_frame_rate_: ?*const DXGI_RATIONAL, bit_rate_: u32, p_crypto_type_: ?*const Guid, p_decoder_caps_: ?*u32) HRESULT {
                return @as(*const ID3D11VideoDevice1.VTable, @ptrCast(self.vtable)).GetVideoDecoderCaps(@as(*const ID3D11VideoDevice1, @ptrCast(self)), p_decoder_profile_, sample_width_, sample_height_, p_frame_rate_, bit_rate_, p_crypto_type_, p_decoder_caps_);
            }
            pub inline fn checkVideoDecoderDownsampling(self: *const T, p_input_desc_: ?*const D3D11_VIDEO_DECODER_DESC, input_color_space_: DXGI_COLOR_SPACE_TYPE, p_input_config_: ?*const D3D11_VIDEO_DECODER_CONFIG, p_frame_rate_: ?*const DXGI_RATIONAL, p_output_desc_: ?*const D3D11_VIDEO_SAMPLE_DESC, p_supported_: ?*BOOL, p_real_time_hint_: ?*BOOL) HRESULT {
                return @as(*const ID3D11VideoDevice1.VTable, @ptrCast(self.vtable)).CheckVideoDecoderDownsampling(@as(*const ID3D11VideoDevice1, @ptrCast(self)), p_input_desc_, input_color_space_, p_input_config_, p_frame_rate_, p_output_desc_, p_supported_, p_real_time_hint_);
            }
            pub inline fn recommendVideoDecoderDownsampleParameters(self: *const T, p_input_desc_: ?*const D3D11_VIDEO_DECODER_DESC, input_color_space_: DXGI_COLOR_SPACE_TYPE, p_input_config_: ?*const D3D11_VIDEO_DECODER_CONFIG, p_frame_rate_: ?*const DXGI_RATIONAL, p_recommended_output_desc_: ?*D3D11_VIDEO_SAMPLE_DESC) HRESULT {
                return @as(*const ID3D11VideoDevice1.VTable, @ptrCast(self.vtable)).RecommendVideoDecoderDownsampleParameters(@as(*const ID3D11VideoDevice1, @ptrCast(self)), p_input_desc_, input_color_space_, p_input_config_, p_frame_rate_, p_recommended_output_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
// This COM type is Agile, not sure what that means
const IID_ID3D11VideoProcessorEnumerator1_Value = Guid.initString("465217f2-5568-43cf-b5b9-f61d54531ca1");
pub const IID_ID3D11VideoProcessorEnumerator1 = &IID_ID3D11VideoProcessorEnumerator1_Value;
pub const ID3D11VideoProcessorEnumerator1 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11VideoProcessorEnumerator.VTable,
        CheckVideoProcessorFormatConversion: *const fn (
            self: *const ID3D11VideoProcessorEnumerator1,
            input_format: DXGI_FORMAT,
            input_color_space: DXGI_COLOR_SPACE_TYPE,
            output_format: DXGI_FORMAT,
            output_color_space: DXGI_COLOR_SPACE_TYPE,
            p_supported: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11VideoProcessorEnumerator.MethodMixin(T);
            pub inline fn checkVideoProcessorFormatConversion(self: *const T, input_format_: DXGI_FORMAT, input_color_space_: DXGI_COLOR_SPACE_TYPE, output_format_: DXGI_FORMAT, output_color_space_: DXGI_COLOR_SPACE_TYPE, p_supported_: ?*BOOL) HRESULT {
                return @as(*const ID3D11VideoProcessorEnumerator1.VTable, @ptrCast(self.vtable)).CheckVideoProcessorFormatConversion(@as(*const ID3D11VideoProcessorEnumerator1, @ptrCast(self)), input_format_, input_color_space_, output_format_, output_color_space_, p_supported_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3D11Device1_Value = Guid.initString("a04bfb29-08ef-43d6-a49c-a9bdbdcbe686");
pub const IID_ID3D11Device1 = &IID_ID3D11Device1_Value;
pub const ID3D11Device1 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11Device.VTable,
        GetImmediateContext1: *const fn (
            self: *const ID3D11Device1,
            pp_immediate_context: ?*?*ID3D11DeviceContext1,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CreateDeferredContext1: *const fn (
            self: *const ID3D11Device1,
            context_flags: u32,
            pp_deferred_context: ?*?*ID3D11DeviceContext1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBlendState1: *const fn (
            self: *const ID3D11Device1,
            p_blend_state_desc: ?*const D3D11_BLEND_DESC1,
            pp_blend_state: ?*?*ID3D11BlendState1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRasterizerState1: *const fn (
            self: *const ID3D11Device1,
            p_rasterizer_desc: ?*const D3D11_RASTERIZER_DESC1,
            pp_rasterizer_state: ?*?*ID3D11RasterizerState1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDeviceContextState: *const fn (
            self: *const ID3D11Device1,
            flags: u32,
            p_feature_levels: [*]const D3D_FEATURE_LEVEL,
            feature_levels: u32,
            s_d_k_version: u32,
            emulated_interface: ?*const Guid,
            p_chosen_feature_level: ?*D3D_FEATURE_LEVEL,
            pp_context_state: ?*?*ID3DDeviceContextState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenSharedResource1: *const fn (
            self: *const ID3D11Device1,
            h_resource: ?HANDLE,
            returned_interface: ?*const Guid,
            pp_resource: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenSharedResourceByName: *const fn (
            self: *const ID3D11Device1,
            lp_name: ?[*:0]const u16,
            dw_desired_access: u32,
            returned_interface: ?*const Guid,
            pp_resource: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11Device.MethodMixin(T);
            pub inline fn getImmediateContext1(self: *const T, pp_immediate_context_: ?*?*ID3D11DeviceContext1) void {
                return @as(*const ID3D11Device1.VTable, @ptrCast(self.vtable)).GetImmediateContext1(@as(*const ID3D11Device1, @ptrCast(self)), pp_immediate_context_);
            }
            pub inline fn createDeferredContext1(self: *const T, context_flags_: u32, pp_deferred_context_: ?*?*ID3D11DeviceContext1) HRESULT {
                return @as(*const ID3D11Device1.VTable, @ptrCast(self.vtable)).CreateDeferredContext1(@as(*const ID3D11Device1, @ptrCast(self)), context_flags_, pp_deferred_context_);
            }
            pub inline fn createBlendState1(self: *const T, p_blend_state_desc_: ?*const D3D11_BLEND_DESC1, pp_blend_state_: ?*?*ID3D11BlendState1) HRESULT {
                return @as(*const ID3D11Device1.VTable, @ptrCast(self.vtable)).CreateBlendState1(@as(*const ID3D11Device1, @ptrCast(self)), p_blend_state_desc_, pp_blend_state_);
            }
            pub inline fn createRasterizerState1(self: *const T, p_rasterizer_desc_: ?*const D3D11_RASTERIZER_DESC1, pp_rasterizer_state_: ?*?*ID3D11RasterizerState1) HRESULT {
                return @as(*const ID3D11Device1.VTable, @ptrCast(self.vtable)).CreateRasterizerState1(@as(*const ID3D11Device1, @ptrCast(self)), p_rasterizer_desc_, pp_rasterizer_state_);
            }
            pub inline fn createDeviceContextState(self: *const T, flags_: u32, p_feature_levels_: [*]const D3D_FEATURE_LEVEL, feature_levels_: u32, s_d_k_version_: u32, emulated_interface_: ?*const Guid, p_chosen_feature_level_: ?*D3D_FEATURE_LEVEL, pp_context_state_: ?*?*ID3DDeviceContextState) HRESULT {
                return @as(*const ID3D11Device1.VTable, @ptrCast(self.vtable)).CreateDeviceContextState(@as(*const ID3D11Device1, @ptrCast(self)), flags_, p_feature_levels_, feature_levels_, s_d_k_version_, emulated_interface_, p_chosen_feature_level_, pp_context_state_);
            }
            pub inline fn openSharedResource1(self: *const T, h_resource_: ?HANDLE, returned_interface_: ?*const Guid, pp_resource_: ?*?*anyopaque) HRESULT {
                return @as(*const ID3D11Device1.VTable, @ptrCast(self.vtable)).OpenSharedResource1(@as(*const ID3D11Device1, @ptrCast(self)), h_resource_, returned_interface_, pp_resource_);
            }
            pub inline fn openSharedResourceByName(self: *const T, lp_name_: ?[*:0]const u16, dw_desired_access_: u32, returned_interface_: ?*const Guid, pp_resource_: ?*?*anyopaque) HRESULT {
                return @as(*const ID3D11Device1.VTable, @ptrCast(self.vtable)).OpenSharedResourceByName(@as(*const ID3D11Device1, @ptrCast(self)), lp_name_, dw_desired_access_, returned_interface_, pp_resource_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3DUserDefinedAnnotation_Value = Guid.initString("b2daad8b-03d4-4dbf-95eb-32ab4b63d0ab");
pub const IID_ID3DUserDefinedAnnotation = &IID_ID3DUserDefinedAnnotation_Value;
pub const ID3DUserDefinedAnnotation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BeginEvent: *const fn (
            self: *const ID3DUserDefinedAnnotation,
            name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) i32,
        EndEvent: *const fn (
            self: *const ID3DUserDefinedAnnotation,
        ) callconv(@import("std").os.windows.WINAPI) i32,
        SetMarker: *const fn (
            self: *const ID3DUserDefinedAnnotation,
            name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetStatus: *const fn (
            self: *const ID3DUserDefinedAnnotation,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn beginEvent(self: *const T, name_: ?[*:0]const u16) i32 {
                return @as(*const ID3DUserDefinedAnnotation.VTable, @ptrCast(self.vtable)).BeginEvent(@as(*const ID3DUserDefinedAnnotation, @ptrCast(self)), name_);
            }
            pub inline fn endEvent(self: *const T) i32 {
                return @as(*const ID3DUserDefinedAnnotation.VTable, @ptrCast(self.vtable)).EndEvent(@as(*const ID3DUserDefinedAnnotation, @ptrCast(self)));
            }
            pub inline fn setMarker(self: *const T, name_: ?[*:0]const u16) void {
                return @as(*const ID3DUserDefinedAnnotation.VTable, @ptrCast(self.vtable)).SetMarker(@as(*const ID3DUserDefinedAnnotation, @ptrCast(self)), name_);
            }
            pub inline fn getStatus(self: *const T) BOOL {
                return @as(*const ID3DUserDefinedAnnotation.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const ID3DUserDefinedAnnotation, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_TILED_RESOURCE_COORDINATE = extern struct {
    X: u32,
    Y: u32,
    Z: u32,
    Subresource: u32,
};

pub const D3D11_TILE_REGION_SIZE = extern struct {
    NumTiles: u32,
    bUseBox: BOOL,
    Width: u32,
    Height: u16,
    Depth: u16,
};

pub const D3D11_TILE_MAPPING_FLAG = enum(i32) {
    E = 1,
};
pub const D3D11_TILE_MAPPING_NO_OVERWRITE = D3D11_TILE_MAPPING_FLAG.E;

pub const D3D11_TILE_RANGE_FLAG = enum(i32) {
    NULL = 1,
    SKIP = 2,
    REUSE_SINGLE_TILE = 4,
};
pub const D3D11_TILE_RANGE_NULL = D3D11_TILE_RANGE_FLAG.NULL;
pub const D3D11_TILE_RANGE_SKIP = D3D11_TILE_RANGE_FLAG.SKIP;
pub const D3D11_TILE_RANGE_REUSE_SINGLE_TILE = D3D11_TILE_RANGE_FLAG.REUSE_SINGLE_TILE;

pub const D3D11_SUBRESOURCE_TILING = extern struct {
    WidthInTiles: u32,
    HeightInTiles: u16,
    DepthInTiles: u16,
    StartTileIndexInOverallResource: u32,
};

pub const D3D11_TILE_SHAPE = extern struct {
    WidthInTexels: u32,
    HeightInTexels: u32,
    DepthInTexels: u32,
};

pub const D3D11_PACKED_MIP_DESC = extern struct {
    NumStandardMips: u8,
    NumPackedMips: u8,
    NumTilesForPackedMips: u32,
    StartTileIndexInOverallResource: u32,
};

pub const D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_FLAG = enum(i32) {
    E = 1,
};
pub const D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_TILED_RESOURCE = D3D11_CHECK_MULTISAMPLE_QUALITY_LEVELS_FLAG.E;

pub const D3D11_TILE_COPY_FLAG = enum(i32) {
    NO_OVERWRITE = 1,
    LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = 2,
    SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = 4,
};
pub const D3D11_TILE_COPY_NO_OVERWRITE = D3D11_TILE_COPY_FLAG.NO_OVERWRITE;
pub const D3D11_TILE_COPY_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE = D3D11_TILE_COPY_FLAG.LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE;
pub const D3D11_TILE_COPY_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER = D3D11_TILE_COPY_FLAG.SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER;

// TODO: this type is limited to platform 'windows8.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11DeviceContext2_Value = Guid.initString("420d5b32-b90c-4da4-bef0-359f6a24a83a");
pub const IID_ID3D11DeviceContext2 = &IID_ID3D11DeviceContext2_Value;
pub const ID3D11DeviceContext2 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceContext1.VTable,
        UpdateTileMappings: *const fn (
            self: *const ID3D11DeviceContext2,
            p_tiled_resource: ?*ID3D11Resource,
            num_tiled_resource_regions: u32,
            p_tiled_resource_region_start_coordinates: ?[*]const D3D11_TILED_RESOURCE_COORDINATE,
            p_tiled_resource_region_sizes: ?[*]const D3D11_TILE_REGION_SIZE,
            p_tile_pool: ?*ID3D11Buffer,
            num_ranges: u32,
            p_range_flags: ?[*]const u32,
            p_tile_pool_start_offsets: ?[*]const u32,
            p_range_tile_counts: ?[*]const u32,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyTileMappings: *const fn (
            self: *const ID3D11DeviceContext2,
            p_dest_tiled_resource: ?*ID3D11Resource,
            p_dest_region_start_coordinate: ?*const D3D11_TILED_RESOURCE_COORDINATE,
            p_source_tiled_resource: ?*ID3D11Resource,
            p_source_region_start_coordinate: ?*const D3D11_TILED_RESOURCE_COORDINATE,
            p_tile_region_size: ?*const D3D11_TILE_REGION_SIZE,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyTiles: *const fn (
            self: *const ID3D11DeviceContext2,
            p_tiled_resource: ?*ID3D11Resource,
            p_tile_region_start_coordinate: ?*const D3D11_TILED_RESOURCE_COORDINATE,
            p_tile_region_size: ?*const D3D11_TILE_REGION_SIZE,
            p_buffer: ?*ID3D11Buffer,
            buffer_start_offset_in_bytes: u64,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        UpdateTiles: *const fn (
            self: *const ID3D11DeviceContext2,
            p_dest_tiled_resource: ?*ID3D11Resource,
            p_dest_tile_region_start_coordinate: ?*const D3D11_TILED_RESOURCE_COORDINATE,
            p_dest_tile_region_size: ?*const D3D11_TILE_REGION_SIZE,
            p_source_tile_data: ?*const anyopaque,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        ResizeTilePool: *const fn (
            self: *const ID3D11DeviceContext2,
            p_tile_pool: ?*ID3D11Buffer,
            new_size_in_bytes: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TiledResourceBarrier: *const fn (
            self: *const ID3D11DeviceContext2,
            p_tiled_resource_or_view_access_before_barrier: ?*ID3D11DeviceChild,
            p_tiled_resource_or_view_access_after_barrier: ?*ID3D11DeviceChild,
        ) callconv(@import("std").os.windows.WINAPI) void,
        IsAnnotationEnabled: *const fn (
            self: *const ID3D11DeviceContext2,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        SetMarkerInt: *const fn (
            self: *const ID3D11DeviceContext2,
            p_label: ?[*:0]const u16,
            data: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        BeginEventInt: *const fn (
            self: *const ID3D11DeviceContext2,
            p_label: ?[*:0]const u16,
            data: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        EndEvent: *const fn (
            self: *const ID3D11DeviceContext2,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceContext1.MethodMixin(T);
            pub inline fn updateTileMappings(self: *const T, p_tiled_resource_: ?*ID3D11Resource, num_tiled_resource_regions_: u32, p_tiled_resource_region_start_coordinates_: ?[*]const D3D11_TILED_RESOURCE_COORDINATE, p_tiled_resource_region_sizes_: ?[*]const D3D11_TILE_REGION_SIZE, p_tile_pool_: ?*ID3D11Buffer, num_ranges_: u32, p_range_flags_: ?[*]const u32, p_tile_pool_start_offsets_: ?[*]const u32, p_range_tile_counts_: ?[*]const u32, flags_: u32) HRESULT {
                return @as(*const ID3D11DeviceContext2.VTable, @ptrCast(self.vtable)).UpdateTileMappings(@as(*const ID3D11DeviceContext2, @ptrCast(self)), p_tiled_resource_, num_tiled_resource_regions_, p_tiled_resource_region_start_coordinates_, p_tiled_resource_region_sizes_, p_tile_pool_, num_ranges_, p_range_flags_, p_tile_pool_start_offsets_, p_range_tile_counts_, flags_);
            }
            pub inline fn copyTileMappings(self: *const T, p_dest_tiled_resource_: ?*ID3D11Resource, p_dest_region_start_coordinate_: ?*const D3D11_TILED_RESOURCE_COORDINATE, p_source_tiled_resource_: ?*ID3D11Resource, p_source_region_start_coordinate_: ?*const D3D11_TILED_RESOURCE_COORDINATE, p_tile_region_size_: ?*const D3D11_TILE_REGION_SIZE, flags_: u32) HRESULT {
                return @as(*const ID3D11DeviceContext2.VTable, @ptrCast(self.vtable)).CopyTileMappings(@as(*const ID3D11DeviceContext2, @ptrCast(self)), p_dest_tiled_resource_, p_dest_region_start_coordinate_, p_source_tiled_resource_, p_source_region_start_coordinate_, p_tile_region_size_, flags_);
            }
            pub inline fn copyTiles(self: *const T, p_tiled_resource_: ?*ID3D11Resource, p_tile_region_start_coordinate_: ?*const D3D11_TILED_RESOURCE_COORDINATE, p_tile_region_size_: ?*const D3D11_TILE_REGION_SIZE, p_buffer_: ?*ID3D11Buffer, buffer_start_offset_in_bytes_: u64, flags_: u32) void {
                return @as(*const ID3D11DeviceContext2.VTable, @ptrCast(self.vtable)).CopyTiles(@as(*const ID3D11DeviceContext2, @ptrCast(self)), p_tiled_resource_, p_tile_region_start_coordinate_, p_tile_region_size_, p_buffer_, buffer_start_offset_in_bytes_, flags_);
            }
            pub inline fn updateTiles(self: *const T, p_dest_tiled_resource_: ?*ID3D11Resource, p_dest_tile_region_start_coordinate_: ?*const D3D11_TILED_RESOURCE_COORDINATE, p_dest_tile_region_size_: ?*const D3D11_TILE_REGION_SIZE, p_source_tile_data_: ?*const anyopaque, flags_: u32) void {
                return @as(*const ID3D11DeviceContext2.VTable, @ptrCast(self.vtable)).UpdateTiles(@as(*const ID3D11DeviceContext2, @ptrCast(self)), p_dest_tiled_resource_, p_dest_tile_region_start_coordinate_, p_dest_tile_region_size_, p_source_tile_data_, flags_);
            }
            pub inline fn resizeTilePool(self: *const T, p_tile_pool_: ?*ID3D11Buffer, new_size_in_bytes_: u64) HRESULT {
                return @as(*const ID3D11DeviceContext2.VTable, @ptrCast(self.vtable)).ResizeTilePool(@as(*const ID3D11DeviceContext2, @ptrCast(self)), p_tile_pool_, new_size_in_bytes_);
            }
            pub inline fn tiledResourceBarrier(self: *const T, p_tiled_resource_or_view_access_before_barrier_: ?*ID3D11DeviceChild, p_tiled_resource_or_view_access_after_barrier_: ?*ID3D11DeviceChild) void {
                return @as(*const ID3D11DeviceContext2.VTable, @ptrCast(self.vtable)).TiledResourceBarrier(@as(*const ID3D11DeviceContext2, @ptrCast(self)), p_tiled_resource_or_view_access_before_barrier_, p_tiled_resource_or_view_access_after_barrier_);
            }
            pub inline fn isAnnotationEnabled(self: *const T) BOOL {
                return @as(*const ID3D11DeviceContext2.VTable, @ptrCast(self.vtable)).IsAnnotationEnabled(@as(*const ID3D11DeviceContext2, @ptrCast(self)));
            }
            pub inline fn setMarkerInt(self: *const T, p_label_: ?[*:0]const u16, data_: i32) void {
                return @as(*const ID3D11DeviceContext2.VTable, @ptrCast(self.vtable)).SetMarkerInt(@as(*const ID3D11DeviceContext2, @ptrCast(self)), p_label_, data_);
            }
            pub inline fn beginEventInt(self: *const T, p_label_: ?[*:0]const u16, data_: i32) void {
                return @as(*const ID3D11DeviceContext2.VTable, @ptrCast(self.vtable)).BeginEventInt(@as(*const ID3D11DeviceContext2, @ptrCast(self)), p_label_, data_);
            }
            pub inline fn endEvent(self: *const T) void {
                return @as(*const ID3D11DeviceContext2.VTable, @ptrCast(self.vtable)).EndEvent(@as(*const ID3D11DeviceContext2, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11Device2_Value = Guid.initString("9d06dffa-d1e5-4d07-83a8-1bb123f2f841");
pub const IID_ID3D11Device2 = &IID_ID3D11Device2_Value;
pub const ID3D11Device2 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11Device1.VTable,
        GetImmediateContext2: *const fn (
            self: *const ID3D11Device2,
            pp_immediate_context: ?*?*ID3D11DeviceContext2,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CreateDeferredContext2: *const fn (
            self: *const ID3D11Device2,
            context_flags: u32,
            pp_deferred_context: ?*?*ID3D11DeviceContext2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResourceTiling: *const fn (
            self: *const ID3D11Device2,
            p_tiled_resource: ?*ID3D11Resource,
            p_num_tiles_for_entire_resource: ?*u32,
            p_packed_mip_desc: ?*D3D11_PACKED_MIP_DESC,
            p_standard_tile_shape_for_non_packed_mips: ?*D3D11_TILE_SHAPE,
            p_num_subresource_tilings: ?*u32,
            first_subresource_tiling_to_get: u32,
            p_subresource_tilings_for_non_packed_mips: [*]D3D11_SUBRESOURCE_TILING,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CheckMultisampleQualityLevels1: *const fn (
            self: *const ID3D11Device2,
            format: DXGI_FORMAT,
            sample_count: u32,
            flags: u32,
            p_num_quality_levels: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11Device1.MethodMixin(T);
            pub inline fn getImmediateContext2(self: *const T, pp_immediate_context_: ?*?*ID3D11DeviceContext2) void {
                return @as(*const ID3D11Device2.VTable, @ptrCast(self.vtable)).GetImmediateContext2(@as(*const ID3D11Device2, @ptrCast(self)), pp_immediate_context_);
            }
            pub inline fn createDeferredContext2(self: *const T, context_flags_: u32, pp_deferred_context_: ?*?*ID3D11DeviceContext2) HRESULT {
                return @as(*const ID3D11Device2.VTable, @ptrCast(self.vtable)).CreateDeferredContext2(@as(*const ID3D11Device2, @ptrCast(self)), context_flags_, pp_deferred_context_);
            }
            pub inline fn getResourceTiling(self: *const T, p_tiled_resource_: ?*ID3D11Resource, p_num_tiles_for_entire_resource_: ?*u32, p_packed_mip_desc_: ?*D3D11_PACKED_MIP_DESC, p_standard_tile_shape_for_non_packed_mips_: ?*D3D11_TILE_SHAPE, p_num_subresource_tilings_: ?*u32, first_subresource_tiling_to_get_: u32, p_subresource_tilings_for_non_packed_mips_: [*]D3D11_SUBRESOURCE_TILING) void {
                return @as(*const ID3D11Device2.VTable, @ptrCast(self.vtable)).GetResourceTiling(@as(*const ID3D11Device2, @ptrCast(self)), p_tiled_resource_, p_num_tiles_for_entire_resource_, p_packed_mip_desc_, p_standard_tile_shape_for_non_packed_mips_, p_num_subresource_tilings_, first_subresource_tiling_to_get_, p_subresource_tilings_for_non_packed_mips_);
            }
            pub inline fn checkMultisampleQualityLevels1(self: *const T, format_: DXGI_FORMAT, sample_count_: u32, flags_: u32, p_num_quality_levels_: ?*u32) HRESULT {
                return @as(*const ID3D11Device2.VTable, @ptrCast(self.vtable)).CheckMultisampleQualityLevels1(@as(*const ID3D11Device2, @ptrCast(self)), format_, sample_count_, flags_, p_num_quality_levels_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_CONTEXT_TYPE = enum(i32) {
    ALL = 0,
    @"3D" = 1,
    COMPUTE = 2,
    COPY = 3,
    VIDEO = 4,
};
pub const D3D11_CONTEXT_TYPE_ALL = D3D11_CONTEXT_TYPE.ALL;
pub const D3D11_CONTEXT_TYPE_3D = D3D11_CONTEXT_TYPE.@"3D";
pub const D3D11_CONTEXT_TYPE_COMPUTE = D3D11_CONTEXT_TYPE.COMPUTE;
pub const D3D11_CONTEXT_TYPE_COPY = D3D11_CONTEXT_TYPE.COPY;
pub const D3D11_CONTEXT_TYPE_VIDEO = D3D11_CONTEXT_TYPE.VIDEO;

pub const D3D11_TEXTURE_LAYOUT = enum(i32) {
    UNDEFINED = 0,
    ROW_MAJOR = 1,
    @"64K_STANDARD_SWIZZLE" = 2,
};
pub const D3D11_TEXTURE_LAYOUT_UNDEFINED = D3D11_TEXTURE_LAYOUT.UNDEFINED;
pub const D3D11_TEXTURE_LAYOUT_ROW_MAJOR = D3D11_TEXTURE_LAYOUT.ROW_MAJOR;
pub const D3D11_TEXTURE_LAYOUT_64K_STANDARD_SWIZZLE = D3D11_TEXTURE_LAYOUT.@"64K_STANDARD_SWIZZLE";

pub const D3D11_TEXTURE2D_DESC1 = extern struct {
    Width: u32,
    Height: u32,
    MipLevels: u32,
    ArraySize: u32,
    Format: DXGI_FORMAT,
    SampleDesc: DXGI_SAMPLE_DESC,
    Usage: D3D11_USAGE,
    BindFlags: u32,
    CPUAccessFlags: u32,
    MiscFlags: u32,
    TextureLayout: D3D11_TEXTURE_LAYOUT,
};

// TODO: this type is limited to platform 'windows10.0.10240'
// This COM type is Agile, not sure what that means
const IID_ID3D11Texture2D1_Value = Guid.initString("51218251-1e33-4617-9ccb-4d3a4367e7bb");
pub const IID_ID3D11Texture2D1 = &IID_ID3D11Texture2D1_Value;
pub const ID3D11Texture2D1 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11Texture2D.VTable,
        GetDesc1: *const fn (
            self: *const ID3D11Texture2D1,
            p_desc: ?*D3D11_TEXTURE2D_DESC1,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11Texture2D.MethodMixin(T);
            pub inline fn getDesc1(self: *const T, p_desc_: ?*D3D11_TEXTURE2D_DESC1) void {
                return @as(*const ID3D11Texture2D1.VTable, @ptrCast(self.vtable)).GetDesc1(@as(*const ID3D11Texture2D1, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_TEXTURE3D_DESC1 = extern struct {
    Width: u32,
    Height: u32,
    Depth: u32,
    MipLevels: u32,
    Format: DXGI_FORMAT,
    Usage: D3D11_USAGE,
    BindFlags: u32,
    CPUAccessFlags: u32,
    MiscFlags: u32,
    TextureLayout: D3D11_TEXTURE_LAYOUT,
};

// TODO: this type is limited to platform 'windows10.0.10240'
// This COM type is Agile, not sure what that means
const IID_ID3D11Texture3D1_Value = Guid.initString("0c711683-2853-4846-9bb0-f3e60639e46a");
pub const IID_ID3D11Texture3D1 = &IID_ID3D11Texture3D1_Value;
pub const ID3D11Texture3D1 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11Texture3D.VTable,
        GetDesc1: *const fn (
            self: *const ID3D11Texture3D1,
            p_desc: ?*D3D11_TEXTURE3D_DESC1,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11Texture3D.MethodMixin(T);
            pub inline fn getDesc1(self: *const T, p_desc_: ?*D3D11_TEXTURE3D_DESC1) void {
                return @as(*const ID3D11Texture3D1.VTable, @ptrCast(self.vtable)).GetDesc1(@as(*const ID3D11Texture3D1, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_CONSERVATIVE_RASTERIZATION_MODE = enum(i32) {
    FF = 0,
    N = 1,
};
pub const D3D11_CONSERVATIVE_RASTERIZATION_MODE_OFF = D3D11_CONSERVATIVE_RASTERIZATION_MODE.FF;
pub const D3D11_CONSERVATIVE_RASTERIZATION_MODE_ON = D3D11_CONSERVATIVE_RASTERIZATION_MODE.N;

pub const D3D11_RASTERIZER_DESC2 = extern struct {
    FillMode: D3D11_FILL_MODE,
    CullMode: D3D11_CULL_MODE,
    FrontCounterClockwise: BOOL,
    DepthBias: i32,
    DepthBiasClamp: f32,
    SlopeScaledDepthBias: f32,
    DepthClipEnable: BOOL,
    ScissorEnable: BOOL,
    MultisampleEnable: BOOL,
    AntialiasedLineEnable: BOOL,
    ForcedSampleCount: u32,
    ConservativeRaster: D3D11_CONSERVATIVE_RASTERIZATION_MODE,
};

// TODO: this type is limited to platform 'windows10.0.10240'
// This COM type is Agile, not sure what that means
const IID_ID3D11RasterizerState2_Value = Guid.initString("6fbd02fb-209f-46c4-b059-2ed15586a6ac");
pub const IID_ID3D11RasterizerState2 = &IID_ID3D11RasterizerState2_Value;
pub const ID3D11RasterizerState2 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11RasterizerState1.VTable,
        GetDesc2: *const fn (
            self: *const ID3D11RasterizerState2,
            p_desc: ?*D3D11_RASTERIZER_DESC2,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11RasterizerState1.MethodMixin(T);
            pub inline fn getDesc2(self: *const T, p_desc_: ?*D3D11_RASTERIZER_DESC2) void {
                return @as(*const ID3D11RasterizerState2.VTable, @ptrCast(self.vtable)).GetDesc2(@as(*const ID3D11RasterizerState2, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_TEX2D_SRV1 = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
    PlaneSlice: u32,
};

pub const D3D11_TEX2D_ARRAY_SRV1 = extern struct {
    MostDetailedMip: u32,
    MipLevels: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
    PlaneSlice: u32,
};

pub const D3D11_SHADER_RESOURCE_VIEW_DESC1 = extern struct {
    Format: DXGI_FORMAT,
    ViewDimension: D3D_SRV_DIMENSION,
    Anonymous: extern union {
        Buffer: D3D11_BUFFER_SRV,
        Texture1D: D3D11_TEX1D_SRV,
        Texture1DArray: D3D11_TEX1D_ARRAY_SRV,
        Texture2D: D3D11_TEX2D_SRV1,
        Texture2DArray: D3D11_TEX2D_ARRAY_SRV1,
        Texture2DMS: D3D11_TEX2DMS_SRV,
        Texture2DMSArray: D3D11_TEX2DMS_ARRAY_SRV,
        Texture3D: D3D11_TEX3D_SRV,
        TextureCube: D3D11_TEXCUBE_SRV,
        TextureCubeArray: D3D11_TEXCUBE_ARRAY_SRV,
        BufferEx: D3D11_BUFFEREX_SRV,
    },
};

// TODO: this type is limited to platform 'windows10.0.10240'
// This COM type is Agile, not sure what that means
const IID_ID3D11ShaderResourceView1_Value = Guid.initString("91308b87-9040-411d-8c67-c39253ce3802");
pub const IID_ID3D11ShaderResourceView1 = &IID_ID3D11ShaderResourceView1_Value;
pub const ID3D11ShaderResourceView1 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11ShaderResourceView.VTable,
        GetDesc1: *const fn (
            self: *const ID3D11ShaderResourceView1,
            p_desc1: ?*D3D11_SHADER_RESOURCE_VIEW_DESC1,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11ShaderResourceView.MethodMixin(T);
            pub inline fn getDesc1(self: *const T, p_desc1_: ?*D3D11_SHADER_RESOURCE_VIEW_DESC1) void {
                return @as(*const ID3D11ShaderResourceView1.VTable, @ptrCast(self.vtable)).GetDesc1(@as(*const ID3D11ShaderResourceView1, @ptrCast(self)), p_desc1_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_TEX2D_RTV1 = extern struct {
    MipSlice: u32,
    PlaneSlice: u32,
};

pub const D3D11_TEX2D_ARRAY_RTV1 = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
    PlaneSlice: u32,
};

pub const D3D11_RENDER_TARGET_VIEW_DESC1 = extern struct {
    Format: DXGI_FORMAT,
    ViewDimension: D3D11_RTV_DIMENSION,
    Anonymous: extern union {
        Buffer: D3D11_BUFFER_RTV,
        Texture1D: D3D11_TEX1D_RTV,
        Texture1DArray: D3D11_TEX1D_ARRAY_RTV,
        Texture2D: D3D11_TEX2D_RTV1,
        Texture2DArray: D3D11_TEX2D_ARRAY_RTV1,
        Texture2DMS: D3D11_TEX2DMS_RTV,
        Texture2DMSArray: D3D11_TEX2DMS_ARRAY_RTV,
        Texture3D: D3D11_TEX3D_RTV,
    },
};

// TODO: this type is limited to platform 'windows10.0.10240'
// This COM type is Agile, not sure what that means
const IID_ID3D11RenderTargetView1_Value = Guid.initString("ffbe2e23-f011-418a-ac56-5ceed7c5b94b");
pub const IID_ID3D11RenderTargetView1 = &IID_ID3D11RenderTargetView1_Value;
pub const ID3D11RenderTargetView1 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11RenderTargetView.VTable,
        GetDesc1: *const fn (
            self: *const ID3D11RenderTargetView1,
            p_desc1: ?*D3D11_RENDER_TARGET_VIEW_DESC1,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11RenderTargetView.MethodMixin(T);
            pub inline fn getDesc1(self: *const T, p_desc1_: ?*D3D11_RENDER_TARGET_VIEW_DESC1) void {
                return @as(*const ID3D11RenderTargetView1.VTable, @ptrCast(self.vtable)).GetDesc1(@as(*const ID3D11RenderTargetView1, @ptrCast(self)), p_desc1_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_TEX2D_UAV1 = extern struct {
    MipSlice: u32,
    PlaneSlice: u32,
};

pub const D3D11_TEX2D_ARRAY_UAV1 = extern struct {
    MipSlice: u32,
    FirstArraySlice: u32,
    ArraySize: u32,
    PlaneSlice: u32,
};

pub const D3D11_UNORDERED_ACCESS_VIEW_DESC1 = extern struct {
    Format: DXGI_FORMAT,
    ViewDimension: D3D11_UAV_DIMENSION,
    Anonymous: extern union {
        Buffer: D3D11_BUFFER_UAV,
        Texture1D: D3D11_TEX1D_UAV,
        Texture1DArray: D3D11_TEX1D_ARRAY_UAV,
        Texture2D: D3D11_TEX2D_UAV1,
        Texture2DArray: D3D11_TEX2D_ARRAY_UAV1,
        Texture3D: D3D11_TEX3D_UAV,
    },
};

// TODO: this type is limited to platform 'windows10.0.10240'
// This COM type is Agile, not sure what that means
const IID_ID3D11UnorderedAccessView1_Value = Guid.initString("7b3b6153-a886-4544-ab37-6537c8500403");
pub const IID_ID3D11UnorderedAccessView1 = &IID_ID3D11UnorderedAccessView1_Value;
pub const ID3D11UnorderedAccessView1 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11UnorderedAccessView.VTable,
        GetDesc1: *const fn (
            self: *const ID3D11UnorderedAccessView1,
            p_desc1: ?*D3D11_UNORDERED_ACCESS_VIEW_DESC1,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11UnorderedAccessView.MethodMixin(T);
            pub inline fn getDesc1(self: *const T, p_desc1_: ?*D3D11_UNORDERED_ACCESS_VIEW_DESC1) void {
                return @as(*const ID3D11UnorderedAccessView1.VTable, @ptrCast(self.vtable)).GetDesc1(@as(*const ID3D11UnorderedAccessView1, @ptrCast(self)), p_desc1_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_QUERY_DESC1 = extern struct {
    Query: D3D11_QUERY,
    MiscFlags: u32,
    ContextType: D3D11_CONTEXT_TYPE,
};

// TODO: this type is limited to platform 'windows10.0.10240'
// This COM type is Agile, not sure what that means
const IID_ID3D11Query1_Value = Guid.initString("631b4766-36dc-461d-8db6-c47e13e60916");
pub const IID_ID3D11Query1 = &IID_ID3D11Query1_Value;
pub const ID3D11Query1 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11Query.VTable,
        GetDesc1: *const fn (
            self: *const ID3D11Query1,
            p_desc1: ?*D3D11_QUERY_DESC1,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11Query.MethodMixin(T);
            pub inline fn getDesc1(self: *const T, p_desc1_: ?*D3D11_QUERY_DESC1) void {
                return @as(*const ID3D11Query1.VTable, @ptrCast(self.vtable)).GetDesc1(@as(*const ID3D11Query1, @ptrCast(self)), p_desc1_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_FENCE_FLAG = enum(u32) {
    NONE = 0,
    SHARED = 2,
    SHARED_CROSS_ADAPTER = 4,
    NON_MONITORED = 8,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        SHARED: u1 = 0,
        SHARED_CROSS_ADAPTER: u1 = 0,
        NON_MONITORED: u1 = 0,
    }) D3D11_FENCE_FLAG {
        return @as(D3D11_FENCE_FLAG, @enumFromInt((if (o.NONE == 1) @intFromEnum(D3D11_FENCE_FLAG.NONE) else 0) | (if (o.SHARED == 1) @intFromEnum(D3D11_FENCE_FLAG.SHARED) else 0) | (if (o.SHARED_CROSS_ADAPTER == 1) @intFromEnum(D3D11_FENCE_FLAG.SHARED_CROSS_ADAPTER) else 0) | (if (o.NON_MONITORED == 1) @intFromEnum(D3D11_FENCE_FLAG.NON_MONITORED) else 0)));
    }
};
pub const D3D11_FENCE_FLAG_NONE = D3D11_FENCE_FLAG.NONE;
pub const D3D11_FENCE_FLAG_SHARED = D3D11_FENCE_FLAG.SHARED;
pub const D3D11_FENCE_FLAG_SHARED_CROSS_ADAPTER = D3D11_FENCE_FLAG.SHARED_CROSS_ADAPTER;
pub const D3D11_FENCE_FLAG_NON_MONITORED = D3D11_FENCE_FLAG.NON_MONITORED;

// This COM type is Agile, not sure what that means
const IID_ID3D11DeviceContext3_Value = Guid.initString("b4e3c01d-e79e-4637-91b2-510e9f4c9b8f");
pub const IID_ID3D11DeviceContext3 = &IID_ID3D11DeviceContext3_Value;
pub const ID3D11DeviceContext3 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceContext2.VTable,
        Flush1: *const fn (
            self: *const ID3D11DeviceContext3,
            context_type: D3D11_CONTEXT_TYPE,
            h_event: ?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetHardwareProtectionState: *const fn (
            self: *const ID3D11DeviceContext3,
            hw_protection_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetHardwareProtectionState: *const fn (
            self: *const ID3D11DeviceContext3,
            p_hw_protection_enable: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceContext2.MethodMixin(T);
            pub inline fn flush1(self: *const T, context_type_: D3D11_CONTEXT_TYPE, h_event_: ?HANDLE) void {
                return @as(*const ID3D11DeviceContext3.VTable, @ptrCast(self.vtable)).Flush1(@as(*const ID3D11DeviceContext3, @ptrCast(self)), context_type_, h_event_);
            }
            pub inline fn setHardwareProtectionState(self: *const T, hw_protection_enable_: BOOL) void {
                return @as(*const ID3D11DeviceContext3.VTable, @ptrCast(self.vtable)).SetHardwareProtectionState(@as(*const ID3D11DeviceContext3, @ptrCast(self)), hw_protection_enable_);
            }
            pub inline fn getHardwareProtectionState(self: *const T, p_hw_protection_enable_: ?*BOOL) void {
                return @as(*const ID3D11DeviceContext3.VTable, @ptrCast(self.vtable)).GetHardwareProtectionState(@as(*const ID3D11DeviceContext3, @ptrCast(self)), p_hw_protection_enable_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// This COM type is Agile, not sure what that means
const IID_ID3D11Fence_Value = Guid.initString("affde9d1-1df7-4bb7-8a34-0f46251dab80");
pub const IID_ID3D11Fence = &IID_ID3D11Fence_Value;
pub const ID3D11Fence = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceChild.VTable,
        CreateSharedHandle: *const fn (
            self: *const ID3D11Fence,
            p_attributes: ?*const SECURITY_ATTRIBUTES,
            dw_access: u32,
            lp_name: ?[*:0]const u16,
            p_handle: ?*?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCompletedValue: *const fn (
            self: *const ID3D11Fence,
        ) callconv(@import("std").os.windows.WINAPI) u64,
        SetEventOnCompletion: *const fn (
            self: *const ID3D11Fence,
            value: u64,
            h_event: ?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceChild.MethodMixin(T);
            pub inline fn createSharedHandle(self: *const T, p_attributes_: ?*const SECURITY_ATTRIBUTES, dw_access_: u32, lp_name_: ?[*:0]const u16, p_handle_: ?*?HANDLE) HRESULT {
                return @as(*const ID3D11Fence.VTable, @ptrCast(self.vtable)).CreateSharedHandle(@as(*const ID3D11Fence, @ptrCast(self)), p_attributes_, dw_access_, lp_name_, p_handle_);
            }
            pub inline fn getCompletedValue(self: *const T) u64 {
                return @as(*const ID3D11Fence.VTable, @ptrCast(self.vtable)).GetCompletedValue(@as(*const ID3D11Fence, @ptrCast(self)));
            }
            pub inline fn setEventOnCompletion(self: *const T, value_: u64, h_event_: ?HANDLE) HRESULT {
                return @as(*const ID3D11Fence.VTable, @ptrCast(self.vtable)).SetEventOnCompletion(@as(*const ID3D11Fence, @ptrCast(self)), value_, h_event_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// This COM type is Agile, not sure what that means
const IID_ID3D11DeviceContext4_Value = Guid.initString("917600da-f58c-4c33-98d8-3e15b390fa24");
pub const IID_ID3D11DeviceContext4 = &IID_ID3D11DeviceContext4_Value;
pub const ID3D11DeviceContext4 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11DeviceContext3.VTable,
        Signal: *const fn (
            self: *const ID3D11DeviceContext4,
            p_fence: ?*ID3D11Fence,
            value: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Wait: *const fn (
            self: *const ID3D11DeviceContext4,
            p_fence: ?*ID3D11Fence,
            value: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11DeviceContext3.MethodMixin(T);
            pub inline fn signal(self: *const T, p_fence_: ?*ID3D11Fence, value_: u64) HRESULT {
                return @as(*const ID3D11DeviceContext4.VTable, @ptrCast(self.vtable)).Signal(@as(*const ID3D11DeviceContext4, @ptrCast(self)), p_fence_, value_);
            }
            pub inline fn wait(self: *const T, p_fence_: ?*ID3D11Fence, value_: u64) HRESULT {
                return @as(*const ID3D11DeviceContext4.VTable, @ptrCast(self.vtable)).Wait(@as(*const ID3D11DeviceContext4, @ptrCast(self)), p_fence_, value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
// This COM type is Agile, not sure what that means
const IID_ID3D11Device3_Value = Guid.initString("a05c8c37-d2c6-4732-b3a0-9ce0b0dc9ae6");
pub const IID_ID3D11Device3 = &IID_ID3D11Device3_Value;
pub const ID3D11Device3 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11Device2.VTable,
        CreateTexture2D1: *const fn (
            self: *const ID3D11Device3,
            p_desc1: ?*const D3D11_TEXTURE2D_DESC1,
            p_initial_data: ?*const D3D11_SUBRESOURCE_DATA,
            pp_texture2_d: ?*?*ID3D11Texture2D1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTexture3D1: *const fn (
            self: *const ID3D11Device3,
            p_desc1: ?*const D3D11_TEXTURE3D_DESC1,
            p_initial_data: ?*const D3D11_SUBRESOURCE_DATA,
            pp_texture3_d: ?*?*ID3D11Texture3D1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRasterizerState2: *const fn (
            self: *const ID3D11Device3,
            p_rasterizer_desc: ?*const D3D11_RASTERIZER_DESC2,
            pp_rasterizer_state: ?*?*ID3D11RasterizerState2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateShaderResourceView1: *const fn (
            self: *const ID3D11Device3,
            p_resource: ?*ID3D11Resource,
            p_desc1: ?*const D3D11_SHADER_RESOURCE_VIEW_DESC1,
            pp_s_r_view1: ?*?*ID3D11ShaderResourceView1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateUnorderedAccessView1: *const fn (
            self: *const ID3D11Device3,
            p_resource: ?*ID3D11Resource,
            p_desc1: ?*const D3D11_UNORDERED_ACCESS_VIEW_DESC1,
            pp_u_a_view1: ?*?*ID3D11UnorderedAccessView1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRenderTargetView1: *const fn (
            self: *const ID3D11Device3,
            p_resource: ?*ID3D11Resource,
            p_desc1: ?*const D3D11_RENDER_TARGET_VIEW_DESC1,
            pp_r_t_view1: ?*?*ID3D11RenderTargetView1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateQuery1: *const fn (
            self: *const ID3D11Device3,
            p_query_desc1: ?*const D3D11_QUERY_DESC1,
            pp_query1: ?*?*ID3D11Query1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImmediateContext3: *const fn (
            self: *const ID3D11Device3,
            pp_immediate_context: ?*?*ID3D11DeviceContext3,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CreateDeferredContext3: *const fn (
            self: *const ID3D11Device3,
            context_flags: u32,
            pp_deferred_context: ?*?*ID3D11DeviceContext3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteToSubresource: *const fn (
            self: *const ID3D11Device3,
            p_dst_resource: ?*ID3D11Resource,
            dst_subresource: u32,
            p_dst_box: ?*const D3D11_BOX,
            p_src_data: ?*const anyopaque,
            src_row_pitch: u32,
            src_depth_pitch: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        ReadFromSubresource: *const fn (
            self: *const ID3D11Device3,
            p_dst_data: ?*anyopaque,
            dst_row_pitch: u32,
            dst_depth_pitch: u32,
            p_src_resource: ?*ID3D11Resource,
            src_subresource: u32,
            p_src_box: ?*const D3D11_BOX,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11Device2.MethodMixin(T);
            pub inline fn createTexture2D1(self: *const T, p_desc1_: ?*const D3D11_TEXTURE2D_DESC1, p_initial_data_: ?*const D3D11_SUBRESOURCE_DATA, pp_texture2_d_: ?*?*ID3D11Texture2D1) HRESULT {
                return @as(*const ID3D11Device3.VTable, @ptrCast(self.vtable)).CreateTexture2D1(@as(*const ID3D11Device3, @ptrCast(self)), p_desc1_, p_initial_data_, pp_texture2_d_);
            }
            pub inline fn createTexture3D1(self: *const T, p_desc1_: ?*const D3D11_TEXTURE3D_DESC1, p_initial_data_: ?*const D3D11_SUBRESOURCE_DATA, pp_texture3_d_: ?*?*ID3D11Texture3D1) HRESULT {
                return @as(*const ID3D11Device3.VTable, @ptrCast(self.vtable)).CreateTexture3D1(@as(*const ID3D11Device3, @ptrCast(self)), p_desc1_, p_initial_data_, pp_texture3_d_);
            }
            pub inline fn createRasterizerState2(self: *const T, p_rasterizer_desc_: ?*const D3D11_RASTERIZER_DESC2, pp_rasterizer_state_: ?*?*ID3D11RasterizerState2) HRESULT {
                return @as(*const ID3D11Device3.VTable, @ptrCast(self.vtable)).CreateRasterizerState2(@as(*const ID3D11Device3, @ptrCast(self)), p_rasterizer_desc_, pp_rasterizer_state_);
            }
            pub inline fn createShaderResourceView1(self: *const T, p_resource_: ?*ID3D11Resource, p_desc1_: ?*const D3D11_SHADER_RESOURCE_VIEW_DESC1, pp_s_r_view1_: ?*?*ID3D11ShaderResourceView1) HRESULT {
                return @as(*const ID3D11Device3.VTable, @ptrCast(self.vtable)).CreateShaderResourceView1(@as(*const ID3D11Device3, @ptrCast(self)), p_resource_, p_desc1_, pp_s_r_view1_);
            }
            pub inline fn createUnorderedAccessView1(self: *const T, p_resource_: ?*ID3D11Resource, p_desc1_: ?*const D3D11_UNORDERED_ACCESS_VIEW_DESC1, pp_u_a_view1_: ?*?*ID3D11UnorderedAccessView1) HRESULT {
                return @as(*const ID3D11Device3.VTable, @ptrCast(self.vtable)).CreateUnorderedAccessView1(@as(*const ID3D11Device3, @ptrCast(self)), p_resource_, p_desc1_, pp_u_a_view1_);
            }
            pub inline fn createRenderTargetView1(self: *const T, p_resource_: ?*ID3D11Resource, p_desc1_: ?*const D3D11_RENDER_TARGET_VIEW_DESC1, pp_r_t_view1_: ?*?*ID3D11RenderTargetView1) HRESULT {
                return @as(*const ID3D11Device3.VTable, @ptrCast(self.vtable)).CreateRenderTargetView1(@as(*const ID3D11Device3, @ptrCast(self)), p_resource_, p_desc1_, pp_r_t_view1_);
            }
            pub inline fn createQuery1(self: *const T, p_query_desc1_: ?*const D3D11_QUERY_DESC1, pp_query1_: ?*?*ID3D11Query1) HRESULT {
                return @as(*const ID3D11Device3.VTable, @ptrCast(self.vtable)).CreateQuery1(@as(*const ID3D11Device3, @ptrCast(self)), p_query_desc1_, pp_query1_);
            }
            pub inline fn getImmediateContext3(self: *const T, pp_immediate_context_: ?*?*ID3D11DeviceContext3) void {
                return @as(*const ID3D11Device3.VTable, @ptrCast(self.vtable)).GetImmediateContext3(@as(*const ID3D11Device3, @ptrCast(self)), pp_immediate_context_);
            }
            pub inline fn createDeferredContext3(self: *const T, context_flags_: u32, pp_deferred_context_: ?*?*ID3D11DeviceContext3) HRESULT {
                return @as(*const ID3D11Device3.VTable, @ptrCast(self.vtable)).CreateDeferredContext3(@as(*const ID3D11Device3, @ptrCast(self)), context_flags_, pp_deferred_context_);
            }
            pub inline fn writeToSubresource(self: *const T, p_dst_resource_: ?*ID3D11Resource, dst_subresource_: u32, p_dst_box_: ?*const D3D11_BOX, p_src_data_: ?*const anyopaque, src_row_pitch_: u32, src_depth_pitch_: u32) void {
                return @as(*const ID3D11Device3.VTable, @ptrCast(self.vtable)).WriteToSubresource(@as(*const ID3D11Device3, @ptrCast(self)), p_dst_resource_, dst_subresource_, p_dst_box_, p_src_data_, src_row_pitch_, src_depth_pitch_);
            }
            pub inline fn readFromSubresource(self: *const T, p_dst_data_: ?*anyopaque, dst_row_pitch_: u32, dst_depth_pitch_: u32, p_src_resource_: ?*ID3D11Resource, src_subresource_: u32, p_src_box_: ?*const D3D11_BOX) void {
                return @as(*const ID3D11Device3.VTable, @ptrCast(self.vtable)).ReadFromSubresource(@as(*const ID3D11Device3, @ptrCast(self)), p_dst_data_, dst_row_pitch_, dst_depth_pitch_, p_src_resource_, src_subresource_, p_src_box_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// This COM type is Agile, not sure what that means
const IID_ID3D11Device4_Value = Guid.initString("8992ab71-02e6-4b8d-ba48-b056dcda42c4");
pub const IID_ID3D11Device4 = &IID_ID3D11Device4_Value;
pub const ID3D11Device4 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11Device3.VTable,
        RegisterDeviceRemovedEvent: *const fn (
            self: *const ID3D11Device4,
            h_event: ?HANDLE,
            pdw_cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterDeviceRemoved: *const fn (
            self: *const ID3D11Device4,
            dw_cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11Device3.MethodMixin(T);
            pub inline fn registerDeviceRemovedEvent(self: *const T, h_event_: ?HANDLE, pdw_cookie_: ?*u32) HRESULT {
                return @as(*const ID3D11Device4.VTable, @ptrCast(self.vtable)).RegisterDeviceRemovedEvent(@as(*const ID3D11Device4, @ptrCast(self)), h_event_, pdw_cookie_);
            }
            pub inline fn unregisterDeviceRemoved(self: *const T, dw_cookie_: u32) void {
                return @as(*const ID3D11Device4.VTable, @ptrCast(self.vtable)).UnregisterDeviceRemoved(@as(*const ID3D11Device4, @ptrCast(self)), dw_cookie_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// This COM type is Agile, not sure what that means
const IID_ID3D11Device5_Value = Guid.initString("8ffde202-a0e7-45df-9e01-e837801b5ea0");
pub const IID_ID3D11Device5 = &IID_ID3D11Device5_Value;
pub const ID3D11Device5 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11Device4.VTable,
        OpenSharedFence: *const fn (
            self: *const ID3D11Device5,
            h_fence: ?HANDLE,
            returned_interface: ?*const Guid,
            pp_fence: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFence: *const fn (
            self: *const ID3D11Device5,
            initial_value: u64,
            flags: D3D11_FENCE_FLAG,
            returned_interface: ?*const Guid,
            pp_fence: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11Device4.MethodMixin(T);
            pub inline fn openSharedFence(self: *const T, h_fence_: ?HANDLE, returned_interface_: ?*const Guid, pp_fence_: ?*?*anyopaque) HRESULT {
                return @as(*const ID3D11Device5.VTable, @ptrCast(self.vtable)).OpenSharedFence(@as(*const ID3D11Device5, @ptrCast(self)), h_fence_, returned_interface_, pp_fence_);
            }
            pub inline fn createFence(self: *const T, initial_value_: u64, flags_: D3D11_FENCE_FLAG, returned_interface_: ?*const Guid, pp_fence_: ?*?*anyopaque) HRESULT {
                return @as(*const ID3D11Device5.VTable, @ptrCast(self.vtable)).CreateFence(@as(*const ID3D11Device5, @ptrCast(self)), initial_value_, flags_, returned_interface_, pp_fence_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// This COM type is Agile, not sure what that means
const IID_ID3D11Multithread_Value = Guid.initString("9b7e4e00-342c-4106-a19f-4f2704f689f0");
pub const IID_ID3D11Multithread = &IID_ID3D11Multithread_Value;
pub const ID3D11Multithread = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Enter: *const fn (
            self: *const ID3D11Multithread,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Leave: *const fn (
            self: *const ID3D11Multithread,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetMultithreadProtected: *const fn (
            self: *const ID3D11Multithread,
            b_m_t_protect: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetMultithreadProtected: *const fn (
            self: *const ID3D11Multithread,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn enter(self: *const T) void {
                return @as(*const ID3D11Multithread.VTable, @ptrCast(self.vtable)).Enter(@as(*const ID3D11Multithread, @ptrCast(self)));
            }
            pub inline fn leave(self: *const T) void {
                return @as(*const ID3D11Multithread.VTable, @ptrCast(self.vtable)).Leave(@as(*const ID3D11Multithread, @ptrCast(self)));
            }
            pub inline fn setMultithreadProtected(self: *const T, b_m_t_protect_: BOOL) BOOL {
                return @as(*const ID3D11Multithread.VTable, @ptrCast(self.vtable)).SetMultithreadProtected(@as(*const ID3D11Multithread, @ptrCast(self)), b_m_t_protect_);
            }
            pub inline fn getMultithreadProtected(self: *const T) BOOL {
                return @as(*const ID3D11Multithread.VTable, @ptrCast(self.vtable)).GetMultithreadProtected(@as(*const ID3D11Multithread, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
// This COM type is Agile, not sure what that means
const IID_ID3D11VideoContext2_Value = Guid.initString("c4e7374c-6243-4d1b-ae87-52b4f740e261");
pub const IID_ID3D11VideoContext2 = &IID_ID3D11VideoContext2_Value;
pub const ID3D11VideoContext2 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11VideoContext1.VTable,
        VideoProcessorSetOutputHDRMetaData: *const fn (
            self: *const ID3D11VideoContext2,
            p_video_processor: ?*ID3D11VideoProcessor,
            type: DXGI_HDR_METADATA_TYPE,
            size: u32,
            // TODO: what to do with BytesParamIndex 2?
            p_h_d_r_meta_data: ?*const anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetOutputHDRMetaData: *const fn (
            self: *const ID3D11VideoContext2,
            p_video_processor: ?*ID3D11VideoProcessor,
            p_type: ?*DXGI_HDR_METADATA_TYPE,
            size: u32,
            // TODO: what to do with BytesParamIndex 2?
            p_meta_data: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorSetStreamHDRMetaData: *const fn (
            self: *const ID3D11VideoContext2,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            type: DXGI_HDR_METADATA_TYPE,
            size: u32,
            // TODO: what to do with BytesParamIndex 3?
            p_h_d_r_meta_data: ?*const anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) void,
        VideoProcessorGetStreamHDRMetaData: *const fn (
            self: *const ID3D11VideoContext2,
            p_video_processor: ?*ID3D11VideoProcessor,
            stream_index: u32,
            p_type: ?*DXGI_HDR_METADATA_TYPE,
            size: u32,
            // TODO: what to do with BytesParamIndex 3?
            p_meta_data: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11VideoContext1.MethodMixin(T);
            pub inline fn videoProcessorSetOutputHDRMetaData(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, type_: DXGI_HDR_METADATA_TYPE, size_: u32, p_h_d_r_meta_data_: ?*const anyopaque) void {
                return @as(*const ID3D11VideoContext2.VTable, @ptrCast(self.vtable)).VideoProcessorSetOutputHDRMetaData(@as(*const ID3D11VideoContext2, @ptrCast(self)), p_video_processor_, type_, size_, p_h_d_r_meta_data_);
            }
            pub inline fn videoProcessorGetOutputHDRMetaData(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, p_type_: ?*DXGI_HDR_METADATA_TYPE, size_: u32, p_meta_data_: ?*anyopaque) void {
                return @as(*const ID3D11VideoContext2.VTable, @ptrCast(self.vtable)).VideoProcessorGetOutputHDRMetaData(@as(*const ID3D11VideoContext2, @ptrCast(self)), p_video_processor_, p_type_, size_, p_meta_data_);
            }
            pub inline fn videoProcessorSetStreamHDRMetaData(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, type_: DXGI_HDR_METADATA_TYPE, size_: u32, p_h_d_r_meta_data_: ?*const anyopaque) void {
                return @as(*const ID3D11VideoContext2.VTable, @ptrCast(self.vtable)).VideoProcessorSetStreamHDRMetaData(@as(*const ID3D11VideoContext2, @ptrCast(self)), p_video_processor_, stream_index_, type_, size_, p_h_d_r_meta_data_);
            }
            pub inline fn videoProcessorGetStreamHDRMetaData(self: *const T, p_video_processor_: ?*ID3D11VideoProcessor, stream_index_: u32, p_type_: ?*DXGI_HDR_METADATA_TYPE, size_: u32, p_meta_data_: ?*anyopaque) void {
                return @as(*const ID3D11VideoContext2.VTable, @ptrCast(self.vtable)).VideoProcessorGetStreamHDRMetaData(@as(*const ID3D11VideoContext2, @ptrCast(self)), p_video_processor_, stream_index_, p_type_, size_, p_meta_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_FEATURE_VIDEO = enum(i32) {
    M = 0,
};
pub const D3D11_FEATURE_VIDEO_DECODER_HISTOGRAM = D3D11_FEATURE_VIDEO.M;

pub const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT = enum(i32) {
    Y = 0,
    U = 1,
    V = 2,
    // R = 0, this enum value conflicts with Y
    // G = 1, this enum value conflicts with U
    // B = 2, this enum value conflicts with V
    A = 3,
};
pub const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_Y = D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT.Y;
pub const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_U = D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT.U;
pub const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_V = D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT.V;
pub const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_R = D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT.Y;
pub const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_G = D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT.U;
pub const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_B = D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT.V;
pub const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_A = D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT.A;

pub const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS = enum(u32) {
    NONE = 0,
    Y = 1,
    U = 2,
    V = 4,
    // R = 1, this enum value conflicts with Y
    // G = 2, this enum value conflicts with U
    // B = 4, this enum value conflicts with V
    A = 8,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        Y: u1 = 0,
        U: u1 = 0,
        V: u1 = 0,
        A: u1 = 0,
    }) D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS {
        return @as(D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS, @enumFromInt((if (o.NONE == 1) @intFromEnum(D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS.NONE) else 0) | (if (o.Y == 1) @intFromEnum(D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS.Y) else 0) | (if (o.U == 1) @intFromEnum(D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS.U) else 0) | (if (o.V == 1) @intFromEnum(D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS.V) else 0) | (if (o.A == 1) @intFromEnum(D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS.A) else 0)));
    }
};
pub const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_NONE = D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS.NONE;
pub const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_Y = D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS.Y;
pub const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_U = D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS.U;
pub const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_V = D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS.V;
pub const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_R = D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS.Y;
pub const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_G = D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS.U;
pub const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_B = D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS.V;
pub const D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAG_A = D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS.A;

pub const D3D11_FEATURE_DATA_VIDEO_DECODER_HISTOGRAM = extern struct {
    DecoderDesc: D3D11_VIDEO_DECODER_DESC,
    Components: D3D11_VIDEO_DECODER_HISTOGRAM_COMPONENT_FLAGS,
    BinCount: u32,
    CounterBitDepth: u32,
};

pub const D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAGS = enum(u32) {
    E = 0,
    _,
    pub fn initFlags(o: struct {
        E: u1 = 0,
    }) D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAGS {
        return @as(D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAGS, @enumFromInt((if (o.E == 1) @intFromEnum(D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAGS.E) else 0)));
    }
};
pub const D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAG_NONE = D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAGS.E;

// This COM type is Agile, not sure what that means
const IID_ID3D11VideoDevice2_Value = Guid.initString("59c0cb01-35f0-4a70-8f67-87905c906a53");
pub const IID_ID3D11VideoDevice2 = &IID_ID3D11VideoDevice2_Value;
pub const ID3D11VideoDevice2 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11VideoDevice1.VTable,
        CheckFeatureSupport: *const fn (
            self: *const ID3D11VideoDevice2,
            feature: D3D11_FEATURE_VIDEO,
            // TODO: what to do with BytesParamIndex 2?
            p_feature_support_data: ?*anyopaque,
            feature_support_data_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NegotiateCryptoSessionKeyExchangeMT: *const fn (
            self: *const ID3D11VideoDevice2,
            p_crypto_session: ?*ID3D11CryptoSession,
            flags: D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAGS,
            data_size: u32,
            // TODO: what to do with BytesParamIndex 2?
            p_data: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11VideoDevice1.MethodMixin(T);
            pub inline fn checkFeatureSupport(self: *const T, feature_: D3D11_FEATURE_VIDEO, p_feature_support_data_: ?*anyopaque, feature_support_data_size_: u32) HRESULT {
                return @as(*const ID3D11VideoDevice2.VTable, @ptrCast(self.vtable)).CheckFeatureSupport(@as(*const ID3D11VideoDevice2, @ptrCast(self)), feature_, p_feature_support_data_, feature_support_data_size_);
            }
            pub inline fn negotiateCryptoSessionKeyExchangeMT(self: *const T, p_crypto_session_: ?*ID3D11CryptoSession, flags_: D3D11_CRYPTO_SESSION_KEY_EXCHANGE_FLAGS, data_size_: u32, p_data_: ?*anyopaque) HRESULT {
                return @as(*const ID3D11VideoDevice2.VTable, @ptrCast(self.vtable)).NegotiateCryptoSessionKeyExchangeMT(@as(*const ID3D11VideoDevice2, @ptrCast(self)), p_crypto_session_, flags_, data_size_, p_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_VIDEO_DECODER_BUFFER_DESC2 = extern struct {
    BufferType: D3D11_VIDEO_DECODER_BUFFER_TYPE,
    DataOffset: u32,
    DataSize: u32,
    pIV: ?*anyopaque,
    IVSize: u32,
    pSubSampleMappingBlock: ?*D3D11_VIDEO_DECODER_SUB_SAMPLE_MAPPING_BLOCK,
    SubSampleMappingCount: u32,
    cBlocksStripeEncrypted: u32,
    cBlocksStripeClear: u32,
};

// This COM type is Agile, not sure what that means
const IID_ID3D11VideoContext3_Value = Guid.initString("a9e2faa0-cb39-418f-a0b7-d8aad4de672e");
pub const IID_ID3D11VideoContext3 = &IID_ID3D11VideoContext3_Value;
pub const ID3D11VideoContext3 = extern struct {
    pub const VTable = extern struct {
        base: ID3D11VideoContext2.VTable,
        DecoderBeginFrame1: *const fn (
            self: *const ID3D11VideoContext3,
            p_decoder: ?*ID3D11VideoDecoder,
            p_view: ?*ID3D11VideoDecoderOutputView,
            content_key_size: u32,
            // TODO: what to do with BytesParamIndex 2?
            p_content_key: ?*const anyopaque,
            num_component_histograms: u32,
            p_histogram_offsets: ?[*]const u32,
            pp_histogram_buffers: ?[*]?*ID3D11Buffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SubmitDecoderBuffers2: *const fn (
            self: *const ID3D11VideoContext3,
            p_decoder: ?*ID3D11VideoDecoder,
            num_buffers: u32,
            p_buffer_desc: [*]const D3D11_VIDEO_DECODER_BUFFER_DESC2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID3D11VideoContext2.MethodMixin(T);
            pub inline fn decoderBeginFrame1(self: *const T, p_decoder_: ?*ID3D11VideoDecoder, p_view_: ?*ID3D11VideoDecoderOutputView, content_key_size_: u32, p_content_key_: ?*const anyopaque, num_component_histograms_: u32, p_histogram_offsets_: ?[*]const u32, pp_histogram_buffers_: ?[*]?*ID3D11Buffer) HRESULT {
                return @as(*const ID3D11VideoContext3.VTable, @ptrCast(self.vtable)).DecoderBeginFrame1(@as(*const ID3D11VideoContext3, @ptrCast(self)), p_decoder_, p_view_, content_key_size_, p_content_key_, num_component_histograms_, p_histogram_offsets_, pp_histogram_buffers_);
            }
            pub inline fn submitDecoderBuffers2(self: *const T, p_decoder_: ?*ID3D11VideoDecoder, num_buffers_: u32, p_buffer_desc_: [*]const D3D11_VIDEO_DECODER_BUFFER_DESC2) HRESULT {
                return @as(*const ID3D11VideoContext3.VTable, @ptrCast(self.vtable)).SubmitDecoderBuffers2(@as(*const ID3D11VideoContext3, @ptrCast(self)), p_decoder_, num_buffers_, p_buffer_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_FEATURE_DATA_D3D11_OPTIONS4 = extern struct {
    ExtendedNV12SharedTextureSupported: BOOL,
};

pub const D3D11_SHADER_VERSION_TYPE = enum(i32) {
    PIXEL_SHADER = 0,
    VERTEX_SHADER = 1,
    GEOMETRY_SHADER = 2,
    HULL_SHADER = 3,
    DOMAIN_SHADER = 4,
    COMPUTE_SHADER = 5,
    RESERVED0 = 65520,
};
pub const D3D11_SHVER_PIXEL_SHADER = D3D11_SHADER_VERSION_TYPE.PIXEL_SHADER;
pub const D3D11_SHVER_VERTEX_SHADER = D3D11_SHADER_VERSION_TYPE.VERTEX_SHADER;
pub const D3D11_SHVER_GEOMETRY_SHADER = D3D11_SHADER_VERSION_TYPE.GEOMETRY_SHADER;
pub const D3D11_SHVER_HULL_SHADER = D3D11_SHADER_VERSION_TYPE.HULL_SHADER;
pub const D3D11_SHVER_DOMAIN_SHADER = D3D11_SHADER_VERSION_TYPE.DOMAIN_SHADER;
pub const D3D11_SHVER_COMPUTE_SHADER = D3D11_SHADER_VERSION_TYPE.COMPUTE_SHADER;
pub const D3D11_SHVER_RESERVED0 = D3D11_SHADER_VERSION_TYPE.RESERVED0;

pub const D3D11_SIGNATURE_PARAMETER_DESC = extern struct {
    SemanticName: ?[*:0]const u8,
    SemanticIndex: u32,
    Register: u32,
    SystemValueType: D3D_NAME,
    ComponentType: D3D_REGISTER_COMPONENT_TYPE,
    Mask: u8,
    ReadWriteMask: u8,
    Stream: u32,
    MinPrecision: D3D_MIN_PRECISION,
};

pub const D3D11_SHADER_BUFFER_DESC = extern struct {
    Name: ?[*:0]const u8,
    Type: D3D_CBUFFER_TYPE,
    Variables: u32,
    Size: u32,
    uFlags: u32,
};

pub const D3D11_SHADER_VARIABLE_DESC = extern struct {
    Name: ?[*:0]const u8,
    StartOffset: u32,
    Size: u32,
    uFlags: u32,
    DefaultValue: ?*anyopaque,
    StartTexture: u32,
    TextureSize: u32,
    StartSampler: u32,
    SamplerSize: u32,
};

pub const D3D11_SHADER_TYPE_DESC = extern struct {
    Class: D3D_SHADER_VARIABLE_CLASS,
    Type: D3D_SHADER_VARIABLE_TYPE,
    Rows: u32,
    Columns: u32,
    Elements: u32,
    Members: u32,
    Offset: u32,
    Name: ?[*:0]const u8,
};

pub const D3D11_SHADER_DESC = extern struct {
    Version: u32,
    Creator: ?[*:0]const u8,
    Flags: u32,
    ConstantBuffers: u32,
    BoundResources: u32,
    InputParameters: u32,
    OutputParameters: u32,
    InstructionCount: u32,
    TempRegisterCount: u32,
    TempArrayCount: u32,
    DefCount: u32,
    DclCount: u32,
    TextureNormalInstructions: u32,
    TextureLoadInstructions: u32,
    TextureCompInstructions: u32,
    TextureBiasInstructions: u32,
    TextureGradientInstructions: u32,
    FloatInstructionCount: u32,
    IntInstructionCount: u32,
    UintInstructionCount: u32,
    StaticFlowControlCount: u32,
    DynamicFlowControlCount: u32,
    MacroInstructionCount: u32,
    ArrayInstructionCount: u32,
    CutInstructionCount: u32,
    EmitInstructionCount: u32,
    GSOutputTopology: D3D_PRIMITIVE_TOPOLOGY,
    GSMaxOutputVertexCount: u32,
    InputPrimitive: D3D_PRIMITIVE,
    PatchConstantParameters: u32,
    cGSInstanceCount: u32,
    cControlPoints: u32,
    HSOutputPrimitive: D3D_TESSELLATOR_OUTPUT_PRIMITIVE,
    HSPartitioning: D3D_TESSELLATOR_PARTITIONING,
    TessellatorDomain: D3D_TESSELLATOR_DOMAIN,
    cBarrierInstructions: u32,
    cInterlockedInstructions: u32,
    cTextureStoreInstructions: u32,
};

pub const D3D11_SHADER_INPUT_BIND_DESC = extern struct {
    Name: ?[*:0]const u8,
    Type: D3D_SHADER_INPUT_TYPE,
    BindPoint: u32,
    BindCount: u32,
    uFlags: u32,
    ReturnType: D3D_RESOURCE_RETURN_TYPE,
    Dimension: D3D_SRV_DIMENSION,
    NumSamples: u32,
};

pub const D3D11_LIBRARY_DESC = extern struct {
    Creator: ?[*:0]const u8,
    Flags: u32,
    FunctionCount: u32,
};

pub const D3D11_FUNCTION_DESC = extern struct {
    Version: u32,
    Creator: ?[*:0]const u8,
    Flags: u32,
    ConstantBuffers: u32,
    BoundResources: u32,
    InstructionCount: u32,
    TempRegisterCount: u32,
    TempArrayCount: u32,
    DefCount: u32,
    DclCount: u32,
    TextureNormalInstructions: u32,
    TextureLoadInstructions: u32,
    TextureCompInstructions: u32,
    TextureBiasInstructions: u32,
    TextureGradientInstructions: u32,
    FloatInstructionCount: u32,
    IntInstructionCount: u32,
    UintInstructionCount: u32,
    StaticFlowControlCount: u32,
    DynamicFlowControlCount: u32,
    MacroInstructionCount: u32,
    ArrayInstructionCount: u32,
    MovInstructionCount: u32,
    MovcInstructionCount: u32,
    ConversionInstructionCount: u32,
    BitwiseInstructionCount: u32,
    MinFeatureLevel: D3D_FEATURE_LEVEL,
    RequiredFeatureFlags: u64,
    Name: ?[*:0]const u8,
    FunctionParameterCount: i32,
    HasReturn: BOOL,
    Has10Level9VertexShader: BOOL,
    Has10Level9PixelShader: BOOL,
};

pub const D3D11_PARAMETER_DESC = extern struct {
    Name: ?[*:0]const u8,
    SemanticName: ?[*:0]const u8,
    Type: D3D_SHADER_VARIABLE_TYPE,
    Class: D3D_SHADER_VARIABLE_CLASS,
    Rows: u32,
    Columns: u32,
    InterpolationMode: D3D_INTERPOLATION_MODE,
    Flags: D3D_PARAMETER_FLAGS,
    FirstInRegister: u32,
    FirstInComponent: u32,
    FirstOutRegister: u32,
    FirstOutComponent: u32,
};

// This COM type is Agile, not sure what that means
const IID_ID3D11ShaderReflectionType_Value = Guid.initString("6e6ffa6a-9bae-4613-a51e-91652d508c21");
pub const IID_ID3D11ShaderReflectionType = &IID_ID3D11ShaderReflectionType_Value;
pub const ID3D11ShaderReflectionType = extern struct {
    pub const VTable = extern struct {
        GetDesc: *const fn (
            self: *const ID3D11ShaderReflectionType,
            p_desc: ?*D3D11_SHADER_TYPE_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMemberTypeByIndex: *const fn (
            self: *const ID3D11ShaderReflectionType,
            index: u32,
            retval: *?*ID3D11ShaderReflectionType,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetMemberTypeByName: *const fn (
            self: *const ID3D11ShaderReflectionType,
            name: ?[*:0]const u8,
            retval: *?*ID3D11ShaderReflectionType,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetMemberTypeName: *const fn (
            self: *const ID3D11ShaderReflectionType,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) ?PSTR,
        IsEqual: *const fn (
            self: *const ID3D11ShaderReflectionType,
            p_type: ?*ID3D11ShaderReflectionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubType: *const fn (
            self: *const ID3D11ShaderReflectionType,
            retval: *?*ID3D11ShaderReflectionType,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetBaseClass: *const fn (
            self: *const ID3D11ShaderReflectionType,
            retval: *?*ID3D11ShaderReflectionType,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetNumInterfaces: *const fn (
            self: *const ID3D11ShaderReflectionType,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetInterfaceByIndex: *const fn (
            self: *const ID3D11ShaderReflectionType,
            u_index: u32,
            retval: *?*ID3D11ShaderReflectionType,
        ) callconv(@import("std").os.windows.WINAPI) void,
        IsOfType: *const fn (
            self: *const ID3D11ShaderReflectionType,
            p_type: ?*ID3D11ShaderReflectionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImplementsInterface: *const fn (
            self: *const ID3D11ShaderReflectionType,
            p_base: ?*ID3D11ShaderReflectionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_SHADER_TYPE_DESC) HRESULT {
                return @as(*const ID3D11ShaderReflectionType.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11ShaderReflectionType, @ptrCast(self)), p_desc_);
            }
            pub inline fn getMemberTypeByIndex(self: *const T, index_: u32) ?*ID3D11ShaderReflectionType {
                var retval: ?*ID3D11ShaderReflectionType = undefined;
                @as(*const ID3D11ShaderReflectionType.VTable, @ptrCast(self.vtable)).GetMemberTypeByIndex(@as(*const ID3D11ShaderReflectionType, @ptrCast(self)), index_, &retval);
                return retval;
            }
            pub inline fn getMemberTypeByName(self: *const T, name_: ?[*:0]const u8) ?*ID3D11ShaderReflectionType {
                var retval: ?*ID3D11ShaderReflectionType = undefined;
                @as(*const ID3D11ShaderReflectionType.VTable, @ptrCast(self.vtable)).GetMemberTypeByName(@as(*const ID3D11ShaderReflectionType, @ptrCast(self)), name_, &retval);
                return retval;
            }
            pub inline fn getMemberTypeName(self: *const T, index_: u32) ?PSTR {
                return @as(*const ID3D11ShaderReflectionType.VTable, @ptrCast(self.vtable)).GetMemberTypeName(@as(*const ID3D11ShaderReflectionType, @ptrCast(self)), index_);
            }
            pub inline fn isEqual(self: *const T, p_type_: ?*ID3D11ShaderReflectionType) HRESULT {
                return @as(*const ID3D11ShaderReflectionType.VTable, @ptrCast(self.vtable)).IsEqual(@as(*const ID3D11ShaderReflectionType, @ptrCast(self)), p_type_);
            }
            pub inline fn getSubType(self: *const T) ?*ID3D11ShaderReflectionType {
                var retval: ?*ID3D11ShaderReflectionType = undefined;
                @as(*const ID3D11ShaderReflectionType.VTable, @ptrCast(self.vtable)).GetSubType(@as(*const ID3D11ShaderReflectionType, @ptrCast(self)), &retval);
                return retval;
            }
            pub inline fn getBaseClass(self: *const T) ?*ID3D11ShaderReflectionType {
                var retval: ?*ID3D11ShaderReflectionType = undefined;
                @as(*const ID3D11ShaderReflectionType.VTable, @ptrCast(self.vtable)).GetBaseClass(@as(*const ID3D11ShaderReflectionType, @ptrCast(self)), &retval);
                return retval;
            }
            pub inline fn getNumInterfaces(self: *const T) u32 {
                return @as(*const ID3D11ShaderReflectionType.VTable, @ptrCast(self.vtable)).GetNumInterfaces(@as(*const ID3D11ShaderReflectionType, @ptrCast(self)));
            }
            pub inline fn getInterfaceByIndex(self: *const T, u_index_: u32) ?*ID3D11ShaderReflectionType {
                var retval: ?*ID3D11ShaderReflectionType = undefined;
                @as(*const ID3D11ShaderReflectionType.VTable, @ptrCast(self.vtable)).GetInterfaceByIndex(@as(*const ID3D11ShaderReflectionType, @ptrCast(self)), u_index_, &retval);
                return retval;
            }
            pub inline fn isOfType(self: *const T, p_type_: ?*ID3D11ShaderReflectionType) HRESULT {
                return @as(*const ID3D11ShaderReflectionType.VTable, @ptrCast(self.vtable)).IsOfType(@as(*const ID3D11ShaderReflectionType, @ptrCast(self)), p_type_);
            }
            pub inline fn implementsInterface(self: *const T, p_base_: ?*ID3D11ShaderReflectionType) HRESULT {
                return @as(*const ID3D11ShaderReflectionType.VTable, @ptrCast(self.vtable)).ImplementsInterface(@as(*const ID3D11ShaderReflectionType, @ptrCast(self)), p_base_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// This COM type is Agile, not sure what that means
const IID_ID3D11ShaderReflectionVariable_Value = Guid.initString("51f23923-f3e5-4bd1-91cb-606177d8db4c");
pub const IID_ID3D11ShaderReflectionVariable = &IID_ID3D11ShaderReflectionVariable_Value;
pub const ID3D11ShaderReflectionVariable = extern struct {
    pub const VTable = extern struct {
        GetDesc: *const fn (
            self: *const ID3D11ShaderReflectionVariable,
            p_desc: ?*D3D11_SHADER_VARIABLE_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: *const fn (
            self: *const ID3D11ShaderReflectionVariable,
            retval: *?*ID3D11ShaderReflectionType,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetBuffer: *const fn (
            self: *const ID3D11ShaderReflectionVariable,
            retval: *?*ID3D11ShaderReflectionConstantBuffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetInterfaceSlot: *const fn (
            self: *const ID3D11ShaderReflectionVariable,
            u_array_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_SHADER_VARIABLE_DESC) HRESULT {
                return @as(*const ID3D11ShaderReflectionVariable.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11ShaderReflectionVariable, @ptrCast(self)), p_desc_);
            }
            pub inline fn getType(self: *const T) ?*ID3D11ShaderReflectionType {
                var retval: ?*ID3D11ShaderReflectionType = undefined;
                @as(*const ID3D11ShaderReflectionVariable.VTable, @ptrCast(self.vtable)).GetType(@as(*const ID3D11ShaderReflectionVariable, @ptrCast(self)), &retval);
                return retval;
            }
            pub inline fn getBuffer(self: *const T) ?*ID3D11ShaderReflectionConstantBuffer {
                var retval: ?*ID3D11ShaderReflectionConstantBuffer = undefined;
                @as(*const ID3D11ShaderReflectionVariable.VTable, @ptrCast(self.vtable)).GetBuffer(@as(*const ID3D11ShaderReflectionVariable, @ptrCast(self)), &retval);
                return retval;
            }
            pub inline fn getInterfaceSlot(self: *const T, u_array_index_: u32) u32 {
                return @as(*const ID3D11ShaderReflectionVariable.VTable, @ptrCast(self.vtable)).GetInterfaceSlot(@as(*const ID3D11ShaderReflectionVariable, @ptrCast(self)), u_array_index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// This COM type is Agile, not sure what that means
const IID_ID3D11ShaderReflectionConstantBuffer_Value = Guid.initString("eb62d63d-93dd-4318-8ae8-c6f83ad371b8");
pub const IID_ID3D11ShaderReflectionConstantBuffer = &IID_ID3D11ShaderReflectionConstantBuffer_Value;
pub const ID3D11ShaderReflectionConstantBuffer = extern struct {
    pub const VTable = extern struct {
        GetDesc: *const fn (
            self: *const ID3D11ShaderReflectionConstantBuffer,
            p_desc: ?*D3D11_SHADER_BUFFER_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVariableByIndex: *const fn (
            self: *const ID3D11ShaderReflectionConstantBuffer,
            index: u32,
            retval: *?*ID3D11ShaderReflectionVariable,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetVariableByName: *const fn (
            self: *const ID3D11ShaderReflectionConstantBuffer,
            name: ?[*:0]const u8,
            retval: *?*ID3D11ShaderReflectionVariable,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_SHADER_BUFFER_DESC) HRESULT {
                return @as(*const ID3D11ShaderReflectionConstantBuffer.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11ShaderReflectionConstantBuffer, @ptrCast(self)), p_desc_);
            }
            pub inline fn getVariableByIndex(self: *const T, index_: u32) ?*ID3D11ShaderReflectionVariable {
                var retval: ?*ID3D11ShaderReflectionVariable = undefined;
                @as(*const ID3D11ShaderReflectionConstantBuffer.VTable, @ptrCast(self.vtable)).GetVariableByIndex(@as(*const ID3D11ShaderReflectionConstantBuffer, @ptrCast(self)), index_, &retval);
                return retval;
            }
            pub inline fn getVariableByName(self: *const T, name_: ?[*:0]const u8) ?*ID3D11ShaderReflectionVariable {
                var retval: ?*ID3D11ShaderReflectionVariable = undefined;
                @as(*const ID3D11ShaderReflectionConstantBuffer.VTable, @ptrCast(self.vtable)).GetVariableByName(@as(*const ID3D11ShaderReflectionConstantBuffer, @ptrCast(self)), name_, &retval);
                return retval;
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
// This COM type is Agile, not sure what that means
const IID_ID3D11ShaderReflection_Value = Guid.initString("8d536ca1-0cca-4956-a837-786963755584");
pub const IID_ID3D11ShaderReflection = &IID_ID3D11ShaderReflection_Value;
pub const ID3D11ShaderReflection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDesc: *const fn (
            self: *const ID3D11ShaderReflection,
            p_desc: ?*D3D11_SHADER_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConstantBufferByIndex: *const fn (
            self: *const ID3D11ShaderReflection,
            index: u32,
            retval: *?*ID3D11ShaderReflectionConstantBuffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetConstantBufferByName: *const fn (
            self: *const ID3D11ShaderReflection,
            name: ?[*:0]const u8,
            retval: *?*ID3D11ShaderReflectionConstantBuffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetResourceBindingDesc: *const fn (
            self: *const ID3D11ShaderReflection,
            resource_index: u32,
            p_desc: ?*D3D11_SHADER_INPUT_BIND_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputParameterDesc: *const fn (
            self: *const ID3D11ShaderReflection,
            parameter_index: u32,
            p_desc: ?*D3D11_SIGNATURE_PARAMETER_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputParameterDesc: *const fn (
            self: *const ID3D11ShaderReflection,
            parameter_index: u32,
            p_desc: ?*D3D11_SIGNATURE_PARAMETER_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPatchConstantParameterDesc: *const fn (
            self: *const ID3D11ShaderReflection,
            parameter_index: u32,
            p_desc: ?*D3D11_SIGNATURE_PARAMETER_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVariableByName: *const fn (
            self: *const ID3D11ShaderReflection,
            name: ?[*:0]const u8,
            retval: *?*ID3D11ShaderReflectionVariable,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetResourceBindingDescByName: *const fn (
            self: *const ID3D11ShaderReflection,
            name: ?[*:0]const u8,
            p_desc: ?*D3D11_SHADER_INPUT_BIND_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMovInstructionCount: *const fn (
            self: *const ID3D11ShaderReflection,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetMovcInstructionCount: *const fn (
            self: *const ID3D11ShaderReflection,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetConversionInstructionCount: *const fn (
            self: *const ID3D11ShaderReflection,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetBitwiseInstructionCount: *const fn (
            self: *const ID3D11ShaderReflection,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetGSInputPrimitive: *const fn (
            self: *const ID3D11ShaderReflection,
        ) callconv(@import("std").os.windows.WINAPI) D3D_PRIMITIVE,
        IsSampleFrequencyShader: *const fn (
            self: *const ID3D11ShaderReflection,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetNumInterfaceSlots: *const fn (
            self: *const ID3D11ShaderReflection,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetMinFeatureLevel: *const fn (
            self: *const ID3D11ShaderReflection,
            p_level: ?*D3D_FEATURE_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetThreadGroupSize: *const fn (
            self: *const ID3D11ShaderReflection,
            p_size_x: ?*u32,
            p_size_y: ?*u32,
            p_size_z: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetRequiresFlags: *const fn (
            self: *const ID3D11ShaderReflection,
        ) callconv(@import("std").os.windows.WINAPI) u64,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_SHADER_DESC) HRESULT {
                return @as(*const ID3D11ShaderReflection.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11ShaderReflection, @ptrCast(self)), p_desc_);
            }
            pub inline fn getConstantBufferByIndex(self: *const T, index_: u32) ?*ID3D11ShaderReflectionConstantBuffer {
                var retval: ?*ID3D11ShaderReflectionConstantBuffer = undefined;
                @as(*const ID3D11ShaderReflection.VTable, @ptrCast(self.vtable)).GetConstantBufferByIndex(@as(*const ID3D11ShaderReflection, @ptrCast(self)), index_, &retval);
                return retval;
            }
            pub inline fn getConstantBufferByName(self: *const T, name_: ?[*:0]const u8) ?*ID3D11ShaderReflectionConstantBuffer {
                var retval: ?*ID3D11ShaderReflectionConstantBuffer = undefined;
                @as(*const ID3D11ShaderReflection.VTable, @ptrCast(self.vtable)).GetConstantBufferByName(@as(*const ID3D11ShaderReflection, @ptrCast(self)), name_, &retval);
                return retval;
            }
            pub inline fn getResourceBindingDesc(self: *const T, resource_index_: u32, p_desc_: ?*D3D11_SHADER_INPUT_BIND_DESC) HRESULT {
                return @as(*const ID3D11ShaderReflection.VTable, @ptrCast(self.vtable)).GetResourceBindingDesc(@as(*const ID3D11ShaderReflection, @ptrCast(self)), resource_index_, p_desc_);
            }
            pub inline fn getInputParameterDesc(self: *const T, parameter_index_: u32, p_desc_: ?*D3D11_SIGNATURE_PARAMETER_DESC) HRESULT {
                return @as(*const ID3D11ShaderReflection.VTable, @ptrCast(self.vtable)).GetInputParameterDesc(@as(*const ID3D11ShaderReflection, @ptrCast(self)), parameter_index_, p_desc_);
            }
            pub inline fn getOutputParameterDesc(self: *const T, parameter_index_: u32, p_desc_: ?*D3D11_SIGNATURE_PARAMETER_DESC) HRESULT {
                return @as(*const ID3D11ShaderReflection.VTable, @ptrCast(self.vtable)).GetOutputParameterDesc(@as(*const ID3D11ShaderReflection, @ptrCast(self)), parameter_index_, p_desc_);
            }
            pub inline fn getPatchConstantParameterDesc(self: *const T, parameter_index_: u32, p_desc_: ?*D3D11_SIGNATURE_PARAMETER_DESC) HRESULT {
                return @as(*const ID3D11ShaderReflection.VTable, @ptrCast(self.vtable)).GetPatchConstantParameterDesc(@as(*const ID3D11ShaderReflection, @ptrCast(self)), parameter_index_, p_desc_);
            }
            pub inline fn getVariableByName(self: *const T, name_: ?[*:0]const u8) ?*ID3D11ShaderReflectionVariable {
                var retval: ?*ID3D11ShaderReflectionVariable = undefined;
                @as(*const ID3D11ShaderReflection.VTable, @ptrCast(self.vtable)).GetVariableByName(@as(*const ID3D11ShaderReflection, @ptrCast(self)), name_, &retval);
                return retval;
            }
            pub inline fn getResourceBindingDescByName(self: *const T, name_: ?[*:0]const u8, p_desc_: ?*D3D11_SHADER_INPUT_BIND_DESC) HRESULT {
                return @as(*const ID3D11ShaderReflection.VTable, @ptrCast(self.vtable)).GetResourceBindingDescByName(@as(*const ID3D11ShaderReflection, @ptrCast(self)), name_, p_desc_);
            }
            pub inline fn getMovInstructionCount(self: *const T) u32 {
                return @as(*const ID3D11ShaderReflection.VTable, @ptrCast(self.vtable)).GetMovInstructionCount(@as(*const ID3D11ShaderReflection, @ptrCast(self)));
            }
            pub inline fn getMovcInstructionCount(self: *const T) u32 {
                return @as(*const ID3D11ShaderReflection.VTable, @ptrCast(self.vtable)).GetMovcInstructionCount(@as(*const ID3D11ShaderReflection, @ptrCast(self)));
            }
            pub inline fn getConversionInstructionCount(self: *const T) u32 {
                return @as(*const ID3D11ShaderReflection.VTable, @ptrCast(self.vtable)).GetConversionInstructionCount(@as(*const ID3D11ShaderReflection, @ptrCast(self)));
            }
            pub inline fn getBitwiseInstructionCount(self: *const T) u32 {
                return @as(*const ID3D11ShaderReflection.VTable, @ptrCast(self.vtable)).GetBitwiseInstructionCount(@as(*const ID3D11ShaderReflection, @ptrCast(self)));
            }
            pub inline fn getGSInputPrimitive(self: *const T) D3D_PRIMITIVE {
                return @as(*const ID3D11ShaderReflection.VTable, @ptrCast(self.vtable)).GetGSInputPrimitive(@as(*const ID3D11ShaderReflection, @ptrCast(self)));
            }
            pub inline fn isSampleFrequencyShader(self: *const T) BOOL {
                return @as(*const ID3D11ShaderReflection.VTable, @ptrCast(self.vtable)).IsSampleFrequencyShader(@as(*const ID3D11ShaderReflection, @ptrCast(self)));
            }
            pub inline fn getNumInterfaceSlots(self: *const T) u32 {
                return @as(*const ID3D11ShaderReflection.VTable, @ptrCast(self.vtable)).GetNumInterfaceSlots(@as(*const ID3D11ShaderReflection, @ptrCast(self)));
            }
            pub inline fn getMinFeatureLevel(self: *const T, p_level_: ?*D3D_FEATURE_LEVEL) HRESULT {
                return @as(*const ID3D11ShaderReflection.VTable, @ptrCast(self.vtable)).GetMinFeatureLevel(@as(*const ID3D11ShaderReflection, @ptrCast(self)), p_level_);
            }
            pub inline fn getThreadGroupSize(self: *const T, p_size_x_: ?*u32, p_size_y_: ?*u32, p_size_z_: ?*u32) u32 {
                return @as(*const ID3D11ShaderReflection.VTable, @ptrCast(self.vtable)).GetThreadGroupSize(@as(*const ID3D11ShaderReflection, @ptrCast(self)), p_size_x_, p_size_y_, p_size_z_);
            }
            pub inline fn getRequiresFlags(self: *const T) u64 {
                return @as(*const ID3D11ShaderReflection.VTable, @ptrCast(self.vtable)).GetRequiresFlags(@as(*const ID3D11ShaderReflection, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// This COM type is Agile, not sure what that means
const IID_ID3D11LibraryReflection_Value = Guid.initString("54384f1b-5b3e-4bb7-ae01-60ba3097cbb6");
pub const IID_ID3D11LibraryReflection = &IID_ID3D11LibraryReflection_Value;
pub const ID3D11LibraryReflection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDesc: *const fn (
            self: *const ID3D11LibraryReflection,
            p_desc: ?*D3D11_LIBRARY_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFunctionByIndex: *const fn (
            self: *const ID3D11LibraryReflection,
            function_index: i32,
            retval: *?*ID3D11FunctionReflection,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_LIBRARY_DESC) HRESULT {
                return @as(*const ID3D11LibraryReflection.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11LibraryReflection, @ptrCast(self)), p_desc_);
            }
            pub inline fn getFunctionByIndex(self: *const T, function_index_: i32) ?*ID3D11FunctionReflection {
                var retval: ?*ID3D11FunctionReflection = undefined;
                @as(*const ID3D11LibraryReflection.VTable, @ptrCast(self.vtable)).GetFunctionByIndex(@as(*const ID3D11LibraryReflection, @ptrCast(self)), function_index_, &retval);
                return retval;
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// This COM type is Agile, not sure what that means
const IID_ID3D11FunctionReflection_Value = Guid.initString("207bcecb-d683-4a06-a8a3-9b149b9f73a4");
pub const IID_ID3D11FunctionReflection = &IID_ID3D11FunctionReflection_Value;
pub const ID3D11FunctionReflection = extern struct {
    pub const VTable = extern struct {
        GetDesc: *const fn (
            self: *const ID3D11FunctionReflection,
            p_desc: ?*D3D11_FUNCTION_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConstantBufferByIndex: *const fn (
            self: *const ID3D11FunctionReflection,
            buffer_index: u32,
            retval: *?*ID3D11ShaderReflectionConstantBuffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetConstantBufferByName: *const fn (
            self: *const ID3D11FunctionReflection,
            name: ?[*:0]const u8,
            retval: *?*ID3D11ShaderReflectionConstantBuffer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetResourceBindingDesc: *const fn (
            self: *const ID3D11FunctionReflection,
            resource_index: u32,
            p_desc: ?*D3D11_SHADER_INPUT_BIND_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVariableByName: *const fn (
            self: *const ID3D11FunctionReflection,
            name: ?[*:0]const u8,
            retval: *?*ID3D11ShaderReflectionVariable,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetResourceBindingDescByName: *const fn (
            self: *const ID3D11FunctionReflection,
            name: ?[*:0]const u8,
            p_desc: ?*D3D11_SHADER_INPUT_BIND_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFunctionParameter: *const fn (
            self: *const ID3D11FunctionReflection,
            parameter_index: i32,
            retval: *?*ID3D11FunctionParameterReflection,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_FUNCTION_DESC) HRESULT {
                return @as(*const ID3D11FunctionReflection.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11FunctionReflection, @ptrCast(self)), p_desc_);
            }
            pub inline fn getConstantBufferByIndex(self: *const T, buffer_index_: u32) ?*ID3D11ShaderReflectionConstantBuffer {
                var retval: ?*ID3D11ShaderReflectionConstantBuffer = undefined;
                @as(*const ID3D11FunctionReflection.VTable, @ptrCast(self.vtable)).GetConstantBufferByIndex(@as(*const ID3D11FunctionReflection, @ptrCast(self)), buffer_index_, &retval);
                return retval;
            }
            pub inline fn getConstantBufferByName(self: *const T, name_: ?[*:0]const u8) ?*ID3D11ShaderReflectionConstantBuffer {
                var retval: ?*ID3D11ShaderReflectionConstantBuffer = undefined;
                @as(*const ID3D11FunctionReflection.VTable, @ptrCast(self.vtable)).GetConstantBufferByName(@as(*const ID3D11FunctionReflection, @ptrCast(self)), name_, &retval);
                return retval;
            }
            pub inline fn getResourceBindingDesc(self: *const T, resource_index_: u32, p_desc_: ?*D3D11_SHADER_INPUT_BIND_DESC) HRESULT {
                return @as(*const ID3D11FunctionReflection.VTable, @ptrCast(self.vtable)).GetResourceBindingDesc(@as(*const ID3D11FunctionReflection, @ptrCast(self)), resource_index_, p_desc_);
            }
            pub inline fn getVariableByName(self: *const T, name_: ?[*:0]const u8) ?*ID3D11ShaderReflectionVariable {
                var retval: ?*ID3D11ShaderReflectionVariable = undefined;
                @as(*const ID3D11FunctionReflection.VTable, @ptrCast(self.vtable)).GetVariableByName(@as(*const ID3D11FunctionReflection, @ptrCast(self)), name_, &retval);
                return retval;
            }
            pub inline fn getResourceBindingDescByName(self: *const T, name_: ?[*:0]const u8, p_desc_: ?*D3D11_SHADER_INPUT_BIND_DESC) HRESULT {
                return @as(*const ID3D11FunctionReflection.VTable, @ptrCast(self.vtable)).GetResourceBindingDescByName(@as(*const ID3D11FunctionReflection, @ptrCast(self)), name_, p_desc_);
            }
            pub inline fn getFunctionParameter(self: *const T, parameter_index_: i32) ?*ID3D11FunctionParameterReflection {
                var retval: ?*ID3D11FunctionParameterReflection = undefined;
                @as(*const ID3D11FunctionReflection.VTable, @ptrCast(self.vtable)).GetFunctionParameter(@as(*const ID3D11FunctionReflection, @ptrCast(self)), parameter_index_, &retval);
                return retval;
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// This COM type is Agile, not sure what that means
const IID_ID3D11FunctionParameterReflection_Value = Guid.initString("42757488-334f-47fe-982e-1a65d08cc462");
pub const IID_ID3D11FunctionParameterReflection = &IID_ID3D11FunctionParameterReflection_Value;
pub const ID3D11FunctionParameterReflection = extern struct {
    pub const VTable = extern struct {
        GetDesc: *const fn (
            self: *const ID3D11FunctionParameterReflection,
            p_desc: ?*D3D11_PARAMETER_DESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub inline fn getDesc(self: *const T, p_desc_: ?*D3D11_PARAMETER_DESC) HRESULT {
                return @as(*const ID3D11FunctionParameterReflection.VTable, @ptrCast(self.vtable)).GetDesc(@as(*const ID3D11FunctionParameterReflection, @ptrCast(self)), p_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// This COM type is Agile, not sure what that means
const IID_ID3D11ModuleInstance_Value = Guid.initString("469e07f7-045a-48d5-aa12-68a478cdf75d");
pub const IID_ID3D11ModuleInstance = &IID_ID3D11ModuleInstance_Value;
pub const ID3D11ModuleInstance = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BindConstantBuffer: *const fn (
            self: *const ID3D11ModuleInstance,
            u_src_slot: u32,
            u_dst_slot: u32,
            cb_dst_offset: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindConstantBufferByName: *const fn (
            self: *const ID3D11ModuleInstance,
            p_name: ?[*:0]const u8,
            u_dst_slot: u32,
            cb_dst_offset: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindResource: *const fn (
            self: *const ID3D11ModuleInstance,
            u_src_slot: u32,
            u_dst_slot: u32,
            u_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindResourceByName: *const fn (
            self: *const ID3D11ModuleInstance,
            p_name: ?[*:0]const u8,
            u_dst_slot: u32,
            u_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindSampler: *const fn (
            self: *const ID3D11ModuleInstance,
            u_src_slot: u32,
            u_dst_slot: u32,
            u_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindSamplerByName: *const fn (
            self: *const ID3D11ModuleInstance,
            p_name: ?[*:0]const u8,
            u_dst_slot: u32,
            u_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindUnorderedAccessView: *const fn (
            self: *const ID3D11ModuleInstance,
            u_src_slot: u32,
            u_dst_slot: u32,
            u_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindUnorderedAccessViewByName: *const fn (
            self: *const ID3D11ModuleInstance,
            p_name: ?[*:0]const u8,
            u_dst_slot: u32,
            u_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindResourceAsUnorderedAccessView: *const fn (
            self: *const ID3D11ModuleInstance,
            u_src_srv_slot: u32,
            u_dst_uav_slot: u32,
            u_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindResourceAsUnorderedAccessViewByName: *const fn (
            self: *const ID3D11ModuleInstance,
            p_srv_name: ?[*:0]const u8,
            u_dst_uav_slot: u32,
            u_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn bindConstantBuffer(self: *const T, u_src_slot_: u32, u_dst_slot_: u32, cb_dst_offset_: u32) HRESULT {
                return @as(*const ID3D11ModuleInstance.VTable, @ptrCast(self.vtable)).BindConstantBuffer(@as(*const ID3D11ModuleInstance, @ptrCast(self)), u_src_slot_, u_dst_slot_, cb_dst_offset_);
            }
            pub inline fn bindConstantBufferByName(self: *const T, p_name_: ?[*:0]const u8, u_dst_slot_: u32, cb_dst_offset_: u32) HRESULT {
                return @as(*const ID3D11ModuleInstance.VTable, @ptrCast(self.vtable)).BindConstantBufferByName(@as(*const ID3D11ModuleInstance, @ptrCast(self)), p_name_, u_dst_slot_, cb_dst_offset_);
            }
            pub inline fn bindResource(self: *const T, u_src_slot_: u32, u_dst_slot_: u32, u_count_: u32) HRESULT {
                return @as(*const ID3D11ModuleInstance.VTable, @ptrCast(self.vtable)).BindResource(@as(*const ID3D11ModuleInstance, @ptrCast(self)), u_src_slot_, u_dst_slot_, u_count_);
            }
            pub inline fn bindResourceByName(self: *const T, p_name_: ?[*:0]const u8, u_dst_slot_: u32, u_count_: u32) HRESULT {
                return @as(*const ID3D11ModuleInstance.VTable, @ptrCast(self.vtable)).BindResourceByName(@as(*const ID3D11ModuleInstance, @ptrCast(self)), p_name_, u_dst_slot_, u_count_);
            }
            pub inline fn bindSampler(self: *const T, u_src_slot_: u32, u_dst_slot_: u32, u_count_: u32) HRESULT {
                return @as(*const ID3D11ModuleInstance.VTable, @ptrCast(self.vtable)).BindSampler(@as(*const ID3D11ModuleInstance, @ptrCast(self)), u_src_slot_, u_dst_slot_, u_count_);
            }
            pub inline fn bindSamplerByName(self: *const T, p_name_: ?[*:0]const u8, u_dst_slot_: u32, u_count_: u32) HRESULT {
                return @as(*const ID3D11ModuleInstance.VTable, @ptrCast(self.vtable)).BindSamplerByName(@as(*const ID3D11ModuleInstance, @ptrCast(self)), p_name_, u_dst_slot_, u_count_);
            }
            pub inline fn bindUnorderedAccessView(self: *const T, u_src_slot_: u32, u_dst_slot_: u32, u_count_: u32) HRESULT {
                return @as(*const ID3D11ModuleInstance.VTable, @ptrCast(self.vtable)).BindUnorderedAccessView(@as(*const ID3D11ModuleInstance, @ptrCast(self)), u_src_slot_, u_dst_slot_, u_count_);
            }
            pub inline fn bindUnorderedAccessViewByName(self: *const T, p_name_: ?[*:0]const u8, u_dst_slot_: u32, u_count_: u32) HRESULT {
                return @as(*const ID3D11ModuleInstance.VTable, @ptrCast(self.vtable)).BindUnorderedAccessViewByName(@as(*const ID3D11ModuleInstance, @ptrCast(self)), p_name_, u_dst_slot_, u_count_);
            }
            pub inline fn bindResourceAsUnorderedAccessView(self: *const T, u_src_srv_slot_: u32, u_dst_uav_slot_: u32, u_count_: u32) HRESULT {
                return @as(*const ID3D11ModuleInstance.VTable, @ptrCast(self.vtable)).BindResourceAsUnorderedAccessView(@as(*const ID3D11ModuleInstance, @ptrCast(self)), u_src_srv_slot_, u_dst_uav_slot_, u_count_);
            }
            pub inline fn bindResourceAsUnorderedAccessViewByName(self: *const T, p_srv_name_: ?[*:0]const u8, u_dst_uav_slot_: u32, u_count_: u32) HRESULT {
                return @as(*const ID3D11ModuleInstance.VTable, @ptrCast(self.vtable)).BindResourceAsUnorderedAccessViewByName(@as(*const ID3D11ModuleInstance, @ptrCast(self)), p_srv_name_, u_dst_uav_slot_, u_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// This COM type is Agile, not sure what that means
const IID_ID3D11Module_Value = Guid.initString("cac701ee-80fc-4122-8242-10b39c8cec34");
pub const IID_ID3D11Module = &IID_ID3D11Module_Value;
pub const ID3D11Module = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateInstance: *const fn (
            self: *const ID3D11Module,
            p_namespace: ?[*:0]const u8,
            pp_module_instance: ?*?*ID3D11ModuleInstance,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createInstance(self: *const T, p_namespace_: ?[*:0]const u8, pp_module_instance_: ?*?*ID3D11ModuleInstance) HRESULT {
                return @as(*const ID3D11Module.VTable, @ptrCast(self.vtable)).CreateInstance(@as(*const ID3D11Module, @ptrCast(self)), p_namespace_, pp_module_instance_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// This COM type is Agile, not sure what that means
const IID_ID3D11Linker_Value = Guid.initString("59a6cd0e-e10d-4c1f-88c0-63aba1daf30e");
pub const IID_ID3D11Linker = &IID_ID3D11Linker_Value;
pub const ID3D11Linker = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Link: *const fn (
            self: *const ID3D11Linker,
            p_entry: ?*ID3D11ModuleInstance,
            p_entry_name: ?[*:0]const u8,
            p_target_name: ?[*:0]const u8,
            u_flags: u32,
            pp_shader_blob: ?*?*ID3DBlob,
            pp_error_buffer: ?*?*ID3DBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UseLibrary: *const fn (
            self: *const ID3D11Linker,
            p_library_m_i: ?*ID3D11ModuleInstance,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddClipPlaneFromCBuffer: *const fn (
            self: *const ID3D11Linker,
            u_c_buffer_slot: u32,
            u_c_buffer_entry: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn link(self: *const T, p_entry_: ?*ID3D11ModuleInstance, p_entry_name_: ?[*:0]const u8, p_target_name_: ?[*:0]const u8, u_flags_: u32, pp_shader_blob_: ?*?*ID3DBlob, pp_error_buffer_: ?*?*ID3DBlob) HRESULT {
                return @as(*const ID3D11Linker.VTable, @ptrCast(self.vtable)).Link(@as(*const ID3D11Linker, @ptrCast(self)), p_entry_, p_entry_name_, p_target_name_, u_flags_, pp_shader_blob_, pp_error_buffer_);
            }
            pub inline fn useLibrary(self: *const T, p_library_m_i_: ?*ID3D11ModuleInstance) HRESULT {
                return @as(*const ID3D11Linker.VTable, @ptrCast(self.vtable)).UseLibrary(@as(*const ID3D11Linker, @ptrCast(self)), p_library_m_i_);
            }
            pub inline fn addClipPlaneFromCBuffer(self: *const T, u_c_buffer_slot_: u32, u_c_buffer_entry_: u32) HRESULT {
                return @as(*const ID3D11Linker.VTable, @ptrCast(self.vtable)).AddClipPlaneFromCBuffer(@as(*const ID3D11Linker, @ptrCast(self)), u_c_buffer_slot_, u_c_buffer_entry_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// This COM type is Agile, not sure what that means
const IID_ID3D11LinkingNode_Value = Guid.initString("d80dd70c-8d2f-4751-94a1-03c79b3556db");
pub const IID_ID3D11LinkingNode = &IID_ID3D11LinkingNode_Value;
pub const ID3D11LinkingNode = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// This COM type is Agile, not sure what that means
const IID_ID3D11FunctionLinkingGraph_Value = Guid.initString("54133220-1ce8-43d3-8236-9855c5ceecff");
pub const IID_ID3D11FunctionLinkingGraph = &IID_ID3D11FunctionLinkingGraph_Value;
pub const ID3D11FunctionLinkingGraph = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateModuleInstance: *const fn (
            self: *const ID3D11FunctionLinkingGraph,
            pp_module_instance: ?*?*ID3D11ModuleInstance,
            pp_error_buffer: ?*?*ID3DBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInputSignature: *const fn (
            self: *const ID3D11FunctionLinkingGraph,
            p_input_parameters: [*]const D3D11_PARAMETER_DESC,
            c_input_parameters: u32,
            pp_input_node: ?*?*ID3D11LinkingNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutputSignature: *const fn (
            self: *const ID3D11FunctionLinkingGraph,
            p_output_parameters: [*]const D3D11_PARAMETER_DESC,
            c_output_parameters: u32,
            pp_output_node: ?*?*ID3D11LinkingNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CallFunction: *const fn (
            self: *const ID3D11FunctionLinkingGraph,
            p_module_instance_namespace: ?[*:0]const u8,
            p_module_with_function_prototype: ?*ID3D11Module,
            p_function_name: ?[*:0]const u8,
            pp_call_node: ?*?*ID3D11LinkingNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PassValue: *const fn (
            self: *const ID3D11FunctionLinkingGraph,
            p_src_node: ?*ID3D11LinkingNode,
            src_parameter_index: i32,
            p_dst_node: ?*ID3D11LinkingNode,
            dst_parameter_index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PassValueWithSwizzle: *const fn (
            self: *const ID3D11FunctionLinkingGraph,
            p_src_node: ?*ID3D11LinkingNode,
            src_parameter_index: i32,
            p_src_swizzle: ?[*:0]const u8,
            p_dst_node: ?*ID3D11LinkingNode,
            dst_parameter_index: i32,
            p_dst_swizzle: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastError: *const fn (
            self: *const ID3D11FunctionLinkingGraph,
            pp_error_buffer: ?*?*ID3DBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateHlsl: *const fn (
            self: *const ID3D11FunctionLinkingGraph,
            u_flags: u32,
            pp_buffer: ?*?*ID3DBlob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createModuleInstance(self: *const T, pp_module_instance_: ?*?*ID3D11ModuleInstance, pp_error_buffer_: ?*?*ID3DBlob) HRESULT {
                return @as(*const ID3D11FunctionLinkingGraph.VTable, @ptrCast(self.vtable)).CreateModuleInstance(@as(*const ID3D11FunctionLinkingGraph, @ptrCast(self)), pp_module_instance_, pp_error_buffer_);
            }
            pub inline fn setInputSignature(self: *const T, p_input_parameters_: [*]const D3D11_PARAMETER_DESC, c_input_parameters_: u32, pp_input_node_: ?*?*ID3D11LinkingNode) HRESULT {
                return @as(*const ID3D11FunctionLinkingGraph.VTable, @ptrCast(self.vtable)).SetInputSignature(@as(*const ID3D11FunctionLinkingGraph, @ptrCast(self)), p_input_parameters_, c_input_parameters_, pp_input_node_);
            }
            pub inline fn setOutputSignature(self: *const T, p_output_parameters_: [*]const D3D11_PARAMETER_DESC, c_output_parameters_: u32, pp_output_node_: ?*?*ID3D11LinkingNode) HRESULT {
                return @as(*const ID3D11FunctionLinkingGraph.VTable, @ptrCast(self.vtable)).SetOutputSignature(@as(*const ID3D11FunctionLinkingGraph, @ptrCast(self)), p_output_parameters_, c_output_parameters_, pp_output_node_);
            }
            pub inline fn callFunction(self: *const T, p_module_instance_namespace_: ?[*:0]const u8, p_module_with_function_prototype_: ?*ID3D11Module, p_function_name_: ?[*:0]const u8, pp_call_node_: ?*?*ID3D11LinkingNode) HRESULT {
                return @as(*const ID3D11FunctionLinkingGraph.VTable, @ptrCast(self.vtable)).CallFunction(@as(*const ID3D11FunctionLinkingGraph, @ptrCast(self)), p_module_instance_namespace_, p_module_with_function_prototype_, p_function_name_, pp_call_node_);
            }
            pub inline fn passValue(self: *const T, p_src_node_: ?*ID3D11LinkingNode, src_parameter_index_: i32, p_dst_node_: ?*ID3D11LinkingNode, dst_parameter_index_: i32) HRESULT {
                return @as(*const ID3D11FunctionLinkingGraph.VTable, @ptrCast(self.vtable)).PassValue(@as(*const ID3D11FunctionLinkingGraph, @ptrCast(self)), p_src_node_, src_parameter_index_, p_dst_node_, dst_parameter_index_);
            }
            pub inline fn passValueWithSwizzle(self: *const T, p_src_node_: ?*ID3D11LinkingNode, src_parameter_index_: i32, p_src_swizzle_: ?[*:0]const u8, p_dst_node_: ?*ID3D11LinkingNode, dst_parameter_index_: i32, p_dst_swizzle_: ?[*:0]const u8) HRESULT {
                return @as(*const ID3D11FunctionLinkingGraph.VTable, @ptrCast(self.vtable)).PassValueWithSwizzle(@as(*const ID3D11FunctionLinkingGraph, @ptrCast(self)), p_src_node_, src_parameter_index_, p_src_swizzle_, p_dst_node_, dst_parameter_index_, p_dst_swizzle_);
            }
            pub inline fn getLastError(self: *const T, pp_error_buffer_: ?*?*ID3DBlob) HRESULT {
                return @as(*const ID3D11FunctionLinkingGraph.VTable, @ptrCast(self.vtable)).GetLastError(@as(*const ID3D11FunctionLinkingGraph, @ptrCast(self)), pp_error_buffer_);
            }
            pub inline fn generateHlsl(self: *const T, u_flags_: u32, pp_buffer_: ?*?*ID3DBlob) HRESULT {
                return @as(*const ID3D11FunctionLinkingGraph.VTable, @ptrCast(self.vtable)).GenerateHlsl(@as(*const ID3D11FunctionLinkingGraph, @ptrCast(self)), u_flags_, pp_buffer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3D11_SHADER_TYPE = enum(i32) {
    VERTEX_SHADER = 1,
    HULL_SHADER = 2,
    DOMAIN_SHADER = 3,
    GEOMETRY_SHADER = 4,
    PIXEL_SHADER = 5,
    COMPUTE_SHADER = 6,
};
pub const D3D11_VERTEX_SHADER = D3D11_SHADER_TYPE.VERTEX_SHADER;
pub const D3D11_HULL_SHADER = D3D11_SHADER_TYPE.HULL_SHADER;
pub const D3D11_DOMAIN_SHADER = D3D11_SHADER_TYPE.DOMAIN_SHADER;
pub const D3D11_GEOMETRY_SHADER = D3D11_SHADER_TYPE.GEOMETRY_SHADER;
pub const D3D11_PIXEL_SHADER = D3D11_SHADER_TYPE.PIXEL_SHADER;
pub const D3D11_COMPUTE_SHADER = D3D11_SHADER_TYPE.COMPUTE_SHADER;

pub const D3D11_VERTEX_SHADER_TRACE_DESC = extern struct {
    Invocation: u64,
};

pub const D3D11_HULL_SHADER_TRACE_DESC = extern struct {
    Invocation: u64,
};

pub const D3D11_DOMAIN_SHADER_TRACE_DESC = extern struct {
    Invocation: u64,
};

pub const D3D11_GEOMETRY_SHADER_TRACE_DESC = extern struct {
    Invocation: u64,
};

pub const D3D11_PIXEL_SHADER_TRACE_DESC = extern struct {
    Invocation: u64,
    X: i32,
    Y: i32,
    SampleMask: u64,
};

pub const D3D11_COMPUTE_SHADER_TRACE_DESC = extern struct {
    Invocation: u64,
    ThreadIDInGroup: [3]u32,
    ThreadGroupID: [3]u32,
};

pub const D3D11_SHADER_TRACE_DESC = extern struct {
    Type: D3D11_SHADER_TYPE,
    Flags: u32,
    Anonymous: extern union {
        VertexShaderTraceDesc: D3D11_VERTEX_SHADER_TRACE_DESC,
        HullShaderTraceDesc: D3D11_HULL_SHADER_TRACE_DESC,
        DomainShaderTraceDesc: D3D11_DOMAIN_SHADER_TRACE_DESC,
        GeometryShaderTraceDesc: D3D11_GEOMETRY_SHADER_TRACE_DESC,
        PixelShaderTraceDesc: D3D11_PIXEL_SHADER_TRACE_DESC,
        ComputeShaderTraceDesc: D3D11_COMPUTE_SHADER_TRACE_DESC,
    },
};

pub const D3D11_TRACE_GS_INPUT_PRIMITIVE = enum(i32) {
    UNDEFINED = 0,
    POINT = 1,
    LINE = 2,
    TRIANGLE = 3,
    LINE_ADJ = 6,
    TRIANGLE_ADJ = 7,
};
pub const D3D11_TRACE_GS_INPUT_PRIMITIVE_UNDEFINED = D3D11_TRACE_GS_INPUT_PRIMITIVE.UNDEFINED;
pub const D3D11_TRACE_GS_INPUT_PRIMITIVE_POINT = D3D11_TRACE_GS_INPUT_PRIMITIVE.POINT;
pub const D3D11_TRACE_GS_INPUT_PRIMITIVE_LINE = D3D11_TRACE_GS_INPUT_PRIMITIVE.LINE;
pub const D3D11_TRACE_GS_INPUT_PRIMITIVE_TRIANGLE = D3D11_TRACE_GS_INPUT_PRIMITIVE.TRIANGLE;
pub const D3D11_TRACE_GS_INPUT_PRIMITIVE_LINE_ADJ = D3D11_TRACE_GS_INPUT_PRIMITIVE.LINE_ADJ;
pub const D3D11_TRACE_GS_INPUT_PRIMITIVE_TRIANGLE_ADJ = D3D11_TRACE_GS_INPUT_PRIMITIVE.TRIANGLE_ADJ;

pub const D3D11_TRACE_STATS = extern struct {
    TraceDesc: D3D11_SHADER_TRACE_DESC,
    NumInvocationsInStamp: u8,
    TargetStampIndex: u8,
    NumTraceSteps: u32,
    InputMask: [32]u8,
    OutputMask: [32]u8,
    NumTemps: u16,
    MaxIndexableTempIndex: u16,
    IndexableTempSize: [4096]u16,
    ImmediateConstantBufferSize: u16,
    PixelPosition: [8]u32,
    PixelCoverageMask: [4]u64,
    PixelDiscardedMask: [4]u64,
    PixelCoverageMaskAfterShader: [4]u64,
    PixelCoverageMaskAfterA2CSampleMask: [4]u64,
    PixelCoverageMaskAfterA2CSampleMaskDepth: [4]u64,
    PixelCoverageMaskAfterA2CSampleMaskDepthStencil: [4]u64,
    PSOutputsDepth: BOOL,
    PSOutputsMask: BOOL,
    GSInputPrimitive: D3D11_TRACE_GS_INPUT_PRIMITIVE,
    GSInputsPrimitiveID: BOOL,
    HSOutputPatchConstantMask: [32]u8,
    DSInputPatchConstantMask: [32]u8,
};

pub const D3D11_TRACE_VALUE = extern struct {
    Bits: [4]u32,
    ValidMask: u8,
};

pub const D3D11_TRACE_REGISTER_TYPE = enum(i32) {
    OUTPUT_NULL_REGISTER = 0,
    INPUT_REGISTER = 1,
    INPUT_PRIMITIVE_ID_REGISTER = 2,
    IMMEDIATE_CONSTANT_BUFFER = 3,
    TEMP_REGISTER = 4,
    INDEXABLE_TEMP_REGISTER = 5,
    OUTPUT_REGISTER = 6,
    OUTPUT_DEPTH_REGISTER = 7,
    CONSTANT_BUFFER = 8,
    IMMEDIATE32 = 9,
    SAMPLER = 10,
    RESOURCE = 11,
    RASTERIZER = 12,
    OUTPUT_COVERAGE_MASK = 13,
    STREAM = 14,
    THIS_POINTER = 15,
    OUTPUT_CONTROL_POINT_ID_REGISTER = 16,
    INPUT_FORK_INSTANCE_ID_REGISTER = 17,
    INPUT_JOIN_INSTANCE_ID_REGISTER = 18,
    INPUT_CONTROL_POINT_REGISTER = 19,
    OUTPUT_CONTROL_POINT_REGISTER = 20,
    INPUT_PATCH_CONSTANT_REGISTER = 21,
    INPUT_DOMAIN_POINT_REGISTER = 22,
    UNORDERED_ACCESS_VIEW = 23,
    THREAD_GROUP_SHARED_MEMORY = 24,
    INPUT_THREAD_ID_REGISTER = 25,
    INPUT_THREAD_GROUP_ID_REGISTER = 26,
    INPUT_THREAD_ID_IN_GROUP_REGISTER = 27,
    INPUT_COVERAGE_MASK_REGISTER = 28,
    INPUT_THREAD_ID_IN_GROUP_FLATTENED_REGISTER = 29,
    INPUT_GS_INSTANCE_ID_REGISTER = 30,
    OUTPUT_DEPTH_GREATER_EQUAL_REGISTER = 31,
    OUTPUT_DEPTH_LESS_EQUAL_REGISTER = 32,
    IMMEDIATE64 = 33,
    INPUT_CYCLE_COUNTER_REGISTER = 34,
    INTERFACE_POINTER = 35,
};
pub const D3D11_TRACE_OUTPUT_NULL_REGISTER = D3D11_TRACE_REGISTER_TYPE.OUTPUT_NULL_REGISTER;
pub const D3D11_TRACE_INPUT_REGISTER = D3D11_TRACE_REGISTER_TYPE.INPUT_REGISTER;
pub const D3D11_TRACE_INPUT_PRIMITIVE_ID_REGISTER = D3D11_TRACE_REGISTER_TYPE.INPUT_PRIMITIVE_ID_REGISTER;
pub const D3D11_TRACE_IMMEDIATE_CONSTANT_BUFFER = D3D11_TRACE_REGISTER_TYPE.IMMEDIATE_CONSTANT_BUFFER;
pub const D3D11_TRACE_TEMP_REGISTER = D3D11_TRACE_REGISTER_TYPE.TEMP_REGISTER;
pub const D3D11_TRACE_INDEXABLE_TEMP_REGISTER = D3D11_TRACE_REGISTER_TYPE.INDEXABLE_TEMP_REGISTER;
pub const D3D11_TRACE_OUTPUT_REGISTER = D3D11_TRACE_REGISTER_TYPE.OUTPUT_REGISTER;
pub const D3D11_TRACE_OUTPUT_DEPTH_REGISTER = D3D11_TRACE_REGISTER_TYPE.OUTPUT_DEPTH_REGISTER;
pub const D3D11_TRACE_CONSTANT_BUFFER = D3D11_TRACE_REGISTER_TYPE.CONSTANT_BUFFER;
pub const D3D11_TRACE_IMMEDIATE32 = D3D11_TRACE_REGISTER_TYPE.IMMEDIATE32;
pub const D3D11_TRACE_SAMPLER = D3D11_TRACE_REGISTER_TYPE.SAMPLER;
pub const D3D11_TRACE_RESOURCE = D3D11_TRACE_REGISTER_TYPE.RESOURCE;
pub const D3D11_TRACE_RASTERIZER = D3D11_TRACE_REGISTER_TYPE.RASTERIZER;
pub const D3D11_TRACE_OUTPUT_COVERAGE_MASK = D3D11_TRACE_REGISTER_TYPE.OUTPUT_COVERAGE_MASK;
pub const D3D11_TRACE_STREAM = D3D11_TRACE_REGISTER_TYPE.STREAM;
pub const D3D11_TRACE_THIS_POINTER = D3D11_TRACE_REGISTER_TYPE.THIS_POINTER;
pub const D3D11_TRACE_OUTPUT_CONTROL_POINT_ID_REGISTER = D3D11_TRACE_REGISTER_TYPE.OUTPUT_CONTROL_POINT_ID_REGISTER;
pub const D3D11_TRACE_INPUT_FORK_INSTANCE_ID_REGISTER = D3D11_TRACE_REGISTER_TYPE.INPUT_FORK_INSTANCE_ID_REGISTER;
pub const D3D11_TRACE_INPUT_JOIN_INSTANCE_ID_REGISTER = D3D11_TRACE_REGISTER_TYPE.INPUT_JOIN_INSTANCE_ID_REGISTER;
pub const D3D11_TRACE_INPUT_CONTROL_POINT_REGISTER = D3D11_TRACE_REGISTER_TYPE.INPUT_CONTROL_POINT_REGISTER;
pub const D3D11_TRACE_OUTPUT_CONTROL_POINT_REGISTER = D3D11_TRACE_REGISTER_TYPE.OUTPUT_CONTROL_POINT_REGISTER;
pub const D3D11_TRACE_INPUT_PATCH_CONSTANT_REGISTER = D3D11_TRACE_REGISTER_TYPE.INPUT_PATCH_CONSTANT_REGISTER;
pub const D3D11_TRACE_INPUT_DOMAIN_POINT_REGISTER = D3D11_TRACE_REGISTER_TYPE.INPUT_DOMAIN_POINT_REGISTER;
pub const D3D11_TRACE_UNORDERED_ACCESS_VIEW = D3D11_TRACE_REGISTER_TYPE.UNORDERED_ACCESS_VIEW;
pub const D3D11_TRACE_THREAD_GROUP_SHARED_MEMORY = D3D11_TRACE_REGISTER_TYPE.THREAD_GROUP_SHARED_MEMORY;
pub const D3D11_TRACE_INPUT_THREAD_ID_REGISTER = D3D11_TRACE_REGISTER_TYPE.INPUT_THREAD_ID_REGISTER;
pub const D3D11_TRACE_INPUT_THREAD_GROUP_ID_REGISTER = D3D11_TRACE_REGISTER_TYPE.INPUT_THREAD_GROUP_ID_REGISTER;
pub const D3D11_TRACE_INPUT_THREAD_ID_IN_GROUP_REGISTER = D3D11_TRACE_REGISTER_TYPE.INPUT_THREAD_ID_IN_GROUP_REGISTER;
pub const D3D11_TRACE_INPUT_COVERAGE_MASK_REGISTER = D3D11_TRACE_REGISTER_TYPE.INPUT_COVERAGE_MASK_REGISTER;
pub const D3D11_TRACE_INPUT_THREAD_ID_IN_GROUP_FLATTENED_REGISTER = D3D11_TRACE_REGISTER_TYPE.INPUT_THREAD_ID_IN_GROUP_FLATTENED_REGISTER;
pub const D3D11_TRACE_INPUT_GS_INSTANCE_ID_REGISTER = D3D11_TRACE_REGISTER_TYPE.INPUT_GS_INSTANCE_ID_REGISTER;
pub const D3D11_TRACE_OUTPUT_DEPTH_GREATER_EQUAL_REGISTER = D3D11_TRACE_REGISTER_TYPE.OUTPUT_DEPTH_GREATER_EQUAL_REGISTER;
pub const D3D11_TRACE_OUTPUT_DEPTH_LESS_EQUAL_REGISTER = D3D11_TRACE_REGISTER_TYPE.OUTPUT_DEPTH_LESS_EQUAL_REGISTER;
pub const D3D11_TRACE_IMMEDIATE64 = D3D11_TRACE_REGISTER_TYPE.IMMEDIATE64;
pub const D3D11_TRACE_INPUT_CYCLE_COUNTER_REGISTER = D3D11_TRACE_REGISTER_TYPE.INPUT_CYCLE_COUNTER_REGISTER;
pub const D3D11_TRACE_INTERFACE_POINTER = D3D11_TRACE_REGISTER_TYPE.INTERFACE_POINTER;

pub const D3D11_TRACE_REGISTER = extern struct {
    RegType: D3D11_TRACE_REGISTER_TYPE,
    Anonymous: extern union {
        Index1D: u16,
        Index2D: [2]u16,
    },
    OperandIndex: u8,
    Flags: u8,
};

pub const D3D11_TRACE_STEP = extern struct {
    ID: u32,
    InstructionActive: BOOL,
    NumRegistersWritten: u8,
    NumRegistersRead: u8,
    MiscOperations: u16,
    OpcodeType: u32,
    CurrentGlobalCycle: u64,
};

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3D11ShaderTrace_Value = Guid.initString("36b013e6-2811-4845-baa7-d623fe0df104");
pub const IID_ID3D11ShaderTrace = &IID_ID3D11ShaderTrace_Value;
pub const ID3D11ShaderTrace = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TraceReady: *const fn (
            self: *const ID3D11ShaderTrace,
            p_test_count: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetTrace: *const fn (
            self: *const ID3D11ShaderTrace,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetTraceStats: *const fn (
            self: *const ID3D11ShaderTrace,
            p_trace_stats: ?*D3D11_TRACE_STATS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PSSelectStamp: *const fn (
            self: *const ID3D11ShaderTrace,
            stamp_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInitialRegisterContents: *const fn (
            self: *const ID3D11ShaderTrace,
            p_register: ?*D3D11_TRACE_REGISTER,
            p_value: ?*D3D11_TRACE_VALUE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStep: *const fn (
            self: *const ID3D11ShaderTrace,
            step_index: u32,
            p_trace_step: ?*D3D11_TRACE_STEP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWrittenRegister: *const fn (
            self: *const ID3D11ShaderTrace,
            step_index: u32,
            written_register_index: u32,
            p_register: ?*D3D11_TRACE_REGISTER,
            p_value: ?*D3D11_TRACE_VALUE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReadRegister: *const fn (
            self: *const ID3D11ShaderTrace,
            step_index: u32,
            read_register_index: u32,
            p_register: ?*D3D11_TRACE_REGISTER,
            p_value: ?*D3D11_TRACE_VALUE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn traceReady(self: *const T, p_test_count_: ?*u64) HRESULT {
                return @as(*const ID3D11ShaderTrace.VTable, @ptrCast(self.vtable)).TraceReady(@as(*const ID3D11ShaderTrace, @ptrCast(self)), p_test_count_);
            }
            pub inline fn resetTrace(self: *const T) void {
                return @as(*const ID3D11ShaderTrace.VTable, @ptrCast(self.vtable)).ResetTrace(@as(*const ID3D11ShaderTrace, @ptrCast(self)));
            }
            pub inline fn getTraceStats(self: *const T, p_trace_stats_: ?*D3D11_TRACE_STATS) HRESULT {
                return @as(*const ID3D11ShaderTrace.VTable, @ptrCast(self.vtable)).GetTraceStats(@as(*const ID3D11ShaderTrace, @ptrCast(self)), p_trace_stats_);
            }
            pub inline fn psSelectStamp(self: *const T, stamp_index_: u32) HRESULT {
                return @as(*const ID3D11ShaderTrace.VTable, @ptrCast(self.vtable)).PSSelectStamp(@as(*const ID3D11ShaderTrace, @ptrCast(self)), stamp_index_);
            }
            pub inline fn getInitialRegisterContents(self: *const T, p_register_: ?*D3D11_TRACE_REGISTER, p_value_: ?*D3D11_TRACE_VALUE) HRESULT {
                return @as(*const ID3D11ShaderTrace.VTable, @ptrCast(self.vtable)).GetInitialRegisterContents(@as(*const ID3D11ShaderTrace, @ptrCast(self)), p_register_, p_value_);
            }
            pub inline fn getStep(self: *const T, step_index_: u32, p_trace_step_: ?*D3D11_TRACE_STEP) HRESULT {
                return @as(*const ID3D11ShaderTrace.VTable, @ptrCast(self.vtable)).GetStep(@as(*const ID3D11ShaderTrace, @ptrCast(self)), step_index_, p_trace_step_);
            }
            pub inline fn getWrittenRegister(self: *const T, step_index_: u32, written_register_index_: u32, p_register_: ?*D3D11_TRACE_REGISTER, p_value_: ?*D3D11_TRACE_VALUE) HRESULT {
                return @as(*const ID3D11ShaderTrace.VTable, @ptrCast(self.vtable)).GetWrittenRegister(@as(*const ID3D11ShaderTrace, @ptrCast(self)), step_index_, written_register_index_, p_register_, p_value_);
            }
            pub inline fn getReadRegister(self: *const T, step_index_: u32, read_register_index_: u32, p_register_: ?*D3D11_TRACE_REGISTER, p_value_: ?*D3D11_TRACE_VALUE) HRESULT {
                return @as(*const ID3D11ShaderTrace.VTable, @ptrCast(self.vtable)).GetReadRegister(@as(*const ID3D11ShaderTrace, @ptrCast(self)), step_index_, read_register_index_, p_register_, p_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
// This COM type is Agile, not sure what that means
const IID_ID3D11ShaderTraceFactory_Value = Guid.initString("1fbad429-66ab-41cc-9617-667ac10e4459");
pub const IID_ID3D11ShaderTraceFactory = &IID_ID3D11ShaderTraceFactory_Value;
pub const ID3D11ShaderTraceFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateShaderTrace: *const fn (
            self: *const ID3D11ShaderTraceFactory,
            p_shader: ?*IUnknown,
            p_trace_desc: ?*D3D11_SHADER_TRACE_DESC,
            pp_shader_trace: ?*?*ID3D11ShaderTrace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createShaderTrace(self: *const T, p_shader_: ?*IUnknown, p_trace_desc_: ?*D3D11_SHADER_TRACE_DESC, pp_shader_trace_: ?*?*ID3D11ShaderTrace) HRESULT {
                return @as(*const ID3D11ShaderTraceFactory.VTable, @ptrCast(self.vtable)).CreateShaderTrace(@as(*const ID3D11ShaderTraceFactory, @ptrCast(self)), p_shader_, p_trace_desc_, pp_shader_trace_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3DX11_SCAN_DATA_TYPE = enum(i32) {
    FLOAT = 1,
    INT = 2,
    UINT = 3,
};
pub const D3DX11_SCAN_DATA_TYPE_FLOAT = D3DX11_SCAN_DATA_TYPE.FLOAT;
pub const D3DX11_SCAN_DATA_TYPE_INT = D3DX11_SCAN_DATA_TYPE.INT;
pub const D3DX11_SCAN_DATA_TYPE_UINT = D3DX11_SCAN_DATA_TYPE.UINT;

pub const D3DX11_SCAN_OPCODE = enum(i32) {
    ADD = 1,
    MIN = 2,
    MAX = 3,
    MUL = 4,
    AND = 5,
    OR = 6,
    XOR = 7,
};
pub const D3DX11_SCAN_OPCODE_ADD = D3DX11_SCAN_OPCODE.ADD;
pub const D3DX11_SCAN_OPCODE_MIN = D3DX11_SCAN_OPCODE.MIN;
pub const D3DX11_SCAN_OPCODE_MAX = D3DX11_SCAN_OPCODE.MAX;
pub const D3DX11_SCAN_OPCODE_MUL = D3DX11_SCAN_OPCODE.MUL;
pub const D3DX11_SCAN_OPCODE_AND = D3DX11_SCAN_OPCODE.AND;
pub const D3DX11_SCAN_OPCODE_OR = D3DX11_SCAN_OPCODE.OR;
pub const D3DX11_SCAN_OPCODE_XOR = D3DX11_SCAN_OPCODE.XOR;

pub const D3DX11_SCAN_DIRECTION = enum(i32) {
    FORWARD = 1,
    BACKWARD = 2,
};
pub const D3DX11_SCAN_DIRECTION_FORWARD = D3DX11_SCAN_DIRECTION.FORWARD;
pub const D3DX11_SCAN_DIRECTION_BACKWARD = D3DX11_SCAN_DIRECTION.BACKWARD;

// This COM type is Agile, not sure what that means
const IID_ID3DX11Scan_Value = Guid.initString("5089b68f-e71d-4d38-be8e-f363b95a9405");
pub const IID_ID3DX11Scan = &IID_ID3DX11Scan_Value;
pub const ID3DX11Scan = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetScanDirection: *const fn (
            self: *const ID3DX11Scan,
            direction: D3DX11_SCAN_DIRECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Scan: *const fn (
            self: *const ID3DX11Scan,
            element_type: D3DX11_SCAN_DATA_TYPE,
            op_code: D3DX11_SCAN_OPCODE,
            element_scan_size: u32,
            p_src: ?*ID3D11UnorderedAccessView,
            p_dst: ?*ID3D11UnorderedAccessView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Multiscan: *const fn (
            self: *const ID3DX11Scan,
            element_type: D3DX11_SCAN_DATA_TYPE,
            op_code: D3DX11_SCAN_OPCODE,
            element_scan_size: u32,
            element_scan_pitch: u32,
            scan_count: u32,
            p_src: ?*ID3D11UnorderedAccessView,
            p_dst: ?*ID3D11UnorderedAccessView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setScanDirection(self: *const T, direction_: D3DX11_SCAN_DIRECTION) HRESULT {
                return @as(*const ID3DX11Scan.VTable, @ptrCast(self.vtable)).SetScanDirection(@as(*const ID3DX11Scan, @ptrCast(self)), direction_);
            }
            pub inline fn scan(self: *const T, element_type_: D3DX11_SCAN_DATA_TYPE, op_code_: D3DX11_SCAN_OPCODE, element_scan_size_: u32, p_src_: ?*ID3D11UnorderedAccessView, p_dst_: ?*ID3D11UnorderedAccessView) HRESULT {
                return @as(*const ID3DX11Scan.VTable, @ptrCast(self.vtable)).Scan(@as(*const ID3DX11Scan, @ptrCast(self)), element_type_, op_code_, element_scan_size_, p_src_, p_dst_);
            }
            pub inline fn multiscan(self: *const T, element_type_: D3DX11_SCAN_DATA_TYPE, op_code_: D3DX11_SCAN_OPCODE, element_scan_size_: u32, element_scan_pitch_: u32, scan_count_: u32, p_src_: ?*ID3D11UnorderedAccessView, p_dst_: ?*ID3D11UnorderedAccessView) HRESULT {
                return @as(*const ID3DX11Scan.VTable, @ptrCast(self.vtable)).Multiscan(@as(*const ID3DX11Scan, @ptrCast(self)), element_type_, op_code_, element_scan_size_, element_scan_pitch_, scan_count_, p_src_, p_dst_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// This COM type is Agile, not sure what that means
const IID_ID3DX11SegmentedScan_Value = Guid.initString("a915128c-d954-4c79-bfe1-64db923194d6");
pub const IID_ID3DX11SegmentedScan = &IID_ID3DX11SegmentedScan_Value;
pub const ID3DX11SegmentedScan = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetScanDirection: *const fn (
            self: *const ID3DX11SegmentedScan,
            direction: D3DX11_SCAN_DIRECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SegScan: *const fn (
            self: *const ID3DX11SegmentedScan,
            element_type: D3DX11_SCAN_DATA_TYPE,
            op_code: D3DX11_SCAN_OPCODE,
            element_scan_size: u32,
            p_src: ?*ID3D11UnorderedAccessView,
            p_src_element_flags: ?*ID3D11UnorderedAccessView,
            p_dst: ?*ID3D11UnorderedAccessView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setScanDirection(self: *const T, direction_: D3DX11_SCAN_DIRECTION) HRESULT {
                return @as(*const ID3DX11SegmentedScan.VTable, @ptrCast(self.vtable)).SetScanDirection(@as(*const ID3DX11SegmentedScan, @ptrCast(self)), direction_);
            }
            pub inline fn segScan(self: *const T, element_type_: D3DX11_SCAN_DATA_TYPE, op_code_: D3DX11_SCAN_OPCODE, element_scan_size_: u32, p_src_: ?*ID3D11UnorderedAccessView, p_src_element_flags_: ?*ID3D11UnorderedAccessView, p_dst_: ?*ID3D11UnorderedAccessView) HRESULT {
                return @as(*const ID3DX11SegmentedScan.VTable, @ptrCast(self.vtable)).SegScan(@as(*const ID3DX11SegmentedScan, @ptrCast(self)), element_type_, op_code_, element_scan_size_, p_src_, p_src_element_flags_, p_dst_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// This COM type is Agile, not sure what that means
const IID_ID3DX11FFT_Value = Guid.initString("b3f7a938-4c93-4310-a675-b30d6de50553");
pub const IID_ID3DX11FFT = &IID_ID3DX11FFT_Value;
pub const ID3DX11FFT = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetForwardScale: *const fn (
            self: *const ID3DX11FFT,
            forward_scale: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForwardScale: *const fn (
            self: *const ID3DX11FFT,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        SetInverseScale: *const fn (
            self: *const ID3DX11FFT,
            inverse_scale: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInverseScale: *const fn (
            self: *const ID3DX11FFT,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        AttachBuffersAndPrecompute: *const fn (
            self: *const ID3DX11FFT,
            num_temp_buffers: u32,
            pp_temp_buffers: [*]?*ID3D11UnorderedAccessView,
            num_precompute_buffers: u32,
            pp_precompute_buffer_sizes: [*]?*ID3D11UnorderedAccessView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ForwardTransform: *const fn (
            self: *const ID3DX11FFT,
            p_input_buffer: ?*ID3D11UnorderedAccessView,
            pp_output_buffer: ?*?*ID3D11UnorderedAccessView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InverseTransform: *const fn (
            self: *const ID3DX11FFT,
            p_input_buffer: ?*ID3D11UnorderedAccessView,
            pp_output_buffer: ?*?*ID3D11UnorderedAccessView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setForwardScale(self: *const T, forward_scale_: f32) HRESULT {
                return @as(*const ID3DX11FFT.VTable, @ptrCast(self.vtable)).SetForwardScale(@as(*const ID3DX11FFT, @ptrCast(self)), forward_scale_);
            }
            pub inline fn getForwardScale(self: *const T) f32 {
                return @as(*const ID3DX11FFT.VTable, @ptrCast(self.vtable)).GetForwardScale(@as(*const ID3DX11FFT, @ptrCast(self)));
            }
            pub inline fn setInverseScale(self: *const T, inverse_scale_: f32) HRESULT {
                return @as(*const ID3DX11FFT.VTable, @ptrCast(self.vtable)).SetInverseScale(@as(*const ID3DX11FFT, @ptrCast(self)), inverse_scale_);
            }
            pub inline fn getInverseScale(self: *const T) f32 {
                return @as(*const ID3DX11FFT.VTable, @ptrCast(self.vtable)).GetInverseScale(@as(*const ID3DX11FFT, @ptrCast(self)));
            }
            pub inline fn attachBuffersAndPrecompute(self: *const T, num_temp_buffers_: u32, pp_temp_buffers_: [*]?*ID3D11UnorderedAccessView, num_precompute_buffers_: u32, pp_precompute_buffer_sizes_: [*]?*ID3D11UnorderedAccessView) HRESULT {
                return @as(*const ID3DX11FFT.VTable, @ptrCast(self.vtable)).AttachBuffersAndPrecompute(@as(*const ID3DX11FFT, @ptrCast(self)), num_temp_buffers_, pp_temp_buffers_, num_precompute_buffers_, pp_precompute_buffer_sizes_);
            }
            pub inline fn forwardTransform(self: *const T, p_input_buffer_: ?*ID3D11UnorderedAccessView, pp_output_buffer_: ?*?*ID3D11UnorderedAccessView) HRESULT {
                return @as(*const ID3DX11FFT.VTable, @ptrCast(self.vtable)).ForwardTransform(@as(*const ID3DX11FFT, @ptrCast(self)), p_input_buffer_, pp_output_buffer_);
            }
            pub inline fn inverseTransform(self: *const T, p_input_buffer_: ?*ID3D11UnorderedAccessView, pp_output_buffer_: ?*?*ID3D11UnorderedAccessView) HRESULT {
                return @as(*const ID3DX11FFT.VTable, @ptrCast(self.vtable)).InverseTransform(@as(*const ID3DX11FFT, @ptrCast(self)), p_input_buffer_, pp_output_buffer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D3DX11_FFT_DATA_TYPE = enum(i32) {
    REAL = 0,
    COMPLEX = 1,
};
pub const D3DX11_FFT_DATA_TYPE_REAL = D3DX11_FFT_DATA_TYPE.REAL;
pub const D3DX11_FFT_DATA_TYPE_COMPLEX = D3DX11_FFT_DATA_TYPE.COMPLEX;

pub const D3DX11_FFT_DIM_MASK = enum(i32) {
    @"1D" = 1,
    @"2D" = 3,
    @"3D" = 7,
};
pub const D3DX11_FFT_DIM_MASK_1D = D3DX11_FFT_DIM_MASK.@"1D";
pub const D3DX11_FFT_DIM_MASK_2D = D3DX11_FFT_DIM_MASK.@"2D";
pub const D3DX11_FFT_DIM_MASK_3D = D3DX11_FFT_DIM_MASK.@"3D";

pub const D3DX11_FFT_DESC = extern struct {
    NumDimensions: u32,
    ElementLengths: [32]u32,
    DimensionMask: u32,
    Type: D3DX11_FFT_DATA_TYPE,
};

pub const D3DX11_FFT_BUFFER_INFO = extern struct {
    NumTempBufferSizes: u32,
    TempBufferFloatSizes: [4]u32,
    NumPrecomputeBufferSizes: u32,
    PrecomputeBufferFloatSizes: [4]u32,
};

pub const D3DX11_FFT_CREATE_FLAG = enum(i32) {
    S = 1,
};
pub const D3DX11_FFT_CREATE_FLAG_NO_PRECOMPUTE_BUFFERS = D3DX11_FFT_CREATE_FLAG.S;

//--------------------------------------------------------------------------------
// Section: Functions (12)
//--------------------------------------------------------------------------------
pub extern "d3d11" fn D3D11CreateDevice(
    p_adapter: ?*IDXGIAdapter,
    driver_type: D3D_DRIVER_TYPE,
    software: ?HINSTANCE,
    flags: D3D11_CREATE_DEVICE_FLAG,
    p_feature_levels: ?[*]const D3D_FEATURE_LEVEL,
    feature_levels: u32,
    s_d_k_version: u32,
    pp_device: ?*?*ID3D11Device,
    p_feature_level: ?*D3D_FEATURE_LEVEL,
    pp_immediate_context: ?*?*ID3D11DeviceContext,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "d3d11" fn D3D11CreateDeviceAndSwapChain(
    p_adapter: ?*IDXGIAdapter,
    driver_type: D3D_DRIVER_TYPE,
    software: ?HINSTANCE,
    flags: D3D11_CREATE_DEVICE_FLAG,
    p_feature_levels: ?[*]const D3D_FEATURE_LEVEL,
    feature_levels: u32,
    s_d_k_version: u32,
    p_swap_chain_desc: ?*const DXGI_SWAP_CHAIN_DESC,
    pp_swap_chain: ?*?*IDXGISwapChain,
    pp_device: ?*?*ID3D11Device,
    p_feature_level: ?*D3D_FEATURE_LEVEL,
    pp_immediate_context: ?*?*ID3D11DeviceContext,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "d3dcompiler_47" fn D3DDisassemble11Trace(
    // TODO: what to do with BytesParamIndex 1?
    p_src_data: ?*const anyopaque,
    src_data_size: usize,
    p_trace: ?*ID3D11ShaderTrace,
    start_step: u32,
    num_steps: u32,
    flags: u32,
    pp_disassembly: ?*?*ID3DBlob,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "d3dcsx" fn D3DX11CreateScan(
    p_device_context: ?*ID3D11DeviceContext,
    max_element_scan_size: u32,
    max_scan_count: u32,
    pp_scan: ?*?*ID3DX11Scan,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "d3dcsx" fn D3DX11CreateSegmentedScan(
    p_device_context: ?*ID3D11DeviceContext,
    max_element_scan_size: u32,
    pp_scan: ?*?*ID3DX11SegmentedScan,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "d3dcsx" fn D3DX11CreateFFT(
    p_device_context: ?*ID3D11DeviceContext,
    p_desc: ?*const D3DX11_FFT_DESC,
    flags: u32,
    p_buffer_info: ?*D3DX11_FFT_BUFFER_INFO,
    pp_f_f_t: ?*?*ID3DX11FFT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "d3dcsx" fn D3DX11CreateFFT1DReal(
    p_device_context: ?*ID3D11DeviceContext,
    x: u32,
    flags: u32,
    p_buffer_info: ?*D3DX11_FFT_BUFFER_INFO,
    pp_f_f_t: ?*?*ID3DX11FFT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "d3dcsx" fn D3DX11CreateFFT1DComplex(
    p_device_context: ?*ID3D11DeviceContext,
    x: u32,
    flags: u32,
    p_buffer_info: ?*D3DX11_FFT_BUFFER_INFO,
    pp_f_f_t: ?*?*ID3DX11FFT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "d3dcsx" fn D3DX11CreateFFT2DReal(
    p_device_context: ?*ID3D11DeviceContext,
    x: u32,
    y: u32,
    flags: u32,
    p_buffer_info: ?*D3DX11_FFT_BUFFER_INFO,
    pp_f_f_t: ?*?*ID3DX11FFT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "d3dcsx" fn D3DX11CreateFFT2DComplex(
    p_device_context: ?*ID3D11DeviceContext,
    x: u32,
    y: u32,
    flags: u32,
    p_buffer_info: ?*D3DX11_FFT_BUFFER_INFO,
    pp_f_f_t: ?*?*ID3DX11FFT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "d3dcsx" fn D3DX11CreateFFT3DReal(
    p_device_context: ?*ID3D11DeviceContext,
    x: u32,
    y: u32,
    z: u32,
    flags: u32,
    p_buffer_info: ?*D3DX11_FFT_BUFFER_INFO,
    pp_f_f_t: ?*?*ID3DX11FFT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "d3dcsx" fn D3DX11CreateFFT3DComplex(
    p_device_context: ?*ID3D11DeviceContext,
    x: u32,
    y: u32,
    z: u32,
    flags: u32,
    p_buffer_info: ?*D3DX11_FFT_BUFFER_INFO,
    pp_f_f_t: ?*?*ID3DX11FFT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (38)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const D3D_CBUFFER_TYPE = @import("../graphics/direct3d.zig").D3D_CBUFFER_TYPE;
const D3D_DRIVER_TYPE = @import("../graphics/direct3d.zig").D3D_DRIVER_TYPE;
const D3D_FEATURE_LEVEL = @import("../graphics/direct3d.zig").D3D_FEATURE_LEVEL;
const D3D_INTERPOLATION_MODE = @import("../graphics/direct3d.zig").D3D_INTERPOLATION_MODE;
const D3D_MIN_PRECISION = @import("../graphics/direct3d.zig").D3D_MIN_PRECISION;
const D3D_NAME = @import("../graphics/direct3d.zig").D3D_NAME;
const D3D_PARAMETER_FLAGS = @import("../graphics/direct3d.zig").D3D_PARAMETER_FLAGS;
const D3D_PRIMITIVE = @import("../graphics/direct3d.zig").D3D_PRIMITIVE;
const D3D_PRIMITIVE_TOPOLOGY = @import("../graphics/direct3d.zig").D3D_PRIMITIVE_TOPOLOGY;
const D3D_REGISTER_COMPONENT_TYPE = @import("../graphics/direct3d.zig").D3D_REGISTER_COMPONENT_TYPE;
const D3D_RESOURCE_RETURN_TYPE = @import("../graphics/direct3d.zig").D3D_RESOURCE_RETURN_TYPE;
const D3D_SHADER_INPUT_TYPE = @import("../graphics/direct3d.zig").D3D_SHADER_INPUT_TYPE;
const D3D_SHADER_VARIABLE_CLASS = @import("../graphics/direct3d.zig").D3D_SHADER_VARIABLE_CLASS;
const D3D_SHADER_VARIABLE_TYPE = @import("../graphics/direct3d.zig").D3D_SHADER_VARIABLE_TYPE;
const D3D_SRV_DIMENSION = @import("../graphics/direct3d.zig").D3D_SRV_DIMENSION;
const D3D_TESSELLATOR_DOMAIN = @import("../graphics/direct3d.zig").D3D_TESSELLATOR_DOMAIN;
const D3D_TESSELLATOR_OUTPUT_PRIMITIVE = @import("../graphics/direct3d.zig").D3D_TESSELLATOR_OUTPUT_PRIMITIVE;
const D3D_TESSELLATOR_PARTITIONING = @import("../graphics/direct3d.zig").D3D_TESSELLATOR_PARTITIONING;
const DXGI_COLOR_SPACE_TYPE = @import("../graphics/dxgi/common.zig").DXGI_COLOR_SPACE_TYPE;
const DXGI_FORMAT = @import("../graphics/dxgi/common.zig").DXGI_FORMAT;
const DXGI_HDR_METADATA_TYPE = @import("../graphics/dxgi.zig").DXGI_HDR_METADATA_TYPE;
const DXGI_RATIONAL = @import("../graphics/dxgi/common.zig").DXGI_RATIONAL;
const DXGI_SAMPLE_DESC = @import("../graphics/dxgi/common.zig").DXGI_SAMPLE_DESC;
const DXGI_SWAP_CHAIN_DESC = @import("../graphics/dxgi.zig").DXGI_SWAP_CHAIN_DESC;
const HANDLE = @import("../foundation.zig").HANDLE;
const HINSTANCE = @import("../foundation.zig").HINSTANCE;
const HRESULT = @import("../foundation.zig").HRESULT;
const ID3DBlob = @import("../graphics/direct3d.zig").ID3DBlob;
const IDXGIAdapter = @import("../graphics/dxgi.zig").IDXGIAdapter;
const IDXGISwapChain = @import("../graphics/dxgi.zig").IDXGISwapChain;
const IUnknown = @import("../system/com.zig").IUnknown;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const RECT = @import("../foundation.zig").RECT;
const SECURITY_ATTRIBUTES = @import("../security.zig").SECURITY_ATTRIBUTES;
const SIZE = @import("../foundation.zig").SIZE;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PFN_D3D11_CREATE_DEVICE")) {
        _ = PFN_D3D11_CREATE_DEVICE;
    }
    if (@hasDecl(@This(), "PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN")) {
        _ = PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
