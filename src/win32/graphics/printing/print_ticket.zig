//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (7)
//--------------------------------------------------------------------------------
pub const PRINTTICKET_ISTREAM_APIS = @as(u32, 1);
pub const S_PT_NO_CONFLICT = @as(u32, 262145);
pub const S_PT_CONFLICT_RESOLVED = @as(u32, 262146);
pub const E_PRINTTICKET_FORMAT = @as(u32, 2147745795);
pub const E_PRINTCAPABILITIES_FORMAT = @as(u32, 2147745796);
pub const E_DELTA_PRINTTICKET_FORMAT = @as(u32, 2147745797);
pub const E_PRINTDEVICECAPABILITIES_FORMAT = @as(u32, 2147745798);

//--------------------------------------------------------------------------------
// Section: Types (2)
//--------------------------------------------------------------------------------
pub const EDefaultDevmodeType = enum(i32) {
    UserDefaultDevmode = 0,
    PrinterDefaultDevmode = 1,
};
pub const kUserDefaultDevmode = EDefaultDevmodeType.UserDefaultDevmode;
pub const kPrinterDefaultDevmode = EDefaultDevmodeType.PrinterDefaultDevmode;

pub const EPrintTicketScope = enum(i32) {
    PageScope = 0,
    DocumentScope = 1,
    JobScope = 2,
};
pub const kPTPageScope = EPrintTicketScope.PageScope;
pub const kPTDocumentScope = EPrintTicketScope.DocumentScope;
pub const kPTJobScope = EPrintTicketScope.JobScope;

//--------------------------------------------------------------------------------
// Section: Functions (11)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "prntvpt" fn PTQuerySchemaVersionSupport(
    psz_printer_name: ?[*:0]const u16,
    p_max_version: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "prntvpt" fn PTOpenProvider(
    psz_printer_name: ?[*:0]const u16,
    dw_version: u32,
    ph_provider: ?*?HPTPROVIDER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "prntvpt" fn PTOpenProviderEx(
    psz_printer_name: ?[*:0]const u16,
    dw_max_version: u32,
    dw_pref_version: u32,
    ph_provider: ?*?HPTPROVIDER,
    p_used_version: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "prntvpt" fn PTCloseProvider(
    h_provider: ?HPTPROVIDER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "prntvpt" fn PTReleaseMemory(
    p_buffer: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "prntvpt" fn PTGetPrintCapabilities(
    h_provider: ?HPTPROVIDER,
    p_print_ticket: ?*IStream,
    p_capabilities: ?*IStream,
    pbstr_error_message: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.15063'
pub extern "prntvpt" fn PTGetPrintDeviceCapabilities(
    h_provider: ?HPTPROVIDER,
    p_print_ticket: ?*IStream,
    p_device_capabilities: ?*IStream,
    pbstr_error_message: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.15063'
pub extern "prntvpt" fn PTGetPrintDeviceResources(
    h_provider: ?HPTPROVIDER,
    psz_locale_name: ?[*:0]const u16,
    p_print_ticket: ?*IStream,
    p_device_resources: ?*IStream,
    pbstr_error_message: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "prntvpt" fn PTMergeAndValidatePrintTicket(
    h_provider: ?HPTPROVIDER,
    p_base_ticket: ?*IStream,
    p_delta_ticket: ?*IStream,
    scope: EPrintTicketScope,
    p_result_ticket: ?*IStream,
    pbstr_error_message: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "prntvpt" fn PTConvertPrintTicketToDevMode(
    h_provider: ?HPTPROVIDER,
    p_print_ticket: ?*IStream,
    base_devmode_type: EDefaultDevmodeType,
    scope: EPrintTicketScope,
    pcb_devmode: ?*u32,
    pp_devmode: ?*?*DEVMODEA,
    pbstr_error_message: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "prntvpt" fn PTConvertDevModeToPrintTicket(
    h_provider: ?HPTPROVIDER,
    cb_devmode: u32,
    p_devmode: ?*DEVMODEA,
    scope: EPrintTicketScope,
    p_print_ticket: ?*IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const BSTR = @import("../../foundation.zig").BSTR;
const DEVMODEA = @import("../../graphics/gdi.zig").DEVMODEA;
const HPTPROVIDER = @import("../../storage/xps.zig").HPTPROVIDER;
const HRESULT = @import("../../foundation.zig").HRESULT;
const IStream = @import("../../system/com.zig").IStream;
const PWSTR = @import("../../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
