//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (8)
//--------------------------------------------------------------------------------
pub const DIRECTMANIPULATION_KEYBOARDFOCUS = @as(u32, 4294967294);
pub const DIRECTMANIPULATION_MOUSEFOCUS = @as(u32, 4294967293);
pub const CLSID_VerticalIndicatorContent = Guid.initString("a10b5f17-afe0-4aa2-91e9-3e7001d2e6b4");
pub const CLSID_HorizontalIndicatorContent = Guid.initString("e7d18cf5-3ec7-44d5-a76b-3770f3cf903d");
pub const CLSID_VirtualViewportContent = Guid.initString("3206a19a-86f0-4cb4-a7f3-16e3b7e2d852");
pub const CLSID_DragDropConfigurationBehavior = Guid.initString("09b01b3e-ba6c-454d-82e8-95e352329f23");
pub const CLSID_AutoScrollBehavior = Guid.initString("26126a51-3c70-4c9a-aec2-948849eeb093");
pub const CLSID_DeferContactService = Guid.initString("d7b67cf4-84bb-434e-86ae-6592bbc9abd9");

//--------------------------------------------------------------------------------
// Section: Types (39)
//--------------------------------------------------------------------------------
const CLSID_DirectManipulationViewport_Value = Guid.initString("34e211b6-3650-4f75-8334-fa359598e1c5");
pub const CLSID_DirectManipulationViewport = &CLSID_DirectManipulationViewport_Value;

const CLSID_DirectManipulationUpdateManager_Value = Guid.initString("9fc1bfd5-1835-441a-b3b1-b6cc74b727d0");
pub const CLSID_DirectManipulationUpdateManager = &CLSID_DirectManipulationUpdateManager_Value;

const CLSID_DirectManipulationPrimaryContent_Value = Guid.initString("caa02661-d59e-41c7-8393-3ba3bacb6b57");
pub const CLSID_DirectManipulationPrimaryContent = &CLSID_DirectManipulationPrimaryContent_Value;

const CLSID_DirectManipulationManager_Value = Guid.initString("54e211b6-3650-4f75-8334-fa359598e1c5");
pub const CLSID_DirectManipulationManager = &CLSID_DirectManipulationManager_Value;

const CLSID_DirectManipulationSharedManager_Value = Guid.initString("99793286-77cc-4b57-96db-3b354f6f9fb5");
pub const CLSID_DirectManipulationSharedManager = &CLSID_DirectManipulationSharedManager_Value;

const CLSID_DCompManipulationCompositor_Value = Guid.initString("79dea627-a08a-43ac-8ef5-6900b9299126");
pub const CLSID_DCompManipulationCompositor = &CLSID_DCompManipulationCompositor_Value;

pub const DIRECTMANIPULATION_STATUS = enum(i32) {
    BUILDING = 0,
    ENABLED = 1,
    DISABLED = 2,
    RUNNING = 3,
    INERTIA = 4,
    READY = 5,
    SUSPENDED = 6,
};
pub const DIRECTMANIPULATION_BUILDING = DIRECTMANIPULATION_STATUS.BUILDING;
pub const DIRECTMANIPULATION_ENABLED = DIRECTMANIPULATION_STATUS.ENABLED;
pub const DIRECTMANIPULATION_DISABLED = DIRECTMANIPULATION_STATUS.DISABLED;
pub const DIRECTMANIPULATION_RUNNING = DIRECTMANIPULATION_STATUS.RUNNING;
pub const DIRECTMANIPULATION_INERTIA = DIRECTMANIPULATION_STATUS.INERTIA;
pub const DIRECTMANIPULATION_READY = DIRECTMANIPULATION_STATUS.READY;
pub const DIRECTMANIPULATION_SUSPENDED = DIRECTMANIPULATION_STATUS.SUSPENDED;

pub const DIRECTMANIPULATION_HITTEST_TYPE = enum(i32) {
    ASYNCHRONOUS = 0,
    SYNCHRONOUS = 1,
    AUTO_SYNCHRONOUS = 2,
};
pub const DIRECTMANIPULATION_HITTEST_TYPE_ASYNCHRONOUS = DIRECTMANIPULATION_HITTEST_TYPE.ASYNCHRONOUS;
pub const DIRECTMANIPULATION_HITTEST_TYPE_SYNCHRONOUS = DIRECTMANIPULATION_HITTEST_TYPE.SYNCHRONOUS;
pub const DIRECTMANIPULATION_HITTEST_TYPE_AUTO_SYNCHRONOUS = DIRECTMANIPULATION_HITTEST_TYPE.AUTO_SYNCHRONOUS;

pub const DIRECTMANIPULATION_CONFIGURATION = enum(i32) {
    NONE = 0,
    INTERACTION = 1,
    TRANSLATION_X = 2,
    TRANSLATION_Y = 4,
    SCALING = 16,
    TRANSLATION_INERTIA = 32,
    SCALING_INERTIA = 128,
    RAILS_X = 256,
    RAILS_Y = 512,
};
pub const DIRECTMANIPULATION_CONFIGURATION_NONE = DIRECTMANIPULATION_CONFIGURATION.NONE;
pub const DIRECTMANIPULATION_CONFIGURATION_INTERACTION = DIRECTMANIPULATION_CONFIGURATION.INTERACTION;
pub const DIRECTMANIPULATION_CONFIGURATION_TRANSLATION_X = DIRECTMANIPULATION_CONFIGURATION.TRANSLATION_X;
pub const DIRECTMANIPULATION_CONFIGURATION_TRANSLATION_Y = DIRECTMANIPULATION_CONFIGURATION.TRANSLATION_Y;
pub const DIRECTMANIPULATION_CONFIGURATION_SCALING = DIRECTMANIPULATION_CONFIGURATION.SCALING;
pub const DIRECTMANIPULATION_CONFIGURATION_TRANSLATION_INERTIA = DIRECTMANIPULATION_CONFIGURATION.TRANSLATION_INERTIA;
pub const DIRECTMANIPULATION_CONFIGURATION_SCALING_INERTIA = DIRECTMANIPULATION_CONFIGURATION.SCALING_INERTIA;
pub const DIRECTMANIPULATION_CONFIGURATION_RAILS_X = DIRECTMANIPULATION_CONFIGURATION.RAILS_X;
pub const DIRECTMANIPULATION_CONFIGURATION_RAILS_Y = DIRECTMANIPULATION_CONFIGURATION.RAILS_Y;

pub const DIRECTMANIPULATION_GESTURE_CONFIGURATION = enum(i32) {
    NONE = 0,
    // DEFAULT = 0, this enum value conflicts with NONE
    CROSS_SLIDE_VERTICAL = 8,
    CROSS_SLIDE_HORIZONTAL = 16,
    PINCH_ZOOM = 32,
};
pub const DIRECTMANIPULATION_GESTURE_NONE = DIRECTMANIPULATION_GESTURE_CONFIGURATION.NONE;
pub const DIRECTMANIPULATION_GESTURE_DEFAULT = DIRECTMANIPULATION_GESTURE_CONFIGURATION.NONE;
pub const DIRECTMANIPULATION_GESTURE_CROSS_SLIDE_VERTICAL = DIRECTMANIPULATION_GESTURE_CONFIGURATION.CROSS_SLIDE_VERTICAL;
pub const DIRECTMANIPULATION_GESTURE_CROSS_SLIDE_HORIZONTAL = DIRECTMANIPULATION_GESTURE_CONFIGURATION.CROSS_SLIDE_HORIZONTAL;
pub const DIRECTMANIPULATION_GESTURE_PINCH_ZOOM = DIRECTMANIPULATION_GESTURE_CONFIGURATION.PINCH_ZOOM;

pub const DIRECTMANIPULATION_MOTION_TYPES = enum(i32) {
    NONE = 0,
    TRANSLATEX = 1,
    TRANSLATEY = 2,
    ZOOM = 4,
    CENTERX = 16,
    CENTERY = 32,
    ALL = 55,
};
pub const DIRECTMANIPULATION_MOTION_NONE = DIRECTMANIPULATION_MOTION_TYPES.NONE;
pub const DIRECTMANIPULATION_MOTION_TRANSLATEX = DIRECTMANIPULATION_MOTION_TYPES.TRANSLATEX;
pub const DIRECTMANIPULATION_MOTION_TRANSLATEY = DIRECTMANIPULATION_MOTION_TYPES.TRANSLATEY;
pub const DIRECTMANIPULATION_MOTION_ZOOM = DIRECTMANIPULATION_MOTION_TYPES.ZOOM;
pub const DIRECTMANIPULATION_MOTION_CENTERX = DIRECTMANIPULATION_MOTION_TYPES.CENTERX;
pub const DIRECTMANIPULATION_MOTION_CENTERY = DIRECTMANIPULATION_MOTION_TYPES.CENTERY;
pub const DIRECTMANIPULATION_MOTION_ALL = DIRECTMANIPULATION_MOTION_TYPES.ALL;

pub const DIRECTMANIPULATION_VIEWPORT_OPTIONS = enum(i32) {
    DEFAULT = 0,
    AUTODISABLE = 1,
    MANUALUPDATE = 2,
    INPUT = 4,
    EXPLICITHITTEST = 8,
    DISABLEPIXELSNAPPING = 16,
};
pub const DIRECTMANIPULATION_VIEWPORT_OPTIONS_DEFAULT = DIRECTMANIPULATION_VIEWPORT_OPTIONS.DEFAULT;
pub const DIRECTMANIPULATION_VIEWPORT_OPTIONS_AUTODISABLE = DIRECTMANIPULATION_VIEWPORT_OPTIONS.AUTODISABLE;
pub const DIRECTMANIPULATION_VIEWPORT_OPTIONS_MANUALUPDATE = DIRECTMANIPULATION_VIEWPORT_OPTIONS.MANUALUPDATE;
pub const DIRECTMANIPULATION_VIEWPORT_OPTIONS_INPUT = DIRECTMANIPULATION_VIEWPORT_OPTIONS.INPUT;
pub const DIRECTMANIPULATION_VIEWPORT_OPTIONS_EXPLICITHITTEST = DIRECTMANIPULATION_VIEWPORT_OPTIONS.EXPLICITHITTEST;
pub const DIRECTMANIPULATION_VIEWPORT_OPTIONS_DISABLEPIXELSNAPPING = DIRECTMANIPULATION_VIEWPORT_OPTIONS.DISABLEPIXELSNAPPING;

pub const DIRECTMANIPULATION_SNAPPOINT_TYPE = enum(i32) {
    MANDATORY = 0,
    OPTIONAL = 1,
    MANDATORY_SINGLE = 2,
    OPTIONAL_SINGLE = 3,
};
pub const DIRECTMANIPULATION_SNAPPOINT_MANDATORY = DIRECTMANIPULATION_SNAPPOINT_TYPE.MANDATORY;
pub const DIRECTMANIPULATION_SNAPPOINT_OPTIONAL = DIRECTMANIPULATION_SNAPPOINT_TYPE.OPTIONAL;
pub const DIRECTMANIPULATION_SNAPPOINT_MANDATORY_SINGLE = DIRECTMANIPULATION_SNAPPOINT_TYPE.MANDATORY_SINGLE;
pub const DIRECTMANIPULATION_SNAPPOINT_OPTIONAL_SINGLE = DIRECTMANIPULATION_SNAPPOINT_TYPE.OPTIONAL_SINGLE;

pub const DIRECTMANIPULATION_SNAPPOINT_COORDINATE = enum(i32) {
    BOUNDARY = 0,
    ORIGIN = 1,
    MIRRORED = 16,
};
pub const DIRECTMANIPULATION_COORDINATE_BOUNDARY = DIRECTMANIPULATION_SNAPPOINT_COORDINATE.BOUNDARY;
pub const DIRECTMANIPULATION_COORDINATE_ORIGIN = DIRECTMANIPULATION_SNAPPOINT_COORDINATE.ORIGIN;
pub const DIRECTMANIPULATION_COORDINATE_MIRRORED = DIRECTMANIPULATION_SNAPPOINT_COORDINATE.MIRRORED;

pub const DIRECTMANIPULATION_HORIZONTALALIGNMENT = enum(i32) {
    NONE = 0,
    LEFT = 1,
    CENTER = 2,
    RIGHT = 4,
    UNLOCKCENTER = 8,
};
pub const DIRECTMANIPULATION_HORIZONTALALIGNMENT_NONE = DIRECTMANIPULATION_HORIZONTALALIGNMENT.NONE;
pub const DIRECTMANIPULATION_HORIZONTALALIGNMENT_LEFT = DIRECTMANIPULATION_HORIZONTALALIGNMENT.LEFT;
pub const DIRECTMANIPULATION_HORIZONTALALIGNMENT_CENTER = DIRECTMANIPULATION_HORIZONTALALIGNMENT.CENTER;
pub const DIRECTMANIPULATION_HORIZONTALALIGNMENT_RIGHT = DIRECTMANIPULATION_HORIZONTALALIGNMENT.RIGHT;
pub const DIRECTMANIPULATION_HORIZONTALALIGNMENT_UNLOCKCENTER = DIRECTMANIPULATION_HORIZONTALALIGNMENT.UNLOCKCENTER;

pub const DIRECTMANIPULATION_VERTICALALIGNMENT = enum(i32) {
    NONE = 0,
    TOP = 1,
    CENTER = 2,
    BOTTOM = 4,
    UNLOCKCENTER = 8,
};
pub const DIRECTMANIPULATION_VERTICALALIGNMENT_NONE = DIRECTMANIPULATION_VERTICALALIGNMENT.NONE;
pub const DIRECTMANIPULATION_VERTICALALIGNMENT_TOP = DIRECTMANIPULATION_VERTICALALIGNMENT.TOP;
pub const DIRECTMANIPULATION_VERTICALALIGNMENT_CENTER = DIRECTMANIPULATION_VERTICALALIGNMENT.CENTER;
pub const DIRECTMANIPULATION_VERTICALALIGNMENT_BOTTOM = DIRECTMANIPULATION_VERTICALALIGNMENT.BOTTOM;
pub const DIRECTMANIPULATION_VERTICALALIGNMENT_UNLOCKCENTER = DIRECTMANIPULATION_VERTICALALIGNMENT.UNLOCKCENTER;

pub const DIRECTMANIPULATION_INPUT_MODE = enum(i32) {
    AUTOMATIC = 0,
    MANUAL = 1,
};
pub const DIRECTMANIPULATION_INPUT_MODE_AUTOMATIC = DIRECTMANIPULATION_INPUT_MODE.AUTOMATIC;
pub const DIRECTMANIPULATION_INPUT_MODE_MANUAL = DIRECTMANIPULATION_INPUT_MODE.MANUAL;

// TODO: this type is limited to platform 'windows8.0'
const IID_IDirectManipulationManager_Value = Guid.initString("fbf5d3b4-70c7-4163-9322-5a6f660d6fbc");
pub const IID_IDirectManipulationManager = &IID_IDirectManipulationManager_Value;
pub const IDirectManipulationManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Activate: *const fn (
            self: *const IDirectManipulationManager,
            window: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Deactivate: *const fn (
            self: *const IDirectManipulationManager,
            window: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterHitTestTarget: *const fn (
            self: *const IDirectManipulationManager,
            window: ?HWND,
            hit_test_window: ?HWND,
            type: DIRECTMANIPULATION_HITTEST_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessInput: *const fn (
            self: *const IDirectManipulationManager,
            message: ?*const MSG,
            handled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUpdateManager: *const fn (
            self: *const IDirectManipulationManager,
            riid: ?*const Guid,
            object: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateViewport: *const fn (
            self: *const IDirectManipulationManager,
            frame_info: ?*IDirectManipulationFrameInfoProvider,
            window: ?HWND,
            riid: ?*const Guid,
            object: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateContent: *const fn (
            self: *const IDirectManipulationManager,
            frame_info: ?*IDirectManipulationFrameInfoProvider,
            clsid: ?*const Guid,
            riid: ?*const Guid,
            object: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn activate(self: *const T, window_: ?HWND) HRESULT {
                return @as(*const IDirectManipulationManager.VTable, @ptrCast(self.vtable)).Activate(@as(*const IDirectManipulationManager, @ptrCast(self)), window_);
            }
            pub inline fn deactivate(self: *const T, window_: ?HWND) HRESULT {
                return @as(*const IDirectManipulationManager.VTable, @ptrCast(self.vtable)).Deactivate(@as(*const IDirectManipulationManager, @ptrCast(self)), window_);
            }
            pub inline fn registerHitTestTarget(self: *const T, window_: ?HWND, hit_test_window_: ?HWND, type_: DIRECTMANIPULATION_HITTEST_TYPE) HRESULT {
                return @as(*const IDirectManipulationManager.VTable, @ptrCast(self.vtable)).RegisterHitTestTarget(@as(*const IDirectManipulationManager, @ptrCast(self)), window_, hit_test_window_, type_);
            }
            pub inline fn processInput(self: *const T, message_: ?*const MSG, handled_: ?*BOOL) HRESULT {
                return @as(*const IDirectManipulationManager.VTable, @ptrCast(self.vtable)).ProcessInput(@as(*const IDirectManipulationManager, @ptrCast(self)), message_, handled_);
            }
            pub inline fn getUpdateManager(self: *const T, riid_: ?*const Guid, object_: ?*?*anyopaque) HRESULT {
                return @as(*const IDirectManipulationManager.VTable, @ptrCast(self.vtable)).GetUpdateManager(@as(*const IDirectManipulationManager, @ptrCast(self)), riid_, object_);
            }
            pub inline fn createViewport(self: *const T, frame_info_: ?*IDirectManipulationFrameInfoProvider, window_: ?HWND, riid_: ?*const Guid, object_: ?*?*anyopaque) HRESULT {
                return @as(*const IDirectManipulationManager.VTable, @ptrCast(self.vtable)).CreateViewport(@as(*const IDirectManipulationManager, @ptrCast(self)), frame_info_, window_, riid_, object_);
            }
            pub inline fn createContent(self: *const T, frame_info_: ?*IDirectManipulationFrameInfoProvider, clsid_: ?*const Guid, riid_: ?*const Guid, object_: ?*?*anyopaque) HRESULT {
                return @as(*const IDirectManipulationManager.VTable, @ptrCast(self.vtable)).CreateContent(@as(*const IDirectManipulationManager, @ptrCast(self)), frame_info_, clsid_, riid_, object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDirectManipulationManager2_Value = Guid.initString("fa1005e9-3d16-484c-bfc9-62b61e56ec4e");
pub const IID_IDirectManipulationManager2 = &IID_IDirectManipulationManager2_Value;
pub const IDirectManipulationManager2 = extern struct {
    pub const VTable = extern struct {
        base: IDirectManipulationManager.VTable,
        CreateBehavior: *const fn (
            self: *const IDirectManipulationManager2,
            clsid: ?*const Guid,
            riid: ?*const Guid,
            object: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDirectManipulationManager.MethodMixin(T);
            pub inline fn createBehavior(self: *const T, clsid_: ?*const Guid, riid_: ?*const Guid, object_: ?*?*anyopaque) HRESULT {
                return @as(*const IDirectManipulationManager2.VTable, @ptrCast(self.vtable)).CreateBehavior(@as(*const IDirectManipulationManager2, @ptrCast(self)), clsid_, riid_, object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IDirectManipulationManager3_Value = Guid.initString("2cb6b33d-ffe8-488c-b750-fbdfe88dca8c");
pub const IID_IDirectManipulationManager3 = &IID_IDirectManipulationManager3_Value;
pub const IDirectManipulationManager3 = extern struct {
    pub const VTable = extern struct {
        base: IDirectManipulationManager2.VTable,
        GetService: *const fn (
            self: *const IDirectManipulationManager3,
            clsid: ?*const Guid,
            riid: ?*const Guid,
            object: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDirectManipulationManager2.MethodMixin(T);
            pub inline fn getService(self: *const T, clsid_: ?*const Guid, riid_: ?*const Guid, object_: ?*?*anyopaque) HRESULT {
                return @as(*const IDirectManipulationManager3.VTable, @ptrCast(self.vtable)).GetService(@as(*const IDirectManipulationManager3, @ptrCast(self)), clsid_, riid_, object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDirectManipulationViewport_Value = Guid.initString("28b85a3d-60a0-48bd-9ba1-5ce8d9ea3a6d");
pub const IID_IDirectManipulationViewport = &IID_IDirectManipulationViewport_Value;
pub const IDirectManipulationViewport = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Enable: *const fn (
            self: *const IDirectManipulationViewport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disable: *const fn (
            self: *const IDirectManipulationViewport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContact: *const fn (
            self: *const IDirectManipulationViewport,
            pointer_id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseContact: *const fn (
            self: *const IDirectManipulationViewport,
            pointer_id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseAllContacts: *const fn (
            self: *const IDirectManipulationViewport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn (
            self: *const IDirectManipulationViewport,
            status: ?*DIRECTMANIPULATION_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTag: *const fn (
            self: *const IDirectManipulationViewport,
            riid: ?*const Guid,
            object: ?*?*anyopaque,
            id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTag: *const fn (
            self: *const IDirectManipulationViewport,
            object: ?*IUnknown,
            id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewportRect: *const fn (
            self: *const IDirectManipulationViewport,
            viewport: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewportRect: *const fn (
            self: *const IDirectManipulationViewport,
            viewport: ?*const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ZoomToRect: *const fn (
            self: *const IDirectManipulationViewport,
            left: f32,
            top: f32,
            right: f32,
            bottom: f32,
            animate: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewportTransform: *const fn (
            self: *const IDirectManipulationViewport,
            matrix: [*]const f32,
            point_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncDisplayTransform: *const fn (
            self: *const IDirectManipulationViewport,
            matrix: [*]const f32,
            point_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrimaryContent: *const fn (
            self: *const IDirectManipulationViewport,
            riid: ?*const Guid,
            object: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddContent: *const fn (
            self: *const IDirectManipulationViewport,
            content: ?*IDirectManipulationContent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveContent: *const fn (
            self: *const IDirectManipulationViewport,
            content: ?*IDirectManipulationContent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewportOptions: *const fn (
            self: *const IDirectManipulationViewport,
            options: DIRECTMANIPULATION_VIEWPORT_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddConfiguration: *const fn (
            self: *const IDirectManipulationViewport,
            configuration: DIRECTMANIPULATION_CONFIGURATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveConfiguration: *const fn (
            self: *const IDirectManipulationViewport,
            configuration: DIRECTMANIPULATION_CONFIGURATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivateConfiguration: *const fn (
            self: *const IDirectManipulationViewport,
            configuration: DIRECTMANIPULATION_CONFIGURATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetManualGesture: *const fn (
            self: *const IDirectManipulationViewport,
            configuration: DIRECTMANIPULATION_GESTURE_CONFIGURATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetChaining: *const fn (
            self: *const IDirectManipulationViewport,
            enabled_types: DIRECTMANIPULATION_MOTION_TYPES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddEventHandler: *const fn (
            self: *const IDirectManipulationViewport,
            window: ?HWND,
            event_handler: ?*IDirectManipulationViewportEventHandler,
            cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveEventHandler: *const fn (
            self: *const IDirectManipulationViewport,
            cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInputMode: *const fn (
            self: *const IDirectManipulationViewport,
            mode: DIRECTMANIPULATION_INPUT_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUpdateMode: *const fn (
            self: *const IDirectManipulationViewport,
            mode: DIRECTMANIPULATION_INPUT_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const IDirectManipulationViewport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abandon: *const fn (
            self: *const IDirectManipulationViewport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn enable(self: *const T) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).Enable(@as(*const IDirectManipulationViewport, @ptrCast(self)));
            }
            pub inline fn disable(self: *const T) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).Disable(@as(*const IDirectManipulationViewport, @ptrCast(self)));
            }
            pub inline fn setContact(self: *const T, pointer_id_: u32) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).SetContact(@as(*const IDirectManipulationViewport, @ptrCast(self)), pointer_id_);
            }
            pub inline fn releaseContact(self: *const T, pointer_id_: u32) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).ReleaseContact(@as(*const IDirectManipulationViewport, @ptrCast(self)), pointer_id_);
            }
            pub inline fn releaseAllContacts(self: *const T) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).ReleaseAllContacts(@as(*const IDirectManipulationViewport, @ptrCast(self)));
            }
            pub inline fn getStatus(self: *const T, status_: ?*DIRECTMANIPULATION_STATUS) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IDirectManipulationViewport, @ptrCast(self)), status_);
            }
            pub inline fn getTag(self: *const T, riid_: ?*const Guid, object_: ?*?*anyopaque, id_: ?*u32) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).GetTag(@as(*const IDirectManipulationViewport, @ptrCast(self)), riid_, object_, id_);
            }
            pub inline fn setTag(self: *const T, object_: ?*IUnknown, id_: u32) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).SetTag(@as(*const IDirectManipulationViewport, @ptrCast(self)), object_, id_);
            }
            pub inline fn getViewportRect(self: *const T, viewport_: ?*RECT) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).GetViewportRect(@as(*const IDirectManipulationViewport, @ptrCast(self)), viewport_);
            }
            pub inline fn setViewportRect(self: *const T, viewport_: ?*const RECT) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).SetViewportRect(@as(*const IDirectManipulationViewport, @ptrCast(self)), viewport_);
            }
            pub inline fn zoomToRect(self: *const T, left_: f32, top_: f32, right_: f32, bottom_: f32, animate_: BOOL) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).ZoomToRect(@as(*const IDirectManipulationViewport, @ptrCast(self)), left_, top_, right_, bottom_, animate_);
            }
            pub inline fn setViewportTransform(self: *const T, matrix_: [*]const f32, point_count_: u32) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).SetViewportTransform(@as(*const IDirectManipulationViewport, @ptrCast(self)), matrix_, point_count_);
            }
            pub inline fn syncDisplayTransform(self: *const T, matrix_: [*]const f32, point_count_: u32) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).SyncDisplayTransform(@as(*const IDirectManipulationViewport, @ptrCast(self)), matrix_, point_count_);
            }
            pub inline fn getPrimaryContent(self: *const T, riid_: ?*const Guid, object_: ?*?*anyopaque) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).GetPrimaryContent(@as(*const IDirectManipulationViewport, @ptrCast(self)), riid_, object_);
            }
            pub inline fn addContent(self: *const T, content_: ?*IDirectManipulationContent) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).AddContent(@as(*const IDirectManipulationViewport, @ptrCast(self)), content_);
            }
            pub inline fn removeContent(self: *const T, content_: ?*IDirectManipulationContent) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).RemoveContent(@as(*const IDirectManipulationViewport, @ptrCast(self)), content_);
            }
            pub inline fn setViewportOptions(self: *const T, options_: DIRECTMANIPULATION_VIEWPORT_OPTIONS) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).SetViewportOptions(@as(*const IDirectManipulationViewport, @ptrCast(self)), options_);
            }
            pub inline fn addConfiguration(self: *const T, configuration_: DIRECTMANIPULATION_CONFIGURATION) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).AddConfiguration(@as(*const IDirectManipulationViewport, @ptrCast(self)), configuration_);
            }
            pub inline fn removeConfiguration(self: *const T, configuration_: DIRECTMANIPULATION_CONFIGURATION) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).RemoveConfiguration(@as(*const IDirectManipulationViewport, @ptrCast(self)), configuration_);
            }
            pub inline fn activateConfiguration(self: *const T, configuration_: DIRECTMANIPULATION_CONFIGURATION) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).ActivateConfiguration(@as(*const IDirectManipulationViewport, @ptrCast(self)), configuration_);
            }
            pub inline fn setManualGesture(self: *const T, configuration_: DIRECTMANIPULATION_GESTURE_CONFIGURATION) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).SetManualGesture(@as(*const IDirectManipulationViewport, @ptrCast(self)), configuration_);
            }
            pub inline fn setChaining(self: *const T, enabled_types_: DIRECTMANIPULATION_MOTION_TYPES) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).SetChaining(@as(*const IDirectManipulationViewport, @ptrCast(self)), enabled_types_);
            }
            pub inline fn addEventHandler(self: *const T, window_: ?HWND, event_handler_: ?*IDirectManipulationViewportEventHandler, cookie_: ?*u32) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).AddEventHandler(@as(*const IDirectManipulationViewport, @ptrCast(self)), window_, event_handler_, cookie_);
            }
            pub inline fn removeEventHandler(self: *const T, cookie_: u32) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).RemoveEventHandler(@as(*const IDirectManipulationViewport, @ptrCast(self)), cookie_);
            }
            pub inline fn setInputMode(self: *const T, mode_: DIRECTMANIPULATION_INPUT_MODE) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).SetInputMode(@as(*const IDirectManipulationViewport, @ptrCast(self)), mode_);
            }
            pub inline fn setUpdateMode(self: *const T, mode_: DIRECTMANIPULATION_INPUT_MODE) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).SetUpdateMode(@as(*const IDirectManipulationViewport, @ptrCast(self)), mode_);
            }
            pub inline fn stop(self: *const T) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).Stop(@as(*const IDirectManipulationViewport, @ptrCast(self)));
            }
            pub inline fn abandon(self: *const T) HRESULT {
                return @as(*const IDirectManipulationViewport.VTable, @ptrCast(self.vtable)).Abandon(@as(*const IDirectManipulationViewport, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDirectManipulationViewport2_Value = Guid.initString("923ccaac-61e1-4385-b726-017af189882a");
pub const IID_IDirectManipulationViewport2 = &IID_IDirectManipulationViewport2_Value;
pub const IDirectManipulationViewport2 = extern struct {
    pub const VTable = extern struct {
        base: IDirectManipulationViewport.VTable,
        AddBehavior: *const fn (
            self: *const IDirectManipulationViewport2,
            behavior: ?*IUnknown,
            cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveBehavior: *const fn (
            self: *const IDirectManipulationViewport2,
            cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllBehaviors: *const fn (
            self: *const IDirectManipulationViewport2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDirectManipulationViewport.MethodMixin(T);
            pub inline fn addBehavior(self: *const T, behavior_: ?*IUnknown, cookie_: ?*u32) HRESULT {
                return @as(*const IDirectManipulationViewport2.VTable, @ptrCast(self.vtable)).AddBehavior(@as(*const IDirectManipulationViewport2, @ptrCast(self)), behavior_, cookie_);
            }
            pub inline fn removeBehavior(self: *const T, cookie_: u32) HRESULT {
                return @as(*const IDirectManipulationViewport2.VTable, @ptrCast(self.vtable)).RemoveBehavior(@as(*const IDirectManipulationViewport2, @ptrCast(self)), cookie_);
            }
            pub inline fn removeAllBehaviors(self: *const T) HRESULT {
                return @as(*const IDirectManipulationViewport2.VTable, @ptrCast(self.vtable)).RemoveAllBehaviors(@as(*const IDirectManipulationViewport2, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDirectManipulationViewportEventHandler_Value = Guid.initString("952121da-d69f-45f9-b0f9-f23944321a6d");
pub const IID_IDirectManipulationViewportEventHandler = &IID_IDirectManipulationViewportEventHandler_Value;
pub const IDirectManipulationViewportEventHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnViewportStatusChanged: *const fn (
            self: *const IDirectManipulationViewportEventHandler,
            viewport: ?*IDirectManipulationViewport,
            current: DIRECTMANIPULATION_STATUS,
            previous: DIRECTMANIPULATION_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnViewportUpdated: *const fn (
            self: *const IDirectManipulationViewportEventHandler,
            viewport: ?*IDirectManipulationViewport,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnContentUpdated: *const fn (
            self: *const IDirectManipulationViewportEventHandler,
            viewport: ?*IDirectManipulationViewport,
            content: ?*IDirectManipulationContent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onViewportStatusChanged(self: *const T, viewport_: ?*IDirectManipulationViewport, current_: DIRECTMANIPULATION_STATUS, previous_: DIRECTMANIPULATION_STATUS) HRESULT {
                return @as(*const IDirectManipulationViewportEventHandler.VTable, @ptrCast(self.vtable)).OnViewportStatusChanged(@as(*const IDirectManipulationViewportEventHandler, @ptrCast(self)), viewport_, current_, previous_);
            }
            pub inline fn onViewportUpdated(self: *const T, viewport_: ?*IDirectManipulationViewport) HRESULT {
                return @as(*const IDirectManipulationViewportEventHandler.VTable, @ptrCast(self.vtable)).OnViewportUpdated(@as(*const IDirectManipulationViewportEventHandler, @ptrCast(self)), viewport_);
            }
            pub inline fn onContentUpdated(self: *const T, viewport_: ?*IDirectManipulationViewport, content_: ?*IDirectManipulationContent) HRESULT {
                return @as(*const IDirectManipulationViewportEventHandler.VTable, @ptrCast(self.vtable)).OnContentUpdated(@as(*const IDirectManipulationViewportEventHandler, @ptrCast(self)), viewport_, content_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDirectManipulationContent_Value = Guid.initString("b89962cb-3d89-442b-bb58-5098fa0f9f16");
pub const IID_IDirectManipulationContent = &IID_IDirectManipulationContent_Value;
pub const IDirectManipulationContent = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetContentRect: *const fn (
            self: *const IDirectManipulationContent,
            content_size: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContentRect: *const fn (
            self: *const IDirectManipulationContent,
            content_size: ?*const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewport: *const fn (
            self: *const IDirectManipulationContent,
            riid: ?*const Guid,
            object: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTag: *const fn (
            self: *const IDirectManipulationContent,
            riid: ?*const Guid,
            object: ?*?*anyopaque,
            id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTag: *const fn (
            self: *const IDirectManipulationContent,
            object: ?*IUnknown,
            id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputTransform: *const fn (
            self: *const IDirectManipulationContent,
            matrix: [*]f32,
            point_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContentTransform: *const fn (
            self: *const IDirectManipulationContent,
            matrix: [*]f32,
            point_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncContentTransform: *const fn (
            self: *const IDirectManipulationContent,
            matrix: [*]const f32,
            point_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getContentRect(self: *const T, content_size_: ?*RECT) HRESULT {
                return @as(*const IDirectManipulationContent.VTable, @ptrCast(self.vtable)).GetContentRect(@as(*const IDirectManipulationContent, @ptrCast(self)), content_size_);
            }
            pub inline fn setContentRect(self: *const T, content_size_: ?*const RECT) HRESULT {
                return @as(*const IDirectManipulationContent.VTable, @ptrCast(self.vtable)).SetContentRect(@as(*const IDirectManipulationContent, @ptrCast(self)), content_size_);
            }
            pub inline fn getViewport(self: *const T, riid_: ?*const Guid, object_: ?*?*anyopaque) HRESULT {
                return @as(*const IDirectManipulationContent.VTable, @ptrCast(self.vtable)).GetViewport(@as(*const IDirectManipulationContent, @ptrCast(self)), riid_, object_);
            }
            pub inline fn getTag(self: *const T, riid_: ?*const Guid, object_: ?*?*anyopaque, id_: ?*u32) HRESULT {
                return @as(*const IDirectManipulationContent.VTable, @ptrCast(self.vtable)).GetTag(@as(*const IDirectManipulationContent, @ptrCast(self)), riid_, object_, id_);
            }
            pub inline fn setTag(self: *const T, object_: ?*IUnknown, id_: u32) HRESULT {
                return @as(*const IDirectManipulationContent.VTable, @ptrCast(self.vtable)).SetTag(@as(*const IDirectManipulationContent, @ptrCast(self)), object_, id_);
            }
            pub inline fn getOutputTransform(self: *const T, matrix_: [*]f32, point_count_: u32) HRESULT {
                return @as(*const IDirectManipulationContent.VTable, @ptrCast(self.vtable)).GetOutputTransform(@as(*const IDirectManipulationContent, @ptrCast(self)), matrix_, point_count_);
            }
            pub inline fn getContentTransform(self: *const T, matrix_: [*]f32, point_count_: u32) HRESULT {
                return @as(*const IDirectManipulationContent.VTable, @ptrCast(self.vtable)).GetContentTransform(@as(*const IDirectManipulationContent, @ptrCast(self)), matrix_, point_count_);
            }
            pub inline fn syncContentTransform(self: *const T, matrix_: [*]const f32, point_count_: u32) HRESULT {
                return @as(*const IDirectManipulationContent.VTable, @ptrCast(self.vtable)).SyncContentTransform(@as(*const IDirectManipulationContent, @ptrCast(self)), matrix_, point_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDirectManipulationPrimaryContent_Value = Guid.initString("c12851e4-1698-4625-b9b1-7ca3ec18630b");
pub const IID_IDirectManipulationPrimaryContent = &IID_IDirectManipulationPrimaryContent_Value;
pub const IDirectManipulationPrimaryContent = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetSnapInterval: *const fn (
            self: *const IDirectManipulationPrimaryContent,
            motion: DIRECTMANIPULATION_MOTION_TYPES,
            interval: f32,
            offset: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSnapPoints: *const fn (
            self: *const IDirectManipulationPrimaryContent,
            motion: DIRECTMANIPULATION_MOTION_TYPES,
            points: ?[*]const f32,
            point_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSnapType: *const fn (
            self: *const IDirectManipulationPrimaryContent,
            motion: DIRECTMANIPULATION_MOTION_TYPES,
            type: DIRECTMANIPULATION_SNAPPOINT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSnapCoordinate: *const fn (
            self: *const IDirectManipulationPrimaryContent,
            motion: DIRECTMANIPULATION_MOTION_TYPES,
            coordinate: DIRECTMANIPULATION_SNAPPOINT_COORDINATE,
            origin: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetZoomBoundaries: *const fn (
            self: *const IDirectManipulationPrimaryContent,
            zoom_minimum: f32,
            zoom_maximum: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHorizontalAlignment: *const fn (
            self: *const IDirectManipulationPrimaryContent,
            alignment: DIRECTMANIPULATION_HORIZONTALALIGNMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVerticalAlignment: *const fn (
            self: *const IDirectManipulationPrimaryContent,
            alignment: DIRECTMANIPULATION_VERTICALALIGNMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInertiaEndTransform: *const fn (
            self: *const IDirectManipulationPrimaryContent,
            matrix: [*]f32,
            point_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCenterPoint: *const fn (
            self: *const IDirectManipulationPrimaryContent,
            center_x: ?*f32,
            center_y: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setSnapInterval(self: *const T, motion_: DIRECTMANIPULATION_MOTION_TYPES, interval_: f32, offset_: f32) HRESULT {
                return @as(*const IDirectManipulationPrimaryContent.VTable, @ptrCast(self.vtable)).SetSnapInterval(@as(*const IDirectManipulationPrimaryContent, @ptrCast(self)), motion_, interval_, offset_);
            }
            pub inline fn setSnapPoints(self: *const T, motion_: DIRECTMANIPULATION_MOTION_TYPES, points_: ?[*]const f32, point_count_: u32) HRESULT {
                return @as(*const IDirectManipulationPrimaryContent.VTable, @ptrCast(self.vtable)).SetSnapPoints(@as(*const IDirectManipulationPrimaryContent, @ptrCast(self)), motion_, points_, point_count_);
            }
            pub inline fn setSnapType(self: *const T, motion_: DIRECTMANIPULATION_MOTION_TYPES, type_: DIRECTMANIPULATION_SNAPPOINT_TYPE) HRESULT {
                return @as(*const IDirectManipulationPrimaryContent.VTable, @ptrCast(self.vtable)).SetSnapType(@as(*const IDirectManipulationPrimaryContent, @ptrCast(self)), motion_, type_);
            }
            pub inline fn setSnapCoordinate(self: *const T, motion_: DIRECTMANIPULATION_MOTION_TYPES, coordinate_: DIRECTMANIPULATION_SNAPPOINT_COORDINATE, origin_: f32) HRESULT {
                return @as(*const IDirectManipulationPrimaryContent.VTable, @ptrCast(self.vtable)).SetSnapCoordinate(@as(*const IDirectManipulationPrimaryContent, @ptrCast(self)), motion_, coordinate_, origin_);
            }
            pub inline fn setZoomBoundaries(self: *const T, zoom_minimum_: f32, zoom_maximum_: f32) HRESULT {
                return @as(*const IDirectManipulationPrimaryContent.VTable, @ptrCast(self.vtable)).SetZoomBoundaries(@as(*const IDirectManipulationPrimaryContent, @ptrCast(self)), zoom_minimum_, zoom_maximum_);
            }
            pub inline fn setHorizontalAlignment(self: *const T, alignment_: DIRECTMANIPULATION_HORIZONTALALIGNMENT) HRESULT {
                return @as(*const IDirectManipulationPrimaryContent.VTable, @ptrCast(self.vtable)).SetHorizontalAlignment(@as(*const IDirectManipulationPrimaryContent, @ptrCast(self)), alignment_);
            }
            pub inline fn setVerticalAlignment(self: *const T, alignment_: DIRECTMANIPULATION_VERTICALALIGNMENT) HRESULT {
                return @as(*const IDirectManipulationPrimaryContent.VTable, @ptrCast(self.vtable)).SetVerticalAlignment(@as(*const IDirectManipulationPrimaryContent, @ptrCast(self)), alignment_);
            }
            pub inline fn getInertiaEndTransform(self: *const T, matrix_: [*]f32, point_count_: u32) HRESULT {
                return @as(*const IDirectManipulationPrimaryContent.VTable, @ptrCast(self.vtable)).GetInertiaEndTransform(@as(*const IDirectManipulationPrimaryContent, @ptrCast(self)), matrix_, point_count_);
            }
            pub inline fn getCenterPoint(self: *const T, center_x_: ?*f32, center_y_: ?*f32) HRESULT {
                return @as(*const IDirectManipulationPrimaryContent.VTable, @ptrCast(self.vtable)).GetCenterPoint(@as(*const IDirectManipulationPrimaryContent, @ptrCast(self)), center_x_, center_y_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DIRECTMANIPULATION_DRAG_DROP_STATUS = enum(i32) {
    READY = 0,
    PRESELECT = 1,
    SELECTING = 2,
    DRAGGING = 3,
    CANCELLED = 4,
    COMMITTED = 5,
};
pub const DIRECTMANIPULATION_DRAG_DROP_READY = DIRECTMANIPULATION_DRAG_DROP_STATUS.READY;
pub const DIRECTMANIPULATION_DRAG_DROP_PRESELECT = DIRECTMANIPULATION_DRAG_DROP_STATUS.PRESELECT;
pub const DIRECTMANIPULATION_DRAG_DROP_SELECTING = DIRECTMANIPULATION_DRAG_DROP_STATUS.SELECTING;
pub const DIRECTMANIPULATION_DRAG_DROP_DRAGGING = DIRECTMANIPULATION_DRAG_DROP_STATUS.DRAGGING;
pub const DIRECTMANIPULATION_DRAG_DROP_CANCELLED = DIRECTMANIPULATION_DRAG_DROP_STATUS.CANCELLED;
pub const DIRECTMANIPULATION_DRAG_DROP_COMMITTED = DIRECTMANIPULATION_DRAG_DROP_STATUS.COMMITTED;

// TODO: this type is limited to platform 'windows8.1'
const IID_IDirectManipulationDragDropEventHandler_Value = Guid.initString("1fa11b10-701b-41ae-b5f2-49e36bd595aa");
pub const IID_IDirectManipulationDragDropEventHandler = &IID_IDirectManipulationDragDropEventHandler_Value;
pub const IDirectManipulationDragDropEventHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnDragDropStatusChange: *const fn (
            self: *const IDirectManipulationDragDropEventHandler,
            viewport: ?*IDirectManipulationViewport2,
            current: DIRECTMANIPULATION_DRAG_DROP_STATUS,
            previous: DIRECTMANIPULATION_DRAG_DROP_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onDragDropStatusChange(self: *const T, viewport_: ?*IDirectManipulationViewport2, current_: DIRECTMANIPULATION_DRAG_DROP_STATUS, previous_: DIRECTMANIPULATION_DRAG_DROP_STATUS) HRESULT {
                return @as(*const IDirectManipulationDragDropEventHandler.VTable, @ptrCast(self.vtable)).OnDragDropStatusChange(@as(*const IDirectManipulationDragDropEventHandler, @ptrCast(self)), viewport_, current_, previous_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION = enum(i32) {
    VERTICAL = 1,
    HORIZONTAL = 2,
    SELECT_ONLY = 16,
    SELECT_DRAG = 32,
    HOLD_DRAG = 64,
};
pub const DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION_VERTICAL = DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION.VERTICAL;
pub const DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION_HORIZONTAL = DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION.HORIZONTAL;
pub const DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION_SELECT_ONLY = DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION.SELECT_ONLY;
pub const DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION_SELECT_DRAG = DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION.SELECT_DRAG;
pub const DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION_HOLD_DRAG = DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION.HOLD_DRAG;

// TODO: this type is limited to platform 'windows8.1'
const IID_IDirectManipulationDragDropBehavior_Value = Guid.initString("814b5af5-c2c8-4270-a9b7-a198ce8d02fa");
pub const IID_IDirectManipulationDragDropBehavior = &IID_IDirectManipulationDragDropBehavior_Value;
pub const IDirectManipulationDragDropBehavior = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetConfiguration: *const fn (
            self: *const IDirectManipulationDragDropBehavior,
            configuration: DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn (
            self: *const IDirectManipulationDragDropBehavior,
            status: ?*DIRECTMANIPULATION_DRAG_DROP_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setConfiguration(self: *const T, configuration_: DIRECTMANIPULATION_DRAG_DROP_CONFIGURATION) HRESULT {
                return @as(*const IDirectManipulationDragDropBehavior.VTable, @ptrCast(self.vtable)).SetConfiguration(@as(*const IDirectManipulationDragDropBehavior, @ptrCast(self)), configuration_);
            }
            pub inline fn getStatus(self: *const T, status_: ?*DIRECTMANIPULATION_DRAG_DROP_STATUS) HRESULT {
                return @as(*const IDirectManipulationDragDropBehavior.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IDirectManipulationDragDropBehavior, @ptrCast(self)), status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DIRECTMANIPULATION_INTERACTION_TYPE = enum(i32) {
    BEGIN = 0,
    TYPE_MANIPULATION = 1,
    TYPE_GESTURE_TAP = 2,
    TYPE_GESTURE_HOLD = 3,
    TYPE_GESTURE_CROSS_SLIDE = 4,
    TYPE_GESTURE_PINCH_ZOOM = 5,
    END = 100,
};
pub const DIRECTMANIPULATION_INTERACTION_BEGIN = DIRECTMANIPULATION_INTERACTION_TYPE.BEGIN;
pub const DIRECTMANIPULATION_INTERACTION_TYPE_MANIPULATION = DIRECTMANIPULATION_INTERACTION_TYPE.TYPE_MANIPULATION;
pub const DIRECTMANIPULATION_INTERACTION_TYPE_GESTURE_TAP = DIRECTMANIPULATION_INTERACTION_TYPE.TYPE_GESTURE_TAP;
pub const DIRECTMANIPULATION_INTERACTION_TYPE_GESTURE_HOLD = DIRECTMANIPULATION_INTERACTION_TYPE.TYPE_GESTURE_HOLD;
pub const DIRECTMANIPULATION_INTERACTION_TYPE_GESTURE_CROSS_SLIDE = DIRECTMANIPULATION_INTERACTION_TYPE.TYPE_GESTURE_CROSS_SLIDE;
pub const DIRECTMANIPULATION_INTERACTION_TYPE_GESTURE_PINCH_ZOOM = DIRECTMANIPULATION_INTERACTION_TYPE.TYPE_GESTURE_PINCH_ZOOM;
pub const DIRECTMANIPULATION_INTERACTION_END = DIRECTMANIPULATION_INTERACTION_TYPE.END;

// TODO: this type is limited to platform 'windows8.1'
const IID_IDirectManipulationInteractionEventHandler_Value = Guid.initString("e43f45b8-42b4-403e-b1f2-273b8f510830");
pub const IID_IDirectManipulationInteractionEventHandler = &IID_IDirectManipulationInteractionEventHandler_Value;
pub const IDirectManipulationInteractionEventHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnInteraction: *const fn (
            self: *const IDirectManipulationInteractionEventHandler,
            viewport: ?*IDirectManipulationViewport2,
            interaction: DIRECTMANIPULATION_INTERACTION_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onInteraction(self: *const T, viewport_: ?*IDirectManipulationViewport2, interaction_: DIRECTMANIPULATION_INTERACTION_TYPE) HRESULT {
                return @as(*const IDirectManipulationInteractionEventHandler.VTable, @ptrCast(self.vtable)).OnInteraction(@as(*const IDirectManipulationInteractionEventHandler, @ptrCast(self)), viewport_, interaction_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDirectManipulationFrameInfoProvider_Value = Guid.initString("fb759dba-6f4c-4c01-874e-19c8a05907f9");
pub const IID_IDirectManipulationFrameInfoProvider = &IID_IDirectManipulationFrameInfoProvider_Value;
pub const IDirectManipulationFrameInfoProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNextFrameInfo: *const fn (
            self: *const IDirectManipulationFrameInfoProvider,
            time: ?*u64,
            process_time: ?*u64,
            composition_time: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getNextFrameInfo(self: *const T, time_: ?*u64, process_time_: ?*u64, composition_time_: ?*u64) HRESULT {
                return @as(*const IDirectManipulationFrameInfoProvider.VTable, @ptrCast(self.vtable)).GetNextFrameInfo(@as(*const IDirectManipulationFrameInfoProvider, @ptrCast(self)), time_, process_time_, composition_time_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDirectManipulationCompositor_Value = Guid.initString("537a0825-0387-4efa-b62f-71eb1f085a7e");
pub const IID_IDirectManipulationCompositor = &IID_IDirectManipulationCompositor_Value;
pub const IDirectManipulationCompositor = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddContent: *const fn (
            self: *const IDirectManipulationCompositor,
            content: ?*IDirectManipulationContent,
            device: ?*IUnknown,
            parent_visual: ?*IUnknown,
            child_visual: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveContent: *const fn (
            self: *const IDirectManipulationCompositor,
            content: ?*IDirectManipulationContent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUpdateManager: *const fn (
            self: *const IDirectManipulationCompositor,
            update_manager: ?*IDirectManipulationUpdateManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Flush: *const fn (
            self: *const IDirectManipulationCompositor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addContent(self: *const T, content_: ?*IDirectManipulationContent, device_: ?*IUnknown, parent_visual_: ?*IUnknown, child_visual_: ?*IUnknown) HRESULT {
                return @as(*const IDirectManipulationCompositor.VTable, @ptrCast(self.vtable)).AddContent(@as(*const IDirectManipulationCompositor, @ptrCast(self)), content_, device_, parent_visual_, child_visual_);
            }
            pub inline fn removeContent(self: *const T, content_: ?*IDirectManipulationContent) HRESULT {
                return @as(*const IDirectManipulationCompositor.VTable, @ptrCast(self.vtable)).RemoveContent(@as(*const IDirectManipulationCompositor, @ptrCast(self)), content_);
            }
            pub inline fn setUpdateManager(self: *const T, update_manager_: ?*IDirectManipulationUpdateManager) HRESULT {
                return @as(*const IDirectManipulationCompositor.VTable, @ptrCast(self.vtable)).SetUpdateManager(@as(*const IDirectManipulationCompositor, @ptrCast(self)), update_manager_);
            }
            pub inline fn flush(self: *const T) HRESULT {
                return @as(*const IDirectManipulationCompositor.VTable, @ptrCast(self.vtable)).Flush(@as(*const IDirectManipulationCompositor, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IDirectManipulationCompositor2_Value = Guid.initString("d38c7822-f1cb-43cb-b4b9-ac0c767a412e");
pub const IID_IDirectManipulationCompositor2 = &IID_IDirectManipulationCompositor2_Value;
pub const IDirectManipulationCompositor2 = extern struct {
    pub const VTable = extern struct {
        base: IDirectManipulationCompositor.VTable,
        AddContentWithCrossProcessChaining: *const fn (
            self: *const IDirectManipulationCompositor2,
            content: ?*IDirectManipulationPrimaryContent,
            device: ?*IUnknown,
            parent_visual: ?*IUnknown,
            child_visual: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDirectManipulationCompositor.MethodMixin(T);
            pub inline fn addContentWithCrossProcessChaining(self: *const T, content_: ?*IDirectManipulationPrimaryContent, device_: ?*IUnknown, parent_visual_: ?*IUnknown, child_visual_: ?*IUnknown) HRESULT {
                return @as(*const IDirectManipulationCompositor2.VTable, @ptrCast(self.vtable)).AddContentWithCrossProcessChaining(@as(*const IDirectManipulationCompositor2, @ptrCast(self)), content_, device_, parent_visual_, child_visual_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDirectManipulationUpdateHandler_Value = Guid.initString("790b6337-64f8-4ff5-a269-b32bc2af27a7");
pub const IID_IDirectManipulationUpdateHandler = &IID_IDirectManipulationUpdateHandler_Value;
pub const IDirectManipulationUpdateHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Update: *const fn (
            self: *const IDirectManipulationUpdateHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn update(self: *const T) HRESULT {
                return @as(*const IDirectManipulationUpdateHandler.VTable, @ptrCast(self.vtable)).Update(@as(*const IDirectManipulationUpdateHandler, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDirectManipulationUpdateManager_Value = Guid.initString("b0ae62fd-be34-46e7-9caa-d361facbb9cc");
pub const IID_IDirectManipulationUpdateManager = &IID_IDirectManipulationUpdateManager_Value;
pub const IDirectManipulationUpdateManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterWaitHandleCallback: *const fn (
            self: *const IDirectManipulationUpdateManager,
            handle: ?HANDLE,
            event_handler: ?*IDirectManipulationUpdateHandler,
            cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterWaitHandleCallback: *const fn (
            self: *const IDirectManipulationUpdateManager,
            cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: *const fn (
            self: *const IDirectManipulationUpdateManager,
            frame_info: ?*IDirectManipulationFrameInfoProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn registerWaitHandleCallback(self: *const T, handle_: ?HANDLE, event_handler_: ?*IDirectManipulationUpdateHandler, cookie_: ?*u32) HRESULT {
                return @as(*const IDirectManipulationUpdateManager.VTable, @ptrCast(self.vtable)).RegisterWaitHandleCallback(@as(*const IDirectManipulationUpdateManager, @ptrCast(self)), handle_, event_handler_, cookie_);
            }
            pub inline fn unregisterWaitHandleCallback(self: *const T, cookie_: u32) HRESULT {
                return @as(*const IDirectManipulationUpdateManager.VTable, @ptrCast(self.vtable)).UnregisterWaitHandleCallback(@as(*const IDirectManipulationUpdateManager, @ptrCast(self)), cookie_);
            }
            pub inline fn update(self: *const T, frame_info_: ?*IDirectManipulationFrameInfoProvider) HRESULT {
                return @as(*const IDirectManipulationUpdateManager.VTable, @ptrCast(self.vtable)).Update(@as(*const IDirectManipulationUpdateManager, @ptrCast(self)), frame_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION = enum(i32) {
    STOP = 0,
    FORWARD = 1,
    REVERSE = 2,
};
pub const DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION_STOP = DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION.STOP;
pub const DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION_FORWARD = DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION.FORWARD;
pub const DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION_REVERSE = DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION.REVERSE;

// TODO: this type is limited to platform 'windows8.1'
const IID_IDirectManipulationAutoScrollBehavior_Value = Guid.initString("6d5954d4-2003-4356-9b31-d051c9ff0af7");
pub const IID_IDirectManipulationAutoScrollBehavior = &IID_IDirectManipulationAutoScrollBehavior_Value;
pub const IDirectManipulationAutoScrollBehavior = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetConfiguration: *const fn (
            self: *const IDirectManipulationAutoScrollBehavior,
            motion_types: DIRECTMANIPULATION_MOTION_TYPES,
            scroll_motion: DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setConfiguration(self: *const T, motion_types_: DIRECTMANIPULATION_MOTION_TYPES, scroll_motion_: DIRECTMANIPULATION_AUTOSCROLL_CONFIGURATION) HRESULT {
                return @as(*const IDirectManipulationAutoScrollBehavior.VTable, @ptrCast(self.vtable)).SetConfiguration(@as(*const IDirectManipulationAutoScrollBehavior, @ptrCast(self)), motion_types_, scroll_motion_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IDirectManipulationDeferContactService_Value = Guid.initString("652d5c71-fe60-4a98-be70-e5f21291e7f1");
pub const IID_IDirectManipulationDeferContactService = &IID_IDirectManipulationDeferContactService_Value;
pub const IDirectManipulationDeferContactService = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DeferContact: *const fn (
            self: *const IDirectManipulationDeferContactService,
            pointer_id: u32,
            timeout: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelContact: *const fn (
            self: *const IDirectManipulationDeferContactService,
            pointer_id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelDeferral: *const fn (
            self: *const IDirectManipulationDeferContactService,
            pointer_id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn deferContact(self: *const T, pointer_id_: u32, timeout_: u32) HRESULT {
                return @as(*const IDirectManipulationDeferContactService.VTable, @ptrCast(self.vtable)).DeferContact(@as(*const IDirectManipulationDeferContactService, @ptrCast(self)), pointer_id_, timeout_);
            }
            pub inline fn cancelContact(self: *const T, pointer_id_: u32) HRESULT {
                return @as(*const IDirectManipulationDeferContactService.VTable, @ptrCast(self.vtable)).CancelContact(@as(*const IDirectManipulationDeferContactService, @ptrCast(self)), pointer_id_);
            }
            pub inline fn cancelDeferral(self: *const T, pointer_id_: u32) HRESULT {
                return @as(*const IDirectManipulationDeferContactService.VTable, @ptrCast(self.vtable)).CancelDeferral(@as(*const IDirectManipulationDeferContactService, @ptrCast(self)), pointer_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (8)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const HANDLE = @import("../foundation.zig").HANDLE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IUnknown = @import("../system/com.zig").IUnknown;
const MSG = @import("../ui/windows_and_messaging.zig").MSG;
const RECT = @import("../foundation.zig").RECT;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
