//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (69)
//--------------------------------------------------------------------------------
pub const D2D1_DEFAULT_FLATTENING_TOLERANCE = @as(f32, 2.5e-01);
pub const CLSID_D2D12DAffineTransform = Guid.initString("6aa97485-6354-4cfc-908c-e4a74f62c96c");
pub const CLSID_D2D13DPerspectiveTransform = Guid.initString("c2844d0b-3d86-46e7-85ba-526c9240f3fb");
pub const CLSID_D2D13DTransform = Guid.initString("e8467b04-ec61-4b8a-b5de-d4d73debea5a");
pub const CLSID_D2D1ArithmeticComposite = Guid.initString("fc151437-049a-4784-a24a-f1c4daf20987");
pub const CLSID_D2D1Atlas = Guid.initString("913e2be4-fdcf-4fe2-a5f0-2454f14ff408");
pub const CLSID_D2D1BitmapSource = Guid.initString("5fb6c24d-c6dd-4231-9404-50f4d5c3252d");
pub const CLSID_D2D1Blend = Guid.initString("81c5b77b-13f8-4cdd-ad20-c890547ac65d");
pub const CLSID_D2D1Border = Guid.initString("2a2d49c0-4acf-43c7-8c6a-7c4a27874d27");
pub const CLSID_D2D1Brightness = Guid.initString("8cea8d1e-77b0-4986-b3b9-2f0c0eae7887");
pub const CLSID_D2D1ColorManagement = Guid.initString("1a28524c-fdd6-4aa4-ae8f-837eb8267b37");
pub const CLSID_D2D1ColorMatrix = Guid.initString("921f03d6-641c-47df-852d-b4bb6153ae11");
pub const CLSID_D2D1Composite = Guid.initString("48fc9f51-f6ac-48f1-8b58-3b28ac46f76d");
pub const CLSID_D2D1ConvolveMatrix = Guid.initString("407f8c08-5533-4331-a341-23cc3877843e");
pub const CLSID_D2D1Crop = Guid.initString("e23f7110-0e9a-4324-af47-6a2c0c46f35b");
pub const CLSID_D2D1DirectionalBlur = Guid.initString("174319a6-58e9-49b2-bb63-caf2c811a3db");
pub const CLSID_D2D1DiscreteTransfer = Guid.initString("90866fcd-488e-454b-af06-e5041b66c36c");
pub const CLSID_D2D1DisplacementMap = Guid.initString("edc48364-0417-4111-9450-43845fa9f890");
pub const CLSID_D2D1DistantDiffuse = Guid.initString("3e7efd62-a32d-46d4-a83c-5278889ac954");
pub const CLSID_D2D1DistantSpecular = Guid.initString("428c1ee5-77b8-4450-8ab5-72219c21abda");
pub const CLSID_D2D1DpiCompensation = Guid.initString("6c26c5c7-34e0-46fc-9cfd-e5823706e228");
pub const CLSID_D2D1Flood = Guid.initString("61c23c20-ae69-4d8e-94cf-50078df638f2");
pub const CLSID_D2D1GammaTransfer = Guid.initString("409444c4-c419-41a0-b0c1-8cd0c0a18e42");
pub const CLSID_D2D1GaussianBlur = Guid.initString("1feb6d69-2fe6-4ac9-8c58-1d7f93e7a6a5");
pub const CLSID_D2D1Scale = Guid.initString("9daf9369-3846-4d0e-a44e-0c607934a5d7");
pub const CLSID_D2D1Histogram = Guid.initString("881db7d0-f7ee-4d4d-a6d2-4697acc66ee8");
pub const CLSID_D2D1HueRotation = Guid.initString("0f4458ec-4b32-491b-9e85-bd73f44d3eb6");
pub const CLSID_D2D1LinearTransfer = Guid.initString("ad47c8fd-63ef-4acc-9b51-67979c036c06");
pub const CLSID_D2D1LuminanceToAlpha = Guid.initString("41251ab7-0beb-46f8-9da7-59e93fcce5de");
pub const CLSID_D2D1Morphology = Guid.initString("eae6c40d-626a-4c2d-bfcb-391001abe202");
pub const CLSID_D2D1OpacityMetadata = Guid.initString("6c53006a-4450-4199-aa5b-ad1656fece5e");
pub const CLSID_D2D1PointDiffuse = Guid.initString("b9e303c3-c08c-4f91-8b7b-38656bc48c20");
pub const CLSID_D2D1PointSpecular = Guid.initString("09c3ca26-3ae2-4f09-9ebc-ed3865d53f22");
pub const CLSID_D2D1Premultiply = Guid.initString("06eab419-deed-4018-80d2-3e1d471adeb2");
pub const CLSID_D2D1Saturation = Guid.initString("5cb2d9cf-327d-459f-a0ce-40c0b2086bf7");
pub const CLSID_D2D1Shadow = Guid.initString("c67ea361-1863-4e69-89db-695d3e9a5b6b");
pub const CLSID_D2D1SpotDiffuse = Guid.initString("818a1105-7932-44f4-aa86-08ae7b2f2c93");
pub const CLSID_D2D1SpotSpecular = Guid.initString("edae421e-7654-4a37-9db8-71acc1beb3c1");
pub const CLSID_D2D1TableTransfer = Guid.initString("5bf818c3-5e43-48cb-b631-868396d6a1d4");
pub const CLSID_D2D1Tile = Guid.initString("b0784138-3b76-4bc5-b13b-0fa2ad02659f");
pub const CLSID_D2D1Turbulence = Guid.initString("cf2bb6ae-889a-4ad7-ba29-a2fd732c9fc9");
pub const CLSID_D2D1UnPremultiply = Guid.initString("fb9ac489-ad8d-41ed-9999-bb6347d110f7");
pub const CLSID_D2D1YCbCr = Guid.initString("99503cc1-66c7-45c9-a875-8ad8a7914401");
pub const CLSID_D2D1Contrast = Guid.initString("b648a78a-0ed5-4f80-a94a-8e825aca6b77");
pub const CLSID_D2D1RgbToHue = Guid.initString("23f3e5ec-91e8-4d3d-ad0a-afadc1004aa1");
pub const CLSID_D2D1HueToRgb = Guid.initString("7b78a6bd-0141-4def-8a52-6356ee0cbdd5");
pub const CLSID_D2D1ChromaKey = Guid.initString("74c01f5b-2a0d-408c-88e2-c7a3c7197742");
pub const CLSID_D2D1Emboss = Guid.initString("b1c5eb2b-0348-43f0-8107-4957cacba2ae");
pub const CLSID_D2D1Exposure = Guid.initString("b56c8cfa-f634-41ee-bee0-ffa617106004");
pub const CLSID_D2D1Grayscale = Guid.initString("36dde0eb-3725-42e0-836d-52fb20aee644");
pub const CLSID_D2D1Invert = Guid.initString("e0c3784d-cb39-4e84-b6fd-6b72f0810263");
pub const CLSID_D2D1Posterize = Guid.initString("2188945e-33a3-4366-b7bc-086bd02d0884");
pub const CLSID_D2D1Sepia = Guid.initString("3a1af410-5f1d-4dbe-84df-915da79b7153");
pub const CLSID_D2D1Sharpen = Guid.initString("c9b887cb-c5ff-4dc5-9779-273dcf417c7d");
pub const CLSID_D2D1Straighten = Guid.initString("4da47b12-79a3-4fb0-8237-bbc3b2a4de08");
pub const CLSID_D2D1TemperatureTint = Guid.initString("89176087-8af9-4a08-aeb1-895f38db1766");
pub const CLSID_D2D1Vignette = Guid.initString("c00c40be-5e67-4ca3-95b4-f4b02c115135");
pub const CLSID_D2D1EdgeDetection = Guid.initString("eff583ca-cb07-4aa9-ac5d-2cc44c76460f");
pub const CLSID_D2D1HighlightsShadows = Guid.initString("cadc8384-323f-4c7e-a361-2e2b24df6ee4");
pub const CLSID_D2D1LookupTable3D = Guid.initString("349e0eda-0088-4a79-9ca3-c7e300202020");
pub const CLSID_D2D1Opacity = Guid.initString("811d79a4-de28-4454-8094-c64685f8bd4c");
pub const CLSID_D2D1AlphaMask = Guid.initString("c80ecff0-3fd5-4f05-8328-c5d1724b4f0a");
pub const CLSID_D2D1CrossFade = Guid.initString("12f575e8-4db1-485f-9a84-03a07dd3829f");
pub const CLSID_D2D1Tint = Guid.initString("36312b17-f7dd-4014-915d-ffca768cf211");
pub const D2D1_SCENE_REFERRED_SDR_WHITE_LEVEL = @as(f32, 80);
pub const CLSID_D2D1WhiteLevelAdjustment = Guid.initString("44a1cadb-6cdd-4818-8ff4-26c1cfe95bdb");
pub const CLSID_D2D1HdrToneMap = Guid.initString("7b0b748d-4610-4486-a90c-999d9a2e2b11");
pub const D2D1_APPEND_ALIGNED_ELEMENT = @as(u32, 4294967295);
pub const FACILITY_D2D = @as(u32, 2201);

//--------------------------------------------------------------------------------
// Section: Types (330)
//--------------------------------------------------------------------------------
pub const D2D1_INTERPOLATION_MODE_DEFINITION = enum(i32) {
    NEAREST_NEIGHBOR = 0,
    LINEAR = 1,
    CUBIC = 2,
    MULTI_SAMPLE_LINEAR = 3,
    ANISOTROPIC = 4,
    HIGH_QUALITY_CUBIC = 5,
    FANT = 6,
    MIPMAP_LINEAR = 7,
};
pub const D2D1_INTERPOLATION_MODE_DEFINITION_NEAREST_NEIGHBOR = D2D1_INTERPOLATION_MODE_DEFINITION.NEAREST_NEIGHBOR;
pub const D2D1_INTERPOLATION_MODE_DEFINITION_LINEAR = D2D1_INTERPOLATION_MODE_DEFINITION.LINEAR;
pub const D2D1_INTERPOLATION_MODE_DEFINITION_CUBIC = D2D1_INTERPOLATION_MODE_DEFINITION.CUBIC;
pub const D2D1_INTERPOLATION_MODE_DEFINITION_MULTI_SAMPLE_LINEAR = D2D1_INTERPOLATION_MODE_DEFINITION.MULTI_SAMPLE_LINEAR;
pub const D2D1_INTERPOLATION_MODE_DEFINITION_ANISOTROPIC = D2D1_INTERPOLATION_MODE_DEFINITION.ANISOTROPIC;
pub const D2D1_INTERPOLATION_MODE_DEFINITION_HIGH_QUALITY_CUBIC = D2D1_INTERPOLATION_MODE_DEFINITION.HIGH_QUALITY_CUBIC;
pub const D2D1_INTERPOLATION_MODE_DEFINITION_FANT = D2D1_INTERPOLATION_MODE_DEFINITION.FANT;
pub const D2D1_INTERPOLATION_MODE_DEFINITION_MIPMAP_LINEAR = D2D1_INTERPOLATION_MODE_DEFINITION.MIPMAP_LINEAR;

pub const D2D1_GAMMA = enum(u32) {
    @"2_2" = 0,
    @"1_0" = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_GAMMA_2_2 = D2D1_GAMMA.@"2_2";
pub const D2D1_GAMMA_1_0 = D2D1_GAMMA.@"1_0";
pub const D2D1_GAMMA_FORCE_DWORD = D2D1_GAMMA.FORCE_DWORD;

pub const D2D1_OPACITY_MASK_CONTENT = enum(u32) {
    GRAPHICS = 0,
    TEXT_NATURAL = 1,
    TEXT_GDI_COMPATIBLE = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_OPACITY_MASK_CONTENT_GRAPHICS = D2D1_OPACITY_MASK_CONTENT.GRAPHICS;
pub const D2D1_OPACITY_MASK_CONTENT_TEXT_NATURAL = D2D1_OPACITY_MASK_CONTENT.TEXT_NATURAL;
pub const D2D1_OPACITY_MASK_CONTENT_TEXT_GDI_COMPATIBLE = D2D1_OPACITY_MASK_CONTENT.TEXT_GDI_COMPATIBLE;
pub const D2D1_OPACITY_MASK_CONTENT_FORCE_DWORD = D2D1_OPACITY_MASK_CONTENT.FORCE_DWORD;

pub const D2D1_EXTEND_MODE = enum(u32) {
    CLAMP = 0,
    WRAP = 1,
    MIRROR = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_EXTEND_MODE_CLAMP = D2D1_EXTEND_MODE.CLAMP;
pub const D2D1_EXTEND_MODE_WRAP = D2D1_EXTEND_MODE.WRAP;
pub const D2D1_EXTEND_MODE_MIRROR = D2D1_EXTEND_MODE.MIRROR;
pub const D2D1_EXTEND_MODE_FORCE_DWORD = D2D1_EXTEND_MODE.FORCE_DWORD;

pub const D2D1_ANTIALIAS_MODE = enum(u32) {
    PER_PRIMITIVE = 0,
    ALIASED = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_ANTIALIAS_MODE_PER_PRIMITIVE = D2D1_ANTIALIAS_MODE.PER_PRIMITIVE;
pub const D2D1_ANTIALIAS_MODE_ALIASED = D2D1_ANTIALIAS_MODE.ALIASED;
pub const D2D1_ANTIALIAS_MODE_FORCE_DWORD = D2D1_ANTIALIAS_MODE.FORCE_DWORD;

pub const D2D1_TEXT_ANTIALIAS_MODE = enum(u32) {
    DEFAULT = 0,
    CLEARTYPE = 1,
    GRAYSCALE = 2,
    ALIASED = 3,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_TEXT_ANTIALIAS_MODE_DEFAULT = D2D1_TEXT_ANTIALIAS_MODE.DEFAULT;
pub const D2D1_TEXT_ANTIALIAS_MODE_CLEARTYPE = D2D1_TEXT_ANTIALIAS_MODE.CLEARTYPE;
pub const D2D1_TEXT_ANTIALIAS_MODE_GRAYSCALE = D2D1_TEXT_ANTIALIAS_MODE.GRAYSCALE;
pub const D2D1_TEXT_ANTIALIAS_MODE_ALIASED = D2D1_TEXT_ANTIALIAS_MODE.ALIASED;
pub const D2D1_TEXT_ANTIALIAS_MODE_FORCE_DWORD = D2D1_TEXT_ANTIALIAS_MODE.FORCE_DWORD;

pub const D2D1_BITMAP_INTERPOLATION_MODE = enum(u32) {
    NEAREST_NEIGHBOR = 0,
    LINEAR = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR = D2D1_BITMAP_INTERPOLATION_MODE.NEAREST_NEIGHBOR;
pub const D2D1_BITMAP_INTERPOLATION_MODE_LINEAR = D2D1_BITMAP_INTERPOLATION_MODE.LINEAR;
pub const D2D1_BITMAP_INTERPOLATION_MODE_FORCE_DWORD = D2D1_BITMAP_INTERPOLATION_MODE.FORCE_DWORD;

pub const D2D1_DRAW_TEXT_OPTIONS = enum(u32) {
    NO_SNAP = 1,
    CLIP = 2,
    ENABLE_COLOR_FONT = 4,
    DISABLE_COLOR_BITMAP_SNAPPING = 8,
    NONE = 0,
    FORCE_DWORD = 4294967295,
    _,
    pub fn initFlags(o: struct {
        NO_SNAP: u1 = 0,
        CLIP: u1 = 0,
        ENABLE_COLOR_FONT: u1 = 0,
        DISABLE_COLOR_BITMAP_SNAPPING: u1 = 0,
        NONE: u1 = 0,
        FORCE_DWORD: u1 = 0,
    }) D2D1_DRAW_TEXT_OPTIONS {
        return @as(D2D1_DRAW_TEXT_OPTIONS, @enumFromInt((if (o.NO_SNAP == 1) @intFromEnum(D2D1_DRAW_TEXT_OPTIONS.NO_SNAP) else 0) | (if (o.CLIP == 1) @intFromEnum(D2D1_DRAW_TEXT_OPTIONS.CLIP) else 0) | (if (o.ENABLE_COLOR_FONT == 1) @intFromEnum(D2D1_DRAW_TEXT_OPTIONS.ENABLE_COLOR_FONT) else 0) | (if (o.DISABLE_COLOR_BITMAP_SNAPPING == 1) @intFromEnum(D2D1_DRAW_TEXT_OPTIONS.DISABLE_COLOR_BITMAP_SNAPPING) else 0) | (if (o.NONE == 1) @intFromEnum(D2D1_DRAW_TEXT_OPTIONS.NONE) else 0) | (if (o.FORCE_DWORD == 1) @intFromEnum(D2D1_DRAW_TEXT_OPTIONS.FORCE_DWORD) else 0)));
    }
};
pub const D2D1_DRAW_TEXT_OPTIONS_NO_SNAP = D2D1_DRAW_TEXT_OPTIONS.NO_SNAP;
pub const D2D1_DRAW_TEXT_OPTIONS_CLIP = D2D1_DRAW_TEXT_OPTIONS.CLIP;
pub const D2D1_DRAW_TEXT_OPTIONS_ENABLE_COLOR_FONT = D2D1_DRAW_TEXT_OPTIONS.ENABLE_COLOR_FONT;
pub const D2D1_DRAW_TEXT_OPTIONS_DISABLE_COLOR_BITMAP_SNAPPING = D2D1_DRAW_TEXT_OPTIONS.DISABLE_COLOR_BITMAP_SNAPPING;
pub const D2D1_DRAW_TEXT_OPTIONS_NONE = D2D1_DRAW_TEXT_OPTIONS.NONE;
pub const D2D1_DRAW_TEXT_OPTIONS_FORCE_DWORD = D2D1_DRAW_TEXT_OPTIONS.FORCE_DWORD;

pub const D2D1_BITMAP_PROPERTIES = extern struct {
    pixelFormat: D2D1_PIXEL_FORMAT,
    dpiX: f32,
    dpiY: f32,
};

pub const D2D1_GRADIENT_STOP = extern struct {
    position: f32,
    color: D2D1_COLOR_F,
};

pub const D2D1_BRUSH_PROPERTIES = extern struct {
    opacity: f32,
    transform: D2D_MATRIX_3X2_F,
};

pub const D2D1_BITMAP_BRUSH_PROPERTIES = extern struct {
    extendModeX: D2D1_EXTEND_MODE,
    extendModeY: D2D1_EXTEND_MODE,
    interpolationMode: D2D1_BITMAP_INTERPOLATION_MODE,
};

pub const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES = extern struct {
    startPoint: D2D_POINT_2F,
    endPoint: D2D_POINT_2F,
};

pub const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES = extern struct {
    center: D2D_POINT_2F,
    gradientOriginOffset: D2D_POINT_2F,
    radiusX: f32,
    radiusY: f32,
};

pub const D2D1_ARC_SIZE = enum(u32) {
    SMALL = 0,
    LARGE = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_ARC_SIZE_SMALL = D2D1_ARC_SIZE.SMALL;
pub const D2D1_ARC_SIZE_LARGE = D2D1_ARC_SIZE.LARGE;
pub const D2D1_ARC_SIZE_FORCE_DWORD = D2D1_ARC_SIZE.FORCE_DWORD;

pub const D2D1_CAP_STYLE = enum(u32) {
    FLAT = 0,
    SQUARE = 1,
    ROUND = 2,
    TRIANGLE = 3,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_CAP_STYLE_FLAT = D2D1_CAP_STYLE.FLAT;
pub const D2D1_CAP_STYLE_SQUARE = D2D1_CAP_STYLE.SQUARE;
pub const D2D1_CAP_STYLE_ROUND = D2D1_CAP_STYLE.ROUND;
pub const D2D1_CAP_STYLE_TRIANGLE = D2D1_CAP_STYLE.TRIANGLE;
pub const D2D1_CAP_STYLE_FORCE_DWORD = D2D1_CAP_STYLE.FORCE_DWORD;

pub const D2D1_DASH_STYLE = enum(u32) {
    SOLID = 0,
    DASH = 1,
    DOT = 2,
    DASH_DOT = 3,
    DASH_DOT_DOT = 4,
    CUSTOM = 5,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_DASH_STYLE_SOLID = D2D1_DASH_STYLE.SOLID;
pub const D2D1_DASH_STYLE_DASH = D2D1_DASH_STYLE.DASH;
pub const D2D1_DASH_STYLE_DOT = D2D1_DASH_STYLE.DOT;
pub const D2D1_DASH_STYLE_DASH_DOT = D2D1_DASH_STYLE.DASH_DOT;
pub const D2D1_DASH_STYLE_DASH_DOT_DOT = D2D1_DASH_STYLE.DASH_DOT_DOT;
pub const D2D1_DASH_STYLE_CUSTOM = D2D1_DASH_STYLE.CUSTOM;
pub const D2D1_DASH_STYLE_FORCE_DWORD = D2D1_DASH_STYLE.FORCE_DWORD;

pub const D2D1_LINE_JOIN = enum(u32) {
    MITER = 0,
    BEVEL = 1,
    ROUND = 2,
    MITER_OR_BEVEL = 3,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_LINE_JOIN_MITER = D2D1_LINE_JOIN.MITER;
pub const D2D1_LINE_JOIN_BEVEL = D2D1_LINE_JOIN.BEVEL;
pub const D2D1_LINE_JOIN_ROUND = D2D1_LINE_JOIN.ROUND;
pub const D2D1_LINE_JOIN_MITER_OR_BEVEL = D2D1_LINE_JOIN.MITER_OR_BEVEL;
pub const D2D1_LINE_JOIN_FORCE_DWORD = D2D1_LINE_JOIN.FORCE_DWORD;

pub const D2D1_COMBINE_MODE = enum(u32) {
    UNION = 0,
    INTERSECT = 1,
    XOR = 2,
    EXCLUDE = 3,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_COMBINE_MODE_UNION = D2D1_COMBINE_MODE.UNION;
pub const D2D1_COMBINE_MODE_INTERSECT = D2D1_COMBINE_MODE.INTERSECT;
pub const D2D1_COMBINE_MODE_XOR = D2D1_COMBINE_MODE.XOR;
pub const D2D1_COMBINE_MODE_EXCLUDE = D2D1_COMBINE_MODE.EXCLUDE;
pub const D2D1_COMBINE_MODE_FORCE_DWORD = D2D1_COMBINE_MODE.FORCE_DWORD;

pub const D2D1_GEOMETRY_RELATION = enum(u32) {
    UNKNOWN = 0,
    DISJOINT = 1,
    IS_CONTAINED = 2,
    CONTAINS = 3,
    OVERLAP = 4,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_GEOMETRY_RELATION_UNKNOWN = D2D1_GEOMETRY_RELATION.UNKNOWN;
pub const D2D1_GEOMETRY_RELATION_DISJOINT = D2D1_GEOMETRY_RELATION.DISJOINT;
pub const D2D1_GEOMETRY_RELATION_IS_CONTAINED = D2D1_GEOMETRY_RELATION.IS_CONTAINED;
pub const D2D1_GEOMETRY_RELATION_CONTAINS = D2D1_GEOMETRY_RELATION.CONTAINS;
pub const D2D1_GEOMETRY_RELATION_OVERLAP = D2D1_GEOMETRY_RELATION.OVERLAP;
pub const D2D1_GEOMETRY_RELATION_FORCE_DWORD = D2D1_GEOMETRY_RELATION.FORCE_DWORD;

pub const D2D1_GEOMETRY_SIMPLIFICATION_OPTION = enum(u32) {
    CUBICS_AND_LINES = 0,
    LINES = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_GEOMETRY_SIMPLIFICATION_OPTION_CUBICS_AND_LINES = D2D1_GEOMETRY_SIMPLIFICATION_OPTION.CUBICS_AND_LINES;
pub const D2D1_GEOMETRY_SIMPLIFICATION_OPTION_LINES = D2D1_GEOMETRY_SIMPLIFICATION_OPTION.LINES;
pub const D2D1_GEOMETRY_SIMPLIFICATION_OPTION_FORCE_DWORD = D2D1_GEOMETRY_SIMPLIFICATION_OPTION.FORCE_DWORD;

pub const D2D1_TRIANGLE = extern struct {
    point1: D2D_POINT_2F,
    point2: D2D_POINT_2F,
    point3: D2D_POINT_2F,
};

pub const D2D1_SWEEP_DIRECTION = enum(u32) {
    COUNTER_CLOCKWISE = 0,
    CLOCKWISE = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SWEEP_DIRECTION_COUNTER_CLOCKWISE = D2D1_SWEEP_DIRECTION.COUNTER_CLOCKWISE;
pub const D2D1_SWEEP_DIRECTION_CLOCKWISE = D2D1_SWEEP_DIRECTION.CLOCKWISE;
pub const D2D1_SWEEP_DIRECTION_FORCE_DWORD = D2D1_SWEEP_DIRECTION.FORCE_DWORD;

pub const D2D1_ARC_SEGMENT = extern struct {
    point: D2D_POINT_2F,
    size: D2D_SIZE_F,
    rotationAngle: f32,
    sweepDirection: D2D1_SWEEP_DIRECTION,
    arcSize: D2D1_ARC_SIZE,
};

pub const D2D1_QUADRATIC_BEZIER_SEGMENT = extern struct {
    point1: D2D_POINT_2F,
    point2: D2D_POINT_2F,
};

pub const D2D1_ELLIPSE = extern struct {
    point: D2D_POINT_2F,
    radiusX: f32,
    radiusY: f32,
};

pub const D2D1_ROUNDED_RECT = extern struct {
    rect: D2D_RECT_F,
    radiusX: f32,
    radiusY: f32,
};

pub const D2D1_STROKE_STYLE_PROPERTIES = extern struct {
    startCap: D2D1_CAP_STYLE,
    endCap: D2D1_CAP_STYLE,
    dashCap: D2D1_CAP_STYLE,
    lineJoin: D2D1_LINE_JOIN,
    miterLimit: f32,
    dashStyle: D2D1_DASH_STYLE,
    dashOffset: f32,
};

pub const D2D1_LAYER_OPTIONS = enum(u32) {
    NONE = 0,
    INITIALIZE_FOR_CLEARTYPE = 1,
    FORCE_DWORD = 4294967295,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        INITIALIZE_FOR_CLEARTYPE: u1 = 0,
        FORCE_DWORD: u1 = 0,
    }) D2D1_LAYER_OPTIONS {
        return @as(D2D1_LAYER_OPTIONS, @enumFromInt((if (o.NONE == 1) @intFromEnum(D2D1_LAYER_OPTIONS.NONE) else 0) | (if (o.INITIALIZE_FOR_CLEARTYPE == 1) @intFromEnum(D2D1_LAYER_OPTIONS.INITIALIZE_FOR_CLEARTYPE) else 0) | (if (o.FORCE_DWORD == 1) @intFromEnum(D2D1_LAYER_OPTIONS.FORCE_DWORD) else 0)));
    }
};
pub const D2D1_LAYER_OPTIONS_NONE = D2D1_LAYER_OPTIONS.NONE;
pub const D2D1_LAYER_OPTIONS_INITIALIZE_FOR_CLEARTYPE = D2D1_LAYER_OPTIONS.INITIALIZE_FOR_CLEARTYPE;
pub const D2D1_LAYER_OPTIONS_FORCE_DWORD = D2D1_LAYER_OPTIONS.FORCE_DWORD;

pub const D2D1_LAYER_PARAMETERS = extern struct {
    contentBounds: D2D_RECT_F,
    geometricMask: ?*ID2D1Geometry,
    maskAntialiasMode: D2D1_ANTIALIAS_MODE,
    maskTransform: D2D_MATRIX_3X2_F,
    opacity: f32,
    opacityBrush: ?*ID2D1Brush,
    layerOptions: D2D1_LAYER_OPTIONS,
};

pub const D2D1_WINDOW_STATE = enum(u32) {
    NONE = 0,
    OCCLUDED = 1,
    FORCE_DWORD = 4294967295,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        OCCLUDED: u1 = 0,
        FORCE_DWORD: u1 = 0,
    }) D2D1_WINDOW_STATE {
        return @as(D2D1_WINDOW_STATE, @enumFromInt((if (o.NONE == 1) @intFromEnum(D2D1_WINDOW_STATE.NONE) else 0) | (if (o.OCCLUDED == 1) @intFromEnum(D2D1_WINDOW_STATE.OCCLUDED) else 0) | (if (o.FORCE_DWORD == 1) @intFromEnum(D2D1_WINDOW_STATE.FORCE_DWORD) else 0)));
    }
};
pub const D2D1_WINDOW_STATE_NONE = D2D1_WINDOW_STATE.NONE;
pub const D2D1_WINDOW_STATE_OCCLUDED = D2D1_WINDOW_STATE.OCCLUDED;
pub const D2D1_WINDOW_STATE_FORCE_DWORD = D2D1_WINDOW_STATE.FORCE_DWORD;

pub const D2D1_RENDER_TARGET_TYPE = enum(u32) {
    DEFAULT = 0,
    SOFTWARE = 1,
    HARDWARE = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_RENDER_TARGET_TYPE_DEFAULT = D2D1_RENDER_TARGET_TYPE.DEFAULT;
pub const D2D1_RENDER_TARGET_TYPE_SOFTWARE = D2D1_RENDER_TARGET_TYPE.SOFTWARE;
pub const D2D1_RENDER_TARGET_TYPE_HARDWARE = D2D1_RENDER_TARGET_TYPE.HARDWARE;
pub const D2D1_RENDER_TARGET_TYPE_FORCE_DWORD = D2D1_RENDER_TARGET_TYPE.FORCE_DWORD;

pub const D2D1_FEATURE_LEVEL = enum(u32) {
    DEFAULT = 0,
    @"9" = 37120,
    @"10" = 40960,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_FEATURE_LEVEL_DEFAULT = D2D1_FEATURE_LEVEL.DEFAULT;
pub const D2D1_FEATURE_LEVEL_9 = D2D1_FEATURE_LEVEL.@"9";
pub const D2D1_FEATURE_LEVEL_10 = D2D1_FEATURE_LEVEL.@"10";
pub const D2D1_FEATURE_LEVEL_FORCE_DWORD = D2D1_FEATURE_LEVEL.FORCE_DWORD;

pub const D2D1_RENDER_TARGET_USAGE = enum(u32) {
    NONE = 0,
    FORCE_BITMAP_REMOTING = 1,
    GDI_COMPATIBLE = 2,
    FORCE_DWORD = 4294967295,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        FORCE_BITMAP_REMOTING: u1 = 0,
        GDI_COMPATIBLE: u1 = 0,
        FORCE_DWORD: u1 = 0,
    }) D2D1_RENDER_TARGET_USAGE {
        return @as(D2D1_RENDER_TARGET_USAGE, @enumFromInt((if (o.NONE == 1) @intFromEnum(D2D1_RENDER_TARGET_USAGE.NONE) else 0) | (if (o.FORCE_BITMAP_REMOTING == 1) @intFromEnum(D2D1_RENDER_TARGET_USAGE.FORCE_BITMAP_REMOTING) else 0) | (if (o.GDI_COMPATIBLE == 1) @intFromEnum(D2D1_RENDER_TARGET_USAGE.GDI_COMPATIBLE) else 0) | (if (o.FORCE_DWORD == 1) @intFromEnum(D2D1_RENDER_TARGET_USAGE.FORCE_DWORD) else 0)));
    }
};
pub const D2D1_RENDER_TARGET_USAGE_NONE = D2D1_RENDER_TARGET_USAGE.NONE;
pub const D2D1_RENDER_TARGET_USAGE_FORCE_BITMAP_REMOTING = D2D1_RENDER_TARGET_USAGE.FORCE_BITMAP_REMOTING;
pub const D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE = D2D1_RENDER_TARGET_USAGE.GDI_COMPATIBLE;
pub const D2D1_RENDER_TARGET_USAGE_FORCE_DWORD = D2D1_RENDER_TARGET_USAGE.FORCE_DWORD;

pub const D2D1_PRESENT_OPTIONS = enum(u32) {
    NONE = 0,
    RETAIN_CONTENTS = 1,
    IMMEDIATELY = 2,
    FORCE_DWORD = 4294967295,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        RETAIN_CONTENTS: u1 = 0,
        IMMEDIATELY: u1 = 0,
        FORCE_DWORD: u1 = 0,
    }) D2D1_PRESENT_OPTIONS {
        return @as(D2D1_PRESENT_OPTIONS, @enumFromInt((if (o.NONE == 1) @intFromEnum(D2D1_PRESENT_OPTIONS.NONE) else 0) | (if (o.RETAIN_CONTENTS == 1) @intFromEnum(D2D1_PRESENT_OPTIONS.RETAIN_CONTENTS) else 0) | (if (o.IMMEDIATELY == 1) @intFromEnum(D2D1_PRESENT_OPTIONS.IMMEDIATELY) else 0) | (if (o.FORCE_DWORD == 1) @intFromEnum(D2D1_PRESENT_OPTIONS.FORCE_DWORD) else 0)));
    }
};
pub const D2D1_PRESENT_OPTIONS_NONE = D2D1_PRESENT_OPTIONS.NONE;
pub const D2D1_PRESENT_OPTIONS_RETAIN_CONTENTS = D2D1_PRESENT_OPTIONS.RETAIN_CONTENTS;
pub const D2D1_PRESENT_OPTIONS_IMMEDIATELY = D2D1_PRESENT_OPTIONS.IMMEDIATELY;
pub const D2D1_PRESENT_OPTIONS_FORCE_DWORD = D2D1_PRESENT_OPTIONS.FORCE_DWORD;

pub const D2D1_RENDER_TARGET_PROPERTIES = extern struct {
    type: D2D1_RENDER_TARGET_TYPE,
    pixelFormat: D2D1_PIXEL_FORMAT,
    dpiX: f32,
    dpiY: f32,
    usage: D2D1_RENDER_TARGET_USAGE,
    minLevel: D2D1_FEATURE_LEVEL,
};

pub const D2D1_HWND_RENDER_TARGET_PROPERTIES = extern struct {
    hwnd: ?HWND,
    pixelSize: D2D_SIZE_U,
    presentOptions: D2D1_PRESENT_OPTIONS,
};

pub const D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS = enum(u32) {
    NONE = 0,
    GDI_COMPATIBLE = 1,
    FORCE_DWORD = 4294967295,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        GDI_COMPATIBLE: u1 = 0,
        FORCE_DWORD: u1 = 0,
    }) D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS {
        return @as(D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, @enumFromInt((if (o.NONE == 1) @intFromEnum(D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS.NONE) else 0) | (if (o.GDI_COMPATIBLE == 1) @intFromEnum(D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS.GDI_COMPATIBLE) else 0) | (if (o.FORCE_DWORD == 1) @intFromEnum(D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS.FORCE_DWORD) else 0)));
    }
};
pub const D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_NONE = D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS.NONE;
pub const D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_GDI_COMPATIBLE = D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS.GDI_COMPATIBLE;
pub const D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS_FORCE_DWORD = D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS.FORCE_DWORD;

pub const D2D1_DRAWING_STATE_DESCRIPTION = extern struct {
    antialiasMode: D2D1_ANTIALIAS_MODE,
    textAntialiasMode: D2D1_TEXT_ANTIALIAS_MODE,
    tag1: u64,
    tag2: u64,
    transform: D2D_MATRIX_3X2_F,
};

pub const D2D1_DC_INITIALIZE_MODE = enum(u32) {
    COPY = 0,
    CLEAR = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_DC_INITIALIZE_MODE_COPY = D2D1_DC_INITIALIZE_MODE.COPY;
pub const D2D1_DC_INITIALIZE_MODE_CLEAR = D2D1_DC_INITIALIZE_MODE.CLEAR;
pub const D2D1_DC_INITIALIZE_MODE_FORCE_DWORD = D2D1_DC_INITIALIZE_MODE.FORCE_DWORD;

pub const D2D1_DEBUG_LEVEL = enum(u32) {
    NONE = 0,
    ERROR = 1,
    WARNING = 2,
    INFORMATION = 3,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_DEBUG_LEVEL_NONE = D2D1_DEBUG_LEVEL.NONE;
pub const D2D1_DEBUG_LEVEL_ERROR = D2D1_DEBUG_LEVEL.ERROR;
pub const D2D1_DEBUG_LEVEL_WARNING = D2D1_DEBUG_LEVEL.WARNING;
pub const D2D1_DEBUG_LEVEL_INFORMATION = D2D1_DEBUG_LEVEL.INFORMATION;
pub const D2D1_DEBUG_LEVEL_FORCE_DWORD = D2D1_DEBUG_LEVEL.FORCE_DWORD;

pub const D2D1_FACTORY_TYPE = enum(u32) {
    SINGLE_THREADED = 0,
    MULTI_THREADED = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_FACTORY_TYPE_SINGLE_THREADED = D2D1_FACTORY_TYPE.SINGLE_THREADED;
pub const D2D1_FACTORY_TYPE_MULTI_THREADED = D2D1_FACTORY_TYPE.MULTI_THREADED;
pub const D2D1_FACTORY_TYPE_FORCE_DWORD = D2D1_FACTORY_TYPE.FORCE_DWORD;

pub const D2D1_FACTORY_OPTIONS = extern struct {
    debugLevel: D2D1_DEBUG_LEVEL,
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1Resource_Value = Guid.initString("2cd90691-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1Resource = &IID_ID2D1Resource_Value;
pub const ID2D1Resource = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFactory: *const fn (
            self: *const ID2D1Resource,
            factory: ?*?*ID2D1Factory,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFactory(self: *const T, factory_: ?*?*ID2D1Factory) void {
                return @as(*const ID2D1Resource.VTable, @ptrCast(self.vtable)).GetFactory(@as(*const ID2D1Resource, @ptrCast(self)), factory_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1Image_Value = Guid.initString("65019f75-8da2-497c-b32c-dfa34e48ede6");
pub const IID_ID2D1Image = &IID_ID2D1Image_Value;
pub const ID2D1Image = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1Bitmap_Value = Guid.initString("a2296057-ea42-4099-983b-539fb6505426");
pub const IID_ID2D1Bitmap = &IID_ID2D1Bitmap_Value;
pub const ID2D1Bitmap = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Image.VTable,
        GetSize: *const fn (
            self: *const ID2D1Bitmap,
            retval: *D2D_SIZE_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetPixelSize: *const fn (
            self: *const ID2D1Bitmap,
            retval: *D2D_SIZE_U,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetPixelFormat: *const fn (
            self: *const ID2D1Bitmap,
            retval: *D2D1_PIXEL_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetDpi: *const fn (
            self: *const ID2D1Bitmap,
            dpi_x: ?*f32,
            dpi_y: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CopyFromBitmap: *const fn (
            self: *const ID2D1Bitmap,
            dest_point: ?*const D2D_POINT_2U,
            bitmap: ?*ID2D1Bitmap,
            src_rect: ?*const D2D_RECT_U,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyFromRenderTarget: *const fn (
            self: *const ID2D1Bitmap,
            dest_point: ?*const D2D_POINT_2U,
            render_target: ?*ID2D1RenderTarget,
            src_rect: ?*const D2D_RECT_U,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyFromMemory: *const fn (
            self: *const ID2D1Bitmap,
            dst_rect: ?*const D2D_RECT_U,
            src_data: ?*const anyopaque,
            pitch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Image.MethodMixin(T);
            pub inline fn getSize(self: *const T) D2D_SIZE_F {
                var retval: D2D_SIZE_F = undefined;
                @as(*const ID2D1Bitmap.VTable, @ptrCast(self.vtable)).GetSize(@as(*const ID2D1Bitmap, @ptrCast(self)), &retval);
                return retval;
            }
            pub inline fn getPixelSize(self: *const T) D2D_SIZE_U {
                var retval: D2D_SIZE_U = undefined;
                @as(*const ID2D1Bitmap.VTable, @ptrCast(self.vtable)).GetPixelSize(@as(*const ID2D1Bitmap, @ptrCast(self)), &retval);
                return retval;
            }
            pub inline fn getPixelFormat(self: *const T) D2D1_PIXEL_FORMAT {
                var retval: D2D1_PIXEL_FORMAT = undefined;
                @as(*const ID2D1Bitmap.VTable, @ptrCast(self.vtable)).GetPixelFormat(@as(*const ID2D1Bitmap, @ptrCast(self)), &retval);
                return retval;
            }
            pub inline fn getDpi(self: *const T, dpi_x_: ?*f32, dpi_y_: ?*f32) void {
                return @as(*const ID2D1Bitmap.VTable, @ptrCast(self.vtable)).GetDpi(@as(*const ID2D1Bitmap, @ptrCast(self)), dpi_x_, dpi_y_);
            }
            pub inline fn copyFromBitmap(self: *const T, dest_point_: ?*const D2D_POINT_2U, bitmap_: ?*ID2D1Bitmap, src_rect_: ?*const D2D_RECT_U) HRESULT {
                return @as(*const ID2D1Bitmap.VTable, @ptrCast(self.vtable)).CopyFromBitmap(@as(*const ID2D1Bitmap, @ptrCast(self)), dest_point_, bitmap_, src_rect_);
            }
            pub inline fn copyFromRenderTarget(self: *const T, dest_point_: ?*const D2D_POINT_2U, render_target_: ?*ID2D1RenderTarget, src_rect_: ?*const D2D_RECT_U) HRESULT {
                return @as(*const ID2D1Bitmap.VTable, @ptrCast(self.vtable)).CopyFromRenderTarget(@as(*const ID2D1Bitmap, @ptrCast(self)), dest_point_, render_target_, src_rect_);
            }
            pub inline fn copyFromMemory(self: *const T, dst_rect_: ?*const D2D_RECT_U, src_data_: ?*const anyopaque, pitch_: u32) HRESULT {
                return @as(*const ID2D1Bitmap.VTable, @ptrCast(self.vtable)).CopyFromMemory(@as(*const ID2D1Bitmap, @ptrCast(self)), dst_rect_, src_data_, pitch_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1GradientStopCollection_Value = Guid.initString("2cd906a7-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1GradientStopCollection = &IID_ID2D1GradientStopCollection_Value;
pub const ID2D1GradientStopCollection = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
        GetGradientStopCount: *const fn (
            self: *const ID2D1GradientStopCollection,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetGradientStops: *const fn (
            self: *const ID2D1GradientStopCollection,
            gradient_stops: [*]D2D1_GRADIENT_STOP,
            gradient_stops_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetColorInterpolationGamma: *const fn (
            self: *const ID2D1GradientStopCollection,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_GAMMA,
        GetExtendMode: *const fn (
            self: *const ID2D1GradientStopCollection,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_EXTEND_MODE,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
            pub inline fn getGradientStopCount(self: *const T) u32 {
                return @as(*const ID2D1GradientStopCollection.VTable, @ptrCast(self.vtable)).GetGradientStopCount(@as(*const ID2D1GradientStopCollection, @ptrCast(self)));
            }
            pub inline fn getGradientStops(self: *const T, gradient_stops_: [*]D2D1_GRADIENT_STOP, gradient_stops_count_: u32) void {
                return @as(*const ID2D1GradientStopCollection.VTable, @ptrCast(self.vtable)).GetGradientStops(@as(*const ID2D1GradientStopCollection, @ptrCast(self)), gradient_stops_, gradient_stops_count_);
            }
            pub inline fn getColorInterpolationGamma(self: *const T) D2D1_GAMMA {
                return @as(*const ID2D1GradientStopCollection.VTable, @ptrCast(self.vtable)).GetColorInterpolationGamma(@as(*const ID2D1GradientStopCollection, @ptrCast(self)));
            }
            pub inline fn getExtendMode(self: *const T) D2D1_EXTEND_MODE {
                return @as(*const ID2D1GradientStopCollection.VTable, @ptrCast(self.vtable)).GetExtendMode(@as(*const ID2D1GradientStopCollection, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1Brush_Value = Guid.initString("2cd906a8-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1Brush = &IID_ID2D1Brush_Value;
pub const ID2D1Brush = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
        SetOpacity: *const fn (
            self: *const ID2D1Brush,
            opacity: f32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetTransform: *const fn (
            self: *const ID2D1Brush,
            transform: ?*const D2D_MATRIX_3X2_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetOpacity: *const fn (
            self: *const ID2D1Brush,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        GetTransform: *const fn (
            self: *const ID2D1Brush,
            transform: ?*D2D_MATRIX_3X2_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
            pub inline fn setOpacity(self: *const T, opacity_: f32) void {
                return @as(*const ID2D1Brush.VTable, @ptrCast(self.vtable)).SetOpacity(@as(*const ID2D1Brush, @ptrCast(self)), opacity_);
            }
            pub inline fn setTransform(self: *const T, transform_: ?*const D2D_MATRIX_3X2_F) void {
                return @as(*const ID2D1Brush.VTable, @ptrCast(self.vtable)).SetTransform(@as(*const ID2D1Brush, @ptrCast(self)), transform_);
            }
            pub inline fn getOpacity(self: *const T) f32 {
                return @as(*const ID2D1Brush.VTable, @ptrCast(self.vtable)).GetOpacity(@as(*const ID2D1Brush, @ptrCast(self)));
            }
            pub inline fn getTransform(self: *const T, transform_: ?*D2D_MATRIX_3X2_F) void {
                return @as(*const ID2D1Brush.VTable, @ptrCast(self.vtable)).GetTransform(@as(*const ID2D1Brush, @ptrCast(self)), transform_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1BitmapBrush_Value = Guid.initString("2cd906aa-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1BitmapBrush = &IID_ID2D1BitmapBrush_Value;
pub const ID2D1BitmapBrush = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Brush.VTable,
        SetExtendModeX: *const fn (
            self: *const ID2D1BitmapBrush,
            extend_mode_x: D2D1_EXTEND_MODE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetExtendModeY: *const fn (
            self: *const ID2D1BitmapBrush,
            extend_mode_y: D2D1_EXTEND_MODE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetInterpolationMode: *const fn (
            self: *const ID2D1BitmapBrush,
            interpolation_mode: D2D1_BITMAP_INTERPOLATION_MODE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetBitmap: *const fn (
            self: *const ID2D1BitmapBrush,
            bitmap: ?*ID2D1Bitmap,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetExtendModeX: *const fn (
            self: *const ID2D1BitmapBrush,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_EXTEND_MODE,
        GetExtendModeY: *const fn (
            self: *const ID2D1BitmapBrush,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_EXTEND_MODE,
        GetInterpolationMode: *const fn (
            self: *const ID2D1BitmapBrush,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_BITMAP_INTERPOLATION_MODE,
        GetBitmap: *const fn (
            self: *const ID2D1BitmapBrush,
            bitmap: ?*?*ID2D1Bitmap,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Brush.MethodMixin(T);
            pub inline fn setExtendModeX(self: *const T, extend_mode_x_: D2D1_EXTEND_MODE) void {
                return @as(*const ID2D1BitmapBrush.VTable, @ptrCast(self.vtable)).SetExtendModeX(@as(*const ID2D1BitmapBrush, @ptrCast(self)), extend_mode_x_);
            }
            pub inline fn setExtendModeY(self: *const T, extend_mode_y_: D2D1_EXTEND_MODE) void {
                return @as(*const ID2D1BitmapBrush.VTable, @ptrCast(self.vtable)).SetExtendModeY(@as(*const ID2D1BitmapBrush, @ptrCast(self)), extend_mode_y_);
            }
            pub inline fn setInterpolationMode(self: *const T, interpolation_mode_: D2D1_BITMAP_INTERPOLATION_MODE) void {
                return @as(*const ID2D1BitmapBrush.VTable, @ptrCast(self.vtable)).SetInterpolationMode(@as(*const ID2D1BitmapBrush, @ptrCast(self)), interpolation_mode_);
            }
            pub inline fn setBitmap(self: *const T, bitmap_: ?*ID2D1Bitmap) void {
                return @as(*const ID2D1BitmapBrush.VTable, @ptrCast(self.vtable)).SetBitmap(@as(*const ID2D1BitmapBrush, @ptrCast(self)), bitmap_);
            }
            pub inline fn getExtendModeX(self: *const T) D2D1_EXTEND_MODE {
                return @as(*const ID2D1BitmapBrush.VTable, @ptrCast(self.vtable)).GetExtendModeX(@as(*const ID2D1BitmapBrush, @ptrCast(self)));
            }
            pub inline fn getExtendModeY(self: *const T) D2D1_EXTEND_MODE {
                return @as(*const ID2D1BitmapBrush.VTable, @ptrCast(self.vtable)).GetExtendModeY(@as(*const ID2D1BitmapBrush, @ptrCast(self)));
            }
            pub inline fn getInterpolationMode(self: *const T) D2D1_BITMAP_INTERPOLATION_MODE {
                return @as(*const ID2D1BitmapBrush.VTable, @ptrCast(self.vtable)).GetInterpolationMode(@as(*const ID2D1BitmapBrush, @ptrCast(self)));
            }
            pub inline fn getBitmap(self: *const T, bitmap_: ?*?*ID2D1Bitmap) void {
                return @as(*const ID2D1BitmapBrush.VTable, @ptrCast(self.vtable)).GetBitmap(@as(*const ID2D1BitmapBrush, @ptrCast(self)), bitmap_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1SolidColorBrush_Value = Guid.initString("2cd906a9-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1SolidColorBrush = &IID_ID2D1SolidColorBrush_Value;
pub const ID2D1SolidColorBrush = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Brush.VTable,
        SetColor: *const fn (
            self: *const ID2D1SolidColorBrush,
            color: ?*const D2D1_COLOR_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetColor: *const fn (
            self: *const ID2D1SolidColorBrush,
            retval: *D2D1_COLOR_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Brush.MethodMixin(T);
            pub inline fn setColor(self: *const T, color_: ?*const D2D1_COLOR_F) void {
                return @as(*const ID2D1SolidColorBrush.VTable, @ptrCast(self.vtable)).SetColor(@as(*const ID2D1SolidColorBrush, @ptrCast(self)), color_);
            }
            pub inline fn getColor(self: *const T) D2D1_COLOR_F {
                var retval: D2D1_COLOR_F = undefined;
                @as(*const ID2D1SolidColorBrush.VTable, @ptrCast(self.vtable)).GetColor(@as(*const ID2D1SolidColorBrush, @ptrCast(self)), &retval);
                return retval;
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1LinearGradientBrush_Value = Guid.initString("2cd906ab-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1LinearGradientBrush = &IID_ID2D1LinearGradientBrush_Value;
pub const ID2D1LinearGradientBrush = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Brush.VTable,
        SetStartPoint: *const fn (
            self: *const ID2D1LinearGradientBrush,
            start_point: D2D_POINT_2F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetEndPoint: *const fn (
            self: *const ID2D1LinearGradientBrush,
            end_point: D2D_POINT_2F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetStartPoint: *const fn (
            self: *const ID2D1LinearGradientBrush,
            retval: *D2D_POINT_2F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetEndPoint: *const fn (
            self: *const ID2D1LinearGradientBrush,
            retval: *D2D_POINT_2F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetGradientStopCollection: *const fn (
            self: *const ID2D1LinearGradientBrush,
            gradient_stop_collection: ?*?*ID2D1GradientStopCollection,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Brush.MethodMixin(T);
            pub inline fn setStartPoint(self: *const T, start_point_: D2D_POINT_2F) void {
                return @as(*const ID2D1LinearGradientBrush.VTable, @ptrCast(self.vtable)).SetStartPoint(@as(*const ID2D1LinearGradientBrush, @ptrCast(self)), start_point_);
            }
            pub inline fn setEndPoint(self: *const T, end_point_: D2D_POINT_2F) void {
                return @as(*const ID2D1LinearGradientBrush.VTable, @ptrCast(self.vtable)).SetEndPoint(@as(*const ID2D1LinearGradientBrush, @ptrCast(self)), end_point_);
            }
            pub inline fn getStartPoint(self: *const T) D2D_POINT_2F {
                var retval: D2D_POINT_2F = undefined;
                @as(*const ID2D1LinearGradientBrush.VTable, @ptrCast(self.vtable)).GetStartPoint(@as(*const ID2D1LinearGradientBrush, @ptrCast(self)), &retval);
                return retval;
            }
            pub inline fn getEndPoint(self: *const T) D2D_POINT_2F {
                var retval: D2D_POINT_2F = undefined;
                @as(*const ID2D1LinearGradientBrush.VTable, @ptrCast(self.vtable)).GetEndPoint(@as(*const ID2D1LinearGradientBrush, @ptrCast(self)), &retval);
                return retval;
            }
            pub inline fn getGradientStopCollection(self: *const T, gradient_stop_collection_: ?*?*ID2D1GradientStopCollection) void {
                return @as(*const ID2D1LinearGradientBrush.VTable, @ptrCast(self.vtable)).GetGradientStopCollection(@as(*const ID2D1LinearGradientBrush, @ptrCast(self)), gradient_stop_collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1RadialGradientBrush_Value = Guid.initString("2cd906ac-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1RadialGradientBrush = &IID_ID2D1RadialGradientBrush_Value;
pub const ID2D1RadialGradientBrush = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Brush.VTable,
        SetCenter: *const fn (
            self: *const ID2D1RadialGradientBrush,
            center: D2D_POINT_2F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetGradientOriginOffset: *const fn (
            self: *const ID2D1RadialGradientBrush,
            gradient_origin_offset: D2D_POINT_2F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetRadiusX: *const fn (
            self: *const ID2D1RadialGradientBrush,
            radius_x: f32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetRadiusY: *const fn (
            self: *const ID2D1RadialGradientBrush,
            radius_y: f32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetCenter: *const fn (
            self: *const ID2D1RadialGradientBrush,
            retval: *D2D_POINT_2F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetGradientOriginOffset: *const fn (
            self: *const ID2D1RadialGradientBrush,
            retval: *D2D_POINT_2F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetRadiusX: *const fn (
            self: *const ID2D1RadialGradientBrush,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        GetRadiusY: *const fn (
            self: *const ID2D1RadialGradientBrush,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        GetGradientStopCollection: *const fn (
            self: *const ID2D1RadialGradientBrush,
            gradient_stop_collection: ?*?*ID2D1GradientStopCollection,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Brush.MethodMixin(T);
            pub inline fn setCenter(self: *const T, center_: D2D_POINT_2F) void {
                return @as(*const ID2D1RadialGradientBrush.VTable, @ptrCast(self.vtable)).SetCenter(@as(*const ID2D1RadialGradientBrush, @ptrCast(self)), center_);
            }
            pub inline fn setGradientOriginOffset(self: *const T, gradient_origin_offset_: D2D_POINT_2F) void {
                return @as(*const ID2D1RadialGradientBrush.VTable, @ptrCast(self.vtable)).SetGradientOriginOffset(@as(*const ID2D1RadialGradientBrush, @ptrCast(self)), gradient_origin_offset_);
            }
            pub inline fn setRadiusX(self: *const T, radius_x_: f32) void {
                return @as(*const ID2D1RadialGradientBrush.VTable, @ptrCast(self.vtable)).SetRadiusX(@as(*const ID2D1RadialGradientBrush, @ptrCast(self)), radius_x_);
            }
            pub inline fn setRadiusY(self: *const T, radius_y_: f32) void {
                return @as(*const ID2D1RadialGradientBrush.VTable, @ptrCast(self.vtable)).SetRadiusY(@as(*const ID2D1RadialGradientBrush, @ptrCast(self)), radius_y_);
            }
            pub inline fn getCenter(self: *const T) D2D_POINT_2F {
                var retval: D2D_POINT_2F = undefined;
                @as(*const ID2D1RadialGradientBrush.VTable, @ptrCast(self.vtable)).GetCenter(@as(*const ID2D1RadialGradientBrush, @ptrCast(self)), &retval);
                return retval;
            }
            pub inline fn getGradientOriginOffset(self: *const T) D2D_POINT_2F {
                var retval: D2D_POINT_2F = undefined;
                @as(*const ID2D1RadialGradientBrush.VTable, @ptrCast(self.vtable)).GetGradientOriginOffset(@as(*const ID2D1RadialGradientBrush, @ptrCast(self)), &retval);
                return retval;
            }
            pub inline fn getRadiusX(self: *const T) f32 {
                return @as(*const ID2D1RadialGradientBrush.VTable, @ptrCast(self.vtable)).GetRadiusX(@as(*const ID2D1RadialGradientBrush, @ptrCast(self)));
            }
            pub inline fn getRadiusY(self: *const T) f32 {
                return @as(*const ID2D1RadialGradientBrush.VTable, @ptrCast(self.vtable)).GetRadiusY(@as(*const ID2D1RadialGradientBrush, @ptrCast(self)));
            }
            pub inline fn getGradientStopCollection(self: *const T, gradient_stop_collection_: ?*?*ID2D1GradientStopCollection) void {
                return @as(*const ID2D1RadialGradientBrush.VTable, @ptrCast(self.vtable)).GetGradientStopCollection(@as(*const ID2D1RadialGradientBrush, @ptrCast(self)), gradient_stop_collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1StrokeStyle_Value = Guid.initString("2cd9069d-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1StrokeStyle = &IID_ID2D1StrokeStyle_Value;
pub const ID2D1StrokeStyle = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
        GetStartCap: *const fn (
            self: *const ID2D1StrokeStyle,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_CAP_STYLE,
        GetEndCap: *const fn (
            self: *const ID2D1StrokeStyle,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_CAP_STYLE,
        GetDashCap: *const fn (
            self: *const ID2D1StrokeStyle,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_CAP_STYLE,
        GetMiterLimit: *const fn (
            self: *const ID2D1StrokeStyle,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        GetLineJoin: *const fn (
            self: *const ID2D1StrokeStyle,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_LINE_JOIN,
        GetDashOffset: *const fn (
            self: *const ID2D1StrokeStyle,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        GetDashStyle: *const fn (
            self: *const ID2D1StrokeStyle,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_DASH_STYLE,
        GetDashesCount: *const fn (
            self: *const ID2D1StrokeStyle,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetDashes: *const fn (
            self: *const ID2D1StrokeStyle,
            dashes: [*]f32,
            dashes_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
            pub inline fn getStartCap(self: *const T) D2D1_CAP_STYLE {
                return @as(*const ID2D1StrokeStyle.VTable, @ptrCast(self.vtable)).GetStartCap(@as(*const ID2D1StrokeStyle, @ptrCast(self)));
            }
            pub inline fn getEndCap(self: *const T) D2D1_CAP_STYLE {
                return @as(*const ID2D1StrokeStyle.VTable, @ptrCast(self.vtable)).GetEndCap(@as(*const ID2D1StrokeStyle, @ptrCast(self)));
            }
            pub inline fn getDashCap(self: *const T) D2D1_CAP_STYLE {
                return @as(*const ID2D1StrokeStyle.VTable, @ptrCast(self.vtable)).GetDashCap(@as(*const ID2D1StrokeStyle, @ptrCast(self)));
            }
            pub inline fn getMiterLimit(self: *const T) f32 {
                return @as(*const ID2D1StrokeStyle.VTable, @ptrCast(self.vtable)).GetMiterLimit(@as(*const ID2D1StrokeStyle, @ptrCast(self)));
            }
            pub inline fn getLineJoin(self: *const T) D2D1_LINE_JOIN {
                return @as(*const ID2D1StrokeStyle.VTable, @ptrCast(self.vtable)).GetLineJoin(@as(*const ID2D1StrokeStyle, @ptrCast(self)));
            }
            pub inline fn getDashOffset(self: *const T) f32 {
                return @as(*const ID2D1StrokeStyle.VTable, @ptrCast(self.vtable)).GetDashOffset(@as(*const ID2D1StrokeStyle, @ptrCast(self)));
            }
            pub inline fn getDashStyle(self: *const T) D2D1_DASH_STYLE {
                return @as(*const ID2D1StrokeStyle.VTable, @ptrCast(self.vtable)).GetDashStyle(@as(*const ID2D1StrokeStyle, @ptrCast(self)));
            }
            pub inline fn getDashesCount(self: *const T) u32 {
                return @as(*const ID2D1StrokeStyle.VTable, @ptrCast(self.vtable)).GetDashesCount(@as(*const ID2D1StrokeStyle, @ptrCast(self)));
            }
            pub inline fn getDashes(self: *const T, dashes_: [*]f32, dashes_count_: u32) void {
                return @as(*const ID2D1StrokeStyle.VTable, @ptrCast(self.vtable)).GetDashes(@as(*const ID2D1StrokeStyle, @ptrCast(self)), dashes_, dashes_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1Geometry_Value = Guid.initString("2cd906a1-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1Geometry = &IID_ID2D1Geometry_Value;
pub const ID2D1Geometry = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
        GetBounds: *const fn (
            self: *const ID2D1Geometry,
            world_transform: ?*const D2D_MATRIX_3X2_F,
            bounds: ?*D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWidenedBounds: *const fn (
            self: *const ID2D1Geometry,
            stroke_width: f32,
            stroke_style: ?*ID2D1StrokeStyle,
            world_transform: ?*const D2D_MATRIX_3X2_F,
            flattening_tolerance: f32,
            bounds: ?*D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StrokeContainsPoint: *const fn (
            self: *const ID2D1Geometry,
            point: D2D_POINT_2F,
            stroke_width: f32,
            stroke_style: ?*ID2D1StrokeStyle,
            world_transform: ?*const D2D_MATRIX_3X2_F,
            flattening_tolerance: f32,
            contains: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FillContainsPoint: *const fn (
            self: *const ID2D1Geometry,
            point: D2D_POINT_2F,
            world_transform: ?*const D2D_MATRIX_3X2_F,
            flattening_tolerance: f32,
            contains: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompareWithGeometry: *const fn (
            self: *const ID2D1Geometry,
            input_geometry: ?*ID2D1Geometry,
            input_geometry_transform: ?*const D2D_MATRIX_3X2_F,
            flattening_tolerance: f32,
            relation: ?*D2D1_GEOMETRY_RELATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Simplify: *const fn (
            self: *const ID2D1Geometry,
            simplification_option: D2D1_GEOMETRY_SIMPLIFICATION_OPTION,
            world_transform: ?*const D2D_MATRIX_3X2_F,
            flattening_tolerance: f32,
            geometry_sink: ?*ID2D1SimplifiedGeometrySink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Tessellate: *const fn (
            self: *const ID2D1Geometry,
            world_transform: ?*const D2D_MATRIX_3X2_F,
            flattening_tolerance: f32,
            tessellation_sink: ?*ID2D1TessellationSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CombineWithGeometry: *const fn (
            self: *const ID2D1Geometry,
            input_geometry: ?*ID2D1Geometry,
            combine_mode: D2D1_COMBINE_MODE,
            input_geometry_transform: ?*const D2D_MATRIX_3X2_F,
            flattening_tolerance: f32,
            geometry_sink: ?*ID2D1SimplifiedGeometrySink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Outline: *const fn (
            self: *const ID2D1Geometry,
            world_transform: ?*const D2D_MATRIX_3X2_F,
            flattening_tolerance: f32,
            geometry_sink: ?*ID2D1SimplifiedGeometrySink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ComputeArea: *const fn (
            self: *const ID2D1Geometry,
            world_transform: ?*const D2D_MATRIX_3X2_F,
            flattening_tolerance: f32,
            area: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ComputeLength: *const fn (
            self: *const ID2D1Geometry,
            world_transform: ?*const D2D_MATRIX_3X2_F,
            flattening_tolerance: f32,
            length: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ComputePointAtLength: *const fn (
            self: *const ID2D1Geometry,
            length: f32,
            world_transform: ?*const D2D_MATRIX_3X2_F,
            flattening_tolerance: f32,
            point: ?*D2D_POINT_2F,
            unit_tangent_vector: ?*D2D_POINT_2F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Widen: *const fn (
            self: *const ID2D1Geometry,
            stroke_width: f32,
            stroke_style: ?*ID2D1StrokeStyle,
            world_transform: ?*const D2D_MATRIX_3X2_F,
            flattening_tolerance: f32,
            geometry_sink: ?*ID2D1SimplifiedGeometrySink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
            pub inline fn getBounds(self: *const T, world_transform_: ?*const D2D_MATRIX_3X2_F, bounds_: ?*D2D_RECT_F) HRESULT {
                return @as(*const ID2D1Geometry.VTable, @ptrCast(self.vtable)).GetBounds(@as(*const ID2D1Geometry, @ptrCast(self)), world_transform_, bounds_);
            }
            pub inline fn getWidenedBounds(self: *const T, stroke_width_: f32, stroke_style_: ?*ID2D1StrokeStyle, world_transform_: ?*const D2D_MATRIX_3X2_F, flattening_tolerance_: f32, bounds_: ?*D2D_RECT_F) HRESULT {
                return @as(*const ID2D1Geometry.VTable, @ptrCast(self.vtable)).GetWidenedBounds(@as(*const ID2D1Geometry, @ptrCast(self)), stroke_width_, stroke_style_, world_transform_, flattening_tolerance_, bounds_);
            }
            pub inline fn strokeContainsPoint(self: *const T, point_: D2D_POINT_2F, stroke_width_: f32, stroke_style_: ?*ID2D1StrokeStyle, world_transform_: ?*const D2D_MATRIX_3X2_F, flattening_tolerance_: f32, contains_: ?*BOOL) HRESULT {
                return @as(*const ID2D1Geometry.VTable, @ptrCast(self.vtable)).StrokeContainsPoint(@as(*const ID2D1Geometry, @ptrCast(self)), point_, stroke_width_, stroke_style_, world_transform_, flattening_tolerance_, contains_);
            }
            pub inline fn fillContainsPoint(self: *const T, point_: D2D_POINT_2F, world_transform_: ?*const D2D_MATRIX_3X2_F, flattening_tolerance_: f32, contains_: ?*BOOL) HRESULT {
                return @as(*const ID2D1Geometry.VTable, @ptrCast(self.vtable)).FillContainsPoint(@as(*const ID2D1Geometry, @ptrCast(self)), point_, world_transform_, flattening_tolerance_, contains_);
            }
            pub inline fn compareWithGeometry(self: *const T, input_geometry_: ?*ID2D1Geometry, input_geometry_transform_: ?*const D2D_MATRIX_3X2_F, flattening_tolerance_: f32, relation_: ?*D2D1_GEOMETRY_RELATION) HRESULT {
                return @as(*const ID2D1Geometry.VTable, @ptrCast(self.vtable)).CompareWithGeometry(@as(*const ID2D1Geometry, @ptrCast(self)), input_geometry_, input_geometry_transform_, flattening_tolerance_, relation_);
            }
            pub inline fn simplify(self: *const T, simplification_option_: D2D1_GEOMETRY_SIMPLIFICATION_OPTION, world_transform_: ?*const D2D_MATRIX_3X2_F, flattening_tolerance_: f32, geometry_sink_: ?*ID2D1SimplifiedGeometrySink) HRESULT {
                return @as(*const ID2D1Geometry.VTable, @ptrCast(self.vtable)).Simplify(@as(*const ID2D1Geometry, @ptrCast(self)), simplification_option_, world_transform_, flattening_tolerance_, geometry_sink_);
            }
            pub inline fn tessellate(self: *const T, world_transform_: ?*const D2D_MATRIX_3X2_F, flattening_tolerance_: f32, tessellation_sink_: ?*ID2D1TessellationSink) HRESULT {
                return @as(*const ID2D1Geometry.VTable, @ptrCast(self.vtable)).Tessellate(@as(*const ID2D1Geometry, @ptrCast(self)), world_transform_, flattening_tolerance_, tessellation_sink_);
            }
            pub inline fn combineWithGeometry(self: *const T, input_geometry_: ?*ID2D1Geometry, combine_mode_: D2D1_COMBINE_MODE, input_geometry_transform_: ?*const D2D_MATRIX_3X2_F, flattening_tolerance_: f32, geometry_sink_: ?*ID2D1SimplifiedGeometrySink) HRESULT {
                return @as(*const ID2D1Geometry.VTable, @ptrCast(self.vtable)).CombineWithGeometry(@as(*const ID2D1Geometry, @ptrCast(self)), input_geometry_, combine_mode_, input_geometry_transform_, flattening_tolerance_, geometry_sink_);
            }
            pub inline fn outline(self: *const T, world_transform_: ?*const D2D_MATRIX_3X2_F, flattening_tolerance_: f32, geometry_sink_: ?*ID2D1SimplifiedGeometrySink) HRESULT {
                return @as(*const ID2D1Geometry.VTable, @ptrCast(self.vtable)).Outline(@as(*const ID2D1Geometry, @ptrCast(self)), world_transform_, flattening_tolerance_, geometry_sink_);
            }
            pub inline fn computeArea(self: *const T, world_transform_: ?*const D2D_MATRIX_3X2_F, flattening_tolerance_: f32, area_: ?*f32) HRESULT {
                return @as(*const ID2D1Geometry.VTable, @ptrCast(self.vtable)).ComputeArea(@as(*const ID2D1Geometry, @ptrCast(self)), world_transform_, flattening_tolerance_, area_);
            }
            pub inline fn computeLength(self: *const T, world_transform_: ?*const D2D_MATRIX_3X2_F, flattening_tolerance_: f32, length_: ?*f32) HRESULT {
                return @as(*const ID2D1Geometry.VTable, @ptrCast(self.vtable)).ComputeLength(@as(*const ID2D1Geometry, @ptrCast(self)), world_transform_, flattening_tolerance_, length_);
            }
            pub inline fn computePointAtLength(self: *const T, length_: f32, world_transform_: ?*const D2D_MATRIX_3X2_F, flattening_tolerance_: f32, point_: ?*D2D_POINT_2F, unit_tangent_vector_: ?*D2D_POINT_2F) HRESULT {
                return @as(*const ID2D1Geometry.VTable, @ptrCast(self.vtable)).ComputePointAtLength(@as(*const ID2D1Geometry, @ptrCast(self)), length_, world_transform_, flattening_tolerance_, point_, unit_tangent_vector_);
            }
            pub inline fn widen(self: *const T, stroke_width_: f32, stroke_style_: ?*ID2D1StrokeStyle, world_transform_: ?*const D2D_MATRIX_3X2_F, flattening_tolerance_: f32, geometry_sink_: ?*ID2D1SimplifiedGeometrySink) HRESULT {
                return @as(*const ID2D1Geometry.VTable, @ptrCast(self.vtable)).Widen(@as(*const ID2D1Geometry, @ptrCast(self)), stroke_width_, stroke_style_, world_transform_, flattening_tolerance_, geometry_sink_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1RectangleGeometry_Value = Guid.initString("2cd906a2-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1RectangleGeometry = &IID_ID2D1RectangleGeometry_Value;
pub const ID2D1RectangleGeometry = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Geometry.VTable,
        GetRect: *const fn (
            self: *const ID2D1RectangleGeometry,
            rect: ?*D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Geometry.MethodMixin(T);
            pub inline fn getRect(self: *const T, rect_: ?*D2D_RECT_F) void {
                return @as(*const ID2D1RectangleGeometry.VTable, @ptrCast(self.vtable)).GetRect(@as(*const ID2D1RectangleGeometry, @ptrCast(self)), rect_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1RoundedRectangleGeometry_Value = Guid.initString("2cd906a3-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1RoundedRectangleGeometry = &IID_ID2D1RoundedRectangleGeometry_Value;
pub const ID2D1RoundedRectangleGeometry = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Geometry.VTable,
        GetRoundedRect: *const fn (
            self: *const ID2D1RoundedRectangleGeometry,
            rounded_rect: ?*D2D1_ROUNDED_RECT,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Geometry.MethodMixin(T);
            pub inline fn getRoundedRect(self: *const T, rounded_rect_: ?*D2D1_ROUNDED_RECT) void {
                return @as(*const ID2D1RoundedRectangleGeometry.VTable, @ptrCast(self.vtable)).GetRoundedRect(@as(*const ID2D1RoundedRectangleGeometry, @ptrCast(self)), rounded_rect_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1EllipseGeometry_Value = Guid.initString("2cd906a4-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1EllipseGeometry = &IID_ID2D1EllipseGeometry_Value;
pub const ID2D1EllipseGeometry = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Geometry.VTable,
        GetEllipse: *const fn (
            self: *const ID2D1EllipseGeometry,
            ellipse: ?*D2D1_ELLIPSE,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Geometry.MethodMixin(T);
            pub inline fn getEllipse(self: *const T, ellipse_: ?*D2D1_ELLIPSE) void {
                return @as(*const ID2D1EllipseGeometry.VTable, @ptrCast(self.vtable)).GetEllipse(@as(*const ID2D1EllipseGeometry, @ptrCast(self)), ellipse_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1GeometryGroup_Value = Guid.initString("2cd906a6-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1GeometryGroup = &IID_ID2D1GeometryGroup_Value;
pub const ID2D1GeometryGroup = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Geometry.VTable,
        GetFillMode: *const fn (
            self: *const ID2D1GeometryGroup,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_FILL_MODE,
        GetSourceGeometryCount: *const fn (
            self: *const ID2D1GeometryGroup,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetSourceGeometries: *const fn (
            self: *const ID2D1GeometryGroup,
            geometries: [*]?*ID2D1Geometry,
            geometries_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Geometry.MethodMixin(T);
            pub inline fn getFillMode(self: *const T) D2D1_FILL_MODE {
                return @as(*const ID2D1GeometryGroup.VTable, @ptrCast(self.vtable)).GetFillMode(@as(*const ID2D1GeometryGroup, @ptrCast(self)));
            }
            pub inline fn getSourceGeometryCount(self: *const T) u32 {
                return @as(*const ID2D1GeometryGroup.VTable, @ptrCast(self.vtable)).GetSourceGeometryCount(@as(*const ID2D1GeometryGroup, @ptrCast(self)));
            }
            pub inline fn getSourceGeometries(self: *const T, geometries_: [*]?*ID2D1Geometry, geometries_count_: u32) void {
                return @as(*const ID2D1GeometryGroup.VTable, @ptrCast(self.vtable)).GetSourceGeometries(@as(*const ID2D1GeometryGroup, @ptrCast(self)), geometries_, geometries_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1TransformedGeometry_Value = Guid.initString("2cd906bb-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1TransformedGeometry = &IID_ID2D1TransformedGeometry_Value;
pub const ID2D1TransformedGeometry = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Geometry.VTable,
        GetSourceGeometry: *const fn (
            self: *const ID2D1TransformedGeometry,
            source_geometry: ?*?*ID2D1Geometry,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetTransform: *const fn (
            self: *const ID2D1TransformedGeometry,
            transform: ?*D2D_MATRIX_3X2_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Geometry.MethodMixin(T);
            pub inline fn getSourceGeometry(self: *const T, source_geometry_: ?*?*ID2D1Geometry) void {
                return @as(*const ID2D1TransformedGeometry.VTable, @ptrCast(self.vtable)).GetSourceGeometry(@as(*const ID2D1TransformedGeometry, @ptrCast(self)), source_geometry_);
            }
            pub inline fn getTransform(self: *const T, transform_: ?*D2D_MATRIX_3X2_F) void {
                return @as(*const ID2D1TransformedGeometry.VTable, @ptrCast(self.vtable)).GetTransform(@as(*const ID2D1TransformedGeometry, @ptrCast(self)), transform_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1GeometrySink_Value = Guid.initString("2cd9069f-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1GeometrySink = &IID_ID2D1GeometrySink_Value;
pub const ID2D1GeometrySink = extern struct {
    pub const VTable = extern struct {
        base: ID2D1SimplifiedGeometrySink.VTable,
        AddLine: *const fn (
            self: *const ID2D1GeometrySink,
            point: D2D_POINT_2F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        AddBezier: *const fn (
            self: *const ID2D1GeometrySink,
            bezier: ?*const D2D1_BEZIER_SEGMENT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        AddQuadraticBezier: *const fn (
            self: *const ID2D1GeometrySink,
            bezier: ?*const D2D1_QUADRATIC_BEZIER_SEGMENT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        AddQuadraticBeziers: *const fn (
            self: *const ID2D1GeometrySink,
            beziers: [*]const D2D1_QUADRATIC_BEZIER_SEGMENT,
            beziers_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        AddArc: *const fn (
            self: *const ID2D1GeometrySink,
            arc: ?*const D2D1_ARC_SEGMENT,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1SimplifiedGeometrySink.MethodMixin(T);
            pub inline fn addLine(self: *const T, point_: D2D_POINT_2F) void {
                return @as(*const ID2D1GeometrySink.VTable, @ptrCast(self.vtable)).AddLine(@as(*const ID2D1GeometrySink, @ptrCast(self)), point_);
            }
            pub inline fn addBezier(self: *const T, bezier_: ?*const D2D1_BEZIER_SEGMENT) void {
                return @as(*const ID2D1GeometrySink.VTable, @ptrCast(self.vtable)).AddBezier(@as(*const ID2D1GeometrySink, @ptrCast(self)), bezier_);
            }
            pub inline fn addQuadraticBezier(self: *const T, bezier_: ?*const D2D1_QUADRATIC_BEZIER_SEGMENT) void {
                return @as(*const ID2D1GeometrySink.VTable, @ptrCast(self.vtable)).AddQuadraticBezier(@as(*const ID2D1GeometrySink, @ptrCast(self)), bezier_);
            }
            pub inline fn addQuadraticBeziers(self: *const T, beziers_: [*]const D2D1_QUADRATIC_BEZIER_SEGMENT, beziers_count_: u32) void {
                return @as(*const ID2D1GeometrySink.VTable, @ptrCast(self.vtable)).AddQuadraticBeziers(@as(*const ID2D1GeometrySink, @ptrCast(self)), beziers_, beziers_count_);
            }
            pub inline fn addArc(self: *const T, arc_: ?*const D2D1_ARC_SEGMENT) void {
                return @as(*const ID2D1GeometrySink.VTable, @ptrCast(self.vtable)).AddArc(@as(*const ID2D1GeometrySink, @ptrCast(self)), arc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1TessellationSink_Value = Guid.initString("2cd906c1-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1TessellationSink = &IID_ID2D1TessellationSink_Value;
pub const ID2D1TessellationSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddTriangles: *const fn (
            self: *const ID2D1TessellationSink,
            triangles: [*]const D2D1_TRIANGLE,
            triangles_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Close: *const fn (
            self: *const ID2D1TessellationSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addTriangles(self: *const T, triangles_: [*]const D2D1_TRIANGLE, triangles_count_: u32) void {
                return @as(*const ID2D1TessellationSink.VTable, @ptrCast(self.vtable)).AddTriangles(@as(*const ID2D1TessellationSink, @ptrCast(self)), triangles_, triangles_count_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const ID2D1TessellationSink.VTable, @ptrCast(self.vtable)).Close(@as(*const ID2D1TessellationSink, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1PathGeometry_Value = Guid.initString("2cd906a5-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1PathGeometry = &IID_ID2D1PathGeometry_Value;
pub const ID2D1PathGeometry = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Geometry.VTable,
        Open: *const fn (
            self: *const ID2D1PathGeometry,
            geometry_sink: ?*?*ID2D1GeometrySink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stream: *const fn (
            self: *const ID2D1PathGeometry,
            geometry_sink: ?*ID2D1GeometrySink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSegmentCount: *const fn (
            self: *const ID2D1PathGeometry,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFigureCount: *const fn (
            self: *const ID2D1PathGeometry,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Geometry.MethodMixin(T);
            pub inline fn open(self: *const T, geometry_sink_: ?*?*ID2D1GeometrySink) HRESULT {
                return @as(*const ID2D1PathGeometry.VTable, @ptrCast(self.vtable)).Open(@as(*const ID2D1PathGeometry, @ptrCast(self)), geometry_sink_);
            }
            pub inline fn stream(self: *const T, geometry_sink_: ?*ID2D1GeometrySink) HRESULT {
                return @as(*const ID2D1PathGeometry.VTable, @ptrCast(self.vtable)).Stream(@as(*const ID2D1PathGeometry, @ptrCast(self)), geometry_sink_);
            }
            pub inline fn getSegmentCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const ID2D1PathGeometry.VTable, @ptrCast(self.vtable)).GetSegmentCount(@as(*const ID2D1PathGeometry, @ptrCast(self)), count_);
            }
            pub inline fn getFigureCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const ID2D1PathGeometry.VTable, @ptrCast(self.vtable)).GetFigureCount(@as(*const ID2D1PathGeometry, @ptrCast(self)), count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1Mesh_Value = Guid.initString("2cd906c2-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1Mesh = &IID_ID2D1Mesh_Value;
pub const ID2D1Mesh = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
        Open: *const fn (
            self: *const ID2D1Mesh,
            tessellation_sink: ?*?*ID2D1TessellationSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
            pub inline fn open(self: *const T, tessellation_sink_: ?*?*ID2D1TessellationSink) HRESULT {
                return @as(*const ID2D1Mesh.VTable, @ptrCast(self.vtable)).Open(@as(*const ID2D1Mesh, @ptrCast(self)), tessellation_sink_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1Layer_Value = Guid.initString("2cd9069b-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1Layer = &IID_ID2D1Layer_Value;
pub const ID2D1Layer = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
        GetSize: *const fn (
            self: *const ID2D1Layer,
            retval: *D2D_SIZE_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
            pub inline fn getSize(self: *const T) D2D_SIZE_F {
                var retval: D2D_SIZE_F = undefined;
                @as(*const ID2D1Layer.VTable, @ptrCast(self.vtable)).GetSize(@as(*const ID2D1Layer, @ptrCast(self)), &retval);
                return retval;
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1DrawingStateBlock_Value = Guid.initString("28506e39-ebf6-46a1-bb47-fd85565ab957");
pub const IID_ID2D1DrawingStateBlock = &IID_ID2D1DrawingStateBlock_Value;
pub const ID2D1DrawingStateBlock = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
        GetDescription: *const fn (
            self: *const ID2D1DrawingStateBlock,
            state_description: ?*D2D1_DRAWING_STATE_DESCRIPTION,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetDescription: *const fn (
            self: *const ID2D1DrawingStateBlock,
            state_description: ?*const D2D1_DRAWING_STATE_DESCRIPTION,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetTextRenderingParams: *const fn (
            self: *const ID2D1DrawingStateBlock,
            text_rendering_params: ?*IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetTextRenderingParams: *const fn (
            self: *const ID2D1DrawingStateBlock,
            text_rendering_params: ?*?*IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
            pub inline fn getDescription(self: *const T, state_description_: ?*D2D1_DRAWING_STATE_DESCRIPTION) void {
                return @as(*const ID2D1DrawingStateBlock.VTable, @ptrCast(self.vtable)).GetDescription(@as(*const ID2D1DrawingStateBlock, @ptrCast(self)), state_description_);
            }
            pub inline fn setDescription(self: *const T, state_description_: ?*const D2D1_DRAWING_STATE_DESCRIPTION) void {
                return @as(*const ID2D1DrawingStateBlock.VTable, @ptrCast(self.vtable)).SetDescription(@as(*const ID2D1DrawingStateBlock, @ptrCast(self)), state_description_);
            }
            pub inline fn setTextRenderingParams(self: *const T, text_rendering_params_: ?*IDWriteRenderingParams) void {
                return @as(*const ID2D1DrawingStateBlock.VTable, @ptrCast(self.vtable)).SetTextRenderingParams(@as(*const ID2D1DrawingStateBlock, @ptrCast(self)), text_rendering_params_);
            }
            pub inline fn getTextRenderingParams(self: *const T, text_rendering_params_: ?*?*IDWriteRenderingParams) void {
                return @as(*const ID2D1DrawingStateBlock.VTable, @ptrCast(self.vtable)).GetTextRenderingParams(@as(*const ID2D1DrawingStateBlock, @ptrCast(self)), text_rendering_params_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1RenderTarget_Value = Guid.initString("2cd90694-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1RenderTarget = &IID_ID2D1RenderTarget_Value;
pub const ID2D1RenderTarget = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
        CreateBitmap: *const fn (
            self: *const ID2D1RenderTarget,
            size: D2D_SIZE_U,
            src_data: ?*const anyopaque,
            pitch: u32,
            bitmap_properties: ?*const D2D1_BITMAP_PROPERTIES,
            bitmap: ?*?*ID2D1Bitmap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapFromWicBitmap: *const fn (
            self: *const ID2D1RenderTarget,
            wic_bitmap_source: ?*IWICBitmapSource,
            bitmap_properties: ?*const D2D1_BITMAP_PROPERTIES,
            bitmap: ?*?*ID2D1Bitmap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSharedBitmap: *const fn (
            self: *const ID2D1RenderTarget,
            riid: ?*const Guid,
            data: ?*anyopaque,
            bitmap_properties: ?*const D2D1_BITMAP_PROPERTIES,
            bitmap: ?*?*ID2D1Bitmap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapBrush: *const fn (
            self: *const ID2D1RenderTarget,
            bitmap: ?*ID2D1Bitmap,
            bitmap_brush_properties: ?*const D2D1_BITMAP_BRUSH_PROPERTIES,
            brush_properties: ?*const D2D1_BRUSH_PROPERTIES,
            bitmap_brush: ?*?*ID2D1BitmapBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSolidColorBrush: *const fn (
            self: *const ID2D1RenderTarget,
            color: ?*const D2D1_COLOR_F,
            brush_properties: ?*const D2D1_BRUSH_PROPERTIES,
            solid_color_brush: ?*?*ID2D1SolidColorBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGradientStopCollection: *const fn (
            self: *const ID2D1RenderTarget,
            gradient_stops: [*]const D2D1_GRADIENT_STOP,
            gradient_stops_count: u32,
            color_interpolation_gamma: D2D1_GAMMA,
            extend_mode: D2D1_EXTEND_MODE,
            gradient_stop_collection: ?*?*ID2D1GradientStopCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateLinearGradientBrush: *const fn (
            self: *const ID2D1RenderTarget,
            linear_gradient_brush_properties: ?*const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES,
            brush_properties: ?*const D2D1_BRUSH_PROPERTIES,
            gradient_stop_collection: ?*ID2D1GradientStopCollection,
            linear_gradient_brush: ?*?*ID2D1LinearGradientBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRadialGradientBrush: *const fn (
            self: *const ID2D1RenderTarget,
            radial_gradient_brush_properties: ?*const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES,
            brush_properties: ?*const D2D1_BRUSH_PROPERTIES,
            gradient_stop_collection: ?*ID2D1GradientStopCollection,
            radial_gradient_brush: ?*?*ID2D1RadialGradientBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCompatibleRenderTarget: *const fn (
            self: *const ID2D1RenderTarget,
            desired_size: ?*const D2D_SIZE_F,
            desired_pixel_size: ?*const D2D_SIZE_U,
            desired_format: ?*const D2D1_PIXEL_FORMAT,
            options: D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS,
            bitmap_render_target: ?*?*ID2D1BitmapRenderTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateLayer: *const fn (
            self: *const ID2D1RenderTarget,
            size: ?*const D2D_SIZE_F,
            layer: ?*?*ID2D1Layer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMesh: *const fn (
            self: *const ID2D1RenderTarget,
            mesh: ?*?*ID2D1Mesh,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawLine: *const fn (
            self: *const ID2D1RenderTarget,
            point0: D2D_POINT_2F,
            point1: D2D_POINT_2F,
            brush: ?*ID2D1Brush,
            stroke_width: f32,
            stroke_style: ?*ID2D1StrokeStyle,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawRectangle: *const fn (
            self: *const ID2D1RenderTarget,
            rect: ?*const D2D_RECT_F,
            brush: ?*ID2D1Brush,
            stroke_width: f32,
            stroke_style: ?*ID2D1StrokeStyle,
        ) callconv(@import("std").os.windows.WINAPI) void,
        FillRectangle: *const fn (
            self: *const ID2D1RenderTarget,
            rect: ?*const D2D_RECT_F,
            brush: ?*ID2D1Brush,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawRoundedRectangle: *const fn (
            self: *const ID2D1RenderTarget,
            rounded_rect: ?*const D2D1_ROUNDED_RECT,
            brush: ?*ID2D1Brush,
            stroke_width: f32,
            stroke_style: ?*ID2D1StrokeStyle,
        ) callconv(@import("std").os.windows.WINAPI) void,
        FillRoundedRectangle: *const fn (
            self: *const ID2D1RenderTarget,
            rounded_rect: ?*const D2D1_ROUNDED_RECT,
            brush: ?*ID2D1Brush,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawEllipse: *const fn (
            self: *const ID2D1RenderTarget,
            ellipse: ?*const D2D1_ELLIPSE,
            brush: ?*ID2D1Brush,
            stroke_width: f32,
            stroke_style: ?*ID2D1StrokeStyle,
        ) callconv(@import("std").os.windows.WINAPI) void,
        FillEllipse: *const fn (
            self: *const ID2D1RenderTarget,
            ellipse: ?*const D2D1_ELLIPSE,
            brush: ?*ID2D1Brush,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawGeometry: *const fn (
            self: *const ID2D1RenderTarget,
            geometry: ?*ID2D1Geometry,
            brush: ?*ID2D1Brush,
            stroke_width: f32,
            stroke_style: ?*ID2D1StrokeStyle,
        ) callconv(@import("std").os.windows.WINAPI) void,
        FillGeometry: *const fn (
            self: *const ID2D1RenderTarget,
            geometry: ?*ID2D1Geometry,
            brush: ?*ID2D1Brush,
            opacity_brush: ?*ID2D1Brush,
        ) callconv(@import("std").os.windows.WINAPI) void,
        FillMesh: *const fn (
            self: *const ID2D1RenderTarget,
            mesh: ?*ID2D1Mesh,
            brush: ?*ID2D1Brush,
        ) callconv(@import("std").os.windows.WINAPI) void,
        FillOpacityMask: *const fn (
            self: *const ID2D1RenderTarget,
            opacity_mask: ?*ID2D1Bitmap,
            brush: ?*ID2D1Brush,
            content: D2D1_OPACITY_MASK_CONTENT,
            destination_rectangle: ?*const D2D_RECT_F,
            source_rectangle: ?*const D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawBitmap: *const fn (
            self: *const ID2D1RenderTarget,
            bitmap: ?*ID2D1Bitmap,
            destination_rectangle: ?*const D2D_RECT_F,
            opacity: f32,
            interpolation_mode: D2D1_BITMAP_INTERPOLATION_MODE,
            source_rectangle: ?*const D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawText: *const fn (
            self: *const ID2D1RenderTarget,
            string: [*:0]const u16,
            string_length: u32,
            text_format: ?*IDWriteTextFormat,
            layout_rect: ?*const D2D_RECT_F,
            default_fill_brush: ?*ID2D1Brush,
            options: D2D1_DRAW_TEXT_OPTIONS,
            measuring_mode: DWRITE_MEASURING_MODE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawTextLayout: *const fn (
            self: *const ID2D1RenderTarget,
            origin: D2D_POINT_2F,
            text_layout: ?*IDWriteTextLayout,
            default_fill_brush: ?*ID2D1Brush,
            options: D2D1_DRAW_TEXT_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawGlyphRun: *const fn (
            self: *const ID2D1RenderTarget,
            baseline_origin: D2D_POINT_2F,
            glyph_run: ?*const DWRITE_GLYPH_RUN,
            foreground_brush: ?*ID2D1Brush,
            measuring_mode: DWRITE_MEASURING_MODE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetTransform: *const fn (
            self: *const ID2D1RenderTarget,
            transform: ?*const D2D_MATRIX_3X2_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetTransform: *const fn (
            self: *const ID2D1RenderTarget,
            transform: ?*D2D_MATRIX_3X2_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetAntialiasMode: *const fn (
            self: *const ID2D1RenderTarget,
            antialias_mode: D2D1_ANTIALIAS_MODE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetAntialiasMode: *const fn (
            self: *const ID2D1RenderTarget,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_ANTIALIAS_MODE,
        SetTextAntialiasMode: *const fn (
            self: *const ID2D1RenderTarget,
            text_antialias_mode: D2D1_TEXT_ANTIALIAS_MODE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetTextAntialiasMode: *const fn (
            self: *const ID2D1RenderTarget,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_TEXT_ANTIALIAS_MODE,
        SetTextRenderingParams: *const fn (
            self: *const ID2D1RenderTarget,
            text_rendering_params: ?*IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetTextRenderingParams: *const fn (
            self: *const ID2D1RenderTarget,
            text_rendering_params: ?*?*IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetTags: *const fn (
            self: *const ID2D1RenderTarget,
            tag1: u64,
            tag2: u64,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetTags: *const fn (
            self: *const ID2D1RenderTarget,
            tag1: ?*u64,
            tag2: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PushLayer: *const fn (
            self: *const ID2D1RenderTarget,
            layer_parameters: ?*const D2D1_LAYER_PARAMETERS,
            layer: ?*ID2D1Layer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PopLayer: *const fn (
            self: *const ID2D1RenderTarget,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Flush: *const fn (
            self: *const ID2D1RenderTarget,
            tag1: ?*u64,
            tag2: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveDrawingState: *const fn (
            self: *const ID2D1RenderTarget,
            drawing_state_block: ?*ID2D1DrawingStateBlock,
        ) callconv(@import("std").os.windows.WINAPI) void,
        RestoreDrawingState: *const fn (
            self: *const ID2D1RenderTarget,
            drawing_state_block: ?*ID2D1DrawingStateBlock,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PushAxisAlignedClip: *const fn (
            self: *const ID2D1RenderTarget,
            clip_rect: ?*const D2D_RECT_F,
            antialias_mode: D2D1_ANTIALIAS_MODE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PopAxisAlignedClip: *const fn (
            self: *const ID2D1RenderTarget,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Clear: *const fn (
            self: *const ID2D1RenderTarget,
            clear_color: ?*const D2D1_COLOR_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        BeginDraw: *const fn (
            self: *const ID2D1RenderTarget,
        ) callconv(@import("std").os.windows.WINAPI) void,
        EndDraw: *const fn (
            self: *const ID2D1RenderTarget,
            tag1: ?*u64,
            tag2: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelFormat: *const fn (
            self: *const ID2D1RenderTarget,
            retval: *D2D1_PIXEL_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetDpi: *const fn (
            self: *const ID2D1RenderTarget,
            dpi_x: f32,
            dpi_y: f32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetDpi: *const fn (
            self: *const ID2D1RenderTarget,
            dpi_x: ?*f32,
            dpi_y: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetSize: *const fn (
            self: *const ID2D1RenderTarget,
            retval: *D2D_SIZE_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetPixelSize: *const fn (
            self: *const ID2D1RenderTarget,
            retval: *D2D_SIZE_U,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetMaximumBitmapSize: *const fn (
            self: *const ID2D1RenderTarget,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        IsSupported: *const fn (
            self: *const ID2D1RenderTarget,
            render_target_properties: ?*const D2D1_RENDER_TARGET_PROPERTIES,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
            pub inline fn createBitmap(self: *const T, size_: D2D_SIZE_U, src_data_: ?*const anyopaque, pitch_: u32, bitmap_properties_: ?*const D2D1_BITMAP_PROPERTIES, bitmap_: ?*?*ID2D1Bitmap) HRESULT {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).CreateBitmap(@as(*const ID2D1RenderTarget, @ptrCast(self)), size_, src_data_, pitch_, bitmap_properties_, bitmap_);
            }
            pub inline fn createBitmapFromWicBitmap(self: *const T, wic_bitmap_source_: ?*IWICBitmapSource, bitmap_properties_: ?*const D2D1_BITMAP_PROPERTIES, bitmap_: ?*?*ID2D1Bitmap) HRESULT {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).CreateBitmapFromWicBitmap(@as(*const ID2D1RenderTarget, @ptrCast(self)), wic_bitmap_source_, bitmap_properties_, bitmap_);
            }
            pub inline fn createSharedBitmap(self: *const T, riid_: ?*const Guid, data_: ?*anyopaque, bitmap_properties_: ?*const D2D1_BITMAP_PROPERTIES, bitmap_: ?*?*ID2D1Bitmap) HRESULT {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).CreateSharedBitmap(@as(*const ID2D1RenderTarget, @ptrCast(self)), riid_, data_, bitmap_properties_, bitmap_);
            }
            pub inline fn createBitmapBrush(self: *const T, bitmap_: ?*ID2D1Bitmap, bitmap_brush_properties_: ?*const D2D1_BITMAP_BRUSH_PROPERTIES, brush_properties_: ?*const D2D1_BRUSH_PROPERTIES, bitmap_brush_: ?*?*ID2D1BitmapBrush) HRESULT {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).CreateBitmapBrush(@as(*const ID2D1RenderTarget, @ptrCast(self)), bitmap_, bitmap_brush_properties_, brush_properties_, bitmap_brush_);
            }
            pub inline fn createSolidColorBrush(self: *const T, color_: ?*const D2D1_COLOR_F, brush_properties_: ?*const D2D1_BRUSH_PROPERTIES, solid_color_brush_: ?*?*ID2D1SolidColorBrush) HRESULT {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).CreateSolidColorBrush(@as(*const ID2D1RenderTarget, @ptrCast(self)), color_, brush_properties_, solid_color_brush_);
            }
            pub inline fn createGradientStopCollection(self: *const T, gradient_stops_: [*]const D2D1_GRADIENT_STOP, gradient_stops_count_: u32, color_interpolation_gamma_: D2D1_GAMMA, extend_mode_: D2D1_EXTEND_MODE, gradient_stop_collection_: ?*?*ID2D1GradientStopCollection) HRESULT {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).CreateGradientStopCollection(@as(*const ID2D1RenderTarget, @ptrCast(self)), gradient_stops_, gradient_stops_count_, color_interpolation_gamma_, extend_mode_, gradient_stop_collection_);
            }
            pub inline fn createLinearGradientBrush(self: *const T, linear_gradient_brush_properties_: ?*const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES, brush_properties_: ?*const D2D1_BRUSH_PROPERTIES, gradient_stop_collection_: ?*ID2D1GradientStopCollection, linear_gradient_brush_: ?*?*ID2D1LinearGradientBrush) HRESULT {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).CreateLinearGradientBrush(@as(*const ID2D1RenderTarget, @ptrCast(self)), linear_gradient_brush_properties_, brush_properties_, gradient_stop_collection_, linear_gradient_brush_);
            }
            pub inline fn createRadialGradientBrush(self: *const T, radial_gradient_brush_properties_: ?*const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES, brush_properties_: ?*const D2D1_BRUSH_PROPERTIES, gradient_stop_collection_: ?*ID2D1GradientStopCollection, radial_gradient_brush_: ?*?*ID2D1RadialGradientBrush) HRESULT {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).CreateRadialGradientBrush(@as(*const ID2D1RenderTarget, @ptrCast(self)), radial_gradient_brush_properties_, brush_properties_, gradient_stop_collection_, radial_gradient_brush_);
            }
            pub inline fn createCompatibleRenderTarget(self: *const T, desired_size_: ?*const D2D_SIZE_F, desired_pixel_size_: ?*const D2D_SIZE_U, desired_format_: ?*const D2D1_PIXEL_FORMAT, options_: D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS, bitmap_render_target_: ?*?*ID2D1BitmapRenderTarget) HRESULT {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).CreateCompatibleRenderTarget(@as(*const ID2D1RenderTarget, @ptrCast(self)), desired_size_, desired_pixel_size_, desired_format_, options_, bitmap_render_target_);
            }
            pub inline fn createLayer(self: *const T, size_: ?*const D2D_SIZE_F, layer_: ?*?*ID2D1Layer) HRESULT {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).CreateLayer(@as(*const ID2D1RenderTarget, @ptrCast(self)), size_, layer_);
            }
            pub inline fn createMesh(self: *const T, mesh_: ?*?*ID2D1Mesh) HRESULT {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).CreateMesh(@as(*const ID2D1RenderTarget, @ptrCast(self)), mesh_);
            }
            pub inline fn drawLine(self: *const T, point0_: D2D_POINT_2F, point1_: D2D_POINT_2F, brush_: ?*ID2D1Brush, stroke_width_: f32, stroke_style_: ?*ID2D1StrokeStyle) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).DrawLine(@as(*const ID2D1RenderTarget, @ptrCast(self)), point0_, point1_, brush_, stroke_width_, stroke_style_);
            }
            pub inline fn drawRectangle(self: *const T, rect_: ?*const D2D_RECT_F, brush_: ?*ID2D1Brush, stroke_width_: f32, stroke_style_: ?*ID2D1StrokeStyle) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).DrawRectangle(@as(*const ID2D1RenderTarget, @ptrCast(self)), rect_, brush_, stroke_width_, stroke_style_);
            }
            pub inline fn fillRectangle(self: *const T, rect_: ?*const D2D_RECT_F, brush_: ?*ID2D1Brush) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).FillRectangle(@as(*const ID2D1RenderTarget, @ptrCast(self)), rect_, brush_);
            }
            pub inline fn drawRoundedRectangle(self: *const T, rounded_rect_: ?*const D2D1_ROUNDED_RECT, brush_: ?*ID2D1Brush, stroke_width_: f32, stroke_style_: ?*ID2D1StrokeStyle) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).DrawRoundedRectangle(@as(*const ID2D1RenderTarget, @ptrCast(self)), rounded_rect_, brush_, stroke_width_, stroke_style_);
            }
            pub inline fn fillRoundedRectangle(self: *const T, rounded_rect_: ?*const D2D1_ROUNDED_RECT, brush_: ?*ID2D1Brush) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).FillRoundedRectangle(@as(*const ID2D1RenderTarget, @ptrCast(self)), rounded_rect_, brush_);
            }
            pub inline fn drawEllipse(self: *const T, ellipse_: ?*const D2D1_ELLIPSE, brush_: ?*ID2D1Brush, stroke_width_: f32, stroke_style_: ?*ID2D1StrokeStyle) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).DrawEllipse(@as(*const ID2D1RenderTarget, @ptrCast(self)), ellipse_, brush_, stroke_width_, stroke_style_);
            }
            pub inline fn fillEllipse(self: *const T, ellipse_: ?*const D2D1_ELLIPSE, brush_: ?*ID2D1Brush) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).FillEllipse(@as(*const ID2D1RenderTarget, @ptrCast(self)), ellipse_, brush_);
            }
            pub inline fn drawGeometry(self: *const T, geometry_: ?*ID2D1Geometry, brush_: ?*ID2D1Brush, stroke_width_: f32, stroke_style_: ?*ID2D1StrokeStyle) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).DrawGeometry(@as(*const ID2D1RenderTarget, @ptrCast(self)), geometry_, brush_, stroke_width_, stroke_style_);
            }
            pub inline fn fillGeometry(self: *const T, geometry_: ?*ID2D1Geometry, brush_: ?*ID2D1Brush, opacity_brush_: ?*ID2D1Brush) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).FillGeometry(@as(*const ID2D1RenderTarget, @ptrCast(self)), geometry_, brush_, opacity_brush_);
            }
            pub inline fn fillMesh(self: *const T, mesh_: ?*ID2D1Mesh, brush_: ?*ID2D1Brush) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).FillMesh(@as(*const ID2D1RenderTarget, @ptrCast(self)), mesh_, brush_);
            }
            pub inline fn fillOpacityMask(self: *const T, opacity_mask_: ?*ID2D1Bitmap, brush_: ?*ID2D1Brush, content_: D2D1_OPACITY_MASK_CONTENT, destination_rectangle_: ?*const D2D_RECT_F, source_rectangle_: ?*const D2D_RECT_F) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).FillOpacityMask(@as(*const ID2D1RenderTarget, @ptrCast(self)), opacity_mask_, brush_, content_, destination_rectangle_, source_rectangle_);
            }
            pub inline fn drawBitmap(self: *const T, bitmap_: ?*ID2D1Bitmap, destination_rectangle_: ?*const D2D_RECT_F, opacity_: f32, interpolation_mode_: D2D1_BITMAP_INTERPOLATION_MODE, source_rectangle_: ?*const D2D_RECT_F) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).DrawBitmap(@as(*const ID2D1RenderTarget, @ptrCast(self)), bitmap_, destination_rectangle_, opacity_, interpolation_mode_, source_rectangle_);
            }
            pub inline fn drawText(self: *const T, string_: [*:0]const u16, string_length_: u32, text_format_: ?*IDWriteTextFormat, layout_rect_: ?*const D2D_RECT_F, default_fill_brush_: ?*ID2D1Brush, options_: D2D1_DRAW_TEXT_OPTIONS, measuring_mode_: DWRITE_MEASURING_MODE) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).DrawText(@as(*const ID2D1RenderTarget, @ptrCast(self)), string_, string_length_, text_format_, layout_rect_, default_fill_brush_, options_, measuring_mode_);
            }
            pub inline fn drawTextLayout(self: *const T, origin_: D2D_POINT_2F, text_layout_: ?*IDWriteTextLayout, default_fill_brush_: ?*ID2D1Brush, options_: D2D1_DRAW_TEXT_OPTIONS) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).DrawTextLayout(@as(*const ID2D1RenderTarget, @ptrCast(self)), origin_, text_layout_, default_fill_brush_, options_);
            }
            pub inline fn drawGlyphRun(self: *const T, baseline_origin_: D2D_POINT_2F, glyph_run_: ?*const DWRITE_GLYPH_RUN, foreground_brush_: ?*ID2D1Brush, measuring_mode_: DWRITE_MEASURING_MODE) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).DrawGlyphRun(@as(*const ID2D1RenderTarget, @ptrCast(self)), baseline_origin_, glyph_run_, foreground_brush_, measuring_mode_);
            }
            pub inline fn setTransform(self: *const T, transform_: ?*const D2D_MATRIX_3X2_F) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).SetTransform(@as(*const ID2D1RenderTarget, @ptrCast(self)), transform_);
            }
            pub inline fn getTransform(self: *const T, transform_: ?*D2D_MATRIX_3X2_F) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).GetTransform(@as(*const ID2D1RenderTarget, @ptrCast(self)), transform_);
            }
            pub inline fn setAntialiasMode(self: *const T, antialias_mode_: D2D1_ANTIALIAS_MODE) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).SetAntialiasMode(@as(*const ID2D1RenderTarget, @ptrCast(self)), antialias_mode_);
            }
            pub inline fn getAntialiasMode(self: *const T) D2D1_ANTIALIAS_MODE {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).GetAntialiasMode(@as(*const ID2D1RenderTarget, @ptrCast(self)));
            }
            pub inline fn setTextAntialiasMode(self: *const T, text_antialias_mode_: D2D1_TEXT_ANTIALIAS_MODE) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).SetTextAntialiasMode(@as(*const ID2D1RenderTarget, @ptrCast(self)), text_antialias_mode_);
            }
            pub inline fn getTextAntialiasMode(self: *const T) D2D1_TEXT_ANTIALIAS_MODE {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).GetTextAntialiasMode(@as(*const ID2D1RenderTarget, @ptrCast(self)));
            }
            pub inline fn setTextRenderingParams(self: *const T, text_rendering_params_: ?*IDWriteRenderingParams) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).SetTextRenderingParams(@as(*const ID2D1RenderTarget, @ptrCast(self)), text_rendering_params_);
            }
            pub inline fn getTextRenderingParams(self: *const T, text_rendering_params_: ?*?*IDWriteRenderingParams) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).GetTextRenderingParams(@as(*const ID2D1RenderTarget, @ptrCast(self)), text_rendering_params_);
            }
            pub inline fn setTags(self: *const T, tag1_: u64, tag2_: u64) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).SetTags(@as(*const ID2D1RenderTarget, @ptrCast(self)), tag1_, tag2_);
            }
            pub inline fn getTags(self: *const T, tag1_: ?*u64, tag2_: ?*u64) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).GetTags(@as(*const ID2D1RenderTarget, @ptrCast(self)), tag1_, tag2_);
            }
            pub inline fn pushLayer(self: *const T, layer_parameters_: ?*const D2D1_LAYER_PARAMETERS, layer_: ?*ID2D1Layer) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).PushLayer(@as(*const ID2D1RenderTarget, @ptrCast(self)), layer_parameters_, layer_);
            }
            pub inline fn popLayer(self: *const T) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).PopLayer(@as(*const ID2D1RenderTarget, @ptrCast(self)));
            }
            pub inline fn flush(self: *const T, tag1_: ?*u64, tag2_: ?*u64) HRESULT {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).Flush(@as(*const ID2D1RenderTarget, @ptrCast(self)), tag1_, tag2_);
            }
            pub inline fn saveDrawingState(self: *const T, drawing_state_block_: ?*ID2D1DrawingStateBlock) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).SaveDrawingState(@as(*const ID2D1RenderTarget, @ptrCast(self)), drawing_state_block_);
            }
            pub inline fn restoreDrawingState(self: *const T, drawing_state_block_: ?*ID2D1DrawingStateBlock) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).RestoreDrawingState(@as(*const ID2D1RenderTarget, @ptrCast(self)), drawing_state_block_);
            }
            pub inline fn pushAxisAlignedClip(self: *const T, clip_rect_: ?*const D2D_RECT_F, antialias_mode_: D2D1_ANTIALIAS_MODE) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).PushAxisAlignedClip(@as(*const ID2D1RenderTarget, @ptrCast(self)), clip_rect_, antialias_mode_);
            }
            pub inline fn popAxisAlignedClip(self: *const T) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).PopAxisAlignedClip(@as(*const ID2D1RenderTarget, @ptrCast(self)));
            }
            pub inline fn clear(self: *const T, clear_color_: ?*const D2D1_COLOR_F) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).Clear(@as(*const ID2D1RenderTarget, @ptrCast(self)), clear_color_);
            }
            pub inline fn beginDraw(self: *const T) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).BeginDraw(@as(*const ID2D1RenderTarget, @ptrCast(self)));
            }
            pub inline fn endDraw(self: *const T, tag1_: ?*u64, tag2_: ?*u64) HRESULT {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).EndDraw(@as(*const ID2D1RenderTarget, @ptrCast(self)), tag1_, tag2_);
            }
            pub inline fn getPixelFormat(self: *const T) D2D1_PIXEL_FORMAT {
                var retval: D2D1_PIXEL_FORMAT = undefined;
                @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).GetPixelFormat(@as(*const ID2D1RenderTarget, @ptrCast(self)), &retval);
                return retval;
            }
            pub inline fn setDpi(self: *const T, dpi_x_: f32, dpi_y_: f32) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).SetDpi(@as(*const ID2D1RenderTarget, @ptrCast(self)), dpi_x_, dpi_y_);
            }
            pub inline fn getDpi(self: *const T, dpi_x_: ?*f32, dpi_y_: ?*f32) void {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).GetDpi(@as(*const ID2D1RenderTarget, @ptrCast(self)), dpi_x_, dpi_y_);
            }
            pub inline fn getSize(self: *const T) D2D_SIZE_F {
                var retval: D2D_SIZE_F = undefined;
                @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).GetSize(@as(*const ID2D1RenderTarget, @ptrCast(self)), &retval);
                return retval;
            }
            pub inline fn getPixelSize(self: *const T) D2D_SIZE_U {
                var retval: D2D_SIZE_U = undefined;
                @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).GetPixelSize(@as(*const ID2D1RenderTarget, @ptrCast(self)), &retval);
                return retval;
            }
            pub inline fn getMaximumBitmapSize(self: *const T) u32 {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).GetMaximumBitmapSize(@as(*const ID2D1RenderTarget, @ptrCast(self)));
            }
            pub inline fn isSupported(self: *const T, render_target_properties_: ?*const D2D1_RENDER_TARGET_PROPERTIES) BOOL {
                return @as(*const ID2D1RenderTarget.VTable, @ptrCast(self.vtable)).IsSupported(@as(*const ID2D1RenderTarget, @ptrCast(self)), render_target_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1BitmapRenderTarget_Value = Guid.initString("2cd90695-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1BitmapRenderTarget = &IID_ID2D1BitmapRenderTarget_Value;
pub const ID2D1BitmapRenderTarget = extern struct {
    pub const VTable = extern struct {
        base: ID2D1RenderTarget.VTable,
        GetBitmap: *const fn (
            self: *const ID2D1BitmapRenderTarget,
            bitmap: ?*?*ID2D1Bitmap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1RenderTarget.MethodMixin(T);
            pub inline fn getBitmap(self: *const T, bitmap_: ?*?*ID2D1Bitmap) HRESULT {
                return @as(*const ID2D1BitmapRenderTarget.VTable, @ptrCast(self.vtable)).GetBitmap(@as(*const ID2D1BitmapRenderTarget, @ptrCast(self)), bitmap_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1HwndRenderTarget_Value = Guid.initString("2cd90698-12e2-11dc-9fed-001143a055f9");
pub const IID_ID2D1HwndRenderTarget = &IID_ID2D1HwndRenderTarget_Value;
pub const ID2D1HwndRenderTarget = extern struct {
    pub const VTable = extern struct {
        base: ID2D1RenderTarget.VTable,
        CheckWindowState: *const fn (
            self: *const ID2D1HwndRenderTarget,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_WINDOW_STATE,
        Resize: *const fn (
            self: *const ID2D1HwndRenderTarget,
            pixel_size: ?*const D2D_SIZE_U,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHwnd: *const fn (
            self: *const ID2D1HwndRenderTarget,
        ) callconv(@import("std").os.windows.WINAPI) ?HWND,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1RenderTarget.MethodMixin(T);
            pub inline fn checkWindowState(self: *const T) D2D1_WINDOW_STATE {
                return @as(*const ID2D1HwndRenderTarget.VTable, @ptrCast(self.vtable)).CheckWindowState(@as(*const ID2D1HwndRenderTarget, @ptrCast(self)));
            }
            pub inline fn resize(self: *const T, pixel_size_: ?*const D2D_SIZE_U) HRESULT {
                return @as(*const ID2D1HwndRenderTarget.VTable, @ptrCast(self.vtable)).Resize(@as(*const ID2D1HwndRenderTarget, @ptrCast(self)), pixel_size_);
            }
            pub inline fn getHwnd(self: *const T) ?HWND {
                return @as(*const ID2D1HwndRenderTarget.VTable, @ptrCast(self.vtable)).GetHwnd(@as(*const ID2D1HwndRenderTarget, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1GdiInteropRenderTarget_Value = Guid.initString("e0db51c3-6f77-4bae-b3d5-e47509b35838");
pub const IID_ID2D1GdiInteropRenderTarget = &IID_ID2D1GdiInteropRenderTarget_Value;
pub const ID2D1GdiInteropRenderTarget = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDC: *const fn (
            self: *const ID2D1GdiInteropRenderTarget,
            mode: D2D1_DC_INITIALIZE_MODE,
            hdc: ?*?HDC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseDC: *const fn (
            self: *const ID2D1GdiInteropRenderTarget,
            update: ?*const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDC(self: *const T, mode_: D2D1_DC_INITIALIZE_MODE, hdc_: ?*?HDC) HRESULT {
                return @as(*const ID2D1GdiInteropRenderTarget.VTable, @ptrCast(self.vtable)).GetDC(@as(*const ID2D1GdiInteropRenderTarget, @ptrCast(self)), mode_, hdc_);
            }
            pub inline fn releaseDC(self: *const T, update_: ?*const RECT) HRESULT {
                return @as(*const ID2D1GdiInteropRenderTarget.VTable, @ptrCast(self.vtable)).ReleaseDC(@as(*const ID2D1GdiInteropRenderTarget, @ptrCast(self)), update_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1DCRenderTarget_Value = Guid.initString("1c51bc64-de61-46fd-9899-63a5d8f03950");
pub const IID_ID2D1DCRenderTarget = &IID_ID2D1DCRenderTarget_Value;
pub const ID2D1DCRenderTarget = extern struct {
    pub const VTable = extern struct {
        base: ID2D1RenderTarget.VTable,
        BindDC: *const fn (
            self: *const ID2D1DCRenderTarget,
            h_d_c: ?HDC,
            p_sub_rect: ?*const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1RenderTarget.MethodMixin(T);
            pub inline fn bindDC(self: *const T, h_d_c_: ?HDC, p_sub_rect_: ?*const RECT) HRESULT {
                return @as(*const ID2D1DCRenderTarget.VTable, @ptrCast(self.vtable)).BindDC(@as(*const ID2D1DCRenderTarget, @ptrCast(self)), h_d_c_, p_sub_rect_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ID2D1Factory_Value = Guid.initString("06152247-6f50-465a-9245-118bfd3b6007");
pub const IID_ID2D1Factory = &IID_ID2D1Factory_Value;
pub const ID2D1Factory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReloadSystemMetrics: *const fn (
            self: *const ID2D1Factory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDesktopDpi: *const fn (
            self: *const ID2D1Factory,
            dpi_x: ?*f32,
            dpi_y: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CreateRectangleGeometry: *const fn (
            self: *const ID2D1Factory,
            rectangle: ?*const D2D_RECT_F,
            rectangle_geometry: ?*?*ID2D1RectangleGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRoundedRectangleGeometry: *const fn (
            self: *const ID2D1Factory,
            rounded_rectangle: ?*const D2D1_ROUNDED_RECT,
            rounded_rectangle_geometry: ?*?*ID2D1RoundedRectangleGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEllipseGeometry: *const fn (
            self: *const ID2D1Factory,
            ellipse: ?*const D2D1_ELLIPSE,
            ellipse_geometry: ?*?*ID2D1EllipseGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGeometryGroup: *const fn (
            self: *const ID2D1Factory,
            fill_mode: D2D1_FILL_MODE,
            geometries: [*]?*ID2D1Geometry,
            geometries_count: u32,
            geometry_group: ?*?*ID2D1GeometryGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTransformedGeometry: *const fn (
            self: *const ID2D1Factory,
            source_geometry: ?*ID2D1Geometry,
            transform: ?*const D2D_MATRIX_3X2_F,
            transformed_geometry: ?*?*ID2D1TransformedGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePathGeometry: *const fn (
            self: *const ID2D1Factory,
            path_geometry: ?*?*ID2D1PathGeometry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStrokeStyle: *const fn (
            self: *const ID2D1Factory,
            stroke_style_properties: ?*const D2D1_STROKE_STYLE_PROPERTIES,
            dashes: ?[*]const f32,
            dashes_count: u32,
            stroke_style: ?*?*ID2D1StrokeStyle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDrawingStateBlock: *const fn (
            self: *const ID2D1Factory,
            drawing_state_description: ?*const D2D1_DRAWING_STATE_DESCRIPTION,
            text_rendering_params: ?*IDWriteRenderingParams,
            drawing_state_block: ?*?*ID2D1DrawingStateBlock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateWicBitmapRenderTarget: *const fn (
            self: *const ID2D1Factory,
            target: ?*IWICBitmap,
            render_target_properties: ?*const D2D1_RENDER_TARGET_PROPERTIES,
            render_target: ?*?*ID2D1RenderTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateHwndRenderTarget: *const fn (
            self: *const ID2D1Factory,
            render_target_properties: ?*const D2D1_RENDER_TARGET_PROPERTIES,
            hwnd_render_target_properties: ?*const D2D1_HWND_RENDER_TARGET_PROPERTIES,
            hwnd_render_target: ?*?*ID2D1HwndRenderTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDxgiSurfaceRenderTarget: *const fn (
            self: *const ID2D1Factory,
            dxgi_surface: ?*IDXGISurface,
            render_target_properties: ?*const D2D1_RENDER_TARGET_PROPERTIES,
            render_target: ?*?*ID2D1RenderTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDCRenderTarget: *const fn (
            self: *const ID2D1Factory,
            render_target_properties: ?*const D2D1_RENDER_TARGET_PROPERTIES,
            dc_render_target: ?*?*ID2D1DCRenderTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn reloadSystemMetrics(self: *const T) HRESULT {
                return @as(*const ID2D1Factory.VTable, @ptrCast(self.vtable)).ReloadSystemMetrics(@as(*const ID2D1Factory, @ptrCast(self)));
            }
            pub inline fn getDesktopDpi(self: *const T, dpi_x_: ?*f32, dpi_y_: ?*f32) void {
                return @as(*const ID2D1Factory.VTable, @ptrCast(self.vtable)).GetDesktopDpi(@as(*const ID2D1Factory, @ptrCast(self)), dpi_x_, dpi_y_);
            }
            pub inline fn createRectangleGeometry(self: *const T, rectangle_: ?*const D2D_RECT_F, rectangle_geometry_: ?*?*ID2D1RectangleGeometry) HRESULT {
                return @as(*const ID2D1Factory.VTable, @ptrCast(self.vtable)).CreateRectangleGeometry(@as(*const ID2D1Factory, @ptrCast(self)), rectangle_, rectangle_geometry_);
            }
            pub inline fn createRoundedRectangleGeometry(self: *const T, rounded_rectangle_: ?*const D2D1_ROUNDED_RECT, rounded_rectangle_geometry_: ?*?*ID2D1RoundedRectangleGeometry) HRESULT {
                return @as(*const ID2D1Factory.VTable, @ptrCast(self.vtable)).CreateRoundedRectangleGeometry(@as(*const ID2D1Factory, @ptrCast(self)), rounded_rectangle_, rounded_rectangle_geometry_);
            }
            pub inline fn createEllipseGeometry(self: *const T, ellipse_: ?*const D2D1_ELLIPSE, ellipse_geometry_: ?*?*ID2D1EllipseGeometry) HRESULT {
                return @as(*const ID2D1Factory.VTable, @ptrCast(self.vtable)).CreateEllipseGeometry(@as(*const ID2D1Factory, @ptrCast(self)), ellipse_, ellipse_geometry_);
            }
            pub inline fn createGeometryGroup(self: *const T, fill_mode_: D2D1_FILL_MODE, geometries_: [*]?*ID2D1Geometry, geometries_count_: u32, geometry_group_: ?*?*ID2D1GeometryGroup) HRESULT {
                return @as(*const ID2D1Factory.VTable, @ptrCast(self.vtable)).CreateGeometryGroup(@as(*const ID2D1Factory, @ptrCast(self)), fill_mode_, geometries_, geometries_count_, geometry_group_);
            }
            pub inline fn createTransformedGeometry(self: *const T, source_geometry_: ?*ID2D1Geometry, transform_: ?*const D2D_MATRIX_3X2_F, transformed_geometry_: ?*?*ID2D1TransformedGeometry) HRESULT {
                return @as(*const ID2D1Factory.VTable, @ptrCast(self.vtable)).CreateTransformedGeometry(@as(*const ID2D1Factory, @ptrCast(self)), source_geometry_, transform_, transformed_geometry_);
            }
            pub inline fn createPathGeometry(self: *const T, path_geometry_: ?*?*ID2D1PathGeometry) HRESULT {
                return @as(*const ID2D1Factory.VTable, @ptrCast(self.vtable)).CreatePathGeometry(@as(*const ID2D1Factory, @ptrCast(self)), path_geometry_);
            }
            pub inline fn createStrokeStyle(self: *const T, stroke_style_properties_: ?*const D2D1_STROKE_STYLE_PROPERTIES, dashes_: ?[*]const f32, dashes_count_: u32, stroke_style_: ?*?*ID2D1StrokeStyle) HRESULT {
                return @as(*const ID2D1Factory.VTable, @ptrCast(self.vtable)).CreateStrokeStyle(@as(*const ID2D1Factory, @ptrCast(self)), stroke_style_properties_, dashes_, dashes_count_, stroke_style_);
            }
            pub inline fn createDrawingStateBlock(self: *const T, drawing_state_description_: ?*const D2D1_DRAWING_STATE_DESCRIPTION, text_rendering_params_: ?*IDWriteRenderingParams, drawing_state_block_: ?*?*ID2D1DrawingStateBlock) HRESULT {
                return @as(*const ID2D1Factory.VTable, @ptrCast(self.vtable)).CreateDrawingStateBlock(@as(*const ID2D1Factory, @ptrCast(self)), drawing_state_description_, text_rendering_params_, drawing_state_block_);
            }
            pub inline fn createWicBitmapRenderTarget(self: *const T, target_: ?*IWICBitmap, render_target_properties_: ?*const D2D1_RENDER_TARGET_PROPERTIES, render_target_: ?*?*ID2D1RenderTarget) HRESULT {
                return @as(*const ID2D1Factory.VTable, @ptrCast(self.vtable)).CreateWicBitmapRenderTarget(@as(*const ID2D1Factory, @ptrCast(self)), target_, render_target_properties_, render_target_);
            }
            pub inline fn createHwndRenderTarget(self: *const T, render_target_properties_: ?*const D2D1_RENDER_TARGET_PROPERTIES, hwnd_render_target_properties_: ?*const D2D1_HWND_RENDER_TARGET_PROPERTIES, hwnd_render_target_: ?*?*ID2D1HwndRenderTarget) HRESULT {
                return @as(*const ID2D1Factory.VTable, @ptrCast(self.vtable)).CreateHwndRenderTarget(@as(*const ID2D1Factory, @ptrCast(self)), render_target_properties_, hwnd_render_target_properties_, hwnd_render_target_);
            }
            pub inline fn createDxgiSurfaceRenderTarget(self: *const T, dxgi_surface_: ?*IDXGISurface, render_target_properties_: ?*const D2D1_RENDER_TARGET_PROPERTIES, render_target_: ?*?*ID2D1RenderTarget) HRESULT {
                return @as(*const ID2D1Factory.VTable, @ptrCast(self.vtable)).CreateDxgiSurfaceRenderTarget(@as(*const ID2D1Factory, @ptrCast(self)), dxgi_surface_, render_target_properties_, render_target_);
            }
            pub inline fn createDCRenderTarget(self: *const T, render_target_properties_: ?*const D2D1_RENDER_TARGET_PROPERTIES, dc_render_target_: ?*?*ID2D1DCRenderTarget) HRESULT {
                return @as(*const ID2D1Factory.VTable, @ptrCast(self.vtable)).CreateDCRenderTarget(@as(*const ID2D1Factory, @ptrCast(self)), render_target_properties_, dc_render_target_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D2D1_CHANNEL_SELECTOR = enum(u32) {
    R = 0,
    G = 1,
    B = 2,
    A = 3,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_CHANNEL_SELECTOR_R = D2D1_CHANNEL_SELECTOR.R;
pub const D2D1_CHANNEL_SELECTOR_G = D2D1_CHANNEL_SELECTOR.G;
pub const D2D1_CHANNEL_SELECTOR_B = D2D1_CHANNEL_SELECTOR.B;
pub const D2D1_CHANNEL_SELECTOR_A = D2D1_CHANNEL_SELECTOR.A;
pub const D2D1_CHANNEL_SELECTOR_FORCE_DWORD = D2D1_CHANNEL_SELECTOR.FORCE_DWORD;

pub const D2D1_BITMAPSOURCE_ORIENTATION = enum(u32) {
    DEFAULT = 1,
    FLIP_HORIZONTAL = 2,
    ROTATE_CLOCKWISE180 = 3,
    ROTATE_CLOCKWISE180_FLIP_HORIZONTAL = 4,
    ROTATE_CLOCKWISE270_FLIP_HORIZONTAL = 5,
    ROTATE_CLOCKWISE90 = 6,
    ROTATE_CLOCKWISE90_FLIP_HORIZONTAL = 7,
    ROTATE_CLOCKWISE270 = 8,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_BITMAPSOURCE_ORIENTATION_DEFAULT = D2D1_BITMAPSOURCE_ORIENTATION.DEFAULT;
pub const D2D1_BITMAPSOURCE_ORIENTATION_FLIP_HORIZONTAL = D2D1_BITMAPSOURCE_ORIENTATION.FLIP_HORIZONTAL;
pub const D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180 = D2D1_BITMAPSOURCE_ORIENTATION.ROTATE_CLOCKWISE180;
pub const D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL = D2D1_BITMAPSOURCE_ORIENTATION.ROTATE_CLOCKWISE180_FLIP_HORIZONTAL;
pub const D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL = D2D1_BITMAPSOURCE_ORIENTATION.ROTATE_CLOCKWISE270_FLIP_HORIZONTAL;
pub const D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90 = D2D1_BITMAPSOURCE_ORIENTATION.ROTATE_CLOCKWISE90;
pub const D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL = D2D1_BITMAPSOURCE_ORIENTATION.ROTATE_CLOCKWISE90_FLIP_HORIZONTAL;
pub const D2D1_BITMAPSOURCE_ORIENTATION_ROTATE_CLOCKWISE270 = D2D1_BITMAPSOURCE_ORIENTATION.ROTATE_CLOCKWISE270;
pub const D2D1_BITMAPSOURCE_ORIENTATION_FORCE_DWORD = D2D1_BITMAPSOURCE_ORIENTATION.FORCE_DWORD;

pub const D2D1_GAUSSIANBLUR_PROP = enum(u32) {
    STANDARD_DEVIATION = 0,
    OPTIMIZATION = 1,
    BORDER_MODE = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_GAUSSIANBLUR_PROP_STANDARD_DEVIATION = D2D1_GAUSSIANBLUR_PROP.STANDARD_DEVIATION;
pub const D2D1_GAUSSIANBLUR_PROP_OPTIMIZATION = D2D1_GAUSSIANBLUR_PROP.OPTIMIZATION;
pub const D2D1_GAUSSIANBLUR_PROP_BORDER_MODE = D2D1_GAUSSIANBLUR_PROP.BORDER_MODE;
pub const D2D1_GAUSSIANBLUR_PROP_FORCE_DWORD = D2D1_GAUSSIANBLUR_PROP.FORCE_DWORD;

pub const D2D1_GAUSSIANBLUR_OPTIMIZATION = enum(u32) {
    SPEED = 0,
    BALANCED = 1,
    QUALITY = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_GAUSSIANBLUR_OPTIMIZATION_SPEED = D2D1_GAUSSIANBLUR_OPTIMIZATION.SPEED;
pub const D2D1_GAUSSIANBLUR_OPTIMIZATION_BALANCED = D2D1_GAUSSIANBLUR_OPTIMIZATION.BALANCED;
pub const D2D1_GAUSSIANBLUR_OPTIMIZATION_QUALITY = D2D1_GAUSSIANBLUR_OPTIMIZATION.QUALITY;
pub const D2D1_GAUSSIANBLUR_OPTIMIZATION_FORCE_DWORD = D2D1_GAUSSIANBLUR_OPTIMIZATION.FORCE_DWORD;

pub const D2D1_DIRECTIONALBLUR_PROP = enum(u32) {
    STANDARD_DEVIATION = 0,
    ANGLE = 1,
    OPTIMIZATION = 2,
    BORDER_MODE = 3,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_DIRECTIONALBLUR_PROP_STANDARD_DEVIATION = D2D1_DIRECTIONALBLUR_PROP.STANDARD_DEVIATION;
pub const D2D1_DIRECTIONALBLUR_PROP_ANGLE = D2D1_DIRECTIONALBLUR_PROP.ANGLE;
pub const D2D1_DIRECTIONALBLUR_PROP_OPTIMIZATION = D2D1_DIRECTIONALBLUR_PROP.OPTIMIZATION;
pub const D2D1_DIRECTIONALBLUR_PROP_BORDER_MODE = D2D1_DIRECTIONALBLUR_PROP.BORDER_MODE;
pub const D2D1_DIRECTIONALBLUR_PROP_FORCE_DWORD = D2D1_DIRECTIONALBLUR_PROP.FORCE_DWORD;

pub const D2D1_DIRECTIONALBLUR_OPTIMIZATION = enum(u32) {
    SPEED = 0,
    BALANCED = 1,
    QUALITY = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_DIRECTIONALBLUR_OPTIMIZATION_SPEED = D2D1_DIRECTIONALBLUR_OPTIMIZATION.SPEED;
pub const D2D1_DIRECTIONALBLUR_OPTIMIZATION_BALANCED = D2D1_DIRECTIONALBLUR_OPTIMIZATION.BALANCED;
pub const D2D1_DIRECTIONALBLUR_OPTIMIZATION_QUALITY = D2D1_DIRECTIONALBLUR_OPTIMIZATION.QUALITY;
pub const D2D1_DIRECTIONALBLUR_OPTIMIZATION_FORCE_DWORD = D2D1_DIRECTIONALBLUR_OPTIMIZATION.FORCE_DWORD;

pub const D2D1_SHADOW_PROP = enum(u32) {
    BLUR_STANDARD_DEVIATION = 0,
    COLOR = 1,
    OPTIMIZATION = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SHADOW_PROP_BLUR_STANDARD_DEVIATION = D2D1_SHADOW_PROP.BLUR_STANDARD_DEVIATION;
pub const D2D1_SHADOW_PROP_COLOR = D2D1_SHADOW_PROP.COLOR;
pub const D2D1_SHADOW_PROP_OPTIMIZATION = D2D1_SHADOW_PROP.OPTIMIZATION;
pub const D2D1_SHADOW_PROP_FORCE_DWORD = D2D1_SHADOW_PROP.FORCE_DWORD;

pub const D2D1_SHADOW_OPTIMIZATION = enum(u32) {
    SPEED = 0,
    BALANCED = 1,
    QUALITY = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SHADOW_OPTIMIZATION_SPEED = D2D1_SHADOW_OPTIMIZATION.SPEED;
pub const D2D1_SHADOW_OPTIMIZATION_BALANCED = D2D1_SHADOW_OPTIMIZATION.BALANCED;
pub const D2D1_SHADOW_OPTIMIZATION_QUALITY = D2D1_SHADOW_OPTIMIZATION.QUALITY;
pub const D2D1_SHADOW_OPTIMIZATION_FORCE_DWORD = D2D1_SHADOW_OPTIMIZATION.FORCE_DWORD;

pub const D2D1_BLEND_PROP = enum(u32) {
    MODE = 0,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_BLEND_PROP_MODE = D2D1_BLEND_PROP.MODE;
pub const D2D1_BLEND_PROP_FORCE_DWORD = D2D1_BLEND_PROP.FORCE_DWORD;

pub const D2D1_SATURATION_PROP = enum(u32) {
    SATURATION = 0,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SATURATION_PROP_SATURATION = D2D1_SATURATION_PROP.SATURATION;
pub const D2D1_SATURATION_PROP_FORCE_DWORD = D2D1_SATURATION_PROP.FORCE_DWORD;

pub const D2D1_HUEROTATION_PROP = enum(u32) {
    ANGLE = 0,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_HUEROTATION_PROP_ANGLE = D2D1_HUEROTATION_PROP.ANGLE;
pub const D2D1_HUEROTATION_PROP_FORCE_DWORD = D2D1_HUEROTATION_PROP.FORCE_DWORD;

pub const D2D1_COLORMATRIX_PROP = enum(u32) {
    COLOR_MATRIX = 0,
    ALPHA_MODE = 1,
    CLAMP_OUTPUT = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_COLORMATRIX_PROP_COLOR_MATRIX = D2D1_COLORMATRIX_PROP.COLOR_MATRIX;
pub const D2D1_COLORMATRIX_PROP_ALPHA_MODE = D2D1_COLORMATRIX_PROP.ALPHA_MODE;
pub const D2D1_COLORMATRIX_PROP_CLAMP_OUTPUT = D2D1_COLORMATRIX_PROP.CLAMP_OUTPUT;
pub const D2D1_COLORMATRIX_PROP_FORCE_DWORD = D2D1_COLORMATRIX_PROP.FORCE_DWORD;

pub const D2D1_BITMAPSOURCE_PROP = enum(u32) {
    WIC_BITMAP_SOURCE = 0,
    SCALE = 1,
    INTERPOLATION_MODE = 2,
    ENABLE_DPI_CORRECTION = 3,
    ALPHA_MODE = 4,
    ORIENTATION = 5,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_BITMAPSOURCE_PROP_WIC_BITMAP_SOURCE = D2D1_BITMAPSOURCE_PROP.WIC_BITMAP_SOURCE;
pub const D2D1_BITMAPSOURCE_PROP_SCALE = D2D1_BITMAPSOURCE_PROP.SCALE;
pub const D2D1_BITMAPSOURCE_PROP_INTERPOLATION_MODE = D2D1_BITMAPSOURCE_PROP.INTERPOLATION_MODE;
pub const D2D1_BITMAPSOURCE_PROP_ENABLE_DPI_CORRECTION = D2D1_BITMAPSOURCE_PROP.ENABLE_DPI_CORRECTION;
pub const D2D1_BITMAPSOURCE_PROP_ALPHA_MODE = D2D1_BITMAPSOURCE_PROP.ALPHA_MODE;
pub const D2D1_BITMAPSOURCE_PROP_ORIENTATION = D2D1_BITMAPSOURCE_PROP.ORIENTATION;
pub const D2D1_BITMAPSOURCE_PROP_FORCE_DWORD = D2D1_BITMAPSOURCE_PROP.FORCE_DWORD;

pub const D2D1_BITMAPSOURCE_INTERPOLATION_MODE = enum(u32) {
    NEAREST_NEIGHBOR = 0,
    LINEAR = 1,
    CUBIC = 2,
    FANT = 6,
    MIPMAP_LINEAR = 7,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_BITMAPSOURCE_INTERPOLATION_MODE_NEAREST_NEIGHBOR = D2D1_BITMAPSOURCE_INTERPOLATION_MODE.NEAREST_NEIGHBOR;
pub const D2D1_BITMAPSOURCE_INTERPOLATION_MODE_LINEAR = D2D1_BITMAPSOURCE_INTERPOLATION_MODE.LINEAR;
pub const D2D1_BITMAPSOURCE_INTERPOLATION_MODE_CUBIC = D2D1_BITMAPSOURCE_INTERPOLATION_MODE.CUBIC;
pub const D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FANT = D2D1_BITMAPSOURCE_INTERPOLATION_MODE.FANT;
pub const D2D1_BITMAPSOURCE_INTERPOLATION_MODE_MIPMAP_LINEAR = D2D1_BITMAPSOURCE_INTERPOLATION_MODE.MIPMAP_LINEAR;
pub const D2D1_BITMAPSOURCE_INTERPOLATION_MODE_FORCE_DWORD = D2D1_BITMAPSOURCE_INTERPOLATION_MODE.FORCE_DWORD;

pub const D2D1_BITMAPSOURCE_ALPHA_MODE = enum(u32) {
    PREMULTIPLIED = 1,
    STRAIGHT = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_BITMAPSOURCE_ALPHA_MODE_PREMULTIPLIED = D2D1_BITMAPSOURCE_ALPHA_MODE.PREMULTIPLIED;
pub const D2D1_BITMAPSOURCE_ALPHA_MODE_STRAIGHT = D2D1_BITMAPSOURCE_ALPHA_MODE.STRAIGHT;
pub const D2D1_BITMAPSOURCE_ALPHA_MODE_FORCE_DWORD = D2D1_BITMAPSOURCE_ALPHA_MODE.FORCE_DWORD;

pub const D2D1_COMPOSITE_PROP = enum(u32) {
    MODE = 0,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_COMPOSITE_PROP_MODE = D2D1_COMPOSITE_PROP.MODE;
pub const D2D1_COMPOSITE_PROP_FORCE_DWORD = D2D1_COMPOSITE_PROP.FORCE_DWORD;

pub const D2D1_3DTRANSFORM_PROP = enum(u32) {
    INTERPOLATION_MODE = 0,
    BORDER_MODE = 1,
    TRANSFORM_MATRIX = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_3DTRANSFORM_PROP_INTERPOLATION_MODE = D2D1_3DTRANSFORM_PROP.INTERPOLATION_MODE;
pub const D2D1_3DTRANSFORM_PROP_BORDER_MODE = D2D1_3DTRANSFORM_PROP.BORDER_MODE;
pub const D2D1_3DTRANSFORM_PROP_TRANSFORM_MATRIX = D2D1_3DTRANSFORM_PROP.TRANSFORM_MATRIX;
pub const D2D1_3DTRANSFORM_PROP_FORCE_DWORD = D2D1_3DTRANSFORM_PROP.FORCE_DWORD;

pub const D2D1_3DTRANSFORM_INTERPOLATION_MODE = enum(u32) {
    NEAREST_NEIGHBOR = 0,
    LINEAR = 1,
    CUBIC = 2,
    MULTI_SAMPLE_LINEAR = 3,
    ANISOTROPIC = 4,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_3DTRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR = D2D1_3DTRANSFORM_INTERPOLATION_MODE.NEAREST_NEIGHBOR;
pub const D2D1_3DTRANSFORM_INTERPOLATION_MODE_LINEAR = D2D1_3DTRANSFORM_INTERPOLATION_MODE.LINEAR;
pub const D2D1_3DTRANSFORM_INTERPOLATION_MODE_CUBIC = D2D1_3DTRANSFORM_INTERPOLATION_MODE.CUBIC;
pub const D2D1_3DTRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = D2D1_3DTRANSFORM_INTERPOLATION_MODE.MULTI_SAMPLE_LINEAR;
pub const D2D1_3DTRANSFORM_INTERPOLATION_MODE_ANISOTROPIC = D2D1_3DTRANSFORM_INTERPOLATION_MODE.ANISOTROPIC;
pub const D2D1_3DTRANSFORM_INTERPOLATION_MODE_FORCE_DWORD = D2D1_3DTRANSFORM_INTERPOLATION_MODE.FORCE_DWORD;

pub const D2D1_3DPERSPECTIVETRANSFORM_PROP = enum(u32) {
    INTERPOLATION_MODE = 0,
    BORDER_MODE = 1,
    DEPTH = 2,
    PERSPECTIVE_ORIGIN = 3,
    LOCAL_OFFSET = 4,
    GLOBAL_OFFSET = 5,
    ROTATION_ORIGIN = 6,
    ROTATION = 7,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_3DPERSPECTIVETRANSFORM_PROP_INTERPOLATION_MODE = D2D1_3DPERSPECTIVETRANSFORM_PROP.INTERPOLATION_MODE;
pub const D2D1_3DPERSPECTIVETRANSFORM_PROP_BORDER_MODE = D2D1_3DPERSPECTIVETRANSFORM_PROP.BORDER_MODE;
pub const D2D1_3DPERSPECTIVETRANSFORM_PROP_DEPTH = D2D1_3DPERSPECTIVETRANSFORM_PROP.DEPTH;
pub const D2D1_3DPERSPECTIVETRANSFORM_PROP_PERSPECTIVE_ORIGIN = D2D1_3DPERSPECTIVETRANSFORM_PROP.PERSPECTIVE_ORIGIN;
pub const D2D1_3DPERSPECTIVETRANSFORM_PROP_LOCAL_OFFSET = D2D1_3DPERSPECTIVETRANSFORM_PROP.LOCAL_OFFSET;
pub const D2D1_3DPERSPECTIVETRANSFORM_PROP_GLOBAL_OFFSET = D2D1_3DPERSPECTIVETRANSFORM_PROP.GLOBAL_OFFSET;
pub const D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION_ORIGIN = D2D1_3DPERSPECTIVETRANSFORM_PROP.ROTATION_ORIGIN;
pub const D2D1_3DPERSPECTIVETRANSFORM_PROP_ROTATION = D2D1_3DPERSPECTIVETRANSFORM_PROP.ROTATION;
pub const D2D1_3DPERSPECTIVETRANSFORM_PROP_FORCE_DWORD = D2D1_3DPERSPECTIVETRANSFORM_PROP.FORCE_DWORD;

pub const D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE = enum(u32) {
    NEAREST_NEIGHBOR = 0,
    LINEAR = 1,
    CUBIC = 2,
    MULTI_SAMPLE_LINEAR = 3,
    ANISOTROPIC = 4,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_NEAREST_NEIGHBOR = D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE.NEAREST_NEIGHBOR;
pub const D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_LINEAR = D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE.LINEAR;
pub const D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_CUBIC = D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE.CUBIC;
pub const D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE.MULTI_SAMPLE_LINEAR;
pub const D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_ANISOTROPIC = D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE.ANISOTROPIC;
pub const D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE_FORCE_DWORD = D2D1_3DPERSPECTIVETRANSFORM_INTERPOLATION_MODE.FORCE_DWORD;

pub const D2D1_2DAFFINETRANSFORM_PROP = enum(u32) {
    INTERPOLATION_MODE = 0,
    BORDER_MODE = 1,
    TRANSFORM_MATRIX = 2,
    SHARPNESS = 3,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_2DAFFINETRANSFORM_PROP_INTERPOLATION_MODE = D2D1_2DAFFINETRANSFORM_PROP.INTERPOLATION_MODE;
pub const D2D1_2DAFFINETRANSFORM_PROP_BORDER_MODE = D2D1_2DAFFINETRANSFORM_PROP.BORDER_MODE;
pub const D2D1_2DAFFINETRANSFORM_PROP_TRANSFORM_MATRIX = D2D1_2DAFFINETRANSFORM_PROP.TRANSFORM_MATRIX;
pub const D2D1_2DAFFINETRANSFORM_PROP_SHARPNESS = D2D1_2DAFFINETRANSFORM_PROP.SHARPNESS;
pub const D2D1_2DAFFINETRANSFORM_PROP_FORCE_DWORD = D2D1_2DAFFINETRANSFORM_PROP.FORCE_DWORD;

pub const D2D1_DPICOMPENSATION_PROP = enum(u32) {
    INTERPOLATION_MODE = 0,
    BORDER_MODE = 1,
    INPUT_DPI = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_DPICOMPENSATION_PROP_INTERPOLATION_MODE = D2D1_DPICOMPENSATION_PROP.INTERPOLATION_MODE;
pub const D2D1_DPICOMPENSATION_PROP_BORDER_MODE = D2D1_DPICOMPENSATION_PROP.BORDER_MODE;
pub const D2D1_DPICOMPENSATION_PROP_INPUT_DPI = D2D1_DPICOMPENSATION_PROP.INPUT_DPI;
pub const D2D1_DPICOMPENSATION_PROP_FORCE_DWORD = D2D1_DPICOMPENSATION_PROP.FORCE_DWORD;

pub const D2D1_DPICOMPENSATION_INTERPOLATION_MODE = enum(u32) {
    NEAREST_NEIGHBOR = 0,
    LINEAR = 1,
    CUBIC = 2,
    MULTI_SAMPLE_LINEAR = 3,
    ANISOTROPIC = 4,
    HIGH_QUALITY_CUBIC = 5,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_DPICOMPENSATION_INTERPOLATION_MODE_NEAREST_NEIGHBOR = D2D1_DPICOMPENSATION_INTERPOLATION_MODE.NEAREST_NEIGHBOR;
pub const D2D1_DPICOMPENSATION_INTERPOLATION_MODE_LINEAR = D2D1_DPICOMPENSATION_INTERPOLATION_MODE.LINEAR;
pub const D2D1_DPICOMPENSATION_INTERPOLATION_MODE_CUBIC = D2D1_DPICOMPENSATION_INTERPOLATION_MODE.CUBIC;
pub const D2D1_DPICOMPENSATION_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = D2D1_DPICOMPENSATION_INTERPOLATION_MODE.MULTI_SAMPLE_LINEAR;
pub const D2D1_DPICOMPENSATION_INTERPOLATION_MODE_ANISOTROPIC = D2D1_DPICOMPENSATION_INTERPOLATION_MODE.ANISOTROPIC;
pub const D2D1_DPICOMPENSATION_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = D2D1_DPICOMPENSATION_INTERPOLATION_MODE.HIGH_QUALITY_CUBIC;
pub const D2D1_DPICOMPENSATION_INTERPOLATION_MODE_FORCE_DWORD = D2D1_DPICOMPENSATION_INTERPOLATION_MODE.FORCE_DWORD;

pub const D2D1_SCALE_PROP = enum(u32) {
    SCALE = 0,
    CENTER_POINT = 1,
    INTERPOLATION_MODE = 2,
    BORDER_MODE = 3,
    SHARPNESS = 4,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SCALE_PROP_SCALE = D2D1_SCALE_PROP.SCALE;
pub const D2D1_SCALE_PROP_CENTER_POINT = D2D1_SCALE_PROP.CENTER_POINT;
pub const D2D1_SCALE_PROP_INTERPOLATION_MODE = D2D1_SCALE_PROP.INTERPOLATION_MODE;
pub const D2D1_SCALE_PROP_BORDER_MODE = D2D1_SCALE_PROP.BORDER_MODE;
pub const D2D1_SCALE_PROP_SHARPNESS = D2D1_SCALE_PROP.SHARPNESS;
pub const D2D1_SCALE_PROP_FORCE_DWORD = D2D1_SCALE_PROP.FORCE_DWORD;

pub const D2D1_SCALE_INTERPOLATION_MODE = enum(u32) {
    NEAREST_NEIGHBOR = 0,
    LINEAR = 1,
    CUBIC = 2,
    MULTI_SAMPLE_LINEAR = 3,
    ANISOTROPIC = 4,
    HIGH_QUALITY_CUBIC = 5,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SCALE_INTERPOLATION_MODE_NEAREST_NEIGHBOR = D2D1_SCALE_INTERPOLATION_MODE.NEAREST_NEIGHBOR;
pub const D2D1_SCALE_INTERPOLATION_MODE_LINEAR = D2D1_SCALE_INTERPOLATION_MODE.LINEAR;
pub const D2D1_SCALE_INTERPOLATION_MODE_CUBIC = D2D1_SCALE_INTERPOLATION_MODE.CUBIC;
pub const D2D1_SCALE_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = D2D1_SCALE_INTERPOLATION_MODE.MULTI_SAMPLE_LINEAR;
pub const D2D1_SCALE_INTERPOLATION_MODE_ANISOTROPIC = D2D1_SCALE_INTERPOLATION_MODE.ANISOTROPIC;
pub const D2D1_SCALE_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = D2D1_SCALE_INTERPOLATION_MODE.HIGH_QUALITY_CUBIC;
pub const D2D1_SCALE_INTERPOLATION_MODE_FORCE_DWORD = D2D1_SCALE_INTERPOLATION_MODE.FORCE_DWORD;

pub const D2D1_TURBULENCE_PROP = enum(u32) {
    OFFSET = 0,
    SIZE = 1,
    BASE_FREQUENCY = 2,
    NUM_OCTAVES = 3,
    SEED = 4,
    NOISE = 5,
    STITCHABLE = 6,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_TURBULENCE_PROP_OFFSET = D2D1_TURBULENCE_PROP.OFFSET;
pub const D2D1_TURBULENCE_PROP_SIZE = D2D1_TURBULENCE_PROP.SIZE;
pub const D2D1_TURBULENCE_PROP_BASE_FREQUENCY = D2D1_TURBULENCE_PROP.BASE_FREQUENCY;
pub const D2D1_TURBULENCE_PROP_NUM_OCTAVES = D2D1_TURBULENCE_PROP.NUM_OCTAVES;
pub const D2D1_TURBULENCE_PROP_SEED = D2D1_TURBULENCE_PROP.SEED;
pub const D2D1_TURBULENCE_PROP_NOISE = D2D1_TURBULENCE_PROP.NOISE;
pub const D2D1_TURBULENCE_PROP_STITCHABLE = D2D1_TURBULENCE_PROP.STITCHABLE;
pub const D2D1_TURBULENCE_PROP_FORCE_DWORD = D2D1_TURBULENCE_PROP.FORCE_DWORD;

pub const D2D1_DISPLACEMENTMAP_PROP = enum(u32) {
    SCALE = 0,
    X_CHANNEL_SELECT = 1,
    Y_CHANNEL_SELECT = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_DISPLACEMENTMAP_PROP_SCALE = D2D1_DISPLACEMENTMAP_PROP.SCALE;
pub const D2D1_DISPLACEMENTMAP_PROP_X_CHANNEL_SELECT = D2D1_DISPLACEMENTMAP_PROP.X_CHANNEL_SELECT;
pub const D2D1_DISPLACEMENTMAP_PROP_Y_CHANNEL_SELECT = D2D1_DISPLACEMENTMAP_PROP.Y_CHANNEL_SELECT;
pub const D2D1_DISPLACEMENTMAP_PROP_FORCE_DWORD = D2D1_DISPLACEMENTMAP_PROP.FORCE_DWORD;

pub const D2D1_COLORMANAGEMENT_PROP = enum(u32) {
    SOURCE_COLOR_CONTEXT = 0,
    SOURCE_RENDERING_INTENT = 1,
    DESTINATION_COLOR_CONTEXT = 2,
    DESTINATION_RENDERING_INTENT = 3,
    ALPHA_MODE = 4,
    QUALITY = 5,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_COLORMANAGEMENT_PROP_SOURCE_COLOR_CONTEXT = D2D1_COLORMANAGEMENT_PROP.SOURCE_COLOR_CONTEXT;
pub const D2D1_COLORMANAGEMENT_PROP_SOURCE_RENDERING_INTENT = D2D1_COLORMANAGEMENT_PROP.SOURCE_RENDERING_INTENT;
pub const D2D1_COLORMANAGEMENT_PROP_DESTINATION_COLOR_CONTEXT = D2D1_COLORMANAGEMENT_PROP.DESTINATION_COLOR_CONTEXT;
pub const D2D1_COLORMANAGEMENT_PROP_DESTINATION_RENDERING_INTENT = D2D1_COLORMANAGEMENT_PROP.DESTINATION_RENDERING_INTENT;
pub const D2D1_COLORMANAGEMENT_PROP_ALPHA_MODE = D2D1_COLORMANAGEMENT_PROP.ALPHA_MODE;
pub const D2D1_COLORMANAGEMENT_PROP_QUALITY = D2D1_COLORMANAGEMENT_PROP.QUALITY;
pub const D2D1_COLORMANAGEMENT_PROP_FORCE_DWORD = D2D1_COLORMANAGEMENT_PROP.FORCE_DWORD;

pub const D2D1_COLORMANAGEMENT_ALPHA_MODE = enum(u32) {
    PREMULTIPLIED = 1,
    STRAIGHT = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_COLORMANAGEMENT_ALPHA_MODE_PREMULTIPLIED = D2D1_COLORMANAGEMENT_ALPHA_MODE.PREMULTIPLIED;
pub const D2D1_COLORMANAGEMENT_ALPHA_MODE_STRAIGHT = D2D1_COLORMANAGEMENT_ALPHA_MODE.STRAIGHT;
pub const D2D1_COLORMANAGEMENT_ALPHA_MODE_FORCE_DWORD = D2D1_COLORMANAGEMENT_ALPHA_MODE.FORCE_DWORD;

pub const D2D1_COLORMANAGEMENT_QUALITY = enum(u32) {
    PROOF = 0,
    NORMAL = 1,
    BEST = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_COLORMANAGEMENT_QUALITY_PROOF = D2D1_COLORMANAGEMENT_QUALITY.PROOF;
pub const D2D1_COLORMANAGEMENT_QUALITY_NORMAL = D2D1_COLORMANAGEMENT_QUALITY.NORMAL;
pub const D2D1_COLORMANAGEMENT_QUALITY_BEST = D2D1_COLORMANAGEMENT_QUALITY.BEST;
pub const D2D1_COLORMANAGEMENT_QUALITY_FORCE_DWORD = D2D1_COLORMANAGEMENT_QUALITY.FORCE_DWORD;

pub const D2D1_COLORMANAGEMENT_RENDERING_INTENT = enum(u32) {
    PERCEPTUAL = 0,
    RELATIVE_COLORIMETRIC = 1,
    SATURATION = 2,
    ABSOLUTE_COLORIMETRIC = 3,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_COLORMANAGEMENT_RENDERING_INTENT_PERCEPTUAL = D2D1_COLORMANAGEMENT_RENDERING_INTENT.PERCEPTUAL;
pub const D2D1_COLORMANAGEMENT_RENDERING_INTENT_RELATIVE_COLORIMETRIC = D2D1_COLORMANAGEMENT_RENDERING_INTENT.RELATIVE_COLORIMETRIC;
pub const D2D1_COLORMANAGEMENT_RENDERING_INTENT_SATURATION = D2D1_COLORMANAGEMENT_RENDERING_INTENT.SATURATION;
pub const D2D1_COLORMANAGEMENT_RENDERING_INTENT_ABSOLUTE_COLORIMETRIC = D2D1_COLORMANAGEMENT_RENDERING_INTENT.ABSOLUTE_COLORIMETRIC;
pub const D2D1_COLORMANAGEMENT_RENDERING_INTENT_FORCE_DWORD = D2D1_COLORMANAGEMENT_RENDERING_INTENT.FORCE_DWORD;

pub const D2D1_HISTOGRAM_PROP = enum(u32) {
    NUM_BINS = 0,
    CHANNEL_SELECT = 1,
    HISTOGRAM_OUTPUT = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_HISTOGRAM_PROP_NUM_BINS = D2D1_HISTOGRAM_PROP.NUM_BINS;
pub const D2D1_HISTOGRAM_PROP_CHANNEL_SELECT = D2D1_HISTOGRAM_PROP.CHANNEL_SELECT;
pub const D2D1_HISTOGRAM_PROP_HISTOGRAM_OUTPUT = D2D1_HISTOGRAM_PROP.HISTOGRAM_OUTPUT;
pub const D2D1_HISTOGRAM_PROP_FORCE_DWORD = D2D1_HISTOGRAM_PROP.FORCE_DWORD;

pub const D2D1_POINTSPECULAR_PROP = enum(u32) {
    LIGHT_POSITION = 0,
    SPECULAR_EXPONENT = 1,
    SPECULAR_CONSTANT = 2,
    SURFACE_SCALE = 3,
    COLOR = 4,
    KERNEL_UNIT_LENGTH = 5,
    SCALE_MODE = 6,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_POINTSPECULAR_PROP_LIGHT_POSITION = D2D1_POINTSPECULAR_PROP.LIGHT_POSITION;
pub const D2D1_POINTSPECULAR_PROP_SPECULAR_EXPONENT = D2D1_POINTSPECULAR_PROP.SPECULAR_EXPONENT;
pub const D2D1_POINTSPECULAR_PROP_SPECULAR_CONSTANT = D2D1_POINTSPECULAR_PROP.SPECULAR_CONSTANT;
pub const D2D1_POINTSPECULAR_PROP_SURFACE_SCALE = D2D1_POINTSPECULAR_PROP.SURFACE_SCALE;
pub const D2D1_POINTSPECULAR_PROP_COLOR = D2D1_POINTSPECULAR_PROP.COLOR;
pub const D2D1_POINTSPECULAR_PROP_KERNEL_UNIT_LENGTH = D2D1_POINTSPECULAR_PROP.KERNEL_UNIT_LENGTH;
pub const D2D1_POINTSPECULAR_PROP_SCALE_MODE = D2D1_POINTSPECULAR_PROP.SCALE_MODE;
pub const D2D1_POINTSPECULAR_PROP_FORCE_DWORD = D2D1_POINTSPECULAR_PROP.FORCE_DWORD;

pub const D2D1_POINTSPECULAR_SCALE_MODE = enum(u32) {
    NEAREST_NEIGHBOR = 0,
    LINEAR = 1,
    CUBIC = 2,
    MULTI_SAMPLE_LINEAR = 3,
    ANISOTROPIC = 4,
    HIGH_QUALITY_CUBIC = 5,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_POINTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR = D2D1_POINTSPECULAR_SCALE_MODE.NEAREST_NEIGHBOR;
pub const D2D1_POINTSPECULAR_SCALE_MODE_LINEAR = D2D1_POINTSPECULAR_SCALE_MODE.LINEAR;
pub const D2D1_POINTSPECULAR_SCALE_MODE_CUBIC = D2D1_POINTSPECULAR_SCALE_MODE.CUBIC;
pub const D2D1_POINTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = D2D1_POINTSPECULAR_SCALE_MODE.MULTI_SAMPLE_LINEAR;
pub const D2D1_POINTSPECULAR_SCALE_MODE_ANISOTROPIC = D2D1_POINTSPECULAR_SCALE_MODE.ANISOTROPIC;
pub const D2D1_POINTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC = D2D1_POINTSPECULAR_SCALE_MODE.HIGH_QUALITY_CUBIC;
pub const D2D1_POINTSPECULAR_SCALE_MODE_FORCE_DWORD = D2D1_POINTSPECULAR_SCALE_MODE.FORCE_DWORD;

pub const D2D1_SPOTSPECULAR_PROP = enum(u32) {
    LIGHT_POSITION = 0,
    POINTS_AT = 1,
    FOCUS = 2,
    LIMITING_CONE_ANGLE = 3,
    SPECULAR_EXPONENT = 4,
    SPECULAR_CONSTANT = 5,
    SURFACE_SCALE = 6,
    COLOR = 7,
    KERNEL_UNIT_LENGTH = 8,
    SCALE_MODE = 9,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SPOTSPECULAR_PROP_LIGHT_POSITION = D2D1_SPOTSPECULAR_PROP.LIGHT_POSITION;
pub const D2D1_SPOTSPECULAR_PROP_POINTS_AT = D2D1_SPOTSPECULAR_PROP.POINTS_AT;
pub const D2D1_SPOTSPECULAR_PROP_FOCUS = D2D1_SPOTSPECULAR_PROP.FOCUS;
pub const D2D1_SPOTSPECULAR_PROP_LIMITING_CONE_ANGLE = D2D1_SPOTSPECULAR_PROP.LIMITING_CONE_ANGLE;
pub const D2D1_SPOTSPECULAR_PROP_SPECULAR_EXPONENT = D2D1_SPOTSPECULAR_PROP.SPECULAR_EXPONENT;
pub const D2D1_SPOTSPECULAR_PROP_SPECULAR_CONSTANT = D2D1_SPOTSPECULAR_PROP.SPECULAR_CONSTANT;
pub const D2D1_SPOTSPECULAR_PROP_SURFACE_SCALE = D2D1_SPOTSPECULAR_PROP.SURFACE_SCALE;
pub const D2D1_SPOTSPECULAR_PROP_COLOR = D2D1_SPOTSPECULAR_PROP.COLOR;
pub const D2D1_SPOTSPECULAR_PROP_KERNEL_UNIT_LENGTH = D2D1_SPOTSPECULAR_PROP.KERNEL_UNIT_LENGTH;
pub const D2D1_SPOTSPECULAR_PROP_SCALE_MODE = D2D1_SPOTSPECULAR_PROP.SCALE_MODE;
pub const D2D1_SPOTSPECULAR_PROP_FORCE_DWORD = D2D1_SPOTSPECULAR_PROP.FORCE_DWORD;

pub const D2D1_SPOTSPECULAR_SCALE_MODE = enum(u32) {
    NEAREST_NEIGHBOR = 0,
    LINEAR = 1,
    CUBIC = 2,
    MULTI_SAMPLE_LINEAR = 3,
    ANISOTROPIC = 4,
    HIGH_QUALITY_CUBIC = 5,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SPOTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR = D2D1_SPOTSPECULAR_SCALE_MODE.NEAREST_NEIGHBOR;
pub const D2D1_SPOTSPECULAR_SCALE_MODE_LINEAR = D2D1_SPOTSPECULAR_SCALE_MODE.LINEAR;
pub const D2D1_SPOTSPECULAR_SCALE_MODE_CUBIC = D2D1_SPOTSPECULAR_SCALE_MODE.CUBIC;
pub const D2D1_SPOTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = D2D1_SPOTSPECULAR_SCALE_MODE.MULTI_SAMPLE_LINEAR;
pub const D2D1_SPOTSPECULAR_SCALE_MODE_ANISOTROPIC = D2D1_SPOTSPECULAR_SCALE_MODE.ANISOTROPIC;
pub const D2D1_SPOTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC = D2D1_SPOTSPECULAR_SCALE_MODE.HIGH_QUALITY_CUBIC;
pub const D2D1_SPOTSPECULAR_SCALE_MODE_FORCE_DWORD = D2D1_SPOTSPECULAR_SCALE_MODE.FORCE_DWORD;

pub const D2D1_DISTANTSPECULAR_PROP = enum(u32) {
    AZIMUTH = 0,
    ELEVATION = 1,
    SPECULAR_EXPONENT = 2,
    SPECULAR_CONSTANT = 3,
    SURFACE_SCALE = 4,
    COLOR = 5,
    KERNEL_UNIT_LENGTH = 6,
    SCALE_MODE = 7,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_DISTANTSPECULAR_PROP_AZIMUTH = D2D1_DISTANTSPECULAR_PROP.AZIMUTH;
pub const D2D1_DISTANTSPECULAR_PROP_ELEVATION = D2D1_DISTANTSPECULAR_PROP.ELEVATION;
pub const D2D1_DISTANTSPECULAR_PROP_SPECULAR_EXPONENT = D2D1_DISTANTSPECULAR_PROP.SPECULAR_EXPONENT;
pub const D2D1_DISTANTSPECULAR_PROP_SPECULAR_CONSTANT = D2D1_DISTANTSPECULAR_PROP.SPECULAR_CONSTANT;
pub const D2D1_DISTANTSPECULAR_PROP_SURFACE_SCALE = D2D1_DISTANTSPECULAR_PROP.SURFACE_SCALE;
pub const D2D1_DISTANTSPECULAR_PROP_COLOR = D2D1_DISTANTSPECULAR_PROP.COLOR;
pub const D2D1_DISTANTSPECULAR_PROP_KERNEL_UNIT_LENGTH = D2D1_DISTANTSPECULAR_PROP.KERNEL_UNIT_LENGTH;
pub const D2D1_DISTANTSPECULAR_PROP_SCALE_MODE = D2D1_DISTANTSPECULAR_PROP.SCALE_MODE;
pub const D2D1_DISTANTSPECULAR_PROP_FORCE_DWORD = D2D1_DISTANTSPECULAR_PROP.FORCE_DWORD;

pub const D2D1_DISTANTSPECULAR_SCALE_MODE = enum(u32) {
    NEAREST_NEIGHBOR = 0,
    LINEAR = 1,
    CUBIC = 2,
    MULTI_SAMPLE_LINEAR = 3,
    ANISOTROPIC = 4,
    HIGH_QUALITY_CUBIC = 5,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_DISTANTSPECULAR_SCALE_MODE_NEAREST_NEIGHBOR = D2D1_DISTANTSPECULAR_SCALE_MODE.NEAREST_NEIGHBOR;
pub const D2D1_DISTANTSPECULAR_SCALE_MODE_LINEAR = D2D1_DISTANTSPECULAR_SCALE_MODE.LINEAR;
pub const D2D1_DISTANTSPECULAR_SCALE_MODE_CUBIC = D2D1_DISTANTSPECULAR_SCALE_MODE.CUBIC;
pub const D2D1_DISTANTSPECULAR_SCALE_MODE_MULTI_SAMPLE_LINEAR = D2D1_DISTANTSPECULAR_SCALE_MODE.MULTI_SAMPLE_LINEAR;
pub const D2D1_DISTANTSPECULAR_SCALE_MODE_ANISOTROPIC = D2D1_DISTANTSPECULAR_SCALE_MODE.ANISOTROPIC;
pub const D2D1_DISTANTSPECULAR_SCALE_MODE_HIGH_QUALITY_CUBIC = D2D1_DISTANTSPECULAR_SCALE_MODE.HIGH_QUALITY_CUBIC;
pub const D2D1_DISTANTSPECULAR_SCALE_MODE_FORCE_DWORD = D2D1_DISTANTSPECULAR_SCALE_MODE.FORCE_DWORD;

pub const D2D1_POINTDIFFUSE_PROP = enum(u32) {
    LIGHT_POSITION = 0,
    DIFFUSE_CONSTANT = 1,
    SURFACE_SCALE = 2,
    COLOR = 3,
    KERNEL_UNIT_LENGTH = 4,
    SCALE_MODE = 5,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_POINTDIFFUSE_PROP_LIGHT_POSITION = D2D1_POINTDIFFUSE_PROP.LIGHT_POSITION;
pub const D2D1_POINTDIFFUSE_PROP_DIFFUSE_CONSTANT = D2D1_POINTDIFFUSE_PROP.DIFFUSE_CONSTANT;
pub const D2D1_POINTDIFFUSE_PROP_SURFACE_SCALE = D2D1_POINTDIFFUSE_PROP.SURFACE_SCALE;
pub const D2D1_POINTDIFFUSE_PROP_COLOR = D2D1_POINTDIFFUSE_PROP.COLOR;
pub const D2D1_POINTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = D2D1_POINTDIFFUSE_PROP.KERNEL_UNIT_LENGTH;
pub const D2D1_POINTDIFFUSE_PROP_SCALE_MODE = D2D1_POINTDIFFUSE_PROP.SCALE_MODE;
pub const D2D1_POINTDIFFUSE_PROP_FORCE_DWORD = D2D1_POINTDIFFUSE_PROP.FORCE_DWORD;

pub const D2D1_POINTDIFFUSE_SCALE_MODE = enum(u32) {
    NEAREST_NEIGHBOR = 0,
    LINEAR = 1,
    CUBIC = 2,
    MULTI_SAMPLE_LINEAR = 3,
    ANISOTROPIC = 4,
    HIGH_QUALITY_CUBIC = 5,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_POINTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR = D2D1_POINTDIFFUSE_SCALE_MODE.NEAREST_NEIGHBOR;
pub const D2D1_POINTDIFFUSE_SCALE_MODE_LINEAR = D2D1_POINTDIFFUSE_SCALE_MODE.LINEAR;
pub const D2D1_POINTDIFFUSE_SCALE_MODE_CUBIC = D2D1_POINTDIFFUSE_SCALE_MODE.CUBIC;
pub const D2D1_POINTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = D2D1_POINTDIFFUSE_SCALE_MODE.MULTI_SAMPLE_LINEAR;
pub const D2D1_POINTDIFFUSE_SCALE_MODE_ANISOTROPIC = D2D1_POINTDIFFUSE_SCALE_MODE.ANISOTROPIC;
pub const D2D1_POINTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC = D2D1_POINTDIFFUSE_SCALE_MODE.HIGH_QUALITY_CUBIC;
pub const D2D1_POINTDIFFUSE_SCALE_MODE_FORCE_DWORD = D2D1_POINTDIFFUSE_SCALE_MODE.FORCE_DWORD;

pub const D2D1_SPOTDIFFUSE_PROP = enum(u32) {
    LIGHT_POSITION = 0,
    POINTS_AT = 1,
    FOCUS = 2,
    LIMITING_CONE_ANGLE = 3,
    DIFFUSE_CONSTANT = 4,
    SURFACE_SCALE = 5,
    COLOR = 6,
    KERNEL_UNIT_LENGTH = 7,
    SCALE_MODE = 8,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SPOTDIFFUSE_PROP_LIGHT_POSITION = D2D1_SPOTDIFFUSE_PROP.LIGHT_POSITION;
pub const D2D1_SPOTDIFFUSE_PROP_POINTS_AT = D2D1_SPOTDIFFUSE_PROP.POINTS_AT;
pub const D2D1_SPOTDIFFUSE_PROP_FOCUS = D2D1_SPOTDIFFUSE_PROP.FOCUS;
pub const D2D1_SPOTDIFFUSE_PROP_LIMITING_CONE_ANGLE = D2D1_SPOTDIFFUSE_PROP.LIMITING_CONE_ANGLE;
pub const D2D1_SPOTDIFFUSE_PROP_DIFFUSE_CONSTANT = D2D1_SPOTDIFFUSE_PROP.DIFFUSE_CONSTANT;
pub const D2D1_SPOTDIFFUSE_PROP_SURFACE_SCALE = D2D1_SPOTDIFFUSE_PROP.SURFACE_SCALE;
pub const D2D1_SPOTDIFFUSE_PROP_COLOR = D2D1_SPOTDIFFUSE_PROP.COLOR;
pub const D2D1_SPOTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = D2D1_SPOTDIFFUSE_PROP.KERNEL_UNIT_LENGTH;
pub const D2D1_SPOTDIFFUSE_PROP_SCALE_MODE = D2D1_SPOTDIFFUSE_PROP.SCALE_MODE;
pub const D2D1_SPOTDIFFUSE_PROP_FORCE_DWORD = D2D1_SPOTDIFFUSE_PROP.FORCE_DWORD;

pub const D2D1_SPOTDIFFUSE_SCALE_MODE = enum(u32) {
    NEAREST_NEIGHBOR = 0,
    LINEAR = 1,
    CUBIC = 2,
    MULTI_SAMPLE_LINEAR = 3,
    ANISOTROPIC = 4,
    HIGH_QUALITY_CUBIC = 5,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SPOTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR = D2D1_SPOTDIFFUSE_SCALE_MODE.NEAREST_NEIGHBOR;
pub const D2D1_SPOTDIFFUSE_SCALE_MODE_LINEAR = D2D1_SPOTDIFFUSE_SCALE_MODE.LINEAR;
pub const D2D1_SPOTDIFFUSE_SCALE_MODE_CUBIC = D2D1_SPOTDIFFUSE_SCALE_MODE.CUBIC;
pub const D2D1_SPOTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = D2D1_SPOTDIFFUSE_SCALE_MODE.MULTI_SAMPLE_LINEAR;
pub const D2D1_SPOTDIFFUSE_SCALE_MODE_ANISOTROPIC = D2D1_SPOTDIFFUSE_SCALE_MODE.ANISOTROPIC;
pub const D2D1_SPOTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC = D2D1_SPOTDIFFUSE_SCALE_MODE.HIGH_QUALITY_CUBIC;
pub const D2D1_SPOTDIFFUSE_SCALE_MODE_FORCE_DWORD = D2D1_SPOTDIFFUSE_SCALE_MODE.FORCE_DWORD;

pub const D2D1_DISTANTDIFFUSE_PROP = enum(u32) {
    AZIMUTH = 0,
    ELEVATION = 1,
    DIFFUSE_CONSTANT = 2,
    SURFACE_SCALE = 3,
    COLOR = 4,
    KERNEL_UNIT_LENGTH = 5,
    SCALE_MODE = 6,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_DISTANTDIFFUSE_PROP_AZIMUTH = D2D1_DISTANTDIFFUSE_PROP.AZIMUTH;
pub const D2D1_DISTANTDIFFUSE_PROP_ELEVATION = D2D1_DISTANTDIFFUSE_PROP.ELEVATION;
pub const D2D1_DISTANTDIFFUSE_PROP_DIFFUSE_CONSTANT = D2D1_DISTANTDIFFUSE_PROP.DIFFUSE_CONSTANT;
pub const D2D1_DISTANTDIFFUSE_PROP_SURFACE_SCALE = D2D1_DISTANTDIFFUSE_PROP.SURFACE_SCALE;
pub const D2D1_DISTANTDIFFUSE_PROP_COLOR = D2D1_DISTANTDIFFUSE_PROP.COLOR;
pub const D2D1_DISTANTDIFFUSE_PROP_KERNEL_UNIT_LENGTH = D2D1_DISTANTDIFFUSE_PROP.KERNEL_UNIT_LENGTH;
pub const D2D1_DISTANTDIFFUSE_PROP_SCALE_MODE = D2D1_DISTANTDIFFUSE_PROP.SCALE_MODE;
pub const D2D1_DISTANTDIFFUSE_PROP_FORCE_DWORD = D2D1_DISTANTDIFFUSE_PROP.FORCE_DWORD;

pub const D2D1_DISTANTDIFFUSE_SCALE_MODE = enum(u32) {
    NEAREST_NEIGHBOR = 0,
    LINEAR = 1,
    CUBIC = 2,
    MULTI_SAMPLE_LINEAR = 3,
    ANISOTROPIC = 4,
    HIGH_QUALITY_CUBIC = 5,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_DISTANTDIFFUSE_SCALE_MODE_NEAREST_NEIGHBOR = D2D1_DISTANTDIFFUSE_SCALE_MODE.NEAREST_NEIGHBOR;
pub const D2D1_DISTANTDIFFUSE_SCALE_MODE_LINEAR = D2D1_DISTANTDIFFUSE_SCALE_MODE.LINEAR;
pub const D2D1_DISTANTDIFFUSE_SCALE_MODE_CUBIC = D2D1_DISTANTDIFFUSE_SCALE_MODE.CUBIC;
pub const D2D1_DISTANTDIFFUSE_SCALE_MODE_MULTI_SAMPLE_LINEAR = D2D1_DISTANTDIFFUSE_SCALE_MODE.MULTI_SAMPLE_LINEAR;
pub const D2D1_DISTANTDIFFUSE_SCALE_MODE_ANISOTROPIC = D2D1_DISTANTDIFFUSE_SCALE_MODE.ANISOTROPIC;
pub const D2D1_DISTANTDIFFUSE_SCALE_MODE_HIGH_QUALITY_CUBIC = D2D1_DISTANTDIFFUSE_SCALE_MODE.HIGH_QUALITY_CUBIC;
pub const D2D1_DISTANTDIFFUSE_SCALE_MODE_FORCE_DWORD = D2D1_DISTANTDIFFUSE_SCALE_MODE.FORCE_DWORD;

pub const D2D1_FLOOD_PROP = enum(u32) {
    COLOR = 0,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_FLOOD_PROP_COLOR = D2D1_FLOOD_PROP.COLOR;
pub const D2D1_FLOOD_PROP_FORCE_DWORD = D2D1_FLOOD_PROP.FORCE_DWORD;

pub const D2D1_LINEARTRANSFER_PROP = enum(u32) {
    RED_Y_INTERCEPT = 0,
    RED_SLOPE = 1,
    RED_DISABLE = 2,
    GREEN_Y_INTERCEPT = 3,
    GREEN_SLOPE = 4,
    GREEN_DISABLE = 5,
    BLUE_Y_INTERCEPT = 6,
    BLUE_SLOPE = 7,
    BLUE_DISABLE = 8,
    ALPHA_Y_INTERCEPT = 9,
    ALPHA_SLOPE = 10,
    ALPHA_DISABLE = 11,
    CLAMP_OUTPUT = 12,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_LINEARTRANSFER_PROP_RED_Y_INTERCEPT = D2D1_LINEARTRANSFER_PROP.RED_Y_INTERCEPT;
pub const D2D1_LINEARTRANSFER_PROP_RED_SLOPE = D2D1_LINEARTRANSFER_PROP.RED_SLOPE;
pub const D2D1_LINEARTRANSFER_PROP_RED_DISABLE = D2D1_LINEARTRANSFER_PROP.RED_DISABLE;
pub const D2D1_LINEARTRANSFER_PROP_GREEN_Y_INTERCEPT = D2D1_LINEARTRANSFER_PROP.GREEN_Y_INTERCEPT;
pub const D2D1_LINEARTRANSFER_PROP_GREEN_SLOPE = D2D1_LINEARTRANSFER_PROP.GREEN_SLOPE;
pub const D2D1_LINEARTRANSFER_PROP_GREEN_DISABLE = D2D1_LINEARTRANSFER_PROP.GREEN_DISABLE;
pub const D2D1_LINEARTRANSFER_PROP_BLUE_Y_INTERCEPT = D2D1_LINEARTRANSFER_PROP.BLUE_Y_INTERCEPT;
pub const D2D1_LINEARTRANSFER_PROP_BLUE_SLOPE = D2D1_LINEARTRANSFER_PROP.BLUE_SLOPE;
pub const D2D1_LINEARTRANSFER_PROP_BLUE_DISABLE = D2D1_LINEARTRANSFER_PROP.BLUE_DISABLE;
pub const D2D1_LINEARTRANSFER_PROP_ALPHA_Y_INTERCEPT = D2D1_LINEARTRANSFER_PROP.ALPHA_Y_INTERCEPT;
pub const D2D1_LINEARTRANSFER_PROP_ALPHA_SLOPE = D2D1_LINEARTRANSFER_PROP.ALPHA_SLOPE;
pub const D2D1_LINEARTRANSFER_PROP_ALPHA_DISABLE = D2D1_LINEARTRANSFER_PROP.ALPHA_DISABLE;
pub const D2D1_LINEARTRANSFER_PROP_CLAMP_OUTPUT = D2D1_LINEARTRANSFER_PROP.CLAMP_OUTPUT;
pub const D2D1_LINEARTRANSFER_PROP_FORCE_DWORD = D2D1_LINEARTRANSFER_PROP.FORCE_DWORD;

pub const D2D1_GAMMATRANSFER_PROP = enum(u32) {
    RED_AMPLITUDE = 0,
    RED_EXPONENT = 1,
    RED_OFFSET = 2,
    RED_DISABLE = 3,
    GREEN_AMPLITUDE = 4,
    GREEN_EXPONENT = 5,
    GREEN_OFFSET = 6,
    GREEN_DISABLE = 7,
    BLUE_AMPLITUDE = 8,
    BLUE_EXPONENT = 9,
    BLUE_OFFSET = 10,
    BLUE_DISABLE = 11,
    ALPHA_AMPLITUDE = 12,
    ALPHA_EXPONENT = 13,
    ALPHA_OFFSET = 14,
    ALPHA_DISABLE = 15,
    CLAMP_OUTPUT = 16,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_GAMMATRANSFER_PROP_RED_AMPLITUDE = D2D1_GAMMATRANSFER_PROP.RED_AMPLITUDE;
pub const D2D1_GAMMATRANSFER_PROP_RED_EXPONENT = D2D1_GAMMATRANSFER_PROP.RED_EXPONENT;
pub const D2D1_GAMMATRANSFER_PROP_RED_OFFSET = D2D1_GAMMATRANSFER_PROP.RED_OFFSET;
pub const D2D1_GAMMATRANSFER_PROP_RED_DISABLE = D2D1_GAMMATRANSFER_PROP.RED_DISABLE;
pub const D2D1_GAMMATRANSFER_PROP_GREEN_AMPLITUDE = D2D1_GAMMATRANSFER_PROP.GREEN_AMPLITUDE;
pub const D2D1_GAMMATRANSFER_PROP_GREEN_EXPONENT = D2D1_GAMMATRANSFER_PROP.GREEN_EXPONENT;
pub const D2D1_GAMMATRANSFER_PROP_GREEN_OFFSET = D2D1_GAMMATRANSFER_PROP.GREEN_OFFSET;
pub const D2D1_GAMMATRANSFER_PROP_GREEN_DISABLE = D2D1_GAMMATRANSFER_PROP.GREEN_DISABLE;
pub const D2D1_GAMMATRANSFER_PROP_BLUE_AMPLITUDE = D2D1_GAMMATRANSFER_PROP.BLUE_AMPLITUDE;
pub const D2D1_GAMMATRANSFER_PROP_BLUE_EXPONENT = D2D1_GAMMATRANSFER_PROP.BLUE_EXPONENT;
pub const D2D1_GAMMATRANSFER_PROP_BLUE_OFFSET = D2D1_GAMMATRANSFER_PROP.BLUE_OFFSET;
pub const D2D1_GAMMATRANSFER_PROP_BLUE_DISABLE = D2D1_GAMMATRANSFER_PROP.BLUE_DISABLE;
pub const D2D1_GAMMATRANSFER_PROP_ALPHA_AMPLITUDE = D2D1_GAMMATRANSFER_PROP.ALPHA_AMPLITUDE;
pub const D2D1_GAMMATRANSFER_PROP_ALPHA_EXPONENT = D2D1_GAMMATRANSFER_PROP.ALPHA_EXPONENT;
pub const D2D1_GAMMATRANSFER_PROP_ALPHA_OFFSET = D2D1_GAMMATRANSFER_PROP.ALPHA_OFFSET;
pub const D2D1_GAMMATRANSFER_PROP_ALPHA_DISABLE = D2D1_GAMMATRANSFER_PROP.ALPHA_DISABLE;
pub const D2D1_GAMMATRANSFER_PROP_CLAMP_OUTPUT = D2D1_GAMMATRANSFER_PROP.CLAMP_OUTPUT;
pub const D2D1_GAMMATRANSFER_PROP_FORCE_DWORD = D2D1_GAMMATRANSFER_PROP.FORCE_DWORD;

pub const D2D1_TABLETRANSFER_PROP = enum(u32) {
    RED_TABLE = 0,
    RED_DISABLE = 1,
    GREEN_TABLE = 2,
    GREEN_DISABLE = 3,
    BLUE_TABLE = 4,
    BLUE_DISABLE = 5,
    ALPHA_TABLE = 6,
    ALPHA_DISABLE = 7,
    CLAMP_OUTPUT = 8,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_TABLETRANSFER_PROP_RED_TABLE = D2D1_TABLETRANSFER_PROP.RED_TABLE;
pub const D2D1_TABLETRANSFER_PROP_RED_DISABLE = D2D1_TABLETRANSFER_PROP.RED_DISABLE;
pub const D2D1_TABLETRANSFER_PROP_GREEN_TABLE = D2D1_TABLETRANSFER_PROP.GREEN_TABLE;
pub const D2D1_TABLETRANSFER_PROP_GREEN_DISABLE = D2D1_TABLETRANSFER_PROP.GREEN_DISABLE;
pub const D2D1_TABLETRANSFER_PROP_BLUE_TABLE = D2D1_TABLETRANSFER_PROP.BLUE_TABLE;
pub const D2D1_TABLETRANSFER_PROP_BLUE_DISABLE = D2D1_TABLETRANSFER_PROP.BLUE_DISABLE;
pub const D2D1_TABLETRANSFER_PROP_ALPHA_TABLE = D2D1_TABLETRANSFER_PROP.ALPHA_TABLE;
pub const D2D1_TABLETRANSFER_PROP_ALPHA_DISABLE = D2D1_TABLETRANSFER_PROP.ALPHA_DISABLE;
pub const D2D1_TABLETRANSFER_PROP_CLAMP_OUTPUT = D2D1_TABLETRANSFER_PROP.CLAMP_OUTPUT;
pub const D2D1_TABLETRANSFER_PROP_FORCE_DWORD = D2D1_TABLETRANSFER_PROP.FORCE_DWORD;

pub const D2D1_DISCRETETRANSFER_PROP = enum(u32) {
    RED_TABLE = 0,
    RED_DISABLE = 1,
    GREEN_TABLE = 2,
    GREEN_DISABLE = 3,
    BLUE_TABLE = 4,
    BLUE_DISABLE = 5,
    ALPHA_TABLE = 6,
    ALPHA_DISABLE = 7,
    CLAMP_OUTPUT = 8,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_DISCRETETRANSFER_PROP_RED_TABLE = D2D1_DISCRETETRANSFER_PROP.RED_TABLE;
pub const D2D1_DISCRETETRANSFER_PROP_RED_DISABLE = D2D1_DISCRETETRANSFER_PROP.RED_DISABLE;
pub const D2D1_DISCRETETRANSFER_PROP_GREEN_TABLE = D2D1_DISCRETETRANSFER_PROP.GREEN_TABLE;
pub const D2D1_DISCRETETRANSFER_PROP_GREEN_DISABLE = D2D1_DISCRETETRANSFER_PROP.GREEN_DISABLE;
pub const D2D1_DISCRETETRANSFER_PROP_BLUE_TABLE = D2D1_DISCRETETRANSFER_PROP.BLUE_TABLE;
pub const D2D1_DISCRETETRANSFER_PROP_BLUE_DISABLE = D2D1_DISCRETETRANSFER_PROP.BLUE_DISABLE;
pub const D2D1_DISCRETETRANSFER_PROP_ALPHA_TABLE = D2D1_DISCRETETRANSFER_PROP.ALPHA_TABLE;
pub const D2D1_DISCRETETRANSFER_PROP_ALPHA_DISABLE = D2D1_DISCRETETRANSFER_PROP.ALPHA_DISABLE;
pub const D2D1_DISCRETETRANSFER_PROP_CLAMP_OUTPUT = D2D1_DISCRETETRANSFER_PROP.CLAMP_OUTPUT;
pub const D2D1_DISCRETETRANSFER_PROP_FORCE_DWORD = D2D1_DISCRETETRANSFER_PROP.FORCE_DWORD;

pub const D2D1_CONVOLVEMATRIX_PROP = enum(u32) {
    KERNEL_UNIT_LENGTH = 0,
    SCALE_MODE = 1,
    KERNEL_SIZE_X = 2,
    KERNEL_SIZE_Y = 3,
    KERNEL_MATRIX = 4,
    DIVISOR = 5,
    BIAS = 6,
    KERNEL_OFFSET = 7,
    PRESERVE_ALPHA = 8,
    BORDER_MODE = 9,
    CLAMP_OUTPUT = 10,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_CONVOLVEMATRIX_PROP_KERNEL_UNIT_LENGTH = D2D1_CONVOLVEMATRIX_PROP.KERNEL_UNIT_LENGTH;
pub const D2D1_CONVOLVEMATRIX_PROP_SCALE_MODE = D2D1_CONVOLVEMATRIX_PROP.SCALE_MODE;
pub const D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_X = D2D1_CONVOLVEMATRIX_PROP.KERNEL_SIZE_X;
pub const D2D1_CONVOLVEMATRIX_PROP_KERNEL_SIZE_Y = D2D1_CONVOLVEMATRIX_PROP.KERNEL_SIZE_Y;
pub const D2D1_CONVOLVEMATRIX_PROP_KERNEL_MATRIX = D2D1_CONVOLVEMATRIX_PROP.KERNEL_MATRIX;
pub const D2D1_CONVOLVEMATRIX_PROP_DIVISOR = D2D1_CONVOLVEMATRIX_PROP.DIVISOR;
pub const D2D1_CONVOLVEMATRIX_PROP_BIAS = D2D1_CONVOLVEMATRIX_PROP.BIAS;
pub const D2D1_CONVOLVEMATRIX_PROP_KERNEL_OFFSET = D2D1_CONVOLVEMATRIX_PROP.KERNEL_OFFSET;
pub const D2D1_CONVOLVEMATRIX_PROP_PRESERVE_ALPHA = D2D1_CONVOLVEMATRIX_PROP.PRESERVE_ALPHA;
pub const D2D1_CONVOLVEMATRIX_PROP_BORDER_MODE = D2D1_CONVOLVEMATRIX_PROP.BORDER_MODE;
pub const D2D1_CONVOLVEMATRIX_PROP_CLAMP_OUTPUT = D2D1_CONVOLVEMATRIX_PROP.CLAMP_OUTPUT;
pub const D2D1_CONVOLVEMATRIX_PROP_FORCE_DWORD = D2D1_CONVOLVEMATRIX_PROP.FORCE_DWORD;

pub const D2D1_CONVOLVEMATRIX_SCALE_MODE = enum(u32) {
    NEAREST_NEIGHBOR = 0,
    LINEAR = 1,
    CUBIC = 2,
    MULTI_SAMPLE_LINEAR = 3,
    ANISOTROPIC = 4,
    HIGH_QUALITY_CUBIC = 5,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_CONVOLVEMATRIX_SCALE_MODE_NEAREST_NEIGHBOR = D2D1_CONVOLVEMATRIX_SCALE_MODE.NEAREST_NEIGHBOR;
pub const D2D1_CONVOLVEMATRIX_SCALE_MODE_LINEAR = D2D1_CONVOLVEMATRIX_SCALE_MODE.LINEAR;
pub const D2D1_CONVOLVEMATRIX_SCALE_MODE_CUBIC = D2D1_CONVOLVEMATRIX_SCALE_MODE.CUBIC;
pub const D2D1_CONVOLVEMATRIX_SCALE_MODE_MULTI_SAMPLE_LINEAR = D2D1_CONVOLVEMATRIX_SCALE_MODE.MULTI_SAMPLE_LINEAR;
pub const D2D1_CONVOLVEMATRIX_SCALE_MODE_ANISOTROPIC = D2D1_CONVOLVEMATRIX_SCALE_MODE.ANISOTROPIC;
pub const D2D1_CONVOLVEMATRIX_SCALE_MODE_HIGH_QUALITY_CUBIC = D2D1_CONVOLVEMATRIX_SCALE_MODE.HIGH_QUALITY_CUBIC;
pub const D2D1_CONVOLVEMATRIX_SCALE_MODE_FORCE_DWORD = D2D1_CONVOLVEMATRIX_SCALE_MODE.FORCE_DWORD;

pub const D2D1_BRIGHTNESS_PROP = enum(u32) {
    WHITE_POINT = 0,
    BLACK_POINT = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_BRIGHTNESS_PROP_WHITE_POINT = D2D1_BRIGHTNESS_PROP.WHITE_POINT;
pub const D2D1_BRIGHTNESS_PROP_BLACK_POINT = D2D1_BRIGHTNESS_PROP.BLACK_POINT;
pub const D2D1_BRIGHTNESS_PROP_FORCE_DWORD = D2D1_BRIGHTNESS_PROP.FORCE_DWORD;

pub const D2D1_ARITHMETICCOMPOSITE_PROP = enum(u32) {
    COEFFICIENTS = 0,
    CLAMP_OUTPUT = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_ARITHMETICCOMPOSITE_PROP_COEFFICIENTS = D2D1_ARITHMETICCOMPOSITE_PROP.COEFFICIENTS;
pub const D2D1_ARITHMETICCOMPOSITE_PROP_CLAMP_OUTPUT = D2D1_ARITHMETICCOMPOSITE_PROP.CLAMP_OUTPUT;
pub const D2D1_ARITHMETICCOMPOSITE_PROP_FORCE_DWORD = D2D1_ARITHMETICCOMPOSITE_PROP.FORCE_DWORD;

pub const D2D1_CROP_PROP = enum(u32) {
    RECT = 0,
    BORDER_MODE = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_CROP_PROP_RECT = D2D1_CROP_PROP.RECT;
pub const D2D1_CROP_PROP_BORDER_MODE = D2D1_CROP_PROP.BORDER_MODE;
pub const D2D1_CROP_PROP_FORCE_DWORD = D2D1_CROP_PROP.FORCE_DWORD;

pub const D2D1_BORDER_PROP = enum(u32) {
    EDGE_MODE_X = 0,
    EDGE_MODE_Y = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_BORDER_PROP_EDGE_MODE_X = D2D1_BORDER_PROP.EDGE_MODE_X;
pub const D2D1_BORDER_PROP_EDGE_MODE_Y = D2D1_BORDER_PROP.EDGE_MODE_Y;
pub const D2D1_BORDER_PROP_FORCE_DWORD = D2D1_BORDER_PROP.FORCE_DWORD;

pub const D2D1_BORDER_EDGE_MODE = enum(u32) {
    CLAMP = 0,
    WRAP = 1,
    MIRROR = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_BORDER_EDGE_MODE_CLAMP = D2D1_BORDER_EDGE_MODE.CLAMP;
pub const D2D1_BORDER_EDGE_MODE_WRAP = D2D1_BORDER_EDGE_MODE.WRAP;
pub const D2D1_BORDER_EDGE_MODE_MIRROR = D2D1_BORDER_EDGE_MODE.MIRROR;
pub const D2D1_BORDER_EDGE_MODE_FORCE_DWORD = D2D1_BORDER_EDGE_MODE.FORCE_DWORD;

pub const D2D1_MORPHOLOGY_PROP = enum(u32) {
    MODE = 0,
    WIDTH = 1,
    HEIGHT = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_MORPHOLOGY_PROP_MODE = D2D1_MORPHOLOGY_PROP.MODE;
pub const D2D1_MORPHOLOGY_PROP_WIDTH = D2D1_MORPHOLOGY_PROP.WIDTH;
pub const D2D1_MORPHOLOGY_PROP_HEIGHT = D2D1_MORPHOLOGY_PROP.HEIGHT;
pub const D2D1_MORPHOLOGY_PROP_FORCE_DWORD = D2D1_MORPHOLOGY_PROP.FORCE_DWORD;

pub const D2D1_MORPHOLOGY_MODE = enum(u32) {
    ERODE = 0,
    DILATE = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_MORPHOLOGY_MODE_ERODE = D2D1_MORPHOLOGY_MODE.ERODE;
pub const D2D1_MORPHOLOGY_MODE_DILATE = D2D1_MORPHOLOGY_MODE.DILATE;
pub const D2D1_MORPHOLOGY_MODE_FORCE_DWORD = D2D1_MORPHOLOGY_MODE.FORCE_DWORD;

pub const D2D1_TILE_PROP = enum(u32) {
    RECT = 0,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_TILE_PROP_RECT = D2D1_TILE_PROP.RECT;
pub const D2D1_TILE_PROP_FORCE_DWORD = D2D1_TILE_PROP.FORCE_DWORD;

pub const D2D1_ATLAS_PROP = enum(u32) {
    INPUT_RECT = 0,
    INPUT_PADDING_RECT = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_ATLAS_PROP_INPUT_RECT = D2D1_ATLAS_PROP.INPUT_RECT;
pub const D2D1_ATLAS_PROP_INPUT_PADDING_RECT = D2D1_ATLAS_PROP.INPUT_PADDING_RECT;
pub const D2D1_ATLAS_PROP_FORCE_DWORD = D2D1_ATLAS_PROP.FORCE_DWORD;

pub const D2D1_OPACITYMETADATA_PROP = enum(u32) {
    INPUT_OPAQUE_RECT = 0,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_OPACITYMETADATA_PROP_INPUT_OPAQUE_RECT = D2D1_OPACITYMETADATA_PROP.INPUT_OPAQUE_RECT;
pub const D2D1_OPACITYMETADATA_PROP_FORCE_DWORD = D2D1_OPACITYMETADATA_PROP.FORCE_DWORD;

pub const PD2D1_EFFECT_FACTORY = *const fn (
    effect_impl: ?*?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const D2D1_PROPERTY_TYPE = enum(u32) {
    UNKNOWN = 0,
    STRING = 1,
    BOOL = 2,
    UINT32 = 3,
    INT32 = 4,
    FLOAT = 5,
    VECTOR2 = 6,
    VECTOR3 = 7,
    VECTOR4 = 8,
    BLOB = 9,
    IUNKNOWN = 10,
    ENUM = 11,
    ARRAY = 12,
    CLSID = 13,
    MATRIX_3X2 = 14,
    MATRIX_4X3 = 15,
    MATRIX_4X4 = 16,
    MATRIX_5X4 = 17,
    COLOR_CONTEXT = 18,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_PROPERTY_TYPE_UNKNOWN = D2D1_PROPERTY_TYPE.UNKNOWN;
pub const D2D1_PROPERTY_TYPE_STRING = D2D1_PROPERTY_TYPE.STRING;
pub const D2D1_PROPERTY_TYPE_BOOL = D2D1_PROPERTY_TYPE.BOOL;
pub const D2D1_PROPERTY_TYPE_UINT32 = D2D1_PROPERTY_TYPE.UINT32;
pub const D2D1_PROPERTY_TYPE_INT32 = D2D1_PROPERTY_TYPE.INT32;
pub const D2D1_PROPERTY_TYPE_FLOAT = D2D1_PROPERTY_TYPE.FLOAT;
pub const D2D1_PROPERTY_TYPE_VECTOR2 = D2D1_PROPERTY_TYPE.VECTOR2;
pub const D2D1_PROPERTY_TYPE_VECTOR3 = D2D1_PROPERTY_TYPE.VECTOR3;
pub const D2D1_PROPERTY_TYPE_VECTOR4 = D2D1_PROPERTY_TYPE.VECTOR4;
pub const D2D1_PROPERTY_TYPE_BLOB = D2D1_PROPERTY_TYPE.BLOB;
pub const D2D1_PROPERTY_TYPE_IUNKNOWN = D2D1_PROPERTY_TYPE.IUNKNOWN;
pub const D2D1_PROPERTY_TYPE_ENUM = D2D1_PROPERTY_TYPE.ENUM;
pub const D2D1_PROPERTY_TYPE_ARRAY = D2D1_PROPERTY_TYPE.ARRAY;
pub const D2D1_PROPERTY_TYPE_CLSID = D2D1_PROPERTY_TYPE.CLSID;
pub const D2D1_PROPERTY_TYPE_MATRIX_3X2 = D2D1_PROPERTY_TYPE.MATRIX_3X2;
pub const D2D1_PROPERTY_TYPE_MATRIX_4X3 = D2D1_PROPERTY_TYPE.MATRIX_4X3;
pub const D2D1_PROPERTY_TYPE_MATRIX_4X4 = D2D1_PROPERTY_TYPE.MATRIX_4X4;
pub const D2D1_PROPERTY_TYPE_MATRIX_5X4 = D2D1_PROPERTY_TYPE.MATRIX_5X4;
pub const D2D1_PROPERTY_TYPE_COLOR_CONTEXT = D2D1_PROPERTY_TYPE.COLOR_CONTEXT;
pub const D2D1_PROPERTY_TYPE_FORCE_DWORD = D2D1_PROPERTY_TYPE.FORCE_DWORD;

pub const D2D1_PROPERTY = enum(u32) {
    CLSID = 2147483648,
    DISPLAYNAME = 2147483649,
    AUTHOR = 2147483650,
    CATEGORY = 2147483651,
    DESCRIPTION = 2147483652,
    INPUTS = 2147483653,
    CACHED = 2147483654,
    PRECISION = 2147483655,
    MIN_INPUTS = 2147483656,
    MAX_INPUTS = 2147483657,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_PROPERTY_CLSID = D2D1_PROPERTY.CLSID;
pub const D2D1_PROPERTY_DISPLAYNAME = D2D1_PROPERTY.DISPLAYNAME;
pub const D2D1_PROPERTY_AUTHOR = D2D1_PROPERTY.AUTHOR;
pub const D2D1_PROPERTY_CATEGORY = D2D1_PROPERTY.CATEGORY;
pub const D2D1_PROPERTY_DESCRIPTION = D2D1_PROPERTY.DESCRIPTION;
pub const D2D1_PROPERTY_INPUTS = D2D1_PROPERTY.INPUTS;
pub const D2D1_PROPERTY_CACHED = D2D1_PROPERTY.CACHED;
pub const D2D1_PROPERTY_PRECISION = D2D1_PROPERTY.PRECISION;
pub const D2D1_PROPERTY_MIN_INPUTS = D2D1_PROPERTY.MIN_INPUTS;
pub const D2D1_PROPERTY_MAX_INPUTS = D2D1_PROPERTY.MAX_INPUTS;
pub const D2D1_PROPERTY_FORCE_DWORD = D2D1_PROPERTY.FORCE_DWORD;

pub const D2D1_SUBPROPERTY = enum(u32) {
    DISPLAYNAME = 2147483648,
    ISREADONLY = 2147483649,
    MIN = 2147483650,
    MAX = 2147483651,
    DEFAULT = 2147483652,
    FIELDS = 2147483653,
    INDEX = 2147483654,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SUBPROPERTY_DISPLAYNAME = D2D1_SUBPROPERTY.DISPLAYNAME;
pub const D2D1_SUBPROPERTY_ISREADONLY = D2D1_SUBPROPERTY.ISREADONLY;
pub const D2D1_SUBPROPERTY_MIN = D2D1_SUBPROPERTY.MIN;
pub const D2D1_SUBPROPERTY_MAX = D2D1_SUBPROPERTY.MAX;
pub const D2D1_SUBPROPERTY_DEFAULT = D2D1_SUBPROPERTY.DEFAULT;
pub const D2D1_SUBPROPERTY_FIELDS = D2D1_SUBPROPERTY.FIELDS;
pub const D2D1_SUBPROPERTY_INDEX = D2D1_SUBPROPERTY.INDEX;
pub const D2D1_SUBPROPERTY_FORCE_DWORD = D2D1_SUBPROPERTY.FORCE_DWORD;

pub const D2D1_BITMAP_OPTIONS = enum(u32) {
    NONE = 0,
    TARGET = 1,
    CANNOT_DRAW = 2,
    CPU_READ = 4,
    GDI_COMPATIBLE = 8,
    FORCE_DWORD = 4294967295,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        TARGET: u1 = 0,
        CANNOT_DRAW: u1 = 0,
        CPU_READ: u1 = 0,
        GDI_COMPATIBLE: u1 = 0,
        FORCE_DWORD: u1 = 0,
    }) D2D1_BITMAP_OPTIONS {
        return @as(D2D1_BITMAP_OPTIONS, @enumFromInt((if (o.NONE == 1) @intFromEnum(D2D1_BITMAP_OPTIONS.NONE) else 0) | (if (o.TARGET == 1) @intFromEnum(D2D1_BITMAP_OPTIONS.TARGET) else 0) | (if (o.CANNOT_DRAW == 1) @intFromEnum(D2D1_BITMAP_OPTIONS.CANNOT_DRAW) else 0) | (if (o.CPU_READ == 1) @intFromEnum(D2D1_BITMAP_OPTIONS.CPU_READ) else 0) | (if (o.GDI_COMPATIBLE == 1) @intFromEnum(D2D1_BITMAP_OPTIONS.GDI_COMPATIBLE) else 0) | (if (o.FORCE_DWORD == 1) @intFromEnum(D2D1_BITMAP_OPTIONS.FORCE_DWORD) else 0)));
    }
};
pub const D2D1_BITMAP_OPTIONS_NONE = D2D1_BITMAP_OPTIONS.NONE;
pub const D2D1_BITMAP_OPTIONS_TARGET = D2D1_BITMAP_OPTIONS.TARGET;
pub const D2D1_BITMAP_OPTIONS_CANNOT_DRAW = D2D1_BITMAP_OPTIONS.CANNOT_DRAW;
pub const D2D1_BITMAP_OPTIONS_CPU_READ = D2D1_BITMAP_OPTIONS.CPU_READ;
pub const D2D1_BITMAP_OPTIONS_GDI_COMPATIBLE = D2D1_BITMAP_OPTIONS.GDI_COMPATIBLE;
pub const D2D1_BITMAP_OPTIONS_FORCE_DWORD = D2D1_BITMAP_OPTIONS.FORCE_DWORD;

pub const D2D1_BUFFER_PRECISION = enum(u32) {
    UNKNOWN = 0,
    @"8BPC_UNORM" = 1,
    @"8BPC_UNORM_SRGB" = 2,
    @"16BPC_UNORM" = 3,
    @"16BPC_FLOAT" = 4,
    @"32BPC_FLOAT" = 5,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_BUFFER_PRECISION_UNKNOWN = D2D1_BUFFER_PRECISION.UNKNOWN;
pub const D2D1_BUFFER_PRECISION_8BPC_UNORM = D2D1_BUFFER_PRECISION.@"8BPC_UNORM";
pub const D2D1_BUFFER_PRECISION_8BPC_UNORM_SRGB = D2D1_BUFFER_PRECISION.@"8BPC_UNORM_SRGB";
pub const D2D1_BUFFER_PRECISION_16BPC_UNORM = D2D1_BUFFER_PRECISION.@"16BPC_UNORM";
pub const D2D1_BUFFER_PRECISION_16BPC_FLOAT = D2D1_BUFFER_PRECISION.@"16BPC_FLOAT";
pub const D2D1_BUFFER_PRECISION_32BPC_FLOAT = D2D1_BUFFER_PRECISION.@"32BPC_FLOAT";
pub const D2D1_BUFFER_PRECISION_FORCE_DWORD = D2D1_BUFFER_PRECISION.FORCE_DWORD;

pub const D2D1_MAP_OPTIONS = enum(u32) {
    NONE = 0,
    READ = 1,
    WRITE = 2,
    DISCARD = 4,
    FORCE_DWORD = 4294967295,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        READ: u1 = 0,
        WRITE: u1 = 0,
        DISCARD: u1 = 0,
        FORCE_DWORD: u1 = 0,
    }) D2D1_MAP_OPTIONS {
        return @as(D2D1_MAP_OPTIONS, @enumFromInt((if (o.NONE == 1) @intFromEnum(D2D1_MAP_OPTIONS.NONE) else 0) | (if (o.READ == 1) @intFromEnum(D2D1_MAP_OPTIONS.READ) else 0) | (if (o.WRITE == 1) @intFromEnum(D2D1_MAP_OPTIONS.WRITE) else 0) | (if (o.DISCARD == 1) @intFromEnum(D2D1_MAP_OPTIONS.DISCARD) else 0) | (if (o.FORCE_DWORD == 1) @intFromEnum(D2D1_MAP_OPTIONS.FORCE_DWORD) else 0)));
    }
};
pub const D2D1_MAP_OPTIONS_NONE = D2D1_MAP_OPTIONS.NONE;
pub const D2D1_MAP_OPTIONS_READ = D2D1_MAP_OPTIONS.READ;
pub const D2D1_MAP_OPTIONS_WRITE = D2D1_MAP_OPTIONS.WRITE;
pub const D2D1_MAP_OPTIONS_DISCARD = D2D1_MAP_OPTIONS.DISCARD;
pub const D2D1_MAP_OPTIONS_FORCE_DWORD = D2D1_MAP_OPTIONS.FORCE_DWORD;

pub const D2D1_INTERPOLATION_MODE = enum(u32) {
    NEAREST_NEIGHBOR = 0,
    LINEAR = 1,
    CUBIC = 2,
    MULTI_SAMPLE_LINEAR = 3,
    ANISOTROPIC = 4,
    HIGH_QUALITY_CUBIC = 5,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_INTERPOLATION_MODE_NEAREST_NEIGHBOR = D2D1_INTERPOLATION_MODE.NEAREST_NEIGHBOR;
pub const D2D1_INTERPOLATION_MODE_LINEAR = D2D1_INTERPOLATION_MODE.LINEAR;
pub const D2D1_INTERPOLATION_MODE_CUBIC = D2D1_INTERPOLATION_MODE.CUBIC;
pub const D2D1_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = D2D1_INTERPOLATION_MODE.MULTI_SAMPLE_LINEAR;
pub const D2D1_INTERPOLATION_MODE_ANISOTROPIC = D2D1_INTERPOLATION_MODE.ANISOTROPIC;
pub const D2D1_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = D2D1_INTERPOLATION_MODE.HIGH_QUALITY_CUBIC;
pub const D2D1_INTERPOLATION_MODE_FORCE_DWORD = D2D1_INTERPOLATION_MODE.FORCE_DWORD;

pub const D2D1_UNIT_MODE = enum(u32) {
    DIPS = 0,
    PIXELS = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_UNIT_MODE_DIPS = D2D1_UNIT_MODE.DIPS;
pub const D2D1_UNIT_MODE_PIXELS = D2D1_UNIT_MODE.PIXELS;
pub const D2D1_UNIT_MODE_FORCE_DWORD = D2D1_UNIT_MODE.FORCE_DWORD;

pub const D2D1_COLOR_SPACE = enum(u32) {
    CUSTOM = 0,
    SRGB = 1,
    SCRGB = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_COLOR_SPACE_CUSTOM = D2D1_COLOR_SPACE.CUSTOM;
pub const D2D1_COLOR_SPACE_SRGB = D2D1_COLOR_SPACE.SRGB;
pub const D2D1_COLOR_SPACE_SCRGB = D2D1_COLOR_SPACE.SCRGB;
pub const D2D1_COLOR_SPACE_FORCE_DWORD = D2D1_COLOR_SPACE.FORCE_DWORD;

pub const D2D1_DEVICE_CONTEXT_OPTIONS = enum(u32) {
    NONE = 0,
    ENABLE_MULTITHREADED_OPTIMIZATIONS = 1,
    FORCE_DWORD = 4294967295,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        ENABLE_MULTITHREADED_OPTIMIZATIONS: u1 = 0,
        FORCE_DWORD: u1 = 0,
    }) D2D1_DEVICE_CONTEXT_OPTIONS {
        return @as(D2D1_DEVICE_CONTEXT_OPTIONS, @enumFromInt((if (o.NONE == 1) @intFromEnum(D2D1_DEVICE_CONTEXT_OPTIONS.NONE) else 0) | (if (o.ENABLE_MULTITHREADED_OPTIMIZATIONS == 1) @intFromEnum(D2D1_DEVICE_CONTEXT_OPTIONS.ENABLE_MULTITHREADED_OPTIMIZATIONS) else 0) | (if (o.FORCE_DWORD == 1) @intFromEnum(D2D1_DEVICE_CONTEXT_OPTIONS.FORCE_DWORD) else 0)));
    }
};
pub const D2D1_DEVICE_CONTEXT_OPTIONS_NONE = D2D1_DEVICE_CONTEXT_OPTIONS.NONE;
pub const D2D1_DEVICE_CONTEXT_OPTIONS_ENABLE_MULTITHREADED_OPTIMIZATIONS = D2D1_DEVICE_CONTEXT_OPTIONS.ENABLE_MULTITHREADED_OPTIMIZATIONS;
pub const D2D1_DEVICE_CONTEXT_OPTIONS_FORCE_DWORD = D2D1_DEVICE_CONTEXT_OPTIONS.FORCE_DWORD;

pub const D2D1_STROKE_TRANSFORM_TYPE = enum(u32) {
    NORMAL = 0,
    FIXED = 1,
    HAIRLINE = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_STROKE_TRANSFORM_TYPE_NORMAL = D2D1_STROKE_TRANSFORM_TYPE.NORMAL;
pub const D2D1_STROKE_TRANSFORM_TYPE_FIXED = D2D1_STROKE_TRANSFORM_TYPE.FIXED;
pub const D2D1_STROKE_TRANSFORM_TYPE_HAIRLINE = D2D1_STROKE_TRANSFORM_TYPE.HAIRLINE;
pub const D2D1_STROKE_TRANSFORM_TYPE_FORCE_DWORD = D2D1_STROKE_TRANSFORM_TYPE.FORCE_DWORD;

pub const D2D1_PRIMITIVE_BLEND = enum(u32) {
    SOURCE_OVER = 0,
    COPY = 1,
    MIN = 2,
    ADD = 3,
    MAX = 4,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_PRIMITIVE_BLEND_SOURCE_OVER = D2D1_PRIMITIVE_BLEND.SOURCE_OVER;
pub const D2D1_PRIMITIVE_BLEND_COPY = D2D1_PRIMITIVE_BLEND.COPY;
pub const D2D1_PRIMITIVE_BLEND_MIN = D2D1_PRIMITIVE_BLEND.MIN;
pub const D2D1_PRIMITIVE_BLEND_ADD = D2D1_PRIMITIVE_BLEND.ADD;
pub const D2D1_PRIMITIVE_BLEND_MAX = D2D1_PRIMITIVE_BLEND.MAX;
pub const D2D1_PRIMITIVE_BLEND_FORCE_DWORD = D2D1_PRIMITIVE_BLEND.FORCE_DWORD;

pub const D2D1_THREADING_MODE = enum(u32) {
    SINGLE_THREADED = 0,
    MULTI_THREADED = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_THREADING_MODE_SINGLE_THREADED = D2D1_THREADING_MODE.SINGLE_THREADED;
pub const D2D1_THREADING_MODE_MULTI_THREADED = D2D1_THREADING_MODE.MULTI_THREADED;
pub const D2D1_THREADING_MODE_FORCE_DWORD = D2D1_THREADING_MODE.FORCE_DWORD;

pub const D2D1_COLOR_INTERPOLATION_MODE = enum(u32) {
    STRAIGHT = 0,
    PREMULTIPLIED = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_COLOR_INTERPOLATION_MODE_STRAIGHT = D2D1_COLOR_INTERPOLATION_MODE.STRAIGHT;
pub const D2D1_COLOR_INTERPOLATION_MODE_PREMULTIPLIED = D2D1_COLOR_INTERPOLATION_MODE.PREMULTIPLIED;
pub const D2D1_COLOR_INTERPOLATION_MODE_FORCE_DWORD = D2D1_COLOR_INTERPOLATION_MODE.FORCE_DWORD;

pub const D2D1_BITMAP_PROPERTIES1 = extern struct {
    pixelFormat: D2D1_PIXEL_FORMAT,
    dpiX: f32,
    dpiY: f32,
    bitmapOptions: D2D1_BITMAP_OPTIONS,
    colorContext: ?*ID2D1ColorContext,
};

pub const D2D1_MAPPED_RECT = extern struct {
    pitch: u32,
    bits: ?*u8,
};

pub const D2D1_RENDERING_CONTROLS = extern struct {
    bufferPrecision: D2D1_BUFFER_PRECISION,
    tileSize: D2D_SIZE_U,
};

pub const D2D1_EFFECT_INPUT_DESCRIPTION = extern struct {
    effect: ?*ID2D1Effect,
    inputIndex: u32,
    inputRectangle: D2D_RECT_F,
};

pub const D2D1_POINT_DESCRIPTION = extern struct {
    point: D2D_POINT_2F,
    unitTangentVector: D2D_POINT_2F,
    endSegment: u32,
    endFigure: u32,
    lengthToEndSegment: f32,
};

pub const D2D1_IMAGE_BRUSH_PROPERTIES = extern struct {
    sourceRectangle: D2D_RECT_F,
    extendModeX: D2D1_EXTEND_MODE,
    extendModeY: D2D1_EXTEND_MODE,
    interpolationMode: D2D1_INTERPOLATION_MODE,
};

pub const D2D1_BITMAP_BRUSH_PROPERTIES1 = extern struct {
    extendModeX: D2D1_EXTEND_MODE,
    extendModeY: D2D1_EXTEND_MODE,
    interpolationMode: D2D1_INTERPOLATION_MODE,
};

pub const D2D1_STROKE_STYLE_PROPERTIES1 = extern struct {
    startCap: D2D1_CAP_STYLE,
    endCap: D2D1_CAP_STYLE,
    dashCap: D2D1_CAP_STYLE,
    lineJoin: D2D1_LINE_JOIN,
    miterLimit: f32,
    dashStyle: D2D1_DASH_STYLE,
    dashOffset: f32,
    transformType: D2D1_STROKE_TRANSFORM_TYPE,
};

pub const D2D1_LAYER_OPTIONS1 = enum(u32) {
    NONE = 0,
    INITIALIZE_FROM_BACKGROUND = 1,
    IGNORE_ALPHA = 2,
    FORCE_DWORD = 4294967295,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        INITIALIZE_FROM_BACKGROUND: u1 = 0,
        IGNORE_ALPHA: u1 = 0,
        FORCE_DWORD: u1 = 0,
    }) D2D1_LAYER_OPTIONS1 {
        return @as(D2D1_LAYER_OPTIONS1, @enumFromInt((if (o.NONE == 1) @intFromEnum(D2D1_LAYER_OPTIONS1.NONE) else 0) | (if (o.INITIALIZE_FROM_BACKGROUND == 1) @intFromEnum(D2D1_LAYER_OPTIONS1.INITIALIZE_FROM_BACKGROUND) else 0) | (if (o.IGNORE_ALPHA == 1) @intFromEnum(D2D1_LAYER_OPTIONS1.IGNORE_ALPHA) else 0) | (if (o.FORCE_DWORD == 1) @intFromEnum(D2D1_LAYER_OPTIONS1.FORCE_DWORD) else 0)));
    }
};
pub const D2D1_LAYER_OPTIONS1_NONE = D2D1_LAYER_OPTIONS1.NONE;
pub const D2D1_LAYER_OPTIONS1_INITIALIZE_FROM_BACKGROUND = D2D1_LAYER_OPTIONS1.INITIALIZE_FROM_BACKGROUND;
pub const D2D1_LAYER_OPTIONS1_IGNORE_ALPHA = D2D1_LAYER_OPTIONS1.IGNORE_ALPHA;
pub const D2D1_LAYER_OPTIONS1_FORCE_DWORD = D2D1_LAYER_OPTIONS1.FORCE_DWORD;

pub const D2D1_LAYER_PARAMETERS1 = extern struct {
    contentBounds: D2D_RECT_F,
    geometricMask: ?*ID2D1Geometry,
    maskAntialiasMode: D2D1_ANTIALIAS_MODE,
    maskTransform: D2D_MATRIX_3X2_F,
    opacity: f32,
    opacityBrush: ?*ID2D1Brush,
    layerOptions: D2D1_LAYER_OPTIONS1,
};

pub const D2D1_PRINT_FONT_SUBSET_MODE = enum(u32) {
    DEFAULT = 0,
    EACHPAGE = 1,
    NONE = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_PRINT_FONT_SUBSET_MODE_DEFAULT = D2D1_PRINT_FONT_SUBSET_MODE.DEFAULT;
pub const D2D1_PRINT_FONT_SUBSET_MODE_EACHPAGE = D2D1_PRINT_FONT_SUBSET_MODE.EACHPAGE;
pub const D2D1_PRINT_FONT_SUBSET_MODE_NONE = D2D1_PRINT_FONT_SUBSET_MODE.NONE;
pub const D2D1_PRINT_FONT_SUBSET_MODE_FORCE_DWORD = D2D1_PRINT_FONT_SUBSET_MODE.FORCE_DWORD;

pub const D2D1_DRAWING_STATE_DESCRIPTION1 = extern struct {
    antialiasMode: D2D1_ANTIALIAS_MODE,
    textAntialiasMode: D2D1_TEXT_ANTIALIAS_MODE,
    tag1: u64,
    tag2: u64,
    transform: D2D_MATRIX_3X2_F,
    primitiveBlend: D2D1_PRIMITIVE_BLEND,
    unitMode: D2D1_UNIT_MODE,
};

pub const D2D1_PRINT_CONTROL_PROPERTIES = extern struct {
    fontSubset: D2D1_PRINT_FONT_SUBSET_MODE,
    rasterDPI: f32,
    colorSpace: D2D1_COLOR_SPACE,
};

pub const D2D1_CREATION_PROPERTIES = extern struct {
    threadingMode: D2D1_THREADING_MODE,
    debugLevel: D2D1_DEBUG_LEVEL,
    options: D2D1_DEVICE_CONTEXT_OPTIONS,
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1GdiMetafileSink_Value = Guid.initString("82237326-8111-4f7c-bcf4-b5c1175564fe");
pub const IID_ID2D1GdiMetafileSink = &IID_ID2D1GdiMetafileSink_Value;
pub const ID2D1GdiMetafileSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ProcessRecord: *const fn (
            self: *const ID2D1GdiMetafileSink,
            record_type: u32,
            record_data: ?*const anyopaque,
            record_data_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn processRecord(self: *const T, record_type_: u32, record_data_: ?*const anyopaque, record_data_size_: u32) HRESULT {
                return @as(*const ID2D1GdiMetafileSink.VTable, @ptrCast(self.vtable)).ProcessRecord(@as(*const ID2D1GdiMetafileSink, @ptrCast(self)), record_type_, record_data_, record_data_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1GdiMetafile_Value = Guid.initString("2f543dc3-cfc1-4211-864f-cfd91c6f3395");
pub const IID_ID2D1GdiMetafile = &IID_ID2D1GdiMetafile_Value;
pub const ID2D1GdiMetafile = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
        Stream: *const fn (
            self: *const ID2D1GdiMetafile,
            sink: ?*ID2D1GdiMetafileSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBounds: *const fn (
            self: *const ID2D1GdiMetafile,
            bounds: ?*D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
            pub inline fn stream(self: *const T, sink_: ?*ID2D1GdiMetafileSink) HRESULT {
                return @as(*const ID2D1GdiMetafile.VTable, @ptrCast(self.vtable)).Stream(@as(*const ID2D1GdiMetafile, @ptrCast(self)), sink_);
            }
            pub inline fn getBounds(self: *const T, bounds_: ?*D2D_RECT_F) HRESULT {
                return @as(*const ID2D1GdiMetafile.VTable, @ptrCast(self.vtable)).GetBounds(@as(*const ID2D1GdiMetafile, @ptrCast(self)), bounds_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1CommandSink_Value = Guid.initString("54d7898a-a061-40a7-bec7-e465bcba2c4f");
pub const IID_ID2D1CommandSink = &IID_ID2D1CommandSink_Value;
pub const ID2D1CommandSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BeginDraw: *const fn (
            self: *const ID2D1CommandSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndDraw: *const fn (
            self: *const ID2D1CommandSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAntialiasMode: *const fn (
            self: *const ID2D1CommandSink,
            antialias_mode: D2D1_ANTIALIAS_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTags: *const fn (
            self: *const ID2D1CommandSink,
            tag1: u64,
            tag2: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTextAntialiasMode: *const fn (
            self: *const ID2D1CommandSink,
            text_antialias_mode: D2D1_TEXT_ANTIALIAS_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTextRenderingParams: *const fn (
            self: *const ID2D1CommandSink,
            text_rendering_params: ?*IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransform: *const fn (
            self: *const ID2D1CommandSink,
            transform: ?*const D2D_MATRIX_3X2_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrimitiveBlend: *const fn (
            self: *const ID2D1CommandSink,
            primitive_blend: D2D1_PRIMITIVE_BLEND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUnitMode: *const fn (
            self: *const ID2D1CommandSink,
            unit_mode: D2D1_UNIT_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const ID2D1CommandSink,
            color: ?*const D2D1_COLOR_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawGlyphRun: *const fn (
            self: *const ID2D1CommandSink,
            baseline_origin: D2D_POINT_2F,
            glyph_run: ?*const DWRITE_GLYPH_RUN,
            glyph_run_description: ?*const DWRITE_GLYPH_RUN_DESCRIPTION,
            foreground_brush: ?*ID2D1Brush,
            measuring_mode: DWRITE_MEASURING_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawLine: *const fn (
            self: *const ID2D1CommandSink,
            point0: D2D_POINT_2F,
            point1: D2D_POINT_2F,
            brush: ?*ID2D1Brush,
            stroke_width: f32,
            stroke_style: ?*ID2D1StrokeStyle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawGeometry: *const fn (
            self: *const ID2D1CommandSink,
            geometry: ?*ID2D1Geometry,
            brush: ?*ID2D1Brush,
            stroke_width: f32,
            stroke_style: ?*ID2D1StrokeStyle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawRectangle: *const fn (
            self: *const ID2D1CommandSink,
            rect: ?*const D2D_RECT_F,
            brush: ?*ID2D1Brush,
            stroke_width: f32,
            stroke_style: ?*ID2D1StrokeStyle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawBitmap: *const fn (
            self: *const ID2D1CommandSink,
            bitmap: ?*ID2D1Bitmap,
            destination_rectangle: ?*const D2D_RECT_F,
            opacity: f32,
            interpolation_mode: D2D1_INTERPOLATION_MODE,
            source_rectangle: ?*const D2D_RECT_F,
            perspective_transform: ?*const D2D_MATRIX_4X4_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawImage: *const fn (
            self: *const ID2D1CommandSink,
            image: ?*ID2D1Image,
            target_offset: ?*const D2D_POINT_2F,
            image_rectangle: ?*const D2D_RECT_F,
            interpolation_mode: D2D1_INTERPOLATION_MODE,
            composite_mode: D2D1_COMPOSITE_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawGdiMetafile: *const fn (
            self: *const ID2D1CommandSink,
            gdi_metafile: ?*ID2D1GdiMetafile,
            target_offset: ?*const D2D_POINT_2F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FillMesh: *const fn (
            self: *const ID2D1CommandSink,
            mesh: ?*ID2D1Mesh,
            brush: ?*ID2D1Brush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FillOpacityMask: *const fn (
            self: *const ID2D1CommandSink,
            opacity_mask: ?*ID2D1Bitmap,
            brush: ?*ID2D1Brush,
            destination_rectangle: ?*const D2D_RECT_F,
            source_rectangle: ?*const D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FillGeometry: *const fn (
            self: *const ID2D1CommandSink,
            geometry: ?*ID2D1Geometry,
            brush: ?*ID2D1Brush,
            opacity_brush: ?*ID2D1Brush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FillRectangle: *const fn (
            self: *const ID2D1CommandSink,
            rect: ?*const D2D_RECT_F,
            brush: ?*ID2D1Brush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PushAxisAlignedClip: *const fn (
            self: *const ID2D1CommandSink,
            clip_rect: ?*const D2D_RECT_F,
            antialias_mode: D2D1_ANTIALIAS_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PushLayer: *const fn (
            self: *const ID2D1CommandSink,
            layer_parameters1: ?*const D2D1_LAYER_PARAMETERS1,
            layer: ?*ID2D1Layer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PopAxisAlignedClip: *const fn (
            self: *const ID2D1CommandSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PopLayer: *const fn (
            self: *const ID2D1CommandSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn beginDraw(self: *const T) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).BeginDraw(@as(*const ID2D1CommandSink, @ptrCast(self)));
            }
            pub inline fn endDraw(self: *const T) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).EndDraw(@as(*const ID2D1CommandSink, @ptrCast(self)));
            }
            pub inline fn setAntialiasMode(self: *const T, antialias_mode_: D2D1_ANTIALIAS_MODE) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).SetAntialiasMode(@as(*const ID2D1CommandSink, @ptrCast(self)), antialias_mode_);
            }
            pub inline fn setTags(self: *const T, tag1_: u64, tag2_: u64) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).SetTags(@as(*const ID2D1CommandSink, @ptrCast(self)), tag1_, tag2_);
            }
            pub inline fn setTextAntialiasMode(self: *const T, text_antialias_mode_: D2D1_TEXT_ANTIALIAS_MODE) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).SetTextAntialiasMode(@as(*const ID2D1CommandSink, @ptrCast(self)), text_antialias_mode_);
            }
            pub inline fn setTextRenderingParams(self: *const T, text_rendering_params_: ?*IDWriteRenderingParams) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).SetTextRenderingParams(@as(*const ID2D1CommandSink, @ptrCast(self)), text_rendering_params_);
            }
            pub inline fn setTransform(self: *const T, transform_: ?*const D2D_MATRIX_3X2_F) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).SetTransform(@as(*const ID2D1CommandSink, @ptrCast(self)), transform_);
            }
            pub inline fn setPrimitiveBlend(self: *const T, primitive_blend_: D2D1_PRIMITIVE_BLEND) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).SetPrimitiveBlend(@as(*const ID2D1CommandSink, @ptrCast(self)), primitive_blend_);
            }
            pub inline fn setUnitMode(self: *const T, unit_mode_: D2D1_UNIT_MODE) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).SetUnitMode(@as(*const ID2D1CommandSink, @ptrCast(self)), unit_mode_);
            }
            pub inline fn clear(self: *const T, color_: ?*const D2D1_COLOR_F) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).Clear(@as(*const ID2D1CommandSink, @ptrCast(self)), color_);
            }
            pub inline fn drawGlyphRun(self: *const T, baseline_origin_: D2D_POINT_2F, glyph_run_: ?*const DWRITE_GLYPH_RUN, glyph_run_description_: ?*const DWRITE_GLYPH_RUN_DESCRIPTION, foreground_brush_: ?*ID2D1Brush, measuring_mode_: DWRITE_MEASURING_MODE) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).DrawGlyphRun(@as(*const ID2D1CommandSink, @ptrCast(self)), baseline_origin_, glyph_run_, glyph_run_description_, foreground_brush_, measuring_mode_);
            }
            pub inline fn drawLine(self: *const T, point0_: D2D_POINT_2F, point1_: D2D_POINT_2F, brush_: ?*ID2D1Brush, stroke_width_: f32, stroke_style_: ?*ID2D1StrokeStyle) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).DrawLine(@as(*const ID2D1CommandSink, @ptrCast(self)), point0_, point1_, brush_, stroke_width_, stroke_style_);
            }
            pub inline fn drawGeometry(self: *const T, geometry_: ?*ID2D1Geometry, brush_: ?*ID2D1Brush, stroke_width_: f32, stroke_style_: ?*ID2D1StrokeStyle) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).DrawGeometry(@as(*const ID2D1CommandSink, @ptrCast(self)), geometry_, brush_, stroke_width_, stroke_style_);
            }
            pub inline fn drawRectangle(self: *const T, rect_: ?*const D2D_RECT_F, brush_: ?*ID2D1Brush, stroke_width_: f32, stroke_style_: ?*ID2D1StrokeStyle) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).DrawRectangle(@as(*const ID2D1CommandSink, @ptrCast(self)), rect_, brush_, stroke_width_, stroke_style_);
            }
            pub inline fn drawBitmap(self: *const T, bitmap_: ?*ID2D1Bitmap, destination_rectangle_: ?*const D2D_RECT_F, opacity_: f32, interpolation_mode_: D2D1_INTERPOLATION_MODE, source_rectangle_: ?*const D2D_RECT_F, perspective_transform_: ?*const D2D_MATRIX_4X4_F) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).DrawBitmap(@as(*const ID2D1CommandSink, @ptrCast(self)), bitmap_, destination_rectangle_, opacity_, interpolation_mode_, source_rectangle_, perspective_transform_);
            }
            pub inline fn drawImage(self: *const T, image_: ?*ID2D1Image, target_offset_: ?*const D2D_POINT_2F, image_rectangle_: ?*const D2D_RECT_F, interpolation_mode_: D2D1_INTERPOLATION_MODE, composite_mode_: D2D1_COMPOSITE_MODE) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).DrawImage(@as(*const ID2D1CommandSink, @ptrCast(self)), image_, target_offset_, image_rectangle_, interpolation_mode_, composite_mode_);
            }
            pub inline fn drawGdiMetafile(self: *const T, gdi_metafile_: ?*ID2D1GdiMetafile, target_offset_: ?*const D2D_POINT_2F) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).DrawGdiMetafile(@as(*const ID2D1CommandSink, @ptrCast(self)), gdi_metafile_, target_offset_);
            }
            pub inline fn fillMesh(self: *const T, mesh_: ?*ID2D1Mesh, brush_: ?*ID2D1Brush) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).FillMesh(@as(*const ID2D1CommandSink, @ptrCast(self)), mesh_, brush_);
            }
            pub inline fn fillOpacityMask(self: *const T, opacity_mask_: ?*ID2D1Bitmap, brush_: ?*ID2D1Brush, destination_rectangle_: ?*const D2D_RECT_F, source_rectangle_: ?*const D2D_RECT_F) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).FillOpacityMask(@as(*const ID2D1CommandSink, @ptrCast(self)), opacity_mask_, brush_, destination_rectangle_, source_rectangle_);
            }
            pub inline fn fillGeometry(self: *const T, geometry_: ?*ID2D1Geometry, brush_: ?*ID2D1Brush, opacity_brush_: ?*ID2D1Brush) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).FillGeometry(@as(*const ID2D1CommandSink, @ptrCast(self)), geometry_, brush_, opacity_brush_);
            }
            pub inline fn fillRectangle(self: *const T, rect_: ?*const D2D_RECT_F, brush_: ?*ID2D1Brush) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).FillRectangle(@as(*const ID2D1CommandSink, @ptrCast(self)), rect_, brush_);
            }
            pub inline fn pushAxisAlignedClip(self: *const T, clip_rect_: ?*const D2D_RECT_F, antialias_mode_: D2D1_ANTIALIAS_MODE) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).PushAxisAlignedClip(@as(*const ID2D1CommandSink, @ptrCast(self)), clip_rect_, antialias_mode_);
            }
            pub inline fn pushLayer(self: *const T, layer_parameters1_: ?*const D2D1_LAYER_PARAMETERS1, layer_: ?*ID2D1Layer) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).PushLayer(@as(*const ID2D1CommandSink, @ptrCast(self)), layer_parameters1_, layer_);
            }
            pub inline fn popAxisAlignedClip(self: *const T) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).PopAxisAlignedClip(@as(*const ID2D1CommandSink, @ptrCast(self)));
            }
            pub inline fn popLayer(self: *const T) HRESULT {
                return @as(*const ID2D1CommandSink.VTable, @ptrCast(self.vtable)).PopLayer(@as(*const ID2D1CommandSink, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1CommandList_Value = Guid.initString("b4f34a19-2383-4d76-94f6-ec343657c3dc");
pub const IID_ID2D1CommandList = &IID_ID2D1CommandList_Value;
pub const ID2D1CommandList = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Image.VTable,
        Stream: *const fn (
            self: *const ID2D1CommandList,
            sink: ?*ID2D1CommandSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const ID2D1CommandList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Image.MethodMixin(T);
            pub inline fn stream(self: *const T, sink_: ?*ID2D1CommandSink) HRESULT {
                return @as(*const ID2D1CommandList.VTable, @ptrCast(self.vtable)).Stream(@as(*const ID2D1CommandList, @ptrCast(self)), sink_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const ID2D1CommandList.VTable, @ptrCast(self.vtable)).Close(@as(*const ID2D1CommandList, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1PrintControl_Value = Guid.initString("2c1d867d-c290-41c8-ae7e-34a98702e9a5");
pub const IID_ID2D1PrintControl = &IID_ID2D1PrintControl_Value;
pub const ID2D1PrintControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddPage: *const fn (
            self: *const ID2D1PrintControl,
            command_list: ?*ID2D1CommandList,
            page_size: D2D_SIZE_F,
            page_print_ticket_stream: ?*IStream,
            tag1: ?*u64,
            tag2: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const ID2D1PrintControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addPage(self: *const T, command_list_: ?*ID2D1CommandList, page_size_: D2D_SIZE_F, page_print_ticket_stream_: ?*IStream, tag1_: ?*u64, tag2_: ?*u64) HRESULT {
                return @as(*const ID2D1PrintControl.VTable, @ptrCast(self.vtable)).AddPage(@as(*const ID2D1PrintControl, @ptrCast(self)), command_list_, page_size_, page_print_ticket_stream_, tag1_, tag2_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const ID2D1PrintControl.VTable, @ptrCast(self.vtable)).Close(@as(*const ID2D1PrintControl, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1ImageBrush_Value = Guid.initString("fe9e984d-3f95-407c-b5db-cb94d4e8f87c");
pub const IID_ID2D1ImageBrush = &IID_ID2D1ImageBrush_Value;
pub const ID2D1ImageBrush = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Brush.VTable,
        SetImage: *const fn (
            self: *const ID2D1ImageBrush,
            image: ?*ID2D1Image,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetExtendModeX: *const fn (
            self: *const ID2D1ImageBrush,
            extend_mode_x: D2D1_EXTEND_MODE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetExtendModeY: *const fn (
            self: *const ID2D1ImageBrush,
            extend_mode_y: D2D1_EXTEND_MODE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetInterpolationMode: *const fn (
            self: *const ID2D1ImageBrush,
            interpolation_mode: D2D1_INTERPOLATION_MODE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetSourceRectangle: *const fn (
            self: *const ID2D1ImageBrush,
            source_rectangle: ?*const D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetImage: *const fn (
            self: *const ID2D1ImageBrush,
            image: ?*?*ID2D1Image,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetExtendModeX: *const fn (
            self: *const ID2D1ImageBrush,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_EXTEND_MODE,
        GetExtendModeY: *const fn (
            self: *const ID2D1ImageBrush,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_EXTEND_MODE,
        GetInterpolationMode: *const fn (
            self: *const ID2D1ImageBrush,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_INTERPOLATION_MODE,
        GetSourceRectangle: *const fn (
            self: *const ID2D1ImageBrush,
            source_rectangle: ?*D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Brush.MethodMixin(T);
            pub inline fn setImage(self: *const T, image_: ?*ID2D1Image) void {
                return @as(*const ID2D1ImageBrush.VTable, @ptrCast(self.vtable)).SetImage(@as(*const ID2D1ImageBrush, @ptrCast(self)), image_);
            }
            pub inline fn setExtendModeX(self: *const T, extend_mode_x_: D2D1_EXTEND_MODE) void {
                return @as(*const ID2D1ImageBrush.VTable, @ptrCast(self.vtable)).SetExtendModeX(@as(*const ID2D1ImageBrush, @ptrCast(self)), extend_mode_x_);
            }
            pub inline fn setExtendModeY(self: *const T, extend_mode_y_: D2D1_EXTEND_MODE) void {
                return @as(*const ID2D1ImageBrush.VTable, @ptrCast(self.vtable)).SetExtendModeY(@as(*const ID2D1ImageBrush, @ptrCast(self)), extend_mode_y_);
            }
            pub inline fn setInterpolationMode(self: *const T, interpolation_mode_: D2D1_INTERPOLATION_MODE) void {
                return @as(*const ID2D1ImageBrush.VTable, @ptrCast(self.vtable)).SetInterpolationMode(@as(*const ID2D1ImageBrush, @ptrCast(self)), interpolation_mode_);
            }
            pub inline fn setSourceRectangle(self: *const T, source_rectangle_: ?*const D2D_RECT_F) void {
                return @as(*const ID2D1ImageBrush.VTable, @ptrCast(self.vtable)).SetSourceRectangle(@as(*const ID2D1ImageBrush, @ptrCast(self)), source_rectangle_);
            }
            pub inline fn getImage(self: *const T, image_: ?*?*ID2D1Image) void {
                return @as(*const ID2D1ImageBrush.VTable, @ptrCast(self.vtable)).GetImage(@as(*const ID2D1ImageBrush, @ptrCast(self)), image_);
            }
            pub inline fn getExtendModeX(self: *const T) D2D1_EXTEND_MODE {
                return @as(*const ID2D1ImageBrush.VTable, @ptrCast(self.vtable)).GetExtendModeX(@as(*const ID2D1ImageBrush, @ptrCast(self)));
            }
            pub inline fn getExtendModeY(self: *const T) D2D1_EXTEND_MODE {
                return @as(*const ID2D1ImageBrush.VTable, @ptrCast(self.vtable)).GetExtendModeY(@as(*const ID2D1ImageBrush, @ptrCast(self)));
            }
            pub inline fn getInterpolationMode(self: *const T) D2D1_INTERPOLATION_MODE {
                return @as(*const ID2D1ImageBrush.VTable, @ptrCast(self.vtable)).GetInterpolationMode(@as(*const ID2D1ImageBrush, @ptrCast(self)));
            }
            pub inline fn getSourceRectangle(self: *const T, source_rectangle_: ?*D2D_RECT_F) void {
                return @as(*const ID2D1ImageBrush.VTable, @ptrCast(self.vtable)).GetSourceRectangle(@as(*const ID2D1ImageBrush, @ptrCast(self)), source_rectangle_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1BitmapBrush1_Value = Guid.initString("41343a53-e41a-49a2-91cd-21793bbb62e5");
pub const IID_ID2D1BitmapBrush1 = &IID_ID2D1BitmapBrush1_Value;
pub const ID2D1BitmapBrush1 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1BitmapBrush.VTable,
        SetInterpolationMode1: *const fn (
            self: *const ID2D1BitmapBrush1,
            interpolation_mode: D2D1_INTERPOLATION_MODE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetInterpolationMode1: *const fn (
            self: *const ID2D1BitmapBrush1,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_INTERPOLATION_MODE,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1BitmapBrush.MethodMixin(T);
            pub inline fn setInterpolationMode1(self: *const T, interpolation_mode_: D2D1_INTERPOLATION_MODE) void {
                return @as(*const ID2D1BitmapBrush1.VTable, @ptrCast(self.vtable)).SetInterpolationMode1(@as(*const ID2D1BitmapBrush1, @ptrCast(self)), interpolation_mode_);
            }
            pub inline fn getInterpolationMode1(self: *const T) D2D1_INTERPOLATION_MODE {
                return @as(*const ID2D1BitmapBrush1.VTable, @ptrCast(self.vtable)).GetInterpolationMode1(@as(*const ID2D1BitmapBrush1, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1StrokeStyle1_Value = Guid.initString("10a72a66-e91c-43f4-993f-ddf4b82b0b4a");
pub const IID_ID2D1StrokeStyle1 = &IID_ID2D1StrokeStyle1_Value;
pub const ID2D1StrokeStyle1 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1StrokeStyle.VTable,
        GetStrokeTransformType: *const fn (
            self: *const ID2D1StrokeStyle1,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_STROKE_TRANSFORM_TYPE,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1StrokeStyle.MethodMixin(T);
            pub inline fn getStrokeTransformType(self: *const T) D2D1_STROKE_TRANSFORM_TYPE {
                return @as(*const ID2D1StrokeStyle1.VTable, @ptrCast(self.vtable)).GetStrokeTransformType(@as(*const ID2D1StrokeStyle1, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1PathGeometry1_Value = Guid.initString("62baa2d2-ab54-41b7-b872-787e0106a421");
pub const IID_ID2D1PathGeometry1 = &IID_ID2D1PathGeometry1_Value;
pub const ID2D1PathGeometry1 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1PathGeometry.VTable,
        ComputePointAndSegmentAtLength: *const fn (
            self: *const ID2D1PathGeometry1,
            length: f32,
            start_segment: u32,
            world_transform: ?*const D2D_MATRIX_3X2_F,
            flattening_tolerance: f32,
            point_description: ?*D2D1_POINT_DESCRIPTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1PathGeometry.MethodMixin(T);
            pub inline fn computePointAndSegmentAtLength(self: *const T, length_: f32, start_segment_: u32, world_transform_: ?*const D2D_MATRIX_3X2_F, flattening_tolerance_: f32, point_description_: ?*D2D1_POINT_DESCRIPTION) HRESULT {
                return @as(*const ID2D1PathGeometry1.VTable, @ptrCast(self.vtable)).ComputePointAndSegmentAtLength(@as(*const ID2D1PathGeometry1, @ptrCast(self)), length_, start_segment_, world_transform_, flattening_tolerance_, point_description_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1Properties_Value = Guid.initString("483473d7-cd46-4f9d-9d3a-3112aa80159d");
pub const IID_ID2D1Properties = &IID_ID2D1Properties_Value;
pub const ID2D1Properties = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPropertyCount: *const fn (
            self: *const ID2D1Properties,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetPropertyName: *const fn (
            self: *const ID2D1Properties,
            index: u32,
            name: [*:0]u16,
            name_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyNameLength: *const fn (
            self: *const ID2D1Properties,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetType: *const fn (
            self: *const ID2D1Properties,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_PROPERTY_TYPE,
        GetPropertyIndex: *const fn (
            self: *const ID2D1Properties,
            name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        SetValueByName: *const fn (
            self: *const ID2D1Properties,
            name: ?[*:0]const u16,
            type: D2D1_PROPERTY_TYPE,
            data: [*:0]const u8,
            data_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValue: *const fn (
            self: *const ID2D1Properties,
            index: u32,
            type: D2D1_PROPERTY_TYPE,
            data: [*:0]const u8,
            data_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValueByName: *const fn (
            self: *const ID2D1Properties,
            name: ?[*:0]const u16,
            type: D2D1_PROPERTY_TYPE,
            data: [*:0]u8,
            data_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn (
            self: *const ID2D1Properties,
            index: u32,
            type: D2D1_PROPERTY_TYPE,
            data: [*:0]u8,
            data_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValueSize: *const fn (
            self: *const ID2D1Properties,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetSubProperties: *const fn (
            self: *const ID2D1Properties,
            index: u32,
            sub_properties: ?*?*ID2D1Properties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPropertyCount(self: *const T) u32 {
                return @as(*const ID2D1Properties.VTable, @ptrCast(self.vtable)).GetPropertyCount(@as(*const ID2D1Properties, @ptrCast(self)));
            }
            pub inline fn getPropertyName(self: *const T, index_: u32, name_: [*:0]u16, name_count_: u32) HRESULT {
                return @as(*const ID2D1Properties.VTable, @ptrCast(self.vtable)).GetPropertyName(@as(*const ID2D1Properties, @ptrCast(self)), index_, name_, name_count_);
            }
            pub inline fn getPropertyNameLength(self: *const T, index_: u32) u32 {
                return @as(*const ID2D1Properties.VTable, @ptrCast(self.vtable)).GetPropertyNameLength(@as(*const ID2D1Properties, @ptrCast(self)), index_);
            }
            pub inline fn getType(self: *const T, index_: u32) D2D1_PROPERTY_TYPE {
                return @as(*const ID2D1Properties.VTable, @ptrCast(self.vtable)).GetType(@as(*const ID2D1Properties, @ptrCast(self)), index_);
            }
            pub inline fn getPropertyIndex(self: *const T, name_: ?[*:0]const u16) u32 {
                return @as(*const ID2D1Properties.VTable, @ptrCast(self.vtable)).GetPropertyIndex(@as(*const ID2D1Properties, @ptrCast(self)), name_);
            }
            pub inline fn setValueByName(self: *const T, name_: ?[*:0]const u16, type_: D2D1_PROPERTY_TYPE, data_: [*:0]const u8, data_size_: u32) HRESULT {
                return @as(*const ID2D1Properties.VTable, @ptrCast(self.vtable)).SetValueByName(@as(*const ID2D1Properties, @ptrCast(self)), name_, type_, data_, data_size_);
            }
            pub inline fn setValue(self: *const T, index_: u32, type_: D2D1_PROPERTY_TYPE, data_: [*:0]const u8, data_size_: u32) HRESULT {
                return @as(*const ID2D1Properties.VTable, @ptrCast(self.vtable)).SetValue(@as(*const ID2D1Properties, @ptrCast(self)), index_, type_, data_, data_size_);
            }
            pub inline fn getValueByName(self: *const T, name_: ?[*:0]const u16, type_: D2D1_PROPERTY_TYPE, data_: [*:0]u8, data_size_: u32) HRESULT {
                return @as(*const ID2D1Properties.VTable, @ptrCast(self.vtable)).GetValueByName(@as(*const ID2D1Properties, @ptrCast(self)), name_, type_, data_, data_size_);
            }
            pub inline fn getValue(self: *const T, index_: u32, type_: D2D1_PROPERTY_TYPE, data_: [*:0]u8, data_size_: u32) HRESULT {
                return @as(*const ID2D1Properties.VTable, @ptrCast(self.vtable)).GetValue(@as(*const ID2D1Properties, @ptrCast(self)), index_, type_, data_, data_size_);
            }
            pub inline fn getValueSize(self: *const T, index_: u32) u32 {
                return @as(*const ID2D1Properties.VTable, @ptrCast(self.vtable)).GetValueSize(@as(*const ID2D1Properties, @ptrCast(self)), index_);
            }
            pub inline fn getSubProperties(self: *const T, index_: u32, sub_properties_: ?*?*ID2D1Properties) HRESULT {
                return @as(*const ID2D1Properties.VTable, @ptrCast(self.vtable)).GetSubProperties(@as(*const ID2D1Properties, @ptrCast(self)), index_, sub_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1Effect_Value = Guid.initString("28211a43-7d89-476f-8181-2d6159b220ad");
pub const IID_ID2D1Effect = &IID_ID2D1Effect_Value;
pub const ID2D1Effect = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Properties.VTable,
        SetInput: *const fn (
            self: *const ID2D1Effect,
            index: u32,
            input: ?*ID2D1Image,
            invalidate: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetInputCount: *const fn (
            self: *const ID2D1Effect,
            input_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInput: *const fn (
            self: *const ID2D1Effect,
            index: u32,
            input: ?*?*ID2D1Image,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetInputCount: *const fn (
            self: *const ID2D1Effect,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetOutput: *const fn (
            self: *const ID2D1Effect,
            output_image: ?*?*ID2D1Image,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Properties.MethodMixin(T);
            pub inline fn setInput(self: *const T, index_: u32, input_: ?*ID2D1Image, invalidate_: BOOL) void {
                return @as(*const ID2D1Effect.VTable, @ptrCast(self.vtable)).SetInput(@as(*const ID2D1Effect, @ptrCast(self)), index_, input_, invalidate_);
            }
            pub inline fn setInputCount(self: *const T, input_count_: u32) HRESULT {
                return @as(*const ID2D1Effect.VTable, @ptrCast(self.vtable)).SetInputCount(@as(*const ID2D1Effect, @ptrCast(self)), input_count_);
            }
            pub inline fn getInput(self: *const T, index_: u32, input_: ?*?*ID2D1Image) void {
                return @as(*const ID2D1Effect.VTable, @ptrCast(self.vtable)).GetInput(@as(*const ID2D1Effect, @ptrCast(self)), index_, input_);
            }
            pub inline fn getInputCount(self: *const T) u32 {
                return @as(*const ID2D1Effect.VTable, @ptrCast(self.vtable)).GetInputCount(@as(*const ID2D1Effect, @ptrCast(self)));
            }
            pub inline fn getOutput(self: *const T, output_image_: ?*?*ID2D1Image) void {
                return @as(*const ID2D1Effect.VTable, @ptrCast(self.vtable)).GetOutput(@as(*const ID2D1Effect, @ptrCast(self)), output_image_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1Bitmap1_Value = Guid.initString("a898a84c-3873-4588-b08b-ebbf978df041");
pub const IID_ID2D1Bitmap1 = &IID_ID2D1Bitmap1_Value;
pub const ID2D1Bitmap1 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Bitmap.VTable,
        GetColorContext: *const fn (
            self: *const ID2D1Bitmap1,
            color_context: ?*?*ID2D1ColorContext,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetOptions: *const fn (
            self: *const ID2D1Bitmap1,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_BITMAP_OPTIONS,
        GetSurface: *const fn (
            self: *const ID2D1Bitmap1,
            dxgi_surface: ?*?*IDXGISurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Map: *const fn (
            self: *const ID2D1Bitmap1,
            options: D2D1_MAP_OPTIONS,
            mapped_rect: ?*D2D1_MAPPED_RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unmap: *const fn (
            self: *const ID2D1Bitmap1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Bitmap.MethodMixin(T);
            pub inline fn getColorContext(self: *const T, color_context_: ?*?*ID2D1ColorContext) void {
                return @as(*const ID2D1Bitmap1.VTable, @ptrCast(self.vtable)).GetColorContext(@as(*const ID2D1Bitmap1, @ptrCast(self)), color_context_);
            }
            pub inline fn getOptions(self: *const T) D2D1_BITMAP_OPTIONS {
                return @as(*const ID2D1Bitmap1.VTable, @ptrCast(self.vtable)).GetOptions(@as(*const ID2D1Bitmap1, @ptrCast(self)));
            }
            pub inline fn getSurface(self: *const T, dxgi_surface_: ?*?*IDXGISurface) HRESULT {
                return @as(*const ID2D1Bitmap1.VTable, @ptrCast(self.vtable)).GetSurface(@as(*const ID2D1Bitmap1, @ptrCast(self)), dxgi_surface_);
            }
            pub inline fn map(self: *const T, options_: D2D1_MAP_OPTIONS, mapped_rect_: ?*D2D1_MAPPED_RECT) HRESULT {
                return @as(*const ID2D1Bitmap1.VTable, @ptrCast(self.vtable)).Map(@as(*const ID2D1Bitmap1, @ptrCast(self)), options_, mapped_rect_);
            }
            pub inline fn unmap(self: *const T) HRESULT {
                return @as(*const ID2D1Bitmap1.VTable, @ptrCast(self.vtable)).Unmap(@as(*const ID2D1Bitmap1, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1ColorContext_Value = Guid.initString("1c4820bb-5771-4518-a581-2fe4dd0ec657");
pub const IID_ID2D1ColorContext = &IID_ID2D1ColorContext_Value;
pub const ID2D1ColorContext = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
        GetColorSpace: *const fn (
            self: *const ID2D1ColorContext,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_COLOR_SPACE,
        GetProfileSize: *const fn (
            self: *const ID2D1ColorContext,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetProfile: *const fn (
            self: *const ID2D1ColorContext,
            profile: [*:0]u8,
            profile_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
            pub inline fn getColorSpace(self: *const T) D2D1_COLOR_SPACE {
                return @as(*const ID2D1ColorContext.VTable, @ptrCast(self.vtable)).GetColorSpace(@as(*const ID2D1ColorContext, @ptrCast(self)));
            }
            pub inline fn getProfileSize(self: *const T) u32 {
                return @as(*const ID2D1ColorContext.VTable, @ptrCast(self.vtable)).GetProfileSize(@as(*const ID2D1ColorContext, @ptrCast(self)));
            }
            pub inline fn getProfile(self: *const T, profile_: [*:0]u8, profile_size_: u32) HRESULT {
                return @as(*const ID2D1ColorContext.VTable, @ptrCast(self.vtable)).GetProfile(@as(*const ID2D1ColorContext, @ptrCast(self)), profile_, profile_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1GradientStopCollection1_Value = Guid.initString("ae1572f4-5dd0-4777-998b-9279472ae63b");
pub const IID_ID2D1GradientStopCollection1 = &IID_ID2D1GradientStopCollection1_Value;
pub const ID2D1GradientStopCollection1 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1GradientStopCollection.VTable,
        GetGradientStops1: *const fn (
            self: *const ID2D1GradientStopCollection1,
            gradient_stops: [*]D2D1_GRADIENT_STOP,
            gradient_stops_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetPreInterpolationSpace: *const fn (
            self: *const ID2D1GradientStopCollection1,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_COLOR_SPACE,
        GetPostInterpolationSpace: *const fn (
            self: *const ID2D1GradientStopCollection1,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_COLOR_SPACE,
        GetBufferPrecision: *const fn (
            self: *const ID2D1GradientStopCollection1,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_BUFFER_PRECISION,
        GetColorInterpolationMode: *const fn (
            self: *const ID2D1GradientStopCollection1,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_COLOR_INTERPOLATION_MODE,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1GradientStopCollection.MethodMixin(T);
            pub inline fn getGradientStops1(self: *const T, gradient_stops_: [*]D2D1_GRADIENT_STOP, gradient_stops_count_: u32) void {
                return @as(*const ID2D1GradientStopCollection1.VTable, @ptrCast(self.vtable)).GetGradientStops1(@as(*const ID2D1GradientStopCollection1, @ptrCast(self)), gradient_stops_, gradient_stops_count_);
            }
            pub inline fn getPreInterpolationSpace(self: *const T) D2D1_COLOR_SPACE {
                return @as(*const ID2D1GradientStopCollection1.VTable, @ptrCast(self.vtable)).GetPreInterpolationSpace(@as(*const ID2D1GradientStopCollection1, @ptrCast(self)));
            }
            pub inline fn getPostInterpolationSpace(self: *const T) D2D1_COLOR_SPACE {
                return @as(*const ID2D1GradientStopCollection1.VTable, @ptrCast(self.vtable)).GetPostInterpolationSpace(@as(*const ID2D1GradientStopCollection1, @ptrCast(self)));
            }
            pub inline fn getBufferPrecision(self: *const T) D2D1_BUFFER_PRECISION {
                return @as(*const ID2D1GradientStopCollection1.VTable, @ptrCast(self.vtable)).GetBufferPrecision(@as(*const ID2D1GradientStopCollection1, @ptrCast(self)));
            }
            pub inline fn getColorInterpolationMode(self: *const T) D2D1_COLOR_INTERPOLATION_MODE {
                return @as(*const ID2D1GradientStopCollection1.VTable, @ptrCast(self.vtable)).GetColorInterpolationMode(@as(*const ID2D1GradientStopCollection1, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1DrawingStateBlock1_Value = Guid.initString("689f1f85-c72e-4e33-8f19-85754efd5ace");
pub const IID_ID2D1DrawingStateBlock1 = &IID_ID2D1DrawingStateBlock1_Value;
pub const ID2D1DrawingStateBlock1 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1DrawingStateBlock.VTable,
        GetDescription: *const fn (
            self: *const ID2D1DrawingStateBlock1,
            state_description: ?*D2D1_DRAWING_STATE_DESCRIPTION1,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetDescription: *const fn (
            self: *const ID2D1DrawingStateBlock1,
            state_description: ?*const D2D1_DRAWING_STATE_DESCRIPTION1,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1DrawingStateBlock.MethodMixin(T);
            pub inline fn getDescription(self: *const T, state_description_: ?*D2D1_DRAWING_STATE_DESCRIPTION1) void {
                return @as(*const ID2D1DrawingStateBlock1.VTable, @ptrCast(self.vtable)).GetDescription(@as(*const ID2D1DrawingStateBlock1, @ptrCast(self)), state_description_);
            }
            pub inline fn setDescription(self: *const T, state_description_: ?*const D2D1_DRAWING_STATE_DESCRIPTION1) void {
                return @as(*const ID2D1DrawingStateBlock1.VTable, @ptrCast(self.vtable)).SetDescription(@as(*const ID2D1DrawingStateBlock1, @ptrCast(self)), state_description_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1DeviceContext_Value = Guid.initString("e8f7fe7a-191c-466d-ad95-975678bda998");
pub const IID_ID2D1DeviceContext = &IID_ID2D1DeviceContext_Value;
pub const ID2D1DeviceContext = extern struct {
    pub const VTable = extern struct {
        base: ID2D1RenderTarget.VTable,
        CreateBitmap: *const fn (
            self: *const ID2D1DeviceContext,
            size: D2D_SIZE_U,
            source_data: ?*const anyopaque,
            pitch: u32,
            bitmap_properties: ?*const D2D1_BITMAP_PROPERTIES1,
            bitmap: ?*?*ID2D1Bitmap1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapFromWicBitmap: *const fn (
            self: *const ID2D1DeviceContext,
            wic_bitmap_source: ?*IWICBitmapSource,
            bitmap_properties: ?*const D2D1_BITMAP_PROPERTIES1,
            bitmap: ?*?*ID2D1Bitmap1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateColorContext: *const fn (
            self: *const ID2D1DeviceContext,
            space: D2D1_COLOR_SPACE,
            profile: ?[*:0]const u8,
            profile_size: u32,
            color_context: ?*?*ID2D1ColorContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateColorContextFromFilename: *const fn (
            self: *const ID2D1DeviceContext,
            filename: ?[*:0]const u16,
            color_context: ?*?*ID2D1ColorContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateColorContextFromWicColorContext: *const fn (
            self: *const ID2D1DeviceContext,
            wic_color_context: ?*IWICColorContext,
            color_context: ?*?*ID2D1ColorContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapFromDxgiSurface: *const fn (
            self: *const ID2D1DeviceContext,
            surface: ?*IDXGISurface,
            bitmap_properties: ?*const D2D1_BITMAP_PROPERTIES1,
            bitmap: ?*?*ID2D1Bitmap1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEffect: *const fn (
            self: *const ID2D1DeviceContext,
            effect_id: ?*const Guid,
            effect: ?*?*ID2D1Effect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGradientStopCollection: *const fn (
            self: *const ID2D1DeviceContext,
            straight_alpha_gradient_stops: [*]const D2D1_GRADIENT_STOP,
            straight_alpha_gradient_stops_count: u32,
            pre_interpolation_space: D2D1_COLOR_SPACE,
            post_interpolation_space: D2D1_COLOR_SPACE,
            buffer_precision: D2D1_BUFFER_PRECISION,
            extend_mode: D2D1_EXTEND_MODE,
            color_interpolation_mode: D2D1_COLOR_INTERPOLATION_MODE,
            gradient_stop_collection1: ?*?*ID2D1GradientStopCollection1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateImageBrush: *const fn (
            self: *const ID2D1DeviceContext,
            image: ?*ID2D1Image,
            image_brush_properties: ?*const D2D1_IMAGE_BRUSH_PROPERTIES,
            brush_properties: ?*const D2D1_BRUSH_PROPERTIES,
            image_brush: ?*?*ID2D1ImageBrush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapBrush: *const fn (
            self: *const ID2D1DeviceContext,
            bitmap: ?*ID2D1Bitmap,
            bitmap_brush_properties: ?*const D2D1_BITMAP_BRUSH_PROPERTIES1,
            brush_properties: ?*const D2D1_BRUSH_PROPERTIES,
            bitmap_brush: ?*?*ID2D1BitmapBrush1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCommandList: *const fn (
            self: *const ID2D1DeviceContext,
            command_list: ?*?*ID2D1CommandList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDxgiFormatSupported: *const fn (
            self: *const ID2D1DeviceContext,
            format: DXGI_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        IsBufferPrecisionSupported: *const fn (
            self: *const ID2D1DeviceContext,
            buffer_precision: D2D1_BUFFER_PRECISION,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetImageLocalBounds: *const fn (
            self: *const ID2D1DeviceContext,
            image: ?*ID2D1Image,
            local_bounds: ?*D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImageWorldBounds: *const fn (
            self: *const ID2D1DeviceContext,
            image: ?*ID2D1Image,
            world_bounds: ?*D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphRunWorldBounds: *const fn (
            self: *const ID2D1DeviceContext,
            baseline_origin: D2D_POINT_2F,
            glyph_run: ?*const DWRITE_GLYPH_RUN,
            measuring_mode: DWRITE_MEASURING_MODE,
            bounds: ?*D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDevice: *const fn (
            self: *const ID2D1DeviceContext,
            device: ?*?*ID2D1Device,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetTarget: *const fn (
            self: *const ID2D1DeviceContext,
            image: ?*ID2D1Image,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetTarget: *const fn (
            self: *const ID2D1DeviceContext,
            image: ?*?*ID2D1Image,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetRenderingControls: *const fn (
            self: *const ID2D1DeviceContext,
            rendering_controls: ?*const D2D1_RENDERING_CONTROLS,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetRenderingControls: *const fn (
            self: *const ID2D1DeviceContext,
            rendering_controls: ?*D2D1_RENDERING_CONTROLS,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetPrimitiveBlend: *const fn (
            self: *const ID2D1DeviceContext,
            primitive_blend: D2D1_PRIMITIVE_BLEND,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetPrimitiveBlend: *const fn (
            self: *const ID2D1DeviceContext,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_PRIMITIVE_BLEND,
        SetUnitMode: *const fn (
            self: *const ID2D1DeviceContext,
            unit_mode: D2D1_UNIT_MODE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetUnitMode: *const fn (
            self: *const ID2D1DeviceContext,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_UNIT_MODE,
        DrawGlyphRun: *const fn (
            self: *const ID2D1DeviceContext,
            baseline_origin: D2D_POINT_2F,
            glyph_run: ?*const DWRITE_GLYPH_RUN,
            glyph_run_description: ?*const DWRITE_GLYPH_RUN_DESCRIPTION,
            foreground_brush: ?*ID2D1Brush,
            measuring_mode: DWRITE_MEASURING_MODE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawImage: *const fn (
            self: *const ID2D1DeviceContext,
            image: ?*ID2D1Image,
            target_offset: ?*const D2D_POINT_2F,
            image_rectangle: ?*const D2D_RECT_F,
            interpolation_mode: D2D1_INTERPOLATION_MODE,
            composite_mode: D2D1_COMPOSITE_MODE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawGdiMetafile: *const fn (
            self: *const ID2D1DeviceContext,
            gdi_metafile: ?*ID2D1GdiMetafile,
            target_offset: ?*const D2D_POINT_2F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawBitmap: *const fn (
            self: *const ID2D1DeviceContext,
            bitmap: ?*ID2D1Bitmap,
            destination_rectangle: ?*const D2D_RECT_F,
            opacity: f32,
            interpolation_mode: D2D1_INTERPOLATION_MODE,
            source_rectangle: ?*const D2D_RECT_F,
            perspective_transform: ?*const D2D_MATRIX_4X4_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PushLayer: *const fn (
            self: *const ID2D1DeviceContext,
            layer_parameters: ?*const D2D1_LAYER_PARAMETERS1,
            layer: ?*ID2D1Layer,
        ) callconv(@import("std").os.windows.WINAPI) void,
        InvalidateEffectInputRectangle: *const fn (
            self: *const ID2D1DeviceContext,
            effect: ?*ID2D1Effect,
            input: u32,
            input_rectangle: ?*const D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectInvalidRectangleCount: *const fn (
            self: *const ID2D1DeviceContext,
            effect: ?*ID2D1Effect,
            rectangle_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectInvalidRectangles: *const fn (
            self: *const ID2D1DeviceContext,
            effect: ?*ID2D1Effect,
            rectangles: [*]D2D_RECT_F,
            rectangles_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectRequiredInputRectangles: *const fn (
            self: *const ID2D1DeviceContext,
            render_effect: ?*ID2D1Effect,
            render_image_rectangle: ?*const D2D_RECT_F,
            input_descriptions: [*]const D2D1_EFFECT_INPUT_DESCRIPTION,
            required_input_rects: [*]D2D_RECT_F,
            input_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FillOpacityMask: *const fn (
            self: *const ID2D1DeviceContext,
            opacity_mask: ?*ID2D1Bitmap,
            brush: ?*ID2D1Brush,
            destination_rectangle: ?*const D2D_RECT_F,
            source_rectangle: ?*const D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1RenderTarget.MethodMixin(T);
            pub inline fn createBitmap(self: *const T, size_: D2D_SIZE_U, source_data_: ?*const anyopaque, pitch_: u32, bitmap_properties_: ?*const D2D1_BITMAP_PROPERTIES1, bitmap_: ?*?*ID2D1Bitmap1) HRESULT {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).CreateBitmap(@as(*const ID2D1DeviceContext, @ptrCast(self)), size_, source_data_, pitch_, bitmap_properties_, bitmap_);
            }
            pub inline fn createBitmapFromWicBitmap(self: *const T, wic_bitmap_source_: ?*IWICBitmapSource, bitmap_properties_: ?*const D2D1_BITMAP_PROPERTIES1, bitmap_: ?*?*ID2D1Bitmap1) HRESULT {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).CreateBitmapFromWicBitmap(@as(*const ID2D1DeviceContext, @ptrCast(self)), wic_bitmap_source_, bitmap_properties_, bitmap_);
            }
            pub inline fn createColorContext(self: *const T, space_: D2D1_COLOR_SPACE, profile_: ?[*:0]const u8, profile_size_: u32, color_context_: ?*?*ID2D1ColorContext) HRESULT {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).CreateColorContext(@as(*const ID2D1DeviceContext, @ptrCast(self)), space_, profile_, profile_size_, color_context_);
            }
            pub inline fn createColorContextFromFilename(self: *const T, filename_: ?[*:0]const u16, color_context_: ?*?*ID2D1ColorContext) HRESULT {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).CreateColorContextFromFilename(@as(*const ID2D1DeviceContext, @ptrCast(self)), filename_, color_context_);
            }
            pub inline fn createColorContextFromWicColorContext(self: *const T, wic_color_context_: ?*IWICColorContext, color_context_: ?*?*ID2D1ColorContext) HRESULT {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).CreateColorContextFromWicColorContext(@as(*const ID2D1DeviceContext, @ptrCast(self)), wic_color_context_, color_context_);
            }
            pub inline fn createBitmapFromDxgiSurface(self: *const T, surface_: ?*IDXGISurface, bitmap_properties_: ?*const D2D1_BITMAP_PROPERTIES1, bitmap_: ?*?*ID2D1Bitmap1) HRESULT {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).CreateBitmapFromDxgiSurface(@as(*const ID2D1DeviceContext, @ptrCast(self)), surface_, bitmap_properties_, bitmap_);
            }
            pub inline fn createEffect(self: *const T, effect_id_: ?*const Guid, effect_: ?*?*ID2D1Effect) HRESULT {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).CreateEffect(@as(*const ID2D1DeviceContext, @ptrCast(self)), effect_id_, effect_);
            }
            pub inline fn createGradientStopCollection(self: *const T, straight_alpha_gradient_stops_: [*]const D2D1_GRADIENT_STOP, straight_alpha_gradient_stops_count_: u32, pre_interpolation_space_: D2D1_COLOR_SPACE, post_interpolation_space_: D2D1_COLOR_SPACE, buffer_precision_: D2D1_BUFFER_PRECISION, extend_mode_: D2D1_EXTEND_MODE, color_interpolation_mode_: D2D1_COLOR_INTERPOLATION_MODE, gradient_stop_collection1_: ?*?*ID2D1GradientStopCollection1) HRESULT {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).CreateGradientStopCollection(@as(*const ID2D1DeviceContext, @ptrCast(self)), straight_alpha_gradient_stops_, straight_alpha_gradient_stops_count_, pre_interpolation_space_, post_interpolation_space_, buffer_precision_, extend_mode_, color_interpolation_mode_, gradient_stop_collection1_);
            }
            pub inline fn createImageBrush(self: *const T, image_: ?*ID2D1Image, image_brush_properties_: ?*const D2D1_IMAGE_BRUSH_PROPERTIES, brush_properties_: ?*const D2D1_BRUSH_PROPERTIES, image_brush_: ?*?*ID2D1ImageBrush) HRESULT {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).CreateImageBrush(@as(*const ID2D1DeviceContext, @ptrCast(self)), image_, image_brush_properties_, brush_properties_, image_brush_);
            }
            pub inline fn createBitmapBrush(self: *const T, bitmap_: ?*ID2D1Bitmap, bitmap_brush_properties_: ?*const D2D1_BITMAP_BRUSH_PROPERTIES1, brush_properties_: ?*const D2D1_BRUSH_PROPERTIES, bitmap_brush_: ?*?*ID2D1BitmapBrush1) HRESULT {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).CreateBitmapBrush(@as(*const ID2D1DeviceContext, @ptrCast(self)), bitmap_, bitmap_brush_properties_, brush_properties_, bitmap_brush_);
            }
            pub inline fn createCommandList(self: *const T, command_list_: ?*?*ID2D1CommandList) HRESULT {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).CreateCommandList(@as(*const ID2D1DeviceContext, @ptrCast(self)), command_list_);
            }
            pub inline fn isDxgiFormatSupported(self: *const T, format_: DXGI_FORMAT) BOOL {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).IsDxgiFormatSupported(@as(*const ID2D1DeviceContext, @ptrCast(self)), format_);
            }
            pub inline fn isBufferPrecisionSupported(self: *const T, buffer_precision_: D2D1_BUFFER_PRECISION) BOOL {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).IsBufferPrecisionSupported(@as(*const ID2D1DeviceContext, @ptrCast(self)), buffer_precision_);
            }
            pub inline fn getImageLocalBounds(self: *const T, image_: ?*ID2D1Image, local_bounds_: ?*D2D_RECT_F) HRESULT {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).GetImageLocalBounds(@as(*const ID2D1DeviceContext, @ptrCast(self)), image_, local_bounds_);
            }
            pub inline fn getImageWorldBounds(self: *const T, image_: ?*ID2D1Image, world_bounds_: ?*D2D_RECT_F) HRESULT {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).GetImageWorldBounds(@as(*const ID2D1DeviceContext, @ptrCast(self)), image_, world_bounds_);
            }
            pub inline fn getGlyphRunWorldBounds(self: *const T, baseline_origin_: D2D_POINT_2F, glyph_run_: ?*const DWRITE_GLYPH_RUN, measuring_mode_: DWRITE_MEASURING_MODE, bounds_: ?*D2D_RECT_F) HRESULT {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).GetGlyphRunWorldBounds(@as(*const ID2D1DeviceContext, @ptrCast(self)), baseline_origin_, glyph_run_, measuring_mode_, bounds_);
            }
            pub inline fn getDevice(self: *const T, device_: ?*?*ID2D1Device) void {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).GetDevice(@as(*const ID2D1DeviceContext, @ptrCast(self)), device_);
            }
            pub inline fn setTarget(self: *const T, image_: ?*ID2D1Image) void {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).SetTarget(@as(*const ID2D1DeviceContext, @ptrCast(self)), image_);
            }
            pub inline fn getTarget(self: *const T, image_: ?*?*ID2D1Image) void {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).GetTarget(@as(*const ID2D1DeviceContext, @ptrCast(self)), image_);
            }
            pub inline fn setRenderingControls(self: *const T, rendering_controls_: ?*const D2D1_RENDERING_CONTROLS) void {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).SetRenderingControls(@as(*const ID2D1DeviceContext, @ptrCast(self)), rendering_controls_);
            }
            pub inline fn getRenderingControls(self: *const T, rendering_controls_: ?*D2D1_RENDERING_CONTROLS) void {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).GetRenderingControls(@as(*const ID2D1DeviceContext, @ptrCast(self)), rendering_controls_);
            }
            pub inline fn setPrimitiveBlend(self: *const T, primitive_blend_: D2D1_PRIMITIVE_BLEND) void {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).SetPrimitiveBlend(@as(*const ID2D1DeviceContext, @ptrCast(self)), primitive_blend_);
            }
            pub inline fn getPrimitiveBlend(self: *const T) D2D1_PRIMITIVE_BLEND {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).GetPrimitiveBlend(@as(*const ID2D1DeviceContext, @ptrCast(self)));
            }
            pub inline fn setUnitMode(self: *const T, unit_mode_: D2D1_UNIT_MODE) void {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).SetUnitMode(@as(*const ID2D1DeviceContext, @ptrCast(self)), unit_mode_);
            }
            pub inline fn getUnitMode(self: *const T) D2D1_UNIT_MODE {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).GetUnitMode(@as(*const ID2D1DeviceContext, @ptrCast(self)));
            }
            pub inline fn drawGlyphRun(self: *const T, baseline_origin_: D2D_POINT_2F, glyph_run_: ?*const DWRITE_GLYPH_RUN, glyph_run_description_: ?*const DWRITE_GLYPH_RUN_DESCRIPTION, foreground_brush_: ?*ID2D1Brush, measuring_mode_: DWRITE_MEASURING_MODE) void {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).DrawGlyphRun(@as(*const ID2D1DeviceContext, @ptrCast(self)), baseline_origin_, glyph_run_, glyph_run_description_, foreground_brush_, measuring_mode_);
            }
            pub inline fn drawImage(self: *const T, image_: ?*ID2D1Image, target_offset_: ?*const D2D_POINT_2F, image_rectangle_: ?*const D2D_RECT_F, interpolation_mode_: D2D1_INTERPOLATION_MODE, composite_mode_: D2D1_COMPOSITE_MODE) void {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).DrawImage(@as(*const ID2D1DeviceContext, @ptrCast(self)), image_, target_offset_, image_rectangle_, interpolation_mode_, composite_mode_);
            }
            pub inline fn drawGdiMetafile(self: *const T, gdi_metafile_: ?*ID2D1GdiMetafile, target_offset_: ?*const D2D_POINT_2F) void {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).DrawGdiMetafile(@as(*const ID2D1DeviceContext, @ptrCast(self)), gdi_metafile_, target_offset_);
            }
            pub inline fn drawBitmap(self: *const T, bitmap_: ?*ID2D1Bitmap, destination_rectangle_: ?*const D2D_RECT_F, opacity_: f32, interpolation_mode_: D2D1_INTERPOLATION_MODE, source_rectangle_: ?*const D2D_RECT_F, perspective_transform_: ?*const D2D_MATRIX_4X4_F) void {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).DrawBitmap(@as(*const ID2D1DeviceContext, @ptrCast(self)), bitmap_, destination_rectangle_, opacity_, interpolation_mode_, source_rectangle_, perspective_transform_);
            }
            pub inline fn pushLayer(self: *const T, layer_parameters_: ?*const D2D1_LAYER_PARAMETERS1, layer_: ?*ID2D1Layer) void {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).PushLayer(@as(*const ID2D1DeviceContext, @ptrCast(self)), layer_parameters_, layer_);
            }
            pub inline fn invalidateEffectInputRectangle(self: *const T, effect_: ?*ID2D1Effect, input_: u32, input_rectangle_: ?*const D2D_RECT_F) HRESULT {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).InvalidateEffectInputRectangle(@as(*const ID2D1DeviceContext, @ptrCast(self)), effect_, input_, input_rectangle_);
            }
            pub inline fn getEffectInvalidRectangleCount(self: *const T, effect_: ?*ID2D1Effect, rectangle_count_: ?*u32) HRESULT {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).GetEffectInvalidRectangleCount(@as(*const ID2D1DeviceContext, @ptrCast(self)), effect_, rectangle_count_);
            }
            pub inline fn getEffectInvalidRectangles(self: *const T, effect_: ?*ID2D1Effect, rectangles_: [*]D2D_RECT_F, rectangles_count_: u32) HRESULT {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).GetEffectInvalidRectangles(@as(*const ID2D1DeviceContext, @ptrCast(self)), effect_, rectangles_, rectangles_count_);
            }
            pub inline fn getEffectRequiredInputRectangles(self: *const T, render_effect_: ?*ID2D1Effect, render_image_rectangle_: ?*const D2D_RECT_F, input_descriptions_: [*]const D2D1_EFFECT_INPUT_DESCRIPTION, required_input_rects_: [*]D2D_RECT_F, input_count_: u32) HRESULT {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).GetEffectRequiredInputRectangles(@as(*const ID2D1DeviceContext, @ptrCast(self)), render_effect_, render_image_rectangle_, input_descriptions_, required_input_rects_, input_count_);
            }
            pub inline fn fillOpacityMask(self: *const T, opacity_mask_: ?*ID2D1Bitmap, brush_: ?*ID2D1Brush, destination_rectangle_: ?*const D2D_RECT_F, source_rectangle_: ?*const D2D_RECT_F) void {
                return @as(*const ID2D1DeviceContext.VTable, @ptrCast(self.vtable)).FillOpacityMask(@as(*const ID2D1DeviceContext, @ptrCast(self)), opacity_mask_, brush_, destination_rectangle_, source_rectangle_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1Device_Value = Guid.initString("47dd575d-ac05-4cdd-8049-9b02cd16f44c");
pub const IID_ID2D1Device = &IID_ID2D1Device_Value;
pub const ID2D1Device = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
        CreateDeviceContext: *const fn (
            self: *const ID2D1Device,
            options: D2D1_DEVICE_CONTEXT_OPTIONS,
            device_context: ?*?*ID2D1DeviceContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePrintControl: *const fn (
            self: *const ID2D1Device,
            wic_factory: ?*IWICImagingFactory,
            document_target: ?*IPrintDocumentPackageTarget,
            print_control_properties: ?*const D2D1_PRINT_CONTROL_PROPERTIES,
            print_control: ?*?*ID2D1PrintControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaximumTextureMemory: *const fn (
            self: *const ID2D1Device,
            maximum_in_bytes: u64,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetMaximumTextureMemory: *const fn (
            self: *const ID2D1Device,
        ) callconv(@import("std").os.windows.WINAPI) u64,
        ClearResources: *const fn (
            self: *const ID2D1Device,
            milliseconds_since_use: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
            pub inline fn createDeviceContext(self: *const T, options_: D2D1_DEVICE_CONTEXT_OPTIONS, device_context_: ?*?*ID2D1DeviceContext) HRESULT {
                return @as(*const ID2D1Device.VTable, @ptrCast(self.vtable)).CreateDeviceContext(@as(*const ID2D1Device, @ptrCast(self)), options_, device_context_);
            }
            pub inline fn createPrintControl(self: *const T, wic_factory_: ?*IWICImagingFactory, document_target_: ?*IPrintDocumentPackageTarget, print_control_properties_: ?*const D2D1_PRINT_CONTROL_PROPERTIES, print_control_: ?*?*ID2D1PrintControl) HRESULT {
                return @as(*const ID2D1Device.VTable, @ptrCast(self.vtable)).CreatePrintControl(@as(*const ID2D1Device, @ptrCast(self)), wic_factory_, document_target_, print_control_properties_, print_control_);
            }
            pub inline fn setMaximumTextureMemory(self: *const T, maximum_in_bytes_: u64) void {
                return @as(*const ID2D1Device.VTable, @ptrCast(self.vtable)).SetMaximumTextureMemory(@as(*const ID2D1Device, @ptrCast(self)), maximum_in_bytes_);
            }
            pub inline fn getMaximumTextureMemory(self: *const T) u64 {
                return @as(*const ID2D1Device.VTable, @ptrCast(self.vtable)).GetMaximumTextureMemory(@as(*const ID2D1Device, @ptrCast(self)));
            }
            pub inline fn clearResources(self: *const T, milliseconds_since_use_: u32) void {
                return @as(*const ID2D1Device.VTable, @ptrCast(self.vtable)).ClearResources(@as(*const ID2D1Device, @ptrCast(self)), milliseconds_since_use_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1Factory1_Value = Guid.initString("bb12d362-daee-4b9a-aa1d-14ba401cfa1f");
pub const IID_ID2D1Factory1 = &IID_ID2D1Factory1_Value;
pub const ID2D1Factory1 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Factory.VTable,
        CreateDevice: *const fn (
            self: *const ID2D1Factory1,
            dxgi_device: ?*IDXGIDevice,
            d2d_device: ?*?*ID2D1Device,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStrokeStyle: *const fn (
            self: *const ID2D1Factory1,
            stroke_style_properties: ?*const D2D1_STROKE_STYLE_PROPERTIES1,
            dashes: ?[*]const f32,
            dashes_count: u32,
            stroke_style: ?*?*ID2D1StrokeStyle1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePathGeometry: *const fn (
            self: *const ID2D1Factory1,
            path_geometry: ?*?*ID2D1PathGeometry1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDrawingStateBlock: *const fn (
            self: *const ID2D1Factory1,
            drawing_state_description: ?*const D2D1_DRAWING_STATE_DESCRIPTION1,
            text_rendering_params: ?*IDWriteRenderingParams,
            drawing_state_block: ?*?*ID2D1DrawingStateBlock1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGdiMetafile: *const fn (
            self: *const ID2D1Factory1,
            metafile_stream: ?*IStream,
            metafile: ?*?*ID2D1GdiMetafile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterEffectFromStream: *const fn (
            self: *const ID2D1Factory1,
            class_id: ?*const Guid,
            property_xml: ?*IStream,
            bindings: ?[*]const D2D1_PROPERTY_BINDING,
            bindings_count: u32,
            effect_factory: ?PD2D1_EFFECT_FACTORY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterEffectFromString: *const fn (
            self: *const ID2D1Factory1,
            class_id: ?*const Guid,
            property_xml: ?[*:0]const u16,
            bindings: ?[*]const D2D1_PROPERTY_BINDING,
            bindings_count: u32,
            effect_factory: ?PD2D1_EFFECT_FACTORY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterEffect: *const fn (
            self: *const ID2D1Factory1,
            class_id: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegisteredEffects: *const fn (
            self: *const ID2D1Factory1,
            effects: ?[*]Guid,
            effects_count: u32,
            effects_returned: ?*u32,
            effects_registered: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEffectProperties: *const fn (
            self: *const ID2D1Factory1,
            effect_id: ?*const Guid,
            properties: ?*?*ID2D1Properties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Factory.MethodMixin(T);
            pub inline fn createDevice(self: *const T, dxgi_device_: ?*IDXGIDevice, d2d_device_: ?*?*ID2D1Device) HRESULT {
                return @as(*const ID2D1Factory1.VTable, @ptrCast(self.vtable)).CreateDevice(@as(*const ID2D1Factory1, @ptrCast(self)), dxgi_device_, d2d_device_);
            }
            pub inline fn createStrokeStyle(self: *const T, stroke_style_properties_: ?*const D2D1_STROKE_STYLE_PROPERTIES1, dashes_: ?[*]const f32, dashes_count_: u32, stroke_style_: ?*?*ID2D1StrokeStyle1) HRESULT {
                return @as(*const ID2D1Factory1.VTable, @ptrCast(self.vtable)).CreateStrokeStyle(@as(*const ID2D1Factory1, @ptrCast(self)), stroke_style_properties_, dashes_, dashes_count_, stroke_style_);
            }
            pub inline fn createPathGeometry(self: *const T, path_geometry_: ?*?*ID2D1PathGeometry1) HRESULT {
                return @as(*const ID2D1Factory1.VTable, @ptrCast(self.vtable)).CreatePathGeometry(@as(*const ID2D1Factory1, @ptrCast(self)), path_geometry_);
            }
            pub inline fn createDrawingStateBlock(self: *const T, drawing_state_description_: ?*const D2D1_DRAWING_STATE_DESCRIPTION1, text_rendering_params_: ?*IDWriteRenderingParams, drawing_state_block_: ?*?*ID2D1DrawingStateBlock1) HRESULT {
                return @as(*const ID2D1Factory1.VTable, @ptrCast(self.vtable)).CreateDrawingStateBlock(@as(*const ID2D1Factory1, @ptrCast(self)), drawing_state_description_, text_rendering_params_, drawing_state_block_);
            }
            pub inline fn createGdiMetafile(self: *const T, metafile_stream_: ?*IStream, metafile_: ?*?*ID2D1GdiMetafile) HRESULT {
                return @as(*const ID2D1Factory1.VTable, @ptrCast(self.vtable)).CreateGdiMetafile(@as(*const ID2D1Factory1, @ptrCast(self)), metafile_stream_, metafile_);
            }
            pub inline fn registerEffectFromStream(self: *const T, class_id_: ?*const Guid, property_xml_: ?*IStream, bindings_: ?[*]const D2D1_PROPERTY_BINDING, bindings_count_: u32, effect_factory_: ?PD2D1_EFFECT_FACTORY) HRESULT {
                return @as(*const ID2D1Factory1.VTable, @ptrCast(self.vtable)).RegisterEffectFromStream(@as(*const ID2D1Factory1, @ptrCast(self)), class_id_, property_xml_, bindings_, bindings_count_, effect_factory_);
            }
            pub inline fn registerEffectFromString(self: *const T, class_id_: ?*const Guid, property_xml_: ?[*:0]const u16, bindings_: ?[*]const D2D1_PROPERTY_BINDING, bindings_count_: u32, effect_factory_: ?PD2D1_EFFECT_FACTORY) HRESULT {
                return @as(*const ID2D1Factory1.VTable, @ptrCast(self.vtable)).RegisterEffectFromString(@as(*const ID2D1Factory1, @ptrCast(self)), class_id_, property_xml_, bindings_, bindings_count_, effect_factory_);
            }
            pub inline fn unregisterEffect(self: *const T, class_id_: ?*const Guid) HRESULT {
                return @as(*const ID2D1Factory1.VTable, @ptrCast(self.vtable)).UnregisterEffect(@as(*const ID2D1Factory1, @ptrCast(self)), class_id_);
            }
            pub inline fn getRegisteredEffects(self: *const T, effects_: ?[*]Guid, effects_count_: u32, effects_returned_: ?*u32, effects_registered_: ?*u32) HRESULT {
                return @as(*const ID2D1Factory1.VTable, @ptrCast(self.vtable)).GetRegisteredEffects(@as(*const ID2D1Factory1, @ptrCast(self)), effects_, effects_count_, effects_returned_, effects_registered_);
            }
            pub inline fn getEffectProperties(self: *const T, effect_id_: ?*const Guid, properties_: ?*?*ID2D1Properties) HRESULT {
                return @as(*const ID2D1Factory1.VTable, @ptrCast(self.vtable)).GetEffectProperties(@as(*const ID2D1Factory1, @ptrCast(self)), effect_id_, properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1Multithread_Value = Guid.initString("31e6e7bc-e0ff-4d46-8c64-a0a8c41c15d3");
pub const IID_ID2D1Multithread = &IID_ID2D1Multithread_Value;
pub const ID2D1Multithread = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMultithreadProtected: *const fn (
            self: *const ID2D1Multithread,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        Enter: *const fn (
            self: *const ID2D1Multithread,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Leave: *const fn (
            self: *const ID2D1Multithread,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getMultithreadProtected(self: *const T) BOOL {
                return @as(*const ID2D1Multithread.VTable, @ptrCast(self.vtable)).GetMultithreadProtected(@as(*const ID2D1Multithread, @ptrCast(self)));
            }
            pub inline fn enter(self: *const T) void {
                return @as(*const ID2D1Multithread.VTable, @ptrCast(self.vtable)).Enter(@as(*const ID2D1Multithread, @ptrCast(self)));
            }
            pub inline fn leave(self: *const T) void {
                return @as(*const ID2D1Multithread.VTable, @ptrCast(self.vtable)).Leave(@as(*const ID2D1Multithread, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const Matrix4x3F = extern struct {
    __AnonymousBase_d2d1_1helper_L45_C31: D2D_MATRIX_4X3_F,
};

pub const Matrix4x4F = extern struct {
    __AnonymousBase_d2d1_1helper_L97_C31: D2D_MATRIX_4X4_F,
};

pub const Matrix5x4F = extern struct {
    __AnonymousBase_d2d1_1helper_L472_C31: D2D_MATRIX_5X4_F,
};

pub const PD2D1_PROPERTY_SET_FUNCTION = *const fn (
    effect: ?*IUnknown,
    data: [*:0]const u8,
    data_size: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PD2D1_PROPERTY_GET_FUNCTION = *const fn (
    effect: ?*IUnknown,
    data: ?[*:0]u8,
    data_size: u32,
    actual_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const D2D1_CHANGE_TYPE = enum(u32) {
    NONE = 0,
    PROPERTIES = 1,
    CONTEXT = 2,
    GRAPH = 3,
    FORCE_DWORD = 4294967295,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        PROPERTIES: u1 = 0,
        CONTEXT: u1 = 0,
        GRAPH: u1 = 0,
        FORCE_DWORD: u1 = 0,
    }) D2D1_CHANGE_TYPE {
        return @as(D2D1_CHANGE_TYPE, @enumFromInt((if (o.NONE == 1) @intFromEnum(D2D1_CHANGE_TYPE.NONE) else 0) | (if (o.PROPERTIES == 1) @intFromEnum(D2D1_CHANGE_TYPE.PROPERTIES) else 0) | (if (o.CONTEXT == 1) @intFromEnum(D2D1_CHANGE_TYPE.CONTEXT) else 0) | (if (o.GRAPH == 1) @intFromEnum(D2D1_CHANGE_TYPE.GRAPH) else 0) | (if (o.FORCE_DWORD == 1) @intFromEnum(D2D1_CHANGE_TYPE.FORCE_DWORD) else 0)));
    }
};
pub const D2D1_CHANGE_TYPE_NONE = D2D1_CHANGE_TYPE.NONE;
pub const D2D1_CHANGE_TYPE_PROPERTIES = D2D1_CHANGE_TYPE.PROPERTIES;
pub const D2D1_CHANGE_TYPE_CONTEXT = D2D1_CHANGE_TYPE.CONTEXT;
pub const D2D1_CHANGE_TYPE_GRAPH = D2D1_CHANGE_TYPE.GRAPH;
pub const D2D1_CHANGE_TYPE_FORCE_DWORD = D2D1_CHANGE_TYPE.FORCE_DWORD;

pub const D2D1_PIXEL_OPTIONS = enum(u32) {
    NONE = 0,
    TRIVIAL_SAMPLING = 1,
    FORCE_DWORD = 4294967295,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        TRIVIAL_SAMPLING: u1 = 0,
        FORCE_DWORD: u1 = 0,
    }) D2D1_PIXEL_OPTIONS {
        return @as(D2D1_PIXEL_OPTIONS, @enumFromInt((if (o.NONE == 1) @intFromEnum(D2D1_PIXEL_OPTIONS.NONE) else 0) | (if (o.TRIVIAL_SAMPLING == 1) @intFromEnum(D2D1_PIXEL_OPTIONS.TRIVIAL_SAMPLING) else 0) | (if (o.FORCE_DWORD == 1) @intFromEnum(D2D1_PIXEL_OPTIONS.FORCE_DWORD) else 0)));
    }
};
pub const D2D1_PIXEL_OPTIONS_NONE = D2D1_PIXEL_OPTIONS.NONE;
pub const D2D1_PIXEL_OPTIONS_TRIVIAL_SAMPLING = D2D1_PIXEL_OPTIONS.TRIVIAL_SAMPLING;
pub const D2D1_PIXEL_OPTIONS_FORCE_DWORD = D2D1_PIXEL_OPTIONS.FORCE_DWORD;

pub const D2D1_VERTEX_OPTIONS = enum(u32) {
    NONE = 0,
    DO_NOT_CLEAR = 1,
    USE_DEPTH_BUFFER = 2,
    ASSUME_NO_OVERLAP = 4,
    FORCE_DWORD = 4294967295,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        DO_NOT_CLEAR: u1 = 0,
        USE_DEPTH_BUFFER: u1 = 0,
        ASSUME_NO_OVERLAP: u1 = 0,
        FORCE_DWORD: u1 = 0,
    }) D2D1_VERTEX_OPTIONS {
        return @as(D2D1_VERTEX_OPTIONS, @enumFromInt((if (o.NONE == 1) @intFromEnum(D2D1_VERTEX_OPTIONS.NONE) else 0) | (if (o.DO_NOT_CLEAR == 1) @intFromEnum(D2D1_VERTEX_OPTIONS.DO_NOT_CLEAR) else 0) | (if (o.USE_DEPTH_BUFFER == 1) @intFromEnum(D2D1_VERTEX_OPTIONS.USE_DEPTH_BUFFER) else 0) | (if (o.ASSUME_NO_OVERLAP == 1) @intFromEnum(D2D1_VERTEX_OPTIONS.ASSUME_NO_OVERLAP) else 0) | (if (o.FORCE_DWORD == 1) @intFromEnum(D2D1_VERTEX_OPTIONS.FORCE_DWORD) else 0)));
    }
};
pub const D2D1_VERTEX_OPTIONS_NONE = D2D1_VERTEX_OPTIONS.NONE;
pub const D2D1_VERTEX_OPTIONS_DO_NOT_CLEAR = D2D1_VERTEX_OPTIONS.DO_NOT_CLEAR;
pub const D2D1_VERTEX_OPTIONS_USE_DEPTH_BUFFER = D2D1_VERTEX_OPTIONS.USE_DEPTH_BUFFER;
pub const D2D1_VERTEX_OPTIONS_ASSUME_NO_OVERLAP = D2D1_VERTEX_OPTIONS.ASSUME_NO_OVERLAP;
pub const D2D1_VERTEX_OPTIONS_FORCE_DWORD = D2D1_VERTEX_OPTIONS.FORCE_DWORD;

pub const D2D1_VERTEX_USAGE = enum(u32) {
    STATIC = 0,
    DYNAMIC = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_VERTEX_USAGE_STATIC = D2D1_VERTEX_USAGE.STATIC;
pub const D2D1_VERTEX_USAGE_DYNAMIC = D2D1_VERTEX_USAGE.DYNAMIC;
pub const D2D1_VERTEX_USAGE_FORCE_DWORD = D2D1_VERTEX_USAGE.FORCE_DWORD;

pub const D2D1_BLEND_OPERATION = enum(u32) {
    ADD = 1,
    SUBTRACT = 2,
    REV_SUBTRACT = 3,
    MIN = 4,
    MAX = 5,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_BLEND_OPERATION_ADD = D2D1_BLEND_OPERATION.ADD;
pub const D2D1_BLEND_OPERATION_SUBTRACT = D2D1_BLEND_OPERATION.SUBTRACT;
pub const D2D1_BLEND_OPERATION_REV_SUBTRACT = D2D1_BLEND_OPERATION.REV_SUBTRACT;
pub const D2D1_BLEND_OPERATION_MIN = D2D1_BLEND_OPERATION.MIN;
pub const D2D1_BLEND_OPERATION_MAX = D2D1_BLEND_OPERATION.MAX;
pub const D2D1_BLEND_OPERATION_FORCE_DWORD = D2D1_BLEND_OPERATION.FORCE_DWORD;

pub const D2D1_BLEND = enum(u32) {
    ZERO = 1,
    ONE = 2,
    SRC_COLOR = 3,
    INV_SRC_COLOR = 4,
    SRC_ALPHA = 5,
    INV_SRC_ALPHA = 6,
    DEST_ALPHA = 7,
    INV_DEST_ALPHA = 8,
    DEST_COLOR = 9,
    INV_DEST_COLOR = 10,
    SRC_ALPHA_SAT = 11,
    BLEND_FACTOR = 14,
    INV_BLEND_FACTOR = 15,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_BLEND_ZERO = D2D1_BLEND.ZERO;
pub const D2D1_BLEND_ONE = D2D1_BLEND.ONE;
pub const D2D1_BLEND_SRC_COLOR = D2D1_BLEND.SRC_COLOR;
pub const D2D1_BLEND_INV_SRC_COLOR = D2D1_BLEND.INV_SRC_COLOR;
pub const D2D1_BLEND_SRC_ALPHA = D2D1_BLEND.SRC_ALPHA;
pub const D2D1_BLEND_INV_SRC_ALPHA = D2D1_BLEND.INV_SRC_ALPHA;
pub const D2D1_BLEND_DEST_ALPHA = D2D1_BLEND.DEST_ALPHA;
pub const D2D1_BLEND_INV_DEST_ALPHA = D2D1_BLEND.INV_DEST_ALPHA;
pub const D2D1_BLEND_DEST_COLOR = D2D1_BLEND.DEST_COLOR;
pub const D2D1_BLEND_INV_DEST_COLOR = D2D1_BLEND.INV_DEST_COLOR;
pub const D2D1_BLEND_SRC_ALPHA_SAT = D2D1_BLEND.SRC_ALPHA_SAT;
pub const D2D1_BLEND_BLEND_FACTOR = D2D1_BLEND.BLEND_FACTOR;
pub const D2D1_BLEND_INV_BLEND_FACTOR = D2D1_BLEND.INV_BLEND_FACTOR;
pub const D2D1_BLEND_FORCE_DWORD = D2D1_BLEND.FORCE_DWORD;

pub const D2D1_CHANNEL_DEPTH = enum(u32) {
    DEFAULT = 0,
    @"1" = 1,
    @"4" = 4,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_CHANNEL_DEPTH_DEFAULT = D2D1_CHANNEL_DEPTH.DEFAULT;
pub const D2D1_CHANNEL_DEPTH_1 = D2D1_CHANNEL_DEPTH.@"1";
pub const D2D1_CHANNEL_DEPTH_4 = D2D1_CHANNEL_DEPTH.@"4";
pub const D2D1_CHANNEL_DEPTH_FORCE_DWORD = D2D1_CHANNEL_DEPTH.FORCE_DWORD;

pub const D2D1_FILTER = enum(u32) {
    MIN_MAG_MIP_POINT = 0,
    MIN_MAG_POINT_MIP_LINEAR = 1,
    MIN_POINT_MAG_LINEAR_MIP_POINT = 4,
    MIN_POINT_MAG_MIP_LINEAR = 5,
    MIN_LINEAR_MAG_MIP_POINT = 16,
    MIN_LINEAR_MAG_POINT_MIP_LINEAR = 17,
    MIN_MAG_LINEAR_MIP_POINT = 20,
    MIN_MAG_MIP_LINEAR = 21,
    ANISOTROPIC = 85,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_FILTER_MIN_MAG_MIP_POINT = D2D1_FILTER.MIN_MAG_MIP_POINT;
pub const D2D1_FILTER_MIN_MAG_POINT_MIP_LINEAR = D2D1_FILTER.MIN_MAG_POINT_MIP_LINEAR;
pub const D2D1_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = D2D1_FILTER.MIN_POINT_MAG_LINEAR_MIP_POINT;
pub const D2D1_FILTER_MIN_POINT_MAG_MIP_LINEAR = D2D1_FILTER.MIN_POINT_MAG_MIP_LINEAR;
pub const D2D1_FILTER_MIN_LINEAR_MAG_MIP_POINT = D2D1_FILTER.MIN_LINEAR_MAG_MIP_POINT;
pub const D2D1_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = D2D1_FILTER.MIN_LINEAR_MAG_POINT_MIP_LINEAR;
pub const D2D1_FILTER_MIN_MAG_LINEAR_MIP_POINT = D2D1_FILTER.MIN_MAG_LINEAR_MIP_POINT;
pub const D2D1_FILTER_MIN_MAG_MIP_LINEAR = D2D1_FILTER.MIN_MAG_MIP_LINEAR;
pub const D2D1_FILTER_ANISOTROPIC = D2D1_FILTER.ANISOTROPIC;
pub const D2D1_FILTER_FORCE_DWORD = D2D1_FILTER.FORCE_DWORD;

pub const D2D1_FEATURE = enum(u32) {
    DOUBLES = 0,
    D3D10_X_HARDWARE_OPTIONS = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_FEATURE_DOUBLES = D2D1_FEATURE.DOUBLES;
pub const D2D1_FEATURE_D3D10_X_HARDWARE_OPTIONS = D2D1_FEATURE.D3D10_X_HARDWARE_OPTIONS;
pub const D2D1_FEATURE_FORCE_DWORD = D2D1_FEATURE.FORCE_DWORD;

pub const D2D1_PROPERTY_BINDING = extern struct {
    propertyName: ?[*:0]const u16,
    setFunction: ?PD2D1_PROPERTY_SET_FUNCTION,
    getFunction: ?PD2D1_PROPERTY_GET_FUNCTION,
};

pub const D2D1_RESOURCE_TEXTURE_PROPERTIES = extern struct {
    extents: ?*const u32,
    dimensions: u32,
    bufferPrecision: D2D1_BUFFER_PRECISION,
    channelDepth: D2D1_CHANNEL_DEPTH,
    filter: D2D1_FILTER,
    extendModes: ?*const D2D1_EXTEND_MODE,
};

pub const D2D1_INPUT_ELEMENT_DESC = extern struct {
    semanticName: ?[*:0]const u8,
    semanticIndex: u32,
    format: DXGI_FORMAT,
    inputSlot: u32,
    alignedByteOffset: u32,
};

pub const D2D1_VERTEX_BUFFER_PROPERTIES = extern struct {
    inputCount: u32,
    usage: D2D1_VERTEX_USAGE,
    data: ?*const u8,
    byteWidth: u32,
};

pub const D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES = extern struct {
    shaderBufferWithInputSignature: ?*const u8,
    shaderBufferSize: u32,
    inputElements: ?*const D2D1_INPUT_ELEMENT_DESC,
    elementCount: u32,
    stride: u32,
};

pub const D2D1_VERTEX_RANGE = extern struct {
    startVertex: u32,
    vertexCount: u32,
};

pub const D2D1_BLEND_DESCRIPTION = extern struct {
    sourceBlend: D2D1_BLEND,
    destinationBlend: D2D1_BLEND,
    blendOperation: D2D1_BLEND_OPERATION,
    sourceBlendAlpha: D2D1_BLEND,
    destinationBlendAlpha: D2D1_BLEND,
    blendOperationAlpha: D2D1_BLEND_OPERATION,
    blendFactor: [4]f32,
};

pub const D2D1_INPUT_DESCRIPTION = extern struct {
    filter: D2D1_FILTER,
    levelOfDetailCount: u32,
};

pub const D2D1_FEATURE_DATA_DOUBLES = extern struct {
    doublePrecisionFloatShaderOps: BOOL,
};

pub const D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS = extern struct {
    computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x: BOOL,
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1VertexBuffer_Value = Guid.initString("9b8b1336-00a5-4668-92b7-ced5d8bf9b7b");
pub const IID_ID2D1VertexBuffer = &IID_ID2D1VertexBuffer_Value;
pub const ID2D1VertexBuffer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Map: *const fn (
            self: *const ID2D1VertexBuffer,
            data: ?*?*u8,
            buffer_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unmap: *const fn (
            self: *const ID2D1VertexBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn map(self: *const T, data_: ?*?*u8, buffer_size_: u32) HRESULT {
                return @as(*const ID2D1VertexBuffer.VTable, @ptrCast(self.vtable)).Map(@as(*const ID2D1VertexBuffer, @ptrCast(self)), data_, buffer_size_);
            }
            pub inline fn unmap(self: *const T) HRESULT {
                return @as(*const ID2D1VertexBuffer.VTable, @ptrCast(self.vtable)).Unmap(@as(*const ID2D1VertexBuffer, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1ResourceTexture_Value = Guid.initString("688d15c3-02b0-438d-b13a-d1b44c32c39a");
pub const IID_ID2D1ResourceTexture = &IID_ID2D1ResourceTexture_Value;
pub const ID2D1ResourceTexture = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Update: *const fn (
            self: *const ID2D1ResourceTexture,
            minimum_extents: ?[*]const u32,
            maximimum_extents: ?[*]const u32,
            strides: ?*const u32,
            dimensions: u32,
            data: [*:0]const u8,
            data_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn update(self: *const T, minimum_extents_: ?[*]const u32, maximimum_extents_: ?[*]const u32, strides_: ?*const u32, dimensions_: u32, data_: [*:0]const u8, data_count_: u32) HRESULT {
                return @as(*const ID2D1ResourceTexture.VTable, @ptrCast(self.vtable)).Update(@as(*const ID2D1ResourceTexture, @ptrCast(self)), minimum_extents_, maximimum_extents_, strides_, dimensions_, data_, data_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1RenderInfo_Value = Guid.initString("519ae1bd-d19a-420d-b849-364f594776b7");
pub const IID_ID2D1RenderInfo = &IID_ID2D1RenderInfo_Value;
pub const ID2D1RenderInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetInputDescription: *const fn (
            self: *const ID2D1RenderInfo,
            input_index: u32,
            input_description: D2D1_INPUT_DESCRIPTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutputBuffer: *const fn (
            self: *const ID2D1RenderInfo,
            buffer_precision: D2D1_BUFFER_PRECISION,
            channel_depth: D2D1_CHANNEL_DEPTH,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCached: *const fn (
            self: *const ID2D1RenderInfo,
            is_cached: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetInstructionCountHint: *const fn (
            self: *const ID2D1RenderInfo,
            instruction_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setInputDescription(self: *const T, input_index_: u32, input_description_: D2D1_INPUT_DESCRIPTION) HRESULT {
                return @as(*const ID2D1RenderInfo.VTable, @ptrCast(self.vtable)).SetInputDescription(@as(*const ID2D1RenderInfo, @ptrCast(self)), input_index_, input_description_);
            }
            pub inline fn setOutputBuffer(self: *const T, buffer_precision_: D2D1_BUFFER_PRECISION, channel_depth_: D2D1_CHANNEL_DEPTH) HRESULT {
                return @as(*const ID2D1RenderInfo.VTable, @ptrCast(self.vtable)).SetOutputBuffer(@as(*const ID2D1RenderInfo, @ptrCast(self)), buffer_precision_, channel_depth_);
            }
            pub inline fn setCached(self: *const T, is_cached_: BOOL) void {
                return @as(*const ID2D1RenderInfo.VTable, @ptrCast(self.vtable)).SetCached(@as(*const ID2D1RenderInfo, @ptrCast(self)), is_cached_);
            }
            pub inline fn setInstructionCountHint(self: *const T, instruction_count_: u32) void {
                return @as(*const ID2D1RenderInfo.VTable, @ptrCast(self.vtable)).SetInstructionCountHint(@as(*const ID2D1RenderInfo, @ptrCast(self)), instruction_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1DrawInfo_Value = Guid.initString("693ce632-7f2f-45de-93fe-18d88b37aa21");
pub const IID_ID2D1DrawInfo = &IID_ID2D1DrawInfo_Value;
pub const ID2D1DrawInfo = extern struct {
    pub const VTable = extern struct {
        base: ID2D1RenderInfo.VTable,
        SetPixelShaderConstantBuffer: *const fn (
            self: *const ID2D1DrawInfo,
            buffer: [*:0]const u8,
            buffer_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetResourceTexture: *const fn (
            self: *const ID2D1DrawInfo,
            texture_index: u32,
            resource_texture: ?*ID2D1ResourceTexture,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVertexShaderConstantBuffer: *const fn (
            self: *const ID2D1DrawInfo,
            buffer: [*:0]const u8,
            buffer_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPixelShader: *const fn (
            self: *const ID2D1DrawInfo,
            shader_id: ?*const Guid,
            pixel_options: D2D1_PIXEL_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVertexProcessing: *const fn (
            self: *const ID2D1DrawInfo,
            vertex_buffer: ?*ID2D1VertexBuffer,
            vertex_options: D2D1_VERTEX_OPTIONS,
            blend_description: ?*const D2D1_BLEND_DESCRIPTION,
            vertex_range: ?*const D2D1_VERTEX_RANGE,
            vertex_shader: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1RenderInfo.MethodMixin(T);
            pub inline fn setPixelShaderConstantBuffer(self: *const T, buffer_: [*:0]const u8, buffer_count_: u32) HRESULT {
                return @as(*const ID2D1DrawInfo.VTable, @ptrCast(self.vtable)).SetPixelShaderConstantBuffer(@as(*const ID2D1DrawInfo, @ptrCast(self)), buffer_, buffer_count_);
            }
            pub inline fn setResourceTexture(self: *const T, texture_index_: u32, resource_texture_: ?*ID2D1ResourceTexture) HRESULT {
                return @as(*const ID2D1DrawInfo.VTable, @ptrCast(self.vtable)).SetResourceTexture(@as(*const ID2D1DrawInfo, @ptrCast(self)), texture_index_, resource_texture_);
            }
            pub inline fn setVertexShaderConstantBuffer(self: *const T, buffer_: [*:0]const u8, buffer_count_: u32) HRESULT {
                return @as(*const ID2D1DrawInfo.VTable, @ptrCast(self.vtable)).SetVertexShaderConstantBuffer(@as(*const ID2D1DrawInfo, @ptrCast(self)), buffer_, buffer_count_);
            }
            pub inline fn setPixelShader(self: *const T, shader_id_: ?*const Guid, pixel_options_: D2D1_PIXEL_OPTIONS) HRESULT {
                return @as(*const ID2D1DrawInfo.VTable, @ptrCast(self.vtable)).SetPixelShader(@as(*const ID2D1DrawInfo, @ptrCast(self)), shader_id_, pixel_options_);
            }
            pub inline fn setVertexProcessing(self: *const T, vertex_buffer_: ?*ID2D1VertexBuffer, vertex_options_: D2D1_VERTEX_OPTIONS, blend_description_: ?*const D2D1_BLEND_DESCRIPTION, vertex_range_: ?*const D2D1_VERTEX_RANGE, vertex_shader_: ?*const Guid) HRESULT {
                return @as(*const ID2D1DrawInfo.VTable, @ptrCast(self.vtable)).SetVertexProcessing(@as(*const ID2D1DrawInfo, @ptrCast(self)), vertex_buffer_, vertex_options_, blend_description_, vertex_range_, vertex_shader_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1ComputeInfo_Value = Guid.initString("5598b14b-9fd7-48b7-9bdb-8f0964eb38bc");
pub const IID_ID2D1ComputeInfo = &IID_ID2D1ComputeInfo_Value;
pub const ID2D1ComputeInfo = extern struct {
    pub const VTable = extern struct {
        base: ID2D1RenderInfo.VTable,
        SetComputeShaderConstantBuffer: *const fn (
            self: *const ID2D1ComputeInfo,
            buffer: [*:0]const u8,
            buffer_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetComputeShader: *const fn (
            self: *const ID2D1ComputeInfo,
            shader_id: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetResourceTexture: *const fn (
            self: *const ID2D1ComputeInfo,
            texture_index: u32,
            resource_texture: ?*ID2D1ResourceTexture,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1RenderInfo.MethodMixin(T);
            pub inline fn setComputeShaderConstantBuffer(self: *const T, buffer_: [*:0]const u8, buffer_count_: u32) HRESULT {
                return @as(*const ID2D1ComputeInfo.VTable, @ptrCast(self.vtable)).SetComputeShaderConstantBuffer(@as(*const ID2D1ComputeInfo, @ptrCast(self)), buffer_, buffer_count_);
            }
            pub inline fn setComputeShader(self: *const T, shader_id_: ?*const Guid) HRESULT {
                return @as(*const ID2D1ComputeInfo.VTable, @ptrCast(self.vtable)).SetComputeShader(@as(*const ID2D1ComputeInfo, @ptrCast(self)), shader_id_);
            }
            pub inline fn setResourceTexture(self: *const T, texture_index_: u32, resource_texture_: ?*ID2D1ResourceTexture) HRESULT {
                return @as(*const ID2D1ComputeInfo.VTable, @ptrCast(self.vtable)).SetResourceTexture(@as(*const ID2D1ComputeInfo, @ptrCast(self)), texture_index_, resource_texture_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1TransformNode_Value = Guid.initString("b2efe1e7-729f-4102-949f-505fa21bf666");
pub const IID_ID2D1TransformNode = &IID_ID2D1TransformNode_Value;
pub const ID2D1TransformNode = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInputCount: *const fn (
            self: *const ID2D1TransformNode,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getInputCount(self: *const T) u32 {
                return @as(*const ID2D1TransformNode.VTable, @ptrCast(self.vtable)).GetInputCount(@as(*const ID2D1TransformNode, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1TransformGraph_Value = Guid.initString("13d29038-c3e6-4034-9081-13b53a417992");
pub const IID_ID2D1TransformGraph = &IID_ID2D1TransformGraph_Value;
pub const ID2D1TransformGraph = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInputCount: *const fn (
            self: *const ID2D1TransformGraph,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        SetSingleTransformNode: *const fn (
            self: *const ID2D1TransformGraph,
            node: ?*ID2D1TransformNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddNode: *const fn (
            self: *const ID2D1TransformGraph,
            node: ?*ID2D1TransformNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveNode: *const fn (
            self: *const ID2D1TransformGraph,
            node: ?*ID2D1TransformNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutputNode: *const fn (
            self: *const ID2D1TransformGraph,
            node: ?*ID2D1TransformNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConnectNode: *const fn (
            self: *const ID2D1TransformGraph,
            from_node: ?*ID2D1TransformNode,
            to_node: ?*ID2D1TransformNode,
            to_node_input_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConnectToEffectInput: *const fn (
            self: *const ID2D1TransformGraph,
            to_effect_input_index: u32,
            node: ?*ID2D1TransformNode,
            to_node_input_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const ID2D1TransformGraph,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetPassthroughGraph: *const fn (
            self: *const ID2D1TransformGraph,
            effect_input_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getInputCount(self: *const T) u32 {
                return @as(*const ID2D1TransformGraph.VTable, @ptrCast(self.vtable)).GetInputCount(@as(*const ID2D1TransformGraph, @ptrCast(self)));
            }
            pub inline fn setSingleTransformNode(self: *const T, node_: ?*ID2D1TransformNode) HRESULT {
                return @as(*const ID2D1TransformGraph.VTable, @ptrCast(self.vtable)).SetSingleTransformNode(@as(*const ID2D1TransformGraph, @ptrCast(self)), node_);
            }
            pub inline fn addNode(self: *const T, node_: ?*ID2D1TransformNode) HRESULT {
                return @as(*const ID2D1TransformGraph.VTable, @ptrCast(self.vtable)).AddNode(@as(*const ID2D1TransformGraph, @ptrCast(self)), node_);
            }
            pub inline fn removeNode(self: *const T, node_: ?*ID2D1TransformNode) HRESULT {
                return @as(*const ID2D1TransformGraph.VTable, @ptrCast(self.vtable)).RemoveNode(@as(*const ID2D1TransformGraph, @ptrCast(self)), node_);
            }
            pub inline fn setOutputNode(self: *const T, node_: ?*ID2D1TransformNode) HRESULT {
                return @as(*const ID2D1TransformGraph.VTable, @ptrCast(self.vtable)).SetOutputNode(@as(*const ID2D1TransformGraph, @ptrCast(self)), node_);
            }
            pub inline fn connectNode(self: *const T, from_node_: ?*ID2D1TransformNode, to_node_: ?*ID2D1TransformNode, to_node_input_index_: u32) HRESULT {
                return @as(*const ID2D1TransformGraph.VTable, @ptrCast(self.vtable)).ConnectNode(@as(*const ID2D1TransformGraph, @ptrCast(self)), from_node_, to_node_, to_node_input_index_);
            }
            pub inline fn connectToEffectInput(self: *const T, to_effect_input_index_: u32, node_: ?*ID2D1TransformNode, to_node_input_index_: u32) HRESULT {
                return @as(*const ID2D1TransformGraph.VTable, @ptrCast(self.vtable)).ConnectToEffectInput(@as(*const ID2D1TransformGraph, @ptrCast(self)), to_effect_input_index_, node_, to_node_input_index_);
            }
            pub inline fn clear(self: *const T) void {
                return @as(*const ID2D1TransformGraph.VTable, @ptrCast(self.vtable)).Clear(@as(*const ID2D1TransformGraph, @ptrCast(self)));
            }
            pub inline fn setPassthroughGraph(self: *const T, effect_input_index_: u32) HRESULT {
                return @as(*const ID2D1TransformGraph.VTable, @ptrCast(self.vtable)).SetPassthroughGraph(@as(*const ID2D1TransformGraph, @ptrCast(self)), effect_input_index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1Transform_Value = Guid.initString("ef1a287d-342a-4f76-8fdb-da0d6ea9f92b");
pub const IID_ID2D1Transform = &IID_ID2D1Transform_Value;
pub const ID2D1Transform = extern struct {
    pub const VTable = extern struct {
        base: ID2D1TransformNode.VTable,
        MapOutputRectToInputRects: *const fn (
            self: *const ID2D1Transform,
            output_rect: ?*const RECT,
            input_rects: [*]RECT,
            input_rects_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MapInputRectsToOutputRect: *const fn (
            self: *const ID2D1Transform,
            input_rects: [*]const RECT,
            input_opaque_sub_rects: [*]const RECT,
            input_rect_count: u32,
            output_rect: ?*RECT,
            output_opaque_sub_rect: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MapInvalidRect: *const fn (
            self: *const ID2D1Transform,
            input_index: u32,
            invalid_input_rect: RECT,
            invalid_output_rect: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1TransformNode.MethodMixin(T);
            pub inline fn mapOutputRectToInputRects(self: *const T, output_rect_: ?*const RECT, input_rects_: [*]RECT, input_rects_count_: u32) HRESULT {
                return @as(*const ID2D1Transform.VTable, @ptrCast(self.vtable)).MapOutputRectToInputRects(@as(*const ID2D1Transform, @ptrCast(self)), output_rect_, input_rects_, input_rects_count_);
            }
            pub inline fn mapInputRectsToOutputRect(self: *const T, input_rects_: [*]const RECT, input_opaque_sub_rects_: [*]const RECT, input_rect_count_: u32, output_rect_: ?*RECT, output_opaque_sub_rect_: ?*RECT) HRESULT {
                return @as(*const ID2D1Transform.VTable, @ptrCast(self.vtable)).MapInputRectsToOutputRect(@as(*const ID2D1Transform, @ptrCast(self)), input_rects_, input_opaque_sub_rects_, input_rect_count_, output_rect_, output_opaque_sub_rect_);
            }
            pub inline fn mapInvalidRect(self: *const T, input_index_: u32, invalid_input_rect_: RECT, invalid_output_rect_: ?*RECT) HRESULT {
                return @as(*const ID2D1Transform.VTable, @ptrCast(self.vtable)).MapInvalidRect(@as(*const ID2D1Transform, @ptrCast(self)), input_index_, invalid_input_rect_, invalid_output_rect_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1DrawTransform_Value = Guid.initString("36bfdcb6-9739-435d-a30d-a653beff6a6f");
pub const IID_ID2D1DrawTransform = &IID_ID2D1DrawTransform_Value;
pub const ID2D1DrawTransform = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Transform.VTable,
        SetDrawInfo: *const fn (
            self: *const ID2D1DrawTransform,
            draw_info: ?*ID2D1DrawInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Transform.MethodMixin(T);
            pub inline fn setDrawInfo(self: *const T, draw_info_: ?*ID2D1DrawInfo) HRESULT {
                return @as(*const ID2D1DrawTransform.VTable, @ptrCast(self.vtable)).SetDrawInfo(@as(*const ID2D1DrawTransform, @ptrCast(self)), draw_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1ComputeTransform_Value = Guid.initString("0d85573c-01e3-4f7d-bfd9-0d60608bf3c3");
pub const IID_ID2D1ComputeTransform = &IID_ID2D1ComputeTransform_Value;
pub const ID2D1ComputeTransform = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Transform.VTable,
        SetComputeInfo: *const fn (
            self: *const ID2D1ComputeTransform,
            compute_info: ?*ID2D1ComputeInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CalculateThreadgroups: *const fn (
            self: *const ID2D1ComputeTransform,
            output_rect: ?*const RECT,
            dimension_x: ?*u32,
            dimension_y: ?*u32,
            dimension_z: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Transform.MethodMixin(T);
            pub inline fn setComputeInfo(self: *const T, compute_info_: ?*ID2D1ComputeInfo) HRESULT {
                return @as(*const ID2D1ComputeTransform.VTable, @ptrCast(self.vtable)).SetComputeInfo(@as(*const ID2D1ComputeTransform, @ptrCast(self)), compute_info_);
            }
            pub inline fn calculateThreadgroups(self: *const T, output_rect_: ?*const RECT, dimension_x_: ?*u32, dimension_y_: ?*u32, dimension_z_: ?*u32) HRESULT {
                return @as(*const ID2D1ComputeTransform.VTable, @ptrCast(self.vtable)).CalculateThreadgroups(@as(*const ID2D1ComputeTransform, @ptrCast(self)), output_rect_, dimension_x_, dimension_y_, dimension_z_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1AnalysisTransform_Value = Guid.initString("0359dc30-95e6-4568-9055-27720d130e93");
pub const IID_ID2D1AnalysisTransform = &IID_ID2D1AnalysisTransform_Value;
pub const ID2D1AnalysisTransform = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ProcessAnalysisResults: *const fn (
            self: *const ID2D1AnalysisTransform,
            analysis_data: [*:0]const u8,
            analysis_data_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn processAnalysisResults(self: *const T, analysis_data_: [*:0]const u8, analysis_data_count_: u32) HRESULT {
                return @as(*const ID2D1AnalysisTransform.VTable, @ptrCast(self.vtable)).ProcessAnalysisResults(@as(*const ID2D1AnalysisTransform, @ptrCast(self)), analysis_data_, analysis_data_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1SourceTransform_Value = Guid.initString("db1800dd-0c34-4cf9-be90-31cc0a5653e1");
pub const IID_ID2D1SourceTransform = &IID_ID2D1SourceTransform_Value;
pub const ID2D1SourceTransform = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Transform.VTable,
        SetRenderInfo: *const fn (
            self: *const ID2D1SourceTransform,
            render_info: ?*ID2D1RenderInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Draw: *const fn (
            self: *const ID2D1SourceTransform,
            target: ?*ID2D1Bitmap1,
            draw_rect: ?*const RECT,
            target_origin: D2D_POINT_2U,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Transform.MethodMixin(T);
            pub inline fn setRenderInfo(self: *const T, render_info_: ?*ID2D1RenderInfo) HRESULT {
                return @as(*const ID2D1SourceTransform.VTable, @ptrCast(self.vtable)).SetRenderInfo(@as(*const ID2D1SourceTransform, @ptrCast(self)), render_info_);
            }
            pub inline fn draw(self: *const T, target_: ?*ID2D1Bitmap1, draw_rect_: ?*const RECT, target_origin_: D2D_POINT_2U) HRESULT {
                return @as(*const ID2D1SourceTransform.VTable, @ptrCast(self.vtable)).Draw(@as(*const ID2D1SourceTransform, @ptrCast(self)), target_, draw_rect_, target_origin_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1ConcreteTransform_Value = Guid.initString("1a799d8a-69f7-4e4c-9fed-437ccc6684cc");
pub const IID_ID2D1ConcreteTransform = &IID_ID2D1ConcreteTransform_Value;
pub const ID2D1ConcreteTransform = extern struct {
    pub const VTable = extern struct {
        base: ID2D1TransformNode.VTable,
        SetOutputBuffer: *const fn (
            self: *const ID2D1ConcreteTransform,
            buffer_precision: D2D1_BUFFER_PRECISION,
            channel_depth: D2D1_CHANNEL_DEPTH,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCached: *const fn (
            self: *const ID2D1ConcreteTransform,
            is_cached: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1TransformNode.MethodMixin(T);
            pub inline fn setOutputBuffer(self: *const T, buffer_precision_: D2D1_BUFFER_PRECISION, channel_depth_: D2D1_CHANNEL_DEPTH) HRESULT {
                return @as(*const ID2D1ConcreteTransform.VTable, @ptrCast(self.vtable)).SetOutputBuffer(@as(*const ID2D1ConcreteTransform, @ptrCast(self)), buffer_precision_, channel_depth_);
            }
            pub inline fn setCached(self: *const T, is_cached_: BOOL) void {
                return @as(*const ID2D1ConcreteTransform.VTable, @ptrCast(self.vtable)).SetCached(@as(*const ID2D1ConcreteTransform, @ptrCast(self)), is_cached_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1BlendTransform_Value = Guid.initString("63ac0b32-ba44-450f-8806-7f4ca1ff2f1b");
pub const IID_ID2D1BlendTransform = &IID_ID2D1BlendTransform_Value;
pub const ID2D1BlendTransform = extern struct {
    pub const VTable = extern struct {
        base: ID2D1ConcreteTransform.VTable,
        SetDescription: *const fn (
            self: *const ID2D1BlendTransform,
            description: ?*const D2D1_BLEND_DESCRIPTION,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetDescription: *const fn (
            self: *const ID2D1BlendTransform,
            description: ?*D2D1_BLEND_DESCRIPTION,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1ConcreteTransform.MethodMixin(T);
            pub inline fn setDescription(self: *const T, description_: ?*const D2D1_BLEND_DESCRIPTION) void {
                return @as(*const ID2D1BlendTransform.VTable, @ptrCast(self.vtable)).SetDescription(@as(*const ID2D1BlendTransform, @ptrCast(self)), description_);
            }
            pub inline fn getDescription(self: *const T, description_: ?*D2D1_BLEND_DESCRIPTION) void {
                return @as(*const ID2D1BlendTransform.VTable, @ptrCast(self.vtable)).GetDescription(@as(*const ID2D1BlendTransform, @ptrCast(self)), description_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1BorderTransform_Value = Guid.initString("4998735c-3a19-473c-9781-656847e3a347");
pub const IID_ID2D1BorderTransform = &IID_ID2D1BorderTransform_Value;
pub const ID2D1BorderTransform = extern struct {
    pub const VTable = extern struct {
        base: ID2D1ConcreteTransform.VTable,
        SetExtendModeX: *const fn (
            self: *const ID2D1BorderTransform,
            extend_mode: D2D1_EXTEND_MODE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetExtendModeY: *const fn (
            self: *const ID2D1BorderTransform,
            extend_mode: D2D1_EXTEND_MODE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetExtendModeX: *const fn (
            self: *const ID2D1BorderTransform,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_EXTEND_MODE,
        GetExtendModeY: *const fn (
            self: *const ID2D1BorderTransform,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_EXTEND_MODE,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1ConcreteTransform.MethodMixin(T);
            pub inline fn setExtendModeX(self: *const T, extend_mode_: D2D1_EXTEND_MODE) void {
                return @as(*const ID2D1BorderTransform.VTable, @ptrCast(self.vtable)).SetExtendModeX(@as(*const ID2D1BorderTransform, @ptrCast(self)), extend_mode_);
            }
            pub inline fn setExtendModeY(self: *const T, extend_mode_: D2D1_EXTEND_MODE) void {
                return @as(*const ID2D1BorderTransform.VTable, @ptrCast(self.vtable)).SetExtendModeY(@as(*const ID2D1BorderTransform, @ptrCast(self)), extend_mode_);
            }
            pub inline fn getExtendModeX(self: *const T) D2D1_EXTEND_MODE {
                return @as(*const ID2D1BorderTransform.VTable, @ptrCast(self.vtable)).GetExtendModeX(@as(*const ID2D1BorderTransform, @ptrCast(self)));
            }
            pub inline fn getExtendModeY(self: *const T) D2D1_EXTEND_MODE {
                return @as(*const ID2D1BorderTransform.VTable, @ptrCast(self.vtable)).GetExtendModeY(@as(*const ID2D1BorderTransform, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1OffsetTransform_Value = Guid.initString("3fe6adea-7643-4f53-bd14-a0ce63f24042");
pub const IID_ID2D1OffsetTransform = &IID_ID2D1OffsetTransform_Value;
pub const ID2D1OffsetTransform = extern struct {
    pub const VTable = extern struct {
        base: ID2D1TransformNode.VTable,
        SetOffset: *const fn (
            self: *const ID2D1OffsetTransform,
            offset: POINT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetOffset: *const fn (
            self: *const ID2D1OffsetTransform,
            retval: *POINT,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1TransformNode.MethodMixin(T);
            pub inline fn setOffset(self: *const T, offset_: POINT) void {
                return @as(*const ID2D1OffsetTransform.VTable, @ptrCast(self.vtable)).SetOffset(@as(*const ID2D1OffsetTransform, @ptrCast(self)), offset_);
            }
            pub inline fn getOffset(self: *const T) POINT {
                var retval: POINT = undefined;
                @as(*const ID2D1OffsetTransform.VTable, @ptrCast(self.vtable)).GetOffset(@as(*const ID2D1OffsetTransform, @ptrCast(self)), &retval);
                return retval;
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1BoundsAdjustmentTransform_Value = Guid.initString("90f732e2-5092-4606-a819-8651970baccd");
pub const IID_ID2D1BoundsAdjustmentTransform = &IID_ID2D1BoundsAdjustmentTransform_Value;
pub const ID2D1BoundsAdjustmentTransform = extern struct {
    pub const VTable = extern struct {
        base: ID2D1TransformNode.VTable,
        SetOutputBounds: *const fn (
            self: *const ID2D1BoundsAdjustmentTransform,
            output_bounds: ?*const RECT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetOutputBounds: *const fn (
            self: *const ID2D1BoundsAdjustmentTransform,
            output_bounds: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1TransformNode.MethodMixin(T);
            pub inline fn setOutputBounds(self: *const T, output_bounds_: ?*const RECT) void {
                return @as(*const ID2D1BoundsAdjustmentTransform.VTable, @ptrCast(self.vtable)).SetOutputBounds(@as(*const ID2D1BoundsAdjustmentTransform, @ptrCast(self)), output_bounds_);
            }
            pub inline fn getOutputBounds(self: *const T, output_bounds_: ?*RECT) void {
                return @as(*const ID2D1BoundsAdjustmentTransform.VTable, @ptrCast(self.vtable)).GetOutputBounds(@as(*const ID2D1BoundsAdjustmentTransform, @ptrCast(self)), output_bounds_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1EffectImpl_Value = Guid.initString("a248fd3f-3e6c-4e63-9f03-7f68ecc91db9");
pub const IID_ID2D1EffectImpl = &IID_ID2D1EffectImpl_Value;
pub const ID2D1EffectImpl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const ID2D1EffectImpl,
            effect_context: ?*ID2D1EffectContext,
            transform_graph: ?*ID2D1TransformGraph,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrepareForRender: *const fn (
            self: *const ID2D1EffectImpl,
            change_type: D2D1_CHANGE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGraph: *const fn (
            self: *const ID2D1EffectImpl,
            transform_graph: ?*ID2D1TransformGraph,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, effect_context_: ?*ID2D1EffectContext, transform_graph_: ?*ID2D1TransformGraph) HRESULT {
                return @as(*const ID2D1EffectImpl.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ID2D1EffectImpl, @ptrCast(self)), effect_context_, transform_graph_);
            }
            pub inline fn prepareForRender(self: *const T, change_type_: D2D1_CHANGE_TYPE) HRESULT {
                return @as(*const ID2D1EffectImpl.VTable, @ptrCast(self.vtable)).PrepareForRender(@as(*const ID2D1EffectImpl, @ptrCast(self)), change_type_);
            }
            pub inline fn setGraph(self: *const T, transform_graph_: ?*ID2D1TransformGraph) HRESULT {
                return @as(*const ID2D1EffectImpl.VTable, @ptrCast(self.vtable)).SetGraph(@as(*const ID2D1EffectImpl, @ptrCast(self)), transform_graph_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ID2D1EffectContext_Value = Guid.initString("3d9f916b-27dc-4ad7-b4f1-64945340f563");
pub const IID_ID2D1EffectContext = &IID_ID2D1EffectContext_Value;
pub const ID2D1EffectContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDpi: *const fn (
            self: *const ID2D1EffectContext,
            dpi_x: ?*f32,
            dpi_y: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CreateEffect: *const fn (
            self: *const ID2D1EffectContext,
            effect_id: ?*const Guid,
            effect: ?*?*ID2D1Effect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaximumSupportedFeatureLevel: *const fn (
            self: *const ID2D1EffectContext,
            feature_levels: [*]const D3D_FEATURE_LEVEL,
            feature_levels_count: u32,
            maximum_supported_feature_level: ?*D3D_FEATURE_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTransformNodeFromEffect: *const fn (
            self: *const ID2D1EffectContext,
            effect: ?*ID2D1Effect,
            transform_node: ?*?*ID2D1TransformNode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBlendTransform: *const fn (
            self: *const ID2D1EffectContext,
            num_inputs: u32,
            blend_description: ?*const D2D1_BLEND_DESCRIPTION,
            transform: ?*?*ID2D1BlendTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBorderTransform: *const fn (
            self: *const ID2D1EffectContext,
            extend_mode_x: D2D1_EXTEND_MODE,
            extend_mode_y: D2D1_EXTEND_MODE,
            transform: ?*?*ID2D1BorderTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateOffsetTransform: *const fn (
            self: *const ID2D1EffectContext,
            offset: POINT,
            transform: ?*?*ID2D1OffsetTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBoundsAdjustmentTransform: *const fn (
            self: *const ID2D1EffectContext,
            output_rectangle: ?*const RECT,
            transform: ?*?*ID2D1BoundsAdjustmentTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadPixelShader: *const fn (
            self: *const ID2D1EffectContext,
            shader_id: ?*const Guid,
            shader_buffer: [*:0]const u8,
            shader_buffer_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadVertexShader: *const fn (
            self: *const ID2D1EffectContext,
            resource_id: ?*const Guid,
            shader_buffer: [*:0]const u8,
            shader_buffer_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadComputeShader: *const fn (
            self: *const ID2D1EffectContext,
            resource_id: ?*const Guid,
            shader_buffer: [*:0]const u8,
            shader_buffer_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsShaderLoaded: *const fn (
            self: *const ID2D1EffectContext,
            shader_id: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        CreateResourceTexture: *const fn (
            self: *const ID2D1EffectContext,
            resource_id: ?*const Guid,
            resource_texture_properties: ?*const D2D1_RESOURCE_TEXTURE_PROPERTIES,
            data: ?[*:0]const u8,
            strides: ?*const u32,
            data_size: u32,
            resource_texture: ?*?*ID2D1ResourceTexture,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindResourceTexture: *const fn (
            self: *const ID2D1EffectContext,
            resource_id: ?*const Guid,
            resource_texture: ?*?*ID2D1ResourceTexture,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVertexBuffer: *const fn (
            self: *const ID2D1EffectContext,
            vertex_buffer_properties: ?*const D2D1_VERTEX_BUFFER_PROPERTIES,
            resource_id: ?*const Guid,
            custom_vertex_buffer_properties: ?*const D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES,
            buffer: ?*?*ID2D1VertexBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindVertexBuffer: *const fn (
            self: *const ID2D1EffectContext,
            resource_id: ?*const Guid,
            buffer: ?*?*ID2D1VertexBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateColorContext: *const fn (
            self: *const ID2D1EffectContext,
            space: D2D1_COLOR_SPACE,
            profile: ?[*:0]const u8,
            profile_size: u32,
            color_context: ?*?*ID2D1ColorContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateColorContextFromFilename: *const fn (
            self: *const ID2D1EffectContext,
            filename: ?[*:0]const u16,
            color_context: ?*?*ID2D1ColorContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateColorContextFromWicColorContext: *const fn (
            self: *const ID2D1EffectContext,
            wic_color_context: ?*IWICColorContext,
            color_context: ?*?*ID2D1ColorContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckFeatureSupport: *const fn (
            self: *const ID2D1EffectContext,
            feature: D2D1_FEATURE,
            // TODO: what to do with BytesParamIndex 2?
            feature_support_data: ?*anyopaque,
            feature_support_data_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsBufferPrecisionSupported: *const fn (
            self: *const ID2D1EffectContext,
            buffer_precision: D2D1_BUFFER_PRECISION,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDpi(self: *const T, dpi_x_: ?*f32, dpi_y_: ?*f32) void {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).GetDpi(@as(*const ID2D1EffectContext, @ptrCast(self)), dpi_x_, dpi_y_);
            }
            pub inline fn createEffect(self: *const T, effect_id_: ?*const Guid, effect_: ?*?*ID2D1Effect) HRESULT {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).CreateEffect(@as(*const ID2D1EffectContext, @ptrCast(self)), effect_id_, effect_);
            }
            pub inline fn getMaximumSupportedFeatureLevel(self: *const T, feature_levels_: [*]const D3D_FEATURE_LEVEL, feature_levels_count_: u32, maximum_supported_feature_level_: ?*D3D_FEATURE_LEVEL) HRESULT {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).GetMaximumSupportedFeatureLevel(@as(*const ID2D1EffectContext, @ptrCast(self)), feature_levels_, feature_levels_count_, maximum_supported_feature_level_);
            }
            pub inline fn createTransformNodeFromEffect(self: *const T, effect_: ?*ID2D1Effect, transform_node_: ?*?*ID2D1TransformNode) HRESULT {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).CreateTransformNodeFromEffect(@as(*const ID2D1EffectContext, @ptrCast(self)), effect_, transform_node_);
            }
            pub inline fn createBlendTransform(self: *const T, num_inputs_: u32, blend_description_: ?*const D2D1_BLEND_DESCRIPTION, transform_: ?*?*ID2D1BlendTransform) HRESULT {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).CreateBlendTransform(@as(*const ID2D1EffectContext, @ptrCast(self)), num_inputs_, blend_description_, transform_);
            }
            pub inline fn createBorderTransform(self: *const T, extend_mode_x_: D2D1_EXTEND_MODE, extend_mode_y_: D2D1_EXTEND_MODE, transform_: ?*?*ID2D1BorderTransform) HRESULT {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).CreateBorderTransform(@as(*const ID2D1EffectContext, @ptrCast(self)), extend_mode_x_, extend_mode_y_, transform_);
            }
            pub inline fn createOffsetTransform(self: *const T, offset_: POINT, transform_: ?*?*ID2D1OffsetTransform) HRESULT {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).CreateOffsetTransform(@as(*const ID2D1EffectContext, @ptrCast(self)), offset_, transform_);
            }
            pub inline fn createBoundsAdjustmentTransform(self: *const T, output_rectangle_: ?*const RECT, transform_: ?*?*ID2D1BoundsAdjustmentTransform) HRESULT {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).CreateBoundsAdjustmentTransform(@as(*const ID2D1EffectContext, @ptrCast(self)), output_rectangle_, transform_);
            }
            pub inline fn loadPixelShader(self: *const T, shader_id_: ?*const Guid, shader_buffer_: [*:0]const u8, shader_buffer_count_: u32) HRESULT {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).LoadPixelShader(@as(*const ID2D1EffectContext, @ptrCast(self)), shader_id_, shader_buffer_, shader_buffer_count_);
            }
            pub inline fn loadVertexShader(self: *const T, resource_id_: ?*const Guid, shader_buffer_: [*:0]const u8, shader_buffer_count_: u32) HRESULT {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).LoadVertexShader(@as(*const ID2D1EffectContext, @ptrCast(self)), resource_id_, shader_buffer_, shader_buffer_count_);
            }
            pub inline fn loadComputeShader(self: *const T, resource_id_: ?*const Guid, shader_buffer_: [*:0]const u8, shader_buffer_count_: u32) HRESULT {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).LoadComputeShader(@as(*const ID2D1EffectContext, @ptrCast(self)), resource_id_, shader_buffer_, shader_buffer_count_);
            }
            pub inline fn isShaderLoaded(self: *const T, shader_id_: ?*const Guid) BOOL {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).IsShaderLoaded(@as(*const ID2D1EffectContext, @ptrCast(self)), shader_id_);
            }
            pub inline fn createResourceTexture(self: *const T, resource_id_: ?*const Guid, resource_texture_properties_: ?*const D2D1_RESOURCE_TEXTURE_PROPERTIES, data_: ?[*:0]const u8, strides_: ?*const u32, data_size_: u32, resource_texture_: ?*?*ID2D1ResourceTexture) HRESULT {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).CreateResourceTexture(@as(*const ID2D1EffectContext, @ptrCast(self)), resource_id_, resource_texture_properties_, data_, strides_, data_size_, resource_texture_);
            }
            pub inline fn findResourceTexture(self: *const T, resource_id_: ?*const Guid, resource_texture_: ?*?*ID2D1ResourceTexture) HRESULT {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).FindResourceTexture(@as(*const ID2D1EffectContext, @ptrCast(self)), resource_id_, resource_texture_);
            }
            pub inline fn createVertexBuffer(self: *const T, vertex_buffer_properties_: ?*const D2D1_VERTEX_BUFFER_PROPERTIES, resource_id_: ?*const Guid, custom_vertex_buffer_properties_: ?*const D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES, buffer_: ?*?*ID2D1VertexBuffer) HRESULT {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).CreateVertexBuffer(@as(*const ID2D1EffectContext, @ptrCast(self)), vertex_buffer_properties_, resource_id_, custom_vertex_buffer_properties_, buffer_);
            }
            pub inline fn findVertexBuffer(self: *const T, resource_id_: ?*const Guid, buffer_: ?*?*ID2D1VertexBuffer) HRESULT {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).FindVertexBuffer(@as(*const ID2D1EffectContext, @ptrCast(self)), resource_id_, buffer_);
            }
            pub inline fn createColorContext(self: *const T, space_: D2D1_COLOR_SPACE, profile_: ?[*:0]const u8, profile_size_: u32, color_context_: ?*?*ID2D1ColorContext) HRESULT {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).CreateColorContext(@as(*const ID2D1EffectContext, @ptrCast(self)), space_, profile_, profile_size_, color_context_);
            }
            pub inline fn createColorContextFromFilename(self: *const T, filename_: ?[*:0]const u16, color_context_: ?*?*ID2D1ColorContext) HRESULT {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).CreateColorContextFromFilename(@as(*const ID2D1EffectContext, @ptrCast(self)), filename_, color_context_);
            }
            pub inline fn createColorContextFromWicColorContext(self: *const T, wic_color_context_: ?*IWICColorContext, color_context_: ?*?*ID2D1ColorContext) HRESULT {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).CreateColorContextFromWicColorContext(@as(*const ID2D1EffectContext, @ptrCast(self)), wic_color_context_, color_context_);
            }
            pub inline fn checkFeatureSupport(self: *const T, feature_: D2D1_FEATURE, feature_support_data_: ?*anyopaque, feature_support_data_size_: u32) HRESULT {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).CheckFeatureSupport(@as(*const ID2D1EffectContext, @ptrCast(self)), feature_, feature_support_data_, feature_support_data_size_);
            }
            pub inline fn isBufferPrecisionSupported(self: *const T, buffer_precision_: D2D1_BUFFER_PRECISION) BOOL {
                return @as(*const ID2D1EffectContext.VTable, @ptrCast(self.vtable)).IsBufferPrecisionSupported(@as(*const ID2D1EffectContext, @ptrCast(self)), buffer_precision_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D2D1_YCBCR_PROP = enum(u32) {
    CHROMA_SUBSAMPLING = 0,
    TRANSFORM_MATRIX = 1,
    INTERPOLATION_MODE = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_YCBCR_PROP_CHROMA_SUBSAMPLING = D2D1_YCBCR_PROP.CHROMA_SUBSAMPLING;
pub const D2D1_YCBCR_PROP_TRANSFORM_MATRIX = D2D1_YCBCR_PROP.TRANSFORM_MATRIX;
pub const D2D1_YCBCR_PROP_INTERPOLATION_MODE = D2D1_YCBCR_PROP.INTERPOLATION_MODE;
pub const D2D1_YCBCR_PROP_FORCE_DWORD = D2D1_YCBCR_PROP.FORCE_DWORD;

pub const D2D1_YCBCR_CHROMA_SUBSAMPLING = enum(u32) {
    AUTO = 0,
    @"420" = 1,
    @"422" = 2,
    @"444" = 3,
    @"440" = 4,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_YCBCR_CHROMA_SUBSAMPLING_AUTO = D2D1_YCBCR_CHROMA_SUBSAMPLING.AUTO;
pub const D2D1_YCBCR_CHROMA_SUBSAMPLING_420 = D2D1_YCBCR_CHROMA_SUBSAMPLING.@"420";
pub const D2D1_YCBCR_CHROMA_SUBSAMPLING_422 = D2D1_YCBCR_CHROMA_SUBSAMPLING.@"422";
pub const D2D1_YCBCR_CHROMA_SUBSAMPLING_444 = D2D1_YCBCR_CHROMA_SUBSAMPLING.@"444";
pub const D2D1_YCBCR_CHROMA_SUBSAMPLING_440 = D2D1_YCBCR_CHROMA_SUBSAMPLING.@"440";
pub const D2D1_YCBCR_CHROMA_SUBSAMPLING_FORCE_DWORD = D2D1_YCBCR_CHROMA_SUBSAMPLING.FORCE_DWORD;

pub const D2D1_YCBCR_INTERPOLATION_MODE = enum(u32) {
    NEAREST_NEIGHBOR = 0,
    LINEAR = 1,
    CUBIC = 2,
    MULTI_SAMPLE_LINEAR = 3,
    ANISOTROPIC = 4,
    HIGH_QUALITY_CUBIC = 5,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_YCBCR_INTERPOLATION_MODE_NEAREST_NEIGHBOR = D2D1_YCBCR_INTERPOLATION_MODE.NEAREST_NEIGHBOR;
pub const D2D1_YCBCR_INTERPOLATION_MODE_LINEAR = D2D1_YCBCR_INTERPOLATION_MODE.LINEAR;
pub const D2D1_YCBCR_INTERPOLATION_MODE_CUBIC = D2D1_YCBCR_INTERPOLATION_MODE.CUBIC;
pub const D2D1_YCBCR_INTERPOLATION_MODE_MULTI_SAMPLE_LINEAR = D2D1_YCBCR_INTERPOLATION_MODE.MULTI_SAMPLE_LINEAR;
pub const D2D1_YCBCR_INTERPOLATION_MODE_ANISOTROPIC = D2D1_YCBCR_INTERPOLATION_MODE.ANISOTROPIC;
pub const D2D1_YCBCR_INTERPOLATION_MODE_HIGH_QUALITY_CUBIC = D2D1_YCBCR_INTERPOLATION_MODE.HIGH_QUALITY_CUBIC;
pub const D2D1_YCBCR_INTERPOLATION_MODE_FORCE_DWORD = D2D1_YCBCR_INTERPOLATION_MODE.FORCE_DWORD;

pub const D2D1_CONTRAST_PROP = enum(u32) {
    CONTRAST = 0,
    CLAMP_INPUT = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_CONTRAST_PROP_CONTRAST = D2D1_CONTRAST_PROP.CONTRAST;
pub const D2D1_CONTRAST_PROP_CLAMP_INPUT = D2D1_CONTRAST_PROP.CLAMP_INPUT;
pub const D2D1_CONTRAST_PROP_FORCE_DWORD = D2D1_CONTRAST_PROP.FORCE_DWORD;

pub const D2D1_RGBTOHUE_PROP = enum(u32) {
    OUTPUT_COLOR_SPACE = 0,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_RGBTOHUE_PROP_OUTPUT_COLOR_SPACE = D2D1_RGBTOHUE_PROP.OUTPUT_COLOR_SPACE;
pub const D2D1_RGBTOHUE_PROP_FORCE_DWORD = D2D1_RGBTOHUE_PROP.FORCE_DWORD;

pub const D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE = enum(u32) {
    HUE_SATURATION_VALUE = 0,
    HUE_SATURATION_LIGHTNESS = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_VALUE = D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE.HUE_SATURATION_VALUE;
pub const D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS = D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE.HUE_SATURATION_LIGHTNESS;
pub const D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE_FORCE_DWORD = D2D1_RGBTOHUE_OUTPUT_COLOR_SPACE.FORCE_DWORD;

pub const D2D1_HUETORGB_PROP = enum(u32) {
    INPUT_COLOR_SPACE = 0,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_HUETORGB_PROP_INPUT_COLOR_SPACE = D2D1_HUETORGB_PROP.INPUT_COLOR_SPACE;
pub const D2D1_HUETORGB_PROP_FORCE_DWORD = D2D1_HUETORGB_PROP.FORCE_DWORD;

pub const D2D1_HUETORGB_INPUT_COLOR_SPACE = enum(u32) {
    HUE_SATURATION_VALUE = 0,
    HUE_SATURATION_LIGHTNESS = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_VALUE = D2D1_HUETORGB_INPUT_COLOR_SPACE.HUE_SATURATION_VALUE;
pub const D2D1_HUETORGB_INPUT_COLOR_SPACE_HUE_SATURATION_LIGHTNESS = D2D1_HUETORGB_INPUT_COLOR_SPACE.HUE_SATURATION_LIGHTNESS;
pub const D2D1_HUETORGB_INPUT_COLOR_SPACE_FORCE_DWORD = D2D1_HUETORGB_INPUT_COLOR_SPACE.FORCE_DWORD;

pub const D2D1_CHROMAKEY_PROP = enum(u32) {
    COLOR = 0,
    TOLERANCE = 1,
    INVERT_ALPHA = 2,
    FEATHER = 3,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_CHROMAKEY_PROP_COLOR = D2D1_CHROMAKEY_PROP.COLOR;
pub const D2D1_CHROMAKEY_PROP_TOLERANCE = D2D1_CHROMAKEY_PROP.TOLERANCE;
pub const D2D1_CHROMAKEY_PROP_INVERT_ALPHA = D2D1_CHROMAKEY_PROP.INVERT_ALPHA;
pub const D2D1_CHROMAKEY_PROP_FEATHER = D2D1_CHROMAKEY_PROP.FEATHER;
pub const D2D1_CHROMAKEY_PROP_FORCE_DWORD = D2D1_CHROMAKEY_PROP.FORCE_DWORD;

pub const D2D1_EMBOSS_PROP = enum(u32) {
    HEIGHT = 0,
    DIRECTION = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_EMBOSS_PROP_HEIGHT = D2D1_EMBOSS_PROP.HEIGHT;
pub const D2D1_EMBOSS_PROP_DIRECTION = D2D1_EMBOSS_PROP.DIRECTION;
pub const D2D1_EMBOSS_PROP_FORCE_DWORD = D2D1_EMBOSS_PROP.FORCE_DWORD;

pub const D2D1_EXPOSURE_PROP = enum(u32) {
    EXPOSURE_VALUE = 0,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_EXPOSURE_PROP_EXPOSURE_VALUE = D2D1_EXPOSURE_PROP.EXPOSURE_VALUE;
pub const D2D1_EXPOSURE_PROP_FORCE_DWORD = D2D1_EXPOSURE_PROP.FORCE_DWORD;

pub const D2D1_POSTERIZE_PROP = enum(u32) {
    RED_VALUE_COUNT = 0,
    GREEN_VALUE_COUNT = 1,
    BLUE_VALUE_COUNT = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_POSTERIZE_PROP_RED_VALUE_COUNT = D2D1_POSTERIZE_PROP.RED_VALUE_COUNT;
pub const D2D1_POSTERIZE_PROP_GREEN_VALUE_COUNT = D2D1_POSTERIZE_PROP.GREEN_VALUE_COUNT;
pub const D2D1_POSTERIZE_PROP_BLUE_VALUE_COUNT = D2D1_POSTERIZE_PROP.BLUE_VALUE_COUNT;
pub const D2D1_POSTERIZE_PROP_FORCE_DWORD = D2D1_POSTERIZE_PROP.FORCE_DWORD;

pub const D2D1_SEPIA_PROP = enum(u32) {
    INTENSITY = 0,
    ALPHA_MODE = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SEPIA_PROP_INTENSITY = D2D1_SEPIA_PROP.INTENSITY;
pub const D2D1_SEPIA_PROP_ALPHA_MODE = D2D1_SEPIA_PROP.ALPHA_MODE;
pub const D2D1_SEPIA_PROP_FORCE_DWORD = D2D1_SEPIA_PROP.FORCE_DWORD;

pub const D2D1_SHARPEN_PROP = enum(u32) {
    SHARPNESS = 0,
    THRESHOLD = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SHARPEN_PROP_SHARPNESS = D2D1_SHARPEN_PROP.SHARPNESS;
pub const D2D1_SHARPEN_PROP_THRESHOLD = D2D1_SHARPEN_PROP.THRESHOLD;
pub const D2D1_SHARPEN_PROP_FORCE_DWORD = D2D1_SHARPEN_PROP.FORCE_DWORD;

pub const D2D1_STRAIGHTEN_PROP = enum(u32) {
    ANGLE = 0,
    MAINTAIN_SIZE = 1,
    SCALE_MODE = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_STRAIGHTEN_PROP_ANGLE = D2D1_STRAIGHTEN_PROP.ANGLE;
pub const D2D1_STRAIGHTEN_PROP_MAINTAIN_SIZE = D2D1_STRAIGHTEN_PROP.MAINTAIN_SIZE;
pub const D2D1_STRAIGHTEN_PROP_SCALE_MODE = D2D1_STRAIGHTEN_PROP.SCALE_MODE;
pub const D2D1_STRAIGHTEN_PROP_FORCE_DWORD = D2D1_STRAIGHTEN_PROP.FORCE_DWORD;

pub const D2D1_STRAIGHTEN_SCALE_MODE = enum(u32) {
    NEAREST_NEIGHBOR = 0,
    LINEAR = 1,
    CUBIC = 2,
    MULTI_SAMPLE_LINEAR = 3,
    ANISOTROPIC = 4,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_STRAIGHTEN_SCALE_MODE_NEAREST_NEIGHBOR = D2D1_STRAIGHTEN_SCALE_MODE.NEAREST_NEIGHBOR;
pub const D2D1_STRAIGHTEN_SCALE_MODE_LINEAR = D2D1_STRAIGHTEN_SCALE_MODE.LINEAR;
pub const D2D1_STRAIGHTEN_SCALE_MODE_CUBIC = D2D1_STRAIGHTEN_SCALE_MODE.CUBIC;
pub const D2D1_STRAIGHTEN_SCALE_MODE_MULTI_SAMPLE_LINEAR = D2D1_STRAIGHTEN_SCALE_MODE.MULTI_SAMPLE_LINEAR;
pub const D2D1_STRAIGHTEN_SCALE_MODE_ANISOTROPIC = D2D1_STRAIGHTEN_SCALE_MODE.ANISOTROPIC;
pub const D2D1_STRAIGHTEN_SCALE_MODE_FORCE_DWORD = D2D1_STRAIGHTEN_SCALE_MODE.FORCE_DWORD;

pub const D2D1_TEMPERATUREANDTINT_PROP = enum(u32) {
    TEMPERATURE = 0,
    TINT = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_TEMPERATUREANDTINT_PROP_TEMPERATURE = D2D1_TEMPERATUREANDTINT_PROP.TEMPERATURE;
pub const D2D1_TEMPERATUREANDTINT_PROP_TINT = D2D1_TEMPERATUREANDTINT_PROP.TINT;
pub const D2D1_TEMPERATUREANDTINT_PROP_FORCE_DWORD = D2D1_TEMPERATUREANDTINT_PROP.FORCE_DWORD;

pub const D2D1_VIGNETTE_PROP = enum(u32) {
    COLOR = 0,
    TRANSITION_SIZE = 1,
    STRENGTH = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_VIGNETTE_PROP_COLOR = D2D1_VIGNETTE_PROP.COLOR;
pub const D2D1_VIGNETTE_PROP_TRANSITION_SIZE = D2D1_VIGNETTE_PROP.TRANSITION_SIZE;
pub const D2D1_VIGNETTE_PROP_STRENGTH = D2D1_VIGNETTE_PROP.STRENGTH;
pub const D2D1_VIGNETTE_PROP_FORCE_DWORD = D2D1_VIGNETTE_PROP.FORCE_DWORD;

pub const D2D1_EDGEDETECTION_PROP = enum(u32) {
    STRENGTH = 0,
    BLUR_RADIUS = 1,
    MODE = 2,
    OVERLAY_EDGES = 3,
    ALPHA_MODE = 4,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_EDGEDETECTION_PROP_STRENGTH = D2D1_EDGEDETECTION_PROP.STRENGTH;
pub const D2D1_EDGEDETECTION_PROP_BLUR_RADIUS = D2D1_EDGEDETECTION_PROP.BLUR_RADIUS;
pub const D2D1_EDGEDETECTION_PROP_MODE = D2D1_EDGEDETECTION_PROP.MODE;
pub const D2D1_EDGEDETECTION_PROP_OVERLAY_EDGES = D2D1_EDGEDETECTION_PROP.OVERLAY_EDGES;
pub const D2D1_EDGEDETECTION_PROP_ALPHA_MODE = D2D1_EDGEDETECTION_PROP.ALPHA_MODE;
pub const D2D1_EDGEDETECTION_PROP_FORCE_DWORD = D2D1_EDGEDETECTION_PROP.FORCE_DWORD;

pub const D2D1_EDGEDETECTION_MODE = enum(u32) {
    SOBEL = 0,
    PREWITT = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_EDGEDETECTION_MODE_SOBEL = D2D1_EDGEDETECTION_MODE.SOBEL;
pub const D2D1_EDGEDETECTION_MODE_PREWITT = D2D1_EDGEDETECTION_MODE.PREWITT;
pub const D2D1_EDGEDETECTION_MODE_FORCE_DWORD = D2D1_EDGEDETECTION_MODE.FORCE_DWORD;

pub const D2D1_HIGHLIGHTSANDSHADOWS_PROP = enum(u32) {
    HIGHLIGHTS = 0,
    SHADOWS = 1,
    CLARITY = 2,
    INPUT_GAMMA = 3,
    MASK_BLUR_RADIUS = 4,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_HIGHLIGHTSANDSHADOWS_PROP_HIGHLIGHTS = D2D1_HIGHLIGHTSANDSHADOWS_PROP.HIGHLIGHTS;
pub const D2D1_HIGHLIGHTSANDSHADOWS_PROP_SHADOWS = D2D1_HIGHLIGHTSANDSHADOWS_PROP.SHADOWS;
pub const D2D1_HIGHLIGHTSANDSHADOWS_PROP_CLARITY = D2D1_HIGHLIGHTSANDSHADOWS_PROP.CLARITY;
pub const D2D1_HIGHLIGHTSANDSHADOWS_PROP_INPUT_GAMMA = D2D1_HIGHLIGHTSANDSHADOWS_PROP.INPUT_GAMMA;
pub const D2D1_HIGHLIGHTSANDSHADOWS_PROP_MASK_BLUR_RADIUS = D2D1_HIGHLIGHTSANDSHADOWS_PROP.MASK_BLUR_RADIUS;
pub const D2D1_HIGHLIGHTSANDSHADOWS_PROP_FORCE_DWORD = D2D1_HIGHLIGHTSANDSHADOWS_PROP.FORCE_DWORD;

pub const D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA = enum(u32) {
    LINEAR = 0,
    SRGB = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_LINEAR = D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA.LINEAR;
pub const D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_SRGB = D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA.SRGB;
pub const D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA_FORCE_DWORD = D2D1_HIGHLIGHTSANDSHADOWS_INPUT_GAMMA.FORCE_DWORD;

pub const D2D1_LOOKUPTABLE3D_PROP = enum(u32) {
    LUT = 0,
    ALPHA_MODE = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_LOOKUPTABLE3D_PROP_LUT = D2D1_LOOKUPTABLE3D_PROP.LUT;
pub const D2D1_LOOKUPTABLE3D_PROP_ALPHA_MODE = D2D1_LOOKUPTABLE3D_PROP.ALPHA_MODE;
pub const D2D1_LOOKUPTABLE3D_PROP_FORCE_DWORD = D2D1_LOOKUPTABLE3D_PROP.FORCE_DWORD;

pub const D2D1_OPACITY_PROP = enum(u32) {
    OPACITY = 0,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_OPACITY_PROP_OPACITY = D2D1_OPACITY_PROP.OPACITY;
pub const D2D1_OPACITY_PROP_FORCE_DWORD = D2D1_OPACITY_PROP.FORCE_DWORD;

pub const D2D1_CROSSFADE_PROP = enum(u32) {
    WEIGHT = 0,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_CROSSFADE_PROP_WEIGHT = D2D1_CROSSFADE_PROP.WEIGHT;
pub const D2D1_CROSSFADE_PROP_FORCE_DWORD = D2D1_CROSSFADE_PROP.FORCE_DWORD;

pub const D2D1_TINT_PROP = enum(u32) {
    COLOR = 0,
    CLAMP_OUTPUT = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_TINT_PROP_COLOR = D2D1_TINT_PROP.COLOR;
pub const D2D1_TINT_PROP_CLAMP_OUTPUT = D2D1_TINT_PROP.CLAMP_OUTPUT;
pub const D2D1_TINT_PROP_FORCE_DWORD = D2D1_TINT_PROP.FORCE_DWORD;

pub const D2D1_WHITELEVELADJUSTMENT_PROP = enum(u32) {
    INPUT_WHITE_LEVEL = 0,
    OUTPUT_WHITE_LEVEL = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_WHITELEVELADJUSTMENT_PROP_INPUT_WHITE_LEVEL = D2D1_WHITELEVELADJUSTMENT_PROP.INPUT_WHITE_LEVEL;
pub const D2D1_WHITELEVELADJUSTMENT_PROP_OUTPUT_WHITE_LEVEL = D2D1_WHITELEVELADJUSTMENT_PROP.OUTPUT_WHITE_LEVEL;
pub const D2D1_WHITELEVELADJUSTMENT_PROP_FORCE_DWORD = D2D1_WHITELEVELADJUSTMENT_PROP.FORCE_DWORD;

pub const D2D1_HDRTONEMAP_PROP = enum(u32) {
    INPUT_MAX_LUMINANCE = 0,
    OUTPUT_MAX_LUMINANCE = 1,
    DISPLAY_MODE = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_HDRTONEMAP_PROP_INPUT_MAX_LUMINANCE = D2D1_HDRTONEMAP_PROP.INPUT_MAX_LUMINANCE;
pub const D2D1_HDRTONEMAP_PROP_OUTPUT_MAX_LUMINANCE = D2D1_HDRTONEMAP_PROP.OUTPUT_MAX_LUMINANCE;
pub const D2D1_HDRTONEMAP_PROP_DISPLAY_MODE = D2D1_HDRTONEMAP_PROP.DISPLAY_MODE;
pub const D2D1_HDRTONEMAP_PROP_FORCE_DWORD = D2D1_HDRTONEMAP_PROP.FORCE_DWORD;

pub const D2D1_HDRTONEMAP_DISPLAY_MODE = enum(u32) {
    SDR = 0,
    HDR = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_HDRTONEMAP_DISPLAY_MODE_SDR = D2D1_HDRTONEMAP_DISPLAY_MODE.SDR;
pub const D2D1_HDRTONEMAP_DISPLAY_MODE_HDR = D2D1_HDRTONEMAP_DISPLAY_MODE.HDR;
pub const D2D1_HDRTONEMAP_DISPLAY_MODE_FORCE_DWORD = D2D1_HDRTONEMAP_DISPLAY_MODE.FORCE_DWORD;

pub const D2D1_RENDERING_PRIORITY = enum(u32) {
    NORMAL = 0,
    LOW = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_RENDERING_PRIORITY_NORMAL = D2D1_RENDERING_PRIORITY.NORMAL;
pub const D2D1_RENDERING_PRIORITY_LOW = D2D1_RENDERING_PRIORITY.LOW;
pub const D2D1_RENDERING_PRIORITY_FORCE_DWORD = D2D1_RENDERING_PRIORITY.FORCE_DWORD;

// TODO: this type is limited to platform 'windows8.1'
const IID_ID2D1GeometryRealization_Value = Guid.initString("a16907d7-bc02-4801-99e8-8cf7f485f774");
pub const IID_ID2D1GeometryRealization = &IID_ID2D1GeometryRealization_Value;
pub const ID2D1GeometryRealization = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_ID2D1DeviceContext1_Value = Guid.initString("d37f57e4-6908-459f-a199-e72f24f79987");
pub const IID_ID2D1DeviceContext1 = &IID_ID2D1DeviceContext1_Value;
pub const ID2D1DeviceContext1 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1DeviceContext.VTable,
        CreateFilledGeometryRealization: *const fn (
            self: *const ID2D1DeviceContext1,
            geometry: ?*ID2D1Geometry,
            flattening_tolerance: f32,
            geometry_realization: ?*?*ID2D1GeometryRealization,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStrokedGeometryRealization: *const fn (
            self: *const ID2D1DeviceContext1,
            geometry: ?*ID2D1Geometry,
            flattening_tolerance: f32,
            stroke_width: f32,
            stroke_style: ?*ID2D1StrokeStyle,
            geometry_realization: ?*?*ID2D1GeometryRealization,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawGeometryRealization: *const fn (
            self: *const ID2D1DeviceContext1,
            geometry_realization: ?*ID2D1GeometryRealization,
            brush: ?*ID2D1Brush,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1DeviceContext.MethodMixin(T);
            pub inline fn createFilledGeometryRealization(self: *const T, geometry_: ?*ID2D1Geometry, flattening_tolerance_: f32, geometry_realization_: ?*?*ID2D1GeometryRealization) HRESULT {
                return @as(*const ID2D1DeviceContext1.VTable, @ptrCast(self.vtable)).CreateFilledGeometryRealization(@as(*const ID2D1DeviceContext1, @ptrCast(self)), geometry_, flattening_tolerance_, geometry_realization_);
            }
            pub inline fn createStrokedGeometryRealization(self: *const T, geometry_: ?*ID2D1Geometry, flattening_tolerance_: f32, stroke_width_: f32, stroke_style_: ?*ID2D1StrokeStyle, geometry_realization_: ?*?*ID2D1GeometryRealization) HRESULT {
                return @as(*const ID2D1DeviceContext1.VTable, @ptrCast(self.vtable)).CreateStrokedGeometryRealization(@as(*const ID2D1DeviceContext1, @ptrCast(self)), geometry_, flattening_tolerance_, stroke_width_, stroke_style_, geometry_realization_);
            }
            pub inline fn drawGeometryRealization(self: *const T, geometry_realization_: ?*ID2D1GeometryRealization, brush_: ?*ID2D1Brush) void {
                return @as(*const ID2D1DeviceContext1.VTable, @ptrCast(self.vtable)).DrawGeometryRealization(@as(*const ID2D1DeviceContext1, @ptrCast(self)), geometry_realization_, brush_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_ID2D1Device1_Value = Guid.initString("d21768e1-23a4-4823-a14b-7c3eba85d658");
pub const IID_ID2D1Device1 = &IID_ID2D1Device1_Value;
pub const ID2D1Device1 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Device.VTable,
        GetRenderingPriority: *const fn (
            self: *const ID2D1Device1,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_RENDERING_PRIORITY,
        SetRenderingPriority: *const fn (
            self: *const ID2D1Device1,
            rendering_priority: D2D1_RENDERING_PRIORITY,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CreateDeviceContext: *const fn (
            self: *const ID2D1Device1,
            options: D2D1_DEVICE_CONTEXT_OPTIONS,
            device_context1: ?*?*ID2D1DeviceContext1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Device.MethodMixin(T);
            pub inline fn getRenderingPriority(self: *const T) D2D1_RENDERING_PRIORITY {
                return @as(*const ID2D1Device1.VTable, @ptrCast(self.vtable)).GetRenderingPriority(@as(*const ID2D1Device1, @ptrCast(self)));
            }
            pub inline fn setRenderingPriority(self: *const T, rendering_priority_: D2D1_RENDERING_PRIORITY) void {
                return @as(*const ID2D1Device1.VTable, @ptrCast(self.vtable)).SetRenderingPriority(@as(*const ID2D1Device1, @ptrCast(self)), rendering_priority_);
            }
            pub inline fn createDeviceContext(self: *const T, options_: D2D1_DEVICE_CONTEXT_OPTIONS, device_context1_: ?*?*ID2D1DeviceContext1) HRESULT {
                return @as(*const ID2D1Device1.VTable, @ptrCast(self.vtable)).CreateDeviceContext(@as(*const ID2D1Device1, @ptrCast(self)), options_, device_context1_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_ID2D1Factory2_Value = Guid.initString("94f81a73-9212-4376-9c58-b16a3a0d3992");
pub const IID_ID2D1Factory2 = &IID_ID2D1Factory2_Value;
pub const ID2D1Factory2 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Factory1.VTable,
        CreateDevice: *const fn (
            self: *const ID2D1Factory2,
            dxgi_device: ?*IDXGIDevice,
            d2d_device1: ?*?*ID2D1Device1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Factory1.MethodMixin(T);
            pub inline fn createDevice(self: *const T, dxgi_device_: ?*IDXGIDevice, d2d_device1_: ?*?*ID2D1Device1) HRESULT {
                return @as(*const ID2D1Factory2.VTable, @ptrCast(self.vtable)).CreateDevice(@as(*const ID2D1Factory2, @ptrCast(self)), dxgi_device_, d2d_device1_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_ID2D1CommandSink1_Value = Guid.initString("9eb767fd-4269-4467-b8c2-eb30cb305743");
pub const IID_ID2D1CommandSink1 = &IID_ID2D1CommandSink1_Value;
pub const ID2D1CommandSink1 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1CommandSink.VTable,
        SetPrimitiveBlend1: *const fn (
            self: *const ID2D1CommandSink1,
            primitive_blend: D2D1_PRIMITIVE_BLEND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1CommandSink.MethodMixin(T);
            pub inline fn setPrimitiveBlend1(self: *const T, primitive_blend_: D2D1_PRIMITIVE_BLEND) HRESULT {
                return @as(*const ID2D1CommandSink1.VTable, @ptrCast(self.vtable)).SetPrimitiveBlend1(@as(*const ID2D1CommandSink1, @ptrCast(self)), primitive_blend_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D2D1_SVG_PAINT_TYPE = enum(u32) {
    NONE = 0,
    COLOR = 1,
    CURRENT_COLOR = 2,
    URI = 3,
    URI_NONE = 4,
    URI_COLOR = 5,
    URI_CURRENT_COLOR = 6,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SVG_PAINT_TYPE_NONE = D2D1_SVG_PAINT_TYPE.NONE;
pub const D2D1_SVG_PAINT_TYPE_COLOR = D2D1_SVG_PAINT_TYPE.COLOR;
pub const D2D1_SVG_PAINT_TYPE_CURRENT_COLOR = D2D1_SVG_PAINT_TYPE.CURRENT_COLOR;
pub const D2D1_SVG_PAINT_TYPE_URI = D2D1_SVG_PAINT_TYPE.URI;
pub const D2D1_SVG_PAINT_TYPE_URI_NONE = D2D1_SVG_PAINT_TYPE.URI_NONE;
pub const D2D1_SVG_PAINT_TYPE_URI_COLOR = D2D1_SVG_PAINT_TYPE.URI_COLOR;
pub const D2D1_SVG_PAINT_TYPE_URI_CURRENT_COLOR = D2D1_SVG_PAINT_TYPE.URI_CURRENT_COLOR;
pub const D2D1_SVG_PAINT_TYPE_FORCE_DWORD = D2D1_SVG_PAINT_TYPE.FORCE_DWORD;

pub const D2D1_SVG_LENGTH_UNITS = enum(u32) {
    NUMBER = 0,
    PERCENTAGE = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SVG_LENGTH_UNITS_NUMBER = D2D1_SVG_LENGTH_UNITS.NUMBER;
pub const D2D1_SVG_LENGTH_UNITS_PERCENTAGE = D2D1_SVG_LENGTH_UNITS.PERCENTAGE;
pub const D2D1_SVG_LENGTH_UNITS_FORCE_DWORD = D2D1_SVG_LENGTH_UNITS.FORCE_DWORD;

pub const D2D1_SVG_DISPLAY = enum(u32) {
    INLINE = 0,
    NONE = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SVG_DISPLAY_INLINE = D2D1_SVG_DISPLAY.INLINE;
pub const D2D1_SVG_DISPLAY_NONE = D2D1_SVG_DISPLAY.NONE;
pub const D2D1_SVG_DISPLAY_FORCE_DWORD = D2D1_SVG_DISPLAY.FORCE_DWORD;

pub const D2D1_SVG_VISIBILITY = enum(u32) {
    VISIBLE = 0,
    HIDDEN = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SVG_VISIBILITY_VISIBLE = D2D1_SVG_VISIBILITY.VISIBLE;
pub const D2D1_SVG_VISIBILITY_HIDDEN = D2D1_SVG_VISIBILITY.HIDDEN;
pub const D2D1_SVG_VISIBILITY_FORCE_DWORD = D2D1_SVG_VISIBILITY.FORCE_DWORD;

pub const D2D1_SVG_OVERFLOW = enum(u32) {
    VISIBLE = 0,
    HIDDEN = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SVG_OVERFLOW_VISIBLE = D2D1_SVG_OVERFLOW.VISIBLE;
pub const D2D1_SVG_OVERFLOW_HIDDEN = D2D1_SVG_OVERFLOW.HIDDEN;
pub const D2D1_SVG_OVERFLOW_FORCE_DWORD = D2D1_SVG_OVERFLOW.FORCE_DWORD;

pub const D2D1_SVG_LINE_CAP = enum(u32) {
    BUTT = 0,
    SQUARE = 1,
    ROUND = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SVG_LINE_CAP_BUTT = D2D1_SVG_LINE_CAP.BUTT;
pub const D2D1_SVG_LINE_CAP_SQUARE = D2D1_SVG_LINE_CAP.SQUARE;
pub const D2D1_SVG_LINE_CAP_ROUND = D2D1_SVG_LINE_CAP.ROUND;
pub const D2D1_SVG_LINE_CAP_FORCE_DWORD = D2D1_SVG_LINE_CAP.FORCE_DWORD;

pub const D2D1_SVG_LINE_JOIN = enum(u32) {
    BEVEL = 1,
    MITER = 3,
    ROUND = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SVG_LINE_JOIN_BEVEL = D2D1_SVG_LINE_JOIN.BEVEL;
pub const D2D1_SVG_LINE_JOIN_MITER = D2D1_SVG_LINE_JOIN.MITER;
pub const D2D1_SVG_LINE_JOIN_ROUND = D2D1_SVG_LINE_JOIN.ROUND;
pub const D2D1_SVG_LINE_JOIN_FORCE_DWORD = D2D1_SVG_LINE_JOIN.FORCE_DWORD;

pub const D2D1_SVG_ASPECT_ALIGN = enum(u32) {
    NONE = 0,
    X_MIN_Y_MIN = 1,
    X_MID_Y_MIN = 2,
    X_MAX_Y_MIN = 3,
    X_MIN_Y_MID = 4,
    X_MID_Y_MID = 5,
    X_MAX_Y_MID = 6,
    X_MIN_Y_MAX = 7,
    X_MID_Y_MAX = 8,
    X_MAX_Y_MAX = 9,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SVG_ASPECT_ALIGN_NONE = D2D1_SVG_ASPECT_ALIGN.NONE;
pub const D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MIN = D2D1_SVG_ASPECT_ALIGN.X_MIN_Y_MIN;
pub const D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MIN = D2D1_SVG_ASPECT_ALIGN.X_MID_Y_MIN;
pub const D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MIN = D2D1_SVG_ASPECT_ALIGN.X_MAX_Y_MIN;
pub const D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MID = D2D1_SVG_ASPECT_ALIGN.X_MIN_Y_MID;
pub const D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MID = D2D1_SVG_ASPECT_ALIGN.X_MID_Y_MID;
pub const D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MID = D2D1_SVG_ASPECT_ALIGN.X_MAX_Y_MID;
pub const D2D1_SVG_ASPECT_ALIGN_X_MIN_Y_MAX = D2D1_SVG_ASPECT_ALIGN.X_MIN_Y_MAX;
pub const D2D1_SVG_ASPECT_ALIGN_X_MID_Y_MAX = D2D1_SVG_ASPECT_ALIGN.X_MID_Y_MAX;
pub const D2D1_SVG_ASPECT_ALIGN_X_MAX_Y_MAX = D2D1_SVG_ASPECT_ALIGN.X_MAX_Y_MAX;
pub const D2D1_SVG_ASPECT_ALIGN_FORCE_DWORD = D2D1_SVG_ASPECT_ALIGN.FORCE_DWORD;

pub const D2D1_SVG_ASPECT_SCALING = enum(u32) {
    MEET = 0,
    SLICE = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SVG_ASPECT_SCALING_MEET = D2D1_SVG_ASPECT_SCALING.MEET;
pub const D2D1_SVG_ASPECT_SCALING_SLICE = D2D1_SVG_ASPECT_SCALING.SLICE;
pub const D2D1_SVG_ASPECT_SCALING_FORCE_DWORD = D2D1_SVG_ASPECT_SCALING.FORCE_DWORD;

pub const D2D1_SVG_PATH_COMMAND = enum(u32) {
    CLOSE_PATH = 0,
    MOVE_ABSOLUTE = 1,
    MOVE_RELATIVE = 2,
    LINE_ABSOLUTE = 3,
    LINE_RELATIVE = 4,
    CUBIC_ABSOLUTE = 5,
    CUBIC_RELATIVE = 6,
    QUADRADIC_ABSOLUTE = 7,
    QUADRADIC_RELATIVE = 8,
    ARC_ABSOLUTE = 9,
    ARC_RELATIVE = 10,
    HORIZONTAL_ABSOLUTE = 11,
    HORIZONTAL_RELATIVE = 12,
    VERTICAL_ABSOLUTE = 13,
    VERTICAL_RELATIVE = 14,
    CUBIC_SMOOTH_ABSOLUTE = 15,
    CUBIC_SMOOTH_RELATIVE = 16,
    QUADRADIC_SMOOTH_ABSOLUTE = 17,
    QUADRADIC_SMOOTH_RELATIVE = 18,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SVG_PATH_COMMAND_CLOSE_PATH = D2D1_SVG_PATH_COMMAND.CLOSE_PATH;
pub const D2D1_SVG_PATH_COMMAND_MOVE_ABSOLUTE = D2D1_SVG_PATH_COMMAND.MOVE_ABSOLUTE;
pub const D2D1_SVG_PATH_COMMAND_MOVE_RELATIVE = D2D1_SVG_PATH_COMMAND.MOVE_RELATIVE;
pub const D2D1_SVG_PATH_COMMAND_LINE_ABSOLUTE = D2D1_SVG_PATH_COMMAND.LINE_ABSOLUTE;
pub const D2D1_SVG_PATH_COMMAND_LINE_RELATIVE = D2D1_SVG_PATH_COMMAND.LINE_RELATIVE;
pub const D2D1_SVG_PATH_COMMAND_CUBIC_ABSOLUTE = D2D1_SVG_PATH_COMMAND.CUBIC_ABSOLUTE;
pub const D2D1_SVG_PATH_COMMAND_CUBIC_RELATIVE = D2D1_SVG_PATH_COMMAND.CUBIC_RELATIVE;
pub const D2D1_SVG_PATH_COMMAND_QUADRADIC_ABSOLUTE = D2D1_SVG_PATH_COMMAND.QUADRADIC_ABSOLUTE;
pub const D2D1_SVG_PATH_COMMAND_QUADRADIC_RELATIVE = D2D1_SVG_PATH_COMMAND.QUADRADIC_RELATIVE;
pub const D2D1_SVG_PATH_COMMAND_ARC_ABSOLUTE = D2D1_SVG_PATH_COMMAND.ARC_ABSOLUTE;
pub const D2D1_SVG_PATH_COMMAND_ARC_RELATIVE = D2D1_SVG_PATH_COMMAND.ARC_RELATIVE;
pub const D2D1_SVG_PATH_COMMAND_HORIZONTAL_ABSOLUTE = D2D1_SVG_PATH_COMMAND.HORIZONTAL_ABSOLUTE;
pub const D2D1_SVG_PATH_COMMAND_HORIZONTAL_RELATIVE = D2D1_SVG_PATH_COMMAND.HORIZONTAL_RELATIVE;
pub const D2D1_SVG_PATH_COMMAND_VERTICAL_ABSOLUTE = D2D1_SVG_PATH_COMMAND.VERTICAL_ABSOLUTE;
pub const D2D1_SVG_PATH_COMMAND_VERTICAL_RELATIVE = D2D1_SVG_PATH_COMMAND.VERTICAL_RELATIVE;
pub const D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_ABSOLUTE = D2D1_SVG_PATH_COMMAND.CUBIC_SMOOTH_ABSOLUTE;
pub const D2D1_SVG_PATH_COMMAND_CUBIC_SMOOTH_RELATIVE = D2D1_SVG_PATH_COMMAND.CUBIC_SMOOTH_RELATIVE;
pub const D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_ABSOLUTE = D2D1_SVG_PATH_COMMAND.QUADRADIC_SMOOTH_ABSOLUTE;
pub const D2D1_SVG_PATH_COMMAND_QUADRADIC_SMOOTH_RELATIVE = D2D1_SVG_PATH_COMMAND.QUADRADIC_SMOOTH_RELATIVE;
pub const D2D1_SVG_PATH_COMMAND_FORCE_DWORD = D2D1_SVG_PATH_COMMAND.FORCE_DWORD;

pub const D2D1_SVG_UNIT_TYPE = enum(u32) {
    USER_SPACE_ON_USE = 0,
    OBJECT_BOUNDING_BOX = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SVG_UNIT_TYPE_USER_SPACE_ON_USE = D2D1_SVG_UNIT_TYPE.USER_SPACE_ON_USE;
pub const D2D1_SVG_UNIT_TYPE_OBJECT_BOUNDING_BOX = D2D1_SVG_UNIT_TYPE.OBJECT_BOUNDING_BOX;
pub const D2D1_SVG_UNIT_TYPE_FORCE_DWORD = D2D1_SVG_UNIT_TYPE.FORCE_DWORD;

pub const D2D1_SVG_ATTRIBUTE_STRING_TYPE = enum(u32) {
    SVG = 0,
    ID = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SVG_ATTRIBUTE_STRING_TYPE_SVG = D2D1_SVG_ATTRIBUTE_STRING_TYPE.SVG;
pub const D2D1_SVG_ATTRIBUTE_STRING_TYPE_ID = D2D1_SVG_ATTRIBUTE_STRING_TYPE.ID;
pub const D2D1_SVG_ATTRIBUTE_STRING_TYPE_FORCE_DWORD = D2D1_SVG_ATTRIBUTE_STRING_TYPE.FORCE_DWORD;

pub const D2D1_SVG_ATTRIBUTE_POD_TYPE = enum(u32) {
    FLOAT = 0,
    COLOR = 1,
    FILL_MODE = 2,
    DISPLAY = 3,
    OVERFLOW = 4,
    LINE_CAP = 5,
    LINE_JOIN = 6,
    VISIBILITY = 7,
    MATRIX = 8,
    UNIT_TYPE = 9,
    EXTEND_MODE = 10,
    PRESERVE_ASPECT_RATIO = 11,
    VIEWBOX = 12,
    LENGTH = 13,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_SVG_ATTRIBUTE_POD_TYPE_FLOAT = D2D1_SVG_ATTRIBUTE_POD_TYPE.FLOAT;
pub const D2D1_SVG_ATTRIBUTE_POD_TYPE_COLOR = D2D1_SVG_ATTRIBUTE_POD_TYPE.COLOR;
pub const D2D1_SVG_ATTRIBUTE_POD_TYPE_FILL_MODE = D2D1_SVG_ATTRIBUTE_POD_TYPE.FILL_MODE;
pub const D2D1_SVG_ATTRIBUTE_POD_TYPE_DISPLAY = D2D1_SVG_ATTRIBUTE_POD_TYPE.DISPLAY;
pub const D2D1_SVG_ATTRIBUTE_POD_TYPE_OVERFLOW = D2D1_SVG_ATTRIBUTE_POD_TYPE.OVERFLOW;
pub const D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_CAP = D2D1_SVG_ATTRIBUTE_POD_TYPE.LINE_CAP;
pub const D2D1_SVG_ATTRIBUTE_POD_TYPE_LINE_JOIN = D2D1_SVG_ATTRIBUTE_POD_TYPE.LINE_JOIN;
pub const D2D1_SVG_ATTRIBUTE_POD_TYPE_VISIBILITY = D2D1_SVG_ATTRIBUTE_POD_TYPE.VISIBILITY;
pub const D2D1_SVG_ATTRIBUTE_POD_TYPE_MATRIX = D2D1_SVG_ATTRIBUTE_POD_TYPE.MATRIX;
pub const D2D1_SVG_ATTRIBUTE_POD_TYPE_UNIT_TYPE = D2D1_SVG_ATTRIBUTE_POD_TYPE.UNIT_TYPE;
pub const D2D1_SVG_ATTRIBUTE_POD_TYPE_EXTEND_MODE = D2D1_SVG_ATTRIBUTE_POD_TYPE.EXTEND_MODE;
pub const D2D1_SVG_ATTRIBUTE_POD_TYPE_PRESERVE_ASPECT_RATIO = D2D1_SVG_ATTRIBUTE_POD_TYPE.PRESERVE_ASPECT_RATIO;
pub const D2D1_SVG_ATTRIBUTE_POD_TYPE_VIEWBOX = D2D1_SVG_ATTRIBUTE_POD_TYPE.VIEWBOX;
pub const D2D1_SVG_ATTRIBUTE_POD_TYPE_LENGTH = D2D1_SVG_ATTRIBUTE_POD_TYPE.LENGTH;
pub const D2D1_SVG_ATTRIBUTE_POD_TYPE_FORCE_DWORD = D2D1_SVG_ATTRIBUTE_POD_TYPE.FORCE_DWORD;

pub const D2D1_SVG_LENGTH = extern struct {
    value: f32,
    units: D2D1_SVG_LENGTH_UNITS,
};

pub const D2D1_SVG_PRESERVE_ASPECT_RATIO = extern struct {
    @"defer": BOOL,
    @"align": D2D1_SVG_ASPECT_ALIGN,
    meetOrSlice: D2D1_SVG_ASPECT_SCALING,
};

pub const D2D1_SVG_VIEWBOX = extern struct {
    x: f32,
    y: f32,
    width: f32,
    height: f32,
};

const IID_ID2D1SvgAttribute_Value = Guid.initString("c9cdb0dd-f8c9-4e70-b7c2-301c80292c5e");
pub const IID_ID2D1SvgAttribute = &IID_ID2D1SvgAttribute_Value;
pub const ID2D1SvgAttribute = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
        GetElement: *const fn (
            self: *const ID2D1SvgAttribute,
            element: ?*?*ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Clone: *const fn (
            self: *const ID2D1SvgAttribute,
            attribute: ?*?*ID2D1SvgAttribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
            pub inline fn getElement(self: *const T, element_: ?*?*ID2D1SvgElement) void {
                return @as(*const ID2D1SvgAttribute.VTable, @ptrCast(self.vtable)).GetElement(@as(*const ID2D1SvgAttribute, @ptrCast(self)), element_);
            }
            pub inline fn clone(self: *const T, attribute_: ?*?*ID2D1SvgAttribute) HRESULT {
                return @as(*const ID2D1SvgAttribute.VTable, @ptrCast(self.vtable)).Clone(@as(*const ID2D1SvgAttribute, @ptrCast(self)), attribute_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1SvgPaint_Value = Guid.initString("d59bab0a-68a2-455b-a5dc-9eb2854e2490");
pub const IID_ID2D1SvgPaint = &IID_ID2D1SvgPaint_Value;
pub const ID2D1SvgPaint = extern struct {
    pub const VTable = extern struct {
        base: ID2D1SvgAttribute.VTable,
        SetPaintType: *const fn (
            self: *const ID2D1SvgPaint,
            paint_type: D2D1_SVG_PAINT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPaintType: *const fn (
            self: *const ID2D1SvgPaint,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_SVG_PAINT_TYPE,
        SetColor: *const fn (
            self: *const ID2D1SvgPaint,
            color: ?*const D2D1_COLOR_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColor: *const fn (
            self: *const ID2D1SvgPaint,
            color: ?*D2D1_COLOR_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetId: *const fn (
            self: *const ID2D1SvgPaint,
            id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetId: *const fn (
            self: *const ID2D1SvgPaint,
            id: [*:0]u16,
            id_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIdLength: *const fn (
            self: *const ID2D1SvgPaint,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1SvgAttribute.MethodMixin(T);
            pub inline fn setPaintType(self: *const T, paint_type_: D2D1_SVG_PAINT_TYPE) HRESULT {
                return @as(*const ID2D1SvgPaint.VTable, @ptrCast(self.vtable)).SetPaintType(@as(*const ID2D1SvgPaint, @ptrCast(self)), paint_type_);
            }
            pub inline fn getPaintType(self: *const T) D2D1_SVG_PAINT_TYPE {
                return @as(*const ID2D1SvgPaint.VTable, @ptrCast(self.vtable)).GetPaintType(@as(*const ID2D1SvgPaint, @ptrCast(self)));
            }
            pub inline fn setColor(self: *const T, color_: ?*const D2D1_COLOR_F) HRESULT {
                return @as(*const ID2D1SvgPaint.VTable, @ptrCast(self.vtable)).SetColor(@as(*const ID2D1SvgPaint, @ptrCast(self)), color_);
            }
            pub inline fn getColor(self: *const T, color_: ?*D2D1_COLOR_F) void {
                return @as(*const ID2D1SvgPaint.VTable, @ptrCast(self.vtable)).GetColor(@as(*const ID2D1SvgPaint, @ptrCast(self)), color_);
            }
            pub inline fn setId(self: *const T, id_: ?[*:0]const u16) HRESULT {
                return @as(*const ID2D1SvgPaint.VTable, @ptrCast(self.vtable)).SetId(@as(*const ID2D1SvgPaint, @ptrCast(self)), id_);
            }
            pub inline fn getId(self: *const T, id_: [*:0]u16, id_count_: u32) HRESULT {
                return @as(*const ID2D1SvgPaint.VTable, @ptrCast(self.vtable)).GetId(@as(*const ID2D1SvgPaint, @ptrCast(self)), id_, id_count_);
            }
            pub inline fn getIdLength(self: *const T) u32 {
                return @as(*const ID2D1SvgPaint.VTable, @ptrCast(self.vtable)).GetIdLength(@as(*const ID2D1SvgPaint, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1SvgStrokeDashArray_Value = Guid.initString("f1c0ca52-92a3-4f00-b4ce-f35691efd9d9");
pub const IID_ID2D1SvgStrokeDashArray = &IID_ID2D1SvgStrokeDashArray_Value;
pub const ID2D1SvgStrokeDashArray = extern struct {
    pub const VTable = extern struct {
        base: ID2D1SvgAttribute.VTable,
        RemoveDashesAtEnd: *const fn (
            self: *const ID2D1SvgStrokeDashArray,
            dashes_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateDashes: *const fn (
            self: *const ID2D1SvgStrokeDashArray,
            dashes: [*]const D2D1_SVG_LENGTH,
            dashes_count: u32,
            start_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateDashes1: *const fn (
            self: *const ID2D1SvgStrokeDashArray,
            dashes: [*]const f32,
            dashes_count: u32,
            start_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDashes: *const fn (
            self: *const ID2D1SvgStrokeDashArray,
            dashes: [*]D2D1_SVG_LENGTH,
            dashes_count: u32,
            start_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDashes1: *const fn (
            self: *const ID2D1SvgStrokeDashArray,
            dashes: [*]f32,
            dashes_count: u32,
            start_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDashesCount: *const fn (
            self: *const ID2D1SvgStrokeDashArray,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1SvgAttribute.MethodMixin(T);
            pub inline fn removeDashesAtEnd(self: *const T, dashes_count_: u32) HRESULT {
                return @as(*const ID2D1SvgStrokeDashArray.VTable, @ptrCast(self.vtable)).RemoveDashesAtEnd(@as(*const ID2D1SvgStrokeDashArray, @ptrCast(self)), dashes_count_);
            }
            pub inline fn updateDashes(self: *const T, dashes_: [*]const D2D1_SVG_LENGTH, dashes_count_: u32, start_index_: u32) HRESULT {
                return @as(*const ID2D1SvgStrokeDashArray.VTable, @ptrCast(self.vtable)).UpdateDashes(@as(*const ID2D1SvgStrokeDashArray, @ptrCast(self)), dashes_, dashes_count_, start_index_);
            }
            pub inline fn updateDashes1(self: *const T, dashes_: [*]const f32, dashes_count_: u32, start_index_: u32) HRESULT {
                return @as(*const ID2D1SvgStrokeDashArray.VTable, @ptrCast(self.vtable)).UpdateDashes(@as(*const ID2D1SvgStrokeDashArray, @ptrCast(self)), dashes_, dashes_count_, start_index_);
            }
            pub inline fn getDashes(self: *const T, dashes_: [*]D2D1_SVG_LENGTH, dashes_count_: u32, start_index_: u32) HRESULT {
                return @as(*const ID2D1SvgStrokeDashArray.VTable, @ptrCast(self.vtable)).GetDashes(@as(*const ID2D1SvgStrokeDashArray, @ptrCast(self)), dashes_, dashes_count_, start_index_);
            }
            pub inline fn getDashes1(self: *const T, dashes_: [*]f32, dashes_count_: u32, start_index_: u32) HRESULT {
                return @as(*const ID2D1SvgStrokeDashArray.VTable, @ptrCast(self.vtable)).GetDashes(@as(*const ID2D1SvgStrokeDashArray, @ptrCast(self)), dashes_, dashes_count_, start_index_);
            }
            pub inline fn getDashesCount(self: *const T) u32 {
                return @as(*const ID2D1SvgStrokeDashArray.VTable, @ptrCast(self.vtable)).GetDashesCount(@as(*const ID2D1SvgStrokeDashArray, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1SvgPointCollection_Value = Guid.initString("9dbe4c0d-3572-4dd9-9825-5530813bb712");
pub const IID_ID2D1SvgPointCollection = &IID_ID2D1SvgPointCollection_Value;
pub const ID2D1SvgPointCollection = extern struct {
    pub const VTable = extern struct {
        base: ID2D1SvgAttribute.VTable,
        RemovePointsAtEnd: *const fn (
            self: *const ID2D1SvgPointCollection,
            points_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdatePoints: *const fn (
            self: *const ID2D1SvgPointCollection,
            points: [*]const D2D_POINT_2F,
            points_count: u32,
            start_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPoints: *const fn (
            self: *const ID2D1SvgPointCollection,
            points: [*]D2D_POINT_2F,
            points_count: u32,
            start_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPointsCount: *const fn (
            self: *const ID2D1SvgPointCollection,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1SvgAttribute.MethodMixin(T);
            pub inline fn removePointsAtEnd(self: *const T, points_count_: u32) HRESULT {
                return @as(*const ID2D1SvgPointCollection.VTable, @ptrCast(self.vtable)).RemovePointsAtEnd(@as(*const ID2D1SvgPointCollection, @ptrCast(self)), points_count_);
            }
            pub inline fn updatePoints(self: *const T, points_: [*]const D2D_POINT_2F, points_count_: u32, start_index_: u32) HRESULT {
                return @as(*const ID2D1SvgPointCollection.VTable, @ptrCast(self.vtable)).UpdatePoints(@as(*const ID2D1SvgPointCollection, @ptrCast(self)), points_, points_count_, start_index_);
            }
            pub inline fn getPoints(self: *const T, points_: [*]D2D_POINT_2F, points_count_: u32, start_index_: u32) HRESULT {
                return @as(*const ID2D1SvgPointCollection.VTable, @ptrCast(self.vtable)).GetPoints(@as(*const ID2D1SvgPointCollection, @ptrCast(self)), points_, points_count_, start_index_);
            }
            pub inline fn getPointsCount(self: *const T) u32 {
                return @as(*const ID2D1SvgPointCollection.VTable, @ptrCast(self.vtable)).GetPointsCount(@as(*const ID2D1SvgPointCollection, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1SvgPathData_Value = Guid.initString("c095e4f4-bb98-43d6-9745-4d1b84ec9888");
pub const IID_ID2D1SvgPathData = &IID_ID2D1SvgPathData_Value;
pub const ID2D1SvgPathData = extern struct {
    pub const VTable = extern struct {
        base: ID2D1SvgAttribute.VTable,
        RemoveSegmentDataAtEnd: *const fn (
            self: *const ID2D1SvgPathData,
            data_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateSegmentData: *const fn (
            self: *const ID2D1SvgPathData,
            data: [*]const f32,
            data_count: u32,
            start_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSegmentData: *const fn (
            self: *const ID2D1SvgPathData,
            data: [*]f32,
            data_count: u32,
            start_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSegmentDataCount: *const fn (
            self: *const ID2D1SvgPathData,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        RemoveCommandsAtEnd: *const fn (
            self: *const ID2D1SvgPathData,
            commands_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateCommands: *const fn (
            self: *const ID2D1SvgPathData,
            commands: [*]const D2D1_SVG_PATH_COMMAND,
            commands_count: u32,
            start_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCommands: *const fn (
            self: *const ID2D1SvgPathData,
            commands: [*]D2D1_SVG_PATH_COMMAND,
            commands_count: u32,
            start_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCommandsCount: *const fn (
            self: *const ID2D1SvgPathData,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        CreatePathGeometry: *const fn (
            self: *const ID2D1SvgPathData,
            fill_mode: D2D1_FILL_MODE,
            path_geometry: ?*?*ID2D1PathGeometry1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1SvgAttribute.MethodMixin(T);
            pub inline fn removeSegmentDataAtEnd(self: *const T, data_count_: u32) HRESULT {
                return @as(*const ID2D1SvgPathData.VTable, @ptrCast(self.vtable)).RemoveSegmentDataAtEnd(@as(*const ID2D1SvgPathData, @ptrCast(self)), data_count_);
            }
            pub inline fn updateSegmentData(self: *const T, data_: [*]const f32, data_count_: u32, start_index_: u32) HRESULT {
                return @as(*const ID2D1SvgPathData.VTable, @ptrCast(self.vtable)).UpdateSegmentData(@as(*const ID2D1SvgPathData, @ptrCast(self)), data_, data_count_, start_index_);
            }
            pub inline fn getSegmentData(self: *const T, data_: [*]f32, data_count_: u32, start_index_: u32) HRESULT {
                return @as(*const ID2D1SvgPathData.VTable, @ptrCast(self.vtable)).GetSegmentData(@as(*const ID2D1SvgPathData, @ptrCast(self)), data_, data_count_, start_index_);
            }
            pub inline fn getSegmentDataCount(self: *const T) u32 {
                return @as(*const ID2D1SvgPathData.VTable, @ptrCast(self.vtable)).GetSegmentDataCount(@as(*const ID2D1SvgPathData, @ptrCast(self)));
            }
            pub inline fn removeCommandsAtEnd(self: *const T, commands_count_: u32) HRESULT {
                return @as(*const ID2D1SvgPathData.VTable, @ptrCast(self.vtable)).RemoveCommandsAtEnd(@as(*const ID2D1SvgPathData, @ptrCast(self)), commands_count_);
            }
            pub inline fn updateCommands(self: *const T, commands_: [*]const D2D1_SVG_PATH_COMMAND, commands_count_: u32, start_index_: u32) HRESULT {
                return @as(*const ID2D1SvgPathData.VTable, @ptrCast(self.vtable)).UpdateCommands(@as(*const ID2D1SvgPathData, @ptrCast(self)), commands_, commands_count_, start_index_);
            }
            pub inline fn getCommands(self: *const T, commands_: [*]D2D1_SVG_PATH_COMMAND, commands_count_: u32, start_index_: u32) HRESULT {
                return @as(*const ID2D1SvgPathData.VTable, @ptrCast(self.vtable)).GetCommands(@as(*const ID2D1SvgPathData, @ptrCast(self)), commands_, commands_count_, start_index_);
            }
            pub inline fn getCommandsCount(self: *const T) u32 {
                return @as(*const ID2D1SvgPathData.VTable, @ptrCast(self.vtable)).GetCommandsCount(@as(*const ID2D1SvgPathData, @ptrCast(self)));
            }
            pub inline fn createPathGeometry(self: *const T, fill_mode_: D2D1_FILL_MODE, path_geometry_: ?*?*ID2D1PathGeometry1) HRESULT {
                return @as(*const ID2D1SvgPathData.VTable, @ptrCast(self.vtable)).CreatePathGeometry(@as(*const ID2D1SvgPathData, @ptrCast(self)), fill_mode_, path_geometry_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1SvgElement_Value = Guid.initString("ac7b67a6-183e-49c1-a823-0ebe40b0db29");
pub const IID_ID2D1SvgElement = &IID_ID2D1SvgElement_Value;
pub const ID2D1SvgElement = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
        GetDocument: *const fn (
            self: *const ID2D1SvgElement,
            document: ?*?*ID2D1SvgDocument,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetTagName: *const fn (
            self: *const ID2D1SvgElement,
            name: [*:0]u16,
            name_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTagNameLength: *const fn (
            self: *const ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        IsTextContent: *const fn (
            self: *const ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetParent: *const fn (
            self: *const ID2D1SvgElement,
            parent: ?*?*ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) void,
        HasChildren: *const fn (
            self: *const ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetFirstChild: *const fn (
            self: *const ID2D1SvgElement,
            child: ?*?*ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetLastChild: *const fn (
            self: *const ID2D1SvgElement,
            child: ?*?*ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetPreviousChild: *const fn (
            self: *const ID2D1SvgElement,
            reference_child: ?*ID2D1SvgElement,
            previous_child: ?*?*ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextChild: *const fn (
            self: *const ID2D1SvgElement,
            reference_child: ?*ID2D1SvgElement,
            next_child: ?*?*ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertChildBefore: *const fn (
            self: *const ID2D1SvgElement,
            new_child: ?*ID2D1SvgElement,
            reference_child: ?*ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendChild: *const fn (
            self: *const ID2D1SvgElement,
            new_child: ?*ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReplaceChild: *const fn (
            self: *const ID2D1SvgElement,
            new_child: ?*ID2D1SvgElement,
            old_child: ?*ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveChild: *const fn (
            self: *const ID2D1SvgElement,
            old_child: ?*ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateChild: *const fn (
            self: *const ID2D1SvgElement,
            tag_name: ?[*:0]const u16,
            new_child: ?*?*ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsAttributeSpecified: *const fn (
            self: *const ID2D1SvgElement,
            name: ?[*:0]const u16,
            inherited: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetSpecifiedAttributeCount: *const fn (
            self: *const ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetSpecifiedAttributeName: *const fn (
            self: *const ID2D1SvgElement,
            index: u32,
            name: [*:0]u16,
            name_count: u32,
            inherited: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpecifiedAttributeNameLength: *const fn (
            self: *const ID2D1SvgElement,
            index: u32,
            name_length: ?*u32,
            inherited: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAttribute: *const fn (
            self: *const ID2D1SvgElement,
            name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTextValue: *const fn (
            self: *const ID2D1SvgElement,
            name: [*:0]const u16,
            name_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTextValue: *const fn (
            self: *const ID2D1SvgElement,
            name: [*:0]u16,
            name_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTextValueLength: *const fn (
            self: *const ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        SetAttributeValue: *const fn (
            self: *const ID2D1SvgElement,
            name: ?[*:0]const u16,
            value: ?*ID2D1SvgAttribute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAttributeValue1: *const fn (
            self: *const ID2D1SvgElement,
            name: ?[*:0]const u16,
            type: D2D1_SVG_ATTRIBUTE_POD_TYPE,
            // TODO: what to do with BytesParamIndex 3?
            value: ?*const anyopaque,
            value_size_in_bytes: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAttributeValue2: *const fn (
            self: *const ID2D1SvgElement,
            name: ?[*:0]const u16,
            type: D2D1_SVG_ATTRIBUTE_STRING_TYPE,
            value: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeValue: *const fn (
            self: *const ID2D1SvgElement,
            name: ?[*:0]const u16,
            riid: ?*const Guid,
            value: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeValue1: *const fn (
            self: *const ID2D1SvgElement,
            name: ?[*:0]const u16,
            type: D2D1_SVG_ATTRIBUTE_POD_TYPE,
            // TODO: what to do with BytesParamIndex 3?
            value: ?*anyopaque,
            value_size_in_bytes: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeValue2: *const fn (
            self: *const ID2D1SvgElement,
            name: ?[*:0]const u16,
            type: D2D1_SVG_ATTRIBUTE_STRING_TYPE,
            value: [*:0]u16,
            value_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeValueLength: *const fn (
            self: *const ID2D1SvgElement,
            name: ?[*:0]const u16,
            type: D2D1_SVG_ATTRIBUTE_STRING_TYPE,
            value_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
            pub inline fn getDocument(self: *const T, document_: ?*?*ID2D1SvgDocument) void {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).GetDocument(@as(*const ID2D1SvgElement, @ptrCast(self)), document_);
            }
            pub inline fn getTagName(self: *const T, name_: [*:0]u16, name_count_: u32) HRESULT {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).GetTagName(@as(*const ID2D1SvgElement, @ptrCast(self)), name_, name_count_);
            }
            pub inline fn getTagNameLength(self: *const T) u32 {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).GetTagNameLength(@as(*const ID2D1SvgElement, @ptrCast(self)));
            }
            pub inline fn isTextContent(self: *const T) BOOL {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).IsTextContent(@as(*const ID2D1SvgElement, @ptrCast(self)));
            }
            pub inline fn getParent(self: *const T, parent_: ?*?*ID2D1SvgElement) void {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).GetParent(@as(*const ID2D1SvgElement, @ptrCast(self)), parent_);
            }
            pub inline fn hasChildren(self: *const T) BOOL {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).HasChildren(@as(*const ID2D1SvgElement, @ptrCast(self)));
            }
            pub inline fn getFirstChild(self: *const T, child_: ?*?*ID2D1SvgElement) void {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).GetFirstChild(@as(*const ID2D1SvgElement, @ptrCast(self)), child_);
            }
            pub inline fn getLastChild(self: *const T, child_: ?*?*ID2D1SvgElement) void {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).GetLastChild(@as(*const ID2D1SvgElement, @ptrCast(self)), child_);
            }
            pub inline fn getPreviousChild(self: *const T, reference_child_: ?*ID2D1SvgElement, previous_child_: ?*?*ID2D1SvgElement) HRESULT {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).GetPreviousChild(@as(*const ID2D1SvgElement, @ptrCast(self)), reference_child_, previous_child_);
            }
            pub inline fn getNextChild(self: *const T, reference_child_: ?*ID2D1SvgElement, next_child_: ?*?*ID2D1SvgElement) HRESULT {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).GetNextChild(@as(*const ID2D1SvgElement, @ptrCast(self)), reference_child_, next_child_);
            }
            pub inline fn insertChildBefore(self: *const T, new_child_: ?*ID2D1SvgElement, reference_child_: ?*ID2D1SvgElement) HRESULT {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).InsertChildBefore(@as(*const ID2D1SvgElement, @ptrCast(self)), new_child_, reference_child_);
            }
            pub inline fn appendChild(self: *const T, new_child_: ?*ID2D1SvgElement) HRESULT {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).AppendChild(@as(*const ID2D1SvgElement, @ptrCast(self)), new_child_);
            }
            pub inline fn replaceChild(self: *const T, new_child_: ?*ID2D1SvgElement, old_child_: ?*ID2D1SvgElement) HRESULT {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).ReplaceChild(@as(*const ID2D1SvgElement, @ptrCast(self)), new_child_, old_child_);
            }
            pub inline fn removeChild(self: *const T, old_child_: ?*ID2D1SvgElement) HRESULT {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).RemoveChild(@as(*const ID2D1SvgElement, @ptrCast(self)), old_child_);
            }
            pub inline fn createChild(self: *const T, tag_name_: ?[*:0]const u16, new_child_: ?*?*ID2D1SvgElement) HRESULT {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).CreateChild(@as(*const ID2D1SvgElement, @ptrCast(self)), tag_name_, new_child_);
            }
            pub inline fn isAttributeSpecified(self: *const T, name_: ?[*:0]const u16, inherited_: ?*BOOL) BOOL {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).IsAttributeSpecified(@as(*const ID2D1SvgElement, @ptrCast(self)), name_, inherited_);
            }
            pub inline fn getSpecifiedAttributeCount(self: *const T) u32 {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).GetSpecifiedAttributeCount(@as(*const ID2D1SvgElement, @ptrCast(self)));
            }
            pub inline fn getSpecifiedAttributeName(self: *const T, index_: u32, name_: [*:0]u16, name_count_: u32, inherited_: ?*BOOL) HRESULT {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).GetSpecifiedAttributeName(@as(*const ID2D1SvgElement, @ptrCast(self)), index_, name_, name_count_, inherited_);
            }
            pub inline fn getSpecifiedAttributeNameLength(self: *const T, index_: u32, name_length_: ?*u32, inherited_: ?*BOOL) HRESULT {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).GetSpecifiedAttributeNameLength(@as(*const ID2D1SvgElement, @ptrCast(self)), index_, name_length_, inherited_);
            }
            pub inline fn removeAttribute(self: *const T, name_: ?[*:0]const u16) HRESULT {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).RemoveAttribute(@as(*const ID2D1SvgElement, @ptrCast(self)), name_);
            }
            pub inline fn setTextValue(self: *const T, name_: [*:0]const u16, name_count_: u32) HRESULT {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).SetTextValue(@as(*const ID2D1SvgElement, @ptrCast(self)), name_, name_count_);
            }
            pub inline fn getTextValue(self: *const T, name_: [*:0]u16, name_count_: u32) HRESULT {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).GetTextValue(@as(*const ID2D1SvgElement, @ptrCast(self)), name_, name_count_);
            }
            pub inline fn getTextValueLength(self: *const T) u32 {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).GetTextValueLength(@as(*const ID2D1SvgElement, @ptrCast(self)));
            }
            pub inline fn setAttributeValue(self: *const T, name_: ?[*:0]const u16, value_: ?*ID2D1SvgAttribute) HRESULT {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).SetAttributeValue(@as(*const ID2D1SvgElement, @ptrCast(self)), name_, value_);
            }
            pub inline fn setAttributeValue1(self: *const T, name_: ?[*:0]const u16, type_: D2D1_SVG_ATTRIBUTE_POD_TYPE, value_: ?*const anyopaque, value_size_in_bytes_: u32) HRESULT {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).SetAttributeValue(@as(*const ID2D1SvgElement, @ptrCast(self)), name_, type_, value_, value_size_in_bytes_);
            }
            pub inline fn setAttributeValue2(self: *const T, name_: ?[*:0]const u16, type_: D2D1_SVG_ATTRIBUTE_STRING_TYPE, value_: ?[*:0]const u16) HRESULT {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).SetAttributeValue(@as(*const ID2D1SvgElement, @ptrCast(self)), name_, type_, value_);
            }
            pub inline fn getAttributeValue(self: *const T, name_: ?[*:0]const u16, riid_: ?*const Guid, value_: ?*?*anyopaque) HRESULT {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).GetAttributeValue(@as(*const ID2D1SvgElement, @ptrCast(self)), name_, riid_, value_);
            }
            pub inline fn getAttributeValue1(self: *const T, name_: ?[*:0]const u16, type_: D2D1_SVG_ATTRIBUTE_POD_TYPE, value_: ?*anyopaque, value_size_in_bytes_: u32) HRESULT {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).GetAttributeValue(@as(*const ID2D1SvgElement, @ptrCast(self)), name_, type_, value_, value_size_in_bytes_);
            }
            pub inline fn getAttributeValue2(self: *const T, name_: ?[*:0]const u16, type_: D2D1_SVG_ATTRIBUTE_STRING_TYPE, value_: [*:0]u16, value_count_: u32) HRESULT {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).GetAttributeValue(@as(*const ID2D1SvgElement, @ptrCast(self)), name_, type_, value_, value_count_);
            }
            pub inline fn getAttributeValueLength(self: *const T, name_: ?[*:0]const u16, type_: D2D1_SVG_ATTRIBUTE_STRING_TYPE, value_length_: ?*u32) HRESULT {
                return @as(*const ID2D1SvgElement.VTable, @ptrCast(self.vtable)).GetAttributeValueLength(@as(*const ID2D1SvgElement, @ptrCast(self)), name_, type_, value_length_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1SvgDocument_Value = Guid.initString("86b88e4d-afa4-4d7b-88e4-68a51c4a0aec");
pub const IID_ID2D1SvgDocument = &IID_ID2D1SvgDocument_Value;
pub const ID2D1SvgDocument = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
        SetViewportSize: *const fn (
            self: *const ID2D1SvgDocument,
            viewport_size: D2D_SIZE_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewportSize: *const fn (
            self: *const ID2D1SvgDocument,
            retval: *D2D_SIZE_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetRoot: *const fn (
            self: *const ID2D1SvgDocument,
            root: ?*ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRoot: *const fn (
            self: *const ID2D1SvgDocument,
            root: ?*?*ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) void,
        FindElementById: *const fn (
            self: *const ID2D1SvgDocument,
            id: ?[*:0]const u16,
            svg_element: ?*?*ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Serialize: *const fn (
            self: *const ID2D1SvgDocument,
            output_xml_stream: ?*IStream,
            subtree: ?*ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Deserialize: *const fn (
            self: *const ID2D1SvgDocument,
            input_xml_stream: ?*IStream,
            subtree: ?*?*ID2D1SvgElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePaint: *const fn (
            self: *const ID2D1SvgDocument,
            paint_type: D2D1_SVG_PAINT_TYPE,
            color: ?*const D2D1_COLOR_F,
            id: ?[*:0]const u16,
            paint: ?*?*ID2D1SvgPaint,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStrokeDashArray: *const fn (
            self: *const ID2D1SvgDocument,
            dashes: ?[*]const D2D1_SVG_LENGTH,
            dashes_count: u32,
            stroke_dash_array: ?*?*ID2D1SvgStrokeDashArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePointCollection: *const fn (
            self: *const ID2D1SvgDocument,
            points: ?[*]const D2D_POINT_2F,
            points_count: u32,
            point_collection: ?*?*ID2D1SvgPointCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePathData: *const fn (
            self: *const ID2D1SvgDocument,
            segment_data: ?[*]const f32,
            segment_data_count: u32,
            commands: ?[*]const D2D1_SVG_PATH_COMMAND,
            commands_count: u32,
            path_data: ?*?*ID2D1SvgPathData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
            pub inline fn setViewportSize(self: *const T, viewport_size_: D2D_SIZE_F) HRESULT {
                return @as(*const ID2D1SvgDocument.VTable, @ptrCast(self.vtable)).SetViewportSize(@as(*const ID2D1SvgDocument, @ptrCast(self)), viewport_size_);
            }
            pub inline fn getViewportSize(self: *const T) D2D_SIZE_F {
                var retval: D2D_SIZE_F = undefined;
                @as(*const ID2D1SvgDocument.VTable, @ptrCast(self.vtable)).GetViewportSize(@as(*const ID2D1SvgDocument, @ptrCast(self)), &retval);
                return retval;
            }
            pub inline fn setRoot(self: *const T, root_: ?*ID2D1SvgElement) HRESULT {
                return @as(*const ID2D1SvgDocument.VTable, @ptrCast(self.vtable)).SetRoot(@as(*const ID2D1SvgDocument, @ptrCast(self)), root_);
            }
            pub inline fn getRoot(self: *const T, root_: ?*?*ID2D1SvgElement) void {
                return @as(*const ID2D1SvgDocument.VTable, @ptrCast(self.vtable)).GetRoot(@as(*const ID2D1SvgDocument, @ptrCast(self)), root_);
            }
            pub inline fn findElementById(self: *const T, id_: ?[*:0]const u16, svg_element_: ?*?*ID2D1SvgElement) HRESULT {
                return @as(*const ID2D1SvgDocument.VTable, @ptrCast(self.vtable)).FindElementById(@as(*const ID2D1SvgDocument, @ptrCast(self)), id_, svg_element_);
            }
            pub inline fn serialize(self: *const T, output_xml_stream_: ?*IStream, subtree_: ?*ID2D1SvgElement) HRESULT {
                return @as(*const ID2D1SvgDocument.VTable, @ptrCast(self.vtable)).Serialize(@as(*const ID2D1SvgDocument, @ptrCast(self)), output_xml_stream_, subtree_);
            }
            pub inline fn deserialize(self: *const T, input_xml_stream_: ?*IStream, subtree_: ?*?*ID2D1SvgElement) HRESULT {
                return @as(*const ID2D1SvgDocument.VTable, @ptrCast(self.vtable)).Deserialize(@as(*const ID2D1SvgDocument, @ptrCast(self)), input_xml_stream_, subtree_);
            }
            pub inline fn createPaint(self: *const T, paint_type_: D2D1_SVG_PAINT_TYPE, color_: ?*const D2D1_COLOR_F, id_: ?[*:0]const u16, paint_: ?*?*ID2D1SvgPaint) HRESULT {
                return @as(*const ID2D1SvgDocument.VTable, @ptrCast(self.vtable)).CreatePaint(@as(*const ID2D1SvgDocument, @ptrCast(self)), paint_type_, color_, id_, paint_);
            }
            pub inline fn createStrokeDashArray(self: *const T, dashes_: ?[*]const D2D1_SVG_LENGTH, dashes_count_: u32, stroke_dash_array_: ?*?*ID2D1SvgStrokeDashArray) HRESULT {
                return @as(*const ID2D1SvgDocument.VTable, @ptrCast(self.vtable)).CreateStrokeDashArray(@as(*const ID2D1SvgDocument, @ptrCast(self)), dashes_, dashes_count_, stroke_dash_array_);
            }
            pub inline fn createPointCollection(self: *const T, points_: ?[*]const D2D_POINT_2F, points_count_: u32, point_collection_: ?*?*ID2D1SvgPointCollection) HRESULT {
                return @as(*const ID2D1SvgDocument.VTable, @ptrCast(self.vtable)).CreatePointCollection(@as(*const ID2D1SvgDocument, @ptrCast(self)), points_, points_count_, point_collection_);
            }
            pub inline fn createPathData(self: *const T, segment_data_: ?[*]const f32, segment_data_count_: u32, commands_: ?[*]const D2D1_SVG_PATH_COMMAND, commands_count_: u32, path_data_: ?*?*ID2D1SvgPathData) HRESULT {
                return @as(*const ID2D1SvgDocument.VTable, @ptrCast(self.vtable)).CreatePathData(@as(*const ID2D1SvgDocument, @ptrCast(self)), segment_data_, segment_data_count_, commands_, commands_count_, path_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const D2D1_INK_NIB_SHAPE = enum(u32) {
    ROUND = 0,
    SQUARE = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_INK_NIB_SHAPE_ROUND = D2D1_INK_NIB_SHAPE.ROUND;
pub const D2D1_INK_NIB_SHAPE_SQUARE = D2D1_INK_NIB_SHAPE.SQUARE;
pub const D2D1_INK_NIB_SHAPE_FORCE_DWORD = D2D1_INK_NIB_SHAPE.FORCE_DWORD;

pub const D2D1_ORIENTATION = enum(u32) {
    DEFAULT = 1,
    FLIP_HORIZONTAL = 2,
    ROTATE_CLOCKWISE180 = 3,
    ROTATE_CLOCKWISE180_FLIP_HORIZONTAL = 4,
    ROTATE_CLOCKWISE90_FLIP_HORIZONTAL = 5,
    ROTATE_CLOCKWISE270 = 6,
    ROTATE_CLOCKWISE270_FLIP_HORIZONTAL = 7,
    ROTATE_CLOCKWISE90 = 8,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_ORIENTATION_DEFAULT = D2D1_ORIENTATION.DEFAULT;
pub const D2D1_ORIENTATION_FLIP_HORIZONTAL = D2D1_ORIENTATION.FLIP_HORIZONTAL;
pub const D2D1_ORIENTATION_ROTATE_CLOCKWISE180 = D2D1_ORIENTATION.ROTATE_CLOCKWISE180;
pub const D2D1_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL = D2D1_ORIENTATION.ROTATE_CLOCKWISE180_FLIP_HORIZONTAL;
pub const D2D1_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL = D2D1_ORIENTATION.ROTATE_CLOCKWISE90_FLIP_HORIZONTAL;
pub const D2D1_ORIENTATION_ROTATE_CLOCKWISE270 = D2D1_ORIENTATION.ROTATE_CLOCKWISE270;
pub const D2D1_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL = D2D1_ORIENTATION.ROTATE_CLOCKWISE270_FLIP_HORIZONTAL;
pub const D2D1_ORIENTATION_ROTATE_CLOCKWISE90 = D2D1_ORIENTATION.ROTATE_CLOCKWISE90;
pub const D2D1_ORIENTATION_FORCE_DWORD = D2D1_ORIENTATION.FORCE_DWORD;

pub const D2D1_IMAGE_SOURCE_LOADING_OPTIONS = enum(u32) {
    NONE = 0,
    RELEASE_SOURCE = 1,
    CACHE_ON_DEMAND = 2,
    FORCE_DWORD = 4294967295,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        RELEASE_SOURCE: u1 = 0,
        CACHE_ON_DEMAND: u1 = 0,
        FORCE_DWORD: u1 = 0,
    }) D2D1_IMAGE_SOURCE_LOADING_OPTIONS {
        return @as(D2D1_IMAGE_SOURCE_LOADING_OPTIONS, @enumFromInt((if (o.NONE == 1) @intFromEnum(D2D1_IMAGE_SOURCE_LOADING_OPTIONS.NONE) else 0) | (if (o.RELEASE_SOURCE == 1) @intFromEnum(D2D1_IMAGE_SOURCE_LOADING_OPTIONS.RELEASE_SOURCE) else 0) | (if (o.CACHE_ON_DEMAND == 1) @intFromEnum(D2D1_IMAGE_SOURCE_LOADING_OPTIONS.CACHE_ON_DEMAND) else 0) | (if (o.FORCE_DWORD == 1) @intFromEnum(D2D1_IMAGE_SOURCE_LOADING_OPTIONS.FORCE_DWORD) else 0)));
    }
};
pub const D2D1_IMAGE_SOURCE_LOADING_OPTIONS_NONE = D2D1_IMAGE_SOURCE_LOADING_OPTIONS.NONE;
pub const D2D1_IMAGE_SOURCE_LOADING_OPTIONS_RELEASE_SOURCE = D2D1_IMAGE_SOURCE_LOADING_OPTIONS.RELEASE_SOURCE;
pub const D2D1_IMAGE_SOURCE_LOADING_OPTIONS_CACHE_ON_DEMAND = D2D1_IMAGE_SOURCE_LOADING_OPTIONS.CACHE_ON_DEMAND;
pub const D2D1_IMAGE_SOURCE_LOADING_OPTIONS_FORCE_DWORD = D2D1_IMAGE_SOURCE_LOADING_OPTIONS.FORCE_DWORD;

pub const D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS = enum(u32) {
    NONE = 0,
    LOW_QUALITY_PRIMARY_CONVERSION = 1,
    FORCE_DWORD = 4294967295,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        LOW_QUALITY_PRIMARY_CONVERSION: u1 = 0,
        FORCE_DWORD: u1 = 0,
    }) D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS {
        return @as(D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, @enumFromInt((if (o.NONE == 1) @intFromEnum(D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS.NONE) else 0) | (if (o.LOW_QUALITY_PRIMARY_CONVERSION == 1) @intFromEnum(D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS.LOW_QUALITY_PRIMARY_CONVERSION) else 0) | (if (o.FORCE_DWORD == 1) @intFromEnum(D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS.FORCE_DWORD) else 0)));
    }
};
pub const D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_NONE = D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS.NONE;
pub const D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_LOW_QUALITY_PRIMARY_CONVERSION = D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS.LOW_QUALITY_PRIMARY_CONVERSION;
pub const D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_FORCE_DWORD = D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS.FORCE_DWORD;

pub const D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS = enum(u32) {
    NONE = 0,
    DISABLE_DPI_SCALE = 1,
    FORCE_DWORD = 4294967295,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        DISABLE_DPI_SCALE: u1 = 0,
        FORCE_DWORD: u1 = 0,
    }) D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS {
        return @as(D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS, @enumFromInt((if (o.NONE == 1) @intFromEnum(D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS.NONE) else 0) | (if (o.DISABLE_DPI_SCALE == 1) @intFromEnum(D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS.DISABLE_DPI_SCALE) else 0) | (if (o.FORCE_DWORD == 1) @intFromEnum(D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS.FORCE_DWORD) else 0)));
    }
};
pub const D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_NONE = D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS.NONE;
pub const D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_DISABLE_DPI_SCALE = D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS.DISABLE_DPI_SCALE;
pub const D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_FORCE_DWORD = D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS.FORCE_DWORD;

pub const D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES = extern struct {
    orientation: D2D1_ORIENTATION,
    scaleX: f32,
    scaleY: f32,
    interpolationMode: D2D1_INTERPOLATION_MODE,
    options: D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS,
};

pub const D2D1_INK_POINT = extern struct {
    x: f32,
    y: f32,
    radius: f32,
};

pub const D2D1_INK_BEZIER_SEGMENT = extern struct {
    point1: D2D1_INK_POINT,
    point2: D2D1_INK_POINT,
    point3: D2D1_INK_POINT,
};

pub const D2D1_INK_STYLE_PROPERTIES = extern struct {
    nibShape: D2D1_INK_NIB_SHAPE,
    nibTransform: D2D_MATRIX_3X2_F,
};

pub const D2D1_PATCH_EDGE_MODE = enum(u32) {
    ALIASED = 0,
    ANTIALIASED = 1,
    ALIASED_INFLATED = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_PATCH_EDGE_MODE_ALIASED = D2D1_PATCH_EDGE_MODE.ALIASED;
pub const D2D1_PATCH_EDGE_MODE_ANTIALIASED = D2D1_PATCH_EDGE_MODE.ANTIALIASED;
pub const D2D1_PATCH_EDGE_MODE_ALIASED_INFLATED = D2D1_PATCH_EDGE_MODE.ALIASED_INFLATED;
pub const D2D1_PATCH_EDGE_MODE_FORCE_DWORD = D2D1_PATCH_EDGE_MODE.FORCE_DWORD;

pub const D2D1_GRADIENT_MESH_PATCH = extern struct {
    point00: D2D_POINT_2F,
    point01: D2D_POINT_2F,
    point02: D2D_POINT_2F,
    point03: D2D_POINT_2F,
    point10: D2D_POINT_2F,
    point11: D2D_POINT_2F,
    point12: D2D_POINT_2F,
    point13: D2D_POINT_2F,
    point20: D2D_POINT_2F,
    point21: D2D_POINT_2F,
    point22: D2D_POINT_2F,
    point23: D2D_POINT_2F,
    point30: D2D_POINT_2F,
    point31: D2D_POINT_2F,
    point32: D2D_POINT_2F,
    point33: D2D_POINT_2F,
    color00: D2D1_COLOR_F,
    color03: D2D1_COLOR_F,
    color30: D2D1_COLOR_F,
    color33: D2D1_COLOR_F,
    topEdgeMode: D2D1_PATCH_EDGE_MODE,
    leftEdgeMode: D2D1_PATCH_EDGE_MODE,
    bottomEdgeMode: D2D1_PATCH_EDGE_MODE,
    rightEdgeMode: D2D1_PATCH_EDGE_MODE,
};

pub const D2D1_SPRITE_OPTIONS = enum(u32) {
    NONE = 0,
    CLAMP_TO_SOURCE_RECTANGLE = 1,
    FORCE_DWORD = 4294967295,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        CLAMP_TO_SOURCE_RECTANGLE: u1 = 0,
        FORCE_DWORD: u1 = 0,
    }) D2D1_SPRITE_OPTIONS {
        return @as(D2D1_SPRITE_OPTIONS, @enumFromInt((if (o.NONE == 1) @intFromEnum(D2D1_SPRITE_OPTIONS.NONE) else 0) | (if (o.CLAMP_TO_SOURCE_RECTANGLE == 1) @intFromEnum(D2D1_SPRITE_OPTIONS.CLAMP_TO_SOURCE_RECTANGLE) else 0) | (if (o.FORCE_DWORD == 1) @intFromEnum(D2D1_SPRITE_OPTIONS.FORCE_DWORD) else 0)));
    }
};
pub const D2D1_SPRITE_OPTIONS_NONE = D2D1_SPRITE_OPTIONS.NONE;
pub const D2D1_SPRITE_OPTIONS_CLAMP_TO_SOURCE_RECTANGLE = D2D1_SPRITE_OPTIONS.CLAMP_TO_SOURCE_RECTANGLE;
pub const D2D1_SPRITE_OPTIONS_FORCE_DWORD = D2D1_SPRITE_OPTIONS.FORCE_DWORD;

pub const D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION = enum(u32) {
    DEFAULT = 0,
    DISABLE = 1,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DEFAULT = D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION.DEFAULT;
pub const D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_DISABLE = D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION.DISABLE;
pub const D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION_FORCE_DWORD = D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION.FORCE_DWORD;

pub const D2D1_GAMMA1 = enum(u32) {
    G22 = 0,
    G10 = 1,
    G2084 = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_GAMMA1_G22 = D2D1_GAMMA1.G22;
pub const D2D1_GAMMA1_G10 = D2D1_GAMMA1.G10;
pub const D2D1_GAMMA1_G2084 = D2D1_GAMMA1.G2084;
pub const D2D1_GAMMA1_FORCE_DWORD = D2D1_GAMMA1.FORCE_DWORD;

pub const D2D1_SIMPLE_COLOR_PROFILE = extern struct {
    redPrimary: D2D_POINT_2F,
    greenPrimary: D2D_POINT_2F,
    bluePrimary: D2D_POINT_2F,
    whitePointXZ: D2D_POINT_2F,
    gamma: D2D1_GAMMA1,
};

pub const D2D1_COLOR_CONTEXT_TYPE = enum(u32) {
    ICC = 0,
    SIMPLE = 1,
    DXGI = 2,
    FORCE_DWORD = 4294967295,
};
pub const D2D1_COLOR_CONTEXT_TYPE_ICC = D2D1_COLOR_CONTEXT_TYPE.ICC;
pub const D2D1_COLOR_CONTEXT_TYPE_SIMPLE = D2D1_COLOR_CONTEXT_TYPE.SIMPLE;
pub const D2D1_COLOR_CONTEXT_TYPE_DXGI = D2D1_COLOR_CONTEXT_TYPE.DXGI;
pub const D2D1_COLOR_CONTEXT_TYPE_FORCE_DWORD = D2D1_COLOR_CONTEXT_TYPE.FORCE_DWORD;

const IID_ID2D1InkStyle_Value = Guid.initString("bae8b344-23fc-4071-8cb5-d05d6f073848");
pub const IID_ID2D1InkStyle = &IID_ID2D1InkStyle_Value;
pub const ID2D1InkStyle = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
        SetNibTransform: *const fn (
            self: *const ID2D1InkStyle,
            transform: ?*const D2D_MATRIX_3X2_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetNibTransform: *const fn (
            self: *const ID2D1InkStyle,
            transform: ?*D2D_MATRIX_3X2_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetNibShape: *const fn (
            self: *const ID2D1InkStyle,
            nib_shape: D2D1_INK_NIB_SHAPE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetNibShape: *const fn (
            self: *const ID2D1InkStyle,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_INK_NIB_SHAPE,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
            pub inline fn setNibTransform(self: *const T, transform_: ?*const D2D_MATRIX_3X2_F) void {
                return @as(*const ID2D1InkStyle.VTable, @ptrCast(self.vtable)).SetNibTransform(@as(*const ID2D1InkStyle, @ptrCast(self)), transform_);
            }
            pub inline fn getNibTransform(self: *const T, transform_: ?*D2D_MATRIX_3X2_F) void {
                return @as(*const ID2D1InkStyle.VTable, @ptrCast(self.vtable)).GetNibTransform(@as(*const ID2D1InkStyle, @ptrCast(self)), transform_);
            }
            pub inline fn setNibShape(self: *const T, nib_shape_: D2D1_INK_NIB_SHAPE) void {
                return @as(*const ID2D1InkStyle.VTable, @ptrCast(self.vtable)).SetNibShape(@as(*const ID2D1InkStyle, @ptrCast(self)), nib_shape_);
            }
            pub inline fn getNibShape(self: *const T) D2D1_INK_NIB_SHAPE {
                return @as(*const ID2D1InkStyle.VTable, @ptrCast(self.vtable)).GetNibShape(@as(*const ID2D1InkStyle, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1Ink_Value = Guid.initString("b499923b-7029-478f-a8b3-432c7c5f5312");
pub const IID_ID2D1Ink = &IID_ID2D1Ink_Value;
pub const ID2D1Ink = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
        SetStartPoint: *const fn (
            self: *const ID2D1Ink,
            start_point: ?*const D2D1_INK_POINT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetStartPoint: *const fn (
            self: *const ID2D1Ink,
            retval: *D2D1_INK_POINT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        AddSegments: *const fn (
            self: *const ID2D1Ink,
            segments: [*]const D2D1_INK_BEZIER_SEGMENT,
            segments_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveSegmentsAtEnd: *const fn (
            self: *const ID2D1Ink,
            segments_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSegments: *const fn (
            self: *const ID2D1Ink,
            start_segment: u32,
            segments: [*]const D2D1_INK_BEZIER_SEGMENT,
            segments_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSegmentAtEnd: *const fn (
            self: *const ID2D1Ink,
            segment: ?*const D2D1_INK_BEZIER_SEGMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSegmentCount: *const fn (
            self: *const ID2D1Ink,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetSegments: *const fn (
            self: *const ID2D1Ink,
            start_segment: u32,
            segments: [*]D2D1_INK_BEZIER_SEGMENT,
            segments_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StreamAsGeometry: *const fn (
            self: *const ID2D1Ink,
            ink_style: ?*ID2D1InkStyle,
            world_transform: ?*const D2D_MATRIX_3X2_F,
            flattening_tolerance: f32,
            geometry_sink: ?*ID2D1SimplifiedGeometrySink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBounds: *const fn (
            self: *const ID2D1Ink,
            ink_style: ?*ID2D1InkStyle,
            world_transform: ?*const D2D_MATRIX_3X2_F,
            bounds: ?*D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
            pub inline fn setStartPoint(self: *const T, start_point_: ?*const D2D1_INK_POINT) void {
                return @as(*const ID2D1Ink.VTable, @ptrCast(self.vtable)).SetStartPoint(@as(*const ID2D1Ink, @ptrCast(self)), start_point_);
            }
            pub inline fn getStartPoint(self: *const T) D2D1_INK_POINT {
                var retval: D2D1_INK_POINT = undefined;
                @as(*const ID2D1Ink.VTable, @ptrCast(self.vtable)).GetStartPoint(@as(*const ID2D1Ink, @ptrCast(self)), &retval);
                return retval;
            }
            pub inline fn addSegments(self: *const T, segments_: [*]const D2D1_INK_BEZIER_SEGMENT, segments_count_: u32) HRESULT {
                return @as(*const ID2D1Ink.VTable, @ptrCast(self.vtable)).AddSegments(@as(*const ID2D1Ink, @ptrCast(self)), segments_, segments_count_);
            }
            pub inline fn removeSegmentsAtEnd(self: *const T, segments_count_: u32) HRESULT {
                return @as(*const ID2D1Ink.VTable, @ptrCast(self.vtable)).RemoveSegmentsAtEnd(@as(*const ID2D1Ink, @ptrCast(self)), segments_count_);
            }
            pub inline fn setSegments(self: *const T, start_segment_: u32, segments_: [*]const D2D1_INK_BEZIER_SEGMENT, segments_count_: u32) HRESULT {
                return @as(*const ID2D1Ink.VTable, @ptrCast(self.vtable)).SetSegments(@as(*const ID2D1Ink, @ptrCast(self)), start_segment_, segments_, segments_count_);
            }
            pub inline fn setSegmentAtEnd(self: *const T, segment_: ?*const D2D1_INK_BEZIER_SEGMENT) HRESULT {
                return @as(*const ID2D1Ink.VTable, @ptrCast(self.vtable)).SetSegmentAtEnd(@as(*const ID2D1Ink, @ptrCast(self)), segment_);
            }
            pub inline fn getSegmentCount(self: *const T) u32 {
                return @as(*const ID2D1Ink.VTable, @ptrCast(self.vtable)).GetSegmentCount(@as(*const ID2D1Ink, @ptrCast(self)));
            }
            pub inline fn getSegments(self: *const T, start_segment_: u32, segments_: [*]D2D1_INK_BEZIER_SEGMENT, segments_count_: u32) HRESULT {
                return @as(*const ID2D1Ink.VTable, @ptrCast(self.vtable)).GetSegments(@as(*const ID2D1Ink, @ptrCast(self)), start_segment_, segments_, segments_count_);
            }
            pub inline fn streamAsGeometry(self: *const T, ink_style_: ?*ID2D1InkStyle, world_transform_: ?*const D2D_MATRIX_3X2_F, flattening_tolerance_: f32, geometry_sink_: ?*ID2D1SimplifiedGeometrySink) HRESULT {
                return @as(*const ID2D1Ink.VTable, @ptrCast(self.vtable)).StreamAsGeometry(@as(*const ID2D1Ink, @ptrCast(self)), ink_style_, world_transform_, flattening_tolerance_, geometry_sink_);
            }
            pub inline fn getBounds(self: *const T, ink_style_: ?*ID2D1InkStyle, world_transform_: ?*const D2D_MATRIX_3X2_F, bounds_: ?*D2D_RECT_F) HRESULT {
                return @as(*const ID2D1Ink.VTable, @ptrCast(self.vtable)).GetBounds(@as(*const ID2D1Ink, @ptrCast(self)), ink_style_, world_transform_, bounds_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_ID2D1GradientMesh_Value = Guid.initString("f292e401-c050-4cde-83d7-04962d3b23c2");
pub const IID_ID2D1GradientMesh = &IID_ID2D1GradientMesh_Value;
pub const ID2D1GradientMesh = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
        GetPatchCount: *const fn (
            self: *const ID2D1GradientMesh,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetPatches: *const fn (
            self: *const ID2D1GradientMesh,
            start_index: u32,
            patches: [*]D2D1_GRADIENT_MESH_PATCH,
            patches_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
            pub inline fn getPatchCount(self: *const T) u32 {
                return @as(*const ID2D1GradientMesh.VTable, @ptrCast(self.vtable)).GetPatchCount(@as(*const ID2D1GradientMesh, @ptrCast(self)));
            }
            pub inline fn getPatches(self: *const T, start_index_: u32, patches_: [*]D2D1_GRADIENT_MESH_PATCH, patches_count_: u32) HRESULT {
                return @as(*const ID2D1GradientMesh.VTable, @ptrCast(self.vtable)).GetPatches(@as(*const ID2D1GradientMesh, @ptrCast(self)), start_index_, patches_, patches_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_ID2D1ImageSource_Value = Guid.initString("c9b664e5-74a1-4378-9ac2-eefc37a3f4d8");
pub const IID_ID2D1ImageSource = &IID_ID2D1ImageSource_Value;
pub const ID2D1ImageSource = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Image.VTable,
        OfferResources: *const fn (
            self: *const ID2D1ImageSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TryReclaimResources: *const fn (
            self: *const ID2D1ImageSource,
            resources_discarded: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Image.MethodMixin(T);
            pub inline fn offerResources(self: *const T) HRESULT {
                return @as(*const ID2D1ImageSource.VTable, @ptrCast(self.vtable)).OfferResources(@as(*const ID2D1ImageSource, @ptrCast(self)));
            }
            pub inline fn tryReclaimResources(self: *const T, resources_discarded_: ?*BOOL) HRESULT {
                return @as(*const ID2D1ImageSource.VTable, @ptrCast(self.vtable)).TryReclaimResources(@as(*const ID2D1ImageSource, @ptrCast(self)), resources_discarded_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1ImageSourceFromWic_Value = Guid.initString("77395441-1c8f-4555-8683-f50dab0fe792");
pub const IID_ID2D1ImageSourceFromWic = &IID_ID2D1ImageSourceFromWic_Value;
pub const ID2D1ImageSourceFromWic = extern struct {
    pub const VTable = extern struct {
        base: ID2D1ImageSource.VTable,
        EnsureCached: *const fn (
            self: *const ID2D1ImageSourceFromWic,
            rectangle_to_fill: ?*const D2D_RECT_U,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TrimCache: *const fn (
            self: *const ID2D1ImageSourceFromWic,
            rectangle_to_preserve: ?*const D2D_RECT_U,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSource: *const fn (
            self: *const ID2D1ImageSourceFromWic,
            wic_bitmap_source: ?*?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1ImageSource.MethodMixin(T);
            pub inline fn ensureCached(self: *const T, rectangle_to_fill_: ?*const D2D_RECT_U) HRESULT {
                return @as(*const ID2D1ImageSourceFromWic.VTable, @ptrCast(self.vtable)).EnsureCached(@as(*const ID2D1ImageSourceFromWic, @ptrCast(self)), rectangle_to_fill_);
            }
            pub inline fn trimCache(self: *const T, rectangle_to_preserve_: ?*const D2D_RECT_U) HRESULT {
                return @as(*const ID2D1ImageSourceFromWic.VTable, @ptrCast(self.vtable)).TrimCache(@as(*const ID2D1ImageSourceFromWic, @ptrCast(self)), rectangle_to_preserve_);
            }
            pub inline fn getSource(self: *const T, wic_bitmap_source_: ?*?*IWICBitmapSource) void {
                return @as(*const ID2D1ImageSourceFromWic.VTable, @ptrCast(self.vtable)).GetSource(@as(*const ID2D1ImageSourceFromWic, @ptrCast(self)), wic_bitmap_source_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1TransformedImageSource_Value = Guid.initString("7f1f79e5-2796-416c-8f55-700f911445e5");
pub const IID_ID2D1TransformedImageSource = &IID_ID2D1TransformedImageSource_Value;
pub const ID2D1TransformedImageSource = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Image.VTable,
        GetSource: *const fn (
            self: *const ID2D1TransformedImageSource,
            image_source: ?*?*ID2D1ImageSource,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetProperties: *const fn (
            self: *const ID2D1TransformedImageSource,
            properties: ?*D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Image.MethodMixin(T);
            pub inline fn getSource(self: *const T, image_source_: ?*?*ID2D1ImageSource) void {
                return @as(*const ID2D1TransformedImageSource.VTable, @ptrCast(self.vtable)).GetSource(@as(*const ID2D1TransformedImageSource, @ptrCast(self)), image_source_);
            }
            pub inline fn getProperties(self: *const T, properties_: ?*D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES) void {
                return @as(*const ID2D1TransformedImageSource.VTable, @ptrCast(self.vtable)).GetProperties(@as(*const ID2D1TransformedImageSource, @ptrCast(self)), properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1LookupTable3D_Value = Guid.initString("53dd9855-a3b0-4d5b-82e1-26e25c5e5797");
pub const IID_ID2D1LookupTable3D = &IID_ID2D1LookupTable3D_Value;
pub const ID2D1LookupTable3D = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_ID2D1DeviceContext2_Value = Guid.initString("394ea6a3-0c34-4321-950b-6ca20f0be6c7");
pub const IID_ID2D1DeviceContext2 = &IID_ID2D1DeviceContext2_Value;
pub const ID2D1DeviceContext2 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1DeviceContext1.VTable,
        CreateInk: *const fn (
            self: *const ID2D1DeviceContext2,
            start_point: ?*const D2D1_INK_POINT,
            ink: ?*?*ID2D1Ink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInkStyle: *const fn (
            self: *const ID2D1DeviceContext2,
            ink_style_properties: ?*const D2D1_INK_STYLE_PROPERTIES,
            ink_style: ?*?*ID2D1InkStyle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGradientMesh: *const fn (
            self: *const ID2D1DeviceContext2,
            patches: [*]const D2D1_GRADIENT_MESH_PATCH,
            patches_count: u32,
            gradient_mesh: ?*?*ID2D1GradientMesh,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateImageSourceFromWic: *const fn (
            self: *const ID2D1DeviceContext2,
            wic_bitmap_source: ?*IWICBitmapSource,
            loading_options: D2D1_IMAGE_SOURCE_LOADING_OPTIONS,
            alpha_mode: D2D1_ALPHA_MODE,
            image_source: ?*?*ID2D1ImageSourceFromWic,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateLookupTable3D: *const fn (
            self: *const ID2D1DeviceContext2,
            precision: D2D1_BUFFER_PRECISION,
            extents: *[3]u32,
            data: [*:0]const u8,
            data_count: u32,
            strides: *[2]u32,
            lookup_table: ?*?*ID2D1LookupTable3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateImageSourceFromDxgi: *const fn (
            self: *const ID2D1DeviceContext2,
            surfaces: [*]?*IDXGISurface,
            surface_count: u32,
            color_space: DXGI_COLOR_SPACE_TYPE,
            options: D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS,
            image_source: ?*?*ID2D1ImageSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGradientMeshWorldBounds: *const fn (
            self: *const ID2D1DeviceContext2,
            gradient_mesh: ?*ID2D1GradientMesh,
            p_bounds: ?*D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawInk: *const fn (
            self: *const ID2D1DeviceContext2,
            ink: ?*ID2D1Ink,
            brush: ?*ID2D1Brush,
            ink_style: ?*ID2D1InkStyle,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawGradientMesh: *const fn (
            self: *const ID2D1DeviceContext2,
            gradient_mesh: ?*ID2D1GradientMesh,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawGdiMetafile: *const fn (
            self: *const ID2D1DeviceContext2,
            gdi_metafile: ?*ID2D1GdiMetafile,
            destination_rectangle: ?*const D2D_RECT_F,
            source_rectangle: ?*const D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CreateTransformedImageSource: *const fn (
            self: *const ID2D1DeviceContext2,
            image_source: ?*ID2D1ImageSource,
            properties: ?*const D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES,
            transformed_image_source: ?*?*ID2D1TransformedImageSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1DeviceContext1.MethodMixin(T);
            pub inline fn createInk(self: *const T, start_point_: ?*const D2D1_INK_POINT, ink_: ?*?*ID2D1Ink) HRESULT {
                return @as(*const ID2D1DeviceContext2.VTable, @ptrCast(self.vtable)).CreateInk(@as(*const ID2D1DeviceContext2, @ptrCast(self)), start_point_, ink_);
            }
            pub inline fn createInkStyle(self: *const T, ink_style_properties_: ?*const D2D1_INK_STYLE_PROPERTIES, ink_style_: ?*?*ID2D1InkStyle) HRESULT {
                return @as(*const ID2D1DeviceContext2.VTable, @ptrCast(self.vtable)).CreateInkStyle(@as(*const ID2D1DeviceContext2, @ptrCast(self)), ink_style_properties_, ink_style_);
            }
            pub inline fn createGradientMesh(self: *const T, patches_: [*]const D2D1_GRADIENT_MESH_PATCH, patches_count_: u32, gradient_mesh_: ?*?*ID2D1GradientMesh) HRESULT {
                return @as(*const ID2D1DeviceContext2.VTable, @ptrCast(self.vtable)).CreateGradientMesh(@as(*const ID2D1DeviceContext2, @ptrCast(self)), patches_, patches_count_, gradient_mesh_);
            }
            pub inline fn createImageSourceFromWic(self: *const T, wic_bitmap_source_: ?*IWICBitmapSource, loading_options_: D2D1_IMAGE_SOURCE_LOADING_OPTIONS, alpha_mode_: D2D1_ALPHA_MODE, image_source_: ?*?*ID2D1ImageSourceFromWic) HRESULT {
                return @as(*const ID2D1DeviceContext2.VTable, @ptrCast(self.vtable)).CreateImageSourceFromWic(@as(*const ID2D1DeviceContext2, @ptrCast(self)), wic_bitmap_source_, loading_options_, alpha_mode_, image_source_);
            }
            pub inline fn createLookupTable3D(self: *const T, precision_: D2D1_BUFFER_PRECISION, extents_: *[3]u32, data_: [*:0]const u8, data_count_: u32, strides_: *[2]u32, lookup_table_: ?*?*ID2D1LookupTable3D) HRESULT {
                return @as(*const ID2D1DeviceContext2.VTable, @ptrCast(self.vtable)).CreateLookupTable3D(@as(*const ID2D1DeviceContext2, @ptrCast(self)), precision_, extents_, data_, data_count_, strides_, lookup_table_);
            }
            pub inline fn createImageSourceFromDxgi(self: *const T, surfaces_: [*]?*IDXGISurface, surface_count_: u32, color_space_: DXGI_COLOR_SPACE_TYPE, options_: D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS, image_source_: ?*?*ID2D1ImageSource) HRESULT {
                return @as(*const ID2D1DeviceContext2.VTable, @ptrCast(self.vtable)).CreateImageSourceFromDxgi(@as(*const ID2D1DeviceContext2, @ptrCast(self)), surfaces_, surface_count_, color_space_, options_, image_source_);
            }
            pub inline fn getGradientMeshWorldBounds(self: *const T, gradient_mesh_: ?*ID2D1GradientMesh, p_bounds_: ?*D2D_RECT_F) HRESULT {
                return @as(*const ID2D1DeviceContext2.VTable, @ptrCast(self.vtable)).GetGradientMeshWorldBounds(@as(*const ID2D1DeviceContext2, @ptrCast(self)), gradient_mesh_, p_bounds_);
            }
            pub inline fn drawInk(self: *const T, ink_: ?*ID2D1Ink, brush_: ?*ID2D1Brush, ink_style_: ?*ID2D1InkStyle) void {
                return @as(*const ID2D1DeviceContext2.VTable, @ptrCast(self.vtable)).DrawInk(@as(*const ID2D1DeviceContext2, @ptrCast(self)), ink_, brush_, ink_style_);
            }
            pub inline fn drawGradientMesh(self: *const T, gradient_mesh_: ?*ID2D1GradientMesh) void {
                return @as(*const ID2D1DeviceContext2.VTable, @ptrCast(self.vtable)).DrawGradientMesh(@as(*const ID2D1DeviceContext2, @ptrCast(self)), gradient_mesh_);
            }
            pub inline fn drawGdiMetafile(self: *const T, gdi_metafile_: ?*ID2D1GdiMetafile, destination_rectangle_: ?*const D2D_RECT_F, source_rectangle_: ?*const D2D_RECT_F) void {
                return @as(*const ID2D1DeviceContext2.VTable, @ptrCast(self.vtable)).DrawGdiMetafile(@as(*const ID2D1DeviceContext2, @ptrCast(self)), gdi_metafile_, destination_rectangle_, source_rectangle_);
            }
            pub inline fn createTransformedImageSource(self: *const T, image_source_: ?*ID2D1ImageSource, properties_: ?*const D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES, transformed_image_source_: ?*?*ID2D1TransformedImageSource) HRESULT {
                return @as(*const ID2D1DeviceContext2.VTable, @ptrCast(self.vtable)).CreateTransformedImageSource(@as(*const ID2D1DeviceContext2, @ptrCast(self)), image_source_, properties_, transformed_image_source_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1Device2_Value = Guid.initString("a44472e1-8dfb-4e60-8492-6e2861c9ca8b");
pub const IID_ID2D1Device2 = &IID_ID2D1Device2_Value;
pub const ID2D1Device2 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Device1.VTable,
        CreateDeviceContext: *const fn (
            self: *const ID2D1Device2,
            options: D2D1_DEVICE_CONTEXT_OPTIONS,
            device_context2: ?*?*ID2D1DeviceContext2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FlushDeviceContexts: *const fn (
            self: *const ID2D1Device2,
            bitmap: ?*ID2D1Bitmap,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetDxgiDevice: *const fn (
            self: *const ID2D1Device2,
            dxgi_device: ?*?*IDXGIDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Device1.MethodMixin(T);
            pub inline fn createDeviceContext(self: *const T, options_: D2D1_DEVICE_CONTEXT_OPTIONS, device_context2_: ?*?*ID2D1DeviceContext2) HRESULT {
                return @as(*const ID2D1Device2.VTable, @ptrCast(self.vtable)).CreateDeviceContext(@as(*const ID2D1Device2, @ptrCast(self)), options_, device_context2_);
            }
            pub inline fn flushDeviceContexts(self: *const T, bitmap_: ?*ID2D1Bitmap) void {
                return @as(*const ID2D1Device2.VTable, @ptrCast(self.vtable)).FlushDeviceContexts(@as(*const ID2D1Device2, @ptrCast(self)), bitmap_);
            }
            pub inline fn getDxgiDevice(self: *const T, dxgi_device_: ?*?*IDXGIDevice) HRESULT {
                return @as(*const ID2D1Device2.VTable, @ptrCast(self.vtable)).GetDxgiDevice(@as(*const ID2D1Device2, @ptrCast(self)), dxgi_device_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1Factory3_Value = Guid.initString("0869759f-4f00-413f-b03e-2bda45404d0f");
pub const IID_ID2D1Factory3 = &IID_ID2D1Factory3_Value;
pub const ID2D1Factory3 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Factory2.VTable,
        CreateDevice: *const fn (
            self: *const ID2D1Factory3,
            dxgi_device: ?*IDXGIDevice,
            d2d_device2: ?*?*ID2D1Device2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Factory2.MethodMixin(T);
            pub inline fn createDevice(self: *const T, dxgi_device_: ?*IDXGIDevice, d2d_device2_: ?*?*ID2D1Device2) HRESULT {
                return @as(*const ID2D1Factory3.VTable, @ptrCast(self.vtable)).CreateDevice(@as(*const ID2D1Factory3, @ptrCast(self)), dxgi_device_, d2d_device2_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_ID2D1CommandSink2_Value = Guid.initString("3bab440e-417e-47df-a2e2-bc0be6a00916");
pub const IID_ID2D1CommandSink2 = &IID_ID2D1CommandSink2_Value;
pub const ID2D1CommandSink2 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1CommandSink1.VTable,
        DrawInk: *const fn (
            self: *const ID2D1CommandSink2,
            ink: ?*ID2D1Ink,
            brush: ?*ID2D1Brush,
            ink_style: ?*ID2D1InkStyle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawGradientMesh: *const fn (
            self: *const ID2D1CommandSink2,
            gradient_mesh: ?*ID2D1GradientMesh,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawGdiMetafile: *const fn (
            self: *const ID2D1CommandSink2,
            gdi_metafile: ?*ID2D1GdiMetafile,
            destination_rectangle: ?*const D2D_RECT_F,
            source_rectangle: ?*const D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1CommandSink1.MethodMixin(T);
            pub inline fn drawInk(self: *const T, ink_: ?*ID2D1Ink, brush_: ?*ID2D1Brush, ink_style_: ?*ID2D1InkStyle) HRESULT {
                return @as(*const ID2D1CommandSink2.VTable, @ptrCast(self.vtable)).DrawInk(@as(*const ID2D1CommandSink2, @ptrCast(self)), ink_, brush_, ink_style_);
            }
            pub inline fn drawGradientMesh(self: *const T, gradient_mesh_: ?*ID2D1GradientMesh) HRESULT {
                return @as(*const ID2D1CommandSink2.VTable, @ptrCast(self.vtable)).DrawGradientMesh(@as(*const ID2D1CommandSink2, @ptrCast(self)), gradient_mesh_);
            }
            pub inline fn drawGdiMetafile(self: *const T, gdi_metafile_: ?*ID2D1GdiMetafile, destination_rectangle_: ?*const D2D_RECT_F, source_rectangle_: ?*const D2D_RECT_F) HRESULT {
                return @as(*const ID2D1CommandSink2.VTable, @ptrCast(self.vtable)).DrawGdiMetafile(@as(*const ID2D1CommandSink2, @ptrCast(self)), gdi_metafile_, destination_rectangle_, source_rectangle_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_ID2D1GdiMetafile1_Value = Guid.initString("2e69f9e8-dd3f-4bf9-95ba-c04f49d788df");
pub const IID_ID2D1GdiMetafile1 = &IID_ID2D1GdiMetafile1_Value;
pub const ID2D1GdiMetafile1 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1GdiMetafile.VTable,
        GetDpi: *const fn (
            self: *const ID2D1GdiMetafile1,
            dpi_x: ?*f32,
            dpi_y: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceBounds: *const fn (
            self: *const ID2D1GdiMetafile1,
            bounds: ?*D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1GdiMetafile.MethodMixin(T);
            pub inline fn getDpi(self: *const T, dpi_x_: ?*f32, dpi_y_: ?*f32) HRESULT {
                return @as(*const ID2D1GdiMetafile1.VTable, @ptrCast(self.vtable)).GetDpi(@as(*const ID2D1GdiMetafile1, @ptrCast(self)), dpi_x_, dpi_y_);
            }
            pub inline fn getSourceBounds(self: *const T, bounds_: ?*D2D_RECT_F) HRESULT {
                return @as(*const ID2D1GdiMetafile1.VTable, @ptrCast(self.vtable)).GetSourceBounds(@as(*const ID2D1GdiMetafile1, @ptrCast(self)), bounds_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_ID2D1GdiMetafileSink1_Value = Guid.initString("fd0ecb6b-91e6-411e-8655-395e760f91b4");
pub const IID_ID2D1GdiMetafileSink1 = &IID_ID2D1GdiMetafileSink1_Value;
pub const ID2D1GdiMetafileSink1 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1GdiMetafileSink.VTable,
        ProcessRecord: *const fn (
            self: *const ID2D1GdiMetafileSink1,
            record_type: u32,
            record_data: ?*const anyopaque,
            record_data_size: u32,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1GdiMetafileSink.MethodMixin(T);
            pub inline fn processRecord(self: *const T, record_type_: u32, record_data_: ?*const anyopaque, record_data_size_: u32, flags_: u32) HRESULT {
                return @as(*const ID2D1GdiMetafileSink1.VTable, @ptrCast(self.vtable)).ProcessRecord(@as(*const ID2D1GdiMetafileSink1, @ptrCast(self)), record_type_, record_data_, record_data_size_, flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1SpriteBatch_Value = Guid.initString("4dc583bf-3a10-438a-8722-e9765224f1f1");
pub const IID_ID2D1SpriteBatch = &IID_ID2D1SpriteBatch_Value;
pub const ID2D1SpriteBatch = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
        AddSprites: *const fn (
            self: *const ID2D1SpriteBatch,
            sprite_count: u32,
            destination_rectangles: ?*const D2D_RECT_F,
            source_rectangles: ?*const D2D_RECT_U,
            colors: ?*const D2D1_COLOR_F,
            transforms: ?*const D2D_MATRIX_3X2_F,
            destination_rectangles_stride: u32,
            source_rectangles_stride: u32,
            colors_stride: u32,
            transforms_stride: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSprites: *const fn (
            self: *const ID2D1SpriteBatch,
            start_index: u32,
            sprite_count: u32,
            destination_rectangles: ?*const D2D_RECT_F,
            source_rectangles: ?*const D2D_RECT_U,
            colors: ?*const D2D1_COLOR_F,
            transforms: ?*const D2D_MATRIX_3X2_F,
            destination_rectangles_stride: u32,
            source_rectangles_stride: u32,
            colors_stride: u32,
            transforms_stride: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSprites: *const fn (
            self: *const ID2D1SpriteBatch,
            start_index: u32,
            sprite_count: u32,
            destination_rectangles: ?[*]D2D_RECT_F,
            source_rectangles: ?[*]D2D_RECT_U,
            colors: ?[*]D2D1_COLOR_F,
            transforms: ?[*]D2D_MATRIX_3X2_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpriteCount: *const fn (
            self: *const ID2D1SpriteBatch,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        Clear: *const fn (
            self: *const ID2D1SpriteBatch,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
            pub inline fn addSprites(self: *const T, sprite_count_: u32, destination_rectangles_: ?*const D2D_RECT_F, source_rectangles_: ?*const D2D_RECT_U, colors_: ?*const D2D1_COLOR_F, transforms_: ?*const D2D_MATRIX_3X2_F, destination_rectangles_stride_: u32, source_rectangles_stride_: u32, colors_stride_: u32, transforms_stride_: u32) HRESULT {
                return @as(*const ID2D1SpriteBatch.VTable, @ptrCast(self.vtable)).AddSprites(@as(*const ID2D1SpriteBatch, @ptrCast(self)), sprite_count_, destination_rectangles_, source_rectangles_, colors_, transforms_, destination_rectangles_stride_, source_rectangles_stride_, colors_stride_, transforms_stride_);
            }
            pub inline fn setSprites(self: *const T, start_index_: u32, sprite_count_: u32, destination_rectangles_: ?*const D2D_RECT_F, source_rectangles_: ?*const D2D_RECT_U, colors_: ?*const D2D1_COLOR_F, transforms_: ?*const D2D_MATRIX_3X2_F, destination_rectangles_stride_: u32, source_rectangles_stride_: u32, colors_stride_: u32, transforms_stride_: u32) HRESULT {
                return @as(*const ID2D1SpriteBatch.VTable, @ptrCast(self.vtable)).SetSprites(@as(*const ID2D1SpriteBatch, @ptrCast(self)), start_index_, sprite_count_, destination_rectangles_, source_rectangles_, colors_, transforms_, destination_rectangles_stride_, source_rectangles_stride_, colors_stride_, transforms_stride_);
            }
            pub inline fn getSprites(self: *const T, start_index_: u32, sprite_count_: u32, destination_rectangles_: ?[*]D2D_RECT_F, source_rectangles_: ?[*]D2D_RECT_U, colors_: ?[*]D2D1_COLOR_F, transforms_: ?[*]D2D_MATRIX_3X2_F) HRESULT {
                return @as(*const ID2D1SpriteBatch.VTable, @ptrCast(self.vtable)).GetSprites(@as(*const ID2D1SpriteBatch, @ptrCast(self)), start_index_, sprite_count_, destination_rectangles_, source_rectangles_, colors_, transforms_);
            }
            pub inline fn getSpriteCount(self: *const T) u32 {
                return @as(*const ID2D1SpriteBatch.VTable, @ptrCast(self.vtable)).GetSpriteCount(@as(*const ID2D1SpriteBatch, @ptrCast(self)));
            }
            pub inline fn clear(self: *const T) void {
                return @as(*const ID2D1SpriteBatch.VTable, @ptrCast(self.vtable)).Clear(@as(*const ID2D1SpriteBatch, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1DeviceContext3_Value = Guid.initString("235a7496-8351-414c-bcd4-6672ab2d8e00");
pub const IID_ID2D1DeviceContext3 = &IID_ID2D1DeviceContext3_Value;
pub const ID2D1DeviceContext3 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1DeviceContext2.VTable,
        CreateSpriteBatch: *const fn (
            self: *const ID2D1DeviceContext3,
            sprite_batch: ?*?*ID2D1SpriteBatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawSpriteBatch: *const fn (
            self: *const ID2D1DeviceContext3,
            sprite_batch: ?*ID2D1SpriteBatch,
            start_index: u32,
            sprite_count: u32,
            bitmap: ?*ID2D1Bitmap,
            interpolation_mode: D2D1_BITMAP_INTERPOLATION_MODE,
            sprite_options: D2D1_SPRITE_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1DeviceContext2.MethodMixin(T);
            pub inline fn createSpriteBatch(self: *const T, sprite_batch_: ?*?*ID2D1SpriteBatch) HRESULT {
                return @as(*const ID2D1DeviceContext3.VTable, @ptrCast(self.vtable)).CreateSpriteBatch(@as(*const ID2D1DeviceContext3, @ptrCast(self)), sprite_batch_);
            }
            pub inline fn drawSpriteBatch(self: *const T, sprite_batch_: ?*ID2D1SpriteBatch, start_index_: u32, sprite_count_: u32, bitmap_: ?*ID2D1Bitmap, interpolation_mode_: D2D1_BITMAP_INTERPOLATION_MODE, sprite_options_: D2D1_SPRITE_OPTIONS) void {
                return @as(*const ID2D1DeviceContext3.VTable, @ptrCast(self.vtable)).DrawSpriteBatch(@as(*const ID2D1DeviceContext3, @ptrCast(self)), sprite_batch_, start_index_, sprite_count_, bitmap_, interpolation_mode_, sprite_options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1Device3_Value = Guid.initString("852f2087-802c-4037-ab60-ff2e7ee6fc01");
pub const IID_ID2D1Device3 = &IID_ID2D1Device3_Value;
pub const ID2D1Device3 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Device2.VTable,
        CreateDeviceContext: *const fn (
            self: *const ID2D1Device3,
            options: D2D1_DEVICE_CONTEXT_OPTIONS,
            device_context3: ?*?*ID2D1DeviceContext3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Device2.MethodMixin(T);
            pub inline fn createDeviceContext(self: *const T, options_: D2D1_DEVICE_CONTEXT_OPTIONS, device_context3_: ?*?*ID2D1DeviceContext3) HRESULT {
                return @as(*const ID2D1Device3.VTable, @ptrCast(self.vtable)).CreateDeviceContext(@as(*const ID2D1Device3, @ptrCast(self)), options_, device_context3_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1Factory4_Value = Guid.initString("bd4ec2d2-0662-4bee-ba8e-6f29f032e096");
pub const IID_ID2D1Factory4 = &IID_ID2D1Factory4_Value;
pub const ID2D1Factory4 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Factory3.VTable,
        CreateDevice: *const fn (
            self: *const ID2D1Factory4,
            dxgi_device: ?*IDXGIDevice,
            d2d_device3: ?*?*ID2D1Device3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Factory3.MethodMixin(T);
            pub inline fn createDevice(self: *const T, dxgi_device_: ?*IDXGIDevice, d2d_device3_: ?*?*ID2D1Device3) HRESULT {
                return @as(*const ID2D1Factory4.VTable, @ptrCast(self.vtable)).CreateDevice(@as(*const ID2D1Factory4, @ptrCast(self)), dxgi_device_, d2d_device3_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1CommandSink3_Value = Guid.initString("18079135-4cf3-4868-bc8e-06067e6d242d");
pub const IID_ID2D1CommandSink3 = &IID_ID2D1CommandSink3_Value;
pub const ID2D1CommandSink3 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1CommandSink2.VTable,
        DrawSpriteBatch: *const fn (
            self: *const ID2D1CommandSink3,
            sprite_batch: ?*ID2D1SpriteBatch,
            start_index: u32,
            sprite_count: u32,
            bitmap: ?*ID2D1Bitmap,
            interpolation_mode: D2D1_BITMAP_INTERPOLATION_MODE,
            sprite_options: D2D1_SPRITE_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1CommandSink2.MethodMixin(T);
            pub inline fn drawSpriteBatch(self: *const T, sprite_batch_: ?*ID2D1SpriteBatch, start_index_: u32, sprite_count_: u32, bitmap_: ?*ID2D1Bitmap, interpolation_mode_: D2D1_BITMAP_INTERPOLATION_MODE, sprite_options_: D2D1_SPRITE_OPTIONS) HRESULT {
                return @as(*const ID2D1CommandSink3.VTable, @ptrCast(self.vtable)).DrawSpriteBatch(@as(*const ID2D1CommandSink3, @ptrCast(self)), sprite_batch_, start_index_, sprite_count_, bitmap_, interpolation_mode_, sprite_options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1SvgGlyphStyle_Value = Guid.initString("af671749-d241-4db8-8e41-dcc2e5c1a438");
pub const IID_ID2D1SvgGlyphStyle = &IID_ID2D1SvgGlyphStyle_Value;
pub const ID2D1SvgGlyphStyle = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Resource.VTable,
        SetFill: *const fn (
            self: *const ID2D1SvgGlyphStyle,
            brush: ?*ID2D1Brush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFill: *const fn (
            self: *const ID2D1SvgGlyphStyle,
            brush: ?*?*ID2D1Brush,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetStroke: *const fn (
            self: *const ID2D1SvgGlyphStyle,
            brush: ?*ID2D1Brush,
            stroke_width: f32,
            dashes: ?[*]const f32,
            dashes_count: u32,
            dash_offset: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokeDashesCount: *const fn (
            self: *const ID2D1SvgGlyphStyle,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetStroke: *const fn (
            self: *const ID2D1SvgGlyphStyle,
            brush: ?*?*ID2D1Brush,
            stroke_width: ?*f32,
            dashes: ?[*]f32,
            dashes_count: u32,
            dash_offset: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Resource.MethodMixin(T);
            pub inline fn setFill(self: *const T, brush_: ?*ID2D1Brush) HRESULT {
                return @as(*const ID2D1SvgGlyphStyle.VTable, @ptrCast(self.vtable)).SetFill(@as(*const ID2D1SvgGlyphStyle, @ptrCast(self)), brush_);
            }
            pub inline fn getFill(self: *const T, brush_: ?*?*ID2D1Brush) void {
                return @as(*const ID2D1SvgGlyphStyle.VTable, @ptrCast(self.vtable)).GetFill(@as(*const ID2D1SvgGlyphStyle, @ptrCast(self)), brush_);
            }
            pub inline fn setStroke(self: *const T, brush_: ?*ID2D1Brush, stroke_width_: f32, dashes_: ?[*]const f32, dashes_count_: u32, dash_offset_: f32) HRESULT {
                return @as(*const ID2D1SvgGlyphStyle.VTable, @ptrCast(self.vtable)).SetStroke(@as(*const ID2D1SvgGlyphStyle, @ptrCast(self)), brush_, stroke_width_, dashes_, dashes_count_, dash_offset_);
            }
            pub inline fn getStrokeDashesCount(self: *const T) u32 {
                return @as(*const ID2D1SvgGlyphStyle.VTable, @ptrCast(self.vtable)).GetStrokeDashesCount(@as(*const ID2D1SvgGlyphStyle, @ptrCast(self)));
            }
            pub inline fn getStroke(self: *const T, brush_: ?*?*ID2D1Brush, stroke_width_: ?*f32, dashes_: ?[*]f32, dashes_count_: u32, dash_offset_: ?*f32) void {
                return @as(*const ID2D1SvgGlyphStyle.VTable, @ptrCast(self.vtable)).GetStroke(@as(*const ID2D1SvgGlyphStyle, @ptrCast(self)), brush_, stroke_width_, dashes_, dashes_count_, dash_offset_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1DeviceContext4_Value = Guid.initString("8c427831-3d90-4476-b647-c4fae349e4db");
pub const IID_ID2D1DeviceContext4 = &IID_ID2D1DeviceContext4_Value;
pub const ID2D1DeviceContext4 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1DeviceContext3.VTable,
        CreateSvgGlyphStyle: *const fn (
            self: *const ID2D1DeviceContext4,
            svg_glyph_style: ?*?*ID2D1SvgGlyphStyle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawText: *const fn (
            self: *const ID2D1DeviceContext4,
            string: [*:0]const u16,
            string_length: u32,
            text_format: ?*IDWriteTextFormat,
            layout_rect: ?*const D2D_RECT_F,
            default_fill_brush: ?*ID2D1Brush,
            svg_glyph_style: ?*ID2D1SvgGlyphStyle,
            color_palette_index: u32,
            options: D2D1_DRAW_TEXT_OPTIONS,
            measuring_mode: DWRITE_MEASURING_MODE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawTextLayout: *const fn (
            self: *const ID2D1DeviceContext4,
            origin: D2D_POINT_2F,
            text_layout: ?*IDWriteTextLayout,
            default_fill_brush: ?*ID2D1Brush,
            svg_glyph_style: ?*ID2D1SvgGlyphStyle,
            color_palette_index: u32,
            options: D2D1_DRAW_TEXT_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawColorBitmapGlyphRun: *const fn (
            self: *const ID2D1DeviceContext4,
            glyph_image_format: DWRITE_GLYPH_IMAGE_FORMATS,
            baseline_origin: D2D_POINT_2F,
            glyph_run: ?*const DWRITE_GLYPH_RUN,
            measuring_mode: DWRITE_MEASURING_MODE,
            bitmap_snap_option: D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DrawSvgGlyphRun: *const fn (
            self: *const ID2D1DeviceContext4,
            baseline_origin: D2D_POINT_2F,
            glyph_run: ?*const DWRITE_GLYPH_RUN,
            default_fill_brush: ?*ID2D1Brush,
            svg_glyph_style: ?*ID2D1SvgGlyphStyle,
            color_palette_index: u32,
            measuring_mode: DWRITE_MEASURING_MODE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetColorBitmapGlyphImage: *const fn (
            self: *const ID2D1DeviceContext4,
            glyph_image_format: DWRITE_GLYPH_IMAGE_FORMATS,
            glyph_origin: D2D_POINT_2F,
            font_face: ?*IDWriteFontFace,
            font_em_size: f32,
            glyph_index: u16,
            is_sideways: BOOL,
            world_transform: ?*const D2D_MATRIX_3X2_F,
            dpi_x: f32,
            dpi_y: f32,
            glyph_transform: ?*D2D_MATRIX_3X2_F,
            glyph_image: ?*?*ID2D1Image,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSvgGlyphImage: *const fn (
            self: *const ID2D1DeviceContext4,
            glyph_origin: D2D_POINT_2F,
            font_face: ?*IDWriteFontFace,
            font_em_size: f32,
            glyph_index: u16,
            is_sideways: BOOL,
            world_transform: ?*const D2D_MATRIX_3X2_F,
            default_fill_brush: ?*ID2D1Brush,
            svg_glyph_style: ?*ID2D1SvgGlyphStyle,
            color_palette_index: u32,
            glyph_transform: ?*D2D_MATRIX_3X2_F,
            glyph_image: ?*?*ID2D1CommandList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1DeviceContext3.MethodMixin(T);
            pub inline fn createSvgGlyphStyle(self: *const T, svg_glyph_style_: ?*?*ID2D1SvgGlyphStyle) HRESULT {
                return @as(*const ID2D1DeviceContext4.VTable, @ptrCast(self.vtable)).CreateSvgGlyphStyle(@as(*const ID2D1DeviceContext4, @ptrCast(self)), svg_glyph_style_);
            }
            pub inline fn drawText(self: *const T, string_: [*:0]const u16, string_length_: u32, text_format_: ?*IDWriteTextFormat, layout_rect_: ?*const D2D_RECT_F, default_fill_brush_: ?*ID2D1Brush, svg_glyph_style_: ?*ID2D1SvgGlyphStyle, color_palette_index_: u32, options_: D2D1_DRAW_TEXT_OPTIONS, measuring_mode_: DWRITE_MEASURING_MODE) void {
                return @as(*const ID2D1DeviceContext4.VTable, @ptrCast(self.vtable)).DrawText(@as(*const ID2D1DeviceContext4, @ptrCast(self)), string_, string_length_, text_format_, layout_rect_, default_fill_brush_, svg_glyph_style_, color_palette_index_, options_, measuring_mode_);
            }
            pub inline fn drawTextLayout(self: *const T, origin_: D2D_POINT_2F, text_layout_: ?*IDWriteTextLayout, default_fill_brush_: ?*ID2D1Brush, svg_glyph_style_: ?*ID2D1SvgGlyphStyle, color_palette_index_: u32, options_: D2D1_DRAW_TEXT_OPTIONS) void {
                return @as(*const ID2D1DeviceContext4.VTable, @ptrCast(self.vtable)).DrawTextLayout(@as(*const ID2D1DeviceContext4, @ptrCast(self)), origin_, text_layout_, default_fill_brush_, svg_glyph_style_, color_palette_index_, options_);
            }
            pub inline fn drawColorBitmapGlyphRun(self: *const T, glyph_image_format_: DWRITE_GLYPH_IMAGE_FORMATS, baseline_origin_: D2D_POINT_2F, glyph_run_: ?*const DWRITE_GLYPH_RUN, measuring_mode_: DWRITE_MEASURING_MODE, bitmap_snap_option_: D2D1_COLOR_BITMAP_GLYPH_SNAP_OPTION) void {
                return @as(*const ID2D1DeviceContext4.VTable, @ptrCast(self.vtable)).DrawColorBitmapGlyphRun(@as(*const ID2D1DeviceContext4, @ptrCast(self)), glyph_image_format_, baseline_origin_, glyph_run_, measuring_mode_, bitmap_snap_option_);
            }
            pub inline fn drawSvgGlyphRun(self: *const T, baseline_origin_: D2D_POINT_2F, glyph_run_: ?*const DWRITE_GLYPH_RUN, default_fill_brush_: ?*ID2D1Brush, svg_glyph_style_: ?*ID2D1SvgGlyphStyle, color_palette_index_: u32, measuring_mode_: DWRITE_MEASURING_MODE) void {
                return @as(*const ID2D1DeviceContext4.VTable, @ptrCast(self.vtable)).DrawSvgGlyphRun(@as(*const ID2D1DeviceContext4, @ptrCast(self)), baseline_origin_, glyph_run_, default_fill_brush_, svg_glyph_style_, color_palette_index_, measuring_mode_);
            }
            pub inline fn getColorBitmapGlyphImage(self: *const T, glyph_image_format_: DWRITE_GLYPH_IMAGE_FORMATS, glyph_origin_: D2D_POINT_2F, font_face_: ?*IDWriteFontFace, font_em_size_: f32, glyph_index_: u16, is_sideways_: BOOL, world_transform_: ?*const D2D_MATRIX_3X2_F, dpi_x_: f32, dpi_y_: f32, glyph_transform_: ?*D2D_MATRIX_3X2_F, glyph_image_: ?*?*ID2D1Image) HRESULT {
                return @as(*const ID2D1DeviceContext4.VTable, @ptrCast(self.vtable)).GetColorBitmapGlyphImage(@as(*const ID2D1DeviceContext4, @ptrCast(self)), glyph_image_format_, glyph_origin_, font_face_, font_em_size_, glyph_index_, is_sideways_, world_transform_, dpi_x_, dpi_y_, glyph_transform_, glyph_image_);
            }
            pub inline fn getSvgGlyphImage(self: *const T, glyph_origin_: D2D_POINT_2F, font_face_: ?*IDWriteFontFace, font_em_size_: f32, glyph_index_: u16, is_sideways_: BOOL, world_transform_: ?*const D2D_MATRIX_3X2_F, default_fill_brush_: ?*ID2D1Brush, svg_glyph_style_: ?*ID2D1SvgGlyphStyle, color_palette_index_: u32, glyph_transform_: ?*D2D_MATRIX_3X2_F, glyph_image_: ?*?*ID2D1CommandList) HRESULT {
                return @as(*const ID2D1DeviceContext4.VTable, @ptrCast(self.vtable)).GetSvgGlyphImage(@as(*const ID2D1DeviceContext4, @ptrCast(self)), glyph_origin_, font_face_, font_em_size_, glyph_index_, is_sideways_, world_transform_, default_fill_brush_, svg_glyph_style_, color_palette_index_, glyph_transform_, glyph_image_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1Device4_Value = Guid.initString("d7bdb159-5683-4a46-bc9c-72dc720b858b");
pub const IID_ID2D1Device4 = &IID_ID2D1Device4_Value;
pub const ID2D1Device4 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Device3.VTable,
        CreateDeviceContext: *const fn (
            self: *const ID2D1Device4,
            options: D2D1_DEVICE_CONTEXT_OPTIONS,
            device_context4: ?*?*ID2D1DeviceContext4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaximumColorGlyphCacheMemory: *const fn (
            self: *const ID2D1Device4,
            maximum_in_bytes: u64,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetMaximumColorGlyphCacheMemory: *const fn (
            self: *const ID2D1Device4,
        ) callconv(@import("std").os.windows.WINAPI) u64,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Device3.MethodMixin(T);
            pub inline fn createDeviceContext(self: *const T, options_: D2D1_DEVICE_CONTEXT_OPTIONS, device_context4_: ?*?*ID2D1DeviceContext4) HRESULT {
                return @as(*const ID2D1Device4.VTable, @ptrCast(self.vtable)).CreateDeviceContext(@as(*const ID2D1Device4, @ptrCast(self)), options_, device_context4_);
            }
            pub inline fn setMaximumColorGlyphCacheMemory(self: *const T, maximum_in_bytes_: u64) void {
                return @as(*const ID2D1Device4.VTable, @ptrCast(self.vtable)).SetMaximumColorGlyphCacheMemory(@as(*const ID2D1Device4, @ptrCast(self)), maximum_in_bytes_);
            }
            pub inline fn getMaximumColorGlyphCacheMemory(self: *const T) u64 {
                return @as(*const ID2D1Device4.VTable, @ptrCast(self.vtable)).GetMaximumColorGlyphCacheMemory(@as(*const ID2D1Device4, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1Factory5_Value = Guid.initString("c4349994-838e-4b0f-8cab-44997d9eeacc");
pub const IID_ID2D1Factory5 = &IID_ID2D1Factory5_Value;
pub const ID2D1Factory5 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Factory4.VTable,
        CreateDevice: *const fn (
            self: *const ID2D1Factory5,
            dxgi_device: ?*IDXGIDevice,
            d2d_device4: ?*?*ID2D1Device4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Factory4.MethodMixin(T);
            pub inline fn createDevice(self: *const T, dxgi_device_: ?*IDXGIDevice, d2d_device4_: ?*?*ID2D1Device4) HRESULT {
                return @as(*const ID2D1Factory5.VTable, @ptrCast(self.vtable)).CreateDevice(@as(*const ID2D1Factory5, @ptrCast(self)), dxgi_device_, d2d_device4_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1CommandSink4_Value = Guid.initString("c78a6519-40d6-4218-b2de-beeeb744bb3e");
pub const IID_ID2D1CommandSink4 = &IID_ID2D1CommandSink4_Value;
pub const ID2D1CommandSink4 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1CommandSink3.VTable,
        SetPrimitiveBlend2: *const fn (
            self: *const ID2D1CommandSink4,
            primitive_blend: D2D1_PRIMITIVE_BLEND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1CommandSink3.MethodMixin(T);
            pub inline fn setPrimitiveBlend2(self: *const T, primitive_blend_: D2D1_PRIMITIVE_BLEND) HRESULT {
                return @as(*const ID2D1CommandSink4.VTable, @ptrCast(self.vtable)).SetPrimitiveBlend2(@as(*const ID2D1CommandSink4, @ptrCast(self)), primitive_blend_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1ColorContext1_Value = Guid.initString("1ab42875-c57f-4be9-bd85-9cd78d6f55ee");
pub const IID_ID2D1ColorContext1 = &IID_ID2D1ColorContext1_Value;
pub const ID2D1ColorContext1 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1ColorContext.VTable,
        GetColorContextType: *const fn (
            self: *const ID2D1ColorContext1,
        ) callconv(@import("std").os.windows.WINAPI) D2D1_COLOR_CONTEXT_TYPE,
        GetDXGIColorSpace: *const fn (
            self: *const ID2D1ColorContext1,
        ) callconv(@import("std").os.windows.WINAPI) DXGI_COLOR_SPACE_TYPE,
        GetSimpleColorProfile: *const fn (
            self: *const ID2D1ColorContext1,
            simple_profile: ?*D2D1_SIMPLE_COLOR_PROFILE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1ColorContext.MethodMixin(T);
            pub inline fn getColorContextType(self: *const T) D2D1_COLOR_CONTEXT_TYPE {
                return @as(*const ID2D1ColorContext1.VTable, @ptrCast(self.vtable)).GetColorContextType(@as(*const ID2D1ColorContext1, @ptrCast(self)));
            }
            pub inline fn getDXGIColorSpace(self: *const T) DXGI_COLOR_SPACE_TYPE {
                return @as(*const ID2D1ColorContext1.VTable, @ptrCast(self.vtable)).GetDXGIColorSpace(@as(*const ID2D1ColorContext1, @ptrCast(self)));
            }
            pub inline fn getSimpleColorProfile(self: *const T, simple_profile_: ?*D2D1_SIMPLE_COLOR_PROFILE) HRESULT {
                return @as(*const ID2D1ColorContext1.VTable, @ptrCast(self.vtable)).GetSimpleColorProfile(@as(*const ID2D1ColorContext1, @ptrCast(self)), simple_profile_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1DeviceContext5_Value = Guid.initString("7836d248-68cc-4df6-b9e8-de991bf62eb7");
pub const IID_ID2D1DeviceContext5 = &IID_ID2D1DeviceContext5_Value;
pub const ID2D1DeviceContext5 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1DeviceContext4.VTable,
        CreateSvgDocument: *const fn (
            self: *const ID2D1DeviceContext5,
            input_xml_stream: ?*IStream,
            viewport_size: D2D_SIZE_F,
            svg_document: ?*?*ID2D1SvgDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawSvgDocument: *const fn (
            self: *const ID2D1DeviceContext5,
            svg_document: ?*ID2D1SvgDocument,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CreateColorContextFromDxgiColorSpace: *const fn (
            self: *const ID2D1DeviceContext5,
            color_space: DXGI_COLOR_SPACE_TYPE,
            color_context: ?*?*ID2D1ColorContext1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateColorContextFromSimpleColorProfile: *const fn (
            self: *const ID2D1DeviceContext5,
            simple_profile: ?*const D2D1_SIMPLE_COLOR_PROFILE,
            color_context: ?*?*ID2D1ColorContext1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1DeviceContext4.MethodMixin(T);
            pub inline fn createSvgDocument(self: *const T, input_xml_stream_: ?*IStream, viewport_size_: D2D_SIZE_F, svg_document_: ?*?*ID2D1SvgDocument) HRESULT {
                return @as(*const ID2D1DeviceContext5.VTable, @ptrCast(self.vtable)).CreateSvgDocument(@as(*const ID2D1DeviceContext5, @ptrCast(self)), input_xml_stream_, viewport_size_, svg_document_);
            }
            pub inline fn drawSvgDocument(self: *const T, svg_document_: ?*ID2D1SvgDocument) void {
                return @as(*const ID2D1DeviceContext5.VTable, @ptrCast(self.vtable)).DrawSvgDocument(@as(*const ID2D1DeviceContext5, @ptrCast(self)), svg_document_);
            }
            pub inline fn createColorContextFromDxgiColorSpace(self: *const T, color_space_: DXGI_COLOR_SPACE_TYPE, color_context_: ?*?*ID2D1ColorContext1) HRESULT {
                return @as(*const ID2D1DeviceContext5.VTable, @ptrCast(self.vtable)).CreateColorContextFromDxgiColorSpace(@as(*const ID2D1DeviceContext5, @ptrCast(self)), color_space_, color_context_);
            }
            pub inline fn createColorContextFromSimpleColorProfile(self: *const T, simple_profile_: ?*const D2D1_SIMPLE_COLOR_PROFILE, color_context_: ?*?*ID2D1ColorContext1) HRESULT {
                return @as(*const ID2D1DeviceContext5.VTable, @ptrCast(self.vtable)).CreateColorContextFromSimpleColorProfile(@as(*const ID2D1DeviceContext5, @ptrCast(self)), simple_profile_, color_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1Device5_Value = Guid.initString("d55ba0a4-6405-4694-aef5-08ee1a4358b4");
pub const IID_ID2D1Device5 = &IID_ID2D1Device5_Value;
pub const ID2D1Device5 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Device4.VTable,
        CreateDeviceContext: *const fn (
            self: *const ID2D1Device5,
            options: D2D1_DEVICE_CONTEXT_OPTIONS,
            device_context5: ?*?*ID2D1DeviceContext5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Device4.MethodMixin(T);
            pub inline fn createDeviceContext(self: *const T, options_: D2D1_DEVICE_CONTEXT_OPTIONS, device_context5_: ?*?*ID2D1DeviceContext5) HRESULT {
                return @as(*const ID2D1Device5.VTable, @ptrCast(self.vtable)).CreateDeviceContext(@as(*const ID2D1Device5, @ptrCast(self)), options_, device_context5_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1Factory6_Value = Guid.initString("f9976f46-f642-44c1-97ca-da32ea2a2635");
pub const IID_ID2D1Factory6 = &IID_ID2D1Factory6_Value;
pub const ID2D1Factory6 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Factory5.VTable,
        CreateDevice: *const fn (
            self: *const ID2D1Factory6,
            dxgi_device: ?*IDXGIDevice,
            d2d_device5: ?*?*ID2D1Device5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Factory5.MethodMixin(T);
            pub inline fn createDevice(self: *const T, dxgi_device_: ?*IDXGIDevice, d2d_device5_: ?*?*ID2D1Device5) HRESULT {
                return @as(*const ID2D1Factory6.VTable, @ptrCast(self.vtable)).CreateDevice(@as(*const ID2D1Factory6, @ptrCast(self)), dxgi_device_, d2d_device5_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1CommandSink5_Value = Guid.initString("7047dd26-b1e7-44a7-959a-8349e2144fa8");
pub const IID_ID2D1CommandSink5 = &IID_ID2D1CommandSink5_Value;
pub const ID2D1CommandSink5 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1CommandSink4.VTable,
        BlendImage: *const fn (
            self: *const ID2D1CommandSink5,
            image: ?*ID2D1Image,
            blend_mode: D2D1_BLEND_MODE,
            target_offset: ?*const D2D_POINT_2F,
            image_rectangle: ?*const D2D_RECT_F,
            interpolation_mode: D2D1_INTERPOLATION_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1CommandSink4.MethodMixin(T);
            pub inline fn blendImage(self: *const T, image_: ?*ID2D1Image, blend_mode_: D2D1_BLEND_MODE, target_offset_: ?*const D2D_POINT_2F, image_rectangle_: ?*const D2D_RECT_F, interpolation_mode_: D2D1_INTERPOLATION_MODE) HRESULT {
                return @as(*const ID2D1CommandSink5.VTable, @ptrCast(self.vtable)).BlendImage(@as(*const ID2D1CommandSink5, @ptrCast(self)), image_, blend_mode_, target_offset_, image_rectangle_, interpolation_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1DeviceContext6_Value = Guid.initString("985f7e37-4ed0-4a19-98a3-15b0edfde306");
pub const IID_ID2D1DeviceContext6 = &IID_ID2D1DeviceContext6_Value;
pub const ID2D1DeviceContext6 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1DeviceContext5.VTable,
        BlendImage: *const fn (
            self: *const ID2D1DeviceContext6,
            image: ?*ID2D1Image,
            blend_mode: D2D1_BLEND_MODE,
            target_offset: ?*const D2D_POINT_2F,
            image_rectangle: ?*const D2D_RECT_F,
            interpolation_mode: D2D1_INTERPOLATION_MODE,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1DeviceContext5.MethodMixin(T);
            pub inline fn blendImage(self: *const T, image_: ?*ID2D1Image, blend_mode_: D2D1_BLEND_MODE, target_offset_: ?*const D2D_POINT_2F, image_rectangle_: ?*const D2D_RECT_F, interpolation_mode_: D2D1_INTERPOLATION_MODE) void {
                return @as(*const ID2D1DeviceContext6.VTable, @ptrCast(self.vtable)).BlendImage(@as(*const ID2D1DeviceContext6, @ptrCast(self)), image_, blend_mode_, target_offset_, image_rectangle_, interpolation_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1Device6_Value = Guid.initString("7bfef914-2d75-4bad-be87-e18ddb077b6d");
pub const IID_ID2D1Device6 = &IID_ID2D1Device6_Value;
pub const ID2D1Device6 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Device5.VTable,
        CreateDeviceContext: *const fn (
            self: *const ID2D1Device6,
            options: D2D1_DEVICE_CONTEXT_OPTIONS,
            device_context6: ?*?*ID2D1DeviceContext6,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Device5.MethodMixin(T);
            pub inline fn createDeviceContext(self: *const T, options_: D2D1_DEVICE_CONTEXT_OPTIONS, device_context6_: ?*?*ID2D1DeviceContext6) HRESULT {
                return @as(*const ID2D1Device6.VTable, @ptrCast(self.vtable)).CreateDeviceContext(@as(*const ID2D1Device6, @ptrCast(self)), options_, device_context6_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1Factory7_Value = Guid.initString("bdc2bdd3-b96c-4de6-bdf7-99d4745454de");
pub const IID_ID2D1Factory7 = &IID_ID2D1Factory7_Value;
pub const ID2D1Factory7 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1Factory6.VTable,
        CreateDevice: *const fn (
            self: *const ID2D1Factory7,
            dxgi_device: ?*IDXGIDevice,
            d2d_device6: ?*?*ID2D1Device6,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1Factory6.MethodMixin(T);
            pub inline fn createDevice(self: *const T, dxgi_device_: ?*IDXGIDevice, d2d_device6_: ?*?*ID2D1Device6) HRESULT {
                return @as(*const ID2D1Factory7.VTable, @ptrCast(self.vtable)).CreateDevice(@as(*const ID2D1Factory7, @ptrCast(self)), dxgi_device_, d2d_device6_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1EffectContext1_Value = Guid.initString("84ab595a-fc81-4546-bacd-e8ef4d8abe7a");
pub const IID_ID2D1EffectContext1 = &IID_ID2D1EffectContext1_Value;
pub const ID2D1EffectContext1 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1EffectContext.VTable,
        CreateLookupTable3D: *const fn (
            self: *const ID2D1EffectContext1,
            precision: D2D1_BUFFER_PRECISION,
            extents: *[3]u32,
            data: [*:0]const u8,
            data_count: u32,
            strides: *[2]u32,
            lookup_table: ?*?*ID2D1LookupTable3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1EffectContext.MethodMixin(T);
            pub inline fn createLookupTable3D(self: *const T, precision_: D2D1_BUFFER_PRECISION, extents_: *[3]u32, data_: [*:0]const u8, data_count_: u32, strides_: *[2]u32, lookup_table_: ?*?*ID2D1LookupTable3D) HRESULT {
                return @as(*const ID2D1EffectContext1.VTable, @ptrCast(self.vtable)).CreateLookupTable3D(@as(*const ID2D1EffectContext1, @ptrCast(self)), precision_, extents_, data_, data_count_, strides_, lookup_table_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ID2D1EffectContext2_Value = Guid.initString("577ad2a0-9fc7-4dda-8b18-dab810140052");
pub const IID_ID2D1EffectContext2 = &IID_ID2D1EffectContext2_Value;
pub const ID2D1EffectContext2 = extern struct {
    pub const VTable = extern struct {
        base: ID2D1EffectContext1.VTable,
        CreateColorContextFromDxgiColorSpace: *const fn (
            self: *const ID2D1EffectContext2,
            color_space: DXGI_COLOR_SPACE_TYPE,
            color_context: ?*?*ID2D1ColorContext1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateColorContextFromSimpleColorProfile: *const fn (
            self: *const ID2D1EffectContext2,
            simple_profile: ?*const D2D1_SIMPLE_COLOR_PROFILE,
            color_context: ?*?*ID2D1ColorContext1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ID2D1EffectContext1.MethodMixin(T);
            pub inline fn createColorContextFromDxgiColorSpace(self: *const T, color_space_: DXGI_COLOR_SPACE_TYPE, color_context_: ?*?*ID2D1ColorContext1) HRESULT {
                return @as(*const ID2D1EffectContext2.VTable, @ptrCast(self.vtable)).CreateColorContextFromDxgiColorSpace(@as(*const ID2D1EffectContext2, @ptrCast(self)), color_space_, color_context_);
            }
            pub inline fn createColorContextFromSimpleColorProfile(self: *const T, simple_profile_: ?*const D2D1_SIMPLE_COLOR_PROFILE, color_context_: ?*?*ID2D1ColorContext1) HRESULT {
                return @as(*const ID2D1EffectContext2.VTable, @ptrCast(self.vtable)).CreateColorContextFromSimpleColorProfile(@as(*const ID2D1EffectContext2, @ptrCast(self)), simple_profile_, color_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (13)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.1'
pub extern "d2d1" fn D2D1CreateFactory(
    factory_type: D2D1_FACTORY_TYPE,
    riid: ?*const Guid,
    p_factory_options: ?*const D2D1_FACTORY_OPTIONS,
    pp_i_factory: **anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "d2d1" fn D2D1MakeRotateMatrix(
    angle: f32,
    center: D2D_POINT_2F,
    matrix: ?*D2D_MATRIX_3X2_F,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.1'
pub extern "d2d1" fn D2D1MakeSkewMatrix(
    angle_x: f32,
    angle_y: f32,
    center: D2D_POINT_2F,
    matrix: ?*D2D_MATRIX_3X2_F,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.1'
pub extern "d2d1" fn D2D1IsMatrixInvertible(
    matrix: ?*const D2D_MATRIX_3X2_F,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "d2d1" fn D2D1InvertMatrix(
    matrix: ?*D2D_MATRIX_3X2_F,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "d2d1" fn D2D1CreateDevice(
    dxgi_device: ?*IDXGIDevice,
    creation_properties: ?*const D2D1_CREATION_PROPERTIES,
    d2d_device: ?*?*ID2D1Device,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "d2d1" fn D2D1CreateDeviceContext(
    dxgi_surface: ?*IDXGISurface,
    creation_properties: ?*const D2D1_CREATION_PROPERTIES,
    d2d_device_context: ?*?*ID2D1DeviceContext,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "d2d1" fn D2D1ConvertColorSpace(
    source_color_space: D2D1_COLOR_SPACE,
    destination_color_space: D2D1_COLOR_SPACE,
    color: ?*const D2D1_COLOR_F,
    retval: *D2D1_COLOR_F,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "d2d1" fn D2D1SinCos(
    angle: f32,
    s: ?*f32,
    c: ?*f32,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "d2d1" fn D2D1Tan(
    angle: f32,
) callconv(@import("std").os.windows.WINAPI) f32;

pub extern "d2d1" fn D2D1Vec3Length(
    x: f32,
    y: f32,
    z: f32,
) callconv(@import("std").os.windows.WINAPI) f32;

// TODO: this type is limited to platform 'windows8.1'
pub extern "d2d1" fn D2D1ComputeMaximumScaleFactor(
    matrix: ?*const D2D_MATRIX_3X2_F,
) callconv(@import("std").os.windows.WINAPI) f32;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "d2d1" fn D2D1GetGradientMeshInteriorPointsFromCoonsPatch(
    p_point0: ?*const D2D_POINT_2F,
    p_point1: ?*const D2D_POINT_2F,
    p_point2: ?*const D2D_POINT_2F,
    p_point3: ?*const D2D_POINT_2F,
    p_point4: ?*const D2D_POINT_2F,
    p_point5: ?*const D2D_POINT_2F,
    p_point6: ?*const D2D_POINT_2F,
    p_point7: ?*const D2D_POINT_2F,
    p_point8: ?*const D2D_POINT_2F,
    p_point9: ?*const D2D_POINT_2F,
    p_point10: ?*const D2D_POINT_2F,
    p_point11: ?*const D2D_POINT_2F,
    p_tensor_point11: ?*D2D_POINT_2F,
    p_tensor_point12: ?*D2D_POINT_2F,
    p_tensor_point21: ?*D2D_POINT_2F,
    p_tensor_point22: ?*D2D_POINT_2F,
) callconv(@import("std").os.windows.WINAPI) void;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (47)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const D2D1_ALPHA_MODE = @import("../graphics/direct2d/common.zig").D2D1_ALPHA_MODE;
const D2D1_BEZIER_SEGMENT = @import("../graphics/direct2d/common.zig").D2D1_BEZIER_SEGMENT;
const D2D1_BLEND_MODE = @import("../graphics/direct2d/common.zig").D2D1_BLEND_MODE;
const D2D1_COLOR_F = @import("../graphics/direct2d/common.zig").D2D1_COLOR_F;
const D2D1_COMPOSITE_MODE = @import("../graphics/direct2d/common.zig").D2D1_COMPOSITE_MODE;
const D2D1_FILL_MODE = @import("../graphics/direct2d/common.zig").D2D1_FILL_MODE;
const D2D1_PIXEL_FORMAT = @import("../graphics/direct2d/common.zig").D2D1_PIXEL_FORMAT;
const D2D_MATRIX_3X2_F = @import("../graphics/direct2d/common.zig").D2D_MATRIX_3X2_F;
const D2D_MATRIX_4X3_F = @import("../graphics/direct2d/common.zig").D2D_MATRIX_4X3_F;
const D2D_MATRIX_4X4_F = @import("../graphics/direct2d/common.zig").D2D_MATRIX_4X4_F;
const D2D_MATRIX_5X4_F = @import("../graphics/direct2d/common.zig").D2D_MATRIX_5X4_F;
const D2D_POINT_2F = @import("../graphics/direct2d/common.zig").D2D_POINT_2F;
const D2D_POINT_2U = @import("../graphics/direct2d/common.zig").D2D_POINT_2U;
const D2D_RECT_F = @import("../graphics/direct2d/common.zig").D2D_RECT_F;
const D2D_RECT_U = @import("../graphics/direct2d/common.zig").D2D_RECT_U;
const D2D_SIZE_F = @import("../graphics/direct2d/common.zig").D2D_SIZE_F;
const D2D_SIZE_U = @import("../graphics/direct2d/common.zig").D2D_SIZE_U;
const D3D_FEATURE_LEVEL = @import("../graphics/direct3d.zig").D3D_FEATURE_LEVEL;
const DWRITE_GLYPH_IMAGE_FORMATS = @import("../graphics/direct_write.zig").DWRITE_GLYPH_IMAGE_FORMATS;
const DWRITE_GLYPH_RUN = @import("../graphics/direct_write.zig").DWRITE_GLYPH_RUN;
const DWRITE_GLYPH_RUN_DESCRIPTION = @import("../graphics/direct_write.zig").DWRITE_GLYPH_RUN_DESCRIPTION;
const DWRITE_MEASURING_MODE = @import("../graphics/direct_write.zig").DWRITE_MEASURING_MODE;
const DXGI_COLOR_SPACE_TYPE = @import("../graphics/dxgi/common.zig").DXGI_COLOR_SPACE_TYPE;
const DXGI_FORMAT = @import("../graphics/dxgi/common.zig").DXGI_FORMAT;
const HDC = @import("../graphics/gdi.zig").HDC;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const ID2D1SimplifiedGeometrySink = @import("../graphics/direct2d/common.zig").ID2D1SimplifiedGeometrySink;
const IDWriteFontFace = @import("../graphics/direct_write.zig").IDWriteFontFace;
const IDWriteRenderingParams = @import("../graphics/direct_write.zig").IDWriteRenderingParams;
const IDWriteTextFormat = @import("../graphics/direct_write.zig").IDWriteTextFormat;
const IDWriteTextLayout = @import("../graphics/direct_write.zig").IDWriteTextLayout;
const IDXGIDevice = @import("../graphics/dxgi.zig").IDXGIDevice;
const IDXGISurface = @import("../graphics/dxgi.zig").IDXGISurface;
const IPrintDocumentPackageTarget = @import("../storage/xps/printing.zig").IPrintDocumentPackageTarget;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const IWICBitmap = @import("../graphics/imaging.zig").IWICBitmap;
const IWICBitmapSource = @import("../graphics/imaging.zig").IWICBitmapSource;
const IWICColorContext = @import("../graphics/imaging.zig").IWICColorContext;
const IWICImagingFactory = @import("../graphics/imaging.zig").IWICImagingFactory;
const POINT = @import("../foundation.zig").POINT;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const RECT = @import("../foundation.zig").RECT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PD2D1_EFFECT_FACTORY")) {
        _ = PD2D1_EFFECT_FACTORY;
    }
    if (@hasDecl(@This(), "PD2D1_PROPERTY_SET_FUNCTION")) {
        _ = PD2D1_PROPERTY_SET_FUNCTION;
    }
    if (@hasDecl(@This(), "PD2D1_PROPERTY_GET_FUNCTION")) {
        _ = PD2D1_PROPERTY_GET_FUNCTION;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
//--------------------------------------------------------------------------------
// Section: SubModules (1)
//--------------------------------------------------------------------------------
pub const common = @import("direct2d/common.zig");
