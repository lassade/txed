//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (7)
//--------------------------------------------------------------------------------
pub const DWRITE_ALPHA_MAX = @as(u32, 255);
pub const FACILITY_DWRITE = @as(u32, 2200);
pub const DWRITE_ERR_BASE = @as(u32, 20480);
pub const DWRITE_E_REMOTEFONT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2003283955));
pub const DWRITE_E_DOWNLOADCANCELLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2003283954));
pub const DWRITE_E_DOWNLOADFAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2003283953));
pub const DWRITE_E_TOOMANYDOWNLOADS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2003283952));

//--------------------------------------------------------------------------------
// Section: Types (194)
//--------------------------------------------------------------------------------
pub const DWRITE_FONT_AXIS_TAG = enum(u32) {
    WEIGHT = 1952999287,
    WIDTH = 1752458359,
    SLANT = 1953393779,
    OPTICAL_SIZE = 2054385775,
    ITALIC = 1818326121,
};
pub const DWRITE_FONT_AXIS_TAG_WEIGHT = DWRITE_FONT_AXIS_TAG.WEIGHT;
pub const DWRITE_FONT_AXIS_TAG_WIDTH = DWRITE_FONT_AXIS_TAG.WIDTH;
pub const DWRITE_FONT_AXIS_TAG_SLANT = DWRITE_FONT_AXIS_TAG.SLANT;
pub const DWRITE_FONT_AXIS_TAG_OPTICAL_SIZE = DWRITE_FONT_AXIS_TAG.OPTICAL_SIZE;
pub const DWRITE_FONT_AXIS_TAG_ITALIC = DWRITE_FONT_AXIS_TAG.ITALIC;

pub const DWRITE_COLOR_F = extern struct {
    r: f32,
    g: f32,
    b: f32,
    a: f32,
};

pub const DWRITE_MEASURING_MODE = enum(i32) {
    NATURAL = 0,
    GDI_CLASSIC = 1,
    GDI_NATURAL = 2,
};
pub const DWRITE_MEASURING_MODE_NATURAL = DWRITE_MEASURING_MODE.NATURAL;
pub const DWRITE_MEASURING_MODE_GDI_CLASSIC = DWRITE_MEASURING_MODE.GDI_CLASSIC;
pub const DWRITE_MEASURING_MODE_GDI_NATURAL = DWRITE_MEASURING_MODE.GDI_NATURAL;

pub const DWRITE_GLYPH_IMAGE_FORMATS = enum(u32) {
    NONE = 0,
    TRUETYPE = 1,
    CFF = 2,
    COLR = 4,
    SVG = 8,
    PNG = 16,
    JPEG = 32,
    TIFF = 64,
    PREMULTIPLIED_B8G8R8A8 = 128,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        TRUETYPE: u1 = 0,
        CFF: u1 = 0,
        COLR: u1 = 0,
        SVG: u1 = 0,
        PNG: u1 = 0,
        JPEG: u1 = 0,
        TIFF: u1 = 0,
        PREMULTIPLIED_B8G8R8A8: u1 = 0,
    }) DWRITE_GLYPH_IMAGE_FORMATS {
        return @as(DWRITE_GLYPH_IMAGE_FORMATS, @enumFromInt((if (o.NONE == 1) @intFromEnum(DWRITE_GLYPH_IMAGE_FORMATS.NONE) else 0) | (if (o.TRUETYPE == 1) @intFromEnum(DWRITE_GLYPH_IMAGE_FORMATS.TRUETYPE) else 0) | (if (o.CFF == 1) @intFromEnum(DWRITE_GLYPH_IMAGE_FORMATS.CFF) else 0) | (if (o.COLR == 1) @intFromEnum(DWRITE_GLYPH_IMAGE_FORMATS.COLR) else 0) | (if (o.SVG == 1) @intFromEnum(DWRITE_GLYPH_IMAGE_FORMATS.SVG) else 0) | (if (o.PNG == 1) @intFromEnum(DWRITE_GLYPH_IMAGE_FORMATS.PNG) else 0) | (if (o.JPEG == 1) @intFromEnum(DWRITE_GLYPH_IMAGE_FORMATS.JPEG) else 0) | (if (o.TIFF == 1) @intFromEnum(DWRITE_GLYPH_IMAGE_FORMATS.TIFF) else 0) | (if (o.PREMULTIPLIED_B8G8R8A8 == 1) @intFromEnum(DWRITE_GLYPH_IMAGE_FORMATS.PREMULTIPLIED_B8G8R8A8) else 0)));
    }
};
pub const DWRITE_GLYPH_IMAGE_FORMATS_NONE = DWRITE_GLYPH_IMAGE_FORMATS.NONE;
pub const DWRITE_GLYPH_IMAGE_FORMATS_TRUETYPE = DWRITE_GLYPH_IMAGE_FORMATS.TRUETYPE;
pub const DWRITE_GLYPH_IMAGE_FORMATS_CFF = DWRITE_GLYPH_IMAGE_FORMATS.CFF;
pub const DWRITE_GLYPH_IMAGE_FORMATS_COLR = DWRITE_GLYPH_IMAGE_FORMATS.COLR;
pub const DWRITE_GLYPH_IMAGE_FORMATS_SVG = DWRITE_GLYPH_IMAGE_FORMATS.SVG;
pub const DWRITE_GLYPH_IMAGE_FORMATS_PNG = DWRITE_GLYPH_IMAGE_FORMATS.PNG;
pub const DWRITE_GLYPH_IMAGE_FORMATS_JPEG = DWRITE_GLYPH_IMAGE_FORMATS.JPEG;
pub const DWRITE_GLYPH_IMAGE_FORMATS_TIFF = DWRITE_GLYPH_IMAGE_FORMATS.TIFF;
pub const DWRITE_GLYPH_IMAGE_FORMATS_PREMULTIPLIED_B8G8R8A8 = DWRITE_GLYPH_IMAGE_FORMATS.PREMULTIPLIED_B8G8R8A8;

pub const DWRITE_FONT_FILE_TYPE = enum(i32) {
    UNKNOWN = 0,
    CFF = 1,
    TRUETYPE = 2,
    OPENTYPE_COLLECTION = 3,
    TYPE1_PFM = 4,
    TYPE1_PFB = 5,
    VECTOR = 6,
    BITMAP = 7,
    // TRUETYPE_COLLECTION = 3, this enum value conflicts with OPENTYPE_COLLECTION
};
pub const DWRITE_FONT_FILE_TYPE_UNKNOWN = DWRITE_FONT_FILE_TYPE.UNKNOWN;
pub const DWRITE_FONT_FILE_TYPE_CFF = DWRITE_FONT_FILE_TYPE.CFF;
pub const DWRITE_FONT_FILE_TYPE_TRUETYPE = DWRITE_FONT_FILE_TYPE.TRUETYPE;
pub const DWRITE_FONT_FILE_TYPE_OPENTYPE_COLLECTION = DWRITE_FONT_FILE_TYPE.OPENTYPE_COLLECTION;
pub const DWRITE_FONT_FILE_TYPE_TYPE1_PFM = DWRITE_FONT_FILE_TYPE.TYPE1_PFM;
pub const DWRITE_FONT_FILE_TYPE_TYPE1_PFB = DWRITE_FONT_FILE_TYPE.TYPE1_PFB;
pub const DWRITE_FONT_FILE_TYPE_VECTOR = DWRITE_FONT_FILE_TYPE.VECTOR;
pub const DWRITE_FONT_FILE_TYPE_BITMAP = DWRITE_FONT_FILE_TYPE.BITMAP;
pub const DWRITE_FONT_FILE_TYPE_TRUETYPE_COLLECTION = DWRITE_FONT_FILE_TYPE.OPENTYPE_COLLECTION;

pub const DWRITE_FONT_FACE_TYPE = enum(i32) {
    CFF = 0,
    TRUETYPE = 1,
    OPENTYPE_COLLECTION = 2,
    TYPE1 = 3,
    VECTOR = 4,
    BITMAP = 5,
    UNKNOWN = 6,
    RAW_CFF = 7,
    // TRUETYPE_COLLECTION = 2, this enum value conflicts with OPENTYPE_COLLECTION
};
pub const DWRITE_FONT_FACE_TYPE_CFF = DWRITE_FONT_FACE_TYPE.CFF;
pub const DWRITE_FONT_FACE_TYPE_TRUETYPE = DWRITE_FONT_FACE_TYPE.TRUETYPE;
pub const DWRITE_FONT_FACE_TYPE_OPENTYPE_COLLECTION = DWRITE_FONT_FACE_TYPE.OPENTYPE_COLLECTION;
pub const DWRITE_FONT_FACE_TYPE_TYPE1 = DWRITE_FONT_FACE_TYPE.TYPE1;
pub const DWRITE_FONT_FACE_TYPE_VECTOR = DWRITE_FONT_FACE_TYPE.VECTOR;
pub const DWRITE_FONT_FACE_TYPE_BITMAP = DWRITE_FONT_FACE_TYPE.BITMAP;
pub const DWRITE_FONT_FACE_TYPE_UNKNOWN = DWRITE_FONT_FACE_TYPE.UNKNOWN;
pub const DWRITE_FONT_FACE_TYPE_RAW_CFF = DWRITE_FONT_FACE_TYPE.RAW_CFF;
pub const DWRITE_FONT_FACE_TYPE_TRUETYPE_COLLECTION = DWRITE_FONT_FACE_TYPE.OPENTYPE_COLLECTION;

pub const DWRITE_FONT_SIMULATIONS = enum(u32) {
    NONE = 0,
    BOLD = 1,
    OBLIQUE = 2,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        BOLD: u1 = 0,
        OBLIQUE: u1 = 0,
    }) DWRITE_FONT_SIMULATIONS {
        return @as(DWRITE_FONT_SIMULATIONS, @enumFromInt((if (o.NONE == 1) @intFromEnum(DWRITE_FONT_SIMULATIONS.NONE) else 0) | (if (o.BOLD == 1) @intFromEnum(DWRITE_FONT_SIMULATIONS.BOLD) else 0) | (if (o.OBLIQUE == 1) @intFromEnum(DWRITE_FONT_SIMULATIONS.OBLIQUE) else 0)));
    }
};
pub const DWRITE_FONT_SIMULATIONS_NONE = DWRITE_FONT_SIMULATIONS.NONE;
pub const DWRITE_FONT_SIMULATIONS_BOLD = DWRITE_FONT_SIMULATIONS.BOLD;
pub const DWRITE_FONT_SIMULATIONS_OBLIQUE = DWRITE_FONT_SIMULATIONS.OBLIQUE;

pub const DWRITE_FONT_WEIGHT = enum(i32) {
    THIN = 100,
    EXTRA_LIGHT = 200,
    // ULTRA_LIGHT = 200, this enum value conflicts with EXTRA_LIGHT
    LIGHT = 300,
    SEMI_LIGHT = 350,
    NORMAL = 400,
    // REGULAR = 400, this enum value conflicts with NORMAL
    MEDIUM = 500,
    DEMI_BOLD = 600,
    // SEMI_BOLD = 600, this enum value conflicts with DEMI_BOLD
    BOLD = 700,
    EXTRA_BOLD = 800,
    // ULTRA_BOLD = 800, this enum value conflicts with EXTRA_BOLD
    BLACK = 900,
    // HEAVY = 900, this enum value conflicts with BLACK
    EXTRA_BLACK = 950,
    // ULTRA_BLACK = 950, this enum value conflicts with EXTRA_BLACK
};
pub const DWRITE_FONT_WEIGHT_THIN = DWRITE_FONT_WEIGHT.THIN;
pub const DWRITE_FONT_WEIGHT_EXTRA_LIGHT = DWRITE_FONT_WEIGHT.EXTRA_LIGHT;
pub const DWRITE_FONT_WEIGHT_ULTRA_LIGHT = DWRITE_FONT_WEIGHT.EXTRA_LIGHT;
pub const DWRITE_FONT_WEIGHT_LIGHT = DWRITE_FONT_WEIGHT.LIGHT;
pub const DWRITE_FONT_WEIGHT_SEMI_LIGHT = DWRITE_FONT_WEIGHT.SEMI_LIGHT;
pub const DWRITE_FONT_WEIGHT_NORMAL = DWRITE_FONT_WEIGHT.NORMAL;
pub const DWRITE_FONT_WEIGHT_REGULAR = DWRITE_FONT_WEIGHT.NORMAL;
pub const DWRITE_FONT_WEIGHT_MEDIUM = DWRITE_FONT_WEIGHT.MEDIUM;
pub const DWRITE_FONT_WEIGHT_DEMI_BOLD = DWRITE_FONT_WEIGHT.DEMI_BOLD;
pub const DWRITE_FONT_WEIGHT_SEMI_BOLD = DWRITE_FONT_WEIGHT.DEMI_BOLD;
pub const DWRITE_FONT_WEIGHT_BOLD = DWRITE_FONT_WEIGHT.BOLD;
pub const DWRITE_FONT_WEIGHT_EXTRA_BOLD = DWRITE_FONT_WEIGHT.EXTRA_BOLD;
pub const DWRITE_FONT_WEIGHT_ULTRA_BOLD = DWRITE_FONT_WEIGHT.EXTRA_BOLD;
pub const DWRITE_FONT_WEIGHT_BLACK = DWRITE_FONT_WEIGHT.BLACK;
pub const DWRITE_FONT_WEIGHT_HEAVY = DWRITE_FONT_WEIGHT.BLACK;
pub const DWRITE_FONT_WEIGHT_EXTRA_BLACK = DWRITE_FONT_WEIGHT.EXTRA_BLACK;
pub const DWRITE_FONT_WEIGHT_ULTRA_BLACK = DWRITE_FONT_WEIGHT.EXTRA_BLACK;

pub const DWRITE_FONT_STRETCH = enum(i32) {
    UNDEFINED = 0,
    ULTRA_CONDENSED = 1,
    EXTRA_CONDENSED = 2,
    CONDENSED = 3,
    SEMI_CONDENSED = 4,
    NORMAL = 5,
    // MEDIUM = 5, this enum value conflicts with NORMAL
    SEMI_EXPANDED = 6,
    EXPANDED = 7,
    EXTRA_EXPANDED = 8,
    ULTRA_EXPANDED = 9,
};
pub const DWRITE_FONT_STRETCH_UNDEFINED = DWRITE_FONT_STRETCH.UNDEFINED;
pub const DWRITE_FONT_STRETCH_ULTRA_CONDENSED = DWRITE_FONT_STRETCH.ULTRA_CONDENSED;
pub const DWRITE_FONT_STRETCH_EXTRA_CONDENSED = DWRITE_FONT_STRETCH.EXTRA_CONDENSED;
pub const DWRITE_FONT_STRETCH_CONDENSED = DWRITE_FONT_STRETCH.CONDENSED;
pub const DWRITE_FONT_STRETCH_SEMI_CONDENSED = DWRITE_FONT_STRETCH.SEMI_CONDENSED;
pub const DWRITE_FONT_STRETCH_NORMAL = DWRITE_FONT_STRETCH.NORMAL;
pub const DWRITE_FONT_STRETCH_MEDIUM = DWRITE_FONT_STRETCH.NORMAL;
pub const DWRITE_FONT_STRETCH_SEMI_EXPANDED = DWRITE_FONT_STRETCH.SEMI_EXPANDED;
pub const DWRITE_FONT_STRETCH_EXPANDED = DWRITE_FONT_STRETCH.EXPANDED;
pub const DWRITE_FONT_STRETCH_EXTRA_EXPANDED = DWRITE_FONT_STRETCH.EXTRA_EXPANDED;
pub const DWRITE_FONT_STRETCH_ULTRA_EXPANDED = DWRITE_FONT_STRETCH.ULTRA_EXPANDED;

pub const DWRITE_FONT_STYLE = enum(i32) {
    NORMAL = 0,
    OBLIQUE = 1,
    ITALIC = 2,
};
pub const DWRITE_FONT_STYLE_NORMAL = DWRITE_FONT_STYLE.NORMAL;
pub const DWRITE_FONT_STYLE_OBLIQUE = DWRITE_FONT_STYLE.OBLIQUE;
pub const DWRITE_FONT_STYLE_ITALIC = DWRITE_FONT_STYLE.ITALIC;

pub const DWRITE_INFORMATIONAL_STRING_ID = enum(i32) {
    NONE = 0,
    COPYRIGHT_NOTICE = 1,
    VERSION_STRINGS = 2,
    TRADEMARK = 3,
    MANUFACTURER = 4,
    DESIGNER = 5,
    DESIGNER_URL = 6,
    DESCRIPTION = 7,
    FONT_VENDOR_URL = 8,
    LICENSE_DESCRIPTION = 9,
    LICENSE_INFO_URL = 10,
    WIN32_FAMILY_NAMES = 11,
    WIN32_SUBFAMILY_NAMES = 12,
    TYPOGRAPHIC_FAMILY_NAMES = 13,
    TYPOGRAPHIC_SUBFAMILY_NAMES = 14,
    SAMPLE_TEXT = 15,
    FULL_NAME = 16,
    POSTSCRIPT_NAME = 17,
    POSTSCRIPT_CID_NAME = 18,
    WEIGHT_STRETCH_STYLE_FAMILY_NAME = 19,
    DESIGN_SCRIPT_LANGUAGE_TAG = 20,
    SUPPORTED_SCRIPT_LANGUAGE_TAG = 21,
    // PREFERRED_FAMILY_NAMES = 13, this enum value conflicts with TYPOGRAPHIC_FAMILY_NAMES
    // PREFERRED_SUBFAMILY_NAMES = 14, this enum value conflicts with TYPOGRAPHIC_SUBFAMILY_NAMES
    // WWS_FAMILY_NAME = 19, this enum value conflicts with WEIGHT_STRETCH_STYLE_FAMILY_NAME
};
pub const DWRITE_INFORMATIONAL_STRING_NONE = DWRITE_INFORMATIONAL_STRING_ID.NONE;
pub const DWRITE_INFORMATIONAL_STRING_COPYRIGHT_NOTICE = DWRITE_INFORMATIONAL_STRING_ID.COPYRIGHT_NOTICE;
pub const DWRITE_INFORMATIONAL_STRING_VERSION_STRINGS = DWRITE_INFORMATIONAL_STRING_ID.VERSION_STRINGS;
pub const DWRITE_INFORMATIONAL_STRING_TRADEMARK = DWRITE_INFORMATIONAL_STRING_ID.TRADEMARK;
pub const DWRITE_INFORMATIONAL_STRING_MANUFACTURER = DWRITE_INFORMATIONAL_STRING_ID.MANUFACTURER;
pub const DWRITE_INFORMATIONAL_STRING_DESIGNER = DWRITE_INFORMATIONAL_STRING_ID.DESIGNER;
pub const DWRITE_INFORMATIONAL_STRING_DESIGNER_URL = DWRITE_INFORMATIONAL_STRING_ID.DESIGNER_URL;
pub const DWRITE_INFORMATIONAL_STRING_DESCRIPTION = DWRITE_INFORMATIONAL_STRING_ID.DESCRIPTION;
pub const DWRITE_INFORMATIONAL_STRING_FONT_VENDOR_URL = DWRITE_INFORMATIONAL_STRING_ID.FONT_VENDOR_URL;
pub const DWRITE_INFORMATIONAL_STRING_LICENSE_DESCRIPTION = DWRITE_INFORMATIONAL_STRING_ID.LICENSE_DESCRIPTION;
pub const DWRITE_INFORMATIONAL_STRING_LICENSE_INFO_URL = DWRITE_INFORMATIONAL_STRING_ID.LICENSE_INFO_URL;
pub const DWRITE_INFORMATIONAL_STRING_WIN32_FAMILY_NAMES = DWRITE_INFORMATIONAL_STRING_ID.WIN32_FAMILY_NAMES;
pub const DWRITE_INFORMATIONAL_STRING_WIN32_SUBFAMILY_NAMES = DWRITE_INFORMATIONAL_STRING_ID.WIN32_SUBFAMILY_NAMES;
pub const DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_FAMILY_NAMES = DWRITE_INFORMATIONAL_STRING_ID.TYPOGRAPHIC_FAMILY_NAMES;
pub const DWRITE_INFORMATIONAL_STRING_TYPOGRAPHIC_SUBFAMILY_NAMES = DWRITE_INFORMATIONAL_STRING_ID.TYPOGRAPHIC_SUBFAMILY_NAMES;
pub const DWRITE_INFORMATIONAL_STRING_SAMPLE_TEXT = DWRITE_INFORMATIONAL_STRING_ID.SAMPLE_TEXT;
pub const DWRITE_INFORMATIONAL_STRING_FULL_NAME = DWRITE_INFORMATIONAL_STRING_ID.FULL_NAME;
pub const DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_NAME = DWRITE_INFORMATIONAL_STRING_ID.POSTSCRIPT_NAME;
pub const DWRITE_INFORMATIONAL_STRING_POSTSCRIPT_CID_NAME = DWRITE_INFORMATIONAL_STRING_ID.POSTSCRIPT_CID_NAME;
pub const DWRITE_INFORMATIONAL_STRING_WEIGHT_STRETCH_STYLE_FAMILY_NAME = DWRITE_INFORMATIONAL_STRING_ID.WEIGHT_STRETCH_STYLE_FAMILY_NAME;
pub const DWRITE_INFORMATIONAL_STRING_DESIGN_SCRIPT_LANGUAGE_TAG = DWRITE_INFORMATIONAL_STRING_ID.DESIGN_SCRIPT_LANGUAGE_TAG;
pub const DWRITE_INFORMATIONAL_STRING_SUPPORTED_SCRIPT_LANGUAGE_TAG = DWRITE_INFORMATIONAL_STRING_ID.SUPPORTED_SCRIPT_LANGUAGE_TAG;
pub const DWRITE_INFORMATIONAL_STRING_PREFERRED_FAMILY_NAMES = DWRITE_INFORMATIONAL_STRING_ID.TYPOGRAPHIC_FAMILY_NAMES;
pub const DWRITE_INFORMATIONAL_STRING_PREFERRED_SUBFAMILY_NAMES = DWRITE_INFORMATIONAL_STRING_ID.TYPOGRAPHIC_SUBFAMILY_NAMES;
pub const DWRITE_INFORMATIONAL_STRING_WWS_FAMILY_NAME = DWRITE_INFORMATIONAL_STRING_ID.WEIGHT_STRETCH_STYLE_FAMILY_NAME;

pub const DWRITE_FONT_METRICS = extern struct {
    designUnitsPerEm: u16,
    ascent: u16,
    descent: u16,
    lineGap: i16,
    capHeight: u16,
    xHeight: u16,
    underlinePosition: i16,
    underlineThickness: u16,
    strikethroughPosition: i16,
    strikethroughThickness: u16,
};

pub const DWRITE_GLYPH_METRICS = extern struct {
    leftSideBearing: i32,
    advanceWidth: u32,
    rightSideBearing: i32,
    topSideBearing: i32,
    advanceHeight: u32,
    bottomSideBearing: i32,
    verticalOriginY: i32,
};

pub const DWRITE_GLYPH_OFFSET = extern struct {
    advanceOffset: f32,
    ascenderOffset: f32,
};

pub const DWRITE_FACTORY_TYPE = enum(i32) {
    SHARED = 0,
    ISOLATED = 1,
};
pub const DWRITE_FACTORY_TYPE_SHARED = DWRITE_FACTORY_TYPE.SHARED;
pub const DWRITE_FACTORY_TYPE_ISOLATED = DWRITE_FACTORY_TYPE.ISOLATED;

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFontFileLoader_Value = Guid.initString("727cad4e-d6af-4c9e-8a08-d695b11caa49");
pub const IID_IDWriteFontFileLoader = &IID_IDWriteFontFileLoader_Value;
pub const IDWriteFontFileLoader = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateStreamFromKey: *const fn (
            self: *const IDWriteFontFileLoader,
            // TODO: what to do with BytesParamIndex 1?
            font_file_reference_key: ?*const anyopaque,
            font_file_reference_key_size: u32,
            font_file_stream: ?*?*IDWriteFontFileStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createStreamFromKey(self: *const T, font_file_reference_key_: ?*const anyopaque, font_file_reference_key_size_: u32, font_file_stream_: ?*?*IDWriteFontFileStream) HRESULT {
                return @as(*const IDWriteFontFileLoader.VTable, @ptrCast(self.vtable)).CreateStreamFromKey(@as(*const IDWriteFontFileLoader, @ptrCast(self)), font_file_reference_key_, font_file_reference_key_size_, font_file_stream_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteLocalFontFileLoader_Value = Guid.initString("b2d9f3ec-c9fe-4a11-a2ec-d86208f7c0a2");
pub const IID_IDWriteLocalFontFileLoader = &IID_IDWriteLocalFontFileLoader_Value;
pub const IDWriteLocalFontFileLoader = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontFileLoader.VTable,
        GetFilePathLengthFromKey: *const fn (
            self: *const IDWriteLocalFontFileLoader,
            // TODO: what to do with BytesParamIndex 1?
            font_file_reference_key: ?*const anyopaque,
            font_file_reference_key_size: u32,
            file_path_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilePathFromKey: *const fn (
            self: *const IDWriteLocalFontFileLoader,
            // TODO: what to do with BytesParamIndex 1?
            font_file_reference_key: ?*const anyopaque,
            font_file_reference_key_size: u32,
            file_path: [*:0]u16,
            file_path_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastWriteTimeFromKey: *const fn (
            self: *const IDWriteLocalFontFileLoader,
            // TODO: what to do with BytesParamIndex 1?
            font_file_reference_key: ?*const anyopaque,
            font_file_reference_key_size: u32,
            last_write_time: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontFileLoader.MethodMixin(T);
            pub inline fn getFilePathLengthFromKey(self: *const T, font_file_reference_key_: ?*const anyopaque, font_file_reference_key_size_: u32, file_path_length_: ?*u32) HRESULT {
                return @as(*const IDWriteLocalFontFileLoader.VTable, @ptrCast(self.vtable)).GetFilePathLengthFromKey(@as(*const IDWriteLocalFontFileLoader, @ptrCast(self)), font_file_reference_key_, font_file_reference_key_size_, file_path_length_);
            }
            pub inline fn getFilePathFromKey(self: *const T, font_file_reference_key_: ?*const anyopaque, font_file_reference_key_size_: u32, file_path_: [*:0]u16, file_path_size_: u32) HRESULT {
                return @as(*const IDWriteLocalFontFileLoader.VTable, @ptrCast(self.vtable)).GetFilePathFromKey(@as(*const IDWriteLocalFontFileLoader, @ptrCast(self)), font_file_reference_key_, font_file_reference_key_size_, file_path_, file_path_size_);
            }
            pub inline fn getLastWriteTimeFromKey(self: *const T, font_file_reference_key_: ?*const anyopaque, font_file_reference_key_size_: u32, last_write_time_: ?*FILETIME) HRESULT {
                return @as(*const IDWriteLocalFontFileLoader.VTable, @ptrCast(self.vtable)).GetLastWriteTimeFromKey(@as(*const IDWriteLocalFontFileLoader, @ptrCast(self)), font_file_reference_key_, font_file_reference_key_size_, last_write_time_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFontFileStream_Value = Guid.initString("6d4865fe-0ab8-4d91-8f62-5dd6be34a3e0");
pub const IID_IDWriteFontFileStream = &IID_IDWriteFontFileStream_Value;
pub const IDWriteFontFileStream = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReadFileFragment: *const fn (
            self: *const IDWriteFontFileStream,
            fragment_start: ?*const ?*anyopaque,
            file_offset: u64,
            fragment_size: u64,
            fragment_context: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseFileFragment: *const fn (
            self: *const IDWriteFontFileStream,
            fragment_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetFileSize: *const fn (
            self: *const IDWriteFontFileStream,
            file_size: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastWriteTime: *const fn (
            self: *const IDWriteFontFileStream,
            last_write_time: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn readFileFragment(self: *const T, fragment_start_: ?*const ?*anyopaque, file_offset_: u64, fragment_size_: u64, fragment_context_: ?*?*anyopaque) HRESULT {
                return @as(*const IDWriteFontFileStream.VTable, @ptrCast(self.vtable)).ReadFileFragment(@as(*const IDWriteFontFileStream, @ptrCast(self)), fragment_start_, file_offset_, fragment_size_, fragment_context_);
            }
            pub inline fn releaseFileFragment(self: *const T, fragment_context_: ?*anyopaque) void {
                return @as(*const IDWriteFontFileStream.VTable, @ptrCast(self.vtable)).ReleaseFileFragment(@as(*const IDWriteFontFileStream, @ptrCast(self)), fragment_context_);
            }
            pub inline fn getFileSize(self: *const T, file_size_: ?*u64) HRESULT {
                return @as(*const IDWriteFontFileStream.VTable, @ptrCast(self.vtable)).GetFileSize(@as(*const IDWriteFontFileStream, @ptrCast(self)), file_size_);
            }
            pub inline fn getLastWriteTime(self: *const T, last_write_time_: ?*u64) HRESULT {
                return @as(*const IDWriteFontFileStream.VTable, @ptrCast(self.vtable)).GetLastWriteTime(@as(*const IDWriteFontFileStream, @ptrCast(self)), last_write_time_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFontFile_Value = Guid.initString("739d886a-cef5-47dc-8769-1a8b41bebbb0");
pub const IID_IDWriteFontFile = &IID_IDWriteFontFile_Value;
pub const IDWriteFontFile = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetReferenceKey: *const fn (
            self: *const IDWriteFontFile,
            font_file_reference_key: ?*const ?*anyopaque,
            font_file_reference_key_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLoader: *const fn (
            self: *const IDWriteFontFile,
            font_file_loader: ?*?*IDWriteFontFileLoader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Analyze: *const fn (
            self: *const IDWriteFontFile,
            is_supported_font_type: ?*BOOL,
            font_file_type: ?*DWRITE_FONT_FILE_TYPE,
            font_face_type: ?*DWRITE_FONT_FACE_TYPE,
            number_of_faces: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getReferenceKey(self: *const T, font_file_reference_key_: ?*const ?*anyopaque, font_file_reference_key_size_: ?*u32) HRESULT {
                return @as(*const IDWriteFontFile.VTable, @ptrCast(self.vtable)).GetReferenceKey(@as(*const IDWriteFontFile, @ptrCast(self)), font_file_reference_key_, font_file_reference_key_size_);
            }
            pub inline fn getLoader(self: *const T, font_file_loader_: ?*?*IDWriteFontFileLoader) HRESULT {
                return @as(*const IDWriteFontFile.VTable, @ptrCast(self.vtable)).GetLoader(@as(*const IDWriteFontFile, @ptrCast(self)), font_file_loader_);
            }
            pub inline fn analyze(self: *const T, is_supported_font_type_: ?*BOOL, font_file_type_: ?*DWRITE_FONT_FILE_TYPE, font_face_type_: ?*DWRITE_FONT_FACE_TYPE, number_of_faces_: ?*u32) HRESULT {
                return @as(*const IDWriteFontFile.VTable, @ptrCast(self.vtable)).Analyze(@as(*const IDWriteFontFile, @ptrCast(self)), is_supported_font_type_, font_file_type_, font_face_type_, number_of_faces_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DWRITE_PIXEL_GEOMETRY = enum(i32) {
    FLAT = 0,
    RGB = 1,
    BGR = 2,
};
pub const DWRITE_PIXEL_GEOMETRY_FLAT = DWRITE_PIXEL_GEOMETRY.FLAT;
pub const DWRITE_PIXEL_GEOMETRY_RGB = DWRITE_PIXEL_GEOMETRY.RGB;
pub const DWRITE_PIXEL_GEOMETRY_BGR = DWRITE_PIXEL_GEOMETRY.BGR;

pub const DWRITE_RENDERING_MODE = enum(i32) {
    DEFAULT = 0,
    ALIASED = 1,
    GDI_CLASSIC = 2,
    GDI_NATURAL = 3,
    NATURAL = 4,
    NATURAL_SYMMETRIC = 5,
    OUTLINE = 6,
    // CLEARTYPE_GDI_CLASSIC = 2, this enum value conflicts with GDI_CLASSIC
    // CLEARTYPE_GDI_NATURAL = 3, this enum value conflicts with GDI_NATURAL
    // CLEARTYPE_NATURAL = 4, this enum value conflicts with NATURAL
    // CLEARTYPE_NATURAL_SYMMETRIC = 5, this enum value conflicts with NATURAL_SYMMETRIC
};
pub const DWRITE_RENDERING_MODE_DEFAULT = DWRITE_RENDERING_MODE.DEFAULT;
pub const DWRITE_RENDERING_MODE_ALIASED = DWRITE_RENDERING_MODE.ALIASED;
pub const DWRITE_RENDERING_MODE_GDI_CLASSIC = DWRITE_RENDERING_MODE.GDI_CLASSIC;
pub const DWRITE_RENDERING_MODE_GDI_NATURAL = DWRITE_RENDERING_MODE.GDI_NATURAL;
pub const DWRITE_RENDERING_MODE_NATURAL = DWRITE_RENDERING_MODE.NATURAL;
pub const DWRITE_RENDERING_MODE_NATURAL_SYMMETRIC = DWRITE_RENDERING_MODE.NATURAL_SYMMETRIC;
pub const DWRITE_RENDERING_MODE_OUTLINE = DWRITE_RENDERING_MODE.OUTLINE;
pub const DWRITE_RENDERING_MODE_CLEARTYPE_GDI_CLASSIC = DWRITE_RENDERING_MODE.GDI_CLASSIC;
pub const DWRITE_RENDERING_MODE_CLEARTYPE_GDI_NATURAL = DWRITE_RENDERING_MODE.GDI_NATURAL;
pub const DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL = DWRITE_RENDERING_MODE.NATURAL;
pub const DWRITE_RENDERING_MODE_CLEARTYPE_NATURAL_SYMMETRIC = DWRITE_RENDERING_MODE.NATURAL_SYMMETRIC;

pub const DWRITE_MATRIX = extern struct {
    m11: f32,
    m12: f32,
    m21: f32,
    m22: f32,
    dx: f32,
    dy: f32,
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteRenderingParams_Value = Guid.initString("2f0da53a-2add-47cd-82ee-d9ec34688e75");
pub const IID_IDWriteRenderingParams = &IID_IDWriteRenderingParams_Value;
pub const IDWriteRenderingParams = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetGamma: *const fn (
            self: *const IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        GetEnhancedContrast: *const fn (
            self: *const IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        GetClearTypeLevel: *const fn (
            self: *const IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        GetPixelGeometry: *const fn (
            self: *const IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_PIXEL_GEOMETRY,
        GetRenderingMode: *const fn (
            self: *const IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_RENDERING_MODE,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getGamma(self: *const T) f32 {
                return @as(*const IDWriteRenderingParams.VTable, @ptrCast(self.vtable)).GetGamma(@as(*const IDWriteRenderingParams, @ptrCast(self)));
            }
            pub inline fn getEnhancedContrast(self: *const T) f32 {
                return @as(*const IDWriteRenderingParams.VTable, @ptrCast(self.vtable)).GetEnhancedContrast(@as(*const IDWriteRenderingParams, @ptrCast(self)));
            }
            pub inline fn getClearTypeLevel(self: *const T) f32 {
                return @as(*const IDWriteRenderingParams.VTable, @ptrCast(self.vtable)).GetClearTypeLevel(@as(*const IDWriteRenderingParams, @ptrCast(self)));
            }
            pub inline fn getPixelGeometry(self: *const T) DWRITE_PIXEL_GEOMETRY {
                return @as(*const IDWriteRenderingParams.VTable, @ptrCast(self.vtable)).GetPixelGeometry(@as(*const IDWriteRenderingParams, @ptrCast(self)));
            }
            pub inline fn getRenderingMode(self: *const T) DWRITE_RENDERING_MODE {
                return @as(*const IDWriteRenderingParams.VTable, @ptrCast(self.vtable)).GetRenderingMode(@as(*const IDWriteRenderingParams, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFontFace_Value = Guid.initString("5f49804d-7024-4d43-bfa9-d25984f53849");
pub const IID_IDWriteFontFace = &IID_IDWriteFontFace_Value;
pub const IDWriteFontFace = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetType: *const fn (
            self: *const IDWriteFontFace,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_FACE_TYPE,
        GetFiles: *const fn (
            self: *const IDWriteFontFace,
            number_of_files: ?*u32,
            font_files: ?[*]?*IDWriteFontFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIndex: *const fn (
            self: *const IDWriteFontFace,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetSimulations: *const fn (
            self: *const IDWriteFontFace,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_SIMULATIONS,
        IsSymbolFont: *const fn (
            self: *const IDWriteFontFace,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetMetrics: *const fn (
            self: *const IDWriteFontFace,
            font_face_metrics: ?*DWRITE_FONT_METRICS,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetGlyphCount: *const fn (
            self: *const IDWriteFontFace,
        ) callconv(@import("std").os.windows.WINAPI) u16,
        GetDesignGlyphMetrics: *const fn (
            self: *const IDWriteFontFace,
            glyph_indices: [*:0]const u16,
            glyph_count: u32,
            glyph_metrics: [*]DWRITE_GLYPH_METRICS,
            is_sideways: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphIndices: *const fn (
            self: *const IDWriteFontFace,
            code_points: [*]const u32,
            code_point_count: u32,
            glyph_indices: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TryGetFontTable: *const fn (
            self: *const IDWriteFontFace,
            open_type_table_tag: u32,
            table_data: ?*const ?*anyopaque,
            table_size: ?*u32,
            table_context: ?*?*anyopaque,
            exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseFontTable: *const fn (
            self: *const IDWriteFontFace,
            table_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetGlyphRunOutline: *const fn (
            self: *const IDWriteFontFace,
            em_size: f32,
            glyph_indices: [*:0]const u16,
            glyph_advances: ?[*]const f32,
            glyph_offsets: ?[*]const DWRITE_GLYPH_OFFSET,
            glyph_count: u32,
            is_sideways: BOOL,
            is_right_to_left: BOOL,
            geometry_sink: ?*ID2D1SimplifiedGeometrySink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecommendedRenderingMode: *const fn (
            self: *const IDWriteFontFace,
            em_size: f32,
            pixels_per_dip: f32,
            measuring_mode: DWRITE_MEASURING_MODE,
            rendering_params: ?*IDWriteRenderingParams,
            rendering_mode: ?*DWRITE_RENDERING_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGdiCompatibleMetrics: *const fn (
            self: *const IDWriteFontFace,
            em_size: f32,
            pixels_per_dip: f32,
            transform: ?*const DWRITE_MATRIX,
            font_face_metrics: ?*DWRITE_FONT_METRICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGdiCompatibleGlyphMetrics: *const fn (
            self: *const IDWriteFontFace,
            em_size: f32,
            pixels_per_dip: f32,
            transform: ?*const DWRITE_MATRIX,
            use_gdi_natural: BOOL,
            glyph_indices: [*:0]const u16,
            glyph_count: u32,
            glyph_metrics: [*]DWRITE_GLYPH_METRICS,
            is_sideways: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getType(self: *const T) DWRITE_FONT_FACE_TYPE {
                return @as(*const IDWriteFontFace.VTable, @ptrCast(self.vtable)).GetType(@as(*const IDWriteFontFace, @ptrCast(self)));
            }
            pub inline fn getFiles(self: *const T, number_of_files_: ?*u32, font_files_: ?[*]?*IDWriteFontFile) HRESULT {
                return @as(*const IDWriteFontFace.VTable, @ptrCast(self.vtable)).GetFiles(@as(*const IDWriteFontFace, @ptrCast(self)), number_of_files_, font_files_);
            }
            pub inline fn getIndex(self: *const T) u32 {
                return @as(*const IDWriteFontFace.VTable, @ptrCast(self.vtable)).GetIndex(@as(*const IDWriteFontFace, @ptrCast(self)));
            }
            pub inline fn getSimulations(self: *const T) DWRITE_FONT_SIMULATIONS {
                return @as(*const IDWriteFontFace.VTable, @ptrCast(self.vtable)).GetSimulations(@as(*const IDWriteFontFace, @ptrCast(self)));
            }
            pub inline fn isSymbolFont(self: *const T) BOOL {
                return @as(*const IDWriteFontFace.VTable, @ptrCast(self.vtable)).IsSymbolFont(@as(*const IDWriteFontFace, @ptrCast(self)));
            }
            pub inline fn getMetrics(self: *const T, font_face_metrics_: ?*DWRITE_FONT_METRICS) void {
                return @as(*const IDWriteFontFace.VTable, @ptrCast(self.vtable)).GetMetrics(@as(*const IDWriteFontFace, @ptrCast(self)), font_face_metrics_);
            }
            pub inline fn getGlyphCount(self: *const T) u16 {
                return @as(*const IDWriteFontFace.VTable, @ptrCast(self.vtable)).GetGlyphCount(@as(*const IDWriteFontFace, @ptrCast(self)));
            }
            pub inline fn getDesignGlyphMetrics(self: *const T, glyph_indices_: [*:0]const u16, glyph_count_: u32, glyph_metrics_: [*]DWRITE_GLYPH_METRICS, is_sideways_: BOOL) HRESULT {
                return @as(*const IDWriteFontFace.VTable, @ptrCast(self.vtable)).GetDesignGlyphMetrics(@as(*const IDWriteFontFace, @ptrCast(self)), glyph_indices_, glyph_count_, glyph_metrics_, is_sideways_);
            }
            pub inline fn getGlyphIndices(self: *const T, code_points_: [*]const u32, code_point_count_: u32, glyph_indices_: [*:0]u16) HRESULT {
                return @as(*const IDWriteFontFace.VTable, @ptrCast(self.vtable)).GetGlyphIndices(@as(*const IDWriteFontFace, @ptrCast(self)), code_points_, code_point_count_, glyph_indices_);
            }
            pub inline fn tryGetFontTable(self: *const T, open_type_table_tag_: u32, table_data_: ?*const ?*anyopaque, table_size_: ?*u32, table_context_: ?*?*anyopaque, exists_: ?*BOOL) HRESULT {
                return @as(*const IDWriteFontFace.VTable, @ptrCast(self.vtable)).TryGetFontTable(@as(*const IDWriteFontFace, @ptrCast(self)), open_type_table_tag_, table_data_, table_size_, table_context_, exists_);
            }
            pub inline fn releaseFontTable(self: *const T, table_context_: ?*anyopaque) void {
                return @as(*const IDWriteFontFace.VTable, @ptrCast(self.vtable)).ReleaseFontTable(@as(*const IDWriteFontFace, @ptrCast(self)), table_context_);
            }
            pub inline fn getGlyphRunOutline(self: *const T, em_size_: f32, glyph_indices_: [*:0]const u16, glyph_advances_: ?[*]const f32, glyph_offsets_: ?[*]const DWRITE_GLYPH_OFFSET, glyph_count_: u32, is_sideways_: BOOL, is_right_to_left_: BOOL, geometry_sink_: ?*ID2D1SimplifiedGeometrySink) HRESULT {
                return @as(*const IDWriteFontFace.VTable, @ptrCast(self.vtable)).GetGlyphRunOutline(@as(*const IDWriteFontFace, @ptrCast(self)), em_size_, glyph_indices_, glyph_advances_, glyph_offsets_, glyph_count_, is_sideways_, is_right_to_left_, geometry_sink_);
            }
            pub inline fn getRecommendedRenderingMode(self: *const T, em_size_: f32, pixels_per_dip_: f32, measuring_mode_: DWRITE_MEASURING_MODE, rendering_params_: ?*IDWriteRenderingParams, rendering_mode_: ?*DWRITE_RENDERING_MODE) HRESULT {
                return @as(*const IDWriteFontFace.VTable, @ptrCast(self.vtable)).GetRecommendedRenderingMode(@as(*const IDWriteFontFace, @ptrCast(self)), em_size_, pixels_per_dip_, measuring_mode_, rendering_params_, rendering_mode_);
            }
            pub inline fn getGdiCompatibleMetrics(self: *const T, em_size_: f32, pixels_per_dip_: f32, transform_: ?*const DWRITE_MATRIX, font_face_metrics_: ?*DWRITE_FONT_METRICS) HRESULT {
                return @as(*const IDWriteFontFace.VTable, @ptrCast(self.vtable)).GetGdiCompatibleMetrics(@as(*const IDWriteFontFace, @ptrCast(self)), em_size_, pixels_per_dip_, transform_, font_face_metrics_);
            }
            pub inline fn getGdiCompatibleGlyphMetrics(self: *const T, em_size_: f32, pixels_per_dip_: f32, transform_: ?*const DWRITE_MATRIX, use_gdi_natural_: BOOL, glyph_indices_: [*:0]const u16, glyph_count_: u32, glyph_metrics_: [*]DWRITE_GLYPH_METRICS, is_sideways_: BOOL) HRESULT {
                return @as(*const IDWriteFontFace.VTable, @ptrCast(self.vtable)).GetGdiCompatibleGlyphMetrics(@as(*const IDWriteFontFace, @ptrCast(self)), em_size_, pixels_per_dip_, transform_, use_gdi_natural_, glyph_indices_, glyph_count_, glyph_metrics_, is_sideways_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFontCollectionLoader_Value = Guid.initString("cca920e4-52f0-492b-bfa8-29c72ee0a468");
pub const IID_IDWriteFontCollectionLoader = &IID_IDWriteFontCollectionLoader_Value;
pub const IDWriteFontCollectionLoader = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateEnumeratorFromKey: *const fn (
            self: *const IDWriteFontCollectionLoader,
            factory: ?*IDWriteFactory,
            // TODO: what to do with BytesParamIndex 2?
            collection_key: ?*const anyopaque,
            collection_key_size: u32,
            font_file_enumerator: ?*?*IDWriteFontFileEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createEnumeratorFromKey(self: *const T, factory_: ?*IDWriteFactory, collection_key_: ?*const anyopaque, collection_key_size_: u32, font_file_enumerator_: ?*?*IDWriteFontFileEnumerator) HRESULT {
                return @as(*const IDWriteFontCollectionLoader.VTable, @ptrCast(self.vtable)).CreateEnumeratorFromKey(@as(*const IDWriteFontCollectionLoader, @ptrCast(self)), factory_, collection_key_, collection_key_size_, font_file_enumerator_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFontFileEnumerator_Value = Guid.initString("72755049-5ff7-435d-8348-4be97cfa6c7c");
pub const IID_IDWriteFontFileEnumerator = &IID_IDWriteFontFileEnumerator_Value;
pub const IDWriteFontFileEnumerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MoveNext: *const fn (
            self: *const IDWriteFontFileEnumerator,
            has_current_file: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentFontFile: *const fn (
            self: *const IDWriteFontFileEnumerator,
            font_file: ?*?*IDWriteFontFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn moveNext(self: *const T, has_current_file_: ?*BOOL) HRESULT {
                return @as(*const IDWriteFontFileEnumerator.VTable, @ptrCast(self.vtable)).MoveNext(@as(*const IDWriteFontFileEnumerator, @ptrCast(self)), has_current_file_);
            }
            pub inline fn getCurrentFontFile(self: *const T, font_file_: ?*?*IDWriteFontFile) HRESULT {
                return @as(*const IDWriteFontFileEnumerator.VTable, @ptrCast(self.vtable)).GetCurrentFontFile(@as(*const IDWriteFontFileEnumerator, @ptrCast(self)), font_file_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteLocalizedStrings_Value = Guid.initString("08256209-099a-4b34-b86d-c22b110e7771");
pub const IID_IDWriteLocalizedStrings = &IID_IDWriteLocalizedStrings_Value;
pub const IDWriteLocalizedStrings = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IDWriteLocalizedStrings,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        FindLocaleName: *const fn (
            self: *const IDWriteLocalizedStrings,
            locale_name: ?[*:0]const u16,
            index: ?*u32,
            exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocaleNameLength: *const fn (
            self: *const IDWriteLocalizedStrings,
            index: u32,
            length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocaleName: *const fn (
            self: *const IDWriteLocalizedStrings,
            index: u32,
            locale_name: [*:0]u16,
            size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringLength: *const fn (
            self: *const IDWriteLocalizedStrings,
            index: u32,
            length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetString: *const fn (
            self: *const IDWriteLocalizedStrings,
            index: u32,
            string_buffer: [*:0]u16,
            size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T) u32 {
                return @as(*const IDWriteLocalizedStrings.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IDWriteLocalizedStrings, @ptrCast(self)));
            }
            pub inline fn findLocaleName(self: *const T, locale_name_: ?[*:0]const u16, index_: ?*u32, exists_: ?*BOOL) HRESULT {
                return @as(*const IDWriteLocalizedStrings.VTable, @ptrCast(self.vtable)).FindLocaleName(@as(*const IDWriteLocalizedStrings, @ptrCast(self)), locale_name_, index_, exists_);
            }
            pub inline fn getLocaleNameLength(self: *const T, index_: u32, length_: ?*u32) HRESULT {
                return @as(*const IDWriteLocalizedStrings.VTable, @ptrCast(self.vtable)).GetLocaleNameLength(@as(*const IDWriteLocalizedStrings, @ptrCast(self)), index_, length_);
            }
            pub inline fn getLocaleName(self: *const T, index_: u32, locale_name_: [*:0]u16, size_: u32) HRESULT {
                return @as(*const IDWriteLocalizedStrings.VTable, @ptrCast(self.vtable)).GetLocaleName(@as(*const IDWriteLocalizedStrings, @ptrCast(self)), index_, locale_name_, size_);
            }
            pub inline fn getStringLength(self: *const T, index_: u32, length_: ?*u32) HRESULT {
                return @as(*const IDWriteLocalizedStrings.VTable, @ptrCast(self.vtable)).GetStringLength(@as(*const IDWriteLocalizedStrings, @ptrCast(self)), index_, length_);
            }
            pub inline fn getString(self: *const T, index_: u32, string_buffer_: [*:0]u16, size_: u32) HRESULT {
                return @as(*const IDWriteLocalizedStrings.VTable, @ptrCast(self.vtable)).GetString(@as(*const IDWriteLocalizedStrings, @ptrCast(self)), index_, string_buffer_, size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFontCollection_Value = Guid.initString("a84cee02-3eea-4eee-a827-87c1a02a0fcc");
pub const IID_IDWriteFontCollection = &IID_IDWriteFontCollection_Value;
pub const IDWriteFontCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFontFamilyCount: *const fn (
            self: *const IDWriteFontCollection,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFontFamily: *const fn (
            self: *const IDWriteFontCollection,
            index: u32,
            font_family: ?*?*IDWriteFontFamily,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFamilyName: *const fn (
            self: *const IDWriteFontCollection,
            family_name: ?[*:0]const u16,
            index: ?*u32,
            exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFromFontFace: *const fn (
            self: *const IDWriteFontCollection,
            font_face: ?*IDWriteFontFace,
            font: ?*?*IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFontFamilyCount(self: *const T) u32 {
                return @as(*const IDWriteFontCollection.VTable, @ptrCast(self.vtable)).GetFontFamilyCount(@as(*const IDWriteFontCollection, @ptrCast(self)));
            }
            pub inline fn getFontFamily(self: *const T, index_: u32, font_family_: ?*?*IDWriteFontFamily) HRESULT {
                return @as(*const IDWriteFontCollection.VTable, @ptrCast(self.vtable)).GetFontFamily(@as(*const IDWriteFontCollection, @ptrCast(self)), index_, font_family_);
            }
            pub inline fn findFamilyName(self: *const T, family_name_: ?[*:0]const u16, index_: ?*u32, exists_: ?*BOOL) HRESULT {
                return @as(*const IDWriteFontCollection.VTable, @ptrCast(self.vtable)).FindFamilyName(@as(*const IDWriteFontCollection, @ptrCast(self)), family_name_, index_, exists_);
            }
            pub inline fn getFontFromFontFace(self: *const T, font_face_: ?*IDWriteFontFace, font_: ?*?*IDWriteFont) HRESULT {
                return @as(*const IDWriteFontCollection.VTable, @ptrCast(self.vtable)).GetFontFromFontFace(@as(*const IDWriteFontCollection, @ptrCast(self)), font_face_, font_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFontList_Value = Guid.initString("1a0d8438-1d97-4ec1-aef9-a2fb86ed6acb");
pub const IID_IDWriteFontList = &IID_IDWriteFontList_Value;
pub const IDWriteFontList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFontCollection: *const fn (
            self: *const IDWriteFontList,
            font_collection: ?*?*IDWriteFontCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontCount: *const fn (
            self: *const IDWriteFontList,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFont: *const fn (
            self: *const IDWriteFontList,
            index: u32,
            font: ?*?*IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFontCollection(self: *const T, font_collection_: ?*?*IDWriteFontCollection) HRESULT {
                return @as(*const IDWriteFontList.VTable, @ptrCast(self.vtable)).GetFontCollection(@as(*const IDWriteFontList, @ptrCast(self)), font_collection_);
            }
            pub inline fn getFontCount(self: *const T) u32 {
                return @as(*const IDWriteFontList.VTable, @ptrCast(self.vtable)).GetFontCount(@as(*const IDWriteFontList, @ptrCast(self)));
            }
            pub inline fn getFont(self: *const T, index_: u32, font_: ?*?*IDWriteFont) HRESULT {
                return @as(*const IDWriteFontList.VTable, @ptrCast(self.vtable)).GetFont(@as(*const IDWriteFontList, @ptrCast(self)), index_, font_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFontFamily_Value = Guid.initString("da20d8ef-812a-4c43-9802-62ec4abd7add");
pub const IID_IDWriteFontFamily = &IID_IDWriteFontFamily_Value;
pub const IDWriteFontFamily = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontList.VTable,
        GetFamilyNames: *const fn (
            self: *const IDWriteFontFamily,
            names: ?*?*IDWriteLocalizedStrings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFirstMatchingFont: *const fn (
            self: *const IDWriteFontFamily,
            weight: DWRITE_FONT_WEIGHT,
            stretch: DWRITE_FONT_STRETCH,
            style: DWRITE_FONT_STYLE,
            matching_font: ?*?*IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMatchingFonts: *const fn (
            self: *const IDWriteFontFamily,
            weight: DWRITE_FONT_WEIGHT,
            stretch: DWRITE_FONT_STRETCH,
            style: DWRITE_FONT_STYLE,
            matching_fonts: ?*?*IDWriteFontList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontList.MethodMixin(T);
            pub inline fn getFamilyNames(self: *const T, names_: ?*?*IDWriteLocalizedStrings) HRESULT {
                return @as(*const IDWriteFontFamily.VTable, @ptrCast(self.vtable)).GetFamilyNames(@as(*const IDWriteFontFamily, @ptrCast(self)), names_);
            }
            pub inline fn getFirstMatchingFont(self: *const T, weight_: DWRITE_FONT_WEIGHT, stretch_: DWRITE_FONT_STRETCH, style_: DWRITE_FONT_STYLE, matching_font_: ?*?*IDWriteFont) HRESULT {
                return @as(*const IDWriteFontFamily.VTable, @ptrCast(self.vtable)).GetFirstMatchingFont(@as(*const IDWriteFontFamily, @ptrCast(self)), weight_, stretch_, style_, matching_font_);
            }
            pub inline fn getMatchingFonts(self: *const T, weight_: DWRITE_FONT_WEIGHT, stretch_: DWRITE_FONT_STRETCH, style_: DWRITE_FONT_STYLE, matching_fonts_: ?*?*IDWriteFontList) HRESULT {
                return @as(*const IDWriteFontFamily.VTable, @ptrCast(self.vtable)).GetMatchingFonts(@as(*const IDWriteFontFamily, @ptrCast(self)), weight_, stretch_, style_, matching_fonts_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFont_Value = Guid.initString("acd16696-8c14-4f5d-877e-fe3fc1d32737");
pub const IID_IDWriteFont = &IID_IDWriteFont_Value;
pub const IDWriteFont = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFontFamily: *const fn (
            self: *const IDWriteFont,
            font_family: ?*?*IDWriteFontFamily,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWeight: *const fn (
            self: *const IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_WEIGHT,
        GetStretch: *const fn (
            self: *const IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_STRETCH,
        GetStyle: *const fn (
            self: *const IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_STYLE,
        IsSymbolFont: *const fn (
            self: *const IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetFaceNames: *const fn (
            self: *const IDWriteFont,
            names: ?*?*IDWriteLocalizedStrings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInformationalStrings: *const fn (
            self: *const IDWriteFont,
            informational_string_i_d: DWRITE_INFORMATIONAL_STRING_ID,
            informational_strings: ?*?*IDWriteLocalizedStrings,
            exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSimulations: *const fn (
            self: *const IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_SIMULATIONS,
        GetMetrics: *const fn (
            self: *const IDWriteFont,
            font_metrics: ?*DWRITE_FONT_METRICS,
        ) callconv(@import("std").os.windows.WINAPI) void,
        HasCharacter: *const fn (
            self: *const IDWriteFont,
            unicode_value: u32,
            exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFace: *const fn (
            self: *const IDWriteFont,
            font_face: ?*?*IDWriteFontFace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFontFamily(self: *const T, font_family_: ?*?*IDWriteFontFamily) HRESULT {
                return @as(*const IDWriteFont.VTable, @ptrCast(self.vtable)).GetFontFamily(@as(*const IDWriteFont, @ptrCast(self)), font_family_);
            }
            pub inline fn getWeight(self: *const T) DWRITE_FONT_WEIGHT {
                return @as(*const IDWriteFont.VTable, @ptrCast(self.vtable)).GetWeight(@as(*const IDWriteFont, @ptrCast(self)));
            }
            pub inline fn getStretch(self: *const T) DWRITE_FONT_STRETCH {
                return @as(*const IDWriteFont.VTable, @ptrCast(self.vtable)).GetStretch(@as(*const IDWriteFont, @ptrCast(self)));
            }
            pub inline fn getStyle(self: *const T) DWRITE_FONT_STYLE {
                return @as(*const IDWriteFont.VTable, @ptrCast(self.vtable)).GetStyle(@as(*const IDWriteFont, @ptrCast(self)));
            }
            pub inline fn isSymbolFont(self: *const T) BOOL {
                return @as(*const IDWriteFont.VTable, @ptrCast(self.vtable)).IsSymbolFont(@as(*const IDWriteFont, @ptrCast(self)));
            }
            pub inline fn getFaceNames(self: *const T, names_: ?*?*IDWriteLocalizedStrings) HRESULT {
                return @as(*const IDWriteFont.VTable, @ptrCast(self.vtable)).GetFaceNames(@as(*const IDWriteFont, @ptrCast(self)), names_);
            }
            pub inline fn getInformationalStrings(self: *const T, informational_string_i_d_: DWRITE_INFORMATIONAL_STRING_ID, informational_strings_: ?*?*IDWriteLocalizedStrings, exists_: ?*BOOL) HRESULT {
                return @as(*const IDWriteFont.VTable, @ptrCast(self.vtable)).GetInformationalStrings(@as(*const IDWriteFont, @ptrCast(self)), informational_string_i_d_, informational_strings_, exists_);
            }
            pub inline fn getSimulations(self: *const T) DWRITE_FONT_SIMULATIONS {
                return @as(*const IDWriteFont.VTable, @ptrCast(self.vtable)).GetSimulations(@as(*const IDWriteFont, @ptrCast(self)));
            }
            pub inline fn getMetrics(self: *const T, font_metrics_: ?*DWRITE_FONT_METRICS) void {
                return @as(*const IDWriteFont.VTable, @ptrCast(self.vtable)).GetMetrics(@as(*const IDWriteFont, @ptrCast(self)), font_metrics_);
            }
            pub inline fn hasCharacter(self: *const T, unicode_value_: u32, exists_: ?*BOOL) HRESULT {
                return @as(*const IDWriteFont.VTable, @ptrCast(self.vtable)).HasCharacter(@as(*const IDWriteFont, @ptrCast(self)), unicode_value_, exists_);
            }
            pub inline fn createFontFace(self: *const T, font_face_: ?*?*IDWriteFontFace) HRESULT {
                return @as(*const IDWriteFont.VTable, @ptrCast(self.vtable)).CreateFontFace(@as(*const IDWriteFont, @ptrCast(self)), font_face_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DWRITE_READING_DIRECTION = enum(i32) {
    LEFT_TO_RIGHT = 0,
    RIGHT_TO_LEFT = 1,
    TOP_TO_BOTTOM = 2,
    BOTTOM_TO_TOP = 3,
};
pub const DWRITE_READING_DIRECTION_LEFT_TO_RIGHT = DWRITE_READING_DIRECTION.LEFT_TO_RIGHT;
pub const DWRITE_READING_DIRECTION_RIGHT_TO_LEFT = DWRITE_READING_DIRECTION.RIGHT_TO_LEFT;
pub const DWRITE_READING_DIRECTION_TOP_TO_BOTTOM = DWRITE_READING_DIRECTION.TOP_TO_BOTTOM;
pub const DWRITE_READING_DIRECTION_BOTTOM_TO_TOP = DWRITE_READING_DIRECTION.BOTTOM_TO_TOP;

pub const DWRITE_FLOW_DIRECTION = enum(i32) {
    TOP_TO_BOTTOM = 0,
    BOTTOM_TO_TOP = 1,
    LEFT_TO_RIGHT = 2,
    RIGHT_TO_LEFT = 3,
};
pub const DWRITE_FLOW_DIRECTION_TOP_TO_BOTTOM = DWRITE_FLOW_DIRECTION.TOP_TO_BOTTOM;
pub const DWRITE_FLOW_DIRECTION_BOTTOM_TO_TOP = DWRITE_FLOW_DIRECTION.BOTTOM_TO_TOP;
pub const DWRITE_FLOW_DIRECTION_LEFT_TO_RIGHT = DWRITE_FLOW_DIRECTION.LEFT_TO_RIGHT;
pub const DWRITE_FLOW_DIRECTION_RIGHT_TO_LEFT = DWRITE_FLOW_DIRECTION.RIGHT_TO_LEFT;

pub const DWRITE_TEXT_ALIGNMENT = enum(i32) {
    LEADING = 0,
    TRAILING = 1,
    CENTER = 2,
    JUSTIFIED = 3,
};
pub const DWRITE_TEXT_ALIGNMENT_LEADING = DWRITE_TEXT_ALIGNMENT.LEADING;
pub const DWRITE_TEXT_ALIGNMENT_TRAILING = DWRITE_TEXT_ALIGNMENT.TRAILING;
pub const DWRITE_TEXT_ALIGNMENT_CENTER = DWRITE_TEXT_ALIGNMENT.CENTER;
pub const DWRITE_TEXT_ALIGNMENT_JUSTIFIED = DWRITE_TEXT_ALIGNMENT.JUSTIFIED;

pub const DWRITE_PARAGRAPH_ALIGNMENT = enum(i32) {
    NEAR = 0,
    FAR = 1,
    CENTER = 2,
};
pub const DWRITE_PARAGRAPH_ALIGNMENT_NEAR = DWRITE_PARAGRAPH_ALIGNMENT.NEAR;
pub const DWRITE_PARAGRAPH_ALIGNMENT_FAR = DWRITE_PARAGRAPH_ALIGNMENT.FAR;
pub const DWRITE_PARAGRAPH_ALIGNMENT_CENTER = DWRITE_PARAGRAPH_ALIGNMENT.CENTER;

pub const DWRITE_WORD_WRAPPING = enum(i32) {
    WRAP = 0,
    NO_WRAP = 1,
    EMERGENCY_BREAK = 2,
    WHOLE_WORD = 3,
    CHARACTER = 4,
};
pub const DWRITE_WORD_WRAPPING_WRAP = DWRITE_WORD_WRAPPING.WRAP;
pub const DWRITE_WORD_WRAPPING_NO_WRAP = DWRITE_WORD_WRAPPING.NO_WRAP;
pub const DWRITE_WORD_WRAPPING_EMERGENCY_BREAK = DWRITE_WORD_WRAPPING.EMERGENCY_BREAK;
pub const DWRITE_WORD_WRAPPING_WHOLE_WORD = DWRITE_WORD_WRAPPING.WHOLE_WORD;
pub const DWRITE_WORD_WRAPPING_CHARACTER = DWRITE_WORD_WRAPPING.CHARACTER;

pub const DWRITE_LINE_SPACING_METHOD = enum(i32) {
    DEFAULT = 0,
    UNIFORM = 1,
    PROPORTIONAL = 2,
};
pub const DWRITE_LINE_SPACING_METHOD_DEFAULT = DWRITE_LINE_SPACING_METHOD.DEFAULT;
pub const DWRITE_LINE_SPACING_METHOD_UNIFORM = DWRITE_LINE_SPACING_METHOD.UNIFORM;
pub const DWRITE_LINE_SPACING_METHOD_PROPORTIONAL = DWRITE_LINE_SPACING_METHOD.PROPORTIONAL;

pub const DWRITE_TRIMMING_GRANULARITY = enum(i32) {
    NONE = 0,
    CHARACTER = 1,
    WORD = 2,
};
pub const DWRITE_TRIMMING_GRANULARITY_NONE = DWRITE_TRIMMING_GRANULARITY.NONE;
pub const DWRITE_TRIMMING_GRANULARITY_CHARACTER = DWRITE_TRIMMING_GRANULARITY.CHARACTER;
pub const DWRITE_TRIMMING_GRANULARITY_WORD = DWRITE_TRIMMING_GRANULARITY.WORD;

pub const DWRITE_FONT_FEATURE_TAG = enum(u32) {
    ALTERNATIVE_FRACTIONS = 1668441697,
    PETITE_CAPITALS_FROM_CAPITALS = 1668297315,
    SMALL_CAPITALS_FROM_CAPITALS = 1668493923,
    CONTEXTUAL_ALTERNATES = 1953259875,
    CASE_SENSITIVE_FORMS = 1702060387,
    GLYPH_COMPOSITION_DECOMPOSITION = 1886217059,
    CONTEXTUAL_LIGATURES = 1734962275,
    CAPITAL_SPACING = 1886613603,
    CONTEXTUAL_SWASH = 1752658787,
    CURSIVE_POSITIONING = 1936880995,
    DEFAULT = 1953261156,
    DISCRETIONARY_LIGATURES = 1734962276,
    EXPERT_FORMS = 1953527909,
    FRACTIONS = 1667330662,
    FULL_WIDTH = 1684633446,
    HALF_FORMS = 1718378856,
    HALANT_FORMS = 1852596584,
    ALTERNATE_HALF_WIDTH = 1953259880,
    HISTORICAL_FORMS = 1953720680,
    HORIZONTAL_KANA_ALTERNATES = 1634626408,
    HISTORICAL_LIGATURES = 1734962280,
    HALF_WIDTH = 1684633448,
    HOJO_KANJI_FORMS = 1869246312,
    JIS04_FORMS = 875589738,
    JIS78_FORMS = 943157354,
    JIS83_FORMS = 859336810,
    JIS90_FORMS = 809070698,
    KERNING = 1852990827,
    STANDARD_LIGATURES = 1634167148,
    LINING_FIGURES = 1836412524,
    LOCALIZED_FORMS = 1818455916,
    MARK_POSITIONING = 1802658157,
    MATHEMATICAL_GREEK = 1802659693,
    MARK_TO_MARK_POSITIONING = 1802333037,
    ALTERNATE_ANNOTATION_FORMS = 1953259886,
    NLC_KANJI_FORMS = 1801677934,
    OLD_STYLE_FIGURES = 1836412527,
    ORDINALS = 1852076655,
    PROPORTIONAL_ALTERNATE_WIDTH = 1953259888,
    PETITE_CAPITALS = 1885430640,
    PROPORTIONAL_FIGURES = 1836412528,
    PROPORTIONAL_WIDTHS = 1684633456,
    QUARTER_WIDTHS = 1684633457,
    REQUIRED_LIGATURES = 1734962290,
    RUBY_NOTATION_FORMS = 2036495730,
    STYLISTIC_ALTERNATES = 1953259891,
    SCIENTIFIC_INFERIORS = 1718511987,
    SMALL_CAPITALS = 1885564275,
    SIMPLIFIED_FORMS = 1819307379,
    STYLISTIC_SET_1 = 825258867,
    STYLISTIC_SET_2 = 842036083,
    STYLISTIC_SET_3 = 858813299,
    STYLISTIC_SET_4 = 875590515,
    STYLISTIC_SET_5 = 892367731,
    STYLISTIC_SET_6 = 909144947,
    STYLISTIC_SET_7 = 925922163,
    STYLISTIC_SET_8 = 942699379,
    STYLISTIC_SET_9 = 959476595,
    STYLISTIC_SET_10 = 808547187,
    STYLISTIC_SET_11 = 825324403,
    STYLISTIC_SET_12 = 842101619,
    STYLISTIC_SET_13 = 858878835,
    STYLISTIC_SET_14 = 875656051,
    STYLISTIC_SET_15 = 892433267,
    STYLISTIC_SET_16 = 909210483,
    STYLISTIC_SET_17 = 925987699,
    STYLISTIC_SET_18 = 942764915,
    STYLISTIC_SET_19 = 959542131,
    STYLISTIC_SET_20 = 808612723,
    SUBSCRIPT = 1935832435,
    SUPERSCRIPT = 1936749939,
    SWASH = 1752397683,
    TITLING = 1819568500,
    TRADITIONAL_NAME_FORMS = 1835101812,
    TABULAR_FIGURES = 1836412532,
    TRADITIONAL_FORMS = 1684107892,
    THIRD_WIDTHS = 1684633460,
    UNICASE = 1667853941,
    VERTICAL_WRITING = 1953654134,
    VERTICAL_ALTERNATES_AND_ROTATION = 846492278,
    SLASHED_ZERO = 1869768058,
};
pub const DWRITE_FONT_FEATURE_TAG_ALTERNATIVE_FRACTIONS = DWRITE_FONT_FEATURE_TAG.ALTERNATIVE_FRACTIONS;
pub const DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS_FROM_CAPITALS = DWRITE_FONT_FEATURE_TAG.PETITE_CAPITALS_FROM_CAPITALS;
pub const DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS_FROM_CAPITALS = DWRITE_FONT_FEATURE_TAG.SMALL_CAPITALS_FROM_CAPITALS;
pub const DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_ALTERNATES = DWRITE_FONT_FEATURE_TAG.CONTEXTUAL_ALTERNATES;
pub const DWRITE_FONT_FEATURE_TAG_CASE_SENSITIVE_FORMS = DWRITE_FONT_FEATURE_TAG.CASE_SENSITIVE_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_GLYPH_COMPOSITION_DECOMPOSITION = DWRITE_FONT_FEATURE_TAG.GLYPH_COMPOSITION_DECOMPOSITION;
pub const DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_LIGATURES = DWRITE_FONT_FEATURE_TAG.CONTEXTUAL_LIGATURES;
pub const DWRITE_FONT_FEATURE_TAG_CAPITAL_SPACING = DWRITE_FONT_FEATURE_TAG.CAPITAL_SPACING;
pub const DWRITE_FONT_FEATURE_TAG_CONTEXTUAL_SWASH = DWRITE_FONT_FEATURE_TAG.CONTEXTUAL_SWASH;
pub const DWRITE_FONT_FEATURE_TAG_CURSIVE_POSITIONING = DWRITE_FONT_FEATURE_TAG.CURSIVE_POSITIONING;
pub const DWRITE_FONT_FEATURE_TAG_DEFAULT = DWRITE_FONT_FEATURE_TAG.DEFAULT;
pub const DWRITE_FONT_FEATURE_TAG_DISCRETIONARY_LIGATURES = DWRITE_FONT_FEATURE_TAG.DISCRETIONARY_LIGATURES;
pub const DWRITE_FONT_FEATURE_TAG_EXPERT_FORMS = DWRITE_FONT_FEATURE_TAG.EXPERT_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_FRACTIONS = DWRITE_FONT_FEATURE_TAG.FRACTIONS;
pub const DWRITE_FONT_FEATURE_TAG_FULL_WIDTH = DWRITE_FONT_FEATURE_TAG.FULL_WIDTH;
pub const DWRITE_FONT_FEATURE_TAG_HALF_FORMS = DWRITE_FONT_FEATURE_TAG.HALF_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_HALANT_FORMS = DWRITE_FONT_FEATURE_TAG.HALANT_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_ALTERNATE_HALF_WIDTH = DWRITE_FONT_FEATURE_TAG.ALTERNATE_HALF_WIDTH;
pub const DWRITE_FONT_FEATURE_TAG_HISTORICAL_FORMS = DWRITE_FONT_FEATURE_TAG.HISTORICAL_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_HORIZONTAL_KANA_ALTERNATES = DWRITE_FONT_FEATURE_TAG.HORIZONTAL_KANA_ALTERNATES;
pub const DWRITE_FONT_FEATURE_TAG_HISTORICAL_LIGATURES = DWRITE_FONT_FEATURE_TAG.HISTORICAL_LIGATURES;
pub const DWRITE_FONT_FEATURE_TAG_HALF_WIDTH = DWRITE_FONT_FEATURE_TAG.HALF_WIDTH;
pub const DWRITE_FONT_FEATURE_TAG_HOJO_KANJI_FORMS = DWRITE_FONT_FEATURE_TAG.HOJO_KANJI_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_JIS04_FORMS = DWRITE_FONT_FEATURE_TAG.JIS04_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_JIS78_FORMS = DWRITE_FONT_FEATURE_TAG.JIS78_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_JIS83_FORMS = DWRITE_FONT_FEATURE_TAG.JIS83_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_JIS90_FORMS = DWRITE_FONT_FEATURE_TAG.JIS90_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_KERNING = DWRITE_FONT_FEATURE_TAG.KERNING;
pub const DWRITE_FONT_FEATURE_TAG_STANDARD_LIGATURES = DWRITE_FONT_FEATURE_TAG.STANDARD_LIGATURES;
pub const DWRITE_FONT_FEATURE_TAG_LINING_FIGURES = DWRITE_FONT_FEATURE_TAG.LINING_FIGURES;
pub const DWRITE_FONT_FEATURE_TAG_LOCALIZED_FORMS = DWRITE_FONT_FEATURE_TAG.LOCALIZED_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_MARK_POSITIONING = DWRITE_FONT_FEATURE_TAG.MARK_POSITIONING;
pub const DWRITE_FONT_FEATURE_TAG_MATHEMATICAL_GREEK = DWRITE_FONT_FEATURE_TAG.MATHEMATICAL_GREEK;
pub const DWRITE_FONT_FEATURE_TAG_MARK_TO_MARK_POSITIONING = DWRITE_FONT_FEATURE_TAG.MARK_TO_MARK_POSITIONING;
pub const DWRITE_FONT_FEATURE_TAG_ALTERNATE_ANNOTATION_FORMS = DWRITE_FONT_FEATURE_TAG.ALTERNATE_ANNOTATION_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_NLC_KANJI_FORMS = DWRITE_FONT_FEATURE_TAG.NLC_KANJI_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_OLD_STYLE_FIGURES = DWRITE_FONT_FEATURE_TAG.OLD_STYLE_FIGURES;
pub const DWRITE_FONT_FEATURE_TAG_ORDINALS = DWRITE_FONT_FEATURE_TAG.ORDINALS;
pub const DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_ALTERNATE_WIDTH = DWRITE_FONT_FEATURE_TAG.PROPORTIONAL_ALTERNATE_WIDTH;
pub const DWRITE_FONT_FEATURE_TAG_PETITE_CAPITALS = DWRITE_FONT_FEATURE_TAG.PETITE_CAPITALS;
pub const DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_FIGURES = DWRITE_FONT_FEATURE_TAG.PROPORTIONAL_FIGURES;
pub const DWRITE_FONT_FEATURE_TAG_PROPORTIONAL_WIDTHS = DWRITE_FONT_FEATURE_TAG.PROPORTIONAL_WIDTHS;
pub const DWRITE_FONT_FEATURE_TAG_QUARTER_WIDTHS = DWRITE_FONT_FEATURE_TAG.QUARTER_WIDTHS;
pub const DWRITE_FONT_FEATURE_TAG_REQUIRED_LIGATURES = DWRITE_FONT_FEATURE_TAG.REQUIRED_LIGATURES;
pub const DWRITE_FONT_FEATURE_TAG_RUBY_NOTATION_FORMS = DWRITE_FONT_FEATURE_TAG.RUBY_NOTATION_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_ALTERNATES = DWRITE_FONT_FEATURE_TAG.STYLISTIC_ALTERNATES;
pub const DWRITE_FONT_FEATURE_TAG_SCIENTIFIC_INFERIORS = DWRITE_FONT_FEATURE_TAG.SCIENTIFIC_INFERIORS;
pub const DWRITE_FONT_FEATURE_TAG_SMALL_CAPITALS = DWRITE_FONT_FEATURE_TAG.SMALL_CAPITALS;
pub const DWRITE_FONT_FEATURE_TAG_SIMPLIFIED_FORMS = DWRITE_FONT_FEATURE_TAG.SIMPLIFIED_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_1 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_1;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_2 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_2;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_3 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_3;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_4 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_4;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_5 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_5;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_6 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_6;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_7 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_7;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_8 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_8;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_9 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_9;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_10 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_10;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_11 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_11;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_12 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_12;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_13 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_13;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_14 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_14;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_15 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_15;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_16 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_16;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_17 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_17;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_18 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_18;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_19 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_19;
pub const DWRITE_FONT_FEATURE_TAG_STYLISTIC_SET_20 = DWRITE_FONT_FEATURE_TAG.STYLISTIC_SET_20;
pub const DWRITE_FONT_FEATURE_TAG_SUBSCRIPT = DWRITE_FONT_FEATURE_TAG.SUBSCRIPT;
pub const DWRITE_FONT_FEATURE_TAG_SUPERSCRIPT = DWRITE_FONT_FEATURE_TAG.SUPERSCRIPT;
pub const DWRITE_FONT_FEATURE_TAG_SWASH = DWRITE_FONT_FEATURE_TAG.SWASH;
pub const DWRITE_FONT_FEATURE_TAG_TITLING = DWRITE_FONT_FEATURE_TAG.TITLING;
pub const DWRITE_FONT_FEATURE_TAG_TRADITIONAL_NAME_FORMS = DWRITE_FONT_FEATURE_TAG.TRADITIONAL_NAME_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_TABULAR_FIGURES = DWRITE_FONT_FEATURE_TAG.TABULAR_FIGURES;
pub const DWRITE_FONT_FEATURE_TAG_TRADITIONAL_FORMS = DWRITE_FONT_FEATURE_TAG.TRADITIONAL_FORMS;
pub const DWRITE_FONT_FEATURE_TAG_THIRD_WIDTHS = DWRITE_FONT_FEATURE_TAG.THIRD_WIDTHS;
pub const DWRITE_FONT_FEATURE_TAG_UNICASE = DWRITE_FONT_FEATURE_TAG.UNICASE;
pub const DWRITE_FONT_FEATURE_TAG_VERTICAL_WRITING = DWRITE_FONT_FEATURE_TAG.VERTICAL_WRITING;
pub const DWRITE_FONT_FEATURE_TAG_VERTICAL_ALTERNATES_AND_ROTATION = DWRITE_FONT_FEATURE_TAG.VERTICAL_ALTERNATES_AND_ROTATION;
pub const DWRITE_FONT_FEATURE_TAG_SLASHED_ZERO = DWRITE_FONT_FEATURE_TAG.SLASHED_ZERO;

pub const DWRITE_TEXT_RANGE = extern struct {
    startPosition: u32,
    length: u32,
};

pub const DWRITE_FONT_FEATURE = extern struct {
    nameTag: DWRITE_FONT_FEATURE_TAG,
    parameter: u32,
};

pub const DWRITE_TYPOGRAPHIC_FEATURES = extern struct {
    features: ?*DWRITE_FONT_FEATURE,
    featureCount: u32,
};

pub const DWRITE_TRIMMING = extern struct {
    granularity: DWRITE_TRIMMING_GRANULARITY,
    delimiter: u32,
    delimiterCount: u32,
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteTextFormat_Value = Guid.initString("9c906818-31d7-4fd3-a151-7c5e225db55a");
pub const IID_IDWriteTextFormat = &IID_IDWriteTextFormat_Value;
pub const IDWriteTextFormat = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetTextAlignment: *const fn (
            self: *const IDWriteTextFormat,
            text_alignment: DWRITE_TEXT_ALIGNMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetParagraphAlignment: *const fn (
            self: *const IDWriteTextFormat,
            paragraph_alignment: DWRITE_PARAGRAPH_ALIGNMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWordWrapping: *const fn (
            self: *const IDWriteTextFormat,
            word_wrapping: DWRITE_WORD_WRAPPING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReadingDirection: *const fn (
            self: *const IDWriteTextFormat,
            reading_direction: DWRITE_READING_DIRECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFlowDirection: *const fn (
            self: *const IDWriteTextFormat,
            flow_direction: DWRITE_FLOW_DIRECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIncrementalTabStop: *const fn (
            self: *const IDWriteTextFormat,
            incremental_tab_stop: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTrimming: *const fn (
            self: *const IDWriteTextFormat,
            trimming_options: ?*const DWRITE_TRIMMING,
            trimming_sign: ?*IDWriteInlineObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLineSpacing: *const fn (
            self: *const IDWriteTextFormat,
            line_spacing_method: DWRITE_LINE_SPACING_METHOD,
            line_spacing: f32,
            baseline: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTextAlignment: *const fn (
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_TEXT_ALIGNMENT,
        GetParagraphAlignment: *const fn (
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_PARAGRAPH_ALIGNMENT,
        GetWordWrapping: *const fn (
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_WORD_WRAPPING,
        GetReadingDirection: *const fn (
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_READING_DIRECTION,
        GetFlowDirection: *const fn (
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FLOW_DIRECTION,
        GetIncrementalTabStop: *const fn (
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        GetTrimming: *const fn (
            self: *const IDWriteTextFormat,
            trimming_options: ?*DWRITE_TRIMMING,
            trimming_sign: ?*?*IDWriteInlineObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLineSpacing: *const fn (
            self: *const IDWriteTextFormat,
            line_spacing_method: ?*DWRITE_LINE_SPACING_METHOD,
            line_spacing: ?*f32,
            baseline: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontCollection: *const fn (
            self: *const IDWriteTextFormat,
            font_collection: ?*?*IDWriteFontCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFamilyNameLength: *const fn (
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFontFamilyName: *const fn (
            self: *const IDWriteTextFormat,
            font_family_name: [*:0]u16,
            name_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontWeight: *const fn (
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_WEIGHT,
        GetFontStyle: *const fn (
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_STYLE,
        GetFontStretch: *const fn (
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_STRETCH,
        GetFontSize: *const fn (
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        GetLocaleNameLength: *const fn (
            self: *const IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetLocaleName: *const fn (
            self: *const IDWriteTextFormat,
            locale_name: [*:0]u16,
            name_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setTextAlignment(self: *const T, text_alignment_: DWRITE_TEXT_ALIGNMENT) HRESULT {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).SetTextAlignment(@as(*const IDWriteTextFormat, @ptrCast(self)), text_alignment_);
            }
            pub inline fn setParagraphAlignment(self: *const T, paragraph_alignment_: DWRITE_PARAGRAPH_ALIGNMENT) HRESULT {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).SetParagraphAlignment(@as(*const IDWriteTextFormat, @ptrCast(self)), paragraph_alignment_);
            }
            pub inline fn setWordWrapping(self: *const T, word_wrapping_: DWRITE_WORD_WRAPPING) HRESULT {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).SetWordWrapping(@as(*const IDWriteTextFormat, @ptrCast(self)), word_wrapping_);
            }
            pub inline fn setReadingDirection(self: *const T, reading_direction_: DWRITE_READING_DIRECTION) HRESULT {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).SetReadingDirection(@as(*const IDWriteTextFormat, @ptrCast(self)), reading_direction_);
            }
            pub inline fn setFlowDirection(self: *const T, flow_direction_: DWRITE_FLOW_DIRECTION) HRESULT {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).SetFlowDirection(@as(*const IDWriteTextFormat, @ptrCast(self)), flow_direction_);
            }
            pub inline fn setIncrementalTabStop(self: *const T, incremental_tab_stop_: f32) HRESULT {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).SetIncrementalTabStop(@as(*const IDWriteTextFormat, @ptrCast(self)), incremental_tab_stop_);
            }
            pub inline fn setTrimming(self: *const T, trimming_options_: ?*const DWRITE_TRIMMING, trimming_sign_: ?*IDWriteInlineObject) HRESULT {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).SetTrimming(@as(*const IDWriteTextFormat, @ptrCast(self)), trimming_options_, trimming_sign_);
            }
            pub inline fn setLineSpacing(self: *const T, line_spacing_method_: DWRITE_LINE_SPACING_METHOD, line_spacing_: f32, baseline_: f32) HRESULT {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).SetLineSpacing(@as(*const IDWriteTextFormat, @ptrCast(self)), line_spacing_method_, line_spacing_, baseline_);
            }
            pub inline fn getTextAlignment(self: *const T) DWRITE_TEXT_ALIGNMENT {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).GetTextAlignment(@as(*const IDWriteTextFormat, @ptrCast(self)));
            }
            pub inline fn getParagraphAlignment(self: *const T) DWRITE_PARAGRAPH_ALIGNMENT {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).GetParagraphAlignment(@as(*const IDWriteTextFormat, @ptrCast(self)));
            }
            pub inline fn getWordWrapping(self: *const T) DWRITE_WORD_WRAPPING {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).GetWordWrapping(@as(*const IDWriteTextFormat, @ptrCast(self)));
            }
            pub inline fn getReadingDirection(self: *const T) DWRITE_READING_DIRECTION {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).GetReadingDirection(@as(*const IDWriteTextFormat, @ptrCast(self)));
            }
            pub inline fn getFlowDirection(self: *const T) DWRITE_FLOW_DIRECTION {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).GetFlowDirection(@as(*const IDWriteTextFormat, @ptrCast(self)));
            }
            pub inline fn getIncrementalTabStop(self: *const T) f32 {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).GetIncrementalTabStop(@as(*const IDWriteTextFormat, @ptrCast(self)));
            }
            pub inline fn getTrimming(self: *const T, trimming_options_: ?*DWRITE_TRIMMING, trimming_sign_: ?*?*IDWriteInlineObject) HRESULT {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).GetTrimming(@as(*const IDWriteTextFormat, @ptrCast(self)), trimming_options_, trimming_sign_);
            }
            pub inline fn getLineSpacing(self: *const T, line_spacing_method_: ?*DWRITE_LINE_SPACING_METHOD, line_spacing_: ?*f32, baseline_: ?*f32) HRESULT {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).GetLineSpacing(@as(*const IDWriteTextFormat, @ptrCast(self)), line_spacing_method_, line_spacing_, baseline_);
            }
            pub inline fn getFontCollection(self: *const T, font_collection_: ?*?*IDWriteFontCollection) HRESULT {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).GetFontCollection(@as(*const IDWriteTextFormat, @ptrCast(self)), font_collection_);
            }
            pub inline fn getFontFamilyNameLength(self: *const T) u32 {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).GetFontFamilyNameLength(@as(*const IDWriteTextFormat, @ptrCast(self)));
            }
            pub inline fn getFontFamilyName(self: *const T, font_family_name_: [*:0]u16, name_size_: u32) HRESULT {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).GetFontFamilyName(@as(*const IDWriteTextFormat, @ptrCast(self)), font_family_name_, name_size_);
            }
            pub inline fn getFontWeight(self: *const T) DWRITE_FONT_WEIGHT {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).GetFontWeight(@as(*const IDWriteTextFormat, @ptrCast(self)));
            }
            pub inline fn getFontStyle(self: *const T) DWRITE_FONT_STYLE {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).GetFontStyle(@as(*const IDWriteTextFormat, @ptrCast(self)));
            }
            pub inline fn getFontStretch(self: *const T) DWRITE_FONT_STRETCH {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).GetFontStretch(@as(*const IDWriteTextFormat, @ptrCast(self)));
            }
            pub inline fn getFontSize(self: *const T) f32 {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).GetFontSize(@as(*const IDWriteTextFormat, @ptrCast(self)));
            }
            pub inline fn getLocaleNameLength(self: *const T) u32 {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).GetLocaleNameLength(@as(*const IDWriteTextFormat, @ptrCast(self)));
            }
            pub inline fn getLocaleName(self: *const T, locale_name_: [*:0]u16, name_size_: u32) HRESULT {
                return @as(*const IDWriteTextFormat.VTable, @ptrCast(self.vtable)).GetLocaleName(@as(*const IDWriteTextFormat, @ptrCast(self)), locale_name_, name_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteTypography_Value = Guid.initString("55f1112b-1dc2-4b3c-9541-f46894ed85b6");
pub const IID_IDWriteTypography = &IID_IDWriteTypography_Value;
pub const IDWriteTypography = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddFontFeature: *const fn (
            self: *const IDWriteTypography,
            font_feature: DWRITE_FONT_FEATURE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFeatureCount: *const fn (
            self: *const IDWriteTypography,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFontFeature: *const fn (
            self: *const IDWriteTypography,
            font_feature_index: u32,
            font_feature: ?*DWRITE_FONT_FEATURE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addFontFeature(self: *const T, font_feature_: DWRITE_FONT_FEATURE) HRESULT {
                return @as(*const IDWriteTypography.VTable, @ptrCast(self.vtable)).AddFontFeature(@as(*const IDWriteTypography, @ptrCast(self)), font_feature_);
            }
            pub inline fn getFontFeatureCount(self: *const T) u32 {
                return @as(*const IDWriteTypography.VTable, @ptrCast(self.vtable)).GetFontFeatureCount(@as(*const IDWriteTypography, @ptrCast(self)));
            }
            pub inline fn getFontFeature(self: *const T, font_feature_index_: u32, font_feature_: ?*DWRITE_FONT_FEATURE) HRESULT {
                return @as(*const IDWriteTypography.VTable, @ptrCast(self.vtable)).GetFontFeature(@as(*const IDWriteTypography, @ptrCast(self)), font_feature_index_, font_feature_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DWRITE_SCRIPT_SHAPES = enum(u32) {
    DEFAULT = 0,
    NO_VISUAL = 1,
    _,
    pub fn initFlags(o: struct {
        DEFAULT: u1 = 0,
        NO_VISUAL: u1 = 0,
    }) DWRITE_SCRIPT_SHAPES {
        return @as(DWRITE_SCRIPT_SHAPES, @enumFromInt((if (o.DEFAULT == 1) @intFromEnum(DWRITE_SCRIPT_SHAPES.DEFAULT) else 0) | (if (o.NO_VISUAL == 1) @intFromEnum(DWRITE_SCRIPT_SHAPES.NO_VISUAL) else 0)));
    }
};
pub const DWRITE_SCRIPT_SHAPES_DEFAULT = DWRITE_SCRIPT_SHAPES.DEFAULT;
pub const DWRITE_SCRIPT_SHAPES_NO_VISUAL = DWRITE_SCRIPT_SHAPES.NO_VISUAL;

pub const DWRITE_SCRIPT_ANALYSIS = extern struct {
    script: u16,
    shapes: DWRITE_SCRIPT_SHAPES,
};

pub const DWRITE_BREAK_CONDITION = enum(i32) {
    NEUTRAL = 0,
    CAN_BREAK = 1,
    MAY_NOT_BREAK = 2,
    MUST_BREAK = 3,
};
pub const DWRITE_BREAK_CONDITION_NEUTRAL = DWRITE_BREAK_CONDITION.NEUTRAL;
pub const DWRITE_BREAK_CONDITION_CAN_BREAK = DWRITE_BREAK_CONDITION.CAN_BREAK;
pub const DWRITE_BREAK_CONDITION_MAY_NOT_BREAK = DWRITE_BREAK_CONDITION.MAY_NOT_BREAK;
pub const DWRITE_BREAK_CONDITION_MUST_BREAK = DWRITE_BREAK_CONDITION.MUST_BREAK;

pub const DWRITE_LINE_BREAKPOINT = extern struct {
    _bitfield: u8,
};

pub const DWRITE_NUMBER_SUBSTITUTION_METHOD = enum(i32) {
    FROM_CULTURE = 0,
    CONTEXTUAL = 1,
    NONE = 2,
    NATIONAL = 3,
    TRADITIONAL = 4,
};
pub const DWRITE_NUMBER_SUBSTITUTION_METHOD_FROM_CULTURE = DWRITE_NUMBER_SUBSTITUTION_METHOD.FROM_CULTURE;
pub const DWRITE_NUMBER_SUBSTITUTION_METHOD_CONTEXTUAL = DWRITE_NUMBER_SUBSTITUTION_METHOD.CONTEXTUAL;
pub const DWRITE_NUMBER_SUBSTITUTION_METHOD_NONE = DWRITE_NUMBER_SUBSTITUTION_METHOD.NONE;
pub const DWRITE_NUMBER_SUBSTITUTION_METHOD_NATIONAL = DWRITE_NUMBER_SUBSTITUTION_METHOD.NATIONAL;
pub const DWRITE_NUMBER_SUBSTITUTION_METHOD_TRADITIONAL = DWRITE_NUMBER_SUBSTITUTION_METHOD.TRADITIONAL;

const IID_IDWriteNumberSubstitution_Value = Guid.initString("14885cc9-bab0-4f90-b6ed-5c366a2cd03d");
pub const IID_IDWriteNumberSubstitution = &IID_IDWriteNumberSubstitution_Value;
pub const IDWriteNumberSubstitution = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DWRITE_SHAPING_TEXT_PROPERTIES = extern struct {
    _bitfield: u16,
};

pub const DWRITE_SHAPING_GLYPH_PROPERTIES = extern struct {
    _bitfield: u16,
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteTextAnalysisSource_Value = Guid.initString("688e1a58-5094-47c8-adc8-fbcea60ae92b");
pub const IID_IDWriteTextAnalysisSource = &IID_IDWriteTextAnalysisSource_Value;
pub const IDWriteTextAnalysisSource = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTextAtPosition: *const fn (
            self: *const IDWriteTextAnalysisSource,
            text_position: u32,
            text_string: ?*const ?*u16,
            text_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTextBeforePosition: *const fn (
            self: *const IDWriteTextAnalysisSource,
            text_position: u32,
            text_string: ?*const ?*u16,
            text_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParagraphReadingDirection: *const fn (
            self: *const IDWriteTextAnalysisSource,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_READING_DIRECTION,
        GetLocaleName: *const fn (
            self: *const IDWriteTextAnalysisSource,
            text_position: u32,
            text_length: ?*u32,
            locale_name: ?*const ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumberSubstitution: *const fn (
            self: *const IDWriteTextAnalysisSource,
            text_position: u32,
            text_length: ?*u32,
            number_substitution: ?*?*IDWriteNumberSubstitution,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getTextAtPosition(self: *const T, text_position_: u32, text_string_: ?*const ?*u16, text_length_: ?*u32) HRESULT {
                return @as(*const IDWriteTextAnalysisSource.VTable, @ptrCast(self.vtable)).GetTextAtPosition(@as(*const IDWriteTextAnalysisSource, @ptrCast(self)), text_position_, text_string_, text_length_);
            }
            pub inline fn getTextBeforePosition(self: *const T, text_position_: u32, text_string_: ?*const ?*u16, text_length_: ?*u32) HRESULT {
                return @as(*const IDWriteTextAnalysisSource.VTable, @ptrCast(self.vtable)).GetTextBeforePosition(@as(*const IDWriteTextAnalysisSource, @ptrCast(self)), text_position_, text_string_, text_length_);
            }
            pub inline fn getParagraphReadingDirection(self: *const T) DWRITE_READING_DIRECTION {
                return @as(*const IDWriteTextAnalysisSource.VTable, @ptrCast(self.vtable)).GetParagraphReadingDirection(@as(*const IDWriteTextAnalysisSource, @ptrCast(self)));
            }
            pub inline fn getLocaleName(self: *const T, text_position_: u32, text_length_: ?*u32, locale_name_: ?*const ?*u16) HRESULT {
                return @as(*const IDWriteTextAnalysisSource.VTable, @ptrCast(self.vtable)).GetLocaleName(@as(*const IDWriteTextAnalysisSource, @ptrCast(self)), text_position_, text_length_, locale_name_);
            }
            pub inline fn getNumberSubstitution(self: *const T, text_position_: u32, text_length_: ?*u32, number_substitution_: ?*?*IDWriteNumberSubstitution) HRESULT {
                return @as(*const IDWriteTextAnalysisSource.VTable, @ptrCast(self.vtable)).GetNumberSubstitution(@as(*const IDWriteTextAnalysisSource, @ptrCast(self)), text_position_, text_length_, number_substitution_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteTextAnalysisSink_Value = Guid.initString("5810cd44-0ca0-4701-b3fa-bec5182ae4f6");
pub const IID_IDWriteTextAnalysisSink = &IID_IDWriteTextAnalysisSink_Value;
pub const IDWriteTextAnalysisSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetScriptAnalysis: *const fn (
            self: *const IDWriteTextAnalysisSink,
            text_position: u32,
            text_length: u32,
            script_analysis: ?*const DWRITE_SCRIPT_ANALYSIS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLineBreakpoints: *const fn (
            self: *const IDWriteTextAnalysisSink,
            text_position: u32,
            text_length: u32,
            line_breakpoints: [*]const DWRITE_LINE_BREAKPOINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBidiLevel: *const fn (
            self: *const IDWriteTextAnalysisSink,
            text_position: u32,
            text_length: u32,
            explicit_level: u8,
            resolved_level: u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNumberSubstitution: *const fn (
            self: *const IDWriteTextAnalysisSink,
            text_position: u32,
            text_length: u32,
            number_substitution: ?*IDWriteNumberSubstitution,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setScriptAnalysis(self: *const T, text_position_: u32, text_length_: u32, script_analysis_: ?*const DWRITE_SCRIPT_ANALYSIS) HRESULT {
                return @as(*const IDWriteTextAnalysisSink.VTable, @ptrCast(self.vtable)).SetScriptAnalysis(@as(*const IDWriteTextAnalysisSink, @ptrCast(self)), text_position_, text_length_, script_analysis_);
            }
            pub inline fn setLineBreakpoints(self: *const T, text_position_: u32, text_length_: u32, line_breakpoints_: [*]const DWRITE_LINE_BREAKPOINT) HRESULT {
                return @as(*const IDWriteTextAnalysisSink.VTable, @ptrCast(self.vtable)).SetLineBreakpoints(@as(*const IDWriteTextAnalysisSink, @ptrCast(self)), text_position_, text_length_, line_breakpoints_);
            }
            pub inline fn setBidiLevel(self: *const T, text_position_: u32, text_length_: u32, explicit_level_: u8, resolved_level_: u8) HRESULT {
                return @as(*const IDWriteTextAnalysisSink.VTable, @ptrCast(self.vtable)).SetBidiLevel(@as(*const IDWriteTextAnalysisSink, @ptrCast(self)), text_position_, text_length_, explicit_level_, resolved_level_);
            }
            pub inline fn setNumberSubstitution(self: *const T, text_position_: u32, text_length_: u32, number_substitution_: ?*IDWriteNumberSubstitution) HRESULT {
                return @as(*const IDWriteTextAnalysisSink.VTable, @ptrCast(self.vtable)).SetNumberSubstitution(@as(*const IDWriteTextAnalysisSink, @ptrCast(self)), text_position_, text_length_, number_substitution_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteTextAnalyzer_Value = Guid.initString("b7e6163e-7f46-43b4-84b3-e4e6249c365d");
pub const IID_IDWriteTextAnalyzer = &IID_IDWriteTextAnalyzer_Value;
pub const IDWriteTextAnalyzer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AnalyzeScript: *const fn (
            self: *const IDWriteTextAnalyzer,
            analysis_source: ?*IDWriteTextAnalysisSource,
            text_position: u32,
            text_length: u32,
            analysis_sink: ?*IDWriteTextAnalysisSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AnalyzeBidi: *const fn (
            self: *const IDWriteTextAnalyzer,
            analysis_source: ?*IDWriteTextAnalysisSource,
            text_position: u32,
            text_length: u32,
            analysis_sink: ?*IDWriteTextAnalysisSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AnalyzeNumberSubstitution: *const fn (
            self: *const IDWriteTextAnalyzer,
            analysis_source: ?*IDWriteTextAnalysisSource,
            text_position: u32,
            text_length: u32,
            analysis_sink: ?*IDWriteTextAnalysisSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AnalyzeLineBreakpoints: *const fn (
            self: *const IDWriteTextAnalyzer,
            analysis_source: ?*IDWriteTextAnalysisSource,
            text_position: u32,
            text_length: u32,
            analysis_sink: ?*IDWriteTextAnalysisSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphs: *const fn (
            self: *const IDWriteTextAnalyzer,
            text_string: [*:0]const u16,
            text_length: u32,
            font_face: ?*IDWriteFontFace,
            is_sideways: BOOL,
            is_right_to_left: BOOL,
            script_analysis: ?*const DWRITE_SCRIPT_ANALYSIS,
            locale_name: ?[*:0]const u16,
            number_substitution: ?*IDWriteNumberSubstitution,
            features: ?[*]const ?*const DWRITE_TYPOGRAPHIC_FEATURES,
            feature_range_lengths: ?[*]const u32,
            feature_ranges: u32,
            max_glyph_count: u32,
            cluster_map: [*:0]u16,
            text_props: [*]DWRITE_SHAPING_TEXT_PROPERTIES,
            glyph_indices: [*:0]u16,
            glyph_props: [*]DWRITE_SHAPING_GLYPH_PROPERTIES,
            actual_glyph_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphPlacements: *const fn (
            self: *const IDWriteTextAnalyzer,
            text_string: [*:0]const u16,
            cluster_map: [*:0]const u16,
            text_props: [*]DWRITE_SHAPING_TEXT_PROPERTIES,
            text_length: u32,
            glyph_indices: [*:0]const u16,
            glyph_props: [*]const DWRITE_SHAPING_GLYPH_PROPERTIES,
            glyph_count: u32,
            font_face: ?*IDWriteFontFace,
            font_em_size: f32,
            is_sideways: BOOL,
            is_right_to_left: BOOL,
            script_analysis: ?*const DWRITE_SCRIPT_ANALYSIS,
            locale_name: ?[*:0]const u16,
            features: ?[*]const ?*const DWRITE_TYPOGRAPHIC_FEATURES,
            feature_range_lengths: ?[*]const u32,
            feature_ranges: u32,
            glyph_advances: [*]f32,
            glyph_offsets: [*]DWRITE_GLYPH_OFFSET,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGdiCompatibleGlyphPlacements: *const fn (
            self: *const IDWriteTextAnalyzer,
            text_string: [*:0]const u16,
            cluster_map: [*:0]const u16,
            text_props: [*]DWRITE_SHAPING_TEXT_PROPERTIES,
            text_length: u32,
            glyph_indices: [*:0]const u16,
            glyph_props: [*]const DWRITE_SHAPING_GLYPH_PROPERTIES,
            glyph_count: u32,
            font_face: ?*IDWriteFontFace,
            font_em_size: f32,
            pixels_per_dip: f32,
            transform: ?*const DWRITE_MATRIX,
            use_gdi_natural: BOOL,
            is_sideways: BOOL,
            is_right_to_left: BOOL,
            script_analysis: ?*const DWRITE_SCRIPT_ANALYSIS,
            locale_name: ?[*:0]const u16,
            features: ?[*]const ?*const DWRITE_TYPOGRAPHIC_FEATURES,
            feature_range_lengths: ?[*]const u32,
            feature_ranges: u32,
            glyph_advances: [*]f32,
            glyph_offsets: [*]DWRITE_GLYPH_OFFSET,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn analyzeScript(self: *const T, analysis_source_: ?*IDWriteTextAnalysisSource, text_position_: u32, text_length_: u32, analysis_sink_: ?*IDWriteTextAnalysisSink) HRESULT {
                return @as(*const IDWriteTextAnalyzer.VTable, @ptrCast(self.vtable)).AnalyzeScript(@as(*const IDWriteTextAnalyzer, @ptrCast(self)), analysis_source_, text_position_, text_length_, analysis_sink_);
            }
            pub inline fn analyzeBidi(self: *const T, analysis_source_: ?*IDWriteTextAnalysisSource, text_position_: u32, text_length_: u32, analysis_sink_: ?*IDWriteTextAnalysisSink) HRESULT {
                return @as(*const IDWriteTextAnalyzer.VTable, @ptrCast(self.vtable)).AnalyzeBidi(@as(*const IDWriteTextAnalyzer, @ptrCast(self)), analysis_source_, text_position_, text_length_, analysis_sink_);
            }
            pub inline fn analyzeNumberSubstitution(self: *const T, analysis_source_: ?*IDWriteTextAnalysisSource, text_position_: u32, text_length_: u32, analysis_sink_: ?*IDWriteTextAnalysisSink) HRESULT {
                return @as(*const IDWriteTextAnalyzer.VTable, @ptrCast(self.vtable)).AnalyzeNumberSubstitution(@as(*const IDWriteTextAnalyzer, @ptrCast(self)), analysis_source_, text_position_, text_length_, analysis_sink_);
            }
            pub inline fn analyzeLineBreakpoints(self: *const T, analysis_source_: ?*IDWriteTextAnalysisSource, text_position_: u32, text_length_: u32, analysis_sink_: ?*IDWriteTextAnalysisSink) HRESULT {
                return @as(*const IDWriteTextAnalyzer.VTable, @ptrCast(self.vtable)).AnalyzeLineBreakpoints(@as(*const IDWriteTextAnalyzer, @ptrCast(self)), analysis_source_, text_position_, text_length_, analysis_sink_);
            }
            pub inline fn getGlyphs(self: *const T, text_string_: [*:0]const u16, text_length_: u32, font_face_: ?*IDWriteFontFace, is_sideways_: BOOL, is_right_to_left_: BOOL, script_analysis_: ?*const DWRITE_SCRIPT_ANALYSIS, locale_name_: ?[*:0]const u16, number_substitution_: ?*IDWriteNumberSubstitution, features_: ?[*]const ?*const DWRITE_TYPOGRAPHIC_FEATURES, feature_range_lengths_: ?[*]const u32, feature_ranges_: u32, max_glyph_count_: u32, cluster_map_: [*:0]u16, text_props_: [*]DWRITE_SHAPING_TEXT_PROPERTIES, glyph_indices_: [*:0]u16, glyph_props_: [*]DWRITE_SHAPING_GLYPH_PROPERTIES, actual_glyph_count_: ?*u32) HRESULT {
                return @as(*const IDWriteTextAnalyzer.VTable, @ptrCast(self.vtable)).GetGlyphs(@as(*const IDWriteTextAnalyzer, @ptrCast(self)), text_string_, text_length_, font_face_, is_sideways_, is_right_to_left_, script_analysis_, locale_name_, number_substitution_, features_, feature_range_lengths_, feature_ranges_, max_glyph_count_, cluster_map_, text_props_, glyph_indices_, glyph_props_, actual_glyph_count_);
            }
            pub inline fn getGlyphPlacements(self: *const T, text_string_: [*:0]const u16, cluster_map_: [*:0]const u16, text_props_: [*]DWRITE_SHAPING_TEXT_PROPERTIES, text_length_: u32, glyph_indices_: [*:0]const u16, glyph_props_: [*]const DWRITE_SHAPING_GLYPH_PROPERTIES, glyph_count_: u32, font_face_: ?*IDWriteFontFace, font_em_size_: f32, is_sideways_: BOOL, is_right_to_left_: BOOL, script_analysis_: ?*const DWRITE_SCRIPT_ANALYSIS, locale_name_: ?[*:0]const u16, features_: ?[*]const ?*const DWRITE_TYPOGRAPHIC_FEATURES, feature_range_lengths_: ?[*]const u32, feature_ranges_: u32, glyph_advances_: [*]f32, glyph_offsets_: [*]DWRITE_GLYPH_OFFSET) HRESULT {
                return @as(*const IDWriteTextAnalyzer.VTable, @ptrCast(self.vtable)).GetGlyphPlacements(@as(*const IDWriteTextAnalyzer, @ptrCast(self)), text_string_, cluster_map_, text_props_, text_length_, glyph_indices_, glyph_props_, glyph_count_, font_face_, font_em_size_, is_sideways_, is_right_to_left_, script_analysis_, locale_name_, features_, feature_range_lengths_, feature_ranges_, glyph_advances_, glyph_offsets_);
            }
            pub inline fn getGdiCompatibleGlyphPlacements(self: *const T, text_string_: [*:0]const u16, cluster_map_: [*:0]const u16, text_props_: [*]DWRITE_SHAPING_TEXT_PROPERTIES, text_length_: u32, glyph_indices_: [*:0]const u16, glyph_props_: [*]const DWRITE_SHAPING_GLYPH_PROPERTIES, glyph_count_: u32, font_face_: ?*IDWriteFontFace, font_em_size_: f32, pixels_per_dip_: f32, transform_: ?*const DWRITE_MATRIX, use_gdi_natural_: BOOL, is_sideways_: BOOL, is_right_to_left_: BOOL, script_analysis_: ?*const DWRITE_SCRIPT_ANALYSIS, locale_name_: ?[*:0]const u16, features_: ?[*]const ?*const DWRITE_TYPOGRAPHIC_FEATURES, feature_range_lengths_: ?[*]const u32, feature_ranges_: u32, glyph_advances_: [*]f32, glyph_offsets_: [*]DWRITE_GLYPH_OFFSET) HRESULT {
                return @as(*const IDWriteTextAnalyzer.VTable, @ptrCast(self.vtable)).GetGdiCompatibleGlyphPlacements(@as(*const IDWriteTextAnalyzer, @ptrCast(self)), text_string_, cluster_map_, text_props_, text_length_, glyph_indices_, glyph_props_, glyph_count_, font_face_, font_em_size_, pixels_per_dip_, transform_, use_gdi_natural_, is_sideways_, is_right_to_left_, script_analysis_, locale_name_, features_, feature_range_lengths_, feature_ranges_, glyph_advances_, glyph_offsets_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DWRITE_GLYPH_RUN = extern struct {
    fontFace: ?*IDWriteFontFace,
    fontEmSize: f32,
    glyphCount: u32,
    glyphIndices: ?*const u16,
    glyphAdvances: ?*const f32,
    glyphOffsets: ?*const DWRITE_GLYPH_OFFSET,
    isSideways: BOOL,
    bidiLevel: u32,
};

pub const DWRITE_GLYPH_RUN_DESCRIPTION = extern struct {
    localeName: ?[*:0]const u16,
    string: ?[*:0]const u16,
    stringLength: u32,
    clusterMap: ?*const u16,
    textPosition: u32,
};

pub const DWRITE_UNDERLINE = extern struct {
    width: f32,
    thickness: f32,
    offset: f32,
    runHeight: f32,
    readingDirection: DWRITE_READING_DIRECTION,
    flowDirection: DWRITE_FLOW_DIRECTION,
    localeName: ?[*:0]const u16,
    measuringMode: DWRITE_MEASURING_MODE,
};

pub const DWRITE_STRIKETHROUGH = extern struct {
    width: f32,
    thickness: f32,
    offset: f32,
    readingDirection: DWRITE_READING_DIRECTION,
    flowDirection: DWRITE_FLOW_DIRECTION,
    localeName: ?[*:0]const u16,
    measuringMode: DWRITE_MEASURING_MODE,
};

pub const DWRITE_LINE_METRICS = extern struct {
    length: u32,
    trailingWhitespaceLength: u32,
    newlineLength: u32,
    height: f32,
    baseline: f32,
    isTrimmed: BOOL,
};

pub const DWRITE_CLUSTER_METRICS = extern struct {
    width: f32,
    length: u16,
    _bitfield: u16,
};

pub const DWRITE_TEXT_METRICS = extern struct {
    left: f32,
    top: f32,
    width: f32,
    widthIncludingTrailingWhitespace: f32,
    height: f32,
    layoutWidth: f32,
    layoutHeight: f32,
    maxBidiReorderingDepth: u32,
    lineCount: u32,
};

pub const DWRITE_INLINE_OBJECT_METRICS = extern struct {
    width: f32,
    height: f32,
    baseline: f32,
    supportsSideways: BOOL,
};

pub const DWRITE_OVERHANG_METRICS = extern struct {
    left: f32,
    top: f32,
    right: f32,
    bottom: f32,
};

pub const DWRITE_HIT_TEST_METRICS = extern struct {
    textPosition: u32,
    length: u32,
    left: f32,
    top: f32,
    width: f32,
    height: f32,
    bidiLevel: u32,
    isText: BOOL,
    isTrimmed: BOOL,
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteInlineObject_Value = Guid.initString("8339fde3-106f-47ab-8373-1c6295eb10b3");
pub const IID_IDWriteInlineObject = &IID_IDWriteInlineObject_Value;
pub const IDWriteInlineObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Draw: *const fn (
            self: *const IDWriteInlineObject,
            client_drawing_context: ?*anyopaque,
            renderer: ?*IDWriteTextRenderer,
            origin_x: f32,
            origin_y: f32,
            is_sideways: BOOL,
            is_right_to_left: BOOL,
            client_drawing_effect: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMetrics: *const fn (
            self: *const IDWriteInlineObject,
            metrics: ?*DWRITE_INLINE_OBJECT_METRICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOverhangMetrics: *const fn (
            self: *const IDWriteInlineObject,
            overhangs: ?*DWRITE_OVERHANG_METRICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBreakConditions: *const fn (
            self: *const IDWriteInlineObject,
            break_condition_before: ?*DWRITE_BREAK_CONDITION,
            break_condition_after: ?*DWRITE_BREAK_CONDITION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn draw(self: *const T, client_drawing_context_: ?*anyopaque, renderer_: ?*IDWriteTextRenderer, origin_x_: f32, origin_y_: f32, is_sideways_: BOOL, is_right_to_left_: BOOL, client_drawing_effect_: ?*IUnknown) HRESULT {
                return @as(*const IDWriteInlineObject.VTable, @ptrCast(self.vtable)).Draw(@as(*const IDWriteInlineObject, @ptrCast(self)), client_drawing_context_, renderer_, origin_x_, origin_y_, is_sideways_, is_right_to_left_, client_drawing_effect_);
            }
            pub inline fn getMetrics(self: *const T, metrics_: ?*DWRITE_INLINE_OBJECT_METRICS) HRESULT {
                return @as(*const IDWriteInlineObject.VTable, @ptrCast(self.vtable)).GetMetrics(@as(*const IDWriteInlineObject, @ptrCast(self)), metrics_);
            }
            pub inline fn getOverhangMetrics(self: *const T, overhangs_: ?*DWRITE_OVERHANG_METRICS) HRESULT {
                return @as(*const IDWriteInlineObject.VTable, @ptrCast(self.vtable)).GetOverhangMetrics(@as(*const IDWriteInlineObject, @ptrCast(self)), overhangs_);
            }
            pub inline fn getBreakConditions(self: *const T, break_condition_before_: ?*DWRITE_BREAK_CONDITION, break_condition_after_: ?*DWRITE_BREAK_CONDITION) HRESULT {
                return @as(*const IDWriteInlineObject.VTable, @ptrCast(self.vtable)).GetBreakConditions(@as(*const IDWriteInlineObject, @ptrCast(self)), break_condition_before_, break_condition_after_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWritePixelSnapping_Value = Guid.initString("eaf3a2da-ecf4-4d24-b644-b34f6842024b");
pub const IID_IDWritePixelSnapping = &IID_IDWritePixelSnapping_Value;
pub const IDWritePixelSnapping = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsPixelSnappingDisabled: *const fn (
            self: *const IDWritePixelSnapping,
            client_drawing_context: ?*anyopaque,
            is_disabled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentTransform: *const fn (
            self: *const IDWritePixelSnapping,
            client_drawing_context: ?*anyopaque,
            transform: ?*DWRITE_MATRIX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelsPerDip: *const fn (
            self: *const IDWritePixelSnapping,
            client_drawing_context: ?*anyopaque,
            pixels_per_dip: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isPixelSnappingDisabled(self: *const T, client_drawing_context_: ?*anyopaque, is_disabled_: ?*BOOL) HRESULT {
                return @as(*const IDWritePixelSnapping.VTable, @ptrCast(self.vtable)).IsPixelSnappingDisabled(@as(*const IDWritePixelSnapping, @ptrCast(self)), client_drawing_context_, is_disabled_);
            }
            pub inline fn getCurrentTransform(self: *const T, client_drawing_context_: ?*anyopaque, transform_: ?*DWRITE_MATRIX) HRESULT {
                return @as(*const IDWritePixelSnapping.VTable, @ptrCast(self.vtable)).GetCurrentTransform(@as(*const IDWritePixelSnapping, @ptrCast(self)), client_drawing_context_, transform_);
            }
            pub inline fn getPixelsPerDip(self: *const T, client_drawing_context_: ?*anyopaque, pixels_per_dip_: ?*f32) HRESULT {
                return @as(*const IDWritePixelSnapping.VTable, @ptrCast(self.vtable)).GetPixelsPerDip(@as(*const IDWritePixelSnapping, @ptrCast(self)), client_drawing_context_, pixels_per_dip_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteTextRenderer_Value = Guid.initString("ef8a8135-5cc6-45fe-8825-c5a0724eb819");
pub const IID_IDWriteTextRenderer = &IID_IDWriteTextRenderer_Value;
pub const IDWriteTextRenderer = extern struct {
    pub const VTable = extern struct {
        base: IDWritePixelSnapping.VTable,
        DrawGlyphRun: *const fn (
            self: *const IDWriteTextRenderer,
            client_drawing_context: ?*anyopaque,
            baseline_origin_x: f32,
            baseline_origin_y: f32,
            measuring_mode: DWRITE_MEASURING_MODE,
            glyph_run: ?*const DWRITE_GLYPH_RUN,
            glyph_run_description: ?*const DWRITE_GLYPH_RUN_DESCRIPTION,
            client_drawing_effect: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawUnderline: *const fn (
            self: *const IDWriteTextRenderer,
            client_drawing_context: ?*anyopaque,
            baseline_origin_x: f32,
            baseline_origin_y: f32,
            underline: ?*const DWRITE_UNDERLINE,
            client_drawing_effect: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawStrikethrough: *const fn (
            self: *const IDWriteTextRenderer,
            client_drawing_context: ?*anyopaque,
            baseline_origin_x: f32,
            baseline_origin_y: f32,
            strikethrough: ?*const DWRITE_STRIKETHROUGH,
            client_drawing_effect: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawInlineObject: *const fn (
            self: *const IDWriteTextRenderer,
            client_drawing_context: ?*anyopaque,
            origin_x: f32,
            origin_y: f32,
            inline_object: ?*IDWriteInlineObject,
            is_sideways: BOOL,
            is_right_to_left: BOOL,
            client_drawing_effect: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWritePixelSnapping.MethodMixin(T);
            pub inline fn drawGlyphRun(self: *const T, client_drawing_context_: ?*anyopaque, baseline_origin_x_: f32, baseline_origin_y_: f32, measuring_mode_: DWRITE_MEASURING_MODE, glyph_run_: ?*const DWRITE_GLYPH_RUN, glyph_run_description_: ?*const DWRITE_GLYPH_RUN_DESCRIPTION, client_drawing_effect_: ?*IUnknown) HRESULT {
                return @as(*const IDWriteTextRenderer.VTable, @ptrCast(self.vtable)).DrawGlyphRun(@as(*const IDWriteTextRenderer, @ptrCast(self)), client_drawing_context_, baseline_origin_x_, baseline_origin_y_, measuring_mode_, glyph_run_, glyph_run_description_, client_drawing_effect_);
            }
            pub inline fn drawUnderline(self: *const T, client_drawing_context_: ?*anyopaque, baseline_origin_x_: f32, baseline_origin_y_: f32, underline_: ?*const DWRITE_UNDERLINE, client_drawing_effect_: ?*IUnknown) HRESULT {
                return @as(*const IDWriteTextRenderer.VTable, @ptrCast(self.vtable)).DrawUnderline(@as(*const IDWriteTextRenderer, @ptrCast(self)), client_drawing_context_, baseline_origin_x_, baseline_origin_y_, underline_, client_drawing_effect_);
            }
            pub inline fn drawStrikethrough(self: *const T, client_drawing_context_: ?*anyopaque, baseline_origin_x_: f32, baseline_origin_y_: f32, strikethrough_: ?*const DWRITE_STRIKETHROUGH, client_drawing_effect_: ?*IUnknown) HRESULT {
                return @as(*const IDWriteTextRenderer.VTable, @ptrCast(self.vtable)).DrawStrikethrough(@as(*const IDWriteTextRenderer, @ptrCast(self)), client_drawing_context_, baseline_origin_x_, baseline_origin_y_, strikethrough_, client_drawing_effect_);
            }
            pub inline fn drawInlineObject(self: *const T, client_drawing_context_: ?*anyopaque, origin_x_: f32, origin_y_: f32, inline_object_: ?*IDWriteInlineObject, is_sideways_: BOOL, is_right_to_left_: BOOL, client_drawing_effect_: ?*IUnknown) HRESULT {
                return @as(*const IDWriteTextRenderer.VTable, @ptrCast(self.vtable)).DrawInlineObject(@as(*const IDWriteTextRenderer, @ptrCast(self)), client_drawing_context_, origin_x_, origin_y_, inline_object_, is_sideways_, is_right_to_left_, client_drawing_effect_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteTextLayout_Value = Guid.initString("53737037-6d14-410b-9bfe-0b182bb70961");
pub const IID_IDWriteTextLayout = &IID_IDWriteTextLayout_Value;
pub const IDWriteTextLayout = extern struct {
    pub const VTable = extern struct {
        base: IDWriteTextFormat.VTable,
        SetMaxWidth: *const fn (
            self: *const IDWriteTextLayout,
            max_width: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxHeight: *const fn (
            self: *const IDWriteTextLayout,
            max_height: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontCollection: *const fn (
            self: *const IDWriteTextLayout,
            font_collection: ?*IDWriteFontCollection,
            text_range: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontFamilyName: *const fn (
            self: *const IDWriteTextLayout,
            font_family_name: ?[*:0]const u16,
            text_range: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontWeight: *const fn (
            self: *const IDWriteTextLayout,
            font_weight: DWRITE_FONT_WEIGHT,
            text_range: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontStyle: *const fn (
            self: *const IDWriteTextLayout,
            font_style: DWRITE_FONT_STYLE,
            text_range: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontStretch: *const fn (
            self: *const IDWriteTextLayout,
            font_stretch: DWRITE_FONT_STRETCH,
            text_range: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontSize: *const fn (
            self: *const IDWriteTextLayout,
            font_size: f32,
            text_range: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUnderline: *const fn (
            self: *const IDWriteTextLayout,
            has_underline: BOOL,
            text_range: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStrikethrough: *const fn (
            self: *const IDWriteTextLayout,
            has_strikethrough: BOOL,
            text_range: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDrawingEffect: *const fn (
            self: *const IDWriteTextLayout,
            drawing_effect: ?*IUnknown,
            text_range: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInlineObject: *const fn (
            self: *const IDWriteTextLayout,
            inline_object: ?*IDWriteInlineObject,
            text_range: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTypography: *const fn (
            self: *const IDWriteTextLayout,
            typography: ?*IDWriteTypography,
            text_range: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLocaleName: *const fn (
            self: *const IDWriteTextLayout,
            locale_name: ?[*:0]const u16,
            text_range: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxWidth: *const fn (
            self: *const IDWriteTextLayout,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        GetMaxHeight: *const fn (
            self: *const IDWriteTextLayout,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        GetFontCollection: *const fn (
            self: *const IDWriteTextLayout,
            current_position: u32,
            font_collection: ?*?*IDWriteFontCollection,
            text_range: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFamilyNameLength: *const fn (
            self: *const IDWriteTextLayout,
            current_position: u32,
            name_length: ?*u32,
            text_range: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFamilyName: *const fn (
            self: *const IDWriteTextLayout,
            current_position: u32,
            font_family_name: [*:0]u16,
            name_size: u32,
            text_range: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontWeight: *const fn (
            self: *const IDWriteTextLayout,
            current_position: u32,
            font_weight: ?*DWRITE_FONT_WEIGHT,
            text_range: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontStyle: *const fn (
            self: *const IDWriteTextLayout,
            current_position: u32,
            font_style: ?*DWRITE_FONT_STYLE,
            text_range: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontStretch: *const fn (
            self: *const IDWriteTextLayout,
            current_position: u32,
            font_stretch: ?*DWRITE_FONT_STRETCH,
            text_range: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontSize: *const fn (
            self: *const IDWriteTextLayout,
            current_position: u32,
            font_size: ?*f32,
            text_range: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUnderline: *const fn (
            self: *const IDWriteTextLayout,
            current_position: u32,
            has_underline: ?*BOOL,
            text_range: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrikethrough: *const fn (
            self: *const IDWriteTextLayout,
            current_position: u32,
            has_strikethrough: ?*BOOL,
            text_range: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDrawingEffect: *const fn (
            self: *const IDWriteTextLayout,
            current_position: u32,
            drawing_effect: ?*?*IUnknown,
            text_range: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInlineObject: *const fn (
            self: *const IDWriteTextLayout,
            current_position: u32,
            inline_object: ?*?*IDWriteInlineObject,
            text_range: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTypography: *const fn (
            self: *const IDWriteTextLayout,
            current_position: u32,
            typography: ?*?*IDWriteTypography,
            text_range: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocaleNameLength: *const fn (
            self: *const IDWriteTextLayout,
            current_position: u32,
            name_length: ?*u32,
            text_range: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocaleName: *const fn (
            self: *const IDWriteTextLayout,
            current_position: u32,
            locale_name: [*:0]u16,
            name_size: u32,
            text_range: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Draw: *const fn (
            self: *const IDWriteTextLayout,
            client_drawing_context: ?*anyopaque,
            renderer: ?*IDWriteTextRenderer,
            origin_x: f32,
            origin_y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLineMetrics: *const fn (
            self: *const IDWriteTextLayout,
            line_metrics: ?[*]DWRITE_LINE_METRICS,
            max_line_count: u32,
            actual_line_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMetrics: *const fn (
            self: *const IDWriteTextLayout,
            text_metrics: ?*DWRITE_TEXT_METRICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOverhangMetrics: *const fn (
            self: *const IDWriteTextLayout,
            overhangs: ?*DWRITE_OVERHANG_METRICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClusterMetrics: *const fn (
            self: *const IDWriteTextLayout,
            cluster_metrics: ?[*]DWRITE_CLUSTER_METRICS,
            max_cluster_count: u32,
            actual_cluster_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DetermineMinWidth: *const fn (
            self: *const IDWriteTextLayout,
            min_width: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTestPoint: *const fn (
            self: *const IDWriteTextLayout,
            point_x: f32,
            point_y: f32,
            is_trailing_hit: ?*BOOL,
            is_inside: ?*BOOL,
            hit_test_metrics: ?*DWRITE_HIT_TEST_METRICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTestTextPosition: *const fn (
            self: *const IDWriteTextLayout,
            text_position: u32,
            is_trailing_hit: BOOL,
            point_x: ?*f32,
            point_y: ?*f32,
            hit_test_metrics: ?*DWRITE_HIT_TEST_METRICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTestTextRange: *const fn (
            self: *const IDWriteTextLayout,
            text_position: u32,
            text_length: u32,
            origin_x: f32,
            origin_y: f32,
            hit_test_metrics: ?[*]DWRITE_HIT_TEST_METRICS,
            max_hit_test_metrics_count: u32,
            actual_hit_test_metrics_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteTextFormat.MethodMixin(T);
            pub inline fn setMaxWidth(self: *const T, max_width_: f32) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).SetMaxWidth(@as(*const IDWriteTextLayout, @ptrCast(self)), max_width_);
            }
            pub inline fn setMaxHeight(self: *const T, max_height_: f32) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).SetMaxHeight(@as(*const IDWriteTextLayout, @ptrCast(self)), max_height_);
            }
            pub inline fn setFontCollection(self: *const T, font_collection_: ?*IDWriteFontCollection, text_range_: DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).SetFontCollection(@as(*const IDWriteTextLayout, @ptrCast(self)), font_collection_, text_range_);
            }
            pub inline fn setFontFamilyName(self: *const T, font_family_name_: ?[*:0]const u16, text_range_: DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).SetFontFamilyName(@as(*const IDWriteTextLayout, @ptrCast(self)), font_family_name_, text_range_);
            }
            pub inline fn setFontWeight(self: *const T, font_weight_: DWRITE_FONT_WEIGHT, text_range_: DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).SetFontWeight(@as(*const IDWriteTextLayout, @ptrCast(self)), font_weight_, text_range_);
            }
            pub inline fn setFontStyle(self: *const T, font_style_: DWRITE_FONT_STYLE, text_range_: DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).SetFontStyle(@as(*const IDWriteTextLayout, @ptrCast(self)), font_style_, text_range_);
            }
            pub inline fn setFontStretch(self: *const T, font_stretch_: DWRITE_FONT_STRETCH, text_range_: DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).SetFontStretch(@as(*const IDWriteTextLayout, @ptrCast(self)), font_stretch_, text_range_);
            }
            pub inline fn setFontSize(self: *const T, font_size_: f32, text_range_: DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).SetFontSize(@as(*const IDWriteTextLayout, @ptrCast(self)), font_size_, text_range_);
            }
            pub inline fn setUnderline(self: *const T, has_underline_: BOOL, text_range_: DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).SetUnderline(@as(*const IDWriteTextLayout, @ptrCast(self)), has_underline_, text_range_);
            }
            pub inline fn setStrikethrough(self: *const T, has_strikethrough_: BOOL, text_range_: DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).SetStrikethrough(@as(*const IDWriteTextLayout, @ptrCast(self)), has_strikethrough_, text_range_);
            }
            pub inline fn setDrawingEffect(self: *const T, drawing_effect_: ?*IUnknown, text_range_: DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).SetDrawingEffect(@as(*const IDWriteTextLayout, @ptrCast(self)), drawing_effect_, text_range_);
            }
            pub inline fn setInlineObject(self: *const T, inline_object_: ?*IDWriteInlineObject, text_range_: DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).SetInlineObject(@as(*const IDWriteTextLayout, @ptrCast(self)), inline_object_, text_range_);
            }
            pub inline fn setTypography(self: *const T, typography_: ?*IDWriteTypography, text_range_: DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).SetTypography(@as(*const IDWriteTextLayout, @ptrCast(self)), typography_, text_range_);
            }
            pub inline fn setLocaleName(self: *const T, locale_name_: ?[*:0]const u16, text_range_: DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).SetLocaleName(@as(*const IDWriteTextLayout, @ptrCast(self)), locale_name_, text_range_);
            }
            pub inline fn getMaxWidth(self: *const T) f32 {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).GetMaxWidth(@as(*const IDWriteTextLayout, @ptrCast(self)));
            }
            pub inline fn getMaxHeight(self: *const T) f32 {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).GetMaxHeight(@as(*const IDWriteTextLayout, @ptrCast(self)));
            }
            pub inline fn getFontCollection(self: *const T, current_position_: u32, font_collection_: ?*?*IDWriteFontCollection, text_range_: ?*DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).GetFontCollection(@as(*const IDWriteTextLayout, @ptrCast(self)), current_position_, font_collection_, text_range_);
            }
            pub inline fn getFontFamilyNameLength(self: *const T, current_position_: u32, name_length_: ?*u32, text_range_: ?*DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).GetFontFamilyNameLength(@as(*const IDWriteTextLayout, @ptrCast(self)), current_position_, name_length_, text_range_);
            }
            pub inline fn getFontFamilyName(self: *const T, current_position_: u32, font_family_name_: [*:0]u16, name_size_: u32, text_range_: ?*DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).GetFontFamilyName(@as(*const IDWriteTextLayout, @ptrCast(self)), current_position_, font_family_name_, name_size_, text_range_);
            }
            pub inline fn getFontWeight(self: *const T, current_position_: u32, font_weight_: ?*DWRITE_FONT_WEIGHT, text_range_: ?*DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).GetFontWeight(@as(*const IDWriteTextLayout, @ptrCast(self)), current_position_, font_weight_, text_range_);
            }
            pub inline fn getFontStyle(self: *const T, current_position_: u32, font_style_: ?*DWRITE_FONT_STYLE, text_range_: ?*DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).GetFontStyle(@as(*const IDWriteTextLayout, @ptrCast(self)), current_position_, font_style_, text_range_);
            }
            pub inline fn getFontStretch(self: *const T, current_position_: u32, font_stretch_: ?*DWRITE_FONT_STRETCH, text_range_: ?*DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).GetFontStretch(@as(*const IDWriteTextLayout, @ptrCast(self)), current_position_, font_stretch_, text_range_);
            }
            pub inline fn getFontSize(self: *const T, current_position_: u32, font_size_: ?*f32, text_range_: ?*DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).GetFontSize(@as(*const IDWriteTextLayout, @ptrCast(self)), current_position_, font_size_, text_range_);
            }
            pub inline fn getUnderline(self: *const T, current_position_: u32, has_underline_: ?*BOOL, text_range_: ?*DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).GetUnderline(@as(*const IDWriteTextLayout, @ptrCast(self)), current_position_, has_underline_, text_range_);
            }
            pub inline fn getStrikethrough(self: *const T, current_position_: u32, has_strikethrough_: ?*BOOL, text_range_: ?*DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).GetStrikethrough(@as(*const IDWriteTextLayout, @ptrCast(self)), current_position_, has_strikethrough_, text_range_);
            }
            pub inline fn getDrawingEffect(self: *const T, current_position_: u32, drawing_effect_: ?*?*IUnknown, text_range_: ?*DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).GetDrawingEffect(@as(*const IDWriteTextLayout, @ptrCast(self)), current_position_, drawing_effect_, text_range_);
            }
            pub inline fn getInlineObject(self: *const T, current_position_: u32, inline_object_: ?*?*IDWriteInlineObject, text_range_: ?*DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).GetInlineObject(@as(*const IDWriteTextLayout, @ptrCast(self)), current_position_, inline_object_, text_range_);
            }
            pub inline fn getTypography(self: *const T, current_position_: u32, typography_: ?*?*IDWriteTypography, text_range_: ?*DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).GetTypography(@as(*const IDWriteTextLayout, @ptrCast(self)), current_position_, typography_, text_range_);
            }
            pub inline fn getLocaleNameLength(self: *const T, current_position_: u32, name_length_: ?*u32, text_range_: ?*DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).GetLocaleNameLength(@as(*const IDWriteTextLayout, @ptrCast(self)), current_position_, name_length_, text_range_);
            }
            pub inline fn getLocaleName(self: *const T, current_position_: u32, locale_name_: [*:0]u16, name_size_: u32, text_range_: ?*DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).GetLocaleName(@as(*const IDWriteTextLayout, @ptrCast(self)), current_position_, locale_name_, name_size_, text_range_);
            }
            pub inline fn draw(self: *const T, client_drawing_context_: ?*anyopaque, renderer_: ?*IDWriteTextRenderer, origin_x_: f32, origin_y_: f32) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).Draw(@as(*const IDWriteTextLayout, @ptrCast(self)), client_drawing_context_, renderer_, origin_x_, origin_y_);
            }
            pub inline fn getLineMetrics(self: *const T, line_metrics_: ?[*]DWRITE_LINE_METRICS, max_line_count_: u32, actual_line_count_: ?*u32) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).GetLineMetrics(@as(*const IDWriteTextLayout, @ptrCast(self)), line_metrics_, max_line_count_, actual_line_count_);
            }
            pub inline fn getMetrics(self: *const T, text_metrics_: ?*DWRITE_TEXT_METRICS) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).GetMetrics(@as(*const IDWriteTextLayout, @ptrCast(self)), text_metrics_);
            }
            pub inline fn getOverhangMetrics(self: *const T, overhangs_: ?*DWRITE_OVERHANG_METRICS) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).GetOverhangMetrics(@as(*const IDWriteTextLayout, @ptrCast(self)), overhangs_);
            }
            pub inline fn getClusterMetrics(self: *const T, cluster_metrics_: ?[*]DWRITE_CLUSTER_METRICS, max_cluster_count_: u32, actual_cluster_count_: ?*u32) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).GetClusterMetrics(@as(*const IDWriteTextLayout, @ptrCast(self)), cluster_metrics_, max_cluster_count_, actual_cluster_count_);
            }
            pub inline fn determineMinWidth(self: *const T, min_width_: ?*f32) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).DetermineMinWidth(@as(*const IDWriteTextLayout, @ptrCast(self)), min_width_);
            }
            pub inline fn hitTestPoint(self: *const T, point_x_: f32, point_y_: f32, is_trailing_hit_: ?*BOOL, is_inside_: ?*BOOL, hit_test_metrics_: ?*DWRITE_HIT_TEST_METRICS) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).HitTestPoint(@as(*const IDWriteTextLayout, @ptrCast(self)), point_x_, point_y_, is_trailing_hit_, is_inside_, hit_test_metrics_);
            }
            pub inline fn hitTestTextPosition(self: *const T, text_position_: u32, is_trailing_hit_: BOOL, point_x_: ?*f32, point_y_: ?*f32, hit_test_metrics_: ?*DWRITE_HIT_TEST_METRICS) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).HitTestTextPosition(@as(*const IDWriteTextLayout, @ptrCast(self)), text_position_, is_trailing_hit_, point_x_, point_y_, hit_test_metrics_);
            }
            pub inline fn hitTestTextRange(self: *const T, text_position_: u32, text_length_: u32, origin_x_: f32, origin_y_: f32, hit_test_metrics_: ?[*]DWRITE_HIT_TEST_METRICS, max_hit_test_metrics_count_: u32, actual_hit_test_metrics_count_: ?*u32) HRESULT {
                return @as(*const IDWriteTextLayout.VTable, @ptrCast(self.vtable)).HitTestTextRange(@as(*const IDWriteTextLayout, @ptrCast(self)), text_position_, text_length_, origin_x_, origin_y_, hit_test_metrics_, max_hit_test_metrics_count_, actual_hit_test_metrics_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteBitmapRenderTarget_Value = Guid.initString("5e5a32a3-8dff-4773-9ff6-0696eab77267");
pub const IID_IDWriteBitmapRenderTarget = &IID_IDWriteBitmapRenderTarget_Value;
pub const IDWriteBitmapRenderTarget = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DrawGlyphRun: *const fn (
            self: *const IDWriteBitmapRenderTarget,
            baseline_origin_x: f32,
            baseline_origin_y: f32,
            measuring_mode: DWRITE_MEASURING_MODE,
            glyph_run: ?*const DWRITE_GLYPH_RUN,
            rendering_params: ?*IDWriteRenderingParams,
            text_color: u32,
            black_box_rect: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMemoryDC: *const fn (
            self: *const IDWriteBitmapRenderTarget,
        ) callconv(@import("std").os.windows.WINAPI) ?HDC,
        GetPixelsPerDip: *const fn (
            self: *const IDWriteBitmapRenderTarget,
        ) callconv(@import("std").os.windows.WINAPI) f32,
        SetPixelsPerDip: *const fn (
            self: *const IDWriteBitmapRenderTarget,
            pixels_per_dip: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentTransform: *const fn (
            self: *const IDWriteBitmapRenderTarget,
            transform: ?*DWRITE_MATRIX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCurrentTransform: *const fn (
            self: *const IDWriteBitmapRenderTarget,
            transform: ?*const DWRITE_MATRIX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSize: *const fn (
            self: *const IDWriteBitmapRenderTarget,
            size: ?*SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resize: *const fn (
            self: *const IDWriteBitmapRenderTarget,
            width: u32,
            height: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn drawGlyphRun(self: *const T, baseline_origin_x_: f32, baseline_origin_y_: f32, measuring_mode_: DWRITE_MEASURING_MODE, glyph_run_: ?*const DWRITE_GLYPH_RUN, rendering_params_: ?*IDWriteRenderingParams, text_color_: u32, black_box_rect_: ?*RECT) HRESULT {
                return @as(*const IDWriteBitmapRenderTarget.VTable, @ptrCast(self.vtable)).DrawGlyphRun(@as(*const IDWriteBitmapRenderTarget, @ptrCast(self)), baseline_origin_x_, baseline_origin_y_, measuring_mode_, glyph_run_, rendering_params_, text_color_, black_box_rect_);
            }
            pub inline fn getMemoryDC(self: *const T) ?HDC {
                return @as(*const IDWriteBitmapRenderTarget.VTable, @ptrCast(self.vtable)).GetMemoryDC(@as(*const IDWriteBitmapRenderTarget, @ptrCast(self)));
            }
            pub inline fn getPixelsPerDip(self: *const T) f32 {
                return @as(*const IDWriteBitmapRenderTarget.VTable, @ptrCast(self.vtable)).GetPixelsPerDip(@as(*const IDWriteBitmapRenderTarget, @ptrCast(self)));
            }
            pub inline fn setPixelsPerDip(self: *const T, pixels_per_dip_: f32) HRESULT {
                return @as(*const IDWriteBitmapRenderTarget.VTable, @ptrCast(self.vtable)).SetPixelsPerDip(@as(*const IDWriteBitmapRenderTarget, @ptrCast(self)), pixels_per_dip_);
            }
            pub inline fn getCurrentTransform(self: *const T, transform_: ?*DWRITE_MATRIX) HRESULT {
                return @as(*const IDWriteBitmapRenderTarget.VTable, @ptrCast(self.vtable)).GetCurrentTransform(@as(*const IDWriteBitmapRenderTarget, @ptrCast(self)), transform_);
            }
            pub inline fn setCurrentTransform(self: *const T, transform_: ?*const DWRITE_MATRIX) HRESULT {
                return @as(*const IDWriteBitmapRenderTarget.VTable, @ptrCast(self.vtable)).SetCurrentTransform(@as(*const IDWriteBitmapRenderTarget, @ptrCast(self)), transform_);
            }
            pub inline fn getSize(self: *const T, size_: ?*SIZE) HRESULT {
                return @as(*const IDWriteBitmapRenderTarget.VTable, @ptrCast(self.vtable)).GetSize(@as(*const IDWriteBitmapRenderTarget, @ptrCast(self)), size_);
            }
            pub inline fn resize(self: *const T, width_: u32, height_: u32) HRESULT {
                return @as(*const IDWriteBitmapRenderTarget.VTable, @ptrCast(self.vtable)).Resize(@as(*const IDWriteBitmapRenderTarget, @ptrCast(self)), width_, height_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteGdiInterop_Value = Guid.initString("1edd9491-9853-4299-898f-6432983b6f3a");
pub const IID_IDWriteGdiInterop = &IID_IDWriteGdiInterop_Value;
pub const IDWriteGdiInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateFontFromLOGFONT: *const fn (
            self: *const IDWriteGdiInterop,
            log_font: ?*const LOGFONTW,
            font: ?*?*IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertFontToLOGFONT: *const fn (
            self: *const IDWriteGdiInterop,
            font: ?*IDWriteFont,
            log_font: ?*LOGFONTW,
            is_system_font: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertFontFaceToLOGFONT: *const fn (
            self: *const IDWriteGdiInterop,
            font: ?*IDWriteFontFace,
            log_font: ?*LOGFONTW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFaceFromHdc: *const fn (
            self: *const IDWriteGdiInterop,
            hdc: ?HDC,
            font_face: ?*?*IDWriteFontFace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBitmapRenderTarget: *const fn (
            self: *const IDWriteGdiInterop,
            hdc: ?HDC,
            width: u32,
            height: u32,
            render_target: ?*?*IDWriteBitmapRenderTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createFontFromLOGFONT(self: *const T, log_font_: ?*const LOGFONTW, font_: ?*?*IDWriteFont) HRESULT {
                return @as(*const IDWriteGdiInterop.VTable, @ptrCast(self.vtable)).CreateFontFromLOGFONT(@as(*const IDWriteGdiInterop, @ptrCast(self)), log_font_, font_);
            }
            pub inline fn convertFontToLOGFONT(self: *const T, font_: ?*IDWriteFont, log_font_: ?*LOGFONTW, is_system_font_: ?*BOOL) HRESULT {
                return @as(*const IDWriteGdiInterop.VTable, @ptrCast(self.vtable)).ConvertFontToLOGFONT(@as(*const IDWriteGdiInterop, @ptrCast(self)), font_, log_font_, is_system_font_);
            }
            pub inline fn convertFontFaceToLOGFONT(self: *const T, font_: ?*IDWriteFontFace, log_font_: ?*LOGFONTW) HRESULT {
                return @as(*const IDWriteGdiInterop.VTable, @ptrCast(self.vtable)).ConvertFontFaceToLOGFONT(@as(*const IDWriteGdiInterop, @ptrCast(self)), font_, log_font_);
            }
            pub inline fn createFontFaceFromHdc(self: *const T, hdc_: ?HDC, font_face_: ?*?*IDWriteFontFace) HRESULT {
                return @as(*const IDWriteGdiInterop.VTable, @ptrCast(self.vtable)).CreateFontFaceFromHdc(@as(*const IDWriteGdiInterop, @ptrCast(self)), hdc_, font_face_);
            }
            pub inline fn createBitmapRenderTarget(self: *const T, hdc_: ?HDC, width_: u32, height_: u32, render_target_: ?*?*IDWriteBitmapRenderTarget) HRESULT {
                return @as(*const IDWriteGdiInterop.VTable, @ptrCast(self.vtable)).CreateBitmapRenderTarget(@as(*const IDWriteGdiInterop, @ptrCast(self)), hdc_, width_, height_, render_target_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DWRITE_TEXTURE_TYPE = enum(i32) {
    ALIASED_1x1 = 0,
    CLEARTYPE_3x1 = 1,
};
pub const DWRITE_TEXTURE_ALIASED_1x1 = DWRITE_TEXTURE_TYPE.ALIASED_1x1;
pub const DWRITE_TEXTURE_CLEARTYPE_3x1 = DWRITE_TEXTURE_TYPE.CLEARTYPE_3x1;

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteGlyphRunAnalysis_Value = Guid.initString("7d97dbf7-e085-42d4-81e3-6a883bded118");
pub const IID_IDWriteGlyphRunAnalysis = &IID_IDWriteGlyphRunAnalysis_Value;
pub const IDWriteGlyphRunAnalysis = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAlphaTextureBounds: *const fn (
            self: *const IDWriteGlyphRunAnalysis,
            texture_type: DWRITE_TEXTURE_TYPE,
            texture_bounds: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAlphaTexture: *const fn (
            self: *const IDWriteGlyphRunAnalysis,
            texture_type: DWRITE_TEXTURE_TYPE,
            texture_bounds: ?*const RECT,
            // TODO: what to do with BytesParamIndex 3?
            alpha_values: ?*u8,
            buffer_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAlphaBlendParams: *const fn (
            self: *const IDWriteGlyphRunAnalysis,
            rendering_params: ?*IDWriteRenderingParams,
            blend_gamma: ?*f32,
            blend_enhanced_contrast: ?*f32,
            blend_clear_type_level: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAlphaTextureBounds(self: *const T, texture_type_: DWRITE_TEXTURE_TYPE, texture_bounds_: ?*RECT) HRESULT {
                return @as(*const IDWriteGlyphRunAnalysis.VTable, @ptrCast(self.vtable)).GetAlphaTextureBounds(@as(*const IDWriteGlyphRunAnalysis, @ptrCast(self)), texture_type_, texture_bounds_);
            }
            pub inline fn createAlphaTexture(self: *const T, texture_type_: DWRITE_TEXTURE_TYPE, texture_bounds_: ?*const RECT, alpha_values_: ?*u8, buffer_size_: u32) HRESULT {
                return @as(*const IDWriteGlyphRunAnalysis.VTable, @ptrCast(self.vtable)).CreateAlphaTexture(@as(*const IDWriteGlyphRunAnalysis, @ptrCast(self)), texture_type_, texture_bounds_, alpha_values_, buffer_size_);
            }
            pub inline fn getAlphaBlendParams(self: *const T, rendering_params_: ?*IDWriteRenderingParams, blend_gamma_: ?*f32, blend_enhanced_contrast_: ?*f32, blend_clear_type_level_: ?*f32) HRESULT {
                return @as(*const IDWriteGlyphRunAnalysis.VTable, @ptrCast(self.vtable)).GetAlphaBlendParams(@as(*const IDWriteGlyphRunAnalysis, @ptrCast(self)), rendering_params_, blend_gamma_, blend_enhanced_contrast_, blend_clear_type_level_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFactory_Value = Guid.initString("b859ee5a-d838-4b5b-a2e8-1adc7d93db48");
pub const IID_IDWriteFactory = &IID_IDWriteFactory_Value;
pub const IDWriteFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSystemFontCollection: *const fn (
            self: *const IDWriteFactory,
            font_collection: ?*?*IDWriteFontCollection,
            check_for_updates: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCustomFontCollection: *const fn (
            self: *const IDWriteFactory,
            collection_loader: ?*IDWriteFontCollectionLoader,
            // TODO: what to do with BytesParamIndex 2?
            collection_key: ?*const anyopaque,
            collection_key_size: u32,
            font_collection: ?*?*IDWriteFontCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterFontCollectionLoader: *const fn (
            self: *const IDWriteFactory,
            font_collection_loader: ?*IDWriteFontCollectionLoader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterFontCollectionLoader: *const fn (
            self: *const IDWriteFactory,
            font_collection_loader: ?*IDWriteFontCollectionLoader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFileReference: *const fn (
            self: *const IDWriteFactory,
            file_path: ?[*:0]const u16,
            last_write_time: ?*const FILETIME,
            font_file: ?*?*IDWriteFontFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCustomFontFileReference: *const fn (
            self: *const IDWriteFactory,
            // TODO: what to do with BytesParamIndex 1?
            font_file_reference_key: ?*const anyopaque,
            font_file_reference_key_size: u32,
            font_file_loader: ?*IDWriteFontFileLoader,
            font_file: ?*?*IDWriteFontFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFace: *const fn (
            self: *const IDWriteFactory,
            font_face_type: DWRITE_FONT_FACE_TYPE,
            number_of_files: u32,
            font_files: [*]?*IDWriteFontFile,
            face_index: u32,
            font_face_simulation_flags: DWRITE_FONT_SIMULATIONS,
            font_face: ?*?*IDWriteFontFace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRenderingParams: *const fn (
            self: *const IDWriteFactory,
            rendering_params: ?*?*IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMonitorRenderingParams: *const fn (
            self: *const IDWriteFactory,
            monitor: ?HMONITOR,
            rendering_params: ?*?*IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCustomRenderingParams: *const fn (
            self: *const IDWriteFactory,
            gamma: f32,
            enhanced_contrast: f32,
            clear_type_level: f32,
            pixel_geometry: DWRITE_PIXEL_GEOMETRY,
            rendering_mode: DWRITE_RENDERING_MODE,
            rendering_params: ?*?*IDWriteRenderingParams,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterFontFileLoader: *const fn (
            self: *const IDWriteFactory,
            font_file_loader: ?*IDWriteFontFileLoader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterFontFileLoader: *const fn (
            self: *const IDWriteFactory,
            font_file_loader: ?*IDWriteFontFileLoader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTextFormat: *const fn (
            self: *const IDWriteFactory,
            font_family_name: ?[*:0]const u16,
            font_collection: ?*IDWriteFontCollection,
            font_weight: DWRITE_FONT_WEIGHT,
            font_style: DWRITE_FONT_STYLE,
            font_stretch: DWRITE_FONT_STRETCH,
            font_size: f32,
            locale_name: ?[*:0]const u16,
            text_format: ?*?*IDWriteTextFormat,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTypography: *const fn (
            self: *const IDWriteFactory,
            typography: ?*?*IDWriteTypography,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGdiInterop: *const fn (
            self: *const IDWriteFactory,
            gdi_interop: ?*?*IDWriteGdiInterop,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTextLayout: *const fn (
            self: *const IDWriteFactory,
            string: [*:0]const u16,
            string_length: u32,
            text_format: ?*IDWriteTextFormat,
            max_width: f32,
            max_height: f32,
            text_layout: ?*?*IDWriteTextLayout,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGdiCompatibleTextLayout: *const fn (
            self: *const IDWriteFactory,
            string: [*:0]const u16,
            string_length: u32,
            text_format: ?*IDWriteTextFormat,
            layout_width: f32,
            layout_height: f32,
            pixels_per_dip: f32,
            transform: ?*const DWRITE_MATRIX,
            use_gdi_natural: BOOL,
            text_layout: ?*?*IDWriteTextLayout,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEllipsisTrimmingSign: *const fn (
            self: *const IDWriteFactory,
            text_format: ?*IDWriteTextFormat,
            trimming_sign: ?*?*IDWriteInlineObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTextAnalyzer: *const fn (
            self: *const IDWriteFactory,
            text_analyzer: ?*?*IDWriteTextAnalyzer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateNumberSubstitution: *const fn (
            self: *const IDWriteFactory,
            substitution_method: DWRITE_NUMBER_SUBSTITUTION_METHOD,
            locale_name: ?[*:0]const u16,
            ignore_user_override: BOOL,
            number_substitution: ?*?*IDWriteNumberSubstitution,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGlyphRunAnalysis: *const fn (
            self: *const IDWriteFactory,
            glyph_run: ?*const DWRITE_GLYPH_RUN,
            pixels_per_dip: f32,
            transform: ?*const DWRITE_MATRIX,
            rendering_mode: DWRITE_RENDERING_MODE,
            measuring_mode: DWRITE_MEASURING_MODE,
            baseline_origin_x: f32,
            baseline_origin_y: f32,
            glyph_run_analysis: ?*?*IDWriteGlyphRunAnalysis,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSystemFontCollection(self: *const T, font_collection_: ?*?*IDWriteFontCollection, check_for_updates_: BOOL) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).GetSystemFontCollection(@as(*const IDWriteFactory, @ptrCast(self)), font_collection_, check_for_updates_);
            }
            pub inline fn createCustomFontCollection(self: *const T, collection_loader_: ?*IDWriteFontCollectionLoader, collection_key_: ?*const anyopaque, collection_key_size_: u32, font_collection_: ?*?*IDWriteFontCollection) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).CreateCustomFontCollection(@as(*const IDWriteFactory, @ptrCast(self)), collection_loader_, collection_key_, collection_key_size_, font_collection_);
            }
            pub inline fn registerFontCollectionLoader(self: *const T, font_collection_loader_: ?*IDWriteFontCollectionLoader) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).RegisterFontCollectionLoader(@as(*const IDWriteFactory, @ptrCast(self)), font_collection_loader_);
            }
            pub inline fn unregisterFontCollectionLoader(self: *const T, font_collection_loader_: ?*IDWriteFontCollectionLoader) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).UnregisterFontCollectionLoader(@as(*const IDWriteFactory, @ptrCast(self)), font_collection_loader_);
            }
            pub inline fn createFontFileReference(self: *const T, file_path_: ?[*:0]const u16, last_write_time_: ?*const FILETIME, font_file_: ?*?*IDWriteFontFile) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).CreateFontFileReference(@as(*const IDWriteFactory, @ptrCast(self)), file_path_, last_write_time_, font_file_);
            }
            pub inline fn createCustomFontFileReference(self: *const T, font_file_reference_key_: ?*const anyopaque, font_file_reference_key_size_: u32, font_file_loader_: ?*IDWriteFontFileLoader, font_file_: ?*?*IDWriteFontFile) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).CreateCustomFontFileReference(@as(*const IDWriteFactory, @ptrCast(self)), font_file_reference_key_, font_file_reference_key_size_, font_file_loader_, font_file_);
            }
            pub inline fn createFontFace(self: *const T, font_face_type_: DWRITE_FONT_FACE_TYPE, number_of_files_: u32, font_files_: [*]?*IDWriteFontFile, face_index_: u32, font_face_simulation_flags_: DWRITE_FONT_SIMULATIONS, font_face_: ?*?*IDWriteFontFace) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).CreateFontFace(@as(*const IDWriteFactory, @ptrCast(self)), font_face_type_, number_of_files_, font_files_, face_index_, font_face_simulation_flags_, font_face_);
            }
            pub inline fn createRenderingParams(self: *const T, rendering_params_: ?*?*IDWriteRenderingParams) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).CreateRenderingParams(@as(*const IDWriteFactory, @ptrCast(self)), rendering_params_);
            }
            pub inline fn createMonitorRenderingParams(self: *const T, monitor_: ?HMONITOR, rendering_params_: ?*?*IDWriteRenderingParams) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).CreateMonitorRenderingParams(@as(*const IDWriteFactory, @ptrCast(self)), monitor_, rendering_params_);
            }
            pub inline fn createCustomRenderingParams(self: *const T, gamma_: f32, enhanced_contrast_: f32, clear_type_level_: f32, pixel_geometry_: DWRITE_PIXEL_GEOMETRY, rendering_mode_: DWRITE_RENDERING_MODE, rendering_params_: ?*?*IDWriteRenderingParams) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).CreateCustomRenderingParams(@as(*const IDWriteFactory, @ptrCast(self)), gamma_, enhanced_contrast_, clear_type_level_, pixel_geometry_, rendering_mode_, rendering_params_);
            }
            pub inline fn registerFontFileLoader(self: *const T, font_file_loader_: ?*IDWriteFontFileLoader) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).RegisterFontFileLoader(@as(*const IDWriteFactory, @ptrCast(self)), font_file_loader_);
            }
            pub inline fn unregisterFontFileLoader(self: *const T, font_file_loader_: ?*IDWriteFontFileLoader) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).UnregisterFontFileLoader(@as(*const IDWriteFactory, @ptrCast(self)), font_file_loader_);
            }
            pub inline fn createTextFormat(self: *const T, font_family_name_: ?[*:0]const u16, font_collection_: ?*IDWriteFontCollection, font_weight_: DWRITE_FONT_WEIGHT, font_style_: DWRITE_FONT_STYLE, font_stretch_: DWRITE_FONT_STRETCH, font_size_: f32, locale_name_: ?[*:0]const u16, text_format_: ?*?*IDWriteTextFormat) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).CreateTextFormat(@as(*const IDWriteFactory, @ptrCast(self)), font_family_name_, font_collection_, font_weight_, font_style_, font_stretch_, font_size_, locale_name_, text_format_);
            }
            pub inline fn createTypography(self: *const T, typography_: ?*?*IDWriteTypography) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).CreateTypography(@as(*const IDWriteFactory, @ptrCast(self)), typography_);
            }
            pub inline fn getGdiInterop(self: *const T, gdi_interop_: ?*?*IDWriteGdiInterop) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).GetGdiInterop(@as(*const IDWriteFactory, @ptrCast(self)), gdi_interop_);
            }
            pub inline fn createTextLayout(self: *const T, string_: [*:0]const u16, string_length_: u32, text_format_: ?*IDWriteTextFormat, max_width_: f32, max_height_: f32, text_layout_: ?*?*IDWriteTextLayout) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).CreateTextLayout(@as(*const IDWriteFactory, @ptrCast(self)), string_, string_length_, text_format_, max_width_, max_height_, text_layout_);
            }
            pub inline fn createGdiCompatibleTextLayout(self: *const T, string_: [*:0]const u16, string_length_: u32, text_format_: ?*IDWriteTextFormat, layout_width_: f32, layout_height_: f32, pixels_per_dip_: f32, transform_: ?*const DWRITE_MATRIX, use_gdi_natural_: BOOL, text_layout_: ?*?*IDWriteTextLayout) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).CreateGdiCompatibleTextLayout(@as(*const IDWriteFactory, @ptrCast(self)), string_, string_length_, text_format_, layout_width_, layout_height_, pixels_per_dip_, transform_, use_gdi_natural_, text_layout_);
            }
            pub inline fn createEllipsisTrimmingSign(self: *const T, text_format_: ?*IDWriteTextFormat, trimming_sign_: ?*?*IDWriteInlineObject) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).CreateEllipsisTrimmingSign(@as(*const IDWriteFactory, @ptrCast(self)), text_format_, trimming_sign_);
            }
            pub inline fn createTextAnalyzer(self: *const T, text_analyzer_: ?*?*IDWriteTextAnalyzer) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).CreateTextAnalyzer(@as(*const IDWriteFactory, @ptrCast(self)), text_analyzer_);
            }
            pub inline fn createNumberSubstitution(self: *const T, substitution_method_: DWRITE_NUMBER_SUBSTITUTION_METHOD, locale_name_: ?[*:0]const u16, ignore_user_override_: BOOL, number_substitution_: ?*?*IDWriteNumberSubstitution) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).CreateNumberSubstitution(@as(*const IDWriteFactory, @ptrCast(self)), substitution_method_, locale_name_, ignore_user_override_, number_substitution_);
            }
            pub inline fn createGlyphRunAnalysis(self: *const T, glyph_run_: ?*const DWRITE_GLYPH_RUN, pixels_per_dip_: f32, transform_: ?*const DWRITE_MATRIX, rendering_mode_: DWRITE_RENDERING_MODE, measuring_mode_: DWRITE_MEASURING_MODE, baseline_origin_x_: f32, baseline_origin_y_: f32, glyph_run_analysis_: ?*?*IDWriteGlyphRunAnalysis) HRESULT {
                return @as(*const IDWriteFactory.VTable, @ptrCast(self.vtable)).CreateGlyphRunAnalysis(@as(*const IDWriteFactory, @ptrCast(self)), glyph_run_, pixels_per_dip_, transform_, rendering_mode_, measuring_mode_, baseline_origin_x_, baseline_origin_y_, glyph_run_analysis_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DWRITE_PANOSE_FAMILY = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    TEXT_DISPLAY = 2,
    SCRIPT = 3,
    DECORATIVE = 4,
    SYMBOL = 5,
    // PICTORIAL = 5, this enum value conflicts with SYMBOL
};
pub const DWRITE_PANOSE_FAMILY_ANY = DWRITE_PANOSE_FAMILY.ANY;
pub const DWRITE_PANOSE_FAMILY_NO_FIT = DWRITE_PANOSE_FAMILY.NO_FIT;
pub const DWRITE_PANOSE_FAMILY_TEXT_DISPLAY = DWRITE_PANOSE_FAMILY.TEXT_DISPLAY;
pub const DWRITE_PANOSE_FAMILY_SCRIPT = DWRITE_PANOSE_FAMILY.SCRIPT;
pub const DWRITE_PANOSE_FAMILY_DECORATIVE = DWRITE_PANOSE_FAMILY.DECORATIVE;
pub const DWRITE_PANOSE_FAMILY_SYMBOL = DWRITE_PANOSE_FAMILY.SYMBOL;
pub const DWRITE_PANOSE_FAMILY_PICTORIAL = DWRITE_PANOSE_FAMILY.SYMBOL;

pub const DWRITE_PANOSE_SERIF_STYLE = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    COVE = 2,
    OBTUSE_COVE = 3,
    SQUARE_COVE = 4,
    OBTUSE_SQUARE_COVE = 5,
    SQUARE = 6,
    THIN = 7,
    OVAL = 8,
    EXAGGERATED = 9,
    TRIANGLE = 10,
    NORMAL_SANS = 11,
    OBTUSE_SANS = 12,
    PERPENDICULAR_SANS = 13,
    FLARED = 14,
    ROUNDED = 15,
    SCRIPT = 16,
    // PERP_SANS = 13, this enum value conflicts with PERPENDICULAR_SANS
    // BONE = 8, this enum value conflicts with OVAL
};
pub const DWRITE_PANOSE_SERIF_STYLE_ANY = DWRITE_PANOSE_SERIF_STYLE.ANY;
pub const DWRITE_PANOSE_SERIF_STYLE_NO_FIT = DWRITE_PANOSE_SERIF_STYLE.NO_FIT;
pub const DWRITE_PANOSE_SERIF_STYLE_COVE = DWRITE_PANOSE_SERIF_STYLE.COVE;
pub const DWRITE_PANOSE_SERIF_STYLE_OBTUSE_COVE = DWRITE_PANOSE_SERIF_STYLE.OBTUSE_COVE;
pub const DWRITE_PANOSE_SERIF_STYLE_SQUARE_COVE = DWRITE_PANOSE_SERIF_STYLE.SQUARE_COVE;
pub const DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SQUARE_COVE = DWRITE_PANOSE_SERIF_STYLE.OBTUSE_SQUARE_COVE;
pub const DWRITE_PANOSE_SERIF_STYLE_SQUARE = DWRITE_PANOSE_SERIF_STYLE.SQUARE;
pub const DWRITE_PANOSE_SERIF_STYLE_THIN = DWRITE_PANOSE_SERIF_STYLE.THIN;
pub const DWRITE_PANOSE_SERIF_STYLE_OVAL = DWRITE_PANOSE_SERIF_STYLE.OVAL;
pub const DWRITE_PANOSE_SERIF_STYLE_EXAGGERATED = DWRITE_PANOSE_SERIF_STYLE.EXAGGERATED;
pub const DWRITE_PANOSE_SERIF_STYLE_TRIANGLE = DWRITE_PANOSE_SERIF_STYLE.TRIANGLE;
pub const DWRITE_PANOSE_SERIF_STYLE_NORMAL_SANS = DWRITE_PANOSE_SERIF_STYLE.NORMAL_SANS;
pub const DWRITE_PANOSE_SERIF_STYLE_OBTUSE_SANS = DWRITE_PANOSE_SERIF_STYLE.OBTUSE_SANS;
pub const DWRITE_PANOSE_SERIF_STYLE_PERPENDICULAR_SANS = DWRITE_PANOSE_SERIF_STYLE.PERPENDICULAR_SANS;
pub const DWRITE_PANOSE_SERIF_STYLE_FLARED = DWRITE_PANOSE_SERIF_STYLE.FLARED;
pub const DWRITE_PANOSE_SERIF_STYLE_ROUNDED = DWRITE_PANOSE_SERIF_STYLE.ROUNDED;
pub const DWRITE_PANOSE_SERIF_STYLE_SCRIPT = DWRITE_PANOSE_SERIF_STYLE.SCRIPT;
pub const DWRITE_PANOSE_SERIF_STYLE_PERP_SANS = DWRITE_PANOSE_SERIF_STYLE.PERPENDICULAR_SANS;
pub const DWRITE_PANOSE_SERIF_STYLE_BONE = DWRITE_PANOSE_SERIF_STYLE.OVAL;

pub const DWRITE_PANOSE_WEIGHT = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    VERY_LIGHT = 2,
    LIGHT = 3,
    THIN = 4,
    BOOK = 5,
    MEDIUM = 6,
    DEMI = 7,
    BOLD = 8,
    HEAVY = 9,
    BLACK = 10,
    EXTRA_BLACK = 11,
    // NORD = 11, this enum value conflicts with EXTRA_BLACK
};
pub const DWRITE_PANOSE_WEIGHT_ANY = DWRITE_PANOSE_WEIGHT.ANY;
pub const DWRITE_PANOSE_WEIGHT_NO_FIT = DWRITE_PANOSE_WEIGHT.NO_FIT;
pub const DWRITE_PANOSE_WEIGHT_VERY_LIGHT = DWRITE_PANOSE_WEIGHT.VERY_LIGHT;
pub const DWRITE_PANOSE_WEIGHT_LIGHT = DWRITE_PANOSE_WEIGHT.LIGHT;
pub const DWRITE_PANOSE_WEIGHT_THIN = DWRITE_PANOSE_WEIGHT.THIN;
pub const DWRITE_PANOSE_WEIGHT_BOOK = DWRITE_PANOSE_WEIGHT.BOOK;
pub const DWRITE_PANOSE_WEIGHT_MEDIUM = DWRITE_PANOSE_WEIGHT.MEDIUM;
pub const DWRITE_PANOSE_WEIGHT_DEMI = DWRITE_PANOSE_WEIGHT.DEMI;
pub const DWRITE_PANOSE_WEIGHT_BOLD = DWRITE_PANOSE_WEIGHT.BOLD;
pub const DWRITE_PANOSE_WEIGHT_HEAVY = DWRITE_PANOSE_WEIGHT.HEAVY;
pub const DWRITE_PANOSE_WEIGHT_BLACK = DWRITE_PANOSE_WEIGHT.BLACK;
pub const DWRITE_PANOSE_WEIGHT_EXTRA_BLACK = DWRITE_PANOSE_WEIGHT.EXTRA_BLACK;
pub const DWRITE_PANOSE_WEIGHT_NORD = DWRITE_PANOSE_WEIGHT.EXTRA_BLACK;

pub const DWRITE_PANOSE_PROPORTION = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    OLD_STYLE = 2,
    MODERN = 3,
    EVEN_WIDTH = 4,
    EXPANDED = 5,
    CONDENSED = 6,
    VERY_EXPANDED = 7,
    VERY_CONDENSED = 8,
    MONOSPACED = 9,
};
pub const DWRITE_PANOSE_PROPORTION_ANY = DWRITE_PANOSE_PROPORTION.ANY;
pub const DWRITE_PANOSE_PROPORTION_NO_FIT = DWRITE_PANOSE_PROPORTION.NO_FIT;
pub const DWRITE_PANOSE_PROPORTION_OLD_STYLE = DWRITE_PANOSE_PROPORTION.OLD_STYLE;
pub const DWRITE_PANOSE_PROPORTION_MODERN = DWRITE_PANOSE_PROPORTION.MODERN;
pub const DWRITE_PANOSE_PROPORTION_EVEN_WIDTH = DWRITE_PANOSE_PROPORTION.EVEN_WIDTH;
pub const DWRITE_PANOSE_PROPORTION_EXPANDED = DWRITE_PANOSE_PROPORTION.EXPANDED;
pub const DWRITE_PANOSE_PROPORTION_CONDENSED = DWRITE_PANOSE_PROPORTION.CONDENSED;
pub const DWRITE_PANOSE_PROPORTION_VERY_EXPANDED = DWRITE_PANOSE_PROPORTION.VERY_EXPANDED;
pub const DWRITE_PANOSE_PROPORTION_VERY_CONDENSED = DWRITE_PANOSE_PROPORTION.VERY_CONDENSED;
pub const DWRITE_PANOSE_PROPORTION_MONOSPACED = DWRITE_PANOSE_PROPORTION.MONOSPACED;

pub const DWRITE_PANOSE_CONTRAST = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    NONE = 2,
    VERY_LOW = 3,
    LOW = 4,
    MEDIUM_LOW = 5,
    MEDIUM = 6,
    MEDIUM_HIGH = 7,
    HIGH = 8,
    VERY_HIGH = 9,
    HORIZONTAL_LOW = 10,
    HORIZONTAL_MEDIUM = 11,
    HORIZONTAL_HIGH = 12,
    BROKEN = 13,
};
pub const DWRITE_PANOSE_CONTRAST_ANY = DWRITE_PANOSE_CONTRAST.ANY;
pub const DWRITE_PANOSE_CONTRAST_NO_FIT = DWRITE_PANOSE_CONTRAST.NO_FIT;
pub const DWRITE_PANOSE_CONTRAST_NONE = DWRITE_PANOSE_CONTRAST.NONE;
pub const DWRITE_PANOSE_CONTRAST_VERY_LOW = DWRITE_PANOSE_CONTRAST.VERY_LOW;
pub const DWRITE_PANOSE_CONTRAST_LOW = DWRITE_PANOSE_CONTRAST.LOW;
pub const DWRITE_PANOSE_CONTRAST_MEDIUM_LOW = DWRITE_PANOSE_CONTRAST.MEDIUM_LOW;
pub const DWRITE_PANOSE_CONTRAST_MEDIUM = DWRITE_PANOSE_CONTRAST.MEDIUM;
pub const DWRITE_PANOSE_CONTRAST_MEDIUM_HIGH = DWRITE_PANOSE_CONTRAST.MEDIUM_HIGH;
pub const DWRITE_PANOSE_CONTRAST_HIGH = DWRITE_PANOSE_CONTRAST.HIGH;
pub const DWRITE_PANOSE_CONTRAST_VERY_HIGH = DWRITE_PANOSE_CONTRAST.VERY_HIGH;
pub const DWRITE_PANOSE_CONTRAST_HORIZONTAL_LOW = DWRITE_PANOSE_CONTRAST.HORIZONTAL_LOW;
pub const DWRITE_PANOSE_CONTRAST_HORIZONTAL_MEDIUM = DWRITE_PANOSE_CONTRAST.HORIZONTAL_MEDIUM;
pub const DWRITE_PANOSE_CONTRAST_HORIZONTAL_HIGH = DWRITE_PANOSE_CONTRAST.HORIZONTAL_HIGH;
pub const DWRITE_PANOSE_CONTRAST_BROKEN = DWRITE_PANOSE_CONTRAST.BROKEN;

pub const DWRITE_PANOSE_STROKE_VARIATION = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    NO_VARIATION = 2,
    GRADUAL_DIAGONAL = 3,
    GRADUAL_TRANSITIONAL = 4,
    GRADUAL_VERTICAL = 5,
    GRADUAL_HORIZONTAL = 6,
    RAPID_VERTICAL = 7,
    RAPID_HORIZONTAL = 8,
    INSTANT_VERTICAL = 9,
    INSTANT_HORIZONTAL = 10,
};
pub const DWRITE_PANOSE_STROKE_VARIATION_ANY = DWRITE_PANOSE_STROKE_VARIATION.ANY;
pub const DWRITE_PANOSE_STROKE_VARIATION_NO_FIT = DWRITE_PANOSE_STROKE_VARIATION.NO_FIT;
pub const DWRITE_PANOSE_STROKE_VARIATION_NO_VARIATION = DWRITE_PANOSE_STROKE_VARIATION.NO_VARIATION;
pub const DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_DIAGONAL = DWRITE_PANOSE_STROKE_VARIATION.GRADUAL_DIAGONAL;
pub const DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_TRANSITIONAL = DWRITE_PANOSE_STROKE_VARIATION.GRADUAL_TRANSITIONAL;
pub const DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_VERTICAL = DWRITE_PANOSE_STROKE_VARIATION.GRADUAL_VERTICAL;
pub const DWRITE_PANOSE_STROKE_VARIATION_GRADUAL_HORIZONTAL = DWRITE_PANOSE_STROKE_VARIATION.GRADUAL_HORIZONTAL;
pub const DWRITE_PANOSE_STROKE_VARIATION_RAPID_VERTICAL = DWRITE_PANOSE_STROKE_VARIATION.RAPID_VERTICAL;
pub const DWRITE_PANOSE_STROKE_VARIATION_RAPID_HORIZONTAL = DWRITE_PANOSE_STROKE_VARIATION.RAPID_HORIZONTAL;
pub const DWRITE_PANOSE_STROKE_VARIATION_INSTANT_VERTICAL = DWRITE_PANOSE_STROKE_VARIATION.INSTANT_VERTICAL;
pub const DWRITE_PANOSE_STROKE_VARIATION_INSTANT_HORIZONTAL = DWRITE_PANOSE_STROKE_VARIATION.INSTANT_HORIZONTAL;

pub const DWRITE_PANOSE_ARM_STYLE = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    STRAIGHT_ARMS_HORIZONTAL = 2,
    STRAIGHT_ARMS_WEDGE = 3,
    STRAIGHT_ARMS_VERTICAL = 4,
    STRAIGHT_ARMS_SINGLE_SERIF = 5,
    STRAIGHT_ARMS_DOUBLE_SERIF = 6,
    NONSTRAIGHT_ARMS_HORIZONTAL = 7,
    NONSTRAIGHT_ARMS_WEDGE = 8,
    NONSTRAIGHT_ARMS_VERTICAL = 9,
    NONSTRAIGHT_ARMS_SINGLE_SERIF = 10,
    NONSTRAIGHT_ARMS_DOUBLE_SERIF = 11,
    // STRAIGHT_ARMS_HORZ = 2, this enum value conflicts with STRAIGHT_ARMS_HORIZONTAL
    // STRAIGHT_ARMS_VERT = 4, this enum value conflicts with STRAIGHT_ARMS_VERTICAL
    // BENT_ARMS_HORZ = 7, this enum value conflicts with NONSTRAIGHT_ARMS_HORIZONTAL
    // BENT_ARMS_WEDGE = 8, this enum value conflicts with NONSTRAIGHT_ARMS_WEDGE
    // BENT_ARMS_VERT = 9, this enum value conflicts with NONSTRAIGHT_ARMS_VERTICAL
    // BENT_ARMS_SINGLE_SERIF = 10, this enum value conflicts with NONSTRAIGHT_ARMS_SINGLE_SERIF
    // BENT_ARMS_DOUBLE_SERIF = 11, this enum value conflicts with NONSTRAIGHT_ARMS_DOUBLE_SERIF
};
pub const DWRITE_PANOSE_ARM_STYLE_ANY = DWRITE_PANOSE_ARM_STYLE.ANY;
pub const DWRITE_PANOSE_ARM_STYLE_NO_FIT = DWRITE_PANOSE_ARM_STYLE.NO_FIT;
pub const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORIZONTAL = DWRITE_PANOSE_ARM_STYLE.STRAIGHT_ARMS_HORIZONTAL;
pub const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_WEDGE = DWRITE_PANOSE_ARM_STYLE.STRAIGHT_ARMS_WEDGE;
pub const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERTICAL = DWRITE_PANOSE_ARM_STYLE.STRAIGHT_ARMS_VERTICAL;
pub const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_SINGLE_SERIF = DWRITE_PANOSE_ARM_STYLE.STRAIGHT_ARMS_SINGLE_SERIF;
pub const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_DOUBLE_SERIF = DWRITE_PANOSE_ARM_STYLE.STRAIGHT_ARMS_DOUBLE_SERIF;
pub const DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_HORIZONTAL = DWRITE_PANOSE_ARM_STYLE.NONSTRAIGHT_ARMS_HORIZONTAL;
pub const DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_WEDGE = DWRITE_PANOSE_ARM_STYLE.NONSTRAIGHT_ARMS_WEDGE;
pub const DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_VERTICAL = DWRITE_PANOSE_ARM_STYLE.NONSTRAIGHT_ARMS_VERTICAL;
pub const DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_SINGLE_SERIF = DWRITE_PANOSE_ARM_STYLE.NONSTRAIGHT_ARMS_SINGLE_SERIF;
pub const DWRITE_PANOSE_ARM_STYLE_NONSTRAIGHT_ARMS_DOUBLE_SERIF = DWRITE_PANOSE_ARM_STYLE.NONSTRAIGHT_ARMS_DOUBLE_SERIF;
pub const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_HORZ = DWRITE_PANOSE_ARM_STYLE.STRAIGHT_ARMS_HORIZONTAL;
pub const DWRITE_PANOSE_ARM_STYLE_STRAIGHT_ARMS_VERT = DWRITE_PANOSE_ARM_STYLE.STRAIGHT_ARMS_VERTICAL;
pub const DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_HORZ = DWRITE_PANOSE_ARM_STYLE.NONSTRAIGHT_ARMS_HORIZONTAL;
pub const DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_WEDGE = DWRITE_PANOSE_ARM_STYLE.NONSTRAIGHT_ARMS_WEDGE;
pub const DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_VERT = DWRITE_PANOSE_ARM_STYLE.NONSTRAIGHT_ARMS_VERTICAL;
pub const DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_SINGLE_SERIF = DWRITE_PANOSE_ARM_STYLE.NONSTRAIGHT_ARMS_SINGLE_SERIF;
pub const DWRITE_PANOSE_ARM_STYLE_BENT_ARMS_DOUBLE_SERIF = DWRITE_PANOSE_ARM_STYLE.NONSTRAIGHT_ARMS_DOUBLE_SERIF;

pub const DWRITE_PANOSE_LETTERFORM = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    NORMAL_CONTACT = 2,
    NORMAL_WEIGHTED = 3,
    NORMAL_BOXED = 4,
    NORMAL_FLATTENED = 5,
    NORMAL_ROUNDED = 6,
    NORMAL_OFF_CENTER = 7,
    NORMAL_SQUARE = 8,
    OBLIQUE_CONTACT = 9,
    OBLIQUE_WEIGHTED = 10,
    OBLIQUE_BOXED = 11,
    OBLIQUE_FLATTENED = 12,
    OBLIQUE_ROUNDED = 13,
    OBLIQUE_OFF_CENTER = 14,
    OBLIQUE_SQUARE = 15,
};
pub const DWRITE_PANOSE_LETTERFORM_ANY = DWRITE_PANOSE_LETTERFORM.ANY;
pub const DWRITE_PANOSE_LETTERFORM_NO_FIT = DWRITE_PANOSE_LETTERFORM.NO_FIT;
pub const DWRITE_PANOSE_LETTERFORM_NORMAL_CONTACT = DWRITE_PANOSE_LETTERFORM.NORMAL_CONTACT;
pub const DWRITE_PANOSE_LETTERFORM_NORMAL_WEIGHTED = DWRITE_PANOSE_LETTERFORM.NORMAL_WEIGHTED;
pub const DWRITE_PANOSE_LETTERFORM_NORMAL_BOXED = DWRITE_PANOSE_LETTERFORM.NORMAL_BOXED;
pub const DWRITE_PANOSE_LETTERFORM_NORMAL_FLATTENED = DWRITE_PANOSE_LETTERFORM.NORMAL_FLATTENED;
pub const DWRITE_PANOSE_LETTERFORM_NORMAL_ROUNDED = DWRITE_PANOSE_LETTERFORM.NORMAL_ROUNDED;
pub const DWRITE_PANOSE_LETTERFORM_NORMAL_OFF_CENTER = DWRITE_PANOSE_LETTERFORM.NORMAL_OFF_CENTER;
pub const DWRITE_PANOSE_LETTERFORM_NORMAL_SQUARE = DWRITE_PANOSE_LETTERFORM.NORMAL_SQUARE;
pub const DWRITE_PANOSE_LETTERFORM_OBLIQUE_CONTACT = DWRITE_PANOSE_LETTERFORM.OBLIQUE_CONTACT;
pub const DWRITE_PANOSE_LETTERFORM_OBLIQUE_WEIGHTED = DWRITE_PANOSE_LETTERFORM.OBLIQUE_WEIGHTED;
pub const DWRITE_PANOSE_LETTERFORM_OBLIQUE_BOXED = DWRITE_PANOSE_LETTERFORM.OBLIQUE_BOXED;
pub const DWRITE_PANOSE_LETTERFORM_OBLIQUE_FLATTENED = DWRITE_PANOSE_LETTERFORM.OBLIQUE_FLATTENED;
pub const DWRITE_PANOSE_LETTERFORM_OBLIQUE_ROUNDED = DWRITE_PANOSE_LETTERFORM.OBLIQUE_ROUNDED;
pub const DWRITE_PANOSE_LETTERFORM_OBLIQUE_OFF_CENTER = DWRITE_PANOSE_LETTERFORM.OBLIQUE_OFF_CENTER;
pub const DWRITE_PANOSE_LETTERFORM_OBLIQUE_SQUARE = DWRITE_PANOSE_LETTERFORM.OBLIQUE_SQUARE;

pub const DWRITE_PANOSE_MIDLINE = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    STANDARD_TRIMMED = 2,
    STANDARD_POINTED = 3,
    STANDARD_SERIFED = 4,
    HIGH_TRIMMED = 5,
    HIGH_POINTED = 6,
    HIGH_SERIFED = 7,
    CONSTANT_TRIMMED = 8,
    CONSTANT_POINTED = 9,
    CONSTANT_SERIFED = 10,
    LOW_TRIMMED = 11,
    LOW_POINTED = 12,
    LOW_SERIFED = 13,
};
pub const DWRITE_PANOSE_MIDLINE_ANY = DWRITE_PANOSE_MIDLINE.ANY;
pub const DWRITE_PANOSE_MIDLINE_NO_FIT = DWRITE_PANOSE_MIDLINE.NO_FIT;
pub const DWRITE_PANOSE_MIDLINE_STANDARD_TRIMMED = DWRITE_PANOSE_MIDLINE.STANDARD_TRIMMED;
pub const DWRITE_PANOSE_MIDLINE_STANDARD_POINTED = DWRITE_PANOSE_MIDLINE.STANDARD_POINTED;
pub const DWRITE_PANOSE_MIDLINE_STANDARD_SERIFED = DWRITE_PANOSE_MIDLINE.STANDARD_SERIFED;
pub const DWRITE_PANOSE_MIDLINE_HIGH_TRIMMED = DWRITE_PANOSE_MIDLINE.HIGH_TRIMMED;
pub const DWRITE_PANOSE_MIDLINE_HIGH_POINTED = DWRITE_PANOSE_MIDLINE.HIGH_POINTED;
pub const DWRITE_PANOSE_MIDLINE_HIGH_SERIFED = DWRITE_PANOSE_MIDLINE.HIGH_SERIFED;
pub const DWRITE_PANOSE_MIDLINE_CONSTANT_TRIMMED = DWRITE_PANOSE_MIDLINE.CONSTANT_TRIMMED;
pub const DWRITE_PANOSE_MIDLINE_CONSTANT_POINTED = DWRITE_PANOSE_MIDLINE.CONSTANT_POINTED;
pub const DWRITE_PANOSE_MIDLINE_CONSTANT_SERIFED = DWRITE_PANOSE_MIDLINE.CONSTANT_SERIFED;
pub const DWRITE_PANOSE_MIDLINE_LOW_TRIMMED = DWRITE_PANOSE_MIDLINE.LOW_TRIMMED;
pub const DWRITE_PANOSE_MIDLINE_LOW_POINTED = DWRITE_PANOSE_MIDLINE.LOW_POINTED;
pub const DWRITE_PANOSE_MIDLINE_LOW_SERIFED = DWRITE_PANOSE_MIDLINE.LOW_SERIFED;

pub const DWRITE_PANOSE_XHEIGHT = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    CONSTANT_SMALL = 2,
    CONSTANT_STANDARD = 3,
    CONSTANT_LARGE = 4,
    DUCKING_SMALL = 5,
    DUCKING_STANDARD = 6,
    DUCKING_LARGE = 7,
    // CONSTANT_STD = 3, this enum value conflicts with CONSTANT_STANDARD
    // DUCKING_STD = 6, this enum value conflicts with DUCKING_STANDARD
};
pub const DWRITE_PANOSE_XHEIGHT_ANY = DWRITE_PANOSE_XHEIGHT.ANY;
pub const DWRITE_PANOSE_XHEIGHT_NO_FIT = DWRITE_PANOSE_XHEIGHT.NO_FIT;
pub const DWRITE_PANOSE_XHEIGHT_CONSTANT_SMALL = DWRITE_PANOSE_XHEIGHT.CONSTANT_SMALL;
pub const DWRITE_PANOSE_XHEIGHT_CONSTANT_STANDARD = DWRITE_PANOSE_XHEIGHT.CONSTANT_STANDARD;
pub const DWRITE_PANOSE_XHEIGHT_CONSTANT_LARGE = DWRITE_PANOSE_XHEIGHT.CONSTANT_LARGE;
pub const DWRITE_PANOSE_XHEIGHT_DUCKING_SMALL = DWRITE_PANOSE_XHEIGHT.DUCKING_SMALL;
pub const DWRITE_PANOSE_XHEIGHT_DUCKING_STANDARD = DWRITE_PANOSE_XHEIGHT.DUCKING_STANDARD;
pub const DWRITE_PANOSE_XHEIGHT_DUCKING_LARGE = DWRITE_PANOSE_XHEIGHT.DUCKING_LARGE;
pub const DWRITE_PANOSE_XHEIGHT_CONSTANT_STD = DWRITE_PANOSE_XHEIGHT.CONSTANT_STANDARD;
pub const DWRITE_PANOSE_XHEIGHT_DUCKING_STD = DWRITE_PANOSE_XHEIGHT.DUCKING_STANDARD;

pub const DWRITE_PANOSE_TOOL_KIND = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    FLAT_NIB = 2,
    PRESSURE_POINT = 3,
    ENGRAVED = 4,
    BALL = 5,
    BRUSH = 6,
    ROUGH = 7,
    FELT_PEN_BRUSH_TIP = 8,
    WILD_BRUSH = 9,
};
pub const DWRITE_PANOSE_TOOL_KIND_ANY = DWRITE_PANOSE_TOOL_KIND.ANY;
pub const DWRITE_PANOSE_TOOL_KIND_NO_FIT = DWRITE_PANOSE_TOOL_KIND.NO_FIT;
pub const DWRITE_PANOSE_TOOL_KIND_FLAT_NIB = DWRITE_PANOSE_TOOL_KIND.FLAT_NIB;
pub const DWRITE_PANOSE_TOOL_KIND_PRESSURE_POINT = DWRITE_PANOSE_TOOL_KIND.PRESSURE_POINT;
pub const DWRITE_PANOSE_TOOL_KIND_ENGRAVED = DWRITE_PANOSE_TOOL_KIND.ENGRAVED;
pub const DWRITE_PANOSE_TOOL_KIND_BALL = DWRITE_PANOSE_TOOL_KIND.BALL;
pub const DWRITE_PANOSE_TOOL_KIND_BRUSH = DWRITE_PANOSE_TOOL_KIND.BRUSH;
pub const DWRITE_PANOSE_TOOL_KIND_ROUGH = DWRITE_PANOSE_TOOL_KIND.ROUGH;
pub const DWRITE_PANOSE_TOOL_KIND_FELT_PEN_BRUSH_TIP = DWRITE_PANOSE_TOOL_KIND.FELT_PEN_BRUSH_TIP;
pub const DWRITE_PANOSE_TOOL_KIND_WILD_BRUSH = DWRITE_PANOSE_TOOL_KIND.WILD_BRUSH;

pub const DWRITE_PANOSE_SPACING = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    PROPORTIONAL_SPACED = 2,
    MONOSPACED = 3,
};
pub const DWRITE_PANOSE_SPACING_ANY = DWRITE_PANOSE_SPACING.ANY;
pub const DWRITE_PANOSE_SPACING_NO_FIT = DWRITE_PANOSE_SPACING.NO_FIT;
pub const DWRITE_PANOSE_SPACING_PROPORTIONAL_SPACED = DWRITE_PANOSE_SPACING.PROPORTIONAL_SPACED;
pub const DWRITE_PANOSE_SPACING_MONOSPACED = DWRITE_PANOSE_SPACING.MONOSPACED;

pub const DWRITE_PANOSE_ASPECT_RATIO = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    VERY_CONDENSED = 2,
    CONDENSED = 3,
    NORMAL = 4,
    EXPANDED = 5,
    VERY_EXPANDED = 6,
};
pub const DWRITE_PANOSE_ASPECT_RATIO_ANY = DWRITE_PANOSE_ASPECT_RATIO.ANY;
pub const DWRITE_PANOSE_ASPECT_RATIO_NO_FIT = DWRITE_PANOSE_ASPECT_RATIO.NO_FIT;
pub const DWRITE_PANOSE_ASPECT_RATIO_VERY_CONDENSED = DWRITE_PANOSE_ASPECT_RATIO.VERY_CONDENSED;
pub const DWRITE_PANOSE_ASPECT_RATIO_CONDENSED = DWRITE_PANOSE_ASPECT_RATIO.CONDENSED;
pub const DWRITE_PANOSE_ASPECT_RATIO_NORMAL = DWRITE_PANOSE_ASPECT_RATIO.NORMAL;
pub const DWRITE_PANOSE_ASPECT_RATIO_EXPANDED = DWRITE_PANOSE_ASPECT_RATIO.EXPANDED;
pub const DWRITE_PANOSE_ASPECT_RATIO_VERY_EXPANDED = DWRITE_PANOSE_ASPECT_RATIO.VERY_EXPANDED;

pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    ROMAN_DISCONNECTED = 2,
    ROMAN_TRAILING = 3,
    ROMAN_CONNECTED = 4,
    CURSIVE_DISCONNECTED = 5,
    CURSIVE_TRAILING = 6,
    CURSIVE_CONNECTED = 7,
    BLACKLETTER_DISCONNECTED = 8,
    BLACKLETTER_TRAILING = 9,
    BLACKLETTER_CONNECTED = 10,
};
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_ANY = DWRITE_PANOSE_SCRIPT_TOPOLOGY.ANY;
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_NO_FIT = DWRITE_PANOSE_SCRIPT_TOPOLOGY.NO_FIT;
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_DISCONNECTED = DWRITE_PANOSE_SCRIPT_TOPOLOGY.ROMAN_DISCONNECTED;
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_TRAILING = DWRITE_PANOSE_SCRIPT_TOPOLOGY.ROMAN_TRAILING;
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_ROMAN_CONNECTED = DWRITE_PANOSE_SCRIPT_TOPOLOGY.ROMAN_CONNECTED;
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_DISCONNECTED = DWRITE_PANOSE_SCRIPT_TOPOLOGY.CURSIVE_DISCONNECTED;
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_TRAILING = DWRITE_PANOSE_SCRIPT_TOPOLOGY.CURSIVE_TRAILING;
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_CURSIVE_CONNECTED = DWRITE_PANOSE_SCRIPT_TOPOLOGY.CURSIVE_CONNECTED;
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_DISCONNECTED = DWRITE_PANOSE_SCRIPT_TOPOLOGY.BLACKLETTER_DISCONNECTED;
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_TRAILING = DWRITE_PANOSE_SCRIPT_TOPOLOGY.BLACKLETTER_TRAILING;
pub const DWRITE_PANOSE_SCRIPT_TOPOLOGY_BLACKLETTER_CONNECTED = DWRITE_PANOSE_SCRIPT_TOPOLOGY.BLACKLETTER_CONNECTED;

pub const DWRITE_PANOSE_SCRIPT_FORM = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    UPRIGHT_NO_WRAPPING = 2,
    UPRIGHT_SOME_WRAPPING = 3,
    UPRIGHT_MORE_WRAPPING = 4,
    UPRIGHT_EXTREME_WRAPPING = 5,
    OBLIQUE_NO_WRAPPING = 6,
    OBLIQUE_SOME_WRAPPING = 7,
    OBLIQUE_MORE_WRAPPING = 8,
    OBLIQUE_EXTREME_WRAPPING = 9,
    EXAGGERATED_NO_WRAPPING = 10,
    EXAGGERATED_SOME_WRAPPING = 11,
    EXAGGERATED_MORE_WRAPPING = 12,
    EXAGGERATED_EXTREME_WRAPPING = 13,
};
pub const DWRITE_PANOSE_SCRIPT_FORM_ANY = DWRITE_PANOSE_SCRIPT_FORM.ANY;
pub const DWRITE_PANOSE_SCRIPT_FORM_NO_FIT = DWRITE_PANOSE_SCRIPT_FORM.NO_FIT;
pub const DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_NO_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.UPRIGHT_NO_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_SOME_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.UPRIGHT_SOME_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_MORE_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.UPRIGHT_MORE_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_UPRIGHT_EXTREME_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.UPRIGHT_EXTREME_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_NO_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.OBLIQUE_NO_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_SOME_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.OBLIQUE_SOME_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_MORE_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.OBLIQUE_MORE_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_OBLIQUE_EXTREME_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.OBLIQUE_EXTREME_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_NO_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.EXAGGERATED_NO_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_SOME_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.EXAGGERATED_SOME_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_MORE_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.EXAGGERATED_MORE_WRAPPING;
pub const DWRITE_PANOSE_SCRIPT_FORM_EXAGGERATED_EXTREME_WRAPPING = DWRITE_PANOSE_SCRIPT_FORM.EXAGGERATED_EXTREME_WRAPPING;

pub const DWRITE_PANOSE_FINIALS = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    NONE_NO_LOOPS = 2,
    NONE_CLOSED_LOOPS = 3,
    NONE_OPEN_LOOPS = 4,
    SHARP_NO_LOOPS = 5,
    SHARP_CLOSED_LOOPS = 6,
    SHARP_OPEN_LOOPS = 7,
    TAPERED_NO_LOOPS = 8,
    TAPERED_CLOSED_LOOPS = 9,
    TAPERED_OPEN_LOOPS = 10,
    ROUND_NO_LOOPS = 11,
    ROUND_CLOSED_LOOPS = 12,
    ROUND_OPEN_LOOPS = 13,
};
pub const DWRITE_PANOSE_FINIALS_ANY = DWRITE_PANOSE_FINIALS.ANY;
pub const DWRITE_PANOSE_FINIALS_NO_FIT = DWRITE_PANOSE_FINIALS.NO_FIT;
pub const DWRITE_PANOSE_FINIALS_NONE_NO_LOOPS = DWRITE_PANOSE_FINIALS.NONE_NO_LOOPS;
pub const DWRITE_PANOSE_FINIALS_NONE_CLOSED_LOOPS = DWRITE_PANOSE_FINIALS.NONE_CLOSED_LOOPS;
pub const DWRITE_PANOSE_FINIALS_NONE_OPEN_LOOPS = DWRITE_PANOSE_FINIALS.NONE_OPEN_LOOPS;
pub const DWRITE_PANOSE_FINIALS_SHARP_NO_LOOPS = DWRITE_PANOSE_FINIALS.SHARP_NO_LOOPS;
pub const DWRITE_PANOSE_FINIALS_SHARP_CLOSED_LOOPS = DWRITE_PANOSE_FINIALS.SHARP_CLOSED_LOOPS;
pub const DWRITE_PANOSE_FINIALS_SHARP_OPEN_LOOPS = DWRITE_PANOSE_FINIALS.SHARP_OPEN_LOOPS;
pub const DWRITE_PANOSE_FINIALS_TAPERED_NO_LOOPS = DWRITE_PANOSE_FINIALS.TAPERED_NO_LOOPS;
pub const DWRITE_PANOSE_FINIALS_TAPERED_CLOSED_LOOPS = DWRITE_PANOSE_FINIALS.TAPERED_CLOSED_LOOPS;
pub const DWRITE_PANOSE_FINIALS_TAPERED_OPEN_LOOPS = DWRITE_PANOSE_FINIALS.TAPERED_OPEN_LOOPS;
pub const DWRITE_PANOSE_FINIALS_ROUND_NO_LOOPS = DWRITE_PANOSE_FINIALS.ROUND_NO_LOOPS;
pub const DWRITE_PANOSE_FINIALS_ROUND_CLOSED_LOOPS = DWRITE_PANOSE_FINIALS.ROUND_CLOSED_LOOPS;
pub const DWRITE_PANOSE_FINIALS_ROUND_OPEN_LOOPS = DWRITE_PANOSE_FINIALS.ROUND_OPEN_LOOPS;

pub const DWRITE_PANOSE_XASCENT = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    VERY_LOW = 2,
    LOW = 3,
    MEDIUM = 4,
    HIGH = 5,
    VERY_HIGH = 6,
};
pub const DWRITE_PANOSE_XASCENT_ANY = DWRITE_PANOSE_XASCENT.ANY;
pub const DWRITE_PANOSE_XASCENT_NO_FIT = DWRITE_PANOSE_XASCENT.NO_FIT;
pub const DWRITE_PANOSE_XASCENT_VERY_LOW = DWRITE_PANOSE_XASCENT.VERY_LOW;
pub const DWRITE_PANOSE_XASCENT_LOW = DWRITE_PANOSE_XASCENT.LOW;
pub const DWRITE_PANOSE_XASCENT_MEDIUM = DWRITE_PANOSE_XASCENT.MEDIUM;
pub const DWRITE_PANOSE_XASCENT_HIGH = DWRITE_PANOSE_XASCENT.HIGH;
pub const DWRITE_PANOSE_XASCENT_VERY_HIGH = DWRITE_PANOSE_XASCENT.VERY_HIGH;

pub const DWRITE_PANOSE_DECORATIVE_CLASS = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    DERIVATIVE = 2,
    NONSTANDARD_TOPOLOGY = 3,
    NONSTANDARD_ELEMENTS = 4,
    NONSTANDARD_ASPECT = 5,
    INITIALS = 6,
    CARTOON = 7,
    PICTURE_STEMS = 8,
    ORNAMENTED = 9,
    TEXT_AND_BACKGROUND = 10,
    COLLAGE = 11,
    MONTAGE = 12,
};
pub const DWRITE_PANOSE_DECORATIVE_CLASS_ANY = DWRITE_PANOSE_DECORATIVE_CLASS.ANY;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_NO_FIT = DWRITE_PANOSE_DECORATIVE_CLASS.NO_FIT;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_DERIVATIVE = DWRITE_PANOSE_DECORATIVE_CLASS.DERIVATIVE;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_TOPOLOGY = DWRITE_PANOSE_DECORATIVE_CLASS.NONSTANDARD_TOPOLOGY;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ELEMENTS = DWRITE_PANOSE_DECORATIVE_CLASS.NONSTANDARD_ELEMENTS;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_NONSTANDARD_ASPECT = DWRITE_PANOSE_DECORATIVE_CLASS.NONSTANDARD_ASPECT;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_INITIALS = DWRITE_PANOSE_DECORATIVE_CLASS.INITIALS;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_CARTOON = DWRITE_PANOSE_DECORATIVE_CLASS.CARTOON;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_PICTURE_STEMS = DWRITE_PANOSE_DECORATIVE_CLASS.PICTURE_STEMS;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_ORNAMENTED = DWRITE_PANOSE_DECORATIVE_CLASS.ORNAMENTED;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_TEXT_AND_BACKGROUND = DWRITE_PANOSE_DECORATIVE_CLASS.TEXT_AND_BACKGROUND;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_COLLAGE = DWRITE_PANOSE_DECORATIVE_CLASS.COLLAGE;
pub const DWRITE_PANOSE_DECORATIVE_CLASS_MONTAGE = DWRITE_PANOSE_DECORATIVE_CLASS.MONTAGE;

pub const DWRITE_PANOSE_ASPECT = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    SUPER_CONDENSED = 2,
    VERY_CONDENSED = 3,
    CONDENSED = 4,
    NORMAL = 5,
    EXTENDED = 6,
    VERY_EXTENDED = 7,
    SUPER_EXTENDED = 8,
    MONOSPACED = 9,
};
pub const DWRITE_PANOSE_ASPECT_ANY = DWRITE_PANOSE_ASPECT.ANY;
pub const DWRITE_PANOSE_ASPECT_NO_FIT = DWRITE_PANOSE_ASPECT.NO_FIT;
pub const DWRITE_PANOSE_ASPECT_SUPER_CONDENSED = DWRITE_PANOSE_ASPECT.SUPER_CONDENSED;
pub const DWRITE_PANOSE_ASPECT_VERY_CONDENSED = DWRITE_PANOSE_ASPECT.VERY_CONDENSED;
pub const DWRITE_PANOSE_ASPECT_CONDENSED = DWRITE_PANOSE_ASPECT.CONDENSED;
pub const DWRITE_PANOSE_ASPECT_NORMAL = DWRITE_PANOSE_ASPECT.NORMAL;
pub const DWRITE_PANOSE_ASPECT_EXTENDED = DWRITE_PANOSE_ASPECT.EXTENDED;
pub const DWRITE_PANOSE_ASPECT_VERY_EXTENDED = DWRITE_PANOSE_ASPECT.VERY_EXTENDED;
pub const DWRITE_PANOSE_ASPECT_SUPER_EXTENDED = DWRITE_PANOSE_ASPECT.SUPER_EXTENDED;
pub const DWRITE_PANOSE_ASPECT_MONOSPACED = DWRITE_PANOSE_ASPECT.MONOSPACED;

pub const DWRITE_PANOSE_FILL = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    STANDARD_SOLID_FILL = 2,
    NO_FILL = 3,
    PATTERNED_FILL = 4,
    COMPLEX_FILL = 5,
    SHAPED_FILL = 6,
    DRAWN_DISTRESSED = 7,
};
pub const DWRITE_PANOSE_FILL_ANY = DWRITE_PANOSE_FILL.ANY;
pub const DWRITE_PANOSE_FILL_NO_FIT = DWRITE_PANOSE_FILL.NO_FIT;
pub const DWRITE_PANOSE_FILL_STANDARD_SOLID_FILL = DWRITE_PANOSE_FILL.STANDARD_SOLID_FILL;
pub const DWRITE_PANOSE_FILL_NO_FILL = DWRITE_PANOSE_FILL.NO_FILL;
pub const DWRITE_PANOSE_FILL_PATTERNED_FILL = DWRITE_PANOSE_FILL.PATTERNED_FILL;
pub const DWRITE_PANOSE_FILL_COMPLEX_FILL = DWRITE_PANOSE_FILL.COMPLEX_FILL;
pub const DWRITE_PANOSE_FILL_SHAPED_FILL = DWRITE_PANOSE_FILL.SHAPED_FILL;
pub const DWRITE_PANOSE_FILL_DRAWN_DISTRESSED = DWRITE_PANOSE_FILL.DRAWN_DISTRESSED;

pub const DWRITE_PANOSE_LINING = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    NONE = 2,
    INLINE = 3,
    OUTLINE = 4,
    ENGRAVED = 5,
    SHADOW = 6,
    RELIEF = 7,
    BACKDROP = 8,
};
pub const DWRITE_PANOSE_LINING_ANY = DWRITE_PANOSE_LINING.ANY;
pub const DWRITE_PANOSE_LINING_NO_FIT = DWRITE_PANOSE_LINING.NO_FIT;
pub const DWRITE_PANOSE_LINING_NONE = DWRITE_PANOSE_LINING.NONE;
pub const DWRITE_PANOSE_LINING_INLINE = DWRITE_PANOSE_LINING.INLINE;
pub const DWRITE_PANOSE_LINING_OUTLINE = DWRITE_PANOSE_LINING.OUTLINE;
pub const DWRITE_PANOSE_LINING_ENGRAVED = DWRITE_PANOSE_LINING.ENGRAVED;
pub const DWRITE_PANOSE_LINING_SHADOW = DWRITE_PANOSE_LINING.SHADOW;
pub const DWRITE_PANOSE_LINING_RELIEF = DWRITE_PANOSE_LINING.RELIEF;
pub const DWRITE_PANOSE_LINING_BACKDROP = DWRITE_PANOSE_LINING.BACKDROP;

pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    STANDARD = 2,
    SQUARE = 3,
    MULTIPLE_SEGMENT = 4,
    ART_DECO = 5,
    UNEVEN_WEIGHTING = 6,
    DIVERSE_ARMS = 7,
    DIVERSE_FORMS = 8,
    LOMBARDIC_FORMS = 9,
    UPPER_CASE_IN_LOWER_CASE = 10,
    IMPLIED_TOPOLOGY = 11,
    HORSESHOE_E_AND_A = 12,
    CURSIVE = 13,
    BLACKLETTER = 14,
    SWASH_VARIANCE = 15,
};
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ANY = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.ANY;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_NO_FIT = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.NO_FIT;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_STANDARD = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.STANDARD;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SQUARE = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.SQUARE;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_MULTIPLE_SEGMENT = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.MULTIPLE_SEGMENT;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_ART_DECO = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.ART_DECO;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UNEVEN_WEIGHTING = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.UNEVEN_WEIGHTING;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_ARMS = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.DIVERSE_ARMS;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_DIVERSE_FORMS = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.DIVERSE_FORMS;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_LOMBARDIC_FORMS = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.LOMBARDIC_FORMS;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_UPPER_CASE_IN_LOWER_CASE = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.UPPER_CASE_IN_LOWER_CASE;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_IMPLIED_TOPOLOGY = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.IMPLIED_TOPOLOGY;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_HORSESHOE_E_AND_A = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.HORSESHOE_E_AND_A;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_CURSIVE = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.CURSIVE;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_BLACKLETTER = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.BLACKLETTER;
pub const DWRITE_PANOSE_DECORATIVE_TOPOLOGY_SWASH_VARIANCE = DWRITE_PANOSE_DECORATIVE_TOPOLOGY.SWASH_VARIANCE;

pub const DWRITE_PANOSE_CHARACTER_RANGES = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    EXTENDED_COLLECTION = 2,
    LITERALS = 3,
    NO_LOWER_CASE = 4,
    SMALL_CAPS = 5,
};
pub const DWRITE_PANOSE_CHARACTER_RANGES_ANY = DWRITE_PANOSE_CHARACTER_RANGES.ANY;
pub const DWRITE_PANOSE_CHARACTER_RANGES_NO_FIT = DWRITE_PANOSE_CHARACTER_RANGES.NO_FIT;
pub const DWRITE_PANOSE_CHARACTER_RANGES_EXTENDED_COLLECTION = DWRITE_PANOSE_CHARACTER_RANGES.EXTENDED_COLLECTION;
pub const DWRITE_PANOSE_CHARACTER_RANGES_LITERALS = DWRITE_PANOSE_CHARACTER_RANGES.LITERALS;
pub const DWRITE_PANOSE_CHARACTER_RANGES_NO_LOWER_CASE = DWRITE_PANOSE_CHARACTER_RANGES.NO_LOWER_CASE;
pub const DWRITE_PANOSE_CHARACTER_RANGES_SMALL_CAPS = DWRITE_PANOSE_CHARACTER_RANGES.SMALL_CAPS;

pub const DWRITE_PANOSE_SYMBOL_KIND = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    MONTAGES = 2,
    PICTURES = 3,
    SHAPES = 4,
    SCIENTIFIC = 5,
    MUSIC = 6,
    EXPERT = 7,
    PATTERNS = 8,
    BOARDERS = 9,
    ICONS = 10,
    LOGOS = 11,
    INDUSTRY_SPECIFIC = 12,
};
pub const DWRITE_PANOSE_SYMBOL_KIND_ANY = DWRITE_PANOSE_SYMBOL_KIND.ANY;
pub const DWRITE_PANOSE_SYMBOL_KIND_NO_FIT = DWRITE_PANOSE_SYMBOL_KIND.NO_FIT;
pub const DWRITE_PANOSE_SYMBOL_KIND_MONTAGES = DWRITE_PANOSE_SYMBOL_KIND.MONTAGES;
pub const DWRITE_PANOSE_SYMBOL_KIND_PICTURES = DWRITE_PANOSE_SYMBOL_KIND.PICTURES;
pub const DWRITE_PANOSE_SYMBOL_KIND_SHAPES = DWRITE_PANOSE_SYMBOL_KIND.SHAPES;
pub const DWRITE_PANOSE_SYMBOL_KIND_SCIENTIFIC = DWRITE_PANOSE_SYMBOL_KIND.SCIENTIFIC;
pub const DWRITE_PANOSE_SYMBOL_KIND_MUSIC = DWRITE_PANOSE_SYMBOL_KIND.MUSIC;
pub const DWRITE_PANOSE_SYMBOL_KIND_EXPERT = DWRITE_PANOSE_SYMBOL_KIND.EXPERT;
pub const DWRITE_PANOSE_SYMBOL_KIND_PATTERNS = DWRITE_PANOSE_SYMBOL_KIND.PATTERNS;
pub const DWRITE_PANOSE_SYMBOL_KIND_BOARDERS = DWRITE_PANOSE_SYMBOL_KIND.BOARDERS;
pub const DWRITE_PANOSE_SYMBOL_KIND_ICONS = DWRITE_PANOSE_SYMBOL_KIND.ICONS;
pub const DWRITE_PANOSE_SYMBOL_KIND_LOGOS = DWRITE_PANOSE_SYMBOL_KIND.LOGOS;
pub const DWRITE_PANOSE_SYMBOL_KIND_INDUSTRY_SPECIFIC = DWRITE_PANOSE_SYMBOL_KIND.INDUSTRY_SPECIFIC;

pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO = enum(i32) {
    ANY = 0,
    NO_FIT = 1,
    NO_WIDTH = 2,
    EXCEPTIONALLY_WIDE = 3,
    SUPER_WIDE = 4,
    VERY_WIDE = 5,
    WIDE = 6,
    NORMAL = 7,
    NARROW = 8,
    VERY_NARROW = 9,
};
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_ANY = DWRITE_PANOSE_SYMBOL_ASPECT_RATIO.ANY;
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_FIT = DWRITE_PANOSE_SYMBOL_ASPECT_RATIO.NO_FIT;
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NO_WIDTH = DWRITE_PANOSE_SYMBOL_ASPECT_RATIO.NO_WIDTH;
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_EXCEPTIONALLY_WIDE = DWRITE_PANOSE_SYMBOL_ASPECT_RATIO.EXCEPTIONALLY_WIDE;
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_SUPER_WIDE = DWRITE_PANOSE_SYMBOL_ASPECT_RATIO.SUPER_WIDE;
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_WIDE = DWRITE_PANOSE_SYMBOL_ASPECT_RATIO.VERY_WIDE;
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_WIDE = DWRITE_PANOSE_SYMBOL_ASPECT_RATIO.WIDE;
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NORMAL = DWRITE_PANOSE_SYMBOL_ASPECT_RATIO.NORMAL;
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_NARROW = DWRITE_PANOSE_SYMBOL_ASPECT_RATIO.NARROW;
pub const DWRITE_PANOSE_SYMBOL_ASPECT_RATIO_VERY_NARROW = DWRITE_PANOSE_SYMBOL_ASPECT_RATIO.VERY_NARROW;

pub const DWRITE_OUTLINE_THRESHOLD = enum(i32) {
    NTIALIASED = 0,
    LIASED = 1,
};
pub const DWRITE_OUTLINE_THRESHOLD_ANTIALIASED = DWRITE_OUTLINE_THRESHOLD.NTIALIASED;
pub const DWRITE_OUTLINE_THRESHOLD_ALIASED = DWRITE_OUTLINE_THRESHOLD.LIASED;

pub const DWRITE_BASELINE = enum(i32) {
    DEFAULT = 0,
    ROMAN = 1,
    CENTRAL = 2,
    MATH = 3,
    HANGING = 4,
    IDEOGRAPHIC_BOTTOM = 5,
    IDEOGRAPHIC_TOP = 6,
    MINIMUM = 7,
    MAXIMUM = 8,
};
pub const DWRITE_BASELINE_DEFAULT = DWRITE_BASELINE.DEFAULT;
pub const DWRITE_BASELINE_ROMAN = DWRITE_BASELINE.ROMAN;
pub const DWRITE_BASELINE_CENTRAL = DWRITE_BASELINE.CENTRAL;
pub const DWRITE_BASELINE_MATH = DWRITE_BASELINE.MATH;
pub const DWRITE_BASELINE_HANGING = DWRITE_BASELINE.HANGING;
pub const DWRITE_BASELINE_IDEOGRAPHIC_BOTTOM = DWRITE_BASELINE.IDEOGRAPHIC_BOTTOM;
pub const DWRITE_BASELINE_IDEOGRAPHIC_TOP = DWRITE_BASELINE.IDEOGRAPHIC_TOP;
pub const DWRITE_BASELINE_MINIMUM = DWRITE_BASELINE.MINIMUM;
pub const DWRITE_BASELINE_MAXIMUM = DWRITE_BASELINE.MAXIMUM;

pub const DWRITE_VERTICAL_GLYPH_ORIENTATION = enum(i32) {
    DEFAULT = 0,
    STACKED = 1,
};
pub const DWRITE_VERTICAL_GLYPH_ORIENTATION_DEFAULT = DWRITE_VERTICAL_GLYPH_ORIENTATION.DEFAULT;
pub const DWRITE_VERTICAL_GLYPH_ORIENTATION_STACKED = DWRITE_VERTICAL_GLYPH_ORIENTATION.STACKED;

pub const DWRITE_GLYPH_ORIENTATION_ANGLE = enum(i32) {
    @"0_DEGREES" = 0,
    @"90_DEGREES" = 1,
    @"180_DEGREES" = 2,
    @"270_DEGREES" = 3,
};
pub const DWRITE_GLYPH_ORIENTATION_ANGLE_0_DEGREES = DWRITE_GLYPH_ORIENTATION_ANGLE.@"0_DEGREES";
pub const DWRITE_GLYPH_ORIENTATION_ANGLE_90_DEGREES = DWRITE_GLYPH_ORIENTATION_ANGLE.@"90_DEGREES";
pub const DWRITE_GLYPH_ORIENTATION_ANGLE_180_DEGREES = DWRITE_GLYPH_ORIENTATION_ANGLE.@"180_DEGREES";
pub const DWRITE_GLYPH_ORIENTATION_ANGLE_270_DEGREES = DWRITE_GLYPH_ORIENTATION_ANGLE.@"270_DEGREES";

pub const DWRITE_FONT_METRICS1 = extern struct {
    __AnonymousBase_DWrite_1_L627_C38: DWRITE_FONT_METRICS,
    glyphBoxLeft: i16,
    glyphBoxTop: i16,
    glyphBoxRight: i16,
    glyphBoxBottom: i16,
    subscriptPositionX: i16,
    subscriptPositionY: i16,
    subscriptSizeX: i16,
    subscriptSizeY: i16,
    superscriptPositionX: i16,
    superscriptPositionY: i16,
    superscriptSizeX: i16,
    superscriptSizeY: i16,
    hasTypographicMetrics: BOOL,
};

pub const DWRITE_CARET_METRICS = extern struct {
    slopeRise: i16,
    slopeRun: i16,
    offset: i16,
};

pub const DWRITE_PANOSE = extern union {
    values: [10]u8,
    familyKind: u8,
    text: extern struct {
        familyKind: u8,
        serifStyle: u8,
        weight: u8,
        proportion: u8,
        contrast: u8,
        strokeVariation: u8,
        armStyle: u8,
        letterform: u8,
        midline: u8,
        xHeight: u8,
    },
    script: extern struct {
        familyKind: u8,
        toolKind: u8,
        weight: u8,
        spacing: u8,
        aspectRatio: u8,
        contrast: u8,
        scriptTopology: u8,
        scriptForm: u8,
        finials: u8,
        xAscent: u8,
    },
    decorative: extern struct {
        familyKind: u8,
        decorativeClass: u8,
        weight: u8,
        aspect: u8,
        contrast: u8,
        serifVariant: u8,
        fill: u8,
        lining: u8,
        decorativeTopology: u8,
        characterRange: u8,
    },
    symbol: extern struct {
        familyKind: u8,
        symbolKind: u8,
        weight: u8,
        spacing: u8,
        aspectRatioAndContrast: u8,
        aspectRatio94: u8,
        aspectRatio119: u8,
        aspectRatio157: u8,
        aspectRatio163: u8,
        aspectRatio211: u8,
    },
};

pub const DWRITE_UNICODE_RANGE = extern struct {
    first: u32,
    last: u32,
};

pub const DWRITE_SCRIPT_PROPERTIES = extern struct {
    isoScriptCode: u32,
    isoScriptNumber: u32,
    clusterLookahead: u32,
    justificationCharacter: u32,
    _bitfield: u32,
};

pub const DWRITE_JUSTIFICATION_OPPORTUNITY = extern struct {
    expansionMinimum: f32,
    expansionMaximum: f32,
    compressionMaximum: f32,
    _bitfield: u32,
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDWriteFactory1_Value = Guid.initString("30572f99-dac6-41db-a16e-0486307e606a");
pub const IID_IDWriteFactory1 = &IID_IDWriteFactory1_Value;
pub const IDWriteFactory1 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFactory.VTable,
        GetEudcFontCollection: *const fn (
            self: *const IDWriteFactory1,
            font_collection: ?*?*IDWriteFontCollection,
            check_for_updates: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCustomRenderingParams: *const fn (
            self: *const IDWriteFactory1,
            gamma: f32,
            enhanced_contrast: f32,
            enhanced_contrast_grayscale: f32,
            clear_type_level: f32,
            pixel_geometry: DWRITE_PIXEL_GEOMETRY,
            rendering_mode: DWRITE_RENDERING_MODE,
            rendering_params: ?*?*IDWriteRenderingParams1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFactory.MethodMixin(T);
            pub inline fn getEudcFontCollection(self: *const T, font_collection_: ?*?*IDWriteFontCollection, check_for_updates_: BOOL) HRESULT {
                return @as(*const IDWriteFactory1.VTable, @ptrCast(self.vtable)).GetEudcFontCollection(@as(*const IDWriteFactory1, @ptrCast(self)), font_collection_, check_for_updates_);
            }
            pub inline fn createCustomRenderingParams(self: *const T, gamma_: f32, enhanced_contrast_: f32, enhanced_contrast_grayscale_: f32, clear_type_level_: f32, pixel_geometry_: DWRITE_PIXEL_GEOMETRY, rendering_mode_: DWRITE_RENDERING_MODE, rendering_params_: ?*?*IDWriteRenderingParams1) HRESULT {
                return @as(*const IDWriteFactory1.VTable, @ptrCast(self.vtable)).CreateCustomRenderingParams(@as(*const IDWriteFactory1, @ptrCast(self)), gamma_, enhanced_contrast_, enhanced_contrast_grayscale_, clear_type_level_, pixel_geometry_, rendering_mode_, rendering_params_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDWriteFontFace1_Value = Guid.initString("a71efdb4-9fdb-4838-ad90-cfc3be8c3daf");
pub const IID_IDWriteFontFace1 = &IID_IDWriteFontFace1_Value;
pub const IDWriteFontFace1 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontFace.VTable,
        GetMetrics: *const fn (
            self: *const IDWriteFontFace1,
            font_metrics: ?*DWRITE_FONT_METRICS1,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetGdiCompatibleMetrics: *const fn (
            self: *const IDWriteFontFace1,
            em_size: f32,
            pixels_per_dip: f32,
            transform: ?*const DWRITE_MATRIX,
            font_metrics: ?*DWRITE_FONT_METRICS1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCaretMetrics: *const fn (
            self: *const IDWriteFontFace1,
            caret_metrics: ?*DWRITE_CARET_METRICS,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetUnicodeRanges: *const fn (
            self: *const IDWriteFontFace1,
            max_range_count: u32,
            unicode_ranges: ?[*]DWRITE_UNICODE_RANGE,
            actual_range_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsMonospacedFont: *const fn (
            self: *const IDWriteFontFace1,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetDesignGlyphAdvances: *const fn (
            self: *const IDWriteFontFace1,
            glyph_count: u32,
            glyph_indices: [*:0]const u16,
            glyph_advances: [*]i32,
            is_sideways: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGdiCompatibleGlyphAdvances: *const fn (
            self: *const IDWriteFontFace1,
            em_size: f32,
            pixels_per_dip: f32,
            transform: ?*const DWRITE_MATRIX,
            use_gdi_natural: BOOL,
            is_sideways: BOOL,
            glyph_count: u32,
            glyph_indices: [*:0]const u16,
            glyph_advances: [*]i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKerningPairAdjustments: *const fn (
            self: *const IDWriteFontFace1,
            glyph_count: u32,
            glyph_indices: [*:0]const u16,
            glyph_advance_adjustments: [*]i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasKerningPairs: *const fn (
            self: *const IDWriteFontFace1,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetRecommendedRenderingMode: *const fn (
            self: *const IDWriteFontFace1,
            font_em_size: f32,
            dpi_x: f32,
            dpi_y: f32,
            transform: ?*const DWRITE_MATRIX,
            is_sideways: BOOL,
            outline_threshold: DWRITE_OUTLINE_THRESHOLD,
            measuring_mode: DWRITE_MEASURING_MODE,
            rendering_mode: ?*DWRITE_RENDERING_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVerticalGlyphVariants: *const fn (
            self: *const IDWriteFontFace1,
            glyph_count: u32,
            nominal_glyph_indices: [*:0]const u16,
            vertical_glyph_indices: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasVerticalGlyphVariants: *const fn (
            self: *const IDWriteFontFace1,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontFace.MethodMixin(T);
            pub inline fn getMetrics(self: *const T, font_metrics_: ?*DWRITE_FONT_METRICS1) void {
                return @as(*const IDWriteFontFace1.VTable, @ptrCast(self.vtable)).GetMetrics(@as(*const IDWriteFontFace1, @ptrCast(self)), font_metrics_);
            }
            pub inline fn getGdiCompatibleMetrics(self: *const T, em_size_: f32, pixels_per_dip_: f32, transform_: ?*const DWRITE_MATRIX, font_metrics_: ?*DWRITE_FONT_METRICS1) HRESULT {
                return @as(*const IDWriteFontFace1.VTable, @ptrCast(self.vtable)).GetGdiCompatibleMetrics(@as(*const IDWriteFontFace1, @ptrCast(self)), em_size_, pixels_per_dip_, transform_, font_metrics_);
            }
            pub inline fn getCaretMetrics(self: *const T, caret_metrics_: ?*DWRITE_CARET_METRICS) void {
                return @as(*const IDWriteFontFace1.VTable, @ptrCast(self.vtable)).GetCaretMetrics(@as(*const IDWriteFontFace1, @ptrCast(self)), caret_metrics_);
            }
            pub inline fn getUnicodeRanges(self: *const T, max_range_count_: u32, unicode_ranges_: ?[*]DWRITE_UNICODE_RANGE, actual_range_count_: ?*u32) HRESULT {
                return @as(*const IDWriteFontFace1.VTable, @ptrCast(self.vtable)).GetUnicodeRanges(@as(*const IDWriteFontFace1, @ptrCast(self)), max_range_count_, unicode_ranges_, actual_range_count_);
            }
            pub inline fn isMonospacedFont(self: *const T) BOOL {
                return @as(*const IDWriteFontFace1.VTable, @ptrCast(self.vtable)).IsMonospacedFont(@as(*const IDWriteFontFace1, @ptrCast(self)));
            }
            pub inline fn getDesignGlyphAdvances(self: *const T, glyph_count_: u32, glyph_indices_: [*:0]const u16, glyph_advances_: [*]i32, is_sideways_: BOOL) HRESULT {
                return @as(*const IDWriteFontFace1.VTable, @ptrCast(self.vtable)).GetDesignGlyphAdvances(@as(*const IDWriteFontFace1, @ptrCast(self)), glyph_count_, glyph_indices_, glyph_advances_, is_sideways_);
            }
            pub inline fn getGdiCompatibleGlyphAdvances(self: *const T, em_size_: f32, pixels_per_dip_: f32, transform_: ?*const DWRITE_MATRIX, use_gdi_natural_: BOOL, is_sideways_: BOOL, glyph_count_: u32, glyph_indices_: [*:0]const u16, glyph_advances_: [*]i32) HRESULT {
                return @as(*const IDWriteFontFace1.VTable, @ptrCast(self.vtable)).GetGdiCompatibleGlyphAdvances(@as(*const IDWriteFontFace1, @ptrCast(self)), em_size_, pixels_per_dip_, transform_, use_gdi_natural_, is_sideways_, glyph_count_, glyph_indices_, glyph_advances_);
            }
            pub inline fn getKerningPairAdjustments(self: *const T, glyph_count_: u32, glyph_indices_: [*:0]const u16, glyph_advance_adjustments_: [*]i32) HRESULT {
                return @as(*const IDWriteFontFace1.VTable, @ptrCast(self.vtable)).GetKerningPairAdjustments(@as(*const IDWriteFontFace1, @ptrCast(self)), glyph_count_, glyph_indices_, glyph_advance_adjustments_);
            }
            pub inline fn hasKerningPairs(self: *const T) BOOL {
                return @as(*const IDWriteFontFace1.VTable, @ptrCast(self.vtable)).HasKerningPairs(@as(*const IDWriteFontFace1, @ptrCast(self)));
            }
            pub inline fn getRecommendedRenderingMode(self: *const T, font_em_size_: f32, dpi_x_: f32, dpi_y_: f32, transform_: ?*const DWRITE_MATRIX, is_sideways_: BOOL, outline_threshold_: DWRITE_OUTLINE_THRESHOLD, measuring_mode_: DWRITE_MEASURING_MODE, rendering_mode_: ?*DWRITE_RENDERING_MODE) HRESULT {
                return @as(*const IDWriteFontFace1.VTable, @ptrCast(self.vtable)).GetRecommendedRenderingMode(@as(*const IDWriteFontFace1, @ptrCast(self)), font_em_size_, dpi_x_, dpi_y_, transform_, is_sideways_, outline_threshold_, measuring_mode_, rendering_mode_);
            }
            pub inline fn getVerticalGlyphVariants(self: *const T, glyph_count_: u32, nominal_glyph_indices_: [*:0]const u16, vertical_glyph_indices_: [*:0]u16) HRESULT {
                return @as(*const IDWriteFontFace1.VTable, @ptrCast(self.vtable)).GetVerticalGlyphVariants(@as(*const IDWriteFontFace1, @ptrCast(self)), glyph_count_, nominal_glyph_indices_, vertical_glyph_indices_);
            }
            pub inline fn hasVerticalGlyphVariants(self: *const T) BOOL {
                return @as(*const IDWriteFontFace1.VTable, @ptrCast(self.vtable)).HasVerticalGlyphVariants(@as(*const IDWriteFontFace1, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDWriteFont1_Value = Guid.initString("acd16696-8c14-4f5d-877e-fe3fc1d32738");
pub const IID_IDWriteFont1 = &IID_IDWriteFont1_Value;
pub const IDWriteFont1 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFont.VTable,
        GetMetrics: *const fn (
            self: *const IDWriteFont1,
            font_metrics: ?*DWRITE_FONT_METRICS1,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetPanose: *const fn (
            self: *const IDWriteFont1,
            panose: ?*DWRITE_PANOSE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetUnicodeRanges: *const fn (
            self: *const IDWriteFont1,
            max_range_count: u32,
            unicode_ranges: ?[*]DWRITE_UNICODE_RANGE,
            actual_range_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsMonospacedFont: *const fn (
            self: *const IDWriteFont1,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFont.MethodMixin(T);
            pub inline fn getMetrics(self: *const T, font_metrics_: ?*DWRITE_FONT_METRICS1) void {
                return @as(*const IDWriteFont1.VTable, @ptrCast(self.vtable)).GetMetrics(@as(*const IDWriteFont1, @ptrCast(self)), font_metrics_);
            }
            pub inline fn getPanose(self: *const T, panose_: ?*DWRITE_PANOSE) void {
                return @as(*const IDWriteFont1.VTable, @ptrCast(self.vtable)).GetPanose(@as(*const IDWriteFont1, @ptrCast(self)), panose_);
            }
            pub inline fn getUnicodeRanges(self: *const T, max_range_count_: u32, unicode_ranges_: ?[*]DWRITE_UNICODE_RANGE, actual_range_count_: ?*u32) HRESULT {
                return @as(*const IDWriteFont1.VTable, @ptrCast(self.vtable)).GetUnicodeRanges(@as(*const IDWriteFont1, @ptrCast(self)), max_range_count_, unicode_ranges_, actual_range_count_);
            }
            pub inline fn isMonospacedFont(self: *const T) BOOL {
                return @as(*const IDWriteFont1.VTable, @ptrCast(self.vtable)).IsMonospacedFont(@as(*const IDWriteFont1, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDWriteRenderingParams1_Value = Guid.initString("94413cf4-a6fc-4248-8b50-6674348fcad3");
pub const IID_IDWriteRenderingParams1 = &IID_IDWriteRenderingParams1_Value;
pub const IDWriteRenderingParams1 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteRenderingParams.VTable,
        GetGrayscaleEnhancedContrast: *const fn (
            self: *const IDWriteRenderingParams1,
        ) callconv(@import("std").os.windows.WINAPI) f32,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteRenderingParams.MethodMixin(T);
            pub inline fn getGrayscaleEnhancedContrast(self: *const T) f32 {
                return @as(*const IDWriteRenderingParams1.VTable, @ptrCast(self.vtable)).GetGrayscaleEnhancedContrast(@as(*const IDWriteRenderingParams1, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDWriteTextAnalyzer1_Value = Guid.initString("80dad800-e21f-4e83-96ce-bfcce500db7c");
pub const IID_IDWriteTextAnalyzer1 = &IID_IDWriteTextAnalyzer1_Value;
pub const IDWriteTextAnalyzer1 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteTextAnalyzer.VTable,
        ApplyCharacterSpacing: *const fn (
            self: *const IDWriteTextAnalyzer1,
            leading_spacing: f32,
            trailing_spacing: f32,
            minimum_advance_width: f32,
            text_length: u32,
            glyph_count: u32,
            cluster_map: [*:0]const u16,
            glyph_advances: [*]const f32,
            glyph_offsets: [*]const DWRITE_GLYPH_OFFSET,
            glyph_properties: [*]const DWRITE_SHAPING_GLYPH_PROPERTIES,
            modified_glyph_advances: [*]f32,
            modified_glyph_offsets: [*]DWRITE_GLYPH_OFFSET,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBaseline: *const fn (
            self: *const IDWriteTextAnalyzer1,
            font_face: ?*IDWriteFontFace,
            baseline: DWRITE_BASELINE,
            is_vertical: BOOL,
            is_simulation_allowed: BOOL,
            script_analysis: DWRITE_SCRIPT_ANALYSIS,
            locale_name: ?[*:0]const u16,
            baseline_coordinate: ?*i32,
            exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AnalyzeVerticalGlyphOrientation: *const fn (
            self: *const IDWriteTextAnalyzer1,
            analysis_source: ?*IDWriteTextAnalysisSource1,
            text_position: u32,
            text_length: u32,
            analysis_sink: ?*IDWriteTextAnalysisSink1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphOrientationTransform: *const fn (
            self: *const IDWriteTextAnalyzer1,
            glyph_orientation_angle: DWRITE_GLYPH_ORIENTATION_ANGLE,
            is_sideways: BOOL,
            transform: ?*DWRITE_MATRIX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScriptProperties: *const fn (
            self: *const IDWriteTextAnalyzer1,
            script_analysis: DWRITE_SCRIPT_ANALYSIS,
            script_properties: ?*DWRITE_SCRIPT_PROPERTIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTextComplexity: *const fn (
            self: *const IDWriteTextAnalyzer1,
            text_string: [*:0]const u16,
            text_length: u32,
            font_face: ?*IDWriteFontFace,
            is_text_simple: ?*BOOL,
            text_length_read: ?*u32,
            glyph_indices: ?[*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetJustificationOpportunities: *const fn (
            self: *const IDWriteTextAnalyzer1,
            font_face: ?*IDWriteFontFace,
            font_em_size: f32,
            script_analysis: DWRITE_SCRIPT_ANALYSIS,
            text_length: u32,
            glyph_count: u32,
            text_string: [*:0]const u16,
            cluster_map: [*:0]const u16,
            glyph_properties: [*]const DWRITE_SHAPING_GLYPH_PROPERTIES,
            justification_opportunities: [*]DWRITE_JUSTIFICATION_OPPORTUNITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        JustifyGlyphAdvances: *const fn (
            self: *const IDWriteTextAnalyzer1,
            line_width: f32,
            glyph_count: u32,
            justification_opportunities: [*]const DWRITE_JUSTIFICATION_OPPORTUNITY,
            glyph_advances: [*]const f32,
            glyph_offsets: [*]const DWRITE_GLYPH_OFFSET,
            justified_glyph_advances: [*]f32,
            justified_glyph_offsets: ?[*]DWRITE_GLYPH_OFFSET,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetJustifiedGlyphs: *const fn (
            self: *const IDWriteTextAnalyzer1,
            font_face: ?*IDWriteFontFace,
            font_em_size: f32,
            script_analysis: DWRITE_SCRIPT_ANALYSIS,
            text_length: u32,
            glyph_count: u32,
            max_glyph_count: u32,
            cluster_map: ?[*:0]const u16,
            glyph_indices: [*:0]const u16,
            glyph_advances: [*]const f32,
            justified_glyph_advances: [*]const f32,
            justified_glyph_offsets: [*]const DWRITE_GLYPH_OFFSET,
            glyph_properties: [*]const DWRITE_SHAPING_GLYPH_PROPERTIES,
            actual_glyph_count: ?*u32,
            modified_cluster_map: ?[*:0]u16,
            modified_glyph_indices: [*:0]u16,
            modified_glyph_advances: [*]f32,
            modified_glyph_offsets: [*]DWRITE_GLYPH_OFFSET,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteTextAnalyzer.MethodMixin(T);
            pub inline fn applyCharacterSpacing(self: *const T, leading_spacing_: f32, trailing_spacing_: f32, minimum_advance_width_: f32, text_length_: u32, glyph_count_: u32, cluster_map_: [*:0]const u16, glyph_advances_: [*]const f32, glyph_offsets_: [*]const DWRITE_GLYPH_OFFSET, glyph_properties_: [*]const DWRITE_SHAPING_GLYPH_PROPERTIES, modified_glyph_advances_: [*]f32, modified_glyph_offsets_: [*]DWRITE_GLYPH_OFFSET) HRESULT {
                return @as(*const IDWriteTextAnalyzer1.VTable, @ptrCast(self.vtable)).ApplyCharacterSpacing(@as(*const IDWriteTextAnalyzer1, @ptrCast(self)), leading_spacing_, trailing_spacing_, minimum_advance_width_, text_length_, glyph_count_, cluster_map_, glyph_advances_, glyph_offsets_, glyph_properties_, modified_glyph_advances_, modified_glyph_offsets_);
            }
            pub inline fn getBaseline(self: *const T, font_face_: ?*IDWriteFontFace, baseline_: DWRITE_BASELINE, is_vertical_: BOOL, is_simulation_allowed_: BOOL, script_analysis_: DWRITE_SCRIPT_ANALYSIS, locale_name_: ?[*:0]const u16, baseline_coordinate_: ?*i32, exists_: ?*BOOL) HRESULT {
                return @as(*const IDWriteTextAnalyzer1.VTable, @ptrCast(self.vtable)).GetBaseline(@as(*const IDWriteTextAnalyzer1, @ptrCast(self)), font_face_, baseline_, is_vertical_, is_simulation_allowed_, script_analysis_, locale_name_, baseline_coordinate_, exists_);
            }
            pub inline fn analyzeVerticalGlyphOrientation(self: *const T, analysis_source_: ?*IDWriteTextAnalysisSource1, text_position_: u32, text_length_: u32, analysis_sink_: ?*IDWriteTextAnalysisSink1) HRESULT {
                return @as(*const IDWriteTextAnalyzer1.VTable, @ptrCast(self.vtable)).AnalyzeVerticalGlyphOrientation(@as(*const IDWriteTextAnalyzer1, @ptrCast(self)), analysis_source_, text_position_, text_length_, analysis_sink_);
            }
            pub inline fn getGlyphOrientationTransform(self: *const T, glyph_orientation_angle_: DWRITE_GLYPH_ORIENTATION_ANGLE, is_sideways_: BOOL, transform_: ?*DWRITE_MATRIX) HRESULT {
                return @as(*const IDWriteTextAnalyzer1.VTable, @ptrCast(self.vtable)).GetGlyphOrientationTransform(@as(*const IDWriteTextAnalyzer1, @ptrCast(self)), glyph_orientation_angle_, is_sideways_, transform_);
            }
            pub inline fn getScriptProperties(self: *const T, script_analysis_: DWRITE_SCRIPT_ANALYSIS, script_properties_: ?*DWRITE_SCRIPT_PROPERTIES) HRESULT {
                return @as(*const IDWriteTextAnalyzer1.VTable, @ptrCast(self.vtable)).GetScriptProperties(@as(*const IDWriteTextAnalyzer1, @ptrCast(self)), script_analysis_, script_properties_);
            }
            pub inline fn getTextComplexity(self: *const T, text_string_: [*:0]const u16, text_length_: u32, font_face_: ?*IDWriteFontFace, is_text_simple_: ?*BOOL, text_length_read_: ?*u32, glyph_indices_: ?[*:0]u16) HRESULT {
                return @as(*const IDWriteTextAnalyzer1.VTable, @ptrCast(self.vtable)).GetTextComplexity(@as(*const IDWriteTextAnalyzer1, @ptrCast(self)), text_string_, text_length_, font_face_, is_text_simple_, text_length_read_, glyph_indices_);
            }
            pub inline fn getJustificationOpportunities(self: *const T, font_face_: ?*IDWriteFontFace, font_em_size_: f32, script_analysis_: DWRITE_SCRIPT_ANALYSIS, text_length_: u32, glyph_count_: u32, text_string_: [*:0]const u16, cluster_map_: [*:0]const u16, glyph_properties_: [*]const DWRITE_SHAPING_GLYPH_PROPERTIES, justification_opportunities_: [*]DWRITE_JUSTIFICATION_OPPORTUNITY) HRESULT {
                return @as(*const IDWriteTextAnalyzer1.VTable, @ptrCast(self.vtable)).GetJustificationOpportunities(@as(*const IDWriteTextAnalyzer1, @ptrCast(self)), font_face_, font_em_size_, script_analysis_, text_length_, glyph_count_, text_string_, cluster_map_, glyph_properties_, justification_opportunities_);
            }
            pub inline fn justifyGlyphAdvances(self: *const T, line_width_: f32, glyph_count_: u32, justification_opportunities_: [*]const DWRITE_JUSTIFICATION_OPPORTUNITY, glyph_advances_: [*]const f32, glyph_offsets_: [*]const DWRITE_GLYPH_OFFSET, justified_glyph_advances_: [*]f32, justified_glyph_offsets_: ?[*]DWRITE_GLYPH_OFFSET) HRESULT {
                return @as(*const IDWriteTextAnalyzer1.VTable, @ptrCast(self.vtable)).JustifyGlyphAdvances(@as(*const IDWriteTextAnalyzer1, @ptrCast(self)), line_width_, glyph_count_, justification_opportunities_, glyph_advances_, glyph_offsets_, justified_glyph_advances_, justified_glyph_offsets_);
            }
            pub inline fn getJustifiedGlyphs(self: *const T, font_face_: ?*IDWriteFontFace, font_em_size_: f32, script_analysis_: DWRITE_SCRIPT_ANALYSIS, text_length_: u32, glyph_count_: u32, max_glyph_count_: u32, cluster_map_: ?[*:0]const u16, glyph_indices_: [*:0]const u16, glyph_advances_: [*]const f32, justified_glyph_advances_: [*]const f32, justified_glyph_offsets_: [*]const DWRITE_GLYPH_OFFSET, glyph_properties_: [*]const DWRITE_SHAPING_GLYPH_PROPERTIES, actual_glyph_count_: ?*u32, modified_cluster_map_: ?[*:0]u16, modified_glyph_indices_: [*:0]u16, modified_glyph_advances_: [*]f32, modified_glyph_offsets_: [*]DWRITE_GLYPH_OFFSET) HRESULT {
                return @as(*const IDWriteTextAnalyzer1.VTable, @ptrCast(self.vtable)).GetJustifiedGlyphs(@as(*const IDWriteTextAnalyzer1, @ptrCast(self)), font_face_, font_em_size_, script_analysis_, text_length_, glyph_count_, max_glyph_count_, cluster_map_, glyph_indices_, glyph_advances_, justified_glyph_advances_, justified_glyph_offsets_, glyph_properties_, actual_glyph_count_, modified_cluster_map_, modified_glyph_indices_, modified_glyph_advances_, modified_glyph_offsets_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDWriteTextAnalysisSource1_Value = Guid.initString("639cfad8-0fb4-4b21-a58a-067920120009");
pub const IID_IDWriteTextAnalysisSource1 = &IID_IDWriteTextAnalysisSource1_Value;
pub const IDWriteTextAnalysisSource1 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteTextAnalysisSource.VTable,
        GetVerticalGlyphOrientation: *const fn (
            self: *const IDWriteTextAnalysisSource1,
            text_position: u32,
            text_length: ?*u32,
            glyph_orientation: ?*DWRITE_VERTICAL_GLYPH_ORIENTATION,
            bidi_level: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteTextAnalysisSource.MethodMixin(T);
            pub inline fn getVerticalGlyphOrientation(self: *const T, text_position_: u32, text_length_: ?*u32, glyph_orientation_: ?*DWRITE_VERTICAL_GLYPH_ORIENTATION, bidi_level_: ?*u8) HRESULT {
                return @as(*const IDWriteTextAnalysisSource1.VTable, @ptrCast(self.vtable)).GetVerticalGlyphOrientation(@as(*const IDWriteTextAnalysisSource1, @ptrCast(self)), text_position_, text_length_, glyph_orientation_, bidi_level_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDWriteTextAnalysisSink1_Value = Guid.initString("b0d941a0-85e7-4d8b-9fd3-5ced9934482a");
pub const IID_IDWriteTextAnalysisSink1 = &IID_IDWriteTextAnalysisSink1_Value;
pub const IDWriteTextAnalysisSink1 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteTextAnalysisSink.VTable,
        SetGlyphOrientation: *const fn (
            self: *const IDWriteTextAnalysisSink1,
            text_position: u32,
            text_length: u32,
            glyph_orientation_angle: DWRITE_GLYPH_ORIENTATION_ANGLE,
            adjusted_bidi_level: u8,
            is_sideways: BOOL,
            is_right_to_left: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteTextAnalysisSink.MethodMixin(T);
            pub inline fn setGlyphOrientation(self: *const T, text_position_: u32, text_length_: u32, glyph_orientation_angle_: DWRITE_GLYPH_ORIENTATION_ANGLE, adjusted_bidi_level_: u8, is_sideways_: BOOL, is_right_to_left_: BOOL) HRESULT {
                return @as(*const IDWriteTextAnalysisSink1.VTable, @ptrCast(self.vtable)).SetGlyphOrientation(@as(*const IDWriteTextAnalysisSink1, @ptrCast(self)), text_position_, text_length_, glyph_orientation_angle_, adjusted_bidi_level_, is_sideways_, is_right_to_left_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDWriteTextLayout1_Value = Guid.initString("9064d822-80a7-465c-a986-df65f78b8feb");
pub const IID_IDWriteTextLayout1 = &IID_IDWriteTextLayout1_Value;
pub const IDWriteTextLayout1 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteTextLayout.VTable,
        SetPairKerning: *const fn (
            self: *const IDWriteTextLayout1,
            is_pair_kerning_enabled: BOOL,
            text_range: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPairKerning: *const fn (
            self: *const IDWriteTextLayout1,
            current_position: u32,
            is_pair_kerning_enabled: ?*BOOL,
            text_range: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCharacterSpacing: *const fn (
            self: *const IDWriteTextLayout1,
            leading_spacing: f32,
            trailing_spacing: f32,
            minimum_advance_width: f32,
            text_range: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCharacterSpacing: *const fn (
            self: *const IDWriteTextLayout1,
            current_position: u32,
            leading_spacing: ?*f32,
            trailing_spacing: ?*f32,
            minimum_advance_width: ?*f32,
            text_range: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteTextLayout.MethodMixin(T);
            pub inline fn setPairKerning(self: *const T, is_pair_kerning_enabled_: BOOL, text_range_: DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout1.VTable, @ptrCast(self.vtable)).SetPairKerning(@as(*const IDWriteTextLayout1, @ptrCast(self)), is_pair_kerning_enabled_, text_range_);
            }
            pub inline fn getPairKerning(self: *const T, current_position_: u32, is_pair_kerning_enabled_: ?*BOOL, text_range_: ?*DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout1.VTable, @ptrCast(self.vtable)).GetPairKerning(@as(*const IDWriteTextLayout1, @ptrCast(self)), current_position_, is_pair_kerning_enabled_, text_range_);
            }
            pub inline fn setCharacterSpacing(self: *const T, leading_spacing_: f32, trailing_spacing_: f32, minimum_advance_width_: f32, text_range_: DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout1.VTable, @ptrCast(self.vtable)).SetCharacterSpacing(@as(*const IDWriteTextLayout1, @ptrCast(self)), leading_spacing_, trailing_spacing_, minimum_advance_width_, text_range_);
            }
            pub inline fn getCharacterSpacing(self: *const T, current_position_: u32, leading_spacing_: ?*f32, trailing_spacing_: ?*f32, minimum_advance_width_: ?*f32, text_range_: ?*DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout1.VTable, @ptrCast(self.vtable)).GetCharacterSpacing(@as(*const IDWriteTextLayout1, @ptrCast(self)), current_position_, leading_spacing_, trailing_spacing_, minimum_advance_width_, text_range_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DWRITE_TEXT_ANTIALIAS_MODE = enum(i32) {
    CLEARTYPE = 0,
    GRAYSCALE = 1,
};
pub const DWRITE_TEXT_ANTIALIAS_MODE_CLEARTYPE = DWRITE_TEXT_ANTIALIAS_MODE.CLEARTYPE;
pub const DWRITE_TEXT_ANTIALIAS_MODE_GRAYSCALE = DWRITE_TEXT_ANTIALIAS_MODE.GRAYSCALE;

// TODO: this type is limited to platform 'windows8.0'
const IID_IDWriteBitmapRenderTarget1_Value = Guid.initString("791e8298-3ef3-4230-9880-c9bdecc42064");
pub const IID_IDWriteBitmapRenderTarget1 = &IID_IDWriteBitmapRenderTarget1_Value;
pub const IDWriteBitmapRenderTarget1 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteBitmapRenderTarget.VTable,
        GetTextAntialiasMode: *const fn (
            self: *const IDWriteBitmapRenderTarget1,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_TEXT_ANTIALIAS_MODE,
        SetTextAntialiasMode: *const fn (
            self: *const IDWriteBitmapRenderTarget1,
            antialias_mode: DWRITE_TEXT_ANTIALIAS_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteBitmapRenderTarget.MethodMixin(T);
            pub inline fn getTextAntialiasMode(self: *const T) DWRITE_TEXT_ANTIALIAS_MODE {
                return @as(*const IDWriteBitmapRenderTarget1.VTable, @ptrCast(self.vtable)).GetTextAntialiasMode(@as(*const IDWriteBitmapRenderTarget1, @ptrCast(self)));
            }
            pub inline fn setTextAntialiasMode(self: *const T, antialias_mode_: DWRITE_TEXT_ANTIALIAS_MODE) HRESULT {
                return @as(*const IDWriteBitmapRenderTarget1.VTable, @ptrCast(self.vtable)).SetTextAntialiasMode(@as(*const IDWriteBitmapRenderTarget1, @ptrCast(self)), antialias_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DWRITE_OPTICAL_ALIGNMENT = enum(i32) {
    NE = 0,
    _SIDE_BEARINGS = 1,
};
pub const DWRITE_OPTICAL_ALIGNMENT_NONE = DWRITE_OPTICAL_ALIGNMENT.NE;
pub const DWRITE_OPTICAL_ALIGNMENT_NO_SIDE_BEARINGS = DWRITE_OPTICAL_ALIGNMENT._SIDE_BEARINGS;

pub const DWRITE_GRID_FIT_MODE = enum(i32) {
    DEFAULT = 0,
    DISABLED = 1,
    ENABLED = 2,
};
pub const DWRITE_GRID_FIT_MODE_DEFAULT = DWRITE_GRID_FIT_MODE.DEFAULT;
pub const DWRITE_GRID_FIT_MODE_DISABLED = DWRITE_GRID_FIT_MODE.DISABLED;
pub const DWRITE_GRID_FIT_MODE_ENABLED = DWRITE_GRID_FIT_MODE.ENABLED;

pub const DWRITE_TEXT_METRICS1 = extern struct {
    Base: DWRITE_TEXT_METRICS,
    heightIncludingTrailingWhitespace: f32,
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteTextRenderer1_Value = Guid.initString("d3e0e934-22a0-427e-aae4-7d9574b59db1");
pub const IID_IDWriteTextRenderer1 = &IID_IDWriteTextRenderer1_Value;
pub const IDWriteTextRenderer1 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteTextRenderer.VTable,
        DrawGlyphRun: *const fn (
            self: *const IDWriteTextRenderer1,
            client_drawing_context: ?*anyopaque,
            baseline_origin_x: f32,
            baseline_origin_y: f32,
            orientation_angle: DWRITE_GLYPH_ORIENTATION_ANGLE,
            measuring_mode: DWRITE_MEASURING_MODE,
            glyph_run: ?*const DWRITE_GLYPH_RUN,
            glyph_run_description: ?*const DWRITE_GLYPH_RUN_DESCRIPTION,
            client_drawing_effect: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawUnderline: *const fn (
            self: *const IDWriteTextRenderer1,
            client_drawing_context: ?*anyopaque,
            baseline_origin_x: f32,
            baseline_origin_y: f32,
            orientation_angle: DWRITE_GLYPH_ORIENTATION_ANGLE,
            underline: ?*const DWRITE_UNDERLINE,
            client_drawing_effect: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawStrikethrough: *const fn (
            self: *const IDWriteTextRenderer1,
            client_drawing_context: ?*anyopaque,
            baseline_origin_x: f32,
            baseline_origin_y: f32,
            orientation_angle: DWRITE_GLYPH_ORIENTATION_ANGLE,
            strikethrough: ?*const DWRITE_STRIKETHROUGH,
            client_drawing_effect: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawInlineObject: *const fn (
            self: *const IDWriteTextRenderer1,
            client_drawing_context: ?*anyopaque,
            origin_x: f32,
            origin_y: f32,
            orientation_angle: DWRITE_GLYPH_ORIENTATION_ANGLE,
            inline_object: ?*IDWriteInlineObject,
            is_sideways: BOOL,
            is_right_to_left: BOOL,
            client_drawing_effect: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteTextRenderer.MethodMixin(T);
            pub inline fn drawGlyphRun(self: *const T, client_drawing_context_: ?*anyopaque, baseline_origin_x_: f32, baseline_origin_y_: f32, orientation_angle_: DWRITE_GLYPH_ORIENTATION_ANGLE, measuring_mode_: DWRITE_MEASURING_MODE, glyph_run_: ?*const DWRITE_GLYPH_RUN, glyph_run_description_: ?*const DWRITE_GLYPH_RUN_DESCRIPTION, client_drawing_effect_: ?*IUnknown) HRESULT {
                return @as(*const IDWriteTextRenderer1.VTable, @ptrCast(self.vtable)).DrawGlyphRun(@as(*const IDWriteTextRenderer1, @ptrCast(self)), client_drawing_context_, baseline_origin_x_, baseline_origin_y_, orientation_angle_, measuring_mode_, glyph_run_, glyph_run_description_, client_drawing_effect_);
            }
            pub inline fn drawUnderline(self: *const T, client_drawing_context_: ?*anyopaque, baseline_origin_x_: f32, baseline_origin_y_: f32, orientation_angle_: DWRITE_GLYPH_ORIENTATION_ANGLE, underline_: ?*const DWRITE_UNDERLINE, client_drawing_effect_: ?*IUnknown) HRESULT {
                return @as(*const IDWriteTextRenderer1.VTable, @ptrCast(self.vtable)).DrawUnderline(@as(*const IDWriteTextRenderer1, @ptrCast(self)), client_drawing_context_, baseline_origin_x_, baseline_origin_y_, orientation_angle_, underline_, client_drawing_effect_);
            }
            pub inline fn drawStrikethrough(self: *const T, client_drawing_context_: ?*anyopaque, baseline_origin_x_: f32, baseline_origin_y_: f32, orientation_angle_: DWRITE_GLYPH_ORIENTATION_ANGLE, strikethrough_: ?*const DWRITE_STRIKETHROUGH, client_drawing_effect_: ?*IUnknown) HRESULT {
                return @as(*const IDWriteTextRenderer1.VTable, @ptrCast(self.vtable)).DrawStrikethrough(@as(*const IDWriteTextRenderer1, @ptrCast(self)), client_drawing_context_, baseline_origin_x_, baseline_origin_y_, orientation_angle_, strikethrough_, client_drawing_effect_);
            }
            pub inline fn drawInlineObject(self: *const T, client_drawing_context_: ?*anyopaque, origin_x_: f32, origin_y_: f32, orientation_angle_: DWRITE_GLYPH_ORIENTATION_ANGLE, inline_object_: ?*IDWriteInlineObject, is_sideways_: BOOL, is_right_to_left_: BOOL, client_drawing_effect_: ?*IUnknown) HRESULT {
                return @as(*const IDWriteTextRenderer1.VTable, @ptrCast(self.vtable)).DrawInlineObject(@as(*const IDWriteTextRenderer1, @ptrCast(self)), client_drawing_context_, origin_x_, origin_y_, orientation_angle_, inline_object_, is_sideways_, is_right_to_left_, client_drawing_effect_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteTextFormat1_Value = Guid.initString("5f174b49-0d8b-4cfb-8bca-f1cce9d06c67");
pub const IID_IDWriteTextFormat1 = &IID_IDWriteTextFormat1_Value;
pub const IDWriteTextFormat1 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteTextFormat.VTable,
        SetVerticalGlyphOrientation: *const fn (
            self: *const IDWriteTextFormat1,
            glyph_orientation: DWRITE_VERTICAL_GLYPH_ORIENTATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVerticalGlyphOrientation: *const fn (
            self: *const IDWriteTextFormat1,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_VERTICAL_GLYPH_ORIENTATION,
        SetLastLineWrapping: *const fn (
            self: *const IDWriteTextFormat1,
            is_last_line_wrapping_enabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastLineWrapping: *const fn (
            self: *const IDWriteTextFormat1,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        SetOpticalAlignment: *const fn (
            self: *const IDWriteTextFormat1,
            optical_alignment: DWRITE_OPTICAL_ALIGNMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOpticalAlignment: *const fn (
            self: *const IDWriteTextFormat1,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_OPTICAL_ALIGNMENT,
        SetFontFallback: *const fn (
            self: *const IDWriteTextFormat1,
            font_fallback: ?*IDWriteFontFallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFallback: *const fn (
            self: *const IDWriteTextFormat1,
            font_fallback: ?*?*IDWriteFontFallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteTextFormat.MethodMixin(T);
            pub inline fn setVerticalGlyphOrientation(self: *const T, glyph_orientation_: DWRITE_VERTICAL_GLYPH_ORIENTATION) HRESULT {
                return @as(*const IDWriteTextFormat1.VTable, @ptrCast(self.vtable)).SetVerticalGlyphOrientation(@as(*const IDWriteTextFormat1, @ptrCast(self)), glyph_orientation_);
            }
            pub inline fn getVerticalGlyphOrientation(self: *const T) DWRITE_VERTICAL_GLYPH_ORIENTATION {
                return @as(*const IDWriteTextFormat1.VTable, @ptrCast(self.vtable)).GetVerticalGlyphOrientation(@as(*const IDWriteTextFormat1, @ptrCast(self)));
            }
            pub inline fn setLastLineWrapping(self: *const T, is_last_line_wrapping_enabled_: BOOL) HRESULT {
                return @as(*const IDWriteTextFormat1.VTable, @ptrCast(self.vtable)).SetLastLineWrapping(@as(*const IDWriteTextFormat1, @ptrCast(self)), is_last_line_wrapping_enabled_);
            }
            pub inline fn getLastLineWrapping(self: *const T) BOOL {
                return @as(*const IDWriteTextFormat1.VTable, @ptrCast(self.vtable)).GetLastLineWrapping(@as(*const IDWriteTextFormat1, @ptrCast(self)));
            }
            pub inline fn setOpticalAlignment(self: *const T, optical_alignment_: DWRITE_OPTICAL_ALIGNMENT) HRESULT {
                return @as(*const IDWriteTextFormat1.VTable, @ptrCast(self.vtable)).SetOpticalAlignment(@as(*const IDWriteTextFormat1, @ptrCast(self)), optical_alignment_);
            }
            pub inline fn getOpticalAlignment(self: *const T) DWRITE_OPTICAL_ALIGNMENT {
                return @as(*const IDWriteTextFormat1.VTable, @ptrCast(self.vtable)).GetOpticalAlignment(@as(*const IDWriteTextFormat1, @ptrCast(self)));
            }
            pub inline fn setFontFallback(self: *const T, font_fallback_: ?*IDWriteFontFallback) HRESULT {
                return @as(*const IDWriteTextFormat1.VTable, @ptrCast(self.vtable)).SetFontFallback(@as(*const IDWriteTextFormat1, @ptrCast(self)), font_fallback_);
            }
            pub inline fn getFontFallback(self: *const T, font_fallback_: ?*?*IDWriteFontFallback) HRESULT {
                return @as(*const IDWriteTextFormat1.VTable, @ptrCast(self.vtable)).GetFontFallback(@as(*const IDWriteTextFormat1, @ptrCast(self)), font_fallback_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteTextLayout2_Value = Guid.initString("1093c18f-8d5e-43f0-b064-0917311b525e");
pub const IID_IDWriteTextLayout2 = &IID_IDWriteTextLayout2_Value;
pub const IDWriteTextLayout2 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteTextLayout1.VTable,
        GetMetrics: *const fn (
            self: *const IDWriteTextLayout2,
            text_metrics: ?*DWRITE_TEXT_METRICS1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVerticalGlyphOrientation: *const fn (
            self: *const IDWriteTextLayout2,
            glyph_orientation: DWRITE_VERTICAL_GLYPH_ORIENTATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVerticalGlyphOrientation: *const fn (
            self: *const IDWriteTextLayout2,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_VERTICAL_GLYPH_ORIENTATION,
        SetLastLineWrapping: *const fn (
            self: *const IDWriteTextLayout2,
            is_last_line_wrapping_enabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastLineWrapping: *const fn (
            self: *const IDWriteTextLayout2,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        SetOpticalAlignment: *const fn (
            self: *const IDWriteTextLayout2,
            optical_alignment: DWRITE_OPTICAL_ALIGNMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOpticalAlignment: *const fn (
            self: *const IDWriteTextLayout2,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_OPTICAL_ALIGNMENT,
        SetFontFallback: *const fn (
            self: *const IDWriteTextLayout2,
            font_fallback: ?*IDWriteFontFallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFallback: *const fn (
            self: *const IDWriteTextLayout2,
            font_fallback: ?*?*IDWriteFontFallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteTextLayout1.MethodMixin(T);
            pub inline fn getMetrics(self: *const T, text_metrics_: ?*DWRITE_TEXT_METRICS1) HRESULT {
                return @as(*const IDWriteTextLayout2.VTable, @ptrCast(self.vtable)).GetMetrics(@as(*const IDWriteTextLayout2, @ptrCast(self)), text_metrics_);
            }
            pub inline fn setVerticalGlyphOrientation(self: *const T, glyph_orientation_: DWRITE_VERTICAL_GLYPH_ORIENTATION) HRESULT {
                return @as(*const IDWriteTextLayout2.VTable, @ptrCast(self.vtable)).SetVerticalGlyphOrientation(@as(*const IDWriteTextLayout2, @ptrCast(self)), glyph_orientation_);
            }
            pub inline fn getVerticalGlyphOrientation(self: *const T) DWRITE_VERTICAL_GLYPH_ORIENTATION {
                return @as(*const IDWriteTextLayout2.VTable, @ptrCast(self.vtable)).GetVerticalGlyphOrientation(@as(*const IDWriteTextLayout2, @ptrCast(self)));
            }
            pub inline fn setLastLineWrapping(self: *const T, is_last_line_wrapping_enabled_: BOOL) HRESULT {
                return @as(*const IDWriteTextLayout2.VTable, @ptrCast(self.vtable)).SetLastLineWrapping(@as(*const IDWriteTextLayout2, @ptrCast(self)), is_last_line_wrapping_enabled_);
            }
            pub inline fn getLastLineWrapping(self: *const T) BOOL {
                return @as(*const IDWriteTextLayout2.VTable, @ptrCast(self.vtable)).GetLastLineWrapping(@as(*const IDWriteTextLayout2, @ptrCast(self)));
            }
            pub inline fn setOpticalAlignment(self: *const T, optical_alignment_: DWRITE_OPTICAL_ALIGNMENT) HRESULT {
                return @as(*const IDWriteTextLayout2.VTable, @ptrCast(self.vtable)).SetOpticalAlignment(@as(*const IDWriteTextLayout2, @ptrCast(self)), optical_alignment_);
            }
            pub inline fn getOpticalAlignment(self: *const T) DWRITE_OPTICAL_ALIGNMENT {
                return @as(*const IDWriteTextLayout2.VTable, @ptrCast(self.vtable)).GetOpticalAlignment(@as(*const IDWriteTextLayout2, @ptrCast(self)));
            }
            pub inline fn setFontFallback(self: *const T, font_fallback_: ?*IDWriteFontFallback) HRESULT {
                return @as(*const IDWriteTextLayout2.VTable, @ptrCast(self.vtable)).SetFontFallback(@as(*const IDWriteTextLayout2, @ptrCast(self)), font_fallback_);
            }
            pub inline fn getFontFallback(self: *const T, font_fallback_: ?*?*IDWriteFontFallback) HRESULT {
                return @as(*const IDWriteTextLayout2.VTable, @ptrCast(self.vtable)).GetFontFallback(@as(*const IDWriteTextLayout2, @ptrCast(self)), font_fallback_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteTextAnalyzer2_Value = Guid.initString("553a9ff3-5693-4df7-b52b-74806f7f2eb9");
pub const IID_IDWriteTextAnalyzer2 = &IID_IDWriteTextAnalyzer2_Value;
pub const IDWriteTextAnalyzer2 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteTextAnalyzer1.VTable,
        GetGlyphOrientationTransform: *const fn (
            self: *const IDWriteTextAnalyzer2,
            glyph_orientation_angle: DWRITE_GLYPH_ORIENTATION_ANGLE,
            is_sideways: BOOL,
            origin_x: f32,
            origin_y: f32,
            transform: ?*DWRITE_MATRIX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTypographicFeatures: *const fn (
            self: *const IDWriteTextAnalyzer2,
            font_face: ?*IDWriteFontFace,
            script_analysis: DWRITE_SCRIPT_ANALYSIS,
            locale_name: ?[*:0]const u16,
            max_tag_count: u32,
            actual_tag_count: ?*u32,
            tags: [*]DWRITE_FONT_FEATURE_TAG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckTypographicFeature: *const fn (
            self: *const IDWriteTextAnalyzer2,
            font_face: ?*IDWriteFontFace,
            script_analysis: DWRITE_SCRIPT_ANALYSIS,
            locale_name: ?[*:0]const u16,
            feature_tag: DWRITE_FONT_FEATURE_TAG,
            glyph_count: u32,
            glyph_indices: [*:0]const u16,
            feature_applies: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteTextAnalyzer1.MethodMixin(T);
            pub inline fn getGlyphOrientationTransform(self: *const T, glyph_orientation_angle_: DWRITE_GLYPH_ORIENTATION_ANGLE, is_sideways_: BOOL, origin_x_: f32, origin_y_: f32, transform_: ?*DWRITE_MATRIX) HRESULT {
                return @as(*const IDWriteTextAnalyzer2.VTable, @ptrCast(self.vtable)).GetGlyphOrientationTransform(@as(*const IDWriteTextAnalyzer2, @ptrCast(self)), glyph_orientation_angle_, is_sideways_, origin_x_, origin_y_, transform_);
            }
            pub inline fn getTypographicFeatures(self: *const T, font_face_: ?*IDWriteFontFace, script_analysis_: DWRITE_SCRIPT_ANALYSIS, locale_name_: ?[*:0]const u16, max_tag_count_: u32, actual_tag_count_: ?*u32, tags_: [*]DWRITE_FONT_FEATURE_TAG) HRESULT {
                return @as(*const IDWriteTextAnalyzer2.VTable, @ptrCast(self.vtable)).GetTypographicFeatures(@as(*const IDWriteTextAnalyzer2, @ptrCast(self)), font_face_, script_analysis_, locale_name_, max_tag_count_, actual_tag_count_, tags_);
            }
            pub inline fn checkTypographicFeature(self: *const T, font_face_: ?*IDWriteFontFace, script_analysis_: DWRITE_SCRIPT_ANALYSIS, locale_name_: ?[*:0]const u16, feature_tag_: DWRITE_FONT_FEATURE_TAG, glyph_count_: u32, glyph_indices_: [*:0]const u16, feature_applies_: [*:0]u8) HRESULT {
                return @as(*const IDWriteTextAnalyzer2.VTable, @ptrCast(self.vtable)).CheckTypographicFeature(@as(*const IDWriteTextAnalyzer2, @ptrCast(self)), font_face_, script_analysis_, locale_name_, feature_tag_, glyph_count_, glyph_indices_, feature_applies_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteFontFallback_Value = Guid.initString("efa008f9-f7a1-48bf-b05c-f224713cc0ff");
pub const IID_IDWriteFontFallback = &IID_IDWriteFontFallback_Value;
pub const IDWriteFontFallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MapCharacters: *const fn (
            self: *const IDWriteFontFallback,
            analysis_source: ?*IDWriteTextAnalysisSource,
            text_position: u32,
            text_length: u32,
            base_font_collection: ?*IDWriteFontCollection,
            base_family_name: ?[*:0]const u16,
            base_weight: DWRITE_FONT_WEIGHT,
            base_style: DWRITE_FONT_STYLE,
            base_stretch: DWRITE_FONT_STRETCH,
            mapped_length: ?*u32,
            mapped_font: ?*?*IDWriteFont,
            scale: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn mapCharacters(self: *const T, analysis_source_: ?*IDWriteTextAnalysisSource, text_position_: u32, text_length_: u32, base_font_collection_: ?*IDWriteFontCollection, base_family_name_: ?[*:0]const u16, base_weight_: DWRITE_FONT_WEIGHT, base_style_: DWRITE_FONT_STYLE, base_stretch_: DWRITE_FONT_STRETCH, mapped_length_: ?*u32, mapped_font_: ?*?*IDWriteFont, scale_: ?*f32) HRESULT {
                return @as(*const IDWriteFontFallback.VTable, @ptrCast(self.vtable)).MapCharacters(@as(*const IDWriteFontFallback, @ptrCast(self)), analysis_source_, text_position_, text_length_, base_font_collection_, base_family_name_, base_weight_, base_style_, base_stretch_, mapped_length_, mapped_font_, scale_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteFontFallbackBuilder_Value = Guid.initString("fd882d06-8aba-4fb8-b849-8be8b73e14de");
pub const IID_IDWriteFontFallbackBuilder = &IID_IDWriteFontFallbackBuilder_Value;
pub const IDWriteFontFallbackBuilder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddMapping: *const fn (
            self: *const IDWriteFontFallbackBuilder,
            ranges: [*]const DWRITE_UNICODE_RANGE,
            ranges_count: u32,
            target_family_names: [*]const ?*const u16,
            target_family_names_count: u32,
            font_collection: ?*IDWriteFontCollection,
            locale_name: ?[*:0]const u16,
            base_family_name: ?[*:0]const u16,
            scale: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddMappings: *const fn (
            self: *const IDWriteFontFallbackBuilder,
            font_fallback: ?*IDWriteFontFallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFallback: *const fn (
            self: *const IDWriteFontFallbackBuilder,
            font_fallback: ?*?*IDWriteFontFallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addMapping(self: *const T, ranges_: [*]const DWRITE_UNICODE_RANGE, ranges_count_: u32, target_family_names_: [*]const ?*const u16, target_family_names_count_: u32, font_collection_: ?*IDWriteFontCollection, locale_name_: ?[*:0]const u16, base_family_name_: ?[*:0]const u16, scale_: f32) HRESULT {
                return @as(*const IDWriteFontFallbackBuilder.VTable, @ptrCast(self.vtable)).AddMapping(@as(*const IDWriteFontFallbackBuilder, @ptrCast(self)), ranges_, ranges_count_, target_family_names_, target_family_names_count_, font_collection_, locale_name_, base_family_name_, scale_);
            }
            pub inline fn addMappings(self: *const T, font_fallback_: ?*IDWriteFontFallback) HRESULT {
                return @as(*const IDWriteFontFallbackBuilder.VTable, @ptrCast(self.vtable)).AddMappings(@as(*const IDWriteFontFallbackBuilder, @ptrCast(self)), font_fallback_);
            }
            pub inline fn createFontFallback(self: *const T, font_fallback_: ?*?*IDWriteFontFallback) HRESULT {
                return @as(*const IDWriteFontFallbackBuilder.VTable, @ptrCast(self.vtable)).CreateFontFallback(@as(*const IDWriteFontFallbackBuilder, @ptrCast(self)), font_fallback_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteFont2_Value = Guid.initString("29748ed6-8c9c-4a6a-be0b-d912e8538944");
pub const IID_IDWriteFont2 = &IID_IDWriteFont2_Value;
pub const IDWriteFont2 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFont1.VTable,
        IsColorFont: *const fn (
            self: *const IDWriteFont2,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFont1.MethodMixin(T);
            pub inline fn isColorFont(self: *const T) BOOL {
                return @as(*const IDWriteFont2.VTable, @ptrCast(self.vtable)).IsColorFont(@as(*const IDWriteFont2, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteFontFace2_Value = Guid.initString("d8b768ff-64bc-4e66-982b-ec8e87f693f7");
pub const IID_IDWriteFontFace2 = &IID_IDWriteFontFace2_Value;
pub const IDWriteFontFace2 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontFace1.VTable,
        IsColorFont: *const fn (
            self: *const IDWriteFontFace2,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetColorPaletteCount: *const fn (
            self: *const IDWriteFontFace2,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetPaletteEntryCount: *const fn (
            self: *const IDWriteFontFace2,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetPaletteEntries: *const fn (
            self: *const IDWriteFontFace2,
            color_palette_index: u32,
            first_entry_index: u32,
            entry_count: u32,
            palette_entries: [*]DWRITE_COLOR_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecommendedRenderingMode: *const fn (
            self: *const IDWriteFontFace2,
            font_em_size: f32,
            dpi_x: f32,
            dpi_y: f32,
            transform: ?*const DWRITE_MATRIX,
            is_sideways: BOOL,
            outline_threshold: DWRITE_OUTLINE_THRESHOLD,
            measuring_mode: DWRITE_MEASURING_MODE,
            rendering_params: ?*IDWriteRenderingParams,
            rendering_mode: ?*DWRITE_RENDERING_MODE,
            grid_fit_mode: ?*DWRITE_GRID_FIT_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontFace1.MethodMixin(T);
            pub inline fn isColorFont(self: *const T) BOOL {
                return @as(*const IDWriteFontFace2.VTable, @ptrCast(self.vtable)).IsColorFont(@as(*const IDWriteFontFace2, @ptrCast(self)));
            }
            pub inline fn getColorPaletteCount(self: *const T) u32 {
                return @as(*const IDWriteFontFace2.VTable, @ptrCast(self.vtable)).GetColorPaletteCount(@as(*const IDWriteFontFace2, @ptrCast(self)));
            }
            pub inline fn getPaletteEntryCount(self: *const T) u32 {
                return @as(*const IDWriteFontFace2.VTable, @ptrCast(self.vtable)).GetPaletteEntryCount(@as(*const IDWriteFontFace2, @ptrCast(self)));
            }
            pub inline fn getPaletteEntries(self: *const T, color_palette_index_: u32, first_entry_index_: u32, entry_count_: u32, palette_entries_: [*]DWRITE_COLOR_F) HRESULT {
                return @as(*const IDWriteFontFace2.VTable, @ptrCast(self.vtable)).GetPaletteEntries(@as(*const IDWriteFontFace2, @ptrCast(self)), color_palette_index_, first_entry_index_, entry_count_, palette_entries_);
            }
            pub inline fn getRecommendedRenderingMode(self: *const T, font_em_size_: f32, dpi_x_: f32, dpi_y_: f32, transform_: ?*const DWRITE_MATRIX, is_sideways_: BOOL, outline_threshold_: DWRITE_OUTLINE_THRESHOLD, measuring_mode_: DWRITE_MEASURING_MODE, rendering_params_: ?*IDWriteRenderingParams, rendering_mode_: ?*DWRITE_RENDERING_MODE, grid_fit_mode_: ?*DWRITE_GRID_FIT_MODE) HRESULT {
                return @as(*const IDWriteFontFace2.VTable, @ptrCast(self.vtable)).GetRecommendedRenderingMode(@as(*const IDWriteFontFace2, @ptrCast(self)), font_em_size_, dpi_x_, dpi_y_, transform_, is_sideways_, outline_threshold_, measuring_mode_, rendering_params_, rendering_mode_, grid_fit_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DWRITE_COLOR_GLYPH_RUN = extern struct {
    glyphRun: DWRITE_GLYPH_RUN,
    glyphRunDescription: ?*DWRITE_GLYPH_RUN_DESCRIPTION,
    baselineOriginX: f32,
    baselineOriginY: f32,
    runColor: DWRITE_COLOR_F,
    paletteIndex: u16,
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteColorGlyphRunEnumerator_Value = Guid.initString("d31fbe17-f157-41a2-8d24-cb779e0560e8");
pub const IID_IDWriteColorGlyphRunEnumerator = &IID_IDWriteColorGlyphRunEnumerator_Value;
pub const IDWriteColorGlyphRunEnumerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MoveNext: *const fn (
            self: *const IDWriteColorGlyphRunEnumerator,
            has_run: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentRun: *const fn (
            self: *const IDWriteColorGlyphRunEnumerator,
            color_glyph_run: ?*const ?*DWRITE_COLOR_GLYPH_RUN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn moveNext(self: *const T, has_run_: ?*BOOL) HRESULT {
                return @as(*const IDWriteColorGlyphRunEnumerator.VTable, @ptrCast(self.vtable)).MoveNext(@as(*const IDWriteColorGlyphRunEnumerator, @ptrCast(self)), has_run_);
            }
            pub inline fn getCurrentRun(self: *const T, color_glyph_run_: ?*const ?*DWRITE_COLOR_GLYPH_RUN) HRESULT {
                return @as(*const IDWriteColorGlyphRunEnumerator.VTable, @ptrCast(self.vtable)).GetCurrentRun(@as(*const IDWriteColorGlyphRunEnumerator, @ptrCast(self)), color_glyph_run_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteRenderingParams2_Value = Guid.initString("f9d711c3-9777-40ae-87e8-3e5af9bf0948");
pub const IID_IDWriteRenderingParams2 = &IID_IDWriteRenderingParams2_Value;
pub const IDWriteRenderingParams2 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteRenderingParams1.VTable,
        GetGridFitMode: *const fn (
            self: *const IDWriteRenderingParams2,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_GRID_FIT_MODE,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteRenderingParams1.MethodMixin(T);
            pub inline fn getGridFitMode(self: *const T) DWRITE_GRID_FIT_MODE {
                return @as(*const IDWriteRenderingParams2.VTable, @ptrCast(self.vtable)).GetGridFitMode(@as(*const IDWriteRenderingParams2, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteFactory2_Value = Guid.initString("0439fc60-ca44-4994-8dee-3a9af7b732ec");
pub const IID_IDWriteFactory2 = &IID_IDWriteFactory2_Value;
pub const IDWriteFactory2 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFactory1.VTable,
        GetSystemFontFallback: *const fn (
            self: *const IDWriteFactory2,
            font_fallback: ?*?*IDWriteFontFallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFallbackBuilder: *const fn (
            self: *const IDWriteFactory2,
            font_fallback_builder: ?*?*IDWriteFontFallbackBuilder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateColorGlyphRun: *const fn (
            self: *const IDWriteFactory2,
            baseline_origin_x: f32,
            baseline_origin_y: f32,
            glyph_run: ?*const DWRITE_GLYPH_RUN,
            glyph_run_description: ?*const DWRITE_GLYPH_RUN_DESCRIPTION,
            measuring_mode: DWRITE_MEASURING_MODE,
            world_to_device_transform: ?*const DWRITE_MATRIX,
            color_palette_index: u32,
            color_layers: ?*?*IDWriteColorGlyphRunEnumerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCustomRenderingParams: *const fn (
            self: *const IDWriteFactory2,
            gamma: f32,
            enhanced_contrast: f32,
            grayscale_enhanced_contrast: f32,
            clear_type_level: f32,
            pixel_geometry: DWRITE_PIXEL_GEOMETRY,
            rendering_mode: DWRITE_RENDERING_MODE,
            grid_fit_mode: DWRITE_GRID_FIT_MODE,
            rendering_params: ?*?*IDWriteRenderingParams2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateGlyphRunAnalysis: *const fn (
            self: *const IDWriteFactory2,
            glyph_run: ?*const DWRITE_GLYPH_RUN,
            transform: ?*const DWRITE_MATRIX,
            rendering_mode: DWRITE_RENDERING_MODE,
            measuring_mode: DWRITE_MEASURING_MODE,
            grid_fit_mode: DWRITE_GRID_FIT_MODE,
            antialias_mode: DWRITE_TEXT_ANTIALIAS_MODE,
            baseline_origin_x: f32,
            baseline_origin_y: f32,
            glyph_run_analysis: ?*?*IDWriteGlyphRunAnalysis,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFactory1.MethodMixin(T);
            pub inline fn getSystemFontFallback(self: *const T, font_fallback_: ?*?*IDWriteFontFallback) HRESULT {
                return @as(*const IDWriteFactory2.VTable, @ptrCast(self.vtable)).GetSystemFontFallback(@as(*const IDWriteFactory2, @ptrCast(self)), font_fallback_);
            }
            pub inline fn createFontFallbackBuilder(self: *const T, font_fallback_builder_: ?*?*IDWriteFontFallbackBuilder) HRESULT {
                return @as(*const IDWriteFactory2.VTable, @ptrCast(self.vtable)).CreateFontFallbackBuilder(@as(*const IDWriteFactory2, @ptrCast(self)), font_fallback_builder_);
            }
            pub inline fn translateColorGlyphRun(self: *const T, baseline_origin_x_: f32, baseline_origin_y_: f32, glyph_run_: ?*const DWRITE_GLYPH_RUN, glyph_run_description_: ?*const DWRITE_GLYPH_RUN_DESCRIPTION, measuring_mode_: DWRITE_MEASURING_MODE, world_to_device_transform_: ?*const DWRITE_MATRIX, color_palette_index_: u32, color_layers_: ?*?*IDWriteColorGlyphRunEnumerator) HRESULT {
                return @as(*const IDWriteFactory2.VTable, @ptrCast(self.vtable)).TranslateColorGlyphRun(@as(*const IDWriteFactory2, @ptrCast(self)), baseline_origin_x_, baseline_origin_y_, glyph_run_, glyph_run_description_, measuring_mode_, world_to_device_transform_, color_palette_index_, color_layers_);
            }
            pub inline fn createCustomRenderingParams(self: *const T, gamma_: f32, enhanced_contrast_: f32, grayscale_enhanced_contrast_: f32, clear_type_level_: f32, pixel_geometry_: DWRITE_PIXEL_GEOMETRY, rendering_mode_: DWRITE_RENDERING_MODE, grid_fit_mode_: DWRITE_GRID_FIT_MODE, rendering_params_: ?*?*IDWriteRenderingParams2) HRESULT {
                return @as(*const IDWriteFactory2.VTable, @ptrCast(self.vtable)).CreateCustomRenderingParams(@as(*const IDWriteFactory2, @ptrCast(self)), gamma_, enhanced_contrast_, grayscale_enhanced_contrast_, clear_type_level_, pixel_geometry_, rendering_mode_, grid_fit_mode_, rendering_params_);
            }
            pub inline fn createGlyphRunAnalysis(self: *const T, glyph_run_: ?*const DWRITE_GLYPH_RUN, transform_: ?*const DWRITE_MATRIX, rendering_mode_: DWRITE_RENDERING_MODE, measuring_mode_: DWRITE_MEASURING_MODE, grid_fit_mode_: DWRITE_GRID_FIT_MODE, antialias_mode_: DWRITE_TEXT_ANTIALIAS_MODE, baseline_origin_x_: f32, baseline_origin_y_: f32, glyph_run_analysis_: ?*?*IDWriteGlyphRunAnalysis) HRESULT {
                return @as(*const IDWriteFactory2.VTable, @ptrCast(self.vtable)).CreateGlyphRunAnalysis(@as(*const IDWriteFactory2, @ptrCast(self)), glyph_run_, transform_, rendering_mode_, measuring_mode_, grid_fit_mode_, antialias_mode_, baseline_origin_x_, baseline_origin_y_, glyph_run_analysis_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DWRITE_FONT_PROPERTY_ID = enum(i32) {
    NONE = 0,
    WEIGHT_STRETCH_STYLE_FAMILY_NAME = 1,
    TYPOGRAPHIC_FAMILY_NAME = 2,
    WEIGHT_STRETCH_STYLE_FACE_NAME = 3,
    FULL_NAME = 4,
    WIN32_FAMILY_NAME = 5,
    POSTSCRIPT_NAME = 6,
    DESIGN_SCRIPT_LANGUAGE_TAG = 7,
    SUPPORTED_SCRIPT_LANGUAGE_TAG = 8,
    SEMANTIC_TAG = 9,
    WEIGHT = 10,
    STRETCH = 11,
    STYLE = 12,
    TYPOGRAPHIC_FACE_NAME = 13,
    // TOTAL = 13, this enum value conflicts with TYPOGRAPHIC_FACE_NAME
    TOTAL_RS3 = 14,
    // PREFERRED_FAMILY_NAME = 2, this enum value conflicts with TYPOGRAPHIC_FAMILY_NAME
    // FAMILY_NAME = 1, this enum value conflicts with WEIGHT_STRETCH_STYLE_FAMILY_NAME
    // FACE_NAME = 3, this enum value conflicts with WEIGHT_STRETCH_STYLE_FACE_NAME
};
pub const DWRITE_FONT_PROPERTY_ID_NONE = DWRITE_FONT_PROPERTY_ID.NONE;
pub const DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FAMILY_NAME = DWRITE_FONT_PROPERTY_ID.WEIGHT_STRETCH_STYLE_FAMILY_NAME;
pub const DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FAMILY_NAME = DWRITE_FONT_PROPERTY_ID.TYPOGRAPHIC_FAMILY_NAME;
pub const DWRITE_FONT_PROPERTY_ID_WEIGHT_STRETCH_STYLE_FACE_NAME = DWRITE_FONT_PROPERTY_ID.WEIGHT_STRETCH_STYLE_FACE_NAME;
pub const DWRITE_FONT_PROPERTY_ID_FULL_NAME = DWRITE_FONT_PROPERTY_ID.FULL_NAME;
pub const DWRITE_FONT_PROPERTY_ID_WIN32_FAMILY_NAME = DWRITE_FONT_PROPERTY_ID.WIN32_FAMILY_NAME;
pub const DWRITE_FONT_PROPERTY_ID_POSTSCRIPT_NAME = DWRITE_FONT_PROPERTY_ID.POSTSCRIPT_NAME;
pub const DWRITE_FONT_PROPERTY_ID_DESIGN_SCRIPT_LANGUAGE_TAG = DWRITE_FONT_PROPERTY_ID.DESIGN_SCRIPT_LANGUAGE_TAG;
pub const DWRITE_FONT_PROPERTY_ID_SUPPORTED_SCRIPT_LANGUAGE_TAG = DWRITE_FONT_PROPERTY_ID.SUPPORTED_SCRIPT_LANGUAGE_TAG;
pub const DWRITE_FONT_PROPERTY_ID_SEMANTIC_TAG = DWRITE_FONT_PROPERTY_ID.SEMANTIC_TAG;
pub const DWRITE_FONT_PROPERTY_ID_WEIGHT = DWRITE_FONT_PROPERTY_ID.WEIGHT;
pub const DWRITE_FONT_PROPERTY_ID_STRETCH = DWRITE_FONT_PROPERTY_ID.STRETCH;
pub const DWRITE_FONT_PROPERTY_ID_STYLE = DWRITE_FONT_PROPERTY_ID.STYLE;
pub const DWRITE_FONT_PROPERTY_ID_TYPOGRAPHIC_FACE_NAME = DWRITE_FONT_PROPERTY_ID.TYPOGRAPHIC_FACE_NAME;
pub const DWRITE_FONT_PROPERTY_ID_TOTAL = DWRITE_FONT_PROPERTY_ID.TYPOGRAPHIC_FACE_NAME;
pub const DWRITE_FONT_PROPERTY_ID_TOTAL_RS3 = DWRITE_FONT_PROPERTY_ID.TOTAL_RS3;
pub const DWRITE_FONT_PROPERTY_ID_PREFERRED_FAMILY_NAME = DWRITE_FONT_PROPERTY_ID.TYPOGRAPHIC_FAMILY_NAME;
pub const DWRITE_FONT_PROPERTY_ID_FAMILY_NAME = DWRITE_FONT_PROPERTY_ID.WEIGHT_STRETCH_STYLE_FAMILY_NAME;
pub const DWRITE_FONT_PROPERTY_ID_FACE_NAME = DWRITE_FONT_PROPERTY_ID.WEIGHT_STRETCH_STYLE_FACE_NAME;

pub const DWRITE_FONT_PROPERTY = extern struct {
    propertyId: DWRITE_FONT_PROPERTY_ID,
    propertyValue: ?[*:0]const u16,
    localeName: ?[*:0]const u16,
};

pub const DWRITE_LOCALITY = enum(i32) {
    REMOTE = 0,
    PARTIAL = 1,
    LOCAL = 2,
};
pub const DWRITE_LOCALITY_REMOTE = DWRITE_LOCALITY.REMOTE;
pub const DWRITE_LOCALITY_PARTIAL = DWRITE_LOCALITY.PARTIAL;
pub const DWRITE_LOCALITY_LOCAL = DWRITE_LOCALITY.LOCAL;

pub const DWRITE_RENDERING_MODE1 = enum(i32) {
    DEFAULT = 0,
    ALIASED = 1,
    GDI_CLASSIC = 2,
    GDI_NATURAL = 3,
    NATURAL = 4,
    NATURAL_SYMMETRIC = 5,
    OUTLINE = 6,
    NATURAL_SYMMETRIC_DOWNSAMPLED = 7,
};
pub const DWRITE_RENDERING_MODE1_DEFAULT = DWRITE_RENDERING_MODE1.DEFAULT;
pub const DWRITE_RENDERING_MODE1_ALIASED = DWRITE_RENDERING_MODE1.ALIASED;
pub const DWRITE_RENDERING_MODE1_GDI_CLASSIC = DWRITE_RENDERING_MODE1.GDI_CLASSIC;
pub const DWRITE_RENDERING_MODE1_GDI_NATURAL = DWRITE_RENDERING_MODE1.GDI_NATURAL;
pub const DWRITE_RENDERING_MODE1_NATURAL = DWRITE_RENDERING_MODE1.NATURAL;
pub const DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC = DWRITE_RENDERING_MODE1.NATURAL_SYMMETRIC;
pub const DWRITE_RENDERING_MODE1_OUTLINE = DWRITE_RENDERING_MODE1.OUTLINE;
pub const DWRITE_RENDERING_MODE1_NATURAL_SYMMETRIC_DOWNSAMPLED = DWRITE_RENDERING_MODE1.NATURAL_SYMMETRIC_DOWNSAMPLED;

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IDWriteRenderingParams3_Value = Guid.initString("b7924baa-391b-412a-8c5c-e44cc2d867dc");
pub const IID_IDWriteRenderingParams3 = &IID_IDWriteRenderingParams3_Value;
pub const IDWriteRenderingParams3 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteRenderingParams2.VTable,
        GetRenderingMode1: *const fn (
            self: *const IDWriteRenderingParams3,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_RENDERING_MODE1,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteRenderingParams2.MethodMixin(T);
            pub inline fn getRenderingMode1(self: *const T) DWRITE_RENDERING_MODE1 {
                return @as(*const IDWriteRenderingParams3.VTable, @ptrCast(self.vtable)).GetRenderingMode1(@as(*const IDWriteRenderingParams3, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IDWriteFactory3_Value = Guid.initString("9a1b41c3-d3bb-466a-87fc-fe67556a3b65");
pub const IID_IDWriteFactory3 = &IID_IDWriteFactory3_Value;
pub const IDWriteFactory3 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFactory2.VTable,
        CreateGlyphRunAnalysis: *const fn (
            self: *const IDWriteFactory3,
            glyph_run: ?*const DWRITE_GLYPH_RUN,
            transform: ?*const DWRITE_MATRIX,
            rendering_mode: DWRITE_RENDERING_MODE1,
            measuring_mode: DWRITE_MEASURING_MODE,
            grid_fit_mode: DWRITE_GRID_FIT_MODE,
            antialias_mode: DWRITE_TEXT_ANTIALIAS_MODE,
            baseline_origin_x: f32,
            baseline_origin_y: f32,
            glyph_run_analysis: ?*?*IDWriteGlyphRunAnalysis,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCustomRenderingParams: *const fn (
            self: *const IDWriteFactory3,
            gamma: f32,
            enhanced_contrast: f32,
            grayscale_enhanced_contrast: f32,
            clear_type_level: f32,
            pixel_geometry: DWRITE_PIXEL_GEOMETRY,
            rendering_mode: DWRITE_RENDERING_MODE1,
            grid_fit_mode: DWRITE_GRID_FIT_MODE,
            rendering_params: ?*?*IDWriteRenderingParams3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFaceReference: *const fn (
            self: *const IDWriteFactory3,
            font_file: ?*IDWriteFontFile,
            face_index: u32,
            font_simulations: DWRITE_FONT_SIMULATIONS,
            font_face_reference: ?*?*IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFaceReference1: *const fn (
            self: *const IDWriteFactory3,
            file_path: ?[*:0]const u16,
            last_write_time: ?*const FILETIME,
            face_index: u32,
            font_simulations: DWRITE_FONT_SIMULATIONS,
            font_face_reference: ?*?*IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSystemFontSet: *const fn (
            self: *const IDWriteFactory3,
            font_set: ?*?*IDWriteFontSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontSetBuilder: *const fn (
            self: *const IDWriteFactory3,
            font_set_builder: ?*?*IDWriteFontSetBuilder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontCollectionFromFontSet: *const fn (
            self: *const IDWriteFactory3,
            font_set: ?*IDWriteFontSet,
            font_collection: ?*?*IDWriteFontCollection1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSystemFontCollection: *const fn (
            self: *const IDWriteFactory3,
            include_downloadable_fonts: BOOL,
            font_collection: ?*?*IDWriteFontCollection1,
            check_for_updates: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontDownloadQueue: *const fn (
            self: *const IDWriteFactory3,
            font_download_queue: ?*?*IDWriteFontDownloadQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFactory2.MethodMixin(T);
            pub inline fn createGlyphRunAnalysis(self: *const T, glyph_run_: ?*const DWRITE_GLYPH_RUN, transform_: ?*const DWRITE_MATRIX, rendering_mode_: DWRITE_RENDERING_MODE1, measuring_mode_: DWRITE_MEASURING_MODE, grid_fit_mode_: DWRITE_GRID_FIT_MODE, antialias_mode_: DWRITE_TEXT_ANTIALIAS_MODE, baseline_origin_x_: f32, baseline_origin_y_: f32, glyph_run_analysis_: ?*?*IDWriteGlyphRunAnalysis) HRESULT {
                return @as(*const IDWriteFactory3.VTable, @ptrCast(self.vtable)).CreateGlyphRunAnalysis(@as(*const IDWriteFactory3, @ptrCast(self)), glyph_run_, transform_, rendering_mode_, measuring_mode_, grid_fit_mode_, antialias_mode_, baseline_origin_x_, baseline_origin_y_, glyph_run_analysis_);
            }
            pub inline fn createCustomRenderingParams(self: *const T, gamma_: f32, enhanced_contrast_: f32, grayscale_enhanced_contrast_: f32, clear_type_level_: f32, pixel_geometry_: DWRITE_PIXEL_GEOMETRY, rendering_mode_: DWRITE_RENDERING_MODE1, grid_fit_mode_: DWRITE_GRID_FIT_MODE, rendering_params_: ?*?*IDWriteRenderingParams3) HRESULT {
                return @as(*const IDWriteFactory3.VTable, @ptrCast(self.vtable)).CreateCustomRenderingParams(@as(*const IDWriteFactory3, @ptrCast(self)), gamma_, enhanced_contrast_, grayscale_enhanced_contrast_, clear_type_level_, pixel_geometry_, rendering_mode_, grid_fit_mode_, rendering_params_);
            }
            pub inline fn createFontFaceReference(self: *const T, font_file_: ?*IDWriteFontFile, face_index_: u32, font_simulations_: DWRITE_FONT_SIMULATIONS, font_face_reference_: ?*?*IDWriteFontFaceReference) HRESULT {
                return @as(*const IDWriteFactory3.VTable, @ptrCast(self.vtable)).CreateFontFaceReference(@as(*const IDWriteFactory3, @ptrCast(self)), font_file_, face_index_, font_simulations_, font_face_reference_);
            }
            pub inline fn createFontFaceReference1(self: *const T, file_path_: ?[*:0]const u16, last_write_time_: ?*const FILETIME, face_index_: u32, font_simulations_: DWRITE_FONT_SIMULATIONS, font_face_reference_: ?*?*IDWriteFontFaceReference) HRESULT {
                return @as(*const IDWriteFactory3.VTable, @ptrCast(self.vtable)).CreateFontFaceReference(@as(*const IDWriteFactory3, @ptrCast(self)), file_path_, last_write_time_, face_index_, font_simulations_, font_face_reference_);
            }
            pub inline fn getSystemFontSet(self: *const T, font_set_: ?*?*IDWriteFontSet) HRESULT {
                return @as(*const IDWriteFactory3.VTable, @ptrCast(self.vtable)).GetSystemFontSet(@as(*const IDWriteFactory3, @ptrCast(self)), font_set_);
            }
            pub inline fn createFontSetBuilder(self: *const T, font_set_builder_: ?*?*IDWriteFontSetBuilder) HRESULT {
                return @as(*const IDWriteFactory3.VTable, @ptrCast(self.vtable)).CreateFontSetBuilder(@as(*const IDWriteFactory3, @ptrCast(self)), font_set_builder_);
            }
            pub inline fn createFontCollectionFromFontSet(self: *const T, font_set_: ?*IDWriteFontSet, font_collection_: ?*?*IDWriteFontCollection1) HRESULT {
                return @as(*const IDWriteFactory3.VTable, @ptrCast(self.vtable)).CreateFontCollectionFromFontSet(@as(*const IDWriteFactory3, @ptrCast(self)), font_set_, font_collection_);
            }
            pub inline fn getSystemFontCollection(self: *const T, include_downloadable_fonts_: BOOL, font_collection_: ?*?*IDWriteFontCollection1, check_for_updates_: BOOL) HRESULT {
                return @as(*const IDWriteFactory3.VTable, @ptrCast(self.vtable)).GetSystemFontCollection(@as(*const IDWriteFactory3, @ptrCast(self)), include_downloadable_fonts_, font_collection_, check_for_updates_);
            }
            pub inline fn getFontDownloadQueue(self: *const T, font_download_queue_: ?*?*IDWriteFontDownloadQueue) HRESULT {
                return @as(*const IDWriteFactory3.VTable, @ptrCast(self.vtable)).GetFontDownloadQueue(@as(*const IDWriteFactory3, @ptrCast(self)), font_download_queue_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IDWriteFontSet_Value = Guid.initString("53585141-d9f8-4095-8321-d73cf6bd116b");
pub const IID_IDWriteFontSet = &IID_IDWriteFontSet_Value;
pub const IDWriteFontSet = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFontCount: *const fn (
            self: *const IDWriteFontSet,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFontFaceReference: *const fn (
            self: *const IDWriteFontSet,
            list_index: u32,
            font_face_reference: ?*?*IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFontFaceReference: *const fn (
            self: *const IDWriteFontSet,
            font_face_reference: ?*IDWriteFontFaceReference,
            list_index: ?*u32,
            exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFontFace: *const fn (
            self: *const IDWriteFontSet,
            font_face: ?*IDWriteFontFace,
            list_index: ?*u32,
            exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyValues: *const fn (
            self: *const IDWriteFontSet,
            property_i_d: DWRITE_FONT_PROPERTY_ID,
            values: ?*?*IDWriteStringList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyValues1: *const fn (
            self: *const IDWriteFontSet,
            property_i_d: DWRITE_FONT_PROPERTY_ID,
            preferred_locale_names: ?[*:0]const u16,
            values: ?*?*IDWriteStringList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyValues2: *const fn (
            self: *const IDWriteFontSet,
            list_index: u32,
            property_id: DWRITE_FONT_PROPERTY_ID,
            exists: ?*BOOL,
            values: ?*?*IDWriteLocalizedStrings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyOccurrenceCount: *const fn (
            self: *const IDWriteFontSet,
            property: ?*const DWRITE_FONT_PROPERTY,
            property_occurrence_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMatchingFonts: *const fn (
            self: *const IDWriteFontSet,
            family_name: ?[*:0]const u16,
            font_weight: DWRITE_FONT_WEIGHT,
            font_stretch: DWRITE_FONT_STRETCH,
            font_style: DWRITE_FONT_STYLE,
            filtered_set: ?*?*IDWriteFontSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMatchingFonts1: *const fn (
            self: *const IDWriteFontSet,
            properties: [*]const DWRITE_FONT_PROPERTY,
            property_count: u32,
            filtered_set: ?*?*IDWriteFontSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFontCount(self: *const T) u32 {
                return @as(*const IDWriteFontSet.VTable, @ptrCast(self.vtable)).GetFontCount(@as(*const IDWriteFontSet, @ptrCast(self)));
            }
            pub inline fn getFontFaceReference(self: *const T, list_index_: u32, font_face_reference_: ?*?*IDWriteFontFaceReference) HRESULT {
                return @as(*const IDWriteFontSet.VTable, @ptrCast(self.vtable)).GetFontFaceReference(@as(*const IDWriteFontSet, @ptrCast(self)), list_index_, font_face_reference_);
            }
            pub inline fn findFontFaceReference(self: *const T, font_face_reference_: ?*IDWriteFontFaceReference, list_index_: ?*u32, exists_: ?*BOOL) HRESULT {
                return @as(*const IDWriteFontSet.VTable, @ptrCast(self.vtable)).FindFontFaceReference(@as(*const IDWriteFontSet, @ptrCast(self)), font_face_reference_, list_index_, exists_);
            }
            pub inline fn findFontFace(self: *const T, font_face_: ?*IDWriteFontFace, list_index_: ?*u32, exists_: ?*BOOL) HRESULT {
                return @as(*const IDWriteFontSet.VTable, @ptrCast(self.vtable)).FindFontFace(@as(*const IDWriteFontSet, @ptrCast(self)), font_face_, list_index_, exists_);
            }
            pub inline fn getPropertyValues(self: *const T, property_i_d_: DWRITE_FONT_PROPERTY_ID, values_: ?*?*IDWriteStringList) HRESULT {
                return @as(*const IDWriteFontSet.VTable, @ptrCast(self.vtable)).GetPropertyValues(@as(*const IDWriteFontSet, @ptrCast(self)), property_i_d_, values_);
            }
            pub inline fn getPropertyValues1(self: *const T, property_i_d_: DWRITE_FONT_PROPERTY_ID, preferred_locale_names_: ?[*:0]const u16, values_: ?*?*IDWriteStringList) HRESULT {
                return @as(*const IDWriteFontSet.VTable, @ptrCast(self.vtable)).GetPropertyValues(@as(*const IDWriteFontSet, @ptrCast(self)), property_i_d_, preferred_locale_names_, values_);
            }
            pub inline fn getPropertyValues2(self: *const T, list_index_: u32, property_id_: DWRITE_FONT_PROPERTY_ID, exists_: ?*BOOL, values_: ?*?*IDWriteLocalizedStrings) HRESULT {
                return @as(*const IDWriteFontSet.VTable, @ptrCast(self.vtable)).GetPropertyValues(@as(*const IDWriteFontSet, @ptrCast(self)), list_index_, property_id_, exists_, values_);
            }
            pub inline fn getPropertyOccurrenceCount(self: *const T, property_: ?*const DWRITE_FONT_PROPERTY, property_occurrence_count_: ?*u32) HRESULT {
                return @as(*const IDWriteFontSet.VTable, @ptrCast(self.vtable)).GetPropertyOccurrenceCount(@as(*const IDWriteFontSet, @ptrCast(self)), property_, property_occurrence_count_);
            }
            pub inline fn getMatchingFonts(self: *const T, family_name_: ?[*:0]const u16, font_weight_: DWRITE_FONT_WEIGHT, font_stretch_: DWRITE_FONT_STRETCH, font_style_: DWRITE_FONT_STYLE, filtered_set_: ?*?*IDWriteFontSet) HRESULT {
                return @as(*const IDWriteFontSet.VTable, @ptrCast(self.vtable)).GetMatchingFonts(@as(*const IDWriteFontSet, @ptrCast(self)), family_name_, font_weight_, font_stretch_, font_style_, filtered_set_);
            }
            pub inline fn getMatchingFonts1(self: *const T, properties_: [*]const DWRITE_FONT_PROPERTY, property_count_: u32, filtered_set_: ?*?*IDWriteFontSet) HRESULT {
                return @as(*const IDWriteFontSet.VTable, @ptrCast(self.vtable)).GetMatchingFonts(@as(*const IDWriteFontSet, @ptrCast(self)), properties_, property_count_, filtered_set_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteFontSetBuilder_Value = Guid.initString("2f642afe-9c68-4f40-b8be-457401afcb3d");
pub const IID_IDWriteFontSetBuilder = &IID_IDWriteFontSetBuilder_Value;
pub const IDWriteFontSetBuilder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddFontFaceReference: *const fn (
            self: *const IDWriteFontSetBuilder,
            font_face_reference: ?*IDWriteFontFaceReference,
            properties: [*]const DWRITE_FONT_PROPERTY,
            property_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFontFaceReference1: *const fn (
            self: *const IDWriteFontSetBuilder,
            font_face_reference: ?*IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFontSet: *const fn (
            self: *const IDWriteFontSetBuilder,
            font_set: ?*IDWriteFontSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontSet: *const fn (
            self: *const IDWriteFontSetBuilder,
            font_set: ?*?*IDWriteFontSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addFontFaceReference(self: *const T, font_face_reference_: ?*IDWriteFontFaceReference, properties_: [*]const DWRITE_FONT_PROPERTY, property_count_: u32) HRESULT {
                return @as(*const IDWriteFontSetBuilder.VTable, @ptrCast(self.vtable)).AddFontFaceReference(@as(*const IDWriteFontSetBuilder, @ptrCast(self)), font_face_reference_, properties_, property_count_);
            }
            pub inline fn addFontFaceReference1(self: *const T, font_face_reference_: ?*IDWriteFontFaceReference) HRESULT {
                return @as(*const IDWriteFontSetBuilder.VTable, @ptrCast(self.vtable)).AddFontFaceReference(@as(*const IDWriteFontSetBuilder, @ptrCast(self)), font_face_reference_);
            }
            pub inline fn addFontSet(self: *const T, font_set_: ?*IDWriteFontSet) HRESULT {
                return @as(*const IDWriteFontSetBuilder.VTable, @ptrCast(self.vtable)).AddFontSet(@as(*const IDWriteFontSetBuilder, @ptrCast(self)), font_set_);
            }
            pub inline fn createFontSet(self: *const T, font_set_: ?*?*IDWriteFontSet) HRESULT {
                return @as(*const IDWriteFontSetBuilder.VTable, @ptrCast(self.vtable)).CreateFontSet(@as(*const IDWriteFontSetBuilder, @ptrCast(self)), font_set_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDWriteFontCollection1_Value = Guid.initString("53585141-d9f8-4095-8321-d73cf6bd116c");
pub const IID_IDWriteFontCollection1 = &IID_IDWriteFontCollection1_Value;
pub const IDWriteFontCollection1 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontCollection.VTable,
        GetFontSet: *const fn (
            self: *const IDWriteFontCollection1,
            font_set: ?*?*IDWriteFontSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFamily: *const fn (
            self: *const IDWriteFontCollection1,
            index: u32,
            font_family: ?*?*IDWriteFontFamily1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontCollection.MethodMixin(T);
            pub inline fn getFontSet(self: *const T, font_set_: ?*?*IDWriteFontSet) HRESULT {
                return @as(*const IDWriteFontCollection1.VTable, @ptrCast(self.vtable)).GetFontSet(@as(*const IDWriteFontCollection1, @ptrCast(self)), font_set_);
            }
            pub inline fn getFontFamily(self: *const T, index_: u32, font_family_: ?*?*IDWriteFontFamily1) HRESULT {
                return @as(*const IDWriteFontCollection1.VTable, @ptrCast(self.vtable)).GetFontFamily(@as(*const IDWriteFontCollection1, @ptrCast(self)), index_, font_family_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IDWriteFontFamily1_Value = Guid.initString("da20d8ef-812a-4c43-9802-62ec4abd7adf");
pub const IID_IDWriteFontFamily1 = &IID_IDWriteFontFamily1_Value;
pub const IDWriteFontFamily1 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontFamily.VTable,
        GetFontLocality: *const fn (
            self: *const IDWriteFontFamily1,
            list_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_LOCALITY,
        GetFont: *const fn (
            self: *const IDWriteFontFamily1,
            list_index: u32,
            font: ?*?*IDWriteFont3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFaceReference: *const fn (
            self: *const IDWriteFontFamily1,
            list_index: u32,
            font_face_reference: ?*?*IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontFamily.MethodMixin(T);
            pub inline fn getFontLocality(self: *const T, list_index_: u32) DWRITE_LOCALITY {
                return @as(*const IDWriteFontFamily1.VTable, @ptrCast(self.vtable)).GetFontLocality(@as(*const IDWriteFontFamily1, @ptrCast(self)), list_index_);
            }
            pub inline fn getFont(self: *const T, list_index_: u32, font_: ?*?*IDWriteFont3) HRESULT {
                return @as(*const IDWriteFontFamily1.VTable, @ptrCast(self.vtable)).GetFont(@as(*const IDWriteFontFamily1, @ptrCast(self)), list_index_, font_);
            }
            pub inline fn getFontFaceReference(self: *const T, list_index_: u32, font_face_reference_: ?*?*IDWriteFontFaceReference) HRESULT {
                return @as(*const IDWriteFontFamily1.VTable, @ptrCast(self.vtable)).GetFontFaceReference(@as(*const IDWriteFontFamily1, @ptrCast(self)), list_index_, font_face_reference_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IDWriteFontList1_Value = Guid.initString("da20d8ef-812a-4c43-9802-62ec4abd7ade");
pub const IID_IDWriteFontList1 = &IID_IDWriteFontList1_Value;
pub const IDWriteFontList1 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontList.VTable,
        GetFontLocality: *const fn (
            self: *const IDWriteFontList1,
            list_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_LOCALITY,
        GetFont: *const fn (
            self: *const IDWriteFontList1,
            list_index: u32,
            font: ?*?*IDWriteFont3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFaceReference: *const fn (
            self: *const IDWriteFontList1,
            list_index: u32,
            font_face_reference: ?*?*IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontList.MethodMixin(T);
            pub inline fn getFontLocality(self: *const T, list_index_: u32) DWRITE_LOCALITY {
                return @as(*const IDWriteFontList1.VTable, @ptrCast(self.vtable)).GetFontLocality(@as(*const IDWriteFontList1, @ptrCast(self)), list_index_);
            }
            pub inline fn getFont(self: *const T, list_index_: u32, font_: ?*?*IDWriteFont3) HRESULT {
                return @as(*const IDWriteFontList1.VTable, @ptrCast(self.vtable)).GetFont(@as(*const IDWriteFontList1, @ptrCast(self)), list_index_, font_);
            }
            pub inline fn getFontFaceReference(self: *const T, list_index_: u32, font_face_reference_: ?*?*IDWriteFontFaceReference) HRESULT {
                return @as(*const IDWriteFontList1.VTable, @ptrCast(self.vtable)).GetFontFaceReference(@as(*const IDWriteFontList1, @ptrCast(self)), list_index_, font_face_reference_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IDWriteFontFaceReference_Value = Guid.initString("5e7fa7ca-dde3-424c-89f0-9fcd6fed58cd");
pub const IID_IDWriteFontFaceReference = &IID_IDWriteFontFaceReference_Value;
pub const IDWriteFontFaceReference = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateFontFace: *const fn (
            self: *const IDWriteFontFaceReference,
            font_face: ?*?*IDWriteFontFace3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFaceWithSimulations: *const fn (
            self: *const IDWriteFontFaceReference,
            font_face_simulation_flags: DWRITE_FONT_SIMULATIONS,
            font_face: ?*?*IDWriteFontFace3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Equals: *const fn (
            self: *const IDWriteFontFaceReference,
            font_face_reference: ?*IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetFontFaceIndex: *const fn (
            self: *const IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetSimulations: *const fn (
            self: *const IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_SIMULATIONS,
        GetFontFile: *const fn (
            self: *const IDWriteFontFaceReference,
            font_file: ?*?*IDWriteFontFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocalFileSize: *const fn (
            self: *const IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) u64,
        GetFileSize: *const fn (
            self: *const IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) u64,
        GetFileTime: *const fn (
            self: *const IDWriteFontFaceReference,
            last_write_time: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocality: *const fn (
            self: *const IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_LOCALITY,
        EnqueueFontDownloadRequest: *const fn (
            self: *const IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnqueueCharacterDownloadRequest: *const fn (
            self: *const IDWriteFontFaceReference,
            characters: [*:0]const u16,
            character_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnqueueGlyphDownloadRequest: *const fn (
            self: *const IDWriteFontFaceReference,
            glyph_indices: [*:0]const u16,
            glyph_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnqueueFileFragmentDownloadRequest: *const fn (
            self: *const IDWriteFontFaceReference,
            file_offset: u64,
            fragment_size: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createFontFace(self: *const T, font_face_: ?*?*IDWriteFontFace3) HRESULT {
                return @as(*const IDWriteFontFaceReference.VTable, @ptrCast(self.vtable)).CreateFontFace(@as(*const IDWriteFontFaceReference, @ptrCast(self)), font_face_);
            }
            pub inline fn createFontFaceWithSimulations(self: *const T, font_face_simulation_flags_: DWRITE_FONT_SIMULATIONS, font_face_: ?*?*IDWriteFontFace3) HRESULT {
                return @as(*const IDWriteFontFaceReference.VTable, @ptrCast(self.vtable)).CreateFontFaceWithSimulations(@as(*const IDWriteFontFaceReference, @ptrCast(self)), font_face_simulation_flags_, font_face_);
            }
            pub inline fn equals(self: *const T, font_face_reference_: ?*IDWriteFontFaceReference) BOOL {
                return @as(*const IDWriteFontFaceReference.VTable, @ptrCast(self.vtable)).Equals(@as(*const IDWriteFontFaceReference, @ptrCast(self)), font_face_reference_);
            }
            pub inline fn getFontFaceIndex(self: *const T) u32 {
                return @as(*const IDWriteFontFaceReference.VTable, @ptrCast(self.vtable)).GetFontFaceIndex(@as(*const IDWriteFontFaceReference, @ptrCast(self)));
            }
            pub inline fn getSimulations(self: *const T) DWRITE_FONT_SIMULATIONS {
                return @as(*const IDWriteFontFaceReference.VTable, @ptrCast(self.vtable)).GetSimulations(@as(*const IDWriteFontFaceReference, @ptrCast(self)));
            }
            pub inline fn getFontFile(self: *const T, font_file_: ?*?*IDWriteFontFile) HRESULT {
                return @as(*const IDWriteFontFaceReference.VTable, @ptrCast(self.vtable)).GetFontFile(@as(*const IDWriteFontFaceReference, @ptrCast(self)), font_file_);
            }
            pub inline fn getLocalFileSize(self: *const T) u64 {
                return @as(*const IDWriteFontFaceReference.VTable, @ptrCast(self.vtable)).GetLocalFileSize(@as(*const IDWriteFontFaceReference, @ptrCast(self)));
            }
            pub inline fn getFileSize(self: *const T) u64 {
                return @as(*const IDWriteFontFaceReference.VTable, @ptrCast(self.vtable)).GetFileSize(@as(*const IDWriteFontFaceReference, @ptrCast(self)));
            }
            pub inline fn getFileTime(self: *const T, last_write_time_: ?*FILETIME) HRESULT {
                return @as(*const IDWriteFontFaceReference.VTable, @ptrCast(self.vtable)).GetFileTime(@as(*const IDWriteFontFaceReference, @ptrCast(self)), last_write_time_);
            }
            pub inline fn getLocality(self: *const T) DWRITE_LOCALITY {
                return @as(*const IDWriteFontFaceReference.VTable, @ptrCast(self.vtable)).GetLocality(@as(*const IDWriteFontFaceReference, @ptrCast(self)));
            }
            pub inline fn enqueueFontDownloadRequest(self: *const T) HRESULT {
                return @as(*const IDWriteFontFaceReference.VTable, @ptrCast(self.vtable)).EnqueueFontDownloadRequest(@as(*const IDWriteFontFaceReference, @ptrCast(self)));
            }
            pub inline fn enqueueCharacterDownloadRequest(self: *const T, characters_: [*:0]const u16, character_count_: u32) HRESULT {
                return @as(*const IDWriteFontFaceReference.VTable, @ptrCast(self.vtable)).EnqueueCharacterDownloadRequest(@as(*const IDWriteFontFaceReference, @ptrCast(self)), characters_, character_count_);
            }
            pub inline fn enqueueGlyphDownloadRequest(self: *const T, glyph_indices_: [*:0]const u16, glyph_count_: u32) HRESULT {
                return @as(*const IDWriteFontFaceReference.VTable, @ptrCast(self.vtable)).EnqueueGlyphDownloadRequest(@as(*const IDWriteFontFaceReference, @ptrCast(self)), glyph_indices_, glyph_count_);
            }
            pub inline fn enqueueFileFragmentDownloadRequest(self: *const T, file_offset_: u64, fragment_size_: u64) HRESULT {
                return @as(*const IDWriteFontFaceReference.VTable, @ptrCast(self.vtable)).EnqueueFileFragmentDownloadRequest(@as(*const IDWriteFontFaceReference, @ptrCast(self)), file_offset_, fragment_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IDWriteFont3_Value = Guid.initString("29748ed6-8c9c-4a6a-be0b-d912e8538944");
pub const IID_IDWriteFont3 = &IID_IDWriteFont3_Value;
pub const IDWriteFont3 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFont2.VTable,
        CreateFontFace: *const fn (
            self: *const IDWriteFont3,
            font_face: ?*?*IDWriteFontFace3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Equals: *const fn (
            self: *const IDWriteFont3,
            font: ?*IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetFontFaceReference: *const fn (
            self: *const IDWriteFont3,
            font_face_reference: ?*?*IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasCharacter: *const fn (
            self: *const IDWriteFont3,
            unicode_value: u32,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetLocality: *const fn (
            self: *const IDWriteFont3,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_LOCALITY,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFont2.MethodMixin(T);
            pub inline fn createFontFace(self: *const T, font_face_: ?*?*IDWriteFontFace3) HRESULT {
                return @as(*const IDWriteFont3.VTable, @ptrCast(self.vtable)).CreateFontFace(@as(*const IDWriteFont3, @ptrCast(self)), font_face_);
            }
            pub inline fn equals(self: *const T, font_: ?*IDWriteFont) BOOL {
                return @as(*const IDWriteFont3.VTable, @ptrCast(self.vtable)).Equals(@as(*const IDWriteFont3, @ptrCast(self)), font_);
            }
            pub inline fn getFontFaceReference(self: *const T, font_face_reference_: ?*?*IDWriteFontFaceReference) HRESULT {
                return @as(*const IDWriteFont3.VTable, @ptrCast(self.vtable)).GetFontFaceReference(@as(*const IDWriteFont3, @ptrCast(self)), font_face_reference_);
            }
            pub inline fn hasCharacter(self: *const T, unicode_value_: u32) BOOL {
                return @as(*const IDWriteFont3.VTable, @ptrCast(self.vtable)).HasCharacter(@as(*const IDWriteFont3, @ptrCast(self)), unicode_value_);
            }
            pub inline fn getLocality(self: *const T) DWRITE_LOCALITY {
                return @as(*const IDWriteFont3.VTable, @ptrCast(self.vtable)).GetLocality(@as(*const IDWriteFont3, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IDWriteFontFace3_Value = Guid.initString("d37d7598-09be-4222-a236-2081341cc1f2");
pub const IID_IDWriteFontFace3 = &IID_IDWriteFontFace3_Value;
pub const IDWriteFontFace3 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontFace2.VTable,
        GetFontFaceReference: *const fn (
            self: *const IDWriteFontFace3,
            font_face_reference: ?*?*IDWriteFontFaceReference,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPanose: *const fn (
            self: *const IDWriteFontFace3,
            panose: ?*DWRITE_PANOSE,
        ) callconv(@import("std").os.windows.WINAPI) void,
        GetWeight: *const fn (
            self: *const IDWriteFontFace3,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_WEIGHT,
        GetStretch: *const fn (
            self: *const IDWriteFontFace3,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_STRETCH,
        GetStyle: *const fn (
            self: *const IDWriteFontFace3,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_STYLE,
        GetFamilyNames: *const fn (
            self: *const IDWriteFontFace3,
            names: ?*?*IDWriteLocalizedStrings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFaceNames: *const fn (
            self: *const IDWriteFontFace3,
            names: ?*?*IDWriteLocalizedStrings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInformationalStrings: *const fn (
            self: *const IDWriteFontFace3,
            informational_string_i_d: DWRITE_INFORMATIONAL_STRING_ID,
            informational_strings: ?*?*IDWriteLocalizedStrings,
            exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasCharacter: *const fn (
            self: *const IDWriteFontFace3,
            unicode_value: u32,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetRecommendedRenderingMode: *const fn (
            self: *const IDWriteFontFace3,
            font_em_size: f32,
            dpi_x: f32,
            dpi_y: f32,
            transform: ?*const DWRITE_MATRIX,
            is_sideways: BOOL,
            outline_threshold: DWRITE_OUTLINE_THRESHOLD,
            measuring_mode: DWRITE_MEASURING_MODE,
            rendering_params: ?*IDWriteRenderingParams,
            rendering_mode: ?*DWRITE_RENDERING_MODE1,
            grid_fit_mode: ?*DWRITE_GRID_FIT_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsCharacterLocal: *const fn (
            self: *const IDWriteFontFace3,
            unicode_value: u32,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        IsGlyphLocal: *const fn (
            self: *const IDWriteFontFace3,
            glyph_id: u16,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        AreCharactersLocal: *const fn (
            self: *const IDWriteFontFace3,
            characters: [*:0]const u16,
            character_count: u32,
            enqueue_if_not_local: BOOL,
            is_local: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AreGlyphsLocal: *const fn (
            self: *const IDWriteFontFace3,
            glyph_indices: [*:0]const u16,
            glyph_count: u32,
            enqueue_if_not_local: BOOL,
            is_local: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontFace2.MethodMixin(T);
            pub inline fn getFontFaceReference(self: *const T, font_face_reference_: ?*?*IDWriteFontFaceReference) HRESULT {
                return @as(*const IDWriteFontFace3.VTable, @ptrCast(self.vtable)).GetFontFaceReference(@as(*const IDWriteFontFace3, @ptrCast(self)), font_face_reference_);
            }
            pub inline fn getPanose(self: *const T, panose_: ?*DWRITE_PANOSE) void {
                return @as(*const IDWriteFontFace3.VTable, @ptrCast(self.vtable)).GetPanose(@as(*const IDWriteFontFace3, @ptrCast(self)), panose_);
            }
            pub inline fn getWeight(self: *const T) DWRITE_FONT_WEIGHT {
                return @as(*const IDWriteFontFace3.VTable, @ptrCast(self.vtable)).GetWeight(@as(*const IDWriteFontFace3, @ptrCast(self)));
            }
            pub inline fn getStretch(self: *const T) DWRITE_FONT_STRETCH {
                return @as(*const IDWriteFontFace3.VTable, @ptrCast(self.vtable)).GetStretch(@as(*const IDWriteFontFace3, @ptrCast(self)));
            }
            pub inline fn getStyle(self: *const T) DWRITE_FONT_STYLE {
                return @as(*const IDWriteFontFace3.VTable, @ptrCast(self.vtable)).GetStyle(@as(*const IDWriteFontFace3, @ptrCast(self)));
            }
            pub inline fn getFamilyNames(self: *const T, names_: ?*?*IDWriteLocalizedStrings) HRESULT {
                return @as(*const IDWriteFontFace3.VTable, @ptrCast(self.vtable)).GetFamilyNames(@as(*const IDWriteFontFace3, @ptrCast(self)), names_);
            }
            pub inline fn getFaceNames(self: *const T, names_: ?*?*IDWriteLocalizedStrings) HRESULT {
                return @as(*const IDWriteFontFace3.VTable, @ptrCast(self.vtable)).GetFaceNames(@as(*const IDWriteFontFace3, @ptrCast(self)), names_);
            }
            pub inline fn getInformationalStrings(self: *const T, informational_string_i_d_: DWRITE_INFORMATIONAL_STRING_ID, informational_strings_: ?*?*IDWriteLocalizedStrings, exists_: ?*BOOL) HRESULT {
                return @as(*const IDWriteFontFace3.VTable, @ptrCast(self.vtable)).GetInformationalStrings(@as(*const IDWriteFontFace3, @ptrCast(self)), informational_string_i_d_, informational_strings_, exists_);
            }
            pub inline fn hasCharacter(self: *const T, unicode_value_: u32) BOOL {
                return @as(*const IDWriteFontFace3.VTable, @ptrCast(self.vtable)).HasCharacter(@as(*const IDWriteFontFace3, @ptrCast(self)), unicode_value_);
            }
            pub inline fn getRecommendedRenderingMode(self: *const T, font_em_size_: f32, dpi_x_: f32, dpi_y_: f32, transform_: ?*const DWRITE_MATRIX, is_sideways_: BOOL, outline_threshold_: DWRITE_OUTLINE_THRESHOLD, measuring_mode_: DWRITE_MEASURING_MODE, rendering_params_: ?*IDWriteRenderingParams, rendering_mode_: ?*DWRITE_RENDERING_MODE1, grid_fit_mode_: ?*DWRITE_GRID_FIT_MODE) HRESULT {
                return @as(*const IDWriteFontFace3.VTable, @ptrCast(self.vtable)).GetRecommendedRenderingMode(@as(*const IDWriteFontFace3, @ptrCast(self)), font_em_size_, dpi_x_, dpi_y_, transform_, is_sideways_, outline_threshold_, measuring_mode_, rendering_params_, rendering_mode_, grid_fit_mode_);
            }
            pub inline fn isCharacterLocal(self: *const T, unicode_value_: u32) BOOL {
                return @as(*const IDWriteFontFace3.VTable, @ptrCast(self.vtable)).IsCharacterLocal(@as(*const IDWriteFontFace3, @ptrCast(self)), unicode_value_);
            }
            pub inline fn isGlyphLocal(self: *const T, glyph_id_: u16) BOOL {
                return @as(*const IDWriteFontFace3.VTable, @ptrCast(self.vtable)).IsGlyphLocal(@as(*const IDWriteFontFace3, @ptrCast(self)), glyph_id_);
            }
            pub inline fn areCharactersLocal(self: *const T, characters_: [*:0]const u16, character_count_: u32, enqueue_if_not_local_: BOOL, is_local_: ?*BOOL) HRESULT {
                return @as(*const IDWriteFontFace3.VTable, @ptrCast(self.vtable)).AreCharactersLocal(@as(*const IDWriteFontFace3, @ptrCast(self)), characters_, character_count_, enqueue_if_not_local_, is_local_);
            }
            pub inline fn areGlyphsLocal(self: *const T, glyph_indices_: [*:0]const u16, glyph_count_: u32, enqueue_if_not_local_: BOOL, is_local_: ?*BOOL) HRESULT {
                return @as(*const IDWriteFontFace3.VTable, @ptrCast(self.vtable)).AreGlyphsLocal(@as(*const IDWriteFontFace3, @ptrCast(self)), glyph_indices_, glyph_count_, enqueue_if_not_local_, is_local_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteStringList_Value = Guid.initString("cfee3140-1157-47ca-8b85-31bfcf3f2d0e");
pub const IID_IDWriteStringList = &IID_IDWriteStringList_Value;
pub const IDWriteStringList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IDWriteStringList,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetLocaleNameLength: *const fn (
            self: *const IDWriteStringList,
            list_index: u32,
            length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocaleName: *const fn (
            self: *const IDWriteStringList,
            list_index: u32,
            locale_name: [*:0]u16,
            size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringLength: *const fn (
            self: *const IDWriteStringList,
            list_index: u32,
            length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetString: *const fn (
            self: *const IDWriteStringList,
            list_index: u32,
            string_buffer: [*:0]u16,
            string_buffer_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T) u32 {
                return @as(*const IDWriteStringList.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IDWriteStringList, @ptrCast(self)));
            }
            pub inline fn getLocaleNameLength(self: *const T, list_index_: u32, length_: ?*u32) HRESULT {
                return @as(*const IDWriteStringList.VTable, @ptrCast(self.vtable)).GetLocaleNameLength(@as(*const IDWriteStringList, @ptrCast(self)), list_index_, length_);
            }
            pub inline fn getLocaleName(self: *const T, list_index_: u32, locale_name_: [*:0]u16, size_: u32) HRESULT {
                return @as(*const IDWriteStringList.VTable, @ptrCast(self.vtable)).GetLocaleName(@as(*const IDWriteStringList, @ptrCast(self)), list_index_, locale_name_, size_);
            }
            pub inline fn getStringLength(self: *const T, list_index_: u32, length_: ?*u32) HRESULT {
                return @as(*const IDWriteStringList.VTable, @ptrCast(self.vtable)).GetStringLength(@as(*const IDWriteStringList, @ptrCast(self)), list_index_, length_);
            }
            pub inline fn getString(self: *const T, list_index_: u32, string_buffer_: [*:0]u16, string_buffer_size_: u32) HRESULT {
                return @as(*const IDWriteStringList.VTable, @ptrCast(self.vtable)).GetString(@as(*const IDWriteStringList, @ptrCast(self)), list_index_, string_buffer_, string_buffer_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteFontDownloadListener_Value = Guid.initString("b06fe5b9-43ec-4393-881b-dbe4dc72fda7");
pub const IID_IDWriteFontDownloadListener = &IID_IDWriteFontDownloadListener_Value;
pub const IDWriteFontDownloadListener = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DownloadCompleted: *const fn (
            self: *const IDWriteFontDownloadListener,
            download_queue: ?*IDWriteFontDownloadQueue,
            context: ?*IUnknown,
            download_result: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn downloadCompleted(self: *const T, download_queue_: ?*IDWriteFontDownloadQueue, context_: ?*IUnknown, download_result_: HRESULT) void {
                return @as(*const IDWriteFontDownloadListener.VTable, @ptrCast(self.vtable)).DownloadCompleted(@as(*const IDWriteFontDownloadListener, @ptrCast(self)), download_queue_, context_, download_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteFontDownloadQueue_Value = Guid.initString("b71e6052-5aea-4fa3-832e-f60d431f7e91");
pub const IID_IDWriteFontDownloadQueue = &IID_IDWriteFontDownloadQueue_Value;
pub const IDWriteFontDownloadQueue = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddListener: *const fn (
            self: *const IDWriteFontDownloadQueue,
            listener: ?*IDWriteFontDownloadListener,
            token: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveListener: *const fn (
            self: *const IDWriteFontDownloadQueue,
            token: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEmpty: *const fn (
            self: *const IDWriteFontDownloadQueue,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        BeginDownload: *const fn (
            self: *const IDWriteFontDownloadQueue,
            context: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelDownload: *const fn (
            self: *const IDWriteFontDownloadQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGenerationCount: *const fn (
            self: *const IDWriteFontDownloadQueue,
        ) callconv(@import("std").os.windows.WINAPI) u64,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addListener(self: *const T, listener_: ?*IDWriteFontDownloadListener, token_: ?*u32) HRESULT {
                return @as(*const IDWriteFontDownloadQueue.VTable, @ptrCast(self.vtable)).AddListener(@as(*const IDWriteFontDownloadQueue, @ptrCast(self)), listener_, token_);
            }
            pub inline fn removeListener(self: *const T, token_: u32) HRESULT {
                return @as(*const IDWriteFontDownloadQueue.VTable, @ptrCast(self.vtable)).RemoveListener(@as(*const IDWriteFontDownloadQueue, @ptrCast(self)), token_);
            }
            pub inline fn isEmpty(self: *const T) BOOL {
                return @as(*const IDWriteFontDownloadQueue.VTable, @ptrCast(self.vtable)).IsEmpty(@as(*const IDWriteFontDownloadQueue, @ptrCast(self)));
            }
            pub inline fn beginDownload(self: *const T, context_: ?*IUnknown) HRESULT {
                return @as(*const IDWriteFontDownloadQueue.VTable, @ptrCast(self.vtable)).BeginDownload(@as(*const IDWriteFontDownloadQueue, @ptrCast(self)), context_);
            }
            pub inline fn cancelDownload(self: *const T) HRESULT {
                return @as(*const IDWriteFontDownloadQueue.VTable, @ptrCast(self.vtable)).CancelDownload(@as(*const IDWriteFontDownloadQueue, @ptrCast(self)));
            }
            pub inline fn getGenerationCount(self: *const T) u64 {
                return @as(*const IDWriteFontDownloadQueue.VTable, @ptrCast(self.vtable)).GetGenerationCount(@as(*const IDWriteFontDownloadQueue, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteGdiInterop1_Value = Guid.initString("4556be70-3abd-4f70-90be-421780a6f515");
pub const IID_IDWriteGdiInterop1 = &IID_IDWriteGdiInterop1_Value;
pub const IDWriteGdiInterop1 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteGdiInterop.VTable,
        CreateFontFromLOGFONT: *const fn (
            self: *const IDWriteGdiInterop1,
            log_font: ?*const LOGFONTW,
            font_collection: ?*IDWriteFontCollection,
            font: ?*?*IDWriteFont,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontSignature: *const fn (
            self: *const IDWriteGdiInterop1,
            font_face: ?*IDWriteFontFace,
            font_signature: ?*FONTSIGNATURE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontSignature1: *const fn (
            self: *const IDWriteGdiInterop1,
            font: ?*IDWriteFont,
            font_signature: ?*FONTSIGNATURE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMatchingFontsByLOGFONT: *const fn (
            self: *const IDWriteGdiInterop1,
            log_font: ?*const LOGFONTA,
            font_set: ?*IDWriteFontSet,
            filtered_set: ?*?*IDWriteFontSet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteGdiInterop.MethodMixin(T);
            pub inline fn createFontFromLOGFONT(self: *const T, log_font_: ?*const LOGFONTW, font_collection_: ?*IDWriteFontCollection, font_: ?*?*IDWriteFont) HRESULT {
                return @as(*const IDWriteGdiInterop1.VTable, @ptrCast(self.vtable)).CreateFontFromLOGFONT(@as(*const IDWriteGdiInterop1, @ptrCast(self)), log_font_, font_collection_, font_);
            }
            pub inline fn getFontSignature(self: *const T, font_face_: ?*IDWriteFontFace, font_signature_: ?*FONTSIGNATURE) HRESULT {
                return @as(*const IDWriteGdiInterop1.VTable, @ptrCast(self.vtable)).GetFontSignature(@as(*const IDWriteGdiInterop1, @ptrCast(self)), font_face_, font_signature_);
            }
            pub inline fn getFontSignature1(self: *const T, font_: ?*IDWriteFont, font_signature_: ?*FONTSIGNATURE) HRESULT {
                return @as(*const IDWriteGdiInterop1.VTable, @ptrCast(self.vtable)).GetFontSignature(@as(*const IDWriteGdiInterop1, @ptrCast(self)), font_, font_signature_);
            }
            pub inline fn getMatchingFontsByLOGFONT(self: *const T, log_font_: ?*const LOGFONTA, font_set_: ?*IDWriteFontSet, filtered_set_: ?*?*IDWriteFontSet) HRESULT {
                return @as(*const IDWriteGdiInterop1.VTable, @ptrCast(self.vtable)).GetMatchingFontsByLOGFONT(@as(*const IDWriteGdiInterop1, @ptrCast(self)), log_font_, font_set_, filtered_set_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DWRITE_LINE_METRICS1 = extern struct {
    Base: DWRITE_LINE_METRICS,
    leadingBefore: f32,
    leadingAfter: f32,
};

pub const DWRITE_FONT_LINE_GAP_USAGE = enum(i32) {
    DEFAULT = 0,
    DISABLED = 1,
    ENABLED = 2,
};
pub const DWRITE_FONT_LINE_GAP_USAGE_DEFAULT = DWRITE_FONT_LINE_GAP_USAGE.DEFAULT;
pub const DWRITE_FONT_LINE_GAP_USAGE_DISABLED = DWRITE_FONT_LINE_GAP_USAGE.DISABLED;
pub const DWRITE_FONT_LINE_GAP_USAGE_ENABLED = DWRITE_FONT_LINE_GAP_USAGE.ENABLED;

pub const DWRITE_LINE_SPACING = extern struct {
    method: DWRITE_LINE_SPACING_METHOD,
    height: f32,
    baseline: f32,
    leadingBefore: f32,
    fontLineGapUsage: DWRITE_FONT_LINE_GAP_USAGE,
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteTextFormat2_Value = Guid.initString("f67e0edd-9e3d-4ecc-8c32-4183253dfe70");
pub const IID_IDWriteTextFormat2 = &IID_IDWriteTextFormat2_Value;
pub const IDWriteTextFormat2 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteTextFormat1.VTable,
        SetLineSpacing: *const fn (
            self: *const IDWriteTextFormat2,
            line_spacing_options: ?*const DWRITE_LINE_SPACING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLineSpacing: *const fn (
            self: *const IDWriteTextFormat2,
            line_spacing_options: ?*DWRITE_LINE_SPACING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteTextFormat1.MethodMixin(T);
            pub inline fn setLineSpacing(self: *const T, line_spacing_options_: ?*const DWRITE_LINE_SPACING) HRESULT {
                return @as(*const IDWriteTextFormat2.VTable, @ptrCast(self.vtable)).SetLineSpacing(@as(*const IDWriteTextFormat2, @ptrCast(self)), line_spacing_options_);
            }
            pub inline fn getLineSpacing(self: *const T, line_spacing_options_: ?*DWRITE_LINE_SPACING) HRESULT {
                return @as(*const IDWriteTextFormat2.VTable, @ptrCast(self.vtable)).GetLineSpacing(@as(*const IDWriteTextFormat2, @ptrCast(self)), line_spacing_options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDWriteTextLayout3_Value = Guid.initString("07ddcd52-020e-4de8-ac33-6c953d83f92d");
pub const IID_IDWriteTextLayout3 = &IID_IDWriteTextLayout3_Value;
pub const IDWriteTextLayout3 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteTextLayout2.VTable,
        InvalidateLayout: *const fn (
            self: *const IDWriteTextLayout3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLineSpacing: *const fn (
            self: *const IDWriteTextLayout3,
            line_spacing_options: ?*const DWRITE_LINE_SPACING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLineSpacing: *const fn (
            self: *const IDWriteTextLayout3,
            line_spacing_options: ?*DWRITE_LINE_SPACING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLineMetrics: *const fn (
            self: *const IDWriteTextLayout3,
            line_metrics: ?[*]DWRITE_LINE_METRICS1,
            max_line_count: u32,
            actual_line_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteTextLayout2.MethodMixin(T);
            pub inline fn invalidateLayout(self: *const T) HRESULT {
                return @as(*const IDWriteTextLayout3.VTable, @ptrCast(self.vtable)).InvalidateLayout(@as(*const IDWriteTextLayout3, @ptrCast(self)));
            }
            pub inline fn setLineSpacing(self: *const T, line_spacing_options_: ?*const DWRITE_LINE_SPACING) HRESULT {
                return @as(*const IDWriteTextLayout3.VTable, @ptrCast(self.vtable)).SetLineSpacing(@as(*const IDWriteTextLayout3, @ptrCast(self)), line_spacing_options_);
            }
            pub inline fn getLineSpacing(self: *const T, line_spacing_options_: ?*DWRITE_LINE_SPACING) HRESULT {
                return @as(*const IDWriteTextLayout3.VTable, @ptrCast(self.vtable)).GetLineSpacing(@as(*const IDWriteTextLayout3, @ptrCast(self)), line_spacing_options_);
            }
            pub inline fn getLineMetrics(self: *const T, line_metrics_: ?[*]DWRITE_LINE_METRICS1, max_line_count_: u32, actual_line_count_: ?*u32) HRESULT {
                return @as(*const IDWriteTextLayout3.VTable, @ptrCast(self.vtable)).GetLineMetrics(@as(*const IDWriteTextLayout3, @ptrCast(self)), line_metrics_, max_line_count_, actual_line_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DWRITE_COLOR_GLYPH_RUN1 = extern struct {
    Base: DWRITE_COLOR_GLYPH_RUN,
    glyphImageFormat: DWRITE_GLYPH_IMAGE_FORMATS,
    measuringMode: DWRITE_MEASURING_MODE,
};

pub const DWRITE_GLYPH_IMAGE_DATA = extern struct {
    imageData: ?*const anyopaque,
    imageDataSize: u32,
    uniqueDataId: u32,
    pixelsPerEm: u32,
    pixelSize: D2D_SIZE_U,
    horizontalLeftOrigin: POINT,
    horizontalRightOrigin: POINT,
    verticalTopOrigin: POINT,
    verticalBottomOrigin: POINT,
};

const IID_IDWriteColorGlyphRunEnumerator1_Value = Guid.initString("7c5f86da-c7a1-4f05-b8e1-55a179fe5a35");
pub const IID_IDWriteColorGlyphRunEnumerator1 = &IID_IDWriteColorGlyphRunEnumerator1_Value;
pub const IDWriteColorGlyphRunEnumerator1 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteColorGlyphRunEnumerator.VTable,
        GetCurrentRun: *const fn (
            self: *const IDWriteColorGlyphRunEnumerator1,
            color_glyph_run: ?*const ?*DWRITE_COLOR_GLYPH_RUN1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteColorGlyphRunEnumerator.MethodMixin(T);
            pub inline fn getCurrentRun(self: *const T, color_glyph_run_: ?*const ?*DWRITE_COLOR_GLYPH_RUN1) HRESULT {
                return @as(*const IDWriteColorGlyphRunEnumerator1.VTable, @ptrCast(self.vtable)).GetCurrentRun(@as(*const IDWriteColorGlyphRunEnumerator1, @ptrCast(self)), color_glyph_run_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteFontFace4_Value = Guid.initString("27f2a904-4eb8-441d-9678-0563f53e3e2f");
pub const IID_IDWriteFontFace4 = &IID_IDWriteFontFace4_Value;
pub const IDWriteFontFace4 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontFace3.VTable,
        GetGlyphImageFormats: *const fn (
            self: *const IDWriteFontFace4,
            glyph_id: u16,
            pixels_per_em_first: u32,
            pixels_per_em_last: u32,
            glyph_image_formats: ?*DWRITE_GLYPH_IMAGE_FORMATS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlyphImageFormats1: *const fn (
            self: *const IDWriteFontFace4,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_GLYPH_IMAGE_FORMATS,
        GetGlyphImageData: *const fn (
            self: *const IDWriteFontFace4,
            glyph_id: u16,
            pixels_per_em: u32,
            glyph_image_format: DWRITE_GLYPH_IMAGE_FORMATS,
            glyph_data: ?*DWRITE_GLYPH_IMAGE_DATA,
            glyph_data_context: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseGlyphImageData: *const fn (
            self: *const IDWriteFontFace4,
            glyph_data_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontFace3.MethodMixin(T);
            pub inline fn getGlyphImageFormats(self: *const T, glyph_id_: u16, pixels_per_em_first_: u32, pixels_per_em_last_: u32, glyph_image_formats_: ?*DWRITE_GLYPH_IMAGE_FORMATS) HRESULT {
                return @as(*const IDWriteFontFace4.VTable, @ptrCast(self.vtable)).GetGlyphImageFormats(@as(*const IDWriteFontFace4, @ptrCast(self)), glyph_id_, pixels_per_em_first_, pixels_per_em_last_, glyph_image_formats_);
            }
            pub inline fn getGlyphImageFormats1(self: *const T) DWRITE_GLYPH_IMAGE_FORMATS {
                return @as(*const IDWriteFontFace4.VTable, @ptrCast(self.vtable)).GetGlyphImageFormats(@as(*const IDWriteFontFace4, @ptrCast(self)));
            }
            pub inline fn getGlyphImageData(self: *const T, glyph_id_: u16, pixels_per_em_: u32, glyph_image_format_: DWRITE_GLYPH_IMAGE_FORMATS, glyph_data_: ?*DWRITE_GLYPH_IMAGE_DATA, glyph_data_context_: ?*?*anyopaque) HRESULT {
                return @as(*const IDWriteFontFace4.VTable, @ptrCast(self.vtable)).GetGlyphImageData(@as(*const IDWriteFontFace4, @ptrCast(self)), glyph_id_, pixels_per_em_, glyph_image_format_, glyph_data_, glyph_data_context_);
            }
            pub inline fn releaseGlyphImageData(self: *const T, glyph_data_context_: ?*anyopaque) void {
                return @as(*const IDWriteFontFace4.VTable, @ptrCast(self.vtable)).ReleaseGlyphImageData(@as(*const IDWriteFontFace4, @ptrCast(self)), glyph_data_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteFactory4_Value = Guid.initString("4b0b5bd3-0797-4549-8ac5-fe915cc53856");
pub const IID_IDWriteFactory4 = &IID_IDWriteFactory4_Value;
pub const IDWriteFactory4 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFactory3.VTable,
        TranslateColorGlyphRun: *const fn (
            self: *const IDWriteFactory4,
            baseline_origin: D2D_POINT_2F,
            glyph_run: ?*const DWRITE_GLYPH_RUN,
            glyph_run_description: ?*const DWRITE_GLYPH_RUN_DESCRIPTION,
            desired_glyph_image_formats: DWRITE_GLYPH_IMAGE_FORMATS,
            measuring_mode: DWRITE_MEASURING_MODE,
            world_and_dpi_transform: ?*const DWRITE_MATRIX,
            color_palette_index: u32,
            color_layers: ?*?*IDWriteColorGlyphRunEnumerator1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ComputeGlyphOrigins: *const fn (
            self: *const IDWriteFactory4,
            glyph_run: ?*const DWRITE_GLYPH_RUN,
            baseline_origin: D2D_POINT_2F,
            glyph_origins: ?*D2D_POINT_2F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ComputeGlyphOrigins1: *const fn (
            self: *const IDWriteFactory4,
            glyph_run: ?*const DWRITE_GLYPH_RUN,
            measuring_mode: DWRITE_MEASURING_MODE,
            baseline_origin: D2D_POINT_2F,
            world_and_dpi_transform: ?*const DWRITE_MATRIX,
            glyph_origins: ?*D2D_POINT_2F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFactory3.MethodMixin(T);
            pub inline fn translateColorGlyphRun(self: *const T, baseline_origin_: D2D_POINT_2F, glyph_run_: ?*const DWRITE_GLYPH_RUN, glyph_run_description_: ?*const DWRITE_GLYPH_RUN_DESCRIPTION, desired_glyph_image_formats_: DWRITE_GLYPH_IMAGE_FORMATS, measuring_mode_: DWRITE_MEASURING_MODE, world_and_dpi_transform_: ?*const DWRITE_MATRIX, color_palette_index_: u32, color_layers_: ?*?*IDWriteColorGlyphRunEnumerator1) HRESULT {
                return @as(*const IDWriteFactory4.VTable, @ptrCast(self.vtable)).TranslateColorGlyphRun(@as(*const IDWriteFactory4, @ptrCast(self)), baseline_origin_, glyph_run_, glyph_run_description_, desired_glyph_image_formats_, measuring_mode_, world_and_dpi_transform_, color_palette_index_, color_layers_);
            }
            pub inline fn computeGlyphOrigins(self: *const T, glyph_run_: ?*const DWRITE_GLYPH_RUN, baseline_origin_: D2D_POINT_2F, glyph_origins_: ?*D2D_POINT_2F) HRESULT {
                return @as(*const IDWriteFactory4.VTable, @ptrCast(self.vtable)).ComputeGlyphOrigins(@as(*const IDWriteFactory4, @ptrCast(self)), glyph_run_, baseline_origin_, glyph_origins_);
            }
            pub inline fn computeGlyphOrigins1(self: *const T, glyph_run_: ?*const DWRITE_GLYPH_RUN, measuring_mode_: DWRITE_MEASURING_MODE, baseline_origin_: D2D_POINT_2F, world_and_dpi_transform_: ?*const DWRITE_MATRIX, glyph_origins_: ?*D2D_POINT_2F) HRESULT {
                return @as(*const IDWriteFactory4.VTable, @ptrCast(self.vtable)).ComputeGlyphOrigins(@as(*const IDWriteFactory4, @ptrCast(self)), glyph_run_, measuring_mode_, baseline_origin_, world_and_dpi_transform_, glyph_origins_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteFontSetBuilder1_Value = Guid.initString("3ff7715f-3cdc-4dc6-9b72-ec5621dccafd");
pub const IID_IDWriteFontSetBuilder1 = &IID_IDWriteFontSetBuilder1_Value;
pub const IDWriteFontSetBuilder1 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontSetBuilder.VTable,
        AddFontFile: *const fn (
            self: *const IDWriteFontSetBuilder1,
            font_file: ?*IDWriteFontFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontSetBuilder.MethodMixin(T);
            pub inline fn addFontFile(self: *const T, font_file_: ?*IDWriteFontFile) HRESULT {
                return @as(*const IDWriteFontSetBuilder1.VTable, @ptrCast(self.vtable)).AddFontFile(@as(*const IDWriteFontSetBuilder1, @ptrCast(self)), font_file_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteAsyncResult_Value = Guid.initString("ce25f8fd-863b-4d13-9651-c1f88dc73fe2");
pub const IID_IDWriteAsyncResult = &IID_IDWriteAsyncResult_Value;
pub const IDWriteAsyncResult = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetWaitHandle: *const fn (
            self: *const IDWriteAsyncResult,
        ) callconv(@import("std").os.windows.WINAPI) ?HANDLE,
        GetResult: *const fn (
            self: *const IDWriteAsyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getWaitHandle(self: *const T) ?HANDLE {
                return @as(*const IDWriteAsyncResult.VTable, @ptrCast(self.vtable)).GetWaitHandle(@as(*const IDWriteAsyncResult, @ptrCast(self)));
            }
            pub inline fn getResult(self: *const T) HRESULT {
                return @as(*const IDWriteAsyncResult.VTable, @ptrCast(self.vtable)).GetResult(@as(*const IDWriteAsyncResult, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DWRITE_FILE_FRAGMENT = extern struct {
    fileOffset: u64,
    fragmentSize: u64,
};

const IID_IDWriteRemoteFontFileStream_Value = Guid.initString("4db3757a-2c72-4ed9-b2b6-1ababe1aff9c");
pub const IID_IDWriteRemoteFontFileStream = &IID_IDWriteRemoteFontFileStream_Value;
pub const IDWriteRemoteFontFileStream = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontFileStream.VTable,
        GetLocalFileSize: *const fn (
            self: *const IDWriteRemoteFontFileStream,
            local_file_size: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileFragmentLocality: *const fn (
            self: *const IDWriteRemoteFontFileStream,
            file_offset: u64,
            fragment_size: u64,
            is_local: ?*BOOL,
            partial_size: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocality: *const fn (
            self: *const IDWriteRemoteFontFileStream,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_LOCALITY,
        BeginDownload: *const fn (
            self: *const IDWriteRemoteFontFileStream,
            download_operation_i_d: ?*const Guid,
            file_fragments: [*]const DWRITE_FILE_FRAGMENT,
            fragment_count: u32,
            async_result: ?*?*IDWriteAsyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontFileStream.MethodMixin(T);
            pub inline fn getLocalFileSize(self: *const T, local_file_size_: ?*u64) HRESULT {
                return @as(*const IDWriteRemoteFontFileStream.VTable, @ptrCast(self.vtable)).GetLocalFileSize(@as(*const IDWriteRemoteFontFileStream, @ptrCast(self)), local_file_size_);
            }
            pub inline fn getFileFragmentLocality(self: *const T, file_offset_: u64, fragment_size_: u64, is_local_: ?*BOOL, partial_size_: ?*u64) HRESULT {
                return @as(*const IDWriteRemoteFontFileStream.VTable, @ptrCast(self.vtable)).GetFileFragmentLocality(@as(*const IDWriteRemoteFontFileStream, @ptrCast(self)), file_offset_, fragment_size_, is_local_, partial_size_);
            }
            pub inline fn getLocality(self: *const T) DWRITE_LOCALITY {
                return @as(*const IDWriteRemoteFontFileStream.VTable, @ptrCast(self.vtable)).GetLocality(@as(*const IDWriteRemoteFontFileStream, @ptrCast(self)));
            }
            pub inline fn beginDownload(self: *const T, download_operation_i_d_: ?*const Guid, file_fragments_: [*]const DWRITE_FILE_FRAGMENT, fragment_count_: u32, async_result_: ?*?*IDWriteAsyncResult) HRESULT {
                return @as(*const IDWriteRemoteFontFileStream.VTable, @ptrCast(self.vtable)).BeginDownload(@as(*const IDWriteRemoteFontFileStream, @ptrCast(self)), download_operation_i_d_, file_fragments_, fragment_count_, async_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DWRITE_CONTAINER_TYPE = enum(i32) {
    UNKNOWN = 0,
    WOFF = 1,
    WOFF2 = 2,
};
pub const DWRITE_CONTAINER_TYPE_UNKNOWN = DWRITE_CONTAINER_TYPE.UNKNOWN;
pub const DWRITE_CONTAINER_TYPE_WOFF = DWRITE_CONTAINER_TYPE.WOFF;
pub const DWRITE_CONTAINER_TYPE_WOFF2 = DWRITE_CONTAINER_TYPE.WOFF2;

const IID_IDWriteRemoteFontFileLoader_Value = Guid.initString("68648c83-6ede-46c0-ab46-20083a887fde");
pub const IID_IDWriteRemoteFontFileLoader = &IID_IDWriteRemoteFontFileLoader_Value;
pub const IDWriteRemoteFontFileLoader = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontFileLoader.VTable,
        CreateRemoteStreamFromKey: *const fn (
            self: *const IDWriteRemoteFontFileLoader,
            // TODO: what to do with BytesParamIndex 1?
            font_file_reference_key: ?*const anyopaque,
            font_file_reference_key_size: u32,
            font_file_stream: ?*?*IDWriteRemoteFontFileStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocalityFromKey: *const fn (
            self: *const IDWriteRemoteFontFileLoader,
            // TODO: what to do with BytesParamIndex 1?
            font_file_reference_key: ?*const anyopaque,
            font_file_reference_key_size: u32,
            locality: ?*DWRITE_LOCALITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFileReferenceFromUrl: *const fn (
            self: *const IDWriteRemoteFontFileLoader,
            factory: ?*IDWriteFactory,
            base_url: ?[*:0]const u16,
            font_file_url: ?[*:0]const u16,
            font_file: ?*?*IDWriteFontFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontFileLoader.MethodMixin(T);
            pub inline fn createRemoteStreamFromKey(self: *const T, font_file_reference_key_: ?*const anyopaque, font_file_reference_key_size_: u32, font_file_stream_: ?*?*IDWriteRemoteFontFileStream) HRESULT {
                return @as(*const IDWriteRemoteFontFileLoader.VTable, @ptrCast(self.vtable)).CreateRemoteStreamFromKey(@as(*const IDWriteRemoteFontFileLoader, @ptrCast(self)), font_file_reference_key_, font_file_reference_key_size_, font_file_stream_);
            }
            pub inline fn getLocalityFromKey(self: *const T, font_file_reference_key_: ?*const anyopaque, font_file_reference_key_size_: u32, locality_: ?*DWRITE_LOCALITY) HRESULT {
                return @as(*const IDWriteRemoteFontFileLoader.VTable, @ptrCast(self.vtable)).GetLocalityFromKey(@as(*const IDWriteRemoteFontFileLoader, @ptrCast(self)), font_file_reference_key_, font_file_reference_key_size_, locality_);
            }
            pub inline fn createFontFileReferenceFromUrl(self: *const T, factory_: ?*IDWriteFactory, base_url_: ?[*:0]const u16, font_file_url_: ?[*:0]const u16, font_file_: ?*?*IDWriteFontFile) HRESULT {
                return @as(*const IDWriteRemoteFontFileLoader.VTable, @ptrCast(self.vtable)).CreateFontFileReferenceFromUrl(@as(*const IDWriteRemoteFontFileLoader, @ptrCast(self)), factory_, base_url_, font_file_url_, font_file_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteInMemoryFontFileLoader_Value = Guid.initString("dc102f47-a12d-4b1c-822d-9e117e33043f");
pub const IID_IDWriteInMemoryFontFileLoader = &IID_IDWriteInMemoryFontFileLoader_Value;
pub const IDWriteInMemoryFontFileLoader = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontFileLoader.VTable,
        CreateInMemoryFontFileReference: *const fn (
            self: *const IDWriteInMemoryFontFileLoader,
            factory: ?*IDWriteFactory,
            // TODO: what to do with BytesParamIndex 2?
            font_data: ?*const anyopaque,
            font_data_size: u32,
            owner_object: ?*IUnknown,
            font_file: ?*?*IDWriteFontFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileCount: *const fn (
            self: *const IDWriteInMemoryFontFileLoader,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontFileLoader.MethodMixin(T);
            pub inline fn createInMemoryFontFileReference(self: *const T, factory_: ?*IDWriteFactory, font_data_: ?*const anyopaque, font_data_size_: u32, owner_object_: ?*IUnknown, font_file_: ?*?*IDWriteFontFile) HRESULT {
                return @as(*const IDWriteInMemoryFontFileLoader.VTable, @ptrCast(self.vtable)).CreateInMemoryFontFileReference(@as(*const IDWriteInMemoryFontFileLoader, @ptrCast(self)), factory_, font_data_, font_data_size_, owner_object_, font_file_);
            }
            pub inline fn getFileCount(self: *const T) u32 {
                return @as(*const IDWriteInMemoryFontFileLoader.VTable, @ptrCast(self.vtable)).GetFileCount(@as(*const IDWriteInMemoryFontFileLoader, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteFactory5_Value = Guid.initString("958db99a-be2a-4f09-af7d-65189803d1d3");
pub const IID_IDWriteFactory5 = &IID_IDWriteFactory5_Value;
pub const IDWriteFactory5 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFactory4.VTable,
        CreateFontSetBuilder: *const fn (
            self: *const IDWriteFactory5,
            font_set_builder: ?*?*IDWriteFontSetBuilder1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInMemoryFontFileLoader: *const fn (
            self: *const IDWriteFactory5,
            new_loader: ?*?*IDWriteInMemoryFontFileLoader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateHttpFontFileLoader: *const fn (
            self: *const IDWriteFactory5,
            referrer_url: ?[*:0]const u16,
            extra_headers: ?[*:0]const u16,
            new_loader: ?*?*IDWriteRemoteFontFileLoader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AnalyzeContainerType: *const fn (
            self: *const IDWriteFactory5,
            // TODO: what to do with BytesParamIndex 1?
            file_data: ?*const anyopaque,
            file_data_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_CONTAINER_TYPE,
        UnpackFontFile: *const fn (
            self: *const IDWriteFactory5,
            container_type: DWRITE_CONTAINER_TYPE,
            // TODO: what to do with BytesParamIndex 2?
            file_data: ?*const anyopaque,
            file_data_size: u32,
            unpacked_font_stream: ?*?*IDWriteFontFileStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFactory4.MethodMixin(T);
            pub inline fn createFontSetBuilder(self: *const T, font_set_builder_: ?*?*IDWriteFontSetBuilder1) HRESULT {
                return @as(*const IDWriteFactory5.VTable, @ptrCast(self.vtable)).CreateFontSetBuilder(@as(*const IDWriteFactory5, @ptrCast(self)), font_set_builder_);
            }
            pub inline fn createInMemoryFontFileLoader(self: *const T, new_loader_: ?*?*IDWriteInMemoryFontFileLoader) HRESULT {
                return @as(*const IDWriteFactory5.VTable, @ptrCast(self.vtable)).CreateInMemoryFontFileLoader(@as(*const IDWriteFactory5, @ptrCast(self)), new_loader_);
            }
            pub inline fn createHttpFontFileLoader(self: *const T, referrer_url_: ?[*:0]const u16, extra_headers_: ?[*:0]const u16, new_loader_: ?*?*IDWriteRemoteFontFileLoader) HRESULT {
                return @as(*const IDWriteFactory5.VTable, @ptrCast(self.vtable)).CreateHttpFontFileLoader(@as(*const IDWriteFactory5, @ptrCast(self)), referrer_url_, extra_headers_, new_loader_);
            }
            pub inline fn analyzeContainerType(self: *const T, file_data_: ?*const anyopaque, file_data_size_: u32) DWRITE_CONTAINER_TYPE {
                return @as(*const IDWriteFactory5.VTable, @ptrCast(self.vtable)).AnalyzeContainerType(@as(*const IDWriteFactory5, @ptrCast(self)), file_data_, file_data_size_);
            }
            pub inline fn unpackFontFile(self: *const T, container_type_: DWRITE_CONTAINER_TYPE, file_data_: ?*const anyopaque, file_data_size_: u32, unpacked_font_stream_: ?*?*IDWriteFontFileStream) HRESULT {
                return @as(*const IDWriteFactory5.VTable, @ptrCast(self.vtable)).UnpackFontFile(@as(*const IDWriteFactory5, @ptrCast(self)), container_type_, file_data_, file_data_size_, unpacked_font_stream_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DWRITE_FONT_AXIS_VALUE = extern struct {
    axisTag: DWRITE_FONT_AXIS_TAG,
    value: f32,
};

pub const DWRITE_FONT_AXIS_RANGE = extern struct {
    axisTag: DWRITE_FONT_AXIS_TAG,
    minValue: f32,
    maxValue: f32,
};

pub const DWRITE_FONT_FAMILY_MODEL = enum(i32) {
    TYPOGRAPHIC = 0,
    WEIGHT_STRETCH_STYLE = 1,
};
pub const DWRITE_FONT_FAMILY_MODEL_TYPOGRAPHIC = DWRITE_FONT_FAMILY_MODEL.TYPOGRAPHIC;
pub const DWRITE_FONT_FAMILY_MODEL_WEIGHT_STRETCH_STYLE = DWRITE_FONT_FAMILY_MODEL.WEIGHT_STRETCH_STYLE;

pub const DWRITE_AUTOMATIC_FONT_AXES = enum(u32) {
    NONE = 0,
    OPTICAL_SIZE = 1,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        OPTICAL_SIZE: u1 = 0,
    }) DWRITE_AUTOMATIC_FONT_AXES {
        return @as(DWRITE_AUTOMATIC_FONT_AXES, @enumFromInt((if (o.NONE == 1) @intFromEnum(DWRITE_AUTOMATIC_FONT_AXES.NONE) else 0) | (if (o.OPTICAL_SIZE == 1) @intFromEnum(DWRITE_AUTOMATIC_FONT_AXES.OPTICAL_SIZE) else 0)));
    }
};
pub const DWRITE_AUTOMATIC_FONT_AXES_NONE = DWRITE_AUTOMATIC_FONT_AXES.NONE;
pub const DWRITE_AUTOMATIC_FONT_AXES_OPTICAL_SIZE = DWRITE_AUTOMATIC_FONT_AXES.OPTICAL_SIZE;

pub const DWRITE_FONT_AXIS_ATTRIBUTES = enum(u32) {
    NONE = 0,
    VARIABLE = 1,
    HIDDEN = 2,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        VARIABLE: u1 = 0,
        HIDDEN: u1 = 0,
    }) DWRITE_FONT_AXIS_ATTRIBUTES {
        return @as(DWRITE_FONT_AXIS_ATTRIBUTES, @enumFromInt((if (o.NONE == 1) @intFromEnum(DWRITE_FONT_AXIS_ATTRIBUTES.NONE) else 0) | (if (o.VARIABLE == 1) @intFromEnum(DWRITE_FONT_AXIS_ATTRIBUTES.VARIABLE) else 0) | (if (o.HIDDEN == 1) @intFromEnum(DWRITE_FONT_AXIS_ATTRIBUTES.HIDDEN) else 0)));
    }
};
pub const DWRITE_FONT_AXIS_ATTRIBUTES_NONE = DWRITE_FONT_AXIS_ATTRIBUTES.NONE;
pub const DWRITE_FONT_AXIS_ATTRIBUTES_VARIABLE = DWRITE_FONT_AXIS_ATTRIBUTES.VARIABLE;
pub const DWRITE_FONT_AXIS_ATTRIBUTES_HIDDEN = DWRITE_FONT_AXIS_ATTRIBUTES.HIDDEN;

const IID_IDWriteFactory6_Value = Guid.initString("f3744d80-21f7-42eb-b35d-995bc72fc223");
pub const IID_IDWriteFactory6 = &IID_IDWriteFactory6_Value;
pub const IDWriteFactory6 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFactory5.VTable,
        CreateFontFaceReference: *const fn (
            self: *const IDWriteFactory6,
            font_file: ?*IDWriteFontFile,
            face_index: u32,
            font_simulations: DWRITE_FONT_SIMULATIONS,
            font_axis_values: [*]const DWRITE_FONT_AXIS_VALUE,
            font_axis_value_count: u32,
            font_face_reference: ?*?*IDWriteFontFaceReference1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontResource: *const fn (
            self: *const IDWriteFactory6,
            font_file: ?*IDWriteFontFile,
            face_index: u32,
            font_resource: ?*?*IDWriteFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSystemFontSet: *const fn (
            self: *const IDWriteFactory6,
            include_downloadable_fonts: BOOL,
            font_set: ?*?*IDWriteFontSet1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSystemFontCollection: *const fn (
            self: *const IDWriteFactory6,
            include_downloadable_fonts: BOOL,
            font_family_model: DWRITE_FONT_FAMILY_MODEL,
            font_collection: ?*?*IDWriteFontCollection2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontCollectionFromFontSet: *const fn (
            self: *const IDWriteFactory6,
            font_set: ?*IDWriteFontSet,
            font_family_model: DWRITE_FONT_FAMILY_MODEL,
            font_collection: ?*?*IDWriteFontCollection2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontSetBuilder: *const fn (
            self: *const IDWriteFactory6,
            font_set_builder: ?*?*IDWriteFontSetBuilder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTextFormat: *const fn (
            self: *const IDWriteFactory6,
            font_family_name: ?[*:0]const u16,
            font_collection: ?*IDWriteFontCollection,
            font_axis_values: [*]const DWRITE_FONT_AXIS_VALUE,
            font_axis_value_count: u32,
            font_size: f32,
            locale_name: ?[*:0]const u16,
            text_format: ?*?*IDWriteTextFormat3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFactory5.MethodMixin(T);
            pub inline fn createFontFaceReference(self: *const T, font_file_: ?*IDWriteFontFile, face_index_: u32, font_simulations_: DWRITE_FONT_SIMULATIONS, font_axis_values_: [*]const DWRITE_FONT_AXIS_VALUE, font_axis_value_count_: u32, font_face_reference_: ?*?*IDWriteFontFaceReference1) HRESULT {
                return @as(*const IDWriteFactory6.VTable, @ptrCast(self.vtable)).CreateFontFaceReference(@as(*const IDWriteFactory6, @ptrCast(self)), font_file_, face_index_, font_simulations_, font_axis_values_, font_axis_value_count_, font_face_reference_);
            }
            pub inline fn createFontResource(self: *const T, font_file_: ?*IDWriteFontFile, face_index_: u32, font_resource_: ?*?*IDWriteFontResource) HRESULT {
                return @as(*const IDWriteFactory6.VTable, @ptrCast(self.vtable)).CreateFontResource(@as(*const IDWriteFactory6, @ptrCast(self)), font_file_, face_index_, font_resource_);
            }
            pub inline fn getSystemFontSet(self: *const T, include_downloadable_fonts_: BOOL, font_set_: ?*?*IDWriteFontSet1) HRESULT {
                return @as(*const IDWriteFactory6.VTable, @ptrCast(self.vtable)).GetSystemFontSet(@as(*const IDWriteFactory6, @ptrCast(self)), include_downloadable_fonts_, font_set_);
            }
            pub inline fn getSystemFontCollection(self: *const T, include_downloadable_fonts_: BOOL, font_family_model_: DWRITE_FONT_FAMILY_MODEL, font_collection_: ?*?*IDWriteFontCollection2) HRESULT {
                return @as(*const IDWriteFactory6.VTable, @ptrCast(self.vtable)).GetSystemFontCollection(@as(*const IDWriteFactory6, @ptrCast(self)), include_downloadable_fonts_, font_family_model_, font_collection_);
            }
            pub inline fn createFontCollectionFromFontSet(self: *const T, font_set_: ?*IDWriteFontSet, font_family_model_: DWRITE_FONT_FAMILY_MODEL, font_collection_: ?*?*IDWriteFontCollection2) HRESULT {
                return @as(*const IDWriteFactory6.VTable, @ptrCast(self.vtable)).CreateFontCollectionFromFontSet(@as(*const IDWriteFactory6, @ptrCast(self)), font_set_, font_family_model_, font_collection_);
            }
            pub inline fn createFontSetBuilder(self: *const T, font_set_builder_: ?*?*IDWriteFontSetBuilder2) HRESULT {
                return @as(*const IDWriteFactory6.VTable, @ptrCast(self.vtable)).CreateFontSetBuilder(@as(*const IDWriteFactory6, @ptrCast(self)), font_set_builder_);
            }
            pub inline fn createTextFormat(self: *const T, font_family_name_: ?[*:0]const u16, font_collection_: ?*IDWriteFontCollection, font_axis_values_: [*]const DWRITE_FONT_AXIS_VALUE, font_axis_value_count_: u32, font_size_: f32, locale_name_: ?[*:0]const u16, text_format_: ?*?*IDWriteTextFormat3) HRESULT {
                return @as(*const IDWriteFactory6.VTable, @ptrCast(self.vtable)).CreateTextFormat(@as(*const IDWriteFactory6, @ptrCast(self)), font_family_name_, font_collection_, font_axis_values_, font_axis_value_count_, font_size_, locale_name_, text_format_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteFontFace5_Value = Guid.initString("98eff3a5-b667-479a-b145-e2fa5b9fdc29");
pub const IID_IDWriteFontFace5 = &IID_IDWriteFontFace5_Value;
pub const IDWriteFontFace5 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontFace4.VTable,
        GetFontAxisValueCount: *const fn (
            self: *const IDWriteFontFace5,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFontAxisValues: *const fn (
            self: *const IDWriteFontFace5,
            font_axis_values: [*]DWRITE_FONT_AXIS_VALUE,
            font_axis_value_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasVariations: *const fn (
            self: *const IDWriteFontFace5,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        GetFontResource: *const fn (
            self: *const IDWriteFontFace5,
            font_resource: ?*?*IDWriteFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Equals: *const fn (
            self: *const IDWriteFontFace5,
            font_face: ?*IDWriteFontFace,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontFace4.MethodMixin(T);
            pub inline fn getFontAxisValueCount(self: *const T) u32 {
                return @as(*const IDWriteFontFace5.VTable, @ptrCast(self.vtable)).GetFontAxisValueCount(@as(*const IDWriteFontFace5, @ptrCast(self)));
            }
            pub inline fn getFontAxisValues(self: *const T, font_axis_values_: [*]DWRITE_FONT_AXIS_VALUE, font_axis_value_count_: u32) HRESULT {
                return @as(*const IDWriteFontFace5.VTable, @ptrCast(self.vtable)).GetFontAxisValues(@as(*const IDWriteFontFace5, @ptrCast(self)), font_axis_values_, font_axis_value_count_);
            }
            pub inline fn hasVariations(self: *const T) BOOL {
                return @as(*const IDWriteFontFace5.VTable, @ptrCast(self.vtable)).HasVariations(@as(*const IDWriteFontFace5, @ptrCast(self)));
            }
            pub inline fn getFontResource(self: *const T, font_resource_: ?*?*IDWriteFontResource) HRESULT {
                return @as(*const IDWriteFontFace5.VTable, @ptrCast(self.vtable)).GetFontResource(@as(*const IDWriteFontFace5, @ptrCast(self)), font_resource_);
            }
            pub inline fn equals(self: *const T, font_face_: ?*IDWriteFontFace) BOOL {
                return @as(*const IDWriteFontFace5.VTable, @ptrCast(self.vtable)).Equals(@as(*const IDWriteFontFace5, @ptrCast(self)), font_face_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteFontResource_Value = Guid.initString("1f803a76-6871-48e8-987f-b975551c50f2");
pub const IID_IDWriteFontResource = &IID_IDWriteFontResource_Value;
pub const IDWriteFontResource = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFontFile: *const fn (
            self: *const IDWriteFontResource,
            font_file: ?*?*IDWriteFontFile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFaceIndex: *const fn (
            self: *const IDWriteFontResource,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFontAxisCount: *const fn (
            self: *const IDWriteFontResource,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetDefaultFontAxisValues: *const fn (
            self: *const IDWriteFontResource,
            font_axis_values: [*]DWRITE_FONT_AXIS_VALUE,
            font_axis_value_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontAxisRanges: *const fn (
            self: *const IDWriteFontResource,
            font_axis_ranges: [*]DWRITE_FONT_AXIS_RANGE,
            font_axis_range_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontAxisAttributes: *const fn (
            self: *const IDWriteFontResource,
            axis_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_AXIS_ATTRIBUTES,
        GetAxisNames: *const fn (
            self: *const IDWriteFontResource,
            axis_index: u32,
            names: ?*?*IDWriteLocalizedStrings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAxisValueNameCount: *const fn (
            self: *const IDWriteFontResource,
            axis_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetAxisValueNames: *const fn (
            self: *const IDWriteFontResource,
            axis_index: u32,
            axis_value_index: u32,
            font_axis_range: ?*DWRITE_FONT_AXIS_RANGE,
            names: ?*?*IDWriteLocalizedStrings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasVariations: *const fn (
            self: *const IDWriteFontResource,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        CreateFontFace: *const fn (
            self: *const IDWriteFontResource,
            font_simulations: DWRITE_FONT_SIMULATIONS,
            font_axis_values: [*]const DWRITE_FONT_AXIS_VALUE,
            font_axis_value_count: u32,
            font_face: ?*?*IDWriteFontFace5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFaceReference: *const fn (
            self: *const IDWriteFontResource,
            font_simulations: DWRITE_FONT_SIMULATIONS,
            font_axis_values: [*]const DWRITE_FONT_AXIS_VALUE,
            font_axis_value_count: u32,
            font_face_reference: ?*?*IDWriteFontFaceReference1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFontFile(self: *const T, font_file_: ?*?*IDWriteFontFile) HRESULT {
                return @as(*const IDWriteFontResource.VTable, @ptrCast(self.vtable)).GetFontFile(@as(*const IDWriteFontResource, @ptrCast(self)), font_file_);
            }
            pub inline fn getFontFaceIndex(self: *const T) u32 {
                return @as(*const IDWriteFontResource.VTable, @ptrCast(self.vtable)).GetFontFaceIndex(@as(*const IDWriteFontResource, @ptrCast(self)));
            }
            pub inline fn getFontAxisCount(self: *const T) u32 {
                return @as(*const IDWriteFontResource.VTable, @ptrCast(self.vtable)).GetFontAxisCount(@as(*const IDWriteFontResource, @ptrCast(self)));
            }
            pub inline fn getDefaultFontAxisValues(self: *const T, font_axis_values_: [*]DWRITE_FONT_AXIS_VALUE, font_axis_value_count_: u32) HRESULT {
                return @as(*const IDWriteFontResource.VTable, @ptrCast(self.vtable)).GetDefaultFontAxisValues(@as(*const IDWriteFontResource, @ptrCast(self)), font_axis_values_, font_axis_value_count_);
            }
            pub inline fn getFontAxisRanges(self: *const T, font_axis_ranges_: [*]DWRITE_FONT_AXIS_RANGE, font_axis_range_count_: u32) HRESULT {
                return @as(*const IDWriteFontResource.VTable, @ptrCast(self.vtable)).GetFontAxisRanges(@as(*const IDWriteFontResource, @ptrCast(self)), font_axis_ranges_, font_axis_range_count_);
            }
            pub inline fn getFontAxisAttributes(self: *const T, axis_index_: u32) DWRITE_FONT_AXIS_ATTRIBUTES {
                return @as(*const IDWriteFontResource.VTable, @ptrCast(self.vtable)).GetFontAxisAttributes(@as(*const IDWriteFontResource, @ptrCast(self)), axis_index_);
            }
            pub inline fn getAxisNames(self: *const T, axis_index_: u32, names_: ?*?*IDWriteLocalizedStrings) HRESULT {
                return @as(*const IDWriteFontResource.VTable, @ptrCast(self.vtable)).GetAxisNames(@as(*const IDWriteFontResource, @ptrCast(self)), axis_index_, names_);
            }
            pub inline fn getAxisValueNameCount(self: *const T, axis_index_: u32) u32 {
                return @as(*const IDWriteFontResource.VTable, @ptrCast(self.vtable)).GetAxisValueNameCount(@as(*const IDWriteFontResource, @ptrCast(self)), axis_index_);
            }
            pub inline fn getAxisValueNames(self: *const T, axis_index_: u32, axis_value_index_: u32, font_axis_range_: ?*DWRITE_FONT_AXIS_RANGE, names_: ?*?*IDWriteLocalizedStrings) HRESULT {
                return @as(*const IDWriteFontResource.VTable, @ptrCast(self.vtable)).GetAxisValueNames(@as(*const IDWriteFontResource, @ptrCast(self)), axis_index_, axis_value_index_, font_axis_range_, names_);
            }
            pub inline fn hasVariations(self: *const T) BOOL {
                return @as(*const IDWriteFontResource.VTable, @ptrCast(self.vtable)).HasVariations(@as(*const IDWriteFontResource, @ptrCast(self)));
            }
            pub inline fn createFontFace(self: *const T, font_simulations_: DWRITE_FONT_SIMULATIONS, font_axis_values_: [*]const DWRITE_FONT_AXIS_VALUE, font_axis_value_count_: u32, font_face_: ?*?*IDWriteFontFace5) HRESULT {
                return @as(*const IDWriteFontResource.VTable, @ptrCast(self.vtable)).CreateFontFace(@as(*const IDWriteFontResource, @ptrCast(self)), font_simulations_, font_axis_values_, font_axis_value_count_, font_face_);
            }
            pub inline fn createFontFaceReference(self: *const T, font_simulations_: DWRITE_FONT_SIMULATIONS, font_axis_values_: [*]const DWRITE_FONT_AXIS_VALUE, font_axis_value_count_: u32, font_face_reference_: ?*?*IDWriteFontFaceReference1) HRESULT {
                return @as(*const IDWriteFontResource.VTable, @ptrCast(self.vtable)).CreateFontFaceReference(@as(*const IDWriteFontResource, @ptrCast(self)), font_simulations_, font_axis_values_, font_axis_value_count_, font_face_reference_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteFontFaceReference1_Value = Guid.initString("c081fe77-2fd1-41ac-a5a3-34983c4ba61a");
pub const IID_IDWriteFontFaceReference1 = &IID_IDWriteFontFaceReference1_Value;
pub const IDWriteFontFaceReference1 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontFaceReference.VTable,
        CreateFontFace: *const fn (
            self: *const IDWriteFontFaceReference1,
            font_face: ?*?*IDWriteFontFace5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontAxisValueCount: *const fn (
            self: *const IDWriteFontFaceReference1,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFontAxisValues: *const fn (
            self: *const IDWriteFontFaceReference1,
            font_axis_values: [*]DWRITE_FONT_AXIS_VALUE,
            font_axis_value_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontFaceReference.MethodMixin(T);
            pub inline fn createFontFace(self: *const T, font_face_: ?*?*IDWriteFontFace5) HRESULT {
                return @as(*const IDWriteFontFaceReference1.VTable, @ptrCast(self.vtable)).CreateFontFace(@as(*const IDWriteFontFaceReference1, @ptrCast(self)), font_face_);
            }
            pub inline fn getFontAxisValueCount(self: *const T) u32 {
                return @as(*const IDWriteFontFaceReference1.VTable, @ptrCast(self.vtable)).GetFontAxisValueCount(@as(*const IDWriteFontFaceReference1, @ptrCast(self)));
            }
            pub inline fn getFontAxisValues(self: *const T, font_axis_values_: [*]DWRITE_FONT_AXIS_VALUE, font_axis_value_count_: u32) HRESULT {
                return @as(*const IDWriteFontFaceReference1.VTable, @ptrCast(self.vtable)).GetFontAxisValues(@as(*const IDWriteFontFaceReference1, @ptrCast(self)), font_axis_values_, font_axis_value_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteFontSetBuilder2_Value = Guid.initString("ee5ba612-b131-463c-8f4f-3189b9401e45");
pub const IID_IDWriteFontSetBuilder2 = &IID_IDWriteFontSetBuilder2_Value;
pub const IDWriteFontSetBuilder2 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontSetBuilder1.VTable,
        AddFont: *const fn (
            self: *const IDWriteFontSetBuilder2,
            font_file: ?*IDWriteFontFile,
            font_face_index: u32,
            font_simulations: DWRITE_FONT_SIMULATIONS,
            font_axis_values: [*]const DWRITE_FONT_AXIS_VALUE,
            font_axis_value_count: u32,
            font_axis_ranges: [*]const DWRITE_FONT_AXIS_RANGE,
            font_axis_range_count: u32,
            properties: [*]const DWRITE_FONT_PROPERTY,
            property_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFontFile: *const fn (
            self: *const IDWriteFontSetBuilder2,
            file_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontSetBuilder1.MethodMixin(T);
            pub inline fn addFont(self: *const T, font_file_: ?*IDWriteFontFile, font_face_index_: u32, font_simulations_: DWRITE_FONT_SIMULATIONS, font_axis_values_: [*]const DWRITE_FONT_AXIS_VALUE, font_axis_value_count_: u32, font_axis_ranges_: [*]const DWRITE_FONT_AXIS_RANGE, font_axis_range_count_: u32, properties_: [*]const DWRITE_FONT_PROPERTY, property_count_: u32) HRESULT {
                return @as(*const IDWriteFontSetBuilder2.VTable, @ptrCast(self.vtable)).AddFont(@as(*const IDWriteFontSetBuilder2, @ptrCast(self)), font_file_, font_face_index_, font_simulations_, font_axis_values_, font_axis_value_count_, font_axis_ranges_, font_axis_range_count_, properties_, property_count_);
            }
            pub inline fn addFontFile(self: *const T, file_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IDWriteFontSetBuilder2.VTable, @ptrCast(self.vtable)).AddFontFile(@as(*const IDWriteFontSetBuilder2, @ptrCast(self)), file_path_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteFontSet1_Value = Guid.initString("7e9fda85-6c92-4053-bc47-7ae3530db4d3");
pub const IID_IDWriteFontSet1 = &IID_IDWriteFontSet1_Value;
pub const IDWriteFontSet1 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontSet.VTable,
        GetMatchingFonts: *const fn (
            self: *const IDWriteFontSet1,
            font_property: ?*const DWRITE_FONT_PROPERTY,
            font_axis_values: [*]const DWRITE_FONT_AXIS_VALUE,
            font_axis_value_count: u32,
            matching_fonts: ?*?*IDWriteFontSet1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFirstFontResources: *const fn (
            self: *const IDWriteFontSet1,
            filtered_font_set: ?*?*IDWriteFontSet1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredFonts: *const fn (
            self: *const IDWriteFontSet1,
            indices: [*]const u32,
            index_count: u32,
            filtered_font_set: ?*?*IDWriteFontSet1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredFonts1: *const fn (
            self: *const IDWriteFontSet1,
            font_axis_ranges: [*]const DWRITE_FONT_AXIS_RANGE,
            font_axis_range_count: u32,
            select_any_range: BOOL,
            filtered_font_set: ?*?*IDWriteFontSet1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredFonts2: *const fn (
            self: *const IDWriteFontSet1,
            properties: ?[*]const DWRITE_FONT_PROPERTY,
            property_count: u32,
            select_any_property: BOOL,
            filtered_font_set: ?*?*IDWriteFontSet1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredFontIndices: *const fn (
            self: *const IDWriteFontSet1,
            font_axis_ranges: [*]const DWRITE_FONT_AXIS_RANGE,
            font_axis_range_count: u32,
            select_any_range: BOOL,
            indices: [*]u32,
            max_index_count: u32,
            actual_index_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilteredFontIndices1: *const fn (
            self: *const IDWriteFontSet1,
            properties: [*]const DWRITE_FONT_PROPERTY,
            property_count: u32,
            select_any_property: BOOL,
            indices: [*]u32,
            max_index_count: u32,
            actual_index_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontAxisRanges: *const fn (
            self: *const IDWriteFontSet1,
            list_index: u32,
            font_axis_ranges: [*]DWRITE_FONT_AXIS_RANGE,
            max_font_axis_range_count: u32,
            actual_font_axis_range_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontAxisRanges1: *const fn (
            self: *const IDWriteFontSet1,
            font_axis_ranges: [*]DWRITE_FONT_AXIS_RANGE,
            max_font_axis_range_count: u32,
            actual_font_axis_range_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFaceReference: *const fn (
            self: *const IDWriteFontSet1,
            list_index: u32,
            font_face_reference: ?*?*IDWriteFontFaceReference1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontResource: *const fn (
            self: *const IDWriteFontSet1,
            list_index: u32,
            font_resource: ?*?*IDWriteFontResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFontFace: *const fn (
            self: *const IDWriteFontSet1,
            list_index: u32,
            font_face: ?*?*IDWriteFontFace5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontLocality: *const fn (
            self: *const IDWriteFontSet1,
            list_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_LOCALITY,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontSet.MethodMixin(T);
            pub inline fn getMatchingFonts(self: *const T, font_property_: ?*const DWRITE_FONT_PROPERTY, font_axis_values_: [*]const DWRITE_FONT_AXIS_VALUE, font_axis_value_count_: u32, matching_fonts_: ?*?*IDWriteFontSet1) HRESULT {
                return @as(*const IDWriteFontSet1.VTable, @ptrCast(self.vtable)).GetMatchingFonts(@as(*const IDWriteFontSet1, @ptrCast(self)), font_property_, font_axis_values_, font_axis_value_count_, matching_fonts_);
            }
            pub inline fn getFirstFontResources(self: *const T, filtered_font_set_: ?*?*IDWriteFontSet1) HRESULT {
                return @as(*const IDWriteFontSet1.VTable, @ptrCast(self.vtable)).GetFirstFontResources(@as(*const IDWriteFontSet1, @ptrCast(self)), filtered_font_set_);
            }
            pub inline fn getFilteredFonts(self: *const T, indices_: [*]const u32, index_count_: u32, filtered_font_set_: ?*?*IDWriteFontSet1) HRESULT {
                return @as(*const IDWriteFontSet1.VTable, @ptrCast(self.vtable)).GetFilteredFonts(@as(*const IDWriteFontSet1, @ptrCast(self)), indices_, index_count_, filtered_font_set_);
            }
            pub inline fn getFilteredFonts1(self: *const T, font_axis_ranges_: [*]const DWRITE_FONT_AXIS_RANGE, font_axis_range_count_: u32, select_any_range_: BOOL, filtered_font_set_: ?*?*IDWriteFontSet1) HRESULT {
                return @as(*const IDWriteFontSet1.VTable, @ptrCast(self.vtable)).GetFilteredFonts(@as(*const IDWriteFontSet1, @ptrCast(self)), font_axis_ranges_, font_axis_range_count_, select_any_range_, filtered_font_set_);
            }
            pub inline fn getFilteredFonts2(self: *const T, properties_: ?[*]const DWRITE_FONT_PROPERTY, property_count_: u32, select_any_property_: BOOL, filtered_font_set_: ?*?*IDWriteFontSet1) HRESULT {
                return @as(*const IDWriteFontSet1.VTable, @ptrCast(self.vtable)).GetFilteredFonts(@as(*const IDWriteFontSet1, @ptrCast(self)), properties_, property_count_, select_any_property_, filtered_font_set_);
            }
            pub inline fn getFilteredFontIndices(self: *const T, font_axis_ranges_: [*]const DWRITE_FONT_AXIS_RANGE, font_axis_range_count_: u32, select_any_range_: BOOL, indices_: [*]u32, max_index_count_: u32, actual_index_count_: ?*u32) HRESULT {
                return @as(*const IDWriteFontSet1.VTable, @ptrCast(self.vtable)).GetFilteredFontIndices(@as(*const IDWriteFontSet1, @ptrCast(self)), font_axis_ranges_, font_axis_range_count_, select_any_range_, indices_, max_index_count_, actual_index_count_);
            }
            pub inline fn getFilteredFontIndices1(self: *const T, properties_: [*]const DWRITE_FONT_PROPERTY, property_count_: u32, select_any_property_: BOOL, indices_: [*]u32, max_index_count_: u32, actual_index_count_: ?*u32) HRESULT {
                return @as(*const IDWriteFontSet1.VTable, @ptrCast(self.vtable)).GetFilteredFontIndices(@as(*const IDWriteFontSet1, @ptrCast(self)), properties_, property_count_, select_any_property_, indices_, max_index_count_, actual_index_count_);
            }
            pub inline fn getFontAxisRanges(self: *const T, list_index_: u32, font_axis_ranges_: [*]DWRITE_FONT_AXIS_RANGE, max_font_axis_range_count_: u32, actual_font_axis_range_count_: ?*u32) HRESULT {
                return @as(*const IDWriteFontSet1.VTable, @ptrCast(self.vtable)).GetFontAxisRanges(@as(*const IDWriteFontSet1, @ptrCast(self)), list_index_, font_axis_ranges_, max_font_axis_range_count_, actual_font_axis_range_count_);
            }
            pub inline fn getFontAxisRanges1(self: *const T, font_axis_ranges_: [*]DWRITE_FONT_AXIS_RANGE, max_font_axis_range_count_: u32, actual_font_axis_range_count_: ?*u32) HRESULT {
                return @as(*const IDWriteFontSet1.VTable, @ptrCast(self.vtable)).GetFontAxisRanges(@as(*const IDWriteFontSet1, @ptrCast(self)), font_axis_ranges_, max_font_axis_range_count_, actual_font_axis_range_count_);
            }
            pub inline fn getFontFaceReference(self: *const T, list_index_: u32, font_face_reference_: ?*?*IDWriteFontFaceReference1) HRESULT {
                return @as(*const IDWriteFontSet1.VTable, @ptrCast(self.vtable)).GetFontFaceReference(@as(*const IDWriteFontSet1, @ptrCast(self)), list_index_, font_face_reference_);
            }
            pub inline fn createFontResource(self: *const T, list_index_: u32, font_resource_: ?*?*IDWriteFontResource) HRESULT {
                return @as(*const IDWriteFontSet1.VTable, @ptrCast(self.vtable)).CreateFontResource(@as(*const IDWriteFontSet1, @ptrCast(self)), list_index_, font_resource_);
            }
            pub inline fn createFontFace(self: *const T, list_index_: u32, font_face_: ?*?*IDWriteFontFace5) HRESULT {
                return @as(*const IDWriteFontSet1.VTable, @ptrCast(self.vtable)).CreateFontFace(@as(*const IDWriteFontSet1, @ptrCast(self)), list_index_, font_face_);
            }
            pub inline fn getFontLocality(self: *const T, list_index_: u32) DWRITE_LOCALITY {
                return @as(*const IDWriteFontSet1.VTable, @ptrCast(self.vtable)).GetFontLocality(@as(*const IDWriteFontSet1, @ptrCast(self)), list_index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteFontList2_Value = Guid.initString("c0763a34-77af-445a-b735-08c37b0a5bf5");
pub const IID_IDWriteFontList2 = &IID_IDWriteFontList2_Value;
pub const IDWriteFontList2 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontList1.VTable,
        GetFontSet: *const fn (
            self: *const IDWriteFontList2,
            font_set: ?*?*IDWriteFontSet1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontList1.MethodMixin(T);
            pub inline fn getFontSet(self: *const T, font_set_: ?*?*IDWriteFontSet1) HRESULT {
                return @as(*const IDWriteFontList2.VTable, @ptrCast(self.vtable)).GetFontSet(@as(*const IDWriteFontList2, @ptrCast(self)), font_set_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteFontFamily2_Value = Guid.initString("3ed49e77-a398-4261-b9cf-c126c2131ef3");
pub const IID_IDWriteFontFamily2 = &IID_IDWriteFontFamily2_Value;
pub const IDWriteFontFamily2 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontFamily1.VTable,
        GetMatchingFonts: *const fn (
            self: *const IDWriteFontFamily2,
            font_axis_values: [*]const DWRITE_FONT_AXIS_VALUE,
            font_axis_value_count: u32,
            matching_fonts: ?*?*IDWriteFontList2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontSet: *const fn (
            self: *const IDWriteFontFamily2,
            font_set: ?*?*IDWriteFontSet1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontFamily1.MethodMixin(T);
            pub inline fn getMatchingFonts(self: *const T, font_axis_values_: [*]const DWRITE_FONT_AXIS_VALUE, font_axis_value_count_: u32, matching_fonts_: ?*?*IDWriteFontList2) HRESULT {
                return @as(*const IDWriteFontFamily2.VTable, @ptrCast(self.vtable)).GetMatchingFonts(@as(*const IDWriteFontFamily2, @ptrCast(self)), font_axis_values_, font_axis_value_count_, matching_fonts_);
            }
            pub inline fn getFontSet(self: *const T, font_set_: ?*?*IDWriteFontSet1) HRESULT {
                return @as(*const IDWriteFontFamily2.VTable, @ptrCast(self.vtable)).GetFontSet(@as(*const IDWriteFontFamily2, @ptrCast(self)), font_set_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteFontCollection2_Value = Guid.initString("514039c6-4617-4064-bf8b-92ea83e506e0");
pub const IID_IDWriteFontCollection2 = &IID_IDWriteFontCollection2_Value;
pub const IDWriteFontCollection2 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontCollection1.VTable,
        GetFontFamily: *const fn (
            self: *const IDWriteFontCollection2,
            index: u32,
            font_family: ?*?*IDWriteFontFamily2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMatchingFonts: *const fn (
            self: *const IDWriteFontCollection2,
            family_name: ?[*:0]const u16,
            font_axis_values: [*]const DWRITE_FONT_AXIS_VALUE,
            font_axis_value_count: u32,
            font_list: ?*?*IDWriteFontList2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontFamilyModel: *const fn (
            self: *const IDWriteFontCollection2,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_FAMILY_MODEL,
        GetFontSet: *const fn (
            self: *const IDWriteFontCollection2,
            font_set: ?*?*IDWriteFontSet1,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontCollection1.MethodMixin(T);
            pub inline fn getFontFamily(self: *const T, index_: u32, font_family_: ?*?*IDWriteFontFamily2) HRESULT {
                return @as(*const IDWriteFontCollection2.VTable, @ptrCast(self.vtable)).GetFontFamily(@as(*const IDWriteFontCollection2, @ptrCast(self)), index_, font_family_);
            }
            pub inline fn getMatchingFonts(self: *const T, family_name_: ?[*:0]const u16, font_axis_values_: [*]const DWRITE_FONT_AXIS_VALUE, font_axis_value_count_: u32, font_list_: ?*?*IDWriteFontList2) HRESULT {
                return @as(*const IDWriteFontCollection2.VTable, @ptrCast(self.vtable)).GetMatchingFonts(@as(*const IDWriteFontCollection2, @ptrCast(self)), family_name_, font_axis_values_, font_axis_value_count_, font_list_);
            }
            pub inline fn getFontFamilyModel(self: *const T) DWRITE_FONT_FAMILY_MODEL {
                return @as(*const IDWriteFontCollection2.VTable, @ptrCast(self.vtable)).GetFontFamilyModel(@as(*const IDWriteFontCollection2, @ptrCast(self)));
            }
            pub inline fn getFontSet(self: *const T, font_set_: ?*?*IDWriteFontSet1) HRESULT {
                return @as(*const IDWriteFontCollection2.VTable, @ptrCast(self.vtable)).GetFontSet(@as(*const IDWriteFontCollection2, @ptrCast(self)), font_set_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteTextLayout4_Value = Guid.initString("05a9bf42-223f-4441-b5fb-8263685f55e9");
pub const IID_IDWriteTextLayout4 = &IID_IDWriteTextLayout4_Value;
pub const IDWriteTextLayout4 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteTextLayout3.VTable,
        SetFontAxisValues: *const fn (
            self: *const IDWriteTextLayout4,
            font_axis_values: [*]const DWRITE_FONT_AXIS_VALUE,
            font_axis_value_count: u32,
            text_range: DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontAxisValueCount: *const fn (
            self: *const IDWriteTextLayout4,
            current_position: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFontAxisValues: *const fn (
            self: *const IDWriteTextLayout4,
            current_position: u32,
            font_axis_values: [*]DWRITE_FONT_AXIS_VALUE,
            font_axis_value_count: u32,
            text_range: ?*DWRITE_TEXT_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAutomaticFontAxes: *const fn (
            self: *const IDWriteTextLayout4,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_AUTOMATIC_FONT_AXES,
        SetAutomaticFontAxes: *const fn (
            self: *const IDWriteTextLayout4,
            automatic_font_axes: DWRITE_AUTOMATIC_FONT_AXES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteTextLayout3.MethodMixin(T);
            pub inline fn setFontAxisValues(self: *const T, font_axis_values_: [*]const DWRITE_FONT_AXIS_VALUE, font_axis_value_count_: u32, text_range_: DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout4.VTable, @ptrCast(self.vtable)).SetFontAxisValues(@as(*const IDWriteTextLayout4, @ptrCast(self)), font_axis_values_, font_axis_value_count_, text_range_);
            }
            pub inline fn getFontAxisValueCount(self: *const T, current_position_: u32) u32 {
                return @as(*const IDWriteTextLayout4.VTable, @ptrCast(self.vtable)).GetFontAxisValueCount(@as(*const IDWriteTextLayout4, @ptrCast(self)), current_position_);
            }
            pub inline fn getFontAxisValues(self: *const T, current_position_: u32, font_axis_values_: [*]DWRITE_FONT_AXIS_VALUE, font_axis_value_count_: u32, text_range_: ?*DWRITE_TEXT_RANGE) HRESULT {
                return @as(*const IDWriteTextLayout4.VTable, @ptrCast(self.vtable)).GetFontAxisValues(@as(*const IDWriteTextLayout4, @ptrCast(self)), current_position_, font_axis_values_, font_axis_value_count_, text_range_);
            }
            pub inline fn getAutomaticFontAxes(self: *const T) DWRITE_AUTOMATIC_FONT_AXES {
                return @as(*const IDWriteTextLayout4.VTable, @ptrCast(self.vtable)).GetAutomaticFontAxes(@as(*const IDWriteTextLayout4, @ptrCast(self)));
            }
            pub inline fn setAutomaticFontAxes(self: *const T, automatic_font_axes_: DWRITE_AUTOMATIC_FONT_AXES) HRESULT {
                return @as(*const IDWriteTextLayout4.VTable, @ptrCast(self.vtable)).SetAutomaticFontAxes(@as(*const IDWriteTextLayout4, @ptrCast(self)), automatic_font_axes_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteTextFormat3_Value = Guid.initString("6d3b5641-e550-430d-a85b-b7bf48a93427");
pub const IID_IDWriteTextFormat3 = &IID_IDWriteTextFormat3_Value;
pub const IDWriteTextFormat3 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteTextFormat2.VTable,
        SetFontAxisValues: *const fn (
            self: *const IDWriteTextFormat3,
            font_axis_values: [*]const DWRITE_FONT_AXIS_VALUE,
            font_axis_value_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontAxisValueCount: *const fn (
            self: *const IDWriteTextFormat3,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFontAxisValues: *const fn (
            self: *const IDWriteTextFormat3,
            font_axis_values: [*]DWRITE_FONT_AXIS_VALUE,
            font_axis_value_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAutomaticFontAxes: *const fn (
            self: *const IDWriteTextFormat3,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_AUTOMATIC_FONT_AXES,
        SetAutomaticFontAxes: *const fn (
            self: *const IDWriteTextFormat3,
            automatic_font_axes: DWRITE_AUTOMATIC_FONT_AXES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteTextFormat2.MethodMixin(T);
            pub inline fn setFontAxisValues(self: *const T, font_axis_values_: [*]const DWRITE_FONT_AXIS_VALUE, font_axis_value_count_: u32) HRESULT {
                return @as(*const IDWriteTextFormat3.VTable, @ptrCast(self.vtable)).SetFontAxisValues(@as(*const IDWriteTextFormat3, @ptrCast(self)), font_axis_values_, font_axis_value_count_);
            }
            pub inline fn getFontAxisValueCount(self: *const T) u32 {
                return @as(*const IDWriteTextFormat3.VTable, @ptrCast(self.vtable)).GetFontAxisValueCount(@as(*const IDWriteTextFormat3, @ptrCast(self)));
            }
            pub inline fn getFontAxisValues(self: *const T, font_axis_values_: [*]DWRITE_FONT_AXIS_VALUE, font_axis_value_count_: u32) HRESULT {
                return @as(*const IDWriteTextFormat3.VTable, @ptrCast(self.vtable)).GetFontAxisValues(@as(*const IDWriteTextFormat3, @ptrCast(self)), font_axis_values_, font_axis_value_count_);
            }
            pub inline fn getAutomaticFontAxes(self: *const T) DWRITE_AUTOMATIC_FONT_AXES {
                return @as(*const IDWriteTextFormat3.VTable, @ptrCast(self.vtable)).GetAutomaticFontAxes(@as(*const IDWriteTextFormat3, @ptrCast(self)));
            }
            pub inline fn setAutomaticFontAxes(self: *const T, automatic_font_axes_: DWRITE_AUTOMATIC_FONT_AXES) HRESULT {
                return @as(*const IDWriteTextFormat3.VTable, @ptrCast(self.vtable)).SetAutomaticFontAxes(@as(*const IDWriteTextFormat3, @ptrCast(self)), automatic_font_axes_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteFontFallback1_Value = Guid.initString("2397599d-dd0d-4681-bd6a-f4f31eaade77");
pub const IID_IDWriteFontFallback1 = &IID_IDWriteFontFallback1_Value;
pub const IDWriteFontFallback1 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontFallback.VTable,
        MapCharacters: *const fn (
            self: *const IDWriteFontFallback1,
            analysis_source: ?*IDWriteTextAnalysisSource,
            text_position: u32,
            text_length: u32,
            base_font_collection: ?*IDWriteFontCollection,
            base_family_name: ?[*:0]const u16,
            font_axis_values: [*]const DWRITE_FONT_AXIS_VALUE,
            font_axis_value_count: u32,
            mapped_length: ?*u32,
            scale: ?*f32,
            mapped_font_face: ?*?*IDWriteFontFace5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontFallback.MethodMixin(T);
            pub inline fn mapCharacters(self: *const T, analysis_source_: ?*IDWriteTextAnalysisSource, text_position_: u32, text_length_: u32, base_font_collection_: ?*IDWriteFontCollection, base_family_name_: ?[*:0]const u16, font_axis_values_: [*]const DWRITE_FONT_AXIS_VALUE, font_axis_value_count_: u32, mapped_length_: ?*u32, scale_: ?*f32, mapped_font_face_: ?*?*IDWriteFontFace5) HRESULT {
                return @as(*const IDWriteFontFallback1.VTable, @ptrCast(self.vtable)).MapCharacters(@as(*const IDWriteFontFallback1, @ptrCast(self)), analysis_source_, text_position_, text_length_, base_font_collection_, base_family_name_, font_axis_values_, font_axis_value_count_, mapped_length_, scale_, mapped_font_face_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteFontSet2_Value = Guid.initString("dc7ead19-e54c-43af-b2da-4e2b79ba3f7f");
pub const IID_IDWriteFontSet2 = &IID_IDWriteFontSet2_Value;
pub const IDWriteFontSet2 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontSet1.VTable,
        GetExpirationEvent: *const fn (
            self: *const IDWriteFontSet2,
        ) callconv(@import("std").os.windows.WINAPI) ?HANDLE,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontSet1.MethodMixin(T);
            pub inline fn getExpirationEvent(self: *const T) ?HANDLE {
                return @as(*const IDWriteFontSet2.VTable, @ptrCast(self.vtable)).GetExpirationEvent(@as(*const IDWriteFontSet2, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteFontCollection3_Value = Guid.initString("a4d055a6-f9e3-4e25-93b7-9e309f3af8e9");
pub const IID_IDWriteFontCollection3 = &IID_IDWriteFontCollection3_Value;
pub const IDWriteFontCollection3 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontCollection2.VTable,
        GetExpirationEvent: *const fn (
            self: *const IDWriteFontCollection3,
        ) callconv(@import("std").os.windows.WINAPI) ?HANDLE,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontCollection2.MethodMixin(T);
            pub inline fn getExpirationEvent(self: *const T) ?HANDLE {
                return @as(*const IDWriteFontCollection3.VTable, @ptrCast(self.vtable)).GetExpirationEvent(@as(*const IDWriteFontCollection3, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteFactory7_Value = Guid.initString("35d0e0b3-9076-4d2e-a016-a91b568a06b4");
pub const IID_IDWriteFactory7 = &IID_IDWriteFactory7_Value;
pub const IDWriteFactory7 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFactory6.VTable,
        GetSystemFontSet: *const fn (
            self: *const IDWriteFactory7,
            include_downloadable_fonts: BOOL,
            font_set: ?*?*IDWriteFontSet2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSystemFontCollection: *const fn (
            self: *const IDWriteFactory7,
            include_downloadable_fonts: BOOL,
            font_family_model: DWRITE_FONT_FAMILY_MODEL,
            font_collection: ?*?*IDWriteFontCollection3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFactory6.MethodMixin(T);
            pub inline fn getSystemFontSet(self: *const T, include_downloadable_fonts_: BOOL, font_set_: ?*?*IDWriteFontSet2) HRESULT {
                return @as(*const IDWriteFactory7.VTable, @ptrCast(self.vtable)).GetSystemFontSet(@as(*const IDWriteFactory7, @ptrCast(self)), include_downloadable_fonts_, font_set_);
            }
            pub inline fn getSystemFontCollection(self: *const T, include_downloadable_fonts_: BOOL, font_family_model_: DWRITE_FONT_FAMILY_MODEL, font_collection_: ?*?*IDWriteFontCollection3) HRESULT {
                return @as(*const IDWriteFactory7.VTable, @ptrCast(self.vtable)).GetSystemFontCollection(@as(*const IDWriteFactory7, @ptrCast(self)), include_downloadable_fonts_, font_family_model_, font_collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DWRITE_FONT_SOURCE_TYPE = enum(i32) {
    UNKNOWN = 0,
    PER_MACHINE = 1,
    PER_USER = 2,
    APPX_PACKAGE = 3,
    REMOTE_FONT_PROVIDER = 4,
};
pub const DWRITE_FONT_SOURCE_TYPE_UNKNOWN = DWRITE_FONT_SOURCE_TYPE.UNKNOWN;
pub const DWRITE_FONT_SOURCE_TYPE_PER_MACHINE = DWRITE_FONT_SOURCE_TYPE.PER_MACHINE;
pub const DWRITE_FONT_SOURCE_TYPE_PER_USER = DWRITE_FONT_SOURCE_TYPE.PER_USER;
pub const DWRITE_FONT_SOURCE_TYPE_APPX_PACKAGE = DWRITE_FONT_SOURCE_TYPE.APPX_PACKAGE;
pub const DWRITE_FONT_SOURCE_TYPE_REMOTE_FONT_PROVIDER = DWRITE_FONT_SOURCE_TYPE.REMOTE_FONT_PROVIDER;

const IID_IDWriteFontSet3_Value = Guid.initString("7c073ef2-a7f4-4045-8c32-8ab8ae640f90");
pub const IID_IDWriteFontSet3 = &IID_IDWriteFontSet3_Value;
pub const IDWriteFontSet3 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontSet2.VTable,
        GetFontSourceType: *const fn (
            self: *const IDWriteFontSet3,
            font_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) DWRITE_FONT_SOURCE_TYPE,
        GetFontSourceNameLength: *const fn (
            self: *const IDWriteFontSet3,
            list_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetFontSourceName: *const fn (
            self: *const IDWriteFontSet3,
            list_index: u32,
            string_buffer: [*:0]u16,
            string_buffer_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontSet2.MethodMixin(T);
            pub inline fn getFontSourceType(self: *const T, font_index_: u32) DWRITE_FONT_SOURCE_TYPE {
                return @as(*const IDWriteFontSet3.VTable, @ptrCast(self.vtable)).GetFontSourceType(@as(*const IDWriteFontSet3, @ptrCast(self)), font_index_);
            }
            pub inline fn getFontSourceNameLength(self: *const T, list_index_: u32) u32 {
                return @as(*const IDWriteFontSet3.VTable, @ptrCast(self.vtable)).GetFontSourceNameLength(@as(*const IDWriteFontSet3, @ptrCast(self)), list_index_);
            }
            pub inline fn getFontSourceName(self: *const T, list_index_: u32, string_buffer_: [*:0]u16, string_buffer_size_: u32) HRESULT {
                return @as(*const IDWriteFontSet3.VTable, @ptrCast(self.vtable)).GetFontSourceName(@as(*const IDWriteFontSet3, @ptrCast(self)), list_index_, string_buffer_, string_buffer_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDWriteFontFace6_Value = Guid.initString("c4b1fe1b-6e84-47d5-b54c-a597981b06ad");
pub const IID_IDWriteFontFace6 = &IID_IDWriteFontFace6_Value;
pub const IDWriteFontFace6 = extern struct {
    pub const VTable = extern struct {
        base: IDWriteFontFace5.VTable,
        GetFamilyNames: *const fn (
            self: *const IDWriteFontFace6,
            font_family_model: DWRITE_FONT_FAMILY_MODEL,
            names: ?*?*IDWriteLocalizedStrings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFaceNames: *const fn (
            self: *const IDWriteFontFace6,
            font_family_model: DWRITE_FONT_FAMILY_MODEL,
            names: ?*?*IDWriteLocalizedStrings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDWriteFontFace5.MethodMixin(T);
            pub inline fn getFamilyNames(self: *const T, font_family_model_: DWRITE_FONT_FAMILY_MODEL, names_: ?*?*IDWriteLocalizedStrings) HRESULT {
                return @as(*const IDWriteFontFace6.VTable, @ptrCast(self.vtable)).GetFamilyNames(@as(*const IDWriteFontFace6, @ptrCast(self)), font_family_model_, names_);
            }
            pub inline fn getFaceNames(self: *const T, font_family_model_: DWRITE_FONT_FAMILY_MODEL, names_: ?*?*IDWriteLocalizedStrings) HRESULT {
                return @as(*const IDWriteFontFace6.VTable, @ptrCast(self.vtable)).GetFaceNames(@as(*const IDWriteFontFace6, @ptrCast(self)), font_family_model_, names_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (1)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.1'
pub extern "dwrite" fn DWriteCreateFactory(
    factory_type: DWRITE_FACTORY_TYPE,
    iid: ?*const Guid,
    factory: ?*?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (18)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const D2D_POINT_2F = @import("../graphics/direct2d/common.zig").D2D_POINT_2F;
const D2D_SIZE_U = @import("../graphics/direct2d/common.zig").D2D_SIZE_U;
const FILETIME = @import("../foundation.zig").FILETIME;
const FONTSIGNATURE = @import("../globalization.zig").FONTSIGNATURE;
const HANDLE = @import("../foundation.zig").HANDLE;
const HDC = @import("../graphics/gdi.zig").HDC;
const HMONITOR = @import("../graphics/gdi.zig").HMONITOR;
const HRESULT = @import("../foundation.zig").HRESULT;
const ID2D1SimplifiedGeometrySink = @import("../graphics/direct2d/common.zig").ID2D1SimplifiedGeometrySink;
const IUnknown = @import("../system/com.zig").IUnknown;
const LOGFONTA = @import("../graphics/gdi.zig").LOGFONTA;
const LOGFONTW = @import("../graphics/gdi.zig").LOGFONTW;
const POINT = @import("../foundation.zig").POINT;
const PWSTR = @import("../foundation.zig").PWSTR;
const RECT = @import("../foundation.zig").RECT;
const SIZE = @import("../foundation.zig").SIZE;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
