//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (4)
//--------------------------------------------------------------------------------
pub const COMPOSITIONOBJECT_READ = @as(i32, 1);
pub const COMPOSITIONOBJECT_WRITE = @as(i32, 2);
pub const DCOMPOSITION_MAX_WAITFORCOMPOSITORCLOCK_OBJECTS = @as(u32, 32);
pub const COMPOSITION_STATS_MAX_TARGETS = @as(u32, 256);

//--------------------------------------------------------------------------------
// Section: Types (58)
//--------------------------------------------------------------------------------
pub const DCOMPOSITION_BITMAP_INTERPOLATION_MODE = enum(i32) {
    NEAREST_NEIGHBOR = 0,
    LINEAR = 1,
    INHERIT = -1,
};
pub const DCOMPOSITION_BITMAP_INTERPOLATION_MODE_NEAREST_NEIGHBOR = DCOMPOSITION_BITMAP_INTERPOLATION_MODE.NEAREST_NEIGHBOR;
pub const DCOMPOSITION_BITMAP_INTERPOLATION_MODE_LINEAR = DCOMPOSITION_BITMAP_INTERPOLATION_MODE.LINEAR;
pub const DCOMPOSITION_BITMAP_INTERPOLATION_MODE_INHERIT = DCOMPOSITION_BITMAP_INTERPOLATION_MODE.INHERIT;

pub const DCOMPOSITION_BORDER_MODE = enum(i32) {
    SOFT = 0,
    HARD = 1,
    INHERIT = -1,
};
pub const DCOMPOSITION_BORDER_MODE_SOFT = DCOMPOSITION_BORDER_MODE.SOFT;
pub const DCOMPOSITION_BORDER_MODE_HARD = DCOMPOSITION_BORDER_MODE.HARD;
pub const DCOMPOSITION_BORDER_MODE_INHERIT = DCOMPOSITION_BORDER_MODE.INHERIT;

pub const DCOMPOSITION_COMPOSITE_MODE = enum(i32) {
    SOURCE_OVER = 0,
    DESTINATION_INVERT = 1,
    MIN_BLEND = 2,
    INHERIT = -1,
};
pub const DCOMPOSITION_COMPOSITE_MODE_SOURCE_OVER = DCOMPOSITION_COMPOSITE_MODE.SOURCE_OVER;
pub const DCOMPOSITION_COMPOSITE_MODE_DESTINATION_INVERT = DCOMPOSITION_COMPOSITE_MODE.DESTINATION_INVERT;
pub const DCOMPOSITION_COMPOSITE_MODE_MIN_BLEND = DCOMPOSITION_COMPOSITE_MODE.MIN_BLEND;
pub const DCOMPOSITION_COMPOSITE_MODE_INHERIT = DCOMPOSITION_COMPOSITE_MODE.INHERIT;

pub const DCOMPOSITION_BACKFACE_VISIBILITY = enum(i32) {
    VISIBLE = 0,
    HIDDEN = 1,
    INHERIT = -1,
};
pub const DCOMPOSITION_BACKFACE_VISIBILITY_VISIBLE = DCOMPOSITION_BACKFACE_VISIBILITY.VISIBLE;
pub const DCOMPOSITION_BACKFACE_VISIBILITY_HIDDEN = DCOMPOSITION_BACKFACE_VISIBILITY.HIDDEN;
pub const DCOMPOSITION_BACKFACE_VISIBILITY_INHERIT = DCOMPOSITION_BACKFACE_VISIBILITY.INHERIT;

pub const DCOMPOSITION_OPACITY_MODE = enum(i32) {
    LAYER = 0,
    MULTIPLY = 1,
    INHERIT = -1,
};
pub const DCOMPOSITION_OPACITY_MODE_LAYER = DCOMPOSITION_OPACITY_MODE.LAYER;
pub const DCOMPOSITION_OPACITY_MODE_MULTIPLY = DCOMPOSITION_OPACITY_MODE.MULTIPLY;
pub const DCOMPOSITION_OPACITY_MODE_INHERIT = DCOMPOSITION_OPACITY_MODE.INHERIT;

pub const DCOMPOSITION_DEPTH_MODE = enum(i32) {
    TREE = 0,
    SPATIAL = 1,
    SORTED = 3,
    INHERIT = -1,
};
pub const DCOMPOSITION_DEPTH_MODE_TREE = DCOMPOSITION_DEPTH_MODE.TREE;
pub const DCOMPOSITION_DEPTH_MODE_SPATIAL = DCOMPOSITION_DEPTH_MODE.SPATIAL;
pub const DCOMPOSITION_DEPTH_MODE_SORTED = DCOMPOSITION_DEPTH_MODE.SORTED;
pub const DCOMPOSITION_DEPTH_MODE_INHERIT = DCOMPOSITION_DEPTH_MODE.INHERIT;

pub const DCOMPOSITION_FRAME_STATISTICS = extern struct {
    lastFrameTime: LARGE_INTEGER,
    currentCompositionRate: DXGI_RATIONAL,
    currentTime: LARGE_INTEGER,
    timeFrequency: LARGE_INTEGER,
    nextEstimatedFrameTime: LARGE_INTEGER,
};

pub const COMPOSITION_FRAME_ID_TYPE = enum(i32) {
    REATED = 0,
    ONFIRMED = 1,
    OMPLETED = 2,
};
pub const COMPOSITION_FRAME_ID_CREATED = COMPOSITION_FRAME_ID_TYPE.REATED;
pub const COMPOSITION_FRAME_ID_CONFIRMED = COMPOSITION_FRAME_ID_TYPE.ONFIRMED;
pub const COMPOSITION_FRAME_ID_COMPLETED = COMPOSITION_FRAME_ID_TYPE.OMPLETED;

pub const COMPOSITION_FRAME_STATS = extern struct {
    startTime: u64,
    targetTime: u64,
    framePeriod: u64,
};

pub const COMPOSITION_TARGET_ID = extern struct {
    displayAdapterLuid: LUID,
    renderAdapterLuid: LUID,
    vidPnSourceId: u32,
    vidPnTargetId: u32,
    uniqueId: u32,
};

pub const COMPOSITION_STATS = extern struct {
    presentCount: u32,
    refreshCount: u32,
    virtualRefreshCount: u32,
    time: u64,
};

pub const COMPOSITION_TARGET_STATS = extern struct {
    outstandingPresents: u32,
    presentTime: u64,
    vblankDuration: u64,
    presentedStats: COMPOSITION_STATS,
    completedStats: COMPOSITION_STATS,
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionAnimation_Value = Guid.initString("cbfd91d9-51b2-45e4-b3de-d19ccfb863c5");
pub const IID_IDCompositionAnimation = &IID_IDCompositionAnimation_Value;
pub const IDCompositionAnimation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Reset: *const fn (
            self: *const IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAbsoluteBeginTime: *const fn (
            self: *const IDCompositionAnimation,
            begin_time: LARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCubic: *const fn (
            self: *const IDCompositionAnimation,
            begin_offset: f64,
            constant_coefficient: f32,
            linear_coefficient: f32,
            quadratic_coefficient: f32,
            cubic_coefficient: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddSinusoidal: *const fn (
            self: *const IDCompositionAnimation,
            begin_offset: f64,
            bias: f32,
            amplitude: f32,
            frequency: f32,
            phase: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRepeat: *const fn (
            self: *const IDCompositionAnimation,
            begin_offset: f64,
            duration_to_repeat: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        End: *const fn (
            self: *const IDCompositionAnimation,
            end_offset: f64,
            end_value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IDCompositionAnimation.VTable, @ptrCast(self.vtable)).Reset(@as(*const IDCompositionAnimation, @ptrCast(self)));
            }
            pub inline fn setAbsoluteBeginTime(self: *const T, begin_time_: LARGE_INTEGER) HRESULT {
                return @as(*const IDCompositionAnimation.VTable, @ptrCast(self.vtable)).SetAbsoluteBeginTime(@as(*const IDCompositionAnimation, @ptrCast(self)), begin_time_);
            }
            pub inline fn addCubic(self: *const T, begin_offset_: f64, constant_coefficient_: f32, linear_coefficient_: f32, quadratic_coefficient_: f32, cubic_coefficient_: f32) HRESULT {
                return @as(*const IDCompositionAnimation.VTable, @ptrCast(self.vtable)).AddCubic(@as(*const IDCompositionAnimation, @ptrCast(self)), begin_offset_, constant_coefficient_, linear_coefficient_, quadratic_coefficient_, cubic_coefficient_);
            }
            pub inline fn addSinusoidal(self: *const T, begin_offset_: f64, bias_: f32, amplitude_: f32, frequency_: f32, phase_: f32) HRESULT {
                return @as(*const IDCompositionAnimation.VTable, @ptrCast(self.vtable)).AddSinusoidal(@as(*const IDCompositionAnimation, @ptrCast(self)), begin_offset_, bias_, amplitude_, frequency_, phase_);
            }
            pub inline fn addRepeat(self: *const T, begin_offset_: f64, duration_to_repeat_: f64) HRESULT {
                return @as(*const IDCompositionAnimation.VTable, @ptrCast(self.vtable)).AddRepeat(@as(*const IDCompositionAnimation, @ptrCast(self)), begin_offset_, duration_to_repeat_);
            }
            pub inline fn end(self: *const T, end_offset_: f64, end_value_: f32) HRESULT {
                return @as(*const IDCompositionAnimation.VTable, @ptrCast(self.vtable)).End(@as(*const IDCompositionAnimation, @ptrCast(self)), end_offset_, end_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionDevice_Value = Guid.initString("c37ea93a-e7aa-450d-b16f-9746cb0407f3");
pub const IID_IDCompositionDevice = &IID_IDCompositionDevice_Value;
pub const IDCompositionDevice = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Commit: *const fn (
            self: *const IDCompositionDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WaitForCommitCompletion: *const fn (
            self: *const IDCompositionDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFrameStatistics: *const fn (
            self: *const IDCompositionDevice,
            statistics: ?*DCOMPOSITION_FRAME_STATISTICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTargetForHwnd: *const fn (
            self: *const IDCompositionDevice,
            hwnd: ?HWND,
            topmost: BOOL,
            target: ?*?*IDCompositionTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVisual: *const fn (
            self: *const IDCompositionDevice,
            visual: ?*?*IDCompositionVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSurface: *const fn (
            self: *const IDCompositionDevice,
            width: u32,
            height: u32,
            pixel_format: DXGI_FORMAT,
            alpha_mode: DXGI_ALPHA_MODE,
            surface: ?*?*IDCompositionSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVirtualSurface: *const fn (
            self: *const IDCompositionDevice,
            initial_width: u32,
            initial_height: u32,
            pixel_format: DXGI_FORMAT,
            alpha_mode: DXGI_ALPHA_MODE,
            virtual_surface: ?*?*IDCompositionVirtualSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSurfaceFromHandle: *const fn (
            self: *const IDCompositionDevice,
            handle: ?HANDLE,
            surface: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSurfaceFromHwnd: *const fn (
            self: *const IDCompositionDevice,
            hwnd: ?HWND,
            surface: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTranslateTransform: *const fn (
            self: *const IDCompositionDevice,
            translate_transform: ?*?*IDCompositionTranslateTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateScaleTransform: *const fn (
            self: *const IDCompositionDevice,
            scale_transform: ?*?*IDCompositionScaleTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRotateTransform: *const fn (
            self: *const IDCompositionDevice,
            rotate_transform: ?*?*IDCompositionRotateTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSkewTransform: *const fn (
            self: *const IDCompositionDevice,
            skew_transform: ?*?*IDCompositionSkewTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMatrixTransform: *const fn (
            self: *const IDCompositionDevice,
            matrix_transform: ?*?*IDCompositionMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTransformGroup: *const fn (
            self: *const IDCompositionDevice,
            transforms: [*]?*IDCompositionTransform,
            elements: u32,
            transform_group: ?*?*IDCompositionTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTranslateTransform3D: *const fn (
            self: *const IDCompositionDevice,
            translate_transform3_d: ?*?*IDCompositionTranslateTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateScaleTransform3D: *const fn (
            self: *const IDCompositionDevice,
            scale_transform3_d: ?*?*IDCompositionScaleTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRotateTransform3D: *const fn (
            self: *const IDCompositionDevice,
            rotate_transform3_d: ?*?*IDCompositionRotateTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMatrixTransform3D: *const fn (
            self: *const IDCompositionDevice,
            matrix_transform3_d: ?*?*IDCompositionMatrixTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTransform3DGroup: *const fn (
            self: *const IDCompositionDevice,
            transforms3_d: [*]?*IDCompositionTransform3D,
            elements: u32,
            transform3_d_group: ?*?*IDCompositionTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEffectGroup: *const fn (
            self: *const IDCompositionDevice,
            effect_group: ?*?*IDCompositionEffectGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRectangleClip: *const fn (
            self: *const IDCompositionDevice,
            clip: ?*?*IDCompositionRectangleClip,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAnimation: *const fn (
            self: *const IDCompositionDevice,
            animation: ?*?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckDeviceState: *const fn (
            self: *const IDCompositionDevice,
            pf_valid: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn commit(self: *const T) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).Commit(@as(*const IDCompositionDevice, @ptrCast(self)));
            }
            pub inline fn waitForCommitCompletion(self: *const T) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).WaitForCommitCompletion(@as(*const IDCompositionDevice, @ptrCast(self)));
            }
            pub inline fn getFrameStatistics(self: *const T, statistics_: ?*DCOMPOSITION_FRAME_STATISTICS) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).GetFrameStatistics(@as(*const IDCompositionDevice, @ptrCast(self)), statistics_);
            }
            pub inline fn createTargetForHwnd(self: *const T, hwnd_: ?HWND, topmost_: BOOL, target_: ?*?*IDCompositionTarget) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CreateTargetForHwnd(@as(*const IDCompositionDevice, @ptrCast(self)), hwnd_, topmost_, target_);
            }
            pub inline fn createVisual(self: *const T, visual_: ?*?*IDCompositionVisual) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CreateVisual(@as(*const IDCompositionDevice, @ptrCast(self)), visual_);
            }
            pub inline fn createSurface(self: *const T, width_: u32, height_: u32, pixel_format_: DXGI_FORMAT, alpha_mode_: DXGI_ALPHA_MODE, surface_: ?*?*IDCompositionSurface) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CreateSurface(@as(*const IDCompositionDevice, @ptrCast(self)), width_, height_, pixel_format_, alpha_mode_, surface_);
            }
            pub inline fn createVirtualSurface(self: *const T, initial_width_: u32, initial_height_: u32, pixel_format_: DXGI_FORMAT, alpha_mode_: DXGI_ALPHA_MODE, virtual_surface_: ?*?*IDCompositionVirtualSurface) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CreateVirtualSurface(@as(*const IDCompositionDevice, @ptrCast(self)), initial_width_, initial_height_, pixel_format_, alpha_mode_, virtual_surface_);
            }
            pub inline fn createSurfaceFromHandle(self: *const T, handle_: ?HANDLE, surface_: ?*?*IUnknown) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CreateSurfaceFromHandle(@as(*const IDCompositionDevice, @ptrCast(self)), handle_, surface_);
            }
            pub inline fn createSurfaceFromHwnd(self: *const T, hwnd_: ?HWND, surface_: ?*?*IUnknown) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CreateSurfaceFromHwnd(@as(*const IDCompositionDevice, @ptrCast(self)), hwnd_, surface_);
            }
            pub inline fn createTranslateTransform(self: *const T, translate_transform_: ?*?*IDCompositionTranslateTransform) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CreateTranslateTransform(@as(*const IDCompositionDevice, @ptrCast(self)), translate_transform_);
            }
            pub inline fn createScaleTransform(self: *const T, scale_transform_: ?*?*IDCompositionScaleTransform) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CreateScaleTransform(@as(*const IDCompositionDevice, @ptrCast(self)), scale_transform_);
            }
            pub inline fn createRotateTransform(self: *const T, rotate_transform_: ?*?*IDCompositionRotateTransform) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CreateRotateTransform(@as(*const IDCompositionDevice, @ptrCast(self)), rotate_transform_);
            }
            pub inline fn createSkewTransform(self: *const T, skew_transform_: ?*?*IDCompositionSkewTransform) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CreateSkewTransform(@as(*const IDCompositionDevice, @ptrCast(self)), skew_transform_);
            }
            pub inline fn createMatrixTransform(self: *const T, matrix_transform_: ?*?*IDCompositionMatrixTransform) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CreateMatrixTransform(@as(*const IDCompositionDevice, @ptrCast(self)), matrix_transform_);
            }
            pub inline fn createTransformGroup(self: *const T, transforms_: [*]?*IDCompositionTransform, elements_: u32, transform_group_: ?*?*IDCompositionTransform) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CreateTransformGroup(@as(*const IDCompositionDevice, @ptrCast(self)), transforms_, elements_, transform_group_);
            }
            pub inline fn createTranslateTransform3D(self: *const T, translate_transform3_d_: ?*?*IDCompositionTranslateTransform3D) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CreateTranslateTransform3D(@as(*const IDCompositionDevice, @ptrCast(self)), translate_transform3_d_);
            }
            pub inline fn createScaleTransform3D(self: *const T, scale_transform3_d_: ?*?*IDCompositionScaleTransform3D) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CreateScaleTransform3D(@as(*const IDCompositionDevice, @ptrCast(self)), scale_transform3_d_);
            }
            pub inline fn createRotateTransform3D(self: *const T, rotate_transform3_d_: ?*?*IDCompositionRotateTransform3D) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CreateRotateTransform3D(@as(*const IDCompositionDevice, @ptrCast(self)), rotate_transform3_d_);
            }
            pub inline fn createMatrixTransform3D(self: *const T, matrix_transform3_d_: ?*?*IDCompositionMatrixTransform3D) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CreateMatrixTransform3D(@as(*const IDCompositionDevice, @ptrCast(self)), matrix_transform3_d_);
            }
            pub inline fn createTransform3DGroup(self: *const T, transforms3_d_: [*]?*IDCompositionTransform3D, elements_: u32, transform3_d_group_: ?*?*IDCompositionTransform3D) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CreateTransform3DGroup(@as(*const IDCompositionDevice, @ptrCast(self)), transforms3_d_, elements_, transform3_d_group_);
            }
            pub inline fn createEffectGroup(self: *const T, effect_group_: ?*?*IDCompositionEffectGroup) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CreateEffectGroup(@as(*const IDCompositionDevice, @ptrCast(self)), effect_group_);
            }
            pub inline fn createRectangleClip(self: *const T, clip_: ?*?*IDCompositionRectangleClip) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CreateRectangleClip(@as(*const IDCompositionDevice, @ptrCast(self)), clip_);
            }
            pub inline fn createAnimation(self: *const T, animation_: ?*?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CreateAnimation(@as(*const IDCompositionDevice, @ptrCast(self)), animation_);
            }
            pub inline fn checkDeviceState(self: *const T, pf_valid_: ?*BOOL) HRESULT {
                return @as(*const IDCompositionDevice.VTable, @ptrCast(self.vtable)).CheckDeviceState(@as(*const IDCompositionDevice, @ptrCast(self)), pf_valid_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionTarget_Value = Guid.initString("eacdd04c-117e-4e17-88f4-d1b12b0e3d89");
pub const IID_IDCompositionTarget = &IID_IDCompositionTarget_Value;
pub const IDCompositionTarget = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetRoot: *const fn (
            self: *const IDCompositionTarget,
            visual: ?*IDCompositionVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setRoot(self: *const T, visual_: ?*IDCompositionVisual) HRESULT {
                return @as(*const IDCompositionTarget.VTable, @ptrCast(self.vtable)).SetRoot(@as(*const IDCompositionTarget, @ptrCast(self)), visual_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionVisual_Value = Guid.initString("4d93059d-097b-4651-9a60-f0f25116e2f3");
pub const IID_IDCompositionVisual = &IID_IDCompositionVisual_Value;
pub const IDCompositionVisual = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetOffsetX: *const fn (
            self: *const IDCompositionVisual,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetX1: *const fn (
            self: *const IDCompositionVisual,
            offset_x: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetY: *const fn (
            self: *const IDCompositionVisual,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetY1: *const fn (
            self: *const IDCompositionVisual,
            offset_y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransform: *const fn (
            self: *const IDCompositionVisual,
            transform: ?*IDCompositionTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransform1: *const fn (
            self: *const IDCompositionVisual,
            matrix: ?*const D2D_MATRIX_3X2_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformParent: *const fn (
            self: *const IDCompositionVisual,
            visual: ?*IDCompositionVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEffect: *const fn (
            self: *const IDCompositionVisual,
            effect: ?*IDCompositionEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBitmapInterpolationMode: *const fn (
            self: *const IDCompositionVisual,
            interpolation_mode: DCOMPOSITION_BITMAP_INTERPOLATION_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBorderMode: *const fn (
            self: *const IDCompositionVisual,
            border_mode: DCOMPOSITION_BORDER_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClip: *const fn (
            self: *const IDCompositionVisual,
            clip: ?*IDCompositionClip,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClip1: *const fn (
            self: *const IDCompositionVisual,
            rect: ?*const D2D_RECT_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetContent: *const fn (
            self: *const IDCompositionVisual,
            content: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddVisual: *const fn (
            self: *const IDCompositionVisual,
            visual: ?*IDCompositionVisual,
            insert_above: BOOL,
            reference_visual: ?*IDCompositionVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveVisual: *const fn (
            self: *const IDCompositionVisual,
            visual: ?*IDCompositionVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllVisuals: *const fn (
            self: *const IDCompositionVisual,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompositeMode: *const fn (
            self: *const IDCompositionVisual,
            composite_mode: DCOMPOSITION_COMPOSITE_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setOffsetX(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionVisual.VTable, @ptrCast(self.vtable)).SetOffsetX(@as(*const IDCompositionVisual, @ptrCast(self)), animation_);
            }
            pub inline fn setOffsetX1(self: *const T, offset_x_: f32) HRESULT {
                return @as(*const IDCompositionVisual.VTable, @ptrCast(self.vtable)).SetOffsetX(@as(*const IDCompositionVisual, @ptrCast(self)), offset_x_);
            }
            pub inline fn setOffsetY(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionVisual.VTable, @ptrCast(self.vtable)).SetOffsetY(@as(*const IDCompositionVisual, @ptrCast(self)), animation_);
            }
            pub inline fn setOffsetY1(self: *const T, offset_y_: f32) HRESULT {
                return @as(*const IDCompositionVisual.VTable, @ptrCast(self.vtable)).SetOffsetY(@as(*const IDCompositionVisual, @ptrCast(self)), offset_y_);
            }
            pub inline fn setTransform(self: *const T, transform_: ?*IDCompositionTransform) HRESULT {
                return @as(*const IDCompositionVisual.VTable, @ptrCast(self.vtable)).SetTransform(@as(*const IDCompositionVisual, @ptrCast(self)), transform_);
            }
            pub inline fn setTransform1(self: *const T, matrix_: ?*const D2D_MATRIX_3X2_F) HRESULT {
                return @as(*const IDCompositionVisual.VTable, @ptrCast(self.vtable)).SetTransform(@as(*const IDCompositionVisual, @ptrCast(self)), matrix_);
            }
            pub inline fn setTransformParent(self: *const T, visual_: ?*IDCompositionVisual) HRESULT {
                return @as(*const IDCompositionVisual.VTable, @ptrCast(self.vtable)).SetTransformParent(@as(*const IDCompositionVisual, @ptrCast(self)), visual_);
            }
            pub inline fn setEffect(self: *const T, effect_: ?*IDCompositionEffect) HRESULT {
                return @as(*const IDCompositionVisual.VTable, @ptrCast(self.vtable)).SetEffect(@as(*const IDCompositionVisual, @ptrCast(self)), effect_);
            }
            pub inline fn setBitmapInterpolationMode(self: *const T, interpolation_mode_: DCOMPOSITION_BITMAP_INTERPOLATION_MODE) HRESULT {
                return @as(*const IDCompositionVisual.VTable, @ptrCast(self.vtable)).SetBitmapInterpolationMode(@as(*const IDCompositionVisual, @ptrCast(self)), interpolation_mode_);
            }
            pub inline fn setBorderMode(self: *const T, border_mode_: DCOMPOSITION_BORDER_MODE) HRESULT {
                return @as(*const IDCompositionVisual.VTable, @ptrCast(self.vtable)).SetBorderMode(@as(*const IDCompositionVisual, @ptrCast(self)), border_mode_);
            }
            pub inline fn setClip(self: *const T, clip_: ?*IDCompositionClip) HRESULT {
                return @as(*const IDCompositionVisual.VTable, @ptrCast(self.vtable)).SetClip(@as(*const IDCompositionVisual, @ptrCast(self)), clip_);
            }
            pub inline fn setClip1(self: *const T, rect_: ?*const D2D_RECT_F) HRESULT {
                return @as(*const IDCompositionVisual.VTable, @ptrCast(self.vtable)).SetClip(@as(*const IDCompositionVisual, @ptrCast(self)), rect_);
            }
            pub inline fn setContent(self: *const T, content_: ?*IUnknown) HRESULT {
                return @as(*const IDCompositionVisual.VTable, @ptrCast(self.vtable)).SetContent(@as(*const IDCompositionVisual, @ptrCast(self)), content_);
            }
            pub inline fn addVisual(self: *const T, visual_: ?*IDCompositionVisual, insert_above_: BOOL, reference_visual_: ?*IDCompositionVisual) HRESULT {
                return @as(*const IDCompositionVisual.VTable, @ptrCast(self.vtable)).AddVisual(@as(*const IDCompositionVisual, @ptrCast(self)), visual_, insert_above_, reference_visual_);
            }
            pub inline fn removeVisual(self: *const T, visual_: ?*IDCompositionVisual) HRESULT {
                return @as(*const IDCompositionVisual.VTable, @ptrCast(self.vtable)).RemoveVisual(@as(*const IDCompositionVisual, @ptrCast(self)), visual_);
            }
            pub inline fn removeAllVisuals(self: *const T) HRESULT {
                return @as(*const IDCompositionVisual.VTable, @ptrCast(self.vtable)).RemoveAllVisuals(@as(*const IDCompositionVisual, @ptrCast(self)));
            }
            pub inline fn setCompositeMode(self: *const T, composite_mode_: DCOMPOSITION_COMPOSITE_MODE) HRESULT {
                return @as(*const IDCompositionVisual.VTable, @ptrCast(self.vtable)).SetCompositeMode(@as(*const IDCompositionVisual, @ptrCast(self)), composite_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionEffect_Value = Guid.initString("ec81b08f-bfcb-4e8d-b193-a915587999e8");
pub const IID_IDCompositionEffect = &IID_IDCompositionEffect_Value;
pub const IDCompositionEffect = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionTransform3D_Value = Guid.initString("71185722-246b-41f2-aad1-0443f7f4bfc2");
pub const IID_IDCompositionTransform3D = &IID_IDCompositionTransform3D_Value;
pub const IDCompositionTransform3D = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionEffect.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionEffect.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionTransform_Value = Guid.initString("fd55faa7-37e0-4c20-95d2-9be45bc33f55");
pub const IID_IDCompositionTransform = &IID_IDCompositionTransform_Value;
pub const IDCompositionTransform = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionTransform3D.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionTransform3D.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionTranslateTransform_Value = Guid.initString("06791122-c6f0-417d-8323-269e987f5954");
pub const IID_IDCompositionTranslateTransform = &IID_IDCompositionTranslateTransform_Value;
pub const IDCompositionTranslateTransform = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionTransform.VTable,
        SetOffsetX: *const fn (
            self: *const IDCompositionTranslateTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetX1: *const fn (
            self: *const IDCompositionTranslateTransform,
            offset_x: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetY: *const fn (
            self: *const IDCompositionTranslateTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetY1: *const fn (
            self: *const IDCompositionTranslateTransform,
            offset_y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionTransform.MethodMixin(T);
            pub inline fn setOffsetX(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionTranslateTransform.VTable, @ptrCast(self.vtable)).SetOffsetX(@as(*const IDCompositionTranslateTransform, @ptrCast(self)), animation_);
            }
            pub inline fn setOffsetX1(self: *const T, offset_x_: f32) HRESULT {
                return @as(*const IDCompositionTranslateTransform.VTable, @ptrCast(self.vtable)).SetOffsetX(@as(*const IDCompositionTranslateTransform, @ptrCast(self)), offset_x_);
            }
            pub inline fn setOffsetY(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionTranslateTransform.VTable, @ptrCast(self.vtable)).SetOffsetY(@as(*const IDCompositionTranslateTransform, @ptrCast(self)), animation_);
            }
            pub inline fn setOffsetY1(self: *const T, offset_y_: f32) HRESULT {
                return @as(*const IDCompositionTranslateTransform.VTable, @ptrCast(self.vtable)).SetOffsetY(@as(*const IDCompositionTranslateTransform, @ptrCast(self)), offset_y_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionScaleTransform_Value = Guid.initString("71fde914-40ef-45ef-bd51-68b037c339f9");
pub const IID_IDCompositionScaleTransform = &IID_IDCompositionScaleTransform_Value;
pub const IDCompositionScaleTransform = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionTransform.VTable,
        SetScaleX: *const fn (
            self: *const IDCompositionScaleTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScaleX1: *const fn (
            self: *const IDCompositionScaleTransform,
            scale_x: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScaleY: *const fn (
            self: *const IDCompositionScaleTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScaleY1: *const fn (
            self: *const IDCompositionScaleTransform,
            scale_y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterX: *const fn (
            self: *const IDCompositionScaleTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterX1: *const fn (
            self: *const IDCompositionScaleTransform,
            center_x: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterY: *const fn (
            self: *const IDCompositionScaleTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterY1: *const fn (
            self: *const IDCompositionScaleTransform,
            center_y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionTransform.MethodMixin(T);
            pub inline fn setScaleX(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionScaleTransform.VTable, @ptrCast(self.vtable)).SetScaleX(@as(*const IDCompositionScaleTransform, @ptrCast(self)), animation_);
            }
            pub inline fn setScaleX1(self: *const T, scale_x_: f32) HRESULT {
                return @as(*const IDCompositionScaleTransform.VTable, @ptrCast(self.vtable)).SetScaleX(@as(*const IDCompositionScaleTransform, @ptrCast(self)), scale_x_);
            }
            pub inline fn setScaleY(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionScaleTransform.VTable, @ptrCast(self.vtable)).SetScaleY(@as(*const IDCompositionScaleTransform, @ptrCast(self)), animation_);
            }
            pub inline fn setScaleY1(self: *const T, scale_y_: f32) HRESULT {
                return @as(*const IDCompositionScaleTransform.VTable, @ptrCast(self.vtable)).SetScaleY(@as(*const IDCompositionScaleTransform, @ptrCast(self)), scale_y_);
            }
            pub inline fn setCenterX(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionScaleTransform.VTable, @ptrCast(self.vtable)).SetCenterX(@as(*const IDCompositionScaleTransform, @ptrCast(self)), animation_);
            }
            pub inline fn setCenterX1(self: *const T, center_x_: f32) HRESULT {
                return @as(*const IDCompositionScaleTransform.VTable, @ptrCast(self.vtable)).SetCenterX(@as(*const IDCompositionScaleTransform, @ptrCast(self)), center_x_);
            }
            pub inline fn setCenterY(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionScaleTransform.VTable, @ptrCast(self.vtable)).SetCenterY(@as(*const IDCompositionScaleTransform, @ptrCast(self)), animation_);
            }
            pub inline fn setCenterY1(self: *const T, center_y_: f32) HRESULT {
                return @as(*const IDCompositionScaleTransform.VTable, @ptrCast(self.vtable)).SetCenterY(@as(*const IDCompositionScaleTransform, @ptrCast(self)), center_y_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionRotateTransform_Value = Guid.initString("641ed83c-ae96-46c5-90dc-32774cc5c6d5");
pub const IID_IDCompositionRotateTransform = &IID_IDCompositionRotateTransform_Value;
pub const IDCompositionRotateTransform = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionTransform.VTable,
        SetAngle: *const fn (
            self: *const IDCompositionRotateTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAngle1: *const fn (
            self: *const IDCompositionRotateTransform,
            angle: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterX: *const fn (
            self: *const IDCompositionRotateTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterX1: *const fn (
            self: *const IDCompositionRotateTransform,
            center_x: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterY: *const fn (
            self: *const IDCompositionRotateTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterY1: *const fn (
            self: *const IDCompositionRotateTransform,
            center_y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionTransform.MethodMixin(T);
            pub inline fn setAngle(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRotateTransform.VTable, @ptrCast(self.vtable)).SetAngle(@as(*const IDCompositionRotateTransform, @ptrCast(self)), animation_);
            }
            pub inline fn setAngle1(self: *const T, angle_: f32) HRESULT {
                return @as(*const IDCompositionRotateTransform.VTable, @ptrCast(self.vtable)).SetAngle(@as(*const IDCompositionRotateTransform, @ptrCast(self)), angle_);
            }
            pub inline fn setCenterX(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRotateTransform.VTable, @ptrCast(self.vtable)).SetCenterX(@as(*const IDCompositionRotateTransform, @ptrCast(self)), animation_);
            }
            pub inline fn setCenterX1(self: *const T, center_x_: f32) HRESULT {
                return @as(*const IDCompositionRotateTransform.VTable, @ptrCast(self.vtable)).SetCenterX(@as(*const IDCompositionRotateTransform, @ptrCast(self)), center_x_);
            }
            pub inline fn setCenterY(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRotateTransform.VTable, @ptrCast(self.vtable)).SetCenterY(@as(*const IDCompositionRotateTransform, @ptrCast(self)), animation_);
            }
            pub inline fn setCenterY1(self: *const T, center_y_: f32) HRESULT {
                return @as(*const IDCompositionRotateTransform.VTable, @ptrCast(self.vtable)).SetCenterY(@as(*const IDCompositionRotateTransform, @ptrCast(self)), center_y_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionSkewTransform_Value = Guid.initString("e57aa735-dcdb-4c72-9c61-0591f58889ee");
pub const IID_IDCompositionSkewTransform = &IID_IDCompositionSkewTransform_Value;
pub const IDCompositionSkewTransform = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionTransform.VTable,
        SetAngleX: *const fn (
            self: *const IDCompositionSkewTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAngleX1: *const fn (
            self: *const IDCompositionSkewTransform,
            angle_x: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAngleY: *const fn (
            self: *const IDCompositionSkewTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAngleY1: *const fn (
            self: *const IDCompositionSkewTransform,
            angle_y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterX: *const fn (
            self: *const IDCompositionSkewTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterX1: *const fn (
            self: *const IDCompositionSkewTransform,
            center_x: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterY: *const fn (
            self: *const IDCompositionSkewTransform,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterY1: *const fn (
            self: *const IDCompositionSkewTransform,
            center_y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionTransform.MethodMixin(T);
            pub inline fn setAngleX(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionSkewTransform.VTable, @ptrCast(self.vtable)).SetAngleX(@as(*const IDCompositionSkewTransform, @ptrCast(self)), animation_);
            }
            pub inline fn setAngleX1(self: *const T, angle_x_: f32) HRESULT {
                return @as(*const IDCompositionSkewTransform.VTable, @ptrCast(self.vtable)).SetAngleX(@as(*const IDCompositionSkewTransform, @ptrCast(self)), angle_x_);
            }
            pub inline fn setAngleY(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionSkewTransform.VTable, @ptrCast(self.vtable)).SetAngleY(@as(*const IDCompositionSkewTransform, @ptrCast(self)), animation_);
            }
            pub inline fn setAngleY1(self: *const T, angle_y_: f32) HRESULT {
                return @as(*const IDCompositionSkewTransform.VTable, @ptrCast(self.vtable)).SetAngleY(@as(*const IDCompositionSkewTransform, @ptrCast(self)), angle_y_);
            }
            pub inline fn setCenterX(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionSkewTransform.VTable, @ptrCast(self.vtable)).SetCenterX(@as(*const IDCompositionSkewTransform, @ptrCast(self)), animation_);
            }
            pub inline fn setCenterX1(self: *const T, center_x_: f32) HRESULT {
                return @as(*const IDCompositionSkewTransform.VTable, @ptrCast(self.vtable)).SetCenterX(@as(*const IDCompositionSkewTransform, @ptrCast(self)), center_x_);
            }
            pub inline fn setCenterY(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionSkewTransform.VTable, @ptrCast(self.vtable)).SetCenterY(@as(*const IDCompositionSkewTransform, @ptrCast(self)), animation_);
            }
            pub inline fn setCenterY1(self: *const T, center_y_: f32) HRESULT {
                return @as(*const IDCompositionSkewTransform.VTable, @ptrCast(self.vtable)).SetCenterY(@as(*const IDCompositionSkewTransform, @ptrCast(self)), center_y_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionMatrixTransform_Value = Guid.initString("16cdff07-c503-419c-83f2-0965c7af1fa6");
pub const IID_IDCompositionMatrixTransform = &IID_IDCompositionMatrixTransform_Value;
pub const IDCompositionMatrixTransform = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionTransform.VTable,
        SetMatrix: *const fn (
            self: *const IDCompositionMatrixTransform,
            matrix: ?*const D2D_MATRIX_3X2_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMatrixElement: *const fn (
            self: *const IDCompositionMatrixTransform,
            row: i32,
            column: i32,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMatrixElement1: *const fn (
            self: *const IDCompositionMatrixTransform,
            row: i32,
            column: i32,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionTransform.MethodMixin(T);
            pub inline fn setMatrix(self: *const T, matrix_: ?*const D2D_MATRIX_3X2_F) HRESULT {
                return @as(*const IDCompositionMatrixTransform.VTable, @ptrCast(self.vtable)).SetMatrix(@as(*const IDCompositionMatrixTransform, @ptrCast(self)), matrix_);
            }
            pub inline fn setMatrixElement(self: *const T, row_: i32, column_: i32, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionMatrixTransform.VTable, @ptrCast(self.vtable)).SetMatrixElement(@as(*const IDCompositionMatrixTransform, @ptrCast(self)), row_, column_, animation_);
            }
            pub inline fn setMatrixElement1(self: *const T, row_: i32, column_: i32, value_: f32) HRESULT {
                return @as(*const IDCompositionMatrixTransform.VTable, @ptrCast(self.vtable)).SetMatrixElement(@as(*const IDCompositionMatrixTransform, @ptrCast(self)), row_, column_, value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionEffectGroup_Value = Guid.initString("a7929a74-e6b2-4bd6-8b95-4040119ca34d");
pub const IID_IDCompositionEffectGroup = &IID_IDCompositionEffectGroup_Value;
pub const IDCompositionEffectGroup = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionEffect.VTable,
        SetOpacity: *const fn (
            self: *const IDCompositionEffectGroup,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOpacity1: *const fn (
            self: *const IDCompositionEffectGroup,
            opacity: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransform3D: *const fn (
            self: *const IDCompositionEffectGroup,
            transform3_d: ?*IDCompositionTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionEffect.MethodMixin(T);
            pub inline fn setOpacity(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionEffectGroup.VTable, @ptrCast(self.vtable)).SetOpacity(@as(*const IDCompositionEffectGroup, @ptrCast(self)), animation_);
            }
            pub inline fn setOpacity1(self: *const T, opacity_: f32) HRESULT {
                return @as(*const IDCompositionEffectGroup.VTable, @ptrCast(self.vtable)).SetOpacity(@as(*const IDCompositionEffectGroup, @ptrCast(self)), opacity_);
            }
            pub inline fn setTransform3D(self: *const T, transform3_d_: ?*IDCompositionTransform3D) HRESULT {
                return @as(*const IDCompositionEffectGroup.VTable, @ptrCast(self.vtable)).SetTransform3D(@as(*const IDCompositionEffectGroup, @ptrCast(self)), transform3_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionTranslateTransform3D_Value = Guid.initString("91636d4b-9ba1-4532-aaf7-e3344994d788");
pub const IID_IDCompositionTranslateTransform3D = &IID_IDCompositionTranslateTransform3D_Value;
pub const IDCompositionTranslateTransform3D = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionTransform3D.VTable,
        SetOffsetX: *const fn (
            self: *const IDCompositionTranslateTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetX1: *const fn (
            self: *const IDCompositionTranslateTransform3D,
            offset_x: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetY: *const fn (
            self: *const IDCompositionTranslateTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetY1: *const fn (
            self: *const IDCompositionTranslateTransform3D,
            offset_y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetZ: *const fn (
            self: *const IDCompositionTranslateTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetZ1: *const fn (
            self: *const IDCompositionTranslateTransform3D,
            offset_z: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionTransform3D.MethodMixin(T);
            pub inline fn setOffsetX(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionTranslateTransform3D.VTable, @ptrCast(self.vtable)).SetOffsetX(@as(*const IDCompositionTranslateTransform3D, @ptrCast(self)), animation_);
            }
            pub inline fn setOffsetX1(self: *const T, offset_x_: f32) HRESULT {
                return @as(*const IDCompositionTranslateTransform3D.VTable, @ptrCast(self.vtable)).SetOffsetX(@as(*const IDCompositionTranslateTransform3D, @ptrCast(self)), offset_x_);
            }
            pub inline fn setOffsetY(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionTranslateTransform3D.VTable, @ptrCast(self.vtable)).SetOffsetY(@as(*const IDCompositionTranslateTransform3D, @ptrCast(self)), animation_);
            }
            pub inline fn setOffsetY1(self: *const T, offset_y_: f32) HRESULT {
                return @as(*const IDCompositionTranslateTransform3D.VTable, @ptrCast(self.vtable)).SetOffsetY(@as(*const IDCompositionTranslateTransform3D, @ptrCast(self)), offset_y_);
            }
            pub inline fn setOffsetZ(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionTranslateTransform3D.VTable, @ptrCast(self.vtable)).SetOffsetZ(@as(*const IDCompositionTranslateTransform3D, @ptrCast(self)), animation_);
            }
            pub inline fn setOffsetZ1(self: *const T, offset_z_: f32) HRESULT {
                return @as(*const IDCompositionTranslateTransform3D.VTable, @ptrCast(self.vtable)).SetOffsetZ(@as(*const IDCompositionTranslateTransform3D, @ptrCast(self)), offset_z_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionScaleTransform3D_Value = Guid.initString("2a9e9ead-364b-4b15-a7c4-a1997f78b389");
pub const IID_IDCompositionScaleTransform3D = &IID_IDCompositionScaleTransform3D_Value;
pub const IDCompositionScaleTransform3D = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionTransform3D.VTable,
        SetScaleX: *const fn (
            self: *const IDCompositionScaleTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScaleX1: *const fn (
            self: *const IDCompositionScaleTransform3D,
            scale_x: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScaleY: *const fn (
            self: *const IDCompositionScaleTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScaleY1: *const fn (
            self: *const IDCompositionScaleTransform3D,
            scale_y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScaleZ: *const fn (
            self: *const IDCompositionScaleTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScaleZ1: *const fn (
            self: *const IDCompositionScaleTransform3D,
            scale_z: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterX: *const fn (
            self: *const IDCompositionScaleTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterX1: *const fn (
            self: *const IDCompositionScaleTransform3D,
            center_x: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterY: *const fn (
            self: *const IDCompositionScaleTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterY1: *const fn (
            self: *const IDCompositionScaleTransform3D,
            center_y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterZ: *const fn (
            self: *const IDCompositionScaleTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterZ1: *const fn (
            self: *const IDCompositionScaleTransform3D,
            center_z: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionTransform3D.MethodMixin(T);
            pub inline fn setScaleX(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionScaleTransform3D.VTable, @ptrCast(self.vtable)).SetScaleX(@as(*const IDCompositionScaleTransform3D, @ptrCast(self)), animation_);
            }
            pub inline fn setScaleX1(self: *const T, scale_x_: f32) HRESULT {
                return @as(*const IDCompositionScaleTransform3D.VTable, @ptrCast(self.vtable)).SetScaleX(@as(*const IDCompositionScaleTransform3D, @ptrCast(self)), scale_x_);
            }
            pub inline fn setScaleY(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionScaleTransform3D.VTable, @ptrCast(self.vtable)).SetScaleY(@as(*const IDCompositionScaleTransform3D, @ptrCast(self)), animation_);
            }
            pub inline fn setScaleY1(self: *const T, scale_y_: f32) HRESULT {
                return @as(*const IDCompositionScaleTransform3D.VTable, @ptrCast(self.vtable)).SetScaleY(@as(*const IDCompositionScaleTransform3D, @ptrCast(self)), scale_y_);
            }
            pub inline fn setScaleZ(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionScaleTransform3D.VTable, @ptrCast(self.vtable)).SetScaleZ(@as(*const IDCompositionScaleTransform3D, @ptrCast(self)), animation_);
            }
            pub inline fn setScaleZ1(self: *const T, scale_z_: f32) HRESULT {
                return @as(*const IDCompositionScaleTransform3D.VTable, @ptrCast(self.vtable)).SetScaleZ(@as(*const IDCompositionScaleTransform3D, @ptrCast(self)), scale_z_);
            }
            pub inline fn setCenterX(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionScaleTransform3D.VTable, @ptrCast(self.vtable)).SetCenterX(@as(*const IDCompositionScaleTransform3D, @ptrCast(self)), animation_);
            }
            pub inline fn setCenterX1(self: *const T, center_x_: f32) HRESULT {
                return @as(*const IDCompositionScaleTransform3D.VTable, @ptrCast(self.vtable)).SetCenterX(@as(*const IDCompositionScaleTransform3D, @ptrCast(self)), center_x_);
            }
            pub inline fn setCenterY(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionScaleTransform3D.VTable, @ptrCast(self.vtable)).SetCenterY(@as(*const IDCompositionScaleTransform3D, @ptrCast(self)), animation_);
            }
            pub inline fn setCenterY1(self: *const T, center_y_: f32) HRESULT {
                return @as(*const IDCompositionScaleTransform3D.VTable, @ptrCast(self.vtable)).SetCenterY(@as(*const IDCompositionScaleTransform3D, @ptrCast(self)), center_y_);
            }
            pub inline fn setCenterZ(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionScaleTransform3D.VTable, @ptrCast(self.vtable)).SetCenterZ(@as(*const IDCompositionScaleTransform3D, @ptrCast(self)), animation_);
            }
            pub inline fn setCenterZ1(self: *const T, center_z_: f32) HRESULT {
                return @as(*const IDCompositionScaleTransform3D.VTable, @ptrCast(self.vtable)).SetCenterZ(@as(*const IDCompositionScaleTransform3D, @ptrCast(self)), center_z_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionRotateTransform3D_Value = Guid.initString("d8f5b23f-d429-4a91-b55a-d2f45fd75b18");
pub const IID_IDCompositionRotateTransform3D = &IID_IDCompositionRotateTransform3D_Value;
pub const IDCompositionRotateTransform3D = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionTransform3D.VTable,
        SetAngle: *const fn (
            self: *const IDCompositionRotateTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAngle1: *const fn (
            self: *const IDCompositionRotateTransform3D,
            angle: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAxisX: *const fn (
            self: *const IDCompositionRotateTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAxisX1: *const fn (
            self: *const IDCompositionRotateTransform3D,
            axis_x: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAxisY: *const fn (
            self: *const IDCompositionRotateTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAxisY1: *const fn (
            self: *const IDCompositionRotateTransform3D,
            axis_y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAxisZ: *const fn (
            self: *const IDCompositionRotateTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAxisZ1: *const fn (
            self: *const IDCompositionRotateTransform3D,
            axis_z: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterX: *const fn (
            self: *const IDCompositionRotateTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterX1: *const fn (
            self: *const IDCompositionRotateTransform3D,
            center_x: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterY: *const fn (
            self: *const IDCompositionRotateTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterY1: *const fn (
            self: *const IDCompositionRotateTransform3D,
            center_y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterZ: *const fn (
            self: *const IDCompositionRotateTransform3D,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCenterZ1: *const fn (
            self: *const IDCompositionRotateTransform3D,
            center_z: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionTransform3D.MethodMixin(T);
            pub inline fn setAngle(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRotateTransform3D.VTable, @ptrCast(self.vtable)).SetAngle(@as(*const IDCompositionRotateTransform3D, @ptrCast(self)), animation_);
            }
            pub inline fn setAngle1(self: *const T, angle_: f32) HRESULT {
                return @as(*const IDCompositionRotateTransform3D.VTable, @ptrCast(self.vtable)).SetAngle(@as(*const IDCompositionRotateTransform3D, @ptrCast(self)), angle_);
            }
            pub inline fn setAxisX(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRotateTransform3D.VTable, @ptrCast(self.vtable)).SetAxisX(@as(*const IDCompositionRotateTransform3D, @ptrCast(self)), animation_);
            }
            pub inline fn setAxisX1(self: *const T, axis_x_: f32) HRESULT {
                return @as(*const IDCompositionRotateTransform3D.VTable, @ptrCast(self.vtable)).SetAxisX(@as(*const IDCompositionRotateTransform3D, @ptrCast(self)), axis_x_);
            }
            pub inline fn setAxisY(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRotateTransform3D.VTable, @ptrCast(self.vtable)).SetAxisY(@as(*const IDCompositionRotateTransform3D, @ptrCast(self)), animation_);
            }
            pub inline fn setAxisY1(self: *const T, axis_y_: f32) HRESULT {
                return @as(*const IDCompositionRotateTransform3D.VTable, @ptrCast(self.vtable)).SetAxisY(@as(*const IDCompositionRotateTransform3D, @ptrCast(self)), axis_y_);
            }
            pub inline fn setAxisZ(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRotateTransform3D.VTable, @ptrCast(self.vtable)).SetAxisZ(@as(*const IDCompositionRotateTransform3D, @ptrCast(self)), animation_);
            }
            pub inline fn setAxisZ1(self: *const T, axis_z_: f32) HRESULT {
                return @as(*const IDCompositionRotateTransform3D.VTable, @ptrCast(self.vtable)).SetAxisZ(@as(*const IDCompositionRotateTransform3D, @ptrCast(self)), axis_z_);
            }
            pub inline fn setCenterX(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRotateTransform3D.VTable, @ptrCast(self.vtable)).SetCenterX(@as(*const IDCompositionRotateTransform3D, @ptrCast(self)), animation_);
            }
            pub inline fn setCenterX1(self: *const T, center_x_: f32) HRESULT {
                return @as(*const IDCompositionRotateTransform3D.VTable, @ptrCast(self.vtable)).SetCenterX(@as(*const IDCompositionRotateTransform3D, @ptrCast(self)), center_x_);
            }
            pub inline fn setCenterY(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRotateTransform3D.VTable, @ptrCast(self.vtable)).SetCenterY(@as(*const IDCompositionRotateTransform3D, @ptrCast(self)), animation_);
            }
            pub inline fn setCenterY1(self: *const T, center_y_: f32) HRESULT {
                return @as(*const IDCompositionRotateTransform3D.VTable, @ptrCast(self.vtable)).SetCenterY(@as(*const IDCompositionRotateTransform3D, @ptrCast(self)), center_y_);
            }
            pub inline fn setCenterZ(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRotateTransform3D.VTable, @ptrCast(self.vtable)).SetCenterZ(@as(*const IDCompositionRotateTransform3D, @ptrCast(self)), animation_);
            }
            pub inline fn setCenterZ1(self: *const T, center_z_: f32) HRESULT {
                return @as(*const IDCompositionRotateTransform3D.VTable, @ptrCast(self.vtable)).SetCenterZ(@as(*const IDCompositionRotateTransform3D, @ptrCast(self)), center_z_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionMatrixTransform3D_Value = Guid.initString("4b3363f0-643b-41b7-b6e0-ccf22d34467c");
pub const IID_IDCompositionMatrixTransform3D = &IID_IDCompositionMatrixTransform3D_Value;
pub const IDCompositionMatrixTransform3D = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionTransform3D.VTable,
        SetMatrix: *const fn (
            self: *const IDCompositionMatrixTransform3D,
            matrix: ?*const D3DMATRIX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMatrixElement: *const fn (
            self: *const IDCompositionMatrixTransform3D,
            row: i32,
            column: i32,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMatrixElement1: *const fn (
            self: *const IDCompositionMatrixTransform3D,
            row: i32,
            column: i32,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionTransform3D.MethodMixin(T);
            pub inline fn setMatrix(self: *const T, matrix_: ?*const D3DMATRIX) HRESULT {
                return @as(*const IDCompositionMatrixTransform3D.VTable, @ptrCast(self.vtable)).SetMatrix(@as(*const IDCompositionMatrixTransform3D, @ptrCast(self)), matrix_);
            }
            pub inline fn setMatrixElement(self: *const T, row_: i32, column_: i32, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionMatrixTransform3D.VTable, @ptrCast(self.vtable)).SetMatrixElement(@as(*const IDCompositionMatrixTransform3D, @ptrCast(self)), row_, column_, animation_);
            }
            pub inline fn setMatrixElement1(self: *const T, row_: i32, column_: i32, value_: f32) HRESULT {
                return @as(*const IDCompositionMatrixTransform3D.VTable, @ptrCast(self.vtable)).SetMatrixElement(@as(*const IDCompositionMatrixTransform3D, @ptrCast(self)), row_, column_, value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionClip_Value = Guid.initString("64ac3703-9d3f-45ec-a109-7cac0e7a13a7");
pub const IID_IDCompositionClip = &IID_IDCompositionClip_Value;
pub const IDCompositionClip = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionRectangleClip_Value = Guid.initString("9842ad7d-d9cf-4908-aed7-48b51da5e7c2");
pub const IID_IDCompositionRectangleClip = &IID_IDCompositionRectangleClip_Value;
pub const IDCompositionRectangleClip = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionClip.VTable,
        SetLeft: *const fn (
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLeft1: *const fn (
            self: *const IDCompositionRectangleClip,
            left: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTop: *const fn (
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTop1: *const fn (
            self: *const IDCompositionRectangleClip,
            top: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRight: *const fn (
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRight1: *const fn (
            self: *const IDCompositionRectangleClip,
            right: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBottom: *const fn (
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBottom1: *const fn (
            self: *const IDCompositionRectangleClip,
            bottom: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTopLeftRadiusX: *const fn (
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTopLeftRadiusX1: *const fn (
            self: *const IDCompositionRectangleClip,
            radius: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTopLeftRadiusY: *const fn (
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTopLeftRadiusY1: *const fn (
            self: *const IDCompositionRectangleClip,
            radius: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTopRightRadiusX: *const fn (
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTopRightRadiusX1: *const fn (
            self: *const IDCompositionRectangleClip,
            radius: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTopRightRadiusY: *const fn (
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTopRightRadiusY1: *const fn (
            self: *const IDCompositionRectangleClip,
            radius: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBottomLeftRadiusX: *const fn (
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBottomLeftRadiusX1: *const fn (
            self: *const IDCompositionRectangleClip,
            radius: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBottomLeftRadiusY: *const fn (
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBottomLeftRadiusY1: *const fn (
            self: *const IDCompositionRectangleClip,
            radius: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBottomRightRadiusX: *const fn (
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBottomRightRadiusX1: *const fn (
            self: *const IDCompositionRectangleClip,
            radius: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBottomRightRadiusY: *const fn (
            self: *const IDCompositionRectangleClip,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBottomRightRadiusY1: *const fn (
            self: *const IDCompositionRectangleClip,
            radius: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionClip.MethodMixin(T);
            pub inline fn setLeft(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetLeft(@as(*const IDCompositionRectangleClip, @ptrCast(self)), animation_);
            }
            pub inline fn setLeft1(self: *const T, left_: f32) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetLeft(@as(*const IDCompositionRectangleClip, @ptrCast(self)), left_);
            }
            pub inline fn setTop(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetTop(@as(*const IDCompositionRectangleClip, @ptrCast(self)), animation_);
            }
            pub inline fn setTop1(self: *const T, top_: f32) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetTop(@as(*const IDCompositionRectangleClip, @ptrCast(self)), top_);
            }
            pub inline fn setRight(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetRight(@as(*const IDCompositionRectangleClip, @ptrCast(self)), animation_);
            }
            pub inline fn setRight1(self: *const T, right_: f32) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetRight(@as(*const IDCompositionRectangleClip, @ptrCast(self)), right_);
            }
            pub inline fn setBottom(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetBottom(@as(*const IDCompositionRectangleClip, @ptrCast(self)), animation_);
            }
            pub inline fn setBottom1(self: *const T, bottom_: f32) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetBottom(@as(*const IDCompositionRectangleClip, @ptrCast(self)), bottom_);
            }
            pub inline fn setTopLeftRadiusX(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetTopLeftRadiusX(@as(*const IDCompositionRectangleClip, @ptrCast(self)), animation_);
            }
            pub inline fn setTopLeftRadiusX1(self: *const T, radius_: f32) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetTopLeftRadiusX(@as(*const IDCompositionRectangleClip, @ptrCast(self)), radius_);
            }
            pub inline fn setTopLeftRadiusY(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetTopLeftRadiusY(@as(*const IDCompositionRectangleClip, @ptrCast(self)), animation_);
            }
            pub inline fn setTopLeftRadiusY1(self: *const T, radius_: f32) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetTopLeftRadiusY(@as(*const IDCompositionRectangleClip, @ptrCast(self)), radius_);
            }
            pub inline fn setTopRightRadiusX(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetTopRightRadiusX(@as(*const IDCompositionRectangleClip, @ptrCast(self)), animation_);
            }
            pub inline fn setTopRightRadiusX1(self: *const T, radius_: f32) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetTopRightRadiusX(@as(*const IDCompositionRectangleClip, @ptrCast(self)), radius_);
            }
            pub inline fn setTopRightRadiusY(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetTopRightRadiusY(@as(*const IDCompositionRectangleClip, @ptrCast(self)), animation_);
            }
            pub inline fn setTopRightRadiusY1(self: *const T, radius_: f32) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetTopRightRadiusY(@as(*const IDCompositionRectangleClip, @ptrCast(self)), radius_);
            }
            pub inline fn setBottomLeftRadiusX(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetBottomLeftRadiusX(@as(*const IDCompositionRectangleClip, @ptrCast(self)), animation_);
            }
            pub inline fn setBottomLeftRadiusX1(self: *const T, radius_: f32) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetBottomLeftRadiusX(@as(*const IDCompositionRectangleClip, @ptrCast(self)), radius_);
            }
            pub inline fn setBottomLeftRadiusY(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetBottomLeftRadiusY(@as(*const IDCompositionRectangleClip, @ptrCast(self)), animation_);
            }
            pub inline fn setBottomLeftRadiusY1(self: *const T, radius_: f32) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetBottomLeftRadiusY(@as(*const IDCompositionRectangleClip, @ptrCast(self)), radius_);
            }
            pub inline fn setBottomRightRadiusX(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetBottomRightRadiusX(@as(*const IDCompositionRectangleClip, @ptrCast(self)), animation_);
            }
            pub inline fn setBottomRightRadiusX1(self: *const T, radius_: f32) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetBottomRightRadiusX(@as(*const IDCompositionRectangleClip, @ptrCast(self)), radius_);
            }
            pub inline fn setBottomRightRadiusY(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetBottomRightRadiusY(@as(*const IDCompositionRectangleClip, @ptrCast(self)), animation_);
            }
            pub inline fn setBottomRightRadiusY1(self: *const T, radius_: f32) HRESULT {
                return @as(*const IDCompositionRectangleClip.VTable, @ptrCast(self.vtable)).SetBottomRightRadiusY(@as(*const IDCompositionRectangleClip, @ptrCast(self)), radius_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionSurface_Value = Guid.initString("bb8a4953-2c99-4f5a-96f5-4819027fa3ac");
pub const IID_IDCompositionSurface = &IID_IDCompositionSurface_Value;
pub const IDCompositionSurface = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BeginDraw: *const fn (
            self: *const IDCompositionSurface,
            update_rect: ?*const RECT,
            iid: ?*const Guid,
            update_object: ?*?*anyopaque,
            update_offset: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndDraw: *const fn (
            self: *const IDCompositionSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SuspendDraw: *const fn (
            self: *const IDCompositionSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResumeDraw: *const fn (
            self: *const IDCompositionSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Scroll: *const fn (
            self: *const IDCompositionSurface,
            scroll_rect: ?*const RECT,
            clip_rect: ?*const RECT,
            offset_x: i32,
            offset_y: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn beginDraw(self: *const T, update_rect_: ?*const RECT, iid_: ?*const Guid, update_object_: ?*?*anyopaque, update_offset_: ?*POINT) HRESULT {
                return @as(*const IDCompositionSurface.VTable, @ptrCast(self.vtable)).BeginDraw(@as(*const IDCompositionSurface, @ptrCast(self)), update_rect_, iid_, update_object_, update_offset_);
            }
            pub inline fn endDraw(self: *const T) HRESULT {
                return @as(*const IDCompositionSurface.VTable, @ptrCast(self.vtable)).EndDraw(@as(*const IDCompositionSurface, @ptrCast(self)));
            }
            pub inline fn suspendDraw(self: *const T) HRESULT {
                return @as(*const IDCompositionSurface.VTable, @ptrCast(self.vtable)).SuspendDraw(@as(*const IDCompositionSurface, @ptrCast(self)));
            }
            pub inline fn resumeDraw(self: *const T) HRESULT {
                return @as(*const IDCompositionSurface.VTable, @ptrCast(self.vtable)).ResumeDraw(@as(*const IDCompositionSurface, @ptrCast(self)));
            }
            pub inline fn scroll(self: *const T, scroll_rect_: ?*const RECT, clip_rect_: ?*const RECT, offset_x_: i32, offset_y_: i32) HRESULT {
                return @as(*const IDCompositionSurface.VTable, @ptrCast(self.vtable)).Scroll(@as(*const IDCompositionSurface, @ptrCast(self)), scroll_rect_, clip_rect_, offset_x_, offset_y_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionVirtualSurface_Value = Guid.initString("ae471c51-5f53-4a24-8d3e-d0c39c30b3f0");
pub const IID_IDCompositionVirtualSurface = &IID_IDCompositionVirtualSurface_Value;
pub const IDCompositionVirtualSurface = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionSurface.VTable,
        Resize: *const fn (
            self: *const IDCompositionVirtualSurface,
            width: u32,
            height: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Trim: *const fn (
            self: *const IDCompositionVirtualSurface,
            rectangles: ?[*]const RECT,
            count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionSurface.MethodMixin(T);
            pub inline fn resize(self: *const T, width_: u32, height_: u32) HRESULT {
                return @as(*const IDCompositionVirtualSurface.VTable, @ptrCast(self.vtable)).Resize(@as(*const IDCompositionVirtualSurface, @ptrCast(self)), width_, height_);
            }
            pub inline fn trim(self: *const T, rectangles_: ?[*]const RECT, count_: u32) HRESULT {
                return @as(*const IDCompositionVirtualSurface.VTable, @ptrCast(self.vtable)).Trim(@as(*const IDCompositionVirtualSurface, @ptrCast(self)), rectangles_, count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDCompositionDevice2_Value = Guid.initString("75f6468d-1b8e-447c-9bc6-75fea80b5b25");
pub const IID_IDCompositionDevice2 = &IID_IDCompositionDevice2_Value;
pub const IDCompositionDevice2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Commit: *const fn (
            self: *const IDCompositionDevice2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WaitForCommitCompletion: *const fn (
            self: *const IDCompositionDevice2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFrameStatistics: *const fn (
            self: *const IDCompositionDevice2,
            statistics: ?*DCOMPOSITION_FRAME_STATISTICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVisual: *const fn (
            self: *const IDCompositionDevice2,
            visual: ?*?*IDCompositionVisual2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSurfaceFactory: *const fn (
            self: *const IDCompositionDevice2,
            rendering_device: ?*IUnknown,
            surface_factory: ?*?*IDCompositionSurfaceFactory,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSurface: *const fn (
            self: *const IDCompositionDevice2,
            width: u32,
            height: u32,
            pixel_format: DXGI_FORMAT,
            alpha_mode: DXGI_ALPHA_MODE,
            surface: ?*?*IDCompositionSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVirtualSurface: *const fn (
            self: *const IDCompositionDevice2,
            initial_width: u32,
            initial_height: u32,
            pixel_format: DXGI_FORMAT,
            alpha_mode: DXGI_ALPHA_MODE,
            virtual_surface: ?*?*IDCompositionVirtualSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTranslateTransform: *const fn (
            self: *const IDCompositionDevice2,
            translate_transform: ?*?*IDCompositionTranslateTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateScaleTransform: *const fn (
            self: *const IDCompositionDevice2,
            scale_transform: ?*?*IDCompositionScaleTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRotateTransform: *const fn (
            self: *const IDCompositionDevice2,
            rotate_transform: ?*?*IDCompositionRotateTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSkewTransform: *const fn (
            self: *const IDCompositionDevice2,
            skew_transform: ?*?*IDCompositionSkewTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMatrixTransform: *const fn (
            self: *const IDCompositionDevice2,
            matrix_transform: ?*?*IDCompositionMatrixTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTransformGroup: *const fn (
            self: *const IDCompositionDevice2,
            transforms: [*]?*IDCompositionTransform,
            elements: u32,
            transform_group: ?*?*IDCompositionTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTranslateTransform3D: *const fn (
            self: *const IDCompositionDevice2,
            translate_transform3_d: ?*?*IDCompositionTranslateTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateScaleTransform3D: *const fn (
            self: *const IDCompositionDevice2,
            scale_transform3_d: ?*?*IDCompositionScaleTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRotateTransform3D: *const fn (
            self: *const IDCompositionDevice2,
            rotate_transform3_d: ?*?*IDCompositionRotateTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMatrixTransform3D: *const fn (
            self: *const IDCompositionDevice2,
            matrix_transform3_d: ?*?*IDCompositionMatrixTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTransform3DGroup: *const fn (
            self: *const IDCompositionDevice2,
            transforms3_d: [*]?*IDCompositionTransform3D,
            elements: u32,
            transform3_d_group: ?*?*IDCompositionTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEffectGroup: *const fn (
            self: *const IDCompositionDevice2,
            effect_group: ?*?*IDCompositionEffectGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRectangleClip: *const fn (
            self: *const IDCompositionDevice2,
            clip: ?*?*IDCompositionRectangleClip,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAnimation: *const fn (
            self: *const IDCompositionDevice2,
            animation: ?*?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn commit(self: *const T) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).Commit(@as(*const IDCompositionDevice2, @ptrCast(self)));
            }
            pub inline fn waitForCommitCompletion(self: *const T) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).WaitForCommitCompletion(@as(*const IDCompositionDevice2, @ptrCast(self)));
            }
            pub inline fn getFrameStatistics(self: *const T, statistics_: ?*DCOMPOSITION_FRAME_STATISTICS) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).GetFrameStatistics(@as(*const IDCompositionDevice2, @ptrCast(self)), statistics_);
            }
            pub inline fn createVisual(self: *const T, visual_: ?*?*IDCompositionVisual2) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).CreateVisual(@as(*const IDCompositionDevice2, @ptrCast(self)), visual_);
            }
            pub inline fn createSurfaceFactory(self: *const T, rendering_device_: ?*IUnknown, surface_factory_: ?*?*IDCompositionSurfaceFactory) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).CreateSurfaceFactory(@as(*const IDCompositionDevice2, @ptrCast(self)), rendering_device_, surface_factory_);
            }
            pub inline fn createSurface(self: *const T, width_: u32, height_: u32, pixel_format_: DXGI_FORMAT, alpha_mode_: DXGI_ALPHA_MODE, surface_: ?*?*IDCompositionSurface) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).CreateSurface(@as(*const IDCompositionDevice2, @ptrCast(self)), width_, height_, pixel_format_, alpha_mode_, surface_);
            }
            pub inline fn createVirtualSurface(self: *const T, initial_width_: u32, initial_height_: u32, pixel_format_: DXGI_FORMAT, alpha_mode_: DXGI_ALPHA_MODE, virtual_surface_: ?*?*IDCompositionVirtualSurface) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).CreateVirtualSurface(@as(*const IDCompositionDevice2, @ptrCast(self)), initial_width_, initial_height_, pixel_format_, alpha_mode_, virtual_surface_);
            }
            pub inline fn createTranslateTransform(self: *const T, translate_transform_: ?*?*IDCompositionTranslateTransform) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).CreateTranslateTransform(@as(*const IDCompositionDevice2, @ptrCast(self)), translate_transform_);
            }
            pub inline fn createScaleTransform(self: *const T, scale_transform_: ?*?*IDCompositionScaleTransform) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).CreateScaleTransform(@as(*const IDCompositionDevice2, @ptrCast(self)), scale_transform_);
            }
            pub inline fn createRotateTransform(self: *const T, rotate_transform_: ?*?*IDCompositionRotateTransform) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).CreateRotateTransform(@as(*const IDCompositionDevice2, @ptrCast(self)), rotate_transform_);
            }
            pub inline fn createSkewTransform(self: *const T, skew_transform_: ?*?*IDCompositionSkewTransform) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).CreateSkewTransform(@as(*const IDCompositionDevice2, @ptrCast(self)), skew_transform_);
            }
            pub inline fn createMatrixTransform(self: *const T, matrix_transform_: ?*?*IDCompositionMatrixTransform) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).CreateMatrixTransform(@as(*const IDCompositionDevice2, @ptrCast(self)), matrix_transform_);
            }
            pub inline fn createTransformGroup(self: *const T, transforms_: [*]?*IDCompositionTransform, elements_: u32, transform_group_: ?*?*IDCompositionTransform) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).CreateTransformGroup(@as(*const IDCompositionDevice2, @ptrCast(self)), transforms_, elements_, transform_group_);
            }
            pub inline fn createTranslateTransform3D(self: *const T, translate_transform3_d_: ?*?*IDCompositionTranslateTransform3D) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).CreateTranslateTransform3D(@as(*const IDCompositionDevice2, @ptrCast(self)), translate_transform3_d_);
            }
            pub inline fn createScaleTransform3D(self: *const T, scale_transform3_d_: ?*?*IDCompositionScaleTransform3D) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).CreateScaleTransform3D(@as(*const IDCompositionDevice2, @ptrCast(self)), scale_transform3_d_);
            }
            pub inline fn createRotateTransform3D(self: *const T, rotate_transform3_d_: ?*?*IDCompositionRotateTransform3D) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).CreateRotateTransform3D(@as(*const IDCompositionDevice2, @ptrCast(self)), rotate_transform3_d_);
            }
            pub inline fn createMatrixTransform3D(self: *const T, matrix_transform3_d_: ?*?*IDCompositionMatrixTransform3D) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).CreateMatrixTransform3D(@as(*const IDCompositionDevice2, @ptrCast(self)), matrix_transform3_d_);
            }
            pub inline fn createTransform3DGroup(self: *const T, transforms3_d_: [*]?*IDCompositionTransform3D, elements_: u32, transform3_d_group_: ?*?*IDCompositionTransform3D) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).CreateTransform3DGroup(@as(*const IDCompositionDevice2, @ptrCast(self)), transforms3_d_, elements_, transform3_d_group_);
            }
            pub inline fn createEffectGroup(self: *const T, effect_group_: ?*?*IDCompositionEffectGroup) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).CreateEffectGroup(@as(*const IDCompositionDevice2, @ptrCast(self)), effect_group_);
            }
            pub inline fn createRectangleClip(self: *const T, clip_: ?*?*IDCompositionRectangleClip) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).CreateRectangleClip(@as(*const IDCompositionDevice2, @ptrCast(self)), clip_);
            }
            pub inline fn createAnimation(self: *const T, animation_: ?*?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionDevice2.VTable, @ptrCast(self.vtable)).CreateAnimation(@as(*const IDCompositionDevice2, @ptrCast(self)), animation_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDCompositionDesktopDevice_Value = Guid.initString("5f4633fe-1e08-4cb8-8c75-ce24333f5602");
pub const IID_IDCompositionDesktopDevice = &IID_IDCompositionDesktopDevice_Value;
pub const IDCompositionDesktopDevice = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionDevice2.VTable,
        CreateTargetForHwnd: *const fn (
            self: *const IDCompositionDesktopDevice,
            hwnd: ?HWND,
            topmost: BOOL,
            target: ?*?*IDCompositionTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSurfaceFromHandle: *const fn (
            self: *const IDCompositionDesktopDevice,
            handle: ?HANDLE,
            surface: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSurfaceFromHwnd: *const fn (
            self: *const IDCompositionDesktopDevice,
            hwnd: ?HWND,
            surface: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionDevice2.MethodMixin(T);
            pub inline fn createTargetForHwnd(self: *const T, hwnd_: ?HWND, topmost_: BOOL, target_: ?*?*IDCompositionTarget) HRESULT {
                return @as(*const IDCompositionDesktopDevice.VTable, @ptrCast(self.vtable)).CreateTargetForHwnd(@as(*const IDCompositionDesktopDevice, @ptrCast(self)), hwnd_, topmost_, target_);
            }
            pub inline fn createSurfaceFromHandle(self: *const T, handle_: ?HANDLE, surface_: ?*?*IUnknown) HRESULT {
                return @as(*const IDCompositionDesktopDevice.VTable, @ptrCast(self.vtable)).CreateSurfaceFromHandle(@as(*const IDCompositionDesktopDevice, @ptrCast(self)), handle_, surface_);
            }
            pub inline fn createSurfaceFromHwnd(self: *const T, hwnd_: ?HWND, surface_: ?*?*IUnknown) HRESULT {
                return @as(*const IDCompositionDesktopDevice.VTable, @ptrCast(self.vtable)).CreateSurfaceFromHwnd(@as(*const IDCompositionDesktopDevice, @ptrCast(self)), hwnd_, surface_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDCompositionDeviceDebug_Value = Guid.initString("a1a3c64a-224f-4a81-9773-4f03a89d3c6c");
pub const IID_IDCompositionDeviceDebug = &IID_IDCompositionDeviceDebug_Value;
pub const IDCompositionDeviceDebug = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnableDebugCounters: *const fn (
            self: *const IDCompositionDeviceDebug,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableDebugCounters: *const fn (
            self: *const IDCompositionDeviceDebug,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn enableDebugCounters(self: *const T) HRESULT {
                return @as(*const IDCompositionDeviceDebug.VTable, @ptrCast(self.vtable)).EnableDebugCounters(@as(*const IDCompositionDeviceDebug, @ptrCast(self)));
            }
            pub inline fn disableDebugCounters(self: *const T) HRESULT {
                return @as(*const IDCompositionDeviceDebug.VTable, @ptrCast(self.vtable)).DisableDebugCounters(@as(*const IDCompositionDeviceDebug, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDCompositionSurfaceFactory_Value = Guid.initString("e334bc12-3937-4e02-85eb-fcf4eb30d2c8");
pub const IID_IDCompositionSurfaceFactory = &IID_IDCompositionSurfaceFactory_Value;
pub const IDCompositionSurfaceFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateSurface: *const fn (
            self: *const IDCompositionSurfaceFactory,
            width: u32,
            height: u32,
            pixel_format: DXGI_FORMAT,
            alpha_mode: DXGI_ALPHA_MODE,
            surface: ?*?*IDCompositionSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVirtualSurface: *const fn (
            self: *const IDCompositionSurfaceFactory,
            initial_width: u32,
            initial_height: u32,
            pixel_format: DXGI_FORMAT,
            alpha_mode: DXGI_ALPHA_MODE,
            virtual_surface: ?*?*IDCompositionVirtualSurface,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createSurface(self: *const T, width_: u32, height_: u32, pixel_format_: DXGI_FORMAT, alpha_mode_: DXGI_ALPHA_MODE, surface_: ?*?*IDCompositionSurface) HRESULT {
                return @as(*const IDCompositionSurfaceFactory.VTable, @ptrCast(self.vtable)).CreateSurface(@as(*const IDCompositionSurfaceFactory, @ptrCast(self)), width_, height_, pixel_format_, alpha_mode_, surface_);
            }
            pub inline fn createVirtualSurface(self: *const T, initial_width_: u32, initial_height_: u32, pixel_format_: DXGI_FORMAT, alpha_mode_: DXGI_ALPHA_MODE, virtual_surface_: ?*?*IDCompositionVirtualSurface) HRESULT {
                return @as(*const IDCompositionSurfaceFactory.VTable, @ptrCast(self.vtable)).CreateVirtualSurface(@as(*const IDCompositionSurfaceFactory, @ptrCast(self)), initial_width_, initial_height_, pixel_format_, alpha_mode_, virtual_surface_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDCompositionVisual2_Value = Guid.initString("e8de1639-4331-4b26-bc5f-6a321d347a85");
pub const IID_IDCompositionVisual2 = &IID_IDCompositionVisual2_Value;
pub const IDCompositionVisual2 = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionVisual.VTable,
        SetOpacityMode: *const fn (
            self: *const IDCompositionVisual2,
            mode: DCOMPOSITION_OPACITY_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBackFaceVisibility: *const fn (
            self: *const IDCompositionVisual2,
            visibility: DCOMPOSITION_BACKFACE_VISIBILITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionVisual.MethodMixin(T);
            pub inline fn setOpacityMode(self: *const T, mode_: DCOMPOSITION_OPACITY_MODE) HRESULT {
                return @as(*const IDCompositionVisual2.VTable, @ptrCast(self.vtable)).SetOpacityMode(@as(*const IDCompositionVisual2, @ptrCast(self)), mode_);
            }
            pub inline fn setBackFaceVisibility(self: *const T, visibility_: DCOMPOSITION_BACKFACE_VISIBILITY) HRESULT {
                return @as(*const IDCompositionVisual2.VTable, @ptrCast(self.vtable)).SetBackFaceVisibility(@as(*const IDCompositionVisual2, @ptrCast(self)), visibility_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDCompositionVisualDebug_Value = Guid.initString("fed2b808-5eb4-43a0-aea3-35f65280f91b");
pub const IID_IDCompositionVisualDebug = &IID_IDCompositionVisualDebug_Value;
pub const IDCompositionVisualDebug = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionVisual2.VTable,
        EnableHeatMap: *const fn (
            self: *const IDCompositionVisualDebug,
            color: ?*const D2D1_COLOR_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableHeatMap: *const fn (
            self: *const IDCompositionVisualDebug,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableRedrawRegions: *const fn (
            self: *const IDCompositionVisualDebug,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableRedrawRegions: *const fn (
            self: *const IDCompositionVisualDebug,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionVisual2.MethodMixin(T);
            pub inline fn enableHeatMap(self: *const T, color_: ?*const D2D1_COLOR_F) HRESULT {
                return @as(*const IDCompositionVisualDebug.VTable, @ptrCast(self.vtable)).EnableHeatMap(@as(*const IDCompositionVisualDebug, @ptrCast(self)), color_);
            }
            pub inline fn disableHeatMap(self: *const T) HRESULT {
                return @as(*const IDCompositionVisualDebug.VTable, @ptrCast(self.vtable)).DisableHeatMap(@as(*const IDCompositionVisualDebug, @ptrCast(self)));
            }
            pub inline fn enableRedrawRegions(self: *const T) HRESULT {
                return @as(*const IDCompositionVisualDebug.VTable, @ptrCast(self.vtable)).EnableRedrawRegions(@as(*const IDCompositionVisualDebug, @ptrCast(self)));
            }
            pub inline fn disableRedrawRegions(self: *const T) HRESULT {
                return @as(*const IDCompositionVisualDebug.VTable, @ptrCast(self.vtable)).DisableRedrawRegions(@as(*const IDCompositionVisualDebug, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDCompositionVisual3_Value = Guid.initString("2775f462-b6c1-4015-b0be-b3e7d6a4976d");
pub const IID_IDCompositionVisual3 = &IID_IDCompositionVisual3_Value;
pub const IDCompositionVisual3 = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionVisualDebug.VTable,
        SetDepthMode: *const fn (
            self: *const IDCompositionVisual3,
            mode: DCOMPOSITION_DEPTH_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetZ: *const fn (
            self: *const IDCompositionVisual3,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOffsetZ1: *const fn (
            self: *const IDCompositionVisual3,
            offset_z: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOpacity: *const fn (
            self: *const IDCompositionVisual3,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOpacity1: *const fn (
            self: *const IDCompositionVisual3,
            opacity: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransform: *const fn (
            self: *const IDCompositionVisual3,
            transform: ?*IDCompositionTransform3D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransform1: *const fn (
            self: *const IDCompositionVisual3,
            matrix: ?*const D2D_MATRIX_4X4_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVisible: *const fn (
            self: *const IDCompositionVisual3,
            visible: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionVisualDebug.MethodMixin(T);
            pub inline fn setDepthMode(self: *const T, mode_: DCOMPOSITION_DEPTH_MODE) HRESULT {
                return @as(*const IDCompositionVisual3.VTable, @ptrCast(self.vtable)).SetDepthMode(@as(*const IDCompositionVisual3, @ptrCast(self)), mode_);
            }
            pub inline fn setOffsetZ(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionVisual3.VTable, @ptrCast(self.vtable)).SetOffsetZ(@as(*const IDCompositionVisual3, @ptrCast(self)), animation_);
            }
            pub inline fn setOffsetZ1(self: *const T, offset_z_: f32) HRESULT {
                return @as(*const IDCompositionVisual3.VTable, @ptrCast(self.vtable)).SetOffsetZ(@as(*const IDCompositionVisual3, @ptrCast(self)), offset_z_);
            }
            pub inline fn setOpacity(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionVisual3.VTable, @ptrCast(self.vtable)).SetOpacity(@as(*const IDCompositionVisual3, @ptrCast(self)), animation_);
            }
            pub inline fn setOpacity1(self: *const T, opacity_: f32) HRESULT {
                return @as(*const IDCompositionVisual3.VTable, @ptrCast(self.vtable)).SetOpacity(@as(*const IDCompositionVisual3, @ptrCast(self)), opacity_);
            }
            pub inline fn setTransform(self: *const T, transform_: ?*IDCompositionTransform3D) HRESULT {
                return @as(*const IDCompositionVisual3.VTable, @ptrCast(self.vtable)).SetTransform(@as(*const IDCompositionVisual3, @ptrCast(self)), transform_);
            }
            pub inline fn setTransform1(self: *const T, matrix_: ?*const D2D_MATRIX_4X4_F) HRESULT {
                return @as(*const IDCompositionVisual3.VTable, @ptrCast(self.vtable)).SetTransform(@as(*const IDCompositionVisual3, @ptrCast(self)), matrix_);
            }
            pub inline fn setVisible(self: *const T, visible_: BOOL) HRESULT {
                return @as(*const IDCompositionVisual3.VTable, @ptrCast(self.vtable)).SetVisible(@as(*const IDCompositionVisual3, @ptrCast(self)), visible_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IDCompositionDevice3_Value = Guid.initString("0987cb06-f916-48bf-8d35-ce7641781bd9");
pub const IID_IDCompositionDevice3 = &IID_IDCompositionDevice3_Value;
pub const IDCompositionDevice3 = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionDevice2.VTable,
        CreateGaussianBlurEffect: *const fn (
            self: *const IDCompositionDevice3,
            gaussian_blur_effect: ?*?*IDCompositionGaussianBlurEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBrightnessEffect: *const fn (
            self: *const IDCompositionDevice3,
            brightness_effect: ?*?*IDCompositionBrightnessEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateColorMatrixEffect: *const fn (
            self: *const IDCompositionDevice3,
            color_matrix_effect: ?*?*IDCompositionColorMatrixEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateShadowEffect: *const fn (
            self: *const IDCompositionDevice3,
            shadow_effect: ?*?*IDCompositionShadowEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateHueRotationEffect: *const fn (
            self: *const IDCompositionDevice3,
            hue_rotation_effect: ?*?*IDCompositionHueRotationEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSaturationEffect: *const fn (
            self: *const IDCompositionDevice3,
            saturation_effect: ?*?*IDCompositionSaturationEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTurbulenceEffect: *const fn (
            self: *const IDCompositionDevice3,
            turbulence_effect: ?*?*IDCompositionTurbulenceEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateLinearTransferEffect: *const fn (
            self: *const IDCompositionDevice3,
            linear_transfer_effect: ?*?*IDCompositionLinearTransferEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTableTransferEffect: *const fn (
            self: *const IDCompositionDevice3,
            table_transfer_effect: ?*?*IDCompositionTableTransferEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCompositeEffect: *const fn (
            self: *const IDCompositionDevice3,
            composite_effect: ?*?*IDCompositionCompositeEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBlendEffect: *const fn (
            self: *const IDCompositionDevice3,
            blend_effect: ?*?*IDCompositionBlendEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateArithmeticCompositeEffect: *const fn (
            self: *const IDCompositionDevice3,
            arithmetic_composite_effect: ?*?*IDCompositionArithmeticCompositeEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAffineTransform2DEffect: *const fn (
            self: *const IDCompositionDevice3,
            affine_transform2d_effect: ?*?*IDCompositionAffineTransform2DEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionDevice2.MethodMixin(T);
            pub inline fn createGaussianBlurEffect(self: *const T, gaussian_blur_effect_: ?*?*IDCompositionGaussianBlurEffect) HRESULT {
                return @as(*const IDCompositionDevice3.VTable, @ptrCast(self.vtable)).CreateGaussianBlurEffect(@as(*const IDCompositionDevice3, @ptrCast(self)), gaussian_blur_effect_);
            }
            pub inline fn createBrightnessEffect(self: *const T, brightness_effect_: ?*?*IDCompositionBrightnessEffect) HRESULT {
                return @as(*const IDCompositionDevice3.VTable, @ptrCast(self.vtable)).CreateBrightnessEffect(@as(*const IDCompositionDevice3, @ptrCast(self)), brightness_effect_);
            }
            pub inline fn createColorMatrixEffect(self: *const T, color_matrix_effect_: ?*?*IDCompositionColorMatrixEffect) HRESULT {
                return @as(*const IDCompositionDevice3.VTable, @ptrCast(self.vtable)).CreateColorMatrixEffect(@as(*const IDCompositionDevice3, @ptrCast(self)), color_matrix_effect_);
            }
            pub inline fn createShadowEffect(self: *const T, shadow_effect_: ?*?*IDCompositionShadowEffect) HRESULT {
                return @as(*const IDCompositionDevice3.VTable, @ptrCast(self.vtable)).CreateShadowEffect(@as(*const IDCompositionDevice3, @ptrCast(self)), shadow_effect_);
            }
            pub inline fn createHueRotationEffect(self: *const T, hue_rotation_effect_: ?*?*IDCompositionHueRotationEffect) HRESULT {
                return @as(*const IDCompositionDevice3.VTable, @ptrCast(self.vtable)).CreateHueRotationEffect(@as(*const IDCompositionDevice3, @ptrCast(self)), hue_rotation_effect_);
            }
            pub inline fn createSaturationEffect(self: *const T, saturation_effect_: ?*?*IDCompositionSaturationEffect) HRESULT {
                return @as(*const IDCompositionDevice3.VTable, @ptrCast(self.vtable)).CreateSaturationEffect(@as(*const IDCompositionDevice3, @ptrCast(self)), saturation_effect_);
            }
            pub inline fn createTurbulenceEffect(self: *const T, turbulence_effect_: ?*?*IDCompositionTurbulenceEffect) HRESULT {
                return @as(*const IDCompositionDevice3.VTable, @ptrCast(self.vtable)).CreateTurbulenceEffect(@as(*const IDCompositionDevice3, @ptrCast(self)), turbulence_effect_);
            }
            pub inline fn createLinearTransferEffect(self: *const T, linear_transfer_effect_: ?*?*IDCompositionLinearTransferEffect) HRESULT {
                return @as(*const IDCompositionDevice3.VTable, @ptrCast(self.vtable)).CreateLinearTransferEffect(@as(*const IDCompositionDevice3, @ptrCast(self)), linear_transfer_effect_);
            }
            pub inline fn createTableTransferEffect(self: *const T, table_transfer_effect_: ?*?*IDCompositionTableTransferEffect) HRESULT {
                return @as(*const IDCompositionDevice3.VTable, @ptrCast(self.vtable)).CreateTableTransferEffect(@as(*const IDCompositionDevice3, @ptrCast(self)), table_transfer_effect_);
            }
            pub inline fn createCompositeEffect(self: *const T, composite_effect_: ?*?*IDCompositionCompositeEffect) HRESULT {
                return @as(*const IDCompositionDevice3.VTable, @ptrCast(self.vtable)).CreateCompositeEffect(@as(*const IDCompositionDevice3, @ptrCast(self)), composite_effect_);
            }
            pub inline fn createBlendEffect(self: *const T, blend_effect_: ?*?*IDCompositionBlendEffect) HRESULT {
                return @as(*const IDCompositionDevice3.VTable, @ptrCast(self.vtable)).CreateBlendEffect(@as(*const IDCompositionDevice3, @ptrCast(self)), blend_effect_);
            }
            pub inline fn createArithmeticCompositeEffect(self: *const T, arithmetic_composite_effect_: ?*?*IDCompositionArithmeticCompositeEffect) HRESULT {
                return @as(*const IDCompositionDevice3.VTable, @ptrCast(self.vtable)).CreateArithmeticCompositeEffect(@as(*const IDCompositionDevice3, @ptrCast(self)), arithmetic_composite_effect_);
            }
            pub inline fn createAffineTransform2DEffect(self: *const T, affine_transform2d_effect_: ?*?*IDCompositionAffineTransform2DEffect) HRESULT {
                return @as(*const IDCompositionDevice3.VTable, @ptrCast(self.vtable)).CreateAffineTransform2DEffect(@as(*const IDCompositionDevice3, @ptrCast(self)), affine_transform2d_effect_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDCompositionFilterEffect_Value = Guid.initString("30c421d5-8cb2-4e9f-b133-37be270d4ac2");
pub const IID_IDCompositionFilterEffect = &IID_IDCompositionFilterEffect_Value;
pub const IDCompositionFilterEffect = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionEffect.VTable,
        SetInput: *const fn (
            self: *const IDCompositionFilterEffect,
            index: u32,
            input: ?*IUnknown,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionEffect.MethodMixin(T);
            pub inline fn setInput(self: *const T, index_: u32, input_: ?*IUnknown, flags_: u32) HRESULT {
                return @as(*const IDCompositionFilterEffect.VTable, @ptrCast(self.vtable)).SetInput(@as(*const IDCompositionFilterEffect, @ptrCast(self)), index_, input_, flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDCompositionGaussianBlurEffect_Value = Guid.initString("45d4d0b7-1bd4-454e-8894-2bfa68443033");
pub const IID_IDCompositionGaussianBlurEffect = &IID_IDCompositionGaussianBlurEffect_Value;
pub const IDCompositionGaussianBlurEffect = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetStandardDeviation: *const fn (
            self: *const IDCompositionGaussianBlurEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStandardDeviation1: *const fn (
            self: *const IDCompositionGaussianBlurEffect,
            amount: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBorderMode: *const fn (
            self: *const IDCompositionGaussianBlurEffect,
            mode: D2D1_BORDER_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionFilterEffect.MethodMixin(T);
            pub inline fn setStandardDeviation(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionGaussianBlurEffect.VTable, @ptrCast(self.vtable)).SetStandardDeviation(@as(*const IDCompositionGaussianBlurEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setStandardDeviation1(self: *const T, amount_: f32) HRESULT {
                return @as(*const IDCompositionGaussianBlurEffect.VTable, @ptrCast(self.vtable)).SetStandardDeviation(@as(*const IDCompositionGaussianBlurEffect, @ptrCast(self)), amount_);
            }
            pub inline fn setBorderMode(self: *const T, mode_: D2D1_BORDER_MODE) HRESULT {
                return @as(*const IDCompositionGaussianBlurEffect.VTable, @ptrCast(self.vtable)).SetBorderMode(@as(*const IDCompositionGaussianBlurEffect, @ptrCast(self)), mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDCompositionBrightnessEffect_Value = Guid.initString("6027496e-cb3a-49ab-934f-d798da4f7da6");
pub const IID_IDCompositionBrightnessEffect = &IID_IDCompositionBrightnessEffect_Value;
pub const IDCompositionBrightnessEffect = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetWhitePoint: *const fn (
            self: *const IDCompositionBrightnessEffect,
            white_point: ?*const D2D_VECTOR_2F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlackPoint: *const fn (
            self: *const IDCompositionBrightnessEffect,
            black_point: ?*const D2D_VECTOR_2F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWhitePointX: *const fn (
            self: *const IDCompositionBrightnessEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWhitePointX1: *const fn (
            self: *const IDCompositionBrightnessEffect,
            white_point_x: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWhitePointY: *const fn (
            self: *const IDCompositionBrightnessEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWhitePointY1: *const fn (
            self: *const IDCompositionBrightnessEffect,
            white_point_y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlackPointX: *const fn (
            self: *const IDCompositionBrightnessEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlackPointX1: *const fn (
            self: *const IDCompositionBrightnessEffect,
            black_point_x: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlackPointY: *const fn (
            self: *const IDCompositionBrightnessEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlackPointY1: *const fn (
            self: *const IDCompositionBrightnessEffect,
            black_point_y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionFilterEffect.MethodMixin(T);
            pub inline fn setWhitePoint(self: *const T, white_point_: ?*const D2D_VECTOR_2F) HRESULT {
                return @as(*const IDCompositionBrightnessEffect.VTable, @ptrCast(self.vtable)).SetWhitePoint(@as(*const IDCompositionBrightnessEffect, @ptrCast(self)), white_point_);
            }
            pub inline fn setBlackPoint(self: *const T, black_point_: ?*const D2D_VECTOR_2F) HRESULT {
                return @as(*const IDCompositionBrightnessEffect.VTable, @ptrCast(self.vtable)).SetBlackPoint(@as(*const IDCompositionBrightnessEffect, @ptrCast(self)), black_point_);
            }
            pub inline fn setWhitePointX(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionBrightnessEffect.VTable, @ptrCast(self.vtable)).SetWhitePointX(@as(*const IDCompositionBrightnessEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setWhitePointX1(self: *const T, white_point_x_: f32) HRESULT {
                return @as(*const IDCompositionBrightnessEffect.VTable, @ptrCast(self.vtable)).SetWhitePointX(@as(*const IDCompositionBrightnessEffect, @ptrCast(self)), white_point_x_);
            }
            pub inline fn setWhitePointY(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionBrightnessEffect.VTable, @ptrCast(self.vtable)).SetWhitePointY(@as(*const IDCompositionBrightnessEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setWhitePointY1(self: *const T, white_point_y_: f32) HRESULT {
                return @as(*const IDCompositionBrightnessEffect.VTable, @ptrCast(self.vtable)).SetWhitePointY(@as(*const IDCompositionBrightnessEffect, @ptrCast(self)), white_point_y_);
            }
            pub inline fn setBlackPointX(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionBrightnessEffect.VTable, @ptrCast(self.vtable)).SetBlackPointX(@as(*const IDCompositionBrightnessEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setBlackPointX1(self: *const T, black_point_x_: f32) HRESULT {
                return @as(*const IDCompositionBrightnessEffect.VTable, @ptrCast(self.vtable)).SetBlackPointX(@as(*const IDCompositionBrightnessEffect, @ptrCast(self)), black_point_x_);
            }
            pub inline fn setBlackPointY(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionBrightnessEffect.VTable, @ptrCast(self.vtable)).SetBlackPointY(@as(*const IDCompositionBrightnessEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setBlackPointY1(self: *const T, black_point_y_: f32) HRESULT {
                return @as(*const IDCompositionBrightnessEffect.VTable, @ptrCast(self.vtable)).SetBlackPointY(@as(*const IDCompositionBrightnessEffect, @ptrCast(self)), black_point_y_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDCompositionColorMatrixEffect_Value = Guid.initString("c1170a22-3ce2-4966-90d4-55408bfc84c4");
pub const IID_IDCompositionColorMatrixEffect = &IID_IDCompositionColorMatrixEffect_Value;
pub const IDCompositionColorMatrixEffect = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetMatrix: *const fn (
            self: *const IDCompositionColorMatrixEffect,
            matrix: ?*const D2D_MATRIX_5X4_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMatrixElement: *const fn (
            self: *const IDCompositionColorMatrixEffect,
            row: i32,
            column: i32,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMatrixElement1: *const fn (
            self: *const IDCompositionColorMatrixEffect,
            row: i32,
            column: i32,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlphaMode: *const fn (
            self: *const IDCompositionColorMatrixEffect,
            mode: D2D1_COLORMATRIX_ALPHA_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClampOutput: *const fn (
            self: *const IDCompositionColorMatrixEffect,
            clamp: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionFilterEffect.MethodMixin(T);
            pub inline fn setMatrix(self: *const T, matrix_: ?*const D2D_MATRIX_5X4_F) HRESULT {
                return @as(*const IDCompositionColorMatrixEffect.VTable, @ptrCast(self.vtable)).SetMatrix(@as(*const IDCompositionColorMatrixEffect, @ptrCast(self)), matrix_);
            }
            pub inline fn setMatrixElement(self: *const T, row_: i32, column_: i32, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionColorMatrixEffect.VTable, @ptrCast(self.vtable)).SetMatrixElement(@as(*const IDCompositionColorMatrixEffect, @ptrCast(self)), row_, column_, animation_);
            }
            pub inline fn setMatrixElement1(self: *const T, row_: i32, column_: i32, value_: f32) HRESULT {
                return @as(*const IDCompositionColorMatrixEffect.VTable, @ptrCast(self.vtable)).SetMatrixElement(@as(*const IDCompositionColorMatrixEffect, @ptrCast(self)), row_, column_, value_);
            }
            pub inline fn setAlphaMode(self: *const T, mode_: D2D1_COLORMATRIX_ALPHA_MODE) HRESULT {
                return @as(*const IDCompositionColorMatrixEffect.VTable, @ptrCast(self.vtable)).SetAlphaMode(@as(*const IDCompositionColorMatrixEffect, @ptrCast(self)), mode_);
            }
            pub inline fn setClampOutput(self: *const T, clamp_: BOOL) HRESULT {
                return @as(*const IDCompositionColorMatrixEffect.VTable, @ptrCast(self.vtable)).SetClampOutput(@as(*const IDCompositionColorMatrixEffect, @ptrCast(self)), clamp_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDCompositionShadowEffect_Value = Guid.initString("4ad18ac0-cfd2-4c2f-bb62-96e54fdb6879");
pub const IID_IDCompositionShadowEffect = &IID_IDCompositionShadowEffect_Value;
pub const IDCompositionShadowEffect = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetStandardDeviation: *const fn (
            self: *const IDCompositionShadowEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStandardDeviation1: *const fn (
            self: *const IDCompositionShadowEffect,
            amount: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColor: *const fn (
            self: *const IDCompositionShadowEffect,
            color: ?*const D2D_VECTOR_4F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRed: *const fn (
            self: *const IDCompositionShadowEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRed1: *const fn (
            self: *const IDCompositionShadowEffect,
            amount: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreen: *const fn (
            self: *const IDCompositionShadowEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreen1: *const fn (
            self: *const IDCompositionShadowEffect,
            amount: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlue: *const fn (
            self: *const IDCompositionShadowEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlue1: *const fn (
            self: *const IDCompositionShadowEffect,
            amount: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlpha: *const fn (
            self: *const IDCompositionShadowEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlpha1: *const fn (
            self: *const IDCompositionShadowEffect,
            amount: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionFilterEffect.MethodMixin(T);
            pub inline fn setStandardDeviation(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionShadowEffect.VTable, @ptrCast(self.vtable)).SetStandardDeviation(@as(*const IDCompositionShadowEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setStandardDeviation1(self: *const T, amount_: f32) HRESULT {
                return @as(*const IDCompositionShadowEffect.VTable, @ptrCast(self.vtable)).SetStandardDeviation(@as(*const IDCompositionShadowEffect, @ptrCast(self)), amount_);
            }
            pub inline fn setColor(self: *const T, color_: ?*const D2D_VECTOR_4F) HRESULT {
                return @as(*const IDCompositionShadowEffect.VTable, @ptrCast(self.vtable)).SetColor(@as(*const IDCompositionShadowEffect, @ptrCast(self)), color_);
            }
            pub inline fn setRed(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionShadowEffect.VTable, @ptrCast(self.vtable)).SetRed(@as(*const IDCompositionShadowEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setRed1(self: *const T, amount_: f32) HRESULT {
                return @as(*const IDCompositionShadowEffect.VTable, @ptrCast(self.vtable)).SetRed(@as(*const IDCompositionShadowEffect, @ptrCast(self)), amount_);
            }
            pub inline fn setGreen(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionShadowEffect.VTable, @ptrCast(self.vtable)).SetGreen(@as(*const IDCompositionShadowEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setGreen1(self: *const T, amount_: f32) HRESULT {
                return @as(*const IDCompositionShadowEffect.VTable, @ptrCast(self.vtable)).SetGreen(@as(*const IDCompositionShadowEffect, @ptrCast(self)), amount_);
            }
            pub inline fn setBlue(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionShadowEffect.VTable, @ptrCast(self.vtable)).SetBlue(@as(*const IDCompositionShadowEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setBlue1(self: *const T, amount_: f32) HRESULT {
                return @as(*const IDCompositionShadowEffect.VTable, @ptrCast(self.vtable)).SetBlue(@as(*const IDCompositionShadowEffect, @ptrCast(self)), amount_);
            }
            pub inline fn setAlpha(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionShadowEffect.VTable, @ptrCast(self.vtable)).SetAlpha(@as(*const IDCompositionShadowEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setAlpha1(self: *const T, amount_: f32) HRESULT {
                return @as(*const IDCompositionShadowEffect.VTable, @ptrCast(self.vtable)).SetAlpha(@as(*const IDCompositionShadowEffect, @ptrCast(self)), amount_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDCompositionHueRotationEffect_Value = Guid.initString("6db9f920-0770-4781-b0c6-381912f9d167");
pub const IID_IDCompositionHueRotationEffect = &IID_IDCompositionHueRotationEffect_Value;
pub const IDCompositionHueRotationEffect = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetAngle: *const fn (
            self: *const IDCompositionHueRotationEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAngle1: *const fn (
            self: *const IDCompositionHueRotationEffect,
            amount_degrees: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionFilterEffect.MethodMixin(T);
            pub inline fn setAngle(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionHueRotationEffect.VTable, @ptrCast(self.vtable)).SetAngle(@as(*const IDCompositionHueRotationEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setAngle1(self: *const T, amount_degrees_: f32) HRESULT {
                return @as(*const IDCompositionHueRotationEffect.VTable, @ptrCast(self.vtable)).SetAngle(@as(*const IDCompositionHueRotationEffect, @ptrCast(self)), amount_degrees_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDCompositionSaturationEffect_Value = Guid.initString("a08debda-3258-4fa4-9f16-9174d3fe93b1");
pub const IID_IDCompositionSaturationEffect = &IID_IDCompositionSaturationEffect_Value;
pub const IDCompositionSaturationEffect = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetSaturation: *const fn (
            self: *const IDCompositionSaturationEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSaturation1: *const fn (
            self: *const IDCompositionSaturationEffect,
            ratio: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionFilterEffect.MethodMixin(T);
            pub inline fn setSaturation(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionSaturationEffect.VTable, @ptrCast(self.vtable)).SetSaturation(@as(*const IDCompositionSaturationEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setSaturation1(self: *const T, ratio_: f32) HRESULT {
                return @as(*const IDCompositionSaturationEffect.VTable, @ptrCast(self.vtable)).SetSaturation(@as(*const IDCompositionSaturationEffect, @ptrCast(self)), ratio_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDCompositionTurbulenceEffect_Value = Guid.initString("a6a55bda-c09c-49f3-9193-a41922c89715");
pub const IID_IDCompositionTurbulenceEffect = &IID_IDCompositionTurbulenceEffect_Value;
pub const IDCompositionTurbulenceEffect = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetOffset: *const fn (
            self: *const IDCompositionTurbulenceEffect,
            offset: ?*const D2D_VECTOR_2F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBaseFrequency: *const fn (
            self: *const IDCompositionTurbulenceEffect,
            frequency: ?*const D2D_VECTOR_2F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSize: *const fn (
            self: *const IDCompositionTurbulenceEffect,
            size: ?*const D2D_VECTOR_2F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNumOctaves: *const fn (
            self: *const IDCompositionTurbulenceEffect,
            num_octaves: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSeed: *const fn (
            self: *const IDCompositionTurbulenceEffect,
            seed: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNoise: *const fn (
            self: *const IDCompositionTurbulenceEffect,
            noise: D2D1_TURBULENCE_NOISE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStitchable: *const fn (
            self: *const IDCompositionTurbulenceEffect,
            stitchable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionFilterEffect.MethodMixin(T);
            pub inline fn setOffset(self: *const T, offset_: ?*const D2D_VECTOR_2F) HRESULT {
                return @as(*const IDCompositionTurbulenceEffect.VTable, @ptrCast(self.vtable)).SetOffset(@as(*const IDCompositionTurbulenceEffect, @ptrCast(self)), offset_);
            }
            pub inline fn setBaseFrequency(self: *const T, frequency_: ?*const D2D_VECTOR_2F) HRESULT {
                return @as(*const IDCompositionTurbulenceEffect.VTable, @ptrCast(self.vtable)).SetBaseFrequency(@as(*const IDCompositionTurbulenceEffect, @ptrCast(self)), frequency_);
            }
            pub inline fn setSize(self: *const T, size_: ?*const D2D_VECTOR_2F) HRESULT {
                return @as(*const IDCompositionTurbulenceEffect.VTable, @ptrCast(self.vtable)).SetSize(@as(*const IDCompositionTurbulenceEffect, @ptrCast(self)), size_);
            }
            pub inline fn setNumOctaves(self: *const T, num_octaves_: u32) HRESULT {
                return @as(*const IDCompositionTurbulenceEffect.VTable, @ptrCast(self.vtable)).SetNumOctaves(@as(*const IDCompositionTurbulenceEffect, @ptrCast(self)), num_octaves_);
            }
            pub inline fn setSeed(self: *const T, seed_: u32) HRESULT {
                return @as(*const IDCompositionTurbulenceEffect.VTable, @ptrCast(self.vtable)).SetSeed(@as(*const IDCompositionTurbulenceEffect, @ptrCast(self)), seed_);
            }
            pub inline fn setNoise(self: *const T, noise_: D2D1_TURBULENCE_NOISE) HRESULT {
                return @as(*const IDCompositionTurbulenceEffect.VTable, @ptrCast(self.vtable)).SetNoise(@as(*const IDCompositionTurbulenceEffect, @ptrCast(self)), noise_);
            }
            pub inline fn setStitchable(self: *const T, stitchable_: BOOL) HRESULT {
                return @as(*const IDCompositionTurbulenceEffect.VTable, @ptrCast(self.vtable)).SetStitchable(@as(*const IDCompositionTurbulenceEffect, @ptrCast(self)), stitchable_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDCompositionLinearTransferEffect_Value = Guid.initString("4305ee5b-c4a0-4c88-9385-67124e017683");
pub const IID_IDCompositionLinearTransferEffect = &IID_IDCompositionLinearTransferEffect_Value;
pub const IDCompositionLinearTransferEffect = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetRedYIntercept: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRedYIntercept1: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            red_y_intercept: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRedSlope: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRedSlope1: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            red_slope: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRedDisable: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            red_disable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreenYIntercept: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreenYIntercept1: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            green_y_intercept: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreenSlope: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreenSlope1: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            green_slope: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreenDisable: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            green_disable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlueYIntercept: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlueYIntercept1: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            blue_y_intercept: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlueSlope: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlueSlope1: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            blue_slope: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlueDisable: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            blue_disable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlphaYIntercept: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlphaYIntercept1: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            alpha_y_intercept: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlphaSlope: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlphaSlope1: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            alpha_slope: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlphaDisable: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            alpha_disable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClampOutput: *const fn (
            self: *const IDCompositionLinearTransferEffect,
            clamp_output: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionFilterEffect.MethodMixin(T);
            pub inline fn setRedYIntercept(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetRedYIntercept(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setRedYIntercept1(self: *const T, red_y_intercept_: f32) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetRedYIntercept(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), red_y_intercept_);
            }
            pub inline fn setRedSlope(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetRedSlope(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setRedSlope1(self: *const T, red_slope_: f32) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetRedSlope(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), red_slope_);
            }
            pub inline fn setRedDisable(self: *const T, red_disable_: BOOL) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetRedDisable(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), red_disable_);
            }
            pub inline fn setGreenYIntercept(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetGreenYIntercept(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setGreenYIntercept1(self: *const T, green_y_intercept_: f32) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetGreenYIntercept(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), green_y_intercept_);
            }
            pub inline fn setGreenSlope(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetGreenSlope(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setGreenSlope1(self: *const T, green_slope_: f32) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetGreenSlope(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), green_slope_);
            }
            pub inline fn setGreenDisable(self: *const T, green_disable_: BOOL) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetGreenDisable(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), green_disable_);
            }
            pub inline fn setBlueYIntercept(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetBlueYIntercept(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setBlueYIntercept1(self: *const T, blue_y_intercept_: f32) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetBlueYIntercept(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), blue_y_intercept_);
            }
            pub inline fn setBlueSlope(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetBlueSlope(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setBlueSlope1(self: *const T, blue_slope_: f32) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetBlueSlope(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), blue_slope_);
            }
            pub inline fn setBlueDisable(self: *const T, blue_disable_: BOOL) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetBlueDisable(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), blue_disable_);
            }
            pub inline fn setAlphaYIntercept(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetAlphaYIntercept(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setAlphaYIntercept1(self: *const T, alpha_y_intercept_: f32) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetAlphaYIntercept(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), alpha_y_intercept_);
            }
            pub inline fn setAlphaSlope(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetAlphaSlope(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setAlphaSlope1(self: *const T, alpha_slope_: f32) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetAlphaSlope(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), alpha_slope_);
            }
            pub inline fn setAlphaDisable(self: *const T, alpha_disable_: BOOL) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetAlphaDisable(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), alpha_disable_);
            }
            pub inline fn setClampOutput(self: *const T, clamp_output_: BOOL) HRESULT {
                return @as(*const IDCompositionLinearTransferEffect.VTable, @ptrCast(self.vtable)).SetClampOutput(@as(*const IDCompositionLinearTransferEffect, @ptrCast(self)), clamp_output_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDCompositionTableTransferEffect_Value = Guid.initString("9b7e82e2-69c5-4eb4-a5f5-a7033f5132cd");
pub const IID_IDCompositionTableTransferEffect = &IID_IDCompositionTableTransferEffect_Value;
pub const IDCompositionTableTransferEffect = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetRedTable: *const fn (
            self: *const IDCompositionTableTransferEffect,
            table_values: [*]const f32,
            count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreenTable: *const fn (
            self: *const IDCompositionTableTransferEffect,
            table_values: [*]const f32,
            count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlueTable: *const fn (
            self: *const IDCompositionTableTransferEffect,
            table_values: [*]const f32,
            count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlphaTable: *const fn (
            self: *const IDCompositionTableTransferEffect,
            table_values: [*]const f32,
            count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRedDisable: *const fn (
            self: *const IDCompositionTableTransferEffect,
            red_disable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreenDisable: *const fn (
            self: *const IDCompositionTableTransferEffect,
            green_disable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlueDisable: *const fn (
            self: *const IDCompositionTableTransferEffect,
            blue_disable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlphaDisable: *const fn (
            self: *const IDCompositionTableTransferEffect,
            alpha_disable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClampOutput: *const fn (
            self: *const IDCompositionTableTransferEffect,
            clamp_output: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRedTableValue: *const fn (
            self: *const IDCompositionTableTransferEffect,
            index: u32,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRedTableValue1: *const fn (
            self: *const IDCompositionTableTransferEffect,
            index: u32,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreenTableValue: *const fn (
            self: *const IDCompositionTableTransferEffect,
            index: u32,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGreenTableValue1: *const fn (
            self: *const IDCompositionTableTransferEffect,
            index: u32,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlueTableValue: *const fn (
            self: *const IDCompositionTableTransferEffect,
            index: u32,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBlueTableValue1: *const fn (
            self: *const IDCompositionTableTransferEffect,
            index: u32,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlphaTableValue: *const fn (
            self: *const IDCompositionTableTransferEffect,
            index: u32,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAlphaTableValue1: *const fn (
            self: *const IDCompositionTableTransferEffect,
            index: u32,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionFilterEffect.MethodMixin(T);
            pub inline fn setRedTable(self: *const T, table_values_: [*]const f32, count_: u32) HRESULT {
                return @as(*const IDCompositionTableTransferEffect.VTable, @ptrCast(self.vtable)).SetRedTable(@as(*const IDCompositionTableTransferEffect, @ptrCast(self)), table_values_, count_);
            }
            pub inline fn setGreenTable(self: *const T, table_values_: [*]const f32, count_: u32) HRESULT {
                return @as(*const IDCompositionTableTransferEffect.VTable, @ptrCast(self.vtable)).SetGreenTable(@as(*const IDCompositionTableTransferEffect, @ptrCast(self)), table_values_, count_);
            }
            pub inline fn setBlueTable(self: *const T, table_values_: [*]const f32, count_: u32) HRESULT {
                return @as(*const IDCompositionTableTransferEffect.VTable, @ptrCast(self.vtable)).SetBlueTable(@as(*const IDCompositionTableTransferEffect, @ptrCast(self)), table_values_, count_);
            }
            pub inline fn setAlphaTable(self: *const T, table_values_: [*]const f32, count_: u32) HRESULT {
                return @as(*const IDCompositionTableTransferEffect.VTable, @ptrCast(self.vtable)).SetAlphaTable(@as(*const IDCompositionTableTransferEffect, @ptrCast(self)), table_values_, count_);
            }
            pub inline fn setRedDisable(self: *const T, red_disable_: BOOL) HRESULT {
                return @as(*const IDCompositionTableTransferEffect.VTable, @ptrCast(self.vtable)).SetRedDisable(@as(*const IDCompositionTableTransferEffect, @ptrCast(self)), red_disable_);
            }
            pub inline fn setGreenDisable(self: *const T, green_disable_: BOOL) HRESULT {
                return @as(*const IDCompositionTableTransferEffect.VTable, @ptrCast(self.vtable)).SetGreenDisable(@as(*const IDCompositionTableTransferEffect, @ptrCast(self)), green_disable_);
            }
            pub inline fn setBlueDisable(self: *const T, blue_disable_: BOOL) HRESULT {
                return @as(*const IDCompositionTableTransferEffect.VTable, @ptrCast(self.vtable)).SetBlueDisable(@as(*const IDCompositionTableTransferEffect, @ptrCast(self)), blue_disable_);
            }
            pub inline fn setAlphaDisable(self: *const T, alpha_disable_: BOOL) HRESULT {
                return @as(*const IDCompositionTableTransferEffect.VTable, @ptrCast(self.vtable)).SetAlphaDisable(@as(*const IDCompositionTableTransferEffect, @ptrCast(self)), alpha_disable_);
            }
            pub inline fn setClampOutput(self: *const T, clamp_output_: BOOL) HRESULT {
                return @as(*const IDCompositionTableTransferEffect.VTable, @ptrCast(self.vtable)).SetClampOutput(@as(*const IDCompositionTableTransferEffect, @ptrCast(self)), clamp_output_);
            }
            pub inline fn setRedTableValue(self: *const T, index_: u32, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionTableTransferEffect.VTable, @ptrCast(self.vtable)).SetRedTableValue(@as(*const IDCompositionTableTransferEffect, @ptrCast(self)), index_, animation_);
            }
            pub inline fn setRedTableValue1(self: *const T, index_: u32, value_: f32) HRESULT {
                return @as(*const IDCompositionTableTransferEffect.VTable, @ptrCast(self.vtable)).SetRedTableValue(@as(*const IDCompositionTableTransferEffect, @ptrCast(self)), index_, value_);
            }
            pub inline fn setGreenTableValue(self: *const T, index_: u32, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionTableTransferEffect.VTable, @ptrCast(self.vtable)).SetGreenTableValue(@as(*const IDCompositionTableTransferEffect, @ptrCast(self)), index_, animation_);
            }
            pub inline fn setGreenTableValue1(self: *const T, index_: u32, value_: f32) HRESULT {
                return @as(*const IDCompositionTableTransferEffect.VTable, @ptrCast(self.vtable)).SetGreenTableValue(@as(*const IDCompositionTableTransferEffect, @ptrCast(self)), index_, value_);
            }
            pub inline fn setBlueTableValue(self: *const T, index_: u32, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionTableTransferEffect.VTable, @ptrCast(self.vtable)).SetBlueTableValue(@as(*const IDCompositionTableTransferEffect, @ptrCast(self)), index_, animation_);
            }
            pub inline fn setBlueTableValue1(self: *const T, index_: u32, value_: f32) HRESULT {
                return @as(*const IDCompositionTableTransferEffect.VTable, @ptrCast(self.vtable)).SetBlueTableValue(@as(*const IDCompositionTableTransferEffect, @ptrCast(self)), index_, value_);
            }
            pub inline fn setAlphaTableValue(self: *const T, index_: u32, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionTableTransferEffect.VTable, @ptrCast(self.vtable)).SetAlphaTableValue(@as(*const IDCompositionTableTransferEffect, @ptrCast(self)), index_, animation_);
            }
            pub inline fn setAlphaTableValue1(self: *const T, index_: u32, value_: f32) HRESULT {
                return @as(*const IDCompositionTableTransferEffect.VTable, @ptrCast(self.vtable)).SetAlphaTableValue(@as(*const IDCompositionTableTransferEffect, @ptrCast(self)), index_, value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDCompositionCompositeEffect_Value = Guid.initString("576616c0-a231-494d-a38d-00fd5ec4db46");
pub const IID_IDCompositionCompositeEffect = &IID_IDCompositionCompositeEffect_Value;
pub const IDCompositionCompositeEffect = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetMode: *const fn (
            self: *const IDCompositionCompositeEffect,
            mode: D2D1_COMPOSITE_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionFilterEffect.MethodMixin(T);
            pub inline fn setMode(self: *const T, mode_: D2D1_COMPOSITE_MODE) HRESULT {
                return @as(*const IDCompositionCompositeEffect.VTable, @ptrCast(self.vtable)).SetMode(@as(*const IDCompositionCompositeEffect, @ptrCast(self)), mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDCompositionBlendEffect_Value = Guid.initString("33ecdc0a-578a-4a11-9c14-0cb90517f9c5");
pub const IID_IDCompositionBlendEffect = &IID_IDCompositionBlendEffect_Value;
pub const IDCompositionBlendEffect = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetMode: *const fn (
            self: *const IDCompositionBlendEffect,
            mode: D2D1_BLEND_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionFilterEffect.MethodMixin(T);
            pub inline fn setMode(self: *const T, mode_: D2D1_BLEND_MODE) HRESULT {
                return @as(*const IDCompositionBlendEffect.VTable, @ptrCast(self.vtable)).SetMode(@as(*const IDCompositionBlendEffect, @ptrCast(self)), mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDCompositionArithmeticCompositeEffect_Value = Guid.initString("3b67dfa8-e3dd-4e61-b640-46c2f3d739dc");
pub const IID_IDCompositionArithmeticCompositeEffect = &IID_IDCompositionArithmeticCompositeEffect_Value;
pub const IDCompositionArithmeticCompositeEffect = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetCoefficients: *const fn (
            self: *const IDCompositionArithmeticCompositeEffect,
            coefficients: ?*const D2D_VECTOR_4F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClampOutput: *const fn (
            self: *const IDCompositionArithmeticCompositeEffect,
            clampoutput: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCoefficient1: *const fn (
            self: *const IDCompositionArithmeticCompositeEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCoefficient11: *const fn (
            self: *const IDCompositionArithmeticCompositeEffect,
            coeffcient1: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCoefficient2: *const fn (
            self: *const IDCompositionArithmeticCompositeEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCoefficient21: *const fn (
            self: *const IDCompositionArithmeticCompositeEffect,
            coefficient2: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCoefficient3: *const fn (
            self: *const IDCompositionArithmeticCompositeEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCoefficient31: *const fn (
            self: *const IDCompositionArithmeticCompositeEffect,
            coefficient3: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCoefficient4: *const fn (
            self: *const IDCompositionArithmeticCompositeEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCoefficient41: *const fn (
            self: *const IDCompositionArithmeticCompositeEffect,
            coefficient4: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionFilterEffect.MethodMixin(T);
            pub inline fn setCoefficients(self: *const T, coefficients_: ?*const D2D_VECTOR_4F) HRESULT {
                return @as(*const IDCompositionArithmeticCompositeEffect.VTable, @ptrCast(self.vtable)).SetCoefficients(@as(*const IDCompositionArithmeticCompositeEffect, @ptrCast(self)), coefficients_);
            }
            pub inline fn setClampOutput(self: *const T, clampoutput_: BOOL) HRESULT {
                return @as(*const IDCompositionArithmeticCompositeEffect.VTable, @ptrCast(self.vtable)).SetClampOutput(@as(*const IDCompositionArithmeticCompositeEffect, @ptrCast(self)), clampoutput_);
            }
            pub inline fn setCoefficient1(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionArithmeticCompositeEffect.VTable, @ptrCast(self.vtable)).SetCoefficient1(@as(*const IDCompositionArithmeticCompositeEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setCoefficient11(self: *const T, coeffcient1_: f32) HRESULT {
                return @as(*const IDCompositionArithmeticCompositeEffect.VTable, @ptrCast(self.vtable)).SetCoefficient1(@as(*const IDCompositionArithmeticCompositeEffect, @ptrCast(self)), coeffcient1_);
            }
            pub inline fn setCoefficient2(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionArithmeticCompositeEffect.VTable, @ptrCast(self.vtable)).SetCoefficient2(@as(*const IDCompositionArithmeticCompositeEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setCoefficient21(self: *const T, coefficient2_: f32) HRESULT {
                return @as(*const IDCompositionArithmeticCompositeEffect.VTable, @ptrCast(self.vtable)).SetCoefficient2(@as(*const IDCompositionArithmeticCompositeEffect, @ptrCast(self)), coefficient2_);
            }
            pub inline fn setCoefficient3(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionArithmeticCompositeEffect.VTable, @ptrCast(self.vtable)).SetCoefficient3(@as(*const IDCompositionArithmeticCompositeEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setCoefficient31(self: *const T, coefficient3_: f32) HRESULT {
                return @as(*const IDCompositionArithmeticCompositeEffect.VTable, @ptrCast(self.vtable)).SetCoefficient3(@as(*const IDCompositionArithmeticCompositeEffect, @ptrCast(self)), coefficient3_);
            }
            pub inline fn setCoefficient4(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionArithmeticCompositeEffect.VTable, @ptrCast(self.vtable)).SetCoefficient4(@as(*const IDCompositionArithmeticCompositeEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setCoefficient41(self: *const T, coefficient4_: f32) HRESULT {
                return @as(*const IDCompositionArithmeticCompositeEffect.VTable, @ptrCast(self.vtable)).SetCoefficient4(@as(*const IDCompositionArithmeticCompositeEffect, @ptrCast(self)), coefficient4_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDCompositionAffineTransform2DEffect_Value = Guid.initString("0b74b9e8-cdd6-492f-bbbc-5ed32157026d");
pub const IID_IDCompositionAffineTransform2DEffect = &IID_IDCompositionAffineTransform2DEffect_Value;
pub const IDCompositionAffineTransform2DEffect = extern struct {
    pub const VTable = extern struct {
        base: IDCompositionFilterEffect.VTable,
        SetInterpolationMode: *const fn (
            self: *const IDCompositionAffineTransform2DEffect,
            interpolation_mode: D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBorderMode: *const fn (
            self: *const IDCompositionAffineTransform2DEffect,
            border_mode: D2D1_BORDER_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformMatrix: *const fn (
            self: *const IDCompositionAffineTransform2DEffect,
            transform_matrix: ?*const D2D_MATRIX_3X2_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformMatrixElement: *const fn (
            self: *const IDCompositionAffineTransform2DEffect,
            row: i32,
            column: i32,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformMatrixElement1: *const fn (
            self: *const IDCompositionAffineTransform2DEffect,
            row: i32,
            column: i32,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSharpness: *const fn (
            self: *const IDCompositionAffineTransform2DEffect,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSharpness1: *const fn (
            self: *const IDCompositionAffineTransform2DEffect,
            sharpness: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDCompositionFilterEffect.MethodMixin(T);
            pub inline fn setInterpolationMode(self: *const T, interpolation_mode_: D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE) HRESULT {
                return @as(*const IDCompositionAffineTransform2DEffect.VTable, @ptrCast(self.vtable)).SetInterpolationMode(@as(*const IDCompositionAffineTransform2DEffect, @ptrCast(self)), interpolation_mode_);
            }
            pub inline fn setBorderMode(self: *const T, border_mode_: D2D1_BORDER_MODE) HRESULT {
                return @as(*const IDCompositionAffineTransform2DEffect.VTable, @ptrCast(self.vtable)).SetBorderMode(@as(*const IDCompositionAffineTransform2DEffect, @ptrCast(self)), border_mode_);
            }
            pub inline fn setTransformMatrix(self: *const T, transform_matrix_: ?*const D2D_MATRIX_3X2_F) HRESULT {
                return @as(*const IDCompositionAffineTransform2DEffect.VTable, @ptrCast(self.vtable)).SetTransformMatrix(@as(*const IDCompositionAffineTransform2DEffect, @ptrCast(self)), transform_matrix_);
            }
            pub inline fn setTransformMatrixElement(self: *const T, row_: i32, column_: i32, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionAffineTransform2DEffect.VTable, @ptrCast(self.vtable)).SetTransformMatrixElement(@as(*const IDCompositionAffineTransform2DEffect, @ptrCast(self)), row_, column_, animation_);
            }
            pub inline fn setTransformMatrixElement1(self: *const T, row_: i32, column_: i32, value_: f32) HRESULT {
                return @as(*const IDCompositionAffineTransform2DEffect.VTable, @ptrCast(self.vtable)).SetTransformMatrixElement(@as(*const IDCompositionAffineTransform2DEffect, @ptrCast(self)), row_, column_, value_);
            }
            pub inline fn setSharpness(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IDCompositionAffineTransform2DEffect.VTable, @ptrCast(self.vtable)).SetSharpness(@as(*const IDCompositionAffineTransform2DEffect, @ptrCast(self)), animation_);
            }
            pub inline fn setSharpness1(self: *const T, sharpness_: f32) HRESULT {
                return @as(*const IDCompositionAffineTransform2DEffect.VTable, @ptrCast(self.vtable)).SetSharpness(@as(*const IDCompositionAffineTransform2DEffect, @ptrCast(self)), sharpness_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DCompositionInkTrailPoint = extern struct {
    x: f32,
    y: f32,
    radius: f32,
};

const IID_IDCompositionDelegatedInkTrail_Value = Guid.initString("c2448e9b-547d-4057-8cf5-8144ede1c2da");
pub const IID_IDCompositionDelegatedInkTrail = &IID_IDCompositionDelegatedInkTrail_Value;
pub const IDCompositionDelegatedInkTrail = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddTrailPoints: *const fn (
            self: *const IDCompositionDelegatedInkTrail,
            ink_points: [*]const DCompositionInkTrailPoint,
            ink_points_count: u32,
            generation_id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTrailPointsWithPrediction: *const fn (
            self: *const IDCompositionDelegatedInkTrail,
            ink_points: [*]const DCompositionInkTrailPoint,
            ink_points_count: u32,
            predicted_ink_points: [*]const DCompositionInkTrailPoint,
            predicted_ink_points_count: u32,
            generation_id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveTrailPoints: *const fn (
            self: *const IDCompositionDelegatedInkTrail,
            generation_id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartNewTrail: *const fn (
            self: *const IDCompositionDelegatedInkTrail,
            color: ?*const D2D1_COLOR_F,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addTrailPoints(self: *const T, ink_points_: [*]const DCompositionInkTrailPoint, ink_points_count_: u32, generation_id_: ?*u32) HRESULT {
                return @as(*const IDCompositionDelegatedInkTrail.VTable, @ptrCast(self.vtable)).AddTrailPoints(@as(*const IDCompositionDelegatedInkTrail, @ptrCast(self)), ink_points_, ink_points_count_, generation_id_);
            }
            pub inline fn addTrailPointsWithPrediction(self: *const T, ink_points_: [*]const DCompositionInkTrailPoint, ink_points_count_: u32, predicted_ink_points_: [*]const DCompositionInkTrailPoint, predicted_ink_points_count_: u32, generation_id_: ?*u32) HRESULT {
                return @as(*const IDCompositionDelegatedInkTrail.VTable, @ptrCast(self.vtable)).AddTrailPointsWithPrediction(@as(*const IDCompositionDelegatedInkTrail, @ptrCast(self)), ink_points_, ink_points_count_, predicted_ink_points_, predicted_ink_points_count_, generation_id_);
            }
            pub inline fn removeTrailPoints(self: *const T, generation_id_: u32) HRESULT {
                return @as(*const IDCompositionDelegatedInkTrail.VTable, @ptrCast(self.vtable)).RemoveTrailPoints(@as(*const IDCompositionDelegatedInkTrail, @ptrCast(self)), generation_id_);
            }
            pub inline fn startNewTrail(self: *const T, color_: ?*const D2D1_COLOR_F) HRESULT {
                return @as(*const IDCompositionDelegatedInkTrail.VTable, @ptrCast(self.vtable)).StartNewTrail(@as(*const IDCompositionDelegatedInkTrail, @ptrCast(self)), color_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDCompositionInkTrailDevice_Value = Guid.initString("df0c7cec-cdeb-4d4a-b91c-721bf22f4e6c");
pub const IID_IDCompositionInkTrailDevice = &IID_IDCompositionInkTrailDevice_Value;
pub const IDCompositionInkTrailDevice = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateDelegatedInkTrail: *const fn (
            self: *const IDCompositionInkTrailDevice,
            ink_trail: ?*?*IDCompositionDelegatedInkTrail,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDelegatedInkTrailForSwapChain: *const fn (
            self: *const IDCompositionInkTrailDevice,
            swap_chain: ?*IUnknown,
            ink_trail: ?*?*IDCompositionDelegatedInkTrail,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createDelegatedInkTrail(self: *const T, ink_trail_: ?*?*IDCompositionDelegatedInkTrail) HRESULT {
                return @as(*const IDCompositionInkTrailDevice.VTable, @ptrCast(self.vtable)).CreateDelegatedInkTrail(@as(*const IDCompositionInkTrailDevice, @ptrCast(self)), ink_trail_);
            }
            pub inline fn createDelegatedInkTrailForSwapChain(self: *const T, swap_chain_: ?*IUnknown, ink_trail_: ?*?*IDCompositionDelegatedInkTrail) HRESULT {
                return @as(*const IDCompositionInkTrailDevice.VTable, @ptrCast(self.vtable)).CreateDelegatedInkTrailForSwapChain(@as(*const IDCompositionInkTrailDevice, @ptrCast(self)), swap_chain_, ink_trail_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (11)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows8.0'
pub extern "dcomp" fn DCompositionCreateDevice(
    dxgi_device: ?*IDXGIDevice,
    iid: ?*const Guid,
    dcomposition_device: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "dcomp" fn DCompositionCreateDevice2(
    rendering_device: ?*IUnknown,
    iid: ?*const Guid,
    dcomposition_device: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dcomp" fn DCompositionCreateDevice3(
    rendering_device: ?*IUnknown,
    iid: ?*const Guid,
    dcomposition_device: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "dcomp" fn DCompositionCreateSurfaceHandle(
    desired_access: u32,
    security_attributes: ?*SECURITY_ATTRIBUTES,
    surface_handle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dcomp" fn DCompositionAttachMouseWheelToHwnd(
    visual: ?*IDCompositionVisual,
    hwnd: ?HWND,
    enable: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dcomp" fn DCompositionAttachMouseDragToHwnd(
    visual: ?*IDCompositionVisual,
    hwnd: ?HWND,
    enable: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dcomp" fn DCompositionGetFrameId(
    frame_id_type: COMPOSITION_FRAME_ID_TYPE,
    frame_id: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dcomp" fn DCompositionGetStatistics(
    frame_id: u64,
    frame_stats: ?*COMPOSITION_FRAME_STATS,
    target_id_count: u32,
    target_ids: ?*COMPOSITION_TARGET_ID,
    actual_target_id_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dcomp" fn DCompositionGetTargetStatistics(
    frame_id: u64,
    target_id: ?*const COMPOSITION_TARGET_ID,
    target_stats: ?*COMPOSITION_TARGET_STATS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dcomp" fn DCompositionBoostCompositorClock(
    enable: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dcomp" fn DCompositionWaitForCompositorClock(
    count: u32,
    handles: ?[*]const ?HANDLE,
    timeout_in_ms: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (29)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE = @import("../graphics/direct2d/common.zig").D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE;
const D2D1_BLEND_MODE = @import("../graphics/direct2d/common.zig").D2D1_BLEND_MODE;
const D2D1_BORDER_MODE = @import("../graphics/direct2d/common.zig").D2D1_BORDER_MODE;
const D2D1_COLOR_F = @import("../graphics/direct2d/common.zig").D2D1_COLOR_F;
const D2D1_COLORMATRIX_ALPHA_MODE = @import("../graphics/direct2d/common.zig").D2D1_COLORMATRIX_ALPHA_MODE;
const D2D1_COMPOSITE_MODE = @import("../graphics/direct2d/common.zig").D2D1_COMPOSITE_MODE;
const D2D1_TURBULENCE_NOISE = @import("../graphics/direct2d/common.zig").D2D1_TURBULENCE_NOISE;
const D2D_MATRIX_3X2_F = @import("../graphics/direct2d/common.zig").D2D_MATRIX_3X2_F;
const D2D_MATRIX_4X4_F = @import("../graphics/direct2d/common.zig").D2D_MATRIX_4X4_F;
const D2D_MATRIX_5X4_F = @import("../graphics/direct2d/common.zig").D2D_MATRIX_5X4_F;
const D2D_RECT_F = @import("../graphics/direct2d/common.zig").D2D_RECT_F;
const D2D_VECTOR_2F = @import("../graphics/direct2d/common.zig").D2D_VECTOR_2F;
const D2D_VECTOR_4F = @import("../graphics/direct2d/common.zig").D2D_VECTOR_4F;
const D3DMATRIX = @import("../graphics/direct3d.zig").D3DMATRIX;
const DXGI_ALPHA_MODE = @import("../graphics/dxgi/common.zig").DXGI_ALPHA_MODE;
const DXGI_FORMAT = @import("../graphics/dxgi/common.zig").DXGI_FORMAT;
const DXGI_RATIONAL = @import("../graphics/dxgi/common.zig").DXGI_RATIONAL;
const HANDLE = @import("../foundation.zig").HANDLE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IDXGIDevice = @import("../graphics/dxgi.zig").IDXGIDevice;
const IUnknown = @import("../system/com.zig").IUnknown;
const LARGE_INTEGER = @import("../foundation.zig").LARGE_INTEGER;
const LUID = @import("../foundation.zig").LUID;
const POINT = @import("../foundation.zig").POINT;
const RECT = @import("../foundation.zig").RECT;
const SECURITY_ATTRIBUTES = @import("../security.zig").SECURITY_ATTRIBUTES;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
