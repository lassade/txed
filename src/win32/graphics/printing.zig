//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (1394)
//--------------------------------------------------------------------------------
pub const USB_PRINTER_INTERFACE_CLASSIC = @as(u32, 1);
pub const USB_PRINTER_INTERFACE_IPP = @as(u32, 2);
pub const USB_PRINTER_INTERFACE_DUAL = @as(u32, 3);
pub const USBPRINT_IOCTL_INDEX = @as(u32, 0);
pub const IOCTL_USBPRINT_GET_LPT_STATUS = @as(u32, 2228272);
pub const IOCTL_USBPRINT_GET_1284_ID = @as(u32, 2228276);
pub const IOCTL_USBPRINT_VENDOR_SET_COMMAND = @as(u32, 2228280);
pub const IOCTL_USBPRINT_VENDOR_GET_COMMAND = @as(u32, 2228284);
pub const IOCTL_USBPRINT_SOFT_RESET = @as(u32, 2228288);
pub const IOCTL_USBPRINT_GET_PROTOCOL = @as(u32, 2228292);
pub const IOCTL_USBPRINT_SET_PROTOCOL = @as(u32, 2228296);
pub const IOCTL_USBPRINT_GET_INTERFACE_TYPE = @as(u32, 2228300);
pub const IOCTL_USBPRINT_SET_PORT_NUMBER = @as(u32, 2228304);
pub const IOCTL_USBPRINT_ADD_MSIPP_COMPAT_ID = @as(u32, 2228308);
pub const IOCTL_USBPRINT_SET_DEVICE_ID = @as(u32, 2228312);
pub const IOCTL_USBPRINT_ADD_CHILD_DEVICE = @as(u32, 2228316);
pub const IOCTL_USBPRINT_CYCLE_PORT = @as(u32, 2228320);
pub const TVOT_2STATES = @as(u32, 0);
pub const TVOT_3STATES = @as(u32, 1);
pub const TVOT_UDARROW = @as(u32, 2);
pub const TVOT_TRACKBAR = @as(u32, 3);
pub const TVOT_SCROLLBAR = @as(u32, 4);
pub const TVOT_LISTBOX = @as(u32, 5);
pub const TVOT_COMBOBOX = @as(u32, 6);
pub const TVOT_EDITBOX = @as(u32, 7);
pub const TVOT_PUSHBUTTON = @as(u32, 8);
pub const TVOT_CHKBOX = @as(u32, 9);
pub const TVOT_NSTATES_EX = @as(u32, 10);
pub const CHKBOXS_FALSE_TRUE = @as(u32, 0);
pub const CHKBOXS_NO_YES = @as(u32, 1);
pub const CHKBOXS_OFF_ON = @as(u32, 2);
pub const CHKBOXS_FALSE_PDATA = @as(u32, 3);
pub const CHKBOXS_NO_PDATA = @as(u32, 4);
pub const CHKBOXS_OFF_PDATA = @as(u32, 5);
pub const CHKBOXS_NONE_PDATA = @as(u32, 6);
pub const PUSHBUTTON_TYPE_DLGPROC = @as(u32, 0);
pub const PUSHBUTTON_TYPE_CALLBACK = @as(u32, 1);
pub const PUSHBUTTON_TYPE_HTCLRADJ = @as(u32, 2);
pub const PUSHBUTTON_TYPE_HTSETUP = @as(u32, 3);
pub const MAX_RES_STR_CHARS = @as(u32, 160);
pub const OPTPF_HIDE = @as(u32, 1);
pub const OPTPF_DISABLED = @as(u32, 2);
pub const OPTPF_ICONID_AS_HICON = @as(u32, 4);
pub const OPTPF_OVERLAY_WARNING_ICON = @as(u32, 8);
pub const OPTPF_OVERLAY_STOP_ICON = @as(u32, 16);
pub const OPTPF_OVERLAY_NO_ICON = @as(u32, 32);
pub const OPTPF_USE_HDLGTEMPLATE = @as(u32, 64);
pub const OPTPF_MASK = @as(u32, 127);
pub const OPTCF_HIDE = @as(u32, 1);
pub const OPTCF_MASK = @as(u32, 1);
pub const OPTTF_TYPE_DISABLED = @as(u32, 1);
pub const OPTTF_NOSPACE_BEFORE_POSTFIX = @as(u32, 2);
pub const OPTTF_MASK = @as(u32, 3);
pub const OTS_LBCB_SORT = @as(u32, 1);
pub const OTS_LBCB_PROPPAGE_LBUSECB = @as(u32, 2);
pub const OTS_LBCB_PROPPAGE_CBUSELB = @as(u32, 4);
pub const OTS_LBCB_INCL_ITEM_NONE = @as(u32, 8);
pub const OTS_LBCB_NO_ICON16_IN_ITEM = @as(u32, 16);
pub const OTS_PUSH_INCL_SETUP_TITLE = @as(u32, 32);
pub const OTS_PUSH_NO_DOT_DOT_DOT = @as(u32, 64);
pub const OTS_PUSH_ENABLE_ALWAYS = @as(u32, 128);
pub const OTS_MASK = @as(u32, 255);
pub const EPF_PUSH_TYPE_DLGPROC = @as(u32, 1);
pub const EPF_INCL_SETUP_TITLE = @as(u32, 2);
pub const EPF_NO_DOT_DOT_DOT = @as(u32, 4);
pub const EPF_ICONID_AS_HICON = @as(u32, 8);
pub const EPF_OVERLAY_WARNING_ICON = @as(u32, 16);
pub const EPF_OVERLAY_STOP_ICON = @as(u32, 32);
pub const EPF_OVERLAY_NO_ICON = @as(u32, 64);
pub const EPF_USE_HDLGTEMPLATE = @as(u32, 128);
pub const EPF_MASK = @as(u32, 255);
pub const ECBF_CHECKNAME_AT_FRONT = @as(u32, 1);
pub const ECBF_CHECKNAME_ONLY_ENABLED = @as(u32, 2);
pub const ECBF_ICONID_AS_HICON = @as(u32, 4);
pub const ECBF_OVERLAY_WARNING_ICON = @as(u32, 8);
pub const ECBF_OVERLAY_ECBICON_IF_CHECKED = @as(u32, 16);
pub const ECBF_OVERLAY_STOP_ICON = @as(u32, 32);
pub const ECBF_OVERLAY_NO_ICON = @as(u32, 64);
pub const ECBF_CHECKNAME_ONLY = @as(u32, 128);
pub const ECBF_MASK = @as(u32, 255);
pub const OPTIF_COLLAPSE = @as(i32, 1);
pub const OPTIF_HIDE = @as(i32, 2);
pub const OPTIF_CALLBACK = @as(i32, 4);
pub const OPTIF_CHANGED = @as(i32, 8);
pub const OPTIF_CHANGEONCE = @as(i32, 16);
pub const OPTIF_DISABLED = @as(i32, 32);
pub const OPTIF_ECB_CHECKED = @as(i32, 64);
pub const OPTIF_EXT_HIDE = @as(i32, 128);
pub const OPTIF_EXT_DISABLED = @as(i32, 256);
pub const OPTIF_SEL_AS_HICON = @as(i32, 512);
pub const OPTIF_EXT_IS_EXTPUSH = @as(i32, 1024);
pub const OPTIF_NO_GROUPBOX_NAME = @as(i32, 2048);
pub const OPTIF_OVERLAY_WARNING_ICON = @as(i32, 4096);
pub const OPTIF_OVERLAY_STOP_ICON = @as(i32, 8192);
pub const OPTIF_OVERLAY_NO_ICON = @as(i32, 16384);
pub const OPTIF_INITIAL_TVITEM = @as(i32, 32768);
pub const OPTIF_HAS_POIEXT = @as(i32, 65536);
pub const OPTIF_MASK = @as(i32, 131071);
pub const DMPUB_NONE = @as(u32, 0);
pub const DMPUB_FIRST = @as(u32, 1);
pub const DMPUB_ORIENTATION = @as(u32, 1);
pub const DMPUB_SCALE = @as(u32, 2);
pub const DMPUB_COPIES_COLLATE = @as(u32, 3);
pub const DMPUB_DEFSOURCE = @as(u32, 4);
pub const DMPUB_PRINTQUALITY = @as(u32, 5);
pub const DMPUB_COLOR = @as(u32, 6);
pub const DMPUB_DUPLEX = @as(u32, 7);
pub const DMPUB_TTOPTION = @as(u32, 8);
pub const DMPUB_FORMNAME = @as(u32, 9);
pub const DMPUB_ICMMETHOD = @as(u32, 10);
pub const DMPUB_ICMINTENT = @as(u32, 11);
pub const DMPUB_MEDIATYPE = @as(u32, 12);
pub const DMPUB_DITHERTYPE = @as(u32, 13);
pub const DMPUB_OUTPUTBIN = @as(u32, 14);
pub const DMPUB_QUALITY = @as(u32, 15);
pub const DMPUB_NUP = @as(u32, 16);
pub const DMPUB_PAGEORDER = @as(u32, 17);
pub const DMPUB_NUP_DIRECTION = @as(u32, 18);
pub const DMPUB_MANUAL_DUPLEX = @as(u32, 19);
pub const DMPUB_STAPLE = @as(u32, 20);
pub const DMPUB_BOOKLET_EDGE = @as(u32, 21);
pub const DMPUB_LAST = @as(u32, 21);
pub const DMPUB_OEM_PAPER_ITEM = @as(u32, 97);
pub const DMPUB_OEM_GRAPHIC_ITEM = @as(u32, 98);
pub const DMPUB_OEM_ROOT_ITEM = @as(u32, 99);
pub const DMPUB_USER = @as(u32, 100);
pub const OIEXTF_ANSI_STRING = @as(u32, 1);
pub const CPSUICB_REASON_SEL_CHANGED = @as(u32, 0);
pub const CPSUICB_REASON_PUSHBUTTON = @as(u32, 1);
pub const CPSUICB_REASON_ECB_CHANGED = @as(u32, 2);
pub const CPSUICB_REASON_DLGPROC = @as(u32, 3);
pub const CPSUICB_REASON_UNDO_CHANGES = @as(u32, 4);
pub const CPSUICB_REASON_EXTPUSH = @as(u32, 5);
pub const CPSUICB_REASON_APPLYNOW = @as(u32, 6);
pub const CPSUICB_REASON_OPTITEM_SETFOCUS = @as(u32, 7);
pub const CPSUICB_REASON_ITEMS_REVERTED = @as(u32, 8);
pub const CPSUICB_REASON_ABOUT = @as(u32, 9);
pub const CPSUICB_REASON_SETACTIVE = @as(u32, 10);
pub const CPSUICB_REASON_KILLACTIVE = @as(u32, 11);
pub const CPSUICB_ACTION_NONE = @as(u32, 0);
pub const CPSUICB_ACTION_OPTIF_CHANGED = @as(u32, 1);
pub const CPSUICB_ACTION_REINIT_ITEMS = @as(u32, 2);
pub const CPSUICB_ACTION_NO_APPLY_EXIT = @as(u32, 3);
pub const CPSUICB_ACTION_ITEMS_APPLIED = @as(u32, 4);
pub const DP_STD_TREEVIEWPAGE = @as(u32, 65535);
pub const DP_STD_DOCPROPPAGE2 = @as(u32, 65534);
pub const DP_STD_DOCPROPPAGE1 = @as(u32, 65533);
pub const DP_STD_RESERVED_START = @as(u32, 65520);
pub const MAX_DLGPAGE_COUNT = @as(u32, 64);
pub const DPF_ICONID_AS_HICON = @as(u32, 1);
pub const DPF_USE_HDLGTEMPLATE = @as(u32, 2);
pub const CPSUIF_UPDATE_PERMISSION = @as(u32, 1);
pub const CPSUIF_ICONID_AS_HICON = @as(u32, 2);
pub const CPSUIF_ABOUT_CALLBACK = @as(u32, 4);
pub const CPSFUNC_ADD_HPROPSHEETPAGE = @as(u32, 0);
pub const CPSFUNC_ADD_PROPSHEETPAGEW = @as(u32, 1);
pub const CPSFUNC_ADD_PCOMPROPSHEETUIA = @as(u32, 2);
pub const CPSFUNC_ADD_PCOMPROPSHEETUIW = @as(u32, 3);
pub const CPSFUNC_ADD_PFNPROPSHEETUIA = @as(u32, 4);
pub const CPSFUNC_ADD_PFNPROPSHEETUIW = @as(u32, 5);
pub const CPSFUNC_DELETE_HCOMPROPSHEET = @as(u32, 6);
pub const CPSFUNC_SET_HSTARTPAGE = @as(u32, 7);
pub const CPSFUNC_GET_PAGECOUNT = @as(u32, 8);
pub const CPSFUNC_SET_RESULT = @as(u32, 9);
pub const CPSFUNC_GET_HPSUIPAGES = @as(u32, 10);
pub const CPSFUNC_LOAD_CPSUI_STRINGA = @as(u32, 11);
pub const CPSFUNC_LOAD_CPSUI_STRINGW = @as(u32, 12);
pub const CPSFUNC_LOAD_CPSUI_ICON = @as(u32, 13);
pub const CPSFUNC_GET_PFNPROPSHEETUI_ICON = @as(u32, 14);
pub const CPSFUNC_ADD_PROPSHEETPAGEA = @as(u32, 15);
pub const CPSFUNC_INSERT_PSUIPAGEA = @as(u32, 16);
pub const CPSFUNC_INSERT_PSUIPAGEW = @as(u32, 17);
pub const CPSFUNC_SET_PSUIPAGE_TITLEA = @as(u32, 18);
pub const CPSFUNC_SET_PSUIPAGE_TITLEW = @as(u32, 19);
pub const CPSFUNC_SET_PSUIPAGE_ICON = @as(u32, 20);
pub const CPSFUNC_SET_DATABLOCK = @as(u32, 21);
pub const CPSFUNC_QUERY_DATABLOCK = @as(u32, 22);
pub const CPSFUNC_SET_DMPUB_HIDEBITS = @as(u32, 23);
pub const CPSFUNC_IGNORE_CPSUI_PSN_APPLY = @as(u32, 24);
pub const CPSFUNC_DO_APPLY_CPSUI = @as(u32, 25);
pub const CPSFUNC_SET_FUSION_CONTEXT = @as(u32, 26);
pub const MAX_CPSFUNC_INDEX = @as(u32, 26);
pub const CPSFUNC_ADD_PCOMPROPSHEETUI = @as(u32, 3);
pub const CPSFUNC_ADD_PFNPROPSHEETUI = @as(u32, 5);
pub const CPSFUNC_LOAD_CPSUI_STRING = @as(u32, 12);
pub const CPSFUNC_ADD_PROPSHEETPAGE = @as(u32, 1);
pub const CPSFUNC_INSERT_PSUIPAGE = @as(u32, 17);
pub const CPSFUNC_SET_PSUIPAGE_TITLE = @as(u32, 19);
pub const SR_OWNER = @as(u32, 0);
pub const SR_OWNER_PARENT = @as(u32, 1);
pub const PSUIPAGEINSERT_GROUP_PARENT = @as(u32, 0);
pub const PSUIPAGEINSERT_PCOMPROPSHEETUI = @as(u32, 1);
pub const PSUIPAGEINSERT_PFNPROPSHEETUI = @as(u32, 2);
pub const PSUIPAGEINSERT_PROPSHEETPAGE = @as(u32, 3);
pub const PSUIPAGEINSERT_HPROPSHEETPAGE = @as(u32, 4);
pub const PSUIPAGEINSERT_DLL = @as(u32, 5);
pub const MAX_PSUIPAGEINSERT_INDEX = @as(u32, 5);
pub const INSPSUIPAGE_MODE_BEFORE = @as(u32, 0);
pub const INSPSUIPAGE_MODE_AFTER = @as(u32, 1);
pub const INSPSUIPAGE_MODE_FIRST_CHILD = @as(u32, 2);
pub const INSPSUIPAGE_MODE_LAST_CHILD = @as(u32, 3);
pub const INSPSUIPAGE_MODE_INDEX = @as(u32, 4);
pub const SSP_TVPAGE = @as(u32, 10000);
pub const SSP_STDPAGE1 = @as(u32, 10001);
pub const SSP_STDPAGE2 = @as(u32, 10002);
pub const APPLYCPSUI_NO_NEWDEF = @as(u32, 1);
pub const APPLYCPSUI_OK_CANCEL_BUTTON = @as(u32, 2);
pub const PROPSHEETUI_REASON_INIT = @as(u32, 0);
pub const PROPSHEETUI_REASON_GET_INFO_HEADER = @as(u32, 1);
pub const PROPSHEETUI_REASON_DESTROY = @as(u32, 2);
pub const PROPSHEETUI_REASON_SET_RESULT = @as(u32, 3);
pub const PROPSHEETUI_REASON_GET_ICON = @as(u32, 4);
pub const PROPSHEETUI_REASON_BEFORE_INIT = @as(u32, 5);
pub const MAX_PROPSHEETUI_REASON_INDEX = @as(u32, 5);
pub const PROPSHEETUI_INFO_VERSION = @as(u32, 256);
pub const PSUIINFO_UNICODE = @as(u32, 1);
pub const PSUIHDRF_OBSOLETE = @as(u32, 1);
pub const PSUIHDRF_NOAPPLYNOW = @as(u32, 2);
pub const PSUIHDRF_PROPTITLE = @as(u32, 4);
pub const PSUIHDRF_USEHICON = @as(u32, 8);
pub const PSUIHDRF_DEFTITLE = @as(u32, 16);
pub const PSUIHDRF_EXACT_PTITLE = @as(u32, 32);
pub const CPSUI_CANCEL = @as(u32, 0);
pub const CPSUI_OK = @as(u32, 1);
pub const CPSUI_RESTARTWINDOWS = @as(u32, 2);
pub const CPSUI_REBOOTSYSTEM = @as(u32, 3);
pub const ERR_CPSUI_GETLASTERROR = @as(i32, -1);
pub const ERR_CPSUI_ALLOCMEM_FAILED = @as(i32, -2);
pub const ERR_CPSUI_INVALID_PDATA = @as(i32, -3);
pub const ERR_CPSUI_INVALID_LPARAM = @as(i32, -4);
pub const ERR_CPSUI_NULL_HINST = @as(i32, -5);
pub const ERR_CPSUI_NULL_CALLERNAME = @as(i32, -6);
pub const ERR_CPSUI_NULL_OPTITEMNAME = @as(i32, -7);
pub const ERR_CPSUI_NO_PROPSHEETPAGE = @as(i32, -8);
pub const ERR_CPSUI_TOO_MANY_PROPSHEETPAGES = @as(i32, -9);
pub const ERR_CPSUI_CREATEPROPPAGE_FAILED = @as(i32, -10);
pub const ERR_CPSUI_MORE_THAN_ONE_TVPAGE = @as(i32, -11);
pub const ERR_CPSUI_MORE_THAN_ONE_STDPAGE = @as(i32, -12);
pub const ERR_CPSUI_INVALID_PDLGPAGE = @as(i32, -13);
pub const ERR_CPSUI_INVALID_DLGPAGE_CBSIZE = @as(i32, -14);
pub const ERR_CPSUI_TOO_MANY_DLGPAGES = @as(i32, -15);
pub const ERR_CPSUI_INVALID_DLGPAGEIDX = @as(i32, -16);
pub const ERR_CPSUI_SUBITEM_DIFF_DLGPAGEIDX = @as(i32, -17);
pub const ERR_CPSUI_NULL_POPTITEM = @as(i32, -18);
pub const ERR_CPSUI_INVALID_OPTITEM_CBSIZE = @as(i32, -19);
pub const ERR_CPSUI_INVALID_OPTTYPE_CBSIZE = @as(i32, -20);
pub const ERR_CPSUI_INVALID_OPTTYPE_COUNT = @as(i32, -21);
pub const ERR_CPSUI_NULL_POPTPARAM = @as(i32, -22);
pub const ERR_CPSUI_INVALID_OPTPARAM_CBSIZE = @as(i32, -23);
pub const ERR_CPSUI_INVALID_EDITBOX_PSEL = @as(i32, -24);
pub const ERR_CPSUI_INVALID_EDITBOX_BUF_SIZE = @as(i32, -25);
pub const ERR_CPSUI_INVALID_ECB_CBSIZE = @as(i32, -26);
pub const ERR_CPSUI_NULL_ECB_PTITLE = @as(i32, -27);
pub const ERR_CPSUI_NULL_ECB_PCHECKEDNAME = @as(i32, -28);
pub const ERR_CPSUI_INVALID_DMPUBID = @as(i32, -29);
pub const ERR_CPSUI_INVALID_DMPUB_TVOT = @as(i32, -30);
pub const ERR_CPSUI_CREATE_TRACKBAR_FAILED = @as(i32, -31);
pub const ERR_CPSUI_CREATE_UDARROW_FAILED = @as(i32, -32);
pub const ERR_CPSUI_CREATE_IMAGELIST_FAILED = @as(i32, -33);
pub const ERR_CPSUI_INVALID_TVOT_TYPE = @as(i32, -34);
pub const ERR_CPSUI_INVALID_LBCB_TYPE = @as(i32, -35);
pub const ERR_CPSUI_SUBITEM_DIFF_OPTIF_HIDE = @as(i32, -36);
pub const ERR_CPSUI_INVALID_PUSHBUTTON_TYPE = @as(i32, -38);
pub const ERR_CPSUI_INVALID_EXTPUSH_CBSIZE = @as(i32, -39);
pub const ERR_CPSUI_NULL_EXTPUSH_DLGPROC = @as(i32, -40);
pub const ERR_CPSUI_NO_EXTPUSH_DLGTEMPLATEID = @as(i32, -41);
pub const ERR_CPSUI_NULL_EXTPUSH_CALLBACK = @as(i32, -42);
pub const ERR_CPSUI_DMCOPIES_USE_EXTPUSH = @as(i32, -43);
pub const ERR_CPSUI_ZERO_OPTITEM = @as(i32, -44);
pub const ERR_CPSUI_FUNCTION_NOT_IMPLEMENTED = @as(i32, -9999);
pub const ERR_CPSUI_INTERNAL_ERROR = @as(i32, -10000);
pub const IDI_CPSUI_ICONID_FIRST = @as(u32, 64000);
pub const IDI_CPSUI_EMPTY = @as(u32, 64000);
pub const IDI_CPSUI_SEL_NONE = @as(u32, 64001);
pub const IDI_CPSUI_WARNING = @as(u32, 64002);
pub const IDI_CPSUI_NO = @as(u32, 64003);
pub const IDI_CPSUI_YES = @as(u32, 64004);
pub const IDI_CPSUI_FALSE = @as(u32, 64005);
pub const IDI_CPSUI_TRUE = @as(u32, 64006);
pub const IDI_CPSUI_OFF = @as(u32, 64007);
pub const IDI_CPSUI_ON = @as(u32, 64008);
pub const IDI_CPSUI_PAPER_OUTPUT = @as(u32, 64009);
pub const IDI_CPSUI_ENVELOPE = @as(u32, 64010);
pub const IDI_CPSUI_MEM = @as(u32, 64011);
pub const IDI_CPSUI_FONTCARTHDR = @as(u32, 64012);
pub const IDI_CPSUI_FONTCART = @as(u32, 64013);
pub const IDI_CPSUI_STAPLER_ON = @as(u32, 64014);
pub const IDI_CPSUI_STAPLER_OFF = @as(u32, 64015);
pub const IDI_CPSUI_HT_HOST = @as(u32, 64016);
pub const IDI_CPSUI_HT_DEVICE = @as(u32, 64017);
pub const IDI_CPSUI_TT_PRINTASGRAPHIC = @as(u32, 64018);
pub const IDI_CPSUI_TT_DOWNLOADSOFT = @as(u32, 64019);
pub const IDI_CPSUI_TT_DOWNLOADVECT = @as(u32, 64020);
pub const IDI_CPSUI_TT_SUBDEV = @as(u32, 64021);
pub const IDI_CPSUI_PORTRAIT = @as(u32, 64022);
pub const IDI_CPSUI_LANDSCAPE = @as(u32, 64023);
pub const IDI_CPSUI_ROT_LAND = @as(u32, 64024);
pub const IDI_CPSUI_AUTOSEL = @as(u32, 64025);
pub const IDI_CPSUI_PAPER_TRAY = @as(u32, 64026);
pub const IDI_CPSUI_PAPER_TRAY2 = @as(u32, 64027);
pub const IDI_CPSUI_PAPER_TRAY3 = @as(u32, 64028);
pub const IDI_CPSUI_TRANSPARENT = @as(u32, 64029);
pub const IDI_CPSUI_COLLATE = @as(u32, 64030);
pub const IDI_CPSUI_DUPLEX_NONE = @as(u32, 64031);
pub const IDI_CPSUI_DUPLEX_HORZ = @as(u32, 64032);
pub const IDI_CPSUI_DUPLEX_VERT = @as(u32, 64033);
pub const IDI_CPSUI_RES_DRAFT = @as(u32, 64034);
pub const IDI_CPSUI_RES_LOW = @as(u32, 64035);
pub const IDI_CPSUI_RES_MEDIUM = @as(u32, 64036);
pub const IDI_CPSUI_RES_HIGH = @as(u32, 64037);
pub const IDI_CPSUI_RES_PRESENTATION = @as(u32, 64038);
pub const IDI_CPSUI_MONO = @as(u32, 64039);
pub const IDI_CPSUI_COLOR = @as(u32, 64040);
pub const IDI_CPSUI_DITHER_NONE = @as(u32, 64041);
pub const IDI_CPSUI_DITHER_COARSE = @as(u32, 64042);
pub const IDI_CPSUI_DITHER_FINE = @as(u32, 64043);
pub const IDI_CPSUI_DITHER_LINEART = @as(u32, 64044);
pub const IDI_CPSUI_SCALING = @as(u32, 64045);
pub const IDI_CPSUI_COPY = @as(u32, 64046);
pub const IDI_CPSUI_HTCLRADJ = @as(u32, 64047);
pub const IDI_CPSUI_HALFTONE_SETUP = @as(u32, 64048);
pub const IDI_CPSUI_WATERMARK = @as(u32, 64049);
pub const IDI_CPSUI_ERROR = @as(u32, 64050);
pub const IDI_CPSUI_ICM_OPTION = @as(u32, 64051);
pub const IDI_CPSUI_ICM_METHOD = @as(u32, 64052);
pub const IDI_CPSUI_ICM_INTENT = @as(u32, 64053);
pub const IDI_CPSUI_STD_FORM = @as(u32, 64054);
pub const IDI_CPSUI_OUTBIN = @as(u32, 64055);
pub const IDI_CPSUI_OUTPUT = @as(u32, 64056);
pub const IDI_CPSUI_GRAPHIC = @as(u32, 64057);
pub const IDI_CPSUI_ADVANCE = @as(u32, 64058);
pub const IDI_CPSUI_DOCUMENT = @as(u32, 64059);
pub const IDI_CPSUI_DEVICE = @as(u32, 64060);
pub const IDI_CPSUI_DEVICE2 = @as(u32, 64061);
pub const IDI_CPSUI_PRINTER = @as(u32, 64062);
pub const IDI_CPSUI_PRINTER2 = @as(u32, 64063);
pub const IDI_CPSUI_PRINTER3 = @as(u32, 64064);
pub const IDI_CPSUI_PRINTER4 = @as(u32, 64065);
pub const IDI_CPSUI_OPTION = @as(u32, 64066);
pub const IDI_CPSUI_OPTION2 = @as(u32, 64067);
pub const IDI_CPSUI_STOP = @as(u32, 64068);
pub const IDI_CPSUI_NOTINSTALLED = @as(u32, 64069);
pub const IDI_CPSUI_WARNING_OVERLAY = @as(u32, 64070);
pub const IDI_CPSUI_STOP_WARNING_OVERLAY = @as(u32, 64071);
pub const IDI_CPSUI_GENERIC_OPTION = @as(u32, 64072);
pub const IDI_CPSUI_GENERIC_ITEM = @as(u32, 64073);
pub const IDI_CPSUI_RUN_DIALOG = @as(u32, 64074);
pub const IDI_CPSUI_QUESTION = @as(u32, 64075);
pub const IDI_CPSUI_FORMTRAYASSIGN = @as(u32, 64076);
pub const IDI_CPSUI_PRINTER_FOLDER = @as(u32, 64077);
pub const IDI_CPSUI_INSTALLABLE_OPTION = @as(u32, 64078);
pub const IDI_CPSUI_PRINTER_FEATURE = @as(u32, 64079);
pub const IDI_CPSUI_DEVICE_FEATURE = @as(u32, 64080);
pub const IDI_CPSUI_FONTSUB = @as(u32, 64081);
pub const IDI_CPSUI_POSTSCRIPT = @as(u32, 64082);
pub const IDI_CPSUI_TELEPHONE = @as(u32, 64083);
pub const IDI_CPSUI_DUPLEX_NONE_L = @as(u32, 64084);
pub const IDI_CPSUI_DUPLEX_HORZ_L = @as(u32, 64085);
pub const IDI_CPSUI_DUPLEX_VERT_L = @as(u32, 64086);
pub const IDI_CPSUI_LF_PEN_PLOTTER = @as(u32, 64087);
pub const IDI_CPSUI_SF_PEN_PLOTTER = @as(u32, 64088);
pub const IDI_CPSUI_LF_RASTER_PLOTTER = @as(u32, 64089);
pub const IDI_CPSUI_SF_RASTER_PLOTTER = @as(u32, 64090);
pub const IDI_CPSUI_ROLL_PAPER = @as(u32, 64091);
pub const IDI_CPSUI_PEN_CARROUSEL = @as(u32, 64092);
pub const IDI_CPSUI_PLOTTER_PEN = @as(u32, 64093);
pub const IDI_CPSUI_MANUAL_FEED = @as(u32, 64094);
pub const IDI_CPSUI_FAX = @as(u32, 64095);
pub const IDI_CPSUI_PAGE_PROTECT = @as(u32, 64096);
pub const IDI_CPSUI_ENVELOPE_FEED = @as(u32, 64097);
pub const IDI_CPSUI_FONTCART_SLOT = @as(u32, 64098);
pub const IDI_CPSUI_LAYOUT_BMP_PORTRAIT = @as(u32, 64099);
pub const IDI_CPSUI_LAYOUT_BMP_ARROWL = @as(u32, 64100);
pub const IDI_CPSUI_LAYOUT_BMP_ARROWS = @as(u32, 64101);
pub const IDI_CPSUI_LAYOUT_BMP_BOOKLETL = @as(u32, 64102);
pub const IDI_CPSUI_LAYOUT_BMP_BOOKLETP = @as(u32, 64103);
pub const IDI_CPSUI_LAYOUT_BMP_ARROWLR = @as(u32, 64104);
pub const IDI_CPSUI_LAYOUT_BMP_ROT_PORT = @as(u32, 64105);
pub const IDI_CPSUI_LAYOUT_BMP_BOOKLETL_NB = @as(u32, 64106);
pub const IDI_CPSUI_LAYOUT_BMP_BOOKLETP_NB = @as(u32, 64107);
pub const IDI_CPSUI_ROT_PORT = @as(u32, 64110);
pub const IDI_CPSUI_NUP_BORDER = @as(u32, 64111);
pub const IDI_CPSUI_ICONID_LAST = @as(u32, 64111);
pub const IDS_CPSUI_STRID_FIRST = @as(u32, 64700);
pub const IDS_CPSUI_SETUP = @as(u32, 64700);
pub const IDS_CPSUI_MORE = @as(u32, 64701);
pub const IDS_CPSUI_CHANGE = @as(u32, 64702);
pub const IDS_CPSUI_OPTION = @as(u32, 64703);
pub const IDS_CPSUI_OF = @as(u32, 64704);
pub const IDS_CPSUI_RANGE_FROM = @as(u32, 64705);
pub const IDS_CPSUI_TO = @as(u32, 64706);
pub const IDS_CPSUI_COLON_SEP = @as(u32, 64707);
pub const IDS_CPSUI_LEFT_ANGLE = @as(u32, 64708);
pub const IDS_CPSUI_RIGHT_ANGLE = @as(u32, 64709);
pub const IDS_CPSUI_SLASH_SEP = @as(u32, 64710);
pub const IDS_CPSUI_PERCENT = @as(u32, 64711);
pub const IDS_CPSUI_LBCB_NOSEL = @as(u32, 64712);
pub const IDS_CPSUI_PROPERTIES = @as(u32, 64713);
pub const IDS_CPSUI_DEFAULTDOCUMENT = @as(u32, 64714);
pub const IDS_CPSUI_DOCUMENT = @as(u32, 64715);
pub const IDS_CPSUI_ADVANCEDOCUMENT = @as(u32, 64716);
pub const IDS_CPSUI_PRINTER = @as(u32, 64717);
pub const IDS_CPSUI_AUTOSELECT = @as(u32, 64718);
pub const IDS_CPSUI_PAPER_OUTPUT = @as(u32, 64719);
pub const IDS_CPSUI_GRAPHIC = @as(u32, 64720);
pub const IDS_CPSUI_OPTIONS = @as(u32, 64721);
pub const IDS_CPSUI_ADVANCED = @as(u32, 64722);
pub const IDS_CPSUI_STDDOCPROPTAB = @as(u32, 64723);
pub const IDS_CPSUI_STDDOCPROPTVTAB = @as(u32, 64724);
pub const IDS_CPSUI_DEVICEOPTIONS = @as(u32, 64725);
pub const IDS_CPSUI_FALSE = @as(u32, 64726);
pub const IDS_CPSUI_TRUE = @as(u32, 64727);
pub const IDS_CPSUI_NO = @as(u32, 64728);
pub const IDS_CPSUI_YES = @as(u32, 64729);
pub const IDS_CPSUI_OFF = @as(u32, 64730);
pub const IDS_CPSUI_ON = @as(u32, 64731);
pub const IDS_CPSUI_DEFAULT = @as(u32, 64732);
pub const IDS_CPSUI_ERROR = @as(u32, 64733);
pub const IDS_CPSUI_NONE = @as(u32, 64734);
pub const IDS_CPSUI_NOT = @as(u32, 64735);
pub const IDS_CPSUI_EXIST = @as(u32, 64736);
pub const IDS_CPSUI_NOTINSTALLED = @as(u32, 64737);
pub const IDS_CPSUI_ORIENTATION = @as(u32, 64738);
pub const IDS_CPSUI_SCALING = @as(u32, 64739);
pub const IDS_CPSUI_NUM_OF_COPIES = @as(u32, 64740);
pub const IDS_CPSUI_SOURCE = @as(u32, 64741);
pub const IDS_CPSUI_PRINTQUALITY = @as(u32, 64742);
pub const IDS_CPSUI_RESOLUTION = @as(u32, 64743);
pub const IDS_CPSUI_COLOR_APPERANCE = @as(u32, 64744);
pub const IDS_CPSUI_DUPLEX = @as(u32, 64745);
pub const IDS_CPSUI_TTOPTION = @as(u32, 64746);
pub const IDS_CPSUI_FORMNAME = @as(u32, 64747);
pub const IDS_CPSUI_ICM = @as(u32, 64748);
pub const IDS_CPSUI_ICMMETHOD = @as(u32, 64749);
pub const IDS_CPSUI_ICMINTENT = @as(u32, 64750);
pub const IDS_CPSUI_MEDIA = @as(u32, 64751);
pub const IDS_CPSUI_DITHERING = @as(u32, 64752);
pub const IDS_CPSUI_PORTRAIT = @as(u32, 64753);
pub const IDS_CPSUI_LANDSCAPE = @as(u32, 64754);
pub const IDS_CPSUI_ROT_LAND = @as(u32, 64755);
pub const IDS_CPSUI_COLLATE = @as(u32, 64756);
pub const IDS_CPSUI_COLLATED = @as(u32, 64757);
pub const IDS_CPSUI_PRINTFLDSETTING = @as(u32, 64758);
pub const IDS_CPSUI_DRAFT = @as(u32, 64759);
pub const IDS_CPSUI_LOW = @as(u32, 64760);
pub const IDS_CPSUI_MEDIUM = @as(u32, 64761);
pub const IDS_CPSUI_HIGH = @as(u32, 64762);
pub const IDS_CPSUI_PRESENTATION = @as(u32, 64763);
pub const IDS_CPSUI_COLOR = @as(u32, 64764);
pub const IDS_CPSUI_GRAYSCALE = @as(u32, 64765);
pub const IDS_CPSUI_MONOCHROME = @as(u32, 64766);
pub const IDS_CPSUI_SIMPLEX = @as(u32, 64767);
pub const IDS_CPSUI_HORIZONTAL = @as(u32, 64768);
pub const IDS_CPSUI_VERTICAL = @as(u32, 64769);
pub const IDS_CPSUI_LONG_SIDE = @as(u32, 64770);
pub const IDS_CPSUI_SHORT_SIDE = @as(u32, 64771);
pub const IDS_CPSUI_TT_PRINTASGRAPHIC = @as(u32, 64772);
pub const IDS_CPSUI_TT_DOWNLOADSOFT = @as(u32, 64773);
pub const IDS_CPSUI_TT_DOWNLOADVECT = @as(u32, 64774);
pub const IDS_CPSUI_TT_SUBDEV = @as(u32, 64775);
pub const IDS_CPSUI_ICM_BLACKWHITE = @as(u32, 64776);
pub const IDS_CPSUI_ICM_NO = @as(u32, 64777);
pub const IDS_CPSUI_ICM_YES = @as(u32, 64778);
pub const IDS_CPSUI_ICM_SATURATION = @as(u32, 64779);
pub const IDS_CPSUI_ICM_CONTRAST = @as(u32, 64780);
pub const IDS_CPSUI_ICM_COLORMETRIC = @as(u32, 64781);
pub const IDS_CPSUI_STANDARD = @as(u32, 64782);
pub const IDS_CPSUI_GLOSSY = @as(u32, 64783);
pub const IDS_CPSUI_TRANSPARENCY = @as(u32, 64784);
pub const IDS_CPSUI_REGULAR = @as(u32, 64785);
pub const IDS_CPSUI_BOND = @as(u32, 64786);
pub const IDS_CPSUI_COARSE = @as(u32, 64787);
pub const IDS_CPSUI_FINE = @as(u32, 64788);
pub const IDS_CPSUI_LINEART = @as(u32, 64789);
pub const IDS_CPSUI_ERRDIFFUSE = @as(u32, 64790);
pub const IDS_CPSUI_HALFTONE = @as(u32, 64791);
pub const IDS_CPSUI_HTCLRADJ = @as(u32, 64792);
pub const IDS_CPSUI_USE_HOST_HT = @as(u32, 64793);
pub const IDS_CPSUI_USE_DEVICE_HT = @as(u32, 64794);
pub const IDS_CPSUI_USE_PRINTER_HT = @as(u32, 64795);
pub const IDS_CPSUI_OUTBINASSIGN = @as(u32, 64796);
pub const IDS_CPSUI_WATERMARK = @as(u32, 64797);
pub const IDS_CPSUI_FORMTRAYASSIGN = @as(u32, 64798);
pub const IDS_CPSUI_UPPER_TRAY = @as(u32, 64799);
pub const IDS_CPSUI_ONLYONE = @as(u32, 64800);
pub const IDS_CPSUI_LOWER_TRAY = @as(u32, 64801);
pub const IDS_CPSUI_MIDDLE_TRAY = @as(u32, 64802);
pub const IDS_CPSUI_MANUAL_TRAY = @as(u32, 64803);
pub const IDS_CPSUI_ENVELOPE_TRAY = @as(u32, 64804);
pub const IDS_CPSUI_ENVMANUAL_TRAY = @as(u32, 64805);
pub const IDS_CPSUI_TRACTOR_TRAY = @as(u32, 64806);
pub const IDS_CPSUI_SMALLFMT_TRAY = @as(u32, 64807);
pub const IDS_CPSUI_LARGEFMT_TRAY = @as(u32, 64808);
pub const IDS_CPSUI_LARGECAP_TRAY = @as(u32, 64809);
pub const IDS_CPSUI_CASSETTE_TRAY = @as(u32, 64810);
pub const IDS_CPSUI_DEFAULT_TRAY = @as(u32, 64811);
pub const IDS_CPSUI_FORMSOURCE = @as(u32, 64812);
pub const IDS_CPSUI_MANUALFEED = @as(u32, 64813);
pub const IDS_CPSUI_PRINTERMEM_KB = @as(u32, 64814);
pub const IDS_CPSUI_PRINTERMEM_MB = @as(u32, 64815);
pub const IDS_CPSUI_PAGEPROTECT = @as(u32, 64816);
pub const IDS_CPSUI_HALFTONE_SETUP = @as(u32, 64817);
pub const IDS_CPSUI_INSTFONTCART = @as(u32, 64818);
pub const IDS_CPSUI_SLOT1 = @as(u32, 64819);
pub const IDS_CPSUI_SLOT2 = @as(u32, 64820);
pub const IDS_CPSUI_SLOT3 = @as(u32, 64821);
pub const IDS_CPSUI_SLOT4 = @as(u32, 64822);
pub const IDS_CPSUI_LEFT_SLOT = @as(u32, 64823);
pub const IDS_CPSUI_RIGHT_SLOT = @as(u32, 64824);
pub const IDS_CPSUI_STAPLER = @as(u32, 64825);
pub const IDS_CPSUI_STAPLER_ON = @as(u32, 64826);
pub const IDS_CPSUI_STAPLER_OFF = @as(u32, 64827);
pub const IDS_CPSUI_STACKER = @as(u32, 64828);
pub const IDS_CPSUI_MAILBOX = @as(u32, 64829);
pub const IDS_CPSUI_COPY = @as(u32, 64830);
pub const IDS_CPSUI_COPIES = @as(u32, 64831);
pub const IDS_CPSUI_TOTAL = @as(u32, 64832);
pub const IDS_CPSUI_MAKE = @as(u32, 64833);
pub const IDS_CPSUI_PRINT = @as(u32, 64834);
pub const IDS_CPSUI_FAX = @as(u32, 64835);
pub const IDS_CPSUI_PLOT = @as(u32, 64836);
pub const IDS_CPSUI_SLOW = @as(u32, 64837);
pub const IDS_CPSUI_FAST = @as(u32, 64838);
pub const IDS_CPSUI_ROTATED = @as(u32, 64839);
pub const IDS_CPSUI_RESET = @as(u32, 64840);
pub const IDS_CPSUI_ALL = @as(u32, 64841);
pub const IDS_CPSUI_DEVICE = @as(u32, 64842);
pub const IDS_CPSUI_SETTINGS = @as(u32, 64843);
pub const IDS_CPSUI_REVERT = @as(u32, 64844);
pub const IDS_CPSUI_CHANGES = @as(u32, 64845);
pub const IDS_CPSUI_CHANGED = @as(u32, 64846);
pub const IDS_CPSUI_WARNING = @as(u32, 64847);
pub const IDS_CPSUI_ABOUT = @as(u32, 64848);
pub const IDS_CPSUI_VERSION = @as(u32, 64849);
pub const IDS_CPSUI_NO_NAME = @as(u32, 64850);
pub const IDS_CPSUI_SETTING = @as(u32, 64851);
pub const IDS_CPSUI_DEVICE_SETTINGS = @as(u32, 64852);
pub const IDS_CPSUI_STDDOCPROPTAB1 = @as(u32, 64853);
pub const IDS_CPSUI_STDDOCPROPTAB2 = @as(u32, 64854);
pub const IDS_CPSUI_PAGEORDER = @as(u32, 64855);
pub const IDS_CPSUI_FRONTTOBACK = @as(u32, 64856);
pub const IDS_CPSUI_BACKTOFRONT = @as(u32, 64857);
pub const IDS_CPSUI_QUALITY_SETTINGS = @as(u32, 64858);
pub const IDS_CPSUI_QUALITY_DRAFT = @as(u32, 64859);
pub const IDS_CPSUI_QUALITY_BETTER = @as(u32, 64860);
pub const IDS_CPSUI_QUALITY_BEST = @as(u32, 64861);
pub const IDS_CPSUI_QUALITY_CUSTOM = @as(u32, 64862);
pub const IDS_CPSUI_OUTPUTBIN = @as(u32, 64863);
pub const IDS_CPSUI_NUP = @as(u32, 64864);
pub const IDS_CPSUI_NUP_NORMAL = @as(u32, 64865);
pub const IDS_CPSUI_NUP_TWOUP = @as(u32, 64866);
pub const IDS_CPSUI_NUP_FOURUP = @as(u32, 64867);
pub const IDS_CPSUI_NUP_SIXUP = @as(u32, 64868);
pub const IDS_CPSUI_NUP_NINEUP = @as(u32, 64869);
pub const IDS_CPSUI_NUP_SIXTEENUP = @as(u32, 64870);
pub const IDS_CPSUI_SIDE1 = @as(u32, 64871);
pub const IDS_CPSUI_SIDE2 = @as(u32, 64872);
pub const IDS_CPSUI_BOOKLET = @as(u32, 64873);
pub const IDS_CPSUI_POSTER = @as(u32, 64874);
pub const IDS_CPSUI_POSTER_2x2 = @as(u32, 64875);
pub const IDS_CPSUI_POSTER_3x3 = @as(u32, 64876);
pub const IDS_CPSUI_POSTER_4x4 = @as(u32, 64877);
pub const IDS_CPSUI_NUP_DIRECTION = @as(u32, 64878);
pub const IDS_CPSUI_RIGHT_THEN_DOWN = @as(u32, 64879);
pub const IDS_CPSUI_DOWN_THEN_RIGHT = @as(u32, 64880);
pub const IDS_CPSUI_LEFT_THEN_DOWN = @as(u32, 64881);
pub const IDS_CPSUI_DOWN_THEN_LEFT = @as(u32, 64882);
pub const IDS_CPSUI_MANUAL_DUPLEX = @as(u32, 64883);
pub const IDS_CPSUI_MANUAL_DUPLEX_ON = @as(u32, 64884);
pub const IDS_CPSUI_MANUAL_DUPLEX_OFF = @as(u32, 64885);
pub const IDS_CPSUI_ROT_PORT = @as(u32, 64886);
pub const IDS_CPSUI_STAPLE = @as(u32, 64887);
pub const IDS_CPSUI_BOOKLET_EDGE = @as(u32, 64888);
pub const IDS_CPSUI_BOOKLET_EDGE_LEFT = @as(u32, 64889);
pub const IDS_CPSUI_BOOKLET_EDGE_RIGHT = @as(u32, 64890);
pub const IDS_CPSUI_NUP_BORDER = @as(u32, 64891);
pub const IDS_CPSUI_NUP_BORDERED = @as(u32, 64892);
pub const IDS_CPSUI_STRID_LAST = @as(u32, 64892);
pub const XPS_FP_PRINTER_NAME = "PrinterName";
pub const XPS_FP_PROGRESS_REPORT = "ProgressReport";
pub const XPS_FP_PRINTER_HANDLE = "PrinterHandle";
pub const XPS_FP_USER_PRINT_TICKET = "PerUserPrintTicket";
pub const XPS_FP_USER_TOKEN = "UserSecurityToken";
pub const XPS_FP_JOB_ID = "PrintJobId";
pub const XPS_FP_PRINT_CLASS_FACTORY = "PrintClassFactory";
pub const XPS_FP_OUTPUT_FILE = "PrintOutputFileName";
pub const XPS_FP_MS_CONTENT_TYPE = "DriverMultiContentType";
pub const XPS_FP_MS_CONTENT_TYPE_XPS = "XPS";
pub const XPS_FP_MS_CONTENT_TYPE_OPENXPS = "OpenXPS";
pub const XPS_FP_DRIVER_PROPERTY_BAG = "DriverPropertyBag";
pub const XPS_FP_QUEUE_PROPERTY_BAG = "QueuePropertyBag";
pub const XPS_FP_MERGED_DATAFILE_PATH = "MergedDataFilePath";
pub const XPS_FP_RESOURCE_DLL_PATHS = "ResourceDLLPaths";
pub const XPS_FP_JOB_LEVEL_PRINTTICKET = "JobPrintTicket";
pub const XPS_FP_PRINTDEVICECAPABILITIES = "PrintDeviceCapabilities";
pub const MXDC_ESCAPE = @as(u32, 4122);
pub const MXDCOP_GET_FILENAME = @as(u32, 14);
pub const MXDCOP_PRINTTICKET_FIXED_DOC_SEQ = @as(u32, 22);
pub const MXDCOP_PRINTTICKET_FIXED_DOC = @as(u32, 24);
pub const MXDCOP_PRINTTICKET_FIXED_PAGE = @as(u32, 26);
pub const MXDCOP_SET_S0PAGE = @as(u32, 28);
pub const MXDCOP_SET_S0PAGE_RESOURCE = @as(u32, 30);
pub const MXDCOP_SET_XPSPASSTHRU_MODE = @as(u32, 32);
pub const CLSID_OEMRENDER = Guid.initString("6d6abf26-9f38-11d1-882a-00c04fb961ec");
pub const CLSID_OEMUI = Guid.initString("abce80d7-9f46-11d1-882a-00c04fb961ec");
pub const CLSID_OEMUIMXDC = Guid.initString("4e144300-5b43-4288-932a-5e4dd6d82bed");
pub const CLSID_OEMPTPROVIDER = Guid.initString("91723892-45d2-48e2-9ec9-562379daf992");
pub const S_DEVCAP_OUTPUT_FULL_REPLACEMENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, 318465));
pub const CLSID_PTPROVIDER = Guid.initString("46ac151b-8490-4531-96cc-55bf2bf19e11");
pub const E_VERSION_NOT_SUPPORTED = @as(u32, 2147745793);
pub const S_NO_CONFLICT = @as(u32, 262145);
pub const S_CONFLICT_RESOLVED = @as(u32, 262146);
pub const PRINTER_EXTENSION_DETAILEDREASON_PRINTER_STATUS = Guid.initString("5d5a1704-dfd1-4181-8eee-815c86edad31");
pub const PRINTER_EXTENSION_REASON_PRINT_PREFERENCES = Guid.initString("ec8f261f-267c-469f-b5d6-3933023c29cc");
pub const PRINTER_EXTENSION_REASON_DRIVER_EVENT = Guid.initString("23bb1328-63de-4293-915b-a6a23d929acb");
pub const FMTID_PrinterPropertyBag = Guid.initString("75f9adca-097d-45c3-a6e4-bab29e276f3e");
pub const PRINTER_OEMINTF_VERSION = @as(u32, 65536);
pub const OEM_MODE_PUBLISHER = @as(u32, 1);
pub const OEMGI_GETSIGNATURE = @as(u32, 1);
pub const OEMGI_GETINTERFACEVERSION = @as(u32, 2);
pub const OEMGI_GETVERSION = @as(u32, 3);
pub const OEMGI_GETPUBLISHERINFO = @as(u32, 4);
pub const OEMGI_GETREQUESTEDHELPERINTERFACES = @as(u32, 5);
pub const OEMPUBLISH_DEFAULT = @as(u32, 0);
pub const OEMPUBLISH_IPRINTCOREHELPER = @as(u32, 1);
pub const OEMDM_SIZE = @as(u32, 1);
pub const OEMDM_DEFAULT = @as(u32, 2);
pub const OEMDM_CONVERT = @as(u32, 3);
pub const OEMDM_MERGE = @as(u32, 4);
pub const OEMGDS_MIN_DOCSTICKY = @as(u32, 1);
pub const OEMGDS_PSDM_FLAGS = @as(u32, 1);
pub const OEMGDS_PSDM_DIALECT = @as(u32, 2);
pub const OEMGDS_PSDM_TTDLFMT = @as(u32, 3);
pub const OEMGDS_PSDM_NUP = @as(u32, 4);
pub const OEMGDS_PSDM_PSLEVEL = @as(u32, 5);
pub const OEMGDS_PSDM_CUSTOMSIZE = @as(u32, 6);
pub const OEMGDS_UNIDM_GPDVER = @as(u32, 16384);
pub const OEMGDS_UNIDM_FLAGS = @as(u32, 16385);
pub const OEMGDS_MIN_PRINTERSTICKY = @as(u32, 32768);
pub const OEMGDS_PRINTFLAGS = @as(u32, 32768);
pub const OEMGDS_FREEMEM = @as(u32, 32769);
pub const OEMGDS_JOBTIMEOUT = @as(u32, 32770);
pub const OEMGDS_WAITTIMEOUT = @as(u32, 32771);
pub const OEMGDS_PROTOCOL = @as(u32, 32772);
pub const OEMGDS_MINOUTLINE = @as(u32, 32773);
pub const OEMGDS_MAXBITMAP = @as(u32, 32774);
pub const OEMGDS_MAX = @as(u32, 65536);
pub const GPD_OEMCUSTOMDATA = @as(u32, 1);
pub const MV_UPDATE = @as(u32, 1);
pub const MV_RELATIVE = @as(u32, 2);
pub const MV_GRAPHICS = @as(u32, 4);
pub const MV_PHYSICAL = @as(u32, 8);
pub const MV_SENDXMOVECMD = @as(u32, 16);
pub const MV_SENDYMOVECMD = @as(u32, 32);
pub const OEMTTY_INFO_MARGINS = @as(u32, 1);
pub const OEMTTY_INFO_CODEPAGE = @as(u32, 2);
pub const OEMTTY_INFO_NUM_UFMS = @as(u32, 3);
pub const OEMTTY_INFO_UFM_IDS = @as(u32, 4);
pub const UFOFLAG_TTFONT = @as(u32, 1);
pub const UFOFLAG_TTDOWNLOAD_BITMAP = @as(u32, 2);
pub const UFOFLAG_TTDOWNLOAD_TTOUTLINE = @as(u32, 4);
pub const UFOFLAG_TTOUTLINE_BOLD_SIM = @as(u32, 8);
pub const UFOFLAG_TTOUTLINE_ITALIC_SIM = @as(u32, 16);
pub const UFOFLAG_TTOUTLINE_VERTICAL = @as(u32, 32);
pub const UFOFLAG_TTSUBSTITUTED = @as(u32, 64);
pub const UFO_GETINFO_FONTOBJ = @as(u32, 1);
pub const UFO_GETINFO_GLYPHSTRING = @as(u32, 2);
pub const UFO_GETINFO_GLYPHBITMAP = @as(u32, 3);
pub const UFO_GETINFO_GLYPHWIDTH = @as(u32, 4);
pub const UFO_GETINFO_MEMORY = @as(u32, 5);
pub const UFO_GETINFO_STDVARIABLE = @as(u32, 6);
pub const FNT_INFO_PRINTDIRINCCDEGREES = @as(u32, 0);
pub const FNT_INFO_GRAYPERCENTAGE = @as(u32, 1);
pub const FNT_INFO_NEXTFONTID = @as(u32, 2);
pub const FNT_INFO_NEXTGLYPH = @as(u32, 3);
pub const FNT_INFO_FONTHEIGHT = @as(u32, 4);
pub const FNT_INFO_FONTWIDTH = @as(u32, 5);
pub const FNT_INFO_FONTBOLD = @as(u32, 6);
pub const FNT_INFO_FONTITALIC = @as(u32, 7);
pub const FNT_INFO_FONTUNDERLINE = @as(u32, 8);
pub const FNT_INFO_FONTSTRIKETHRU = @as(u32, 9);
pub const FNT_INFO_CURRENTFONTID = @as(u32, 10);
pub const FNT_INFO_TEXTYRES = @as(u32, 11);
pub const FNT_INFO_TEXTXRES = @as(u32, 12);
pub const FNT_INFO_FONTMAXWIDTH = @as(u32, 13);
pub const FNT_INFO_MAX = @as(u32, 14);
pub const TTDOWNLOAD_DONTCARE = @as(u32, 0);
pub const TTDOWNLOAD_GRAPHICS = @as(u32, 1);
pub const TTDOWNLOAD_BITMAP = @as(u32, 2);
pub const TTDOWNLOAD_TTOUTLINE = @as(u32, 3);
pub const TYPE_UNICODE = @as(u32, 1);
pub const TYPE_TRANSDATA = @as(u32, 2);
pub const TYPE_GLYPHHANDLE = @as(u32, 3);
pub const TYPE_GLYPHID = @as(u32, 4);
pub const PDEV_ADJUST_PAPER_MARGIN_TYPE = @as(u32, 1);
pub const PDEV_HOSTFONT_ENABLED_TYPE = @as(u32, 2);
pub const PDEV_USE_TRUE_COLOR_TYPE = @as(u32, 3);
pub const OEMCUIP_DOCPROP = @as(u32, 1);
pub const OEMCUIP_PRNPROP = @as(u32, 2);
pub const CUSTOMPARAM_WIDTH = @as(u32, 0);
pub const CUSTOMPARAM_HEIGHT = @as(u32, 1);
pub const CUSTOMPARAM_WIDTHOFFSET = @as(u32, 2);
pub const CUSTOMPARAM_HEIGHTOFFSET = @as(u32, 3);
pub const CUSTOMPARAM_ORIENTATION = @as(u32, 4);
pub const CUSTOMPARAM_MAX = @as(u32, 5);
pub const SETOPTIONS_FLAG_RESOLVE_CONFLICT = @as(u32, 1);
pub const SETOPTIONS_FLAG_KEEP_CONFLICT = @as(u32, 2);
pub const SETOPTIONS_RESULT_NO_CONFLICT = @as(u32, 0);
pub const SETOPTIONS_RESULT_CONFLICT_RESOLVED = @as(u32, 1);
pub const SETOPTIONS_RESULT_CONFLICT_REMAINED = @as(u32, 2);
pub const UNIFM_VERSION_1_0 = @as(u32, 65536);
pub const UFM_SOFT = @as(u32, 1);
pub const UFM_CART = @as(u32, 2);
pub const UFM_SCALABLE = @as(u32, 4);
pub const DF_TYPE_HPINTELLIFONT = @as(u32, 0);
pub const DF_TYPE_TRUETYPE = @as(u32, 1);
pub const DF_TYPE_PST1 = @as(u32, 2);
pub const DF_TYPE_CAPSL = @as(u32, 3);
pub const DF_TYPE_OEM1 = @as(u32, 4);
pub const DF_TYPE_OEM2 = @as(u32, 5);
pub const DF_NOITALIC = @as(u32, 1);
pub const DF_NOUNDER = @as(u32, 2);
pub const DF_XM_CR = @as(u32, 4);
pub const DF_NO_BOLD = @as(u32, 8);
pub const DF_NO_DOUBLE_UNDERLINE = @as(u32, 16);
pub const DF_NO_STRIKETHRU = @as(u32, 32);
pub const DF_BKSP_OK = @as(u32, 64);
pub const UNI_GLYPHSETDATA_VERSION_1_0 = @as(u32, 65536);
pub const MTYPE_FORMAT_MASK = @as(u32, 7);
pub const MTYPE_COMPOSE = @as(u32, 1);
pub const MTYPE_DIRECT = @as(u32, 2);
pub const MTYPE_PAIRED = @as(u32, 4);
pub const MTYPE_DOUBLEBYTECHAR_MASK = @as(u32, 24);
pub const MTYPE_SINGLE = @as(u32, 8);
pub const MTYPE_DOUBLE = @as(u32, 16);
pub const MTYPE_PREDEFIN_MASK = @as(u32, 224);
pub const MTYPE_REPLACE = @as(u32, 32);
pub const MTYPE_ADD = @as(u32, 64);
pub const MTYPE_DISABLE = @as(u32, 128);
pub const CC_NOPRECNV = @as(u32, 65535);
pub const CC_DEFAULT = @as(u32, 0);
pub const CC_CP437 = @as(i32, -1);
pub const CC_CP850 = @as(i32, -2);
pub const CC_CP863 = @as(i32, -3);
pub const CC_BIG5 = @as(i32, -10);
pub const CC_ISC = @as(i32, -11);
pub const CC_JIS = @as(i32, -12);
pub const CC_JIS_ANK = @as(i32, -13);
pub const CC_NS86 = @as(i32, -14);
pub const CC_TCA = @as(i32, -15);
pub const CC_GB2312 = @as(i32, -16);
pub const CC_SJIS = @as(i32, -17);
pub const CC_WANSUNG = @as(i32, -18);
pub const UFF_VERSION_NUMBER = @as(u32, 65537);
pub const FONT_DIR_SORTED = @as(u32, 1);
pub const FONT_FL_UFM = @as(u32, 1);
pub const FONT_FL_IFI = @as(u32, 2);
pub const FONT_FL_SOFTFONT = @as(u32, 4);
pub const FONT_FL_PERMANENT_SF = @as(u32, 8);
pub const FONT_FL_DEVICEFONT = @as(u32, 16);
pub const FONT_FL_GLYPHSET_GTT = @as(u32, 32);
pub const FONT_FL_GLYPHSET_RLE = @as(u32, 64);
pub const FONT_FL_RESERVED = @as(u32, 32768);
pub const FG_CANCHANGE = @as(u32, 128);
pub const WM_FI_FILENAME = @as(u32, 900);
pub const UNKNOWN_PROTOCOL = @as(u32, 0);
pub const PROTOCOL_UNKNOWN_TYPE = @as(u32, 0);
pub const RAWTCP = @as(u32, 1);
pub const PROTOCOL_RAWTCP_TYPE = @as(u32, 1);
pub const LPR = @as(u32, 2);
pub const PROTOCOL_LPR_TYPE = @as(u32, 2);
pub const MAX_PORTNAME_LEN = @as(u32, 64);
pub const MAX_NETWORKNAME_LEN = @as(u32, 49);
pub const MAX_NETWORKNAME2_LEN = @as(u32, 128);
pub const MAX_SNMP_COMMUNITY_STR_LEN = @as(u32, 33);
pub const MAX_QUEUENAME_LEN = @as(u32, 33);
pub const MAX_IPADDR_STR_LEN = @as(u32, 16);
pub const MAX_ADDRESS_STR_LEN = @as(u32, 13);
pub const MAX_DEVICEDESCRIPTION_STR_LEN = @as(u32, 257);
pub const DPS_NOPERMISSION = @as(u32, 1);
pub const DM_ADVANCED = @as(u32, 16);
pub const DM_NOPERMISSION = @as(u32, 32);
pub const DM_USER_DEFAULT = @as(u32, 64);
pub const DM_PROMPT_NON_MODAL = @as(u32, 1073741824);
pub const DM_INVALIDATE_DRIVER_CACHE = @as(u32, 536870912);
pub const DM_RESERVED = @as(u32, 2147483648);
pub const CDM_CONVERT = @as(u32, 1);
pub const CDM_CONVERT351 = @as(u32, 2);
pub const CDM_DRIVER_DEFAULT = @as(u32, 4);
pub const DOCUMENTEVENT_FIRST = @as(u32, 1);
pub const DOCUMENTEVENT_CREATEDCPRE = @as(u32, 1);
pub const DOCUMENTEVENT_CREATEDCPOST = @as(u32, 2);
pub const DOCUMENTEVENT_RESETDCPRE = @as(u32, 3);
pub const DOCUMENTEVENT_RESETDCPOST = @as(u32, 4);
pub const DOCUMENTEVENT_STARTDOC = @as(u32, 5);
pub const DOCUMENTEVENT_STARTDOCPRE = @as(u32, 5);
pub const DOCUMENTEVENT_STARTPAGE = @as(u32, 6);
pub const DOCUMENTEVENT_ENDPAGE = @as(u32, 7);
pub const DOCUMENTEVENT_ENDDOC = @as(u32, 8);
pub const DOCUMENTEVENT_ENDDOCPRE = @as(u32, 8);
pub const DOCUMENTEVENT_ABORTDOC = @as(u32, 9);
pub const DOCUMENTEVENT_DELETEDC = @as(u32, 10);
pub const DOCUMENTEVENT_ESCAPE = @as(u32, 11);
pub const DOCUMENTEVENT_ENDDOCPOST = @as(u32, 12);
pub const DOCUMENTEVENT_STARTDOCPOST = @as(u32, 13);
pub const DOCUMENTEVENT_QUERYFILTER = @as(u32, 14);
pub const DOCUMENTEVENT_XPS_ADDFIXEDDOCUMENTSEQUENCEPRE = @as(u32, 1);
pub const DOCUMENTEVENT_XPS_ADDFIXEDDOCUMENTPRE = @as(u32, 2);
pub const DOCUMENTEVENT_XPS_ADDFIXEDPAGEEPRE = @as(u32, 3);
pub const DOCUMENTEVENT_XPS_ADDFIXEDPAGEPOST = @as(u32, 4);
pub const DOCUMENTEVENT_XPS_ADDFIXEDDOCUMENTPOST = @as(u32, 5);
pub const DOCUMENTEVENT_XPS_CANCELJOB = @as(u32, 6);
pub const DOCUMENTEVENT_XPS_ADDFIXEDDOCUMENTSEQUENCEPRINTTICKETPRE = @as(u32, 7);
pub const DOCUMENTEVENT_XPS_ADDFIXEDDOCUMENTPRINTTICKETPRE = @as(u32, 8);
pub const DOCUMENTEVENT_XPS_ADDFIXEDPAGEPRINTTICKETPRE = @as(u32, 9);
pub const DOCUMENTEVENT_XPS_ADDFIXEDPAGEPRINTTICKETPOST = @as(u32, 10);
pub const DOCUMENTEVENT_XPS_ADDFIXEDDOCUMENTPRINTTICKETPOST = @as(u32, 11);
pub const DOCUMENTEVENT_XPS_ADDFIXEDDOCUMENTSEQUENCEPRINTTICKETPOST = @as(u32, 12);
pub const DOCUMENTEVENT_XPS_ADDFIXEDDOCUMENTSEQUENCEPOST = @as(u32, 13);
pub const DOCUMENTEVENT_LAST = @as(u32, 15);
pub const DOCUMENTEVENT_SPOOLED = @as(u32, 65536);
pub const DOCUMENTEVENT_SUCCESS = @as(u32, 1);
pub const DOCUMENTEVENT_UNSUPPORTED = @as(u32, 0);
pub const DOCUMENTEVENT_FAILURE = @as(i32, -1);
pub const PRINTER_EVENT_CONFIGURATION_CHANGE = @as(u32, 0);
pub const PRINTER_EVENT_ADD_CONNECTION = @as(u32, 1);
pub const PRINTER_EVENT_DELETE_CONNECTION = @as(u32, 2);
pub const PRINTER_EVENT_INITIALIZE = @as(u32, 3);
pub const PRINTER_EVENT_DELETE = @as(u32, 4);
pub const PRINTER_EVENT_CACHE_REFRESH = @as(u32, 5);
pub const PRINTER_EVENT_CACHE_DELETE = @as(u32, 6);
pub const PRINTER_EVENT_ATTRIBUTES_CHANGED = @as(u32, 7);
pub const PRINTER_EVENT_CONFIGURATION_UPDATE = @as(u32, 8);
pub const PRINTER_EVENT_ADD_CONNECTION_NO_UI = @as(u32, 9);
pub const PRINTER_EVENT_DELETE_CONNECTION_NO_UI = @as(u32, 10);
pub const PRINTER_EVENT_FLAG_NO_UI = @as(u32, 1);
pub const DRIVER_EVENT_INITIALIZE = @as(u32, 1);
pub const DRIVER_EVENT_DELETE = @as(u32, 2);
pub const BORDER_PRINT = @as(u32, 0);
pub const NO_BORDER_PRINT = @as(u32, 1);
pub const NORMAL_PRINT = @as(u32, 0);
pub const REVERSE_PRINT = @as(u32, 1);
pub const BOOKLET_PRINT = @as(u32, 2);
pub const NO_COLOR_OPTIMIZATION = @as(u32, 0);
pub const COLOR_OPTIMIZATION = @as(u32, 1);
pub const REVERSE_PAGES_FOR_REVERSE_DUPLEX = @as(u32, 1);
pub const RIGHT_THEN_DOWN = @as(u32, 1);
pub const BOOKLET_EDGE_LEFT = @as(u32, 0);
pub const BOOKLET_EDGE_RIGHT = @as(u32, 1);
pub const QCP_DEVICEPROFILE = @as(u32, 0);
pub const QCP_SOURCEPROFILE = @as(u32, 1);
pub const QCP_PROFILEMEMORY = @as(u32, 1);
pub const QCP_PROFILEDISK = @as(u32, 2);
pub const SPLPRINTER_USER_MODE_PRINTER_DRIVER = "SPLUserModePrinterDriver";
pub const EMF_PP_COLOR_OPTIMIZATION = @as(u32, 1);
pub const PRINTER_NOTIFY_STATUS_ENDPOINT = @as(u32, 1);
pub const PRINTER_NOTIFY_STATUS_POLL = @as(u32, 2);
pub const PRINTER_NOTIFY_STATUS_INFO = @as(u32, 4);
pub const ROUTER_UNKNOWN = @as(u32, 0);
pub const ROUTER_SUCCESS = @as(u32, 1);
pub const ROUTER_STOP_ROUTING = @as(u32, 2);
pub const FILL_WITH_DEFAULTS = @as(u32, 1);
pub const PRINTER_NOTIFY_INFO_DATA_COMPACT = @as(u32, 1);
pub const COPYFILE_EVENT_SET_PRINTER_DATAEX = @as(u32, 1);
pub const COPYFILE_EVENT_DELETE_PRINTER = @as(u32, 2);
pub const COPYFILE_EVENT_ADD_PRINTER_CONNECTION = @as(u32, 3);
pub const COPYFILE_EVENT_DELETE_PRINTER_CONNECTION = @as(u32, 4);
pub const COPYFILE_EVENT_FILES_CHANGED = @as(u32, 5);
pub const COPYFILE_FLAG_CLIENT_SPOOLER = @as(u32, 1);
pub const COPYFILE_FLAG_SERVER_SPOOLER = @as(u32, 2);
pub const DSPRINT_PUBLISH = @as(u32, 1);
pub const DSPRINT_UPDATE = @as(u32, 2);
pub const DSPRINT_UNPUBLISH = @as(u32, 4);
pub const DSPRINT_REPUBLISH = @as(u32, 8);
pub const DSPRINT_PENDING = @as(u32, 2147483648);
pub const PRINTER_CONTROL_PAUSE = @as(u32, 1);
pub const PRINTER_CONTROL_RESUME = @as(u32, 2);
pub const PRINTER_CONTROL_PURGE = @as(u32, 3);
pub const PRINTER_CONTROL_SET_STATUS = @as(u32, 4);
pub const PRINTER_STATUS_PAUSED = @as(u32, 1);
pub const PRINTER_STATUS_ERROR = @as(u32, 2);
pub const PRINTER_STATUS_PENDING_DELETION = @as(u32, 4);
pub const PRINTER_STATUS_PAPER_JAM = @as(u32, 8);
pub const PRINTER_STATUS_PAPER_OUT = @as(u32, 16);
pub const PRINTER_STATUS_MANUAL_FEED = @as(u32, 32);
pub const PRINTER_STATUS_PAPER_PROBLEM = @as(u32, 64);
pub const PRINTER_STATUS_OFFLINE = @as(u32, 128);
pub const PRINTER_STATUS_IO_ACTIVE = @as(u32, 256);
pub const PRINTER_STATUS_BUSY = @as(u32, 512);
pub const PRINTER_STATUS_PRINTING = @as(u32, 1024);
pub const PRINTER_STATUS_OUTPUT_BIN_FULL = @as(u32, 2048);
pub const PRINTER_STATUS_NOT_AVAILABLE = @as(u32, 4096);
pub const PRINTER_STATUS_WAITING = @as(u32, 8192);
pub const PRINTER_STATUS_PROCESSING = @as(u32, 16384);
pub const PRINTER_STATUS_INITIALIZING = @as(u32, 32768);
pub const PRINTER_STATUS_WARMING_UP = @as(u32, 65536);
pub const PRINTER_STATUS_TONER_LOW = @as(u32, 131072);
pub const PRINTER_STATUS_NO_TONER = @as(u32, 262144);
pub const PRINTER_STATUS_PAGE_PUNT = @as(u32, 524288);
pub const PRINTER_STATUS_USER_INTERVENTION = @as(u32, 1048576);
pub const PRINTER_STATUS_OUT_OF_MEMORY = @as(u32, 2097152);
pub const PRINTER_STATUS_DOOR_OPEN = @as(u32, 4194304);
pub const PRINTER_STATUS_SERVER_UNKNOWN = @as(u32, 8388608);
pub const PRINTER_STATUS_POWER_SAVE = @as(u32, 16777216);
pub const PRINTER_STATUS_SERVER_OFFLINE = @as(u32, 33554432);
pub const PRINTER_STATUS_DRIVER_UPDATE_NEEDED = @as(u32, 67108864);
pub const PRINTER_ATTRIBUTE_QUEUED = @as(u32, 1);
pub const PRINTER_ATTRIBUTE_DIRECT = @as(u32, 2);
pub const PRINTER_ATTRIBUTE_DEFAULT = @as(u32, 4);
pub const PRINTER_ATTRIBUTE_SHARED = @as(u32, 8);
pub const PRINTER_ATTRIBUTE_NETWORK = @as(u32, 16);
pub const PRINTER_ATTRIBUTE_HIDDEN = @as(u32, 32);
pub const PRINTER_ATTRIBUTE_LOCAL = @as(u32, 64);
pub const PRINTER_ATTRIBUTE_ENABLE_DEVQ = @as(u32, 128);
pub const PRINTER_ATTRIBUTE_KEEPPRINTEDJOBS = @as(u32, 256);
pub const PRINTER_ATTRIBUTE_DO_COMPLETE_FIRST = @as(u32, 512);
pub const PRINTER_ATTRIBUTE_WORK_OFFLINE = @as(u32, 1024);
pub const PRINTER_ATTRIBUTE_ENABLE_BIDI = @as(u32, 2048);
pub const PRINTER_ATTRIBUTE_RAW_ONLY = @as(u32, 4096);
pub const PRINTER_ATTRIBUTE_PUBLISHED = @as(u32, 8192);
pub const PRINTER_ATTRIBUTE_FAX = @as(u32, 16384);
pub const PRINTER_ATTRIBUTE_TS = @as(u32, 32768);
pub const PRINTER_ATTRIBUTE_PUSHED_USER = @as(u32, 131072);
pub const PRINTER_ATTRIBUTE_PUSHED_MACHINE = @as(u32, 262144);
pub const PRINTER_ATTRIBUTE_MACHINE = @as(u32, 524288);
pub const PRINTER_ATTRIBUTE_FRIENDLY_NAME = @as(u32, 1048576);
pub const PRINTER_ATTRIBUTE_TS_GENERIC_DRIVER = @as(u32, 2097152);
pub const PRINTER_ATTRIBUTE_PER_USER = @as(u32, 4194304);
pub const PRINTER_ATTRIBUTE_ENTERPRISE_CLOUD = @as(u32, 8388608);
pub const NO_PRIORITY = @as(u32, 0);
pub const MAX_PRIORITY = @as(u32, 99);
pub const MIN_PRIORITY = @as(u32, 1);
pub const DEF_PRIORITY = @as(u32, 1);
pub const JOB_CONTROL_PAUSE = @as(u32, 1);
pub const JOB_CONTROL_RESUME = @as(u32, 2);
pub const JOB_CONTROL_CANCEL = @as(u32, 3);
pub const JOB_CONTROL_RESTART = @as(u32, 4);
pub const JOB_CONTROL_DELETE = @as(u32, 5);
pub const JOB_CONTROL_SENT_TO_PRINTER = @as(u32, 6);
pub const JOB_CONTROL_LAST_PAGE_EJECTED = @as(u32, 7);
pub const JOB_CONTROL_RETAIN = @as(u32, 8);
pub const JOB_CONTROL_RELEASE = @as(u32, 9);
pub const JOB_STATUS_PAUSED = @as(u32, 1);
pub const JOB_STATUS_ERROR = @as(u32, 2);
pub const JOB_STATUS_DELETING = @as(u32, 4);
pub const JOB_STATUS_SPOOLING = @as(u32, 8);
pub const JOB_STATUS_PRINTING = @as(u32, 16);
pub const JOB_STATUS_OFFLINE = @as(u32, 32);
pub const JOB_STATUS_PAPEROUT = @as(u32, 64);
pub const JOB_STATUS_PRINTED = @as(u32, 128);
pub const JOB_STATUS_DELETED = @as(u32, 256);
pub const JOB_STATUS_BLOCKED_DEVQ = @as(u32, 512);
pub const JOB_STATUS_USER_INTERVENTION = @as(u32, 1024);
pub const JOB_STATUS_RESTART = @as(u32, 2048);
pub const JOB_STATUS_COMPLETE = @as(u32, 4096);
pub const JOB_STATUS_RETAINED = @as(u32, 8192);
pub const JOB_STATUS_RENDERING_LOCALLY = @as(u32, 16384);
pub const JOB_POSITION_UNSPECIFIED = @as(u32, 0);
pub const PRINTER_DRIVER_PACKAGE_AWARE = @as(u32, 1);
pub const PRINTER_DRIVER_XPS = @as(u32, 2);
pub const PRINTER_DRIVER_SANDBOX_ENABLED = @as(u32, 4);
pub const PRINTER_DRIVER_CLASS = @as(u32, 8);
pub const PRINTER_DRIVER_DERIVED = @as(u32, 16);
pub const PRINTER_DRIVER_NOT_SHAREABLE = @as(u32, 32);
pub const PRINTER_DRIVER_CATEGORY_FAX = @as(u32, 64);
pub const PRINTER_DRIVER_CATEGORY_FILE = @as(u32, 128);
pub const PRINTER_DRIVER_CATEGORY_VIRTUAL = @as(u32, 256);
pub const PRINTER_DRIVER_CATEGORY_SERVICE = @as(u32, 512);
pub const PRINTER_DRIVER_SOFT_RESET_REQUIRED = @as(u32, 1024);
pub const PRINTER_DRIVER_SANDBOX_DISABLED = @as(u32, 2048);
pub const PRINTER_DRIVER_CATEGORY_3D = @as(u32, 4096);
pub const PRINTER_DRIVER_CATEGORY_CLOUD = @as(u32, 8192);
pub const DRIVER_KERNELMODE = @as(u32, 1);
pub const DRIVER_USERMODE = @as(u32, 2);
pub const DPD_DELETE_UNUSED_FILES = @as(u32, 1);
pub const DPD_DELETE_SPECIFIC_VERSION = @as(u32, 2);
pub const DPD_DELETE_ALL_FILES = @as(u32, 4);
pub const APD_STRICT_UPGRADE = @as(u32, 1);
pub const APD_STRICT_DOWNGRADE = @as(u32, 2);
pub const APD_COPY_ALL_FILES = @as(u32, 4);
pub const APD_COPY_NEW_FILES = @as(u32, 8);
pub const APD_COPY_FROM_DIRECTORY = @as(u32, 16);
pub const STRING_NONE = @as(u32, 1);
pub const STRING_MUIDLL = @as(u32, 2);
pub const STRING_LANGPAIR = @as(u32, 4);
pub const MAX_FORM_KEYWORD_LENGTH = @as(u32, 64);
pub const DI_CHANNEL = @as(u32, 1);
pub const DI_READ_SPOOL_JOB = @as(u32, 3);
pub const DI_MEMORYMAP_WRITE = @as(u32, 1);
pub const FORM_USER = @as(u32, 0);
pub const FORM_BUILTIN = @as(u32, 1);
pub const FORM_PRINTER = @as(u32, 2);
pub const PPCAPS_RIGHT_THEN_DOWN = @as(u32, 1);
pub const PPCAPS_BORDER_PRINT = @as(u32, 1);
pub const PPCAPS_BOOKLET_EDGE = @as(u32, 1);
pub const PPCAPS_REVERSE_PAGES_FOR_REVERSE_DUPLEX = @as(u32, 1);
pub const PPCAPS_SQUARE_SCALING = @as(u32, 1);
pub const PORT_TYPE_WRITE = @as(u32, 1);
pub const PORT_TYPE_READ = @as(u32, 2);
pub const PORT_TYPE_REDIRECTED = @as(u32, 4);
pub const PORT_TYPE_NET_ATTACHED = @as(u32, 8);
pub const PORT_STATUS_TYPE_ERROR = @as(u32, 1);
pub const PORT_STATUS_TYPE_WARNING = @as(u32, 2);
pub const PORT_STATUS_TYPE_INFO = @as(u32, 3);
pub const PORT_STATUS_OFFLINE = @as(u32, 1);
pub const PORT_STATUS_PAPER_JAM = @as(u32, 2);
pub const PORT_STATUS_PAPER_OUT = @as(u32, 3);
pub const PORT_STATUS_OUTPUT_BIN_FULL = @as(u32, 4);
pub const PORT_STATUS_PAPER_PROBLEM = @as(u32, 5);
pub const PORT_STATUS_NO_TONER = @as(u32, 6);
pub const PORT_STATUS_DOOR_OPEN = @as(u32, 7);
pub const PORT_STATUS_USER_INTERVENTION = @as(u32, 8);
pub const PORT_STATUS_OUT_OF_MEMORY = @as(u32, 9);
pub const PORT_STATUS_TONER_LOW = @as(u32, 10);
pub const PORT_STATUS_WARMING_UP = @as(u32, 11);
pub const PORT_STATUS_POWER_SAVE = @as(u32, 12);
pub const PRINTER_ENUM_DEFAULT = @as(u32, 1);
pub const PRINTER_ENUM_LOCAL = @as(u32, 2);
pub const PRINTER_ENUM_CONNECTIONS = @as(u32, 4);
pub const PRINTER_ENUM_FAVORITE = @as(u32, 4);
pub const PRINTER_ENUM_NAME = @as(u32, 8);
pub const PRINTER_ENUM_REMOTE = @as(u32, 16);
pub const PRINTER_ENUM_SHARED = @as(u32, 32);
pub const PRINTER_ENUM_NETWORK = @as(u32, 64);
pub const PRINTER_ENUM_EXPAND = @as(u32, 16384);
pub const PRINTER_ENUM_CONTAINER = @as(u32, 32768);
pub const PRINTER_ENUM_ICONMASK = @as(u32, 16711680);
pub const PRINTER_ENUM_ICON1 = @as(u32, 65536);
pub const PRINTER_ENUM_ICON2 = @as(u32, 131072);
pub const PRINTER_ENUM_ICON3 = @as(u32, 262144);
pub const PRINTER_ENUM_ICON4 = @as(u32, 524288);
pub const PRINTER_ENUM_ICON5 = @as(u32, 1048576);
pub const PRINTER_ENUM_ICON6 = @as(u32, 2097152);
pub const PRINTER_ENUM_ICON7 = @as(u32, 4194304);
pub const PRINTER_ENUM_ICON8 = @as(u32, 8388608);
pub const PRINTER_ENUM_HIDE = @as(u32, 16777216);
pub const PRINTER_ENUM_CATEGORY_ALL = @as(u32, 33554432);
pub const PRINTER_ENUM_CATEGORY_3D = @as(u32, 67108864);
pub const SPOOL_FILE_PERSISTENT = @as(u32, 1);
pub const SPOOL_FILE_TEMPORARY = @as(u32, 2);
pub const PRINTER_NOTIFY_TYPE = @as(u32, 0);
pub const JOB_NOTIFY_TYPE = @as(u32, 1);
pub const SERVER_NOTIFY_TYPE = @as(u32, 2);
pub const PRINTER_NOTIFY_FIELD_SERVER_NAME = @as(u32, 0);
pub const PRINTER_NOTIFY_FIELD_PRINTER_NAME = @as(u32, 1);
pub const PRINTER_NOTIFY_FIELD_SHARE_NAME = @as(u32, 2);
pub const PRINTER_NOTIFY_FIELD_PORT_NAME = @as(u32, 3);
pub const PRINTER_NOTIFY_FIELD_DRIVER_NAME = @as(u32, 4);
pub const PRINTER_NOTIFY_FIELD_COMMENT = @as(u32, 5);
pub const PRINTER_NOTIFY_FIELD_LOCATION = @as(u32, 6);
pub const PRINTER_NOTIFY_FIELD_DEVMODE = @as(u32, 7);
pub const PRINTER_NOTIFY_FIELD_SEPFILE = @as(u32, 8);
pub const PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR = @as(u32, 9);
pub const PRINTER_NOTIFY_FIELD_PARAMETERS = @as(u32, 10);
pub const PRINTER_NOTIFY_FIELD_DATATYPE = @as(u32, 11);
pub const PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTOR = @as(u32, 12);
pub const PRINTER_NOTIFY_FIELD_ATTRIBUTES = @as(u32, 13);
pub const PRINTER_NOTIFY_FIELD_PRIORITY = @as(u32, 14);
pub const PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY = @as(u32, 15);
pub const PRINTER_NOTIFY_FIELD_START_TIME = @as(u32, 16);
pub const PRINTER_NOTIFY_FIELD_UNTIL_TIME = @as(u32, 17);
pub const PRINTER_NOTIFY_FIELD_STATUS = @as(u32, 18);
pub const PRINTER_NOTIFY_FIELD_STATUS_STRING = @as(u32, 19);
pub const PRINTER_NOTIFY_FIELD_CJOBS = @as(u32, 20);
pub const PRINTER_NOTIFY_FIELD_AVERAGE_PPM = @as(u32, 21);
pub const PRINTER_NOTIFY_FIELD_TOTAL_PAGES = @as(u32, 22);
pub const PRINTER_NOTIFY_FIELD_PAGES_PRINTED = @as(u32, 23);
pub const PRINTER_NOTIFY_FIELD_TOTAL_BYTES = @as(u32, 24);
pub const PRINTER_NOTIFY_FIELD_BYTES_PRINTED = @as(u32, 25);
pub const PRINTER_NOTIFY_FIELD_OBJECT_GUID = @as(u32, 26);
pub const PRINTER_NOTIFY_FIELD_FRIENDLY_NAME = @as(u32, 27);
pub const PRINTER_NOTIFY_FIELD_BRANCH_OFFICE_PRINTING = @as(u32, 28);
pub const JOB_NOTIFY_FIELD_PRINTER_NAME = @as(u32, 0);
pub const JOB_NOTIFY_FIELD_MACHINE_NAME = @as(u32, 1);
pub const JOB_NOTIFY_FIELD_PORT_NAME = @as(u32, 2);
pub const JOB_NOTIFY_FIELD_USER_NAME = @as(u32, 3);
pub const JOB_NOTIFY_FIELD_NOTIFY_NAME = @as(u32, 4);
pub const JOB_NOTIFY_FIELD_DATATYPE = @as(u32, 5);
pub const JOB_NOTIFY_FIELD_PRINT_PROCESSOR = @as(u32, 6);
pub const JOB_NOTIFY_FIELD_PARAMETERS = @as(u32, 7);
pub const JOB_NOTIFY_FIELD_DRIVER_NAME = @as(u32, 8);
pub const JOB_NOTIFY_FIELD_DEVMODE = @as(u32, 9);
pub const JOB_NOTIFY_FIELD_STATUS = @as(u32, 10);
pub const JOB_NOTIFY_FIELD_STATUS_STRING = @as(u32, 11);
pub const JOB_NOTIFY_FIELD_SECURITY_DESCRIPTOR = @as(u32, 12);
pub const JOB_NOTIFY_FIELD_DOCUMENT = @as(u32, 13);
pub const JOB_NOTIFY_FIELD_PRIORITY = @as(u32, 14);
pub const JOB_NOTIFY_FIELD_POSITION = @as(u32, 15);
pub const JOB_NOTIFY_FIELD_SUBMITTED = @as(u32, 16);
pub const JOB_NOTIFY_FIELD_START_TIME = @as(u32, 17);
pub const JOB_NOTIFY_FIELD_UNTIL_TIME = @as(u32, 18);
pub const JOB_NOTIFY_FIELD_TIME = @as(u32, 19);
pub const JOB_NOTIFY_FIELD_TOTAL_PAGES = @as(u32, 20);
pub const JOB_NOTIFY_FIELD_PAGES_PRINTED = @as(u32, 21);
pub const JOB_NOTIFY_FIELD_TOTAL_BYTES = @as(u32, 22);
pub const JOB_NOTIFY_FIELD_BYTES_PRINTED = @as(u32, 23);
pub const JOB_NOTIFY_FIELD_REMOTE_JOB_ID = @as(u32, 24);
pub const SERVER_NOTIFY_FIELD_PRINT_DRIVER_ISOLATION_GROUP = @as(u32, 0);
pub const PRINTER_NOTIFY_CATEGORY_ALL = @as(u32, 4096);
pub const PRINTER_NOTIFY_CATEGORY_3D = @as(u32, 8192);
pub const PRINTER_NOTIFY_OPTIONS_REFRESH = @as(u32, 1);
pub const PRINTER_NOTIFY_INFO_DISCARDED = @as(u32, 1);
pub const BIDI_ACTION_ENUM_SCHEMA = "EnumSchema";
pub const BIDI_ACTION_GET = "Get";
pub const BIDI_ACTION_SET = "Set";
pub const BIDI_ACTION_GET_ALL = "GetAll";
pub const BIDI_ACTION_GET_WITH_ARGUMENT = "GetWithArgument";
pub const BIDI_ACCESS_ADMINISTRATOR = @as(u32, 1);
pub const BIDI_ACCESS_USER = @as(u32, 2);
pub const ERROR_BIDI_STATUS_OK = @as(u32, 0);
pub const ERROR_BIDI_ERROR_BASE = @as(u32, 13000);
pub const ERROR_BIDI_STATUS_WARNING = @as(u32, 13001);
pub const ERROR_BIDI_SCHEMA_READ_ONLY = @as(u32, 13002);
pub const ERROR_BIDI_SERVER_OFFLINE = @as(u32, 13003);
pub const ERROR_BIDI_DEVICE_OFFLINE = @as(u32, 13004);
pub const ERROR_BIDI_SCHEMA_NOT_SUPPORTED = @as(u32, 13005);
pub const ERROR_BIDI_SET_DIFFERENT_TYPE = @as(u32, 13006);
pub const ERROR_BIDI_SET_MULTIPLE_SCHEMAPATH = @as(u32, 13007);
pub const ERROR_BIDI_SET_INVALID_SCHEMAPATH = @as(u32, 13008);
pub const ERROR_BIDI_SET_UNKNOWN_FAILURE = @as(u32, 13009);
pub const ERROR_BIDI_SCHEMA_WRITE_ONLY = @as(u32, 13010);
pub const ERROR_BIDI_GET_REQUIRES_ARGUMENT = @as(u32, 13011);
pub const ERROR_BIDI_GET_ARGUMENT_NOT_SUPPORTED = @as(u32, 13012);
pub const ERROR_BIDI_GET_MISSING_ARGUMENT = @as(u32, 13013);
pub const ERROR_BIDI_DEVICE_CONFIG_UNCHANGED = @as(u32, 13014);
pub const ERROR_BIDI_NO_LOCALIZED_RESOURCES = @as(u32, 13015);
pub const ERROR_BIDI_NO_BIDI_SCHEMA_EXTENSIONS = @as(u32, 13016);
pub const ERROR_BIDI_UNSUPPORTED_CLIENT_LANGUAGE = @as(u32, 13017);
pub const ERROR_BIDI_UNSUPPORTED_RESOURCE_FORMAT = @as(u32, 13018);
pub const PRINTER_CHANGE_ADD_PRINTER = @as(u32, 1);
pub const PRINTER_CHANGE_SET_PRINTER = @as(u32, 2);
pub const PRINTER_CHANGE_DELETE_PRINTER = @as(u32, 4);
pub const PRINTER_CHANGE_FAILED_CONNECTION_PRINTER = @as(u32, 8);
pub const PRINTER_CHANGE_PRINTER = @as(u32, 255);
pub const PRINTER_CHANGE_ADD_JOB = @as(u32, 256);
pub const PRINTER_CHANGE_SET_JOB = @as(u32, 512);
pub const PRINTER_CHANGE_DELETE_JOB = @as(u32, 1024);
pub const PRINTER_CHANGE_WRITE_JOB = @as(u32, 2048);
pub const PRINTER_CHANGE_JOB = @as(u32, 65280);
pub const PRINTER_CHANGE_ADD_FORM = @as(u32, 65536);
pub const PRINTER_CHANGE_SET_FORM = @as(u32, 131072);
pub const PRINTER_CHANGE_DELETE_FORM = @as(u32, 262144);
pub const PRINTER_CHANGE_FORM = @as(u32, 458752);
pub const PRINTER_CHANGE_ADD_PORT = @as(u32, 1048576);
pub const PRINTER_CHANGE_CONFIGURE_PORT = @as(u32, 2097152);
pub const PRINTER_CHANGE_DELETE_PORT = @as(u32, 4194304);
pub const PRINTER_CHANGE_PORT = @as(u32, 7340032);
pub const PRINTER_CHANGE_ADD_PRINT_PROCESSOR = @as(u32, 16777216);
pub const PRINTER_CHANGE_DELETE_PRINT_PROCESSOR = @as(u32, 67108864);
pub const PRINTER_CHANGE_PRINT_PROCESSOR = @as(u32, 117440512);
pub const PRINTER_CHANGE_SERVER = @as(u32, 134217728);
pub const PRINTER_CHANGE_ADD_PRINTER_DRIVER = @as(u32, 268435456);
pub const PRINTER_CHANGE_SET_PRINTER_DRIVER = @as(u32, 536870912);
pub const PRINTER_CHANGE_DELETE_PRINTER_DRIVER = @as(u32, 1073741824);
pub const PRINTER_CHANGE_PRINTER_DRIVER = @as(u32, 1879048192);
pub const PRINTER_CHANGE_TIMEOUT = @as(u32, 2147483648);
pub const PRINTER_CHANGE_ALL = @as(u32, 2138570751);
pub const PRINTER_ERROR_INFORMATION = @as(u32, 2147483648);
pub const PRINTER_ERROR_WARNING = @as(u32, 1073741824);
pub const PRINTER_ERROR_SEVERE = @as(u32, 536870912);
pub const PRINTER_ERROR_OUTOFPAPER = @as(u32, 1);
pub const PRINTER_ERROR_JAM = @as(u32, 2);
pub const PRINTER_ERROR_OUTOFTONER = @as(u32, 4);
pub const SPLREG_DEFAULT_SPOOL_DIRECTORY = "DefaultSpoolDirectory";
pub const SPLREG_PORT_THREAD_PRIORITY_DEFAULT = "PortThreadPriorityDefault";
pub const SPLREG_PORT_THREAD_PRIORITY = "PortThreadPriority";
pub const SPLREG_SCHEDULER_THREAD_PRIORITY_DEFAULT = "SchedulerThreadPriorityDefault";
pub const SPLREG_SCHEDULER_THREAD_PRIORITY = "SchedulerThreadPriority";
pub const SPLREG_BEEP_ENABLED = "BeepEnabled";
pub const SPLREG_NET_POPUP = "NetPopup";
pub const SPLREG_RETRY_POPUP = "RetryPopup";
pub const SPLREG_NET_POPUP_TO_COMPUTER = "NetPopupToComputer";
pub const SPLREG_EVENT_LOG = "EventLog";
pub const SPLREG_MAJOR_VERSION = "MajorVersion";
pub const SPLREG_MINOR_VERSION = "MinorVersion";
pub const SPLREG_ARCHITECTURE = "Architecture";
pub const SPLREG_OS_VERSION = "OSVersion";
pub const SPLREG_OS_VERSIONEX = "OSVersionEx";
pub const SPLREG_DS_PRESENT = "DsPresent";
pub const SPLREG_DS_PRESENT_FOR_USER = "DsPresentForUser";
pub const SPLREG_REMOTE_FAX = "RemoteFax";
pub const SPLREG_RESTART_JOB_ON_POOL_ERROR = "RestartJobOnPoolError";
pub const SPLREG_RESTART_JOB_ON_POOL_ENABLED = "RestartJobOnPoolEnabled";
pub const SPLREG_DNS_MACHINE_NAME = "DNSMachineName";
pub const SPLREG_ALLOW_USER_MANAGEFORMS = "AllowUserManageForms";
pub const SPLREG_WEBSHAREMGMT = "WebShareMgmt";
pub const SPLREG_PRINT_DRIVER_ISOLATION_GROUPS = "PrintDriverIsolationGroups";
pub const SPLREG_PRINT_DRIVER_ISOLATION_TIME_BEFORE_RECYCLE = "PrintDriverIsolationTimeBeforeRecycle";
pub const SPLREG_PRINT_DRIVER_ISOLATION_MAX_OBJECTS_BEFORE_RECYCLE = "PrintDriverIsolationMaxobjsBeforeRecycle";
pub const SPLREG_PRINT_DRIVER_ISOLATION_IDLE_TIMEOUT = "PrintDriverIsolationIdleTimeout";
pub const SPLREG_PRINT_DRIVER_ISOLATION_EXECUTION_POLICY = "PrintDriverIsolationExecutionPolicy";
pub const SPLREG_PRINT_DRIVER_ISOLATION_OVERRIDE_POLICY = "PrintDriverIsolationOverrideCompat";
pub const SPLREG_PRINT_QUEUE_V4_DRIVER_DIRECTORY = "PrintQueueV4DriverDirectory";
pub const JOB_ACCESS_ADMINISTER = @as(u32, 16);
pub const JOB_ACCESS_READ = @as(u32, 32);
pub const SPLDS_SPOOLER_KEY = "DsSpooler";
pub const SPLDS_DRIVER_KEY = "DsDriver";
pub const SPLDS_USER_KEY = "DsUser";
pub const SPLDS_ASSET_NUMBER = "assetNumber";
pub const SPLDS_BYTES_PER_MINUTE = "bytesPerMinute";
pub const SPLDS_DESCRIPTION = "description";
pub const SPLDS_DRIVER_NAME = "driverName";
pub const SPLDS_DRIVER_VERSION = "driverVersion";
pub const SPLDS_LOCATION = "location";
pub const SPLDS_PORT_NAME = "portName";
pub const SPLDS_PRINT_ATTRIBUTES = "printAttributes";
pub const SPLDS_PRINT_BIN_NAMES = "printBinNames";
pub const SPLDS_PRINT_COLLATE = "printCollate";
pub const SPLDS_PRINT_COLOR = "printColor";
pub const SPLDS_PRINT_DUPLEX_SUPPORTED = "printDuplexSupported";
pub const SPLDS_PRINT_END_TIME = "printEndTime";
pub const SPLDS_PRINTER_CLASS = "printQueue";
pub const SPLDS_PRINTER_NAME = "printerName";
pub const SPLDS_PRINT_KEEP_PRINTED_JOBS = "printKeepPrintedJobs";
pub const SPLDS_PRINT_LANGUAGE = "printLanguage";
pub const SPLDS_PRINT_MAC_ADDRESS = "printMACAddress";
pub const SPLDS_PRINT_MAX_X_EXTENT = "printMaxXExtent";
pub const SPLDS_PRINT_MAX_Y_EXTENT = "printMaxYExtent";
pub const SPLDS_PRINT_MAX_RESOLUTION_SUPPORTED = "printMaxResolutionSupported";
pub const SPLDS_PRINT_MEDIA_READY = "printMediaReady";
pub const SPLDS_PRINT_MEDIA_SUPPORTED = "printMediaSupported";
pub const SPLDS_PRINT_MEMORY = "printMemory";
pub const SPLDS_PRINT_MIN_X_EXTENT = "printMinXExtent";
pub const SPLDS_PRINT_MIN_Y_EXTENT = "printMinYExtent";
pub const SPLDS_PRINT_NETWORK_ADDRESS = "printNetworkAddress";
pub const SPLDS_PRINT_NOTIFY = "printNotify";
pub const SPLDS_PRINT_NUMBER_UP = "printNumberUp";
pub const SPLDS_PRINT_ORIENTATIONS_SUPPORTED = "printOrientationsSupported";
pub const SPLDS_PRINT_OWNER = "printOwner";
pub const SPLDS_PRINT_PAGES_PER_MINUTE = "printPagesPerMinute";
pub const SPLDS_PRINT_RATE = "printRate";
pub const SPLDS_PRINT_RATE_UNIT = "printRateUnit";
pub const SPLDS_PRINT_SEPARATOR_FILE = "printSeparatorFile";
pub const SPLDS_PRINT_SHARE_NAME = "printShareName";
pub const SPLDS_PRINT_SPOOLING = "printSpooling";
pub const SPLDS_PRINT_STAPLING_SUPPORTED = "printStaplingSupported";
pub const SPLDS_PRINT_START_TIME = "printStartTime";
pub const SPLDS_PRINT_STATUS = "printStatus";
pub const SPLDS_PRIORITY = "priority";
pub const SPLDS_SERVER_NAME = "serverName";
pub const SPLDS_SHORT_SERVER_NAME = "shortServerName";
pub const SPLDS_UNC_NAME = "uNCName";
pub const SPLDS_URL = "url";
pub const SPLDS_FLAGS = "flags";
pub const SPLDS_VERSION_NUMBER = "versionNumber";
pub const SPLDS_PRINTER_NAME_ALIASES = "printerNameAliases";
pub const SPLDS_PRINTER_LOCATIONS = "printerLocations";
pub const SPLDS_PRINTER_MODEL = "printerModel";
pub const PRINTER_CONNECTION_MISMATCH = @as(u32, 32);
pub const PRINTER_CONNECTION_NO_UI = @as(u32, 64);
pub const IPDFP_COPY_ALL_FILES = @as(u32, 1);
pub const UPDP_SILENT_UPLOAD = @as(u32, 1);
pub const UPDP_UPLOAD_ALWAYS = @as(u32, 2);
pub const UPDP_CHECK_DRIVERSTORE = @as(u32, 4);
pub const MS_PRINT_JOB_OUTPUT_FILE = "MsPrintJobOutputFile";
pub const DISPID_PRINTSCHEMA_ELEMENT = @as(u32, 10000);
pub const DISPID_PRINTSCHEMA_ELEMENT_XMLNODE = @as(u32, 10001);
pub const DISPID_PRINTSCHEMA_ELEMENT_NAME = @as(u32, 10002);
pub const DISPID_PRINTSCHEMA_ELEMENT_NAMESPACEURI = @as(u32, 10003);
pub const DISPID_PRINTSCHEMA_DISPLAYABLEELEMENT = @as(u32, 10100);
pub const DISPID_PRINTSCHEMA_DISPLAYABLEELEMENT_DISPLAYNAME = @as(u32, 10101);
pub const DISPID_PRINTSCHEMA_OPTION = @as(u32, 10200);
pub const DISPID_PRINTSCHEMA_OPTION_SELECTED = @as(u32, 10201);
pub const DISPID_PRINTSCHEMA_OPTION_CONSTRAINED = @as(u32, 10202);
pub const DISPID_PRINTSCHEMA_OPTION_GETPROPERTYVALUE = @as(u32, 10203);
pub const DISPID_PRINTSCHEMA_PAGEMEDIASIZEOPTION = @as(u32, 10300);
pub const DISPID_PRINTSCHEMA_PAGEMEDIASIZEOPTION_WIDTH = @as(u32, 10301);
pub const DISPID_PRINTSCHEMA_PAGEMEDIASIZEOPTION_HEIGHT = @as(u32, 10302);
pub const DISPID_PRINTSCHEMA_NUPOPTION = @as(u32, 10400);
pub const DISPID_PRINTSCHEMA_NUPOPTION_PAGESPERSHEET = @as(u32, 10401);
pub const DISPID_PRINTSCHEMA_OPTIONCOLLECTION = @as(u32, 10500);
pub const DISPID_PRINTSCHEMA_OPTIONCOLLECTION_COUNT = @as(u32, 10501);
pub const DISPID_PRINTSCHEMA_OPTIONCOLLECTION_GETAT = @as(u32, 10502);
pub const DISPID_PRINTSCHEMA_FEATURE = @as(u32, 10600);
pub const DISPID_PRINTSCHEMA_FEATURE_SELECTEDOPTION = @as(u32, 10601);
pub const DISPID_PRINTSCHEMA_FEATURE_SELECTIONTYPE = @as(u32, 10602);
pub const DISPID_PRINTSCHEMA_FEATURE_GETOPTION = @as(u32, 10603);
pub const DISPID_PRINTSCHEMA_FEATURE_DISPLAYUI = @as(u32, 10604);
pub const DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE = @as(u32, 10700);
pub const DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE_IMAGEABLE_WIDTH = @as(u32, 10701);
pub const DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE_IMAGEABLE_HEIGHT = @as(u32, 10702);
pub const DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE_ORIGIN_WIDTH = @as(u32, 10703);
pub const DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE_ORIGIN_HEIGHT = @as(u32, 10704);
pub const DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE_EXTENT_WIDTH = @as(u32, 10705);
pub const DISPID_PRINTSCHEMA_PAGEIMAGEABLESIZE_EXTENT_HEIGHT = @as(u32, 10706);
pub const DISPID_PRINTSCHEMA_CAPABILITIES = @as(u32, 10800);
pub const DISPID_PRINTSCHEMA_CAPABILITIES_GETFEATURE_KEYNAME = @as(u32, 10801);
pub const DISPID_PRINTSCHEMA_CAPABILITIES_GETFEATURE = @as(u32, 10802);
pub const DISPID_PRINTSCHEMA_CAPABILITIES_PAGEIMAGEABLESIZE = @as(u32, 10803);
pub const DISPID_PRINTSCHEMA_CAPABILITIES_JOBCOPIESMINVALUE = @as(u32, 10804);
pub const DISPID_PRINTSCHEMA_CAPABILITIES_JOBCOPIESMAXVALUE = @as(u32, 10805);
pub const DISPID_PRINTSCHEMA_CAPABILITIES_GETSELECTEDOPTION = @as(u32, 10806);
pub const DISPID_PRINTSCHEMA_CAPABILITIES_GETOPTIONS = @as(u32, 10807);
pub const DISPID_PRINTSCHEMA_CAPABILITIES_GETPARAMETERDEFINITION = @as(u32, 10808);
pub const DISPID_PRINTSCHEMA_ASYNCOPERATION = @as(u32, 10900);
pub const DISPID_PRINTSCHEMA_ASYNCOPERATION_START = @as(u32, 10901);
pub const DISPID_PRINTSCHEMA_ASYNCOPERATION_CANCEL = @as(u32, 10902);
pub const DISPID_PRINTSCHEMA_TICKET = @as(u32, 11000);
pub const DISPID_PRINTSCHEMA_TICKET_GETFEATURE_KEYNAME = @as(u32, 11001);
pub const DISPID_PRINTSCHEMA_TICKET_GETFEATURE = @as(u32, 11002);
pub const DISPID_PRINTSCHEMA_TICKET_VALIDATEASYNC = @as(u32, 11003);
pub const DISPID_PRINTSCHEMA_TICKET_COMMITASYNC = @as(u32, 11004);
pub const DISPID_PRINTSCHEMA_TICKET_NOTIFYXMLCHANGED = @as(u32, 11005);
pub const DISPID_PRINTSCHEMA_TICKET_GETCAPABILITIES = @as(u32, 11006);
pub const DISPID_PRINTSCHEMA_TICKET_JOBCOPIESALLDOCUMENTS = @as(u32, 11007);
pub const DISPID_PRINTSCHEMA_TICKET_GETPARAMETERINITIALIZER = @as(u32, 11008);
pub const DISPID_PRINTSCHEMA_ASYNCOPERATIONEVENT = @as(u32, 11100);
pub const DISPID_PRINTSCHEMA_ASYNCOPERATIONEVENT_COMPLETED = @as(u32, 11101);
pub const DISPID_PRINTERSCRIPTABLESEQUENTIALSTREAM = @as(u32, 11200);
pub const DISPID_PRINTERSCRIPTABLESEQUENTIALSTREAM_READ = @as(u32, 11201);
pub const DISPID_PRINTERSCRIPTABLESEQUENTIALSTREAM_WRITE = @as(u32, 11202);
pub const DISPID_PRINTERSCRIPTABLESTREAM = @as(u32, 11300);
pub const DISPID_PRINTERSCRIPTABLESTREAM_COMMIT = @as(u32, 11301);
pub const DISPID_PRINTERSCRIPTABLESTREAM_SEEK = @as(u32, 11302);
pub const DISPID_PRINTERSCRIPTABLESTREAM_SETSIZE = @as(u32, 11303);
pub const DISPID_PRINTERPROPERTYBAG = @as(u32, 11400);
pub const DISPID_PRINTERPROPERTYBAG_GETBOOL = @as(u32, 11401);
pub const DISPID_PRINTERPROPERTYBAG_SETBOOL = @as(u32, 11402);
pub const DISPID_PRINTERPROPERTYBAG_GETINT32 = @as(u32, 11403);
pub const DISPID_PRINTERPROPERTYBAG_SETINT32 = @as(u32, 11404);
pub const DISPID_PRINTERPROPERTYBAG_GETSTRING = @as(u32, 11405);
pub const DISPID_PRINTERPROPERTYBAG_SETSTRING = @as(u32, 11406);
pub const DISPID_PRINTERPROPERTYBAG_GETBYTES = @as(u32, 11407);
pub const DISPID_PRINTERPROPERTYBAG_SETBYTES = @as(u32, 11408);
pub const DISPID_PRINTERPROPERTYBAG_GETREADSTREAM = @as(u32, 11409);
pub const DISPID_PRINTERPROPERTYBAG_GETWRITESTREAM = @as(u32, 11410);
pub const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETSTREAMASXML = @as(u32, 11411);
pub const DISPID_PRINTERSCRIPTABLEPROPERTYBAG = @as(u32, 11500);
pub const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETBOOL = @as(u32, 11501);
pub const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_SETBOOL = @as(u32, 11502);
pub const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETINT32 = @as(u32, 11503);
pub const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_SETINT32 = @as(u32, 11504);
pub const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETSTRING = @as(u32, 11505);
pub const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_SETSTRING = @as(u32, 11506);
pub const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETBYTES = @as(u32, 11507);
pub const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_SETBYTES = @as(u32, 11508);
pub const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETREADSTREAM = @as(u32, 11509);
pub const DISPID_PRINTERSCRIPTABLEPROPERTYBAG_GETWRITESTREAM = @as(u32, 11510);
pub const DISPID_PRINTERQUEUE = @as(u32, 11600);
pub const DISPID_PRINTERQUEUE_HANDLE = @as(u32, 11601);
pub const DISPID_PRINTERQUEUE_NAME = @as(u32, 11602);
pub const DISPID_PRINTERQUEUE_SENDBIDIQUERY = @as(u32, 11603);
pub const DISPID_PRINTERQUEUE_GETPROPERTIES = @as(u32, 11604);
pub const DISPID_PRINTERQUEUE_SENDBIDISETREQUESTASYNC = @as(u32, 11605);
pub const DISPID_PRINTERQUEUE_GETPRINTERQUEUEVIEW = @as(u32, 11606);
pub const DISPID_PRINTERQUEUEEVENT = @as(u32, 11700);
pub const DISPID_PRINTERQUEUEEVENT_ONBIDIRESPONSERECEIVED = @as(u32, 11701);
pub const DISPID_PRINTEREXTENSION_CONTEXT = @as(u32, 11800);
pub const DISPID_PRINTEREXTENSION_CONTEXT_PRINTERQUEUE = @as(u32, 11801);
pub const DISPID_PRINTEREXTENSION_CONTEXT_PRINTSCHEMATICKET = @as(u32, 11802);
pub const DISPID_PRINTEREXTENSION_CONTEXT_DRIVERPROPERTIES = @as(u32, 11803);
pub const DISPID_PRINTEREXTENSION_CONTEXT_USERPROPERTIES = @as(u32, 11804);
pub const DISPID_PRINTEREXTENSION_REQUEST = @as(u32, 11900);
pub const DISPID_PRINTEREXTENSION_REQUEST_CANCEL = @as(u32, 11901);
pub const DISPID_PRINTEREXTENSION_REQUEST_COMPLETE = @as(u32, 11902);
pub const DISPID_PRINTEREXTENSION_EVENTARGS = @as(u32, 12000);
pub const DISPID_PRINTEREXTENSION_EVENTARGS_BIDINOTIFICATION = @as(u32, 12001);
pub const DISPID_PRINTEREXTENSION_EVENTARGS_REASONID = @as(u32, 12002);
pub const DISPID_PRINTEREXTENSION_EVENTARGS_REQUEST = @as(u32, 12003);
pub const DISPID_PRINTEREXTENSION_EVENTARGS_SOURCEAPPLICATION = @as(u32, 12004);
pub const DISPID_PRINTEREXTENSION_EVENTARGS_DETAILEDREASONID = @as(u32, 12005);
pub const DISPID_PRINTEREXTENSION_EVENTARGS_WINDOWMODAL = @as(u32, 12006);
pub const DISPID_PRINTEREXTENSION_EVENTARGS_WINDOWPARENT = @as(u32, 12007);
pub const DISPID_PRINTEREXTENSION_CONTEXTCOLLECTION = @as(u32, 12100);
pub const DISPID_PRINTEREXTENSION_CONTEXTCOLLECTION_COUNT = @as(u32, 12101);
pub const DISPID_PRINTEREXTENSION_CONTEXTCOLLECTION_GETAT = @as(u32, 12102);
pub const DISPID_PRINTEREXTENSION_EVENT = @as(u32, 12200);
pub const DISPID_PRINTEREXTENSION_EVENT_ONDRIVEREVENT = @as(u32, 12201);
pub const DISPID_PRINTEREXTENSION_EVENT_ONPRINTERQUEUESENUMERATED = @as(u32, 12202);
pub const DISPID_PRINTERSCRIPTCONTEXT = @as(u32, 12300);
pub const DISPID_PRINTERSCRIPTCONTEXT_DRIVERPROPERTIES = @as(u32, 12301);
pub const DISPID_PRINTERSCRIPTCONTEXT_QUEUEPROPERTIES = @as(u32, 12302);
pub const DISPID_PRINTERSCRIPTCONTEXT_USERPROPERTIES = @as(u32, 12303);
pub const DISPID_PRINTSCHEMA_PARAMETERINITIALIZER = @as(u32, 12400);
pub const DISPID_PRINTSCHEMA_PARAMETERINITIALIZER_VALUE = @as(u32, 12401);
pub const DISPID_PRINTSCHEMA_PARAMETERDEFINITION = @as(u32, 12500);
pub const DISPID_PRINTSCHEMA_PARAMETERDEFINITION_USERINPUTREQUIRED = @as(u32, 12501);
pub const DISPID_PRINTSCHEMA_PARAMETERDEFINITION_UNITTYPE = @as(u32, 12502);
pub const DISPID_PRINTSCHEMA_PARAMETERDEFINITION_DATATYPE = @as(u32, 12503);
pub const DISPID_PRINTSCHEMA_PARAMETERDEFINITION_RANGEMIN = @as(u32, 12504);
pub const DISPID_PRINTSCHEMA_PARAMETERDEFINITION_RANGEMAX = @as(u32, 12505);
pub const DISPID_PRINTJOBCOLLECTION = @as(u32, 12600);
pub const DISPID_PRINTJOBCOLLECTION_COUNT = @as(u32, 12601);
pub const DISPID_PRINTJOBCOLLECTION_GETAT = @as(u32, 12602);
pub const DISPID_PRINTERQUEUEVIEW = @as(u32, 12700);
pub const DISPID_PRINTERQUEUEVIEW_SETVIEWRANGE = @as(u32, 12701);
pub const DISPID_PRINTERQUEUEVIEW_EVENT = @as(u32, 12800);
pub const DISPID_PRINTERQUEUEVIEW_EVENT_ONCHANGED = @as(u32, 12801);
pub const NOTIFICATION_RELEASE = Guid.initString("ba9a5027-a70e-4ae7-9b7d-eb3e06ad4157");
pub const PRINT_APP_BIDI_NOTIFY_CHANNEL = Guid.initString("2abad223-b994-4aca-82fc-4571b1b585ac");
pub const PRINT_PORT_MONITOR_NOTIFY_CHANNEL = Guid.initString("25df3b0e-74a9-47f5-80ce-79b4b1eb5c58");
pub const GUID_DEVINTERFACE_USBPRINT = Guid.initString("28d78fad-5a12-11d1-ae5b-0000f803a8c2");
pub const GUID_DEVINTERFACE_IPPUSB_PRINT = Guid.initString("f2f40381-f46d-4e51-bce7-62de6cf2d098");
pub const CLSID_XPSRASTERIZER_FACTORY = Guid.initString("503e79bf-1d09-4764-9d72-1eb0c65967c6");

//--------------------------------------------------------------------------------
// Section: Types (339)
//--------------------------------------------------------------------------------
pub const PRINTER_ACCESS_RIGHTS = enum(u32) {
    PRINTER_ALL_ACCESS = 983052,
    PRINTER_READ = 131080,
    // PRINTER_WRITE = 131080, this enum value conflicts with PRINTER_READ
    // PRINTER_EXECUTE = 131080, this enum value conflicts with PRINTER_READ
    SERVER_ALL_ACCESS = 983043,
    SERVER_READ = 131074,
    SERVER_WRITE = 131075,
    // SERVER_EXECUTE = 131074, this enum value conflicts with SERVER_READ
    PRINTER_DELETE = 65536,
    PRINTER_READ_CONTROL = 131072,
    PRINTER_WRITE_DAC = 262144,
    PRINTER_WRITE_OWNER = 524288,
    PRINTER_SYNCHRONIZE = 1048576,
    PRINTER_STANDARD_RIGHTS_REQUIRED = 983040,
    // PRINTER_STANDARD_RIGHTS_READ = 131072, this enum value conflicts with PRINTER_READ_CONTROL
    // PRINTER_STANDARD_RIGHTS_WRITE = 131072, this enum value conflicts with PRINTER_READ_CONTROL
    // PRINTER_STANDARD_RIGHTS_EXECUTE = 131072, this enum value conflicts with PRINTER_READ_CONTROL
    SERVER_ACCESS_ADMINISTER = 1,
    SERVER_ACCESS_ENUMERATE = 2,
    PRINTER_ACCESS_ADMINISTER = 4,
    PRINTER_ACCESS_USE = 8,
    PRINTER_ACCESS_MANAGE_LIMITED = 64,
    _,
    pub fn initFlags(o: struct {
        PRINTER_ALL_ACCESS: u1 = 0,
        PRINTER_READ: u1 = 0,
        SERVER_ALL_ACCESS: u1 = 0,
        SERVER_READ: u1 = 0,
        SERVER_WRITE: u1 = 0,
        PRINTER_DELETE: u1 = 0,
        PRINTER_READ_CONTROL: u1 = 0,
        PRINTER_WRITE_DAC: u1 = 0,
        PRINTER_WRITE_OWNER: u1 = 0,
        PRINTER_SYNCHRONIZE: u1 = 0,
        PRINTER_STANDARD_RIGHTS_REQUIRED: u1 = 0,
        SERVER_ACCESS_ADMINISTER: u1 = 0,
        SERVER_ACCESS_ENUMERATE: u1 = 0,
        PRINTER_ACCESS_ADMINISTER: u1 = 0,
        PRINTER_ACCESS_USE: u1 = 0,
        PRINTER_ACCESS_MANAGE_LIMITED: u1 = 0,
    }) PRINTER_ACCESS_RIGHTS {
        return @as(PRINTER_ACCESS_RIGHTS, @enumFromInt((if (o.PRINTER_ALL_ACCESS == 1) @intFromEnum(PRINTER_ACCESS_RIGHTS.PRINTER_ALL_ACCESS) else 0) | (if (o.PRINTER_READ == 1) @intFromEnum(PRINTER_ACCESS_RIGHTS.PRINTER_READ) else 0) | (if (o.SERVER_ALL_ACCESS == 1) @intFromEnum(PRINTER_ACCESS_RIGHTS.SERVER_ALL_ACCESS) else 0) | (if (o.SERVER_READ == 1) @intFromEnum(PRINTER_ACCESS_RIGHTS.SERVER_READ) else 0) | (if (o.SERVER_WRITE == 1) @intFromEnum(PRINTER_ACCESS_RIGHTS.SERVER_WRITE) else 0) | (if (o.PRINTER_DELETE == 1) @intFromEnum(PRINTER_ACCESS_RIGHTS.PRINTER_DELETE) else 0) | (if (o.PRINTER_READ_CONTROL == 1) @intFromEnum(PRINTER_ACCESS_RIGHTS.PRINTER_READ_CONTROL) else 0) | (if (o.PRINTER_WRITE_DAC == 1) @intFromEnum(PRINTER_ACCESS_RIGHTS.PRINTER_WRITE_DAC) else 0) | (if (o.PRINTER_WRITE_OWNER == 1) @intFromEnum(PRINTER_ACCESS_RIGHTS.PRINTER_WRITE_OWNER) else 0) | (if (o.PRINTER_SYNCHRONIZE == 1) @intFromEnum(PRINTER_ACCESS_RIGHTS.PRINTER_SYNCHRONIZE) else 0) | (if (o.PRINTER_STANDARD_RIGHTS_REQUIRED == 1) @intFromEnum(PRINTER_ACCESS_RIGHTS.PRINTER_STANDARD_RIGHTS_REQUIRED) else 0) | (if (o.SERVER_ACCESS_ADMINISTER == 1) @intFromEnum(PRINTER_ACCESS_RIGHTS.SERVER_ACCESS_ADMINISTER) else 0) | (if (o.SERVER_ACCESS_ENUMERATE == 1) @intFromEnum(PRINTER_ACCESS_RIGHTS.SERVER_ACCESS_ENUMERATE) else 0) | (if (o.PRINTER_ACCESS_ADMINISTER == 1) @intFromEnum(PRINTER_ACCESS_RIGHTS.PRINTER_ACCESS_ADMINISTER) else 0) | (if (o.PRINTER_ACCESS_USE == 1) @intFromEnum(PRINTER_ACCESS_RIGHTS.PRINTER_ACCESS_USE) else 0) | (if (o.PRINTER_ACCESS_MANAGE_LIMITED == 1) @intFromEnum(PRINTER_ACCESS_RIGHTS.PRINTER_ACCESS_MANAGE_LIMITED) else 0)));
    }
};
pub const PRINTER_ALL_ACCESS = PRINTER_ACCESS_RIGHTS.PRINTER_ALL_ACCESS;
pub const PRINTER_READ = PRINTER_ACCESS_RIGHTS.PRINTER_READ;
pub const PRINTER_WRITE = PRINTER_ACCESS_RIGHTS.PRINTER_READ;
pub const PRINTER_EXECUTE = PRINTER_ACCESS_RIGHTS.PRINTER_READ;
pub const SERVER_ALL_ACCESS = PRINTER_ACCESS_RIGHTS.SERVER_ALL_ACCESS;
pub const SERVER_READ = PRINTER_ACCESS_RIGHTS.SERVER_READ;
pub const SERVER_WRITE = PRINTER_ACCESS_RIGHTS.SERVER_WRITE;
pub const SERVER_EXECUTE = PRINTER_ACCESS_RIGHTS.SERVER_READ;
pub const PRINTER_DELETE = PRINTER_ACCESS_RIGHTS.PRINTER_DELETE;
pub const PRINTER_READ_CONTROL = PRINTER_ACCESS_RIGHTS.PRINTER_READ_CONTROL;
pub const PRINTER_WRITE_DAC = PRINTER_ACCESS_RIGHTS.PRINTER_WRITE_DAC;
pub const PRINTER_WRITE_OWNER = PRINTER_ACCESS_RIGHTS.PRINTER_WRITE_OWNER;
pub const PRINTER_SYNCHRONIZE = PRINTER_ACCESS_RIGHTS.PRINTER_SYNCHRONIZE;
pub const PRINTER_STANDARD_RIGHTS_REQUIRED = PRINTER_ACCESS_RIGHTS.PRINTER_STANDARD_RIGHTS_REQUIRED;
pub const PRINTER_STANDARD_RIGHTS_READ = PRINTER_ACCESS_RIGHTS.PRINTER_READ_CONTROL;
pub const PRINTER_STANDARD_RIGHTS_WRITE = PRINTER_ACCESS_RIGHTS.PRINTER_READ_CONTROL;
pub const PRINTER_STANDARD_RIGHTS_EXECUTE = PRINTER_ACCESS_RIGHTS.PRINTER_READ_CONTROL;
pub const SERVER_ACCESS_ADMINISTER = PRINTER_ACCESS_RIGHTS.SERVER_ACCESS_ADMINISTER;
pub const SERVER_ACCESS_ENUMERATE = PRINTER_ACCESS_RIGHTS.SERVER_ACCESS_ENUMERATE;
pub const PRINTER_ACCESS_ADMINISTER = PRINTER_ACCESS_RIGHTS.PRINTER_ACCESS_ADMINISTER;
pub const PRINTER_ACCESS_USE = PRINTER_ACCESS_RIGHTS.PRINTER_ACCESS_USE;
pub const PRINTER_ACCESS_MANAGE_LIMITED = PRINTER_ACCESS_RIGHTS.PRINTER_ACCESS_MANAGE_LIMITED;

const CLSID_BidiRequest_Value = Guid.initString("b9162a23-45f9-47cc-80f5-fe0fe9b9e1a2");
pub const CLSID_BidiRequest = &CLSID_BidiRequest_Value;

const CLSID_BidiRequestContainer_Value = Guid.initString("fc5b8a24-db05-4a01-8388-22edf6c2bbba");
pub const CLSID_BidiRequestContainer = &CLSID_BidiRequestContainer_Value;

const CLSID_BidiSpl_Value = Guid.initString("2a614240-a4c5-4c33-bd87-1bc709331639");
pub const CLSID_BidiSpl = &CLSID_BidiSpl_Value;

const IID_IBidiRequest_Value = Guid.initString("8f348bd7-4b47-4755-8a9d-0f422df3dc89");
pub const IID_IBidiRequest = &IID_IBidiRequest_Value;
pub const IBidiRequest = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetSchema: *const fn (
            self: *const IBidiRequest,
            psz_schema: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInputData: *const fn (
            self: *const IBidiRequest,
            dw_type: u32,
            p_data: ?*const u8,
            u_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResult: *const fn (
            self: *const IBidiRequest,
            phr: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputData: *const fn (
            self: *const IBidiRequest,
            dw_index: u32,
            ppsz_schema: ?*?PWSTR,
            pdw_type: ?*u32,
            pp_data: ?*?*u8,
            u_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumCount: *const fn (
            self: *const IBidiRequest,
            pdw_total: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setSchema(self: *const T, psz_schema_: ?[*:0]const u16) HRESULT {
                return @as(*const IBidiRequest.VTable, @ptrCast(self.vtable)).SetSchema(@as(*const IBidiRequest, @ptrCast(self)), psz_schema_);
            }
            pub inline fn setInputData(self: *const T, dw_type_: u32, p_data_: ?*const u8, u_size_: u32) HRESULT {
                return @as(*const IBidiRequest.VTable, @ptrCast(self.vtable)).SetInputData(@as(*const IBidiRequest, @ptrCast(self)), dw_type_, p_data_, u_size_);
            }
            pub inline fn getResult(self: *const T, phr_: ?*HRESULT) HRESULT {
                return @as(*const IBidiRequest.VTable, @ptrCast(self.vtable)).GetResult(@as(*const IBidiRequest, @ptrCast(self)), phr_);
            }
            pub inline fn getOutputData(self: *const T, dw_index_: u32, ppsz_schema_: ?*?PWSTR, pdw_type_: ?*u32, pp_data_: ?*?*u8, u_size_: ?*u32) HRESULT {
                return @as(*const IBidiRequest.VTable, @ptrCast(self.vtable)).GetOutputData(@as(*const IBidiRequest, @ptrCast(self)), dw_index_, ppsz_schema_, pdw_type_, pp_data_, u_size_);
            }
            pub inline fn getEnumCount(self: *const T, pdw_total_: ?*u32) HRESULT {
                return @as(*const IBidiRequest.VTable, @ptrCast(self.vtable)).GetEnumCount(@as(*const IBidiRequest, @ptrCast(self)), pdw_total_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IBidiRequestContainer_Value = Guid.initString("d752f6c0-94a8-4275-a77d-8f1d1a1121ae");
pub const IID_IBidiRequestContainer = &IID_IBidiRequestContainer_Value;
pub const IBidiRequestContainer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddRequest: *const fn (
            self: *const IBidiRequestContainer,
            p_request: ?*IBidiRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumObject: *const fn (
            self: *const IBidiRequestContainer,
            ppenum: ?*?*IEnumUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRequestCount: *const fn (
            self: *const IBidiRequestContainer,
            pu_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addRequest(self: *const T, p_request_: ?*IBidiRequest) HRESULT {
                return @as(*const IBidiRequestContainer.VTable, @ptrCast(self.vtable)).AddRequest(@as(*const IBidiRequestContainer, @ptrCast(self)), p_request_);
            }
            pub inline fn getEnumObject(self: *const T, ppenum_: ?*?*IEnumUnknown) HRESULT {
                return @as(*const IBidiRequestContainer.VTable, @ptrCast(self.vtable)).GetEnumObject(@as(*const IBidiRequestContainer, @ptrCast(self)), ppenum_);
            }
            pub inline fn getRequestCount(self: *const T, pu_count_: ?*u32) HRESULT {
                return @as(*const IBidiRequestContainer.VTable, @ptrCast(self.vtable)).GetRequestCount(@as(*const IBidiRequestContainer, @ptrCast(self)), pu_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IBidiSpl_Value = Guid.initString("d580dc0e-de39-4649-baa8-bf0b85a03a97");
pub const IID_IBidiSpl = &IID_IBidiSpl_Value;
pub const IBidiSpl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BindDevice: *const fn (
            self: *const IBidiSpl,
            psz_device_name: ?[*:0]const u16,
            dw_access: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnbindDevice: *const fn (
            self: *const IBidiSpl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendRecv: *const fn (
            self: *const IBidiSpl,
            psz_action: ?[*:0]const u16,
            p_request: ?*IBidiRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MultiSendRecv: *const fn (
            self: *const IBidiSpl,
            psz_action: ?[*:0]const u16,
            p_request_container: ?*IBidiRequestContainer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn bindDevice(self: *const T, psz_device_name_: ?[*:0]const u16, dw_access_: u32) HRESULT {
                return @as(*const IBidiSpl.VTable, @ptrCast(self.vtable)).BindDevice(@as(*const IBidiSpl, @ptrCast(self)), psz_device_name_, dw_access_);
            }
            pub inline fn unbindDevice(self: *const T) HRESULT {
                return @as(*const IBidiSpl.VTable, @ptrCast(self.vtable)).UnbindDevice(@as(*const IBidiSpl, @ptrCast(self)));
            }
            pub inline fn sendRecv(self: *const T, psz_action_: ?[*:0]const u16, p_request_: ?*IBidiRequest) HRESULT {
                return @as(*const IBidiSpl.VTable, @ptrCast(self.vtable)).SendRecv(@as(*const IBidiSpl, @ptrCast(self)), psz_action_, p_request_);
            }
            pub inline fn multiSendRecv(self: *const T, psz_action_: ?[*:0]const u16, p_request_container_: ?*IBidiRequestContainer) HRESULT {
                return @as(*const IBidiSpl.VTable, @ptrCast(self.vtable)).MultiSendRecv(@as(*const IBidiSpl, @ptrCast(self)), psz_action_, p_request_container_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IBidiSpl2_Value = Guid.initString("0e8f51b8-8273-4906-8e7b-be453ffd2e2b");
pub const IID_IBidiSpl2 = &IID_IBidiSpl2_Value;
pub const IBidiSpl2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BindDevice: *const fn (
            self: *const IBidiSpl2,
            psz_device_name: ?[*:0]const u16,
            dw_access: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnbindDevice: *const fn (
            self: *const IBidiSpl2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendRecvXMLString: *const fn (
            self: *const IBidiSpl2,
            bstr_request: ?BSTR,
            pbstr_response: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendRecvXMLStream: *const fn (
            self: *const IBidiSpl2,
            p_s_request: ?*IStream,
            pp_s_response: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn bindDevice(self: *const T, psz_device_name_: ?[*:0]const u16, dw_access_: u32) HRESULT {
                return @as(*const IBidiSpl2.VTable, @ptrCast(self.vtable)).BindDevice(@as(*const IBidiSpl2, @ptrCast(self)), psz_device_name_, dw_access_);
            }
            pub inline fn unbindDevice(self: *const T) HRESULT {
                return @as(*const IBidiSpl2.VTable, @ptrCast(self.vtable)).UnbindDevice(@as(*const IBidiSpl2, @ptrCast(self)));
            }
            pub inline fn sendRecvXMLString(self: *const T, bstr_request_: ?BSTR, pbstr_response_: ?*?BSTR) HRESULT {
                return @as(*const IBidiSpl2.VTable, @ptrCast(self.vtable)).SendRecvXMLString(@as(*const IBidiSpl2, @ptrCast(self)), bstr_request_, pbstr_response_);
            }
            pub inline fn sendRecvXMLStream(self: *const T, p_s_request_: ?*IStream, pp_s_response_: ?*?*IStream) HRESULT {
                return @as(*const IBidiSpl2.VTable, @ptrCast(self.vtable)).SendRecvXMLStream(@as(*const IBidiSpl2, @ptrCast(self)), p_s_request_, pp_s_response_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const __MIDL___MIDL_itf_imgerror_0000_0000_0001 = extern struct {
    description: ?BSTR,
    guid: Guid,
    helpContext: u32,
    helpFile: ?BSTR,
    source: ?BSTR,
    devDescription: ?BSTR,
    errorID: Guid,
    cUserParameters: u32,
    aUserParameters: ?*?BSTR,
    userFallback: ?BSTR,
    exceptionID: u32,
};

const IID_IImgErrorInfo_Value = Guid.initString("2bce4ece-d30e-445a-9423-6829be945ad8");
pub const IID_IImgErrorInfo = &IID_IImgErrorInfo_Value;
pub const IImgErrorInfo = extern struct {
    pub const VTable = extern struct {
        base: IErrorInfo.VTable,
        GetDeveloperDescription: *const fn (
            self: *const IImgErrorInfo,
            pbstr_dev_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserErrorId: *const fn (
            self: *const IImgErrorInfo,
            p_error_id: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserParameterCount: *const fn (
            self: *const IImgErrorInfo,
            pc_user_params: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserParameter: *const fn (
            self: *const IImgErrorInfo,
            c_param: u32,
            pbstr_param: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserFallback: *const fn (
            self: *const IImgErrorInfo,
            pbstr_fallback: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExceptionId: *const fn (
            self: *const IImgErrorInfo,
            p_exception_id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DetachErrorInfo: *const fn (
            self: *const IImgErrorInfo,
            p_error_info: ?*__MIDL___MIDL_itf_imgerror_0000_0000_0001,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IErrorInfo.MethodMixin(T);
            pub inline fn getDeveloperDescription(self: *const T, pbstr_dev_description_: ?*?BSTR) HRESULT {
                return @as(*const IImgErrorInfo.VTable, @ptrCast(self.vtable)).GetDeveloperDescription(@as(*const IImgErrorInfo, @ptrCast(self)), pbstr_dev_description_);
            }
            pub inline fn getUserErrorId(self: *const T, p_error_id_: ?*Guid) HRESULT {
                return @as(*const IImgErrorInfo.VTable, @ptrCast(self.vtable)).GetUserErrorId(@as(*const IImgErrorInfo, @ptrCast(self)), p_error_id_);
            }
            pub inline fn getUserParameterCount(self: *const T, pc_user_params_: ?*u32) HRESULT {
                return @as(*const IImgErrorInfo.VTable, @ptrCast(self.vtable)).GetUserParameterCount(@as(*const IImgErrorInfo, @ptrCast(self)), pc_user_params_);
            }
            pub inline fn getUserParameter(self: *const T, c_param_: u32, pbstr_param_: ?*?BSTR) HRESULT {
                return @as(*const IImgErrorInfo.VTable, @ptrCast(self.vtable)).GetUserParameter(@as(*const IImgErrorInfo, @ptrCast(self)), c_param_, pbstr_param_);
            }
            pub inline fn getUserFallback(self: *const T, pbstr_fallback_: ?*?BSTR) HRESULT {
                return @as(*const IImgErrorInfo.VTable, @ptrCast(self.vtable)).GetUserFallback(@as(*const IImgErrorInfo, @ptrCast(self)), pbstr_fallback_);
            }
            pub inline fn getExceptionId(self: *const T, p_exception_id_: ?*u32) HRESULT {
                return @as(*const IImgErrorInfo.VTable, @ptrCast(self.vtable)).GetExceptionId(@as(*const IImgErrorInfo, @ptrCast(self)), p_exception_id_);
            }
            pub inline fn detachErrorInfo(self: *const T, p_error_info_: ?*__MIDL___MIDL_itf_imgerror_0000_0000_0001) HRESULT {
                return @as(*const IImgErrorInfo.VTable, @ptrCast(self.vtable)).DetachErrorInfo(@as(*const IImgErrorInfo, @ptrCast(self)), p_error_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IImgCreateErrorInfo_Value = Guid.initString("1c55a64c-07cd-4fb5-90f7-b753d91f0c9e");
pub const IID_IImgCreateErrorInfo = &IID_IImgCreateErrorInfo_Value;
pub const IImgCreateErrorInfo = extern struct {
    pub const VTable = extern struct {
        base: ICreateErrorInfo.VTable,
        AttachToErrorInfo: *const fn (
            self: *const IImgCreateErrorInfo,
            p_error_info: ?*__MIDL___MIDL_itf_imgerror_0000_0000_0001,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICreateErrorInfo.MethodMixin(T);
            pub inline fn attachToErrorInfo(self: *const T, p_error_info_: ?*__MIDL___MIDL_itf_imgerror_0000_0000_0001) HRESULT {
                return @as(*const IImgCreateErrorInfo.VTable, @ptrCast(self.vtable)).AttachToErrorInfo(@as(*const IImgCreateErrorInfo, @ptrCast(self)), p_error_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const EXpsCompressionOptions = enum(i32) {
    NotCompressed = 0,
    Normal = 1,
    Small = 2,
    Fast = 3,
};
pub const Compression_NotCompressed = EXpsCompressionOptions.NotCompressed;
pub const Compression_Normal = EXpsCompressionOptions.Normal;
pub const Compression_Small = EXpsCompressionOptions.Small;
pub const Compression_Fast = EXpsCompressionOptions.Fast;

pub const EXpsFontOptions = enum(i32) {
    Normal = 0,
    Obfusticate = 1,
};
pub const Font_Normal = EXpsFontOptions.Normal;
pub const Font_Obfusticate = EXpsFontOptions.Obfusticate;

pub const EXpsJobConsumption = enum(i32) {
    DocumentSequenceAdded = 0,
    FixedDocumentAdded = 1,
    FixedPageAdded = 2,
};
pub const XpsJob_DocumentSequenceAdded = EXpsJobConsumption.DocumentSequenceAdded;
pub const XpsJob_FixedDocumentAdded = EXpsJobConsumption.FixedDocumentAdded;
pub const XpsJob_FixedPageAdded = EXpsJobConsumption.FixedPageAdded;

pub const EXpsFontRestriction = enum(i32) {
    Installable = 0,
    NoEmbedding = 2,
    PreviewPrint = 4,
    Editable = 8,
};
pub const Xps_Restricted_Font_Installable = EXpsFontRestriction.Installable;
pub const Xps_Restricted_Font_NoEmbedding = EXpsFontRestriction.NoEmbedding;
pub const Xps_Restricted_Font_PreviewPrint = EXpsFontRestriction.PreviewPrint;
pub const Xps_Restricted_Font_Editable = EXpsFontRestriction.Editable;

const IID_IPrintReadStream_Value = Guid.initString("4d47a67c-66cc-4430-850e-daf466fe5bc4");
pub const IID_IPrintReadStream = &IID_IPrintReadStream_Value;
pub const IPrintReadStream = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Seek: *const fn (
            self: *const IPrintReadStream,
            dlib_move: i64,
            dw_origin: u32,
            plib_new_position: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadBytes: *const fn (
            self: *const IPrintReadStream,
            // TODO: what to do with BytesParamIndex 1?
            pv_buffer: ?*anyopaque,
            cb_requested: u32,
            pcb_read: ?*u32,
            pb_end_of_file: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn seek(self: *const T, dlib_move_: i64, dw_origin_: u32, plib_new_position_: ?*u64) HRESULT {
                return @as(*const IPrintReadStream.VTable, @ptrCast(self.vtable)).Seek(@as(*const IPrintReadStream, @ptrCast(self)), dlib_move_, dw_origin_, plib_new_position_);
            }
            pub inline fn readBytes(self: *const T, pv_buffer_: ?*anyopaque, cb_requested_: u32, pcb_read_: ?*u32, pb_end_of_file_: ?*BOOL) HRESULT {
                return @as(*const IPrintReadStream.VTable, @ptrCast(self.vtable)).ReadBytes(@as(*const IPrintReadStream, @ptrCast(self)), pv_buffer_, cb_requested_, pcb_read_, pb_end_of_file_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintWriteStream_Value = Guid.initString("65bb7f1b-371e-4571-8ac7-912f510c1a38");
pub const IID_IPrintWriteStream = &IID_IPrintWriteStream_Value;
pub const IPrintWriteStream = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        WriteBytes: *const fn (
            self: *const IPrintWriteStream,
            // TODO: what to do with BytesParamIndex 1?
            pv_buffer: ?*const anyopaque,
            cb_buffer: u32,
            pcb_written: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IPrintWriteStream,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn writeBytes(self: *const T, pv_buffer_: ?*const anyopaque, cb_buffer_: u32, pcb_written_: ?*u32) HRESULT {
                return @as(*const IPrintWriteStream.VTable, @ptrCast(self.vtable)).WriteBytes(@as(*const IPrintWriteStream, @ptrCast(self)), pv_buffer_, cb_buffer_, pcb_written_);
            }
            pub inline fn close(self: *const T) void {
                return @as(*const IPrintWriteStream.VTable, @ptrCast(self.vtable)).Close(@as(*const IPrintWriteStream, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintWriteStreamFlush_Value = Guid.initString("07d11ff8-1753-4873-b749-6cdaf068e4c3");
pub const IID_IPrintWriteStreamFlush = &IID_IPrintWriteStreamFlush_Value;
pub const IPrintWriteStreamFlush = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FlushData: *const fn (
            self: *const IPrintWriteStreamFlush,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn flushData(self: *const T) HRESULT {
                return @as(*const IPrintWriteStreamFlush.VTable, @ptrCast(self.vtable)).FlushData(@as(*const IPrintWriteStreamFlush, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IInterFilterCommunicator_Value = Guid.initString("4daf1e69-81fd-462d-940f-8cd3ddf56fca");
pub const IID_IInterFilterCommunicator = &IID_IInterFilterCommunicator_Value;
pub const IInterFilterCommunicator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RequestReader: *const fn (
            self: *const IInterFilterCommunicator,
            pp_i_reader: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestWriter: *const fn (
            self: *const IInterFilterCommunicator,
            pp_i_writer: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn requestReader(self: *const T, pp_i_reader_: ?*?*anyopaque) HRESULT {
                return @as(*const IInterFilterCommunicator.VTable, @ptrCast(self.vtable)).RequestReader(@as(*const IInterFilterCommunicator, @ptrCast(self)), pp_i_reader_);
            }
            pub inline fn requestWriter(self: *const T, pp_i_writer_: ?*?*anyopaque) HRESULT {
                return @as(*const IInterFilterCommunicator.VTable, @ptrCast(self.vtable)).RequestWriter(@as(*const IInterFilterCommunicator, @ptrCast(self)), pp_i_writer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintPipelineManagerControl_Value = Guid.initString("aa3e4910-5889-4681-91ef-823ad4ed4e44");
pub const IID_IPrintPipelineManagerControl = &IID_IPrintPipelineManagerControl_Value;
pub const IPrintPipelineManagerControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RequestShutdown: *const fn (
            self: *const IPrintPipelineManagerControl,
            hr_reason: HRESULT,
            p_reason: ?*IImgErrorInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FilterFinished: *const fn (
            self: *const IPrintPipelineManagerControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn requestShutdown(self: *const T, hr_reason_: HRESULT, p_reason_: ?*IImgErrorInfo) HRESULT {
                return @as(*const IPrintPipelineManagerControl.VTable, @ptrCast(self.vtable)).RequestShutdown(@as(*const IPrintPipelineManagerControl, @ptrCast(self)), hr_reason_, p_reason_);
            }
            pub inline fn filterFinished(self: *const T) HRESULT {
                return @as(*const IPrintPipelineManagerControl.VTable, @ptrCast(self.vtable)).FilterFinished(@as(*const IPrintPipelineManagerControl, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintPipelinePropertyBag_Value = Guid.initString("8b8c99dc-7892-4a95-8a04-57422e9fbb47");
pub const IID_IPrintPipelinePropertyBag = &IID_IPrintPipelinePropertyBag_Value;
pub const IPrintPipelinePropertyBag = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddProperty: *const fn (
            self: *const IPrintPipelinePropertyBag,
            psz_name: ?[*:0]const u16,
            p_var: ?*const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn (
            self: *const IPrintPipelinePropertyBag,
            psz_name: ?[*:0]const u16,
            p_var: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteProperty: *const fn (
            self: *const IPrintPipelinePropertyBag,
            psz_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addProperty(self: *const T, psz_name_: ?[*:0]const u16, p_var_: ?*const VARIANT) HRESULT {
                return @as(*const IPrintPipelinePropertyBag.VTable, @ptrCast(self.vtable)).AddProperty(@as(*const IPrintPipelinePropertyBag, @ptrCast(self)), psz_name_, p_var_);
            }
            pub inline fn getProperty(self: *const T, psz_name_: ?[*:0]const u16, p_var_: ?*VARIANT) HRESULT {
                return @as(*const IPrintPipelinePropertyBag.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IPrintPipelinePropertyBag, @ptrCast(self)), psz_name_, p_var_);
            }
            pub inline fn deleteProperty(self: *const T, psz_name_: ?[*:0]const u16) BOOL {
                return @as(*const IPrintPipelinePropertyBag.VTable, @ptrCast(self.vtable)).DeleteProperty(@as(*const IPrintPipelinePropertyBag, @ptrCast(self)), psz_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintPipelineProgressReport_Value = Guid.initString("edc12c7c-ed40-4ea5-96a6-5e4397497a61");
pub const IID_IPrintPipelineProgressReport = &IID_IPrintPipelineProgressReport_Value;
pub const IPrintPipelineProgressReport = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReportProgress: *const fn (
            self: *const IPrintPipelineProgressReport,
            update: EXpsJobConsumption,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn reportProgress(self: *const T, update_: EXpsJobConsumption) HRESULT {
                return @as(*const IPrintPipelineProgressReport.VTable, @ptrCast(self.vtable)).ReportProgress(@as(*const IPrintPipelineProgressReport, @ptrCast(self)), update_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintClassObjectFactory_Value = Guid.initString("9af593dd-9b02-48a8-9bad-69ace423f88b");
pub const IID_IPrintClassObjectFactory = &IID_IPrintClassObjectFactory_Value;
pub const IPrintClassObjectFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPrintClassObject: *const fn (
            self: *const IPrintClassObjectFactory,
            psz_printer_name: ?[*:0]const u16,
            riid: ?*const Guid,
            pp_new_object: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPrintClassObject(self: *const T, psz_printer_name_: ?[*:0]const u16, riid_: ?*const Guid, pp_new_object_: ?*?*anyopaque) HRESULT {
                return @as(*const IPrintClassObjectFactory.VTable, @ptrCast(self.vtable)).GetPrintClassObject(@as(*const IPrintClassObjectFactory, @ptrCast(self)), psz_printer_name_, riid_, pp_new_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintPipelineFilter_Value = Guid.initString("cdb62fc0-8bed-434e-86fb-a2cae55f19ea");
pub const IID_IPrintPipelineFilter = &IID_IPrintPipelineFilter_Value;
pub const IPrintPipelineFilter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitializeFilter: *const fn (
            self: *const IPrintPipelineFilter,
            p_i_negotiation: ?*IInterFilterCommunicator,
            p_i_property_bag: ?*IPrintPipelinePropertyBag,
            p_i_pipeline_control: ?*IPrintPipelineManagerControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShutdownOperation: *const fn (
            self: *const IPrintPipelineFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartOperation: *const fn (
            self: *const IPrintPipelineFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initializeFilter(self: *const T, p_i_negotiation_: ?*IInterFilterCommunicator, p_i_property_bag_: ?*IPrintPipelinePropertyBag, p_i_pipeline_control_: ?*IPrintPipelineManagerControl) HRESULT {
                return @as(*const IPrintPipelineFilter.VTable, @ptrCast(self.vtable)).InitializeFilter(@as(*const IPrintPipelineFilter, @ptrCast(self)), p_i_negotiation_, p_i_property_bag_, p_i_pipeline_control_);
            }
            pub inline fn shutdownOperation(self: *const T) HRESULT {
                return @as(*const IPrintPipelineFilter.VTable, @ptrCast(self.vtable)).ShutdownOperation(@as(*const IPrintPipelineFilter, @ptrCast(self)));
            }
            pub inline fn startOperation(self: *const T) HRESULT {
                return @as(*const IPrintPipelineFilter.VTable, @ptrCast(self.vtable)).StartOperation(@as(*const IPrintPipelineFilter, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXpsDocumentProvider_Value = Guid.initString("b8cf8530-5562-47c4-ab67-b1f69ecf961e");
pub const IID_IXpsDocumentProvider = &IID_IXpsDocumentProvider_Value;
pub const IXpsDocumentProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetXpsPart: *const fn (
            self: *const IXpsDocumentProvider,
            pp_i_xps_part: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getXpsPart(self: *const T, pp_i_xps_part_: ?*?*IUnknown) HRESULT {
                return @as(*const IXpsDocumentProvider.VTable, @ptrCast(self.vtable)).GetXpsPart(@as(*const IXpsDocumentProvider, @ptrCast(self)), pp_i_xps_part_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXpsDocumentConsumer_Value = Guid.initString("4368d8a2-4181-4a9f-b295-3d9a38bb9ba0");
pub const IID_IXpsDocumentConsumer = &IID_IXpsDocumentConsumer_Value;
pub const IXpsDocumentConsumer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SendXpsUnknown: *const fn (
            self: *const IXpsDocumentConsumer,
            p_unknown: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendXpsDocument: *const fn (
            self: *const IXpsDocumentConsumer,
            p_i_xps_document: ?*IXpsDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendFixedDocumentSequence: *const fn (
            self: *const IXpsDocumentConsumer,
            p_i_fixed_document_sequence: ?*IFixedDocumentSequence,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendFixedDocument: *const fn (
            self: *const IXpsDocumentConsumer,
            p_i_fixed_document: ?*IFixedDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendFixedPage: *const fn (
            self: *const IXpsDocumentConsumer,
            p_i_fixed_page: ?*IFixedPage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseSender: *const fn (
            self: *const IXpsDocumentConsumer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNewEmptyPart: *const fn (
            self: *const IXpsDocumentConsumer,
            uri: ?[*:0]const u16,
            riid: ?*const Guid,
            pp_new_object: ?*?*anyopaque,
            pp_write_stream: ?*?*IPrintWriteStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn sendXpsUnknown(self: *const T, p_unknown_: ?*IUnknown) HRESULT {
                return @as(*const IXpsDocumentConsumer.VTable, @ptrCast(self.vtable)).SendXpsUnknown(@as(*const IXpsDocumentConsumer, @ptrCast(self)), p_unknown_);
            }
            pub inline fn sendXpsDocument(self: *const T, p_i_xps_document_: ?*IXpsDocument) HRESULT {
                return @as(*const IXpsDocumentConsumer.VTable, @ptrCast(self.vtable)).SendXpsDocument(@as(*const IXpsDocumentConsumer, @ptrCast(self)), p_i_xps_document_);
            }
            pub inline fn sendFixedDocumentSequence(self: *const T, p_i_fixed_document_sequence_: ?*IFixedDocumentSequence) HRESULT {
                return @as(*const IXpsDocumentConsumer.VTable, @ptrCast(self.vtable)).SendFixedDocumentSequence(@as(*const IXpsDocumentConsumer, @ptrCast(self)), p_i_fixed_document_sequence_);
            }
            pub inline fn sendFixedDocument(self: *const T, p_i_fixed_document_: ?*IFixedDocument) HRESULT {
                return @as(*const IXpsDocumentConsumer.VTable, @ptrCast(self.vtable)).SendFixedDocument(@as(*const IXpsDocumentConsumer, @ptrCast(self)), p_i_fixed_document_);
            }
            pub inline fn sendFixedPage(self: *const T, p_i_fixed_page_: ?*IFixedPage) HRESULT {
                return @as(*const IXpsDocumentConsumer.VTable, @ptrCast(self.vtable)).SendFixedPage(@as(*const IXpsDocumentConsumer, @ptrCast(self)), p_i_fixed_page_);
            }
            pub inline fn closeSender(self: *const T) HRESULT {
                return @as(*const IXpsDocumentConsumer.VTable, @ptrCast(self.vtable)).CloseSender(@as(*const IXpsDocumentConsumer, @ptrCast(self)));
            }
            pub inline fn getNewEmptyPart(self: *const T, uri_: ?[*:0]const u16, riid_: ?*const Guid, pp_new_object_: ?*?*anyopaque, pp_write_stream_: ?*?*IPrintWriteStream) HRESULT {
                return @as(*const IXpsDocumentConsumer.VTable, @ptrCast(self.vtable)).GetNewEmptyPart(@as(*const IXpsDocumentConsumer, @ptrCast(self)), uri_, riid_, pp_new_object_, pp_write_stream_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXpsDocument_Value = Guid.initString("e8d907db-62a9-4a95-abe7-e01763dd30f8");
pub const IID_IXpsDocument = &IID_IXpsDocument_Value;
pub const IXpsDocument = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetThumbnail: *const fn (
            self: *const IXpsDocument,
            pp_thumbnail: ?*?*IPartThumbnail,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThumbnail: *const fn (
            self: *const IXpsDocument,
            p_thumbnail: ?*IPartThumbnail,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getThumbnail(self: *const T, pp_thumbnail_: ?*?*IPartThumbnail) HRESULT {
                return @as(*const IXpsDocument.VTable, @ptrCast(self.vtable)).GetThumbnail(@as(*const IXpsDocument, @ptrCast(self)), pp_thumbnail_);
            }
            pub inline fn setThumbnail(self: *const T, p_thumbnail_: ?*IPartThumbnail) HRESULT {
                return @as(*const IXpsDocument.VTable, @ptrCast(self.vtable)).SetThumbnail(@as(*const IXpsDocument, @ptrCast(self)), p_thumbnail_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IFixedDocumentSequence_Value = Guid.initString("8028d181-2c32-4249-8493-1bfb22045574");
pub const IID_IFixedDocumentSequence = &IID_IFixedDocumentSequence_Value;
pub const IFixedDocumentSequence = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetUri: *const fn (
            self: *const IFixedDocumentSequence,
            uri: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrintTicket: *const fn (
            self: *const IFixedDocumentSequence,
            pp_print_ticket: ?*?*IPartPrintTicket,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrintTicket: *const fn (
            self: *const IFixedDocumentSequence,
            p_print_ticket: ?*IPartPrintTicket,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getUri(self: *const T, uri_: ?*?BSTR) HRESULT {
                return @as(*const IFixedDocumentSequence.VTable, @ptrCast(self.vtable)).GetUri(@as(*const IFixedDocumentSequence, @ptrCast(self)), uri_);
            }
            pub inline fn getPrintTicket(self: *const T, pp_print_ticket_: ?*?*IPartPrintTicket) HRESULT {
                return @as(*const IFixedDocumentSequence.VTable, @ptrCast(self.vtable)).GetPrintTicket(@as(*const IFixedDocumentSequence, @ptrCast(self)), pp_print_ticket_);
            }
            pub inline fn setPrintTicket(self: *const T, p_print_ticket_: ?*IPartPrintTicket) HRESULT {
                return @as(*const IFixedDocumentSequence.VTable, @ptrCast(self.vtable)).SetPrintTicket(@as(*const IFixedDocumentSequence, @ptrCast(self)), p_print_ticket_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IFixedDocument_Value = Guid.initString("f222ca9f-9968-4db9-81bd-abaebf15f93f");
pub const IID_IFixedDocument = &IID_IFixedDocument_Value;
pub const IFixedDocument = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetUri: *const fn (
            self: *const IFixedDocument,
            uri: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrintTicket: *const fn (
            self: *const IFixedDocument,
            pp_print_ticket: ?*?*IPartPrintTicket,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrintTicket: *const fn (
            self: *const IFixedDocument,
            p_print_ticket: ?*IPartPrintTicket,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getUri(self: *const T, uri_: ?*?BSTR) HRESULT {
                return @as(*const IFixedDocument.VTable, @ptrCast(self.vtable)).GetUri(@as(*const IFixedDocument, @ptrCast(self)), uri_);
            }
            pub inline fn getPrintTicket(self: *const T, pp_print_ticket_: ?*?*IPartPrintTicket) HRESULT {
                return @as(*const IFixedDocument.VTable, @ptrCast(self.vtable)).GetPrintTicket(@as(*const IFixedDocument, @ptrCast(self)), pp_print_ticket_);
            }
            pub inline fn setPrintTicket(self: *const T, p_print_ticket_: ?*IPartPrintTicket) HRESULT {
                return @as(*const IFixedDocument.VTable, @ptrCast(self.vtable)).SetPrintTicket(@as(*const IFixedDocument, @ptrCast(self)), p_print_ticket_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPartBase_Value = Guid.initString("36d51e28-369e-43ba-a666-9540c62c3f58");
pub const IID_IPartBase = &IID_IPartBase_Value;
pub const IPartBase = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetUri: *const fn (
            self: *const IPartBase,
            uri: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStream: *const fn (
            self: *const IPartBase,
            pp_stream: ?*?*IPrintReadStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPartCompression: *const fn (
            self: *const IPartBase,
            p_compression: ?*EXpsCompressionOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPartCompression: *const fn (
            self: *const IPartBase,
            compression: EXpsCompressionOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getUri(self: *const T, uri_: ?*?BSTR) HRESULT {
                return @as(*const IPartBase.VTable, @ptrCast(self.vtable)).GetUri(@as(*const IPartBase, @ptrCast(self)), uri_);
            }
            pub inline fn getStream(self: *const T, pp_stream_: ?*?*IPrintReadStream) HRESULT {
                return @as(*const IPartBase.VTable, @ptrCast(self.vtable)).GetStream(@as(*const IPartBase, @ptrCast(self)), pp_stream_);
            }
            pub inline fn getPartCompression(self: *const T, p_compression_: ?*EXpsCompressionOptions) HRESULT {
                return @as(*const IPartBase.VTable, @ptrCast(self.vtable)).GetPartCompression(@as(*const IPartBase, @ptrCast(self)), p_compression_);
            }
            pub inline fn setPartCompression(self: *const T, compression_: EXpsCompressionOptions) HRESULT {
                return @as(*const IPartBase.VTable, @ptrCast(self.vtable)).SetPartCompression(@as(*const IPartBase, @ptrCast(self)), compression_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IFixedPage_Value = Guid.initString("3d9f6448-7e95-4cb5-94fb-0180c2883a57");
pub const IID_IFixedPage = &IID_IFixedPage_Value;
pub const IFixedPage = extern struct {
    pub const VTable = extern struct {
        base: IPartBase.VTable,
        GetPrintTicket: *const fn (
            self: *const IFixedPage,
            pp_print_ticket: ?*?*IPartPrintTicket,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPagePart: *const fn (
            self: *const IFixedPage,
            uri: ?[*:0]const u16,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWriteStream: *const fn (
            self: *const IFixedPage,
            pp_write_stream: ?*?*IPrintWriteStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPrintTicket: *const fn (
            self: *const IFixedPage,
            pp_print_ticket: ?*IPartPrintTicket,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPagePart: *const fn (
            self: *const IFixedPage,
            p_unk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteResource: *const fn (
            self: *const IFixedPage,
            uri: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetXpsPartIterator: *const fn (
            self: *const IFixedPage,
            p_xps_part_it: ?*?*IXpsPartIterator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPartBase.MethodMixin(T);
            pub inline fn getPrintTicket(self: *const T, pp_print_ticket_: ?*?*IPartPrintTicket) HRESULT {
                return @as(*const IFixedPage.VTable, @ptrCast(self.vtable)).GetPrintTicket(@as(*const IFixedPage, @ptrCast(self)), pp_print_ticket_);
            }
            pub inline fn getPagePart(self: *const T, uri_: ?[*:0]const u16, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IFixedPage.VTable, @ptrCast(self.vtable)).GetPagePart(@as(*const IFixedPage, @ptrCast(self)), uri_, pp_unk_);
            }
            pub inline fn getWriteStream(self: *const T, pp_write_stream_: ?*?*IPrintWriteStream) HRESULT {
                return @as(*const IFixedPage.VTable, @ptrCast(self.vtable)).GetWriteStream(@as(*const IFixedPage, @ptrCast(self)), pp_write_stream_);
            }
            pub inline fn setPrintTicket(self: *const T, pp_print_ticket_: ?*IPartPrintTicket) HRESULT {
                return @as(*const IFixedPage.VTable, @ptrCast(self.vtable)).SetPrintTicket(@as(*const IFixedPage, @ptrCast(self)), pp_print_ticket_);
            }
            pub inline fn setPagePart(self: *const T, p_unk_: ?*IUnknown) HRESULT {
                return @as(*const IFixedPage.VTable, @ptrCast(self.vtable)).SetPagePart(@as(*const IFixedPage, @ptrCast(self)), p_unk_);
            }
            pub inline fn deleteResource(self: *const T, uri_: ?[*:0]const u16) HRESULT {
                return @as(*const IFixedPage.VTable, @ptrCast(self.vtable)).DeleteResource(@as(*const IFixedPage, @ptrCast(self)), uri_);
            }
            pub inline fn getXpsPartIterator(self: *const T, p_xps_part_it_: ?*?*IXpsPartIterator) HRESULT {
                return @as(*const IFixedPage.VTable, @ptrCast(self.vtable)).GetXpsPartIterator(@as(*const IFixedPage, @ptrCast(self)), p_xps_part_it_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPartImage_Value = Guid.initString("725f2e3c-401a-4705-9de0-fe6f1353b87f");
pub const IID_IPartImage = &IID_IPartImage_Value;
pub const IPartImage = extern struct {
    pub const VTable = extern struct {
        base: IPartBase.VTable,
        GetImageProperties: *const fn (
            self: *const IPartImage,
            p_content_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetImageContent: *const fn (
            self: *const IPartImage,
            p_content_type: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPartBase.MethodMixin(T);
            pub inline fn getImageProperties(self: *const T, p_content_type_: ?*?BSTR) HRESULT {
                return @as(*const IPartImage.VTable, @ptrCast(self.vtable)).GetImageProperties(@as(*const IPartImage, @ptrCast(self)), p_content_type_);
            }
            pub inline fn setImageContent(self: *const T, p_content_type_: ?[*:0]const u16) HRESULT {
                return @as(*const IPartImage.VTable, @ptrCast(self.vtable)).SetImageContent(@as(*const IPartImage, @ptrCast(self)), p_content_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPartFont_Value = Guid.initString("e07fe0ab-1124-43d0-a865-e8ffb6a3ea82");
pub const IID_IPartFont = &IID_IPartFont_Value;
pub const IPartFont = extern struct {
    pub const VTable = extern struct {
        base: IPartBase.VTable,
        GetFontProperties: *const fn (
            self: *const IPartFont,
            p_content_type: ?*?BSTR,
            p_font_options: ?*EXpsFontOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontContent: *const fn (
            self: *const IPartFont,
            p_content_type: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontOptions: *const fn (
            self: *const IPartFont,
            options: EXpsFontOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPartBase.MethodMixin(T);
            pub inline fn getFontProperties(self: *const T, p_content_type_: ?*?BSTR, p_font_options_: ?*EXpsFontOptions) HRESULT {
                return @as(*const IPartFont.VTable, @ptrCast(self.vtable)).GetFontProperties(@as(*const IPartFont, @ptrCast(self)), p_content_type_, p_font_options_);
            }
            pub inline fn setFontContent(self: *const T, p_content_type_: ?[*:0]const u16) HRESULT {
                return @as(*const IPartFont.VTable, @ptrCast(self.vtable)).SetFontContent(@as(*const IPartFont, @ptrCast(self)), p_content_type_);
            }
            pub inline fn setFontOptions(self: *const T, options_: EXpsFontOptions) HRESULT {
                return @as(*const IPartFont.VTable, @ptrCast(self.vtable)).SetFontOptions(@as(*const IPartFont, @ptrCast(self)), options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPartFont2_Value = Guid.initString("511e025f-d6cb-43be-bf65-63fe88515a39");
pub const IID_IPartFont2 = &IID_IPartFont2_Value;
pub const IPartFont2 = extern struct {
    pub const VTable = extern struct {
        base: IPartFont.VTable,
        GetFontRestriction: *const fn (
            self: *const IPartFont2,
            p_restriction: ?*EXpsFontRestriction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPartFont.MethodMixin(T);
            pub inline fn getFontRestriction(self: *const T, p_restriction_: ?*EXpsFontRestriction) HRESULT {
                return @as(*const IPartFont2.VTable, @ptrCast(self.vtable)).GetFontRestriction(@as(*const IPartFont2, @ptrCast(self)), p_restriction_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPartThumbnail_Value = Guid.initString("027ed1c9-ba39-4cc5-aa55-7ec3a0de171a");
pub const IID_IPartThumbnail = &IID_IPartThumbnail_Value;
pub const IPartThumbnail = extern struct {
    pub const VTable = extern struct {
        base: IPartBase.VTable,
        GetThumbnailProperties: *const fn (
            self: *const IPartThumbnail,
            p_content_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThumbnailContent: *const fn (
            self: *const IPartThumbnail,
            p_content_type: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPartBase.MethodMixin(T);
            pub inline fn getThumbnailProperties(self: *const T, p_content_type_: ?*?BSTR) HRESULT {
                return @as(*const IPartThumbnail.VTable, @ptrCast(self.vtable)).GetThumbnailProperties(@as(*const IPartThumbnail, @ptrCast(self)), p_content_type_);
            }
            pub inline fn setThumbnailContent(self: *const T, p_content_type_: ?[*:0]const u16) HRESULT {
                return @as(*const IPartThumbnail.VTable, @ptrCast(self.vtable)).SetThumbnailContent(@as(*const IPartThumbnail, @ptrCast(self)), p_content_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPartPrintTicket_Value = Guid.initString("4a0f50f6-f9a2-41f0-99e7-5ae955be8e9e");
pub const IID_IPartPrintTicket = &IID_IPartPrintTicket_Value;
pub const IPartPrintTicket = extern struct {
    pub const VTable = extern struct {
        base: IPartBase.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPartBase.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPartColorProfile_Value = Guid.initString("63cca95b-7d18-4762-b15e-98658693d24a");
pub const IID_IPartColorProfile = &IID_IPartColorProfile_Value;
pub const IPartColorProfile = extern struct {
    pub const VTable = extern struct {
        base: IPartBase.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPartBase.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPartResourceDictionary_Value = Guid.initString("16cfce6d-e744-4fb3-b474-f1d54f024a01");
pub const IID_IPartResourceDictionary = &IID_IPartResourceDictionary_Value;
pub const IPartResourceDictionary = extern struct {
    pub const VTable = extern struct {
        base: IPartBase.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPartBase.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXpsPartIterator_Value = Guid.initString("0021d3cd-af6f-42ab-9999-14bc82a62d2e");
pub const IID_IXpsPartIterator = &IID_IXpsPartIterator_Value;
pub const IXpsPartIterator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Reset: *const fn (
            self: *const IXpsPartIterator,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Current: *const fn (
            self: *const IXpsPartIterator,
            p_uri: ?*?BSTR,
            pp_xps_part: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDone: *const fn (
            self: *const IXpsPartIterator,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        Next: *const fn (
            self: *const IXpsPartIterator,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn reset(self: *const T) void {
                return @as(*const IXpsPartIterator.VTable, @ptrCast(self.vtable)).Reset(@as(*const IXpsPartIterator, @ptrCast(self)));
            }
            pub inline fn current(self: *const T, p_uri_: ?*?BSTR, pp_xps_part_: ?*?*IUnknown) HRESULT {
                return @as(*const IXpsPartIterator.VTable, @ptrCast(self.vtable)).Current(@as(*const IXpsPartIterator, @ptrCast(self)), p_uri_, pp_xps_part_);
            }
            pub inline fn isDone(self: *const T) BOOL {
                return @as(*const IXpsPartIterator.VTable, @ptrCast(self.vtable)).IsDone(@as(*const IXpsPartIterator, @ptrCast(self)));
            }
            pub inline fn next(self: *const T) void {
                return @as(*const IXpsPartIterator.VTable, @ptrCast(self.vtable)).Next(@as(*const IXpsPartIterator, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintReadStreamFactory_Value = Guid.initString("acb971e3-df8d-4fc2-bee6-0609d15f3cf9");
pub const IID_IPrintReadStreamFactory = &IID_IPrintReadStreamFactory_Value;
pub const IPrintReadStreamFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetStream: *const fn (
            self: *const IPrintReadStreamFactory,
            pp_stream: ?*?*IPrintReadStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getStream(self: *const T, pp_stream_: ?*?*IPrintReadStream) HRESULT {
                return @as(*const IPrintReadStreamFactory.VTable, @ptrCast(self.vtable)).GetStream(@as(*const IPrintReadStreamFactory, @ptrCast(self)), pp_stream_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPartDiscardControl_Value = Guid.initString("cc350c00-095b-42a5-bf0f-c8780edadb3c");
pub const IID_IPartDiscardControl = &IID_IPartDiscardControl_Value;
pub const IPartDiscardControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDiscardProperties: *const fn (
            self: *const IPartDiscardControl,
            uri_sentinel_page: ?*?BSTR,
            uri_part_to_discard: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDiscardProperties(self: *const T, uri_sentinel_page_: ?*?BSTR, uri_part_to_discard_: ?*?BSTR) HRESULT {
                return @as(*const IPartDiscardControl.VTable, @ptrCast(self.vtable)).GetDiscardProperties(@as(*const IPartDiscardControl, @ptrCast(self)), uri_sentinel_page_, uri_part_to_discard_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const OPTPARAM = extern struct {
    cbSize: u16,
    Flags: u8,
    Style: u8,
    pData: ?*i8,
    IconID: usize,
    lParam: LPARAM,
    dwReserved: [2]usize,
};

pub const OPTCOMBO = extern struct {
    cbSize: u16,
    Flags: u8,
    cListItem: u16,
    pListItem: ?*OPTPARAM,
    Sel: i32,
    dwReserved: [3]u32,
};

pub const OPTTYPE = extern struct {
    cbSize: u16,
    Type: u8,
    Flags: u8,
    Count: u16,
    BegCtrlID: u16,
    pOptParam: ?*OPTPARAM,
    Style: u16,
    wReserved: [3]u16,
    dwReserved: [3]usize,
};

pub const EXTPUSH = extern struct {
    cbSize: u16,
    Flags: u16,
    pTitle: ?*i8,
    Anonymous1: extern union {
        DlgProc: ?DLGPROC,
        pfnCallBack: ?FARPROC,
    },
    IconID: usize,
    Anonymous2: extern union {
        DlgTemplateID: u16,
        hDlgTemplate: ?HANDLE,
    },
    dwReserved: [3]usize,
};

pub const EXTCHKBOX = extern struct {
    cbSize: u16,
    Flags: u16,
    pTitle: ?*i8,
    pSeparator: ?*i8,
    pCheckedName: ?*i8,
    IconID: usize,
    wReserved: [4]u16,
    dwReserved: [2]usize,
};

pub const OIEXT = extern struct {
    cbSize: u16,
    Flags: u16,
    hInstCaller: ?HINSTANCE,
    pHelpFile: ?*i8,
    dwReserved: [4]usize,
};

pub const OPTITEM = extern struct {
    cbSize: u16,
    Level: u8,
    DlgPageIdx: u8,
    Flags: u32,
    UserData: usize,
    pName: ?*i8,
    Anonymous1: extern union {
        Sel: i32,
        pSel: ?*i8,
    },
    Anonymous2: extern union {
        pExtChkBox: ?*EXTCHKBOX,
        pExtPush: ?*EXTPUSH,
    },
    pOptType: ?*OPTTYPE,
    HelpIndex: u32,
    DMPubID: u8,
    UserItemID: u8,
    wReserved: u16,
    pOIExt: ?*OIEXT,
    dwReserved: [3]usize,
};

pub const CPSUICBPARAM = extern struct {
    cbSize: u16,
    Reason: u16,
    hDlg: ?HWND,
    pOptItem: ?*OPTITEM,
    cOptItem: u16,
    Flags: u16,
    pCurItem: ?*OPTITEM,
    Anonymous: extern union {
        OldSel: i32,
        pOldSel: ?*i8,
    },
    UserData: usize,
    Result: usize,
};

pub const _CPSUICALLBACK = *const fn (
    p_c_p_s_u_i_c_b_param: ?*CPSUICBPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const DLGPAGE = extern struct {
    cbSize: u16,
    Flags: u16,
    DlgProc: ?DLGPROC,
    pTabName: ?*i8,
    IconID: usize,
    Anonymous: extern union {
        DlgTemplateID: u16,
        hDlgTemplate: ?HANDLE,
    },
};

pub const COMPROPSHEETUI = extern struct {
    cbSize: u16,
    Flags: u16,
    hInstCaller: ?HINSTANCE,
    pCallerName: ?*i8,
    UserData: usize,
    pHelpFile: ?*i8,
    pfnCallBack: ?_CPSUICALLBACK,
    pOptItem: ?*OPTITEM,
    pDlgPage: ?*DLGPAGE,
    cOptItem: u16,
    cDlgPage: u16,
    IconID: usize,
    pOptItemName: ?*i8,
    CallerVersion: u16,
    OptItemVersion: u16,
    dwReserved: [4]usize,
};

pub const SETRESULT_INFO = extern struct {
    cbSize: u16,
    wReserved: u16,
    hSetResult: ?HANDLE,
    Result: LRESULT,
};

pub const INSERTPSUIPAGE_INFO = extern struct {
    cbSize: u16,
    Type: u8,
    Mode: u8,
    dwData1: usize,
    dwData2: usize,
    dwData3: usize,
};

pub const PFNCOMPROPSHEET = *const fn (
    h_com_prop_sheet: ?HANDLE,
    function: u32,
    l_param1: LPARAM,
    l_param2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) isize;

pub const PSPINFO = extern struct {
    cbSize: u16,
    wReserved: u16,
    hComPropSheet: ?HANDLE,
    hCPSUIPage: ?HANDLE,
    pfnComPropSheet: ?PFNCOMPROPSHEET,
};

pub const CPSUIDATABLOCK = extern struct {
    cbData: u32,
    pbData: ?*u8,
};

pub const PROPSHEETUI_INFO = extern struct {
    cbSize: u16,
    Version: u16,
    Flags: u16,
    Reason: u16,
    hComPropSheet: ?HANDLE,
    pfnComPropSheet: ?PFNCOMPROPSHEET,
    lParamInit: LPARAM,
    UserData: usize,
    Result: usize,
};

pub const PROPSHEETUI_GETICON_INFO = extern struct {
    cbSize: u16,
    Flags: u16,
    cxIcon: u16,
    cyIcon: u16,
    hIcon: ?HICON,
};

pub const PFNPROPSHEETUI = *const fn (
    p_p_s_u_i_info: ?*PROPSHEETUI_INFO,
    l_param: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const PROPSHEETUI_INFO_HEADER = extern struct {
    cbSize: u16,
    Flags: u16,
    pTitle: ?*i8,
    hWndParent: ?HWND,
    hInst: ?HINSTANCE,
    Anonymous: extern union {
        hIcon: ?HICON,
        IconID: usize,
    },
};

pub const PRINTER_INFO_1A = extern struct {
    Flags: u32,
    pDescription: ?PSTR,
    pName: ?PSTR,
    pComment: ?PSTR,
};

pub const PRINTER_INFO_1W = extern struct {
    Flags: u32,
    pDescription: ?PWSTR,
    pName: ?PWSTR,
    pComment: ?PWSTR,
};

pub const PRINTER_INFO_2A = extern struct {
    pServerName: ?PSTR,
    pPrinterName: ?PSTR,
    pShareName: ?PSTR,
    pPortName: ?PSTR,
    pDriverName: ?PSTR,
    pComment: ?PSTR,
    pLocation: ?PSTR,
    pDevMode: ?*DEVMODEA,
    pSepFile: ?PSTR,
    pPrintProcessor: ?PSTR,
    pDatatype: ?PSTR,
    pParameters: ?PSTR,
    pSecurityDescriptor: ?PSECURITY_DESCRIPTOR,
    Attributes: u32,
    Priority: u32,
    DefaultPriority: u32,
    StartTime: u32,
    UntilTime: u32,
    Status: u32,
    cJobs: u32,
    AveragePPM: u32,
};

pub const PRINTER_INFO_2W = extern struct {
    pServerName: ?PWSTR,
    pPrinterName: ?PWSTR,
    pShareName: ?PWSTR,
    pPortName: ?PWSTR,
    pDriverName: ?PWSTR,
    pComment: ?PWSTR,
    pLocation: ?PWSTR,
    pDevMode: ?*DEVMODEW,
    pSepFile: ?PWSTR,
    pPrintProcessor: ?PWSTR,
    pDatatype: ?PWSTR,
    pParameters: ?PWSTR,
    pSecurityDescriptor: ?PSECURITY_DESCRIPTOR,
    Attributes: u32,
    Priority: u32,
    DefaultPriority: u32,
    StartTime: u32,
    UntilTime: u32,
    Status: u32,
    cJobs: u32,
    AveragePPM: u32,
};

pub const PRINTER_INFO_3 = extern struct {
    pSecurityDescriptor: ?PSECURITY_DESCRIPTOR,
};

pub const PRINTER_INFO_4A = extern struct {
    pPrinterName: ?PSTR,
    pServerName: ?PSTR,
    Attributes: u32,
};

pub const PRINTER_INFO_4W = extern struct {
    pPrinterName: ?PWSTR,
    pServerName: ?PWSTR,
    Attributes: u32,
};

pub const PRINTER_INFO_5A = extern struct {
    pPrinterName: ?PSTR,
    pPortName: ?PSTR,
    Attributes: u32,
    DeviceNotSelectedTimeout: u32,
    TransmissionRetryTimeout: u32,
};

pub const PRINTER_INFO_5W = extern struct {
    pPrinterName: ?PWSTR,
    pPortName: ?PWSTR,
    Attributes: u32,
    DeviceNotSelectedTimeout: u32,
    TransmissionRetryTimeout: u32,
};

pub const PRINTER_INFO_6 = extern struct {
    dwStatus: u32,
};

pub const PRINTER_INFO_7A = extern struct {
    pszObjectGUID: ?PSTR,
    dwAction: u32,
};

pub const PRINTER_INFO_7W = extern struct {
    pszObjectGUID: ?PWSTR,
    dwAction: u32,
};

pub const PRINTER_INFO_8A = extern struct {
    pDevMode: ?*DEVMODEA,
};

pub const PRINTER_INFO_8W = extern struct {
    pDevMode: ?*DEVMODEW,
};

pub const PRINTER_INFO_9A = extern struct {
    pDevMode: ?*DEVMODEA,
};

pub const PRINTER_INFO_9W = extern struct {
    pDevMode: ?*DEVMODEW,
};

pub const JOB_INFO_1A = extern struct {
    JobId: u32,
    pPrinterName: ?PSTR,
    pMachineName: ?PSTR,
    pUserName: ?PSTR,
    pDocument: ?PSTR,
    pDatatype: ?PSTR,
    pStatus: ?PSTR,
    Status: u32,
    Priority: u32,
    Position: u32,
    TotalPages: u32,
    PagesPrinted: u32,
    Submitted: SYSTEMTIME,
};

pub const JOB_INFO_1W = extern struct {
    JobId: u32,
    pPrinterName: ?PWSTR,
    pMachineName: ?PWSTR,
    pUserName: ?PWSTR,
    pDocument: ?PWSTR,
    pDatatype: ?PWSTR,
    pStatus: ?PWSTR,
    Status: u32,
    Priority: u32,
    Position: u32,
    TotalPages: u32,
    PagesPrinted: u32,
    Submitted: SYSTEMTIME,
};

pub const JOB_INFO_2A = extern struct {
    JobId: u32,
    pPrinterName: ?PSTR,
    pMachineName: ?PSTR,
    pUserName: ?PSTR,
    pDocument: ?PSTR,
    pNotifyName: ?PSTR,
    pDatatype: ?PSTR,
    pPrintProcessor: ?PSTR,
    pParameters: ?PSTR,
    pDriverName: ?PSTR,
    pDevMode: ?*DEVMODEA,
    pStatus: ?PSTR,
    pSecurityDescriptor: ?PSECURITY_DESCRIPTOR,
    Status: u32,
    Priority: u32,
    Position: u32,
    StartTime: u32,
    UntilTime: u32,
    TotalPages: u32,
    Size: u32,
    Submitted: SYSTEMTIME,
    Time: u32,
    PagesPrinted: u32,
};

pub const JOB_INFO_2W = extern struct {
    JobId: u32,
    pPrinterName: ?PWSTR,
    pMachineName: ?PWSTR,
    pUserName: ?PWSTR,
    pDocument: ?PWSTR,
    pNotifyName: ?PWSTR,
    pDatatype: ?PWSTR,
    pPrintProcessor: ?PWSTR,
    pParameters: ?PWSTR,
    pDriverName: ?PWSTR,
    pDevMode: ?*DEVMODEW,
    pStatus: ?PWSTR,
    pSecurityDescriptor: ?PSECURITY_DESCRIPTOR,
    Status: u32,
    Priority: u32,
    Position: u32,
    StartTime: u32,
    UntilTime: u32,
    TotalPages: u32,
    Size: u32,
    Submitted: SYSTEMTIME,
    Time: u32,
    PagesPrinted: u32,
};

pub const JOB_INFO_3 = extern struct {
    JobId: u32,
    NextJobId: u32,
    Reserved: u32,
};

pub const JOB_INFO_4A = extern struct {
    JobId: u32,
    pPrinterName: ?PSTR,
    pMachineName: ?PSTR,
    pUserName: ?PSTR,
    pDocument: ?PSTR,
    pNotifyName: ?PSTR,
    pDatatype: ?PSTR,
    pPrintProcessor: ?PSTR,
    pParameters: ?PSTR,
    pDriverName: ?PSTR,
    pDevMode: ?*DEVMODEA,
    pStatus: ?PSTR,
    pSecurityDescriptor: ?PSECURITY_DESCRIPTOR,
    Status: u32,
    Priority: u32,
    Position: u32,
    StartTime: u32,
    UntilTime: u32,
    TotalPages: u32,
    Size: u32,
    Submitted: SYSTEMTIME,
    Time: u32,
    PagesPrinted: u32,
    SizeHigh: i32,
};

pub const JOB_INFO_4W = extern struct {
    JobId: u32,
    pPrinterName: ?PWSTR,
    pMachineName: ?PWSTR,
    pUserName: ?PWSTR,
    pDocument: ?PWSTR,
    pNotifyName: ?PWSTR,
    pDatatype: ?PWSTR,
    pPrintProcessor: ?PWSTR,
    pParameters: ?PWSTR,
    pDriverName: ?PWSTR,
    pDevMode: ?*DEVMODEW,
    pStatus: ?PWSTR,
    pSecurityDescriptor: ?PSECURITY_DESCRIPTOR,
    Status: u32,
    Priority: u32,
    Position: u32,
    StartTime: u32,
    UntilTime: u32,
    TotalPages: u32,
    Size: u32,
    Submitted: SYSTEMTIME,
    Time: u32,
    PagesPrinted: u32,
    SizeHigh: i32,
};

pub const ADDJOB_INFO_1A = extern struct {
    Path: ?PSTR,
    JobId: u32,
};

pub const ADDJOB_INFO_1W = extern struct {
    Path: ?PWSTR,
    JobId: u32,
};

pub const DRIVER_INFO_1A = extern struct {
    pName: ?PSTR,
};

pub const DRIVER_INFO_1W = extern struct {
    pName: ?PWSTR,
};

pub const DRIVER_INFO_2A = extern struct {
    cVersion: u32,
    pName: ?PSTR,
    pEnvironment: ?PSTR,
    pDriverPath: ?PSTR,
    pDataFile: ?PSTR,
    pConfigFile: ?PSTR,
};

pub const DRIVER_INFO_2W = extern struct {
    cVersion: u32,
    pName: ?PWSTR,
    pEnvironment: ?PWSTR,
    pDriverPath: ?PWSTR,
    pDataFile: ?PWSTR,
    pConfigFile: ?PWSTR,
};

pub const DRIVER_INFO_3A = extern struct {
    cVersion: u32,
    pName: ?PSTR,
    pEnvironment: ?PSTR,
    pDriverPath: ?PSTR,
    pDataFile: ?PSTR,
    pConfigFile: ?PSTR,
    pHelpFile: ?PSTR,
    pDependentFiles: ?PSTR,
    pMonitorName: ?PSTR,
    pDefaultDataType: ?PSTR,
};

pub const DRIVER_INFO_3W = extern struct {
    cVersion: u32,
    pName: ?PWSTR,
    pEnvironment: ?PWSTR,
    pDriverPath: ?PWSTR,
    pDataFile: ?PWSTR,
    pConfigFile: ?PWSTR,
    pHelpFile: ?PWSTR,
    pDependentFiles: ?PWSTR,
    pMonitorName: ?PWSTR,
    pDefaultDataType: ?PWSTR,
};

pub const DRIVER_INFO_4A = extern struct {
    cVersion: u32,
    pName: ?PSTR,
    pEnvironment: ?PSTR,
    pDriverPath: ?PSTR,
    pDataFile: ?PSTR,
    pConfigFile: ?PSTR,
    pHelpFile: ?PSTR,
    pDependentFiles: ?PSTR,
    pMonitorName: ?PSTR,
    pDefaultDataType: ?PSTR,
    pszzPreviousNames: ?PSTR,
};

pub const DRIVER_INFO_4W = extern struct {
    cVersion: u32,
    pName: ?PWSTR,
    pEnvironment: ?PWSTR,
    pDriverPath: ?PWSTR,
    pDataFile: ?PWSTR,
    pConfigFile: ?PWSTR,
    pHelpFile: ?PWSTR,
    pDependentFiles: ?PWSTR,
    pMonitorName: ?PWSTR,
    pDefaultDataType: ?PWSTR,
    pszzPreviousNames: ?PWSTR,
};

pub const DRIVER_INFO_5A = extern struct {
    cVersion: u32,
    pName: ?PSTR,
    pEnvironment: ?PSTR,
    pDriverPath: ?PSTR,
    pDataFile: ?PSTR,
    pConfigFile: ?PSTR,
    dwDriverAttributes: u32,
    dwConfigVersion: u32,
    dwDriverVersion: u32,
};

pub const DRIVER_INFO_5W = extern struct {
    cVersion: u32,
    pName: ?PWSTR,
    pEnvironment: ?PWSTR,
    pDriverPath: ?PWSTR,
    pDataFile: ?PWSTR,
    pConfigFile: ?PWSTR,
    dwDriverAttributes: u32,
    dwConfigVersion: u32,
    dwDriverVersion: u32,
};

pub const DRIVER_INFO_6A = extern struct {
    cVersion: u32,
    pName: ?PSTR,
    pEnvironment: ?PSTR,
    pDriverPath: ?PSTR,
    pDataFile: ?PSTR,
    pConfigFile: ?PSTR,
    pHelpFile: ?PSTR,
    pDependentFiles: ?PSTR,
    pMonitorName: ?PSTR,
    pDefaultDataType: ?PSTR,
    pszzPreviousNames: ?PSTR,
    ftDriverDate: FILETIME,
    dwlDriverVersion: u64,
    pszMfgName: ?PSTR,
    pszOEMUrl: ?PSTR,
    pszHardwareID: ?PSTR,
    pszProvider: ?PSTR,
};

pub const DRIVER_INFO_6W = extern struct {
    cVersion: u32,
    pName: ?PWSTR,
    pEnvironment: ?PWSTR,
    pDriverPath: ?PWSTR,
    pDataFile: ?PWSTR,
    pConfigFile: ?PWSTR,
    pHelpFile: ?PWSTR,
    pDependentFiles: ?PWSTR,
    pMonitorName: ?PWSTR,
    pDefaultDataType: ?PWSTR,
    pszzPreviousNames: ?PWSTR,
    ftDriverDate: FILETIME,
    dwlDriverVersion: u64,
    pszMfgName: ?PWSTR,
    pszOEMUrl: ?PWSTR,
    pszHardwareID: ?PWSTR,
    pszProvider: ?PWSTR,
};

pub const DRIVER_INFO_8A = extern struct {
    cVersion: u32,
    pName: ?PSTR,
    pEnvironment: ?PSTR,
    pDriverPath: ?PSTR,
    pDataFile: ?PSTR,
    pConfigFile: ?PSTR,
    pHelpFile: ?PSTR,
    pDependentFiles: ?PSTR,
    pMonitorName: ?PSTR,
    pDefaultDataType: ?PSTR,
    pszzPreviousNames: ?PSTR,
    ftDriverDate: FILETIME,
    dwlDriverVersion: u64,
    pszMfgName: ?PSTR,
    pszOEMUrl: ?PSTR,
    pszHardwareID: ?PSTR,
    pszProvider: ?PSTR,
    pszPrintProcessor: ?PSTR,
    pszVendorSetup: ?PSTR,
    pszzColorProfiles: ?PSTR,
    pszInfPath: ?PSTR,
    dwPrinterDriverAttributes: u32,
    pszzCoreDriverDependencies: ?PSTR,
    ftMinInboxDriverVerDate: FILETIME,
    dwlMinInboxDriverVerVersion: u64,
};

pub const DRIVER_INFO_8W = extern struct {
    cVersion: u32,
    pName: ?PWSTR,
    pEnvironment: ?PWSTR,
    pDriverPath: ?PWSTR,
    pDataFile: ?PWSTR,
    pConfigFile: ?PWSTR,
    pHelpFile: ?PWSTR,
    pDependentFiles: ?PWSTR,
    pMonitorName: ?PWSTR,
    pDefaultDataType: ?PWSTR,
    pszzPreviousNames: ?PWSTR,
    ftDriverDate: FILETIME,
    dwlDriverVersion: u64,
    pszMfgName: ?PWSTR,
    pszOEMUrl: ?PWSTR,
    pszHardwareID: ?PWSTR,
    pszProvider: ?PWSTR,
    pszPrintProcessor: ?PWSTR,
    pszVendorSetup: ?PWSTR,
    pszzColorProfiles: ?PWSTR,
    pszInfPath: ?PWSTR,
    dwPrinterDriverAttributes: u32,
    pszzCoreDriverDependencies: ?PWSTR,
    ftMinInboxDriverVerDate: FILETIME,
    dwlMinInboxDriverVerVersion: u64,
};

pub const DOC_INFO_1A = extern struct {
    pDocName: ?PSTR,
    pOutputFile: ?PSTR,
    pDatatype: ?PSTR,
};

pub const DOC_INFO_1W = extern struct {
    pDocName: ?PWSTR,
    pOutputFile: ?PWSTR,
    pDatatype: ?PWSTR,
};

pub const FORM_INFO_1A = extern struct {
    Flags: u32,
    pName: ?PSTR,
    Size: SIZE,
    ImageableArea: RECTL,
};

pub const FORM_INFO_1W = extern struct {
    Flags: u32,
    pName: ?PWSTR,
    Size: SIZE,
    ImageableArea: RECTL,
};

pub const FORM_INFO_2A = extern struct {
    Flags: u32,
    pName: ?[*:0]const u8,
    Size: SIZE,
    ImageableArea: RECTL,
    pKeyword: ?[*:0]const u8,
    StringType: u32,
    pMuiDll: ?[*:0]const u8,
    dwResourceId: u32,
    pDisplayName: ?[*:0]const u8,
    wLangId: u16,
};

pub const FORM_INFO_2W = extern struct {
    Flags: u32,
    pName: ?[*:0]const u16,
    Size: SIZE,
    ImageableArea: RECTL,
    pKeyword: ?[*:0]const u8,
    StringType: u32,
    pMuiDll: ?[*:0]const u16,
    dwResourceId: u32,
    pDisplayName: ?[*:0]const u16,
    wLangId: u16,
};

pub const DOC_INFO_2A = extern struct {
    pDocName: ?PSTR,
    pOutputFile: ?PSTR,
    pDatatype: ?PSTR,
    dwMode: u32,
    JobId: u32,
};

pub const DOC_INFO_2W = extern struct {
    pDocName: ?PWSTR,
    pOutputFile: ?PWSTR,
    pDatatype: ?PWSTR,
    dwMode: u32,
    JobId: u32,
};

pub const DOC_INFO_3A = extern struct {
    pDocName: ?PSTR,
    pOutputFile: ?PSTR,
    pDatatype: ?PSTR,
    dwFlags: u32,
};

pub const DOC_INFO_3W = extern struct {
    pDocName: ?PWSTR,
    pOutputFile: ?PWSTR,
    pDatatype: ?PWSTR,
    dwFlags: u32,
};

pub const PRINTPROCESSOR_INFO_1A = extern struct {
    pName: ?PSTR,
};

pub const PRINTPROCESSOR_INFO_1W = extern struct {
    pName: ?PWSTR,
};

pub const PRINTPROCESSOR_CAPS_1 = extern struct {
    dwLevel: u32,
    dwNupOptions: u32,
    dwPageOrderFlags: u32,
    dwNumberOfCopies: u32,
};

pub const PRINTPROCESSOR_CAPS_2 = extern struct {
    dwLevel: u32,
    dwNupOptions: u32,
    dwPageOrderFlags: u32,
    dwNumberOfCopies: u32,
    dwDuplexHandlingCaps: u32,
    dwNupDirectionCaps: u32,
    dwNupBorderCaps: u32,
    dwBookletHandlingCaps: u32,
    dwScalingCaps: u32,
};

pub const PORT_INFO_1A = extern struct {
    pName: ?PSTR,
};

pub const PORT_INFO_1W = extern struct {
    pName: ?PWSTR,
};

pub const PORT_INFO_2A = extern struct {
    pPortName: ?PSTR,
    pMonitorName: ?PSTR,
    pDescription: ?PSTR,
    fPortType: u32,
    Reserved: u32,
};

pub const PORT_INFO_2W = extern struct {
    pPortName: ?PWSTR,
    pMonitorName: ?PWSTR,
    pDescription: ?PWSTR,
    fPortType: u32,
    Reserved: u32,
};

pub const PORT_INFO_3A = extern struct {
    dwStatus: u32,
    pszStatus: ?PSTR,
    dwSeverity: u32,
};

pub const PORT_INFO_3W = extern struct {
    dwStatus: u32,
    pszStatus: ?PWSTR,
    dwSeverity: u32,
};

pub const MONITOR_INFO_1A = extern struct {
    pName: ?PSTR,
};

pub const MONITOR_INFO_1W = extern struct {
    pName: ?PWSTR,
};

pub const MONITOR_INFO_2A = extern struct {
    pName: ?PSTR,
    pEnvironment: ?PSTR,
    pDLLName: ?PSTR,
};

pub const MONITOR_INFO_2W = extern struct {
    pName: ?PWSTR,
    pEnvironment: ?PWSTR,
    pDLLName: ?PWSTR,
};

pub const DATATYPES_INFO_1A = extern struct {
    pName: ?PSTR,
};

pub const DATATYPES_INFO_1W = extern struct {
    pName: ?PWSTR,
};

pub const PRINTER_DEFAULTSA = extern struct {
    pDatatype: ?PSTR,
    pDevMode: ?*DEVMODEA,
    DesiredAccess: PRINTER_ACCESS_RIGHTS,
};

pub const PRINTER_DEFAULTSW = extern struct {
    pDatatype: ?PWSTR,
    pDevMode: ?*DEVMODEW,
    DesiredAccess: PRINTER_ACCESS_RIGHTS,
};

pub const PRINTER_ENUM_VALUESA = extern struct {
    pValueName: ?PSTR,
    cbValueName: u32,
    dwType: u32,
    pData: ?*u8,
    cbData: u32,
};

pub const PRINTER_ENUM_VALUESW = extern struct {
    pValueName: ?PWSTR,
    cbValueName: u32,
    dwType: u32,
    pData: ?*u8,
    cbData: u32,
};

pub const PRINTER_NOTIFY_OPTIONS_TYPE = extern struct {
    Type: u16,
    Reserved0: u16,
    Reserved1: u32,
    Reserved2: u32,
    Count: u32,
    pFields: ?*u16,
};

pub const PRINTER_NOTIFY_OPTIONS = extern struct {
    Version: u32,
    Flags: u32,
    Count: u32,
    pTypes: ?*PRINTER_NOTIFY_OPTIONS_TYPE,
};

pub const PRINTER_NOTIFY_INFO_DATA = extern struct {
    Type: u16,
    Field: u16,
    Reserved: u32,
    Id: u32,
    NotifyData: extern union {
        adwData: [2]u32,
        Data: extern struct {
            cbBuf: u32,
            pBuf: ?*anyopaque,
        },
    },
};

pub const PRINTER_NOTIFY_INFO = extern struct {
    Version: u32,
    Flags: u32,
    Count: u32,
    aData: [1]PRINTER_NOTIFY_INFO_DATA,
};

pub const BINARY_CONTAINER = extern struct {
    cbBuf: u32,
    pData: ?*u8,
};

pub const BIDI_DATA = extern struct {
    dwBidiType: u32,
    u: extern union {
        bData: BOOL,
        iData: i32,
        sData: ?PWSTR,
        fData: f32,
        biData: BINARY_CONTAINER,
    },
};

pub const BIDI_REQUEST_DATA = extern struct {
    dwReqNumber: u32,
    pSchema: ?PWSTR,
    data: BIDI_DATA,
};

pub const BIDI_REQUEST_CONTAINER = extern struct {
    Version: u32,
    Flags: u32,
    Count: u32,
    aData: [1]BIDI_REQUEST_DATA,
};

pub const BIDI_RESPONSE_DATA = extern struct {
    dwResult: u32,
    dwReqNumber: u32,
    pSchema: ?PWSTR,
    data: BIDI_DATA,
};

pub const BIDI_RESPONSE_CONTAINER = extern struct {
    Version: u32,
    Flags: u32,
    Count: u32,
    aData: [1]BIDI_RESPONSE_DATA,
};

pub const BIDI_TYPE = enum(i32) {
    NULL = 0,
    INT = 1,
    FLOAT = 2,
    BOOL = 3,
    STRING = 4,
    TEXT = 5,
    ENUM = 6,
    BLOB = 7,
};
pub const BIDI_NULL = BIDI_TYPE.NULL;
pub const BIDI_INT = BIDI_TYPE.INT;
pub const BIDI_FLOAT = BIDI_TYPE.FLOAT;
pub const BIDI_BOOL = BIDI_TYPE.BOOL;
pub const BIDI_STRING = BIDI_TYPE.STRING;
pub const BIDI_TEXT = BIDI_TYPE.TEXT;
pub const BIDI_ENUM = BIDI_TYPE.ENUM;
pub const BIDI_BLOB = BIDI_TYPE.BLOB;

pub const PROVIDOR_INFO_1A = extern struct {
    pName: ?PSTR,
    pEnvironment: ?PSTR,
    pDLLName: ?PSTR,
};

pub const PROVIDOR_INFO_1W = extern struct {
    pName: ?PWSTR,
    pEnvironment: ?PWSTR,
    pDLLName: ?PWSTR,
};

pub const PROVIDOR_INFO_2A = extern struct {
    pOrder: ?PSTR,
};

pub const PROVIDOR_INFO_2W = extern struct {
    pOrder: ?PWSTR,
};

pub const PRINTER_OPTION_FLAGS = enum(i32) {
    NO_CACHE = 1,
    CACHE = 2,
    CLIENT_CHANGE = 4,
    NO_CLIENT_DATA = 8,
};
pub const PRINTER_OPTION_NO_CACHE = PRINTER_OPTION_FLAGS.NO_CACHE;
pub const PRINTER_OPTION_CACHE = PRINTER_OPTION_FLAGS.CACHE;
pub const PRINTER_OPTION_CLIENT_CHANGE = PRINTER_OPTION_FLAGS.CLIENT_CHANGE;
pub const PRINTER_OPTION_NO_CLIENT_DATA = PRINTER_OPTION_FLAGS.NO_CLIENT_DATA;

pub const PRINTER_OPTIONSA = extern struct {
    cbSize: u32,
    dwFlags: PRINTER_OPTION_FLAGS,
};

pub const PRINTER_OPTIONSW = extern struct {
    cbSize: u32,
    dwFlags: PRINTER_OPTION_FLAGS,
};

pub const PRINTER_CONNECTION_INFO_1A = extern struct {
    dwFlags: u32,
    pszDriverName: ?PSTR,
};

pub const PRINTER_CONNECTION_INFO_1W = extern struct {
    dwFlags: u32,
    pszDriverName: ?PWSTR,
};

pub const CORE_PRINTER_DRIVERA = extern struct {
    CoreDriverGUID: Guid,
    ftDriverDate: FILETIME,
    dwlDriverVersion: u64,
    szPackageID: [260]CHAR,
};

pub const CORE_PRINTER_DRIVERW = extern struct {
    CoreDriverGUID: Guid,
    ftDriverDate: FILETIME,
    dwlDriverVersion: u64,
    szPackageID: [260]u16,
};

pub const EPrintPropertyType = enum(i32) {
    String = 1,
    Int32 = 2,
    Int64 = 3,
    Byte = 4,
    Time = 5,
    DevMode = 6,
    SD = 7,
    NotificationReply = 8,
    NotificationOptions = 9,
    Buffer = 10,
};
pub const kPropertyTypeString = EPrintPropertyType.String;
pub const kPropertyTypeInt32 = EPrintPropertyType.Int32;
pub const kPropertyTypeInt64 = EPrintPropertyType.Int64;
pub const kPropertyTypeByte = EPrintPropertyType.Byte;
pub const kPropertyTypeTime = EPrintPropertyType.Time;
pub const kPropertyTypeDevMode = EPrintPropertyType.DevMode;
pub const kPropertyTypeSD = EPrintPropertyType.SD;
pub const kPropertyTypeNotificationReply = EPrintPropertyType.NotificationReply;
pub const kPropertyTypeNotificationOptions = EPrintPropertyType.NotificationOptions;
pub const kPropertyTypeBuffer = EPrintPropertyType.Buffer;

pub const EPrintXPSJobProgress = enum(i32) {
    AddingDocumentSequence = 0,
    DocumentSequenceAdded = 1,
    AddingFixedDocument = 2,
    FixedDocumentAdded = 3,
    AddingFixedPage = 4,
    FixedPageAdded = 5,
    ResourceAdded = 6,
    FontAdded = 7,
    ImageAdded = 8,
    XpsDocumentCommitted = 9,
};
pub const kAddingDocumentSequence = EPrintXPSJobProgress.AddingDocumentSequence;
pub const kDocumentSequenceAdded = EPrintXPSJobProgress.DocumentSequenceAdded;
pub const kAddingFixedDocument = EPrintXPSJobProgress.AddingFixedDocument;
pub const kFixedDocumentAdded = EPrintXPSJobProgress.FixedDocumentAdded;
pub const kAddingFixedPage = EPrintXPSJobProgress.AddingFixedPage;
pub const kFixedPageAdded = EPrintXPSJobProgress.FixedPageAdded;
pub const kResourceAdded = EPrintXPSJobProgress.ResourceAdded;
pub const kFontAdded = EPrintXPSJobProgress.FontAdded;
pub const kImageAdded = EPrintXPSJobProgress.ImageAdded;
pub const kXpsDocumentCommitted = EPrintXPSJobProgress.XpsDocumentCommitted;

pub const EPrintXPSJobOperation = enum(i32) {
    Production = 1,
    Consumption = 2,
};
pub const kJobProduction = EPrintXPSJobOperation.Production;
pub const kJobConsumption = EPrintXPSJobOperation.Consumption;

pub const PrintPropertyValue = extern struct {
    ePropertyType: EPrintPropertyType,
    value: extern union {
        propertyByte: u8,
        propertyString: ?PWSTR,
        propertyInt32: i32,
        propertyInt64: i64,
        propertyBlob: extern struct {
            cbBuf: u32,
            pBuf: ?*anyopaque,
        },
    },
};

pub const PrintNamedProperty = extern struct {
    propertyName: ?PWSTR,
    propertyValue: PrintPropertyValue,
};

pub const PrintPropertiesCollection = extern struct {
    numberOfProperties: u32,
    propertiesCollection: ?*PrintNamedProperty,
};

pub const PRINT_EXECUTION_CONTEXT = enum(i32) {
    APPLICATION = 0,
    SPOOLER_SERVICE = 1,
    SPOOLER_ISOLATION_HOST = 2,
    FILTER_PIPELINE = 3,
    WOW64 = 4,
};
pub const PRINT_EXECUTION_CONTEXT_APPLICATION = PRINT_EXECUTION_CONTEXT.APPLICATION;
pub const PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE = PRINT_EXECUTION_CONTEXT.SPOOLER_SERVICE;
pub const PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST = PRINT_EXECUTION_CONTEXT.SPOOLER_ISOLATION_HOST;
pub const PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE = PRINT_EXECUTION_CONTEXT.FILTER_PIPELINE;
pub const PRINT_EXECUTION_CONTEXT_WOW64 = PRINT_EXECUTION_CONTEXT.WOW64;

pub const PRINT_EXECUTION_DATA = extern struct {
    context: PRINT_EXECUTION_CONTEXT,
    clientAppPID: u32,
};

pub const MxdcLandscapeRotationEnums = enum(i32) {
    COUNTERCLOCKWISE_90_DEGREES = 90,
    NONE = 0,
    COUNTERCLOCKWISE_270_DEGREES = -90,
};
pub const MXDC_LANDSCAPE_ROTATE_COUNTERCLOCKWISE_90_DEGREES = MxdcLandscapeRotationEnums.COUNTERCLOCKWISE_90_DEGREES;
pub const MXDC_LANDSCAPE_ROTATE_NONE = MxdcLandscapeRotationEnums.NONE;
pub const MXDC_LANDSCAPE_ROTATE_COUNTERCLOCKWISE_270_DEGREES = MxdcLandscapeRotationEnums.COUNTERCLOCKWISE_270_DEGREES;

pub const MxdcImageTypeEnums = enum(i32) {
    JPEGHIGH_COMPRESSION = 1,
    JPEGMEDIUM_COMPRESSION = 2,
    JPEGLOW_COMPRESSION = 3,
    PNG = 4,
};
pub const MXDC_IMAGETYPE_JPEGHIGH_COMPRESSION = MxdcImageTypeEnums.JPEGHIGH_COMPRESSION;
pub const MXDC_IMAGETYPE_JPEGMEDIUM_COMPRESSION = MxdcImageTypeEnums.JPEGMEDIUM_COMPRESSION;
pub const MXDC_IMAGETYPE_JPEGLOW_COMPRESSION = MxdcImageTypeEnums.JPEGLOW_COMPRESSION;
pub const MXDC_IMAGETYPE_PNG = MxdcImageTypeEnums.PNG;

pub const MxdcEscapeHeader = extern struct {
    cbInput: u32 align(1),
    cbOutput: u32 align(1),
    opCode: u32 align(1),
};

pub const MxdcGetFileNameData = extern struct {
    cbOutput: u32 align(1),
    wszData: [1]u16 align(1),
};

pub const MxdcS0PageData = extern struct {
    dwSize: u32 align(1),
    bData: [1]u8 align(1),
};

pub const MxdcS0PageEnums = enum(i32) {
    TTF = 0,
    JPEG = 1,
    PNG = 2,
    TIFF = 3,
    WDP = 4,
    DICTIONARY = 5,
    ICC_PROFILE = 6,
    JPEG_THUMBNAIL = 7,
    PNG_THUMBNAIL = 8,
    MAX = 9,
};
pub const MXDC_RESOURCE_TTF = MxdcS0PageEnums.TTF;
pub const MXDC_RESOURCE_JPEG = MxdcS0PageEnums.JPEG;
pub const MXDC_RESOURCE_PNG = MxdcS0PageEnums.PNG;
pub const MXDC_RESOURCE_TIFF = MxdcS0PageEnums.TIFF;
pub const MXDC_RESOURCE_WDP = MxdcS0PageEnums.WDP;
pub const MXDC_RESOURCE_DICTIONARY = MxdcS0PageEnums.DICTIONARY;
pub const MXDC_RESOURCE_ICC_PROFILE = MxdcS0PageEnums.ICC_PROFILE;
pub const MXDC_RESOURCE_JPEG_THUMBNAIL = MxdcS0PageEnums.JPEG_THUMBNAIL;
pub const MXDC_RESOURCE_PNG_THUMBNAIL = MxdcS0PageEnums.PNG_THUMBNAIL;
pub const MXDC_RESOURCE_MAX = MxdcS0PageEnums.MAX;

pub const MxdcXpsS0PageResource = extern struct {
    dwSize: u32 align(1),
    dwResourceType: u32 align(1),
    szUri: [260]u8 align(1),
    dwDataSize: u32 align(1),
    bData: [1]u8 align(1),
};

pub const MxdcPrintTicketPassthrough = extern struct {
    dwDataSize: u32 align(1),
    bData: [1]u8 align(1),
};

pub const MxdcPrintTicketEscape = extern struct {
    mxdcEscape: MxdcEscapeHeader,
    printTicketData: MxdcPrintTicketPassthrough,
};

pub const MxdcS0PagePassthroughEscape = extern struct {
    mxdcEscape: MxdcEscapeHeader,
    xpsS0PageData: MxdcS0PageData,
};

pub const MxdcS0PageResourceEscape = extern struct {
    mxdcEscape: MxdcEscapeHeader,
    xpsS0PageResourcePassthrough: MxdcXpsS0PageResource,
};

pub const DEVICEPROPERTYHEADER = extern struct {
    cbSize: u16,
    Flags: u16,
    hPrinter: ?HANDLE,
    pszPrinterName: ?*i8,
};

pub const DOCUMENTPROPERTYHEADER = extern struct {
    cbSize: u16,
    Reserved: u16,
    hPrinter: ?HANDLE,
    pszPrinterName: ?*i8,
    pdmIn: ?*DEVMODEA,
    pdmOut: ?*DEVMODEA,
    cbOut: u32,
    fMode: u32,
};

pub const DEVQUERYPRINT_INFO = extern struct {
    cbSize: u16,
    Level: u16,
    hPrinter: ?HANDLE,
    pDevMode: ?*DEVMODEA,
    pszErrorStr: ?PWSTR,
    cchErrorStr: u32,
    cchNeeded: u32,
};

pub const DRIVER_UPGRADE_INFO_1 = extern struct {
    pPrinterName: ?*i8,
    pOldDriverDirectory: ?*i8,
};

pub const DRIVER_UPGRADE_INFO_2 = extern struct {
    pPrinterName: ?*i8,
    pOldDriverDirectory: ?*i8,
    cVersion: u32,
    pName: ?*i8,
    pEnvironment: ?*i8,
    pDriverPath: ?*i8,
    pDataFile: ?*i8,
    pConfigFile: ?*i8,
    pHelpFile: ?*i8,
    pDependentFiles: ?*i8,
    pMonitorName: ?*i8,
    pDefaultDataType: ?*i8,
    pszzPreviousNames: ?*i8,
};

pub const DOCEVENT_FILTER = extern struct {
    cbSize: u32,
    cElementsAllocated: u32,
    cElementsNeeded: u32,
    cElementsReturned: u32,
    aDocEventCall: [1]u32,
};

pub const DOCEVENT_CREATEDCPRE = extern struct {
    pszDriver: ?PWSTR,
    pszDevice: ?PWSTR,
    pdm: ?*DEVMODEW,
    bIC: BOOL,
};

pub const DOCEVENT_ESCAPE = extern struct {
    iEscape: i32,
    cjInput: i32,
    pvInData: ?*anyopaque,
};

pub const PRINTER_EVENT_ATTRIBUTES_INFO = extern struct {
    cbSize: u32,
    dwOldAttributes: u32,
    dwNewAttributes: u32,
};

pub const ATTRIBUTE_INFO_1 = extern struct {
    dwJobNumberOfPagesPerSide: u32,
    dwDrvNumberOfPagesPerSide: u32,
    dwNupBorderFlags: u32,
    dwJobPageOrderFlags: u32,
    dwDrvPageOrderFlags: u32,
    dwJobNumberOfCopies: u32,
    dwDrvNumberOfCopies: u32,
};

pub const ATTRIBUTE_INFO_2 = extern struct {
    dwJobNumberOfPagesPerSide: u32,
    dwDrvNumberOfPagesPerSide: u32,
    dwNupBorderFlags: u32,
    dwJobPageOrderFlags: u32,
    dwDrvPageOrderFlags: u32,
    dwJobNumberOfCopies: u32,
    dwDrvNumberOfCopies: u32,
    dwColorOptimization: u32,
};

pub const ATTRIBUTE_INFO_3 = extern struct {
    dwJobNumberOfPagesPerSide: u32,
    dwDrvNumberOfPagesPerSide: u32,
    dwNupBorderFlags: u32,
    dwJobPageOrderFlags: u32,
    dwDrvPageOrderFlags: u32,
    dwJobNumberOfCopies: u32,
    dwDrvNumberOfCopies: u32,
    dwColorOptimization: u32,
    dmPrintQuality: i16,
    dmYResolution: i16,
};

pub const ATTRIBUTE_INFO_4 = extern struct {
    dwJobNumberOfPagesPerSide: u32,
    dwDrvNumberOfPagesPerSide: u32,
    dwNupBorderFlags: u32,
    dwJobPageOrderFlags: u32,
    dwDrvPageOrderFlags: u32,
    dwJobNumberOfCopies: u32,
    dwDrvNumberOfCopies: u32,
    dwColorOptimization: u32,
    dmPrintQuality: i16,
    dmYResolution: i16,
    dwDuplexFlags: u32,
    dwNupDirection: u32,
    dwBookletFlags: u32,
    dwScalingPercentX: u32,
    dwScalingPercentY: u32,
};

pub const PSCRIPT5_PRIVATE_DEVMODE = extern struct {
    wReserved: [57]u16,
    wSize: u16,
};

pub const UNIDRV_PRIVATE_DEVMODE = extern struct {
    wReserved: [4]u16,
    wSize: u16,
};

pub const PUBLISHERINFO = extern struct {
    dwMode: u32,
    wMinoutlinePPEM: u16,
    wMaxbitmapPPEM: u16,
};

pub const OEMDMPARAM = extern struct {
    cbSize: u32,
    pdriverobj: ?*anyopaque,
    hPrinter: ?HANDLE,
    hModule: ?HANDLE,
    pPublicDMIn: ?*DEVMODEA,
    pPublicDMOut: ?*DEVMODEA,
    pOEMDMIn: ?*anyopaque,
    pOEMDMOut: ?*anyopaque,
    cbBufSize: u32,
};

pub const OEM_DMEXTRAHEADER = extern struct {
    dwSize: u32,
    dwSignature: u32,
    dwVersion: u32,
};

pub const USERDATA = extern struct {
    dwSize: u32,
    dwItemID: usize,
    pKeyWordName: ?PSTR,
    dwReserved: [8]u32,
};

pub const PFN_DrvGetDriverSetting = *const fn (
    pdriverobj: ?*anyopaque,
    feature: ?[*:0]const u8,
    // TODO: what to do with BytesParamIndex 3?
    p_output: ?*anyopaque,
    cb_size: u32,
    pcb_needed: ?*u32,
    pdw_options_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_DrvUpgradeRegistrySetting = *const fn (
    h_printer: ?HANDLE,
    p_feature: ?[*:0]const u8,
    p_option: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PFN_DrvUpdateUISetting = *const fn (
    pdriverobj: ?*anyopaque,
    p_opt_item: ?*anyopaque,
    dw_previous_selection: u32,
    dw_mode: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const SIMULATE_CAPS_1 = extern struct {
    dwLevel: u32,
    dwPageOrderFlags: u32,
    dwNumberOfCopies: u32,
    dwCollate: u32,
    dwNupOptions: u32,
};

pub const OEMUIPROCS = extern struct {
    DrvGetDriverSetting: ?PFN_DrvGetDriverSetting,
    DrvUpdateUISetting: ?PFN_DrvUpdateUISetting,
};

pub const OEMUIOBJ = extern struct {
    cbSize: u32,
    pOemUIProcs: ?*OEMUIPROCS,
};

// TODO: this function pointer causes dependency loop problems, so it's stubbed out
pub const OEMCUIPCALLBACK = switch (@import("builtin").zig_backend) {
    .stage1 => fn () callconv(@import("std").os.windows.WINAPI) void,
    else => *const fn () callconv(@import("std").os.windows.WINAPI) void,
};

pub const OEMCUIPPARAM = extern struct {
    cbSize: u32,
    poemuiobj: ?*OEMUIOBJ,
    hPrinter: ?HANDLE,
    pPrinterName: ?PWSTR,
    hModule: ?HANDLE,
    hOEMHeap: ?HANDLE,
    pPublicDM: ?*DEVMODEA,
    pOEMDM: ?*anyopaque,
    dwFlags: u32,
    pDrvOptItems: ?*OPTITEM,
    cDrvOptItems: u32,
    pOEMOptItems: ?*OPTITEM,
    cOEMOptItems: u32,
    pOEMUserData: ?*anyopaque,
    OEMCUIPCallback: ?OEMCUIPCALLBACK,
};

pub const OEMUIPSPARAM = extern struct {
    cbSize: u32,
    poemuiobj: ?*OEMUIOBJ,
    hPrinter: ?HANDLE,
    pPrinterName: ?PWSTR,
    hModule: ?HANDLE,
    hOEMHeap: ?HANDLE,
    pPublicDM: ?*DEVMODEA,
    pOEMDM: ?*anyopaque,
    pOEMUserData: ?*anyopaque,
    dwFlags: u32,
    pOemEntry: ?*anyopaque,
};

pub const EATTRIBUTE_DATATYPE = enum(i32) {
    UNKNOWN = 0,
    BOOL = 1,
    INT = 2,
    LONG = 3,
    DWORD = 4,
    ASCII = 5,
    UNICODE = 6,
    BINARY = 7,
    SIZE = 8,
    RECT = 9,
    CUSTOMSIZEPARAMS = 10,
};
pub const kADT_UNKNOWN = EATTRIBUTE_DATATYPE.UNKNOWN;
pub const kADT_BOOL = EATTRIBUTE_DATATYPE.BOOL;
pub const kADT_INT = EATTRIBUTE_DATATYPE.INT;
pub const kADT_LONG = EATTRIBUTE_DATATYPE.LONG;
pub const kADT_DWORD = EATTRIBUTE_DATATYPE.DWORD;
pub const kADT_ASCII = EATTRIBUTE_DATATYPE.ASCII;
pub const kADT_UNICODE = EATTRIBUTE_DATATYPE.UNICODE;
pub const kADT_BINARY = EATTRIBUTE_DATATYPE.BINARY;
pub const kADT_SIZE = EATTRIBUTE_DATATYPE.SIZE;
pub const kADT_RECT = EATTRIBUTE_DATATYPE.RECT;
pub const kADT_CUSTOMSIZEPARAMS = EATTRIBUTE_DATATYPE.CUSTOMSIZEPARAMS;

pub const CUSTOMSIZEPARAM = extern struct {
    dwOrder: i32,
    lMinVal: i32,
    lMaxVal: i32,
};

pub const PRINT_FEATURE_OPTION = extern struct {
    pszFeature: ?[*:0]const u8,
    pszOption: ?[*:0]const u8,
};

const IID_IPrintCoreHelper_Value = Guid.initString("a89ec53e-3905-49c6-9c1a-c0a88117fdb6");
pub const IID_IPrintCoreHelper = &IID_IPrintCoreHelper_Value;
pub const IPrintCoreHelper = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOption: *const fn (
            self: *const IPrintCoreHelper,
            // TODO: what to do with BytesParamIndex 1?
            p_devmode: ?*const DEVMODEA,
            cb_size: u32,
            psz_feature_requested: ?[*:0]const u8,
            ppsz_option: ?*?PSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOptions: *const fn (
            self: *const IPrintCoreHelper,
            p_devmode: ?*DEVMODEA,
            cb_size: u32,
            b_resolve_conflicts: BOOL,
            p_f_o_pairs: ?*const PRINT_FEATURE_OPTION,
            c_pairs: u32,
            pc_pairs_written: ?*u32,
            pdw_result: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumConstrainedOptions: *const fn (
            self: *const IPrintCoreHelper,
            p_devmode: ?*const DEVMODEA,
            cb_size: u32,
            psz_feature_keyword: ?[*:0]const u8,
            p_constrained_option_list: ?*?*?*?PSTR,
            pdw_num_options: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WhyConstrained: *const fn (
            self: *const IPrintCoreHelper,
            // TODO: what to do with BytesParamIndex 1?
            p_devmode: ?*const DEVMODEA,
            cb_size: u32,
            psz_feature_keyword: ?[*:0]const u8,
            psz_option_keyword: ?[*:0]const u8,
            pp_f_o_constraints: ?*const ?*PRINT_FEATURE_OPTION,
            pdw_num_options: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumFeatures: *const fn (
            self: *const IPrintCoreHelper,
            p_feature_list: ?*?*?*?PSTR,
            pdw_num_features: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumOptions: *const fn (
            self: *const IPrintCoreHelper,
            psz_feature_keyword: ?[*:0]const u8,
            p_option_list: ?*?*?*?PSTR,
            pdw_num_options: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFontSubstitution: *const fn (
            self: *const IPrintCoreHelper,
            psz_true_type_font_name: ?[*:0]const u16,
            ppsz_dev_font_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFontSubstitution: *const fn (
            self: *const IPrintCoreHelper,
            psz_true_type_font_name: ?[*:0]const u16,
            psz_dev_font_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInstanceOfMSXMLObject: *const fn (
            self: *const IPrintCoreHelper,
            rclsid: ?*const Guid,
            p_unk_outer: ?*IUnknown,
            dw_cls_context: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getOption(self: *const T, p_devmode_: ?*const DEVMODEA, cb_size_: u32, psz_feature_requested_: ?[*:0]const u8, ppsz_option_: ?*?PSTR) HRESULT {
                return @as(*const IPrintCoreHelper.VTable, @ptrCast(self.vtable)).GetOption(@as(*const IPrintCoreHelper, @ptrCast(self)), p_devmode_, cb_size_, psz_feature_requested_, ppsz_option_);
            }
            pub inline fn setOptions(self: *const T, p_devmode_: ?*DEVMODEA, cb_size_: u32, b_resolve_conflicts_: BOOL, p_f_o_pairs_: ?*const PRINT_FEATURE_OPTION, c_pairs_: u32, pc_pairs_written_: ?*u32, pdw_result_: ?*u32) HRESULT {
                return @as(*const IPrintCoreHelper.VTable, @ptrCast(self.vtable)).SetOptions(@as(*const IPrintCoreHelper, @ptrCast(self)), p_devmode_, cb_size_, b_resolve_conflicts_, p_f_o_pairs_, c_pairs_, pc_pairs_written_, pdw_result_);
            }
            pub inline fn enumConstrainedOptions(self: *const T, p_devmode_: ?*const DEVMODEA, cb_size_: u32, psz_feature_keyword_: ?[*:0]const u8, p_constrained_option_list_: ?*?*?*?PSTR, pdw_num_options_: ?*u32) HRESULT {
                return @as(*const IPrintCoreHelper.VTable, @ptrCast(self.vtable)).EnumConstrainedOptions(@as(*const IPrintCoreHelper, @ptrCast(self)), p_devmode_, cb_size_, psz_feature_keyword_, p_constrained_option_list_, pdw_num_options_);
            }
            pub inline fn whyConstrained(self: *const T, p_devmode_: ?*const DEVMODEA, cb_size_: u32, psz_feature_keyword_: ?[*:0]const u8, psz_option_keyword_: ?[*:0]const u8, pp_f_o_constraints_: ?*const ?*PRINT_FEATURE_OPTION, pdw_num_options_: ?*u32) HRESULT {
                return @as(*const IPrintCoreHelper.VTable, @ptrCast(self.vtable)).WhyConstrained(@as(*const IPrintCoreHelper, @ptrCast(self)), p_devmode_, cb_size_, psz_feature_keyword_, psz_option_keyword_, pp_f_o_constraints_, pdw_num_options_);
            }
            pub inline fn enumFeatures(self: *const T, p_feature_list_: ?*?*?*?PSTR, pdw_num_features_: ?*u32) HRESULT {
                return @as(*const IPrintCoreHelper.VTable, @ptrCast(self.vtable)).EnumFeatures(@as(*const IPrintCoreHelper, @ptrCast(self)), p_feature_list_, pdw_num_features_);
            }
            pub inline fn enumOptions(self: *const T, psz_feature_keyword_: ?[*:0]const u8, p_option_list_: ?*?*?*?PSTR, pdw_num_options_: ?*u32) HRESULT {
                return @as(*const IPrintCoreHelper.VTable, @ptrCast(self.vtable)).EnumOptions(@as(*const IPrintCoreHelper, @ptrCast(self)), psz_feature_keyword_, p_option_list_, pdw_num_options_);
            }
            pub inline fn getFontSubstitution(self: *const T, psz_true_type_font_name_: ?[*:0]const u16, ppsz_dev_font_name_: ?*?PWSTR) HRESULT {
                return @as(*const IPrintCoreHelper.VTable, @ptrCast(self.vtable)).GetFontSubstitution(@as(*const IPrintCoreHelper, @ptrCast(self)), psz_true_type_font_name_, ppsz_dev_font_name_);
            }
            pub inline fn setFontSubstitution(self: *const T, psz_true_type_font_name_: ?[*:0]const u16, psz_dev_font_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IPrintCoreHelper.VTable, @ptrCast(self.vtable)).SetFontSubstitution(@as(*const IPrintCoreHelper, @ptrCast(self)), psz_true_type_font_name_, psz_dev_font_name_);
            }
            pub inline fn createInstanceOfMSXMLObject(self: *const T, rclsid_: ?*const Guid, p_unk_outer_: ?*IUnknown, dw_cls_context_: u32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IPrintCoreHelper.VTable, @ptrCast(self.vtable)).CreateInstanceOfMSXMLObject(@as(*const IPrintCoreHelper, @ptrCast(self)), rclsid_, p_unk_outer_, dw_cls_context_, riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintCoreHelperUni_Value = Guid.initString("7e8e51d6-e5ee-4426-817b-958b9444eb79");
pub const IID_IPrintCoreHelperUni = &IID_IPrintCoreHelperUni_Value;
pub const IPrintCoreHelperUni = extern struct {
    pub const VTable = extern struct {
        base: IPrintCoreHelper.VTable,
        CreateGDLSnapshot: *const fn (
            self: *const IPrintCoreHelperUni,
            p_devmode: ?*DEVMODEA,
            cb_size: u32,
            dw_flags: u32,
            pp_snapshot_stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDefaultGDLSnapshot: *const fn (
            self: *const IPrintCoreHelperUni,
            dw_flags: u32,
            pp_snapshot_stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintCoreHelper.MethodMixin(T);
            pub inline fn createGDLSnapshot(self: *const T, p_devmode_: ?*DEVMODEA, cb_size_: u32, dw_flags_: u32, pp_snapshot_stream_: ?*?*IStream) HRESULT {
                return @as(*const IPrintCoreHelperUni.VTable, @ptrCast(self.vtable)).CreateGDLSnapshot(@as(*const IPrintCoreHelperUni, @ptrCast(self)), p_devmode_, cb_size_, dw_flags_, pp_snapshot_stream_);
            }
            pub inline fn createDefaultGDLSnapshot(self: *const T, dw_flags_: u32, pp_snapshot_stream_: ?*?*IStream) HRESULT {
                return @as(*const IPrintCoreHelperUni.VTable, @ptrCast(self.vtable)).CreateDefaultGDLSnapshot(@as(*const IPrintCoreHelperUni, @ptrCast(self)), dw_flags_, pp_snapshot_stream_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintCoreHelperUni2_Value = Guid.initString("6c8afdfc-ead0-4d2d-8071-9bf0175a6c3a");
pub const IID_IPrintCoreHelperUni2 = &IID_IPrintCoreHelperUni2_Value;
pub const IPrintCoreHelperUni2 = extern struct {
    pub const VTable = extern struct {
        base: IPrintCoreHelperUni.VTable,
        GetNamedCommand: *const fn (
            self: *const IPrintCoreHelperUni2,
            // TODO: what to do with BytesParamIndex 1?
            p_devmode: ?*DEVMODEA,
            cb_size: u32,
            psz_command_name: ?[*:0]const u16,
            pp_command_bytes: ?*?*u8,
            pcb_command_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintCoreHelperUni.MethodMixin(T);
            pub inline fn getNamedCommand(self: *const T, p_devmode_: ?*DEVMODEA, cb_size_: u32, psz_command_name_: ?[*:0]const u16, pp_command_bytes_: ?*?*u8, pcb_command_size_: ?*u32) HRESULT {
                return @as(*const IPrintCoreHelperUni2.VTable, @ptrCast(self.vtable)).GetNamedCommand(@as(*const IPrintCoreHelperUni2, @ptrCast(self)), p_devmode_, cb_size_, psz_command_name_, pp_command_bytes_, pcb_command_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintCoreHelperPS_Value = Guid.initString("c2c14f6f-95d3-4d63-96cf-6bd9e6c907c2");
pub const IID_IPrintCoreHelperPS = &IID_IPrintCoreHelperPS_Value;
pub const IPrintCoreHelperPS = extern struct {
    pub const VTable = extern struct {
        base: IPrintCoreHelper.VTable,
        GetGlobalAttribute: *const fn (
            self: *const IPrintCoreHelperPS,
            psz_attribute: ?[*:0]const u8,
            pdw_data_type: ?*u32,
            ppb_data: ?*?*u8,
            pcb_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFeatureAttribute: *const fn (
            self: *const IPrintCoreHelperPS,
            psz_feature_keyword: ?[*:0]const u8,
            psz_attribute: ?[*:0]const u8,
            pdw_data_type: ?*u32,
            ppb_data: ?*?*u8,
            pcb_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptionAttribute: *const fn (
            self: *const IPrintCoreHelperPS,
            psz_feature_keyword: ?[*:0]const u8,
            psz_option_keyword: ?[*:0]const u8,
            psz_attribute: ?[*:0]const u8,
            pdw_data_type: ?*u32,
            ppb_data: ?*?*u8,
            pcb_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintCoreHelper.MethodMixin(T);
            pub inline fn getGlobalAttribute(self: *const T, psz_attribute_: ?[*:0]const u8, pdw_data_type_: ?*u32, ppb_data_: ?*?*u8, pcb_size_: ?*u32) HRESULT {
                return @as(*const IPrintCoreHelperPS.VTable, @ptrCast(self.vtable)).GetGlobalAttribute(@as(*const IPrintCoreHelperPS, @ptrCast(self)), psz_attribute_, pdw_data_type_, ppb_data_, pcb_size_);
            }
            pub inline fn getFeatureAttribute(self: *const T, psz_feature_keyword_: ?[*:0]const u8, psz_attribute_: ?[*:0]const u8, pdw_data_type_: ?*u32, ppb_data_: ?*?*u8, pcb_size_: ?*u32) HRESULT {
                return @as(*const IPrintCoreHelperPS.VTable, @ptrCast(self.vtable)).GetFeatureAttribute(@as(*const IPrintCoreHelperPS, @ptrCast(self)), psz_feature_keyword_, psz_attribute_, pdw_data_type_, ppb_data_, pcb_size_);
            }
            pub inline fn getOptionAttribute(self: *const T, psz_feature_keyword_: ?[*:0]const u8, psz_option_keyword_: ?[*:0]const u8, psz_attribute_: ?[*:0]const u8, pdw_data_type_: ?*u32, ppb_data_: ?*?*u8, pcb_size_: ?*u32) HRESULT {
                return @as(*const IPrintCoreHelperPS.VTable, @ptrCast(self.vtable)).GetOptionAttribute(@as(*const IPrintCoreHelperPS, @ptrCast(self)), psz_feature_keyword_, psz_option_keyword_, psz_attribute_, pdw_data_type_, ppb_data_, pcb_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintOemCommon_Value = Guid.initString("7f42285e-91d5-11d1-8820-00c04fb961ec");
pub const IID_IPrintOemCommon = &IID_IPrintOemCommon_Value;
pub const IPrintOemCommon = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInfo: *const fn (
            self: *const IPrintOemCommon,
            dw_mode: u32,
            // TODO: what to do with BytesParamIndex 2?
            p_buffer: ?*anyopaque,
            cb_size: u32,
            pcb_needed: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DevMode: *const fn (
            self: *const IPrintOemCommon,
            dw_mode: u32,
            p_oem_d_m_param: ?*OEMDMPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getInfo(self: *const T, dw_mode_: u32, p_buffer_: ?*anyopaque, cb_size_: u32, pcb_needed_: ?*u32) HRESULT {
                return @as(*const IPrintOemCommon.VTable, @ptrCast(self.vtable)).GetInfo(@as(*const IPrintOemCommon, @ptrCast(self)), dw_mode_, p_buffer_, cb_size_, pcb_needed_);
            }
            pub inline fn devMode(self: *const T, dw_mode_: u32, p_oem_d_m_param_: ?*OEMDMPARAM) HRESULT {
                return @as(*const IPrintOemCommon.VTable, @ptrCast(self.vtable)).DevMode(@as(*const IPrintOemCommon, @ptrCast(self)), dw_mode_, p_oem_d_m_param_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintOemUI_Value = Guid.initString("c6a7a9d0-774c-11d1-947f-00a0c90640b8");
pub const IID_IPrintOemUI = &IID_IPrintOemUI_Value;
pub const IPrintOemUI = extern struct {
    pub const VTable = extern struct {
        base: IPrintOemCommon.VTable,
        PublishDriverInterface: *const fn (
            self: *const IPrintOemUI,
            p_i_unknown: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommonUIProp: *const fn (
            self: *const IPrintOemUI,
            dw_mode: u32,
            p_oem_c_u_i_p_param: ?*OEMCUIPPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DocumentPropertySheets: *const fn (
            self: *const IPrintOemUI,
            p_p_s_u_i_info: ?*PROPSHEETUI_INFO,
            l_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DevicePropertySheets: *const fn (
            self: *const IPrintOemUI,
            p_p_s_u_i_info: ?*PROPSHEETUI_INFO,
            l_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DevQueryPrintEx: *const fn (
            self: *const IPrintOemUI,
            poemuiobj: ?*OEMUIOBJ,
            p_d_q_p_info: ?*DEVQUERYPRINT_INFO,
            p_public_d_m: ?*DEVMODEA,
            p_o_e_m_d_m: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeviceCapabilitiesA: *const fn (
            self: *const IPrintOemUI,
            poemuiobj: ?*OEMUIOBJ,
            h_printer: ?HANDLE,
            p_device_name: ?PWSTR,
            w_capability: u16,
            p_output: ?*anyopaque,
            p_public_d_m: ?*DEVMODEA,
            p_o_e_m_d_m: ?*anyopaque,
            dw_old: u32,
            dw_result: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpgradePrinter: *const fn (
            self: *const IPrintOemUI,
            dw_level: u32,
            p_driver_upgrade_info: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrinterEvent: *const fn (
            self: *const IPrintOemUI,
            p_printer_name: ?PWSTR,
            i_driver_event: i32,
            dw_flags: u32,
            l_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DriverEvent: *const fn (
            self: *const IPrintOemUI,
            dw_driver_event: u32,
            dw_level: u32,
            p_driver_info: ?*u8,
            l_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryColorProfile: *const fn (
            self: *const IPrintOemUI,
            h_printer: ?HANDLE,
            poemuiobj: ?*OEMUIOBJ,
            p_public_d_m: ?*DEVMODEA,
            p_o_e_m_d_m: ?*anyopaque,
            ul_query_mode: u32,
            pv_profile_data: [*]u8,
            pcb_profile_data: ?*u32,
            pfl_profile_data: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FontInstallerDlgProc: *const fn (
            self: *const IPrintOemUI,
            h_wnd: ?HWND,
            us_msg: u32,
            w_param: WPARAM,
            l_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateExternalFonts: *const fn (
            self: *const IPrintOemUI,
            h_printer: ?HANDLE,
            h_heap: ?HANDLE,
            pwstr_cartridges: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintOemCommon.MethodMixin(T);
            pub inline fn publishDriverInterface(self: *const T, p_i_unknown_: ?*IUnknown) HRESULT {
                return @as(*const IPrintOemUI.VTable, @ptrCast(self.vtable)).PublishDriverInterface(@as(*const IPrintOemUI, @ptrCast(self)), p_i_unknown_);
            }
            pub inline fn commonUIProp(self: *const T, dw_mode_: u32, p_oem_c_u_i_p_param_: ?*OEMCUIPPARAM) HRESULT {
                return @as(*const IPrintOemUI.VTable, @ptrCast(self.vtable)).CommonUIProp(@as(*const IPrintOemUI, @ptrCast(self)), dw_mode_, p_oem_c_u_i_p_param_);
            }
            pub inline fn documentPropertySheets(self: *const T, p_p_s_u_i_info_: ?*PROPSHEETUI_INFO, l_param_: LPARAM) HRESULT {
                return @as(*const IPrintOemUI.VTable, @ptrCast(self.vtable)).DocumentPropertySheets(@as(*const IPrintOemUI, @ptrCast(self)), p_p_s_u_i_info_, l_param_);
            }
            pub inline fn devicePropertySheets(self: *const T, p_p_s_u_i_info_: ?*PROPSHEETUI_INFO, l_param_: LPARAM) HRESULT {
                return @as(*const IPrintOemUI.VTable, @ptrCast(self.vtable)).DevicePropertySheets(@as(*const IPrintOemUI, @ptrCast(self)), p_p_s_u_i_info_, l_param_);
            }
            pub inline fn devQueryPrintEx(self: *const T, poemuiobj_: ?*OEMUIOBJ, p_d_q_p_info_: ?*DEVQUERYPRINT_INFO, p_public_d_m_: ?*DEVMODEA, p_o_e_m_d_m_: ?*anyopaque) HRESULT {
                return @as(*const IPrintOemUI.VTable, @ptrCast(self.vtable)).DevQueryPrintEx(@as(*const IPrintOemUI, @ptrCast(self)), poemuiobj_, p_d_q_p_info_, p_public_d_m_, p_o_e_m_d_m_);
            }
            pub inline fn deviceCapabilitiesA(self: *const T, poemuiobj_: ?*OEMUIOBJ, h_printer_: ?HANDLE, p_device_name_: ?PWSTR, w_capability_: u16, p_output_: ?*anyopaque, p_public_d_m_: ?*DEVMODEA, p_o_e_m_d_m_: ?*anyopaque, dw_old_: u32, dw_result_: ?*u32) HRESULT {
                return @as(*const IPrintOemUI.VTable, @ptrCast(self.vtable)).DeviceCapabilitiesA(@as(*const IPrintOemUI, @ptrCast(self)), poemuiobj_, h_printer_, p_device_name_, w_capability_, p_output_, p_public_d_m_, p_o_e_m_d_m_, dw_old_, dw_result_);
            }
            pub inline fn upgradePrinter(self: *const T, dw_level_: u32, p_driver_upgrade_info_: ?*u8) HRESULT {
                return @as(*const IPrintOemUI.VTable, @ptrCast(self.vtable)).UpgradePrinter(@as(*const IPrintOemUI, @ptrCast(self)), dw_level_, p_driver_upgrade_info_);
            }
            pub inline fn printerEvent(self: *const T, p_printer_name_: ?PWSTR, i_driver_event_: i32, dw_flags_: u32, l_param_: LPARAM) HRESULT {
                return @as(*const IPrintOemUI.VTable, @ptrCast(self.vtable)).PrinterEvent(@as(*const IPrintOemUI, @ptrCast(self)), p_printer_name_, i_driver_event_, dw_flags_, l_param_);
            }
            pub inline fn driverEvent(self: *const T, dw_driver_event_: u32, dw_level_: u32, p_driver_info_: ?*u8, l_param_: LPARAM) HRESULT {
                return @as(*const IPrintOemUI.VTable, @ptrCast(self.vtable)).DriverEvent(@as(*const IPrintOemUI, @ptrCast(self)), dw_driver_event_, dw_level_, p_driver_info_, l_param_);
            }
            pub inline fn queryColorProfile(self: *const T, h_printer_: ?HANDLE, poemuiobj_: ?*OEMUIOBJ, p_public_d_m_: ?*DEVMODEA, p_o_e_m_d_m_: ?*anyopaque, ul_query_mode_: u32, pv_profile_data_: [*]u8, pcb_profile_data_: ?*u32, pfl_profile_data_: ?*u32) HRESULT {
                return @as(*const IPrintOemUI.VTable, @ptrCast(self.vtable)).QueryColorProfile(@as(*const IPrintOemUI, @ptrCast(self)), h_printer_, poemuiobj_, p_public_d_m_, p_o_e_m_d_m_, ul_query_mode_, pv_profile_data_, pcb_profile_data_, pfl_profile_data_);
            }
            pub inline fn fontInstallerDlgProc(self: *const T, h_wnd_: ?HWND, us_msg_: u32, w_param_: WPARAM, l_param_: LPARAM) HRESULT {
                return @as(*const IPrintOemUI.VTable, @ptrCast(self.vtable)).FontInstallerDlgProc(@as(*const IPrintOemUI, @ptrCast(self)), h_wnd_, us_msg_, w_param_, l_param_);
            }
            pub inline fn updateExternalFonts(self: *const T, h_printer_: ?HANDLE, h_heap_: ?HANDLE, pwstr_cartridges_: ?PWSTR) HRESULT {
                return @as(*const IPrintOemUI.VTable, @ptrCast(self.vtable)).UpdateExternalFonts(@as(*const IPrintOemUI, @ptrCast(self)), h_printer_, h_heap_, pwstr_cartridges_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintOemUI2_Value = Guid.initString("292515f9-b54b-489b-9275-bab56821395e");
pub const IID_IPrintOemUI2 = &IID_IPrintOemUI2_Value;
pub const IPrintOemUI2 = extern struct {
    pub const VTable = extern struct {
        base: IPrintOemUI.VTable,
        QueryJobAttributes: *const fn (
            self: *const IPrintOemUI2,
            h_printer: ?HANDLE,
            p_devmode: ?*DEVMODEA,
            dw_level: u32,
            lp_attribute_info: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HideStandardUI: *const fn (
            self: *const IPrintOemUI2,
            dw_mode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DocumentEvent: *const fn (
            self: *const IPrintOemUI2,
            h_printer: ?HANDLE,
            hdc: ?HDC,
            i_esc: i32,
            cb_in: u32,
            pv_in: ?*anyopaque,
            cb_out: u32,
            pv_out: ?*anyopaque,
            pi_result: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintOemUI.MethodMixin(T);
            pub inline fn queryJobAttributes(self: *const T, h_printer_: ?HANDLE, p_devmode_: ?*DEVMODEA, dw_level_: u32, lp_attribute_info_: ?*u8) HRESULT {
                return @as(*const IPrintOemUI2.VTable, @ptrCast(self.vtable)).QueryJobAttributes(@as(*const IPrintOemUI2, @ptrCast(self)), h_printer_, p_devmode_, dw_level_, lp_attribute_info_);
            }
            pub inline fn hideStandardUI(self: *const T, dw_mode_: u32) HRESULT {
                return @as(*const IPrintOemUI2.VTable, @ptrCast(self.vtable)).HideStandardUI(@as(*const IPrintOemUI2, @ptrCast(self)), dw_mode_);
            }
            pub inline fn documentEvent(self: *const T, h_printer_: ?HANDLE, hdc_: ?HDC, i_esc_: i32, cb_in_: u32, pv_in_: ?*anyopaque, cb_out_: u32, pv_out_: ?*anyopaque, pi_result_: ?*i32) HRESULT {
                return @as(*const IPrintOemUI2.VTable, @ptrCast(self.vtable)).DocumentEvent(@as(*const IPrintOemUI2, @ptrCast(self)), h_printer_, hdc_, i_esc_, cb_in_, pv_in_, cb_out_, pv_out_, pi_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintOemUIMXDC_Value = Guid.initString("7349d725-e2c1-4dca-afb5-c13e91bc9306");
pub const IID_IPrintOemUIMXDC = &IID_IPrintOemUIMXDC_Value;
pub const IPrintOemUIMXDC = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AdjustImageableArea: *const fn (
            self: *const IPrintOemUIMXDC,
            h_printer: ?HANDLE,
            cb_dev_mode: u32,
            p_dev_mode: ?*const DEVMODEA,
            cb_o_e_m_d_m: u32,
            p_o_e_m_d_m: ?*const anyopaque,
            prcl_imageable_area: ?*RECTL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AdjustImageCompression: *const fn (
            self: *const IPrintOemUIMXDC,
            h_printer: ?HANDLE,
            cb_dev_mode: u32,
            p_dev_mode: ?*const DEVMODEA,
            cb_o_e_m_d_m: u32,
            p_o_e_m_d_m: ?*const anyopaque,
            p_compression_mode: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AdjustDPI: *const fn (
            self: *const IPrintOemUIMXDC,
            h_printer: ?HANDLE,
            cb_dev_mode: u32,
            p_dev_mode: ?*const DEVMODEA,
            cb_o_e_m_d_m: u32,
            p_o_e_m_d_m: ?*const anyopaque,
            p_d_p_i: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn adjustImageableArea(self: *const T, h_printer_: ?HANDLE, cb_dev_mode_: u32, p_dev_mode_: ?*const DEVMODEA, cb_o_e_m_d_m_: u32, p_o_e_m_d_m_: ?*const anyopaque, prcl_imageable_area_: ?*RECTL) HRESULT {
                return @as(*const IPrintOemUIMXDC.VTable, @ptrCast(self.vtable)).AdjustImageableArea(@as(*const IPrintOemUIMXDC, @ptrCast(self)), h_printer_, cb_dev_mode_, p_dev_mode_, cb_o_e_m_d_m_, p_o_e_m_d_m_, prcl_imageable_area_);
            }
            pub inline fn adjustImageCompression(self: *const T, h_printer_: ?HANDLE, cb_dev_mode_: u32, p_dev_mode_: ?*const DEVMODEA, cb_o_e_m_d_m_: u32, p_o_e_m_d_m_: ?*const anyopaque, p_compression_mode_: ?*i32) HRESULT {
                return @as(*const IPrintOemUIMXDC.VTable, @ptrCast(self.vtable)).AdjustImageCompression(@as(*const IPrintOemUIMXDC, @ptrCast(self)), h_printer_, cb_dev_mode_, p_dev_mode_, cb_o_e_m_d_m_, p_o_e_m_d_m_, p_compression_mode_);
            }
            pub inline fn adjustDPI(self: *const T, h_printer_: ?HANDLE, cb_dev_mode_: u32, p_dev_mode_: ?*const DEVMODEA, cb_o_e_m_d_m_: u32, p_o_e_m_d_m_: ?*const anyopaque, p_d_p_i_: ?*i32) HRESULT {
                return @as(*const IPrintOemUIMXDC.VTable, @ptrCast(self.vtable)).AdjustDPI(@as(*const IPrintOemUIMXDC, @ptrCast(self)), h_printer_, cb_dev_mode_, p_dev_mode_, cb_o_e_m_d_m_, p_o_e_m_d_m_, p_d_p_i_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintOemDriverUI_Value = Guid.initString("92b05d50-78bc-11d1-9480-00a0c90640b8");
pub const IID_IPrintOemDriverUI = &IID_IPrintOemDriverUI_Value;
pub const IPrintOemDriverUI = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DrvGetDriverSetting: *const fn (
            self: *const IPrintOemDriverUI,
            pci: ?*anyopaque,
            feature: ?[*:0]const u8,
            p_output: ?*anyopaque,
            cb_size: u32,
            pcb_needed: ?*u32,
            pdw_options_returned: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrvUpgradeRegistrySetting: *const fn (
            self: *const IPrintOemDriverUI,
            h_printer: ?HANDLE,
            p_feature: ?[*:0]const u8,
            p_option: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrvUpdateUISetting: *const fn (
            self: *const IPrintOemDriverUI,
            pci: ?*anyopaque,
            p_opt_item: ?*anyopaque,
            dw_previous_selection: u32,
            dw_mode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn drvGetDriverSetting(self: *const T, pci_: ?*anyopaque, feature_: ?[*:0]const u8, p_output_: ?*anyopaque, cb_size_: u32, pcb_needed_: ?*u32, pdw_options_returned_: ?*u32) HRESULT {
                return @as(*const IPrintOemDriverUI.VTable, @ptrCast(self.vtable)).DrvGetDriverSetting(@as(*const IPrintOemDriverUI, @ptrCast(self)), pci_, feature_, p_output_, cb_size_, pcb_needed_, pdw_options_returned_);
            }
            pub inline fn drvUpgradeRegistrySetting(self: *const T, h_printer_: ?HANDLE, p_feature_: ?[*:0]const u8, p_option_: ?[*:0]const u8) HRESULT {
                return @as(*const IPrintOemDriverUI.VTable, @ptrCast(self.vtable)).DrvUpgradeRegistrySetting(@as(*const IPrintOemDriverUI, @ptrCast(self)), h_printer_, p_feature_, p_option_);
            }
            pub inline fn drvUpdateUISetting(self: *const T, pci_: ?*anyopaque, p_opt_item_: ?*anyopaque, dw_previous_selection_: u32, dw_mode_: u32) HRESULT {
                return @as(*const IPrintOemDriverUI.VTable, @ptrCast(self.vtable)).DrvUpdateUISetting(@as(*const IPrintOemDriverUI, @ptrCast(self)), pci_, p_opt_item_, dw_previous_selection_, dw_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintCoreUI2_Value = Guid.initString("085ccfca-3adf-4c9e-b491-d851a6edc997");
pub const IID_IPrintCoreUI2 = &IID_IPrintCoreUI2_Value;
pub const IPrintCoreUI2 = extern struct {
    pub const VTable = extern struct {
        base: IPrintOemDriverUI.VTable,
        GetOptions: *const fn (
            self: *const IPrintCoreUI2,
            poemuiobj: ?*OEMUIOBJ,
            dw_flags: u32,
            // TODO: what to do with BytesParamIndex 3?
            pmsz_features_requested: ?*i8,
            cb_in: u32,
            // TODO: what to do with BytesParamIndex 5?
            pmsz_feature_option_buf: ?[*]u8,
            cb_size: u32,
            pcb_needed: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOptions: *const fn (
            self: *const IPrintCoreUI2,
            poemuiobj: ?*OEMUIOBJ,
            dw_flags: u32,
            // TODO: what to do with BytesParamIndex 3?
            pmsz_feature_option_buf: ?*i8,
            cb_in: u32,
            pdw_result: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumConstrainedOptions: *const fn (
            self: *const IPrintCoreUI2,
            poemuiobj: ?*OEMUIOBJ,
            dw_flags: u32,
            psz_feature_keyword: ?[*:0]const u8,
            // TODO: what to do with BytesParamIndex 4?
            pmsz_constrained_option_list: ?[*]u8,
            cb_size: u32,
            pcb_needed: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WhyConstrained: *const fn (
            self: *const IPrintCoreUI2,
            poemuiobj: ?*OEMUIOBJ,
            dw_flags: u32,
            psz_feature_keyword: ?[*:0]const u8,
            psz_option_keyword: ?[*:0]const u8,
            // TODO: what to do with BytesParamIndex 5?
            pmsz_reason_list: ?[*]u8,
            cb_size: u32,
            pcb_needed: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGlobalAttribute: *const fn (
            self: *const IPrintCoreUI2,
            poemuiobj: ?*OEMUIOBJ,
            dw_flags: u32,
            psz_attribute: ?[*:0]const u8,
            pdw_data_type: ?*u32,
            // TODO: what to do with BytesParamIndex 5?
            pb_data: ?*u8,
            cb_size: u32,
            pcb_needed: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFeatureAttribute: *const fn (
            self: *const IPrintCoreUI2,
            poemuiobj: ?*OEMUIOBJ,
            dw_flags: u32,
            psz_feature_keyword: ?[*:0]const u8,
            psz_attribute: ?[*:0]const u8,
            pdw_data_type: ?*u32,
            // TODO: what to do with BytesParamIndex 6?
            pb_data: ?*u8,
            cb_size: u32,
            pcb_needed: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptionAttribute: *const fn (
            self: *const IPrintCoreUI2,
            poemuiobj: ?*OEMUIOBJ,
            dw_flags: u32,
            psz_feature_keyword: ?[*:0]const u8,
            psz_option_keyword: ?[*:0]const u8,
            psz_attribute: ?[*:0]const u8,
            pdw_data_type: ?*u32,
            // TODO: what to do with BytesParamIndex 7?
            pb_data: ?*u8,
            cb_size: u32,
            pcb_needed: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumFeatures: *const fn (
            self: *const IPrintCoreUI2,
            poemuiobj: ?*OEMUIOBJ,
            dw_flags: u32,
            // TODO: what to do with BytesParamIndex 3?
            pmsz_feature_list: ?[*]u8,
            cb_size: u32,
            pcb_needed: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumOptions: *const fn (
            self: *const IPrintCoreUI2,
            poemuiobj: ?*OEMUIOBJ,
            dw_flags: u32,
            psz_feature_keyword: ?[*:0]const u8,
            // TODO: what to do with BytesParamIndex 4?
            pmsz_option_list: ?[*]u8,
            cb_size: u32,
            pcb_needed: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QuerySimulationSupport: *const fn (
            self: *const IPrintCoreUI2,
            h_printer: ?HANDLE,
            dw_level: u32,
            // TODO: what to do with BytesParamIndex 3?
            p_caps: ?*u8,
            cb_size: u32,
            pcb_needed: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintOemDriverUI.MethodMixin(T);
            pub inline fn getOptions(self: *const T, poemuiobj_: ?*OEMUIOBJ, dw_flags_: u32, pmsz_features_requested_: ?*i8, cb_in_: u32, pmsz_feature_option_buf_: ?[*]u8, cb_size_: u32, pcb_needed_: ?*u32) HRESULT {
                return @as(*const IPrintCoreUI2.VTable, @ptrCast(self.vtable)).GetOptions(@as(*const IPrintCoreUI2, @ptrCast(self)), poemuiobj_, dw_flags_, pmsz_features_requested_, cb_in_, pmsz_feature_option_buf_, cb_size_, pcb_needed_);
            }
            pub inline fn setOptions(self: *const T, poemuiobj_: ?*OEMUIOBJ, dw_flags_: u32, pmsz_feature_option_buf_: ?*i8, cb_in_: u32, pdw_result_: ?*u32) HRESULT {
                return @as(*const IPrintCoreUI2.VTable, @ptrCast(self.vtable)).SetOptions(@as(*const IPrintCoreUI2, @ptrCast(self)), poemuiobj_, dw_flags_, pmsz_feature_option_buf_, cb_in_, pdw_result_);
            }
            pub inline fn enumConstrainedOptions(self: *const T, poemuiobj_: ?*OEMUIOBJ, dw_flags_: u32, psz_feature_keyword_: ?[*:0]const u8, pmsz_constrained_option_list_: ?[*]u8, cb_size_: u32, pcb_needed_: ?*u32) HRESULT {
                return @as(*const IPrintCoreUI2.VTable, @ptrCast(self.vtable)).EnumConstrainedOptions(@as(*const IPrintCoreUI2, @ptrCast(self)), poemuiobj_, dw_flags_, psz_feature_keyword_, pmsz_constrained_option_list_, cb_size_, pcb_needed_);
            }
            pub inline fn whyConstrained(self: *const T, poemuiobj_: ?*OEMUIOBJ, dw_flags_: u32, psz_feature_keyword_: ?[*:0]const u8, psz_option_keyword_: ?[*:0]const u8, pmsz_reason_list_: ?[*]u8, cb_size_: u32, pcb_needed_: ?*u32) HRESULT {
                return @as(*const IPrintCoreUI2.VTable, @ptrCast(self.vtable)).WhyConstrained(@as(*const IPrintCoreUI2, @ptrCast(self)), poemuiobj_, dw_flags_, psz_feature_keyword_, psz_option_keyword_, pmsz_reason_list_, cb_size_, pcb_needed_);
            }
            pub inline fn getGlobalAttribute(self: *const T, poemuiobj_: ?*OEMUIOBJ, dw_flags_: u32, psz_attribute_: ?[*:0]const u8, pdw_data_type_: ?*u32, pb_data_: ?*u8, cb_size_: u32, pcb_needed_: ?*u32) HRESULT {
                return @as(*const IPrintCoreUI2.VTable, @ptrCast(self.vtable)).GetGlobalAttribute(@as(*const IPrintCoreUI2, @ptrCast(self)), poemuiobj_, dw_flags_, psz_attribute_, pdw_data_type_, pb_data_, cb_size_, pcb_needed_);
            }
            pub inline fn getFeatureAttribute(self: *const T, poemuiobj_: ?*OEMUIOBJ, dw_flags_: u32, psz_feature_keyword_: ?[*:0]const u8, psz_attribute_: ?[*:0]const u8, pdw_data_type_: ?*u32, pb_data_: ?*u8, cb_size_: u32, pcb_needed_: ?*u32) HRESULT {
                return @as(*const IPrintCoreUI2.VTable, @ptrCast(self.vtable)).GetFeatureAttribute(@as(*const IPrintCoreUI2, @ptrCast(self)), poemuiobj_, dw_flags_, psz_feature_keyword_, psz_attribute_, pdw_data_type_, pb_data_, cb_size_, pcb_needed_);
            }
            pub inline fn getOptionAttribute(self: *const T, poemuiobj_: ?*OEMUIOBJ, dw_flags_: u32, psz_feature_keyword_: ?[*:0]const u8, psz_option_keyword_: ?[*:0]const u8, psz_attribute_: ?[*:0]const u8, pdw_data_type_: ?*u32, pb_data_: ?*u8, cb_size_: u32, pcb_needed_: ?*u32) HRESULT {
                return @as(*const IPrintCoreUI2.VTable, @ptrCast(self.vtable)).GetOptionAttribute(@as(*const IPrintCoreUI2, @ptrCast(self)), poemuiobj_, dw_flags_, psz_feature_keyword_, psz_option_keyword_, psz_attribute_, pdw_data_type_, pb_data_, cb_size_, pcb_needed_);
            }
            pub inline fn enumFeatures(self: *const T, poemuiobj_: ?*OEMUIOBJ, dw_flags_: u32, pmsz_feature_list_: ?[*]u8, cb_size_: u32, pcb_needed_: ?*u32) HRESULT {
                return @as(*const IPrintCoreUI2.VTable, @ptrCast(self.vtable)).EnumFeatures(@as(*const IPrintCoreUI2, @ptrCast(self)), poemuiobj_, dw_flags_, pmsz_feature_list_, cb_size_, pcb_needed_);
            }
            pub inline fn enumOptions(self: *const T, poemuiobj_: ?*OEMUIOBJ, dw_flags_: u32, psz_feature_keyword_: ?[*:0]const u8, pmsz_option_list_: ?[*]u8, cb_size_: u32, pcb_needed_: ?*u32) HRESULT {
                return @as(*const IPrintCoreUI2.VTable, @ptrCast(self.vtable)).EnumOptions(@as(*const IPrintCoreUI2, @ptrCast(self)), poemuiobj_, dw_flags_, psz_feature_keyword_, pmsz_option_list_, cb_size_, pcb_needed_);
            }
            pub inline fn querySimulationSupport(self: *const T, h_printer_: ?HANDLE, dw_level_: u32, p_caps_: ?*u8, cb_size_: u32, pcb_needed_: ?*u32) HRESULT {
                return @as(*const IPrintCoreUI2.VTable, @ptrCast(self.vtable)).QuerySimulationSupport(@as(*const IPrintCoreUI2, @ptrCast(self)), h_printer_, dw_level_, p_caps_, cb_size_, pcb_needed_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SHIMOPTS = enum(i32) {
    DEFAULT = 0,
    NOSNAPSHOT = 1,
};
pub const PTSHIM_DEFAULT = SHIMOPTS.DEFAULT;
pub const PTSHIM_NOSNAPSHOT = SHIMOPTS.NOSNAPSHOT;

const IID_IPrintTicketProvider_Value = Guid.initString("bb5116db-0a23-4c3a-a6b6-89e5558dfb5d");
pub const IID_IPrintTicketProvider = &IID_IPrintTicketProvider_Value;
pub const IPrintTicketProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSupportedVersions: *const fn (
            self: *const IPrintTicketProvider,
            h_printer: ?HANDLE,
            pp_versions: ?*?*i32,
            c_versions: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindPrinter: *const fn (
            self: *const IPrintTicketProvider,
            h_printer: ?HANDLE,
            version: i32,
            p_options: ?*SHIMOPTS,
            p_dev_mode_flags: ?*u32,
            c_namespaces: ?*i32,
            pp_namespaces: ?*?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryDeviceNamespace: *const fn (
            self: *const IPrintTicketProvider,
            p_default_namespace: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertPrintTicketToDevMode: *const fn (
            self: *const IPrintTicketProvider,
            p_print_ticket: ?*IXMLDOMDocument2,
            cb_devmode_in: u32,
            p_devmode_in: ?*DEVMODEA,
            pcb_devmode_out: ?*u32,
            pp_devmode_out: ?*?*DEVMODEA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConvertDevModeToPrintTicket: *const fn (
            self: *const IPrintTicketProvider,
            cb_devmode: u32,
            p_devmode: ?*DEVMODEA,
            p_print_ticket: ?*IXMLDOMDocument2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrintCapabilities: *const fn (
            self: *const IPrintTicketProvider,
            p_print_ticket: ?*IXMLDOMDocument2,
            pp_capabilities: ?*?*IXMLDOMDocument2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ValidatePrintTicket: *const fn (
            self: *const IPrintTicketProvider,
            p_base_ticket: ?*IXMLDOMDocument2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSupportedVersions(self: *const T, h_printer_: ?HANDLE, pp_versions_: ?*?*i32, c_versions_: ?*i32) HRESULT {
                return @as(*const IPrintTicketProvider.VTable, @ptrCast(self.vtable)).GetSupportedVersions(@as(*const IPrintTicketProvider, @ptrCast(self)), h_printer_, pp_versions_, c_versions_);
            }
            pub inline fn bindPrinter(self: *const T, h_printer_: ?HANDLE, version_: i32, p_options_: ?*SHIMOPTS, p_dev_mode_flags_: ?*u32, c_namespaces_: ?*i32, pp_namespaces_: ?*?*?BSTR) HRESULT {
                return @as(*const IPrintTicketProvider.VTable, @ptrCast(self.vtable)).BindPrinter(@as(*const IPrintTicketProvider, @ptrCast(self)), h_printer_, version_, p_options_, p_dev_mode_flags_, c_namespaces_, pp_namespaces_);
            }
            pub inline fn queryDeviceNamespace(self: *const T, p_default_namespace_: ?*?BSTR) HRESULT {
                return @as(*const IPrintTicketProvider.VTable, @ptrCast(self.vtable)).QueryDeviceNamespace(@as(*const IPrintTicketProvider, @ptrCast(self)), p_default_namespace_);
            }
            pub inline fn convertPrintTicketToDevMode(self: *const T, p_print_ticket_: ?*IXMLDOMDocument2, cb_devmode_in_: u32, p_devmode_in_: ?*DEVMODEA, pcb_devmode_out_: ?*u32, pp_devmode_out_: ?*?*DEVMODEA) HRESULT {
                return @as(*const IPrintTicketProvider.VTable, @ptrCast(self.vtable)).ConvertPrintTicketToDevMode(@as(*const IPrintTicketProvider, @ptrCast(self)), p_print_ticket_, cb_devmode_in_, p_devmode_in_, pcb_devmode_out_, pp_devmode_out_);
            }
            pub inline fn convertDevModeToPrintTicket(self: *const T, cb_devmode_: u32, p_devmode_: ?*DEVMODEA, p_print_ticket_: ?*IXMLDOMDocument2) HRESULT {
                return @as(*const IPrintTicketProvider.VTable, @ptrCast(self.vtable)).ConvertDevModeToPrintTicket(@as(*const IPrintTicketProvider, @ptrCast(self)), cb_devmode_, p_devmode_, p_print_ticket_);
            }
            pub inline fn getPrintCapabilities(self: *const T, p_print_ticket_: ?*IXMLDOMDocument2, pp_capabilities_: ?*?*IXMLDOMDocument2) HRESULT {
                return @as(*const IPrintTicketProvider.VTable, @ptrCast(self.vtable)).GetPrintCapabilities(@as(*const IPrintTicketProvider, @ptrCast(self)), p_print_ticket_, pp_capabilities_);
            }
            pub inline fn validatePrintTicket(self: *const T, p_base_ticket_: ?*IXMLDOMDocument2) HRESULT {
                return @as(*const IPrintTicketProvider.VTable, @ptrCast(self.vtable)).ValidatePrintTicket(@as(*const IPrintTicketProvider, @ptrCast(self)), p_base_ticket_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintTicketProvider2_Value = Guid.initString("b8a70ab2-3dfc-4fec-a074-511b13c651cb");
pub const IID_IPrintTicketProvider2 = &IID_IPrintTicketProvider2_Value;
pub const IPrintTicketProvider2 = extern struct {
    pub const VTable = extern struct {
        base: IPrintTicketProvider.VTable,
        GetPrintDeviceCapabilities: *const fn (
            self: *const IPrintTicketProvider2,
            p_print_ticket: ?*IXMLDOMDocument2,
            pp_device_capabilities: ?*?*IXMLDOMDocument2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrintDeviceResources: *const fn (
            self: *const IPrintTicketProvider2,
            psz_locale_name: ?[*:0]const u16,
            p_print_ticket: ?*IXMLDOMDocument2,
            pp_device_resources: ?*?*IXMLDOMDocument2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintTicketProvider.MethodMixin(T);
            pub inline fn getPrintDeviceCapabilities(self: *const T, p_print_ticket_: ?*IXMLDOMDocument2, pp_device_capabilities_: ?*?*IXMLDOMDocument2) HRESULT {
                return @as(*const IPrintTicketProvider2.VTable, @ptrCast(self.vtable)).GetPrintDeviceCapabilities(@as(*const IPrintTicketProvider2, @ptrCast(self)), p_print_ticket_, pp_device_capabilities_);
            }
            pub inline fn getPrintDeviceResources(self: *const T, psz_locale_name_: ?[*:0]const u16, p_print_ticket_: ?*IXMLDOMDocument2, pp_device_resources_: ?*?*IXMLDOMDocument2) HRESULT {
                return @as(*const IPrintTicketProvider2.VTable, @ptrCast(self.vtable)).GetPrintDeviceResources(@as(*const IPrintTicketProvider2, @ptrCast(self)), psz_locale_name_, p_print_ticket_, pp_device_resources_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_PrinterQueue_Value = Guid.initString("eb54c230-798c-4c9e-b461-29fad04039b1");
pub const CLSID_PrinterQueue = &CLSID_PrinterQueue_Value;

const CLSID_PrinterQueueView_Value = Guid.initString("eb54c231-798c-4c9e-b461-29fad04039b1");
pub const CLSID_PrinterQueueView = &CLSID_PrinterQueueView_Value;

const CLSID_PrintSchemaAsyncOperation_Value = Guid.initString("43b2f83d-10f2-48ab-831b-55fdbdbd34a4");
pub const CLSID_PrintSchemaAsyncOperation = &CLSID_PrintSchemaAsyncOperation_Value;

const CLSID_PrinterExtensionManager_Value = Guid.initString("331b60da-9e90-4dd0-9c84-eac4e659b61f");
pub const CLSID_PrinterExtensionManager = &CLSID_PrinterExtensionManager_Value;

const IID_IPrintSchemaElement_Value = Guid.initString("724c1646-e64b-4bbf-8eb4-d45e4fd580da");
pub const IID_IPrintSchemaElement = &IID_IPrintSchemaElement_Value;
pub const IPrintSchemaElement = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_XmlNode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaElement,
            pp_xml_node: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaElement,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NamespaceUri: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaElement,
            pbstr_namespace_uri: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getXmlNode(self: *const T, pp_xml_node_: ?*?*IUnknown) HRESULT {
                return @as(*const IPrintSchemaElement.VTable, @ptrCast(self.vtable)).get_XmlNode(@as(*const IPrintSchemaElement, @ptrCast(self)), pp_xml_node_);
            }
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IPrintSchemaElement.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IPrintSchemaElement, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn getNamespaceUri(self: *const T, pbstr_namespace_uri_: ?*?BSTR) HRESULT {
                return @as(*const IPrintSchemaElement.VTable, @ptrCast(self.vtable)).get_NamespaceUri(@as(*const IPrintSchemaElement, @ptrCast(self)), pbstr_namespace_uri_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintSchemaDisplayableElement_Value = Guid.initString("af45af49-d6aa-407d-bf87-3912236e9d94");
pub const IID_IPrintSchemaDisplayableElement = &IID_IPrintSchemaDisplayableElement_Value;
pub const IPrintSchemaDisplayableElement = extern struct {
    pub const VTable = extern struct {
        base: IPrintSchemaElement.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaDisplayableElement,
            pbstr_display_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintSchemaElement.MethodMixin(T);
            pub inline fn getDisplayName(self: *const T, pbstr_display_name_: ?*?BSTR) HRESULT {
                return @as(*const IPrintSchemaDisplayableElement.VTable, @ptrCast(self.vtable)).get_DisplayName(@as(*const IPrintSchemaDisplayableElement, @ptrCast(self)), pbstr_display_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PrintSchemaConstrainedSetting = enum(i32) {
    None = 0,
    PrintTicket = 1,
    Admin = 2,
    Device = 3,
};
pub const PrintSchemaConstrainedSetting_None = PrintSchemaConstrainedSetting.None;
pub const PrintSchemaConstrainedSetting_PrintTicket = PrintSchemaConstrainedSetting.PrintTicket;
pub const PrintSchemaConstrainedSetting_Admin = PrintSchemaConstrainedSetting.Admin;
pub const PrintSchemaConstrainedSetting_Device = PrintSchemaConstrainedSetting.Device;

const IID_IPrintSchemaOption_Value = Guid.initString("66bb2f51-5844-4997-8d70-4b7cc221cf92");
pub const IID_IPrintSchemaOption = &IID_IPrintSchemaOption_Value;
pub const IPrintSchemaOption = extern struct {
    pub const VTable = extern struct {
        base: IPrintSchemaDisplayableElement.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Selected: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaOption,
            pb_is_selected: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Constrained: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaOption,
            p_setting: ?*PrintSchemaConstrainedSetting,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyValue: *const fn (
            self: *const IPrintSchemaOption,
            bstr_name: ?BSTR,
            bstr_namespace_uri: ?BSTR,
            pp_xml_value_node: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintSchemaDisplayableElement.MethodMixin(T);
            pub inline fn getSelected(self: *const T, pb_is_selected_: ?*BOOL) HRESULT {
                return @as(*const IPrintSchemaOption.VTable, @ptrCast(self.vtable)).get_Selected(@as(*const IPrintSchemaOption, @ptrCast(self)), pb_is_selected_);
            }
            pub inline fn getConstrained(self: *const T, p_setting_: ?*PrintSchemaConstrainedSetting) HRESULT {
                return @as(*const IPrintSchemaOption.VTable, @ptrCast(self.vtable)).get_Constrained(@as(*const IPrintSchemaOption, @ptrCast(self)), p_setting_);
            }
            pub inline fn getPropertyValue(self: *const T, bstr_name_: ?BSTR, bstr_namespace_uri_: ?BSTR, pp_xml_value_node_: ?*?*IUnknown) HRESULT {
                return @as(*const IPrintSchemaOption.VTable, @ptrCast(self.vtable)).GetPropertyValue(@as(*const IPrintSchemaOption, @ptrCast(self)), bstr_name_, bstr_namespace_uri_, pp_xml_value_node_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintSchemaPageMediaSizeOption_Value = Guid.initString("68746729-f493-4830-a10f-69028774605d");
pub const IID_IPrintSchemaPageMediaSizeOption = &IID_IPrintSchemaPageMediaSizeOption_Value;
pub const IPrintSchemaPageMediaSizeOption = extern struct {
    pub const VTable = extern struct {
        base: IPrintSchemaOption.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WidthInMicrons: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaPageMediaSizeOption,
            pul_width: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HeightInMicrons: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaPageMediaSizeOption,
            pul_height: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintSchemaOption.MethodMixin(T);
            pub inline fn getWidthInMicrons(self: *const T, pul_width_: ?*u32) HRESULT {
                return @as(*const IPrintSchemaPageMediaSizeOption.VTable, @ptrCast(self.vtable)).get_WidthInMicrons(@as(*const IPrintSchemaPageMediaSizeOption, @ptrCast(self)), pul_width_);
            }
            pub inline fn getHeightInMicrons(self: *const T, pul_height_: ?*u32) HRESULT {
                return @as(*const IPrintSchemaPageMediaSizeOption.VTable, @ptrCast(self.vtable)).get_HeightInMicrons(@as(*const IPrintSchemaPageMediaSizeOption, @ptrCast(self)), pul_height_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintSchemaNUpOption_Value = Guid.initString("1f6342f2-d848-42e3-8995-c10a9ef9a3ba");
pub const IID_IPrintSchemaNUpOption = &IID_IPrintSchemaNUpOption_Value;
pub const IPrintSchemaNUpOption = extern struct {
    pub const VTable = extern struct {
        base: IPrintSchemaOption.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PagesPerSheet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaNUpOption,
            pul_pages_per_sheet: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintSchemaOption.MethodMixin(T);
            pub inline fn getPagesPerSheet(self: *const T, pul_pages_per_sheet_: ?*u32) HRESULT {
                return @as(*const IPrintSchemaNUpOption.VTable, @ptrCast(self.vtable)).get_PagesPerSheet(@as(*const IPrintSchemaNUpOption, @ptrCast(self)), pul_pages_per_sheet_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PrintSchemaSelectionType = enum(i32) {
    One = 0,
    Many = 1,
};
pub const PrintSchemaSelectionType_PickOne = PrintSchemaSelectionType.One;
pub const PrintSchemaSelectionType_PickMany = PrintSchemaSelectionType.Many;

const IID_IPrintSchemaOptionCollection_Value = Guid.initString("baecb0bd-a946-4771-bc30-e8b24f8d45c1");
pub const IID_IPrintSchemaOptionCollection = &IID_IPrintSchemaOptionCollection_Value;
pub const IPrintSchemaOptionCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaOptionCollection,
            pul_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IPrintSchemaOptionCollection,
            ul_index: u32,
            pp_option: ?*?*IPrintSchemaOption,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaOptionCollection,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, pul_count_: ?*u32) HRESULT {
                return @as(*const IPrintSchemaOptionCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IPrintSchemaOptionCollection, @ptrCast(self)), pul_count_);
            }
            pub inline fn getAt(self: *const T, ul_index_: u32, pp_option_: ?*?*IPrintSchemaOption) HRESULT {
                return @as(*const IPrintSchemaOptionCollection.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IPrintSchemaOptionCollection, @ptrCast(self)), ul_index_, pp_option_);
            }
            pub inline fn getNewEnum(self: *const T, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IPrintSchemaOptionCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IPrintSchemaOptionCollection, @ptrCast(self)), pp_unk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintSchemaFeature_Value = Guid.initString("ef189461-5d62-4626-8e57-ff83583c4826");
pub const IID_IPrintSchemaFeature = &IID_IPrintSchemaFeature_Value;
pub const IPrintSchemaFeature = extern struct {
    pub const VTable = extern struct {
        base: IPrintSchemaDisplayableElement.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelectedOption: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaFeature,
            pp_option: ?*?*IPrintSchemaOption,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SelectedOption: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaFeature,
            p_option: ?*IPrintSchemaOption,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelectionType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaFeature,
            p_selection_type: ?*PrintSchemaSelectionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOption: *const fn (
            self: *const IPrintSchemaFeature,
            bstr_name: ?BSTR,
            bstr_namespace_uri: ?BSTR,
            pp_option: ?*?*IPrintSchemaOption,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayUI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaFeature,
            pb_show: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintSchemaDisplayableElement.MethodMixin(T);
            pub inline fn getSelectedOption(self: *const T, pp_option_: ?*?*IPrintSchemaOption) HRESULT {
                return @as(*const IPrintSchemaFeature.VTable, @ptrCast(self.vtable)).get_SelectedOption(@as(*const IPrintSchemaFeature, @ptrCast(self)), pp_option_);
            }
            pub inline fn putSelectedOption(self: *const T, p_option_: ?*IPrintSchemaOption) HRESULT {
                return @as(*const IPrintSchemaFeature.VTable, @ptrCast(self.vtable)).put_SelectedOption(@as(*const IPrintSchemaFeature, @ptrCast(self)), p_option_);
            }
            pub inline fn getSelectionType(self: *const T, p_selection_type_: ?*PrintSchemaSelectionType) HRESULT {
                return @as(*const IPrintSchemaFeature.VTable, @ptrCast(self.vtable)).get_SelectionType(@as(*const IPrintSchemaFeature, @ptrCast(self)), p_selection_type_);
            }
            pub inline fn getOption(self: *const T, bstr_name_: ?BSTR, bstr_namespace_uri_: ?BSTR, pp_option_: ?*?*IPrintSchemaOption) HRESULT {
                return @as(*const IPrintSchemaFeature.VTable, @ptrCast(self.vtable)).GetOption(@as(*const IPrintSchemaFeature, @ptrCast(self)), bstr_name_, bstr_namespace_uri_, pp_option_);
            }
            pub inline fn getDisplayUI(self: *const T, pb_show_: ?*BOOL) HRESULT {
                return @as(*const IPrintSchemaFeature.VTable, @ptrCast(self.vtable)).get_DisplayUI(@as(*const IPrintSchemaFeature, @ptrCast(self)), pb_show_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintSchemaPageImageableSize_Value = Guid.initString("7c85bf5e-dc7c-4f61-839b-4107e1c9b68e");
pub const IID_IPrintSchemaPageImageableSize = &IID_IPrintSchemaPageImageableSize_Value;
pub const IPrintSchemaPageImageableSize = extern struct {
    pub const VTable = extern struct {
        base: IPrintSchemaElement.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ImageableSizeWidthInMicrons: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaPageImageableSize,
            pul_imageable_size_width: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ImageableSizeHeightInMicrons: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaPageImageableSize,
            pul_imageable_size_height: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OriginWidthInMicrons: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaPageImageableSize,
            pul_origin_width: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OriginHeightInMicrons: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaPageImageableSize,
            pul_origin_height: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExtentWidthInMicrons: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaPageImageableSize,
            pul_extent_width: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExtentHeightInMicrons: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaPageImageableSize,
            pul_extent_height: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintSchemaElement.MethodMixin(T);
            pub inline fn getImageableSizeWidthInMicrons(self: *const T, pul_imageable_size_width_: ?*u32) HRESULT {
                return @as(*const IPrintSchemaPageImageableSize.VTable, @ptrCast(self.vtable)).get_ImageableSizeWidthInMicrons(@as(*const IPrintSchemaPageImageableSize, @ptrCast(self)), pul_imageable_size_width_);
            }
            pub inline fn getImageableSizeHeightInMicrons(self: *const T, pul_imageable_size_height_: ?*u32) HRESULT {
                return @as(*const IPrintSchemaPageImageableSize.VTable, @ptrCast(self.vtable)).get_ImageableSizeHeightInMicrons(@as(*const IPrintSchemaPageImageableSize, @ptrCast(self)), pul_imageable_size_height_);
            }
            pub inline fn getOriginWidthInMicrons(self: *const T, pul_origin_width_: ?*u32) HRESULT {
                return @as(*const IPrintSchemaPageImageableSize.VTable, @ptrCast(self.vtable)).get_OriginWidthInMicrons(@as(*const IPrintSchemaPageImageableSize, @ptrCast(self)), pul_origin_width_);
            }
            pub inline fn getOriginHeightInMicrons(self: *const T, pul_origin_height_: ?*u32) HRESULT {
                return @as(*const IPrintSchemaPageImageableSize.VTable, @ptrCast(self.vtable)).get_OriginHeightInMicrons(@as(*const IPrintSchemaPageImageableSize, @ptrCast(self)), pul_origin_height_);
            }
            pub inline fn getExtentWidthInMicrons(self: *const T, pul_extent_width_: ?*u32) HRESULT {
                return @as(*const IPrintSchemaPageImageableSize.VTable, @ptrCast(self.vtable)).get_ExtentWidthInMicrons(@as(*const IPrintSchemaPageImageableSize, @ptrCast(self)), pul_extent_width_);
            }
            pub inline fn getExtentHeightInMicrons(self: *const T, pul_extent_height_: ?*u32) HRESULT {
                return @as(*const IPrintSchemaPageImageableSize.VTable, @ptrCast(self.vtable)).get_ExtentHeightInMicrons(@as(*const IPrintSchemaPageImageableSize, @ptrCast(self)), pul_extent_height_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PrintSchemaParameterDataType = enum(i32) {
    Integer = 0,
    NumericString = 1,
    String = 2,
};
pub const PrintSchemaParameterDataType_Integer = PrintSchemaParameterDataType.Integer;
pub const PrintSchemaParameterDataType_NumericString = PrintSchemaParameterDataType.NumericString;
pub const PrintSchemaParameterDataType_String = PrintSchemaParameterDataType.String;

const IID_IPrintSchemaParameterDefinition_Value = Guid.initString("b5ade81e-0e61-4fe1-81c6-c333e4ffe0f1");
pub const IID_IPrintSchemaParameterDefinition = &IID_IPrintSchemaParameterDefinition_Value;
pub const IPrintSchemaParameterDefinition = extern struct {
    pub const VTable = extern struct {
        base: IPrintSchemaDisplayableElement.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserInputRequired: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaParameterDefinition,
            pb_is_required: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UnitType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaParameterDefinition,
            pbstr_unit_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaParameterDefinition,
            p_data_type: ?*PrintSchemaParameterDataType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RangeMin: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaParameterDefinition,
            p_range_min: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RangeMax: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaParameterDefinition,
            p_range_max: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintSchemaDisplayableElement.MethodMixin(T);
            pub inline fn getUserInputRequired(self: *const T, pb_is_required_: ?*BOOL) HRESULT {
                return @as(*const IPrintSchemaParameterDefinition.VTable, @ptrCast(self.vtable)).get_UserInputRequired(@as(*const IPrintSchemaParameterDefinition, @ptrCast(self)), pb_is_required_);
            }
            pub inline fn getUnitType(self: *const T, pbstr_unit_type_: ?*?BSTR) HRESULT {
                return @as(*const IPrintSchemaParameterDefinition.VTable, @ptrCast(self.vtable)).get_UnitType(@as(*const IPrintSchemaParameterDefinition, @ptrCast(self)), pbstr_unit_type_);
            }
            pub inline fn getDataType(self: *const T, p_data_type_: ?*PrintSchemaParameterDataType) HRESULT {
                return @as(*const IPrintSchemaParameterDefinition.VTable, @ptrCast(self.vtable)).get_DataType(@as(*const IPrintSchemaParameterDefinition, @ptrCast(self)), p_data_type_);
            }
            pub inline fn getRangeMin(self: *const T, p_range_min_: ?*i32) HRESULT {
                return @as(*const IPrintSchemaParameterDefinition.VTable, @ptrCast(self.vtable)).get_RangeMin(@as(*const IPrintSchemaParameterDefinition, @ptrCast(self)), p_range_min_);
            }
            pub inline fn getRangeMax(self: *const T, p_range_max_: ?*i32) HRESULT {
                return @as(*const IPrintSchemaParameterDefinition.VTable, @ptrCast(self.vtable)).get_RangeMax(@as(*const IPrintSchemaParameterDefinition, @ptrCast(self)), p_range_max_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintSchemaParameterInitializer_Value = Guid.initString("52027082-0b74-4648-9564-828cc6cb656c");
pub const IID_IPrintSchemaParameterInitializer = &IID_IPrintSchemaParameterInitializer_Value;
pub const IPrintSchemaParameterInitializer = extern struct {
    pub const VTable = extern struct {
        base: IPrintSchemaElement.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaParameterInitializer,
            p_var: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaParameterInitializer,
            p_var: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintSchemaElement.MethodMixin(T);
            pub inline fn getValue(self: *const T, p_var_: ?*VARIANT) HRESULT {
                return @as(*const IPrintSchemaParameterInitializer.VTable, @ptrCast(self.vtable)).get_Value(@as(*const IPrintSchemaParameterInitializer, @ptrCast(self)), p_var_);
            }
            pub inline fn putValue(self: *const T, p_var_: ?*VARIANT) HRESULT {
                return @as(*const IPrintSchemaParameterInitializer.VTable, @ptrCast(self.vtable)).put_Value(@as(*const IPrintSchemaParameterInitializer, @ptrCast(self)), p_var_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintSchemaCapabilities_Value = Guid.initString("5a577640-501d-4927-bcd0-5ef57a7ed175");
pub const IID_IPrintSchemaCapabilities = &IID_IPrintSchemaCapabilities_Value;
pub const IPrintSchemaCapabilities = extern struct {
    pub const VTable = extern struct {
        base: IPrintSchemaElement.VTable,
        GetFeatureByKeyName: *const fn (
            self: *const IPrintSchemaCapabilities,
            bstr_key_name: ?BSTR,
            pp_feature: ?*?*IPrintSchemaFeature,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFeature: *const fn (
            self: *const IPrintSchemaCapabilities,
            bstr_name: ?BSTR,
            bstr_namespace_uri: ?BSTR,
            pp_feature: ?*?*IPrintSchemaFeature,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PageImageableSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaCapabilities,
            pp_page_imageable_size: ?*?*IPrintSchemaPageImageableSize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_JobCopiesAllDocumentsMinValue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaCapabilities,
            pul_job_copies_all_documents_min_value: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_JobCopiesAllDocumentsMaxValue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaCapabilities,
            pul_job_copies_all_documents_max_value: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectedOptionInPrintTicket: *const fn (
            self: *const IPrintSchemaCapabilities,
            p_feature: ?*IPrintSchemaFeature,
            pp_option: ?*?*IPrintSchemaOption,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: *const fn (
            self: *const IPrintSchemaCapabilities,
            p_feature: ?*IPrintSchemaFeature,
            pp_option_collection: ?*?*IPrintSchemaOptionCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintSchemaElement.MethodMixin(T);
            pub inline fn getFeatureByKeyName(self: *const T, bstr_key_name_: ?BSTR, pp_feature_: ?*?*IPrintSchemaFeature) HRESULT {
                return @as(*const IPrintSchemaCapabilities.VTable, @ptrCast(self.vtable)).GetFeatureByKeyName(@as(*const IPrintSchemaCapabilities, @ptrCast(self)), bstr_key_name_, pp_feature_);
            }
            pub inline fn getFeature(self: *const T, bstr_name_: ?BSTR, bstr_namespace_uri_: ?BSTR, pp_feature_: ?*?*IPrintSchemaFeature) HRESULT {
                return @as(*const IPrintSchemaCapabilities.VTable, @ptrCast(self.vtable)).GetFeature(@as(*const IPrintSchemaCapabilities, @ptrCast(self)), bstr_name_, bstr_namespace_uri_, pp_feature_);
            }
            pub inline fn getPageImageableSize(self: *const T, pp_page_imageable_size_: ?*?*IPrintSchemaPageImageableSize) HRESULT {
                return @as(*const IPrintSchemaCapabilities.VTable, @ptrCast(self.vtable)).get_PageImageableSize(@as(*const IPrintSchemaCapabilities, @ptrCast(self)), pp_page_imageable_size_);
            }
            pub inline fn getJobCopiesAllDocumentsMinValue(self: *const T, pul_job_copies_all_documents_min_value_: ?*u32) HRESULT {
                return @as(*const IPrintSchemaCapabilities.VTable, @ptrCast(self.vtable)).get_JobCopiesAllDocumentsMinValue(@as(*const IPrintSchemaCapabilities, @ptrCast(self)), pul_job_copies_all_documents_min_value_);
            }
            pub inline fn getJobCopiesAllDocumentsMaxValue(self: *const T, pul_job_copies_all_documents_max_value_: ?*u32) HRESULT {
                return @as(*const IPrintSchemaCapabilities.VTable, @ptrCast(self.vtable)).get_JobCopiesAllDocumentsMaxValue(@as(*const IPrintSchemaCapabilities, @ptrCast(self)), pul_job_copies_all_documents_max_value_);
            }
            pub inline fn getSelectedOptionInPrintTicket(self: *const T, p_feature_: ?*IPrintSchemaFeature, pp_option_: ?*?*IPrintSchemaOption) HRESULT {
                return @as(*const IPrintSchemaCapabilities.VTable, @ptrCast(self.vtable)).GetSelectedOptionInPrintTicket(@as(*const IPrintSchemaCapabilities, @ptrCast(self)), p_feature_, pp_option_);
            }
            pub inline fn getOptions(self: *const T, p_feature_: ?*IPrintSchemaFeature, pp_option_collection_: ?*?*IPrintSchemaOptionCollection) HRESULT {
                return @as(*const IPrintSchemaCapabilities.VTable, @ptrCast(self.vtable)).GetOptions(@as(*const IPrintSchemaCapabilities, @ptrCast(self)), p_feature_, pp_option_collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintSchemaCapabilities2_Value = Guid.initString("b58845f4-9970-4d87-a636-169fb82ed642");
pub const IID_IPrintSchemaCapabilities2 = &IID_IPrintSchemaCapabilities2_Value;
pub const IPrintSchemaCapabilities2 = extern struct {
    pub const VTable = extern struct {
        base: IPrintSchemaCapabilities.VTable,
        GetParameterDefinition: *const fn (
            self: *const IPrintSchemaCapabilities2,
            bstr_name: ?BSTR,
            bstr_namespace_uri: ?BSTR,
            pp_parameter_definition: ?*?*IPrintSchemaParameterDefinition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintSchemaCapabilities.MethodMixin(T);
            pub inline fn getParameterDefinition(self: *const T, bstr_name_: ?BSTR, bstr_namespace_uri_: ?BSTR, pp_parameter_definition_: ?*?*IPrintSchemaParameterDefinition) HRESULT {
                return @as(*const IPrintSchemaCapabilities2.VTable, @ptrCast(self.vtable)).GetParameterDefinition(@as(*const IPrintSchemaCapabilities2, @ptrCast(self)), bstr_name_, bstr_namespace_uri_, pp_parameter_definition_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintSchemaAsyncOperation_Value = Guid.initString("143c8dcb-d37f-47f7-88e8-6b1d21f2c5f7");
pub const IID_IPrintSchemaAsyncOperation = &IID_IPrintSchemaAsyncOperation_Value;
pub const IPrintSchemaAsyncOperation = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Start: *const fn (
            self: *const IPrintSchemaAsyncOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn (
            self: *const IPrintSchemaAsyncOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn start(self: *const T) HRESULT {
                return @as(*const IPrintSchemaAsyncOperation.VTable, @ptrCast(self.vtable)).Start(@as(*const IPrintSchemaAsyncOperation, @ptrCast(self)));
            }
            pub inline fn cancel(self: *const T) HRESULT {
                return @as(*const IPrintSchemaAsyncOperation.VTable, @ptrCast(self.vtable)).Cancel(@as(*const IPrintSchemaAsyncOperation, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintSchemaTicket_Value = Guid.initString("e480b861-4708-4e6d-a5b4-a2b4eeb9baa4");
pub const IID_IPrintSchemaTicket = &IID_IPrintSchemaTicket_Value;
pub const IPrintSchemaTicket = extern struct {
    pub const VTable = extern struct {
        base: IPrintSchemaElement.VTable,
        GetFeatureByKeyName: *const fn (
            self: *const IPrintSchemaTicket,
            bstr_key_name: ?BSTR,
            pp_feature: ?*?*IPrintSchemaFeature,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFeature: *const fn (
            self: *const IPrintSchemaTicket,
            bstr_name: ?BSTR,
            bstr_namespace_uri: ?BSTR,
            pp_feature: ?*?*IPrintSchemaFeature,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ValidateAsync: *const fn (
            self: *const IPrintSchemaTicket,
            pp_async_operation: ?*?*IPrintSchemaAsyncOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitAsync: *const fn (
            self: *const IPrintSchemaTicket,
            p_print_ticket_commit: ?*IPrintSchemaTicket,
            pp_async_operation: ?*?*IPrintSchemaAsyncOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyXmlChanged: *const fn (
            self: *const IPrintSchemaTicket,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCapabilities: *const fn (
            self: *const IPrintSchemaTicket,
            pp_capabilities: ?*?*IPrintSchemaCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_JobCopiesAllDocuments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaTicket,
            pul_job_copies_all_documents: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_JobCopiesAllDocuments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintSchemaTicket,
            ul_job_copies_all_documents: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintSchemaElement.MethodMixin(T);
            pub inline fn getFeatureByKeyName(self: *const T, bstr_key_name_: ?BSTR, pp_feature_: ?*?*IPrintSchemaFeature) HRESULT {
                return @as(*const IPrintSchemaTicket.VTable, @ptrCast(self.vtable)).GetFeatureByKeyName(@as(*const IPrintSchemaTicket, @ptrCast(self)), bstr_key_name_, pp_feature_);
            }
            pub inline fn getFeature(self: *const T, bstr_name_: ?BSTR, bstr_namespace_uri_: ?BSTR, pp_feature_: ?*?*IPrintSchemaFeature) HRESULT {
                return @as(*const IPrintSchemaTicket.VTable, @ptrCast(self.vtable)).GetFeature(@as(*const IPrintSchemaTicket, @ptrCast(self)), bstr_name_, bstr_namespace_uri_, pp_feature_);
            }
            pub inline fn validateAsync(self: *const T, pp_async_operation_: ?*?*IPrintSchemaAsyncOperation) HRESULT {
                return @as(*const IPrintSchemaTicket.VTable, @ptrCast(self.vtable)).ValidateAsync(@as(*const IPrintSchemaTicket, @ptrCast(self)), pp_async_operation_);
            }
            pub inline fn commitAsync(self: *const T, p_print_ticket_commit_: ?*IPrintSchemaTicket, pp_async_operation_: ?*?*IPrintSchemaAsyncOperation) HRESULT {
                return @as(*const IPrintSchemaTicket.VTable, @ptrCast(self.vtable)).CommitAsync(@as(*const IPrintSchemaTicket, @ptrCast(self)), p_print_ticket_commit_, pp_async_operation_);
            }
            pub inline fn notifyXmlChanged(self: *const T) HRESULT {
                return @as(*const IPrintSchemaTicket.VTable, @ptrCast(self.vtable)).NotifyXmlChanged(@as(*const IPrintSchemaTicket, @ptrCast(self)));
            }
            pub inline fn getCapabilities(self: *const T, pp_capabilities_: ?*?*IPrintSchemaCapabilities) HRESULT {
                return @as(*const IPrintSchemaTicket.VTable, @ptrCast(self.vtable)).GetCapabilities(@as(*const IPrintSchemaTicket, @ptrCast(self)), pp_capabilities_);
            }
            pub inline fn getJobCopiesAllDocuments(self: *const T, pul_job_copies_all_documents_: ?*u32) HRESULT {
                return @as(*const IPrintSchemaTicket.VTable, @ptrCast(self.vtable)).get_JobCopiesAllDocuments(@as(*const IPrintSchemaTicket, @ptrCast(self)), pul_job_copies_all_documents_);
            }
            pub inline fn putJobCopiesAllDocuments(self: *const T, ul_job_copies_all_documents_: u32) HRESULT {
                return @as(*const IPrintSchemaTicket.VTable, @ptrCast(self.vtable)).put_JobCopiesAllDocuments(@as(*const IPrintSchemaTicket, @ptrCast(self)), ul_job_copies_all_documents_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintSchemaTicket2_Value = Guid.initString("2ec1f844-766a-47a1-91f4-2eeb6190f80c");
pub const IID_IPrintSchemaTicket2 = &IID_IPrintSchemaTicket2_Value;
pub const IPrintSchemaTicket2 = extern struct {
    pub const VTable = extern struct {
        base: IPrintSchemaTicket.VTable,
        GetParameterInitializer: *const fn (
            self: *const IPrintSchemaTicket2,
            bstr_name: ?BSTR,
            bstr_namespace_uri: ?BSTR,
            pp_parameter_initializer: ?*?*IPrintSchemaParameterInitializer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintSchemaTicket.MethodMixin(T);
            pub inline fn getParameterInitializer(self: *const T, bstr_name_: ?BSTR, bstr_namespace_uri_: ?BSTR, pp_parameter_initializer_: ?*?*IPrintSchemaParameterInitializer) HRESULT {
                return @as(*const IPrintSchemaTicket2.VTable, @ptrCast(self.vtable)).GetParameterInitializer(@as(*const IPrintSchemaTicket2, @ptrCast(self)), bstr_name_, bstr_namespace_uri_, pp_parameter_initializer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintSchemaAsyncOperationEvent_Value = Guid.initString("23adbb16-0133-4906-b29a-1dce1d026379");
pub const IID_IPrintSchemaAsyncOperationEvent = &IID_IPrintSchemaAsyncOperationEvent_Value;
pub const IPrintSchemaAsyncOperationEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Completed: *const fn (
            self: *const IPrintSchemaAsyncOperationEvent,
            p_ticket: ?*IPrintSchemaTicket,
            hr_operation: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn completed(self: *const T, p_ticket_: ?*IPrintSchemaTicket, hr_operation_: HRESULT) HRESULT {
                return @as(*const IPrintSchemaAsyncOperationEvent.VTable, @ptrCast(self.vtable)).Completed(@as(*const IPrintSchemaAsyncOperationEvent, @ptrCast(self)), p_ticket_, hr_operation_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrinterScriptableSequentialStream_Value = Guid.initString("2072838a-316f-467a-a949-27f68c44a854");
pub const IID_IPrinterScriptableSequentialStream = &IID_IPrinterScriptableSequentialStream_Value;
pub const IPrinterScriptableSequentialStream = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Read: *const fn (
            self: *const IPrinterScriptableSequentialStream,
            cb_read: i32,
            pp_array: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Write: *const fn (
            self: *const IPrinterScriptableSequentialStream,
            p_array: ?*IDispatch,
            pcb_written: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn read(self: *const T, cb_read_: i32, pp_array_: ?*?*IDispatch) HRESULT {
                return @as(*const IPrinterScriptableSequentialStream.VTable, @ptrCast(self.vtable)).Read(@as(*const IPrinterScriptableSequentialStream, @ptrCast(self)), cb_read_, pp_array_);
            }
            pub inline fn write(self: *const T, p_array_: ?*IDispatch, pcb_written_: ?*i32) HRESULT {
                return @as(*const IPrinterScriptableSequentialStream.VTable, @ptrCast(self.vtable)).Write(@as(*const IPrinterScriptableSequentialStream, @ptrCast(self)), p_array_, pcb_written_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrinterScriptableStream_Value = Guid.initString("7edf9a92-4750-41a5-a17f-879a6f4f7dcb");
pub const IID_IPrinterScriptableStream = &IID_IPrinterScriptableStream_Value;
pub const IPrinterScriptableStream = extern struct {
    pub const VTable = extern struct {
        base: IPrinterScriptableSequentialStream.VTable,
        Commit: *const fn (
            self: *const IPrinterScriptableStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Seek: *const fn (
            self: *const IPrinterScriptableStream,
            l_offset: i32,
            stream_seek: STREAM_SEEK,
            pl_position: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSize: *const fn (
            self: *const IPrinterScriptableStream,
            l_size: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrinterScriptableSequentialStream.MethodMixin(T);
            pub inline fn commit(self: *const T) HRESULT {
                return @as(*const IPrinterScriptableStream.VTable, @ptrCast(self.vtable)).Commit(@as(*const IPrinterScriptableStream, @ptrCast(self)));
            }
            pub inline fn seek(self: *const T, l_offset_: i32, stream_seek_: STREAM_SEEK, pl_position_: ?*i32) HRESULT {
                return @as(*const IPrinterScriptableStream.VTable, @ptrCast(self.vtable)).Seek(@as(*const IPrinterScriptableStream, @ptrCast(self)), l_offset_, stream_seek_, pl_position_);
            }
            pub inline fn setSize(self: *const T, l_size_: i32) HRESULT {
                return @as(*const IPrinterScriptableStream.VTable, @ptrCast(self.vtable)).SetSize(@as(*const IPrinterScriptableStream, @ptrCast(self)), l_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrinterPropertyBag_Value = Guid.initString("fea77364-df95-4a23-a905-019b79a8e481");
pub const IID_IPrinterPropertyBag = &IID_IPrinterPropertyBag_Value;
pub const IPrinterPropertyBag = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetBool: *const fn (
            self: *const IPrinterPropertyBag,
            bstr_name: ?BSTR,
            pb_value: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBool: *const fn (
            self: *const IPrinterPropertyBag,
            bstr_name: ?BSTR,
            b_value: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInt32: *const fn (
            self: *const IPrinterPropertyBag,
            bstr_name: ?BSTR,
            pn_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInt32: *const fn (
            self: *const IPrinterPropertyBag,
            bstr_name: ?BSTR,
            n_value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetString: *const fn (
            self: *const IPrinterPropertyBag,
            bstr_name: ?BSTR,
            pbstr_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetString: *const fn (
            self: *const IPrinterPropertyBag,
            bstr_name: ?BSTR,
            bstr_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBytes: *const fn (
            self: *const IPrinterPropertyBag,
            bstr_name: ?BSTR,
            pcb_value: ?*u32,
            pp_value: [*]?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBytes: *const fn (
            self: *const IPrinterPropertyBag,
            bstr_name: ?BSTR,
            cb_value: u32,
            p_value: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReadStream: *const fn (
            self: *const IPrinterPropertyBag,
            bstr_name: ?BSTR,
            pp_value: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWriteStream: *const fn (
            self: *const IPrinterPropertyBag,
            bstr_name: ?BSTR,
            pp_value: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getBool(self: *const T, bstr_name_: ?BSTR, pb_value_: ?*BOOL) HRESULT {
                return @as(*const IPrinterPropertyBag.VTable, @ptrCast(self.vtable)).GetBool(@as(*const IPrinterPropertyBag, @ptrCast(self)), bstr_name_, pb_value_);
            }
            pub inline fn setBool(self: *const T, bstr_name_: ?BSTR, b_value_: BOOL) HRESULT {
                return @as(*const IPrinterPropertyBag.VTable, @ptrCast(self.vtable)).SetBool(@as(*const IPrinterPropertyBag, @ptrCast(self)), bstr_name_, b_value_);
            }
            pub inline fn getInt32(self: *const T, bstr_name_: ?BSTR, pn_value_: ?*i32) HRESULT {
                return @as(*const IPrinterPropertyBag.VTable, @ptrCast(self.vtable)).GetInt32(@as(*const IPrinterPropertyBag, @ptrCast(self)), bstr_name_, pn_value_);
            }
            pub inline fn setInt32(self: *const T, bstr_name_: ?BSTR, n_value_: i32) HRESULT {
                return @as(*const IPrinterPropertyBag.VTable, @ptrCast(self.vtable)).SetInt32(@as(*const IPrinterPropertyBag, @ptrCast(self)), bstr_name_, n_value_);
            }
            pub inline fn getString(self: *const T, bstr_name_: ?BSTR, pbstr_value_: ?*?BSTR) HRESULT {
                return @as(*const IPrinterPropertyBag.VTable, @ptrCast(self.vtable)).GetString(@as(*const IPrinterPropertyBag, @ptrCast(self)), bstr_name_, pbstr_value_);
            }
            pub inline fn setString(self: *const T, bstr_name_: ?BSTR, bstr_value_: ?BSTR) HRESULT {
                return @as(*const IPrinterPropertyBag.VTable, @ptrCast(self.vtable)).SetString(@as(*const IPrinterPropertyBag, @ptrCast(self)), bstr_name_, bstr_value_);
            }
            pub inline fn getBytes(self: *const T, bstr_name_: ?BSTR, pcb_value_: ?*u32, pp_value_: [*]?*u8) HRESULT {
                return @as(*const IPrinterPropertyBag.VTable, @ptrCast(self.vtable)).GetBytes(@as(*const IPrinterPropertyBag, @ptrCast(self)), bstr_name_, pcb_value_, pp_value_);
            }
            pub inline fn setBytes(self: *const T, bstr_name_: ?BSTR, cb_value_: u32, p_value_: [*:0]u8) HRESULT {
                return @as(*const IPrinterPropertyBag.VTable, @ptrCast(self.vtable)).SetBytes(@as(*const IPrinterPropertyBag, @ptrCast(self)), bstr_name_, cb_value_, p_value_);
            }
            pub inline fn getReadStream(self: *const T, bstr_name_: ?BSTR, pp_value_: ?*?*IStream) HRESULT {
                return @as(*const IPrinterPropertyBag.VTable, @ptrCast(self.vtable)).GetReadStream(@as(*const IPrinterPropertyBag, @ptrCast(self)), bstr_name_, pp_value_);
            }
            pub inline fn getWriteStream(self: *const T, bstr_name_: ?BSTR, pp_value_: ?*?*IStream) HRESULT {
                return @as(*const IPrinterPropertyBag.VTable, @ptrCast(self.vtable)).GetWriteStream(@as(*const IPrinterPropertyBag, @ptrCast(self)), bstr_name_, pp_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrinterScriptablePropertyBag_Value = Guid.initString("91c7765f-ed57-49ad-8b01-dc24816a5294");
pub const IID_IPrinterScriptablePropertyBag = &IID_IPrinterScriptablePropertyBag_Value;
pub const IPrinterScriptablePropertyBag = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetBool: *const fn (
            self: *const IPrinterScriptablePropertyBag,
            bstr_name: ?BSTR,
            pb_value: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBool: *const fn (
            self: *const IPrinterScriptablePropertyBag,
            bstr_name: ?BSTR,
            b_value: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInt32: *const fn (
            self: *const IPrinterScriptablePropertyBag,
            bstr_name: ?BSTR,
            pn_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInt32: *const fn (
            self: *const IPrinterScriptablePropertyBag,
            bstr_name: ?BSTR,
            n_value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetString: *const fn (
            self: *const IPrinterScriptablePropertyBag,
            bstr_name: ?BSTR,
            pbstr_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetString: *const fn (
            self: *const IPrinterScriptablePropertyBag,
            bstr_name: ?BSTR,
            bstr_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBytes: *const fn (
            self: *const IPrinterScriptablePropertyBag,
            bstr_name: ?BSTR,
            pp_array: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBytes: *const fn (
            self: *const IPrinterScriptablePropertyBag,
            bstr_name: ?BSTR,
            p_array: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReadStream: *const fn (
            self: *const IPrinterScriptablePropertyBag,
            bstr_name: ?BSTR,
            pp_stream: ?*?*IPrinterScriptableStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWriteStream: *const fn (
            self: *const IPrinterScriptablePropertyBag,
            bstr_name: ?BSTR,
            pp_stream: ?*?*IPrinterScriptableStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getBool(self: *const T, bstr_name_: ?BSTR, pb_value_: ?*BOOL) HRESULT {
                return @as(*const IPrinterScriptablePropertyBag.VTable, @ptrCast(self.vtable)).GetBool(@as(*const IPrinterScriptablePropertyBag, @ptrCast(self)), bstr_name_, pb_value_);
            }
            pub inline fn setBool(self: *const T, bstr_name_: ?BSTR, b_value_: BOOL) HRESULT {
                return @as(*const IPrinterScriptablePropertyBag.VTable, @ptrCast(self.vtable)).SetBool(@as(*const IPrinterScriptablePropertyBag, @ptrCast(self)), bstr_name_, b_value_);
            }
            pub inline fn getInt32(self: *const T, bstr_name_: ?BSTR, pn_value_: ?*i32) HRESULT {
                return @as(*const IPrinterScriptablePropertyBag.VTable, @ptrCast(self.vtable)).GetInt32(@as(*const IPrinterScriptablePropertyBag, @ptrCast(self)), bstr_name_, pn_value_);
            }
            pub inline fn setInt32(self: *const T, bstr_name_: ?BSTR, n_value_: i32) HRESULT {
                return @as(*const IPrinterScriptablePropertyBag.VTable, @ptrCast(self.vtable)).SetInt32(@as(*const IPrinterScriptablePropertyBag, @ptrCast(self)), bstr_name_, n_value_);
            }
            pub inline fn getString(self: *const T, bstr_name_: ?BSTR, pbstr_value_: ?*?BSTR) HRESULT {
                return @as(*const IPrinterScriptablePropertyBag.VTable, @ptrCast(self.vtable)).GetString(@as(*const IPrinterScriptablePropertyBag, @ptrCast(self)), bstr_name_, pbstr_value_);
            }
            pub inline fn setString(self: *const T, bstr_name_: ?BSTR, bstr_value_: ?BSTR) HRESULT {
                return @as(*const IPrinterScriptablePropertyBag.VTable, @ptrCast(self.vtable)).SetString(@as(*const IPrinterScriptablePropertyBag, @ptrCast(self)), bstr_name_, bstr_value_);
            }
            pub inline fn getBytes(self: *const T, bstr_name_: ?BSTR, pp_array_: ?*?*IDispatch) HRESULT {
                return @as(*const IPrinterScriptablePropertyBag.VTable, @ptrCast(self.vtable)).GetBytes(@as(*const IPrinterScriptablePropertyBag, @ptrCast(self)), bstr_name_, pp_array_);
            }
            pub inline fn setBytes(self: *const T, bstr_name_: ?BSTR, p_array_: ?*IDispatch) HRESULT {
                return @as(*const IPrinterScriptablePropertyBag.VTable, @ptrCast(self.vtable)).SetBytes(@as(*const IPrinterScriptablePropertyBag, @ptrCast(self)), bstr_name_, p_array_);
            }
            pub inline fn getReadStream(self: *const T, bstr_name_: ?BSTR, pp_stream_: ?*?*IPrinterScriptableStream) HRESULT {
                return @as(*const IPrinterScriptablePropertyBag.VTable, @ptrCast(self.vtable)).GetReadStream(@as(*const IPrinterScriptablePropertyBag, @ptrCast(self)), bstr_name_, pp_stream_);
            }
            pub inline fn getWriteStream(self: *const T, bstr_name_: ?BSTR, pp_stream_: ?*?*IPrinterScriptableStream) HRESULT {
                return @as(*const IPrinterScriptablePropertyBag.VTable, @ptrCast(self.vtable)).GetWriteStream(@as(*const IPrinterScriptablePropertyBag, @ptrCast(self)), bstr_name_, pp_stream_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrinterScriptablePropertyBag2_Value = Guid.initString("2a1c53c4-8638-4b3e-b518-2773c94556a3");
pub const IID_IPrinterScriptablePropertyBag2 = &IID_IPrinterScriptablePropertyBag2_Value;
pub const IPrinterScriptablePropertyBag2 = extern struct {
    pub const VTable = extern struct {
        base: IPrinterScriptablePropertyBag.VTable,
        GetReadStreamAsXML: *const fn (
            self: *const IPrinterScriptablePropertyBag2,
            bstr_name: ?BSTR,
            pp_xml_node: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrinterScriptablePropertyBag.MethodMixin(T);
            pub inline fn getReadStreamAsXML(self: *const T, bstr_name_: ?BSTR, pp_xml_node_: ?*?*IUnknown) HRESULT {
                return @as(*const IPrinterScriptablePropertyBag2.VTable, @ptrCast(self.vtable)).GetReadStreamAsXML(@as(*const IPrinterScriptablePropertyBag2, @ptrCast(self)), bstr_name_, pp_xml_node_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrinterQueue_Value = Guid.initString("3580a828-07fe-4b94-ac1a-757d9d2d3056");
pub const IID_IPrinterQueue = &IID_IPrinterQueue_Value;
pub const IPrinterQueue = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Handle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrinterQueue,
            ph_printer: ?*?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrinterQueue,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendBidiQuery: *const fn (
            self: *const IPrinterQueue,
            bstr_bidi_query: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperties: *const fn (
            self: *const IPrinterQueue,
            pp_property_bag: ?*?*IPrinterPropertyBag,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getHandle(self: *const T, ph_printer_: ?*?HANDLE) HRESULT {
                return @as(*const IPrinterQueue.VTable, @ptrCast(self.vtable)).get_Handle(@as(*const IPrinterQueue, @ptrCast(self)), ph_printer_);
            }
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IPrinterQueue.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IPrinterQueue, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn sendBidiQuery(self: *const T, bstr_bidi_query_: ?BSTR) HRESULT {
                return @as(*const IPrinterQueue.VTable, @ptrCast(self.vtable)).SendBidiQuery(@as(*const IPrinterQueue, @ptrCast(self)), bstr_bidi_query_);
            }
            pub inline fn getProperties(self: *const T, pp_property_bag_: ?*?*IPrinterPropertyBag) HRESULT {
                return @as(*const IPrinterQueue.VTable, @ptrCast(self.vtable)).GetProperties(@as(*const IPrinterQueue, @ptrCast(self)), pp_property_bag_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PrintJobStatus = enum(i32) {
    Paused = 1,
    Error = 2,
    Deleting = 4,
    Spooling = 8,
    Printing = 16,
    Offline = 32,
    PaperOut = 64,
    Printed = 128,
    Deleted = 256,
    BlockedDeviceQueue = 512,
    UserIntervention = 1024,
    Restarted = 2048,
    Complete = 4096,
    Retained = 8192,
};
pub const PrintJobStatus_Paused = PrintJobStatus.Paused;
pub const PrintJobStatus_Error = PrintJobStatus.Error;
pub const PrintJobStatus_Deleting = PrintJobStatus.Deleting;
pub const PrintJobStatus_Spooling = PrintJobStatus.Spooling;
pub const PrintJobStatus_Printing = PrintJobStatus.Printing;
pub const PrintJobStatus_Offline = PrintJobStatus.Offline;
pub const PrintJobStatus_PaperOut = PrintJobStatus.PaperOut;
pub const PrintJobStatus_Printed = PrintJobStatus.Printed;
pub const PrintJobStatus_Deleted = PrintJobStatus.Deleted;
pub const PrintJobStatus_BlockedDeviceQueue = PrintJobStatus.BlockedDeviceQueue;
pub const PrintJobStatus_UserIntervention = PrintJobStatus.UserIntervention;
pub const PrintJobStatus_Restarted = PrintJobStatus.Restarted;
pub const PrintJobStatus_Complete = PrintJobStatus.Complete;
pub const PrintJobStatus_Retained = PrintJobStatus.Retained;

const IID_IPrintJob_Value = Guid.initString("b771dab8-1282-41b7-858c-f206e4d20577");
pub const IID_IPrintJob = &IID_IPrintJob_Value;
pub const IPrintJob = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintJob,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintJob,
            pul_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrintedPages: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintJob,
            pul_pages: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TotalPages: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintJob,
            pul_pages: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintJob,
            p_status: ?*PrintJobStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubmissionTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintJob,
            p_submission_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestCancel: *const fn (
            self: *const IPrintJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IPrintJob.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IPrintJob, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn getId(self: *const T, pul_i_d_: ?*u32) HRESULT {
                return @as(*const IPrintJob.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IPrintJob, @ptrCast(self)), pul_i_d_);
            }
            pub inline fn getPrintedPages(self: *const T, pul_pages_: ?*u32) HRESULT {
                return @as(*const IPrintJob.VTable, @ptrCast(self.vtable)).get_PrintedPages(@as(*const IPrintJob, @ptrCast(self)), pul_pages_);
            }
            pub inline fn getTotalPages(self: *const T, pul_pages_: ?*u32) HRESULT {
                return @as(*const IPrintJob.VTable, @ptrCast(self.vtable)).get_TotalPages(@as(*const IPrintJob, @ptrCast(self)), pul_pages_);
            }
            pub inline fn getStatus(self: *const T, p_status_: ?*PrintJobStatus) HRESULT {
                return @as(*const IPrintJob.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IPrintJob, @ptrCast(self)), p_status_);
            }
            pub inline fn getSubmissionTime(self: *const T, p_submission_time_: ?*f64) HRESULT {
                return @as(*const IPrintJob.VTable, @ptrCast(self.vtable)).get_SubmissionTime(@as(*const IPrintJob, @ptrCast(self)), p_submission_time_);
            }
            pub inline fn requestCancel(self: *const T) HRESULT {
                return @as(*const IPrintJob.VTable, @ptrCast(self.vtable)).RequestCancel(@as(*const IPrintJob, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintJobCollection_Value = Guid.initString("72b82a24-a598-4e87-895f-cdb23a49e9dc");
pub const IID_IPrintJobCollection = &IID_IPrintJobCollection_Value;
pub const IPrintJobCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintJobCollection,
            pul_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IPrintJobCollection,
            ul_index: u32,
            pp_job: ?*?*IPrintJob,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrintJobCollection,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, pul_count_: ?*u32) HRESULT {
                return @as(*const IPrintJobCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IPrintJobCollection, @ptrCast(self)), pul_count_);
            }
            pub inline fn getAt(self: *const T, ul_index_: u32, pp_job_: ?*?*IPrintJob) HRESULT {
                return @as(*const IPrintJobCollection.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IPrintJobCollection, @ptrCast(self)), ul_index_, pp_job_);
            }
            pub inline fn getNewEnum(self: *const T, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IPrintJobCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IPrintJobCollection, @ptrCast(self)), pp_unk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrinterQueueViewEvent_Value = Guid.initString("c5b6042b-fd21-404a-a0ef-e2fbb52b9080");
pub const IID_IPrinterQueueViewEvent = &IID_IPrinterQueueViewEvent_Value;
pub const IPrinterQueueViewEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        OnChanged: *const fn (
            self: *const IPrinterQueueViewEvent,
            p_collection: ?*IPrintJobCollection,
            ul_view_offset: u32,
            ul_view_size: u32,
            ul_count_jobs_in_print_queue: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn onChanged(self: *const T, p_collection_: ?*IPrintJobCollection, ul_view_offset_: u32, ul_view_size_: u32, ul_count_jobs_in_print_queue_: u32) HRESULT {
                return @as(*const IPrinterQueueViewEvent.VTable, @ptrCast(self.vtable)).OnChanged(@as(*const IPrinterQueueViewEvent, @ptrCast(self)), p_collection_, ul_view_offset_, ul_view_size_, ul_count_jobs_in_print_queue_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrinterQueueView_Value = Guid.initString("476e2969-3b2b-4b3f-8277-cff6056042aa");
pub const IID_IPrinterQueueView = &IID_IPrinterQueueView_Value;
pub const IPrinterQueueView = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        SetViewRange: *const fn (
            self: *const IPrinterQueueView,
            ul_view_offset: u32,
            ul_view_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn setViewRange(self: *const T, ul_view_offset_: u32, ul_view_size_: u32) HRESULT {
                return @as(*const IPrinterQueueView.VTable, @ptrCast(self.vtable)).SetViewRange(@as(*const IPrinterQueueView, @ptrCast(self)), ul_view_offset_, ul_view_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrinterQueueEvent_Value = Guid.initString("214685f6-7b78-4681-87e0-495f739273d1");
pub const IID_IPrinterQueueEvent = &IID_IPrinterQueueEvent_Value;
pub const IPrinterQueueEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        OnBidiResponseReceived: *const fn (
            self: *const IPrinterQueueEvent,
            bstr_response: ?BSTR,
            hr_status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn onBidiResponseReceived(self: *const T, bstr_response_: ?BSTR, hr_status_: HRESULT) HRESULT {
                return @as(*const IPrinterQueueEvent.VTable, @ptrCast(self.vtable)).OnBidiResponseReceived(@as(*const IPrinterQueueEvent, @ptrCast(self)), bstr_response_, hr_status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrinterBidiSetRequestCallback_Value = Guid.initString("c52d32dd-f2b4-4052-8502-ec4305ecb71f");
pub const IID_IPrinterBidiSetRequestCallback = &IID_IPrinterBidiSetRequestCallback_Value;
pub const IPrinterBidiSetRequestCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Completed: *const fn (
            self: *const IPrinterBidiSetRequestCallback,
            bstr_response: ?BSTR,
            hr_status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn completed(self: *const T, bstr_response_: ?BSTR, hr_status_: HRESULT) HRESULT {
                return @as(*const IPrinterBidiSetRequestCallback.VTable, @ptrCast(self.vtable)).Completed(@as(*const IPrinterBidiSetRequestCallback, @ptrCast(self)), bstr_response_, hr_status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrinterExtensionAsyncOperation_Value = Guid.initString("108d6a23-6a4b-4552-9448-68b427186acd");
pub const IID_IPrinterExtensionAsyncOperation = &IID_IPrinterExtensionAsyncOperation_Value;
pub const IPrinterExtensionAsyncOperation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Cancel: *const fn (
            self: *const IPrinterExtensionAsyncOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn cancel(self: *const T) HRESULT {
                return @as(*const IPrinterExtensionAsyncOperation.VTable, @ptrCast(self.vtable)).Cancel(@as(*const IPrinterExtensionAsyncOperation, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrinterQueue2_Value = Guid.initString("8cd444e8-c9bb-49b3-8e38-e03209416131");
pub const IID_IPrinterQueue2 = &IID_IPrinterQueue2_Value;
pub const IPrinterQueue2 = extern struct {
    pub const VTable = extern struct {
        base: IPrinterQueue.VTable,
        SendBidiSetRequestAsync: *const fn (
            self: *const IPrinterQueue2,
            bstr_bidi_request: ?BSTR,
            p_callback: ?*IPrinterBidiSetRequestCallback,
            pp_async_operation: ?*?*IPrinterExtensionAsyncOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrinterQueueView: *const fn (
            self: *const IPrinterQueue2,
            ul_view_offset: u32,
            ul_view_size: u32,
            pp_job_view: ?*?*IPrinterQueueView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrinterQueue.MethodMixin(T);
            pub inline fn sendBidiSetRequestAsync(self: *const T, bstr_bidi_request_: ?BSTR, p_callback_: ?*IPrinterBidiSetRequestCallback, pp_async_operation_: ?*?*IPrinterExtensionAsyncOperation) HRESULT {
                return @as(*const IPrinterQueue2.VTable, @ptrCast(self.vtable)).SendBidiSetRequestAsync(@as(*const IPrinterQueue2, @ptrCast(self)), bstr_bidi_request_, p_callback_, pp_async_operation_);
            }
            pub inline fn getPrinterQueueView(self: *const T, ul_view_offset_: u32, ul_view_size_: u32, pp_job_view_: ?*?*IPrinterQueueView) HRESULT {
                return @as(*const IPrinterQueue2.VTable, @ptrCast(self.vtable)).GetPrinterQueueView(@as(*const IPrinterQueue2, @ptrCast(self)), ul_view_offset_, ul_view_size_, pp_job_view_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrinterExtensionContext_Value = Guid.initString("39843bf2-c4d2-41fd-b4b2-aedbee5e1900");
pub const IID_IPrinterExtensionContext = &IID_IPrinterExtensionContext_Value;
pub const IPrinterExtensionContext = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrinterQueue: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrinterExtensionContext,
            pp_queue: ?*?*IPrinterQueue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrintSchemaTicket: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrinterExtensionContext,
            pp_ticket: ?*?*IPrintSchemaTicket,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DriverProperties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrinterExtensionContext,
            pp_property_bag: ?*?*IPrinterPropertyBag,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserProperties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrinterExtensionContext,
            pp_property_bag: ?*?*IPrinterPropertyBag,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getPrinterQueue(self: *const T, pp_queue_: ?*?*IPrinterQueue) HRESULT {
                return @as(*const IPrinterExtensionContext.VTable, @ptrCast(self.vtable)).get_PrinterQueue(@as(*const IPrinterExtensionContext, @ptrCast(self)), pp_queue_);
            }
            pub inline fn getPrintSchemaTicket(self: *const T, pp_ticket_: ?*?*IPrintSchemaTicket) HRESULT {
                return @as(*const IPrinterExtensionContext.VTable, @ptrCast(self.vtable)).get_PrintSchemaTicket(@as(*const IPrinterExtensionContext, @ptrCast(self)), pp_ticket_);
            }
            pub inline fn getDriverProperties(self: *const T, pp_property_bag_: ?*?*IPrinterPropertyBag) HRESULT {
                return @as(*const IPrinterExtensionContext.VTable, @ptrCast(self.vtable)).get_DriverProperties(@as(*const IPrinterExtensionContext, @ptrCast(self)), pp_property_bag_);
            }
            pub inline fn getUserProperties(self: *const T, pp_property_bag_: ?*?*IPrinterPropertyBag) HRESULT {
                return @as(*const IPrinterExtensionContext.VTable, @ptrCast(self.vtable)).get_UserProperties(@as(*const IPrinterExtensionContext, @ptrCast(self)), pp_property_bag_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrinterExtensionRequest_Value = Guid.initString("39843bf3-c4d2-41fd-b4b2-aedbee5e1900");
pub const IID_IPrinterExtensionRequest = &IID_IPrinterExtensionRequest_Value;
pub const IPrinterExtensionRequest = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Cancel: *const fn (
            self: *const IPrinterExtensionRequest,
            hr_status: HRESULT,
            bstr_log_message: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Complete: *const fn (
            self: *const IPrinterExtensionRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn cancel(self: *const T, hr_status_: HRESULT, bstr_log_message_: ?BSTR) HRESULT {
                return @as(*const IPrinterExtensionRequest.VTable, @ptrCast(self.vtable)).Cancel(@as(*const IPrinterExtensionRequest, @ptrCast(self)), hr_status_, bstr_log_message_);
            }
            pub inline fn complete(self: *const T) HRESULT {
                return @as(*const IPrinterExtensionRequest.VTable, @ptrCast(self.vtable)).Complete(@as(*const IPrinterExtensionRequest, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrinterExtensionEventArgs_Value = Guid.initString("39843bf4-c4d2-41fd-b4b2-aedbee5e1900");
pub const IID_IPrinterExtensionEventArgs = &IID_IPrinterExtensionEventArgs_Value;
pub const IPrinterExtensionEventArgs = extern struct {
    pub const VTable = extern struct {
        base: IPrinterExtensionContext.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BidiNotification: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrinterExtensionEventArgs,
            pbstr_bidi_notification: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReasonId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrinterExtensionEventArgs,
            p_reason_id: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Request: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrinterExtensionEventArgs,
            pp_request: ?*?*IPrinterExtensionRequest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SourceApplication: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrinterExtensionEventArgs,
            pbstr_application: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DetailedReasonId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrinterExtensionEventArgs,
            p_detailed_reason_id: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WindowModal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrinterExtensionEventArgs,
            pb_modal: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WindowParent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrinterExtensionEventArgs,
            phwnd_parent: ?*?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrinterExtensionContext.MethodMixin(T);
            pub inline fn getBidiNotification(self: *const T, pbstr_bidi_notification_: ?*?BSTR) HRESULT {
                return @as(*const IPrinterExtensionEventArgs.VTable, @ptrCast(self.vtable)).get_BidiNotification(@as(*const IPrinterExtensionEventArgs, @ptrCast(self)), pbstr_bidi_notification_);
            }
            pub inline fn getReasonId(self: *const T, p_reason_id_: ?*Guid) HRESULT {
                return @as(*const IPrinterExtensionEventArgs.VTable, @ptrCast(self.vtable)).get_ReasonId(@as(*const IPrinterExtensionEventArgs, @ptrCast(self)), p_reason_id_);
            }
            pub inline fn getRequest(self: *const T, pp_request_: ?*?*IPrinterExtensionRequest) HRESULT {
                return @as(*const IPrinterExtensionEventArgs.VTable, @ptrCast(self.vtable)).get_Request(@as(*const IPrinterExtensionEventArgs, @ptrCast(self)), pp_request_);
            }
            pub inline fn getSourceApplication(self: *const T, pbstr_application_: ?*?BSTR) HRESULT {
                return @as(*const IPrinterExtensionEventArgs.VTable, @ptrCast(self.vtable)).get_SourceApplication(@as(*const IPrinterExtensionEventArgs, @ptrCast(self)), pbstr_application_);
            }
            pub inline fn getDetailedReasonId(self: *const T, p_detailed_reason_id_: ?*Guid) HRESULT {
                return @as(*const IPrinterExtensionEventArgs.VTable, @ptrCast(self.vtable)).get_DetailedReasonId(@as(*const IPrinterExtensionEventArgs, @ptrCast(self)), p_detailed_reason_id_);
            }
            pub inline fn getWindowModal(self: *const T, pb_modal_: ?*BOOL) HRESULT {
                return @as(*const IPrinterExtensionEventArgs.VTable, @ptrCast(self.vtable)).get_WindowModal(@as(*const IPrinterExtensionEventArgs, @ptrCast(self)), pb_modal_);
            }
            pub inline fn getWindowParent(self: *const T, phwnd_parent_: ?*?HANDLE) HRESULT {
                return @as(*const IPrinterExtensionEventArgs.VTable, @ptrCast(self.vtable)).get_WindowParent(@as(*const IPrinterExtensionEventArgs, @ptrCast(self)), phwnd_parent_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrinterExtensionContextCollection_Value = Guid.initString("fb476970-9bab-4861-811e-3e98b0c5addf");
pub const IID_IPrinterExtensionContextCollection = &IID_IPrinterExtensionContextCollection_Value;
pub const IPrinterExtensionContextCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrinterExtensionContextCollection,
            pul_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IPrinterExtensionContextCollection,
            ul_index: u32,
            pp_context: ?*?*IPrinterExtensionContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrinterExtensionContextCollection,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, pul_count_: ?*u32) HRESULT {
                return @as(*const IPrinterExtensionContextCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IPrinterExtensionContextCollection, @ptrCast(self)), pul_count_);
            }
            pub inline fn getAt(self: *const T, ul_index_: u32, pp_context_: ?*?*IPrinterExtensionContext) HRESULT {
                return @as(*const IPrinterExtensionContextCollection.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IPrinterExtensionContextCollection, @ptrCast(self)), ul_index_, pp_context_);
            }
            pub inline fn getNewEnum(self: *const T, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const IPrinterExtensionContextCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IPrinterExtensionContextCollection, @ptrCast(self)), pp_unk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrinterExtensionEvent_Value = Guid.initString("c093cb63-5ef5-4585-af8e-4d5637487b57");
pub const IID_IPrinterExtensionEvent = &IID_IPrinterExtensionEvent_Value;
pub const IPrinterExtensionEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        OnDriverEvent: *const fn (
            self: *const IPrinterExtensionEvent,
            p_event_args: ?*IPrinterExtensionEventArgs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnPrinterQueuesEnumerated: *const fn (
            self: *const IPrinterExtensionEvent,
            p_context_collection: ?*IPrinterExtensionContextCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn onDriverEvent(self: *const T, p_event_args_: ?*IPrinterExtensionEventArgs) HRESULT {
                return @as(*const IPrinterExtensionEvent.VTable, @ptrCast(self.vtable)).OnDriverEvent(@as(*const IPrinterExtensionEvent, @ptrCast(self)), p_event_args_);
            }
            pub inline fn onPrinterQueuesEnumerated(self: *const T, p_context_collection_: ?*IPrinterExtensionContextCollection) HRESULT {
                return @as(*const IPrinterExtensionEvent.VTable, @ptrCast(self.vtable)).OnPrinterQueuesEnumerated(@as(*const IPrinterExtensionEvent, @ptrCast(self)), p_context_collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrinterExtensionManager_Value = Guid.initString("93c6eb8c-b001-4355-9629-8e8a1b3f8e77");
pub const IID_IPrinterExtensionManager = &IID_IPrinterExtensionManager_Value;
pub const IPrinterExtensionManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnableEvents: *const fn (
            self: *const IPrinterExtensionManager,
            printer_driver_id: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableEvents: *const fn (
            self: *const IPrinterExtensionManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn enableEvents(self: *const T, printer_driver_id_: Guid) HRESULT {
                return @as(*const IPrinterExtensionManager.VTable, @ptrCast(self.vtable)).EnableEvents(@as(*const IPrinterExtensionManager, @ptrCast(self)), printer_driver_id_);
            }
            pub inline fn disableEvents(self: *const T) HRESULT {
                return @as(*const IPrinterExtensionManager.VTable, @ptrCast(self.vtable)).DisableEvents(@as(*const IPrinterExtensionManager, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrinterScriptContext_Value = Guid.initString("066acbca-8881-49c9-bb98-fae16b4889e1");
pub const IID_IPrinterScriptContext = &IID_IPrinterScriptContext_Value;
pub const IPrinterScriptContext = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DriverProperties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrinterScriptContext,
            pp_property_bag: ?*?*IPrinterScriptablePropertyBag,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueueProperties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrinterScriptContext,
            pp_property_bag: ?*?*IPrinterScriptablePropertyBag,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserProperties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrinterScriptContext,
            pp_property_bag: ?*?*IPrinterScriptablePropertyBag,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDriverProperties(self: *const T, pp_property_bag_: ?*?*IPrinterScriptablePropertyBag) HRESULT {
                return @as(*const IPrinterScriptContext.VTable, @ptrCast(self.vtable)).get_DriverProperties(@as(*const IPrinterScriptContext, @ptrCast(self)), pp_property_bag_);
            }
            pub inline fn getQueueProperties(self: *const T, pp_property_bag_: ?*?*IPrinterScriptablePropertyBag) HRESULT {
                return @as(*const IPrinterScriptContext.VTable, @ptrCast(self.vtable)).get_QueueProperties(@as(*const IPrinterScriptContext, @ptrCast(self)), pp_property_bag_);
            }
            pub inline fn getUserProperties(self: *const T, pp_property_bag_: ?*?*IPrinterScriptablePropertyBag) HRESULT {
                return @as(*const IPrinterScriptContext.VTable, @ptrCast(self.vtable)).get_UserProperties(@as(*const IPrinterScriptContext, @ptrCast(self)), pp_property_bag_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PrintAsyncNotifyUserFilter = enum(i32) {
    PerUser = 0,
    AllUsers = 1,
};
pub const kPerUser = PrintAsyncNotifyUserFilter.PerUser;
pub const kAllUsers = PrintAsyncNotifyUserFilter.AllUsers;

pub const PrintAsyncNotifyConversationStyle = enum(i32) {
    BiDirectional = 0,
    UniDirectional = 1,
};
pub const kBiDirectional = PrintAsyncNotifyConversationStyle.BiDirectional;
pub const kUniDirectional = PrintAsyncNotifyConversationStyle.UniDirectional;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPrintAsyncNotifyDataObject_Value = Guid.initString("77cf513e-5d49-4789-9f30-d0822b335c0d");
pub const IID_IPrintAsyncNotifyDataObject = &IID_IPrintAsyncNotifyDataObject_Value;
pub const IPrintAsyncNotifyDataObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AcquireData: *const fn (
            self: *const IPrintAsyncNotifyDataObject,
            pp_notification_data: ?*?*u8,
            p_size: ?*u32,
            pp_schema: ?*?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseData: *const fn (
            self: *const IPrintAsyncNotifyDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn acquireData(self: *const T, pp_notification_data_: ?*?*u8, p_size_: ?*u32, pp_schema_: ?*?*Guid) HRESULT {
                return @as(*const IPrintAsyncNotifyDataObject.VTable, @ptrCast(self.vtable)).AcquireData(@as(*const IPrintAsyncNotifyDataObject, @ptrCast(self)), pp_notification_data_, p_size_, pp_schema_);
            }
            pub inline fn releaseData(self: *const T) HRESULT {
                return @as(*const IPrintAsyncNotifyDataObject.VTable, @ptrCast(self.vtable)).ReleaseData(@as(*const IPrintAsyncNotifyDataObject, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPrintAsyncNotifyChannel_Value = Guid.initString("4a5031b1-1f3f-4db0-a462-4530ed8b0451");
pub const IID_IPrintAsyncNotifyChannel = &IID_IPrintAsyncNotifyChannel_Value;
pub const IPrintAsyncNotifyChannel = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SendNotification: *const fn (
            self: *const IPrintAsyncNotifyChannel,
            p_data: ?*IPrintAsyncNotifyDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseChannel: *const fn (
            self: *const IPrintAsyncNotifyChannel,
            p_data: ?*IPrintAsyncNotifyDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn sendNotification(self: *const T, p_data_: ?*IPrintAsyncNotifyDataObject) HRESULT {
                return @as(*const IPrintAsyncNotifyChannel.VTable, @ptrCast(self.vtable)).SendNotification(@as(*const IPrintAsyncNotifyChannel, @ptrCast(self)), p_data_);
            }
            pub inline fn closeChannel(self: *const T, p_data_: ?*IPrintAsyncNotifyDataObject) HRESULT {
                return @as(*const IPrintAsyncNotifyChannel.VTable, @ptrCast(self.vtable)).CloseChannel(@as(*const IPrintAsyncNotifyChannel, @ptrCast(self)), p_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPrintAsyncNotifyCallback_Value = Guid.initString("7def34c1-9d92-4c99-b3b3-db94a9d4191b");
pub const IID_IPrintAsyncNotifyCallback = &IID_IPrintAsyncNotifyCallback_Value;
pub const IPrintAsyncNotifyCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnEventNotify: *const fn (
            self: *const IPrintAsyncNotifyCallback,
            p_channel: ?*IPrintAsyncNotifyChannel,
            p_data: ?*IPrintAsyncNotifyDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ChannelClosed: *const fn (
            self: *const IPrintAsyncNotifyCallback,
            p_channel: ?*IPrintAsyncNotifyChannel,
            p_data: ?*IPrintAsyncNotifyDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onEventNotify(self: *const T, p_channel_: ?*IPrintAsyncNotifyChannel, p_data_: ?*IPrintAsyncNotifyDataObject) HRESULT {
                return @as(*const IPrintAsyncNotifyCallback.VTable, @ptrCast(self.vtable)).OnEventNotify(@as(*const IPrintAsyncNotifyCallback, @ptrCast(self)), p_channel_, p_data_);
            }
            pub inline fn channelClosed(self: *const T, p_channel_: ?*IPrintAsyncNotifyChannel, p_data_: ?*IPrintAsyncNotifyDataObject) HRESULT {
                return @as(*const IPrintAsyncNotifyCallback.VTable, @ptrCast(self.vtable)).ChannelClosed(@as(*const IPrintAsyncNotifyCallback, @ptrCast(self)), p_channel_, p_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PrintAsyncNotifyError = enum(i32) {
    CHANNEL_CLOSED_BY_SERVER = 1,
    CHANNEL_CLOSED_BY_ANOTHER_LISTENER = 2,
    CHANNEL_CLOSED_BY_SAME_LISTENER = 3,
    CHANNEL_RELEASED_BY_LISTENER = 4,
    UNIRECTIONAL_NOTIFICATION_LOST = 5,
    ASYNC_NOTIFICATION_FAILURE = 6,
    NO_LISTENERS = 7,
    CHANNEL_ALREADY_CLOSED = 8,
    CHANNEL_ALREADY_OPENED = 9,
    CHANNEL_WAITING_FOR_CLIENT_NOTIFICATION = 10,
    CHANNEL_NOT_OPENED = 11,
    ASYNC_CALL_ALREADY_PARKED = 12,
    NOT_REGISTERED = 13,
    ALREADY_UNREGISTERED = 14,
    ALREADY_REGISTERED = 15,
    CHANNEL_ACQUIRED = 16,
    ASYNC_CALL_IN_PROGRESS = 17,
    MAX_NOTIFICATION_SIZE_EXCEEDED = 18,
    INTERNAL_NOTIFICATION_QUEUE_IS_FULL = 19,
    INVALID_NOTIFICATION_TYPE = 20,
    MAX_REGISTRATION_COUNT_EXCEEDED = 21,
    MAX_CHANNEL_COUNT_EXCEEDED = 22,
    LOCAL_ONLY_REGISTRATION = 23,
    REMOTE_ONLY_REGISTRATION = 24,
};
pub const CHANNEL_CLOSED_BY_SERVER = PrintAsyncNotifyError.CHANNEL_CLOSED_BY_SERVER;
pub const CHANNEL_CLOSED_BY_ANOTHER_LISTENER = PrintAsyncNotifyError.CHANNEL_CLOSED_BY_ANOTHER_LISTENER;
pub const CHANNEL_CLOSED_BY_SAME_LISTENER = PrintAsyncNotifyError.CHANNEL_CLOSED_BY_SAME_LISTENER;
pub const CHANNEL_RELEASED_BY_LISTENER = PrintAsyncNotifyError.CHANNEL_RELEASED_BY_LISTENER;
pub const UNIRECTIONAL_NOTIFICATION_LOST = PrintAsyncNotifyError.UNIRECTIONAL_NOTIFICATION_LOST;
pub const ASYNC_NOTIFICATION_FAILURE = PrintAsyncNotifyError.ASYNC_NOTIFICATION_FAILURE;
pub const NO_LISTENERS = PrintAsyncNotifyError.NO_LISTENERS;
pub const CHANNEL_ALREADY_CLOSED = PrintAsyncNotifyError.CHANNEL_ALREADY_CLOSED;
pub const CHANNEL_ALREADY_OPENED = PrintAsyncNotifyError.CHANNEL_ALREADY_OPENED;
pub const CHANNEL_WAITING_FOR_CLIENT_NOTIFICATION = PrintAsyncNotifyError.CHANNEL_WAITING_FOR_CLIENT_NOTIFICATION;
pub const CHANNEL_NOT_OPENED = PrintAsyncNotifyError.CHANNEL_NOT_OPENED;
pub const ASYNC_CALL_ALREADY_PARKED = PrintAsyncNotifyError.ASYNC_CALL_ALREADY_PARKED;
pub const NOT_REGISTERED = PrintAsyncNotifyError.NOT_REGISTERED;
pub const ALREADY_UNREGISTERED = PrintAsyncNotifyError.ALREADY_UNREGISTERED;
pub const ALREADY_REGISTERED = PrintAsyncNotifyError.ALREADY_REGISTERED;
pub const CHANNEL_ACQUIRED = PrintAsyncNotifyError.CHANNEL_ACQUIRED;
pub const ASYNC_CALL_IN_PROGRESS = PrintAsyncNotifyError.ASYNC_CALL_IN_PROGRESS;
pub const MAX_NOTIFICATION_SIZE_EXCEEDED = PrintAsyncNotifyError.MAX_NOTIFICATION_SIZE_EXCEEDED;
pub const INTERNAL_NOTIFICATION_QUEUE_IS_FULL = PrintAsyncNotifyError.INTERNAL_NOTIFICATION_QUEUE_IS_FULL;
pub const INVALID_NOTIFICATION_TYPE = PrintAsyncNotifyError.INVALID_NOTIFICATION_TYPE;
pub const MAX_REGISTRATION_COUNT_EXCEEDED = PrintAsyncNotifyError.MAX_REGISTRATION_COUNT_EXCEEDED;
pub const MAX_CHANNEL_COUNT_EXCEEDED = PrintAsyncNotifyError.MAX_CHANNEL_COUNT_EXCEEDED;
pub const LOCAL_ONLY_REGISTRATION = PrintAsyncNotifyError.LOCAL_ONLY_REGISTRATION;
pub const REMOTE_ONLY_REGISTRATION = PrintAsyncNotifyError.REMOTE_ONLY_REGISTRATION;

const IID_IPrintAsyncNotifyRegistration_Value = Guid.initString("0f6f27b6-6f86-4591-9203-64c3bfadedfe");
pub const IID_IPrintAsyncNotifyRegistration = &IID_IPrintAsyncNotifyRegistration_Value;
pub const IPrintAsyncNotifyRegistration = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterForNotifications: *const fn (
            self: *const IPrintAsyncNotifyRegistration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterForNotifications: *const fn (
            self: *const IPrintAsyncNotifyRegistration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn registerForNotifications(self: *const T) HRESULT {
                return @as(*const IPrintAsyncNotifyRegistration.VTable, @ptrCast(self.vtable)).RegisterForNotifications(@as(*const IPrintAsyncNotifyRegistration, @ptrCast(self)));
            }
            pub inline fn unregisterForNotifications(self: *const T) HRESULT {
                return @as(*const IPrintAsyncNotifyRegistration.VTable, @ptrCast(self.vtable)).UnregisterForNotifications(@as(*const IPrintAsyncNotifyRegistration, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPrintAsyncNotify_Value = Guid.initString("532818f7-921b-4fb2-bff8-2f4fd52ebebf");
pub const IID_IPrintAsyncNotify = &IID_IPrintAsyncNotify_Value;
pub const IPrintAsyncNotify = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreatePrintAsyncNotifyChannel: *const fn (
            self: *const IPrintAsyncNotify,
            param0: u32,
            param1: ?*Guid,
            param2: PrintAsyncNotifyUserFilter,
            param3: PrintAsyncNotifyConversationStyle,
            param4: ?*IPrintAsyncNotifyCallback,
            param5: ?*?*IPrintAsyncNotifyChannel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePrintAsyncNotifyRegistration: *const fn (
            self: *const IPrintAsyncNotify,
            param0: ?*Guid,
            param1: PrintAsyncNotifyUserFilter,
            param2: PrintAsyncNotifyConversationStyle,
            param3: ?*IPrintAsyncNotifyCallback,
            param4: ?*?*IPrintAsyncNotifyRegistration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createPrintAsyncNotifyChannel(self: *const T, param0_: u32, param1_: ?*Guid, param2_: PrintAsyncNotifyUserFilter, param3_: PrintAsyncNotifyConversationStyle, param4_: ?*IPrintAsyncNotifyCallback, param5_: ?*?*IPrintAsyncNotifyChannel) HRESULT {
                return @as(*const IPrintAsyncNotify.VTable, @ptrCast(self.vtable)).CreatePrintAsyncNotifyChannel(@as(*const IPrintAsyncNotify, @ptrCast(self)), param0_, param1_, param2_, param3_, param4_, param5_);
            }
            pub inline fn createPrintAsyncNotifyRegistration(self: *const T, param0_: ?*Guid, param1_: PrintAsyncNotifyUserFilter, param2_: PrintAsyncNotifyConversationStyle, param3_: ?*IPrintAsyncNotifyCallback, param4_: ?*?*IPrintAsyncNotifyRegistration) HRESULT {
                return @as(*const IPrintAsyncNotify.VTable, @ptrCast(self.vtable)).CreatePrintAsyncNotifyRegistration(@as(*const IPrintAsyncNotify, @ptrCast(self)), param0_, param1_, param2_, param3_, param4_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const IPrintAsyncCookie = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FinishAsyncCall: *const fn (
            self: *const IPrintAsyncCookie,
            param0: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelAsyncCall: *const fn (
            self: *const IPrintAsyncCookie,
            param0: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn finishAsyncCall(self: *const T, param0_: HRESULT) HRESULT {
                return @as(*const IPrintAsyncCookie.VTable, @ptrCast(self.vtable)).FinishAsyncCall(@as(*const IPrintAsyncCookie, @ptrCast(self)), param0_);
            }
            pub inline fn cancelAsyncCall(self: *const T, param0_: HRESULT) HRESULT {
                return @as(*const IPrintAsyncCookie.VTable, @ptrCast(self.vtable)).CancelAsyncCall(@as(*const IPrintAsyncCookie, @ptrCast(self)), param0_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const IPrintAsyncNewChannelCookie = extern struct {
    pub const VTable = extern struct {
        base: IPrintAsyncCookie.VTable,
        FinishAsyncCallWithData: *const fn (
            self: *const IPrintAsyncNewChannelCookie,
            param0: ?*?*IPrintAsyncNotifyChannel,
            param1: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintAsyncCookie.MethodMixin(T);
            pub inline fn finishAsyncCallWithData(self: *const T, param0_: ?*?*IPrintAsyncNotifyChannel, param1_: u32) HRESULT {
                return @as(*const IPrintAsyncNewChannelCookie.VTable, @ptrCast(self.vtable)).FinishAsyncCallWithData(@as(*const IPrintAsyncNewChannelCookie, @ptrCast(self)), param0_, param1_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const IAsyncGetSendNotificationCookie = extern struct {
    pub const VTable = extern struct {
        base: IPrintAsyncCookie.VTable,
        FinishAsyncCallWithData: *const fn (
            self: *const IAsyncGetSendNotificationCookie,
            param0: ?*IPrintAsyncNotifyDataObject,
            param1: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintAsyncCookie.MethodMixin(T);
            pub inline fn finishAsyncCallWithData(self: *const T, param0_: ?*IPrintAsyncNotifyDataObject, param1_: BOOL) HRESULT {
                return @as(*const IAsyncGetSendNotificationCookie.VTable, @ptrCast(self.vtable)).FinishAsyncCallWithData(@as(*const IAsyncGetSendNotificationCookie, @ptrCast(self)), param0_, param1_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const IAsyncGetSrvReferralCookie = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FinishAsyncCall: *const fn (
            self: *const IAsyncGetSrvReferralCookie,
            param0: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelAsyncCall: *const fn (
            self: *const IAsyncGetSrvReferralCookie,
            param0: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FinishAsyncCallWithData: *const fn (
            self: *const IAsyncGetSrvReferralCookie,
            param0: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn finishAsyncCall(self: *const T, param0_: HRESULT) HRESULT {
                return @as(*const IAsyncGetSrvReferralCookie.VTable, @ptrCast(self.vtable)).FinishAsyncCall(@as(*const IAsyncGetSrvReferralCookie, @ptrCast(self)), param0_);
            }
            pub inline fn cancelAsyncCall(self: *const T, param0_: HRESULT) HRESULT {
                return @as(*const IAsyncGetSrvReferralCookie.VTable, @ptrCast(self.vtable)).CancelAsyncCall(@as(*const IAsyncGetSrvReferralCookie, @ptrCast(self)), param0_);
            }
            pub inline fn finishAsyncCallWithData(self: *const T, param0_: ?[*:0]const u16) HRESULT {
                return @as(*const IAsyncGetSrvReferralCookie.VTable, @ptrCast(self.vtable)).FinishAsyncCallWithData(@as(*const IAsyncGetSrvReferralCookie, @ptrCast(self)), param0_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const IPrintBidiAsyncNotifyRegistration = extern struct {
    pub const VTable = extern struct {
        base: IPrintAsyncNotifyRegistration.VTable,
        AsyncGetNewChannel: *const fn (
            self: *const IPrintBidiAsyncNotifyRegistration,
            param0: ?*IPrintAsyncNewChannelCookie,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintAsyncNotifyRegistration.MethodMixin(T);
            pub inline fn asyncGetNewChannel(self: *const T, param0_: ?*IPrintAsyncNewChannelCookie) HRESULT {
                return @as(*const IPrintBidiAsyncNotifyRegistration.VTable, @ptrCast(self.vtable)).AsyncGetNewChannel(@as(*const IPrintBidiAsyncNotifyRegistration, @ptrCast(self)), param0_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const IPrintUnidiAsyncNotifyRegistration = extern struct {
    pub const VTable = extern struct {
        base: IPrintAsyncNotifyRegistration.VTable,
        AsyncGetNotification: *const fn (
            self: *const IPrintUnidiAsyncNotifyRegistration,
            param0: ?*IAsyncGetSendNotificationCookie,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintAsyncNotifyRegistration.MethodMixin(T);
            pub inline fn asyncGetNotification(self: *const T, param0_: ?*IAsyncGetSendNotificationCookie) HRESULT {
                return @as(*const IPrintUnidiAsyncNotifyRegistration.VTable, @ptrCast(self.vtable)).AsyncGetNotification(@as(*const IPrintUnidiAsyncNotifyRegistration, @ptrCast(self)), param0_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const IPrintAsyncNotifyServerReferral = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetServerReferral: *const fn (
            self: *const IPrintAsyncNotifyServerReferral,
            param0: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AsyncGetServerReferral: *const fn (
            self: *const IPrintAsyncNotifyServerReferral,
            param0: ?*IAsyncGetSrvReferralCookie,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetServerReferral: *const fn (
            self: *const IPrintAsyncNotifyServerReferral,
            p_rmt_server_referral: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getServerReferral(self: *const T, param0_: ?*?PWSTR) HRESULT {
                return @as(*const IPrintAsyncNotifyServerReferral.VTable, @ptrCast(self.vtable)).GetServerReferral(@as(*const IPrintAsyncNotifyServerReferral, @ptrCast(self)), param0_);
            }
            pub inline fn asyncGetServerReferral(self: *const T, param0_: ?*IAsyncGetSrvReferralCookie) HRESULT {
                return @as(*const IPrintAsyncNotifyServerReferral.VTable, @ptrCast(self.vtable)).AsyncGetServerReferral(@as(*const IPrintAsyncNotifyServerReferral, @ptrCast(self)), param0_);
            }
            pub inline fn setServerReferral(self: *const T, p_rmt_server_referral_: ?[*:0]const u16) HRESULT {
                return @as(*const IPrintAsyncNotifyServerReferral.VTable, @ptrCast(self.vtable)).SetServerReferral(@as(*const IPrintAsyncNotifyServerReferral, @ptrCast(self)), p_rmt_server_referral_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IBidiAsyncNotifyChannel_Value = Guid.initString("532818f7-921b-4fb2-bff8-2f4fd52ebebf");
pub const IID_IBidiAsyncNotifyChannel = &IID_IBidiAsyncNotifyChannel_Value;
pub const IBidiAsyncNotifyChannel = extern struct {
    pub const VTable = extern struct {
        base: IPrintAsyncNotifyChannel.VTable,
        CreateNotificationChannel: *const fn (
            self: *const IBidiAsyncNotifyChannel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrintName: *const fn (
            self: *const IBidiAsyncNotifyChannel,
            param0: ?*?*IPrintAsyncNotifyDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChannelNotificationType: *const fn (
            self: *const IBidiAsyncNotifyChannel,
            param0: ?*?*IPrintAsyncNotifyDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AsyncGetNotificationSendResponse: *const fn (
            self: *const IBidiAsyncNotifyChannel,
            param0: ?*IPrintAsyncNotifyDataObject,
            param1: ?*IAsyncGetSendNotificationCookie,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AsyncCloseChannel: *const fn (
            self: *const IBidiAsyncNotifyChannel,
            param0: ?*IPrintAsyncNotifyDataObject,
            param1: ?*IPrintAsyncCookie,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPrintAsyncNotifyChannel.MethodMixin(T);
            pub inline fn createNotificationChannel(self: *const T) HRESULT {
                return @as(*const IBidiAsyncNotifyChannel.VTable, @ptrCast(self.vtable)).CreateNotificationChannel(@as(*const IBidiAsyncNotifyChannel, @ptrCast(self)));
            }
            pub inline fn getPrintName(self: *const T, param0_: ?*?*IPrintAsyncNotifyDataObject) HRESULT {
                return @as(*const IBidiAsyncNotifyChannel.VTable, @ptrCast(self.vtable)).GetPrintName(@as(*const IBidiAsyncNotifyChannel, @ptrCast(self)), param0_);
            }
            pub inline fn getChannelNotificationType(self: *const T, param0_: ?*?*IPrintAsyncNotifyDataObject) HRESULT {
                return @as(*const IBidiAsyncNotifyChannel.VTable, @ptrCast(self.vtable)).GetChannelNotificationType(@as(*const IBidiAsyncNotifyChannel, @ptrCast(self)), param0_);
            }
            pub inline fn asyncGetNotificationSendResponse(self: *const T, param0_: ?*IPrintAsyncNotifyDataObject, param1_: ?*IAsyncGetSendNotificationCookie) HRESULT {
                return @as(*const IBidiAsyncNotifyChannel.VTable, @ptrCast(self.vtable)).AsyncGetNotificationSendResponse(@as(*const IBidiAsyncNotifyChannel, @ptrCast(self)), param0_, param1_);
            }
            pub inline fn asyncCloseChannel(self: *const T, param0_: ?*IPrintAsyncNotifyDataObject, param1_: ?*IPrintAsyncCookie) HRESULT {
                return @as(*const IBidiAsyncNotifyChannel.VTable, @ptrCast(self.vtable)).AsyncCloseChannel(@as(*const IBidiAsyncNotifyChannel, @ptrCast(self)), param0_, param1_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const UNIFM_HDR = extern struct {
    dwSize: u32,
    dwVersion: u32,
    ulDefaultCodepage: u32,
    lGlyphSetDataRCID: i32,
    loUnidrvInfo: u32,
    loIFIMetrics: u32,
    loExtTextMetric: u32,
    loWidthTable: u32,
    loKernPair: u32,
    dwReserved: [2]u32,
};

pub const INVOC = extern struct {
    dwCount: u32,
    loOffset: u32,
};

pub const UNIDRVINFO = extern struct {
    dwSize: u32,
    flGenFlags: u32,
    wType: u16,
    fCaps: u16,
    wXRes: u16,
    wYRes: u16,
    sYAdjust: i16,
    sYMoved: i16,
    wPrivateData: u16,
    sShift: i16,
    SelectFont: INVOC,
    UnSelectFont: INVOC,
    wReserved: [4]u16,
};

pub const PRINTIFI32 = extern struct {
    cjThis: u32,
    cjIfiExtra: u32,
    dpwszFamilyName: i32,
    dpwszStyleName: i32,
    dpwszFaceName: i32,
    dpwszUniqueName: i32,
    dpFontSim: i32,
    lEmbedId: i32,
    lItalicAngle: i32,
    lCharBias: i32,
    dpCharSets: i32,
    jWinCharSet: u8,
    jWinPitchAndFamily: u8,
    usWinWeight: u16,
    flInfo: u32,
    fsSelection: u16,
    fsType: u16,
    fwdUnitsPerEm: i16,
    fwdLowestPPEm: i16,
    fwdWinAscender: i16,
    fwdWinDescender: i16,
    fwdMacAscender: i16,
    fwdMacDescender: i16,
    fwdMacLineGap: i16,
    fwdTypoAscender: i16,
    fwdTypoDescender: i16,
    fwdTypoLineGap: i16,
    fwdAveCharWidth: i16,
    fwdMaxCharInc: i16,
    fwdCapHeight: i16,
    fwdXHeight: i16,
    fwdSubscriptXSize: i16,
    fwdSubscriptYSize: i16,
    fwdSubscriptXOffset: i16,
    fwdSubscriptYOffset: i16,
    fwdSuperscriptXSize: i16,
    fwdSuperscriptYSize: i16,
    fwdSuperscriptXOffset: i16,
    fwdSuperscriptYOffset: i16,
    fwdUnderscoreSize: i16,
    fwdUnderscorePosition: i16,
    fwdStrikeoutSize: i16,
    fwdStrikeoutPosition: i16,
    chFirstChar: u8,
    chLastChar: u8,
    chDefaultChar: u8,
    chBreakChar: u8,
    wcFirstChar: u16,
    wcLastChar: u16,
    wcDefaultChar: u16,
    wcBreakChar: u16,
    ptlBaseline: POINTL,
    ptlAspect: POINTL,
    ptlCaret: POINTL,
    rclFontBox: RECTL,
    achVendId: [4]u8,
    cKerningPairs: u32,
    ulPanoseCulture: u32,
    panose: PANOSE,
};

pub const EXTTEXTMETRIC = extern struct {
    emSize: i16,
    emPointSize: i16,
    emOrientation: i16,
    emMasterHeight: i16,
    emMinScale: i16,
    emMaxScale: i16,
    emMasterUnits: i16,
    emCapHeight: i16,
    emXHeight: i16,
    emLowerCaseAscent: i16,
    emLowerCaseDescent: i16,
    emSlant: i16,
    emSuperScript: i16,
    emSubScript: i16,
    emSuperScriptSize: i16,
    emSubScriptSize: i16,
    emUnderlineOffset: i16,
    emUnderlineWidth: i16,
    emDoubleUpperUnderlineOffset: i16,
    emDoubleLowerUnderlineOffset: i16,
    emDoubleUpperUnderlineWidth: i16,
    emDoubleLowerUnderlineWidth: i16,
    emStrikeOutOffset: i16,
    emStrikeOutWidth: i16,
    emKernPairs: u16,
    emKernTracks: u16,
};

pub const WIDTHRUN = extern struct {
    wStartGlyph: u16,
    wGlyphCount: u16,
    loCharWidthOffset: u32,
};

pub const WIDTHTABLE = extern struct {
    dwSize: u32,
    dwRunNum: u32,
    WidthRun: [1]WIDTHRUN,
};

pub const KERNDATA = extern struct {
    dwSize: u32,
    dwKernPairNum: u32,
    KernPair: [1]FD_KERNINGPAIR,
};

pub const UNI_GLYPHSETDATA = extern struct {
    dwSize: u32,
    dwVersion: u32,
    dwFlags: u32,
    lPredefinedID: i32,
    dwGlyphCount: u32,
    dwRunCount: u32,
    loRunOffset: u32,
    dwCodePageCount: u32,
    loCodePageOffset: u32,
    loMapTableOffset: u32,
    dwReserved: [2]u32,
};

pub const UNI_CODEPAGEINFO = extern struct {
    dwCodePage: u32,
    SelectSymbolSet: INVOC,
    UnSelectSymbolSet: INVOC,
};

pub const GLYPHRUN = extern struct {
    wcLow: u16,
    wGlyphCount: u16,
};

pub const TRANSDATA = extern struct {
    ubCodePageID: u8,
    ubType: u8,
    uCode: extern union {
        sCode: i16,
        ubCode: u8,
        ubPairs: [2]u8,
    },
};

pub const MAPTABLE = extern struct {
    dwSize: u32,
    dwGlyphNum: u32,
    Trans: [1]TRANSDATA,
};

pub const UFF_FILEHEADER = extern struct {
    dwSignature: u32,
    dwVersion: u32,
    dwSize: u32,
    nFonts: u32,
    nGlyphSets: u32,
    nVarData: u32,
    offFontDir: u32,
    dwFlags: u32,
    dwReserved: [4]u32,
};

pub const UFF_FONTDIRECTORY = extern struct {
    dwSignature: u32,
    wSize: u16,
    wFontID: u16,
    sGlyphID: i16,
    wFlags: u16,
    dwInstallerSig: u32,
    offFontName: u32,
    offCartridgeName: u32,
    offFontData: u32,
    offGlyphData: u32,
    offVarData: u32,
};

pub const DATA_HEADER = extern struct {
    dwSignature: u32,
    wSize: u16,
    wDataID: u16,
    dwDataSize: u32,
    dwReserved: u32,
};

pub const OEMFONTINSTPARAM = extern struct {
    cbSize: u32,
    hPrinter: ?HANDLE,
    hModule: ?HANDLE,
    hHeap: ?HANDLE,
    dwFlags: u32,
    pFontInstallerName: ?PWSTR,
};

pub const PORT_DATA_1 = extern struct {
    sztPortName: [64]u16,
    dwVersion: u32,
    dwProtocol: u32,
    cbSize: u32,
    dwReserved: u32,
    sztHostAddress: [49]u16,
    sztSNMPCommunity: [33]u16,
    dwDoubleSpool: u32,
    sztQueue: [33]u16,
    sztIPAddress: [16]u16,
    Reserved: [540]u8,
    dwPortNumber: u32,
    dwSNMPEnabled: u32,
    dwSNMPDevIndex: u32,
};

pub const PORT_DATA_2 = extern struct {
    sztPortName: [64]u16,
    dwVersion: u32,
    dwProtocol: u32,
    cbSize: u32,
    dwReserved: u32,
    sztHostAddress: [128]u16,
    sztSNMPCommunity: [33]u16,
    dwDoubleSpool: u32,
    sztQueue: [33]u16,
    Reserved: [514]u8,
    dwPortNumber: u32,
    dwSNMPEnabled: u32,
    dwSNMPDevIndex: u32,
    dwPortMonitorMibIndex: u32,
};

pub const PORT_DATA_LIST_1 = extern struct {
    dwVersion: u32,
    cPortData: u32,
    pPortData: [1]PORT_DATA_2,
};

pub const DELETE_PORT_DATA_1 = extern struct {
    psztPortName: [64]u16,
    Reserved: [98]u8,
    dwVersion: u32,
    dwReserved: u32,
};

pub const CONFIG_INFO_DATA_1 = extern struct {
    Reserved: [128]u8,
    dwVersion: u32,
};

pub const EMFPLAYPROC = *const fn (
    param0: ?HDC,
    param1: i32,
    param2: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const EBranchOfficeJobEventType = enum(i32) {
    InvalidJobState = 0,
    LogJobPrinted = 1,
    LogJobRendered = 2,
    LogJobError = 3,
    LogJobPipelineError = 4,
    LogOfflineFileFull = 5,
};
pub const kInvalidJobState = EBranchOfficeJobEventType.InvalidJobState;
pub const kLogJobPrinted = EBranchOfficeJobEventType.LogJobPrinted;
pub const kLogJobRendered = EBranchOfficeJobEventType.LogJobRendered;
pub const kLogJobError = EBranchOfficeJobEventType.LogJobError;
pub const kLogJobPipelineError = EBranchOfficeJobEventType.LogJobPipelineError;
pub const kLogOfflineFileFull = EBranchOfficeJobEventType.LogOfflineFileFull;

pub const BranchOfficeJobDataPrinted = extern struct {
    Status: u32,
    pDocumentName: ?PWSTR,
    pUserName: ?PWSTR,
    pMachineName: ?PWSTR,
    pPrinterName: ?PWSTR,
    pPortName: ?PWSTR,
    Size: i64,
    TotalPages: u32,
};

pub const BranchOfficeJobDataError = extern struct {
    LastError: u32,
    pDocumentName: ?PWSTR,
    pUserName: ?PWSTR,
    pPrinterName: ?PWSTR,
    pDataType: ?PWSTR,
    TotalSize: i64,
    PrintedSize: i64,
    TotalPages: u32,
    PrintedPages: u32,
    pMachineName: ?PWSTR,
    pJobError: ?PWSTR,
    pErrorDescription: ?PWSTR,
};

pub const BranchOfficeJobDataRendered = extern struct {
    Size: i64,
    ICMMethod: u32,
    Color: i16,
    PrintQuality: i16,
    YResolution: i16,
    Copies: i16,
    TTOption: i16,
};

pub const BranchOfficeJobDataPipelineFailed = extern struct {
    pDocumentName: ?PWSTR,
    pPrinterName: ?PWSTR,
    pExtraErrorInfo: ?PWSTR,
};

pub const BranchOfficeLogOfflineFileFull = extern struct {
    pMachineName: ?PWSTR,
};

pub const BranchOfficeJobData = extern struct {
    eEventType: EBranchOfficeJobEventType,
    JobId: u32,
    JobInfo: extern union {
        LogJobPrinted: BranchOfficeJobDataPrinted,
        LogJobRendered: BranchOfficeJobDataRendered,
        LogJobError: BranchOfficeJobDataError,
        LogPipelineFailed: BranchOfficeJobDataPipelineFailed,
        LogOfflineFileFull: BranchOfficeLogOfflineFileFull,
    },
};

pub const BranchOfficeJobDataContainer = extern struct {
    cJobDataEntries: u32,
    JobData: [1]BranchOfficeJobData,
};

pub const PRINTER_NOTIFY_INIT = extern struct {
    Size: u32,
    Reserved: u32,
    PollTime: u32,
};

pub const SPLCLIENT_INFO_1 = extern struct {
    dwSize: u32,
    pMachineName: ?PWSTR,
    pUserName: ?PWSTR,
    dwBuildNum: u32,
    dwMajorVersion: u32,
    dwMinorVersion: u32,
    wProcessorArchitecture: u16,
};

pub const _SPLCLIENT_INFO_2_V1 = extern struct {
    hSplPrinter: usize,
};

pub const _SPLCLIENT_INFO_2_V3 = extern struct {
    hSplPrinter: u64,
};

pub const SPLCLIENT_INFO_3_VISTA = extern struct {
    cbSize: u32,
    dwFlags: u32,
    dwSize: u32,
    pMachineName: ?PWSTR,
    pUserName: ?PWSTR,
    dwBuildNum: u32,
    dwMajorVersion: u32,
    dwMinorVersion: u32,
    wProcessorArchitecture: u16,
    hSplPrinter: u64,
};

pub const PRINTPROVIDOR = extern struct {
    fpOpenPrinter: isize,
    fpSetJob: isize,
    fpGetJob: isize,
    fpEnumJobs: isize,
    fpAddPrinter: isize,
    fpDeletePrinter: isize,
    fpSetPrinter: isize,
    fpGetPrinter: isize,
    fpEnumPrinters: isize,
    fpAddPrinterDriver: isize,
    fpEnumPrinterDrivers: isize,
    fpGetPrinterDriver: isize,
    fpGetPrinterDriverDirectory: isize,
    fpDeletePrinterDriver: isize,
    fpAddPrintProcessor: isize,
    fpEnumPrintProcessors: isize,
    fpGetPrintProcessorDirectory: isize,
    fpDeletePrintProcessor: isize,
    fpEnumPrintProcessorDatatypes: isize,
    fpStartDocPrinter: isize,
    fpStartPagePrinter: isize,
    fpWritePrinter: isize,
    fpEndPagePrinter: isize,
    fpAbortPrinter: isize,
    fpReadPrinter: isize,
    fpEndDocPrinter: isize,
    fpAddJob: isize,
    fpScheduleJob: isize,
    fpGetPrinterData: isize,
    fpSetPrinterData: isize,
    fpWaitForPrinterChange: isize,
    fpClosePrinter: isize,
    fpAddForm: isize,
    fpDeleteForm: isize,
    fpGetForm: isize,
    fpSetForm: isize,
    fpEnumForms: isize,
    fpEnumMonitors: isize,
    fpEnumPorts: isize,
    fpAddPort: isize,
    fpConfigurePort: isize,
    fpDeletePort: isize,
    fpCreatePrinterIC: isize,
    fpPlayGdiScriptOnPrinterIC: isize,
    fpDeletePrinterIC: isize,
    fpAddPrinterConnection: isize,
    fpDeletePrinterConnection: isize,
    fpPrinterMessageBox: isize,
    fpAddMonitor: isize,
    fpDeleteMonitor: isize,
    fpResetPrinter: isize,
    fpGetPrinterDriverEx: isize,
    fpFindFirstPrinterChangeNotification: isize,
    fpFindClosePrinterChangeNotification: isize,
    fpAddPortEx: isize,
    fpShutDown: isize,
    fpRefreshPrinterChangeNotification: isize,
    fpOpenPrinterEx: isize,
    fpAddPrinterEx: isize,
    fpSetPort: isize,
    fpEnumPrinterData: isize,
    fpDeletePrinterData: isize,
    fpClusterSplOpen: isize,
    fpClusterSplClose: isize,
    fpClusterSplIsAlive: isize,
    fpSetPrinterDataEx: isize,
    fpGetPrinterDataEx: isize,
    fpEnumPrinterDataEx: isize,
    fpEnumPrinterKey: isize,
    fpDeletePrinterDataEx: isize,
    fpDeletePrinterKey: isize,
    fpSeekPrinter: isize,
    fpDeletePrinterDriverEx: isize,
    fpAddPerMachineConnection: isize,
    fpDeletePerMachineConnection: isize,
    fpEnumPerMachineConnections: isize,
    fpXcvData: isize,
    fpAddPrinterDriverEx: isize,
    fpSplReadPrinter: isize,
    fpDriverUnloadComplete: isize,
    fpGetSpoolFileInfo: isize,
    fpCommitSpoolData: isize,
    fpCloseSpoolFileHandle: isize,
    fpFlushPrinter: isize,
    fpSendRecvBidiData: isize,
    fpAddPrinterConnection2: isize,
    fpGetPrintClassObject: isize,
    fpReportJobProcessingProgress: isize,
    fpEnumAndLogProvidorObjects: isize,
    fpInternalGetPrinterDriver: isize,
    fpFindCompatibleDriver: isize,
    fpGetJobNamedPropertyValue: isize,
    fpSetJobNamedProperty: isize,
    fpDeleteJobNamedProperty: isize,
    fpEnumJobNamedProperties: isize,
    fpPowerEvent: isize,
    fpGetUserPropertyBag: isize,
    fpCanShutdown: isize,
    fpLogJobInfoForBranchOffice: isize,
    fpRegeneratePrintDeviceCapabilities: isize,
    fpPrintSupportOperation: isize,
    fpIppCreateJobOnPrinter: isize,
    fpIppGetJobAttributes: isize,
    fpIppSetJobAttributes: isize,
    fpIppGetPrinterAttributes: isize,
    fpIppSetPrinterAttributes: isize,
};

pub const PRINTPROCESSOROPENDATA = extern struct {
    pDevMode: ?*DEVMODEA,
    pDatatype: ?PWSTR,
    pParameters: ?PWSTR,
    pDocumentName: ?PWSTR,
    JobId: u32,
    pOutputFile: ?PWSTR,
    pPrinterName: ?PWSTR,
};

pub const MONITORREG = extern struct {
    cbSize: u32,
    fpCreateKey: isize,
    fpOpenKey: isize,
    fpCloseKey: isize,
    fpDeleteKey: isize,
    fpEnumKey: isize,
    fpQueryInfoKey: isize,
    fpSetValue: isize,
    fpDeleteValue: isize,
    fpEnumValue: isize,
    fpQueryValue: isize,
};

pub const MONITORINIT = extern struct {
    cbSize: u32,
    hSpooler: ?HANDLE,
    hckRegistryRoot: ?HKEY,
    pMonitorReg: ?*MONITORREG,
    bLocal: BOOL,
    pszServerName: ?[*:0]const u16,
};

pub const MONITOR = extern struct {
    pfnEnumPorts: isize,
    pfnOpenPort: isize,
    pfnOpenPortEx: isize,
    pfnStartDocPort: isize,
    pfnWritePort: isize,
    pfnReadPort: isize,
    pfnEndDocPort: isize,
    pfnClosePort: isize,
    pfnAddPort: isize,
    pfnAddPortEx: isize,
    pfnConfigurePort: isize,
    pfnDeletePort: isize,
    pfnGetPrinterDataFromPort: isize,
    pfnSetPortTimeOuts: isize,
    pfnXcvOpenPort: isize,
    pfnXcvDataPort: isize,
    pfnXcvClosePort: isize,
};

pub const MONITOREX = extern struct {
    dwMonitorSize: u32,
    Monitor: MONITOR,
};

pub const MONITOR2 = extern struct {
    cbSize: u32,
    pfnEnumPorts: isize,
    pfnOpenPort: isize,
    pfnOpenPortEx: isize,
    pfnStartDocPort: isize,
    pfnWritePort: isize,
    pfnReadPort: isize,
    pfnEndDocPort: isize,
    pfnClosePort: isize,
    pfnAddPort: isize,
    pfnAddPortEx: isize,
    pfnConfigurePort: isize,
    pfnDeletePort: isize,
    pfnGetPrinterDataFromPort: isize,
    pfnSetPortTimeOuts: isize,
    pfnXcvOpenPort: isize,
    pfnXcvDataPort: isize,
    pfnXcvClosePort: isize,
    pfnShutdown: isize,
    pfnSendRecvBidiDataFromPort: isize,
    pfnNotifyUsedPorts: isize,
    pfnNotifyUnusedPorts: isize,
    pfnPowerEvent: isize,
};

pub const MONITORUI = extern struct {
    dwMonitorUISize: u32,
    pfnAddPortUI: isize,
    pfnConfigurePortUI: isize,
    pfnDeletePortUI: isize,
};

pub const ROUTER_NOTIFY_CALLBACK = *const fn (
    dw_command: u32,
    p_context: ?*anyopaque,
    dw_color: u32,
    p_nofity_info: ?*PRINTER_NOTIFY_INFO,
    fdw_flags: u32,
    pdw_result: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const NOTIFICATION_CALLBACK_COMMANDS = enum(i32) {
    NOTIFY = 0,
    CONTEXT_ACQUIRE = 1,
    CONTEXT_RELEASE = 2,
};
pub const NOTIFICATION_COMMAND_NOTIFY = NOTIFICATION_CALLBACK_COMMANDS.NOTIFY;
pub const NOTIFICATION_COMMAND_CONTEXT_ACQUIRE = NOTIFICATION_CALLBACK_COMMANDS.CONTEXT_ACQUIRE;
pub const NOTIFICATION_COMMAND_CONTEXT_RELEASE = NOTIFICATION_CALLBACK_COMMANDS.CONTEXT_RELEASE;

pub const NOTIFICATION_CONFIG_1 = extern struct {
    cbSize: u32,
    fdwFlags: u32,
    pfnNotifyCallback: ?ROUTER_NOTIFY_CALLBACK,
    pContext: ?*anyopaque,
};

pub const NOTIFICATION_CONFIG_FLAGS = enum(i32) {
    CREATE_EVENT = 1,
    REGISTER_CALLBACK = 2,
    EVENT_TRIGGER = 4,
    ASYNC_CHANNEL = 8,
};
pub const NOTIFICATION_CONFIG_CREATE_EVENT = NOTIFICATION_CONFIG_FLAGS.CREATE_EVENT;
pub const NOTIFICATION_CONFIG_REGISTER_CALLBACK = NOTIFICATION_CONFIG_FLAGS.REGISTER_CALLBACK;
pub const NOTIFICATION_CONFIG_EVENT_TRIGGER = NOTIFICATION_CONFIG_FLAGS.EVENT_TRIGGER;
pub const NOTIFICATION_CONFIG_ASYNC_CHANNEL = NOTIFICATION_CONFIG_FLAGS.ASYNC_CHANNEL;

pub const UI_TYPE = enum(i32) {
    x = 0,
};
pub const kMessageBox = UI_TYPE.x;

pub const MESSAGEBOX_PARAMS = extern struct {
    cbSize: u32,
    pTitle: ?PWSTR,
    pMessage: ?PWSTR,
    Style: u32,
    dwTimeout: u32,
    bWait: BOOL,
};

pub const SHOWUIPARAMS = extern struct {
    UIType: UI_TYPE,
    MessageBoxParams: MESSAGEBOX_PARAMS,
};

const IID_IXpsRasterizerNotificationCallback_Value = Guid.initString("9ab8fd0d-cb94-49c2-9cb0-97ec1d5469d2");
pub const IID_IXpsRasterizerNotificationCallback = &IID_IXpsRasterizerNotificationCallback_Value;
pub const IXpsRasterizerNotificationCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Continue: *const fn (
            self: *const IXpsRasterizerNotificationCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn @"continue"(self: *const T) HRESULT {
                return @as(*const IXpsRasterizerNotificationCallback.VTable, @ptrCast(self.vtable)).Continue(@as(*const IXpsRasterizerNotificationCallback, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const XPSRAS_RENDERING_MODE = enum(i32) {
    NTIALIASED = 0,
    LIASED = 1,
};
pub const XPSRAS_RENDERING_MODE_ANTIALIASED = XPSRAS_RENDERING_MODE.NTIALIASED;
pub const XPSRAS_RENDERING_MODE_ALIASED = XPSRAS_RENDERING_MODE.LIASED;

const IID_IXpsRasterizer_Value = Guid.initString("7567cfc8-c156-47a8-9dac-11a2ae5bdd6b");
pub const IID_IXpsRasterizer = &IID_IXpsRasterizer_Value;
pub const IXpsRasterizer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RasterizeRect: *const fn (
            self: *const IXpsRasterizer,
            x: i32,
            y: i32,
            width: i32,
            height: i32,
            notification_callback: ?*IXpsRasterizerNotificationCallback,
            bitmap: ?*?*IWICBitmap,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMinimalLineWidth: *const fn (
            self: *const IXpsRasterizer,
            width: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn rasterizeRect(self: *const T, x_: i32, y_: i32, width_: i32, height_: i32, notification_callback_: ?*IXpsRasterizerNotificationCallback, bitmap_: ?*?*IWICBitmap) HRESULT {
                return @as(*const IXpsRasterizer.VTable, @ptrCast(self.vtable)).RasterizeRect(@as(*const IXpsRasterizer, @ptrCast(self)), x_, y_, width_, height_, notification_callback_, bitmap_);
            }
            pub inline fn setMinimalLineWidth(self: *const T, width_: i32) HRESULT {
                return @as(*const IXpsRasterizer.VTable, @ptrCast(self.vtable)).SetMinimalLineWidth(@as(*const IXpsRasterizer, @ptrCast(self)), width_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXpsRasterizationFactory_Value = Guid.initString("e094808a-24c6-482b-a3a7-c21ac9b55f17");
pub const IID_IXpsRasterizationFactory = &IID_IXpsRasterizationFactory_Value;
pub const IXpsRasterizationFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateRasterizer: *const fn (
            self: *const IXpsRasterizationFactory,
            xps_page: ?*IXpsOMPage,
            d_p_i: f32,
            non_text_rendering_mode: XPSRAS_RENDERING_MODE,
            text_rendering_mode: XPSRAS_RENDERING_MODE,
            pp_i_x_p_s_rasterizer: ?*?*IXpsRasterizer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createRasterizer(self: *const T, xps_page_: ?*IXpsOMPage, d_p_i_: f32, non_text_rendering_mode_: XPSRAS_RENDERING_MODE, text_rendering_mode_: XPSRAS_RENDERING_MODE, pp_i_x_p_s_rasterizer_: ?*?*IXpsRasterizer) HRESULT {
                return @as(*const IXpsRasterizationFactory.VTable, @ptrCast(self.vtable)).CreateRasterizer(@as(*const IXpsRasterizationFactory, @ptrCast(self)), xps_page_, d_p_i_, non_text_rendering_mode_, text_rendering_mode_, pp_i_x_p_s_rasterizer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const XPSRAS_PIXEL_FORMAT = enum(i32) {
    @"32BPP_PBGRA_UINT_SRGB" = 1,
    @"64BPP_PRGBA_HALF_SCRGB" = 2,
    @"128BPP_PRGBA_FLOAT_SCRGB" = 3,
};
pub const XPSRAS_PIXEL_FORMAT_32BPP_PBGRA_UINT_SRGB = XPSRAS_PIXEL_FORMAT.@"32BPP_PBGRA_UINT_SRGB";
pub const XPSRAS_PIXEL_FORMAT_64BPP_PRGBA_HALF_SCRGB = XPSRAS_PIXEL_FORMAT.@"64BPP_PRGBA_HALF_SCRGB";
pub const XPSRAS_PIXEL_FORMAT_128BPP_PRGBA_FLOAT_SCRGB = XPSRAS_PIXEL_FORMAT.@"128BPP_PRGBA_FLOAT_SCRGB";

const IID_IXpsRasterizationFactory1_Value = Guid.initString("2d6e5f77-6414-4a1e-a8e0-d4194ce6a26f");
pub const IID_IXpsRasterizationFactory1 = &IID_IXpsRasterizationFactory1_Value;
pub const IXpsRasterizationFactory1 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateRasterizer: *const fn (
            self: *const IXpsRasterizationFactory1,
            xps_page: ?*IXpsOMPage,
            d_p_i: f32,
            non_text_rendering_mode: XPSRAS_RENDERING_MODE,
            text_rendering_mode: XPSRAS_RENDERING_MODE,
            pixel_format: XPSRAS_PIXEL_FORMAT,
            pp_i_x_p_s_rasterizer: ?*?*IXpsRasterizer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createRasterizer(self: *const T, xps_page_: ?*IXpsOMPage, d_p_i_: f32, non_text_rendering_mode_: XPSRAS_RENDERING_MODE, text_rendering_mode_: XPSRAS_RENDERING_MODE, pixel_format_: XPSRAS_PIXEL_FORMAT, pp_i_x_p_s_rasterizer_: ?*?*IXpsRasterizer) HRESULT {
                return @as(*const IXpsRasterizationFactory1.VTable, @ptrCast(self.vtable)).CreateRasterizer(@as(*const IXpsRasterizationFactory1, @ptrCast(self)), xps_page_, d_p_i_, non_text_rendering_mode_, text_rendering_mode_, pixel_format_, pp_i_x_p_s_rasterizer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const XPSRAS_BACKGROUND_COLOR = enum(i32) {
    TRANSPARENT = 0,
    OPAQUE = 1,
};
pub const XPSRAS_BACKGROUND_COLOR_TRANSPARENT = XPSRAS_BACKGROUND_COLOR.TRANSPARENT;
pub const XPSRAS_BACKGROUND_COLOR_OPAQUE = XPSRAS_BACKGROUND_COLOR.OPAQUE;

const IID_IXpsRasterizationFactory2_Value = Guid.initString("9c16ce3e-10f5-41fd-9ddc-6826669c2ff6");
pub const IID_IXpsRasterizationFactory2 = &IID_IXpsRasterizationFactory2_Value;
pub const IXpsRasterizationFactory2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateRasterizer: *const fn (
            self: *const IXpsRasterizationFactory2,
            xps_page: ?*IXpsOMPage,
            d_p_i_x: f32,
            d_p_i_y: f32,
            non_text_rendering_mode: XPSRAS_RENDERING_MODE,
            text_rendering_mode: XPSRAS_RENDERING_MODE,
            pixel_format: XPSRAS_PIXEL_FORMAT,
            background_color: XPSRAS_BACKGROUND_COLOR,
            pp_i_xps_rasterizer: ?*?*IXpsRasterizer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createRasterizer(self: *const T, xps_page_: ?*IXpsOMPage, d_p_i_x_: f32, d_p_i_y_: f32, non_text_rendering_mode_: XPSRAS_RENDERING_MODE, text_rendering_mode_: XPSRAS_RENDERING_MODE, pixel_format_: XPSRAS_PIXEL_FORMAT, background_color_: XPSRAS_BACKGROUND_COLOR, pp_i_xps_rasterizer_: ?*?*IXpsRasterizer) HRESULT {
                return @as(*const IXpsRasterizationFactory2.VTable, @ptrCast(self.vtable)).CreateRasterizer(@as(*const IXpsRasterizationFactory2, @ptrCast(self)), xps_page_, d_p_i_x_, d_p_i_y_, non_text_rendering_mode_, text_rendering_mode_, pixel_format_, background_color_, pp_i_xps_rasterizer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PageCountType = enum(i32) {
    FinalPageCount = 0,
    IntermediatePageCount = 1,
};
pub const FinalPageCount = PageCountType.FinalPageCount;
pub const IntermediatePageCount = PageCountType.IntermediatePageCount;

const IID_IPrintPreviewDxgiPackageTarget_Value = Guid.initString("1a6dd0ad-1e2a-4e99-a5ba-91f17818290e");
pub const IID_IPrintPreviewDxgiPackageTarget = &IID_IPrintPreviewDxgiPackageTarget_Value;
pub const IPrintPreviewDxgiPackageTarget = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetJobPageCount: *const fn (
            self: *const IPrintPreviewDxgiPackageTarget,
            count_type: PageCountType,
            count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawPage: *const fn (
            self: *const IPrintPreviewDxgiPackageTarget,
            job_page_number: u32,
            page_image: ?*IDXGISurface,
            dpi_x: f32,
            dpi_y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvalidatePreview: *const fn (
            self: *const IPrintPreviewDxgiPackageTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setJobPageCount(self: *const T, count_type_: PageCountType, count_: u32) HRESULT {
                return @as(*const IPrintPreviewDxgiPackageTarget.VTable, @ptrCast(self.vtable)).SetJobPageCount(@as(*const IPrintPreviewDxgiPackageTarget, @ptrCast(self)), count_type_, count_);
            }
            pub inline fn drawPage(self: *const T, job_page_number_: u32, page_image_: ?*IDXGISurface, dpi_x_: f32, dpi_y_: f32) HRESULT {
                return @as(*const IPrintPreviewDxgiPackageTarget.VTable, @ptrCast(self.vtable)).DrawPage(@as(*const IPrintPreviewDxgiPackageTarget, @ptrCast(self)), job_page_number_, page_image_, dpi_x_, dpi_y_);
            }
            pub inline fn invalidatePreview(self: *const T) HRESULT {
                return @as(*const IPrintPreviewDxgiPackageTarget.VTable, @ptrCast(self.vtable)).InvalidatePreview(@as(*const IPrintPreviewDxgiPackageTarget, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const _SPLCLIENT_INFO_2_V2 = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        hSplPrinter: u64,
    },
    .X86 => extern struct {
        hSplPrinter: u32,
    },
};

//--------------------------------------------------------------------------------
// Section: Functions (214)
//--------------------------------------------------------------------------------
pub extern "compstui" fn CommonPropertySheetUIA(
    h_wnd_owner: ?HWND,
    pfn_prop_sheet_u_i: ?PFNPROPSHEETUI,
    l_param: LPARAM,
    p_result: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "compstui" fn CommonPropertySheetUIW(
    h_wnd_owner: ?HWND,
    pfn_prop_sheet_u_i: ?PFNPROPSHEETUI,
    l_param: LPARAM,
    p_result: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "compstui" fn GetCPSUIUserData(
    h_dlg: ?HWND,
) callconv(@import("std").os.windows.WINAPI) usize;

pub extern "compstui" fn SetCPSUIUserData(
    h_dlg: ?HWND,
    c_p_s_u_i_user_data: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn EnumPrintersA(
    flags: u32,
    name: ?PSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_printer_enum: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
    pc_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn EnumPrintersW(
    flags: u32,
    name: ?PWSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_printer_enum: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
    pc_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn GetSpoolFileHandle(
    h_printer: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

pub extern "winspool.drv" fn CommitSpoolData(
    h_printer: ?HANDLE,
    h_spool_file: ?HANDLE,
    cb_commit: u32,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

pub extern "winspool.drv" fn CloseSpoolFileHandle(
    h_printer: ?HANDLE,
    h_spool_file: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn OpenPrinterA(
    p_printer_name: ?PSTR,
    ph_printer: ?*?HANDLE,
    p_default: ?*PRINTER_DEFAULTSA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn OpenPrinterW(
    p_printer_name: ?PWSTR,
    ph_printer: ?*?HANDLE,
    p_default: ?*PRINTER_DEFAULTSW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn ResetPrinterA(
    h_printer: ?HANDLE,
    p_default: ?*PRINTER_DEFAULTSA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn ResetPrinterW(
    h_printer: ?HANDLE,
    p_default: ?*PRINTER_DEFAULTSW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn SetJobA(
    h_printer: ?HANDLE,
    job_id: u32,
    level: u32,
    p_job: ?*u8,
    command: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn SetJobW(
    h_printer: ?HANDLE,
    job_id: u32,
    level: u32,
    p_job: ?*u8,
    command: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn GetJobA(
    h_printer: ?HANDLE,
    job_id: u32,
    level: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_job: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn GetJobW(
    h_printer: ?HANDLE,
    job_id: u32,
    level: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_job: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn EnumJobsA(
    h_printer: ?HANDLE,
    first_job: u32,
    no_jobs: u32,
    level: u32,
    // TODO: what to do with BytesParamIndex 5?
    p_job: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
    pc_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn EnumJobsW(
    h_printer: ?HANDLE,
    first_job: u32,
    no_jobs: u32,
    level: u32,
    // TODO: what to do with BytesParamIndex 5?
    p_job: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
    pc_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AddPrinterA(
    p_name: ?PSTR,
    level: u32,
    p_printer: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

pub extern "winspool.drv" fn AddPrinterW(
    p_name: ?PWSTR,
    level: u32,
    p_printer: ?*u8,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

pub extern "winspool.drv" fn DeletePrinter(
    h_printer: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn SetPrinterA(
    h_printer: ?HANDLE,
    level: u32,
    p_printer: ?*u8,
    command: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn SetPrinterW(
    h_printer: ?HANDLE,
    level: u32,
    p_printer: ?*u8,
    command: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn GetPrinterA(
    h_printer: ?HANDLE,
    level: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_printer: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn GetPrinterW(
    h_printer: ?HANDLE,
    level: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_printer: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AddPrinterDriverA(
    p_name: ?PSTR,
    level: u32,
    p_driver_info: ?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AddPrinterDriverW(
    p_name: ?PWSTR,
    level: u32,
    p_driver_info: ?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AddPrinterDriverExA(
    p_name: ?PSTR,
    level: u32,
    lpb_driver_info: ?*u8,
    dw_file_copy_flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AddPrinterDriverExW(
    p_name: ?PWSTR,
    level: u32,
    lpb_driver_info: ?*u8,
    dw_file_copy_flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn EnumPrinterDriversA(
    p_name: ?PSTR,
    p_environment: ?PSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_driver_info: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
    pc_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn EnumPrinterDriversW(
    p_name: ?PWSTR,
    p_environment: ?PWSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_driver_info: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
    pc_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn GetPrinterDriverA(
    h_printer: ?HANDLE,
    p_environment: ?PSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_driver_info: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn GetPrinterDriverW(
    h_printer: ?HANDLE,
    p_environment: ?PWSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_driver_info: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn GetPrinterDriverDirectoryA(
    p_name: ?PSTR,
    p_environment: ?PSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_driver_directory: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn GetPrinterDriverDirectoryW(
    p_name: ?PWSTR,
    p_environment: ?PWSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_driver_directory: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn DeletePrinterDriverA(
    p_name: ?PSTR,
    p_environment: ?PSTR,
    p_driver_name: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn DeletePrinterDriverW(
    p_name: ?PWSTR,
    p_environment: ?PWSTR,
    p_driver_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn DeletePrinterDriverExA(
    p_name: ?PSTR,
    p_environment: ?PSTR,
    p_driver_name: ?PSTR,
    dw_delete_flag: u32,
    dw_version_flag: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn DeletePrinterDriverExW(
    p_name: ?PWSTR,
    p_environment: ?PWSTR,
    p_driver_name: ?PWSTR,
    dw_delete_flag: u32,
    dw_version_flag: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AddPrintProcessorA(
    p_name: ?PSTR,
    p_environment: ?PSTR,
    p_path_name: ?PSTR,
    p_print_processor_name: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AddPrintProcessorW(
    p_name: ?PWSTR,
    p_environment: ?PWSTR,
    p_path_name: ?PWSTR,
    p_print_processor_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn EnumPrintProcessorsA(
    p_name: ?PSTR,
    p_environment: ?PSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_print_processor_info: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
    pc_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn EnumPrintProcessorsW(
    p_name: ?PWSTR,
    p_environment: ?PWSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_print_processor_info: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
    pc_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn GetPrintProcessorDirectoryA(
    p_name: ?PSTR,
    p_environment: ?PSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_print_processor_info: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn GetPrintProcessorDirectoryW(
    p_name: ?PWSTR,
    p_environment: ?PWSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_print_processor_info: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn EnumPrintProcessorDatatypesA(
    p_name: ?PSTR,
    p_print_processor_name: ?PSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_datatypes: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
    pc_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn EnumPrintProcessorDatatypesW(
    p_name: ?PWSTR,
    p_print_processor_name: ?PWSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_datatypes: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
    pc_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn DeletePrintProcessorA(
    p_name: ?PSTR,
    p_environment: ?PSTR,
    p_print_processor_name: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn DeletePrintProcessorW(
    p_name: ?PWSTR,
    p_environment: ?PWSTR,
    p_print_processor_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn StartDocPrinterA(
    h_printer: ?HANDLE,
    level: u32,
    p_doc_info: ?*DOC_INFO_1A,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn StartDocPrinterW(
    h_printer: ?HANDLE,
    level: u32,
    p_doc_info: ?*DOC_INFO_1W,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn StartPagePrinter(
    h_printer: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn WritePrinter(
    h_printer: ?HANDLE,
    // TODO: what to do with BytesParamIndex 2?
    p_buf: ?*anyopaque,
    cb_buf: u32,
    pc_written: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn FlushPrinter(
    h_printer: ?HANDLE,
    // TODO: what to do with BytesParamIndex 2?
    p_buf: ?*anyopaque,
    cb_buf: u32,
    pc_written: ?*u32,
    c_sleep: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn EndPagePrinter(
    h_printer: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AbortPrinter(
    h_printer: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn ReadPrinter(
    h_printer: ?HANDLE,
    // TODO: what to do with BytesParamIndex 2?
    p_buf: ?*anyopaque,
    cb_buf: u32,
    p_no_bytes_read: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn EndDocPrinter(
    h_printer: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AddJobA(
    h_printer: ?HANDLE,
    level: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_data: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AddJobW(
    h_printer: ?HANDLE,
    level: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_data: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn ScheduleJob(
    h_printer: ?HANDLE,
    job_id: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn PrinterProperties(
    h_wnd: ?HWND,
    h_printer: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn DocumentPropertiesA(
    h_wnd: ?HWND,
    h_printer: ?HANDLE,
    p_device_name: ?PSTR,
    p_dev_mode_output: ?*DEVMODEA,
    p_dev_mode_input: ?*DEVMODEA,
    f_mode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "winspool.drv" fn DocumentPropertiesW(
    h_wnd: ?HWND,
    h_printer: ?HANDLE,
    p_device_name: ?PWSTR,
    p_dev_mode_output: ?*DEVMODEW,
    p_dev_mode_input: ?*DEVMODEW,
    f_mode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "winspool.drv" fn AdvancedDocumentPropertiesA(
    h_wnd: ?HWND,
    h_printer: ?HANDLE,
    p_device_name: ?PSTR,
    p_dev_mode_output: ?*DEVMODEA,
    p_dev_mode_input: ?*DEVMODEA,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "winspool.drv" fn AdvancedDocumentPropertiesW(
    h_wnd: ?HWND,
    h_printer: ?HANDLE,
    p_device_name: ?PWSTR,
    p_dev_mode_output: ?*DEVMODEW,
    p_dev_mode_input: ?*DEVMODEW,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "winspool.drv" fn ExtDeviceMode(
    h_wnd: ?HWND,
    h_inst: ?HANDLE,
    p_dev_mode_output: ?*DEVMODEA,
    p_device_name: ?PSTR,
    p_port: ?PSTR,
    p_dev_mode_input: ?*DEVMODEA,
    p_profile: ?PSTR,
    f_mode: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "winspool.drv" fn GetPrinterDataA(
    h_printer: ?HANDLE,
    p_value_name: ?PSTR,
    p_type: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    p_data: ?*u8,
    n_size: u32,
    pcb_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn GetPrinterDataW(
    h_printer: ?HANDLE,
    p_value_name: ?PWSTR,
    p_type: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    p_data: ?*u8,
    n_size: u32,
    pcb_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn GetPrinterDataExA(
    h_printer: ?HANDLE,
    p_key_name: ?[*:0]const u8,
    p_value_name: ?[*:0]const u8,
    p_type: ?*u32,
    // TODO: what to do with BytesParamIndex 5?
    p_data: ?*u8,
    n_size: u32,
    pcb_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn GetPrinterDataExW(
    h_printer: ?HANDLE,
    p_key_name: ?[*:0]const u16,
    p_value_name: ?[*:0]const u16,
    p_type: ?*u32,
    // TODO: what to do with BytesParamIndex 5?
    p_data: ?*u8,
    n_size: u32,
    pcb_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn EnumPrinterDataA(
    h_printer: ?HANDLE,
    dw_index: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_value_name: ?PSTR,
    cb_value_name: u32,
    pcb_value_name: ?*u32,
    p_type: ?*u32,
    p_data: ?[*:0]u8,
    cb_data: u32,
    pcb_data: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn EnumPrinterDataW(
    h_printer: ?HANDLE,
    dw_index: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_value_name: ?PWSTR,
    cb_value_name: u32,
    pcb_value_name: ?*u32,
    p_type: ?*u32,
    p_data: ?[*:0]u8,
    cb_data: u32,
    pcb_data: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn EnumPrinterDataExA(
    h_printer: ?HANDLE,
    p_key_name: ?[*:0]const u8,
    // TODO: what to do with BytesParamIndex 3?
    p_enum_values: ?*u8,
    cb_enum_values: u32,
    pcb_enum_values: ?*u32,
    pn_enum_values: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn EnumPrinterDataExW(
    h_printer: ?HANDLE,
    p_key_name: ?[*:0]const u16,
    // TODO: what to do with BytesParamIndex 3?
    p_enum_values: ?*u8,
    cb_enum_values: u32,
    pcb_enum_values: ?*u32,
    pn_enum_values: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn EnumPrinterKeyA(
    h_printer: ?HANDLE,
    p_key_name: ?[*:0]const u8,
    // TODO: what to do with BytesParamIndex 3?
    p_subkey: ?PSTR,
    cb_subkey: u32,
    pcb_subkey: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn EnumPrinterKeyW(
    h_printer: ?HANDLE,
    p_key_name: ?[*:0]const u16,
    // TODO: what to do with BytesParamIndex 3?
    p_subkey: ?PWSTR,
    cb_subkey: u32,
    pcb_subkey: ?*u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn SetPrinterDataA(
    h_printer: ?HANDLE,
    p_value_name: ?PSTR,
    type: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_data: ?*u8,
    cb_data: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn SetPrinterDataW(
    h_printer: ?HANDLE,
    p_value_name: ?PWSTR,
    type: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_data: ?*u8,
    cb_data: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn SetPrinterDataExA(
    h_printer: ?HANDLE,
    p_key_name: ?[*:0]const u8,
    p_value_name: ?[*:0]const u8,
    type: u32,
    // TODO: what to do with BytesParamIndex 5?
    p_data: ?*u8,
    cb_data: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn SetPrinterDataExW(
    h_printer: ?HANDLE,
    p_key_name: ?[*:0]const u16,
    p_value_name: ?[*:0]const u16,
    type: u32,
    // TODO: what to do with BytesParamIndex 5?
    p_data: ?*u8,
    cb_data: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn DeletePrinterDataA(
    h_printer: ?HANDLE,
    p_value_name: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn DeletePrinterDataW(
    h_printer: ?HANDLE,
    p_value_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn DeletePrinterDataExA(
    h_printer: ?HANDLE,
    p_key_name: ?[*:0]const u8,
    p_value_name: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn DeletePrinterDataExW(
    h_printer: ?HANDLE,
    p_key_name: ?[*:0]const u16,
    p_value_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn DeletePrinterKeyA(
    h_printer: ?HANDLE,
    p_key_name: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn DeletePrinterKeyW(
    h_printer: ?HANDLE,
    p_key_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn WaitForPrinterChange(
    h_printer: ?HANDLE,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn FindFirstPrinterChangeNotification(
    h_printer: ?HANDLE,
    fdw_filter: u32,
    fdw_options: u32,
    p_printer_notify_options: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

pub extern "winspool.drv" fn FindNextPrinterChangeNotification(
    h_change: ?HANDLE,
    pdw_change: ?*u32,
    pv_reserved: ?*anyopaque,
    pp_printer_notify_info: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn FreePrinterNotifyInfo(
    p_printer_notify_info: ?*PRINTER_NOTIFY_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn FindClosePrinterChangeNotification(
    h_change: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn PrinterMessageBoxA(
    h_printer: ?HANDLE,
    @"error": u32,
    h_wnd: ?HWND,
    p_text: ?PSTR,
    p_caption: ?PSTR,
    dw_type: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn PrinterMessageBoxW(
    h_printer: ?HANDLE,
    @"error": u32,
    h_wnd: ?HWND,
    p_text: ?PWSTR,
    p_caption: ?PWSTR,
    dw_type: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn ClosePrinter(
    h_printer: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AddFormA(
    h_printer: ?HANDLE,
    level: u32,
    p_form: ?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AddFormW(
    h_printer: ?HANDLE,
    level: u32,
    p_form: ?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn DeleteFormA(
    h_printer: ?HANDLE,
    p_form_name: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn DeleteFormW(
    h_printer: ?HANDLE,
    p_form_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn GetFormA(
    h_printer: ?HANDLE,
    p_form_name: ?PSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_form: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn GetFormW(
    h_printer: ?HANDLE,
    p_form_name: ?PWSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_form: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn SetFormA(
    h_printer: ?HANDLE,
    p_form_name: ?PSTR,
    level: u32,
    p_form: ?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn SetFormW(
    h_printer: ?HANDLE,
    p_form_name: ?PWSTR,
    level: u32,
    p_form: ?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn EnumFormsA(
    h_printer: ?HANDLE,
    level: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_form: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
    pc_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn EnumFormsW(
    h_printer: ?HANDLE,
    level: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_form: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
    pc_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn EnumMonitorsA(
    p_name: ?PSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_monitor: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
    pc_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn EnumMonitorsW(
    p_name: ?PWSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_monitor: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
    pc_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AddMonitorA(
    p_name: ?PSTR,
    level: u32,
    p_monitors: ?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AddMonitorW(
    p_name: ?PWSTR,
    level: u32,
    p_monitors: ?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn DeleteMonitorA(
    p_name: ?PSTR,
    p_environment: ?PSTR,
    p_monitor_name: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn DeleteMonitorW(
    p_name: ?PWSTR,
    p_environment: ?PWSTR,
    p_monitor_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn EnumPortsA(
    p_name: ?PSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_port: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
    pc_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn EnumPortsW(
    p_name: ?PWSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_port: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
    pc_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AddPortA(
    p_name: ?PSTR,
    h_wnd: ?HWND,
    p_monitor_name: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AddPortW(
    p_name: ?PWSTR,
    h_wnd: ?HWND,
    p_monitor_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn ConfigurePortA(
    p_name: ?PSTR,
    h_wnd: ?HWND,
    p_port_name: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn ConfigurePortW(
    p_name: ?PWSTR,
    h_wnd: ?HWND,
    p_port_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn DeletePortA(
    p_name: ?PSTR,
    h_wnd: ?HWND,
    p_port_name: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn DeletePortW(
    p_name: ?PWSTR,
    h_wnd: ?HWND,
    p_port_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn XcvDataW(
    h_xcv: ?HANDLE,
    psz_data_name: ?[*:0]const u16,
    // TODO: what to do with BytesParamIndex 3?
    p_input_data: ?*u8,
    cb_input_data: u32,
    // TODO: what to do with BytesParamIndex 5?
    p_output_data: ?*u8,
    cb_output_data: u32,
    pcb_output_needed: ?*u32,
    pdw_status: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn GetDefaultPrinterA(
    psz_buffer: ?[*:0]u8,
    pcch_buffer: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn GetDefaultPrinterW(
    psz_buffer: ?[*:0]u16,
    pcch_buffer: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn SetDefaultPrinterA(
    psz_printer: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn SetDefaultPrinterW(
    psz_printer: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn SetPortA(
    p_name: ?PSTR,
    p_port_name: ?PSTR,
    dw_level: u32,
    p_port_info: ?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn SetPortW(
    p_name: ?PWSTR,
    p_port_name: ?PWSTR,
    dw_level: u32,
    p_port_info: ?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AddPrinterConnectionA(
    p_name: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AddPrinterConnectionW(
    p_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn DeletePrinterConnectionA(
    p_name: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn DeletePrinterConnectionW(
    p_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn ConnectToPrinterDlg(
    hwnd: ?HWND,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

pub extern "winspool.drv" fn AddPrintProvidorA(
    p_name: ?PSTR,
    level: u32,
    p_providor_info: ?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AddPrintProvidorW(
    p_name: ?PWSTR,
    level: u32,
    p_providor_info: ?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn DeletePrintProvidorA(
    p_name: ?PSTR,
    p_environment: ?PSTR,
    p_print_providor_name: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn DeletePrintProvidorW(
    p_name: ?PWSTR,
    p_environment: ?PWSTR,
    p_print_providor_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn IsValidDevmodeA(
    p_devmode: ?*DEVMODEA,
    devmode_size: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn IsValidDevmodeW(
    p_devmode: ?*DEVMODEW,
    devmode_size: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn OpenPrinter2A(
    p_printer_name: ?[*:0]const u8,
    ph_printer: ?*?HANDLE,
    p_default: ?*PRINTER_DEFAULTSA,
    p_options: ?*PRINTER_OPTIONSA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn OpenPrinter2W(
    p_printer_name: ?[*:0]const u16,
    ph_printer: ?*?HANDLE,
    p_default: ?*PRINTER_DEFAULTSW,
    p_options: ?*PRINTER_OPTIONSW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AddPrinterConnection2A(
    h_wnd: ?HWND,
    psz_name: ?[*:0]const u8,
    dw_level: u32,
    p_connection_info: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn AddPrinterConnection2W(
    h_wnd: ?HWND,
    psz_name: ?[*:0]const u16,
    dw_level: u32,
    p_connection_info: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn InstallPrinterDriverFromPackageA(
    psz_server: ?[*:0]const u8,
    psz_inf_path: ?[*:0]const u8,
    psz_driver_name: ?[*:0]const u8,
    psz_environment: ?[*:0]const u8,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "winspool.drv" fn InstallPrinterDriverFromPackageW(
    psz_server: ?[*:0]const u16,
    psz_inf_path: ?[*:0]const u16,
    psz_driver_name: ?[*:0]const u16,
    psz_environment: ?[*:0]const u16,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "winspool.drv" fn UploadPrinterDriverPackageA(
    psz_server: ?[*:0]const u8,
    psz_inf_path: ?[*:0]const u8,
    psz_environment: ?[*:0]const u8,
    dw_flags: u32,
    hwnd: ?HWND,
    psz_dest_inf_path: [*:0]u8,
    pcch_dest_inf_path: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "winspool.drv" fn UploadPrinterDriverPackageW(
    psz_server: ?[*:0]const u16,
    psz_inf_path: ?[*:0]const u16,
    psz_environment: ?[*:0]const u16,
    dw_flags: u32,
    hwnd: ?HWND,
    psz_dest_inf_path: [*:0]u16,
    pcch_dest_inf_path: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "winspool.drv" fn GetCorePrinterDriversA(
    psz_server: ?[*:0]const u8,
    psz_environment: ?[*:0]const u8,
    pszz_core_driver_dependencies: ?[*:0]const u8,
    c_core_printer_drivers: u32,
    p_core_printer_drivers: [*]CORE_PRINTER_DRIVERA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "winspool.drv" fn GetCorePrinterDriversW(
    psz_server: ?[*:0]const u16,
    psz_environment: ?[*:0]const u16,
    pszz_core_driver_dependencies: ?[*:0]const u16,
    c_core_printer_drivers: u32,
    p_core_printer_drivers: [*]CORE_PRINTER_DRIVERW,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// This function from dll 'winspool.drv' is being skipped because it has some sort of issue
pub fn CorePrinterDriverInstalledA() void {
    @panic("this function is not working");
}

// This function from dll 'winspool.drv' is being skipped because it has some sort of issue
pub fn CorePrinterDriverInstalledW() void {
    @panic("this function is not working");
}

pub extern "winspool.drv" fn GetPrinterDriverPackagePathA(
    psz_server: ?[*:0]const u8,
    psz_environment: ?[*:0]const u8,
    psz_language: ?[*:0]const u8,
    psz_package_i_d: ?[*:0]const u8,
    psz_driver_package_cab: ?[*:0]u8,
    cch_driver_package_cab: u32,
    pcch_required_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "winspool.drv" fn GetPrinterDriverPackagePathW(
    psz_server: ?[*:0]const u16,
    psz_environment: ?[*:0]const u16,
    psz_language: ?[*:0]const u16,
    psz_package_i_d: ?[*:0]const u16,
    psz_driver_package_cab: ?[*:0]u16,
    cch_driver_package_cab: u32,
    pcch_required_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "winspool.drv" fn DeletePrinterDriverPackageA(
    psz_server: ?[*:0]const u8,
    psz_inf_path: ?[*:0]const u8,
    psz_environment: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "winspool.drv" fn DeletePrinterDriverPackageW(
    psz_server: ?[*:0]const u16,
    psz_inf_path: ?[*:0]const u16,
    psz_environment: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "winspool.drv" fn ReportJobProcessingProgress(
    printer_handle: ?HANDLE,
    job_id: u32,
    job_operation: EPrintXPSJobOperation,
    job_progress: EPrintXPSJobProgress,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "winspool.drv" fn GetPrinterDriver2A(
    h_wnd: ?HWND,
    h_printer: ?HANDLE,
    p_environment: ?PSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 5?
    p_driver_info: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn GetPrinterDriver2W(
    h_wnd: ?HWND,
    h_printer: ?HANDLE,
    p_environment: ?PWSTR,
    level: u32,
    // TODO: what to do with BytesParamIndex 5?
    p_driver_info: ?*u8,
    cb_buf: u32,
    pcb_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn GetPrintExecutionData(
    p_data: ?*PRINT_EXECUTION_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn GetJobNamedPropertyValue(
    h_printer: ?HANDLE,
    job_id: u32,
    psz_name: ?[*:0]const u16,
    p_value: ?*PrintPropertyValue,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn FreePrintPropertyValue(
    p_value: ?*PrintPropertyValue,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "winspool.drv" fn FreePrintNamedPropertyArray(
    c_properties: u32,
    pp_properties: ?[*]?*PrintNamedProperty,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "winspool.drv" fn SetJobNamedProperty(
    h_printer: ?HANDLE,
    job_id: u32,
    p_property: ?*const PrintNamedProperty,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn DeleteJobNamedProperty(
    h_printer: ?HANDLE,
    job_id: u32,
    psz_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn EnumJobNamedProperties(
    h_printer: ?HANDLE,
    job_id: u32,
    pc_properties: ?*u32,
    pp_properties: ?*?*PrintNamedProperty,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "winspool.drv" fn GetPrintOutputInfo(
    h_wnd: ?HWND,
    psz_printer: ?[*:0]const u16,
    ph_file: ?*?HANDLE,
    ppsz_output_file: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "winspool.drv" fn DevQueryPrintEx(
    p_d_q_p_info: ?*DEVQUERYPRINT_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "winspool.drv" fn RegisterForPrintAsyncNotifications(
    psz_name: ?[*:0]const u16,
    p_notification_type: ?*Guid,
    e_user_filter: PrintAsyncNotifyUserFilter,
    e_conversation_style: PrintAsyncNotifyConversationStyle,
    p_callback: ?*IPrintAsyncNotifyCallback,
    ph_notify: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "winspool.drv" fn UnRegisterForPrintAsyncNotifications(
    param0: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "winspool.drv" fn CreatePrintAsyncNotifyChannel(
    psz_name: ?[*:0]const u16,
    p_notification_type: ?*Guid,
    e_user_filter: PrintAsyncNotifyUserFilter,
    e_conversation_style: PrintAsyncNotifyConversationStyle,
    p_callback: ?*IPrintAsyncNotifyCallback,
    pp_i_asynch_notification: ?*?*IPrintAsyncNotifyChannel,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "gdi32" fn GdiGetSpoolFileHandle(
    pwsz_printer_name: ?PWSTR,
    p_devmode: ?*DEVMODEW,
    pwsz_doc_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

pub extern "gdi32" fn GdiDeleteSpoolFileHandle(
    spool_file_handle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "gdi32" fn GdiGetPageCount(
    spool_file_handle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "gdi32" fn GdiGetDC(
    spool_file_handle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) ?HDC;

pub extern "gdi32" fn GdiGetPageHandle(
    spool_file_handle: ?HANDLE,
    page: u32,
    pdw_page_type: ?*u32,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

pub extern "gdi32" fn GdiStartDocEMF(
    spool_file_handle: ?HANDLE,
    p_doc_info: ?*DOCINFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "gdi32" fn GdiStartPageEMF(
    spool_file_handle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "gdi32" fn GdiPlayPageEMF(
    spool_file_handle: ?HANDLE,
    hemf: ?HANDLE,
    prect_document: ?*RECT,
    prect_border: ?*RECT,
    prect_clip: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "gdi32" fn GdiEndPageEMF(
    spool_file_handle: ?HANDLE,
    dw_optimization: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "gdi32" fn GdiEndDocEMF(
    spool_file_handle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "gdi32" fn GdiGetDevmodeForPage(
    spool_file_handle: ?HANDLE,
    dw_page_number: u32,
    p_curr_d_m: ?*?*DEVMODEW,
    p_last_d_m: ?*?*DEVMODEW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "gdi32" fn GdiResetDCEMF(
    spool_file_handle: ?HANDLE,
    p_curr_d_m: ?*DEVMODEW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "spoolss" fn GetJobAttributes(
    p_printer_name: ?PWSTR,
    p_devmode: ?*DEVMODEW,
    p_attribute_info: ?*ATTRIBUTE_INFO_3,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "spoolss" fn GetJobAttributesEx(
    p_printer_name: ?PWSTR,
    p_devmode: ?*DEVMODEW,
    dw_level: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_attribute_info: ?*u8,
    n_size: u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn CreatePrinterIC(
    h_printer: ?HANDLE,
    p_dev_mode: ?*DEVMODEW,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

pub extern "winspool.drv" fn PlayGdiScriptOnPrinterIC(
    h_printer_i_c: ?HANDLE,
    // TODO: what to do with BytesParamIndex 2?
    p_in: ?*u8,
    c_in: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_out: ?*u8,
    c_out: u32,
    ul: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn DeletePrinterIC(
    h_printer_i_c: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "winspool.drv" fn DevQueryPrint(
    h_printer: ?HANDLE,
    p_dev_mode: ?*DEVMODEA,
    p_res_i_d: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "spoolss" fn RevertToPrinterSelf() callconv(@import("std").os.windows.WINAPI) ?HANDLE;

pub extern "spoolss" fn ImpersonatePrinterClient(
    h_token: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "spoolss" fn ReplyPrinterChangeNotification(
    h_printer: ?HANDLE,
    fdw_change_flags: u32,
    pdw_result: ?*u32,
    p_printer_notify_info: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "spoolss" fn ReplyPrinterChangeNotificationEx(
    h_notify: ?HANDLE,
    dw_color: u32,
    fdw_flags: u32,
    pdw_result: ?*u32,
    p_printer_notify_info: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "spoolss" fn PartialReplyPrinterChangeNotification(
    h_printer: ?HANDLE,
    p_data_src: ?*PRINTER_NOTIFY_INFO_DATA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "spoolss" fn RouterAllocPrinterNotifyInfo(
    c_printer_notify_info_data: u32,
) callconv(@import("std").os.windows.WINAPI) ?*PRINTER_NOTIFY_INFO;

pub extern "spoolss" fn RouterFreePrinterNotifyInfo(
    p_info: ?*PRINTER_NOTIFY_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "spoolss" fn RouterAllocBidiResponseContainer(
    count: u32,
) callconv(@import("std").os.windows.WINAPI) ?*BIDI_RESPONSE_CONTAINER;

pub extern "spoolss" fn RouterAllocBidiMem(
    num_bytes: usize,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

pub extern "winspool.drv" fn RouterFreeBidiResponseContainer(
    p_data: ?*BIDI_RESPONSE_CONTAINER,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "spoolss" fn RouterFreeBidiMem(
    p_mem_pointer: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "spoolss" fn AppendPrinterNotifyInfoData(
    p_info_dest: ?*PRINTER_NOTIFY_INFO,
    p_data_src: ?*PRINTER_NOTIFY_INFO_DATA,
    fdw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "spoolss" fn CallRouterFindFirstPrinterChangeNotification(
    h_printer_r_p_c: ?HANDLE,
    fdw_filter_flags: u32,
    fdw_options: u32,
    h_notify: ?HANDLE,
    p_printer_notify_options: ?*PRINTER_NOTIFY_OPTIONS,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "spoolss" fn ProvidorFindFirstPrinterChangeNotification(
    h_printer: ?HANDLE,
    fdw_flags: u32,
    fdw_options: u32,
    h_notify: ?HANDLE,
    p_printer_notify_options: ?*anyopaque,
    pv_reserved1: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "spoolss" fn ProvidorFindClosePrinterChangeNotification(
    h_printer: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "spoolss" fn SpoolerFindFirstPrinterChangeNotification(
    h_printer: ?HANDLE,
    fdw_filter_flags: u32,
    fdw_options: u32,
    p_printer_notify_options: ?*anyopaque,
    pv_reserved: ?*anyopaque,
    p_notification_config: ?*anyopaque,
    ph_notify: ?*?HANDLE,
    ph_event: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "spoolss" fn SpoolerFindNextPrinterChangeNotification(
    h_printer: ?HANDLE,
    pfdw_change: ?*u32,
    p_printer_notify_options: ?*anyopaque,
    pp_printer_notify_info: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "spoolss" fn SpoolerRefreshPrinterChangeNotification(
    h_printer: ?HANDLE,
    dw_color: u32,
    p_options: ?*PRINTER_NOTIFY_OPTIONS,
    pp_info: ?*?*PRINTER_NOTIFY_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "spoolss" fn SpoolerFreePrinterNotifyInfo(
    p_info: ?*PRINTER_NOTIFY_INFO,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "spoolss" fn SpoolerFindClosePrinterChangeNotification(
    h_printer: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn SpoolerCopyFileEvent(
    psz_printer_name: ?PWSTR,
    psz_key: ?PWSTR,
    dw_copy_file_event: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn GenerateCopyFilePaths(
    psz_printer_name: ?[*:0]const u16,
    psz_directory: ?[*:0]const u16,
    p_spl_client_info: ?*u8,
    dw_level: u32,
    psz_source_dir: [*:0]u16,
    pcch_source_dir_size: ?*u32,
    psz_target_dir: [*:0]u16,
    pcch_target_dir_size: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "spoolss" fn SplPromptUIInUsersSession(
    h_printer: ?HANDLE,
    job_id: u32,
    p_u_i_params: ?*SHOWUIPARAMS,
    p_response: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "spoolss" fn SplIsSessionZero(
    h_printer: ?HANDLE,
    job_id: u32,
    p_is_session_zero: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "spoolss" fn AddPrintDeviceObject(
    h_printer: ?HANDLE,
    ph_device_object: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "spoolss" fn UpdatePrintDeviceObject(
    h_printer: ?HANDLE,
    h_device_object: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "spoolss" fn RemovePrintDeviceObject(
    h_device_object: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (103)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const PRINTER_INFO_1 = thismodule.PRINTER_INFO_1A;
        pub const PRINTER_INFO_2 = thismodule.PRINTER_INFO_2A;
        pub const PRINTER_INFO_4 = thismodule.PRINTER_INFO_4A;
        pub const PRINTER_INFO_5 = thismodule.PRINTER_INFO_5A;
        pub const PRINTER_INFO_7 = thismodule.PRINTER_INFO_7A;
        pub const PRINTER_INFO_8 = thismodule.PRINTER_INFO_8A;
        pub const PRINTER_INFO_9 = thismodule.PRINTER_INFO_9A;
        pub const JOB_INFO_1 = thismodule.JOB_INFO_1A;
        pub const JOB_INFO_2 = thismodule.JOB_INFO_2A;
        pub const JOB_INFO_4 = thismodule.JOB_INFO_4A;
        pub const ADDJOB_INFO_1 = thismodule.ADDJOB_INFO_1A;
        pub const DRIVER_INFO_1 = thismodule.DRIVER_INFO_1A;
        pub const DRIVER_INFO_2 = thismodule.DRIVER_INFO_2A;
        pub const DRIVER_INFO_3 = thismodule.DRIVER_INFO_3A;
        pub const DRIVER_INFO_4 = thismodule.DRIVER_INFO_4A;
        pub const DRIVER_INFO_5 = thismodule.DRIVER_INFO_5A;
        pub const DRIVER_INFO_6 = thismodule.DRIVER_INFO_6A;
        pub const DRIVER_INFO_8 = thismodule.DRIVER_INFO_8A;
        pub const DOC_INFO_1 = thismodule.DOC_INFO_1A;
        pub const FORM_INFO_1 = thismodule.FORM_INFO_1A;
        pub const FORM_INFO_2 = thismodule.FORM_INFO_2A;
        pub const DOC_INFO_2 = thismodule.DOC_INFO_2A;
        pub const DOC_INFO_3 = thismodule.DOC_INFO_3A;
        pub const PRINTPROCESSOR_INFO_1 = thismodule.PRINTPROCESSOR_INFO_1A;
        pub const PORT_INFO_1 = thismodule.PORT_INFO_1A;
        pub const PORT_INFO_2 = thismodule.PORT_INFO_2A;
        pub const PORT_INFO_3 = thismodule.PORT_INFO_3A;
        pub const MONITOR_INFO_1 = thismodule.MONITOR_INFO_1A;
        pub const MONITOR_INFO_2 = thismodule.MONITOR_INFO_2A;
        pub const DATATYPES_INFO_1 = thismodule.DATATYPES_INFO_1A;
        pub const PRINTER_DEFAULTS = thismodule.PRINTER_DEFAULTSA;
        pub const PRINTER_ENUM_VALUES = thismodule.PRINTER_ENUM_VALUESA;
        pub const PROVIDOR_INFO_1 = thismodule.PROVIDOR_INFO_1A;
        pub const PROVIDOR_INFO_2 = thismodule.PROVIDOR_INFO_2A;
        pub const PRINTER_OPTIONS = thismodule.PRINTER_OPTIONSA;
        pub const PRINTER_CONNECTION_INFO_1 = thismodule.PRINTER_CONNECTION_INFO_1A;
        pub const CORE_PRINTER_DRIVER = thismodule.CORE_PRINTER_DRIVERA;
        pub const CommonPropertySheetUI = thismodule.CommonPropertySheetUIA;
        pub const EnumPrinters = thismodule.EnumPrintersA;
        pub const OpenPrinter = thismodule.OpenPrinterA;
        pub const ResetPrinter = thismodule.ResetPrinterA;
        pub const SetJob = thismodule.SetJobA;
        pub const GetJob = thismodule.GetJobA;
        pub const EnumJobs = thismodule.EnumJobsA;
        pub const AddPrinter = thismodule.AddPrinterA;
        pub const SetPrinter = thismodule.SetPrinterA;
        pub const GetPrinter = thismodule.GetPrinterA;
        pub const AddPrinterDriver = thismodule.AddPrinterDriverA;
        pub const AddPrinterDriverEx = thismodule.AddPrinterDriverExA;
        pub const EnumPrinterDrivers = thismodule.EnumPrinterDriversA;
        pub const GetPrinterDriver = thismodule.GetPrinterDriverA;
        pub const GetPrinterDriverDirectory = thismodule.GetPrinterDriverDirectoryA;
        pub const DeletePrinterDriver = thismodule.DeletePrinterDriverA;
        pub const DeletePrinterDriverEx = thismodule.DeletePrinterDriverExA;
        pub const AddPrintProcessor = thismodule.AddPrintProcessorA;
        pub const EnumPrintProcessors = thismodule.EnumPrintProcessorsA;
        pub const GetPrintProcessorDirectory = thismodule.GetPrintProcessorDirectoryA;
        pub const EnumPrintProcessorDatatypes = thismodule.EnumPrintProcessorDatatypesA;
        pub const DeletePrintProcessor = thismodule.DeletePrintProcessorA;
        pub const StartDocPrinter = thismodule.StartDocPrinterA;
        pub const AddJob = thismodule.AddJobA;
        pub const DocumentProperties = thismodule.DocumentPropertiesA;
        pub const AdvancedDocumentProperties = thismodule.AdvancedDocumentPropertiesA;
        pub const GetPrinterData = thismodule.GetPrinterDataA;
        pub const GetPrinterDataEx = thismodule.GetPrinterDataExA;
        pub const EnumPrinterData = thismodule.EnumPrinterDataA;
        pub const EnumPrinterDataEx = thismodule.EnumPrinterDataExA;
        pub const EnumPrinterKey = thismodule.EnumPrinterKeyA;
        pub const SetPrinterData = thismodule.SetPrinterDataA;
        pub const SetPrinterDataEx = thismodule.SetPrinterDataExA;
        pub const DeletePrinterData = thismodule.DeletePrinterDataA;
        pub const DeletePrinterDataEx = thismodule.DeletePrinterDataExA;
        pub const DeletePrinterKey = thismodule.DeletePrinterKeyA;
        pub const PrinterMessageBox = thismodule.PrinterMessageBoxA;
        pub const AddForm = thismodule.AddFormA;
        pub const DeleteForm = thismodule.DeleteFormA;
        pub const GetForm = thismodule.GetFormA;
        pub const SetForm = thismodule.SetFormA;
        pub const EnumForms = thismodule.EnumFormsA;
        pub const EnumMonitors = thismodule.EnumMonitorsA;
        pub const AddMonitor = thismodule.AddMonitorA;
        pub const DeleteMonitor = thismodule.DeleteMonitorA;
        pub const EnumPorts = thismodule.EnumPortsA;
        pub const AddPort = thismodule.AddPortA;
        pub const ConfigurePort = thismodule.ConfigurePortA;
        pub const DeletePort = thismodule.DeletePortA;
        pub const GetDefaultPrinter = thismodule.GetDefaultPrinterA;
        pub const SetDefaultPrinter = thismodule.SetDefaultPrinterA;
        pub const SetPort = thismodule.SetPortA;
        pub const AddPrinterConnection = thismodule.AddPrinterConnectionA;
        pub const DeletePrinterConnection = thismodule.DeletePrinterConnectionA;
        pub const AddPrintProvidor = thismodule.AddPrintProvidorA;
        pub const DeletePrintProvidor = thismodule.DeletePrintProvidorA;
        pub const IsValidDevmode = thismodule.IsValidDevmodeA;
        pub const OpenPrinter2 = thismodule.OpenPrinter2A;
        pub const AddPrinterConnection2 = thismodule.AddPrinterConnection2A;
        pub const InstallPrinterDriverFromPackage = thismodule.InstallPrinterDriverFromPackageA;
        pub const UploadPrinterDriverPackage = thismodule.UploadPrinterDriverPackageA;
        pub const GetCorePrinterDrivers = thismodule.GetCorePrinterDriversA;
        pub const CorePrinterDriverInstalled = thismodule.CorePrinterDriverInstalledA;
        pub const GetPrinterDriverPackagePath = thismodule.GetPrinterDriverPackagePathA;
        pub const DeletePrinterDriverPackage = thismodule.DeletePrinterDriverPackageA;
        pub const GetPrinterDriver2 = thismodule.GetPrinterDriver2A;
    },
    .wide => struct {
        pub const PRINTER_INFO_1 = thismodule.PRINTER_INFO_1W;
        pub const PRINTER_INFO_2 = thismodule.PRINTER_INFO_2W;
        pub const PRINTER_INFO_4 = thismodule.PRINTER_INFO_4W;
        pub const PRINTER_INFO_5 = thismodule.PRINTER_INFO_5W;
        pub const PRINTER_INFO_7 = thismodule.PRINTER_INFO_7W;
        pub const PRINTER_INFO_8 = thismodule.PRINTER_INFO_8W;
        pub const PRINTER_INFO_9 = thismodule.PRINTER_INFO_9W;
        pub const JOB_INFO_1 = thismodule.JOB_INFO_1W;
        pub const JOB_INFO_2 = thismodule.JOB_INFO_2W;
        pub const JOB_INFO_4 = thismodule.JOB_INFO_4W;
        pub const ADDJOB_INFO_1 = thismodule.ADDJOB_INFO_1W;
        pub const DRIVER_INFO_1 = thismodule.DRIVER_INFO_1W;
        pub const DRIVER_INFO_2 = thismodule.DRIVER_INFO_2W;
        pub const DRIVER_INFO_3 = thismodule.DRIVER_INFO_3W;
        pub const DRIVER_INFO_4 = thismodule.DRIVER_INFO_4W;
        pub const DRIVER_INFO_5 = thismodule.DRIVER_INFO_5W;
        pub const DRIVER_INFO_6 = thismodule.DRIVER_INFO_6W;
        pub const DRIVER_INFO_8 = thismodule.DRIVER_INFO_8W;
        pub const DOC_INFO_1 = thismodule.DOC_INFO_1W;
        pub const FORM_INFO_1 = thismodule.FORM_INFO_1W;
        pub const FORM_INFO_2 = thismodule.FORM_INFO_2W;
        pub const DOC_INFO_2 = thismodule.DOC_INFO_2W;
        pub const DOC_INFO_3 = thismodule.DOC_INFO_3W;
        pub const PRINTPROCESSOR_INFO_1 = thismodule.PRINTPROCESSOR_INFO_1W;
        pub const PORT_INFO_1 = thismodule.PORT_INFO_1W;
        pub const PORT_INFO_2 = thismodule.PORT_INFO_2W;
        pub const PORT_INFO_3 = thismodule.PORT_INFO_3W;
        pub const MONITOR_INFO_1 = thismodule.MONITOR_INFO_1W;
        pub const MONITOR_INFO_2 = thismodule.MONITOR_INFO_2W;
        pub const DATATYPES_INFO_1 = thismodule.DATATYPES_INFO_1W;
        pub const PRINTER_DEFAULTS = thismodule.PRINTER_DEFAULTSW;
        pub const PRINTER_ENUM_VALUES = thismodule.PRINTER_ENUM_VALUESW;
        pub const PROVIDOR_INFO_1 = thismodule.PROVIDOR_INFO_1W;
        pub const PROVIDOR_INFO_2 = thismodule.PROVIDOR_INFO_2W;
        pub const PRINTER_OPTIONS = thismodule.PRINTER_OPTIONSW;
        pub const PRINTER_CONNECTION_INFO_1 = thismodule.PRINTER_CONNECTION_INFO_1W;
        pub const CORE_PRINTER_DRIVER = thismodule.CORE_PRINTER_DRIVERW;
        pub const CommonPropertySheetUI = thismodule.CommonPropertySheetUIW;
        pub const EnumPrinters = thismodule.EnumPrintersW;
        pub const OpenPrinter = thismodule.OpenPrinterW;
        pub const ResetPrinter = thismodule.ResetPrinterW;
        pub const SetJob = thismodule.SetJobW;
        pub const GetJob = thismodule.GetJobW;
        pub const EnumJobs = thismodule.EnumJobsW;
        pub const AddPrinter = thismodule.AddPrinterW;
        pub const SetPrinter = thismodule.SetPrinterW;
        pub const GetPrinter = thismodule.GetPrinterW;
        pub const AddPrinterDriver = thismodule.AddPrinterDriverW;
        pub const AddPrinterDriverEx = thismodule.AddPrinterDriverExW;
        pub const EnumPrinterDrivers = thismodule.EnumPrinterDriversW;
        pub const GetPrinterDriver = thismodule.GetPrinterDriverW;
        pub const GetPrinterDriverDirectory = thismodule.GetPrinterDriverDirectoryW;
        pub const DeletePrinterDriver = thismodule.DeletePrinterDriverW;
        pub const DeletePrinterDriverEx = thismodule.DeletePrinterDriverExW;
        pub const AddPrintProcessor = thismodule.AddPrintProcessorW;
        pub const EnumPrintProcessors = thismodule.EnumPrintProcessorsW;
        pub const GetPrintProcessorDirectory = thismodule.GetPrintProcessorDirectoryW;
        pub const EnumPrintProcessorDatatypes = thismodule.EnumPrintProcessorDatatypesW;
        pub const DeletePrintProcessor = thismodule.DeletePrintProcessorW;
        pub const StartDocPrinter = thismodule.StartDocPrinterW;
        pub const AddJob = thismodule.AddJobW;
        pub const DocumentProperties = thismodule.DocumentPropertiesW;
        pub const AdvancedDocumentProperties = thismodule.AdvancedDocumentPropertiesW;
        pub const GetPrinterData = thismodule.GetPrinterDataW;
        pub const GetPrinterDataEx = thismodule.GetPrinterDataExW;
        pub const EnumPrinterData = thismodule.EnumPrinterDataW;
        pub const EnumPrinterDataEx = thismodule.EnumPrinterDataExW;
        pub const EnumPrinterKey = thismodule.EnumPrinterKeyW;
        pub const SetPrinterData = thismodule.SetPrinterDataW;
        pub const SetPrinterDataEx = thismodule.SetPrinterDataExW;
        pub const DeletePrinterData = thismodule.DeletePrinterDataW;
        pub const DeletePrinterDataEx = thismodule.DeletePrinterDataExW;
        pub const DeletePrinterKey = thismodule.DeletePrinterKeyW;
        pub const PrinterMessageBox = thismodule.PrinterMessageBoxW;
        pub const AddForm = thismodule.AddFormW;
        pub const DeleteForm = thismodule.DeleteFormW;
        pub const GetForm = thismodule.GetFormW;
        pub const SetForm = thismodule.SetFormW;
        pub const EnumForms = thismodule.EnumFormsW;
        pub const EnumMonitors = thismodule.EnumMonitorsW;
        pub const AddMonitor = thismodule.AddMonitorW;
        pub const DeleteMonitor = thismodule.DeleteMonitorW;
        pub const EnumPorts = thismodule.EnumPortsW;
        pub const AddPort = thismodule.AddPortW;
        pub const ConfigurePort = thismodule.ConfigurePortW;
        pub const DeletePort = thismodule.DeletePortW;
        pub const GetDefaultPrinter = thismodule.GetDefaultPrinterW;
        pub const SetDefaultPrinter = thismodule.SetDefaultPrinterW;
        pub const SetPort = thismodule.SetPortW;
        pub const AddPrinterConnection = thismodule.AddPrinterConnectionW;
        pub const DeletePrinterConnection = thismodule.DeletePrinterConnectionW;
        pub const AddPrintProvidor = thismodule.AddPrintProvidorW;
        pub const DeletePrintProvidor = thismodule.DeletePrintProvidorW;
        pub const IsValidDevmode = thismodule.IsValidDevmodeW;
        pub const OpenPrinter2 = thismodule.OpenPrinter2W;
        pub const AddPrinterConnection2 = thismodule.AddPrinterConnection2W;
        pub const InstallPrinterDriverFromPackage = thismodule.InstallPrinterDriverFromPackageW;
        pub const UploadPrinterDriverPackage = thismodule.UploadPrinterDriverPackageW;
        pub const GetCorePrinterDrivers = thismodule.GetCorePrinterDriversW;
        pub const CorePrinterDriverInstalled = thismodule.CorePrinterDriverInstalledW;
        pub const GetPrinterDriverPackagePath = thismodule.GetPrinterDriverPackagePathW;
        pub const DeletePrinterDriverPackage = thismodule.DeletePrinterDriverPackageW;
        pub const GetPrinterDriver2 = thismodule.GetPrinterDriver2W;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const PRINTER_INFO_1 = *opaque {};
        pub const PRINTER_INFO_2 = *opaque {};
        pub const PRINTER_INFO_4 = *opaque {};
        pub const PRINTER_INFO_5 = *opaque {};
        pub const PRINTER_INFO_7 = *opaque {};
        pub const PRINTER_INFO_8 = *opaque {};
        pub const PRINTER_INFO_9 = *opaque {};
        pub const JOB_INFO_1 = *opaque {};
        pub const JOB_INFO_2 = *opaque {};
        pub const JOB_INFO_4 = *opaque {};
        pub const ADDJOB_INFO_1 = *opaque {};
        pub const DRIVER_INFO_1 = *opaque {};
        pub const DRIVER_INFO_2 = *opaque {};
        pub const DRIVER_INFO_3 = *opaque {};
        pub const DRIVER_INFO_4 = *opaque {};
        pub const DRIVER_INFO_5 = *opaque {};
        pub const DRIVER_INFO_6 = *opaque {};
        pub const DRIVER_INFO_8 = *opaque {};
        pub const DOC_INFO_1 = *opaque {};
        pub const FORM_INFO_1 = *opaque {};
        pub const FORM_INFO_2 = *opaque {};
        pub const DOC_INFO_2 = *opaque {};
        pub const DOC_INFO_3 = *opaque {};
        pub const PRINTPROCESSOR_INFO_1 = *opaque {};
        pub const PORT_INFO_1 = *opaque {};
        pub const PORT_INFO_2 = *opaque {};
        pub const PORT_INFO_3 = *opaque {};
        pub const MONITOR_INFO_1 = *opaque {};
        pub const MONITOR_INFO_2 = *opaque {};
        pub const DATATYPES_INFO_1 = *opaque {};
        pub const PRINTER_DEFAULTS = *opaque {};
        pub const PRINTER_ENUM_VALUES = *opaque {};
        pub const PROVIDOR_INFO_1 = *opaque {};
        pub const PROVIDOR_INFO_2 = *opaque {};
        pub const PRINTER_OPTIONS = *opaque {};
        pub const PRINTER_CONNECTION_INFO_1 = *opaque {};
        pub const CORE_PRINTER_DRIVER = *opaque {};
        pub const CommonPropertySheetUI = *opaque {};
        pub const EnumPrinters = *opaque {};
        pub const OpenPrinter = *opaque {};
        pub const ResetPrinter = *opaque {};
        pub const SetJob = *opaque {};
        pub const GetJob = *opaque {};
        pub const EnumJobs = *opaque {};
        pub const AddPrinter = *opaque {};
        pub const SetPrinter = *opaque {};
        pub const GetPrinter = *opaque {};
        pub const AddPrinterDriver = *opaque {};
        pub const AddPrinterDriverEx = *opaque {};
        pub const EnumPrinterDrivers = *opaque {};
        pub const GetPrinterDriver = *opaque {};
        pub const GetPrinterDriverDirectory = *opaque {};
        pub const DeletePrinterDriver = *opaque {};
        pub const DeletePrinterDriverEx = *opaque {};
        pub const AddPrintProcessor = *opaque {};
        pub const EnumPrintProcessors = *opaque {};
        pub const GetPrintProcessorDirectory = *opaque {};
        pub const EnumPrintProcessorDatatypes = *opaque {};
        pub const DeletePrintProcessor = *opaque {};
        pub const StartDocPrinter = *opaque {};
        pub const AddJob = *opaque {};
        pub const DocumentProperties = *opaque {};
        pub const AdvancedDocumentProperties = *opaque {};
        pub const GetPrinterData = *opaque {};
        pub const GetPrinterDataEx = *opaque {};
        pub const EnumPrinterData = *opaque {};
        pub const EnumPrinterDataEx = *opaque {};
        pub const EnumPrinterKey = *opaque {};
        pub const SetPrinterData = *opaque {};
        pub const SetPrinterDataEx = *opaque {};
        pub const DeletePrinterData = *opaque {};
        pub const DeletePrinterDataEx = *opaque {};
        pub const DeletePrinterKey = *opaque {};
        pub const PrinterMessageBox = *opaque {};
        pub const AddForm = *opaque {};
        pub const DeleteForm = *opaque {};
        pub const GetForm = *opaque {};
        pub const SetForm = *opaque {};
        pub const EnumForms = *opaque {};
        pub const EnumMonitors = *opaque {};
        pub const AddMonitor = *opaque {};
        pub const DeleteMonitor = *opaque {};
        pub const EnumPorts = *opaque {};
        pub const AddPort = *opaque {};
        pub const ConfigurePort = *opaque {};
        pub const DeletePort = *opaque {};
        pub const GetDefaultPrinter = *opaque {};
        pub const SetDefaultPrinter = *opaque {};
        pub const SetPort = *opaque {};
        pub const AddPrinterConnection = *opaque {};
        pub const DeletePrinterConnection = *opaque {};
        pub const AddPrintProvidor = *opaque {};
        pub const DeletePrintProvidor = *opaque {};
        pub const IsValidDevmode = *opaque {};
        pub const OpenPrinter2 = *opaque {};
        pub const AddPrinterConnection2 = *opaque {};
        pub const InstallPrinterDriverFromPackage = *opaque {};
        pub const UploadPrinterDriverPackage = *opaque {};
        pub const GetCorePrinterDrivers = *opaque {};
        pub const CorePrinterDriverInstalled = *opaque {};
        pub const GetPrinterDriverPackagePath = *opaque {};
        pub const DeletePrinterDriverPackage = *opaque {};
        pub const GetPrinterDriver2 = *opaque {};
    } else struct {
        pub const PRINTER_INFO_1 = @compileError("'PRINTER_INFO_1' requires that UNICODE be set to true or false in the root module");
        pub const PRINTER_INFO_2 = @compileError("'PRINTER_INFO_2' requires that UNICODE be set to true or false in the root module");
        pub const PRINTER_INFO_4 = @compileError("'PRINTER_INFO_4' requires that UNICODE be set to true or false in the root module");
        pub const PRINTER_INFO_5 = @compileError("'PRINTER_INFO_5' requires that UNICODE be set to true or false in the root module");
        pub const PRINTER_INFO_7 = @compileError("'PRINTER_INFO_7' requires that UNICODE be set to true or false in the root module");
        pub const PRINTER_INFO_8 = @compileError("'PRINTER_INFO_8' requires that UNICODE be set to true or false in the root module");
        pub const PRINTER_INFO_9 = @compileError("'PRINTER_INFO_9' requires that UNICODE be set to true or false in the root module");
        pub const JOB_INFO_1 = @compileError("'JOB_INFO_1' requires that UNICODE be set to true or false in the root module");
        pub const JOB_INFO_2 = @compileError("'JOB_INFO_2' requires that UNICODE be set to true or false in the root module");
        pub const JOB_INFO_4 = @compileError("'JOB_INFO_4' requires that UNICODE be set to true or false in the root module");
        pub const ADDJOB_INFO_1 = @compileError("'ADDJOB_INFO_1' requires that UNICODE be set to true or false in the root module");
        pub const DRIVER_INFO_1 = @compileError("'DRIVER_INFO_1' requires that UNICODE be set to true or false in the root module");
        pub const DRIVER_INFO_2 = @compileError("'DRIVER_INFO_2' requires that UNICODE be set to true or false in the root module");
        pub const DRIVER_INFO_3 = @compileError("'DRIVER_INFO_3' requires that UNICODE be set to true or false in the root module");
        pub const DRIVER_INFO_4 = @compileError("'DRIVER_INFO_4' requires that UNICODE be set to true or false in the root module");
        pub const DRIVER_INFO_5 = @compileError("'DRIVER_INFO_5' requires that UNICODE be set to true or false in the root module");
        pub const DRIVER_INFO_6 = @compileError("'DRIVER_INFO_6' requires that UNICODE be set to true or false in the root module");
        pub const DRIVER_INFO_8 = @compileError("'DRIVER_INFO_8' requires that UNICODE be set to true or false in the root module");
        pub const DOC_INFO_1 = @compileError("'DOC_INFO_1' requires that UNICODE be set to true or false in the root module");
        pub const FORM_INFO_1 = @compileError("'FORM_INFO_1' requires that UNICODE be set to true or false in the root module");
        pub const FORM_INFO_2 = @compileError("'FORM_INFO_2' requires that UNICODE be set to true or false in the root module");
        pub const DOC_INFO_2 = @compileError("'DOC_INFO_2' requires that UNICODE be set to true or false in the root module");
        pub const DOC_INFO_3 = @compileError("'DOC_INFO_3' requires that UNICODE be set to true or false in the root module");
        pub const PRINTPROCESSOR_INFO_1 = @compileError("'PRINTPROCESSOR_INFO_1' requires that UNICODE be set to true or false in the root module");
        pub const PORT_INFO_1 = @compileError("'PORT_INFO_1' requires that UNICODE be set to true or false in the root module");
        pub const PORT_INFO_2 = @compileError("'PORT_INFO_2' requires that UNICODE be set to true or false in the root module");
        pub const PORT_INFO_3 = @compileError("'PORT_INFO_3' requires that UNICODE be set to true or false in the root module");
        pub const MONITOR_INFO_1 = @compileError("'MONITOR_INFO_1' requires that UNICODE be set to true or false in the root module");
        pub const MONITOR_INFO_2 = @compileError("'MONITOR_INFO_2' requires that UNICODE be set to true or false in the root module");
        pub const DATATYPES_INFO_1 = @compileError("'DATATYPES_INFO_1' requires that UNICODE be set to true or false in the root module");
        pub const PRINTER_DEFAULTS = @compileError("'PRINTER_DEFAULTS' requires that UNICODE be set to true or false in the root module");
        pub const PRINTER_ENUM_VALUES = @compileError("'PRINTER_ENUM_VALUES' requires that UNICODE be set to true or false in the root module");
        pub const PROVIDOR_INFO_1 = @compileError("'PROVIDOR_INFO_1' requires that UNICODE be set to true or false in the root module");
        pub const PROVIDOR_INFO_2 = @compileError("'PROVIDOR_INFO_2' requires that UNICODE be set to true or false in the root module");
        pub const PRINTER_OPTIONS = @compileError("'PRINTER_OPTIONS' requires that UNICODE be set to true or false in the root module");
        pub const PRINTER_CONNECTION_INFO_1 = @compileError("'PRINTER_CONNECTION_INFO_1' requires that UNICODE be set to true or false in the root module");
        pub const CORE_PRINTER_DRIVER = @compileError("'CORE_PRINTER_DRIVER' requires that UNICODE be set to true or false in the root module");
        pub const CommonPropertySheetUI = @compileError("'CommonPropertySheetUI' requires that UNICODE be set to true or false in the root module");
        pub const EnumPrinters = @compileError("'EnumPrinters' requires that UNICODE be set to true or false in the root module");
        pub const OpenPrinter = @compileError("'OpenPrinter' requires that UNICODE be set to true or false in the root module");
        pub const ResetPrinter = @compileError("'ResetPrinter' requires that UNICODE be set to true or false in the root module");
        pub const SetJob = @compileError("'SetJob' requires that UNICODE be set to true or false in the root module");
        pub const GetJob = @compileError("'GetJob' requires that UNICODE be set to true or false in the root module");
        pub const EnumJobs = @compileError("'EnumJobs' requires that UNICODE be set to true or false in the root module");
        pub const AddPrinter = @compileError("'AddPrinter' requires that UNICODE be set to true or false in the root module");
        pub const SetPrinter = @compileError("'SetPrinter' requires that UNICODE be set to true or false in the root module");
        pub const GetPrinter = @compileError("'GetPrinter' requires that UNICODE be set to true or false in the root module");
        pub const AddPrinterDriver = @compileError("'AddPrinterDriver' requires that UNICODE be set to true or false in the root module");
        pub const AddPrinterDriverEx = @compileError("'AddPrinterDriverEx' requires that UNICODE be set to true or false in the root module");
        pub const EnumPrinterDrivers = @compileError("'EnumPrinterDrivers' requires that UNICODE be set to true or false in the root module");
        pub const GetPrinterDriver = @compileError("'GetPrinterDriver' requires that UNICODE be set to true or false in the root module");
        pub const GetPrinterDriverDirectory = @compileError("'GetPrinterDriverDirectory' requires that UNICODE be set to true or false in the root module");
        pub const DeletePrinterDriver = @compileError("'DeletePrinterDriver' requires that UNICODE be set to true or false in the root module");
        pub const DeletePrinterDriverEx = @compileError("'DeletePrinterDriverEx' requires that UNICODE be set to true or false in the root module");
        pub const AddPrintProcessor = @compileError("'AddPrintProcessor' requires that UNICODE be set to true or false in the root module");
        pub const EnumPrintProcessors = @compileError("'EnumPrintProcessors' requires that UNICODE be set to true or false in the root module");
        pub const GetPrintProcessorDirectory = @compileError("'GetPrintProcessorDirectory' requires that UNICODE be set to true or false in the root module");
        pub const EnumPrintProcessorDatatypes = @compileError("'EnumPrintProcessorDatatypes' requires that UNICODE be set to true or false in the root module");
        pub const DeletePrintProcessor = @compileError("'DeletePrintProcessor' requires that UNICODE be set to true or false in the root module");
        pub const StartDocPrinter = @compileError("'StartDocPrinter' requires that UNICODE be set to true or false in the root module");
        pub const AddJob = @compileError("'AddJob' requires that UNICODE be set to true or false in the root module");
        pub const DocumentProperties = @compileError("'DocumentProperties' requires that UNICODE be set to true or false in the root module");
        pub const AdvancedDocumentProperties = @compileError("'AdvancedDocumentProperties' requires that UNICODE be set to true or false in the root module");
        pub const GetPrinterData = @compileError("'GetPrinterData' requires that UNICODE be set to true or false in the root module");
        pub const GetPrinterDataEx = @compileError("'GetPrinterDataEx' requires that UNICODE be set to true or false in the root module");
        pub const EnumPrinterData = @compileError("'EnumPrinterData' requires that UNICODE be set to true or false in the root module");
        pub const EnumPrinterDataEx = @compileError("'EnumPrinterDataEx' requires that UNICODE be set to true or false in the root module");
        pub const EnumPrinterKey = @compileError("'EnumPrinterKey' requires that UNICODE be set to true or false in the root module");
        pub const SetPrinterData = @compileError("'SetPrinterData' requires that UNICODE be set to true or false in the root module");
        pub const SetPrinterDataEx = @compileError("'SetPrinterDataEx' requires that UNICODE be set to true or false in the root module");
        pub const DeletePrinterData = @compileError("'DeletePrinterData' requires that UNICODE be set to true or false in the root module");
        pub const DeletePrinterDataEx = @compileError("'DeletePrinterDataEx' requires that UNICODE be set to true or false in the root module");
        pub const DeletePrinterKey = @compileError("'DeletePrinterKey' requires that UNICODE be set to true or false in the root module");
        pub const PrinterMessageBox = @compileError("'PrinterMessageBox' requires that UNICODE be set to true or false in the root module");
        pub const AddForm = @compileError("'AddForm' requires that UNICODE be set to true or false in the root module");
        pub const DeleteForm = @compileError("'DeleteForm' requires that UNICODE be set to true or false in the root module");
        pub const GetForm = @compileError("'GetForm' requires that UNICODE be set to true or false in the root module");
        pub const SetForm = @compileError("'SetForm' requires that UNICODE be set to true or false in the root module");
        pub const EnumForms = @compileError("'EnumForms' requires that UNICODE be set to true or false in the root module");
        pub const EnumMonitors = @compileError("'EnumMonitors' requires that UNICODE be set to true or false in the root module");
        pub const AddMonitor = @compileError("'AddMonitor' requires that UNICODE be set to true or false in the root module");
        pub const DeleteMonitor = @compileError("'DeleteMonitor' requires that UNICODE be set to true or false in the root module");
        pub const EnumPorts = @compileError("'EnumPorts' requires that UNICODE be set to true or false in the root module");
        pub const AddPort = @compileError("'AddPort' requires that UNICODE be set to true or false in the root module");
        pub const ConfigurePort = @compileError("'ConfigurePort' requires that UNICODE be set to true or false in the root module");
        pub const DeletePort = @compileError("'DeletePort' requires that UNICODE be set to true or false in the root module");
        pub const GetDefaultPrinter = @compileError("'GetDefaultPrinter' requires that UNICODE be set to true or false in the root module");
        pub const SetDefaultPrinter = @compileError("'SetDefaultPrinter' requires that UNICODE be set to true or false in the root module");
        pub const SetPort = @compileError("'SetPort' requires that UNICODE be set to true or false in the root module");
        pub const AddPrinterConnection = @compileError("'AddPrinterConnection' requires that UNICODE be set to true or false in the root module");
        pub const DeletePrinterConnection = @compileError("'DeletePrinterConnection' requires that UNICODE be set to true or false in the root module");
        pub const AddPrintProvidor = @compileError("'AddPrintProvidor' requires that UNICODE be set to true or false in the root module");
        pub const DeletePrintProvidor = @compileError("'DeletePrintProvidor' requires that UNICODE be set to true or false in the root module");
        pub const IsValidDevmode = @compileError("'IsValidDevmode' requires that UNICODE be set to true or false in the root module");
        pub const OpenPrinter2 = @compileError("'OpenPrinter2' requires that UNICODE be set to true or false in the root module");
        pub const AddPrinterConnection2 = @compileError("'AddPrinterConnection2' requires that UNICODE be set to true or false in the root module");
        pub const InstallPrinterDriverFromPackage = @compileError("'InstallPrinterDriverFromPackage' requires that UNICODE be set to true or false in the root module");
        pub const UploadPrinterDriverPackage = @compileError("'UploadPrinterDriverPackage' requires that UNICODE be set to true or false in the root module");
        pub const GetCorePrinterDrivers = @compileError("'GetCorePrinterDrivers' requires that UNICODE be set to true or false in the root module");
        pub const CorePrinterDriverInstalled = @compileError("'CorePrinterDriverInstalled' requires that UNICODE be set to true or false in the root module");
        pub const GetPrinterDriverPackagePath = @compileError("'GetPrinterDriverPackagePath' requires that UNICODE be set to true or false in the root module");
        pub const DeletePrinterDriverPackage = @compileError("'DeletePrinterDriverPackage' requires that UNICODE be set to true or false in the root module");
        pub const GetPrinterDriver2 = @compileError("'GetPrinterDriver2' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (42)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const CHAR = @import("../foundation.zig").CHAR;
const DEVMODEA = @import("../graphics/gdi.zig").DEVMODEA;
const DEVMODEW = @import("../graphics/gdi.zig").DEVMODEW;
const DLGPROC = @import("../ui/windows_and_messaging.zig").DLGPROC;
const DOCINFOW = @import("../storage/xps.zig").DOCINFOW;
const FARPROC = @import("../foundation.zig").FARPROC;
const FD_KERNINGPAIR = @import("../devices/display.zig").FD_KERNINGPAIR;
const FILETIME = @import("../foundation.zig").FILETIME;
const HANDLE = @import("../foundation.zig").HANDLE;
const HDC = @import("../graphics/gdi.zig").HDC;
const HICON = @import("../ui/windows_and_messaging.zig").HICON;
const HINSTANCE = @import("../foundation.zig").HINSTANCE;
const HKEY = @import("../system/registry.zig").HKEY;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const ICreateErrorInfo = @import("../system/ole.zig").ICreateErrorInfo;
const IDispatch = @import("../system/com.zig").IDispatch;
const IDXGISurface = @import("../graphics/dxgi.zig").IDXGISurface;
const IEnumUnknown = @import("../system/com.zig").IEnumUnknown;
const IErrorInfo = @import("../system/com.zig").IErrorInfo;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const IWICBitmap = @import("../graphics/imaging.zig").IWICBitmap;
const IXMLDOMDocument2 = @import("../data/xml/ms_xml.zig").IXMLDOMDocument2;
const IXpsOMPage = @import("../storage/xps.zig").IXpsOMPage;
const LPARAM = @import("../foundation.zig").LPARAM;
const LRESULT = @import("../foundation.zig").LRESULT;
const PANOSE = @import("../graphics/gdi.zig").PANOSE;
const POINTL = @import("../foundation.zig").POINTL;
const PSECURITY_DESCRIPTOR = @import("../security.zig").PSECURITY_DESCRIPTOR;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const RECT = @import("../foundation.zig").RECT;
const RECTL = @import("../foundation.zig").RECTL;
const SIZE = @import("../foundation.zig").SIZE;
const STREAM_SEEK = @import("../system/com.zig").STREAM_SEEK;
const SYSTEMTIME = @import("../foundation.zig").SYSTEMTIME;
const VARIANT = @import("../system/com.zig").VARIANT;
const WPARAM = @import("../foundation.zig").WPARAM;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "_CPSUICALLBACK")) {
        _ = _CPSUICALLBACK;
    }
    if (@hasDecl(@This(), "PFNCOMPROPSHEET")) {
        _ = PFNCOMPROPSHEET;
    }
    if (@hasDecl(@This(), "PFNPROPSHEETUI")) {
        _ = PFNPROPSHEETUI;
    }
    if (@hasDecl(@This(), "PFN_DrvGetDriverSetting")) {
        _ = PFN_DrvGetDriverSetting;
    }
    if (@hasDecl(@This(), "PFN_DrvUpgradeRegistrySetting")) {
        _ = PFN_DrvUpgradeRegistrySetting;
    }
    if (@hasDecl(@This(), "PFN_DrvUpdateUISetting")) {
        _ = PFN_DrvUpdateUISetting;
    }
    if (@hasDecl(@This(), "EMFPLAYPROC")) {
        _ = EMFPLAYPROC;
    }
    if (@hasDecl(@This(), "ROUTER_NOTIFY_CALLBACK")) {
        _ = ROUTER_NOTIFY_CALLBACK;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
//--------------------------------------------------------------------------------
// Section: SubModules (1)
//--------------------------------------------------------------------------------
pub const print_ticket = @import("printing/print_ticket.zig");
