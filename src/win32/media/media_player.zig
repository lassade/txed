//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (698)
//--------------------------------------------------------------------------------
pub const CLSID_XFeedsManager = Guid.initString("fe6b11c3-c72e-4061-86c6-9d163121f229");
pub const WMPGC_FLAGS_ALLOW_PREROLL = @as(u32, 1);
pub const WMPGC_FLAGS_SUPPRESS_DIALOGS = @as(u32, 2);
pub const WMPGC_FLAGS_IGNORE_AV_SYNC = @as(u32, 4);
pub const WMPGC_FLAGS_DISABLE_PLUGINS = @as(u32, 8);
pub const WMPGC_FLAGS_USE_CUSTOM_GRAPH = @as(u32, 16);
pub const WMPUE_EC_USER = @as(u32, 33024);
pub const WMP_MDRT_FLAGS_UNREPORTED_DELETED_ITEMS = @as(u32, 1);
pub const WMP_MDRT_FLAGS_UNREPORTED_ADDED_ITEMS = @as(u32, 2);
pub const IOCTL_WMP_METADATA_ROUND_TRIP = @as(u32, 827346263);
pub const IOCTL_WMP_DEVICE_CAN_SYNC = @as(u32, 844123479);
pub const EFFECT_CANGOFULLSCREEN = @as(u32, 1);
pub const EFFECT_HASPROPERTYPAGE = @as(u32, 2);
pub const EFFECT_VARIABLEFREQSTEP = @as(u32, 4);
pub const EFFECT_WINDOWEDONLY = @as(u32, 8);
pub const EFFECT2_FULLSCREENEXCLUSIVE = @as(u32, 16);
pub const SA_BUFFER_SIZE = @as(u32, 1024);
pub const PLUGIN_INSTALLREGKEY = "Software\\Microsoft\\MediaPlayer\\UIPlugins";
pub const PLUGIN_INSTALLREGKEY_FRIENDLYNAME = "FriendlyName";
pub const PLUGIN_INSTALLREGKEY_DESCRIPTION = "Description";
pub const PLUGIN_INSTALLREGKEY_CAPABILITIES = "Capabilities";
pub const PLUGIN_INSTALLREGKEY_UNINSTALL = "UninstallPath";
pub const PLUGIN_TYPE_BACKGROUND = @as(u32, 1);
pub const PLUGIN_TYPE_SEPARATEWINDOW = @as(u32, 2);
pub const PLUGIN_TYPE_DISPLAYAREA = @as(u32, 3);
pub const PLUGIN_TYPE_SETTINGSAREA = @as(u32, 4);
pub const PLUGIN_TYPE_METADATAAREA = @as(u32, 5);
pub const PLUGIN_FLAGS_HASPROPERTYPAGE = @as(u32, 2147483648);
pub const PLUGIN_FLAGS_INSTALLAUTORUN = @as(u32, 1073741824);
pub const PLUGIN_FLAGS_LAUNCHPROPERTYPAGE = @as(u32, 536870912);
pub const PLUGIN_FLAGS_ACCEPTSMEDIA = @as(u32, 268435456);
pub const PLUGIN_FLAGS_ACCEPTSPLAYLISTS = @as(u32, 134217728);
pub const PLUGIN_FLAGS_HASPRESETS = @as(u32, 67108864);
pub const PLUGIN_FLAGS_HIDDEN = @as(u32, 33554432);
pub const PLUGIN_MISC_PRESETCOUNT = "PresetCount";
pub const PLUGIN_MISC_PRESETNAMES = "PresetNames";
pub const PLUGIN_MISC_CURRENTPRESET = "CurrentPreset";
pub const PLUGIN_SEPARATEWINDOW_RESIZABLE = "Resizable";
pub const PLUGIN_SEPARATEWINDOW_DEFAULTWIDTH = "DefaultWidth";
pub const PLUGIN_SEPARATEWINDOW_DEFAULTHEIGHT = "DefaultHeight";
pub const PLUGIN_SEPARATEWINDOW_MINWIDTH = "MinWidth";
pub const PLUGIN_SEPARATEWINDOW_MINHEIGHT = "MinHeight";
pub const PLUGIN_SEPARATEWINDOW_MAXWIDTH = "MaxWidth";
pub const PLUGIN_SEPARATEWINDOW_MAXHEIGHT = "MaxHeight";
pub const PLUGIN_MISC_QUERYDESTROY = "QueryDestroy";
pub const PLUGIN_ALL_MEDIASENDTO = "MediaSendTo";
pub const PLUGIN_ALL_PLAYLISTSENDTO = "PlaylistSendTo";
pub const SUBSCRIPTION_CAP_DEVICEAVAILABLE = @as(u32, 16);
pub const SUBSCRIPTION_CAP_BACKGROUNDPROCESSING = @as(u32, 8);
pub const SUBSCRIPTION_CAP_IS_CONTENTPARTNER = @as(u32, 64);
pub const SUBSCRIPTION_CAP_ALTLOGIN = @as(u32, 128);
pub const SUBSCRIPTION_CAP_ALLOWPLAY = @as(u32, 1);
pub const SUBSCRIPTION_CAP_ALLOWCDBURN = @as(u32, 2);
pub const SUBSCRIPTION_CAP_ALLOWPDATRANSFER = @as(u32, 4);
pub const SUBSCRIPTION_CAP_PREPAREFORSYNC = @as(u32, 32);
pub const SUBSCRIPTION_V1_CAPS = @as(u32, 15);
pub const SUBSCRIPTION_CAP_UILESSMODE_ALLOWPLAY = @as(u32, 256);
pub const WMP_SUBSCR_DL_TYPE_BACKGROUND = "background";
pub const WMP_SUBSCR_DL_TYPE_REALTIME = "real time";
pub const DISPID_FEEDS_RootFolder = @as(u32, 4096);
pub const DISPID_FEEDS_IsSubscribed = @as(u32, 4097);
pub const DISPID_FEEDS_ExistsFeed = @as(u32, 4098);
pub const DISPID_FEEDS_GetFeed = @as(u32, 4099);
pub const DISPID_FEEDS_ExistsFolder = @as(u32, 4100);
pub const DISPID_FEEDS_GetFolder = @as(u32, 4101);
pub const DISPID_FEEDS_DeleteFeed = @as(u32, 4102);
pub const DISPID_FEEDS_DeleteFolder = @as(u32, 4103);
pub const DISPID_FEEDS_GetFeedByUrl = @as(u32, 4104);
pub const DISPID_FEEDS_BackgroundSync = @as(u32, 4105);
pub const DISPID_FEEDS_BackgroundSyncStatus = @as(u32, 4106);
pub const DISPID_FEEDS_DefaultInterval = @as(u32, 4107);
pub const DISPID_FEEDS_AsyncSyncAll = @as(u32, 4108);
pub const DISPID_FEEDS_Normalize = @as(u32, 4109);
pub const DISPID_FEEDS_ItemCountLimit = @as(u32, 4110);
pub const DISPID_FEEDSENUM_Count = @as(u32, 8192);
pub const DISPID_FEEDSENUM_Item = @as(u32, 8193);
pub const DISPID_FEEDFOLDER_Feeds = @as(u32, 12288);
pub const DISPID_FEEDFOLDER_Subfolders = @as(u32, 12289);
pub const DISPID_FEEDFOLDER_CreateFeed = @as(u32, 12290);
pub const DISPID_FEEDFOLDER_CreateSubfolder = @as(u32, 12291);
pub const DISPID_FEEDFOLDER_ExistsFeed = @as(u32, 12292);
pub const DISPID_FEEDFOLDER_GetFeed = @as(u32, 12293);
pub const DISPID_FEEDFOLDER_ExistsSubfolder = @as(u32, 12294);
pub const DISPID_FEEDFOLDER_GetSubfolder = @as(u32, 12295);
pub const DISPID_FEEDFOLDER_Delete = @as(u32, 12296);
pub const DISPID_FEEDFOLDER_Name = @as(u32, 12297);
pub const DISPID_FEEDFOLDER_Rename = @as(u32, 12298);
pub const DISPID_FEEDFOLDER_Path = @as(u32, 12299);
pub const DISPID_FEEDFOLDER_Move = @as(u32, 12300);
pub const DISPID_FEEDFOLDER_Parent = @as(u32, 12301);
pub const DISPID_FEEDFOLDER_IsRoot = @as(u32, 12302);
pub const DISPID_FEEDFOLDER_TotalUnreadItemCount = @as(u32, 12303);
pub const DISPID_FEEDFOLDER_TotalItemCount = @as(u32, 12304);
pub const DISPID_FEEDFOLDER_GetWatcher = @as(u32, 12305);
pub const DISPID_FEED_Xml = @as(u32, 16384);
pub const DISPID_FEED_Name = @as(u32, 16385);
pub const DISPID_FEED_Rename = @as(u32, 16386);
pub const DISPID_FEED_Url = @as(u32, 16387);
pub const DISPID_FEED_LocalId = @as(u32, 16388);
pub const DISPID_FEED_Path = @as(u32, 16389);
pub const DISPID_FEED_Move = @as(u32, 16390);
pub const DISPID_FEED_Parent = @as(u32, 16391);
pub const DISPID_FEED_LastWriteTime = @as(u32, 16392);
pub const DISPID_FEED_Delete = @as(u32, 16393);
pub const DISPID_FEED_Download = @as(u32, 16394);
pub const DISPID_FEED_AsyncDownload = @as(u32, 16395);
pub const DISPID_FEED_CancelAsyncDownload = @as(u32, 16396);
pub const DISPID_FEED_Interval = @as(u32, 16397);
pub const DISPID_FEED_SyncSetting = @as(u32, 16398);
pub const DISPID_FEED_LastDownloadTime = @as(u32, 16399);
pub const DISPID_FEED_LocalEnclosurePath = @as(u32, 16400);
pub const DISPID_FEED_Items = @as(u32, 16401);
pub const DISPID_FEED_GetItem = @as(u32, 16402);
pub const DISPID_FEED_Title = @as(u32, 16403);
pub const DISPID_FEED_Description = @as(u32, 16404);
pub const DISPID_FEED_Link = @as(u32, 16405);
pub const DISPID_FEED_Image = @as(u32, 16406);
pub const DISPID_FEED_LastBuildDate = @as(u32, 16407);
pub const DISPID_FEED_PubDate = @as(u32, 16408);
pub const DISPID_FEED_Ttl = @as(u32, 16409);
pub const DISPID_FEED_Language = @as(u32, 16410);
pub const DISPID_FEED_Copyright = @as(u32, 16411);
pub const DISPID_FEED_DownloadEnclosuresAutomatically = @as(u32, 16412);
pub const DISPID_FEED_DownloadStatus = @as(u32, 16413);
pub const DISPID_FEED_LastDownloadError = @as(u32, 16414);
pub const DISPID_FEED_Merge = @as(u32, 16415);
pub const DISPID_FEED_DownloadUrl = @as(u32, 16416);
pub const DISPID_FEED_IsList = @as(u32, 16417);
pub const DISPID_FEED_MarkAllItemsRead = @as(u32, 16418);
pub const DISPID_FEED_GetWatcher = @as(u32, 16419);
pub const DISPID_FEED_UnreadItemCount = @as(u32, 16420);
pub const DISPID_FEED_ItemCount = @as(u32, 16421);
pub const DISPID_FEED_MaxItemCount = @as(u32, 16422);
pub const DISPID_FEED_GetItemByEffectiveId = @as(u32, 16423);
pub const DISPID_FEED_LastItemDownloadTime = @as(u32, 16424);
pub const DISPID_FEED_Username = @as(u32, 16425);
pub const DISPID_FEED_Password = @as(u32, 16426);
pub const DISPID_FEED_SetCredentials = @as(u32, 16427);
pub const DISPID_FEED_ClearCredentials = @as(u32, 16428);
pub const DISPID_FEEDITEM_Xml = @as(u32, 20480);
pub const DISPID_FEEDITEM_Title = @as(u32, 20481);
pub const DISPID_FEEDITEM_Link = @as(u32, 20482);
pub const DISPID_FEEDITEM_Guid = @as(u32, 20483);
pub const DISPID_FEEDITEM_Description = @as(u32, 20484);
pub const DISPID_FEEDITEM_PubDate = @as(u32, 20485);
pub const DISPID_FEEDITEM_Comments = @as(u32, 20486);
pub const DISPID_FEEDITEM_Author = @as(u32, 20487);
pub const DISPID_FEEDITEM_Enclosure = @as(u32, 20488);
pub const DISPID_FEEDITEM_IsRead = @as(u32, 20489);
pub const DISPID_FEEDITEM_LocalId = @as(u32, 20490);
pub const DISPID_FEEDITEM_Parent = @as(u32, 20491);
pub const DISPID_FEEDITEM_Delete = @as(u32, 20492);
pub const DISPID_FEEDITEM_DownloadUrl = @as(u32, 20493);
pub const DISPID_FEEDITEM_LastDownloadTime = @as(u32, 20494);
pub const DISPID_FEEDITEM_Modified = @as(u32, 20495);
pub const DISPID_FEEDITEM_EffectiveId = @as(u32, 20496);
pub const DISPID_FEEDENCLOSURE_Url = @as(u32, 24576);
pub const DISPID_FEEDENCLOSURE_Type = @as(u32, 24577);
pub const DISPID_FEEDENCLOSURE_Length = @as(u32, 24578);
pub const DISPID_FEEDENCLOSURE_AsyncDownload = @as(u32, 24579);
pub const DISPID_FEEDENCLOSURE_CancelAsyncDownload = @as(u32, 24580);
pub const DISPID_FEEDENCLOSURE_DownloadStatus = @as(u32, 24581);
pub const DISPID_FEEDENCLOSURE_LastDownloadError = @as(u32, 24582);
pub const DISPID_FEEDENCLOSURE_LocalPath = @as(u32, 24583);
pub const DISPID_FEEDENCLOSURE_Parent = @as(u32, 24584);
pub const DISPID_FEEDENCLOSURE_DownloadUrl = @as(u32, 24585);
pub const DISPID_FEEDENCLOSURE_DownloadMimeType = @as(u32, 24586);
pub const DISPID_FEEDENCLOSURE_RemoveFile = @as(u32, 24587);
pub const DISPID_FEEDENCLOSURE_SetFile = @as(u32, 24588);
pub const DISPID_FEEDFOLDEREVENTS_Error = @as(u32, 28672);
pub const DISPID_FEEDFOLDEREVENTS_FolderAdded = @as(u32, 28673);
pub const DISPID_FEEDFOLDEREVENTS_FolderDeleted = @as(u32, 28674);
pub const DISPID_FEEDFOLDEREVENTS_FolderRenamed = @as(u32, 28675);
pub const DISPID_FEEDFOLDEREVENTS_FolderMovedFrom = @as(u32, 28676);
pub const DISPID_FEEDFOLDEREVENTS_FolderMovedTo = @as(u32, 28677);
pub const DISPID_FEEDFOLDEREVENTS_FolderItemCountChanged = @as(u32, 28678);
pub const DISPID_FEEDFOLDEREVENTS_FeedAdded = @as(u32, 28679);
pub const DISPID_FEEDFOLDEREVENTS_FeedDeleted = @as(u32, 28680);
pub const DISPID_FEEDFOLDEREVENTS_FeedRenamed = @as(u32, 28681);
pub const DISPID_FEEDFOLDEREVENTS_FeedUrlChanged = @as(u32, 28682);
pub const DISPID_FEEDFOLDEREVENTS_FeedMovedFrom = @as(u32, 28683);
pub const DISPID_FEEDFOLDEREVENTS_FeedMovedTo = @as(u32, 28684);
pub const DISPID_FEEDFOLDEREVENTS_FeedDownloading = @as(u32, 28685);
pub const DISPID_FEEDFOLDEREVENTS_FeedDownloadCompleted = @as(u32, 28686);
pub const DISPID_FEEDFOLDEREVENTS_FeedItemCountChanged = @as(u32, 28687);
pub const DISPID_FEEDEVENTS_Error = @as(u32, 32768);
pub const DISPID_FEEDEVENTS_FeedDeleted = @as(u32, 32769);
pub const DISPID_FEEDEVENTS_FeedRenamed = @as(u32, 32770);
pub const DISPID_FEEDEVENTS_FeedUrlChanged = @as(u32, 32771);
pub const DISPID_FEEDEVENTS_FeedMoved = @as(u32, 32772);
pub const DISPID_FEEDEVENTS_FeedDownloading = @as(u32, 32773);
pub const DISPID_FEEDEVENTS_FeedDownloadCompleted = @as(u32, 32774);
pub const DISPID_FEEDEVENTS_FeedItemCountChanged = @as(u32, 32775);
pub const DISPID_DELTA = @as(u32, 50);
pub const DISPID_WMPCORE_BASE = @as(u32, 0);
pub const DISPID_WMPCORE_URL = @as(u32, 1);
pub const DISPID_WMPCORE_OPENSTATE = @as(u32, 2);
pub const DISPID_WMPCORE_CLOSE = @as(u32, 3);
pub const DISPID_WMPCORE_CONTROLS = @as(u32, 4);
pub const DISPID_WMPCORE_SETTINGS = @as(u32, 5);
pub const DISPID_WMPCORE_CURRENTMEDIA = @as(u32, 6);
pub const DISPID_WMPCORE_NETWORK = @as(u32, 7);
pub const DISPID_WMPCORE_MEDIACOLLECTION = @as(u32, 8);
pub const DISPID_WMPCORE_PLAYLISTCOLLECTION = @as(u32, 9);
pub const DISPID_WMPCORE_PLAYSTATE = @as(u32, 10);
pub const DISPID_WMPCORE_VERSIONINFO = @as(u32, 11);
pub const DISPID_WMPCORE_LAUNCHURL = @as(u32, 12);
pub const DISPID_WMPCORE_CURRENTPLAYLIST = @as(u32, 13);
pub const DISPID_WMPCORE_CDROMCOLLECTION = @as(u32, 14);
pub const DISPID_WMPCORE_CLOSEDCAPTION = @as(u32, 15);
pub const DISPID_WMPCORE_ISONLINE = @as(u32, 16);
pub const DISPID_WMPCORE_ERROR = @as(u32, 17);
pub const DISPID_WMPCORE_STATUS = @as(u32, 18);
pub const DISPID_WMPCORE_LAST = @as(u32, 18);
pub const DISPID_WMPOCX_BASE = @as(u32, 18);
pub const DISPID_WMPOCX_ENABLED = @as(u32, 19);
pub const DISPID_WMPOCX_TRANSPARENTATSTART = @as(u32, 20);
pub const DISPID_WMPOCX_FULLSCREEN = @as(u32, 21);
pub const DISPID_WMPOCX_ENABLECONTEXTMENU = @as(u32, 22);
pub const DISPID_WMPOCX_UIMODE = @as(u32, 23);
pub const DISPID_WMPOCX_LAST = @as(u32, 23);
pub const DISPID_WMPOCX2_BASE = @as(u32, 23);
pub const DISPID_WMPOCX2_STRETCHTOFIT = @as(u32, 24);
pub const DISPID_WMPOCX2_WINDOWLESSVIDEO = @as(u32, 25);
pub const DISPID_WMPOCX4_ISREMOTE = @as(u32, 26);
pub const DISPID_WMPOCX4_PLAYERAPPLICATION = @as(u32, 27);
pub const DISPID_WMPOCX4_OPENPLAYER = @as(u32, 28);
pub const DISPID_WMPCORE2_BASE = @as(u32, 39);
pub const DISPID_WMPCORE2_DVD = @as(u32, 40);
pub const DISPID_WMPCORE3_NEWPLAYLIST = @as(u32, 41);
pub const DISPID_WMPCORE3_NEWMEDIA = @as(u32, 42);
pub const DISPID_WMPCONTROLS_PLAY = @as(u32, 51);
pub const DISPID_WMPCONTROLS_STOP = @as(u32, 52);
pub const DISPID_WMPCONTROLS_PAUSE = @as(u32, 53);
pub const DISPID_WMPCONTROLS_FASTFORWARD = @as(u32, 54);
pub const DISPID_WMPCONTROLS_FASTREVERSE = @as(u32, 55);
pub const DISPID_WMPCONTROLS_CURRENTPOSITION = @as(u32, 56);
pub const DISPID_WMPCONTROLS_CURRENTPOSITIONSTRING = @as(u32, 57);
pub const DISPID_WMPCONTROLS_NEXT = @as(u32, 58);
pub const DISPID_WMPCONTROLS_PREVIOUS = @as(u32, 59);
pub const DISPID_WMPCONTROLS_CURRENTITEM = @as(u32, 60);
pub const DISPID_WMPCONTROLS_CURRENTMARKER = @as(u32, 61);
pub const DISPID_WMPCONTROLS_ISAVAILABLE = @as(u32, 62);
pub const DISPID_WMPCONTROLS_PLAYITEM = @as(u32, 63);
pub const DISPID_WMPCONTROLS2_STEP = @as(u32, 64);
pub const DISPID_WMPCONTROLS3_AUDIOLANGUAGECOUNT = @as(u32, 65);
pub const DISPID_WMPCONTROLS3_GETAUDIOLANGUAGEID = @as(u32, 66);
pub const DISPID_WMPCONTROLS3_GETAUDIOLANGUAGEDESC = @as(u32, 67);
pub const DISPID_WMPCONTROLS3_CURRENTAUDIOLANGUAGE = @as(u32, 68);
pub const DISPID_WMPCONTROLS3_CURRENTAUDIOLANGUAGEINDEX = @as(u32, 69);
pub const DISPID_WMPCONTROLS3_GETLANGUAGENAME = @as(u32, 70);
pub const DISPID_WMPCONTROLS3_CURRENTPOSITIONTIMECODE = @as(u32, 71);
pub const DISPID_WMPCONTROLSFAKE_TIMECOMPRESSION = @as(u32, 72);
pub const DISPID_WMPSETTINGS_AUTOSTART = @as(u32, 101);
pub const DISPID_WMPSETTINGS_BALANCE = @as(u32, 102);
pub const DISPID_WMPSETTINGS_INVOKEURLS = @as(u32, 103);
pub const DISPID_WMPSETTINGS_MUTE = @as(u32, 104);
pub const DISPID_WMPSETTINGS_PLAYCOUNT = @as(u32, 105);
pub const DISPID_WMPSETTINGS_RATE = @as(u32, 106);
pub const DISPID_WMPSETTINGS_VOLUME = @as(u32, 107);
pub const DISPID_WMPSETTINGS_BASEURL = @as(u32, 108);
pub const DISPID_WMPSETTINGS_DEFAULTFRAME = @as(u32, 109);
pub const DISPID_WMPSETTINGS_GETMODE = @as(u32, 110);
pub const DISPID_WMPSETTINGS_SETMODE = @as(u32, 111);
pub const DISPID_WMPSETTINGS_ENABLEERRORDIALOGS = @as(u32, 112);
pub const DISPID_WMPSETTINGS_ISAVAILABLE = @as(u32, 113);
pub const DISPID_WMPSETTINGS2_DEFAULTAUDIOLANGUAGE = @as(u32, 114);
pub const DISPID_WMPSETTINGS2_LIBRARYACCESSRIGHTS = @as(u32, 115);
pub const DISPID_WMPSETTINGS2_REQUESTLIBRARYACCESSRIGHTS = @as(u32, 116);
pub const DISPID_WMPPLAYLIST_COUNT = @as(u32, 201);
pub const DISPID_WMPPLAYLIST_NAME = @as(u32, 202);
pub const DISPID_WMPPLAYLIST_GETITEMINFO = @as(u32, 203);
pub const DISPID_WMPPLAYLIST_SETITEMINFO = @as(u32, 204);
pub const DISPID_WMPPLAYLIST_CLEAR = @as(u32, 205);
pub const DISPID_WMPPLAYLIST_INSERTITEM = @as(u32, 206);
pub const DISPID_WMPPLAYLIST_APPENDITEM = @as(u32, 207);
pub const DISPID_WMPPLAYLIST_REMOVEITEM = @as(u32, 208);
pub const DISPID_WMPPLAYLIST_MOVEITEM = @as(u32, 209);
pub const DISPID_WMPPLAYLIST_ATTRIBUTECOUNT = @as(u32, 210);
pub const DISPID_WMPPLAYLIST_ATTRIBUTENAME = @as(u32, 211);
pub const DISPID_WMPPLAYLIST_ITEM = @as(u32, 212);
pub const DISPID_WMPPLAYLIST_ISIDENTICAL = @as(u32, 213);
pub const DISPID_WMPCDROM_DRIVESPECIFIER = @as(u32, 251);
pub const DISPID_WMPCDROM_PLAYLIST = @as(u32, 252);
pub const DISPID_WMPCDROM_EJECT = @as(u32, 253);
pub const DISPID_WMPCDROMCOLLECTION_COUNT = @as(u32, 301);
pub const DISPID_WMPCDROMCOLLECTION_ITEM = @as(u32, 302);
pub const DISPID_WMPCDROMCOLLECTION_GETBYDRIVESPECIFIER = @as(u32, 303);
pub const DISPID_WMPCDROMCOLLECTION_STARTMONITORINGCDROMS = @as(u32, 304);
pub const DISPID_WMPCDROMCOLLECTION_STOPMONITORINGCDROMS = @as(u32, 305);
pub const DISPID_WMPSTRINGCOLLECTION_COUNT = @as(u32, 401);
pub const DISPID_WMPSTRINGCOLLECTION_ITEM = @as(u32, 402);
pub const DISPID_WMPMEDIACOLLECTION_ADD = @as(u32, 452);
pub const DISPID_WMPMEDIACOLLECTION_GETALL = @as(u32, 453);
pub const DISPID_WMPMEDIACOLLECTION_GETBYNAME = @as(u32, 454);
pub const DISPID_WMPMEDIACOLLECTION_GETBYGENRE = @as(u32, 455);
pub const DISPID_WMPMEDIACOLLECTION_GETBYAUTHOR = @as(u32, 456);
pub const DISPID_WMPMEDIACOLLECTION_GETBYALBUM = @as(u32, 457);
pub const DISPID_WMPMEDIACOLLECTION_GETBYATTRIBUTE = @as(u32, 458);
pub const DISPID_WMPMEDIACOLLECTION_REMOVE = @as(u32, 459);
pub const DISPID_WMPMEDIACOLLECTION_GETATTRIBUTESTRINGCOLLECTION = @as(u32, 461);
pub const DISPID_WMPMEDIACOLLECTION_NEWQUERY = @as(u32, 462);
pub const DISPID_WMPMEDIACOLLECTION_STARTMONITORING = @as(u32, 463);
pub const DISPID_WMPMEDIACOLLECTION_STOPMONITORING = @as(u32, 464);
pub const DISPID_WMPMEDIACOLLECTION_STARTCONTENTSCAN = @as(u32, 465);
pub const DISPID_WMPMEDIACOLLECTION_STOPCONTENTSCAN = @as(u32, 466);
pub const DISPID_WMPMEDIACOLLECTION_STARTSEARCH = @as(u32, 467);
pub const DISPID_WMPMEDIACOLLECTION_STOPSEARCH = @as(u32, 468);
pub const DISPID_WMPMEDIACOLLECTION_UPDATEMETADATA = @as(u32, 469);
pub const DISPID_WMPMEDIACOLLECTION_GETMEDIAATOM = @as(u32, 470);
pub const DISPID_WMPMEDIACOLLECTION_SETDELETED = @as(u32, 471);
pub const DISPID_WMPMEDIACOLLECTION_ISDELETED = @as(u32, 472);
pub const DISPID_WMPMEDIACOLLECTION_GETBYQUERYDESCRIPTION = @as(u32, 473);
pub const DISPID_WMPMEDIACOLLECTION_FREEZECOLLECTIONCHANGE = @as(u32, 474);
pub const DISPID_WMPMEDIACOLLECTION_UNFREEZECOLLECTIONCHANGE = @as(u32, 475);
pub const DISPID_WMPMEDIACOLLECTION_POSTCOLLECTIONCHANGE = @as(u32, 476);
pub const DISPID_WMPPLAYLISTARRAY_COUNT = @as(u32, 501);
pub const DISPID_WMPPLAYLISTARRAY_ITEM = @as(u32, 502);
pub const DISPID_WMPPLAYLISTCOLLECTION_NEWPLAYLIST = @as(u32, 552);
pub const DISPID_WMPPLAYLISTCOLLECTION_GETALL = @as(u32, 553);
pub const DISPID_WMPPLAYLISTCOLLECTION_GETBYNAME = @as(u32, 554);
pub const DISPID_WMPPLAYLISTCOLLECTION_GETBYQUERYDESCRIPTION = @as(u32, 555);
pub const DISPID_WMPPLAYLISTCOLLECTION_REMOVE = @as(u32, 556);
pub const DISPID_WMPPLAYLISTCOLLECTION_NEWQUERY = @as(u32, 557);
pub const DISPID_WMPPLAYLISTCOLLECTION_STARTMONITORING = @as(u32, 558);
pub const DISPID_WMPPLAYLISTCOLLECTION_STOPMONITORING = @as(u32, 559);
pub const DISPID_WMPPLAYLISTCOLLECTION_SETDELETED = @as(u32, 560);
pub const DISPID_WMPPLAYLISTCOLLECTION_ISDELETED = @as(u32, 561);
pub const DISPID_WMPPLAYLISTCOLLECTION_IMPORTPLAYLIST = @as(u32, 562);
pub const DISPID_WMPMEDIA_SOURCEURL = @as(u32, 751);
pub const DISPID_WMPMEDIA_IMAGESOURCEWIDTH = @as(u32, 752);
pub const DISPID_WMPMEDIA_IMAGESOURCEHEIGHT = @as(u32, 753);
pub const DISPID_WMPMEDIA_MARKERCOUNT = @as(u32, 754);
pub const DISPID_WMPMEDIA_GETMARKERTIME = @as(u32, 755);
pub const DISPID_WMPMEDIA_GETMARKERNAME = @as(u32, 756);
pub const DISPID_WMPMEDIA_DURATION = @as(u32, 757);
pub const DISPID_WMPMEDIA_DURATIONSTRING = @as(u32, 758);
pub const DISPID_WMPMEDIA_ATTRIBUTECOUNT = @as(u32, 759);
pub const DISPID_WMPMEDIA_GETATTRIBUTENAME = @as(u32, 760);
pub const DISPID_WMPMEDIA_GETITEMINFO = @as(u32, 761);
pub const DISPID_WMPMEDIA_SETITEMINFO = @as(u32, 762);
pub const DISPID_WMPMEDIA_ISIDENTICAL = @as(u32, 763);
pub const DISPID_WMPMEDIA_NAME = @as(u32, 764);
pub const DISPID_WMPMEDIA_GETITEMINFOBYATOM = @as(u32, 765);
pub const DISPID_WMPMEDIA_ISMEMBEROF = @as(u32, 766);
pub const DISPID_WMPMEDIA_ISREADONLYITEM = @as(u32, 767);
pub const DISPID_WMPMEDIA2_ERROR = @as(u32, 768);
pub const DISPID_WMPMEDIA3_GETATTRIBUTECOUNTBYTYPE = @as(u32, 769);
pub const DISPID_WMPMEDIA3_GETITEMINFOBYTYPE = @as(u32, 770);
pub const DISPID_WMPNETWORK_BANDWIDTH = @as(u32, 801);
pub const DISPID_WMPNETWORK_RECOVEREDPACKETS = @as(u32, 802);
pub const DISPID_WMPNETWORK_SOURCEPROTOCOL = @as(u32, 803);
pub const DISPID_WMPNETWORK_RECEIVEDPACKETS = @as(u32, 804);
pub const DISPID_WMPNETWORK_LOSTPACKETS = @as(u32, 805);
pub const DISPID_WMPNETWORK_RECEPTIONQUALITY = @as(u32, 806);
pub const DISPID_WMPNETWORK_BUFFERINGCOUNT = @as(u32, 807);
pub const DISPID_WMPNETWORK_BUFFERINGPROGRESS = @as(u32, 808);
pub const DISPID_WMPNETWORK_BUFFERINGTIME = @as(u32, 809);
pub const DISPID_WMPNETWORK_FRAMERATE = @as(u32, 810);
pub const DISPID_WMPNETWORK_MAXBITRATE = @as(u32, 811);
pub const DISPID_WMPNETWORK_BITRATE = @as(u32, 812);
pub const DISPID_WMPNETWORK_GETPROXYSETTINGS = @as(u32, 813);
pub const DISPID_WMPNETWORK_SETPROXYSETTINGS = @as(u32, 814);
pub const DISPID_WMPNETWORK_GETPROXYNAME = @as(u32, 815);
pub const DISPID_WMPNETWORK_SETPROXYNAME = @as(u32, 816);
pub const DISPID_WMPNETWORK_GETPROXYPORT = @as(u32, 817);
pub const DISPID_WMPNETWORK_SETPROXYPORT = @as(u32, 818);
pub const DISPID_WMPNETWORK_GETPROXYEXCEPTIONLIST = @as(u32, 819);
pub const DISPID_WMPNETWORK_SETPROXYEXCEPTIONLIST = @as(u32, 820);
pub const DISPID_WMPNETWORK_GETPROXYBYPASSFORLOCAL = @as(u32, 821);
pub const DISPID_WMPNETWORK_SETPROXYBYPASSFORLOCAL = @as(u32, 822);
pub const DISPID_WMPNETWORK_MAXBANDWIDTH = @as(u32, 823);
pub const DISPID_WMPNETWORK_DOWNLOADPROGRESS = @as(u32, 824);
pub const DISPID_WMPNETWORK_ENCODEDFRAMERATE = @as(u32, 825);
pub const DISPID_WMPNETWORK_FRAMESSKIPPED = @as(u32, 826);
pub const DISPID_WMPERROR_CLEARERRORQUEUE = @as(u32, 851);
pub const DISPID_WMPERROR_ERRORCOUNT = @as(u32, 852);
pub const DISPID_WMPERROR_ITEM = @as(u32, 853);
pub const DISPID_WMPERROR_WEBHELP = @as(u32, 854);
pub const DISPID_WMPERRORITEM_ERRORCODE = @as(u32, 901);
pub const DISPID_WMPERRORITEM_ERRORDESCRIPTION = @as(u32, 902);
pub const DISPID_WMPERRORITEM_ERRORCONTEXT = @as(u32, 903);
pub const DISPID_WMPERRORITEM_REMEDY = @as(u32, 904);
pub const DISPID_WMPERRORITEM_CUSTOMURL = @as(u32, 905);
pub const DISPID_WMPERRORITEM2_CONDITION = @as(u32, 906);
pub const DISPID_WMPCLOSEDCAPTION_SAMISTYLE = @as(u32, 951);
pub const DISPID_WMPCLOSEDCAPTION_SAMILANG = @as(u32, 952);
pub const DISPID_WMPCLOSEDCAPTION_SAMIFILENAME = @as(u32, 953);
pub const DISPID_WMPCLOSEDCAPTION_CAPTIONINGID = @as(u32, 954);
pub const DISPID_WMPCLOSEDCAPTION2_GETLANGCOUNT = @as(u32, 955);
pub const DISPID_WMPCLOSEDCAPTION2_GETLANGNAME = @as(u32, 956);
pub const DISPID_WMPCLOSEDCAPTION2_GETLANGID = @as(u32, 957);
pub const DISPID_WMPCLOSEDCAPTION2_GETSTYLECOUNT = @as(u32, 958);
pub const DISPID_WMPCLOSEDCAPTION2_GETSTYLENAME = @as(u32, 959);
pub const DISPID_WMPDVD_ISAVAILABLE = @as(u32, 1001);
pub const DISPID_WMPDVD_DOMAIN = @as(u32, 1002);
pub const DISPID_WMPDVD_TOPMENU = @as(u32, 1003);
pub const DISPID_WMPDVD_TITLEMENU = @as(u32, 1004);
pub const DISPID_WMPDVD_BACK = @as(u32, 1005);
pub const DISPID_WMPDVD_RESUME = @as(u32, 1006);
pub const DISPID_WMPMETADATA_PICTURE_MIMETYPE = @as(u32, 1051);
pub const DISPID_WMPMETADATA_PICTURE_PICTURETYPE = @as(u32, 1052);
pub const DISPID_WMPMETADATA_PICTURE_DESCRIPTION = @as(u32, 1053);
pub const DISPID_WMPMETADATA_PICTURE_URL = @as(u32, 1054);
pub const DISPID_WMPMETADATA_TEXT_TEXT = @as(u32, 1055);
pub const DISPID_WMPMETADATA_TEXT_DESCRIPTION = @as(u32, 1056);
pub const DISPID_WMPPLAYERAPP_SWITCHTOPLAYERAPPLICATION = @as(u32, 1101);
pub const DISPID_WMPPLAYERAPP_SWITCHTOCONTROL = @as(u32, 1102);
pub const DISPID_WMPPLAYERAPP_PLAYERDOCKED = @as(u32, 1103);
pub const DISPID_WMPPLAYERAPP_HASDISPLAY = @as(u32, 1104);
pub const DISPID_WMPPLAYERAPP_REMOTESTATUS = @as(u32, 1105);
pub const DISPID_WMPDOWNLOADMANAGER_GETDOWNLOADCOLLECTION = @as(u32, 1151);
pub const DISPID_WMPDOWNLOADMANAGER_CREATEDOWNLOADCOLLECTION = @as(u32, 1152);
pub const DISPID_WMPDOWNLOADCOLLECTION_ID = @as(u32, 1201);
pub const DISPID_WMPDOWNLOADCOLLECTION_COUNT = @as(u32, 1202);
pub const DISPID_WMPDOWNLOADCOLLECTION_ITEM = @as(u32, 1203);
pub const DISPID_WMPDOWNLOADCOLLECTION_STARTDOWNLOAD = @as(u32, 1204);
pub const DISPID_WMPDOWNLOADCOLLECTION_REMOVEITEM = @as(u32, 1205);
pub const DISPID_WMPDOWNLOADCOLLECTION_CLEAR = @as(u32, 1206);
pub const DISPID_WMPDOWNLOADITEM_SOURCEURL = @as(u32, 1251);
pub const DISPID_WMPDOWNLOADITEM_SIZE = @as(u32, 1252);
pub const DISPID_WMPDOWNLOADITEM_TYPE = @as(u32, 1253);
pub const DISPID_WMPDOWNLOADITEM_PROGRESS = @as(u32, 1254);
pub const DISPID_WMPDOWNLOADITEM_DOWNLOADSTATE = @as(u32, 1255);
pub const DISPID_WMPDOWNLOADITEM_PAUSE = @as(u32, 1256);
pub const DISPID_WMPDOWNLOADITEM_RESUME = @as(u32, 1257);
pub const DISPID_WMPDOWNLOADITEM_CANCEL = @as(u32, 1258);
pub const DISPID_WMPDOWNLOADITEM2_GETITEMINFO = @as(u32, 1301);
pub const DISPID_WMPQUERY_ADDCONDITION = @as(u32, 1351);
pub const DISPID_WMPQUERY_BEGINNEXTGROUP = @as(u32, 1352);
pub const DISPID_WMPMEDIACOLLECTION2_CREATEQUERY = @as(u32, 1401);
pub const DISPID_WMPMEDIACOLLECTION2_GETPLAYLISTBYQUERY = @as(u32, 1402);
pub const DISPID_WMPMEDIACOLLECTION2_GETSTRINGCOLLBYQUERY = @as(u32, 1403);
pub const DISPID_WMPMEDIACOLLECTION2_GETBYATTRANDMEDIATYPE = @as(u32, 1404);
pub const DISPID_WMPSTRINGCOLLECTION2_ISIDENTICAL = @as(u32, 1451);
pub const DISPID_WMPSTRINGCOLLECTION2_GETITEMINFO = @as(u32, 1452);
pub const DISPID_WMPSTRINGCOLLECTION2_GETATTRCOUNTBYTYPE = @as(u32, 1453);
pub const DISPID_WMPSTRINGCOLLECTION2_GETITEMINFOBYTYPE = @as(u32, 1454);
pub const DISPID_WMPCORE_MIN = @as(u32, 1);
pub const DISPID_WMPCORE_MAX = @as(u32, 1454);
pub const WMPCOREEVENT_BASE = @as(u32, 5000);
pub const DISPID_WMPCOREEVENT_OPENSTATECHANGE = @as(u32, 5001);
pub const DISPID_WMPCOREEVENT_STATUSCHANGE = @as(u32, 5002);
pub const WMPCOREEVENT_CONTROL_BASE = @as(u32, 5100);
pub const DISPID_WMPCOREEVENT_PLAYSTATECHANGE = @as(u32, 5101);
pub const DISPID_WMPCOREEVENT_AUDIOLANGUAGECHANGE = @as(u32, 5102);
pub const WMPCOREEVENT_SEEK_BASE = @as(u32, 5200);
pub const DISPID_WMPCOREEVENT_ENDOFSTREAM = @as(u32, 5201);
pub const DISPID_WMPCOREEVENT_POSITIONCHANGE = @as(u32, 5202);
pub const DISPID_WMPCOREEVENT_MARKERHIT = @as(u32, 5203);
pub const DISPID_WMPCOREEVENT_DURATIONUNITCHANGE = @as(u32, 5204);
pub const WMPCOREEVENT_CONTENT_BASE = @as(u32, 5300);
pub const DISPID_WMPCOREEVENT_SCRIPTCOMMAND = @as(u32, 5301);
pub const WMPCOREEVENT_NETWORK_BASE = @as(u32, 5400);
pub const DISPID_WMPCOREEVENT_DISCONNECT = @as(u32, 5401);
pub const DISPID_WMPCOREEVENT_BUFFERING = @as(u32, 5402);
pub const DISPID_WMPCOREEVENT_NEWSTREAM = @as(u32, 5403);
pub const WMPCOREEVENT_ERROR_BASE = @as(u32, 5500);
pub const DISPID_WMPCOREEVENT_ERROR = @as(u32, 5501);
pub const WMPCOREEVENT_WARNING_BASE = @as(u32, 5600);
pub const DISPID_WMPCOREEVENT_WARNING = @as(u32, 5601);
pub const WMPCOREEVENT_CDROM_BASE = @as(u32, 5700);
pub const DISPID_WMPCOREEVENT_CDROMMEDIACHANGE = @as(u32, 5701);
pub const WMPCOREEVENT_PLAYLIST_BASE = @as(u32, 5800);
pub const DISPID_WMPCOREEVENT_PLAYLISTCHANGE = @as(u32, 5801);
pub const DISPID_WMPCOREEVENT_MEDIACHANGE = @as(u32, 5802);
pub const DISPID_WMPCOREEVENT_CURRENTMEDIAITEMAVAILABLE = @as(u32, 5803);
pub const DISPID_WMPCOREEVENT_CURRENTPLAYLISTCHANGE = @as(u32, 5804);
pub const DISPID_WMPCOREEVENT_CURRENTPLAYLISTITEMAVAILABLE = @as(u32, 5805);
pub const DISPID_WMPCOREEVENT_CURRENTITEMCHANGE = @as(u32, 5806);
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONCHANGE = @as(u32, 5807);
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGADDED = @as(u32, 5808);
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGREMOVED = @as(u32, 5809);
pub const DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONCHANGE = @as(u32, 5810);
pub const DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTADDED = @as(u32, 5811);
pub const DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTREMOVED = @as(u32, 5812);
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONCONTENTSCANADDEDITEM = @as(u32, 5813);
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONCONTENTSCANPROGRESS = @as(u32, 5814);
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHFOUNDITEM = @as(u32, 5815);
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHPROGRESS = @as(u32, 5816);
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONSEARCHCOMPLETE = @as(u32, 5817);
pub const DISPID_WMPCOREEVENT_PLAYLISTCOLLECTIONPLAYLISTSETASDELETED = @as(u32, 5818);
pub const DISPID_WMPCOREEVENT_MODECHANGE = @as(u32, 5819);
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONATTRIBUTESTRINGCHANGED = @as(u32, 5820);
pub const DISPID_WMPCOREEVENT_MEDIAERROR = @as(u32, 5821);
pub const DISPID_WMPCOREEVENT_DOMAINCHANGE = @as(u32, 5822);
pub const DISPID_WMPCOREEVENT_OPENPLAYLISTSWITCH = @as(u32, 5823);
pub const DISPID_WMPCOREEVENT_STRINGCOLLECTIONCHANGE = @as(u32, 5824);
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONMEDIAADDED = @as(u32, 5825);
pub const DISPID_WMPCOREEVENT_MEDIACOLLECTIONMEDIAREMOVED = @as(u32, 5826);
pub const WMPOCXEVENT_BASE = @as(u32, 6500);
pub const DISPID_WMPOCXEVENT_SWITCHEDTOPLAYERAPPLICATION = @as(u32, 6501);
pub const DISPID_WMPOCXEVENT_SWITCHEDTOCONTROL = @as(u32, 6502);
pub const DISPID_WMPOCXEVENT_PLAYERDOCKEDSTATECHANGE = @as(u32, 6503);
pub const DISPID_WMPOCXEVENT_PLAYERRECONNECT = @as(u32, 6504);
pub const DISPID_WMPOCXEVENT_CLICK = @as(u32, 6505);
pub const DISPID_WMPOCXEVENT_DOUBLECLICK = @as(u32, 6506);
pub const DISPID_WMPOCXEVENT_KEYDOWN = @as(u32, 6507);
pub const DISPID_WMPOCXEVENT_KEYPRESS = @as(u32, 6508);
pub const DISPID_WMPOCXEVENT_KEYUP = @as(u32, 6509);
pub const DISPID_WMPOCXEVENT_MOUSEDOWN = @as(u32, 6510);
pub const DISPID_WMPOCXEVENT_MOUSEMOVE = @as(u32, 6511);
pub const DISPID_WMPOCXEVENT_MOUSEUP = @as(u32, 6512);
pub const DISPID_WMPOCXEVENT_DEVICECONNECT = @as(u32, 6513);
pub const DISPID_WMPOCXEVENT_DEVICEDISCONNECT = @as(u32, 6514);
pub const DISPID_WMPOCXEVENT_DEVICESTATUSCHANGE = @as(u32, 6515);
pub const DISPID_WMPOCXEVENT_DEVICESYNCSTATECHANGE = @as(u32, 6516);
pub const DISPID_WMPOCXEVENT_DEVICESYNCERROR = @as(u32, 6517);
pub const DISPID_WMPOCXEVENT_CREATEPARTNERSHIPCOMPLETE = @as(u32, 6518);
pub const DISPID_WMPOCXEVENT_CDROMRIPSTATECHANGE = @as(u32, 6519);
pub const DISPID_WMPOCXEVENT_CDROMRIPMEDIAERROR = @as(u32, 6520);
pub const DISPID_WMPOCXEVENT_CDROMBURNSTATECHANGE = @as(u32, 6521);
pub const DISPID_WMPOCXEVENT_CDROMBURNMEDIAERROR = @as(u32, 6522);
pub const DISPID_WMPOCXEVENT_CDROMBURNERROR = @as(u32, 6523);
pub const DISPID_WMPOCXEVENT_LIBRARYCONNECT = @as(u32, 6524);
pub const DISPID_WMPOCXEVENT_LIBRARYDISCONNECT = @as(u32, 6525);
pub const DISPID_WMPOCXEVENT_FOLDERSCANSTATECHANGE = @as(u32, 6526);
pub const DISPID_WMPOCXEVENT_DEVICEESTIMATION = @as(u32, 6527);
pub const DISPID_WMPCONTROLS_BASE = @as(u32, 50);
pub const DISPID_WMPSETTINGS_BASE = @as(u32, 100);
pub const DISPID_WMPPLAYLIST_BASE = @as(u32, 200);
pub const DISPID_WMPCDROM_BASE = @as(u32, 250);
pub const DISPID_WMPCDROMCOLLECTION_BASE = @as(u32, 300);
pub const DISPID_WMPSTRINGCOLLECTION_BASE = @as(u32, 400);
pub const DISPID_WMPMEDIACOLLECTION_BASE = @as(u32, 450);
pub const DISPID_WMPPLAYLISTARRAY_BASE = @as(u32, 500);
pub const DISPID_WMPPLAYLISTCOLLECTION_BASE = @as(u32, 550);
pub const DISPID_WMPMEDIA_BASE = @as(u32, 750);
pub const DISPID_WMPNETWORK_BASE = @as(u32, 800);
pub const DISPID_WMPERROR_BASE = @as(u32, 850);
pub const DISPID_WMPERRORITEM_BASE = @as(u32, 900);
pub const DISPID_WMPCLOSEDCAPTION_BASE = @as(u32, 950);
pub const DISPID_WMPDVD_BASE = @as(u32, 1000);
pub const DISPID_WMPMETADATA_BASE = @as(u32, 1050);
pub const DISPID_WMPPLAYERAPP_BASE = @as(u32, 1100);
pub const DISPID_WMPDOWNLOADMANAGER_BASE = @as(u32, 1150);
pub const DISPID_WMPDOWNLOADCOLLECTION_BASE = @as(u32, 1200);
pub const DISPID_WMPDOWNLOADITEM_BASE = @as(u32, 1250);
pub const DISPID_WMPDOWNLOADITEM2_BASE = @as(u32, 1300);
pub const DISPID_WMPQUERY_BASE = @as(u32, 1350);
pub const DISPID_WMPMEDIACOLLECTION2_BASE = @as(u32, 1400);
pub const DISPID_WMPSTRINGCOLLECTION2_BASE = @as(u32, 1450);
pub const CLSID_WMPSkinManager = Guid.initString("b2a7fd52-301f-4348-b93a-638c6de49229");
pub const CLSID_WMPMediaPluginRegistrar = Guid.initString("5569e7f5-424b-4b93-89ca-79d17924689a");
pub const WMP_PLUGINTYPE_DSP = Guid.initString("6434baea-4954-498d-abd5-2b07123e1f04");
pub const WMP_PLUGINTYPE_DSP_OUTOFPROC = Guid.initString("ef29b174-c347-44cc-9a4f-2399118ff38c");
pub const WMP_PLUGINTYPE_RENDERING = Guid.initString("a8554541-115d-406a-a4c7-51111c330183");
pub const kfltTimedLevelMaximumFrequency = @as(f32, 22050);
pub const kfltTimedLevelMinimumFrequency = @as(f32, 20);
pub const g_szContentPartnerInfo_LoginState = "LoginState";
pub const g_szContentPartnerInfo_MediaPlayerAccountType = "MediaPlayerAccountType";
pub const g_szContentPartnerInfo_AccountType = "AccountType";
pub const g_szContentPartnerInfo_HasCachedCredentials = "HasCachedCredentials";
pub const g_szContentPartnerInfo_LicenseRefreshAdvanceWarning = "LicenseRefreshAdvanceWarning";
pub const g_szContentPartnerInfo_PurchasedTrackRequiresReDownload = "PurchasedTrackRequiresReDownload";
pub const g_szContentPartnerInfo_MaximumTrackPurchasePerPurchase = "MaximumNumberOfTracksPerPurchase";
pub const g_szContentPartnerInfo_AccountBalance = "AccountBalance";
pub const g_szContentPartnerInfo_UserName = "UserName";
pub const g_szMediaPlayerTask_Burn = "Burn";
pub const g_szMediaPlayerTask_Browse = "Browse";
pub const g_szMediaPlayerTask_Sync = "Sync";
pub const g_szItemInfo_PopupURL = "Popup";
pub const g_szItemInfo_AuthenticationSuccessURL = "AuthenticationSuccessURL";
pub const g_szItemInfo_LoginFailureURL = "LoginFailureURL";
pub const g_szItemInfo_HTMLViewURL = "HTMLViewURL";
pub const g_szItemInfo_PopupCaption = "PopupCaption";
pub const g_szItemInfo_ALTLoginURL = "ALTLoginURL";
pub const g_szItemInfo_ALTLoginCaption = "ALTLoginCaption";
pub const g_szItemInfo_ForgetPasswordURL = "ForgotPassword";
pub const g_szItemInfo_CreateAccountURL = "CreateAccount";
pub const g_szItemInfo_ArtistArtURL = "ArtistArt";
pub const g_szItemInfo_AlbumArtURL = "AlbumArt";
pub const g_szItemInfo_ListArtURL = "ListArt";
pub const g_szItemInfo_GenreArtURL = "GenreArt";
pub const g_szItemInfo_SubGenreArtURL = "SubGenreArt";
pub const g_szItemInfo_RadioArtURL = "RadioArt";
pub const g_szItemInfo_TreeListIconURL = "CPListIDIcon";
pub const g_szItemInfo_ErrorDescription = "CPErrorDescription";
pub const g_szItemInfo_ErrorURL = "CPErrorURL";
pub const g_szItemInfo_ErrorURLLinkText = "CPErrorURLLinkText";
pub const g_szUnknownLocation = "UnknownLocation";
pub const g_szRootLocation = "RootLocation";
pub const g_szFlyoutMenu = "FlyoutMenu";
pub const g_szOnlineStore = "OnlineStore";
pub const g_szVideoRecent = "VideoRecent";
pub const g_szVideoRoot = "VideoRoot";
pub const g_szCPListID = "CPListID";
pub const g_szAllCPListIDs = "AllCPListIDs";
pub const g_szCPTrackID = "CPTrackID";
pub const g_szAllCPTrackIDs = "AllCPTrackIDs";
pub const g_szCPArtistID = "CPArtistID";
pub const g_szAllCPArtistIDs = "AllCPArtistIDs";
pub const g_szCPAlbumID = "CPAlbumID";
pub const g_szAllCPAlbumIDs = "AllCPAlbumIDs";
pub const g_szCPGenreID = "CPGenreID";
pub const g_szAllCPGenreIDs = "AllCPGenreIDs";
pub const g_szCPAlbumSubGenreID = "CPAlbumSubGenreID";
pub const g_szAllCPAlbumSubGenreIDs = "AllCPAlbumSubGenreIDs";
pub const g_szReleaseDateYear = "ReleaseDateYear";
pub const g_szAllReleaseDateYears = "AllReleaseDateYears";
pub const g_szCPRadioID = "CPRadioID";
pub const g_szAllCPRadioIDs = "AllCPRadioIDs";
pub const g_szAuthor = "Author";
pub const g_szAllAuthors = "AllAuthors";
pub const g_szWMParentalRating = "WMParentalRating";
pub const g_szAllWMParentalRatings = "AllWMParentalRatings";
pub const g_szAllUserEffectiveRatingStarss = "AllUserEffectiveRatingStarss";
pub const g_szUserEffectiveRatingStars = "UserEffectiveRatingStars";
pub const g_szUserPlaylist = "UserPlaylist";
pub const g_szViewMode_Report = "ViewModeReport";
pub const g_szViewMode_Details = "ViewModeDetails";
pub const g_szViewMode_Icon = "ViewModeIcon";
pub const g_szViewMode_Tile = "ViewModeTile";
pub const g_szViewMode_OrderedList = "ViewModeOrderedList";
pub const g_szContentPrice_Unknown = "PriceUnknown";
pub const g_szContentPrice_CannotBuy = "PriceCannotBuy";
pub const g_szContentPrice_Free = "PriceFree";
pub const g_szRefreshLicensePlay = "RefreshForPlay";
pub const g_szRefreshLicenseBurn = "RefreshForBurn";
pub const g_szRefreshLicenseSync = "RefreshForSync";
pub const g_szVerifyPermissionSync = "VerifyPermissionSync";
pub const g_szStationEvent_Started = "TrackStarted";
pub const g_szStationEvent_Complete = "TrackComplete";
pub const g_szStationEvent_Skipped = "TrackSkipped";
pub const WMProfile_V40_DialUpMBR = Guid.initString("fd7f47f1-72a6-45a4-80f0-3aecefc32c07");
pub const WMProfile_V40_IntranetMBR = Guid.initString("82cd3321-a94a-4ffc-9c2b-092c10ca16e7");
pub const WMProfile_V40_2856100MBR = Guid.initString("5a1c2206-dc5e-4186-beb2-4c5a994b132e");
pub const WMProfile_V40_6VoiceAudio = Guid.initString("d508978a-11a0-4d15-b0da-acdc99d4f890");
pub const WMProfile_V40_16AMRadio = Guid.initString("0f4be81f-d57d-41e1-b2e3-2fad986bfec2");
pub const WMProfile_V40_288FMRadioMono = Guid.initString("7fa57fc8-6ea4-4645-8abf-b6e5a8f814a1");
pub const WMProfile_V40_288FMRadioStereo = Guid.initString("22fcf466-aa40-431f-a289-06d0ea1a1e40");
pub const WMProfile_V40_56DialUpStereo = Guid.initString("e8026f87-e905-4594-a3c7-00d00041d1d9");
pub const WMProfile_V40_64Audio = Guid.initString("4820b3f7-cbec-41dc-9391-78598714c8e5");
pub const WMProfile_V40_96Audio = Guid.initString("0efa0ee3-9e64-41e2-837f-3c0038f327ba");
pub const WMProfile_V40_128Audio = Guid.initString("93ddbe12-13dc-4e32-a35e-40378e34279a");
pub const WMProfile_V40_288VideoVoice = Guid.initString("bb2bc274-0eb6-4da9-b550-ecf7f2b9948f");
pub const WMProfile_V40_288VideoAudio = Guid.initString("ac617f2d-6cbe-4e84-8e9a-ce151a12a354");
pub const WMProfile_V40_288VideoWebServer = Guid.initString("abf2f00d-d555-4815-94ce-8275f3a70bfe");
pub const WMProfile_V40_56DialUpVideo = Guid.initString("e21713bb-652f-4dab-99de-71e04400270f");
pub const WMProfile_V40_56DialUpVideoWebServer = Guid.initString("b756ff10-520f-4749-a399-b780e2fc9250");
pub const WMProfile_V40_100Video = Guid.initString("8f99ddd8-6684-456b-a0a3-33e1316895f0");
pub const WMProfile_V40_250Video = Guid.initString("541841c3-9339-4f7b-9a22-b11540894e42");
pub const WMProfile_V40_512Video = Guid.initString("70440e6d-c4ef-4f84-8cd0-d5c28686e784");
pub const WMProfile_V40_1MBVideo = Guid.initString("b4482a4c-cc17-4b07-a94e-9818d5e0f13f");
pub const WMProfile_V40_3MBVideo = Guid.initString("55374ac0-309b-4396-b88f-e6e292113f28");
pub const WMProfile_V70_DialUpMBR = Guid.initString("5b16e74b-4068-45b5-b80e-7bf8c80d2c2f");
pub const WMProfile_V70_IntranetMBR = Guid.initString("045880dc-34b6-4ca9-a326-73557ed143f3");
pub const WMProfile_V70_2856100MBR = Guid.initString("07df7a25-3fe2-4a5b-8b1e-348b0721ca70");
pub const WMProfile_V70_288VideoVoice = Guid.initString("b952f38e-7dbc-4533-a9ca-b00b1c6e9800");
pub const WMProfile_V70_288VideoAudio = Guid.initString("58bba0ee-896a-4948-9953-85b736f83947");
pub const WMProfile_V70_288VideoWebServer = Guid.initString("70a32e2b-e2df-4ebd-9105-d9ca194a2d50");
pub const WMProfile_V70_56VideoWebServer = Guid.initString("def99e40-57bc-4ab3-b2d1-b6e3caf64257");
pub const WMProfile_V70_64VideoISDN = Guid.initString("c2b7a7e9-7b8e-4992-a1a1-068217a3b311");
pub const WMProfile_V70_100Video = Guid.initString("d9f3c932-5ea9-4c6d-89b4-2686e515426e");
pub const WMProfile_V70_256Video = Guid.initString("afe69b3a-403f-4a1b-8007-0e21cfb3df84");
pub const WMProfile_V70_384Video = Guid.initString("f3d45fbb-8782-44df-97c6-8678e2f9b13d");
pub const WMProfile_V70_768Video = Guid.initString("0326ebb6-f76e-4964-b0db-e729978d35ee");
pub const WMProfile_V70_1500Video = Guid.initString("0b89164a-5490-4686-9e37-5a80884e5146");
pub const WMProfile_V70_2000Video = Guid.initString("aa980124-bf10-4e4f-9afd-4329a7395cff");
pub const WMProfile_V70_700FilmContentVideo = Guid.initString("7a747920-2449-4d76-99cb-fdb0c90484d4");
pub const WMProfile_V70_1500FilmContentVideo = Guid.initString("f6a5f6df-ee3f-434c-a433-523ce55f516b");
pub const WMProfile_V70_6VoiceAudio = Guid.initString("eaba9fbf-b64f-49b3-aa0c-73fbdd150ad0");
pub const WMProfile_V70_288FMRadioMono = Guid.initString("c012a833-a03b-44a5-96dc-ed95cc65582d");
pub const WMProfile_V70_288FMRadioStereo = Guid.initString("e96d67c9-1a39-4dc4-b900-b1184dc83620");
pub const WMProfile_V70_56DialUpStereo = Guid.initString("674ee767-0949-4fac-875e-f4c9c292013b");
pub const WMProfile_V70_64AudioISDN = Guid.initString("91dea458-9d60-4212-9c59-d40919c939e4");
pub const WMProfile_V70_64Audio = Guid.initString("b29cffc6-f131-41db-b5e8-99d8b0b945f4");
pub const WMProfile_V70_96Audio = Guid.initString("a9d4b819-16cc-4a59-9f37-693dbb0302d6");
pub const WMProfile_V70_128Audio = Guid.initString("c64cf5da-df45-40d3-8027-de698d68dc66");
pub const WMProfile_V70_225VideoPDA = Guid.initString("f55ea573-4c02-42b5-9026-a8260c438a9f");
pub const WMProfile_V70_150VideoPDA = Guid.initString("0f472967-e3c6-4797-9694-f0304c5e2f17");
pub const WMProfile_V80_255VideoPDA = Guid.initString("feedbcdf-3fac-4c93-ac0d-47941ec72c0b");
pub const WMProfile_V80_150VideoPDA = Guid.initString("aee16dfa-2c14-4a2f-ad3f-a3034031784f");
pub const WMProfile_V80_28856VideoMBR = Guid.initString("d66920c4-c21f-4ec8-a0b4-95cf2bd57fc4");
pub const WMProfile_V80_100768VideoMBR = Guid.initString("5bdb5a0e-979e-47d3-9596-73b386392a55");
pub const WMProfile_V80_288100VideoMBR = Guid.initString("d8722c69-2419-4b36-b4e0-6e17b60564e5");
pub const WMProfile_V80_288Video = Guid.initString("3df678d9-1352-4186-bbf8-74f0c19b6ae2");
pub const WMProfile_V80_56Video = Guid.initString("254e8a96-2612-405c-8039-f0bf725ced7d");
pub const WMProfile_V80_100Video = Guid.initString("a2e300b4-c2d4-4fc0-b5dd-ecbd948dc0df");
pub const WMProfile_V80_256Video = Guid.initString("bbc75500-33d2-4466-b86b-122b201cc9ae");
pub const WMProfile_V80_384Video = Guid.initString("29b00c2b-09a9-48bd-ad09-cdae117d1da7");
pub const WMProfile_V80_768Video = Guid.initString("74d01102-e71a-4820-8f0d-13d2ec1e4872");
pub const WMProfile_V80_700NTSCVideo = Guid.initString("c8c2985f-e5d9-4538-9e23-9b21bf78f745");
pub const WMProfile_V80_1400NTSCVideo = Guid.initString("931d1bee-617a-4bcd-9905-ccd0786683ee");
pub const WMProfile_V80_384PALVideo = Guid.initString("9227c692-ae62-4f72-a7ea-736062d0e21e");
pub const WMProfile_V80_700PALVideo = Guid.initString("ec298949-639b-45e2-96fd-4ab32d5919c2");
pub const WMProfile_V80_288MonoAudio = Guid.initString("7ea3126d-e1ba-4716-89af-f65cee0c0c67");
pub const WMProfile_V80_288StereoAudio = Guid.initString("7e4cab5c-35dc-45bb-a7c0-19b28070d0cc");
pub const WMProfile_V80_32StereoAudio = Guid.initString("60907f9f-b352-47e5-b210-0ef1f47e9f9d");
pub const WMProfile_V80_48StereoAudio = Guid.initString("5ee06be5-492b-480a-8a8f-12f373ecf9d4");
pub const WMProfile_V80_64StereoAudio = Guid.initString("09bb5bc4-3176-457f-8dd6-3cd919123e2d");
pub const WMProfile_V80_96StereoAudio = Guid.initString("1fc81930-61f2-436f-9d33-349f2a1c0f10");
pub const WMProfile_V80_128StereoAudio = Guid.initString("407b9450-8bdc-4ee5-88b8-6f527bd941f2");
pub const WMProfile_V80_288VideoOnly = Guid.initString("8c45b4c7-4aeb-4f78-a5ec-88420b9dadef");
pub const WMProfile_V80_56VideoOnly = Guid.initString("6e2a6955-81df-4943-ba50-68a986a708f6");
pub const WMProfile_V80_FAIRVBRVideo = Guid.initString("3510a862-5850-4886-835f-d78ec6a64042");
pub const WMProfile_V80_HIGHVBRVideo = Guid.initString("0f10d9d3-3b04-4fb0-a3d3-88d4ac854acc");
pub const WMProfile_V80_BESTVBRVideo = Guid.initString("048439ba-309c-440e-9cb4-3dcca3756423");

//--------------------------------------------------------------------------------
// Section: Types (153)
//--------------------------------------------------------------------------------
const CLSID_WindowsMediaPlayer_Value = Guid.initString("6bf52a52-394a-11d3-b153-00c04f79faa6");
pub const CLSID_WindowsMediaPlayer = &CLSID_WindowsMediaPlayer_Value;

pub const WMPOpenState = enum(i32) {
    Undefined = 0,
    PlaylistChanging = 1,
    PlaylistLocating = 2,
    PlaylistConnecting = 3,
    PlaylistLoading = 4,
    PlaylistOpening = 5,
    PlaylistOpenNoMedia = 6,
    PlaylistChanged = 7,
    MediaChanging = 8,
    MediaLocating = 9,
    MediaConnecting = 10,
    MediaLoading = 11,
    MediaOpening = 12,
    MediaOpen = 13,
    BeginCodecAcquisition = 14,
    EndCodecAcquisition = 15,
    BeginLicenseAcquisition = 16,
    EndLicenseAcquisition = 17,
    BeginIndividualization = 18,
    EndIndividualization = 19,
    MediaWaiting = 20,
    OpeningUnknownURL = 21,
};
pub const wmposUndefined = WMPOpenState.Undefined;
pub const wmposPlaylistChanging = WMPOpenState.PlaylistChanging;
pub const wmposPlaylistLocating = WMPOpenState.PlaylistLocating;
pub const wmposPlaylistConnecting = WMPOpenState.PlaylistConnecting;
pub const wmposPlaylistLoading = WMPOpenState.PlaylistLoading;
pub const wmposPlaylistOpening = WMPOpenState.PlaylistOpening;
pub const wmposPlaylistOpenNoMedia = WMPOpenState.PlaylistOpenNoMedia;
pub const wmposPlaylistChanged = WMPOpenState.PlaylistChanged;
pub const wmposMediaChanging = WMPOpenState.MediaChanging;
pub const wmposMediaLocating = WMPOpenState.MediaLocating;
pub const wmposMediaConnecting = WMPOpenState.MediaConnecting;
pub const wmposMediaLoading = WMPOpenState.MediaLoading;
pub const wmposMediaOpening = WMPOpenState.MediaOpening;
pub const wmposMediaOpen = WMPOpenState.MediaOpen;
pub const wmposBeginCodecAcquisition = WMPOpenState.BeginCodecAcquisition;
pub const wmposEndCodecAcquisition = WMPOpenState.EndCodecAcquisition;
pub const wmposBeginLicenseAcquisition = WMPOpenState.BeginLicenseAcquisition;
pub const wmposEndLicenseAcquisition = WMPOpenState.EndLicenseAcquisition;
pub const wmposBeginIndividualization = WMPOpenState.BeginIndividualization;
pub const wmposEndIndividualization = WMPOpenState.EndIndividualization;
pub const wmposMediaWaiting = WMPOpenState.MediaWaiting;
pub const wmposOpeningUnknownURL = WMPOpenState.OpeningUnknownURL;

pub const WMPPlayState = enum(i32) {
    Undefined = 0,
    Stopped = 1,
    Paused = 2,
    Playing = 3,
    ScanForward = 4,
    ScanReverse = 5,
    Buffering = 6,
    Waiting = 7,
    MediaEnded = 8,
    Transitioning = 9,
    Ready = 10,
    Reconnecting = 11,
    Last = 12,
};
pub const wmppsUndefined = WMPPlayState.Undefined;
pub const wmppsStopped = WMPPlayState.Stopped;
pub const wmppsPaused = WMPPlayState.Paused;
pub const wmppsPlaying = WMPPlayState.Playing;
pub const wmppsScanForward = WMPPlayState.ScanForward;
pub const wmppsScanReverse = WMPPlayState.ScanReverse;
pub const wmppsBuffering = WMPPlayState.Buffering;
pub const wmppsWaiting = WMPPlayState.Waiting;
pub const wmppsMediaEnded = WMPPlayState.MediaEnded;
pub const wmppsTransitioning = WMPPlayState.Transitioning;
pub const wmppsReady = WMPPlayState.Ready;
pub const wmppsReconnecting = WMPPlayState.Reconnecting;
pub const wmppsLast = WMPPlayState.Last;

pub const WMPPlaylistChangeEventType = enum(i32) {
    Unknown = 0,
    Clear = 1,
    InfoChange = 2,
    Move = 3,
    Delete = 4,
    Insert = 5,
    Append = 6,
    Private = 7,
    NameChange = 8,
    Morph = 9,
    Sort = 10,
    Last = 11,
};
pub const wmplcUnknown = WMPPlaylistChangeEventType.Unknown;
pub const wmplcClear = WMPPlaylistChangeEventType.Clear;
pub const wmplcInfoChange = WMPPlaylistChangeEventType.InfoChange;
pub const wmplcMove = WMPPlaylistChangeEventType.Move;
pub const wmplcDelete = WMPPlaylistChangeEventType.Delete;
pub const wmplcInsert = WMPPlaylistChangeEventType.Insert;
pub const wmplcAppend = WMPPlaylistChangeEventType.Append;
pub const wmplcPrivate = WMPPlaylistChangeEventType.Private;
pub const wmplcNameChange = WMPPlaylistChangeEventType.NameChange;
pub const wmplcMorph = WMPPlaylistChangeEventType.Morph;
pub const wmplcSort = WMPPlaylistChangeEventType.Sort;
pub const wmplcLast = WMPPlaylistChangeEventType.Last;

const IID_IWMPErrorItem_Value = Guid.initString("3614c646-3b3b-4de7-a81e-930e3f2127b3");
pub const IID_IWMPErrorItem = &IID_IWMPErrorItem_Value;
pub const IWMPErrorItem = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_errorCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPErrorItem,
            phr: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_errorDescription: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPErrorItem,
            pbstr_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_errorContext: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPErrorItem,
            pvar_context: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_remedy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPErrorItem,
            pl_remedy: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_customUrl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPErrorItem,
            pbstr_custom_url: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getErrorCode(self: *const T, phr_: ?*i32) HRESULT {
                return @as(*const IWMPErrorItem.VTable, @ptrCast(self.vtable)).get_errorCode(@as(*const IWMPErrorItem, @ptrCast(self)), phr_);
            }
            pub inline fn getErrorDescription(self: *const T, pbstr_description_: ?*?BSTR) HRESULT {
                return @as(*const IWMPErrorItem.VTable, @ptrCast(self.vtable)).get_errorDescription(@as(*const IWMPErrorItem, @ptrCast(self)), pbstr_description_);
            }
            pub inline fn getErrorContext(self: *const T, pvar_context_: ?*VARIANT) HRESULT {
                return @as(*const IWMPErrorItem.VTable, @ptrCast(self.vtable)).get_errorContext(@as(*const IWMPErrorItem, @ptrCast(self)), pvar_context_);
            }
            pub inline fn getRemedy(self: *const T, pl_remedy_: ?*i32) HRESULT {
                return @as(*const IWMPErrorItem.VTable, @ptrCast(self.vtable)).get_remedy(@as(*const IWMPErrorItem, @ptrCast(self)), pl_remedy_);
            }
            pub inline fn getCustomUrl(self: *const T, pbstr_custom_url_: ?*?BSTR) HRESULT {
                return @as(*const IWMPErrorItem.VTable, @ptrCast(self.vtable)).get_customUrl(@as(*const IWMPErrorItem, @ptrCast(self)), pbstr_custom_url_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPError_Value = Guid.initString("a12dcf7d-14ab-4c1b-a8cd-63909f06025b");
pub const IID_IWMPError = &IID_IWMPError_Value;
pub const IWMPError = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        clearErrorQueue: *const fn (
            self: *const IWMPError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_errorCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPError,
            pl_num_errors: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPError,
            dw_index: i32,
            pp_error_item: ?*?*IWMPErrorItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        webHelp: *const fn (
            self: *const IWMPError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn clearErrorQueue(self: *const T) HRESULT {
                return @as(*const IWMPError.VTable, @ptrCast(self.vtable)).clearErrorQueue(@as(*const IWMPError, @ptrCast(self)));
            }
            pub inline fn getErrorCount(self: *const T, pl_num_errors_: ?*i32) HRESULT {
                return @as(*const IWMPError.VTable, @ptrCast(self.vtable)).get_errorCount(@as(*const IWMPError, @ptrCast(self)), pl_num_errors_);
            }
            pub inline fn getItem(self: *const T, dw_index_: i32, pp_error_item_: ?*?*IWMPErrorItem) HRESULT {
                return @as(*const IWMPError.VTable, @ptrCast(self.vtable)).get_item(@as(*const IWMPError, @ptrCast(self)), dw_index_, pp_error_item_);
            }
            pub inline fn webHelp(self: *const T) HRESULT {
                return @as(*const IWMPError.VTable, @ptrCast(self.vtable)).webHelp(@as(*const IWMPError, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPMedia_Value = Guid.initString("94d55e95-3fac-11d3-b155-00c04f79faa6");
pub const IID_IWMPMedia = &IID_IWMPMedia_Value;
pub const IWMPMedia = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isIdentical: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPMedia,
            p_i_w_m_p_media: ?*IWMPMedia,
            pvbool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_sourceURL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPMedia,
            pbstr_source_u_r_l: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPMedia,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPMedia,
            bstr_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_imageSourceWidth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPMedia,
            p_width: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_imageSourceHeight: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPMedia,
            p_height: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_markerCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPMedia,
            p_marker_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getMarkerTime: *const fn (
            self: *const IWMPMedia,
            marker_num: i32,
            p_marker_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getMarkerName: *const fn (
            self: *const IWMPMedia,
            marker_num: i32,
            pbstr_marker_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_duration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPMedia,
            p_duration: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_durationString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPMedia,
            pbstr_duration: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_attributeCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPMedia,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAttributeName: *const fn (
            self: *const IWMPMedia,
            l_index: i32,
            pbstr_item_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getItemInfo: *const fn (
            self: *const IWMPMedia,
            bstr_item_name: ?BSTR,
            pbstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setItemInfo: *const fn (
            self: *const IWMPMedia,
            bstr_item_name: ?BSTR,
            bstr_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getItemInfoByAtom: *const fn (
            self: *const IWMPMedia,
            l_atom: i32,
            pbstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        isMemberOf: *const fn (
            self: *const IWMPMedia,
            p_playlist: ?*IWMPPlaylist,
            pvarf_is_member_of: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        isReadOnlyItem: *const fn (
            self: *const IWMPMedia,
            bstr_item_name: ?BSTR,
            pvarf_is_read_only: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getIsIdentical(self: *const T, p_i_w_m_p_media_: ?*IWMPMedia, pvbool_: ?*i16) HRESULT {
                return @as(*const IWMPMedia.VTable, @ptrCast(self.vtable)).get_isIdentical(@as(*const IWMPMedia, @ptrCast(self)), p_i_w_m_p_media_, pvbool_);
            }
            pub inline fn getSourceURL(self: *const T, pbstr_source_u_r_l_: ?*?BSTR) HRESULT {
                return @as(*const IWMPMedia.VTable, @ptrCast(self.vtable)).get_sourceURL(@as(*const IWMPMedia, @ptrCast(self)), pbstr_source_u_r_l_);
            }
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IWMPMedia.VTable, @ptrCast(self.vtable)).get_name(@as(*const IWMPMedia, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn putName(self: *const T, bstr_name_: ?BSTR) HRESULT {
                return @as(*const IWMPMedia.VTable, @ptrCast(self.vtable)).put_name(@as(*const IWMPMedia, @ptrCast(self)), bstr_name_);
            }
            pub inline fn getImageSourceWidth(self: *const T, p_width_: ?*i32) HRESULT {
                return @as(*const IWMPMedia.VTable, @ptrCast(self.vtable)).get_imageSourceWidth(@as(*const IWMPMedia, @ptrCast(self)), p_width_);
            }
            pub inline fn getImageSourceHeight(self: *const T, p_height_: ?*i32) HRESULT {
                return @as(*const IWMPMedia.VTable, @ptrCast(self.vtable)).get_imageSourceHeight(@as(*const IWMPMedia, @ptrCast(self)), p_height_);
            }
            pub inline fn getMarkerCount(self: *const T, p_marker_count_: ?*i32) HRESULT {
                return @as(*const IWMPMedia.VTable, @ptrCast(self.vtable)).get_markerCount(@as(*const IWMPMedia, @ptrCast(self)), p_marker_count_);
            }
            pub inline fn getMarkerTime(self: *const T, marker_num_: i32, p_marker_time_: ?*f64) HRESULT {
                return @as(*const IWMPMedia.VTable, @ptrCast(self.vtable)).getMarkerTime(@as(*const IWMPMedia, @ptrCast(self)), marker_num_, p_marker_time_);
            }
            pub inline fn getMarkerName(self: *const T, marker_num_: i32, pbstr_marker_name_: ?*?BSTR) HRESULT {
                return @as(*const IWMPMedia.VTable, @ptrCast(self.vtable)).getMarkerName(@as(*const IWMPMedia, @ptrCast(self)), marker_num_, pbstr_marker_name_);
            }
            pub inline fn getDuration(self: *const T, p_duration_: ?*f64) HRESULT {
                return @as(*const IWMPMedia.VTable, @ptrCast(self.vtable)).get_duration(@as(*const IWMPMedia, @ptrCast(self)), p_duration_);
            }
            pub inline fn getDurationString(self: *const T, pbstr_duration_: ?*?BSTR) HRESULT {
                return @as(*const IWMPMedia.VTable, @ptrCast(self.vtable)).get_durationString(@as(*const IWMPMedia, @ptrCast(self)), pbstr_duration_);
            }
            pub inline fn getAttributeCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IWMPMedia.VTable, @ptrCast(self.vtable)).get_attributeCount(@as(*const IWMPMedia, @ptrCast(self)), pl_count_);
            }
            pub inline fn getAttributeName(self: *const T, l_index_: i32, pbstr_item_name_: ?*?BSTR) HRESULT {
                return @as(*const IWMPMedia.VTable, @ptrCast(self.vtable)).getAttributeName(@as(*const IWMPMedia, @ptrCast(self)), l_index_, pbstr_item_name_);
            }
            pub inline fn getItemInfo(self: *const T, bstr_item_name_: ?BSTR, pbstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IWMPMedia.VTable, @ptrCast(self.vtable)).getItemInfo(@as(*const IWMPMedia, @ptrCast(self)), bstr_item_name_, pbstr_val_);
            }
            pub inline fn setItemInfo(self: *const T, bstr_item_name_: ?BSTR, bstr_val_: ?BSTR) HRESULT {
                return @as(*const IWMPMedia.VTable, @ptrCast(self.vtable)).setItemInfo(@as(*const IWMPMedia, @ptrCast(self)), bstr_item_name_, bstr_val_);
            }
            pub inline fn getItemInfoByAtom(self: *const T, l_atom_: i32, pbstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IWMPMedia.VTable, @ptrCast(self.vtable)).getItemInfoByAtom(@as(*const IWMPMedia, @ptrCast(self)), l_atom_, pbstr_val_);
            }
            pub inline fn isMemberOf(self: *const T, p_playlist_: ?*IWMPPlaylist, pvarf_is_member_of_: ?*i16) HRESULT {
                return @as(*const IWMPMedia.VTable, @ptrCast(self.vtable)).isMemberOf(@as(*const IWMPMedia, @ptrCast(self)), p_playlist_, pvarf_is_member_of_);
            }
            pub inline fn isReadOnlyItem(self: *const T, bstr_item_name_: ?BSTR, pvarf_is_read_only_: ?*i16) HRESULT {
                return @as(*const IWMPMedia.VTable, @ptrCast(self.vtable)).isReadOnlyItem(@as(*const IWMPMedia, @ptrCast(self)), bstr_item_name_, pvarf_is_read_only_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPControls_Value = Guid.initString("74c09e02-f828-11d2-a74b-00a0c905f36e");
pub const IID_IWMPControls = &IID_IWMPControls_Value;
pub const IWMPControls = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isAvailable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPControls,
            bstr_item: ?BSTR,
            p_is_available: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        play: *const fn (
            self: *const IWMPControls,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        stop: *const fn (
            self: *const IWMPControls,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        pause: *const fn (
            self: *const IWMPControls,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        fastForward: *const fn (
            self: *const IWMPControls,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        fastReverse: *const fn (
            self: *const IWMPControls,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentPosition: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPControls,
            pd_current_position: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_currentPosition: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPControls,
            d_current_position: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentPositionString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPControls,
            pbstr_current_position: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        next: *const fn (
            self: *const IWMPControls,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        previous: *const fn (
            self: *const IWMPControls,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentItem: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPControls,
            pp_i_w_m_p_media: ?*?*IWMPMedia,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_currentItem: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPControls,
            p_i_w_m_p_media: ?*IWMPMedia,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentMarker: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPControls,
            pl_marker: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_currentMarker: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPControls,
            l_marker: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        playItem: *const fn (
            self: *const IWMPControls,
            p_i_w_m_p_media: ?*IWMPMedia,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getIsAvailable(self: *const T, bstr_item_: ?BSTR, p_is_available_: ?*i16) HRESULT {
                return @as(*const IWMPControls.VTable, @ptrCast(self.vtable)).get_isAvailable(@as(*const IWMPControls, @ptrCast(self)), bstr_item_, p_is_available_);
            }
            pub inline fn play(self: *const T) HRESULT {
                return @as(*const IWMPControls.VTable, @ptrCast(self.vtable)).play(@as(*const IWMPControls, @ptrCast(self)));
            }
            pub inline fn stop(self: *const T) HRESULT {
                return @as(*const IWMPControls.VTable, @ptrCast(self.vtable)).stop(@as(*const IWMPControls, @ptrCast(self)));
            }
            pub inline fn pause(self: *const T) HRESULT {
                return @as(*const IWMPControls.VTable, @ptrCast(self.vtable)).pause(@as(*const IWMPControls, @ptrCast(self)));
            }
            pub inline fn fastForward(self: *const T) HRESULT {
                return @as(*const IWMPControls.VTable, @ptrCast(self.vtable)).fastForward(@as(*const IWMPControls, @ptrCast(self)));
            }
            pub inline fn fastReverse(self: *const T) HRESULT {
                return @as(*const IWMPControls.VTable, @ptrCast(self.vtable)).fastReverse(@as(*const IWMPControls, @ptrCast(self)));
            }
            pub inline fn getCurrentPosition(self: *const T, pd_current_position_: ?*f64) HRESULT {
                return @as(*const IWMPControls.VTable, @ptrCast(self.vtable)).get_currentPosition(@as(*const IWMPControls, @ptrCast(self)), pd_current_position_);
            }
            pub inline fn putCurrentPosition(self: *const T, d_current_position_: f64) HRESULT {
                return @as(*const IWMPControls.VTable, @ptrCast(self.vtable)).put_currentPosition(@as(*const IWMPControls, @ptrCast(self)), d_current_position_);
            }
            pub inline fn getCurrentPositionString(self: *const T, pbstr_current_position_: ?*?BSTR) HRESULT {
                return @as(*const IWMPControls.VTable, @ptrCast(self.vtable)).get_currentPositionString(@as(*const IWMPControls, @ptrCast(self)), pbstr_current_position_);
            }
            pub inline fn next(self: *const T) HRESULT {
                return @as(*const IWMPControls.VTable, @ptrCast(self.vtable)).next(@as(*const IWMPControls, @ptrCast(self)));
            }
            pub inline fn previous(self: *const T) HRESULT {
                return @as(*const IWMPControls.VTable, @ptrCast(self.vtable)).previous(@as(*const IWMPControls, @ptrCast(self)));
            }
            pub inline fn getCurrentItem(self: *const T, pp_i_w_m_p_media_: ?*?*IWMPMedia) HRESULT {
                return @as(*const IWMPControls.VTable, @ptrCast(self.vtable)).get_currentItem(@as(*const IWMPControls, @ptrCast(self)), pp_i_w_m_p_media_);
            }
            pub inline fn putCurrentItem(self: *const T, p_i_w_m_p_media_: ?*IWMPMedia) HRESULT {
                return @as(*const IWMPControls.VTable, @ptrCast(self.vtable)).put_currentItem(@as(*const IWMPControls, @ptrCast(self)), p_i_w_m_p_media_);
            }
            pub inline fn getCurrentMarker(self: *const T, pl_marker_: ?*i32) HRESULT {
                return @as(*const IWMPControls.VTable, @ptrCast(self.vtable)).get_currentMarker(@as(*const IWMPControls, @ptrCast(self)), pl_marker_);
            }
            pub inline fn putCurrentMarker(self: *const T, l_marker_: i32) HRESULT {
                return @as(*const IWMPControls.VTable, @ptrCast(self.vtable)).put_currentMarker(@as(*const IWMPControls, @ptrCast(self)), l_marker_);
            }
            pub inline fn playItem(self: *const T, p_i_w_m_p_media_: ?*IWMPMedia) HRESULT {
                return @as(*const IWMPControls.VTable, @ptrCast(self.vtable)).playItem(@as(*const IWMPControls, @ptrCast(self)), p_i_w_m_p_media_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPSettings_Value = Guid.initString("9104d1ab-80c9-4fed-abf0-2e6417a6df14");
pub const IID_IWMPSettings = &IID_IWMPSettings_Value;
pub const IWMPSettings = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isAvailable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            bstr_item: ?BSTR,
            p_is_available: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_autoStart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            pf_auto_start: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_autoStart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            f_auto_start: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_baseURL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            pbstr_base_u_r_l: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_baseURL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            bstr_base_u_r_l: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defaultFrame: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            pbstr_default_frame: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_defaultFrame: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            bstr_default_frame: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_invokeURLs: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            pf_invoke_u_r_ls: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_invokeURLs: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            f_invoke_u_r_ls: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_mute: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            pf_mute: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_mute: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            f_mute: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_playCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_playCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            l_count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_rate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            pd_rate: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_rate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            d_rate: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_balance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            pl_balance: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_balance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            l_balance: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_volume: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            pl_volume: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_volume: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            l_volume: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getMode: *const fn (
            self: *const IWMPSettings,
            bstr_mode: ?BSTR,
            pvarf_mode: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setMode: *const fn (
            self: *const IWMPSettings,
            bstr_mode: ?BSTR,
            varf_mode: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_enableErrorDialogs: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            pf_enable_error_dialogs: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_enableErrorDialogs: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings,
            f_enable_error_dialogs: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getIsAvailable(self: *const T, bstr_item_: ?BSTR, p_is_available_: ?*i16) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).get_isAvailable(@as(*const IWMPSettings, @ptrCast(self)), bstr_item_, p_is_available_);
            }
            pub inline fn getAutoStart(self: *const T, pf_auto_start_: ?*i16) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).get_autoStart(@as(*const IWMPSettings, @ptrCast(self)), pf_auto_start_);
            }
            pub inline fn putAutoStart(self: *const T, f_auto_start_: i16) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).put_autoStart(@as(*const IWMPSettings, @ptrCast(self)), f_auto_start_);
            }
            pub inline fn getBaseURL(self: *const T, pbstr_base_u_r_l_: ?*?BSTR) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).get_baseURL(@as(*const IWMPSettings, @ptrCast(self)), pbstr_base_u_r_l_);
            }
            pub inline fn putBaseURL(self: *const T, bstr_base_u_r_l_: ?BSTR) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).put_baseURL(@as(*const IWMPSettings, @ptrCast(self)), bstr_base_u_r_l_);
            }
            pub inline fn getDefaultFrame(self: *const T, pbstr_default_frame_: ?*?BSTR) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).get_defaultFrame(@as(*const IWMPSettings, @ptrCast(self)), pbstr_default_frame_);
            }
            pub inline fn putDefaultFrame(self: *const T, bstr_default_frame_: ?BSTR) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).put_defaultFrame(@as(*const IWMPSettings, @ptrCast(self)), bstr_default_frame_);
            }
            pub inline fn getInvokeURLs(self: *const T, pf_invoke_u_r_ls_: ?*i16) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).get_invokeURLs(@as(*const IWMPSettings, @ptrCast(self)), pf_invoke_u_r_ls_);
            }
            pub inline fn putInvokeURLs(self: *const T, f_invoke_u_r_ls_: i16) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).put_invokeURLs(@as(*const IWMPSettings, @ptrCast(self)), f_invoke_u_r_ls_);
            }
            pub inline fn getMute(self: *const T, pf_mute_: ?*i16) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).get_mute(@as(*const IWMPSettings, @ptrCast(self)), pf_mute_);
            }
            pub inline fn putMute(self: *const T, f_mute_: i16) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).put_mute(@as(*const IWMPSettings, @ptrCast(self)), f_mute_);
            }
            pub inline fn getPlayCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).get_playCount(@as(*const IWMPSettings, @ptrCast(self)), pl_count_);
            }
            pub inline fn putPlayCount(self: *const T, l_count_: i32) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).put_playCount(@as(*const IWMPSettings, @ptrCast(self)), l_count_);
            }
            pub inline fn getRate(self: *const T, pd_rate_: ?*f64) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).get_rate(@as(*const IWMPSettings, @ptrCast(self)), pd_rate_);
            }
            pub inline fn putRate(self: *const T, d_rate_: f64) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).put_rate(@as(*const IWMPSettings, @ptrCast(self)), d_rate_);
            }
            pub inline fn getBalance(self: *const T, pl_balance_: ?*i32) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).get_balance(@as(*const IWMPSettings, @ptrCast(self)), pl_balance_);
            }
            pub inline fn putBalance(self: *const T, l_balance_: i32) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).put_balance(@as(*const IWMPSettings, @ptrCast(self)), l_balance_);
            }
            pub inline fn getVolume(self: *const T, pl_volume_: ?*i32) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).get_volume(@as(*const IWMPSettings, @ptrCast(self)), pl_volume_);
            }
            pub inline fn putVolume(self: *const T, l_volume_: i32) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).put_volume(@as(*const IWMPSettings, @ptrCast(self)), l_volume_);
            }
            pub inline fn getMode(self: *const T, bstr_mode_: ?BSTR, pvarf_mode_: ?*i16) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).getMode(@as(*const IWMPSettings, @ptrCast(self)), bstr_mode_, pvarf_mode_);
            }
            pub inline fn setMode(self: *const T, bstr_mode_: ?BSTR, varf_mode_: i16) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).setMode(@as(*const IWMPSettings, @ptrCast(self)), bstr_mode_, varf_mode_);
            }
            pub inline fn getEnableErrorDialogs(self: *const T, pf_enable_error_dialogs_: ?*i16) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).get_enableErrorDialogs(@as(*const IWMPSettings, @ptrCast(self)), pf_enable_error_dialogs_);
            }
            pub inline fn putEnableErrorDialogs(self: *const T, f_enable_error_dialogs_: i16) HRESULT {
                return @as(*const IWMPSettings.VTable, @ptrCast(self.vtable)).put_enableErrorDialogs(@as(*const IWMPSettings, @ptrCast(self)), f_enable_error_dialogs_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPClosedCaption_Value = Guid.initString("4f2df574-c588-11d3-9ed0-00c04fb6e937");
pub const IID_IWMPClosedCaption = &IID_IWMPClosedCaption_Value;
pub const IWMPClosedCaption = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SAMIStyle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPClosedCaption,
            pbstr_s_a_m_i_style: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SAMIStyle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPClosedCaption,
            bstr_s_a_m_i_style: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SAMILang: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPClosedCaption,
            pbstr_s_a_m_i_lang: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SAMILang: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPClosedCaption,
            bstr_s_a_m_i_lang: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SAMIFileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPClosedCaption,
            pbstr_s_a_m_i_file_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SAMIFileName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPClosedCaption,
            bstr_s_a_m_i_file_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_captioningId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPClosedCaption,
            pbstr_captioning_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_captioningId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPClosedCaption,
            bstr_captioning_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSAMIStyle(self: *const T, pbstr_s_a_m_i_style_: ?*?BSTR) HRESULT {
                return @as(*const IWMPClosedCaption.VTable, @ptrCast(self.vtable)).get_SAMIStyle(@as(*const IWMPClosedCaption, @ptrCast(self)), pbstr_s_a_m_i_style_);
            }
            pub inline fn putSAMIStyle(self: *const T, bstr_s_a_m_i_style_: ?BSTR) HRESULT {
                return @as(*const IWMPClosedCaption.VTable, @ptrCast(self.vtable)).put_SAMIStyle(@as(*const IWMPClosedCaption, @ptrCast(self)), bstr_s_a_m_i_style_);
            }
            pub inline fn getSAMILang(self: *const T, pbstr_s_a_m_i_lang_: ?*?BSTR) HRESULT {
                return @as(*const IWMPClosedCaption.VTable, @ptrCast(self.vtable)).get_SAMILang(@as(*const IWMPClosedCaption, @ptrCast(self)), pbstr_s_a_m_i_lang_);
            }
            pub inline fn putSAMILang(self: *const T, bstr_s_a_m_i_lang_: ?BSTR) HRESULT {
                return @as(*const IWMPClosedCaption.VTable, @ptrCast(self.vtable)).put_SAMILang(@as(*const IWMPClosedCaption, @ptrCast(self)), bstr_s_a_m_i_lang_);
            }
            pub inline fn getSAMIFileName(self: *const T, pbstr_s_a_m_i_file_name_: ?*?BSTR) HRESULT {
                return @as(*const IWMPClosedCaption.VTable, @ptrCast(self.vtable)).get_SAMIFileName(@as(*const IWMPClosedCaption, @ptrCast(self)), pbstr_s_a_m_i_file_name_);
            }
            pub inline fn putSAMIFileName(self: *const T, bstr_s_a_m_i_file_name_: ?BSTR) HRESULT {
                return @as(*const IWMPClosedCaption.VTable, @ptrCast(self.vtable)).put_SAMIFileName(@as(*const IWMPClosedCaption, @ptrCast(self)), bstr_s_a_m_i_file_name_);
            }
            pub inline fn getCaptioningId(self: *const T, pbstr_captioning_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IWMPClosedCaption.VTable, @ptrCast(self.vtable)).get_captioningId(@as(*const IWMPClosedCaption, @ptrCast(self)), pbstr_captioning_i_d_);
            }
            pub inline fn putCaptioningId(self: *const T, bstr_captioning_i_d_: ?BSTR) HRESULT {
                return @as(*const IWMPClosedCaption.VTable, @ptrCast(self.vtable)).put_captioningId(@as(*const IWMPClosedCaption, @ptrCast(self)), bstr_captioning_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPPlaylist_Value = Guid.initString("d5f0f4f1-130c-11d3-b14e-00c04f79faa6");
pub const IID_IWMPPlaylist = &IID_IWMPPlaylist_Value;
pub const IWMPPlaylist = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlaylist,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlaylist,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlaylist,
            bstr_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_attributeCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlaylist,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_attributeName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlaylist,
            l_index: i32,
            pbstr_attribute_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlaylist,
            l_index: i32,
            pp_i_w_m_p_media: ?*?*IWMPMedia,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getItemInfo: *const fn (
            self: *const IWMPPlaylist,
            bstr_name: ?BSTR,
            pbstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setItemInfo: *const fn (
            self: *const IWMPPlaylist,
            bstr_name: ?BSTR,
            bstr_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isIdentical: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlaylist,
            p_i_w_m_p_playlist: ?*IWMPPlaylist,
            pvbool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        clear: *const fn (
            self: *const IWMPPlaylist,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        insertItem: *const fn (
            self: *const IWMPPlaylist,
            l_index: i32,
            p_i_w_m_p_media: ?*IWMPMedia,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        appendItem: *const fn (
            self: *const IWMPPlaylist,
            p_i_w_m_p_media: ?*IWMPMedia,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeItem: *const fn (
            self: *const IWMPPlaylist,
            p_i_w_m_p_media: ?*IWMPMedia,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        moveItem: *const fn (
            self: *const IWMPPlaylist,
            l_index_old: i32,
            l_index_new: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IWMPPlaylist.VTable, @ptrCast(self.vtable)).get_count(@as(*const IWMPPlaylist, @ptrCast(self)), pl_count_);
            }
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IWMPPlaylist.VTable, @ptrCast(self.vtable)).get_name(@as(*const IWMPPlaylist, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn putName(self: *const T, bstr_name_: ?BSTR) HRESULT {
                return @as(*const IWMPPlaylist.VTable, @ptrCast(self.vtable)).put_name(@as(*const IWMPPlaylist, @ptrCast(self)), bstr_name_);
            }
            pub inline fn getAttributeCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IWMPPlaylist.VTable, @ptrCast(self.vtable)).get_attributeCount(@as(*const IWMPPlaylist, @ptrCast(self)), pl_count_);
            }
            pub inline fn getAttributeName(self: *const T, l_index_: i32, pbstr_attribute_name_: ?*?BSTR) HRESULT {
                return @as(*const IWMPPlaylist.VTable, @ptrCast(self.vtable)).get_attributeName(@as(*const IWMPPlaylist, @ptrCast(self)), l_index_, pbstr_attribute_name_);
            }
            pub inline fn getItem(self: *const T, l_index_: i32, pp_i_w_m_p_media_: ?*?*IWMPMedia) HRESULT {
                return @as(*const IWMPPlaylist.VTable, @ptrCast(self.vtable)).get_item(@as(*const IWMPPlaylist, @ptrCast(self)), l_index_, pp_i_w_m_p_media_);
            }
            pub inline fn getItemInfo(self: *const T, bstr_name_: ?BSTR, pbstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IWMPPlaylist.VTable, @ptrCast(self.vtable)).getItemInfo(@as(*const IWMPPlaylist, @ptrCast(self)), bstr_name_, pbstr_val_);
            }
            pub inline fn setItemInfo(self: *const T, bstr_name_: ?BSTR, bstr_value_: ?BSTR) HRESULT {
                return @as(*const IWMPPlaylist.VTable, @ptrCast(self.vtable)).setItemInfo(@as(*const IWMPPlaylist, @ptrCast(self)), bstr_name_, bstr_value_);
            }
            pub inline fn getIsIdentical(self: *const T, p_i_w_m_p_playlist_: ?*IWMPPlaylist, pvbool_: ?*i16) HRESULT {
                return @as(*const IWMPPlaylist.VTable, @ptrCast(self.vtable)).get_isIdentical(@as(*const IWMPPlaylist, @ptrCast(self)), p_i_w_m_p_playlist_, pvbool_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IWMPPlaylist.VTable, @ptrCast(self.vtable)).clear(@as(*const IWMPPlaylist, @ptrCast(self)));
            }
            pub inline fn insertItem(self: *const T, l_index_: i32, p_i_w_m_p_media_: ?*IWMPMedia) HRESULT {
                return @as(*const IWMPPlaylist.VTable, @ptrCast(self.vtable)).insertItem(@as(*const IWMPPlaylist, @ptrCast(self)), l_index_, p_i_w_m_p_media_);
            }
            pub inline fn appendItem(self: *const T, p_i_w_m_p_media_: ?*IWMPMedia) HRESULT {
                return @as(*const IWMPPlaylist.VTable, @ptrCast(self.vtable)).appendItem(@as(*const IWMPPlaylist, @ptrCast(self)), p_i_w_m_p_media_);
            }
            pub inline fn removeItem(self: *const T, p_i_w_m_p_media_: ?*IWMPMedia) HRESULT {
                return @as(*const IWMPPlaylist.VTable, @ptrCast(self.vtable)).removeItem(@as(*const IWMPPlaylist, @ptrCast(self)), p_i_w_m_p_media_);
            }
            pub inline fn moveItem(self: *const T, l_index_old_: i32, l_index_new_: i32) HRESULT {
                return @as(*const IWMPPlaylist.VTable, @ptrCast(self.vtable)).moveItem(@as(*const IWMPPlaylist, @ptrCast(self)), l_index_old_, l_index_new_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPCdrom_Value = Guid.initString("cfab6e98-8730-11d3-b388-00c04f68574b");
pub const IID_IWMPCdrom = &IID_IWMPCdrom_Value;
pub const IWMPCdrom = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_driveSpecifier: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCdrom,
            pbstr_drive: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_playlist: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCdrom,
            pp_playlist: ?*?*IWMPPlaylist,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        eject: *const fn (
            self: *const IWMPCdrom,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDriveSpecifier(self: *const T, pbstr_drive_: ?*?BSTR) HRESULT {
                return @as(*const IWMPCdrom.VTable, @ptrCast(self.vtable)).get_driveSpecifier(@as(*const IWMPCdrom, @ptrCast(self)), pbstr_drive_);
            }
            pub inline fn getPlaylist(self: *const T, pp_playlist_: ?*?*IWMPPlaylist) HRESULT {
                return @as(*const IWMPCdrom.VTable, @ptrCast(self.vtable)).get_playlist(@as(*const IWMPCdrom, @ptrCast(self)), pp_playlist_);
            }
            pub inline fn eject(self: *const T) HRESULT {
                return @as(*const IWMPCdrom.VTable, @ptrCast(self.vtable)).eject(@as(*const IWMPCdrom, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPCdromCollection_Value = Guid.initString("ee4c8fe2-34b2-11d3-a3bf-006097c9b344");
pub const IID_IWMPCdromCollection = &IID_IWMPCdromCollection_Value;
pub const IWMPCdromCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCdromCollection,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        item: *const fn (
            self: *const IWMPCdromCollection,
            l_index: i32,
            pp_item: ?*?*IWMPCdrom,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getByDriveSpecifier: *const fn (
            self: *const IWMPCdromCollection,
            bstr_drive_specifier: ?BSTR,
            pp_cdrom: ?*?*IWMPCdrom,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IWMPCdromCollection.VTable, @ptrCast(self.vtable)).get_count(@as(*const IWMPCdromCollection, @ptrCast(self)), pl_count_);
            }
            pub inline fn item(self: *const T, l_index_: i32, pp_item_: ?*?*IWMPCdrom) HRESULT {
                return @as(*const IWMPCdromCollection.VTable, @ptrCast(self.vtable)).item(@as(*const IWMPCdromCollection, @ptrCast(self)), l_index_, pp_item_);
            }
            pub inline fn getByDriveSpecifier(self: *const T, bstr_drive_specifier_: ?BSTR, pp_cdrom_: ?*?*IWMPCdrom) HRESULT {
                return @as(*const IWMPCdromCollection.VTable, @ptrCast(self.vtable)).getByDriveSpecifier(@as(*const IWMPCdromCollection, @ptrCast(self)), bstr_drive_specifier_, pp_cdrom_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPStringCollection_Value = Guid.initString("4a976298-8c0d-11d3-b389-00c04f68574b");
pub const IID_IWMPStringCollection = &IID_IWMPStringCollection_Value;
pub const IWMPStringCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPStringCollection,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        item: *const fn (
            self: *const IWMPStringCollection,
            l_index: i32,
            pbstr_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IWMPStringCollection.VTable, @ptrCast(self.vtable)).get_count(@as(*const IWMPStringCollection, @ptrCast(self)), pl_count_);
            }
            pub inline fn item(self: *const T, l_index_: i32, pbstr_string_: ?*?BSTR) HRESULT {
                return @as(*const IWMPStringCollection.VTable, @ptrCast(self.vtable)).item(@as(*const IWMPStringCollection, @ptrCast(self)), l_index_, pbstr_string_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPMediaCollection_Value = Guid.initString("8363bc22-b4b4-4b19-989d-1cd765749dd1");
pub const IID_IWMPMediaCollection = &IID_IWMPMediaCollection_Value;
pub const IWMPMediaCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        add: *const fn (
            self: *const IWMPMediaCollection,
            bstr_u_r_l: ?BSTR,
            pp_item: ?*?*IWMPMedia,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAll: *const fn (
            self: *const IWMPMediaCollection,
            pp_media_items: ?*?*IWMPPlaylist,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getByName: *const fn (
            self: *const IWMPMediaCollection,
            bstr_name: ?BSTR,
            pp_media_items: ?*?*IWMPPlaylist,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getByGenre: *const fn (
            self: *const IWMPMediaCollection,
            bstr_genre: ?BSTR,
            pp_media_items: ?*?*IWMPPlaylist,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getByAuthor: *const fn (
            self: *const IWMPMediaCollection,
            bstr_author: ?BSTR,
            pp_media_items: ?*?*IWMPPlaylist,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getByAlbum: *const fn (
            self: *const IWMPMediaCollection,
            bstr_album: ?BSTR,
            pp_media_items: ?*?*IWMPPlaylist,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getByAttribute: *const fn (
            self: *const IWMPMediaCollection,
            bstr_attribute: ?BSTR,
            bstr_value: ?BSTR,
            pp_media_items: ?*?*IWMPPlaylist,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        remove: *const fn (
            self: *const IWMPMediaCollection,
            p_item: ?*IWMPMedia,
            varf_delete_file: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAttributeStringCollection: *const fn (
            self: *const IWMPMediaCollection,
            bstr_attribute: ?BSTR,
            bstr_media_type: ?BSTR,
            pp_string_collection: ?*?*IWMPStringCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getMediaAtom: *const fn (
            self: *const IWMPMediaCollection,
            bstr_item_name: ?BSTR,
            pl_atom: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setDeleted: *const fn (
            self: *const IWMPMediaCollection,
            p_item: ?*IWMPMedia,
            varf_is_deleted: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        isDeleted: *const fn (
            self: *const IWMPMediaCollection,
            p_item: ?*IWMPMedia,
            pvarf_is_deleted: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn add(self: *const T, bstr_u_r_l_: ?BSTR, pp_item_: ?*?*IWMPMedia) HRESULT {
                return @as(*const IWMPMediaCollection.VTable, @ptrCast(self.vtable)).add(@as(*const IWMPMediaCollection, @ptrCast(self)), bstr_u_r_l_, pp_item_);
            }
            pub inline fn getAll(self: *const T, pp_media_items_: ?*?*IWMPPlaylist) HRESULT {
                return @as(*const IWMPMediaCollection.VTable, @ptrCast(self.vtable)).getAll(@as(*const IWMPMediaCollection, @ptrCast(self)), pp_media_items_);
            }
            pub inline fn getByName(self: *const T, bstr_name_: ?BSTR, pp_media_items_: ?*?*IWMPPlaylist) HRESULT {
                return @as(*const IWMPMediaCollection.VTable, @ptrCast(self.vtable)).getByName(@as(*const IWMPMediaCollection, @ptrCast(self)), bstr_name_, pp_media_items_);
            }
            pub inline fn getByGenre(self: *const T, bstr_genre_: ?BSTR, pp_media_items_: ?*?*IWMPPlaylist) HRESULT {
                return @as(*const IWMPMediaCollection.VTable, @ptrCast(self.vtable)).getByGenre(@as(*const IWMPMediaCollection, @ptrCast(self)), bstr_genre_, pp_media_items_);
            }
            pub inline fn getByAuthor(self: *const T, bstr_author_: ?BSTR, pp_media_items_: ?*?*IWMPPlaylist) HRESULT {
                return @as(*const IWMPMediaCollection.VTable, @ptrCast(self.vtable)).getByAuthor(@as(*const IWMPMediaCollection, @ptrCast(self)), bstr_author_, pp_media_items_);
            }
            pub inline fn getByAlbum(self: *const T, bstr_album_: ?BSTR, pp_media_items_: ?*?*IWMPPlaylist) HRESULT {
                return @as(*const IWMPMediaCollection.VTable, @ptrCast(self.vtable)).getByAlbum(@as(*const IWMPMediaCollection, @ptrCast(self)), bstr_album_, pp_media_items_);
            }
            pub inline fn getByAttribute(self: *const T, bstr_attribute_: ?BSTR, bstr_value_: ?BSTR, pp_media_items_: ?*?*IWMPPlaylist) HRESULT {
                return @as(*const IWMPMediaCollection.VTable, @ptrCast(self.vtable)).getByAttribute(@as(*const IWMPMediaCollection, @ptrCast(self)), bstr_attribute_, bstr_value_, pp_media_items_);
            }
            pub inline fn remove(self: *const T, p_item_: ?*IWMPMedia, varf_delete_file_: i16) HRESULT {
                return @as(*const IWMPMediaCollection.VTable, @ptrCast(self.vtable)).remove(@as(*const IWMPMediaCollection, @ptrCast(self)), p_item_, varf_delete_file_);
            }
            pub inline fn getAttributeStringCollection(self: *const T, bstr_attribute_: ?BSTR, bstr_media_type_: ?BSTR, pp_string_collection_: ?*?*IWMPStringCollection) HRESULT {
                return @as(*const IWMPMediaCollection.VTable, @ptrCast(self.vtable)).getAttributeStringCollection(@as(*const IWMPMediaCollection, @ptrCast(self)), bstr_attribute_, bstr_media_type_, pp_string_collection_);
            }
            pub inline fn getMediaAtom(self: *const T, bstr_item_name_: ?BSTR, pl_atom_: ?*i32) HRESULT {
                return @as(*const IWMPMediaCollection.VTable, @ptrCast(self.vtable)).getMediaAtom(@as(*const IWMPMediaCollection, @ptrCast(self)), bstr_item_name_, pl_atom_);
            }
            pub inline fn setDeleted(self: *const T, p_item_: ?*IWMPMedia, varf_is_deleted_: i16) HRESULT {
                return @as(*const IWMPMediaCollection.VTable, @ptrCast(self.vtable)).setDeleted(@as(*const IWMPMediaCollection, @ptrCast(self)), p_item_, varf_is_deleted_);
            }
            pub inline fn isDeleted(self: *const T, p_item_: ?*IWMPMedia, pvarf_is_deleted_: ?*i16) HRESULT {
                return @as(*const IWMPMediaCollection.VTable, @ptrCast(self.vtable)).isDeleted(@as(*const IWMPMediaCollection, @ptrCast(self)), p_item_, pvarf_is_deleted_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPPlaylistArray_Value = Guid.initString("679409c0-99f7-11d3-9fb7-00105aa620bb");
pub const IID_IWMPPlaylistArray = &IID_IWMPPlaylistArray_Value;
pub const IWMPPlaylistArray = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlaylistArray,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        item: *const fn (
            self: *const IWMPPlaylistArray,
            l_index: i32,
            pp_item: ?*?*IWMPPlaylist,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IWMPPlaylistArray.VTable, @ptrCast(self.vtable)).get_count(@as(*const IWMPPlaylistArray, @ptrCast(self)), pl_count_);
            }
            pub inline fn item(self: *const T, l_index_: i32, pp_item_: ?*?*IWMPPlaylist) HRESULT {
                return @as(*const IWMPPlaylistArray.VTable, @ptrCast(self.vtable)).item(@as(*const IWMPPlaylistArray, @ptrCast(self)), l_index_, pp_item_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPPlaylistCollection_Value = Guid.initString("10a13217-23a7-439b-b1c0-d847c79b7774");
pub const IID_IWMPPlaylistCollection = &IID_IWMPPlaylistCollection_Value;
pub const IWMPPlaylistCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        newPlaylist: *const fn (
            self: *const IWMPPlaylistCollection,
            bstr_name: ?BSTR,
            pp_item: ?*?*IWMPPlaylist,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAll: *const fn (
            self: *const IWMPPlaylistCollection,
            pp_playlist_array: ?*?*IWMPPlaylistArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getByName: *const fn (
            self: *const IWMPPlaylistCollection,
            bstr_name: ?BSTR,
            pp_playlist_array: ?*?*IWMPPlaylistArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        remove: *const fn (
            self: *const IWMPPlaylistCollection,
            p_item: ?*IWMPPlaylist,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setDeleted: *const fn (
            self: *const IWMPPlaylistCollection,
            p_item: ?*IWMPPlaylist,
            varf_is_deleted: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        isDeleted: *const fn (
            self: *const IWMPPlaylistCollection,
            p_item: ?*IWMPPlaylist,
            pvarf_is_deleted: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        importPlaylist: *const fn (
            self: *const IWMPPlaylistCollection,
            p_item: ?*IWMPPlaylist,
            pp_imported_item: ?*?*IWMPPlaylist,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn newPlaylist(self: *const T, bstr_name_: ?BSTR, pp_item_: ?*?*IWMPPlaylist) HRESULT {
                return @as(*const IWMPPlaylistCollection.VTable, @ptrCast(self.vtable)).newPlaylist(@as(*const IWMPPlaylistCollection, @ptrCast(self)), bstr_name_, pp_item_);
            }
            pub inline fn getAll(self: *const T, pp_playlist_array_: ?*?*IWMPPlaylistArray) HRESULT {
                return @as(*const IWMPPlaylistCollection.VTable, @ptrCast(self.vtable)).getAll(@as(*const IWMPPlaylistCollection, @ptrCast(self)), pp_playlist_array_);
            }
            pub inline fn getByName(self: *const T, bstr_name_: ?BSTR, pp_playlist_array_: ?*?*IWMPPlaylistArray) HRESULT {
                return @as(*const IWMPPlaylistCollection.VTable, @ptrCast(self.vtable)).getByName(@as(*const IWMPPlaylistCollection, @ptrCast(self)), bstr_name_, pp_playlist_array_);
            }
            pub inline fn remove(self: *const T, p_item_: ?*IWMPPlaylist) HRESULT {
                return @as(*const IWMPPlaylistCollection.VTable, @ptrCast(self.vtable)).remove(@as(*const IWMPPlaylistCollection, @ptrCast(self)), p_item_);
            }
            pub inline fn setDeleted(self: *const T, p_item_: ?*IWMPPlaylist, varf_is_deleted_: i16) HRESULT {
                return @as(*const IWMPPlaylistCollection.VTable, @ptrCast(self.vtable)).setDeleted(@as(*const IWMPPlaylistCollection, @ptrCast(self)), p_item_, varf_is_deleted_);
            }
            pub inline fn isDeleted(self: *const T, p_item_: ?*IWMPPlaylist, pvarf_is_deleted_: ?*i16) HRESULT {
                return @as(*const IWMPPlaylistCollection.VTable, @ptrCast(self.vtable)).isDeleted(@as(*const IWMPPlaylistCollection, @ptrCast(self)), p_item_, pvarf_is_deleted_);
            }
            pub inline fn importPlaylist(self: *const T, p_item_: ?*IWMPPlaylist, pp_imported_item_: ?*?*IWMPPlaylist) HRESULT {
                return @as(*const IWMPPlaylistCollection.VTable, @ptrCast(self.vtable)).importPlaylist(@as(*const IWMPPlaylistCollection, @ptrCast(self)), p_item_, pp_imported_item_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPNetwork_Value = Guid.initString("ec21b779-edef-462d-bba4-ad9dde2b29a7");
pub const IID_IWMPNetwork = &IID_IWMPNetwork_Value;
pub const IWMPNetwork = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bandWidth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPNetwork,
            pl_bandwidth: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_recoveredPackets: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPNetwork,
            pl_recovered_packets: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_sourceProtocol: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPNetwork,
            pbstr_source_protocol: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_receivedPackets: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPNetwork,
            pl_received_packets: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_lostPackets: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPNetwork,
            pl_lost_packets: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_receptionQuality: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPNetwork,
            pl_reception_quality: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bufferingCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPNetwork,
            pl_buffering_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bufferingProgress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPNetwork,
            pl_buffering_progress: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bufferingTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPNetwork,
            pl_buffering_time: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_bufferingTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPNetwork,
            l_buffering_time: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_frameRate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPNetwork,
            pl_frame_rate: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxBitRate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPNetwork,
            pl_bit_rate: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_bitRate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPNetwork,
            pl_bit_rate: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProxySettings: *const fn (
            self: *const IWMPNetwork,
            bstr_protocol: ?BSTR,
            pl_proxy_setting: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setProxySettings: *const fn (
            self: *const IWMPNetwork,
            bstr_protocol: ?BSTR,
            l_proxy_setting: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProxyName: *const fn (
            self: *const IWMPNetwork,
            bstr_protocol: ?BSTR,
            pbstr_proxy_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setProxyName: *const fn (
            self: *const IWMPNetwork,
            bstr_protocol: ?BSTR,
            bstr_proxy_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProxyPort: *const fn (
            self: *const IWMPNetwork,
            bstr_protocol: ?BSTR,
            l_proxy_port: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setProxyPort: *const fn (
            self: *const IWMPNetwork,
            bstr_protocol: ?BSTR,
            l_proxy_port: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProxyExceptionList: *const fn (
            self: *const IWMPNetwork,
            bstr_protocol: ?BSTR,
            pbstr_exception_list: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setProxyExceptionList: *const fn (
            self: *const IWMPNetwork,
            bstr_protocol: ?BSTR,
            pbstr_exception_list: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getProxyBypassForLocal: *const fn (
            self: *const IWMPNetwork,
            bstr_protocol: ?BSTR,
            pf_bypass_for_local: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setProxyBypassForLocal: *const fn (
            self: *const IWMPNetwork,
            bstr_protocol: ?BSTR,
            f_bypass_for_local: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_maxBandwidth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPNetwork,
            l_max_bandwidth: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_maxBandwidth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPNetwork,
            l_max_bandwidth: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_downloadProgress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPNetwork,
            pl_download_progress: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_encodedFrameRate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPNetwork,
            pl_frame_rate: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_framesSkipped: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPNetwork,
            pl_frames: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getBandWidth(self: *const T, pl_bandwidth_: ?*i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).get_bandWidth(@as(*const IWMPNetwork, @ptrCast(self)), pl_bandwidth_);
            }
            pub inline fn getRecoveredPackets(self: *const T, pl_recovered_packets_: ?*i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).get_recoveredPackets(@as(*const IWMPNetwork, @ptrCast(self)), pl_recovered_packets_);
            }
            pub inline fn getSourceProtocol(self: *const T, pbstr_source_protocol_: ?*?BSTR) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).get_sourceProtocol(@as(*const IWMPNetwork, @ptrCast(self)), pbstr_source_protocol_);
            }
            pub inline fn getReceivedPackets(self: *const T, pl_received_packets_: ?*i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).get_receivedPackets(@as(*const IWMPNetwork, @ptrCast(self)), pl_received_packets_);
            }
            pub inline fn getLostPackets(self: *const T, pl_lost_packets_: ?*i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).get_lostPackets(@as(*const IWMPNetwork, @ptrCast(self)), pl_lost_packets_);
            }
            pub inline fn getReceptionQuality(self: *const T, pl_reception_quality_: ?*i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).get_receptionQuality(@as(*const IWMPNetwork, @ptrCast(self)), pl_reception_quality_);
            }
            pub inline fn getBufferingCount(self: *const T, pl_buffering_count_: ?*i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).get_bufferingCount(@as(*const IWMPNetwork, @ptrCast(self)), pl_buffering_count_);
            }
            pub inline fn getBufferingProgress(self: *const T, pl_buffering_progress_: ?*i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).get_bufferingProgress(@as(*const IWMPNetwork, @ptrCast(self)), pl_buffering_progress_);
            }
            pub inline fn getBufferingTime(self: *const T, pl_buffering_time_: ?*i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).get_bufferingTime(@as(*const IWMPNetwork, @ptrCast(self)), pl_buffering_time_);
            }
            pub inline fn putBufferingTime(self: *const T, l_buffering_time_: i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).put_bufferingTime(@as(*const IWMPNetwork, @ptrCast(self)), l_buffering_time_);
            }
            pub inline fn getFrameRate(self: *const T, pl_frame_rate_: ?*i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).get_frameRate(@as(*const IWMPNetwork, @ptrCast(self)), pl_frame_rate_);
            }
            pub inline fn getMaxBitRate(self: *const T, pl_bit_rate_: ?*i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).get_maxBitRate(@as(*const IWMPNetwork, @ptrCast(self)), pl_bit_rate_);
            }
            pub inline fn getBitRate(self: *const T, pl_bit_rate_: ?*i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).get_bitRate(@as(*const IWMPNetwork, @ptrCast(self)), pl_bit_rate_);
            }
            pub inline fn getProxySettings(self: *const T, bstr_protocol_: ?BSTR, pl_proxy_setting_: ?*i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).getProxySettings(@as(*const IWMPNetwork, @ptrCast(self)), bstr_protocol_, pl_proxy_setting_);
            }
            pub inline fn setProxySettings(self: *const T, bstr_protocol_: ?BSTR, l_proxy_setting_: i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).setProxySettings(@as(*const IWMPNetwork, @ptrCast(self)), bstr_protocol_, l_proxy_setting_);
            }
            pub inline fn getProxyName(self: *const T, bstr_protocol_: ?BSTR, pbstr_proxy_name_: ?*?BSTR) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).getProxyName(@as(*const IWMPNetwork, @ptrCast(self)), bstr_protocol_, pbstr_proxy_name_);
            }
            pub inline fn setProxyName(self: *const T, bstr_protocol_: ?BSTR, bstr_proxy_name_: ?BSTR) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).setProxyName(@as(*const IWMPNetwork, @ptrCast(self)), bstr_protocol_, bstr_proxy_name_);
            }
            pub inline fn getProxyPort(self: *const T, bstr_protocol_: ?BSTR, l_proxy_port_: ?*i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).getProxyPort(@as(*const IWMPNetwork, @ptrCast(self)), bstr_protocol_, l_proxy_port_);
            }
            pub inline fn setProxyPort(self: *const T, bstr_protocol_: ?BSTR, l_proxy_port_: i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).setProxyPort(@as(*const IWMPNetwork, @ptrCast(self)), bstr_protocol_, l_proxy_port_);
            }
            pub inline fn getProxyExceptionList(self: *const T, bstr_protocol_: ?BSTR, pbstr_exception_list_: ?*?BSTR) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).getProxyExceptionList(@as(*const IWMPNetwork, @ptrCast(self)), bstr_protocol_, pbstr_exception_list_);
            }
            pub inline fn setProxyExceptionList(self: *const T, bstr_protocol_: ?BSTR, pbstr_exception_list_: ?BSTR) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).setProxyExceptionList(@as(*const IWMPNetwork, @ptrCast(self)), bstr_protocol_, pbstr_exception_list_);
            }
            pub inline fn getProxyBypassForLocal(self: *const T, bstr_protocol_: ?BSTR, pf_bypass_for_local_: ?*i16) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).getProxyBypassForLocal(@as(*const IWMPNetwork, @ptrCast(self)), bstr_protocol_, pf_bypass_for_local_);
            }
            pub inline fn setProxyBypassForLocal(self: *const T, bstr_protocol_: ?BSTR, f_bypass_for_local_: i16) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).setProxyBypassForLocal(@as(*const IWMPNetwork, @ptrCast(self)), bstr_protocol_, f_bypass_for_local_);
            }
            pub inline fn getMaxBandwidth(self: *const T, l_max_bandwidth_: ?*i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).get_maxBandwidth(@as(*const IWMPNetwork, @ptrCast(self)), l_max_bandwidth_);
            }
            pub inline fn putMaxBandwidth(self: *const T, l_max_bandwidth_: i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).put_maxBandwidth(@as(*const IWMPNetwork, @ptrCast(self)), l_max_bandwidth_);
            }
            pub inline fn getDownloadProgress(self: *const T, pl_download_progress_: ?*i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).get_downloadProgress(@as(*const IWMPNetwork, @ptrCast(self)), pl_download_progress_);
            }
            pub inline fn getEncodedFrameRate(self: *const T, pl_frame_rate_: ?*i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).get_encodedFrameRate(@as(*const IWMPNetwork, @ptrCast(self)), pl_frame_rate_);
            }
            pub inline fn getFramesSkipped(self: *const T, pl_frames_: ?*i32) HRESULT {
                return @as(*const IWMPNetwork.VTable, @ptrCast(self.vtable)).get_framesSkipped(@as(*const IWMPNetwork, @ptrCast(self)), pl_frames_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPCore_Value = Guid.initString("d84cca99-cce2-11d2-9ecc-0000f8085981");
pub const IID_IWMPCore = &IID_IWMPCore_Value;
pub const IWMPCore = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        close: *const fn (
            self: *const IWMPCore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_URL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCore,
            pbstr_u_r_l: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_URL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCore,
            bstr_u_r_l: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_openState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCore,
            pwmpos: ?*WMPOpenState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_playState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCore,
            pwmpps: ?*WMPPlayState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_controls: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCore,
            pp_control: ?*?*IWMPControls,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_settings: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCore,
            pp_settings: ?*?*IWMPSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentMedia: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCore,
            pp_media: ?*?*IWMPMedia,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_currentMedia: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCore,
            p_media: ?*IWMPMedia,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_mediaCollection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCore,
            pp_media_collection: ?*?*IWMPMediaCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_playlistCollection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCore,
            pp_playlist_collection: ?*?*IWMPPlaylistCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_versionInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCore,
            pbstr_version_info: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        launchURL: *const fn (
            self: *const IWMPCore,
            bstr_u_r_l: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_network: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCore,
            pp_q_n_i: ?*?*IWMPNetwork,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentPlaylist: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCore,
            pp_p_l: ?*?*IWMPPlaylist,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_currentPlaylist: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCore,
            p_p_l: ?*IWMPPlaylist,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_cdromCollection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCore,
            pp_cdrom_collection: ?*?*IWMPCdromCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_closedCaption: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCore,
            pp_closed_caption: ?*?*IWMPClosedCaption,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isOnline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCore,
            pf_online: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_error: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCore,
            pp_error: ?*?*IWMPError,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCore,
            pbstr_status: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).close(@as(*const IWMPCore, @ptrCast(self)));
            }
            pub inline fn getURL(self: *const T, pbstr_u_r_l_: ?*?BSTR) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).get_URL(@as(*const IWMPCore, @ptrCast(self)), pbstr_u_r_l_);
            }
            pub inline fn putURL(self: *const T, bstr_u_r_l_: ?BSTR) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).put_URL(@as(*const IWMPCore, @ptrCast(self)), bstr_u_r_l_);
            }
            pub inline fn getOpenState(self: *const T, pwmpos_: ?*WMPOpenState) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).get_openState(@as(*const IWMPCore, @ptrCast(self)), pwmpos_);
            }
            pub inline fn getPlayState(self: *const T, pwmpps_: ?*WMPPlayState) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).get_playState(@as(*const IWMPCore, @ptrCast(self)), pwmpps_);
            }
            pub inline fn getControls(self: *const T, pp_control_: ?*?*IWMPControls) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).get_controls(@as(*const IWMPCore, @ptrCast(self)), pp_control_);
            }
            pub inline fn getSettings(self: *const T, pp_settings_: ?*?*IWMPSettings) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).get_settings(@as(*const IWMPCore, @ptrCast(self)), pp_settings_);
            }
            pub inline fn getCurrentMedia(self: *const T, pp_media_: ?*?*IWMPMedia) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).get_currentMedia(@as(*const IWMPCore, @ptrCast(self)), pp_media_);
            }
            pub inline fn putCurrentMedia(self: *const T, p_media_: ?*IWMPMedia) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).put_currentMedia(@as(*const IWMPCore, @ptrCast(self)), p_media_);
            }
            pub inline fn getMediaCollection(self: *const T, pp_media_collection_: ?*?*IWMPMediaCollection) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).get_mediaCollection(@as(*const IWMPCore, @ptrCast(self)), pp_media_collection_);
            }
            pub inline fn getPlaylistCollection(self: *const T, pp_playlist_collection_: ?*?*IWMPPlaylistCollection) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).get_playlistCollection(@as(*const IWMPCore, @ptrCast(self)), pp_playlist_collection_);
            }
            pub inline fn getVersionInfo(self: *const T, pbstr_version_info_: ?*?BSTR) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).get_versionInfo(@as(*const IWMPCore, @ptrCast(self)), pbstr_version_info_);
            }
            pub inline fn launchURL(self: *const T, bstr_u_r_l_: ?BSTR) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).launchURL(@as(*const IWMPCore, @ptrCast(self)), bstr_u_r_l_);
            }
            pub inline fn getNetwork(self: *const T, pp_q_n_i_: ?*?*IWMPNetwork) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).get_network(@as(*const IWMPCore, @ptrCast(self)), pp_q_n_i_);
            }
            pub inline fn getCurrentPlaylist(self: *const T, pp_p_l_: ?*?*IWMPPlaylist) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).get_currentPlaylist(@as(*const IWMPCore, @ptrCast(self)), pp_p_l_);
            }
            pub inline fn putCurrentPlaylist(self: *const T, p_p_l_: ?*IWMPPlaylist) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).put_currentPlaylist(@as(*const IWMPCore, @ptrCast(self)), p_p_l_);
            }
            pub inline fn getCdromCollection(self: *const T, pp_cdrom_collection_: ?*?*IWMPCdromCollection) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).get_cdromCollection(@as(*const IWMPCore, @ptrCast(self)), pp_cdrom_collection_);
            }
            pub inline fn getClosedCaption(self: *const T, pp_closed_caption_: ?*?*IWMPClosedCaption) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).get_closedCaption(@as(*const IWMPCore, @ptrCast(self)), pp_closed_caption_);
            }
            pub inline fn getIsOnline(self: *const T, pf_online_: ?*i16) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).get_isOnline(@as(*const IWMPCore, @ptrCast(self)), pf_online_);
            }
            pub inline fn getError(self: *const T, pp_error_: ?*?*IWMPError) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).get_error(@as(*const IWMPCore, @ptrCast(self)), pp_error_);
            }
            pub inline fn getStatus(self: *const T, pbstr_status_: ?*?BSTR) HRESULT {
                return @as(*const IWMPCore.VTable, @ptrCast(self.vtable)).get_status(@as(*const IWMPCore, @ptrCast(self)), pbstr_status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPPlayer_Value = Guid.initString("6bf52a4f-394a-11d3-b153-00c04f79faa6");
pub const IID_IWMPPlayer = &IID_IWMPPlayer_Value;
pub const IWMPPlayer = extern struct {
    pub const VTable = extern struct {
        base: IWMPCore.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer,
            pb_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer,
            b_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fullScreen: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer,
            pb_full_screen: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fullScreen: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer,
            b_full_screen: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_enableContextMenu: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer,
            pb_enable_context_menu: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_enableContextMenu: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer,
            b_enable_context_menu: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_uiMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer,
            bstr_mode: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_uiMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer,
            pbstr_mode: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPCore.MethodMixin(T);
            pub inline fn getEnabled(self: *const T, pb_enabled_: ?*i16) HRESULT {
                return @as(*const IWMPPlayer.VTable, @ptrCast(self.vtable)).get_enabled(@as(*const IWMPPlayer, @ptrCast(self)), pb_enabled_);
            }
            pub inline fn putEnabled(self: *const T, b_enabled_: i16) HRESULT {
                return @as(*const IWMPPlayer.VTable, @ptrCast(self.vtable)).put_enabled(@as(*const IWMPPlayer, @ptrCast(self)), b_enabled_);
            }
            pub inline fn getFullScreen(self: *const T, pb_full_screen_: ?*i16) HRESULT {
                return @as(*const IWMPPlayer.VTable, @ptrCast(self.vtable)).get_fullScreen(@as(*const IWMPPlayer, @ptrCast(self)), pb_full_screen_);
            }
            pub inline fn putFullScreen(self: *const T, b_full_screen_: i16) HRESULT {
                return @as(*const IWMPPlayer.VTable, @ptrCast(self.vtable)).put_fullScreen(@as(*const IWMPPlayer, @ptrCast(self)), b_full_screen_);
            }
            pub inline fn getEnableContextMenu(self: *const T, pb_enable_context_menu_: ?*i16) HRESULT {
                return @as(*const IWMPPlayer.VTable, @ptrCast(self.vtable)).get_enableContextMenu(@as(*const IWMPPlayer, @ptrCast(self)), pb_enable_context_menu_);
            }
            pub inline fn putEnableContextMenu(self: *const T, b_enable_context_menu_: i16) HRESULT {
                return @as(*const IWMPPlayer.VTable, @ptrCast(self.vtable)).put_enableContextMenu(@as(*const IWMPPlayer, @ptrCast(self)), b_enable_context_menu_);
            }
            pub inline fn putUiMode(self: *const T, bstr_mode_: ?BSTR) HRESULT {
                return @as(*const IWMPPlayer.VTable, @ptrCast(self.vtable)).put_uiMode(@as(*const IWMPPlayer, @ptrCast(self)), bstr_mode_);
            }
            pub inline fn getUiMode(self: *const T, pbstr_mode_: ?*?BSTR) HRESULT {
                return @as(*const IWMPPlayer.VTable, @ptrCast(self.vtable)).get_uiMode(@as(*const IWMPPlayer, @ptrCast(self)), pbstr_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPPlayer2_Value = Guid.initString("0e6b01d1-d407-4c85-bf5f-1c01f6150280");
pub const IID_IWMPPlayer2 = &IID_IWMPPlayer2_Value;
pub const IWMPPlayer2 = extern struct {
    pub const VTable = extern struct {
        base: IWMPCore.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer2,
            pb_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer2,
            b_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fullScreen: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer2,
            pb_full_screen: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fullScreen: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer2,
            b_full_screen: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_enableContextMenu: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer2,
            pb_enable_context_menu: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_enableContextMenu: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer2,
            b_enable_context_menu: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_uiMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer2,
            bstr_mode: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_uiMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer2,
            pbstr_mode: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_stretchToFit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer2,
            pb_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_stretchToFit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer2,
            b_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_windowlessVideo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer2,
            pb_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_windowlessVideo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer2,
            b_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPCore.MethodMixin(T);
            pub inline fn getEnabled(self: *const T, pb_enabled_: ?*i16) HRESULT {
                return @as(*const IWMPPlayer2.VTable, @ptrCast(self.vtable)).get_enabled(@as(*const IWMPPlayer2, @ptrCast(self)), pb_enabled_);
            }
            pub inline fn putEnabled(self: *const T, b_enabled_: i16) HRESULT {
                return @as(*const IWMPPlayer2.VTable, @ptrCast(self.vtable)).put_enabled(@as(*const IWMPPlayer2, @ptrCast(self)), b_enabled_);
            }
            pub inline fn getFullScreen(self: *const T, pb_full_screen_: ?*i16) HRESULT {
                return @as(*const IWMPPlayer2.VTable, @ptrCast(self.vtable)).get_fullScreen(@as(*const IWMPPlayer2, @ptrCast(self)), pb_full_screen_);
            }
            pub inline fn putFullScreen(self: *const T, b_full_screen_: i16) HRESULT {
                return @as(*const IWMPPlayer2.VTable, @ptrCast(self.vtable)).put_fullScreen(@as(*const IWMPPlayer2, @ptrCast(self)), b_full_screen_);
            }
            pub inline fn getEnableContextMenu(self: *const T, pb_enable_context_menu_: ?*i16) HRESULT {
                return @as(*const IWMPPlayer2.VTable, @ptrCast(self.vtable)).get_enableContextMenu(@as(*const IWMPPlayer2, @ptrCast(self)), pb_enable_context_menu_);
            }
            pub inline fn putEnableContextMenu(self: *const T, b_enable_context_menu_: i16) HRESULT {
                return @as(*const IWMPPlayer2.VTable, @ptrCast(self.vtable)).put_enableContextMenu(@as(*const IWMPPlayer2, @ptrCast(self)), b_enable_context_menu_);
            }
            pub inline fn putUiMode(self: *const T, bstr_mode_: ?BSTR) HRESULT {
                return @as(*const IWMPPlayer2.VTable, @ptrCast(self.vtable)).put_uiMode(@as(*const IWMPPlayer2, @ptrCast(self)), bstr_mode_);
            }
            pub inline fn getUiMode(self: *const T, pbstr_mode_: ?*?BSTR) HRESULT {
                return @as(*const IWMPPlayer2.VTable, @ptrCast(self.vtable)).get_uiMode(@as(*const IWMPPlayer2, @ptrCast(self)), pbstr_mode_);
            }
            pub inline fn getStretchToFit(self: *const T, pb_enabled_: ?*i16) HRESULT {
                return @as(*const IWMPPlayer2.VTable, @ptrCast(self.vtable)).get_stretchToFit(@as(*const IWMPPlayer2, @ptrCast(self)), pb_enabled_);
            }
            pub inline fn putStretchToFit(self: *const T, b_enabled_: i16) HRESULT {
                return @as(*const IWMPPlayer2.VTable, @ptrCast(self.vtable)).put_stretchToFit(@as(*const IWMPPlayer2, @ptrCast(self)), b_enabled_);
            }
            pub inline fn getWindowlessVideo(self: *const T, pb_enabled_: ?*i16) HRESULT {
                return @as(*const IWMPPlayer2.VTable, @ptrCast(self.vtable)).get_windowlessVideo(@as(*const IWMPPlayer2, @ptrCast(self)), pb_enabled_);
            }
            pub inline fn putWindowlessVideo(self: *const T, b_enabled_: i16) HRESULT {
                return @as(*const IWMPPlayer2.VTable, @ptrCast(self.vtable)).put_windowlessVideo(@as(*const IWMPPlayer2, @ptrCast(self)), b_enabled_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPMedia2_Value = Guid.initString("ab7c88bb-143e-4ea4-acc3-e4350b2106c3");
pub const IID_IWMPMedia2 = &IID_IWMPMedia2_Value;
pub const IWMPMedia2 = extern struct {
    pub const VTable = extern struct {
        base: IWMPMedia.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_error: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPMedia2,
            pp_i_w_m_p_error_item: ?*?*IWMPErrorItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPMedia.MethodMixin(T);
            pub inline fn getError(self: *const T, pp_i_w_m_p_error_item_: ?*?*IWMPErrorItem) HRESULT {
                return @as(*const IWMPMedia2.VTable, @ptrCast(self.vtable)).get_error(@as(*const IWMPMedia2, @ptrCast(self)), pp_i_w_m_p_error_item_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPControls2_Value = Guid.initString("6f030d25-0890-480f-9775-1f7e40ab5b8e");
pub const IID_IWMPControls2 = &IID_IWMPControls2_Value;
pub const IWMPControls2 = extern struct {
    pub const VTable = extern struct {
        base: IWMPControls.VTable,
        step: *const fn (
            self: *const IWMPControls2,
            l_step: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPControls.MethodMixin(T);
            pub inline fn step(self: *const T, l_step_: i32) HRESULT {
                return @as(*const IWMPControls2.VTable, @ptrCast(self.vtable)).step(@as(*const IWMPControls2, @ptrCast(self)), l_step_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPDVD_Value = Guid.initString("8da61686-4668-4a5c-ae5d-803193293dbe");
pub const IID_IWMPDVD = &IID_IWMPDVD_Value;
pub const IWMPDVD = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isAvailable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPDVD,
            bstr_item: ?BSTR,
            p_is_available: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_domain: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPDVD,
            str_domain: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        topMenu: *const fn (
            self: *const IWMPDVD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        titleMenu: *const fn (
            self: *const IWMPDVD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        back: *const fn (
            self: *const IWMPDVD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        @"resume": *const fn (
            self: *const IWMPDVD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getIsAvailable(self: *const T, bstr_item_: ?BSTR, p_is_available_: ?*i16) HRESULT {
                return @as(*const IWMPDVD.VTable, @ptrCast(self.vtable)).get_isAvailable(@as(*const IWMPDVD, @ptrCast(self)), bstr_item_, p_is_available_);
            }
            pub inline fn getDomain(self: *const T, str_domain_: ?*?BSTR) HRESULT {
                return @as(*const IWMPDVD.VTable, @ptrCast(self.vtable)).get_domain(@as(*const IWMPDVD, @ptrCast(self)), str_domain_);
            }
            pub inline fn topMenu(self: *const T) HRESULT {
                return @as(*const IWMPDVD.VTable, @ptrCast(self.vtable)).topMenu(@as(*const IWMPDVD, @ptrCast(self)));
            }
            pub inline fn titleMenu(self: *const T) HRESULT {
                return @as(*const IWMPDVD.VTable, @ptrCast(self.vtable)).titleMenu(@as(*const IWMPDVD, @ptrCast(self)));
            }
            pub inline fn back(self: *const T) HRESULT {
                return @as(*const IWMPDVD.VTable, @ptrCast(self.vtable)).back(@as(*const IWMPDVD, @ptrCast(self)));
            }
            pub inline fn @"resume"(self: *const T) HRESULT {
                return @as(*const IWMPDVD.VTable, @ptrCast(self.vtable)).@"resume"(@as(*const IWMPDVD, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPCore2_Value = Guid.initString("bc17e5b7-7561-4c18-bb90-17d485775659");
pub const IID_IWMPCore2 = &IID_IWMPCore2_Value;
pub const IWMPCore2 = extern struct {
    pub const VTable = extern struct {
        base: IWMPCore.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_dvd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCore2,
            pp_d_v_d: ?*?*IWMPDVD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPCore.MethodMixin(T);
            pub inline fn getDvd(self: *const T, pp_d_v_d_: ?*?*IWMPDVD) HRESULT {
                return @as(*const IWMPCore2.VTable, @ptrCast(self.vtable)).get_dvd(@as(*const IWMPCore2, @ptrCast(self)), pp_d_v_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPPlayer3_Value = Guid.initString("54062b68-052a-4c25-a39f-8b63346511d4");
pub const IID_IWMPPlayer3 = &IID_IWMPPlayer3_Value;
pub const IWMPPlayer3 = extern struct {
    pub const VTable = extern struct {
        base: IWMPCore2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer3,
            pb_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer3,
            b_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fullScreen: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer3,
            pb_full_screen: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fullScreen: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer3,
            b_full_screen: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_enableContextMenu: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer3,
            pb_enable_context_menu: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_enableContextMenu: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer3,
            b_enable_context_menu: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_uiMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer3,
            bstr_mode: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_uiMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer3,
            pbstr_mode: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_stretchToFit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer3,
            pb_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_stretchToFit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer3,
            b_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_windowlessVideo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer3,
            pb_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_windowlessVideo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer3,
            b_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPCore2.MethodMixin(T);
            pub inline fn getEnabled(self: *const T, pb_enabled_: ?*i16) HRESULT {
                return @as(*const IWMPPlayer3.VTable, @ptrCast(self.vtable)).get_enabled(@as(*const IWMPPlayer3, @ptrCast(self)), pb_enabled_);
            }
            pub inline fn putEnabled(self: *const T, b_enabled_: i16) HRESULT {
                return @as(*const IWMPPlayer3.VTable, @ptrCast(self.vtable)).put_enabled(@as(*const IWMPPlayer3, @ptrCast(self)), b_enabled_);
            }
            pub inline fn getFullScreen(self: *const T, pb_full_screen_: ?*i16) HRESULT {
                return @as(*const IWMPPlayer3.VTable, @ptrCast(self.vtable)).get_fullScreen(@as(*const IWMPPlayer3, @ptrCast(self)), pb_full_screen_);
            }
            pub inline fn putFullScreen(self: *const T, b_full_screen_: i16) HRESULT {
                return @as(*const IWMPPlayer3.VTable, @ptrCast(self.vtable)).put_fullScreen(@as(*const IWMPPlayer3, @ptrCast(self)), b_full_screen_);
            }
            pub inline fn getEnableContextMenu(self: *const T, pb_enable_context_menu_: ?*i16) HRESULT {
                return @as(*const IWMPPlayer3.VTable, @ptrCast(self.vtable)).get_enableContextMenu(@as(*const IWMPPlayer3, @ptrCast(self)), pb_enable_context_menu_);
            }
            pub inline fn putEnableContextMenu(self: *const T, b_enable_context_menu_: i16) HRESULT {
                return @as(*const IWMPPlayer3.VTable, @ptrCast(self.vtable)).put_enableContextMenu(@as(*const IWMPPlayer3, @ptrCast(self)), b_enable_context_menu_);
            }
            pub inline fn putUiMode(self: *const T, bstr_mode_: ?BSTR) HRESULT {
                return @as(*const IWMPPlayer3.VTable, @ptrCast(self.vtable)).put_uiMode(@as(*const IWMPPlayer3, @ptrCast(self)), bstr_mode_);
            }
            pub inline fn getUiMode(self: *const T, pbstr_mode_: ?*?BSTR) HRESULT {
                return @as(*const IWMPPlayer3.VTable, @ptrCast(self.vtable)).get_uiMode(@as(*const IWMPPlayer3, @ptrCast(self)), pbstr_mode_);
            }
            pub inline fn getStretchToFit(self: *const T, pb_enabled_: ?*i16) HRESULT {
                return @as(*const IWMPPlayer3.VTable, @ptrCast(self.vtable)).get_stretchToFit(@as(*const IWMPPlayer3, @ptrCast(self)), pb_enabled_);
            }
            pub inline fn putStretchToFit(self: *const T, b_enabled_: i16) HRESULT {
                return @as(*const IWMPPlayer3.VTable, @ptrCast(self.vtable)).put_stretchToFit(@as(*const IWMPPlayer3, @ptrCast(self)), b_enabled_);
            }
            pub inline fn getWindowlessVideo(self: *const T, pb_enabled_: ?*i16) HRESULT {
                return @as(*const IWMPPlayer3.VTable, @ptrCast(self.vtable)).get_windowlessVideo(@as(*const IWMPPlayer3, @ptrCast(self)), pb_enabled_);
            }
            pub inline fn putWindowlessVideo(self: *const T, b_enabled_: i16) HRESULT {
                return @as(*const IWMPPlayer3.VTable, @ptrCast(self.vtable)).put_windowlessVideo(@as(*const IWMPPlayer3, @ptrCast(self)), b_enabled_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPErrorItem2_Value = Guid.initString("f75ccec0-c67c-475c-931e-8719870bee7d");
pub const IID_IWMPErrorItem2 = &IID_IWMPErrorItem2_Value;
pub const IWMPErrorItem2 = extern struct {
    pub const VTable = extern struct {
        base: IWMPErrorItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_condition: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPErrorItem2,
            pl_condition: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPErrorItem.MethodMixin(T);
            pub inline fn getCondition(self: *const T, pl_condition_: ?*i32) HRESULT {
                return @as(*const IWMPErrorItem2.VTable, @ptrCast(self.vtable)).get_condition(@as(*const IWMPErrorItem2, @ptrCast(self)), pl_condition_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPRemoteMediaServices_Value = Guid.initString("cbb92747-741f-44fe-ab5b-f1a48f3b2a59");
pub const IID_IWMPRemoteMediaServices = &IID_IWMPRemoteMediaServices_Value;
pub const IWMPRemoteMediaServices = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetServiceType: *const fn (
            self: *const IWMPRemoteMediaServices,
            pbstr_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationName: *const fn (
            self: *const IWMPRemoteMediaServices,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScriptableObject: *const fn (
            self: *const IWMPRemoteMediaServices,
            pbstr_name: ?*?BSTR,
            pp_dispatch: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCustomUIMode: *const fn (
            self: *const IWMPRemoteMediaServices,
            pbstr_file: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getServiceType(self: *const T, pbstr_type_: ?*?BSTR) HRESULT {
                return @as(*const IWMPRemoteMediaServices.VTable, @ptrCast(self.vtable)).GetServiceType(@as(*const IWMPRemoteMediaServices, @ptrCast(self)), pbstr_type_);
            }
            pub inline fn getApplicationName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IWMPRemoteMediaServices.VTable, @ptrCast(self.vtable)).GetApplicationName(@as(*const IWMPRemoteMediaServices, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn getScriptableObject(self: *const T, pbstr_name_: ?*?BSTR, pp_dispatch_: ?*?*IDispatch) HRESULT {
                return @as(*const IWMPRemoteMediaServices.VTable, @ptrCast(self.vtable)).GetScriptableObject(@as(*const IWMPRemoteMediaServices, @ptrCast(self)), pbstr_name_, pp_dispatch_);
            }
            pub inline fn getCustomUIMode(self: *const T, pbstr_file_: ?*?BSTR) HRESULT {
                return @as(*const IWMPRemoteMediaServices.VTable, @ptrCast(self.vtable)).GetCustomUIMode(@as(*const IWMPRemoteMediaServices, @ptrCast(self)), pbstr_file_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPSkinManager_Value = Guid.initString("076f2fa6-ed30-448b-8cc5-3f3ef3529c7a");
pub const IID_IWMPSkinManager = &IID_IWMPSkinManager_Value;
pub const IWMPSkinManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetVisualStyle: *const fn (
            self: *const IWMPSkinManager,
            bstr_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setVisualStyle(self: *const T, bstr_path_: ?BSTR) HRESULT {
                return @as(*const IWMPSkinManager.VTable, @ptrCast(self.vtable)).SetVisualStyle(@as(*const IWMPSkinManager, @ptrCast(self)), bstr_path_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPMetadataPicture_Value = Guid.initString("5c29bbe0-f87d-4c45-aa28-a70f0230ffa9");
pub const IID_IWMPMetadataPicture = &IID_IWMPMetadataPicture_Value;
pub const IWMPMetadataPicture = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_mimeType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPMetadataPicture,
            pbstr_mime_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pictureType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPMetadataPicture,
            pbstr_picture_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPMetadataPicture,
            pbstr_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_URL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPMetadataPicture,
            pbstr_u_r_l: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getMimeType(self: *const T, pbstr_mime_type_: ?*?BSTR) HRESULT {
                return @as(*const IWMPMetadataPicture.VTable, @ptrCast(self.vtable)).get_mimeType(@as(*const IWMPMetadataPicture, @ptrCast(self)), pbstr_mime_type_);
            }
            pub inline fn getPictureType(self: *const T, pbstr_picture_type_: ?*?BSTR) HRESULT {
                return @as(*const IWMPMetadataPicture.VTable, @ptrCast(self.vtable)).get_pictureType(@as(*const IWMPMetadataPicture, @ptrCast(self)), pbstr_picture_type_);
            }
            pub inline fn getDescription(self: *const T, pbstr_description_: ?*?BSTR) HRESULT {
                return @as(*const IWMPMetadataPicture.VTable, @ptrCast(self.vtable)).get_description(@as(*const IWMPMetadataPicture, @ptrCast(self)), pbstr_description_);
            }
            pub inline fn getURL(self: *const T, pbstr_u_r_l_: ?*?BSTR) HRESULT {
                return @as(*const IWMPMetadataPicture.VTable, @ptrCast(self.vtable)).get_URL(@as(*const IWMPMetadataPicture, @ptrCast(self)), pbstr_u_r_l_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPMetadataText_Value = Guid.initString("769a72db-13d2-45e2-9c48-53ca9d5b7450");
pub const IID_IWMPMetadataText = &IID_IWMPMetadataText_Value;
pub const IWMPMetadataText = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPMetadataText,
            pbstr_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_text: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPMetadataText,
            pbstr_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDescription(self: *const T, pbstr_description_: ?*?BSTR) HRESULT {
                return @as(*const IWMPMetadataText.VTable, @ptrCast(self.vtable)).get_description(@as(*const IWMPMetadataText, @ptrCast(self)), pbstr_description_);
            }
            pub inline fn getText(self: *const T, pbstr_text_: ?*?BSTR) HRESULT {
                return @as(*const IWMPMetadataText.VTable, @ptrCast(self.vtable)).get_text(@as(*const IWMPMetadataText, @ptrCast(self)), pbstr_text_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPMedia3_Value = Guid.initString("f118efc7-f03a-4fb4-99c9-1c02a5c1065b");
pub const IID_IWMPMedia3 = &IID_IWMPMedia3_Value;
pub const IWMPMedia3 = extern struct {
    pub const VTable = extern struct {
        base: IWMPMedia2.VTable,
        getAttributeCountByType: *const fn (
            self: *const IWMPMedia3,
            bstr_type: ?BSTR,
            bstr_language: ?BSTR,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getItemInfoByType: *const fn (
            self: *const IWMPMedia3,
            bstr_type: ?BSTR,
            bstr_language: ?BSTR,
            l_index: i32,
            pvar_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPMedia2.MethodMixin(T);
            pub inline fn getAttributeCountByType(self: *const T, bstr_type_: ?BSTR, bstr_language_: ?BSTR, pl_count_: ?*i32) HRESULT {
                return @as(*const IWMPMedia3.VTable, @ptrCast(self.vtable)).getAttributeCountByType(@as(*const IWMPMedia3, @ptrCast(self)), bstr_type_, bstr_language_, pl_count_);
            }
            pub inline fn getItemInfoByType(self: *const T, bstr_type_: ?BSTR, bstr_language_: ?BSTR, l_index_: i32, pvar_value_: ?*VARIANT) HRESULT {
                return @as(*const IWMPMedia3.VTable, @ptrCast(self.vtable)).getItemInfoByType(@as(*const IWMPMedia3, @ptrCast(self)), bstr_type_, bstr_language_, l_index_, pvar_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPSettings2_Value = Guid.initString("fda937a4-eece-4da5-a0b6-39bf89ade2c2");
pub const IID_IWMPSettings2 = &IID_IWMPSettings2_Value;
pub const IWMPSettings2 = extern struct {
    pub const VTable = extern struct {
        base: IWMPSettings.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_defaultAudioLanguage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings2,
            pl_lang_i_d: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_mediaAccessRights: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSettings2,
            pbstr_rights: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        requestMediaAccessRights: *const fn (
            self: *const IWMPSettings2,
            bstr_desired_access: ?BSTR,
            pvb_accepted: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPSettings.MethodMixin(T);
            pub inline fn getDefaultAudioLanguage(self: *const T, pl_lang_i_d_: ?*i32) HRESULT {
                return @as(*const IWMPSettings2.VTable, @ptrCast(self.vtable)).get_defaultAudioLanguage(@as(*const IWMPSettings2, @ptrCast(self)), pl_lang_i_d_);
            }
            pub inline fn getMediaAccessRights(self: *const T, pbstr_rights_: ?*?BSTR) HRESULT {
                return @as(*const IWMPSettings2.VTable, @ptrCast(self.vtable)).get_mediaAccessRights(@as(*const IWMPSettings2, @ptrCast(self)), pbstr_rights_);
            }
            pub inline fn requestMediaAccessRights(self: *const T, bstr_desired_access_: ?BSTR, pvb_accepted_: ?*i16) HRESULT {
                return @as(*const IWMPSettings2.VTable, @ptrCast(self.vtable)).requestMediaAccessRights(@as(*const IWMPSettings2, @ptrCast(self)), bstr_desired_access_, pvb_accepted_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPControls3_Value = Guid.initString("a1d1110e-d545-476a-9a78-ac3e4cb1e6bd");
pub const IID_IWMPControls3 = &IID_IWMPControls3_Value;
pub const IWMPControls3 = extern struct {
    pub const VTable = extern struct {
        base: IWMPControls2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_audioLanguageCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPControls3,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAudioLanguageID: *const fn (
            self: *const IWMPControls3,
            l_index: i32,
            pl_lang_i_d: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAudioLanguageDescription: *const fn (
            self: *const IWMPControls3,
            l_index: i32,
            pbstr_lang_desc: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentAudioLanguage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPControls3,
            pl_lang_i_d: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_currentAudioLanguage: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPControls3,
            l_lang_i_d: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentAudioLanguageIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPControls3,
            pl_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_currentAudioLanguageIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPControls3,
            l_index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getLanguageName: *const fn (
            self: *const IWMPControls3,
            l_lang_i_d: i32,
            pbstr_lang_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentPositionTimecode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPControls3,
            bstr_timecode: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_currentPositionTimecode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPControls3,
            bstr_timecode: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPControls2.MethodMixin(T);
            pub inline fn getAudioLanguageCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IWMPControls3.VTable, @ptrCast(self.vtable)).get_audioLanguageCount(@as(*const IWMPControls3, @ptrCast(self)), pl_count_);
            }
            pub inline fn getAudioLanguageID(self: *const T, l_index_: i32, pl_lang_i_d_: ?*i32) HRESULT {
                return @as(*const IWMPControls3.VTable, @ptrCast(self.vtable)).getAudioLanguageID(@as(*const IWMPControls3, @ptrCast(self)), l_index_, pl_lang_i_d_);
            }
            pub inline fn getAudioLanguageDescription(self: *const T, l_index_: i32, pbstr_lang_desc_: ?*?BSTR) HRESULT {
                return @as(*const IWMPControls3.VTable, @ptrCast(self.vtable)).getAudioLanguageDescription(@as(*const IWMPControls3, @ptrCast(self)), l_index_, pbstr_lang_desc_);
            }
            pub inline fn getCurrentAudioLanguage(self: *const T, pl_lang_i_d_: ?*i32) HRESULT {
                return @as(*const IWMPControls3.VTable, @ptrCast(self.vtable)).get_currentAudioLanguage(@as(*const IWMPControls3, @ptrCast(self)), pl_lang_i_d_);
            }
            pub inline fn putCurrentAudioLanguage(self: *const T, l_lang_i_d_: i32) HRESULT {
                return @as(*const IWMPControls3.VTable, @ptrCast(self.vtable)).put_currentAudioLanguage(@as(*const IWMPControls3, @ptrCast(self)), l_lang_i_d_);
            }
            pub inline fn getCurrentAudioLanguageIndex(self: *const T, pl_index_: ?*i32) HRESULT {
                return @as(*const IWMPControls3.VTable, @ptrCast(self.vtable)).get_currentAudioLanguageIndex(@as(*const IWMPControls3, @ptrCast(self)), pl_index_);
            }
            pub inline fn putCurrentAudioLanguageIndex(self: *const T, l_index_: i32) HRESULT {
                return @as(*const IWMPControls3.VTable, @ptrCast(self.vtable)).put_currentAudioLanguageIndex(@as(*const IWMPControls3, @ptrCast(self)), l_index_);
            }
            pub inline fn getLanguageName(self: *const T, l_lang_i_d_: i32, pbstr_lang_name_: ?*?BSTR) HRESULT {
                return @as(*const IWMPControls3.VTable, @ptrCast(self.vtable)).getLanguageName(@as(*const IWMPControls3, @ptrCast(self)), l_lang_i_d_, pbstr_lang_name_);
            }
            pub inline fn getCurrentPositionTimecode(self: *const T, bstr_timecode_: ?*?BSTR) HRESULT {
                return @as(*const IWMPControls3.VTable, @ptrCast(self.vtable)).get_currentPositionTimecode(@as(*const IWMPControls3, @ptrCast(self)), bstr_timecode_);
            }
            pub inline fn putCurrentPositionTimecode(self: *const T, bstr_timecode_: ?BSTR) HRESULT {
                return @as(*const IWMPControls3.VTable, @ptrCast(self.vtable)).put_currentPositionTimecode(@as(*const IWMPControls3, @ptrCast(self)), bstr_timecode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPClosedCaption2_Value = Guid.initString("350ba78b-6bc8-4113-a5f5-312056934eb6");
pub const IID_IWMPClosedCaption2 = &IID_IWMPClosedCaption2_Value;
pub const IWMPClosedCaption2 = extern struct {
    pub const VTable = extern struct {
        base: IWMPClosedCaption.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SAMILangCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPClosedCaption2,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getSAMILangName: *const fn (
            self: *const IWMPClosedCaption2,
            n_index: i32,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getSAMILangID: *const fn (
            self: *const IWMPClosedCaption2,
            n_index: i32,
            pl_lang_i_d: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SAMIStyleCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPClosedCaption2,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getSAMIStyleName: *const fn (
            self: *const IWMPClosedCaption2,
            n_index: i32,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPClosedCaption.MethodMixin(T);
            pub inline fn getSAMILangCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IWMPClosedCaption2.VTable, @ptrCast(self.vtable)).get_SAMILangCount(@as(*const IWMPClosedCaption2, @ptrCast(self)), pl_count_);
            }
            pub inline fn getSAMILangName(self: *const T, n_index_: i32, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IWMPClosedCaption2.VTable, @ptrCast(self.vtable)).getSAMILangName(@as(*const IWMPClosedCaption2, @ptrCast(self)), n_index_, pbstr_name_);
            }
            pub inline fn getSAMILangID(self: *const T, n_index_: i32, pl_lang_i_d_: ?*i32) HRESULT {
                return @as(*const IWMPClosedCaption2.VTable, @ptrCast(self.vtable)).getSAMILangID(@as(*const IWMPClosedCaption2, @ptrCast(self)), n_index_, pl_lang_i_d_);
            }
            pub inline fn getSAMIStyleCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IWMPClosedCaption2.VTable, @ptrCast(self.vtable)).get_SAMIStyleCount(@as(*const IWMPClosedCaption2, @ptrCast(self)), pl_count_);
            }
            pub inline fn getSAMIStyleName(self: *const T, n_index_: i32, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IWMPClosedCaption2.VTable, @ptrCast(self.vtable)).getSAMIStyleName(@as(*const IWMPClosedCaption2, @ptrCast(self)), n_index_, pbstr_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPPlayerApplication_Value = Guid.initString("40897764-ceab-47be-ad4a-8e28537f9bbf");
pub const IID_IWMPPlayerApplication = &IID_IWMPPlayerApplication_Value;
pub const IWMPPlayerApplication = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        switchToPlayerApplication: *const fn (
            self: *const IWMPPlayerApplication,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        switchToControl: *const fn (
            self: *const IWMPPlayerApplication,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_playerDocked: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayerApplication,
            pb_player_docked: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hasDisplay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayerApplication,
            pb_has_display: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn switchToPlayerApplication(self: *const T) HRESULT {
                return @as(*const IWMPPlayerApplication.VTable, @ptrCast(self.vtable)).switchToPlayerApplication(@as(*const IWMPPlayerApplication, @ptrCast(self)));
            }
            pub inline fn switchToControl(self: *const T) HRESULT {
                return @as(*const IWMPPlayerApplication.VTable, @ptrCast(self.vtable)).switchToControl(@as(*const IWMPPlayerApplication, @ptrCast(self)));
            }
            pub inline fn getPlayerDocked(self: *const T, pb_player_docked_: ?*i16) HRESULT {
                return @as(*const IWMPPlayerApplication.VTable, @ptrCast(self.vtable)).get_playerDocked(@as(*const IWMPPlayerApplication, @ptrCast(self)), pb_player_docked_);
            }
            pub inline fn getHasDisplay(self: *const T, pb_has_display_: ?*i16) HRESULT {
                return @as(*const IWMPPlayerApplication.VTable, @ptrCast(self.vtable)).get_hasDisplay(@as(*const IWMPPlayerApplication, @ptrCast(self)), pb_has_display_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPCore3_Value = Guid.initString("7587c667-628f-499f-88e7-6a6f4e888464");
pub const IID_IWMPCore3 = &IID_IWMPCore3_Value;
pub const IWMPCore3 = extern struct {
    pub const VTable = extern struct {
        base: IWMPCore2.VTable,
        newPlaylist: *const fn (
            self: *const IWMPCore3,
            bstr_name: ?BSTR,
            bstr_u_r_l: ?BSTR,
            pp_playlist: ?*?*IWMPPlaylist,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        newMedia: *const fn (
            self: *const IWMPCore3,
            bstr_u_r_l: ?BSTR,
            pp_media: ?*?*IWMPMedia,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPCore2.MethodMixin(T);
            pub inline fn newPlaylist(self: *const T, bstr_name_: ?BSTR, bstr_u_r_l_: ?BSTR, pp_playlist_: ?*?*IWMPPlaylist) HRESULT {
                return @as(*const IWMPCore3.VTable, @ptrCast(self.vtable)).newPlaylist(@as(*const IWMPCore3, @ptrCast(self)), bstr_name_, bstr_u_r_l_, pp_playlist_);
            }
            pub inline fn newMedia(self: *const T, bstr_u_r_l_: ?BSTR, pp_media_: ?*?*IWMPMedia) HRESULT {
                return @as(*const IWMPCore3.VTable, @ptrCast(self.vtable)).newMedia(@as(*const IWMPCore3, @ptrCast(self)), bstr_u_r_l_, pp_media_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPPlayer4_Value = Guid.initString("6c497d62-8919-413c-82db-e935fb3ec584");
pub const IID_IWMPPlayer4 = &IID_IWMPPlayer4_Value;
pub const IWMPPlayer4 = extern struct {
    pub const VTable = extern struct {
        base: IWMPCore3.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer4,
            pb_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer4,
            b_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_fullScreen: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer4,
            pb_full_screen: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_fullScreen: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer4,
            b_full_screen: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_enableContextMenu: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer4,
            pb_enable_context_menu: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_enableContextMenu: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer4,
            b_enable_context_menu: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_uiMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer4,
            bstr_mode: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_uiMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer4,
            pbstr_mode: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_stretchToFit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer4,
            pb_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_stretchToFit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer4,
            b_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_windowlessVideo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer4,
            pb_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_windowlessVideo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer4,
            b_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_isRemote: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer4,
            pvarf_is_remote: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_playerApplication: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPPlayer4,
            pp_i_w_m_p_player_application: ?*?*IWMPPlayerApplication,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        openPlayer: *const fn (
            self: *const IWMPPlayer4,
            bstr_u_r_l: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPCore3.MethodMixin(T);
            pub inline fn getEnabled(self: *const T, pb_enabled_: ?*i16) HRESULT {
                return @as(*const IWMPPlayer4.VTable, @ptrCast(self.vtable)).get_enabled(@as(*const IWMPPlayer4, @ptrCast(self)), pb_enabled_);
            }
            pub inline fn putEnabled(self: *const T, b_enabled_: i16) HRESULT {
                return @as(*const IWMPPlayer4.VTable, @ptrCast(self.vtable)).put_enabled(@as(*const IWMPPlayer4, @ptrCast(self)), b_enabled_);
            }
            pub inline fn getFullScreen(self: *const T, pb_full_screen_: ?*i16) HRESULT {
                return @as(*const IWMPPlayer4.VTable, @ptrCast(self.vtable)).get_fullScreen(@as(*const IWMPPlayer4, @ptrCast(self)), pb_full_screen_);
            }
            pub inline fn putFullScreen(self: *const T, b_full_screen_: i16) HRESULT {
                return @as(*const IWMPPlayer4.VTable, @ptrCast(self.vtable)).put_fullScreen(@as(*const IWMPPlayer4, @ptrCast(self)), b_full_screen_);
            }
            pub inline fn getEnableContextMenu(self: *const T, pb_enable_context_menu_: ?*i16) HRESULT {
                return @as(*const IWMPPlayer4.VTable, @ptrCast(self.vtable)).get_enableContextMenu(@as(*const IWMPPlayer4, @ptrCast(self)), pb_enable_context_menu_);
            }
            pub inline fn putEnableContextMenu(self: *const T, b_enable_context_menu_: i16) HRESULT {
                return @as(*const IWMPPlayer4.VTable, @ptrCast(self.vtable)).put_enableContextMenu(@as(*const IWMPPlayer4, @ptrCast(self)), b_enable_context_menu_);
            }
            pub inline fn putUiMode(self: *const T, bstr_mode_: ?BSTR) HRESULT {
                return @as(*const IWMPPlayer4.VTable, @ptrCast(self.vtable)).put_uiMode(@as(*const IWMPPlayer4, @ptrCast(self)), bstr_mode_);
            }
            pub inline fn getUiMode(self: *const T, pbstr_mode_: ?*?BSTR) HRESULT {
                return @as(*const IWMPPlayer4.VTable, @ptrCast(self.vtable)).get_uiMode(@as(*const IWMPPlayer4, @ptrCast(self)), pbstr_mode_);
            }
            pub inline fn getStretchToFit(self: *const T, pb_enabled_: ?*i16) HRESULT {
                return @as(*const IWMPPlayer4.VTable, @ptrCast(self.vtable)).get_stretchToFit(@as(*const IWMPPlayer4, @ptrCast(self)), pb_enabled_);
            }
            pub inline fn putStretchToFit(self: *const T, b_enabled_: i16) HRESULT {
                return @as(*const IWMPPlayer4.VTable, @ptrCast(self.vtable)).put_stretchToFit(@as(*const IWMPPlayer4, @ptrCast(self)), b_enabled_);
            }
            pub inline fn getWindowlessVideo(self: *const T, pb_enabled_: ?*i16) HRESULT {
                return @as(*const IWMPPlayer4.VTable, @ptrCast(self.vtable)).get_windowlessVideo(@as(*const IWMPPlayer4, @ptrCast(self)), pb_enabled_);
            }
            pub inline fn putWindowlessVideo(self: *const T, b_enabled_: i16) HRESULT {
                return @as(*const IWMPPlayer4.VTable, @ptrCast(self.vtable)).put_windowlessVideo(@as(*const IWMPPlayer4, @ptrCast(self)), b_enabled_);
            }
            pub inline fn getIsRemote(self: *const T, pvarf_is_remote_: ?*i16) HRESULT {
                return @as(*const IWMPPlayer4.VTable, @ptrCast(self.vtable)).get_isRemote(@as(*const IWMPPlayer4, @ptrCast(self)), pvarf_is_remote_);
            }
            pub inline fn getPlayerApplication(self: *const T, pp_i_w_m_p_player_application_: ?*?*IWMPPlayerApplication) HRESULT {
                return @as(*const IWMPPlayer4.VTable, @ptrCast(self.vtable)).get_playerApplication(@as(*const IWMPPlayer4, @ptrCast(self)), pp_i_w_m_p_player_application_);
            }
            pub inline fn openPlayer(self: *const T, bstr_u_r_l_: ?BSTR) HRESULT {
                return @as(*const IWMPPlayer4.VTable, @ptrCast(self.vtable)).openPlayer(@as(*const IWMPPlayer4, @ptrCast(self)), bstr_u_r_l_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPPlayerServices_Value = Guid.initString("1d01fbdb-ade2-4c8d-9842-c190b95c3306");
pub const IID_IWMPPlayerServices = &IID_IWMPPlayerServices_Value;
pub const IWMPPlayerServices = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        activateUIPlugin: *const fn (
            self: *const IWMPPlayerServices,
            bstr_plugin: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setTaskPane: *const fn (
            self: *const IWMPPlayerServices,
            bstr_task_pane: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setTaskPaneURL: *const fn (
            self: *const IWMPPlayerServices,
            bstr_task_pane: ?BSTR,
            bstr_u_r_l: ?BSTR,
            bstr_friendly_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn activateUIPlugin(self: *const T, bstr_plugin_: ?BSTR) HRESULT {
                return @as(*const IWMPPlayerServices.VTable, @ptrCast(self.vtable)).activateUIPlugin(@as(*const IWMPPlayerServices, @ptrCast(self)), bstr_plugin_);
            }
            pub inline fn setTaskPane(self: *const T, bstr_task_pane_: ?BSTR) HRESULT {
                return @as(*const IWMPPlayerServices.VTable, @ptrCast(self.vtable)).setTaskPane(@as(*const IWMPPlayerServices, @ptrCast(self)), bstr_task_pane_);
            }
            pub inline fn setTaskPaneURL(self: *const T, bstr_task_pane_: ?BSTR, bstr_u_r_l_: ?BSTR, bstr_friendly_name_: ?BSTR) HRESULT {
                return @as(*const IWMPPlayerServices.VTable, @ptrCast(self.vtable)).setTaskPaneURL(@as(*const IWMPPlayerServices, @ptrCast(self)), bstr_task_pane_, bstr_u_r_l_, bstr_friendly_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WMPSyncState = enum(i32) {
    Unknown = 0,
    Synchronizing = 1,
    Stopped = 2,
    Estimating = 3,
    Last = 4,
};
pub const wmpssUnknown = WMPSyncState.Unknown;
pub const wmpssSynchronizing = WMPSyncState.Synchronizing;
pub const wmpssStopped = WMPSyncState.Stopped;
pub const wmpssEstimating = WMPSyncState.Estimating;
pub const wmpssLast = WMPSyncState.Last;

pub const WMPDeviceStatus = enum(i32) {
    Unknown = 0,
    PartnershipExists = 1,
    PartnershipDeclined = 2,
    PartnershipAnother = 3,
    ManualDevice = 4,
    NewDevice = 5,
    Last = 6,
};
pub const wmpdsUnknown = WMPDeviceStatus.Unknown;
pub const wmpdsPartnershipExists = WMPDeviceStatus.PartnershipExists;
pub const wmpdsPartnershipDeclined = WMPDeviceStatus.PartnershipDeclined;
pub const wmpdsPartnershipAnother = WMPDeviceStatus.PartnershipAnother;
pub const wmpdsManualDevice = WMPDeviceStatus.ManualDevice;
pub const wmpdsNewDevice = WMPDeviceStatus.NewDevice;
pub const wmpdsLast = WMPDeviceStatus.Last;

const IID_IWMPSyncDevice_Value = Guid.initString("82a2986c-0293-4fd0-b279-b21b86c058be");
pub const IID_IWMPSyncDevice = &IID_IWMPSyncDevice_Value;
pub const IWMPSyncDevice = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_friendlyName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSyncDevice,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_friendlyName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSyncDevice,
            bstr_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_deviceName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSyncDevice,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_deviceId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSyncDevice,
            pbstr_device_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_partnershipIndex: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSyncDevice,
            pl_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_connected: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSyncDevice,
            pvb_connected: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSyncDevice,
            pwmpds: ?*WMPDeviceStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_syncState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSyncDevice,
            pwmpss: ?*WMPSyncState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_progress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSyncDevice,
            pl_progress: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getItemInfo: *const fn (
            self: *const IWMPSyncDevice,
            bstr_item_name: ?BSTR,
            pbstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createPartnership: *const fn (
            self: *const IWMPSyncDevice,
            vb_show_u_i: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        deletePartnership: *const fn (
            self: *const IWMPSyncDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        start: *const fn (
            self: *const IWMPSyncDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        stop: *const fn (
            self: *const IWMPSyncDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        showSettings: *const fn (
            self: *const IWMPSyncDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        isIdentical: *const fn (
            self: *const IWMPSyncDevice,
            p_device: ?*IWMPSyncDevice,
            pvbool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFriendlyName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IWMPSyncDevice.VTable, @ptrCast(self.vtable)).get_friendlyName(@as(*const IWMPSyncDevice, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn putFriendlyName(self: *const T, bstr_name_: ?BSTR) HRESULT {
                return @as(*const IWMPSyncDevice.VTable, @ptrCast(self.vtable)).put_friendlyName(@as(*const IWMPSyncDevice, @ptrCast(self)), bstr_name_);
            }
            pub inline fn getDeviceName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IWMPSyncDevice.VTable, @ptrCast(self.vtable)).get_deviceName(@as(*const IWMPSyncDevice, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn getDeviceId(self: *const T, pbstr_device_id_: ?*?BSTR) HRESULT {
                return @as(*const IWMPSyncDevice.VTable, @ptrCast(self.vtable)).get_deviceId(@as(*const IWMPSyncDevice, @ptrCast(self)), pbstr_device_id_);
            }
            pub inline fn getPartnershipIndex(self: *const T, pl_index_: ?*i32) HRESULT {
                return @as(*const IWMPSyncDevice.VTable, @ptrCast(self.vtable)).get_partnershipIndex(@as(*const IWMPSyncDevice, @ptrCast(self)), pl_index_);
            }
            pub inline fn getConnected(self: *const T, pvb_connected_: ?*i16) HRESULT {
                return @as(*const IWMPSyncDevice.VTable, @ptrCast(self.vtable)).get_connected(@as(*const IWMPSyncDevice, @ptrCast(self)), pvb_connected_);
            }
            pub inline fn getStatus(self: *const T, pwmpds_: ?*WMPDeviceStatus) HRESULT {
                return @as(*const IWMPSyncDevice.VTable, @ptrCast(self.vtable)).get_status(@as(*const IWMPSyncDevice, @ptrCast(self)), pwmpds_);
            }
            pub inline fn getSyncState(self: *const T, pwmpss_: ?*WMPSyncState) HRESULT {
                return @as(*const IWMPSyncDevice.VTable, @ptrCast(self.vtable)).get_syncState(@as(*const IWMPSyncDevice, @ptrCast(self)), pwmpss_);
            }
            pub inline fn getProgress(self: *const T, pl_progress_: ?*i32) HRESULT {
                return @as(*const IWMPSyncDevice.VTable, @ptrCast(self.vtable)).get_progress(@as(*const IWMPSyncDevice, @ptrCast(self)), pl_progress_);
            }
            pub inline fn getItemInfo(self: *const T, bstr_item_name_: ?BSTR, pbstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IWMPSyncDevice.VTable, @ptrCast(self.vtable)).getItemInfo(@as(*const IWMPSyncDevice, @ptrCast(self)), bstr_item_name_, pbstr_val_);
            }
            pub inline fn createPartnership(self: *const T, vb_show_u_i_: i16) HRESULT {
                return @as(*const IWMPSyncDevice.VTable, @ptrCast(self.vtable)).createPartnership(@as(*const IWMPSyncDevice, @ptrCast(self)), vb_show_u_i_);
            }
            pub inline fn deletePartnership(self: *const T) HRESULT {
                return @as(*const IWMPSyncDevice.VTable, @ptrCast(self.vtable)).deletePartnership(@as(*const IWMPSyncDevice, @ptrCast(self)));
            }
            pub inline fn start(self: *const T) HRESULT {
                return @as(*const IWMPSyncDevice.VTable, @ptrCast(self.vtable)).start(@as(*const IWMPSyncDevice, @ptrCast(self)));
            }
            pub inline fn stop(self: *const T) HRESULT {
                return @as(*const IWMPSyncDevice.VTable, @ptrCast(self.vtable)).stop(@as(*const IWMPSyncDevice, @ptrCast(self)));
            }
            pub inline fn showSettings(self: *const T) HRESULT {
                return @as(*const IWMPSyncDevice.VTable, @ptrCast(self.vtable)).showSettings(@as(*const IWMPSyncDevice, @ptrCast(self)));
            }
            pub inline fn isIdentical(self: *const T, p_device_: ?*IWMPSyncDevice, pvbool_: ?*i16) HRESULT {
                return @as(*const IWMPSyncDevice.VTable, @ptrCast(self.vtable)).isIdentical(@as(*const IWMPSyncDevice, @ptrCast(self)), p_device_, pvbool_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPSyncServices_Value = Guid.initString("8b5050ff-e0a4-4808-b3a8-893a9e1ed894");
pub const IID_IWMPSyncServices = &IID_IWMPSyncServices_Value;
pub const IWMPSyncServices = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_deviceCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPSyncServices,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getDevice: *const fn (
            self: *const IWMPSyncServices,
            l_index: i32,
            pp_device: ?*?*IWMPSyncDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDeviceCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IWMPSyncServices.VTable, @ptrCast(self.vtable)).get_deviceCount(@as(*const IWMPSyncServices, @ptrCast(self)), pl_count_);
            }
            pub inline fn getDevice(self: *const T, l_index_: i32, pp_device_: ?*?*IWMPSyncDevice) HRESULT {
                return @as(*const IWMPSyncServices.VTable, @ptrCast(self.vtable)).getDevice(@as(*const IWMPSyncServices, @ptrCast(self)), l_index_, pp_device_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPPlayerServices2_Value = Guid.initString("1bb1592f-f040-418a-9f71-17c7512b4d70");
pub const IID_IWMPPlayerServices2 = &IID_IWMPPlayerServices2_Value;
pub const IWMPPlayerServices2 = extern struct {
    pub const VTable = extern struct {
        base: IWMPPlayerServices.VTable,
        setBackgroundProcessingPriority: *const fn (
            self: *const IWMPPlayerServices2,
            bstr_priority: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPPlayerServices.MethodMixin(T);
            pub inline fn setBackgroundProcessingPriority(self: *const T, bstr_priority_: ?BSTR) HRESULT {
                return @as(*const IWMPPlayerServices2.VTable, @ptrCast(self.vtable)).setBackgroundProcessingPriority(@as(*const IWMPPlayerServices2, @ptrCast(self)), bstr_priority_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WMPRipState = enum(i32) {
    Unknown = 0,
    Ripping = 1,
    Stopped = 2,
};
pub const wmprsUnknown = WMPRipState.Unknown;
pub const wmprsRipping = WMPRipState.Ripping;
pub const wmprsStopped = WMPRipState.Stopped;

pub const WMPBurnFormat = enum(i32) {
    AudioCD = 0,
    DataCD = 1,
};
pub const wmpbfAudioCD = WMPBurnFormat.AudioCD;
pub const wmpbfDataCD = WMPBurnFormat.DataCD;

pub const WMPBurnState = enum(i32) {
    Unknown = 0,
    Busy = 1,
    Ready = 2,
    WaitingForDisc = 3,
    RefreshStatusPending = 4,
    PreparingToBurn = 5,
    Burning = 6,
    Stopped = 7,
    Erasing = 8,
    Downloading = 9,
};
pub const wmpbsUnknown = WMPBurnState.Unknown;
pub const wmpbsBusy = WMPBurnState.Busy;
pub const wmpbsReady = WMPBurnState.Ready;
pub const wmpbsWaitingForDisc = WMPBurnState.WaitingForDisc;
pub const wmpbsRefreshStatusPending = WMPBurnState.RefreshStatusPending;
pub const wmpbsPreparingToBurn = WMPBurnState.PreparingToBurn;
pub const wmpbsBurning = WMPBurnState.Burning;
pub const wmpbsStopped = WMPBurnState.Stopped;
pub const wmpbsErasing = WMPBurnState.Erasing;
pub const wmpbsDownloading = WMPBurnState.Downloading;

pub const WMPStringCollectionChangeEventType = enum(i32) {
    Unknown = 0,
    Insert = 1,
    Change = 2,
    Delete = 3,
    Clear = 4,
    BeginUpdates = 5,
    EndUpdates = 6,
};
pub const wmpsccetUnknown = WMPStringCollectionChangeEventType.Unknown;
pub const wmpsccetInsert = WMPStringCollectionChangeEventType.Insert;
pub const wmpsccetChange = WMPStringCollectionChangeEventType.Change;
pub const wmpsccetDelete = WMPStringCollectionChangeEventType.Delete;
pub const wmpsccetClear = WMPStringCollectionChangeEventType.Clear;
pub const wmpsccetBeginUpdates = WMPStringCollectionChangeEventType.BeginUpdates;
pub const wmpsccetEndUpdates = WMPStringCollectionChangeEventType.EndUpdates;

const IID_IWMPCdromRip_Value = Guid.initString("56e2294f-69ed-4629-a869-aea72c0dcc2c");
pub const IID_IWMPCdromRip = &IID_IWMPCdromRip_Value;
pub const IWMPCdromRip = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ripState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCdromRip,
            pwmprs: ?*WMPRipState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ripProgress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCdromRip,
            pl_progress: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startRip: *const fn (
            self: *const IWMPCdromRip,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        stopRip: *const fn (
            self: *const IWMPCdromRip,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getRipState(self: *const T, pwmprs_: ?*WMPRipState) HRESULT {
                return @as(*const IWMPCdromRip.VTable, @ptrCast(self.vtable)).get_ripState(@as(*const IWMPCdromRip, @ptrCast(self)), pwmprs_);
            }
            pub inline fn getRipProgress(self: *const T, pl_progress_: ?*i32) HRESULT {
                return @as(*const IWMPCdromRip.VTable, @ptrCast(self.vtable)).get_ripProgress(@as(*const IWMPCdromRip, @ptrCast(self)), pl_progress_);
            }
            pub inline fn startRip(self: *const T) HRESULT {
                return @as(*const IWMPCdromRip.VTable, @ptrCast(self.vtable)).startRip(@as(*const IWMPCdromRip, @ptrCast(self)));
            }
            pub inline fn stopRip(self: *const T) HRESULT {
                return @as(*const IWMPCdromRip.VTable, @ptrCast(self.vtable)).stopRip(@as(*const IWMPCdromRip, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPCdromBurn_Value = Guid.initString("bd94dbeb-417f-4928-aa06-087d56ed9b59");
pub const IID_IWMPCdromBurn = &IID_IWMPCdromBurn_Value;
pub const IWMPCdromBurn = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        isAvailable: *const fn (
            self: *const IWMPCdromBurn,
            bstr_item: ?BSTR,
            p_is_available: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getItemInfo: *const fn (
            self: *const IWMPCdromBurn,
            bstr_item: ?BSTR,
            pbstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_label: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCdromBurn,
            pbstr_label: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_label: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCdromBurn,
            bstr_label: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_burnFormat: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCdromBurn,
            pwmpbf: ?*WMPBurnFormat,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_burnFormat: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCdromBurn,
            wmpbf: WMPBurnFormat,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_burnPlaylist: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCdromBurn,
            pp_playlist: ?*?*IWMPPlaylist,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_burnPlaylist: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCdromBurn,
            p_playlist: ?*IWMPPlaylist,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        refreshStatus: *const fn (
            self: *const IWMPCdromBurn,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_burnState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCdromBurn,
            pwmpbs: ?*WMPBurnState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_burnProgress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPCdromBurn,
            pl_progress: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startBurn: *const fn (
            self: *const IWMPCdromBurn,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        stopBurn: *const fn (
            self: *const IWMPCdromBurn,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        erase: *const fn (
            self: *const IWMPCdromBurn,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isAvailable(self: *const T, bstr_item_: ?BSTR, p_is_available_: ?*i16) HRESULT {
                return @as(*const IWMPCdromBurn.VTable, @ptrCast(self.vtable)).isAvailable(@as(*const IWMPCdromBurn, @ptrCast(self)), bstr_item_, p_is_available_);
            }
            pub inline fn getItemInfo(self: *const T, bstr_item_: ?BSTR, pbstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IWMPCdromBurn.VTable, @ptrCast(self.vtable)).getItemInfo(@as(*const IWMPCdromBurn, @ptrCast(self)), bstr_item_, pbstr_val_);
            }
            pub inline fn getLabel(self: *const T, pbstr_label_: ?*?BSTR) HRESULT {
                return @as(*const IWMPCdromBurn.VTable, @ptrCast(self.vtable)).get_label(@as(*const IWMPCdromBurn, @ptrCast(self)), pbstr_label_);
            }
            pub inline fn putLabel(self: *const T, bstr_label_: ?BSTR) HRESULT {
                return @as(*const IWMPCdromBurn.VTable, @ptrCast(self.vtable)).put_label(@as(*const IWMPCdromBurn, @ptrCast(self)), bstr_label_);
            }
            pub inline fn getBurnFormat(self: *const T, pwmpbf_: ?*WMPBurnFormat) HRESULT {
                return @as(*const IWMPCdromBurn.VTable, @ptrCast(self.vtable)).get_burnFormat(@as(*const IWMPCdromBurn, @ptrCast(self)), pwmpbf_);
            }
            pub inline fn putBurnFormat(self: *const T, wmpbf_: WMPBurnFormat) HRESULT {
                return @as(*const IWMPCdromBurn.VTable, @ptrCast(self.vtable)).put_burnFormat(@as(*const IWMPCdromBurn, @ptrCast(self)), wmpbf_);
            }
            pub inline fn getBurnPlaylist(self: *const T, pp_playlist_: ?*?*IWMPPlaylist) HRESULT {
                return @as(*const IWMPCdromBurn.VTable, @ptrCast(self.vtable)).get_burnPlaylist(@as(*const IWMPCdromBurn, @ptrCast(self)), pp_playlist_);
            }
            pub inline fn putBurnPlaylist(self: *const T, p_playlist_: ?*IWMPPlaylist) HRESULT {
                return @as(*const IWMPCdromBurn.VTable, @ptrCast(self.vtable)).put_burnPlaylist(@as(*const IWMPCdromBurn, @ptrCast(self)), p_playlist_);
            }
            pub inline fn refreshStatus(self: *const T) HRESULT {
                return @as(*const IWMPCdromBurn.VTable, @ptrCast(self.vtable)).refreshStatus(@as(*const IWMPCdromBurn, @ptrCast(self)));
            }
            pub inline fn getBurnState(self: *const T, pwmpbs_: ?*WMPBurnState) HRESULT {
                return @as(*const IWMPCdromBurn.VTable, @ptrCast(self.vtable)).get_burnState(@as(*const IWMPCdromBurn, @ptrCast(self)), pwmpbs_);
            }
            pub inline fn getBurnProgress(self: *const T, pl_progress_: ?*i32) HRESULT {
                return @as(*const IWMPCdromBurn.VTable, @ptrCast(self.vtable)).get_burnProgress(@as(*const IWMPCdromBurn, @ptrCast(self)), pl_progress_);
            }
            pub inline fn startBurn(self: *const T) HRESULT {
                return @as(*const IWMPCdromBurn.VTable, @ptrCast(self.vtable)).startBurn(@as(*const IWMPCdromBurn, @ptrCast(self)));
            }
            pub inline fn stopBurn(self: *const T) HRESULT {
                return @as(*const IWMPCdromBurn.VTable, @ptrCast(self.vtable)).stopBurn(@as(*const IWMPCdromBurn, @ptrCast(self)));
            }
            pub inline fn erase(self: *const T) HRESULT {
                return @as(*const IWMPCdromBurn.VTable, @ptrCast(self.vtable)).erase(@as(*const IWMPCdromBurn, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPQuery_Value = Guid.initString("a00918f3-a6b0-4bfb-9189-fd834c7bc5a5");
pub const IID_IWMPQuery = &IID_IWMPQuery_Value;
pub const IWMPQuery = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        addCondition: *const fn (
            self: *const IWMPQuery,
            bstr_attribute: ?BSTR,
            bstr_operator: ?BSTR,
            bstr_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        beginNextGroup: *const fn (
            self: *const IWMPQuery,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn addCondition(self: *const T, bstr_attribute_: ?BSTR, bstr_operator_: ?BSTR, bstr_value_: ?BSTR) HRESULT {
                return @as(*const IWMPQuery.VTable, @ptrCast(self.vtable)).addCondition(@as(*const IWMPQuery, @ptrCast(self)), bstr_attribute_, bstr_operator_, bstr_value_);
            }
            pub inline fn beginNextGroup(self: *const T) HRESULT {
                return @as(*const IWMPQuery.VTable, @ptrCast(self.vtable)).beginNextGroup(@as(*const IWMPQuery, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPMediaCollection2_Value = Guid.initString("8ba957f5-fd8c-4791-b82d-f840401ee474");
pub const IID_IWMPMediaCollection2 = &IID_IWMPMediaCollection2_Value;
pub const IWMPMediaCollection2 = extern struct {
    pub const VTable = extern struct {
        base: IWMPMediaCollection.VTable,
        createQuery: *const fn (
            self: *const IWMPMediaCollection2,
            pp_query: ?*?*IWMPQuery,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getPlaylistByQuery: *const fn (
            self: *const IWMPMediaCollection2,
            p_query: ?*IWMPQuery,
            bstr_media_type: ?BSTR,
            bstr_sort_attribute: ?BSTR,
            f_sort_ascending: i16,
            pp_playlist: ?*?*IWMPPlaylist,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getStringCollectionByQuery: *const fn (
            self: *const IWMPMediaCollection2,
            bstr_attribute: ?BSTR,
            p_query: ?*IWMPQuery,
            bstr_media_type: ?BSTR,
            bstr_sort_attribute: ?BSTR,
            f_sort_ascending: i16,
            pp_string_collection: ?*?*IWMPStringCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getByAttributeAndMediaType: *const fn (
            self: *const IWMPMediaCollection2,
            bstr_attribute: ?BSTR,
            bstr_value: ?BSTR,
            bstr_media_type: ?BSTR,
            pp_media_items: ?*?*IWMPPlaylist,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPMediaCollection.MethodMixin(T);
            pub inline fn createQuery(self: *const T, pp_query_: ?*?*IWMPQuery) HRESULT {
                return @as(*const IWMPMediaCollection2.VTable, @ptrCast(self.vtable)).createQuery(@as(*const IWMPMediaCollection2, @ptrCast(self)), pp_query_);
            }
            pub inline fn getPlaylistByQuery(self: *const T, p_query_: ?*IWMPQuery, bstr_media_type_: ?BSTR, bstr_sort_attribute_: ?BSTR, f_sort_ascending_: i16, pp_playlist_: ?*?*IWMPPlaylist) HRESULT {
                return @as(*const IWMPMediaCollection2.VTable, @ptrCast(self.vtable)).getPlaylistByQuery(@as(*const IWMPMediaCollection2, @ptrCast(self)), p_query_, bstr_media_type_, bstr_sort_attribute_, f_sort_ascending_, pp_playlist_);
            }
            pub inline fn getStringCollectionByQuery(self: *const T, bstr_attribute_: ?BSTR, p_query_: ?*IWMPQuery, bstr_media_type_: ?BSTR, bstr_sort_attribute_: ?BSTR, f_sort_ascending_: i16, pp_string_collection_: ?*?*IWMPStringCollection) HRESULT {
                return @as(*const IWMPMediaCollection2.VTable, @ptrCast(self.vtable)).getStringCollectionByQuery(@as(*const IWMPMediaCollection2, @ptrCast(self)), bstr_attribute_, p_query_, bstr_media_type_, bstr_sort_attribute_, f_sort_ascending_, pp_string_collection_);
            }
            pub inline fn getByAttributeAndMediaType(self: *const T, bstr_attribute_: ?BSTR, bstr_value_: ?BSTR, bstr_media_type_: ?BSTR, pp_media_items_: ?*?*IWMPPlaylist) HRESULT {
                return @as(*const IWMPMediaCollection2.VTable, @ptrCast(self.vtable)).getByAttributeAndMediaType(@as(*const IWMPMediaCollection2, @ptrCast(self)), bstr_attribute_, bstr_value_, bstr_media_type_, pp_media_items_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPStringCollection2_Value = Guid.initString("46ad648d-53f1-4a74-92e2-2a1b68d63fd4");
pub const IID_IWMPStringCollection2 = &IID_IWMPStringCollection2_Value;
pub const IWMPStringCollection2 = extern struct {
    pub const VTable = extern struct {
        base: IWMPStringCollection.VTable,
        isIdentical: *const fn (
            self: *const IWMPStringCollection2,
            p_i_w_m_p_string_collection2: ?*IWMPStringCollection2,
            pvbool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getItemInfo: *const fn (
            self: *const IWMPStringCollection2,
            l_collection_index: i32,
            bstr_item_name: ?BSTR,
            pbstr_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAttributeCountByType: *const fn (
            self: *const IWMPStringCollection2,
            l_collection_index: i32,
            bstr_type: ?BSTR,
            bstr_language: ?BSTR,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getItemInfoByType: *const fn (
            self: *const IWMPStringCollection2,
            l_collection_index: i32,
            bstr_type: ?BSTR,
            bstr_language: ?BSTR,
            l_attribute_index: i32,
            pvar_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPStringCollection.MethodMixin(T);
            pub inline fn isIdentical(self: *const T, p_i_w_m_p_string_collection2_: ?*IWMPStringCollection2, pvbool_: ?*i16) HRESULT {
                return @as(*const IWMPStringCollection2.VTable, @ptrCast(self.vtable)).isIdentical(@as(*const IWMPStringCollection2, @ptrCast(self)), p_i_w_m_p_string_collection2_, pvbool_);
            }
            pub inline fn getItemInfo(self: *const T, l_collection_index_: i32, bstr_item_name_: ?BSTR, pbstr_value_: ?*?BSTR) HRESULT {
                return @as(*const IWMPStringCollection2.VTable, @ptrCast(self.vtable)).getItemInfo(@as(*const IWMPStringCollection2, @ptrCast(self)), l_collection_index_, bstr_item_name_, pbstr_value_);
            }
            pub inline fn getAttributeCountByType(self: *const T, l_collection_index_: i32, bstr_type_: ?BSTR, bstr_language_: ?BSTR, pl_count_: ?*i32) HRESULT {
                return @as(*const IWMPStringCollection2.VTable, @ptrCast(self.vtable)).getAttributeCountByType(@as(*const IWMPStringCollection2, @ptrCast(self)), l_collection_index_, bstr_type_, bstr_language_, pl_count_);
            }
            pub inline fn getItemInfoByType(self: *const T, l_collection_index_: i32, bstr_type_: ?BSTR, bstr_language_: ?BSTR, l_attribute_index_: i32, pvar_value_: ?*VARIANT) HRESULT {
                return @as(*const IWMPStringCollection2.VTable, @ptrCast(self.vtable)).getItemInfoByType(@as(*const IWMPStringCollection2, @ptrCast(self)), l_collection_index_, bstr_type_, bstr_language_, l_attribute_index_, pvar_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WMPLibraryType = enum(i32) {
    Unknown = 0,
    All = 1,
    Local = 2,
    Remote = 3,
    Disc = 4,
    PortableDevice = 5,
};
pub const wmpltUnknown = WMPLibraryType.Unknown;
pub const wmpltAll = WMPLibraryType.All;
pub const wmpltLocal = WMPLibraryType.Local;
pub const wmpltRemote = WMPLibraryType.Remote;
pub const wmpltDisc = WMPLibraryType.Disc;
pub const wmpltPortableDevice = WMPLibraryType.PortableDevice;

const IID_IWMPLibrary_Value = Guid.initString("3df47861-7df1-4c1f-a81b-4c26f0f7a7c6");
pub const IID_IWMPLibrary = &IID_IWMPLibrary_Value;
pub const IWMPLibrary = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPLibrary,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPLibrary,
            pwmplt: ?*WMPLibraryType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_mediaCollection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPLibrary,
            pp_i_w_m_p_media_collection: ?*?*IWMPMediaCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        isIdentical: *const fn (
            self: *const IWMPLibrary,
            p_i_w_m_p_library: ?*IWMPLibrary,
            pvbool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IWMPLibrary.VTable, @ptrCast(self.vtable)).get_name(@as(*const IWMPLibrary, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn getType(self: *const T, pwmplt_: ?*WMPLibraryType) HRESULT {
                return @as(*const IWMPLibrary.VTable, @ptrCast(self.vtable)).get_type(@as(*const IWMPLibrary, @ptrCast(self)), pwmplt_);
            }
            pub inline fn getMediaCollection(self: *const T, pp_i_w_m_p_media_collection_: ?*?*IWMPMediaCollection) HRESULT {
                return @as(*const IWMPLibrary.VTable, @ptrCast(self.vtable)).get_mediaCollection(@as(*const IWMPLibrary, @ptrCast(self)), pp_i_w_m_p_media_collection_);
            }
            pub inline fn isIdentical(self: *const T, p_i_w_m_p_library_: ?*IWMPLibrary, pvbool_: ?*i16) HRESULT {
                return @as(*const IWMPLibrary.VTable, @ptrCast(self.vtable)).isIdentical(@as(*const IWMPLibrary, @ptrCast(self)), p_i_w_m_p_library_, pvbool_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPLibraryServices_Value = Guid.initString("39c2f8d5-1cf2-4d5e-ae09-d73492cf9eaa");
pub const IID_IWMPLibraryServices = &IID_IWMPLibraryServices_Value;
pub const IWMPLibraryServices = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        getCountByType: *const fn (
            self: *const IWMPLibraryServices,
            wmplt: WMPLibraryType,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getLibraryByType: *const fn (
            self: *const IWMPLibraryServices,
            wmplt: WMPLibraryType,
            l_index: i32,
            pp_i_w_m_p_library: ?*?*IWMPLibrary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCountByType(self: *const T, wmplt_: WMPLibraryType, pl_count_: ?*i32) HRESULT {
                return @as(*const IWMPLibraryServices.VTable, @ptrCast(self.vtable)).getCountByType(@as(*const IWMPLibraryServices, @ptrCast(self)), wmplt_, pl_count_);
            }
            pub inline fn getLibraryByType(self: *const T, wmplt_: WMPLibraryType, l_index_: i32, pp_i_w_m_p_library_: ?*?*IWMPLibrary) HRESULT {
                return @as(*const IWMPLibraryServices.VTable, @ptrCast(self.vtable)).getLibraryByType(@as(*const IWMPLibraryServices, @ptrCast(self)), wmplt_, l_index_, pp_i_w_m_p_library_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPLibrarySharingServices_Value = Guid.initString("82cba86b-9f04-474b-a365-d6dd1466e541");
pub const IID_IWMPLibrarySharingServices = &IID_IWMPLibrarySharingServices_Value;
pub const IWMPLibrarySharingServices = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        isLibraryShared: *const fn (
            self: *const IWMPLibrarySharingServices,
            pvb_shared: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        isLibrarySharingEnabled: *const fn (
            self: *const IWMPLibrarySharingServices,
            pvb_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        showLibrarySharing: *const fn (
            self: *const IWMPLibrarySharingServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isLibraryShared(self: *const T, pvb_shared_: ?*i16) HRESULT {
                return @as(*const IWMPLibrarySharingServices.VTable, @ptrCast(self.vtable)).isLibraryShared(@as(*const IWMPLibrarySharingServices, @ptrCast(self)), pvb_shared_);
            }
            pub inline fn isLibrarySharingEnabled(self: *const T, pvb_enabled_: ?*i16) HRESULT {
                return @as(*const IWMPLibrarySharingServices.VTable, @ptrCast(self.vtable)).isLibrarySharingEnabled(@as(*const IWMPLibrarySharingServices, @ptrCast(self)), pvb_enabled_);
            }
            pub inline fn showLibrarySharing(self: *const T) HRESULT {
                return @as(*const IWMPLibrarySharingServices.VTable, @ptrCast(self.vtable)).showLibrarySharing(@as(*const IWMPLibrarySharingServices, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WMPFolderScanState = enum(i32) {
    Unknown = 0,
    Scanning = 1,
    Updating = 2,
    Stopped = 3,
};
pub const wmpfssUnknown = WMPFolderScanState.Unknown;
pub const wmpfssScanning = WMPFolderScanState.Scanning;
pub const wmpfssUpdating = WMPFolderScanState.Updating;
pub const wmpfssStopped = WMPFolderScanState.Stopped;

const IID_IWMPFolderMonitorServices_Value = Guid.initString("788c8743-e57f-439d-a468-5bc77f2e59c6");
pub const IID_IWMPFolderMonitorServices = &IID_IWMPFolderMonitorServices_Value;
pub const IWMPFolderMonitorServices = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPFolderMonitorServices,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        item: *const fn (
            self: *const IWMPFolderMonitorServices,
            l_index: i32,
            pbstr_folder: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        add: *const fn (
            self: *const IWMPFolderMonitorServices,
            bstr_folder: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        remove: *const fn (
            self: *const IWMPFolderMonitorServices,
            l_index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scanState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPFolderMonitorServices,
            pwmpfss: ?*WMPFolderScanState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_currentFolder: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPFolderMonitorServices,
            pbstr_folder: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_scannedFilesCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPFolderMonitorServices,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_addedFilesCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPFolderMonitorServices,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_updateProgress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPFolderMonitorServices,
            pl_progress: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startScan: *const fn (
            self: *const IWMPFolderMonitorServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        stopScan: *const fn (
            self: *const IWMPFolderMonitorServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IWMPFolderMonitorServices.VTable, @ptrCast(self.vtable)).get_count(@as(*const IWMPFolderMonitorServices, @ptrCast(self)), pl_count_);
            }
            pub inline fn item(self: *const T, l_index_: i32, pbstr_folder_: ?*?BSTR) HRESULT {
                return @as(*const IWMPFolderMonitorServices.VTable, @ptrCast(self.vtable)).item(@as(*const IWMPFolderMonitorServices, @ptrCast(self)), l_index_, pbstr_folder_);
            }
            pub inline fn add(self: *const T, bstr_folder_: ?BSTR) HRESULT {
                return @as(*const IWMPFolderMonitorServices.VTable, @ptrCast(self.vtable)).add(@as(*const IWMPFolderMonitorServices, @ptrCast(self)), bstr_folder_);
            }
            pub inline fn remove(self: *const T, l_index_: i32) HRESULT {
                return @as(*const IWMPFolderMonitorServices.VTable, @ptrCast(self.vtable)).remove(@as(*const IWMPFolderMonitorServices, @ptrCast(self)), l_index_);
            }
            pub inline fn getScanState(self: *const T, pwmpfss_: ?*WMPFolderScanState) HRESULT {
                return @as(*const IWMPFolderMonitorServices.VTable, @ptrCast(self.vtable)).get_scanState(@as(*const IWMPFolderMonitorServices, @ptrCast(self)), pwmpfss_);
            }
            pub inline fn getCurrentFolder(self: *const T, pbstr_folder_: ?*?BSTR) HRESULT {
                return @as(*const IWMPFolderMonitorServices.VTable, @ptrCast(self.vtable)).get_currentFolder(@as(*const IWMPFolderMonitorServices, @ptrCast(self)), pbstr_folder_);
            }
            pub inline fn getScannedFilesCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IWMPFolderMonitorServices.VTable, @ptrCast(self.vtable)).get_scannedFilesCount(@as(*const IWMPFolderMonitorServices, @ptrCast(self)), pl_count_);
            }
            pub inline fn getAddedFilesCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IWMPFolderMonitorServices.VTable, @ptrCast(self.vtable)).get_addedFilesCount(@as(*const IWMPFolderMonitorServices, @ptrCast(self)), pl_count_);
            }
            pub inline fn getUpdateProgress(self: *const T, pl_progress_: ?*i32) HRESULT {
                return @as(*const IWMPFolderMonitorServices.VTable, @ptrCast(self.vtable)).get_updateProgress(@as(*const IWMPFolderMonitorServices, @ptrCast(self)), pl_progress_);
            }
            pub inline fn startScan(self: *const T) HRESULT {
                return @as(*const IWMPFolderMonitorServices.VTable, @ptrCast(self.vtable)).startScan(@as(*const IWMPFolderMonitorServices, @ptrCast(self)));
            }
            pub inline fn stopScan(self: *const T) HRESULT {
                return @as(*const IWMPFolderMonitorServices.VTable, @ptrCast(self.vtable)).stopScan(@as(*const IWMPFolderMonitorServices, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPSyncDevice2_Value = Guid.initString("88afb4b2-140a-44d2-91e6-4543da467cd1");
pub const IID_IWMPSyncDevice2 = &IID_IWMPSyncDevice2_Value;
pub const IWMPSyncDevice2 = extern struct {
    pub const VTable = extern struct {
        base: IWMPSyncDevice.VTable,
        setItemInfo: *const fn (
            self: *const IWMPSyncDevice2,
            bstr_item_name: ?BSTR,
            bstr_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPSyncDevice.MethodMixin(T);
            pub inline fn setItemInfo(self: *const T, bstr_item_name_: ?BSTR, bstr_val_: ?BSTR) HRESULT {
                return @as(*const IWMPSyncDevice2.VTable, @ptrCast(self.vtable)).setItemInfo(@as(*const IWMPSyncDevice2, @ptrCast(self)), bstr_item_name_, bstr_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPSyncDevice3_Value = Guid.initString("b22c85f9-263c-4372-a0da-b518db9b4098");
pub const IID_IWMPSyncDevice3 = &IID_IWMPSyncDevice3_Value;
pub const IWMPSyncDevice3 = extern struct {
    pub const VTable = extern struct {
        base: IWMPSyncDevice2.VTable,
        estimateSyncSize: *const fn (
            self: *const IWMPSyncDevice3,
            p_non_rule_playlist: ?*IWMPPlaylist,
            p_rules_playlist: ?*IWMPPlaylist,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        cancelEstimation: *const fn (
            self: *const IWMPSyncDevice3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPSyncDevice2.MethodMixin(T);
            pub inline fn estimateSyncSize(self: *const T, p_non_rule_playlist_: ?*IWMPPlaylist, p_rules_playlist_: ?*IWMPPlaylist) HRESULT {
                return @as(*const IWMPSyncDevice3.VTable, @ptrCast(self.vtable)).estimateSyncSize(@as(*const IWMPSyncDevice3, @ptrCast(self)), p_non_rule_playlist_, p_rules_playlist_);
            }
            pub inline fn cancelEstimation(self: *const T) HRESULT {
                return @as(*const IWMPSyncDevice3.VTable, @ptrCast(self.vtable)).cancelEstimation(@as(*const IWMPSyncDevice3, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPLibrary2_Value = Guid.initString("dd578a4e-79b1-426c-bf8f-3add9072500b");
pub const IID_IWMPLibrary2 = &IID_IWMPLibrary2_Value;
pub const IWMPLibrary2 = extern struct {
    pub const VTable = extern struct {
        base: IWMPLibrary.VTable,
        getItemInfo: *const fn (
            self: *const IWMPLibrary2,
            bstr_item_name: ?BSTR,
            pbstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPLibrary.MethodMixin(T);
            pub inline fn getItemInfo(self: *const T, bstr_item_name_: ?BSTR, pbstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IWMPLibrary2.VTable, @ptrCast(self.vtable)).getItemInfo(@as(*const IWMPLibrary2, @ptrCast(self)), bstr_item_name_, pbstr_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_WMPLib_Value = Guid.initString("6bf52a50-394a-11d3-b153-00c04f79faa6");
pub const CLSID_WMPLib = &CLSID_WMPLib_Value;

const CLSID_WMPRemoteMediaServices_Value = Guid.initString("df333473-2cf7-4be2-907f-9aad5661364f");
pub const CLSID_WMPRemoteMediaServices = &CLSID_WMPRemoteMediaServices_Value;

const IID_IWMPEvents_Value = Guid.initString("19a6627b-da9e-47c1-bb23-00b5e668236a");
pub const IID_IWMPEvents = &IID_IWMPEvents_Value;
pub const IWMPEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OpenStateChange: *const fn (
            self: *const IWMPEvents,
            new_state: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PlayStateChange: *const fn (
            self: *const IWMPEvents,
            new_state: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        AudioLanguageChange: *const fn (
            self: *const IWMPEvents,
            lang_i_d: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        StatusChange: *const fn (
            self: *const IWMPEvents,
        ) callconv(@import("std").os.windows.WINAPI) void,
        ScriptCommand: *const fn (
            self: *const IWMPEvents,
            sc_type: ?BSTR,
            param: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) void,
        NewStream: *const fn (
            self: *const IWMPEvents,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Disconnect: *const fn (
            self: *const IWMPEvents,
            result: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Buffering: *const fn (
            self: *const IWMPEvents,
            start: i16,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Error: *const fn (
            self: *const IWMPEvents,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Warning: *const fn (
            self: *const IWMPEvents,
            warning_type: i32,
            param: i32,
            description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) void,
        EndOfStream: *const fn (
            self: *const IWMPEvents,
            result: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PositionChange: *const fn (
            self: *const IWMPEvents,
            old_position: f64,
            new_position: f64,
        ) callconv(@import("std").os.windows.WINAPI) void,
        MarkerHit: *const fn (
            self: *const IWMPEvents,
            marker_num: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DurationUnitChange: *const fn (
            self: *const IWMPEvents,
            new_duration_unit: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CdromMediaChange: *const fn (
            self: *const IWMPEvents,
            cdrom_num: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PlaylistChange: *const fn (
            self: *const IWMPEvents,
            playlist: ?*IDispatch,
            change: WMPPlaylistChangeEventType,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CurrentPlaylistChange: *const fn (
            self: *const IWMPEvents,
            change: WMPPlaylistChangeEventType,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CurrentPlaylistItemAvailable: *const fn (
            self: *const IWMPEvents,
            bstr_item_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) void,
        MediaChange: *const fn (
            self: *const IWMPEvents,
            item: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CurrentMediaItemAvailable: *const fn (
            self: *const IWMPEvents,
            bstr_item_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CurrentItemChange: *const fn (
            self: *const IWMPEvents,
            pdisp_media: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) void,
        MediaCollectionChange: *const fn (
            self: *const IWMPEvents,
        ) callconv(@import("std").os.windows.WINAPI) void,
        MediaCollectionAttributeStringAdded: *const fn (
            self: *const IWMPEvents,
            bstr_attrib_name: ?BSTR,
            bstr_attrib_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) void,
        MediaCollectionAttributeStringRemoved: *const fn (
            self: *const IWMPEvents,
            bstr_attrib_name: ?BSTR,
            bstr_attrib_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) void,
        MediaCollectionAttributeStringChanged: *const fn (
            self: *const IWMPEvents,
            bstr_attrib_name: ?BSTR,
            bstr_old_attrib_val: ?BSTR,
            bstr_new_attrib_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PlaylistCollectionChange: *const fn (
            self: *const IWMPEvents,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PlaylistCollectionPlaylistAdded: *const fn (
            self: *const IWMPEvents,
            bstr_playlist_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PlaylistCollectionPlaylistRemoved: *const fn (
            self: *const IWMPEvents,
            bstr_playlist_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PlaylistCollectionPlaylistSetAsDeleted: *const fn (
            self: *const IWMPEvents,
            bstr_playlist_name: ?BSTR,
            varf_is_deleted: i16,
        ) callconv(@import("std").os.windows.WINAPI) void,
        ModeChange: *const fn (
            self: *const IWMPEvents,
            mode_name: ?BSTR,
            new_value: i16,
        ) callconv(@import("std").os.windows.WINAPI) void,
        MediaError: *const fn (
            self: *const IWMPEvents,
            p_media_object: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) void,
        OpenPlaylistSwitch: *const fn (
            self: *const IWMPEvents,
            p_item: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DomainChange: *const fn (
            self: *const IWMPEvents,
            str_domain: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SwitchedToPlayerApplication: *const fn (
            self: *const IWMPEvents,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SwitchedToControl: *const fn (
            self: *const IWMPEvents,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PlayerDockedStateChange: *const fn (
            self: *const IWMPEvents,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PlayerReconnect: *const fn (
            self: *const IWMPEvents,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Click: *const fn (
            self: *const IWMPEvents,
            n_button: i16,
            n_shift_state: i16,
            f_x: i32,
            f_y: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DoubleClick: *const fn (
            self: *const IWMPEvents,
            n_button: i16,
            n_shift_state: i16,
            f_x: i32,
            f_y: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        KeyDown: *const fn (
            self: *const IWMPEvents,
            n_key_code: i16,
            n_shift_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) void,
        KeyPress: *const fn (
            self: *const IWMPEvents,
            n_key_ascii: i16,
        ) callconv(@import("std").os.windows.WINAPI) void,
        KeyUp: *const fn (
            self: *const IWMPEvents,
            n_key_code: i16,
            n_shift_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) void,
        MouseDown: *const fn (
            self: *const IWMPEvents,
            n_button: i16,
            n_shift_state: i16,
            f_x: i32,
            f_y: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        MouseMove: *const fn (
            self: *const IWMPEvents,
            n_button: i16,
            n_shift_state: i16,
            f_x: i32,
            f_y: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        MouseUp: *const fn (
            self: *const IWMPEvents,
            n_button: i16,
            n_shift_state: i16,
            f_x: i32,
            f_y: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn openStateChange(self: *const T, new_state_: i32) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).OpenStateChange(@as(*const IWMPEvents, @ptrCast(self)), new_state_);
            }
            pub inline fn playStateChange(self: *const T, new_state_: i32) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).PlayStateChange(@as(*const IWMPEvents, @ptrCast(self)), new_state_);
            }
            pub inline fn audioLanguageChange(self: *const T, lang_i_d_: i32) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).AudioLanguageChange(@as(*const IWMPEvents, @ptrCast(self)), lang_i_d_);
            }
            pub inline fn statusChange(self: *const T) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).StatusChange(@as(*const IWMPEvents, @ptrCast(self)));
            }
            pub inline fn scriptCommand(self: *const T, sc_type_: ?BSTR, param_: ?BSTR) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).ScriptCommand(@as(*const IWMPEvents, @ptrCast(self)), sc_type_, param_);
            }
            pub inline fn newStream(self: *const T) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).NewStream(@as(*const IWMPEvents, @ptrCast(self)));
            }
            pub inline fn disconnect(self: *const T, result_: i32) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).Disconnect(@as(*const IWMPEvents, @ptrCast(self)), result_);
            }
            pub inline fn buffering(self: *const T, start_: i16) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).Buffering(@as(*const IWMPEvents, @ptrCast(self)), start_);
            }
            pub inline fn @"error"(self: *const T) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).Error(@as(*const IWMPEvents, @ptrCast(self)));
            }
            pub inline fn warning(self: *const T, warning_type_: i32, param_: i32, description_: ?BSTR) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).Warning(@as(*const IWMPEvents, @ptrCast(self)), warning_type_, param_, description_);
            }
            pub inline fn endOfStream(self: *const T, result_: i32) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).EndOfStream(@as(*const IWMPEvents, @ptrCast(self)), result_);
            }
            pub inline fn positionChange(self: *const T, old_position_: f64, new_position_: f64) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).PositionChange(@as(*const IWMPEvents, @ptrCast(self)), old_position_, new_position_);
            }
            pub inline fn markerHit(self: *const T, marker_num_: i32) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).MarkerHit(@as(*const IWMPEvents, @ptrCast(self)), marker_num_);
            }
            pub inline fn durationUnitChange(self: *const T, new_duration_unit_: i32) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).DurationUnitChange(@as(*const IWMPEvents, @ptrCast(self)), new_duration_unit_);
            }
            pub inline fn cdromMediaChange(self: *const T, cdrom_num_: i32) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).CdromMediaChange(@as(*const IWMPEvents, @ptrCast(self)), cdrom_num_);
            }
            pub inline fn playlistChange(self: *const T, playlist_: ?*IDispatch, change_: WMPPlaylistChangeEventType) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).PlaylistChange(@as(*const IWMPEvents, @ptrCast(self)), playlist_, change_);
            }
            pub inline fn currentPlaylistChange(self: *const T, change_: WMPPlaylistChangeEventType) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).CurrentPlaylistChange(@as(*const IWMPEvents, @ptrCast(self)), change_);
            }
            pub inline fn currentPlaylistItemAvailable(self: *const T, bstr_item_name_: ?BSTR) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).CurrentPlaylistItemAvailable(@as(*const IWMPEvents, @ptrCast(self)), bstr_item_name_);
            }
            pub inline fn mediaChange(self: *const T, item_: ?*IDispatch) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).MediaChange(@as(*const IWMPEvents, @ptrCast(self)), item_);
            }
            pub inline fn currentMediaItemAvailable(self: *const T, bstr_item_name_: ?BSTR) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).CurrentMediaItemAvailable(@as(*const IWMPEvents, @ptrCast(self)), bstr_item_name_);
            }
            pub inline fn currentItemChange(self: *const T, pdisp_media_: ?*IDispatch) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).CurrentItemChange(@as(*const IWMPEvents, @ptrCast(self)), pdisp_media_);
            }
            pub inline fn mediaCollectionChange(self: *const T) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).MediaCollectionChange(@as(*const IWMPEvents, @ptrCast(self)));
            }
            pub inline fn mediaCollectionAttributeStringAdded(self: *const T, bstr_attrib_name_: ?BSTR, bstr_attrib_val_: ?BSTR) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).MediaCollectionAttributeStringAdded(@as(*const IWMPEvents, @ptrCast(self)), bstr_attrib_name_, bstr_attrib_val_);
            }
            pub inline fn mediaCollectionAttributeStringRemoved(self: *const T, bstr_attrib_name_: ?BSTR, bstr_attrib_val_: ?BSTR) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).MediaCollectionAttributeStringRemoved(@as(*const IWMPEvents, @ptrCast(self)), bstr_attrib_name_, bstr_attrib_val_);
            }
            pub inline fn mediaCollectionAttributeStringChanged(self: *const T, bstr_attrib_name_: ?BSTR, bstr_old_attrib_val_: ?BSTR, bstr_new_attrib_val_: ?BSTR) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).MediaCollectionAttributeStringChanged(@as(*const IWMPEvents, @ptrCast(self)), bstr_attrib_name_, bstr_old_attrib_val_, bstr_new_attrib_val_);
            }
            pub inline fn playlistCollectionChange(self: *const T) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).PlaylistCollectionChange(@as(*const IWMPEvents, @ptrCast(self)));
            }
            pub inline fn playlistCollectionPlaylistAdded(self: *const T, bstr_playlist_name_: ?BSTR) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).PlaylistCollectionPlaylistAdded(@as(*const IWMPEvents, @ptrCast(self)), bstr_playlist_name_);
            }
            pub inline fn playlistCollectionPlaylistRemoved(self: *const T, bstr_playlist_name_: ?BSTR) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).PlaylistCollectionPlaylistRemoved(@as(*const IWMPEvents, @ptrCast(self)), bstr_playlist_name_);
            }
            pub inline fn playlistCollectionPlaylistSetAsDeleted(self: *const T, bstr_playlist_name_: ?BSTR, varf_is_deleted_: i16) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).PlaylistCollectionPlaylistSetAsDeleted(@as(*const IWMPEvents, @ptrCast(self)), bstr_playlist_name_, varf_is_deleted_);
            }
            pub inline fn modeChange(self: *const T, mode_name_: ?BSTR, new_value_: i16) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).ModeChange(@as(*const IWMPEvents, @ptrCast(self)), mode_name_, new_value_);
            }
            pub inline fn mediaError(self: *const T, p_media_object_: ?*IDispatch) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).MediaError(@as(*const IWMPEvents, @ptrCast(self)), p_media_object_);
            }
            pub inline fn openPlaylistSwitch(self: *const T, p_item_: ?*IDispatch) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).OpenPlaylistSwitch(@as(*const IWMPEvents, @ptrCast(self)), p_item_);
            }
            pub inline fn domainChange(self: *const T, str_domain_: ?BSTR) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).DomainChange(@as(*const IWMPEvents, @ptrCast(self)), str_domain_);
            }
            pub inline fn switchedToPlayerApplication(self: *const T) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).SwitchedToPlayerApplication(@as(*const IWMPEvents, @ptrCast(self)));
            }
            pub inline fn switchedToControl(self: *const T) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).SwitchedToControl(@as(*const IWMPEvents, @ptrCast(self)));
            }
            pub inline fn playerDockedStateChange(self: *const T) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).PlayerDockedStateChange(@as(*const IWMPEvents, @ptrCast(self)));
            }
            pub inline fn playerReconnect(self: *const T) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).PlayerReconnect(@as(*const IWMPEvents, @ptrCast(self)));
            }
            pub inline fn click(self: *const T, n_button_: i16, n_shift_state_: i16, f_x_: i32, f_y_: i32) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).Click(@as(*const IWMPEvents, @ptrCast(self)), n_button_, n_shift_state_, f_x_, f_y_);
            }
            pub inline fn doubleClick(self: *const T, n_button_: i16, n_shift_state_: i16, f_x_: i32, f_y_: i32) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).DoubleClick(@as(*const IWMPEvents, @ptrCast(self)), n_button_, n_shift_state_, f_x_, f_y_);
            }
            pub inline fn keyDown(self: *const T, n_key_code_: i16, n_shift_state_: i16) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).KeyDown(@as(*const IWMPEvents, @ptrCast(self)), n_key_code_, n_shift_state_);
            }
            pub inline fn keyPress(self: *const T, n_key_ascii_: i16) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).KeyPress(@as(*const IWMPEvents, @ptrCast(self)), n_key_ascii_);
            }
            pub inline fn keyUp(self: *const T, n_key_code_: i16, n_shift_state_: i16) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).KeyUp(@as(*const IWMPEvents, @ptrCast(self)), n_key_code_, n_shift_state_);
            }
            pub inline fn mouseDown(self: *const T, n_button_: i16, n_shift_state_: i16, f_x_: i32, f_y_: i32) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).MouseDown(@as(*const IWMPEvents, @ptrCast(self)), n_button_, n_shift_state_, f_x_, f_y_);
            }
            pub inline fn mouseMove(self: *const T, n_button_: i16, n_shift_state_: i16, f_x_: i32, f_y_: i32) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).MouseMove(@as(*const IWMPEvents, @ptrCast(self)), n_button_, n_shift_state_, f_x_, f_y_);
            }
            pub inline fn mouseUp(self: *const T, n_button_: i16, n_shift_state_: i16, f_x_: i32, f_y_: i32) void {
                return @as(*const IWMPEvents.VTable, @ptrCast(self.vtable)).MouseUp(@as(*const IWMPEvents, @ptrCast(self)), n_button_, n_shift_state_, f_x_, f_y_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPEvents2_Value = Guid.initString("1e7601fa-47ea-4107-9ea9-9004ed9684ff");
pub const IID_IWMPEvents2 = &IID_IWMPEvents2_Value;
pub const IWMPEvents2 = extern struct {
    pub const VTable = extern struct {
        base: IWMPEvents.VTable,
        DeviceConnect: *const fn (
            self: *const IWMPEvents2,
            p_device: ?*IWMPSyncDevice,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DeviceDisconnect: *const fn (
            self: *const IWMPEvents2,
            p_device: ?*IWMPSyncDevice,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DeviceStatusChange: *const fn (
            self: *const IWMPEvents2,
            p_device: ?*IWMPSyncDevice,
            new_status: WMPDeviceStatus,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DeviceSyncStateChange: *const fn (
            self: *const IWMPEvents2,
            p_device: ?*IWMPSyncDevice,
            new_state: WMPSyncState,
        ) callconv(@import("std").os.windows.WINAPI) void,
        DeviceSyncError: *const fn (
            self: *const IWMPEvents2,
            p_device: ?*IWMPSyncDevice,
            p_media: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CreatePartnershipComplete: *const fn (
            self: *const IWMPEvents2,
            p_device: ?*IWMPSyncDevice,
            hr_result: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPEvents.MethodMixin(T);
            pub inline fn deviceConnect(self: *const T, p_device_: ?*IWMPSyncDevice) void {
                return @as(*const IWMPEvents2.VTable, @ptrCast(self.vtable)).DeviceConnect(@as(*const IWMPEvents2, @ptrCast(self)), p_device_);
            }
            pub inline fn deviceDisconnect(self: *const T, p_device_: ?*IWMPSyncDevice) void {
                return @as(*const IWMPEvents2.VTable, @ptrCast(self.vtable)).DeviceDisconnect(@as(*const IWMPEvents2, @ptrCast(self)), p_device_);
            }
            pub inline fn deviceStatusChange(self: *const T, p_device_: ?*IWMPSyncDevice, new_status_: WMPDeviceStatus) void {
                return @as(*const IWMPEvents2.VTable, @ptrCast(self.vtable)).DeviceStatusChange(@as(*const IWMPEvents2, @ptrCast(self)), p_device_, new_status_);
            }
            pub inline fn deviceSyncStateChange(self: *const T, p_device_: ?*IWMPSyncDevice, new_state_: WMPSyncState) void {
                return @as(*const IWMPEvents2.VTable, @ptrCast(self.vtable)).DeviceSyncStateChange(@as(*const IWMPEvents2, @ptrCast(self)), p_device_, new_state_);
            }
            pub inline fn deviceSyncError(self: *const T, p_device_: ?*IWMPSyncDevice, p_media_: ?*IDispatch) void {
                return @as(*const IWMPEvents2.VTable, @ptrCast(self.vtable)).DeviceSyncError(@as(*const IWMPEvents2, @ptrCast(self)), p_device_, p_media_);
            }
            pub inline fn createPartnershipComplete(self: *const T, p_device_: ?*IWMPSyncDevice, hr_result_: HRESULT) void {
                return @as(*const IWMPEvents2.VTable, @ptrCast(self.vtable)).CreatePartnershipComplete(@as(*const IWMPEvents2, @ptrCast(self)), p_device_, hr_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPEvents3_Value = Guid.initString("1f504270-a66b-4223-8e96-26a06c63d69f");
pub const IID_IWMPEvents3 = &IID_IWMPEvents3_Value;
pub const IWMPEvents3 = extern struct {
    pub const VTable = extern struct {
        base: IWMPEvents2.VTable,
        CdromRipStateChange: *const fn (
            self: *const IWMPEvents3,
            p_cdrom_rip: ?*IWMPCdromRip,
            wmprs: WMPRipState,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CdromRipMediaError: *const fn (
            self: *const IWMPEvents3,
            p_cdrom_rip: ?*IWMPCdromRip,
            p_media: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CdromBurnStateChange: *const fn (
            self: *const IWMPEvents3,
            p_cdrom_burn: ?*IWMPCdromBurn,
            wmpbs: WMPBurnState,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CdromBurnMediaError: *const fn (
            self: *const IWMPEvents3,
            p_cdrom_burn: ?*IWMPCdromBurn,
            p_media: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) void,
        CdromBurnError: *const fn (
            self: *const IWMPEvents3,
            p_cdrom_burn: ?*IWMPCdromBurn,
            hr_error: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        LibraryConnect: *const fn (
            self: *const IWMPEvents3,
            p_library: ?*IWMPLibrary,
        ) callconv(@import("std").os.windows.WINAPI) void,
        LibraryDisconnect: *const fn (
            self: *const IWMPEvents3,
            p_library: ?*IWMPLibrary,
        ) callconv(@import("std").os.windows.WINAPI) void,
        FolderScanStateChange: *const fn (
            self: *const IWMPEvents3,
            wmpfss: WMPFolderScanState,
        ) callconv(@import("std").os.windows.WINAPI) void,
        StringCollectionChange: *const fn (
            self: *const IWMPEvents3,
            pdisp_string_collection: ?*IDispatch,
            change: WMPStringCollectionChangeEventType,
            l_collection_index: i32,
        ) callconv(@import("std").os.windows.WINAPI) void,
        MediaCollectionMediaAdded: *const fn (
            self: *const IWMPEvents3,
            pdisp_media: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) void,
        MediaCollectionMediaRemoved: *const fn (
            self: *const IWMPEvents3,
            pdisp_media: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPEvents2.MethodMixin(T);
            pub inline fn cdromRipStateChange(self: *const T, p_cdrom_rip_: ?*IWMPCdromRip, wmprs_: WMPRipState) void {
                return @as(*const IWMPEvents3.VTable, @ptrCast(self.vtable)).CdromRipStateChange(@as(*const IWMPEvents3, @ptrCast(self)), p_cdrom_rip_, wmprs_);
            }
            pub inline fn cdromRipMediaError(self: *const T, p_cdrom_rip_: ?*IWMPCdromRip, p_media_: ?*IDispatch) void {
                return @as(*const IWMPEvents3.VTable, @ptrCast(self.vtable)).CdromRipMediaError(@as(*const IWMPEvents3, @ptrCast(self)), p_cdrom_rip_, p_media_);
            }
            pub inline fn cdromBurnStateChange(self: *const T, p_cdrom_burn_: ?*IWMPCdromBurn, wmpbs_: WMPBurnState) void {
                return @as(*const IWMPEvents3.VTable, @ptrCast(self.vtable)).CdromBurnStateChange(@as(*const IWMPEvents3, @ptrCast(self)), p_cdrom_burn_, wmpbs_);
            }
            pub inline fn cdromBurnMediaError(self: *const T, p_cdrom_burn_: ?*IWMPCdromBurn, p_media_: ?*IDispatch) void {
                return @as(*const IWMPEvents3.VTable, @ptrCast(self.vtable)).CdromBurnMediaError(@as(*const IWMPEvents3, @ptrCast(self)), p_cdrom_burn_, p_media_);
            }
            pub inline fn cdromBurnError(self: *const T, p_cdrom_burn_: ?*IWMPCdromBurn, hr_error_: HRESULT) void {
                return @as(*const IWMPEvents3.VTable, @ptrCast(self.vtable)).CdromBurnError(@as(*const IWMPEvents3, @ptrCast(self)), p_cdrom_burn_, hr_error_);
            }
            pub inline fn libraryConnect(self: *const T, p_library_: ?*IWMPLibrary) void {
                return @as(*const IWMPEvents3.VTable, @ptrCast(self.vtable)).LibraryConnect(@as(*const IWMPEvents3, @ptrCast(self)), p_library_);
            }
            pub inline fn libraryDisconnect(self: *const T, p_library_: ?*IWMPLibrary) void {
                return @as(*const IWMPEvents3.VTable, @ptrCast(self.vtable)).LibraryDisconnect(@as(*const IWMPEvents3, @ptrCast(self)), p_library_);
            }
            pub inline fn folderScanStateChange(self: *const T, wmpfss_: WMPFolderScanState) void {
                return @as(*const IWMPEvents3.VTable, @ptrCast(self.vtable)).FolderScanStateChange(@as(*const IWMPEvents3, @ptrCast(self)), wmpfss_);
            }
            pub inline fn stringCollectionChange(self: *const T, pdisp_string_collection_: ?*IDispatch, change_: WMPStringCollectionChangeEventType, l_collection_index_: i32) void {
                return @as(*const IWMPEvents3.VTable, @ptrCast(self.vtable)).StringCollectionChange(@as(*const IWMPEvents3, @ptrCast(self)), pdisp_string_collection_, change_, l_collection_index_);
            }
            pub inline fn mediaCollectionMediaAdded(self: *const T, pdisp_media_: ?*IDispatch) void {
                return @as(*const IWMPEvents3.VTable, @ptrCast(self.vtable)).MediaCollectionMediaAdded(@as(*const IWMPEvents3, @ptrCast(self)), pdisp_media_);
            }
            pub inline fn mediaCollectionMediaRemoved(self: *const T, pdisp_media_: ?*IDispatch) void {
                return @as(*const IWMPEvents3.VTable, @ptrCast(self.vtable)).MediaCollectionMediaRemoved(@as(*const IWMPEvents3, @ptrCast(self)), pdisp_media_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPEvents4_Value = Guid.initString("26dabcfa-306b-404d-9a6f-630a8405048d");
pub const IID_IWMPEvents4 = &IID_IWMPEvents4_Value;
pub const IWMPEvents4 = extern struct {
    pub const VTable = extern struct {
        base: IWMPEvents3.VTable,
        DeviceEstimation: *const fn (
            self: *const IWMPEvents4,
            p_device: ?*IWMPSyncDevice,
            hr_result: HRESULT,
            qw_estimated_used_space: i64,
            qw_estimated_space: i64,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPEvents3.MethodMixin(T);
            pub inline fn deviceEstimation(self: *const T, p_device_: ?*IWMPSyncDevice, hr_result_: HRESULT, qw_estimated_used_space_: i64, qw_estimated_space_: i64) void {
                return @as(*const IWMPEvents4.VTable, @ptrCast(self.vtable)).DeviceEstimation(@as(*const IWMPEvents4, @ptrCast(self)), p_device_, hr_result_, qw_estimated_used_space_, qw_estimated_space_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID__WMPOCXEvents_Value = Guid.initString("6bf52a51-394a-11d3-b153-00c04f79faa6");
pub const IID__WMPOCXEvents = &IID__WMPOCXEvents_Value;
pub const _WMPOCXEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPNodeRealEstate_Value = Guid.initString("42751198-5a50-4460-bcb4-709f8bdc8e59");
pub const IID_IWMPNodeRealEstate = &IID_IWMPNodeRealEstate_Value;
pub const IWMPNodeRealEstate = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDesiredSize: *const fn (
            self: *const IWMPNodeRealEstate,
            p_size: ?*SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRects: *const fn (
            self: *const IWMPNodeRealEstate,
            p_src: ?*const RECT,
            p_dest: ?*const RECT,
            p_clip: ?*const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRects: *const fn (
            self: *const IWMPNodeRealEstate,
            p_src: ?*RECT,
            p_dest: ?*RECT,
            p_clip: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWindowless: *const fn (
            self: *const IWMPNodeRealEstate,
            f_windowless: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWindowless: *const fn (
            self: *const IWMPNodeRealEstate,
            pf_windowless: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFullScreen: *const fn (
            self: *const IWMPNodeRealEstate,
            f_full_screen: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFullScreen: *const fn (
            self: *const IWMPNodeRealEstate,
            pf_full_screen: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDesiredSize(self: *const T, p_size_: ?*SIZE) HRESULT {
                return @as(*const IWMPNodeRealEstate.VTable, @ptrCast(self.vtable)).GetDesiredSize(@as(*const IWMPNodeRealEstate, @ptrCast(self)), p_size_);
            }
            pub inline fn setRects(self: *const T, p_src_: ?*const RECT, p_dest_: ?*const RECT, p_clip_: ?*const RECT) HRESULT {
                return @as(*const IWMPNodeRealEstate.VTable, @ptrCast(self.vtable)).SetRects(@as(*const IWMPNodeRealEstate, @ptrCast(self)), p_src_, p_dest_, p_clip_);
            }
            pub inline fn getRects(self: *const T, p_src_: ?*RECT, p_dest_: ?*RECT, p_clip_: ?*RECT) HRESULT {
                return @as(*const IWMPNodeRealEstate.VTable, @ptrCast(self.vtable)).GetRects(@as(*const IWMPNodeRealEstate, @ptrCast(self)), p_src_, p_dest_, p_clip_);
            }
            pub inline fn setWindowless(self: *const T, f_windowless_: BOOL) HRESULT {
                return @as(*const IWMPNodeRealEstate.VTable, @ptrCast(self.vtable)).SetWindowless(@as(*const IWMPNodeRealEstate, @ptrCast(self)), f_windowless_);
            }
            pub inline fn getWindowless(self: *const T, pf_windowless_: ?*BOOL) HRESULT {
                return @as(*const IWMPNodeRealEstate.VTable, @ptrCast(self.vtable)).GetWindowless(@as(*const IWMPNodeRealEstate, @ptrCast(self)), pf_windowless_);
            }
            pub inline fn setFullScreen(self: *const T, f_full_screen_: BOOL) HRESULT {
                return @as(*const IWMPNodeRealEstate.VTable, @ptrCast(self.vtable)).SetFullScreen(@as(*const IWMPNodeRealEstate, @ptrCast(self)), f_full_screen_);
            }
            pub inline fn getFullScreen(self: *const T, pf_full_screen_: ?*BOOL) HRESULT {
                return @as(*const IWMPNodeRealEstate.VTable, @ptrCast(self.vtable)).GetFullScreen(@as(*const IWMPNodeRealEstate, @ptrCast(self)), pf_full_screen_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPNodeRealEstateHost_Value = Guid.initString("1491087d-2c6b-44c8-b019-b3c929d2ada9");
pub const IID_IWMPNodeRealEstateHost = &IID_IWMPNodeRealEstateHost_Value;
pub const IWMPNodeRealEstateHost = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnDesiredSizeChange: *const fn (
            self: *const IWMPNodeRealEstateHost,
            p_size: ?*SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnFullScreenTransition: *const fn (
            self: *const IWMPNodeRealEstateHost,
            f_full_screen: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onDesiredSizeChange(self: *const T, p_size_: ?*SIZE) HRESULT {
                return @as(*const IWMPNodeRealEstateHost.VTable, @ptrCast(self.vtable)).OnDesiredSizeChange(@as(*const IWMPNodeRealEstateHost, @ptrCast(self)), p_size_);
            }
            pub inline fn onFullScreenTransition(self: *const T, f_full_screen_: BOOL) HRESULT {
                return @as(*const IWMPNodeRealEstateHost.VTable, @ptrCast(self.vtable)).OnFullScreenTransition(@as(*const IWMPNodeRealEstateHost, @ptrCast(self)), f_full_screen_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPNodeWindowed_Value = Guid.initString("96740bfa-c56a-45d1-a3a4-762914d4ade9");
pub const IID_IWMPNodeWindowed = &IID_IWMPNodeWindowed_Value;
pub const IWMPNodeWindowed = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetOwnerWindow: *const fn (
            self: *const IWMPNodeWindowed,
            hwnd: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOwnerWindow: *const fn (
            self: *const IWMPNodeWindowed,
            phwnd: ?*isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setOwnerWindow(self: *const T, hwnd_: isize) HRESULT {
                return @as(*const IWMPNodeWindowed.VTable, @ptrCast(self.vtable)).SetOwnerWindow(@as(*const IWMPNodeWindowed, @ptrCast(self)), hwnd_);
            }
            pub inline fn getOwnerWindow(self: *const T, phwnd_: ?*isize) HRESULT {
                return @as(*const IWMPNodeWindowed.VTable, @ptrCast(self.vtable)).GetOwnerWindow(@as(*const IWMPNodeWindowed, @ptrCast(self)), phwnd_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPNodeWindowedHost_Value = Guid.initString("a300415a-54aa-4081-adbf-3b13610d8958");
pub const IID_IWMPNodeWindowedHost = &IID_IWMPNodeWindowedHost_Value;
pub const IWMPNodeWindowedHost = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnWindowMessageFromRenderer: *const fn (
            self: *const IWMPNodeWindowedHost,
            u_msg: u32,
            wparam: WPARAM,
            lparam: LPARAM,
            pl_ret: ?*LRESULT,
            pf_handled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onWindowMessageFromRenderer(self: *const T, u_msg_: u32, wparam_: WPARAM, lparam_: LPARAM, pl_ret_: ?*LRESULT, pf_handled_: ?*BOOL) HRESULT {
                return @as(*const IWMPNodeWindowedHost.VTable, @ptrCast(self.vtable)).OnWindowMessageFromRenderer(@as(*const IWMPNodeWindowedHost, @ptrCast(self)), u_msg_, wparam_, lparam_, pl_ret_, pf_handled_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPWindowMessageSink_Value = Guid.initString("3a0daa30-908d-4789-ba87-aed879b5c49b");
pub const IID_IWMPWindowMessageSink = &IID_IWMPWindowMessageSink_Value;
pub const IWMPWindowMessageSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnWindowMessage: *const fn (
            self: *const IWMPWindowMessageSink,
            u_msg: u32,
            wparam: WPARAM,
            lparam: LPARAM,
            pl_ret: ?*LRESULT,
            pf_handled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onWindowMessage(self: *const T, u_msg_: u32, wparam_: WPARAM, lparam_: LPARAM, pl_ret_: ?*LRESULT, pf_handled_: ?*BOOL) HRESULT {
                return @as(*const IWMPWindowMessageSink.VTable, @ptrCast(self.vtable)).OnWindowMessage(@as(*const IWMPWindowMessageSink, @ptrCast(self)), u_msg_, wparam_, lparam_, pl_ret_, pf_handled_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPNodeWindowless_Value = Guid.initString("9b9199ad-780c-4eda-b816-261eba5d1575");
pub const IID_IWMPNodeWindowless = &IID_IWMPNodeWindowless_Value;
pub const IWMPNodeWindowless = extern struct {
    pub const VTable = extern struct {
        base: IWMPWindowMessageSink.VTable,
        OnDraw: *const fn (
            self: *const IWMPNodeWindowless,
            hdc: isize,
            prc_draw: ?*const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPWindowMessageSink.MethodMixin(T);
            pub inline fn onDraw(self: *const T, hdc_: isize, prc_draw_: ?*const RECT) HRESULT {
                return @as(*const IWMPNodeWindowless.VTable, @ptrCast(self.vtable)).OnDraw(@as(*const IWMPNodeWindowless, @ptrCast(self)), hdc_, prc_draw_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPNodeWindowlessHost_Value = Guid.initString("be7017c6-ce34-4901-8106-770381aa6e3e");
pub const IID_IWMPNodeWindowlessHost = &IID_IWMPNodeWindowlessHost_Value;
pub const IWMPNodeWindowlessHost = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InvalidateRect: *const fn (
            self: *const IWMPNodeWindowlessHost,
            prc: ?*const RECT,
            f_erase: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn invalidateRect(self: *const T, prc_: ?*const RECT, f_erase_: BOOL) HRESULT {
                return @as(*const IWMPNodeWindowlessHost.VTable, @ptrCast(self.vtable)).InvalidateRect(@as(*const IWMPNodeWindowlessHost, @ptrCast(self)), prc_, f_erase_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPVideoRenderConfig_Value = Guid.initString("6d6cf803-1ec0-4c8d-b3ca-f18e27282074");
pub const IID_IWMPVideoRenderConfig = &IID_IWMPVideoRenderConfig_Value;
pub const IWMPVideoRenderConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_presenterActivate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPVideoRenderConfig,
            p_activate: ?*IMFActivate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn putPresenterActivate(self: *const T, p_activate_: ?*IMFActivate) HRESULT {
                return @as(*const IWMPVideoRenderConfig.VTable, @ptrCast(self.vtable)).put_presenterActivate(@as(*const IWMPVideoRenderConfig, @ptrCast(self)), p_activate_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPAudioRenderConfig_Value = Guid.initString("e79c6349-5997-4ce4-917c-22a3391ec564");
pub const IID_IWMPAudioRenderConfig = &IID_IWMPAudioRenderConfig_Value;
pub const IWMPAudioRenderConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_audioOutputDevice: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPAudioRenderConfig,
            pbstr_output_device: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_audioOutputDevice: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPAudioRenderConfig,
            bstr_output_device: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAudioOutputDevice(self: *const T, pbstr_output_device_: ?*?BSTR) HRESULT {
                return @as(*const IWMPAudioRenderConfig.VTable, @ptrCast(self.vtable)).get_audioOutputDevice(@as(*const IWMPAudioRenderConfig, @ptrCast(self)), pbstr_output_device_);
            }
            pub inline fn putAudioOutputDevice(self: *const T, bstr_output_device_: ?BSTR) HRESULT {
                return @as(*const IWMPAudioRenderConfig.VTable, @ptrCast(self.vtable)).put_audioOutputDevice(@as(*const IWMPAudioRenderConfig, @ptrCast(self)), bstr_output_device_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPRenderConfig_Value = Guid.initString("959506c1-0314-4ec5-9e61-8528db5e5478");
pub const IID_IWMPRenderConfig = &IID_IWMPRenderConfig_Value;
pub const IWMPRenderConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_inProcOnly: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPRenderConfig,
            f_in_proc: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_inProcOnly: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPRenderConfig,
            pf_in_proc: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn putInProcOnly(self: *const T, f_in_proc_: BOOL) HRESULT {
                return @as(*const IWMPRenderConfig.VTable, @ptrCast(self.vtable)).put_inProcOnly(@as(*const IWMPRenderConfig, @ptrCast(self)), f_in_proc_);
            }
            pub inline fn getInProcOnly(self: *const T, pf_in_proc_: ?*BOOL) HRESULT {
                return @as(*const IWMPRenderConfig.VTable, @ptrCast(self.vtable)).get_inProcOnly(@as(*const IWMPRenderConfig, @ptrCast(self)), pf_in_proc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WMPServices_StreamState = enum(i32) {
    Stop = 0,
    Pause = 1,
    Play = 2,
};
pub const WMPServices_StreamState_Stop = WMPServices_StreamState.Stop;
pub const WMPServices_StreamState_Pause = WMPServices_StreamState.Pause;
pub const WMPServices_StreamState_Play = WMPServices_StreamState.Play;

const IID_IWMPServices_Value = Guid.initString("afb6b76b-1e20-4198-83b3-191db6e0b149");
pub const IID_IWMPServices = &IID_IWMPServices_Value;
pub const IWMPServices = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetStreamTime: *const fn (
            self: *const IWMPServices,
            prt: ?*i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamState: *const fn (
            self: *const IWMPServices,
            p_state: ?*WMPServices_StreamState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getStreamTime(self: *const T, prt_: ?*i64) HRESULT {
                return @as(*const IWMPServices.VTable, @ptrCast(self.vtable)).GetStreamTime(@as(*const IWMPServices, @ptrCast(self)), prt_);
            }
            pub inline fn getStreamState(self: *const T, p_state_: ?*WMPServices_StreamState) HRESULT {
                return @as(*const IWMPServices.VTable, @ptrCast(self.vtable)).GetStreamState(@as(*const IWMPServices, @ptrCast(self)), p_state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPMediaPluginRegistrar_Value = Guid.initString("68e27045-05bd-40b2-9720-23088c78e390");
pub const IID_IWMPMediaPluginRegistrar = &IID_IWMPMediaPluginRegistrar_Value;
pub const IWMPMediaPluginRegistrar = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        WMPRegisterPlayerPlugin: *const fn (
            self: *const IWMPMediaPluginRegistrar,
            pwsz_friendly_name: ?PWSTR,
            pwsz_description: ?PWSTR,
            pwsz_uninstall_string: ?PWSTR,
            dw_priority: u32,
            guid_plugin_type: Guid,
            clsid: Guid,
            c_media_types: u32,
            p_media_types: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMPUnRegisterPlayerPlugin: *const fn (
            self: *const IWMPMediaPluginRegistrar,
            guid_plugin_type: Guid,
            clsid: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn wmpRegisterPlayerPlugin(self: *const T, pwsz_friendly_name_: ?PWSTR, pwsz_description_: ?PWSTR, pwsz_uninstall_string_: ?PWSTR, dw_priority_: u32, guid_plugin_type_: Guid, clsid_: Guid, c_media_types_: u32, p_media_types_: ?*anyopaque) HRESULT {
                return @as(*const IWMPMediaPluginRegistrar.VTable, @ptrCast(self.vtable)).WMPRegisterPlayerPlugin(@as(*const IWMPMediaPluginRegistrar, @ptrCast(self)), pwsz_friendly_name_, pwsz_description_, pwsz_uninstall_string_, dw_priority_, guid_plugin_type_, clsid_, c_media_types_, p_media_types_);
            }
            pub inline fn wmpUnRegisterPlayerPlugin(self: *const T, guid_plugin_type_: Guid, clsid_: Guid) HRESULT {
                return @as(*const IWMPMediaPluginRegistrar.VTable, @ptrCast(self.vtable)).WMPUnRegisterPlayerPlugin(@as(*const IWMPMediaPluginRegistrar, @ptrCast(self)), guid_plugin_type_, clsid_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WMPPlugin_Caps = enum(i32) {
    s = 1,
};
pub const WMPPlugin_Caps_CannotConvertFormats = WMPPlugin_Caps.s;

const IID_IWMPPlugin_Value = Guid.initString("f1392a70-024c-42bb-a998-73dfdfe7d5a7");
pub const IID_IWMPPlugin = &IID_IWMPPlugin_Value;
pub const IWMPPlugin = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Init: *const fn (
            self: *const IWMPPlugin,
            dw_playback_context: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Shutdown: *const fn (
            self: *const IWMPPlugin,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetID: *const fn (
            self: *const IWMPPlugin,
            p_g_u_i_d: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCaps: *const fn (
            self: *const IWMPPlugin,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AdviseWMPServices: *const fn (
            self: *const IWMPPlugin,
            p_w_m_p_services: ?*IWMPServices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnAdviseWMPServices: *const fn (
            self: *const IWMPPlugin,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn init(self: *const T, dw_playback_context_: usize) HRESULT {
                return @as(*const IWMPPlugin.VTable, @ptrCast(self.vtable)).Init(@as(*const IWMPPlugin, @ptrCast(self)), dw_playback_context_);
            }
            pub inline fn shutdown(self: *const T) HRESULT {
                return @as(*const IWMPPlugin.VTable, @ptrCast(self.vtable)).Shutdown(@as(*const IWMPPlugin, @ptrCast(self)));
            }
            pub inline fn getID(self: *const T, p_g_u_i_d_: ?*Guid) HRESULT {
                return @as(*const IWMPPlugin.VTable, @ptrCast(self.vtable)).GetID(@as(*const IWMPPlugin, @ptrCast(self)), p_g_u_i_d_);
            }
            pub inline fn getCaps(self: *const T, pdw_flags_: ?*u32) HRESULT {
                return @as(*const IWMPPlugin.VTable, @ptrCast(self.vtable)).GetCaps(@as(*const IWMPPlugin, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn adviseWMPServices(self: *const T, p_w_m_p_services_: ?*IWMPServices) HRESULT {
                return @as(*const IWMPPlugin.VTable, @ptrCast(self.vtable)).AdviseWMPServices(@as(*const IWMPPlugin, @ptrCast(self)), p_w_m_p_services_);
            }
            pub inline fn unAdviseWMPServices(self: *const T) HRESULT {
                return @as(*const IWMPPlugin.VTable, @ptrCast(self.vtable)).UnAdviseWMPServices(@as(*const IWMPPlugin, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPPluginEnable_Value = Guid.initString("5fca444c-7ad1-479d-a4ef-40566a5309d6");
pub const IID_IWMPPluginEnable = &IID_IWMPPluginEnable_Value;
pub const IWMPPluginEnable = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetEnable: *const fn (
            self: *const IWMPPluginEnable,
            f_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnable: *const fn (
            self: *const IWMPPluginEnable,
            pf_enable: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setEnable(self: *const T, f_enable_: BOOL) HRESULT {
                return @as(*const IWMPPluginEnable.VTable, @ptrCast(self.vtable)).SetEnable(@as(*const IWMPPluginEnable, @ptrCast(self)), f_enable_);
            }
            pub inline fn getEnable(self: *const T, pf_enable_: ?*BOOL) HRESULT {
                return @as(*const IWMPPluginEnable.VTable, @ptrCast(self.vtable)).GetEnable(@as(*const IWMPPluginEnable, @ptrCast(self)), pf_enable_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPGraphCreation_Value = Guid.initString("bfb377e5-c594-4369-a970-de896d5ece74");
pub const IID_IWMPGraphCreation = &IID_IWMPGraphCreation_Value;
pub const IWMPGraphCreation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GraphCreationPreRender: *const fn (
            self: *const IWMPGraphCreation,
            p_filter_graph: ?*IUnknown,
            p_reserved: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GraphCreationPostRender: *const fn (
            self: *const IWMPGraphCreation,
            p_filter_graph: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGraphCreationFlags: *const fn (
            self: *const IWMPGraphCreation,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn graphCreationPreRender(self: *const T, p_filter_graph_: ?*IUnknown, p_reserved_: ?*IUnknown) HRESULT {
                return @as(*const IWMPGraphCreation.VTable, @ptrCast(self.vtable)).GraphCreationPreRender(@as(*const IWMPGraphCreation, @ptrCast(self)), p_filter_graph_, p_reserved_);
            }
            pub inline fn graphCreationPostRender(self: *const T, p_filter_graph_: ?*IUnknown) HRESULT {
                return @as(*const IWMPGraphCreation.VTable, @ptrCast(self.vtable)).GraphCreationPostRender(@as(*const IWMPGraphCreation, @ptrCast(self)), p_filter_graph_);
            }
            pub inline fn getGraphCreationFlags(self: *const T, pdw_flags_: ?*u32) HRESULT {
                return @as(*const IWMPGraphCreation.VTable, @ptrCast(self.vtable)).GetGraphCreationFlags(@as(*const IWMPGraphCreation, @ptrCast(self)), pdw_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPConvert_Value = Guid.initString("d683162f-57d4-4108-8373-4a9676d1c2e9");
pub const IID_IWMPConvert = &IID_IWMPConvert_Value;
pub const IWMPConvert = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ConvertFile: *const fn (
            self: *const IWMPConvert,
            bstr_input_file: ?BSTR,
            bstr_destination_folder: ?BSTR,
            pbstr_output_file: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorURL: *const fn (
            self: *const IWMPConvert,
            pbstr_u_r_l: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn convertFile(self: *const T, bstr_input_file_: ?BSTR, bstr_destination_folder_: ?BSTR, pbstr_output_file_: ?*?BSTR) HRESULT {
                return @as(*const IWMPConvert.VTable, @ptrCast(self.vtable)).ConvertFile(@as(*const IWMPConvert, @ptrCast(self)), bstr_input_file_, bstr_destination_folder_, pbstr_output_file_);
            }
            pub inline fn getErrorURL(self: *const T, pbstr_u_r_l_: ?*?BSTR) HRESULT {
                return @as(*const IWMPConvert.VTable, @ptrCast(self.vtable)).GetErrorURL(@as(*const IWMPConvert, @ptrCast(self)), pbstr_u_r_l_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPTranscodePolicy_Value = Guid.initString("b64cbac3-401c-4327-a3e8-b9feb3a8c25c");
pub const IID_IWMPTranscodePolicy = &IID_IWMPTranscodePolicy_Value;
pub const IWMPTranscodePolicy = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        allowTranscode: *const fn (
            self: *const IWMPTranscodePolicy,
            pvb_allow: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn allowTranscode(self: *const T, pvb_allow_: ?*i16) HRESULT {
                return @as(*const IWMPTranscodePolicy.VTable, @ptrCast(self.vtable)).allowTranscode(@as(*const IWMPTranscodePolicy, @ptrCast(self)), pvb_allow_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPUserEventSink_Value = Guid.initString("cfccfa72-c343-48c3-a2de-b7a4402e39f2");
pub const IID_IWMPUserEventSink = &IID_IWMPUserEventSink_Value;
pub const IWMPUserEventSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NotifyUserEvent: *const fn (
            self: *const IWMPUserEventSink,
            event_code: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn notifyUserEvent(self: *const T, event_code_: i32) HRESULT {
                return @as(*const IWMPUserEventSink.VTable, @ptrCast(self.vtable)).NotifyUserEvent(@as(*const IWMPUserEventSink, @ptrCast(self)), event_code_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_FeedsManager_Value = Guid.initString("faeb54c4-f66f-4806-83a0-805299f5e3ad");
pub const CLSID_FeedsManager = &CLSID_FeedsManager_Value;

const CLSID_FeedFolderWatcher_Value = Guid.initString("281001ed-7765-4cb0-84af-e9b387af01ff");
pub const CLSID_FeedFolderWatcher = &CLSID_FeedFolderWatcher_Value;

const CLSID_FeedWatcher_Value = Guid.initString("18a6737b-f433-4687-89bc-a1b4dfb9f123");
pub const CLSID_FeedWatcher = &CLSID_FeedWatcher_Value;

pub const FEEDS_BACKGROUNDSYNC_ACTION = enum(i32) {
    DISABLE = 0,
    ENABLE = 1,
    RUNNOW = 2,
};
pub const FBSA_DISABLE = FEEDS_BACKGROUNDSYNC_ACTION.DISABLE;
pub const FBSA_ENABLE = FEEDS_BACKGROUNDSYNC_ACTION.ENABLE;
pub const FBSA_RUNNOW = FEEDS_BACKGROUNDSYNC_ACTION.RUNNOW;

pub const FEEDS_BACKGROUNDSYNC_STATUS = enum(i32) {
    DISABLED = 0,
    ENABLED = 1,
};
pub const FBSS_DISABLED = FEEDS_BACKGROUNDSYNC_STATUS.DISABLED;
pub const FBSS_ENABLED = FEEDS_BACKGROUNDSYNC_STATUS.ENABLED;

pub const FEEDS_EVENTS_SCOPE = enum(i32) {
    ALL = 0,
    SELF_ONLY = 1,
    SELF_AND_CHILDREN_ONLY = 2,
};
pub const FES_ALL = FEEDS_EVENTS_SCOPE.ALL;
pub const FES_SELF_ONLY = FEEDS_EVENTS_SCOPE.SELF_ONLY;
pub const FES_SELF_AND_CHILDREN_ONLY = FEEDS_EVENTS_SCOPE.SELF_AND_CHILDREN_ONLY;

pub const FEEDS_EVENTS_MASK = enum(i32) {
    OLDEREVENTS = 1,
    EEDEVENTS = 2,
};
pub const FEM_FOLDEREVENTS = FEEDS_EVENTS_MASK.OLDEREVENTS;
pub const FEM_FEEDEVENTS = FEEDS_EVENTS_MASK.EEDEVENTS;

pub const FEEDS_XML_SORT_PROPERTY = enum(i32) {
    NONE = 0,
    PUBDATE = 1,
    DOWNLOADTIME = 2,
};
pub const FXSP_NONE = FEEDS_XML_SORT_PROPERTY.NONE;
pub const FXSP_PUBDATE = FEEDS_XML_SORT_PROPERTY.PUBDATE;
pub const FXSP_DOWNLOADTIME = FEEDS_XML_SORT_PROPERTY.DOWNLOADTIME;

pub const FEEDS_XML_SORT_ORDER = enum(i32) {
    NONE = 0,
    ASCENDING = 1,
    DESCENDING = 2,
};
pub const FXSO_NONE = FEEDS_XML_SORT_ORDER.NONE;
pub const FXSO_ASCENDING = FEEDS_XML_SORT_ORDER.ASCENDING;
pub const FXSO_DESCENDING = FEEDS_XML_SORT_ORDER.DESCENDING;

pub const FEEDS_XML_FILTER_FLAGS = enum(i32) {
    ALL = 0,
    UNREAD = 1,
    READ = 2,
};
pub const FXFF_ALL = FEEDS_XML_FILTER_FLAGS.ALL;
pub const FXFF_UNREAD = FEEDS_XML_FILTER_FLAGS.UNREAD;
pub const FXFF_READ = FEEDS_XML_FILTER_FLAGS.READ;

pub const FEEDS_XML_INCLUDE_FLAGS = enum(i32) {
    NONE = 0,
    CF_EXTENSIONS = 1,
};
pub const FXIF_NONE = FEEDS_XML_INCLUDE_FLAGS.NONE;
pub const FXIF_CF_EXTENSIONS = FEEDS_XML_INCLUDE_FLAGS.CF_EXTENSIONS;

pub const FEEDS_DOWNLOAD_STATUS = enum(i32) {
    NONE = 0,
    PENDING = 1,
    DOWNLOADING = 2,
    DOWNLOADED = 3,
    DOWNLOAD_FAILED = 4,
};
pub const FDS_NONE = FEEDS_DOWNLOAD_STATUS.NONE;
pub const FDS_PENDING = FEEDS_DOWNLOAD_STATUS.PENDING;
pub const FDS_DOWNLOADING = FEEDS_DOWNLOAD_STATUS.DOWNLOADING;
pub const FDS_DOWNLOADED = FEEDS_DOWNLOAD_STATUS.DOWNLOADED;
pub const FDS_DOWNLOAD_FAILED = FEEDS_DOWNLOAD_STATUS.DOWNLOAD_FAILED;

pub const FEEDS_SYNC_SETTING = enum(i32) {
    DEFAULT = 0,
    INTERVAL = 1,
    MANUAL = 2,
    SUGGESTED = 3,
};
pub const FSS_DEFAULT = FEEDS_SYNC_SETTING.DEFAULT;
pub const FSS_INTERVAL = FEEDS_SYNC_SETTING.INTERVAL;
pub const FSS_MANUAL = FEEDS_SYNC_SETTING.MANUAL;
pub const FSS_SUGGESTED = FEEDS_SYNC_SETTING.SUGGESTED;

pub const FEEDS_DOWNLOAD_ERROR = enum(i32) {
    NONE = 0,
    DOWNLOAD_FAILED = 1,
    INVALID_FEED_FORMAT = 2,
    NORMALIZATION_FAILED = 3,
    PERSISTENCE_FAILED = 4,
    DOWNLOAD_BLOCKED = 5,
    CANCELED = 6,
    UNSUPPORTED_AUTH = 7,
    BACKGROUND_DOWNLOAD_DISABLED = 8,
    NOT_EXIST = 9,
    UNSUPPORTED_MSXML = 10,
    UNSUPPORTED_DTD = 11,
    DOWNLOAD_SIZE_LIMIT_EXCEEDED = 12,
    ACCESS_DENIED = 13,
    AUTH_FAILED = 14,
    INVALID_AUTH = 15,
};
pub const FDE_NONE = FEEDS_DOWNLOAD_ERROR.NONE;
pub const FDE_DOWNLOAD_FAILED = FEEDS_DOWNLOAD_ERROR.DOWNLOAD_FAILED;
pub const FDE_INVALID_FEED_FORMAT = FEEDS_DOWNLOAD_ERROR.INVALID_FEED_FORMAT;
pub const FDE_NORMALIZATION_FAILED = FEEDS_DOWNLOAD_ERROR.NORMALIZATION_FAILED;
pub const FDE_PERSISTENCE_FAILED = FEEDS_DOWNLOAD_ERROR.PERSISTENCE_FAILED;
pub const FDE_DOWNLOAD_BLOCKED = FEEDS_DOWNLOAD_ERROR.DOWNLOAD_BLOCKED;
pub const FDE_CANCELED = FEEDS_DOWNLOAD_ERROR.CANCELED;
pub const FDE_UNSUPPORTED_AUTH = FEEDS_DOWNLOAD_ERROR.UNSUPPORTED_AUTH;
pub const FDE_BACKGROUND_DOWNLOAD_DISABLED = FEEDS_DOWNLOAD_ERROR.BACKGROUND_DOWNLOAD_DISABLED;
pub const FDE_NOT_EXIST = FEEDS_DOWNLOAD_ERROR.NOT_EXIST;
pub const FDE_UNSUPPORTED_MSXML = FEEDS_DOWNLOAD_ERROR.UNSUPPORTED_MSXML;
pub const FDE_UNSUPPORTED_DTD = FEEDS_DOWNLOAD_ERROR.UNSUPPORTED_DTD;
pub const FDE_DOWNLOAD_SIZE_LIMIT_EXCEEDED = FEEDS_DOWNLOAD_ERROR.DOWNLOAD_SIZE_LIMIT_EXCEEDED;
pub const FDE_ACCESS_DENIED = FEEDS_DOWNLOAD_ERROR.ACCESS_DENIED;
pub const FDE_AUTH_FAILED = FEEDS_DOWNLOAD_ERROR.AUTH_FAILED;
pub const FDE_INVALID_AUTH = FEEDS_DOWNLOAD_ERROR.INVALID_AUTH;

pub const FEEDS_EVENTS_ITEM_COUNT_FLAGS = enum(i32) {
    READ_ITEM_COUNT_CHANGED = 1,
    UNREAD_ITEM_COUNT_CHANGED = 2,
};
pub const FEICF_READ_ITEM_COUNT_CHANGED = FEEDS_EVENTS_ITEM_COUNT_FLAGS.READ_ITEM_COUNT_CHANGED;
pub const FEICF_UNREAD_ITEM_COUNT_CHANGED = FEEDS_EVENTS_ITEM_COUNT_FLAGS.UNREAD_ITEM_COUNT_CHANGED;

pub const FEEDS_ERROR_CODE = enum(i32) {
    ERRORBASE = -1073479168,
    // INVALIDMSXMLPROPERTY = -1073479168, this enum value conflicts with ERRORBASE
    DOWNLOADSIZELIMITEXCEEDED = -1073479167,
};
pub const FEC_E_ERRORBASE = FEEDS_ERROR_CODE.ERRORBASE;
pub const FEC_E_INVALIDMSXMLPROPERTY = FEEDS_ERROR_CODE.ERRORBASE;
pub const FEC_E_DOWNLOADSIZELIMITEXCEEDED = FEEDS_ERROR_CODE.DOWNLOADSIZELIMITEXCEEDED;

const IID_IXFeedsManager_Value = Guid.initString("5357e238-fb12-4aca-a930-cab7832b84bf");
pub const IID_IXFeedsManager = &IID_IXFeedsManager_Value;
pub const IXFeedsManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RootFolder: *const fn (
            self: *const IXFeedsManager,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSubscribed: *const fn (
            self: *const IXFeedsManager,
            psz_url: ?[*:0]const u16,
            pb_subscribed: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExistsFeed: *const fn (
            self: *const IXFeedsManager,
            psz_path: ?[*:0]const u16,
            pb_feed_exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFeed: *const fn (
            self: *const IXFeedsManager,
            psz_path: ?[*:0]const u16,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFeedByUrl: *const fn (
            self: *const IXFeedsManager,
            psz_url: ?[*:0]const u16,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExistsFolder: *const fn (
            self: *const IXFeedsManager,
            psz_path: ?[*:0]const u16,
            pb_folder_exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolder: *const fn (
            self: *const IXFeedsManager,
            psz_path: ?[*:0]const u16,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteFeed: *const fn (
            self: *const IXFeedsManager,
            psz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteFolder: *const fn (
            self: *const IXFeedsManager,
            psz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackgroundSync: *const fn (
            self: *const IXFeedsManager,
            fbsa: FEEDS_BACKGROUNDSYNC_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackgroundSyncStatus: *const fn (
            self: *const IXFeedsManager,
            pfbss: ?*FEEDS_BACKGROUNDSYNC_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DefaultInterval: *const fn (
            self: *const IXFeedsManager,
            pui_interval: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultInterval: *const fn (
            self: *const IXFeedsManager,
            ui_interval: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AsyncSyncAll: *const fn (
            self: *const IXFeedsManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Normalize: *const fn (
            self: *const IXFeedsManager,
            p_stream_in: ?*IStream,
            pp_stream_out: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemCountLimit: *const fn (
            self: *const IXFeedsManager,
            pui_item_count_limit: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn rootFolder(self: *const T, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IXFeedsManager.VTable, @ptrCast(self.vtable)).RootFolder(@as(*const IXFeedsManager, @ptrCast(self)), riid_, ppv_);
            }
            pub inline fn isSubscribed(self: *const T, psz_url_: ?[*:0]const u16, pb_subscribed_: ?*BOOL) HRESULT {
                return @as(*const IXFeedsManager.VTable, @ptrCast(self.vtable)).IsSubscribed(@as(*const IXFeedsManager, @ptrCast(self)), psz_url_, pb_subscribed_);
            }
            pub inline fn existsFeed(self: *const T, psz_path_: ?[*:0]const u16, pb_feed_exists_: ?*BOOL) HRESULT {
                return @as(*const IXFeedsManager.VTable, @ptrCast(self.vtable)).ExistsFeed(@as(*const IXFeedsManager, @ptrCast(self)), psz_path_, pb_feed_exists_);
            }
            pub inline fn getFeed(self: *const T, psz_path_: ?[*:0]const u16, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IXFeedsManager.VTable, @ptrCast(self.vtable)).GetFeed(@as(*const IXFeedsManager, @ptrCast(self)), psz_path_, riid_, ppv_);
            }
            pub inline fn getFeedByUrl(self: *const T, psz_url_: ?[*:0]const u16, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IXFeedsManager.VTable, @ptrCast(self.vtable)).GetFeedByUrl(@as(*const IXFeedsManager, @ptrCast(self)), psz_url_, riid_, ppv_);
            }
            pub inline fn existsFolder(self: *const T, psz_path_: ?[*:0]const u16, pb_folder_exists_: ?*BOOL) HRESULT {
                return @as(*const IXFeedsManager.VTable, @ptrCast(self.vtable)).ExistsFolder(@as(*const IXFeedsManager, @ptrCast(self)), psz_path_, pb_folder_exists_);
            }
            pub inline fn getFolder(self: *const T, psz_path_: ?[*:0]const u16, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IXFeedsManager.VTable, @ptrCast(self.vtable)).GetFolder(@as(*const IXFeedsManager, @ptrCast(self)), psz_path_, riid_, ppv_);
            }
            pub inline fn deleteFeed(self: *const T, psz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedsManager.VTable, @ptrCast(self.vtable)).DeleteFeed(@as(*const IXFeedsManager, @ptrCast(self)), psz_path_);
            }
            pub inline fn deleteFolder(self: *const T, psz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedsManager.VTable, @ptrCast(self.vtable)).DeleteFolder(@as(*const IXFeedsManager, @ptrCast(self)), psz_path_);
            }
            pub inline fn backgroundSync(self: *const T, fbsa_: FEEDS_BACKGROUNDSYNC_ACTION) HRESULT {
                return @as(*const IXFeedsManager.VTable, @ptrCast(self.vtable)).BackgroundSync(@as(*const IXFeedsManager, @ptrCast(self)), fbsa_);
            }
            pub inline fn backgroundSyncStatus(self: *const T, pfbss_: ?*FEEDS_BACKGROUNDSYNC_STATUS) HRESULT {
                return @as(*const IXFeedsManager.VTable, @ptrCast(self.vtable)).BackgroundSyncStatus(@as(*const IXFeedsManager, @ptrCast(self)), pfbss_);
            }
            pub inline fn defaultInterval(self: *const T, pui_interval_: ?*u32) HRESULT {
                return @as(*const IXFeedsManager.VTable, @ptrCast(self.vtable)).DefaultInterval(@as(*const IXFeedsManager, @ptrCast(self)), pui_interval_);
            }
            pub inline fn setDefaultInterval(self: *const T, ui_interval_: u32) HRESULT {
                return @as(*const IXFeedsManager.VTable, @ptrCast(self.vtable)).SetDefaultInterval(@as(*const IXFeedsManager, @ptrCast(self)), ui_interval_);
            }
            pub inline fn asyncSyncAll(self: *const T) HRESULT {
                return @as(*const IXFeedsManager.VTable, @ptrCast(self.vtable)).AsyncSyncAll(@as(*const IXFeedsManager, @ptrCast(self)));
            }
            pub inline fn normalize(self: *const T, p_stream_in_: ?*IStream, pp_stream_out_: ?*?*IStream) HRESULT {
                return @as(*const IXFeedsManager.VTable, @ptrCast(self.vtable)).Normalize(@as(*const IXFeedsManager, @ptrCast(self)), p_stream_in_, pp_stream_out_);
            }
            pub inline fn itemCountLimit(self: *const T, pui_item_count_limit_: ?*u32) HRESULT {
                return @as(*const IXFeedsManager.VTable, @ptrCast(self.vtable)).ItemCountLimit(@as(*const IXFeedsManager, @ptrCast(self)), pui_item_count_limit_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXFeedsEnum_Value = Guid.initString("dc43a9d5-5015-4301-8c96-a47434b4d658");
pub const IID_IXFeedsEnum = &IID_IXFeedsEnum_Value;
pub const IXFeedsEnum = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Count: *const fn (
            self: *const IXFeedsEnum,
            pui_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const IXFeedsEnum,
            ui_index: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn count(self: *const T, pui_count_: ?*u32) HRESULT {
                return @as(*const IXFeedsEnum.VTable, @ptrCast(self.vtable)).Count(@as(*const IXFeedsEnum, @ptrCast(self)), pui_count_);
            }
            pub inline fn item(self: *const T, ui_index_: u32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IXFeedsEnum.VTable, @ptrCast(self.vtable)).Item(@as(*const IXFeedsEnum, @ptrCast(self)), ui_index_, riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXFeedFolder_Value = Guid.initString("4c963678-3a51-4b88-8531-98b90b6508f2");
pub const IID_IXFeedFolder = &IID_IXFeedFolder_Value;
pub const IXFeedFolder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Feeds: *const fn (
            self: *const IXFeedFolder,
            ppfe: ?*?*IXFeedsEnum,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Subfolders: *const fn (
            self: *const IXFeedFolder,
            ppfe: ?*?*IXFeedsEnum,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFeed: *const fn (
            self: *const IXFeedFolder,
            psz_name: ?[*:0]const u16,
            psz_url: ?[*:0]const u16,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSubfolder: *const fn (
            self: *const IXFeedFolder,
            psz_name: ?[*:0]const u16,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExistsFeed: *const fn (
            self: *const IXFeedFolder,
            psz_name: ?[*:0]const u16,
            pb_feed_exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExistsSubfolder: *const fn (
            self: *const IXFeedFolder,
            psz_name: ?[*:0]const u16,
            pb_subfolder_exists: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFeed: *const fn (
            self: *const IXFeedFolder,
            psz_name: ?[*:0]const u16,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubfolder: *const fn (
            self: *const IXFeedFolder,
            psz_name: ?[*:0]const u16,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IXFeedFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Name: *const fn (
            self: *const IXFeedFolder,
            ppsz_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Rename: *const fn (
            self: *const IXFeedFolder,
            psz_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Path: *const fn (
            self: *const IXFeedFolder,
            ppsz_path: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Move: *const fn (
            self: *const IXFeedFolder,
            psz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Parent: *const fn (
            self: *const IXFeedFolder,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRoot: *const fn (
            self: *const IXFeedFolder,
            pb_is_root_feed_folder: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWatcher: *const fn (
            self: *const IXFeedFolder,
            scope: FEEDS_EVENTS_SCOPE,
            mask: FEEDS_EVENTS_MASK,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TotalUnreadItemCount: *const fn (
            self: *const IXFeedFolder,
            pui_total_unread_item_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TotalItemCount: *const fn (
            self: *const IXFeedFolder,
            pui_total_item_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn feeds(self: *const T, ppfe_: ?*?*IXFeedsEnum) HRESULT {
                return @as(*const IXFeedFolder.VTable, @ptrCast(self.vtable)).Feeds(@as(*const IXFeedFolder, @ptrCast(self)), ppfe_);
            }
            pub inline fn subfolders(self: *const T, ppfe_: ?*?*IXFeedsEnum) HRESULT {
                return @as(*const IXFeedFolder.VTable, @ptrCast(self.vtable)).Subfolders(@as(*const IXFeedFolder, @ptrCast(self)), ppfe_);
            }
            pub inline fn createFeed(self: *const T, psz_name_: ?[*:0]const u16, psz_url_: ?[*:0]const u16, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IXFeedFolder.VTable, @ptrCast(self.vtable)).CreateFeed(@as(*const IXFeedFolder, @ptrCast(self)), psz_name_, psz_url_, riid_, ppv_);
            }
            pub inline fn createSubfolder(self: *const T, psz_name_: ?[*:0]const u16, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IXFeedFolder.VTable, @ptrCast(self.vtable)).CreateSubfolder(@as(*const IXFeedFolder, @ptrCast(self)), psz_name_, riid_, ppv_);
            }
            pub inline fn existsFeed(self: *const T, psz_name_: ?[*:0]const u16, pb_feed_exists_: ?*BOOL) HRESULT {
                return @as(*const IXFeedFolder.VTable, @ptrCast(self.vtable)).ExistsFeed(@as(*const IXFeedFolder, @ptrCast(self)), psz_name_, pb_feed_exists_);
            }
            pub inline fn existsSubfolder(self: *const T, psz_name_: ?[*:0]const u16, pb_subfolder_exists_: ?*BOOL) HRESULT {
                return @as(*const IXFeedFolder.VTable, @ptrCast(self.vtable)).ExistsSubfolder(@as(*const IXFeedFolder, @ptrCast(self)), psz_name_, pb_subfolder_exists_);
            }
            pub inline fn getFeed(self: *const T, psz_name_: ?[*:0]const u16, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IXFeedFolder.VTable, @ptrCast(self.vtable)).GetFeed(@as(*const IXFeedFolder, @ptrCast(self)), psz_name_, riid_, ppv_);
            }
            pub inline fn getSubfolder(self: *const T, psz_name_: ?[*:0]const u16, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IXFeedFolder.VTable, @ptrCast(self.vtable)).GetSubfolder(@as(*const IXFeedFolder, @ptrCast(self)), psz_name_, riid_, ppv_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IXFeedFolder.VTable, @ptrCast(self.vtable)).Delete(@as(*const IXFeedFolder, @ptrCast(self)));
            }
            pub inline fn name(self: *const T, ppsz_name_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeedFolder.VTable, @ptrCast(self.vtable)).Name(@as(*const IXFeedFolder, @ptrCast(self)), ppsz_name_);
            }
            pub inline fn rename(self: *const T, psz_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedFolder.VTable, @ptrCast(self.vtable)).Rename(@as(*const IXFeedFolder, @ptrCast(self)), psz_name_);
            }
            pub inline fn path(self: *const T, ppsz_path_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeedFolder.VTable, @ptrCast(self.vtable)).Path(@as(*const IXFeedFolder, @ptrCast(self)), ppsz_path_);
            }
            pub inline fn move(self: *const T, psz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedFolder.VTable, @ptrCast(self.vtable)).Move(@as(*const IXFeedFolder, @ptrCast(self)), psz_path_);
            }
            pub inline fn parent(self: *const T, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IXFeedFolder.VTable, @ptrCast(self.vtable)).Parent(@as(*const IXFeedFolder, @ptrCast(self)), riid_, ppv_);
            }
            pub inline fn isRoot(self: *const T, pb_is_root_feed_folder_: ?*BOOL) HRESULT {
                return @as(*const IXFeedFolder.VTable, @ptrCast(self.vtable)).IsRoot(@as(*const IXFeedFolder, @ptrCast(self)), pb_is_root_feed_folder_);
            }
            pub inline fn getWatcher(self: *const T, scope_: FEEDS_EVENTS_SCOPE, mask_: FEEDS_EVENTS_MASK, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IXFeedFolder.VTable, @ptrCast(self.vtable)).GetWatcher(@as(*const IXFeedFolder, @ptrCast(self)), scope_, mask_, riid_, ppv_);
            }
            pub inline fn totalUnreadItemCount(self: *const T, pui_total_unread_item_count_: ?*u32) HRESULT {
                return @as(*const IXFeedFolder.VTable, @ptrCast(self.vtable)).TotalUnreadItemCount(@as(*const IXFeedFolder, @ptrCast(self)), pui_total_unread_item_count_);
            }
            pub inline fn totalItemCount(self: *const T, pui_total_item_count_: ?*u32) HRESULT {
                return @as(*const IXFeedFolder.VTable, @ptrCast(self.vtable)).TotalItemCount(@as(*const IXFeedFolder, @ptrCast(self)), pui_total_item_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXFeedFolderEvents_Value = Guid.initString("7964b769-234a-4bb1-a5f4-90454c8ad07e");
pub const IID_IXFeedFolderEvents = &IID_IXFeedFolderEvents_Value;
pub const IXFeedFolderEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Error: *const fn (
            self: *const IXFeedFolderEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FolderAdded: *const fn (
            self: *const IXFeedFolderEvents,
            psz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FolderDeleted: *const fn (
            self: *const IXFeedFolderEvents,
            psz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FolderRenamed: *const fn (
            self: *const IXFeedFolderEvents,
            psz_path: ?[*:0]const u16,
            psz_old_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FolderMovedFrom: *const fn (
            self: *const IXFeedFolderEvents,
            psz_path: ?[*:0]const u16,
            psz_old_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FolderMovedTo: *const fn (
            self: *const IXFeedFolderEvents,
            psz_path: ?[*:0]const u16,
            psz_old_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FolderItemCountChanged: *const fn (
            self: *const IXFeedFolderEvents,
            psz_path: ?[*:0]const u16,
            feicf_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedAdded: *const fn (
            self: *const IXFeedFolderEvents,
            psz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedDeleted: *const fn (
            self: *const IXFeedFolderEvents,
            psz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedRenamed: *const fn (
            self: *const IXFeedFolderEvents,
            psz_path: ?[*:0]const u16,
            psz_old_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedUrlChanged: *const fn (
            self: *const IXFeedFolderEvents,
            psz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedMovedFrom: *const fn (
            self: *const IXFeedFolderEvents,
            psz_path: ?[*:0]const u16,
            psz_old_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedMovedTo: *const fn (
            self: *const IXFeedFolderEvents,
            psz_path: ?[*:0]const u16,
            psz_old_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedDownloading: *const fn (
            self: *const IXFeedFolderEvents,
            psz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedDownloadCompleted: *const fn (
            self: *const IXFeedFolderEvents,
            psz_path: ?[*:0]const u16,
            fde: FEEDS_DOWNLOAD_ERROR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedItemCountChanged: *const fn (
            self: *const IXFeedFolderEvents,
            psz_path: ?[*:0]const u16,
            feicf_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn @"error"(self: *const T) HRESULT {
                return @as(*const IXFeedFolderEvents.VTable, @ptrCast(self.vtable)).Error(@as(*const IXFeedFolderEvents, @ptrCast(self)));
            }
            pub inline fn folderAdded(self: *const T, psz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedFolderEvents.VTable, @ptrCast(self.vtable)).FolderAdded(@as(*const IXFeedFolderEvents, @ptrCast(self)), psz_path_);
            }
            pub inline fn folderDeleted(self: *const T, psz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedFolderEvents.VTable, @ptrCast(self.vtable)).FolderDeleted(@as(*const IXFeedFolderEvents, @ptrCast(self)), psz_path_);
            }
            pub inline fn folderRenamed(self: *const T, psz_path_: ?[*:0]const u16, psz_old_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedFolderEvents.VTable, @ptrCast(self.vtable)).FolderRenamed(@as(*const IXFeedFolderEvents, @ptrCast(self)), psz_path_, psz_old_path_);
            }
            pub inline fn folderMovedFrom(self: *const T, psz_path_: ?[*:0]const u16, psz_old_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedFolderEvents.VTable, @ptrCast(self.vtable)).FolderMovedFrom(@as(*const IXFeedFolderEvents, @ptrCast(self)), psz_path_, psz_old_path_);
            }
            pub inline fn folderMovedTo(self: *const T, psz_path_: ?[*:0]const u16, psz_old_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedFolderEvents.VTable, @ptrCast(self.vtable)).FolderMovedTo(@as(*const IXFeedFolderEvents, @ptrCast(self)), psz_path_, psz_old_path_);
            }
            pub inline fn folderItemCountChanged(self: *const T, psz_path_: ?[*:0]const u16, feicf_flags_: i32) HRESULT {
                return @as(*const IXFeedFolderEvents.VTable, @ptrCast(self.vtable)).FolderItemCountChanged(@as(*const IXFeedFolderEvents, @ptrCast(self)), psz_path_, feicf_flags_);
            }
            pub inline fn feedAdded(self: *const T, psz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedFolderEvents.VTable, @ptrCast(self.vtable)).FeedAdded(@as(*const IXFeedFolderEvents, @ptrCast(self)), psz_path_);
            }
            pub inline fn feedDeleted(self: *const T, psz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedFolderEvents.VTable, @ptrCast(self.vtable)).FeedDeleted(@as(*const IXFeedFolderEvents, @ptrCast(self)), psz_path_);
            }
            pub inline fn feedRenamed(self: *const T, psz_path_: ?[*:0]const u16, psz_old_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedFolderEvents.VTable, @ptrCast(self.vtable)).FeedRenamed(@as(*const IXFeedFolderEvents, @ptrCast(self)), psz_path_, psz_old_path_);
            }
            pub inline fn feedUrlChanged(self: *const T, psz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedFolderEvents.VTable, @ptrCast(self.vtable)).FeedUrlChanged(@as(*const IXFeedFolderEvents, @ptrCast(self)), psz_path_);
            }
            pub inline fn feedMovedFrom(self: *const T, psz_path_: ?[*:0]const u16, psz_old_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedFolderEvents.VTable, @ptrCast(self.vtable)).FeedMovedFrom(@as(*const IXFeedFolderEvents, @ptrCast(self)), psz_path_, psz_old_path_);
            }
            pub inline fn feedMovedTo(self: *const T, psz_path_: ?[*:0]const u16, psz_old_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedFolderEvents.VTable, @ptrCast(self.vtable)).FeedMovedTo(@as(*const IXFeedFolderEvents, @ptrCast(self)), psz_path_, psz_old_path_);
            }
            pub inline fn feedDownloading(self: *const T, psz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedFolderEvents.VTable, @ptrCast(self.vtable)).FeedDownloading(@as(*const IXFeedFolderEvents, @ptrCast(self)), psz_path_);
            }
            pub inline fn feedDownloadCompleted(self: *const T, psz_path_: ?[*:0]const u16, fde_: FEEDS_DOWNLOAD_ERROR) HRESULT {
                return @as(*const IXFeedFolderEvents.VTable, @ptrCast(self.vtable)).FeedDownloadCompleted(@as(*const IXFeedFolderEvents, @ptrCast(self)), psz_path_, fde_);
            }
            pub inline fn feedItemCountChanged(self: *const T, psz_path_: ?[*:0]const u16, feicf_flags_: i32) HRESULT {
                return @as(*const IXFeedFolderEvents.VTable, @ptrCast(self.vtable)).FeedItemCountChanged(@as(*const IXFeedFolderEvents, @ptrCast(self)), psz_path_, feicf_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXFeed_Value = Guid.initString("a44179a4-e0f6-403b-af8d-d080f425a451");
pub const IID_IXFeed = &IID_IXFeed_Value;
pub const IXFeed = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Xml: *const fn (
            self: *const IXFeed,
            ui_item_count: u32,
            sort_property: FEEDS_XML_SORT_PROPERTY,
            sort_order: FEEDS_XML_SORT_ORDER,
            filter_flags: FEEDS_XML_FILTER_FLAGS,
            include_flags: FEEDS_XML_INCLUDE_FLAGS,
            pps: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Name: *const fn (
            self: *const IXFeed,
            ppsz_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Rename: *const fn (
            self: *const IXFeed,
            psz_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Url: *const fn (
            self: *const IXFeed,
            ppsz_url: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUrl: *const fn (
            self: *const IXFeed,
            psz_url: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LocalId: *const fn (
            self: *const IXFeed,
            pguid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Path: *const fn (
            self: *const IXFeed,
            ppsz_path: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Move: *const fn (
            self: *const IXFeed,
            psz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Parent: *const fn (
            self: *const IXFeed,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LastWriteTime: *const fn (
            self: *const IXFeed,
            pst_last_write_time: ?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IXFeed,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Download: *const fn (
            self: *const IXFeed,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AsyncDownload: *const fn (
            self: *const IXFeed,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelAsyncDownload: *const fn (
            self: *const IXFeed,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SyncSetting: *const fn (
            self: *const IXFeed,
            pfss: ?*FEEDS_SYNC_SETTING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSyncSetting: *const fn (
            self: *const IXFeed,
            fss: FEEDS_SYNC_SETTING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Interval: *const fn (
            self: *const IXFeed,
            pui_interval: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInterval: *const fn (
            self: *const IXFeed,
            ui_interval: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LastDownloadTime: *const fn (
            self: *const IXFeed,
            pst_last_download_time: ?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LocalEnclosurePath: *const fn (
            self: *const IXFeed,
            ppsz_path: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Items: *const fn (
            self: *const IXFeed,
            ppfe: ?*?*IXFeedsEnum,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItem: *const fn (
            self: *const IXFeed,
            ui_id: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MarkAllItemsRead: *const fn (
            self: *const IXFeed,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MaxItemCount: *const fn (
            self: *const IXFeed,
            pui_max_item_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxItemCount: *const fn (
            self: *const IXFeed,
            ui_max_item_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DownloadEnclosuresAutomatically: *const fn (
            self: *const IXFeed,
            pb_download_enclosures_automatically: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDownloadEnclosuresAutomatically: *const fn (
            self: *const IXFeed,
            b_download_enclosures_automatically: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DownloadStatus: *const fn (
            self: *const IXFeed,
            pfds: ?*FEEDS_DOWNLOAD_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LastDownloadError: *const fn (
            self: *const IXFeed,
            pfde: ?*FEEDS_DOWNLOAD_ERROR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Merge: *const fn (
            self: *const IXFeed,
            p_stream: ?*IStream,
            psz_url: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DownloadUrl: *const fn (
            self: *const IXFeed,
            ppsz_url: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Title: *const fn (
            self: *const IXFeed,
            ppsz_title: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Description: *const fn (
            self: *const IXFeed,
            ppsz_description: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Link: *const fn (
            self: *const IXFeed,
            ppsz_home_page: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Image: *const fn (
            self: *const IXFeed,
            ppsz_image_url: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LastBuildDate: *const fn (
            self: *const IXFeed,
            pst_last_build_date: ?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PubDate: *const fn (
            self: *const IXFeed,
            pst_pub_date: ?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Ttl: *const fn (
            self: *const IXFeed,
            pui_ttl: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Language: *const fn (
            self: *const IXFeed,
            ppsz_language: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Copyright: *const fn (
            self: *const IXFeed,
            ppsz_copyright: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsList: *const fn (
            self: *const IXFeed,
            pb_is_list: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWatcher: *const fn (
            self: *const IXFeed,
            scope: FEEDS_EVENTS_SCOPE,
            mask: FEEDS_EVENTS_MASK,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnreadItemCount: *const fn (
            self: *const IXFeed,
            pui_unread_item_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemCount: *const fn (
            self: *const IXFeed,
            pui_item_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn xml(self: *const T, ui_item_count_: u32, sort_property_: FEEDS_XML_SORT_PROPERTY, sort_order_: FEEDS_XML_SORT_ORDER, filter_flags_: FEEDS_XML_FILTER_FLAGS, include_flags_: FEEDS_XML_INCLUDE_FLAGS, pps_: ?*?*IStream) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).Xml(@as(*const IXFeed, @ptrCast(self)), ui_item_count_, sort_property_, sort_order_, filter_flags_, include_flags_, pps_);
            }
            pub inline fn name(self: *const T, ppsz_name_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).Name(@as(*const IXFeed, @ptrCast(self)), ppsz_name_);
            }
            pub inline fn rename(self: *const T, psz_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).Rename(@as(*const IXFeed, @ptrCast(self)), psz_name_);
            }
            pub inline fn url(self: *const T, ppsz_url_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).Url(@as(*const IXFeed, @ptrCast(self)), ppsz_url_);
            }
            pub inline fn setUrl(self: *const T, psz_url_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).SetUrl(@as(*const IXFeed, @ptrCast(self)), psz_url_);
            }
            pub inline fn localId(self: *const T, pguid_: ?*Guid) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).LocalId(@as(*const IXFeed, @ptrCast(self)), pguid_);
            }
            pub inline fn path(self: *const T, ppsz_path_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).Path(@as(*const IXFeed, @ptrCast(self)), ppsz_path_);
            }
            pub inline fn move(self: *const T, psz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).Move(@as(*const IXFeed, @ptrCast(self)), psz_path_);
            }
            pub inline fn parent(self: *const T, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).Parent(@as(*const IXFeed, @ptrCast(self)), riid_, ppv_);
            }
            pub inline fn lastWriteTime(self: *const T, pst_last_write_time_: ?*SYSTEMTIME) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).LastWriteTime(@as(*const IXFeed, @ptrCast(self)), pst_last_write_time_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).Delete(@as(*const IXFeed, @ptrCast(self)));
            }
            pub inline fn download(self: *const T) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).Download(@as(*const IXFeed, @ptrCast(self)));
            }
            pub inline fn asyncDownload(self: *const T) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).AsyncDownload(@as(*const IXFeed, @ptrCast(self)));
            }
            pub inline fn cancelAsyncDownload(self: *const T) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).CancelAsyncDownload(@as(*const IXFeed, @ptrCast(self)));
            }
            pub inline fn syncSetting(self: *const T, pfss_: ?*FEEDS_SYNC_SETTING) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).SyncSetting(@as(*const IXFeed, @ptrCast(self)), pfss_);
            }
            pub inline fn setSyncSetting(self: *const T, fss_: FEEDS_SYNC_SETTING) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).SetSyncSetting(@as(*const IXFeed, @ptrCast(self)), fss_);
            }
            pub inline fn interval(self: *const T, pui_interval_: ?*u32) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).Interval(@as(*const IXFeed, @ptrCast(self)), pui_interval_);
            }
            pub inline fn setInterval(self: *const T, ui_interval_: u32) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).SetInterval(@as(*const IXFeed, @ptrCast(self)), ui_interval_);
            }
            pub inline fn lastDownloadTime(self: *const T, pst_last_download_time_: ?*SYSTEMTIME) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).LastDownloadTime(@as(*const IXFeed, @ptrCast(self)), pst_last_download_time_);
            }
            pub inline fn localEnclosurePath(self: *const T, ppsz_path_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).LocalEnclosurePath(@as(*const IXFeed, @ptrCast(self)), ppsz_path_);
            }
            pub inline fn items(self: *const T, ppfe_: ?*?*IXFeedsEnum) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).Items(@as(*const IXFeed, @ptrCast(self)), ppfe_);
            }
            pub inline fn getItem(self: *const T, ui_id_: u32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).GetItem(@as(*const IXFeed, @ptrCast(self)), ui_id_, riid_, ppv_);
            }
            pub inline fn markAllItemsRead(self: *const T) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).MarkAllItemsRead(@as(*const IXFeed, @ptrCast(self)));
            }
            pub inline fn maxItemCount(self: *const T, pui_max_item_count_: ?*u32) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).MaxItemCount(@as(*const IXFeed, @ptrCast(self)), pui_max_item_count_);
            }
            pub inline fn setMaxItemCount(self: *const T, ui_max_item_count_: u32) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).SetMaxItemCount(@as(*const IXFeed, @ptrCast(self)), ui_max_item_count_);
            }
            pub inline fn downloadEnclosuresAutomatically(self: *const T, pb_download_enclosures_automatically_: ?*BOOL) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).DownloadEnclosuresAutomatically(@as(*const IXFeed, @ptrCast(self)), pb_download_enclosures_automatically_);
            }
            pub inline fn setDownloadEnclosuresAutomatically(self: *const T, b_download_enclosures_automatically_: BOOL) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).SetDownloadEnclosuresAutomatically(@as(*const IXFeed, @ptrCast(self)), b_download_enclosures_automatically_);
            }
            pub inline fn downloadStatus(self: *const T, pfds_: ?*FEEDS_DOWNLOAD_STATUS) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).DownloadStatus(@as(*const IXFeed, @ptrCast(self)), pfds_);
            }
            pub inline fn lastDownloadError(self: *const T, pfde_: ?*FEEDS_DOWNLOAD_ERROR) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).LastDownloadError(@as(*const IXFeed, @ptrCast(self)), pfde_);
            }
            pub inline fn merge(self: *const T, p_stream_: ?*IStream, psz_url_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).Merge(@as(*const IXFeed, @ptrCast(self)), p_stream_, psz_url_);
            }
            pub inline fn downloadUrl(self: *const T, ppsz_url_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).DownloadUrl(@as(*const IXFeed, @ptrCast(self)), ppsz_url_);
            }
            pub inline fn title(self: *const T, ppsz_title_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).Title(@as(*const IXFeed, @ptrCast(self)), ppsz_title_);
            }
            pub inline fn description(self: *const T, ppsz_description_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).Description(@as(*const IXFeed, @ptrCast(self)), ppsz_description_);
            }
            pub inline fn link(self: *const T, ppsz_home_page_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).Link(@as(*const IXFeed, @ptrCast(self)), ppsz_home_page_);
            }
            pub inline fn image(self: *const T, ppsz_image_url_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).Image(@as(*const IXFeed, @ptrCast(self)), ppsz_image_url_);
            }
            pub inline fn lastBuildDate(self: *const T, pst_last_build_date_: ?*SYSTEMTIME) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).LastBuildDate(@as(*const IXFeed, @ptrCast(self)), pst_last_build_date_);
            }
            pub inline fn pubDate(self: *const T, pst_pub_date_: ?*SYSTEMTIME) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).PubDate(@as(*const IXFeed, @ptrCast(self)), pst_pub_date_);
            }
            pub inline fn ttl(self: *const T, pui_ttl_: ?*u32) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).Ttl(@as(*const IXFeed, @ptrCast(self)), pui_ttl_);
            }
            pub inline fn language(self: *const T, ppsz_language_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).Language(@as(*const IXFeed, @ptrCast(self)), ppsz_language_);
            }
            pub inline fn copyright(self: *const T, ppsz_copyright_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).Copyright(@as(*const IXFeed, @ptrCast(self)), ppsz_copyright_);
            }
            pub inline fn isList(self: *const T, pb_is_list_: ?*BOOL) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).IsList(@as(*const IXFeed, @ptrCast(self)), pb_is_list_);
            }
            pub inline fn getWatcher(self: *const T, scope_: FEEDS_EVENTS_SCOPE, mask_: FEEDS_EVENTS_MASK, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).GetWatcher(@as(*const IXFeed, @ptrCast(self)), scope_, mask_, riid_, ppv_);
            }
            pub inline fn unreadItemCount(self: *const T, pui_unread_item_count_: ?*u32) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).UnreadItemCount(@as(*const IXFeed, @ptrCast(self)), pui_unread_item_count_);
            }
            pub inline fn itemCount(self: *const T, pui_item_count_: ?*u32) HRESULT {
                return @as(*const IXFeed.VTable, @ptrCast(self.vtable)).ItemCount(@as(*const IXFeed, @ptrCast(self)), pui_item_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXFeed2_Value = Guid.initString("ce528e77-3716-4eb7-956d-f5e37502e12a");
pub const IID_IXFeed2 = &IID_IXFeed2_Value;
pub const IXFeed2 = extern struct {
    pub const VTable = extern struct {
        base: IXFeed.VTable,
        GetItemByEffectiveId: *const fn (
            self: *const IXFeed2,
            ui_effective_id: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LastItemDownloadTime: *const fn (
            self: *const IXFeed2,
            pst_last_item_download_time: ?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Username: *const fn (
            self: *const IXFeed2,
            ppsz_username: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Password: *const fn (
            self: *const IXFeed2,
            ppsz_password: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCredentials: *const fn (
            self: *const IXFeed2,
            psz_username: ?[*:0]const u16,
            psz_password: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearCredentials: *const fn (
            self: *const IXFeed2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXFeed.MethodMixin(T);
            pub inline fn getItemByEffectiveId(self: *const T, ui_effective_id_: u32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IXFeed2.VTable, @ptrCast(self.vtable)).GetItemByEffectiveId(@as(*const IXFeed2, @ptrCast(self)), ui_effective_id_, riid_, ppv_);
            }
            pub inline fn lastItemDownloadTime(self: *const T, pst_last_item_download_time_: ?*SYSTEMTIME) HRESULT {
                return @as(*const IXFeed2.VTable, @ptrCast(self.vtable)).LastItemDownloadTime(@as(*const IXFeed2, @ptrCast(self)), pst_last_item_download_time_);
            }
            pub inline fn username(self: *const T, ppsz_username_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeed2.VTable, @ptrCast(self.vtable)).Username(@as(*const IXFeed2, @ptrCast(self)), ppsz_username_);
            }
            pub inline fn password(self: *const T, ppsz_password_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeed2.VTable, @ptrCast(self.vtable)).Password(@as(*const IXFeed2, @ptrCast(self)), ppsz_password_);
            }
            pub inline fn setCredentials(self: *const T, psz_username_: ?[*:0]const u16, psz_password_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeed2.VTable, @ptrCast(self.vtable)).SetCredentials(@as(*const IXFeed2, @ptrCast(self)), psz_username_, psz_password_);
            }
            pub inline fn clearCredentials(self: *const T) HRESULT {
                return @as(*const IXFeed2.VTable, @ptrCast(self.vtable)).ClearCredentials(@as(*const IXFeed2, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXFeedEvents_Value = Guid.initString("1630852e-1263-465b-98e5-fe60ffec4ac2");
pub const IID_IXFeedEvents = &IID_IXFeedEvents_Value;
pub const IXFeedEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Error: *const fn (
            self: *const IXFeedEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedDeleted: *const fn (
            self: *const IXFeedEvents,
            psz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedRenamed: *const fn (
            self: *const IXFeedEvents,
            psz_path: ?[*:0]const u16,
            psz_old_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedUrlChanged: *const fn (
            self: *const IXFeedEvents,
            psz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedMoved: *const fn (
            self: *const IXFeedEvents,
            psz_path: ?[*:0]const u16,
            psz_old_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedDownloading: *const fn (
            self: *const IXFeedEvents,
            psz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedDownloadCompleted: *const fn (
            self: *const IXFeedEvents,
            psz_path: ?[*:0]const u16,
            fde: FEEDS_DOWNLOAD_ERROR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedItemCountChanged: *const fn (
            self: *const IXFeedEvents,
            psz_path: ?[*:0]const u16,
            feicf_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn @"error"(self: *const T) HRESULT {
                return @as(*const IXFeedEvents.VTable, @ptrCast(self.vtable)).Error(@as(*const IXFeedEvents, @ptrCast(self)));
            }
            pub inline fn feedDeleted(self: *const T, psz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedEvents.VTable, @ptrCast(self.vtable)).FeedDeleted(@as(*const IXFeedEvents, @ptrCast(self)), psz_path_);
            }
            pub inline fn feedRenamed(self: *const T, psz_path_: ?[*:0]const u16, psz_old_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedEvents.VTable, @ptrCast(self.vtable)).FeedRenamed(@as(*const IXFeedEvents, @ptrCast(self)), psz_path_, psz_old_path_);
            }
            pub inline fn feedUrlChanged(self: *const T, psz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedEvents.VTable, @ptrCast(self.vtable)).FeedUrlChanged(@as(*const IXFeedEvents, @ptrCast(self)), psz_path_);
            }
            pub inline fn feedMoved(self: *const T, psz_path_: ?[*:0]const u16, psz_old_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedEvents.VTable, @ptrCast(self.vtable)).FeedMoved(@as(*const IXFeedEvents, @ptrCast(self)), psz_path_, psz_old_path_);
            }
            pub inline fn feedDownloading(self: *const T, psz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedEvents.VTable, @ptrCast(self.vtable)).FeedDownloading(@as(*const IXFeedEvents, @ptrCast(self)), psz_path_);
            }
            pub inline fn feedDownloadCompleted(self: *const T, psz_path_: ?[*:0]const u16, fde_: FEEDS_DOWNLOAD_ERROR) HRESULT {
                return @as(*const IXFeedEvents.VTable, @ptrCast(self.vtable)).FeedDownloadCompleted(@as(*const IXFeedEvents, @ptrCast(self)), psz_path_, fde_);
            }
            pub inline fn feedItemCountChanged(self: *const T, psz_path_: ?[*:0]const u16, feicf_flags_: i32) HRESULT {
                return @as(*const IXFeedEvents.VTable, @ptrCast(self.vtable)).FeedItemCountChanged(@as(*const IXFeedEvents, @ptrCast(self)), psz_path_, feicf_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXFeedItem_Value = Guid.initString("e757b2f5-e73e-434e-a1bf-2bd7c3e60fcb");
pub const IID_IXFeedItem = &IID_IXFeedItem_Value;
pub const IXFeedItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Xml: *const fn (
            self: *const IXFeedItem,
            fxif: FEEDS_XML_INCLUDE_FLAGS,
            pps: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Title: *const fn (
            self: *const IXFeedItem,
            ppsz_title: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Link: *const fn (
            self: *const IXFeedItem,
            ppsz_url: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Guid: *const fn (
            self: *const IXFeedItem,
            ppsz_guid: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Description: *const fn (
            self: *const IXFeedItem,
            ppsz_description: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PubDate: *const fn (
            self: *const IXFeedItem,
            pst_pub_date: ?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Comments: *const fn (
            self: *const IXFeedItem,
            ppsz_url: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Author: *const fn (
            self: *const IXFeedItem,
            ppsz_author: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enclosure: *const fn (
            self: *const IXFeedItem,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRead: *const fn (
            self: *const IXFeedItem,
            pb_is_read: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIsRead: *const fn (
            self: *const IXFeedItem,
            b_is_read: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LocalId: *const fn (
            self: *const IXFeedItem,
            pui_id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Parent: *const fn (
            self: *const IXFeedItem,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IXFeedItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DownloadUrl: *const fn (
            self: *const IXFeedItem,
            ppsz_url: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LastDownloadTime: *const fn (
            self: *const IXFeedItem,
            pst_last_download_time: ?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Modified: *const fn (
            self: *const IXFeedItem,
            pst_modified_time: ?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn xml(self: *const T, fxif_: FEEDS_XML_INCLUDE_FLAGS, pps_: ?*?*IStream) HRESULT {
                return @as(*const IXFeedItem.VTable, @ptrCast(self.vtable)).Xml(@as(*const IXFeedItem, @ptrCast(self)), fxif_, pps_);
            }
            pub inline fn title(self: *const T, ppsz_title_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeedItem.VTable, @ptrCast(self.vtable)).Title(@as(*const IXFeedItem, @ptrCast(self)), ppsz_title_);
            }
            pub inline fn link(self: *const T, ppsz_url_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeedItem.VTable, @ptrCast(self.vtable)).Link(@as(*const IXFeedItem, @ptrCast(self)), ppsz_url_);
            }
            pub inline fn guid(self: *const T, ppsz_guid_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeedItem.VTable, @ptrCast(self.vtable)).Guid(@as(*const IXFeedItem, @ptrCast(self)), ppsz_guid_);
            }
            pub inline fn description(self: *const T, ppsz_description_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeedItem.VTable, @ptrCast(self.vtable)).Description(@as(*const IXFeedItem, @ptrCast(self)), ppsz_description_);
            }
            pub inline fn pubDate(self: *const T, pst_pub_date_: ?*SYSTEMTIME) HRESULT {
                return @as(*const IXFeedItem.VTable, @ptrCast(self.vtable)).PubDate(@as(*const IXFeedItem, @ptrCast(self)), pst_pub_date_);
            }
            pub inline fn comments(self: *const T, ppsz_url_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeedItem.VTable, @ptrCast(self.vtable)).Comments(@as(*const IXFeedItem, @ptrCast(self)), ppsz_url_);
            }
            pub inline fn author(self: *const T, ppsz_author_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeedItem.VTable, @ptrCast(self.vtable)).Author(@as(*const IXFeedItem, @ptrCast(self)), ppsz_author_);
            }
            pub inline fn enclosure(self: *const T, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IXFeedItem.VTable, @ptrCast(self.vtable)).Enclosure(@as(*const IXFeedItem, @ptrCast(self)), riid_, ppv_);
            }
            pub inline fn isRead(self: *const T, pb_is_read_: ?*BOOL) HRESULT {
                return @as(*const IXFeedItem.VTable, @ptrCast(self.vtable)).IsRead(@as(*const IXFeedItem, @ptrCast(self)), pb_is_read_);
            }
            pub inline fn setIsRead(self: *const T, b_is_read_: BOOL) HRESULT {
                return @as(*const IXFeedItem.VTable, @ptrCast(self.vtable)).SetIsRead(@as(*const IXFeedItem, @ptrCast(self)), b_is_read_);
            }
            pub inline fn localId(self: *const T, pui_id_: ?*u32) HRESULT {
                return @as(*const IXFeedItem.VTable, @ptrCast(self.vtable)).LocalId(@as(*const IXFeedItem, @ptrCast(self)), pui_id_);
            }
            pub inline fn parent(self: *const T, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IXFeedItem.VTable, @ptrCast(self.vtable)).Parent(@as(*const IXFeedItem, @ptrCast(self)), riid_, ppv_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IXFeedItem.VTable, @ptrCast(self.vtable)).Delete(@as(*const IXFeedItem, @ptrCast(self)));
            }
            pub inline fn downloadUrl(self: *const T, ppsz_url_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeedItem.VTable, @ptrCast(self.vtable)).DownloadUrl(@as(*const IXFeedItem, @ptrCast(self)), ppsz_url_);
            }
            pub inline fn lastDownloadTime(self: *const T, pst_last_download_time_: ?*SYSTEMTIME) HRESULT {
                return @as(*const IXFeedItem.VTable, @ptrCast(self.vtable)).LastDownloadTime(@as(*const IXFeedItem, @ptrCast(self)), pst_last_download_time_);
            }
            pub inline fn modified(self: *const T, pst_modified_time_: ?*SYSTEMTIME) HRESULT {
                return @as(*const IXFeedItem.VTable, @ptrCast(self.vtable)).Modified(@as(*const IXFeedItem, @ptrCast(self)), pst_modified_time_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXFeedItem2_Value = Guid.initString("6cda2dc7-9013-4522-9970-2a9dd9ead5a3");
pub const IID_IXFeedItem2 = &IID_IXFeedItem2_Value;
pub const IXFeedItem2 = extern struct {
    pub const VTable = extern struct {
        base: IXFeedItem.VTable,
        EffectiveId: *const fn (
            self: *const IXFeedItem2,
            pui_effective_id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IXFeedItem.MethodMixin(T);
            pub inline fn effectiveId(self: *const T, pui_effective_id_: ?*u32) HRESULT {
                return @as(*const IXFeedItem2.VTable, @ptrCast(self.vtable)).EffectiveId(@as(*const IXFeedItem2, @ptrCast(self)), pui_effective_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IXFeedEnclosure_Value = Guid.initString("bfbfb953-644f-4792-b69c-dfaca4cbf89a");
pub const IID_IXFeedEnclosure = &IID_IXFeedEnclosure_Value;
pub const IXFeedEnclosure = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Url: *const fn (
            self: *const IXFeedEnclosure,
            ppsz_url: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Type: *const fn (
            self: *const IXFeedEnclosure,
            ppsz_mime_type: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Length: *const fn (
            self: *const IXFeedEnclosure,
            pui_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AsyncDownload: *const fn (
            self: *const IXFeedEnclosure,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelAsyncDownload: *const fn (
            self: *const IXFeedEnclosure,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DownloadStatus: *const fn (
            self: *const IXFeedEnclosure,
            pfds: ?*FEEDS_DOWNLOAD_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LastDownloadError: *const fn (
            self: *const IXFeedEnclosure,
            pfde: ?*FEEDS_DOWNLOAD_ERROR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LocalPath: *const fn (
            self: *const IXFeedEnclosure,
            ppsz_path: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Parent: *const fn (
            self: *const IXFeedEnclosure,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DownloadUrl: *const fn (
            self: *const IXFeedEnclosure,
            ppsz_url: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DownloadMimeType: *const fn (
            self: *const IXFeedEnclosure,
            ppsz_mime_type: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveFile: *const fn (
            self: *const IXFeedEnclosure,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFile: *const fn (
            self: *const IXFeedEnclosure,
            psz_download_url: ?[*:0]const u16,
            psz_download_file_path: ?[*:0]const u16,
            psz_download_mime_type: ?[*:0]const u16,
            psz_enclosure_filename: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn url(self: *const T, ppsz_url_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeedEnclosure.VTable, @ptrCast(self.vtable)).Url(@as(*const IXFeedEnclosure, @ptrCast(self)), ppsz_url_);
            }
            pub inline fn @"type"(self: *const T, ppsz_mime_type_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeedEnclosure.VTable, @ptrCast(self.vtable)).Type(@as(*const IXFeedEnclosure, @ptrCast(self)), ppsz_mime_type_);
            }
            pub inline fn length(self: *const T, pui_length_: ?*u32) HRESULT {
                return @as(*const IXFeedEnclosure.VTable, @ptrCast(self.vtable)).Length(@as(*const IXFeedEnclosure, @ptrCast(self)), pui_length_);
            }
            pub inline fn asyncDownload(self: *const T) HRESULT {
                return @as(*const IXFeedEnclosure.VTable, @ptrCast(self.vtable)).AsyncDownload(@as(*const IXFeedEnclosure, @ptrCast(self)));
            }
            pub inline fn cancelAsyncDownload(self: *const T) HRESULT {
                return @as(*const IXFeedEnclosure.VTable, @ptrCast(self.vtable)).CancelAsyncDownload(@as(*const IXFeedEnclosure, @ptrCast(self)));
            }
            pub inline fn downloadStatus(self: *const T, pfds_: ?*FEEDS_DOWNLOAD_STATUS) HRESULT {
                return @as(*const IXFeedEnclosure.VTable, @ptrCast(self.vtable)).DownloadStatus(@as(*const IXFeedEnclosure, @ptrCast(self)), pfds_);
            }
            pub inline fn lastDownloadError(self: *const T, pfde_: ?*FEEDS_DOWNLOAD_ERROR) HRESULT {
                return @as(*const IXFeedEnclosure.VTable, @ptrCast(self.vtable)).LastDownloadError(@as(*const IXFeedEnclosure, @ptrCast(self)), pfde_);
            }
            pub inline fn localPath(self: *const T, ppsz_path_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeedEnclosure.VTable, @ptrCast(self.vtable)).LocalPath(@as(*const IXFeedEnclosure, @ptrCast(self)), ppsz_path_);
            }
            pub inline fn parent(self: *const T, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IXFeedEnclosure.VTable, @ptrCast(self.vtable)).Parent(@as(*const IXFeedEnclosure, @ptrCast(self)), riid_, ppv_);
            }
            pub inline fn downloadUrl(self: *const T, ppsz_url_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeedEnclosure.VTable, @ptrCast(self.vtable)).DownloadUrl(@as(*const IXFeedEnclosure, @ptrCast(self)), ppsz_url_);
            }
            pub inline fn downloadMimeType(self: *const T, ppsz_mime_type_: ?*?PWSTR) HRESULT {
                return @as(*const IXFeedEnclosure.VTable, @ptrCast(self.vtable)).DownloadMimeType(@as(*const IXFeedEnclosure, @ptrCast(self)), ppsz_mime_type_);
            }
            pub inline fn removeFile(self: *const T) HRESULT {
                return @as(*const IXFeedEnclosure.VTable, @ptrCast(self.vtable)).RemoveFile(@as(*const IXFeedEnclosure, @ptrCast(self)));
            }
            pub inline fn setFile(self: *const T, psz_download_url_: ?[*:0]const u16, psz_download_file_path_: ?[*:0]const u16, psz_download_mime_type_: ?[*:0]const u16, psz_enclosure_filename_: ?[*:0]const u16) HRESULT {
                return @as(*const IXFeedEnclosure.VTable, @ptrCast(self.vtable)).SetFile(@as(*const IXFeedEnclosure, @ptrCast(self)), psz_download_url_, psz_download_file_path_, psz_download_mime_type_, psz_enclosure_filename_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IFeedsManager_Value = Guid.initString("a74029cc-1f1a-4906-88f0-810638d86591");
pub const IID_IFeedsManager = &IID_IFeedsManager_Value;
pub const IFeedsManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RootFolder: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedsManager,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSubscribed: *const fn (
            self: *const IFeedsManager,
            feed_url: ?BSTR,
            subscribed: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExistsFeed: *const fn (
            self: *const IFeedsManager,
            feed_path: ?BSTR,
            exists: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFeed: *const fn (
            self: *const IFeedsManager,
            feed_path: ?BSTR,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFeedByUrl: *const fn (
            self: *const IFeedsManager,
            feed_url: ?BSTR,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExistsFolder: *const fn (
            self: *const IFeedsManager,
            folder_path: ?BSTR,
            exists: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolder: *const fn (
            self: *const IFeedsManager,
            folder_path: ?BSTR,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteFeed: *const fn (
            self: *const IFeedsManager,
            feed_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteFolder: *const fn (
            self: *const IFeedsManager,
            folder_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackgroundSync: *const fn (
            self: *const IFeedsManager,
            action: FEEDS_BACKGROUNDSYNC_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackgroundSyncStatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedsManager,
            status: ?*FEEDS_BACKGROUNDSYNC_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DefaultInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedsManager,
            minutes: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DefaultInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedsManager,
            minutes: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AsyncSyncAll: *const fn (
            self: *const IFeedsManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Normalize: *const fn (
            self: *const IFeedsManager,
            feed_xml_in: ?BSTR,
            feed_xml_out: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemCountLimit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedsManager,
            item_count_limit: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getRootFolder(self: *const T, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeedsManager.VTable, @ptrCast(self.vtable)).get_RootFolder(@as(*const IFeedsManager, @ptrCast(self)), disp_);
            }
            pub inline fn isSubscribed(self: *const T, feed_url_: ?BSTR, subscribed_: ?*i16) HRESULT {
                return @as(*const IFeedsManager.VTable, @ptrCast(self.vtable)).IsSubscribed(@as(*const IFeedsManager, @ptrCast(self)), feed_url_, subscribed_);
            }
            pub inline fn existsFeed(self: *const T, feed_path_: ?BSTR, exists_: ?*i16) HRESULT {
                return @as(*const IFeedsManager.VTable, @ptrCast(self.vtable)).ExistsFeed(@as(*const IFeedsManager, @ptrCast(self)), feed_path_, exists_);
            }
            pub inline fn getFeed(self: *const T, feed_path_: ?BSTR, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeedsManager.VTable, @ptrCast(self.vtable)).GetFeed(@as(*const IFeedsManager, @ptrCast(self)), feed_path_, disp_);
            }
            pub inline fn getFeedByUrl(self: *const T, feed_url_: ?BSTR, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeedsManager.VTable, @ptrCast(self.vtable)).GetFeedByUrl(@as(*const IFeedsManager, @ptrCast(self)), feed_url_, disp_);
            }
            pub inline fn existsFolder(self: *const T, folder_path_: ?BSTR, exists_: ?*i16) HRESULT {
                return @as(*const IFeedsManager.VTable, @ptrCast(self.vtable)).ExistsFolder(@as(*const IFeedsManager, @ptrCast(self)), folder_path_, exists_);
            }
            pub inline fn getFolder(self: *const T, folder_path_: ?BSTR, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeedsManager.VTable, @ptrCast(self.vtable)).GetFolder(@as(*const IFeedsManager, @ptrCast(self)), folder_path_, disp_);
            }
            pub inline fn deleteFeed(self: *const T, feed_path_: ?BSTR) HRESULT {
                return @as(*const IFeedsManager.VTable, @ptrCast(self.vtable)).DeleteFeed(@as(*const IFeedsManager, @ptrCast(self)), feed_path_);
            }
            pub inline fn deleteFolder(self: *const T, folder_path_: ?BSTR) HRESULT {
                return @as(*const IFeedsManager.VTable, @ptrCast(self.vtable)).DeleteFolder(@as(*const IFeedsManager, @ptrCast(self)), folder_path_);
            }
            pub inline fn backgroundSync(self: *const T, action_: FEEDS_BACKGROUNDSYNC_ACTION) HRESULT {
                return @as(*const IFeedsManager.VTable, @ptrCast(self.vtable)).BackgroundSync(@as(*const IFeedsManager, @ptrCast(self)), action_);
            }
            pub inline fn getBackgroundSyncStatus(self: *const T, status_: ?*FEEDS_BACKGROUNDSYNC_STATUS) HRESULT {
                return @as(*const IFeedsManager.VTable, @ptrCast(self.vtable)).get_BackgroundSyncStatus(@as(*const IFeedsManager, @ptrCast(self)), status_);
            }
            pub inline fn getDefaultInterval(self: *const T, minutes_: ?*i32) HRESULT {
                return @as(*const IFeedsManager.VTable, @ptrCast(self.vtable)).get_DefaultInterval(@as(*const IFeedsManager, @ptrCast(self)), minutes_);
            }
            pub inline fn putDefaultInterval(self: *const T, minutes_: i32) HRESULT {
                return @as(*const IFeedsManager.VTable, @ptrCast(self.vtable)).put_DefaultInterval(@as(*const IFeedsManager, @ptrCast(self)), minutes_);
            }
            pub inline fn asyncSyncAll(self: *const T) HRESULT {
                return @as(*const IFeedsManager.VTable, @ptrCast(self.vtable)).AsyncSyncAll(@as(*const IFeedsManager, @ptrCast(self)));
            }
            pub inline fn normalize(self: *const T, feed_xml_in_: ?BSTR, feed_xml_out_: ?*?BSTR) HRESULT {
                return @as(*const IFeedsManager.VTable, @ptrCast(self.vtable)).Normalize(@as(*const IFeedsManager, @ptrCast(self)), feed_xml_in_, feed_xml_out_);
            }
            pub inline fn getItemCountLimit(self: *const T, item_count_limit_: ?*i32) HRESULT {
                return @as(*const IFeedsManager.VTable, @ptrCast(self.vtable)).get_ItemCountLimit(@as(*const IFeedsManager, @ptrCast(self)), item_count_limit_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IFeedsEnum_Value = Guid.initString("e3cd0028-2eed-4c60-8fae-a3225309a836");
pub const IID_IFeedsEnum = &IID_IFeedsEnum_Value;
pub const IFeedsEnum = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedsEnum,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const IFeedsEnum,
            index: i32,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedsEnum,
            enum_var: ?*?*IEnumVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const IFeedsEnum.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IFeedsEnum, @ptrCast(self)), count_);
            }
            pub inline fn item(self: *const T, index_: i32, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeedsEnum.VTable, @ptrCast(self.vtable)).Item(@as(*const IFeedsEnum, @ptrCast(self)), index_, disp_);
            }
            pub inline fn getNewEnum(self: *const T, enum_var_: ?*?*IEnumVARIANT) HRESULT {
                return @as(*const IFeedsEnum.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IFeedsEnum, @ptrCast(self)), enum_var_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IFeedFolder_Value = Guid.initString("81f04ad1-4194-4d7d-86d6-11813cec163c");
pub const IID_IFeedFolder = &IID_IFeedFolder_Value;
pub const IFeedFolder = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Feeds: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedFolder,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Subfolders: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedFolder,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFeed: *const fn (
            self: *const IFeedFolder,
            feed_name: ?BSTR,
            feed_url: ?BSTR,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSubfolder: *const fn (
            self: *const IFeedFolder,
            folder_name: ?BSTR,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExistsFeed: *const fn (
            self: *const IFeedFolder,
            feed_name: ?BSTR,
            exists: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFeed: *const fn (
            self: *const IFeedFolder,
            feed_name: ?BSTR,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExistsSubfolder: *const fn (
            self: *const IFeedFolder,
            folder_name: ?BSTR,
            exists: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubfolder: *const fn (
            self: *const IFeedFolder,
            folder_name: ?BSTR,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IFeedFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedFolder,
            folder_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Rename: *const fn (
            self: *const IFeedFolder,
            folder_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedFolder,
            folder_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Move: *const fn (
            self: *const IFeedFolder,
            new_parent_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedFolder,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsRoot: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedFolder,
            is_root: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TotalUnreadItemCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedFolder,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TotalItemCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedFolder,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWatcher: *const fn (
            self: *const IFeedFolder,
            scope: FEEDS_EVENTS_SCOPE,
            mask: FEEDS_EVENTS_MASK,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getFeeds(self: *const T, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeedFolder.VTable, @ptrCast(self.vtable)).get_Feeds(@as(*const IFeedFolder, @ptrCast(self)), disp_);
            }
            pub inline fn getSubfolders(self: *const T, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeedFolder.VTable, @ptrCast(self.vtable)).get_Subfolders(@as(*const IFeedFolder, @ptrCast(self)), disp_);
            }
            pub inline fn createFeed(self: *const T, feed_name_: ?BSTR, feed_url_: ?BSTR, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeedFolder.VTable, @ptrCast(self.vtable)).CreateFeed(@as(*const IFeedFolder, @ptrCast(self)), feed_name_, feed_url_, disp_);
            }
            pub inline fn createSubfolder(self: *const T, folder_name_: ?BSTR, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeedFolder.VTable, @ptrCast(self.vtable)).CreateSubfolder(@as(*const IFeedFolder, @ptrCast(self)), folder_name_, disp_);
            }
            pub inline fn existsFeed(self: *const T, feed_name_: ?BSTR, exists_: ?*i16) HRESULT {
                return @as(*const IFeedFolder.VTable, @ptrCast(self.vtable)).ExistsFeed(@as(*const IFeedFolder, @ptrCast(self)), feed_name_, exists_);
            }
            pub inline fn getFeed(self: *const T, feed_name_: ?BSTR, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeedFolder.VTable, @ptrCast(self.vtable)).GetFeed(@as(*const IFeedFolder, @ptrCast(self)), feed_name_, disp_);
            }
            pub inline fn existsSubfolder(self: *const T, folder_name_: ?BSTR, exists_: ?*i16) HRESULT {
                return @as(*const IFeedFolder.VTable, @ptrCast(self.vtable)).ExistsSubfolder(@as(*const IFeedFolder, @ptrCast(self)), folder_name_, exists_);
            }
            pub inline fn getSubfolder(self: *const T, folder_name_: ?BSTR, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeedFolder.VTable, @ptrCast(self.vtable)).GetSubfolder(@as(*const IFeedFolder, @ptrCast(self)), folder_name_, disp_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IFeedFolder.VTable, @ptrCast(self.vtable)).Delete(@as(*const IFeedFolder, @ptrCast(self)));
            }
            pub inline fn getName(self: *const T, folder_name_: ?*?BSTR) HRESULT {
                return @as(*const IFeedFolder.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IFeedFolder, @ptrCast(self)), folder_name_);
            }
            pub inline fn rename(self: *const T, folder_name_: ?BSTR) HRESULT {
                return @as(*const IFeedFolder.VTable, @ptrCast(self.vtable)).Rename(@as(*const IFeedFolder, @ptrCast(self)), folder_name_);
            }
            pub inline fn getPath(self: *const T, folder_path_: ?*?BSTR) HRESULT {
                return @as(*const IFeedFolder.VTable, @ptrCast(self.vtable)).get_Path(@as(*const IFeedFolder, @ptrCast(self)), folder_path_);
            }
            pub inline fn move(self: *const T, new_parent_path_: ?BSTR) HRESULT {
                return @as(*const IFeedFolder.VTable, @ptrCast(self.vtable)).Move(@as(*const IFeedFolder, @ptrCast(self)), new_parent_path_);
            }
            pub inline fn getParent(self: *const T, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeedFolder.VTable, @ptrCast(self.vtable)).get_Parent(@as(*const IFeedFolder, @ptrCast(self)), disp_);
            }
            pub inline fn getIsRoot(self: *const T, is_root_: ?*i16) HRESULT {
                return @as(*const IFeedFolder.VTable, @ptrCast(self.vtable)).get_IsRoot(@as(*const IFeedFolder, @ptrCast(self)), is_root_);
            }
            pub inline fn getTotalUnreadItemCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const IFeedFolder.VTable, @ptrCast(self.vtable)).get_TotalUnreadItemCount(@as(*const IFeedFolder, @ptrCast(self)), count_);
            }
            pub inline fn getTotalItemCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const IFeedFolder.VTable, @ptrCast(self.vtable)).get_TotalItemCount(@as(*const IFeedFolder, @ptrCast(self)), count_);
            }
            pub inline fn getWatcher(self: *const T, scope_: FEEDS_EVENTS_SCOPE, mask_: FEEDS_EVENTS_MASK, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeedFolder.VTable, @ptrCast(self.vtable)).GetWatcher(@as(*const IFeedFolder, @ptrCast(self)), scope_, mask_, disp_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IFeedFolderEvents_Value = Guid.initString("20a59fa6-a844-4630-9e98-175f70b4d55b");
pub const IID_IFeedFolderEvents = &IID_IFeedFolderEvents_Value;
pub const IFeedFolderEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Error: *const fn (
            self: *const IFeedFolderEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FolderAdded: *const fn (
            self: *const IFeedFolderEvents,
            path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FolderDeleted: *const fn (
            self: *const IFeedFolderEvents,
            path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FolderRenamed: *const fn (
            self: *const IFeedFolderEvents,
            path: ?BSTR,
            old_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FolderMovedFrom: *const fn (
            self: *const IFeedFolderEvents,
            path: ?BSTR,
            old_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FolderMovedTo: *const fn (
            self: *const IFeedFolderEvents,
            path: ?BSTR,
            old_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FolderItemCountChanged: *const fn (
            self: *const IFeedFolderEvents,
            path: ?BSTR,
            item_count_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedAdded: *const fn (
            self: *const IFeedFolderEvents,
            path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedDeleted: *const fn (
            self: *const IFeedFolderEvents,
            path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedRenamed: *const fn (
            self: *const IFeedFolderEvents,
            path: ?BSTR,
            old_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedUrlChanged: *const fn (
            self: *const IFeedFolderEvents,
            path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedMovedFrom: *const fn (
            self: *const IFeedFolderEvents,
            path: ?BSTR,
            old_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedMovedTo: *const fn (
            self: *const IFeedFolderEvents,
            path: ?BSTR,
            old_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedDownloading: *const fn (
            self: *const IFeedFolderEvents,
            path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedDownloadCompleted: *const fn (
            self: *const IFeedFolderEvents,
            path: ?BSTR,
            @"error": FEEDS_DOWNLOAD_ERROR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedItemCountChanged: *const fn (
            self: *const IFeedFolderEvents,
            path: ?BSTR,
            item_count_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn @"error"(self: *const T) HRESULT {
                return @as(*const IFeedFolderEvents.VTable, @ptrCast(self.vtable)).Error(@as(*const IFeedFolderEvents, @ptrCast(self)));
            }
            pub inline fn folderAdded(self: *const T, path_: ?BSTR) HRESULT {
                return @as(*const IFeedFolderEvents.VTable, @ptrCast(self.vtable)).FolderAdded(@as(*const IFeedFolderEvents, @ptrCast(self)), path_);
            }
            pub inline fn folderDeleted(self: *const T, path_: ?BSTR) HRESULT {
                return @as(*const IFeedFolderEvents.VTable, @ptrCast(self.vtable)).FolderDeleted(@as(*const IFeedFolderEvents, @ptrCast(self)), path_);
            }
            pub inline fn folderRenamed(self: *const T, path_: ?BSTR, old_path_: ?BSTR) HRESULT {
                return @as(*const IFeedFolderEvents.VTable, @ptrCast(self.vtable)).FolderRenamed(@as(*const IFeedFolderEvents, @ptrCast(self)), path_, old_path_);
            }
            pub inline fn folderMovedFrom(self: *const T, path_: ?BSTR, old_path_: ?BSTR) HRESULT {
                return @as(*const IFeedFolderEvents.VTable, @ptrCast(self.vtable)).FolderMovedFrom(@as(*const IFeedFolderEvents, @ptrCast(self)), path_, old_path_);
            }
            pub inline fn folderMovedTo(self: *const T, path_: ?BSTR, old_path_: ?BSTR) HRESULT {
                return @as(*const IFeedFolderEvents.VTable, @ptrCast(self.vtable)).FolderMovedTo(@as(*const IFeedFolderEvents, @ptrCast(self)), path_, old_path_);
            }
            pub inline fn folderItemCountChanged(self: *const T, path_: ?BSTR, item_count_type_: i32) HRESULT {
                return @as(*const IFeedFolderEvents.VTable, @ptrCast(self.vtable)).FolderItemCountChanged(@as(*const IFeedFolderEvents, @ptrCast(self)), path_, item_count_type_);
            }
            pub inline fn feedAdded(self: *const T, path_: ?BSTR) HRESULT {
                return @as(*const IFeedFolderEvents.VTable, @ptrCast(self.vtable)).FeedAdded(@as(*const IFeedFolderEvents, @ptrCast(self)), path_);
            }
            pub inline fn feedDeleted(self: *const T, path_: ?BSTR) HRESULT {
                return @as(*const IFeedFolderEvents.VTable, @ptrCast(self.vtable)).FeedDeleted(@as(*const IFeedFolderEvents, @ptrCast(self)), path_);
            }
            pub inline fn feedRenamed(self: *const T, path_: ?BSTR, old_path_: ?BSTR) HRESULT {
                return @as(*const IFeedFolderEvents.VTable, @ptrCast(self.vtable)).FeedRenamed(@as(*const IFeedFolderEvents, @ptrCast(self)), path_, old_path_);
            }
            pub inline fn feedUrlChanged(self: *const T, path_: ?BSTR) HRESULT {
                return @as(*const IFeedFolderEvents.VTable, @ptrCast(self.vtable)).FeedUrlChanged(@as(*const IFeedFolderEvents, @ptrCast(self)), path_);
            }
            pub inline fn feedMovedFrom(self: *const T, path_: ?BSTR, old_path_: ?BSTR) HRESULT {
                return @as(*const IFeedFolderEvents.VTable, @ptrCast(self.vtable)).FeedMovedFrom(@as(*const IFeedFolderEvents, @ptrCast(self)), path_, old_path_);
            }
            pub inline fn feedMovedTo(self: *const T, path_: ?BSTR, old_path_: ?BSTR) HRESULT {
                return @as(*const IFeedFolderEvents.VTable, @ptrCast(self.vtable)).FeedMovedTo(@as(*const IFeedFolderEvents, @ptrCast(self)), path_, old_path_);
            }
            pub inline fn feedDownloading(self: *const T, path_: ?BSTR) HRESULT {
                return @as(*const IFeedFolderEvents.VTable, @ptrCast(self.vtable)).FeedDownloading(@as(*const IFeedFolderEvents, @ptrCast(self)), path_);
            }
            pub inline fn feedDownloadCompleted(self: *const T, path_: ?BSTR, error_: FEEDS_DOWNLOAD_ERROR) HRESULT {
                return @as(*const IFeedFolderEvents.VTable, @ptrCast(self.vtable)).FeedDownloadCompleted(@as(*const IFeedFolderEvents, @ptrCast(self)), path_, error_);
            }
            pub inline fn feedItemCountChanged(self: *const T, path_: ?BSTR, item_count_type_: i32) HRESULT {
                return @as(*const IFeedFolderEvents.VTable, @ptrCast(self.vtable)).FeedItemCountChanged(@as(*const IFeedFolderEvents, @ptrCast(self)), path_, item_count_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IFeed_Value = Guid.initString("f7f915d8-2ede-42bc-98e7-a5d05063a757");
pub const IID_IFeed = &IID_IFeed_Value;
pub const IFeed = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Xml: *const fn (
            self: *const IFeed,
            count: i32,
            sort_property: FEEDS_XML_SORT_PROPERTY,
            sort_order: FEEDS_XML_SORT_ORDER,
            filter_flags: FEEDS_XML_FILTER_FLAGS,
            include_flags: FEEDS_XML_INCLUDE_FLAGS,
            xml: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Rename: *const fn (
            self: *const IFeed,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Url: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            feed_url: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Url: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            feed_url: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            feed_guid: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Move: *const fn (
            self: *const IFeed,
            new_parent_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastWriteTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            last_write: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IFeed,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Download: *const fn (
            self: *const IFeed,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AsyncDownload: *const fn (
            self: *const IFeed,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelAsyncDownload: *const fn (
            self: *const IFeed,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SyncSetting: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            sync_setting: ?*FEEDS_SYNC_SETTING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SyncSetting: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            sync_setting: FEEDS_SYNC_SETTING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Interval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            minutes: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Interval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            minutes: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastDownloadTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            last_download: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalEnclosurePath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Items: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItem: *const fn (
            self: *const IFeed,
            item_id: i32,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Title: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            title: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Link: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            home_page: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Image: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            image_url: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastBuildDate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            last_build_date: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PubDate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            last_populate_date: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Ttl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            ttl: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Language: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            language: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Copyright: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            copyright: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxItemCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxItemCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DownloadEnclosuresAutomatically: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            download_enclosures_automatically: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DownloadEnclosuresAutomatically: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            download_enclosures_automatically: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DownloadStatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            status: ?*FEEDS_DOWNLOAD_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastDownloadError: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            @"error": ?*FEEDS_DOWNLOAD_ERROR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Merge: *const fn (
            self: *const IFeed,
            feed_xml: ?BSTR,
            feed_url: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DownloadUrl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            feed_url: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsList: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            is_list: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MarkAllItemsRead: *const fn (
            self: *const IFeed,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWatcher: *const fn (
            self: *const IFeed,
            scope: FEEDS_EVENTS_SCOPE,
            mask: FEEDS_EVENTS_MASK,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UnreadItemCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ItemCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn xml(self: *const T, count_: i32, sort_property_: FEEDS_XML_SORT_PROPERTY, sort_order_: FEEDS_XML_SORT_ORDER, filter_flags_: FEEDS_XML_FILTER_FLAGS, include_flags_: FEEDS_XML_INCLUDE_FLAGS, xml_: ?*?BSTR) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).Xml(@as(*const IFeed, @ptrCast(self)), count_, sort_property_, sort_order_, filter_flags_, include_flags_, xml_);
            }
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IFeed, @ptrCast(self)), name_);
            }
            pub inline fn rename(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).Rename(@as(*const IFeed, @ptrCast(self)), name_);
            }
            pub inline fn getUrl(self: *const T, feed_url_: ?*?BSTR) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_Url(@as(*const IFeed, @ptrCast(self)), feed_url_);
            }
            pub inline fn putUrl(self: *const T, feed_url_: ?BSTR) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).put_Url(@as(*const IFeed, @ptrCast(self)), feed_url_);
            }
            pub inline fn getLocalId(self: *const T, feed_guid_: ?*?BSTR) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_LocalId(@as(*const IFeed, @ptrCast(self)), feed_guid_);
            }
            pub inline fn getPath(self: *const T, path_: ?*?BSTR) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_Path(@as(*const IFeed, @ptrCast(self)), path_);
            }
            pub inline fn move(self: *const T, new_parent_path_: ?BSTR) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).Move(@as(*const IFeed, @ptrCast(self)), new_parent_path_);
            }
            pub inline fn getParent(self: *const T, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_Parent(@as(*const IFeed, @ptrCast(self)), disp_);
            }
            pub inline fn getLastWriteTime(self: *const T, last_write_: ?*f64) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_LastWriteTime(@as(*const IFeed, @ptrCast(self)), last_write_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).Delete(@as(*const IFeed, @ptrCast(self)));
            }
            pub inline fn download(self: *const T) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).Download(@as(*const IFeed, @ptrCast(self)));
            }
            pub inline fn asyncDownload(self: *const T) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).AsyncDownload(@as(*const IFeed, @ptrCast(self)));
            }
            pub inline fn cancelAsyncDownload(self: *const T) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).CancelAsyncDownload(@as(*const IFeed, @ptrCast(self)));
            }
            pub inline fn getSyncSetting(self: *const T, sync_setting_: ?*FEEDS_SYNC_SETTING) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_SyncSetting(@as(*const IFeed, @ptrCast(self)), sync_setting_);
            }
            pub inline fn putSyncSetting(self: *const T, sync_setting_: FEEDS_SYNC_SETTING) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).put_SyncSetting(@as(*const IFeed, @ptrCast(self)), sync_setting_);
            }
            pub inline fn getInterval(self: *const T, minutes_: ?*i32) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_Interval(@as(*const IFeed, @ptrCast(self)), minutes_);
            }
            pub inline fn putInterval(self: *const T, minutes_: i32) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).put_Interval(@as(*const IFeed, @ptrCast(self)), minutes_);
            }
            pub inline fn getLastDownloadTime(self: *const T, last_download_: ?*f64) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_LastDownloadTime(@as(*const IFeed, @ptrCast(self)), last_download_);
            }
            pub inline fn getLocalEnclosurePath(self: *const T, path_: ?*?BSTR) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_LocalEnclosurePath(@as(*const IFeed, @ptrCast(self)), path_);
            }
            pub inline fn getItems(self: *const T, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_Items(@as(*const IFeed, @ptrCast(self)), disp_);
            }
            pub inline fn getItem(self: *const T, item_id_: i32, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).GetItem(@as(*const IFeed, @ptrCast(self)), item_id_, disp_);
            }
            pub inline fn getTitle(self: *const T, title_: ?*?BSTR) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_Title(@as(*const IFeed, @ptrCast(self)), title_);
            }
            pub inline fn getDescription(self: *const T, description_: ?*?BSTR) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IFeed, @ptrCast(self)), description_);
            }
            pub inline fn getLink(self: *const T, home_page_: ?*?BSTR) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_Link(@as(*const IFeed, @ptrCast(self)), home_page_);
            }
            pub inline fn getImage(self: *const T, image_url_: ?*?BSTR) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_Image(@as(*const IFeed, @ptrCast(self)), image_url_);
            }
            pub inline fn getLastBuildDate(self: *const T, last_build_date_: ?*f64) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_LastBuildDate(@as(*const IFeed, @ptrCast(self)), last_build_date_);
            }
            pub inline fn getPubDate(self: *const T, last_populate_date_: ?*f64) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_PubDate(@as(*const IFeed, @ptrCast(self)), last_populate_date_);
            }
            pub inline fn getTtl(self: *const T, ttl_: ?*i32) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_Ttl(@as(*const IFeed, @ptrCast(self)), ttl_);
            }
            pub inline fn getLanguage(self: *const T, language_: ?*?BSTR) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_Language(@as(*const IFeed, @ptrCast(self)), language_);
            }
            pub inline fn getCopyright(self: *const T, copyright_: ?*?BSTR) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_Copyright(@as(*const IFeed, @ptrCast(self)), copyright_);
            }
            pub inline fn getMaxItemCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_MaxItemCount(@as(*const IFeed, @ptrCast(self)), count_);
            }
            pub inline fn putMaxItemCount(self: *const T, count_: i32) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).put_MaxItemCount(@as(*const IFeed, @ptrCast(self)), count_);
            }
            pub inline fn getDownloadEnclosuresAutomatically(self: *const T, download_enclosures_automatically_: ?*i16) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_DownloadEnclosuresAutomatically(@as(*const IFeed, @ptrCast(self)), download_enclosures_automatically_);
            }
            pub inline fn putDownloadEnclosuresAutomatically(self: *const T, download_enclosures_automatically_: i16) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).put_DownloadEnclosuresAutomatically(@as(*const IFeed, @ptrCast(self)), download_enclosures_automatically_);
            }
            pub inline fn getDownloadStatus(self: *const T, status_: ?*FEEDS_DOWNLOAD_STATUS) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_DownloadStatus(@as(*const IFeed, @ptrCast(self)), status_);
            }
            pub inline fn getLastDownloadError(self: *const T, error_: ?*FEEDS_DOWNLOAD_ERROR) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_LastDownloadError(@as(*const IFeed, @ptrCast(self)), error_);
            }
            pub inline fn merge(self: *const T, feed_xml_: ?BSTR, feed_url_: ?BSTR) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).Merge(@as(*const IFeed, @ptrCast(self)), feed_xml_, feed_url_);
            }
            pub inline fn getDownloadUrl(self: *const T, feed_url_: ?*?BSTR) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_DownloadUrl(@as(*const IFeed, @ptrCast(self)), feed_url_);
            }
            pub inline fn getIsList(self: *const T, is_list_: ?*i16) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_IsList(@as(*const IFeed, @ptrCast(self)), is_list_);
            }
            pub inline fn markAllItemsRead(self: *const T) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).MarkAllItemsRead(@as(*const IFeed, @ptrCast(self)));
            }
            pub inline fn getWatcher(self: *const T, scope_: FEEDS_EVENTS_SCOPE, mask_: FEEDS_EVENTS_MASK, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).GetWatcher(@as(*const IFeed, @ptrCast(self)), scope_, mask_, disp_);
            }
            pub inline fn getUnreadItemCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_UnreadItemCount(@as(*const IFeed, @ptrCast(self)), count_);
            }
            pub inline fn getItemCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const IFeed.VTable, @ptrCast(self.vtable)).get_ItemCount(@as(*const IFeed, @ptrCast(self)), count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IFeed2_Value = Guid.initString("33f2ea09-1398-4ab9-b6a4-f94b49d0a42e");
pub const IID_IFeed2 = &IID_IFeed2_Value;
pub const IFeed2 = extern struct {
    pub const VTable = extern struct {
        base: IFeed.VTable,
        GetItemByEffectiveId: *const fn (
            self: *const IFeed2,
            item_effective_id: i32,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastItemDownloadTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed2,
            last_item_download_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Username: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed2,
            username: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Password: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeed2,
            password: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCredentials: *const fn (
            self: *const IFeed2,
            username: ?BSTR,
            password: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearCredentials: *const fn (
            self: *const IFeed2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFeed.MethodMixin(T);
            pub inline fn getItemByEffectiveId(self: *const T, item_effective_id_: i32, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeed2.VTable, @ptrCast(self.vtable)).GetItemByEffectiveId(@as(*const IFeed2, @ptrCast(self)), item_effective_id_, disp_);
            }
            pub inline fn getLastItemDownloadTime(self: *const T, last_item_download_time_: ?*f64) HRESULT {
                return @as(*const IFeed2.VTable, @ptrCast(self.vtable)).get_LastItemDownloadTime(@as(*const IFeed2, @ptrCast(self)), last_item_download_time_);
            }
            pub inline fn getUsername(self: *const T, username_: ?*?BSTR) HRESULT {
                return @as(*const IFeed2.VTable, @ptrCast(self.vtable)).get_Username(@as(*const IFeed2, @ptrCast(self)), username_);
            }
            pub inline fn getPassword(self: *const T, password_: ?*?BSTR) HRESULT {
                return @as(*const IFeed2.VTable, @ptrCast(self.vtable)).get_Password(@as(*const IFeed2, @ptrCast(self)), password_);
            }
            pub inline fn setCredentials(self: *const T, username_: ?BSTR, password_: ?BSTR) HRESULT {
                return @as(*const IFeed2.VTable, @ptrCast(self.vtable)).SetCredentials(@as(*const IFeed2, @ptrCast(self)), username_, password_);
            }
            pub inline fn clearCredentials(self: *const T) HRESULT {
                return @as(*const IFeed2.VTable, @ptrCast(self.vtable)).ClearCredentials(@as(*const IFeed2, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IFeedEvents_Value = Guid.initString("abf35c99-0681-47ea-9a8c-1436a375a99e");
pub const IID_IFeedEvents = &IID_IFeedEvents_Value;
pub const IFeedEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Error: *const fn (
            self: *const IFeedEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedDeleted: *const fn (
            self: *const IFeedEvents,
            path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedRenamed: *const fn (
            self: *const IFeedEvents,
            path: ?BSTR,
            old_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedUrlChanged: *const fn (
            self: *const IFeedEvents,
            path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedMoved: *const fn (
            self: *const IFeedEvents,
            path: ?BSTR,
            old_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedDownloading: *const fn (
            self: *const IFeedEvents,
            path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedDownloadCompleted: *const fn (
            self: *const IFeedEvents,
            path: ?BSTR,
            @"error": FEEDS_DOWNLOAD_ERROR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FeedItemCountChanged: *const fn (
            self: *const IFeedEvents,
            path: ?BSTR,
            item_count_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn @"error"(self: *const T) HRESULT {
                return @as(*const IFeedEvents.VTable, @ptrCast(self.vtable)).Error(@as(*const IFeedEvents, @ptrCast(self)));
            }
            pub inline fn feedDeleted(self: *const T, path_: ?BSTR) HRESULT {
                return @as(*const IFeedEvents.VTable, @ptrCast(self.vtable)).FeedDeleted(@as(*const IFeedEvents, @ptrCast(self)), path_);
            }
            pub inline fn feedRenamed(self: *const T, path_: ?BSTR, old_path_: ?BSTR) HRESULT {
                return @as(*const IFeedEvents.VTable, @ptrCast(self.vtable)).FeedRenamed(@as(*const IFeedEvents, @ptrCast(self)), path_, old_path_);
            }
            pub inline fn feedUrlChanged(self: *const T, path_: ?BSTR) HRESULT {
                return @as(*const IFeedEvents.VTable, @ptrCast(self.vtable)).FeedUrlChanged(@as(*const IFeedEvents, @ptrCast(self)), path_);
            }
            pub inline fn feedMoved(self: *const T, path_: ?BSTR, old_path_: ?BSTR) HRESULT {
                return @as(*const IFeedEvents.VTable, @ptrCast(self.vtable)).FeedMoved(@as(*const IFeedEvents, @ptrCast(self)), path_, old_path_);
            }
            pub inline fn feedDownloading(self: *const T, path_: ?BSTR) HRESULT {
                return @as(*const IFeedEvents.VTable, @ptrCast(self.vtable)).FeedDownloading(@as(*const IFeedEvents, @ptrCast(self)), path_);
            }
            pub inline fn feedDownloadCompleted(self: *const T, path_: ?BSTR, error_: FEEDS_DOWNLOAD_ERROR) HRESULT {
                return @as(*const IFeedEvents.VTable, @ptrCast(self.vtable)).FeedDownloadCompleted(@as(*const IFeedEvents, @ptrCast(self)), path_, error_);
            }
            pub inline fn feedItemCountChanged(self: *const T, path_: ?BSTR, item_count_type_: i32) HRESULT {
                return @as(*const IFeedEvents.VTable, @ptrCast(self.vtable)).FeedItemCountChanged(@as(*const IFeedEvents, @ptrCast(self)), path_, item_count_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IFeedItem_Value = Guid.initString("0a1e6cad-0a47-4da2-a13d-5baaa5c8bd4f");
pub const IID_IFeedItem = &IID_IFeedItem_Value;
pub const IFeedItem = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Xml: *const fn (
            self: *const IFeedItem,
            include_flags: FEEDS_XML_INCLUDE_FLAGS,
            xml: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Title: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedItem,
            title: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Link: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedItem,
            link_url: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Guid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedItem,
            item_guid: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedItem,
            description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PubDate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedItem,
            pub_date: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Comments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedItem,
            comments: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Author: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedItem,
            author: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enclosure: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedItem,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsRead: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedItem,
            is_read: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IsRead: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedItem,
            is_read: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedItem,
            item_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedItem,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IFeedItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DownloadUrl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedItem,
            item_url: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastDownloadTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedItem,
            last_download: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Modified: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedItem,
            modified: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn xml(self: *const T, include_flags_: FEEDS_XML_INCLUDE_FLAGS, xml_: ?*?BSTR) HRESULT {
                return @as(*const IFeedItem.VTable, @ptrCast(self.vtable)).Xml(@as(*const IFeedItem, @ptrCast(self)), include_flags_, xml_);
            }
            pub inline fn getTitle(self: *const T, title_: ?*?BSTR) HRESULT {
                return @as(*const IFeedItem.VTable, @ptrCast(self.vtable)).get_Title(@as(*const IFeedItem, @ptrCast(self)), title_);
            }
            pub inline fn getLink(self: *const T, link_url_: ?*?BSTR) HRESULT {
                return @as(*const IFeedItem.VTable, @ptrCast(self.vtable)).get_Link(@as(*const IFeedItem, @ptrCast(self)), link_url_);
            }
            pub inline fn getGuid(self: *const T, item_guid_: ?*?BSTR) HRESULT {
                return @as(*const IFeedItem.VTable, @ptrCast(self.vtable)).get_Guid(@as(*const IFeedItem, @ptrCast(self)), item_guid_);
            }
            pub inline fn getDescription(self: *const T, description_: ?*?BSTR) HRESULT {
                return @as(*const IFeedItem.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IFeedItem, @ptrCast(self)), description_);
            }
            pub inline fn getPubDate(self: *const T, pub_date_: ?*f64) HRESULT {
                return @as(*const IFeedItem.VTable, @ptrCast(self.vtable)).get_PubDate(@as(*const IFeedItem, @ptrCast(self)), pub_date_);
            }
            pub inline fn getComments(self: *const T, comments_: ?*?BSTR) HRESULT {
                return @as(*const IFeedItem.VTable, @ptrCast(self.vtable)).get_Comments(@as(*const IFeedItem, @ptrCast(self)), comments_);
            }
            pub inline fn getAuthor(self: *const T, author_: ?*?BSTR) HRESULT {
                return @as(*const IFeedItem.VTable, @ptrCast(self.vtable)).get_Author(@as(*const IFeedItem, @ptrCast(self)), author_);
            }
            pub inline fn getEnclosure(self: *const T, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeedItem.VTable, @ptrCast(self.vtable)).get_Enclosure(@as(*const IFeedItem, @ptrCast(self)), disp_);
            }
            pub inline fn getIsRead(self: *const T, is_read_: ?*i16) HRESULT {
                return @as(*const IFeedItem.VTable, @ptrCast(self.vtable)).get_IsRead(@as(*const IFeedItem, @ptrCast(self)), is_read_);
            }
            pub inline fn putIsRead(self: *const T, is_read_: i16) HRESULT {
                return @as(*const IFeedItem.VTable, @ptrCast(self.vtable)).put_IsRead(@as(*const IFeedItem, @ptrCast(self)), is_read_);
            }
            pub inline fn getLocalId(self: *const T, item_id_: ?*i32) HRESULT {
                return @as(*const IFeedItem.VTable, @ptrCast(self.vtable)).get_LocalId(@as(*const IFeedItem, @ptrCast(self)), item_id_);
            }
            pub inline fn getParent(self: *const T, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeedItem.VTable, @ptrCast(self.vtable)).get_Parent(@as(*const IFeedItem, @ptrCast(self)), disp_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IFeedItem.VTable, @ptrCast(self.vtable)).Delete(@as(*const IFeedItem, @ptrCast(self)));
            }
            pub inline fn getDownloadUrl(self: *const T, item_url_: ?*?BSTR) HRESULT {
                return @as(*const IFeedItem.VTable, @ptrCast(self.vtable)).get_DownloadUrl(@as(*const IFeedItem, @ptrCast(self)), item_url_);
            }
            pub inline fn getLastDownloadTime(self: *const T, last_download_: ?*f64) HRESULT {
                return @as(*const IFeedItem.VTable, @ptrCast(self.vtable)).get_LastDownloadTime(@as(*const IFeedItem, @ptrCast(self)), last_download_);
            }
            pub inline fn getModified(self: *const T, modified_: ?*f64) HRESULT {
                return @as(*const IFeedItem.VTable, @ptrCast(self.vtable)).get_Modified(@as(*const IFeedItem, @ptrCast(self)), modified_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IFeedItem2_Value = Guid.initString("79ac9ef4-f9c1-4d2b-a50b-a7ffba4dcf37");
pub const IID_IFeedItem2 = &IID_IFeedItem2_Value;
pub const IFeedItem2 = extern struct {
    pub const VTable = extern struct {
        base: IFeedItem.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EffectiveId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedItem2,
            effective_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFeedItem.MethodMixin(T);
            pub inline fn getEffectiveId(self: *const T, effective_id_: ?*i32) HRESULT {
                return @as(*const IFeedItem2.VTable, @ptrCast(self.vtable)).get_EffectiveId(@as(*const IFeedItem2, @ptrCast(self)), effective_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IFeedEnclosure_Value = Guid.initString("361c26f7-90a4-4e67-ae09-3a36a546436a");
pub const IID_IFeedEnclosure = &IID_IFeedEnclosure_Value;
pub const IFeedEnclosure = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Url: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedEnclosure,
            enclosure_url: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedEnclosure,
            mime_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Length: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedEnclosure,
            length: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AsyncDownload: *const fn (
            self: *const IFeedEnclosure,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelAsyncDownload: *const fn (
            self: *const IFeedEnclosure,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DownloadStatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedEnclosure,
            status: ?*FEEDS_DOWNLOAD_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastDownloadError: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedEnclosure,
            @"error": ?*FEEDS_DOWNLOAD_ERROR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedEnclosure,
            local_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedEnclosure,
            disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DownloadUrl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedEnclosure,
            enclosure_url: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DownloadMimeType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFeedEnclosure,
            mime_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveFile: *const fn (
            self: *const IFeedEnclosure,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFile: *const fn (
            self: *const IFeedEnclosure,
            download_url: ?BSTR,
            download_file_path: ?BSTR,
            download_mime_type: ?BSTR,
            enclosure_filename: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getUrl(self: *const T, enclosure_url_: ?*?BSTR) HRESULT {
                return @as(*const IFeedEnclosure.VTable, @ptrCast(self.vtable)).get_Url(@as(*const IFeedEnclosure, @ptrCast(self)), enclosure_url_);
            }
            pub inline fn getType(self: *const T, mime_type_: ?*?BSTR) HRESULT {
                return @as(*const IFeedEnclosure.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IFeedEnclosure, @ptrCast(self)), mime_type_);
            }
            pub inline fn getLength(self: *const T, length_: ?*i32) HRESULT {
                return @as(*const IFeedEnclosure.VTable, @ptrCast(self.vtable)).get_Length(@as(*const IFeedEnclosure, @ptrCast(self)), length_);
            }
            pub inline fn asyncDownload(self: *const T) HRESULT {
                return @as(*const IFeedEnclosure.VTable, @ptrCast(self.vtable)).AsyncDownload(@as(*const IFeedEnclosure, @ptrCast(self)));
            }
            pub inline fn cancelAsyncDownload(self: *const T) HRESULT {
                return @as(*const IFeedEnclosure.VTable, @ptrCast(self.vtable)).CancelAsyncDownload(@as(*const IFeedEnclosure, @ptrCast(self)));
            }
            pub inline fn getDownloadStatus(self: *const T, status_: ?*FEEDS_DOWNLOAD_STATUS) HRESULT {
                return @as(*const IFeedEnclosure.VTable, @ptrCast(self.vtable)).get_DownloadStatus(@as(*const IFeedEnclosure, @ptrCast(self)), status_);
            }
            pub inline fn getLastDownloadError(self: *const T, error_: ?*FEEDS_DOWNLOAD_ERROR) HRESULT {
                return @as(*const IFeedEnclosure.VTable, @ptrCast(self.vtable)).get_LastDownloadError(@as(*const IFeedEnclosure, @ptrCast(self)), error_);
            }
            pub inline fn getLocalPath(self: *const T, local_path_: ?*?BSTR) HRESULT {
                return @as(*const IFeedEnclosure.VTable, @ptrCast(self.vtable)).get_LocalPath(@as(*const IFeedEnclosure, @ptrCast(self)), local_path_);
            }
            pub inline fn getParent(self: *const T, disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IFeedEnclosure.VTable, @ptrCast(self.vtable)).get_Parent(@as(*const IFeedEnclosure, @ptrCast(self)), disp_);
            }
            pub inline fn getDownloadUrl(self: *const T, enclosure_url_: ?*?BSTR) HRESULT {
                return @as(*const IFeedEnclosure.VTable, @ptrCast(self.vtable)).get_DownloadUrl(@as(*const IFeedEnclosure, @ptrCast(self)), enclosure_url_);
            }
            pub inline fn getDownloadMimeType(self: *const T, mime_type_: ?*?BSTR) HRESULT {
                return @as(*const IFeedEnclosure.VTable, @ptrCast(self.vtable)).get_DownloadMimeType(@as(*const IFeedEnclosure, @ptrCast(self)), mime_type_);
            }
            pub inline fn removeFile(self: *const T) HRESULT {
                return @as(*const IFeedEnclosure.VTable, @ptrCast(self.vtable)).RemoveFile(@as(*const IFeedEnclosure, @ptrCast(self)));
            }
            pub inline fn setFile(self: *const T, download_url_: ?BSTR, download_file_path_: ?BSTR, download_mime_type_: ?BSTR, enclosure_filename_: ?BSTR) HRESULT {
                return @as(*const IFeedEnclosure.VTable, @ptrCast(self.vtable)).SetFile(@as(*const IFeedEnclosure, @ptrCast(self)), download_url_, download_file_path_, download_mime_type_, enclosure_filename_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PlayerState = enum(i32) {
    stop_state = 0,
    pause_state = 1,
    play_state = 2,
};
pub const stop_state = PlayerState.stop_state;
pub const pause_state = PlayerState.pause_state;
pub const play_state = PlayerState.play_state;

pub const TimedLevel = extern struct {
    frequency: [2048]u8,
    waveform: [2048]u8,
    state: i32,
    timeStamp: i64,
};

const IID_IWMPEffects_Value = Guid.initString("d3984c13-c3cb-48e2-8be5-5168340b4f35");
pub const IID_IWMPEffects = &IID_IWMPEffects_Value;
pub const IWMPEffects = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Render: *const fn (
            self: *const IWMPEffects,
            p_levels: ?*TimedLevel,
            hdc: ?HDC,
            prc: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MediaInfo: *const fn (
            self: *const IWMPEffects,
            l_channel_count: i32,
            l_sample_rate: i32,
            bstr_title: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCapabilities: *const fn (
            self: *const IWMPEffects,
            pdw_capabilities: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTitle: *const fn (
            self: *const IWMPEffects,
            bstr_title: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPresetTitle: *const fn (
            self: *const IWMPEffects,
            n_preset: i32,
            bstr_preset_title: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPresetCount: *const fn (
            self: *const IWMPEffects,
            pn_preset_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCurrentPreset: *const fn (
            self: *const IWMPEffects,
            n_preset: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentPreset: *const fn (
            self: *const IWMPEffects,
            pn_preset: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisplayPropertyPage: *const fn (
            self: *const IWMPEffects,
            hwnd_owner: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GoFullscreen: *const fn (
            self: *const IWMPEffects,
            f_full_screen: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenderFullScreen: *const fn (
            self: *const IWMPEffects,
            p_levels: ?*TimedLevel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn render(self: *const T, p_levels_: ?*TimedLevel, hdc_: ?HDC, prc_: ?*RECT) HRESULT {
                return @as(*const IWMPEffects.VTable, @ptrCast(self.vtable)).Render(@as(*const IWMPEffects, @ptrCast(self)), p_levels_, hdc_, prc_);
            }
            pub inline fn mediaInfo(self: *const T, l_channel_count_: i32, l_sample_rate_: i32, bstr_title_: ?BSTR) HRESULT {
                return @as(*const IWMPEffects.VTable, @ptrCast(self.vtable)).MediaInfo(@as(*const IWMPEffects, @ptrCast(self)), l_channel_count_, l_sample_rate_, bstr_title_);
            }
            pub inline fn getCapabilities(self: *const T, pdw_capabilities_: ?*u32) HRESULT {
                return @as(*const IWMPEffects.VTable, @ptrCast(self.vtable)).GetCapabilities(@as(*const IWMPEffects, @ptrCast(self)), pdw_capabilities_);
            }
            pub inline fn getTitle(self: *const T, bstr_title_: ?*?BSTR) HRESULT {
                return @as(*const IWMPEffects.VTable, @ptrCast(self.vtable)).GetTitle(@as(*const IWMPEffects, @ptrCast(self)), bstr_title_);
            }
            pub inline fn getPresetTitle(self: *const T, n_preset_: i32, bstr_preset_title_: ?*?BSTR) HRESULT {
                return @as(*const IWMPEffects.VTable, @ptrCast(self.vtable)).GetPresetTitle(@as(*const IWMPEffects, @ptrCast(self)), n_preset_, bstr_preset_title_);
            }
            pub inline fn getPresetCount(self: *const T, pn_preset_count_: ?*i32) HRESULT {
                return @as(*const IWMPEffects.VTable, @ptrCast(self.vtable)).GetPresetCount(@as(*const IWMPEffects, @ptrCast(self)), pn_preset_count_);
            }
            pub inline fn setCurrentPreset(self: *const T, n_preset_: i32) HRESULT {
                return @as(*const IWMPEffects.VTable, @ptrCast(self.vtable)).SetCurrentPreset(@as(*const IWMPEffects, @ptrCast(self)), n_preset_);
            }
            pub inline fn getCurrentPreset(self: *const T, pn_preset_: ?*i32) HRESULT {
                return @as(*const IWMPEffects.VTable, @ptrCast(self.vtable)).GetCurrentPreset(@as(*const IWMPEffects, @ptrCast(self)), pn_preset_);
            }
            pub inline fn displayPropertyPage(self: *const T, hwnd_owner_: ?HWND) HRESULT {
                return @as(*const IWMPEffects.VTable, @ptrCast(self.vtable)).DisplayPropertyPage(@as(*const IWMPEffects, @ptrCast(self)), hwnd_owner_);
            }
            pub inline fn goFullscreen(self: *const T, f_full_screen_: BOOL) HRESULT {
                return @as(*const IWMPEffects.VTable, @ptrCast(self.vtable)).GoFullscreen(@as(*const IWMPEffects, @ptrCast(self)), f_full_screen_);
            }
            pub inline fn renderFullScreen(self: *const T, p_levels_: ?*TimedLevel) HRESULT {
                return @as(*const IWMPEffects.VTable, @ptrCast(self.vtable)).RenderFullScreen(@as(*const IWMPEffects, @ptrCast(self)), p_levels_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPEffects2_Value = Guid.initString("695386ec-aa3c-4618-a5e1-dd9a8b987632");
pub const IID_IWMPEffects2 = &IID_IWMPEffects2_Value;
pub const IWMPEffects2 = extern struct {
    pub const VTable = extern struct {
        base: IWMPEffects.VTable,
        SetCore: *const fn (
            self: *const IWMPEffects2,
            p_player: ?*IWMPCore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn (
            self: *const IWMPEffects2,
            hwnd_parent: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Destroy: *const fn (
            self: *const IWMPEffects2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyNewMedia: *const fn (
            self: *const IWMPEffects2,
            p_media: ?*IWMPMedia,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnWindowMessage: *const fn (
            self: *const IWMPEffects2,
            msg: u32,
            w_param: WPARAM,
            l_param: LPARAM,
            pl_result_param: ?*LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenderWindowed: *const fn (
            self: *const IWMPEffects2,
            p_data: ?*TimedLevel,
            f_required_render: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPEffects.MethodMixin(T);
            pub inline fn setCore(self: *const T, p_player_: ?*IWMPCore) HRESULT {
                return @as(*const IWMPEffects2.VTable, @ptrCast(self.vtable)).SetCore(@as(*const IWMPEffects2, @ptrCast(self)), p_player_);
            }
            pub inline fn create(self: *const T, hwnd_parent_: ?HWND) HRESULT {
                return @as(*const IWMPEffects2.VTable, @ptrCast(self.vtable)).Create(@as(*const IWMPEffects2, @ptrCast(self)), hwnd_parent_);
            }
            pub inline fn destroy(self: *const T) HRESULT {
                return @as(*const IWMPEffects2.VTable, @ptrCast(self.vtable)).Destroy(@as(*const IWMPEffects2, @ptrCast(self)));
            }
            pub inline fn notifyNewMedia(self: *const T, p_media_: ?*IWMPMedia) HRESULT {
                return @as(*const IWMPEffects2.VTable, @ptrCast(self.vtable)).NotifyNewMedia(@as(*const IWMPEffects2, @ptrCast(self)), p_media_);
            }
            pub inline fn onWindowMessage(self: *const T, msg_: u32, w_param_: WPARAM, l_param_: LPARAM, pl_result_param_: ?*LRESULT) HRESULT {
                return @as(*const IWMPEffects2.VTable, @ptrCast(self.vtable)).OnWindowMessage(@as(*const IWMPEffects2, @ptrCast(self)), msg_, w_param_, l_param_, pl_result_param_);
            }
            pub inline fn renderWindowed(self: *const T, p_data_: ?*TimedLevel, f_required_render_: BOOL) HRESULT {
                return @as(*const IWMPEffects2.VTable, @ptrCast(self.vtable)).RenderWindowed(@as(*const IWMPEffects2, @ptrCast(self)), p_data_, f_required_render_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPPluginUI_Value = Guid.initString("4c5e8f9f-ad3e-4bf9-9753-fcd30d6d38dd");
pub const IID_IWMPPluginUI = &IID_IWMPPluginUI_Value;
pub const IWMPPluginUI = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetCore: *const fn (
            self: *const IWMPPluginUI,
            p_core: ?*IWMPCore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn (
            self: *const IWMPPluginUI,
            hwnd_parent: ?HWND,
            phwnd_window: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Destroy: *const fn (
            self: *const IWMPPluginUI,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisplayPropertyPage: *const fn (
            self: *const IWMPPluginUI,
            hwnd_parent: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn (
            self: *const IWMPPluginUI,
            pwsz_name: ?[*:0]const u16,
            pvar_property: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn (
            self: *const IWMPPluginUI,
            pwsz_name: ?[*:0]const u16,
            pvar_property: ?*const VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateAccelerator: *const fn (
            self: *const IWMPPluginUI,
            lpmsg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setCore(self: *const T, p_core_: ?*IWMPCore) HRESULT {
                return @as(*const IWMPPluginUI.VTable, @ptrCast(self.vtable)).SetCore(@as(*const IWMPPluginUI, @ptrCast(self)), p_core_);
            }
            pub inline fn create(self: *const T, hwnd_parent_: ?HWND, phwnd_window_: ?*?HWND) HRESULT {
                return @as(*const IWMPPluginUI.VTable, @ptrCast(self.vtable)).Create(@as(*const IWMPPluginUI, @ptrCast(self)), hwnd_parent_, phwnd_window_);
            }
            pub inline fn destroy(self: *const T) HRESULT {
                return @as(*const IWMPPluginUI.VTable, @ptrCast(self.vtable)).Destroy(@as(*const IWMPPluginUI, @ptrCast(self)));
            }
            pub inline fn displayPropertyPage(self: *const T, hwnd_parent_: ?HWND) HRESULT {
                return @as(*const IWMPPluginUI.VTable, @ptrCast(self.vtable)).DisplayPropertyPage(@as(*const IWMPPluginUI, @ptrCast(self)), hwnd_parent_);
            }
            pub inline fn getProperty(self: *const T, pwsz_name_: ?[*:0]const u16, pvar_property_: ?*VARIANT) HRESULT {
                return @as(*const IWMPPluginUI.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IWMPPluginUI, @ptrCast(self)), pwsz_name_, pvar_property_);
            }
            pub inline fn setProperty(self: *const T, pwsz_name_: ?[*:0]const u16, pvar_property_: ?*const VARIANT) HRESULT {
                return @as(*const IWMPPluginUI.VTable, @ptrCast(self.vtable)).SetProperty(@as(*const IWMPPluginUI, @ptrCast(self)), pwsz_name_, pvar_property_);
            }
            pub inline fn translateAccelerator(self: *const T, lpmsg_: ?*MSG) HRESULT {
                return @as(*const IWMPPluginUI.VTable, @ptrCast(self.vtable)).TranslateAccelerator(@as(*const IWMPPluginUI, @ptrCast(self)), lpmsg_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WMPPartnerNotification = enum(i32) {
    BackgroundProcessingBegin = 1,
    BackgroundProcessingEnd = 2,
    CatalogDownloadFailure = 3,
    CatalogDownloadComplete = 4,
};
pub const wmpsnBackgroundProcessingBegin = WMPPartnerNotification.BackgroundProcessingBegin;
pub const wmpsnBackgroundProcessingEnd = WMPPartnerNotification.BackgroundProcessingEnd;
pub const wmpsnCatalogDownloadFailure = WMPPartnerNotification.CatalogDownloadFailure;
pub const wmpsnCatalogDownloadComplete = WMPPartnerNotification.CatalogDownloadComplete;

pub const WMPCallbackNotification = enum(i32) {
    LoginStateChange = 1,
    AuthResult = 2,
    LicenseUpdated = 3,
    NewCatalogAvailable = 4,
    NewPluginAvailable = 5,
    DisableRadioSkipping = 6,
};
pub const wmpcnLoginStateChange = WMPCallbackNotification.LoginStateChange;
pub const wmpcnAuthResult = WMPCallbackNotification.AuthResult;
pub const wmpcnLicenseUpdated = WMPCallbackNotification.LicenseUpdated;
pub const wmpcnNewCatalogAvailable = WMPCallbackNotification.NewCatalogAvailable;
pub const wmpcnNewPluginAvailable = WMPCallbackNotification.NewPluginAvailable;
pub const wmpcnDisableRadioSkipping = WMPCallbackNotification.DisableRadioSkipping;

pub const WMPTaskType = enum(i32) {
    Browse = 1,
    Sync = 2,
    Burn = 3,
    Current = 4,
};
pub const wmpttBrowse = WMPTaskType.Browse;
pub const wmpttSync = WMPTaskType.Sync;
pub const wmpttBurn = WMPTaskType.Burn;
pub const wmpttCurrent = WMPTaskType.Current;

pub const WMPContextMenuInfo = extern struct {
    dwID: u32,
    bstrMenuText: ?BSTR,
    bstrHelpText: ?BSTR,
};

const IID_IWMPContentContainer_Value = Guid.initString("ad7f4d9c-1a9f-4ed2-9815-ecc0b58cb616");
pub const IID_IWMPContentContainer = &IID_IWMPContentContainer_Value;
pub const IWMPContentContainer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetID: *const fn (
            self: *const IWMPContentContainer,
            p_content_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrice: *const fn (
            self: *const IWMPContentContainer,
            pbstr_price: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: *const fn (
            self: *const IWMPContentContainer,
            pbstr_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContentCount: *const fn (
            self: *const IWMPContentContainer,
            pc_content: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContentPrice: *const fn (
            self: *const IWMPContentContainer,
            idx_content: u32,
            pbstr_price: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContentID: *const fn (
            self: *const IWMPContentContainer,
            idx_content: u32,
            p_content_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getID(self: *const T, p_content_i_d_: ?*u32) HRESULT {
                return @as(*const IWMPContentContainer.VTable, @ptrCast(self.vtable)).GetID(@as(*const IWMPContentContainer, @ptrCast(self)), p_content_i_d_);
            }
            pub inline fn getPrice(self: *const T, pbstr_price_: ?*?BSTR) HRESULT {
                return @as(*const IWMPContentContainer.VTable, @ptrCast(self.vtable)).GetPrice(@as(*const IWMPContentContainer, @ptrCast(self)), pbstr_price_);
            }
            pub inline fn getType(self: *const T, pbstr_type_: ?*?BSTR) HRESULT {
                return @as(*const IWMPContentContainer.VTable, @ptrCast(self.vtable)).GetType(@as(*const IWMPContentContainer, @ptrCast(self)), pbstr_type_);
            }
            pub inline fn getContentCount(self: *const T, pc_content_: ?*u32) HRESULT {
                return @as(*const IWMPContentContainer.VTable, @ptrCast(self.vtable)).GetContentCount(@as(*const IWMPContentContainer, @ptrCast(self)), pc_content_);
            }
            pub inline fn getContentPrice(self: *const T, idx_content_: u32, pbstr_price_: ?*?BSTR) HRESULT {
                return @as(*const IWMPContentContainer.VTable, @ptrCast(self.vtable)).GetContentPrice(@as(*const IWMPContentContainer, @ptrCast(self)), idx_content_, pbstr_price_);
            }
            pub inline fn getContentID(self: *const T, idx_content_: u32, p_content_i_d_: ?*u32) HRESULT {
                return @as(*const IWMPContentContainer.VTable, @ptrCast(self.vtable)).GetContentID(@as(*const IWMPContentContainer, @ptrCast(self)), idx_content_, p_content_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WMPTransactionType = enum(i32) {
    NoTransaction = 0,
    Download = 1,
    Buy = 2,
};
pub const wmpttNoTransaction = WMPTransactionType.NoTransaction;
pub const wmpttDownload = WMPTransactionType.Download;
pub const wmpttBuy = WMPTransactionType.Buy;

const IID_IWMPContentContainerList_Value = Guid.initString("a9937f78-0802-4af8-8b8d-e3f045bc8ab5");
pub const IID_IWMPContentContainerList = &IID_IWMPContentContainerList_Value;
pub const IWMPContentContainerList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTransactionType: *const fn (
            self: *const IWMPContentContainerList,
            pwmptt: ?*WMPTransactionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContainerCount: *const fn (
            self: *const IWMPContentContainerList,
            pc_container: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContainer: *const fn (
            self: *const IWMPContentContainerList,
            idx_container: u32,
            pp_content: ?*?*IWMPContentContainer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getTransactionType(self: *const T, pwmptt_: ?*WMPTransactionType) HRESULT {
                return @as(*const IWMPContentContainerList.VTable, @ptrCast(self.vtable)).GetTransactionType(@as(*const IWMPContentContainerList, @ptrCast(self)), pwmptt_);
            }
            pub inline fn getContainerCount(self: *const T, pc_container_: ?*u32) HRESULT {
                return @as(*const IWMPContentContainerList.VTable, @ptrCast(self.vtable)).GetContainerCount(@as(*const IWMPContentContainerList, @ptrCast(self)), pc_container_);
            }
            pub inline fn getContainer(self: *const T, idx_container_: u32, pp_content_: ?*?*IWMPContentContainer) HRESULT {
                return @as(*const IWMPContentContainerList.VTable, @ptrCast(self.vtable)).GetContainer(@as(*const IWMPContentContainerList, @ptrCast(self)), idx_container_, pp_content_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WMPTemplateSize = enum(i32) {
    Small = 0,
    Medium = 1,
    Large = 2,
};
pub const wmptsSmall = WMPTemplateSize.Small;
pub const wmptsMedium = WMPTemplateSize.Medium;
pub const wmptsLarge = WMPTemplateSize.Large;

pub const WMPStreamingType = enum(i32) {
    Unknown = 0,
    Music = 1,
    Video = 2,
    Radio = 3,
};
pub const wmpstUnknown = WMPStreamingType.Unknown;
pub const wmpstMusic = WMPStreamingType.Music;
pub const wmpstVideo = WMPStreamingType.Video;
pub const wmpstRadio = WMPStreamingType.Radio;

pub const WMPAccountType = enum(i32) {
    BuyOnly = 1,
    Subscription = 2,
    Janus = 3,
};
pub const wmpatBuyOnly = WMPAccountType.BuyOnly;
pub const wmpatSubscription = WMPAccountType.Subscription;
pub const wmpatJanus = WMPAccountType.Janus;

const IID_IWMPContentPartnerCallback_Value = Guid.initString("9e8f7da2-0695-403c-b697-da10fafaa676");
pub const IID_IWMPContentPartnerCallback = &IID_IWMPContentPartnerCallback_Value;
pub const IWMPContentPartnerCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Notify: *const fn (
            self: *const IWMPContentPartnerCallback,
            type: WMPCallbackNotification,
            p_context: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BuyComplete: *const fn (
            self: *const IWMPContentPartnerCallback,
            hr_result: HRESULT,
            dw_buy_cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DownloadTrack: *const fn (
            self: *const IWMPContentPartnerCallback,
            cookie: u32,
            bstr_track_u_r_l: ?BSTR,
            dw_service_track_i_d: u32,
            bstr_download_params: ?BSTR,
            hr_download: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCatalogVersion: *const fn (
            self: *const IWMPContentPartnerCallback,
            pdw_version: ?*u32,
            pdw_schema_version: ?*u32,
            plcid: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateDeviceComplete: *const fn (
            self: *const IWMPContentPartnerCallback,
            bstr_device_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ChangeView: *const fn (
            self: *const IWMPContentPartnerCallback,
            bstr_type: ?BSTR,
            bstr_i_d: ?BSTR,
            bstr_filter: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddListContents: *const fn (
            self: *const IWMPContentPartnerCallback,
            dw_list_cookie: u32,
            c_items: u32,
            prg_items: [*]u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ListContentsComplete: *const fn (
            self: *const IWMPContentPartnerCallback,
            dw_list_cookie: u32,
            hr_success: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendMessageComplete: *const fn (
            self: *const IWMPContentPartnerCallback,
            bstr_msg: ?BSTR,
            bstr_param: ?BSTR,
            bstr_result: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContentIDsInLibrary: *const fn (
            self: *const IWMPContentPartnerCallback,
            pc_content_i_ds: ?*u32,
            pprg_i_ds: [*]?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshLicenseComplete: *const fn (
            self: *const IWMPContentPartnerCallback,
            dw_cookie: u32,
            content_i_d: u32,
            hr_refresh: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowPopup: *const fn (
            self: *const IWMPContentPartnerCallback,
            l_index: i32,
            bstr_parameters: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        VerifyPermissionComplete: *const fn (
            self: *const IWMPContentPartnerCallback,
            bstr_permission: ?BSTR,
            p_context: ?*VARIANT,
            hr_permission: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn notify(self: *const T, type_: WMPCallbackNotification, p_context_: ?*VARIANT) HRESULT {
                return @as(*const IWMPContentPartnerCallback.VTable, @ptrCast(self.vtable)).Notify(@as(*const IWMPContentPartnerCallback, @ptrCast(self)), type_, p_context_);
            }
            pub inline fn buyComplete(self: *const T, hr_result_: HRESULT, dw_buy_cookie_: u32) HRESULT {
                return @as(*const IWMPContentPartnerCallback.VTable, @ptrCast(self.vtable)).BuyComplete(@as(*const IWMPContentPartnerCallback, @ptrCast(self)), hr_result_, dw_buy_cookie_);
            }
            pub inline fn downloadTrack(self: *const T, cookie_: u32, bstr_track_u_r_l_: ?BSTR, dw_service_track_i_d_: u32, bstr_download_params_: ?BSTR, hr_download_: HRESULT) HRESULT {
                return @as(*const IWMPContentPartnerCallback.VTable, @ptrCast(self.vtable)).DownloadTrack(@as(*const IWMPContentPartnerCallback, @ptrCast(self)), cookie_, bstr_track_u_r_l_, dw_service_track_i_d_, bstr_download_params_, hr_download_);
            }
            pub inline fn getCatalogVersion(self: *const T, pdw_version_: ?*u32, pdw_schema_version_: ?*u32, plcid_: ?*u32) HRESULT {
                return @as(*const IWMPContentPartnerCallback.VTable, @ptrCast(self.vtable)).GetCatalogVersion(@as(*const IWMPContentPartnerCallback, @ptrCast(self)), pdw_version_, pdw_schema_version_, plcid_);
            }
            pub inline fn updateDeviceComplete(self: *const T, bstr_device_name_: ?BSTR) HRESULT {
                return @as(*const IWMPContentPartnerCallback.VTable, @ptrCast(self.vtable)).UpdateDeviceComplete(@as(*const IWMPContentPartnerCallback, @ptrCast(self)), bstr_device_name_);
            }
            pub inline fn changeView(self: *const T, bstr_type_: ?BSTR, bstr_i_d_: ?BSTR, bstr_filter_: ?BSTR) HRESULT {
                return @as(*const IWMPContentPartnerCallback.VTable, @ptrCast(self.vtable)).ChangeView(@as(*const IWMPContentPartnerCallback, @ptrCast(self)), bstr_type_, bstr_i_d_, bstr_filter_);
            }
            pub inline fn addListContents(self: *const T, dw_list_cookie_: u32, c_items_: u32, prg_items_: [*]u32) HRESULT {
                return @as(*const IWMPContentPartnerCallback.VTable, @ptrCast(self.vtable)).AddListContents(@as(*const IWMPContentPartnerCallback, @ptrCast(self)), dw_list_cookie_, c_items_, prg_items_);
            }
            pub inline fn listContentsComplete(self: *const T, dw_list_cookie_: u32, hr_success_: HRESULT) HRESULT {
                return @as(*const IWMPContentPartnerCallback.VTable, @ptrCast(self.vtable)).ListContentsComplete(@as(*const IWMPContentPartnerCallback, @ptrCast(self)), dw_list_cookie_, hr_success_);
            }
            pub inline fn sendMessageComplete(self: *const T, bstr_msg_: ?BSTR, bstr_param_: ?BSTR, bstr_result_: ?BSTR) HRESULT {
                return @as(*const IWMPContentPartnerCallback.VTable, @ptrCast(self.vtable)).SendMessageComplete(@as(*const IWMPContentPartnerCallback, @ptrCast(self)), bstr_msg_, bstr_param_, bstr_result_);
            }
            pub inline fn getContentIDsInLibrary(self: *const T, pc_content_i_ds_: ?*u32, pprg_i_ds_: [*]?*u32) HRESULT {
                return @as(*const IWMPContentPartnerCallback.VTable, @ptrCast(self.vtable)).GetContentIDsInLibrary(@as(*const IWMPContentPartnerCallback, @ptrCast(self)), pc_content_i_ds_, pprg_i_ds_);
            }
            pub inline fn refreshLicenseComplete(self: *const T, dw_cookie_: u32, content_i_d_: u32, hr_refresh_: HRESULT) HRESULT {
                return @as(*const IWMPContentPartnerCallback.VTable, @ptrCast(self.vtable)).RefreshLicenseComplete(@as(*const IWMPContentPartnerCallback, @ptrCast(self)), dw_cookie_, content_i_d_, hr_refresh_);
            }
            pub inline fn showPopup(self: *const T, l_index_: i32, bstr_parameters_: ?BSTR) HRESULT {
                return @as(*const IWMPContentPartnerCallback.VTable, @ptrCast(self.vtable)).ShowPopup(@as(*const IWMPContentPartnerCallback, @ptrCast(self)), l_index_, bstr_parameters_);
            }
            pub inline fn verifyPermissionComplete(self: *const T, bstr_permission_: ?BSTR, p_context_: ?*VARIANT, hr_permission_: HRESULT) HRESULT {
                return @as(*const IWMPContentPartnerCallback.VTable, @ptrCast(self.vtable)).VerifyPermissionComplete(@as(*const IWMPContentPartnerCallback, @ptrCast(self)), bstr_permission_, p_context_, hr_permission_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPContentPartner_Value = Guid.initString("55455073-41b5-4e75-87b8-f13bdb291d08");
pub const IID_IWMPContentPartner = &IID_IWMPContentPartner_Value;
pub const IWMPContentPartner = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetCallback: *const fn (
            self: *const IWMPContentPartner,
            p_callback: ?*IWMPContentPartnerCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Notify: *const fn (
            self: *const IWMPContentPartner,
            type: WMPPartnerNotification,
            p_context: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemInfo: *const fn (
            self: *const IWMPContentPartner,
            bstr_info_name: ?BSTR,
            p_context: ?*VARIANT,
            p_data: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContentPartnerInfo: *const fn (
            self: *const IWMPContentPartner,
            bstr_info_name: ?BSTR,
            p_data: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCommands: *const fn (
            self: *const IWMPContentPartner,
            location: ?BSTR,
            p_location_context: ?*VARIANT,
            item_location: ?BSTR,
            c_item_i_ds: u32,
            prg_item_i_ds: [*]u32,
            pc_item_i_ds: ?*u32,
            pprg_items: [*]?*WMPContextMenuInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeCommand: *const fn (
            self: *const IWMPContentPartner,
            dw_command_i_d: u32,
            location: ?BSTR,
            p_location_context: ?*VARIANT,
            item_location: ?BSTR,
            c_item_i_ds: u32,
            rg_item_i_ds: [*]u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanBuySilent: *const fn (
            self: *const IWMPContentPartner,
            p_info: ?*IWMPContentContainerList,
            pbstr_total_price: ?*?BSTR,
            p_silent_o_k: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Buy: *const fn (
            self: *const IWMPContentPartner,
            p_info: ?*IWMPContentContainerList,
            cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamingURL: *const fn (
            self: *const IWMPContentPartner,
            st: WMPStreamingType,
            p_stream_context: ?*VARIANT,
            pbstr_u_r_l: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Download: *const fn (
            self: *const IWMPContentPartner,
            p_info: ?*IWMPContentContainerList,
            cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DownloadTrackComplete: *const fn (
            self: *const IWMPContentPartner,
            hr_result: HRESULT,
            content_i_d: u32,
            download_track_param: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshLicense: *const fn (
            self: *const IWMPContentPartner,
            dw_cookie: u32,
            f_local: i16,
            bstr_u_r_l: ?BSTR,
            type: WMPStreamingType,
            content_i_d: u32,
            bstr_refresh_reason: ?BSTR,
            p_reason_context: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCatalogURL: *const fn (
            self: *const IWMPContentPartner,
            dw_catalog_version: u32,
            dw_catalog_schema_version: u32,
            catalog_l_c_i_d: u32,
            pdw_new_catalog_version: ?*u32,
            pbstr_catalog_u_r_l: ?*?BSTR,
            p_expiration_date: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTemplate: *const fn (
            self: *const IWMPContentPartner,
            task: WMPTaskType,
            location: ?BSTR,
            p_context: ?*VARIANT,
            click_location: ?BSTR,
            p_click_context: ?*VARIANT,
            bstr_filter: ?BSTR,
            bstr_view_params: ?BSTR,
            pbstr_template_u_r_l: ?*?BSTR,
            p_template_size: ?*WMPTemplateSize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateDevice: *const fn (
            self: *const IWMPContentPartner,
            bstr_device_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetListContents: *const fn (
            self: *const IWMPContentPartner,
            location: ?BSTR,
            p_context: ?*VARIANT,
            bstr_list_type: ?BSTR,
            bstr_params: ?BSTR,
            dw_list_cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Login: *const fn (
            self: *const IWMPContentPartner,
            user_info: BLOB,
            pwd_info: BLOB,
            f_used_cached_creds: i16,
            f_ok_to_cache: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Authenticate: *const fn (
            self: *const IWMPContentPartner,
            user_info: BLOB,
            pwd_info: BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Logout: *const fn (
            self: *const IWMPContentPartner,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendMessage: *const fn (
            self: *const IWMPContentPartner,
            bstr_msg: ?BSTR,
            bstr_param: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StationEvent: *const fn (
            self: *const IWMPContentPartner,
            bstr_station_event_type: ?BSTR,
            station_id: u32,
            playlist_index: u32,
            track_i_d: u32,
            track_data: ?BSTR,
            dw_seconds_played: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompareContainerListPrices: *const fn (
            self: *const IWMPContentPartner,
            p_list_base: ?*IWMPContentContainerList,
            p_list_compare: ?*IWMPContentContainerList,
            p_result: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        VerifyPermission: *const fn (
            self: *const IWMPContentPartner,
            bstr_permission: ?BSTR,
            p_context: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setCallback(self: *const T, p_callback_: ?*IWMPContentPartnerCallback) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).SetCallback(@as(*const IWMPContentPartner, @ptrCast(self)), p_callback_);
            }
            pub inline fn notify(self: *const T, type_: WMPPartnerNotification, p_context_: ?*VARIANT) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).Notify(@as(*const IWMPContentPartner, @ptrCast(self)), type_, p_context_);
            }
            pub inline fn getItemInfo(self: *const T, bstr_info_name_: ?BSTR, p_context_: ?*VARIANT, p_data_: ?*VARIANT) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).GetItemInfo(@as(*const IWMPContentPartner, @ptrCast(self)), bstr_info_name_, p_context_, p_data_);
            }
            pub inline fn getContentPartnerInfo(self: *const T, bstr_info_name_: ?BSTR, p_data_: ?*VARIANT) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).GetContentPartnerInfo(@as(*const IWMPContentPartner, @ptrCast(self)), bstr_info_name_, p_data_);
            }
            pub inline fn getCommands(self: *const T, location_: ?BSTR, p_location_context_: ?*VARIANT, item_location_: ?BSTR, c_item_i_ds_: u32, prg_item_i_ds_: [*]u32, pc_item_i_ds_: ?*u32, pprg_items_: [*]?*WMPContextMenuInfo) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).GetCommands(@as(*const IWMPContentPartner, @ptrCast(self)), location_, p_location_context_, item_location_, c_item_i_ds_, prg_item_i_ds_, pc_item_i_ds_, pprg_items_);
            }
            pub inline fn invokeCommand(self: *const T, dw_command_i_d_: u32, location_: ?BSTR, p_location_context_: ?*VARIANT, item_location_: ?BSTR, c_item_i_ds_: u32, rg_item_i_ds_: [*]u32) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).InvokeCommand(@as(*const IWMPContentPartner, @ptrCast(self)), dw_command_i_d_, location_, p_location_context_, item_location_, c_item_i_ds_, rg_item_i_ds_);
            }
            pub inline fn canBuySilent(self: *const T, p_info_: ?*IWMPContentContainerList, pbstr_total_price_: ?*?BSTR, p_silent_o_k_: ?*i16) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).CanBuySilent(@as(*const IWMPContentPartner, @ptrCast(self)), p_info_, pbstr_total_price_, p_silent_o_k_);
            }
            pub inline fn buy(self: *const T, p_info_: ?*IWMPContentContainerList, cookie_: u32) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).Buy(@as(*const IWMPContentPartner, @ptrCast(self)), p_info_, cookie_);
            }
            pub inline fn getStreamingURL(self: *const T, st_: WMPStreamingType, p_stream_context_: ?*VARIANT, pbstr_u_r_l_: ?*?BSTR) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).GetStreamingURL(@as(*const IWMPContentPartner, @ptrCast(self)), st_, p_stream_context_, pbstr_u_r_l_);
            }
            pub inline fn download(self: *const T, p_info_: ?*IWMPContentContainerList, cookie_: u32) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).Download(@as(*const IWMPContentPartner, @ptrCast(self)), p_info_, cookie_);
            }
            pub inline fn downloadTrackComplete(self: *const T, hr_result_: HRESULT, content_i_d_: u32, download_track_param_: ?BSTR) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).DownloadTrackComplete(@as(*const IWMPContentPartner, @ptrCast(self)), hr_result_, content_i_d_, download_track_param_);
            }
            pub inline fn refreshLicense(self: *const T, dw_cookie_: u32, f_local_: i16, bstr_u_r_l_: ?BSTR, type_: WMPStreamingType, content_i_d_: u32, bstr_refresh_reason_: ?BSTR, p_reason_context_: ?*VARIANT) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).RefreshLicense(@as(*const IWMPContentPartner, @ptrCast(self)), dw_cookie_, f_local_, bstr_u_r_l_, type_, content_i_d_, bstr_refresh_reason_, p_reason_context_);
            }
            pub inline fn getCatalogURL(self: *const T, dw_catalog_version_: u32, dw_catalog_schema_version_: u32, catalog_l_c_i_d_: u32, pdw_new_catalog_version_: ?*u32, pbstr_catalog_u_r_l_: ?*?BSTR, p_expiration_date_: ?*VARIANT) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).GetCatalogURL(@as(*const IWMPContentPartner, @ptrCast(self)), dw_catalog_version_, dw_catalog_schema_version_, catalog_l_c_i_d_, pdw_new_catalog_version_, pbstr_catalog_u_r_l_, p_expiration_date_);
            }
            pub inline fn getTemplate(self: *const T, task_: WMPTaskType, location_: ?BSTR, p_context_: ?*VARIANT, click_location_: ?BSTR, p_click_context_: ?*VARIANT, bstr_filter_: ?BSTR, bstr_view_params_: ?BSTR, pbstr_template_u_r_l_: ?*?BSTR, p_template_size_: ?*WMPTemplateSize) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).GetTemplate(@as(*const IWMPContentPartner, @ptrCast(self)), task_, location_, p_context_, click_location_, p_click_context_, bstr_filter_, bstr_view_params_, pbstr_template_u_r_l_, p_template_size_);
            }
            pub inline fn updateDevice(self: *const T, bstr_device_name_: ?BSTR) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).UpdateDevice(@as(*const IWMPContentPartner, @ptrCast(self)), bstr_device_name_);
            }
            pub inline fn getListContents(self: *const T, location_: ?BSTR, p_context_: ?*VARIANT, bstr_list_type_: ?BSTR, bstr_params_: ?BSTR, dw_list_cookie_: u32) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).GetListContents(@as(*const IWMPContentPartner, @ptrCast(self)), location_, p_context_, bstr_list_type_, bstr_params_, dw_list_cookie_);
            }
            pub inline fn login(self: *const T, user_info_: BLOB, pwd_info_: BLOB, f_used_cached_creds_: i16, f_ok_to_cache_: i16) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).Login(@as(*const IWMPContentPartner, @ptrCast(self)), user_info_, pwd_info_, f_used_cached_creds_, f_ok_to_cache_);
            }
            pub inline fn authenticate(self: *const T, user_info_: BLOB, pwd_info_: BLOB) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).Authenticate(@as(*const IWMPContentPartner, @ptrCast(self)), user_info_, pwd_info_);
            }
            pub inline fn logout(self: *const T) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).Logout(@as(*const IWMPContentPartner, @ptrCast(self)));
            }
            pub inline fn sendMessage(self: *const T, bstr_msg_: ?BSTR, bstr_param_: ?BSTR) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).SendMessage(@as(*const IWMPContentPartner, @ptrCast(self)), bstr_msg_, bstr_param_);
            }
            pub inline fn stationEvent(self: *const T, bstr_station_event_type_: ?BSTR, station_id_: u32, playlist_index_: u32, track_i_d_: u32, track_data_: ?BSTR, dw_seconds_played_: u32) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).StationEvent(@as(*const IWMPContentPartner, @ptrCast(self)), bstr_station_event_type_, station_id_, playlist_index_, track_i_d_, track_data_, dw_seconds_played_);
            }
            pub inline fn compareContainerListPrices(self: *const T, p_list_base_: ?*IWMPContentContainerList, p_list_compare_: ?*IWMPContentContainerList, p_result_: ?*i32) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).CompareContainerListPrices(@as(*const IWMPContentPartner, @ptrCast(self)), p_list_base_, p_list_compare_, p_result_);
            }
            pub inline fn verifyPermission(self: *const T, bstr_permission_: ?BSTR, p_context_: ?*VARIANT) HRESULT {
                return @as(*const IWMPContentPartner.VTable, @ptrCast(self.vtable)).VerifyPermission(@as(*const IWMPContentPartner, @ptrCast(self)), bstr_permission_, p_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WMPSubscriptionServiceEvent = enum(i32) {
    CurrentBegin = 1,
    CurrentEnd = 2,
    FullBegin = 3,
    FullEnd = 4,
};
pub const wmpsseCurrentBegin = WMPSubscriptionServiceEvent.CurrentBegin;
pub const wmpsseCurrentEnd = WMPSubscriptionServiceEvent.CurrentEnd;
pub const wmpsseFullBegin = WMPSubscriptionServiceEvent.FullBegin;
pub const wmpsseFullEnd = WMPSubscriptionServiceEvent.FullEnd;

const IID_IWMPSubscriptionService_Value = Guid.initString("376055f8-2a59-4a73-9501-dca5273a7a10");
pub const IID_IWMPSubscriptionService = &IID_IWMPSubscriptionService_Value;
pub const IWMPSubscriptionService = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        allowPlay: *const fn (
            self: *const IWMPSubscriptionService,
            hwnd: ?HWND,
            p_media: ?*IWMPMedia,
            pf_allow_play: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        allowCDBurn: *const fn (
            self: *const IWMPSubscriptionService,
            hwnd: ?HWND,
            p_playlist: ?*IWMPPlaylist,
            pf_allow_burn: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        allowPDATransfer: *const fn (
            self: *const IWMPSubscriptionService,
            hwnd: ?HWND,
            p_playlist: ?*IWMPPlaylist,
            pf_allow_transfer: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startBackgroundProcessing: *const fn (
            self: *const IWMPSubscriptionService,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn allowPlay(self: *const T, hwnd_: ?HWND, p_media_: ?*IWMPMedia, pf_allow_play_: ?*BOOL) HRESULT {
                return @as(*const IWMPSubscriptionService.VTable, @ptrCast(self.vtable)).allowPlay(@as(*const IWMPSubscriptionService, @ptrCast(self)), hwnd_, p_media_, pf_allow_play_);
            }
            pub inline fn allowCDBurn(self: *const T, hwnd_: ?HWND, p_playlist_: ?*IWMPPlaylist, pf_allow_burn_: ?*BOOL) HRESULT {
                return @as(*const IWMPSubscriptionService.VTable, @ptrCast(self.vtable)).allowCDBurn(@as(*const IWMPSubscriptionService, @ptrCast(self)), hwnd_, p_playlist_, pf_allow_burn_);
            }
            pub inline fn allowPDATransfer(self: *const T, hwnd_: ?HWND, p_playlist_: ?*IWMPPlaylist, pf_allow_transfer_: ?*BOOL) HRESULT {
                return @as(*const IWMPSubscriptionService.VTable, @ptrCast(self.vtable)).allowPDATransfer(@as(*const IWMPSubscriptionService, @ptrCast(self)), hwnd_, p_playlist_, pf_allow_transfer_);
            }
            pub inline fn startBackgroundProcessing(self: *const T, hwnd_: ?HWND) HRESULT {
                return @as(*const IWMPSubscriptionService.VTable, @ptrCast(self.vtable)).startBackgroundProcessing(@as(*const IWMPSubscriptionService, @ptrCast(self)), hwnd_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPSubscriptionServiceCallback_Value = Guid.initString("dd01d127-2dc2-4c3a-876e-63312079f9b0");
pub const IID_IWMPSubscriptionServiceCallback = &IID_IWMPSubscriptionServiceCallback_Value;
pub const IWMPSubscriptionServiceCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        onComplete: *const fn (
            self: *const IWMPSubscriptionServiceCallback,
            hr_result: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onComplete(self: *const T, hr_result_: HRESULT) HRESULT {
                return @as(*const IWMPSubscriptionServiceCallback.VTable, @ptrCast(self.vtable)).onComplete(@as(*const IWMPSubscriptionServiceCallback, @ptrCast(self)), hr_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPSubscriptionService2_Value = Guid.initString("a94c120e-d600-4ec6-b05e-ec9d56d84de0");
pub const IID_IWMPSubscriptionService2 = &IID_IWMPSubscriptionService2_Value;
pub const IWMPSubscriptionService2 = extern struct {
    pub const VTable = extern struct {
        base: IWMPSubscriptionService.VTable,
        stopBackgroundProcessing: *const fn (
            self: *const IWMPSubscriptionService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        serviceEvent: *const fn (
            self: *const IWMPSubscriptionService2,
            event: WMPSubscriptionServiceEvent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        deviceAvailable: *const fn (
            self: *const IWMPSubscriptionService2,
            bstr_device_name: ?BSTR,
            p_c_b: ?*IWMPSubscriptionServiceCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        prepareForSync: *const fn (
            self: *const IWMPSubscriptionService2,
            bstr_filename: ?BSTR,
            bstr_device_name: ?BSTR,
            p_c_b: ?*IWMPSubscriptionServiceCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPSubscriptionService.MethodMixin(T);
            pub inline fn stopBackgroundProcessing(self: *const T) HRESULT {
                return @as(*const IWMPSubscriptionService2.VTable, @ptrCast(self.vtable)).stopBackgroundProcessing(@as(*const IWMPSubscriptionService2, @ptrCast(self)));
            }
            pub inline fn serviceEvent(self: *const T, event_: WMPSubscriptionServiceEvent) HRESULT {
                return @as(*const IWMPSubscriptionService2.VTable, @ptrCast(self.vtable)).serviceEvent(@as(*const IWMPSubscriptionService2, @ptrCast(self)), event_);
            }
            pub inline fn deviceAvailable(self: *const T, bstr_device_name_: ?BSTR, p_c_b_: ?*IWMPSubscriptionServiceCallback) HRESULT {
                return @as(*const IWMPSubscriptionService2.VTable, @ptrCast(self.vtable)).deviceAvailable(@as(*const IWMPSubscriptionService2, @ptrCast(self)), bstr_device_name_, p_c_b_);
            }
            pub inline fn prepareForSync(self: *const T, bstr_filename_: ?BSTR, bstr_device_name_: ?BSTR, p_c_b_: ?*IWMPSubscriptionServiceCallback) HRESULT {
                return @as(*const IWMPSubscriptionService2.VTable, @ptrCast(self.vtable)).prepareForSync(@as(*const IWMPSubscriptionService2, @ptrCast(self)), bstr_filename_, bstr_device_name_, p_c_b_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WMPSubscriptionDownloadState = enum(i32) {
    Downloading = 0,
    Paused = 1,
    Processing = 2,
    Completed = 3,
    Cancelled = 4,
};
pub const wmpsdlsDownloading = WMPSubscriptionDownloadState.Downloading;
pub const wmpsdlsPaused = WMPSubscriptionDownloadState.Paused;
pub const wmpsdlsProcessing = WMPSubscriptionDownloadState.Processing;
pub const wmpsdlsCompleted = WMPSubscriptionDownloadState.Completed;
pub const wmpsdlsCancelled = WMPSubscriptionDownloadState.Cancelled;

const IID_IWMPDownloadItem_Value = Guid.initString("c9470e8e-3f6b-46a9-a0a9-452815c34297");
pub const IID_IWMPDownloadItem = &IID_IWMPDownloadItem_Value;
pub const IWMPDownloadItem = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_sourceURL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPDownloadItem,
            pbstr_u_r_l: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_size: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPDownloadItem,
            pl_size: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPDownloadItem,
            pbstr_type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_progress: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPDownloadItem,
            pl_progress: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_downloadState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPDownloadItem,
            pwmpsdls: ?*WMPSubscriptionDownloadState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        pause: *const fn (
            self: *const IWMPDownloadItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        @"resume": *const fn (
            self: *const IWMPDownloadItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        cancel: *const fn (
            self: *const IWMPDownloadItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSourceURL(self: *const T, pbstr_u_r_l_: ?*?BSTR) HRESULT {
                return @as(*const IWMPDownloadItem.VTable, @ptrCast(self.vtable)).get_sourceURL(@as(*const IWMPDownloadItem, @ptrCast(self)), pbstr_u_r_l_);
            }
            pub inline fn getSize(self: *const T, pl_size_: ?*i32) HRESULT {
                return @as(*const IWMPDownloadItem.VTable, @ptrCast(self.vtable)).get_size(@as(*const IWMPDownloadItem, @ptrCast(self)), pl_size_);
            }
            pub inline fn getType(self: *const T, pbstr_type_: ?*?BSTR) HRESULT {
                return @as(*const IWMPDownloadItem.VTable, @ptrCast(self.vtable)).get_type(@as(*const IWMPDownloadItem, @ptrCast(self)), pbstr_type_);
            }
            pub inline fn getProgress(self: *const T, pl_progress_: ?*i32) HRESULT {
                return @as(*const IWMPDownloadItem.VTable, @ptrCast(self.vtable)).get_progress(@as(*const IWMPDownloadItem, @ptrCast(self)), pl_progress_);
            }
            pub inline fn getDownloadState(self: *const T, pwmpsdls_: ?*WMPSubscriptionDownloadState) HRESULT {
                return @as(*const IWMPDownloadItem.VTable, @ptrCast(self.vtable)).get_downloadState(@as(*const IWMPDownloadItem, @ptrCast(self)), pwmpsdls_);
            }
            pub inline fn pause(self: *const T) HRESULT {
                return @as(*const IWMPDownloadItem.VTable, @ptrCast(self.vtable)).pause(@as(*const IWMPDownloadItem, @ptrCast(self)));
            }
            pub inline fn @"resume"(self: *const T) HRESULT {
                return @as(*const IWMPDownloadItem.VTable, @ptrCast(self.vtable)).@"resume"(@as(*const IWMPDownloadItem, @ptrCast(self)));
            }
            pub inline fn cancel(self: *const T) HRESULT {
                return @as(*const IWMPDownloadItem.VTable, @ptrCast(self.vtable)).cancel(@as(*const IWMPDownloadItem, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPDownloadItem2_Value = Guid.initString("9fbb3336-6da3-479d-b8ff-67d46e20a987");
pub const IID_IWMPDownloadItem2 = &IID_IWMPDownloadItem2_Value;
pub const IWMPDownloadItem2 = extern struct {
    pub const VTable = extern struct {
        base: IWMPDownloadItem.VTable,
        getItemInfo: *const fn (
            self: *const IWMPDownloadItem2,
            bstr_item_name: ?BSTR,
            pbstr_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPDownloadItem.MethodMixin(T);
            pub inline fn getItemInfo(self: *const T, bstr_item_name_: ?BSTR, pbstr_val_: ?*?BSTR) HRESULT {
                return @as(*const IWMPDownloadItem2.VTable, @ptrCast(self.vtable)).getItemInfo(@as(*const IWMPDownloadItem2, @ptrCast(self)), bstr_item_name_, pbstr_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPDownloadCollection_Value = Guid.initString("0a319c7f-85f9-436c-b88e-82fd88000e1c");
pub const IID_IWMPDownloadCollection = &IID_IWMPDownloadCollection_Value;
pub const IWMPDownloadCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPDownloadCollection,
            pl_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWMPDownloadCollection,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        item: *const fn (
            self: *const IWMPDownloadCollection,
            l_item: i32,
            pp_download: ?*?*IWMPDownloadItem2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        startDownload: *const fn (
            self: *const IWMPDownloadCollection,
            bstr_source_u_r_l: ?BSTR,
            bstr_type: ?BSTR,
            pp_download: ?*?*IWMPDownloadItem2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        removeItem: *const fn (
            self: *const IWMPDownloadCollection,
            l_item: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IWMPDownloadCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getId(self: *const T, pl_id_: ?*i32) HRESULT {
                return @as(*const IWMPDownloadCollection.VTable, @ptrCast(self.vtable)).get_id(@as(*const IWMPDownloadCollection, @ptrCast(self)), pl_id_);
            }
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IWMPDownloadCollection.VTable, @ptrCast(self.vtable)).get_count(@as(*const IWMPDownloadCollection, @ptrCast(self)), pl_count_);
            }
            pub inline fn item(self: *const T, l_item_: i32, pp_download_: ?*?*IWMPDownloadItem2) HRESULT {
                return @as(*const IWMPDownloadCollection.VTable, @ptrCast(self.vtable)).item(@as(*const IWMPDownloadCollection, @ptrCast(self)), l_item_, pp_download_);
            }
            pub inline fn startDownload(self: *const T, bstr_source_u_r_l_: ?BSTR, bstr_type_: ?BSTR, pp_download_: ?*?*IWMPDownloadItem2) HRESULT {
                return @as(*const IWMPDownloadCollection.VTable, @ptrCast(self.vtable)).startDownload(@as(*const IWMPDownloadCollection, @ptrCast(self)), bstr_source_u_r_l_, bstr_type_, pp_download_);
            }
            pub inline fn removeItem(self: *const T, l_item_: i32) HRESULT {
                return @as(*const IWMPDownloadCollection.VTable, @ptrCast(self.vtable)).removeItem(@as(*const IWMPDownloadCollection, @ptrCast(self)), l_item_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IWMPDownloadCollection.VTable, @ptrCast(self.vtable)).Clear(@as(*const IWMPDownloadCollection, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPDownloadManager_Value = Guid.initString("e15e9ad1-8f20-4cc4-9ec7-1a328ca86a0d");
pub const IID_IWMPDownloadManager = &IID_IWMPDownloadManager_Value;
pub const IWMPDownloadManager = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        getDownloadCollection: *const fn (
            self: *const IWMPDownloadManager,
            l_collection_id: i32,
            pp_collection: ?*?*IWMPDownloadCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        createDownloadCollection: *const fn (
            self: *const IWMPDownloadManager,
            pp_collection: ?*?*IWMPDownloadCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDownloadCollection(self: *const T, l_collection_id_: i32, pp_collection_: ?*?*IWMPDownloadCollection) HRESULT {
                return @as(*const IWMPDownloadManager.VTable, @ptrCast(self.vtable)).getDownloadCollection(@as(*const IWMPDownloadManager, @ptrCast(self)), l_collection_id_, pp_collection_);
            }
            pub inline fn createDownloadCollection(self: *const T, pp_collection_: ?*?*IWMPDownloadCollection) HRESULT {
                return @as(*const IWMPDownloadManager.VTable, @ptrCast(self.vtable)).createDownloadCollection(@as(*const IWMPDownloadManager, @ptrCast(self)), pp_collection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WMP_WMDM_METADATA_ROUND_TRIP_PC2DEVICE = extern struct {
    dwChangesSinceTransactionID: u32 align(1),
    dwResultSetStartingIndex: u32 align(1),
};

pub const WMP_WMDM_METADATA_ROUND_TRIP_DEVICE2PC = extern struct {
    dwCurrentTransactionID: u32 align(1),
    dwReturnedObjectCount: u32 align(1),
    dwUnretrievedObjectCount: u32 align(1),
    dwDeletedObjectStartingOffset: u32 align(1),
    dwFlags: u32 align(1),
    wsObjectPathnameList: [1]u16 align(1),
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (21)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BLOB = @import("../system/com.zig").BLOB;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const HDC = @import("../graphics/gdi.zig").HDC;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IDispatch = @import("../system/com.zig").IDispatch;
const IEnumVARIANT = @import("../system/ole.zig").IEnumVARIANT;
const IMFActivate = @import("../media/media_foundation.zig").IMFActivate;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const LPARAM = @import("../foundation.zig").LPARAM;
const LRESULT = @import("../foundation.zig").LRESULT;
const MSG = @import("../ui/windows_and_messaging.zig").MSG;
const PWSTR = @import("../foundation.zig").PWSTR;
const RECT = @import("../foundation.zig").RECT;
const SIZE = @import("../foundation.zig").SIZE;
const SYSTEMTIME = @import("../foundation.zig").SYSTEMTIME;
const VARIANT = @import("../system/com.zig").VARIANT;
const WPARAM = @import("../foundation.zig").WPARAM;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
