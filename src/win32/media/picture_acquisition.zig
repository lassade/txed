//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (38)
//--------------------------------------------------------------------------------
pub const PKEY_PhotoAcquire_RelativePathname = PROPERTYKEY{ .fmtid = Guid.initString("00f23377-7ac6-4b7a-8443-345e731fa57a"), .pid = 2 };
pub const PKEY_PhotoAcquire_FinalFilename = PROPERTYKEY{ .fmtid = Guid.initString("00f23377-7ac6-4b7a-8443-345e731fa57a"), .pid = 3 };
pub const PKEY_PhotoAcquire_GroupTag = PROPERTYKEY{ .fmtid = Guid.initString("00f23377-7ac6-4b7a-8443-345e731fa57a"), .pid = 4 };
pub const PKEY_PhotoAcquire_TransferResult = PROPERTYKEY{ .fmtid = Guid.initString("00f23377-7ac6-4b7a-8443-345e731fa57a"), .pid = 5 };
pub const PKEY_PhotoAcquire_OriginalFilename = PROPERTYKEY{ .fmtid = Guid.initString("00f23377-7ac6-4b7a-8443-345e731fa57a"), .pid = 6 };
pub const PKEY_PhotoAcquire_CameraSequenceNumber = PROPERTYKEY{ .fmtid = Guid.initString("00f23377-7ac6-4b7a-8443-345e731fa57a"), .pid = 7 };
pub const PKEY_PhotoAcquire_IntermediateFile = PROPERTYKEY{ .fmtid = Guid.initString("00f23377-7ac6-4b7a-8443-345e731fa57a"), .pid = 8 };
pub const PKEY_PhotoAcquire_SkipImport = PROPERTYKEY{ .fmtid = Guid.initString("00f23377-7ac6-4b7a-8443-345e731fa57a"), .pid = 9 };
pub const PKEY_PhotoAcquire_DuplicateDetectionID = PROPERTYKEY{ .fmtid = Guid.initString("00f23377-7ac6-4b7a-8443-345e731fa57a"), .pid = 10 };
pub const PROGRESS_INDETERMINATE = @as(i32, -1);
pub const PHOTOACQ_ERROR_RESTART_REQUIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147180543));
pub const PHOTOACQ_RUN_DEFAULT = @as(u32, 0);
pub const PHOTOACQ_NO_GALLERY_LAUNCH = @as(u32, 1);
pub const PHOTOACQ_DISABLE_AUTO_ROTATE = @as(u32, 2);
pub const PHOTOACQ_DISABLE_PLUGINS = @as(u32, 4);
pub const PHOTOACQ_DISABLE_GROUP_TAG_PROMPT = @as(u32, 8);
pub const PHOTOACQ_DISABLE_DB_INTEGRATION = @as(u32, 16);
pub const PHOTOACQ_DELETE_AFTER_ACQUIRE = @as(u32, 32);
pub const PHOTOACQ_DISABLE_DUPLICATE_DETECTION = @as(u32, 64);
pub const PHOTOACQ_ENABLE_THUMBNAIL_CACHING = @as(u32, 128);
pub const PHOTOACQ_DISABLE_METADATA_WRITE = @as(u32, 256);
pub const PHOTOACQ_DISABLE_THUMBNAIL_PROGRESS = @as(u32, 512);
pub const PHOTOACQ_DISABLE_SETTINGS_LINK = @as(u32, 1024);
pub const PHOTOACQ_ABORT_ON_SETTINGS_UPDATE = @as(u32, 2048);
pub const PHOTOACQ_IMPORT_VIDEO_AS_MULTIPLE_FILES = @as(u32, 4096);
pub const DSF_WPD_DEVICES = @as(u32, 1);
pub const DSF_WIA_CAMERAS = @as(u32, 2);
pub const DSF_WIA_SCANNERS = @as(u32, 4);
pub const DSF_STI_DEVICES = @as(u32, 8);
pub const DSF_TWAIN_DEVICES = @as(u32, 16);
pub const DSF_FS_DEVICES = @as(u32, 32);
pub const DSF_DV_DEVICES = @as(u32, 64);
pub const DSF_ALL_DEVICES = @as(u32, 65535);
pub const DSF_CPL_MODE = @as(u32, 65536);
pub const DSF_SHOW_OFFLINE = @as(u32, 131072);
pub const PAPS_PRESAVE = @as(u32, 0);
pub const PAPS_POSTSAVE = @as(u32, 1);
pub const PAPS_CLEANUP = @as(u32, 2);

//--------------------------------------------------------------------------------
// Section: Types (23)
//--------------------------------------------------------------------------------
const CLSID_PhotoAcquire_Value = Guid.initString("00f26e02-e9f2-4a9f-9fdd-5a962fb26a98");
pub const CLSID_PhotoAcquire = &CLSID_PhotoAcquire_Value;

const CLSID_PhotoAcquireAutoPlayDropTarget_Value = Guid.initString("00f20eb5-8fd6-4d9d-b75e-36801766c8f1");
pub const CLSID_PhotoAcquireAutoPlayDropTarget = &CLSID_PhotoAcquireAutoPlayDropTarget_Value;

const CLSID_PhotoAcquireAutoPlayHWEventHandler_Value = Guid.initString("00f2b433-44e4-4d88-b2b0-2698a0a91dba");
pub const CLSID_PhotoAcquireAutoPlayHWEventHandler = &CLSID_PhotoAcquireAutoPlayHWEventHandler_Value;

const CLSID_PhotoAcquireOptionsDialog_Value = Guid.initString("00f210a1-62f0-438b-9f7e-9618d72a1831");
pub const CLSID_PhotoAcquireOptionsDialog = &CLSID_PhotoAcquireOptionsDialog_Value;

const CLSID_PhotoProgressDialog_Value = Guid.initString("00f24ca0-748f-4e8a-894f-0e0357c6799f");
pub const CLSID_PhotoProgressDialog = &CLSID_PhotoProgressDialog_Value;

const CLSID_PhotoAcquireDeviceSelectionDialog_Value = Guid.initString("00f29a34-b8a1-482c-bcf8-3ac7b0fe8f62");
pub const CLSID_PhotoAcquireDeviceSelectionDialog = &CLSID_PhotoAcquireDeviceSelectionDialog_Value;

const IID_IPhotoAcquireItem_Value = Guid.initString("00f21c97-28bf-4c02-b842-5e4e90139a30");
pub const IID_IPhotoAcquireItem = &IID_IPhotoAcquireItem_Value;
pub const IPhotoAcquireItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetItemName: *const fn (
            self: *const IPhotoAcquireItem,
            pbstr_item_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetThumbnail: *const fn (
            self: *const IPhotoAcquireItem,
            size_thumbnail: SIZE,
            phbmp_thumbnail: ?*?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn (
            self: *const IPhotoAcquireItem,
            key: ?*const PROPERTYKEY,
            pv: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn (
            self: *const IPhotoAcquireItem,
            key: ?*const PROPERTYKEY,
            pv: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStream: *const fn (
            self: *const IPhotoAcquireItem,
            pp_stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanDelete: *const fn (
            self: *const IPhotoAcquireItem,
            pf_can_delete: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IPhotoAcquireItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubItemCount: *const fn (
            self: *const IPhotoAcquireItem,
            pn_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubItemAt: *const fn (
            self: *const IPhotoAcquireItem,
            n_item_index: u32,
            pp_photo_acquire_item: ?*?*IPhotoAcquireItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getItemName(self: *const T, pbstr_item_name_: ?*?BSTR) HRESULT {
                return @as(*const IPhotoAcquireItem.VTable, @ptrCast(self.vtable)).GetItemName(@as(*const IPhotoAcquireItem, @ptrCast(self)), pbstr_item_name_);
            }
            pub inline fn getThumbnail(self: *const T, size_thumbnail_: SIZE, phbmp_thumbnail_: ?*?HBITMAP) HRESULT {
                return @as(*const IPhotoAcquireItem.VTable, @ptrCast(self.vtable)).GetThumbnail(@as(*const IPhotoAcquireItem, @ptrCast(self)), size_thumbnail_, phbmp_thumbnail_);
            }
            pub inline fn getProperty(self: *const T, key_: ?*const PROPERTYKEY, pv_: ?*PROPVARIANT) HRESULT {
                return @as(*const IPhotoAcquireItem.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IPhotoAcquireItem, @ptrCast(self)), key_, pv_);
            }
            pub inline fn setProperty(self: *const T, key_: ?*const PROPERTYKEY, pv_: ?*const PROPVARIANT) HRESULT {
                return @as(*const IPhotoAcquireItem.VTable, @ptrCast(self.vtable)).SetProperty(@as(*const IPhotoAcquireItem, @ptrCast(self)), key_, pv_);
            }
            pub inline fn getStream(self: *const T, pp_stream_: ?*?*IStream) HRESULT {
                return @as(*const IPhotoAcquireItem.VTable, @ptrCast(self.vtable)).GetStream(@as(*const IPhotoAcquireItem, @ptrCast(self)), pp_stream_);
            }
            pub inline fn canDelete(self: *const T, pf_can_delete_: ?*BOOL) HRESULT {
                return @as(*const IPhotoAcquireItem.VTable, @ptrCast(self.vtable)).CanDelete(@as(*const IPhotoAcquireItem, @ptrCast(self)), pf_can_delete_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const IPhotoAcquireItem.VTable, @ptrCast(self.vtable)).Delete(@as(*const IPhotoAcquireItem, @ptrCast(self)));
            }
            pub inline fn getSubItemCount(self: *const T, pn_count_: ?*u32) HRESULT {
                return @as(*const IPhotoAcquireItem.VTable, @ptrCast(self.vtable)).GetSubItemCount(@as(*const IPhotoAcquireItem, @ptrCast(self)), pn_count_);
            }
            pub inline fn getSubItemAt(self: *const T, n_item_index_: u32, pp_photo_acquire_item_: ?*?*IPhotoAcquireItem) HRESULT {
                return @as(*const IPhotoAcquireItem.VTable, @ptrCast(self.vtable)).GetSubItemAt(@as(*const IPhotoAcquireItem, @ptrCast(self)), n_item_index_, pp_photo_acquire_item_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const USER_INPUT_STRING_TYPE = enum(i32) {
    DEFAULT = 0,
    PATH_ELEMENT = 1,
};
pub const USER_INPUT_DEFAULT = USER_INPUT_STRING_TYPE.DEFAULT;
pub const USER_INPUT_PATH_ELEMENT = USER_INPUT_STRING_TYPE.PATH_ELEMENT;

const IID_IUserInputString_Value = Guid.initString("00f243a1-205b-45ba-ae26-abbc53aa7a6f");
pub const IID_IUserInputString = &IID_IUserInputString_Value;
pub const IUserInputString = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSubmitButtonText: *const fn (
            self: *const IUserInputString,
            pbstr_submit_button_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrompt: *const fn (
            self: *const IUserInputString,
            pbstr_prompt_title: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringId: *const fn (
            self: *const IUserInputString,
            pbstr_string_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringType: *const fn (
            self: *const IUserInputString,
            pn_string_type: ?*USER_INPUT_STRING_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTooltipText: *const fn (
            self: *const IUserInputString,
            pbstr_tooltip_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxLength: *const fn (
            self: *const IUserInputString,
            pcch_max_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefault: *const fn (
            self: *const IUserInputString,
            pbstr_default: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMruCount: *const fn (
            self: *const IUserInputString,
            pn_mru_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMruEntryAt: *const fn (
            self: *const IUserInputString,
            n_index: u32,
            pbstr_mru_entry: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImage: *const fn (
            self: *const IUserInputString,
            n_size: u32,
            ph_bitmap: ?*?HBITMAP,
            ph_icon: ?*?HICON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSubmitButtonText(self: *const T, pbstr_submit_button_text_: ?*?BSTR) HRESULT {
                return @as(*const IUserInputString.VTable, @ptrCast(self.vtable)).GetSubmitButtonText(@as(*const IUserInputString, @ptrCast(self)), pbstr_submit_button_text_);
            }
            pub inline fn getPrompt(self: *const T, pbstr_prompt_title_: ?*?BSTR) HRESULT {
                return @as(*const IUserInputString.VTable, @ptrCast(self.vtable)).GetPrompt(@as(*const IUserInputString, @ptrCast(self)), pbstr_prompt_title_);
            }
            pub inline fn getStringId(self: *const T, pbstr_string_id_: ?*?BSTR) HRESULT {
                return @as(*const IUserInputString.VTable, @ptrCast(self.vtable)).GetStringId(@as(*const IUserInputString, @ptrCast(self)), pbstr_string_id_);
            }
            pub inline fn getStringType(self: *const T, pn_string_type_: ?*USER_INPUT_STRING_TYPE) HRESULT {
                return @as(*const IUserInputString.VTable, @ptrCast(self.vtable)).GetStringType(@as(*const IUserInputString, @ptrCast(self)), pn_string_type_);
            }
            pub inline fn getTooltipText(self: *const T, pbstr_tooltip_text_: ?*?BSTR) HRESULT {
                return @as(*const IUserInputString.VTable, @ptrCast(self.vtable)).GetTooltipText(@as(*const IUserInputString, @ptrCast(self)), pbstr_tooltip_text_);
            }
            pub inline fn getMaxLength(self: *const T, pcch_max_length_: ?*u32) HRESULT {
                return @as(*const IUserInputString.VTable, @ptrCast(self.vtable)).GetMaxLength(@as(*const IUserInputString, @ptrCast(self)), pcch_max_length_);
            }
            pub inline fn getDefault(self: *const T, pbstr_default_: ?*?BSTR) HRESULT {
                return @as(*const IUserInputString.VTable, @ptrCast(self.vtable)).GetDefault(@as(*const IUserInputString, @ptrCast(self)), pbstr_default_);
            }
            pub inline fn getMruCount(self: *const T, pn_mru_count_: ?*u32) HRESULT {
                return @as(*const IUserInputString.VTable, @ptrCast(self.vtable)).GetMruCount(@as(*const IUserInputString, @ptrCast(self)), pn_mru_count_);
            }
            pub inline fn getMruEntryAt(self: *const T, n_index_: u32, pbstr_mru_entry_: ?*?BSTR) HRESULT {
                return @as(*const IUserInputString.VTable, @ptrCast(self.vtable)).GetMruEntryAt(@as(*const IUserInputString, @ptrCast(self)), n_index_, pbstr_mru_entry_);
            }
            pub inline fn getImage(self: *const T, n_size_: u32, ph_bitmap_: ?*?HBITMAP, ph_icon_: ?*?HICON) HRESULT {
                return @as(*const IUserInputString.VTable, @ptrCast(self.vtable)).GetImage(@as(*const IUserInputString, @ptrCast(self)), n_size_, ph_bitmap_, ph_icon_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const ERROR_ADVISE_MESSAGE_TYPE = enum(i32) {
    SKIPRETRYCANCEL = 0,
    RETRYCANCEL = 1,
    YESNO = 2,
    OK = 3,
};
pub const PHOTOACQUIRE_ERROR_SKIPRETRYCANCEL = ERROR_ADVISE_MESSAGE_TYPE.SKIPRETRYCANCEL;
pub const PHOTOACQUIRE_ERROR_RETRYCANCEL = ERROR_ADVISE_MESSAGE_TYPE.RETRYCANCEL;
pub const PHOTOACQUIRE_ERROR_YESNO = ERROR_ADVISE_MESSAGE_TYPE.YESNO;
pub const PHOTOACQUIRE_ERROR_OK = ERROR_ADVISE_MESSAGE_TYPE.OK;

pub const ERROR_ADVISE_RESULT = enum(i32) {
    YES = 0,
    NO = 1,
    OK = 2,
    SKIP = 3,
    SKIP_ALL = 4,
    RETRY = 5,
    ABORT = 6,
};
pub const PHOTOACQUIRE_RESULT_YES = ERROR_ADVISE_RESULT.YES;
pub const PHOTOACQUIRE_RESULT_NO = ERROR_ADVISE_RESULT.NO;
pub const PHOTOACQUIRE_RESULT_OK = ERROR_ADVISE_RESULT.OK;
pub const PHOTOACQUIRE_RESULT_SKIP = ERROR_ADVISE_RESULT.SKIP;
pub const PHOTOACQUIRE_RESULT_SKIP_ALL = ERROR_ADVISE_RESULT.SKIP_ALL;
pub const PHOTOACQUIRE_RESULT_RETRY = ERROR_ADVISE_RESULT.RETRY;
pub const PHOTOACQUIRE_RESULT_ABORT = ERROR_ADVISE_RESULT.ABORT;

const IID_IPhotoAcquireProgressCB_Value = Guid.initString("00f2ce1e-935e-4248-892c-130f32c45cb4");
pub const IID_IPhotoAcquireProgressCB = &IID_IPhotoAcquireProgressCB_Value;
pub const IPhotoAcquireProgressCB = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Cancelled: *const fn (
            self: *const IPhotoAcquireProgressCB,
            pf_cancelled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartEnumeration: *const fn (
            self: *const IPhotoAcquireProgressCB,
            p_photo_acquire_source: ?*IPhotoAcquireSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FoundItem: *const fn (
            self: *const IPhotoAcquireProgressCB,
            p_photo_acquire_item: ?*IPhotoAcquireItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndEnumeration: *const fn (
            self: *const IPhotoAcquireProgressCB,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartTransfer: *const fn (
            self: *const IPhotoAcquireProgressCB,
            p_photo_acquire_source: ?*IPhotoAcquireSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartItemTransfer: *const fn (
            self: *const IPhotoAcquireProgressCB,
            n_item_index: u32,
            p_photo_acquire_item: ?*IPhotoAcquireItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DirectoryCreated: *const fn (
            self: *const IPhotoAcquireProgressCB,
            psz_directory: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateTransferPercent: *const fn (
            self: *const IPhotoAcquireProgressCB,
            f_overall: BOOL,
            n_percent: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndItemTransfer: *const fn (
            self: *const IPhotoAcquireProgressCB,
            n_item_index: u32,
            p_photo_acquire_item: ?*IPhotoAcquireItem,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndTransfer: *const fn (
            self: *const IPhotoAcquireProgressCB,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartDelete: *const fn (
            self: *const IPhotoAcquireProgressCB,
            p_photo_acquire_source: ?*IPhotoAcquireSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartItemDelete: *const fn (
            self: *const IPhotoAcquireProgressCB,
            n_item_index: u32,
            p_photo_acquire_item: ?*IPhotoAcquireItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateDeletePercent: *const fn (
            self: *const IPhotoAcquireProgressCB,
            n_percent: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndItemDelete: *const fn (
            self: *const IPhotoAcquireProgressCB,
            n_item_index: u32,
            p_photo_acquire_item: ?*IPhotoAcquireItem,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndDelete: *const fn (
            self: *const IPhotoAcquireProgressCB,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndSession: *const fn (
            self: *const IPhotoAcquireProgressCB,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeleteAfterAcquire: *const fn (
            self: *const IPhotoAcquireProgressCB,
            pf_delete_after_acquire: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ErrorAdvise: *const fn (
            self: *const IPhotoAcquireProgressCB,
            hr: HRESULT,
            psz_error_message: ?[*:0]const u16,
            n_message_type: ERROR_ADVISE_MESSAGE_TYPE,
            pn_error_advise_result: ?*ERROR_ADVISE_RESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserInput: *const fn (
            self: *const IPhotoAcquireProgressCB,
            riid_type: ?*const Guid,
            p_unknown: ?*IUnknown,
            p_prop_var_result: ?*PROPVARIANT,
            p_prop_var_default: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn cancelled(self: *const T, pf_cancelled_: ?*BOOL) HRESULT {
                return @as(*const IPhotoAcquireProgressCB.VTable, @ptrCast(self.vtable)).Cancelled(@as(*const IPhotoAcquireProgressCB, @ptrCast(self)), pf_cancelled_);
            }
            pub inline fn startEnumeration(self: *const T, p_photo_acquire_source_: ?*IPhotoAcquireSource) HRESULT {
                return @as(*const IPhotoAcquireProgressCB.VTable, @ptrCast(self.vtable)).StartEnumeration(@as(*const IPhotoAcquireProgressCB, @ptrCast(self)), p_photo_acquire_source_);
            }
            pub inline fn foundItem(self: *const T, p_photo_acquire_item_: ?*IPhotoAcquireItem) HRESULT {
                return @as(*const IPhotoAcquireProgressCB.VTable, @ptrCast(self.vtable)).FoundItem(@as(*const IPhotoAcquireProgressCB, @ptrCast(self)), p_photo_acquire_item_);
            }
            pub inline fn endEnumeration(self: *const T, hr_: HRESULT) HRESULT {
                return @as(*const IPhotoAcquireProgressCB.VTable, @ptrCast(self.vtable)).EndEnumeration(@as(*const IPhotoAcquireProgressCB, @ptrCast(self)), hr_);
            }
            pub inline fn startTransfer(self: *const T, p_photo_acquire_source_: ?*IPhotoAcquireSource) HRESULT {
                return @as(*const IPhotoAcquireProgressCB.VTable, @ptrCast(self.vtable)).StartTransfer(@as(*const IPhotoAcquireProgressCB, @ptrCast(self)), p_photo_acquire_source_);
            }
            pub inline fn startItemTransfer(self: *const T, n_item_index_: u32, p_photo_acquire_item_: ?*IPhotoAcquireItem) HRESULT {
                return @as(*const IPhotoAcquireProgressCB.VTable, @ptrCast(self.vtable)).StartItemTransfer(@as(*const IPhotoAcquireProgressCB, @ptrCast(self)), n_item_index_, p_photo_acquire_item_);
            }
            pub inline fn directoryCreated(self: *const T, psz_directory_: ?[*:0]const u16) HRESULT {
                return @as(*const IPhotoAcquireProgressCB.VTable, @ptrCast(self.vtable)).DirectoryCreated(@as(*const IPhotoAcquireProgressCB, @ptrCast(self)), psz_directory_);
            }
            pub inline fn updateTransferPercent(self: *const T, f_overall_: BOOL, n_percent_: u32) HRESULT {
                return @as(*const IPhotoAcquireProgressCB.VTable, @ptrCast(self.vtable)).UpdateTransferPercent(@as(*const IPhotoAcquireProgressCB, @ptrCast(self)), f_overall_, n_percent_);
            }
            pub inline fn endItemTransfer(self: *const T, n_item_index_: u32, p_photo_acquire_item_: ?*IPhotoAcquireItem, hr_: HRESULT) HRESULT {
                return @as(*const IPhotoAcquireProgressCB.VTable, @ptrCast(self.vtable)).EndItemTransfer(@as(*const IPhotoAcquireProgressCB, @ptrCast(self)), n_item_index_, p_photo_acquire_item_, hr_);
            }
            pub inline fn endTransfer(self: *const T, hr_: HRESULT) HRESULT {
                return @as(*const IPhotoAcquireProgressCB.VTable, @ptrCast(self.vtable)).EndTransfer(@as(*const IPhotoAcquireProgressCB, @ptrCast(self)), hr_);
            }
            pub inline fn startDelete(self: *const T, p_photo_acquire_source_: ?*IPhotoAcquireSource) HRESULT {
                return @as(*const IPhotoAcquireProgressCB.VTable, @ptrCast(self.vtable)).StartDelete(@as(*const IPhotoAcquireProgressCB, @ptrCast(self)), p_photo_acquire_source_);
            }
            pub inline fn startItemDelete(self: *const T, n_item_index_: u32, p_photo_acquire_item_: ?*IPhotoAcquireItem) HRESULT {
                return @as(*const IPhotoAcquireProgressCB.VTable, @ptrCast(self.vtable)).StartItemDelete(@as(*const IPhotoAcquireProgressCB, @ptrCast(self)), n_item_index_, p_photo_acquire_item_);
            }
            pub inline fn updateDeletePercent(self: *const T, n_percent_: u32) HRESULT {
                return @as(*const IPhotoAcquireProgressCB.VTable, @ptrCast(self.vtable)).UpdateDeletePercent(@as(*const IPhotoAcquireProgressCB, @ptrCast(self)), n_percent_);
            }
            pub inline fn endItemDelete(self: *const T, n_item_index_: u32, p_photo_acquire_item_: ?*IPhotoAcquireItem, hr_: HRESULT) HRESULT {
                return @as(*const IPhotoAcquireProgressCB.VTable, @ptrCast(self.vtable)).EndItemDelete(@as(*const IPhotoAcquireProgressCB, @ptrCast(self)), n_item_index_, p_photo_acquire_item_, hr_);
            }
            pub inline fn endDelete(self: *const T, hr_: HRESULT) HRESULT {
                return @as(*const IPhotoAcquireProgressCB.VTable, @ptrCast(self.vtable)).EndDelete(@as(*const IPhotoAcquireProgressCB, @ptrCast(self)), hr_);
            }
            pub inline fn endSession(self: *const T, hr_: HRESULT) HRESULT {
                return @as(*const IPhotoAcquireProgressCB.VTable, @ptrCast(self.vtable)).EndSession(@as(*const IPhotoAcquireProgressCB, @ptrCast(self)), hr_);
            }
            pub inline fn getDeleteAfterAcquire(self: *const T, pf_delete_after_acquire_: ?*BOOL) HRESULT {
                return @as(*const IPhotoAcquireProgressCB.VTable, @ptrCast(self.vtable)).GetDeleteAfterAcquire(@as(*const IPhotoAcquireProgressCB, @ptrCast(self)), pf_delete_after_acquire_);
            }
            pub inline fn errorAdvise(self: *const T, hr_: HRESULT, psz_error_message_: ?[*:0]const u16, n_message_type_: ERROR_ADVISE_MESSAGE_TYPE, pn_error_advise_result_: ?*ERROR_ADVISE_RESULT) HRESULT {
                return @as(*const IPhotoAcquireProgressCB.VTable, @ptrCast(self.vtable)).ErrorAdvise(@as(*const IPhotoAcquireProgressCB, @ptrCast(self)), hr_, psz_error_message_, n_message_type_, pn_error_advise_result_);
            }
            pub inline fn getUserInput(self: *const T, riid_type_: ?*const Guid, p_unknown_: ?*IUnknown, p_prop_var_result_: ?*PROPVARIANT, p_prop_var_default_: ?*const PROPVARIANT) HRESULT {
                return @as(*const IPhotoAcquireProgressCB.VTable, @ptrCast(self.vtable)).GetUserInput(@as(*const IPhotoAcquireProgressCB, @ptrCast(self)), riid_type_, p_unknown_, p_prop_var_result_, p_prop_var_default_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPhotoProgressActionCB_Value = Guid.initString("00f242d0-b206-4e7d-b4c1-4755bcbb9c9f");
pub const IID_IPhotoProgressActionCB = &IID_IPhotoProgressActionCB_Value;
pub const IPhotoProgressActionCB = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DoAction: *const fn (
            self: *const IPhotoProgressActionCB,
            h_wnd_parent: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn doAction(self: *const T, h_wnd_parent_: ?HWND) HRESULT {
                return @as(*const IPhotoProgressActionCB.VTable, @ptrCast(self.vtable)).DoAction(@as(*const IPhotoProgressActionCB, @ptrCast(self)), h_wnd_parent_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PROGRESS_DIALOG_IMAGE_TYPE = enum(i32) {
    ICON_SMALL = 0,
    ICON_LARGE = 1,
    ICON_THUMBNAIL = 2,
    BITMAP_THUMBNAIL = 3,
};
pub const PROGRESS_DIALOG_ICON_SMALL = PROGRESS_DIALOG_IMAGE_TYPE.ICON_SMALL;
pub const PROGRESS_DIALOG_ICON_LARGE = PROGRESS_DIALOG_IMAGE_TYPE.ICON_LARGE;
pub const PROGRESS_DIALOG_ICON_THUMBNAIL = PROGRESS_DIALOG_IMAGE_TYPE.ICON_THUMBNAIL;
pub const PROGRESS_DIALOG_BITMAP_THUMBNAIL = PROGRESS_DIALOG_IMAGE_TYPE.BITMAP_THUMBNAIL;

pub const PROGRESS_DIALOG_CHECKBOX_ID = enum(i32) {
    T = 0,
};
pub const PROGRESS_DIALOG_CHECKBOX_ID_DEFAULT = PROGRESS_DIALOG_CHECKBOX_ID.T;

const IID_IPhotoProgressDialog_Value = Guid.initString("00f246f9-0750-4f08-9381-2cd8e906a4ae");
pub const IID_IPhotoProgressDialog = &IID_IPhotoProgressDialog_Value;
pub const IPhotoProgressDialog = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: *const fn (
            self: *const IPhotoProgressDialog,
            hwnd_parent: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWindow: *const fn (
            self: *const IPhotoProgressDialog,
            phwnd_progress_dialog: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Destroy: *const fn (
            self: *const IPhotoProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTitle: *const fn (
            self: *const IPhotoProgressDialog,
            psz_title: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowCheckbox: *const fn (
            self: *const IPhotoProgressDialog,
            n_checkbox_id: PROGRESS_DIALOG_CHECKBOX_ID,
            f_show: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCheckboxText: *const fn (
            self: *const IPhotoProgressDialog,
            n_checkbox_id: PROGRESS_DIALOG_CHECKBOX_ID,
            psz_checkbox_text: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCheckboxCheck: *const fn (
            self: *const IPhotoProgressDialog,
            n_checkbox_id: PROGRESS_DIALOG_CHECKBOX_ID,
            f_checked: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCheckboxTooltip: *const fn (
            self: *const IPhotoProgressDialog,
            n_checkbox_id: PROGRESS_DIALOG_CHECKBOX_ID,
            psz_checkbox_tooltip_text: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsCheckboxChecked: *const fn (
            self: *const IPhotoProgressDialog,
            n_checkbox_id: PROGRESS_DIALOG_CHECKBOX_ID,
            pf_checked: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCaption: *const fn (
            self: *const IPhotoProgressDialog,
            psz_title: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetImage: *const fn (
            self: *const IPhotoProgressDialog,
            n_image_type: PROGRESS_DIALOG_IMAGE_TYPE,
            h_icon: ?HICON,
            h_bitmap: ?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPercentComplete: *const fn (
            self: *const IPhotoProgressDialog,
            n_percent: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProgressText: *const fn (
            self: *const IPhotoProgressDialog,
            psz_progress_text: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActionLinkCallback: *const fn (
            self: *const IPhotoProgressDialog,
            p_photo_progress_action_c_b: ?*IPhotoProgressActionCB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActionLinkText: *const fn (
            self: *const IPhotoProgressDialog,
            psz_caption: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowActionLink: *const fn (
            self: *const IPhotoProgressDialog,
            f_show: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsCancelled: *const fn (
            self: *const IPhotoProgressDialog,
            pf_cancelled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserInput: *const fn (
            self: *const IPhotoProgressDialog,
            riid_type: ?*const Guid,
            p_unknown: ?*IUnknown,
            p_prop_var_result: ?*PROPVARIANT,
            p_prop_var_default: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn create(self: *const T, hwnd_parent_: ?HWND) HRESULT {
                return @as(*const IPhotoProgressDialog.VTable, @ptrCast(self.vtable)).Create(@as(*const IPhotoProgressDialog, @ptrCast(self)), hwnd_parent_);
            }
            pub inline fn getWindow(self: *const T, phwnd_progress_dialog_: ?*?HWND) HRESULT {
                return @as(*const IPhotoProgressDialog.VTable, @ptrCast(self.vtable)).GetWindow(@as(*const IPhotoProgressDialog, @ptrCast(self)), phwnd_progress_dialog_);
            }
            pub inline fn destroy(self: *const T) HRESULT {
                return @as(*const IPhotoProgressDialog.VTable, @ptrCast(self.vtable)).Destroy(@as(*const IPhotoProgressDialog, @ptrCast(self)));
            }
            pub inline fn setTitle(self: *const T, psz_title_: ?[*:0]const u16) HRESULT {
                return @as(*const IPhotoProgressDialog.VTable, @ptrCast(self.vtable)).SetTitle(@as(*const IPhotoProgressDialog, @ptrCast(self)), psz_title_);
            }
            pub inline fn showCheckbox(self: *const T, n_checkbox_id_: PROGRESS_DIALOG_CHECKBOX_ID, f_show_: BOOL) HRESULT {
                return @as(*const IPhotoProgressDialog.VTable, @ptrCast(self.vtable)).ShowCheckbox(@as(*const IPhotoProgressDialog, @ptrCast(self)), n_checkbox_id_, f_show_);
            }
            pub inline fn setCheckboxText(self: *const T, n_checkbox_id_: PROGRESS_DIALOG_CHECKBOX_ID, psz_checkbox_text_: ?[*:0]const u16) HRESULT {
                return @as(*const IPhotoProgressDialog.VTable, @ptrCast(self.vtable)).SetCheckboxText(@as(*const IPhotoProgressDialog, @ptrCast(self)), n_checkbox_id_, psz_checkbox_text_);
            }
            pub inline fn setCheckboxCheck(self: *const T, n_checkbox_id_: PROGRESS_DIALOG_CHECKBOX_ID, f_checked_: BOOL) HRESULT {
                return @as(*const IPhotoProgressDialog.VTable, @ptrCast(self.vtable)).SetCheckboxCheck(@as(*const IPhotoProgressDialog, @ptrCast(self)), n_checkbox_id_, f_checked_);
            }
            pub inline fn setCheckboxTooltip(self: *const T, n_checkbox_id_: PROGRESS_DIALOG_CHECKBOX_ID, psz_checkbox_tooltip_text_: ?[*:0]const u16) HRESULT {
                return @as(*const IPhotoProgressDialog.VTable, @ptrCast(self.vtable)).SetCheckboxTooltip(@as(*const IPhotoProgressDialog, @ptrCast(self)), n_checkbox_id_, psz_checkbox_tooltip_text_);
            }
            pub inline fn isCheckboxChecked(self: *const T, n_checkbox_id_: PROGRESS_DIALOG_CHECKBOX_ID, pf_checked_: ?*BOOL) HRESULT {
                return @as(*const IPhotoProgressDialog.VTable, @ptrCast(self.vtable)).IsCheckboxChecked(@as(*const IPhotoProgressDialog, @ptrCast(self)), n_checkbox_id_, pf_checked_);
            }
            pub inline fn setCaption(self: *const T, psz_title_: ?[*:0]const u16) HRESULT {
                return @as(*const IPhotoProgressDialog.VTable, @ptrCast(self.vtable)).SetCaption(@as(*const IPhotoProgressDialog, @ptrCast(self)), psz_title_);
            }
            pub inline fn setImage(self: *const T, n_image_type_: PROGRESS_DIALOG_IMAGE_TYPE, h_icon_: ?HICON, h_bitmap_: ?HBITMAP) HRESULT {
                return @as(*const IPhotoProgressDialog.VTable, @ptrCast(self.vtable)).SetImage(@as(*const IPhotoProgressDialog, @ptrCast(self)), n_image_type_, h_icon_, h_bitmap_);
            }
            pub inline fn setPercentComplete(self: *const T, n_percent_: i32) HRESULT {
                return @as(*const IPhotoProgressDialog.VTable, @ptrCast(self.vtable)).SetPercentComplete(@as(*const IPhotoProgressDialog, @ptrCast(self)), n_percent_);
            }
            pub inline fn setProgressText(self: *const T, psz_progress_text_: ?[*:0]const u16) HRESULT {
                return @as(*const IPhotoProgressDialog.VTable, @ptrCast(self.vtable)).SetProgressText(@as(*const IPhotoProgressDialog, @ptrCast(self)), psz_progress_text_);
            }
            pub inline fn setActionLinkCallback(self: *const T, p_photo_progress_action_c_b_: ?*IPhotoProgressActionCB) HRESULT {
                return @as(*const IPhotoProgressDialog.VTable, @ptrCast(self.vtable)).SetActionLinkCallback(@as(*const IPhotoProgressDialog, @ptrCast(self)), p_photo_progress_action_c_b_);
            }
            pub inline fn setActionLinkText(self: *const T, psz_caption_: ?[*:0]const u16) HRESULT {
                return @as(*const IPhotoProgressDialog.VTable, @ptrCast(self.vtable)).SetActionLinkText(@as(*const IPhotoProgressDialog, @ptrCast(self)), psz_caption_);
            }
            pub inline fn showActionLink(self: *const T, f_show_: BOOL) HRESULT {
                return @as(*const IPhotoProgressDialog.VTable, @ptrCast(self.vtable)).ShowActionLink(@as(*const IPhotoProgressDialog, @ptrCast(self)), f_show_);
            }
            pub inline fn isCancelled(self: *const T, pf_cancelled_: ?*BOOL) HRESULT {
                return @as(*const IPhotoProgressDialog.VTable, @ptrCast(self.vtable)).IsCancelled(@as(*const IPhotoProgressDialog, @ptrCast(self)), pf_cancelled_);
            }
            pub inline fn getUserInput(self: *const T, riid_type_: ?*const Guid, p_unknown_: ?*IUnknown, p_prop_var_result_: ?*PROPVARIANT, p_prop_var_default_: ?*const PROPVARIANT) HRESULT {
                return @as(*const IPhotoProgressDialog.VTable, @ptrCast(self.vtable)).GetUserInput(@as(*const IPhotoProgressDialog, @ptrCast(self)), riid_type_, p_unknown_, p_prop_var_result_, p_prop_var_default_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPhotoAcquireSource_Value = Guid.initString("00f2c703-8613-4282-a53b-6ec59c5883ac");
pub const IID_IPhotoAcquireSource = &IID_IPhotoAcquireSource_Value;
pub const IPhotoAcquireSource = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFriendlyName: *const fn (
            self: *const IPhotoAcquireSource,
            pbstr_friendly_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceIcons: *const fn (
            self: *const IPhotoAcquireSource,
            n_size: u32,
            ph_large_icon: ?*?HICON,
            ph_small_icon: ?*?HICON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeItemList: *const fn (
            self: *const IPhotoAcquireSource,
            f_force_enumeration: BOOL,
            p_photo_acquire_progress_c_b: ?*IPhotoAcquireProgressCB,
            pn_item_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemCount: *const fn (
            self: *const IPhotoAcquireSource,
            pn_item_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemAt: *const fn (
            self: *const IPhotoAcquireSource,
            n_index: u32,
            pp_photo_acquire_item: ?*?*IPhotoAcquireItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPhotoAcquireSettings: *const fn (
            self: *const IPhotoAcquireSource,
            pp_photo_acquire_settings: ?*?*IPhotoAcquireSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceId: *const fn (
            self: *const IPhotoAcquireSource,
            pbstr_device_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindToObject: *const fn (
            self: *const IPhotoAcquireSource,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFriendlyName(self: *const T, pbstr_friendly_name_: ?*?BSTR) HRESULT {
                return @as(*const IPhotoAcquireSource.VTable, @ptrCast(self.vtable)).GetFriendlyName(@as(*const IPhotoAcquireSource, @ptrCast(self)), pbstr_friendly_name_);
            }
            pub inline fn getDeviceIcons(self: *const T, n_size_: u32, ph_large_icon_: ?*?HICON, ph_small_icon_: ?*?HICON) HRESULT {
                return @as(*const IPhotoAcquireSource.VTable, @ptrCast(self.vtable)).GetDeviceIcons(@as(*const IPhotoAcquireSource, @ptrCast(self)), n_size_, ph_large_icon_, ph_small_icon_);
            }
            pub inline fn initializeItemList(self: *const T, f_force_enumeration_: BOOL, p_photo_acquire_progress_c_b_: ?*IPhotoAcquireProgressCB, pn_item_count_: ?*u32) HRESULT {
                return @as(*const IPhotoAcquireSource.VTable, @ptrCast(self.vtable)).InitializeItemList(@as(*const IPhotoAcquireSource, @ptrCast(self)), f_force_enumeration_, p_photo_acquire_progress_c_b_, pn_item_count_);
            }
            pub inline fn getItemCount(self: *const T, pn_item_count_: ?*u32) HRESULT {
                return @as(*const IPhotoAcquireSource.VTable, @ptrCast(self.vtable)).GetItemCount(@as(*const IPhotoAcquireSource, @ptrCast(self)), pn_item_count_);
            }
            pub inline fn getItemAt(self: *const T, n_index_: u32, pp_photo_acquire_item_: ?*?*IPhotoAcquireItem) HRESULT {
                return @as(*const IPhotoAcquireSource.VTable, @ptrCast(self.vtable)).GetItemAt(@as(*const IPhotoAcquireSource, @ptrCast(self)), n_index_, pp_photo_acquire_item_);
            }
            pub inline fn getPhotoAcquireSettings(self: *const T, pp_photo_acquire_settings_: ?*?*IPhotoAcquireSettings) HRESULT {
                return @as(*const IPhotoAcquireSource.VTable, @ptrCast(self.vtable)).GetPhotoAcquireSettings(@as(*const IPhotoAcquireSource, @ptrCast(self)), pp_photo_acquire_settings_);
            }
            pub inline fn getDeviceId(self: *const T, pbstr_device_id_: ?*?BSTR) HRESULT {
                return @as(*const IPhotoAcquireSource.VTable, @ptrCast(self.vtable)).GetDeviceId(@as(*const IPhotoAcquireSource, @ptrCast(self)), pbstr_device_id_);
            }
            pub inline fn bindToObject(self: *const T, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IPhotoAcquireSource.VTable, @ptrCast(self.vtable)).BindToObject(@as(*const IPhotoAcquireSource, @ptrCast(self)), riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPhotoAcquire_Value = Guid.initString("00f23353-e31b-4955-a8ad-ca5ebf31e2ce");
pub const IID_IPhotoAcquire = &IID_IPhotoAcquire_Value;
pub const IPhotoAcquire = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreatePhotoSource: *const fn (
            self: *const IPhotoAcquire,
            psz_device: ?[*:0]const u16,
            pp_photo_acquire_source: ?*?*IPhotoAcquireSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Acquire: *const fn (
            self: *const IPhotoAcquire,
            p_photo_acquire_source: ?*IPhotoAcquireSource,
            f_show_progress: BOOL,
            h_wnd_parent: ?HWND,
            psz_application_name: ?[*:0]const u16,
            p_photo_acquire_progress_c_b: ?*IPhotoAcquireProgressCB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumResults: *const fn (
            self: *const IPhotoAcquire,
            pp_enum_file_paths: ?*?*IEnumString,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createPhotoSource(self: *const T, psz_device_: ?[*:0]const u16, pp_photo_acquire_source_: ?*?*IPhotoAcquireSource) HRESULT {
                return @as(*const IPhotoAcquire.VTable, @ptrCast(self.vtable)).CreatePhotoSource(@as(*const IPhotoAcquire, @ptrCast(self)), psz_device_, pp_photo_acquire_source_);
            }
            pub inline fn acquire(self: *const T, p_photo_acquire_source_: ?*IPhotoAcquireSource, f_show_progress_: BOOL, h_wnd_parent_: ?HWND, psz_application_name_: ?[*:0]const u16, p_photo_acquire_progress_c_b_: ?*IPhotoAcquireProgressCB) HRESULT {
                return @as(*const IPhotoAcquire.VTable, @ptrCast(self.vtable)).Acquire(@as(*const IPhotoAcquire, @ptrCast(self)), p_photo_acquire_source_, f_show_progress_, h_wnd_parent_, psz_application_name_, p_photo_acquire_progress_c_b_);
            }
            pub inline fn enumResults(self: *const T, pp_enum_file_paths_: ?*?*IEnumString) HRESULT {
                return @as(*const IPhotoAcquire.VTable, @ptrCast(self.vtable)).EnumResults(@as(*const IPhotoAcquire, @ptrCast(self)), pp_enum_file_paths_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPhotoAcquireSettings_Value = Guid.initString("00f2b868-dd67-487c-9553-049240767e91");
pub const IID_IPhotoAcquireSettings = &IID_IPhotoAcquireSettings_Value;
pub const IPhotoAcquireSettings = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitializeFromRegistry: *const fn (
            self: *const IPhotoAcquireSettings,
            psz_registry_key: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFlags: *const fn (
            self: *const IPhotoAcquireSettings,
            dw_photo_acquire_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutputFilenameTemplate: *const fn (
            self: *const IPhotoAcquireSettings,
            psz_template: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSequencePaddingWidth: *const fn (
            self: *const IPhotoAcquireSettings,
            dw_width: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSequenceZeroPadding: *const fn (
            self: *const IPhotoAcquireSettings,
            f_zero_pad: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGroupTag: *const fn (
            self: *const IPhotoAcquireSettings,
            psz_group_tag: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAcquisitionTime: *const fn (
            self: *const IPhotoAcquireSettings,
            pft_acquisition_time: ?*const FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn (
            self: *const IPhotoAcquireSettings,
            pdw_photo_acquire_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputFilenameTemplate: *const fn (
            self: *const IPhotoAcquireSettings,
            pbstr_template: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSequencePaddingWidth: *const fn (
            self: *const IPhotoAcquireSettings,
            pdw_width: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSequenceZeroPadding: *const fn (
            self: *const IPhotoAcquireSettings,
            pf_zero_pad: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroupTag: *const fn (
            self: *const IPhotoAcquireSettings,
            pbstr_group_tag: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAcquisitionTime: *const fn (
            self: *const IPhotoAcquireSettings,
            pft_acquisition_time: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initializeFromRegistry(self: *const T, psz_registry_key_: ?[*:0]const u16) HRESULT {
                return @as(*const IPhotoAcquireSettings.VTable, @ptrCast(self.vtable)).InitializeFromRegistry(@as(*const IPhotoAcquireSettings, @ptrCast(self)), psz_registry_key_);
            }
            pub inline fn setFlags(self: *const T, dw_photo_acquire_flags_: u32) HRESULT {
                return @as(*const IPhotoAcquireSettings.VTable, @ptrCast(self.vtable)).SetFlags(@as(*const IPhotoAcquireSettings, @ptrCast(self)), dw_photo_acquire_flags_);
            }
            pub inline fn setOutputFilenameTemplate(self: *const T, psz_template_: ?[*:0]const u16) HRESULT {
                return @as(*const IPhotoAcquireSettings.VTable, @ptrCast(self.vtable)).SetOutputFilenameTemplate(@as(*const IPhotoAcquireSettings, @ptrCast(self)), psz_template_);
            }
            pub inline fn setSequencePaddingWidth(self: *const T, dw_width_: u32) HRESULT {
                return @as(*const IPhotoAcquireSettings.VTable, @ptrCast(self.vtable)).SetSequencePaddingWidth(@as(*const IPhotoAcquireSettings, @ptrCast(self)), dw_width_);
            }
            pub inline fn setSequenceZeroPadding(self: *const T, f_zero_pad_: BOOL) HRESULT {
                return @as(*const IPhotoAcquireSettings.VTable, @ptrCast(self.vtable)).SetSequenceZeroPadding(@as(*const IPhotoAcquireSettings, @ptrCast(self)), f_zero_pad_);
            }
            pub inline fn setGroupTag(self: *const T, psz_group_tag_: ?[*:0]const u16) HRESULT {
                return @as(*const IPhotoAcquireSettings.VTable, @ptrCast(self.vtable)).SetGroupTag(@as(*const IPhotoAcquireSettings, @ptrCast(self)), psz_group_tag_);
            }
            pub inline fn setAcquisitionTime(self: *const T, pft_acquisition_time_: ?*const FILETIME) HRESULT {
                return @as(*const IPhotoAcquireSettings.VTable, @ptrCast(self.vtable)).SetAcquisitionTime(@as(*const IPhotoAcquireSettings, @ptrCast(self)), pft_acquisition_time_);
            }
            pub inline fn getFlags(self: *const T, pdw_photo_acquire_flags_: ?*u32) HRESULT {
                return @as(*const IPhotoAcquireSettings.VTable, @ptrCast(self.vtable)).GetFlags(@as(*const IPhotoAcquireSettings, @ptrCast(self)), pdw_photo_acquire_flags_);
            }
            pub inline fn getOutputFilenameTemplate(self: *const T, pbstr_template_: ?*?BSTR) HRESULT {
                return @as(*const IPhotoAcquireSettings.VTable, @ptrCast(self.vtable)).GetOutputFilenameTemplate(@as(*const IPhotoAcquireSettings, @ptrCast(self)), pbstr_template_);
            }
            pub inline fn getSequencePaddingWidth(self: *const T, pdw_width_: ?*u32) HRESULT {
                return @as(*const IPhotoAcquireSettings.VTable, @ptrCast(self.vtable)).GetSequencePaddingWidth(@as(*const IPhotoAcquireSettings, @ptrCast(self)), pdw_width_);
            }
            pub inline fn getSequenceZeroPadding(self: *const T, pf_zero_pad_: ?*BOOL) HRESULT {
                return @as(*const IPhotoAcquireSettings.VTable, @ptrCast(self.vtable)).GetSequenceZeroPadding(@as(*const IPhotoAcquireSettings, @ptrCast(self)), pf_zero_pad_);
            }
            pub inline fn getGroupTag(self: *const T, pbstr_group_tag_: ?*?BSTR) HRESULT {
                return @as(*const IPhotoAcquireSettings.VTable, @ptrCast(self.vtable)).GetGroupTag(@as(*const IPhotoAcquireSettings, @ptrCast(self)), pbstr_group_tag_);
            }
            pub inline fn getAcquisitionTime(self: *const T, pft_acquisition_time_: ?*FILETIME) HRESULT {
                return @as(*const IPhotoAcquireSettings.VTable, @ptrCast(self.vtable)).GetAcquisitionTime(@as(*const IPhotoAcquireSettings, @ptrCast(self)), pft_acquisition_time_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPhotoAcquireOptionsDialog_Value = Guid.initString("00f2b3ee-bf64-47ee-89f4-4dedd79643f2");
pub const IID_IPhotoAcquireOptionsDialog = &IID_IPhotoAcquireOptionsDialog_Value;
pub const IPhotoAcquireOptionsDialog = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IPhotoAcquireOptionsDialog,
            psz_registry_root: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn (
            self: *const IPhotoAcquireOptionsDialog,
            h_wnd_parent: ?HWND,
            ph_wnd_dialog: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Destroy: *const fn (
            self: *const IPhotoAcquireOptionsDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoModal: *const fn (
            self: *const IPhotoAcquireOptionsDialog,
            h_wnd_parent: ?HWND,
            ppn_return_code: ?*isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveData: *const fn (
            self: *const IPhotoAcquireOptionsDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, psz_registry_root_: ?[*:0]const u16) HRESULT {
                return @as(*const IPhotoAcquireOptionsDialog.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IPhotoAcquireOptionsDialog, @ptrCast(self)), psz_registry_root_);
            }
            pub inline fn create(self: *const T, h_wnd_parent_: ?HWND, ph_wnd_dialog_: ?*?HWND) HRESULT {
                return @as(*const IPhotoAcquireOptionsDialog.VTable, @ptrCast(self.vtable)).Create(@as(*const IPhotoAcquireOptionsDialog, @ptrCast(self)), h_wnd_parent_, ph_wnd_dialog_);
            }
            pub inline fn destroy(self: *const T) HRESULT {
                return @as(*const IPhotoAcquireOptionsDialog.VTable, @ptrCast(self.vtable)).Destroy(@as(*const IPhotoAcquireOptionsDialog, @ptrCast(self)));
            }
            pub inline fn doModal(self: *const T, h_wnd_parent_: ?HWND, ppn_return_code_: ?*isize) HRESULT {
                return @as(*const IPhotoAcquireOptionsDialog.VTable, @ptrCast(self.vtable)).DoModal(@as(*const IPhotoAcquireOptionsDialog, @ptrCast(self)), h_wnd_parent_, ppn_return_code_);
            }
            pub inline fn saveData(self: *const T) HRESULT {
                return @as(*const IPhotoAcquireOptionsDialog.VTable, @ptrCast(self.vtable)).SaveData(@as(*const IPhotoAcquireOptionsDialog, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DEVICE_SELECTION_DEVICE_TYPE = enum(i32) {
    T_UNKNOWN_DEVICE = 0,
    T_WPD_DEVICE = 1,
    T_WIA_DEVICE = 2,
    T_STI_DEVICE = 3,
    F_TWAIN_DEVICE = 4,
    T_FS_DEVICE = 5,
    T_DV_DEVICE = 6,
};
pub const DST_UNKNOWN_DEVICE = DEVICE_SELECTION_DEVICE_TYPE.T_UNKNOWN_DEVICE;
pub const DST_WPD_DEVICE = DEVICE_SELECTION_DEVICE_TYPE.T_WPD_DEVICE;
pub const DST_WIA_DEVICE = DEVICE_SELECTION_DEVICE_TYPE.T_WIA_DEVICE;
pub const DST_STI_DEVICE = DEVICE_SELECTION_DEVICE_TYPE.T_STI_DEVICE;
pub const DSF_TWAIN_DEVICE = DEVICE_SELECTION_DEVICE_TYPE.F_TWAIN_DEVICE;
pub const DST_FS_DEVICE = DEVICE_SELECTION_DEVICE_TYPE.T_FS_DEVICE;
pub const DST_DV_DEVICE = DEVICE_SELECTION_DEVICE_TYPE.T_DV_DEVICE;

const IID_IPhotoAcquireDeviceSelectionDialog_Value = Guid.initString("00f28837-55dd-4f37-aaf5-6855a9640467");
pub const IID_IPhotoAcquireDeviceSelectionDialog = &IID_IPhotoAcquireDeviceSelectionDialog_Value;
pub const IPhotoAcquireDeviceSelectionDialog = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetTitle: *const fn (
            self: *const IPhotoAcquireDeviceSelectionDialog,
            psz_title: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSubmitButtonText: *const fn (
            self: *const IPhotoAcquireDeviceSelectionDialog,
            psz_submit_button_text: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoModal: *const fn (
            self: *const IPhotoAcquireDeviceSelectionDialog,
            h_wnd_parent: ?HWND,
            dw_device_flags: u32,
            pbstr_device_id: ?*?BSTR,
            pn_device_type: ?*DEVICE_SELECTION_DEVICE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setTitle(self: *const T, psz_title_: ?[*:0]const u16) HRESULT {
                return @as(*const IPhotoAcquireDeviceSelectionDialog.VTable, @ptrCast(self.vtable)).SetTitle(@as(*const IPhotoAcquireDeviceSelectionDialog, @ptrCast(self)), psz_title_);
            }
            pub inline fn setSubmitButtonText(self: *const T, psz_submit_button_text_: ?[*:0]const u16) HRESULT {
                return @as(*const IPhotoAcquireDeviceSelectionDialog.VTable, @ptrCast(self.vtable)).SetSubmitButtonText(@as(*const IPhotoAcquireDeviceSelectionDialog, @ptrCast(self)), psz_submit_button_text_);
            }
            pub inline fn doModal(self: *const T, h_wnd_parent_: ?HWND, dw_device_flags_: u32, pbstr_device_id_: ?*?BSTR, pn_device_type_: ?*DEVICE_SELECTION_DEVICE_TYPE) HRESULT {
                return @as(*const IPhotoAcquireDeviceSelectionDialog.VTable, @ptrCast(self.vtable)).DoModal(@as(*const IPhotoAcquireDeviceSelectionDialog, @ptrCast(self)), h_wnd_parent_, dw_device_flags_, pbstr_device_id_, pn_device_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPhotoAcquirePlugin_Value = Guid.initString("00f2dceb-ecb8-4f77-8e47-e7a987c83dd0");
pub const IID_IPhotoAcquirePlugin = &IID_IPhotoAcquirePlugin_Value;
pub const IPhotoAcquirePlugin = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IPhotoAcquirePlugin,
            p_photo_acquire_source: ?*IPhotoAcquireSource,
            p_photo_acquire_progress_c_b: ?*IPhotoAcquireProgressCB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessItem: *const fn (
            self: *const IPhotoAcquirePlugin,
            dw_acquire_stage: u32,
            p_photo_acquire_item: ?*IPhotoAcquireItem,
            p_original_item_stream: ?*IStream,
            psz_final_filename: ?[*:0]const u16,
            p_property_store: ?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TransferComplete: *const fn (
            self: *const IPhotoAcquirePlugin,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisplayConfigureDialog: *const fn (
            self: *const IPhotoAcquirePlugin,
            h_wnd_parent: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_photo_acquire_source_: ?*IPhotoAcquireSource, p_photo_acquire_progress_c_b_: ?*IPhotoAcquireProgressCB) HRESULT {
                return @as(*const IPhotoAcquirePlugin.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IPhotoAcquirePlugin, @ptrCast(self)), p_photo_acquire_source_, p_photo_acquire_progress_c_b_);
            }
            pub inline fn processItem(self: *const T, dw_acquire_stage_: u32, p_photo_acquire_item_: ?*IPhotoAcquireItem, p_original_item_stream_: ?*IStream, psz_final_filename_: ?[*:0]const u16, p_property_store_: ?*IPropertyStore) HRESULT {
                return @as(*const IPhotoAcquirePlugin.VTable, @ptrCast(self.vtable)).ProcessItem(@as(*const IPhotoAcquirePlugin, @ptrCast(self)), dw_acquire_stage_, p_photo_acquire_item_, p_original_item_stream_, psz_final_filename_, p_property_store_);
            }
            pub inline fn transferComplete(self: *const T, hr_: HRESULT) HRESULT {
                return @as(*const IPhotoAcquirePlugin.VTable, @ptrCast(self.vtable)).TransferComplete(@as(*const IPhotoAcquirePlugin, @ptrCast(self)), hr_);
            }
            pub inline fn displayConfigureDialog(self: *const T, h_wnd_parent_: ?HWND) HRESULT {
                return @as(*const IPhotoAcquirePlugin.VTable, @ptrCast(self.vtable)).DisplayConfigureDialog(@as(*const IPhotoAcquirePlugin, @ptrCast(self)), h_wnd_parent_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (16)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const FILETIME = @import("../foundation.zig").FILETIME;
const HBITMAP = @import("../graphics/gdi.zig").HBITMAP;
const HICON = @import("../ui/windows_and_messaging.zig").HICON;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IEnumString = @import("../system/com.zig").IEnumString;
const IPropertyStore = @import("../ui/shell/properties_system.zig").IPropertyStore;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const PROPERTYKEY = @import("../ui/shell/properties_system.zig").PROPERTYKEY;
const PROPVARIANT = @import("../system/com/structured_storage.zig").PROPVARIANT;
const PWSTR = @import("../foundation.zig").PWSTR;
const SIZE = @import("../foundation.zig").SIZE;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
