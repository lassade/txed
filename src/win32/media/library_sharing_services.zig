//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (7)
//--------------------------------------------------------------------------------
const CLSID_WindowsMediaLibrarySharingServices_Value = Guid.initString("ad581b00-7b64-4e59-a38d-d2c5bf51ddb3");
pub const CLSID_WindowsMediaLibrarySharingServices = &CLSID_WindowsMediaLibrarySharingServices_Value;

pub const WindowsMediaLibrarySharingDeviceAuthorizationStatus = enum(i32) {
    UNKNOWN = 0,
    ALLOWED = 1,
    DENIED = 2,
};
pub const DEVICE_AUTHORIZATION_UNKNOWN = WindowsMediaLibrarySharingDeviceAuthorizationStatus.UNKNOWN;
pub const DEVICE_AUTHORIZATION_ALLOWED = WindowsMediaLibrarySharingDeviceAuthorizationStatus.ALLOWED;
pub const DEVICE_AUTHORIZATION_DENIED = WindowsMediaLibrarySharingDeviceAuthorizationStatus.DENIED;

// TODO: this type is limited to platform 'windows6.1'
const IID_IWindowsMediaLibrarySharingDeviceProperty_Value = Guid.initString("81e26927-7a7d-40a7-81d4-bddc02960e3e");
pub const IID_IWindowsMediaLibrarySharingDeviceProperty = &IID_IWindowsMediaLibrarySharingDeviceProperty_Value;
pub const IWindowsMediaLibrarySharingDeviceProperty = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingDeviceProperty,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingDeviceProperty,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingDeviceProperty.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IWindowsMediaLibrarySharingDeviceProperty, @ptrCast(self)), name_);
            }
            pub inline fn getValue(self: *const T, value_: ?*VARIANT) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingDeviceProperty.VTable, @ptrCast(self.vtable)).get_Value(@as(*const IWindowsMediaLibrarySharingDeviceProperty, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IWindowsMediaLibrarySharingDeviceProperties_Value = Guid.initString("c4623214-6b06-40c5-a623-b2ff4c076bfd");
pub const IID_IWindowsMediaLibrarySharingDeviceProperties = &IID_IWindowsMediaLibrarySharingDeviceProperties_Value;
pub const IWindowsMediaLibrarySharingDeviceProperties = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingDeviceProperties,
            index: i32,
            property: ?*?*IWindowsMediaLibrarySharingDeviceProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingDeviceProperties,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn (
            self: *const IWindowsMediaLibrarySharingDeviceProperties,
            name: ?BSTR,
            property: ?*?*IWindowsMediaLibrarySharingDeviceProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItem(self: *const T, index_: i32, property_: ?*?*IWindowsMediaLibrarySharingDeviceProperty) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingDeviceProperties.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IWindowsMediaLibrarySharingDeviceProperties, @ptrCast(self)), index_, property_);
            }
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingDeviceProperties.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IWindowsMediaLibrarySharingDeviceProperties, @ptrCast(self)), count_);
            }
            pub inline fn getProperty(self: *const T, name_: ?BSTR, property_: ?*?*IWindowsMediaLibrarySharingDeviceProperty) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingDeviceProperties.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IWindowsMediaLibrarySharingDeviceProperties, @ptrCast(self)), name_, property_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IWindowsMediaLibrarySharingDevice_Value = Guid.initString("3dccc293-4fd9-4191-a25b-8e57c5d27bd4");
pub const IID_IWindowsMediaLibrarySharingDevice = &IID_IWindowsMediaLibrarySharingDevice_Value;
pub const IWindowsMediaLibrarySharingDevice = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeviceID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingDevice,
            device_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Authorization: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingDevice,
            authorization: ?*WindowsMediaLibrarySharingDeviceAuthorizationStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Authorization: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingDevice,
            authorization: WindowsMediaLibrarySharingDeviceAuthorizationStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingDevice,
            device_properties: ?*?*IWindowsMediaLibrarySharingDeviceProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDeviceID(self: *const T, device_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingDevice.VTable, @ptrCast(self.vtable)).get_DeviceID(@as(*const IWindowsMediaLibrarySharingDevice, @ptrCast(self)), device_i_d_);
            }
            pub inline fn getAuthorization(self: *const T, authorization_: ?*WindowsMediaLibrarySharingDeviceAuthorizationStatus) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingDevice.VTable, @ptrCast(self.vtable)).get_Authorization(@as(*const IWindowsMediaLibrarySharingDevice, @ptrCast(self)), authorization_);
            }
            pub inline fn putAuthorization(self: *const T, authorization_: WindowsMediaLibrarySharingDeviceAuthorizationStatus) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingDevice.VTable, @ptrCast(self.vtable)).put_Authorization(@as(*const IWindowsMediaLibrarySharingDevice, @ptrCast(self)), authorization_);
            }
            pub inline fn getProperties(self: *const T, device_properties_: ?*?*IWindowsMediaLibrarySharingDeviceProperties) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingDevice.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const IWindowsMediaLibrarySharingDevice, @ptrCast(self)), device_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IWindowsMediaLibrarySharingDevices_Value = Guid.initString("1803f9d6-fe6d-4546-bf5b-992fe8ec12d1");
pub const IID_IWindowsMediaLibrarySharingDevices = &IID_IWindowsMediaLibrarySharingDevices_Value;
pub const IWindowsMediaLibrarySharingDevices = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingDevices,
            index: i32,
            device: ?*?*IWindowsMediaLibrarySharingDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingDevices,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDevice: *const fn (
            self: *const IWindowsMediaLibrarySharingDevices,
            device_i_d: ?BSTR,
            device: ?*?*IWindowsMediaLibrarySharingDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getItem(self: *const T, index_: i32, device_: ?*?*IWindowsMediaLibrarySharingDevice) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingDevices.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IWindowsMediaLibrarySharingDevices, @ptrCast(self)), index_, device_);
            }
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingDevices.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IWindowsMediaLibrarySharingDevices, @ptrCast(self)), count_);
            }
            pub inline fn getDevice(self: *const T, device_i_d_: ?BSTR, device_: ?*?*IWindowsMediaLibrarySharingDevice) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingDevices.VTable, @ptrCast(self.vtable)).GetDevice(@as(*const IWindowsMediaLibrarySharingDevices, @ptrCast(self)), device_i_d_, device_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IWindowsMediaLibrarySharingServices_Value = Guid.initString("01f5f85e-0a81-40da-a7c8-21ef3af8440c");
pub const IID_IWindowsMediaLibrarySharingServices = &IID_IWindowsMediaLibrarySharingServices_Value;
pub const IWindowsMediaLibrarySharingServices = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        showShareMediaCPL: *const fn (
            self: *const IWindowsMediaLibrarySharingServices,
            device: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_userHomeMediaSharingState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingServices,
            sharing_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_userHomeMediaSharingState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingServices,
            sharing_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_userHomeMediaSharingLibraryName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingServices,
            library_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_userHomeMediaSharingLibraryName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingServices,
            library_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_computerHomeMediaSharingAllowedState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingServices,
            sharing_allowed: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_computerHomeMediaSharingAllowedState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingServices,
            sharing_allowed: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_userInternetMediaSharingState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingServices,
            sharing_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_userInternetMediaSharingState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingServices,
            sharing_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_computerInternetMediaSharingAllowedState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingServices,
            sharing_allowed: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_computerInternetMediaSharingAllowedState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingServices,
            sharing_allowed: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_internetMediaSharingSecurityGroup: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingServices,
            security_group: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_internetMediaSharingSecurityGroup: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingServices,
            security_group: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_allowSharingToAllDevices: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingServices,
            sharing_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_allowSharingToAllDevices: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingServices,
            sharing_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setDefaultAuthorization: *const fn (
            self: *const IWindowsMediaLibrarySharingServices,
            m_a_c_addresses: ?BSTR,
            friendly_name: ?BSTR,
            authorization: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setAuthorizationState: *const fn (
            self: *const IWindowsMediaLibrarySharingServices,
            m_a_c_address: ?BSTR,
            authorization_state: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAllDevices: *const fn (
            self: *const IWindowsMediaLibrarySharingServices,
            devices: ?*?*IWindowsMediaLibrarySharingDevices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_customSettingsApplied: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWindowsMediaLibrarySharingServices,
            custom_settings_applied: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn showShareMediaCPL(self: *const T, device_: ?BSTR) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingServices.VTable, @ptrCast(self.vtable)).showShareMediaCPL(@as(*const IWindowsMediaLibrarySharingServices, @ptrCast(self)), device_);
            }
            pub inline fn getUserHomeMediaSharingState(self: *const T, sharing_enabled_: ?*i16) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingServices.VTable, @ptrCast(self.vtable)).get_userHomeMediaSharingState(@as(*const IWindowsMediaLibrarySharingServices, @ptrCast(self)), sharing_enabled_);
            }
            pub inline fn putUserHomeMediaSharingState(self: *const T, sharing_enabled_: i16) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingServices.VTable, @ptrCast(self.vtable)).put_userHomeMediaSharingState(@as(*const IWindowsMediaLibrarySharingServices, @ptrCast(self)), sharing_enabled_);
            }
            pub inline fn getUserHomeMediaSharingLibraryName(self: *const T, library_name_: ?*?BSTR) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingServices.VTable, @ptrCast(self.vtable)).get_userHomeMediaSharingLibraryName(@as(*const IWindowsMediaLibrarySharingServices, @ptrCast(self)), library_name_);
            }
            pub inline fn putUserHomeMediaSharingLibraryName(self: *const T, library_name_: ?BSTR) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingServices.VTable, @ptrCast(self.vtable)).put_userHomeMediaSharingLibraryName(@as(*const IWindowsMediaLibrarySharingServices, @ptrCast(self)), library_name_);
            }
            pub inline fn getComputerHomeMediaSharingAllowedState(self: *const T, sharing_allowed_: ?*i16) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingServices.VTable, @ptrCast(self.vtable)).get_computerHomeMediaSharingAllowedState(@as(*const IWindowsMediaLibrarySharingServices, @ptrCast(self)), sharing_allowed_);
            }
            pub inline fn putComputerHomeMediaSharingAllowedState(self: *const T, sharing_allowed_: i16) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingServices.VTable, @ptrCast(self.vtable)).put_computerHomeMediaSharingAllowedState(@as(*const IWindowsMediaLibrarySharingServices, @ptrCast(self)), sharing_allowed_);
            }
            pub inline fn getUserInternetMediaSharingState(self: *const T, sharing_enabled_: ?*i16) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingServices.VTable, @ptrCast(self.vtable)).get_userInternetMediaSharingState(@as(*const IWindowsMediaLibrarySharingServices, @ptrCast(self)), sharing_enabled_);
            }
            pub inline fn putUserInternetMediaSharingState(self: *const T, sharing_enabled_: i16) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingServices.VTable, @ptrCast(self.vtable)).put_userInternetMediaSharingState(@as(*const IWindowsMediaLibrarySharingServices, @ptrCast(self)), sharing_enabled_);
            }
            pub inline fn getComputerInternetMediaSharingAllowedState(self: *const T, sharing_allowed_: ?*i16) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingServices.VTable, @ptrCast(self.vtable)).get_computerInternetMediaSharingAllowedState(@as(*const IWindowsMediaLibrarySharingServices, @ptrCast(self)), sharing_allowed_);
            }
            pub inline fn putComputerInternetMediaSharingAllowedState(self: *const T, sharing_allowed_: i16) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingServices.VTable, @ptrCast(self.vtable)).put_computerInternetMediaSharingAllowedState(@as(*const IWindowsMediaLibrarySharingServices, @ptrCast(self)), sharing_allowed_);
            }
            pub inline fn getInternetMediaSharingSecurityGroup(self: *const T, security_group_: ?*?BSTR) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingServices.VTable, @ptrCast(self.vtable)).get_internetMediaSharingSecurityGroup(@as(*const IWindowsMediaLibrarySharingServices, @ptrCast(self)), security_group_);
            }
            pub inline fn putInternetMediaSharingSecurityGroup(self: *const T, security_group_: ?BSTR) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingServices.VTable, @ptrCast(self.vtable)).put_internetMediaSharingSecurityGroup(@as(*const IWindowsMediaLibrarySharingServices, @ptrCast(self)), security_group_);
            }
            pub inline fn getAllowSharingToAllDevices(self: *const T, sharing_enabled_: ?*i16) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingServices.VTable, @ptrCast(self.vtable)).get_allowSharingToAllDevices(@as(*const IWindowsMediaLibrarySharingServices, @ptrCast(self)), sharing_enabled_);
            }
            pub inline fn putAllowSharingToAllDevices(self: *const T, sharing_enabled_: i16) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingServices.VTable, @ptrCast(self.vtable)).put_allowSharingToAllDevices(@as(*const IWindowsMediaLibrarySharingServices, @ptrCast(self)), sharing_enabled_);
            }
            pub inline fn setDefaultAuthorization(self: *const T, m_a_c_addresses_: ?BSTR, friendly_name_: ?BSTR, authorization_: i16) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingServices.VTable, @ptrCast(self.vtable)).setDefaultAuthorization(@as(*const IWindowsMediaLibrarySharingServices, @ptrCast(self)), m_a_c_addresses_, friendly_name_, authorization_);
            }
            pub inline fn setAuthorizationState(self: *const T, m_a_c_address_: ?BSTR, authorization_state_: i16) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingServices.VTable, @ptrCast(self.vtable)).setAuthorizationState(@as(*const IWindowsMediaLibrarySharingServices, @ptrCast(self)), m_a_c_address_, authorization_state_);
            }
            pub inline fn getAllDevices(self: *const T, devices_: ?*?*IWindowsMediaLibrarySharingDevices) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingServices.VTable, @ptrCast(self.vtable)).getAllDevices(@as(*const IWindowsMediaLibrarySharingServices, @ptrCast(self)), devices_);
            }
            pub inline fn getCustomSettingsApplied(self: *const T, custom_settings_applied_: ?*i16) HRESULT {
                return @as(*const IWindowsMediaLibrarySharingServices.VTable, @ptrCast(self.vtable)).get_customSettingsApplied(@as(*const IWindowsMediaLibrarySharingServices, @ptrCast(self)), custom_settings_applied_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (5)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BSTR = @import("../foundation.zig").BSTR;
const HRESULT = @import("../foundation.zig").HRESULT;
const IDispatch = @import("../system/com.zig").IDispatch;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
