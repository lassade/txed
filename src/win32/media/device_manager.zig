//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (277)
//--------------------------------------------------------------------------------
pub const IOCTL_MTP_CUSTOM_COMMAND = @as(u32, 827348045);
pub const MTP_NEXTPHASE_READ_DATA = @as(u32, 1);
pub const MTP_NEXTPHASE_WRITE_DATA = @as(u32, 2);
pub const MTP_NEXTPHASE_NO_DATA = @as(u32, 3);
pub const RSA_KEY_LEN = @as(u32, 64);
pub const SAC_SESSION_KEYLEN = @as(u32, 8);
pub const SAC_PROTOCOL_WMDM = @as(u32, 1);
pub const SAC_PROTOCOL_V1 = @as(u32, 2);
pub const SAC_CERT_X509 = @as(u32, 1);
pub const SAC_CERT_V1 = @as(u32, 2);
pub const WMDM_DEVICE_PROTOCOL_MTP = Guid.initString("979e54e5-0afc-4604-8d93-dc798a4bcf45");
pub const WMDM_DEVICE_PROTOCOL_RAPI = Guid.initString("2a11ed91-8c8f-41e4-82d1-8386e003561c");
pub const WMDM_DEVICE_PROTOCOL_MSC = Guid.initString("a4d2c26c-a881-44bb-bd5d-1f703c71f7a9");
pub const WMDM_SERVICE_PROVIDER_VENDOR_MICROSOFT = Guid.initString("7de8686d-78ee-43ea-a496-c625ac91cc5d");
pub const WMDMID_LENGTH = @as(u32, 128);
pub const WMDM_MAC_LENGTH = @as(u32, 8);
pub const WMDM_S_NOT_ALL_PROPERTIES_APPLIED = @as(i32, 282625);
pub const WMDM_S_NOT_ALL_PROPERTIES_RETRIEVED = @as(i32, 282626);
pub const WMDM_E_BUSY = @as(i32, -2147201024);
pub const WMDM_E_INTERFACEDEAD = @as(i32, -2147201023);
pub const WMDM_E_INVALIDTYPE = @as(i32, -2147201022);
pub const WMDM_E_PROCESSFAILED = @as(i32, -2147201021);
pub const WMDM_E_NOTSUPPORTED = @as(i32, -2147201020);
pub const WMDM_E_NOTCERTIFIED = @as(i32, -2147201019);
pub const WMDM_E_NORIGHTS = @as(i32, -2147201018);
pub const WMDM_E_CALL_OUT_OF_SEQUENCE = @as(i32, -2147201017);
pub const WMDM_E_BUFFERTOOSMALL = @as(i32, -2147201016);
pub const WMDM_E_MOREDATA = @as(i32, -2147201015);
pub const WMDM_E_MAC_CHECK_FAILED = @as(i32, -2147201014);
pub const WMDM_E_USER_CANCELLED = @as(i32, -2147201013);
pub const WMDM_E_SDMI_TRIGGER = @as(i32, -2147201012);
pub const WMDM_E_SDMI_NOMORECOPIES = @as(i32, -2147201011);
pub const WMDM_E_REVOKED = @as(i32, -2147201010);
pub const WMDM_E_LICENSE_NOTEXIST = @as(i32, -2147201009);
pub const WMDM_E_INCORRECT_APPSEC = @as(i32, -2147201008);
pub const WMDM_E_INCORRECT_RIGHTS = @as(i32, -2147201007);
pub const WMDM_E_LICENSE_EXPIRED = @as(i32, -2147201006);
pub const WMDM_E_CANTOPEN_PMSN_SERVICE_PIPE = @as(i32, -2147201005);
pub const WMDM_E_TOO_MANY_SESSIONS = @as(i32, -2147201005);
pub const WMDM_WMDM_REVOKED = @as(u32, 1);
pub const WMDM_APP_REVOKED = @as(u32, 2);
pub const WMDM_SP_REVOKED = @as(u32, 4);
pub const WMDM_SCP_REVOKED = @as(u32, 8);
pub const WMDM_GET_FORMAT_SUPPORT_AUDIO = @as(u32, 1);
pub const WMDM_GET_FORMAT_SUPPORT_VIDEO = @as(u32, 2);
pub const WMDM_GET_FORMAT_SUPPORT_FILE = @as(u32, 4);
pub const WMDM_RIGHTS_PLAYBACKCOUNT = @as(u32, 1);
pub const WMDM_RIGHTS_EXPIRATIONDATE = @as(u32, 2);
pub const WMDM_RIGHTS_GROUPID = @as(u32, 4);
pub const WMDM_RIGHTS_FREESERIALIDS = @as(u32, 8);
pub const WMDM_RIGHTS_NAMEDSERIALIDS = @as(u32, 16);
pub const WMDM_DEVICE_TYPE_PLAYBACK = @as(u32, 1);
pub const WMDM_DEVICE_TYPE_RECORD = @as(u32, 2);
pub const WMDM_DEVICE_TYPE_DECODE = @as(u32, 4);
pub const WMDM_DEVICE_TYPE_ENCODE = @as(u32, 8);
pub const WMDM_DEVICE_TYPE_STORAGE = @as(u32, 16);
pub const WMDM_DEVICE_TYPE_VIRTUAL = @as(u32, 32);
pub const WMDM_DEVICE_TYPE_SDMI = @as(u32, 64);
pub const WMDM_DEVICE_TYPE_NONSDMI = @as(u32, 128);
pub const WMDM_DEVICE_TYPE_NONREENTRANT = @as(u32, 256);
pub const WMDM_DEVICE_TYPE_FILELISTRESYNC = @as(u32, 512);
pub const WMDM_DEVICE_TYPE_VIEW_PREF_METADATAVIEW = @as(u32, 1024);
pub const WMDM_POWER_CAP_BATTERY = @as(u32, 1);
pub const WMDM_POWER_CAP_EXTERNAL = @as(u32, 2);
pub const WMDM_POWER_IS_BATTERY = @as(u32, 4);
pub const WMDM_POWER_IS_EXTERNAL = @as(u32, 8);
pub const WMDM_POWER_PERCENT_AVAILABLE = @as(u32, 16);
pub const WMDM_STATUS_READY = @as(u32, 1);
pub const WMDM_STATUS_BUSY = @as(u32, 2);
pub const WMDM_STATUS_DEVICE_NOTPRESENT = @as(u32, 4);
pub const WMDM_STATUS_DEVICECONTROL_PLAYING = @as(u32, 8);
pub const WMDM_STATUS_DEVICECONTROL_RECORDING = @as(u32, 16);
pub const WMDM_STATUS_DEVICECONTROL_PAUSED = @as(u32, 32);
pub const WMDM_STATUS_DEVICECONTROL_REMOTE = @as(u32, 64);
pub const WMDM_STATUS_DEVICECONTROL_STREAM = @as(u32, 128);
pub const WMDM_STATUS_STORAGE_NOTPRESENT = @as(u32, 256);
pub const WMDM_STATUS_STORAGE_INITIALIZING = @as(u32, 512);
pub const WMDM_STATUS_STORAGE_BROKEN = @as(u32, 1024);
pub const WMDM_STATUS_STORAGE_NOTSUPPORTED = @as(u32, 2048);
pub const WMDM_STATUS_STORAGE_UNFORMATTED = @as(u32, 4096);
pub const WMDM_STATUS_STORAGECONTROL_INSERTING = @as(u32, 8192);
pub const WMDM_STATUS_STORAGECONTROL_DELETING = @as(u32, 16384);
pub const WMDM_STATUS_STORAGECONTROL_APPENDING = @as(u32, 32768);
pub const WMDM_STATUS_STORAGECONTROL_MOVING = @as(u32, 65536);
pub const WMDM_STATUS_STORAGECONTROL_READING = @as(u32, 131072);
pub const WMDM_DEVICECAP_CANPLAY = @as(u32, 1);
pub const WMDM_DEVICECAP_CANSTREAMPLAY = @as(u32, 2);
pub const WMDM_DEVICECAP_CANRECORD = @as(u32, 4);
pub const WMDM_DEVICECAP_CANSTREAMRECORD = @as(u32, 8);
pub const WMDM_DEVICECAP_CANPAUSE = @as(u32, 16);
pub const WMDM_DEVICECAP_CANRESUME = @as(u32, 32);
pub const WMDM_DEVICECAP_CANSTOP = @as(u32, 64);
pub const WMDM_DEVICECAP_CANSEEK = @as(u32, 128);
pub const WMDM_DEVICECAP_HASSECURECLOCK = @as(u32, 256);
pub const WMDM_SEEK_REMOTECONTROL = @as(u32, 1);
pub const WMDM_SEEK_STREAMINGAUDIO = @as(u32, 2);
pub const WMDM_STORAGE_ATTR_FILESYSTEM = @as(u32, 1);
pub const WMDM_STORAGE_ATTR_REMOVABLE = @as(u32, 2);
pub const WMDM_STORAGE_ATTR_NONREMOVABLE = @as(u32, 4);
pub const WMDM_FILE_ATTR_FOLDER = @as(u32, 8);
pub const WMDM_FILE_ATTR_LINK = @as(u32, 16);
pub const WMDM_FILE_ATTR_FILE = @as(u32, 32);
pub const WMDM_FILE_ATTR_VIDEO = @as(u32, 64);
pub const WMDM_STORAGE_ATTR_CANEDITMETADATA = @as(u32, 128);
pub const WMDM_STORAGE_ATTR_FOLDERS = @as(u32, 256);
pub const WMDM_FILE_ATTR_AUDIO = @as(u32, 4096);
pub const WMDM_FILE_ATTR_DATA = @as(u32, 8192);
pub const WMDM_FILE_ATTR_CANPLAY = @as(u32, 16384);
pub const WMDM_FILE_ATTR_CANDELETE = @as(u32, 32768);
pub const WMDM_FILE_ATTR_CANMOVE = @as(u32, 65536);
pub const WMDM_FILE_ATTR_CANRENAME = @as(u32, 131072);
pub const WMDM_FILE_ATTR_CANREAD = @as(u32, 262144);
pub const WMDM_FILE_ATTR_MUSIC = @as(u32, 524288);
pub const WMDM_FILE_CREATE_OVERWRITE = @as(u32, 1048576);
pub const WMDM_FILE_ATTR_AUDIOBOOK = @as(u32, 2097152);
pub const WMDM_FILE_ATTR_HIDDEN = @as(u32, 4194304);
pub const WMDM_FILE_ATTR_SYSTEM = @as(u32, 8388608);
pub const WMDM_FILE_ATTR_READONLY = @as(u32, 16777216);
pub const WMDM_STORAGE_ATTR_HAS_FOLDERS = @as(u32, 33554432);
pub const WMDM_STORAGE_ATTR_HAS_FILES = @as(u32, 67108864);
pub const WMDM_STORAGE_IS_DEFAULT = @as(u32, 134217728);
pub const WMDM_STORAGE_CONTAINS_DEFAULT = @as(u32, 268435456);
pub const WMDM_STORAGE_ATTR_VIRTUAL = @as(u32, 536870912);
pub const WMDM_STORAGECAP_FOLDERSINROOT = @as(u32, 1);
pub const WMDM_STORAGECAP_FILESINROOT = @as(u32, 2);
pub const WMDM_STORAGECAP_FOLDERSINFOLDERS = @as(u32, 4);
pub const WMDM_STORAGECAP_FILESINFOLDERS = @as(u32, 8);
pub const WMDM_STORAGECAP_FOLDERLIMITEXISTS = @as(u32, 16);
pub const WMDM_STORAGECAP_FILELIMITEXISTS = @as(u32, 32);
pub const WMDM_STORAGECAP_NOT_INITIALIZABLE = @as(u32, 64);
pub const WMDM_MODE_BLOCK = @as(u32, 1);
pub const WMDM_MODE_THREAD = @as(u32, 2);
pub const WMDM_CONTENT_FILE = @as(u32, 4);
pub const WMDM_CONTENT_FOLDER = @as(u32, 8);
pub const WMDM_CONTENT_OPERATIONINTERFACE = @as(u32, 16);
pub const WMDM_MODE_QUERY = @as(u32, 32);
pub const WMDM_MODE_PROGRESS = @as(u32, 64);
pub const WMDM_MODE_TRANSFER_PROTECTED = @as(u32, 128);
pub const WMDM_MODE_TRANSFER_UNPROTECTED = @as(u32, 256);
pub const WMDM_STORAGECONTROL_INSERTBEFORE = @as(u32, 512);
pub const WMDM_STORAGECONTROL_INSERTAFTER = @as(u32, 1024);
pub const WMDM_STORAGECONTROL_INSERTINTO = @as(u32, 2048);
pub const WMDM_MODE_RECURSIVE = @as(u32, 4096);
pub const WMDM_RIGHTS_PLAY_ON_PC = @as(u32, 1);
pub const WMDM_RIGHTS_COPY_TO_NON_SDMI_DEVICE = @as(u32, 2);
pub const WMDM_RIGHTS_COPY_TO_CD = @as(u32, 8);
pub const WMDM_RIGHTS_COPY_TO_SDMI_DEVICE = @as(u32, 16);
pub const WMDM_SEEK_BEGIN = @as(u32, 1);
pub const WMDM_SEEK_CURRENT = @as(u32, 2);
pub const WMDM_SEEK_END = @as(u32, 8);
pub const DO_NOT_VIRTUALIZE_STORAGES_AS_DEVICES = @as(u32, 1);
pub const ALLOW_OUTOFBAND_NOTIFICATION = @as(u32, 2);
pub const MDSP_READ = @as(u32, 1);
pub const MDSP_WRITE = @as(u32, 2);
pub const MDSP_SEEK_BOF = @as(u32, 1);
pub const MDSP_SEEK_CUR = @as(u32, 2);
pub const MDSP_SEEK_EOF = @as(u32, 4);
pub const WMDM_SCP_EXAMINE_EXTENSION = @as(i32, 1);
pub const WMDM_SCP_EXAMINE_DATA = @as(i32, 2);
pub const WMDM_SCP_DECIDE_DATA = @as(i32, 8);
pub const WMDM_SCP_PROTECTED_OUTPUT = @as(i32, 16);
pub const WMDM_SCP_UNPROTECTED_OUTPUT = @as(i32, 32);
pub const WMDM_SCP_RIGHTS_DATA = @as(i32, 64);
pub const WMDM_SCP_TRANSFER_OBJECTDATA = @as(i32, 32);
pub const WMDM_SCP_NO_MORE_CHANGES = @as(i32, 64);
pub const WMDM_SCP_DRMINFO_NOT_DRMPROTECTED = @as(i32, 0);
pub const WMDM_SCP_DRMINFO_V1HEADER = @as(i32, 1);
pub const WMDM_SCP_DRMINFO_V2HEADER = @as(i32, 2);
pub const SCP_EVENTID_ACQSECURECLOCK = Guid.initString("86248cc9-4a59-43e2-9146-48a7f3f4140c");
pub const SCP_EVENTID_NEEDTOINDIV = Guid.initString("87a507c7-b469-4386-b976-d5d1ce538a6f");
pub const SCP_EVENTID_DRMINFO = Guid.initString("213dd287-41d2-432b-9e3f-3b4f7b3581dd");
pub const SCP_PARAMID_DRMVERSION = Guid.initString("41d0155d-7cc7-4217-ada9-005074624da4");
pub const SAC_MAC_LEN = @as(u32, 8);
pub const WMDM_LOG_SEV_INFO = @as(u32, 1);
pub const WMDM_LOG_SEV_WARN = @as(u32, 2);
pub const WMDM_LOG_SEV_ERROR = @as(u32, 4);
pub const WMDM_LOG_NOTIMESTAMP = @as(u32, 16);
pub const g_wszWMDMFileName = "WMDM/FileName";
pub const g_wszWMDMFormatCode = "WMDM/FormatCode";
pub const g_wszWMDMLastModifiedDate = "WMDM/LastModifiedDate";
pub const g_wszWMDMFileCreationDate = "WMDM/FileCreationDate";
pub const g_wszWMDMFileSize = "WMDM/FileSize";
pub const g_wszWMDMFileAttributes = "WMDM/FileAttributes";
pub const g_wszAudioWAVECodec = "WMDM/AudioWAVECodec";
pub const g_wszVideoFourCCCodec = "WMDM/VideoFourCCCodec";
pub const g_wszWMDMTitle = "WMDM/Title";
pub const g_wszWMDMAuthor = "WMDM/Author";
pub const g_wszWMDMDescription = "WMDM/Description";
pub const g_wszWMDMIsProtected = "WMDM/IsProtected";
pub const g_wszWMDMAlbumTitle = "WMDM/AlbumTitle";
pub const g_wszWMDMAlbumArtist = "WMDM/AlbumArtist";
pub const g_wszWMDMTrack = "WMDM/Track";
pub const g_wszWMDMGenre = "WMDM/Genre";
pub const g_wszWMDMTrackMood = "WMDM/TrackMood";
pub const g_wszWMDMAlbumCoverFormat = "WMDM/AlbumCoverFormat";
pub const g_wszWMDMAlbumCoverSize = "WMDM/AlbumCoverSize";
pub const g_wszWMDMAlbumCoverHeight = "WMDM/AlbumCoverHeight";
pub const g_wszWMDMAlbumCoverWidth = "WMDM/AlbumCoverWidth";
pub const g_wszWMDMAlbumCoverDuration = "WMDM/AlbumCoverDuration";
pub const g_wszWMDMAlbumCoverData = "WMDM/AlbumCoverData";
pub const g_wszWMDMYear = "WMDM/Year";
pub const g_wszWMDMComposer = "WMDM/Composer";
pub const g_wszWMDMCodec = "WMDM/Codec";
pub const g_wszWMDMDRMId = "WMDM/DRMId";
pub const g_wszWMDMBitrate = "WMDM/Bitrate";
pub const g_wszWMDMBitRateType = "WMDM/BitRateType";
pub const g_wszWMDMSampleRate = "WMDM/SampleRate";
pub const g_wszWMDMNumChannels = "WMDM/NumChannels";
pub const g_wszWMDMBlockAlignment = "WMDM/BlockAlignment";
pub const g_wszWMDMAudioBitDepth = "WMDM/AudioBitDepth";
pub const g_wszWMDMTotalBitrate = "WMDM/TotalBitrate";
pub const g_wszWMDMVideoBitrate = "WMDM/VideoBitrate";
pub const g_wszWMDMFrameRate = "WMDM/FrameRate";
pub const g_wszWMDMScanType = "WMDM/ScanType";
pub const g_wszWMDMKeyFrameDistance = "WMDM/KeyFrameDistance";
pub const g_wszWMDMBufferSize = "WMDM/BufferSize";
pub const g_wszWMDMQualitySetting = "WMDM/QualitySetting";
pub const g_wszWMDMEncodingProfile = "WMDM/EncodingProfile";
pub const g_wszWMDMDuration = "WMDM/Duration";
pub const g_wszWMDMAlbumArt = "WMDM/AlbumArt";
pub const g_wszWMDMBuyNow = "WMDM/BuyNow";
pub const g_wszWMDMNonConsumable = "WMDM/NonConsumable";
pub const g_wszWMDMediaClassPrimaryID = "WMDM/MediaClassPrimaryID";
pub const g_wszWMDMMediaClassSecondaryID = "WMDM/MediaClassSecondaryID";
pub const g_wszWMDMUserEffectiveRating = "WMDM/UserEffectiveRating";
pub const g_wszWMDMUserRating = "WMDM/UserRating";
pub const g_wszWMDMUserRatingOnDevice = "WMDM/UserRatingOnDevice";
pub const g_wszWMDMPlayCount = "WMDM/PlayCount";
pub const g_wszWMDMDevicePlayCount = "WMDM/DevicePlayCount";
pub const g_wszWMDMAuthorDate = "WMDM/AuthorDate";
pub const g_wszWMDMUserLastPlayTime = "WMDM/UserLastPlayTime";
pub const g_wszWMDMSubTitle = "WMDM/SubTitle";
pub const g_wszWMDMSubTitleDescription = "WMDM/SubTitleDescription";
pub const g_wszWMDMMediaCredits = "WMDM/MediaCredits";
pub const g_wszWMDMMediaStationName = "WMDM/MediaStationName";
pub const g_wszWMDMMediaOriginalChannel = "WMDM/MediaOriginalChannel";
pub const g_wszWMDMMediaOriginalBroadcastDateTime = "WMDM/MediaOriginalBroadcastDateTime";
pub const g_wszWMDMProviderCopyright = "WMDM/ProviderCopyright";
pub const g_wszWMDMSyncID = "WMDM/SyncID";
pub const g_wszWMDMPersistentUniqueID = "WMDM/PersistentUniqueID";
pub const g_wszWMDMWidth = "WMDM/Width";
pub const g_wszWMDMHeight = "WMDM/Height";
pub const g_wszWMDMSyncTime = "WMDM/SyncTime";
pub const g_wszWMDMParentalRating = "WMDM/ParentalRating";
pub const g_wszWMDMMetaGenre = "WMDM/MetaGenre";
pub const g_wszWMDMIsRepeat = "WMDM/IsRepeat";
pub const g_wszWMDMSupportedDeviceProperties = "WMDM/SupportedDeviceProperties";
pub const g_wszWMDMDeviceFriendlyName = "WMDM/DeviceFriendlyName";
pub const g_wszWMDMFormatsSupported = "WMDM/FormatsSupported";
pub const g_wszWMDMFormatsSupportedAreOrdered = "WMDM/FormatsSupportedAreOrdered";
pub const g_wszWMDMSyncRelationshipID = "WMDM/SyncRelationshipID";
pub const g_wszWMDMDeviceModelName = "WMDM/DeviceModelName";
pub const g_wszWMDMDeviceFirmwareVersion = "WMDM/DeviceFirmwareVersion";
pub const g_wszWMDMDeviceVendorExtension = "WMDM/DeviceVendorExtension";
pub const g_wszWMDMDeviceProtocol = "WMDM/DeviceProtocol";
pub const g_wszWMDMDeviceServiceProviderVendor = "WMDM/DeviceServiceProviderVendor";
pub const g_wszWMDMDeviceRevocationInfo = "WMDM/DeviceRevocationInfo";
pub const g_wszWMDMCollectionID = "WMDM/CollectionID";
pub const g_wszWMDMOwner = "WMDM/Owner";
pub const g_wszWMDMEditor = "WMDM/Editor";
pub const g_wszWMDMWebmaster = "WMDM/Webmaster";
pub const g_wszWMDMSourceURL = "WMDM/SourceURL";
pub const g_wszWMDMDestinationURL = "WMDM/DestinationURL";
pub const g_wszWMDMCategory = "WMDM/Category";
pub const g_wszWMDMTimeBookmark = "WMDM/TimeBookmark";
pub const g_wszWMDMObjectBookmark = "WMDM/ObjectBookmark";
pub const g_wszWMDMByteBookmark = "WMDM/ByteBookmark";
pub const g_wszWMDMDataOffset = "WMDM/DataOffset";
pub const g_wszWMDMDataLength = "WMDM/DataLength";
pub const g_wszWMDMDataUnits = "WMDM/DataUnits";
pub const g_wszWMDMTimeToLive = "WMDM/TimeToLive";
pub const g_wszWMDMMediaGuid = "WMDM/MediaGuid";
pub const g_wszWPDPassthroughPropertyValues = "WPD/PassthroughPropertyValues";
pub const EVENT_WMDM_CONTENT_TRANSFER = Guid.initString("339c9bf4-bcfe-4ed8-94df-eaf8c26ab61b");
pub const MTP_COMMAND_MAX_PARAMS = @as(u32, 5);
pub const MTP_RESPONSE_MAX_PARAMS = @as(u32, 5);
pub const MTP_RESPONSE_OK = @as(u16, 8193);

//--------------------------------------------------------------------------------
// Section: Types (91)
//--------------------------------------------------------------------------------
pub const __MACINFO = extern struct {
    fUsed: BOOL,
    abMacState: [36]u8,
};

const CLSID_MediaDevMgrClassFactory_Value = Guid.initString("50040c1d-bdbf-4924-b873-f14d6c5bfd66");
pub const CLSID_MediaDevMgrClassFactory = &CLSID_MediaDevMgrClassFactory_Value;

const CLSID_MediaDevMgr_Value = Guid.initString("25baad81-3560-11d3-8471-00c04f79dbc0");
pub const CLSID_MediaDevMgr = &CLSID_MediaDevMgr_Value;

const CLSID_WMDMDevice_Value = Guid.initString("807b3cdf-357a-11d3-8471-00c04f79dbc0");
pub const CLSID_WMDMDevice = &CLSID_WMDMDevice_Value;

const CLSID_WMDMStorage_Value = Guid.initString("807b3ce0-357a-11d3-8471-00c04f79dbc0");
pub const CLSID_WMDMStorage = &CLSID_WMDMStorage_Value;

const CLSID_WMDMStorageGlobal_Value = Guid.initString("807b3ce1-357a-11d3-8471-00c04f79dbc0");
pub const CLSID_WMDMStorageGlobal = &CLSID_WMDMStorageGlobal_Value;

const CLSID_WMDMDeviceEnum_Value = Guid.initString("430e35af-3971-11d3-8474-00c04f79dbc0");
pub const CLSID_WMDMDeviceEnum = &CLSID_WMDMDeviceEnum_Value;

const CLSID_WMDMStorageEnum_Value = Guid.initString("eb401a3b-3af7-11d3-8474-00c04f79dbc0");
pub const CLSID_WMDMStorageEnum = &CLSID_WMDMStorageEnum_Value;

pub const WMDM_TAG_DATATYPE = enum(i32) {
    DWORD = 0,
    STRING = 1,
    BINARY = 2,
    BOOL = 3,
    QWORD = 4,
    WORD = 5,
    GUID = 6,
    DATE = 7,
};
pub const WMDM_TYPE_DWORD = WMDM_TAG_DATATYPE.DWORD;
pub const WMDM_TYPE_STRING = WMDM_TAG_DATATYPE.STRING;
pub const WMDM_TYPE_BINARY = WMDM_TAG_DATATYPE.BINARY;
pub const WMDM_TYPE_BOOL = WMDM_TAG_DATATYPE.BOOL;
pub const WMDM_TYPE_QWORD = WMDM_TAG_DATATYPE.QWORD;
pub const WMDM_TYPE_WORD = WMDM_TAG_DATATYPE.WORD;
pub const WMDM_TYPE_GUID = WMDM_TAG_DATATYPE.GUID;
pub const WMDM_TYPE_DATE = WMDM_TAG_DATATYPE.DATE;

pub const WMDM_SESSION_TYPE = enum(i32) {
    NONE = 0,
    TRANSFER_TO_DEVICE = 1,
    TRANSFER_FROM_DEVICE = 16,
    DELETE = 256,
    CUSTOM = 4096,
};
pub const WMDM_SESSION_NONE = WMDM_SESSION_TYPE.NONE;
pub const WMDM_SESSION_TRANSFER_TO_DEVICE = WMDM_SESSION_TYPE.TRANSFER_TO_DEVICE;
pub const WMDM_SESSION_TRANSFER_FROM_DEVICE = WMDM_SESSION_TYPE.TRANSFER_FROM_DEVICE;
pub const WMDM_SESSION_DELETE = WMDM_SESSION_TYPE.DELETE;
pub const WMDM_SESSION_CUSTOM = WMDM_SESSION_TYPE.CUSTOM;

pub const _WAVEFORMATEX = extern struct {
    wFormatTag: u16,
    nChannels: u16,
    nSamplesPerSec: u32,
    nAvgBytesPerSec: u32,
    nBlockAlign: u16,
    wBitsPerSample: u16,
    cbSize: u16,
};

pub const _BITMAPINFOHEADER = extern struct {
    biSize: u32,
    biWidth: i32,
    biHeight: i32,
    biPlanes: u16,
    biBitCount: u16,
    biCompression: u32,
    biSizeImage: u32,
    biXPelsPerMeter: i32,
    biYPelsPerMeter: i32,
    biClrUsed: u32,
    biClrImportant: u32,
};

pub const _VIDEOINFOHEADER = extern struct {
    rcSource: RECT,
    rcTarget: RECT,
    dwBitRate: u32,
    dwBitErrorRate: u32,
    AvgTimePerFrame: i64,
    bmiHeader: _BITMAPINFOHEADER,
};

pub const WMFILECAPABILITIES = extern struct {
    pwszMimeType: ?PWSTR,
    dwReserved: u32,
};

pub const OPAQUECOMMAND = extern struct {
    guidCommand: Guid,
    dwDataLen: u32,
    pData: ?*u8,
    abMAC: [20]u8,
};

pub const WMDMID = extern struct {
    cbSize: u32,
    dwVendorID: u32,
    pID: [128]u8,
    SerialNumberLength: u32,
};

pub const WMDMDATETIME = extern struct {
    wYear: u16,
    wMonth: u16,
    wDay: u16,
    wHour: u16,
    wMinute: u16,
    wSecond: u16,
};

pub const WMDMRIGHTS = extern struct {
    cbSize: u32,
    dwContentType: u32,
    fuFlags: u32,
    fuRights: u32,
    dwAppSec: u32,
    dwPlaybackCount: u32,
    ExpirationDate: WMDMDATETIME,
};

pub const WMDMMetadataView = extern struct {
    pwszViewName: ?PWSTR,
    nDepth: u32,
    ppwszTags: ?*?*u16,
};

pub const WMDM_STORAGE_ENUM_MODE = enum(i32) {
    RAW = 0,
    USE_DEVICE_PREF = 1,
    METADATA_VIEWS = 2,
};
pub const ENUM_MODE_RAW = WMDM_STORAGE_ENUM_MODE.RAW;
pub const ENUM_MODE_USE_DEVICE_PREF = WMDM_STORAGE_ENUM_MODE.USE_DEVICE_PREF;
pub const ENUM_MODE_METADATA_VIEWS = WMDM_STORAGE_ENUM_MODE.METADATA_VIEWS;

pub const WMDM_FORMATCODE = enum(i32) {
    NOTUSED = 0,
    ALLIMAGES = -1,
    UNDEFINED = 12288,
    ASSOCIATION = 12289,
    SCRIPT = 12290,
    EXECUTABLE = 12291,
    TEXT = 12292,
    HTML = 12293,
    DPOF = 12294,
    AIFF = 12295,
    WAVE = 12296,
    MP3 = 12297,
    AVI = 12298,
    MPEG = 12299,
    ASF = 12300,
    RESERVED_FIRST = 12301,
    RESERVED_LAST = 14335,
    IMAGE_UNDEFINED = 14336,
    IMAGE_EXIF = 14337,
    IMAGE_TIFFEP = 14338,
    IMAGE_FLASHPIX = 14339,
    IMAGE_BMP = 14340,
    IMAGE_CIFF = 14341,
    IMAGE_GIF = 14343,
    IMAGE_JFIF = 14344,
    IMAGE_PCD = 14345,
    IMAGE_PICT = 14346,
    IMAGE_PNG = 14347,
    IMAGE_TIFF = 14349,
    IMAGE_TIFFIT = 14350,
    IMAGE_JP2 = 14351,
    IMAGE_JPX = 14352,
    IMAGE_RESERVED_FIRST = 14353,
    IMAGE_RESERVED_LAST = 16383,
    UNDEFINEDFIRMWARE = 47106,
    WBMP = 47107,
    JPEGXR = 47108,
    WINDOWSIMAGEFORMAT = 47233,
    UNDEFINEDAUDIO = 47360,
    WMA = 47361,
    OGG = 47362,
    AAC = 47363,
    AUDIBLE = 47364,
    FLAC = 47366,
    QCELP = 47367,
    AMR = 47368,
    UNDEFINEDVIDEO = 47488,
    WMV = 47489,
    MP4 = 47490,
    MP2 = 47491,
    @"3GP" = 47492,
    @"3G2" = 47493,
    AVCHD = 47494,
    ATSCTS = 47495,
    DVBTS = 47496,
    MKV = 47497,
    MKA = 47498,
    MK3D = 47499,
    UNDEFINEDCOLLECTION = 47616,
    ABSTRACTMULTIMEDIAALBUM = 47617,
    ABSTRACTIMAGEALBUM = 47618,
    ABSTRACTAUDIOALBUM = 47619,
    ABSTRACTVIDEOALBUM = 47620,
    ABSTRACTAUDIOVIDEOPLAYLIST = 47621,
    ABSTRACTCONTACTGROUP = 47622,
    ABSTRACTMESSAGEFOLDER = 47623,
    ABSTRACTCHAPTEREDPRODUCTION = 47624,
    MEDIA_CAST = 47627,
    WPLPLAYLIST = 47632,
    M3UPLAYLIST = 47633,
    MPLPLAYLIST = 47634,
    ASXPLAYLIST = 47635,
    PLSPLAYLIST = 47636,
    UNDEFINEDDOCUMENT = 47744,
    ABSTRACTDOCUMENT = 47745,
    XMLDOCUMENT = 47746,
    MICROSOFTWORDDOCUMENT = 47747,
    MHTCOMPILEDHTMLDOCUMENT = 47748,
    MICROSOFTEXCELSPREADSHEET = 47749,
    MICROSOFTPOWERPOINTDOCUMENT = 47750,
    UNDEFINEDMESSAGE = 47872,
    ABSTRACTMESSAGE = 47873,
    UNDEFINEDCONTACT = 48000,
    ABSTRACTCONTACT = 48001,
    VCARD2 = 48002,
    VCARD3 = 48003,
    UNDEFINEDCALENDARITEM = 48640,
    ABSTRACTCALENDARITEM = 48641,
    VCALENDAR1 = 48642,
    VCALENDAR2 = 48643,
    UNDEFINEDWINDOWSEXECUTABLE = 48768,
    M4A = 1297101889,
    @"3GPA" = 860311617,
    @"3G2A" = 860303937,
    SECTION = 48770,
};
pub const WMDM_FORMATCODE_NOTUSED = WMDM_FORMATCODE.NOTUSED;
pub const WMDM_FORMATCODE_ALLIMAGES = WMDM_FORMATCODE.ALLIMAGES;
pub const WMDM_FORMATCODE_UNDEFINED = WMDM_FORMATCODE.UNDEFINED;
pub const WMDM_FORMATCODE_ASSOCIATION = WMDM_FORMATCODE.ASSOCIATION;
pub const WMDM_FORMATCODE_SCRIPT = WMDM_FORMATCODE.SCRIPT;
pub const WMDM_FORMATCODE_EXECUTABLE = WMDM_FORMATCODE.EXECUTABLE;
pub const WMDM_FORMATCODE_TEXT = WMDM_FORMATCODE.TEXT;
pub const WMDM_FORMATCODE_HTML = WMDM_FORMATCODE.HTML;
pub const WMDM_FORMATCODE_DPOF = WMDM_FORMATCODE.DPOF;
pub const WMDM_FORMATCODE_AIFF = WMDM_FORMATCODE.AIFF;
pub const WMDM_FORMATCODE_WAVE = WMDM_FORMATCODE.WAVE;
pub const WMDM_FORMATCODE_MP3 = WMDM_FORMATCODE.MP3;
pub const WMDM_FORMATCODE_AVI = WMDM_FORMATCODE.AVI;
pub const WMDM_FORMATCODE_MPEG = WMDM_FORMATCODE.MPEG;
pub const WMDM_FORMATCODE_ASF = WMDM_FORMATCODE.ASF;
pub const WMDM_FORMATCODE_RESERVED_FIRST = WMDM_FORMATCODE.RESERVED_FIRST;
pub const WMDM_FORMATCODE_RESERVED_LAST = WMDM_FORMATCODE.RESERVED_LAST;
pub const WMDM_FORMATCODE_IMAGE_UNDEFINED = WMDM_FORMATCODE.IMAGE_UNDEFINED;
pub const WMDM_FORMATCODE_IMAGE_EXIF = WMDM_FORMATCODE.IMAGE_EXIF;
pub const WMDM_FORMATCODE_IMAGE_TIFFEP = WMDM_FORMATCODE.IMAGE_TIFFEP;
pub const WMDM_FORMATCODE_IMAGE_FLASHPIX = WMDM_FORMATCODE.IMAGE_FLASHPIX;
pub const WMDM_FORMATCODE_IMAGE_BMP = WMDM_FORMATCODE.IMAGE_BMP;
pub const WMDM_FORMATCODE_IMAGE_CIFF = WMDM_FORMATCODE.IMAGE_CIFF;
pub const WMDM_FORMATCODE_IMAGE_GIF = WMDM_FORMATCODE.IMAGE_GIF;
pub const WMDM_FORMATCODE_IMAGE_JFIF = WMDM_FORMATCODE.IMAGE_JFIF;
pub const WMDM_FORMATCODE_IMAGE_PCD = WMDM_FORMATCODE.IMAGE_PCD;
pub const WMDM_FORMATCODE_IMAGE_PICT = WMDM_FORMATCODE.IMAGE_PICT;
pub const WMDM_FORMATCODE_IMAGE_PNG = WMDM_FORMATCODE.IMAGE_PNG;
pub const WMDM_FORMATCODE_IMAGE_TIFF = WMDM_FORMATCODE.IMAGE_TIFF;
pub const WMDM_FORMATCODE_IMAGE_TIFFIT = WMDM_FORMATCODE.IMAGE_TIFFIT;
pub const WMDM_FORMATCODE_IMAGE_JP2 = WMDM_FORMATCODE.IMAGE_JP2;
pub const WMDM_FORMATCODE_IMAGE_JPX = WMDM_FORMATCODE.IMAGE_JPX;
pub const WMDM_FORMATCODE_IMAGE_RESERVED_FIRST = WMDM_FORMATCODE.IMAGE_RESERVED_FIRST;
pub const WMDM_FORMATCODE_IMAGE_RESERVED_LAST = WMDM_FORMATCODE.IMAGE_RESERVED_LAST;
pub const WMDM_FORMATCODE_UNDEFINEDFIRMWARE = WMDM_FORMATCODE.UNDEFINEDFIRMWARE;
pub const WMDM_FORMATCODE_WBMP = WMDM_FORMATCODE.WBMP;
pub const WMDM_FORMATCODE_JPEGXR = WMDM_FORMATCODE.JPEGXR;
pub const WMDM_FORMATCODE_WINDOWSIMAGEFORMAT = WMDM_FORMATCODE.WINDOWSIMAGEFORMAT;
pub const WMDM_FORMATCODE_UNDEFINEDAUDIO = WMDM_FORMATCODE.UNDEFINEDAUDIO;
pub const WMDM_FORMATCODE_WMA = WMDM_FORMATCODE.WMA;
pub const WMDM_FORMATCODE_OGG = WMDM_FORMATCODE.OGG;
pub const WMDM_FORMATCODE_AAC = WMDM_FORMATCODE.AAC;
pub const WMDM_FORMATCODE_AUDIBLE = WMDM_FORMATCODE.AUDIBLE;
pub const WMDM_FORMATCODE_FLAC = WMDM_FORMATCODE.FLAC;
pub const WMDM_FORMATCODE_QCELP = WMDM_FORMATCODE.QCELP;
pub const WMDM_FORMATCODE_AMR = WMDM_FORMATCODE.AMR;
pub const WMDM_FORMATCODE_UNDEFINEDVIDEO = WMDM_FORMATCODE.UNDEFINEDVIDEO;
pub const WMDM_FORMATCODE_WMV = WMDM_FORMATCODE.WMV;
pub const WMDM_FORMATCODE_MP4 = WMDM_FORMATCODE.MP4;
pub const WMDM_FORMATCODE_MP2 = WMDM_FORMATCODE.MP2;
pub const WMDM_FORMATCODE_3GP = WMDM_FORMATCODE.@"3GP";
pub const WMDM_FORMATCODE_3G2 = WMDM_FORMATCODE.@"3G2";
pub const WMDM_FORMATCODE_AVCHD = WMDM_FORMATCODE.AVCHD;
pub const WMDM_FORMATCODE_ATSCTS = WMDM_FORMATCODE.ATSCTS;
pub const WMDM_FORMATCODE_DVBTS = WMDM_FORMATCODE.DVBTS;
pub const WMDM_FORMATCODE_MKV = WMDM_FORMATCODE.MKV;
pub const WMDM_FORMATCODE_MKA = WMDM_FORMATCODE.MKA;
pub const WMDM_FORMATCODE_MK3D = WMDM_FORMATCODE.MK3D;
pub const WMDM_FORMATCODE_UNDEFINEDCOLLECTION = WMDM_FORMATCODE.UNDEFINEDCOLLECTION;
pub const WMDM_FORMATCODE_ABSTRACTMULTIMEDIAALBUM = WMDM_FORMATCODE.ABSTRACTMULTIMEDIAALBUM;
pub const WMDM_FORMATCODE_ABSTRACTIMAGEALBUM = WMDM_FORMATCODE.ABSTRACTIMAGEALBUM;
pub const WMDM_FORMATCODE_ABSTRACTAUDIOALBUM = WMDM_FORMATCODE.ABSTRACTAUDIOALBUM;
pub const WMDM_FORMATCODE_ABSTRACTVIDEOALBUM = WMDM_FORMATCODE.ABSTRACTVIDEOALBUM;
pub const WMDM_FORMATCODE_ABSTRACTAUDIOVIDEOPLAYLIST = WMDM_FORMATCODE.ABSTRACTAUDIOVIDEOPLAYLIST;
pub const WMDM_FORMATCODE_ABSTRACTCONTACTGROUP = WMDM_FORMATCODE.ABSTRACTCONTACTGROUP;
pub const WMDM_FORMATCODE_ABSTRACTMESSAGEFOLDER = WMDM_FORMATCODE.ABSTRACTMESSAGEFOLDER;
pub const WMDM_FORMATCODE_ABSTRACTCHAPTEREDPRODUCTION = WMDM_FORMATCODE.ABSTRACTCHAPTEREDPRODUCTION;
pub const WMDM_FORMATCODE_MEDIA_CAST = WMDM_FORMATCODE.MEDIA_CAST;
pub const WMDM_FORMATCODE_WPLPLAYLIST = WMDM_FORMATCODE.WPLPLAYLIST;
pub const WMDM_FORMATCODE_M3UPLAYLIST = WMDM_FORMATCODE.M3UPLAYLIST;
pub const WMDM_FORMATCODE_MPLPLAYLIST = WMDM_FORMATCODE.MPLPLAYLIST;
pub const WMDM_FORMATCODE_ASXPLAYLIST = WMDM_FORMATCODE.ASXPLAYLIST;
pub const WMDM_FORMATCODE_PLSPLAYLIST = WMDM_FORMATCODE.PLSPLAYLIST;
pub const WMDM_FORMATCODE_UNDEFINEDDOCUMENT = WMDM_FORMATCODE.UNDEFINEDDOCUMENT;
pub const WMDM_FORMATCODE_ABSTRACTDOCUMENT = WMDM_FORMATCODE.ABSTRACTDOCUMENT;
pub const WMDM_FORMATCODE_XMLDOCUMENT = WMDM_FORMATCODE.XMLDOCUMENT;
pub const WMDM_FORMATCODE_MICROSOFTWORDDOCUMENT = WMDM_FORMATCODE.MICROSOFTWORDDOCUMENT;
pub const WMDM_FORMATCODE_MHTCOMPILEDHTMLDOCUMENT = WMDM_FORMATCODE.MHTCOMPILEDHTMLDOCUMENT;
pub const WMDM_FORMATCODE_MICROSOFTEXCELSPREADSHEET = WMDM_FORMATCODE.MICROSOFTEXCELSPREADSHEET;
pub const WMDM_FORMATCODE_MICROSOFTPOWERPOINTDOCUMENT = WMDM_FORMATCODE.MICROSOFTPOWERPOINTDOCUMENT;
pub const WMDM_FORMATCODE_UNDEFINEDMESSAGE = WMDM_FORMATCODE.UNDEFINEDMESSAGE;
pub const WMDM_FORMATCODE_ABSTRACTMESSAGE = WMDM_FORMATCODE.ABSTRACTMESSAGE;
pub const WMDM_FORMATCODE_UNDEFINEDCONTACT = WMDM_FORMATCODE.UNDEFINEDCONTACT;
pub const WMDM_FORMATCODE_ABSTRACTCONTACT = WMDM_FORMATCODE.ABSTRACTCONTACT;
pub const WMDM_FORMATCODE_VCARD2 = WMDM_FORMATCODE.VCARD2;
pub const WMDM_FORMATCODE_VCARD3 = WMDM_FORMATCODE.VCARD3;
pub const WMDM_FORMATCODE_UNDEFINEDCALENDARITEM = WMDM_FORMATCODE.UNDEFINEDCALENDARITEM;
pub const WMDM_FORMATCODE_ABSTRACTCALENDARITEM = WMDM_FORMATCODE.ABSTRACTCALENDARITEM;
pub const WMDM_FORMATCODE_VCALENDAR1 = WMDM_FORMATCODE.VCALENDAR1;
pub const WMDM_FORMATCODE_VCALENDAR2 = WMDM_FORMATCODE.VCALENDAR2;
pub const WMDM_FORMATCODE_UNDEFINEDWINDOWSEXECUTABLE = WMDM_FORMATCODE.UNDEFINEDWINDOWSEXECUTABLE;
pub const WMDM_FORMATCODE_M4A = WMDM_FORMATCODE.M4A;
pub const WMDM_FORMATCODE_3GPA = WMDM_FORMATCODE.@"3GPA";
pub const WMDM_FORMATCODE_3G2A = WMDM_FORMATCODE.@"3G2A";
pub const WMDM_FORMATCODE_SECTION = WMDM_FORMATCODE.SECTION;

pub const WMDM_ENUM_PROP_VALID_VALUES_FORM = enum(i32) {
    ANY = 0,
    RANGE = 1,
    ENUM = 2,
};
pub const WMDM_ENUM_PROP_VALID_VALUES_ANY = WMDM_ENUM_PROP_VALID_VALUES_FORM.ANY;
pub const WMDM_ENUM_PROP_VALID_VALUES_RANGE = WMDM_ENUM_PROP_VALID_VALUES_FORM.RANGE;
pub const WMDM_ENUM_PROP_VALID_VALUES_ENUM = WMDM_ENUM_PROP_VALID_VALUES_FORM.ENUM;

pub const WMDM_PROP_VALUES_RANGE = extern struct {
    rangeMin: PROPVARIANT,
    rangeMax: PROPVARIANT,
    rangeStep: PROPVARIANT,
};

pub const WMDM_PROP_VALUES_ENUM = extern struct {
    cEnumValues: u32,
    pValues: ?*PROPVARIANT,
};

pub const WMDM_PROP_DESC = extern struct {
    pwszPropName: ?PWSTR,
    ValidValuesForm: WMDM_ENUM_PROP_VALID_VALUES_FORM,
    ValidValues: extern union {
        ValidValuesRange: WMDM_PROP_VALUES_RANGE,
        EnumeratedValidValues: WMDM_PROP_VALUES_ENUM,
    },
};

pub const WMDM_PROP_CONFIG = extern struct {
    nPreference: u32,
    nPropDesc: u32,
    pPropDesc: ?*WMDM_PROP_DESC,
};

pub const WMDM_FORMAT_CAPABILITY = extern struct {
    nPropConfig: u32,
    pConfigs: ?*WMDM_PROP_CONFIG,
};

pub const WMDM_FIND_SCOPE = enum(i32) {
    GLOBAL = 0,
    IMMEDIATE_CHILDREN = 1,
};
pub const WMDM_FIND_SCOPE_GLOBAL = WMDM_FIND_SCOPE.GLOBAL;
pub const WMDM_FIND_SCOPE_IMMEDIATE_CHILDREN = WMDM_FIND_SCOPE.IMMEDIATE_CHILDREN;

pub const WMDMMessage = enum(i32) {
    DEVICE_ARRIVAL = 0,
    DEVICE_REMOVAL = 1,
    MEDIA_ARRIVAL = 2,
    MEDIA_REMOVAL = 3,
};
pub const WMDM_MSG_DEVICE_ARRIVAL = WMDMMessage.DEVICE_ARRIVAL;
pub const WMDM_MSG_DEVICE_REMOVAL = WMDMMessage.DEVICE_REMOVAL;
pub const WMDM_MSG_MEDIA_ARRIVAL = WMDMMessage.MEDIA_ARRIVAL;
pub const WMDM_MSG_MEDIA_REMOVAL = WMDMMessage.MEDIA_REMOVAL;

const IID_IWMDMMetaData_Value = Guid.initString("ec3b0663-0951-460a-9a80-0dceed3c043c");
pub const IID_IWMDMMetaData = &IID_IWMDMMetaData_Value;
pub const IWMDMMetaData = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddItem: *const fn (
            self: *const IWMDMMetaData,
            type: WMDM_TAG_DATATYPE,
            pwsz_tag_name: ?[*:0]const u16,
            p_value: ?[*:0]u8,
            i_length: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryByName: *const fn (
            self: *const IWMDMMetaData,
            pwsz_tag_name: ?[*:0]const u16,
            p_type: ?*WMDM_TAG_DATATYPE,
            p_value: [*]?*u8,
            pcb_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryByIndex: *const fn (
            self: *const IWMDMMetaData,
            i_index: u32,
            ppwsz_name: ?*?*u16,
            p_type: ?*WMDM_TAG_DATATYPE,
            pp_value: [*]?*u8,
            pcb_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemCount: *const fn (
            self: *const IWMDMMetaData,
            i_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addItem(self: *const T, type_: WMDM_TAG_DATATYPE, pwsz_tag_name_: ?[*:0]const u16, p_value_: ?[*:0]u8, i_length_: u32) HRESULT {
                return @as(*const IWMDMMetaData.VTable, @ptrCast(self.vtable)).AddItem(@as(*const IWMDMMetaData, @ptrCast(self)), type_, pwsz_tag_name_, p_value_, i_length_);
            }
            pub inline fn queryByName(self: *const T, pwsz_tag_name_: ?[*:0]const u16, p_type_: ?*WMDM_TAG_DATATYPE, p_value_: [*]?*u8, pcb_length_: ?*u32) HRESULT {
                return @as(*const IWMDMMetaData.VTable, @ptrCast(self.vtable)).QueryByName(@as(*const IWMDMMetaData, @ptrCast(self)), pwsz_tag_name_, p_type_, p_value_, pcb_length_);
            }
            pub inline fn queryByIndex(self: *const T, i_index_: u32, ppwsz_name_: ?*?*u16, p_type_: ?*WMDM_TAG_DATATYPE, pp_value_: [*]?*u8, pcb_length_: ?*u32) HRESULT {
                return @as(*const IWMDMMetaData.VTable, @ptrCast(self.vtable)).QueryByIndex(@as(*const IWMDMMetaData, @ptrCast(self)), i_index_, ppwsz_name_, p_type_, pp_value_, pcb_length_);
            }
            pub inline fn getItemCount(self: *const T, i_count_: ?*u32) HRESULT {
                return @as(*const IWMDMMetaData.VTable, @ptrCast(self.vtable)).GetItemCount(@as(*const IWMDMMetaData, @ptrCast(self)), i_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDeviceManager_Value = Guid.initString("1dcb3a00-33ed-11d3-8470-00c04f79dbc0");
pub const IID_IWMDeviceManager = &IID_IWMDeviceManager_Value;
pub const IWMDeviceManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRevision: *const fn (
            self: *const IWMDeviceManager,
            pdw_revision: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceCount: *const fn (
            self: *const IWMDeviceManager,
            pdw_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDevices: *const fn (
            self: *const IWMDeviceManager,
            pp_enum_device: ?*?*IWMDMEnumDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getRevision(self: *const T, pdw_revision_: ?*u32) HRESULT {
                return @as(*const IWMDeviceManager.VTable, @ptrCast(self.vtable)).GetRevision(@as(*const IWMDeviceManager, @ptrCast(self)), pdw_revision_);
            }
            pub inline fn getDeviceCount(self: *const T, pdw_count_: ?*u32) HRESULT {
                return @as(*const IWMDeviceManager.VTable, @ptrCast(self.vtable)).GetDeviceCount(@as(*const IWMDeviceManager, @ptrCast(self)), pdw_count_);
            }
            pub inline fn enumDevices(self: *const T, pp_enum_device_: ?*?*IWMDMEnumDevice) HRESULT {
                return @as(*const IWMDeviceManager.VTable, @ptrCast(self.vtable)).EnumDevices(@as(*const IWMDeviceManager, @ptrCast(self)), pp_enum_device_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDeviceManager2_Value = Guid.initString("923e5249-8731-4c5b-9b1c-b8b60b6e46af");
pub const IID_IWMDeviceManager2 = &IID_IWMDeviceManager2_Value;
pub const IWMDeviceManager2 = extern struct {
    pub const VTable = extern struct {
        base: IWMDeviceManager.VTable,
        GetDeviceFromCanonicalName: *const fn (
            self: *const IWMDeviceManager2,
            pwsz_canonical_name: ?[*:0]const u16,
            pp_device: ?*?*IWMDMDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDevices2: *const fn (
            self: *const IWMDeviceManager2,
            pp_enum_device: ?*?*IWMDMEnumDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reinitialize: *const fn (
            self: *const IWMDeviceManager2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMDeviceManager.MethodMixin(T);
            pub inline fn getDeviceFromCanonicalName(self: *const T, pwsz_canonical_name_: ?[*:0]const u16, pp_device_: ?*?*IWMDMDevice) HRESULT {
                return @as(*const IWMDeviceManager2.VTable, @ptrCast(self.vtable)).GetDeviceFromCanonicalName(@as(*const IWMDeviceManager2, @ptrCast(self)), pwsz_canonical_name_, pp_device_);
            }
            pub inline fn enumDevices2(self: *const T, pp_enum_device_: ?*?*IWMDMEnumDevice) HRESULT {
                return @as(*const IWMDeviceManager2.VTable, @ptrCast(self.vtable)).EnumDevices2(@as(*const IWMDeviceManager2, @ptrCast(self)), pp_enum_device_);
            }
            pub inline fn reinitialize(self: *const T) HRESULT {
                return @as(*const IWMDeviceManager2.VTable, @ptrCast(self.vtable)).Reinitialize(@as(*const IWMDeviceManager2, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDeviceManager3_Value = Guid.initString("af185c41-100d-46ed-be2e-9ce8c44594ef");
pub const IID_IWMDeviceManager3 = &IID_IWMDeviceManager3_Value;
pub const IWMDeviceManager3 = extern struct {
    pub const VTable = extern struct {
        base: IWMDeviceManager2.VTable,
        SetDeviceEnumPreference: *const fn (
            self: *const IWMDeviceManager3,
            dw_enum_pref: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMDeviceManager2.MethodMixin(T);
            pub inline fn setDeviceEnumPreference(self: *const T, dw_enum_pref_: u32) HRESULT {
                return @as(*const IWMDeviceManager3.VTable, @ptrCast(self.vtable)).SetDeviceEnumPreference(@as(*const IWMDeviceManager3, @ptrCast(self)), dw_enum_pref_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMStorageGlobals_Value = Guid.initString("1dcb3a07-33ed-11d3-8470-00c04f79dbc0");
pub const IID_IWMDMStorageGlobals = &IID_IWMDMStorageGlobals_Value;
pub const IWMDMStorageGlobals = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCapabilities: *const fn (
            self: *const IWMDMStorageGlobals,
            pdw_capabilities: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSerialNumber: *const fn (
            self: *const IWMDMStorageGlobals,
            p_serial_num: ?*WMDMID,
            ab_mac: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTotalSize: *const fn (
            self: *const IWMDMStorageGlobals,
            pdw_total_size_low: ?*u32,
            pdw_total_size_high: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTotalFree: *const fn (
            self: *const IWMDMStorageGlobals,
            pdw_free_low: ?*u32,
            pdw_free_high: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTotalBad: *const fn (
            self: *const IWMDMStorageGlobals,
            pdw_bad_low: ?*u32,
            pdw_bad_high: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn (
            self: *const IWMDMStorageGlobals,
            pdw_status: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: *const fn (
            self: *const IWMDMStorageGlobals,
            fu_mode: u32,
            p_progress: ?*IWMDMProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCapabilities(self: *const T, pdw_capabilities_: ?*u32) HRESULT {
                return @as(*const IWMDMStorageGlobals.VTable, @ptrCast(self.vtable)).GetCapabilities(@as(*const IWMDMStorageGlobals, @ptrCast(self)), pdw_capabilities_);
            }
            pub inline fn getSerialNumber(self: *const T, p_serial_num_: ?*WMDMID, ab_mac_: ?*u8) HRESULT {
                return @as(*const IWMDMStorageGlobals.VTable, @ptrCast(self.vtable)).GetSerialNumber(@as(*const IWMDMStorageGlobals, @ptrCast(self)), p_serial_num_, ab_mac_);
            }
            pub inline fn getTotalSize(self: *const T, pdw_total_size_low_: ?*u32, pdw_total_size_high_: ?*u32) HRESULT {
                return @as(*const IWMDMStorageGlobals.VTable, @ptrCast(self.vtable)).GetTotalSize(@as(*const IWMDMStorageGlobals, @ptrCast(self)), pdw_total_size_low_, pdw_total_size_high_);
            }
            pub inline fn getTotalFree(self: *const T, pdw_free_low_: ?*u32, pdw_free_high_: ?*u32) HRESULT {
                return @as(*const IWMDMStorageGlobals.VTable, @ptrCast(self.vtable)).GetTotalFree(@as(*const IWMDMStorageGlobals, @ptrCast(self)), pdw_free_low_, pdw_free_high_);
            }
            pub inline fn getTotalBad(self: *const T, pdw_bad_low_: ?*u32, pdw_bad_high_: ?*u32) HRESULT {
                return @as(*const IWMDMStorageGlobals.VTable, @ptrCast(self.vtable)).GetTotalBad(@as(*const IWMDMStorageGlobals, @ptrCast(self)), pdw_bad_low_, pdw_bad_high_);
            }
            pub inline fn getStatus(self: *const T, pdw_status_: ?*u32) HRESULT {
                return @as(*const IWMDMStorageGlobals.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IWMDMStorageGlobals, @ptrCast(self)), pdw_status_);
            }
            pub inline fn initialize(self: *const T, fu_mode_: u32, p_progress_: ?*IWMDMProgress) HRESULT {
                return @as(*const IWMDMStorageGlobals.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IWMDMStorageGlobals, @ptrCast(self)), fu_mode_, p_progress_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMStorage_Value = Guid.initString("1dcb3a06-33ed-11d3-8470-00c04f79dbc0");
pub const IID_IWMDMStorage = &IID_IWMDMStorage_Value;
pub const IWMDMStorage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAttributes: *const fn (
            self: *const IWMDMStorage,
            dw_attributes: u32,
            p_format: ?*_WAVEFORMATEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStorageGlobals: *const fn (
            self: *const IWMDMStorage,
            pp_storage_globals: ?*?*IWMDMStorageGlobals,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributes: *const fn (
            self: *const IWMDMStorage,
            pdw_attributes: ?*u32,
            p_format: ?*_WAVEFORMATEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn (
            self: *const IWMDMStorage,
            pwsz_name: [*:0]u16,
            n_max_chars: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDate: *const fn (
            self: *const IWMDMStorage,
            p_date_time_u_t_c: ?*WMDMDATETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSize: *const fn (
            self: *const IWMDMStorage,
            pdw_size_low: ?*u32,
            pdw_size_high: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRights: *const fn (
            self: *const IWMDMStorage,
            pp_rights: [*]?*WMDMRIGHTS,
            pn_rights_count: ?*u32,
            ab_mac: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumStorage: *const fn (
            self: *const IWMDMStorage,
            p_enum_storage: ?*?*IWMDMEnumStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendOpaqueCommand: *const fn (
            self: *const IWMDMStorage,
            p_command: ?*OPAQUECOMMAND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAttributes(self: *const T, dw_attributes_: u32, p_format_: ?*_WAVEFORMATEX) HRESULT {
                return @as(*const IWMDMStorage.VTable, @ptrCast(self.vtable)).SetAttributes(@as(*const IWMDMStorage, @ptrCast(self)), dw_attributes_, p_format_);
            }
            pub inline fn getStorageGlobals(self: *const T, pp_storage_globals_: ?*?*IWMDMStorageGlobals) HRESULT {
                return @as(*const IWMDMStorage.VTable, @ptrCast(self.vtable)).GetStorageGlobals(@as(*const IWMDMStorage, @ptrCast(self)), pp_storage_globals_);
            }
            pub inline fn getAttributes(self: *const T, pdw_attributes_: ?*u32, p_format_: ?*_WAVEFORMATEX) HRESULT {
                return @as(*const IWMDMStorage.VTable, @ptrCast(self.vtable)).GetAttributes(@as(*const IWMDMStorage, @ptrCast(self)), pdw_attributes_, p_format_);
            }
            pub inline fn getName(self: *const T, pwsz_name_: [*:0]u16, n_max_chars_: u32) HRESULT {
                return @as(*const IWMDMStorage.VTable, @ptrCast(self.vtable)).GetName(@as(*const IWMDMStorage, @ptrCast(self)), pwsz_name_, n_max_chars_);
            }
            pub inline fn getDate(self: *const T, p_date_time_u_t_c_: ?*WMDMDATETIME) HRESULT {
                return @as(*const IWMDMStorage.VTable, @ptrCast(self.vtable)).GetDate(@as(*const IWMDMStorage, @ptrCast(self)), p_date_time_u_t_c_);
            }
            pub inline fn getSize(self: *const T, pdw_size_low_: ?*u32, pdw_size_high_: ?*u32) HRESULT {
                return @as(*const IWMDMStorage.VTable, @ptrCast(self.vtable)).GetSize(@as(*const IWMDMStorage, @ptrCast(self)), pdw_size_low_, pdw_size_high_);
            }
            pub inline fn getRights(self: *const T, pp_rights_: [*]?*WMDMRIGHTS, pn_rights_count_: ?*u32, ab_mac_: ?*u8) HRESULT {
                return @as(*const IWMDMStorage.VTable, @ptrCast(self.vtable)).GetRights(@as(*const IWMDMStorage, @ptrCast(self)), pp_rights_, pn_rights_count_, ab_mac_);
            }
            pub inline fn enumStorage(self: *const T, p_enum_storage_: ?*?*IWMDMEnumStorage) HRESULT {
                return @as(*const IWMDMStorage.VTable, @ptrCast(self.vtable)).EnumStorage(@as(*const IWMDMStorage, @ptrCast(self)), p_enum_storage_);
            }
            pub inline fn sendOpaqueCommand(self: *const T, p_command_: ?*OPAQUECOMMAND) HRESULT {
                return @as(*const IWMDMStorage.VTable, @ptrCast(self.vtable)).SendOpaqueCommand(@as(*const IWMDMStorage, @ptrCast(self)), p_command_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMStorage2_Value = Guid.initString("1ed5a144-5cd5-4683-9eff-72cbdb2d9533");
pub const IID_IWMDMStorage2 = &IID_IWMDMStorage2_Value;
pub const IWMDMStorage2 = extern struct {
    pub const VTable = extern struct {
        base: IWMDMStorage.VTable,
        GetStorage: *const fn (
            self: *const IWMDMStorage2,
            psz_storage_name: ?[*:0]const u16,
            pp_storage: ?*?*IWMDMStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAttributes2: *const fn (
            self: *const IWMDMStorage2,
            dw_attributes: u32,
            dw_attributes_ex: u32,
            p_format: ?*_WAVEFORMATEX,
            p_video_format: ?*_VIDEOINFOHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributes2: *const fn (
            self: *const IWMDMStorage2,
            pdw_attributes: ?*u32,
            pdw_attributes_ex: ?*u32,
            p_audio_format: ?*_WAVEFORMATEX,
            p_video_format: ?*_VIDEOINFOHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMDMStorage.MethodMixin(T);
            pub inline fn getStorage(self: *const T, psz_storage_name_: ?[*:0]const u16, pp_storage_: ?*?*IWMDMStorage) HRESULT {
                return @as(*const IWMDMStorage2.VTable, @ptrCast(self.vtable)).GetStorage(@as(*const IWMDMStorage2, @ptrCast(self)), psz_storage_name_, pp_storage_);
            }
            pub inline fn setAttributes2(self: *const T, dw_attributes_: u32, dw_attributes_ex_: u32, p_format_: ?*_WAVEFORMATEX, p_video_format_: ?*_VIDEOINFOHEADER) HRESULT {
                return @as(*const IWMDMStorage2.VTable, @ptrCast(self.vtable)).SetAttributes2(@as(*const IWMDMStorage2, @ptrCast(self)), dw_attributes_, dw_attributes_ex_, p_format_, p_video_format_);
            }
            pub inline fn getAttributes2(self: *const T, pdw_attributes_: ?*u32, pdw_attributes_ex_: ?*u32, p_audio_format_: ?*_WAVEFORMATEX, p_video_format_: ?*_VIDEOINFOHEADER) HRESULT {
                return @as(*const IWMDMStorage2.VTable, @ptrCast(self.vtable)).GetAttributes2(@as(*const IWMDMStorage2, @ptrCast(self)), pdw_attributes_, pdw_attributes_ex_, p_audio_format_, p_video_format_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMStorage3_Value = Guid.initString("97717eea-926a-464e-96a4-247b0216026e");
pub const IID_IWMDMStorage3 = &IID_IWMDMStorage3_Value;
pub const IWMDMStorage3 = extern struct {
    pub const VTable = extern struct {
        base: IWMDMStorage2.VTable,
        GetMetadata: *const fn (
            self: *const IWMDMStorage3,
            pp_metadata: ?*?*IWMDMMetaData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMetadata: *const fn (
            self: *const IWMDMStorage3,
            p_metadata: ?*IWMDMMetaData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEmptyMetadataObject: *const fn (
            self: *const IWMDMStorage3,
            pp_metadata: ?*?*IWMDMMetaData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnumPreference: *const fn (
            self: *const IWMDMStorage3,
            p_mode: ?*WMDM_STORAGE_ENUM_MODE,
            n_views: u32,
            p_views: ?[*]WMDMMetadataView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMDMStorage2.MethodMixin(T);
            pub inline fn getMetadata(self: *const T, pp_metadata_: ?*?*IWMDMMetaData) HRESULT {
                return @as(*const IWMDMStorage3.VTable, @ptrCast(self.vtable)).GetMetadata(@as(*const IWMDMStorage3, @ptrCast(self)), pp_metadata_);
            }
            pub inline fn setMetadata(self: *const T, p_metadata_: ?*IWMDMMetaData) HRESULT {
                return @as(*const IWMDMStorage3.VTable, @ptrCast(self.vtable)).SetMetadata(@as(*const IWMDMStorage3, @ptrCast(self)), p_metadata_);
            }
            pub inline fn createEmptyMetadataObject(self: *const T, pp_metadata_: ?*?*IWMDMMetaData) HRESULT {
                return @as(*const IWMDMStorage3.VTable, @ptrCast(self.vtable)).CreateEmptyMetadataObject(@as(*const IWMDMStorage3, @ptrCast(self)), pp_metadata_);
            }
            pub inline fn setEnumPreference(self: *const T, p_mode_: ?*WMDM_STORAGE_ENUM_MODE, n_views_: u32, p_views_: ?[*]WMDMMetadataView) HRESULT {
                return @as(*const IWMDMStorage3.VTable, @ptrCast(self.vtable)).SetEnumPreference(@as(*const IWMDMStorage3, @ptrCast(self)), p_mode_, n_views_, p_views_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMStorage4_Value = Guid.initString("c225bac5-a03a-40b8-9a23-91cf478c64a6");
pub const IID_IWMDMStorage4 = &IID_IWMDMStorage4_Value;
pub const IWMDMStorage4 = extern struct {
    pub const VTable = extern struct {
        base: IWMDMStorage3.VTable,
        SetReferences: *const fn (
            self: *const IWMDMStorage4,
            dw_refs: u32,
            pp_i_w_m_d_m_storage: ?[*]?*IWMDMStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReferences: *const fn (
            self: *const IWMDMStorage4,
            pdw_refs: ?*u32,
            ppp_i_w_m_d_m_storage: [*]?*?*IWMDMStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRightsWithProgress: *const fn (
            self: *const IWMDMStorage4,
            p_i_progress_callback: ?*IWMDMProgress3,
            pp_rights: [*]?*WMDMRIGHTS,
            pn_rights_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpecifiedMetadata: *const fn (
            self: *const IWMDMStorage4,
            c_properties: u32,
            ppwsz_prop_names: [*]?PWSTR,
            pp_metadata: ?*?*IWMDMMetaData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindStorage: *const fn (
            self: *const IWMDMStorage4,
            find_scope: WMDM_FIND_SCOPE,
            pwsz_unique_i_d: ?[*:0]const u16,
            pp_storage: ?*?*IWMDMStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParent: *const fn (
            self: *const IWMDMStorage4,
            pp_storage: ?*?*IWMDMStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMDMStorage3.MethodMixin(T);
            pub inline fn setReferences(self: *const T, dw_refs_: u32, pp_i_w_m_d_m_storage_: ?[*]?*IWMDMStorage) HRESULT {
                return @as(*const IWMDMStorage4.VTable, @ptrCast(self.vtable)).SetReferences(@as(*const IWMDMStorage4, @ptrCast(self)), dw_refs_, pp_i_w_m_d_m_storage_);
            }
            pub inline fn getReferences(self: *const T, pdw_refs_: ?*u32, ppp_i_w_m_d_m_storage_: [*]?*?*IWMDMStorage) HRESULT {
                return @as(*const IWMDMStorage4.VTable, @ptrCast(self.vtable)).GetReferences(@as(*const IWMDMStorage4, @ptrCast(self)), pdw_refs_, ppp_i_w_m_d_m_storage_);
            }
            pub inline fn getRightsWithProgress(self: *const T, p_i_progress_callback_: ?*IWMDMProgress3, pp_rights_: [*]?*WMDMRIGHTS, pn_rights_count_: ?*u32) HRESULT {
                return @as(*const IWMDMStorage4.VTable, @ptrCast(self.vtable)).GetRightsWithProgress(@as(*const IWMDMStorage4, @ptrCast(self)), p_i_progress_callback_, pp_rights_, pn_rights_count_);
            }
            pub inline fn getSpecifiedMetadata(self: *const T, c_properties_: u32, ppwsz_prop_names_: [*]?PWSTR, pp_metadata_: ?*?*IWMDMMetaData) HRESULT {
                return @as(*const IWMDMStorage4.VTable, @ptrCast(self.vtable)).GetSpecifiedMetadata(@as(*const IWMDMStorage4, @ptrCast(self)), c_properties_, ppwsz_prop_names_, pp_metadata_);
            }
            pub inline fn findStorage(self: *const T, find_scope_: WMDM_FIND_SCOPE, pwsz_unique_i_d_: ?[*:0]const u16, pp_storage_: ?*?*IWMDMStorage) HRESULT {
                return @as(*const IWMDMStorage4.VTable, @ptrCast(self.vtable)).FindStorage(@as(*const IWMDMStorage4, @ptrCast(self)), find_scope_, pwsz_unique_i_d_, pp_storage_);
            }
            pub inline fn getParent(self: *const T, pp_storage_: ?*?*IWMDMStorage) HRESULT {
                return @as(*const IWMDMStorage4.VTable, @ptrCast(self.vtable)).GetParent(@as(*const IWMDMStorage4, @ptrCast(self)), pp_storage_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMOperation_Value = Guid.initString("1dcb3a0b-33ed-11d3-8470-00c04f79dbc0");
pub const IID_IWMDMOperation = &IID_IWMDMOperation_Value;
pub const IWMDMOperation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BeginRead: *const fn (
            self: *const IWMDMOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginWrite: *const fn (
            self: *const IWMDMOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectName: *const fn (
            self: *const IWMDMOperation,
            pwsz_name: [*:0]u16,
            n_max_chars: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetObjectName: *const fn (
            self: *const IWMDMOperation,
            pwsz_name: [*:0]u16,
            n_max_chars: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectAttributes: *const fn (
            self: *const IWMDMOperation,
            pdw_attributes: ?*u32,
            p_format: ?*_WAVEFORMATEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetObjectAttributes: *const fn (
            self: *const IWMDMOperation,
            dw_attributes: u32,
            p_format: ?*_WAVEFORMATEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectTotalSize: *const fn (
            self: *const IWMDMOperation,
            pdw_size: ?*u32,
            pdw_size_high: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetObjectTotalSize: *const fn (
            self: *const IWMDMOperation,
            dw_size: u32,
            dw_size_high: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TransferObjectData: *const fn (
            self: *const IWMDMOperation,
            p_data: [*:0]u8,
            pdw_size: ?*u32,
            ab_mac: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        End: *const fn (
            self: *const IWMDMOperation,
            ph_completion_code: ?*HRESULT,
            p_new_object: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn beginRead(self: *const T) HRESULT {
                return @as(*const IWMDMOperation.VTable, @ptrCast(self.vtable)).BeginRead(@as(*const IWMDMOperation, @ptrCast(self)));
            }
            pub inline fn beginWrite(self: *const T) HRESULT {
                return @as(*const IWMDMOperation.VTable, @ptrCast(self.vtable)).BeginWrite(@as(*const IWMDMOperation, @ptrCast(self)));
            }
            pub inline fn getObjectName(self: *const T, pwsz_name_: [*:0]u16, n_max_chars_: u32) HRESULT {
                return @as(*const IWMDMOperation.VTable, @ptrCast(self.vtable)).GetObjectName(@as(*const IWMDMOperation, @ptrCast(self)), pwsz_name_, n_max_chars_);
            }
            pub inline fn setObjectName(self: *const T, pwsz_name_: [*:0]u16, n_max_chars_: u32) HRESULT {
                return @as(*const IWMDMOperation.VTable, @ptrCast(self.vtable)).SetObjectName(@as(*const IWMDMOperation, @ptrCast(self)), pwsz_name_, n_max_chars_);
            }
            pub inline fn getObjectAttributes(self: *const T, pdw_attributes_: ?*u32, p_format_: ?*_WAVEFORMATEX) HRESULT {
                return @as(*const IWMDMOperation.VTable, @ptrCast(self.vtable)).GetObjectAttributes(@as(*const IWMDMOperation, @ptrCast(self)), pdw_attributes_, p_format_);
            }
            pub inline fn setObjectAttributes(self: *const T, dw_attributes_: u32, p_format_: ?*_WAVEFORMATEX) HRESULT {
                return @as(*const IWMDMOperation.VTable, @ptrCast(self.vtable)).SetObjectAttributes(@as(*const IWMDMOperation, @ptrCast(self)), dw_attributes_, p_format_);
            }
            pub inline fn getObjectTotalSize(self: *const T, pdw_size_: ?*u32, pdw_size_high_: ?*u32) HRESULT {
                return @as(*const IWMDMOperation.VTable, @ptrCast(self.vtable)).GetObjectTotalSize(@as(*const IWMDMOperation, @ptrCast(self)), pdw_size_, pdw_size_high_);
            }
            pub inline fn setObjectTotalSize(self: *const T, dw_size_: u32, dw_size_high_: u32) HRESULT {
                return @as(*const IWMDMOperation.VTable, @ptrCast(self.vtable)).SetObjectTotalSize(@as(*const IWMDMOperation, @ptrCast(self)), dw_size_, dw_size_high_);
            }
            pub inline fn transferObjectData(self: *const T, p_data_: [*:0]u8, pdw_size_: ?*u32, ab_mac_: ?*u8) HRESULT {
                return @as(*const IWMDMOperation.VTable, @ptrCast(self.vtable)).TransferObjectData(@as(*const IWMDMOperation, @ptrCast(self)), p_data_, pdw_size_, ab_mac_);
            }
            pub inline fn end(self: *const T, ph_completion_code_: ?*HRESULT, p_new_object_: ?*IUnknown) HRESULT {
                return @as(*const IWMDMOperation.VTable, @ptrCast(self.vtable)).End(@as(*const IWMDMOperation, @ptrCast(self)), ph_completion_code_, p_new_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMOperation2_Value = Guid.initString("33445b48-7df7-425c-ad8f-0fc6d82f9f75");
pub const IID_IWMDMOperation2 = &IID_IWMDMOperation2_Value;
pub const IWMDMOperation2 = extern struct {
    pub const VTable = extern struct {
        base: IWMDMOperation.VTable,
        SetObjectAttributes2: *const fn (
            self: *const IWMDMOperation2,
            dw_attributes: u32,
            dw_attributes_ex: u32,
            p_format: ?*_WAVEFORMATEX,
            p_video_format: ?*_VIDEOINFOHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectAttributes2: *const fn (
            self: *const IWMDMOperation2,
            pdw_attributes: ?*u32,
            pdw_attributes_ex: ?*u32,
            p_audio_format: ?*_WAVEFORMATEX,
            p_video_format: ?*_VIDEOINFOHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMDMOperation.MethodMixin(T);
            pub inline fn setObjectAttributes2(self: *const T, dw_attributes_: u32, dw_attributes_ex_: u32, p_format_: ?*_WAVEFORMATEX, p_video_format_: ?*_VIDEOINFOHEADER) HRESULT {
                return @as(*const IWMDMOperation2.VTable, @ptrCast(self.vtable)).SetObjectAttributes2(@as(*const IWMDMOperation2, @ptrCast(self)), dw_attributes_, dw_attributes_ex_, p_format_, p_video_format_);
            }
            pub inline fn getObjectAttributes2(self: *const T, pdw_attributes_: ?*u32, pdw_attributes_ex_: ?*u32, p_audio_format_: ?*_WAVEFORMATEX, p_video_format_: ?*_VIDEOINFOHEADER) HRESULT {
                return @as(*const IWMDMOperation2.VTable, @ptrCast(self.vtable)).GetObjectAttributes2(@as(*const IWMDMOperation2, @ptrCast(self)), pdw_attributes_, pdw_attributes_ex_, p_audio_format_, p_video_format_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMOperation3_Value = Guid.initString("d1f9b46a-9ca8-46d8-9d0f-1ec9bae54919");
pub const IID_IWMDMOperation3 = &IID_IWMDMOperation3_Value;
pub const IWMDMOperation3 = extern struct {
    pub const VTable = extern struct {
        base: IWMDMOperation.VTable,
        TransferObjectDataOnClearChannel: *const fn (
            self: *const IWMDMOperation3,
            p_data: [*:0]u8,
            pdw_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMDMOperation.MethodMixin(T);
            pub inline fn transferObjectDataOnClearChannel(self: *const T, p_data_: [*:0]u8, pdw_size_: ?*u32) HRESULT {
                return @as(*const IWMDMOperation3.VTable, @ptrCast(self.vtable)).TransferObjectDataOnClearChannel(@as(*const IWMDMOperation3, @ptrCast(self)), p_data_, pdw_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMProgress_Value = Guid.initString("1dcb3a0c-33ed-11d3-8470-00c04f79dbc0");
pub const IID_IWMDMProgress = &IID_IWMDMProgress_Value;
pub const IWMDMProgress = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin: *const fn (
            self: *const IWMDMProgress,
            dw_estimated_ticks: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Progress: *const fn (
            self: *const IWMDMProgress,
            dw_transpired_ticks: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        End: *const fn (
            self: *const IWMDMProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn begin(self: *const T, dw_estimated_ticks_: u32) HRESULT {
                return @as(*const IWMDMProgress.VTable, @ptrCast(self.vtable)).Begin(@as(*const IWMDMProgress, @ptrCast(self)), dw_estimated_ticks_);
            }
            pub inline fn progress(self: *const T, dw_transpired_ticks_: u32) HRESULT {
                return @as(*const IWMDMProgress.VTable, @ptrCast(self.vtable)).Progress(@as(*const IWMDMProgress, @ptrCast(self)), dw_transpired_ticks_);
            }
            pub inline fn end(self: *const T) HRESULT {
                return @as(*const IWMDMProgress.VTable, @ptrCast(self.vtable)).End(@as(*const IWMDMProgress, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMProgress2_Value = Guid.initString("3a43f550-b383-4e92-b04a-e6bbc660fefc");
pub const IID_IWMDMProgress2 = &IID_IWMDMProgress2_Value;
pub const IWMDMProgress2 = extern struct {
    pub const VTable = extern struct {
        base: IWMDMProgress.VTable,
        End2: *const fn (
            self: *const IWMDMProgress2,
            hr_completion_code: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMDMProgress.MethodMixin(T);
            pub inline fn end2(self: *const T, hr_completion_code_: HRESULT) HRESULT {
                return @as(*const IWMDMProgress2.VTable, @ptrCast(self.vtable)).End2(@as(*const IWMDMProgress2, @ptrCast(self)), hr_completion_code_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMProgress3_Value = Guid.initString("21de01cb-3bb4-4929-b21a-17af3f80f658");
pub const IID_IWMDMProgress3 = &IID_IWMDMProgress3_Value;
pub const IWMDMProgress3 = extern struct {
    pub const VTable = extern struct {
        base: IWMDMProgress2.VTable,
        Begin3: *const fn (
            self: *const IWMDMProgress3,
            event_id: Guid,
            dw_estimated_ticks: u32,
            p_context: ?*OPAQUECOMMAND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Progress3: *const fn (
            self: *const IWMDMProgress3,
            event_id: Guid,
            dw_transpired_ticks: u32,
            p_context: ?*OPAQUECOMMAND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        End3: *const fn (
            self: *const IWMDMProgress3,
            event_id: Guid,
            hr_completion_code: HRESULT,
            p_context: ?*OPAQUECOMMAND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMDMProgress2.MethodMixin(T);
            pub inline fn begin3(self: *const T, event_id_: Guid, dw_estimated_ticks_: u32, p_context_: ?*OPAQUECOMMAND) HRESULT {
                return @as(*const IWMDMProgress3.VTable, @ptrCast(self.vtable)).Begin3(@as(*const IWMDMProgress3, @ptrCast(self)), event_id_, dw_estimated_ticks_, p_context_);
            }
            pub inline fn progress3(self: *const T, event_id_: Guid, dw_transpired_ticks_: u32, p_context_: ?*OPAQUECOMMAND) HRESULT {
                return @as(*const IWMDMProgress3.VTable, @ptrCast(self.vtable)).Progress3(@as(*const IWMDMProgress3, @ptrCast(self)), event_id_, dw_transpired_ticks_, p_context_);
            }
            pub inline fn end3(self: *const T, event_id_: Guid, hr_completion_code_: HRESULT, p_context_: ?*OPAQUECOMMAND) HRESULT {
                return @as(*const IWMDMProgress3.VTable, @ptrCast(self.vtable)).End3(@as(*const IWMDMProgress3, @ptrCast(self)), event_id_, hr_completion_code_, p_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMDevice_Value = Guid.initString("1dcb3a02-33ed-11d3-8470-00c04f79dbc0");
pub const IID_IWMDMDevice = &IID_IWMDMDevice_Value;
pub const IWMDMDevice = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetName: *const fn (
            self: *const IWMDMDevice,
            pwsz_name: [*:0]u16,
            n_max_chars: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetManufacturer: *const fn (
            self: *const IWMDMDevice,
            pwsz_name: [*:0]u16,
            n_max_chars: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVersion: *const fn (
            self: *const IWMDMDevice,
            pdw_version: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: *const fn (
            self: *const IWMDMDevice,
            pdw_type: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSerialNumber: *const fn (
            self: *const IWMDMDevice,
            p_serial_number: ?*WMDMID,
            ab_mac: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPowerSource: *const fn (
            self: *const IWMDMDevice,
            pdw_power_source: ?*u32,
            pdw_percent_remaining: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn (
            self: *const IWMDMDevice,
            pdw_status: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceIcon: *const fn (
            self: *const IWMDMDevice,
            h_icon: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumStorage: *const fn (
            self: *const IWMDMDevice,
            pp_enum_storage: ?*?*IWMDMEnumStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormatSupport: *const fn (
            self: *const IWMDMDevice,
            pp_format_ex: [*]?*_WAVEFORMATEX,
            pn_format_count: ?*u32,
            pppwsz_mime_type: [*]?*?PWSTR,
            pn_mime_type_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendOpaqueCommand: *const fn (
            self: *const IWMDMDevice,
            p_command: ?*OPAQUECOMMAND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getName(self: *const T, pwsz_name_: [*:0]u16, n_max_chars_: u32) HRESULT {
                return @as(*const IWMDMDevice.VTable, @ptrCast(self.vtable)).GetName(@as(*const IWMDMDevice, @ptrCast(self)), pwsz_name_, n_max_chars_);
            }
            pub inline fn getManufacturer(self: *const T, pwsz_name_: [*:0]u16, n_max_chars_: u32) HRESULT {
                return @as(*const IWMDMDevice.VTable, @ptrCast(self.vtable)).GetManufacturer(@as(*const IWMDMDevice, @ptrCast(self)), pwsz_name_, n_max_chars_);
            }
            pub inline fn getVersion(self: *const T, pdw_version_: ?*u32) HRESULT {
                return @as(*const IWMDMDevice.VTable, @ptrCast(self.vtable)).GetVersion(@as(*const IWMDMDevice, @ptrCast(self)), pdw_version_);
            }
            pub inline fn getType(self: *const T, pdw_type_: ?*u32) HRESULT {
                return @as(*const IWMDMDevice.VTable, @ptrCast(self.vtable)).GetType(@as(*const IWMDMDevice, @ptrCast(self)), pdw_type_);
            }
            pub inline fn getSerialNumber(self: *const T, p_serial_number_: ?*WMDMID, ab_mac_: ?*u8) HRESULT {
                return @as(*const IWMDMDevice.VTable, @ptrCast(self.vtable)).GetSerialNumber(@as(*const IWMDMDevice, @ptrCast(self)), p_serial_number_, ab_mac_);
            }
            pub inline fn getPowerSource(self: *const T, pdw_power_source_: ?*u32, pdw_percent_remaining_: ?*u32) HRESULT {
                return @as(*const IWMDMDevice.VTable, @ptrCast(self.vtable)).GetPowerSource(@as(*const IWMDMDevice, @ptrCast(self)), pdw_power_source_, pdw_percent_remaining_);
            }
            pub inline fn getStatus(self: *const T, pdw_status_: ?*u32) HRESULT {
                return @as(*const IWMDMDevice.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IWMDMDevice, @ptrCast(self)), pdw_status_);
            }
            pub inline fn getDeviceIcon(self: *const T, h_icon_: ?*u32) HRESULT {
                return @as(*const IWMDMDevice.VTable, @ptrCast(self.vtable)).GetDeviceIcon(@as(*const IWMDMDevice, @ptrCast(self)), h_icon_);
            }
            pub inline fn enumStorage(self: *const T, pp_enum_storage_: ?*?*IWMDMEnumStorage) HRESULT {
                return @as(*const IWMDMDevice.VTable, @ptrCast(self.vtable)).EnumStorage(@as(*const IWMDMDevice, @ptrCast(self)), pp_enum_storage_);
            }
            pub inline fn getFormatSupport(self: *const T, pp_format_ex_: [*]?*_WAVEFORMATEX, pn_format_count_: ?*u32, pppwsz_mime_type_: [*]?*?PWSTR, pn_mime_type_count_: ?*u32) HRESULT {
                return @as(*const IWMDMDevice.VTable, @ptrCast(self.vtable)).GetFormatSupport(@as(*const IWMDMDevice, @ptrCast(self)), pp_format_ex_, pn_format_count_, pppwsz_mime_type_, pn_mime_type_count_);
            }
            pub inline fn sendOpaqueCommand(self: *const T, p_command_: ?*OPAQUECOMMAND) HRESULT {
                return @as(*const IWMDMDevice.VTable, @ptrCast(self.vtable)).SendOpaqueCommand(@as(*const IWMDMDevice, @ptrCast(self)), p_command_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMDevice2_Value = Guid.initString("e34f3d37-9d67-4fc1-9252-62d28b2f8b55");
pub const IID_IWMDMDevice2 = &IID_IWMDMDevice2_Value;
pub const IWMDMDevice2 = extern struct {
    pub const VTable = extern struct {
        base: IWMDMDevice.VTable,
        GetStorage: *const fn (
            self: *const IWMDMDevice2,
            psz_storage_name: ?[*:0]const u16,
            pp_storage: ?*?*IWMDMStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormatSupport2: *const fn (
            self: *const IWMDMDevice2,
            dw_flags: u32,
            pp_audio_format_ex: [*]?*_WAVEFORMATEX,
            pn_audio_format_count: ?*u32,
            pp_video_format_ex: [*]?*_VIDEOINFOHEADER,
            pn_video_format_count: ?*u32,
            pp_file_type: [*]?*WMFILECAPABILITIES,
            pn_file_type_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpecifyPropertyPages: *const fn (
            self: *const IWMDMDevice2,
            pp_specify_prop_pages: ?*?*ISpecifyPropertyPages,
            ppp_unknowns: [*]?*?*IUnknown,
            pc_unks: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCanonicalName: *const fn (
            self: *const IWMDMDevice2,
            pwsz_pn_p_name: [*:0]u16,
            n_max_chars: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMDMDevice.MethodMixin(T);
            pub inline fn getStorage(self: *const T, psz_storage_name_: ?[*:0]const u16, pp_storage_: ?*?*IWMDMStorage) HRESULT {
                return @as(*const IWMDMDevice2.VTable, @ptrCast(self.vtable)).GetStorage(@as(*const IWMDMDevice2, @ptrCast(self)), psz_storage_name_, pp_storage_);
            }
            pub inline fn getFormatSupport2(self: *const T, dw_flags_: u32, pp_audio_format_ex_: [*]?*_WAVEFORMATEX, pn_audio_format_count_: ?*u32, pp_video_format_ex_: [*]?*_VIDEOINFOHEADER, pn_video_format_count_: ?*u32, pp_file_type_: [*]?*WMFILECAPABILITIES, pn_file_type_count_: ?*u32) HRESULT {
                return @as(*const IWMDMDevice2.VTable, @ptrCast(self.vtable)).GetFormatSupport2(@as(*const IWMDMDevice2, @ptrCast(self)), dw_flags_, pp_audio_format_ex_, pn_audio_format_count_, pp_video_format_ex_, pn_video_format_count_, pp_file_type_, pn_file_type_count_);
            }
            pub inline fn getSpecifyPropertyPages(self: *const T, pp_specify_prop_pages_: ?*?*ISpecifyPropertyPages, ppp_unknowns_: [*]?*?*IUnknown, pc_unks_: ?*u32) HRESULT {
                return @as(*const IWMDMDevice2.VTable, @ptrCast(self.vtable)).GetSpecifyPropertyPages(@as(*const IWMDMDevice2, @ptrCast(self)), pp_specify_prop_pages_, ppp_unknowns_, pc_unks_);
            }
            pub inline fn getCanonicalName(self: *const T, pwsz_pn_p_name_: [*:0]u16, n_max_chars_: u32) HRESULT {
                return @as(*const IWMDMDevice2.VTable, @ptrCast(self.vtable)).GetCanonicalName(@as(*const IWMDMDevice2, @ptrCast(self)), pwsz_pn_p_name_, n_max_chars_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMDevice3_Value = Guid.initString("6c03e4fe-05db-4dda-9e3c-06233a6d5d65");
pub const IID_IWMDMDevice3 = &IID_IWMDMDevice3_Value;
pub const IWMDMDevice3 = extern struct {
    pub const VTable = extern struct {
        base: IWMDMDevice2.VTable,
        GetProperty: *const fn (
            self: *const IWMDMDevice3,
            pwsz_prop_name: ?[*:0]const u16,
            p_value: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn (
            self: *const IWMDMDevice3,
            pwsz_prop_name: ?[*:0]const u16,
            p_value: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormatCapability: *const fn (
            self: *const IWMDMDevice3,
            format: WMDM_FORMATCODE,
            p_format_support: ?*WMDM_FORMAT_CAPABILITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeviceIoControl: *const fn (
            self: *const IWMDMDevice3,
            dw_io_control_code: u32,
            lp_in_buffer: [*:0]u8,
            n_in_buffer_size: u32,
            lp_out_buffer: [*:0]u8,
            pn_out_buffer_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindStorage: *const fn (
            self: *const IWMDMDevice3,
            find_scope: WMDM_FIND_SCOPE,
            pwsz_unique_i_d: ?[*:0]const u16,
            pp_storage: ?*?*IWMDMStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMDMDevice2.MethodMixin(T);
            pub inline fn getProperty(self: *const T, pwsz_prop_name_: ?[*:0]const u16, p_value_: ?*PROPVARIANT) HRESULT {
                return @as(*const IWMDMDevice3.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IWMDMDevice3, @ptrCast(self)), pwsz_prop_name_, p_value_);
            }
            pub inline fn setProperty(self: *const T, pwsz_prop_name_: ?[*:0]const u16, p_value_: ?*const PROPVARIANT) HRESULT {
                return @as(*const IWMDMDevice3.VTable, @ptrCast(self.vtable)).SetProperty(@as(*const IWMDMDevice3, @ptrCast(self)), pwsz_prop_name_, p_value_);
            }
            pub inline fn getFormatCapability(self: *const T, format_: WMDM_FORMATCODE, p_format_support_: ?*WMDM_FORMAT_CAPABILITY) HRESULT {
                return @as(*const IWMDMDevice3.VTable, @ptrCast(self.vtable)).GetFormatCapability(@as(*const IWMDMDevice3, @ptrCast(self)), format_, p_format_support_);
            }
            pub inline fn deviceIoControl(self: *const T, dw_io_control_code_: u32, lp_in_buffer_: [*:0]u8, n_in_buffer_size_: u32, lp_out_buffer_: [*:0]u8, pn_out_buffer_size_: ?*u32) HRESULT {
                return @as(*const IWMDMDevice3.VTable, @ptrCast(self.vtable)).DeviceIoControl(@as(*const IWMDMDevice3, @ptrCast(self)), dw_io_control_code_, lp_in_buffer_, n_in_buffer_size_, lp_out_buffer_, pn_out_buffer_size_);
            }
            pub inline fn findStorage(self: *const T, find_scope_: WMDM_FIND_SCOPE, pwsz_unique_i_d_: ?[*:0]const u16, pp_storage_: ?*?*IWMDMStorage) HRESULT {
                return @as(*const IWMDMDevice3.VTable, @ptrCast(self.vtable)).FindStorage(@as(*const IWMDMDevice3, @ptrCast(self)), find_scope_, pwsz_unique_i_d_, pp_storage_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMDeviceSession_Value = Guid.initString("82af0a65-9d96-412c-83e5-3c43e4b06cc7");
pub const IID_IWMDMDeviceSession = &IID_IWMDMDeviceSession_Value;
pub const IWMDMDeviceSession = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BeginSession: *const fn (
            self: *const IWMDMDeviceSession,
            type: WMDM_SESSION_TYPE,
            p_ctx: ?[*:0]u8,
            dw_size_ctx: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndSession: *const fn (
            self: *const IWMDMDeviceSession,
            type: WMDM_SESSION_TYPE,
            p_ctx: ?[*:0]u8,
            dw_size_ctx: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn beginSession(self: *const T, type_: WMDM_SESSION_TYPE, p_ctx_: ?[*:0]u8, dw_size_ctx_: u32) HRESULT {
                return @as(*const IWMDMDeviceSession.VTable, @ptrCast(self.vtable)).BeginSession(@as(*const IWMDMDeviceSession, @ptrCast(self)), type_, p_ctx_, dw_size_ctx_);
            }
            pub inline fn endSession(self: *const T, type_: WMDM_SESSION_TYPE, p_ctx_: ?[*:0]u8, dw_size_ctx_: u32) HRESULT {
                return @as(*const IWMDMDeviceSession.VTable, @ptrCast(self.vtable)).EndSession(@as(*const IWMDMDeviceSession, @ptrCast(self)), type_, p_ctx_, dw_size_ctx_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMEnumDevice_Value = Guid.initString("1dcb3a01-33ed-11d3-8470-00c04f79dbc0");
pub const IID_IWMDMEnumDevice = &IID_IWMDMEnumDevice_Value;
pub const IWMDMEnumDevice = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IWMDMEnumDevice,
            celt: u32,
            pp_device: [*]?*IWMDMDevice,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IWMDMEnumDevice,
            celt: u32,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IWMDMEnumDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IWMDMEnumDevice,
            pp_enum_device: ?*?*IWMDMEnumDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_device_: [*]?*IWMDMDevice, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IWMDMEnumDevice.VTable, @ptrCast(self.vtable)).Next(@as(*const IWMDMEnumDevice, @ptrCast(self)), celt_, pp_device_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IWMDMEnumDevice.VTable, @ptrCast(self.vtable)).Skip(@as(*const IWMDMEnumDevice, @ptrCast(self)), celt_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IWMDMEnumDevice.VTable, @ptrCast(self.vtable)).Reset(@as(*const IWMDMEnumDevice, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, pp_enum_device_: ?*?*IWMDMEnumDevice) HRESULT {
                return @as(*const IWMDMEnumDevice.VTable, @ptrCast(self.vtable)).Clone(@as(*const IWMDMEnumDevice, @ptrCast(self)), pp_enum_device_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMDeviceControl_Value = Guid.initString("1dcb3a04-33ed-11d3-8470-00c04f79dbc0");
pub const IID_IWMDMDeviceControl = &IID_IWMDMDeviceControl_Value;
pub const IWMDMDeviceControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetStatus: *const fn (
            self: *const IWMDMDeviceControl,
            pdw_status: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCapabilities: *const fn (
            self: *const IWMDMDeviceControl,
            pdw_capabilities_mask: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Play: *const fn (
            self: *const IWMDMDeviceControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Record: *const fn (
            self: *const IWMDMDeviceControl,
            p_format: ?*_WAVEFORMATEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pause: *const fn (
            self: *const IWMDMDeviceControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: *const fn (
            self: *const IWMDMDeviceControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const IWMDMDeviceControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Seek: *const fn (
            self: *const IWMDMDeviceControl,
            fu_mode: u32,
            n_offset: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getStatus(self: *const T, pdw_status_: ?*u32) HRESULT {
                return @as(*const IWMDMDeviceControl.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IWMDMDeviceControl, @ptrCast(self)), pdw_status_);
            }
            pub inline fn getCapabilities(self: *const T, pdw_capabilities_mask_: ?*u32) HRESULT {
                return @as(*const IWMDMDeviceControl.VTable, @ptrCast(self.vtable)).GetCapabilities(@as(*const IWMDMDeviceControl, @ptrCast(self)), pdw_capabilities_mask_);
            }
            pub inline fn play(self: *const T) HRESULT {
                return @as(*const IWMDMDeviceControl.VTable, @ptrCast(self.vtable)).Play(@as(*const IWMDMDeviceControl, @ptrCast(self)));
            }
            pub inline fn record(self: *const T, p_format_: ?*_WAVEFORMATEX) HRESULT {
                return @as(*const IWMDMDeviceControl.VTable, @ptrCast(self.vtable)).Record(@as(*const IWMDMDeviceControl, @ptrCast(self)), p_format_);
            }
            pub inline fn pause(self: *const T) HRESULT {
                return @as(*const IWMDMDeviceControl.VTable, @ptrCast(self.vtable)).Pause(@as(*const IWMDMDeviceControl, @ptrCast(self)));
            }
            pub inline fn @"resume"(self: *const T) HRESULT {
                return @as(*const IWMDMDeviceControl.VTable, @ptrCast(self.vtable)).Resume(@as(*const IWMDMDeviceControl, @ptrCast(self)));
            }
            pub inline fn stop(self: *const T) HRESULT {
                return @as(*const IWMDMDeviceControl.VTable, @ptrCast(self.vtable)).Stop(@as(*const IWMDMDeviceControl, @ptrCast(self)));
            }
            pub inline fn seek(self: *const T, fu_mode_: u32, n_offset_: i32) HRESULT {
                return @as(*const IWMDMDeviceControl.VTable, @ptrCast(self.vtable)).Seek(@as(*const IWMDMDeviceControl, @ptrCast(self)), fu_mode_, n_offset_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMEnumStorage_Value = Guid.initString("1dcb3a05-33ed-11d3-8470-00c04f79dbc0");
pub const IID_IWMDMEnumStorage = &IID_IWMDMEnumStorage_Value;
pub const IWMDMEnumStorage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IWMDMEnumStorage,
            celt: u32,
            pp_storage: [*]?*IWMDMStorage,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IWMDMEnumStorage,
            celt: u32,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IWMDMEnumStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IWMDMEnumStorage,
            pp_enum_storage: ?*?*IWMDMEnumStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_storage_: [*]?*IWMDMStorage, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IWMDMEnumStorage.VTable, @ptrCast(self.vtable)).Next(@as(*const IWMDMEnumStorage, @ptrCast(self)), celt_, pp_storage_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IWMDMEnumStorage.VTable, @ptrCast(self.vtable)).Skip(@as(*const IWMDMEnumStorage, @ptrCast(self)), celt_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IWMDMEnumStorage.VTable, @ptrCast(self.vtable)).Reset(@as(*const IWMDMEnumStorage, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, pp_enum_storage_: ?*?*IWMDMEnumStorage) HRESULT {
                return @as(*const IWMDMEnumStorage.VTable, @ptrCast(self.vtable)).Clone(@as(*const IWMDMEnumStorage, @ptrCast(self)), pp_enum_storage_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMStorageControl_Value = Guid.initString("1dcb3a08-33ed-11d3-8470-00c04f79dbc0");
pub const IID_IWMDMStorageControl = &IID_IWMDMStorageControl_Value;
pub const IWMDMStorageControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Insert: *const fn (
            self: *const IWMDMStorageControl,
            fu_mode: u32,
            pwsz_file: ?PWSTR,
            p_operation: ?*IWMDMOperation,
            p_progress: ?*IWMDMProgress,
            pp_new_object: ?*?*IWMDMStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IWMDMStorageControl,
            fu_mode: u32,
            p_progress: ?*IWMDMProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Rename: *const fn (
            self: *const IWMDMStorageControl,
            fu_mode: u32,
            pwsz_new_name: ?PWSTR,
            p_progress: ?*IWMDMProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Read: *const fn (
            self: *const IWMDMStorageControl,
            fu_mode: u32,
            pwsz_file: ?PWSTR,
            p_progress: ?*IWMDMProgress,
            p_operation: ?*IWMDMOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Move: *const fn (
            self: *const IWMDMStorageControl,
            fu_mode: u32,
            p_target_object: ?*IWMDMStorage,
            p_progress: ?*IWMDMProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn insert(self: *const T, fu_mode_: u32, pwsz_file_: ?PWSTR, p_operation_: ?*IWMDMOperation, p_progress_: ?*IWMDMProgress, pp_new_object_: ?*?*IWMDMStorage) HRESULT {
                return @as(*const IWMDMStorageControl.VTable, @ptrCast(self.vtable)).Insert(@as(*const IWMDMStorageControl, @ptrCast(self)), fu_mode_, pwsz_file_, p_operation_, p_progress_, pp_new_object_);
            }
            pub inline fn delete(self: *const T, fu_mode_: u32, p_progress_: ?*IWMDMProgress) HRESULT {
                return @as(*const IWMDMStorageControl.VTable, @ptrCast(self.vtable)).Delete(@as(*const IWMDMStorageControl, @ptrCast(self)), fu_mode_, p_progress_);
            }
            pub inline fn rename(self: *const T, fu_mode_: u32, pwsz_new_name_: ?PWSTR, p_progress_: ?*IWMDMProgress) HRESULT {
                return @as(*const IWMDMStorageControl.VTable, @ptrCast(self.vtable)).Rename(@as(*const IWMDMStorageControl, @ptrCast(self)), fu_mode_, pwsz_new_name_, p_progress_);
            }
            pub inline fn read(self: *const T, fu_mode_: u32, pwsz_file_: ?PWSTR, p_progress_: ?*IWMDMProgress, p_operation_: ?*IWMDMOperation) HRESULT {
                return @as(*const IWMDMStorageControl.VTable, @ptrCast(self.vtable)).Read(@as(*const IWMDMStorageControl, @ptrCast(self)), fu_mode_, pwsz_file_, p_progress_, p_operation_);
            }
            pub inline fn move(self: *const T, fu_mode_: u32, p_target_object_: ?*IWMDMStorage, p_progress_: ?*IWMDMProgress) HRESULT {
                return @as(*const IWMDMStorageControl.VTable, @ptrCast(self.vtable)).Move(@as(*const IWMDMStorageControl, @ptrCast(self)), fu_mode_, p_target_object_, p_progress_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMStorageControl2_Value = Guid.initString("972c2e88-bd6c-4125-8e09-84f837e637b6");
pub const IID_IWMDMStorageControl2 = &IID_IWMDMStorageControl2_Value;
pub const IWMDMStorageControl2 = extern struct {
    pub const VTable = extern struct {
        base: IWMDMStorageControl.VTable,
        Insert2: *const fn (
            self: *const IWMDMStorageControl2,
            fu_mode: u32,
            pwsz_file_source: ?PWSTR,
            pwsz_file_dest: ?PWSTR,
            p_operation: ?*IWMDMOperation,
            p_progress: ?*IWMDMProgress,
            p_unknown: ?*IUnknown,
            pp_new_object: ?*?*IWMDMStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMDMStorageControl.MethodMixin(T);
            pub inline fn insert2(self: *const T, fu_mode_: u32, pwsz_file_source_: ?PWSTR, pwsz_file_dest_: ?PWSTR, p_operation_: ?*IWMDMOperation, p_progress_: ?*IWMDMProgress, p_unknown_: ?*IUnknown, pp_new_object_: ?*?*IWMDMStorage) HRESULT {
                return @as(*const IWMDMStorageControl2.VTable, @ptrCast(self.vtable)).Insert2(@as(*const IWMDMStorageControl2, @ptrCast(self)), fu_mode_, pwsz_file_source_, pwsz_file_dest_, p_operation_, p_progress_, p_unknown_, pp_new_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMStorageControl3_Value = Guid.initString("b3266365-d4f3-4696-8d53-bd27ec60993a");
pub const IID_IWMDMStorageControl3 = &IID_IWMDMStorageControl3_Value;
pub const IWMDMStorageControl3 = extern struct {
    pub const VTable = extern struct {
        base: IWMDMStorageControl2.VTable,
        Insert3: *const fn (
            self: *const IWMDMStorageControl3,
            fu_mode: u32,
            fu_type: u32,
            pwsz_file_source: ?PWSTR,
            pwsz_file_dest: ?PWSTR,
            p_operation: ?*IWMDMOperation,
            p_progress: ?*IWMDMProgress,
            p_meta_data: ?*IWMDMMetaData,
            p_unknown: ?*IUnknown,
            pp_new_object: ?*?*IWMDMStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMDMStorageControl2.MethodMixin(T);
            pub inline fn insert3(self: *const T, fu_mode_: u32, fu_type_: u32, pwsz_file_source_: ?PWSTR, pwsz_file_dest_: ?PWSTR, p_operation_: ?*IWMDMOperation, p_progress_: ?*IWMDMProgress, p_meta_data_: ?*IWMDMMetaData, p_unknown_: ?*IUnknown, pp_new_object_: ?*?*IWMDMStorage) HRESULT {
                return @as(*const IWMDMStorageControl3.VTable, @ptrCast(self.vtable)).Insert3(@as(*const IWMDMStorageControl3, @ptrCast(self)), fu_mode_, fu_type_, pwsz_file_source_, pwsz_file_dest_, p_operation_, p_progress_, p_meta_data_, p_unknown_, pp_new_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMObjectInfo_Value = Guid.initString("1dcb3a09-33ed-11d3-8470-00c04f79dbc0");
pub const IID_IWMDMObjectInfo = &IID_IWMDMObjectInfo_Value;
pub const IWMDMObjectInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPlayLength: *const fn (
            self: *const IWMDMObjectInfo,
            pdw_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPlayLength: *const fn (
            self: *const IWMDMObjectInfo,
            dw_length: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPlayOffset: *const fn (
            self: *const IWMDMObjectInfo,
            pdw_offset: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPlayOffset: *const fn (
            self: *const IWMDMObjectInfo,
            dw_offset: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTotalLength: *const fn (
            self: *const IWMDMObjectInfo,
            pdw_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastPlayPosition: *const fn (
            self: *const IWMDMObjectInfo,
            pdw_last_pos: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLongestPlayPosition: *const fn (
            self: *const IWMDMObjectInfo,
            pdw_longest_pos: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPlayLength(self: *const T, pdw_length_: ?*u32) HRESULT {
                return @as(*const IWMDMObjectInfo.VTable, @ptrCast(self.vtable)).GetPlayLength(@as(*const IWMDMObjectInfo, @ptrCast(self)), pdw_length_);
            }
            pub inline fn setPlayLength(self: *const T, dw_length_: u32) HRESULT {
                return @as(*const IWMDMObjectInfo.VTable, @ptrCast(self.vtable)).SetPlayLength(@as(*const IWMDMObjectInfo, @ptrCast(self)), dw_length_);
            }
            pub inline fn getPlayOffset(self: *const T, pdw_offset_: ?*u32) HRESULT {
                return @as(*const IWMDMObjectInfo.VTable, @ptrCast(self.vtable)).GetPlayOffset(@as(*const IWMDMObjectInfo, @ptrCast(self)), pdw_offset_);
            }
            pub inline fn setPlayOffset(self: *const T, dw_offset_: u32) HRESULT {
                return @as(*const IWMDMObjectInfo.VTable, @ptrCast(self.vtable)).SetPlayOffset(@as(*const IWMDMObjectInfo, @ptrCast(self)), dw_offset_);
            }
            pub inline fn getTotalLength(self: *const T, pdw_length_: ?*u32) HRESULT {
                return @as(*const IWMDMObjectInfo.VTable, @ptrCast(self.vtable)).GetTotalLength(@as(*const IWMDMObjectInfo, @ptrCast(self)), pdw_length_);
            }
            pub inline fn getLastPlayPosition(self: *const T, pdw_last_pos_: ?*u32) HRESULT {
                return @as(*const IWMDMObjectInfo.VTable, @ptrCast(self.vtable)).GetLastPlayPosition(@as(*const IWMDMObjectInfo, @ptrCast(self)), pdw_last_pos_);
            }
            pub inline fn getLongestPlayPosition(self: *const T, pdw_longest_pos_: ?*u32) HRESULT {
                return @as(*const IWMDMObjectInfo.VTable, @ptrCast(self.vtable)).GetLongestPlayPosition(@as(*const IWMDMObjectInfo, @ptrCast(self)), pdw_longest_pos_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMRevoked_Value = Guid.initString("ebeccedb-88ee-4e55-b6a4-8d9f07d696aa");
pub const IID_IWMDMRevoked = &IID_IWMDMRevoked_Value;
pub const IWMDMRevoked = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRevocationURL: *const fn (
            self: *const IWMDMRevoked,
            ppwsz_revocation_u_r_l: [*]?PWSTR,
            pdw_buffer_len: ?*u32,
            pdw_revoked_bit_flag: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getRevocationURL(self: *const T, ppwsz_revocation_u_r_l_: [*]?PWSTR, pdw_buffer_len_: ?*u32, pdw_revoked_bit_flag_: ?*u32) HRESULT {
                return @as(*const IWMDMRevoked.VTable, @ptrCast(self.vtable)).GetRevocationURL(@as(*const IWMDMRevoked, @ptrCast(self)), ppwsz_revocation_u_r_l_, pdw_buffer_len_, pdw_revoked_bit_flag_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDMNotification_Value = Guid.initString("3f5e95c0-0f43-4ed4-93d2-c89a45d59b81");
pub const IID_IWMDMNotification = &IID_IWMDMNotification_Value;
pub const IWMDMNotification = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        WMDMMessage: *const fn (
            self: *const IWMDMNotification,
            dw_message_type: u32,
            pwsz_canonical_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn wmdmMessage(self: *const T, dw_message_type_: u32, pwsz_canonical_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IWMDMNotification.VTable, @ptrCast(self.vtable)).WMDMMessage(@as(*const IWMDMNotification, @ptrCast(self)), dw_message_type_, pwsz_canonical_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WMDMDetermineMaxPropStringLen = extern union {
    sz001: [27]u16,
    sz002: [31]u16,
    sz003: [14]u16,
    sz004: [16]u16,
    sz005: [22]u16,
    sz006: [14]u16,
    sz007: [20]u16,
    sz008: [20]u16,
    sz009: [22]u16,
    sz010: [11]u16,
    sz011: [12]u16,
    sz012: [17]u16,
    sz013: [17]u16,
    sz014: [16]u16,
    sz015: [17]u16,
    sz016: [11]u16,
    sz017: [11]u16,
    sz018: [15]u16,
    sz019: [22]u16,
    sz020: [20]u16,
    sz021: [22]u16,
    sz022: [21]u16,
    sz023: [24]u16,
    sz024: [20]u16,
    sz025: [10]u16,
    sz026: [14]u16,
    sz027: [11]u16,
    sz028: [11]u16,
    sz029: [13]u16,
    sz030: [17]u16,
    sz031: [16]u16,
    sz032: [17]u16,
    sz033: [20]u16,
    sz034: [19]u16,
    sz035: [18]u16,
    sz036: [18]u16,
    sz037: [15]u16,
    sz041: [14]u16,
    sz043: [22]u16,
    sz044: [16]u16,
    sz045: [20]u16,
    sz046: [14]u16,
    sz047: [14]u16,
    sz048: [12]u16,
    sz049: [25]u16,
    sz050: [26]u16,
    sz051: [25]u16,
    sz052: [16]u16,
    sz053: [24]u16,
    sz054: [15]u16,
    sz055: [21]u16,
    sz056: [16]u16,
    sz057: [22]u16,
    sz058: [14]u16,
    sz059: [25]u16,
    sz060: [18]u16,
    sz061: [22]u16,
    sz062: [26]u16,
    sz063: [36]u16,
    sz064: [23]u16,
    sz065: [12]u16,
    sz066: [24]u16,
    sz067: [11]u16,
    sz068: [12]u16,
    sz069: [14]u16,
    sz070: [20]u16,
    sz071: [15]u16,
    sz072: [14]u16,
    sz073: [31]u16,
    sz074: [24]u16,
    sz075: [22]u16,
    sz076: [24]u16,
    sz077: [21]u16,
    sz078: [27]u16,
    sz079: [27]u16,
    sz080: [20]u16,
    sz081: [33]u16,
    sz082: [21]u16,
    sz083: [32]u16,
    sz084: [26]u16,
    sz085: [18]u16,
    sz086: [30]u16,
};

const IID_IMDServiceProvider_Value = Guid.initString("1dcb3a10-33ed-11d3-8470-00c04f79dbc0");
pub const IID_IMDServiceProvider = &IID_IMDServiceProvider_Value;
pub const IMDServiceProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDeviceCount: *const fn (
            self: *const IMDServiceProvider,
            pdw_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumDevices: *const fn (
            self: *const IMDServiceProvider,
            pp_enum_device: ?*?*IMDSPEnumDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDeviceCount(self: *const T, pdw_count_: ?*u32) HRESULT {
                return @as(*const IMDServiceProvider.VTable, @ptrCast(self.vtable)).GetDeviceCount(@as(*const IMDServiceProvider, @ptrCast(self)), pdw_count_);
            }
            pub inline fn enumDevices(self: *const T, pp_enum_device_: ?*?*IMDSPEnumDevice) HRESULT {
                return @as(*const IMDServiceProvider.VTable, @ptrCast(self.vtable)).EnumDevices(@as(*const IMDServiceProvider, @ptrCast(self)), pp_enum_device_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMDServiceProvider2_Value = Guid.initString("b2fa24b7-cda3-4694-9862-413ae1a34819");
pub const IID_IMDServiceProvider2 = &IID_IMDServiceProvider2_Value;
pub const IMDServiceProvider2 = extern struct {
    pub const VTable = extern struct {
        base: IMDServiceProvider.VTable,
        CreateDevice: *const fn (
            self: *const IMDServiceProvider2,
            pwsz_device_path: ?[*:0]const u16,
            pdw_count: ?*u32,
            ppp_device_array: [*]?*?*IMDSPDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IMDServiceProvider.MethodMixin(T);
            pub inline fn createDevice(self: *const T, pwsz_device_path_: ?[*:0]const u16, pdw_count_: ?*u32, ppp_device_array_: [*]?*?*IMDSPDevice) HRESULT {
                return @as(*const IMDServiceProvider2.VTable, @ptrCast(self.vtable)).CreateDevice(@as(*const IMDServiceProvider2, @ptrCast(self)), pwsz_device_path_, pdw_count_, ppp_device_array_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMDServiceProvider3_Value = Guid.initString("4ed13ef3-a971-4d19-9f51-0e1826b2da57");
pub const IID_IMDServiceProvider3 = &IID_IMDServiceProvider3_Value;
pub const IMDServiceProvider3 = extern struct {
    pub const VTable = extern struct {
        base: IMDServiceProvider2.VTable,
        SetDeviceEnumPreference: *const fn (
            self: *const IMDServiceProvider3,
            dw_enum_pref: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IMDServiceProvider2.MethodMixin(T);
            pub inline fn setDeviceEnumPreference(self: *const T, dw_enum_pref_: u32) HRESULT {
                return @as(*const IMDServiceProvider3.VTable, @ptrCast(self.vtable)).SetDeviceEnumPreference(@as(*const IMDServiceProvider3, @ptrCast(self)), dw_enum_pref_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMDSPEnumDevice_Value = Guid.initString("1dcb3a11-33ed-11d3-8470-00c04f79dbc0");
pub const IID_IMDSPEnumDevice = &IID_IMDSPEnumDevice_Value;
pub const IMDSPEnumDevice = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IMDSPEnumDevice,
            celt: u32,
            pp_device: [*]?*IMDSPDevice,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IMDSPEnumDevice,
            celt: u32,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IMDSPEnumDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IMDSPEnumDevice,
            pp_enum_device: ?*?*IMDSPEnumDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_device_: [*]?*IMDSPDevice, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IMDSPEnumDevice.VTable, @ptrCast(self.vtable)).Next(@as(*const IMDSPEnumDevice, @ptrCast(self)), celt_, pp_device_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IMDSPEnumDevice.VTable, @ptrCast(self.vtable)).Skip(@as(*const IMDSPEnumDevice, @ptrCast(self)), celt_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IMDSPEnumDevice.VTable, @ptrCast(self.vtable)).Reset(@as(*const IMDSPEnumDevice, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, pp_enum_device_: ?*?*IMDSPEnumDevice) HRESULT {
                return @as(*const IMDSPEnumDevice.VTable, @ptrCast(self.vtable)).Clone(@as(*const IMDSPEnumDevice, @ptrCast(self)), pp_enum_device_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMDSPDevice_Value = Guid.initString("1dcb3a12-33ed-11d3-8470-00c04f79dbc0");
pub const IID_IMDSPDevice = &IID_IMDSPDevice_Value;
pub const IMDSPDevice = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetName: *const fn (
            self: *const IMDSPDevice,
            pwsz_name: [*:0]u16,
            n_max_chars: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetManufacturer: *const fn (
            self: *const IMDSPDevice,
            pwsz_name: [*:0]u16,
            n_max_chars: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVersion: *const fn (
            self: *const IMDSPDevice,
            pdw_version: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetType: *const fn (
            self: *const IMDSPDevice,
            pdw_type: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSerialNumber: *const fn (
            self: *const IMDSPDevice,
            p_serial_number: ?*WMDMID,
            ab_mac: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPowerSource: *const fn (
            self: *const IMDSPDevice,
            pdw_power_source: ?*u32,
            pdw_percent_remaining: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn (
            self: *const IMDSPDevice,
            pdw_status: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceIcon: *const fn (
            self: *const IMDSPDevice,
            h_icon: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumStorage: *const fn (
            self: *const IMDSPDevice,
            pp_enum_storage: ?*?*IMDSPEnumStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormatSupport: *const fn (
            self: *const IMDSPDevice,
            p_format_ex: [*]?*_WAVEFORMATEX,
            pn_format_count: ?*u32,
            pppwsz_mime_type: [*]?*?PWSTR,
            pn_mime_type_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendOpaqueCommand: *const fn (
            self: *const IMDSPDevice,
            p_command: ?*OPAQUECOMMAND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getName(self: *const T, pwsz_name_: [*:0]u16, n_max_chars_: u32) HRESULT {
                return @as(*const IMDSPDevice.VTable, @ptrCast(self.vtable)).GetName(@as(*const IMDSPDevice, @ptrCast(self)), pwsz_name_, n_max_chars_);
            }
            pub inline fn getManufacturer(self: *const T, pwsz_name_: [*:0]u16, n_max_chars_: u32) HRESULT {
                return @as(*const IMDSPDevice.VTable, @ptrCast(self.vtable)).GetManufacturer(@as(*const IMDSPDevice, @ptrCast(self)), pwsz_name_, n_max_chars_);
            }
            pub inline fn getVersion(self: *const T, pdw_version_: ?*u32) HRESULT {
                return @as(*const IMDSPDevice.VTable, @ptrCast(self.vtable)).GetVersion(@as(*const IMDSPDevice, @ptrCast(self)), pdw_version_);
            }
            pub inline fn getType(self: *const T, pdw_type_: ?*u32) HRESULT {
                return @as(*const IMDSPDevice.VTable, @ptrCast(self.vtable)).GetType(@as(*const IMDSPDevice, @ptrCast(self)), pdw_type_);
            }
            pub inline fn getSerialNumber(self: *const T, p_serial_number_: ?*WMDMID, ab_mac_: ?*u8) HRESULT {
                return @as(*const IMDSPDevice.VTable, @ptrCast(self.vtable)).GetSerialNumber(@as(*const IMDSPDevice, @ptrCast(self)), p_serial_number_, ab_mac_);
            }
            pub inline fn getPowerSource(self: *const T, pdw_power_source_: ?*u32, pdw_percent_remaining_: ?*u32) HRESULT {
                return @as(*const IMDSPDevice.VTable, @ptrCast(self.vtable)).GetPowerSource(@as(*const IMDSPDevice, @ptrCast(self)), pdw_power_source_, pdw_percent_remaining_);
            }
            pub inline fn getStatus(self: *const T, pdw_status_: ?*u32) HRESULT {
                return @as(*const IMDSPDevice.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IMDSPDevice, @ptrCast(self)), pdw_status_);
            }
            pub inline fn getDeviceIcon(self: *const T, h_icon_: ?*u32) HRESULT {
                return @as(*const IMDSPDevice.VTable, @ptrCast(self.vtable)).GetDeviceIcon(@as(*const IMDSPDevice, @ptrCast(self)), h_icon_);
            }
            pub inline fn enumStorage(self: *const T, pp_enum_storage_: ?*?*IMDSPEnumStorage) HRESULT {
                return @as(*const IMDSPDevice.VTable, @ptrCast(self.vtable)).EnumStorage(@as(*const IMDSPDevice, @ptrCast(self)), pp_enum_storage_);
            }
            pub inline fn getFormatSupport(self: *const T, p_format_ex_: [*]?*_WAVEFORMATEX, pn_format_count_: ?*u32, pppwsz_mime_type_: [*]?*?PWSTR, pn_mime_type_count_: ?*u32) HRESULT {
                return @as(*const IMDSPDevice.VTable, @ptrCast(self.vtable)).GetFormatSupport(@as(*const IMDSPDevice, @ptrCast(self)), p_format_ex_, pn_format_count_, pppwsz_mime_type_, pn_mime_type_count_);
            }
            pub inline fn sendOpaqueCommand(self: *const T, p_command_: ?*OPAQUECOMMAND) HRESULT {
                return @as(*const IMDSPDevice.VTable, @ptrCast(self.vtable)).SendOpaqueCommand(@as(*const IMDSPDevice, @ptrCast(self)), p_command_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMDSPDevice2_Value = Guid.initString("420d16ad-c97d-4e00-82aa-00e9f4335ddd");
pub const IID_IMDSPDevice2 = &IID_IMDSPDevice2_Value;
pub const IMDSPDevice2 = extern struct {
    pub const VTable = extern struct {
        base: IMDSPDevice.VTable,
        GetStorage: *const fn (
            self: *const IMDSPDevice2,
            psz_storage_name: ?[*:0]const u16,
            pp_storage: ?*?*IMDSPStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormatSupport2: *const fn (
            self: *const IMDSPDevice2,
            dw_flags: u32,
            pp_audio_format_ex: [*]?*_WAVEFORMATEX,
            pn_audio_format_count: ?*u32,
            pp_video_format_ex: [*]?*_VIDEOINFOHEADER,
            pn_video_format_count: ?*u32,
            pp_file_type: [*]?*WMFILECAPABILITIES,
            pn_file_type_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpecifyPropertyPages: *const fn (
            self: *const IMDSPDevice2,
            pp_specify_prop_pages: ?*?*ISpecifyPropertyPages,
            ppp_unknowns: [*]?*?*IUnknown,
            pc_unks: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCanonicalName: *const fn (
            self: *const IMDSPDevice2,
            pwsz_pn_p_name: [*:0]u16,
            n_max_chars: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IMDSPDevice.MethodMixin(T);
            pub inline fn getStorage(self: *const T, psz_storage_name_: ?[*:0]const u16, pp_storage_: ?*?*IMDSPStorage) HRESULT {
                return @as(*const IMDSPDevice2.VTable, @ptrCast(self.vtable)).GetStorage(@as(*const IMDSPDevice2, @ptrCast(self)), psz_storage_name_, pp_storage_);
            }
            pub inline fn getFormatSupport2(self: *const T, dw_flags_: u32, pp_audio_format_ex_: [*]?*_WAVEFORMATEX, pn_audio_format_count_: ?*u32, pp_video_format_ex_: [*]?*_VIDEOINFOHEADER, pn_video_format_count_: ?*u32, pp_file_type_: [*]?*WMFILECAPABILITIES, pn_file_type_count_: ?*u32) HRESULT {
                return @as(*const IMDSPDevice2.VTable, @ptrCast(self.vtable)).GetFormatSupport2(@as(*const IMDSPDevice2, @ptrCast(self)), dw_flags_, pp_audio_format_ex_, pn_audio_format_count_, pp_video_format_ex_, pn_video_format_count_, pp_file_type_, pn_file_type_count_);
            }
            pub inline fn getSpecifyPropertyPages(self: *const T, pp_specify_prop_pages_: ?*?*ISpecifyPropertyPages, ppp_unknowns_: [*]?*?*IUnknown, pc_unks_: ?*u32) HRESULT {
                return @as(*const IMDSPDevice2.VTable, @ptrCast(self.vtable)).GetSpecifyPropertyPages(@as(*const IMDSPDevice2, @ptrCast(self)), pp_specify_prop_pages_, ppp_unknowns_, pc_unks_);
            }
            pub inline fn getCanonicalName(self: *const T, pwsz_pn_p_name_: [*:0]u16, n_max_chars_: u32) HRESULT {
                return @as(*const IMDSPDevice2.VTable, @ptrCast(self.vtable)).GetCanonicalName(@as(*const IMDSPDevice2, @ptrCast(self)), pwsz_pn_p_name_, n_max_chars_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMDSPDevice3_Value = Guid.initString("1a839845-fc55-487c-976f-ee38ac0e8c4e");
pub const IID_IMDSPDevice3 = &IID_IMDSPDevice3_Value;
pub const IMDSPDevice3 = extern struct {
    pub const VTable = extern struct {
        base: IMDSPDevice2.VTable,
        GetProperty: *const fn (
            self: *const IMDSPDevice3,
            pwsz_prop_name: ?[*:0]const u16,
            p_value: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn (
            self: *const IMDSPDevice3,
            pwsz_prop_name: ?[*:0]const u16,
            p_value: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormatCapability: *const fn (
            self: *const IMDSPDevice3,
            format: WMDM_FORMATCODE,
            p_format_support: ?*WMDM_FORMAT_CAPABILITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeviceIoControl: *const fn (
            self: *const IMDSPDevice3,
            dw_io_control_code: u32,
            lp_in_buffer: [*:0]u8,
            n_in_buffer_size: u32,
            lp_out_buffer: [*:0]u8,
            pn_out_buffer_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindStorage: *const fn (
            self: *const IMDSPDevice3,
            find_scope: WMDM_FIND_SCOPE,
            pwsz_unique_i_d: ?[*:0]const u16,
            pp_storage: ?*?*IMDSPStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IMDSPDevice2.MethodMixin(T);
            pub inline fn getProperty(self: *const T, pwsz_prop_name_: ?[*:0]const u16, p_value_: ?*PROPVARIANT) HRESULT {
                return @as(*const IMDSPDevice3.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IMDSPDevice3, @ptrCast(self)), pwsz_prop_name_, p_value_);
            }
            pub inline fn setProperty(self: *const T, pwsz_prop_name_: ?[*:0]const u16, p_value_: ?*const PROPVARIANT) HRESULT {
                return @as(*const IMDSPDevice3.VTable, @ptrCast(self.vtable)).SetProperty(@as(*const IMDSPDevice3, @ptrCast(self)), pwsz_prop_name_, p_value_);
            }
            pub inline fn getFormatCapability(self: *const T, format_: WMDM_FORMATCODE, p_format_support_: ?*WMDM_FORMAT_CAPABILITY) HRESULT {
                return @as(*const IMDSPDevice3.VTable, @ptrCast(self.vtable)).GetFormatCapability(@as(*const IMDSPDevice3, @ptrCast(self)), format_, p_format_support_);
            }
            pub inline fn deviceIoControl(self: *const T, dw_io_control_code_: u32, lp_in_buffer_: [*:0]u8, n_in_buffer_size_: u32, lp_out_buffer_: [*:0]u8, pn_out_buffer_size_: ?*u32) HRESULT {
                return @as(*const IMDSPDevice3.VTable, @ptrCast(self.vtable)).DeviceIoControl(@as(*const IMDSPDevice3, @ptrCast(self)), dw_io_control_code_, lp_in_buffer_, n_in_buffer_size_, lp_out_buffer_, pn_out_buffer_size_);
            }
            pub inline fn findStorage(self: *const T, find_scope_: WMDM_FIND_SCOPE, pwsz_unique_i_d_: ?[*:0]const u16, pp_storage_: ?*?*IMDSPStorage) HRESULT {
                return @as(*const IMDSPDevice3.VTable, @ptrCast(self.vtable)).FindStorage(@as(*const IMDSPDevice3, @ptrCast(self)), find_scope_, pwsz_unique_i_d_, pp_storage_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMDSPDeviceControl_Value = Guid.initString("1dcb3a14-33ed-11d3-8470-00c04f79dbc0");
pub const IID_IMDSPDeviceControl = &IID_IMDSPDeviceControl_Value;
pub const IMDSPDeviceControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDCStatus: *const fn (
            self: *const IMDSPDeviceControl,
            pdw_status: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCapabilities: *const fn (
            self: *const IMDSPDeviceControl,
            pdw_capabilities_mask: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Play: *const fn (
            self: *const IMDSPDeviceControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Record: *const fn (
            self: *const IMDSPDeviceControl,
            p_format: ?*_WAVEFORMATEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pause: *const fn (
            self: *const IMDSPDeviceControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: *const fn (
            self: *const IMDSPDeviceControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const IMDSPDeviceControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Seek: *const fn (
            self: *const IMDSPDeviceControl,
            fu_mode: u32,
            n_offset: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDCStatus(self: *const T, pdw_status_: ?*u32) HRESULT {
                return @as(*const IMDSPDeviceControl.VTable, @ptrCast(self.vtable)).GetDCStatus(@as(*const IMDSPDeviceControl, @ptrCast(self)), pdw_status_);
            }
            pub inline fn getCapabilities(self: *const T, pdw_capabilities_mask_: ?*u32) HRESULT {
                return @as(*const IMDSPDeviceControl.VTable, @ptrCast(self.vtable)).GetCapabilities(@as(*const IMDSPDeviceControl, @ptrCast(self)), pdw_capabilities_mask_);
            }
            pub inline fn play(self: *const T) HRESULT {
                return @as(*const IMDSPDeviceControl.VTable, @ptrCast(self.vtable)).Play(@as(*const IMDSPDeviceControl, @ptrCast(self)));
            }
            pub inline fn record(self: *const T, p_format_: ?*_WAVEFORMATEX) HRESULT {
                return @as(*const IMDSPDeviceControl.VTable, @ptrCast(self.vtable)).Record(@as(*const IMDSPDeviceControl, @ptrCast(self)), p_format_);
            }
            pub inline fn pause(self: *const T) HRESULT {
                return @as(*const IMDSPDeviceControl.VTable, @ptrCast(self.vtable)).Pause(@as(*const IMDSPDeviceControl, @ptrCast(self)));
            }
            pub inline fn @"resume"(self: *const T) HRESULT {
                return @as(*const IMDSPDeviceControl.VTable, @ptrCast(self.vtable)).Resume(@as(*const IMDSPDeviceControl, @ptrCast(self)));
            }
            pub inline fn stop(self: *const T) HRESULT {
                return @as(*const IMDSPDeviceControl.VTable, @ptrCast(self.vtable)).Stop(@as(*const IMDSPDeviceControl, @ptrCast(self)));
            }
            pub inline fn seek(self: *const T, fu_mode_: u32, n_offset_: i32) HRESULT {
                return @as(*const IMDSPDeviceControl.VTable, @ptrCast(self.vtable)).Seek(@as(*const IMDSPDeviceControl, @ptrCast(self)), fu_mode_, n_offset_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMDSPEnumStorage_Value = Guid.initString("1dcb3a15-33ed-11d3-8470-00c04f79dbc0");
pub const IID_IMDSPEnumStorage = &IID_IMDSPEnumStorage_Value;
pub const IMDSPEnumStorage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IMDSPEnumStorage,
            celt: u32,
            pp_storage: [*]?*IMDSPStorage,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IMDSPEnumStorage,
            celt: u32,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IMDSPEnumStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IMDSPEnumStorage,
            pp_enum_storage: ?*?*IMDSPEnumStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_storage_: [*]?*IMDSPStorage, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IMDSPEnumStorage.VTable, @ptrCast(self.vtable)).Next(@as(*const IMDSPEnumStorage, @ptrCast(self)), celt_, pp_storage_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IMDSPEnumStorage.VTable, @ptrCast(self.vtable)).Skip(@as(*const IMDSPEnumStorage, @ptrCast(self)), celt_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IMDSPEnumStorage.VTable, @ptrCast(self.vtable)).Reset(@as(*const IMDSPEnumStorage, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, pp_enum_storage_: ?*?*IMDSPEnumStorage) HRESULT {
                return @as(*const IMDSPEnumStorage.VTable, @ptrCast(self.vtable)).Clone(@as(*const IMDSPEnumStorage, @ptrCast(self)), pp_enum_storage_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMDSPStorage_Value = Guid.initString("1dcb3a16-33ed-11d3-8470-00c04f79dbc0");
pub const IID_IMDSPStorage = &IID_IMDSPStorage_Value;
pub const IMDSPStorage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAttributes: *const fn (
            self: *const IMDSPStorage,
            dw_attributes: u32,
            p_format: ?*_WAVEFORMATEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStorageGlobals: *const fn (
            self: *const IMDSPStorage,
            pp_storage_globals: ?*?*IMDSPStorageGlobals,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributes: *const fn (
            self: *const IMDSPStorage,
            pdw_attributes: ?*u32,
            p_format: ?*_WAVEFORMATEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn (
            self: *const IMDSPStorage,
            pwsz_name: [*:0]u16,
            n_max_chars: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDate: *const fn (
            self: *const IMDSPStorage,
            p_date_time_u_t_c: ?*WMDMDATETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSize: *const fn (
            self: *const IMDSPStorage,
            pdw_size_low: ?*u32,
            pdw_size_high: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRights: *const fn (
            self: *const IMDSPStorage,
            pp_rights: [*]?*WMDMRIGHTS,
            pn_rights_count: ?*u32,
            ab_mac: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStorage: *const fn (
            self: *const IMDSPStorage,
            dw_attributes: u32,
            p_format: ?*_WAVEFORMATEX,
            pwsz_name: ?PWSTR,
            pp_new_storage: ?*?*IMDSPStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumStorage: *const fn (
            self: *const IMDSPStorage,
            pp_enum_storage: ?*?*IMDSPEnumStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendOpaqueCommand: *const fn (
            self: *const IMDSPStorage,
            p_command: ?*OPAQUECOMMAND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAttributes(self: *const T, dw_attributes_: u32, p_format_: ?*_WAVEFORMATEX) HRESULT {
                return @as(*const IMDSPStorage.VTable, @ptrCast(self.vtable)).SetAttributes(@as(*const IMDSPStorage, @ptrCast(self)), dw_attributes_, p_format_);
            }
            pub inline fn getStorageGlobals(self: *const T, pp_storage_globals_: ?*?*IMDSPStorageGlobals) HRESULT {
                return @as(*const IMDSPStorage.VTable, @ptrCast(self.vtable)).GetStorageGlobals(@as(*const IMDSPStorage, @ptrCast(self)), pp_storage_globals_);
            }
            pub inline fn getAttributes(self: *const T, pdw_attributes_: ?*u32, p_format_: ?*_WAVEFORMATEX) HRESULT {
                return @as(*const IMDSPStorage.VTable, @ptrCast(self.vtable)).GetAttributes(@as(*const IMDSPStorage, @ptrCast(self)), pdw_attributes_, p_format_);
            }
            pub inline fn getName(self: *const T, pwsz_name_: [*:0]u16, n_max_chars_: u32) HRESULT {
                return @as(*const IMDSPStorage.VTable, @ptrCast(self.vtable)).GetName(@as(*const IMDSPStorage, @ptrCast(self)), pwsz_name_, n_max_chars_);
            }
            pub inline fn getDate(self: *const T, p_date_time_u_t_c_: ?*WMDMDATETIME) HRESULT {
                return @as(*const IMDSPStorage.VTable, @ptrCast(self.vtable)).GetDate(@as(*const IMDSPStorage, @ptrCast(self)), p_date_time_u_t_c_);
            }
            pub inline fn getSize(self: *const T, pdw_size_low_: ?*u32, pdw_size_high_: ?*u32) HRESULT {
                return @as(*const IMDSPStorage.VTable, @ptrCast(self.vtable)).GetSize(@as(*const IMDSPStorage, @ptrCast(self)), pdw_size_low_, pdw_size_high_);
            }
            pub inline fn getRights(self: *const T, pp_rights_: [*]?*WMDMRIGHTS, pn_rights_count_: ?*u32, ab_mac_: ?*u8) HRESULT {
                return @as(*const IMDSPStorage.VTable, @ptrCast(self.vtable)).GetRights(@as(*const IMDSPStorage, @ptrCast(self)), pp_rights_, pn_rights_count_, ab_mac_);
            }
            pub inline fn createStorage(self: *const T, dw_attributes_: u32, p_format_: ?*_WAVEFORMATEX, pwsz_name_: ?PWSTR, pp_new_storage_: ?*?*IMDSPStorage) HRESULT {
                return @as(*const IMDSPStorage.VTable, @ptrCast(self.vtable)).CreateStorage(@as(*const IMDSPStorage, @ptrCast(self)), dw_attributes_, p_format_, pwsz_name_, pp_new_storage_);
            }
            pub inline fn enumStorage(self: *const T, pp_enum_storage_: ?*?*IMDSPEnumStorage) HRESULT {
                return @as(*const IMDSPStorage.VTable, @ptrCast(self.vtable)).EnumStorage(@as(*const IMDSPStorage, @ptrCast(self)), pp_enum_storage_);
            }
            pub inline fn sendOpaqueCommand(self: *const T, p_command_: ?*OPAQUECOMMAND) HRESULT {
                return @as(*const IMDSPStorage.VTable, @ptrCast(self.vtable)).SendOpaqueCommand(@as(*const IMDSPStorage, @ptrCast(self)), p_command_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMDSPStorage2_Value = Guid.initString("0a5e07a5-6454-4451-9c36-1c6ae7e2b1d6");
pub const IID_IMDSPStorage2 = &IID_IMDSPStorage2_Value;
pub const IMDSPStorage2 = extern struct {
    pub const VTable = extern struct {
        base: IMDSPStorage.VTable,
        GetStorage: *const fn (
            self: *const IMDSPStorage2,
            psz_storage_name: ?[*:0]const u16,
            pp_storage: ?*?*IMDSPStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStorage2: *const fn (
            self: *const IMDSPStorage2,
            dw_attributes: u32,
            dw_attributes_ex: u32,
            p_audio_format: ?*_WAVEFORMATEX,
            p_video_format: ?*_VIDEOINFOHEADER,
            pwsz_name: ?PWSTR,
            qw_file_size: u64,
            pp_new_storage: ?*?*IMDSPStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAttributes2: *const fn (
            self: *const IMDSPStorage2,
            dw_attributes: u32,
            dw_attributes_ex: u32,
            p_audio_format: ?*_WAVEFORMATEX,
            p_video_format: ?*_VIDEOINFOHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributes2: *const fn (
            self: *const IMDSPStorage2,
            pdw_attributes: ?*u32,
            pdw_attributes_ex: ?*u32,
            p_audio_format: ?*_WAVEFORMATEX,
            p_video_format: ?*_VIDEOINFOHEADER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IMDSPStorage.MethodMixin(T);
            pub inline fn getStorage(self: *const T, psz_storage_name_: ?[*:0]const u16, pp_storage_: ?*?*IMDSPStorage) HRESULT {
                return @as(*const IMDSPStorage2.VTable, @ptrCast(self.vtable)).GetStorage(@as(*const IMDSPStorage2, @ptrCast(self)), psz_storage_name_, pp_storage_);
            }
            pub inline fn createStorage2(self: *const T, dw_attributes_: u32, dw_attributes_ex_: u32, p_audio_format_: ?*_WAVEFORMATEX, p_video_format_: ?*_VIDEOINFOHEADER, pwsz_name_: ?PWSTR, qw_file_size_: u64, pp_new_storage_: ?*?*IMDSPStorage) HRESULT {
                return @as(*const IMDSPStorage2.VTable, @ptrCast(self.vtable)).CreateStorage2(@as(*const IMDSPStorage2, @ptrCast(self)), dw_attributes_, dw_attributes_ex_, p_audio_format_, p_video_format_, pwsz_name_, qw_file_size_, pp_new_storage_);
            }
            pub inline fn setAttributes2(self: *const T, dw_attributes_: u32, dw_attributes_ex_: u32, p_audio_format_: ?*_WAVEFORMATEX, p_video_format_: ?*_VIDEOINFOHEADER) HRESULT {
                return @as(*const IMDSPStorage2.VTable, @ptrCast(self.vtable)).SetAttributes2(@as(*const IMDSPStorage2, @ptrCast(self)), dw_attributes_, dw_attributes_ex_, p_audio_format_, p_video_format_);
            }
            pub inline fn getAttributes2(self: *const T, pdw_attributes_: ?*u32, pdw_attributes_ex_: ?*u32, p_audio_format_: ?*_WAVEFORMATEX, p_video_format_: ?*_VIDEOINFOHEADER) HRESULT {
                return @as(*const IMDSPStorage2.VTable, @ptrCast(self.vtable)).GetAttributes2(@as(*const IMDSPStorage2, @ptrCast(self)), pdw_attributes_, pdw_attributes_ex_, p_audio_format_, p_video_format_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMDSPStorage3_Value = Guid.initString("6c669867-97ed-4a67-9706-1c5529d2a414");
pub const IID_IMDSPStorage3 = &IID_IMDSPStorage3_Value;
pub const IMDSPStorage3 = extern struct {
    pub const VTable = extern struct {
        base: IMDSPStorage2.VTable,
        GetMetadata: *const fn (
            self: *const IMDSPStorage3,
            p_metadata: ?*IWMDMMetaData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMetadata: *const fn (
            self: *const IMDSPStorage3,
            p_metadata: ?*IWMDMMetaData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IMDSPStorage2.MethodMixin(T);
            pub inline fn getMetadata(self: *const T, p_metadata_: ?*IWMDMMetaData) HRESULT {
                return @as(*const IMDSPStorage3.VTable, @ptrCast(self.vtable)).GetMetadata(@as(*const IMDSPStorage3, @ptrCast(self)), p_metadata_);
            }
            pub inline fn setMetadata(self: *const T, p_metadata_: ?*IWMDMMetaData) HRESULT {
                return @as(*const IMDSPStorage3.VTable, @ptrCast(self.vtable)).SetMetadata(@as(*const IMDSPStorage3, @ptrCast(self)), p_metadata_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMDSPStorage4_Value = Guid.initString("3133b2c4-515c-481b-b1ce-39327ecb4f74");
pub const IID_IMDSPStorage4 = &IID_IMDSPStorage4_Value;
pub const IMDSPStorage4 = extern struct {
    pub const VTable = extern struct {
        base: IMDSPStorage3.VTable,
        SetReferences: *const fn (
            self: *const IMDSPStorage4,
            dw_refs: u32,
            pp_i_s_p_storage: ?[*]?*IMDSPStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReferences: *const fn (
            self: *const IMDSPStorage4,
            pdw_refs: ?*u32,
            ppp_i_s_p_storage: [*]?*?*IMDSPStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStorageWithMetadata: *const fn (
            self: *const IMDSPStorage4,
            dw_attributes: u32,
            pwsz_name: ?[*:0]const u16,
            p_metadata: ?*IWMDMMetaData,
            qw_file_size: u64,
            pp_new_storage: ?*?*IMDSPStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpecifiedMetadata: *const fn (
            self: *const IMDSPStorage4,
            c_properties: u32,
            ppwsz_prop_names: [*]?PWSTR,
            p_metadata: ?*IWMDMMetaData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindStorage: *const fn (
            self: *const IMDSPStorage4,
            find_scope: WMDM_FIND_SCOPE,
            pwsz_unique_i_d: ?[*:0]const u16,
            pp_storage: ?*?*IMDSPStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParent: *const fn (
            self: *const IMDSPStorage4,
            pp_storage: ?*?*IMDSPStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IMDSPStorage3.MethodMixin(T);
            pub inline fn setReferences(self: *const T, dw_refs_: u32, pp_i_s_p_storage_: ?[*]?*IMDSPStorage) HRESULT {
                return @as(*const IMDSPStorage4.VTable, @ptrCast(self.vtable)).SetReferences(@as(*const IMDSPStorage4, @ptrCast(self)), dw_refs_, pp_i_s_p_storage_);
            }
            pub inline fn getReferences(self: *const T, pdw_refs_: ?*u32, ppp_i_s_p_storage_: [*]?*?*IMDSPStorage) HRESULT {
                return @as(*const IMDSPStorage4.VTable, @ptrCast(self.vtable)).GetReferences(@as(*const IMDSPStorage4, @ptrCast(self)), pdw_refs_, ppp_i_s_p_storage_);
            }
            pub inline fn createStorageWithMetadata(self: *const T, dw_attributes_: u32, pwsz_name_: ?[*:0]const u16, p_metadata_: ?*IWMDMMetaData, qw_file_size_: u64, pp_new_storage_: ?*?*IMDSPStorage) HRESULT {
                return @as(*const IMDSPStorage4.VTable, @ptrCast(self.vtable)).CreateStorageWithMetadata(@as(*const IMDSPStorage4, @ptrCast(self)), dw_attributes_, pwsz_name_, p_metadata_, qw_file_size_, pp_new_storage_);
            }
            pub inline fn getSpecifiedMetadata(self: *const T, c_properties_: u32, ppwsz_prop_names_: [*]?PWSTR, p_metadata_: ?*IWMDMMetaData) HRESULT {
                return @as(*const IMDSPStorage4.VTable, @ptrCast(self.vtable)).GetSpecifiedMetadata(@as(*const IMDSPStorage4, @ptrCast(self)), c_properties_, ppwsz_prop_names_, p_metadata_);
            }
            pub inline fn findStorage(self: *const T, find_scope_: WMDM_FIND_SCOPE, pwsz_unique_i_d_: ?[*:0]const u16, pp_storage_: ?*?*IMDSPStorage) HRESULT {
                return @as(*const IMDSPStorage4.VTable, @ptrCast(self.vtable)).FindStorage(@as(*const IMDSPStorage4, @ptrCast(self)), find_scope_, pwsz_unique_i_d_, pp_storage_);
            }
            pub inline fn getParent(self: *const T, pp_storage_: ?*?*IMDSPStorage) HRESULT {
                return @as(*const IMDSPStorage4.VTable, @ptrCast(self.vtable)).GetParent(@as(*const IMDSPStorage4, @ptrCast(self)), pp_storage_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMDSPStorageGlobals_Value = Guid.initString("1dcb3a17-33ed-11d3-8470-00c04f79dbc0");
pub const IID_IMDSPStorageGlobals = &IID_IMDSPStorageGlobals_Value;
pub const IMDSPStorageGlobals = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCapabilities: *const fn (
            self: *const IMDSPStorageGlobals,
            pdw_capabilities: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSerialNumber: *const fn (
            self: *const IMDSPStorageGlobals,
            p_serial_num: ?*WMDMID,
            ab_mac: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTotalSize: *const fn (
            self: *const IMDSPStorageGlobals,
            pdw_total_size_low: ?*u32,
            pdw_total_size_high: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTotalFree: *const fn (
            self: *const IMDSPStorageGlobals,
            pdw_free_low: ?*u32,
            pdw_free_high: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTotalBad: *const fn (
            self: *const IMDSPStorageGlobals,
            pdw_bad_low: ?*u32,
            pdw_bad_high: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn (
            self: *const IMDSPStorageGlobals,
            pdw_status: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: *const fn (
            self: *const IMDSPStorageGlobals,
            fu_mode: u32,
            p_progress: ?*IWMDMProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDevice: *const fn (
            self: *const IMDSPStorageGlobals,
            pp_device: ?*?*IMDSPDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRootStorage: *const fn (
            self: *const IMDSPStorageGlobals,
            pp_root: ?*?*IMDSPStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCapabilities(self: *const T, pdw_capabilities_: ?*u32) HRESULT {
                return @as(*const IMDSPStorageGlobals.VTable, @ptrCast(self.vtable)).GetCapabilities(@as(*const IMDSPStorageGlobals, @ptrCast(self)), pdw_capabilities_);
            }
            pub inline fn getSerialNumber(self: *const T, p_serial_num_: ?*WMDMID, ab_mac_: ?*u8) HRESULT {
                return @as(*const IMDSPStorageGlobals.VTable, @ptrCast(self.vtable)).GetSerialNumber(@as(*const IMDSPStorageGlobals, @ptrCast(self)), p_serial_num_, ab_mac_);
            }
            pub inline fn getTotalSize(self: *const T, pdw_total_size_low_: ?*u32, pdw_total_size_high_: ?*u32) HRESULT {
                return @as(*const IMDSPStorageGlobals.VTable, @ptrCast(self.vtable)).GetTotalSize(@as(*const IMDSPStorageGlobals, @ptrCast(self)), pdw_total_size_low_, pdw_total_size_high_);
            }
            pub inline fn getTotalFree(self: *const T, pdw_free_low_: ?*u32, pdw_free_high_: ?*u32) HRESULT {
                return @as(*const IMDSPStorageGlobals.VTable, @ptrCast(self.vtable)).GetTotalFree(@as(*const IMDSPStorageGlobals, @ptrCast(self)), pdw_free_low_, pdw_free_high_);
            }
            pub inline fn getTotalBad(self: *const T, pdw_bad_low_: ?*u32, pdw_bad_high_: ?*u32) HRESULT {
                return @as(*const IMDSPStorageGlobals.VTable, @ptrCast(self.vtable)).GetTotalBad(@as(*const IMDSPStorageGlobals, @ptrCast(self)), pdw_bad_low_, pdw_bad_high_);
            }
            pub inline fn getStatus(self: *const T, pdw_status_: ?*u32) HRESULT {
                return @as(*const IMDSPStorageGlobals.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IMDSPStorageGlobals, @ptrCast(self)), pdw_status_);
            }
            pub inline fn initialize(self: *const T, fu_mode_: u32, p_progress_: ?*IWMDMProgress) HRESULT {
                return @as(*const IMDSPStorageGlobals.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IMDSPStorageGlobals, @ptrCast(self)), fu_mode_, p_progress_);
            }
            pub inline fn getDevice(self: *const T, pp_device_: ?*?*IMDSPDevice) HRESULT {
                return @as(*const IMDSPStorageGlobals.VTable, @ptrCast(self.vtable)).GetDevice(@as(*const IMDSPStorageGlobals, @ptrCast(self)), pp_device_);
            }
            pub inline fn getRootStorage(self: *const T, pp_root_: ?*?*IMDSPStorage) HRESULT {
                return @as(*const IMDSPStorageGlobals.VTable, @ptrCast(self.vtable)).GetRootStorage(@as(*const IMDSPStorageGlobals, @ptrCast(self)), pp_root_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMDSPObjectInfo_Value = Guid.initString("1dcb3a19-33ed-11d3-8470-00c04f79dbc0");
pub const IID_IMDSPObjectInfo = &IID_IMDSPObjectInfo_Value;
pub const IMDSPObjectInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPlayLength: *const fn (
            self: *const IMDSPObjectInfo,
            pdw_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPlayLength: *const fn (
            self: *const IMDSPObjectInfo,
            dw_length: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPlayOffset: *const fn (
            self: *const IMDSPObjectInfo,
            pdw_offset: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPlayOffset: *const fn (
            self: *const IMDSPObjectInfo,
            dw_offset: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTotalLength: *const fn (
            self: *const IMDSPObjectInfo,
            pdw_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastPlayPosition: *const fn (
            self: *const IMDSPObjectInfo,
            pdw_last_pos: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLongestPlayPosition: *const fn (
            self: *const IMDSPObjectInfo,
            pdw_longest_pos: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPlayLength(self: *const T, pdw_length_: ?*u32) HRESULT {
                return @as(*const IMDSPObjectInfo.VTable, @ptrCast(self.vtable)).GetPlayLength(@as(*const IMDSPObjectInfo, @ptrCast(self)), pdw_length_);
            }
            pub inline fn setPlayLength(self: *const T, dw_length_: u32) HRESULT {
                return @as(*const IMDSPObjectInfo.VTable, @ptrCast(self.vtable)).SetPlayLength(@as(*const IMDSPObjectInfo, @ptrCast(self)), dw_length_);
            }
            pub inline fn getPlayOffset(self: *const T, pdw_offset_: ?*u32) HRESULT {
                return @as(*const IMDSPObjectInfo.VTable, @ptrCast(self.vtable)).GetPlayOffset(@as(*const IMDSPObjectInfo, @ptrCast(self)), pdw_offset_);
            }
            pub inline fn setPlayOffset(self: *const T, dw_offset_: u32) HRESULT {
                return @as(*const IMDSPObjectInfo.VTable, @ptrCast(self.vtable)).SetPlayOffset(@as(*const IMDSPObjectInfo, @ptrCast(self)), dw_offset_);
            }
            pub inline fn getTotalLength(self: *const T, pdw_length_: ?*u32) HRESULT {
                return @as(*const IMDSPObjectInfo.VTable, @ptrCast(self.vtable)).GetTotalLength(@as(*const IMDSPObjectInfo, @ptrCast(self)), pdw_length_);
            }
            pub inline fn getLastPlayPosition(self: *const T, pdw_last_pos_: ?*u32) HRESULT {
                return @as(*const IMDSPObjectInfo.VTable, @ptrCast(self.vtable)).GetLastPlayPosition(@as(*const IMDSPObjectInfo, @ptrCast(self)), pdw_last_pos_);
            }
            pub inline fn getLongestPlayPosition(self: *const T, pdw_longest_pos_: ?*u32) HRESULT {
                return @as(*const IMDSPObjectInfo.VTable, @ptrCast(self.vtable)).GetLongestPlayPosition(@as(*const IMDSPObjectInfo, @ptrCast(self)), pdw_longest_pos_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMDSPObject_Value = Guid.initString("1dcb3a18-33ed-11d3-8470-00c04f79dbc0");
pub const IID_IMDSPObject = &IID_IMDSPObject_Value;
pub const IMDSPObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: *const fn (
            self: *const IMDSPObject,
            fu_mode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Read: *const fn (
            self: *const IMDSPObject,
            p_data: [*:0]u8,
            pdw_size: ?*u32,
            ab_mac: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Write: *const fn (
            self: *const IMDSPObject,
            p_data: [*:0]u8,
            pdw_size: ?*u32,
            ab_mac: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const IMDSPObject,
            fu_mode: u32,
            p_progress: ?*IWMDMProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Seek: *const fn (
            self: *const IMDSPObject,
            fu_flags: u32,
            dw_offset: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Rename: *const fn (
            self: *const IMDSPObject,
            pwsz_new_name: ?PWSTR,
            p_progress: ?*IWMDMProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Move: *const fn (
            self: *const IMDSPObject,
            fu_mode: u32,
            p_progress: ?*IWMDMProgress,
            p_target: ?*IMDSPStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IMDSPObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn open(self: *const T, fu_mode_: u32) HRESULT {
                return @as(*const IMDSPObject.VTable, @ptrCast(self.vtable)).Open(@as(*const IMDSPObject, @ptrCast(self)), fu_mode_);
            }
            pub inline fn read(self: *const T, p_data_: [*:0]u8, pdw_size_: ?*u32, ab_mac_: ?*u8) HRESULT {
                return @as(*const IMDSPObject.VTable, @ptrCast(self.vtable)).Read(@as(*const IMDSPObject, @ptrCast(self)), p_data_, pdw_size_, ab_mac_);
            }
            pub inline fn write(self: *const T, p_data_: [*:0]u8, pdw_size_: ?*u32, ab_mac_: ?*u8) HRESULT {
                return @as(*const IMDSPObject.VTable, @ptrCast(self.vtable)).Write(@as(*const IMDSPObject, @ptrCast(self)), p_data_, pdw_size_, ab_mac_);
            }
            pub inline fn delete(self: *const T, fu_mode_: u32, p_progress_: ?*IWMDMProgress) HRESULT {
                return @as(*const IMDSPObject.VTable, @ptrCast(self.vtable)).Delete(@as(*const IMDSPObject, @ptrCast(self)), fu_mode_, p_progress_);
            }
            pub inline fn seek(self: *const T, fu_flags_: u32, dw_offset_: u32) HRESULT {
                return @as(*const IMDSPObject.VTable, @ptrCast(self.vtable)).Seek(@as(*const IMDSPObject, @ptrCast(self)), fu_flags_, dw_offset_);
            }
            pub inline fn rename(self: *const T, pwsz_new_name_: ?PWSTR, p_progress_: ?*IWMDMProgress) HRESULT {
                return @as(*const IMDSPObject.VTable, @ptrCast(self.vtable)).Rename(@as(*const IMDSPObject, @ptrCast(self)), pwsz_new_name_, p_progress_);
            }
            pub inline fn move(self: *const T, fu_mode_: u32, p_progress_: ?*IWMDMProgress, p_target_: ?*IMDSPStorage) HRESULT {
                return @as(*const IMDSPObject.VTable, @ptrCast(self.vtable)).Move(@as(*const IMDSPObject, @ptrCast(self)), fu_mode_, p_progress_, p_target_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IMDSPObject.VTable, @ptrCast(self.vtable)).Close(@as(*const IMDSPObject, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMDSPObject2_Value = Guid.initString("3f34cd3e-5907-4341-9af9-97f4187c3aa5");
pub const IID_IMDSPObject2 = &IID_IMDSPObject2_Value;
pub const IMDSPObject2 = extern struct {
    pub const VTable = extern struct {
        base: IMDSPObject.VTable,
        ReadOnClearChannel: *const fn (
            self: *const IMDSPObject2,
            p_data: [*:0]u8,
            pdw_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteOnClearChannel: *const fn (
            self: *const IMDSPObject2,
            p_data: [*:0]u8,
            pdw_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IMDSPObject.MethodMixin(T);
            pub inline fn readOnClearChannel(self: *const T, p_data_: [*:0]u8, pdw_size_: ?*u32) HRESULT {
                return @as(*const IMDSPObject2.VTable, @ptrCast(self.vtable)).ReadOnClearChannel(@as(*const IMDSPObject2, @ptrCast(self)), p_data_, pdw_size_);
            }
            pub inline fn writeOnClearChannel(self: *const T, p_data_: [*:0]u8, pdw_size_: ?*u32) HRESULT {
                return @as(*const IMDSPObject2.VTable, @ptrCast(self.vtable)).WriteOnClearChannel(@as(*const IMDSPObject2, @ptrCast(self)), p_data_, pdw_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMDSPDirectTransfer_Value = Guid.initString("c2fe57a8-9304-478c-9ee4-47e397b912d7");
pub const IID_IMDSPDirectTransfer = &IID_IMDSPDirectTransfer_Value;
pub const IMDSPDirectTransfer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TransferToDevice: *const fn (
            self: *const IMDSPDirectTransfer,
            pwsz_source_file_path: ?[*:0]const u16,
            p_source_operation: ?*IWMDMOperation,
            fu_flags: u32,
            pwsz_destination_name: ?PWSTR,
            p_source_meta_data: ?*IWMDMMetaData,
            p_transfer_progress: ?*IWMDMProgress,
            pp_new_object: ?*?*IMDSPStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn transferToDevice(self: *const T, pwsz_source_file_path_: ?[*:0]const u16, p_source_operation_: ?*IWMDMOperation, fu_flags_: u32, pwsz_destination_name_: ?PWSTR, p_source_meta_data_: ?*IWMDMMetaData, p_transfer_progress_: ?*IWMDMProgress, pp_new_object_: ?*?*IMDSPStorage) HRESULT {
                return @as(*const IMDSPDirectTransfer.VTable, @ptrCast(self.vtable)).TransferToDevice(@as(*const IMDSPDirectTransfer, @ptrCast(self)), pwsz_source_file_path_, p_source_operation_, fu_flags_, pwsz_destination_name_, p_source_meta_data_, p_transfer_progress_, pp_new_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMDSPRevoked_Value = Guid.initString("a4e8f2d4-3f31-464d-b53d-4fc335998184");
pub const IID_IMDSPRevoked = &IID_IMDSPRevoked_Value;
pub const IMDSPRevoked = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRevocationURL: *const fn (
            self: *const IMDSPRevoked,
            ppwsz_revocation_u_r_l: [*]?PWSTR,
            pdw_buffer_len: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getRevocationURL(self: *const T, ppwsz_revocation_u_r_l_: [*]?PWSTR, pdw_buffer_len_: ?*u32) HRESULT {
                return @as(*const IMDSPRevoked.VTable, @ptrCast(self.vtable)).GetRevocationURL(@as(*const IMDSPRevoked, @ptrCast(self)), ppwsz_revocation_u_r_l_, pdw_buffer_len_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISCPSecureAuthenticate_Value = Guid.initString("1dcb3a0f-33ed-11d3-8470-00c04f79dbc0");
pub const IID_ISCPSecureAuthenticate = &IID_ISCPSecureAuthenticate_Value;
pub const ISCPSecureAuthenticate = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSecureQuery: *const fn (
            self: *const ISCPSecureAuthenticate,
            pp_secure_query: ?*?*ISCPSecureQuery,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSecureQuery(self: *const T, pp_secure_query_: ?*?*ISCPSecureQuery) HRESULT {
                return @as(*const ISCPSecureAuthenticate.VTable, @ptrCast(self.vtable)).GetSecureQuery(@as(*const ISCPSecureAuthenticate, @ptrCast(self)), pp_secure_query_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISCPSecureAuthenticate2_Value = Guid.initString("b580cfae-1672-47e2-acaa-44bbecbcae5b");
pub const IID_ISCPSecureAuthenticate2 = &IID_ISCPSecureAuthenticate2_Value;
pub const ISCPSecureAuthenticate2 = extern struct {
    pub const VTable = extern struct {
        base: ISCPSecureAuthenticate.VTable,
        GetSCPSession: *const fn (
            self: *const ISCPSecureAuthenticate2,
            pp_s_c_p_session: ?*?*ISCPSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISCPSecureAuthenticate.MethodMixin(T);
            pub inline fn getSCPSession(self: *const T, pp_s_c_p_session_: ?*?*ISCPSession) HRESULT {
                return @as(*const ISCPSecureAuthenticate2.VTable, @ptrCast(self.vtable)).GetSCPSession(@as(*const ISCPSecureAuthenticate2, @ptrCast(self)), pp_s_c_p_session_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISCPSecureQuery_Value = Guid.initString("1dcb3a0d-33ed-11d3-8470-00c04f79dbc0");
pub const IID_ISCPSecureQuery = &IID_ISCPSecureQuery_Value;
pub const ISCPSecureQuery = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDataDemands: *const fn (
            self: *const ISCPSecureQuery,
            pfu_flags: ?*u32,
            pdw_min_rights_data: ?*u32,
            pdw_min_examine_data: ?*u32,
            pdw_min_decide_data: ?*u32,
            ab_mac: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExamineData: *const fn (
            self: *const ISCPSecureQuery,
            fu_flags: u32,
            pwsz_extension: ?PWSTR,
            p_data: [*:0]u8,
            dw_size: u32,
            ab_mac: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MakeDecision: *const fn (
            self: *const ISCPSecureQuery,
            fu_flags: u32,
            p_data: [*:0]u8,
            dw_size: u32,
            dw_app_sec: u32,
            pb_s_p_session_key: [*:0]u8,
            dw_session_key_len: u32,
            p_storage_globals: ?*IMDSPStorageGlobals,
            pp_exchange: ?*?*ISCPSecureExchange,
            ab_mac: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRights: *const fn (
            self: *const ISCPSecureQuery,
            p_data: [*:0]u8,
            dw_size: u32,
            pb_s_p_session_key: [*:0]u8,
            dw_session_key_len: u32,
            p_stg_globals: ?*IMDSPStorageGlobals,
            pp_rights: [*]?*WMDMRIGHTS,
            pn_rights_count: ?*u32,
            ab_mac: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDataDemands(self: *const T, pfu_flags_: ?*u32, pdw_min_rights_data_: ?*u32, pdw_min_examine_data_: ?*u32, pdw_min_decide_data_: ?*u32, ab_mac_: ?*u8) HRESULT {
                return @as(*const ISCPSecureQuery.VTable, @ptrCast(self.vtable)).GetDataDemands(@as(*const ISCPSecureQuery, @ptrCast(self)), pfu_flags_, pdw_min_rights_data_, pdw_min_examine_data_, pdw_min_decide_data_, ab_mac_);
            }
            pub inline fn examineData(self: *const T, fu_flags_: u32, pwsz_extension_: ?PWSTR, p_data_: [*:0]u8, dw_size_: u32, ab_mac_: ?*u8) HRESULT {
                return @as(*const ISCPSecureQuery.VTable, @ptrCast(self.vtable)).ExamineData(@as(*const ISCPSecureQuery, @ptrCast(self)), fu_flags_, pwsz_extension_, p_data_, dw_size_, ab_mac_);
            }
            pub inline fn makeDecision(self: *const T, fu_flags_: u32, p_data_: [*:0]u8, dw_size_: u32, dw_app_sec_: u32, pb_s_p_session_key_: [*:0]u8, dw_session_key_len_: u32, p_storage_globals_: ?*IMDSPStorageGlobals, pp_exchange_: ?*?*ISCPSecureExchange, ab_mac_: ?*u8) HRESULT {
                return @as(*const ISCPSecureQuery.VTable, @ptrCast(self.vtable)).MakeDecision(@as(*const ISCPSecureQuery, @ptrCast(self)), fu_flags_, p_data_, dw_size_, dw_app_sec_, pb_s_p_session_key_, dw_session_key_len_, p_storage_globals_, pp_exchange_, ab_mac_);
            }
            pub inline fn getRights(self: *const T, p_data_: [*:0]u8, dw_size_: u32, pb_s_p_session_key_: [*:0]u8, dw_session_key_len_: u32, p_stg_globals_: ?*IMDSPStorageGlobals, pp_rights_: [*]?*WMDMRIGHTS, pn_rights_count_: ?*u32, ab_mac_: ?*u8) HRESULT {
                return @as(*const ISCPSecureQuery.VTable, @ptrCast(self.vtable)).GetRights(@as(*const ISCPSecureQuery, @ptrCast(self)), p_data_, dw_size_, pb_s_p_session_key_, dw_session_key_len_, p_stg_globals_, pp_rights_, pn_rights_count_, ab_mac_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISCPSecureQuery2_Value = Guid.initString("ebe17e25-4fd7-4632-af46-6d93d4fcc72e");
pub const IID_ISCPSecureQuery2 = &IID_ISCPSecureQuery2_Value;
pub const ISCPSecureQuery2 = extern struct {
    pub const VTable = extern struct {
        base: ISCPSecureQuery.VTable,
        MakeDecision2: *const fn (
            self: *const ISCPSecureQuery2,
            fu_flags: u32,
            p_data: [*:0]u8,
            dw_size: u32,
            dw_app_sec: u32,
            pb_s_p_session_key: [*:0]u8,
            dw_session_key_len: u32,
            p_storage_globals: ?*IMDSPStorageGlobals,
            p_app_cert_app: [*:0]u8,
            dw_app_cert_app_len: u32,
            p_app_cert_s_p: [*:0]u8,
            dw_app_cert_s_p_len: u32,
            psz_revocation_u_r_l: [*]?PWSTR,
            pdw_revocation_u_r_l_len: ?*u32,
            pdw_revocation_bit_flag: ?*u32,
            pqw_file_size: ?*u64,
            p_unknown: ?*IUnknown,
            pp_exchange: ?*?*ISCPSecureExchange,
            ab_mac: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISCPSecureQuery.MethodMixin(T);
            pub inline fn makeDecision2(self: *const T, fu_flags_: u32, p_data_: [*:0]u8, dw_size_: u32, dw_app_sec_: u32, pb_s_p_session_key_: [*:0]u8, dw_session_key_len_: u32, p_storage_globals_: ?*IMDSPStorageGlobals, p_app_cert_app_: [*:0]u8, dw_app_cert_app_len_: u32, p_app_cert_s_p_: [*:0]u8, dw_app_cert_s_p_len_: u32, psz_revocation_u_r_l_: [*]?PWSTR, pdw_revocation_u_r_l_len_: ?*u32, pdw_revocation_bit_flag_: ?*u32, pqw_file_size_: ?*u64, p_unknown_: ?*IUnknown, pp_exchange_: ?*?*ISCPSecureExchange, ab_mac_: ?*u8) HRESULT {
                return @as(*const ISCPSecureQuery2.VTable, @ptrCast(self.vtable)).MakeDecision2(@as(*const ISCPSecureQuery2, @ptrCast(self)), fu_flags_, p_data_, dw_size_, dw_app_sec_, pb_s_p_session_key_, dw_session_key_len_, p_storage_globals_, p_app_cert_app_, dw_app_cert_app_len_, p_app_cert_s_p_, dw_app_cert_s_p_len_, psz_revocation_u_r_l_, pdw_revocation_u_r_l_len_, pdw_revocation_bit_flag_, pqw_file_size_, p_unknown_, pp_exchange_, ab_mac_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISCPSecureExchange_Value = Guid.initString("1dcb3a0e-33ed-11d3-8470-00c04f79dbc0");
pub const IID_ISCPSecureExchange = &IID_ISCPSecureExchange_Value;
pub const ISCPSecureExchange = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TransferContainerData: *const fn (
            self: *const ISCPSecureExchange,
            p_data: [*:0]u8,
            dw_size: u32,
            pfu_ready_flags: ?*u32,
            ab_mac: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ObjectData: *const fn (
            self: *const ISCPSecureExchange,
            p_data: [*:0]u8,
            pdw_size: ?*u32,
            ab_mac: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TransferComplete: *const fn (
            self: *const ISCPSecureExchange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn transferContainerData(self: *const T, p_data_: [*:0]u8, dw_size_: u32, pfu_ready_flags_: ?*u32, ab_mac_: ?*u8) HRESULT {
                return @as(*const ISCPSecureExchange.VTable, @ptrCast(self.vtable)).TransferContainerData(@as(*const ISCPSecureExchange, @ptrCast(self)), p_data_, dw_size_, pfu_ready_flags_, ab_mac_);
            }
            pub inline fn objectData(self: *const T, p_data_: [*:0]u8, pdw_size_: ?*u32, ab_mac_: ?*u8) HRESULT {
                return @as(*const ISCPSecureExchange.VTable, @ptrCast(self.vtable)).ObjectData(@as(*const ISCPSecureExchange, @ptrCast(self)), p_data_, pdw_size_, ab_mac_);
            }
            pub inline fn transferComplete(self: *const T) HRESULT {
                return @as(*const ISCPSecureExchange.VTable, @ptrCast(self.vtable)).TransferComplete(@as(*const ISCPSecureExchange, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISCPSecureExchange2_Value = Guid.initString("6c62fc7b-2690-483f-9d44-0a20cb35577c");
pub const IID_ISCPSecureExchange2 = &IID_ISCPSecureExchange2_Value;
pub const ISCPSecureExchange2 = extern struct {
    pub const VTable = extern struct {
        base: ISCPSecureExchange.VTable,
        TransferContainerData2: *const fn (
            self: *const ISCPSecureExchange2,
            p_data: [*:0]u8,
            dw_size: u32,
            p_progress_callback: ?*IWMDMProgress3,
            pfu_ready_flags: ?*u32,
            ab_mac: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISCPSecureExchange.MethodMixin(T);
            pub inline fn transferContainerData2(self: *const T, p_data_: [*:0]u8, dw_size_: u32, p_progress_callback_: ?*IWMDMProgress3, pfu_ready_flags_: ?*u32, ab_mac_: ?*u8) HRESULT {
                return @as(*const ISCPSecureExchange2.VTable, @ptrCast(self.vtable)).TransferContainerData2(@as(*const ISCPSecureExchange2, @ptrCast(self)), p_data_, dw_size_, p_progress_callback_, pfu_ready_flags_, ab_mac_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISCPSecureExchange3_Value = Guid.initString("ab4e77e4-8908-4b17-bd2a-b1dbe6dd69e1");
pub const IID_ISCPSecureExchange3 = &IID_ISCPSecureExchange3_Value;
pub const ISCPSecureExchange3 = extern struct {
    pub const VTable = extern struct {
        base: ISCPSecureExchange2.VTable,
        TransferContainerDataOnClearChannel: *const fn (
            self: *const ISCPSecureExchange3,
            p_device: ?*IMDSPDevice,
            p_data: [*:0]u8,
            dw_size: u32,
            p_progress_callback: ?*IWMDMProgress3,
            pfu_ready_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectDataOnClearChannel: *const fn (
            self: *const ISCPSecureExchange3,
            p_device: ?*IMDSPDevice,
            p_data: [*:0]u8,
            pdw_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TransferCompleteForDevice: *const fn (
            self: *const ISCPSecureExchange3,
            p_device: ?*IMDSPDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISCPSecureExchange2.MethodMixin(T);
            pub inline fn transferContainerDataOnClearChannel(self: *const T, p_device_: ?*IMDSPDevice, p_data_: [*:0]u8, dw_size_: u32, p_progress_callback_: ?*IWMDMProgress3, pfu_ready_flags_: ?*u32) HRESULT {
                return @as(*const ISCPSecureExchange3.VTable, @ptrCast(self.vtable)).TransferContainerDataOnClearChannel(@as(*const ISCPSecureExchange3, @ptrCast(self)), p_device_, p_data_, dw_size_, p_progress_callback_, pfu_ready_flags_);
            }
            pub inline fn getObjectDataOnClearChannel(self: *const T, p_device_: ?*IMDSPDevice, p_data_: [*:0]u8, pdw_size_: ?*u32) HRESULT {
                return @as(*const ISCPSecureExchange3.VTable, @ptrCast(self.vtable)).GetObjectDataOnClearChannel(@as(*const ISCPSecureExchange3, @ptrCast(self)), p_device_, p_data_, pdw_size_);
            }
            pub inline fn transferCompleteForDevice(self: *const T, p_device_: ?*IMDSPDevice) HRESULT {
                return @as(*const ISCPSecureExchange3.VTable, @ptrCast(self.vtable)).TransferCompleteForDevice(@as(*const ISCPSecureExchange3, @ptrCast(self)), p_device_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISCPSession_Value = Guid.initString("88a3e6ed-eee4-4619-bbb3-fd4fb62715d1");
pub const IID_ISCPSession = &IID_ISCPSession_Value;
pub const ISCPSession = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BeginSession: *const fn (
            self: *const ISCPSession,
            p_i_device: ?*IMDSPDevice,
            p_ctx: [*:0]u8,
            dw_size_ctx: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndSession: *const fn (
            self: *const ISCPSession,
            p_ctx: [*:0]u8,
            dw_size_ctx: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSecureQuery: *const fn (
            self: *const ISCPSession,
            pp_secure_query: ?*?*ISCPSecureQuery,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn beginSession(self: *const T, p_i_device_: ?*IMDSPDevice, p_ctx_: [*:0]u8, dw_size_ctx_: u32) HRESULT {
                return @as(*const ISCPSession.VTable, @ptrCast(self.vtable)).BeginSession(@as(*const ISCPSession, @ptrCast(self)), p_i_device_, p_ctx_, dw_size_ctx_);
            }
            pub inline fn endSession(self: *const T, p_ctx_: [*:0]u8, dw_size_ctx_: u32) HRESULT {
                return @as(*const ISCPSession.VTable, @ptrCast(self.vtable)).EndSession(@as(*const ISCPSession, @ptrCast(self)), p_ctx_, dw_size_ctx_);
            }
            pub inline fn getSecureQuery(self: *const T, pp_secure_query_: ?*?*ISCPSecureQuery) HRESULT {
                return @as(*const ISCPSession.VTable, @ptrCast(self.vtable)).GetSecureQuery(@as(*const ISCPSession, @ptrCast(self)), pp_secure_query_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISCPSecureQuery3_Value = Guid.initString("b7edd1a2-4dab-484b-b3c5-ad39b8b4c0b1");
pub const IID_ISCPSecureQuery3 = &IID_ISCPSecureQuery3_Value;
pub const ISCPSecureQuery3 = extern struct {
    pub const VTable = extern struct {
        base: ISCPSecureQuery2.VTable,
        GetRightsOnClearChannel: *const fn (
            self: *const ISCPSecureQuery3,
            p_data: [*:0]u8,
            dw_size: u32,
            pb_s_p_session_key: [*:0]u8,
            dw_session_key_len: u32,
            p_stg_globals: ?*IMDSPStorageGlobals,
            p_progress_callback: ?*IWMDMProgress3,
            pp_rights: [*]?*WMDMRIGHTS,
            pn_rights_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MakeDecisionOnClearChannel: *const fn (
            self: *const ISCPSecureQuery3,
            fu_flags: u32,
            p_data: [*:0]u8,
            dw_size: u32,
            dw_app_sec: u32,
            pb_s_p_session_key: [*:0]u8,
            dw_session_key_len: u32,
            p_storage_globals: ?*IMDSPStorageGlobals,
            p_progress_callback: ?*IWMDMProgress3,
            p_app_cert_app: [*:0]u8,
            dw_app_cert_app_len: u32,
            p_app_cert_s_p: [*:0]u8,
            dw_app_cert_s_p_len: u32,
            psz_revocation_u_r_l: [*]?PWSTR,
            pdw_revocation_u_r_l_len: ?*u32,
            pdw_revocation_bit_flag: ?*u32,
            pqw_file_size: ?*u64,
            p_unknown: ?*IUnknown,
            pp_exchange: ?*?*ISCPSecureExchange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISCPSecureQuery2.MethodMixin(T);
            pub inline fn getRightsOnClearChannel(self: *const T, p_data_: [*:0]u8, dw_size_: u32, pb_s_p_session_key_: [*:0]u8, dw_session_key_len_: u32, p_stg_globals_: ?*IMDSPStorageGlobals, p_progress_callback_: ?*IWMDMProgress3, pp_rights_: [*]?*WMDMRIGHTS, pn_rights_count_: ?*u32) HRESULT {
                return @as(*const ISCPSecureQuery3.VTable, @ptrCast(self.vtable)).GetRightsOnClearChannel(@as(*const ISCPSecureQuery3, @ptrCast(self)), p_data_, dw_size_, pb_s_p_session_key_, dw_session_key_len_, p_stg_globals_, p_progress_callback_, pp_rights_, pn_rights_count_);
            }
            pub inline fn makeDecisionOnClearChannel(self: *const T, fu_flags_: u32, p_data_: [*:0]u8, dw_size_: u32, dw_app_sec_: u32, pb_s_p_session_key_: [*:0]u8, dw_session_key_len_: u32, p_storage_globals_: ?*IMDSPStorageGlobals, p_progress_callback_: ?*IWMDMProgress3, p_app_cert_app_: [*:0]u8, dw_app_cert_app_len_: u32, p_app_cert_s_p_: [*:0]u8, dw_app_cert_s_p_len_: u32, psz_revocation_u_r_l_: [*]?PWSTR, pdw_revocation_u_r_l_len_: ?*u32, pdw_revocation_bit_flag_: ?*u32, pqw_file_size_: ?*u64, p_unknown_: ?*IUnknown, pp_exchange_: ?*?*ISCPSecureExchange) HRESULT {
                return @as(*const ISCPSecureQuery3.VTable, @ptrCast(self.vtable)).MakeDecisionOnClearChannel(@as(*const ISCPSecureQuery3, @ptrCast(self)), fu_flags_, p_data_, dw_size_, dw_app_sec_, pb_s_p_session_key_, dw_session_key_len_, p_storage_globals_, p_progress_callback_, p_app_cert_app_, dw_app_cert_app_len_, p_app_cert_s_p_, dw_app_cert_s_p_len_, psz_revocation_u_r_l_, pdw_revocation_u_r_l_len_, pdw_revocation_bit_flag_, pqw_file_size_, p_unknown_, pp_exchange_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IComponentAuthenticate_Value = Guid.initString("a9889c00-6d2b-11d3-8496-00c04f79dbc0");
pub const IID_IComponentAuthenticate = &IID_IComponentAuthenticate_Value;
pub const IComponentAuthenticate = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SACAuth: *const fn (
            self: *const IComponentAuthenticate,
            dw_protocol_i_d: u32,
            dw_pass: u32,
            pb_data_in: [*:0]u8,
            dw_data_in_len: u32,
            ppb_data_out: [*]?*u8,
            pdw_data_out_len: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SACGetProtocols: *const fn (
            self: *const IComponentAuthenticate,
            ppdw_protocols: [*]?*u32,
            pdw_protocol_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn sacAuth(self: *const T, dw_protocol_i_d_: u32, dw_pass_: u32, pb_data_in_: [*:0]u8, dw_data_in_len_: u32, ppb_data_out_: [*]?*u8, pdw_data_out_len_: ?*u32) HRESULT {
                return @as(*const IComponentAuthenticate.VTable, @ptrCast(self.vtable)).SACAuth(@as(*const IComponentAuthenticate, @ptrCast(self)), dw_protocol_i_d_, dw_pass_, pb_data_in_, dw_data_in_len_, ppb_data_out_, pdw_data_out_len_);
            }
            pub inline fn sacGetProtocols(self: *const T, ppdw_protocols_: [*]?*u32, pdw_protocol_count_: ?*u32) HRESULT {
                return @as(*const IComponentAuthenticate.VTable, @ptrCast(self.vtable)).SACGetProtocols(@as(*const IComponentAuthenticate, @ptrCast(self)), ppdw_protocols_, pdw_protocol_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_WMDMLogger_Value = Guid.initString("110a3202-5a79-11d3-8d78-444553540000");
pub const CLSID_WMDMLogger = &CLSID_WMDMLogger_Value;

const IID_IWMDMLogger_Value = Guid.initString("110a3200-5a79-11d3-8d78-444553540000");
pub const IID_IWMDMLogger = &IID_IWMDMLogger_Value;
pub const IWMDMLogger = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsEnabled: *const fn (
            self: *const IWMDMLogger,
            pf_enabled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: *const fn (
            self: *const IWMDMLogger,
            f_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLogFileName: *const fn (
            self: *const IWMDMLogger,
            psz_filename: ?PSTR,
            n_max_chars: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLogFileName: *const fn (
            self: *const IWMDMLogger,
            psz_filename: ?PSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LogString: *const fn (
            self: *const IWMDMLogger,
            dw_flags: u32,
            psz_src_name: ?PSTR,
            psz_log: ?PSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LogDword: *const fn (
            self: *const IWMDMLogger,
            dw_flags: u32,
            psz_src_name: ?PSTR,
            psz_log_format: ?PSTR,
            dw_log: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IWMDMLogger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSizeParams: *const fn (
            self: *const IWMDMLogger,
            pdw_max_size: ?*u32,
            pdw_shrink_to_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSizeParams: *const fn (
            self: *const IWMDMLogger,
            dw_max_size: u32,
            dw_shrink_to_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isEnabled(self: *const T, pf_enabled_: ?*BOOL) HRESULT {
                return @as(*const IWMDMLogger.VTable, @ptrCast(self.vtable)).IsEnabled(@as(*const IWMDMLogger, @ptrCast(self)), pf_enabled_);
            }
            pub inline fn enable(self: *const T, f_enable_: BOOL) HRESULT {
                return @as(*const IWMDMLogger.VTable, @ptrCast(self.vtable)).Enable(@as(*const IWMDMLogger, @ptrCast(self)), f_enable_);
            }
            pub inline fn getLogFileName(self: *const T, psz_filename_: ?PSTR, n_max_chars_: u32) HRESULT {
                return @as(*const IWMDMLogger.VTable, @ptrCast(self.vtable)).GetLogFileName(@as(*const IWMDMLogger, @ptrCast(self)), psz_filename_, n_max_chars_);
            }
            pub inline fn setLogFileName(self: *const T, psz_filename_: ?PSTR) HRESULT {
                return @as(*const IWMDMLogger.VTable, @ptrCast(self.vtable)).SetLogFileName(@as(*const IWMDMLogger, @ptrCast(self)), psz_filename_);
            }
            pub inline fn logString(self: *const T, dw_flags_: u32, psz_src_name_: ?PSTR, psz_log_: ?PSTR) HRESULT {
                return @as(*const IWMDMLogger.VTable, @ptrCast(self.vtable)).LogString(@as(*const IWMDMLogger, @ptrCast(self)), dw_flags_, psz_src_name_, psz_log_);
            }
            pub inline fn logDword(self: *const T, dw_flags_: u32, psz_src_name_: ?PSTR, psz_log_format_: ?PSTR, dw_log_: u32) HRESULT {
                return @as(*const IWMDMLogger.VTable, @ptrCast(self.vtable)).LogDword(@as(*const IWMDMLogger, @ptrCast(self)), dw_flags_, psz_src_name_, psz_log_format_, dw_log_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IWMDMLogger.VTable, @ptrCast(self.vtable)).Reset(@as(*const IWMDMLogger, @ptrCast(self)));
            }
            pub inline fn getSizeParams(self: *const T, pdw_max_size_: ?*u32, pdw_shrink_to_size_: ?*u32) HRESULT {
                return @as(*const IWMDMLogger.VTable, @ptrCast(self.vtable)).GetSizeParams(@as(*const IWMDMLogger, @ptrCast(self)), pdw_max_size_, pdw_shrink_to_size_);
            }
            pub inline fn setSizeParams(self: *const T, dw_max_size_: u32, dw_shrink_to_size_: u32) HRESULT {
                return @as(*const IWMDMLogger.VTable, @ptrCast(self.vtable)).SetSizeParams(@as(*const IWMDMLogger, @ptrCast(self)), dw_max_size_, dw_shrink_to_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const MTP_COMMAND_DATA_IN = extern struct {
    OpCode: u16 align(1),
    NumParams: u32 align(1),
    Params: [5]u32 align(1),
    NextPhase: u32 align(1),
    CommandWriteDataSize: u32 align(1),
    CommandWriteData: [1]u8 align(1),
};

pub const MTP_COMMAND_DATA_OUT = extern struct {
    ResponseCode: u16 align(1),
    NumParams: u32 align(1),
    Params: [5]u32 align(1),
    CommandReadDataSize: u32 align(1),
    CommandReadData: [1]u8 align(1),
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (9)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const HRESULT = @import("../foundation.zig").HRESULT;
const ISpecifyPropertyPages = @import("../system/ole.zig").ISpecifyPropertyPages;
const IUnknown = @import("../system/com.zig").IUnknown;
const PROPVARIANT = @import("../system/com/structured_storage.zig").PROPVARIANT;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const RECT = @import("../foundation.zig").RECT;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
