//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (342)
//--------------------------------------------------------------------------------
pub const WMT_VIDEOIMAGE_SAMPLE_INPUT_FRAME = @as(u32, 1);
pub const WMT_VIDEOIMAGE_SAMPLE_OUTPUT_FRAME = @as(u32, 2);
pub const WMT_VIDEOIMAGE_SAMPLE_USES_CURRENT_INPUT_FRAME = @as(u32, 4);
pub const WMT_VIDEOIMAGE_SAMPLE_USES_PREVIOUS_INPUT_FRAME = @as(u32, 8);
pub const WMT_VIDEOIMAGE_SAMPLE_MOTION = @as(u32, 1);
pub const WMT_VIDEOIMAGE_SAMPLE_ROTATION = @as(u32, 2);
pub const WMT_VIDEOIMAGE_SAMPLE_BLENDING = @as(u32, 4);
pub const WMT_VIDEOIMAGE_SAMPLE_ADV_BLENDING = @as(u32, 8);
pub const WMT_VIDEOIMAGE_INTEGER_DENOMINATOR = @as(i32, 65536);
pub const WMT_VIDEOIMAGE_MAGIC_NUMBER = @as(u32, 491406834);
pub const WMT_VIDEOIMAGE_MAGIC_NUMBER_2 = @as(u32, 491406835);
pub const WMT_VIDEOIMAGE_TRANSITION_BOW_TIE = @as(u32, 11);
pub const WMT_VIDEOIMAGE_TRANSITION_CIRCLE = @as(u32, 12);
pub const WMT_VIDEOIMAGE_TRANSITION_CROSS_FADE = @as(u32, 13);
pub const WMT_VIDEOIMAGE_TRANSITION_DIAGONAL = @as(u32, 14);
pub const WMT_VIDEOIMAGE_TRANSITION_DIAMOND = @as(u32, 15);
pub const WMT_VIDEOIMAGE_TRANSITION_FADE_TO_COLOR = @as(u32, 16);
pub const WMT_VIDEOIMAGE_TRANSITION_FILLED_V = @as(u32, 17);
pub const WMT_VIDEOIMAGE_TRANSITION_FLIP = @as(u32, 18);
pub const WMT_VIDEOIMAGE_TRANSITION_INSET = @as(u32, 19);
pub const WMT_VIDEOIMAGE_TRANSITION_IRIS = @as(u32, 20);
pub const WMT_VIDEOIMAGE_TRANSITION_PAGE_ROLL = @as(u32, 21);
pub const WMT_VIDEOIMAGE_TRANSITION_RECTANGLE = @as(u32, 23);
pub const WMT_VIDEOIMAGE_TRANSITION_REVEAL = @as(u32, 24);
pub const WMT_VIDEOIMAGE_TRANSITION_SLIDE = @as(u32, 27);
pub const WMT_VIDEOIMAGE_TRANSITION_SPLIT = @as(u32, 29);
pub const WMT_VIDEOIMAGE_TRANSITION_STAR = @as(u32, 30);
pub const WMT_VIDEOIMAGE_TRANSITION_WHEEL = @as(u32, 31);
pub const WM_SampleExtension_ContentType_Size = @as(u32, 1);
pub const WM_SampleExtension_PixelAspectRatio_Size = @as(u32, 2);
pub const WM_SampleExtension_Timecode_Size = @as(u32, 14);
pub const WM_SampleExtension_SampleDuration_Size = @as(u32, 2);
pub const WM_SampleExtension_ChromaLocation_Size = @as(u32, 1);
pub const WM_SampleExtension_ColorSpaceInfo_Size = @as(u32, 3);
pub const WM_CT_REPEAT_FIRST_FIELD = @as(u32, 16);
pub const WM_CT_BOTTOM_FIELD_FIRST = @as(u32, 32);
pub const WM_CT_TOP_FIELD_FIRST = @as(u32, 64);
pub const WM_CT_INTERLACED = @as(u32, 128);
pub const WM_CL_INTERLACED420 = @as(u32, 0);
pub const WM_CL_PROGRESSIVE420 = @as(u32, 1);
pub const WM_MAX_VIDEO_STREAMS = @as(u32, 63);
pub const WM_MAX_STREAMS = @as(u32, 63);
pub const WMDRM_IMPORT_INIT_STRUCT_DEFINED = @as(u32, 1);
pub const DRM_OPL_TYPES = @as(u32, 1);
pub const g_dwWMSpecialAttributes = @as(u32, 20);
pub const g_wszWMDuration = "Duration";
pub const g_wszWMBitrate = "Bitrate";
pub const g_wszWMSeekable = "Seekable";
pub const g_wszWMStridable = "Stridable";
pub const g_wszWMBroadcast = "Broadcast";
pub const g_wszWMProtected = "Is_Protected";
pub const g_wszWMTrusted = "Is_Trusted";
pub const g_wszWMSignature_Name = "Signature_Name";
pub const g_wszWMHasAudio = "HasAudio";
pub const g_wszWMHasImage = "HasImage";
pub const g_wszWMHasScript = "HasScript";
pub const g_wszWMHasVideo = "HasVideo";
pub const g_wszWMCurrentBitrate = "CurrentBitrate";
pub const g_wszWMOptimalBitrate = "OptimalBitrate";
pub const g_wszWMHasAttachedImages = "HasAttachedImages";
pub const g_wszWMSkipBackward = "Can_Skip_Backward";
pub const g_wszWMSkipForward = "Can_Skip_Forward";
pub const g_wszWMNumberOfFrames = "NumberOfFrames";
pub const g_wszWMFileSize = "FileSize";
pub const g_wszWMHasArbitraryDataStream = "HasArbitraryDataStream";
pub const g_wszWMHasFileTransferStream = "HasFileTransferStream";
pub const g_wszWMContainerFormat = "WM/ContainerFormat";
pub const g_dwWMContentAttributes = @as(u32, 5);
pub const g_wszWMTitle = "Title";
pub const g_wszWMTitleSort = "TitleSort";
pub const g_wszWMAuthor = "Author";
pub const g_wszWMAuthorSort = "AuthorSort";
pub const g_wszWMDescription = "Description";
pub const g_wszWMRating = "Rating";
pub const g_wszWMCopyright = "Copyright";
pub const g_wszWMUse_DRM = "Use_DRM";
pub const g_wszWMDRM_Flags = "DRM_Flags";
pub const g_wszWMDRM_Level = "DRM_Level";
pub const g_wszWMUse_Advanced_DRM = "Use_Advanced_DRM";
pub const g_wszWMDRM_KeySeed = "DRM_KeySeed";
pub const g_wszWMDRM_KeyID = "DRM_KeyID";
pub const g_wszWMDRM_ContentID = "DRM_ContentID";
pub const g_wszWMDRM_SourceID = "DRM_SourceID";
pub const g_wszWMDRM_IndividualizedVersion = "DRM_IndividualizedVersion";
pub const g_wszWMDRM_LicenseAcqURL = "DRM_LicenseAcqURL";
pub const g_wszWMDRM_V1LicenseAcqURL = "DRM_V1LicenseAcqURL";
pub const g_wszWMDRM_HeaderSignPrivKey = "DRM_HeaderSignPrivKey";
pub const g_wszWMDRM_LASignaturePrivKey = "DRM_LASignaturePrivKey";
pub const g_wszWMDRM_LASignatureCert = "DRM_LASignatureCert";
pub const g_wszWMDRM_LASignatureLicSrvCert = "DRM_LASignatureLicSrvCert";
pub const g_wszWMDRM_LASignatureRootCert = "DRM_LASignatureRootCert";
pub const g_wszWMAlbumTitle = "WM/AlbumTitle";
pub const g_wszWMAlbumTitleSort = "WM/AlbumTitleSort";
pub const g_wszWMTrack = "WM/Track";
pub const g_wszWMPromotionURL = "WM/PromotionURL";
pub const g_wszWMAlbumCoverURL = "WM/AlbumCoverURL";
pub const g_wszWMGenre = "WM/Genre";
pub const g_wszWMYear = "WM/Year";
pub const g_wszWMGenreID = "WM/GenreID";
pub const g_wszWMMCDI = "WM/MCDI";
pub const g_wszWMComposer = "WM/Composer";
pub const g_wszWMComposerSort = "WM/ComposerSort";
pub const g_wszWMLyrics = "WM/Lyrics";
pub const g_wszWMTrackNumber = "WM/TrackNumber";
pub const g_wszWMToolName = "WM/ToolName";
pub const g_wszWMToolVersion = "WM/ToolVersion";
pub const g_wszWMIsVBR = "IsVBR";
pub const g_wszWMAlbumArtist = "WM/AlbumArtist";
pub const g_wszWMAlbumArtistSort = "WM/AlbumArtistSort";
pub const g_wszWMBannerImageType = "BannerImageType";
pub const g_wszWMBannerImageData = "BannerImageData";
pub const g_wszWMBannerImageURL = "BannerImageURL";
pub const g_wszWMCopyrightURL = "CopyrightURL";
pub const g_wszWMAspectRatioX = "AspectRatioX";
pub const g_wszWMAspectRatioY = "AspectRatioY";
pub const g_wszASFLeakyBucketPairs = "ASFLeakyBucketPairs";
pub const g_dwWMNSCAttributes = @as(u32, 5);
pub const g_wszWMNSCName = "NSC_Name";
pub const g_wszWMNSCAddress = "NSC_Address";
pub const g_wszWMNSCPhone = "NSC_Phone";
pub const g_wszWMNSCEmail = "NSC_Email";
pub const g_wszWMNSCDescription = "NSC_Description";
pub const g_wszWMWriter = "WM/Writer";
pub const g_wszWMConductor = "WM/Conductor";
pub const g_wszWMProducer = "WM/Producer";
pub const g_wszWMDirector = "WM/Director";
pub const g_wszWMContentGroupDescription = "WM/ContentGroupDescription";
pub const g_wszWMSubTitle = "WM/SubTitle";
pub const g_wszWMPartOfSet = "WM/PartOfSet";
pub const g_wszWMProtectionType = "WM/ProtectionType";
pub const g_wszWMVideoHeight = "WM/VideoHeight";
pub const g_wszWMVideoWidth = "WM/VideoWidth";
pub const g_wszWMVideoFrameRate = "WM/VideoFrameRate";
pub const g_wszWMMediaClassPrimaryID = "WM/MediaClassPrimaryID";
pub const g_wszWMMediaClassSecondaryID = "WM/MediaClassSecondaryID";
pub const g_wszWMPeriod = "WM/Period";
pub const g_wszWMCategory = "WM/Category";
pub const g_wszWMPicture = "WM/Picture";
pub const g_wszWMLyrics_Synchronised = "WM/Lyrics_Synchronised";
pub const g_wszWMOriginalLyricist = "WM/OriginalLyricist";
pub const g_wszWMOriginalArtist = "WM/OriginalArtist";
pub const g_wszWMOriginalAlbumTitle = "WM/OriginalAlbumTitle";
pub const g_wszWMOriginalReleaseYear = "WM/OriginalReleaseYear";
pub const g_wszWMOriginalFilename = "WM/OriginalFilename";
pub const g_wszWMPublisher = "WM/Publisher";
pub const g_wszWMEncodedBy = "WM/EncodedBy";
pub const g_wszWMEncodingSettings = "WM/EncodingSettings";
pub const g_wszWMEncodingTime = "WM/EncodingTime";
pub const g_wszWMAuthorURL = "WM/AuthorURL";
pub const g_wszWMUserWebURL = "WM/UserWebURL";
pub const g_wszWMAudioFileURL = "WM/AudioFileURL";
pub const g_wszWMAudioSourceURL = "WM/AudioSourceURL";
pub const g_wszWMLanguage = "WM/Language";
pub const g_wszWMParentalRating = "WM/ParentalRating";
pub const g_wszWMBeatsPerMinute = "WM/BeatsPerMinute";
pub const g_wszWMInitialKey = "WM/InitialKey";
pub const g_wszWMMood = "WM/Mood";
pub const g_wszWMText = "WM/Text";
pub const g_wszWMDVDID = "WM/DVDID";
pub const g_wszWMWMContentID = "WM/WMContentID";
pub const g_wszWMWMCollectionID = "WM/WMCollectionID";
pub const g_wszWMWMCollectionGroupID = "WM/WMCollectionGroupID";
pub const g_wszWMUniqueFileIdentifier = "WM/UniqueFileIdentifier";
pub const g_wszWMModifiedBy = "WM/ModifiedBy";
pub const g_wszWMRadioStationName = "WM/RadioStationName";
pub const g_wszWMRadioStationOwner = "WM/RadioStationOwner";
pub const g_wszWMPlaylistDelay = "WM/PlaylistDelay";
pub const g_wszWMCodec = "WM/Codec";
pub const g_wszWMDRM = "WM/DRM";
pub const g_wszWMISRC = "WM/ISRC";
pub const g_wszWMProvider = "WM/Provider";
pub const g_wszWMProviderRating = "WM/ProviderRating";
pub const g_wszWMProviderStyle = "WM/ProviderStyle";
pub const g_wszWMContentDistributor = "WM/ContentDistributor";
pub const g_wszWMSubscriptionContentID = "WM/SubscriptionContentID";
pub const g_wszWMWMADRCPeakReference = "WM/WMADRCPeakReference";
pub const g_wszWMWMADRCPeakTarget = "WM/WMADRCPeakTarget";
pub const g_wszWMWMADRCAverageReference = "WM/WMADRCAverageReference";
pub const g_wszWMWMADRCAverageTarget = "WM/WMADRCAverageTarget";
pub const g_wszWMStreamTypeInfo = "WM/StreamTypeInfo";
pub const g_wszWMPeakBitrate = "WM/PeakBitrate";
pub const g_wszWMASFPacketCount = "WM/ASFPacketCount";
pub const g_wszWMASFSecurityObjectsSize = "WM/ASFSecurityObjectsSize";
pub const g_wszWMSharedUserRating = "WM/SharedUserRating";
pub const g_wszWMSubTitleDescription = "WM/SubTitleDescription";
pub const g_wszWMMediaCredits = "WM/MediaCredits";
pub const g_wszWMParentalRatingReason = "WM/ParentalRatingReason";
pub const g_wszWMOriginalReleaseTime = "WM/OriginalReleaseTime";
pub const g_wszWMMediaStationCallSign = "WM/MediaStationCallSign";
pub const g_wszWMMediaStationName = "WM/MediaStationName";
pub const g_wszWMMediaNetworkAffiliation = "WM/MediaNetworkAffiliation";
pub const g_wszWMMediaOriginalChannel = "WM/MediaOriginalChannel";
pub const g_wszWMMediaOriginalBroadcastDateTime = "WM/MediaOriginalBroadcastDateTime";
pub const g_wszWMMediaIsStereo = "WM/MediaIsStereo";
pub const g_wszWMVideoClosedCaptioning = "WM/VideoClosedCaptioning";
pub const g_wszWMMediaIsRepeat = "WM/MediaIsRepeat";
pub const g_wszWMMediaIsLive = "WM/MediaIsLive";
pub const g_wszWMMediaIsTape = "WM/MediaIsTape";
pub const g_wszWMMediaIsDelay = "WM/MediaIsDelay";
pub const g_wszWMMediaIsSubtitled = "WM/MediaIsSubtitled";
pub const g_wszWMMediaIsPremiere = "WM/MediaIsPremiere";
pub const g_wszWMMediaIsFinale = "WM/MediaIsFinale";
pub const g_wszWMMediaIsSAP = "WM/MediaIsSAP";
pub const g_wszWMProviderCopyright = "WM/ProviderCopyright";
pub const g_wszWMISAN = "WM/ISAN";
pub const g_wszWMADID = "WM/ADID";
pub const g_wszWMWMShadowFileSourceFileType = "WM/WMShadowFileSourceFileType";
pub const g_wszWMWMShadowFileSourceDRMType = "WM/WMShadowFileSourceDRMType";
pub const g_wszWMWMCPDistributor = "WM/WMCPDistributor";
pub const g_wszWMWMCPDistributorID = "WM/WMCPDistributorID";
pub const g_wszWMSeasonNumber = "WM/SeasonNumber";
pub const g_wszWMEpisodeNumber = "WM/EpisodeNumber";
pub const g_wszEarlyDataDelivery = "EarlyDataDelivery";
pub const g_wszJustInTimeDecode = "JustInTimeDecode";
pub const g_wszSingleOutputBuffer = "SingleOutputBuffer";
pub const g_wszSoftwareScaling = "SoftwareScaling";
pub const g_wszDeliverOnReceive = "DeliverOnReceive";
pub const g_wszScrambledAudio = "ScrambledAudio";
pub const g_wszDedicatedDeliveryThread = "DedicatedDeliveryThread";
pub const g_wszEnableDiscreteOutput = "EnableDiscreteOutput";
pub const g_wszSpeakerConfig = "SpeakerConfig";
pub const g_wszDynamicRangeControl = "DynamicRangeControl";
pub const g_wszAllowInterlacedOutput = "AllowInterlacedOutput";
pub const g_wszVideoSampleDurations = "VideoSampleDurations";
pub const g_wszStreamLanguage = "StreamLanguage";
pub const g_wszEnableWMAProSPDIFOutput = "EnableWMAProSPDIFOutput";
pub const g_wszDeinterlaceMode = "DeinterlaceMode";
pub const g_wszInitialPatternForInverseTelecine = "InitialPatternForInverseTelecine";
pub const g_wszJPEGCompressionQuality = "JPEGCompressionQuality";
pub const g_wszWatermarkCLSID = "WatermarkCLSID";
pub const g_wszWatermarkConfig = "WatermarkConfig";
pub const g_wszInterlacedCoding = "InterlacedCoding";
pub const g_wszFixedFrameRate = "FixedFrameRate";
pub const g_wszOriginalSourceFormatTag = "_SOURCEFORMATTAG";
pub const g_wszOriginalWaveFormat = "_ORIGINALWAVEFORMAT";
pub const g_wszEDL = "_EDL";
pub const g_wszComplexity = "_COMPLEXITYEX";
pub const g_wszDecoderComplexityRequested = "_DECODERCOMPLEXITYPROFILE";
pub const g_wszReloadIndexOnSeek = "ReloadIndexOnSeek";
pub const g_wszStreamNumIndexObjects = "StreamNumIndexObjects";
pub const g_wszFailSeekOnError = "FailSeekOnError";
pub const g_wszPermitSeeksBeyondEndOfStream = "PermitSeeksBeyondEndOfStream";
pub const g_wszUsePacketAtSeekPoint = "UsePacketAtSeekPoint";
pub const g_wszSourceBufferTime = "SourceBufferTime";
pub const g_wszSourceMaxBytesAtOnce = "SourceMaxBytesAtOnce";
pub const g_wszVBREnabled = "_VBRENABLED";
pub const g_wszVBRQuality = "_VBRQUALITY";
pub const g_wszVBRBitrateMax = "_RMAX";
pub const g_wszVBRBufferWindowMax = "_BMAX";
pub const g_wszVBRPeak = "VBR Peak";
pub const g_wszBufferAverage = "Buffer Average";
pub const g_wszComplexityMax = "_COMPLEXITYEXMAX";
pub const g_wszComplexityOffline = "_COMPLEXITYEXOFFLINE";
pub const g_wszComplexityLive = "_COMPLEXITYEXLIVE";
pub const g_wszIsVBRSupported = "_ISVBRSUPPORTED";
pub const g_wszNumPasses = "_PASSESUSED";
pub const g_wszMusicSpeechClassMode = "MusicSpeechClassMode";
pub const g_wszMusicClassMode = "MusicClassMode";
pub const g_wszSpeechClassMode = "SpeechClassMode";
pub const g_wszMixedClassMode = "MixedClassMode";
pub const g_wszSpeechCaps = "SpeechFormatCap";
pub const g_wszPeakValue = "PeakValue";
pub const g_wszAverageLevel = "AverageLevel";
pub const g_wszFold6To2Channels3 = "Fold6To2Channels3";
pub const g_wszFoldToChannelsTemplate = "Fold%luTo%luChannels%lu";
pub const g_wszDeviceConformanceTemplate = "DeviceConformanceTemplate";
pub const g_wszEnableFrameInterpolation = "EnableFrameInterpolation";
pub const g_wszNeedsPreviousSample = "NeedsPreviousSample";
pub const g_wszWMIsCompilation = "WM/IsCompilation";
pub const WMMEDIASUBTYPE_Base = Guid.initString("00000000-0000-0010-8000-00aa00389b71");
pub const WMMEDIATYPE_Video = Guid.initString("73646976-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_RGB1 = Guid.initString("e436eb78-524f-11ce-9f53-0020af0ba770");
pub const WMMEDIASUBTYPE_RGB4 = Guid.initString("e436eb79-524f-11ce-9f53-0020af0ba770");
pub const WMMEDIASUBTYPE_RGB8 = Guid.initString("e436eb7a-524f-11ce-9f53-0020af0ba770");
pub const WMMEDIASUBTYPE_RGB565 = Guid.initString("e436eb7b-524f-11ce-9f53-0020af0ba770");
pub const WMMEDIASUBTYPE_RGB555 = Guid.initString("e436eb7c-524f-11ce-9f53-0020af0ba770");
pub const WMMEDIASUBTYPE_RGB24 = Guid.initString("e436eb7d-524f-11ce-9f53-0020af0ba770");
pub const WMMEDIASUBTYPE_RGB32 = Guid.initString("e436eb7e-524f-11ce-9f53-0020af0ba770");
pub const WMMEDIASUBTYPE_I420 = Guid.initString("30323449-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_IYUV = Guid.initString("56555949-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_YV12 = Guid.initString("32315659-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_YUY2 = Guid.initString("32595559-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_P422 = Guid.initString("32323450-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_UYVY = Guid.initString("59565955-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_YVYU = Guid.initString("55595659-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_YVU9 = Guid.initString("39555659-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_VIDEOIMAGE = Guid.initString("1d4a45f2-e5f6-4b44-8388-f0ae5c0e0c37");
pub const WMMEDIASUBTYPE_MP43 = Guid.initString("3334504d-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_MP4S = Guid.initString("5334504d-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_M4S2 = Guid.initString("3253344d-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMV1 = Guid.initString("31564d57-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMV2 = Guid.initString("32564d57-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_MSS1 = Guid.initString("3153534d-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_MPEG2_VIDEO = Guid.initString("e06d8026-db46-11cf-b4d1-00805f6cbbea");
pub const WMMEDIATYPE_Audio = Guid.initString("73647561-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_PCM = Guid.initString("00000001-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_DRM = Guid.initString("00000009-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMAudioV9 = Guid.initString("00000162-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMAudio_Lossless = Guid.initString("00000163-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_MSS2 = Guid.initString("3253534d-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMSP1 = Guid.initString("0000000a-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMSP2 = Guid.initString("0000000b-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMV3 = Guid.initString("33564d57-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMVP = Guid.initString("50564d57-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WVP2 = Guid.initString("32505657-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMVA = Guid.initString("41564d57-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WVC1 = Guid.initString("31435657-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMAudioV8 = Guid.initString("00000161-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMAudioV7 = Guid.initString("00000161-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WMAudioV2 = Guid.initString("00000161-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_ACELPnet = Guid.initString("00000130-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_MP3 = Guid.initString("00000055-0000-0010-8000-00aa00389b71");
pub const WMMEDIASUBTYPE_WebStream = Guid.initString("776257d4-c627-41cb-8f81-7ac7ff1c40cc");
pub const WMMEDIATYPE_Script = Guid.initString("73636d64-0000-0010-8000-00aa00389b71");
pub const WMMEDIATYPE_Image = Guid.initString("34a50fd8-8aa5-4386-81fe-a0efe0488e31");
pub const WMMEDIATYPE_FileTransfer = Guid.initString("d9e47579-930e-4427-adfc-ad80f290e470");
pub const WMMEDIATYPE_Text = Guid.initString("9bba1ea7-5ab2-4829-ba57-0940209bcf3e");
pub const WMFORMAT_VideoInfo = Guid.initString("05589f80-c356-11ce-bf01-00aa0055595a");
pub const WMFORMAT_MPEG2Video = Guid.initString("e06d80e3-db46-11cf-b4d1-00805f6cbbea");
pub const WMFORMAT_WaveFormatEx = Guid.initString("05589f81-c356-11ce-bf01-00aa0055595a");
pub const WMFORMAT_Script = Guid.initString("5c8510f2-debe-4ca7-bba5-f07a104f8dff");
pub const WMFORMAT_WebStream = Guid.initString("da1e6b13-8359-4050-b398-388e965bf00c");
pub const WMSCRIPTTYPE_TwoStrings = Guid.initString("82f38a70-c29f-11d1-97ad-00a0c95ea850");
pub const WM_SampleExtensionGUID_OutputCleanPoint = Guid.initString("f72a3c6f-6eb4-4ebc-b192-09ad9759e828");
pub const WM_SampleExtensionGUID_Timecode = Guid.initString("399595ec-8667-4e2d-8fdb-98814ce76c1e");
pub const WM_SampleExtensionGUID_ChromaLocation = Guid.initString("4c5acca0-9276-4b2c-9e4c-a0edefdd217e");
pub const WM_SampleExtensionGUID_ColorSpaceInfo = Guid.initString("f79ada56-30eb-4f2b-9f7a-f24b139a1157");
pub const WM_SampleExtensionGUID_UserDataInfo = Guid.initString("732bb4fa-78be-4549-99bd-02db1a55b7a8");
pub const WM_SampleExtensionGUID_FileName = Guid.initString("e165ec0e-19ed-45d7-b4a7-25cbd1e28e9b");
pub const WM_SampleExtensionGUID_ContentType = Guid.initString("d590dc20-07bc-436c-9cf7-f3bbfbf1a4dc");
pub const WM_SampleExtensionGUID_PixelAspectRatio = Guid.initString("1b1ee554-f9ea-4bc8-821a-376b74e4c4b8");
pub const WM_SampleExtensionGUID_SampleDuration = Guid.initString("c6bd9450-867f-4907-83a3-c77921b733ad");
pub const WM_SampleExtensionGUID_SampleProtectionSalt = Guid.initString("5403deee-b9ee-438f-aa83-3804997e569d");
pub const CLSID_WMMUTEX_Language = Guid.initString("d6e22a00-35da-11d1-9034-00a0c90349be");
pub const CLSID_WMMUTEX_Bitrate = Guid.initString("d6e22a01-35da-11d1-9034-00a0c90349be");
pub const CLSID_WMMUTEX_Presentation = Guid.initString("d6e22a02-35da-11d1-9034-00a0c90349be");
pub const CLSID_WMMUTEX_Unknown = Guid.initString("d6e22a03-35da-11d1-9034-00a0c90349be");
pub const CLSID_WMBandwidthSharing_Exclusive = Guid.initString("af6060aa-5197-11d2-b6af-00c04fd908e9");
pub const CLSID_WMBandwidthSharing_Partial = Guid.initString("af6060ab-5197-11d2-b6af-00c04fd908e9");
pub const WMT_DMOCATEGORY_AUDIO_WATERMARK = Guid.initString("65221c5a-fa75-4b39-b50c-06c336b6a3ef");
pub const WMT_DMOCATEGORY_VIDEO_WATERMARK = Guid.initString("187cc922-8efc-4404-9daf-63f4830df1bc");
pub const CLSID_ClientNetManager = Guid.initString("cd12a3ce-9c42-11d2-beed-0060082f2054");

//--------------------------------------------------------------------------------
// Section: Types (180)
//--------------------------------------------------------------------------------
const IID_IAMWMBufferPass_Value = Guid.initString("6dd816d7-e740-4123-9e24-2444412644d8");
pub const IID_IAMWMBufferPass = &IID_IAMWMBufferPass_Value;
pub const IAMWMBufferPass = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetNotify: *const fn (
            self: *const IAMWMBufferPass,
            p_callback: ?*IAMWMBufferPassCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setNotify(self: *const T, p_callback_: ?*IAMWMBufferPassCallback) HRESULT {
                return @as(*const IAMWMBufferPass.VTable, @ptrCast(self.vtable)).SetNotify(@as(*const IAMWMBufferPass, @ptrCast(self)), p_callback_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IAMWMBufferPassCallback_Value = Guid.initString("b25b8372-d2d2-44b2-8653-1b8dae332489");
pub const IID_IAMWMBufferPassCallback = &IID_IAMWMBufferPassCallback_Value;
pub const IAMWMBufferPassCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Notify: *const fn (
            self: *const IAMWMBufferPassCallback,
            p_n_s_s_buffer3: ?*INSSBuffer3,
            p_pin: ?*IPin,
            prt_start: ?*i64,
            prt_end: ?*i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn notify(self: *const T, p_n_s_s_buffer3_: ?*INSSBuffer3, p_pin_: ?*IPin, prt_start_: ?*i64, prt_end_: ?*i64) HRESULT {
                return @as(*const IAMWMBufferPassCallback.VTable, @ptrCast(self.vtable)).Notify(@as(*const IAMWMBufferPassCallback, @ptrCast(self)), p_n_s_s_buffer3_, p_pin_, prt_start_, prt_end_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const _AM_ASFWRITERCONFIG_PARAM = enum(i32) {
    AUTOINDEX = 1,
    MULTIPASS = 2,
    DONTCOMPRESS = 3,
};
pub const AM_CONFIGASFWRITER_PARAM_AUTOINDEX = _AM_ASFWRITERCONFIG_PARAM.AUTOINDEX;
pub const AM_CONFIGASFWRITER_PARAM_MULTIPASS = _AM_ASFWRITERCONFIG_PARAM.MULTIPASS;
pub const AM_CONFIGASFWRITER_PARAM_DONTCOMPRESS = _AM_ASFWRITERCONFIG_PARAM.DONTCOMPRESS;

pub const AM_WMT_EVENT_DATA = extern struct {
    hrStatus: HRESULT,
    pData: ?*anyopaque,
};

const IID_INSSBuffer_Value = Guid.initString("e1cd3524-03d7-11d2-9eed-006097d2d7cf");
pub const IID_INSSBuffer = &IID_INSSBuffer_Value;
pub const INSSBuffer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLength: *const fn (
            self: *const INSSBuffer,
            pdw_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLength: *const fn (
            self: *const INSSBuffer,
            dw_length: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxLength: *const fn (
            self: *const INSSBuffer,
            pdw_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBuffer: *const fn (
            self: *const INSSBuffer,
            ppdw_buffer: ?*?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBufferAndLength: *const fn (
            self: *const INSSBuffer,
            ppdw_buffer: ?*?*u8,
            pdw_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getLength(self: *const T, pdw_length_: ?*u32) HRESULT {
                return @as(*const INSSBuffer.VTable, @ptrCast(self.vtable)).GetLength(@as(*const INSSBuffer, @ptrCast(self)), pdw_length_);
            }
            pub inline fn setLength(self: *const T, dw_length_: u32) HRESULT {
                return @as(*const INSSBuffer.VTable, @ptrCast(self.vtable)).SetLength(@as(*const INSSBuffer, @ptrCast(self)), dw_length_);
            }
            pub inline fn getMaxLength(self: *const T, pdw_length_: ?*u32) HRESULT {
                return @as(*const INSSBuffer.VTable, @ptrCast(self.vtable)).GetMaxLength(@as(*const INSSBuffer, @ptrCast(self)), pdw_length_);
            }
            pub inline fn getBuffer(self: *const T, ppdw_buffer_: ?*?*u8) HRESULT {
                return @as(*const INSSBuffer.VTable, @ptrCast(self.vtable)).GetBuffer(@as(*const INSSBuffer, @ptrCast(self)), ppdw_buffer_);
            }
            pub inline fn getBufferAndLength(self: *const T, ppdw_buffer_: ?*?*u8, pdw_length_: ?*u32) HRESULT {
                return @as(*const INSSBuffer.VTable, @ptrCast(self.vtable)).GetBufferAndLength(@as(*const INSSBuffer, @ptrCast(self)), ppdw_buffer_, pdw_length_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_INSSBuffer2_Value = Guid.initString("4f528693-1035-43fe-b428-757561ad3a68");
pub const IID_INSSBuffer2 = &IID_INSSBuffer2_Value;
pub const INSSBuffer2 = extern struct {
    pub const VTable = extern struct {
        base: INSSBuffer.VTable,
        GetSampleProperties: *const fn (
            self: *const INSSBuffer2,
            cb_properties: u32,
            pb_properties: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSampleProperties: *const fn (
            self: *const INSSBuffer2,
            cb_properties: u32,
            pb_properties: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace INSSBuffer.MethodMixin(T);
            pub inline fn getSampleProperties(self: *const T, cb_properties_: u32, pb_properties_: ?*u8) HRESULT {
                return @as(*const INSSBuffer2.VTable, @ptrCast(self.vtable)).GetSampleProperties(@as(*const INSSBuffer2, @ptrCast(self)), cb_properties_, pb_properties_);
            }
            pub inline fn setSampleProperties(self: *const T, cb_properties_: u32, pb_properties_: ?*u8) HRESULT {
                return @as(*const INSSBuffer2.VTable, @ptrCast(self.vtable)).SetSampleProperties(@as(*const INSSBuffer2, @ptrCast(self)), cb_properties_, pb_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_INSSBuffer3_Value = Guid.initString("c87ceaaf-75be-4bc4-84eb-ac2798507672");
pub const IID_INSSBuffer3 = &IID_INSSBuffer3_Value;
pub const INSSBuffer3 = extern struct {
    pub const VTable = extern struct {
        base: INSSBuffer2.VTable,
        SetProperty: *const fn (
            self: *const INSSBuffer3,
            guid_buffer_property: Guid,
            pv_buffer_property: ?*anyopaque,
            dw_buffer_property_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn (
            self: *const INSSBuffer3,
            guid_buffer_property: Guid,
            pv_buffer_property: ?*anyopaque,
            pdw_buffer_property_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace INSSBuffer2.MethodMixin(T);
            pub inline fn setProperty(self: *const T, guid_buffer_property_: Guid, pv_buffer_property_: ?*anyopaque, dw_buffer_property_size_: u32) HRESULT {
                return @as(*const INSSBuffer3.VTable, @ptrCast(self.vtable)).SetProperty(@as(*const INSSBuffer3, @ptrCast(self)), guid_buffer_property_, pv_buffer_property_, dw_buffer_property_size_);
            }
            pub inline fn getProperty(self: *const T, guid_buffer_property_: Guid, pv_buffer_property_: ?*anyopaque, pdw_buffer_property_size_: ?*u32) HRESULT {
                return @as(*const INSSBuffer3.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const INSSBuffer3, @ptrCast(self)), guid_buffer_property_, pv_buffer_property_, pdw_buffer_property_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_INSSBuffer4_Value = Guid.initString("b6b8fd5a-32e2-49d4-a910-c26cc85465ed");
pub const IID_INSSBuffer4 = &IID_INSSBuffer4_Value;
pub const INSSBuffer4 = extern struct {
    pub const VTable = extern struct {
        base: INSSBuffer3.VTable,
        GetPropertyCount: *const fn (
            self: *const INSSBuffer4,
            pc_buffer_properties: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyByIndex: *const fn (
            self: *const INSSBuffer4,
            dw_buffer_property_index: u32,
            pguid_buffer_property: ?*Guid,
            pv_buffer_property: ?*anyopaque,
            pdw_buffer_property_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace INSSBuffer3.MethodMixin(T);
            pub inline fn getPropertyCount(self: *const T, pc_buffer_properties_: ?*u32) HRESULT {
                return @as(*const INSSBuffer4.VTable, @ptrCast(self.vtable)).GetPropertyCount(@as(*const INSSBuffer4, @ptrCast(self)), pc_buffer_properties_);
            }
            pub inline fn getPropertyByIndex(self: *const T, dw_buffer_property_index_: u32, pguid_buffer_property_: ?*Guid, pv_buffer_property_: ?*anyopaque, pdw_buffer_property_size_: ?*u32) HRESULT {
                return @as(*const INSSBuffer4.VTable, @ptrCast(self.vtable)).GetPropertyByIndex(@as(*const INSSBuffer4, @ptrCast(self)), dw_buffer_property_index_, pguid_buffer_property_, pv_buffer_property_, pdw_buffer_property_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMSBufferAllocator_Value = Guid.initString("61103ca4-2033-11d2-9ef1-006097d2d7cf");
pub const IID_IWMSBufferAllocator = &IID_IWMSBufferAllocator_Value;
pub const IWMSBufferAllocator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AllocateBuffer: *const fn (
            self: *const IWMSBufferAllocator,
            dw_max_buffer_size: u32,
            pp_buffer: ?*?*INSSBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AllocatePageSizeBuffer: *const fn (
            self: *const IWMSBufferAllocator,
            dw_max_buffer_size: u32,
            pp_buffer: ?*?*INSSBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn allocateBuffer(self: *const T, dw_max_buffer_size_: u32, pp_buffer_: ?*?*INSSBuffer) HRESULT {
                return @as(*const IWMSBufferAllocator.VTable, @ptrCast(self.vtable)).AllocateBuffer(@as(*const IWMSBufferAllocator, @ptrCast(self)), dw_max_buffer_size_, pp_buffer_);
            }
            pub inline fn allocatePageSizeBuffer(self: *const T, dw_max_buffer_size_: u32, pp_buffer_: ?*?*INSSBuffer) HRESULT {
                return @as(*const IWMSBufferAllocator.VTable, @ptrCast(self.vtable)).AllocatePageSizeBuffer(@as(*const IWMSBufferAllocator, @ptrCast(self)), dw_max_buffer_size_, pp_buffer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WEBSTREAM_SAMPLE_TYPE = enum(i32) {
    FILE = 1,
    RENDER = 2,
};
pub const WEBSTREAM_SAMPLE_TYPE_FILE = WEBSTREAM_SAMPLE_TYPE.FILE;
pub const WEBSTREAM_SAMPLE_TYPE_RENDER = WEBSTREAM_SAMPLE_TYPE.RENDER;

pub const WM_SF_TYPE = enum(i32) {
    CLEANPOINT = 1,
    DISCONTINUITY = 2,
    DATALOSS = 4,
};
pub const WM_SF_CLEANPOINT = WM_SF_TYPE.CLEANPOINT;
pub const WM_SF_DISCONTINUITY = WM_SF_TYPE.DISCONTINUITY;
pub const WM_SF_DATALOSS = WM_SF_TYPE.DATALOSS;

pub const WM_SFEX_TYPE = enum(i32) {
    NOTASYNCPOINT = 2,
    DATALOSS = 4,
};
pub const WM_SFEX_NOTASYNCPOINT = WM_SFEX_TYPE.NOTASYNCPOINT;
pub const WM_SFEX_DATALOSS = WM_SFEX_TYPE.DATALOSS;

pub const WMT_STATUS = enum(i32) {
    ERROR = 0,
    OPENED = 1,
    BUFFERING_START = 2,
    BUFFERING_STOP = 3,
    EOF = 4,
    // END_OF_FILE = 4, this enum value conflicts with EOF
    END_OF_SEGMENT = 5,
    END_OF_STREAMING = 6,
    LOCATING = 7,
    CONNECTING = 8,
    NO_RIGHTS = 9,
    MISSING_CODEC = 10,
    STARTED = 11,
    STOPPED = 12,
    CLOSED = 13,
    STRIDING = 14,
    TIMER = 15,
    INDEX_PROGRESS = 16,
    SAVEAS_START = 17,
    SAVEAS_STOP = 18,
    NEW_SOURCEFLAGS = 19,
    NEW_METADATA = 20,
    BACKUPRESTORE_BEGIN = 21,
    SOURCE_SWITCH = 22,
    ACQUIRE_LICENSE = 23,
    INDIVIDUALIZE = 24,
    NEEDS_INDIVIDUALIZATION = 25,
    NO_RIGHTS_EX = 26,
    BACKUPRESTORE_END = 27,
    BACKUPRESTORE_CONNECTING = 28,
    BACKUPRESTORE_DISCONNECTING = 29,
    ERROR_WITHURL = 30,
    RESTRICTED_LICENSE = 31,
    CLIENT_CONNECT = 32,
    CLIENT_DISCONNECT = 33,
    NATIVE_OUTPUT_PROPS_CHANGED = 34,
    RECONNECT_START = 35,
    RECONNECT_END = 36,
    CLIENT_CONNECT_EX = 37,
    CLIENT_DISCONNECT_EX = 38,
    SET_FEC_SPAN = 39,
    PREROLL_READY = 40,
    PREROLL_COMPLETE = 41,
    CLIENT_PROPERTIES = 42,
    LICENSEURL_SIGNATURE_STATE = 43,
    INIT_PLAYLIST_BURN = 44,
    TRANSCRYPTOR_INIT = 45,
    TRANSCRYPTOR_SEEKED = 46,
    TRANSCRYPTOR_READ = 47,
    TRANSCRYPTOR_CLOSED = 48,
    PROXIMITY_RESULT = 49,
    PROXIMITY_COMPLETED = 50,
    CONTENT_ENABLER = 51,
};
pub const WMT_ERROR = WMT_STATUS.ERROR;
pub const WMT_OPENED = WMT_STATUS.OPENED;
pub const WMT_BUFFERING_START = WMT_STATUS.BUFFERING_START;
pub const WMT_BUFFERING_STOP = WMT_STATUS.BUFFERING_STOP;
pub const WMT_EOF = WMT_STATUS.EOF;
pub const WMT_END_OF_FILE = WMT_STATUS.EOF;
pub const WMT_END_OF_SEGMENT = WMT_STATUS.END_OF_SEGMENT;
pub const WMT_END_OF_STREAMING = WMT_STATUS.END_OF_STREAMING;
pub const WMT_LOCATING = WMT_STATUS.LOCATING;
pub const WMT_CONNECTING = WMT_STATUS.CONNECTING;
pub const WMT_NO_RIGHTS = WMT_STATUS.NO_RIGHTS;
pub const WMT_MISSING_CODEC = WMT_STATUS.MISSING_CODEC;
pub const WMT_STARTED = WMT_STATUS.STARTED;
pub const WMT_STOPPED = WMT_STATUS.STOPPED;
pub const WMT_CLOSED = WMT_STATUS.CLOSED;
pub const WMT_STRIDING = WMT_STATUS.STRIDING;
pub const WMT_TIMER = WMT_STATUS.TIMER;
pub const WMT_INDEX_PROGRESS = WMT_STATUS.INDEX_PROGRESS;
pub const WMT_SAVEAS_START = WMT_STATUS.SAVEAS_START;
pub const WMT_SAVEAS_STOP = WMT_STATUS.SAVEAS_STOP;
pub const WMT_NEW_SOURCEFLAGS = WMT_STATUS.NEW_SOURCEFLAGS;
pub const WMT_NEW_METADATA = WMT_STATUS.NEW_METADATA;
pub const WMT_BACKUPRESTORE_BEGIN = WMT_STATUS.BACKUPRESTORE_BEGIN;
pub const WMT_SOURCE_SWITCH = WMT_STATUS.SOURCE_SWITCH;
pub const WMT_ACQUIRE_LICENSE = WMT_STATUS.ACQUIRE_LICENSE;
pub const WMT_INDIVIDUALIZE = WMT_STATUS.INDIVIDUALIZE;
pub const WMT_NEEDS_INDIVIDUALIZATION = WMT_STATUS.NEEDS_INDIVIDUALIZATION;
pub const WMT_NO_RIGHTS_EX = WMT_STATUS.NO_RIGHTS_EX;
pub const WMT_BACKUPRESTORE_END = WMT_STATUS.BACKUPRESTORE_END;
pub const WMT_BACKUPRESTORE_CONNECTING = WMT_STATUS.BACKUPRESTORE_CONNECTING;
pub const WMT_BACKUPRESTORE_DISCONNECTING = WMT_STATUS.BACKUPRESTORE_DISCONNECTING;
pub const WMT_ERROR_WITHURL = WMT_STATUS.ERROR_WITHURL;
pub const WMT_RESTRICTED_LICENSE = WMT_STATUS.RESTRICTED_LICENSE;
pub const WMT_CLIENT_CONNECT = WMT_STATUS.CLIENT_CONNECT;
pub const WMT_CLIENT_DISCONNECT = WMT_STATUS.CLIENT_DISCONNECT;
pub const WMT_NATIVE_OUTPUT_PROPS_CHANGED = WMT_STATUS.NATIVE_OUTPUT_PROPS_CHANGED;
pub const WMT_RECONNECT_START = WMT_STATUS.RECONNECT_START;
pub const WMT_RECONNECT_END = WMT_STATUS.RECONNECT_END;
pub const WMT_CLIENT_CONNECT_EX = WMT_STATUS.CLIENT_CONNECT_EX;
pub const WMT_CLIENT_DISCONNECT_EX = WMT_STATUS.CLIENT_DISCONNECT_EX;
pub const WMT_SET_FEC_SPAN = WMT_STATUS.SET_FEC_SPAN;
pub const WMT_PREROLL_READY = WMT_STATUS.PREROLL_READY;
pub const WMT_PREROLL_COMPLETE = WMT_STATUS.PREROLL_COMPLETE;
pub const WMT_CLIENT_PROPERTIES = WMT_STATUS.CLIENT_PROPERTIES;
pub const WMT_LICENSEURL_SIGNATURE_STATE = WMT_STATUS.LICENSEURL_SIGNATURE_STATE;
pub const WMT_INIT_PLAYLIST_BURN = WMT_STATUS.INIT_PLAYLIST_BURN;
pub const WMT_TRANSCRYPTOR_INIT = WMT_STATUS.TRANSCRYPTOR_INIT;
pub const WMT_TRANSCRYPTOR_SEEKED = WMT_STATUS.TRANSCRYPTOR_SEEKED;
pub const WMT_TRANSCRYPTOR_READ = WMT_STATUS.TRANSCRYPTOR_READ;
pub const WMT_TRANSCRYPTOR_CLOSED = WMT_STATUS.TRANSCRYPTOR_CLOSED;
pub const WMT_PROXIMITY_RESULT = WMT_STATUS.PROXIMITY_RESULT;
pub const WMT_PROXIMITY_COMPLETED = WMT_STATUS.PROXIMITY_COMPLETED;
pub const WMT_CONTENT_ENABLER = WMT_STATUS.CONTENT_ENABLER;

pub const WMT_STREAM_SELECTION = enum(i32) {
    OFF = 0,
    CLEANPOINT_ONLY = 1,
    ON = 2,
};
pub const WMT_OFF = WMT_STREAM_SELECTION.OFF;
pub const WMT_CLEANPOINT_ONLY = WMT_STREAM_SELECTION.CLEANPOINT_ONLY;
pub const WMT_ON = WMT_STREAM_SELECTION.ON;

pub const WMT_IMAGE_TYPE = enum(i32) {
    NONE = 0,
    BITMAP = 1,
    JPEG = 2,
    GIF = 3,
};
pub const WMT_IT_NONE = WMT_IMAGE_TYPE.NONE;
pub const WMT_IT_BITMAP = WMT_IMAGE_TYPE.BITMAP;
pub const WMT_IT_JPEG = WMT_IMAGE_TYPE.JPEG;
pub const WMT_IT_GIF = WMT_IMAGE_TYPE.GIF;

pub const WMT_ATTR_DATATYPE = enum(i32) {
    DWORD = 0,
    STRING = 1,
    BINARY = 2,
    BOOL = 3,
    QWORD = 4,
    WORD = 5,
    GUID = 6,
};
pub const WMT_TYPE_DWORD = WMT_ATTR_DATATYPE.DWORD;
pub const WMT_TYPE_STRING = WMT_ATTR_DATATYPE.STRING;
pub const WMT_TYPE_BINARY = WMT_ATTR_DATATYPE.BINARY;
pub const WMT_TYPE_BOOL = WMT_ATTR_DATATYPE.BOOL;
pub const WMT_TYPE_QWORD = WMT_ATTR_DATATYPE.QWORD;
pub const WMT_TYPE_WORD = WMT_ATTR_DATATYPE.WORD;
pub const WMT_TYPE_GUID = WMT_ATTR_DATATYPE.GUID;

pub const WMT_ATTR_IMAGETYPE = enum(i32) {
    BITMAP = 1,
    JPEG = 2,
    GIF = 3,
};
pub const WMT_IMAGETYPE_BITMAP = WMT_ATTR_IMAGETYPE.BITMAP;
pub const WMT_IMAGETYPE_JPEG = WMT_ATTR_IMAGETYPE.JPEG;
pub const WMT_IMAGETYPE_GIF = WMT_ATTR_IMAGETYPE.GIF;

pub const WMT_VERSION = enum(i32) {
    @"4_0" = 262144,
    @"7_0" = 458752,
    @"8_0" = 524288,
    @"9_0" = 589824,
};
pub const WMT_VER_4_0 = WMT_VERSION.@"4_0";
pub const WMT_VER_7_0 = WMT_VERSION.@"7_0";
pub const WMT_VER_8_0 = WMT_VERSION.@"8_0";
pub const WMT_VER_9_0 = WMT_VERSION.@"9_0";

pub const WMT_STORAGE_FORMAT = enum(i32) {
    MP3 = 0,
    V1 = 1,
};
pub const WMT_Storage_Format_MP3 = WMT_STORAGE_FORMAT.MP3;
pub const WMT_Storage_Format_V1 = WMT_STORAGE_FORMAT.V1;

pub const WMT_DRMLA_TRUST = enum(i32) {
    UNTRUSTED = 0,
    TRUSTED = 1,
    TAMPERED = 2,
};
pub const WMT_DRMLA_UNTRUSTED = WMT_DRMLA_TRUST.UNTRUSTED;
pub const WMT_DRMLA_TRUSTED = WMT_DRMLA_TRUST.TRUSTED;
pub const WMT_DRMLA_TAMPERED = WMT_DRMLA_TRUST.TAMPERED;

pub const WMT_TRANSPORT_TYPE = enum(i32) {
    Unreliable = 0,
    Reliable = 1,
};
pub const WMT_Transport_Type_Unreliable = WMT_TRANSPORT_TYPE.Unreliable;
pub const WMT_Transport_Type_Reliable = WMT_TRANSPORT_TYPE.Reliable;

pub const WMT_NET_PROTOCOL = enum(i32) {
    P = 0,
};
pub const WMT_PROTOCOL_HTTP = WMT_NET_PROTOCOL.P;

pub const WMT_PLAY_MODE = enum(i32) {
    AUTOSELECT = 0,
    LOCAL = 1,
    DOWNLOAD = 2,
    STREAMING = 3,
};
pub const WMT_PLAY_MODE_AUTOSELECT = WMT_PLAY_MODE.AUTOSELECT;
pub const WMT_PLAY_MODE_LOCAL = WMT_PLAY_MODE.LOCAL;
pub const WMT_PLAY_MODE_DOWNLOAD = WMT_PLAY_MODE.DOWNLOAD;
pub const WMT_PLAY_MODE_STREAMING = WMT_PLAY_MODE.STREAMING;

pub const WMT_PROXY_SETTINGS = enum(i32) {
    NONE = 0,
    MANUAL = 1,
    AUTO = 2,
    BROWSER = 3,
    MAX = 4,
};
pub const WMT_PROXY_SETTING_NONE = WMT_PROXY_SETTINGS.NONE;
pub const WMT_PROXY_SETTING_MANUAL = WMT_PROXY_SETTINGS.MANUAL;
pub const WMT_PROXY_SETTING_AUTO = WMT_PROXY_SETTINGS.AUTO;
pub const WMT_PROXY_SETTING_BROWSER = WMT_PROXY_SETTINGS.BROWSER;
pub const WMT_PROXY_SETTING_MAX = WMT_PROXY_SETTINGS.MAX;

pub const WMT_CODEC_INFO_TYPE = enum(i32) {
    AUDIO = 0,
    VIDEO = 1,
    UNKNOWN = -1,
};
pub const WMT_CODECINFO_AUDIO = WMT_CODEC_INFO_TYPE.AUDIO;
pub const WMT_CODECINFO_VIDEO = WMT_CODEC_INFO_TYPE.VIDEO;
pub const WMT_CODECINFO_UNKNOWN = WMT_CODEC_INFO_TYPE.UNKNOWN;

pub const WM_DM_INTERLACED_TYPE = enum(i32) {
    NOTINTERLACED = 0,
    DEINTERLACE_NORMAL = 1,
    DEINTERLACE_HALFSIZE = 2,
    DEINTERLACE_HALFSIZEDOUBLERATE = 3,
    DEINTERLACE_INVERSETELECINE = 4,
    DEINTERLACE_VERTICALHALFSIZEDOUBLERATE = 5,
};
pub const WM_DM_NOTINTERLACED = WM_DM_INTERLACED_TYPE.NOTINTERLACED;
pub const WM_DM_DEINTERLACE_NORMAL = WM_DM_INTERLACED_TYPE.DEINTERLACE_NORMAL;
pub const WM_DM_DEINTERLACE_HALFSIZE = WM_DM_INTERLACED_TYPE.DEINTERLACE_HALFSIZE;
pub const WM_DM_DEINTERLACE_HALFSIZEDOUBLERATE = WM_DM_INTERLACED_TYPE.DEINTERLACE_HALFSIZEDOUBLERATE;
pub const WM_DM_DEINTERLACE_INVERSETELECINE = WM_DM_INTERLACED_TYPE.DEINTERLACE_INVERSETELECINE;
pub const WM_DM_DEINTERLACE_VERTICALHALFSIZEDOUBLERATE = WM_DM_INTERLACED_TYPE.DEINTERLACE_VERTICALHALFSIZEDOUBLERATE;

pub const WM_DM_IT_FIRST_FRAME_COHERENCY = enum(i32) {
    DISABLE_COHERENT_MODE = 0,
    FIRST_FRAME_IN_CLIP_IS_AA_TOP = 1,
    FIRST_FRAME_IN_CLIP_IS_BB_TOP = 2,
    FIRST_FRAME_IN_CLIP_IS_BC_TOP = 3,
    FIRST_FRAME_IN_CLIP_IS_CD_TOP = 4,
    FIRST_FRAME_IN_CLIP_IS_DD_TOP = 5,
    FIRST_FRAME_IN_CLIP_IS_AA_BOTTOM = 6,
    FIRST_FRAME_IN_CLIP_IS_BB_BOTTOM = 7,
    FIRST_FRAME_IN_CLIP_IS_BC_BOTTOM = 8,
    FIRST_FRAME_IN_CLIP_IS_CD_BOTTOM = 9,
    FIRST_FRAME_IN_CLIP_IS_DD_BOTTOM = 10,
};
pub const WM_DM_IT_DISABLE_COHERENT_MODE = WM_DM_IT_FIRST_FRAME_COHERENCY.DISABLE_COHERENT_MODE;
pub const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_AA_TOP = WM_DM_IT_FIRST_FRAME_COHERENCY.FIRST_FRAME_IN_CLIP_IS_AA_TOP;
pub const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_BB_TOP = WM_DM_IT_FIRST_FRAME_COHERENCY.FIRST_FRAME_IN_CLIP_IS_BB_TOP;
pub const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_BC_TOP = WM_DM_IT_FIRST_FRAME_COHERENCY.FIRST_FRAME_IN_CLIP_IS_BC_TOP;
pub const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_CD_TOP = WM_DM_IT_FIRST_FRAME_COHERENCY.FIRST_FRAME_IN_CLIP_IS_CD_TOP;
pub const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_DD_TOP = WM_DM_IT_FIRST_FRAME_COHERENCY.FIRST_FRAME_IN_CLIP_IS_DD_TOP;
pub const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_AA_BOTTOM = WM_DM_IT_FIRST_FRAME_COHERENCY.FIRST_FRAME_IN_CLIP_IS_AA_BOTTOM;
pub const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_BB_BOTTOM = WM_DM_IT_FIRST_FRAME_COHERENCY.FIRST_FRAME_IN_CLIP_IS_BB_BOTTOM;
pub const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_BC_BOTTOM = WM_DM_IT_FIRST_FRAME_COHERENCY.FIRST_FRAME_IN_CLIP_IS_BC_BOTTOM;
pub const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_CD_BOTTOM = WM_DM_IT_FIRST_FRAME_COHERENCY.FIRST_FRAME_IN_CLIP_IS_CD_BOTTOM;
pub const WM_DM_IT_FIRST_FRAME_IN_CLIP_IS_DD_BOTTOM = WM_DM_IT_FIRST_FRAME_COHERENCY.FIRST_FRAME_IN_CLIP_IS_DD_BOTTOM;

pub const WMT_OFFSET_FORMAT = enum(i32) {
    @"100NS" = 0,
    FRAME_NUMBERS = 1,
    PLAYLIST_OFFSET = 2,
    TIMECODE = 3,
    @"100NS_APPROXIMATE" = 4,
};
pub const WMT_OFFSET_FORMAT_100NS = WMT_OFFSET_FORMAT.@"100NS";
pub const WMT_OFFSET_FORMAT_FRAME_NUMBERS = WMT_OFFSET_FORMAT.FRAME_NUMBERS;
pub const WMT_OFFSET_FORMAT_PLAYLIST_OFFSET = WMT_OFFSET_FORMAT.PLAYLIST_OFFSET;
pub const WMT_OFFSET_FORMAT_TIMECODE = WMT_OFFSET_FORMAT.TIMECODE;
pub const WMT_OFFSET_FORMAT_100NS_APPROXIMATE = WMT_OFFSET_FORMAT.@"100NS_APPROXIMATE";

pub const WMT_INDEXER_TYPE = enum(i32) {
    PRESENTATION_TIME = 0,
    FRAME_NUMBERS = 1,
    TIMECODE = 2,
};
pub const WMT_IT_PRESENTATION_TIME = WMT_INDEXER_TYPE.PRESENTATION_TIME;
pub const WMT_IT_FRAME_NUMBERS = WMT_INDEXER_TYPE.FRAME_NUMBERS;
pub const WMT_IT_TIMECODE = WMT_INDEXER_TYPE.TIMECODE;

pub const WMT_INDEX_TYPE = enum(i32) {
    DATA_UNIT = 1,
    OBJECT = 2,
    CLEAN_POINT = 3,
};
pub const WMT_IT_NEAREST_DATA_UNIT = WMT_INDEX_TYPE.DATA_UNIT;
pub const WMT_IT_NEAREST_OBJECT = WMT_INDEX_TYPE.OBJECT;
pub const WMT_IT_NEAREST_CLEAN_POINT = WMT_INDEX_TYPE.CLEAN_POINT;

pub const WMT_FILESINK_MODE = enum(i32) {
    SINGLE_BUFFERS = 1,
    FILESINK_DATA_UNITS = 2,
    FILESINK_UNBUFFERED = 4,
};
pub const WMT_FM_SINGLE_BUFFERS = WMT_FILESINK_MODE.SINGLE_BUFFERS;
pub const WMT_FM_FILESINK_DATA_UNITS = WMT_FILESINK_MODE.FILESINK_DATA_UNITS;
pub const WMT_FM_FILESINK_UNBUFFERED = WMT_FILESINK_MODE.FILESINK_UNBUFFERED;

pub const WMT_MUSICSPEECH_CLASS_MODE = enum(i32) {
    MUSIC = 0,
    SPEECH = 1,
    MIXED = 2,
};
pub const WMT_MS_CLASS_MUSIC = WMT_MUSICSPEECH_CLASS_MODE.MUSIC;
pub const WMT_MS_CLASS_SPEECH = WMT_MUSICSPEECH_CLASS_MODE.SPEECH;
pub const WMT_MS_CLASS_MIXED = WMT_MUSICSPEECH_CLASS_MODE.MIXED;

pub const WMT_WATERMARK_ENTRY_TYPE = enum(i32) {
    AUDIO = 1,
    VIDEO = 2,
};
pub const WMT_WMETYPE_AUDIO = WMT_WATERMARK_ENTRY_TYPE.AUDIO;
pub const WMT_WMETYPE_VIDEO = WMT_WATERMARK_ENTRY_TYPE.VIDEO;

pub const WM_PLAYBACK_DRC_LEVEL = enum(i32) {
    HIGH = 0,
    MEDIUM = 1,
    LOW = 2,
};
pub const WM_PLAYBACK_DRC_HIGH = WM_PLAYBACK_DRC_LEVEL.HIGH;
pub const WM_PLAYBACK_DRC_MEDIUM = WM_PLAYBACK_DRC_LEVEL.MEDIUM;
pub const WM_PLAYBACK_DRC_LOW = WM_PLAYBACK_DRC_LEVEL.LOW;

pub const WMT_TIMECODE_FRAMERATE = enum(i32) {
    @"30" = 0,
    @"30DROP" = 1,
    @"25" = 2,
    @"24" = 3,
};
pub const WMT_TIMECODE_FRAMERATE_30 = WMT_TIMECODE_FRAMERATE.@"30";
pub const WMT_TIMECODE_FRAMERATE_30DROP = WMT_TIMECODE_FRAMERATE.@"30DROP";
pub const WMT_TIMECODE_FRAMERATE_25 = WMT_TIMECODE_FRAMERATE.@"25";
pub const WMT_TIMECODE_FRAMERATE_24 = WMT_TIMECODE_FRAMERATE.@"24";

pub const WMT_CREDENTIAL_FLAGS = enum(i32) {
    SAVE = 1,
    DONT_CACHE = 2,
    CLEAR_TEXT = 4,
    PROXY = 8,
    ENCRYPT = 16,
};
pub const WMT_CREDENTIAL_SAVE = WMT_CREDENTIAL_FLAGS.SAVE;
pub const WMT_CREDENTIAL_DONT_CACHE = WMT_CREDENTIAL_FLAGS.DONT_CACHE;
pub const WMT_CREDENTIAL_CLEAR_TEXT = WMT_CREDENTIAL_FLAGS.CLEAR_TEXT;
pub const WMT_CREDENTIAL_PROXY = WMT_CREDENTIAL_FLAGS.PROXY;
pub const WMT_CREDENTIAL_ENCRYPT = WMT_CREDENTIAL_FLAGS.ENCRYPT;

pub const WM_AETYPE = enum(i32) {
    INCLUDE = 105,
    EXCLUDE = 101,
};
pub const WM_AETYPE_INCLUDE = WM_AETYPE.INCLUDE;
pub const WM_AETYPE_EXCLUDE = WM_AETYPE.EXCLUDE;

pub const WMT_RIGHTS = enum(i32) {
    PLAYBACK = 1,
    COPY_TO_NON_SDMI_DEVICE = 2,
    COPY_TO_CD = 8,
    COPY_TO_SDMI_DEVICE = 16,
    ONE_TIME = 32,
    SAVE_STREAM_PROTECTED = 64,
    COPY = 128,
    COLLABORATIVE_PLAY = 256,
    SDMI_TRIGGER = 65536,
    SDMI_NOMORECOPIES = 131072,
};
pub const WMT_RIGHT_PLAYBACK = WMT_RIGHTS.PLAYBACK;
pub const WMT_RIGHT_COPY_TO_NON_SDMI_DEVICE = WMT_RIGHTS.COPY_TO_NON_SDMI_DEVICE;
pub const WMT_RIGHT_COPY_TO_CD = WMT_RIGHTS.COPY_TO_CD;
pub const WMT_RIGHT_COPY_TO_SDMI_DEVICE = WMT_RIGHTS.COPY_TO_SDMI_DEVICE;
pub const WMT_RIGHT_ONE_TIME = WMT_RIGHTS.ONE_TIME;
pub const WMT_RIGHT_SAVE_STREAM_PROTECTED = WMT_RIGHTS.SAVE_STREAM_PROTECTED;
pub const WMT_RIGHT_COPY = WMT_RIGHTS.COPY;
pub const WMT_RIGHT_COLLABORATIVE_PLAY = WMT_RIGHTS.COLLABORATIVE_PLAY;
pub const WMT_RIGHT_SDMI_TRIGGER = WMT_RIGHTS.SDMI_TRIGGER;
pub const WMT_RIGHT_SDMI_NOMORECOPIES = WMT_RIGHTS.SDMI_NOMORECOPIES;

pub const WM_STREAM_PRIORITY_RECORD = extern struct {
    wStreamNumber: u16 align(2),
    fMandatory: BOOL align(2),
};

pub const WM_WRITER_STATISTICS = extern struct {
    qwSampleCount: u64,
    qwByteCount: u64,
    qwDroppedSampleCount: u64,
    qwDroppedByteCount: u64,
    dwCurrentBitrate: u32,
    dwAverageBitrate: u32,
    dwExpectedBitrate: u32,
    dwCurrentSampleRate: u32,
    dwAverageSampleRate: u32,
    dwExpectedSampleRate: u32,
};

pub const WM_WRITER_STATISTICS_EX = extern struct {
    dwBitratePlusOverhead: u32,
    dwCurrentSampleDropRateInQueue: u32,
    dwCurrentSampleDropRateInCodec: u32,
    dwCurrentSampleDropRateInMultiplexer: u32,
    dwTotalSampleDropsInQueue: u32,
    dwTotalSampleDropsInCodec: u32,
    dwTotalSampleDropsInMultiplexer: u32,
};

pub const WM_READER_STATISTICS = extern struct {
    cbSize: u32,
    dwBandwidth: u32,
    cPacketsReceived: u32,
    cPacketsRecovered: u32,
    cPacketsLost: u32,
    wQuality: u16,
};

pub const WM_READER_CLIENTINFO = extern struct {
    cbSize: u32,
    wszLang: ?PWSTR,
    wszBrowserUserAgent: ?PWSTR,
    wszBrowserWebPage: ?PWSTR,
    qwReserved: u64,
    pReserved: ?*LPARAM,
    wszHostExe: ?PWSTR,
    qwHostVersion: u64,
    wszPlayerUserAgent: ?PWSTR,
};

pub const WM_CLIENT_PROPERTIES = extern struct {
    dwIPAddress: u32,
    dwPort: u32,
};

pub const WM_CLIENT_PROPERTIES_EX = extern struct {
    cbSize: u32,
    pwszIPAddress: ?[*:0]const u16,
    pwszPort: ?[*:0]const u16,
    pwszDNSName: ?[*:0]const u16,
};

pub const WM_PORT_NUMBER_RANGE = extern struct {
    wPortBegin: u16,
    wPortEnd: u16,
};

pub const WMT_BUFFER_SEGMENT = extern struct {
    pBuffer: ?*INSSBuffer,
    cbOffset: u32,
    cbLength: u32,
};

pub const WMT_PAYLOAD_FRAGMENT = extern struct {
    dwPayloadIndex: u32,
    segmentData: WMT_BUFFER_SEGMENT,
};

pub const WMT_FILESINK_DATA_UNIT = extern struct {
    packetHeaderBuffer: WMT_BUFFER_SEGMENT,
    cPayloads: u32,
    pPayloadHeaderBuffers: ?*WMT_BUFFER_SEGMENT,
    cPayloadDataFragments: u32,
    pPayloadDataFragments: ?*WMT_PAYLOAD_FRAGMENT,
};

pub const WMT_WEBSTREAM_FORMAT = extern struct {
    cbSize: u16,
    cbSampleHeaderFixedData: u16,
    wVersion: u16,
    wReserved: u16,
};

pub const WMT_WEBSTREAM_SAMPLE_HEADER = extern struct {
    cbLength: u16,
    wPart: u16,
    cTotalParts: u16,
    wSampleType: u16,
    wszURL: [1]u16,
};

pub const WM_ADDRESS_ACCESSENTRY = extern struct {
    dwIPAddress: u32,
    dwMask: u32,
};

pub const WM_PICTURE = extern struct {
    pwszMIMEType: ?PWSTR align(1),
    bPictureType: u8 align(1),
    pwszDescription: ?PWSTR align(1),
    dwDataLen: u32 align(1),
    pbData: ?*u8 align(1),
};

pub const WM_SYNCHRONISED_LYRICS = extern struct {
    bTimeStampFormat: u8 align(1),
    bContentType: u8 align(1),
    pwszContentDescriptor: ?PWSTR align(1),
    dwLyricsLen: u32 align(1),
    pbLyrics: ?*u8 align(1),
};

pub const WM_USER_WEB_URL = extern struct {
    pwszDescription: ?PWSTR align(1),
    pwszURL: ?PWSTR align(1),
};

pub const WM_USER_TEXT = extern struct {
    pwszDescription: ?PWSTR align(1),
    pwszText: ?PWSTR align(1),
};

pub const WM_LEAKY_BUCKET_PAIR = extern struct {
    dwBitrate: u32 align(1),
    msBufferWindow: u32 align(1),
};

pub const WM_STREAM_TYPE_INFO = extern struct {
    guidMajorType: Guid align(1),
    cbFormat: u32 align(1),
};

pub const WMT_WATERMARK_ENTRY = extern struct {
    wmetType: WMT_WATERMARK_ENTRY_TYPE,
    clsid: Guid,
    cbDisplayName: u32,
    pwszDisplayName: ?PWSTR,
};

pub const WMT_VIDEOIMAGE_SAMPLE = extern struct {
    dwMagic: u32,
    cbStruct: u32,
    dwControlFlags: u32,
    dwInputFlagsCur: u32,
    lCurMotionXtoX: i32,
    lCurMotionYtoX: i32,
    lCurMotionXoffset: i32,
    lCurMotionXtoY: i32,
    lCurMotionYtoY: i32,
    lCurMotionYoffset: i32,
    lCurBlendCoef1: i32,
    lCurBlendCoef2: i32,
    dwInputFlagsPrev: u32,
    lPrevMotionXtoX: i32,
    lPrevMotionYtoX: i32,
    lPrevMotionXoffset: i32,
    lPrevMotionXtoY: i32,
    lPrevMotionYtoY: i32,
    lPrevMotionYoffset: i32,
    lPrevBlendCoef1: i32,
    lPrevBlendCoef2: i32,
};

pub const WMT_VIDEOIMAGE_SAMPLE2 = extern struct {
    dwMagic: u32,
    dwStructSize: u32,
    dwControlFlags: u32,
    dwViewportWidth: u32,
    dwViewportHeight: u32,
    dwCurrImageWidth: u32,
    dwCurrImageHeight: u32,
    fCurrRegionX0: f32,
    fCurrRegionY0: f32,
    fCurrRegionWidth: f32,
    fCurrRegionHeight: f32,
    fCurrBlendCoef: f32,
    dwPrevImageWidth: u32,
    dwPrevImageHeight: u32,
    fPrevRegionX0: f32,
    fPrevRegionY0: f32,
    fPrevRegionWidth: f32,
    fPrevRegionHeight: f32,
    fPrevBlendCoef: f32,
    dwEffectType: u32,
    dwNumEffectParas: u32,
    fEffectPara0: f32,
    fEffectPara1: f32,
    fEffectPara2: f32,
    fEffectPara3: f32,
    fEffectPara4: f32,
    bKeepPrevImage: BOOL,
};

pub const WM_MEDIA_TYPE = extern struct {
    majortype: Guid,
    subtype: Guid,
    bFixedSizeSamples: BOOL,
    bTemporalCompression: BOOL,
    lSampleSize: u32,
    formattype: Guid,
    pUnk: ?*IUnknown,
    cbFormat: u32,
    pbFormat: ?*u8,
};

pub const WMVIDEOINFOHEADER = extern struct {
    rcSource: RECT,
    rcTarget: RECT,
    dwBitRate: u32,
    dwBitErrorRate: u32,
    AvgTimePerFrame: i64,
    bmiHeader: BITMAPINFOHEADER,
};

pub const WMVIDEOINFOHEADER2 = extern struct {
    rcSource: RECT,
    rcTarget: RECT,
    dwBitRate: u32,
    dwBitErrorRate: u32,
    AvgTimePerFrame: i64,
    dwInterlaceFlags: u32,
    dwCopyProtectFlags: u32,
    dwPictAspectRatioX: u32,
    dwPictAspectRatioY: u32,
    dwReserved1: u32,
    dwReserved2: u32,
    bmiHeader: BITMAPINFOHEADER,
};

pub const WMMPEG2VIDEOINFO = extern struct {
    hdr: WMVIDEOINFOHEADER2,
    dwStartTimeCode: u32,
    cbSequenceHeader: u32,
    dwProfile: u32,
    dwLevel: u32,
    dwFlags: u32,
    dwSequenceHeader: [1]u32,
};

pub const WMSCRIPTFORMAT = extern struct {
    scriptType: Guid,
};

pub const WMT_COLORSPACEINFO_EXTENSION_DATA = extern struct {
    ucColorPrimaries: u8,
    ucColorTransferChar: u8,
    ucColorMatrixCoef: u8,
};

pub const WMT_TIMECODE_EXTENSION_DATA = extern struct {
    wRange: u16 align(2),
    dwTimecode: u32 align(2),
    dwUserbits: u32 align(2),
    dwAmFlags: u32 align(2),
};

pub const DRM_VAL16 = extern struct {
    val: [16]u8,
};

const IID_IWMMediaProps_Value = Guid.initString("96406bce-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMMediaProps = &IID_IWMMediaProps_Value;
pub const IWMMediaProps = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetType: *const fn (
            self: *const IWMMediaProps,
            pguid_type: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMediaType: *const fn (
            self: *const IWMMediaProps,
            p_type: ?*WM_MEDIA_TYPE,
            pcb_type: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMediaType: *const fn (
            self: *const IWMMediaProps,
            p_type: ?*WM_MEDIA_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getType(self: *const T, pguid_type_: ?*Guid) HRESULT {
                return @as(*const IWMMediaProps.VTable, @ptrCast(self.vtable)).GetType(@as(*const IWMMediaProps, @ptrCast(self)), pguid_type_);
            }
            pub inline fn getMediaType(self: *const T, p_type_: ?*WM_MEDIA_TYPE, pcb_type_: ?*u32) HRESULT {
                return @as(*const IWMMediaProps.VTable, @ptrCast(self.vtable)).GetMediaType(@as(*const IWMMediaProps, @ptrCast(self)), p_type_, pcb_type_);
            }
            pub inline fn setMediaType(self: *const T, p_type_: ?*WM_MEDIA_TYPE) HRESULT {
                return @as(*const IWMMediaProps.VTable, @ptrCast(self.vtable)).SetMediaType(@as(*const IWMMediaProps, @ptrCast(self)), p_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMVideoMediaProps_Value = Guid.initString("96406bcf-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMVideoMediaProps = &IID_IWMVideoMediaProps_Value;
pub const IWMVideoMediaProps = extern struct {
    pub const VTable = extern struct {
        base: IWMMediaProps.VTable,
        GetMaxKeyFrameSpacing: *const fn (
            self: *const IWMVideoMediaProps,
            pll_time: ?*i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxKeyFrameSpacing: *const fn (
            self: *const IWMVideoMediaProps,
            ll_time: i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetQuality: *const fn (
            self: *const IWMVideoMediaProps,
            pdw_quality: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetQuality: *const fn (
            self: *const IWMVideoMediaProps,
            dw_quality: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMMediaProps.MethodMixin(T);
            pub inline fn getMaxKeyFrameSpacing(self: *const T, pll_time_: ?*i64) HRESULT {
                return @as(*const IWMVideoMediaProps.VTable, @ptrCast(self.vtable)).GetMaxKeyFrameSpacing(@as(*const IWMVideoMediaProps, @ptrCast(self)), pll_time_);
            }
            pub inline fn setMaxKeyFrameSpacing(self: *const T, ll_time_: i64) HRESULT {
                return @as(*const IWMVideoMediaProps.VTable, @ptrCast(self.vtable)).SetMaxKeyFrameSpacing(@as(*const IWMVideoMediaProps, @ptrCast(self)), ll_time_);
            }
            pub inline fn getQuality(self: *const T, pdw_quality_: ?*u32) HRESULT {
                return @as(*const IWMVideoMediaProps.VTable, @ptrCast(self.vtable)).GetQuality(@as(*const IWMVideoMediaProps, @ptrCast(self)), pdw_quality_);
            }
            pub inline fn setQuality(self: *const T, dw_quality_: u32) HRESULT {
                return @as(*const IWMVideoMediaProps.VTable, @ptrCast(self.vtable)).SetQuality(@as(*const IWMVideoMediaProps, @ptrCast(self)), dw_quality_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriter_Value = Guid.initString("96406bd4-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMWriter = &IID_IWMWriter_Value;
pub const IWMWriter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetProfileByID: *const fn (
            self: *const IWMWriter,
            guid_profile: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProfile: *const fn (
            self: *const IWMWriter,
            p_profile: ?*IWMProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutputFilename: *const fn (
            self: *const IWMWriter,
            pwsz_filename: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputCount: *const fn (
            self: *const IWMWriter,
            pc_inputs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputProps: *const fn (
            self: *const IWMWriter,
            dw_input_num: u32,
            pp_input: ?*?*IWMInputMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInputProps: *const fn (
            self: *const IWMWriter,
            dw_input_num: u32,
            p_input: ?*IWMInputMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputFormatCount: *const fn (
            self: *const IWMWriter,
            dw_input_number: u32,
            pc_formats: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputFormat: *const fn (
            self: *const IWMWriter,
            dw_input_number: u32,
            dw_format_number: u32,
            p_props: ?*?*IWMInputMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginWriting: *const fn (
            self: *const IWMWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndWriting: *const fn (
            self: *const IWMWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AllocateSample: *const fn (
            self: *const IWMWriter,
            dw_sample_size: u32,
            pp_sample: ?*?*INSSBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteSample: *const fn (
            self: *const IWMWriter,
            dw_input_num: u32,
            cns_sample_time: u64,
            dw_flags: u32,
            p_sample: ?*INSSBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Flush: *const fn (
            self: *const IWMWriter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setProfileByID(self: *const T, guid_profile_: ?*const Guid) HRESULT {
                return @as(*const IWMWriter.VTable, @ptrCast(self.vtable)).SetProfileByID(@as(*const IWMWriter, @ptrCast(self)), guid_profile_);
            }
            pub inline fn setProfile(self: *const T, p_profile_: ?*IWMProfile) HRESULT {
                return @as(*const IWMWriter.VTable, @ptrCast(self.vtable)).SetProfile(@as(*const IWMWriter, @ptrCast(self)), p_profile_);
            }
            pub inline fn setOutputFilename(self: *const T, pwsz_filename_: ?[*:0]const u16) HRESULT {
                return @as(*const IWMWriter.VTable, @ptrCast(self.vtable)).SetOutputFilename(@as(*const IWMWriter, @ptrCast(self)), pwsz_filename_);
            }
            pub inline fn getInputCount(self: *const T, pc_inputs_: ?*u32) HRESULT {
                return @as(*const IWMWriter.VTable, @ptrCast(self.vtable)).GetInputCount(@as(*const IWMWriter, @ptrCast(self)), pc_inputs_);
            }
            pub inline fn getInputProps(self: *const T, dw_input_num_: u32, pp_input_: ?*?*IWMInputMediaProps) HRESULT {
                return @as(*const IWMWriter.VTable, @ptrCast(self.vtable)).GetInputProps(@as(*const IWMWriter, @ptrCast(self)), dw_input_num_, pp_input_);
            }
            pub inline fn setInputProps(self: *const T, dw_input_num_: u32, p_input_: ?*IWMInputMediaProps) HRESULT {
                return @as(*const IWMWriter.VTable, @ptrCast(self.vtable)).SetInputProps(@as(*const IWMWriter, @ptrCast(self)), dw_input_num_, p_input_);
            }
            pub inline fn getInputFormatCount(self: *const T, dw_input_number_: u32, pc_formats_: ?*u32) HRESULT {
                return @as(*const IWMWriter.VTable, @ptrCast(self.vtable)).GetInputFormatCount(@as(*const IWMWriter, @ptrCast(self)), dw_input_number_, pc_formats_);
            }
            pub inline fn getInputFormat(self: *const T, dw_input_number_: u32, dw_format_number_: u32, p_props_: ?*?*IWMInputMediaProps) HRESULT {
                return @as(*const IWMWriter.VTable, @ptrCast(self.vtable)).GetInputFormat(@as(*const IWMWriter, @ptrCast(self)), dw_input_number_, dw_format_number_, p_props_);
            }
            pub inline fn beginWriting(self: *const T) HRESULT {
                return @as(*const IWMWriter.VTable, @ptrCast(self.vtable)).BeginWriting(@as(*const IWMWriter, @ptrCast(self)));
            }
            pub inline fn endWriting(self: *const T) HRESULT {
                return @as(*const IWMWriter.VTable, @ptrCast(self.vtable)).EndWriting(@as(*const IWMWriter, @ptrCast(self)));
            }
            pub inline fn allocateSample(self: *const T, dw_sample_size_: u32, pp_sample_: ?*?*INSSBuffer) HRESULT {
                return @as(*const IWMWriter.VTable, @ptrCast(self.vtable)).AllocateSample(@as(*const IWMWriter, @ptrCast(self)), dw_sample_size_, pp_sample_);
            }
            pub inline fn writeSample(self: *const T, dw_input_num_: u32, cns_sample_time_: u64, dw_flags_: u32, p_sample_: ?*INSSBuffer) HRESULT {
                return @as(*const IWMWriter.VTable, @ptrCast(self.vtable)).WriteSample(@as(*const IWMWriter, @ptrCast(self)), dw_input_num_, cns_sample_time_, dw_flags_, p_sample_);
            }
            pub inline fn flush(self: *const T) HRESULT {
                return @as(*const IWMWriter.VTable, @ptrCast(self.vtable)).Flush(@as(*const IWMWriter, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWMDRMWriter_Value = Guid.initString("d6ea5dd0-12a0-43f4-90ab-a3fd451e6a07");
pub const IID_IWMDRMWriter = &IID_IWMDRMWriter_Value;
pub const IWMDRMWriter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GenerateKeySeed: *const fn (
            self: *const IWMDRMWriter,
            pwsz_key_seed: [*:0]u16,
            pcwch_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateKeyID: *const fn (
            self: *const IWMDRMWriter,
            pwsz_key_i_d: [*:0]u16,
            pcwch_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GenerateSigningKeyPair: *const fn (
            self: *const IWMDRMWriter,
            pwsz_priv_key: [*:0]u16,
            pcwch_priv_key_length: ?*u32,
            pwsz_pub_key: [*:0]u16,
            pcwch_pub_key_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDRMAttribute: *const fn (
            self: *const IWMDRMWriter,
            w_stream_num: u16,
            psz_name: ?[*:0]const u16,
            type: WMT_ATTR_DATATYPE,
            p_value: [*:0]const u8,
            cb_length: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn generateKeySeed(self: *const T, pwsz_key_seed_: [*:0]u16, pcwch_length_: ?*u32) HRESULT {
                return @as(*const IWMDRMWriter.VTable, @ptrCast(self.vtable)).GenerateKeySeed(@as(*const IWMDRMWriter, @ptrCast(self)), pwsz_key_seed_, pcwch_length_);
            }
            pub inline fn generateKeyID(self: *const T, pwsz_key_i_d_: [*:0]u16, pcwch_length_: ?*u32) HRESULT {
                return @as(*const IWMDRMWriter.VTable, @ptrCast(self.vtable)).GenerateKeyID(@as(*const IWMDRMWriter, @ptrCast(self)), pwsz_key_i_d_, pcwch_length_);
            }
            pub inline fn generateSigningKeyPair(self: *const T, pwsz_priv_key_: [*:0]u16, pcwch_priv_key_length_: ?*u32, pwsz_pub_key_: [*:0]u16, pcwch_pub_key_length_: ?*u32) HRESULT {
                return @as(*const IWMDRMWriter.VTable, @ptrCast(self.vtable)).GenerateSigningKeyPair(@as(*const IWMDRMWriter, @ptrCast(self)), pwsz_priv_key_, pcwch_priv_key_length_, pwsz_pub_key_, pcwch_pub_key_length_);
            }
            pub inline fn setDRMAttribute(self: *const T, w_stream_num_: u16, psz_name_: ?[*:0]const u16, type_: WMT_ATTR_DATATYPE, p_value_: [*:0]const u8, cb_length_: u16) HRESULT {
                return @as(*const IWMDRMWriter.VTable, @ptrCast(self.vtable)).SetDRMAttribute(@as(*const IWMDRMWriter, @ptrCast(self)), w_stream_num_, psz_name_, type_, p_value_, cb_length_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WMDRM_IMPORT_INIT_STRUCT = extern struct {
    dwVersion: u32,
    cbEncryptedSessionKeyMessage: u32,
    pbEncryptedSessionKeyMessage: ?*u8,
    cbEncryptedKeyMessage: u32,
    pbEncryptedKeyMessage: ?*u8,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWMDRMWriter2_Value = Guid.initString("38ee7a94-40e2-4e10-aa3f-33fd3210ed5b");
pub const IID_IWMDRMWriter2 = &IID_IWMDRMWriter2_Value;
pub const IWMDRMWriter2 = extern struct {
    pub const VTable = extern struct {
        base: IWMDRMWriter.VTable,
        SetWMDRMNetEncryption: *const fn (
            self: *const IWMDRMWriter2,
            f_samples_encrypted: BOOL,
            pb_key_i_d: ?*u8,
            cb_key_i_d: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMDRMWriter.MethodMixin(T);
            pub inline fn setWMDRMNetEncryption(self: *const T, f_samples_encrypted_: BOOL, pb_key_i_d_: ?*u8, cb_key_i_d_: u32) HRESULT {
                return @as(*const IWMDRMWriter2.VTable, @ptrCast(self.vtable)).SetWMDRMNetEncryption(@as(*const IWMDRMWriter2, @ptrCast(self)), f_samples_encrypted_, pb_key_i_d_, cb_key_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWMDRMWriter3_Value = Guid.initString("a7184082-a4aa-4dde-ac9c-e75dbd1117ce");
pub const IID_IWMDRMWriter3 = &IID_IWMDRMWriter3_Value;
pub const IWMDRMWriter3 = extern struct {
    pub const VTable = extern struct {
        base: IWMDRMWriter2.VTable,
        SetProtectStreamSamples: *const fn (
            self: *const IWMDRMWriter3,
            p_import_init_struct: ?*WMDRM_IMPORT_INIT_STRUCT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMDRMWriter2.MethodMixin(T);
            pub inline fn setProtectStreamSamples(self: *const T, p_import_init_struct_: ?*WMDRM_IMPORT_INIT_STRUCT) HRESULT {
                return @as(*const IWMDRMWriter3.VTable, @ptrCast(self.vtable)).SetProtectStreamSamples(@as(*const IWMDRMWriter3, @ptrCast(self)), p_import_init_struct_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMInputMediaProps_Value = Guid.initString("96406bd5-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMInputMediaProps = &IID_IWMInputMediaProps_Value;
pub const IWMInputMediaProps = extern struct {
    pub const VTable = extern struct {
        base: IWMMediaProps.VTable,
        GetConnectionName: *const fn (
            self: *const IWMInputMediaProps,
            pwsz_name: [*:0]u16,
            pcch_name: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroupName: *const fn (
            self: *const IWMInputMediaProps,
            pwsz_name: [*:0]u16,
            pcch_name: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMMediaProps.MethodMixin(T);
            pub inline fn getConnectionName(self: *const T, pwsz_name_: [*:0]u16, pcch_name_: ?*u16) HRESULT {
                return @as(*const IWMInputMediaProps.VTable, @ptrCast(self.vtable)).GetConnectionName(@as(*const IWMInputMediaProps, @ptrCast(self)), pwsz_name_, pcch_name_);
            }
            pub inline fn getGroupName(self: *const T, pwsz_name_: [*:0]u16, pcch_name_: ?*u16) HRESULT {
                return @as(*const IWMInputMediaProps.VTable, @ptrCast(self.vtable)).GetGroupName(@as(*const IWMInputMediaProps, @ptrCast(self)), pwsz_name_, pcch_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPropertyVault_Value = Guid.initString("72995a79-5090-42a4-9c8c-d9d0b6d34be5");
pub const IID_IWMPropertyVault = &IID_IWMPropertyVault_Value;
pub const IWMPropertyVault = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPropertyCount: *const fn (
            self: *const IWMPropertyVault,
            pdw_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyByName: *const fn (
            self: *const IWMPropertyVault,
            psz_name: ?[*:0]const u16,
            p_type: ?*WMT_ATTR_DATATYPE,
            p_value: [*:0]u8,
            pdw_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperty: *const fn (
            self: *const IWMPropertyVault,
            psz_name: ?[*:0]const u16,
            p_type: WMT_ATTR_DATATYPE,
            p_value: ?*u8,
            dw_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyByIndex: *const fn (
            self: *const IWMPropertyVault,
            dw_index: u32,
            psz_name: [*:0]u16,
            pdw_name_len: ?*u32,
            p_type: ?*WMT_ATTR_DATATYPE,
            p_value: [*:0]u8,
            pdw_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyPropertiesFrom: *const fn (
            self: *const IWMPropertyVault,
            p_i_w_m_property_vault: ?*IWMPropertyVault,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IWMPropertyVault,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPropertyCount(self: *const T, pdw_count_: ?*u32) HRESULT {
                return @as(*const IWMPropertyVault.VTable, @ptrCast(self.vtable)).GetPropertyCount(@as(*const IWMPropertyVault, @ptrCast(self)), pdw_count_);
            }
            pub inline fn getPropertyByName(self: *const T, psz_name_: ?[*:0]const u16, p_type_: ?*WMT_ATTR_DATATYPE, p_value_: [*:0]u8, pdw_size_: ?*u32) HRESULT {
                return @as(*const IWMPropertyVault.VTable, @ptrCast(self.vtable)).GetPropertyByName(@as(*const IWMPropertyVault, @ptrCast(self)), psz_name_, p_type_, p_value_, pdw_size_);
            }
            pub inline fn setProperty(self: *const T, psz_name_: ?[*:0]const u16, p_type_: WMT_ATTR_DATATYPE, p_value_: ?*u8, dw_size_: u32) HRESULT {
                return @as(*const IWMPropertyVault.VTable, @ptrCast(self.vtable)).SetProperty(@as(*const IWMPropertyVault, @ptrCast(self)), psz_name_, p_type_, p_value_, dw_size_);
            }
            pub inline fn getPropertyByIndex(self: *const T, dw_index_: u32, psz_name_: [*:0]u16, pdw_name_len_: ?*u32, p_type_: ?*WMT_ATTR_DATATYPE, p_value_: [*:0]u8, pdw_size_: ?*u32) HRESULT {
                return @as(*const IWMPropertyVault.VTable, @ptrCast(self.vtable)).GetPropertyByIndex(@as(*const IWMPropertyVault, @ptrCast(self)), dw_index_, psz_name_, pdw_name_len_, p_type_, p_value_, pdw_size_);
            }
            pub inline fn copyPropertiesFrom(self: *const T, p_i_w_m_property_vault_: ?*IWMPropertyVault) HRESULT {
                return @as(*const IWMPropertyVault.VTable, @ptrCast(self.vtable)).CopyPropertiesFrom(@as(*const IWMPropertyVault, @ptrCast(self)), p_i_w_m_property_vault_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IWMPropertyVault.VTable, @ptrCast(self.vtable)).Clear(@as(*const IWMPropertyVault, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMIStreamProps_Value = Guid.initString("6816dad3-2b4b-4c8e-8149-874c3483a753");
pub const IID_IWMIStreamProps = &IID_IWMIStreamProps_Value;
pub const IWMIStreamProps = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetProperty: *const fn (
            self: *const IWMIStreamProps,
            psz_name: ?[*:0]const u16,
            p_type: ?*WMT_ATTR_DATATYPE,
            p_value: [*:0]u8,
            pdw_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getProperty(self: *const T, psz_name_: ?[*:0]const u16, p_type_: ?*WMT_ATTR_DATATYPE, p_value_: [*:0]u8, pdw_size_: ?*u32) HRESULT {
                return @as(*const IWMIStreamProps.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IWMIStreamProps, @ptrCast(self)), psz_name_, p_type_, p_value_, pdw_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReader_Value = Guid.initString("96406bd6-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMReader = &IID_IWMReader_Value;
pub const IWMReader = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: *const fn (
            self: *const IWMReader,
            pwsz_u_r_l: ?[*:0]const u16,
            p_callback: ?*IWMReaderCallback,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IWMReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputCount: *const fn (
            self: *const IWMReader,
            pc_outputs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputProps: *const fn (
            self: *const IWMReader,
            dw_output_num: u32,
            pp_output: ?*?*IWMOutputMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutputProps: *const fn (
            self: *const IWMReader,
            dw_output_num: u32,
            p_output: ?*IWMOutputMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputFormatCount: *const fn (
            self: *const IWMReader,
            dw_output_number: u32,
            pc_formats: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputFormat: *const fn (
            self: *const IWMReader,
            dw_output_number: u32,
            dw_format_number: u32,
            pp_props: ?*?*IWMOutputMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Start: *const fn (
            self: *const IWMReader,
            cns_start: u64,
            cns_duration: u64,
            f_rate: f32,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const IWMReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pause: *const fn (
            self: *const IWMReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: *const fn (
            self: *const IWMReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn open(self: *const T, pwsz_u_r_l_: ?[*:0]const u16, p_callback_: ?*IWMReaderCallback, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMReader.VTable, @ptrCast(self.vtable)).Open(@as(*const IWMReader, @ptrCast(self)), pwsz_u_r_l_, p_callback_, pv_context_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IWMReader.VTable, @ptrCast(self.vtable)).Close(@as(*const IWMReader, @ptrCast(self)));
            }
            pub inline fn getOutputCount(self: *const T, pc_outputs_: ?*u32) HRESULT {
                return @as(*const IWMReader.VTable, @ptrCast(self.vtable)).GetOutputCount(@as(*const IWMReader, @ptrCast(self)), pc_outputs_);
            }
            pub inline fn getOutputProps(self: *const T, dw_output_num_: u32, pp_output_: ?*?*IWMOutputMediaProps) HRESULT {
                return @as(*const IWMReader.VTable, @ptrCast(self.vtable)).GetOutputProps(@as(*const IWMReader, @ptrCast(self)), dw_output_num_, pp_output_);
            }
            pub inline fn setOutputProps(self: *const T, dw_output_num_: u32, p_output_: ?*IWMOutputMediaProps) HRESULT {
                return @as(*const IWMReader.VTable, @ptrCast(self.vtable)).SetOutputProps(@as(*const IWMReader, @ptrCast(self)), dw_output_num_, p_output_);
            }
            pub inline fn getOutputFormatCount(self: *const T, dw_output_number_: u32, pc_formats_: ?*u32) HRESULT {
                return @as(*const IWMReader.VTable, @ptrCast(self.vtable)).GetOutputFormatCount(@as(*const IWMReader, @ptrCast(self)), dw_output_number_, pc_formats_);
            }
            pub inline fn getOutputFormat(self: *const T, dw_output_number_: u32, dw_format_number_: u32, pp_props_: ?*?*IWMOutputMediaProps) HRESULT {
                return @as(*const IWMReader.VTable, @ptrCast(self.vtable)).GetOutputFormat(@as(*const IWMReader, @ptrCast(self)), dw_output_number_, dw_format_number_, pp_props_);
            }
            pub inline fn start(self: *const T, cns_start_: u64, cns_duration_: u64, f_rate_: f32, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMReader.VTable, @ptrCast(self.vtable)).Start(@as(*const IWMReader, @ptrCast(self)), cns_start_, cns_duration_, f_rate_, pv_context_);
            }
            pub inline fn stop(self: *const T) HRESULT {
                return @as(*const IWMReader.VTable, @ptrCast(self.vtable)).Stop(@as(*const IWMReader, @ptrCast(self)));
            }
            pub inline fn pause(self: *const T) HRESULT {
                return @as(*const IWMReader.VTable, @ptrCast(self.vtable)).Pause(@as(*const IWMReader, @ptrCast(self)));
            }
            pub inline fn @"resume"(self: *const T) HRESULT {
                return @as(*const IWMReader.VTable, @ptrCast(self.vtable)).Resume(@as(*const IWMReader, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMSyncReader_Value = Guid.initString("9397f121-7705-4dc9-b049-98b698188414");
pub const IID_IWMSyncReader = &IID_IWMSyncReader_Value;
pub const IWMSyncReader = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: *const fn (
            self: *const IWMSyncReader,
            pwsz_filename: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IWMSyncReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRange: *const fn (
            self: *const IWMSyncReader,
            cns_start_time: u64,
            cns_duration: i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRangeByFrame: *const fn (
            self: *const IWMSyncReader,
            w_stream_num: u16,
            qw_frame_number: u64,
            c_frames_to_read: i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextSample: *const fn (
            self: *const IWMSyncReader,
            w_stream_num: u16,
            pp_sample: ?*?*INSSBuffer,
            pcns_sample_time: ?*u64,
            pcns_duration: ?*u64,
            pdw_flags: ?*u32,
            pdw_output_num: ?*u32,
            pw_stream_num: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStreamsSelected: *const fn (
            self: *const IWMSyncReader,
            c_stream_count: u16,
            pw_stream_numbers: ?*u16,
            p_selections: ?*WMT_STREAM_SELECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamSelected: *const fn (
            self: *const IWMSyncReader,
            w_stream_num: u16,
            p_selection: ?*WMT_STREAM_SELECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReadStreamSamples: *const fn (
            self: *const IWMSyncReader,
            w_stream_num: u16,
            f_compressed: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReadStreamSamples: *const fn (
            self: *const IWMSyncReader,
            w_stream_num: u16,
            pf_compressed: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputSetting: *const fn (
            self: *const IWMSyncReader,
            dw_output_num: u32,
            psz_name: ?[*:0]const u16,
            p_type: ?*WMT_ATTR_DATATYPE,
            p_value: [*:0]u8,
            pcb_length: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutputSetting: *const fn (
            self: *const IWMSyncReader,
            dw_output_num: u32,
            psz_name: ?[*:0]const u16,
            type: WMT_ATTR_DATATYPE,
            p_value: [*:0]const u8,
            cb_length: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputCount: *const fn (
            self: *const IWMSyncReader,
            pc_outputs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputProps: *const fn (
            self: *const IWMSyncReader,
            dw_output_num: u32,
            pp_output: ?*?*IWMOutputMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutputProps: *const fn (
            self: *const IWMSyncReader,
            dw_output_num: u32,
            p_output: ?*IWMOutputMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputFormatCount: *const fn (
            self: *const IWMSyncReader,
            dw_output_num: u32,
            pc_formats: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputFormat: *const fn (
            self: *const IWMSyncReader,
            dw_output_num: u32,
            dw_format_num: u32,
            pp_props: ?*?*IWMOutputMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputNumberForStream: *const fn (
            self: *const IWMSyncReader,
            w_stream_num: u16,
            pdw_output_num: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamNumberForOutput: *const fn (
            self: *const IWMSyncReader,
            dw_output_num: u32,
            pw_stream_num: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxOutputSampleSize: *const fn (
            self: *const IWMSyncReader,
            dw_output: u32,
            pcb_max: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxStreamSampleSize: *const fn (
            self: *const IWMSyncReader,
            w_stream: u16,
            pcb_max: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenStream: *const fn (
            self: *const IWMSyncReader,
            p_stream: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn open(self: *const T, pwsz_filename_: ?[*:0]const u16) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).Open(@as(*const IWMSyncReader, @ptrCast(self)), pwsz_filename_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).Close(@as(*const IWMSyncReader, @ptrCast(self)));
            }
            pub inline fn setRange(self: *const T, cns_start_time_: u64, cns_duration_: i64) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).SetRange(@as(*const IWMSyncReader, @ptrCast(self)), cns_start_time_, cns_duration_);
            }
            pub inline fn setRangeByFrame(self: *const T, w_stream_num_: u16, qw_frame_number_: u64, c_frames_to_read_: i64) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).SetRangeByFrame(@as(*const IWMSyncReader, @ptrCast(self)), w_stream_num_, qw_frame_number_, c_frames_to_read_);
            }
            pub inline fn getNextSample(self: *const T, w_stream_num_: u16, pp_sample_: ?*?*INSSBuffer, pcns_sample_time_: ?*u64, pcns_duration_: ?*u64, pdw_flags_: ?*u32, pdw_output_num_: ?*u32, pw_stream_num_: ?*u16) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).GetNextSample(@as(*const IWMSyncReader, @ptrCast(self)), w_stream_num_, pp_sample_, pcns_sample_time_, pcns_duration_, pdw_flags_, pdw_output_num_, pw_stream_num_);
            }
            pub inline fn setStreamsSelected(self: *const T, c_stream_count_: u16, pw_stream_numbers_: ?*u16, p_selections_: ?*WMT_STREAM_SELECTION) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).SetStreamsSelected(@as(*const IWMSyncReader, @ptrCast(self)), c_stream_count_, pw_stream_numbers_, p_selections_);
            }
            pub inline fn getStreamSelected(self: *const T, w_stream_num_: u16, p_selection_: ?*WMT_STREAM_SELECTION) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).GetStreamSelected(@as(*const IWMSyncReader, @ptrCast(self)), w_stream_num_, p_selection_);
            }
            pub inline fn setReadStreamSamples(self: *const T, w_stream_num_: u16, f_compressed_: BOOL) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).SetReadStreamSamples(@as(*const IWMSyncReader, @ptrCast(self)), w_stream_num_, f_compressed_);
            }
            pub inline fn getReadStreamSamples(self: *const T, w_stream_num_: u16, pf_compressed_: ?*BOOL) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).GetReadStreamSamples(@as(*const IWMSyncReader, @ptrCast(self)), w_stream_num_, pf_compressed_);
            }
            pub inline fn getOutputSetting(self: *const T, dw_output_num_: u32, psz_name_: ?[*:0]const u16, p_type_: ?*WMT_ATTR_DATATYPE, p_value_: [*:0]u8, pcb_length_: ?*u16) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).GetOutputSetting(@as(*const IWMSyncReader, @ptrCast(self)), dw_output_num_, psz_name_, p_type_, p_value_, pcb_length_);
            }
            pub inline fn setOutputSetting(self: *const T, dw_output_num_: u32, psz_name_: ?[*:0]const u16, type_: WMT_ATTR_DATATYPE, p_value_: [*:0]const u8, cb_length_: u16) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).SetOutputSetting(@as(*const IWMSyncReader, @ptrCast(self)), dw_output_num_, psz_name_, type_, p_value_, cb_length_);
            }
            pub inline fn getOutputCount(self: *const T, pc_outputs_: ?*u32) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).GetOutputCount(@as(*const IWMSyncReader, @ptrCast(self)), pc_outputs_);
            }
            pub inline fn getOutputProps(self: *const T, dw_output_num_: u32, pp_output_: ?*?*IWMOutputMediaProps) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).GetOutputProps(@as(*const IWMSyncReader, @ptrCast(self)), dw_output_num_, pp_output_);
            }
            pub inline fn setOutputProps(self: *const T, dw_output_num_: u32, p_output_: ?*IWMOutputMediaProps) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).SetOutputProps(@as(*const IWMSyncReader, @ptrCast(self)), dw_output_num_, p_output_);
            }
            pub inline fn getOutputFormatCount(self: *const T, dw_output_num_: u32, pc_formats_: ?*u32) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).GetOutputFormatCount(@as(*const IWMSyncReader, @ptrCast(self)), dw_output_num_, pc_formats_);
            }
            pub inline fn getOutputFormat(self: *const T, dw_output_num_: u32, dw_format_num_: u32, pp_props_: ?*?*IWMOutputMediaProps) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).GetOutputFormat(@as(*const IWMSyncReader, @ptrCast(self)), dw_output_num_, dw_format_num_, pp_props_);
            }
            pub inline fn getOutputNumberForStream(self: *const T, w_stream_num_: u16, pdw_output_num_: ?*u32) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).GetOutputNumberForStream(@as(*const IWMSyncReader, @ptrCast(self)), w_stream_num_, pdw_output_num_);
            }
            pub inline fn getStreamNumberForOutput(self: *const T, dw_output_num_: u32, pw_stream_num_: ?*u16) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).GetStreamNumberForOutput(@as(*const IWMSyncReader, @ptrCast(self)), dw_output_num_, pw_stream_num_);
            }
            pub inline fn getMaxOutputSampleSize(self: *const T, dw_output_: u32, pcb_max_: ?*u32) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).GetMaxOutputSampleSize(@as(*const IWMSyncReader, @ptrCast(self)), dw_output_, pcb_max_);
            }
            pub inline fn getMaxStreamSampleSize(self: *const T, w_stream_: u16, pcb_max_: ?*u32) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).GetMaxStreamSampleSize(@as(*const IWMSyncReader, @ptrCast(self)), w_stream_, pcb_max_);
            }
            pub inline fn openStream(self: *const T, p_stream_: ?*IStream) HRESULT {
                return @as(*const IWMSyncReader.VTable, @ptrCast(self.vtable)).OpenStream(@as(*const IWMSyncReader, @ptrCast(self)), p_stream_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMSyncReader2_Value = Guid.initString("faed3d21-1b6b-4af7-8cb6-3e189bbc187b");
pub const IID_IWMSyncReader2 = &IID_IWMSyncReader2_Value;
pub const IWMSyncReader2 = extern struct {
    pub const VTable = extern struct {
        base: IWMSyncReader.VTable,
        SetRangeByTimecode: *const fn (
            self: *const IWMSyncReader2,
            w_stream_num: u16,
            p_start: ?*WMT_TIMECODE_EXTENSION_DATA,
            p_end: ?*WMT_TIMECODE_EXTENSION_DATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRangeByFrameEx: *const fn (
            self: *const IWMSyncReader2,
            w_stream_num: u16,
            qw_frame_number: u64,
            c_frames_to_read: i64,
            pcns_start_time: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllocateForOutput: *const fn (
            self: *const IWMSyncReader2,
            dw_output_num: u32,
            p_allocator: ?*IWMReaderAllocatorEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllocateForOutput: *const fn (
            self: *const IWMSyncReader2,
            dw_output_num: u32,
            pp_allocator: ?*?*IWMReaderAllocatorEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllocateForStream: *const fn (
            self: *const IWMSyncReader2,
            w_stream_num: u16,
            p_allocator: ?*IWMReaderAllocatorEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllocateForStream: *const fn (
            self: *const IWMSyncReader2,
            dw_sream_num: u16,
            pp_allocator: ?*?*IWMReaderAllocatorEx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMSyncReader.MethodMixin(T);
            pub inline fn setRangeByTimecode(self: *const T, w_stream_num_: u16, p_start_: ?*WMT_TIMECODE_EXTENSION_DATA, p_end_: ?*WMT_TIMECODE_EXTENSION_DATA) HRESULT {
                return @as(*const IWMSyncReader2.VTable, @ptrCast(self.vtable)).SetRangeByTimecode(@as(*const IWMSyncReader2, @ptrCast(self)), w_stream_num_, p_start_, p_end_);
            }
            pub inline fn setRangeByFrameEx(self: *const T, w_stream_num_: u16, qw_frame_number_: u64, c_frames_to_read_: i64, pcns_start_time_: ?*u64) HRESULT {
                return @as(*const IWMSyncReader2.VTable, @ptrCast(self.vtable)).SetRangeByFrameEx(@as(*const IWMSyncReader2, @ptrCast(self)), w_stream_num_, qw_frame_number_, c_frames_to_read_, pcns_start_time_);
            }
            pub inline fn setAllocateForOutput(self: *const T, dw_output_num_: u32, p_allocator_: ?*IWMReaderAllocatorEx) HRESULT {
                return @as(*const IWMSyncReader2.VTable, @ptrCast(self.vtable)).SetAllocateForOutput(@as(*const IWMSyncReader2, @ptrCast(self)), dw_output_num_, p_allocator_);
            }
            pub inline fn getAllocateForOutput(self: *const T, dw_output_num_: u32, pp_allocator_: ?*?*IWMReaderAllocatorEx) HRESULT {
                return @as(*const IWMSyncReader2.VTable, @ptrCast(self.vtable)).GetAllocateForOutput(@as(*const IWMSyncReader2, @ptrCast(self)), dw_output_num_, pp_allocator_);
            }
            pub inline fn setAllocateForStream(self: *const T, w_stream_num_: u16, p_allocator_: ?*IWMReaderAllocatorEx) HRESULT {
                return @as(*const IWMSyncReader2.VTable, @ptrCast(self.vtable)).SetAllocateForStream(@as(*const IWMSyncReader2, @ptrCast(self)), w_stream_num_, p_allocator_);
            }
            pub inline fn getAllocateForStream(self: *const T, dw_sream_num_: u16, pp_allocator_: ?*?*IWMReaderAllocatorEx) HRESULT {
                return @as(*const IWMSyncReader2.VTable, @ptrCast(self.vtable)).GetAllocateForStream(@as(*const IWMSyncReader2, @ptrCast(self)), dw_sream_num_, pp_allocator_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMOutputMediaProps_Value = Guid.initString("96406bd7-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMOutputMediaProps = &IID_IWMOutputMediaProps_Value;
pub const IWMOutputMediaProps = extern struct {
    pub const VTable = extern struct {
        base: IWMMediaProps.VTable,
        GetStreamGroupName: *const fn (
            self: *const IWMOutputMediaProps,
            pwsz_name: [*:0]u16,
            pcch_name: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnectionName: *const fn (
            self: *const IWMOutputMediaProps,
            pwsz_name: [*:0]u16,
            pcch_name: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMMediaProps.MethodMixin(T);
            pub inline fn getStreamGroupName(self: *const T, pwsz_name_: [*:0]u16, pcch_name_: ?*u16) HRESULT {
                return @as(*const IWMOutputMediaProps.VTable, @ptrCast(self.vtable)).GetStreamGroupName(@as(*const IWMOutputMediaProps, @ptrCast(self)), pwsz_name_, pcch_name_);
            }
            pub inline fn getConnectionName(self: *const T, pwsz_name_: [*:0]u16, pcch_name_: ?*u16) HRESULT {
                return @as(*const IWMOutputMediaProps.VTable, @ptrCast(self.vtable)).GetConnectionName(@as(*const IWMOutputMediaProps, @ptrCast(self)), pwsz_name_, pcch_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMStatusCallback_Value = Guid.initString("6d7cdc70-9888-11d3-8edc-00c04f6109cf");
pub const IID_IWMStatusCallback = &IID_IWMStatusCallback_Value;
pub const IWMStatusCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnStatus: *const fn (
            self: *const IWMStatusCallback,
            status: WMT_STATUS,
            hr: HRESULT,
            dw_type: WMT_ATTR_DATATYPE,
            p_value: ?*u8,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onStatus(self: *const T, status_: WMT_STATUS, hr_: HRESULT, dw_type_: WMT_ATTR_DATATYPE, p_value_: ?*u8, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMStatusCallback.VTable, @ptrCast(self.vtable)).OnStatus(@as(*const IWMStatusCallback, @ptrCast(self)), status_, hr_, dw_type_, p_value_, pv_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderCallback_Value = Guid.initString("96406bd8-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMReaderCallback = &IID_IWMReaderCallback_Value;
pub const IWMReaderCallback = extern struct {
    pub const VTable = extern struct {
        base: IWMStatusCallback.VTable,
        OnSample: *const fn (
            self: *const IWMReaderCallback,
            dw_output_num: u32,
            cns_sample_time: u64,
            cns_sample_duration: u64,
            dw_flags: u32,
            p_sample: ?*INSSBuffer,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMStatusCallback.MethodMixin(T);
            pub inline fn onSample(self: *const T, dw_output_num_: u32, cns_sample_time_: u64, cns_sample_duration_: u64, dw_flags_: u32, p_sample_: ?*INSSBuffer, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMReaderCallback.VTable, @ptrCast(self.vtable)).OnSample(@as(*const IWMReaderCallback, @ptrCast(self)), dw_output_num_, cns_sample_time_, cns_sample_duration_, dw_flags_, p_sample_, pv_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMCredentialCallback_Value = Guid.initString("342e0eb7-e651-450c-975b-2ace2c90c48e");
pub const IID_IWMCredentialCallback = &IID_IWMCredentialCallback_Value;
pub const IWMCredentialCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AcquireCredentials: *const fn (
            self: *const IWMCredentialCallback,
            pwsz_realm: ?PWSTR,
            pwsz_site: ?PWSTR,
            pwsz_user: [*:0]u16,
            cch_user: u32,
            pwsz_password: [*:0]u16,
            cch_password: u32,
            hr_status: HRESULT,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn acquireCredentials(self: *const T, pwsz_realm_: ?PWSTR, pwsz_site_: ?PWSTR, pwsz_user_: [*:0]u16, cch_user_: u32, pwsz_password_: [*:0]u16, cch_password_: u32, hr_status_: HRESULT, pdw_flags_: ?*u32) HRESULT {
                return @as(*const IWMCredentialCallback.VTable, @ptrCast(self.vtable)).AcquireCredentials(@as(*const IWMCredentialCallback, @ptrCast(self)), pwsz_realm_, pwsz_site_, pwsz_user_, cch_user_, pwsz_password_, cch_password_, hr_status_, pdw_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMMetadataEditor_Value = Guid.initString("96406bd9-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMMetadataEditor = &IID_IWMMetadataEditor_Value;
pub const IWMMetadataEditor = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: *const fn (
            self: *const IWMMetadataEditor,
            pwsz_filename: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IWMMetadataEditor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Flush: *const fn (
            self: *const IWMMetadataEditor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn open(self: *const T, pwsz_filename_: ?[*:0]const u16) HRESULT {
                return @as(*const IWMMetadataEditor.VTable, @ptrCast(self.vtable)).Open(@as(*const IWMMetadataEditor, @ptrCast(self)), pwsz_filename_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IWMMetadataEditor.VTable, @ptrCast(self.vtable)).Close(@as(*const IWMMetadataEditor, @ptrCast(self)));
            }
            pub inline fn flush(self: *const T) HRESULT {
                return @as(*const IWMMetadataEditor.VTable, @ptrCast(self.vtable)).Flush(@as(*const IWMMetadataEditor, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMMetadataEditor2_Value = Guid.initString("203cffe3-2e18-4fdf-b59d-6e71530534cf");
pub const IID_IWMMetadataEditor2 = &IID_IWMMetadataEditor2_Value;
pub const IWMMetadataEditor2 = extern struct {
    pub const VTable = extern struct {
        base: IWMMetadataEditor.VTable,
        OpenEx: *const fn (
            self: *const IWMMetadataEditor2,
            pwsz_filename: ?[*:0]const u16,
            dw_desired_access: u32,
            dw_share_mode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMMetadataEditor.MethodMixin(T);
            pub inline fn openEx(self: *const T, pwsz_filename_: ?[*:0]const u16, dw_desired_access_: u32, dw_share_mode_: u32) HRESULT {
                return @as(*const IWMMetadataEditor2.VTable, @ptrCast(self.vtable)).OpenEx(@as(*const IWMMetadataEditor2, @ptrCast(self)), pwsz_filename_, dw_desired_access_, dw_share_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWMDRMEditor_Value = Guid.initString("ff130ebc-a6c3-42a6-b401-c3382c3e08b3");
pub const IID_IWMDRMEditor = &IID_IWMDRMEditor_Value;
pub const IWMDRMEditor = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDRMProperty: *const fn (
            self: *const IWMDRMEditor,
            pwstr_name: ?[*:0]const u16,
            pdw_type: ?*WMT_ATTR_DATATYPE,
            p_value: [*:0]u8,
            pcb_length: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDRMProperty(self: *const T, pwstr_name_: ?[*:0]const u16, pdw_type_: ?*WMT_ATTR_DATATYPE, p_value_: [*:0]u8, pcb_length_: ?*u16) HRESULT {
                return @as(*const IWMDRMEditor.VTable, @ptrCast(self.vtable)).GetDRMProperty(@as(*const IWMDRMEditor, @ptrCast(self)), pwstr_name_, pdw_type_, p_value_, pcb_length_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMHeaderInfo_Value = Guid.initString("96406bda-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMHeaderInfo = &IID_IWMHeaderInfo_Value;
pub const IWMHeaderInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAttributeCount: *const fn (
            self: *const IWMHeaderInfo,
            w_stream_num: u16,
            pc_attributes: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeByIndex: *const fn (
            self: *const IWMHeaderInfo,
            w_index: u16,
            pw_stream_num: ?*u16,
            pwsz_name: [*:0]u16,
            pcch_name_len: ?*u16,
            p_type: ?*WMT_ATTR_DATATYPE,
            p_value: [*:0]u8,
            pcb_length: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeByName: *const fn (
            self: *const IWMHeaderInfo,
            pw_stream_num: ?*u16,
            psz_name: ?[*:0]const u16,
            p_type: ?*WMT_ATTR_DATATYPE,
            p_value: [*:0]u8,
            pcb_length: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAttribute: *const fn (
            self: *const IWMHeaderInfo,
            w_stream_num: u16,
            psz_name: ?[*:0]const u16,
            type: WMT_ATTR_DATATYPE,
            p_value: [*:0]const u8,
            cb_length: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMarkerCount: *const fn (
            self: *const IWMHeaderInfo,
            pc_markers: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMarker: *const fn (
            self: *const IWMHeaderInfo,
            w_index: u16,
            pwsz_marker_name: [*:0]u16,
            pcch_marker_name_len: ?*u16,
            pcns_marker_time: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddMarker: *const fn (
            self: *const IWMHeaderInfo,
            pwsz_marker_name: ?PWSTR,
            cns_marker_time: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveMarker: *const fn (
            self: *const IWMHeaderInfo,
            w_index: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScriptCount: *const fn (
            self: *const IWMHeaderInfo,
            pc_scripts: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetScript: *const fn (
            self: *const IWMHeaderInfo,
            w_index: u16,
            pwsz_type: [*:0]u16,
            pcch_type_len: ?*u16,
            pwsz_command: [*:0]u16,
            pcch_command_len: ?*u16,
            pcns_script_time: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddScript: *const fn (
            self: *const IWMHeaderInfo,
            pwsz_type: ?PWSTR,
            pwsz_command: ?PWSTR,
            cns_script_time: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveScript: *const fn (
            self: *const IWMHeaderInfo,
            w_index: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAttributeCount(self: *const T, w_stream_num_: u16, pc_attributes_: ?*u16) HRESULT {
                return @as(*const IWMHeaderInfo.VTable, @ptrCast(self.vtable)).GetAttributeCount(@as(*const IWMHeaderInfo, @ptrCast(self)), w_stream_num_, pc_attributes_);
            }
            pub inline fn getAttributeByIndex(self: *const T, w_index_: u16, pw_stream_num_: ?*u16, pwsz_name_: [*:0]u16, pcch_name_len_: ?*u16, p_type_: ?*WMT_ATTR_DATATYPE, p_value_: [*:0]u8, pcb_length_: ?*u16) HRESULT {
                return @as(*const IWMHeaderInfo.VTable, @ptrCast(self.vtable)).GetAttributeByIndex(@as(*const IWMHeaderInfo, @ptrCast(self)), w_index_, pw_stream_num_, pwsz_name_, pcch_name_len_, p_type_, p_value_, pcb_length_);
            }
            pub inline fn getAttributeByName(self: *const T, pw_stream_num_: ?*u16, psz_name_: ?[*:0]const u16, p_type_: ?*WMT_ATTR_DATATYPE, p_value_: [*:0]u8, pcb_length_: ?*u16) HRESULT {
                return @as(*const IWMHeaderInfo.VTable, @ptrCast(self.vtable)).GetAttributeByName(@as(*const IWMHeaderInfo, @ptrCast(self)), pw_stream_num_, psz_name_, p_type_, p_value_, pcb_length_);
            }
            pub inline fn setAttribute(self: *const T, w_stream_num_: u16, psz_name_: ?[*:0]const u16, type_: WMT_ATTR_DATATYPE, p_value_: [*:0]const u8, cb_length_: u16) HRESULT {
                return @as(*const IWMHeaderInfo.VTable, @ptrCast(self.vtable)).SetAttribute(@as(*const IWMHeaderInfo, @ptrCast(self)), w_stream_num_, psz_name_, type_, p_value_, cb_length_);
            }
            pub inline fn getMarkerCount(self: *const T, pc_markers_: ?*u16) HRESULT {
                return @as(*const IWMHeaderInfo.VTable, @ptrCast(self.vtable)).GetMarkerCount(@as(*const IWMHeaderInfo, @ptrCast(self)), pc_markers_);
            }
            pub inline fn getMarker(self: *const T, w_index_: u16, pwsz_marker_name_: [*:0]u16, pcch_marker_name_len_: ?*u16, pcns_marker_time_: ?*u64) HRESULT {
                return @as(*const IWMHeaderInfo.VTable, @ptrCast(self.vtable)).GetMarker(@as(*const IWMHeaderInfo, @ptrCast(self)), w_index_, pwsz_marker_name_, pcch_marker_name_len_, pcns_marker_time_);
            }
            pub inline fn addMarker(self: *const T, pwsz_marker_name_: ?PWSTR, cns_marker_time_: u64) HRESULT {
                return @as(*const IWMHeaderInfo.VTable, @ptrCast(self.vtable)).AddMarker(@as(*const IWMHeaderInfo, @ptrCast(self)), pwsz_marker_name_, cns_marker_time_);
            }
            pub inline fn removeMarker(self: *const T, w_index_: u16) HRESULT {
                return @as(*const IWMHeaderInfo.VTable, @ptrCast(self.vtable)).RemoveMarker(@as(*const IWMHeaderInfo, @ptrCast(self)), w_index_);
            }
            pub inline fn getScriptCount(self: *const T, pc_scripts_: ?*u16) HRESULT {
                return @as(*const IWMHeaderInfo.VTable, @ptrCast(self.vtable)).GetScriptCount(@as(*const IWMHeaderInfo, @ptrCast(self)), pc_scripts_);
            }
            pub inline fn getScript(self: *const T, w_index_: u16, pwsz_type_: [*:0]u16, pcch_type_len_: ?*u16, pwsz_command_: [*:0]u16, pcch_command_len_: ?*u16, pcns_script_time_: ?*u64) HRESULT {
                return @as(*const IWMHeaderInfo.VTable, @ptrCast(self.vtable)).GetScript(@as(*const IWMHeaderInfo, @ptrCast(self)), w_index_, pwsz_type_, pcch_type_len_, pwsz_command_, pcch_command_len_, pcns_script_time_);
            }
            pub inline fn addScript(self: *const T, pwsz_type_: ?PWSTR, pwsz_command_: ?PWSTR, cns_script_time_: u64) HRESULT {
                return @as(*const IWMHeaderInfo.VTable, @ptrCast(self.vtable)).AddScript(@as(*const IWMHeaderInfo, @ptrCast(self)), pwsz_type_, pwsz_command_, cns_script_time_);
            }
            pub inline fn removeScript(self: *const T, w_index_: u16) HRESULT {
                return @as(*const IWMHeaderInfo.VTable, @ptrCast(self.vtable)).RemoveScript(@as(*const IWMHeaderInfo, @ptrCast(self)), w_index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMHeaderInfo2_Value = Guid.initString("15cf9781-454e-482e-b393-85fae487a810");
pub const IID_IWMHeaderInfo2 = &IID_IWMHeaderInfo2_Value;
pub const IWMHeaderInfo2 = extern struct {
    pub const VTable = extern struct {
        base: IWMHeaderInfo.VTable,
        GetCodecInfoCount: *const fn (
            self: *const IWMHeaderInfo2,
            pc_codec_infos: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCodecInfo: *const fn (
            self: *const IWMHeaderInfo2,
            w_index: u32,
            pcch_name: ?*u16,
            pwsz_name: [*:0]u16,
            pcch_description: ?*u16,
            pwsz_description: [*:0]u16,
            p_codec_type: ?*WMT_CODEC_INFO_TYPE,
            pcb_codec_info: ?*u16,
            pb_codec_info: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMHeaderInfo.MethodMixin(T);
            pub inline fn getCodecInfoCount(self: *const T, pc_codec_infos_: ?*u32) HRESULT {
                return @as(*const IWMHeaderInfo2.VTable, @ptrCast(self.vtable)).GetCodecInfoCount(@as(*const IWMHeaderInfo2, @ptrCast(self)), pc_codec_infos_);
            }
            pub inline fn getCodecInfo(self: *const T, w_index_: u32, pcch_name_: ?*u16, pwsz_name_: [*:0]u16, pcch_description_: ?*u16, pwsz_description_: [*:0]u16, p_codec_type_: ?*WMT_CODEC_INFO_TYPE, pcb_codec_info_: ?*u16, pb_codec_info_: [*:0]u8) HRESULT {
                return @as(*const IWMHeaderInfo2.VTable, @ptrCast(self.vtable)).GetCodecInfo(@as(*const IWMHeaderInfo2, @ptrCast(self)), w_index_, pcch_name_, pwsz_name_, pcch_description_, pwsz_description_, p_codec_type_, pcb_codec_info_, pb_codec_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMHeaderInfo3_Value = Guid.initString("15cc68e3-27cc-4ecd-b222-3f5d02d80bd5");
pub const IID_IWMHeaderInfo3 = &IID_IWMHeaderInfo3_Value;
pub const IWMHeaderInfo3 = extern struct {
    pub const VTable = extern struct {
        base: IWMHeaderInfo2.VTable,
        GetAttributeCountEx: *const fn (
            self: *const IWMHeaderInfo3,
            w_stream_num: u16,
            pc_attributes: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeIndices: *const fn (
            self: *const IWMHeaderInfo3,
            w_stream_num: u16,
            pwsz_name: ?[*:0]const u16,
            pw_lang_index: ?*u16,
            pw_indices: [*:0]u16,
            pw_count: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeByIndexEx: *const fn (
            self: *const IWMHeaderInfo3,
            w_stream_num: u16,
            w_index: u16,
            pwsz_name: [*:0]u16,
            pw_name_len: ?*u16,
            p_type: ?*WMT_ATTR_DATATYPE,
            pw_lang_index: ?*u16,
            p_value: [*:0]u8,
            pdw_data_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ModifyAttribute: *const fn (
            self: *const IWMHeaderInfo3,
            w_stream_num: u16,
            w_index: u16,
            type: WMT_ATTR_DATATYPE,
            w_lang_index: u16,
            p_value: [*:0]const u8,
            dw_length: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAttribute: *const fn (
            self: *const IWMHeaderInfo3,
            w_stream_num: u16,
            psz_name: ?[*:0]const u16,
            pw_index: ?*u16,
            type: WMT_ATTR_DATATYPE,
            w_lang_index: u16,
            p_value: [*:0]const u8,
            dw_length: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAttribute: *const fn (
            self: *const IWMHeaderInfo3,
            w_stream_num: u16,
            w_index: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCodecInfo: *const fn (
            self: *const IWMHeaderInfo3,
            pwsz_name: ?PWSTR,
            pwsz_description: ?PWSTR,
            codec_type: WMT_CODEC_INFO_TYPE,
            cb_codec_info: u16,
            pb_codec_info: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMHeaderInfo2.MethodMixin(T);
            pub inline fn getAttributeCountEx(self: *const T, w_stream_num_: u16, pc_attributes_: ?*u16) HRESULT {
                return @as(*const IWMHeaderInfo3.VTable, @ptrCast(self.vtable)).GetAttributeCountEx(@as(*const IWMHeaderInfo3, @ptrCast(self)), w_stream_num_, pc_attributes_);
            }
            pub inline fn getAttributeIndices(self: *const T, w_stream_num_: u16, pwsz_name_: ?[*:0]const u16, pw_lang_index_: ?*u16, pw_indices_: [*:0]u16, pw_count_: ?*u16) HRESULT {
                return @as(*const IWMHeaderInfo3.VTable, @ptrCast(self.vtable)).GetAttributeIndices(@as(*const IWMHeaderInfo3, @ptrCast(self)), w_stream_num_, pwsz_name_, pw_lang_index_, pw_indices_, pw_count_);
            }
            pub inline fn getAttributeByIndexEx(self: *const T, w_stream_num_: u16, w_index_: u16, pwsz_name_: [*:0]u16, pw_name_len_: ?*u16, p_type_: ?*WMT_ATTR_DATATYPE, pw_lang_index_: ?*u16, p_value_: [*:0]u8, pdw_data_length_: ?*u32) HRESULT {
                return @as(*const IWMHeaderInfo3.VTable, @ptrCast(self.vtable)).GetAttributeByIndexEx(@as(*const IWMHeaderInfo3, @ptrCast(self)), w_stream_num_, w_index_, pwsz_name_, pw_name_len_, p_type_, pw_lang_index_, p_value_, pdw_data_length_);
            }
            pub inline fn modifyAttribute(self: *const T, w_stream_num_: u16, w_index_: u16, type_: WMT_ATTR_DATATYPE, w_lang_index_: u16, p_value_: [*:0]const u8, dw_length_: u32) HRESULT {
                return @as(*const IWMHeaderInfo3.VTable, @ptrCast(self.vtable)).ModifyAttribute(@as(*const IWMHeaderInfo3, @ptrCast(self)), w_stream_num_, w_index_, type_, w_lang_index_, p_value_, dw_length_);
            }
            pub inline fn addAttribute(self: *const T, w_stream_num_: u16, psz_name_: ?[*:0]const u16, pw_index_: ?*u16, type_: WMT_ATTR_DATATYPE, w_lang_index_: u16, p_value_: [*:0]const u8, dw_length_: u32) HRESULT {
                return @as(*const IWMHeaderInfo3.VTable, @ptrCast(self.vtable)).AddAttribute(@as(*const IWMHeaderInfo3, @ptrCast(self)), w_stream_num_, psz_name_, pw_index_, type_, w_lang_index_, p_value_, dw_length_);
            }
            pub inline fn deleteAttribute(self: *const T, w_stream_num_: u16, w_index_: u16) HRESULT {
                return @as(*const IWMHeaderInfo3.VTable, @ptrCast(self.vtable)).DeleteAttribute(@as(*const IWMHeaderInfo3, @ptrCast(self)), w_stream_num_, w_index_);
            }
            pub inline fn addCodecInfo(self: *const T, pwsz_name_: ?PWSTR, pwsz_description_: ?PWSTR, codec_type_: WMT_CODEC_INFO_TYPE, cb_codec_info_: u16, pb_codec_info_: [*:0]u8) HRESULT {
                return @as(*const IWMHeaderInfo3.VTable, @ptrCast(self.vtable)).AddCodecInfo(@as(*const IWMHeaderInfo3, @ptrCast(self)), pwsz_name_, pwsz_description_, codec_type_, cb_codec_info_, pb_codec_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMProfileManager_Value = Guid.initString("d16679f2-6ca0-472d-8d31-2f5d55aee155");
pub const IID_IWMProfileManager = &IID_IWMProfileManager_Value;
pub const IWMProfileManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateEmptyProfile: *const fn (
            self: *const IWMProfileManager,
            dw_version: WMT_VERSION,
            pp_profile: ?*?*IWMProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadProfileByID: *const fn (
            self: *const IWMProfileManager,
            guid_profile: ?*const Guid,
            pp_profile: ?*?*IWMProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadProfileByData: *const fn (
            self: *const IWMProfileManager,
            pwsz_profile: ?[*:0]const u16,
            pp_profile: ?*?*IWMProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveProfile: *const fn (
            self: *const IWMProfileManager,
            p_i_w_m_profile: ?*IWMProfile,
            pwsz_profile: ?PWSTR,
            pdw_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSystemProfileCount: *const fn (
            self: *const IWMProfileManager,
            pc_profiles: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadSystemProfile: *const fn (
            self: *const IWMProfileManager,
            dw_profile_index: u32,
            pp_profile: ?*?*IWMProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createEmptyProfile(self: *const T, dw_version_: WMT_VERSION, pp_profile_: ?*?*IWMProfile) HRESULT {
                return @as(*const IWMProfileManager.VTable, @ptrCast(self.vtable)).CreateEmptyProfile(@as(*const IWMProfileManager, @ptrCast(self)), dw_version_, pp_profile_);
            }
            pub inline fn loadProfileByID(self: *const T, guid_profile_: ?*const Guid, pp_profile_: ?*?*IWMProfile) HRESULT {
                return @as(*const IWMProfileManager.VTable, @ptrCast(self.vtable)).LoadProfileByID(@as(*const IWMProfileManager, @ptrCast(self)), guid_profile_, pp_profile_);
            }
            pub inline fn loadProfileByData(self: *const T, pwsz_profile_: ?[*:0]const u16, pp_profile_: ?*?*IWMProfile) HRESULT {
                return @as(*const IWMProfileManager.VTable, @ptrCast(self.vtable)).LoadProfileByData(@as(*const IWMProfileManager, @ptrCast(self)), pwsz_profile_, pp_profile_);
            }
            pub inline fn saveProfile(self: *const T, p_i_w_m_profile_: ?*IWMProfile, pwsz_profile_: ?PWSTR, pdw_length_: ?*u32) HRESULT {
                return @as(*const IWMProfileManager.VTable, @ptrCast(self.vtable)).SaveProfile(@as(*const IWMProfileManager, @ptrCast(self)), p_i_w_m_profile_, pwsz_profile_, pdw_length_);
            }
            pub inline fn getSystemProfileCount(self: *const T, pc_profiles_: ?*u32) HRESULT {
                return @as(*const IWMProfileManager.VTable, @ptrCast(self.vtable)).GetSystemProfileCount(@as(*const IWMProfileManager, @ptrCast(self)), pc_profiles_);
            }
            pub inline fn loadSystemProfile(self: *const T, dw_profile_index_: u32, pp_profile_: ?*?*IWMProfile) HRESULT {
                return @as(*const IWMProfileManager.VTable, @ptrCast(self.vtable)).LoadSystemProfile(@as(*const IWMProfileManager, @ptrCast(self)), dw_profile_index_, pp_profile_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMProfileManager2_Value = Guid.initString("7a924e51-73c1-494d-8019-23d37ed9b89a");
pub const IID_IWMProfileManager2 = &IID_IWMProfileManager2_Value;
pub const IWMProfileManager2 = extern struct {
    pub const VTable = extern struct {
        base: IWMProfileManager.VTable,
        GetSystemProfileVersion: *const fn (
            self: *const IWMProfileManager2,
            pdw_version: ?*WMT_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSystemProfileVersion: *const fn (
            self: *const IWMProfileManager2,
            dw_version: WMT_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMProfileManager.MethodMixin(T);
            pub inline fn getSystemProfileVersion(self: *const T, pdw_version_: ?*WMT_VERSION) HRESULT {
                return @as(*const IWMProfileManager2.VTable, @ptrCast(self.vtable)).GetSystemProfileVersion(@as(*const IWMProfileManager2, @ptrCast(self)), pdw_version_);
            }
            pub inline fn setSystemProfileVersion(self: *const T, dw_version_: WMT_VERSION) HRESULT {
                return @as(*const IWMProfileManager2.VTable, @ptrCast(self.vtable)).SetSystemProfileVersion(@as(*const IWMProfileManager2, @ptrCast(self)), dw_version_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMProfileManagerLanguage_Value = Guid.initString("ba4dcc78-7ee0-4ab8-b27a-dbce8bc51454");
pub const IID_IWMProfileManagerLanguage = &IID_IWMProfileManagerLanguage_Value;
pub const IWMProfileManagerLanguage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetUserLanguageID: *const fn (
            self: *const IWMProfileManagerLanguage,
            w_lang_i_d: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUserLanguageID: *const fn (
            self: *const IWMProfileManagerLanguage,
            w_lang_i_d: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getUserLanguageID(self: *const T, w_lang_i_d_: ?*u16) HRESULT {
                return @as(*const IWMProfileManagerLanguage.VTable, @ptrCast(self.vtable)).GetUserLanguageID(@as(*const IWMProfileManagerLanguage, @ptrCast(self)), w_lang_i_d_);
            }
            pub inline fn setUserLanguageID(self: *const T, w_lang_i_d_: u16) HRESULT {
                return @as(*const IWMProfileManagerLanguage.VTable, @ptrCast(self.vtable)).SetUserLanguageID(@as(*const IWMProfileManagerLanguage, @ptrCast(self)), w_lang_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMProfile_Value = Guid.initString("96406bdb-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMProfile = &IID_IWMProfile_Value;
pub const IWMProfile = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetVersion: *const fn (
            self: *const IWMProfile,
            pdw_version: ?*WMT_VERSION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn (
            self: *const IWMProfile,
            pwsz_name: [*:0]u16,
            pcch_name: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetName: *const fn (
            self: *const IWMProfile,
            pwsz_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: *const fn (
            self: *const IWMProfile,
            pwsz_description: [*:0]u16,
            pcch_description: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDescription: *const fn (
            self: *const IWMProfile,
            pwsz_description: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamCount: *const fn (
            self: *const IWMProfile,
            pc_streams: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStream: *const fn (
            self: *const IWMProfile,
            dw_stream_index: u32,
            pp_config: ?*?*IWMStreamConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamByNumber: *const fn (
            self: *const IWMProfile,
            w_stream_num: u16,
            pp_config: ?*?*IWMStreamConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveStream: *const fn (
            self: *const IWMProfile,
            p_config: ?*IWMStreamConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveStreamByNumber: *const fn (
            self: *const IWMProfile,
            w_stream_num: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStream: *const fn (
            self: *const IWMProfile,
            p_config: ?*IWMStreamConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReconfigStream: *const fn (
            self: *const IWMProfile,
            p_config: ?*IWMStreamConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateNewStream: *const fn (
            self: *const IWMProfile,
            guid_stream_type: ?*const Guid,
            pp_config: ?*?*IWMStreamConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMutualExclusionCount: *const fn (
            self: *const IWMProfile,
            pc_m_e: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMutualExclusion: *const fn (
            self: *const IWMProfile,
            dw_m_e_index: u32,
            pp_m_e: ?*?*IWMMutualExclusion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveMutualExclusion: *const fn (
            self: *const IWMProfile,
            p_m_e: ?*IWMMutualExclusion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddMutualExclusion: *const fn (
            self: *const IWMProfile,
            p_m_e: ?*IWMMutualExclusion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateNewMutualExclusion: *const fn (
            self: *const IWMProfile,
            pp_m_e: ?*?*IWMMutualExclusion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getVersion(self: *const T, pdw_version_: ?*WMT_VERSION) HRESULT {
                return @as(*const IWMProfile.VTable, @ptrCast(self.vtable)).GetVersion(@as(*const IWMProfile, @ptrCast(self)), pdw_version_);
            }
            pub inline fn getName(self: *const T, pwsz_name_: [*:0]u16, pcch_name_: ?*u32) HRESULT {
                return @as(*const IWMProfile.VTable, @ptrCast(self.vtable)).GetName(@as(*const IWMProfile, @ptrCast(self)), pwsz_name_, pcch_name_);
            }
            pub inline fn setName(self: *const T, pwsz_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IWMProfile.VTable, @ptrCast(self.vtable)).SetName(@as(*const IWMProfile, @ptrCast(self)), pwsz_name_);
            }
            pub inline fn getDescription(self: *const T, pwsz_description_: [*:0]u16, pcch_description_: ?*u32) HRESULT {
                return @as(*const IWMProfile.VTable, @ptrCast(self.vtable)).GetDescription(@as(*const IWMProfile, @ptrCast(self)), pwsz_description_, pcch_description_);
            }
            pub inline fn setDescription(self: *const T, pwsz_description_: ?[*:0]const u16) HRESULT {
                return @as(*const IWMProfile.VTable, @ptrCast(self.vtable)).SetDescription(@as(*const IWMProfile, @ptrCast(self)), pwsz_description_);
            }
            pub inline fn getStreamCount(self: *const T, pc_streams_: ?*u32) HRESULT {
                return @as(*const IWMProfile.VTable, @ptrCast(self.vtable)).GetStreamCount(@as(*const IWMProfile, @ptrCast(self)), pc_streams_);
            }
            pub inline fn getStream(self: *const T, dw_stream_index_: u32, pp_config_: ?*?*IWMStreamConfig) HRESULT {
                return @as(*const IWMProfile.VTable, @ptrCast(self.vtable)).GetStream(@as(*const IWMProfile, @ptrCast(self)), dw_stream_index_, pp_config_);
            }
            pub inline fn getStreamByNumber(self: *const T, w_stream_num_: u16, pp_config_: ?*?*IWMStreamConfig) HRESULT {
                return @as(*const IWMProfile.VTable, @ptrCast(self.vtable)).GetStreamByNumber(@as(*const IWMProfile, @ptrCast(self)), w_stream_num_, pp_config_);
            }
            pub inline fn removeStream(self: *const T, p_config_: ?*IWMStreamConfig) HRESULT {
                return @as(*const IWMProfile.VTable, @ptrCast(self.vtable)).RemoveStream(@as(*const IWMProfile, @ptrCast(self)), p_config_);
            }
            pub inline fn removeStreamByNumber(self: *const T, w_stream_num_: u16) HRESULT {
                return @as(*const IWMProfile.VTable, @ptrCast(self.vtable)).RemoveStreamByNumber(@as(*const IWMProfile, @ptrCast(self)), w_stream_num_);
            }
            pub inline fn addStream(self: *const T, p_config_: ?*IWMStreamConfig) HRESULT {
                return @as(*const IWMProfile.VTable, @ptrCast(self.vtable)).AddStream(@as(*const IWMProfile, @ptrCast(self)), p_config_);
            }
            pub inline fn reconfigStream(self: *const T, p_config_: ?*IWMStreamConfig) HRESULT {
                return @as(*const IWMProfile.VTable, @ptrCast(self.vtable)).ReconfigStream(@as(*const IWMProfile, @ptrCast(self)), p_config_);
            }
            pub inline fn createNewStream(self: *const T, guid_stream_type_: ?*const Guid, pp_config_: ?*?*IWMStreamConfig) HRESULT {
                return @as(*const IWMProfile.VTable, @ptrCast(self.vtable)).CreateNewStream(@as(*const IWMProfile, @ptrCast(self)), guid_stream_type_, pp_config_);
            }
            pub inline fn getMutualExclusionCount(self: *const T, pc_m_e_: ?*u32) HRESULT {
                return @as(*const IWMProfile.VTable, @ptrCast(self.vtable)).GetMutualExclusionCount(@as(*const IWMProfile, @ptrCast(self)), pc_m_e_);
            }
            pub inline fn getMutualExclusion(self: *const T, dw_m_e_index_: u32, pp_m_e_: ?*?*IWMMutualExclusion) HRESULT {
                return @as(*const IWMProfile.VTable, @ptrCast(self.vtable)).GetMutualExclusion(@as(*const IWMProfile, @ptrCast(self)), dw_m_e_index_, pp_m_e_);
            }
            pub inline fn removeMutualExclusion(self: *const T, p_m_e_: ?*IWMMutualExclusion) HRESULT {
                return @as(*const IWMProfile.VTable, @ptrCast(self.vtable)).RemoveMutualExclusion(@as(*const IWMProfile, @ptrCast(self)), p_m_e_);
            }
            pub inline fn addMutualExclusion(self: *const T, p_m_e_: ?*IWMMutualExclusion) HRESULT {
                return @as(*const IWMProfile.VTable, @ptrCast(self.vtable)).AddMutualExclusion(@as(*const IWMProfile, @ptrCast(self)), p_m_e_);
            }
            pub inline fn createNewMutualExclusion(self: *const T, pp_m_e_: ?*?*IWMMutualExclusion) HRESULT {
                return @as(*const IWMProfile.VTable, @ptrCast(self.vtable)).CreateNewMutualExclusion(@as(*const IWMProfile, @ptrCast(self)), pp_m_e_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMProfile2_Value = Guid.initString("07e72d33-d94e-4be7-8843-60ae5ff7e5f5");
pub const IID_IWMProfile2 = &IID_IWMProfile2_Value;
pub const IWMProfile2 = extern struct {
    pub const VTable = extern struct {
        base: IWMProfile.VTable,
        GetProfileID: *const fn (
            self: *const IWMProfile2,
            pguid_i_d: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMProfile.MethodMixin(T);
            pub inline fn getProfileID(self: *const T, pguid_i_d_: ?*Guid) HRESULT {
                return @as(*const IWMProfile2.VTable, @ptrCast(self.vtable)).GetProfileID(@as(*const IWMProfile2, @ptrCast(self)), pguid_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMProfile3_Value = Guid.initString("00ef96cc-a461-4546-8bcd-c9a28f0e06f5");
pub const IID_IWMProfile3 = &IID_IWMProfile3_Value;
pub const IWMProfile3 = extern struct {
    pub const VTable = extern struct {
        base: IWMProfile2.VTable,
        GetStorageFormat: *const fn (
            self: *const IWMProfile3,
            pn_storage_format: ?*WMT_STORAGE_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStorageFormat: *const fn (
            self: *const IWMProfile3,
            n_storage_format: WMT_STORAGE_FORMAT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBandwidthSharingCount: *const fn (
            self: *const IWMProfile3,
            pc_b_s: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBandwidthSharing: *const fn (
            self: *const IWMProfile3,
            dw_b_s_index: u32,
            pp_b_s: ?*?*IWMBandwidthSharing,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveBandwidthSharing: *const fn (
            self: *const IWMProfile3,
            p_b_s: ?*IWMBandwidthSharing,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddBandwidthSharing: *const fn (
            self: *const IWMProfile3,
            p_b_s: ?*IWMBandwidthSharing,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateNewBandwidthSharing: *const fn (
            self: *const IWMProfile3,
            pp_b_s: ?*?*IWMBandwidthSharing,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamPrioritization: *const fn (
            self: *const IWMProfile3,
            pp_s_p: ?*?*IWMStreamPrioritization,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStreamPrioritization: *const fn (
            self: *const IWMProfile3,
            p_s_p: ?*IWMStreamPrioritization,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveStreamPrioritization: *const fn (
            self: *const IWMProfile3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateNewStreamPrioritization: *const fn (
            self: *const IWMProfile3,
            pp_s_p: ?*?*IWMStreamPrioritization,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExpectedPacketCount: *const fn (
            self: *const IWMProfile3,
            ms_duration: u64,
            pc_packets: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMProfile2.MethodMixin(T);
            pub inline fn getStorageFormat(self: *const T, pn_storage_format_: ?*WMT_STORAGE_FORMAT) HRESULT {
                return @as(*const IWMProfile3.VTable, @ptrCast(self.vtable)).GetStorageFormat(@as(*const IWMProfile3, @ptrCast(self)), pn_storage_format_);
            }
            pub inline fn setStorageFormat(self: *const T, n_storage_format_: WMT_STORAGE_FORMAT) HRESULT {
                return @as(*const IWMProfile3.VTable, @ptrCast(self.vtable)).SetStorageFormat(@as(*const IWMProfile3, @ptrCast(self)), n_storage_format_);
            }
            pub inline fn getBandwidthSharingCount(self: *const T, pc_b_s_: ?*u32) HRESULT {
                return @as(*const IWMProfile3.VTable, @ptrCast(self.vtable)).GetBandwidthSharingCount(@as(*const IWMProfile3, @ptrCast(self)), pc_b_s_);
            }
            pub inline fn getBandwidthSharing(self: *const T, dw_b_s_index_: u32, pp_b_s_: ?*?*IWMBandwidthSharing) HRESULT {
                return @as(*const IWMProfile3.VTable, @ptrCast(self.vtable)).GetBandwidthSharing(@as(*const IWMProfile3, @ptrCast(self)), dw_b_s_index_, pp_b_s_);
            }
            pub inline fn removeBandwidthSharing(self: *const T, p_b_s_: ?*IWMBandwidthSharing) HRESULT {
                return @as(*const IWMProfile3.VTable, @ptrCast(self.vtable)).RemoveBandwidthSharing(@as(*const IWMProfile3, @ptrCast(self)), p_b_s_);
            }
            pub inline fn addBandwidthSharing(self: *const T, p_b_s_: ?*IWMBandwidthSharing) HRESULT {
                return @as(*const IWMProfile3.VTable, @ptrCast(self.vtable)).AddBandwidthSharing(@as(*const IWMProfile3, @ptrCast(self)), p_b_s_);
            }
            pub inline fn createNewBandwidthSharing(self: *const T, pp_b_s_: ?*?*IWMBandwidthSharing) HRESULT {
                return @as(*const IWMProfile3.VTable, @ptrCast(self.vtable)).CreateNewBandwidthSharing(@as(*const IWMProfile3, @ptrCast(self)), pp_b_s_);
            }
            pub inline fn getStreamPrioritization(self: *const T, pp_s_p_: ?*?*IWMStreamPrioritization) HRESULT {
                return @as(*const IWMProfile3.VTable, @ptrCast(self.vtable)).GetStreamPrioritization(@as(*const IWMProfile3, @ptrCast(self)), pp_s_p_);
            }
            pub inline fn setStreamPrioritization(self: *const T, p_s_p_: ?*IWMStreamPrioritization) HRESULT {
                return @as(*const IWMProfile3.VTable, @ptrCast(self.vtable)).SetStreamPrioritization(@as(*const IWMProfile3, @ptrCast(self)), p_s_p_);
            }
            pub inline fn removeStreamPrioritization(self: *const T) HRESULT {
                return @as(*const IWMProfile3.VTable, @ptrCast(self.vtable)).RemoveStreamPrioritization(@as(*const IWMProfile3, @ptrCast(self)));
            }
            pub inline fn createNewStreamPrioritization(self: *const T, pp_s_p_: ?*?*IWMStreamPrioritization) HRESULT {
                return @as(*const IWMProfile3.VTable, @ptrCast(self.vtable)).CreateNewStreamPrioritization(@as(*const IWMProfile3, @ptrCast(self)), pp_s_p_);
            }
            pub inline fn getExpectedPacketCount(self: *const T, ms_duration_: u64, pc_packets_: ?*u64) HRESULT {
                return @as(*const IWMProfile3.VTable, @ptrCast(self.vtable)).GetExpectedPacketCount(@as(*const IWMProfile3, @ptrCast(self)), ms_duration_, pc_packets_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMStreamConfig_Value = Guid.initString("96406bdc-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMStreamConfig = &IID_IWMStreamConfig_Value;
pub const IWMStreamConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetStreamType: *const fn (
            self: *const IWMStreamConfig,
            pguid_stream_type: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamNumber: *const fn (
            self: *const IWMStreamConfig,
            pw_stream_num: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStreamNumber: *const fn (
            self: *const IWMStreamConfig,
            w_stream_num: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamName: *const fn (
            self: *const IWMStreamConfig,
            pwsz_stream_name: [*:0]u16,
            pcch_stream_name: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStreamName: *const fn (
            self: *const IWMStreamConfig,
            pwsz_stream_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnectionName: *const fn (
            self: *const IWMStreamConfig,
            pwsz_input_name: [*:0]u16,
            pcch_input_name: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConnectionName: *const fn (
            self: *const IWMStreamConfig,
            pwsz_input_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitrate: *const fn (
            self: *const IWMStreamConfig,
            pdw_bitrate: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBitrate: *const fn (
            self: *const IWMStreamConfig,
            pdw_bitrate: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBufferWindow: *const fn (
            self: *const IWMStreamConfig,
            pms_buffer_window: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBufferWindow: *const fn (
            self: *const IWMStreamConfig,
            ms_buffer_window: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getStreamType(self: *const T, pguid_stream_type_: ?*Guid) HRESULT {
                return @as(*const IWMStreamConfig.VTable, @ptrCast(self.vtable)).GetStreamType(@as(*const IWMStreamConfig, @ptrCast(self)), pguid_stream_type_);
            }
            pub inline fn getStreamNumber(self: *const T, pw_stream_num_: ?*u16) HRESULT {
                return @as(*const IWMStreamConfig.VTable, @ptrCast(self.vtable)).GetStreamNumber(@as(*const IWMStreamConfig, @ptrCast(self)), pw_stream_num_);
            }
            pub inline fn setStreamNumber(self: *const T, w_stream_num_: u16) HRESULT {
                return @as(*const IWMStreamConfig.VTable, @ptrCast(self.vtable)).SetStreamNumber(@as(*const IWMStreamConfig, @ptrCast(self)), w_stream_num_);
            }
            pub inline fn getStreamName(self: *const T, pwsz_stream_name_: [*:0]u16, pcch_stream_name_: ?*u16) HRESULT {
                return @as(*const IWMStreamConfig.VTable, @ptrCast(self.vtable)).GetStreamName(@as(*const IWMStreamConfig, @ptrCast(self)), pwsz_stream_name_, pcch_stream_name_);
            }
            pub inline fn setStreamName(self: *const T, pwsz_stream_name_: ?PWSTR) HRESULT {
                return @as(*const IWMStreamConfig.VTable, @ptrCast(self.vtable)).SetStreamName(@as(*const IWMStreamConfig, @ptrCast(self)), pwsz_stream_name_);
            }
            pub inline fn getConnectionName(self: *const T, pwsz_input_name_: [*:0]u16, pcch_input_name_: ?*u16) HRESULT {
                return @as(*const IWMStreamConfig.VTable, @ptrCast(self.vtable)).GetConnectionName(@as(*const IWMStreamConfig, @ptrCast(self)), pwsz_input_name_, pcch_input_name_);
            }
            pub inline fn setConnectionName(self: *const T, pwsz_input_name_: ?PWSTR) HRESULT {
                return @as(*const IWMStreamConfig.VTable, @ptrCast(self.vtable)).SetConnectionName(@as(*const IWMStreamConfig, @ptrCast(self)), pwsz_input_name_);
            }
            pub inline fn getBitrate(self: *const T, pdw_bitrate_: ?*u32) HRESULT {
                return @as(*const IWMStreamConfig.VTable, @ptrCast(self.vtable)).GetBitrate(@as(*const IWMStreamConfig, @ptrCast(self)), pdw_bitrate_);
            }
            pub inline fn setBitrate(self: *const T, pdw_bitrate_: u32) HRESULT {
                return @as(*const IWMStreamConfig.VTable, @ptrCast(self.vtable)).SetBitrate(@as(*const IWMStreamConfig, @ptrCast(self)), pdw_bitrate_);
            }
            pub inline fn getBufferWindow(self: *const T, pms_buffer_window_: ?*u32) HRESULT {
                return @as(*const IWMStreamConfig.VTable, @ptrCast(self.vtable)).GetBufferWindow(@as(*const IWMStreamConfig, @ptrCast(self)), pms_buffer_window_);
            }
            pub inline fn setBufferWindow(self: *const T, ms_buffer_window_: u32) HRESULT {
                return @as(*const IWMStreamConfig.VTable, @ptrCast(self.vtable)).SetBufferWindow(@as(*const IWMStreamConfig, @ptrCast(self)), ms_buffer_window_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMStreamConfig2_Value = Guid.initString("7688d8cb-fc0d-43bd-9459-5a8dec200cfa");
pub const IID_IWMStreamConfig2 = &IID_IWMStreamConfig2_Value;
pub const IWMStreamConfig2 = extern struct {
    pub const VTable = extern struct {
        base: IWMStreamConfig.VTable,
        GetTransportType: *const fn (
            self: *const IWMStreamConfig2,
            pn_transport_type: ?*WMT_TRANSPORT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransportType: *const fn (
            self: *const IWMStreamConfig2,
            n_transport_type: WMT_TRANSPORT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDataUnitExtension: *const fn (
            self: *const IWMStreamConfig2,
            guid_extension_system_i_d: Guid,
            cb_extension_data_size: u16,
            pb_extension_system_info: [*:0]u8,
            cb_extension_system_info: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDataUnitExtensionCount: *const fn (
            self: *const IWMStreamConfig2,
            pc_data_unit_extensions: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDataUnitExtension: *const fn (
            self: *const IWMStreamConfig2,
            w_data_unit_extension_number: u16,
            pguid_extension_system_i_d: ?*Guid,
            pcb_extension_data_size: ?*u16,
            pb_extension_system_info: [*:0]u8,
            pcb_extension_system_info: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllDataUnitExtensions: *const fn (
            self: *const IWMStreamConfig2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMStreamConfig.MethodMixin(T);
            pub inline fn getTransportType(self: *const T, pn_transport_type_: ?*WMT_TRANSPORT_TYPE) HRESULT {
                return @as(*const IWMStreamConfig2.VTable, @ptrCast(self.vtable)).GetTransportType(@as(*const IWMStreamConfig2, @ptrCast(self)), pn_transport_type_);
            }
            pub inline fn setTransportType(self: *const T, n_transport_type_: WMT_TRANSPORT_TYPE) HRESULT {
                return @as(*const IWMStreamConfig2.VTable, @ptrCast(self.vtable)).SetTransportType(@as(*const IWMStreamConfig2, @ptrCast(self)), n_transport_type_);
            }
            pub inline fn addDataUnitExtension(self: *const T, guid_extension_system_i_d_: Guid, cb_extension_data_size_: u16, pb_extension_system_info_: [*:0]u8, cb_extension_system_info_: u32) HRESULT {
                return @as(*const IWMStreamConfig2.VTable, @ptrCast(self.vtable)).AddDataUnitExtension(@as(*const IWMStreamConfig2, @ptrCast(self)), guid_extension_system_i_d_, cb_extension_data_size_, pb_extension_system_info_, cb_extension_system_info_);
            }
            pub inline fn getDataUnitExtensionCount(self: *const T, pc_data_unit_extensions_: ?*u16) HRESULT {
                return @as(*const IWMStreamConfig2.VTable, @ptrCast(self.vtable)).GetDataUnitExtensionCount(@as(*const IWMStreamConfig2, @ptrCast(self)), pc_data_unit_extensions_);
            }
            pub inline fn getDataUnitExtension(self: *const T, w_data_unit_extension_number_: u16, pguid_extension_system_i_d_: ?*Guid, pcb_extension_data_size_: ?*u16, pb_extension_system_info_: [*:0]u8, pcb_extension_system_info_: ?*u32) HRESULT {
                return @as(*const IWMStreamConfig2.VTable, @ptrCast(self.vtable)).GetDataUnitExtension(@as(*const IWMStreamConfig2, @ptrCast(self)), w_data_unit_extension_number_, pguid_extension_system_i_d_, pcb_extension_data_size_, pb_extension_system_info_, pcb_extension_system_info_);
            }
            pub inline fn removeAllDataUnitExtensions(self: *const T) HRESULT {
                return @as(*const IWMStreamConfig2.VTable, @ptrCast(self.vtable)).RemoveAllDataUnitExtensions(@as(*const IWMStreamConfig2, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMStreamConfig3_Value = Guid.initString("cb164104-3aa9-45a7-9ac9-4daee131d6e1");
pub const IID_IWMStreamConfig3 = &IID_IWMStreamConfig3_Value;
pub const IWMStreamConfig3 = extern struct {
    pub const VTable = extern struct {
        base: IWMStreamConfig2.VTable,
        GetLanguage: *const fn (
            self: *const IWMStreamConfig3,
            pwsz_language_string: [*:0]u16,
            pcch_language_string_length: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLanguage: *const fn (
            self: *const IWMStreamConfig3,
            pwsz_language_string: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMStreamConfig2.MethodMixin(T);
            pub inline fn getLanguage(self: *const T, pwsz_language_string_: [*:0]u16, pcch_language_string_length_: ?*u16) HRESULT {
                return @as(*const IWMStreamConfig3.VTable, @ptrCast(self.vtable)).GetLanguage(@as(*const IWMStreamConfig3, @ptrCast(self)), pwsz_language_string_, pcch_language_string_length_);
            }
            pub inline fn setLanguage(self: *const T, pwsz_language_string_: ?PWSTR) HRESULT {
                return @as(*const IWMStreamConfig3.VTable, @ptrCast(self.vtable)).SetLanguage(@as(*const IWMStreamConfig3, @ptrCast(self)), pwsz_language_string_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPacketSize_Value = Guid.initString("cdfb97ab-188f-40b3-b643-5b7903975c59");
pub const IID_IWMPacketSize = &IID_IWMPacketSize_Value;
pub const IWMPacketSize = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMaxPacketSize: *const fn (
            self: *const IWMPacketSize,
            pdw_max_packet_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxPacketSize: *const fn (
            self: *const IWMPacketSize,
            dw_max_packet_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getMaxPacketSize(self: *const T, pdw_max_packet_size_: ?*u32) HRESULT {
                return @as(*const IWMPacketSize.VTable, @ptrCast(self.vtable)).GetMaxPacketSize(@as(*const IWMPacketSize, @ptrCast(self)), pdw_max_packet_size_);
            }
            pub inline fn setMaxPacketSize(self: *const T, dw_max_packet_size_: u32) HRESULT {
                return @as(*const IWMPacketSize.VTable, @ptrCast(self.vtable)).SetMaxPacketSize(@as(*const IWMPacketSize, @ptrCast(self)), dw_max_packet_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPacketSize2_Value = Guid.initString("8bfc2b9e-b646-4233-a877-1c6a079669dc");
pub const IID_IWMPacketSize2 = &IID_IWMPacketSize2_Value;
pub const IWMPacketSize2 = extern struct {
    pub const VTable = extern struct {
        base: IWMPacketSize.VTable,
        GetMinPacketSize: *const fn (
            self: *const IWMPacketSize2,
            pdw_min_packet_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMinPacketSize: *const fn (
            self: *const IWMPacketSize2,
            dw_min_packet_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMPacketSize.MethodMixin(T);
            pub inline fn getMinPacketSize(self: *const T, pdw_min_packet_size_: ?*u32) HRESULT {
                return @as(*const IWMPacketSize2.VTable, @ptrCast(self.vtable)).GetMinPacketSize(@as(*const IWMPacketSize2, @ptrCast(self)), pdw_min_packet_size_);
            }
            pub inline fn setMinPacketSize(self: *const T, dw_min_packet_size_: u32) HRESULT {
                return @as(*const IWMPacketSize2.VTable, @ptrCast(self.vtable)).SetMinPacketSize(@as(*const IWMPacketSize2, @ptrCast(self)), dw_min_packet_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMStreamList_Value = Guid.initString("96406bdd-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMStreamList = &IID_IWMStreamList_Value;
pub const IWMStreamList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetStreams: *const fn (
            self: *const IWMStreamList,
            pw_stream_num_array: [*:0]u16,
            pc_streams: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStream: *const fn (
            self: *const IWMStreamList,
            w_stream_num: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveStream: *const fn (
            self: *const IWMStreamList,
            w_stream_num: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getStreams(self: *const T, pw_stream_num_array_: [*:0]u16, pc_streams_: ?*u16) HRESULT {
                return @as(*const IWMStreamList.VTable, @ptrCast(self.vtable)).GetStreams(@as(*const IWMStreamList, @ptrCast(self)), pw_stream_num_array_, pc_streams_);
            }
            pub inline fn addStream(self: *const T, w_stream_num_: u16) HRESULT {
                return @as(*const IWMStreamList.VTable, @ptrCast(self.vtable)).AddStream(@as(*const IWMStreamList, @ptrCast(self)), w_stream_num_);
            }
            pub inline fn removeStream(self: *const T, w_stream_num_: u16) HRESULT {
                return @as(*const IWMStreamList.VTable, @ptrCast(self.vtable)).RemoveStream(@as(*const IWMStreamList, @ptrCast(self)), w_stream_num_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMMutualExclusion_Value = Guid.initString("96406bde-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMMutualExclusion = &IID_IWMMutualExclusion_Value;
pub const IWMMutualExclusion = extern struct {
    pub const VTable = extern struct {
        base: IWMStreamList.VTable,
        GetType: *const fn (
            self: *const IWMMutualExclusion,
            pguid_type: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetType: *const fn (
            self: *const IWMMutualExclusion,
            guid_type: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMStreamList.MethodMixin(T);
            pub inline fn getType(self: *const T, pguid_type_: ?*Guid) HRESULT {
                return @as(*const IWMMutualExclusion.VTable, @ptrCast(self.vtable)).GetType(@as(*const IWMMutualExclusion, @ptrCast(self)), pguid_type_);
            }
            pub inline fn setType(self: *const T, guid_type_: ?*const Guid) HRESULT {
                return @as(*const IWMMutualExclusion.VTable, @ptrCast(self.vtable)).SetType(@as(*const IWMMutualExclusion, @ptrCast(self)), guid_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMMutualExclusion2_Value = Guid.initString("0302b57d-89d1-4ba2-85c9-166f2c53eb91");
pub const IID_IWMMutualExclusion2 = &IID_IWMMutualExclusion2_Value;
pub const IWMMutualExclusion2 = extern struct {
    pub const VTable = extern struct {
        base: IWMMutualExclusion.VTable,
        GetName: *const fn (
            self: *const IWMMutualExclusion2,
            pwsz_name: [*:0]u16,
            pcch_name: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetName: *const fn (
            self: *const IWMMutualExclusion2,
            pwsz_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecordCount: *const fn (
            self: *const IWMMutualExclusion2,
            pw_record_count: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRecord: *const fn (
            self: *const IWMMutualExclusion2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveRecord: *const fn (
            self: *const IWMMutualExclusion2,
            w_record_number: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRecordName: *const fn (
            self: *const IWMMutualExclusion2,
            w_record_number: u16,
            pwsz_record_name: [*:0]u16,
            pcch_record_name: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRecordName: *const fn (
            self: *const IWMMutualExclusion2,
            w_record_number: u16,
            pwsz_record_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamsForRecord: *const fn (
            self: *const IWMMutualExclusion2,
            w_record_number: u16,
            pw_stream_num_array: [*:0]u16,
            pc_streams: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStreamForRecord: *const fn (
            self: *const IWMMutualExclusion2,
            w_record_number: u16,
            w_stream_number: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveStreamForRecord: *const fn (
            self: *const IWMMutualExclusion2,
            w_record_number: u16,
            w_stream_number: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMMutualExclusion.MethodMixin(T);
            pub inline fn getName(self: *const T, pwsz_name_: [*:0]u16, pcch_name_: ?*u16) HRESULT {
                return @as(*const IWMMutualExclusion2.VTable, @ptrCast(self.vtable)).GetName(@as(*const IWMMutualExclusion2, @ptrCast(self)), pwsz_name_, pcch_name_);
            }
            pub inline fn setName(self: *const T, pwsz_name_: ?PWSTR) HRESULT {
                return @as(*const IWMMutualExclusion2.VTable, @ptrCast(self.vtable)).SetName(@as(*const IWMMutualExclusion2, @ptrCast(self)), pwsz_name_);
            }
            pub inline fn getRecordCount(self: *const T, pw_record_count_: ?*u16) HRESULT {
                return @as(*const IWMMutualExclusion2.VTable, @ptrCast(self.vtable)).GetRecordCount(@as(*const IWMMutualExclusion2, @ptrCast(self)), pw_record_count_);
            }
            pub inline fn addRecord(self: *const T) HRESULT {
                return @as(*const IWMMutualExclusion2.VTable, @ptrCast(self.vtable)).AddRecord(@as(*const IWMMutualExclusion2, @ptrCast(self)));
            }
            pub inline fn removeRecord(self: *const T, w_record_number_: u16) HRESULT {
                return @as(*const IWMMutualExclusion2.VTable, @ptrCast(self.vtable)).RemoveRecord(@as(*const IWMMutualExclusion2, @ptrCast(self)), w_record_number_);
            }
            pub inline fn getRecordName(self: *const T, w_record_number_: u16, pwsz_record_name_: [*:0]u16, pcch_record_name_: ?*u16) HRESULT {
                return @as(*const IWMMutualExclusion2.VTable, @ptrCast(self.vtable)).GetRecordName(@as(*const IWMMutualExclusion2, @ptrCast(self)), w_record_number_, pwsz_record_name_, pcch_record_name_);
            }
            pub inline fn setRecordName(self: *const T, w_record_number_: u16, pwsz_record_name_: ?PWSTR) HRESULT {
                return @as(*const IWMMutualExclusion2.VTable, @ptrCast(self.vtable)).SetRecordName(@as(*const IWMMutualExclusion2, @ptrCast(self)), w_record_number_, pwsz_record_name_);
            }
            pub inline fn getStreamsForRecord(self: *const T, w_record_number_: u16, pw_stream_num_array_: [*:0]u16, pc_streams_: ?*u16) HRESULT {
                return @as(*const IWMMutualExclusion2.VTable, @ptrCast(self.vtable)).GetStreamsForRecord(@as(*const IWMMutualExclusion2, @ptrCast(self)), w_record_number_, pw_stream_num_array_, pc_streams_);
            }
            pub inline fn addStreamForRecord(self: *const T, w_record_number_: u16, w_stream_number_: u16) HRESULT {
                return @as(*const IWMMutualExclusion2.VTable, @ptrCast(self.vtable)).AddStreamForRecord(@as(*const IWMMutualExclusion2, @ptrCast(self)), w_record_number_, w_stream_number_);
            }
            pub inline fn removeStreamForRecord(self: *const T, w_record_number_: u16, w_stream_number_: u16) HRESULT {
                return @as(*const IWMMutualExclusion2.VTable, @ptrCast(self.vtable)).RemoveStreamForRecord(@as(*const IWMMutualExclusion2, @ptrCast(self)), w_record_number_, w_stream_number_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMBandwidthSharing_Value = Guid.initString("ad694af1-f8d9-42f8-bc47-70311b0c4f9e");
pub const IID_IWMBandwidthSharing = &IID_IWMBandwidthSharing_Value;
pub const IWMBandwidthSharing = extern struct {
    pub const VTable = extern struct {
        base: IWMStreamList.VTable,
        GetType: *const fn (
            self: *const IWMBandwidthSharing,
            pguid_type: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetType: *const fn (
            self: *const IWMBandwidthSharing,
            guid_type: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBandwidth: *const fn (
            self: *const IWMBandwidthSharing,
            pdw_bitrate: ?*u32,
            pms_buffer_window: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBandwidth: *const fn (
            self: *const IWMBandwidthSharing,
            dw_bitrate: u32,
            ms_buffer_window: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMStreamList.MethodMixin(T);
            pub inline fn getType(self: *const T, pguid_type_: ?*Guid) HRESULT {
                return @as(*const IWMBandwidthSharing.VTable, @ptrCast(self.vtable)).GetType(@as(*const IWMBandwidthSharing, @ptrCast(self)), pguid_type_);
            }
            pub inline fn setType(self: *const T, guid_type_: ?*const Guid) HRESULT {
                return @as(*const IWMBandwidthSharing.VTable, @ptrCast(self.vtable)).SetType(@as(*const IWMBandwidthSharing, @ptrCast(self)), guid_type_);
            }
            pub inline fn getBandwidth(self: *const T, pdw_bitrate_: ?*u32, pms_buffer_window_: ?*u32) HRESULT {
                return @as(*const IWMBandwidthSharing.VTable, @ptrCast(self.vtable)).GetBandwidth(@as(*const IWMBandwidthSharing, @ptrCast(self)), pdw_bitrate_, pms_buffer_window_);
            }
            pub inline fn setBandwidth(self: *const T, dw_bitrate_: u32, ms_buffer_window_: u32) HRESULT {
                return @as(*const IWMBandwidthSharing.VTable, @ptrCast(self.vtable)).SetBandwidth(@as(*const IWMBandwidthSharing, @ptrCast(self)), dw_bitrate_, ms_buffer_window_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMStreamPrioritization_Value = Guid.initString("8c1c6090-f9a8-4748-8ec3-dd1108ba1e77");
pub const IID_IWMStreamPrioritization = &IID_IWMStreamPrioritization_Value;
pub const IWMStreamPrioritization = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPriorityRecords: *const fn (
            self: *const IWMStreamPrioritization,
            p_record_array: [*]WM_STREAM_PRIORITY_RECORD,
            pc_records: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPriorityRecords: *const fn (
            self: *const IWMStreamPrioritization,
            p_record_array: ?*WM_STREAM_PRIORITY_RECORD,
            c_records: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPriorityRecords(self: *const T, p_record_array_: [*]WM_STREAM_PRIORITY_RECORD, pc_records_: ?*u16) HRESULT {
                return @as(*const IWMStreamPrioritization.VTable, @ptrCast(self.vtable)).GetPriorityRecords(@as(*const IWMStreamPrioritization, @ptrCast(self)), p_record_array_, pc_records_);
            }
            pub inline fn setPriorityRecords(self: *const T, p_record_array_: ?*WM_STREAM_PRIORITY_RECORD, c_records_: u16) HRESULT {
                return @as(*const IWMStreamPrioritization.VTable, @ptrCast(self.vtable)).SetPriorityRecords(@as(*const IWMStreamPrioritization, @ptrCast(self)), p_record_array_, c_records_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterAdvanced_Value = Guid.initString("96406be3-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMWriterAdvanced = &IID_IWMWriterAdvanced_Value;
pub const IWMWriterAdvanced = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSinkCount: *const fn (
            self: *const IWMWriterAdvanced,
            pc_sinks: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSink: *const fn (
            self: *const IWMWriterAdvanced,
            dw_sink_num: u32,
            pp_sink: ?*?*IWMWriterSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddSink: *const fn (
            self: *const IWMWriterAdvanced,
            p_sink: ?*IWMWriterSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveSink: *const fn (
            self: *const IWMWriterAdvanced,
            p_sink: ?*IWMWriterSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteStreamSample: *const fn (
            self: *const IWMWriterAdvanced,
            w_stream_num: u16,
            cns_sample_time: u64,
            ms_sample_send_time: u32,
            cns_sample_duration: u64,
            dw_flags: u32,
            p_sample: ?*INSSBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLiveSource: *const fn (
            self: *const IWMWriterAdvanced,
            f_is_live_source: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRealTime: *const fn (
            self: *const IWMWriterAdvanced,
            pf_real_time: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWriterTime: *const fn (
            self: *const IWMWriterAdvanced,
            pcns_current_time: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatistics: *const fn (
            self: *const IWMWriterAdvanced,
            w_stream_num: u16,
            p_stats: ?*WM_WRITER_STATISTICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSyncTolerance: *const fn (
            self: *const IWMWriterAdvanced,
            ms_window: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncTolerance: *const fn (
            self: *const IWMWriterAdvanced,
            pms_window: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSinkCount(self: *const T, pc_sinks_: ?*u32) HRESULT {
                return @as(*const IWMWriterAdvanced.VTable, @ptrCast(self.vtable)).GetSinkCount(@as(*const IWMWriterAdvanced, @ptrCast(self)), pc_sinks_);
            }
            pub inline fn getSink(self: *const T, dw_sink_num_: u32, pp_sink_: ?*?*IWMWriterSink) HRESULT {
                return @as(*const IWMWriterAdvanced.VTable, @ptrCast(self.vtable)).GetSink(@as(*const IWMWriterAdvanced, @ptrCast(self)), dw_sink_num_, pp_sink_);
            }
            pub inline fn addSink(self: *const T, p_sink_: ?*IWMWriterSink) HRESULT {
                return @as(*const IWMWriterAdvanced.VTable, @ptrCast(self.vtable)).AddSink(@as(*const IWMWriterAdvanced, @ptrCast(self)), p_sink_);
            }
            pub inline fn removeSink(self: *const T, p_sink_: ?*IWMWriterSink) HRESULT {
                return @as(*const IWMWriterAdvanced.VTable, @ptrCast(self.vtable)).RemoveSink(@as(*const IWMWriterAdvanced, @ptrCast(self)), p_sink_);
            }
            pub inline fn writeStreamSample(self: *const T, w_stream_num_: u16, cns_sample_time_: u64, ms_sample_send_time_: u32, cns_sample_duration_: u64, dw_flags_: u32, p_sample_: ?*INSSBuffer) HRESULT {
                return @as(*const IWMWriterAdvanced.VTable, @ptrCast(self.vtable)).WriteStreamSample(@as(*const IWMWriterAdvanced, @ptrCast(self)), w_stream_num_, cns_sample_time_, ms_sample_send_time_, cns_sample_duration_, dw_flags_, p_sample_);
            }
            pub inline fn setLiveSource(self: *const T, f_is_live_source_: BOOL) HRESULT {
                return @as(*const IWMWriterAdvanced.VTable, @ptrCast(self.vtable)).SetLiveSource(@as(*const IWMWriterAdvanced, @ptrCast(self)), f_is_live_source_);
            }
            pub inline fn isRealTime(self: *const T, pf_real_time_: ?*BOOL) HRESULT {
                return @as(*const IWMWriterAdvanced.VTable, @ptrCast(self.vtable)).IsRealTime(@as(*const IWMWriterAdvanced, @ptrCast(self)), pf_real_time_);
            }
            pub inline fn getWriterTime(self: *const T, pcns_current_time_: ?*u64) HRESULT {
                return @as(*const IWMWriterAdvanced.VTable, @ptrCast(self.vtable)).GetWriterTime(@as(*const IWMWriterAdvanced, @ptrCast(self)), pcns_current_time_);
            }
            pub inline fn getStatistics(self: *const T, w_stream_num_: u16, p_stats_: ?*WM_WRITER_STATISTICS) HRESULT {
                return @as(*const IWMWriterAdvanced.VTable, @ptrCast(self.vtable)).GetStatistics(@as(*const IWMWriterAdvanced, @ptrCast(self)), w_stream_num_, p_stats_);
            }
            pub inline fn setSyncTolerance(self: *const T, ms_window_: u32) HRESULT {
                return @as(*const IWMWriterAdvanced.VTable, @ptrCast(self.vtable)).SetSyncTolerance(@as(*const IWMWriterAdvanced, @ptrCast(self)), ms_window_);
            }
            pub inline fn getSyncTolerance(self: *const T, pms_window_: ?*u32) HRESULT {
                return @as(*const IWMWriterAdvanced.VTable, @ptrCast(self.vtable)).GetSyncTolerance(@as(*const IWMWriterAdvanced, @ptrCast(self)), pms_window_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterAdvanced2_Value = Guid.initString("962dc1ec-c046-4db8-9cc7-26ceae500817");
pub const IID_IWMWriterAdvanced2 = &IID_IWMWriterAdvanced2_Value;
pub const IWMWriterAdvanced2 = extern struct {
    pub const VTable = extern struct {
        base: IWMWriterAdvanced.VTable,
        GetInputSetting: *const fn (
            self: *const IWMWriterAdvanced2,
            dw_input_num: u32,
            psz_name: ?[*:0]const u16,
            p_type: ?*WMT_ATTR_DATATYPE,
            p_value: [*:0]u8,
            pcb_length: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInputSetting: *const fn (
            self: *const IWMWriterAdvanced2,
            dw_input_num: u32,
            psz_name: ?[*:0]const u16,
            type: WMT_ATTR_DATATYPE,
            p_value: [*:0]const u8,
            cb_length: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMWriterAdvanced.MethodMixin(T);
            pub inline fn getInputSetting(self: *const T, dw_input_num_: u32, psz_name_: ?[*:0]const u16, p_type_: ?*WMT_ATTR_DATATYPE, p_value_: [*:0]u8, pcb_length_: ?*u16) HRESULT {
                return @as(*const IWMWriterAdvanced2.VTable, @ptrCast(self.vtable)).GetInputSetting(@as(*const IWMWriterAdvanced2, @ptrCast(self)), dw_input_num_, psz_name_, p_type_, p_value_, pcb_length_);
            }
            pub inline fn setInputSetting(self: *const T, dw_input_num_: u32, psz_name_: ?[*:0]const u16, type_: WMT_ATTR_DATATYPE, p_value_: [*:0]const u8, cb_length_: u16) HRESULT {
                return @as(*const IWMWriterAdvanced2.VTable, @ptrCast(self.vtable)).SetInputSetting(@as(*const IWMWriterAdvanced2, @ptrCast(self)), dw_input_num_, psz_name_, type_, p_value_, cb_length_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterAdvanced3_Value = Guid.initString("2cd6492d-7c37-4e76-9d3b-59261183a22e");
pub const IID_IWMWriterAdvanced3 = &IID_IWMWriterAdvanced3_Value;
pub const IWMWriterAdvanced3 = extern struct {
    pub const VTable = extern struct {
        base: IWMWriterAdvanced2.VTable,
        GetStatisticsEx: *const fn (
            self: *const IWMWriterAdvanced3,
            w_stream_num: u16,
            p_stats: ?*WM_WRITER_STATISTICS_EX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNonBlocking: *const fn (
            self: *const IWMWriterAdvanced3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMWriterAdvanced2.MethodMixin(T);
            pub inline fn getStatisticsEx(self: *const T, w_stream_num_: u16, p_stats_: ?*WM_WRITER_STATISTICS_EX) HRESULT {
                return @as(*const IWMWriterAdvanced3.VTable, @ptrCast(self.vtable)).GetStatisticsEx(@as(*const IWMWriterAdvanced3, @ptrCast(self)), w_stream_num_, p_stats_);
            }
            pub inline fn setNonBlocking(self: *const T) HRESULT {
                return @as(*const IWMWriterAdvanced3.VTable, @ptrCast(self.vtable)).SetNonBlocking(@as(*const IWMWriterAdvanced3, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterPreprocess_Value = Guid.initString("fc54a285-38c4-45b5-aa23-85b9f7cb424b");
pub const IID_IWMWriterPreprocess = &IID_IWMWriterPreprocess_Value;
pub const IWMWriterPreprocess = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMaxPreprocessingPasses: *const fn (
            self: *const IWMWriterPreprocess,
            dw_input_num: u32,
            dw_flags: u32,
            pdw_max_num_passes: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNumPreprocessingPasses: *const fn (
            self: *const IWMWriterPreprocess,
            dw_input_num: u32,
            dw_flags: u32,
            dw_num_passes: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginPreprocessingPass: *const fn (
            self: *const IWMWriterPreprocess,
            dw_input_num: u32,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreprocessSample: *const fn (
            self: *const IWMWriterPreprocess,
            dw_input_num: u32,
            cns_sample_time: u64,
            dw_flags: u32,
            p_sample: ?*INSSBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndPreprocessingPass: *const fn (
            self: *const IWMWriterPreprocess,
            dw_input_num: u32,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getMaxPreprocessingPasses(self: *const T, dw_input_num_: u32, dw_flags_: u32, pdw_max_num_passes_: ?*u32) HRESULT {
                return @as(*const IWMWriterPreprocess.VTable, @ptrCast(self.vtable)).GetMaxPreprocessingPasses(@as(*const IWMWriterPreprocess, @ptrCast(self)), dw_input_num_, dw_flags_, pdw_max_num_passes_);
            }
            pub inline fn setNumPreprocessingPasses(self: *const T, dw_input_num_: u32, dw_flags_: u32, dw_num_passes_: u32) HRESULT {
                return @as(*const IWMWriterPreprocess.VTable, @ptrCast(self.vtable)).SetNumPreprocessingPasses(@as(*const IWMWriterPreprocess, @ptrCast(self)), dw_input_num_, dw_flags_, dw_num_passes_);
            }
            pub inline fn beginPreprocessingPass(self: *const T, dw_input_num_: u32, dw_flags_: u32) HRESULT {
                return @as(*const IWMWriterPreprocess.VTable, @ptrCast(self.vtable)).BeginPreprocessingPass(@as(*const IWMWriterPreprocess, @ptrCast(self)), dw_input_num_, dw_flags_);
            }
            pub inline fn preprocessSample(self: *const T, dw_input_num_: u32, cns_sample_time_: u64, dw_flags_: u32, p_sample_: ?*INSSBuffer) HRESULT {
                return @as(*const IWMWriterPreprocess.VTable, @ptrCast(self.vtable)).PreprocessSample(@as(*const IWMWriterPreprocess, @ptrCast(self)), dw_input_num_, cns_sample_time_, dw_flags_, p_sample_);
            }
            pub inline fn endPreprocessingPass(self: *const T, dw_input_num_: u32, dw_flags_: u32) HRESULT {
                return @as(*const IWMWriterPreprocess.VTable, @ptrCast(self.vtable)).EndPreprocessingPass(@as(*const IWMWriterPreprocess, @ptrCast(self)), dw_input_num_, dw_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterPostViewCallback_Value = Guid.initString("d9d6549d-a193-4f24-b308-03123d9b7f8d");
pub const IID_IWMWriterPostViewCallback = &IID_IWMWriterPostViewCallback_Value;
pub const IWMWriterPostViewCallback = extern struct {
    pub const VTable = extern struct {
        base: IWMStatusCallback.VTable,
        OnPostViewSample: *const fn (
            self: *const IWMWriterPostViewCallback,
            w_stream_number: u16,
            cns_sample_time: u64,
            cns_sample_duration: u64,
            dw_flags: u32,
            p_sample: ?*INSSBuffer,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AllocateForPostView: *const fn (
            self: *const IWMWriterPostViewCallback,
            w_stream_num: u16,
            cb_buffer: u32,
            pp_buffer: ?*?*INSSBuffer,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMStatusCallback.MethodMixin(T);
            pub inline fn onPostViewSample(self: *const T, w_stream_number_: u16, cns_sample_time_: u64, cns_sample_duration_: u64, dw_flags_: u32, p_sample_: ?*INSSBuffer, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMWriterPostViewCallback.VTable, @ptrCast(self.vtable)).OnPostViewSample(@as(*const IWMWriterPostViewCallback, @ptrCast(self)), w_stream_number_, cns_sample_time_, cns_sample_duration_, dw_flags_, p_sample_, pv_context_);
            }
            pub inline fn allocateForPostView(self: *const T, w_stream_num_: u16, cb_buffer_: u32, pp_buffer_: ?*?*INSSBuffer, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMWriterPostViewCallback.VTable, @ptrCast(self.vtable)).AllocateForPostView(@as(*const IWMWriterPostViewCallback, @ptrCast(self)), w_stream_num_, cb_buffer_, pp_buffer_, pv_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterPostView_Value = Guid.initString("81e20ce4-75ef-491a-8004-fc53c45bdc3e");
pub const IID_IWMWriterPostView = &IID_IWMWriterPostView_Value;
pub const IWMWriterPostView = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetPostViewCallback: *const fn (
            self: *const IWMWriterPostView,
            p_callback: ?*IWMWriterPostViewCallback,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReceivePostViewSamples: *const fn (
            self: *const IWMWriterPostView,
            w_stream_num: u16,
            f_receive_post_view_samples: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReceivePostViewSamples: *const fn (
            self: *const IWMWriterPostView,
            w_stream_num: u16,
            pf_receive_post_view_samples: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPostViewProps: *const fn (
            self: *const IWMWriterPostView,
            w_stream_number: u16,
            pp_output: ?*?*IWMMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPostViewProps: *const fn (
            self: *const IWMWriterPostView,
            w_stream_number: u16,
            p_output: ?*IWMMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPostViewFormatCount: *const fn (
            self: *const IWMWriterPostView,
            w_stream_number: u16,
            pc_formats: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPostViewFormat: *const fn (
            self: *const IWMWriterPostView,
            w_stream_number: u16,
            dw_format_number: u32,
            pp_props: ?*?*IWMMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllocateForPostView: *const fn (
            self: *const IWMWriterPostView,
            w_stream_number: u16,
            f_allocate: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllocateForPostView: *const fn (
            self: *const IWMWriterPostView,
            w_stream_number: u16,
            pf_allocate: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setPostViewCallback(self: *const T, p_callback_: ?*IWMWriterPostViewCallback, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMWriterPostView.VTable, @ptrCast(self.vtable)).SetPostViewCallback(@as(*const IWMWriterPostView, @ptrCast(self)), p_callback_, pv_context_);
            }
            pub inline fn setReceivePostViewSamples(self: *const T, w_stream_num_: u16, f_receive_post_view_samples_: BOOL) HRESULT {
                return @as(*const IWMWriterPostView.VTable, @ptrCast(self.vtable)).SetReceivePostViewSamples(@as(*const IWMWriterPostView, @ptrCast(self)), w_stream_num_, f_receive_post_view_samples_);
            }
            pub inline fn getReceivePostViewSamples(self: *const T, w_stream_num_: u16, pf_receive_post_view_samples_: ?*BOOL) HRESULT {
                return @as(*const IWMWriterPostView.VTable, @ptrCast(self.vtable)).GetReceivePostViewSamples(@as(*const IWMWriterPostView, @ptrCast(self)), w_stream_num_, pf_receive_post_view_samples_);
            }
            pub inline fn getPostViewProps(self: *const T, w_stream_number_: u16, pp_output_: ?*?*IWMMediaProps) HRESULT {
                return @as(*const IWMWriterPostView.VTable, @ptrCast(self.vtable)).GetPostViewProps(@as(*const IWMWriterPostView, @ptrCast(self)), w_stream_number_, pp_output_);
            }
            pub inline fn setPostViewProps(self: *const T, w_stream_number_: u16, p_output_: ?*IWMMediaProps) HRESULT {
                return @as(*const IWMWriterPostView.VTable, @ptrCast(self.vtable)).SetPostViewProps(@as(*const IWMWriterPostView, @ptrCast(self)), w_stream_number_, p_output_);
            }
            pub inline fn getPostViewFormatCount(self: *const T, w_stream_number_: u16, pc_formats_: ?*u32) HRESULT {
                return @as(*const IWMWriterPostView.VTable, @ptrCast(self.vtable)).GetPostViewFormatCount(@as(*const IWMWriterPostView, @ptrCast(self)), w_stream_number_, pc_formats_);
            }
            pub inline fn getPostViewFormat(self: *const T, w_stream_number_: u16, dw_format_number_: u32, pp_props_: ?*?*IWMMediaProps) HRESULT {
                return @as(*const IWMWriterPostView.VTable, @ptrCast(self.vtable)).GetPostViewFormat(@as(*const IWMWriterPostView, @ptrCast(self)), w_stream_number_, dw_format_number_, pp_props_);
            }
            pub inline fn setAllocateForPostView(self: *const T, w_stream_number_: u16, f_allocate_: BOOL) HRESULT {
                return @as(*const IWMWriterPostView.VTable, @ptrCast(self.vtable)).SetAllocateForPostView(@as(*const IWMWriterPostView, @ptrCast(self)), w_stream_number_, f_allocate_);
            }
            pub inline fn getAllocateForPostView(self: *const T, w_stream_number_: u16, pf_allocate_: ?*BOOL) HRESULT {
                return @as(*const IWMWriterPostView.VTable, @ptrCast(self.vtable)).GetAllocateForPostView(@as(*const IWMWriterPostView, @ptrCast(self)), w_stream_number_, pf_allocate_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterSink_Value = Guid.initString("96406be4-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMWriterSink = &IID_IWMWriterSink_Value;
pub const IWMWriterSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnHeader: *const fn (
            self: *const IWMWriterSink,
            p_header: ?*INSSBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRealTime: *const fn (
            self: *const IWMWriterSink,
            pf_real_time: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AllocateDataUnit: *const fn (
            self: *const IWMWriterSink,
            cb_data_unit: u32,
            pp_data_unit: ?*?*INSSBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDataUnit: *const fn (
            self: *const IWMWriterSink,
            p_data_unit: ?*INSSBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnEndWriting: *const fn (
            self: *const IWMWriterSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onHeader(self: *const T, p_header_: ?*INSSBuffer) HRESULT {
                return @as(*const IWMWriterSink.VTable, @ptrCast(self.vtable)).OnHeader(@as(*const IWMWriterSink, @ptrCast(self)), p_header_);
            }
            pub inline fn isRealTime(self: *const T, pf_real_time_: ?*BOOL) HRESULT {
                return @as(*const IWMWriterSink.VTable, @ptrCast(self.vtable)).IsRealTime(@as(*const IWMWriterSink, @ptrCast(self)), pf_real_time_);
            }
            pub inline fn allocateDataUnit(self: *const T, cb_data_unit_: u32, pp_data_unit_: ?*?*INSSBuffer) HRESULT {
                return @as(*const IWMWriterSink.VTable, @ptrCast(self.vtable)).AllocateDataUnit(@as(*const IWMWriterSink, @ptrCast(self)), cb_data_unit_, pp_data_unit_);
            }
            pub inline fn onDataUnit(self: *const T, p_data_unit_: ?*INSSBuffer) HRESULT {
                return @as(*const IWMWriterSink.VTable, @ptrCast(self.vtable)).OnDataUnit(@as(*const IWMWriterSink, @ptrCast(self)), p_data_unit_);
            }
            pub inline fn onEndWriting(self: *const T) HRESULT {
                return @as(*const IWMWriterSink.VTable, @ptrCast(self.vtable)).OnEndWriting(@as(*const IWMWriterSink, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMRegisterCallback_Value = Guid.initString("cf4b1f99-4de2-4e49-a363-252740d99bc1");
pub const IID_IWMRegisterCallback = &IID_IWMRegisterCallback_Value;
pub const IWMRegisterCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: *const fn (
            self: *const IWMRegisterCallback,
            p_callback: ?*IWMStatusCallback,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn (
            self: *const IWMRegisterCallback,
            p_callback: ?*IWMStatusCallback,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn advise(self: *const T, p_callback_: ?*IWMStatusCallback, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMRegisterCallback.VTable, @ptrCast(self.vtable)).Advise(@as(*const IWMRegisterCallback, @ptrCast(self)), p_callback_, pv_context_);
            }
            pub inline fn unadvise(self: *const T, p_callback_: ?*IWMStatusCallback, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMRegisterCallback.VTable, @ptrCast(self.vtable)).Unadvise(@as(*const IWMRegisterCallback, @ptrCast(self)), p_callback_, pv_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterFileSink_Value = Guid.initString("96406be5-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMWriterFileSink = &IID_IWMWriterFileSink_Value;
pub const IWMWriterFileSink = extern struct {
    pub const VTable = extern struct {
        base: IWMWriterSink.VTable,
        Open: *const fn (
            self: *const IWMWriterFileSink,
            pwsz_filename: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMWriterSink.MethodMixin(T);
            pub inline fn open(self: *const T, pwsz_filename_: ?[*:0]const u16) HRESULT {
                return @as(*const IWMWriterFileSink.VTable, @ptrCast(self.vtable)).Open(@as(*const IWMWriterFileSink, @ptrCast(self)), pwsz_filename_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterFileSink2_Value = Guid.initString("14282ba7-4aef-4205-8ce5-c229035a05bc");
pub const IID_IWMWriterFileSink2 = &IID_IWMWriterFileSink2_Value;
pub const IWMWriterFileSink2 = extern struct {
    pub const VTable = extern struct {
        base: IWMWriterFileSink.VTable,
        Start: *const fn (
            self: *const IWMWriterFileSink2,
            cns_start_time: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const IWMWriterFileSink2,
            cns_stop_time: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsStopped: *const fn (
            self: *const IWMWriterFileSink2,
            pf_stopped: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileDuration: *const fn (
            self: *const IWMWriterFileSink2,
            pcns_duration: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileSize: *const fn (
            self: *const IWMWriterFileSink2,
            pcb_file: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IWMWriterFileSink2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsClosed: *const fn (
            self: *const IWMWriterFileSink2,
            pf_closed: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMWriterFileSink.MethodMixin(T);
            pub inline fn start(self: *const T, cns_start_time_: u64) HRESULT {
                return @as(*const IWMWriterFileSink2.VTable, @ptrCast(self.vtable)).Start(@as(*const IWMWriterFileSink2, @ptrCast(self)), cns_start_time_);
            }
            pub inline fn stop(self: *const T, cns_stop_time_: u64) HRESULT {
                return @as(*const IWMWriterFileSink2.VTable, @ptrCast(self.vtable)).Stop(@as(*const IWMWriterFileSink2, @ptrCast(self)), cns_stop_time_);
            }
            pub inline fn isStopped(self: *const T, pf_stopped_: ?*BOOL) HRESULT {
                return @as(*const IWMWriterFileSink2.VTable, @ptrCast(self.vtable)).IsStopped(@as(*const IWMWriterFileSink2, @ptrCast(self)), pf_stopped_);
            }
            pub inline fn getFileDuration(self: *const T, pcns_duration_: ?*u64) HRESULT {
                return @as(*const IWMWriterFileSink2.VTable, @ptrCast(self.vtable)).GetFileDuration(@as(*const IWMWriterFileSink2, @ptrCast(self)), pcns_duration_);
            }
            pub inline fn getFileSize(self: *const T, pcb_file_: ?*u64) HRESULT {
                return @as(*const IWMWriterFileSink2.VTable, @ptrCast(self.vtable)).GetFileSize(@as(*const IWMWriterFileSink2, @ptrCast(self)), pcb_file_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IWMWriterFileSink2.VTable, @ptrCast(self.vtable)).Close(@as(*const IWMWriterFileSink2, @ptrCast(self)));
            }
            pub inline fn isClosed(self: *const T, pf_closed_: ?*BOOL) HRESULT {
                return @as(*const IWMWriterFileSink2.VTable, @ptrCast(self.vtable)).IsClosed(@as(*const IWMWriterFileSink2, @ptrCast(self)), pf_closed_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterFileSink3_Value = Guid.initString("3fea4feb-2945-47a7-a1dd-c53a8fc4c45c");
pub const IID_IWMWriterFileSink3 = &IID_IWMWriterFileSink3_Value;
pub const IWMWriterFileSink3 = extern struct {
    pub const VTable = extern struct {
        base: IWMWriterFileSink2.VTable,
        SetAutoIndexing: *const fn (
            self: *const IWMWriterFileSink3,
            f_do_auto_indexing: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAutoIndexing: *const fn (
            self: *const IWMWriterFileSink3,
            pf_auto_indexing: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetControlStream: *const fn (
            self: *const IWMWriterFileSink3,
            w_stream_number: u16,
            f_should_control_start_and_stop: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMode: *const fn (
            self: *const IWMWriterFileSink3,
            pdw_file_sink_mode: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDataUnitEx: *const fn (
            self: *const IWMWriterFileSink3,
            p_file_sink_data_unit: ?*WMT_FILESINK_DATA_UNIT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUnbufferedIO: *const fn (
            self: *const IWMWriterFileSink3,
            f_unbuffered_i_o: BOOL,
            f_restrict_mem_usage: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUnbufferedIO: *const fn (
            self: *const IWMWriterFileSink3,
            pf_unbuffered_i_o: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompleteOperations: *const fn (
            self: *const IWMWriterFileSink3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMWriterFileSink2.MethodMixin(T);
            pub inline fn setAutoIndexing(self: *const T, f_do_auto_indexing_: BOOL) HRESULT {
                return @as(*const IWMWriterFileSink3.VTable, @ptrCast(self.vtable)).SetAutoIndexing(@as(*const IWMWriterFileSink3, @ptrCast(self)), f_do_auto_indexing_);
            }
            pub inline fn getAutoIndexing(self: *const T, pf_auto_indexing_: ?*BOOL) HRESULT {
                return @as(*const IWMWriterFileSink3.VTable, @ptrCast(self.vtable)).GetAutoIndexing(@as(*const IWMWriterFileSink3, @ptrCast(self)), pf_auto_indexing_);
            }
            pub inline fn setControlStream(self: *const T, w_stream_number_: u16, f_should_control_start_and_stop_: BOOL) HRESULT {
                return @as(*const IWMWriterFileSink3.VTable, @ptrCast(self.vtable)).SetControlStream(@as(*const IWMWriterFileSink3, @ptrCast(self)), w_stream_number_, f_should_control_start_and_stop_);
            }
            pub inline fn getMode(self: *const T, pdw_file_sink_mode_: ?*u32) HRESULT {
                return @as(*const IWMWriterFileSink3.VTable, @ptrCast(self.vtable)).GetMode(@as(*const IWMWriterFileSink3, @ptrCast(self)), pdw_file_sink_mode_);
            }
            pub inline fn onDataUnitEx(self: *const T, p_file_sink_data_unit_: ?*WMT_FILESINK_DATA_UNIT) HRESULT {
                return @as(*const IWMWriterFileSink3.VTable, @ptrCast(self.vtable)).OnDataUnitEx(@as(*const IWMWriterFileSink3, @ptrCast(self)), p_file_sink_data_unit_);
            }
            pub inline fn setUnbufferedIO(self: *const T, f_unbuffered_i_o_: BOOL, f_restrict_mem_usage_: BOOL) HRESULT {
                return @as(*const IWMWriterFileSink3.VTable, @ptrCast(self.vtable)).SetUnbufferedIO(@as(*const IWMWriterFileSink3, @ptrCast(self)), f_unbuffered_i_o_, f_restrict_mem_usage_);
            }
            pub inline fn getUnbufferedIO(self: *const T, pf_unbuffered_i_o_: ?*BOOL) HRESULT {
                return @as(*const IWMWriterFileSink3.VTable, @ptrCast(self.vtable)).GetUnbufferedIO(@as(*const IWMWriterFileSink3, @ptrCast(self)), pf_unbuffered_i_o_);
            }
            pub inline fn completeOperations(self: *const T) HRESULT {
                return @as(*const IWMWriterFileSink3.VTable, @ptrCast(self.vtable)).CompleteOperations(@as(*const IWMWriterFileSink3, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterNetworkSink_Value = Guid.initString("96406be7-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMWriterNetworkSink = &IID_IWMWriterNetworkSink_Value;
pub const IWMWriterNetworkSink = extern struct {
    pub const VTable = extern struct {
        base: IWMWriterSink.VTable,
        SetMaximumClients: *const fn (
            self: *const IWMWriterNetworkSink,
            dw_max_clients: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaximumClients: *const fn (
            self: *const IWMWriterNetworkSink,
            pdw_max_clients: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNetworkProtocol: *const fn (
            self: *const IWMWriterNetworkSink,
            protocol: WMT_NET_PROTOCOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetworkProtocol: *const fn (
            self: *const IWMWriterNetworkSink,
            p_protocol: ?*WMT_NET_PROTOCOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHostURL: *const fn (
            self: *const IWMWriterNetworkSink,
            pwsz_u_r_l: ?PWSTR,
            pcch_u_r_l: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: *const fn (
            self: *const IWMWriterNetworkSink,
            pdw_port_num: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: *const fn (
            self: *const IWMWriterNetworkSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IWMWriterNetworkSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMWriterSink.MethodMixin(T);
            pub inline fn setMaximumClients(self: *const T, dw_max_clients_: u32) HRESULT {
                return @as(*const IWMWriterNetworkSink.VTable, @ptrCast(self.vtable)).SetMaximumClients(@as(*const IWMWriterNetworkSink, @ptrCast(self)), dw_max_clients_);
            }
            pub inline fn getMaximumClients(self: *const T, pdw_max_clients_: ?*u32) HRESULT {
                return @as(*const IWMWriterNetworkSink.VTable, @ptrCast(self.vtable)).GetMaximumClients(@as(*const IWMWriterNetworkSink, @ptrCast(self)), pdw_max_clients_);
            }
            pub inline fn setNetworkProtocol(self: *const T, protocol_: WMT_NET_PROTOCOL) HRESULT {
                return @as(*const IWMWriterNetworkSink.VTable, @ptrCast(self.vtable)).SetNetworkProtocol(@as(*const IWMWriterNetworkSink, @ptrCast(self)), protocol_);
            }
            pub inline fn getNetworkProtocol(self: *const T, p_protocol_: ?*WMT_NET_PROTOCOL) HRESULT {
                return @as(*const IWMWriterNetworkSink.VTable, @ptrCast(self.vtable)).GetNetworkProtocol(@as(*const IWMWriterNetworkSink, @ptrCast(self)), p_protocol_);
            }
            pub inline fn getHostURL(self: *const T, pwsz_u_r_l_: ?PWSTR, pcch_u_r_l_: ?*u32) HRESULT {
                return @as(*const IWMWriterNetworkSink.VTable, @ptrCast(self.vtable)).GetHostURL(@as(*const IWMWriterNetworkSink, @ptrCast(self)), pwsz_u_r_l_, pcch_u_r_l_);
            }
            pub inline fn open(self: *const T, pdw_port_num_: ?*u32) HRESULT {
                return @as(*const IWMWriterNetworkSink.VTable, @ptrCast(self.vtable)).Open(@as(*const IWMWriterNetworkSink, @ptrCast(self)), pdw_port_num_);
            }
            pub inline fn disconnect(self: *const T) HRESULT {
                return @as(*const IWMWriterNetworkSink.VTable, @ptrCast(self.vtable)).Disconnect(@as(*const IWMWriterNetworkSink, @ptrCast(self)));
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IWMWriterNetworkSink.VTable, @ptrCast(self.vtable)).Close(@as(*const IWMWriterNetworkSink, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMClientConnections_Value = Guid.initString("73c66010-a299-41df-b1f0-ccf03b09c1c6");
pub const IID_IWMClientConnections = &IID_IWMClientConnections_Value;
pub const IWMClientConnections = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetClientCount: *const fn (
            self: *const IWMClientConnections,
            pc_clients: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClientProperties: *const fn (
            self: *const IWMClientConnections,
            dw_client_num: u32,
            p_client_properties: ?*WM_CLIENT_PROPERTIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getClientCount(self: *const T, pc_clients_: ?*u32) HRESULT {
                return @as(*const IWMClientConnections.VTable, @ptrCast(self.vtable)).GetClientCount(@as(*const IWMClientConnections, @ptrCast(self)), pc_clients_);
            }
            pub inline fn getClientProperties(self: *const T, dw_client_num_: u32, p_client_properties_: ?*WM_CLIENT_PROPERTIES) HRESULT {
                return @as(*const IWMClientConnections.VTable, @ptrCast(self.vtable)).GetClientProperties(@as(*const IWMClientConnections, @ptrCast(self)), dw_client_num_, p_client_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMClientConnections2_Value = Guid.initString("4091571e-4701-4593-bb3d-d5f5f0c74246");
pub const IID_IWMClientConnections2 = &IID_IWMClientConnections2_Value;
pub const IWMClientConnections2 = extern struct {
    pub const VTable = extern struct {
        base: IWMClientConnections.VTable,
        GetClientInfo: *const fn (
            self: *const IWMClientConnections2,
            dw_client_num: u32,
            pwsz_network_address: [*:0]u16,
            pcch_network_address: ?*u32,
            pwsz_port: [*:0]u16,
            pcch_port: ?*u32,
            pwsz_d_n_s_name: [*:0]u16,
            pcch_d_n_s_name: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMClientConnections.MethodMixin(T);
            pub inline fn getClientInfo(self: *const T, dw_client_num_: u32, pwsz_network_address_: [*:0]u16, pcch_network_address_: ?*u32, pwsz_port_: [*:0]u16, pcch_port_: ?*u32, pwsz_d_n_s_name_: [*:0]u16, pcch_d_n_s_name_: ?*u32) HRESULT {
                return @as(*const IWMClientConnections2.VTable, @ptrCast(self.vtable)).GetClientInfo(@as(*const IWMClientConnections2, @ptrCast(self)), dw_client_num_, pwsz_network_address_, pcch_network_address_, pwsz_port_, pcch_port_, pwsz_d_n_s_name_, pcch_d_n_s_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderAdvanced_Value = Guid.initString("96406bea-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMReaderAdvanced = &IID_IWMReaderAdvanced_Value;
pub const IWMReaderAdvanced = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetUserProvidedClock: *const fn (
            self: *const IWMReaderAdvanced,
            f_user_clock: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserProvidedClock: *const fn (
            self: *const IWMReaderAdvanced,
            pf_user_clock: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeliverTime: *const fn (
            self: *const IWMReaderAdvanced,
            cns_time: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetManualStreamSelection: *const fn (
            self: *const IWMReaderAdvanced,
            f_selection: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetManualStreamSelection: *const fn (
            self: *const IWMReaderAdvanced,
            pf_selection: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStreamsSelected: *const fn (
            self: *const IWMReaderAdvanced,
            c_stream_count: u16,
            pw_stream_numbers: ?*u16,
            p_selections: ?*WMT_STREAM_SELECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStreamSelected: *const fn (
            self: *const IWMReaderAdvanced,
            w_stream_num: u16,
            p_selection: ?*WMT_STREAM_SELECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReceiveSelectionCallbacks: *const fn (
            self: *const IWMReaderAdvanced,
            f_get_callbacks: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReceiveSelectionCallbacks: *const fn (
            self: *const IWMReaderAdvanced,
            pf_get_callbacks: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReceiveStreamSamples: *const fn (
            self: *const IWMReaderAdvanced,
            w_stream_num: u16,
            f_receive_stream_samples: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReceiveStreamSamples: *const fn (
            self: *const IWMReaderAdvanced,
            w_stream_num: u16,
            pf_receive_stream_samples: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllocateForOutput: *const fn (
            self: *const IWMReaderAdvanced,
            dw_output_num: u32,
            f_allocate: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllocateForOutput: *const fn (
            self: *const IWMReaderAdvanced,
            dw_output_num: u32,
            pf_allocate: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllocateForStream: *const fn (
            self: *const IWMReaderAdvanced,
            w_stream_num: u16,
            f_allocate: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllocateForStream: *const fn (
            self: *const IWMReaderAdvanced,
            dw_sream_num: u16,
            pf_allocate: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatistics: *const fn (
            self: *const IWMReaderAdvanced,
            p_statistics: ?*WM_READER_STATISTICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClientInfo: *const fn (
            self: *const IWMReaderAdvanced,
            p_client_info: ?*WM_READER_CLIENTINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxOutputSampleSize: *const fn (
            self: *const IWMReaderAdvanced,
            dw_output: u32,
            pcb_max: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxStreamSampleSize: *const fn (
            self: *const IWMReaderAdvanced,
            w_stream: u16,
            pcb_max: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyLateDelivery: *const fn (
            self: *const IWMReaderAdvanced,
            cns_lateness: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setUserProvidedClock(self: *const T, f_user_clock_: BOOL) HRESULT {
                return @as(*const IWMReaderAdvanced.VTable, @ptrCast(self.vtable)).SetUserProvidedClock(@as(*const IWMReaderAdvanced, @ptrCast(self)), f_user_clock_);
            }
            pub inline fn getUserProvidedClock(self: *const T, pf_user_clock_: ?*BOOL) HRESULT {
                return @as(*const IWMReaderAdvanced.VTable, @ptrCast(self.vtable)).GetUserProvidedClock(@as(*const IWMReaderAdvanced, @ptrCast(self)), pf_user_clock_);
            }
            pub inline fn deliverTime(self: *const T, cns_time_: u64) HRESULT {
                return @as(*const IWMReaderAdvanced.VTable, @ptrCast(self.vtable)).DeliverTime(@as(*const IWMReaderAdvanced, @ptrCast(self)), cns_time_);
            }
            pub inline fn setManualStreamSelection(self: *const T, f_selection_: BOOL) HRESULT {
                return @as(*const IWMReaderAdvanced.VTable, @ptrCast(self.vtable)).SetManualStreamSelection(@as(*const IWMReaderAdvanced, @ptrCast(self)), f_selection_);
            }
            pub inline fn getManualStreamSelection(self: *const T, pf_selection_: ?*BOOL) HRESULT {
                return @as(*const IWMReaderAdvanced.VTable, @ptrCast(self.vtable)).GetManualStreamSelection(@as(*const IWMReaderAdvanced, @ptrCast(self)), pf_selection_);
            }
            pub inline fn setStreamsSelected(self: *const T, c_stream_count_: u16, pw_stream_numbers_: ?*u16, p_selections_: ?*WMT_STREAM_SELECTION) HRESULT {
                return @as(*const IWMReaderAdvanced.VTable, @ptrCast(self.vtable)).SetStreamsSelected(@as(*const IWMReaderAdvanced, @ptrCast(self)), c_stream_count_, pw_stream_numbers_, p_selections_);
            }
            pub inline fn getStreamSelected(self: *const T, w_stream_num_: u16, p_selection_: ?*WMT_STREAM_SELECTION) HRESULT {
                return @as(*const IWMReaderAdvanced.VTable, @ptrCast(self.vtable)).GetStreamSelected(@as(*const IWMReaderAdvanced, @ptrCast(self)), w_stream_num_, p_selection_);
            }
            pub inline fn setReceiveSelectionCallbacks(self: *const T, f_get_callbacks_: BOOL) HRESULT {
                return @as(*const IWMReaderAdvanced.VTable, @ptrCast(self.vtable)).SetReceiveSelectionCallbacks(@as(*const IWMReaderAdvanced, @ptrCast(self)), f_get_callbacks_);
            }
            pub inline fn getReceiveSelectionCallbacks(self: *const T, pf_get_callbacks_: ?*BOOL) HRESULT {
                return @as(*const IWMReaderAdvanced.VTable, @ptrCast(self.vtable)).GetReceiveSelectionCallbacks(@as(*const IWMReaderAdvanced, @ptrCast(self)), pf_get_callbacks_);
            }
            pub inline fn setReceiveStreamSamples(self: *const T, w_stream_num_: u16, f_receive_stream_samples_: BOOL) HRESULT {
                return @as(*const IWMReaderAdvanced.VTable, @ptrCast(self.vtable)).SetReceiveStreamSamples(@as(*const IWMReaderAdvanced, @ptrCast(self)), w_stream_num_, f_receive_stream_samples_);
            }
            pub inline fn getReceiveStreamSamples(self: *const T, w_stream_num_: u16, pf_receive_stream_samples_: ?*BOOL) HRESULT {
                return @as(*const IWMReaderAdvanced.VTable, @ptrCast(self.vtable)).GetReceiveStreamSamples(@as(*const IWMReaderAdvanced, @ptrCast(self)), w_stream_num_, pf_receive_stream_samples_);
            }
            pub inline fn setAllocateForOutput(self: *const T, dw_output_num_: u32, f_allocate_: BOOL) HRESULT {
                return @as(*const IWMReaderAdvanced.VTable, @ptrCast(self.vtable)).SetAllocateForOutput(@as(*const IWMReaderAdvanced, @ptrCast(self)), dw_output_num_, f_allocate_);
            }
            pub inline fn getAllocateForOutput(self: *const T, dw_output_num_: u32, pf_allocate_: ?*BOOL) HRESULT {
                return @as(*const IWMReaderAdvanced.VTable, @ptrCast(self.vtable)).GetAllocateForOutput(@as(*const IWMReaderAdvanced, @ptrCast(self)), dw_output_num_, pf_allocate_);
            }
            pub inline fn setAllocateForStream(self: *const T, w_stream_num_: u16, f_allocate_: BOOL) HRESULT {
                return @as(*const IWMReaderAdvanced.VTable, @ptrCast(self.vtable)).SetAllocateForStream(@as(*const IWMReaderAdvanced, @ptrCast(self)), w_stream_num_, f_allocate_);
            }
            pub inline fn getAllocateForStream(self: *const T, dw_sream_num_: u16, pf_allocate_: ?*BOOL) HRESULT {
                return @as(*const IWMReaderAdvanced.VTable, @ptrCast(self.vtable)).GetAllocateForStream(@as(*const IWMReaderAdvanced, @ptrCast(self)), dw_sream_num_, pf_allocate_);
            }
            pub inline fn getStatistics(self: *const T, p_statistics_: ?*WM_READER_STATISTICS) HRESULT {
                return @as(*const IWMReaderAdvanced.VTable, @ptrCast(self.vtable)).GetStatistics(@as(*const IWMReaderAdvanced, @ptrCast(self)), p_statistics_);
            }
            pub inline fn setClientInfo(self: *const T, p_client_info_: ?*WM_READER_CLIENTINFO) HRESULT {
                return @as(*const IWMReaderAdvanced.VTable, @ptrCast(self.vtable)).SetClientInfo(@as(*const IWMReaderAdvanced, @ptrCast(self)), p_client_info_);
            }
            pub inline fn getMaxOutputSampleSize(self: *const T, dw_output_: u32, pcb_max_: ?*u32) HRESULT {
                return @as(*const IWMReaderAdvanced.VTable, @ptrCast(self.vtable)).GetMaxOutputSampleSize(@as(*const IWMReaderAdvanced, @ptrCast(self)), dw_output_, pcb_max_);
            }
            pub inline fn getMaxStreamSampleSize(self: *const T, w_stream_: u16, pcb_max_: ?*u32) HRESULT {
                return @as(*const IWMReaderAdvanced.VTable, @ptrCast(self.vtable)).GetMaxStreamSampleSize(@as(*const IWMReaderAdvanced, @ptrCast(self)), w_stream_, pcb_max_);
            }
            pub inline fn notifyLateDelivery(self: *const T, cns_lateness_: u64) HRESULT {
                return @as(*const IWMReaderAdvanced.VTable, @ptrCast(self.vtable)).NotifyLateDelivery(@as(*const IWMReaderAdvanced, @ptrCast(self)), cns_lateness_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderAdvanced2_Value = Guid.initString("ae14a945-b90c-4d0d-9127-80d665f7d73e");
pub const IID_IWMReaderAdvanced2 = &IID_IWMReaderAdvanced2_Value;
pub const IWMReaderAdvanced2 = extern struct {
    pub const VTable = extern struct {
        base: IWMReaderAdvanced.VTable,
        SetPlayMode: *const fn (
            self: *const IWMReaderAdvanced2,
            mode: WMT_PLAY_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPlayMode: *const fn (
            self: *const IWMReaderAdvanced2,
            p_mode: ?*WMT_PLAY_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBufferProgress: *const fn (
            self: *const IWMReaderAdvanced2,
            pdw_percent: ?*u32,
            pcns_buffering: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDownloadProgress: *const fn (
            self: *const IWMReaderAdvanced2,
            pdw_percent: ?*u32,
            pqw_bytes_downloaded: ?*u64,
            pcns_download: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSaveAsProgress: *const fn (
            self: *const IWMReaderAdvanced2,
            pdw_percent: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveFileAs: *const fn (
            self: *const IWMReaderAdvanced2,
            pwsz_filename: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProtocolName: *const fn (
            self: *const IWMReaderAdvanced2,
            pwsz_protocol: [*:0]u16,
            pcch_protocol: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartAtMarker: *const fn (
            self: *const IWMReaderAdvanced2,
            w_marker_index: u16,
            cns_duration: u64,
            f_rate: f32,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputSetting: *const fn (
            self: *const IWMReaderAdvanced2,
            dw_output_num: u32,
            psz_name: ?[*:0]const u16,
            p_type: ?*WMT_ATTR_DATATYPE,
            p_value: [*:0]u8,
            pcb_length: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutputSetting: *const fn (
            self: *const IWMReaderAdvanced2,
            dw_output_num: u32,
            psz_name: ?[*:0]const u16,
            type: WMT_ATTR_DATATYPE,
            p_value: [*:0]const u8,
            cb_length: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Preroll: *const fn (
            self: *const IWMReaderAdvanced2,
            cns_start: u64,
            cns_duration: u64,
            f_rate: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLogClientID: *const fn (
            self: *const IWMReaderAdvanced2,
            f_log_client_i_d: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLogClientID: *const fn (
            self: *const IWMReaderAdvanced2,
            pf_log_client_i_d: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopBuffering: *const fn (
            self: *const IWMReaderAdvanced2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenStream: *const fn (
            self: *const IWMReaderAdvanced2,
            p_stream: ?*IStream,
            p_callback: ?*IWMReaderCallback,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMReaderAdvanced.MethodMixin(T);
            pub inline fn setPlayMode(self: *const T, mode_: WMT_PLAY_MODE) HRESULT {
                return @as(*const IWMReaderAdvanced2.VTable, @ptrCast(self.vtable)).SetPlayMode(@as(*const IWMReaderAdvanced2, @ptrCast(self)), mode_);
            }
            pub inline fn getPlayMode(self: *const T, p_mode_: ?*WMT_PLAY_MODE) HRESULT {
                return @as(*const IWMReaderAdvanced2.VTable, @ptrCast(self.vtable)).GetPlayMode(@as(*const IWMReaderAdvanced2, @ptrCast(self)), p_mode_);
            }
            pub inline fn getBufferProgress(self: *const T, pdw_percent_: ?*u32, pcns_buffering_: ?*u64) HRESULT {
                return @as(*const IWMReaderAdvanced2.VTable, @ptrCast(self.vtable)).GetBufferProgress(@as(*const IWMReaderAdvanced2, @ptrCast(self)), pdw_percent_, pcns_buffering_);
            }
            pub inline fn getDownloadProgress(self: *const T, pdw_percent_: ?*u32, pqw_bytes_downloaded_: ?*u64, pcns_download_: ?*u64) HRESULT {
                return @as(*const IWMReaderAdvanced2.VTable, @ptrCast(self.vtable)).GetDownloadProgress(@as(*const IWMReaderAdvanced2, @ptrCast(self)), pdw_percent_, pqw_bytes_downloaded_, pcns_download_);
            }
            pub inline fn getSaveAsProgress(self: *const T, pdw_percent_: ?*u32) HRESULT {
                return @as(*const IWMReaderAdvanced2.VTable, @ptrCast(self.vtable)).GetSaveAsProgress(@as(*const IWMReaderAdvanced2, @ptrCast(self)), pdw_percent_);
            }
            pub inline fn saveFileAs(self: *const T, pwsz_filename_: ?[*:0]const u16) HRESULT {
                return @as(*const IWMReaderAdvanced2.VTable, @ptrCast(self.vtable)).SaveFileAs(@as(*const IWMReaderAdvanced2, @ptrCast(self)), pwsz_filename_);
            }
            pub inline fn getProtocolName(self: *const T, pwsz_protocol_: [*:0]u16, pcch_protocol_: ?*u32) HRESULT {
                return @as(*const IWMReaderAdvanced2.VTable, @ptrCast(self.vtable)).GetProtocolName(@as(*const IWMReaderAdvanced2, @ptrCast(self)), pwsz_protocol_, pcch_protocol_);
            }
            pub inline fn startAtMarker(self: *const T, w_marker_index_: u16, cns_duration_: u64, f_rate_: f32, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMReaderAdvanced2.VTable, @ptrCast(self.vtable)).StartAtMarker(@as(*const IWMReaderAdvanced2, @ptrCast(self)), w_marker_index_, cns_duration_, f_rate_, pv_context_);
            }
            pub inline fn getOutputSetting(self: *const T, dw_output_num_: u32, psz_name_: ?[*:0]const u16, p_type_: ?*WMT_ATTR_DATATYPE, p_value_: [*:0]u8, pcb_length_: ?*u16) HRESULT {
                return @as(*const IWMReaderAdvanced2.VTable, @ptrCast(self.vtable)).GetOutputSetting(@as(*const IWMReaderAdvanced2, @ptrCast(self)), dw_output_num_, psz_name_, p_type_, p_value_, pcb_length_);
            }
            pub inline fn setOutputSetting(self: *const T, dw_output_num_: u32, psz_name_: ?[*:0]const u16, type_: WMT_ATTR_DATATYPE, p_value_: [*:0]const u8, cb_length_: u16) HRESULT {
                return @as(*const IWMReaderAdvanced2.VTable, @ptrCast(self.vtable)).SetOutputSetting(@as(*const IWMReaderAdvanced2, @ptrCast(self)), dw_output_num_, psz_name_, type_, p_value_, cb_length_);
            }
            pub inline fn preroll(self: *const T, cns_start_: u64, cns_duration_: u64, f_rate_: f32) HRESULT {
                return @as(*const IWMReaderAdvanced2.VTable, @ptrCast(self.vtable)).Preroll(@as(*const IWMReaderAdvanced2, @ptrCast(self)), cns_start_, cns_duration_, f_rate_);
            }
            pub inline fn setLogClientID(self: *const T, f_log_client_i_d_: BOOL) HRESULT {
                return @as(*const IWMReaderAdvanced2.VTable, @ptrCast(self.vtable)).SetLogClientID(@as(*const IWMReaderAdvanced2, @ptrCast(self)), f_log_client_i_d_);
            }
            pub inline fn getLogClientID(self: *const T, pf_log_client_i_d_: ?*BOOL) HRESULT {
                return @as(*const IWMReaderAdvanced2.VTable, @ptrCast(self.vtable)).GetLogClientID(@as(*const IWMReaderAdvanced2, @ptrCast(self)), pf_log_client_i_d_);
            }
            pub inline fn stopBuffering(self: *const T) HRESULT {
                return @as(*const IWMReaderAdvanced2.VTable, @ptrCast(self.vtable)).StopBuffering(@as(*const IWMReaderAdvanced2, @ptrCast(self)));
            }
            pub inline fn openStream(self: *const T, p_stream_: ?*IStream, p_callback_: ?*IWMReaderCallback, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMReaderAdvanced2.VTable, @ptrCast(self.vtable)).OpenStream(@as(*const IWMReaderAdvanced2, @ptrCast(self)), p_stream_, p_callback_, pv_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderAdvanced3_Value = Guid.initString("5dc0674b-f04b-4a4e-9f2a-b1afde2c8100");
pub const IID_IWMReaderAdvanced3 = &IID_IWMReaderAdvanced3_Value;
pub const IWMReaderAdvanced3 = extern struct {
    pub const VTable = extern struct {
        base: IWMReaderAdvanced2.VTable,
        StopNetStreaming: *const fn (
            self: *const IWMReaderAdvanced3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartAtPosition: *const fn (
            self: *const IWMReaderAdvanced3,
            w_stream_num: u16,
            pv_offset_start: ?*anyopaque,
            pv_duration: ?*anyopaque,
            dw_offset_format: WMT_OFFSET_FORMAT,
            f_rate: f32,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMReaderAdvanced2.MethodMixin(T);
            pub inline fn stopNetStreaming(self: *const T) HRESULT {
                return @as(*const IWMReaderAdvanced3.VTable, @ptrCast(self.vtable)).StopNetStreaming(@as(*const IWMReaderAdvanced3, @ptrCast(self)));
            }
            pub inline fn startAtPosition(self: *const T, w_stream_num_: u16, pv_offset_start_: ?*anyopaque, pv_duration_: ?*anyopaque, dw_offset_format_: WMT_OFFSET_FORMAT, f_rate_: f32, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMReaderAdvanced3.VTable, @ptrCast(self.vtable)).StartAtPosition(@as(*const IWMReaderAdvanced3, @ptrCast(self)), w_stream_num_, pv_offset_start_, pv_duration_, dw_offset_format_, f_rate_, pv_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderAdvanced4_Value = Guid.initString("945a76a2-12ae-4d48-bd3c-cd1d90399b85");
pub const IID_IWMReaderAdvanced4 = &IID_IWMReaderAdvanced4_Value;
pub const IWMReaderAdvanced4 = extern struct {
    pub const VTable = extern struct {
        base: IWMReaderAdvanced3.VTable,
        GetLanguageCount: *const fn (
            self: *const IWMReaderAdvanced4,
            dw_output_num: u32,
            pw_language_count: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLanguage: *const fn (
            self: *const IWMReaderAdvanced4,
            dw_output_num: u32,
            w_language: u16,
            pwsz_language_string: [*:0]u16,
            pcch_language_string_length: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxSpeedFactor: *const fn (
            self: *const IWMReaderAdvanced4,
            pdbl_factor: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsUsingFastCache: *const fn (
            self: *const IWMReaderAdvanced4,
            pf_using_fast_cache: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddLogParam: *const fn (
            self: *const IWMReaderAdvanced4,
            wsz_name_space: ?[*:0]const u16,
            wsz_name: ?[*:0]const u16,
            wsz_value: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendLogParams: *const fn (
            self: *const IWMReaderAdvanced4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanSaveFileAs: *const fn (
            self: *const IWMReaderAdvanced4,
            pf_can_save: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelSaveFileAs: *const fn (
            self: *const IWMReaderAdvanced4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetURL: *const fn (
            self: *const IWMReaderAdvanced4,
            pwsz_u_r_l: [*:0]u16,
            pcch_u_r_l: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMReaderAdvanced3.MethodMixin(T);
            pub inline fn getLanguageCount(self: *const T, dw_output_num_: u32, pw_language_count_: ?*u16) HRESULT {
                return @as(*const IWMReaderAdvanced4.VTable, @ptrCast(self.vtable)).GetLanguageCount(@as(*const IWMReaderAdvanced4, @ptrCast(self)), dw_output_num_, pw_language_count_);
            }
            pub inline fn getLanguage(self: *const T, dw_output_num_: u32, w_language_: u16, pwsz_language_string_: [*:0]u16, pcch_language_string_length_: ?*u16) HRESULT {
                return @as(*const IWMReaderAdvanced4.VTable, @ptrCast(self.vtable)).GetLanguage(@as(*const IWMReaderAdvanced4, @ptrCast(self)), dw_output_num_, w_language_, pwsz_language_string_, pcch_language_string_length_);
            }
            pub inline fn getMaxSpeedFactor(self: *const T, pdbl_factor_: ?*f64) HRESULT {
                return @as(*const IWMReaderAdvanced4.VTable, @ptrCast(self.vtable)).GetMaxSpeedFactor(@as(*const IWMReaderAdvanced4, @ptrCast(self)), pdbl_factor_);
            }
            pub inline fn isUsingFastCache(self: *const T, pf_using_fast_cache_: ?*BOOL) HRESULT {
                return @as(*const IWMReaderAdvanced4.VTable, @ptrCast(self.vtable)).IsUsingFastCache(@as(*const IWMReaderAdvanced4, @ptrCast(self)), pf_using_fast_cache_);
            }
            pub inline fn addLogParam(self: *const T, wsz_name_space_: ?[*:0]const u16, wsz_name_: ?[*:0]const u16, wsz_value_: ?[*:0]const u16) HRESULT {
                return @as(*const IWMReaderAdvanced4.VTable, @ptrCast(self.vtable)).AddLogParam(@as(*const IWMReaderAdvanced4, @ptrCast(self)), wsz_name_space_, wsz_name_, wsz_value_);
            }
            pub inline fn sendLogParams(self: *const T) HRESULT {
                return @as(*const IWMReaderAdvanced4.VTable, @ptrCast(self.vtable)).SendLogParams(@as(*const IWMReaderAdvanced4, @ptrCast(self)));
            }
            pub inline fn canSaveFileAs(self: *const T, pf_can_save_: ?*BOOL) HRESULT {
                return @as(*const IWMReaderAdvanced4.VTable, @ptrCast(self.vtable)).CanSaveFileAs(@as(*const IWMReaderAdvanced4, @ptrCast(self)), pf_can_save_);
            }
            pub inline fn cancelSaveFileAs(self: *const T) HRESULT {
                return @as(*const IWMReaderAdvanced4.VTable, @ptrCast(self.vtable)).CancelSaveFileAs(@as(*const IWMReaderAdvanced4, @ptrCast(self)));
            }
            pub inline fn getURL(self: *const T, pwsz_u_r_l_: [*:0]u16, pcch_u_r_l_: ?*u32) HRESULT {
                return @as(*const IWMReaderAdvanced4.VTable, @ptrCast(self.vtable)).GetURL(@as(*const IWMReaderAdvanced4, @ptrCast(self)), pwsz_u_r_l_, pcch_u_r_l_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderAdvanced5_Value = Guid.initString("24c44db0-55d1-49ae-a5cc-f13815e36363");
pub const IID_IWMReaderAdvanced5 = &IID_IWMReaderAdvanced5_Value;
pub const IWMReaderAdvanced5 = extern struct {
    pub const VTable = extern struct {
        base: IWMReaderAdvanced4.VTable,
        SetPlayerHook: *const fn (
            self: *const IWMReaderAdvanced5,
            dw_output_num: u32,
            p_hook: ?*IWMPlayerHook,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMReaderAdvanced4.MethodMixin(T);
            pub inline fn setPlayerHook(self: *const T, dw_output_num_: u32, p_hook_: ?*IWMPlayerHook) HRESULT {
                return @as(*const IWMReaderAdvanced5.VTable, @ptrCast(self.vtable)).SetPlayerHook(@as(*const IWMReaderAdvanced5, @ptrCast(self)), dw_output_num_, p_hook_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderAdvanced6_Value = Guid.initString("18a2e7f8-428f-4acd-8a00-e64639bc93de");
pub const IID_IWMReaderAdvanced6 = &IID_IWMReaderAdvanced6_Value;
pub const IWMReaderAdvanced6 = extern struct {
    pub const VTable = extern struct {
        base: IWMReaderAdvanced5.VTable,
        SetProtectStreamSamples: *const fn (
            self: *const IWMReaderAdvanced6,
            pb_certificate: [*:0]u8,
            cb_certificate: u32,
            dw_certificate_type: u32,
            dw_flags: u32,
            pb_initialization_vector: [*:0]u8,
            pcb_initialization_vector: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMReaderAdvanced5.MethodMixin(T);
            pub inline fn setProtectStreamSamples(self: *const T, pb_certificate_: [*:0]u8, cb_certificate_: u32, dw_certificate_type_: u32, dw_flags_: u32, pb_initialization_vector_: [*:0]u8, pcb_initialization_vector_: ?*u32) HRESULT {
                return @as(*const IWMReaderAdvanced6.VTable, @ptrCast(self.vtable)).SetProtectStreamSamples(@as(*const IWMReaderAdvanced6, @ptrCast(self)), pb_certificate_, cb_certificate_, dw_certificate_type_, dw_flags_, pb_initialization_vector_, pcb_initialization_vector_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPlayerHook_Value = Guid.initString("e5b7ca9a-0f1c-4f66-9002-74ec50d8b304");
pub const IID_IWMPlayerHook = &IID_IWMPlayerHook_Value;
pub const IWMPlayerHook = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PreDecode: *const fn (
            self: *const IWMPlayerHook,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn preDecode(self: *const T) HRESULT {
                return @as(*const IWMPlayerHook.VTable, @ptrCast(self.vtable)).PreDecode(@as(*const IWMPlayerHook, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderAllocatorEx_Value = Guid.initString("9f762fa7-a22e-428d-93c9-ac82f3aafe5a");
pub const IID_IWMReaderAllocatorEx = &IID_IWMReaderAllocatorEx_Value;
pub const IWMReaderAllocatorEx = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AllocateForStreamEx: *const fn (
            self: *const IWMReaderAllocatorEx,
            w_stream_num: u16,
            cb_buffer: u32,
            pp_buffer: ?*?*INSSBuffer,
            dw_flags: u32,
            cns_sample_time: u64,
            cns_sample_duration: u64,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AllocateForOutputEx: *const fn (
            self: *const IWMReaderAllocatorEx,
            dw_output_num: u32,
            cb_buffer: u32,
            pp_buffer: ?*?*INSSBuffer,
            dw_flags: u32,
            cns_sample_time: u64,
            cns_sample_duration: u64,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn allocateForStreamEx(self: *const T, w_stream_num_: u16, cb_buffer_: u32, pp_buffer_: ?*?*INSSBuffer, dw_flags_: u32, cns_sample_time_: u64, cns_sample_duration_: u64, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMReaderAllocatorEx.VTable, @ptrCast(self.vtable)).AllocateForStreamEx(@as(*const IWMReaderAllocatorEx, @ptrCast(self)), w_stream_num_, cb_buffer_, pp_buffer_, dw_flags_, cns_sample_time_, cns_sample_duration_, pv_context_);
            }
            pub inline fn allocateForOutputEx(self: *const T, dw_output_num_: u32, cb_buffer_: u32, pp_buffer_: ?*?*INSSBuffer, dw_flags_: u32, cns_sample_time_: u64, cns_sample_duration_: u64, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMReaderAllocatorEx.VTable, @ptrCast(self.vtable)).AllocateForOutputEx(@as(*const IWMReaderAllocatorEx, @ptrCast(self)), dw_output_num_, cb_buffer_, pp_buffer_, dw_flags_, cns_sample_time_, cns_sample_duration_, pv_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderTypeNegotiation_Value = Guid.initString("fdbe5592-81a1-41ea-93bd-735cad1adc05");
pub const IID_IWMReaderTypeNegotiation = &IID_IWMReaderTypeNegotiation_Value;
pub const IWMReaderTypeNegotiation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TryOutputProps: *const fn (
            self: *const IWMReaderTypeNegotiation,
            dw_output_num: u32,
            p_output: ?*IWMOutputMediaProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn tryOutputProps(self: *const T, dw_output_num_: u32, p_output_: ?*IWMOutputMediaProps) HRESULT {
                return @as(*const IWMReaderTypeNegotiation.VTable, @ptrCast(self.vtable)).TryOutputProps(@as(*const IWMReaderTypeNegotiation, @ptrCast(self)), dw_output_num_, p_output_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderCallbackAdvanced_Value = Guid.initString("96406beb-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMReaderCallbackAdvanced = &IID_IWMReaderCallbackAdvanced_Value;
pub const IWMReaderCallbackAdvanced = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnStreamSample: *const fn (
            self: *const IWMReaderCallbackAdvanced,
            w_stream_num: u16,
            cns_sample_time: u64,
            cns_sample_duration: u64,
            dw_flags: u32,
            p_sample: ?*INSSBuffer,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTime: *const fn (
            self: *const IWMReaderCallbackAdvanced,
            cns_current_time: u64,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnStreamSelection: *const fn (
            self: *const IWMReaderCallbackAdvanced,
            w_stream_count: u16,
            p_stream_numbers: ?*u16,
            p_selections: ?*WMT_STREAM_SELECTION,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOutputPropsChanged: *const fn (
            self: *const IWMReaderCallbackAdvanced,
            dw_output_num: u32,
            p_media_type: ?*WM_MEDIA_TYPE,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AllocateForStream: *const fn (
            self: *const IWMReaderCallbackAdvanced,
            w_stream_num: u16,
            cb_buffer: u32,
            pp_buffer: ?*?*INSSBuffer,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AllocateForOutput: *const fn (
            self: *const IWMReaderCallbackAdvanced,
            dw_output_num: u32,
            cb_buffer: u32,
            pp_buffer: ?*?*INSSBuffer,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onStreamSample(self: *const T, w_stream_num_: u16, cns_sample_time_: u64, cns_sample_duration_: u64, dw_flags_: u32, p_sample_: ?*INSSBuffer, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMReaderCallbackAdvanced.VTable, @ptrCast(self.vtable)).OnStreamSample(@as(*const IWMReaderCallbackAdvanced, @ptrCast(self)), w_stream_num_, cns_sample_time_, cns_sample_duration_, dw_flags_, p_sample_, pv_context_);
            }
            pub inline fn onTime(self: *const T, cns_current_time_: u64, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMReaderCallbackAdvanced.VTable, @ptrCast(self.vtable)).OnTime(@as(*const IWMReaderCallbackAdvanced, @ptrCast(self)), cns_current_time_, pv_context_);
            }
            pub inline fn onStreamSelection(self: *const T, w_stream_count_: u16, p_stream_numbers_: ?*u16, p_selections_: ?*WMT_STREAM_SELECTION, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMReaderCallbackAdvanced.VTable, @ptrCast(self.vtable)).OnStreamSelection(@as(*const IWMReaderCallbackAdvanced, @ptrCast(self)), w_stream_count_, p_stream_numbers_, p_selections_, pv_context_);
            }
            pub inline fn onOutputPropsChanged(self: *const T, dw_output_num_: u32, p_media_type_: ?*WM_MEDIA_TYPE, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMReaderCallbackAdvanced.VTable, @ptrCast(self.vtable)).OnOutputPropsChanged(@as(*const IWMReaderCallbackAdvanced, @ptrCast(self)), dw_output_num_, p_media_type_, pv_context_);
            }
            pub inline fn allocateForStream(self: *const T, w_stream_num_: u16, cb_buffer_: u32, pp_buffer_: ?*?*INSSBuffer, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMReaderCallbackAdvanced.VTable, @ptrCast(self.vtable)).AllocateForStream(@as(*const IWMReaderCallbackAdvanced, @ptrCast(self)), w_stream_num_, cb_buffer_, pp_buffer_, pv_context_);
            }
            pub inline fn allocateForOutput(self: *const T, dw_output_num_: u32, cb_buffer_: u32, pp_buffer_: ?*?*INSSBuffer, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMReaderCallbackAdvanced.VTable, @ptrCast(self.vtable)).AllocateForOutput(@as(*const IWMReaderCallbackAdvanced, @ptrCast(self)), dw_output_num_, cb_buffer_, pp_buffer_, pv_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWMDRMReader_Value = Guid.initString("d2827540-3ee7-432c-b14c-dc17f085d3b3");
pub const IID_IWMDRMReader = &IID_IWMDRMReader_Value;
pub const IWMDRMReader = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AcquireLicense: *const fn (
            self: *const IWMDRMReader,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelLicenseAcquisition: *const fn (
            self: *const IWMDRMReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Individualize: *const fn (
            self: *const IWMDRMReader,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelIndividualization: *const fn (
            self: *const IWMDRMReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MonitorLicenseAcquisition: *const fn (
            self: *const IWMDRMReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelMonitorLicenseAcquisition: *const fn (
            self: *const IWMDRMReader,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDRMProperty: *const fn (
            self: *const IWMDRMReader,
            pwstr_name: ?[*:0]const u16,
            dw_type: WMT_ATTR_DATATYPE,
            p_value: [*:0]const u8,
            cb_length: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDRMProperty: *const fn (
            self: *const IWMDRMReader,
            pwstr_name: ?[*:0]const u16,
            pdw_type: ?*WMT_ATTR_DATATYPE,
            p_value: [*:0]u8,
            pcb_length: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn acquireLicense(self: *const T, dw_flags_: u32) HRESULT {
                return @as(*const IWMDRMReader.VTable, @ptrCast(self.vtable)).AcquireLicense(@as(*const IWMDRMReader, @ptrCast(self)), dw_flags_);
            }
            pub inline fn cancelLicenseAcquisition(self: *const T) HRESULT {
                return @as(*const IWMDRMReader.VTable, @ptrCast(self.vtable)).CancelLicenseAcquisition(@as(*const IWMDRMReader, @ptrCast(self)));
            }
            pub inline fn individualize(self: *const T, dw_flags_: u32) HRESULT {
                return @as(*const IWMDRMReader.VTable, @ptrCast(self.vtable)).Individualize(@as(*const IWMDRMReader, @ptrCast(self)), dw_flags_);
            }
            pub inline fn cancelIndividualization(self: *const T) HRESULT {
                return @as(*const IWMDRMReader.VTable, @ptrCast(self.vtable)).CancelIndividualization(@as(*const IWMDRMReader, @ptrCast(self)));
            }
            pub inline fn monitorLicenseAcquisition(self: *const T) HRESULT {
                return @as(*const IWMDRMReader.VTable, @ptrCast(self.vtable)).MonitorLicenseAcquisition(@as(*const IWMDRMReader, @ptrCast(self)));
            }
            pub inline fn cancelMonitorLicenseAcquisition(self: *const T) HRESULT {
                return @as(*const IWMDRMReader.VTable, @ptrCast(self.vtable)).CancelMonitorLicenseAcquisition(@as(*const IWMDRMReader, @ptrCast(self)));
            }
            pub inline fn setDRMProperty(self: *const T, pwstr_name_: ?[*:0]const u16, dw_type_: WMT_ATTR_DATATYPE, p_value_: [*:0]const u8, cb_length_: u16) HRESULT {
                return @as(*const IWMDRMReader.VTable, @ptrCast(self.vtable)).SetDRMProperty(@as(*const IWMDRMReader, @ptrCast(self)), pwstr_name_, dw_type_, p_value_, cb_length_);
            }
            pub inline fn getDRMProperty(self: *const T, pwstr_name_: ?[*:0]const u16, pdw_type_: ?*WMT_ATTR_DATATYPE, p_value_: [*:0]u8, pcb_length_: ?*u16) HRESULT {
                return @as(*const IWMDRMReader.VTable, @ptrCast(self.vtable)).GetDRMProperty(@as(*const IWMDRMReader, @ptrCast(self)), pwstr_name_, pdw_type_, p_value_, pcb_length_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DRM_MINIMUM_OUTPUT_PROTECTION_LEVELS = extern struct {
    wCompressedDigitalVideo: u16,
    wUncompressedDigitalVideo: u16,
    wAnalogVideo: u16,
    wCompressedDigitalAudio: u16,
    wUncompressedDigitalAudio: u16,
};

pub const DRM_OPL_OUTPUT_IDS = extern struct {
    cIds: u16,
    rgIds: ?*Guid,
};

pub const DRM_OUTPUT_PROTECTION = extern struct {
    guidId: Guid,
    bConfigData: u8,
};

pub const DRM_VIDEO_OUTPUT_PROTECTION_IDS = extern struct {
    cEntries: u16,
    rgVop: ?*DRM_OUTPUT_PROTECTION,
};

pub const DRM_PLAY_OPL = extern struct {
    minOPL: DRM_MINIMUM_OUTPUT_PROTECTION_LEVELS,
    oplIdReserved: DRM_OPL_OUTPUT_IDS,
    vopi: DRM_VIDEO_OUTPUT_PROTECTION_IDS,
};

pub const DRM_COPY_OPL = extern struct {
    wMinimumCopyLevel: u16,
    oplIdIncludes: DRM_OPL_OUTPUT_IDS,
    oplIdExcludes: DRM_OPL_OUTPUT_IDS,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWMDRMReader2_Value = Guid.initString("befe7a75-9f1d-4075-b9d9-a3c37bda49a0");
pub const IID_IWMDRMReader2 = &IID_IWMDRMReader2_Value;
pub const IWMDRMReader2 = extern struct {
    pub const VTable = extern struct {
        base: IWMDRMReader.VTable,
        SetEvaluateOutputLevelLicenses: *const fn (
            self: *const IWMDRMReader2,
            f_evaluate: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPlayOutputLevels: *const fn (
            self: *const IWMDRMReader2,
            p_play_o_p_l: [*]DRM_PLAY_OPL,
            pcb_length: ?*u32,
            pdw_min_app_compliance_level: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCopyOutputLevels: *const fn (
            self: *const IWMDRMReader2,
            p_copy_o_p_l: [*]DRM_COPY_OPL,
            pcb_length: ?*u32,
            pdw_min_app_compliance_level: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TryNextLicense: *const fn (
            self: *const IWMDRMReader2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMDRMReader.MethodMixin(T);
            pub inline fn setEvaluateOutputLevelLicenses(self: *const T, f_evaluate_: BOOL) HRESULT {
                return @as(*const IWMDRMReader2.VTable, @ptrCast(self.vtable)).SetEvaluateOutputLevelLicenses(@as(*const IWMDRMReader2, @ptrCast(self)), f_evaluate_);
            }
            pub inline fn getPlayOutputLevels(self: *const T, p_play_o_p_l_: [*]DRM_PLAY_OPL, pcb_length_: ?*u32, pdw_min_app_compliance_level_: ?*u32) HRESULT {
                return @as(*const IWMDRMReader2.VTable, @ptrCast(self.vtable)).GetPlayOutputLevels(@as(*const IWMDRMReader2, @ptrCast(self)), p_play_o_p_l_, pcb_length_, pdw_min_app_compliance_level_);
            }
            pub inline fn getCopyOutputLevels(self: *const T, p_copy_o_p_l_: [*]DRM_COPY_OPL, pcb_length_: ?*u32, pdw_min_app_compliance_level_: ?*u32) HRESULT {
                return @as(*const IWMDRMReader2.VTable, @ptrCast(self.vtable)).GetCopyOutputLevels(@as(*const IWMDRMReader2, @ptrCast(self)), p_copy_o_p_l_, pcb_length_, pdw_min_app_compliance_level_);
            }
            pub inline fn tryNextLicense(self: *const T) HRESULT {
                return @as(*const IWMDRMReader2.VTable, @ptrCast(self.vtable)).TryNextLicense(@as(*const IWMDRMReader2, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWMDRMReader3_Value = Guid.initString("e08672de-f1e7-4ff4-a0a3-fc4b08e4caf8");
pub const IID_IWMDRMReader3 = &IID_IWMDRMReader3_Value;
pub const IWMDRMReader3 = extern struct {
    pub const VTable = extern struct {
        base: IWMDRMReader2.VTable,
        GetInclusionList: *const fn (
            self: *const IWMDRMReader3,
            pp_guids: ?*?*Guid,
            pc_guids: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMDRMReader2.MethodMixin(T);
            pub inline fn getInclusionList(self: *const T, pp_guids_: ?*?*Guid, pc_guids_: ?*u32) HRESULT {
                return @as(*const IWMDRMReader3.VTable, @ptrCast(self.vtable)).GetInclusionList(@as(*const IWMDRMReader3, @ptrCast(self)), pp_guids_, pc_guids_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderPlaylistBurn_Value = Guid.initString("f28c0300-9baa-4477-a846-1744d9cbf533");
pub const IID_IWMReaderPlaylistBurn = &IID_IWMReaderPlaylistBurn_Value;
pub const IWMReaderPlaylistBurn = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitPlaylistBurn: *const fn (
            self: *const IWMReaderPlaylistBurn,
            c_files: u32,
            ppwsz_filenames: ?*?PWSTR,
            p_callback: ?*IWMStatusCallback,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInitResults: *const fn (
            self: *const IWMReaderPlaylistBurn,
            c_files: u32,
            phr_stati: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn (
            self: *const IWMReaderPlaylistBurn,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndPlaylistBurn: *const fn (
            self: *const IWMReaderPlaylistBurn,
            hr_burn_result: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initPlaylistBurn(self: *const T, c_files_: u32, ppwsz_filenames_: ?*?PWSTR, p_callback_: ?*IWMStatusCallback, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMReaderPlaylistBurn.VTable, @ptrCast(self.vtable)).InitPlaylistBurn(@as(*const IWMReaderPlaylistBurn, @ptrCast(self)), c_files_, ppwsz_filenames_, p_callback_, pv_context_);
            }
            pub inline fn getInitResults(self: *const T, c_files_: u32, phr_stati_: ?*HRESULT) HRESULT {
                return @as(*const IWMReaderPlaylistBurn.VTable, @ptrCast(self.vtable)).GetInitResults(@as(*const IWMReaderPlaylistBurn, @ptrCast(self)), c_files_, phr_stati_);
            }
            pub inline fn cancel(self: *const T) HRESULT {
                return @as(*const IWMReaderPlaylistBurn.VTable, @ptrCast(self.vtable)).Cancel(@as(*const IWMReaderPlaylistBurn, @ptrCast(self)));
            }
            pub inline fn endPlaylistBurn(self: *const T, hr_burn_result_: HRESULT) HRESULT {
                return @as(*const IWMReaderPlaylistBurn.VTable, @ptrCast(self.vtable)).EndPlaylistBurn(@as(*const IWMReaderPlaylistBurn, @ptrCast(self)), hr_burn_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderNetworkConfig_Value = Guid.initString("96406bec-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMReaderNetworkConfig = &IID_IWMReaderNetworkConfig_Value;
pub const IWMReaderNetworkConfig = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetBufferingTime: *const fn (
            self: *const IWMReaderNetworkConfig,
            pcns_buffering_time: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBufferingTime: *const fn (
            self: *const IWMReaderNetworkConfig,
            cns_buffering_time: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUDPPortRanges: *const fn (
            self: *const IWMReaderNetworkConfig,
            p_range_array: [*]WM_PORT_NUMBER_RANGE,
            pc_ranges: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUDPPortRanges: *const fn (
            self: *const IWMReaderNetworkConfig,
            p_range_array: [*]WM_PORT_NUMBER_RANGE,
            c_ranges: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProxySettings: *const fn (
            self: *const IWMReaderNetworkConfig,
            pwsz_protocol: ?[*:0]const u16,
            p_proxy_setting: ?*WMT_PROXY_SETTINGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProxySettings: *const fn (
            self: *const IWMReaderNetworkConfig,
            pwsz_protocol: ?[*:0]const u16,
            proxy_setting: WMT_PROXY_SETTINGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProxyHostName: *const fn (
            self: *const IWMReaderNetworkConfig,
            pwsz_protocol: ?[*:0]const u16,
            pwsz_host_name: [*:0]u16,
            pcch_host_name: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProxyHostName: *const fn (
            self: *const IWMReaderNetworkConfig,
            pwsz_protocol: ?[*:0]const u16,
            pwsz_host_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProxyPort: *const fn (
            self: *const IWMReaderNetworkConfig,
            pwsz_protocol: ?[*:0]const u16,
            pdw_port: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProxyPort: *const fn (
            self: *const IWMReaderNetworkConfig,
            pwsz_protocol: ?[*:0]const u16,
            dw_port: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProxyExceptionList: *const fn (
            self: *const IWMReaderNetworkConfig,
            pwsz_protocol: ?[*:0]const u16,
            pwsz_exception_list: [*:0]u16,
            pcch_exception_list: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProxyExceptionList: *const fn (
            self: *const IWMReaderNetworkConfig,
            pwsz_protocol: ?[*:0]const u16,
            pwsz_exception_list: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProxyBypassForLocal: *const fn (
            self: *const IWMReaderNetworkConfig,
            pwsz_protocol: ?[*:0]const u16,
            pf_bypass_for_local: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProxyBypassForLocal: *const fn (
            self: *const IWMReaderNetworkConfig,
            pwsz_protocol: ?[*:0]const u16,
            f_bypass_for_local: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetForceRerunAutoProxyDetection: *const fn (
            self: *const IWMReaderNetworkConfig,
            pf_force_rerun_detection: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetForceRerunAutoProxyDetection: *const fn (
            self: *const IWMReaderNetworkConfig,
            f_force_rerun_detection: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnableMulticast: *const fn (
            self: *const IWMReaderNetworkConfig,
            pf_enable_multicast: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnableMulticast: *const fn (
            self: *const IWMReaderNetworkConfig,
            f_enable_multicast: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnableHTTP: *const fn (
            self: *const IWMReaderNetworkConfig,
            pf_enable_h_t_t_p: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnableHTTP: *const fn (
            self: *const IWMReaderNetworkConfig,
            f_enable_h_t_t_p: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnableUDP: *const fn (
            self: *const IWMReaderNetworkConfig,
            pf_enable_u_d_p: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnableUDP: *const fn (
            self: *const IWMReaderNetworkConfig,
            f_enable_u_d_p: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnableTCP: *const fn (
            self: *const IWMReaderNetworkConfig,
            pf_enable_t_c_p: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnableTCP: *const fn (
            self: *const IWMReaderNetworkConfig,
            f_enable_t_c_p: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetProtocolRollover: *const fn (
            self: *const IWMReaderNetworkConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnectionBandwidth: *const fn (
            self: *const IWMReaderNetworkConfig,
            pdw_connection_bandwidth: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConnectionBandwidth: *const fn (
            self: *const IWMReaderNetworkConfig,
            dw_connection_bandwidth: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumProtocolsSupported: *const fn (
            self: *const IWMReaderNetworkConfig,
            pc_protocols: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSupportedProtocolName: *const fn (
            self: *const IWMReaderNetworkConfig,
            dw_protocol_num: u32,
            pwsz_protocol_name: [*:0]u16,
            pcch_protocol_name: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddLoggingUrl: *const fn (
            self: *const IWMReaderNetworkConfig,
            pwsz_url: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLoggingUrl: *const fn (
            self: *const IWMReaderNetworkConfig,
            dw_index: u32,
            pwsz_url: [*:0]u16,
            pcch_url: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLoggingUrlCount: *const fn (
            self: *const IWMReaderNetworkConfig,
            pdw_url_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetLoggingUrlList: *const fn (
            self: *const IWMReaderNetworkConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getBufferingTime(self: *const T, pcns_buffering_time_: ?*u64) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).GetBufferingTime(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), pcns_buffering_time_);
            }
            pub inline fn setBufferingTime(self: *const T, cns_buffering_time_: u64) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).SetBufferingTime(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), cns_buffering_time_);
            }
            pub inline fn getUDPPortRanges(self: *const T, p_range_array_: [*]WM_PORT_NUMBER_RANGE, pc_ranges_: ?*u32) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).GetUDPPortRanges(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), p_range_array_, pc_ranges_);
            }
            pub inline fn setUDPPortRanges(self: *const T, p_range_array_: [*]WM_PORT_NUMBER_RANGE, c_ranges_: u32) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).SetUDPPortRanges(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), p_range_array_, c_ranges_);
            }
            pub inline fn getProxySettings(self: *const T, pwsz_protocol_: ?[*:0]const u16, p_proxy_setting_: ?*WMT_PROXY_SETTINGS) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).GetProxySettings(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), pwsz_protocol_, p_proxy_setting_);
            }
            pub inline fn setProxySettings(self: *const T, pwsz_protocol_: ?[*:0]const u16, proxy_setting_: WMT_PROXY_SETTINGS) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).SetProxySettings(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), pwsz_protocol_, proxy_setting_);
            }
            pub inline fn getProxyHostName(self: *const T, pwsz_protocol_: ?[*:0]const u16, pwsz_host_name_: [*:0]u16, pcch_host_name_: ?*u32) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).GetProxyHostName(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), pwsz_protocol_, pwsz_host_name_, pcch_host_name_);
            }
            pub inline fn setProxyHostName(self: *const T, pwsz_protocol_: ?[*:0]const u16, pwsz_host_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).SetProxyHostName(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), pwsz_protocol_, pwsz_host_name_);
            }
            pub inline fn getProxyPort(self: *const T, pwsz_protocol_: ?[*:0]const u16, pdw_port_: ?*u32) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).GetProxyPort(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), pwsz_protocol_, pdw_port_);
            }
            pub inline fn setProxyPort(self: *const T, pwsz_protocol_: ?[*:0]const u16, dw_port_: u32) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).SetProxyPort(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), pwsz_protocol_, dw_port_);
            }
            pub inline fn getProxyExceptionList(self: *const T, pwsz_protocol_: ?[*:0]const u16, pwsz_exception_list_: [*:0]u16, pcch_exception_list_: ?*u32) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).GetProxyExceptionList(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), pwsz_protocol_, pwsz_exception_list_, pcch_exception_list_);
            }
            pub inline fn setProxyExceptionList(self: *const T, pwsz_protocol_: ?[*:0]const u16, pwsz_exception_list_: ?[*:0]const u16) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).SetProxyExceptionList(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), pwsz_protocol_, pwsz_exception_list_);
            }
            pub inline fn getProxyBypassForLocal(self: *const T, pwsz_protocol_: ?[*:0]const u16, pf_bypass_for_local_: ?*BOOL) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).GetProxyBypassForLocal(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), pwsz_protocol_, pf_bypass_for_local_);
            }
            pub inline fn setProxyBypassForLocal(self: *const T, pwsz_protocol_: ?[*:0]const u16, f_bypass_for_local_: BOOL) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).SetProxyBypassForLocal(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), pwsz_protocol_, f_bypass_for_local_);
            }
            pub inline fn getForceRerunAutoProxyDetection(self: *const T, pf_force_rerun_detection_: ?*BOOL) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).GetForceRerunAutoProxyDetection(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), pf_force_rerun_detection_);
            }
            pub inline fn setForceRerunAutoProxyDetection(self: *const T, f_force_rerun_detection_: BOOL) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).SetForceRerunAutoProxyDetection(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), f_force_rerun_detection_);
            }
            pub inline fn getEnableMulticast(self: *const T, pf_enable_multicast_: ?*BOOL) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).GetEnableMulticast(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), pf_enable_multicast_);
            }
            pub inline fn setEnableMulticast(self: *const T, f_enable_multicast_: BOOL) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).SetEnableMulticast(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), f_enable_multicast_);
            }
            pub inline fn getEnableHTTP(self: *const T, pf_enable_h_t_t_p_: ?*BOOL) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).GetEnableHTTP(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), pf_enable_h_t_t_p_);
            }
            pub inline fn setEnableHTTP(self: *const T, f_enable_h_t_t_p_: BOOL) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).SetEnableHTTP(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), f_enable_h_t_t_p_);
            }
            pub inline fn getEnableUDP(self: *const T, pf_enable_u_d_p_: ?*BOOL) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).GetEnableUDP(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), pf_enable_u_d_p_);
            }
            pub inline fn setEnableUDP(self: *const T, f_enable_u_d_p_: BOOL) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).SetEnableUDP(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), f_enable_u_d_p_);
            }
            pub inline fn getEnableTCP(self: *const T, pf_enable_t_c_p_: ?*BOOL) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).GetEnableTCP(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), pf_enable_t_c_p_);
            }
            pub inline fn setEnableTCP(self: *const T, f_enable_t_c_p_: BOOL) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).SetEnableTCP(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), f_enable_t_c_p_);
            }
            pub inline fn resetProtocolRollover(self: *const T) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).ResetProtocolRollover(@as(*const IWMReaderNetworkConfig, @ptrCast(self)));
            }
            pub inline fn getConnectionBandwidth(self: *const T, pdw_connection_bandwidth_: ?*u32) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).GetConnectionBandwidth(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), pdw_connection_bandwidth_);
            }
            pub inline fn setConnectionBandwidth(self: *const T, dw_connection_bandwidth_: u32) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).SetConnectionBandwidth(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), dw_connection_bandwidth_);
            }
            pub inline fn getNumProtocolsSupported(self: *const T, pc_protocols_: ?*u32) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).GetNumProtocolsSupported(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), pc_protocols_);
            }
            pub inline fn getSupportedProtocolName(self: *const T, dw_protocol_num_: u32, pwsz_protocol_name_: [*:0]u16, pcch_protocol_name_: ?*u32) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).GetSupportedProtocolName(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), dw_protocol_num_, pwsz_protocol_name_, pcch_protocol_name_);
            }
            pub inline fn addLoggingUrl(self: *const T, pwsz_url_: ?[*:0]const u16) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).AddLoggingUrl(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), pwsz_url_);
            }
            pub inline fn getLoggingUrl(self: *const T, dw_index_: u32, pwsz_url_: [*:0]u16, pcch_url_: ?*u32) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).GetLoggingUrl(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), dw_index_, pwsz_url_, pcch_url_);
            }
            pub inline fn getLoggingUrlCount(self: *const T, pdw_url_count_: ?*u32) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).GetLoggingUrlCount(@as(*const IWMReaderNetworkConfig, @ptrCast(self)), pdw_url_count_);
            }
            pub inline fn resetLoggingUrlList(self: *const T) HRESULT {
                return @as(*const IWMReaderNetworkConfig.VTable, @ptrCast(self.vtable)).ResetLoggingUrlList(@as(*const IWMReaderNetworkConfig, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderNetworkConfig2_Value = Guid.initString("d979a853-042b-4050-8387-c939db22013f");
pub const IID_IWMReaderNetworkConfig2 = &IID_IWMReaderNetworkConfig2_Value;
pub const IWMReaderNetworkConfig2 = extern struct {
    pub const VTable = extern struct {
        base: IWMReaderNetworkConfig.VTable,
        GetEnableContentCaching: *const fn (
            self: *const IWMReaderNetworkConfig2,
            pf_enable_content_caching: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnableContentCaching: *const fn (
            self: *const IWMReaderNetworkConfig2,
            f_enable_content_caching: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnableFastCache: *const fn (
            self: *const IWMReaderNetworkConfig2,
            pf_enable_fast_cache: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnableFastCache: *const fn (
            self: *const IWMReaderNetworkConfig2,
            f_enable_fast_cache: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAcceleratedStreamingDuration: *const fn (
            self: *const IWMReaderNetworkConfig2,
            pcns_accel_duration: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAcceleratedStreamingDuration: *const fn (
            self: *const IWMReaderNetworkConfig2,
            cns_accel_duration: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAutoReconnectLimit: *const fn (
            self: *const IWMReaderNetworkConfig2,
            pdw_auto_reconnect_limit: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAutoReconnectLimit: *const fn (
            self: *const IWMReaderNetworkConfig2,
            dw_auto_reconnect_limit: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnableResends: *const fn (
            self: *const IWMReaderNetworkConfig2,
            pf_enable_resends: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnableResends: *const fn (
            self: *const IWMReaderNetworkConfig2,
            f_enable_resends: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnableThinning: *const fn (
            self: *const IWMReaderNetworkConfig2,
            pf_enable_thinning: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnableThinning: *const fn (
            self: *const IWMReaderNetworkConfig2,
            f_enable_thinning: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxNetPacketSize: *const fn (
            self: *const IWMReaderNetworkConfig2,
            pdw_max_net_packet_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMReaderNetworkConfig.MethodMixin(T);
            pub inline fn getEnableContentCaching(self: *const T, pf_enable_content_caching_: ?*BOOL) HRESULT {
                return @as(*const IWMReaderNetworkConfig2.VTable, @ptrCast(self.vtable)).GetEnableContentCaching(@as(*const IWMReaderNetworkConfig2, @ptrCast(self)), pf_enable_content_caching_);
            }
            pub inline fn setEnableContentCaching(self: *const T, f_enable_content_caching_: BOOL) HRESULT {
                return @as(*const IWMReaderNetworkConfig2.VTable, @ptrCast(self.vtable)).SetEnableContentCaching(@as(*const IWMReaderNetworkConfig2, @ptrCast(self)), f_enable_content_caching_);
            }
            pub inline fn getEnableFastCache(self: *const T, pf_enable_fast_cache_: ?*BOOL) HRESULT {
                return @as(*const IWMReaderNetworkConfig2.VTable, @ptrCast(self.vtable)).GetEnableFastCache(@as(*const IWMReaderNetworkConfig2, @ptrCast(self)), pf_enable_fast_cache_);
            }
            pub inline fn setEnableFastCache(self: *const T, f_enable_fast_cache_: BOOL) HRESULT {
                return @as(*const IWMReaderNetworkConfig2.VTable, @ptrCast(self.vtable)).SetEnableFastCache(@as(*const IWMReaderNetworkConfig2, @ptrCast(self)), f_enable_fast_cache_);
            }
            pub inline fn getAcceleratedStreamingDuration(self: *const T, pcns_accel_duration_: ?*u64) HRESULT {
                return @as(*const IWMReaderNetworkConfig2.VTable, @ptrCast(self.vtable)).GetAcceleratedStreamingDuration(@as(*const IWMReaderNetworkConfig2, @ptrCast(self)), pcns_accel_duration_);
            }
            pub inline fn setAcceleratedStreamingDuration(self: *const T, cns_accel_duration_: u64) HRESULT {
                return @as(*const IWMReaderNetworkConfig2.VTable, @ptrCast(self.vtable)).SetAcceleratedStreamingDuration(@as(*const IWMReaderNetworkConfig2, @ptrCast(self)), cns_accel_duration_);
            }
            pub inline fn getAutoReconnectLimit(self: *const T, pdw_auto_reconnect_limit_: ?*u32) HRESULT {
                return @as(*const IWMReaderNetworkConfig2.VTable, @ptrCast(self.vtable)).GetAutoReconnectLimit(@as(*const IWMReaderNetworkConfig2, @ptrCast(self)), pdw_auto_reconnect_limit_);
            }
            pub inline fn setAutoReconnectLimit(self: *const T, dw_auto_reconnect_limit_: u32) HRESULT {
                return @as(*const IWMReaderNetworkConfig2.VTable, @ptrCast(self.vtable)).SetAutoReconnectLimit(@as(*const IWMReaderNetworkConfig2, @ptrCast(self)), dw_auto_reconnect_limit_);
            }
            pub inline fn getEnableResends(self: *const T, pf_enable_resends_: ?*BOOL) HRESULT {
                return @as(*const IWMReaderNetworkConfig2.VTable, @ptrCast(self.vtable)).GetEnableResends(@as(*const IWMReaderNetworkConfig2, @ptrCast(self)), pf_enable_resends_);
            }
            pub inline fn setEnableResends(self: *const T, f_enable_resends_: BOOL) HRESULT {
                return @as(*const IWMReaderNetworkConfig2.VTable, @ptrCast(self.vtable)).SetEnableResends(@as(*const IWMReaderNetworkConfig2, @ptrCast(self)), f_enable_resends_);
            }
            pub inline fn getEnableThinning(self: *const T, pf_enable_thinning_: ?*BOOL) HRESULT {
                return @as(*const IWMReaderNetworkConfig2.VTable, @ptrCast(self.vtable)).GetEnableThinning(@as(*const IWMReaderNetworkConfig2, @ptrCast(self)), pf_enable_thinning_);
            }
            pub inline fn setEnableThinning(self: *const T, f_enable_thinning_: BOOL) HRESULT {
                return @as(*const IWMReaderNetworkConfig2.VTable, @ptrCast(self.vtable)).SetEnableThinning(@as(*const IWMReaderNetworkConfig2, @ptrCast(self)), f_enable_thinning_);
            }
            pub inline fn getMaxNetPacketSize(self: *const T, pdw_max_net_packet_size_: ?*u32) HRESULT {
                return @as(*const IWMReaderNetworkConfig2.VTable, @ptrCast(self.vtable)).GetMaxNetPacketSize(@as(*const IWMReaderNetworkConfig2, @ptrCast(self)), pdw_max_net_packet_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderStreamClock_Value = Guid.initString("96406bed-2b2b-11d3-b36b-00c04f6108ff");
pub const IID_IWMReaderStreamClock = &IID_IWMReaderStreamClock_Value;
pub const IWMReaderStreamClock = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTime: *const fn (
            self: *const IWMReaderStreamClock,
            pcns_now: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTimer: *const fn (
            self: *const IWMReaderStreamClock,
            cns_when: u64,
            pv_param: ?*anyopaque,
            pdw_timer_id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        KillTimer: *const fn (
            self: *const IWMReaderStreamClock,
            dw_timer_id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getTime(self: *const T, pcns_now_: ?*u64) HRESULT {
                return @as(*const IWMReaderStreamClock.VTable, @ptrCast(self.vtable)).GetTime(@as(*const IWMReaderStreamClock, @ptrCast(self)), pcns_now_);
            }
            pub inline fn setTimer(self: *const T, cns_when_: u64, pv_param_: ?*anyopaque, pdw_timer_id_: ?*u32) HRESULT {
                return @as(*const IWMReaderStreamClock.VTable, @ptrCast(self.vtable)).SetTimer(@as(*const IWMReaderStreamClock, @ptrCast(self)), cns_when_, pv_param_, pdw_timer_id_);
            }
            pub inline fn killTimer(self: *const T, dw_timer_id_: u32) HRESULT {
                return @as(*const IWMReaderStreamClock.VTable, @ptrCast(self.vtable)).KillTimer(@as(*const IWMReaderStreamClock, @ptrCast(self)), dw_timer_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMIndexer_Value = Guid.initString("6d7cdc71-9888-11d3-8edc-00c04f6109cf");
pub const IID_IWMIndexer = &IID_IWMIndexer_Value;
pub const IWMIndexer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartIndexing: *const fn (
            self: *const IWMIndexer,
            pwsz_u_r_l: ?[*:0]const u16,
            p_callback: ?*IWMStatusCallback,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn (
            self: *const IWMIndexer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn startIndexing(self: *const T, pwsz_u_r_l_: ?[*:0]const u16, p_callback_: ?*IWMStatusCallback, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMIndexer.VTable, @ptrCast(self.vtable)).StartIndexing(@as(*const IWMIndexer, @ptrCast(self)), pwsz_u_r_l_, p_callback_, pv_context_);
            }
            pub inline fn cancel(self: *const T) HRESULT {
                return @as(*const IWMIndexer.VTable, @ptrCast(self.vtable)).Cancel(@as(*const IWMIndexer, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMIndexer2_Value = Guid.initString("b70f1e42-6255-4df0-a6b9-02b212d9e2bb");
pub const IID_IWMIndexer2 = &IID_IWMIndexer2_Value;
pub const IWMIndexer2 = extern struct {
    pub const VTable = extern struct {
        base: IWMIndexer.VTable,
        Configure: *const fn (
            self: *const IWMIndexer2,
            w_stream_num: u16,
            n_indexer_type: WMT_INDEXER_TYPE,
            pv_interval: ?*anyopaque,
            pv_index_type: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMIndexer.MethodMixin(T);
            pub inline fn configure(self: *const T, w_stream_num_: u16, n_indexer_type_: WMT_INDEXER_TYPE, pv_interval_: ?*anyopaque, pv_index_type_: ?*anyopaque) HRESULT {
                return @as(*const IWMIndexer2.VTable, @ptrCast(self.vtable)).Configure(@as(*const IWMIndexer2, @ptrCast(self)), w_stream_num_, n_indexer_type_, pv_interval_, pv_index_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWMLicenseBackup_Value = Guid.initString("05e5ac9f-3fb6-4508-bb43-a4067ba1ebe8");
pub const IID_IWMLicenseBackup = &IID_IWMLicenseBackup_Value;
pub const IWMLicenseBackup = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BackupLicenses: *const fn (
            self: *const IWMLicenseBackup,
            dw_flags: u32,
            p_callback: ?*IWMStatusCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelLicenseBackup: *const fn (
            self: *const IWMLicenseBackup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn backupLicenses(self: *const T, dw_flags_: u32, p_callback_: ?*IWMStatusCallback) HRESULT {
                return @as(*const IWMLicenseBackup.VTable, @ptrCast(self.vtable)).BackupLicenses(@as(*const IWMLicenseBackup, @ptrCast(self)), dw_flags_, p_callback_);
            }
            pub inline fn cancelLicenseBackup(self: *const T) HRESULT {
                return @as(*const IWMLicenseBackup.VTable, @ptrCast(self.vtable)).CancelLicenseBackup(@as(*const IWMLicenseBackup, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWMLicenseRestore_Value = Guid.initString("c70b6334-a22e-4efb-a245-15e65a004a13");
pub const IID_IWMLicenseRestore = &IID_IWMLicenseRestore_Value;
pub const IWMLicenseRestore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RestoreLicenses: *const fn (
            self: *const IWMLicenseRestore,
            dw_flags: u32,
            p_callback: ?*IWMStatusCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelLicenseRestore: *const fn (
            self: *const IWMLicenseRestore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn restoreLicenses(self: *const T, dw_flags_: u32, p_callback_: ?*IWMStatusCallback) HRESULT {
                return @as(*const IWMLicenseRestore.VTable, @ptrCast(self.vtable)).RestoreLicenses(@as(*const IWMLicenseRestore, @ptrCast(self)), dw_flags_, p_callback_);
            }
            pub inline fn cancelLicenseRestore(self: *const T) HRESULT {
                return @as(*const IWMLicenseRestore.VTable, @ptrCast(self.vtable)).CancelLicenseRestore(@as(*const IWMLicenseRestore, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWMBackupRestoreProps_Value = Guid.initString("3c8e0da6-996f-4ff3-a1af-4838f9377e2e");
pub const IID_IWMBackupRestoreProps = &IID_IWMBackupRestoreProps_Value;
pub const IWMBackupRestoreProps = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPropCount: *const fn (
            self: *const IWMBackupRestoreProps,
            pc_props: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropByIndex: *const fn (
            self: *const IWMBackupRestoreProps,
            w_index: u16,
            pwsz_name: [*:0]u16,
            pcch_name_len: ?*u16,
            p_type: ?*WMT_ATTR_DATATYPE,
            p_value: [*:0]u8,
            pcb_length: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropByName: *const fn (
            self: *const IWMBackupRestoreProps,
            psz_name: ?[*:0]const u16,
            p_type: ?*WMT_ATTR_DATATYPE,
            p_value: [*:0]u8,
            pcb_length: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProp: *const fn (
            self: *const IWMBackupRestoreProps,
            psz_name: ?[*:0]const u16,
            type: WMT_ATTR_DATATYPE,
            p_value: [*:0]const u8,
            cb_length: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveProp: *const fn (
            self: *const IWMBackupRestoreProps,
            pcwsz_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllProps: *const fn (
            self: *const IWMBackupRestoreProps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPropCount(self: *const T, pc_props_: ?*u16) HRESULT {
                return @as(*const IWMBackupRestoreProps.VTable, @ptrCast(self.vtable)).GetPropCount(@as(*const IWMBackupRestoreProps, @ptrCast(self)), pc_props_);
            }
            pub inline fn getPropByIndex(self: *const T, w_index_: u16, pwsz_name_: [*:0]u16, pcch_name_len_: ?*u16, p_type_: ?*WMT_ATTR_DATATYPE, p_value_: [*:0]u8, pcb_length_: ?*u16) HRESULT {
                return @as(*const IWMBackupRestoreProps.VTable, @ptrCast(self.vtable)).GetPropByIndex(@as(*const IWMBackupRestoreProps, @ptrCast(self)), w_index_, pwsz_name_, pcch_name_len_, p_type_, p_value_, pcb_length_);
            }
            pub inline fn getPropByName(self: *const T, psz_name_: ?[*:0]const u16, p_type_: ?*WMT_ATTR_DATATYPE, p_value_: [*:0]u8, pcb_length_: ?*u16) HRESULT {
                return @as(*const IWMBackupRestoreProps.VTable, @ptrCast(self.vtable)).GetPropByName(@as(*const IWMBackupRestoreProps, @ptrCast(self)), psz_name_, p_type_, p_value_, pcb_length_);
            }
            pub inline fn setProp(self: *const T, psz_name_: ?[*:0]const u16, type_: WMT_ATTR_DATATYPE, p_value_: [*:0]const u8, cb_length_: u16) HRESULT {
                return @as(*const IWMBackupRestoreProps.VTable, @ptrCast(self.vtable)).SetProp(@as(*const IWMBackupRestoreProps, @ptrCast(self)), psz_name_, type_, p_value_, cb_length_);
            }
            pub inline fn removeProp(self: *const T, pcwsz_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IWMBackupRestoreProps.VTable, @ptrCast(self.vtable)).RemoveProp(@as(*const IWMBackupRestoreProps, @ptrCast(self)), pcwsz_name_);
            }
            pub inline fn removeAllProps(self: *const T) HRESULT {
                return @as(*const IWMBackupRestoreProps.VTable, @ptrCast(self.vtable)).RemoveAllProps(@as(*const IWMBackupRestoreProps, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMCodecInfo_Value = Guid.initString("a970f41e-34de-4a98-b3ba-e4b3ca7528f0");
pub const IID_IWMCodecInfo = &IID_IWMCodecInfo_Value;
pub const IWMCodecInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCodecInfoCount: *const fn (
            self: *const IWMCodecInfo,
            guid_type: ?*const Guid,
            pc_codecs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCodecFormatCount: *const fn (
            self: *const IWMCodecInfo,
            guid_type: ?*const Guid,
            dw_codec_index: u32,
            pc_format: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCodecFormat: *const fn (
            self: *const IWMCodecInfo,
            guid_type: ?*const Guid,
            dw_codec_index: u32,
            dw_format_index: u32,
            pp_i_stream_config: ?*?*IWMStreamConfig,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCodecInfoCount(self: *const T, guid_type_: ?*const Guid, pc_codecs_: ?*u32) HRESULT {
                return @as(*const IWMCodecInfo.VTable, @ptrCast(self.vtable)).GetCodecInfoCount(@as(*const IWMCodecInfo, @ptrCast(self)), guid_type_, pc_codecs_);
            }
            pub inline fn getCodecFormatCount(self: *const T, guid_type_: ?*const Guid, dw_codec_index_: u32, pc_format_: ?*u32) HRESULT {
                return @as(*const IWMCodecInfo.VTable, @ptrCast(self.vtable)).GetCodecFormatCount(@as(*const IWMCodecInfo, @ptrCast(self)), guid_type_, dw_codec_index_, pc_format_);
            }
            pub inline fn getCodecFormat(self: *const T, guid_type_: ?*const Guid, dw_codec_index_: u32, dw_format_index_: u32, pp_i_stream_config_: ?*?*IWMStreamConfig) HRESULT {
                return @as(*const IWMCodecInfo.VTable, @ptrCast(self.vtable)).GetCodecFormat(@as(*const IWMCodecInfo, @ptrCast(self)), guid_type_, dw_codec_index_, dw_format_index_, pp_i_stream_config_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMCodecInfo2_Value = Guid.initString("aa65e273-b686-4056-91ec-dd768d4df710");
pub const IID_IWMCodecInfo2 = &IID_IWMCodecInfo2_Value;
pub const IWMCodecInfo2 = extern struct {
    pub const VTable = extern struct {
        base: IWMCodecInfo.VTable,
        GetCodecName: *const fn (
            self: *const IWMCodecInfo2,
            guid_type: ?*const Guid,
            dw_codec_index: u32,
            wsz_name: [*:0]u16,
            pcch_name: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCodecFormatDesc: *const fn (
            self: *const IWMCodecInfo2,
            guid_type: ?*const Guid,
            dw_codec_index: u32,
            dw_format_index: u32,
            pp_i_stream_config: ?*?*IWMStreamConfig,
            wsz_desc: [*:0]u16,
            pcch_desc: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMCodecInfo.MethodMixin(T);
            pub inline fn getCodecName(self: *const T, guid_type_: ?*const Guid, dw_codec_index_: u32, wsz_name_: [*:0]u16, pcch_name_: ?*u32) HRESULT {
                return @as(*const IWMCodecInfo2.VTable, @ptrCast(self.vtable)).GetCodecName(@as(*const IWMCodecInfo2, @ptrCast(self)), guid_type_, dw_codec_index_, wsz_name_, pcch_name_);
            }
            pub inline fn getCodecFormatDesc(self: *const T, guid_type_: ?*const Guid, dw_codec_index_: u32, dw_format_index_: u32, pp_i_stream_config_: ?*?*IWMStreamConfig, wsz_desc_: [*:0]u16, pcch_desc_: ?*u32) HRESULT {
                return @as(*const IWMCodecInfo2.VTable, @ptrCast(self.vtable)).GetCodecFormatDesc(@as(*const IWMCodecInfo2, @ptrCast(self)), guid_type_, dw_codec_index_, dw_format_index_, pp_i_stream_config_, wsz_desc_, pcch_desc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMCodecInfo3_Value = Guid.initString("7e51f487-4d93-4f98-8ab4-27d0565adc51");
pub const IID_IWMCodecInfo3 = &IID_IWMCodecInfo3_Value;
pub const IWMCodecInfo3 = extern struct {
    pub const VTable = extern struct {
        base: IWMCodecInfo2.VTable,
        GetCodecFormatProp: *const fn (
            self: *const IWMCodecInfo3,
            guid_type: ?*const Guid,
            dw_codec_index: u32,
            dw_format_index: u32,
            psz_name: ?[*:0]const u16,
            p_type: ?*WMT_ATTR_DATATYPE,
            p_value: [*:0]u8,
            pdw_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCodecProp: *const fn (
            self: *const IWMCodecInfo3,
            guid_type: ?*const Guid,
            dw_codec_index: u32,
            psz_name: ?[*:0]const u16,
            p_type: ?*WMT_ATTR_DATATYPE,
            p_value: [*:0]u8,
            pdw_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCodecEnumerationSetting: *const fn (
            self: *const IWMCodecInfo3,
            guid_type: ?*const Guid,
            dw_codec_index: u32,
            psz_name: ?[*:0]const u16,
            type: WMT_ATTR_DATATYPE,
            p_value: [*:0]const u8,
            dw_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCodecEnumerationSetting: *const fn (
            self: *const IWMCodecInfo3,
            guid_type: ?*const Guid,
            dw_codec_index: u32,
            psz_name: ?[*:0]const u16,
            p_type: ?*WMT_ATTR_DATATYPE,
            p_value: [*:0]u8,
            pdw_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMCodecInfo2.MethodMixin(T);
            pub inline fn getCodecFormatProp(self: *const T, guid_type_: ?*const Guid, dw_codec_index_: u32, dw_format_index_: u32, psz_name_: ?[*:0]const u16, p_type_: ?*WMT_ATTR_DATATYPE, p_value_: [*:0]u8, pdw_size_: ?*u32) HRESULT {
                return @as(*const IWMCodecInfo3.VTable, @ptrCast(self.vtable)).GetCodecFormatProp(@as(*const IWMCodecInfo3, @ptrCast(self)), guid_type_, dw_codec_index_, dw_format_index_, psz_name_, p_type_, p_value_, pdw_size_);
            }
            pub inline fn getCodecProp(self: *const T, guid_type_: ?*const Guid, dw_codec_index_: u32, psz_name_: ?[*:0]const u16, p_type_: ?*WMT_ATTR_DATATYPE, p_value_: [*:0]u8, pdw_size_: ?*u32) HRESULT {
                return @as(*const IWMCodecInfo3.VTable, @ptrCast(self.vtable)).GetCodecProp(@as(*const IWMCodecInfo3, @ptrCast(self)), guid_type_, dw_codec_index_, psz_name_, p_type_, p_value_, pdw_size_);
            }
            pub inline fn setCodecEnumerationSetting(self: *const T, guid_type_: ?*const Guid, dw_codec_index_: u32, psz_name_: ?[*:0]const u16, type_: WMT_ATTR_DATATYPE, p_value_: [*:0]const u8, dw_size_: u32) HRESULT {
                return @as(*const IWMCodecInfo3.VTable, @ptrCast(self.vtable)).SetCodecEnumerationSetting(@as(*const IWMCodecInfo3, @ptrCast(self)), guid_type_, dw_codec_index_, psz_name_, type_, p_value_, dw_size_);
            }
            pub inline fn getCodecEnumerationSetting(self: *const T, guid_type_: ?*const Guid, dw_codec_index_: u32, psz_name_: ?[*:0]const u16, p_type_: ?*WMT_ATTR_DATATYPE, p_value_: [*:0]u8, pdw_size_: ?*u32) HRESULT {
                return @as(*const IWMCodecInfo3.VTable, @ptrCast(self.vtable)).GetCodecEnumerationSetting(@as(*const IWMCodecInfo3, @ptrCast(self)), guid_type_, dw_codec_index_, psz_name_, p_type_, p_value_, pdw_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMLanguageList_Value = Guid.initString("df683f00-2d49-4d8e-92b7-fb19f6a0dc57");
pub const IID_IWMLanguageList = &IID_IWMLanguageList_Value;
pub const IWMLanguageList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLanguageCount: *const fn (
            self: *const IWMLanguageList,
            pw_count: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLanguageDetails: *const fn (
            self: *const IWMLanguageList,
            w_index: u16,
            pwsz_language_string: [*:0]u16,
            pcch_language_string_length: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddLanguageByRFC1766String: *const fn (
            self: *const IWMLanguageList,
            pwsz_language_string: ?PWSTR,
            pw_index: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getLanguageCount(self: *const T, pw_count_: ?*u16) HRESULT {
                return @as(*const IWMLanguageList.VTable, @ptrCast(self.vtable)).GetLanguageCount(@as(*const IWMLanguageList, @ptrCast(self)), pw_count_);
            }
            pub inline fn getLanguageDetails(self: *const T, w_index_: u16, pwsz_language_string_: [*:0]u16, pcch_language_string_length_: ?*u16) HRESULT {
                return @as(*const IWMLanguageList.VTable, @ptrCast(self.vtable)).GetLanguageDetails(@as(*const IWMLanguageList, @ptrCast(self)), w_index_, pwsz_language_string_, pcch_language_string_length_);
            }
            pub inline fn addLanguageByRFC1766String(self: *const T, pwsz_language_string_: ?PWSTR, pw_index_: ?*u16) HRESULT {
                return @as(*const IWMLanguageList.VTable, @ptrCast(self.vtable)).AddLanguageByRFC1766String(@as(*const IWMLanguageList, @ptrCast(self)), pwsz_language_string_, pw_index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWriterPushSink_Value = Guid.initString("dc10e6a5-072c-467d-bf57-6330a9dde12a");
pub const IID_IWMWriterPushSink = &IID_IWMWriterPushSink_Value;
pub const IWMWriterPushSink = extern struct {
    pub const VTable = extern struct {
        base: IWMWriterSink.VTable,
        Connect: *const fn (
            self: *const IWMWriterPushSink,
            pwsz_u_r_l: ?[*:0]const u16,
            pwsz_template_u_r_l: ?[*:0]const u16,
            f_auto_destroy: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: *const fn (
            self: *const IWMWriterPushSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndSession: *const fn (
            self: *const IWMWriterPushSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMWriterSink.MethodMixin(T);
            pub inline fn connect(self: *const T, pwsz_u_r_l_: ?[*:0]const u16, pwsz_template_u_r_l_: ?[*:0]const u16, f_auto_destroy_: BOOL) HRESULT {
                return @as(*const IWMWriterPushSink.VTable, @ptrCast(self.vtable)).Connect(@as(*const IWMWriterPushSink, @ptrCast(self)), pwsz_u_r_l_, pwsz_template_u_r_l_, f_auto_destroy_);
            }
            pub inline fn disconnect(self: *const T) HRESULT {
                return @as(*const IWMWriterPushSink.VTable, @ptrCast(self.vtable)).Disconnect(@as(*const IWMWriterPushSink, @ptrCast(self)));
            }
            pub inline fn endSession(self: *const T) HRESULT {
                return @as(*const IWMWriterPushSink.VTable, @ptrCast(self.vtable)).EndSession(@as(*const IWMWriterPushSink, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWMDeviceRegistration_Value = Guid.initString("f6211f03-8d21-4e94-93e6-8510805f2d99");
pub const IID_IWMDeviceRegistration = &IID_IWMDeviceRegistration_Value;
pub const IWMDeviceRegistration = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterDevice: *const fn (
            self: *const IWMDeviceRegistration,
            dw_register_type: u32,
            pb_certificate: [*:0]u8,
            cb_certificate: u32,
            serial_number: DRM_VAL16,
            pp_device: ?*?*IWMRegisteredDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterDevice: *const fn (
            self: *const IWMDeviceRegistration,
            dw_register_type: u32,
            pb_certificate: [*:0]u8,
            cb_certificate: u32,
            serial_number: DRM_VAL16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegistrationStats: *const fn (
            self: *const IWMDeviceRegistration,
            dw_register_type: u32,
            pc_registered_devices: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFirstRegisteredDevice: *const fn (
            self: *const IWMDeviceRegistration,
            dw_register_type: u32,
            pp_device: ?*?*IWMRegisteredDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextRegisteredDevice: *const fn (
            self: *const IWMDeviceRegistration,
            pp_device: ?*?*IWMRegisteredDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegisteredDeviceByID: *const fn (
            self: *const IWMDeviceRegistration,
            dw_register_type: u32,
            pb_certificate: [*:0]u8,
            cb_certificate: u32,
            serial_number: DRM_VAL16,
            pp_device: ?*?*IWMRegisteredDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn registerDevice(self: *const T, dw_register_type_: u32, pb_certificate_: [*:0]u8, cb_certificate_: u32, serial_number_: DRM_VAL16, pp_device_: ?*?*IWMRegisteredDevice) HRESULT {
                return @as(*const IWMDeviceRegistration.VTable, @ptrCast(self.vtable)).RegisterDevice(@as(*const IWMDeviceRegistration, @ptrCast(self)), dw_register_type_, pb_certificate_, cb_certificate_, serial_number_, pp_device_);
            }
            pub inline fn unregisterDevice(self: *const T, dw_register_type_: u32, pb_certificate_: [*:0]u8, cb_certificate_: u32, serial_number_: DRM_VAL16) HRESULT {
                return @as(*const IWMDeviceRegistration.VTable, @ptrCast(self.vtable)).UnregisterDevice(@as(*const IWMDeviceRegistration, @ptrCast(self)), dw_register_type_, pb_certificate_, cb_certificate_, serial_number_);
            }
            pub inline fn getRegistrationStats(self: *const T, dw_register_type_: u32, pc_registered_devices_: ?*u32) HRESULT {
                return @as(*const IWMDeviceRegistration.VTable, @ptrCast(self.vtable)).GetRegistrationStats(@as(*const IWMDeviceRegistration, @ptrCast(self)), dw_register_type_, pc_registered_devices_);
            }
            pub inline fn getFirstRegisteredDevice(self: *const T, dw_register_type_: u32, pp_device_: ?*?*IWMRegisteredDevice) HRESULT {
                return @as(*const IWMDeviceRegistration.VTable, @ptrCast(self.vtable)).GetFirstRegisteredDevice(@as(*const IWMDeviceRegistration, @ptrCast(self)), dw_register_type_, pp_device_);
            }
            pub inline fn getNextRegisteredDevice(self: *const T, pp_device_: ?*?*IWMRegisteredDevice) HRESULT {
                return @as(*const IWMDeviceRegistration.VTable, @ptrCast(self.vtable)).GetNextRegisteredDevice(@as(*const IWMDeviceRegistration, @ptrCast(self)), pp_device_);
            }
            pub inline fn getRegisteredDeviceByID(self: *const T, dw_register_type_: u32, pb_certificate_: [*:0]u8, cb_certificate_: u32, serial_number_: DRM_VAL16, pp_device_: ?*?*IWMRegisteredDevice) HRESULT {
                return @as(*const IWMDeviceRegistration.VTable, @ptrCast(self.vtable)).GetRegisteredDeviceByID(@as(*const IWMDeviceRegistration, @ptrCast(self)), dw_register_type_, pb_certificate_, cb_certificate_, serial_number_, pp_device_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMRegisteredDevice_Value = Guid.initString("a4503bec-5508-4148-97ac-bfa75760a70d");
pub const IID_IWMRegisteredDevice = &IID_IWMRegisteredDevice_Value;
pub const IWMRegisteredDevice = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDeviceSerialNumber: *const fn (
            self: *const IWMRegisteredDevice,
            p_serial_number: ?*DRM_VAL16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceCertificate: *const fn (
            self: *const IWMRegisteredDevice,
            pp_certificate: ?*?*INSSBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDeviceType: *const fn (
            self: *const IWMRegisteredDevice,
            pdw_type: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeCount: *const fn (
            self: *const IWMRegisteredDevice,
            pc_attributes: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeByIndex: *const fn (
            self: *const IWMRegisteredDevice,
            dw_index: u32,
            pbstr_name: ?*?BSTR,
            pbstr_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributeByName: *const fn (
            self: *const IWMRegisteredDevice,
            bstr_name: ?BSTR,
            pbstr_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAttributeByName: *const fn (
            self: *const IWMRegisteredDevice,
            bstr_name: ?BSTR,
            bstr_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Approve: *const fn (
            self: *const IWMRegisteredDevice,
            f_approve: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsValid: *const fn (
            self: *const IWMRegisteredDevice,
            pf_valid: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsApproved: *const fn (
            self: *const IWMRegisteredDevice,
            pf_approved: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsWmdrmCompliant: *const fn (
            self: *const IWMRegisteredDevice,
            pf_compliant: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsOpened: *const fn (
            self: *const IWMRegisteredDevice,
            pf_opened: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: *const fn (
            self: *const IWMRegisteredDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IWMRegisteredDevice,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDeviceSerialNumber(self: *const T, p_serial_number_: ?*DRM_VAL16) HRESULT {
                return @as(*const IWMRegisteredDevice.VTable, @ptrCast(self.vtable)).GetDeviceSerialNumber(@as(*const IWMRegisteredDevice, @ptrCast(self)), p_serial_number_);
            }
            pub inline fn getDeviceCertificate(self: *const T, pp_certificate_: ?*?*INSSBuffer) HRESULT {
                return @as(*const IWMRegisteredDevice.VTable, @ptrCast(self.vtable)).GetDeviceCertificate(@as(*const IWMRegisteredDevice, @ptrCast(self)), pp_certificate_);
            }
            pub inline fn getDeviceType(self: *const T, pdw_type_: ?*u32) HRESULT {
                return @as(*const IWMRegisteredDevice.VTable, @ptrCast(self.vtable)).GetDeviceType(@as(*const IWMRegisteredDevice, @ptrCast(self)), pdw_type_);
            }
            pub inline fn getAttributeCount(self: *const T, pc_attributes_: ?*u32) HRESULT {
                return @as(*const IWMRegisteredDevice.VTable, @ptrCast(self.vtable)).GetAttributeCount(@as(*const IWMRegisteredDevice, @ptrCast(self)), pc_attributes_);
            }
            pub inline fn getAttributeByIndex(self: *const T, dw_index_: u32, pbstr_name_: ?*?BSTR, pbstr_value_: ?*?BSTR) HRESULT {
                return @as(*const IWMRegisteredDevice.VTable, @ptrCast(self.vtable)).GetAttributeByIndex(@as(*const IWMRegisteredDevice, @ptrCast(self)), dw_index_, pbstr_name_, pbstr_value_);
            }
            pub inline fn getAttributeByName(self: *const T, bstr_name_: ?BSTR, pbstr_value_: ?*?BSTR) HRESULT {
                return @as(*const IWMRegisteredDevice.VTable, @ptrCast(self.vtable)).GetAttributeByName(@as(*const IWMRegisteredDevice, @ptrCast(self)), bstr_name_, pbstr_value_);
            }
            pub inline fn setAttributeByName(self: *const T, bstr_name_: ?BSTR, bstr_value_: ?BSTR) HRESULT {
                return @as(*const IWMRegisteredDevice.VTable, @ptrCast(self.vtable)).SetAttributeByName(@as(*const IWMRegisteredDevice, @ptrCast(self)), bstr_name_, bstr_value_);
            }
            pub inline fn approve(self: *const T, f_approve_: BOOL) HRESULT {
                return @as(*const IWMRegisteredDevice.VTable, @ptrCast(self.vtable)).Approve(@as(*const IWMRegisteredDevice, @ptrCast(self)), f_approve_);
            }
            pub inline fn isValid(self: *const T, pf_valid_: ?*BOOL) HRESULT {
                return @as(*const IWMRegisteredDevice.VTable, @ptrCast(self.vtable)).IsValid(@as(*const IWMRegisteredDevice, @ptrCast(self)), pf_valid_);
            }
            pub inline fn isApproved(self: *const T, pf_approved_: ?*BOOL) HRESULT {
                return @as(*const IWMRegisteredDevice.VTable, @ptrCast(self.vtable)).IsApproved(@as(*const IWMRegisteredDevice, @ptrCast(self)), pf_approved_);
            }
            pub inline fn isWmdrmCompliant(self: *const T, pf_compliant_: ?*BOOL) HRESULT {
                return @as(*const IWMRegisteredDevice.VTable, @ptrCast(self.vtable)).IsWmdrmCompliant(@as(*const IWMRegisteredDevice, @ptrCast(self)), pf_compliant_);
            }
            pub inline fn isOpened(self: *const T, pf_opened_: ?*BOOL) HRESULT {
                return @as(*const IWMRegisteredDevice.VTable, @ptrCast(self.vtable)).IsOpened(@as(*const IWMRegisteredDevice, @ptrCast(self)), pf_opened_);
            }
            pub inline fn open(self: *const T) HRESULT {
                return @as(*const IWMRegisteredDevice.VTable, @ptrCast(self.vtable)).Open(@as(*const IWMRegisteredDevice, @ptrCast(self)));
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IWMRegisteredDevice.VTable, @ptrCast(self.vtable)).Close(@as(*const IWMRegisteredDevice, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWMProximityDetection_Value = Guid.initString("6a9fd8ee-b651-4bf0-b849-7d4ece79a2b1");
pub const IID_IWMProximityDetection = &IID_IWMProximityDetection_Value;
pub const IWMProximityDetection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartDetection: *const fn (
            self: *const IWMProximityDetection,
            pb_registration_msg: [*:0]u8,
            cb_registration_msg: u32,
            pb_local_address: [*:0]u8,
            cb_local_address: u32,
            dw_extra_ports_allowed: u32,
            pp_registration_response_msg: ?*?*INSSBuffer,
            p_callback: ?*IWMStatusCallback,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn startDetection(self: *const T, pb_registration_msg_: [*:0]u8, cb_registration_msg_: u32, pb_local_address_: [*:0]u8, cb_local_address_: u32, dw_extra_ports_allowed_: u32, pp_registration_response_msg_: ?*?*INSSBuffer, p_callback_: ?*IWMStatusCallback, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMProximityDetection.VTable, @ptrCast(self.vtable)).StartDetection(@as(*const IWMProximityDetection, @ptrCast(self)), pb_registration_msg_, cb_registration_msg_, pb_local_address_, cb_local_address_, dw_extra_ports_allowed_, pp_registration_response_msg_, p_callback_, pv_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWMDRMMessageParser_Value = Guid.initString("a73a0072-25a0-4c99-b4a5-ede8101a6c39");
pub const IID_IWMDRMMessageParser = &IID_IWMDRMMessageParser_Value;
pub const IWMDRMMessageParser = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ParseRegistrationReqMsg: *const fn (
            self: *const IWMDRMMessageParser,
            pb_registration_req_msg: [*:0]u8,
            cb_registration_req_msg: u32,
            pp_device_cert: ?*?*INSSBuffer,
            p_device_serial_number: ?*DRM_VAL16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ParseLicenseRequestMsg: *const fn (
            self: *const IWMDRMMessageParser,
            pb_license_request_msg: [*:0]u8,
            cb_license_request_msg: u32,
            pp_device_cert: ?*?*INSSBuffer,
            p_device_serial_number: ?*DRM_VAL16,
            pbstr_action: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn parseRegistrationReqMsg(self: *const T, pb_registration_req_msg_: [*:0]u8, cb_registration_req_msg_: u32, pp_device_cert_: ?*?*INSSBuffer, p_device_serial_number_: ?*DRM_VAL16) HRESULT {
                return @as(*const IWMDRMMessageParser.VTable, @ptrCast(self.vtable)).ParseRegistrationReqMsg(@as(*const IWMDRMMessageParser, @ptrCast(self)), pb_registration_req_msg_, cb_registration_req_msg_, pp_device_cert_, p_device_serial_number_);
            }
            pub inline fn parseLicenseRequestMsg(self: *const T, pb_license_request_msg_: [*:0]u8, cb_license_request_msg_: u32, pp_device_cert_: ?*?*INSSBuffer, p_device_serial_number_: ?*DRM_VAL16, pbstr_action_: ?*?BSTR) HRESULT {
                return @as(*const IWMDRMMessageParser.VTable, @ptrCast(self.vtable)).ParseLicenseRequestMsg(@as(*const IWMDRMMessageParser, @ptrCast(self)), pb_license_request_msg_, cb_license_request_msg_, pp_device_cert_, p_device_serial_number_, pbstr_action_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWMDRMTranscryptor_Value = Guid.initString("69059850-6e6f-4bb2-806f-71863ddfc471");
pub const IID_IWMDRMTranscryptor = &IID_IWMDRMTranscryptor_Value;
pub const IWMDRMTranscryptor = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IWMDRMTranscryptor,
            bstr_file_name: ?BSTR,
            pb_license_request_msg: ?*u8,
            cb_license_request_msg: u32,
            pp_license_response_msg: ?*?*INSSBuffer,
            p_callback: ?*IWMStatusCallback,
            pv_context: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Seek: *const fn (
            self: *const IWMDRMTranscryptor,
            hns_time: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Read: *const fn (
            self: *const IWMDRMTranscryptor,
            pb_data: ?*u8,
            pcb_data: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IWMDRMTranscryptor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, bstr_file_name_: ?BSTR, pb_license_request_msg_: ?*u8, cb_license_request_msg_: u32, pp_license_response_msg_: ?*?*INSSBuffer, p_callback_: ?*IWMStatusCallback, pv_context_: ?*anyopaque) HRESULT {
                return @as(*const IWMDRMTranscryptor.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IWMDRMTranscryptor, @ptrCast(self)), bstr_file_name_, pb_license_request_msg_, cb_license_request_msg_, pp_license_response_msg_, p_callback_, pv_context_);
            }
            pub inline fn seek(self: *const T, hns_time_: u64) HRESULT {
                return @as(*const IWMDRMTranscryptor.VTable, @ptrCast(self.vtable)).Seek(@as(*const IWMDRMTranscryptor, @ptrCast(self)), hns_time_);
            }
            pub inline fn read(self: *const T, pb_data_: ?*u8, pcb_data_: ?*u32) HRESULT {
                return @as(*const IWMDRMTranscryptor.VTable, @ptrCast(self.vtable)).Read(@as(*const IWMDRMTranscryptor, @ptrCast(self)), pb_data_, pcb_data_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IWMDRMTranscryptor.VTable, @ptrCast(self.vtable)).Close(@as(*const IWMDRMTranscryptor, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDRMTranscryptor2_Value = Guid.initString("e0da439f-d331-496a-bece-18e5bac5dd23");
pub const IID_IWMDRMTranscryptor2 = &IID_IWMDRMTranscryptor2_Value;
pub const IWMDRMTranscryptor2 = extern struct {
    pub const VTable = extern struct {
        base: IWMDRMTranscryptor.VTable,
        SeekEx: *const fn (
            self: *const IWMDRMTranscryptor2,
            cns_start_time: u64,
            cns_duration: u64,
            fl_rate: f32,
            f_include_file_header: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ZeroAdjustTimestamps: *const fn (
            self: *const IWMDRMTranscryptor2,
            f_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSeekStartTime: *const fn (
            self: *const IWMDRMTranscryptor2,
            pcns_time: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDuration: *const fn (
            self: *const IWMDRMTranscryptor2,
            pcns_duration: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMDRMTranscryptor.MethodMixin(T);
            pub inline fn seekEx(self: *const T, cns_start_time_: u64, cns_duration_: u64, fl_rate_: f32, f_include_file_header_: BOOL) HRESULT {
                return @as(*const IWMDRMTranscryptor2.VTable, @ptrCast(self.vtable)).SeekEx(@as(*const IWMDRMTranscryptor2, @ptrCast(self)), cns_start_time_, cns_duration_, fl_rate_, f_include_file_header_);
            }
            pub inline fn zeroAdjustTimestamps(self: *const T, f_enable_: BOOL) HRESULT {
                return @as(*const IWMDRMTranscryptor2.VTable, @ptrCast(self.vtable)).ZeroAdjustTimestamps(@as(*const IWMDRMTranscryptor2, @ptrCast(self)), f_enable_);
            }
            pub inline fn getSeekStartTime(self: *const T, pcns_time_: ?*u64) HRESULT {
                return @as(*const IWMDRMTranscryptor2.VTable, @ptrCast(self.vtable)).GetSeekStartTime(@as(*const IWMDRMTranscryptor2, @ptrCast(self)), pcns_time_);
            }
            pub inline fn getDuration(self: *const T, pcns_duration_: ?*u64) HRESULT {
                return @as(*const IWMDRMTranscryptor2.VTable, @ptrCast(self.vtable)).GetDuration(@as(*const IWMDRMTranscryptor2, @ptrCast(self)), pcns_duration_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMDRMTranscryptionManager_Value = Guid.initString("b1a887b2-a4f0-407a-b02e-efbd23bbecdf");
pub const IID_IWMDRMTranscryptionManager = &IID_IWMDRMTranscryptionManager_Value;
pub const IWMDRMTranscryptionManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateTranscryptor: *const fn (
            self: *const IWMDRMTranscryptionManager,
            pp_transcryptor: ?*?*IWMDRMTranscryptor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createTranscryptor(self: *const T, pp_transcryptor_: ?*?*IWMDRMTranscryptor) HRESULT {
                return @as(*const IWMDRMTranscryptionManager.VTable, @ptrCast(self.vtable)).CreateTranscryptor(@as(*const IWMDRMTranscryptionManager, @ptrCast(self)), pp_transcryptor_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMWatermarkInfo_Value = Guid.initString("6f497062-f2e2-4624-8ea7-9dd40d81fc8d");
pub const IID_IWMWatermarkInfo = &IID_IWMWatermarkInfo_Value;
pub const IWMWatermarkInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetWatermarkEntryCount: *const fn (
            self: *const IWMWatermarkInfo,
            wmet_type: WMT_WATERMARK_ENTRY_TYPE,
            pdw_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWatermarkEntry: *const fn (
            self: *const IWMWatermarkInfo,
            wmet_type: WMT_WATERMARK_ENTRY_TYPE,
            dw_entry_num: u32,
            p_entry: ?*WMT_WATERMARK_ENTRY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getWatermarkEntryCount(self: *const T, wmet_type_: WMT_WATERMARK_ENTRY_TYPE, pdw_count_: ?*u32) HRESULT {
                return @as(*const IWMWatermarkInfo.VTable, @ptrCast(self.vtable)).GetWatermarkEntryCount(@as(*const IWMWatermarkInfo, @ptrCast(self)), wmet_type_, pdw_count_);
            }
            pub inline fn getWatermarkEntry(self: *const T, wmet_type_: WMT_WATERMARK_ENTRY_TYPE, dw_entry_num_: u32, p_entry_: ?*WMT_WATERMARK_ENTRY) HRESULT {
                return @as(*const IWMWatermarkInfo.VTable, @ptrCast(self.vtable)).GetWatermarkEntry(@as(*const IWMWatermarkInfo, @ptrCast(self)), wmet_type_, dw_entry_num_, p_entry_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderAccelerator_Value = Guid.initString("bddc4d08-944d-4d52-a612-46c3fda07dd4");
pub const IID_IWMReaderAccelerator = &IID_IWMReaderAccelerator_Value;
pub const IWMReaderAccelerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCodecInterface: *const fn (
            self: *const IWMReaderAccelerator,
            dw_output_num: u32,
            riid: ?*const Guid,
            ppv_codec_interface: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Notify: *const fn (
            self: *const IWMReaderAccelerator,
            dw_output_num: u32,
            p_subtype: ?*WM_MEDIA_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCodecInterface(self: *const T, dw_output_num_: u32, riid_: ?*const Guid, ppv_codec_interface_: ?*?*anyopaque) HRESULT {
                return @as(*const IWMReaderAccelerator.VTable, @ptrCast(self.vtable)).GetCodecInterface(@as(*const IWMReaderAccelerator, @ptrCast(self)), dw_output_num_, riid_, ppv_codec_interface_);
            }
            pub inline fn notify(self: *const T, dw_output_num_: u32, p_subtype_: ?*WM_MEDIA_TYPE) HRESULT {
                return @as(*const IWMReaderAccelerator.VTable, @ptrCast(self.vtable)).Notify(@as(*const IWMReaderAccelerator, @ptrCast(self)), dw_output_num_, p_subtype_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMReaderTimecode_Value = Guid.initString("f369e2f0-e081-4fe6-8450-b810b2f410d1");
pub const IID_IWMReaderTimecode = &IID_IWMReaderTimecode_Value;
pub const IWMReaderTimecode = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTimecodeRangeCount: *const fn (
            self: *const IWMReaderTimecode,
            w_stream_num: u16,
            pw_range_count: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTimecodeRangeBounds: *const fn (
            self: *const IWMReaderTimecode,
            w_stream_num: u16,
            w_range_num: u16,
            p_start_timecode: ?*u32,
            p_end_timecode: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getTimecodeRangeCount(self: *const T, w_stream_num_: u16, pw_range_count_: ?*u16) HRESULT {
                return @as(*const IWMReaderTimecode.VTable, @ptrCast(self.vtable)).GetTimecodeRangeCount(@as(*const IWMReaderTimecode, @ptrCast(self)), w_stream_num_, pw_range_count_);
            }
            pub inline fn getTimecodeRangeBounds(self: *const T, w_stream_num_: u16, w_range_num_: u16, p_start_timecode_: ?*u32, p_end_timecode_: ?*u32) HRESULT {
                return @as(*const IWMReaderTimecode.VTable, @ptrCast(self.vtable)).GetTimecodeRangeBounds(@as(*const IWMReaderTimecode, @ptrCast(self)), w_stream_num_, w_range_num_, p_start_timecode_, p_end_timecode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMAddressAccess_Value = Guid.initString("bb3c6389-1633-4e92-af14-9f3173ba39d0");
pub const IID_IWMAddressAccess = &IID_IWMAddressAccess_Value;
pub const IWMAddressAccess = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAccessEntryCount: *const fn (
            self: *const IWMAddressAccess,
            ae_type: WM_AETYPE,
            pc_entries: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAccessEntry: *const fn (
            self: *const IWMAddressAccess,
            ae_type: WM_AETYPE,
            dw_entry_num: u32,
            p_addr_access_entry: ?*WM_ADDRESS_ACCESSENTRY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAccessEntry: *const fn (
            self: *const IWMAddressAccess,
            ae_type: WM_AETYPE,
            p_addr_access_entry: ?*WM_ADDRESS_ACCESSENTRY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAccessEntry: *const fn (
            self: *const IWMAddressAccess,
            ae_type: WM_AETYPE,
            dw_entry_num: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAccessEntryCount(self: *const T, ae_type_: WM_AETYPE, pc_entries_: ?*u32) HRESULT {
                return @as(*const IWMAddressAccess.VTable, @ptrCast(self.vtable)).GetAccessEntryCount(@as(*const IWMAddressAccess, @ptrCast(self)), ae_type_, pc_entries_);
            }
            pub inline fn getAccessEntry(self: *const T, ae_type_: WM_AETYPE, dw_entry_num_: u32, p_addr_access_entry_: ?*WM_ADDRESS_ACCESSENTRY) HRESULT {
                return @as(*const IWMAddressAccess.VTable, @ptrCast(self.vtable)).GetAccessEntry(@as(*const IWMAddressAccess, @ptrCast(self)), ae_type_, dw_entry_num_, p_addr_access_entry_);
            }
            pub inline fn addAccessEntry(self: *const T, ae_type_: WM_AETYPE, p_addr_access_entry_: ?*WM_ADDRESS_ACCESSENTRY) HRESULT {
                return @as(*const IWMAddressAccess.VTable, @ptrCast(self.vtable)).AddAccessEntry(@as(*const IWMAddressAccess, @ptrCast(self)), ae_type_, p_addr_access_entry_);
            }
            pub inline fn removeAccessEntry(self: *const T, ae_type_: WM_AETYPE, dw_entry_num_: u32) HRESULT {
                return @as(*const IWMAddressAccess.VTable, @ptrCast(self.vtable)).RemoveAccessEntry(@as(*const IWMAddressAccess, @ptrCast(self)), ae_type_, dw_entry_num_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMAddressAccess2_Value = Guid.initString("65a83fc2-3e98-4d4d-81b5-2a742886b33d");
pub const IID_IWMAddressAccess2 = &IID_IWMAddressAccess2_Value;
pub const IWMAddressAccess2 = extern struct {
    pub const VTable = extern struct {
        base: IWMAddressAccess.VTable,
        GetAccessEntryEx: *const fn (
            self: *const IWMAddressAccess2,
            ae_type: WM_AETYPE,
            dw_entry_num: u32,
            pbstr_address: ?*?BSTR,
            pbstr_mask: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddAccessEntryEx: *const fn (
            self: *const IWMAddressAccess2,
            ae_type: WM_AETYPE,
            bstr_address: ?BSTR,
            bstr_mask: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMAddressAccess.MethodMixin(T);
            pub inline fn getAccessEntryEx(self: *const T, ae_type_: WM_AETYPE, dw_entry_num_: u32, pbstr_address_: ?*?BSTR, pbstr_mask_: ?*?BSTR) HRESULT {
                return @as(*const IWMAddressAccess2.VTable, @ptrCast(self.vtable)).GetAccessEntryEx(@as(*const IWMAddressAccess2, @ptrCast(self)), ae_type_, dw_entry_num_, pbstr_address_, pbstr_mask_);
            }
            pub inline fn addAccessEntryEx(self: *const T, ae_type_: WM_AETYPE, bstr_address_: ?BSTR, bstr_mask_: ?BSTR) HRESULT {
                return @as(*const IWMAddressAccess2.VTable, @ptrCast(self.vtable)).AddAccessEntryEx(@as(*const IWMAddressAccess2, @ptrCast(self)), ae_type_, bstr_address_, bstr_mask_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMImageInfo_Value = Guid.initString("9f0aa3b6-7267-4d89-88f2-ba915aa5c4c6");
pub const IID_IWMImageInfo = &IID_IWMImageInfo_Value;
pub const IWMImageInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetImageCount: *const fn (
            self: *const IWMImageInfo,
            pc_images: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetImage: *const fn (
            self: *const IWMImageInfo,
            w_index: u32,
            pcch_m_i_m_e_type: ?*u16,
            pwsz_m_i_m_e_type: [*:0]u16,
            pcch_description: ?*u16,
            pwsz_description: [*:0]u16,
            p_image_type: ?*u16,
            pcb_image_data: ?*u32,
            pb_image_data: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getImageCount(self: *const T, pc_images_: ?*u32) HRESULT {
                return @as(*const IWMImageInfo.VTable, @ptrCast(self.vtable)).GetImageCount(@as(*const IWMImageInfo, @ptrCast(self)), pc_images_);
            }
            pub inline fn getImage(self: *const T, w_index_: u32, pcch_m_i_m_e_type_: ?*u16, pwsz_m_i_m_e_type_: [*:0]u16, pcch_description_: ?*u16, pwsz_description_: [*:0]u16, p_image_type_: ?*u16, pcb_image_data_: ?*u32, pb_image_data_: [*:0]u8) HRESULT {
                return @as(*const IWMImageInfo.VTable, @ptrCast(self.vtable)).GetImage(@as(*const IWMImageInfo, @ptrCast(self)), w_index_, pcch_m_i_m_e_type_, pwsz_m_i_m_e_type_, pcch_description_, pwsz_description_, p_image_type_, pcb_image_data_, pb_image_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMLicenseRevocationAgent_Value = Guid.initString("6967f2c9-4e26-4b57-8894-799880f7ac7b");
pub const IID_IWMLicenseRevocationAgent = &IID_IWMLicenseRevocationAgent_Value;
pub const IWMLicenseRevocationAgent = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLRBChallenge: *const fn (
            self: *const IWMLicenseRevocationAgent,
            p_machine_i_d: ?*u8,
            dw_machine_i_d_length: u32,
            p_challenge: ?*u8,
            dw_challenge_length: u32,
            p_challenge_output: ?*u8,
            pdw_challenge_output_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessLRB: *const fn (
            self: *const IWMLicenseRevocationAgent,
            p_signed_l_r_b: ?*u8,
            dw_signed_l_r_b_length: u32,
            p_signed_a_c_k: ?*u8,
            pdw_signed_a_c_k_length: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getLRBChallenge(self: *const T, p_machine_i_d_: ?*u8, dw_machine_i_d_length_: u32, p_challenge_: ?*u8, dw_challenge_length_: u32, p_challenge_output_: ?*u8, pdw_challenge_output_length_: ?*u32) HRESULT {
                return @as(*const IWMLicenseRevocationAgent.VTable, @ptrCast(self.vtable)).GetLRBChallenge(@as(*const IWMLicenseRevocationAgent, @ptrCast(self)), p_machine_i_d_, dw_machine_i_d_length_, p_challenge_, dw_challenge_length_, p_challenge_output_, pdw_challenge_output_length_);
            }
            pub inline fn processLRB(self: *const T, p_signed_l_r_b_: ?*u8, dw_signed_l_r_b_length_: u32, p_signed_a_c_k_: ?*u8, pdw_signed_a_c_k_length_: ?*u32) HRESULT {
                return @as(*const IWMLicenseRevocationAgent.VTable, @ptrCast(self.vtable)).ProcessLRB(@as(*const IWMLicenseRevocationAgent, @ptrCast(self)), p_signed_l_r_b_, dw_signed_l_r_b_length_, p_signed_a_c_k_, pdw_signed_a_c_k_length_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWMAuthorizer_Value = Guid.initString("d9b67d36-a9ad-4eb4-baef-db284ef5504c");
pub const IID_IWMAuthorizer = &IID_IWMAuthorizer_Value;
pub const IWMAuthorizer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCertCount: *const fn (
            self: *const IWMAuthorizer,
            pc_certs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCert: *const fn (
            self: *const IWMAuthorizer,
            dw_index: u32,
            ppb_cert_data: ?*?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSharedData: *const fn (
            self: *const IWMAuthorizer,
            dw_cert_index: u32,
            pb_shared_data: ?*const u8,
            pb_cert: ?*u8,
            ppb_shared_data: ?*?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCertCount(self: *const T, pc_certs_: ?*u32) HRESULT {
                return @as(*const IWMAuthorizer.VTable, @ptrCast(self.vtable)).GetCertCount(@as(*const IWMAuthorizer, @ptrCast(self)), pc_certs_);
            }
            pub inline fn getCert(self: *const T, dw_index_: u32, ppb_cert_data_: ?*?*u8) HRESULT {
                return @as(*const IWMAuthorizer.VTable, @ptrCast(self.vtable)).GetCert(@as(*const IWMAuthorizer, @ptrCast(self)), dw_index_, ppb_cert_data_);
            }
            pub inline fn getSharedData(self: *const T, dw_cert_index_: u32, pb_shared_data_: ?*const u8, pb_cert_: ?*u8, ppb_shared_data_: ?*?*u8) HRESULT {
                return @as(*const IWMAuthorizer.VTable, @ptrCast(self.vtable)).GetSharedData(@as(*const IWMAuthorizer, @ptrCast(self)), dw_cert_index_, pb_shared_data_, pb_cert_, ppb_shared_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWMSecureChannel_Value = Guid.initString("2720598a-d0f2-4189-bd10-91c46ef0936f");
pub const IID_IWMSecureChannel = &IID_IWMSecureChannel_Value;
pub const IWMSecureChannel = extern struct {
    pub const VTable = extern struct {
        base: IWMAuthorizer.VTable,
        WMSC_AddCertificate: *const fn (
            self: *const IWMSecureChannel,
            p_cert: ?*IWMAuthorizer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMSC_AddSignature: *const fn (
            self: *const IWMSecureChannel,
            pb_cert_sig: ?*u8,
            cb_cert_sig: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMSC_Connect: *const fn (
            self: *const IWMSecureChannel,
            p_other_side: ?*IWMSecureChannel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMSC_IsConnected: *const fn (
            self: *const IWMSecureChannel,
            pf_is_connected: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMSC_Disconnect: *const fn (
            self: *const IWMSecureChannel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMSC_GetValidCertificate: *const fn (
            self: *const IWMSecureChannel,
            ppb_certificate: ?*?*u8,
            pdw_signature: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMSC_Encrypt: *const fn (
            self: *const IWMSecureChannel,
            pb_data: ?*u8,
            cb_data: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMSC_Decrypt: *const fn (
            self: *const IWMSecureChannel,
            pb_data: ?*u8,
            cb_data: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMSC_Lock: *const fn (
            self: *const IWMSecureChannel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMSC_Unlock: *const fn (
            self: *const IWMSecureChannel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WMSC_SetSharedData: *const fn (
            self: *const IWMSecureChannel,
            dw_cert_index: u32,
            pb_shared_data: ?*const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMAuthorizer.MethodMixin(T);
            pub inline fn wmscAddCertificate(self: *const T, p_cert_: ?*IWMAuthorizer) HRESULT {
                return @as(*const IWMSecureChannel.VTable, @ptrCast(self.vtable)).WMSC_AddCertificate(@as(*const IWMSecureChannel, @ptrCast(self)), p_cert_);
            }
            pub inline fn wmscAddSignature(self: *const T, pb_cert_sig_: ?*u8, cb_cert_sig_: u32) HRESULT {
                return @as(*const IWMSecureChannel.VTable, @ptrCast(self.vtable)).WMSC_AddSignature(@as(*const IWMSecureChannel, @ptrCast(self)), pb_cert_sig_, cb_cert_sig_);
            }
            pub inline fn wmscConnect(self: *const T, p_other_side_: ?*IWMSecureChannel) HRESULT {
                return @as(*const IWMSecureChannel.VTable, @ptrCast(self.vtable)).WMSC_Connect(@as(*const IWMSecureChannel, @ptrCast(self)), p_other_side_);
            }
            pub inline fn wmscIsConnected(self: *const T, pf_is_connected_: ?*BOOL) HRESULT {
                return @as(*const IWMSecureChannel.VTable, @ptrCast(self.vtable)).WMSC_IsConnected(@as(*const IWMSecureChannel, @ptrCast(self)), pf_is_connected_);
            }
            pub inline fn wmscDisconnect(self: *const T) HRESULT {
                return @as(*const IWMSecureChannel.VTable, @ptrCast(self.vtable)).WMSC_Disconnect(@as(*const IWMSecureChannel, @ptrCast(self)));
            }
            pub inline fn wmscGetValidCertificate(self: *const T, ppb_certificate_: ?*?*u8, pdw_signature_: ?*u32) HRESULT {
                return @as(*const IWMSecureChannel.VTable, @ptrCast(self.vtable)).WMSC_GetValidCertificate(@as(*const IWMSecureChannel, @ptrCast(self)), ppb_certificate_, pdw_signature_);
            }
            pub inline fn wmscEncrypt(self: *const T, pb_data_: ?*u8, cb_data_: u32) HRESULT {
                return @as(*const IWMSecureChannel.VTable, @ptrCast(self.vtable)).WMSC_Encrypt(@as(*const IWMSecureChannel, @ptrCast(self)), pb_data_, cb_data_);
            }
            pub inline fn wmscDecrypt(self: *const T, pb_data_: ?*u8, cb_data_: u32) HRESULT {
                return @as(*const IWMSecureChannel.VTable, @ptrCast(self.vtable)).WMSC_Decrypt(@as(*const IWMSecureChannel, @ptrCast(self)), pb_data_, cb_data_);
            }
            pub inline fn wmscLock(self: *const T) HRESULT {
                return @as(*const IWMSecureChannel.VTable, @ptrCast(self.vtable)).WMSC_Lock(@as(*const IWMSecureChannel, @ptrCast(self)));
            }
            pub inline fn wmscUnlock(self: *const T) HRESULT {
                return @as(*const IWMSecureChannel.VTable, @ptrCast(self.vtable)).WMSC_Unlock(@as(*const IWMSecureChannel, @ptrCast(self)));
            }
            pub inline fn wmscSetSharedData(self: *const T, dw_cert_index_: u32, pb_shared_data_: ?*const u8) HRESULT {
                return @as(*const IWMSecureChannel.VTable, @ptrCast(self.vtable)).WMSC_SetSharedData(@as(*const IWMSecureChannel, @ptrCast(self)), dw_cert_index_, pb_shared_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IWMGetSecureChannel_Value = Guid.initString("94bc0598-c3d2-11d3-bedf-00c04f612986");
pub const IID_IWMGetSecureChannel = &IID_IWMGetSecureChannel_Value;
pub const IWMGetSecureChannel = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPeerSecureChannelInterface: *const fn (
            self: *const IWMGetSecureChannel,
            pp_peer: ?*?*IWMSecureChannel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPeerSecureChannelInterface(self: *const T, pp_peer_: ?*?*IWMSecureChannel) HRESULT {
                return @as(*const IWMGetSecureChannel.VTable, @ptrCast(self.vtable)).GetPeerSecureChannelInterface(@as(*const IWMGetSecureChannel, @ptrCast(self)), pp_peer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_INSNetSourceCreator_Value = Guid.initString("0c0e4080-9081-11d2-beec-0060082f2054");
pub const IID_INSNetSourceCreator = &IID_INSNetSourceCreator_Value;
pub const INSNetSourceCreator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const INSNetSourceCreator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateNetSource: *const fn (
            self: *const INSNetSourceCreator,
            psz_stream_name: ?[*:0]const u16,
            p_monitor: ?*IUnknown,
            p_data: ?*u8,
            p_user_context: ?*IUnknown,
            p_callback: ?*IUnknown,
            qw_context: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetSourceProperties: *const fn (
            self: *const INSNetSourceCreator,
            psz_stream_name: ?[*:0]const u16,
            pp_properties_node: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetSourceSharedNamespace: *const fn (
            self: *const INSNetSourceCreator,
            pp_shared_namespace: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetSourceAdminInterface: *const fn (
            self: *const INSNetSourceCreator,
            psz_stream_name: ?[*:0]const u16,
            p_val: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumProtocolsSupported: *const fn (
            self: *const INSNetSourceCreator,
            pc_protocols: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProtocolName: *const fn (
            self: *const INSNetSourceCreator,
            dw_protocol_num: u32,
            pwsz_protocol_name: ?PWSTR,
            pcch_protocol_name: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Shutdown: *const fn (
            self: *const INSNetSourceCreator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T) HRESULT {
                return @as(*const INSNetSourceCreator.VTable, @ptrCast(self.vtable)).Initialize(@as(*const INSNetSourceCreator, @ptrCast(self)));
            }
            pub inline fn createNetSource(self: *const T, psz_stream_name_: ?[*:0]const u16, p_monitor_: ?*IUnknown, p_data_: ?*u8, p_user_context_: ?*IUnknown, p_callback_: ?*IUnknown, qw_context_: u64) HRESULT {
                return @as(*const INSNetSourceCreator.VTable, @ptrCast(self.vtable)).CreateNetSource(@as(*const INSNetSourceCreator, @ptrCast(self)), psz_stream_name_, p_monitor_, p_data_, p_user_context_, p_callback_, qw_context_);
            }
            pub inline fn getNetSourceProperties(self: *const T, psz_stream_name_: ?[*:0]const u16, pp_properties_node_: ?*?*IUnknown) HRESULT {
                return @as(*const INSNetSourceCreator.VTable, @ptrCast(self.vtable)).GetNetSourceProperties(@as(*const INSNetSourceCreator, @ptrCast(self)), psz_stream_name_, pp_properties_node_);
            }
            pub inline fn getNetSourceSharedNamespace(self: *const T, pp_shared_namespace_: ?*?*IUnknown) HRESULT {
                return @as(*const INSNetSourceCreator.VTable, @ptrCast(self.vtable)).GetNetSourceSharedNamespace(@as(*const INSNetSourceCreator, @ptrCast(self)), pp_shared_namespace_);
            }
            pub inline fn getNetSourceAdminInterface(self: *const T, psz_stream_name_: ?[*:0]const u16, p_val_: ?*VARIANT) HRESULT {
                return @as(*const INSNetSourceCreator.VTable, @ptrCast(self.vtable)).GetNetSourceAdminInterface(@as(*const INSNetSourceCreator, @ptrCast(self)), psz_stream_name_, p_val_);
            }
            pub inline fn getNumProtocolsSupported(self: *const T, pc_protocols_: ?*u32) HRESULT {
                return @as(*const INSNetSourceCreator.VTable, @ptrCast(self.vtable)).GetNumProtocolsSupported(@as(*const INSNetSourceCreator, @ptrCast(self)), pc_protocols_);
            }
            pub inline fn getProtocolName(self: *const T, dw_protocol_num_: u32, pwsz_protocol_name_: ?PWSTR, pcch_protocol_name_: ?*u16) HRESULT {
                return @as(*const INSNetSourceCreator.VTable, @ptrCast(self.vtable)).GetProtocolName(@as(*const INSNetSourceCreator, @ptrCast(self)), dw_protocol_num_, pwsz_protocol_name_, pcch_protocol_name_);
            }
            pub inline fn shutdown(self: *const T) HRESULT {
                return @as(*const INSNetSourceCreator.VTable, @ptrCast(self.vtable)).Shutdown(@as(*const INSNetSourceCreator, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMPlayerTimestampHook_Value = Guid.initString("28580dda-d98e-48d0-b7ae-69e473a02825");
pub const IID_IWMPlayerTimestampHook = &IID_IWMPlayerTimestampHook_Value;
pub const IWMPlayerTimestampHook = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MapTimestamp: *const fn (
            self: *const IWMPlayerTimestampHook,
            rt_in: i64,
            prt_out: ?*i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn mapTimestamp(self: *const T, rt_in_: i64, prt_out_: ?*i64) HRESULT {
                return @as(*const IWMPlayerTimestampHook.VTable, @ptrCast(self.vtable)).MapTimestamp(@as(*const IWMPlayerTimestampHook, @ptrCast(self)), rt_in_, prt_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMCodecAMVideoAccelerator_Value = Guid.initString("d98ee251-34e0-4a2d-9312-9b4c788d9fa1");
pub const IID_IWMCodecAMVideoAccelerator = &IID_IWMCodecAMVideoAccelerator_Value;
pub const IWMCodecAMVideoAccelerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAcceleratorInterface: *const fn (
            self: *const IWMCodecAMVideoAccelerator,
            p_i_a_m_v_a: ?*IAMVideoAccelerator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NegotiateConnection: *const fn (
            self: *const IWMCodecAMVideoAccelerator,
            p_media_type: ?*AM_MEDIA_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPlayerNotify: *const fn (
            self: *const IWMCodecAMVideoAccelerator,
            p_hook: ?*IWMPlayerTimestampHook,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAcceleratorInterface(self: *const T, p_i_a_m_v_a_: ?*IAMVideoAccelerator) HRESULT {
                return @as(*const IWMCodecAMVideoAccelerator.VTable, @ptrCast(self.vtable)).SetAcceleratorInterface(@as(*const IWMCodecAMVideoAccelerator, @ptrCast(self)), p_i_a_m_v_a_);
            }
            pub inline fn negotiateConnection(self: *const T, p_media_type_: ?*AM_MEDIA_TYPE) HRESULT {
                return @as(*const IWMCodecAMVideoAccelerator.VTable, @ptrCast(self.vtable)).NegotiateConnection(@as(*const IWMCodecAMVideoAccelerator, @ptrCast(self)), p_media_type_);
            }
            pub inline fn setPlayerNotify(self: *const T, p_hook_: ?*IWMPlayerTimestampHook) HRESULT {
                return @as(*const IWMCodecAMVideoAccelerator.VTable, @ptrCast(self.vtable)).SetPlayerNotify(@as(*const IWMCodecAMVideoAccelerator, @ptrCast(self)), p_hook_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMCodecVideoAccelerator_Value = Guid.initString("990641b0-739f-4e94-a808-9888da8f75af");
pub const IID_IWMCodecVideoAccelerator = &IID_IWMCodecVideoAccelerator_Value;
pub const IWMCodecVideoAccelerator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NegotiateConnection: *const fn (
            self: *const IWMCodecVideoAccelerator,
            p_i_a_m_v_a: ?*IAMVideoAccelerator,
            p_media_type: ?*AM_MEDIA_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPlayerNotify: *const fn (
            self: *const IWMCodecVideoAccelerator,
            p_hook: ?*IWMPlayerTimestampHook,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn negotiateConnection(self: *const T, p_i_a_m_v_a_: ?*IAMVideoAccelerator, p_media_type_: ?*AM_MEDIA_TYPE) HRESULT {
                return @as(*const IWMCodecVideoAccelerator.VTable, @ptrCast(self.vtable)).NegotiateConnection(@as(*const IWMCodecVideoAccelerator, @ptrCast(self)), p_i_a_m_v_a_, p_media_type_);
            }
            pub inline fn setPlayerNotify(self: *const T, p_hook_: ?*IWMPlayerTimestampHook) HRESULT {
                return @as(*const IWMCodecVideoAccelerator.VTable, @ptrCast(self.vtable)).SetPlayerNotify(@as(*const IWMCodecVideoAccelerator, @ptrCast(self)), p_hook_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const NETSOURCE_URLCREDPOLICY_SETTINGS = enum(i32) {
    SILENTLOGONOK = 0,
    MUSTPROMPTUSER = 1,
    ANONYMOUSONLY = 2,
};
pub const NETSOURCE_URLCREDPOLICY_SETTING_SILENTLOGONOK = NETSOURCE_URLCREDPOLICY_SETTINGS.SILENTLOGONOK;
pub const NETSOURCE_URLCREDPOLICY_SETTING_MUSTPROMPTUSER = NETSOURCE_URLCREDPOLICY_SETTINGS.MUSTPROMPTUSER;
pub const NETSOURCE_URLCREDPOLICY_SETTING_ANONYMOUSONLY = NETSOURCE_URLCREDPOLICY_SETTINGS.ANONYMOUSONLY;

const IID_IWMSInternalAdminNetSource_Value = Guid.initString("8bb23e5f-d127-4afb-8d02-ae5b66d54c78");
pub const IID_IWMSInternalAdminNetSource = &IID_IWMSInternalAdminNetSource_Value;
pub const IWMSInternalAdminNetSource = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IWMSInternalAdminNetSource,
            p_shared_namespace: ?*IUnknown,
            p_namespace_node: ?*IUnknown,
            p_net_source_creator: ?*INSNetSourceCreator,
            f_embedded_in_server: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNetSourceCreator: *const fn (
            self: *const IWMSInternalAdminNetSource,
            pp_net_source_creator: ?*?*INSNetSourceCreator,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCredentials: *const fn (
            self: *const IWMSInternalAdminNetSource,
            bstr_realm: ?BSTR,
            bstr_name: ?BSTR,
            bstr_password: ?BSTR,
            f_persist: BOOL,
            f_confirmed_good: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCredentials: *const fn (
            self: *const IWMSInternalAdminNetSource,
            bstr_realm: ?BSTR,
            pbstr_name: ?*?BSTR,
            pbstr_password: ?*?BSTR,
            pf_confirmed_good: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteCredentials: *const fn (
            self: *const IWMSInternalAdminNetSource,
            bstr_realm: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCredentialFlags: *const fn (
            self: *const IWMSInternalAdminNetSource,
            lpdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCredentialFlags: *const fn (
            self: *const IWMSInternalAdminNetSource,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindProxyForURL: *const fn (
            self: *const IWMSInternalAdminNetSource,
            bstr_protocol: ?BSTR,
            bstr_host: ?BSTR,
            pf_proxy_enabled: ?*BOOL,
            pbstr_proxy_server: ?*?BSTR,
            pdw_proxy_port: ?*u32,
            pdw_proxy_context: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterProxyFailure: *const fn (
            self: *const IWMSInternalAdminNetSource,
            hr_param: HRESULT,
            dw_proxy_context: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShutdownProxyContext: *const fn (
            self: *const IWMSInternalAdminNetSource,
            dw_proxy_context: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsUsingIE: *const fn (
            self: *const IWMSInternalAdminNetSource,
            dw_proxy_context: u32,
            pf_is_using_i_e: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_shared_namespace_: ?*IUnknown, p_namespace_node_: ?*IUnknown, p_net_source_creator_: ?*INSNetSourceCreator, f_embedded_in_server_: BOOL) HRESULT {
                return @as(*const IWMSInternalAdminNetSource.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IWMSInternalAdminNetSource, @ptrCast(self)), p_shared_namespace_, p_namespace_node_, p_net_source_creator_, f_embedded_in_server_);
            }
            pub inline fn getNetSourceCreator(self: *const T, pp_net_source_creator_: ?*?*INSNetSourceCreator) HRESULT {
                return @as(*const IWMSInternalAdminNetSource.VTable, @ptrCast(self.vtable)).GetNetSourceCreator(@as(*const IWMSInternalAdminNetSource, @ptrCast(self)), pp_net_source_creator_);
            }
            pub inline fn setCredentials(self: *const T, bstr_realm_: ?BSTR, bstr_name_: ?BSTR, bstr_password_: ?BSTR, f_persist_: BOOL, f_confirmed_good_: BOOL) HRESULT {
                return @as(*const IWMSInternalAdminNetSource.VTable, @ptrCast(self.vtable)).SetCredentials(@as(*const IWMSInternalAdminNetSource, @ptrCast(self)), bstr_realm_, bstr_name_, bstr_password_, f_persist_, f_confirmed_good_);
            }
            pub inline fn getCredentials(self: *const T, bstr_realm_: ?BSTR, pbstr_name_: ?*?BSTR, pbstr_password_: ?*?BSTR, pf_confirmed_good_: ?*BOOL) HRESULT {
                return @as(*const IWMSInternalAdminNetSource.VTable, @ptrCast(self.vtable)).GetCredentials(@as(*const IWMSInternalAdminNetSource, @ptrCast(self)), bstr_realm_, pbstr_name_, pbstr_password_, pf_confirmed_good_);
            }
            pub inline fn deleteCredentials(self: *const T, bstr_realm_: ?BSTR) HRESULT {
                return @as(*const IWMSInternalAdminNetSource.VTable, @ptrCast(self.vtable)).DeleteCredentials(@as(*const IWMSInternalAdminNetSource, @ptrCast(self)), bstr_realm_);
            }
            pub inline fn getCredentialFlags(self: *const T, lpdw_flags_: ?*u32) HRESULT {
                return @as(*const IWMSInternalAdminNetSource.VTable, @ptrCast(self.vtable)).GetCredentialFlags(@as(*const IWMSInternalAdminNetSource, @ptrCast(self)), lpdw_flags_);
            }
            pub inline fn setCredentialFlags(self: *const T, dw_flags_: u32) HRESULT {
                return @as(*const IWMSInternalAdminNetSource.VTable, @ptrCast(self.vtable)).SetCredentialFlags(@as(*const IWMSInternalAdminNetSource, @ptrCast(self)), dw_flags_);
            }
            pub inline fn findProxyForURL(self: *const T, bstr_protocol_: ?BSTR, bstr_host_: ?BSTR, pf_proxy_enabled_: ?*BOOL, pbstr_proxy_server_: ?*?BSTR, pdw_proxy_port_: ?*u32, pdw_proxy_context_: ?*u32) HRESULT {
                return @as(*const IWMSInternalAdminNetSource.VTable, @ptrCast(self.vtable)).FindProxyForURL(@as(*const IWMSInternalAdminNetSource, @ptrCast(self)), bstr_protocol_, bstr_host_, pf_proxy_enabled_, pbstr_proxy_server_, pdw_proxy_port_, pdw_proxy_context_);
            }
            pub inline fn registerProxyFailure(self: *const T, hr_param_: HRESULT, dw_proxy_context_: u32) HRESULT {
                return @as(*const IWMSInternalAdminNetSource.VTable, @ptrCast(self.vtable)).RegisterProxyFailure(@as(*const IWMSInternalAdminNetSource, @ptrCast(self)), hr_param_, dw_proxy_context_);
            }
            pub inline fn shutdownProxyContext(self: *const T, dw_proxy_context_: u32) HRESULT {
                return @as(*const IWMSInternalAdminNetSource.VTable, @ptrCast(self.vtable)).ShutdownProxyContext(@as(*const IWMSInternalAdminNetSource, @ptrCast(self)), dw_proxy_context_);
            }
            pub inline fn isUsingIE(self: *const T, dw_proxy_context_: u32, pf_is_using_i_e_: ?*BOOL) HRESULT {
                return @as(*const IWMSInternalAdminNetSource.VTable, @ptrCast(self.vtable)).IsUsingIE(@as(*const IWMSInternalAdminNetSource, @ptrCast(self)), dw_proxy_context_, pf_is_using_i_e_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMSInternalAdminNetSource2_Value = Guid.initString("e74d58c3-cf77-4b51-af17-744687c43eae");
pub const IID_IWMSInternalAdminNetSource2 = &IID_IWMSInternalAdminNetSource2_Value;
pub const IWMSInternalAdminNetSource2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetCredentialsEx: *const fn (
            self: *const IWMSInternalAdminNetSource2,
            bstr_realm: ?BSTR,
            bstr_url: ?BSTR,
            f_proxy: BOOL,
            bstr_name: ?BSTR,
            bstr_password: ?BSTR,
            f_persist: BOOL,
            f_confirmed_good: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCredentialsEx: *const fn (
            self: *const IWMSInternalAdminNetSource2,
            bstr_realm: ?BSTR,
            bstr_url: ?BSTR,
            f_proxy: BOOL,
            pdw_url_policy: ?*NETSOURCE_URLCREDPOLICY_SETTINGS,
            pbstr_name: ?*?BSTR,
            pbstr_password: ?*?BSTR,
            pf_confirmed_good: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteCredentialsEx: *const fn (
            self: *const IWMSInternalAdminNetSource2,
            bstr_realm: ?BSTR,
            bstr_url: ?BSTR,
            f_proxy: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindProxyForURLEx: *const fn (
            self: *const IWMSInternalAdminNetSource2,
            bstr_protocol: ?BSTR,
            bstr_host: ?BSTR,
            bstr_url: ?BSTR,
            pf_proxy_enabled: ?*BOOL,
            pbstr_proxy_server: ?*?BSTR,
            pdw_proxy_port: ?*u32,
            pdw_proxy_context: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setCredentialsEx(self: *const T, bstr_realm_: ?BSTR, bstr_url_: ?BSTR, f_proxy_: BOOL, bstr_name_: ?BSTR, bstr_password_: ?BSTR, f_persist_: BOOL, f_confirmed_good_: BOOL) HRESULT {
                return @as(*const IWMSInternalAdminNetSource2.VTable, @ptrCast(self.vtable)).SetCredentialsEx(@as(*const IWMSInternalAdminNetSource2, @ptrCast(self)), bstr_realm_, bstr_url_, f_proxy_, bstr_name_, bstr_password_, f_persist_, f_confirmed_good_);
            }
            pub inline fn getCredentialsEx(self: *const T, bstr_realm_: ?BSTR, bstr_url_: ?BSTR, f_proxy_: BOOL, pdw_url_policy_: ?*NETSOURCE_URLCREDPOLICY_SETTINGS, pbstr_name_: ?*?BSTR, pbstr_password_: ?*?BSTR, pf_confirmed_good_: ?*BOOL) HRESULT {
                return @as(*const IWMSInternalAdminNetSource2.VTable, @ptrCast(self.vtable)).GetCredentialsEx(@as(*const IWMSInternalAdminNetSource2, @ptrCast(self)), bstr_realm_, bstr_url_, f_proxy_, pdw_url_policy_, pbstr_name_, pbstr_password_, pf_confirmed_good_);
            }
            pub inline fn deleteCredentialsEx(self: *const T, bstr_realm_: ?BSTR, bstr_url_: ?BSTR, f_proxy_: BOOL) HRESULT {
                return @as(*const IWMSInternalAdminNetSource2.VTable, @ptrCast(self.vtable)).DeleteCredentialsEx(@as(*const IWMSInternalAdminNetSource2, @ptrCast(self)), bstr_realm_, bstr_url_, f_proxy_);
            }
            pub inline fn findProxyForURLEx(self: *const T, bstr_protocol_: ?BSTR, bstr_host_: ?BSTR, bstr_url_: ?BSTR, pf_proxy_enabled_: ?*BOOL, pbstr_proxy_server_: ?*?BSTR, pdw_proxy_port_: ?*u32, pdw_proxy_context_: ?*u32) HRESULT {
                return @as(*const IWMSInternalAdminNetSource2.VTable, @ptrCast(self.vtable)).FindProxyForURLEx(@as(*const IWMSInternalAdminNetSource2, @ptrCast(self)), bstr_protocol_, bstr_host_, bstr_url_, pf_proxy_enabled_, pbstr_proxy_server_, pdw_proxy_port_, pdw_proxy_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWMSInternalAdminNetSource3_Value = Guid.initString("6b63d08e-4590-44af-9eb3-57ff1e73bf80");
pub const IID_IWMSInternalAdminNetSource3 = &IID_IWMSInternalAdminNetSource3_Value;
pub const IWMSInternalAdminNetSource3 = extern struct {
    pub const VTable = extern struct {
        base: IWMSInternalAdminNetSource2.VTable,
        GetNetSourceCreator2: *const fn (
            self: *const IWMSInternalAdminNetSource3,
            pp_net_source_creator: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindProxyForURLEx2: *const fn (
            self: *const IWMSInternalAdminNetSource3,
            bstr_protocol: ?BSTR,
            bstr_host: ?BSTR,
            bstr_url: ?BSTR,
            pf_proxy_enabled: ?*BOOL,
            pbstr_proxy_server: ?*?BSTR,
            pdw_proxy_port: ?*u32,
            pqw_proxy_context: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterProxyFailure2: *const fn (
            self: *const IWMSInternalAdminNetSource3,
            hr_param: HRESULT,
            qw_proxy_context: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShutdownProxyContext2: *const fn (
            self: *const IWMSInternalAdminNetSource3,
            qw_proxy_context: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsUsingIE2: *const fn (
            self: *const IWMSInternalAdminNetSource3,
            qw_proxy_context: u64,
            pf_is_using_i_e: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCredentialsEx2: *const fn (
            self: *const IWMSInternalAdminNetSource3,
            bstr_realm: ?BSTR,
            bstr_url: ?BSTR,
            f_proxy: BOOL,
            bstr_name: ?BSTR,
            bstr_password: ?BSTR,
            f_persist: BOOL,
            f_confirmed_good: BOOL,
            f_clear_text_authentication: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCredentialsEx2: *const fn (
            self: *const IWMSInternalAdminNetSource3,
            bstr_realm: ?BSTR,
            bstr_url: ?BSTR,
            f_proxy: BOOL,
            f_clear_text_authentication: BOOL,
            pdw_url_policy: ?*NETSOURCE_URLCREDPOLICY_SETTINGS,
            pbstr_name: ?*?BSTR,
            pbstr_password: ?*?BSTR,
            pf_confirmed_good: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWMSInternalAdminNetSource2.MethodMixin(T);
            pub inline fn getNetSourceCreator2(self: *const T, pp_net_source_creator_: ?*?*IUnknown) HRESULT {
                return @as(*const IWMSInternalAdminNetSource3.VTable, @ptrCast(self.vtable)).GetNetSourceCreator2(@as(*const IWMSInternalAdminNetSource3, @ptrCast(self)), pp_net_source_creator_);
            }
            pub inline fn findProxyForURLEx2(self: *const T, bstr_protocol_: ?BSTR, bstr_host_: ?BSTR, bstr_url_: ?BSTR, pf_proxy_enabled_: ?*BOOL, pbstr_proxy_server_: ?*?BSTR, pdw_proxy_port_: ?*u32, pqw_proxy_context_: ?*u64) HRESULT {
                return @as(*const IWMSInternalAdminNetSource3.VTable, @ptrCast(self.vtable)).FindProxyForURLEx2(@as(*const IWMSInternalAdminNetSource3, @ptrCast(self)), bstr_protocol_, bstr_host_, bstr_url_, pf_proxy_enabled_, pbstr_proxy_server_, pdw_proxy_port_, pqw_proxy_context_);
            }
            pub inline fn registerProxyFailure2(self: *const T, hr_param_: HRESULT, qw_proxy_context_: u64) HRESULT {
                return @as(*const IWMSInternalAdminNetSource3.VTable, @ptrCast(self.vtable)).RegisterProxyFailure2(@as(*const IWMSInternalAdminNetSource3, @ptrCast(self)), hr_param_, qw_proxy_context_);
            }
            pub inline fn shutdownProxyContext2(self: *const T, qw_proxy_context_: u64) HRESULT {
                return @as(*const IWMSInternalAdminNetSource3.VTable, @ptrCast(self.vtable)).ShutdownProxyContext2(@as(*const IWMSInternalAdminNetSource3, @ptrCast(self)), qw_proxy_context_);
            }
            pub inline fn isUsingIE2(self: *const T, qw_proxy_context_: u64, pf_is_using_i_e_: ?*BOOL) HRESULT {
                return @as(*const IWMSInternalAdminNetSource3.VTable, @ptrCast(self.vtable)).IsUsingIE2(@as(*const IWMSInternalAdminNetSource3, @ptrCast(self)), qw_proxy_context_, pf_is_using_i_e_);
            }
            pub inline fn setCredentialsEx2(self: *const T, bstr_realm_: ?BSTR, bstr_url_: ?BSTR, f_proxy_: BOOL, bstr_name_: ?BSTR, bstr_password_: ?BSTR, f_persist_: BOOL, f_confirmed_good_: BOOL, f_clear_text_authentication_: BOOL) HRESULT {
                return @as(*const IWMSInternalAdminNetSource3.VTable, @ptrCast(self.vtable)).SetCredentialsEx2(@as(*const IWMSInternalAdminNetSource3, @ptrCast(self)), bstr_realm_, bstr_url_, f_proxy_, bstr_name_, bstr_password_, f_persist_, f_confirmed_good_, f_clear_text_authentication_);
            }
            pub inline fn getCredentialsEx2(self: *const T, bstr_realm_: ?BSTR, bstr_url_: ?BSTR, f_proxy_: BOOL, f_clear_text_authentication_: BOOL, pdw_url_policy_: ?*NETSOURCE_URLCREDPOLICY_SETTINGS, pbstr_name_: ?*?BSTR, pbstr_password_: ?*?BSTR, pf_confirmed_good_: ?*BOOL) HRESULT {
                return @as(*const IWMSInternalAdminNetSource3.VTable, @ptrCast(self.vtable)).GetCredentialsEx2(@as(*const IWMSInternalAdminNetSource3, @ptrCast(self)), bstr_realm_, bstr_url_, f_proxy_, f_clear_text_authentication_, pdw_url_policy_, pbstr_name_, pbstr_password_, pf_confirmed_good_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (11)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "wmvcore" fn WMIsContentProtected(
    pwsz_file_name: ?[*:0]const u16,
    pf_is_protected: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wmvcore" fn WMCreateWriter(
    p_unk_cert: ?*IUnknown,
    pp_writer: ?*?*IWMWriter,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wmvcore" fn WMCreateReader(
    p_unk_cert: ?*IUnknown,
    dw_rights: u32,
    pp_reader: ?*?*IWMReader,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wmvcore" fn WMCreateSyncReader(
    p_unk_cert: ?*IUnknown,
    dw_rights: u32,
    pp_sync_reader: ?*?*IWMSyncReader,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wmvcore" fn WMCreateEditor(
    pp_editor: ?*?*IWMMetadataEditor,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wmvcore" fn WMCreateIndexer(
    pp_indexer: ?*?*IWMIndexer,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wmvcore" fn WMCreateBackupRestorer(
    p_callback: ?*IUnknown,
    pp_backup: ?*?*IWMLicenseBackup,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wmvcore" fn WMCreateProfileManager(
    pp_profile_manager: ?*?*IWMProfileManager,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wmvcore" fn WMCreateWriterFileSink(
    pp_sink: ?*?*IWMWriterFileSink,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wmvcore" fn WMCreateWriterNetworkSink(
    pp_sink: ?*?*IWMWriterNetworkSink,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "wmvcore" fn WMCreateWriterPushSink(
    pp_sink: ?*?*IWMWriterPushSink,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (14)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const AM_MEDIA_TYPE = @import("../media/direct_show.zig").AM_MEDIA_TYPE;
const BITMAPINFOHEADER = @import("../graphics/gdi.zig").BITMAPINFOHEADER;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const HRESULT = @import("../foundation.zig").HRESULT;
const IAMVideoAccelerator = @import("../media/direct_show.zig").IAMVideoAccelerator;
const IPin = @import("../media/direct_show.zig").IPin;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const LPARAM = @import("../foundation.zig").LPARAM;
const PWSTR = @import("../foundation.zig").PWSTR;
const RECT = @import("../foundation.zig").RECT;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
