//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (325)
//--------------------------------------------------------------------------------
pub const DIRECTSOUND_VERSION = @as(u32, 1792);
pub const _FACDS = @as(u32, 2168);
pub const CLSID_DirectSound = Guid.initString("47d4d946-62e8-11cf-93bc-444553540000");
pub const CLSID_DirectSound8 = Guid.initString("3901cc3f-84b5-4fa4-ba35-aa8172b8a09b");
pub const CLSID_DirectSoundCapture = Guid.initString("b0210780-89cd-11d0-af08-00a0c925cd16");
pub const CLSID_DirectSoundCapture8 = Guid.initString("e4bcac13-7f99-4908-9a8e-74e3bf24b6e1");
pub const CLSID_DirectSoundFullDuplex = Guid.initString("fea4300c-7959-4147-b26a-2377b9e7a91d");
pub const DSDEVID_DefaultPlayback = Guid.initString("def00000-9c6d-47ed-aaf1-4dda8f2b5c03");
pub const DSDEVID_DefaultCapture = Guid.initString("def00001-9c6d-47ed-aaf1-4dda8f2b5c03");
pub const DSDEVID_DefaultVoicePlayback = Guid.initString("def00002-9c6d-47ed-aaf1-4dda8f2b5c03");
pub const DSDEVID_DefaultVoiceCapture = Guid.initString("def00003-9c6d-47ed-aaf1-4dda8f2b5c03");
pub const DSFX_LOCHARDWARE = @as(u32, 1);
pub const DSFX_LOCSOFTWARE = @as(u32, 2);
pub const DSCFX_LOCHARDWARE = @as(u32, 1);
pub const DSCFX_LOCSOFTWARE = @as(u32, 2);
pub const DSCFXR_LOCHARDWARE = @as(u32, 16);
pub const DSCFXR_LOCSOFTWARE = @as(u32, 32);
pub const GUID_All_Objects = Guid.initString("aa114de5-c262-4169-a1c8-23d698cc73b5");
pub const KSPROPERTY_SUPPORT_GET = @as(u32, 1);
pub const KSPROPERTY_SUPPORT_SET = @as(u32, 2);
pub const DSFXGARGLE_WAVE_TRIANGLE = @as(u32, 0);
pub const DSFXGARGLE_WAVE_SQUARE = @as(u32, 1);
pub const DSFXGARGLE_RATEHZ_MIN = @as(u32, 1);
pub const DSFXGARGLE_RATEHZ_MAX = @as(u32, 1000);
pub const DSFXCHORUS_WAVE_TRIANGLE = @as(u32, 0);
pub const DSFXCHORUS_WAVE_SIN = @as(u32, 1);
pub const DSFXCHORUS_WETDRYMIX_MIN = @as(f32, 0);
pub const DSFXCHORUS_WETDRYMIX_MAX = @as(f32, 100);
pub const DSFXCHORUS_DEPTH_MIN = @as(f32, 0);
pub const DSFXCHORUS_DEPTH_MAX = @as(f32, 100);
pub const DSFXCHORUS_FEEDBACK_MIN = @as(f32, -99);
pub const DSFXCHORUS_FEEDBACK_MAX = @as(f32, 99);
pub const DSFXCHORUS_FREQUENCY_MIN = @as(f32, 0);
pub const DSFXCHORUS_FREQUENCY_MAX = @as(f32, 10);
pub const DSFXCHORUS_DELAY_MIN = @as(f32, 0);
pub const DSFXCHORUS_DELAY_MAX = @as(f32, 20);
pub const DSFXCHORUS_PHASE_MIN = @as(u32, 0);
pub const DSFXCHORUS_PHASE_MAX = @as(u32, 4);
pub const DSFXCHORUS_PHASE_NEG_180 = @as(u32, 0);
pub const DSFXCHORUS_PHASE_NEG_90 = @as(u32, 1);
pub const DSFXCHORUS_PHASE_ZERO = @as(u32, 2);
pub const DSFXCHORUS_PHASE_90 = @as(u32, 3);
pub const DSFXCHORUS_PHASE_180 = @as(u32, 4);
pub const DSFXFLANGER_WAVE_TRIANGLE = @as(u32, 0);
pub const DSFXFLANGER_WAVE_SIN = @as(u32, 1);
pub const DSFXFLANGER_WETDRYMIX_MIN = @as(f32, 0);
pub const DSFXFLANGER_WETDRYMIX_MAX = @as(f32, 100);
pub const DSFXFLANGER_FREQUENCY_MIN = @as(f32, 0);
pub const DSFXFLANGER_FREQUENCY_MAX = @as(f32, 10);
pub const DSFXFLANGER_DEPTH_MIN = @as(f32, 0);
pub const DSFXFLANGER_DEPTH_MAX = @as(f32, 100);
pub const DSFXFLANGER_PHASE_MIN = @as(u32, 0);
pub const DSFXFLANGER_PHASE_MAX = @as(u32, 4);
pub const DSFXFLANGER_FEEDBACK_MIN = @as(f32, -99);
pub const DSFXFLANGER_FEEDBACK_MAX = @as(f32, 99);
pub const DSFXFLANGER_DELAY_MIN = @as(f32, 0);
pub const DSFXFLANGER_DELAY_MAX = @as(f32, 4);
pub const DSFXFLANGER_PHASE_NEG_180 = @as(u32, 0);
pub const DSFXFLANGER_PHASE_NEG_90 = @as(u32, 1);
pub const DSFXFLANGER_PHASE_ZERO = @as(u32, 2);
pub const DSFXFLANGER_PHASE_90 = @as(u32, 3);
pub const DSFXFLANGER_PHASE_180 = @as(u32, 4);
pub const DSFXECHO_WETDRYMIX_MIN = @as(f32, 0);
pub const DSFXECHO_WETDRYMIX_MAX = @as(f32, 100);
pub const DSFXECHO_FEEDBACK_MIN = @as(f32, 0);
pub const DSFXECHO_FEEDBACK_MAX = @as(f32, 100);
pub const DSFXECHO_LEFTDELAY_MIN = @as(f32, 1);
pub const DSFXECHO_LEFTDELAY_MAX = @as(f32, 2000);
pub const DSFXECHO_RIGHTDELAY_MIN = @as(f32, 1);
pub const DSFXECHO_RIGHTDELAY_MAX = @as(f32, 2000);
pub const DSFXECHO_PANDELAY_MIN = @as(u32, 0);
pub const DSFXECHO_PANDELAY_MAX = @as(u32, 1);
pub const DSFXDISTORTION_GAIN_MIN = @as(f32, -60);
pub const DSFXDISTORTION_GAIN_MAX = @as(f32, 0);
pub const DSFXDISTORTION_EDGE_MIN = @as(f32, 0);
pub const DSFXDISTORTION_EDGE_MAX = @as(f32, 100);
pub const DSFXDISTORTION_POSTEQCENTERFREQUENCY_MIN = @as(f32, 100);
pub const DSFXDISTORTION_POSTEQCENTERFREQUENCY_MAX = @as(f32, 8000);
pub const DSFXDISTORTION_POSTEQBANDWIDTH_MIN = @as(f32, 100);
pub const DSFXDISTORTION_POSTEQBANDWIDTH_MAX = @as(f32, 8000);
pub const DSFXDISTORTION_PRELOWPASSCUTOFF_MIN = @as(f32, 100);
pub const DSFXDISTORTION_PRELOWPASSCUTOFF_MAX = @as(f32, 8000);
pub const DSFXCOMPRESSOR_GAIN_MIN = @as(f32, -60);
pub const DSFXCOMPRESSOR_GAIN_MAX = @as(f32, 60);
pub const DSFXCOMPRESSOR_ATTACK_MIN = @as(f32, 1.0e-02);
pub const DSFXCOMPRESSOR_ATTACK_MAX = @as(f32, 500);
pub const DSFXCOMPRESSOR_RELEASE_MIN = @as(f32, 50);
pub const DSFXCOMPRESSOR_RELEASE_MAX = @as(f32, 3000);
pub const DSFXCOMPRESSOR_THRESHOLD_MIN = @as(f32, -60);
pub const DSFXCOMPRESSOR_THRESHOLD_MAX = @as(f32, 0);
pub const DSFXCOMPRESSOR_RATIO_MIN = @as(f32, 1);
pub const DSFXCOMPRESSOR_RATIO_MAX = @as(f32, 100);
pub const DSFXCOMPRESSOR_PREDELAY_MIN = @as(f32, 0);
pub const DSFXCOMPRESSOR_PREDELAY_MAX = @as(f32, 4);
pub const DSFXPARAMEQ_CENTER_MIN = @as(f32, 80);
pub const DSFXPARAMEQ_CENTER_MAX = @as(f32, 16000);
pub const DSFXPARAMEQ_BANDWIDTH_MIN = @as(f32, 1);
pub const DSFXPARAMEQ_BANDWIDTH_MAX = @as(f32, 36);
pub const DSFXPARAMEQ_GAIN_MIN = @as(f32, -15);
pub const DSFXPARAMEQ_GAIN_MAX = @as(f32, 15);
pub const DSFX_I3DL2REVERB_ROOM_MIN = @as(i32, -10000);
pub const DSFX_I3DL2REVERB_ROOM_MAX = @as(u32, 0);
pub const DSFX_I3DL2REVERB_ROOM_DEFAULT = @as(i32, -1000);
pub const DSFX_I3DL2REVERB_ROOMHF_MIN = @as(i32, -10000);
pub const DSFX_I3DL2REVERB_ROOMHF_MAX = @as(u32, 0);
pub const DSFX_I3DL2REVERB_ROOMHF_DEFAULT = @as(i32, -100);
pub const DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_MIN = @as(f32, 0);
pub const DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_MAX = @as(f32, 10);
pub const DSFX_I3DL2REVERB_ROOMROLLOFFFACTOR_DEFAULT = @as(f32, 0);
pub const DSFX_I3DL2REVERB_DECAYTIME_MIN = @as(f32, 1.0e-01);
pub const DSFX_I3DL2REVERB_DECAYTIME_MAX = @as(f32, 20);
pub const DSFX_I3DL2REVERB_DECAYTIME_DEFAULT = @as(f32, 1.49e+00);
pub const DSFX_I3DL2REVERB_DECAYHFRATIO_MIN = @as(f32, 1.0e-01);
pub const DSFX_I3DL2REVERB_DECAYHFRATIO_MAX = @as(f32, 2);
pub const DSFX_I3DL2REVERB_DECAYHFRATIO_DEFAULT = @as(f32, 8.3e-01);
pub const DSFX_I3DL2REVERB_REFLECTIONS_MIN = @as(i32, -10000);
pub const DSFX_I3DL2REVERB_REFLECTIONS_MAX = @as(u32, 1000);
pub const DSFX_I3DL2REVERB_REFLECTIONS_DEFAULT = @as(i32, -2602);
pub const DSFX_I3DL2REVERB_REFLECTIONSDELAY_MIN = @as(f32, 0);
pub const DSFX_I3DL2REVERB_REFLECTIONSDELAY_MAX = @as(f32, 3.0e-01);
pub const DSFX_I3DL2REVERB_REFLECTIONSDELAY_DEFAULT = @as(f32, 7.0e-03);
pub const DSFX_I3DL2REVERB_REVERB_MIN = @as(i32, -10000);
pub const DSFX_I3DL2REVERB_REVERB_MAX = @as(u32, 2000);
pub const DSFX_I3DL2REVERB_REVERB_DEFAULT = @as(u32, 200);
pub const DSFX_I3DL2REVERB_REVERBDELAY_MIN = @as(f32, 0);
pub const DSFX_I3DL2REVERB_REVERBDELAY_MAX = @as(f32, 1.0e-01);
pub const DSFX_I3DL2REVERB_REVERBDELAY_DEFAULT = @as(f32, 1.1e-02);
pub const DSFX_I3DL2REVERB_DIFFUSION_MIN = @as(f32, 0);
pub const DSFX_I3DL2REVERB_DIFFUSION_MAX = @as(f32, 100);
pub const DSFX_I3DL2REVERB_DIFFUSION_DEFAULT = @as(f32, 100);
pub const DSFX_I3DL2REVERB_DENSITY_MIN = @as(f32, 0);
pub const DSFX_I3DL2REVERB_DENSITY_MAX = @as(f32, 100);
pub const DSFX_I3DL2REVERB_DENSITY_DEFAULT = @as(f32, 100);
pub const DSFX_I3DL2REVERB_HFREFERENCE_MIN = @as(f32, 20);
pub const DSFX_I3DL2REVERB_HFREFERENCE_MAX = @as(f32, 20000);
pub const DSFX_I3DL2REVERB_HFREFERENCE_DEFAULT = @as(f32, 5000);
pub const DSFX_I3DL2REVERB_QUALITY_MIN = @as(u32, 0);
pub const DSFX_I3DL2REVERB_QUALITY_MAX = @as(u32, 3);
pub const DSFX_I3DL2REVERB_QUALITY_DEFAULT = @as(u32, 2);
pub const DSFX_WAVESREVERB_INGAIN_MIN = @as(f32, -96);
pub const DSFX_WAVESREVERB_INGAIN_MAX = @as(f32, 0);
pub const DSFX_WAVESREVERB_INGAIN_DEFAULT = @as(f32, 0);
pub const DSFX_WAVESREVERB_REVERBMIX_MIN = @as(f32, -96);
pub const DSFX_WAVESREVERB_REVERBMIX_MAX = @as(f32, 0);
pub const DSFX_WAVESREVERB_REVERBMIX_DEFAULT = @as(f32, 0);
pub const DSFX_WAVESREVERB_REVERBTIME_MIN = @as(f32, 1.0e-03);
pub const DSFX_WAVESREVERB_REVERBTIME_MAX = @as(f32, 3000);
pub const DSFX_WAVESREVERB_REVERBTIME_DEFAULT = @as(f32, 1000);
pub const DSFX_WAVESREVERB_HIGHFREQRTRATIO_MIN = @as(f32, 1.0e-03);
pub const DSFX_WAVESREVERB_HIGHFREQRTRATIO_MAX = @as(f32, 9.99e-01);
pub const DSFX_WAVESREVERB_HIGHFREQRTRATIO_DEFAULT = @as(f32, 1.0e-03);
pub const DSCFX_AEC_MODE_PASS_THROUGH = @as(u32, 0);
pub const DSCFX_AEC_MODE_HALF_DUPLEX = @as(u32, 1);
pub const DSCFX_AEC_MODE_FULL_DUPLEX = @as(u32, 2);
pub const DSCFX_AEC_STATUS_HISTORY_UNINITIALIZED = @as(u32, 0);
pub const DSCFX_AEC_STATUS_HISTORY_CONTINUOUSLY_CONVERGED = @as(u32, 1);
pub const DSCFX_AEC_STATUS_HISTORY_PREVIOUSLY_DIVERGED = @as(u32, 2);
pub const DSCFX_AEC_STATUS_CURRENTLY_CONVERGED = @as(u32, 8);
pub const DS_NO_VIRTUALIZATION = @import("../../zig.zig").typedConst(HRESULT, @as(i32, 142082058));
pub const DSCAPS_PRIMARYMONO = @as(u32, 1);
pub const DSCAPS_PRIMARYSTEREO = @as(u32, 2);
pub const DSCAPS_PRIMARY8BIT = @as(u32, 4);
pub const DSCAPS_PRIMARY16BIT = @as(u32, 8);
pub const DSCAPS_CONTINUOUSRATE = @as(u32, 16);
pub const DSCAPS_EMULDRIVER = @as(u32, 32);
pub const DSCAPS_CERTIFIED = @as(u32, 64);
pub const DSCAPS_SECONDARYMONO = @as(u32, 256);
pub const DSCAPS_SECONDARYSTEREO = @as(u32, 512);
pub const DSCAPS_SECONDARY8BIT = @as(u32, 1024);
pub const DSCAPS_SECONDARY16BIT = @as(u32, 2048);
pub const DSSCL_NORMAL = @as(u32, 1);
pub const DSSCL_PRIORITY = @as(u32, 2);
pub const DSSCL_EXCLUSIVE = @as(u32, 3);
pub const DSSCL_WRITEPRIMARY = @as(u32, 4);
pub const DSSPEAKER_DIRECTOUT = @as(u32, 0);
pub const DSSPEAKER_HEADPHONE = @as(u32, 1);
pub const DSSPEAKER_MONO = @as(u32, 2);
pub const DSSPEAKER_QUAD = @as(u32, 3);
pub const DSSPEAKER_STEREO = @as(u32, 4);
pub const DSSPEAKER_SURROUND = @as(u32, 5);
pub const DSSPEAKER_5POINT1 = @as(u32, 6);
pub const DSSPEAKER_7POINT1 = @as(u32, 7);
pub const DSSPEAKER_7POINT1_SURROUND = @as(u32, 8);
pub const DSSPEAKER_5POINT1_SURROUND = @as(u32, 9);
pub const DSSPEAKER_7POINT1_WIDE = @as(u32, 7);
pub const DSSPEAKER_5POINT1_BACK = @as(u32, 6);
pub const DSSPEAKER_GEOMETRY_MIN = @as(u32, 5);
pub const DSSPEAKER_GEOMETRY_NARROW = @as(u32, 10);
pub const DSSPEAKER_GEOMETRY_WIDE = @as(u32, 20);
pub const DSSPEAKER_GEOMETRY_MAX = @as(u32, 180);
pub const DSBCAPS_PRIMARYBUFFER = @as(u32, 1);
pub const DSBCAPS_STATIC = @as(u32, 2);
pub const DSBCAPS_LOCHARDWARE = @as(u32, 4);
pub const DSBCAPS_LOCSOFTWARE = @as(u32, 8);
pub const DSBCAPS_CTRL3D = @as(u32, 16);
pub const DSBCAPS_CTRLFREQUENCY = @as(u32, 32);
pub const DSBCAPS_CTRLPAN = @as(u32, 64);
pub const DSBCAPS_CTRLVOLUME = @as(u32, 128);
pub const DSBCAPS_CTRLPOSITIONNOTIFY = @as(u32, 256);
pub const DSBCAPS_CTRLFX = @as(u32, 512);
pub const DSBCAPS_STICKYFOCUS = @as(u32, 16384);
pub const DSBCAPS_GLOBALFOCUS = @as(u32, 32768);
pub const DSBCAPS_GETCURRENTPOSITION2 = @as(u32, 65536);
pub const DSBCAPS_MUTE3DATMAXDISTANCE = @as(u32, 131072);
pub const DSBCAPS_LOCDEFER = @as(u32, 262144);
pub const DSBCAPS_TRUEPLAYPOSITION = @as(u32, 524288);
pub const DSBPLAY_LOOPING = @as(u32, 1);
pub const DSBPLAY_LOCHARDWARE = @as(u32, 2);
pub const DSBPLAY_LOCSOFTWARE = @as(u32, 4);
pub const DSBPLAY_TERMINATEBY_TIME = @as(u32, 8);
pub const DSBPLAY_TERMINATEBY_DISTANCE = @as(u64, 16);
pub const DSBPLAY_TERMINATEBY_PRIORITY = @as(u64, 32);
pub const DSBSTATUS_PLAYING = @as(u32, 1);
pub const DSBSTATUS_BUFFERLOST = @as(u32, 2);
pub const DSBSTATUS_LOOPING = @as(u32, 4);
pub const DSBSTATUS_LOCHARDWARE = @as(u32, 8);
pub const DSBSTATUS_LOCSOFTWARE = @as(u32, 16);
pub const DSBSTATUS_TERMINATED = @as(u32, 32);
pub const DSBLOCK_FROMWRITECURSOR = @as(u32, 1);
pub const DSBLOCK_ENTIREBUFFER = @as(u32, 2);
pub const DSBFREQUENCY_ORIGINAL = @as(u32, 0);
pub const DSBFREQUENCY_MIN = @as(u32, 100);
pub const DSBFREQUENCY_MAX = @as(u32, 200000);
pub const DSBPAN_LEFT = @as(i32, -10000);
pub const DSBPAN_CENTER = @as(u32, 0);
pub const DSBPAN_RIGHT = @as(u32, 10000);
pub const DSBVOLUME_MIN = @as(i32, -10000);
pub const DSBVOLUME_MAX = @as(u32, 0);
pub const DSBSIZE_MIN = @as(u32, 4);
pub const DSBSIZE_MAX = @as(u32, 268435455);
pub const DSBSIZE_FX_MIN = @as(u32, 150);
pub const DSBNOTIFICATIONS_MAX = @as(u32, 100000);
pub const DS3DMODE_NORMAL = @as(u32, 0);
pub const DS3DMODE_HEADRELATIVE = @as(u32, 1);
pub const DS3DMODE_DISABLE = @as(u32, 2);
pub const DS3D_IMMEDIATE = @as(u32, 0);
pub const DS3D_DEFERRED = @as(u32, 1);
pub const DS3D_DEFAULTDISTANCEFACTOR = @as(f32, 1);
pub const DS3D_MINROLLOFFFACTOR = @as(f32, 0);
pub const DS3D_MAXROLLOFFFACTOR = @as(f32, 10);
pub const DS3D_DEFAULTROLLOFFFACTOR = @as(f32, 1);
pub const DS3D_MINDOPPLERFACTOR = @as(f32, 0);
pub const DS3D_MAXDOPPLERFACTOR = @as(f32, 10);
pub const DS3D_DEFAULTDOPPLERFACTOR = @as(f32, 1);
pub const DS3D_DEFAULTMINDISTANCE = @as(f32, 1);
pub const DS3D_DEFAULTMAXDISTANCE = @as(f32, 1.0e+09);
pub const DS3D_MINCONEANGLE = @as(u32, 0);
pub const DS3D_MAXCONEANGLE = @as(u32, 360);
pub const DS3D_DEFAULTCONEANGLE = @as(u32, 360);
pub const DS3D_DEFAULTCONEOUTSIDEVOLUME = @as(u32, 0);
pub const DSCCAPS_EMULDRIVER = @as(u32, 32);
pub const DSCCAPS_CERTIFIED = @as(u32, 64);
pub const DSCCAPS_MULTIPLECAPTURE = @as(u32, 1);
pub const DSCBCAPS_WAVEMAPPED = @as(u32, 2147483648);
pub const DSCBCAPS_CTRLFX = @as(u32, 512);
pub const DSCBLOCK_ENTIREBUFFER = @as(u32, 1);
pub const DSCBSTATUS_CAPTURING = @as(u32, 1);
pub const DSCBSTATUS_LOOPING = @as(u32, 2);
pub const DSCBSTART_LOOPING = @as(u32, 1);
pub const DSBPN_OFFSETSTOP = @as(u32, 4294967295);
pub const DS_CERTIFIED = @as(u32, 0);
pub const DS_UNCERTIFIED = @as(u32, 1);
pub const DS3DALG_NO_VIRTUALIZATION = Guid.initString("c241333f-1c1b-11d2-94f5-00c04fc28aca");
pub const DS3DALG_HRTF_FULL = Guid.initString("c2413340-1c1b-11d2-94f5-00c04fc28aca");
pub const DS3DALG_HRTF_LIGHT = Guid.initString("c2413342-1c1b-11d2-94f5-00c04fc28aca");
pub const GUID_DSFX_STANDARD_GARGLE = Guid.initString("dafd8210-5711-4b91-9fe3-f75b7ae279bf");
pub const GUID_DSFX_STANDARD_CHORUS = Guid.initString("efe6629c-81f7-4281-bd91-c9d604a95af6");
pub const GUID_DSFX_STANDARD_FLANGER = Guid.initString("efca3d92-dfd8-4672-a603-7420894bad98");
pub const GUID_DSFX_STANDARD_ECHO = Guid.initString("ef3e932c-d40b-4f51-8ccf-3f98f1b29d5d");
pub const GUID_DSFX_STANDARD_DISTORTION = Guid.initString("ef114c90-cd1d-484e-96e5-09cfaf912a21");
pub const GUID_DSFX_STANDARD_COMPRESSOR = Guid.initString("ef011f79-4000-406d-87af-bffb3fc39d57");
pub const GUID_DSFX_STANDARD_PARAMEQ = Guid.initString("120ced89-3bf4-4173-a132-3cb406cf3231");
pub const GUID_DSFX_STANDARD_I3DL2REVERB = Guid.initString("ef985e71-d5c7-42d4-ba4d-2d073e2e96f4");
pub const GUID_DSFX_WAVES_REVERB = Guid.initString("87fc0268-9a55-4360-95aa-004a1d9de26c");
pub const GUID_DSCFX_CLASS_AEC = Guid.initString("bf963d80-c559-11d0-8a2b-00a0c9255ac1");
pub const GUID_DSCFX_MS_AEC = Guid.initString("cdebb919-379a-488a-8765-f53cfd36de40");
pub const GUID_DSCFX_SYSTEM_AEC = Guid.initString("1c22c56d-9879-4f5b-a389-27996ddc2810");
pub const GUID_DSCFX_CLASS_NS = Guid.initString("e07f903f-62fd-4e60-8cdd-dea7236665b5");
pub const GUID_DSCFX_MS_NS = Guid.initString("11c5c73b-66e9-4ba1-a0ba-e814c6eed92d");
pub const GUID_DSCFX_SYSTEM_NS = Guid.initString("5ab0882e-7274-4516-877d-4eee99ba4fd0");
pub const DSFXR_PRESENT = @as(i32, 0);
pub const DSFXR_LOCHARDWARE = @as(i32, 1);
pub const DSFXR_LOCSOFTWARE = @as(i32, 2);
pub const DSFXR_UNALLOCATED = @as(i32, 3);
pub const DSFXR_FAILED = @as(i32, 4);
pub const DSFXR_UNKNOWN = @as(i32, 5);
pub const DSFXR_SENDLOOP = @as(i32, 6);
pub const DSFX_I3DL2_MATERIAL_PRESET_SINGLEWINDOW = @as(i32, 0);
pub const DSFX_I3DL2_MATERIAL_PRESET_DOUBLEWINDOW = @as(i32, 1);
pub const DSFX_I3DL2_MATERIAL_PRESET_THINDOOR = @as(i32, 2);
pub const DSFX_I3DL2_MATERIAL_PRESET_THICKDOOR = @as(i32, 3);
pub const DSFX_I3DL2_MATERIAL_PRESET_WOODWALL = @as(i32, 4);
pub const DSFX_I3DL2_MATERIAL_PRESET_BRICKWALL = @as(i32, 5);
pub const DSFX_I3DL2_MATERIAL_PRESET_STONEWALL = @as(i32, 6);
pub const DSFX_I3DL2_MATERIAL_PRESET_CURTAIN = @as(i32, 7);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_DEFAULT = @as(i32, 0);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_GENERIC = @as(i32, 1);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_PADDEDCELL = @as(i32, 2);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_ROOM = @as(i32, 3);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_BATHROOM = @as(i32, 4);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_LIVINGROOM = @as(i32, 5);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_STONEROOM = @as(i32, 6);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_AUDITORIUM = @as(i32, 7);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_CONCERTHALL = @as(i32, 8);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_CAVE = @as(i32, 9);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_ARENA = @as(i32, 10);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_HANGAR = @as(i32, 11);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_CARPETEDHALLWAY = @as(i32, 12);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_HALLWAY = @as(i32, 13);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_STONECORRIDOR = @as(i32, 14);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_ALLEY = @as(i32, 15);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_FOREST = @as(i32, 16);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_CITY = @as(i32, 17);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_MOUNTAINS = @as(i32, 18);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_QUARRY = @as(i32, 19);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_PLAIN = @as(i32, 20);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_PARKINGLOT = @as(i32, 21);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_SEWERPIPE = @as(i32, 22);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_UNDERWATER = @as(i32, 23);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_SMALLROOM = @as(i32, 24);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMROOM = @as(i32, 25);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEROOM = @as(i32, 26);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_MEDIUMHALL = @as(i32, 27);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_LARGEHALL = @as(i32, 28);
pub const DSFX_I3DL2_ENVIRONMENT_PRESET_PLATE = @as(i32, 29);

//--------------------------------------------------------------------------------
// Section: Types (48)
//--------------------------------------------------------------------------------
pub const DSCAPS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwMinSecondarySampleRate: u32,
    dwMaxSecondarySampleRate: u32,
    dwPrimaryBuffers: u32,
    dwMaxHwMixingAllBuffers: u32,
    dwMaxHwMixingStaticBuffers: u32,
    dwMaxHwMixingStreamingBuffers: u32,
    dwFreeHwMixingAllBuffers: u32,
    dwFreeHwMixingStaticBuffers: u32,
    dwFreeHwMixingStreamingBuffers: u32,
    dwMaxHw3DAllBuffers: u32,
    dwMaxHw3DStaticBuffers: u32,
    dwMaxHw3DStreamingBuffers: u32,
    dwFreeHw3DAllBuffers: u32,
    dwFreeHw3DStaticBuffers: u32,
    dwFreeHw3DStreamingBuffers: u32,
    dwTotalHwMemBytes: u32,
    dwFreeHwMemBytes: u32,
    dwMaxContigFreeHwMemBytes: u32,
    dwUnlockTransferRateHwBuffers: u32,
    dwPlayCpuOverheadSwBuffers: u32,
    dwReserved1: u32,
    dwReserved2: u32,
};

pub const DSBCAPS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwBufferBytes: u32,
    dwUnlockTransferRate: u32,
    dwPlayCpuOverhead: u32,
};

pub const DSEFFECTDESC = extern struct {
    dwSize: u32,
    dwFlags: u32,
    guidDSFXClass: Guid,
    dwReserved1: usize,
    dwReserved2: usize,
};

pub const DSCEFFECTDESC = extern struct {
    dwSize: u32,
    dwFlags: u32,
    guidDSCFXClass: Guid,
    guidDSCFXInstance: Guid,
    dwReserved1: u32,
    dwReserved2: u32,
};

pub const DSBUFFERDESC = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwBufferBytes: u32,
    dwReserved: u32,
    lpwfxFormat: ?*WAVEFORMATEX,
    guid3DAlgorithm: Guid,
};

pub const DSBUFFERDESC1 = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwBufferBytes: u32,
    dwReserved: u32,
    lpwfxFormat: ?*WAVEFORMATEX,
};

pub const DS3DBUFFER = extern struct {
    dwSize: u32,
    vPosition: D3DVECTOR,
    vVelocity: D3DVECTOR,
    dwInsideConeAngle: u32,
    dwOutsideConeAngle: u32,
    vConeOrientation: D3DVECTOR,
    lConeOutsideVolume: i32,
    flMinDistance: f32,
    flMaxDistance: f32,
    dwMode: u32,
};

pub const DS3DLISTENER = extern struct {
    dwSize: u32,
    vPosition: D3DVECTOR,
    vVelocity: D3DVECTOR,
    vOrientFront: D3DVECTOR,
    vOrientTop: D3DVECTOR,
    flDistanceFactor: f32,
    flRolloffFactor: f32,
    flDopplerFactor: f32,
};

pub const DSCCAPS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwFormats: u32,
    dwChannels: u32,
};

pub const DSCBUFFERDESC1 = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwBufferBytes: u32,
    dwReserved: u32,
    lpwfxFormat: ?*WAVEFORMATEX,
};

pub const DSCBUFFERDESC = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwBufferBytes: u32,
    dwReserved: u32,
    lpwfxFormat: ?*WAVEFORMATEX,
    dwFXCount: u32,
    lpDSCFXDesc: ?*DSCEFFECTDESC,
};

pub const DSCBCAPS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    dwBufferBytes: u32,
    dwReserved: u32,
};

pub const DSBPOSITIONNOTIFY = extern struct {
    dwOffset: u32,
    hEventNotify: ?HANDLE,
};

pub const LPDSENUMCALLBACKA = *const fn (
    param0: ?*Guid,
    param1: ?[*:0]const u8,
    param2: ?[*:0]const u8,
    param3: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPDSENUMCALLBACKW = *const fn (
    param0: ?*Guid,
    param1: ?[*:0]const u16,
    param2: ?[*:0]const u16,
    param3: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

const IID_IDirectSound_Value = Guid.initString("279afa83-4981-11ce-a521-0020af0be560");
pub const IID_IDirectSound = &IID_IDirectSound_Value;
pub const IDirectSound = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateSoundBuffer: *const fn (
            self: *const IDirectSound,
            pc_d_s_buffer_desc: ?*DSBUFFERDESC,
            pp_d_s_buffer: ?*?*IDirectSoundBuffer,
            p_unk_outer: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCaps: *const fn (
            self: *const IDirectSound,
            p_d_s_caps: ?*DSCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DuplicateSoundBuffer: *const fn (
            self: *const IDirectSound,
            p_d_s_buffer_original: ?*IDirectSoundBuffer,
            pp_d_s_buffer_duplicate: ?*?*IDirectSoundBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCooperativeLevel: *const fn (
            self: *const IDirectSound,
            hwnd: ?HWND,
            dw_level: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Compact: *const fn (
            self: *const IDirectSound,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpeakerConfig: *const fn (
            self: *const IDirectSound,
            pdw_speaker_config: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSpeakerConfig: *const fn (
            self: *const IDirectSound,
            dw_speaker_config: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: *const fn (
            self: *const IDirectSound,
            pc_guid_device: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createSoundBuffer(self: *const T, pc_d_s_buffer_desc_: ?*DSBUFFERDESC, pp_d_s_buffer_: ?*?*IDirectSoundBuffer, p_unk_outer_: ?*IUnknown) HRESULT {
                return @as(*const IDirectSound.VTable, @ptrCast(self.vtable)).CreateSoundBuffer(@as(*const IDirectSound, @ptrCast(self)), pc_d_s_buffer_desc_, pp_d_s_buffer_, p_unk_outer_);
            }
            pub inline fn getCaps(self: *const T, p_d_s_caps_: ?*DSCAPS) HRESULT {
                return @as(*const IDirectSound.VTable, @ptrCast(self.vtable)).GetCaps(@as(*const IDirectSound, @ptrCast(self)), p_d_s_caps_);
            }
            pub inline fn duplicateSoundBuffer(self: *const T, p_d_s_buffer_original_: ?*IDirectSoundBuffer, pp_d_s_buffer_duplicate_: ?*?*IDirectSoundBuffer) HRESULT {
                return @as(*const IDirectSound.VTable, @ptrCast(self.vtable)).DuplicateSoundBuffer(@as(*const IDirectSound, @ptrCast(self)), p_d_s_buffer_original_, pp_d_s_buffer_duplicate_);
            }
            pub inline fn setCooperativeLevel(self: *const T, hwnd_: ?HWND, dw_level_: u32) HRESULT {
                return @as(*const IDirectSound.VTable, @ptrCast(self.vtable)).SetCooperativeLevel(@as(*const IDirectSound, @ptrCast(self)), hwnd_, dw_level_);
            }
            pub inline fn compact(self: *const T) HRESULT {
                return @as(*const IDirectSound.VTable, @ptrCast(self.vtable)).Compact(@as(*const IDirectSound, @ptrCast(self)));
            }
            pub inline fn getSpeakerConfig(self: *const T, pdw_speaker_config_: ?*u32) HRESULT {
                return @as(*const IDirectSound.VTable, @ptrCast(self.vtable)).GetSpeakerConfig(@as(*const IDirectSound, @ptrCast(self)), pdw_speaker_config_);
            }
            pub inline fn setSpeakerConfig(self: *const T, dw_speaker_config_: u32) HRESULT {
                return @as(*const IDirectSound.VTable, @ptrCast(self.vtable)).SetSpeakerConfig(@as(*const IDirectSound, @ptrCast(self)), dw_speaker_config_);
            }
            pub inline fn initialize(self: *const T, pc_guid_device_: ?*const Guid) HRESULT {
                return @as(*const IDirectSound.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IDirectSound, @ptrCast(self)), pc_guid_device_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectSound8_Value = Guid.initString("c50a7e93-f395-4834-9ef6-7fa99de50966");
pub const IID_IDirectSound8 = &IID_IDirectSound8_Value;
pub const IDirectSound8 = extern struct {
    pub const VTable = extern struct {
        base: IDirectSound.VTable,
        VerifyCertification: *const fn (
            self: *const IDirectSound8,
            pdw_certified: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDirectSound.MethodMixin(T);
            pub inline fn verifyCertification(self: *const T, pdw_certified_: ?*u32) HRESULT {
                return @as(*const IDirectSound8.VTable, @ptrCast(self.vtable)).VerifyCertification(@as(*const IDirectSound8, @ptrCast(self)), pdw_certified_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectSoundBuffer_Value = Guid.initString("279afa85-4981-11ce-a521-0020af0be560");
pub const IID_IDirectSoundBuffer = &IID_IDirectSoundBuffer_Value;
pub const IDirectSoundBuffer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCaps: *const fn (
            self: *const IDirectSoundBuffer,
            p_d_s_buffer_caps: ?*DSBCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentPosition: *const fn (
            self: *const IDirectSoundBuffer,
            pdw_current_play_cursor: ?*u32,
            pdw_current_write_cursor: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormat: *const fn (
            self: *const IDirectSoundBuffer,
            // TODO: what to do with BytesParamIndex 1?
            pwfx_format: ?*WAVEFORMATEX,
            dw_size_allocated: u32,
            pdw_size_written: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVolume: *const fn (
            self: *const IDirectSoundBuffer,
            pl_volume: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPan: *const fn (
            self: *const IDirectSoundBuffer,
            pl_pan: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFrequency: *const fn (
            self: *const IDirectSoundBuffer,
            pdw_frequency: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn (
            self: *const IDirectSoundBuffer,
            pdw_status: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: *const fn (
            self: *const IDirectSoundBuffer,
            p_direct_sound: ?*IDirectSound,
            pc_d_s_buffer_desc: ?*DSBUFFERDESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Lock: *const fn (
            self: *const IDirectSoundBuffer,
            dw_offset: u32,
            dw_bytes: u32,
            ppv_audio_ptr1: ?*?*anyopaque,
            pdw_audio_bytes1: ?*u32,
            ppv_audio_ptr2: ?*?*anyopaque,
            pdw_audio_bytes2: ?*u32,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Play: *const fn (
            self: *const IDirectSoundBuffer,
            dw_reserved1: u32,
            dw_priority: u32,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCurrentPosition: *const fn (
            self: *const IDirectSoundBuffer,
            dw_new_position: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFormat: *const fn (
            self: *const IDirectSoundBuffer,
            pcfx_format: ?*WAVEFORMATEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVolume: *const fn (
            self: *const IDirectSoundBuffer,
            l_volume: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPan: *const fn (
            self: *const IDirectSoundBuffer,
            l_pan: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFrequency: *const fn (
            self: *const IDirectSoundBuffer,
            dw_frequency: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const IDirectSoundBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unlock: *const fn (
            self: *const IDirectSoundBuffer,
            // TODO: what to do with BytesParamIndex 1?
            pv_audio_ptr1: ?*anyopaque,
            dw_audio_bytes1: u32,
            // TODO: what to do with BytesParamIndex 3?
            pv_audio_ptr2: ?*anyopaque,
            dw_audio_bytes2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Restore: *const fn (
            self: *const IDirectSoundBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCaps(self: *const T, p_d_s_buffer_caps_: ?*DSBCAPS) HRESULT {
                return @as(*const IDirectSoundBuffer.VTable, @ptrCast(self.vtable)).GetCaps(@as(*const IDirectSoundBuffer, @ptrCast(self)), p_d_s_buffer_caps_);
            }
            pub inline fn getCurrentPosition(self: *const T, pdw_current_play_cursor_: ?*u32, pdw_current_write_cursor_: ?*u32) HRESULT {
                return @as(*const IDirectSoundBuffer.VTable, @ptrCast(self.vtable)).GetCurrentPosition(@as(*const IDirectSoundBuffer, @ptrCast(self)), pdw_current_play_cursor_, pdw_current_write_cursor_);
            }
            pub inline fn getFormat(self: *const T, pwfx_format_: ?*WAVEFORMATEX, dw_size_allocated_: u32, pdw_size_written_: ?*u32) HRESULT {
                return @as(*const IDirectSoundBuffer.VTable, @ptrCast(self.vtable)).GetFormat(@as(*const IDirectSoundBuffer, @ptrCast(self)), pwfx_format_, dw_size_allocated_, pdw_size_written_);
            }
            pub inline fn getVolume(self: *const T, pl_volume_: ?*i32) HRESULT {
                return @as(*const IDirectSoundBuffer.VTable, @ptrCast(self.vtable)).GetVolume(@as(*const IDirectSoundBuffer, @ptrCast(self)), pl_volume_);
            }
            pub inline fn getPan(self: *const T, pl_pan_: ?*i32) HRESULT {
                return @as(*const IDirectSoundBuffer.VTable, @ptrCast(self.vtable)).GetPan(@as(*const IDirectSoundBuffer, @ptrCast(self)), pl_pan_);
            }
            pub inline fn getFrequency(self: *const T, pdw_frequency_: ?*u32) HRESULT {
                return @as(*const IDirectSoundBuffer.VTable, @ptrCast(self.vtable)).GetFrequency(@as(*const IDirectSoundBuffer, @ptrCast(self)), pdw_frequency_);
            }
            pub inline fn getStatus(self: *const T, pdw_status_: ?*u32) HRESULT {
                return @as(*const IDirectSoundBuffer.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IDirectSoundBuffer, @ptrCast(self)), pdw_status_);
            }
            pub inline fn initialize(self: *const T, p_direct_sound_: ?*IDirectSound, pc_d_s_buffer_desc_: ?*DSBUFFERDESC) HRESULT {
                return @as(*const IDirectSoundBuffer.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IDirectSoundBuffer, @ptrCast(self)), p_direct_sound_, pc_d_s_buffer_desc_);
            }
            pub inline fn lock(self: *const T, dw_offset_: u32, dw_bytes_: u32, ppv_audio_ptr1_: ?*?*anyopaque, pdw_audio_bytes1_: ?*u32, ppv_audio_ptr2_: ?*?*anyopaque, pdw_audio_bytes2_: ?*u32, dw_flags_: u32) HRESULT {
                return @as(*const IDirectSoundBuffer.VTable, @ptrCast(self.vtable)).Lock(@as(*const IDirectSoundBuffer, @ptrCast(self)), dw_offset_, dw_bytes_, ppv_audio_ptr1_, pdw_audio_bytes1_, ppv_audio_ptr2_, pdw_audio_bytes2_, dw_flags_);
            }
            pub inline fn play(self: *const T, dw_reserved1_: u32, dw_priority_: u32, dw_flags_: u32) HRESULT {
                return @as(*const IDirectSoundBuffer.VTable, @ptrCast(self.vtable)).Play(@as(*const IDirectSoundBuffer, @ptrCast(self)), dw_reserved1_, dw_priority_, dw_flags_);
            }
            pub inline fn setCurrentPosition(self: *const T, dw_new_position_: u32) HRESULT {
                return @as(*const IDirectSoundBuffer.VTable, @ptrCast(self.vtable)).SetCurrentPosition(@as(*const IDirectSoundBuffer, @ptrCast(self)), dw_new_position_);
            }
            pub inline fn setFormat(self: *const T, pcfx_format_: ?*WAVEFORMATEX) HRESULT {
                return @as(*const IDirectSoundBuffer.VTable, @ptrCast(self.vtable)).SetFormat(@as(*const IDirectSoundBuffer, @ptrCast(self)), pcfx_format_);
            }
            pub inline fn setVolume(self: *const T, l_volume_: i32) HRESULT {
                return @as(*const IDirectSoundBuffer.VTable, @ptrCast(self.vtable)).SetVolume(@as(*const IDirectSoundBuffer, @ptrCast(self)), l_volume_);
            }
            pub inline fn setPan(self: *const T, l_pan_: i32) HRESULT {
                return @as(*const IDirectSoundBuffer.VTable, @ptrCast(self.vtable)).SetPan(@as(*const IDirectSoundBuffer, @ptrCast(self)), l_pan_);
            }
            pub inline fn setFrequency(self: *const T, dw_frequency_: u32) HRESULT {
                return @as(*const IDirectSoundBuffer.VTable, @ptrCast(self.vtable)).SetFrequency(@as(*const IDirectSoundBuffer, @ptrCast(self)), dw_frequency_);
            }
            pub inline fn stop(self: *const T) HRESULT {
                return @as(*const IDirectSoundBuffer.VTable, @ptrCast(self.vtable)).Stop(@as(*const IDirectSoundBuffer, @ptrCast(self)));
            }
            pub inline fn unlock(self: *const T, pv_audio_ptr1_: ?*anyopaque, dw_audio_bytes1_: u32, pv_audio_ptr2_: ?*anyopaque, dw_audio_bytes2_: u32) HRESULT {
                return @as(*const IDirectSoundBuffer.VTable, @ptrCast(self.vtable)).Unlock(@as(*const IDirectSoundBuffer, @ptrCast(self)), pv_audio_ptr1_, dw_audio_bytes1_, pv_audio_ptr2_, dw_audio_bytes2_);
            }
            pub inline fn restore(self: *const T) HRESULT {
                return @as(*const IDirectSoundBuffer.VTable, @ptrCast(self.vtable)).Restore(@as(*const IDirectSoundBuffer, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectSoundBuffer8_Value = Guid.initString("6825a449-7524-4d82-920f-50e36ab3ab1e");
pub const IID_IDirectSoundBuffer8 = &IID_IDirectSoundBuffer8_Value;
pub const IDirectSoundBuffer8 = extern struct {
    pub const VTable = extern struct {
        base: IDirectSoundBuffer.VTable,
        SetFX: *const fn (
            self: *const IDirectSoundBuffer8,
            dw_effects_count: u32,
            p_d_s_f_x_desc: ?[*]DSEFFECTDESC,
            pdw_result_codes: ?[*]u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AcquireResources: *const fn (
            self: *const IDirectSoundBuffer8,
            dw_flags: u32,
            dw_effects_count: u32,
            pdw_result_codes: [*]u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectInPath: *const fn (
            self: *const IDirectSoundBuffer8,
            rguid_object: ?*const Guid,
            dw_index: u32,
            rguid_interface: ?*const Guid,
            pp_object: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDirectSoundBuffer.MethodMixin(T);
            pub inline fn setFX(self: *const T, dw_effects_count_: u32, p_d_s_f_x_desc_: ?[*]DSEFFECTDESC, pdw_result_codes_: ?[*]u32) HRESULT {
                return @as(*const IDirectSoundBuffer8.VTable, @ptrCast(self.vtable)).SetFX(@as(*const IDirectSoundBuffer8, @ptrCast(self)), dw_effects_count_, p_d_s_f_x_desc_, pdw_result_codes_);
            }
            pub inline fn acquireResources(self: *const T, dw_flags_: u32, dw_effects_count_: u32, pdw_result_codes_: [*]u32) HRESULT {
                return @as(*const IDirectSoundBuffer8.VTable, @ptrCast(self.vtable)).AcquireResources(@as(*const IDirectSoundBuffer8, @ptrCast(self)), dw_flags_, dw_effects_count_, pdw_result_codes_);
            }
            pub inline fn getObjectInPath(self: *const T, rguid_object_: ?*const Guid, dw_index_: u32, rguid_interface_: ?*const Guid, pp_object_: ?*?*anyopaque) HRESULT {
                return @as(*const IDirectSoundBuffer8.VTable, @ptrCast(self.vtable)).GetObjectInPath(@as(*const IDirectSoundBuffer8, @ptrCast(self)), rguid_object_, dw_index_, rguid_interface_, pp_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectSound3DListener_Value = Guid.initString("279afa84-4981-11ce-a521-0020af0be560");
pub const IID_IDirectSound3DListener = &IID_IDirectSound3DListener_Value;
pub const IDirectSound3DListener = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAllParameters: *const fn (
            self: *const IDirectSound3DListener,
            p_listener: ?*DS3DLISTENER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDistanceFactor: *const fn (
            self: *const IDirectSound3DListener,
            pfl_distance_factor: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDopplerFactor: *const fn (
            self: *const IDirectSound3DListener,
            pfl_doppler_factor: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOrientation: *const fn (
            self: *const IDirectSound3DListener,
            pv_orient_front: ?*D3DVECTOR,
            pv_orient_top: ?*D3DVECTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPosition: *const fn (
            self: *const IDirectSound3DListener,
            pv_position: ?*D3DVECTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRolloffFactor: *const fn (
            self: *const IDirectSound3DListener,
            pfl_rolloff_factor: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVelocity: *const fn (
            self: *const IDirectSound3DListener,
            pv_velocity: ?*D3DVECTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllParameters: *const fn (
            self: *const IDirectSound3DListener,
            pc_listener: ?*DS3DLISTENER,
            dw_apply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDistanceFactor: *const fn (
            self: *const IDirectSound3DListener,
            fl_distance_factor: f32,
            dw_apply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDopplerFactor: *const fn (
            self: *const IDirectSound3DListener,
            fl_doppler_factor: f32,
            dw_apply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOrientation: *const fn (
            self: *const IDirectSound3DListener,
            x_front: f32,
            y_front: f32,
            z_front: f32,
            x_top: f32,
            y_top: f32,
            z_top: f32,
            dw_apply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPosition: *const fn (
            self: *const IDirectSound3DListener,
            x: f32,
            y: f32,
            z: f32,
            dw_apply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRolloffFactor: *const fn (
            self: *const IDirectSound3DListener,
            fl_rolloff_factor: f32,
            dw_apply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVelocity: *const fn (
            self: *const IDirectSound3DListener,
            x: f32,
            y: f32,
            z: f32,
            dw_apply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitDeferredSettings: *const fn (
            self: *const IDirectSound3DListener,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAllParameters(self: *const T, p_listener_: ?*DS3DLISTENER) HRESULT {
                return @as(*const IDirectSound3DListener.VTable, @ptrCast(self.vtable)).GetAllParameters(@as(*const IDirectSound3DListener, @ptrCast(self)), p_listener_);
            }
            pub inline fn getDistanceFactor(self: *const T, pfl_distance_factor_: ?*f32) HRESULT {
                return @as(*const IDirectSound3DListener.VTable, @ptrCast(self.vtable)).GetDistanceFactor(@as(*const IDirectSound3DListener, @ptrCast(self)), pfl_distance_factor_);
            }
            pub inline fn getDopplerFactor(self: *const T, pfl_doppler_factor_: ?*f32) HRESULT {
                return @as(*const IDirectSound3DListener.VTable, @ptrCast(self.vtable)).GetDopplerFactor(@as(*const IDirectSound3DListener, @ptrCast(self)), pfl_doppler_factor_);
            }
            pub inline fn getOrientation(self: *const T, pv_orient_front_: ?*D3DVECTOR, pv_orient_top_: ?*D3DVECTOR) HRESULT {
                return @as(*const IDirectSound3DListener.VTable, @ptrCast(self.vtable)).GetOrientation(@as(*const IDirectSound3DListener, @ptrCast(self)), pv_orient_front_, pv_orient_top_);
            }
            pub inline fn getPosition(self: *const T, pv_position_: ?*D3DVECTOR) HRESULT {
                return @as(*const IDirectSound3DListener.VTable, @ptrCast(self.vtable)).GetPosition(@as(*const IDirectSound3DListener, @ptrCast(self)), pv_position_);
            }
            pub inline fn getRolloffFactor(self: *const T, pfl_rolloff_factor_: ?*f32) HRESULT {
                return @as(*const IDirectSound3DListener.VTable, @ptrCast(self.vtable)).GetRolloffFactor(@as(*const IDirectSound3DListener, @ptrCast(self)), pfl_rolloff_factor_);
            }
            pub inline fn getVelocity(self: *const T, pv_velocity_: ?*D3DVECTOR) HRESULT {
                return @as(*const IDirectSound3DListener.VTable, @ptrCast(self.vtable)).GetVelocity(@as(*const IDirectSound3DListener, @ptrCast(self)), pv_velocity_);
            }
            pub inline fn setAllParameters(self: *const T, pc_listener_: ?*DS3DLISTENER, dw_apply_: u32) HRESULT {
                return @as(*const IDirectSound3DListener.VTable, @ptrCast(self.vtable)).SetAllParameters(@as(*const IDirectSound3DListener, @ptrCast(self)), pc_listener_, dw_apply_);
            }
            pub inline fn setDistanceFactor(self: *const T, fl_distance_factor_: f32, dw_apply_: u32) HRESULT {
                return @as(*const IDirectSound3DListener.VTable, @ptrCast(self.vtable)).SetDistanceFactor(@as(*const IDirectSound3DListener, @ptrCast(self)), fl_distance_factor_, dw_apply_);
            }
            pub inline fn setDopplerFactor(self: *const T, fl_doppler_factor_: f32, dw_apply_: u32) HRESULT {
                return @as(*const IDirectSound3DListener.VTable, @ptrCast(self.vtable)).SetDopplerFactor(@as(*const IDirectSound3DListener, @ptrCast(self)), fl_doppler_factor_, dw_apply_);
            }
            pub inline fn setOrientation(self: *const T, x_front_: f32, y_front_: f32, z_front_: f32, x_top_: f32, y_top_: f32, z_top_: f32, dw_apply_: u32) HRESULT {
                return @as(*const IDirectSound3DListener.VTable, @ptrCast(self.vtable)).SetOrientation(@as(*const IDirectSound3DListener, @ptrCast(self)), x_front_, y_front_, z_front_, x_top_, y_top_, z_top_, dw_apply_);
            }
            pub inline fn setPosition(self: *const T, x_: f32, y_: f32, z_: f32, dw_apply_: u32) HRESULT {
                return @as(*const IDirectSound3DListener.VTable, @ptrCast(self.vtable)).SetPosition(@as(*const IDirectSound3DListener, @ptrCast(self)), x_, y_, z_, dw_apply_);
            }
            pub inline fn setRolloffFactor(self: *const T, fl_rolloff_factor_: f32, dw_apply_: u32) HRESULT {
                return @as(*const IDirectSound3DListener.VTable, @ptrCast(self.vtable)).SetRolloffFactor(@as(*const IDirectSound3DListener, @ptrCast(self)), fl_rolloff_factor_, dw_apply_);
            }
            pub inline fn setVelocity(self: *const T, x_: f32, y_: f32, z_: f32, dw_apply_: u32) HRESULT {
                return @as(*const IDirectSound3DListener.VTable, @ptrCast(self.vtable)).SetVelocity(@as(*const IDirectSound3DListener, @ptrCast(self)), x_, y_, z_, dw_apply_);
            }
            pub inline fn commitDeferredSettings(self: *const T) HRESULT {
                return @as(*const IDirectSound3DListener.VTable, @ptrCast(self.vtable)).CommitDeferredSettings(@as(*const IDirectSound3DListener, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectSound3DBuffer_Value = Guid.initString("279afa86-4981-11ce-a521-0020af0be560");
pub const IID_IDirectSound3DBuffer = &IID_IDirectSound3DBuffer_Value;
pub const IDirectSound3DBuffer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAllParameters: *const fn (
            self: *const IDirectSound3DBuffer,
            p_ds3d_buffer: ?*DS3DBUFFER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConeAngles: *const fn (
            self: *const IDirectSound3DBuffer,
            pdw_inside_cone_angle: ?*u32,
            pdw_outside_cone_angle: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConeOrientation: *const fn (
            self: *const IDirectSound3DBuffer,
            pv_orientation: ?*D3DVECTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConeOutsideVolume: *const fn (
            self: *const IDirectSound3DBuffer,
            pl_cone_outside_volume: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxDistance: *const fn (
            self: *const IDirectSound3DBuffer,
            pfl_max_distance: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMinDistance: *const fn (
            self: *const IDirectSound3DBuffer,
            pfl_min_distance: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMode: *const fn (
            self: *const IDirectSound3DBuffer,
            pdw_mode: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPosition: *const fn (
            self: *const IDirectSound3DBuffer,
            pv_position: ?*D3DVECTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVelocity: *const fn (
            self: *const IDirectSound3DBuffer,
            pv_velocity: ?*D3DVECTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllParameters: *const fn (
            self: *const IDirectSound3DBuffer,
            pc_ds3d_buffer: ?*DS3DBUFFER,
            dw_apply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConeAngles: *const fn (
            self: *const IDirectSound3DBuffer,
            dw_inside_cone_angle: u32,
            dw_outside_cone_angle: u32,
            dw_apply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConeOrientation: *const fn (
            self: *const IDirectSound3DBuffer,
            x: f32,
            y: f32,
            z: f32,
            dw_apply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConeOutsideVolume: *const fn (
            self: *const IDirectSound3DBuffer,
            l_cone_outside_volume: i32,
            dw_apply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxDistance: *const fn (
            self: *const IDirectSound3DBuffer,
            fl_max_distance: f32,
            dw_apply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMinDistance: *const fn (
            self: *const IDirectSound3DBuffer,
            fl_min_distance: f32,
            dw_apply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMode: *const fn (
            self: *const IDirectSound3DBuffer,
            dw_mode: u32,
            dw_apply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPosition: *const fn (
            self: *const IDirectSound3DBuffer,
            x: f32,
            y: f32,
            z: f32,
            dw_apply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVelocity: *const fn (
            self: *const IDirectSound3DBuffer,
            x: f32,
            y: f32,
            z: f32,
            dw_apply: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAllParameters(self: *const T, p_ds3d_buffer_: ?*DS3DBUFFER) HRESULT {
                return @as(*const IDirectSound3DBuffer.VTable, @ptrCast(self.vtable)).GetAllParameters(@as(*const IDirectSound3DBuffer, @ptrCast(self)), p_ds3d_buffer_);
            }
            pub inline fn getConeAngles(self: *const T, pdw_inside_cone_angle_: ?*u32, pdw_outside_cone_angle_: ?*u32) HRESULT {
                return @as(*const IDirectSound3DBuffer.VTable, @ptrCast(self.vtable)).GetConeAngles(@as(*const IDirectSound3DBuffer, @ptrCast(self)), pdw_inside_cone_angle_, pdw_outside_cone_angle_);
            }
            pub inline fn getConeOrientation(self: *const T, pv_orientation_: ?*D3DVECTOR) HRESULT {
                return @as(*const IDirectSound3DBuffer.VTable, @ptrCast(self.vtable)).GetConeOrientation(@as(*const IDirectSound3DBuffer, @ptrCast(self)), pv_orientation_);
            }
            pub inline fn getConeOutsideVolume(self: *const T, pl_cone_outside_volume_: ?*i32) HRESULT {
                return @as(*const IDirectSound3DBuffer.VTable, @ptrCast(self.vtable)).GetConeOutsideVolume(@as(*const IDirectSound3DBuffer, @ptrCast(self)), pl_cone_outside_volume_);
            }
            pub inline fn getMaxDistance(self: *const T, pfl_max_distance_: ?*f32) HRESULT {
                return @as(*const IDirectSound3DBuffer.VTable, @ptrCast(self.vtable)).GetMaxDistance(@as(*const IDirectSound3DBuffer, @ptrCast(self)), pfl_max_distance_);
            }
            pub inline fn getMinDistance(self: *const T, pfl_min_distance_: ?*f32) HRESULT {
                return @as(*const IDirectSound3DBuffer.VTable, @ptrCast(self.vtable)).GetMinDistance(@as(*const IDirectSound3DBuffer, @ptrCast(self)), pfl_min_distance_);
            }
            pub inline fn getMode(self: *const T, pdw_mode_: ?*u32) HRESULT {
                return @as(*const IDirectSound3DBuffer.VTable, @ptrCast(self.vtable)).GetMode(@as(*const IDirectSound3DBuffer, @ptrCast(self)), pdw_mode_);
            }
            pub inline fn getPosition(self: *const T, pv_position_: ?*D3DVECTOR) HRESULT {
                return @as(*const IDirectSound3DBuffer.VTable, @ptrCast(self.vtable)).GetPosition(@as(*const IDirectSound3DBuffer, @ptrCast(self)), pv_position_);
            }
            pub inline fn getVelocity(self: *const T, pv_velocity_: ?*D3DVECTOR) HRESULT {
                return @as(*const IDirectSound3DBuffer.VTable, @ptrCast(self.vtable)).GetVelocity(@as(*const IDirectSound3DBuffer, @ptrCast(self)), pv_velocity_);
            }
            pub inline fn setAllParameters(self: *const T, pc_ds3d_buffer_: ?*DS3DBUFFER, dw_apply_: u32) HRESULT {
                return @as(*const IDirectSound3DBuffer.VTable, @ptrCast(self.vtable)).SetAllParameters(@as(*const IDirectSound3DBuffer, @ptrCast(self)), pc_ds3d_buffer_, dw_apply_);
            }
            pub inline fn setConeAngles(self: *const T, dw_inside_cone_angle_: u32, dw_outside_cone_angle_: u32, dw_apply_: u32) HRESULT {
                return @as(*const IDirectSound3DBuffer.VTable, @ptrCast(self.vtable)).SetConeAngles(@as(*const IDirectSound3DBuffer, @ptrCast(self)), dw_inside_cone_angle_, dw_outside_cone_angle_, dw_apply_);
            }
            pub inline fn setConeOrientation(self: *const T, x_: f32, y_: f32, z_: f32, dw_apply_: u32) HRESULT {
                return @as(*const IDirectSound3DBuffer.VTable, @ptrCast(self.vtable)).SetConeOrientation(@as(*const IDirectSound3DBuffer, @ptrCast(self)), x_, y_, z_, dw_apply_);
            }
            pub inline fn setConeOutsideVolume(self: *const T, l_cone_outside_volume_: i32, dw_apply_: u32) HRESULT {
                return @as(*const IDirectSound3DBuffer.VTable, @ptrCast(self.vtable)).SetConeOutsideVolume(@as(*const IDirectSound3DBuffer, @ptrCast(self)), l_cone_outside_volume_, dw_apply_);
            }
            pub inline fn setMaxDistance(self: *const T, fl_max_distance_: f32, dw_apply_: u32) HRESULT {
                return @as(*const IDirectSound3DBuffer.VTable, @ptrCast(self.vtable)).SetMaxDistance(@as(*const IDirectSound3DBuffer, @ptrCast(self)), fl_max_distance_, dw_apply_);
            }
            pub inline fn setMinDistance(self: *const T, fl_min_distance_: f32, dw_apply_: u32) HRESULT {
                return @as(*const IDirectSound3DBuffer.VTable, @ptrCast(self.vtable)).SetMinDistance(@as(*const IDirectSound3DBuffer, @ptrCast(self)), fl_min_distance_, dw_apply_);
            }
            pub inline fn setMode(self: *const T, dw_mode_: u32, dw_apply_: u32) HRESULT {
                return @as(*const IDirectSound3DBuffer.VTable, @ptrCast(self.vtable)).SetMode(@as(*const IDirectSound3DBuffer, @ptrCast(self)), dw_mode_, dw_apply_);
            }
            pub inline fn setPosition(self: *const T, x_: f32, y_: f32, z_: f32, dw_apply_: u32) HRESULT {
                return @as(*const IDirectSound3DBuffer.VTable, @ptrCast(self.vtable)).SetPosition(@as(*const IDirectSound3DBuffer, @ptrCast(self)), x_, y_, z_, dw_apply_);
            }
            pub inline fn setVelocity(self: *const T, x_: f32, y_: f32, z_: f32, dw_apply_: u32) HRESULT {
                return @as(*const IDirectSound3DBuffer.VTable, @ptrCast(self.vtable)).SetVelocity(@as(*const IDirectSound3DBuffer, @ptrCast(self)), x_, y_, z_, dw_apply_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectSoundCapture_Value = Guid.initString("b0210781-89cd-11d0-af08-00a0c925cd16");
pub const IID_IDirectSoundCapture = &IID_IDirectSoundCapture_Value;
pub const IDirectSoundCapture = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateCaptureBuffer: *const fn (
            self: *const IDirectSoundCapture,
            pc_d_s_c_buffer_desc: ?*DSCBUFFERDESC,
            pp_d_s_c_buffer: ?*?*IDirectSoundCaptureBuffer,
            p_unk_outer: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCaps: *const fn (
            self: *const IDirectSoundCapture,
            p_d_s_c_caps: ?*DSCCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: *const fn (
            self: *const IDirectSoundCapture,
            pc_guid_device: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createCaptureBuffer(self: *const T, pc_d_s_c_buffer_desc_: ?*DSCBUFFERDESC, pp_d_s_c_buffer_: ?*?*IDirectSoundCaptureBuffer, p_unk_outer_: ?*IUnknown) HRESULT {
                return @as(*const IDirectSoundCapture.VTable, @ptrCast(self.vtable)).CreateCaptureBuffer(@as(*const IDirectSoundCapture, @ptrCast(self)), pc_d_s_c_buffer_desc_, pp_d_s_c_buffer_, p_unk_outer_);
            }
            pub inline fn getCaps(self: *const T, p_d_s_c_caps_: ?*DSCCAPS) HRESULT {
                return @as(*const IDirectSoundCapture.VTable, @ptrCast(self.vtable)).GetCaps(@as(*const IDirectSoundCapture, @ptrCast(self)), p_d_s_c_caps_);
            }
            pub inline fn initialize(self: *const T, pc_guid_device_: ?*const Guid) HRESULT {
                return @as(*const IDirectSoundCapture.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IDirectSoundCapture, @ptrCast(self)), pc_guid_device_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectSoundCaptureBuffer_Value = Guid.initString("b0210782-89cd-11d0-af08-00a0c925cd16");
pub const IID_IDirectSoundCaptureBuffer = &IID_IDirectSoundCaptureBuffer_Value;
pub const IDirectSoundCaptureBuffer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCaps: *const fn (
            self: *const IDirectSoundCaptureBuffer,
            p_d_s_c_b_caps: ?*DSCBCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentPosition: *const fn (
            self: *const IDirectSoundCaptureBuffer,
            pdw_capture_position: ?*u32,
            pdw_read_position: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormat: *const fn (
            self: *const IDirectSoundCaptureBuffer,
            // TODO: what to do with BytesParamIndex 1?
            pwfx_format: ?*WAVEFORMATEX,
            dw_size_allocated: u32,
            pdw_size_written: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn (
            self: *const IDirectSoundCaptureBuffer,
            pdw_status: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: *const fn (
            self: *const IDirectSoundCaptureBuffer,
            p_direct_sound_capture: ?*IDirectSoundCapture,
            pc_d_s_c_buffer_desc: ?*DSCBUFFERDESC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Lock: *const fn (
            self: *const IDirectSoundCaptureBuffer,
            dw_offset: u32,
            dw_bytes: u32,
            ppv_audio_ptr1: ?*?*anyopaque,
            pdw_audio_bytes1: ?*u32,
            ppv_audio_ptr2: ?*?*anyopaque,
            pdw_audio_bytes2: ?*u32,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Start: *const fn (
            self: *const IDirectSoundCaptureBuffer,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const IDirectSoundCaptureBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unlock: *const fn (
            self: *const IDirectSoundCaptureBuffer,
            // TODO: what to do with BytesParamIndex 1?
            pv_audio_ptr1: ?*anyopaque,
            dw_audio_bytes1: u32,
            // TODO: what to do with BytesParamIndex 3?
            pv_audio_ptr2: ?*anyopaque,
            dw_audio_bytes2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCaps(self: *const T, p_d_s_c_b_caps_: ?*DSCBCAPS) HRESULT {
                return @as(*const IDirectSoundCaptureBuffer.VTable, @ptrCast(self.vtable)).GetCaps(@as(*const IDirectSoundCaptureBuffer, @ptrCast(self)), p_d_s_c_b_caps_);
            }
            pub inline fn getCurrentPosition(self: *const T, pdw_capture_position_: ?*u32, pdw_read_position_: ?*u32) HRESULT {
                return @as(*const IDirectSoundCaptureBuffer.VTable, @ptrCast(self.vtable)).GetCurrentPosition(@as(*const IDirectSoundCaptureBuffer, @ptrCast(self)), pdw_capture_position_, pdw_read_position_);
            }
            pub inline fn getFormat(self: *const T, pwfx_format_: ?*WAVEFORMATEX, dw_size_allocated_: u32, pdw_size_written_: ?*u32) HRESULT {
                return @as(*const IDirectSoundCaptureBuffer.VTable, @ptrCast(self.vtable)).GetFormat(@as(*const IDirectSoundCaptureBuffer, @ptrCast(self)), pwfx_format_, dw_size_allocated_, pdw_size_written_);
            }
            pub inline fn getStatus(self: *const T, pdw_status_: ?*u32) HRESULT {
                return @as(*const IDirectSoundCaptureBuffer.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IDirectSoundCaptureBuffer, @ptrCast(self)), pdw_status_);
            }
            pub inline fn initialize(self: *const T, p_direct_sound_capture_: ?*IDirectSoundCapture, pc_d_s_c_buffer_desc_: ?*DSCBUFFERDESC) HRESULT {
                return @as(*const IDirectSoundCaptureBuffer.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IDirectSoundCaptureBuffer, @ptrCast(self)), p_direct_sound_capture_, pc_d_s_c_buffer_desc_);
            }
            pub inline fn lock(self: *const T, dw_offset_: u32, dw_bytes_: u32, ppv_audio_ptr1_: ?*?*anyopaque, pdw_audio_bytes1_: ?*u32, ppv_audio_ptr2_: ?*?*anyopaque, pdw_audio_bytes2_: ?*u32, dw_flags_: u32) HRESULT {
                return @as(*const IDirectSoundCaptureBuffer.VTable, @ptrCast(self.vtable)).Lock(@as(*const IDirectSoundCaptureBuffer, @ptrCast(self)), dw_offset_, dw_bytes_, ppv_audio_ptr1_, pdw_audio_bytes1_, ppv_audio_ptr2_, pdw_audio_bytes2_, dw_flags_);
            }
            pub inline fn start(self: *const T, dw_flags_: u32) HRESULT {
                return @as(*const IDirectSoundCaptureBuffer.VTable, @ptrCast(self.vtable)).Start(@as(*const IDirectSoundCaptureBuffer, @ptrCast(self)), dw_flags_);
            }
            pub inline fn stop(self: *const T) HRESULT {
                return @as(*const IDirectSoundCaptureBuffer.VTable, @ptrCast(self.vtable)).Stop(@as(*const IDirectSoundCaptureBuffer, @ptrCast(self)));
            }
            pub inline fn unlock(self: *const T, pv_audio_ptr1_: ?*anyopaque, dw_audio_bytes1_: u32, pv_audio_ptr2_: ?*anyopaque, dw_audio_bytes2_: u32) HRESULT {
                return @as(*const IDirectSoundCaptureBuffer.VTable, @ptrCast(self.vtable)).Unlock(@as(*const IDirectSoundCaptureBuffer, @ptrCast(self)), pv_audio_ptr1_, dw_audio_bytes1_, pv_audio_ptr2_, dw_audio_bytes2_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectSoundCaptureBuffer8_Value = Guid.initString("00990df4-0dbb-4872-833e-6d303e80aeb6");
pub const IID_IDirectSoundCaptureBuffer8 = &IID_IDirectSoundCaptureBuffer8_Value;
pub const IDirectSoundCaptureBuffer8 = extern struct {
    pub const VTable = extern struct {
        base: IDirectSoundCaptureBuffer.VTable,
        GetObjectInPath: *const fn (
            self: *const IDirectSoundCaptureBuffer8,
            rguid_object: ?*const Guid,
            dw_index: u32,
            rguid_interface: ?*const Guid,
            pp_object: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFXStatus: *const fn (
            self: *const IDirectSoundCaptureBuffer8,
            dw_effects_count: u32,
            pdw_f_x_status: [*]u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDirectSoundCaptureBuffer.MethodMixin(T);
            pub inline fn getObjectInPath(self: *const T, rguid_object_: ?*const Guid, dw_index_: u32, rguid_interface_: ?*const Guid, pp_object_: ?*?*anyopaque) HRESULT {
                return @as(*const IDirectSoundCaptureBuffer8.VTable, @ptrCast(self.vtable)).GetObjectInPath(@as(*const IDirectSoundCaptureBuffer8, @ptrCast(self)), rguid_object_, dw_index_, rguid_interface_, pp_object_);
            }
            pub inline fn getFXStatus(self: *const T, dw_effects_count_: u32, pdw_f_x_status_: [*]u32) HRESULT {
                return @as(*const IDirectSoundCaptureBuffer8.VTable, @ptrCast(self.vtable)).GetFXStatus(@as(*const IDirectSoundCaptureBuffer8, @ptrCast(self)), dw_effects_count_, pdw_f_x_status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectSoundNotify_Value = Guid.initString("b0210783-89cd-11d0-af08-00a0c925cd16");
pub const IID_IDirectSoundNotify = &IID_IDirectSoundNotify_Value;
pub const IDirectSoundNotify = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetNotificationPositions: *const fn (
            self: *const IDirectSoundNotify,
            dw_position_notifies: u32,
            pc_position_notifies: [*]DSBPOSITIONNOTIFY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setNotificationPositions(self: *const T, dw_position_notifies_: u32, pc_position_notifies_: [*]DSBPOSITIONNOTIFY) HRESULT {
                return @as(*const IDirectSoundNotify.VTable, @ptrCast(self.vtable)).SetNotificationPositions(@as(*const IDirectSoundNotify, @ptrCast(self)), dw_position_notifies_, pc_position_notifies_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DSFXGargle = extern struct {
    dwRateHz: u32,
    dwWaveShape: u32,
};

const IID_IDirectSoundFXGargle_Value = Guid.initString("d616f352-d622-11ce-aac5-0020af0b99a3");
pub const IID_IDirectSoundFXGargle = &IID_IDirectSoundFXGargle_Value;
pub const IDirectSoundFXGargle = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: *const fn (
            self: *const IDirectSoundFXGargle,
            pc_ds_fx_gargle: ?*DSFXGargle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: *const fn (
            self: *const IDirectSoundFXGargle,
            p_ds_fx_gargle: ?*DSFXGargle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAllParameters(self: *const T, pc_ds_fx_gargle_: ?*DSFXGargle) HRESULT {
                return @as(*const IDirectSoundFXGargle.VTable, @ptrCast(self.vtable)).SetAllParameters(@as(*const IDirectSoundFXGargle, @ptrCast(self)), pc_ds_fx_gargle_);
            }
            pub inline fn getAllParameters(self: *const T, p_ds_fx_gargle_: ?*DSFXGargle) HRESULT {
                return @as(*const IDirectSoundFXGargle.VTable, @ptrCast(self.vtable)).GetAllParameters(@as(*const IDirectSoundFXGargle, @ptrCast(self)), p_ds_fx_gargle_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DSFXChorus = extern struct {
    fWetDryMix: f32,
    fDepth: f32,
    fFeedback: f32,
    fFrequency: f32,
    lWaveform: i32,
    fDelay: f32,
    lPhase: i32,
};

const IID_IDirectSoundFXChorus_Value = Guid.initString("880842e3-145f-43e6-a934-a71806e50547");
pub const IID_IDirectSoundFXChorus = &IID_IDirectSoundFXChorus_Value;
pub const IDirectSoundFXChorus = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: *const fn (
            self: *const IDirectSoundFXChorus,
            pc_ds_fx_chorus: ?*DSFXChorus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: *const fn (
            self: *const IDirectSoundFXChorus,
            p_ds_fx_chorus: ?*DSFXChorus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAllParameters(self: *const T, pc_ds_fx_chorus_: ?*DSFXChorus) HRESULT {
                return @as(*const IDirectSoundFXChorus.VTable, @ptrCast(self.vtable)).SetAllParameters(@as(*const IDirectSoundFXChorus, @ptrCast(self)), pc_ds_fx_chorus_);
            }
            pub inline fn getAllParameters(self: *const T, p_ds_fx_chorus_: ?*DSFXChorus) HRESULT {
                return @as(*const IDirectSoundFXChorus.VTable, @ptrCast(self.vtable)).GetAllParameters(@as(*const IDirectSoundFXChorus, @ptrCast(self)), p_ds_fx_chorus_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DSFXFlanger = extern struct {
    fWetDryMix: f32,
    fDepth: f32,
    fFeedback: f32,
    fFrequency: f32,
    lWaveform: i32,
    fDelay: f32,
    lPhase: i32,
};

const IID_IDirectSoundFXFlanger_Value = Guid.initString("903e9878-2c92-4072-9b2c-ea68f5396783");
pub const IID_IDirectSoundFXFlanger = &IID_IDirectSoundFXFlanger_Value;
pub const IDirectSoundFXFlanger = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: *const fn (
            self: *const IDirectSoundFXFlanger,
            pc_ds_fx_flanger: ?*DSFXFlanger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: *const fn (
            self: *const IDirectSoundFXFlanger,
            p_ds_fx_flanger: ?*DSFXFlanger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAllParameters(self: *const T, pc_ds_fx_flanger_: ?*DSFXFlanger) HRESULT {
                return @as(*const IDirectSoundFXFlanger.VTable, @ptrCast(self.vtable)).SetAllParameters(@as(*const IDirectSoundFXFlanger, @ptrCast(self)), pc_ds_fx_flanger_);
            }
            pub inline fn getAllParameters(self: *const T, p_ds_fx_flanger_: ?*DSFXFlanger) HRESULT {
                return @as(*const IDirectSoundFXFlanger.VTable, @ptrCast(self.vtable)).GetAllParameters(@as(*const IDirectSoundFXFlanger, @ptrCast(self)), p_ds_fx_flanger_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DSFXEcho = extern struct {
    fWetDryMix: f32,
    fFeedback: f32,
    fLeftDelay: f32,
    fRightDelay: f32,
    lPanDelay: i32,
};

const IID_IDirectSoundFXEcho_Value = Guid.initString("8bd28edf-50db-4e92-a2bd-445488d1ed42");
pub const IID_IDirectSoundFXEcho = &IID_IDirectSoundFXEcho_Value;
pub const IDirectSoundFXEcho = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: *const fn (
            self: *const IDirectSoundFXEcho,
            pc_ds_fx_echo: ?*DSFXEcho,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: *const fn (
            self: *const IDirectSoundFXEcho,
            p_ds_fx_echo: ?*DSFXEcho,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAllParameters(self: *const T, pc_ds_fx_echo_: ?*DSFXEcho) HRESULT {
                return @as(*const IDirectSoundFXEcho.VTable, @ptrCast(self.vtable)).SetAllParameters(@as(*const IDirectSoundFXEcho, @ptrCast(self)), pc_ds_fx_echo_);
            }
            pub inline fn getAllParameters(self: *const T, p_ds_fx_echo_: ?*DSFXEcho) HRESULT {
                return @as(*const IDirectSoundFXEcho.VTable, @ptrCast(self.vtable)).GetAllParameters(@as(*const IDirectSoundFXEcho, @ptrCast(self)), p_ds_fx_echo_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DSFXDistortion = extern struct {
    fGain: f32,
    fEdge: f32,
    fPostEQCenterFrequency: f32,
    fPostEQBandwidth: f32,
    fPreLowpassCutoff: f32,
};

const IID_IDirectSoundFXDistortion_Value = Guid.initString("8ecf4326-455f-4d8b-bda9-8d5d3e9e3e0b");
pub const IID_IDirectSoundFXDistortion = &IID_IDirectSoundFXDistortion_Value;
pub const IDirectSoundFXDistortion = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: *const fn (
            self: *const IDirectSoundFXDistortion,
            pc_ds_fx_distortion: ?*DSFXDistortion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: *const fn (
            self: *const IDirectSoundFXDistortion,
            p_ds_fx_distortion: ?*DSFXDistortion,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAllParameters(self: *const T, pc_ds_fx_distortion_: ?*DSFXDistortion) HRESULT {
                return @as(*const IDirectSoundFXDistortion.VTable, @ptrCast(self.vtable)).SetAllParameters(@as(*const IDirectSoundFXDistortion, @ptrCast(self)), pc_ds_fx_distortion_);
            }
            pub inline fn getAllParameters(self: *const T, p_ds_fx_distortion_: ?*DSFXDistortion) HRESULT {
                return @as(*const IDirectSoundFXDistortion.VTable, @ptrCast(self.vtable)).GetAllParameters(@as(*const IDirectSoundFXDistortion, @ptrCast(self)), p_ds_fx_distortion_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DSFXCompressor = extern struct {
    fGain: f32,
    fAttack: f32,
    fRelease: f32,
    fThreshold: f32,
    fRatio: f32,
    fPredelay: f32,
};

const IID_IDirectSoundFXCompressor_Value = Guid.initString("4bbd1154-62f6-4e2c-a15c-d3b6c417f7a0");
pub const IID_IDirectSoundFXCompressor = &IID_IDirectSoundFXCompressor_Value;
pub const IDirectSoundFXCompressor = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: *const fn (
            self: *const IDirectSoundFXCompressor,
            pc_ds_fx_compressor: ?*DSFXCompressor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: *const fn (
            self: *const IDirectSoundFXCompressor,
            p_ds_fx_compressor: ?*DSFXCompressor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAllParameters(self: *const T, pc_ds_fx_compressor_: ?*DSFXCompressor) HRESULT {
                return @as(*const IDirectSoundFXCompressor.VTable, @ptrCast(self.vtable)).SetAllParameters(@as(*const IDirectSoundFXCompressor, @ptrCast(self)), pc_ds_fx_compressor_);
            }
            pub inline fn getAllParameters(self: *const T, p_ds_fx_compressor_: ?*DSFXCompressor) HRESULT {
                return @as(*const IDirectSoundFXCompressor.VTable, @ptrCast(self.vtable)).GetAllParameters(@as(*const IDirectSoundFXCompressor, @ptrCast(self)), p_ds_fx_compressor_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DSFXParamEq = extern struct {
    fCenter: f32,
    fBandwidth: f32,
    fGain: f32,
};

const IID_IDirectSoundFXParamEq_Value = Guid.initString("c03ca9fe-fe90-4204-8078-82334cd177da");
pub const IID_IDirectSoundFXParamEq = &IID_IDirectSoundFXParamEq_Value;
pub const IDirectSoundFXParamEq = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: *const fn (
            self: *const IDirectSoundFXParamEq,
            pc_ds_fx_param_eq: ?*DSFXParamEq,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: *const fn (
            self: *const IDirectSoundFXParamEq,
            p_ds_fx_param_eq: ?*DSFXParamEq,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAllParameters(self: *const T, pc_ds_fx_param_eq_: ?*DSFXParamEq) HRESULT {
                return @as(*const IDirectSoundFXParamEq.VTable, @ptrCast(self.vtable)).SetAllParameters(@as(*const IDirectSoundFXParamEq, @ptrCast(self)), pc_ds_fx_param_eq_);
            }
            pub inline fn getAllParameters(self: *const T, p_ds_fx_param_eq_: ?*DSFXParamEq) HRESULT {
                return @as(*const IDirectSoundFXParamEq.VTable, @ptrCast(self.vtable)).GetAllParameters(@as(*const IDirectSoundFXParamEq, @ptrCast(self)), p_ds_fx_param_eq_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DSFXI3DL2Reverb = extern struct {
    lRoom: i32,
    lRoomHF: i32,
    flRoomRolloffFactor: f32,
    flDecayTime: f32,
    flDecayHFRatio: f32,
    lReflections: i32,
    flReflectionsDelay: f32,
    lReverb: i32,
    flReverbDelay: f32,
    flDiffusion: f32,
    flDensity: f32,
    flHFReference: f32,
};

const IID_IDirectSoundFXI3DL2Reverb_Value = Guid.initString("4b166a6a-0d66-43f3-80e3-ee6280dee1a4");
pub const IID_IDirectSoundFXI3DL2Reverb = &IID_IDirectSoundFXI3DL2Reverb_Value;
pub const IDirectSoundFXI3DL2Reverb = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: *const fn (
            self: *const IDirectSoundFXI3DL2Reverb,
            pc_ds_fx_i3_d_l2_reverb: ?*DSFXI3DL2Reverb,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: *const fn (
            self: *const IDirectSoundFXI3DL2Reverb,
            p_ds_fx_i3_d_l2_reverb: ?*DSFXI3DL2Reverb,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPreset: *const fn (
            self: *const IDirectSoundFXI3DL2Reverb,
            dw_preset: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreset: *const fn (
            self: *const IDirectSoundFXI3DL2Reverb,
            pdw_preset: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetQuality: *const fn (
            self: *const IDirectSoundFXI3DL2Reverb,
            l_quality: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetQuality: *const fn (
            self: *const IDirectSoundFXI3DL2Reverb,
            pl_quality: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAllParameters(self: *const T, pc_ds_fx_i3_d_l2_reverb_: ?*DSFXI3DL2Reverb) HRESULT {
                return @as(*const IDirectSoundFXI3DL2Reverb.VTable, @ptrCast(self.vtable)).SetAllParameters(@as(*const IDirectSoundFXI3DL2Reverb, @ptrCast(self)), pc_ds_fx_i3_d_l2_reverb_);
            }
            pub inline fn getAllParameters(self: *const T, p_ds_fx_i3_d_l2_reverb_: ?*DSFXI3DL2Reverb) HRESULT {
                return @as(*const IDirectSoundFXI3DL2Reverb.VTable, @ptrCast(self.vtable)).GetAllParameters(@as(*const IDirectSoundFXI3DL2Reverb, @ptrCast(self)), p_ds_fx_i3_d_l2_reverb_);
            }
            pub inline fn setPreset(self: *const T, dw_preset_: u32) HRESULT {
                return @as(*const IDirectSoundFXI3DL2Reverb.VTable, @ptrCast(self.vtable)).SetPreset(@as(*const IDirectSoundFXI3DL2Reverb, @ptrCast(self)), dw_preset_);
            }
            pub inline fn getPreset(self: *const T, pdw_preset_: ?*u32) HRESULT {
                return @as(*const IDirectSoundFXI3DL2Reverb.VTable, @ptrCast(self.vtable)).GetPreset(@as(*const IDirectSoundFXI3DL2Reverb, @ptrCast(self)), pdw_preset_);
            }
            pub inline fn setQuality(self: *const T, l_quality_: i32) HRESULT {
                return @as(*const IDirectSoundFXI3DL2Reverb.VTable, @ptrCast(self.vtable)).SetQuality(@as(*const IDirectSoundFXI3DL2Reverb, @ptrCast(self)), l_quality_);
            }
            pub inline fn getQuality(self: *const T, pl_quality_: ?*i32) HRESULT {
                return @as(*const IDirectSoundFXI3DL2Reverb.VTable, @ptrCast(self.vtable)).GetQuality(@as(*const IDirectSoundFXI3DL2Reverb, @ptrCast(self)), pl_quality_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DSFXWavesReverb = extern struct {
    fInGain: f32,
    fReverbMix: f32,
    fReverbTime: f32,
    fHighFreqRTRatio: f32,
};

const IID_IDirectSoundFXWavesReverb_Value = Guid.initString("46858c3a-0dc6-45e3-b760-d4eef16cb325");
pub const IID_IDirectSoundFXWavesReverb = &IID_IDirectSoundFXWavesReverb_Value;
pub const IDirectSoundFXWavesReverb = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: *const fn (
            self: *const IDirectSoundFXWavesReverb,
            pc_ds_fx_waves_reverb: ?*DSFXWavesReverb,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: *const fn (
            self: *const IDirectSoundFXWavesReverb,
            p_ds_fx_waves_reverb: ?*DSFXWavesReverb,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAllParameters(self: *const T, pc_ds_fx_waves_reverb_: ?*DSFXWavesReverb) HRESULT {
                return @as(*const IDirectSoundFXWavesReverb.VTable, @ptrCast(self.vtable)).SetAllParameters(@as(*const IDirectSoundFXWavesReverb, @ptrCast(self)), pc_ds_fx_waves_reverb_);
            }
            pub inline fn getAllParameters(self: *const T, p_ds_fx_waves_reverb_: ?*DSFXWavesReverb) HRESULT {
                return @as(*const IDirectSoundFXWavesReverb.VTable, @ptrCast(self.vtable)).GetAllParameters(@as(*const IDirectSoundFXWavesReverb, @ptrCast(self)), p_ds_fx_waves_reverb_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DSCFXAec = extern struct {
    fEnable: BOOL,
    fNoiseFill: BOOL,
    dwMode: u32,
};

const IID_IDirectSoundCaptureFXAec_Value = Guid.initString("ad74143d-903d-4ab7-8066-28d363036d65");
pub const IID_IDirectSoundCaptureFXAec = &IID_IDirectSoundCaptureFXAec_Value;
pub const IDirectSoundCaptureFXAec = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: *const fn (
            self: *const IDirectSoundCaptureFXAec,
            p_dsc_fx_aec: ?*DSCFXAec,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: *const fn (
            self: *const IDirectSoundCaptureFXAec,
            p_dsc_fx_aec: ?*DSCFXAec,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn (
            self: *const IDirectSoundCaptureFXAec,
            pdw_status: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IDirectSoundCaptureFXAec,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAllParameters(self: *const T, p_dsc_fx_aec_: ?*DSCFXAec) HRESULT {
                return @as(*const IDirectSoundCaptureFXAec.VTable, @ptrCast(self.vtable)).SetAllParameters(@as(*const IDirectSoundCaptureFXAec, @ptrCast(self)), p_dsc_fx_aec_);
            }
            pub inline fn getAllParameters(self: *const T, p_dsc_fx_aec_: ?*DSCFXAec) HRESULT {
                return @as(*const IDirectSoundCaptureFXAec.VTable, @ptrCast(self.vtable)).GetAllParameters(@as(*const IDirectSoundCaptureFXAec, @ptrCast(self)), p_dsc_fx_aec_);
            }
            pub inline fn getStatus(self: *const T, pdw_status_: ?*u32) HRESULT {
                return @as(*const IDirectSoundCaptureFXAec.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IDirectSoundCaptureFXAec, @ptrCast(self)), pdw_status_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IDirectSoundCaptureFXAec.VTable, @ptrCast(self.vtable)).Reset(@as(*const IDirectSoundCaptureFXAec, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DSCFXNoiseSuppress = extern struct {
    fEnable: BOOL,
};

const IID_IDirectSoundCaptureFXNoiseSuppress_Value = Guid.initString("ed311e41-fbae-4175-9625-cd0854f693ca");
pub const IID_IDirectSoundCaptureFXNoiseSuppress = &IID_IDirectSoundCaptureFXNoiseSuppress_Value;
pub const IDirectSoundCaptureFXNoiseSuppress = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAllParameters: *const fn (
            self: *const IDirectSoundCaptureFXNoiseSuppress,
            pc_dsc_fx_noise_suppress: ?*DSCFXNoiseSuppress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllParameters: *const fn (
            self: *const IDirectSoundCaptureFXNoiseSuppress,
            p_dsc_fx_noise_suppress: ?*DSCFXNoiseSuppress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IDirectSoundCaptureFXNoiseSuppress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAllParameters(self: *const T, pc_dsc_fx_noise_suppress_: ?*DSCFXNoiseSuppress) HRESULT {
                return @as(*const IDirectSoundCaptureFXNoiseSuppress.VTable, @ptrCast(self.vtable)).SetAllParameters(@as(*const IDirectSoundCaptureFXNoiseSuppress, @ptrCast(self)), pc_dsc_fx_noise_suppress_);
            }
            pub inline fn getAllParameters(self: *const T, p_dsc_fx_noise_suppress_: ?*DSCFXNoiseSuppress) HRESULT {
                return @as(*const IDirectSoundCaptureFXNoiseSuppress.VTable, @ptrCast(self.vtable)).GetAllParameters(@as(*const IDirectSoundCaptureFXNoiseSuppress, @ptrCast(self)), p_dsc_fx_noise_suppress_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IDirectSoundCaptureFXNoiseSuppress.VTable, @ptrCast(self.vtable)).Reset(@as(*const IDirectSoundCaptureFXNoiseSuppress, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectSoundFullDuplex_Value = Guid.initString("edcb4c7a-daab-4216-a42e-6c50596ddc1d");
pub const IID_IDirectSoundFullDuplex = &IID_IDirectSoundFullDuplex_Value;
pub const IDirectSoundFullDuplex = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IDirectSoundFullDuplex,
            p_capture_guid: ?*const Guid,
            p_render_guid: ?*const Guid,
            lp_dsc_buffer_desc: ?*DSCBUFFERDESC,
            lp_ds_buffer_desc: ?*DSBUFFERDESC,
            h_wnd: ?HWND,
            dw_level: u32,
            lplp_direct_sound_capture_buffer8: ?*?*IDirectSoundCaptureBuffer8,
            lplp_direct_sound_buffer8: ?*?*IDirectSoundBuffer8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_capture_guid_: ?*const Guid, p_render_guid_: ?*const Guid, lp_dsc_buffer_desc_: ?*DSCBUFFERDESC, lp_ds_buffer_desc_: ?*DSBUFFERDESC, h_wnd_: ?HWND, dw_level_: u32, lplp_direct_sound_capture_buffer8_: ?*?*IDirectSoundCaptureBuffer8, lplp_direct_sound_buffer8_: ?*?*IDirectSoundBuffer8) HRESULT {
                return @as(*const IDirectSoundFullDuplex.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IDirectSoundFullDuplex, @ptrCast(self)), p_capture_guid_, p_render_guid_, lp_dsc_buffer_desc_, lp_ds_buffer_desc_, h_wnd_, dw_level_, lplp_direct_sound_capture_buffer8_, lplp_direct_sound_buffer8_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (10)
//--------------------------------------------------------------------------------
pub extern "dsound" fn DirectSoundCreate(
    pc_guid_device: ?*const Guid,
    pp_d_s: ?*?*IDirectSound,
    p_unk_outer: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dsound" fn DirectSoundEnumerateA(
    p_d_s_enum_callback: ?LPDSENUMCALLBACKA,
    p_context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dsound" fn DirectSoundEnumerateW(
    p_d_s_enum_callback: ?LPDSENUMCALLBACKW,
    p_context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dsound" fn DirectSoundCaptureCreate(
    pc_guid_device: ?*const Guid,
    pp_d_s_c: ?*?*IDirectSoundCapture,
    p_unk_outer: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dsound" fn DirectSoundCaptureEnumerateA(
    p_d_s_enum_callback: ?LPDSENUMCALLBACKA,
    p_context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dsound" fn DirectSoundCaptureEnumerateW(
    p_d_s_enum_callback: ?LPDSENUMCALLBACKW,
    p_context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dsound" fn DirectSoundCreate8(
    pc_guid_device: ?*const Guid,
    pp_d_s8: ?*?*IDirectSound8,
    p_unk_outer: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dsound" fn DirectSoundCaptureCreate8(
    pc_guid_device: ?*const Guid,
    pp_d_s_c8: ?*?*IDirectSoundCapture,
    p_unk_outer: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dsound" fn DirectSoundFullDuplexCreate(
    pc_guid_capture_device: ?*const Guid,
    pc_guid_render_device: ?*const Guid,
    pc_d_s_c_buffer_desc: ?*DSCBUFFERDESC,
    pc_d_s_buffer_desc: ?*DSBUFFERDESC,
    h_wnd: ?HWND,
    dw_level: u32,
    pp_d_s_f_d: ?*?*IDirectSoundFullDuplex,
    pp_d_s_c_buffer8: ?*?*IDirectSoundCaptureBuffer8,
    pp_d_s_buffer8: ?*?*IDirectSoundBuffer8,
    p_unk_outer: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "dsound" fn GetDeviceID(
    p_guid_src: ?*const Guid,
    p_guid_dest: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (3)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const LPDSENUMCALLBACK = thismodule.LPDSENUMCALLBACKA;
        pub const DirectSoundEnumerate = thismodule.DirectSoundEnumerateA;
        pub const DirectSoundCaptureEnumerate = thismodule.DirectSoundCaptureEnumerateA;
    },
    .wide => struct {
        pub const LPDSENUMCALLBACK = thismodule.LPDSENUMCALLBACKW;
        pub const DirectSoundEnumerate = thismodule.DirectSoundEnumerateW;
        pub const DirectSoundCaptureEnumerate = thismodule.DirectSoundCaptureEnumerateW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const LPDSENUMCALLBACK = *opaque {};
        pub const DirectSoundEnumerate = *opaque {};
        pub const DirectSoundCaptureEnumerate = *opaque {};
    } else struct {
        pub const LPDSENUMCALLBACK = @compileError("'LPDSENUMCALLBACK' requires that UNICODE be set to true or false in the root module");
        pub const DirectSoundEnumerate = @compileError("'DirectSoundEnumerate' requires that UNICODE be set to true or false in the root module");
        pub const DirectSoundCaptureEnumerate = @compileError("'DirectSoundCaptureEnumerate' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (10)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BOOL = @import("../../foundation.zig").BOOL;
const D3DVECTOR = @import("../../graphics/direct3d.zig").D3DVECTOR;
const HANDLE = @import("../../foundation.zig").HANDLE;
const HRESULT = @import("../../foundation.zig").HRESULT;
const HWND = @import("../../foundation.zig").HWND;
const IUnknown = @import("../../system/com.zig").IUnknown;
const PSTR = @import("../../foundation.zig").PSTR;
const PWSTR = @import("../../foundation.zig").PWSTR;
const WAVEFORMATEX = @import("../../media/audio.zig").WAVEFORMATEX;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "LPDSENUMCALLBACKA")) {
        _ = LPDSENUMCALLBACKA;
    }
    if (@hasDecl(@This(), "LPDSENUMCALLBACKW")) {
        _ = LPDSENUMCALLBACKW;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
