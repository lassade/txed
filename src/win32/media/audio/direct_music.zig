//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (237)
//--------------------------------------------------------------------------------
pub const DMUS_MAX_DESCRIPTION = @as(u32, 128);
pub const DMUS_MAX_DRIVER = @as(u32, 128);
pub const DMUS_EFFECT_NONE = @as(u32, 0);
pub const DMUS_EFFECT_REVERB = @as(u32, 1);
pub const DMUS_EFFECT_CHORUS = @as(u32, 2);
pub const DMUS_EFFECT_DELAY = @as(u32, 4);
pub const DMUS_PC_INPUTCLASS = @as(u32, 0);
pub const DMUS_PC_OUTPUTCLASS = @as(u32, 1);
pub const DMUS_PC_DLS = @as(u32, 1);
pub const DMUS_PC_EXTERNAL = @as(u32, 2);
pub const DMUS_PC_SOFTWARESYNTH = @as(u32, 4);
pub const DMUS_PC_MEMORYSIZEFIXED = @as(u32, 8);
pub const DMUS_PC_GMINHARDWARE = @as(u32, 16);
pub const DMUS_PC_GSINHARDWARE = @as(u32, 32);
pub const DMUS_PC_XGINHARDWARE = @as(u32, 64);
pub const DMUS_PC_DIRECTSOUND = @as(u32, 128);
pub const DMUS_PC_SHAREABLE = @as(u32, 256);
pub const DMUS_PC_DLS2 = @as(u32, 512);
pub const DMUS_PC_AUDIOPATH = @as(u32, 1024);
pub const DMUS_PC_WAVE = @as(u32, 2048);
pub const DMUS_PC_SYSTEMMEMORY = @as(u32, 2147483647);
pub const DMUS_PORT_WINMM_DRIVER = @as(u32, 0);
pub const DMUS_PORT_USER_MODE_SYNTH = @as(u32, 1);
pub const DMUS_PORT_KERNEL_MODE = @as(u32, 2);
pub const DMUS_PORTPARAMS_VOICES = @as(u32, 1);
pub const DMUS_PORTPARAMS_CHANNELGROUPS = @as(u32, 2);
pub const DMUS_PORTPARAMS_AUDIOCHANNELS = @as(u32, 4);
pub const DMUS_PORTPARAMS_SAMPLERATE = @as(u32, 8);
pub const DMUS_PORTPARAMS_EFFECTS = @as(u32, 32);
pub const DMUS_PORTPARAMS_SHARE = @as(u32, 64);
pub const DMUS_PORTPARAMS_FEATURES = @as(u32, 128);
pub const DMUS_PORT_FEATURE_AUDIOPATH = @as(u32, 1);
pub const DMUS_PORT_FEATURE_STREAMING = @as(u32, 2);
pub const DMUS_SYNTHSTATS_VOICES = @as(u32, 1);
pub const DMUS_SYNTHSTATS_TOTAL_CPU = @as(u32, 2);
pub const DMUS_SYNTHSTATS_CPU_PER_VOICE = @as(u32, 4);
pub const DMUS_SYNTHSTATS_LOST_NOTES = @as(u32, 8);
pub const DMUS_SYNTHSTATS_PEAK_VOLUME = @as(u32, 16);
pub const DMUS_SYNTHSTATS_FREE_MEMORY = @as(u32, 32);
pub const DMUS_SYNTHSTATS_SYSTEMMEMORY = @as(u32, 2147483647);
pub const DMUS_CLOCKF_GLOBAL = @as(u32, 1);
pub const DSBUSID_FIRST_SPKR_LOC = @as(u32, 0);
pub const DSBUSID_FRONT_LEFT = @as(u32, 0);
pub const DSBUSID_LEFT = @as(u32, 0);
pub const DSBUSID_FRONT_RIGHT = @as(u32, 1);
pub const DSBUSID_RIGHT = @as(u32, 1);
pub const DSBUSID_FRONT_CENTER = @as(u32, 2);
pub const DSBUSID_LOW_FREQUENCY = @as(u32, 3);
pub const DSBUSID_BACK_LEFT = @as(u32, 4);
pub const DSBUSID_BACK_RIGHT = @as(u32, 5);
pub const DSBUSID_FRONT_LEFT_OF_CENTER = @as(u32, 6);
pub const DSBUSID_FRONT_RIGHT_OF_CENTER = @as(u32, 7);
pub const DSBUSID_BACK_CENTER = @as(u32, 8);
pub const DSBUSID_SIDE_LEFT = @as(u32, 9);
pub const DSBUSID_SIDE_RIGHT = @as(u32, 10);
pub const DSBUSID_TOP_CENTER = @as(u32, 11);
pub const DSBUSID_TOP_FRONT_LEFT = @as(u32, 12);
pub const DSBUSID_TOP_FRONT_CENTER = @as(u32, 13);
pub const DSBUSID_TOP_FRONT_RIGHT = @as(u32, 14);
pub const DSBUSID_TOP_BACK_LEFT = @as(u32, 15);
pub const DSBUSID_TOP_BACK_CENTER = @as(u32, 16);
pub const DSBUSID_TOP_BACK_RIGHT = @as(u32, 17);
pub const DSBUSID_LAST_SPKR_LOC = @as(u32, 17);
pub const DSBUSID_REVERB_SEND = @as(u32, 64);
pub const DSBUSID_CHORUS_SEND = @as(u32, 65);
pub const DSBUSID_DYNAMIC_0 = @as(u32, 512);
pub const DSBUSID_NULL = @as(u32, 4294967295);
pub const DAUD_CRITICAL_VOICE_PRIORITY = @as(u32, 4026531840);
pub const DAUD_HIGH_VOICE_PRIORITY = @as(u32, 3221225472);
pub const DAUD_STANDARD_VOICE_PRIORITY = @as(u32, 2147483648);
pub const DAUD_LOW_VOICE_PRIORITY = @as(u32, 1073741824);
pub const DAUD_PERSIST_VOICE_PRIORITY = @as(u32, 268435456);
pub const DAUD_CHAN1_VOICE_PRIORITY_OFFSET = @as(u32, 14);
pub const DAUD_CHAN2_VOICE_PRIORITY_OFFSET = @as(u32, 13);
pub const DAUD_CHAN3_VOICE_PRIORITY_OFFSET = @as(u32, 12);
pub const DAUD_CHAN4_VOICE_PRIORITY_OFFSET = @as(u32, 11);
pub const DAUD_CHAN5_VOICE_PRIORITY_OFFSET = @as(u32, 10);
pub const DAUD_CHAN6_VOICE_PRIORITY_OFFSET = @as(u32, 9);
pub const DAUD_CHAN7_VOICE_PRIORITY_OFFSET = @as(u32, 8);
pub const DAUD_CHAN8_VOICE_PRIORITY_OFFSET = @as(u32, 7);
pub const DAUD_CHAN9_VOICE_PRIORITY_OFFSET = @as(u32, 6);
pub const DAUD_CHAN10_VOICE_PRIORITY_OFFSET = @as(u32, 15);
pub const DAUD_CHAN11_VOICE_PRIORITY_OFFSET = @as(u32, 5);
pub const DAUD_CHAN12_VOICE_PRIORITY_OFFSET = @as(u32, 4);
pub const DAUD_CHAN13_VOICE_PRIORITY_OFFSET = @as(u32, 3);
pub const DAUD_CHAN14_VOICE_PRIORITY_OFFSET = @as(u32, 2);
pub const DAUD_CHAN15_VOICE_PRIORITY_OFFSET = @as(u32, 1);
pub const DAUD_CHAN16_VOICE_PRIORITY_OFFSET = @as(u32, 0);
pub const CLSID_DirectMusic = Guid.initString("636b9f10-0c7d-11d1-95b2-0020afdc7421");
pub const CLSID_DirectMusicCollection = Guid.initString("480ff4b0-28b2-11d1-bef7-00c04fbf8fef");
pub const CLSID_DirectMusicSynth = Guid.initString("58c2b4d0-46e7-11d1-89ac-00a0c9054129");
pub const GUID_DMUS_PROP_GM_Hardware = Guid.initString("178f2f24-c364-11d1-a760-0000f875ac12");
pub const GUID_DMUS_PROP_GS_Hardware = Guid.initString("178f2f25-c364-11d1-a760-0000f875ac12");
pub const GUID_DMUS_PROP_XG_Hardware = Guid.initString("178f2f26-c364-11d1-a760-0000f875ac12");
pub const GUID_DMUS_PROP_XG_Capable = Guid.initString("6496aba1-61b0-11d2-afa6-00aa0024d8b6");
pub const GUID_DMUS_PROP_GS_Capable = Guid.initString("6496aba2-61b0-11d2-afa6-00aa0024d8b6");
pub const GUID_DMUS_PROP_DLS1 = Guid.initString("178f2f27-c364-11d1-a760-0000f875ac12");
pub const GUID_DMUS_PROP_DLS2 = Guid.initString("f14599e5-4689-11d2-afa6-00aa0024d8b6");
pub const GUID_DMUS_PROP_INSTRUMENT2 = Guid.initString("865fd372-9f67-11d2-872a-00600893b1bd");
pub const GUID_DMUS_PROP_SynthSink_DSOUND = Guid.initString("0aa97844-c877-11d1-870c-00600893b1bd");
pub const GUID_DMUS_PROP_SynthSink_WAVE = Guid.initString("0aa97845-c877-11d1-870c-00600893b1bd");
pub const GUID_DMUS_PROP_SampleMemorySize = Guid.initString("178f2f28-c364-11d1-a760-0000f875ac12");
pub const GUID_DMUS_PROP_SamplePlaybackRate = Guid.initString("2a91f713-a4bf-11d2-bbdf-00600833dbd8");
pub const GUID_DMUS_PROP_WriteLatency = Guid.initString("268a0fa0-60f2-11d2-afa6-00aa0024d8b6");
pub const GUID_DMUS_PROP_WritePeriod = Guid.initString("268a0fa1-60f2-11d2-afa6-00aa0024d8b6");
pub const GUID_DMUS_PROP_MemorySize = Guid.initString("178f2f28-c364-11d1-a760-0000f875ac12");
pub const GUID_DMUS_PROP_WavesReverb = Guid.initString("04cb5622-32e5-11d2-afa6-00aa0024d8b6");
pub const GUID_DMUS_PROP_Effects = Guid.initString("cda8d611-684a-11d2-871e-00600893b1bd");
pub const GUID_DMUS_PROP_LegacyCaps = Guid.initString("cfa7cdc2-00a1-11d2-aad5-0000f875ac12");
pub const GUID_DMUS_PROP_Volume = Guid.initString("fedfae25-e46e-11d1-aace-0000f875ac12");
pub const DMUS_VOLUME_MAX = @as(u32, 2000);
pub const DMUS_VOLUME_MIN = @as(i32, -20000);
pub const DMUS_EVENT_STRUCTURED = @as(u32, 1);
pub const DMUS_DOWNLOADINFO_INSTRUMENT = @as(u32, 1);
pub const DMUS_DOWNLOADINFO_WAVE = @as(u32, 2);
pub const DMUS_DOWNLOADINFO_INSTRUMENT2 = @as(u32, 3);
pub const DMUS_DOWNLOADINFO_WAVEARTICULATION = @as(u32, 4);
pub const DMUS_DOWNLOADINFO_STREAMINGWAVE = @as(u32, 5);
pub const DMUS_DOWNLOADINFO_ONESHOTWAVE = @as(u32, 6);
pub const DMUS_DEFAULT_SIZE_OFFSETTABLE = @as(u32, 1);
pub const DMUS_INSTRUMENT_GM_INSTRUMENT = @as(u32, 1);
pub const DMUS_MIN_DATA_SIZE = @as(u32, 4);
pub const CONN_SRC_NONE = @as(u32, 0);
pub const CONN_SRC_LFO = @as(u32, 1);
pub const CONN_SRC_KEYONVELOCITY = @as(u32, 2);
pub const CONN_SRC_KEYNUMBER = @as(u32, 3);
pub const CONN_SRC_EG1 = @as(u32, 4);
pub const CONN_SRC_EG2 = @as(u32, 5);
pub const CONN_SRC_PITCHWHEEL = @as(u32, 6);
pub const CONN_SRC_CC1 = @as(u32, 129);
pub const CONN_SRC_CC7 = @as(u32, 135);
pub const CONN_SRC_CC10 = @as(u32, 138);
pub const CONN_SRC_CC11 = @as(u32, 139);
pub const CONN_DST_NONE = @as(u32, 0);
pub const CONN_DST_ATTENUATION = @as(u32, 1);
pub const CONN_DST_PITCH = @as(u32, 3);
pub const CONN_DST_PAN = @as(u32, 4);
pub const CONN_DST_LFO_FREQUENCY = @as(u32, 260);
pub const CONN_DST_LFO_STARTDELAY = @as(u32, 261);
pub const CONN_DST_EG1_ATTACKTIME = @as(u32, 518);
pub const CONN_DST_EG1_DECAYTIME = @as(u32, 519);
pub const CONN_DST_EG1_RELEASETIME = @as(u32, 521);
pub const CONN_DST_EG1_SUSTAINLEVEL = @as(u32, 522);
pub const CONN_DST_EG2_ATTACKTIME = @as(u32, 778);
pub const CONN_DST_EG2_DECAYTIME = @as(u32, 779);
pub const CONN_DST_EG2_RELEASETIME = @as(u32, 781);
pub const CONN_DST_EG2_SUSTAINLEVEL = @as(u32, 782);
pub const CONN_TRN_NONE = @as(u32, 0);
pub const CONN_TRN_CONCAVE = @as(u32, 1);
pub const F_INSTRUMENT_DRUMS = @as(u32, 2147483648);
pub const F_RGN_OPTION_SELFNONEXCLUSIVE = @as(u32, 1);
pub const WAVELINK_CHANNEL_LEFT = @as(i32, 1);
pub const WAVELINK_CHANNEL_RIGHT = @as(i32, 2);
pub const F_WAVELINK_PHASE_MASTER = @as(u32, 1);
pub const POOL_CUE_NULL = @as(i32, -1);
pub const F_WSMP_NO_TRUNCATION = @as(i32, 1);
pub const F_WSMP_NO_COMPRESSION = @as(i32, 2);
pub const WLOOP_TYPE_FORWARD = @as(u32, 0);
pub const CONN_SRC_POLYPRESSURE = @as(u32, 7);
pub const CONN_SRC_CHANNELPRESSURE = @as(u32, 8);
pub const CONN_SRC_VIBRATO = @as(u32, 9);
pub const CONN_SRC_MONOPRESSURE = @as(u32, 10);
pub const CONN_SRC_CC91 = @as(u32, 219);
pub const CONN_SRC_CC93 = @as(u32, 221);
pub const CONN_DST_GAIN = @as(u32, 1);
pub const CONN_DST_KEYNUMBER = @as(u32, 5);
pub const CONN_DST_LEFT = @as(u32, 16);
pub const CONN_DST_RIGHT = @as(u32, 17);
pub const CONN_DST_CENTER = @as(u32, 18);
pub const CONN_DST_LEFTREAR = @as(u32, 19);
pub const CONN_DST_RIGHTREAR = @as(u32, 20);
pub const CONN_DST_LFE_CHANNEL = @as(u32, 21);
pub const CONN_DST_CHORUS = @as(u32, 128);
pub const CONN_DST_REVERB = @as(u32, 129);
pub const CONN_DST_VIB_FREQUENCY = @as(u32, 276);
pub const CONN_DST_VIB_STARTDELAY = @as(u32, 277);
pub const CONN_DST_EG1_DELAYTIME = @as(u32, 523);
pub const CONN_DST_EG1_HOLDTIME = @as(u32, 524);
pub const CONN_DST_EG1_SHUTDOWNTIME = @as(u32, 525);
pub const CONN_DST_EG2_DELAYTIME = @as(u32, 783);
pub const CONN_DST_EG2_HOLDTIME = @as(u32, 784);
pub const CONN_DST_FILTER_CUTOFF = @as(u32, 1280);
pub const CONN_DST_FILTER_Q = @as(u32, 1281);
pub const CONN_TRN_CONVEX = @as(u32, 2);
pub const CONN_TRN_SWITCH = @as(u32, 3);
pub const DLS_CDL_AND = @as(u32, 1);
pub const DLS_CDL_OR = @as(u32, 2);
pub const DLS_CDL_XOR = @as(u32, 3);
pub const DLS_CDL_ADD = @as(u32, 4);
pub const DLS_CDL_SUBTRACT = @as(u32, 5);
pub const DLS_CDL_MULTIPLY = @as(u32, 6);
pub const DLS_CDL_DIVIDE = @as(u32, 7);
pub const DLS_CDL_LOGICAL_AND = @as(u32, 8);
pub const DLS_CDL_LOGICAL_OR = @as(u32, 9);
pub const DLS_CDL_LT = @as(u32, 10);
pub const DLS_CDL_LE = @as(u32, 11);
pub const DLS_CDL_GT = @as(u32, 12);
pub const DLS_CDL_GE = @as(u32, 13);
pub const DLS_CDL_EQ = @as(u32, 14);
pub const DLS_CDL_NOT = @as(u32, 15);
pub const DLS_CDL_CONST = @as(u32, 16);
pub const DLS_CDL_QUERY = @as(u32, 17);
pub const DLS_CDL_QUERYSUPPORTED = @as(u32, 18);
pub const WLOOP_TYPE_RELEASE = @as(u32, 2);
pub const F_WAVELINK_MULTICHANNEL = @as(u32, 2);
pub const DLSID_GMInHardware = Guid.initString("178f2f24-c364-11d1-a760-0000f875ac12");
pub const DLSID_GSInHardware = Guid.initString("178f2f25-c364-11d1-a760-0000f875ac12");
pub const DLSID_XGInHardware = Guid.initString("178f2f26-c364-11d1-a760-0000f875ac12");
pub const DLSID_SupportsDLS1 = Guid.initString("178f2f27-c364-11d1-a760-0000f875ac12");
pub const DLSID_SupportsDLS2 = Guid.initString("f14599e5-4689-11d2-afa6-00aa0024d8b6");
pub const DLSID_SampleMemorySize = Guid.initString("178f2f28-c364-11d1-a760-0000f875ac12");
pub const DLSID_ManufacturersID = Guid.initString("b03e1181-8095-11d2-a1ef-00600833dbd8");
pub const DLSID_ProductID = Guid.initString("b03e1182-8095-11d2-a1ef-00600833dbd8");
pub const DLSID_SamplePlaybackRate = Guid.initString("2a91f713-a4bf-11d2-bbdf-00600833dbd8");
pub const REGSTR_PATH_SOFTWARESYNTHS = "Software\\Microsoft\\DirectMusic\\SoftwareSynths";
pub const REFRESH_F_LASTBUFFER = @as(u32, 1);
pub const CLSID_DirectMusicSynthSink = Guid.initString("aec17ce3-a514-11d1-afa6-00aa0024d8b6");
pub const GUID_DMUS_PROP_SetSynthSink = Guid.initString("0a3a5ba5-37b6-11d2-b9f9-0000f875ac12");
pub const GUID_DMUS_PROP_SinkUsesDSound = Guid.initString("be208857-8952-11d2-ba1c-0000f875ac12");
pub const CLSID_DirectSoundPrivate = Guid.initString("11ab3ec0-25ec-11d1-a4d8-00c04fc28aca");
pub const DSPROPSETID_DirectSoundDevice = Guid.initString("84624f82-25ec-11d1-a4d8-00c04fc28aca");
pub const DV_DVSD_NTSC_FRAMESIZE = @as(i32, 120000);
pub const DV_DVSD_PAL_FRAMESIZE = @as(i32, 144000);
pub const DV_SMCHN = @as(u32, 57344);
pub const DV_AUDIOMODE = @as(u32, 3840);
pub const DV_AUDIOSMP = @as(u32, 939524096);
pub const DV_AUDIOQU = @as(u32, 117440512);
pub const DV_NTSCPAL = @as(u32, 2097152);
pub const DV_STYPE = @as(u32, 2031616);
pub const DV_NTSC = @as(u32, 0);
pub const DV_PAL = @as(u32, 1);
pub const DV_SD = @as(u32, 0);
pub const DV_HD = @as(u32, 1);
pub const DV_SL = @as(u32, 2);
pub const DV_CAP_AUD16Bits = @as(u32, 0);
pub const DV_CAP_AUD12Bits = @as(u32, 1);
pub const SIZE_DVINFO = @as(u32, 32);

//--------------------------------------------------------------------------------
// Section: Types (74)
//--------------------------------------------------------------------------------
pub const DLSID = extern struct {
    ulData1: u32,
    usData2: u16,
    usData3: u16,
    abData4: [8]u8,
};

pub const DLSVERSION = extern struct {
    dwVersionMS: u32,
    dwVersionLS: u32,
};

pub const CONNECTION = extern struct {
    usSource: u16,
    usControl: u16,
    usDestination: u16,
    usTransform: u16,
    lScale: i32,
};

pub const CONNECTIONLIST = extern struct {
    cbSize: u32,
    cConnections: u32,
};

pub const RGNRANGE = extern struct {
    usLow: u16,
    usHigh: u16,
};

pub const MIDILOCALE = extern struct {
    ulBank: u32,
    ulInstrument: u32,
};

pub const RGNHEADER = extern struct {
    RangeKey: RGNRANGE,
    RangeVelocity: RGNRANGE,
    fusOptions: u16,
    usKeyGroup: u16,
};

pub const INSTHEADER = extern struct {
    cRegions: u32,
    Locale: MIDILOCALE,
};

pub const DLSHEADER = extern struct {
    cInstruments: u32,
};

pub const WAVELINK = extern struct {
    fusOptions: u16,
    usPhaseGroup: u16,
    ulChannel: u32,
    ulTableIndex: u32,
};

pub const POOLCUE = extern struct {
    ulOffset: u32,
};

pub const POOLTABLE = extern struct {
    cbSize: u32,
    cCues: u32,
};

pub const _rwsmp = extern struct {
    cbSize: u32,
    usUnityNote: u16,
    sFineTune: i16,
    lAttenuation: i32,
    fulOptions: u32,
    cSampleLoops: u32,
};

pub const _rloop = extern struct {
    cbSize: u32,
    ulType: u32,
    ulStart: u32,
    ulLength: u32,
};

pub const DMUS_DOWNLOADINFO = extern struct {
    dwDLType: u32,
    dwDLId: u32,
    dwNumOffsetTableEntries: u32,
    cbSize: u32,
};

pub const DMUS_OFFSETTABLE = extern struct {
    ulOffsetTable: [1]u32,
};

pub const DMUS_INSTRUMENT = extern struct {
    ulPatch: u32,
    ulFirstRegionIdx: u32,
    ulGlobalArtIdx: u32,
    ulFirstExtCkIdx: u32,
    ulCopyrightIdx: u32,
    ulFlags: u32,
};

pub const DMUS_REGION = extern struct {
    RangeKey: RGNRANGE,
    RangeVelocity: RGNRANGE,
    fusOptions: u16,
    usKeyGroup: u16,
    ulRegionArtIdx: u32,
    ulNextRegionIdx: u32,
    ulFirstExtCkIdx: u32,
    WaveLink: WAVELINK,
    WSMP: _rwsmp,
    WLOOP: [1]_rloop,
};

pub const DMUS_LFOPARAMS = extern struct {
    pcFrequency: i32,
    tcDelay: i32,
    gcVolumeScale: i32,
    pcPitchScale: i32,
    gcMWToVolume: i32,
    pcMWToPitch: i32,
};

pub const DMUS_VEGPARAMS = extern struct {
    tcAttack: i32,
    tcDecay: i32,
    ptSustain: i32,
    tcRelease: i32,
    tcVel2Attack: i32,
    tcKey2Decay: i32,
};

pub const DMUS_PEGPARAMS = extern struct {
    tcAttack: i32,
    tcDecay: i32,
    ptSustain: i32,
    tcRelease: i32,
    tcVel2Attack: i32,
    tcKey2Decay: i32,
    pcRange: i32,
};

pub const DMUS_MSCPARAMS = extern struct {
    ptDefaultPan: i32,
};

pub const DMUS_ARTICPARAMS = extern struct {
    LFO: DMUS_LFOPARAMS,
    VolEG: DMUS_VEGPARAMS,
    PitchEG: DMUS_PEGPARAMS,
    Misc: DMUS_MSCPARAMS,
};

pub const DMUS_ARTICULATION = extern struct {
    ulArt1Idx: u32,
    ulFirstExtCkIdx: u32,
};

pub const DMUS_ARTICULATION2 = extern struct {
    ulArtIdx: u32,
    ulFirstExtCkIdx: u32,
    ulNextArtIdx: u32,
};

pub const DMUS_EXTENSIONCHUNK = extern struct {
    cbSize: u32,
    ulNextExtCkIdx: u32,
    ExtCkID: u32,
    byExtCk: [4]u8,
};

pub const DMUS_COPYRIGHT = extern struct {
    cbSize: u32,
    byCopyright: [4]u8,
};

pub const DMUS_WAVEDATA = extern struct {
    cbSize: u32,
    byData: [4]u8,
};

pub const DMUS_WAVE = extern struct {
    ulFirstExtCkIdx: u32,
    ulCopyrightIdx: u32,
    ulWaveDataIdx: u32,
    WaveformatEx: WAVEFORMATEX,
};

pub const DMUS_NOTERANGE = extern struct {
    dwLowNote: u32,
    dwHighNote: u32,
};

pub const DMUS_WAVEARTDL = extern struct {
    ulDownloadIdIdx: u32,
    ulBus: u32,
    ulBuffers: u32,
    ulMasterDLId: u32,
    usOptions: u16,
};

pub const DMUS_WAVEDL = extern struct {
    cbWaveData: u32,
};

pub const DMUS_EVENTHEADER = extern struct {
    cbEvent: u32 align(4),
    dwChannelGroup: u32 align(4),
    rtDelta: i64 align(4),
    dwFlags: u32 align(4),
};

pub const DMUS_BUFFERDESC = extern struct {
    dwSize: u32,
    dwFlags: u32,
    guidBufferFormat: Guid,
    cbBuffer: u32,
};

pub const DMUS_PORTCAPS = extern struct {
    dwSize: u32,
    dwFlags: u32,
    guidPort: Guid,
    dwClass: u32,
    dwType: u32,
    dwMemorySize: u32,
    dwMaxChannelGroups: u32,
    dwMaxVoices: u32,
    dwMaxAudioChannels: u32,
    dwEffectFlags: u32,
    wszDescription: [128]u16,
};

pub const _DMUS_PORTPARAMS = extern struct {
    dwSize: u32,
    dwValidParams: u32,
    dwVoices: u32,
    dwChannelGroups: u32,
    dwAudioChannels: u32,
    dwSampleRate: u32,
    dwEffectFlags: u32,
    fShare: BOOL,
};

pub const DMUS_PORTPARAMS8 = extern struct {
    dwSize: u32,
    dwValidParams: u32,
    dwVoices: u32,
    dwChannelGroups: u32,
    dwAudioChannels: u32,
    dwSampleRate: u32,
    dwEffectFlags: u32,
    fShare: BOOL,
    dwFeatures: u32,
};

pub const DMUS_SYNTHSTATS = extern struct {
    dwSize: u32,
    dwValidStats: u32,
    dwVoices: u32,
    dwTotalCPU: u32,
    dwCPUPerVoice: u32,
    dwLostNotes: u32,
    dwFreeMemory: u32,
    lPeakVolume: i32,
};

pub const DMUS_SYNTHSTATS8 = extern struct {
    dwSize: u32,
    dwValidStats: u32,
    dwVoices: u32,
    dwTotalCPU: u32,
    dwCPUPerVoice: u32,
    dwLostNotes: u32,
    dwFreeMemory: u32,
    lPeakVolume: i32,
    dwSynthMemUse: u32,
};

pub const DMUS_WAVES_REVERB_PARAMS = extern struct {
    fInGain: f32,
    fReverbMix: f32,
    fReverbTime: f32,
    fHighFreqRTRatio: f32,
};

pub const DMUS_CLOCKTYPE = enum(i32) {
    SYSTEM = 0,
    WAVE = 1,
};
pub const DMUS_CLOCK_SYSTEM = DMUS_CLOCKTYPE.SYSTEM;
pub const DMUS_CLOCK_WAVE = DMUS_CLOCKTYPE.WAVE;

pub const DMUS_CLOCKINFO7 = extern struct {
    dwSize: u32,
    ctType: DMUS_CLOCKTYPE,
    guidClock: Guid,
    wszDescription: [128]u16,
};

pub const DMUS_CLOCKINFO8 = extern struct {
    dwSize: u32,
    ctType: DMUS_CLOCKTYPE,
    guidClock: Guid,
    wszDescription: [128]u16,
    dwFlags: u32,
};

const IID_IDirectMusic_Value = Guid.initString("6536115a-7b2d-11d2-ba18-0000f875ac12");
pub const IID_IDirectMusic = &IID_IDirectMusic_Value;
pub const IDirectMusic = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnumPort: *const fn (
            self: *const IDirectMusic,
            dw_index: u32,
            p_port_caps: ?*DMUS_PORTCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMusicBuffer: *const fn (
            self: *const IDirectMusic,
            p_buffer_desc: ?*DMUS_BUFFERDESC,
            pp_buffer: ?*?*IDirectMusicBuffer,
            p_unk_outer: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePort: *const fn (
            self: *const IDirectMusic,
            rclsid_port: ?*const Guid,
            p_port_params: ?*DMUS_PORTPARAMS8,
            pp_port: ?*?*IDirectMusicPort,
            p_unk_outer: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumMasterClock: *const fn (
            self: *const IDirectMusic,
            dw_index: u32,
            lp_clock_info: ?*DMUS_CLOCKINFO8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMasterClock: *const fn (
            self: *const IDirectMusic,
            pguid_clock: ?*Guid,
            pp_reference_clock: ?*?*IReferenceClock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMasterClock: *const fn (
            self: *const IDirectMusic,
            rguid_clock: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Activate: *const fn (
            self: *const IDirectMusic,
            f_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultPort: *const fn (
            self: *const IDirectMusic,
            pguid_port: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDirectSound: *const fn (
            self: *const IDirectMusic,
            p_direct_sound: ?*IDirectSound,
            h_wnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn enumPort(self: *const T, dw_index_: u32, p_port_caps_: ?*DMUS_PORTCAPS) HRESULT {
                return @as(*const IDirectMusic.VTable, @ptrCast(self.vtable)).EnumPort(@as(*const IDirectMusic, @ptrCast(self)), dw_index_, p_port_caps_);
            }
            pub inline fn createMusicBuffer(self: *const T, p_buffer_desc_: ?*DMUS_BUFFERDESC, pp_buffer_: ?*?*IDirectMusicBuffer, p_unk_outer_: ?*IUnknown) HRESULT {
                return @as(*const IDirectMusic.VTable, @ptrCast(self.vtable)).CreateMusicBuffer(@as(*const IDirectMusic, @ptrCast(self)), p_buffer_desc_, pp_buffer_, p_unk_outer_);
            }
            pub inline fn createPort(self: *const T, rclsid_port_: ?*const Guid, p_port_params_: ?*DMUS_PORTPARAMS8, pp_port_: ?*?*IDirectMusicPort, p_unk_outer_: ?*IUnknown) HRESULT {
                return @as(*const IDirectMusic.VTable, @ptrCast(self.vtable)).CreatePort(@as(*const IDirectMusic, @ptrCast(self)), rclsid_port_, p_port_params_, pp_port_, p_unk_outer_);
            }
            pub inline fn enumMasterClock(self: *const T, dw_index_: u32, lp_clock_info_: ?*DMUS_CLOCKINFO8) HRESULT {
                return @as(*const IDirectMusic.VTable, @ptrCast(self.vtable)).EnumMasterClock(@as(*const IDirectMusic, @ptrCast(self)), dw_index_, lp_clock_info_);
            }
            pub inline fn getMasterClock(self: *const T, pguid_clock_: ?*Guid, pp_reference_clock_: ?*?*IReferenceClock) HRESULT {
                return @as(*const IDirectMusic.VTable, @ptrCast(self.vtable)).GetMasterClock(@as(*const IDirectMusic, @ptrCast(self)), pguid_clock_, pp_reference_clock_);
            }
            pub inline fn setMasterClock(self: *const T, rguid_clock_: ?*const Guid) HRESULT {
                return @as(*const IDirectMusic.VTable, @ptrCast(self.vtable)).SetMasterClock(@as(*const IDirectMusic, @ptrCast(self)), rguid_clock_);
            }
            pub inline fn activate(self: *const T, f_enable_: BOOL) HRESULT {
                return @as(*const IDirectMusic.VTable, @ptrCast(self.vtable)).Activate(@as(*const IDirectMusic, @ptrCast(self)), f_enable_);
            }
            pub inline fn getDefaultPort(self: *const T, pguid_port_: ?*Guid) HRESULT {
                return @as(*const IDirectMusic.VTable, @ptrCast(self.vtable)).GetDefaultPort(@as(*const IDirectMusic, @ptrCast(self)), pguid_port_);
            }
            pub inline fn setDirectSound(self: *const T, p_direct_sound_: ?*IDirectSound, h_wnd_: ?HWND) HRESULT {
                return @as(*const IDirectMusic.VTable, @ptrCast(self.vtable)).SetDirectSound(@as(*const IDirectMusic, @ptrCast(self)), p_direct_sound_, h_wnd_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusic8_Value = Guid.initString("2d3629f7-813d-4939-8508-f05c6b75fd97");
pub const IID_IDirectMusic8 = &IID_IDirectMusic8_Value;
pub const IDirectMusic8 = extern struct {
    pub const VTable = extern struct {
        base: IDirectMusic.VTable,
        SetExternalMasterClock: *const fn (
            self: *const IDirectMusic8,
            p_clock: ?*IReferenceClock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDirectMusic.MethodMixin(T);
            pub inline fn setExternalMasterClock(self: *const T, p_clock_: ?*IReferenceClock) HRESULT {
                return @as(*const IDirectMusic8.VTable, @ptrCast(self.vtable)).SetExternalMasterClock(@as(*const IDirectMusic8, @ptrCast(self)), p_clock_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusicBuffer_Value = Guid.initString("d2ac2878-b39b-11d1-8704-00600893b1bd");
pub const IID_IDirectMusicBuffer = &IID_IDirectMusicBuffer_Value;
pub const IDirectMusicBuffer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Flush: *const fn (
            self: *const IDirectMusicBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TotalTime: *const fn (
            self: *const IDirectMusicBuffer,
            prt_time: ?*i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PackStructured: *const fn (
            self: *const IDirectMusicBuffer,
            rt: i64,
            dw_channel_group: u32,
            dw_channel_message: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PackUnstructured: *const fn (
            self: *const IDirectMusicBuffer,
            rt: i64,
            dw_channel_group: u32,
            cb: u32,
            lpb: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetReadPtr: *const fn (
            self: *const IDirectMusicBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextEvent: *const fn (
            self: *const IDirectMusicBuffer,
            prt: ?*i64,
            pdw_channel_group: ?*u32,
            pdw_length: ?*u32,
            pp_data: ?*?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRawBufferPtr: *const fn (
            self: *const IDirectMusicBuffer,
            pp_data: ?*?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStartTime: *const fn (
            self: *const IDirectMusicBuffer,
            prt: ?*i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUsedBytes: *const fn (
            self: *const IDirectMusicBuffer,
            pcb: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxBytes: *const fn (
            self: *const IDirectMusicBuffer,
            pcb: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBufferFormat: *const fn (
            self: *const IDirectMusicBuffer,
            p_guid_format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStartTime: *const fn (
            self: *const IDirectMusicBuffer,
            rt: i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUsedBytes: *const fn (
            self: *const IDirectMusicBuffer,
            cb: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn flush(self: *const T) HRESULT {
                return @as(*const IDirectMusicBuffer.VTable, @ptrCast(self.vtable)).Flush(@as(*const IDirectMusicBuffer, @ptrCast(self)));
            }
            pub inline fn totalTime(self: *const T, prt_time_: ?*i64) HRESULT {
                return @as(*const IDirectMusicBuffer.VTable, @ptrCast(self.vtable)).TotalTime(@as(*const IDirectMusicBuffer, @ptrCast(self)), prt_time_);
            }
            pub inline fn packStructured(self: *const T, rt_: i64, dw_channel_group_: u32, dw_channel_message_: u32) HRESULT {
                return @as(*const IDirectMusicBuffer.VTable, @ptrCast(self.vtable)).PackStructured(@as(*const IDirectMusicBuffer, @ptrCast(self)), rt_, dw_channel_group_, dw_channel_message_);
            }
            pub inline fn packUnstructured(self: *const T, rt_: i64, dw_channel_group_: u32, cb_: u32, lpb_: ?*u8) HRESULT {
                return @as(*const IDirectMusicBuffer.VTable, @ptrCast(self.vtable)).PackUnstructured(@as(*const IDirectMusicBuffer, @ptrCast(self)), rt_, dw_channel_group_, cb_, lpb_);
            }
            pub inline fn resetReadPtr(self: *const T) HRESULT {
                return @as(*const IDirectMusicBuffer.VTable, @ptrCast(self.vtable)).ResetReadPtr(@as(*const IDirectMusicBuffer, @ptrCast(self)));
            }
            pub inline fn getNextEvent(self: *const T, prt_: ?*i64, pdw_channel_group_: ?*u32, pdw_length_: ?*u32, pp_data_: ?*?*u8) HRESULT {
                return @as(*const IDirectMusicBuffer.VTable, @ptrCast(self.vtable)).GetNextEvent(@as(*const IDirectMusicBuffer, @ptrCast(self)), prt_, pdw_channel_group_, pdw_length_, pp_data_);
            }
            pub inline fn getRawBufferPtr(self: *const T, pp_data_: ?*?*u8) HRESULT {
                return @as(*const IDirectMusicBuffer.VTable, @ptrCast(self.vtable)).GetRawBufferPtr(@as(*const IDirectMusicBuffer, @ptrCast(self)), pp_data_);
            }
            pub inline fn getStartTime(self: *const T, prt_: ?*i64) HRESULT {
                return @as(*const IDirectMusicBuffer.VTable, @ptrCast(self.vtable)).GetStartTime(@as(*const IDirectMusicBuffer, @ptrCast(self)), prt_);
            }
            pub inline fn getUsedBytes(self: *const T, pcb_: ?*u32) HRESULT {
                return @as(*const IDirectMusicBuffer.VTable, @ptrCast(self.vtable)).GetUsedBytes(@as(*const IDirectMusicBuffer, @ptrCast(self)), pcb_);
            }
            pub inline fn getMaxBytes(self: *const T, pcb_: ?*u32) HRESULT {
                return @as(*const IDirectMusicBuffer.VTable, @ptrCast(self.vtable)).GetMaxBytes(@as(*const IDirectMusicBuffer, @ptrCast(self)), pcb_);
            }
            pub inline fn getBufferFormat(self: *const T, p_guid_format_: ?*Guid) HRESULT {
                return @as(*const IDirectMusicBuffer.VTable, @ptrCast(self.vtable)).GetBufferFormat(@as(*const IDirectMusicBuffer, @ptrCast(self)), p_guid_format_);
            }
            pub inline fn setStartTime(self: *const T, rt_: i64) HRESULT {
                return @as(*const IDirectMusicBuffer.VTable, @ptrCast(self.vtable)).SetStartTime(@as(*const IDirectMusicBuffer, @ptrCast(self)), rt_);
            }
            pub inline fn setUsedBytes(self: *const T, cb_: u32) HRESULT {
                return @as(*const IDirectMusicBuffer.VTable, @ptrCast(self.vtable)).SetUsedBytes(@as(*const IDirectMusicBuffer, @ptrCast(self)), cb_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusicInstrument_Value = Guid.initString("d2ac287d-b39b-11d1-8704-00600893b1bd");
pub const IID_IDirectMusicInstrument = &IID_IDirectMusicInstrument_Value;
pub const IDirectMusicInstrument = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPatch: *const fn (
            self: *const IDirectMusicInstrument,
            pdw_patch: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPatch: *const fn (
            self: *const IDirectMusicInstrument,
            dw_patch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPatch(self: *const T, pdw_patch_: ?*u32) HRESULT {
                return @as(*const IDirectMusicInstrument.VTable, @ptrCast(self.vtable)).GetPatch(@as(*const IDirectMusicInstrument, @ptrCast(self)), pdw_patch_);
            }
            pub inline fn setPatch(self: *const T, dw_patch_: u32) HRESULT {
                return @as(*const IDirectMusicInstrument.VTable, @ptrCast(self.vtable)).SetPatch(@as(*const IDirectMusicInstrument, @ptrCast(self)), dw_patch_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusicDownloadedInstrument_Value = Guid.initString("d2ac287e-b39b-11d1-8704-00600893b1bd");
pub const IID_IDirectMusicDownloadedInstrument = &IID_IDirectMusicDownloadedInstrument_Value;
pub const IDirectMusicDownloadedInstrument = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusicCollection_Value = Guid.initString("d2ac287c-b39b-11d1-8704-00600893b1bd");
pub const IID_IDirectMusicCollection = &IID_IDirectMusicCollection_Value;
pub const IDirectMusicCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInstrument: *const fn (
            self: *const IDirectMusicCollection,
            dw_patch: u32,
            pp_instrument: ?*?*IDirectMusicInstrument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumInstrument: *const fn (
            self: *const IDirectMusicCollection,
            dw_index: u32,
            pdw_patch: ?*u32,
            pwsz_name: ?PWSTR,
            dw_name_len: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getInstrument(self: *const T, dw_patch_: u32, pp_instrument_: ?*?*IDirectMusicInstrument) HRESULT {
                return @as(*const IDirectMusicCollection.VTable, @ptrCast(self.vtable)).GetInstrument(@as(*const IDirectMusicCollection, @ptrCast(self)), dw_patch_, pp_instrument_);
            }
            pub inline fn enumInstrument(self: *const T, dw_index_: u32, pdw_patch_: ?*u32, pwsz_name_: ?PWSTR, dw_name_len_: u32) HRESULT {
                return @as(*const IDirectMusicCollection.VTable, @ptrCast(self.vtable)).EnumInstrument(@as(*const IDirectMusicCollection, @ptrCast(self)), dw_index_, pdw_patch_, pwsz_name_, dw_name_len_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusicDownload_Value = Guid.initString("d2ac287b-b39b-11d1-8704-00600893b1bd");
pub const IID_IDirectMusicDownload = &IID_IDirectMusicDownload_Value;
pub const IDirectMusicDownload = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetBuffer: *const fn (
            self: *const IDirectMusicDownload,
            ppv_buffer: ?*?*anyopaque,
            pdw_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getBuffer(self: *const T, ppv_buffer_: ?*?*anyopaque, pdw_size_: ?*u32) HRESULT {
                return @as(*const IDirectMusicDownload.VTable, @ptrCast(self.vtable)).GetBuffer(@as(*const IDirectMusicDownload, @ptrCast(self)), ppv_buffer_, pdw_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusicPortDownload_Value = Guid.initString("d2ac287a-b39b-11d1-8704-00600893b1bd");
pub const IID_IDirectMusicPortDownload = &IID_IDirectMusicPortDownload_Value;
pub const IDirectMusicPortDownload = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetBuffer: *const fn (
            self: *const IDirectMusicPortDownload,
            dw_d_l_id: u32,
            pp_i_d_m_download: ?*?*IDirectMusicDownload,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AllocateBuffer: *const fn (
            self: *const IDirectMusicPortDownload,
            dw_size: u32,
            pp_i_d_m_download: ?*?*IDirectMusicDownload,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDLId: *const fn (
            self: *const IDirectMusicPortDownload,
            pdw_start_d_l_id: ?*u32,
            dw_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAppend: *const fn (
            self: *const IDirectMusicPortDownload,
            pdw_append: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Download: *const fn (
            self: *const IDirectMusicPortDownload,
            p_i_d_m_download: ?*IDirectMusicDownload,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unload: *const fn (
            self: *const IDirectMusicPortDownload,
            p_i_d_m_download: ?*IDirectMusicDownload,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getBuffer(self: *const T, dw_d_l_id_: u32, pp_i_d_m_download_: ?*?*IDirectMusicDownload) HRESULT {
                return @as(*const IDirectMusicPortDownload.VTable, @ptrCast(self.vtable)).GetBuffer(@as(*const IDirectMusicPortDownload, @ptrCast(self)), dw_d_l_id_, pp_i_d_m_download_);
            }
            pub inline fn allocateBuffer(self: *const T, dw_size_: u32, pp_i_d_m_download_: ?*?*IDirectMusicDownload) HRESULT {
                return @as(*const IDirectMusicPortDownload.VTable, @ptrCast(self.vtable)).AllocateBuffer(@as(*const IDirectMusicPortDownload, @ptrCast(self)), dw_size_, pp_i_d_m_download_);
            }
            pub inline fn getDLId(self: *const T, pdw_start_d_l_id_: ?*u32, dw_count_: u32) HRESULT {
                return @as(*const IDirectMusicPortDownload.VTable, @ptrCast(self.vtable)).GetDLId(@as(*const IDirectMusicPortDownload, @ptrCast(self)), pdw_start_d_l_id_, dw_count_);
            }
            pub inline fn getAppend(self: *const T, pdw_append_: ?*u32) HRESULT {
                return @as(*const IDirectMusicPortDownload.VTable, @ptrCast(self.vtable)).GetAppend(@as(*const IDirectMusicPortDownload, @ptrCast(self)), pdw_append_);
            }
            pub inline fn download(self: *const T, p_i_d_m_download_: ?*IDirectMusicDownload) HRESULT {
                return @as(*const IDirectMusicPortDownload.VTable, @ptrCast(self.vtable)).Download(@as(*const IDirectMusicPortDownload, @ptrCast(self)), p_i_d_m_download_);
            }
            pub inline fn unload(self: *const T, p_i_d_m_download_: ?*IDirectMusicDownload) HRESULT {
                return @as(*const IDirectMusicPortDownload.VTable, @ptrCast(self.vtable)).Unload(@as(*const IDirectMusicPortDownload, @ptrCast(self)), p_i_d_m_download_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusicPort_Value = Guid.initString("08f2d8c9-37c2-11d2-b9f9-0000f875ac12");
pub const IID_IDirectMusicPort = &IID_IDirectMusicPort_Value;
pub const IDirectMusicPort = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PlayBuffer: *const fn (
            self: *const IDirectMusicPort,
            p_buffer: ?*IDirectMusicBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReadNotificationHandle: *const fn (
            self: *const IDirectMusicPort,
            h_event: ?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Read: *const fn (
            self: *const IDirectMusicPort,
            p_buffer: ?*IDirectMusicBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DownloadInstrument: *const fn (
            self: *const IDirectMusicPort,
            p_instrument: ?*IDirectMusicInstrument,
            pp_downloaded_instrument: ?*?*IDirectMusicDownloadedInstrument,
            p_note_ranges: ?*DMUS_NOTERANGE,
            dw_num_note_ranges: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnloadInstrument: *const fn (
            self: *const IDirectMusicPort,
            p_downloaded_instrument: ?*IDirectMusicDownloadedInstrument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLatencyClock: *const fn (
            self: *const IDirectMusicPort,
            pp_clock: ?*?*IReferenceClock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRunningStats: *const fn (
            self: *const IDirectMusicPort,
            p_stats: ?*DMUS_SYNTHSTATS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Compact: *const fn (
            self: *const IDirectMusicPort,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCaps: *const fn (
            self: *const IDirectMusicPort,
            p_port_caps: ?*DMUS_PORTCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeviceIoControl: *const fn (
            self: *const IDirectMusicPort,
            dw_io_control_code: u32,
            lp_in_buffer: ?*anyopaque,
            n_in_buffer_size: u32,
            lp_out_buffer: ?*anyopaque,
            n_out_buffer_size: u32,
            lp_bytes_returned: ?*u32,
            lp_overlapped: ?*OVERLAPPED,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNumChannelGroups: *const fn (
            self: *const IDirectMusicPort,
            dw_channel_groups: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumChannelGroups: *const fn (
            self: *const IDirectMusicPort,
            pdw_channel_groups: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Activate: *const fn (
            self: *const IDirectMusicPort,
            f_active: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetChannelPriority: *const fn (
            self: *const IDirectMusicPort,
            dw_channel_group: u32,
            dw_channel: u32,
            dw_priority: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChannelPriority: *const fn (
            self: *const IDirectMusicPort,
            dw_channel_group: u32,
            dw_channel: u32,
            pdw_priority: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDirectSound: *const fn (
            self: *const IDirectMusicPort,
            p_direct_sound: ?*IDirectSound,
            p_direct_sound_buffer: ?*IDirectSoundBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormat: *const fn (
            self: *const IDirectMusicPort,
            p_wave_format_ex: ?*WAVEFORMATEX,
            pdw_wave_format_ex_size: ?*u32,
            pdw_buffer_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn playBuffer(self: *const T, p_buffer_: ?*IDirectMusicBuffer) HRESULT {
                return @as(*const IDirectMusicPort.VTable, @ptrCast(self.vtable)).PlayBuffer(@as(*const IDirectMusicPort, @ptrCast(self)), p_buffer_);
            }
            pub inline fn setReadNotificationHandle(self: *const T, h_event_: ?HANDLE) HRESULT {
                return @as(*const IDirectMusicPort.VTable, @ptrCast(self.vtable)).SetReadNotificationHandle(@as(*const IDirectMusicPort, @ptrCast(self)), h_event_);
            }
            pub inline fn read(self: *const T, p_buffer_: ?*IDirectMusicBuffer) HRESULT {
                return @as(*const IDirectMusicPort.VTable, @ptrCast(self.vtable)).Read(@as(*const IDirectMusicPort, @ptrCast(self)), p_buffer_);
            }
            pub inline fn downloadInstrument(self: *const T, p_instrument_: ?*IDirectMusicInstrument, pp_downloaded_instrument_: ?*?*IDirectMusicDownloadedInstrument, p_note_ranges_: ?*DMUS_NOTERANGE, dw_num_note_ranges_: u32) HRESULT {
                return @as(*const IDirectMusicPort.VTable, @ptrCast(self.vtable)).DownloadInstrument(@as(*const IDirectMusicPort, @ptrCast(self)), p_instrument_, pp_downloaded_instrument_, p_note_ranges_, dw_num_note_ranges_);
            }
            pub inline fn unloadInstrument(self: *const T, p_downloaded_instrument_: ?*IDirectMusicDownloadedInstrument) HRESULT {
                return @as(*const IDirectMusicPort.VTable, @ptrCast(self.vtable)).UnloadInstrument(@as(*const IDirectMusicPort, @ptrCast(self)), p_downloaded_instrument_);
            }
            pub inline fn getLatencyClock(self: *const T, pp_clock_: ?*?*IReferenceClock) HRESULT {
                return @as(*const IDirectMusicPort.VTable, @ptrCast(self.vtable)).GetLatencyClock(@as(*const IDirectMusicPort, @ptrCast(self)), pp_clock_);
            }
            pub inline fn getRunningStats(self: *const T, p_stats_: ?*DMUS_SYNTHSTATS) HRESULT {
                return @as(*const IDirectMusicPort.VTable, @ptrCast(self.vtable)).GetRunningStats(@as(*const IDirectMusicPort, @ptrCast(self)), p_stats_);
            }
            pub inline fn compact(self: *const T) HRESULT {
                return @as(*const IDirectMusicPort.VTable, @ptrCast(self.vtable)).Compact(@as(*const IDirectMusicPort, @ptrCast(self)));
            }
            pub inline fn getCaps(self: *const T, p_port_caps_: ?*DMUS_PORTCAPS) HRESULT {
                return @as(*const IDirectMusicPort.VTable, @ptrCast(self.vtable)).GetCaps(@as(*const IDirectMusicPort, @ptrCast(self)), p_port_caps_);
            }
            pub inline fn deviceIoControl(self: *const T, dw_io_control_code_: u32, lp_in_buffer_: ?*anyopaque, n_in_buffer_size_: u32, lp_out_buffer_: ?*anyopaque, n_out_buffer_size_: u32, lp_bytes_returned_: ?*u32, lp_overlapped_: ?*OVERLAPPED) HRESULT {
                return @as(*const IDirectMusicPort.VTable, @ptrCast(self.vtable)).DeviceIoControl(@as(*const IDirectMusicPort, @ptrCast(self)), dw_io_control_code_, lp_in_buffer_, n_in_buffer_size_, lp_out_buffer_, n_out_buffer_size_, lp_bytes_returned_, lp_overlapped_);
            }
            pub inline fn setNumChannelGroups(self: *const T, dw_channel_groups_: u32) HRESULT {
                return @as(*const IDirectMusicPort.VTable, @ptrCast(self.vtable)).SetNumChannelGroups(@as(*const IDirectMusicPort, @ptrCast(self)), dw_channel_groups_);
            }
            pub inline fn getNumChannelGroups(self: *const T, pdw_channel_groups_: ?*u32) HRESULT {
                return @as(*const IDirectMusicPort.VTable, @ptrCast(self.vtable)).GetNumChannelGroups(@as(*const IDirectMusicPort, @ptrCast(self)), pdw_channel_groups_);
            }
            pub inline fn activate(self: *const T, f_active_: BOOL) HRESULT {
                return @as(*const IDirectMusicPort.VTable, @ptrCast(self.vtable)).Activate(@as(*const IDirectMusicPort, @ptrCast(self)), f_active_);
            }
            pub inline fn setChannelPriority(self: *const T, dw_channel_group_: u32, dw_channel_: u32, dw_priority_: u32) HRESULT {
                return @as(*const IDirectMusicPort.VTable, @ptrCast(self.vtable)).SetChannelPriority(@as(*const IDirectMusicPort, @ptrCast(self)), dw_channel_group_, dw_channel_, dw_priority_);
            }
            pub inline fn getChannelPriority(self: *const T, dw_channel_group_: u32, dw_channel_: u32, pdw_priority_: ?*u32) HRESULT {
                return @as(*const IDirectMusicPort.VTable, @ptrCast(self.vtable)).GetChannelPriority(@as(*const IDirectMusicPort, @ptrCast(self)), dw_channel_group_, dw_channel_, pdw_priority_);
            }
            pub inline fn setDirectSound(self: *const T, p_direct_sound_: ?*IDirectSound, p_direct_sound_buffer_: ?*IDirectSoundBuffer) HRESULT {
                return @as(*const IDirectMusicPort.VTable, @ptrCast(self.vtable)).SetDirectSound(@as(*const IDirectMusicPort, @ptrCast(self)), p_direct_sound_, p_direct_sound_buffer_);
            }
            pub inline fn getFormat(self: *const T, p_wave_format_ex_: ?*WAVEFORMATEX, pdw_wave_format_ex_size_: ?*u32, pdw_buffer_size_: ?*u32) HRESULT {
                return @as(*const IDirectMusicPort.VTable, @ptrCast(self.vtable)).GetFormat(@as(*const IDirectMusicPort, @ptrCast(self)), p_wave_format_ex_, pdw_wave_format_ex_size_, pdw_buffer_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusicThru_Value = Guid.initString("ced153e7-3606-11d2-b9f9-0000f875ac12");
pub const IID_IDirectMusicThru = &IID_IDirectMusicThru_Value;
pub const IDirectMusicThru = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ThruChannel: *const fn (
            self: *const IDirectMusicThru,
            dw_source_channel_group: u32,
            dw_source_channel: u32,
            dw_destination_channel_group: u32,
            dw_destination_channel: u32,
            p_destination_port: ?*IDirectMusicPort,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn thruChannel(self: *const T, dw_source_channel_group_: u32, dw_source_channel_: u32, dw_destination_channel_group_: u32, dw_destination_channel_: u32, p_destination_port_: ?*IDirectMusicPort) HRESULT {
                return @as(*const IDirectMusicThru.VTable, @ptrCast(self.vtable)).ThruChannel(@as(*const IDirectMusicThru, @ptrCast(self)), dw_source_channel_group_, dw_source_channel_, dw_destination_channel_group_, dw_destination_channel_, p_destination_port_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DMUS_VOICE_STATE = extern struct {
    bExists: BOOL,
    spPosition: u64,
};

const IID_IDirectMusicSynth_Value = Guid.initString("09823661-5c85-11d2-afa6-00aa0024d8b6");
pub const IID_IDirectMusicSynth = &IID_IDirectMusicSynth_Value;
pub const IDirectMusicSynth = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: *const fn (
            self: *const IDirectMusicSynth,
            p_port_params: ?*DMUS_PORTPARAMS8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IDirectMusicSynth,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNumChannelGroups: *const fn (
            self: *const IDirectMusicSynth,
            dw_groups: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Download: *const fn (
            self: *const IDirectMusicSynth,
            ph_download: ?*?HANDLE,
            pv_data: ?*anyopaque,
            pb_free: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unload: *const fn (
            self: *const IDirectMusicSynth,
            h_download: ?HANDLE,
            lp_free_handle: isize,
            h_user_data: ?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PlayBuffer: *const fn (
            self: *const IDirectMusicSynth,
            rt: i64,
            pb_buffer: ?*u8,
            cb_buffer: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRunningStats: *const fn (
            self: *const IDirectMusicSynth,
            p_stats: ?*DMUS_SYNTHSTATS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPortCaps: *const fn (
            self: *const IDirectMusicSynth,
            p_caps: ?*DMUS_PORTCAPS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMasterClock: *const fn (
            self: *const IDirectMusicSynth,
            p_clock: ?*IReferenceClock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLatencyClock: *const fn (
            self: *const IDirectMusicSynth,
            pp_clock: ?*?*IReferenceClock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Activate: *const fn (
            self: *const IDirectMusicSynth,
            f_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSynthSink: *const fn (
            self: *const IDirectMusicSynth,
            p_synth_sink: ?*IDirectMusicSynthSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Render: *const fn (
            self: *const IDirectMusicSynth,
            p_buffer: ?*i16,
            dw_length: u32,
            ll_position: i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetChannelPriority: *const fn (
            self: *const IDirectMusicSynth,
            dw_channel_group: u32,
            dw_channel: u32,
            dw_priority: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChannelPriority: *const fn (
            self: *const IDirectMusicSynth,
            dw_channel_group: u32,
            dw_channel: u32,
            pdw_priority: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormat: *const fn (
            self: *const IDirectMusicSynth,
            p_wave_format_ex: ?*WAVEFORMATEX,
            pdw_wave_format_ex_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAppend: *const fn (
            self: *const IDirectMusicSynth,
            pdw_append: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn open(self: *const T, p_port_params_: ?*DMUS_PORTPARAMS8) HRESULT {
                return @as(*const IDirectMusicSynth.VTable, @ptrCast(self.vtable)).Open(@as(*const IDirectMusicSynth, @ptrCast(self)), p_port_params_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IDirectMusicSynth.VTable, @ptrCast(self.vtable)).Close(@as(*const IDirectMusicSynth, @ptrCast(self)));
            }
            pub inline fn setNumChannelGroups(self: *const T, dw_groups_: u32) HRESULT {
                return @as(*const IDirectMusicSynth.VTable, @ptrCast(self.vtable)).SetNumChannelGroups(@as(*const IDirectMusicSynth, @ptrCast(self)), dw_groups_);
            }
            pub inline fn download(self: *const T, ph_download_: ?*?HANDLE, pv_data_: ?*anyopaque, pb_free_: ?*i32) HRESULT {
                return @as(*const IDirectMusicSynth.VTable, @ptrCast(self.vtable)).Download(@as(*const IDirectMusicSynth, @ptrCast(self)), ph_download_, pv_data_, pb_free_);
            }
            pub inline fn unload(self: *const T, h_download_: ?HANDLE, lp_free_handle_: isize, h_user_data_: ?HANDLE) HRESULT {
                return @as(*const IDirectMusicSynth.VTable, @ptrCast(self.vtable)).Unload(@as(*const IDirectMusicSynth, @ptrCast(self)), h_download_, lp_free_handle_, h_user_data_);
            }
            pub inline fn playBuffer(self: *const T, rt_: i64, pb_buffer_: ?*u8, cb_buffer_: u32) HRESULT {
                return @as(*const IDirectMusicSynth.VTable, @ptrCast(self.vtable)).PlayBuffer(@as(*const IDirectMusicSynth, @ptrCast(self)), rt_, pb_buffer_, cb_buffer_);
            }
            pub inline fn getRunningStats(self: *const T, p_stats_: ?*DMUS_SYNTHSTATS) HRESULT {
                return @as(*const IDirectMusicSynth.VTable, @ptrCast(self.vtable)).GetRunningStats(@as(*const IDirectMusicSynth, @ptrCast(self)), p_stats_);
            }
            pub inline fn getPortCaps(self: *const T, p_caps_: ?*DMUS_PORTCAPS) HRESULT {
                return @as(*const IDirectMusicSynth.VTable, @ptrCast(self.vtable)).GetPortCaps(@as(*const IDirectMusicSynth, @ptrCast(self)), p_caps_);
            }
            pub inline fn setMasterClock(self: *const T, p_clock_: ?*IReferenceClock) HRESULT {
                return @as(*const IDirectMusicSynth.VTable, @ptrCast(self.vtable)).SetMasterClock(@as(*const IDirectMusicSynth, @ptrCast(self)), p_clock_);
            }
            pub inline fn getLatencyClock(self: *const T, pp_clock_: ?*?*IReferenceClock) HRESULT {
                return @as(*const IDirectMusicSynth.VTable, @ptrCast(self.vtable)).GetLatencyClock(@as(*const IDirectMusicSynth, @ptrCast(self)), pp_clock_);
            }
            pub inline fn activate(self: *const T, f_enable_: BOOL) HRESULT {
                return @as(*const IDirectMusicSynth.VTable, @ptrCast(self.vtable)).Activate(@as(*const IDirectMusicSynth, @ptrCast(self)), f_enable_);
            }
            pub inline fn setSynthSink(self: *const T, p_synth_sink_: ?*IDirectMusicSynthSink) HRESULT {
                return @as(*const IDirectMusicSynth.VTable, @ptrCast(self.vtable)).SetSynthSink(@as(*const IDirectMusicSynth, @ptrCast(self)), p_synth_sink_);
            }
            pub inline fn render(self: *const T, p_buffer_: ?*i16, dw_length_: u32, ll_position_: i64) HRESULT {
                return @as(*const IDirectMusicSynth.VTable, @ptrCast(self.vtable)).Render(@as(*const IDirectMusicSynth, @ptrCast(self)), p_buffer_, dw_length_, ll_position_);
            }
            pub inline fn setChannelPriority(self: *const T, dw_channel_group_: u32, dw_channel_: u32, dw_priority_: u32) HRESULT {
                return @as(*const IDirectMusicSynth.VTable, @ptrCast(self.vtable)).SetChannelPriority(@as(*const IDirectMusicSynth, @ptrCast(self)), dw_channel_group_, dw_channel_, dw_priority_);
            }
            pub inline fn getChannelPriority(self: *const T, dw_channel_group_: u32, dw_channel_: u32, pdw_priority_: ?*u32) HRESULT {
                return @as(*const IDirectMusicSynth.VTable, @ptrCast(self.vtable)).GetChannelPriority(@as(*const IDirectMusicSynth, @ptrCast(self)), dw_channel_group_, dw_channel_, pdw_priority_);
            }
            pub inline fn getFormat(self: *const T, p_wave_format_ex_: ?*WAVEFORMATEX, pdw_wave_format_ex_size_: ?*u32) HRESULT {
                return @as(*const IDirectMusicSynth.VTable, @ptrCast(self.vtable)).GetFormat(@as(*const IDirectMusicSynth, @ptrCast(self)), p_wave_format_ex_, pdw_wave_format_ex_size_);
            }
            pub inline fn getAppend(self: *const T, pdw_append_: ?*u32) HRESULT {
                return @as(*const IDirectMusicSynth.VTable, @ptrCast(self.vtable)).GetAppend(@as(*const IDirectMusicSynth, @ptrCast(self)), pdw_append_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusicSynth8_Value = Guid.initString("53cab625-2711-4c9f-9de7-1b7f925f6fc8");
pub const IID_IDirectMusicSynth8 = &IID_IDirectMusicSynth8_Value;
pub const IDirectMusicSynth8 = extern struct {
    pub const VTable = extern struct {
        base: IDirectMusicSynth.VTable,
        PlayVoice: *const fn (
            self: *const IDirectMusicSynth8,
            rt: i64,
            dw_voice_id: u32,
            dw_channel_group: u32,
            dw_channel: u32,
            dw_d_l_id: u32,
            pr_pitch: i32,
            vr_volume: i32,
            st_voice_start: u64,
            st_loop_start: u64,
            st_loop_end: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopVoice: *const fn (
            self: *const IDirectMusicSynth8,
            rt: i64,
            dw_voice_id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVoiceState: *const fn (
            self: *const IDirectMusicSynth8,
            dw_voice: ?*u32,
            cb_voice: u32,
            dw_voice_state: ?*DMUS_VOICE_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IDirectMusicSynth8,
            dw_download_i_d: u32,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AssignChannelToBuses: *const fn (
            self: *const IDirectMusicSynth8,
            dw_channel_group: u32,
            dw_channel: u32,
            pdw_buses: ?*u32,
            c_buses: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDirectMusicSynth.MethodMixin(T);
            pub inline fn playVoice(self: *const T, rt_: i64, dw_voice_id_: u32, dw_channel_group_: u32, dw_channel_: u32, dw_d_l_id_: u32, pr_pitch_: i32, vr_volume_: i32, st_voice_start_: u64, st_loop_start_: u64, st_loop_end_: u64) HRESULT {
                return @as(*const IDirectMusicSynth8.VTable, @ptrCast(self.vtable)).PlayVoice(@as(*const IDirectMusicSynth8, @ptrCast(self)), rt_, dw_voice_id_, dw_channel_group_, dw_channel_, dw_d_l_id_, pr_pitch_, vr_volume_, st_voice_start_, st_loop_start_, st_loop_end_);
            }
            pub inline fn stopVoice(self: *const T, rt_: i64, dw_voice_id_: u32) HRESULT {
                return @as(*const IDirectMusicSynth8.VTable, @ptrCast(self.vtable)).StopVoice(@as(*const IDirectMusicSynth8, @ptrCast(self)), rt_, dw_voice_id_);
            }
            pub inline fn getVoiceState(self: *const T, dw_voice_: ?*u32, cb_voice_: u32, dw_voice_state_: ?*DMUS_VOICE_STATE) HRESULT {
                return @as(*const IDirectMusicSynth8.VTable, @ptrCast(self.vtable)).GetVoiceState(@as(*const IDirectMusicSynth8, @ptrCast(self)), dw_voice_, cb_voice_, dw_voice_state_);
            }
            pub inline fn refresh(self: *const T, dw_download_i_d_: u32, dw_flags_: u32) HRESULT {
                return @as(*const IDirectMusicSynth8.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IDirectMusicSynth8, @ptrCast(self)), dw_download_i_d_, dw_flags_);
            }
            pub inline fn assignChannelToBuses(self: *const T, dw_channel_group_: u32, dw_channel_: u32, pdw_buses_: ?*u32, c_buses_: u32) HRESULT {
                return @as(*const IDirectMusicSynth8.VTable, @ptrCast(self.vtable)).AssignChannelToBuses(@as(*const IDirectMusicSynth8, @ptrCast(self)), dw_channel_group_, dw_channel_, pdw_buses_, c_buses_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDirectMusicSynthSink_Value = Guid.initString("09823663-5c85-11d2-afa6-00aa0024d8b6");
pub const IID_IDirectMusicSynthSink = &IID_IDirectMusicSynthSink_Value;
pub const IDirectMusicSynthSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Init: *const fn (
            self: *const IDirectMusicSynthSink,
            p_synth: ?*IDirectMusicSynth,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMasterClock: *const fn (
            self: *const IDirectMusicSynthSink,
            p_clock: ?*IReferenceClock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLatencyClock: *const fn (
            self: *const IDirectMusicSynthSink,
            pp_clock: ?*?*IReferenceClock,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Activate: *const fn (
            self: *const IDirectMusicSynthSink,
            f_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SampleToRefTime: *const fn (
            self: *const IDirectMusicSynthSink,
            ll_sample_time: i64,
            prf_time: ?*i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefTimeToSample: *const fn (
            self: *const IDirectMusicSynthSink,
            rf_time: i64,
            pll_sample_time: ?*i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDirectSound: *const fn (
            self: *const IDirectMusicSynthSink,
            p_direct_sound: ?*IDirectSound,
            p_direct_sound_buffer: ?*IDirectSoundBuffer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDesiredBufferSize: *const fn (
            self: *const IDirectMusicSynthSink,
            pdw_buffer_size_in_samples: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn init(self: *const T, p_synth_: ?*IDirectMusicSynth) HRESULT {
                return @as(*const IDirectMusicSynthSink.VTable, @ptrCast(self.vtable)).Init(@as(*const IDirectMusicSynthSink, @ptrCast(self)), p_synth_);
            }
            pub inline fn setMasterClock(self: *const T, p_clock_: ?*IReferenceClock) HRESULT {
                return @as(*const IDirectMusicSynthSink.VTable, @ptrCast(self.vtable)).SetMasterClock(@as(*const IDirectMusicSynthSink, @ptrCast(self)), p_clock_);
            }
            pub inline fn getLatencyClock(self: *const T, pp_clock_: ?*?*IReferenceClock) HRESULT {
                return @as(*const IDirectMusicSynthSink.VTable, @ptrCast(self.vtable)).GetLatencyClock(@as(*const IDirectMusicSynthSink, @ptrCast(self)), pp_clock_);
            }
            pub inline fn activate(self: *const T, f_enable_: BOOL) HRESULT {
                return @as(*const IDirectMusicSynthSink.VTable, @ptrCast(self.vtable)).Activate(@as(*const IDirectMusicSynthSink, @ptrCast(self)), f_enable_);
            }
            pub inline fn sampleToRefTime(self: *const T, ll_sample_time_: i64, prf_time_: ?*i64) HRESULT {
                return @as(*const IDirectMusicSynthSink.VTable, @ptrCast(self.vtable)).SampleToRefTime(@as(*const IDirectMusicSynthSink, @ptrCast(self)), ll_sample_time_, prf_time_);
            }
            pub inline fn refTimeToSample(self: *const T, rf_time_: i64, pll_sample_time_: ?*i64) HRESULT {
                return @as(*const IDirectMusicSynthSink.VTable, @ptrCast(self.vtable)).RefTimeToSample(@as(*const IDirectMusicSynthSink, @ptrCast(self)), rf_time_, pll_sample_time_);
            }
            pub inline fn setDirectSound(self: *const T, p_direct_sound_: ?*IDirectSound, p_direct_sound_buffer_: ?*IDirectSoundBuffer) HRESULT {
                return @as(*const IDirectMusicSynthSink.VTable, @ptrCast(self.vtable)).SetDirectSound(@as(*const IDirectMusicSynthSink, @ptrCast(self)), p_direct_sound_, p_direct_sound_buffer_);
            }
            pub inline fn getDesiredBufferSize(self: *const T, pdw_buffer_size_in_samples_: ?*u32) HRESULT {
                return @as(*const IDirectMusicSynthSink.VTable, @ptrCast(self.vtable)).GetDesiredBufferSize(@as(*const IDirectMusicSynthSink, @ptrCast(self)), pdw_buffer_size_in_samples_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DSPROPERTY_DIRECTSOUNDDEVICE = enum(i32) {
    WAVEDEVICEMAPPING_A = 1,
    DESCRIPTION_1 = 2,
    ENUMERATE_1 = 3,
    WAVEDEVICEMAPPING_W = 4,
    DESCRIPTION_A = 5,
    DESCRIPTION_W = 6,
    ENUMERATE_A = 7,
    ENUMERATE_W = 8,
};
pub const DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A = DSPROPERTY_DIRECTSOUNDDEVICE.WAVEDEVICEMAPPING_A;
pub const DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1 = DSPROPERTY_DIRECTSOUNDDEVICE.DESCRIPTION_1;
pub const DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1 = DSPROPERTY_DIRECTSOUNDDEVICE.ENUMERATE_1;
pub const DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W = DSPROPERTY_DIRECTSOUNDDEVICE.WAVEDEVICEMAPPING_W;
pub const DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A = DSPROPERTY_DIRECTSOUNDDEVICE.DESCRIPTION_A;
pub const DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W = DSPROPERTY_DIRECTSOUNDDEVICE.DESCRIPTION_W;
pub const DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A = DSPROPERTY_DIRECTSOUNDDEVICE.ENUMERATE_A;
pub const DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W = DSPROPERTY_DIRECTSOUNDDEVICE.ENUMERATE_W;

pub const DIRECTSOUNDDEVICE_TYPE = enum(i32) {
    EMULATED = 0,
    VXD = 1,
    WDM = 2,
};
pub const DIRECTSOUNDDEVICE_TYPE_EMULATED = DIRECTSOUNDDEVICE_TYPE.EMULATED;
pub const DIRECTSOUNDDEVICE_TYPE_VXD = DIRECTSOUNDDEVICE_TYPE.VXD;
pub const DIRECTSOUNDDEVICE_TYPE_WDM = DIRECTSOUNDDEVICE_TYPE.WDM;

pub const DIRECTSOUNDDEVICE_DATAFLOW = enum(i32) {
    RENDER = 0,
    CAPTURE = 1,
};
pub const DIRECTSOUNDDEVICE_DATAFLOW_RENDER = DIRECTSOUNDDEVICE_DATAFLOW.RENDER;
pub const DIRECTSOUNDDEVICE_DATAFLOW_CAPTURE = DIRECTSOUNDDEVICE_DATAFLOW.CAPTURE;

pub const DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA = extern struct {
    DeviceName: ?PSTR,
    DataFlow: DIRECTSOUNDDEVICE_DATAFLOW,
    DeviceId: Guid,
};

pub const DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA = extern struct {
    DeviceName: ?PWSTR,
    DataFlow: DIRECTSOUNDDEVICE_DATAFLOW,
    DeviceId: Guid,
};

pub const DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA = extern struct {
    DeviceId: Guid,
    DescriptionA: [256]CHAR,
    DescriptionW: [256]u16,
    ModuleA: [260]CHAR,
    ModuleW: [260]u16,
    Type: DIRECTSOUNDDEVICE_TYPE,
    DataFlow: DIRECTSOUNDDEVICE_DATAFLOW,
    WaveDeviceId: u32,
    Devnode: u32,
};

pub const DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA = extern struct {
    Type: DIRECTSOUNDDEVICE_TYPE,
    DataFlow: DIRECTSOUNDDEVICE_DATAFLOW,
    DeviceId: Guid,
    Description: ?PSTR,
    Module: ?PSTR,
    Interface: ?PSTR,
    WaveDeviceId: u32,
};

pub const DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA = extern struct {
    Type: DIRECTSOUNDDEVICE_TYPE,
    DataFlow: DIRECTSOUNDDEVICE_DATAFLOW,
    DeviceId: Guid,
    Description: ?PWSTR,
    Module: ?PWSTR,
    Interface: ?PWSTR,
    WaveDeviceId: u32,
};

pub const LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK1 = *const fn (
    param0: ?*DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA,
    param1: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKA = *const fn (
    param0: ?*DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA,
    param1: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKW = *const fn (
    param0: ?*DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA,
    param1: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA = extern struct {
    Callback: ?LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK1,
    Context: ?*anyopaque,
};

pub const DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA = extern struct {
    Callback: ?LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKA,
    Context: ?*anyopaque,
};

pub const DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA = extern struct {
    Callback: ?LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKW,
    Context: ?*anyopaque,
};

pub const Tag_DVAudInfo = extern struct {
    bAudStyle: [2]u8,
    bAudQu: [2]u8,
    bNumAudPin: u8,
    wAvgSamplesPerPinPerFrm: [2]u16,
    wBlkMode: u16,
    wDIFMode: u16,
    wBlkDiv: u16,
};

pub const MDEVICECAPSEX = extern struct {
    cbSize: u32 align(1),
    pCaps: ?*anyopaque align(1),
};

pub const MIDIOPENDESC = extern struct {
    hMidi: ?HMIDI align(1),
    dwCallback: usize align(1),
    dwInstance: usize align(1),
    dnDevNode: usize align(1),
    cIds: u32 align(1),
    rgIds: [1]MIDIOPENSTRMID align(1),
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (1)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK = thismodule.LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKA;
    },
    .wide => struct {
        pub const LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK = thismodule.LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK = *opaque {};
    } else struct {
        pub const LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK = @compileError("'LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (16)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BOOL = @import("../../foundation.zig").BOOL;
const CHAR = @import("../../foundation.zig").CHAR;
const HANDLE = @import("../../foundation.zig").HANDLE;
const HMIDI = @import("../../media/audio.zig").HMIDI;
const HRESULT = @import("../../foundation.zig").HRESULT;
const HWND = @import("../../foundation.zig").HWND;
const IDirectSound = @import("../../media/audio/direct_sound.zig").IDirectSound;
const IDirectSoundBuffer = @import("../../media/audio/direct_sound.zig").IDirectSoundBuffer;
const IReferenceClock = @import("../../media.zig").IReferenceClock;
const IUnknown = @import("../../system/com.zig").IUnknown;
const MIDIOPENSTRMID = @import("../../media/multimedia.zig").MIDIOPENSTRMID;
const OVERLAPPED = @import("../../system/io.zig").OVERLAPPED;
const PSTR = @import("../../foundation.zig").PSTR;
const PWSTR = @import("../../foundation.zig").PWSTR;
const WAVEFORMATEX = @import("../../media/audio.zig").WAVEFORMATEX;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK1")) {
        _ = LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK1;
    }
    if (@hasDecl(@This(), "LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKA")) {
        _ = LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKA;
    }
    if (@hasDecl(@This(), "LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKW")) {
        _ = LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKW;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
