//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (1)
//--------------------------------------------------------------------------------
pub const CLSID_XMLGraphBuilder = Guid.initString("1bb05961-5fbf-11d2-a521-44df07c10000");

//--------------------------------------------------------------------------------
// Section: Types (1)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
const IID_IXMLGraphBuilder_Value = Guid.initString("1bb05960-5fbf-11d2-a521-44df07c10000");
pub const IID_IXMLGraphBuilder = &IID_IXMLGraphBuilder_Value;
pub const IXMLGraphBuilder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BuildFromXML: *const fn (
            self: *const IXMLGraphBuilder,
            p_graph: ?*IGraphBuilder,
            pxml: ?*IXMLElement,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveToXML: *const fn (
            self: *const IXMLGraphBuilder,
            p_graph: ?*IGraphBuilder,
            pbstrxml: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BuildFromXMLFile: *const fn (
            self: *const IXMLGraphBuilder,
            p_graph: ?*IGraphBuilder,
            wsz_file_name: ?[*:0]const u16,
            wsz_base_u_r_l: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn buildFromXML(self: *const T, p_graph_: ?*IGraphBuilder, pxml_: ?*IXMLElement) HRESULT {
                return @as(*const IXMLGraphBuilder.VTable, @ptrCast(self.vtable)).BuildFromXML(@as(*const IXMLGraphBuilder, @ptrCast(self)), p_graph_, pxml_);
            }
            pub inline fn saveToXML(self: *const T, p_graph_: ?*IGraphBuilder, pbstrxml_: ?*?BSTR) HRESULT {
                return @as(*const IXMLGraphBuilder.VTable, @ptrCast(self.vtable)).SaveToXML(@as(*const IXMLGraphBuilder, @ptrCast(self)), p_graph_, pbstrxml_);
            }
            pub inline fn buildFromXMLFile(self: *const T, p_graph_: ?*IGraphBuilder, wsz_file_name_: ?[*:0]const u16, wsz_base_u_r_l_: ?[*:0]const u16) HRESULT {
                return @as(*const IXMLGraphBuilder.VTable, @ptrCast(self.vtable)).BuildFromXMLFile(@as(*const IXMLGraphBuilder, @ptrCast(self)), p_graph_, wsz_file_name_, wsz_base_u_r_l_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (7)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BSTR = @import("../../foundation.zig").BSTR;
const HRESULT = @import("../../foundation.zig").HRESULT;
const IGraphBuilder = @import("../../media/direct_show.zig").IGraphBuilder;
const IUnknown = @import("../../system/com.zig").IUnknown;
const IXMLElement = @import("../../data/xml/ms_xml.zig").IXMLElement;
const PWSTR = @import("../../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
