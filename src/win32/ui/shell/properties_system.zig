//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (1)
//--------------------------------------------------------------------------------
pub const PKEY_PIDSTR_MAX = @as(u32, 10);

//--------------------------------------------------------------------------------
// Section: Types (61)
//--------------------------------------------------------------------------------
pub const PROPERTYKEY = extern struct {
    fmtid: Guid,
    pid: u32,
};

const CLSID_InMemoryPropertyStore_Value = Guid.initString("9a02e012-6303-4e1e-b9a1-630f802592c5");
pub const CLSID_InMemoryPropertyStore = &CLSID_InMemoryPropertyStore_Value;

const CLSID_InMemoryPropertyStoreMarshalByValue_Value = Guid.initString("d4ca0e2d-6da7-4b75-a97c-5f306f0eaedc");
pub const CLSID_InMemoryPropertyStoreMarshalByValue = &CLSID_InMemoryPropertyStoreMarshalByValue_Value;

const CLSID_PropertySystem_Value = Guid.initString("b8967f85-58ae-4f46-9fb2-5d7904798f4b");
pub const CLSID_PropertySystem = &CLSID_PropertySystem_Value;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IInitializeWithFile_Value = Guid.initString("b7d14566-0509-4cce-a71f-0a554233bd9b");
pub const IID_IInitializeWithFile = &IID_IInitializeWithFile_Value;
pub const IInitializeWithFile = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IInitializeWithFile,
            psz_file_path: ?[*:0]const u16,
            grf_mode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, psz_file_path_: ?[*:0]const u16, grf_mode_: u32) HRESULT {
                return @as(*const IInitializeWithFile.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IInitializeWithFile, @ptrCast(self)), psz_file_path_, grf_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IInitializeWithStream_Value = Guid.initString("b824b49d-22ac-4161-ac8a-9916e8fa3f7f");
pub const IID_IInitializeWithStream = &IID_IInitializeWithStream_Value;
pub const IInitializeWithStream = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IInitializeWithStream,
            pstream: ?*IStream,
            grf_mode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, pstream_: ?*IStream, grf_mode_: u32) HRESULT {
                return @as(*const IInitializeWithStream.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IInitializeWithStream, @ptrCast(self)), pstream_, grf_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPropertyStore_Value = Guid.initString("886d8eeb-8cf2-4446-8d02-cdba1dbdcf99");
pub const IID_IPropertyStore = &IID_IPropertyStore_Value;
pub const IPropertyStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IPropertyStore,
            c_props: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IPropertyStore,
            i_prop: u32,
            pkey: ?*PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn (
            self: *const IPropertyStore,
            key: ?*const PROPERTYKEY,
            pv: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValue: *const fn (
            self: *const IPropertyStore,
            key: ?*const PROPERTYKEY,
            propvar: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: *const fn (
            self: *const IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, c_props_: ?*u32) HRESULT {
                return @as(*const IPropertyStore.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IPropertyStore, @ptrCast(self)), c_props_);
            }
            pub inline fn getAt(self: *const T, i_prop_: u32, pkey_: ?*PROPERTYKEY) HRESULT {
                return @as(*const IPropertyStore.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IPropertyStore, @ptrCast(self)), i_prop_, pkey_);
            }
            pub inline fn getValue(self: *const T, key_: ?*const PROPERTYKEY, pv_: ?*PROPVARIANT) HRESULT {
                return @as(*const IPropertyStore.VTable, @ptrCast(self.vtable)).GetValue(@as(*const IPropertyStore, @ptrCast(self)), key_, pv_);
            }
            pub inline fn setValue(self: *const T, key_: ?*const PROPERTYKEY, propvar_: ?*const PROPVARIANT) HRESULT {
                return @as(*const IPropertyStore.VTable, @ptrCast(self.vtable)).SetValue(@as(*const IPropertyStore, @ptrCast(self)), key_, propvar_);
            }
            pub inline fn commit(self: *const T) HRESULT {
                return @as(*const IPropertyStore.VTable, @ptrCast(self.vtable)).Commit(@as(*const IPropertyStore, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INamedPropertyStore_Value = Guid.initString("71604b0f-97b0-4764-8577-2f13e98a1422");
pub const IID_INamedPropertyStore = &IID_INamedPropertyStore_Value;
pub const INamedPropertyStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNamedValue: *const fn (
            self: *const INamedPropertyStore,
            psz_name: ?[*:0]const u16,
            ppropvar: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNamedValue: *const fn (
            self: *const INamedPropertyStore,
            psz_name: ?[*:0]const u16,
            propvar: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameCount: *const fn (
            self: *const INamedPropertyStore,
            pdw_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNameAt: *const fn (
            self: *const INamedPropertyStore,
            i_prop: u32,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getNamedValue(self: *const T, psz_name_: ?[*:0]const u16, ppropvar_: ?*PROPVARIANT) HRESULT {
                return @as(*const INamedPropertyStore.VTable, @ptrCast(self.vtable)).GetNamedValue(@as(*const INamedPropertyStore, @ptrCast(self)), psz_name_, ppropvar_);
            }
            pub inline fn setNamedValue(self: *const T, psz_name_: ?[*:0]const u16, propvar_: ?*const PROPVARIANT) HRESULT {
                return @as(*const INamedPropertyStore.VTable, @ptrCast(self.vtable)).SetNamedValue(@as(*const INamedPropertyStore, @ptrCast(self)), psz_name_, propvar_);
            }
            pub inline fn getNameCount(self: *const T, pdw_count_: ?*u32) HRESULT {
                return @as(*const INamedPropertyStore.VTable, @ptrCast(self.vtable)).GetNameCount(@as(*const INamedPropertyStore, @ptrCast(self)), pdw_count_);
            }
            pub inline fn getNameAt(self: *const T, i_prop_: u32, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const INamedPropertyStore.VTable, @ptrCast(self.vtable)).GetNameAt(@as(*const INamedPropertyStore, @ptrCast(self)), i_prop_, pbstr_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const GETPROPERTYSTOREFLAGS = enum(u32) {
    DEFAULT = 0,
    HANDLERPROPERTIESONLY = 1,
    READWRITE = 2,
    TEMPORARY = 4,
    FASTPROPERTIESONLY = 8,
    OPENSLOWITEM = 16,
    DELAYCREATION = 32,
    BESTEFFORT = 64,
    NO_OPLOCK = 128,
    PREFERQUERYPROPERTIES = 256,
    EXTRINSICPROPERTIES = 512,
    EXTRINSICPROPERTIESONLY = 1024,
    VOLATILEPROPERTIES = 2048,
    VOLATILEPROPERTIESONLY = 4096,
    MASK_VALID = 8191,
    _,
    pub fn initFlags(o: struct {
        DEFAULT: u1 = 0,
        HANDLERPROPERTIESONLY: u1 = 0,
        READWRITE: u1 = 0,
        TEMPORARY: u1 = 0,
        FASTPROPERTIESONLY: u1 = 0,
        OPENSLOWITEM: u1 = 0,
        DELAYCREATION: u1 = 0,
        BESTEFFORT: u1 = 0,
        NO_OPLOCK: u1 = 0,
        PREFERQUERYPROPERTIES: u1 = 0,
        EXTRINSICPROPERTIES: u1 = 0,
        EXTRINSICPROPERTIESONLY: u1 = 0,
        VOLATILEPROPERTIES: u1 = 0,
        VOLATILEPROPERTIESONLY: u1 = 0,
        MASK_VALID: u1 = 0,
    }) GETPROPERTYSTOREFLAGS {
        return @as(GETPROPERTYSTOREFLAGS, @enumFromInt((if (o.DEFAULT == 1) @intFromEnum(GETPROPERTYSTOREFLAGS.DEFAULT) else 0) | (if (o.HANDLERPROPERTIESONLY == 1) @intFromEnum(GETPROPERTYSTOREFLAGS.HANDLERPROPERTIESONLY) else 0) | (if (o.READWRITE == 1) @intFromEnum(GETPROPERTYSTOREFLAGS.READWRITE) else 0) | (if (o.TEMPORARY == 1) @intFromEnum(GETPROPERTYSTOREFLAGS.TEMPORARY) else 0) | (if (o.FASTPROPERTIESONLY == 1) @intFromEnum(GETPROPERTYSTOREFLAGS.FASTPROPERTIESONLY) else 0) | (if (o.OPENSLOWITEM == 1) @intFromEnum(GETPROPERTYSTOREFLAGS.OPENSLOWITEM) else 0) | (if (o.DELAYCREATION == 1) @intFromEnum(GETPROPERTYSTOREFLAGS.DELAYCREATION) else 0) | (if (o.BESTEFFORT == 1) @intFromEnum(GETPROPERTYSTOREFLAGS.BESTEFFORT) else 0) | (if (o.NO_OPLOCK == 1) @intFromEnum(GETPROPERTYSTOREFLAGS.NO_OPLOCK) else 0) | (if (o.PREFERQUERYPROPERTIES == 1) @intFromEnum(GETPROPERTYSTOREFLAGS.PREFERQUERYPROPERTIES) else 0) | (if (o.EXTRINSICPROPERTIES == 1) @intFromEnum(GETPROPERTYSTOREFLAGS.EXTRINSICPROPERTIES) else 0) | (if (o.EXTRINSICPROPERTIESONLY == 1) @intFromEnum(GETPROPERTYSTOREFLAGS.EXTRINSICPROPERTIESONLY) else 0) | (if (o.VOLATILEPROPERTIES == 1) @intFromEnum(GETPROPERTYSTOREFLAGS.VOLATILEPROPERTIES) else 0) | (if (o.VOLATILEPROPERTIESONLY == 1) @intFromEnum(GETPROPERTYSTOREFLAGS.VOLATILEPROPERTIESONLY) else 0) | (if (o.MASK_VALID == 1) @intFromEnum(GETPROPERTYSTOREFLAGS.MASK_VALID) else 0)));
    }
};
pub const GPS_DEFAULT = GETPROPERTYSTOREFLAGS.DEFAULT;
pub const GPS_HANDLERPROPERTIESONLY = GETPROPERTYSTOREFLAGS.HANDLERPROPERTIESONLY;
pub const GPS_READWRITE = GETPROPERTYSTOREFLAGS.READWRITE;
pub const GPS_TEMPORARY = GETPROPERTYSTOREFLAGS.TEMPORARY;
pub const GPS_FASTPROPERTIESONLY = GETPROPERTYSTOREFLAGS.FASTPROPERTIESONLY;
pub const GPS_OPENSLOWITEM = GETPROPERTYSTOREFLAGS.OPENSLOWITEM;
pub const GPS_DELAYCREATION = GETPROPERTYSTOREFLAGS.DELAYCREATION;
pub const GPS_BESTEFFORT = GETPROPERTYSTOREFLAGS.BESTEFFORT;
pub const GPS_NO_OPLOCK = GETPROPERTYSTOREFLAGS.NO_OPLOCK;
pub const GPS_PREFERQUERYPROPERTIES = GETPROPERTYSTOREFLAGS.PREFERQUERYPROPERTIES;
pub const GPS_EXTRINSICPROPERTIES = GETPROPERTYSTOREFLAGS.EXTRINSICPROPERTIES;
pub const GPS_EXTRINSICPROPERTIESONLY = GETPROPERTYSTOREFLAGS.EXTRINSICPROPERTIESONLY;
pub const GPS_VOLATILEPROPERTIES = GETPROPERTYSTOREFLAGS.VOLATILEPROPERTIES;
pub const GPS_VOLATILEPROPERTIESONLY = GETPROPERTYSTOREFLAGS.VOLATILEPROPERTIESONLY;
pub const GPS_MASK_VALID = GETPROPERTYSTOREFLAGS.MASK_VALID;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IObjectWithPropertyKey_Value = Guid.initString("fc0ca0a7-c316-4fd2-9031-3e628e6d4f23");
pub const IID_IObjectWithPropertyKey = &IID_IObjectWithPropertyKey_Value;
pub const IObjectWithPropertyKey = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetPropertyKey: *const fn (
            self: *const IObjectWithPropertyKey,
            key: ?*const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyKey: *const fn (
            self: *const IObjectWithPropertyKey,
            pkey: ?*PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setPropertyKey(self: *const T, key_: ?*const PROPERTYKEY) HRESULT {
                return @as(*const IObjectWithPropertyKey.VTable, @ptrCast(self.vtable)).SetPropertyKey(@as(*const IObjectWithPropertyKey, @ptrCast(self)), key_);
            }
            pub inline fn getPropertyKey(self: *const T, pkey_: ?*PROPERTYKEY) HRESULT {
                return @as(*const IObjectWithPropertyKey.VTable, @ptrCast(self.vtable)).GetPropertyKey(@as(*const IObjectWithPropertyKey, @ptrCast(self)), pkey_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PKA_FLAGS = enum(u32) {
    SET = 0,
    APPEND = 1,
    DELETE = 2,
    _,
    pub fn initFlags(o: struct {
        SET: u1 = 0,
        APPEND: u1 = 0,
        DELETE: u1 = 0,
    }) PKA_FLAGS {
        return @as(PKA_FLAGS, @enumFromInt((if (o.SET == 1) @intFromEnum(PKA_FLAGS.SET) else 0) | (if (o.APPEND == 1) @intFromEnum(PKA_FLAGS.APPEND) else 0) | (if (o.DELETE == 1) @intFromEnum(PKA_FLAGS.DELETE) else 0)));
    }
};
pub const PKA_SET = PKA_FLAGS.SET;
pub const PKA_APPEND = PKA_FLAGS.APPEND;
pub const PKA_DELETE = PKA_FLAGS.DELETE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyChange_Value = Guid.initString("f917bc8a-1bba-4478-a245-1bde03eb9431");
pub const IID_IPropertyChange = &IID_IPropertyChange_Value;
pub const IPropertyChange = extern struct {
    pub const VTable = extern struct {
        base: IObjectWithPropertyKey.VTable,
        ApplyToPropVariant: *const fn (
            self: *const IPropertyChange,
            propvar_in: ?*const PROPVARIANT,
            ppropvar_out: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IObjectWithPropertyKey.MethodMixin(T);
            pub inline fn applyToPropVariant(self: *const T, propvar_in_: ?*const PROPVARIANT, ppropvar_out_: ?*PROPVARIANT) HRESULT {
                return @as(*const IPropertyChange.VTable, @ptrCast(self.vtable)).ApplyToPropVariant(@as(*const IPropertyChange, @ptrCast(self)), propvar_in_, ppropvar_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyChangeArray_Value = Guid.initString("380f5cad-1b5e-42f2-805d-637fd392d31e");
pub const IID_IPropertyChangeArray = &IID_IPropertyChangeArray_Value;
pub const IPropertyChangeArray = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IPropertyChangeArray,
            pc_operations: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IPropertyChangeArray,
            i_index: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertAt: *const fn (
            self: *const IPropertyChangeArray,
            i_index: u32,
            pprop_change: ?*IPropertyChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Append: *const fn (
            self: *const IPropertyChangeArray,
            pprop_change: ?*IPropertyChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendOrReplace: *const fn (
            self: *const IPropertyChangeArray,
            pprop_change: ?*IPropertyChange,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn (
            self: *const IPropertyChangeArray,
            i_index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsKeyInArray: *const fn (
            self: *const IPropertyChangeArray,
            key: ?*const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, pc_operations_: ?*u32) HRESULT {
                return @as(*const IPropertyChangeArray.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IPropertyChangeArray, @ptrCast(self)), pc_operations_);
            }
            pub inline fn getAt(self: *const T, i_index_: u32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IPropertyChangeArray.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IPropertyChangeArray, @ptrCast(self)), i_index_, riid_, ppv_);
            }
            pub inline fn insertAt(self: *const T, i_index_: u32, pprop_change_: ?*IPropertyChange) HRESULT {
                return @as(*const IPropertyChangeArray.VTable, @ptrCast(self.vtable)).InsertAt(@as(*const IPropertyChangeArray, @ptrCast(self)), i_index_, pprop_change_);
            }
            pub inline fn append(self: *const T, pprop_change_: ?*IPropertyChange) HRESULT {
                return @as(*const IPropertyChangeArray.VTable, @ptrCast(self.vtable)).Append(@as(*const IPropertyChangeArray, @ptrCast(self)), pprop_change_);
            }
            pub inline fn appendOrReplace(self: *const T, pprop_change_: ?*IPropertyChange) HRESULT {
                return @as(*const IPropertyChangeArray.VTable, @ptrCast(self.vtable)).AppendOrReplace(@as(*const IPropertyChangeArray, @ptrCast(self)), pprop_change_);
            }
            pub inline fn removeAt(self: *const T, i_index_: u32) HRESULT {
                return @as(*const IPropertyChangeArray.VTable, @ptrCast(self.vtable)).RemoveAt(@as(*const IPropertyChangeArray, @ptrCast(self)), i_index_);
            }
            pub inline fn isKeyInArray(self: *const T, key_: ?*const PROPERTYKEY) HRESULT {
                return @as(*const IPropertyChangeArray.VTable, @ptrCast(self.vtable)).IsKeyInArray(@as(*const IPropertyChangeArray, @ptrCast(self)), key_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyStoreCapabilities_Value = Guid.initString("c8e2d566-186e-4d49-bf41-6909ead56acc");
pub const IID_IPropertyStoreCapabilities = &IID_IPropertyStoreCapabilities_Value;
pub const IPropertyStoreCapabilities = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsPropertyWritable: *const fn (
            self: *const IPropertyStoreCapabilities,
            key: ?*const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isPropertyWritable(self: *const T, key_: ?*const PROPERTYKEY) HRESULT {
                return @as(*const IPropertyStoreCapabilities.VTable, @ptrCast(self.vtable)).IsPropertyWritable(@as(*const IPropertyStoreCapabilities, @ptrCast(self)), key_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PSC_STATE = enum(i32) {
    NORMAL = 0,
    NOTINSOURCE = 1,
    DIRTY = 2,
    READONLY = 3,
};
pub const PSC_NORMAL = PSC_STATE.NORMAL;
pub const PSC_NOTINSOURCE = PSC_STATE.NOTINSOURCE;
pub const PSC_DIRTY = PSC_STATE.DIRTY;
pub const PSC_READONLY = PSC_STATE.READONLY;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyStoreCache_Value = Guid.initString("3017056d-9a91-4e90-937d-746c72abbf4f");
pub const IID_IPropertyStoreCache = &IID_IPropertyStoreCache_Value;
pub const IPropertyStoreCache = extern struct {
    pub const VTable = extern struct {
        base: IPropertyStore.VTable,
        GetState: *const fn (
            self: *const IPropertyStoreCache,
            key: ?*const PROPERTYKEY,
            pstate: ?*PSC_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValueAndState: *const fn (
            self: *const IPropertyStoreCache,
            key: ?*const PROPERTYKEY,
            ppropvar: ?*PROPVARIANT,
            pstate: ?*PSC_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetState: *const fn (
            self: *const IPropertyStoreCache,
            key: ?*const PROPERTYKEY,
            state: PSC_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetValueAndState: *const fn (
            self: *const IPropertyStoreCache,
            key: ?*const PROPERTYKEY,
            ppropvar: ?*const PROPVARIANT,
            state: PSC_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPropertyStore.MethodMixin(T);
            pub inline fn getState(self: *const T, key_: ?*const PROPERTYKEY, pstate_: ?*PSC_STATE) HRESULT {
                return @as(*const IPropertyStoreCache.VTable, @ptrCast(self.vtable)).GetState(@as(*const IPropertyStoreCache, @ptrCast(self)), key_, pstate_);
            }
            pub inline fn getValueAndState(self: *const T, key_: ?*const PROPERTYKEY, ppropvar_: ?*PROPVARIANT, pstate_: ?*PSC_STATE) HRESULT {
                return @as(*const IPropertyStoreCache.VTable, @ptrCast(self.vtable)).GetValueAndState(@as(*const IPropertyStoreCache, @ptrCast(self)), key_, ppropvar_, pstate_);
            }
            pub inline fn setState(self: *const T, key_: ?*const PROPERTYKEY, state_: PSC_STATE) HRESULT {
                return @as(*const IPropertyStoreCache.VTable, @ptrCast(self.vtable)).SetState(@as(*const IPropertyStoreCache, @ptrCast(self)), key_, state_);
            }
            pub inline fn setValueAndState(self: *const T, key_: ?*const PROPERTYKEY, ppropvar_: ?*const PROPVARIANT, state_: PSC_STATE) HRESULT {
                return @as(*const IPropertyStoreCache.VTable, @ptrCast(self.vtable)).SetValueAndState(@as(*const IPropertyStoreCache, @ptrCast(self)), key_, ppropvar_, state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PROPENUMTYPE = enum(i32) {
    DISCRETEVALUE = 0,
    RANGEDVALUE = 1,
    DEFAULTVALUE = 2,
    ENDRANGE = 3,
};
pub const PET_DISCRETEVALUE = PROPENUMTYPE.DISCRETEVALUE;
pub const PET_RANGEDVALUE = PROPENUMTYPE.RANGEDVALUE;
pub const PET_DEFAULTVALUE = PROPENUMTYPE.DEFAULTVALUE;
pub const PET_ENDRANGE = PROPENUMTYPE.ENDRANGE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyEnumType_Value = Guid.initString("11e1fbf9-2d56-4a6b-8db3-7cd193a471f2");
pub const IID_IPropertyEnumType = &IID_IPropertyEnumType_Value;
pub const IPropertyEnumType = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetEnumType: *const fn (
            self: *const IPropertyEnumType,
            penumtype: ?*PROPENUMTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn (
            self: *const IPropertyEnumType,
            ppropvar: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRangeMinValue: *const fn (
            self: *const IPropertyEnumType,
            ppropvar_min: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRangeSetValue: *const fn (
            self: *const IPropertyEnumType,
            ppropvar_set: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayText: *const fn (
            self: *const IPropertyEnumType,
            ppsz_display: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getEnumType(self: *const T, penumtype_: ?*PROPENUMTYPE) HRESULT {
                return @as(*const IPropertyEnumType.VTable, @ptrCast(self.vtable)).GetEnumType(@as(*const IPropertyEnumType, @ptrCast(self)), penumtype_);
            }
            pub inline fn getValue(self: *const T, ppropvar_: ?*PROPVARIANT) HRESULT {
                return @as(*const IPropertyEnumType.VTable, @ptrCast(self.vtable)).GetValue(@as(*const IPropertyEnumType, @ptrCast(self)), ppropvar_);
            }
            pub inline fn getRangeMinValue(self: *const T, ppropvar_min_: ?*PROPVARIANT) HRESULT {
                return @as(*const IPropertyEnumType.VTable, @ptrCast(self.vtable)).GetRangeMinValue(@as(*const IPropertyEnumType, @ptrCast(self)), ppropvar_min_);
            }
            pub inline fn getRangeSetValue(self: *const T, ppropvar_set_: ?*PROPVARIANT) HRESULT {
                return @as(*const IPropertyEnumType.VTable, @ptrCast(self.vtable)).GetRangeSetValue(@as(*const IPropertyEnumType, @ptrCast(self)), ppropvar_set_);
            }
            pub inline fn getDisplayText(self: *const T, ppsz_display_: ?*?PWSTR) HRESULT {
                return @as(*const IPropertyEnumType.VTable, @ptrCast(self.vtable)).GetDisplayText(@as(*const IPropertyEnumType, @ptrCast(self)), ppsz_display_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IPropertyEnumType2_Value = Guid.initString("9b6e051c-5ddd-4321-9070-fe2acb55e794");
pub const IID_IPropertyEnumType2 = &IID_IPropertyEnumType2_Value;
pub const IPropertyEnumType2 = extern struct {
    pub const VTable = extern struct {
        base: IPropertyEnumType.VTable,
        GetImageReference: *const fn (
            self: *const IPropertyEnumType2,
            ppsz_image_res: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPropertyEnumType.MethodMixin(T);
            pub inline fn getImageReference(self: *const T, ppsz_image_res_: ?*?PWSTR) HRESULT {
                return @as(*const IPropertyEnumType2.VTable, @ptrCast(self.vtable)).GetImageReference(@as(*const IPropertyEnumType2, @ptrCast(self)), ppsz_image_res_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyEnumTypeList_Value = Guid.initString("a99400f4-3d84-4557-94ba-1242fb2cc9a6");
pub const IID_IPropertyEnumTypeList = &IID_IPropertyEnumTypeList_Value;
pub const IPropertyEnumTypeList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IPropertyEnumTypeList,
            pctypes: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IPropertyEnumTypeList,
            itype: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConditionAt: *const fn (
            self: *const IPropertyEnumTypeList,
            n_index: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindMatchingIndex: *const fn (
            self: *const IPropertyEnumTypeList,
            propvar_cmp: ?*const PROPVARIANT,
            pn_index: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, pctypes_: ?*u32) HRESULT {
                return @as(*const IPropertyEnumTypeList.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IPropertyEnumTypeList, @ptrCast(self)), pctypes_);
            }
            pub inline fn getAt(self: *const T, itype_: u32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IPropertyEnumTypeList.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IPropertyEnumTypeList, @ptrCast(self)), itype_, riid_, ppv_);
            }
            pub inline fn getConditionAt(self: *const T, n_index_: u32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IPropertyEnumTypeList.VTable, @ptrCast(self.vtable)).GetConditionAt(@as(*const IPropertyEnumTypeList, @ptrCast(self)), n_index_, riid_, ppv_);
            }
            pub inline fn findMatchingIndex(self: *const T, propvar_cmp_: ?*const PROPVARIANT, pn_index_: ?*u32) HRESULT {
                return @as(*const IPropertyEnumTypeList.VTable, @ptrCast(self.vtable)).FindMatchingIndex(@as(*const IPropertyEnumTypeList, @ptrCast(self)), propvar_cmp_, pn_index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PROPDESC_TYPE_FLAGS = enum(u32) {
    DEFAULT = 0,
    MULTIPLEVALUES = 1,
    ISINNATE = 2,
    ISGROUP = 4,
    CANGROUPBY = 8,
    CANSTACKBY = 16,
    ISTREEPROPERTY = 32,
    INCLUDEINFULLTEXTQUERY = 64,
    ISVIEWABLE = 128,
    ISQUERYABLE = 256,
    CANBEPURGED = 512,
    SEARCHRAWVALUE = 1024,
    DONTCOERCEEMPTYSTRINGS = 2048,
    ALWAYSINSUPPLEMENTALSTORE = 4096,
    ISSYSTEMPROPERTY = 2147483648,
    MASK_ALL = 2147491839,
    _,
    pub fn initFlags(o: struct {
        DEFAULT: u1 = 0,
        MULTIPLEVALUES: u1 = 0,
        ISINNATE: u1 = 0,
        ISGROUP: u1 = 0,
        CANGROUPBY: u1 = 0,
        CANSTACKBY: u1 = 0,
        ISTREEPROPERTY: u1 = 0,
        INCLUDEINFULLTEXTQUERY: u1 = 0,
        ISVIEWABLE: u1 = 0,
        ISQUERYABLE: u1 = 0,
        CANBEPURGED: u1 = 0,
        SEARCHRAWVALUE: u1 = 0,
        DONTCOERCEEMPTYSTRINGS: u1 = 0,
        ALWAYSINSUPPLEMENTALSTORE: u1 = 0,
        ISSYSTEMPROPERTY: u1 = 0,
        MASK_ALL: u1 = 0,
    }) PROPDESC_TYPE_FLAGS {
        return @as(PROPDESC_TYPE_FLAGS, @enumFromInt((if (o.DEFAULT == 1) @intFromEnum(PROPDESC_TYPE_FLAGS.DEFAULT) else 0) | (if (o.MULTIPLEVALUES == 1) @intFromEnum(PROPDESC_TYPE_FLAGS.MULTIPLEVALUES) else 0) | (if (o.ISINNATE == 1) @intFromEnum(PROPDESC_TYPE_FLAGS.ISINNATE) else 0) | (if (o.ISGROUP == 1) @intFromEnum(PROPDESC_TYPE_FLAGS.ISGROUP) else 0) | (if (o.CANGROUPBY == 1) @intFromEnum(PROPDESC_TYPE_FLAGS.CANGROUPBY) else 0) | (if (o.CANSTACKBY == 1) @intFromEnum(PROPDESC_TYPE_FLAGS.CANSTACKBY) else 0) | (if (o.ISTREEPROPERTY == 1) @intFromEnum(PROPDESC_TYPE_FLAGS.ISTREEPROPERTY) else 0) | (if (o.INCLUDEINFULLTEXTQUERY == 1) @intFromEnum(PROPDESC_TYPE_FLAGS.INCLUDEINFULLTEXTQUERY) else 0) | (if (o.ISVIEWABLE == 1) @intFromEnum(PROPDESC_TYPE_FLAGS.ISVIEWABLE) else 0) | (if (o.ISQUERYABLE == 1) @intFromEnum(PROPDESC_TYPE_FLAGS.ISQUERYABLE) else 0) | (if (o.CANBEPURGED == 1) @intFromEnum(PROPDESC_TYPE_FLAGS.CANBEPURGED) else 0) | (if (o.SEARCHRAWVALUE == 1) @intFromEnum(PROPDESC_TYPE_FLAGS.SEARCHRAWVALUE) else 0) | (if (o.DONTCOERCEEMPTYSTRINGS == 1) @intFromEnum(PROPDESC_TYPE_FLAGS.DONTCOERCEEMPTYSTRINGS) else 0) | (if (o.ALWAYSINSUPPLEMENTALSTORE == 1) @intFromEnum(PROPDESC_TYPE_FLAGS.ALWAYSINSUPPLEMENTALSTORE) else 0) | (if (o.ISSYSTEMPROPERTY == 1) @intFromEnum(PROPDESC_TYPE_FLAGS.ISSYSTEMPROPERTY) else 0) | (if (o.MASK_ALL == 1) @intFromEnum(PROPDESC_TYPE_FLAGS.MASK_ALL) else 0)));
    }
};
pub const PDTF_DEFAULT = PROPDESC_TYPE_FLAGS.DEFAULT;
pub const PDTF_MULTIPLEVALUES = PROPDESC_TYPE_FLAGS.MULTIPLEVALUES;
pub const PDTF_ISINNATE = PROPDESC_TYPE_FLAGS.ISINNATE;
pub const PDTF_ISGROUP = PROPDESC_TYPE_FLAGS.ISGROUP;
pub const PDTF_CANGROUPBY = PROPDESC_TYPE_FLAGS.CANGROUPBY;
pub const PDTF_CANSTACKBY = PROPDESC_TYPE_FLAGS.CANSTACKBY;
pub const PDTF_ISTREEPROPERTY = PROPDESC_TYPE_FLAGS.ISTREEPROPERTY;
pub const PDTF_INCLUDEINFULLTEXTQUERY = PROPDESC_TYPE_FLAGS.INCLUDEINFULLTEXTQUERY;
pub const PDTF_ISVIEWABLE = PROPDESC_TYPE_FLAGS.ISVIEWABLE;
pub const PDTF_ISQUERYABLE = PROPDESC_TYPE_FLAGS.ISQUERYABLE;
pub const PDTF_CANBEPURGED = PROPDESC_TYPE_FLAGS.CANBEPURGED;
pub const PDTF_SEARCHRAWVALUE = PROPDESC_TYPE_FLAGS.SEARCHRAWVALUE;
pub const PDTF_DONTCOERCEEMPTYSTRINGS = PROPDESC_TYPE_FLAGS.DONTCOERCEEMPTYSTRINGS;
pub const PDTF_ALWAYSINSUPPLEMENTALSTORE = PROPDESC_TYPE_FLAGS.ALWAYSINSUPPLEMENTALSTORE;
pub const PDTF_ISSYSTEMPROPERTY = PROPDESC_TYPE_FLAGS.ISSYSTEMPROPERTY;
pub const PDTF_MASK_ALL = PROPDESC_TYPE_FLAGS.MASK_ALL;

pub const PROPDESC_VIEW_FLAGS = enum(u32) {
    DEFAULT = 0,
    CENTERALIGN = 1,
    RIGHTALIGN = 2,
    BEGINNEWGROUP = 4,
    FILLAREA = 8,
    SORTDESCENDING = 16,
    SHOWONLYIFPRESENT = 32,
    SHOWBYDEFAULT = 64,
    SHOWINPRIMARYLIST = 128,
    SHOWINSECONDARYLIST = 256,
    HIDELABEL = 512,
    HIDDEN = 2048,
    CANWRAP = 4096,
    MASK_ALL = 7167,
    _,
    pub fn initFlags(o: struct {
        DEFAULT: u1 = 0,
        CENTERALIGN: u1 = 0,
        RIGHTALIGN: u1 = 0,
        BEGINNEWGROUP: u1 = 0,
        FILLAREA: u1 = 0,
        SORTDESCENDING: u1 = 0,
        SHOWONLYIFPRESENT: u1 = 0,
        SHOWBYDEFAULT: u1 = 0,
        SHOWINPRIMARYLIST: u1 = 0,
        SHOWINSECONDARYLIST: u1 = 0,
        HIDELABEL: u1 = 0,
        HIDDEN: u1 = 0,
        CANWRAP: u1 = 0,
        MASK_ALL: u1 = 0,
    }) PROPDESC_VIEW_FLAGS {
        return @as(PROPDESC_VIEW_FLAGS, @enumFromInt((if (o.DEFAULT == 1) @intFromEnum(PROPDESC_VIEW_FLAGS.DEFAULT) else 0) | (if (o.CENTERALIGN == 1) @intFromEnum(PROPDESC_VIEW_FLAGS.CENTERALIGN) else 0) | (if (o.RIGHTALIGN == 1) @intFromEnum(PROPDESC_VIEW_FLAGS.RIGHTALIGN) else 0) | (if (o.BEGINNEWGROUP == 1) @intFromEnum(PROPDESC_VIEW_FLAGS.BEGINNEWGROUP) else 0) | (if (o.FILLAREA == 1) @intFromEnum(PROPDESC_VIEW_FLAGS.FILLAREA) else 0) | (if (o.SORTDESCENDING == 1) @intFromEnum(PROPDESC_VIEW_FLAGS.SORTDESCENDING) else 0) | (if (o.SHOWONLYIFPRESENT == 1) @intFromEnum(PROPDESC_VIEW_FLAGS.SHOWONLYIFPRESENT) else 0) | (if (o.SHOWBYDEFAULT == 1) @intFromEnum(PROPDESC_VIEW_FLAGS.SHOWBYDEFAULT) else 0) | (if (o.SHOWINPRIMARYLIST == 1) @intFromEnum(PROPDESC_VIEW_FLAGS.SHOWINPRIMARYLIST) else 0) | (if (o.SHOWINSECONDARYLIST == 1) @intFromEnum(PROPDESC_VIEW_FLAGS.SHOWINSECONDARYLIST) else 0) | (if (o.HIDELABEL == 1) @intFromEnum(PROPDESC_VIEW_FLAGS.HIDELABEL) else 0) | (if (o.HIDDEN == 1) @intFromEnum(PROPDESC_VIEW_FLAGS.HIDDEN) else 0) | (if (o.CANWRAP == 1) @intFromEnum(PROPDESC_VIEW_FLAGS.CANWRAP) else 0) | (if (o.MASK_ALL == 1) @intFromEnum(PROPDESC_VIEW_FLAGS.MASK_ALL) else 0)));
    }
};
pub const PDVF_DEFAULT = PROPDESC_VIEW_FLAGS.DEFAULT;
pub const PDVF_CENTERALIGN = PROPDESC_VIEW_FLAGS.CENTERALIGN;
pub const PDVF_RIGHTALIGN = PROPDESC_VIEW_FLAGS.RIGHTALIGN;
pub const PDVF_BEGINNEWGROUP = PROPDESC_VIEW_FLAGS.BEGINNEWGROUP;
pub const PDVF_FILLAREA = PROPDESC_VIEW_FLAGS.FILLAREA;
pub const PDVF_SORTDESCENDING = PROPDESC_VIEW_FLAGS.SORTDESCENDING;
pub const PDVF_SHOWONLYIFPRESENT = PROPDESC_VIEW_FLAGS.SHOWONLYIFPRESENT;
pub const PDVF_SHOWBYDEFAULT = PROPDESC_VIEW_FLAGS.SHOWBYDEFAULT;
pub const PDVF_SHOWINPRIMARYLIST = PROPDESC_VIEW_FLAGS.SHOWINPRIMARYLIST;
pub const PDVF_SHOWINSECONDARYLIST = PROPDESC_VIEW_FLAGS.SHOWINSECONDARYLIST;
pub const PDVF_HIDELABEL = PROPDESC_VIEW_FLAGS.HIDELABEL;
pub const PDVF_HIDDEN = PROPDESC_VIEW_FLAGS.HIDDEN;
pub const PDVF_CANWRAP = PROPDESC_VIEW_FLAGS.CANWRAP;
pub const PDVF_MASK_ALL = PROPDESC_VIEW_FLAGS.MASK_ALL;

pub const PROPDESC_DISPLAYTYPE = enum(i32) {
    STRING = 0,
    NUMBER = 1,
    BOOLEAN = 2,
    DATETIME = 3,
    ENUMERATED = 4,
};
pub const PDDT_STRING = PROPDESC_DISPLAYTYPE.STRING;
pub const PDDT_NUMBER = PROPDESC_DISPLAYTYPE.NUMBER;
pub const PDDT_BOOLEAN = PROPDESC_DISPLAYTYPE.BOOLEAN;
pub const PDDT_DATETIME = PROPDESC_DISPLAYTYPE.DATETIME;
pub const PDDT_ENUMERATED = PROPDESC_DISPLAYTYPE.ENUMERATED;

pub const PROPDESC_GROUPING_RANGE = enum(i32) {
    DISCRETE = 0,
    ALPHANUMERIC = 1,
    SIZE = 2,
    DYNAMIC = 3,
    DATE = 4,
    PERCENT = 5,
    ENUMERATED = 6,
};
pub const PDGR_DISCRETE = PROPDESC_GROUPING_RANGE.DISCRETE;
pub const PDGR_ALPHANUMERIC = PROPDESC_GROUPING_RANGE.ALPHANUMERIC;
pub const PDGR_SIZE = PROPDESC_GROUPING_RANGE.SIZE;
pub const PDGR_DYNAMIC = PROPDESC_GROUPING_RANGE.DYNAMIC;
pub const PDGR_DATE = PROPDESC_GROUPING_RANGE.DATE;
pub const PDGR_PERCENT = PROPDESC_GROUPING_RANGE.PERCENT;
pub const PDGR_ENUMERATED = PROPDESC_GROUPING_RANGE.ENUMERATED;

pub const PROPDESC_FORMAT_FLAGS = enum(u32) {
    DEFAULT = 0,
    PREFIXNAME = 1,
    FILENAME = 2,
    ALWAYSKB = 4,
    RESERVED_RIGHTTOLEFT = 8,
    SHORTTIME = 16,
    LONGTIME = 32,
    HIDETIME = 64,
    SHORTDATE = 128,
    LONGDATE = 256,
    HIDEDATE = 512,
    RELATIVEDATE = 1024,
    USEEDITINVITATION = 2048,
    READONLY = 4096,
    NOAUTOREADINGORDER = 8192,
    _,
    pub fn initFlags(o: struct {
        DEFAULT: u1 = 0,
        PREFIXNAME: u1 = 0,
        FILENAME: u1 = 0,
        ALWAYSKB: u1 = 0,
        RESERVED_RIGHTTOLEFT: u1 = 0,
        SHORTTIME: u1 = 0,
        LONGTIME: u1 = 0,
        HIDETIME: u1 = 0,
        SHORTDATE: u1 = 0,
        LONGDATE: u1 = 0,
        HIDEDATE: u1 = 0,
        RELATIVEDATE: u1 = 0,
        USEEDITINVITATION: u1 = 0,
        READONLY: u1 = 0,
        NOAUTOREADINGORDER: u1 = 0,
    }) PROPDESC_FORMAT_FLAGS {
        return @as(PROPDESC_FORMAT_FLAGS, @enumFromInt((if (o.DEFAULT == 1) @intFromEnum(PROPDESC_FORMAT_FLAGS.DEFAULT) else 0) | (if (o.PREFIXNAME == 1) @intFromEnum(PROPDESC_FORMAT_FLAGS.PREFIXNAME) else 0) | (if (o.FILENAME == 1) @intFromEnum(PROPDESC_FORMAT_FLAGS.FILENAME) else 0) | (if (o.ALWAYSKB == 1) @intFromEnum(PROPDESC_FORMAT_FLAGS.ALWAYSKB) else 0) | (if (o.RESERVED_RIGHTTOLEFT == 1) @intFromEnum(PROPDESC_FORMAT_FLAGS.RESERVED_RIGHTTOLEFT) else 0) | (if (o.SHORTTIME == 1) @intFromEnum(PROPDESC_FORMAT_FLAGS.SHORTTIME) else 0) | (if (o.LONGTIME == 1) @intFromEnum(PROPDESC_FORMAT_FLAGS.LONGTIME) else 0) | (if (o.HIDETIME == 1) @intFromEnum(PROPDESC_FORMAT_FLAGS.HIDETIME) else 0) | (if (o.SHORTDATE == 1) @intFromEnum(PROPDESC_FORMAT_FLAGS.SHORTDATE) else 0) | (if (o.LONGDATE == 1) @intFromEnum(PROPDESC_FORMAT_FLAGS.LONGDATE) else 0) | (if (o.HIDEDATE == 1) @intFromEnum(PROPDESC_FORMAT_FLAGS.HIDEDATE) else 0) | (if (o.RELATIVEDATE == 1) @intFromEnum(PROPDESC_FORMAT_FLAGS.RELATIVEDATE) else 0) | (if (o.USEEDITINVITATION == 1) @intFromEnum(PROPDESC_FORMAT_FLAGS.USEEDITINVITATION) else 0) | (if (o.READONLY == 1) @intFromEnum(PROPDESC_FORMAT_FLAGS.READONLY) else 0) | (if (o.NOAUTOREADINGORDER == 1) @intFromEnum(PROPDESC_FORMAT_FLAGS.NOAUTOREADINGORDER) else 0)));
    }
};
pub const PDFF_DEFAULT = PROPDESC_FORMAT_FLAGS.DEFAULT;
pub const PDFF_PREFIXNAME = PROPDESC_FORMAT_FLAGS.PREFIXNAME;
pub const PDFF_FILENAME = PROPDESC_FORMAT_FLAGS.FILENAME;
pub const PDFF_ALWAYSKB = PROPDESC_FORMAT_FLAGS.ALWAYSKB;
pub const PDFF_RESERVED_RIGHTTOLEFT = PROPDESC_FORMAT_FLAGS.RESERVED_RIGHTTOLEFT;
pub const PDFF_SHORTTIME = PROPDESC_FORMAT_FLAGS.SHORTTIME;
pub const PDFF_LONGTIME = PROPDESC_FORMAT_FLAGS.LONGTIME;
pub const PDFF_HIDETIME = PROPDESC_FORMAT_FLAGS.HIDETIME;
pub const PDFF_SHORTDATE = PROPDESC_FORMAT_FLAGS.SHORTDATE;
pub const PDFF_LONGDATE = PROPDESC_FORMAT_FLAGS.LONGDATE;
pub const PDFF_HIDEDATE = PROPDESC_FORMAT_FLAGS.HIDEDATE;
pub const PDFF_RELATIVEDATE = PROPDESC_FORMAT_FLAGS.RELATIVEDATE;
pub const PDFF_USEEDITINVITATION = PROPDESC_FORMAT_FLAGS.USEEDITINVITATION;
pub const PDFF_READONLY = PROPDESC_FORMAT_FLAGS.READONLY;
pub const PDFF_NOAUTOREADINGORDER = PROPDESC_FORMAT_FLAGS.NOAUTOREADINGORDER;

pub const PROPDESC_SORTDESCRIPTION = enum(i32) {
    GENERAL = 0,
    A_Z = 1,
    LOWEST_HIGHEST = 2,
    SMALLEST_BIGGEST = 3,
    OLDEST_NEWEST = 4,
};
pub const PDSD_GENERAL = PROPDESC_SORTDESCRIPTION.GENERAL;
pub const PDSD_A_Z = PROPDESC_SORTDESCRIPTION.A_Z;
pub const PDSD_LOWEST_HIGHEST = PROPDESC_SORTDESCRIPTION.LOWEST_HIGHEST;
pub const PDSD_SMALLEST_BIGGEST = PROPDESC_SORTDESCRIPTION.SMALLEST_BIGGEST;
pub const PDSD_OLDEST_NEWEST = PROPDESC_SORTDESCRIPTION.OLDEST_NEWEST;

pub const PROPDESC_RELATIVEDESCRIPTION_TYPE = enum(i32) {
    GENERAL = 0,
    DATE = 1,
    SIZE = 2,
    COUNT = 3,
    REVISION = 4,
    LENGTH = 5,
    DURATION = 6,
    SPEED = 7,
    RATE = 8,
    RATING = 9,
    PRIORITY = 10,
};
pub const PDRDT_GENERAL = PROPDESC_RELATIVEDESCRIPTION_TYPE.GENERAL;
pub const PDRDT_DATE = PROPDESC_RELATIVEDESCRIPTION_TYPE.DATE;
pub const PDRDT_SIZE = PROPDESC_RELATIVEDESCRIPTION_TYPE.SIZE;
pub const PDRDT_COUNT = PROPDESC_RELATIVEDESCRIPTION_TYPE.COUNT;
pub const PDRDT_REVISION = PROPDESC_RELATIVEDESCRIPTION_TYPE.REVISION;
pub const PDRDT_LENGTH = PROPDESC_RELATIVEDESCRIPTION_TYPE.LENGTH;
pub const PDRDT_DURATION = PROPDESC_RELATIVEDESCRIPTION_TYPE.DURATION;
pub const PDRDT_SPEED = PROPDESC_RELATIVEDESCRIPTION_TYPE.SPEED;
pub const PDRDT_RATE = PROPDESC_RELATIVEDESCRIPTION_TYPE.RATE;
pub const PDRDT_RATING = PROPDESC_RELATIVEDESCRIPTION_TYPE.RATING;
pub const PDRDT_PRIORITY = PROPDESC_RELATIVEDESCRIPTION_TYPE.PRIORITY;

pub const PROPDESC_AGGREGATION_TYPE = enum(i32) {
    DEFAULT = 0,
    FIRST = 1,
    SUM = 2,
    AVERAGE = 3,
    DATERANGE = 4,
    UNION = 5,
    MAX = 6,
    MIN = 7,
};
pub const PDAT_DEFAULT = PROPDESC_AGGREGATION_TYPE.DEFAULT;
pub const PDAT_FIRST = PROPDESC_AGGREGATION_TYPE.FIRST;
pub const PDAT_SUM = PROPDESC_AGGREGATION_TYPE.SUM;
pub const PDAT_AVERAGE = PROPDESC_AGGREGATION_TYPE.AVERAGE;
pub const PDAT_DATERANGE = PROPDESC_AGGREGATION_TYPE.DATERANGE;
pub const PDAT_UNION = PROPDESC_AGGREGATION_TYPE.UNION;
pub const PDAT_MAX = PROPDESC_AGGREGATION_TYPE.MAX;
pub const PDAT_MIN = PROPDESC_AGGREGATION_TYPE.MIN;

pub const PROPDESC_CONDITION_TYPE = enum(i32) {
    NONE = 0,
    STRING = 1,
    SIZE = 2,
    DATETIME = 3,
    BOOLEAN = 4,
    NUMBER = 5,
};
pub const PDCOT_NONE = PROPDESC_CONDITION_TYPE.NONE;
pub const PDCOT_STRING = PROPDESC_CONDITION_TYPE.STRING;
pub const PDCOT_SIZE = PROPDESC_CONDITION_TYPE.SIZE;
pub const PDCOT_DATETIME = PROPDESC_CONDITION_TYPE.DATETIME;
pub const PDCOT_BOOLEAN = PROPDESC_CONDITION_TYPE.BOOLEAN;
pub const PDCOT_NUMBER = PROPDESC_CONDITION_TYPE.NUMBER;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyDescription_Value = Guid.initString("6f79d558-3e96-4549-a1d1-7d75d2288814");
pub const IID_IPropertyDescription = &IID_IPropertyDescription_Value;
pub const IPropertyDescription = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPropertyKey: *const fn (
            self: *const IPropertyDescription,
            pkey: ?*PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCanonicalName: *const fn (
            self: *const IPropertyDescription,
            ppsz_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyType: *const fn (
            self: *const IPropertyDescription,
            pvartype: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayName: *const fn (
            self: *const IPropertyDescription,
            ppsz_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEditInvitation: *const fn (
            self: *const IPropertyDescription,
            ppsz_invite: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTypeFlags: *const fn (
            self: *const IPropertyDescription,
            mask: PROPDESC_TYPE_FLAGS,
            ppdt_flags: ?*PROPDESC_TYPE_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewFlags: *const fn (
            self: *const IPropertyDescription,
            ppdv_flags: ?*PROPDESC_VIEW_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultColumnWidth: *const fn (
            self: *const IPropertyDescription,
            pcx_chars: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayType: *const fn (
            self: *const IPropertyDescription,
            pdisplaytype: ?*PROPDESC_DISPLAYTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnState: *const fn (
            self: *const IPropertyDescription,
            pcs_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroupingRange: *const fn (
            self: *const IPropertyDescription,
            pgr: ?*PROPDESC_GROUPING_RANGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRelativeDescriptionType: *const fn (
            self: *const IPropertyDescription,
            prdt: ?*PROPDESC_RELATIVEDESCRIPTION_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRelativeDescription: *const fn (
            self: *const IPropertyDescription,
            propvar1: ?*const PROPVARIANT,
            propvar2: ?*const PROPVARIANT,
            ppsz_desc1: ?*?PWSTR,
            ppsz_desc2: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSortDescription: *const fn (
            self: *const IPropertyDescription,
            psd: ?*PROPDESC_SORTDESCRIPTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSortDescriptionLabel: *const fn (
            self: *const IPropertyDescription,
            f_descending: BOOL,
            ppsz_description: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAggregationType: *const fn (
            self: *const IPropertyDescription,
            paggtype: ?*PROPDESC_AGGREGATION_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConditionType: *const fn (
            self: *const IPropertyDescription,
            pcontype: ?*PROPDESC_CONDITION_TYPE,
            pop_default: ?*CONDITION_OPERATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumTypeList: *const fn (
            self: *const IPropertyDescription,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CoerceToCanonicalValue: *const fn (
            self: *const IPropertyDescription,
            ppropvar: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FormatForDisplay: *const fn (
            self: *const IPropertyDescription,
            propvar: ?*const PROPVARIANT,
            pdf_flags: PROPDESC_FORMAT_FLAGS,
            ppsz_display: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsValueCanonical: *const fn (
            self: *const IPropertyDescription,
            propvar: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPropertyKey(self: *const T, pkey_: ?*PROPERTYKEY) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).GetPropertyKey(@as(*const IPropertyDescription, @ptrCast(self)), pkey_);
            }
            pub inline fn getCanonicalName(self: *const T, ppsz_name_: ?*?PWSTR) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).GetCanonicalName(@as(*const IPropertyDescription, @ptrCast(self)), ppsz_name_);
            }
            pub inline fn getPropertyType(self: *const T, pvartype_: ?*u16) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).GetPropertyType(@as(*const IPropertyDescription, @ptrCast(self)), pvartype_);
            }
            pub inline fn getDisplayName(self: *const T, ppsz_name_: ?*?PWSTR) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).GetDisplayName(@as(*const IPropertyDescription, @ptrCast(self)), ppsz_name_);
            }
            pub inline fn getEditInvitation(self: *const T, ppsz_invite_: ?*?PWSTR) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).GetEditInvitation(@as(*const IPropertyDescription, @ptrCast(self)), ppsz_invite_);
            }
            pub inline fn getTypeFlags(self: *const T, mask_: PROPDESC_TYPE_FLAGS, ppdt_flags_: ?*PROPDESC_TYPE_FLAGS) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).GetTypeFlags(@as(*const IPropertyDescription, @ptrCast(self)), mask_, ppdt_flags_);
            }
            pub inline fn getViewFlags(self: *const T, ppdv_flags_: ?*PROPDESC_VIEW_FLAGS) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).GetViewFlags(@as(*const IPropertyDescription, @ptrCast(self)), ppdv_flags_);
            }
            pub inline fn getDefaultColumnWidth(self: *const T, pcx_chars_: ?*u32) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).GetDefaultColumnWidth(@as(*const IPropertyDescription, @ptrCast(self)), pcx_chars_);
            }
            pub inline fn getDisplayType(self: *const T, pdisplaytype_: ?*PROPDESC_DISPLAYTYPE) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).GetDisplayType(@as(*const IPropertyDescription, @ptrCast(self)), pdisplaytype_);
            }
            pub inline fn getColumnState(self: *const T, pcs_flags_: ?*u32) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).GetColumnState(@as(*const IPropertyDescription, @ptrCast(self)), pcs_flags_);
            }
            pub inline fn getGroupingRange(self: *const T, pgr_: ?*PROPDESC_GROUPING_RANGE) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).GetGroupingRange(@as(*const IPropertyDescription, @ptrCast(self)), pgr_);
            }
            pub inline fn getRelativeDescriptionType(self: *const T, prdt_: ?*PROPDESC_RELATIVEDESCRIPTION_TYPE) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).GetRelativeDescriptionType(@as(*const IPropertyDescription, @ptrCast(self)), prdt_);
            }
            pub inline fn getRelativeDescription(self: *const T, propvar1_: ?*const PROPVARIANT, propvar2_: ?*const PROPVARIANT, ppsz_desc1_: ?*?PWSTR, ppsz_desc2_: ?*?PWSTR) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).GetRelativeDescription(@as(*const IPropertyDescription, @ptrCast(self)), propvar1_, propvar2_, ppsz_desc1_, ppsz_desc2_);
            }
            pub inline fn getSortDescription(self: *const T, psd_: ?*PROPDESC_SORTDESCRIPTION) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).GetSortDescription(@as(*const IPropertyDescription, @ptrCast(self)), psd_);
            }
            pub inline fn getSortDescriptionLabel(self: *const T, f_descending_: BOOL, ppsz_description_: ?*?PWSTR) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).GetSortDescriptionLabel(@as(*const IPropertyDescription, @ptrCast(self)), f_descending_, ppsz_description_);
            }
            pub inline fn getAggregationType(self: *const T, paggtype_: ?*PROPDESC_AGGREGATION_TYPE) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).GetAggregationType(@as(*const IPropertyDescription, @ptrCast(self)), paggtype_);
            }
            pub inline fn getConditionType(self: *const T, pcontype_: ?*PROPDESC_CONDITION_TYPE, pop_default_: ?*CONDITION_OPERATION) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).GetConditionType(@as(*const IPropertyDescription, @ptrCast(self)), pcontype_, pop_default_);
            }
            pub inline fn getEnumTypeList(self: *const T, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).GetEnumTypeList(@as(*const IPropertyDescription, @ptrCast(self)), riid_, ppv_);
            }
            pub inline fn coerceToCanonicalValue(self: *const T, ppropvar_: ?*PROPVARIANT) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).CoerceToCanonicalValue(@as(*const IPropertyDescription, @ptrCast(self)), ppropvar_);
            }
            pub inline fn formatForDisplay(self: *const T, propvar_: ?*const PROPVARIANT, pdf_flags_: PROPDESC_FORMAT_FLAGS, ppsz_display_: ?*?PWSTR) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).FormatForDisplay(@as(*const IPropertyDescription, @ptrCast(self)), propvar_, pdf_flags_, ppsz_display_);
            }
            pub inline fn isValueCanonical(self: *const T, propvar_: ?*const PROPVARIANT) HRESULT {
                return @as(*const IPropertyDescription.VTable, @ptrCast(self.vtable)).IsValueCanonical(@as(*const IPropertyDescription, @ptrCast(self)), propvar_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IPropertyDescription2_Value = Guid.initString("57d2eded-5062-400e-b107-5dae79fe57a6");
pub const IID_IPropertyDescription2 = &IID_IPropertyDescription2_Value;
pub const IPropertyDescription2 = extern struct {
    pub const VTable = extern struct {
        base: IPropertyDescription.VTable,
        GetImageReferenceForValue: *const fn (
            self: *const IPropertyDescription2,
            propvar: ?*const PROPVARIANT,
            ppsz_image_res: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPropertyDescription.MethodMixin(T);
            pub inline fn getImageReferenceForValue(self: *const T, propvar_: ?*const PROPVARIANT, ppsz_image_res_: ?*?PWSTR) HRESULT {
                return @as(*const IPropertyDescription2.VTable, @ptrCast(self.vtable)).GetImageReferenceForValue(@as(*const IPropertyDescription2, @ptrCast(self)), propvar_, ppsz_image_res_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyDescriptionAliasInfo_Value = Guid.initString("f67104fc-2af9-46fd-b32d-243c1404f3d1");
pub const IID_IPropertyDescriptionAliasInfo = &IID_IPropertyDescriptionAliasInfo_Value;
pub const IPropertyDescriptionAliasInfo = extern struct {
    pub const VTable = extern struct {
        base: IPropertyDescription.VTable,
        GetSortByAlias: *const fn (
            self: *const IPropertyDescriptionAliasInfo,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAdditionalSortByAliases: *const fn (
            self: *const IPropertyDescriptionAliasInfo,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPropertyDescription.MethodMixin(T);
            pub inline fn getSortByAlias(self: *const T, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IPropertyDescriptionAliasInfo.VTable, @ptrCast(self.vtable)).GetSortByAlias(@as(*const IPropertyDescriptionAliasInfo, @ptrCast(self)), riid_, ppv_);
            }
            pub inline fn getAdditionalSortByAliases(self: *const T, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IPropertyDescriptionAliasInfo.VTable, @ptrCast(self.vtable)).GetAdditionalSortByAliases(@as(*const IPropertyDescriptionAliasInfo, @ptrCast(self)), riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PROPDESC_SEARCHINFO_FLAGS = enum(u32) {
    DEFAULT = 0,
    ININVERTEDINDEX = 1,
    ISCOLUMN = 2,
    ISCOLUMNSPARSE = 4,
    ALWAYSINCLUDE = 8,
    USEFORTYPEAHEAD = 16,
    _,
    pub fn initFlags(o: struct {
        DEFAULT: u1 = 0,
        ININVERTEDINDEX: u1 = 0,
        ISCOLUMN: u1 = 0,
        ISCOLUMNSPARSE: u1 = 0,
        ALWAYSINCLUDE: u1 = 0,
        USEFORTYPEAHEAD: u1 = 0,
    }) PROPDESC_SEARCHINFO_FLAGS {
        return @as(PROPDESC_SEARCHINFO_FLAGS, @enumFromInt((if (o.DEFAULT == 1) @intFromEnum(PROPDESC_SEARCHINFO_FLAGS.DEFAULT) else 0) | (if (o.ININVERTEDINDEX == 1) @intFromEnum(PROPDESC_SEARCHINFO_FLAGS.ININVERTEDINDEX) else 0) | (if (o.ISCOLUMN == 1) @intFromEnum(PROPDESC_SEARCHINFO_FLAGS.ISCOLUMN) else 0) | (if (o.ISCOLUMNSPARSE == 1) @intFromEnum(PROPDESC_SEARCHINFO_FLAGS.ISCOLUMNSPARSE) else 0) | (if (o.ALWAYSINCLUDE == 1) @intFromEnum(PROPDESC_SEARCHINFO_FLAGS.ALWAYSINCLUDE) else 0) | (if (o.USEFORTYPEAHEAD == 1) @intFromEnum(PROPDESC_SEARCHINFO_FLAGS.USEFORTYPEAHEAD) else 0)));
    }
};
pub const PDSIF_DEFAULT = PROPDESC_SEARCHINFO_FLAGS.DEFAULT;
pub const PDSIF_ININVERTEDINDEX = PROPDESC_SEARCHINFO_FLAGS.ININVERTEDINDEX;
pub const PDSIF_ISCOLUMN = PROPDESC_SEARCHINFO_FLAGS.ISCOLUMN;
pub const PDSIF_ISCOLUMNSPARSE = PROPDESC_SEARCHINFO_FLAGS.ISCOLUMNSPARSE;
pub const PDSIF_ALWAYSINCLUDE = PROPDESC_SEARCHINFO_FLAGS.ALWAYSINCLUDE;
pub const PDSIF_USEFORTYPEAHEAD = PROPDESC_SEARCHINFO_FLAGS.USEFORTYPEAHEAD;

pub const PROPDESC_COLUMNINDEX_TYPE = enum(i32) {
    NONE = 0,
    ONDISK = 1,
    INMEMORY = 2,
    ONDEMAND = 3,
    ONDISKALL = 4,
    ONDISKVECTOR = 5,
};
pub const PDCIT_NONE = PROPDESC_COLUMNINDEX_TYPE.NONE;
pub const PDCIT_ONDISK = PROPDESC_COLUMNINDEX_TYPE.ONDISK;
pub const PDCIT_INMEMORY = PROPDESC_COLUMNINDEX_TYPE.INMEMORY;
pub const PDCIT_ONDEMAND = PROPDESC_COLUMNINDEX_TYPE.ONDEMAND;
pub const PDCIT_ONDISKALL = PROPDESC_COLUMNINDEX_TYPE.ONDISKALL;
pub const PDCIT_ONDISKVECTOR = PROPDESC_COLUMNINDEX_TYPE.ONDISKVECTOR;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyDescriptionSearchInfo_Value = Guid.initString("078f91bd-29a2-440f-924e-46a291524520");
pub const IID_IPropertyDescriptionSearchInfo = &IID_IPropertyDescriptionSearchInfo_Value;
pub const IPropertyDescriptionSearchInfo = extern struct {
    pub const VTable = extern struct {
        base: IPropertyDescription.VTable,
        GetSearchInfoFlags: *const fn (
            self: *const IPropertyDescriptionSearchInfo,
            ppdsi_flags: ?*PROPDESC_SEARCHINFO_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnIndexType: *const fn (
            self: *const IPropertyDescriptionSearchInfo,
            ppdci_type: ?*PROPDESC_COLUMNINDEX_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProjectionString: *const fn (
            self: *const IPropertyDescriptionSearchInfo,
            ppsz_projection: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxSize: *const fn (
            self: *const IPropertyDescriptionSearchInfo,
            pcb_max_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPropertyDescription.MethodMixin(T);
            pub inline fn getSearchInfoFlags(self: *const T, ppdsi_flags_: ?*PROPDESC_SEARCHINFO_FLAGS) HRESULT {
                return @as(*const IPropertyDescriptionSearchInfo.VTable, @ptrCast(self.vtable)).GetSearchInfoFlags(@as(*const IPropertyDescriptionSearchInfo, @ptrCast(self)), ppdsi_flags_);
            }
            pub inline fn getColumnIndexType(self: *const T, ppdci_type_: ?*PROPDESC_COLUMNINDEX_TYPE) HRESULT {
                return @as(*const IPropertyDescriptionSearchInfo.VTable, @ptrCast(self.vtable)).GetColumnIndexType(@as(*const IPropertyDescriptionSearchInfo, @ptrCast(self)), ppdci_type_);
            }
            pub inline fn getProjectionString(self: *const T, ppsz_projection_: ?*?PWSTR) HRESULT {
                return @as(*const IPropertyDescriptionSearchInfo.VTable, @ptrCast(self.vtable)).GetProjectionString(@as(*const IPropertyDescriptionSearchInfo, @ptrCast(self)), ppsz_projection_);
            }
            pub inline fn getMaxSize(self: *const T, pcb_max_size_: ?*u32) HRESULT {
                return @as(*const IPropertyDescriptionSearchInfo.VTable, @ptrCast(self.vtable)).GetMaxSize(@as(*const IPropertyDescriptionSearchInfo, @ptrCast(self)), pcb_max_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IPropertyDescriptionRelatedPropertyInfo_Value = Guid.initString("507393f4-2a3d-4a60-b59e-d9c75716c2dd");
pub const IID_IPropertyDescriptionRelatedPropertyInfo = &IID_IPropertyDescriptionRelatedPropertyInfo_Value;
pub const IPropertyDescriptionRelatedPropertyInfo = extern struct {
    pub const VTable = extern struct {
        base: IPropertyDescription.VTable,
        GetRelatedProperty: *const fn (
            self: *const IPropertyDescriptionRelatedPropertyInfo,
            psz_relationship_name: ?[*:0]const u16,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPropertyDescription.MethodMixin(T);
            pub inline fn getRelatedProperty(self: *const T, psz_relationship_name_: ?[*:0]const u16, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IPropertyDescriptionRelatedPropertyInfo.VTable, @ptrCast(self.vtable)).GetRelatedProperty(@as(*const IPropertyDescriptionRelatedPropertyInfo, @ptrCast(self)), psz_relationship_name_, riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PROPDESC_ENUMFILTER = enum(i32) {
    ALL = 0,
    SYSTEM = 1,
    NONSYSTEM = 2,
    VIEWABLE = 3,
    QUERYABLE = 4,
    INFULLTEXTQUERY = 5,
    COLUMN = 6,
};
pub const PDEF_ALL = PROPDESC_ENUMFILTER.ALL;
pub const PDEF_SYSTEM = PROPDESC_ENUMFILTER.SYSTEM;
pub const PDEF_NONSYSTEM = PROPDESC_ENUMFILTER.NONSYSTEM;
pub const PDEF_VIEWABLE = PROPDESC_ENUMFILTER.VIEWABLE;
pub const PDEF_QUERYABLE = PROPDESC_ENUMFILTER.QUERYABLE;
pub const PDEF_INFULLTEXTQUERY = PROPDESC_ENUMFILTER.INFULLTEXTQUERY;
pub const PDEF_COLUMN = PROPDESC_ENUMFILTER.COLUMN;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IPropertySystem_Value = Guid.initString("ca724e8a-c3e6-442b-88a4-6fb0db8035a3");
pub const IID_IPropertySystem = &IID_IPropertySystem_Value;
pub const IPropertySystem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPropertyDescription: *const fn (
            self: *const IPropertySystem,
            propkey: ?*const PROPERTYKEY,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyDescriptionByName: *const fn (
            self: *const IPropertySystem,
            psz_canonical_name: ?[*:0]const u16,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyDescriptionListFromString: *const fn (
            self: *const IPropertySystem,
            psz_prop_list: ?[*:0]const u16,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumeratePropertyDescriptions: *const fn (
            self: *const IPropertySystem,
            filter_on: PROPDESC_ENUMFILTER,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FormatForDisplay: *const fn (
            self: *const IPropertySystem,
            key: ?*const PROPERTYKEY,
            propvar: ?*const PROPVARIANT,
            pdff: PROPDESC_FORMAT_FLAGS,
            psz_text: [*:0]u16,
            cch_text: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FormatForDisplayAlloc: *const fn (
            self: *const IPropertySystem,
            key: ?*const PROPERTYKEY,
            propvar: ?*const PROPVARIANT,
            pdff: PROPDESC_FORMAT_FLAGS,
            ppsz_display: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterPropertySchema: *const fn (
            self: *const IPropertySystem,
            psz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterPropertySchema: *const fn (
            self: *const IPropertySystem,
            psz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshPropertySchema: *const fn (
            self: *const IPropertySystem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPropertyDescription(self: *const T, propkey_: ?*const PROPERTYKEY, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IPropertySystem.VTable, @ptrCast(self.vtable)).GetPropertyDescription(@as(*const IPropertySystem, @ptrCast(self)), propkey_, riid_, ppv_);
            }
            pub inline fn getPropertyDescriptionByName(self: *const T, psz_canonical_name_: ?[*:0]const u16, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IPropertySystem.VTable, @ptrCast(self.vtable)).GetPropertyDescriptionByName(@as(*const IPropertySystem, @ptrCast(self)), psz_canonical_name_, riid_, ppv_);
            }
            pub inline fn getPropertyDescriptionListFromString(self: *const T, psz_prop_list_: ?[*:0]const u16, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IPropertySystem.VTable, @ptrCast(self.vtable)).GetPropertyDescriptionListFromString(@as(*const IPropertySystem, @ptrCast(self)), psz_prop_list_, riid_, ppv_);
            }
            pub inline fn enumeratePropertyDescriptions(self: *const T, filter_on_: PROPDESC_ENUMFILTER, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IPropertySystem.VTable, @ptrCast(self.vtable)).EnumeratePropertyDescriptions(@as(*const IPropertySystem, @ptrCast(self)), filter_on_, riid_, ppv_);
            }
            pub inline fn formatForDisplay(self: *const T, key_: ?*const PROPERTYKEY, propvar_: ?*const PROPVARIANT, pdff_: PROPDESC_FORMAT_FLAGS, psz_text_: [*:0]u16, cch_text_: u32) HRESULT {
                return @as(*const IPropertySystem.VTable, @ptrCast(self.vtable)).FormatForDisplay(@as(*const IPropertySystem, @ptrCast(self)), key_, propvar_, pdff_, psz_text_, cch_text_);
            }
            pub inline fn formatForDisplayAlloc(self: *const T, key_: ?*const PROPERTYKEY, propvar_: ?*const PROPVARIANT, pdff_: PROPDESC_FORMAT_FLAGS, ppsz_display_: ?*?PWSTR) HRESULT {
                return @as(*const IPropertySystem.VTable, @ptrCast(self.vtable)).FormatForDisplayAlloc(@as(*const IPropertySystem, @ptrCast(self)), key_, propvar_, pdff_, ppsz_display_);
            }
            pub inline fn registerPropertySchema(self: *const T, psz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IPropertySystem.VTable, @ptrCast(self.vtable)).RegisterPropertySchema(@as(*const IPropertySystem, @ptrCast(self)), psz_path_);
            }
            pub inline fn unregisterPropertySchema(self: *const T, psz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IPropertySystem.VTable, @ptrCast(self.vtable)).UnregisterPropertySchema(@as(*const IPropertySystem, @ptrCast(self)), psz_path_);
            }
            pub inline fn refreshPropertySchema(self: *const T) HRESULT {
                return @as(*const IPropertySystem.VTable, @ptrCast(self.vtable)).RefreshPropertySchema(@as(*const IPropertySystem, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyDescriptionList_Value = Guid.initString("1f9fc1d0-c39b-4b26-817f-011967d3440e");
pub const IID_IPropertyDescriptionList = &IID_IPropertyDescriptionList_Value;
pub const IPropertyDescriptionList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IPropertyDescriptionList,
            pc_elem: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const IPropertyDescriptionList,
            i_elem: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, pc_elem_: ?*u32) HRESULT {
                return @as(*const IPropertyDescriptionList.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IPropertyDescriptionList, @ptrCast(self)), pc_elem_);
            }
            pub inline fn getAt(self: *const T, i_elem_: u32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IPropertyDescriptionList.VTable, @ptrCast(self.vtable)).GetAt(@as(*const IPropertyDescriptionList, @ptrCast(self)), i_elem_, riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertyStoreFactory_Value = Guid.initString("bc110b6d-57e8-4148-a9c6-91015ab2f3a5");
pub const IID_IPropertyStoreFactory = &IID_IPropertyStoreFactory_Value;
pub const IPropertyStoreFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPropertyStore: *const fn (
            self: *const IPropertyStoreFactory,
            flags: GETPROPERTYSTOREFLAGS,
            p_unk_factory: ?*IUnknown,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyStoreForKeys: *const fn (
            self: *const IPropertyStoreFactory,
            rg_keys: ?*const PROPERTYKEY,
            c_keys: u32,
            flags: GETPROPERTYSTOREFLAGS,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPropertyStore(self: *const T, flags_: GETPROPERTYSTOREFLAGS, p_unk_factory_: ?*IUnknown, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IPropertyStoreFactory.VTable, @ptrCast(self.vtable)).GetPropertyStore(@as(*const IPropertyStoreFactory, @ptrCast(self)), flags_, p_unk_factory_, riid_, ppv_);
            }
            pub inline fn getPropertyStoreForKeys(self: *const T, rg_keys_: ?*const PROPERTYKEY, c_keys_: u32, flags_: GETPROPERTYSTOREFLAGS, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IPropertyStoreFactory.VTable, @ptrCast(self.vtable)).GetPropertyStoreForKeys(@as(*const IPropertyStoreFactory, @ptrCast(self)), rg_keys_, c_keys_, flags_, riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDelayedPropertyStoreFactory_Value = Guid.initString("40d4577f-e237-4bdb-bd69-58f089431b6a");
pub const IID_IDelayedPropertyStoreFactory = &IID_IDelayedPropertyStoreFactory_Value;
pub const IDelayedPropertyStoreFactory = extern struct {
    pub const VTable = extern struct {
        base: IPropertyStoreFactory.VTable,
        GetDelayedPropertyStore: *const fn (
            self: *const IDelayedPropertyStoreFactory,
            flags: GETPROPERTYSTOREFLAGS,
            dw_store_id: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPropertyStoreFactory.MethodMixin(T);
            pub inline fn getDelayedPropertyStore(self: *const T, flags_: GETPROPERTYSTOREFLAGS, dw_store_id_: u32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IDelayedPropertyStoreFactory.VTable, @ptrCast(self.vtable)).GetDelayedPropertyStore(@as(*const IDelayedPropertyStoreFactory, @ptrCast(self)), flags_, dw_store_id_, riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const _PERSIST_SPROPSTORE_FLAGS = enum(i32) {
    DEFAULT = 0,
    READONLY = 1,
    TREAT_NEW_VALUES_AS_DIRTY = 2,
};
pub const FPSPS_DEFAULT = _PERSIST_SPROPSTORE_FLAGS.DEFAULT;
pub const FPSPS_READONLY = _PERSIST_SPROPSTORE_FLAGS.READONLY;
pub const FPSPS_TREAT_NEW_VALUES_AS_DIRTY = _PERSIST_SPROPSTORE_FLAGS.TREAT_NEW_VALUES_AS_DIRTY;

pub const SERIALIZEDPROPSTORAGE = extern struct {
    placeholder: usize, // TODO: why is this type empty?
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPersistSerializedPropStorage_Value = Guid.initString("e318ad57-0aa0-450f-aca5-6fab7103d917");
pub const IID_IPersistSerializedPropStorage = &IID_IPersistSerializedPropStorage_Value;
pub const IPersistSerializedPropStorage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFlags: *const fn (
            self: *const IPersistSerializedPropStorage,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPropertyStorage: *const fn (
            self: *const IPersistSerializedPropStorage,
            // TODO: what to do with BytesParamIndex 1?
            psps: ?*SERIALIZEDPROPSTORAGE,
            cb: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyStorage: *const fn (
            self: *const IPersistSerializedPropStorage,
            ppsps: ?*?*SERIALIZEDPROPSTORAGE,
            pcb: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setFlags(self: *const T, flags_: i32) HRESULT {
                return @as(*const IPersistSerializedPropStorage.VTable, @ptrCast(self.vtable)).SetFlags(@as(*const IPersistSerializedPropStorage, @ptrCast(self)), flags_);
            }
            pub inline fn setPropertyStorage(self: *const T, psps_: ?*SERIALIZEDPROPSTORAGE, cb_: u32) HRESULT {
                return @as(*const IPersistSerializedPropStorage.VTable, @ptrCast(self.vtable)).SetPropertyStorage(@as(*const IPersistSerializedPropStorage, @ptrCast(self)), psps_, cb_);
            }
            pub inline fn getPropertyStorage(self: *const T, ppsps_: ?*?*SERIALIZEDPROPSTORAGE, pcb_: ?*u32) HRESULT {
                return @as(*const IPersistSerializedPropStorage.VTable, @ptrCast(self.vtable)).GetPropertyStorage(@as(*const IPersistSerializedPropStorage, @ptrCast(self)), ppsps_, pcb_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IPersistSerializedPropStorage2_Value = Guid.initString("77effa68-4f98-4366-ba72-573b3d880571");
pub const IID_IPersistSerializedPropStorage2 = &IID_IPersistSerializedPropStorage2_Value;
pub const IPersistSerializedPropStorage2 = extern struct {
    pub const VTable = extern struct {
        base: IPersistSerializedPropStorage.VTable,
        GetPropertyStorageSize: *const fn (
            self: *const IPersistSerializedPropStorage2,
            pcb: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyStorageBuffer: *const fn (
            self: *const IPersistSerializedPropStorage2,
            // TODO: what to do with BytesParamIndex 1?
            psps: ?*SERIALIZEDPROPSTORAGE,
            cb: u32,
            pcb_written: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPersistSerializedPropStorage.MethodMixin(T);
            pub inline fn getPropertyStorageSize(self: *const T, pcb_: ?*u32) HRESULT {
                return @as(*const IPersistSerializedPropStorage2.VTable, @ptrCast(self.vtable)).GetPropertyStorageSize(@as(*const IPersistSerializedPropStorage2, @ptrCast(self)), pcb_);
            }
            pub inline fn getPropertyStorageBuffer(self: *const T, psps_: ?*SERIALIZEDPROPSTORAGE, cb_: u32, pcb_written_: ?*u32) HRESULT {
                return @as(*const IPersistSerializedPropStorage2.VTable, @ptrCast(self.vtable)).GetPropertyStorageBuffer(@as(*const IPersistSerializedPropStorage2, @ptrCast(self)), psps_, cb_, pcb_written_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPropertySystemChangeNotify_Value = Guid.initString("fa955fd9-38be-4879-a6ce-824cf52d609f");
pub const IID_IPropertySystemChangeNotify = &IID_IPropertySystemChangeNotify_Value;
pub const IPropertySystemChangeNotify = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SchemaRefreshed: *const fn (
            self: *const IPropertySystemChangeNotify,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn schemaRefreshed(self: *const T) HRESULT {
                return @as(*const IPropertySystemChangeNotify.VTable, @ptrCast(self.vtable)).SchemaRefreshed(@as(*const IPropertySystemChangeNotify, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICreateObject_Value = Guid.initString("75121952-e0d0-43e5-9380-1d80483acf72");
pub const IID_ICreateObject = &IID_ICreateObject_Value;
pub const ICreateObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateObject: *const fn (
            self: *const ICreateObject,
            clsid: ?*const Guid,
            p_unk_outer: ?*IUnknown,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createObject(self: *const T, clsid_: ?*const Guid, p_unk_outer_: ?*IUnknown, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const ICreateObject.VTable, @ptrCast(self.vtable)).CreateObject(@as(*const ICreateObject, @ptrCast(self)), clsid_, p_unk_outer_, riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PSTIME_FLAGS = enum(u32) {
    UTC = 0,
    LOCAL = 1,
    _,
    pub fn initFlags(o: struct {
        UTC: u1 = 0,
        LOCAL: u1 = 0,
    }) PSTIME_FLAGS {
        return @as(PSTIME_FLAGS, @enumFromInt((if (o.UTC == 1) @intFromEnum(PSTIME_FLAGS.UTC) else 0) | (if (o.LOCAL == 1) @intFromEnum(PSTIME_FLAGS.LOCAL) else 0)));
    }
};
pub const PSTF_UTC = PSTIME_FLAGS.UTC;
pub const PSTF_LOCAL = PSTIME_FLAGS.LOCAL;

pub const PROPVAR_COMPARE_UNIT = enum(i32) {
    DEFAULT = 0,
    SECOND = 1,
    MINUTE = 2,
    HOUR = 3,
    DAY = 4,
    MONTH = 5,
    YEAR = 6,
};
pub const PVCU_DEFAULT = PROPVAR_COMPARE_UNIT.DEFAULT;
pub const PVCU_SECOND = PROPVAR_COMPARE_UNIT.SECOND;
pub const PVCU_MINUTE = PROPVAR_COMPARE_UNIT.MINUTE;
pub const PVCU_HOUR = PROPVAR_COMPARE_UNIT.HOUR;
pub const PVCU_DAY = PROPVAR_COMPARE_UNIT.DAY;
pub const PVCU_MONTH = PROPVAR_COMPARE_UNIT.MONTH;
pub const PVCU_YEAR = PROPVAR_COMPARE_UNIT.YEAR;

pub const PROPVAR_COMPARE_FLAGS = enum(u32) {
    DEFAULT = 0,
    TREATEMPTYASGREATERTHAN = 1,
    USESTRCMP = 2,
    USESTRCMPC = 4,
    USESTRCMPI = 8,
    USESTRCMPIC = 16,
    DIGITSASNUMBERS_CASESENSITIVE = 32,
    _,
    pub fn initFlags(o: struct {
        DEFAULT: u1 = 0,
        TREATEMPTYASGREATERTHAN: u1 = 0,
        USESTRCMP: u1 = 0,
        USESTRCMPC: u1 = 0,
        USESTRCMPI: u1 = 0,
        USESTRCMPIC: u1 = 0,
        DIGITSASNUMBERS_CASESENSITIVE: u1 = 0,
    }) PROPVAR_COMPARE_FLAGS {
        return @as(PROPVAR_COMPARE_FLAGS, @enumFromInt((if (o.DEFAULT == 1) @intFromEnum(PROPVAR_COMPARE_FLAGS.DEFAULT) else 0) | (if (o.TREATEMPTYASGREATERTHAN == 1) @intFromEnum(PROPVAR_COMPARE_FLAGS.TREATEMPTYASGREATERTHAN) else 0) | (if (o.USESTRCMP == 1) @intFromEnum(PROPVAR_COMPARE_FLAGS.USESTRCMP) else 0) | (if (o.USESTRCMPC == 1) @intFromEnum(PROPVAR_COMPARE_FLAGS.USESTRCMPC) else 0) | (if (o.USESTRCMPI == 1) @intFromEnum(PROPVAR_COMPARE_FLAGS.USESTRCMPI) else 0) | (if (o.USESTRCMPIC == 1) @intFromEnum(PROPVAR_COMPARE_FLAGS.USESTRCMPIC) else 0) | (if (o.DIGITSASNUMBERS_CASESENSITIVE == 1) @intFromEnum(PROPVAR_COMPARE_FLAGS.DIGITSASNUMBERS_CASESENSITIVE) else 0)));
    }
};
pub const PVCF_DEFAULT = PROPVAR_COMPARE_FLAGS.DEFAULT;
pub const PVCF_TREATEMPTYASGREATERTHAN = PROPVAR_COMPARE_FLAGS.TREATEMPTYASGREATERTHAN;
pub const PVCF_USESTRCMP = PROPVAR_COMPARE_FLAGS.USESTRCMP;
pub const PVCF_USESTRCMPC = PROPVAR_COMPARE_FLAGS.USESTRCMPC;
pub const PVCF_USESTRCMPI = PROPVAR_COMPARE_FLAGS.USESTRCMPI;
pub const PVCF_USESTRCMPIC = PROPVAR_COMPARE_FLAGS.USESTRCMPIC;
pub const PVCF_DIGITSASNUMBERS_CASESENSITIVE = PROPVAR_COMPARE_FLAGS.DIGITSASNUMBERS_CASESENSITIVE;

pub const PROPVAR_CHANGE_FLAGS = enum(u32) {
    DEFAULT = 0,
    NOVALUEPROP = 1,
    ALPHABOOL = 2,
    NOUSEROVERRIDE = 4,
    LOCALBOOL = 8,
    NOHEXSTRING = 16,
    _,
    pub fn initFlags(o: struct {
        DEFAULT: u1 = 0,
        NOVALUEPROP: u1 = 0,
        ALPHABOOL: u1 = 0,
        NOUSEROVERRIDE: u1 = 0,
        LOCALBOOL: u1 = 0,
        NOHEXSTRING: u1 = 0,
    }) PROPVAR_CHANGE_FLAGS {
        return @as(PROPVAR_CHANGE_FLAGS, @enumFromInt((if (o.DEFAULT == 1) @intFromEnum(PROPVAR_CHANGE_FLAGS.DEFAULT) else 0) | (if (o.NOVALUEPROP == 1) @intFromEnum(PROPVAR_CHANGE_FLAGS.NOVALUEPROP) else 0) | (if (o.ALPHABOOL == 1) @intFromEnum(PROPVAR_CHANGE_FLAGS.ALPHABOOL) else 0) | (if (o.NOUSEROVERRIDE == 1) @intFromEnum(PROPVAR_CHANGE_FLAGS.NOUSEROVERRIDE) else 0) | (if (o.LOCALBOOL == 1) @intFromEnum(PROPVAR_CHANGE_FLAGS.LOCALBOOL) else 0) | (if (o.NOHEXSTRING == 1) @intFromEnum(PROPVAR_CHANGE_FLAGS.NOHEXSTRING) else 0)));
    }
};
pub const PVCHF_DEFAULT = PROPVAR_CHANGE_FLAGS.DEFAULT;
pub const PVCHF_NOVALUEPROP = PROPVAR_CHANGE_FLAGS.NOVALUEPROP;
pub const PVCHF_ALPHABOOL = PROPVAR_CHANGE_FLAGS.ALPHABOOL;
pub const PVCHF_NOUSEROVERRIDE = PROPVAR_CHANGE_FLAGS.NOUSEROVERRIDE;
pub const PVCHF_LOCALBOOL = PROPVAR_CHANGE_FLAGS.LOCALBOOL;
pub const PVCHF_NOHEXSTRING = PROPVAR_CHANGE_FLAGS.NOHEXSTRING;

pub const DRAWPROGRESSFLAGS = enum(u32) {
    NONE = 0,
    MARQUEE = 1,
    MARQUEE_COMPLETE = 2,
    ERROR = 4,
    WARNING = 8,
    STOPPED = 16,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        MARQUEE: u1 = 0,
        MARQUEE_COMPLETE: u1 = 0,
        ERROR: u1 = 0,
        WARNING: u1 = 0,
        STOPPED: u1 = 0,
    }) DRAWPROGRESSFLAGS {
        return @as(DRAWPROGRESSFLAGS, @enumFromInt((if (o.NONE == 1) @intFromEnum(DRAWPROGRESSFLAGS.NONE) else 0) | (if (o.MARQUEE == 1) @intFromEnum(DRAWPROGRESSFLAGS.MARQUEE) else 0) | (if (o.MARQUEE_COMPLETE == 1) @intFromEnum(DRAWPROGRESSFLAGS.MARQUEE_COMPLETE) else 0) | (if (o.ERROR == 1) @intFromEnum(DRAWPROGRESSFLAGS.ERROR) else 0) | (if (o.WARNING == 1) @intFromEnum(DRAWPROGRESSFLAGS.WARNING) else 0) | (if (o.STOPPED == 1) @intFromEnum(DRAWPROGRESSFLAGS.STOPPED) else 0)));
    }
};
pub const DPF_NONE = DRAWPROGRESSFLAGS.NONE;
pub const DPF_MARQUEE = DRAWPROGRESSFLAGS.MARQUEE;
pub const DPF_MARQUEE_COMPLETE = DRAWPROGRESSFLAGS.MARQUEE_COMPLETE;
pub const DPF_ERROR = DRAWPROGRESSFLAGS.ERROR;
pub const DPF_WARNING = DRAWPROGRESSFLAGS.WARNING;
pub const DPF_STOPPED = DRAWPROGRESSFLAGS.STOPPED;

pub const SYNC_TRANSFER_STATUS = enum(u32) {
    NONE = 0,
    NEEDSUPLOAD = 1,
    NEEDSDOWNLOAD = 2,
    TRANSFERRING = 4,
    PAUSED = 8,
    HASERROR = 16,
    FETCHING_METADATA = 32,
    USER_REQUESTED_REFRESH = 64,
    HASWARNING = 128,
    EXCLUDED = 256,
    INCOMPLETE = 512,
    PLACEHOLDER_IFEMPTY = 1024,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        NEEDSUPLOAD: u1 = 0,
        NEEDSDOWNLOAD: u1 = 0,
        TRANSFERRING: u1 = 0,
        PAUSED: u1 = 0,
        HASERROR: u1 = 0,
        FETCHING_METADATA: u1 = 0,
        USER_REQUESTED_REFRESH: u1 = 0,
        HASWARNING: u1 = 0,
        EXCLUDED: u1 = 0,
        INCOMPLETE: u1 = 0,
        PLACEHOLDER_IFEMPTY: u1 = 0,
    }) SYNC_TRANSFER_STATUS {
        return @as(SYNC_TRANSFER_STATUS, @enumFromInt((if (o.NONE == 1) @intFromEnum(SYNC_TRANSFER_STATUS.NONE) else 0) | (if (o.NEEDSUPLOAD == 1) @intFromEnum(SYNC_TRANSFER_STATUS.NEEDSUPLOAD) else 0) | (if (o.NEEDSDOWNLOAD == 1) @intFromEnum(SYNC_TRANSFER_STATUS.NEEDSDOWNLOAD) else 0) | (if (o.TRANSFERRING == 1) @intFromEnum(SYNC_TRANSFER_STATUS.TRANSFERRING) else 0) | (if (o.PAUSED == 1) @intFromEnum(SYNC_TRANSFER_STATUS.PAUSED) else 0) | (if (o.HASERROR == 1) @intFromEnum(SYNC_TRANSFER_STATUS.HASERROR) else 0) | (if (o.FETCHING_METADATA == 1) @intFromEnum(SYNC_TRANSFER_STATUS.FETCHING_METADATA) else 0) | (if (o.USER_REQUESTED_REFRESH == 1) @intFromEnum(SYNC_TRANSFER_STATUS.USER_REQUESTED_REFRESH) else 0) | (if (o.HASWARNING == 1) @intFromEnum(SYNC_TRANSFER_STATUS.HASWARNING) else 0) | (if (o.EXCLUDED == 1) @intFromEnum(SYNC_TRANSFER_STATUS.EXCLUDED) else 0) | (if (o.INCOMPLETE == 1) @intFromEnum(SYNC_TRANSFER_STATUS.INCOMPLETE) else 0) | (if (o.PLACEHOLDER_IFEMPTY == 1) @intFromEnum(SYNC_TRANSFER_STATUS.PLACEHOLDER_IFEMPTY) else 0)));
    }
};
pub const STS_NONE = SYNC_TRANSFER_STATUS.NONE;
pub const STS_NEEDSUPLOAD = SYNC_TRANSFER_STATUS.NEEDSUPLOAD;
pub const STS_NEEDSDOWNLOAD = SYNC_TRANSFER_STATUS.NEEDSDOWNLOAD;
pub const STS_TRANSFERRING = SYNC_TRANSFER_STATUS.TRANSFERRING;
pub const STS_PAUSED = SYNC_TRANSFER_STATUS.PAUSED;
pub const STS_HASERROR = SYNC_TRANSFER_STATUS.HASERROR;
pub const STS_FETCHING_METADATA = SYNC_TRANSFER_STATUS.FETCHING_METADATA;
pub const STS_USER_REQUESTED_REFRESH = SYNC_TRANSFER_STATUS.USER_REQUESTED_REFRESH;
pub const STS_HASWARNING = SYNC_TRANSFER_STATUS.HASWARNING;
pub const STS_EXCLUDED = SYNC_TRANSFER_STATUS.EXCLUDED;
pub const STS_INCOMPLETE = SYNC_TRANSFER_STATUS.INCOMPLETE;
pub const STS_PLACEHOLDER_IFEMPTY = SYNC_TRANSFER_STATUS.PLACEHOLDER_IFEMPTY;

pub const PLACEHOLDER_STATES = enum(u32) {
    NONE = 0,
    MARKED_FOR_OFFLINE_AVAILABILITY = 1,
    FULL_PRIMARY_STREAM_AVAILABLE = 2,
    CREATE_FILE_ACCESSIBLE = 4,
    CLOUDFILE_PLACEHOLDER = 8,
    DEFAULT = 7,
    ALL = 15,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        MARKED_FOR_OFFLINE_AVAILABILITY: u1 = 0,
        FULL_PRIMARY_STREAM_AVAILABLE: u1 = 0,
        CREATE_FILE_ACCESSIBLE: u1 = 0,
        CLOUDFILE_PLACEHOLDER: u1 = 0,
        DEFAULT: u1 = 0,
        ALL: u1 = 0,
    }) PLACEHOLDER_STATES {
        return @as(PLACEHOLDER_STATES, @enumFromInt((if (o.NONE == 1) @intFromEnum(PLACEHOLDER_STATES.NONE) else 0) | (if (o.MARKED_FOR_OFFLINE_AVAILABILITY == 1) @intFromEnum(PLACEHOLDER_STATES.MARKED_FOR_OFFLINE_AVAILABILITY) else 0) | (if (o.FULL_PRIMARY_STREAM_AVAILABLE == 1) @intFromEnum(PLACEHOLDER_STATES.FULL_PRIMARY_STREAM_AVAILABLE) else 0) | (if (o.CREATE_FILE_ACCESSIBLE == 1) @intFromEnum(PLACEHOLDER_STATES.CREATE_FILE_ACCESSIBLE) else 0) | (if (o.CLOUDFILE_PLACEHOLDER == 1) @intFromEnum(PLACEHOLDER_STATES.CLOUDFILE_PLACEHOLDER) else 0) | (if (o.DEFAULT == 1) @intFromEnum(PLACEHOLDER_STATES.DEFAULT) else 0) | (if (o.ALL == 1) @intFromEnum(PLACEHOLDER_STATES.ALL) else 0)));
    }
};
pub const PS_NONE = PLACEHOLDER_STATES.NONE;
pub const PS_MARKED_FOR_OFFLINE_AVAILABILITY = PLACEHOLDER_STATES.MARKED_FOR_OFFLINE_AVAILABILITY;
pub const PS_FULL_PRIMARY_STREAM_AVAILABLE = PLACEHOLDER_STATES.FULL_PRIMARY_STREAM_AVAILABLE;
pub const PS_CREATE_FILE_ACCESSIBLE = PLACEHOLDER_STATES.CREATE_FILE_ACCESSIBLE;
pub const PS_CLOUDFILE_PLACEHOLDER = PLACEHOLDER_STATES.CLOUDFILE_PLACEHOLDER;
pub const PS_DEFAULT = PLACEHOLDER_STATES.DEFAULT;
pub const PS_ALL = PLACEHOLDER_STATES.ALL;

pub const PROPERTYUI_NAME_FLAGS = enum(u32) {
    DEFAULT = 0,
    MNEMONIC = 1,
    _,
    pub fn initFlags(o: struct {
        DEFAULT: u1 = 0,
        MNEMONIC: u1 = 0,
    }) PROPERTYUI_NAME_FLAGS {
        return @as(PROPERTYUI_NAME_FLAGS, @enumFromInt((if (o.DEFAULT == 1) @intFromEnum(PROPERTYUI_NAME_FLAGS.DEFAULT) else 0) | (if (o.MNEMONIC == 1) @intFromEnum(PROPERTYUI_NAME_FLAGS.MNEMONIC) else 0)));
    }
};
pub const PUIFNF_DEFAULT = PROPERTYUI_NAME_FLAGS.DEFAULT;
pub const PUIFNF_MNEMONIC = PROPERTYUI_NAME_FLAGS.MNEMONIC;

pub const PROPERTYUI_FLAGS = enum(u32) {
    DEFAULT = 0,
    RIGHTALIGN = 1,
    NOLABELININFOTIP = 2,
    _,
    pub fn initFlags(o: struct {
        DEFAULT: u1 = 0,
        RIGHTALIGN: u1 = 0,
        NOLABELININFOTIP: u1 = 0,
    }) PROPERTYUI_FLAGS {
        return @as(PROPERTYUI_FLAGS, @enumFromInt((if (o.DEFAULT == 1) @intFromEnum(PROPERTYUI_FLAGS.DEFAULT) else 0) | (if (o.RIGHTALIGN == 1) @intFromEnum(PROPERTYUI_FLAGS.RIGHTALIGN) else 0) | (if (o.NOLABELININFOTIP == 1) @intFromEnum(PROPERTYUI_FLAGS.NOLABELININFOTIP) else 0)));
    }
};
pub const PUIF_DEFAULT = PROPERTYUI_FLAGS.DEFAULT;
pub const PUIF_RIGHTALIGN = PROPERTYUI_FLAGS.RIGHTALIGN;
pub const PUIF_NOLABELININFOTIP = PROPERTYUI_FLAGS.NOLABELININFOTIP;

pub const PROPERTYUI_FORMAT_FLAGS = enum(u32) {
    DEFAULT = 0,
    RIGHTTOLEFT = 1,
    SHORTFORMAT = 2,
    NOTIME = 4,
    FRIENDLYDATE = 8,
    _,
    pub fn initFlags(o: struct {
        DEFAULT: u1 = 0,
        RIGHTTOLEFT: u1 = 0,
        SHORTFORMAT: u1 = 0,
        NOTIME: u1 = 0,
        FRIENDLYDATE: u1 = 0,
    }) PROPERTYUI_FORMAT_FLAGS {
        return @as(PROPERTYUI_FORMAT_FLAGS, @enumFromInt((if (o.DEFAULT == 1) @intFromEnum(PROPERTYUI_FORMAT_FLAGS.DEFAULT) else 0) | (if (o.RIGHTTOLEFT == 1) @intFromEnum(PROPERTYUI_FORMAT_FLAGS.RIGHTTOLEFT) else 0) | (if (o.SHORTFORMAT == 1) @intFromEnum(PROPERTYUI_FORMAT_FLAGS.SHORTFORMAT) else 0) | (if (o.NOTIME == 1) @intFromEnum(PROPERTYUI_FORMAT_FLAGS.NOTIME) else 0) | (if (o.FRIENDLYDATE == 1) @intFromEnum(PROPERTYUI_FORMAT_FLAGS.FRIENDLYDATE) else 0)));
    }
};
pub const PUIFFDF_DEFAULT = PROPERTYUI_FORMAT_FLAGS.DEFAULT;
pub const PUIFFDF_RIGHTTOLEFT = PROPERTYUI_FORMAT_FLAGS.RIGHTTOLEFT;
pub const PUIFFDF_SHORTFORMAT = PROPERTYUI_FORMAT_FLAGS.SHORTFORMAT;
pub const PUIFFDF_NOTIME = PROPERTYUI_FORMAT_FLAGS.NOTIME;
pub const PUIFFDF_FRIENDLYDATE = PROPERTYUI_FORMAT_FLAGS.FRIENDLYDATE;

// TODO: this type is limited to platform 'windows5.0'
const IID_IPropertyUI_Value = Guid.initString("757a7d9f-919a-4118-99d7-dbb208c8cc66");
pub const IID_IPropertyUI = &IID_IPropertyUI_Value;
pub const IPropertyUI = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ParsePropertyName: *const fn (
            self: *const IPropertyUI,
            psz_name: ?[*:0]const u16,
            pfmtid: ?*Guid,
            ppid: ?*u32,
            pch_eaten: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCannonicalName: *const fn (
            self: *const IPropertyUI,
            fmtid: ?*const Guid,
            pid: u32,
            pwsz_text: [*:0]u16,
            cch_text: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayName: *const fn (
            self: *const IPropertyUI,
            fmtid: ?*const Guid,
            pid: u32,
            flags: PROPERTYUI_NAME_FLAGS,
            pwsz_text: [*:0]u16,
            cch_text: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyDescription: *const fn (
            self: *const IPropertyUI,
            fmtid: ?*const Guid,
            pid: u32,
            pwsz_text: [*:0]u16,
            cch_text: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultWidth: *const fn (
            self: *const IPropertyUI,
            fmtid: ?*const Guid,
            pid: u32,
            pcx_chars: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn (
            self: *const IPropertyUI,
            fmtid: ?*const Guid,
            pid: u32,
            pflags: ?*PROPERTYUI_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FormatForDisplay: *const fn (
            self: *const IPropertyUI,
            fmtid: ?*const Guid,
            pid: u32,
            ppropvar: ?*const PROPVARIANT,
            puiff: PROPERTYUI_FORMAT_FLAGS,
            pwsz_text: [*:0]u16,
            cch_text: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHelpInfo: *const fn (
            self: *const IPropertyUI,
            fmtid: ?*const Guid,
            pid: u32,
            pwsz_help_file: [*:0]u16,
            cch: u32,
            pu_help_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn parsePropertyName(self: *const T, psz_name_: ?[*:0]const u16, pfmtid_: ?*Guid, ppid_: ?*u32, pch_eaten_: ?*u32) HRESULT {
                return @as(*const IPropertyUI.VTable, @ptrCast(self.vtable)).ParsePropertyName(@as(*const IPropertyUI, @ptrCast(self)), psz_name_, pfmtid_, ppid_, pch_eaten_);
            }
            pub inline fn getCannonicalName(self: *const T, fmtid_: ?*const Guid, pid_: u32, pwsz_text_: [*:0]u16, cch_text_: u32) HRESULT {
                return @as(*const IPropertyUI.VTable, @ptrCast(self.vtable)).GetCannonicalName(@as(*const IPropertyUI, @ptrCast(self)), fmtid_, pid_, pwsz_text_, cch_text_);
            }
            pub inline fn getDisplayName(self: *const T, fmtid_: ?*const Guid, pid_: u32, flags_: PROPERTYUI_NAME_FLAGS, pwsz_text_: [*:0]u16, cch_text_: u32) HRESULT {
                return @as(*const IPropertyUI.VTable, @ptrCast(self.vtable)).GetDisplayName(@as(*const IPropertyUI, @ptrCast(self)), fmtid_, pid_, flags_, pwsz_text_, cch_text_);
            }
            pub inline fn getPropertyDescription(self: *const T, fmtid_: ?*const Guid, pid_: u32, pwsz_text_: [*:0]u16, cch_text_: u32) HRESULT {
                return @as(*const IPropertyUI.VTable, @ptrCast(self.vtable)).GetPropertyDescription(@as(*const IPropertyUI, @ptrCast(self)), fmtid_, pid_, pwsz_text_, cch_text_);
            }
            pub inline fn getDefaultWidth(self: *const T, fmtid_: ?*const Guid, pid_: u32, pcx_chars_: ?*u32) HRESULT {
                return @as(*const IPropertyUI.VTable, @ptrCast(self.vtable)).GetDefaultWidth(@as(*const IPropertyUI, @ptrCast(self)), fmtid_, pid_, pcx_chars_);
            }
            pub inline fn getFlags(self: *const T, fmtid_: ?*const Guid, pid_: u32, pflags_: ?*PROPERTYUI_FLAGS) HRESULT {
                return @as(*const IPropertyUI.VTable, @ptrCast(self.vtable)).GetFlags(@as(*const IPropertyUI, @ptrCast(self)), fmtid_, pid_, pflags_);
            }
            pub inline fn formatForDisplay(self: *const T, fmtid_: ?*const Guid, pid_: u32, ppropvar_: ?*const PROPVARIANT, puiff_: PROPERTYUI_FORMAT_FLAGS, pwsz_text_: [*:0]u16, cch_text_: u32) HRESULT {
                return @as(*const IPropertyUI.VTable, @ptrCast(self.vtable)).FormatForDisplay(@as(*const IPropertyUI, @ptrCast(self)), fmtid_, pid_, ppropvar_, puiff_, pwsz_text_, cch_text_);
            }
            pub inline fn getHelpInfo(self: *const T, fmtid_: ?*const Guid, pid_: u32, pwsz_help_file_: [*:0]u16, cch_: u32, pu_help_i_d_: ?*u32) HRESULT {
                return @as(*const IPropertyUI.VTable, @ptrCast(self.vtable)).GetHelpInfo(@as(*const IPropertyUI, @ptrCast(self)), fmtid_, pid_, pwsz_help_file_, cch_, pu_help_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PDOPSTATUS = enum(i32) {
    RUNNING = 1,
    PAUSED = 2,
    CANCELLED = 3,
    STOPPED = 4,
    ERRORS = 5,
};
pub const PDOPS_RUNNING = PDOPSTATUS.RUNNING;
pub const PDOPS_PAUSED = PDOPSTATUS.PAUSED;
pub const PDOPS_CANCELLED = PDOPSTATUS.CANCELLED;
pub const PDOPS_STOPPED = PDOPSTATUS.STOPPED;
pub const PDOPS_ERRORS = PDOPSTATUS.ERRORS;

pub const SYNC_ENGINE_STATE_FLAGS = enum(u32) {
    NONE = 0,
    SERVICE_QUOTA_NEARING_LIMIT = 1,
    SERVICE_QUOTA_EXCEEDED_LIMIT = 2,
    AUTHENTICATION_ERROR = 4,
    PAUSED_DUE_TO_METERED_NETWORK = 8,
    PAUSED_DUE_TO_DISK_SPACE_FULL = 16,
    PAUSED_DUE_TO_CLIENT_POLICY = 32,
    PAUSED_DUE_TO_SERVICE_POLICY = 64,
    SERVICE_UNAVAILABLE = 128,
    PAUSED_DUE_TO_USER_REQUEST = 256,
    ALL_FLAGS = 511,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        SERVICE_QUOTA_NEARING_LIMIT: u1 = 0,
        SERVICE_QUOTA_EXCEEDED_LIMIT: u1 = 0,
        AUTHENTICATION_ERROR: u1 = 0,
        PAUSED_DUE_TO_METERED_NETWORK: u1 = 0,
        PAUSED_DUE_TO_DISK_SPACE_FULL: u1 = 0,
        PAUSED_DUE_TO_CLIENT_POLICY: u1 = 0,
        PAUSED_DUE_TO_SERVICE_POLICY: u1 = 0,
        SERVICE_UNAVAILABLE: u1 = 0,
        PAUSED_DUE_TO_USER_REQUEST: u1 = 0,
        ALL_FLAGS: u1 = 0,
    }) SYNC_ENGINE_STATE_FLAGS {
        return @as(SYNC_ENGINE_STATE_FLAGS, @enumFromInt((if (o.NONE == 1) @intFromEnum(SYNC_ENGINE_STATE_FLAGS.NONE) else 0) | (if (o.SERVICE_QUOTA_NEARING_LIMIT == 1) @intFromEnum(SYNC_ENGINE_STATE_FLAGS.SERVICE_QUOTA_NEARING_LIMIT) else 0) | (if (o.SERVICE_QUOTA_EXCEEDED_LIMIT == 1) @intFromEnum(SYNC_ENGINE_STATE_FLAGS.SERVICE_QUOTA_EXCEEDED_LIMIT) else 0) | (if (o.AUTHENTICATION_ERROR == 1) @intFromEnum(SYNC_ENGINE_STATE_FLAGS.AUTHENTICATION_ERROR) else 0) | (if (o.PAUSED_DUE_TO_METERED_NETWORK == 1) @intFromEnum(SYNC_ENGINE_STATE_FLAGS.PAUSED_DUE_TO_METERED_NETWORK) else 0) | (if (o.PAUSED_DUE_TO_DISK_SPACE_FULL == 1) @intFromEnum(SYNC_ENGINE_STATE_FLAGS.PAUSED_DUE_TO_DISK_SPACE_FULL) else 0) | (if (o.PAUSED_DUE_TO_CLIENT_POLICY == 1) @intFromEnum(SYNC_ENGINE_STATE_FLAGS.PAUSED_DUE_TO_CLIENT_POLICY) else 0) | (if (o.PAUSED_DUE_TO_SERVICE_POLICY == 1) @intFromEnum(SYNC_ENGINE_STATE_FLAGS.PAUSED_DUE_TO_SERVICE_POLICY) else 0) | (if (o.SERVICE_UNAVAILABLE == 1) @intFromEnum(SYNC_ENGINE_STATE_FLAGS.SERVICE_UNAVAILABLE) else 0) | (if (o.PAUSED_DUE_TO_USER_REQUEST == 1) @intFromEnum(SYNC_ENGINE_STATE_FLAGS.PAUSED_DUE_TO_USER_REQUEST) else 0) | (if (o.ALL_FLAGS == 1) @intFromEnum(SYNC_ENGINE_STATE_FLAGS.ALL_FLAGS) else 0)));
    }
};
pub const SESF_NONE = SYNC_ENGINE_STATE_FLAGS.NONE;
pub const SESF_SERVICE_QUOTA_NEARING_LIMIT = SYNC_ENGINE_STATE_FLAGS.SERVICE_QUOTA_NEARING_LIMIT;
pub const SESF_SERVICE_QUOTA_EXCEEDED_LIMIT = SYNC_ENGINE_STATE_FLAGS.SERVICE_QUOTA_EXCEEDED_LIMIT;
pub const SESF_AUTHENTICATION_ERROR = SYNC_ENGINE_STATE_FLAGS.AUTHENTICATION_ERROR;
pub const SESF_PAUSED_DUE_TO_METERED_NETWORK = SYNC_ENGINE_STATE_FLAGS.PAUSED_DUE_TO_METERED_NETWORK;
pub const SESF_PAUSED_DUE_TO_DISK_SPACE_FULL = SYNC_ENGINE_STATE_FLAGS.PAUSED_DUE_TO_DISK_SPACE_FULL;
pub const SESF_PAUSED_DUE_TO_CLIENT_POLICY = SYNC_ENGINE_STATE_FLAGS.PAUSED_DUE_TO_CLIENT_POLICY;
pub const SESF_PAUSED_DUE_TO_SERVICE_POLICY = SYNC_ENGINE_STATE_FLAGS.PAUSED_DUE_TO_SERVICE_POLICY;
pub const SESF_SERVICE_UNAVAILABLE = SYNC_ENGINE_STATE_FLAGS.SERVICE_UNAVAILABLE;
pub const SESF_PAUSED_DUE_TO_USER_REQUEST = SYNC_ENGINE_STATE_FLAGS.PAUSED_DUE_TO_USER_REQUEST;
pub const SESF_ALL_FLAGS = SYNC_ENGINE_STATE_FLAGS.ALL_FLAGS;

pub const PROPPRG = extern struct {
    flPrg: u16 align(1),
    flPrgInit: u16 align(1),
    achTitle: [30]CHAR align(1),
    achCmdLine: [128]CHAR align(1),
    achWorkDir: [64]CHAR align(1),
    wHotKey: u16 align(1),
    achIconFile: [80]CHAR align(1),
    wIconIndex: u16 align(1),
    dwEnhModeFlags: u32 align(1),
    dwRealModeFlags: u32 align(1),
    achOtherFile: [80]CHAR align(1),
    achPIFFile: [260]CHAR align(1),
};

//--------------------------------------------------------------------------------
// Section: Functions (227)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows8.0'
pub extern "propsys" fn PropVariantToWinRTPropertyValue(
    propvar: ?*const PROPVARIANT,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "propsys" fn WinRTPropertyValueToPropVariant(
    punk_property_value: ?*IUnknown,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "propsys" fn PSFormatForDisplay(
    propkey: ?*const PROPERTYKEY,
    propvar: ?*const PROPVARIANT,
    pdf_flags: PROPDESC_FORMAT_FLAGS,
    pwsz_text: [*:0]u16,
    cch_text: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "propsys" fn PSFormatForDisplayAlloc(
    key: ?*const PROPERTYKEY,
    propvar: ?*const PROPVARIANT,
    pdff: PROPDESC_FORMAT_FLAGS,
    ppsz_display: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "propsys" fn PSFormatPropertyValue(
    pps: ?*IPropertyStore,
    ppd: ?*IPropertyDescription,
    pdff: PROPDESC_FORMAT_FLAGS,
    ppsz_display: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSGetImageReferenceForValue(
    propkey: ?*const PROPERTYKEY,
    propvar: ?*const PROPVARIANT,
    ppsz_image_res: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSStringFromPropertyKey(
    pkey: ?*const PROPERTYKEY,
    psz: [*:0]u16,
    cch: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSPropertyKeyFromString(
    psz_string: ?[*:0]const u16,
    pkey: ?*PROPERTYKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSCreateMemoryPropertyStore(
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSCreateDelayedMultiplexPropertyStore(
    flags: GETPROPERTYSTOREFLAGS,
    pdpsf: ?*IDelayedPropertyStoreFactory,
    rg_store_ids: [*]const u32,
    c_stores: u32,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSCreateMultiplexPropertyStore(
    prgpunk_stores: [*]?*IUnknown,
    c_stores: u32,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSCreatePropertyChangeArray(
    rgpropkey: ?[*]const PROPERTYKEY,
    rgflags: ?[*]const PKA_FLAGS,
    rgpropvar: ?[*]const PROPVARIANT,
    c_changes: u32,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSCreateSimplePropertyChange(
    flags: PKA_FLAGS,
    key: ?*const PROPERTYKEY,
    propvar: ?*const PROPVARIANT,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSGetPropertyDescription(
    propkey: ?*const PROPERTYKEY,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSGetPropertyDescriptionByName(
    psz_canonical_name: ?[*:0]const u16,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSLookupPropertyHandlerCLSID(
    psz_file_path: ?[*:0]const u16,
    pclsid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSGetItemPropertyHandler(
    punk_item: ?*IUnknown,
    f_read_write: BOOL,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSGetItemPropertyHandlerWithCreateObject(
    punk_item: ?*IUnknown,
    f_read_write: BOOL,
    punk_create_object: ?*IUnknown,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSGetPropertyValue(
    pps: ?*IPropertyStore,
    ppd: ?*IPropertyDescription,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSSetPropertyValue(
    pps: ?*IPropertyStore,
    ppd: ?*IPropertyDescription,
    propvar: ?*const PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSRegisterPropertySchema(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSUnregisterPropertySchema(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSRefreshPropertySchema() callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSEnumeratePropertyDescriptions(
    filter_on: PROPDESC_ENUMFILTER,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSGetPropertyKeyFromName(
    psz_name: ?[*:0]const u16,
    ppropkey: ?*PROPERTYKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSGetNameFromPropertyKey(
    propkey: ?*const PROPERTYKEY,
    ppsz_canonical_name: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSCoerceToCanonicalValue(
    key: ?*const PROPERTYKEY,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSGetPropertyDescriptionListFromString(
    psz_prop_list: ?[*:0]const u16,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSCreatePropertyStoreFromPropertySetStorage(
    ppss: ?*IPropertySetStorage,
    grf_mode: u32,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSCreatePropertyStoreFromObject(
    punk: ?*IUnknown,
    grf_mode: u32,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSCreateAdapterFromPropertyStore(
    pps: ?*IPropertyStore,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSGetPropertySystem(
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSGetPropertyFromPropertyStorage(
    // TODO: what to do with BytesParamIndex 1?
    psps: ?*SERIALIZEDPROPSTORAGE,
    cb: u32,
    rpkey: ?*const PROPERTYKEY,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PSGetNamedPropertyFromPropertyStorage(
    // TODO: what to do with BytesParamIndex 1?
    psps: ?*SERIALIZEDPROPSTORAGE,
    cb: u32,
    psz_name: ?[*:0]const u16,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_ReadType(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    @"var": ?*VARIANT,
    type: u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_ReadStr(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: [*:0]u16,
    character_count: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_ReadStrAlloc(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_ReadBSTR(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_WriteStr(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_WriteBSTR(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_ReadInt(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_WriteInt(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_ReadSHORT(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_WriteSHORT(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_ReadLONG(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_WriteLONG(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_ReadDWORD(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_WriteDWORD(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_ReadBOOL(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_WriteBOOL(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_ReadPOINTL(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?*POINTL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_WritePOINTL(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?*const POINTL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_ReadPOINTS(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?*POINTS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_WritePOINTS(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?*const POINTS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_ReadRECTL(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?*RECTL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_WriteRECTL(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?*const RECTL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_ReadStream(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?*?*IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_WriteStream(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?*IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_Delete(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_ReadULONGLONG(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_WriteULONGLONG(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_ReadUnknown(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_WriteUnknown(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    punk: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_ReadGUID(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_WriteGUID(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?*const Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_ReadPropertyKey(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?*PROPERTYKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "propsys" fn PSPropertyBag_WritePropertyKey(
    prop_bag: ?*IPropertyBag,
    prop_name: ?[*:0]const u16,
    value: ?*const PROPERTYKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitPropVariantFromResource(
    hinst: ?HINSTANCE,
    id: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitPropVariantFromBuffer(
    // TODO: what to do with BytesParamIndex 1?
    pv: ?*const anyopaque,
    cb: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitPropVariantFromCLSID(
    clsid: ?*const Guid,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitPropVariantFromGUIDAsString(
    guid: ?*const Guid,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitPropVariantFromFileTime(
    pft_in: ?*const FILETIME,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitPropVariantFromPropVariantVectorElem(
    propvar_in: ?*const PROPVARIANT,
    i_elem: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitPropVariantVectorFromPropVariant(
    propvar_single: ?*const PROPVARIANT,
    ppropvar_vector: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitPropVariantFromStrRet(
    pstrret: ?*STRRET,
    pidl: ?*ITEMIDLIST,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitPropVariantFromBooleanVector(
    prgf: ?[*]const BOOL,
    c_elems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitPropVariantFromInt16Vector(
    prgn: ?[*]const i16,
    c_elems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitPropVariantFromUInt16Vector(
    prgn: ?[*:0]const u16,
    c_elems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitPropVariantFromInt32Vector(
    prgn: ?[*]const i32,
    c_elems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitPropVariantFromUInt32Vector(
    prgn: ?[*]const u32,
    c_elems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitPropVariantFromInt64Vector(
    prgn: ?[*]const i64,
    c_elems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitPropVariantFromUInt64Vector(
    prgn: ?[*]const u64,
    c_elems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitPropVariantFromDoubleVector(
    prgn: ?[*]const f64,
    c_elems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitPropVariantFromFileTimeVector(
    prgft: ?[*]const FILETIME,
    c_elems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitPropVariantFromStringVector(
    prgsz: ?[*]?PWSTR,
    c_elems: u32,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitPropVariantFromStringAsVector(
    psz: ?[*:0]const u16,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToBooleanWithDefault(
    propvar_in: ?*const PROPVARIANT,
    f_default: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToInt16WithDefault(
    propvar_in: ?*const PROPVARIANT,
    i_default: i16,
) callconv(@import("std").os.windows.WINAPI) i16;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToUInt16WithDefault(
    propvar_in: ?*const PROPVARIANT,
    ui_default: u16,
) callconv(@import("std").os.windows.WINAPI) u16;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToInt32WithDefault(
    propvar_in: ?*const PROPVARIANT,
    l_default: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToUInt32WithDefault(
    propvar_in: ?*const PROPVARIANT,
    ul_default: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToInt64WithDefault(
    propvar_in: ?*const PROPVARIANT,
    ll_default: i64,
) callconv(@import("std").os.windows.WINAPI) i64;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToUInt64WithDefault(
    propvar_in: ?*const PROPVARIANT,
    ull_default: u64,
) callconv(@import("std").os.windows.WINAPI) u64;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToDoubleWithDefault(
    propvar_in: ?*const PROPVARIANT,
    dbl_default: f64,
) callconv(@import("std").os.windows.WINAPI) f64;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToStringWithDefault(
    propvar_in: ?*const PROPVARIANT,
    psz_default: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToBoolean(
    propvar_in: ?*const PROPVARIANT,
    pf_ret: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToInt16(
    propvar_in: ?*const PROPVARIANT,
    pi_ret: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToUInt16(
    propvar_in: ?*const PROPVARIANT,
    pui_ret: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToInt32(
    propvar_in: ?*const PROPVARIANT,
    pl_ret: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToUInt32(
    propvar_in: ?*const PROPVARIANT,
    pul_ret: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToInt64(
    propvar_in: ?*const PROPVARIANT,
    pll_ret: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToUInt64(
    propvar_in: ?*const PROPVARIANT,
    pull_ret: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToDouble(
    propvar_in: ?*const PROPVARIANT,
    pdbl_ret: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToBuffer(
    propvar: ?*const PROPVARIANT,
    // TODO: what to do with BytesParamIndex 2?
    pv: ?*anyopaque,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToString(
    propvar: ?*const PROPVARIANT,
    psz: [*:0]u16,
    cch: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToGUID(
    propvar: ?*const PROPVARIANT,
    pguid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToStringAlloc(
    propvar: ?*const PROPVARIANT,
    ppsz_out: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToBSTR(
    propvar: ?*const PROPVARIANT,
    pbstr_out: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToStrRet(
    propvar: ?*const PROPVARIANT,
    pstrret: ?*STRRET,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToFileTime(
    propvar: ?*const PROPVARIANT,
    pstf_out: PSTIME_FLAGS,
    pft_out: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantGetElementCount(
    propvar: ?*const PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToBooleanVector(
    propvar: ?*const PROPVARIANT,
    prgf: [*]BOOL,
    crgf: u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToInt16Vector(
    propvar: ?*const PROPVARIANT,
    prgn: [*]i16,
    crgn: u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToUInt16Vector(
    propvar: ?*const PROPVARIANT,
    prgn: [*:0]u16,
    crgn: u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToInt32Vector(
    propvar: ?*const PROPVARIANT,
    prgn: [*]i32,
    crgn: u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToUInt32Vector(
    propvar: ?*const PROPVARIANT,
    prgn: [*]u32,
    crgn: u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToInt64Vector(
    propvar: ?*const PROPVARIANT,
    prgn: [*]i64,
    crgn: u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToUInt64Vector(
    propvar: ?*const PROPVARIANT,
    prgn: [*]u64,
    crgn: u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToDoubleVector(
    propvar: ?*const PROPVARIANT,
    prgn: [*]f64,
    crgn: u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToFileTimeVector(
    propvar: ?*const PROPVARIANT,
    prgft: [*]FILETIME,
    crgft: u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToStringVector(
    propvar: ?*const PROPVARIANT,
    prgsz: [*]?PWSTR,
    crgsz: u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToBooleanVectorAlloc(
    propvar: ?*const PROPVARIANT,
    pprgf: ?*?*BOOL,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToInt16VectorAlloc(
    propvar: ?*const PROPVARIANT,
    pprgn: ?*?*i16,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToUInt16VectorAlloc(
    propvar: ?*const PROPVARIANT,
    pprgn: ?*?*u16,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToInt32VectorAlloc(
    propvar: ?*const PROPVARIANT,
    pprgn: ?*?*i32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToUInt32VectorAlloc(
    propvar: ?*const PROPVARIANT,
    pprgn: ?*?*u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToInt64VectorAlloc(
    propvar: ?*const PROPVARIANT,
    pprgn: ?*?*i64,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToUInt64VectorAlloc(
    propvar: ?*const PROPVARIANT,
    pprgn: ?*?*u64,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToDoubleVectorAlloc(
    propvar: ?*const PROPVARIANT,
    pprgn: ?*?*f64,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToFileTimeVectorAlloc(
    propvar: ?*const PROPVARIANT,
    pprgft: ?*?*FILETIME,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantToStringVectorAlloc(
    propvar: ?*const PROPVARIANT,
    pprgsz: ?*?*?PWSTR,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantGetBooleanElem(
    propvar: ?*const PROPVARIANT,
    i_elem: u32,
    pf_val: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantGetInt16Elem(
    propvar: ?*const PROPVARIANT,
    i_elem: u32,
    pn_val: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantGetUInt16Elem(
    propvar: ?*const PROPVARIANT,
    i_elem: u32,
    pn_val: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantGetInt32Elem(
    propvar: ?*const PROPVARIANT,
    i_elem: u32,
    pn_val: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantGetUInt32Elem(
    propvar: ?*const PROPVARIANT,
    i_elem: u32,
    pn_val: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantGetInt64Elem(
    propvar: ?*const PROPVARIANT,
    i_elem: u32,
    pn_val: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantGetUInt64Elem(
    propvar: ?*const PROPVARIANT,
    i_elem: u32,
    pn_val: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantGetDoubleElem(
    propvar: ?*const PROPVARIANT,
    i_elem: u32,
    pn_val: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantGetFileTimeElem(
    propvar: ?*const PROPVARIANT,
    i_elem: u32,
    pft_val: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantGetStringElem(
    propvar: ?*const PROPVARIANT,
    i_elem: u32,
    ppsz_val: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn ClearPropVariantArray(
    rg_prop_var: [*]PROPVARIANT,
    c_vars: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantCompareEx(
    propvar1: ?*const PROPVARIANT,
    propvar2: ?*const PROPVARIANT,
    unit: PROPVAR_COMPARE_UNIT,
    flags: PROPVAR_COMPARE_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn PropVariantChangeType(
    ppropvar_dest: ?*PROPVARIANT,
    propvar_src: ?*const PROPVARIANT,
    flags: PROPVAR_CHANGE_FLAGS,
    vt: u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "propsys" fn PropVariantToVariant(
    p_prop_var: ?*const PROPVARIANT,
    p_var: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "propsys" fn VariantToPropVariant(
    p_var: ?*const VARIANT,
    p_prop_var: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitVariantFromResource(
    hinst: ?HINSTANCE,
    id: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitVariantFromBuffer(
    // TODO: what to do with BytesParamIndex 1?
    pv: ?*const anyopaque,
    cb: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitVariantFromGUIDAsString(
    guid: ?*const Guid,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitVariantFromFileTime(
    pft: ?*const FILETIME,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitVariantFromFileTimeArray(
    prgft: ?[*]const FILETIME,
    c_elems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitVariantFromStrRet(
    pstrret: ?*STRRET,
    pidl: ?*ITEMIDLIST,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitVariantFromVariantArrayElem(
    var_in: ?*const VARIANT,
    i_elem: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitVariantFromBooleanArray(
    prgf: [*]const BOOL,
    c_elems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitVariantFromInt16Array(
    prgn: [*]const i16,
    c_elems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitVariantFromUInt16Array(
    prgn: [*:0]const u16,
    c_elems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitVariantFromInt32Array(
    prgn: [*]const i32,
    c_elems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitVariantFromUInt32Array(
    prgn: [*]const u32,
    c_elems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitVariantFromInt64Array(
    prgn: [*]const i64,
    c_elems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitVariantFromUInt64Array(
    prgn: [*]const u64,
    c_elems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitVariantFromDoubleArray(
    prgn: [*]const f64,
    c_elems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn InitVariantFromStringArray(
    prgsz: [*]?PWSTR,
    c_elems: u32,
    pvar: ?*VARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToBooleanWithDefault(
    var_in: ?*const VARIANT,
    f_default: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToInt16WithDefault(
    var_in: ?*const VARIANT,
    i_default: i16,
) callconv(@import("std").os.windows.WINAPI) i16;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToUInt16WithDefault(
    var_in: ?*const VARIANT,
    ui_default: u16,
) callconv(@import("std").os.windows.WINAPI) u16;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToInt32WithDefault(
    var_in: ?*const VARIANT,
    l_default: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToUInt32WithDefault(
    var_in: ?*const VARIANT,
    ul_default: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToInt64WithDefault(
    var_in: ?*const VARIANT,
    ll_default: i64,
) callconv(@import("std").os.windows.WINAPI) i64;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToUInt64WithDefault(
    var_in: ?*const VARIANT,
    ull_default: u64,
) callconv(@import("std").os.windows.WINAPI) u64;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToDoubleWithDefault(
    var_in: ?*const VARIANT,
    dbl_default: f64,
) callconv(@import("std").os.windows.WINAPI) f64;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToStringWithDefault(
    var_in: ?*const VARIANT,
    psz_default: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToBoolean(
    var_in: ?*const VARIANT,
    pf_ret: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToInt16(
    var_in: ?*const VARIANT,
    pi_ret: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToUInt16(
    var_in: ?*const VARIANT,
    pui_ret: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToInt32(
    var_in: ?*const VARIANT,
    pl_ret: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToUInt32(
    var_in: ?*const VARIANT,
    pul_ret: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToInt64(
    var_in: ?*const VARIANT,
    pll_ret: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToUInt64(
    var_in: ?*const VARIANT,
    pull_ret: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToDouble(
    var_in: ?*const VARIANT,
    pdbl_ret: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToBuffer(
    var_in: ?*const VARIANT,
    // TODO: what to do with BytesParamIndex 2?
    pv: ?*anyopaque,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToGUID(
    var_in: ?*const VARIANT,
    pguid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToString(
    var_in: ?*const VARIANT,
    psz_buf: [*:0]u16,
    cch_buf: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToStringAlloc(
    var_in: ?*const VARIANT,
    ppsz_buf: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToDosDateTime(
    var_in: ?*const VARIANT,
    pw_date: ?*u16,
    pw_time: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToStrRet(
    var_in: ?*const VARIANT,
    pstrret: ?*STRRET,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToFileTime(
    var_in: ?*const VARIANT,
    stf_out: PSTIME_FLAGS,
    pft_out: ?*FILETIME,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantGetElementCount(
    var_in: ?*const VARIANT,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToBooleanArray(
    @"var": ?*const VARIANT,
    prgf: [*]BOOL,
    crgn: u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToInt16Array(
    @"var": ?*const VARIANT,
    prgn: [*]i16,
    crgn: u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToUInt16Array(
    @"var": ?*const VARIANT,
    prgn: [*:0]u16,
    crgn: u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToInt32Array(
    @"var": ?*const VARIANT,
    prgn: [*]i32,
    crgn: u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToUInt32Array(
    @"var": ?*const VARIANT,
    prgn: [*]u32,
    crgn: u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToInt64Array(
    @"var": ?*const VARIANT,
    prgn: [*]i64,
    crgn: u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToUInt64Array(
    @"var": ?*const VARIANT,
    prgn: [*]u64,
    crgn: u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToDoubleArray(
    @"var": ?*const VARIANT,
    prgn: [*]f64,
    crgn: u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToStringArray(
    @"var": ?*const VARIANT,
    prgsz: [*]?PWSTR,
    crgsz: u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToBooleanArrayAlloc(
    @"var": ?*const VARIANT,
    pprgf: ?*?*BOOL,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToInt16ArrayAlloc(
    @"var": ?*const VARIANT,
    pprgn: ?*?*i16,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToUInt16ArrayAlloc(
    @"var": ?*const VARIANT,
    pprgn: ?*?*u16,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToInt32ArrayAlloc(
    @"var": ?*const VARIANT,
    pprgn: ?*?*i32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToUInt32ArrayAlloc(
    @"var": ?*const VARIANT,
    pprgn: ?*?*u32,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToInt64ArrayAlloc(
    @"var": ?*const VARIANT,
    pprgn: ?*?*i64,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToUInt64ArrayAlloc(
    @"var": ?*const VARIANT,
    pprgn: ?*?*u64,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToDoubleArrayAlloc(
    @"var": ?*const VARIANT,
    pprgn: ?*?*f64,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantToStringArrayAlloc(
    @"var": ?*const VARIANT,
    pprgsz: ?*?*?PWSTR,
    pc_elem: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantGetBooleanElem(
    @"var": ?*const VARIANT,
    i_elem: u32,
    pf_val: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantGetInt16Elem(
    @"var": ?*const VARIANT,
    i_elem: u32,
    pn_val: ?*i16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantGetUInt16Elem(
    @"var": ?*const VARIANT,
    i_elem: u32,
    pn_val: ?*u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantGetInt32Elem(
    @"var": ?*const VARIANT,
    i_elem: u32,
    pn_val: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantGetUInt32Elem(
    @"var": ?*const VARIANT,
    i_elem: u32,
    pn_val: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantGetInt64Elem(
    @"var": ?*const VARIANT,
    i_elem: u32,
    pn_val: ?*i64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantGetUInt64Elem(
    @"var": ?*const VARIANT,
    i_elem: u32,
    pn_val: ?*u64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantGetDoubleElem(
    @"var": ?*const VARIANT,
    i_elem: u32,
    pn_val: ?*f64,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantGetStringElem(
    @"var": ?*const VARIANT,
    i_elem: u32,
    ppsz_val: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn ClearVariantArray(
    pvars: [*]VARIANT,
    cvars: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "propsys" fn VariantCompare(
    var1: ?*const VARIANT,
    var2: ?*const VARIANT,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHGetPropertyStoreFromIDList(
    pidl: ?*ITEMIDLIST,
    flags: GETPROPERTYSTOREFLAGS,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHGetPropertyStoreFromParsingName(
    psz_path: ?[*:0]const u16,
    pbc: ?*IBindCtx,
    flags: GETPROPERTYSTOREFLAGS,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHAddDefaultPropertiesByExt(
    psz_ext: ?[*:0]const u16,
    p_prop_store: ?*IPropertyStore,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn PifMgr_OpenProperties(
    psz_app: ?[*:0]const u16,
    psz_p_i_f: ?[*:0]const u16,
    h_inf: u32,
    fl_opt: u32,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn PifMgr_GetProperties(
    h_props: ?HANDLE,
    psz_group: ?[*:0]const u8,
    // TODO: what to do with BytesParamIndex 3?
    lp_props: ?*anyopaque,
    cb_props: i32,
    fl_opt: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn PifMgr_SetProperties(
    h_props: ?HANDLE,
    psz_group: ?[*:0]const u8,
    // TODO: what to do with BytesParamIndex 3?
    lp_props: ?*const anyopaque,
    cb_props: i32,
    fl_opt: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn PifMgr_CloseProperties(
    h_props: ?HANDLE,
    fl_opt: u32,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHPropStgCreate(
    psstg: ?*IPropertySetStorage,
    fmtid: ?*const Guid,
    pclsid: ?*const Guid,
    grf_flags: u32,
    grf_mode: u32,
    dw_disposition: u32,
    ppstg: ?*?*IPropertyStorage,
    pu_code_page: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHPropStgReadMultiple(
    pps: ?*IPropertyStorage,
    u_code_page: u32,
    cpspec: u32,
    rgpspec: [*]const PROPSPEC,
    rgvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHPropStgWriteMultiple(
    pps: ?*IPropertyStorage,
    pu_code_page: ?*u32,
    cpspec: u32,
    rgpspec: [*]const PROPSPEC,
    rgvar: [*]PROPVARIANT,
    propid_name_first: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn SHGetPropertyStoreForWindow(
    hwnd: ?HWND,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (26)
//--------------------------------------------------------------------------------
const Guid = @import("../../zig.zig").Guid;
const BOOL = @import("../../foundation.zig").BOOL;
const BSTR = @import("../../foundation.zig").BSTR;
const CHAR = @import("../../foundation.zig").CHAR;
const CONDITION_OPERATION = @import("../../system/search/common.zig").CONDITION_OPERATION;
const FILETIME = @import("../../foundation.zig").FILETIME;
const HANDLE = @import("../../foundation.zig").HANDLE;
const HINSTANCE = @import("../../foundation.zig").HINSTANCE;
const HRESULT = @import("../../foundation.zig").HRESULT;
const HWND = @import("../../foundation.zig").HWND;
const IBindCtx = @import("../../system/com.zig").IBindCtx;
const IPropertyBag = @import("../../system/com/structured_storage.zig").IPropertyBag;
const IPropertySetStorage = @import("../../system/com/structured_storage.zig").IPropertySetStorage;
const IPropertyStorage = @import("../../system/com/structured_storage.zig").IPropertyStorage;
const IStream = @import("../../system/com.zig").IStream;
const ITEMIDLIST = @import("../../ui/shell/common.zig").ITEMIDLIST;
const IUnknown = @import("../../system/com.zig").IUnknown;
const POINTL = @import("../../foundation.zig").POINTL;
const POINTS = @import("../../foundation.zig").POINTS;
const PROPSPEC = @import("../../system/com/structured_storage.zig").PROPSPEC;
const PROPVARIANT = @import("../../system/com/structured_storage.zig").PROPVARIANT;
const PSTR = @import("../../foundation.zig").PSTR;
const PWSTR = @import("../../foundation.zig").PWSTR;
const RECTL = @import("../../foundation.zig").RECTL;
const STRRET = @import("../../ui/shell/common.zig").STRRET;
const VARIANT = @import("../../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
