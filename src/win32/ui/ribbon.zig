//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (3)
//--------------------------------------------------------------------------------
pub const UI_ALL_COMMANDS = @as(u32, 0);
pub const UI_COLLECTION_INVALIDINDEX = @as(u32, 4294967295);
pub const LIBID_UIRibbon = Guid.initString("942f35c2-e83b-45ef-b085-ac295dd63d5b");

//--------------------------------------------------------------------------------
// Section: Types (33)
//--------------------------------------------------------------------------------
const CLSID_UIRibbonFramework_Value = Guid.initString("926749fa-2615-4987-8845-c33e65f2b957");
pub const CLSID_UIRibbonFramework = &CLSID_UIRibbonFramework_Value;

const CLSID_UIRibbonImageFromBitmapFactory_Value = Guid.initString("0f7434b6-59b6-4250-999e-d168d6ae4293");
pub const CLSID_UIRibbonImageFromBitmapFactory = &CLSID_UIRibbonImageFromBitmapFactory_Value;

pub const UI_CONTEXTAVAILABILITY = enum(i32) {
    NOTAVAILABLE = 0,
    AVAILABLE = 1,
    ACTIVE = 2,
};
pub const UI_CONTEXTAVAILABILITY_NOTAVAILABLE = UI_CONTEXTAVAILABILITY.NOTAVAILABLE;
pub const UI_CONTEXTAVAILABILITY_AVAILABLE = UI_CONTEXTAVAILABILITY.AVAILABLE;
pub const UI_CONTEXTAVAILABILITY_ACTIVE = UI_CONTEXTAVAILABILITY.ACTIVE;

pub const UI_FONTPROPERTIES = enum(i32) {
    NOTAVAILABLE = 0,
    NOTSET = 1,
    SET = 2,
};
pub const UI_FONTPROPERTIES_NOTAVAILABLE = UI_FONTPROPERTIES.NOTAVAILABLE;
pub const UI_FONTPROPERTIES_NOTSET = UI_FONTPROPERTIES.NOTSET;
pub const UI_FONTPROPERTIES_SET = UI_FONTPROPERTIES.SET;

pub const UI_FONTVERTICALPOSITION = enum(i32) {
    NOTAVAILABLE = 0,
    NOTSET = 1,
    SUPERSCRIPT = 2,
    SUBSCRIPT = 3,
};
pub const UI_FONTVERTICALPOSITION_NOTAVAILABLE = UI_FONTVERTICALPOSITION.NOTAVAILABLE;
pub const UI_FONTVERTICALPOSITION_NOTSET = UI_FONTVERTICALPOSITION.NOTSET;
pub const UI_FONTVERTICALPOSITION_SUPERSCRIPT = UI_FONTVERTICALPOSITION.SUPERSCRIPT;
pub const UI_FONTVERTICALPOSITION_SUBSCRIPT = UI_FONTVERTICALPOSITION.SUBSCRIPT;

pub const UI_FONTUNDERLINE = enum(i32) {
    NOTAVAILABLE = 0,
    NOTSET = 1,
    SET = 2,
};
pub const UI_FONTUNDERLINE_NOTAVAILABLE = UI_FONTUNDERLINE.NOTAVAILABLE;
pub const UI_FONTUNDERLINE_NOTSET = UI_FONTUNDERLINE.NOTSET;
pub const UI_FONTUNDERLINE_SET = UI_FONTUNDERLINE.SET;

pub const UI_FONTDELTASIZE = enum(i32) {
    GROW = 0,
    SHRINK = 1,
};
pub const UI_FONTDELTASIZE_GROW = UI_FONTDELTASIZE.GROW;
pub const UI_FONTDELTASIZE_SHRINK = UI_FONTDELTASIZE.SHRINK;

pub const UI_CONTROLDOCK = enum(i32) {
    TOP = 1,
    BOTTOM = 3,
};
pub const UI_CONTROLDOCK_TOP = UI_CONTROLDOCK.TOP;
pub const UI_CONTROLDOCK_BOTTOM = UI_CONTROLDOCK.BOTTOM;

pub const UI_SWATCHCOLORTYPE = enum(i32) {
    NOCOLOR = 0,
    AUTOMATIC = 1,
    RGB = 2,
};
pub const UI_SWATCHCOLORTYPE_NOCOLOR = UI_SWATCHCOLORTYPE.NOCOLOR;
pub const UI_SWATCHCOLORTYPE_AUTOMATIC = UI_SWATCHCOLORTYPE.AUTOMATIC;
pub const UI_SWATCHCOLORTYPE_RGB = UI_SWATCHCOLORTYPE.RGB;

pub const UI_SWATCHCOLORMODE = enum(i32) {
    NORMAL = 0,
    MONOCHROME = 1,
};
pub const UI_SWATCHCOLORMODE_NORMAL = UI_SWATCHCOLORMODE.NORMAL;
pub const UI_SWATCHCOLORMODE_MONOCHROME = UI_SWATCHCOLORMODE.MONOCHROME;

pub const UI_EVENTTYPE = enum(i32) {
    ApplicationMenuOpened = 0,
    RibbonMinimized = 1,
    RibbonExpanded = 2,
    ApplicationModeSwitched = 3,
    TabActivated = 4,
    MenuOpened = 5,
    CommandExecuted = 6,
    TooltipShown = 7,
};
pub const UI_EVENTTYPE_ApplicationMenuOpened = UI_EVENTTYPE.ApplicationMenuOpened;
pub const UI_EVENTTYPE_RibbonMinimized = UI_EVENTTYPE.RibbonMinimized;
pub const UI_EVENTTYPE_RibbonExpanded = UI_EVENTTYPE.RibbonExpanded;
pub const UI_EVENTTYPE_ApplicationModeSwitched = UI_EVENTTYPE.ApplicationModeSwitched;
pub const UI_EVENTTYPE_TabActivated = UI_EVENTTYPE.TabActivated;
pub const UI_EVENTTYPE_MenuOpened = UI_EVENTTYPE.MenuOpened;
pub const UI_EVENTTYPE_CommandExecuted = UI_EVENTTYPE.CommandExecuted;
pub const UI_EVENTTYPE_TooltipShown = UI_EVENTTYPE.TooltipShown;

pub const UI_EVENTLOCATION = enum(i32) {
    Ribbon = 0,
    QAT = 1,
    ApplicationMenu = 2,
    ContextPopup = 3,
};
pub const UI_EVENTLOCATION_Ribbon = UI_EVENTLOCATION.Ribbon;
pub const UI_EVENTLOCATION_QAT = UI_EVENTLOCATION.QAT;
pub const UI_EVENTLOCATION_ApplicationMenu = UI_EVENTLOCATION.ApplicationMenu;
pub const UI_EVENTLOCATION_ContextPopup = UI_EVENTLOCATION.ContextPopup;

// TODO: this type is limited to platform 'windows6.1'
const IID_IUISimplePropertySet_Value = Guid.initString("c205bb48-5b1c-4219-a106-15bd0a5f24e2");
pub const IID_IUISimplePropertySet = &IID_IUISimplePropertySet_Value;
pub const IUISimplePropertySet = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetValue: *const fn (
            self: *const IUISimplePropertySet,
            key: ?*const PROPERTYKEY,
            value: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getValue(self: *const T, key_: ?*const PROPERTYKEY, value_: ?*PROPVARIANT) HRESULT {
                return @as(*const IUISimplePropertySet.VTable, @ptrCast(self.vtable)).GetValue(@as(*const IUISimplePropertySet, @ptrCast(self)), key_, value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIRibbon_Value = Guid.initString("803982ab-370a-4f7e-a9e7-8784036a6e26");
pub const IID_IUIRibbon = &IID_IUIRibbon_Value;
pub const IUIRibbon = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetHeight: *const fn (
            self: *const IUIRibbon,
            cy: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadSettingsFromStream: *const fn (
            self: *const IUIRibbon,
            p_stream: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveSettingsToStream: *const fn (
            self: *const IUIRibbon,
            p_stream: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getHeight(self: *const T, cy_: ?*u32) HRESULT {
                return @as(*const IUIRibbon.VTable, @ptrCast(self.vtable)).GetHeight(@as(*const IUIRibbon, @ptrCast(self)), cy_);
            }
            pub inline fn loadSettingsFromStream(self: *const T, p_stream_: ?*IStream) HRESULT {
                return @as(*const IUIRibbon.VTable, @ptrCast(self.vtable)).LoadSettingsFromStream(@as(*const IUIRibbon, @ptrCast(self)), p_stream_);
            }
            pub inline fn saveSettingsToStream(self: *const T, p_stream_: ?*IStream) HRESULT {
                return @as(*const IUIRibbon.VTable, @ptrCast(self.vtable)).SaveSettingsToStream(@as(*const IUIRibbon, @ptrCast(self)), p_stream_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const UI_INVALIDATIONS = enum(i32) {
    STATE = 1,
    VALUE = 2,
    PROPERTY = 4,
    ALLPROPERTIES = 8,
};
pub const UI_INVALIDATIONS_STATE = UI_INVALIDATIONS.STATE;
pub const UI_INVALIDATIONS_VALUE = UI_INVALIDATIONS.VALUE;
pub const UI_INVALIDATIONS_PROPERTY = UI_INVALIDATIONS.PROPERTY;
pub const UI_INVALIDATIONS_ALLPROPERTIES = UI_INVALIDATIONS.ALLPROPERTIES;

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIFramework_Value = Guid.initString("f4f0385d-6872-43a8-ad09-4c339cb3f5c5");
pub const IID_IUIFramework = &IID_IUIFramework_Value;
pub const IUIFramework = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IUIFramework,
            frame_wnd: ?HWND,
            application: ?*IUIApplication,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Destroy: *const fn (
            self: *const IUIFramework,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadUI: *const fn (
            self: *const IUIFramework,
            instance: ?HINSTANCE,
            resource_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetView: *const fn (
            self: *const IUIFramework,
            view_id: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUICommandProperty: *const fn (
            self: *const IUIFramework,
            command_id: u32,
            key: ?*const PROPERTYKEY,
            value: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUICommandProperty: *const fn (
            self: *const IUIFramework,
            command_id: u32,
            key: ?*const PROPERTYKEY,
            value: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvalidateUICommand: *const fn (
            self: *const IUIFramework,
            command_id: u32,
            flags: UI_INVALIDATIONS,
            key: ?*const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FlushPendingInvalidations: *const fn (
            self: *const IUIFramework,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetModes: *const fn (
            self: *const IUIFramework,
            i_modes: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, frame_wnd_: ?HWND, application_: ?*IUIApplication) HRESULT {
                return @as(*const IUIFramework.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IUIFramework, @ptrCast(self)), frame_wnd_, application_);
            }
            pub inline fn destroy(self: *const T) HRESULT {
                return @as(*const IUIFramework.VTable, @ptrCast(self.vtable)).Destroy(@as(*const IUIFramework, @ptrCast(self)));
            }
            pub inline fn loadUI(self: *const T, instance_: ?HINSTANCE, resource_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IUIFramework.VTable, @ptrCast(self.vtable)).LoadUI(@as(*const IUIFramework, @ptrCast(self)), instance_, resource_name_);
            }
            pub inline fn getView(self: *const T, view_id_: u32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IUIFramework.VTable, @ptrCast(self.vtable)).GetView(@as(*const IUIFramework, @ptrCast(self)), view_id_, riid_, ppv_);
            }
            pub inline fn getUICommandProperty(self: *const T, command_id_: u32, key_: ?*const PROPERTYKEY, value_: ?*PROPVARIANT) HRESULT {
                return @as(*const IUIFramework.VTable, @ptrCast(self.vtable)).GetUICommandProperty(@as(*const IUIFramework, @ptrCast(self)), command_id_, key_, value_);
            }
            pub inline fn setUICommandProperty(self: *const T, command_id_: u32, key_: ?*const PROPERTYKEY, value_: ?*const PROPVARIANT) HRESULT {
                return @as(*const IUIFramework.VTable, @ptrCast(self.vtable)).SetUICommandProperty(@as(*const IUIFramework, @ptrCast(self)), command_id_, key_, value_);
            }
            pub inline fn invalidateUICommand(self: *const T, command_id_: u32, flags_: UI_INVALIDATIONS, key_: ?*const PROPERTYKEY) HRESULT {
                return @as(*const IUIFramework.VTable, @ptrCast(self.vtable)).InvalidateUICommand(@as(*const IUIFramework, @ptrCast(self)), command_id_, flags_, key_);
            }
            pub inline fn flushPendingInvalidations(self: *const T) HRESULT {
                return @as(*const IUIFramework.VTable, @ptrCast(self.vtable)).FlushPendingInvalidations(@as(*const IUIFramework, @ptrCast(self)));
            }
            pub inline fn setModes(self: *const T, i_modes_: i32) HRESULT {
                return @as(*const IUIFramework.VTable, @ptrCast(self.vtable)).SetModes(@as(*const IUIFramework, @ptrCast(self)), i_modes_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const UI_EVENTPARAMS_COMMAND = extern struct {
    CommandID: u32,
    CommandName: ?[*:0]const u16,
    ParentCommandID: u32,
    ParentCommandName: ?[*:0]const u16,
    SelectionIndex: u32,
    Location: UI_EVENTLOCATION,
};

pub const UI_EVENTPARAMS = extern struct {
    EventType: UI_EVENTTYPE,
    Anonymous: extern union {
        Modes: i32,
        Params: UI_EVENTPARAMS_COMMAND,
    },
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IUIEventLogger_Value = Guid.initString("ec3e1034-dbf4-41a1-95d5-03e0f1026e05");
pub const IID_IUIEventLogger = &IID_IUIEventLogger_Value;
pub const IUIEventLogger = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnUIEvent: *const fn (
            self: *const IUIEventLogger,
            p_event_params: ?*UI_EVENTPARAMS,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onUIEvent(self: *const T, p_event_params_: ?*UI_EVENTPARAMS) void {
                return @as(*const IUIEventLogger.VTable, @ptrCast(self.vtable)).OnUIEvent(@as(*const IUIEventLogger, @ptrCast(self)), p_event_params_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IUIEventingManager_Value = Guid.initString("3be6ea7f-9a9b-4198-9368-9b0f923bd534");
pub const IID_IUIEventingManager = &IID_IUIEventingManager_Value;
pub const IUIEventingManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetEventLogger: *const fn (
            self: *const IUIEventingManager,
            event_logger: ?*IUIEventLogger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setEventLogger(self: *const T, event_logger_: ?*IUIEventLogger) HRESULT {
                return @as(*const IUIEventingManager.VTable, @ptrCast(self.vtable)).SetEventLogger(@as(*const IUIEventingManager, @ptrCast(self)), event_logger_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIContextualUI_Value = Guid.initString("eea11f37-7c46-437c-8e55-b52122b29293");
pub const IID_IUIContextualUI = &IID_IUIContextualUI_Value;
pub const IUIContextualUI = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ShowAtLocation: *const fn (
            self: *const IUIContextualUI,
            x: i32,
            y: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn showAtLocation(self: *const T, x_: i32, y_: i32) HRESULT {
                return @as(*const IUIContextualUI.VTable, @ptrCast(self.vtable)).ShowAtLocation(@as(*const IUIContextualUI, @ptrCast(self)), x_, y_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IUICollection_Value = Guid.initString("df4f45bf-6f9d-4dd7-9d68-d8f9cd18c4db");
pub const IID_IUICollection = &IID_IUICollection_Value;
pub const IUICollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const IUICollection,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItem: *const fn (
            self: *const IUICollection,
            index: u32,
            item: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IUICollection,
            item: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Insert: *const fn (
            self: *const IUICollection,
            index: u32,
            item: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAt: *const fn (
            self: *const IUICollection,
            index: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Replace: *const fn (
            self: *const IUICollection,
            index_replaced: u32,
            item_replace_with: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IUICollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IUICollection.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IUICollection, @ptrCast(self)), count_);
            }
            pub inline fn getItem(self: *const T, index_: u32, item_: ?*?*IUnknown) HRESULT {
                return @as(*const IUICollection.VTable, @ptrCast(self.vtable)).GetItem(@as(*const IUICollection, @ptrCast(self)), index_, item_);
            }
            pub inline fn add(self: *const T, item_: ?*IUnknown) HRESULT {
                return @as(*const IUICollection.VTable, @ptrCast(self.vtable)).Add(@as(*const IUICollection, @ptrCast(self)), item_);
            }
            pub inline fn insert(self: *const T, index_: u32, item_: ?*IUnknown) HRESULT {
                return @as(*const IUICollection.VTable, @ptrCast(self.vtable)).Insert(@as(*const IUICollection, @ptrCast(self)), index_, item_);
            }
            pub inline fn removeAt(self: *const T, index_: u32) HRESULT {
                return @as(*const IUICollection.VTable, @ptrCast(self.vtable)).RemoveAt(@as(*const IUICollection, @ptrCast(self)), index_);
            }
            pub inline fn replace(self: *const T, index_replaced_: u32, item_replace_with_: ?*IUnknown) HRESULT {
                return @as(*const IUICollection.VTable, @ptrCast(self.vtable)).Replace(@as(*const IUICollection, @ptrCast(self)), index_replaced_, item_replace_with_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IUICollection.VTable, @ptrCast(self.vtable)).Clear(@as(*const IUICollection, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const UI_COLLECTIONCHANGE = enum(i32) {
    INSERT = 0,
    REMOVE = 1,
    REPLACE = 2,
    RESET = 3,
};
pub const UI_COLLECTIONCHANGE_INSERT = UI_COLLECTIONCHANGE.INSERT;
pub const UI_COLLECTIONCHANGE_REMOVE = UI_COLLECTIONCHANGE.REMOVE;
pub const UI_COLLECTIONCHANGE_REPLACE = UI_COLLECTIONCHANGE.REPLACE;
pub const UI_COLLECTIONCHANGE_RESET = UI_COLLECTIONCHANGE.RESET;

// TODO: this type is limited to platform 'windows6.1'
const IID_IUICollectionChangedEvent_Value = Guid.initString("6502ae91-a14d-44b5-bbd0-62aacc581d52");
pub const IID_IUICollectionChangedEvent = &IID_IUICollectionChangedEvent_Value;
pub const IUICollectionChangedEvent = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnChanged: *const fn (
            self: *const IUICollectionChangedEvent,
            action: UI_COLLECTIONCHANGE,
            old_index: u32,
            old_item: ?*IUnknown,
            new_index: u32,
            new_item: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onChanged(self: *const T, action_: UI_COLLECTIONCHANGE, old_index_: u32, old_item_: ?*IUnknown, new_index_: u32, new_item_: ?*IUnknown) HRESULT {
                return @as(*const IUICollectionChangedEvent.VTable, @ptrCast(self.vtable)).OnChanged(@as(*const IUICollectionChangedEvent, @ptrCast(self)), action_, old_index_, old_item_, new_index_, new_item_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const UI_EXECUTIONVERB = enum(i32) {
    EXECUTE = 0,
    PREVIEW = 1,
    CANCELPREVIEW = 2,
};
pub const UI_EXECUTIONVERB_EXECUTE = UI_EXECUTIONVERB.EXECUTE;
pub const UI_EXECUTIONVERB_PREVIEW = UI_EXECUTIONVERB.PREVIEW;
pub const UI_EXECUTIONVERB_CANCELPREVIEW = UI_EXECUTIONVERB.CANCELPREVIEW;

// TODO: this type is limited to platform 'windows6.1'
const IID_IUICommandHandler_Value = Guid.initString("75ae0a2d-dc03-4c9f-8883-069660d0beb6");
pub const IID_IUICommandHandler = &IID_IUICommandHandler_Value;
pub const IUICommandHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Execute: *const fn (
            self: *const IUICommandHandler,
            command_id: u32,
            verb: UI_EXECUTIONVERB,
            key: ?*const PROPERTYKEY,
            current_value: ?*const PROPVARIANT,
            command_execution_properties: ?*IUISimplePropertySet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateProperty: *const fn (
            self: *const IUICommandHandler,
            command_id: u32,
            key: ?*const PROPERTYKEY,
            current_value: ?*const PROPVARIANT,
            new_value: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn execute(self: *const T, command_id_: u32, verb_: UI_EXECUTIONVERB, key_: ?*const PROPERTYKEY, current_value_: ?*const PROPVARIANT, command_execution_properties_: ?*IUISimplePropertySet) HRESULT {
                return @as(*const IUICommandHandler.VTable, @ptrCast(self.vtable)).Execute(@as(*const IUICommandHandler, @ptrCast(self)), command_id_, verb_, key_, current_value_, command_execution_properties_);
            }
            pub inline fn updateProperty(self: *const T, command_id_: u32, key_: ?*const PROPERTYKEY, current_value_: ?*const PROPVARIANT, new_value_: ?*PROPVARIANT) HRESULT {
                return @as(*const IUICommandHandler.VTable, @ptrCast(self.vtable)).UpdateProperty(@as(*const IUICommandHandler, @ptrCast(self)), command_id_, key_, current_value_, new_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const UI_COMMANDTYPE = enum(i32) {
    UNKNOWN = 0,
    GROUP = 1,
    ACTION = 2,
    ANCHOR = 3,
    CONTEXT = 4,
    COLLECTION = 5,
    COMMANDCOLLECTION = 6,
    DECIMAL = 7,
    BOOLEAN = 8,
    FONT = 9,
    RECENTITEMS = 10,
    COLORANCHOR = 11,
    COLORCOLLECTION = 12,
};
pub const UI_COMMANDTYPE_UNKNOWN = UI_COMMANDTYPE.UNKNOWN;
pub const UI_COMMANDTYPE_GROUP = UI_COMMANDTYPE.GROUP;
pub const UI_COMMANDTYPE_ACTION = UI_COMMANDTYPE.ACTION;
pub const UI_COMMANDTYPE_ANCHOR = UI_COMMANDTYPE.ANCHOR;
pub const UI_COMMANDTYPE_CONTEXT = UI_COMMANDTYPE.CONTEXT;
pub const UI_COMMANDTYPE_COLLECTION = UI_COMMANDTYPE.COLLECTION;
pub const UI_COMMANDTYPE_COMMANDCOLLECTION = UI_COMMANDTYPE.COMMANDCOLLECTION;
pub const UI_COMMANDTYPE_DECIMAL = UI_COMMANDTYPE.DECIMAL;
pub const UI_COMMANDTYPE_BOOLEAN = UI_COMMANDTYPE.BOOLEAN;
pub const UI_COMMANDTYPE_FONT = UI_COMMANDTYPE.FONT;
pub const UI_COMMANDTYPE_RECENTITEMS = UI_COMMANDTYPE.RECENTITEMS;
pub const UI_COMMANDTYPE_COLORANCHOR = UI_COMMANDTYPE.COLORANCHOR;
pub const UI_COMMANDTYPE_COLORCOLLECTION = UI_COMMANDTYPE.COLORCOLLECTION;

pub const UI_VIEWTYPE = enum(i32) {
    N = 1,
};
pub const UI_VIEWTYPE_RIBBON = UI_VIEWTYPE.N;

pub const UI_VIEWVERB = enum(i32) {
    CREATE = 0,
    DESTROY = 1,
    SIZE = 2,
    ERROR = 3,
};
pub const UI_VIEWVERB_CREATE = UI_VIEWVERB.CREATE;
pub const UI_VIEWVERB_DESTROY = UI_VIEWVERB.DESTROY;
pub const UI_VIEWVERB_SIZE = UI_VIEWVERB.SIZE;
pub const UI_VIEWVERB_ERROR = UI_VIEWVERB.ERROR;

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIApplication_Value = Guid.initString("d428903c-729a-491d-910d-682a08ff2522");
pub const IID_IUIApplication = &IID_IUIApplication_Value;
pub const IUIApplication = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnViewChanged: *const fn (
            self: *const IUIApplication,
            view_id: u32,
            type_i_d: UI_VIEWTYPE,
            view: ?*IUnknown,
            verb: UI_VIEWVERB,
            u_reason_code: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCreateUICommand: *const fn (
            self: *const IUIApplication,
            command_id: u32,
            type_i_d: UI_COMMANDTYPE,
            command_handler: ?*?*IUICommandHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDestroyUICommand: *const fn (
            self: *const IUIApplication,
            command_id: u32,
            type_i_d: UI_COMMANDTYPE,
            command_handler: ?*IUICommandHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onViewChanged(self: *const T, view_id_: u32, type_i_d_: UI_VIEWTYPE, view_: ?*IUnknown, verb_: UI_VIEWVERB, u_reason_code_: i32) HRESULT {
                return @as(*const IUIApplication.VTable, @ptrCast(self.vtable)).OnViewChanged(@as(*const IUIApplication, @ptrCast(self)), view_id_, type_i_d_, view_, verb_, u_reason_code_);
            }
            pub inline fn onCreateUICommand(self: *const T, command_id_: u32, type_i_d_: UI_COMMANDTYPE, command_handler_: ?*?*IUICommandHandler) HRESULT {
                return @as(*const IUIApplication.VTable, @ptrCast(self.vtable)).OnCreateUICommand(@as(*const IUIApplication, @ptrCast(self)), command_id_, type_i_d_, command_handler_);
            }
            pub inline fn onDestroyUICommand(self: *const T, command_id_: u32, type_i_d_: UI_COMMANDTYPE, command_handler_: ?*IUICommandHandler) HRESULT {
                return @as(*const IUIApplication.VTable, @ptrCast(self.vtable)).OnDestroyUICommand(@as(*const IUIApplication, @ptrCast(self)), command_id_, type_i_d_, command_handler_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIImage_Value = Guid.initString("23c8c838-4de6-436b-ab01-5554bb7c30dd");
pub const IID_IUIImage = &IID_IUIImage_Value;
pub const IUIImage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetBitmap: *const fn (
            self: *const IUIImage,
            bitmap: ?*?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getBitmap(self: *const T, bitmap_: ?*?HBITMAP) HRESULT {
                return @as(*const IUIImage.VTable, @ptrCast(self.vtable)).GetBitmap(@as(*const IUIImage, @ptrCast(self)), bitmap_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const UI_OWNERSHIP = enum(i32) {
    TRANSFER = 0,
    COPY = 1,
};
pub const UI_OWNERSHIP_TRANSFER = UI_OWNERSHIP.TRANSFER;
pub const UI_OWNERSHIP_COPY = UI_OWNERSHIP.COPY;

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIImageFromBitmap_Value = Guid.initString("18aba7f3-4c1c-4ba2-bf6c-f5c3326fa816");
pub const IID_IUIImageFromBitmap = &IID_IUIImageFromBitmap_Value;
pub const IUIImageFromBitmap = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateImage: *const fn (
            self: *const IUIImageFromBitmap,
            bitmap: ?HBITMAP,
            options: UI_OWNERSHIP,
            image: ?*?*IUIImage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createImage(self: *const T, bitmap_: ?HBITMAP, options_: UI_OWNERSHIP, image_: ?*?*IUIImage) HRESULT {
                return @as(*const IUIImageFromBitmap.VTable, @ptrCast(self.vtable)).CreateImage(@as(*const IUIImageFromBitmap, @ptrCast(self)), bitmap_, options_, image_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (10)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const HBITMAP = @import("../graphics/gdi.zig").HBITMAP;
const HINSTANCE = @import("../foundation.zig").HINSTANCE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const PROPERTYKEY = @import("../ui/shell/properties_system.zig").PROPERTYKEY;
const PROPVARIANT = @import("../system/com/structured_storage.zig").PROPVARIANT;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
