//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (5)
//--------------------------------------------------------------------------------
pub const UI_ANIMATION_SECONDS_EVENTUALLY = @as(i32, -1);
pub const UI_ANIMATION_REPEAT_INDEFINITELY = @as(i32, -1);
pub const UI_ANIMATION_REPEAT_INDEFINITELY_CONCLUDE_AT_END = @as(i32, -1);
pub const UI_ANIMATION_REPEAT_INDEFINITELY_CONCLUDE_AT_START = @as(i32, -2);
pub const UI_ANIMATION_SECONDS_INFINITE = @as(i32, -1);

//--------------------------------------------------------------------------------
// Section: Types (51)
//--------------------------------------------------------------------------------
pub const UI_ANIMATION_KEYFRAME = isize;

const CLSID_UIAnimationManager_Value = Guid.initString("4c1fc63a-695c-47e8-a339-1a194be3d0b8");
pub const CLSID_UIAnimationManager = &CLSID_UIAnimationManager_Value;

const CLSID_UIAnimationManager2_Value = Guid.initString("d25d8842-8884-4a4a-b321-091314379bdd");
pub const CLSID_UIAnimationManager2 = &CLSID_UIAnimationManager2_Value;

const CLSID_UIAnimationTransitionLibrary_Value = Guid.initString("1d6322ad-aa85-4ef5-a828-86d71067d145");
pub const CLSID_UIAnimationTransitionLibrary = &CLSID_UIAnimationTransitionLibrary_Value;

const CLSID_UIAnimationTransitionLibrary2_Value = Guid.initString("812f944a-c5c8-4cd9-b0a6-b3da802f228d");
pub const CLSID_UIAnimationTransitionLibrary2 = &CLSID_UIAnimationTransitionLibrary2_Value;

const CLSID_UIAnimationTransitionFactory_Value = Guid.initString("8a9b1cdd-fcd7-419c-8b44-42fd17db1887");
pub const CLSID_UIAnimationTransitionFactory = &CLSID_UIAnimationTransitionFactory_Value;

const CLSID_UIAnimationTransitionFactory2_Value = Guid.initString("84302f97-7f7b-4040-b190-72ac9d18e420");
pub const CLSID_UIAnimationTransitionFactory2 = &CLSID_UIAnimationTransitionFactory2_Value;

const CLSID_UIAnimationTimer_Value = Guid.initString("bfcd4a0c-06b6-4384-b768-0daa792c380e");
pub const CLSID_UIAnimationTimer = &CLSID_UIAnimationTimer_Value;

pub const UI_ANIMATION_UPDATE_RESULT = enum(i32) {
    NO_CHANGE = 0,
    VARIABLES_CHANGED = 1,
};
pub const UI_ANIMATION_UPDATE_NO_CHANGE = UI_ANIMATION_UPDATE_RESULT.NO_CHANGE;
pub const UI_ANIMATION_UPDATE_VARIABLES_CHANGED = UI_ANIMATION_UPDATE_RESULT.VARIABLES_CHANGED;

pub const UI_ANIMATION_MANAGER_STATUS = enum(i32) {
    IDLE = 0,
    BUSY = 1,
};
pub const UI_ANIMATION_MANAGER_IDLE = UI_ANIMATION_MANAGER_STATUS.IDLE;
pub const UI_ANIMATION_MANAGER_BUSY = UI_ANIMATION_MANAGER_STATUS.BUSY;

pub const UI_ANIMATION_MODE = enum(i32) {
    DISABLED = 0,
    SYSTEM_DEFAULT = 1,
    ENABLED = 2,
};
pub const UI_ANIMATION_MODE_DISABLED = UI_ANIMATION_MODE.DISABLED;
pub const UI_ANIMATION_MODE_SYSTEM_DEFAULT = UI_ANIMATION_MODE.SYSTEM_DEFAULT;
pub const UI_ANIMATION_MODE_ENABLED = UI_ANIMATION_MODE.ENABLED;

pub const UI_ANIMATION_REPEAT_MODE = enum(i32) {
    NORMAL = 0,
    ALTERNATE = 1,
};
pub const UI_ANIMATION_REPEAT_MODE_NORMAL = UI_ANIMATION_REPEAT_MODE.NORMAL;
pub const UI_ANIMATION_REPEAT_MODE_ALTERNATE = UI_ANIMATION_REPEAT_MODE.ALTERNATE;

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIAnimationManager_Value = Guid.initString("9169896c-ac8d-4e7d-94e5-67fa4dc2f2e8");
pub const IID_IUIAnimationManager = &IID_IUIAnimationManager_Value;
pub const IUIAnimationManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateAnimationVariable: *const fn (
            self: *const IUIAnimationManager,
            initial_value: f64,
            variable: ?*?*IUIAnimationVariable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScheduleTransition: *const fn (
            self: *const IUIAnimationManager,
            variable: ?*IUIAnimationVariable,
            transition: ?*IUIAnimationTransition,
            time_now: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStoryboard: *const fn (
            self: *const IUIAnimationManager,
            storyboard: ?*?*IUIAnimationStoryboard,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FinishAllStoryboards: *const fn (
            self: *const IUIAnimationManager,
            completion_deadline: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AbandonAllStoryboards: *const fn (
            self: *const IUIAnimationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: *const fn (
            self: *const IUIAnimationManager,
            time_now: f64,
            update_result: ?*UI_ANIMATION_UPDATE_RESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVariableFromTag: *const fn (
            self: *const IUIAnimationManager,
            object: ?*IUnknown,
            id: u32,
            variable: ?*?*IUIAnimationVariable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStoryboardFromTag: *const fn (
            self: *const IUIAnimationManager,
            object: ?*IUnknown,
            id: u32,
            storyboard: ?*?*IUIAnimationStoryboard,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn (
            self: *const IUIAnimationManager,
            status: ?*UI_ANIMATION_MANAGER_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAnimationMode: *const fn (
            self: *const IUIAnimationManager,
            mode: UI_ANIMATION_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pause: *const fn (
            self: *const IUIAnimationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: *const fn (
            self: *const IUIAnimationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetManagerEventHandler: *const fn (
            self: *const IUIAnimationManager,
            handler: ?*IUIAnimationManagerEventHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCancelPriorityComparison: *const fn (
            self: *const IUIAnimationManager,
            comparison: ?*IUIAnimationPriorityComparison,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTrimPriorityComparison: *const fn (
            self: *const IUIAnimationManager,
            comparison: ?*IUIAnimationPriorityComparison,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompressPriorityComparison: *const fn (
            self: *const IUIAnimationManager,
            comparison: ?*IUIAnimationPriorityComparison,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConcludePriorityComparison: *const fn (
            self: *const IUIAnimationManager,
            comparison: ?*IUIAnimationPriorityComparison,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultLongestAcceptableDelay: *const fn (
            self: *const IUIAnimationManager,
            delay: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Shutdown: *const fn (
            self: *const IUIAnimationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createAnimationVariable(self: *const T, initial_value_: f64, variable_: ?*?*IUIAnimationVariable) HRESULT {
                return @as(*const IUIAnimationManager.VTable, @ptrCast(self.vtable)).CreateAnimationVariable(@as(*const IUIAnimationManager, @ptrCast(self)), initial_value_, variable_);
            }
            pub inline fn scheduleTransition(self: *const T, variable_: ?*IUIAnimationVariable, transition_: ?*IUIAnimationTransition, time_now_: f64) HRESULT {
                return @as(*const IUIAnimationManager.VTable, @ptrCast(self.vtable)).ScheduleTransition(@as(*const IUIAnimationManager, @ptrCast(self)), variable_, transition_, time_now_);
            }
            pub inline fn createStoryboard(self: *const T, storyboard_: ?*?*IUIAnimationStoryboard) HRESULT {
                return @as(*const IUIAnimationManager.VTable, @ptrCast(self.vtable)).CreateStoryboard(@as(*const IUIAnimationManager, @ptrCast(self)), storyboard_);
            }
            pub inline fn finishAllStoryboards(self: *const T, completion_deadline_: f64) HRESULT {
                return @as(*const IUIAnimationManager.VTable, @ptrCast(self.vtable)).FinishAllStoryboards(@as(*const IUIAnimationManager, @ptrCast(self)), completion_deadline_);
            }
            pub inline fn abandonAllStoryboards(self: *const T) HRESULT {
                return @as(*const IUIAnimationManager.VTable, @ptrCast(self.vtable)).AbandonAllStoryboards(@as(*const IUIAnimationManager, @ptrCast(self)));
            }
            pub inline fn update(self: *const T, time_now_: f64, update_result_: ?*UI_ANIMATION_UPDATE_RESULT) HRESULT {
                return @as(*const IUIAnimationManager.VTable, @ptrCast(self.vtable)).Update(@as(*const IUIAnimationManager, @ptrCast(self)), time_now_, update_result_);
            }
            pub inline fn getVariableFromTag(self: *const T, object_: ?*IUnknown, id_: u32, variable_: ?*?*IUIAnimationVariable) HRESULT {
                return @as(*const IUIAnimationManager.VTable, @ptrCast(self.vtable)).GetVariableFromTag(@as(*const IUIAnimationManager, @ptrCast(self)), object_, id_, variable_);
            }
            pub inline fn getStoryboardFromTag(self: *const T, object_: ?*IUnknown, id_: u32, storyboard_: ?*?*IUIAnimationStoryboard) HRESULT {
                return @as(*const IUIAnimationManager.VTable, @ptrCast(self.vtable)).GetStoryboardFromTag(@as(*const IUIAnimationManager, @ptrCast(self)), object_, id_, storyboard_);
            }
            pub inline fn getStatus(self: *const T, status_: ?*UI_ANIMATION_MANAGER_STATUS) HRESULT {
                return @as(*const IUIAnimationManager.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IUIAnimationManager, @ptrCast(self)), status_);
            }
            pub inline fn setAnimationMode(self: *const T, mode_: UI_ANIMATION_MODE) HRESULT {
                return @as(*const IUIAnimationManager.VTable, @ptrCast(self.vtable)).SetAnimationMode(@as(*const IUIAnimationManager, @ptrCast(self)), mode_);
            }
            pub inline fn pause(self: *const T) HRESULT {
                return @as(*const IUIAnimationManager.VTable, @ptrCast(self.vtable)).Pause(@as(*const IUIAnimationManager, @ptrCast(self)));
            }
            pub inline fn @"resume"(self: *const T) HRESULT {
                return @as(*const IUIAnimationManager.VTable, @ptrCast(self.vtable)).Resume(@as(*const IUIAnimationManager, @ptrCast(self)));
            }
            pub inline fn setManagerEventHandler(self: *const T, handler_: ?*IUIAnimationManagerEventHandler) HRESULT {
                return @as(*const IUIAnimationManager.VTable, @ptrCast(self.vtable)).SetManagerEventHandler(@as(*const IUIAnimationManager, @ptrCast(self)), handler_);
            }
            pub inline fn setCancelPriorityComparison(self: *const T, comparison_: ?*IUIAnimationPriorityComparison) HRESULT {
                return @as(*const IUIAnimationManager.VTable, @ptrCast(self.vtable)).SetCancelPriorityComparison(@as(*const IUIAnimationManager, @ptrCast(self)), comparison_);
            }
            pub inline fn setTrimPriorityComparison(self: *const T, comparison_: ?*IUIAnimationPriorityComparison) HRESULT {
                return @as(*const IUIAnimationManager.VTable, @ptrCast(self.vtable)).SetTrimPriorityComparison(@as(*const IUIAnimationManager, @ptrCast(self)), comparison_);
            }
            pub inline fn setCompressPriorityComparison(self: *const T, comparison_: ?*IUIAnimationPriorityComparison) HRESULT {
                return @as(*const IUIAnimationManager.VTable, @ptrCast(self.vtable)).SetCompressPriorityComparison(@as(*const IUIAnimationManager, @ptrCast(self)), comparison_);
            }
            pub inline fn setConcludePriorityComparison(self: *const T, comparison_: ?*IUIAnimationPriorityComparison) HRESULT {
                return @as(*const IUIAnimationManager.VTable, @ptrCast(self.vtable)).SetConcludePriorityComparison(@as(*const IUIAnimationManager, @ptrCast(self)), comparison_);
            }
            pub inline fn setDefaultLongestAcceptableDelay(self: *const T, delay_: f64) HRESULT {
                return @as(*const IUIAnimationManager.VTable, @ptrCast(self.vtable)).SetDefaultLongestAcceptableDelay(@as(*const IUIAnimationManager, @ptrCast(self)), delay_);
            }
            pub inline fn shutdown(self: *const T) HRESULT {
                return @as(*const IUIAnimationManager.VTable, @ptrCast(self.vtable)).Shutdown(@as(*const IUIAnimationManager, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const UI_ANIMATION_ROUNDING_MODE = enum(i32) {
    NEAREST = 0,
    FLOOR = 1,
    CEILING = 2,
};
pub const UI_ANIMATION_ROUNDING_NEAREST = UI_ANIMATION_ROUNDING_MODE.NEAREST;
pub const UI_ANIMATION_ROUNDING_FLOOR = UI_ANIMATION_ROUNDING_MODE.FLOOR;
pub const UI_ANIMATION_ROUNDING_CEILING = UI_ANIMATION_ROUNDING_MODE.CEILING;

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIAnimationVariable_Value = Guid.initString("8ceeb155-2849-4ce5-9448-91ff70e1e4d9");
pub const IID_IUIAnimationVariable = &IID_IUIAnimationVariable_Value;
pub const IUIAnimationVariable = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetValue: *const fn (
            self: *const IUIAnimationVariable,
            value: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFinalValue: *const fn (
            self: *const IUIAnimationVariable,
            final_value: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreviousValue: *const fn (
            self: *const IUIAnimationVariable,
            previous_value: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIntegerValue: *const fn (
            self: *const IUIAnimationVariable,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFinalIntegerValue: *const fn (
            self: *const IUIAnimationVariable,
            final_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreviousIntegerValue: *const fn (
            self: *const IUIAnimationVariable,
            previous_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentStoryboard: *const fn (
            self: *const IUIAnimationVariable,
            storyboard: ?*?*IUIAnimationStoryboard,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLowerBound: *const fn (
            self: *const IUIAnimationVariable,
            bound: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUpperBound: *const fn (
            self: *const IUIAnimationVariable,
            bound: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRoundingMode: *const fn (
            self: *const IUIAnimationVariable,
            mode: UI_ANIMATION_ROUNDING_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTag: *const fn (
            self: *const IUIAnimationVariable,
            object: ?*IUnknown,
            id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTag: *const fn (
            self: *const IUIAnimationVariable,
            object: ?*?*IUnknown,
            id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVariableChangeHandler: *const fn (
            self: *const IUIAnimationVariable,
            handler: ?*IUIAnimationVariableChangeHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVariableIntegerChangeHandler: *const fn (
            self: *const IUIAnimationVariable,
            handler: ?*IUIAnimationVariableIntegerChangeHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getValue(self: *const T, value_: ?*f64) HRESULT {
                return @as(*const IUIAnimationVariable.VTable, @ptrCast(self.vtable)).GetValue(@as(*const IUIAnimationVariable, @ptrCast(self)), value_);
            }
            pub inline fn getFinalValue(self: *const T, final_value_: ?*f64) HRESULT {
                return @as(*const IUIAnimationVariable.VTable, @ptrCast(self.vtable)).GetFinalValue(@as(*const IUIAnimationVariable, @ptrCast(self)), final_value_);
            }
            pub inline fn getPreviousValue(self: *const T, previous_value_: ?*f64) HRESULT {
                return @as(*const IUIAnimationVariable.VTable, @ptrCast(self.vtable)).GetPreviousValue(@as(*const IUIAnimationVariable, @ptrCast(self)), previous_value_);
            }
            pub inline fn getIntegerValue(self: *const T, value_: ?*i32) HRESULT {
                return @as(*const IUIAnimationVariable.VTable, @ptrCast(self.vtable)).GetIntegerValue(@as(*const IUIAnimationVariable, @ptrCast(self)), value_);
            }
            pub inline fn getFinalIntegerValue(self: *const T, final_value_: ?*i32) HRESULT {
                return @as(*const IUIAnimationVariable.VTable, @ptrCast(self.vtable)).GetFinalIntegerValue(@as(*const IUIAnimationVariable, @ptrCast(self)), final_value_);
            }
            pub inline fn getPreviousIntegerValue(self: *const T, previous_value_: ?*i32) HRESULT {
                return @as(*const IUIAnimationVariable.VTable, @ptrCast(self.vtable)).GetPreviousIntegerValue(@as(*const IUIAnimationVariable, @ptrCast(self)), previous_value_);
            }
            pub inline fn getCurrentStoryboard(self: *const T, storyboard_: ?*?*IUIAnimationStoryboard) HRESULT {
                return @as(*const IUIAnimationVariable.VTable, @ptrCast(self.vtable)).GetCurrentStoryboard(@as(*const IUIAnimationVariable, @ptrCast(self)), storyboard_);
            }
            pub inline fn setLowerBound(self: *const T, bound_: f64) HRESULT {
                return @as(*const IUIAnimationVariable.VTable, @ptrCast(self.vtable)).SetLowerBound(@as(*const IUIAnimationVariable, @ptrCast(self)), bound_);
            }
            pub inline fn setUpperBound(self: *const T, bound_: f64) HRESULT {
                return @as(*const IUIAnimationVariable.VTable, @ptrCast(self.vtable)).SetUpperBound(@as(*const IUIAnimationVariable, @ptrCast(self)), bound_);
            }
            pub inline fn setRoundingMode(self: *const T, mode_: UI_ANIMATION_ROUNDING_MODE) HRESULT {
                return @as(*const IUIAnimationVariable.VTable, @ptrCast(self.vtable)).SetRoundingMode(@as(*const IUIAnimationVariable, @ptrCast(self)), mode_);
            }
            pub inline fn setTag(self: *const T, object_: ?*IUnknown, id_: u32) HRESULT {
                return @as(*const IUIAnimationVariable.VTable, @ptrCast(self.vtable)).SetTag(@as(*const IUIAnimationVariable, @ptrCast(self)), object_, id_);
            }
            pub inline fn getTag(self: *const T, object_: ?*?*IUnknown, id_: ?*u32) HRESULT {
                return @as(*const IUIAnimationVariable.VTable, @ptrCast(self.vtable)).GetTag(@as(*const IUIAnimationVariable, @ptrCast(self)), object_, id_);
            }
            pub inline fn setVariableChangeHandler(self: *const T, handler_: ?*IUIAnimationVariableChangeHandler) HRESULT {
                return @as(*const IUIAnimationVariable.VTable, @ptrCast(self.vtable)).SetVariableChangeHandler(@as(*const IUIAnimationVariable, @ptrCast(self)), handler_);
            }
            pub inline fn setVariableIntegerChangeHandler(self: *const T, handler_: ?*IUIAnimationVariableIntegerChangeHandler) HRESULT {
                return @as(*const IUIAnimationVariable.VTable, @ptrCast(self.vtable)).SetVariableIntegerChangeHandler(@as(*const IUIAnimationVariable, @ptrCast(self)), handler_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const UI_ANIMATION_STORYBOARD_STATUS = enum(i32) {
    BUILDING = 0,
    SCHEDULED = 1,
    CANCELLED = 2,
    PLAYING = 3,
    TRUNCATED = 4,
    FINISHED = 5,
    READY = 6,
    INSUFFICIENT_PRIORITY = 7,
};
pub const UI_ANIMATION_STORYBOARD_BUILDING = UI_ANIMATION_STORYBOARD_STATUS.BUILDING;
pub const UI_ANIMATION_STORYBOARD_SCHEDULED = UI_ANIMATION_STORYBOARD_STATUS.SCHEDULED;
pub const UI_ANIMATION_STORYBOARD_CANCELLED = UI_ANIMATION_STORYBOARD_STATUS.CANCELLED;
pub const UI_ANIMATION_STORYBOARD_PLAYING = UI_ANIMATION_STORYBOARD_STATUS.PLAYING;
pub const UI_ANIMATION_STORYBOARD_TRUNCATED = UI_ANIMATION_STORYBOARD_STATUS.TRUNCATED;
pub const UI_ANIMATION_STORYBOARD_FINISHED = UI_ANIMATION_STORYBOARD_STATUS.FINISHED;
pub const UI_ANIMATION_STORYBOARD_READY = UI_ANIMATION_STORYBOARD_STATUS.READY;
pub const UI_ANIMATION_STORYBOARD_INSUFFICIENT_PRIORITY = UI_ANIMATION_STORYBOARD_STATUS.INSUFFICIENT_PRIORITY;

pub const UI_ANIMATION_SCHEDULING_RESULT = enum(i32) {
    UNEXPECTED_FAILURE = 0,
    INSUFFICIENT_PRIORITY = 1,
    ALREADY_SCHEDULED = 2,
    SUCCEEDED = 3,
    DEFERRED = 4,
};
pub const UI_ANIMATION_SCHEDULING_UNEXPECTED_FAILURE = UI_ANIMATION_SCHEDULING_RESULT.UNEXPECTED_FAILURE;
pub const UI_ANIMATION_SCHEDULING_INSUFFICIENT_PRIORITY = UI_ANIMATION_SCHEDULING_RESULT.INSUFFICIENT_PRIORITY;
pub const UI_ANIMATION_SCHEDULING_ALREADY_SCHEDULED = UI_ANIMATION_SCHEDULING_RESULT.ALREADY_SCHEDULED;
pub const UI_ANIMATION_SCHEDULING_SUCCEEDED = UI_ANIMATION_SCHEDULING_RESULT.SUCCEEDED;
pub const UI_ANIMATION_SCHEDULING_DEFERRED = UI_ANIMATION_SCHEDULING_RESULT.DEFERRED;

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIAnimationStoryboard_Value = Guid.initString("a8ff128f-9bf9-4af1-9e67-e5e410defb84");
pub const IID_IUIAnimationStoryboard = &IID_IUIAnimationStoryboard_Value;
pub const IUIAnimationStoryboard = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddTransition: *const fn (
            self: *const IUIAnimationStoryboard,
            variable: ?*IUIAnimationVariable,
            transition: ?*IUIAnimationTransition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddKeyframeAtOffset: *const fn (
            self: *const IUIAnimationStoryboard,
            existing_keyframe: UI_ANIMATION_KEYFRAME,
            offset: f64,
            keyframe: ?*UI_ANIMATION_KEYFRAME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddKeyframeAfterTransition: *const fn (
            self: *const IUIAnimationStoryboard,
            transition: ?*IUIAnimationTransition,
            keyframe: ?*UI_ANIMATION_KEYFRAME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTransitionAtKeyframe: *const fn (
            self: *const IUIAnimationStoryboard,
            variable: ?*IUIAnimationVariable,
            transition: ?*IUIAnimationTransition,
            start_keyframe: UI_ANIMATION_KEYFRAME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTransitionBetweenKeyframes: *const fn (
            self: *const IUIAnimationStoryboard,
            variable: ?*IUIAnimationVariable,
            transition: ?*IUIAnimationTransition,
            start_keyframe: UI_ANIMATION_KEYFRAME,
            end_keyframe: UI_ANIMATION_KEYFRAME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RepeatBetweenKeyframes: *const fn (
            self: *const IUIAnimationStoryboard,
            start_keyframe: UI_ANIMATION_KEYFRAME,
            end_keyframe: UI_ANIMATION_KEYFRAME,
            repetition_count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HoldVariable: *const fn (
            self: *const IUIAnimationStoryboard,
            variable: ?*IUIAnimationVariable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLongestAcceptableDelay: *const fn (
            self: *const IUIAnimationStoryboard,
            delay: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Schedule: *const fn (
            self: *const IUIAnimationStoryboard,
            time_now: f64,
            scheduling_result: ?*UI_ANIMATION_SCHEDULING_RESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Conclude: *const fn (
            self: *const IUIAnimationStoryboard,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish: *const fn (
            self: *const IUIAnimationStoryboard,
            completion_deadline: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abandon: *const fn (
            self: *const IUIAnimationStoryboard,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTag: *const fn (
            self: *const IUIAnimationStoryboard,
            object: ?*IUnknown,
            id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTag: *const fn (
            self: *const IUIAnimationStoryboard,
            object: ?*?*IUnknown,
            id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn (
            self: *const IUIAnimationStoryboard,
            status: ?*UI_ANIMATION_STORYBOARD_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetElapsedTime: *const fn (
            self: *const IUIAnimationStoryboard,
            elapsed_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStoryboardEventHandler: *const fn (
            self: *const IUIAnimationStoryboard,
            handler: ?*IUIAnimationStoryboardEventHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addTransition(self: *const T, variable_: ?*IUIAnimationVariable, transition_: ?*IUIAnimationTransition) HRESULT {
                return @as(*const IUIAnimationStoryboard.VTable, @ptrCast(self.vtable)).AddTransition(@as(*const IUIAnimationStoryboard, @ptrCast(self)), variable_, transition_);
            }
            pub inline fn addKeyframeAtOffset(self: *const T, existing_keyframe_: UI_ANIMATION_KEYFRAME, offset_: f64, keyframe_: ?*UI_ANIMATION_KEYFRAME) HRESULT {
                return @as(*const IUIAnimationStoryboard.VTable, @ptrCast(self.vtable)).AddKeyframeAtOffset(@as(*const IUIAnimationStoryboard, @ptrCast(self)), existing_keyframe_, offset_, keyframe_);
            }
            pub inline fn addKeyframeAfterTransition(self: *const T, transition_: ?*IUIAnimationTransition, keyframe_: ?*UI_ANIMATION_KEYFRAME) HRESULT {
                return @as(*const IUIAnimationStoryboard.VTable, @ptrCast(self.vtable)).AddKeyframeAfterTransition(@as(*const IUIAnimationStoryboard, @ptrCast(self)), transition_, keyframe_);
            }
            pub inline fn addTransitionAtKeyframe(self: *const T, variable_: ?*IUIAnimationVariable, transition_: ?*IUIAnimationTransition, start_keyframe_: UI_ANIMATION_KEYFRAME) HRESULT {
                return @as(*const IUIAnimationStoryboard.VTable, @ptrCast(self.vtable)).AddTransitionAtKeyframe(@as(*const IUIAnimationStoryboard, @ptrCast(self)), variable_, transition_, start_keyframe_);
            }
            pub inline fn addTransitionBetweenKeyframes(self: *const T, variable_: ?*IUIAnimationVariable, transition_: ?*IUIAnimationTransition, start_keyframe_: UI_ANIMATION_KEYFRAME, end_keyframe_: UI_ANIMATION_KEYFRAME) HRESULT {
                return @as(*const IUIAnimationStoryboard.VTable, @ptrCast(self.vtable)).AddTransitionBetweenKeyframes(@as(*const IUIAnimationStoryboard, @ptrCast(self)), variable_, transition_, start_keyframe_, end_keyframe_);
            }
            pub inline fn repeatBetweenKeyframes(self: *const T, start_keyframe_: UI_ANIMATION_KEYFRAME, end_keyframe_: UI_ANIMATION_KEYFRAME, repetition_count_: i32) HRESULT {
                return @as(*const IUIAnimationStoryboard.VTable, @ptrCast(self.vtable)).RepeatBetweenKeyframes(@as(*const IUIAnimationStoryboard, @ptrCast(self)), start_keyframe_, end_keyframe_, repetition_count_);
            }
            pub inline fn holdVariable(self: *const T, variable_: ?*IUIAnimationVariable) HRESULT {
                return @as(*const IUIAnimationStoryboard.VTable, @ptrCast(self.vtable)).HoldVariable(@as(*const IUIAnimationStoryboard, @ptrCast(self)), variable_);
            }
            pub inline fn setLongestAcceptableDelay(self: *const T, delay_: f64) HRESULT {
                return @as(*const IUIAnimationStoryboard.VTable, @ptrCast(self.vtable)).SetLongestAcceptableDelay(@as(*const IUIAnimationStoryboard, @ptrCast(self)), delay_);
            }
            pub inline fn schedule(self: *const T, time_now_: f64, scheduling_result_: ?*UI_ANIMATION_SCHEDULING_RESULT) HRESULT {
                return @as(*const IUIAnimationStoryboard.VTable, @ptrCast(self.vtable)).Schedule(@as(*const IUIAnimationStoryboard, @ptrCast(self)), time_now_, scheduling_result_);
            }
            pub inline fn conclude(self: *const T) HRESULT {
                return @as(*const IUIAnimationStoryboard.VTable, @ptrCast(self.vtable)).Conclude(@as(*const IUIAnimationStoryboard, @ptrCast(self)));
            }
            pub inline fn finish(self: *const T, completion_deadline_: f64) HRESULT {
                return @as(*const IUIAnimationStoryboard.VTable, @ptrCast(self.vtable)).Finish(@as(*const IUIAnimationStoryboard, @ptrCast(self)), completion_deadline_);
            }
            pub inline fn abandon(self: *const T) HRESULT {
                return @as(*const IUIAnimationStoryboard.VTable, @ptrCast(self.vtable)).Abandon(@as(*const IUIAnimationStoryboard, @ptrCast(self)));
            }
            pub inline fn setTag(self: *const T, object_: ?*IUnknown, id_: u32) HRESULT {
                return @as(*const IUIAnimationStoryboard.VTable, @ptrCast(self.vtable)).SetTag(@as(*const IUIAnimationStoryboard, @ptrCast(self)), object_, id_);
            }
            pub inline fn getTag(self: *const T, object_: ?*?*IUnknown, id_: ?*u32) HRESULT {
                return @as(*const IUIAnimationStoryboard.VTable, @ptrCast(self.vtable)).GetTag(@as(*const IUIAnimationStoryboard, @ptrCast(self)), object_, id_);
            }
            pub inline fn getStatus(self: *const T, status_: ?*UI_ANIMATION_STORYBOARD_STATUS) HRESULT {
                return @as(*const IUIAnimationStoryboard.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IUIAnimationStoryboard, @ptrCast(self)), status_);
            }
            pub inline fn getElapsedTime(self: *const T, elapsed_time_: ?*f64) HRESULT {
                return @as(*const IUIAnimationStoryboard.VTable, @ptrCast(self.vtable)).GetElapsedTime(@as(*const IUIAnimationStoryboard, @ptrCast(self)), elapsed_time_);
            }
            pub inline fn setStoryboardEventHandler(self: *const T, handler_: ?*IUIAnimationStoryboardEventHandler) HRESULT {
                return @as(*const IUIAnimationStoryboard.VTable, @ptrCast(self.vtable)).SetStoryboardEventHandler(@as(*const IUIAnimationStoryboard, @ptrCast(self)), handler_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIAnimationTransition_Value = Guid.initString("dc6ce252-f731-41cf-b610-614b6ca049ad");
pub const IID_IUIAnimationTransition = &IID_IUIAnimationTransition_Value;
pub const IUIAnimationTransition = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetInitialValue: *const fn (
            self: *const IUIAnimationTransition,
            value: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInitialVelocity: *const fn (
            self: *const IUIAnimationTransition,
            velocity: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDurationKnown: *const fn (
            self: *const IUIAnimationTransition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDuration: *const fn (
            self: *const IUIAnimationTransition,
            duration: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setInitialValue(self: *const T, value_: f64) HRESULT {
                return @as(*const IUIAnimationTransition.VTable, @ptrCast(self.vtable)).SetInitialValue(@as(*const IUIAnimationTransition, @ptrCast(self)), value_);
            }
            pub inline fn setInitialVelocity(self: *const T, velocity_: f64) HRESULT {
                return @as(*const IUIAnimationTransition.VTable, @ptrCast(self.vtable)).SetInitialVelocity(@as(*const IUIAnimationTransition, @ptrCast(self)), velocity_);
            }
            pub inline fn isDurationKnown(self: *const T) HRESULT {
                return @as(*const IUIAnimationTransition.VTable, @ptrCast(self.vtable)).IsDurationKnown(@as(*const IUIAnimationTransition, @ptrCast(self)));
            }
            pub inline fn getDuration(self: *const T, duration_: ?*f64) HRESULT {
                return @as(*const IUIAnimationTransition.VTable, @ptrCast(self.vtable)).GetDuration(@as(*const IUIAnimationTransition, @ptrCast(self)), duration_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIAnimationManagerEventHandler_Value = Guid.initString("783321ed-78a3-4366-b574-6af607a64788");
pub const IID_IUIAnimationManagerEventHandler = &IID_IUIAnimationManagerEventHandler_Value;
pub const IUIAnimationManagerEventHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnManagerStatusChanged: *const fn (
            self: *const IUIAnimationManagerEventHandler,
            new_status: UI_ANIMATION_MANAGER_STATUS,
            previous_status: UI_ANIMATION_MANAGER_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onManagerStatusChanged(self: *const T, new_status_: UI_ANIMATION_MANAGER_STATUS, previous_status_: UI_ANIMATION_MANAGER_STATUS) HRESULT {
                return @as(*const IUIAnimationManagerEventHandler.VTable, @ptrCast(self.vtable)).OnManagerStatusChanged(@as(*const IUIAnimationManagerEventHandler, @ptrCast(self)), new_status_, previous_status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIAnimationVariableChangeHandler_Value = Guid.initString("6358b7ba-87d2-42d5-bf71-82e919dd5862");
pub const IID_IUIAnimationVariableChangeHandler = &IID_IUIAnimationVariableChangeHandler_Value;
pub const IUIAnimationVariableChangeHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnValueChanged: *const fn (
            self: *const IUIAnimationVariableChangeHandler,
            storyboard: ?*IUIAnimationStoryboard,
            variable: ?*IUIAnimationVariable,
            new_value: f64,
            previous_value: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onValueChanged(self: *const T, storyboard_: ?*IUIAnimationStoryboard, variable_: ?*IUIAnimationVariable, new_value_: f64, previous_value_: f64) HRESULT {
                return @as(*const IUIAnimationVariableChangeHandler.VTable, @ptrCast(self.vtable)).OnValueChanged(@as(*const IUIAnimationVariableChangeHandler, @ptrCast(self)), storyboard_, variable_, new_value_, previous_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIAnimationVariableIntegerChangeHandler_Value = Guid.initString("bb3e1550-356e-44b0-99da-85ac6017865e");
pub const IID_IUIAnimationVariableIntegerChangeHandler = &IID_IUIAnimationVariableIntegerChangeHandler_Value;
pub const IUIAnimationVariableIntegerChangeHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnIntegerValueChanged: *const fn (
            self: *const IUIAnimationVariableIntegerChangeHandler,
            storyboard: ?*IUIAnimationStoryboard,
            variable: ?*IUIAnimationVariable,
            new_value: i32,
            previous_value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onIntegerValueChanged(self: *const T, storyboard_: ?*IUIAnimationStoryboard, variable_: ?*IUIAnimationVariable, new_value_: i32, previous_value_: i32) HRESULT {
                return @as(*const IUIAnimationVariableIntegerChangeHandler.VTable, @ptrCast(self.vtable)).OnIntegerValueChanged(@as(*const IUIAnimationVariableIntegerChangeHandler, @ptrCast(self)), storyboard_, variable_, new_value_, previous_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIAnimationStoryboardEventHandler_Value = Guid.initString("3d5c9008-ec7c-4364-9f8a-9af3c58cbae6");
pub const IID_IUIAnimationStoryboardEventHandler = &IID_IUIAnimationStoryboardEventHandler_Value;
pub const IUIAnimationStoryboardEventHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnStoryboardStatusChanged: *const fn (
            self: *const IUIAnimationStoryboardEventHandler,
            storyboard: ?*IUIAnimationStoryboard,
            new_status: UI_ANIMATION_STORYBOARD_STATUS,
            previous_status: UI_ANIMATION_STORYBOARD_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnStoryboardUpdated: *const fn (
            self: *const IUIAnimationStoryboardEventHandler,
            storyboard: ?*IUIAnimationStoryboard,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onStoryboardStatusChanged(self: *const T, storyboard_: ?*IUIAnimationStoryboard, new_status_: UI_ANIMATION_STORYBOARD_STATUS, previous_status_: UI_ANIMATION_STORYBOARD_STATUS) HRESULT {
                return @as(*const IUIAnimationStoryboardEventHandler.VTable, @ptrCast(self.vtable)).OnStoryboardStatusChanged(@as(*const IUIAnimationStoryboardEventHandler, @ptrCast(self)), storyboard_, new_status_, previous_status_);
            }
            pub inline fn onStoryboardUpdated(self: *const T, storyboard_: ?*IUIAnimationStoryboard) HRESULT {
                return @as(*const IUIAnimationStoryboardEventHandler.VTable, @ptrCast(self.vtable)).OnStoryboardUpdated(@as(*const IUIAnimationStoryboardEventHandler, @ptrCast(self)), storyboard_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const UI_ANIMATION_PRIORITY_EFFECT = enum(i32) {
    FAILURE = 0,
    DELAY = 1,
};
pub const UI_ANIMATION_PRIORITY_EFFECT_FAILURE = UI_ANIMATION_PRIORITY_EFFECT.FAILURE;
pub const UI_ANIMATION_PRIORITY_EFFECT_DELAY = UI_ANIMATION_PRIORITY_EFFECT.DELAY;

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIAnimationPriorityComparison_Value = Guid.initString("83fa9b74-5f86-4618-bc6a-a2fac19b3f44");
pub const IID_IUIAnimationPriorityComparison = &IID_IUIAnimationPriorityComparison_Value;
pub const IUIAnimationPriorityComparison = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        HasPriority: *const fn (
            self: *const IUIAnimationPriorityComparison,
            scheduled_storyboard: ?*IUIAnimationStoryboard,
            new_storyboard: ?*IUIAnimationStoryboard,
            priority_effect: UI_ANIMATION_PRIORITY_EFFECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn hasPriority(self: *const T, scheduled_storyboard_: ?*IUIAnimationStoryboard, new_storyboard_: ?*IUIAnimationStoryboard, priority_effect_: UI_ANIMATION_PRIORITY_EFFECT) HRESULT {
                return @as(*const IUIAnimationPriorityComparison.VTable, @ptrCast(self.vtable)).HasPriority(@as(*const IUIAnimationPriorityComparison, @ptrCast(self)), scheduled_storyboard_, new_storyboard_, priority_effect_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const UI_ANIMATION_SLOPE = enum(i32) {
    INCREASING = 0,
    DECREASING = 1,
};
pub const UI_ANIMATION_SLOPE_INCREASING = UI_ANIMATION_SLOPE.INCREASING;
pub const UI_ANIMATION_SLOPE_DECREASING = UI_ANIMATION_SLOPE.DECREASING;

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIAnimationTransitionLibrary_Value = Guid.initString("ca5a14b1-d24f-48b8-8fe4-c78169ba954e");
pub const IID_IUIAnimationTransitionLibrary = &IID_IUIAnimationTransitionLibrary_Value;
pub const IUIAnimationTransitionLibrary = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateInstantaneousTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary,
            final_value: f64,
            transition: ?*?*IUIAnimationTransition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateConstantTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary,
            duration: f64,
            transition: ?*?*IUIAnimationTransition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDiscreteTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary,
            delay: f64,
            final_value: f64,
            hold: f64,
            transition: ?*?*IUIAnimationTransition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateLinearTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary,
            duration: f64,
            final_value: f64,
            transition: ?*?*IUIAnimationTransition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateLinearTransitionFromSpeed: *const fn (
            self: *const IUIAnimationTransitionLibrary,
            speed: f64,
            final_value: f64,
            transition: ?*?*IUIAnimationTransition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSinusoidalTransitionFromVelocity: *const fn (
            self: *const IUIAnimationTransitionLibrary,
            duration: f64,
            period: f64,
            transition: ?*?*IUIAnimationTransition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSinusoidalTransitionFromRange: *const fn (
            self: *const IUIAnimationTransitionLibrary,
            duration: f64,
            minimum_value: f64,
            maximum_value: f64,
            period: f64,
            slope: UI_ANIMATION_SLOPE,
            transition: ?*?*IUIAnimationTransition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAccelerateDecelerateTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary,
            duration: f64,
            final_value: f64,
            acceleration_ratio: f64,
            deceleration_ratio: f64,
            transition: ?*?*IUIAnimationTransition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateReversalTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary,
            duration: f64,
            transition: ?*?*IUIAnimationTransition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCubicTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary,
            duration: f64,
            final_value: f64,
            final_velocity: f64,
            transition: ?*?*IUIAnimationTransition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSmoothStopTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary,
            maximum_duration: f64,
            final_value: f64,
            transition: ?*?*IUIAnimationTransition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateParabolicTransitionFromAcceleration: *const fn (
            self: *const IUIAnimationTransitionLibrary,
            final_value: f64,
            final_velocity: f64,
            acceleration: f64,
            transition: ?*?*IUIAnimationTransition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createInstantaneousTransition(self: *const T, final_value_: f64, transition_: ?*?*IUIAnimationTransition) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary.VTable, @ptrCast(self.vtable)).CreateInstantaneousTransition(@as(*const IUIAnimationTransitionLibrary, @ptrCast(self)), final_value_, transition_);
            }
            pub inline fn createConstantTransition(self: *const T, duration_: f64, transition_: ?*?*IUIAnimationTransition) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary.VTable, @ptrCast(self.vtable)).CreateConstantTransition(@as(*const IUIAnimationTransitionLibrary, @ptrCast(self)), duration_, transition_);
            }
            pub inline fn createDiscreteTransition(self: *const T, delay_: f64, final_value_: f64, hold_: f64, transition_: ?*?*IUIAnimationTransition) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary.VTable, @ptrCast(self.vtable)).CreateDiscreteTransition(@as(*const IUIAnimationTransitionLibrary, @ptrCast(self)), delay_, final_value_, hold_, transition_);
            }
            pub inline fn createLinearTransition(self: *const T, duration_: f64, final_value_: f64, transition_: ?*?*IUIAnimationTransition) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary.VTable, @ptrCast(self.vtable)).CreateLinearTransition(@as(*const IUIAnimationTransitionLibrary, @ptrCast(self)), duration_, final_value_, transition_);
            }
            pub inline fn createLinearTransitionFromSpeed(self: *const T, speed_: f64, final_value_: f64, transition_: ?*?*IUIAnimationTransition) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary.VTable, @ptrCast(self.vtable)).CreateLinearTransitionFromSpeed(@as(*const IUIAnimationTransitionLibrary, @ptrCast(self)), speed_, final_value_, transition_);
            }
            pub inline fn createSinusoidalTransitionFromVelocity(self: *const T, duration_: f64, period_: f64, transition_: ?*?*IUIAnimationTransition) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary.VTable, @ptrCast(self.vtable)).CreateSinusoidalTransitionFromVelocity(@as(*const IUIAnimationTransitionLibrary, @ptrCast(self)), duration_, period_, transition_);
            }
            pub inline fn createSinusoidalTransitionFromRange(self: *const T, duration_: f64, minimum_value_: f64, maximum_value_: f64, period_: f64, slope_: UI_ANIMATION_SLOPE, transition_: ?*?*IUIAnimationTransition) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary.VTable, @ptrCast(self.vtable)).CreateSinusoidalTransitionFromRange(@as(*const IUIAnimationTransitionLibrary, @ptrCast(self)), duration_, minimum_value_, maximum_value_, period_, slope_, transition_);
            }
            pub inline fn createAccelerateDecelerateTransition(self: *const T, duration_: f64, final_value_: f64, acceleration_ratio_: f64, deceleration_ratio_: f64, transition_: ?*?*IUIAnimationTransition) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary.VTable, @ptrCast(self.vtable)).CreateAccelerateDecelerateTransition(@as(*const IUIAnimationTransitionLibrary, @ptrCast(self)), duration_, final_value_, acceleration_ratio_, deceleration_ratio_, transition_);
            }
            pub inline fn createReversalTransition(self: *const T, duration_: f64, transition_: ?*?*IUIAnimationTransition) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary.VTable, @ptrCast(self.vtable)).CreateReversalTransition(@as(*const IUIAnimationTransitionLibrary, @ptrCast(self)), duration_, transition_);
            }
            pub inline fn createCubicTransition(self: *const T, duration_: f64, final_value_: f64, final_velocity_: f64, transition_: ?*?*IUIAnimationTransition) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary.VTable, @ptrCast(self.vtable)).CreateCubicTransition(@as(*const IUIAnimationTransitionLibrary, @ptrCast(self)), duration_, final_value_, final_velocity_, transition_);
            }
            pub inline fn createSmoothStopTransition(self: *const T, maximum_duration_: f64, final_value_: f64, transition_: ?*?*IUIAnimationTransition) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary.VTable, @ptrCast(self.vtable)).CreateSmoothStopTransition(@as(*const IUIAnimationTransitionLibrary, @ptrCast(self)), maximum_duration_, final_value_, transition_);
            }
            pub inline fn createParabolicTransitionFromAcceleration(self: *const T, final_value_: f64, final_velocity_: f64, acceleration_: f64, transition_: ?*?*IUIAnimationTransition) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary.VTable, @ptrCast(self.vtable)).CreateParabolicTransitionFromAcceleration(@as(*const IUIAnimationTransitionLibrary, @ptrCast(self)), final_value_, final_velocity_, acceleration_, transition_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const UI_ANIMATION_DEPENDENCIES = enum(u32) {
    NONE = 0,
    INTERMEDIATE_VALUES = 1,
    FINAL_VALUE = 2,
    FINAL_VELOCITY = 4,
    DURATION = 8,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        INTERMEDIATE_VALUES: u1 = 0,
        FINAL_VALUE: u1 = 0,
        FINAL_VELOCITY: u1 = 0,
        DURATION: u1 = 0,
    }) UI_ANIMATION_DEPENDENCIES {
        return @as(UI_ANIMATION_DEPENDENCIES, @enumFromInt((if (o.NONE == 1) @intFromEnum(UI_ANIMATION_DEPENDENCIES.NONE) else 0) | (if (o.INTERMEDIATE_VALUES == 1) @intFromEnum(UI_ANIMATION_DEPENDENCIES.INTERMEDIATE_VALUES) else 0) | (if (o.FINAL_VALUE == 1) @intFromEnum(UI_ANIMATION_DEPENDENCIES.FINAL_VALUE) else 0) | (if (o.FINAL_VELOCITY == 1) @intFromEnum(UI_ANIMATION_DEPENDENCIES.FINAL_VELOCITY) else 0) | (if (o.DURATION == 1) @intFromEnum(UI_ANIMATION_DEPENDENCIES.DURATION) else 0)));
    }
};
pub const UI_ANIMATION_DEPENDENCY_NONE = UI_ANIMATION_DEPENDENCIES.NONE;
pub const UI_ANIMATION_DEPENDENCY_INTERMEDIATE_VALUES = UI_ANIMATION_DEPENDENCIES.INTERMEDIATE_VALUES;
pub const UI_ANIMATION_DEPENDENCY_FINAL_VALUE = UI_ANIMATION_DEPENDENCIES.FINAL_VALUE;
pub const UI_ANIMATION_DEPENDENCY_FINAL_VELOCITY = UI_ANIMATION_DEPENDENCIES.FINAL_VELOCITY;
pub const UI_ANIMATION_DEPENDENCY_DURATION = UI_ANIMATION_DEPENDENCIES.DURATION;

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIAnimationInterpolator_Value = Guid.initString("7815cbba-ddf7-478c-a46c-7b6c738b7978");
pub const IID_IUIAnimationInterpolator = &IID_IUIAnimationInterpolator_Value;
pub const IUIAnimationInterpolator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetInitialValueAndVelocity: *const fn (
            self: *const IUIAnimationInterpolator,
            initial_value: f64,
            initial_velocity: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDuration: *const fn (
            self: *const IUIAnimationInterpolator,
            duration: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDuration: *const fn (
            self: *const IUIAnimationInterpolator,
            duration: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFinalValue: *const fn (
            self: *const IUIAnimationInterpolator,
            value: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InterpolateValue: *const fn (
            self: *const IUIAnimationInterpolator,
            offset: f64,
            value: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InterpolateVelocity: *const fn (
            self: *const IUIAnimationInterpolator,
            offset: f64,
            velocity: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDependencies: *const fn (
            self: *const IUIAnimationInterpolator,
            initial_value_dependencies: ?*UI_ANIMATION_DEPENDENCIES,
            initial_velocity_dependencies: ?*UI_ANIMATION_DEPENDENCIES,
            duration_dependencies: ?*UI_ANIMATION_DEPENDENCIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setInitialValueAndVelocity(self: *const T, initial_value_: f64, initial_velocity_: f64) HRESULT {
                return @as(*const IUIAnimationInterpolator.VTable, @ptrCast(self.vtable)).SetInitialValueAndVelocity(@as(*const IUIAnimationInterpolator, @ptrCast(self)), initial_value_, initial_velocity_);
            }
            pub inline fn setDuration(self: *const T, duration_: f64) HRESULT {
                return @as(*const IUIAnimationInterpolator.VTable, @ptrCast(self.vtable)).SetDuration(@as(*const IUIAnimationInterpolator, @ptrCast(self)), duration_);
            }
            pub inline fn getDuration(self: *const T, duration_: ?*f64) HRESULT {
                return @as(*const IUIAnimationInterpolator.VTable, @ptrCast(self.vtable)).GetDuration(@as(*const IUIAnimationInterpolator, @ptrCast(self)), duration_);
            }
            pub inline fn getFinalValue(self: *const T, value_: ?*f64) HRESULT {
                return @as(*const IUIAnimationInterpolator.VTable, @ptrCast(self.vtable)).GetFinalValue(@as(*const IUIAnimationInterpolator, @ptrCast(self)), value_);
            }
            pub inline fn interpolateValue(self: *const T, offset_: f64, value_: ?*f64) HRESULT {
                return @as(*const IUIAnimationInterpolator.VTable, @ptrCast(self.vtable)).InterpolateValue(@as(*const IUIAnimationInterpolator, @ptrCast(self)), offset_, value_);
            }
            pub inline fn interpolateVelocity(self: *const T, offset_: f64, velocity_: ?*f64) HRESULT {
                return @as(*const IUIAnimationInterpolator.VTable, @ptrCast(self.vtable)).InterpolateVelocity(@as(*const IUIAnimationInterpolator, @ptrCast(self)), offset_, velocity_);
            }
            pub inline fn getDependencies(self: *const T, initial_value_dependencies_: ?*UI_ANIMATION_DEPENDENCIES, initial_velocity_dependencies_: ?*UI_ANIMATION_DEPENDENCIES, duration_dependencies_: ?*UI_ANIMATION_DEPENDENCIES) HRESULT {
                return @as(*const IUIAnimationInterpolator.VTable, @ptrCast(self.vtable)).GetDependencies(@as(*const IUIAnimationInterpolator, @ptrCast(self)), initial_value_dependencies_, initial_velocity_dependencies_, duration_dependencies_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIAnimationTransitionFactory_Value = Guid.initString("fcd91e03-3e3b-45ad-bbb1-6dfc8153743d");
pub const IID_IUIAnimationTransitionFactory = &IID_IUIAnimationTransitionFactory_Value;
pub const IUIAnimationTransitionFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateTransition: *const fn (
            self: *const IUIAnimationTransitionFactory,
            interpolator: ?*IUIAnimationInterpolator,
            transition: ?*?*IUIAnimationTransition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createTransition(self: *const T, interpolator_: ?*IUIAnimationInterpolator, transition_: ?*?*IUIAnimationTransition) HRESULT {
                return @as(*const IUIAnimationTransitionFactory.VTable, @ptrCast(self.vtable)).CreateTransition(@as(*const IUIAnimationTransitionFactory, @ptrCast(self)), interpolator_, transition_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const UI_ANIMATION_IDLE_BEHAVIOR = enum(i32) {
    CONTINUE = 0,
    DISABLE = 1,
};
pub const UI_ANIMATION_IDLE_BEHAVIOR_CONTINUE = UI_ANIMATION_IDLE_BEHAVIOR.CONTINUE;
pub const UI_ANIMATION_IDLE_BEHAVIOR_DISABLE = UI_ANIMATION_IDLE_BEHAVIOR.DISABLE;

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIAnimationTimer_Value = Guid.initString("6b0efad1-a053-41d6-9085-33a689144665");
pub const IID_IUIAnimationTimer = &IID_IUIAnimationTimer_Value;
pub const IUIAnimationTimer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetTimerUpdateHandler: *const fn (
            self: *const IUIAnimationTimer,
            update_handler: ?*IUIAnimationTimerUpdateHandler,
            idle_behavior: UI_ANIMATION_IDLE_BEHAVIOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTimerEventHandler: *const fn (
            self: *const IUIAnimationTimer,
            handler: ?*IUIAnimationTimerEventHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: *const fn (
            self: *const IUIAnimationTimer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disable: *const fn (
            self: *const IUIAnimationTimer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEnabled: *const fn (
            self: *const IUIAnimationTimer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTime: *const fn (
            self: *const IUIAnimationTimer,
            seconds: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFrameRateThreshold: *const fn (
            self: *const IUIAnimationTimer,
            frames_per_second: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setTimerUpdateHandler(self: *const T, update_handler_: ?*IUIAnimationTimerUpdateHandler, idle_behavior_: UI_ANIMATION_IDLE_BEHAVIOR) HRESULT {
                return @as(*const IUIAnimationTimer.VTable, @ptrCast(self.vtable)).SetTimerUpdateHandler(@as(*const IUIAnimationTimer, @ptrCast(self)), update_handler_, idle_behavior_);
            }
            pub inline fn setTimerEventHandler(self: *const T, handler_: ?*IUIAnimationTimerEventHandler) HRESULT {
                return @as(*const IUIAnimationTimer.VTable, @ptrCast(self.vtable)).SetTimerEventHandler(@as(*const IUIAnimationTimer, @ptrCast(self)), handler_);
            }
            pub inline fn enable(self: *const T) HRESULT {
                return @as(*const IUIAnimationTimer.VTable, @ptrCast(self.vtable)).Enable(@as(*const IUIAnimationTimer, @ptrCast(self)));
            }
            pub inline fn disable(self: *const T) HRESULT {
                return @as(*const IUIAnimationTimer.VTable, @ptrCast(self.vtable)).Disable(@as(*const IUIAnimationTimer, @ptrCast(self)));
            }
            pub inline fn isEnabled(self: *const T) HRESULT {
                return @as(*const IUIAnimationTimer.VTable, @ptrCast(self.vtable)).IsEnabled(@as(*const IUIAnimationTimer, @ptrCast(self)));
            }
            pub inline fn getTime(self: *const T, seconds_: ?*f64) HRESULT {
                return @as(*const IUIAnimationTimer.VTable, @ptrCast(self.vtable)).GetTime(@as(*const IUIAnimationTimer, @ptrCast(self)), seconds_);
            }
            pub inline fn setFrameRateThreshold(self: *const T, frames_per_second_: u32) HRESULT {
                return @as(*const IUIAnimationTimer.VTable, @ptrCast(self.vtable)).SetFrameRateThreshold(@as(*const IUIAnimationTimer, @ptrCast(self)), frames_per_second_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIAnimationTimerUpdateHandler_Value = Guid.initString("195509b7-5d5e-4e3e-b278-ee3759b367ad");
pub const IID_IUIAnimationTimerUpdateHandler = &IID_IUIAnimationTimerUpdateHandler_Value;
pub const IUIAnimationTimerUpdateHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnUpdate: *const fn (
            self: *const IUIAnimationTimerUpdateHandler,
            time_now: f64,
            result: ?*UI_ANIMATION_UPDATE_RESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTimerClientEventHandler: *const fn (
            self: *const IUIAnimationTimerUpdateHandler,
            handler: ?*IUIAnimationTimerClientEventHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearTimerClientEventHandler: *const fn (
            self: *const IUIAnimationTimerUpdateHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onUpdate(self: *const T, time_now_: f64, result_: ?*UI_ANIMATION_UPDATE_RESULT) HRESULT {
                return @as(*const IUIAnimationTimerUpdateHandler.VTable, @ptrCast(self.vtable)).OnUpdate(@as(*const IUIAnimationTimerUpdateHandler, @ptrCast(self)), time_now_, result_);
            }
            pub inline fn setTimerClientEventHandler(self: *const T, handler_: ?*IUIAnimationTimerClientEventHandler) HRESULT {
                return @as(*const IUIAnimationTimerUpdateHandler.VTable, @ptrCast(self.vtable)).SetTimerClientEventHandler(@as(*const IUIAnimationTimerUpdateHandler, @ptrCast(self)), handler_);
            }
            pub inline fn clearTimerClientEventHandler(self: *const T) HRESULT {
                return @as(*const IUIAnimationTimerUpdateHandler.VTable, @ptrCast(self.vtable)).ClearTimerClientEventHandler(@as(*const IUIAnimationTimerUpdateHandler, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const UI_ANIMATION_TIMER_CLIENT_STATUS = enum(i32) {
    IDLE = 0,
    BUSY = 1,
};
pub const UI_ANIMATION_TIMER_CLIENT_IDLE = UI_ANIMATION_TIMER_CLIENT_STATUS.IDLE;
pub const UI_ANIMATION_TIMER_CLIENT_BUSY = UI_ANIMATION_TIMER_CLIENT_STATUS.BUSY;

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIAnimationTimerClientEventHandler_Value = Guid.initString("bedb4db6-94fa-4bfb-a47f-ef2d9e408c25");
pub const IID_IUIAnimationTimerClientEventHandler = &IID_IUIAnimationTimerClientEventHandler_Value;
pub const IUIAnimationTimerClientEventHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnTimerClientStatusChanged: *const fn (
            self: *const IUIAnimationTimerClientEventHandler,
            new_status: UI_ANIMATION_TIMER_CLIENT_STATUS,
            previous_status: UI_ANIMATION_TIMER_CLIENT_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onTimerClientStatusChanged(self: *const T, new_status_: UI_ANIMATION_TIMER_CLIENT_STATUS, previous_status_: UI_ANIMATION_TIMER_CLIENT_STATUS) HRESULT {
                return @as(*const IUIAnimationTimerClientEventHandler.VTable, @ptrCast(self.vtable)).OnTimerClientStatusChanged(@as(*const IUIAnimationTimerClientEventHandler, @ptrCast(self)), new_status_, previous_status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IUIAnimationTimerEventHandler_Value = Guid.initString("274a7dea-d771-4095-abbd-8df7abd23ce3");
pub const IID_IUIAnimationTimerEventHandler = &IID_IUIAnimationTimerEventHandler_Value;
pub const IUIAnimationTimerEventHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnPreUpdate: *const fn (
            self: *const IUIAnimationTimerEventHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnPostUpdate: *const fn (
            self: *const IUIAnimationTimerEventHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnRenderingTooSlow: *const fn (
            self: *const IUIAnimationTimerEventHandler,
            frames_per_second: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onPreUpdate(self: *const T) HRESULT {
                return @as(*const IUIAnimationTimerEventHandler.VTable, @ptrCast(self.vtable)).OnPreUpdate(@as(*const IUIAnimationTimerEventHandler, @ptrCast(self)));
            }
            pub inline fn onPostUpdate(self: *const T) HRESULT {
                return @as(*const IUIAnimationTimerEventHandler.VTable, @ptrCast(self.vtable)).OnPostUpdate(@as(*const IUIAnimationTimerEventHandler, @ptrCast(self)));
            }
            pub inline fn onRenderingTooSlow(self: *const T, frames_per_second_: u32) HRESULT {
                return @as(*const IUIAnimationTimerEventHandler.VTable, @ptrCast(self.vtable)).OnRenderingTooSlow(@as(*const IUIAnimationTimerEventHandler, @ptrCast(self)), frames_per_second_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IUIAnimationManager2_Value = Guid.initString("d8b6f7d4-4109-4d3f-acee-879926968cb1");
pub const IID_IUIAnimationManager2 = &IID_IUIAnimationManager2_Value;
pub const IUIAnimationManager2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateAnimationVectorVariable: *const fn (
            self: *const IUIAnimationManager2,
            initial_value: [*]const f64,
            c_dimension: u32,
            variable: ?*?*IUIAnimationVariable2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAnimationVariable: *const fn (
            self: *const IUIAnimationManager2,
            initial_value: f64,
            variable: ?*?*IUIAnimationVariable2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScheduleTransition: *const fn (
            self: *const IUIAnimationManager2,
            variable: ?*IUIAnimationVariable2,
            transition: ?*IUIAnimationTransition2,
            time_now: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStoryboard: *const fn (
            self: *const IUIAnimationManager2,
            storyboard: ?*?*IUIAnimationStoryboard2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FinishAllStoryboards: *const fn (
            self: *const IUIAnimationManager2,
            completion_deadline: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AbandonAllStoryboards: *const fn (
            self: *const IUIAnimationManager2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: *const fn (
            self: *const IUIAnimationManager2,
            time_now: f64,
            update_result: ?*UI_ANIMATION_UPDATE_RESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVariableFromTag: *const fn (
            self: *const IUIAnimationManager2,
            object: ?*IUnknown,
            id: u32,
            variable: ?*?*IUIAnimationVariable2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStoryboardFromTag: *const fn (
            self: *const IUIAnimationManager2,
            object: ?*IUnknown,
            id: u32,
            storyboard: ?*?*IUIAnimationStoryboard2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EstimateNextEventTime: *const fn (
            self: *const IUIAnimationManager2,
            seconds: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn (
            self: *const IUIAnimationManager2,
            status: ?*UI_ANIMATION_MANAGER_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAnimationMode: *const fn (
            self: *const IUIAnimationManager2,
            mode: UI_ANIMATION_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pause: *const fn (
            self: *const IUIAnimationManager2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: *const fn (
            self: *const IUIAnimationManager2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetManagerEventHandler: *const fn (
            self: *const IUIAnimationManager2,
            handler: ?*IUIAnimationManagerEventHandler2,
            f_register_for_next_animation_event: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCancelPriorityComparison: *const fn (
            self: *const IUIAnimationManager2,
            comparison: ?*IUIAnimationPriorityComparison2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTrimPriorityComparison: *const fn (
            self: *const IUIAnimationManager2,
            comparison: ?*IUIAnimationPriorityComparison2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompressPriorityComparison: *const fn (
            self: *const IUIAnimationManager2,
            comparison: ?*IUIAnimationPriorityComparison2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetConcludePriorityComparison: *const fn (
            self: *const IUIAnimationManager2,
            comparison: ?*IUIAnimationPriorityComparison2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultLongestAcceptableDelay: *const fn (
            self: *const IUIAnimationManager2,
            delay: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Shutdown: *const fn (
            self: *const IUIAnimationManager2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createAnimationVectorVariable(self: *const T, initial_value_: [*]const f64, c_dimension_: u32, variable_: ?*?*IUIAnimationVariable2) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).CreateAnimationVectorVariable(@as(*const IUIAnimationManager2, @ptrCast(self)), initial_value_, c_dimension_, variable_);
            }
            pub inline fn createAnimationVariable(self: *const T, initial_value_: f64, variable_: ?*?*IUIAnimationVariable2) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).CreateAnimationVariable(@as(*const IUIAnimationManager2, @ptrCast(self)), initial_value_, variable_);
            }
            pub inline fn scheduleTransition(self: *const T, variable_: ?*IUIAnimationVariable2, transition_: ?*IUIAnimationTransition2, time_now_: f64) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).ScheduleTransition(@as(*const IUIAnimationManager2, @ptrCast(self)), variable_, transition_, time_now_);
            }
            pub inline fn createStoryboard(self: *const T, storyboard_: ?*?*IUIAnimationStoryboard2) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).CreateStoryboard(@as(*const IUIAnimationManager2, @ptrCast(self)), storyboard_);
            }
            pub inline fn finishAllStoryboards(self: *const T, completion_deadline_: f64) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).FinishAllStoryboards(@as(*const IUIAnimationManager2, @ptrCast(self)), completion_deadline_);
            }
            pub inline fn abandonAllStoryboards(self: *const T) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).AbandonAllStoryboards(@as(*const IUIAnimationManager2, @ptrCast(self)));
            }
            pub inline fn update(self: *const T, time_now_: f64, update_result_: ?*UI_ANIMATION_UPDATE_RESULT) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).Update(@as(*const IUIAnimationManager2, @ptrCast(self)), time_now_, update_result_);
            }
            pub inline fn getVariableFromTag(self: *const T, object_: ?*IUnknown, id_: u32, variable_: ?*?*IUIAnimationVariable2) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).GetVariableFromTag(@as(*const IUIAnimationManager2, @ptrCast(self)), object_, id_, variable_);
            }
            pub inline fn getStoryboardFromTag(self: *const T, object_: ?*IUnknown, id_: u32, storyboard_: ?*?*IUIAnimationStoryboard2) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).GetStoryboardFromTag(@as(*const IUIAnimationManager2, @ptrCast(self)), object_, id_, storyboard_);
            }
            pub inline fn estimateNextEventTime(self: *const T, seconds_: ?*f64) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).EstimateNextEventTime(@as(*const IUIAnimationManager2, @ptrCast(self)), seconds_);
            }
            pub inline fn getStatus(self: *const T, status_: ?*UI_ANIMATION_MANAGER_STATUS) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IUIAnimationManager2, @ptrCast(self)), status_);
            }
            pub inline fn setAnimationMode(self: *const T, mode_: UI_ANIMATION_MODE) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).SetAnimationMode(@as(*const IUIAnimationManager2, @ptrCast(self)), mode_);
            }
            pub inline fn pause(self: *const T) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).Pause(@as(*const IUIAnimationManager2, @ptrCast(self)));
            }
            pub inline fn @"resume"(self: *const T) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).Resume(@as(*const IUIAnimationManager2, @ptrCast(self)));
            }
            pub inline fn setManagerEventHandler(self: *const T, handler_: ?*IUIAnimationManagerEventHandler2, f_register_for_next_animation_event_: BOOL) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).SetManagerEventHandler(@as(*const IUIAnimationManager2, @ptrCast(self)), handler_, f_register_for_next_animation_event_);
            }
            pub inline fn setCancelPriorityComparison(self: *const T, comparison_: ?*IUIAnimationPriorityComparison2) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).SetCancelPriorityComparison(@as(*const IUIAnimationManager2, @ptrCast(self)), comparison_);
            }
            pub inline fn setTrimPriorityComparison(self: *const T, comparison_: ?*IUIAnimationPriorityComparison2) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).SetTrimPriorityComparison(@as(*const IUIAnimationManager2, @ptrCast(self)), comparison_);
            }
            pub inline fn setCompressPriorityComparison(self: *const T, comparison_: ?*IUIAnimationPriorityComparison2) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).SetCompressPriorityComparison(@as(*const IUIAnimationManager2, @ptrCast(self)), comparison_);
            }
            pub inline fn setConcludePriorityComparison(self: *const T, comparison_: ?*IUIAnimationPriorityComparison2) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).SetConcludePriorityComparison(@as(*const IUIAnimationManager2, @ptrCast(self)), comparison_);
            }
            pub inline fn setDefaultLongestAcceptableDelay(self: *const T, delay_: f64) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).SetDefaultLongestAcceptableDelay(@as(*const IUIAnimationManager2, @ptrCast(self)), delay_);
            }
            pub inline fn shutdown(self: *const T) HRESULT {
                return @as(*const IUIAnimationManager2.VTable, @ptrCast(self.vtable)).Shutdown(@as(*const IUIAnimationManager2, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IUIAnimationVariable2_Value = Guid.initString("4914b304-96ab-44d9-9e77-d5109b7e7466");
pub const IID_IUIAnimationVariable2 = &IID_IUIAnimationVariable2_Value;
pub const IUIAnimationVariable2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDimension: *const fn (
            self: *const IUIAnimationVariable2,
            dimension: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn (
            self: *const IUIAnimationVariable2,
            value: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVectorValue: *const fn (
            self: *const IUIAnimationVariable2,
            value: [*]f64,
            c_dimension: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurve: *const fn (
            self: *const IUIAnimationVariable2,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVectorCurve: *const fn (
            self: *const IUIAnimationVariable2,
            animation: [*]?*IDCompositionAnimation,
            c_dimension: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFinalValue: *const fn (
            self: *const IUIAnimationVariable2,
            final_value: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFinalVectorValue: *const fn (
            self: *const IUIAnimationVariable2,
            final_value: [*]f64,
            c_dimension: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreviousValue: *const fn (
            self: *const IUIAnimationVariable2,
            previous_value: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreviousVectorValue: *const fn (
            self: *const IUIAnimationVariable2,
            previous_value: [*]f64,
            c_dimension: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIntegerValue: *const fn (
            self: *const IUIAnimationVariable2,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIntegerVectorValue: *const fn (
            self: *const IUIAnimationVariable2,
            value: [*]i32,
            c_dimension: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFinalIntegerValue: *const fn (
            self: *const IUIAnimationVariable2,
            final_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFinalIntegerVectorValue: *const fn (
            self: *const IUIAnimationVariable2,
            final_value: [*]i32,
            c_dimension: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreviousIntegerValue: *const fn (
            self: *const IUIAnimationVariable2,
            previous_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreviousIntegerVectorValue: *const fn (
            self: *const IUIAnimationVariable2,
            previous_value: [*]i32,
            c_dimension: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentStoryboard: *const fn (
            self: *const IUIAnimationVariable2,
            storyboard: ?*?*IUIAnimationStoryboard2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLowerBound: *const fn (
            self: *const IUIAnimationVariable2,
            bound: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLowerBoundVector: *const fn (
            self: *const IUIAnimationVariable2,
            bound: [*]const f64,
            c_dimension: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUpperBound: *const fn (
            self: *const IUIAnimationVariable2,
            bound: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUpperBoundVector: *const fn (
            self: *const IUIAnimationVariable2,
            bound: [*]const f64,
            c_dimension: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRoundingMode: *const fn (
            self: *const IUIAnimationVariable2,
            mode: UI_ANIMATION_ROUNDING_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTag: *const fn (
            self: *const IUIAnimationVariable2,
            object: ?*IUnknown,
            id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTag: *const fn (
            self: *const IUIAnimationVariable2,
            object: ?*?*IUnknown,
            id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVariableChangeHandler: *const fn (
            self: *const IUIAnimationVariable2,
            handler: ?*IUIAnimationVariableChangeHandler2,
            f_register_for_next_animation_event: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVariableIntegerChangeHandler: *const fn (
            self: *const IUIAnimationVariable2,
            handler: ?*IUIAnimationVariableIntegerChangeHandler2,
            f_register_for_next_animation_event: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVariableCurveChangeHandler: *const fn (
            self: *const IUIAnimationVariable2,
            handler: ?*IUIAnimationVariableCurveChangeHandler2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDimension(self: *const T, dimension_: ?*u32) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).GetDimension(@as(*const IUIAnimationVariable2, @ptrCast(self)), dimension_);
            }
            pub inline fn getValue(self: *const T, value_: ?*f64) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).GetValue(@as(*const IUIAnimationVariable2, @ptrCast(self)), value_);
            }
            pub inline fn getVectorValue(self: *const T, value_: [*]f64, c_dimension_: u32) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).GetVectorValue(@as(*const IUIAnimationVariable2, @ptrCast(self)), value_, c_dimension_);
            }
            pub inline fn getCurve(self: *const T, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).GetCurve(@as(*const IUIAnimationVariable2, @ptrCast(self)), animation_);
            }
            pub inline fn getVectorCurve(self: *const T, animation_: [*]?*IDCompositionAnimation, c_dimension_: u32) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).GetVectorCurve(@as(*const IUIAnimationVariable2, @ptrCast(self)), animation_, c_dimension_);
            }
            pub inline fn getFinalValue(self: *const T, final_value_: ?*f64) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).GetFinalValue(@as(*const IUIAnimationVariable2, @ptrCast(self)), final_value_);
            }
            pub inline fn getFinalVectorValue(self: *const T, final_value_: [*]f64, c_dimension_: u32) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).GetFinalVectorValue(@as(*const IUIAnimationVariable2, @ptrCast(self)), final_value_, c_dimension_);
            }
            pub inline fn getPreviousValue(self: *const T, previous_value_: ?*f64) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).GetPreviousValue(@as(*const IUIAnimationVariable2, @ptrCast(self)), previous_value_);
            }
            pub inline fn getPreviousVectorValue(self: *const T, previous_value_: [*]f64, c_dimension_: u32) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).GetPreviousVectorValue(@as(*const IUIAnimationVariable2, @ptrCast(self)), previous_value_, c_dimension_);
            }
            pub inline fn getIntegerValue(self: *const T, value_: ?*i32) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).GetIntegerValue(@as(*const IUIAnimationVariable2, @ptrCast(self)), value_);
            }
            pub inline fn getIntegerVectorValue(self: *const T, value_: [*]i32, c_dimension_: u32) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).GetIntegerVectorValue(@as(*const IUIAnimationVariable2, @ptrCast(self)), value_, c_dimension_);
            }
            pub inline fn getFinalIntegerValue(self: *const T, final_value_: ?*i32) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).GetFinalIntegerValue(@as(*const IUIAnimationVariable2, @ptrCast(self)), final_value_);
            }
            pub inline fn getFinalIntegerVectorValue(self: *const T, final_value_: [*]i32, c_dimension_: u32) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).GetFinalIntegerVectorValue(@as(*const IUIAnimationVariable2, @ptrCast(self)), final_value_, c_dimension_);
            }
            pub inline fn getPreviousIntegerValue(self: *const T, previous_value_: ?*i32) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).GetPreviousIntegerValue(@as(*const IUIAnimationVariable2, @ptrCast(self)), previous_value_);
            }
            pub inline fn getPreviousIntegerVectorValue(self: *const T, previous_value_: [*]i32, c_dimension_: u32) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).GetPreviousIntegerVectorValue(@as(*const IUIAnimationVariable2, @ptrCast(self)), previous_value_, c_dimension_);
            }
            pub inline fn getCurrentStoryboard(self: *const T, storyboard_: ?*?*IUIAnimationStoryboard2) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).GetCurrentStoryboard(@as(*const IUIAnimationVariable2, @ptrCast(self)), storyboard_);
            }
            pub inline fn setLowerBound(self: *const T, bound_: f64) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).SetLowerBound(@as(*const IUIAnimationVariable2, @ptrCast(self)), bound_);
            }
            pub inline fn setLowerBoundVector(self: *const T, bound_: [*]const f64, c_dimension_: u32) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).SetLowerBoundVector(@as(*const IUIAnimationVariable2, @ptrCast(self)), bound_, c_dimension_);
            }
            pub inline fn setUpperBound(self: *const T, bound_: f64) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).SetUpperBound(@as(*const IUIAnimationVariable2, @ptrCast(self)), bound_);
            }
            pub inline fn setUpperBoundVector(self: *const T, bound_: [*]const f64, c_dimension_: u32) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).SetUpperBoundVector(@as(*const IUIAnimationVariable2, @ptrCast(self)), bound_, c_dimension_);
            }
            pub inline fn setRoundingMode(self: *const T, mode_: UI_ANIMATION_ROUNDING_MODE) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).SetRoundingMode(@as(*const IUIAnimationVariable2, @ptrCast(self)), mode_);
            }
            pub inline fn setTag(self: *const T, object_: ?*IUnknown, id_: u32) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).SetTag(@as(*const IUIAnimationVariable2, @ptrCast(self)), object_, id_);
            }
            pub inline fn getTag(self: *const T, object_: ?*?*IUnknown, id_: ?*u32) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).GetTag(@as(*const IUIAnimationVariable2, @ptrCast(self)), object_, id_);
            }
            pub inline fn setVariableChangeHandler(self: *const T, handler_: ?*IUIAnimationVariableChangeHandler2, f_register_for_next_animation_event_: BOOL) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).SetVariableChangeHandler(@as(*const IUIAnimationVariable2, @ptrCast(self)), handler_, f_register_for_next_animation_event_);
            }
            pub inline fn setVariableIntegerChangeHandler(self: *const T, handler_: ?*IUIAnimationVariableIntegerChangeHandler2, f_register_for_next_animation_event_: BOOL) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).SetVariableIntegerChangeHandler(@as(*const IUIAnimationVariable2, @ptrCast(self)), handler_, f_register_for_next_animation_event_);
            }
            pub inline fn setVariableCurveChangeHandler(self: *const T, handler_: ?*IUIAnimationVariableCurveChangeHandler2) HRESULT {
                return @as(*const IUIAnimationVariable2.VTable, @ptrCast(self.vtable)).SetVariableCurveChangeHandler(@as(*const IUIAnimationVariable2, @ptrCast(self)), handler_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IUIAnimationTransition2_Value = Guid.initString("62ff9123-a85a-4e9b-a218-435a93e268fd");
pub const IID_IUIAnimationTransition2 = &IID_IUIAnimationTransition2_Value;
pub const IUIAnimationTransition2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDimension: *const fn (
            self: *const IUIAnimationTransition2,
            dimension: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInitialValue: *const fn (
            self: *const IUIAnimationTransition2,
            value: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInitialVectorValue: *const fn (
            self: *const IUIAnimationTransition2,
            value: [*]const f64,
            c_dimension: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInitialVelocity: *const fn (
            self: *const IUIAnimationTransition2,
            velocity: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInitialVectorVelocity: *const fn (
            self: *const IUIAnimationTransition2,
            velocity: [*]const f64,
            c_dimension: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDurationKnown: *const fn (
            self: *const IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDuration: *const fn (
            self: *const IUIAnimationTransition2,
            duration: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDimension(self: *const T, dimension_: ?*u32) HRESULT {
                return @as(*const IUIAnimationTransition2.VTable, @ptrCast(self.vtable)).GetDimension(@as(*const IUIAnimationTransition2, @ptrCast(self)), dimension_);
            }
            pub inline fn setInitialValue(self: *const T, value_: f64) HRESULT {
                return @as(*const IUIAnimationTransition2.VTable, @ptrCast(self.vtable)).SetInitialValue(@as(*const IUIAnimationTransition2, @ptrCast(self)), value_);
            }
            pub inline fn setInitialVectorValue(self: *const T, value_: [*]const f64, c_dimension_: u32) HRESULT {
                return @as(*const IUIAnimationTransition2.VTable, @ptrCast(self.vtable)).SetInitialVectorValue(@as(*const IUIAnimationTransition2, @ptrCast(self)), value_, c_dimension_);
            }
            pub inline fn setInitialVelocity(self: *const T, velocity_: f64) HRESULT {
                return @as(*const IUIAnimationTransition2.VTable, @ptrCast(self.vtable)).SetInitialVelocity(@as(*const IUIAnimationTransition2, @ptrCast(self)), velocity_);
            }
            pub inline fn setInitialVectorVelocity(self: *const T, velocity_: [*]const f64, c_dimension_: u32) HRESULT {
                return @as(*const IUIAnimationTransition2.VTable, @ptrCast(self.vtable)).SetInitialVectorVelocity(@as(*const IUIAnimationTransition2, @ptrCast(self)), velocity_, c_dimension_);
            }
            pub inline fn isDurationKnown(self: *const T) HRESULT {
                return @as(*const IUIAnimationTransition2.VTable, @ptrCast(self.vtable)).IsDurationKnown(@as(*const IUIAnimationTransition2, @ptrCast(self)));
            }
            pub inline fn getDuration(self: *const T, duration_: ?*f64) HRESULT {
                return @as(*const IUIAnimationTransition2.VTable, @ptrCast(self.vtable)).GetDuration(@as(*const IUIAnimationTransition2, @ptrCast(self)), duration_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IUIAnimationManagerEventHandler2_Value = Guid.initString("f6e022ba-bff3-42ec-9033-e073f33e83c3");
pub const IID_IUIAnimationManagerEventHandler2 = &IID_IUIAnimationManagerEventHandler2_Value;
pub const IUIAnimationManagerEventHandler2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnManagerStatusChanged: *const fn (
            self: *const IUIAnimationManagerEventHandler2,
            new_status: UI_ANIMATION_MANAGER_STATUS,
            previous_status: UI_ANIMATION_MANAGER_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onManagerStatusChanged(self: *const T, new_status_: UI_ANIMATION_MANAGER_STATUS, previous_status_: UI_ANIMATION_MANAGER_STATUS) HRESULT {
                return @as(*const IUIAnimationManagerEventHandler2.VTable, @ptrCast(self.vtable)).OnManagerStatusChanged(@as(*const IUIAnimationManagerEventHandler2, @ptrCast(self)), new_status_, previous_status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IUIAnimationVariableChangeHandler2_Value = Guid.initString("63acc8d2-6eae-4bb0-b879-586dd8cfbe42");
pub const IID_IUIAnimationVariableChangeHandler2 = &IID_IUIAnimationVariableChangeHandler2_Value;
pub const IUIAnimationVariableChangeHandler2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnValueChanged: *const fn (
            self: *const IUIAnimationVariableChangeHandler2,
            storyboard: ?*IUIAnimationStoryboard2,
            variable: ?*IUIAnimationVariable2,
            new_value: [*]f64,
            previous_value: [*]f64,
            c_dimension: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onValueChanged(self: *const T, storyboard_: ?*IUIAnimationStoryboard2, variable_: ?*IUIAnimationVariable2, new_value_: [*]f64, previous_value_: [*]f64, c_dimension_: u32) HRESULT {
                return @as(*const IUIAnimationVariableChangeHandler2.VTable, @ptrCast(self.vtable)).OnValueChanged(@as(*const IUIAnimationVariableChangeHandler2, @ptrCast(self)), storyboard_, variable_, new_value_, previous_value_, c_dimension_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IUIAnimationVariableIntegerChangeHandler2_Value = Guid.initString("829b6cf1-4f3a-4412-ae09-b243eb4c6b58");
pub const IID_IUIAnimationVariableIntegerChangeHandler2 = &IID_IUIAnimationVariableIntegerChangeHandler2_Value;
pub const IUIAnimationVariableIntegerChangeHandler2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnIntegerValueChanged: *const fn (
            self: *const IUIAnimationVariableIntegerChangeHandler2,
            storyboard: ?*IUIAnimationStoryboard2,
            variable: ?*IUIAnimationVariable2,
            new_value: [*]i32,
            previous_value: [*]i32,
            c_dimension: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onIntegerValueChanged(self: *const T, storyboard_: ?*IUIAnimationStoryboard2, variable_: ?*IUIAnimationVariable2, new_value_: [*]i32, previous_value_: [*]i32, c_dimension_: u32) HRESULT {
                return @as(*const IUIAnimationVariableIntegerChangeHandler2.VTable, @ptrCast(self.vtable)).OnIntegerValueChanged(@as(*const IUIAnimationVariableIntegerChangeHandler2, @ptrCast(self)), storyboard_, variable_, new_value_, previous_value_, c_dimension_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IUIAnimationVariableCurveChangeHandler2_Value = Guid.initString("72895e91-0145-4c21-9192-5aab40eddf80");
pub const IID_IUIAnimationVariableCurveChangeHandler2 = &IID_IUIAnimationVariableCurveChangeHandler2_Value;
pub const IUIAnimationVariableCurveChangeHandler2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnCurveChanged: *const fn (
            self: *const IUIAnimationVariableCurveChangeHandler2,
            variable: ?*IUIAnimationVariable2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onCurveChanged(self: *const T, variable_: ?*IUIAnimationVariable2) HRESULT {
                return @as(*const IUIAnimationVariableCurveChangeHandler2.VTable, @ptrCast(self.vtable)).OnCurveChanged(@as(*const IUIAnimationVariableCurveChangeHandler2, @ptrCast(self)), variable_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IUIAnimationStoryboardEventHandler2_Value = Guid.initString("bac5f55a-ba7c-414c-b599-fbf850f553c6");
pub const IID_IUIAnimationStoryboardEventHandler2 = &IID_IUIAnimationStoryboardEventHandler2_Value;
pub const IUIAnimationStoryboardEventHandler2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnStoryboardStatusChanged: *const fn (
            self: *const IUIAnimationStoryboardEventHandler2,
            storyboard: ?*IUIAnimationStoryboard2,
            new_status: UI_ANIMATION_STORYBOARD_STATUS,
            previous_status: UI_ANIMATION_STORYBOARD_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnStoryboardUpdated: *const fn (
            self: *const IUIAnimationStoryboardEventHandler2,
            storyboard: ?*IUIAnimationStoryboard2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onStoryboardStatusChanged(self: *const T, storyboard_: ?*IUIAnimationStoryboard2, new_status_: UI_ANIMATION_STORYBOARD_STATUS, previous_status_: UI_ANIMATION_STORYBOARD_STATUS) HRESULT {
                return @as(*const IUIAnimationStoryboardEventHandler2.VTable, @ptrCast(self.vtable)).OnStoryboardStatusChanged(@as(*const IUIAnimationStoryboardEventHandler2, @ptrCast(self)), storyboard_, new_status_, previous_status_);
            }
            pub inline fn onStoryboardUpdated(self: *const T, storyboard_: ?*IUIAnimationStoryboard2) HRESULT {
                return @as(*const IUIAnimationStoryboardEventHandler2.VTable, @ptrCast(self.vtable)).OnStoryboardUpdated(@as(*const IUIAnimationStoryboardEventHandler2, @ptrCast(self)), storyboard_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IUIAnimationLoopIterationChangeHandler2_Value = Guid.initString("2d3b15a4-4762-47ab-a030-b23221df3ae0");
pub const IID_IUIAnimationLoopIterationChangeHandler2 = &IID_IUIAnimationLoopIterationChangeHandler2_Value;
pub const IUIAnimationLoopIterationChangeHandler2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnLoopIterationChanged: *const fn (
            self: *const IUIAnimationLoopIterationChangeHandler2,
            storyboard: ?*IUIAnimationStoryboard2,
            id: usize,
            new_iteration_count: u32,
            old_iteration_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onLoopIterationChanged(self: *const T, storyboard_: ?*IUIAnimationStoryboard2, id_: usize, new_iteration_count_: u32, old_iteration_count_: u32) HRESULT {
                return @as(*const IUIAnimationLoopIterationChangeHandler2.VTable, @ptrCast(self.vtable)).OnLoopIterationChanged(@as(*const IUIAnimationLoopIterationChangeHandler2, @ptrCast(self)), storyboard_, id_, new_iteration_count_, old_iteration_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IUIAnimationPriorityComparison2_Value = Guid.initString("5b6d7a37-4621-467c-8b05-70131de62ddb");
pub const IID_IUIAnimationPriorityComparison2 = &IID_IUIAnimationPriorityComparison2_Value;
pub const IUIAnimationPriorityComparison2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        HasPriority: *const fn (
            self: *const IUIAnimationPriorityComparison2,
            scheduled_storyboard: ?*IUIAnimationStoryboard2,
            new_storyboard: ?*IUIAnimationStoryboard2,
            priority_effect: UI_ANIMATION_PRIORITY_EFFECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn hasPriority(self: *const T, scheduled_storyboard_: ?*IUIAnimationStoryboard2, new_storyboard_: ?*IUIAnimationStoryboard2, priority_effect_: UI_ANIMATION_PRIORITY_EFFECT) HRESULT {
                return @as(*const IUIAnimationPriorityComparison2.VTable, @ptrCast(self.vtable)).HasPriority(@as(*const IUIAnimationPriorityComparison2, @ptrCast(self)), scheduled_storyboard_, new_storyboard_, priority_effect_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IUIAnimationTransitionLibrary2_Value = Guid.initString("03cfae53-9580-4ee3-b363-2ece51b4af6a");
pub const IID_IUIAnimationTransitionLibrary2 = &IID_IUIAnimationTransitionLibrary2_Value;
pub const IUIAnimationTransitionLibrary2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateInstantaneousTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary2,
            final_value: f64,
            transition: ?*?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInstantaneousVectorTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary2,
            final_value: [*]const f64,
            c_dimension: u32,
            transition: ?*?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateConstantTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary2,
            duration: f64,
            transition: ?*?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDiscreteTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary2,
            delay: f64,
            final_value: f64,
            hold: f64,
            transition: ?*?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateDiscreteVectorTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary2,
            delay: f64,
            final_value: [*]const f64,
            c_dimension: u32,
            hold: f64,
            transition: ?*?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateLinearTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary2,
            duration: f64,
            final_value: f64,
            transition: ?*?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateLinearVectorTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary2,
            duration: f64,
            final_value: [*]const f64,
            c_dimension: u32,
            transition: ?*?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateLinearTransitionFromSpeed: *const fn (
            self: *const IUIAnimationTransitionLibrary2,
            speed: f64,
            final_value: f64,
            transition: ?*?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateLinearVectorTransitionFromSpeed: *const fn (
            self: *const IUIAnimationTransitionLibrary2,
            speed: f64,
            final_value: [*]const f64,
            c_dimension: u32,
            transition: ?*?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSinusoidalTransitionFromVelocity: *const fn (
            self: *const IUIAnimationTransitionLibrary2,
            duration: f64,
            period: f64,
            transition: ?*?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSinusoidalTransitionFromRange: *const fn (
            self: *const IUIAnimationTransitionLibrary2,
            duration: f64,
            minimum_value: f64,
            maximum_value: f64,
            period: f64,
            slope: UI_ANIMATION_SLOPE,
            transition: ?*?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateAccelerateDecelerateTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary2,
            duration: f64,
            final_value: f64,
            acceleration_ratio: f64,
            deceleration_ratio: f64,
            transition: ?*?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateReversalTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary2,
            duration: f64,
            transition: ?*?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCubicTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary2,
            duration: f64,
            final_value: f64,
            final_velocity: f64,
            transition: ?*?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCubicVectorTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary2,
            duration: f64,
            final_value: [*]const f64,
            final_velocity: [*]const f64,
            c_dimension: u32,
            transition: ?*?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSmoothStopTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary2,
            maximum_duration: f64,
            final_value: f64,
            transition: ?*?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateParabolicTransitionFromAcceleration: *const fn (
            self: *const IUIAnimationTransitionLibrary2,
            final_value: f64,
            final_velocity: f64,
            acceleration: f64,
            transition: ?*?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCubicBezierLinearTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary2,
            duration: f64,
            final_value: f64,
            x1: f64,
            y1: f64,
            x2: f64,
            y2: f64,
            pp_transition: ?*?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCubicBezierLinearVectorTransition: *const fn (
            self: *const IUIAnimationTransitionLibrary2,
            duration: f64,
            final_value: [*]const f64,
            c_dimension: u32,
            x1: f64,
            y1: f64,
            x2: f64,
            y2: f64,
            pp_transition: ?*?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createInstantaneousTransition(self: *const T, final_value_: f64, transition_: ?*?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary2.VTable, @ptrCast(self.vtable)).CreateInstantaneousTransition(@as(*const IUIAnimationTransitionLibrary2, @ptrCast(self)), final_value_, transition_);
            }
            pub inline fn createInstantaneousVectorTransition(self: *const T, final_value_: [*]const f64, c_dimension_: u32, transition_: ?*?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary2.VTable, @ptrCast(self.vtable)).CreateInstantaneousVectorTransition(@as(*const IUIAnimationTransitionLibrary2, @ptrCast(self)), final_value_, c_dimension_, transition_);
            }
            pub inline fn createConstantTransition(self: *const T, duration_: f64, transition_: ?*?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary2.VTable, @ptrCast(self.vtable)).CreateConstantTransition(@as(*const IUIAnimationTransitionLibrary2, @ptrCast(self)), duration_, transition_);
            }
            pub inline fn createDiscreteTransition(self: *const T, delay_: f64, final_value_: f64, hold_: f64, transition_: ?*?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary2.VTable, @ptrCast(self.vtable)).CreateDiscreteTransition(@as(*const IUIAnimationTransitionLibrary2, @ptrCast(self)), delay_, final_value_, hold_, transition_);
            }
            pub inline fn createDiscreteVectorTransition(self: *const T, delay_: f64, final_value_: [*]const f64, c_dimension_: u32, hold_: f64, transition_: ?*?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary2.VTable, @ptrCast(self.vtable)).CreateDiscreteVectorTransition(@as(*const IUIAnimationTransitionLibrary2, @ptrCast(self)), delay_, final_value_, c_dimension_, hold_, transition_);
            }
            pub inline fn createLinearTransition(self: *const T, duration_: f64, final_value_: f64, transition_: ?*?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary2.VTable, @ptrCast(self.vtable)).CreateLinearTransition(@as(*const IUIAnimationTransitionLibrary2, @ptrCast(self)), duration_, final_value_, transition_);
            }
            pub inline fn createLinearVectorTransition(self: *const T, duration_: f64, final_value_: [*]const f64, c_dimension_: u32, transition_: ?*?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary2.VTable, @ptrCast(self.vtable)).CreateLinearVectorTransition(@as(*const IUIAnimationTransitionLibrary2, @ptrCast(self)), duration_, final_value_, c_dimension_, transition_);
            }
            pub inline fn createLinearTransitionFromSpeed(self: *const T, speed_: f64, final_value_: f64, transition_: ?*?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary2.VTable, @ptrCast(self.vtable)).CreateLinearTransitionFromSpeed(@as(*const IUIAnimationTransitionLibrary2, @ptrCast(self)), speed_, final_value_, transition_);
            }
            pub inline fn createLinearVectorTransitionFromSpeed(self: *const T, speed_: f64, final_value_: [*]const f64, c_dimension_: u32, transition_: ?*?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary2.VTable, @ptrCast(self.vtable)).CreateLinearVectorTransitionFromSpeed(@as(*const IUIAnimationTransitionLibrary2, @ptrCast(self)), speed_, final_value_, c_dimension_, transition_);
            }
            pub inline fn createSinusoidalTransitionFromVelocity(self: *const T, duration_: f64, period_: f64, transition_: ?*?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary2.VTable, @ptrCast(self.vtable)).CreateSinusoidalTransitionFromVelocity(@as(*const IUIAnimationTransitionLibrary2, @ptrCast(self)), duration_, period_, transition_);
            }
            pub inline fn createSinusoidalTransitionFromRange(self: *const T, duration_: f64, minimum_value_: f64, maximum_value_: f64, period_: f64, slope_: UI_ANIMATION_SLOPE, transition_: ?*?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary2.VTable, @ptrCast(self.vtable)).CreateSinusoidalTransitionFromRange(@as(*const IUIAnimationTransitionLibrary2, @ptrCast(self)), duration_, minimum_value_, maximum_value_, period_, slope_, transition_);
            }
            pub inline fn createAccelerateDecelerateTransition(self: *const T, duration_: f64, final_value_: f64, acceleration_ratio_: f64, deceleration_ratio_: f64, transition_: ?*?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary2.VTable, @ptrCast(self.vtable)).CreateAccelerateDecelerateTransition(@as(*const IUIAnimationTransitionLibrary2, @ptrCast(self)), duration_, final_value_, acceleration_ratio_, deceleration_ratio_, transition_);
            }
            pub inline fn createReversalTransition(self: *const T, duration_: f64, transition_: ?*?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary2.VTable, @ptrCast(self.vtable)).CreateReversalTransition(@as(*const IUIAnimationTransitionLibrary2, @ptrCast(self)), duration_, transition_);
            }
            pub inline fn createCubicTransition(self: *const T, duration_: f64, final_value_: f64, final_velocity_: f64, transition_: ?*?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary2.VTable, @ptrCast(self.vtable)).CreateCubicTransition(@as(*const IUIAnimationTransitionLibrary2, @ptrCast(self)), duration_, final_value_, final_velocity_, transition_);
            }
            pub inline fn createCubicVectorTransition(self: *const T, duration_: f64, final_value_: [*]const f64, final_velocity_: [*]const f64, c_dimension_: u32, transition_: ?*?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary2.VTable, @ptrCast(self.vtable)).CreateCubicVectorTransition(@as(*const IUIAnimationTransitionLibrary2, @ptrCast(self)), duration_, final_value_, final_velocity_, c_dimension_, transition_);
            }
            pub inline fn createSmoothStopTransition(self: *const T, maximum_duration_: f64, final_value_: f64, transition_: ?*?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary2.VTable, @ptrCast(self.vtable)).CreateSmoothStopTransition(@as(*const IUIAnimationTransitionLibrary2, @ptrCast(self)), maximum_duration_, final_value_, transition_);
            }
            pub inline fn createParabolicTransitionFromAcceleration(self: *const T, final_value_: f64, final_velocity_: f64, acceleration_: f64, transition_: ?*?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary2.VTable, @ptrCast(self.vtable)).CreateParabolicTransitionFromAcceleration(@as(*const IUIAnimationTransitionLibrary2, @ptrCast(self)), final_value_, final_velocity_, acceleration_, transition_);
            }
            pub inline fn createCubicBezierLinearTransition(self: *const T, duration_: f64, final_value_: f64, x1_: f64, y1_: f64, x2_: f64, y2_: f64, pp_transition_: ?*?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary2.VTable, @ptrCast(self.vtable)).CreateCubicBezierLinearTransition(@as(*const IUIAnimationTransitionLibrary2, @ptrCast(self)), duration_, final_value_, x1_, y1_, x2_, y2_, pp_transition_);
            }
            pub inline fn createCubicBezierLinearVectorTransition(self: *const T, duration_: f64, final_value_: [*]const f64, c_dimension_: u32, x1_: f64, y1_: f64, x2_: f64, y2_: f64, pp_transition_: ?*?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationTransitionLibrary2.VTable, @ptrCast(self.vtable)).CreateCubicBezierLinearVectorTransition(@as(*const IUIAnimationTransitionLibrary2, @ptrCast(self)), duration_, final_value_, c_dimension_, x1_, y1_, x2_, y2_, pp_transition_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IUIAnimationPrimitiveInterpolation_Value = Guid.initString("bab20d63-4361-45da-a24f-ab8508846b5b");
pub const IID_IUIAnimationPrimitiveInterpolation = &IID_IUIAnimationPrimitiveInterpolation_Value;
pub const IUIAnimationPrimitiveInterpolation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddCubic: *const fn (
            self: *const IUIAnimationPrimitiveInterpolation,
            dimension: u32,
            begin_offset: f64,
            constant_coefficient: f32,
            linear_coefficient: f32,
            quadratic_coefficient: f32,
            cubic_coefficient: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddSinusoidal: *const fn (
            self: *const IUIAnimationPrimitiveInterpolation,
            dimension: u32,
            begin_offset: f64,
            bias: f32,
            amplitude: f32,
            frequency: f32,
            phase: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addCubic(self: *const T, dimension_: u32, begin_offset_: f64, constant_coefficient_: f32, linear_coefficient_: f32, quadratic_coefficient_: f32, cubic_coefficient_: f32) HRESULT {
                return @as(*const IUIAnimationPrimitiveInterpolation.VTable, @ptrCast(self.vtable)).AddCubic(@as(*const IUIAnimationPrimitiveInterpolation, @ptrCast(self)), dimension_, begin_offset_, constant_coefficient_, linear_coefficient_, quadratic_coefficient_, cubic_coefficient_);
            }
            pub inline fn addSinusoidal(self: *const T, dimension_: u32, begin_offset_: f64, bias_: f32, amplitude_: f32, frequency_: f32, phase_: f32) HRESULT {
                return @as(*const IUIAnimationPrimitiveInterpolation.VTable, @ptrCast(self.vtable)).AddSinusoidal(@as(*const IUIAnimationPrimitiveInterpolation, @ptrCast(self)), dimension_, begin_offset_, bias_, amplitude_, frequency_, phase_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IUIAnimationInterpolator2_Value = Guid.initString("ea76aff8-ea22-4a23-a0ef-a6a966703518");
pub const IID_IUIAnimationInterpolator2 = &IID_IUIAnimationInterpolator2_Value;
pub const IUIAnimationInterpolator2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDimension: *const fn (
            self: *const IUIAnimationInterpolator2,
            dimension: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInitialValueAndVelocity: *const fn (
            self: *const IUIAnimationInterpolator2,
            initial_value: [*]f64,
            initial_velocity: [*]f64,
            c_dimension: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDuration: *const fn (
            self: *const IUIAnimationInterpolator2,
            duration: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDuration: *const fn (
            self: *const IUIAnimationInterpolator2,
            duration: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFinalValue: *const fn (
            self: *const IUIAnimationInterpolator2,
            value: [*]f64,
            c_dimension: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InterpolateValue: *const fn (
            self: *const IUIAnimationInterpolator2,
            offset: f64,
            value: [*]f64,
            c_dimension: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InterpolateVelocity: *const fn (
            self: *const IUIAnimationInterpolator2,
            offset: f64,
            velocity: [*]f64,
            c_dimension: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrimitiveInterpolation: *const fn (
            self: *const IUIAnimationInterpolator2,
            interpolation: ?*IUIAnimationPrimitiveInterpolation,
            c_dimension: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDependencies: *const fn (
            self: *const IUIAnimationInterpolator2,
            initial_value_dependencies: ?*UI_ANIMATION_DEPENDENCIES,
            initial_velocity_dependencies: ?*UI_ANIMATION_DEPENDENCIES,
            duration_dependencies: ?*UI_ANIMATION_DEPENDENCIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDimension(self: *const T, dimension_: ?*u32) HRESULT {
                return @as(*const IUIAnimationInterpolator2.VTable, @ptrCast(self.vtable)).GetDimension(@as(*const IUIAnimationInterpolator2, @ptrCast(self)), dimension_);
            }
            pub inline fn setInitialValueAndVelocity(self: *const T, initial_value_: [*]f64, initial_velocity_: [*]f64, c_dimension_: u32) HRESULT {
                return @as(*const IUIAnimationInterpolator2.VTable, @ptrCast(self.vtable)).SetInitialValueAndVelocity(@as(*const IUIAnimationInterpolator2, @ptrCast(self)), initial_value_, initial_velocity_, c_dimension_);
            }
            pub inline fn setDuration(self: *const T, duration_: f64) HRESULT {
                return @as(*const IUIAnimationInterpolator2.VTable, @ptrCast(self.vtable)).SetDuration(@as(*const IUIAnimationInterpolator2, @ptrCast(self)), duration_);
            }
            pub inline fn getDuration(self: *const T, duration_: ?*f64) HRESULT {
                return @as(*const IUIAnimationInterpolator2.VTable, @ptrCast(self.vtable)).GetDuration(@as(*const IUIAnimationInterpolator2, @ptrCast(self)), duration_);
            }
            pub inline fn getFinalValue(self: *const T, value_: [*]f64, c_dimension_: u32) HRESULT {
                return @as(*const IUIAnimationInterpolator2.VTable, @ptrCast(self.vtable)).GetFinalValue(@as(*const IUIAnimationInterpolator2, @ptrCast(self)), value_, c_dimension_);
            }
            pub inline fn interpolateValue(self: *const T, offset_: f64, value_: [*]f64, c_dimension_: u32) HRESULT {
                return @as(*const IUIAnimationInterpolator2.VTable, @ptrCast(self.vtable)).InterpolateValue(@as(*const IUIAnimationInterpolator2, @ptrCast(self)), offset_, value_, c_dimension_);
            }
            pub inline fn interpolateVelocity(self: *const T, offset_: f64, velocity_: [*]f64, c_dimension_: u32) HRESULT {
                return @as(*const IUIAnimationInterpolator2.VTable, @ptrCast(self.vtable)).InterpolateVelocity(@as(*const IUIAnimationInterpolator2, @ptrCast(self)), offset_, velocity_, c_dimension_);
            }
            pub inline fn getPrimitiveInterpolation(self: *const T, interpolation_: ?*IUIAnimationPrimitiveInterpolation, c_dimension_: u32) HRESULT {
                return @as(*const IUIAnimationInterpolator2.VTable, @ptrCast(self.vtable)).GetPrimitiveInterpolation(@as(*const IUIAnimationInterpolator2, @ptrCast(self)), interpolation_, c_dimension_);
            }
            pub inline fn getDependencies(self: *const T, initial_value_dependencies_: ?*UI_ANIMATION_DEPENDENCIES, initial_velocity_dependencies_: ?*UI_ANIMATION_DEPENDENCIES, duration_dependencies_: ?*UI_ANIMATION_DEPENDENCIES) HRESULT {
                return @as(*const IUIAnimationInterpolator2.VTable, @ptrCast(self.vtable)).GetDependencies(@as(*const IUIAnimationInterpolator2, @ptrCast(self)), initial_value_dependencies_, initial_velocity_dependencies_, duration_dependencies_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IUIAnimationTransitionFactory2_Value = Guid.initString("937d4916-c1a6-42d5-88d8-30344d6efe31");
pub const IID_IUIAnimationTransitionFactory2 = &IID_IUIAnimationTransitionFactory2_Value;
pub const IUIAnimationTransitionFactory2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateTransition: *const fn (
            self: *const IUIAnimationTransitionFactory2,
            interpolator: ?*IUIAnimationInterpolator2,
            transition: ?*?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createTransition(self: *const T, interpolator_: ?*IUIAnimationInterpolator2, transition_: ?*?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationTransitionFactory2.VTable, @ptrCast(self.vtable)).CreateTransition(@as(*const IUIAnimationTransitionFactory2, @ptrCast(self)), interpolator_, transition_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IUIAnimationStoryboard2_Value = Guid.initString("ae289cd2-12d4-4945-9419-9e41be034df2");
pub const IID_IUIAnimationStoryboard2 = &IID_IUIAnimationStoryboard2_Value;
pub const IUIAnimationStoryboard2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddTransition: *const fn (
            self: *const IUIAnimationStoryboard2,
            variable: ?*IUIAnimationVariable2,
            transition: ?*IUIAnimationTransition2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddKeyframeAtOffset: *const fn (
            self: *const IUIAnimationStoryboard2,
            existing_keyframe: UI_ANIMATION_KEYFRAME,
            offset: f64,
            keyframe: ?*UI_ANIMATION_KEYFRAME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddKeyframeAfterTransition: *const fn (
            self: *const IUIAnimationStoryboard2,
            transition: ?*IUIAnimationTransition2,
            keyframe: ?*UI_ANIMATION_KEYFRAME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTransitionAtKeyframe: *const fn (
            self: *const IUIAnimationStoryboard2,
            variable: ?*IUIAnimationVariable2,
            transition: ?*IUIAnimationTransition2,
            start_keyframe: UI_ANIMATION_KEYFRAME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTransitionBetweenKeyframes: *const fn (
            self: *const IUIAnimationStoryboard2,
            variable: ?*IUIAnimationVariable2,
            transition: ?*IUIAnimationTransition2,
            start_keyframe: UI_ANIMATION_KEYFRAME,
            end_keyframe: UI_ANIMATION_KEYFRAME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RepeatBetweenKeyframes: *const fn (
            self: *const IUIAnimationStoryboard2,
            start_keyframe: UI_ANIMATION_KEYFRAME,
            end_keyframe: UI_ANIMATION_KEYFRAME,
            c_repetition: f64,
            repeat_mode: UI_ANIMATION_REPEAT_MODE,
            p_iteration_change_handler: ?*IUIAnimationLoopIterationChangeHandler2,
            id: usize,
            f_register_for_next_animation_event: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HoldVariable: *const fn (
            self: *const IUIAnimationStoryboard2,
            variable: ?*IUIAnimationVariable2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLongestAcceptableDelay: *const fn (
            self: *const IUIAnimationStoryboard2,
            delay: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSkipDuration: *const fn (
            self: *const IUIAnimationStoryboard2,
            seconds_duration: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Schedule: *const fn (
            self: *const IUIAnimationStoryboard2,
            time_now: f64,
            scheduling_result: ?*UI_ANIMATION_SCHEDULING_RESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Conclude: *const fn (
            self: *const IUIAnimationStoryboard2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Finish: *const fn (
            self: *const IUIAnimationStoryboard2,
            completion_deadline: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abandon: *const fn (
            self: *const IUIAnimationStoryboard2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTag: *const fn (
            self: *const IUIAnimationStoryboard2,
            object: ?*IUnknown,
            id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTag: *const fn (
            self: *const IUIAnimationStoryboard2,
            object: ?*?*IUnknown,
            id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn (
            self: *const IUIAnimationStoryboard2,
            status: ?*UI_ANIMATION_STORYBOARD_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetElapsedTime: *const fn (
            self: *const IUIAnimationStoryboard2,
            elapsed_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStoryboardEventHandler: *const fn (
            self: *const IUIAnimationStoryboard2,
            handler: ?*IUIAnimationStoryboardEventHandler2,
            f_register_status_change_for_next_animation_event: BOOL,
            f_register_update_for_next_animation_event: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addTransition(self: *const T, variable_: ?*IUIAnimationVariable2, transition_: ?*IUIAnimationTransition2) HRESULT {
                return @as(*const IUIAnimationStoryboard2.VTable, @ptrCast(self.vtable)).AddTransition(@as(*const IUIAnimationStoryboard2, @ptrCast(self)), variable_, transition_);
            }
            pub inline fn addKeyframeAtOffset(self: *const T, existing_keyframe_: UI_ANIMATION_KEYFRAME, offset_: f64, keyframe_: ?*UI_ANIMATION_KEYFRAME) HRESULT {
                return @as(*const IUIAnimationStoryboard2.VTable, @ptrCast(self.vtable)).AddKeyframeAtOffset(@as(*const IUIAnimationStoryboard2, @ptrCast(self)), existing_keyframe_, offset_, keyframe_);
            }
            pub inline fn addKeyframeAfterTransition(self: *const T, transition_: ?*IUIAnimationTransition2, keyframe_: ?*UI_ANIMATION_KEYFRAME) HRESULT {
                return @as(*const IUIAnimationStoryboard2.VTable, @ptrCast(self.vtable)).AddKeyframeAfterTransition(@as(*const IUIAnimationStoryboard2, @ptrCast(self)), transition_, keyframe_);
            }
            pub inline fn addTransitionAtKeyframe(self: *const T, variable_: ?*IUIAnimationVariable2, transition_: ?*IUIAnimationTransition2, start_keyframe_: UI_ANIMATION_KEYFRAME) HRESULT {
                return @as(*const IUIAnimationStoryboard2.VTable, @ptrCast(self.vtable)).AddTransitionAtKeyframe(@as(*const IUIAnimationStoryboard2, @ptrCast(self)), variable_, transition_, start_keyframe_);
            }
            pub inline fn addTransitionBetweenKeyframes(self: *const T, variable_: ?*IUIAnimationVariable2, transition_: ?*IUIAnimationTransition2, start_keyframe_: UI_ANIMATION_KEYFRAME, end_keyframe_: UI_ANIMATION_KEYFRAME) HRESULT {
                return @as(*const IUIAnimationStoryboard2.VTable, @ptrCast(self.vtable)).AddTransitionBetweenKeyframes(@as(*const IUIAnimationStoryboard2, @ptrCast(self)), variable_, transition_, start_keyframe_, end_keyframe_);
            }
            pub inline fn repeatBetweenKeyframes(self: *const T, start_keyframe_: UI_ANIMATION_KEYFRAME, end_keyframe_: UI_ANIMATION_KEYFRAME, c_repetition_: f64, repeat_mode_: UI_ANIMATION_REPEAT_MODE, p_iteration_change_handler_: ?*IUIAnimationLoopIterationChangeHandler2, id_: usize, f_register_for_next_animation_event_: BOOL) HRESULT {
                return @as(*const IUIAnimationStoryboard2.VTable, @ptrCast(self.vtable)).RepeatBetweenKeyframes(@as(*const IUIAnimationStoryboard2, @ptrCast(self)), start_keyframe_, end_keyframe_, c_repetition_, repeat_mode_, p_iteration_change_handler_, id_, f_register_for_next_animation_event_);
            }
            pub inline fn holdVariable(self: *const T, variable_: ?*IUIAnimationVariable2) HRESULT {
                return @as(*const IUIAnimationStoryboard2.VTable, @ptrCast(self.vtable)).HoldVariable(@as(*const IUIAnimationStoryboard2, @ptrCast(self)), variable_);
            }
            pub inline fn setLongestAcceptableDelay(self: *const T, delay_: f64) HRESULT {
                return @as(*const IUIAnimationStoryboard2.VTable, @ptrCast(self.vtable)).SetLongestAcceptableDelay(@as(*const IUIAnimationStoryboard2, @ptrCast(self)), delay_);
            }
            pub inline fn setSkipDuration(self: *const T, seconds_duration_: f64) HRESULT {
                return @as(*const IUIAnimationStoryboard2.VTable, @ptrCast(self.vtable)).SetSkipDuration(@as(*const IUIAnimationStoryboard2, @ptrCast(self)), seconds_duration_);
            }
            pub inline fn schedule(self: *const T, time_now_: f64, scheduling_result_: ?*UI_ANIMATION_SCHEDULING_RESULT) HRESULT {
                return @as(*const IUIAnimationStoryboard2.VTable, @ptrCast(self.vtable)).Schedule(@as(*const IUIAnimationStoryboard2, @ptrCast(self)), time_now_, scheduling_result_);
            }
            pub inline fn conclude(self: *const T) HRESULT {
                return @as(*const IUIAnimationStoryboard2.VTable, @ptrCast(self.vtable)).Conclude(@as(*const IUIAnimationStoryboard2, @ptrCast(self)));
            }
            pub inline fn finish(self: *const T, completion_deadline_: f64) HRESULT {
                return @as(*const IUIAnimationStoryboard2.VTable, @ptrCast(self.vtable)).Finish(@as(*const IUIAnimationStoryboard2, @ptrCast(self)), completion_deadline_);
            }
            pub inline fn abandon(self: *const T) HRESULT {
                return @as(*const IUIAnimationStoryboard2.VTable, @ptrCast(self.vtable)).Abandon(@as(*const IUIAnimationStoryboard2, @ptrCast(self)));
            }
            pub inline fn setTag(self: *const T, object_: ?*IUnknown, id_: u32) HRESULT {
                return @as(*const IUIAnimationStoryboard2.VTable, @ptrCast(self.vtable)).SetTag(@as(*const IUIAnimationStoryboard2, @ptrCast(self)), object_, id_);
            }
            pub inline fn getTag(self: *const T, object_: ?*?*IUnknown, id_: ?*u32) HRESULT {
                return @as(*const IUIAnimationStoryboard2.VTable, @ptrCast(self.vtable)).GetTag(@as(*const IUIAnimationStoryboard2, @ptrCast(self)), object_, id_);
            }
            pub inline fn getStatus(self: *const T, status_: ?*UI_ANIMATION_STORYBOARD_STATUS) HRESULT {
                return @as(*const IUIAnimationStoryboard2.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IUIAnimationStoryboard2, @ptrCast(self)), status_);
            }
            pub inline fn getElapsedTime(self: *const T, elapsed_time_: ?*f64) HRESULT {
                return @as(*const IUIAnimationStoryboard2.VTable, @ptrCast(self.vtable)).GetElapsedTime(@as(*const IUIAnimationStoryboard2, @ptrCast(self)), elapsed_time_);
            }
            pub inline fn setStoryboardEventHandler(self: *const T, handler_: ?*IUIAnimationStoryboardEventHandler2, f_register_status_change_for_next_animation_event_: BOOL, f_register_update_for_next_animation_event_: BOOL) HRESULT {
                return @as(*const IUIAnimationStoryboard2.VTable, @ptrCast(self.vtable)).SetStoryboardEventHandler(@as(*const IUIAnimationStoryboard2, @ptrCast(self)), handler_, f_register_status_change_for_next_animation_event_, f_register_update_for_next_animation_event_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (5)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const HRESULT = @import("../foundation.zig").HRESULT;
const IDCompositionAnimation = @import("../graphics/direct_composition.zig").IDCompositionAnimation;
const IUnknown = @import("../system/com.zig").IUnknown;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
