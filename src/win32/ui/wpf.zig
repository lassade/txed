//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (7)
//--------------------------------------------------------------------------------
pub const MILBITMAPEFFECT_SDK_VERSION = @as(u32, 16777216);
pub const CLSID_MILBitmapEffectGroup = Guid.initString("ac9c1a9a-7e18-4f64-ac7e-47cf7f051e95");
pub const CLSID_MILBitmapEffectBlur = Guid.initString("a924df87-225d-4373-8f5b-b90ec85ae3de");
pub const CLSID_MILBitmapEffectDropShadow = Guid.initString("459a3fbe-d8ac-4692-874b-7a265715aa16");
pub const CLSID_MILBitmapEffectOuterGlow = Guid.initString("e2161bdd-7eb6-4725-9c0b-8a2a1b4f0667");
pub const CLSID_MILBitmapEffectBevel = Guid.initString("fd361dbe-6c9b-4de0-8290-f6400c2737ed");
pub const CLSID_MILBitmapEffectEmboss = Guid.initString("cd299846-824f-47ec-a007-12aa767f2816");

//--------------------------------------------------------------------------------
// Section: Types (23)
//--------------------------------------------------------------------------------
pub const MilRectD = extern struct {
    left: f64,
    top: f64,
    right: f64,
    bottom: f64,
};

pub const MilPoint2D = extern struct {
    X: f64,
    Y: f64,
};

pub const MILMatrixF = extern struct {
    _11: f64,
    _12: f64,
    _13: f64,
    _14: f64,
    _21: f64,
    _22: f64,
    _23: f64,
    _24: f64,
    _31: f64,
    _32: f64,
    _33: f64,
    _34: f64,
    _41: f64,
    _42: f64,
    _43: f64,
    _44: f64,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectConnectorInfo_Value = Guid.initString("f66d2e4b-b46b-42fc-859e-3da0ecdb3c43");
pub const IID_IMILBitmapEffectConnectorInfo = &IID_IMILBitmapEffectConnectorInfo_Value;
pub const IMILBitmapEffectConnectorInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIndex: *const fn (
            self: *const IMILBitmapEffectConnectorInfo,
            pui_index: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptimalFormat: *const fn (
            self: *const IMILBitmapEffectConnectorInfo,
            p_format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumberFormats: *const fn (
            self: *const IMILBitmapEffectConnectorInfo,
            pul_number_formats: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormat: *const fn (
            self: *const IMILBitmapEffectConnectorInfo,
            ul_index: u32,
            p_format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getIndex(self: *const T, pui_index_: ?*u32) HRESULT {
                return @as(*const IMILBitmapEffectConnectorInfo.VTable, @ptrCast(self.vtable)).GetIndex(@as(*const IMILBitmapEffectConnectorInfo, @ptrCast(self)), pui_index_);
            }
            pub inline fn getOptimalFormat(self: *const T, p_format_: ?*Guid) HRESULT {
                return @as(*const IMILBitmapEffectConnectorInfo.VTable, @ptrCast(self.vtable)).GetOptimalFormat(@as(*const IMILBitmapEffectConnectorInfo, @ptrCast(self)), p_format_);
            }
            pub inline fn getNumberFormats(self: *const T, pul_number_formats_: ?*u32) HRESULT {
                return @as(*const IMILBitmapEffectConnectorInfo.VTable, @ptrCast(self.vtable)).GetNumberFormats(@as(*const IMILBitmapEffectConnectorInfo, @ptrCast(self)), pul_number_formats_);
            }
            pub inline fn getFormat(self: *const T, ul_index_: u32, p_format_: ?*Guid) HRESULT {
                return @as(*const IMILBitmapEffectConnectorInfo.VTable, @ptrCast(self.vtable)).GetFormat(@as(*const IMILBitmapEffectConnectorInfo, @ptrCast(self)), ul_index_, p_format_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectConnectionsInfo_Value = Guid.initString("476b538a-c765-4237-ba4a-d6a880ff0cfc");
pub const IID_IMILBitmapEffectConnectionsInfo = &IID_IMILBitmapEffectConnectionsInfo_Value;
pub const IMILBitmapEffectConnectionsInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNumberInputs: *const fn (
            self: *const IMILBitmapEffectConnectionsInfo,
            pui_num_inputs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumberOutputs: *const fn (
            self: *const IMILBitmapEffectConnectionsInfo,
            pui_num_outputs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputConnectorInfo: *const fn (
            self: *const IMILBitmapEffectConnectionsInfo,
            ui_index: u32,
            pp_connector_info: ?*?*IMILBitmapEffectConnectorInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputConnectorInfo: *const fn (
            self: *const IMILBitmapEffectConnectionsInfo,
            ui_index: u32,
            pp_connector_info: ?*?*IMILBitmapEffectConnectorInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getNumberInputs(self: *const T, pui_num_inputs_: ?*u32) HRESULT {
                return @as(*const IMILBitmapEffectConnectionsInfo.VTable, @ptrCast(self.vtable)).GetNumberInputs(@as(*const IMILBitmapEffectConnectionsInfo, @ptrCast(self)), pui_num_inputs_);
            }
            pub inline fn getNumberOutputs(self: *const T, pui_num_outputs_: ?*u32) HRESULT {
                return @as(*const IMILBitmapEffectConnectionsInfo.VTable, @ptrCast(self.vtable)).GetNumberOutputs(@as(*const IMILBitmapEffectConnectionsInfo, @ptrCast(self)), pui_num_outputs_);
            }
            pub inline fn getInputConnectorInfo(self: *const T, ui_index_: u32, pp_connector_info_: ?*?*IMILBitmapEffectConnectorInfo) HRESULT {
                return @as(*const IMILBitmapEffectConnectionsInfo.VTable, @ptrCast(self.vtable)).GetInputConnectorInfo(@as(*const IMILBitmapEffectConnectionsInfo, @ptrCast(self)), ui_index_, pp_connector_info_);
            }
            pub inline fn getOutputConnectorInfo(self: *const T, ui_index_: u32, pp_connector_info_: ?*?*IMILBitmapEffectConnectorInfo) HRESULT {
                return @as(*const IMILBitmapEffectConnectionsInfo.VTable, @ptrCast(self.vtable)).GetOutputConnectorInfo(@as(*const IMILBitmapEffectConnectionsInfo, @ptrCast(self)), ui_index_, pp_connector_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectConnections_Value = Guid.initString("c2b5d861-9b1a-4374-89b0-dec4874d6a81");
pub const IID_IMILBitmapEffectConnections = &IID_IMILBitmapEffectConnections_Value;
pub const IMILBitmapEffectConnections = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInputConnector: *const fn (
            self: *const IMILBitmapEffectConnections,
            ui_index: u32,
            pp_connector: ?*?*IMILBitmapEffectInputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputConnector: *const fn (
            self: *const IMILBitmapEffectConnections,
            ui_index: u32,
            pp_connector: ?*?*IMILBitmapEffectOutputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getInputConnector(self: *const T, ui_index_: u32, pp_connector_: ?*?*IMILBitmapEffectInputConnector) HRESULT {
                return @as(*const IMILBitmapEffectConnections.VTable, @ptrCast(self.vtable)).GetInputConnector(@as(*const IMILBitmapEffectConnections, @ptrCast(self)), ui_index_, pp_connector_);
            }
            pub inline fn getOutputConnector(self: *const T, ui_index_: u32, pp_connector_: ?*?*IMILBitmapEffectOutputConnector) HRESULT {
                return @as(*const IMILBitmapEffectConnections.VTable, @ptrCast(self.vtable)).GetOutputConnector(@as(*const IMILBitmapEffectConnections, @ptrCast(self)), ui_index_, pp_connector_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffect_Value = Guid.initString("8a6ff321-c944-4a1b-9944-9954af301258");
pub const IID_IMILBitmapEffect = &IID_IMILBitmapEffect_Value;
pub const IMILBitmapEffect = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOutput: *const fn (
            self: *const IMILBitmapEffect,
            ui_index: u32,
            p_context: ?*IMILBitmapEffectRenderContext,
            pp_bitmap_source: ?*?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParentEffect: *const fn (
            self: *const IMILBitmapEffect,
            pp_parent_effect: ?*?*IMILBitmapEffectGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInputSource: *const fn (
            self: *const IMILBitmapEffect,
            ui_index: u32,
            p_bitmap_source: ?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getOutput(self: *const T, ui_index_: u32, p_context_: ?*IMILBitmapEffectRenderContext, pp_bitmap_source_: ?*?*IWICBitmapSource) HRESULT {
                return @as(*const IMILBitmapEffect.VTable, @ptrCast(self.vtable)).GetOutput(@as(*const IMILBitmapEffect, @ptrCast(self)), ui_index_, p_context_, pp_bitmap_source_);
            }
            pub inline fn getParentEffect(self: *const T, pp_parent_effect_: ?*?*IMILBitmapEffectGroup) HRESULT {
                return @as(*const IMILBitmapEffect.VTable, @ptrCast(self.vtable)).GetParentEffect(@as(*const IMILBitmapEffect, @ptrCast(self)), pp_parent_effect_);
            }
            pub inline fn setInputSource(self: *const T, ui_index_: u32, p_bitmap_source_: ?*IWICBitmapSource) HRESULT {
                return @as(*const IMILBitmapEffect.VTable, @ptrCast(self.vtable)).SetInputSource(@as(*const IMILBitmapEffect, @ptrCast(self)), ui_index_, p_bitmap_source_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectImpl_Value = Guid.initString("cc2468f2-9936-47be-b4af-06b5df5dbcbb");
pub const IID_IMILBitmapEffectImpl = &IID_IMILBitmapEffectImpl_Value;
pub const IMILBitmapEffectImpl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsInPlaceModificationAllowed: *const fn (
            self: *const IMILBitmapEffectImpl,
            p_output_connector: ?*IMILBitmapEffectOutputConnector,
            pf_modify_in_place: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetParentEffect: *const fn (
            self: *const IMILBitmapEffectImpl,
            p_parent_effect: ?*IMILBitmapEffectGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputSource: *const fn (
            self: *const IMILBitmapEffectImpl,
            ui_index: u32,
            pp_bitmap_source: ?*?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputSourceBounds: *const fn (
            self: *const IMILBitmapEffectImpl,
            ui_index: u32,
            p_rect: ?*MilRectD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputBitmapSource: *const fn (
            self: *const IMILBitmapEffectImpl,
            ui_index: u32,
            p_render_context: ?*IMILBitmapEffectRenderContext,
            pf_modify_in_place: ?*i16,
            pp_bitmap_source: ?*?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputBitmapSource: *const fn (
            self: *const IMILBitmapEffectImpl,
            ui_index: u32,
            p_render_context: ?*IMILBitmapEffectRenderContext,
            pf_modify_in_place: ?*i16,
            pp_bitmap_source: ?*?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Initialize: *const fn (
            self: *const IMILBitmapEffectImpl,
            p_inner: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isInPlaceModificationAllowed(self: *const T, p_output_connector_: ?*IMILBitmapEffectOutputConnector, pf_modify_in_place_: ?*i16) HRESULT {
                return @as(*const IMILBitmapEffectImpl.VTable, @ptrCast(self.vtable)).IsInPlaceModificationAllowed(@as(*const IMILBitmapEffectImpl, @ptrCast(self)), p_output_connector_, pf_modify_in_place_);
            }
            pub inline fn setParentEffect(self: *const T, p_parent_effect_: ?*IMILBitmapEffectGroup) HRESULT {
                return @as(*const IMILBitmapEffectImpl.VTable, @ptrCast(self.vtable)).SetParentEffect(@as(*const IMILBitmapEffectImpl, @ptrCast(self)), p_parent_effect_);
            }
            pub inline fn getInputSource(self: *const T, ui_index_: u32, pp_bitmap_source_: ?*?*IWICBitmapSource) HRESULT {
                return @as(*const IMILBitmapEffectImpl.VTable, @ptrCast(self.vtable)).GetInputSource(@as(*const IMILBitmapEffectImpl, @ptrCast(self)), ui_index_, pp_bitmap_source_);
            }
            pub inline fn getInputSourceBounds(self: *const T, ui_index_: u32, p_rect_: ?*MilRectD) HRESULT {
                return @as(*const IMILBitmapEffectImpl.VTable, @ptrCast(self.vtable)).GetInputSourceBounds(@as(*const IMILBitmapEffectImpl, @ptrCast(self)), ui_index_, p_rect_);
            }
            pub inline fn getInputBitmapSource(self: *const T, ui_index_: u32, p_render_context_: ?*IMILBitmapEffectRenderContext, pf_modify_in_place_: ?*i16, pp_bitmap_source_: ?*?*IWICBitmapSource) HRESULT {
                return @as(*const IMILBitmapEffectImpl.VTable, @ptrCast(self.vtable)).GetInputBitmapSource(@as(*const IMILBitmapEffectImpl, @ptrCast(self)), ui_index_, p_render_context_, pf_modify_in_place_, pp_bitmap_source_);
            }
            pub inline fn getOutputBitmapSource(self: *const T, ui_index_: u32, p_render_context_: ?*IMILBitmapEffectRenderContext, pf_modify_in_place_: ?*i16, pp_bitmap_source_: ?*?*IWICBitmapSource) HRESULT {
                return @as(*const IMILBitmapEffectImpl.VTable, @ptrCast(self.vtable)).GetOutputBitmapSource(@as(*const IMILBitmapEffectImpl, @ptrCast(self)), ui_index_, p_render_context_, pf_modify_in_place_, pp_bitmap_source_);
            }
            pub inline fn initialize(self: *const T, p_inner_: ?*IUnknown) HRESULT {
                return @as(*const IMILBitmapEffectImpl.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IMILBitmapEffectImpl, @ptrCast(self)), p_inner_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectGroup_Value = Guid.initString("2f952360-698a-4ac6-81a1-bcfdf08eb8e8");
pub const IID_IMILBitmapEffectGroup = &IID_IMILBitmapEffectGroup_Value;
pub const IMILBitmapEffectGroup = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInteriorInputConnector: *const fn (
            self: *const IMILBitmapEffectGroup,
            ui_index: u32,
            pp_connector: ?*?*IMILBitmapEffectOutputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInteriorOutputConnector: *const fn (
            self: *const IMILBitmapEffectGroup,
            ui_index: u32,
            pp_connector: ?*?*IMILBitmapEffectInputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IMILBitmapEffectGroup,
            p_effect: ?*IMILBitmapEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getInteriorInputConnector(self: *const T, ui_index_: u32, pp_connector_: ?*?*IMILBitmapEffectOutputConnector) HRESULT {
                return @as(*const IMILBitmapEffectGroup.VTable, @ptrCast(self.vtable)).GetInteriorInputConnector(@as(*const IMILBitmapEffectGroup, @ptrCast(self)), ui_index_, pp_connector_);
            }
            pub inline fn getInteriorOutputConnector(self: *const T, ui_index_: u32, pp_connector_: ?*?*IMILBitmapEffectInputConnector) HRESULT {
                return @as(*const IMILBitmapEffectGroup.VTable, @ptrCast(self.vtable)).GetInteriorOutputConnector(@as(*const IMILBitmapEffectGroup, @ptrCast(self)), ui_index_, pp_connector_);
            }
            pub inline fn add(self: *const T, p_effect_: ?*IMILBitmapEffect) HRESULT {
                return @as(*const IMILBitmapEffectGroup.VTable, @ptrCast(self.vtable)).Add(@as(*const IMILBitmapEffectGroup, @ptrCast(self)), p_effect_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectGroupImpl_Value = Guid.initString("78fed518-1cfc-4807-8b85-6b6e51398f62");
pub const IID_IMILBitmapEffectGroupImpl = &IID_IMILBitmapEffectGroupImpl_Value;
pub const IMILBitmapEffectGroupImpl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Preprocess: *const fn (
            self: *const IMILBitmapEffectGroupImpl,
            p_context: ?*IMILBitmapEffectRenderContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumberChildren: *const fn (
            self: *const IMILBitmapEffectGroupImpl,
            pui_number_children: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChildren: *const fn (
            self: *const IMILBitmapEffectGroupImpl,
            p_children: ?*?*IMILBitmapEffects,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn preprocess(self: *const T, p_context_: ?*IMILBitmapEffectRenderContext) HRESULT {
                return @as(*const IMILBitmapEffectGroupImpl.VTable, @ptrCast(self.vtable)).Preprocess(@as(*const IMILBitmapEffectGroupImpl, @ptrCast(self)), p_context_);
            }
            pub inline fn getNumberChildren(self: *const T, pui_number_children_: ?*u32) HRESULT {
                return @as(*const IMILBitmapEffectGroupImpl.VTable, @ptrCast(self.vtable)).GetNumberChildren(@as(*const IMILBitmapEffectGroupImpl, @ptrCast(self)), pui_number_children_);
            }
            pub inline fn getChildren(self: *const T, p_children_: ?*?*IMILBitmapEffects) HRESULT {
                return @as(*const IMILBitmapEffectGroupImpl.VTable, @ptrCast(self.vtable)).GetChildren(@as(*const IMILBitmapEffectGroupImpl, @ptrCast(self)), p_children_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectRenderContext_Value = Guid.initString("12a2ec7e-2d33-44b2-b334-1abb7846e390");
pub const IID_IMILBitmapEffectRenderContext = &IID_IMILBitmapEffectRenderContext_Value;
pub const IMILBitmapEffectRenderContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetOutputPixelFormat: *const fn (
            self: *const IMILBitmapEffectRenderContext,
            format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputPixelFormat: *const fn (
            self: *const IMILBitmapEffectRenderContext,
            p_format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetUseSoftwareRenderer: *const fn (
            self: *const IMILBitmapEffectRenderContext,
            f_software: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInitialTransform: *const fn (
            self: *const IMILBitmapEffectRenderContext,
            p_matrix: ?*MILMatrixF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFinalTransform: *const fn (
            self: *const IMILBitmapEffectRenderContext,
            p_matrix: ?*MILMatrixF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutputDPI: *const fn (
            self: *const IMILBitmapEffectRenderContext,
            dbl_dpi_x: f64,
            dbl_dpi_y: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputDPI: *const fn (
            self: *const IMILBitmapEffectRenderContext,
            pdbl_dpi_x: ?*f64,
            pdbl_dpi_y: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRegionOfInterest: *const fn (
            self: *const IMILBitmapEffectRenderContext,
            p_rect: ?*MilRectD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setOutputPixelFormat(self: *const T, format_: ?*Guid) HRESULT {
                return @as(*const IMILBitmapEffectRenderContext.VTable, @ptrCast(self.vtable)).SetOutputPixelFormat(@as(*const IMILBitmapEffectRenderContext, @ptrCast(self)), format_);
            }
            pub inline fn getOutputPixelFormat(self: *const T, p_format_: ?*Guid) HRESULT {
                return @as(*const IMILBitmapEffectRenderContext.VTable, @ptrCast(self.vtable)).GetOutputPixelFormat(@as(*const IMILBitmapEffectRenderContext, @ptrCast(self)), p_format_);
            }
            pub inline fn setUseSoftwareRenderer(self: *const T, f_software_: i16) HRESULT {
                return @as(*const IMILBitmapEffectRenderContext.VTable, @ptrCast(self.vtable)).SetUseSoftwareRenderer(@as(*const IMILBitmapEffectRenderContext, @ptrCast(self)), f_software_);
            }
            pub inline fn setInitialTransform(self: *const T, p_matrix_: ?*MILMatrixF) HRESULT {
                return @as(*const IMILBitmapEffectRenderContext.VTable, @ptrCast(self.vtable)).SetInitialTransform(@as(*const IMILBitmapEffectRenderContext, @ptrCast(self)), p_matrix_);
            }
            pub inline fn getFinalTransform(self: *const T, p_matrix_: ?*MILMatrixF) HRESULT {
                return @as(*const IMILBitmapEffectRenderContext.VTable, @ptrCast(self.vtable)).GetFinalTransform(@as(*const IMILBitmapEffectRenderContext, @ptrCast(self)), p_matrix_);
            }
            pub inline fn setOutputDPI(self: *const T, dbl_dpi_x_: f64, dbl_dpi_y_: f64) HRESULT {
                return @as(*const IMILBitmapEffectRenderContext.VTable, @ptrCast(self.vtable)).SetOutputDPI(@as(*const IMILBitmapEffectRenderContext, @ptrCast(self)), dbl_dpi_x_, dbl_dpi_y_);
            }
            pub inline fn getOutputDPI(self: *const T, pdbl_dpi_x_: ?*f64, pdbl_dpi_y_: ?*f64) HRESULT {
                return @as(*const IMILBitmapEffectRenderContext.VTable, @ptrCast(self.vtable)).GetOutputDPI(@as(*const IMILBitmapEffectRenderContext, @ptrCast(self)), pdbl_dpi_x_, pdbl_dpi_y_);
            }
            pub inline fn setRegionOfInterest(self: *const T, p_rect_: ?*MilRectD) HRESULT {
                return @as(*const IMILBitmapEffectRenderContext.VTable, @ptrCast(self.vtable)).SetRegionOfInterest(@as(*const IMILBitmapEffectRenderContext, @ptrCast(self)), p_rect_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectRenderContextImpl_Value = Guid.initString("4d25accb-797d-4fd2-b128-dffeff84fcc3");
pub const IID_IMILBitmapEffectRenderContextImpl = &IID_IMILBitmapEffectRenderContextImpl_Value;
pub const IMILBitmapEffectRenderContextImpl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetUseSoftwareRenderer: *const fn (
            self: *const IMILBitmapEffectRenderContextImpl,
            pf_software: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransform: *const fn (
            self: *const IMILBitmapEffectRenderContextImpl,
            p_matrix: ?*MILMatrixF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateTransform: *const fn (
            self: *const IMILBitmapEffectRenderContextImpl,
            p_matrix: ?*MILMatrixF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOutputBounds: *const fn (
            self: *const IMILBitmapEffectRenderContextImpl,
            p_rect: ?*MilRectD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateOutputBounds: *const fn (
            self: *const IMILBitmapEffectRenderContextImpl,
            p_rect: ?*MilRectD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getUseSoftwareRenderer(self: *const T, pf_software_: ?*i16) HRESULT {
                return @as(*const IMILBitmapEffectRenderContextImpl.VTable, @ptrCast(self.vtable)).GetUseSoftwareRenderer(@as(*const IMILBitmapEffectRenderContextImpl, @ptrCast(self)), pf_software_);
            }
            pub inline fn getTransform(self: *const T, p_matrix_: ?*MILMatrixF) HRESULT {
                return @as(*const IMILBitmapEffectRenderContextImpl.VTable, @ptrCast(self.vtable)).GetTransform(@as(*const IMILBitmapEffectRenderContextImpl, @ptrCast(self)), p_matrix_);
            }
            pub inline fn updateTransform(self: *const T, p_matrix_: ?*MILMatrixF) HRESULT {
                return @as(*const IMILBitmapEffectRenderContextImpl.VTable, @ptrCast(self.vtable)).UpdateTransform(@as(*const IMILBitmapEffectRenderContextImpl, @ptrCast(self)), p_matrix_);
            }
            pub inline fn getOutputBounds(self: *const T, p_rect_: ?*MilRectD) HRESULT {
                return @as(*const IMILBitmapEffectRenderContextImpl.VTable, @ptrCast(self.vtable)).GetOutputBounds(@as(*const IMILBitmapEffectRenderContextImpl, @ptrCast(self)), p_rect_);
            }
            pub inline fn updateOutputBounds(self: *const T, p_rect_: ?*MilRectD) HRESULT {
                return @as(*const IMILBitmapEffectRenderContextImpl.VTable, @ptrCast(self.vtable)).UpdateOutputBounds(@as(*const IMILBitmapEffectRenderContextImpl, @ptrCast(self)), p_rect_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectFactory_Value = Guid.initString("33a9df34-a403-4ec7-b07e-bc0682370845");
pub const IID_IMILBitmapEffectFactory = &IID_IMILBitmapEffectFactory_Value;
pub const IMILBitmapEffectFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateEffect: *const fn (
            self: *const IMILBitmapEffectFactory,
            pguid_effect: ?*const Guid,
            pp_effect: ?*?*IMILBitmapEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateContext: *const fn (
            self: *const IMILBitmapEffectFactory,
            pp_context: ?*?*IMILBitmapEffectRenderContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEffectOuter: *const fn (
            self: *const IMILBitmapEffectFactory,
            pp_effect: ?*?*IMILBitmapEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createEffect(self: *const T, pguid_effect_: ?*const Guid, pp_effect_: ?*?*IMILBitmapEffect) HRESULT {
                return @as(*const IMILBitmapEffectFactory.VTable, @ptrCast(self.vtable)).CreateEffect(@as(*const IMILBitmapEffectFactory, @ptrCast(self)), pguid_effect_, pp_effect_);
            }
            pub inline fn createContext(self: *const T, pp_context_: ?*?*IMILBitmapEffectRenderContext) HRESULT {
                return @as(*const IMILBitmapEffectFactory.VTable, @ptrCast(self.vtable)).CreateContext(@as(*const IMILBitmapEffectFactory, @ptrCast(self)), pp_context_);
            }
            pub inline fn createEffectOuter(self: *const T, pp_effect_: ?*?*IMILBitmapEffect) HRESULT {
                return @as(*const IMILBitmapEffectFactory.VTable, @ptrCast(self.vtable)).CreateEffectOuter(@as(*const IMILBitmapEffectFactory, @ptrCast(self)), pp_effect_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectPrimitive_Value = Guid.initString("67e31025-3091-4dfc-98d6-dd494551461d");
pub const IID_IMILBitmapEffectPrimitive = &IID_IMILBitmapEffectPrimitive_Value;
pub const IMILBitmapEffectPrimitive = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOutput: *const fn (
            self: *const IMILBitmapEffectPrimitive,
            ui_index: u32,
            p_context: ?*IMILBitmapEffectRenderContext,
            pf_modify_in_place: ?*i16,
            pp_bitmap_source: ?*?*IWICBitmapSource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TransformPoint: *const fn (
            self: *const IMILBitmapEffectPrimitive,
            ui_index: u32,
            p: ?*MilPoint2D,
            f_forward_transform: i16,
            p_context: ?*IMILBitmapEffectRenderContext,
            pf_point_transformed: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TransformRect: *const fn (
            self: *const IMILBitmapEffectPrimitive,
            ui_index: u32,
            p: ?*MilRectD,
            f_forward_transform: i16,
            p_context: ?*IMILBitmapEffectRenderContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasAffineTransform: *const fn (
            self: *const IMILBitmapEffectPrimitive,
            ui_index: u32,
            pf_affine: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasInverseTransform: *const fn (
            self: *const IMILBitmapEffectPrimitive,
            ui_index: u32,
            pf_has_inverse: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAffineMatrix: *const fn (
            self: *const IMILBitmapEffectPrimitive,
            ui_index: u32,
            p_matrix: ?*MilMatrix3x2D,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getOutput(self: *const T, ui_index_: u32, p_context_: ?*IMILBitmapEffectRenderContext, pf_modify_in_place_: ?*i16, pp_bitmap_source_: ?*?*IWICBitmapSource) HRESULT {
                return @as(*const IMILBitmapEffectPrimitive.VTable, @ptrCast(self.vtable)).GetOutput(@as(*const IMILBitmapEffectPrimitive, @ptrCast(self)), ui_index_, p_context_, pf_modify_in_place_, pp_bitmap_source_);
            }
            pub inline fn transformPoint(self: *const T, ui_index_: u32, p_: ?*MilPoint2D, f_forward_transform_: i16, p_context_: ?*IMILBitmapEffectRenderContext, pf_point_transformed_: ?*i16) HRESULT {
                return @as(*const IMILBitmapEffectPrimitive.VTable, @ptrCast(self.vtable)).TransformPoint(@as(*const IMILBitmapEffectPrimitive, @ptrCast(self)), ui_index_, p_, f_forward_transform_, p_context_, pf_point_transformed_);
            }
            pub inline fn transformRect(self: *const T, ui_index_: u32, p_: ?*MilRectD, f_forward_transform_: i16, p_context_: ?*IMILBitmapEffectRenderContext) HRESULT {
                return @as(*const IMILBitmapEffectPrimitive.VTable, @ptrCast(self.vtable)).TransformRect(@as(*const IMILBitmapEffectPrimitive, @ptrCast(self)), ui_index_, p_, f_forward_transform_, p_context_);
            }
            pub inline fn hasAffineTransform(self: *const T, ui_index_: u32, pf_affine_: ?*i16) HRESULT {
                return @as(*const IMILBitmapEffectPrimitive.VTable, @ptrCast(self.vtable)).HasAffineTransform(@as(*const IMILBitmapEffectPrimitive, @ptrCast(self)), ui_index_, pf_affine_);
            }
            pub inline fn hasInverseTransform(self: *const T, ui_index_: u32, pf_has_inverse_: ?*i16) HRESULT {
                return @as(*const IMILBitmapEffectPrimitive.VTable, @ptrCast(self.vtable)).HasInverseTransform(@as(*const IMILBitmapEffectPrimitive, @ptrCast(self)), ui_index_, pf_has_inverse_);
            }
            pub inline fn getAffineMatrix(self: *const T, ui_index_: u32, p_matrix_: ?*MilMatrix3x2D) HRESULT {
                return @as(*const IMILBitmapEffectPrimitive.VTable, @ptrCast(self.vtable)).GetAffineMatrix(@as(*const IMILBitmapEffectPrimitive, @ptrCast(self)), ui_index_, p_matrix_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectPrimitiveImpl_Value = Guid.initString("ce41e00b-efa6-44e7-b007-dd042e3ae126");
pub const IID_IMILBitmapEffectPrimitiveImpl = &IID_IMILBitmapEffectPrimitiveImpl_Value;
pub const IMILBitmapEffectPrimitiveImpl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsDirty: *const fn (
            self: *const IMILBitmapEffectPrimitiveImpl,
            ui_output_index: u32,
            pf_dirty: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsVolatile: *const fn (
            self: *const IMILBitmapEffectPrimitiveImpl,
            ui_output_index: u32,
            pf_volatile: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isDirty(self: *const T, ui_output_index_: u32, pf_dirty_: ?*i16) HRESULT {
                return @as(*const IMILBitmapEffectPrimitiveImpl.VTable, @ptrCast(self.vtable)).IsDirty(@as(*const IMILBitmapEffectPrimitiveImpl, @ptrCast(self)), ui_output_index_, pf_dirty_);
            }
            pub inline fn isVolatile(self: *const T, ui_output_index_: u32, pf_volatile_: ?*i16) HRESULT {
                return @as(*const IMILBitmapEffectPrimitiveImpl.VTable, @ptrCast(self.vtable)).IsVolatile(@as(*const IMILBitmapEffectPrimitiveImpl, @ptrCast(self)), ui_output_index_, pf_volatile_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffects_Value = Guid.initString("51ac3dce-67c5-448b-9180-ad3eabddd5dd");
pub const IID_IMILBitmapEffects = &IID_IMILBitmapEffects_Value;
pub const IMILBitmapEffects = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        _NewEnum: *const fn (
            self: *const IMILBitmapEffects,
            ppiu_return: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMILBitmapEffects,
            pp_effect: ?*?*IMILBitmapEffectGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const IMILBitmapEffects,
            uindex: u32,
            pp_effect: ?*?*IMILBitmapEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMILBitmapEffects,
            pui_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn newEnum(self: *const T, ppiu_return_: ?*?*IUnknown) HRESULT {
                return @as(*const IMILBitmapEffects.VTable, @ptrCast(self.vtable))._NewEnum(@as(*const IMILBitmapEffects, @ptrCast(self)), ppiu_return_);
            }
            pub inline fn getParent(self: *const T, pp_effect_: ?*?*IMILBitmapEffectGroup) HRESULT {
                return @as(*const IMILBitmapEffects.VTable, @ptrCast(self.vtable)).get_Parent(@as(*const IMILBitmapEffects, @ptrCast(self)), pp_effect_);
            }
            pub inline fn item(self: *const T, uindex_: u32, pp_effect_: ?*?*IMILBitmapEffect) HRESULT {
                return @as(*const IMILBitmapEffects.VTable, @ptrCast(self.vtable)).Item(@as(*const IMILBitmapEffects, @ptrCast(self)), uindex_, pp_effect_);
            }
            pub inline fn getCount(self: *const T, pui_count_: ?*u32) HRESULT {
                return @as(*const IMILBitmapEffects.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IMILBitmapEffects, @ptrCast(self)), pui_count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectConnector_Value = Guid.initString("f59567b3-76c1-4d47-ba1e-79f955e350ef");
pub const IID_IMILBitmapEffectConnector = &IID_IMILBitmapEffectConnector_Value;
pub const IMILBitmapEffectConnector = extern struct {
    pub const VTable = extern struct {
        base: IMILBitmapEffectConnectorInfo.VTable,
        IsConnected: *const fn (
            self: *const IMILBitmapEffectConnector,
            pf_connected: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitmapEffect: *const fn (
            self: *const IMILBitmapEffectConnector,
            pp_effect: ?*?*IMILBitmapEffect,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IMILBitmapEffectConnectorInfo.MethodMixin(T);
            pub inline fn isConnected(self: *const T, pf_connected_: ?*i16) HRESULT {
                return @as(*const IMILBitmapEffectConnector.VTable, @ptrCast(self.vtable)).IsConnected(@as(*const IMILBitmapEffectConnector, @ptrCast(self)), pf_connected_);
            }
            pub inline fn getBitmapEffect(self: *const T, pp_effect_: ?*?*IMILBitmapEffect) HRESULT {
                return @as(*const IMILBitmapEffectConnector.VTable, @ptrCast(self.vtable)).GetBitmapEffect(@as(*const IMILBitmapEffectConnector, @ptrCast(self)), pp_effect_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectInputConnector_Value = Guid.initString("a9b4ecaa-7a3c-45e7-8573-f4b81b60dd6c");
pub const IID_IMILBitmapEffectInputConnector = &IID_IMILBitmapEffectInputConnector_Value;
pub const IMILBitmapEffectInputConnector = extern struct {
    pub const VTable = extern struct {
        base: IMILBitmapEffectConnector.VTable,
        ConnectTo: *const fn (
            self: *const IMILBitmapEffectInputConnector,
            p_connector: ?*IMILBitmapEffectOutputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnection: *const fn (
            self: *const IMILBitmapEffectInputConnector,
            pp_connector: ?*?*IMILBitmapEffectOutputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IMILBitmapEffectConnector.MethodMixin(T);
            pub inline fn connectTo(self: *const T, p_connector_: ?*IMILBitmapEffectOutputConnector) HRESULT {
                return @as(*const IMILBitmapEffectInputConnector.VTable, @ptrCast(self.vtable)).ConnectTo(@as(*const IMILBitmapEffectInputConnector, @ptrCast(self)), p_connector_);
            }
            pub inline fn getConnection(self: *const T, pp_connector_: ?*?*IMILBitmapEffectOutputConnector) HRESULT {
                return @as(*const IMILBitmapEffectInputConnector.VTable, @ptrCast(self.vtable)).GetConnection(@as(*const IMILBitmapEffectInputConnector, @ptrCast(self)), pp_connector_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectOutputConnector_Value = Guid.initString("92957aad-841b-4866-82ec-8752468b07fd");
pub const IID_IMILBitmapEffectOutputConnector = &IID_IMILBitmapEffectOutputConnector_Value;
pub const IMILBitmapEffectOutputConnector = extern struct {
    pub const VTable = extern struct {
        base: IMILBitmapEffectConnector.VTable,
        GetNumberConnections: *const fn (
            self: *const IMILBitmapEffectOutputConnector,
            pui_number_connections: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnection: *const fn (
            self: *const IMILBitmapEffectOutputConnector,
            ui_index: u32,
            pp_connection: ?*?*IMILBitmapEffectInputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IMILBitmapEffectConnector.MethodMixin(T);
            pub inline fn getNumberConnections(self: *const T, pui_number_connections_: ?*u32) HRESULT {
                return @as(*const IMILBitmapEffectOutputConnector.VTable, @ptrCast(self.vtable)).GetNumberConnections(@as(*const IMILBitmapEffectOutputConnector, @ptrCast(self)), pui_number_connections_);
            }
            pub inline fn getConnection(self: *const T, ui_index_: u32, pp_connection_: ?*?*IMILBitmapEffectInputConnector) HRESULT {
                return @as(*const IMILBitmapEffectOutputConnector.VTable, @ptrCast(self.vtable)).GetConnection(@as(*const IMILBitmapEffectOutputConnector, @ptrCast(self)), ui_index_, pp_connection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectOutputConnectorImpl_Value = Guid.initString("21fae777-8b39-4bfa-9f2d-f3941ed36913");
pub const IID_IMILBitmapEffectOutputConnectorImpl = &IID_IMILBitmapEffectOutputConnectorImpl_Value;
pub const IMILBitmapEffectOutputConnectorImpl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddBackLink: *const fn (
            self: *const IMILBitmapEffectOutputConnectorImpl,
            p_connection: ?*IMILBitmapEffectInputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveBackLink: *const fn (
            self: *const IMILBitmapEffectOutputConnectorImpl,
            p_connection: ?*IMILBitmapEffectInputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addBackLink(self: *const T, p_connection_: ?*IMILBitmapEffectInputConnector) HRESULT {
                return @as(*const IMILBitmapEffectOutputConnectorImpl.VTable, @ptrCast(self.vtable)).AddBackLink(@as(*const IMILBitmapEffectOutputConnectorImpl, @ptrCast(self)), p_connection_);
            }
            pub inline fn removeBackLink(self: *const T, p_connection_: ?*IMILBitmapEffectInputConnector) HRESULT {
                return @as(*const IMILBitmapEffectOutputConnectorImpl.VTable, @ptrCast(self.vtable)).RemoveBackLink(@as(*const IMILBitmapEffectOutputConnectorImpl, @ptrCast(self)), p_connection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectInteriorInputConnector_Value = Guid.initString("20287e9e-86a2-4e15-953d-eb1438a5b842");
pub const IID_IMILBitmapEffectInteriorInputConnector = &IID_IMILBitmapEffectInteriorInputConnector_Value;
pub const IMILBitmapEffectInteriorInputConnector = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInputConnector: *const fn (
            self: *const IMILBitmapEffectInteriorInputConnector,
            p_input_connector: ?*?*IMILBitmapEffectInputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getInputConnector(self: *const T, p_input_connector_: ?*?*IMILBitmapEffectInputConnector) HRESULT {
                return @as(*const IMILBitmapEffectInteriorInputConnector.VTable, @ptrCast(self.vtable)).GetInputConnector(@as(*const IMILBitmapEffectInteriorInputConnector, @ptrCast(self)), p_input_connector_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectInteriorOutputConnector_Value = Guid.initString("00bbb6dc-acc9-4bfc-b344-8bee383dfefa");
pub const IID_IMILBitmapEffectInteriorOutputConnector = &IID_IMILBitmapEffectInteriorOutputConnector_Value;
pub const IMILBitmapEffectInteriorOutputConnector = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOutputConnector: *const fn (
            self: *const IMILBitmapEffectInteriorOutputConnector,
            p_output_connector: ?*?*IMILBitmapEffectOutputConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getOutputConnector(self: *const T, p_output_connector_: ?*?*IMILBitmapEffectOutputConnector) HRESULT {
                return @as(*const IMILBitmapEffectInteriorOutputConnector.VTable, @ptrCast(self.vtable)).GetOutputConnector(@as(*const IMILBitmapEffectInteriorOutputConnector, @ptrCast(self)), p_output_connector_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMILBitmapEffectEvents_Value = Guid.initString("2e880dd8-f8ce-457b-8199-d60bb3d7ef98");
pub const IID_IMILBitmapEffectEvents = &IID_IMILBitmapEffectEvents_Value;
pub const IMILBitmapEffectEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PropertyChange: *const fn (
            self: *const IMILBitmapEffectEvents,
            p_effect: ?*IMILBitmapEffect,
            bstr_property_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DirtyRegion: *const fn (
            self: *const IMILBitmapEffectEvents,
            p_effect: ?*IMILBitmapEffect,
            p_rect: ?*MilRectD,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn propertyChange(self: *const T, p_effect_: ?*IMILBitmapEffect, bstr_property_name_: ?BSTR) HRESULT {
                return @as(*const IMILBitmapEffectEvents.VTable, @ptrCast(self.vtable)).PropertyChange(@as(*const IMILBitmapEffectEvents, @ptrCast(self)), p_effect_, bstr_property_name_);
            }
            pub inline fn dirtyRegion(self: *const T, p_effect_: ?*IMILBitmapEffect, p_rect_: ?*MilRectD) HRESULT {
                return @as(*const IMILBitmapEffectEvents.VTable, @ptrCast(self.vtable)).DirtyRegion(@as(*const IMILBitmapEffectEvents, @ptrCast(self)), p_effect_, p_rect_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (6)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BSTR = @import("../foundation.zig").BSTR;
const HRESULT = @import("../foundation.zig").HRESULT;
const IUnknown = @import("../system/com.zig").IUnknown;
const IWICBitmapSource = @import("../graphics/imaging.zig").IWICBitmapSource;
const MilMatrix3x2D = @import("../graphics/dwm.zig").MilMatrix3x2D;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
