//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (333)
//--------------------------------------------------------------------------------
pub const MICROSOFT_URL_EXPERIENCE_PROPERTY = "Microsoft TIP URL Experience";
pub const MICROSOFT_TIP_NO_INSERT_BUTTON_PROPERTY = "Microsoft TIP No Insert Option";
pub const MICROSOFT_TIP_COMBOBOXLIST_PROPERTY = "Microsoft TIP ComboBox List Window Identifier";
pub const MICROSOFT_TIP_OPENING_MSG = "TabletInputPanelOpening";
pub const SAFE_PARTIAL = @as(u32, 1);
pub const BEST_COMPLETE = @as(u32, 2);
pub const MAX_VENDORNAME = @as(u32, 32);
pub const MAX_FRIENDLYNAME = @as(u32, 64);
pub const MAX_LANGUAGES = @as(u32, 64);
pub const CAC_FULL = @as(u32, 0);
pub const CAC_PREFIX = @as(u32, 1);
pub const CAC_RANDOM = @as(u32, 2);
pub const ASYNC_RECO_INTERRUPTED = @as(u32, 1);
pub const ASYNC_RECO_PROCESS_FAILED = @as(u32, 2);
pub const ASYNC_RECO_ADDSTROKE_FAILED = @as(u32, 4);
pub const ASYNC_RECO_SETCACMODE_FAILED = @as(u32, 8);
pub const ASYNC_RECO_RESETCONTEXT_FAILED = @as(u32, 16);
pub const ASYNC_RECO_SETGUIDE_FAILED = @as(u32, 32);
pub const ASYNC_RECO_SETFLAGS_FAILED = @as(u32, 64);
pub const ASYNC_RECO_SETFACTOID_FAILED = @as(u32, 128);
pub const ASYNC_RECO_SETTEXTCONTEXT_FAILED = @as(u32, 256);
pub const ASYNC_RECO_SETWORDLIST_FAILED = @as(u32, 512);
pub const RF_DONTCARE = @as(i32, 1);
pub const RF_OBJECT = @as(i32, 2);
pub const RF_FREE_INPUT = @as(i32, 4);
pub const RF_LINED_INPUT = @as(i32, 8);
pub const RF_BOXED_INPUT = @as(i32, 16);
pub const RF_CAC_INPUT = @as(i32, 32);
pub const RF_RIGHT_AND_DOWN = @as(i32, 64);
pub const RF_LEFT_AND_DOWN = @as(i32, 128);
pub const RF_DOWN_AND_LEFT = @as(i32, 256);
pub const RF_DOWN_AND_RIGHT = @as(i32, 512);
pub const RF_ARBITRARY_ANGLE = @as(i32, 1024);
pub const RF_LATTICE = @as(i32, 2048);
pub const RF_ADVISEINKCHANGE = @as(i32, 4096);
pub const RF_STROKEREORDER = @as(i32, 8192);
pub const RF_PERSONALIZABLE = @as(i32, 16384);
pub const RF_PERFORMSLINEBREAKING = @as(i32, 65536);
pub const RF_REQUIRESSEGMENTATIONBREAKING = @as(i32, 131072);
pub const FLICK_WM_HANDLED_MASK = @as(u32, 1);
pub const NUM_FLICK_DIRECTIONS = @as(u32, 8);
pub const WM_TABLET_DEFBASE = @as(u32, 704);
pub const WM_TABLET_MAXOFFSET = @as(u32, 32);
pub const WM_TABLET_ADDED = @as(u32, 712);
pub const WM_TABLET_DELETED = @as(u32, 713);
pub const WM_TABLET_FLICK = @as(u32, 715);
pub const WM_TABLET_QUERYSYSTEMGESTURESTATUS = @as(u32, 716);
pub const TABLET_DISABLE_PRESSANDHOLD = @as(u32, 1);
pub const TABLET_DISABLE_PENTAPFEEDBACK = @as(u32, 8);
pub const TABLET_DISABLE_PENBARRELFEEDBACK = @as(u32, 16);
pub const TABLET_DISABLE_TOUCHUIFORCEON = @as(u32, 256);
pub const TABLET_DISABLE_TOUCHUIFORCEOFF = @as(u32, 512);
pub const TABLET_DISABLE_TOUCHSWITCH = @as(u32, 32768);
pub const TABLET_DISABLE_FLICKS = @as(u32, 65536);
pub const TABLET_ENABLE_FLICKSONCONTEXT = @as(u32, 131072);
pub const TABLET_ENABLE_FLICKLEARNINGMODE = @as(u32, 262144);
pub const TABLET_DISABLE_SMOOTHSCROLLING = @as(u32, 524288);
pub const TABLET_DISABLE_FLICKFALLBACKKEYS = @as(u32, 1048576);
pub const TABLET_ENABLE_MULTITOUCHDATA = @as(u32, 16777216);
pub const MAX_PACKET_PROPERTY_COUNT = @as(u32, 32);
pub const MAX_PACKET_BUTTON_COUNT = @as(u32, 32);
pub const IP_CURSOR_DOWN = @as(u32, 1);
pub const IP_INVERTED = @as(u32, 2);
pub const IP_MARGIN = @as(u32, 4);
pub const INK_SERIALIZED_FORMAT = "Ink Serialized Format";
pub const STR_GUID_X = "{598A6A8F-52C0-4BA0-93AF-AF357411A561}";
pub const STR_GUID_Y = "{B53F9F75-04E0-4498-A7EE-C30DBB5A9011}";
pub const STR_GUID_Z = "{735ADB30-0EBB-4788-A0E4-0F316490055D}";
pub const STR_GUID_PAKETSTATUS = "{6E0E07BF-AFE7-4CF7-87D1-AF6446208418}";
pub const STR_GUID_TIMERTICK = "{436510C5-FED3-45D1-8B76-71D3EA7A829D}";
pub const STR_GUID_SERIALNUMBER = "{78A81B56-0935-4493-BAAE-00541A8A16C4}";
pub const STR_GUID_NORMALPRESSURE = "{7307502D-F9F4-4E18-B3F2-2CE1B1A3610C}";
pub const STR_GUID_TANGENTPRESSURE = "{6DA4488B-5244-41EC-905B-32D89AB80809}";
pub const STR_GUID_BUTTONPRESSURE = "{8B7FEFC4-96AA-4BFE-AC26-8A5F0BE07BF5}";
pub const STR_GUID_XTILTORIENTATION = "{A8D07B3A-8BF0-40B0-95A9-B80A6BB787BF}";
pub const STR_GUID_YTILTORIENTATION = "{0E932389-1D77-43AF-AC00-5B950D6D4B2D}";
pub const STR_GUID_AZIMUTHORIENTATION = "{029123B4-8828-410B-B250-A0536595E5DC}";
pub const STR_GUID_ALTITUDEORIENTATION = "{82DEC5C7-F6BA-4906-894F-66D68DFC456C}";
pub const STR_GUID_TWISTORIENTATION = "{0D324960-13B2-41E4-ACE6-7AE9D43D2D3B}";
pub const STR_GUID_PITCHROTATION = "{7F7E57B7-BE37-4BE1-A356-7A84160E1893}";
pub const STR_GUID_ROLLROTATION = "{5D5D5E56-6BA9-4C5B-9FB0-851C91714E56}";
pub const STR_GUID_YAWROTATION = "{6A849980-7C3A-45B7-AA82-90A262950E89}";
pub const STR_GUID_WIDTH = "{BAABE94D-2712-48F5-BE9D-8F8B5EA0711A}";
pub const STR_GUID_HEIGHT = "{E61858D2-E447-4218-9D3F-18865C203DF4}";
pub const STR_GUID_FINGERCONTACTCONFIDENCE = "{E706C804-57F0-4F00-8A0C-853D57789BE9}";
pub const STR_GUID_DEVICE_CONTACT_ID = "{02585B91-049B-4750-9615-DF8948AB3C9C}";
pub const INKRECOGNITIONPROPERTY_LINENUMBER = "{DBF29F2C-5289-4BE8-B3D8-6EF63246253E}";
pub const INKRECOGNITIONPROPERTY_BOXNUMBER = "{2C243E3A-F733-4EB6-B1F8-B5DC5C2C4CDA}";
pub const INKRECOGNITIONPROPERTY_SEGMENTATION = "{B3C0FE6C-FB51-4164-BA2F-844AF8F983DA}";
pub const INKRECOGNITIONPROPERTY_HOTPOINT = "{CA6F40DC-5292-452a-91FB-2181C0BEC0DE}";
pub const INKRECOGNITIONPROPERTY_MAXIMUMSTROKECOUNT = "{BF0EEC4E-4B7D-47a9-8CFA-234DD24BD22A}";
pub const INKRECOGNITIONPROPERTY_POINTSPERINCH = "{7ED16B76-889C-468e-8276-0021B770187E}";
pub const INKRECOGNITIONPROPERTY_CONFIDENCELEVEL = "{7DFE11A7-FB5D-4958-8765-154ADF0D833F}";
pub const INKRECOGNITIONPROPERTY_LINEMETRICS = "{8CC24B27-30A9-4b96-9056-2D3A90DA0727}";
pub const FACTOID_NONE = "NONE";
pub const FACTOID_DEFAULT = "DEFAULT";
pub const FACTOID_SYSTEMDICTIONARY = "SYSDICT";
pub const FACTOID_WORDLIST = "WORDLIST";
pub const FACTOID_EMAIL = "EMAIL";
pub const FACTOID_WEB = "WEB";
pub const FACTOID_ONECHAR = "ONECHAR";
pub const FACTOID_NUMBER = "NUMBER";
pub const FACTOID_DIGIT = "DIGIT";
pub const FACTOID_NUMBERSIMPLE = "NUMSIMPLE";
pub const FACTOID_CURRENCY = "CURRENCY";
pub const FACTOID_POSTALCODE = "POSTALCODE";
pub const FACTOID_PERCENT = "PERCENT";
pub const FACTOID_DATE = "DATE";
pub const FACTOID_TIME = "TIME";
pub const FACTOID_TELEPHONE = "TELEPHONE";
pub const FACTOID_FILENAME = "FILENAME";
pub const FACTOID_UPPERCHAR = "UPPERCHAR";
pub const FACTOID_LOWERCHAR = "LOWERCHAR";
pub const FACTOID_PUNCCHAR = "PUNCCHAR";
pub const FACTOID_JAPANESECOMMON = "JPN_COMMON";
pub const FACTOID_CHINESESIMPLECOMMON = "CHS_COMMON";
pub const FACTOID_CHINESETRADITIONALCOMMON = "CHT_COMMON";
pub const FACTOID_KOREANCOMMON = "KOR_COMMON";
pub const FACTOID_HIRAGANA = "HIRAGANA";
pub const FACTOID_KATAKANA = "KATAKANA";
pub const FACTOID_KANJICOMMON = "KANJI_COMMON";
pub const FACTOID_KANJIRARE = "KANJI_RARE";
pub const FACTOID_BOPOMOFO = "BOPOMOFO";
pub const FACTOID_JAMO = "JAMO";
pub const FACTOID_HANGULCOMMON = "HANGUL_COMMON";
pub const FACTOID_HANGULRARE = "HANGUL_RARE";
pub const MICROSOFT_PENINPUT_PANEL_PROPERTY_T = "Microsoft PenInputPanel 1.5";
pub const INKEDIT_CLASSW = "INKEDIT";
pub const INKEDIT_CLASS = "INKEDIT";
pub const IEC__BASE = @as(u32, 1536);
pub const EM_GETINKMODE = @as(u32, 1537);
pub const EM_SETINKMODE = @as(u32, 1538);
pub const EM_GETINKINSERTMODE = @as(u32, 1539);
pub const EM_SETINKINSERTMODE = @as(u32, 1540);
pub const EM_GETDRAWATTR = @as(u32, 1541);
pub const EM_SETDRAWATTR = @as(u32, 1542);
pub const EM_GETRECOTIMEOUT = @as(u32, 1543);
pub const EM_SETRECOTIMEOUT = @as(u32, 1544);
pub const EM_GETGESTURESTATUS = @as(u32, 1545);
pub const EM_SETGESTURESTATUS = @as(u32, 1546);
pub const EM_GETRECOGNIZER = @as(u32, 1547);
pub const EM_SETRECOGNIZER = @as(u32, 1548);
pub const EM_GETFACTOID = @as(u32, 1549);
pub const EM_SETFACTOID = @as(u32, 1550);
pub const EM_GETSELINK = @as(u32, 1551);
pub const EM_SETSELINK = @as(u32, 1552);
pub const EM_GETMOUSEICON = @as(u32, 1553);
pub const EM_SETMOUSEICON = @as(u32, 1554);
pub const EM_GETMOUSEPOINTER = @as(u32, 1555);
pub const EM_SETMOUSEPOINTER = @as(u32, 1556);
pub const EM_GETSTATUS = @as(u32, 1557);
pub const EM_RECOGNIZE = @as(u32, 1558);
pub const EM_GETUSEMOUSEFORINPUT = @as(u32, 1559);
pub const EM_SETUSEMOUSEFORINPUT = @as(u32, 1560);
pub const EM_SETSELINKDISPLAYMODE = @as(u32, 1561);
pub const EM_GETSELINKDISPLAYMODE = @as(u32, 1562);
pub const IECN__BASE = @as(u32, 2048);
pub const IECN_STROKE = @as(u32, 2049);
pub const IECN_GESTURE = @as(u32, 2050);
pub const IECN_RECOGNITIONRESULT = @as(u32, 2051);
pub const RECOFLAG_WORDMODE = @as(u32, 1);
pub const RECOFLAG_COERCE = @as(u32, 2);
pub const RECOFLAG_SINGLESEG = @as(u32, 4);
pub const RECOFLAG_PREFIXOK = @as(u32, 8);
pub const RECOFLAG_LINEMODE = @as(u32, 16);
pub const RECOFLAG_DISABLEPERSONALIZATION = @as(u32, 32);
pub const RECOFLAG_AUTOSPACE = @as(u32, 64);
pub const RECOCONF_LOWCONFIDENCE = @as(i32, -1);
pub const RECOCONF_MEDIUMCONFIDENCE = @as(u32, 0);
pub const RECOCONF_HIGHCONFIDENCE = @as(u32, 1);
pub const RECOCONF_NOTSET = @as(u32, 128);
pub const GESTURE_NULL = @as(u32, 61440);
pub const GESTURE_SCRATCHOUT = @as(u32, 61441);
pub const GESTURE_TRIANGLE = @as(u32, 61442);
pub const GESTURE_SQUARE = @as(u32, 61443);
pub const GESTURE_STAR = @as(u32, 61444);
pub const GESTURE_CHECK = @as(u32, 61445);
pub const GESTURE_INFINITY = @as(u32, 61446);
pub const GESTURE_CROSS = @as(u32, 61447);
pub const GESTURE_PARAGRAPH = @as(u32, 61448);
pub const GESTURE_SECTION = @as(u32, 61449);
pub const GESTURE_BULLET = @as(u32, 61450);
pub const GESTURE_BULLET_CROSS = @as(u32, 61451);
pub const GESTURE_SQUIGGLE = @as(u32, 61452);
pub const GESTURE_SWAP = @as(u32, 61453);
pub const GESTURE_OPENUP = @as(u32, 61454);
pub const GESTURE_CLOSEUP = @as(u32, 61455);
pub const GESTURE_CURLICUE = @as(u32, 61456);
pub const GESTURE_DOUBLE_CURLICUE = @as(u32, 61457);
pub const GESTURE_RECTANGLE = @as(u32, 61458);
pub const GESTURE_CIRCLE = @as(u32, 61472);
pub const GESTURE_DOUBLE_CIRCLE = @as(u32, 61473);
pub const GESTURE_CIRCLE_TAP = @as(u32, 61474);
pub const GESTURE_CIRCLE_CIRCLE = @as(u32, 61475);
pub const GESTURE_CIRCLE_CROSS = @as(u32, 61477);
pub const GESTURE_CIRCLE_LINE_VERT = @as(u32, 61478);
pub const GESTURE_CIRCLE_LINE_HORZ = @as(u32, 61479);
pub const GESTURE_SEMICIRCLE_LEFT = @as(u32, 61480);
pub const GESTURE_SEMICIRCLE_RIGHT = @as(u32, 61481);
pub const GESTURE_CHEVRON_UP = @as(u32, 61488);
pub const GESTURE_CHEVRON_DOWN = @as(u32, 61489);
pub const GESTURE_CHEVRON_LEFT = @as(u32, 61490);
pub const GESTURE_CHEVRON_RIGHT = @as(u32, 61491);
pub const GESTURE_ARROW_UP = @as(u32, 61496);
pub const GESTURE_ARROW_DOWN = @as(u32, 61497);
pub const GESTURE_ARROW_LEFT = @as(u32, 61498);
pub const GESTURE_ARROW_RIGHT = @as(u32, 61499);
pub const GESTURE_DOUBLE_ARROW_UP = @as(u32, 61500);
pub const GESTURE_DOUBLE_ARROW_DOWN = @as(u32, 61501);
pub const GESTURE_DOUBLE_ARROW_LEFT = @as(u32, 61502);
pub const GESTURE_DOUBLE_ARROW_RIGHT = @as(u32, 61503);
pub const GESTURE_UP_ARROW_LEFT = @as(u32, 61504);
pub const GESTURE_UP_ARROW_RIGHT = @as(u32, 61505);
pub const GESTURE_DOWN_ARROW_LEFT = @as(u32, 61506);
pub const GESTURE_DOWN_ARROW_RIGHT = @as(u32, 61507);
pub const GESTURE_LEFT_ARROW_UP = @as(u32, 61508);
pub const GESTURE_LEFT_ARROW_DOWN = @as(u32, 61509);
pub const GESTURE_RIGHT_ARROW_UP = @as(u32, 61510);
pub const GESTURE_RIGHT_ARROW_DOWN = @as(u32, 61511);
pub const GESTURE_UP = @as(u32, 61528);
pub const GESTURE_DOWN = @as(u32, 61529);
pub const GESTURE_LEFT = @as(u32, 61530);
pub const GESTURE_RIGHT = @as(u32, 61531);
pub const GESTURE_DIAGONAL_LEFTUP = @as(u32, 61532);
pub const GESTURE_DIAGONAL_RIGHTUP = @as(u32, 61533);
pub const GESTURE_DIAGONAL_LEFTDOWN = @as(u32, 61534);
pub const GESTURE_DIAGONAL_RIGHTDOWN = @as(u32, 61535);
pub const GESTURE_UP_DOWN = @as(u32, 61536);
pub const GESTURE_DOWN_UP = @as(u32, 61537);
pub const GESTURE_LEFT_RIGHT = @as(u32, 61538);
pub const GESTURE_RIGHT_LEFT = @as(u32, 61539);
pub const GESTURE_UP_LEFT_LONG = @as(u32, 61540);
pub const GESTURE_UP_RIGHT_LONG = @as(u32, 61541);
pub const GESTURE_DOWN_LEFT_LONG = @as(u32, 61542);
pub const GESTURE_DOWN_RIGHT_LONG = @as(u32, 61543);
pub const GESTURE_UP_LEFT = @as(u32, 61544);
pub const GESTURE_UP_RIGHT = @as(u32, 61545);
pub const GESTURE_DOWN_LEFT = @as(u32, 61546);
pub const GESTURE_DOWN_RIGHT = @as(u32, 61547);
pub const GESTURE_LEFT_UP = @as(u32, 61548);
pub const GESTURE_LEFT_DOWN = @as(u32, 61549);
pub const GESTURE_RIGHT_UP = @as(u32, 61550);
pub const GESTURE_RIGHT_DOWN = @as(u32, 61551);
pub const GESTURE_LETTER_A = @as(u32, 61568);
pub const GESTURE_LETTER_B = @as(u32, 61569);
pub const GESTURE_LETTER_C = @as(u32, 61570);
pub const GESTURE_LETTER_D = @as(u32, 61571);
pub const GESTURE_LETTER_E = @as(u32, 61572);
pub const GESTURE_LETTER_F = @as(u32, 61573);
pub const GESTURE_LETTER_G = @as(u32, 61574);
pub const GESTURE_LETTER_H = @as(u32, 61575);
pub const GESTURE_LETTER_I = @as(u32, 61576);
pub const GESTURE_LETTER_J = @as(u32, 61577);
pub const GESTURE_LETTER_K = @as(u32, 61578);
pub const GESTURE_LETTER_L = @as(u32, 61579);
pub const GESTURE_LETTER_M = @as(u32, 61580);
pub const GESTURE_LETTER_N = @as(u32, 61581);
pub const GESTURE_LETTER_O = @as(u32, 61582);
pub const GESTURE_LETTER_P = @as(u32, 61583);
pub const GESTURE_LETTER_Q = @as(u32, 61584);
pub const GESTURE_LETTER_R = @as(u32, 61585);
pub const GESTURE_LETTER_S = @as(u32, 61586);
pub const GESTURE_LETTER_T = @as(u32, 61587);
pub const GESTURE_LETTER_U = @as(u32, 61588);
pub const GESTURE_LETTER_V = @as(u32, 61589);
pub const GESTURE_LETTER_W = @as(u32, 61590);
pub const GESTURE_LETTER_X = @as(u32, 61591);
pub const GESTURE_LETTER_Y = @as(u32, 61592);
pub const GESTURE_LETTER_Z = @as(u32, 61593);
pub const GESTURE_DIGIT_0 = @as(u32, 61594);
pub const GESTURE_DIGIT_1 = @as(u32, 61595);
pub const GESTURE_DIGIT_2 = @as(u32, 61596);
pub const GESTURE_DIGIT_3 = @as(u32, 61597);
pub const GESTURE_DIGIT_4 = @as(u32, 61598);
pub const GESTURE_DIGIT_5 = @as(u32, 61599);
pub const GESTURE_DIGIT_6 = @as(u32, 61600);
pub const GESTURE_DIGIT_7 = @as(u32, 61601);
pub const GESTURE_DIGIT_8 = @as(u32, 61602);
pub const GESTURE_DIGIT_9 = @as(u32, 61603);
pub const GESTURE_EXCLAMATION = @as(u32, 61604);
pub const GESTURE_QUESTION = @as(u32, 61605);
pub const GESTURE_SHARP = @as(u32, 61606);
pub const GESTURE_DOLLAR = @as(u32, 61607);
pub const GESTURE_ASTERISK = @as(u32, 61608);
pub const GESTURE_PLUS = @as(u32, 61609);
pub const GESTURE_DOUBLE_UP = @as(u32, 61624);
pub const GESTURE_DOUBLE_DOWN = @as(u32, 61625);
pub const GESTURE_DOUBLE_LEFT = @as(u32, 61626);
pub const GESTURE_DOUBLE_RIGHT = @as(u32, 61627);
pub const GESTURE_TRIPLE_UP = @as(u32, 61628);
pub const GESTURE_TRIPLE_DOWN = @as(u32, 61629);
pub const GESTURE_TRIPLE_LEFT = @as(u32, 61630);
pub const GESTURE_TRIPLE_RIGHT = @as(u32, 61631);
pub const GESTURE_BRACKET_OVER = @as(u32, 61668);
pub const GESTURE_BRACKET_UNDER = @as(u32, 61669);
pub const GESTURE_BRACKET_LEFT = @as(u32, 61670);
pub const GESTURE_BRACKET_RIGHT = @as(u32, 61671);
pub const GESTURE_BRACE_OVER = @as(u32, 61672);
pub const GESTURE_BRACE_UNDER = @as(u32, 61673);
pub const GESTURE_BRACE_LEFT = @as(u32, 61674);
pub const GESTURE_BRACE_RIGHT = @as(u32, 61675);
pub const GESTURE_TAP = @as(u32, 61680);
pub const GESTURE_DOUBLE_TAP = @as(u32, 61681);
pub const GESTURE_TRIPLE_TAP = @as(u32, 61682);
pub const GESTURE_QUAD_TAP = @as(u32, 61683);
pub const FACILITY_INK = @as(u32, 40);
pub const GUID_PACKETPROPERTY_GUID_X = Guid.initString("598a6a8f-52c0-4ba0-93af-af357411a561");
pub const GUID_PACKETPROPERTY_GUID_Y = Guid.initString("b53f9f75-04e0-4498-a7ee-c30dbb5a9011");
pub const GUID_PACKETPROPERTY_GUID_Z = Guid.initString("735adb30-0ebb-4788-a0e4-0f316490055d");
pub const GUID_PACKETPROPERTY_GUID_PACKET_STATUS = Guid.initString("6e0e07bf-afe7-4cf7-87d1-af6446208418");
pub const GUID_PACKETPROPERTY_GUID_TIMER_TICK = Guid.initString("436510c5-fed3-45d1-8b76-71d3ea7a829d");
pub const GUID_PACKETPROPERTY_GUID_SERIAL_NUMBER = Guid.initString("78a81b56-0935-4493-baae-00541a8a16c4");
pub const GUID_PACKETPROPERTY_GUID_NORMAL_PRESSURE = Guid.initString("7307502d-f9f4-4e18-b3f2-2ce1b1a3610c");
pub const GUID_PACKETPROPERTY_GUID_TANGENT_PRESSURE = Guid.initString("6da4488b-5244-41ec-905b-32d89ab80809");
pub const GUID_PACKETPROPERTY_GUID_BUTTON_PRESSURE = Guid.initString("8b7fefc4-96aa-4bfe-ac26-8a5f0be07bf5");
pub const GUID_PACKETPROPERTY_GUID_X_TILT_ORIENTATION = Guid.initString("a8d07b3a-8bf0-40b0-95a9-b80a6bb787bf");
pub const GUID_PACKETPROPERTY_GUID_Y_TILT_ORIENTATION = Guid.initString("0e932389-1d77-43af-ac00-5b950d6d4b2d");
pub const GUID_PACKETPROPERTY_GUID_AZIMUTH_ORIENTATION = Guid.initString("029123b4-8828-410b-b250-a0536595e5dc");
pub const GUID_PACKETPROPERTY_GUID_ALTITUDE_ORIENTATION = Guid.initString("82dec5c7-f6ba-4906-894f-66d68dfc456c");
pub const GUID_PACKETPROPERTY_GUID_TWIST_ORIENTATION = Guid.initString("0d324960-13b2-41e4-ace6-7ae9d43d2d3b");
pub const GUID_PACKETPROPERTY_GUID_PITCH_ROTATION = Guid.initString("7f7e57b7-be37-4be1-a356-7a84160e1893");
pub const GUID_PACKETPROPERTY_GUID_ROLL_ROTATION = Guid.initString("5d5d5e56-6ba9-4c5b-9fb0-851c91714e56");
pub const GUID_PACKETPROPERTY_GUID_YAW_ROTATION = Guid.initString("6a849980-7c3a-45b7-aa82-90a262950e89");
pub const GUID_PACKETPROPERTY_GUID_WIDTH = Guid.initString("baabe94d-2712-48f5-be9d-8f8b5ea0711a");
pub const GUID_PACKETPROPERTY_GUID_HEIGHT = Guid.initString("e61858d2-e447-4218-9d3f-18865c203df4");
pub const GUID_PACKETPROPERTY_GUID_FINGERCONTACTCONFIDENCE = Guid.initString("e706c804-57f0-4f00-8a0c-853d57789be9");
pub const GUID_PACKETPROPERTY_GUID_DEVICE_CONTACT_ID = Guid.initString("02585b91-049b-4750-9615-df8948ab3c9c");
pub const InkMinTransparencyValue = @as(i32, 0);
pub const InkMaxTransparencyValue = @as(i32, 255);
pub const InkCollectorClipInkToMargin = @as(i32, 0);
pub const InkCollectorDefaultMargin = @as(i32, -2147483648);
pub const GUID_GESTURE_DATA = Guid.initString("41e4ec0f-26aa-455a-9aa5-2cd36cf63fb9");
pub const GUID_DYNAMIC_RENDERER_CACHED_DATA = Guid.initString("bf531b92-25bf-4a95-89ad-0e476b34b4f5");

//--------------------------------------------------------------------------------
// Section: Types (240)
//--------------------------------------------------------------------------------
pub const PfnRecoCallback = *const fn (
    param0: u32,
    param1: ?*u8,
    param2: ?HRECOCONTEXT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HRECOALT = *opaque {};

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HRECOCONTEXT = *opaque {};

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HRECOGNIZER = *opaque {};

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HRECOLATTICE = *opaque {};

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HRECOWORDLIST = *opaque {};

const CLSID_InkDisp_Value = Guid.initString("937c1a34-151d-4610-9ca6-a8cc9bdb5d83");
pub const CLSID_InkDisp = &CLSID_InkDisp_Value;

const CLSID_InkOverlay_Value = Guid.initString("65d00646-cde3-4a88-9163-6769f0f1a97d");
pub const CLSID_InkOverlay = &CLSID_InkOverlay_Value;

const CLSID_InkPicture_Value = Guid.initString("04a1e553-fe36-4fde-865e-344194e69424");
pub const CLSID_InkPicture = &CLSID_InkPicture_Value;

const CLSID_InkCollector_Value = Guid.initString("43fb1553-ad74-4ee8-88e4-3e6daac915db");
pub const CLSID_InkCollector = &CLSID_InkCollector_Value;

const CLSID_InkDrawingAttributes_Value = Guid.initString("d8bf32a2-05a5-44c3-b3aa-5e80ac7d2576");
pub const CLSID_InkDrawingAttributes = &CLSID_InkDrawingAttributes_Value;

const CLSID_InkRectangle_Value = Guid.initString("43b07326-aae0-4b62-a83d-5fd768b7353c");
pub const CLSID_InkRectangle = &CLSID_InkRectangle_Value;

const CLSID_InkRenderer_Value = Guid.initString("9c1cc6e4-d7eb-4eeb-9091-15a7c8791ed9");
pub const CLSID_InkRenderer = &CLSID_InkRenderer_Value;

const CLSID_InkTransform_Value = Guid.initString("e3d5d93c-1663-4a78-a1a7-22375dfebaee");
pub const CLSID_InkTransform = &CLSID_InkTransform_Value;

const CLSID_InkRecognizers_Value = Guid.initString("9fd4e808-f6e6-4e65-98d3-aa39054c1255");
pub const CLSID_InkRecognizers = &CLSID_InkRecognizers_Value;

const CLSID_InkRecognizerContext_Value = Guid.initString("aac46a37-9229-4fc0-8cce-4497569bf4d1");
pub const CLSID_InkRecognizerContext = &CLSID_InkRecognizerContext_Value;

const CLSID_InkRecognizerGuide_Value = Guid.initString("8770d941-a63a-4671-a375-2855a18eba73");
pub const CLSID_InkRecognizerGuide = &CLSID_InkRecognizerGuide_Value;

const CLSID_InkTablets_Value = Guid.initString("6e4fcb12-510a-4d40-9304-1da10ae9147c");
pub const CLSID_InkTablets = &CLSID_InkTablets_Value;

const CLSID_InkWordList_Value = Guid.initString("9de85094-f71f-44f1-8471-15a2fa76fcf3");
pub const CLSID_InkWordList = &CLSID_InkWordList_Value;

const CLSID_InkStrokes_Value = Guid.initString("48f491bc-240e-4860-b079-a1e94d3d2c86");
pub const CLSID_InkStrokes = &CLSID_InkStrokes_Value;

const CLSID_Ink_Value = Guid.initString("13de4a42-8d21-4c8e-bf9c-8f69cb068fca");
pub const CLSID_Ink = &CLSID_Ink_Value;

const CLSID_SketchInk_Value = Guid.initString("f0291081-e87c-4e07-97da-a0a03761e586");
pub const CLSID_SketchInk = &CLSID_SketchInk_Value;

pub const PROPERTY_UNITS = enum(i32) {
    DEFAULT = 0,
    INCHES = 1,
    CENTIMETERS = 2,
    DEGREES = 3,
    RADIANS = 4,
    SECONDS = 5,
    POUNDS = 6,
    GRAMS = 7,
    SILINEAR = 8,
    SIROTATION = 9,
    ENGLINEAR = 10,
    ENGROTATION = 11,
    SLUGS = 12,
    KELVIN = 13,
    FAHRENHEIT = 14,
    AMPERE = 15,
    CANDELA = 16,
};
pub const PROPERTY_UNITS_DEFAULT = PROPERTY_UNITS.DEFAULT;
pub const PROPERTY_UNITS_INCHES = PROPERTY_UNITS.INCHES;
pub const PROPERTY_UNITS_CENTIMETERS = PROPERTY_UNITS.CENTIMETERS;
pub const PROPERTY_UNITS_DEGREES = PROPERTY_UNITS.DEGREES;
pub const PROPERTY_UNITS_RADIANS = PROPERTY_UNITS.RADIANS;
pub const PROPERTY_UNITS_SECONDS = PROPERTY_UNITS.SECONDS;
pub const PROPERTY_UNITS_POUNDS = PROPERTY_UNITS.POUNDS;
pub const PROPERTY_UNITS_GRAMS = PROPERTY_UNITS.GRAMS;
pub const PROPERTY_UNITS_SILINEAR = PROPERTY_UNITS.SILINEAR;
pub const PROPERTY_UNITS_SIROTATION = PROPERTY_UNITS.SIROTATION;
pub const PROPERTY_UNITS_ENGLINEAR = PROPERTY_UNITS.ENGLINEAR;
pub const PROPERTY_UNITS_ENGROTATION = PROPERTY_UNITS.ENGROTATION;
pub const PROPERTY_UNITS_SLUGS = PROPERTY_UNITS.SLUGS;
pub const PROPERTY_UNITS_KELVIN = PROPERTY_UNITS.KELVIN;
pub const PROPERTY_UNITS_FAHRENHEIT = PROPERTY_UNITS.FAHRENHEIT;
pub const PROPERTY_UNITS_AMPERE = PROPERTY_UNITS.AMPERE;
pub const PROPERTY_UNITS_CANDELA = PROPERTY_UNITS.CANDELA;

pub const SYSTEM_EVENT_DATA = extern struct {
    bModifier: u8,
    wKey: u16,
    xPos: i32,
    yPos: i32,
    bCursorMode: u8,
    dwButtonState: u32,
};

pub const STROKE_RANGE = extern struct {
    iStrokeBegin: u32,
    iStrokeEnd: u32,
};

pub const PROPERTY_METRICS = extern struct {
    nLogicalMin: i32,
    nLogicalMax: i32,
    Units: PROPERTY_UNITS,
    fResolution: f32,
};

pub const PACKET_PROPERTY = extern struct {
    guid: Guid,
    PropertyMetrics: PROPERTY_METRICS,
};

pub const PACKET_DESCRIPTION = extern struct {
    cbPacketSize: u32,
    cPacketProperties: u32,
    pPacketProperties: ?*PACKET_PROPERTY,
    cButtons: u32,
    pguidButtons: ?*Guid,
};

pub const enumINKMETRIC_FLAGS = enum(i32) {
    FONT_SELECTED_IN_HDC = 1,
    ITALIC = 2,
    BOLD = 4,
};
pub const IMF_FONT_SELECTED_IN_HDC = enumINKMETRIC_FLAGS.FONT_SELECTED_IN_HDC;
pub const IMF_ITALIC = enumINKMETRIC_FLAGS.ITALIC;
pub const IMF_BOLD = enumINKMETRIC_FLAGS.BOLD;

pub const enumGetCandidateFlags = enum(i32) {
    ALLOW_RECOGNITION = 1,
    FORCE_RECOGNITION = 2,
};
pub const TCF_ALLOW_RECOGNITION = enumGetCandidateFlags.ALLOW_RECOGNITION;
pub const TCF_FORCE_RECOGNITION = enumGetCandidateFlags.FORCE_RECOGNITION;

pub const INKMETRIC = extern struct {
    iHeight: i32,
    iFontAscent: i32,
    iFontDescent: i32,
    dwFlags: u32,
    color: u32,
};

pub const InkSelectionConstants = enum(i32) {
    FirstElement = 0,
    AllElements = -1,
};
pub const ISC_FirstElement = InkSelectionConstants.FirstElement;
pub const ISC_AllElements = InkSelectionConstants.AllElements;

pub const InkBoundingBoxMode = enum(i32) {
    Default = 0,
    NoCurveFit = 1,
    CurveFit = 2,
    PointsOnly = 3,
    Union = 4,
};
pub const IBBM_Default = InkBoundingBoxMode.Default;
pub const IBBM_NoCurveFit = InkBoundingBoxMode.NoCurveFit;
pub const IBBM_CurveFit = InkBoundingBoxMode.CurveFit;
pub const IBBM_PointsOnly = InkBoundingBoxMode.PointsOnly;
pub const IBBM_Union = InkBoundingBoxMode.Union;

pub const InkExtractFlags = enum(i32) {
    CopyFromOriginal = 0,
    RemoveFromOriginal = 1,
    // Default = 1, this enum value conflicts with RemoveFromOriginal
};
pub const IEF_CopyFromOriginal = InkExtractFlags.CopyFromOriginal;
pub const IEF_RemoveFromOriginal = InkExtractFlags.RemoveFromOriginal;
pub const IEF_Default = InkExtractFlags.RemoveFromOriginal;

pub const InkPersistenceFormat = enum(i32) {
    InkSerializedFormat = 0,
    Base64InkSerializedFormat = 1,
    GIF = 2,
    Base64GIF = 3,
};
pub const IPF_InkSerializedFormat = InkPersistenceFormat.InkSerializedFormat;
pub const IPF_Base64InkSerializedFormat = InkPersistenceFormat.Base64InkSerializedFormat;
pub const IPF_GIF = InkPersistenceFormat.GIF;
pub const IPF_Base64GIF = InkPersistenceFormat.Base64GIF;

pub const InkPersistenceCompressionMode = enum(i32) {
    Default = 0,
    MaximumCompression = 1,
    NoCompression = 2,
};
pub const IPCM_Default = InkPersistenceCompressionMode.Default;
pub const IPCM_MaximumCompression = InkPersistenceCompressionMode.MaximumCompression;
pub const IPCM_NoCompression = InkPersistenceCompressionMode.NoCompression;

pub const InkPenTip = enum(i32) {
    Ball = 0,
    Rectangle = 1,
};
pub const IPT_Ball = InkPenTip.Ball;
pub const IPT_Rectangle = InkPenTip.Rectangle;

pub const InkRasterOperation = enum(i32) {
    Black = 1,
    NotMergePen = 2,
    MaskNotPen = 3,
    NotCopyPen = 4,
    MaskPenNot = 5,
    Not = 6,
    XOrPen = 7,
    NotMaskPen = 8,
    MaskPen = 9,
    NotXOrPen = 10,
    NoOperation = 11,
    MergeNotPen = 12,
    CopyPen = 13,
    MergePenNot = 14,
    MergePen = 15,
    White = 16,
};
pub const IRO_Black = InkRasterOperation.Black;
pub const IRO_NotMergePen = InkRasterOperation.NotMergePen;
pub const IRO_MaskNotPen = InkRasterOperation.MaskNotPen;
pub const IRO_NotCopyPen = InkRasterOperation.NotCopyPen;
pub const IRO_MaskPenNot = InkRasterOperation.MaskPenNot;
pub const IRO_Not = InkRasterOperation.Not;
pub const IRO_XOrPen = InkRasterOperation.XOrPen;
pub const IRO_NotMaskPen = InkRasterOperation.NotMaskPen;
pub const IRO_MaskPen = InkRasterOperation.MaskPen;
pub const IRO_NotXOrPen = InkRasterOperation.NotXOrPen;
pub const IRO_NoOperation = InkRasterOperation.NoOperation;
pub const IRO_MergeNotPen = InkRasterOperation.MergeNotPen;
pub const IRO_CopyPen = InkRasterOperation.CopyPen;
pub const IRO_MergePenNot = InkRasterOperation.MergePenNot;
pub const IRO_MergePen = InkRasterOperation.MergePen;
pub const IRO_White = InkRasterOperation.White;

pub const InkMousePointer = enum(i32) {
    Default = 0,
    Arrow = 1,
    Crosshair = 2,
    Ibeam = 3,
    SizeNESW = 4,
    SizeNS = 5,
    SizeNWSE = 6,
    SizeWE = 7,
    UpArrow = 8,
    Hourglass = 9,
    NoDrop = 10,
    ArrowHourglass = 11,
    ArrowQuestion = 12,
    SizeAll = 13,
    Hand = 14,
    Custom = 99,
};
pub const IMP_Default = InkMousePointer.Default;
pub const IMP_Arrow = InkMousePointer.Arrow;
pub const IMP_Crosshair = InkMousePointer.Crosshair;
pub const IMP_Ibeam = InkMousePointer.Ibeam;
pub const IMP_SizeNESW = InkMousePointer.SizeNESW;
pub const IMP_SizeNS = InkMousePointer.SizeNS;
pub const IMP_SizeNWSE = InkMousePointer.SizeNWSE;
pub const IMP_SizeWE = InkMousePointer.SizeWE;
pub const IMP_UpArrow = InkMousePointer.UpArrow;
pub const IMP_Hourglass = InkMousePointer.Hourglass;
pub const IMP_NoDrop = InkMousePointer.NoDrop;
pub const IMP_ArrowHourglass = InkMousePointer.ArrowHourglass;
pub const IMP_ArrowQuestion = InkMousePointer.ArrowQuestion;
pub const IMP_SizeAll = InkMousePointer.SizeAll;
pub const IMP_Hand = InkMousePointer.Hand;
pub const IMP_Custom = InkMousePointer.Custom;

pub const InkClipboardModes = enum(i32) {
    Copy = 0,
    Cut = 1,
    ExtractOnly = 48,
    DelayedCopy = 32,
    // Default = 0, this enum value conflicts with Copy
};
pub const ICB_Copy = InkClipboardModes.Copy;
pub const ICB_Cut = InkClipboardModes.Cut;
pub const ICB_ExtractOnly = InkClipboardModes.ExtractOnly;
pub const ICB_DelayedCopy = InkClipboardModes.DelayedCopy;
pub const ICB_Default = InkClipboardModes.Copy;

pub const InkClipboardFormats = enum(i32) {
    None = 0,
    InkSerializedFormat = 1,
    SketchInk = 2,
    TextInk = 6,
    EnhancedMetafile = 8,
    Metafile = 32,
    Bitmap = 64,
    PasteMask = 7,
    CopyMask = 127,
    // Default = 127, this enum value conflicts with CopyMask
};
pub const ICF_None = InkClipboardFormats.None;
pub const ICF_InkSerializedFormat = InkClipboardFormats.InkSerializedFormat;
pub const ICF_SketchInk = InkClipboardFormats.SketchInk;
pub const ICF_TextInk = InkClipboardFormats.TextInk;
pub const ICF_EnhancedMetafile = InkClipboardFormats.EnhancedMetafile;
pub const ICF_Metafile = InkClipboardFormats.Metafile;
pub const ICF_Bitmap = InkClipboardFormats.Bitmap;
pub const ICF_PasteMask = InkClipboardFormats.PasteMask;
pub const ICF_CopyMask = InkClipboardFormats.CopyMask;
pub const ICF_Default = InkClipboardFormats.CopyMask;

pub const SelectionHitResult = enum(i32) {
    None = 0,
    NW = 1,
    SE = 2,
    NE = 3,
    SW = 4,
    E = 5,
    W = 6,
    N = 7,
    S = 8,
    Selection = 9,
};
pub const SHR_None = SelectionHitResult.None;
pub const SHR_NW = SelectionHitResult.NW;
pub const SHR_SE = SelectionHitResult.SE;
pub const SHR_NE = SelectionHitResult.NE;
pub const SHR_SW = SelectionHitResult.SW;
pub const SHR_E = SelectionHitResult.E;
pub const SHR_W = SelectionHitResult.W;
pub const SHR_N = SelectionHitResult.N;
pub const SHR_S = SelectionHitResult.S;
pub const SHR_Selection = SelectionHitResult.Selection;

pub const InkRecognitionStatus = enum(i32) {
    NoError = 0,
    Interrupted = 1,
    ProcessFailed = 2,
    InkAddedFailed = 4,
    SetAutoCompletionModeFailed = 8,
    SetStrokesFailed = 16,
    SetGuideFailed = 32,
    SetFlagsFailed = 64,
    SetFactoidFailed = 128,
    SetPrefixSuffixFailed = 256,
    SetWordListFailed = 512,
};
pub const IRS_NoError = InkRecognitionStatus.NoError;
pub const IRS_Interrupted = InkRecognitionStatus.Interrupted;
pub const IRS_ProcessFailed = InkRecognitionStatus.ProcessFailed;
pub const IRS_InkAddedFailed = InkRecognitionStatus.InkAddedFailed;
pub const IRS_SetAutoCompletionModeFailed = InkRecognitionStatus.SetAutoCompletionModeFailed;
pub const IRS_SetStrokesFailed = InkRecognitionStatus.SetStrokesFailed;
pub const IRS_SetGuideFailed = InkRecognitionStatus.SetGuideFailed;
pub const IRS_SetFlagsFailed = InkRecognitionStatus.SetFlagsFailed;
pub const IRS_SetFactoidFailed = InkRecognitionStatus.SetFactoidFailed;
pub const IRS_SetPrefixSuffixFailed = InkRecognitionStatus.SetPrefixSuffixFailed;
pub const IRS_SetWordListFailed = InkRecognitionStatus.SetWordListFailed;

pub const DISPID_InkRectangle = enum(i32) {
    Top = 1,
    Left = 2,
    Bottom = 3,
    Right = 4,
    GetRectangle = 5,
    SetRectangle = 6,
    Data = 7,
};
pub const DISPID_IRTop = DISPID_InkRectangle.Top;
pub const DISPID_IRLeft = DISPID_InkRectangle.Left;
pub const DISPID_IRBottom = DISPID_InkRectangle.Bottom;
pub const DISPID_IRRight = DISPID_InkRectangle.Right;
pub const DISPID_IRGetRectangle = DISPID_InkRectangle.GetRectangle;
pub const DISPID_IRSetRectangle = DISPID_InkRectangle.SetRectangle;
pub const DISPID_IRData = DISPID_InkRectangle.Data;

pub const DISPID_InkExtendedProperty = enum(i32) {
    Guid = 1,
    Data = 2,
};
pub const DISPID_IEPGuid = DISPID_InkExtendedProperty.Guid;
pub const DISPID_IEPData = DISPID_InkExtendedProperty.Data;

pub const DISPID_InkExtendedProperties = enum(i32) {
    _NewEnum = -4,
    Item = 0,
    Count = 1,
    Add = 2,
    Remove = 3,
    Clear = 4,
    DoesPropertyExist = 5,
};
pub const DISPID_IEPs_NewEnum = DISPID_InkExtendedProperties._NewEnum;
pub const DISPID_IEPsItem = DISPID_InkExtendedProperties.Item;
pub const DISPID_IEPsCount = DISPID_InkExtendedProperties.Count;
pub const DISPID_IEPsAdd = DISPID_InkExtendedProperties.Add;
pub const DISPID_IEPsRemove = DISPID_InkExtendedProperties.Remove;
pub const DISPID_IEPsClear = DISPID_InkExtendedProperties.Clear;
pub const DISPID_IEPsDoesPropertyExist = DISPID_InkExtendedProperties.DoesPropertyExist;

pub const DISPID_InkDrawingAttributes = enum(i32) {
    Height = 1,
    Color = 2,
    Width = 3,
    FitToCurve = 4,
    IgnorePressure = 5,
    AntiAliased = 6,
    Transparency = 7,
    RasterOperation = 8,
    PenTip = 9,
    Clone = 10,
    ExtendedProperties = 11,
};
pub const DISPID_DAHeight = DISPID_InkDrawingAttributes.Height;
pub const DISPID_DAColor = DISPID_InkDrawingAttributes.Color;
pub const DISPID_DAWidth = DISPID_InkDrawingAttributes.Width;
pub const DISPID_DAFitToCurve = DISPID_InkDrawingAttributes.FitToCurve;
pub const DISPID_DAIgnorePressure = DISPID_InkDrawingAttributes.IgnorePressure;
pub const DISPID_DAAntiAliased = DISPID_InkDrawingAttributes.AntiAliased;
pub const DISPID_DATransparency = DISPID_InkDrawingAttributes.Transparency;
pub const DISPID_DARasterOperation = DISPID_InkDrawingAttributes.RasterOperation;
pub const DISPID_DAPenTip = DISPID_InkDrawingAttributes.PenTip;
pub const DISPID_DAClone = DISPID_InkDrawingAttributes.Clone;
pub const DISPID_DAExtendedProperties = DISPID_InkDrawingAttributes.ExtendedProperties;

pub const DISPID_InkTransform = enum(i32) {
    Reset = 1,
    Translate = 2,
    Rotate = 3,
    Reflect = 4,
    Shear = 5,
    Scale = 6,
    eM11 = 7,
    eM12 = 8,
    eM21 = 9,
    eM22 = 10,
    eDx = 11,
    eDy = 12,
    GetTransform = 13,
    SetTransform = 14,
    Data = 15,
};
pub const DISPID_ITReset = DISPID_InkTransform.Reset;
pub const DISPID_ITTranslate = DISPID_InkTransform.Translate;
pub const DISPID_ITRotate = DISPID_InkTransform.Rotate;
pub const DISPID_ITReflect = DISPID_InkTransform.Reflect;
pub const DISPID_ITShear = DISPID_InkTransform.Shear;
pub const DISPID_ITScale = DISPID_InkTransform.Scale;
pub const DISPID_ITeM11 = DISPID_InkTransform.eM11;
pub const DISPID_ITeM12 = DISPID_InkTransform.eM12;
pub const DISPID_ITeM21 = DISPID_InkTransform.eM21;
pub const DISPID_ITeM22 = DISPID_InkTransform.eM22;
pub const DISPID_ITeDx = DISPID_InkTransform.eDx;
pub const DISPID_ITeDy = DISPID_InkTransform.eDy;
pub const DISPID_ITGetTransform = DISPID_InkTransform.GetTransform;
pub const DISPID_ITSetTransform = DISPID_InkTransform.SetTransform;
pub const DISPID_ITData = DISPID_InkTransform.Data;

pub const InkApplicationGesture = enum(i32) {
    AllGestures = 0,
    NoGesture = 61440,
    Scratchout = 61441,
    Triangle = 61442,
    Square = 61443,
    Star = 61444,
    Check = 61445,
    Curlicue = 61456,
    DoubleCurlicue = 61457,
    Circle = 61472,
    DoubleCircle = 61473,
    SemiCircleLeft = 61480,
    SemiCircleRight = 61481,
    ChevronUp = 61488,
    ChevronDown = 61489,
    ChevronLeft = 61490,
    ChevronRight = 61491,
    ArrowUp = 61496,
    ArrowDown = 61497,
    ArrowLeft = 61498,
    ArrowRight = 61499,
    Up = 61528,
    Down = 61529,
    Left = 61530,
    Right = 61531,
    UpDown = 61536,
    DownUp = 61537,
    LeftRight = 61538,
    RightLeft = 61539,
    UpLeftLong = 61540,
    UpRightLong = 61541,
    DownLeftLong = 61542,
    DownRightLong = 61543,
    UpLeft = 61544,
    UpRight = 61545,
    DownLeft = 61546,
    DownRight = 61547,
    LeftUp = 61548,
    LeftDown = 61549,
    RightUp = 61550,
    RightDown = 61551,
    Exclamation = 61604,
    Tap = 61680,
    DoubleTap = 61681,
};
pub const IAG_AllGestures = InkApplicationGesture.AllGestures;
pub const IAG_NoGesture = InkApplicationGesture.NoGesture;
pub const IAG_Scratchout = InkApplicationGesture.Scratchout;
pub const IAG_Triangle = InkApplicationGesture.Triangle;
pub const IAG_Square = InkApplicationGesture.Square;
pub const IAG_Star = InkApplicationGesture.Star;
pub const IAG_Check = InkApplicationGesture.Check;
pub const IAG_Curlicue = InkApplicationGesture.Curlicue;
pub const IAG_DoubleCurlicue = InkApplicationGesture.DoubleCurlicue;
pub const IAG_Circle = InkApplicationGesture.Circle;
pub const IAG_DoubleCircle = InkApplicationGesture.DoubleCircle;
pub const IAG_SemiCircleLeft = InkApplicationGesture.SemiCircleLeft;
pub const IAG_SemiCircleRight = InkApplicationGesture.SemiCircleRight;
pub const IAG_ChevronUp = InkApplicationGesture.ChevronUp;
pub const IAG_ChevronDown = InkApplicationGesture.ChevronDown;
pub const IAG_ChevronLeft = InkApplicationGesture.ChevronLeft;
pub const IAG_ChevronRight = InkApplicationGesture.ChevronRight;
pub const IAG_ArrowUp = InkApplicationGesture.ArrowUp;
pub const IAG_ArrowDown = InkApplicationGesture.ArrowDown;
pub const IAG_ArrowLeft = InkApplicationGesture.ArrowLeft;
pub const IAG_ArrowRight = InkApplicationGesture.ArrowRight;
pub const IAG_Up = InkApplicationGesture.Up;
pub const IAG_Down = InkApplicationGesture.Down;
pub const IAG_Left = InkApplicationGesture.Left;
pub const IAG_Right = InkApplicationGesture.Right;
pub const IAG_UpDown = InkApplicationGesture.UpDown;
pub const IAG_DownUp = InkApplicationGesture.DownUp;
pub const IAG_LeftRight = InkApplicationGesture.LeftRight;
pub const IAG_RightLeft = InkApplicationGesture.RightLeft;
pub const IAG_UpLeftLong = InkApplicationGesture.UpLeftLong;
pub const IAG_UpRightLong = InkApplicationGesture.UpRightLong;
pub const IAG_DownLeftLong = InkApplicationGesture.DownLeftLong;
pub const IAG_DownRightLong = InkApplicationGesture.DownRightLong;
pub const IAG_UpLeft = InkApplicationGesture.UpLeft;
pub const IAG_UpRight = InkApplicationGesture.UpRight;
pub const IAG_DownLeft = InkApplicationGesture.DownLeft;
pub const IAG_DownRight = InkApplicationGesture.DownRight;
pub const IAG_LeftUp = InkApplicationGesture.LeftUp;
pub const IAG_LeftDown = InkApplicationGesture.LeftDown;
pub const IAG_RightUp = InkApplicationGesture.RightUp;
pub const IAG_RightDown = InkApplicationGesture.RightDown;
pub const IAG_Exclamation = InkApplicationGesture.Exclamation;
pub const IAG_Tap = InkApplicationGesture.Tap;
pub const IAG_DoubleTap = InkApplicationGesture.DoubleTap;

pub const InkSystemGesture = enum(i32) {
    Tap = 16,
    DoubleTap = 17,
    RightTap = 18,
    Drag = 19,
    RightDrag = 20,
    HoldEnter = 21,
    HoldLeave = 22,
    HoverEnter = 23,
    HoverLeave = 24,
    Flick = 31,
};
pub const ISG_Tap = InkSystemGesture.Tap;
pub const ISG_DoubleTap = InkSystemGesture.DoubleTap;
pub const ISG_RightTap = InkSystemGesture.RightTap;
pub const ISG_Drag = InkSystemGesture.Drag;
pub const ISG_RightDrag = InkSystemGesture.RightDrag;
pub const ISG_HoldEnter = InkSystemGesture.HoldEnter;
pub const ISG_HoldLeave = InkSystemGesture.HoldLeave;
pub const ISG_HoverEnter = InkSystemGesture.HoverEnter;
pub const ISG_HoverLeave = InkSystemGesture.HoverLeave;
pub const ISG_Flick = InkSystemGesture.Flick;

pub const InkRecognitionConfidence = enum(i32) {
    Strong = 0,
    Intermediate = 1,
    Poor = 2,
};
pub const IRC_Strong = InkRecognitionConfidence.Strong;
pub const IRC_Intermediate = InkRecognitionConfidence.Intermediate;
pub const IRC_Poor = InkRecognitionConfidence.Poor;

pub const DISPID_InkGesture = enum(i32) {
    Id = 0,
    GetHotPoint = 1,
    Confidence = 2,
};
pub const DISPID_IGId = DISPID_InkGesture.Id;
pub const DISPID_IGGetHotPoint = DISPID_InkGesture.GetHotPoint;
pub const DISPID_IGConfidence = DISPID_InkGesture.Confidence;

pub const DISPID_InkCursor = enum(i32) {
    Name = 0,
    Id = 1,
    DrawingAttributes = 2,
    Buttons = 3,
    Inverted = 4,
    Tablet = 5,
};
pub const DISPID_ICsrName = DISPID_InkCursor.Name;
pub const DISPID_ICsrId = DISPID_InkCursor.Id;
pub const DISPID_ICsrDrawingAttributes = DISPID_InkCursor.DrawingAttributes;
pub const DISPID_ICsrButtons = DISPID_InkCursor.Buttons;
pub const DISPID_ICsrInverted = DISPID_InkCursor.Inverted;
pub const DISPID_ICsrTablet = DISPID_InkCursor.Tablet;

pub const DISPID_InkCursors = enum(i32) {
    _NewEnum = -4,
    Item = 0,
    Count = 1,
};
pub const DISPID_ICs_NewEnum = DISPID_InkCursors._NewEnum;
pub const DISPID_ICsItem = DISPID_InkCursors.Item;
pub const DISPID_ICsCount = DISPID_InkCursors.Count;

pub const InkCursorButtonState = enum(i32) {
    Unavailable = 0,
    Up = 1,
    Down = 2,
};
pub const ICBS_Unavailable = InkCursorButtonState.Unavailable;
pub const ICBS_Up = InkCursorButtonState.Up;
pub const ICBS_Down = InkCursorButtonState.Down;

pub const DISPID_InkCursorButton = enum(i32) {
    Name = 0,
    Id = 1,
    State = 2,
};
pub const DISPID_ICBName = DISPID_InkCursorButton.Name;
pub const DISPID_ICBId = DISPID_InkCursorButton.Id;
pub const DISPID_ICBState = DISPID_InkCursorButton.State;

pub const DISPID_InkCursorButtons = enum(i32) {
    _NewEnum = -4,
    Item = 0,
    Count = 1,
};
pub const DISPID_ICBs_NewEnum = DISPID_InkCursorButtons._NewEnum;
pub const DISPID_ICBsItem = DISPID_InkCursorButtons.Item;
pub const DISPID_ICBsCount = DISPID_InkCursorButtons.Count;

pub const TabletHardwareCapabilities = enum(i32) {
    Integrated = 1,
    CursorMustTouch = 2,
    HardProximity = 4,
    CursorsHavePhysicalIds = 8,
};
pub const THWC_Integrated = TabletHardwareCapabilities.Integrated;
pub const THWC_CursorMustTouch = TabletHardwareCapabilities.CursorMustTouch;
pub const THWC_HardProximity = TabletHardwareCapabilities.HardProximity;
pub const THWC_CursorsHavePhysicalIds = TabletHardwareCapabilities.CursorsHavePhysicalIds;

pub const TabletPropertyMetricUnit = enum(i32) {
    Default = 0,
    Inches = 1,
    Centimeters = 2,
    Degrees = 3,
    Radians = 4,
    Seconds = 5,
    Pounds = 6,
    Grams = 7,
};
pub const TPMU_Default = TabletPropertyMetricUnit.Default;
pub const TPMU_Inches = TabletPropertyMetricUnit.Inches;
pub const TPMU_Centimeters = TabletPropertyMetricUnit.Centimeters;
pub const TPMU_Degrees = TabletPropertyMetricUnit.Degrees;
pub const TPMU_Radians = TabletPropertyMetricUnit.Radians;
pub const TPMU_Seconds = TabletPropertyMetricUnit.Seconds;
pub const TPMU_Pounds = TabletPropertyMetricUnit.Pounds;
pub const TPMU_Grams = TabletPropertyMetricUnit.Grams;

pub const DISPID_InkTablet = enum(i32) {
    Name = 0,
    PlugAndPlayId = 1,
    PropertyMetrics = 2,
    IsPacketPropertySupported = 3,
    MaximumInputRectangle = 4,
    HardwareCapabilities = 5,
};
pub const DISPID_ITName = DISPID_InkTablet.Name;
pub const DISPID_ITPlugAndPlayId = DISPID_InkTablet.PlugAndPlayId;
pub const DISPID_ITPropertyMetrics = DISPID_InkTablet.PropertyMetrics;
pub const DISPID_ITIsPacketPropertySupported = DISPID_InkTablet.IsPacketPropertySupported;
pub const DISPID_ITMaximumInputRectangle = DISPID_InkTablet.MaximumInputRectangle;
pub const DISPID_ITHardwareCapabilities = DISPID_InkTablet.HardwareCapabilities;

pub const TabletDeviceKind = enum(i32) {
    Mouse = 0,
    Pen = 1,
    Touch = 2,
};
pub const TDK_Mouse = TabletDeviceKind.Mouse;
pub const TDK_Pen = TabletDeviceKind.Pen;
pub const TDK_Touch = TabletDeviceKind.Touch;

pub const DISPID_InkTablet2 = enum(i32) {
    d = 0,
};
pub const DISPID_IT2DeviceKind = DISPID_InkTablet2.d;

pub const DISPID_InkTablet3 = enum(i32) {
    IsMultiTouch = 0,
    MaximumCursors = 1,
};
pub const DISPID_IT3IsMultiTouch = DISPID_InkTablet3.IsMultiTouch;
pub const DISPID_IT3MaximumCursors = DISPID_InkTablet3.MaximumCursors;

pub const DISPID_InkTablets = enum(i32) {
    _NewEnum = -4,
    Item = 0,
    DefaultTablet = 1,
    Count = 2,
    IsPacketPropertySupported = 3,
};
pub const DISPID_ITs_NewEnum = DISPID_InkTablets._NewEnum;
pub const DISPID_ITsItem = DISPID_InkTablets.Item;
pub const DISPID_ITsDefaultTablet = DISPID_InkTablets.DefaultTablet;
pub const DISPID_ITsCount = DISPID_InkTablets.Count;
pub const DISPID_ITsIsPacketPropertySupported = DISPID_InkTablets.IsPacketPropertySupported;

pub const DISPID_InkStrokeDisp = enum(i32) {
    InkIndex = 1,
    ID = 2,
    GetBoundingBox = 3,
    DrawingAttributes = 4,
    FindIntersections = 5,
    GetRectangleIntersections = 6,
    Clip = 7,
    HitTestCircle = 8,
    NearestPoint = 9,
    Split = 10,
    ExtendedProperties = 11,
    Ink = 12,
    BezierPoints = 13,
    PolylineCusps = 14,
    BezierCusps = 15,
    SelfIntersections = 16,
    PacketCount = 17,
    PacketSize = 18,
    PacketDescription = 19,
    Deleted = 20,
    GetPacketDescriptionPropertyMetrics = 21,
    GetPoints = 22,
    SetPoints = 23,
    GetPacketData = 24,
    GetPacketValuesByProperty = 25,
    SetPacketValuesByProperty = 26,
    GetFlattenedBezierPoints = 27,
    ScaleToRectangle = 28,
    Transform = 29,
    Move = 30,
    Rotate = 31,
    Shear = 32,
    Scale = 33,
};
pub const DISPID_ISDInkIndex = DISPID_InkStrokeDisp.InkIndex;
pub const DISPID_ISDID = DISPID_InkStrokeDisp.ID;
pub const DISPID_ISDGetBoundingBox = DISPID_InkStrokeDisp.GetBoundingBox;
pub const DISPID_ISDDrawingAttributes = DISPID_InkStrokeDisp.DrawingAttributes;
pub const DISPID_ISDFindIntersections = DISPID_InkStrokeDisp.FindIntersections;
pub const DISPID_ISDGetRectangleIntersections = DISPID_InkStrokeDisp.GetRectangleIntersections;
pub const DISPID_ISDClip = DISPID_InkStrokeDisp.Clip;
pub const DISPID_ISDHitTestCircle = DISPID_InkStrokeDisp.HitTestCircle;
pub const DISPID_ISDNearestPoint = DISPID_InkStrokeDisp.NearestPoint;
pub const DISPID_ISDSplit = DISPID_InkStrokeDisp.Split;
pub const DISPID_ISDExtendedProperties = DISPID_InkStrokeDisp.ExtendedProperties;
pub const DISPID_ISDInk = DISPID_InkStrokeDisp.Ink;
pub const DISPID_ISDBezierPoints = DISPID_InkStrokeDisp.BezierPoints;
pub const DISPID_ISDPolylineCusps = DISPID_InkStrokeDisp.PolylineCusps;
pub const DISPID_ISDBezierCusps = DISPID_InkStrokeDisp.BezierCusps;
pub const DISPID_ISDSelfIntersections = DISPID_InkStrokeDisp.SelfIntersections;
pub const DISPID_ISDPacketCount = DISPID_InkStrokeDisp.PacketCount;
pub const DISPID_ISDPacketSize = DISPID_InkStrokeDisp.PacketSize;
pub const DISPID_ISDPacketDescription = DISPID_InkStrokeDisp.PacketDescription;
pub const DISPID_ISDDeleted = DISPID_InkStrokeDisp.Deleted;
pub const DISPID_ISDGetPacketDescriptionPropertyMetrics = DISPID_InkStrokeDisp.GetPacketDescriptionPropertyMetrics;
pub const DISPID_ISDGetPoints = DISPID_InkStrokeDisp.GetPoints;
pub const DISPID_ISDSetPoints = DISPID_InkStrokeDisp.SetPoints;
pub const DISPID_ISDGetPacketData = DISPID_InkStrokeDisp.GetPacketData;
pub const DISPID_ISDGetPacketValuesByProperty = DISPID_InkStrokeDisp.GetPacketValuesByProperty;
pub const DISPID_ISDSetPacketValuesByProperty = DISPID_InkStrokeDisp.SetPacketValuesByProperty;
pub const DISPID_ISDGetFlattenedBezierPoints = DISPID_InkStrokeDisp.GetFlattenedBezierPoints;
pub const DISPID_ISDScaleToRectangle = DISPID_InkStrokeDisp.ScaleToRectangle;
pub const DISPID_ISDTransform = DISPID_InkStrokeDisp.Transform;
pub const DISPID_ISDMove = DISPID_InkStrokeDisp.Move;
pub const DISPID_ISDRotate = DISPID_InkStrokeDisp.Rotate;
pub const DISPID_ISDShear = DISPID_InkStrokeDisp.Shear;
pub const DISPID_ISDScale = DISPID_InkStrokeDisp.Scale;

pub const DISPID_InkStrokes = enum(i32) {
    _NewEnum = -4,
    Item = 0,
    Count = 1,
    Valid = 2,
    Ink = 3,
    Add = 4,
    AddStrokes = 5,
    Remove = 6,
    RemoveStrokes = 7,
    ToString = 8,
    ModifyDrawingAttributes = 9,
    GetBoundingBox = 10,
    ScaleToRectangle = 11,
    Transform = 12,
    Move = 13,
    Rotate = 14,
    Shear = 15,
    Scale = 16,
    Clip = 17,
    RecognitionResult = 18,
    RemoveRecognitionResult = 19,
};
pub const DISPID_ISs_NewEnum = DISPID_InkStrokes._NewEnum;
pub const DISPID_ISsItem = DISPID_InkStrokes.Item;
pub const DISPID_ISsCount = DISPID_InkStrokes.Count;
pub const DISPID_ISsValid = DISPID_InkStrokes.Valid;
pub const DISPID_ISsInk = DISPID_InkStrokes.Ink;
pub const DISPID_ISsAdd = DISPID_InkStrokes.Add;
pub const DISPID_ISsAddStrokes = DISPID_InkStrokes.AddStrokes;
pub const DISPID_ISsRemove = DISPID_InkStrokes.Remove;
pub const DISPID_ISsRemoveStrokes = DISPID_InkStrokes.RemoveStrokes;
pub const DISPID_ISsToString = DISPID_InkStrokes.ToString;
pub const DISPID_ISsModifyDrawingAttributes = DISPID_InkStrokes.ModifyDrawingAttributes;
pub const DISPID_ISsGetBoundingBox = DISPID_InkStrokes.GetBoundingBox;
pub const DISPID_ISsScaleToRectangle = DISPID_InkStrokes.ScaleToRectangle;
pub const DISPID_ISsTransform = DISPID_InkStrokes.Transform;
pub const DISPID_ISsMove = DISPID_InkStrokes.Move;
pub const DISPID_ISsRotate = DISPID_InkStrokes.Rotate;
pub const DISPID_ISsShear = DISPID_InkStrokes.Shear;
pub const DISPID_ISsScale = DISPID_InkStrokes.Scale;
pub const DISPID_ISsClip = DISPID_InkStrokes.Clip;
pub const DISPID_ISsRecognitionResult = DISPID_InkStrokes.RecognitionResult;
pub const DISPID_ISsRemoveRecognitionResult = DISPID_InkStrokes.RemoveRecognitionResult;

pub const DISPID_InkCustomStrokes = enum(i32) {
    _NewEnum = -4,
    Item = 0,
    Count = 1,
    Add = 2,
    Remove = 3,
    Clear = 4,
};
pub const DISPID_ICSs_NewEnum = DISPID_InkCustomStrokes._NewEnum;
pub const DISPID_ICSsItem = DISPID_InkCustomStrokes.Item;
pub const DISPID_ICSsCount = DISPID_InkCustomStrokes.Count;
pub const DISPID_ICSsAdd = DISPID_InkCustomStrokes.Add;
pub const DISPID_ICSsRemove = DISPID_InkCustomStrokes.Remove;
pub const DISPID_ICSsClear = DISPID_InkCustomStrokes.Clear;

pub const DISPID_StrokeEvent = enum(i32) {
    Added = 1,
    Removed = 2,
};
pub const DISPID_SEStrokesAdded = DISPID_StrokeEvent.Added;
pub const DISPID_SEStrokesRemoved = DISPID_StrokeEvent.Removed;

pub const DISPID_Ink = enum(i32) {
    Strokes = 1,
    ExtendedProperties = 2,
    GetBoundingBox = 3,
    DeleteStrokes = 4,
    DeleteStroke = 5,
    ExtractStrokes = 6,
    ExtractWithRectangle = 7,
    Dirty = 8,
    CustomStrokes = 9,
    Clone = 10,
    HitTestCircle = 11,
    HitTestWithRectangle = 12,
    HitTestWithLasso = 13,
    NearestPoint = 14,
    CreateStrokes = 15,
    CreateStroke = 16,
    AddStrokesAtRectangle = 17,
    Clip = 18,
    Save = 19,
    Load = 20,
    CreateStrokeFromPoints = 21,
    ClipboardCopyWithRectangle = 22,
    ClipboardCopy = 23,
    CanPaste = 24,
    ClipboardPaste = 25,
};
pub const DISPID_IStrokes = DISPID_Ink.Strokes;
pub const DISPID_IExtendedProperties = DISPID_Ink.ExtendedProperties;
pub const DISPID_IGetBoundingBox = DISPID_Ink.GetBoundingBox;
pub const DISPID_IDeleteStrokes = DISPID_Ink.DeleteStrokes;
pub const DISPID_IDeleteStroke = DISPID_Ink.DeleteStroke;
pub const DISPID_IExtractStrokes = DISPID_Ink.ExtractStrokes;
pub const DISPID_IExtractWithRectangle = DISPID_Ink.ExtractWithRectangle;
pub const DISPID_IDirty = DISPID_Ink.Dirty;
pub const DISPID_ICustomStrokes = DISPID_Ink.CustomStrokes;
pub const DISPID_IClone = DISPID_Ink.Clone;
pub const DISPID_IHitTestCircle = DISPID_Ink.HitTestCircle;
pub const DISPID_IHitTestWithRectangle = DISPID_Ink.HitTestWithRectangle;
pub const DISPID_IHitTestWithLasso = DISPID_Ink.HitTestWithLasso;
pub const DISPID_INearestPoint = DISPID_Ink.NearestPoint;
pub const DISPID_ICreateStrokes = DISPID_Ink.CreateStrokes;
pub const DISPID_ICreateStroke = DISPID_Ink.CreateStroke;
pub const DISPID_IAddStrokesAtRectangle = DISPID_Ink.AddStrokesAtRectangle;
pub const DISPID_IClip = DISPID_Ink.Clip;
pub const DISPID_ISave = DISPID_Ink.Save;
pub const DISPID_ILoad = DISPID_Ink.Load;
pub const DISPID_ICreateStrokeFromPoints = DISPID_Ink.CreateStrokeFromPoints;
pub const DISPID_IClipboardCopyWithRectangle = DISPID_Ink.ClipboardCopyWithRectangle;
pub const DISPID_IClipboardCopy = DISPID_Ink.ClipboardCopy;
pub const DISPID_ICanPaste = DISPID_Ink.CanPaste;
pub const DISPID_IClipboardPaste = DISPID_Ink.ClipboardPaste;

pub const DISPID_InkEvent = enum(i32) {
    Added = 1,
    Deleted = 2,
};
pub const DISPID_IEInkAdded = DISPID_InkEvent.Added;
pub const DISPID_IEInkDeleted = DISPID_InkEvent.Deleted;

pub const DISPID_InkRenderer = enum(i32) {
    GetViewTransform = 1,
    SetViewTransform = 2,
    GetObjectTransform = 3,
    SetObjectTransform = 4,
    Draw = 5,
    DrawStroke = 6,
    PixelToInkSpace = 7,
    InkSpaceToPixel = 8,
    PixelToInkSpaceFromPoints = 9,
    InkSpaceToPixelFromPoints = 10,
    Measure = 11,
    MeasureStroke = 12,
    Move = 13,
    Rotate = 14,
    Scale = 15,
};
pub const DISPID_IRGetViewTransform = DISPID_InkRenderer.GetViewTransform;
pub const DISPID_IRSetViewTransform = DISPID_InkRenderer.SetViewTransform;
pub const DISPID_IRGetObjectTransform = DISPID_InkRenderer.GetObjectTransform;
pub const DISPID_IRSetObjectTransform = DISPID_InkRenderer.SetObjectTransform;
pub const DISPID_IRDraw = DISPID_InkRenderer.Draw;
pub const DISPID_IRDrawStroke = DISPID_InkRenderer.DrawStroke;
pub const DISPID_IRPixelToInkSpace = DISPID_InkRenderer.PixelToInkSpace;
pub const DISPID_IRInkSpaceToPixel = DISPID_InkRenderer.InkSpaceToPixel;
pub const DISPID_IRPixelToInkSpaceFromPoints = DISPID_InkRenderer.PixelToInkSpaceFromPoints;
pub const DISPID_IRInkSpaceToPixelFromPoints = DISPID_InkRenderer.InkSpaceToPixelFromPoints;
pub const DISPID_IRMeasure = DISPID_InkRenderer.Measure;
pub const DISPID_IRMeasureStroke = DISPID_InkRenderer.MeasureStroke;
pub const DISPID_IRMove = DISPID_InkRenderer.Move;
pub const DISPID_IRRotate = DISPID_InkRenderer.Rotate;
pub const DISPID_IRScale = DISPID_InkRenderer.Scale;

pub const InkCollectorEventInterest = enum(i32) {
    DefaultEvents = -1,
    CursorDown = 0,
    Stroke = 1,
    NewPackets = 2,
    NewInAirPackets = 3,
    CursorButtonDown = 4,
    CursorButtonUp = 5,
    CursorInRange = 6,
    CursorOutOfRange = 7,
    SystemGesture = 8,
    TabletAdded = 9,
    TabletRemoved = 10,
    MouseDown = 11,
    MouseMove = 12,
    MouseUp = 13,
    MouseWheel = 14,
    DblClick = 15,
    AllEvents = 16,
};
pub const ICEI_DefaultEvents = InkCollectorEventInterest.DefaultEvents;
pub const ICEI_CursorDown = InkCollectorEventInterest.CursorDown;
pub const ICEI_Stroke = InkCollectorEventInterest.Stroke;
pub const ICEI_NewPackets = InkCollectorEventInterest.NewPackets;
pub const ICEI_NewInAirPackets = InkCollectorEventInterest.NewInAirPackets;
pub const ICEI_CursorButtonDown = InkCollectorEventInterest.CursorButtonDown;
pub const ICEI_CursorButtonUp = InkCollectorEventInterest.CursorButtonUp;
pub const ICEI_CursorInRange = InkCollectorEventInterest.CursorInRange;
pub const ICEI_CursorOutOfRange = InkCollectorEventInterest.CursorOutOfRange;
pub const ICEI_SystemGesture = InkCollectorEventInterest.SystemGesture;
pub const ICEI_TabletAdded = InkCollectorEventInterest.TabletAdded;
pub const ICEI_TabletRemoved = InkCollectorEventInterest.TabletRemoved;
pub const ICEI_MouseDown = InkCollectorEventInterest.MouseDown;
pub const ICEI_MouseMove = InkCollectorEventInterest.MouseMove;
pub const ICEI_MouseUp = InkCollectorEventInterest.MouseUp;
pub const ICEI_MouseWheel = InkCollectorEventInterest.MouseWheel;
pub const ICEI_DblClick = InkCollectorEventInterest.DblClick;
pub const ICEI_AllEvents = InkCollectorEventInterest.AllEvents;

pub const InkMouseButton = enum(i32) {
    Left = 1,
    Right = 2,
    Middle = 4,
};
pub const IMF_Left = InkMouseButton.Left;
pub const IMF_Right = InkMouseButton.Right;
pub const IMF_Middle = InkMouseButton.Middle;

pub const InkShiftKeyModifierFlags = enum(i32) {
    Shift = 1,
    Control = 2,
    Alt = 4,
};
pub const IKM_Shift = InkShiftKeyModifierFlags.Shift;
pub const IKM_Control = InkShiftKeyModifierFlags.Control;
pub const IKM_Alt = InkShiftKeyModifierFlags.Alt;

pub const DISPID_InkCollectorEvent = enum(i32) {
    CEStroke = 1,
    CECursorDown = 2,
    CENewPackets = 3,
    CENewInAirPackets = 4,
    CECursorButtonDown = 5,
    CECursorButtonUp = 6,
    CECursorInRange = 7,
    CECursorOutOfRange = 8,
    CESystemGesture = 9,
    CEGesture = 10,
    CETabletAdded = 11,
    CETabletRemoved = 12,
    OEPainting = 13,
    OEPainted = 14,
    OESelectionChanging = 15,
    OESelectionChanged = 16,
    OESelectionMoving = 17,
    OESelectionMoved = 18,
    OESelectionResizing = 19,
    OESelectionResized = 20,
    OEStrokesDeleting = 21,
    OEStrokesDeleted = 22,
    PEChangeUICues = 23,
    PEClick = 24,
    PEDblClick = 25,
    PEInvalidated = 26,
    PEMouseDown = 27,
    PEMouseEnter = 28,
    PEMouseHover = 29,
    PEMouseLeave = 30,
    PEMouseMove = 31,
    PEMouseUp = 32,
    PEMouseWheel = 33,
    PESizeModeChanged = 34,
    PEStyleChanged = 35,
    PESystemColorsChanged = 36,
    PEKeyDown = 37,
    PEKeyPress = 38,
    PEKeyUp = 39,
    PEResize = 40,
    PESizeChanged = 41,
};
pub const DISPID_ICEStroke = DISPID_InkCollectorEvent.CEStroke;
pub const DISPID_ICECursorDown = DISPID_InkCollectorEvent.CECursorDown;
pub const DISPID_ICENewPackets = DISPID_InkCollectorEvent.CENewPackets;
pub const DISPID_ICENewInAirPackets = DISPID_InkCollectorEvent.CENewInAirPackets;
pub const DISPID_ICECursorButtonDown = DISPID_InkCollectorEvent.CECursorButtonDown;
pub const DISPID_ICECursorButtonUp = DISPID_InkCollectorEvent.CECursorButtonUp;
pub const DISPID_ICECursorInRange = DISPID_InkCollectorEvent.CECursorInRange;
pub const DISPID_ICECursorOutOfRange = DISPID_InkCollectorEvent.CECursorOutOfRange;
pub const DISPID_ICESystemGesture = DISPID_InkCollectorEvent.CESystemGesture;
pub const DISPID_ICEGesture = DISPID_InkCollectorEvent.CEGesture;
pub const DISPID_ICETabletAdded = DISPID_InkCollectorEvent.CETabletAdded;
pub const DISPID_ICETabletRemoved = DISPID_InkCollectorEvent.CETabletRemoved;
pub const DISPID_IOEPainting = DISPID_InkCollectorEvent.OEPainting;
pub const DISPID_IOEPainted = DISPID_InkCollectorEvent.OEPainted;
pub const DISPID_IOESelectionChanging = DISPID_InkCollectorEvent.OESelectionChanging;
pub const DISPID_IOESelectionChanged = DISPID_InkCollectorEvent.OESelectionChanged;
pub const DISPID_IOESelectionMoving = DISPID_InkCollectorEvent.OESelectionMoving;
pub const DISPID_IOESelectionMoved = DISPID_InkCollectorEvent.OESelectionMoved;
pub const DISPID_IOESelectionResizing = DISPID_InkCollectorEvent.OESelectionResizing;
pub const DISPID_IOESelectionResized = DISPID_InkCollectorEvent.OESelectionResized;
pub const DISPID_IOEStrokesDeleting = DISPID_InkCollectorEvent.OEStrokesDeleting;
pub const DISPID_IOEStrokesDeleted = DISPID_InkCollectorEvent.OEStrokesDeleted;
pub const DISPID_IPEChangeUICues = DISPID_InkCollectorEvent.PEChangeUICues;
pub const DISPID_IPEClick = DISPID_InkCollectorEvent.PEClick;
pub const DISPID_IPEDblClick = DISPID_InkCollectorEvent.PEDblClick;
pub const DISPID_IPEInvalidated = DISPID_InkCollectorEvent.PEInvalidated;
pub const DISPID_IPEMouseDown = DISPID_InkCollectorEvent.PEMouseDown;
pub const DISPID_IPEMouseEnter = DISPID_InkCollectorEvent.PEMouseEnter;
pub const DISPID_IPEMouseHover = DISPID_InkCollectorEvent.PEMouseHover;
pub const DISPID_IPEMouseLeave = DISPID_InkCollectorEvent.PEMouseLeave;
pub const DISPID_IPEMouseMove = DISPID_InkCollectorEvent.PEMouseMove;
pub const DISPID_IPEMouseUp = DISPID_InkCollectorEvent.PEMouseUp;
pub const DISPID_IPEMouseWheel = DISPID_InkCollectorEvent.PEMouseWheel;
pub const DISPID_IPESizeModeChanged = DISPID_InkCollectorEvent.PESizeModeChanged;
pub const DISPID_IPEStyleChanged = DISPID_InkCollectorEvent.PEStyleChanged;
pub const DISPID_IPESystemColorsChanged = DISPID_InkCollectorEvent.PESystemColorsChanged;
pub const DISPID_IPEKeyDown = DISPID_InkCollectorEvent.PEKeyDown;
pub const DISPID_IPEKeyPress = DISPID_InkCollectorEvent.PEKeyPress;
pub const DISPID_IPEKeyUp = DISPID_InkCollectorEvent.PEKeyUp;
pub const DISPID_IPEResize = DISPID_InkCollectorEvent.PEResize;
pub const DISPID_IPESizeChanged = DISPID_InkCollectorEvent.PESizeChanged;

pub const InkOverlayEditingMode = enum(i32) {
    Ink = 0,
    Delete = 1,
    Select = 2,
};
pub const IOEM_Ink = InkOverlayEditingMode.Ink;
pub const IOEM_Delete = InkOverlayEditingMode.Delete;
pub const IOEM_Select = InkOverlayEditingMode.Select;

pub const InkOverlayAttachMode = enum(i32) {
    Behind = 0,
    InFront = 1,
};
pub const IOAM_Behind = InkOverlayAttachMode.Behind;
pub const IOAM_InFront = InkOverlayAttachMode.InFront;

pub const InkPictureSizeMode = enum(i32) {
    AutoSize = 0,
    CenterImage = 1,
    Normal = 2,
    StretchImage = 3,
};
pub const IPSM_AutoSize = InkPictureSizeMode.AutoSize;
pub const IPSM_CenterImage = InkPictureSizeMode.CenterImage;
pub const IPSM_Normal = InkPictureSizeMode.Normal;
pub const IPSM_StretchImage = InkPictureSizeMode.StretchImage;

pub const InkOverlayEraserMode = enum(i32) {
    StrokeErase = 0,
    PointErase = 1,
};
pub const IOERM_StrokeErase = InkOverlayEraserMode.StrokeErase;
pub const IOERM_PointErase = InkOverlayEraserMode.PointErase;

pub const InkCollectionMode = enum(i32) {
    InkOnly = 0,
    GestureOnly = 1,
    InkAndGesture = 2,
};
pub const ICM_InkOnly = InkCollectionMode.InkOnly;
pub const ICM_GestureOnly = InkCollectionMode.GestureOnly;
pub const ICM_InkAndGesture = InkCollectionMode.InkAndGesture;

pub const DISPID_InkCollector = enum(i32) {
    CEnabled = 1,
    CHwnd = 2,
    CPaint = 3,
    CText = 4,
    CDefaultDrawingAttributes = 5,
    CRenderer = 6,
    CInk = 7,
    CAutoRedraw = 8,
    CCollectingInk = 9,
    CSetEventInterest = 10,
    CGetEventInterest = 11,
    OEditingMode = 12,
    OSelection = 13,
    OAttachMode = 14,
    OHitTestSelection = 15,
    ODraw = 16,
    PPicture = 17,
    PSizeMode = 18,
    PBackColor = 19,
    CCursors = 20,
    CMarginX = 21,
    CMarginY = 22,
    CSetWindowInputRectangle = 23,
    CGetWindowInputRectangle = 24,
    CTablet = 25,
    CSetAllTabletsMode = 26,
    CSetSingleTabletIntegratedMode = 27,
    CCollectionMode = 28,
    CSetGestureStatus = 29,
    CGetGestureStatus = 30,
    CDynamicRendering = 31,
    CDesiredPacketDescription = 32,
    OEraserMode = 33,
    OEraserWidth = 34,
    CMouseIcon = 35,
    CMousePointer = 36,
    PInkEnabled = 37,
    CSupportHighContrastInk = 38,
    OSupportHighContrastSelectionUI = 39,
};
pub const DISPID_ICEnabled = DISPID_InkCollector.CEnabled;
pub const DISPID_ICHwnd = DISPID_InkCollector.CHwnd;
pub const DISPID_ICPaint = DISPID_InkCollector.CPaint;
pub const DISPID_ICText = DISPID_InkCollector.CText;
pub const DISPID_ICDefaultDrawingAttributes = DISPID_InkCollector.CDefaultDrawingAttributes;
pub const DISPID_ICRenderer = DISPID_InkCollector.CRenderer;
pub const DISPID_ICInk = DISPID_InkCollector.CInk;
pub const DISPID_ICAutoRedraw = DISPID_InkCollector.CAutoRedraw;
pub const DISPID_ICCollectingInk = DISPID_InkCollector.CCollectingInk;
pub const DISPID_ICSetEventInterest = DISPID_InkCollector.CSetEventInterest;
pub const DISPID_ICGetEventInterest = DISPID_InkCollector.CGetEventInterest;
pub const DISPID_IOEditingMode = DISPID_InkCollector.OEditingMode;
pub const DISPID_IOSelection = DISPID_InkCollector.OSelection;
pub const DISPID_IOAttachMode = DISPID_InkCollector.OAttachMode;
pub const DISPID_IOHitTestSelection = DISPID_InkCollector.OHitTestSelection;
pub const DISPID_IODraw = DISPID_InkCollector.ODraw;
pub const DISPID_IPPicture = DISPID_InkCollector.PPicture;
pub const DISPID_IPSizeMode = DISPID_InkCollector.PSizeMode;
pub const DISPID_IPBackColor = DISPID_InkCollector.PBackColor;
pub const DISPID_ICCursors = DISPID_InkCollector.CCursors;
pub const DISPID_ICMarginX = DISPID_InkCollector.CMarginX;
pub const DISPID_ICMarginY = DISPID_InkCollector.CMarginY;
pub const DISPID_ICSetWindowInputRectangle = DISPID_InkCollector.CSetWindowInputRectangle;
pub const DISPID_ICGetWindowInputRectangle = DISPID_InkCollector.CGetWindowInputRectangle;
pub const DISPID_ICTablet = DISPID_InkCollector.CTablet;
pub const DISPID_ICSetAllTabletsMode = DISPID_InkCollector.CSetAllTabletsMode;
pub const DISPID_ICSetSingleTabletIntegratedMode = DISPID_InkCollector.CSetSingleTabletIntegratedMode;
pub const DISPID_ICCollectionMode = DISPID_InkCollector.CCollectionMode;
pub const DISPID_ICSetGestureStatus = DISPID_InkCollector.CSetGestureStatus;
pub const DISPID_ICGetGestureStatus = DISPID_InkCollector.CGetGestureStatus;
pub const DISPID_ICDynamicRendering = DISPID_InkCollector.CDynamicRendering;
pub const DISPID_ICDesiredPacketDescription = DISPID_InkCollector.CDesiredPacketDescription;
pub const DISPID_IOEraserMode = DISPID_InkCollector.OEraserMode;
pub const DISPID_IOEraserWidth = DISPID_InkCollector.OEraserWidth;
pub const DISPID_ICMouseIcon = DISPID_InkCollector.CMouseIcon;
pub const DISPID_ICMousePointer = DISPID_InkCollector.CMousePointer;
pub const DISPID_IPInkEnabled = DISPID_InkCollector.PInkEnabled;
pub const DISPID_ICSupportHighContrastInk = DISPID_InkCollector.CSupportHighContrastInk;
pub const DISPID_IOSupportHighContrastSelectionUI = DISPID_InkCollector.OSupportHighContrastSelectionUI;

pub const DISPID_InkRecognizer = enum(i32) {
    Clsid = 1,
    Name = 2,
    Vendor = 3,
    Capabilities = 4,
    LanguageID = 5,
    PreferredPacketDescription = 6,
    CreateRecognizerContext = 7,
    SupportedProperties = 8,
};
pub const DISPID_RecoClsid = DISPID_InkRecognizer.Clsid;
pub const DISPID_RecoName = DISPID_InkRecognizer.Name;
pub const DISPID_RecoVendor = DISPID_InkRecognizer.Vendor;
pub const DISPID_RecoCapabilities = DISPID_InkRecognizer.Capabilities;
pub const DISPID_RecoLanguageID = DISPID_InkRecognizer.LanguageID;
pub const DISPID_RecoPreferredPacketDescription = DISPID_InkRecognizer.PreferredPacketDescription;
pub const DISPID_RecoCreateRecognizerContext = DISPID_InkRecognizer.CreateRecognizerContext;
pub const DISPID_RecoSupportedProperties = DISPID_InkRecognizer.SupportedProperties;

pub const InkRecognizerCapabilities = enum(i32) {
    DontCare = 1,
    Object = 2,
    FreeInput = 4,
    LinedInput = 8,
    BoxedInput = 16,
    CharacterAutoCompletionInput = 32,
    RightAndDown = 64,
    LeftAndDown = 128,
    DownAndLeft = 256,
    DownAndRight = 512,
    ArbitraryAngle = 1024,
    Lattice = 2048,
    AdviseInkChange = 4096,
    StrokeReorder = 8192,
    Personalizable = 16384,
    PrefersArbitraryAngle = 32768,
    PrefersParagraphBreaking = 65536,
    PrefersSegmentation = 131072,
    Cursive = 262144,
    TextPrediction = 524288,
    Alpha = 1048576,
    Beta = 2097152,
};
pub const IRC_DontCare = InkRecognizerCapabilities.DontCare;
pub const IRC_Object = InkRecognizerCapabilities.Object;
pub const IRC_FreeInput = InkRecognizerCapabilities.FreeInput;
pub const IRC_LinedInput = InkRecognizerCapabilities.LinedInput;
pub const IRC_BoxedInput = InkRecognizerCapabilities.BoxedInput;
pub const IRC_CharacterAutoCompletionInput = InkRecognizerCapabilities.CharacterAutoCompletionInput;
pub const IRC_RightAndDown = InkRecognizerCapabilities.RightAndDown;
pub const IRC_LeftAndDown = InkRecognizerCapabilities.LeftAndDown;
pub const IRC_DownAndLeft = InkRecognizerCapabilities.DownAndLeft;
pub const IRC_DownAndRight = InkRecognizerCapabilities.DownAndRight;
pub const IRC_ArbitraryAngle = InkRecognizerCapabilities.ArbitraryAngle;
pub const IRC_Lattice = InkRecognizerCapabilities.Lattice;
pub const IRC_AdviseInkChange = InkRecognizerCapabilities.AdviseInkChange;
pub const IRC_StrokeReorder = InkRecognizerCapabilities.StrokeReorder;
pub const IRC_Personalizable = InkRecognizerCapabilities.Personalizable;
pub const IRC_PrefersArbitraryAngle = InkRecognizerCapabilities.PrefersArbitraryAngle;
pub const IRC_PrefersParagraphBreaking = InkRecognizerCapabilities.PrefersParagraphBreaking;
pub const IRC_PrefersSegmentation = InkRecognizerCapabilities.PrefersSegmentation;
pub const IRC_Cursive = InkRecognizerCapabilities.Cursive;
pub const IRC_TextPrediction = InkRecognizerCapabilities.TextPrediction;
pub const IRC_Alpha = InkRecognizerCapabilities.Alpha;
pub const IRC_Beta = InkRecognizerCapabilities.Beta;

pub const DISPID_InkRecognizer2 = enum(i32) {
    Id = 0,
    UnicodeRanges = 1,
};
pub const DISPID_RecoId = DISPID_InkRecognizer2.Id;
pub const DISPID_RecoUnicodeRanges = DISPID_InkRecognizer2.UnicodeRanges;

pub const DISPID_InkRecognizers = enum(i32) {
    _NewEnum = -4,
    Item = 0,
    Count = 1,
    GetDefaultRecognizer = 2,
};
pub const DISPID_IRecos_NewEnum = DISPID_InkRecognizers._NewEnum;
pub const DISPID_IRecosItem = DISPID_InkRecognizers.Item;
pub const DISPID_IRecosCount = DISPID_InkRecognizers.Count;
pub const DISPID_IRecosGetDefaultRecognizer = DISPID_InkRecognizers.GetDefaultRecognizer;

pub const InkRecognizerCharacterAutoCompletionMode = enum(i32) {
    Full = 0,
    Prefix = 1,
    Random = 2,
};
pub const IRCACM_Full = InkRecognizerCharacterAutoCompletionMode.Full;
pub const IRCACM_Prefix = InkRecognizerCharacterAutoCompletionMode.Prefix;
pub const IRCACM_Random = InkRecognizerCharacterAutoCompletionMode.Random;

pub const InkRecognitionModes = enum(i32) {
    None = 0,
    WordModeOnly = 1,
    Coerce = 2,
    TopInkBreaksOnly = 4,
    PrefixOk = 8,
    LineMode = 16,
    DisablePersonalization = 32,
    AutoSpace = 64,
    Max = 128,
};
pub const IRM_None = InkRecognitionModes.None;
pub const IRM_WordModeOnly = InkRecognitionModes.WordModeOnly;
pub const IRM_Coerce = InkRecognitionModes.Coerce;
pub const IRM_TopInkBreaksOnly = InkRecognitionModes.TopInkBreaksOnly;
pub const IRM_PrefixOk = InkRecognitionModes.PrefixOk;
pub const IRM_LineMode = InkRecognitionModes.LineMode;
pub const IRM_DisablePersonalization = InkRecognitionModes.DisablePersonalization;
pub const IRM_AutoSpace = InkRecognitionModes.AutoSpace;
pub const IRM_Max = InkRecognitionModes.Max;

pub const DISPID_InkRecognitionEvent = enum(i32) {
    WithAlternates = 1,
    n = 2,
};
pub const DISPID_IRERecognitionWithAlternates = DISPID_InkRecognitionEvent.WithAlternates;
pub const DISPID_IRERecognition = DISPID_InkRecognitionEvent.n;

pub const DISPID_InkRecoContext = enum(i32) {
    Strokes = 1,
    CharacterAutoCompletionMode = 2,
    Factoid = 3,
    WordList = 4,
    Recognizer = 5,
    Guide = 6,
    Flags = 7,
    PrefixText = 8,
    SuffixText = 9,
    StopRecognition = 10,
    Clone = 11,
    Recognize = 12,
    StopBackgroundRecognition = 13,
    EndInkInput = 14,
    BackgroundRecognize = 15,
    BackgroundRecognizeWithAlternates = 16,
    IsStringSupported = 17,
};
pub const DISPID_IRecoCtx_Strokes = DISPID_InkRecoContext.Strokes;
pub const DISPID_IRecoCtx_CharacterAutoCompletionMode = DISPID_InkRecoContext.CharacterAutoCompletionMode;
pub const DISPID_IRecoCtx_Factoid = DISPID_InkRecoContext.Factoid;
pub const DISPID_IRecoCtx_WordList = DISPID_InkRecoContext.WordList;
pub const DISPID_IRecoCtx_Recognizer = DISPID_InkRecoContext.Recognizer;
pub const DISPID_IRecoCtx_Guide = DISPID_InkRecoContext.Guide;
pub const DISPID_IRecoCtx_Flags = DISPID_InkRecoContext.Flags;
pub const DISPID_IRecoCtx_PrefixText = DISPID_InkRecoContext.PrefixText;
pub const DISPID_IRecoCtx_SuffixText = DISPID_InkRecoContext.SuffixText;
pub const DISPID_IRecoCtx_StopRecognition = DISPID_InkRecoContext.StopRecognition;
pub const DISPID_IRecoCtx_Clone = DISPID_InkRecoContext.Clone;
pub const DISPID_IRecoCtx_Recognize = DISPID_InkRecoContext.Recognize;
pub const DISPID_IRecoCtx_StopBackgroundRecognition = DISPID_InkRecoContext.StopBackgroundRecognition;
pub const DISPID_IRecoCtx_EndInkInput = DISPID_InkRecoContext.EndInkInput;
pub const DISPID_IRecoCtx_BackgroundRecognize = DISPID_InkRecoContext.BackgroundRecognize;
pub const DISPID_IRecoCtx_BackgroundRecognizeWithAlternates = DISPID_InkRecoContext.BackgroundRecognizeWithAlternates;
pub const DISPID_IRecoCtx_IsStringSupported = DISPID_InkRecoContext.IsStringSupported;

pub const DISPID_InkRecoContext2 = enum(i32) {
    s = 0,
};
pub const DISPID_IRecoCtx2_EnabledUnicodeRanges = DISPID_InkRecoContext2.s;

pub const InkRecognitionAlternatesSelection = enum(i32) {
    Start = 0,
    DefaultCount = 10,
    All = -1,
};
pub const IRAS_Start = InkRecognitionAlternatesSelection.Start;
pub const IRAS_DefaultCount = InkRecognitionAlternatesSelection.DefaultCount;
pub const IRAS_All = InkRecognitionAlternatesSelection.All;

pub const DISPID_InkRecognitionResult = enum(i32) {
    TopString = 1,
    TopAlternate = 2,
    Strokes = 3,
    TopConfidence = 4,
    AlternatesFromSelection = 5,
    ModifyTopAlternate = 6,
    SetResultOnStrokes = 7,
};
pub const DISPID_InkRecognitionResult_TopString = DISPID_InkRecognitionResult.TopString;
pub const DISPID_InkRecognitionResult_TopAlternate = DISPID_InkRecognitionResult.TopAlternate;
pub const DISPID_InkRecognitionResult_Strokes = DISPID_InkRecognitionResult.Strokes;
pub const DISPID_InkRecognitionResult_TopConfidence = DISPID_InkRecognitionResult.TopConfidence;
pub const DISPID_InkRecognitionResult_AlternatesFromSelection = DISPID_InkRecognitionResult.AlternatesFromSelection;
pub const DISPID_InkRecognitionResult_ModifyTopAlternate = DISPID_InkRecognitionResult.ModifyTopAlternate;
pub const DISPID_InkRecognitionResult_SetResultOnStrokes = DISPID_InkRecognitionResult.SetResultOnStrokes;

pub const DISPID_InkRecoAlternate = enum(i32) {
    String = 1,
    LineNumber = 2,
    Baseline = 3,
    Midline = 4,
    Ascender = 5,
    Descender = 6,
    Confidence = 7,
    Strokes = 8,
    GetStrokesFromStrokeRanges = 9,
    GetStrokesFromTextRange = 10,
    GetTextRangeFromStrokes = 11,
    GetPropertyValue = 12,
    LineAlternates = 13,
    ConfidenceAlternates = 14,
    AlternatesWithConstantPropertyValues = 15,
};
pub const DISPID_InkRecoAlternate_String = DISPID_InkRecoAlternate.String;
pub const DISPID_InkRecoAlternate_LineNumber = DISPID_InkRecoAlternate.LineNumber;
pub const DISPID_InkRecoAlternate_Baseline = DISPID_InkRecoAlternate.Baseline;
pub const DISPID_InkRecoAlternate_Midline = DISPID_InkRecoAlternate.Midline;
pub const DISPID_InkRecoAlternate_Ascender = DISPID_InkRecoAlternate.Ascender;
pub const DISPID_InkRecoAlternate_Descender = DISPID_InkRecoAlternate.Descender;
pub const DISPID_InkRecoAlternate_Confidence = DISPID_InkRecoAlternate.Confidence;
pub const DISPID_InkRecoAlternate_Strokes = DISPID_InkRecoAlternate.Strokes;
pub const DISPID_InkRecoAlternate_GetStrokesFromStrokeRanges = DISPID_InkRecoAlternate.GetStrokesFromStrokeRanges;
pub const DISPID_InkRecoAlternate_GetStrokesFromTextRange = DISPID_InkRecoAlternate.GetStrokesFromTextRange;
pub const DISPID_InkRecoAlternate_GetTextRangeFromStrokes = DISPID_InkRecoAlternate.GetTextRangeFromStrokes;
pub const DISPID_InkRecoAlternate_GetPropertyValue = DISPID_InkRecoAlternate.GetPropertyValue;
pub const DISPID_InkRecoAlternate_LineAlternates = DISPID_InkRecoAlternate.LineAlternates;
pub const DISPID_InkRecoAlternate_ConfidenceAlternates = DISPID_InkRecoAlternate.ConfidenceAlternates;
pub const DISPID_InkRecoAlternate_AlternatesWithConstantPropertyValues = DISPID_InkRecoAlternate.AlternatesWithConstantPropertyValues;

pub const DISPID_InkRecognitionAlternates = enum(i32) {
    NewEnum = -4,
    Item = 0,
    Count = 1,
    Strokes = 2,
};
pub const DISPID_InkRecognitionAlternates_NewEnum = DISPID_InkRecognitionAlternates.NewEnum;
pub const DISPID_InkRecognitionAlternates_Item = DISPID_InkRecognitionAlternates.Item;
pub const DISPID_InkRecognitionAlternates_Count = DISPID_InkRecognitionAlternates.Count;
pub const DISPID_InkRecognitionAlternates_Strokes = DISPID_InkRecognitionAlternates.Strokes;

pub const InkRecoGuide = extern struct {
    rectWritingBox: RECT,
    rectDrawnBox: RECT,
    cRows: i32,
    cColumns: i32,
    midline: i32,
};

pub const DISPID_InkRecognizerGuide = enum(i32) {
    WritingBox = 1,
    DrawnBox = 2,
    Rows = 3,
    Columns = 4,
    Midline = 5,
    GuideData = 6,
};
pub const DISPID_IRGWritingBox = DISPID_InkRecognizerGuide.WritingBox;
pub const DISPID_IRGDrawnBox = DISPID_InkRecognizerGuide.DrawnBox;
pub const DISPID_IRGRows = DISPID_InkRecognizerGuide.Rows;
pub const DISPID_IRGColumns = DISPID_InkRecognizerGuide.Columns;
pub const DISPID_IRGMidline = DISPID_InkRecognizerGuide.Midline;
pub const DISPID_IRGGuideData = DISPID_InkRecognizerGuide.GuideData;

pub const DISPID_InkWordList = enum(i32) {
    AddWord = 0,
    RemoveWord = 1,
    Merge = 2,
};
pub const DISPID_InkWordList_AddWord = DISPID_InkWordList.AddWord;
pub const DISPID_InkWordList_RemoveWord = DISPID_InkWordList.RemoveWord;
pub const DISPID_InkWordList_Merge = DISPID_InkWordList.Merge;

pub const DISPID_InkWordList2 = enum(i32) {
    s = 3,
};
pub const DISPID_InkWordList2_AddWords = DISPID_InkWordList2.s;

const IID_IInkRectangle_Value = Guid.initString("9794ff82-6071-4717-8a8b-6ac7c64a686e");
pub const IID_IInkRectangle = &IID_IInkRectangle_Value;
pub const IInkRectangle = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Top: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRectangle,
            units: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Top: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRectangle,
            units: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Left: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRectangle,
            units: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Left: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRectangle,
            units: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Bottom: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRectangle,
            units: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Bottom: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRectangle,
            units: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Right: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRectangle,
            units: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Right: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRectangle,
            units: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Data: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRectangle,
            rect: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Data: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRectangle,
            rect: RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRectangle: *const fn (
            self: *const IInkRectangle,
            top: ?*i32,
            left: ?*i32,
            bottom: ?*i32,
            right: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRectangle: *const fn (
            self: *const IInkRectangle,
            top: i32,
            left: i32,
            bottom: i32,
            right: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getTop(self: *const T, units_: ?*i32) HRESULT {
                return @as(*const IInkRectangle.VTable, @ptrCast(self.vtable)).get_Top(@as(*const IInkRectangle, @ptrCast(self)), units_);
            }
            pub inline fn putTop(self: *const T, units_: i32) HRESULT {
                return @as(*const IInkRectangle.VTable, @ptrCast(self.vtable)).put_Top(@as(*const IInkRectangle, @ptrCast(self)), units_);
            }
            pub inline fn getLeft(self: *const T, units_: ?*i32) HRESULT {
                return @as(*const IInkRectangle.VTable, @ptrCast(self.vtable)).get_Left(@as(*const IInkRectangle, @ptrCast(self)), units_);
            }
            pub inline fn putLeft(self: *const T, units_: i32) HRESULT {
                return @as(*const IInkRectangle.VTable, @ptrCast(self.vtable)).put_Left(@as(*const IInkRectangle, @ptrCast(self)), units_);
            }
            pub inline fn getBottom(self: *const T, units_: ?*i32) HRESULT {
                return @as(*const IInkRectangle.VTable, @ptrCast(self.vtable)).get_Bottom(@as(*const IInkRectangle, @ptrCast(self)), units_);
            }
            pub inline fn putBottom(self: *const T, units_: i32) HRESULT {
                return @as(*const IInkRectangle.VTable, @ptrCast(self.vtable)).put_Bottom(@as(*const IInkRectangle, @ptrCast(self)), units_);
            }
            pub inline fn getRight(self: *const T, units_: ?*i32) HRESULT {
                return @as(*const IInkRectangle.VTable, @ptrCast(self.vtable)).get_Right(@as(*const IInkRectangle, @ptrCast(self)), units_);
            }
            pub inline fn putRight(self: *const T, units_: i32) HRESULT {
                return @as(*const IInkRectangle.VTable, @ptrCast(self.vtable)).put_Right(@as(*const IInkRectangle, @ptrCast(self)), units_);
            }
            pub inline fn getData(self: *const T, rect_: ?*RECT) HRESULT {
                return @as(*const IInkRectangle.VTable, @ptrCast(self.vtable)).get_Data(@as(*const IInkRectangle, @ptrCast(self)), rect_);
            }
            pub inline fn putData(self: *const T, rect_: RECT) HRESULT {
                return @as(*const IInkRectangle.VTable, @ptrCast(self.vtable)).put_Data(@as(*const IInkRectangle, @ptrCast(self)), rect_);
            }
            pub inline fn getRectangle(self: *const T, top_: ?*i32, left_: ?*i32, bottom_: ?*i32, right_: ?*i32) HRESULT {
                return @as(*const IInkRectangle.VTable, @ptrCast(self.vtable)).GetRectangle(@as(*const IInkRectangle, @ptrCast(self)), top_, left_, bottom_, right_);
            }
            pub inline fn setRectangle(self: *const T, top_: i32, left_: i32, bottom_: i32, right_: i32) HRESULT {
                return @as(*const IInkRectangle.VTable, @ptrCast(self.vtable)).SetRectangle(@as(*const IInkRectangle, @ptrCast(self)), top_, left_, bottom_, right_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkExtendedProperty_Value = Guid.initString("db489209-b7c3-411d-90f6-1548cfff271e");
pub const IID_IInkExtendedProperty = &IID_IInkExtendedProperty_Value;
pub const IInkExtendedProperty = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Guid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkExtendedProperty,
            guid: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Data: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkExtendedProperty,
            data: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Data: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkExtendedProperty,
            data: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getGuid(self: *const T, guid_: ?*?BSTR) HRESULT {
                return @as(*const IInkExtendedProperty.VTable, @ptrCast(self.vtable)).get_Guid(@as(*const IInkExtendedProperty, @ptrCast(self)), guid_);
            }
            pub inline fn getData(self: *const T, data_: ?*VARIANT) HRESULT {
                return @as(*const IInkExtendedProperty.VTable, @ptrCast(self.vtable)).get_Data(@as(*const IInkExtendedProperty, @ptrCast(self)), data_);
            }
            pub inline fn putData(self: *const T, data_: VARIANT) HRESULT {
                return @as(*const IInkExtendedProperty.VTable, @ptrCast(self.vtable)).put_Data(@as(*const IInkExtendedProperty, @ptrCast(self)), data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkExtendedProperties_Value = Guid.initString("89f2a8be-95a9-4530-8b8f-88e971e3e25f");
pub const IID_IInkExtendedProperties = &IID_IInkExtendedProperties_Value;
pub const IInkExtendedProperties = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkExtendedProperties,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkExtendedProperties,
            __new_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const IInkExtendedProperties,
            identifier: VARIANT,
            item: ?*?*IInkExtendedProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IInkExtendedProperties,
            guid: ?BSTR,
            data: VARIANT,
            ink_extended_property: ?*?*IInkExtendedProperty,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IInkExtendedProperties,
            identifier: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IInkExtendedProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoesPropertyExist: *const fn (
            self: *const IInkExtendedProperties,
            guid: ?BSTR,
            does_property_exist: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const IInkExtendedProperties.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IInkExtendedProperties, @ptrCast(self)), count_);
            }
            pub inline fn getNewEnum(self: *const T, __new_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const IInkExtendedProperties.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IInkExtendedProperties, @ptrCast(self)), __new_enum_);
            }
            pub inline fn item(self: *const T, identifier_: VARIANT, item_: ?*?*IInkExtendedProperty) HRESULT {
                return @as(*const IInkExtendedProperties.VTable, @ptrCast(self.vtable)).Item(@as(*const IInkExtendedProperties, @ptrCast(self)), identifier_, item_);
            }
            pub inline fn add(self: *const T, guid_: ?BSTR, data_: VARIANT, ink_extended_property_: ?*?*IInkExtendedProperty) HRESULT {
                return @as(*const IInkExtendedProperties.VTable, @ptrCast(self.vtable)).Add(@as(*const IInkExtendedProperties, @ptrCast(self)), guid_, data_, ink_extended_property_);
            }
            pub inline fn remove(self: *const T, identifier_: VARIANT) HRESULT {
                return @as(*const IInkExtendedProperties.VTable, @ptrCast(self.vtable)).Remove(@as(*const IInkExtendedProperties, @ptrCast(self)), identifier_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IInkExtendedProperties.VTable, @ptrCast(self.vtable)).Clear(@as(*const IInkExtendedProperties, @ptrCast(self)));
            }
            pub inline fn doesPropertyExist(self: *const T, guid_: ?BSTR, does_property_exist_: ?*i16) HRESULT {
                return @as(*const IInkExtendedProperties.VTable, @ptrCast(self.vtable)).DoesPropertyExist(@as(*const IInkExtendedProperties, @ptrCast(self)), guid_, does_property_exist_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkDrawingAttributes_Value = Guid.initString("bf519b75-0a15-4623-adc9-c00d436a8092");
pub const IID_IInkDrawingAttributes = &IID_IInkDrawingAttributes_Value;
pub const IInkDrawingAttributes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Color: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDrawingAttributes,
            current_color: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Color: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDrawingAttributes,
            new_color: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Width: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDrawingAttributes,
            current_width: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Width: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDrawingAttributes,
            new_width: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Height: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDrawingAttributes,
            current_height: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Height: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDrawingAttributes,
            new_height: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FitToCurve: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDrawingAttributes,
            flag: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FitToCurve: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDrawingAttributes,
            flag: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IgnorePressure: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDrawingAttributes,
            flag: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IgnorePressure: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDrawingAttributes,
            flag: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AntiAliased: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDrawingAttributes,
            flag: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AntiAliased: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDrawingAttributes,
            flag: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Transparency: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDrawingAttributes,
            current_transparency: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Transparency: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDrawingAttributes,
            new_transparency: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RasterOperation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDrawingAttributes,
            current_raster_operation: ?*InkRasterOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RasterOperation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDrawingAttributes,
            new_raster_operation: InkRasterOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PenTip: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDrawingAttributes,
            current_pen_tip: ?*InkPenTip,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PenTip: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDrawingAttributes,
            new_pen_tip: InkPenTip,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExtendedProperties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDrawingAttributes,
            properties: ?*?*IInkExtendedProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IInkDrawingAttributes,
            drawing_attributes: ?*?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getColor(self: *const T, current_color_: ?*i32) HRESULT {
                return @as(*const IInkDrawingAttributes.VTable, @ptrCast(self.vtable)).get_Color(@as(*const IInkDrawingAttributes, @ptrCast(self)), current_color_);
            }
            pub inline fn putColor(self: *const T, new_color_: i32) HRESULT {
                return @as(*const IInkDrawingAttributes.VTable, @ptrCast(self.vtable)).put_Color(@as(*const IInkDrawingAttributes, @ptrCast(self)), new_color_);
            }
            pub inline fn getWidth(self: *const T, current_width_: ?*f32) HRESULT {
                return @as(*const IInkDrawingAttributes.VTable, @ptrCast(self.vtable)).get_Width(@as(*const IInkDrawingAttributes, @ptrCast(self)), current_width_);
            }
            pub inline fn putWidth(self: *const T, new_width_: f32) HRESULT {
                return @as(*const IInkDrawingAttributes.VTable, @ptrCast(self.vtable)).put_Width(@as(*const IInkDrawingAttributes, @ptrCast(self)), new_width_);
            }
            pub inline fn getHeight(self: *const T, current_height_: ?*f32) HRESULT {
                return @as(*const IInkDrawingAttributes.VTable, @ptrCast(self.vtable)).get_Height(@as(*const IInkDrawingAttributes, @ptrCast(self)), current_height_);
            }
            pub inline fn putHeight(self: *const T, new_height_: f32) HRESULT {
                return @as(*const IInkDrawingAttributes.VTable, @ptrCast(self.vtable)).put_Height(@as(*const IInkDrawingAttributes, @ptrCast(self)), new_height_);
            }
            pub inline fn getFitToCurve(self: *const T, flag_: ?*i16) HRESULT {
                return @as(*const IInkDrawingAttributes.VTable, @ptrCast(self.vtable)).get_FitToCurve(@as(*const IInkDrawingAttributes, @ptrCast(self)), flag_);
            }
            pub inline fn putFitToCurve(self: *const T, flag_: i16) HRESULT {
                return @as(*const IInkDrawingAttributes.VTable, @ptrCast(self.vtable)).put_FitToCurve(@as(*const IInkDrawingAttributes, @ptrCast(self)), flag_);
            }
            pub inline fn getIgnorePressure(self: *const T, flag_: ?*i16) HRESULT {
                return @as(*const IInkDrawingAttributes.VTable, @ptrCast(self.vtable)).get_IgnorePressure(@as(*const IInkDrawingAttributes, @ptrCast(self)), flag_);
            }
            pub inline fn putIgnorePressure(self: *const T, flag_: i16) HRESULT {
                return @as(*const IInkDrawingAttributes.VTable, @ptrCast(self.vtable)).put_IgnorePressure(@as(*const IInkDrawingAttributes, @ptrCast(self)), flag_);
            }
            pub inline fn getAntiAliased(self: *const T, flag_: ?*i16) HRESULT {
                return @as(*const IInkDrawingAttributes.VTable, @ptrCast(self.vtable)).get_AntiAliased(@as(*const IInkDrawingAttributes, @ptrCast(self)), flag_);
            }
            pub inline fn putAntiAliased(self: *const T, flag_: i16) HRESULT {
                return @as(*const IInkDrawingAttributes.VTable, @ptrCast(self.vtable)).put_AntiAliased(@as(*const IInkDrawingAttributes, @ptrCast(self)), flag_);
            }
            pub inline fn getTransparency(self: *const T, current_transparency_: ?*i32) HRESULT {
                return @as(*const IInkDrawingAttributes.VTable, @ptrCast(self.vtable)).get_Transparency(@as(*const IInkDrawingAttributes, @ptrCast(self)), current_transparency_);
            }
            pub inline fn putTransparency(self: *const T, new_transparency_: i32) HRESULT {
                return @as(*const IInkDrawingAttributes.VTable, @ptrCast(self.vtable)).put_Transparency(@as(*const IInkDrawingAttributes, @ptrCast(self)), new_transparency_);
            }
            pub inline fn getRasterOperation(self: *const T, current_raster_operation_: ?*InkRasterOperation) HRESULT {
                return @as(*const IInkDrawingAttributes.VTable, @ptrCast(self.vtable)).get_RasterOperation(@as(*const IInkDrawingAttributes, @ptrCast(self)), current_raster_operation_);
            }
            pub inline fn putRasterOperation(self: *const T, new_raster_operation_: InkRasterOperation) HRESULT {
                return @as(*const IInkDrawingAttributes.VTable, @ptrCast(self.vtable)).put_RasterOperation(@as(*const IInkDrawingAttributes, @ptrCast(self)), new_raster_operation_);
            }
            pub inline fn getPenTip(self: *const T, current_pen_tip_: ?*InkPenTip) HRESULT {
                return @as(*const IInkDrawingAttributes.VTable, @ptrCast(self.vtable)).get_PenTip(@as(*const IInkDrawingAttributes, @ptrCast(self)), current_pen_tip_);
            }
            pub inline fn putPenTip(self: *const T, new_pen_tip_: InkPenTip) HRESULT {
                return @as(*const IInkDrawingAttributes.VTable, @ptrCast(self.vtable)).put_PenTip(@as(*const IInkDrawingAttributes, @ptrCast(self)), new_pen_tip_);
            }
            pub inline fn getExtendedProperties(self: *const T, properties_: ?*?*IInkExtendedProperties) HRESULT {
                return @as(*const IInkDrawingAttributes.VTable, @ptrCast(self.vtable)).get_ExtendedProperties(@as(*const IInkDrawingAttributes, @ptrCast(self)), properties_);
            }
            pub inline fn clone(self: *const T, drawing_attributes_: ?*?*IInkDrawingAttributes) HRESULT {
                return @as(*const IInkDrawingAttributes.VTable, @ptrCast(self.vtable)).Clone(@as(*const IInkDrawingAttributes, @ptrCast(self)), drawing_attributes_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkTransform_Value = Guid.initString("615f1d43-8703-4565-88e2-8201d2ecd7b7");
pub const IID_IInkTransform = &IID_IInkTransform_Value;
pub const IInkTransform = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Reset: *const fn (
            self: *const IInkTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Translate: *const fn (
            self: *const IInkTransform,
            horizontal_component: f32,
            vertical_component: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Rotate: *const fn (
            self: *const IInkTransform,
            degrees: f32,
            x: f32,
            y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reflect: *const fn (
            self: *const IInkTransform,
            horizontally: i16,
            vertically: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Shear: *const fn (
            self: *const IInkTransform,
            horizontal_component: f32,
            vertical_component: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScaleTransform: *const fn (
            self: *const IInkTransform,
            horizontal_multiplier: f32,
            vertical_multiplier: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransform: *const fn (
            self: *const IInkTransform,
            e_m11: ?*f32,
            e_m12: ?*f32,
            e_m21: ?*f32,
            e_m22: ?*f32,
            e_dx: ?*f32,
            e_dy: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransform: *const fn (
            self: *const IInkTransform,
            e_m11: f32,
            e_m12: f32,
            e_m21: f32,
            e_m22: f32,
            e_dx: f32,
            e_dy: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_eM11: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTransform,
            value: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_eM11: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTransform,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_eM12: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTransform,
            value: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_eM12: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTransform,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_eM21: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTransform,
            value: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_eM21: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTransform,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_eM22: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTransform,
            value: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_eM22: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTransform,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_eDx: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTransform,
            value: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_eDx: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTransform,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_eDy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTransform,
            value: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_eDy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTransform,
            value: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Data: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTransform,
            x_form: ?*XFORM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Data: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTransform,
            x_form: XFORM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).Reset(@as(*const IInkTransform, @ptrCast(self)));
            }
            pub inline fn translate(self: *const T, horizontal_component_: f32, vertical_component_: f32) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).Translate(@as(*const IInkTransform, @ptrCast(self)), horizontal_component_, vertical_component_);
            }
            pub inline fn rotate(self: *const T, degrees_: f32, x_: f32, y_: f32) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).Rotate(@as(*const IInkTransform, @ptrCast(self)), degrees_, x_, y_);
            }
            pub inline fn reflect(self: *const T, horizontally_: i16, vertically_: i16) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).Reflect(@as(*const IInkTransform, @ptrCast(self)), horizontally_, vertically_);
            }
            pub inline fn shear(self: *const T, horizontal_component_: f32, vertical_component_: f32) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).Shear(@as(*const IInkTransform, @ptrCast(self)), horizontal_component_, vertical_component_);
            }
            pub inline fn scaleTransform(self: *const T, horizontal_multiplier_: f32, vertical_multiplier_: f32) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).ScaleTransform(@as(*const IInkTransform, @ptrCast(self)), horizontal_multiplier_, vertical_multiplier_);
            }
            pub inline fn getTransform(self: *const T, e_m11_: ?*f32, e_m12_: ?*f32, e_m21_: ?*f32, e_m22_: ?*f32, e_dx_: ?*f32, e_dy_: ?*f32) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).GetTransform(@as(*const IInkTransform, @ptrCast(self)), e_m11_, e_m12_, e_m21_, e_m22_, e_dx_, e_dy_);
            }
            pub inline fn setTransform(self: *const T, e_m11_: f32, e_m12_: f32, e_m21_: f32, e_m22_: f32, e_dx_: f32, e_dy_: f32) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).SetTransform(@as(*const IInkTransform, @ptrCast(self)), e_m11_, e_m12_, e_m21_, e_m22_, e_dx_, e_dy_);
            }
            pub inline fn getEM11(self: *const T, value_: ?*f32) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).get_eM11(@as(*const IInkTransform, @ptrCast(self)), value_);
            }
            pub inline fn putEM11(self: *const T, value_: f32) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).put_eM11(@as(*const IInkTransform, @ptrCast(self)), value_);
            }
            pub inline fn getEM12(self: *const T, value_: ?*f32) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).get_eM12(@as(*const IInkTransform, @ptrCast(self)), value_);
            }
            pub inline fn putEM12(self: *const T, value_: f32) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).put_eM12(@as(*const IInkTransform, @ptrCast(self)), value_);
            }
            pub inline fn getEM21(self: *const T, value_: ?*f32) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).get_eM21(@as(*const IInkTransform, @ptrCast(self)), value_);
            }
            pub inline fn putEM21(self: *const T, value_: f32) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).put_eM21(@as(*const IInkTransform, @ptrCast(self)), value_);
            }
            pub inline fn getEM22(self: *const T, value_: ?*f32) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).get_eM22(@as(*const IInkTransform, @ptrCast(self)), value_);
            }
            pub inline fn putEM22(self: *const T, value_: f32) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).put_eM22(@as(*const IInkTransform, @ptrCast(self)), value_);
            }
            pub inline fn getEDx(self: *const T, value_: ?*f32) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).get_eDx(@as(*const IInkTransform, @ptrCast(self)), value_);
            }
            pub inline fn putEDx(self: *const T, value_: f32) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).put_eDx(@as(*const IInkTransform, @ptrCast(self)), value_);
            }
            pub inline fn getEDy(self: *const T, value_: ?*f32) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).get_eDy(@as(*const IInkTransform, @ptrCast(self)), value_);
            }
            pub inline fn putEDy(self: *const T, value_: f32) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).put_eDy(@as(*const IInkTransform, @ptrCast(self)), value_);
            }
            pub inline fn getData(self: *const T, x_form_: ?*XFORM) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).get_Data(@as(*const IInkTransform, @ptrCast(self)), x_form_);
            }
            pub inline fn putData(self: *const T, x_form_: XFORM) HRESULT {
                return @as(*const IInkTransform.VTable, @ptrCast(self.vtable)).put_Data(@as(*const IInkTransform, @ptrCast(self)), x_form_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkGesture_Value = Guid.initString("3bdc0a97-04e5-4e26-b813-18f052d41def");
pub const IID_IInkGesture = &IID_IInkGesture_Value;
pub const IInkGesture = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Confidence: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkGesture,
            confidence: ?*InkRecognitionConfidence,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkGesture,
            id: ?*InkApplicationGesture,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHotPoint: *const fn (
            self: *const IInkGesture,
            x: ?*i32,
            y: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getConfidence(self: *const T, confidence_: ?*InkRecognitionConfidence) HRESULT {
                return @as(*const IInkGesture.VTable, @ptrCast(self.vtable)).get_Confidence(@as(*const IInkGesture, @ptrCast(self)), confidence_);
            }
            pub inline fn getId(self: *const T, id_: ?*InkApplicationGesture) HRESULT {
                return @as(*const IInkGesture.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IInkGesture, @ptrCast(self)), id_);
            }
            pub inline fn getHotPoint(self: *const T, x_: ?*i32, y_: ?*i32) HRESULT {
                return @as(*const IInkGesture.VTable, @ptrCast(self.vtable)).GetHotPoint(@as(*const IInkGesture, @ptrCast(self)), x_, y_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkCursor_Value = Guid.initString("ad30c630-40c5-4350-8405-9c71012fc558");
pub const IID_IInkCursor = &IID_IInkCursor_Value;
pub const IInkCursor = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCursor,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCursor,
            id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Inverted: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCursor,
            status: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DrawingAttributes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCursor,
            attributes: ?*?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_DrawingAttributes: *const fn (
            self: *const IInkCursor,
            attributes: ?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Tablet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCursor,
            tablet: ?*?*IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Buttons: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCursor,
            buttons: ?*?*IInkCursorButtons,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IInkCursor.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IInkCursor, @ptrCast(self)), name_);
            }
            pub inline fn getId(self: *const T, id_: ?*i32) HRESULT {
                return @as(*const IInkCursor.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IInkCursor, @ptrCast(self)), id_);
            }
            pub inline fn getInverted(self: *const T, status_: ?*i16) HRESULT {
                return @as(*const IInkCursor.VTable, @ptrCast(self.vtable)).get_Inverted(@as(*const IInkCursor, @ptrCast(self)), status_);
            }
            pub inline fn getDrawingAttributes(self: *const T, attributes_: ?*?*IInkDrawingAttributes) HRESULT {
                return @as(*const IInkCursor.VTable, @ptrCast(self.vtable)).get_DrawingAttributes(@as(*const IInkCursor, @ptrCast(self)), attributes_);
            }
            pub inline fn putrefDrawingAttributes(self: *const T, attributes_: ?*IInkDrawingAttributes) HRESULT {
                return @as(*const IInkCursor.VTable, @ptrCast(self.vtable)).putref_DrawingAttributes(@as(*const IInkCursor, @ptrCast(self)), attributes_);
            }
            pub inline fn getTablet(self: *const T, tablet_: ?*?*IInkTablet) HRESULT {
                return @as(*const IInkCursor.VTable, @ptrCast(self.vtable)).get_Tablet(@as(*const IInkCursor, @ptrCast(self)), tablet_);
            }
            pub inline fn getButtons(self: *const T, buttons_: ?*?*IInkCursorButtons) HRESULT {
                return @as(*const IInkCursor.VTable, @ptrCast(self.vtable)).get_Buttons(@as(*const IInkCursor, @ptrCast(self)), buttons_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkCursors_Value = Guid.initString("a248c1ac-c698-4e06-9e5c-d57f77c7e647");
pub const IID_IInkCursors = &IID_IInkCursors_Value;
pub const IInkCursors = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCursors,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCursors,
            __new_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const IInkCursors,
            index: i32,
            cursor: ?*?*IInkCursor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const IInkCursors.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IInkCursors, @ptrCast(self)), count_);
            }
            pub inline fn getNewEnum(self: *const T, __new_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const IInkCursors.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IInkCursors, @ptrCast(self)), __new_enum_);
            }
            pub inline fn item(self: *const T, index_: i32, cursor_: ?*?*IInkCursor) HRESULT {
                return @as(*const IInkCursors.VTable, @ptrCast(self.vtable)).Item(@as(*const IInkCursors, @ptrCast(self)), index_, cursor_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkCursorButton_Value = Guid.initString("85ef9417-1d59-49b2-a13c-702c85430894");
pub const IID_IInkCursorButton = &IID_IInkCursorButton_Value;
pub const IInkCursorButton = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCursorButton,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCursorButton,
            id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCursorButton,
            current_state: ?*InkCursorButtonState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IInkCursorButton.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IInkCursorButton, @ptrCast(self)), name_);
            }
            pub inline fn getId(self: *const T, id_: ?*?BSTR) HRESULT {
                return @as(*const IInkCursorButton.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IInkCursorButton, @ptrCast(self)), id_);
            }
            pub inline fn getState(self: *const T, current_state_: ?*InkCursorButtonState) HRESULT {
                return @as(*const IInkCursorButton.VTable, @ptrCast(self.vtable)).get_State(@as(*const IInkCursorButton, @ptrCast(self)), current_state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkCursorButtons_Value = Guid.initString("3671cc40-b624-4671-9fa0-db119d952d54");
pub const IID_IInkCursorButtons = &IID_IInkCursorButtons_Value;
pub const IInkCursorButtons = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCursorButtons,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCursorButtons,
            __new_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const IInkCursorButtons,
            identifier: VARIANT,
            button: ?*?*IInkCursorButton,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const IInkCursorButtons.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IInkCursorButtons, @ptrCast(self)), count_);
            }
            pub inline fn getNewEnum(self: *const T, __new_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const IInkCursorButtons.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IInkCursorButtons, @ptrCast(self)), __new_enum_);
            }
            pub inline fn item(self: *const T, identifier_: VARIANT, button_: ?*?*IInkCursorButton) HRESULT {
                return @as(*const IInkCursorButtons.VTable, @ptrCast(self.vtable)).Item(@as(*const IInkCursorButtons, @ptrCast(self)), identifier_, button_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkTablet_Value = Guid.initString("2de25eaa-6ef8-42d5-aee9-185bc81b912d");
pub const IID_IInkTablet = &IID_IInkTablet_Value;
pub const IInkTablet = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTablet,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PlugAndPlayId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTablet,
            id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaximumInputRectangle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTablet,
            rectangle: ?*?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HardwareCapabilities: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTablet,
            capabilities: ?*TabletHardwareCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPacketPropertySupported: *const fn (
            self: *const IInkTablet,
            packet_property_name: ?BSTR,
            supported: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyMetrics: *const fn (
            self: *const IInkTablet,
            property_name: ?BSTR,
            minimum: ?*i32,
            maximum: ?*i32,
            units: ?*TabletPropertyMetricUnit,
            resolution: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IInkTablet.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IInkTablet, @ptrCast(self)), name_);
            }
            pub inline fn getPlugAndPlayId(self: *const T, id_: ?*?BSTR) HRESULT {
                return @as(*const IInkTablet.VTable, @ptrCast(self.vtable)).get_PlugAndPlayId(@as(*const IInkTablet, @ptrCast(self)), id_);
            }
            pub inline fn getMaximumInputRectangle(self: *const T, rectangle_: ?*?*IInkRectangle) HRESULT {
                return @as(*const IInkTablet.VTable, @ptrCast(self.vtable)).get_MaximumInputRectangle(@as(*const IInkTablet, @ptrCast(self)), rectangle_);
            }
            pub inline fn getHardwareCapabilities(self: *const T, capabilities_: ?*TabletHardwareCapabilities) HRESULT {
                return @as(*const IInkTablet.VTable, @ptrCast(self.vtable)).get_HardwareCapabilities(@as(*const IInkTablet, @ptrCast(self)), capabilities_);
            }
            pub inline fn isPacketPropertySupported(self: *const T, packet_property_name_: ?BSTR, supported_: ?*i16) HRESULT {
                return @as(*const IInkTablet.VTable, @ptrCast(self.vtable)).IsPacketPropertySupported(@as(*const IInkTablet, @ptrCast(self)), packet_property_name_, supported_);
            }
            pub inline fn getPropertyMetrics(self: *const T, property_name_: ?BSTR, minimum_: ?*i32, maximum_: ?*i32, units_: ?*TabletPropertyMetricUnit, resolution_: ?*f32) HRESULT {
                return @as(*const IInkTablet.VTable, @ptrCast(self.vtable)).GetPropertyMetrics(@as(*const IInkTablet, @ptrCast(self)), property_name_, minimum_, maximum_, units_, resolution_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkTablet2_Value = Guid.initString("90c91ad2-fa36-49d6-9516-ce8d570f6f85");
pub const IID_IInkTablet2 = &IID_IInkTablet2_Value;
pub const IInkTablet2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeviceKind: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTablet2,
            kind: ?*TabletDeviceKind,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDeviceKind(self: *const T, kind_: ?*TabletDeviceKind) HRESULT {
                return @as(*const IInkTablet2.VTable, @ptrCast(self.vtable)).get_DeviceKind(@as(*const IInkTablet2, @ptrCast(self)), kind_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IInkTablet3_Value = Guid.initString("7e313997-1327-41dd-8ca9-79f24be17250");
pub const IID_IInkTablet3 = &IID_IInkTablet3_Value;
pub const IInkTablet3 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsMultiTouch: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTablet3,
            p_is_multi_touch: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaximumCursors: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTablet3,
            p_maximum_cursors: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getIsMultiTouch(self: *const T, p_is_multi_touch_: ?*i16) HRESULT {
                return @as(*const IInkTablet3.VTable, @ptrCast(self.vtable)).get_IsMultiTouch(@as(*const IInkTablet3, @ptrCast(self)), p_is_multi_touch_);
            }
            pub inline fn getMaximumCursors(self: *const T, p_maximum_cursors_: ?*u32) HRESULT {
                return @as(*const IInkTablet3.VTable, @ptrCast(self.vtable)).get_MaximumCursors(@as(*const IInkTablet3, @ptrCast(self)), p_maximum_cursors_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkTablets_Value = Guid.initString("112086d9-7779-4535-a699-862b43ac1863");
pub const IID_IInkTablets = &IID_IInkTablets_Value;
pub const IInkTablets = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTablets,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTablets,
            __new_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DefaultTablet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkTablets,
            default_tablet: ?*?*IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const IInkTablets,
            index: i32,
            tablet: ?*?*IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPacketPropertySupported: *const fn (
            self: *const IInkTablets,
            packet_property_name: ?BSTR,
            supported: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const IInkTablets.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IInkTablets, @ptrCast(self)), count_);
            }
            pub inline fn getNewEnum(self: *const T, __new_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const IInkTablets.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IInkTablets, @ptrCast(self)), __new_enum_);
            }
            pub inline fn getDefaultTablet(self: *const T, default_tablet_: ?*?*IInkTablet) HRESULT {
                return @as(*const IInkTablets.VTable, @ptrCast(self.vtable)).get_DefaultTablet(@as(*const IInkTablets, @ptrCast(self)), default_tablet_);
            }
            pub inline fn item(self: *const T, index_: i32, tablet_: ?*?*IInkTablet) HRESULT {
                return @as(*const IInkTablets.VTable, @ptrCast(self.vtable)).Item(@as(*const IInkTablets, @ptrCast(self)), index_, tablet_);
            }
            pub inline fn isPacketPropertySupported(self: *const T, packet_property_name_: ?BSTR, supported_: ?*i16) HRESULT {
                return @as(*const IInkTablets.VTable, @ptrCast(self.vtable)).IsPacketPropertySupported(@as(*const IInkTablets, @ptrCast(self)), packet_property_name_, supported_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkStrokeDisp_Value = Guid.initString("43242fea-91d1-4a72-963e-fbb91829cfa2");
pub const IID_IInkStrokeDisp = &IID_IInkStrokeDisp_Value;
pub const IInkStrokeDisp = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkStrokeDisp,
            i_d: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BezierPoints: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkStrokeDisp,
            points: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DrawingAttributes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkStrokeDisp,
            draw_attrs: ?*?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_DrawingAttributes: *const fn (
            self: *const IInkStrokeDisp,
            draw_attrs: ?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Ink: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkStrokeDisp,
            ink: ?*?*IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExtendedProperties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkStrokeDisp,
            properties: ?*?*IInkExtendedProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PolylineCusps: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkStrokeDisp,
            cusps: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BezierCusps: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkStrokeDisp,
            cusps: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelfIntersections: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkStrokeDisp,
            intersections: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PacketCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkStrokeDisp,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PacketSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkStrokeDisp,
            pl_size: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PacketDescription: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkStrokeDisp,
            packet_description: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Deleted: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkStrokeDisp,
            deleted: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBoundingBox: *const fn (
            self: *const IInkStrokeDisp,
            bounding_box_mode: InkBoundingBoxMode,
            rectangle: ?*?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindIntersections: *const fn (
            self: *const IInkStrokeDisp,
            strokes: ?*IInkStrokes,
            intersections: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRectangleIntersections: *const fn (
            self: *const IInkStrokeDisp,
            rectangle: ?*IInkRectangle,
            intersections: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clip: *const fn (
            self: *const IInkStrokeDisp,
            rectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTestCircle: *const fn (
            self: *const IInkStrokeDisp,
            x: i32,
            y: i32,
            radius: f32,
            intersects: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NearestPoint: *const fn (
            self: *const IInkStrokeDisp,
            x: i32,
            y: i32,
            distance: ?*f32,
            point: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Split: *const fn (
            self: *const IInkStrokeDisp,
            split_at: f32,
            new_stroke: ?*?*IInkStrokeDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPacketDescriptionPropertyMetrics: *const fn (
            self: *const IInkStrokeDisp,
            property_name: ?BSTR,
            minimum: ?*i32,
            maximum: ?*i32,
            units: ?*TabletPropertyMetricUnit,
            resolution: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPoints: *const fn (
            self: *const IInkStrokeDisp,
            index: i32,
            count: i32,
            points: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPoints: *const fn (
            self: *const IInkStrokeDisp,
            points: VARIANT,
            index: i32,
            count: i32,
            number_of_points_set: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPacketData: *const fn (
            self: *const IInkStrokeDisp,
            index: i32,
            count: i32,
            packet_data: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPacketValuesByProperty: *const fn (
            self: *const IInkStrokeDisp,
            property_name: ?BSTR,
            index: i32,
            count: i32,
            packet_values: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPacketValuesByProperty: *const fn (
            self: *const IInkStrokeDisp,
            bstr_property_name: ?BSTR,
            packet_values: VARIANT,
            index: i32,
            count: i32,
            number_of_packets_set: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlattenedBezierPoints: *const fn (
            self: *const IInkStrokeDisp,
            fitting_error: i32,
            flattened_bezier_points: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Transform: *const fn (
            self: *const IInkStrokeDisp,
            transform: ?*IInkTransform,
            apply_on_pen_width: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScaleToRectangle: *const fn (
            self: *const IInkStrokeDisp,
            rectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Move: *const fn (
            self: *const IInkStrokeDisp,
            horizontal_component: f32,
            vertical_component: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Rotate: *const fn (
            self: *const IInkStrokeDisp,
            degrees: f32,
            x: f32,
            y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Shear: *const fn (
            self: *const IInkStrokeDisp,
            horizontal_multiplier: f32,
            vertical_multiplier: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScaleTransform: *const fn (
            self: *const IInkStrokeDisp,
            horizontal_multiplier: f32,
            vertical_multiplier: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getID(self: *const T, i_d_: ?*i32) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).get_ID(@as(*const IInkStrokeDisp, @ptrCast(self)), i_d_);
            }
            pub inline fn getBezierPoints(self: *const T, points_: ?*VARIANT) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).get_BezierPoints(@as(*const IInkStrokeDisp, @ptrCast(self)), points_);
            }
            pub inline fn getDrawingAttributes(self: *const T, draw_attrs_: ?*?*IInkDrawingAttributes) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).get_DrawingAttributes(@as(*const IInkStrokeDisp, @ptrCast(self)), draw_attrs_);
            }
            pub inline fn putrefDrawingAttributes(self: *const T, draw_attrs_: ?*IInkDrawingAttributes) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).putref_DrawingAttributes(@as(*const IInkStrokeDisp, @ptrCast(self)), draw_attrs_);
            }
            pub inline fn getInk(self: *const T, ink_: ?*?*IInkDisp) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).get_Ink(@as(*const IInkStrokeDisp, @ptrCast(self)), ink_);
            }
            pub inline fn getExtendedProperties(self: *const T, properties_: ?*?*IInkExtendedProperties) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).get_ExtendedProperties(@as(*const IInkStrokeDisp, @ptrCast(self)), properties_);
            }
            pub inline fn getPolylineCusps(self: *const T, cusps_: ?*VARIANT) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).get_PolylineCusps(@as(*const IInkStrokeDisp, @ptrCast(self)), cusps_);
            }
            pub inline fn getBezierCusps(self: *const T, cusps_: ?*VARIANT) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).get_BezierCusps(@as(*const IInkStrokeDisp, @ptrCast(self)), cusps_);
            }
            pub inline fn getSelfIntersections(self: *const T, intersections_: ?*VARIANT) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).get_SelfIntersections(@as(*const IInkStrokeDisp, @ptrCast(self)), intersections_);
            }
            pub inline fn getPacketCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).get_PacketCount(@as(*const IInkStrokeDisp, @ptrCast(self)), pl_count_);
            }
            pub inline fn getPacketSize(self: *const T, pl_size_: ?*i32) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).get_PacketSize(@as(*const IInkStrokeDisp, @ptrCast(self)), pl_size_);
            }
            pub inline fn getPacketDescription(self: *const T, packet_description_: ?*VARIANT) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).get_PacketDescription(@as(*const IInkStrokeDisp, @ptrCast(self)), packet_description_);
            }
            pub inline fn getDeleted(self: *const T, deleted_: ?*i16) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).get_Deleted(@as(*const IInkStrokeDisp, @ptrCast(self)), deleted_);
            }
            pub inline fn getBoundingBox(self: *const T, bounding_box_mode_: InkBoundingBoxMode, rectangle_: ?*?*IInkRectangle) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).GetBoundingBox(@as(*const IInkStrokeDisp, @ptrCast(self)), bounding_box_mode_, rectangle_);
            }
            pub inline fn findIntersections(self: *const T, strokes_: ?*IInkStrokes, intersections_: ?*VARIANT) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).FindIntersections(@as(*const IInkStrokeDisp, @ptrCast(self)), strokes_, intersections_);
            }
            pub inline fn getRectangleIntersections(self: *const T, rectangle_: ?*IInkRectangle, intersections_: ?*VARIANT) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).GetRectangleIntersections(@as(*const IInkStrokeDisp, @ptrCast(self)), rectangle_, intersections_);
            }
            pub inline fn clip(self: *const T, rectangle_: ?*IInkRectangle) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).Clip(@as(*const IInkStrokeDisp, @ptrCast(self)), rectangle_);
            }
            pub inline fn hitTestCircle(self: *const T, x_: i32, y_: i32, radius_: f32, intersects_: ?*i16) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).HitTestCircle(@as(*const IInkStrokeDisp, @ptrCast(self)), x_, y_, radius_, intersects_);
            }
            pub inline fn nearestPoint(self: *const T, x_: i32, y_: i32, distance_: ?*f32, point_: ?*f32) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).NearestPoint(@as(*const IInkStrokeDisp, @ptrCast(self)), x_, y_, distance_, point_);
            }
            pub inline fn split(self: *const T, split_at_: f32, new_stroke_: ?*?*IInkStrokeDisp) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).Split(@as(*const IInkStrokeDisp, @ptrCast(self)), split_at_, new_stroke_);
            }
            pub inline fn getPacketDescriptionPropertyMetrics(self: *const T, property_name_: ?BSTR, minimum_: ?*i32, maximum_: ?*i32, units_: ?*TabletPropertyMetricUnit, resolution_: ?*f32) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).GetPacketDescriptionPropertyMetrics(@as(*const IInkStrokeDisp, @ptrCast(self)), property_name_, minimum_, maximum_, units_, resolution_);
            }
            pub inline fn getPoints(self: *const T, index_: i32, count_: i32, points_: ?*VARIANT) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).GetPoints(@as(*const IInkStrokeDisp, @ptrCast(self)), index_, count_, points_);
            }
            pub inline fn setPoints(self: *const T, points_: VARIANT, index_: i32, count_: i32, number_of_points_set_: ?*i32) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).SetPoints(@as(*const IInkStrokeDisp, @ptrCast(self)), points_, index_, count_, number_of_points_set_);
            }
            pub inline fn getPacketData(self: *const T, index_: i32, count_: i32, packet_data_: ?*VARIANT) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).GetPacketData(@as(*const IInkStrokeDisp, @ptrCast(self)), index_, count_, packet_data_);
            }
            pub inline fn getPacketValuesByProperty(self: *const T, property_name_: ?BSTR, index_: i32, count_: i32, packet_values_: ?*VARIANT) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).GetPacketValuesByProperty(@as(*const IInkStrokeDisp, @ptrCast(self)), property_name_, index_, count_, packet_values_);
            }
            pub inline fn setPacketValuesByProperty(self: *const T, bstr_property_name_: ?BSTR, packet_values_: VARIANT, index_: i32, count_: i32, number_of_packets_set_: ?*i32) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).SetPacketValuesByProperty(@as(*const IInkStrokeDisp, @ptrCast(self)), bstr_property_name_, packet_values_, index_, count_, number_of_packets_set_);
            }
            pub inline fn getFlattenedBezierPoints(self: *const T, fitting_error_: i32, flattened_bezier_points_: ?*VARIANT) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).GetFlattenedBezierPoints(@as(*const IInkStrokeDisp, @ptrCast(self)), fitting_error_, flattened_bezier_points_);
            }
            pub inline fn transform(self: *const T, transform_: ?*IInkTransform, apply_on_pen_width_: i16) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).Transform(@as(*const IInkStrokeDisp, @ptrCast(self)), transform_, apply_on_pen_width_);
            }
            pub inline fn scaleToRectangle(self: *const T, rectangle_: ?*IInkRectangle) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).ScaleToRectangle(@as(*const IInkStrokeDisp, @ptrCast(self)), rectangle_);
            }
            pub inline fn move(self: *const T, horizontal_component_: f32, vertical_component_: f32) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).Move(@as(*const IInkStrokeDisp, @ptrCast(self)), horizontal_component_, vertical_component_);
            }
            pub inline fn rotate(self: *const T, degrees_: f32, x_: f32, y_: f32) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).Rotate(@as(*const IInkStrokeDisp, @ptrCast(self)), degrees_, x_, y_);
            }
            pub inline fn shear(self: *const T, horizontal_multiplier_: f32, vertical_multiplier_: f32) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).Shear(@as(*const IInkStrokeDisp, @ptrCast(self)), horizontal_multiplier_, vertical_multiplier_);
            }
            pub inline fn scaleTransform(self: *const T, horizontal_multiplier_: f32, vertical_multiplier_: f32) HRESULT {
                return @as(*const IInkStrokeDisp.VTable, @ptrCast(self.vtable)).ScaleTransform(@as(*const IInkStrokeDisp, @ptrCast(self)), horizontal_multiplier_, vertical_multiplier_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkStrokes_Value = Guid.initString("f1f4c9d8-590a-4963-b3ae-1935671bb6f3");
pub const IID_IInkStrokes = &IID_IInkStrokes_Value;
pub const IInkStrokes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkStrokes,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkStrokes,
            __new_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Ink: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkStrokes,
            ink: ?*?*IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RecognitionResult: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkStrokes,
            recognition_result: ?*?*IInkRecognitionResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ToString: *const fn (
            self: *const IInkStrokes,
            to_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const IInkStrokes,
            index: i32,
            stroke: ?*?*IInkStrokeDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IInkStrokes,
            ink_stroke: ?*IInkStrokeDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStrokes: *const fn (
            self: *const IInkStrokes,
            ink_strokes: ?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IInkStrokes,
            ink_stroke: ?*IInkStrokeDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveStrokes: *const fn (
            self: *const IInkStrokes,
            ink_strokes: ?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ModifyDrawingAttributes: *const fn (
            self: *const IInkStrokes,
            draw_attrs: ?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBoundingBox: *const fn (
            self: *const IInkStrokes,
            bounding_box_mode: InkBoundingBoxMode,
            bounding_box: ?*?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Transform: *const fn (
            self: *const IInkStrokes,
            transform: ?*IInkTransform,
            apply_on_pen_width: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScaleToRectangle: *const fn (
            self: *const IInkStrokes,
            rectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Move: *const fn (
            self: *const IInkStrokes,
            horizontal_component: f32,
            vertical_component: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Rotate: *const fn (
            self: *const IInkStrokes,
            degrees: f32,
            x: f32,
            y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Shear: *const fn (
            self: *const IInkStrokes,
            horizontal_multiplier: f32,
            vertical_multiplier: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScaleTransform: *const fn (
            self: *const IInkStrokes,
            horizontal_multiplier: f32,
            vertical_multiplier: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clip: *const fn (
            self: *const IInkStrokes,
            rectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveRecognitionResult: *const fn (
            self: *const IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const IInkStrokes.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IInkStrokes, @ptrCast(self)), count_);
            }
            pub inline fn getNewEnum(self: *const T, __new_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const IInkStrokes.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IInkStrokes, @ptrCast(self)), __new_enum_);
            }
            pub inline fn getInk(self: *const T, ink_: ?*?*IInkDisp) HRESULT {
                return @as(*const IInkStrokes.VTable, @ptrCast(self.vtable)).get_Ink(@as(*const IInkStrokes, @ptrCast(self)), ink_);
            }
            pub inline fn getRecognitionResult(self: *const T, recognition_result_: ?*?*IInkRecognitionResult) HRESULT {
                return @as(*const IInkStrokes.VTable, @ptrCast(self.vtable)).get_RecognitionResult(@as(*const IInkStrokes, @ptrCast(self)), recognition_result_);
            }
            pub inline fn toString(self: *const T, to_string_: ?*?BSTR) HRESULT {
                return @as(*const IInkStrokes.VTable, @ptrCast(self.vtable)).ToString(@as(*const IInkStrokes, @ptrCast(self)), to_string_);
            }
            pub inline fn item(self: *const T, index_: i32, stroke_: ?*?*IInkStrokeDisp) HRESULT {
                return @as(*const IInkStrokes.VTable, @ptrCast(self.vtable)).Item(@as(*const IInkStrokes, @ptrCast(self)), index_, stroke_);
            }
            pub inline fn add(self: *const T, ink_stroke_: ?*IInkStrokeDisp) HRESULT {
                return @as(*const IInkStrokes.VTable, @ptrCast(self.vtable)).Add(@as(*const IInkStrokes, @ptrCast(self)), ink_stroke_);
            }
            pub inline fn addStrokes(self: *const T, ink_strokes_: ?*IInkStrokes) HRESULT {
                return @as(*const IInkStrokes.VTable, @ptrCast(self.vtable)).AddStrokes(@as(*const IInkStrokes, @ptrCast(self)), ink_strokes_);
            }
            pub inline fn remove(self: *const T, ink_stroke_: ?*IInkStrokeDisp) HRESULT {
                return @as(*const IInkStrokes.VTable, @ptrCast(self.vtable)).Remove(@as(*const IInkStrokes, @ptrCast(self)), ink_stroke_);
            }
            pub inline fn removeStrokes(self: *const T, ink_strokes_: ?*IInkStrokes) HRESULT {
                return @as(*const IInkStrokes.VTable, @ptrCast(self.vtable)).RemoveStrokes(@as(*const IInkStrokes, @ptrCast(self)), ink_strokes_);
            }
            pub inline fn modifyDrawingAttributes(self: *const T, draw_attrs_: ?*IInkDrawingAttributes) HRESULT {
                return @as(*const IInkStrokes.VTable, @ptrCast(self.vtable)).ModifyDrawingAttributes(@as(*const IInkStrokes, @ptrCast(self)), draw_attrs_);
            }
            pub inline fn getBoundingBox(self: *const T, bounding_box_mode_: InkBoundingBoxMode, bounding_box_: ?*?*IInkRectangle) HRESULT {
                return @as(*const IInkStrokes.VTable, @ptrCast(self.vtable)).GetBoundingBox(@as(*const IInkStrokes, @ptrCast(self)), bounding_box_mode_, bounding_box_);
            }
            pub inline fn transform(self: *const T, transform_: ?*IInkTransform, apply_on_pen_width_: i16) HRESULT {
                return @as(*const IInkStrokes.VTable, @ptrCast(self.vtable)).Transform(@as(*const IInkStrokes, @ptrCast(self)), transform_, apply_on_pen_width_);
            }
            pub inline fn scaleToRectangle(self: *const T, rectangle_: ?*IInkRectangle) HRESULT {
                return @as(*const IInkStrokes.VTable, @ptrCast(self.vtable)).ScaleToRectangle(@as(*const IInkStrokes, @ptrCast(self)), rectangle_);
            }
            pub inline fn move(self: *const T, horizontal_component_: f32, vertical_component_: f32) HRESULT {
                return @as(*const IInkStrokes.VTable, @ptrCast(self.vtable)).Move(@as(*const IInkStrokes, @ptrCast(self)), horizontal_component_, vertical_component_);
            }
            pub inline fn rotate(self: *const T, degrees_: f32, x_: f32, y_: f32) HRESULT {
                return @as(*const IInkStrokes.VTable, @ptrCast(self.vtable)).Rotate(@as(*const IInkStrokes, @ptrCast(self)), degrees_, x_, y_);
            }
            pub inline fn shear(self: *const T, horizontal_multiplier_: f32, vertical_multiplier_: f32) HRESULT {
                return @as(*const IInkStrokes.VTable, @ptrCast(self.vtable)).Shear(@as(*const IInkStrokes, @ptrCast(self)), horizontal_multiplier_, vertical_multiplier_);
            }
            pub inline fn scaleTransform(self: *const T, horizontal_multiplier_: f32, vertical_multiplier_: f32) HRESULT {
                return @as(*const IInkStrokes.VTable, @ptrCast(self.vtable)).ScaleTransform(@as(*const IInkStrokes, @ptrCast(self)), horizontal_multiplier_, vertical_multiplier_);
            }
            pub inline fn clip(self: *const T, rectangle_: ?*IInkRectangle) HRESULT {
                return @as(*const IInkStrokes.VTable, @ptrCast(self.vtable)).Clip(@as(*const IInkStrokes, @ptrCast(self)), rectangle_);
            }
            pub inline fn removeRecognitionResult(self: *const T) HRESULT {
                return @as(*const IInkStrokes.VTable, @ptrCast(self.vtable)).RemoveRecognitionResult(@as(*const IInkStrokes, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkCustomStrokes_Value = Guid.initString("7e23a88f-c30e-420f-9bdb-28902543f0c1");
pub const IID_IInkCustomStrokes = &IID_IInkCustomStrokes_Value;
pub const IInkCustomStrokes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCustomStrokes,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCustomStrokes,
            __new_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const IInkCustomStrokes,
            identifier: VARIANT,
            strokes: ?*?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const IInkCustomStrokes,
            name: ?BSTR,
            strokes: ?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IInkCustomStrokes,
            identifier: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IInkCustomStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const IInkCustomStrokes.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IInkCustomStrokes, @ptrCast(self)), count_);
            }
            pub inline fn getNewEnum(self: *const T, __new_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const IInkCustomStrokes.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IInkCustomStrokes, @ptrCast(self)), __new_enum_);
            }
            pub inline fn item(self: *const T, identifier_: VARIANT, strokes_: ?*?*IInkStrokes) HRESULT {
                return @as(*const IInkCustomStrokes.VTable, @ptrCast(self.vtable)).Item(@as(*const IInkCustomStrokes, @ptrCast(self)), identifier_, strokes_);
            }
            pub inline fn add(self: *const T, name_: ?BSTR, strokes_: ?*IInkStrokes) HRESULT {
                return @as(*const IInkCustomStrokes.VTable, @ptrCast(self.vtable)).Add(@as(*const IInkCustomStrokes, @ptrCast(self)), name_, strokes_);
            }
            pub inline fn remove(self: *const T, identifier_: VARIANT) HRESULT {
                return @as(*const IInkCustomStrokes.VTable, @ptrCast(self.vtable)).Remove(@as(*const IInkCustomStrokes, @ptrCast(self)), identifier_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IInkCustomStrokes.VTable, @ptrCast(self.vtable)).Clear(@as(*const IInkCustomStrokes, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID__IInkStrokesEvents_Value = Guid.initString("f33053ec-5d25-430a-928f-76a6491dde15");
pub const IID__IInkStrokesEvents = &IID__IInkStrokesEvents_Value;
pub const _IInkStrokesEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkDisp_Value = Guid.initString("9d398fa0-c4e2-4fcd-9973-975caaf47ea6");
pub const IID_IInkDisp = &IID_IInkDisp_Value;
pub const IInkDisp = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Strokes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDisp,
            strokes: ?*?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExtendedProperties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDisp,
            properties: ?*?*IInkExtendedProperties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Dirty: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDisp,
            dirty: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Dirty: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDisp,
            dirty: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CustomStrokes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDisp,
            ppunk_ink_custom_strokes: ?*?*IInkCustomStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBoundingBox: *const fn (
            self: *const IInkDisp,
            bounding_box_mode: InkBoundingBoxMode,
            rectangle: ?*?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteStrokes: *const fn (
            self: *const IInkDisp,
            strokes: ?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteStroke: *const fn (
            self: *const IInkDisp,
            stroke: ?*IInkStrokeDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExtractStrokes: *const fn (
            self: *const IInkDisp,
            strokes: ?*IInkStrokes,
            extract_flags: InkExtractFlags,
            extracted_ink: ?*?*IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExtractWithRectangle: *const fn (
            self: *const IInkDisp,
            rectangle: ?*IInkRectangle,
            extract_flags: InkExtractFlags,
            extracted_ink: ?*?*IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clip: *const fn (
            self: *const IInkDisp,
            rectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IInkDisp,
            new_ink: ?*?*IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTestCircle: *const fn (
            self: *const IInkDisp,
            x: i32,
            y: i32,
            radius: f32,
            strokes: ?*?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTestWithRectangle: *const fn (
            self: *const IInkDisp,
            selection_rectangle: ?*IInkRectangle,
            intersect_percent: f32,
            strokes: ?*?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTestWithLasso: *const fn (
            self: *const IInkDisp,
            points: VARIANT,
            intersect_percent: f32,
            lasso_points: ?*VARIANT,
            strokes: ?*?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NearestPoint: *const fn (
            self: *const IInkDisp,
            x: i32,
            y: i32,
            point_on_stroke: ?*f32,
            distance_from_packet: ?*f32,
            stroke: ?*?*IInkStrokeDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStrokes: *const fn (
            self: *const IInkDisp,
            stroke_ids: VARIANT,
            strokes: ?*?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStrokesAtRectangle: *const fn (
            self: *const IInkDisp,
            source_strokes: ?*IInkStrokes,
            target_rectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IInkDisp,
            persistence_format: InkPersistenceFormat,
            compression_mode: InkPersistenceCompressionMode,
            data: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Load: *const fn (
            self: *const IInkDisp,
            data: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateStroke: *const fn (
            self: *const IInkDisp,
            packet_data: VARIANT,
            packet_description: VARIANT,
            stroke: ?*?*IInkStrokeDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClipboardCopyWithRectangle: *const fn (
            self: *const IInkDisp,
            rectangle: ?*IInkRectangle,
            clipboard_formats: InkClipboardFormats,
            clipboard_modes: InkClipboardModes,
            data_object: ?*?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClipboardCopy: *const fn (
            self: *const IInkDisp,
            strokes: ?*IInkStrokes,
            clipboard_formats: InkClipboardFormats,
            clipboard_modes: InkClipboardModes,
            data_object: ?*?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanPaste: *const fn (
            self: *const IInkDisp,
            data_object: ?*IDataObject,
            can_paste: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClipboardPaste: *const fn (
            self: *const IInkDisp,
            x: i32,
            y: i32,
            data_object: ?*IDataObject,
            strokes: ?*?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getStrokes(self: *const T, strokes_: ?*?*IInkStrokes) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).get_Strokes(@as(*const IInkDisp, @ptrCast(self)), strokes_);
            }
            pub inline fn getExtendedProperties(self: *const T, properties_: ?*?*IInkExtendedProperties) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).get_ExtendedProperties(@as(*const IInkDisp, @ptrCast(self)), properties_);
            }
            pub inline fn getDirty(self: *const T, dirty_: ?*i16) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).get_Dirty(@as(*const IInkDisp, @ptrCast(self)), dirty_);
            }
            pub inline fn putDirty(self: *const T, dirty_: i16) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).put_Dirty(@as(*const IInkDisp, @ptrCast(self)), dirty_);
            }
            pub inline fn getCustomStrokes(self: *const T, ppunk_ink_custom_strokes_: ?*?*IInkCustomStrokes) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).get_CustomStrokes(@as(*const IInkDisp, @ptrCast(self)), ppunk_ink_custom_strokes_);
            }
            pub inline fn getBoundingBox(self: *const T, bounding_box_mode_: InkBoundingBoxMode, rectangle_: ?*?*IInkRectangle) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).GetBoundingBox(@as(*const IInkDisp, @ptrCast(self)), bounding_box_mode_, rectangle_);
            }
            pub inline fn deleteStrokes(self: *const T, strokes_: ?*IInkStrokes) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).DeleteStrokes(@as(*const IInkDisp, @ptrCast(self)), strokes_);
            }
            pub inline fn deleteStroke(self: *const T, stroke_: ?*IInkStrokeDisp) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).DeleteStroke(@as(*const IInkDisp, @ptrCast(self)), stroke_);
            }
            pub inline fn extractStrokes(self: *const T, strokes_: ?*IInkStrokes, extract_flags_: InkExtractFlags, extracted_ink_: ?*?*IInkDisp) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).ExtractStrokes(@as(*const IInkDisp, @ptrCast(self)), strokes_, extract_flags_, extracted_ink_);
            }
            pub inline fn extractWithRectangle(self: *const T, rectangle_: ?*IInkRectangle, extract_flags_: InkExtractFlags, extracted_ink_: ?*?*IInkDisp) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).ExtractWithRectangle(@as(*const IInkDisp, @ptrCast(self)), rectangle_, extract_flags_, extracted_ink_);
            }
            pub inline fn clip(self: *const T, rectangle_: ?*IInkRectangle) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).Clip(@as(*const IInkDisp, @ptrCast(self)), rectangle_);
            }
            pub inline fn clone(self: *const T, new_ink_: ?*?*IInkDisp) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).Clone(@as(*const IInkDisp, @ptrCast(self)), new_ink_);
            }
            pub inline fn hitTestCircle(self: *const T, x_: i32, y_: i32, radius_: f32, strokes_: ?*?*IInkStrokes) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).HitTestCircle(@as(*const IInkDisp, @ptrCast(self)), x_, y_, radius_, strokes_);
            }
            pub inline fn hitTestWithRectangle(self: *const T, selection_rectangle_: ?*IInkRectangle, intersect_percent_: f32, strokes_: ?*?*IInkStrokes) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).HitTestWithRectangle(@as(*const IInkDisp, @ptrCast(self)), selection_rectangle_, intersect_percent_, strokes_);
            }
            pub inline fn hitTestWithLasso(self: *const T, points_: VARIANT, intersect_percent_: f32, lasso_points_: ?*VARIANT, strokes_: ?*?*IInkStrokes) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).HitTestWithLasso(@as(*const IInkDisp, @ptrCast(self)), points_, intersect_percent_, lasso_points_, strokes_);
            }
            pub inline fn nearestPoint(self: *const T, x_: i32, y_: i32, point_on_stroke_: ?*f32, distance_from_packet_: ?*f32, stroke_: ?*?*IInkStrokeDisp) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).NearestPoint(@as(*const IInkDisp, @ptrCast(self)), x_, y_, point_on_stroke_, distance_from_packet_, stroke_);
            }
            pub inline fn createStrokes(self: *const T, stroke_ids_: VARIANT, strokes_: ?*?*IInkStrokes) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).CreateStrokes(@as(*const IInkDisp, @ptrCast(self)), stroke_ids_, strokes_);
            }
            pub inline fn addStrokesAtRectangle(self: *const T, source_strokes_: ?*IInkStrokes, target_rectangle_: ?*IInkRectangle) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).AddStrokesAtRectangle(@as(*const IInkDisp, @ptrCast(self)), source_strokes_, target_rectangle_);
            }
            pub inline fn save(self: *const T, persistence_format_: InkPersistenceFormat, compression_mode_: InkPersistenceCompressionMode, data_: ?*VARIANT) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).Save(@as(*const IInkDisp, @ptrCast(self)), persistence_format_, compression_mode_, data_);
            }
            pub inline fn load(self: *const T, data_: VARIANT) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).Load(@as(*const IInkDisp, @ptrCast(self)), data_);
            }
            pub inline fn createStroke(self: *const T, packet_data_: VARIANT, packet_description_: VARIANT, stroke_: ?*?*IInkStrokeDisp) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).CreateStroke(@as(*const IInkDisp, @ptrCast(self)), packet_data_, packet_description_, stroke_);
            }
            pub inline fn clipboardCopyWithRectangle(self: *const T, rectangle_: ?*IInkRectangle, clipboard_formats_: InkClipboardFormats, clipboard_modes_: InkClipboardModes, data_object_: ?*?*IDataObject) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).ClipboardCopyWithRectangle(@as(*const IInkDisp, @ptrCast(self)), rectangle_, clipboard_formats_, clipboard_modes_, data_object_);
            }
            pub inline fn clipboardCopy(self: *const T, strokes_: ?*IInkStrokes, clipboard_formats_: InkClipboardFormats, clipboard_modes_: InkClipboardModes, data_object_: ?*?*IDataObject) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).ClipboardCopy(@as(*const IInkDisp, @ptrCast(self)), strokes_, clipboard_formats_, clipboard_modes_, data_object_);
            }
            pub inline fn canPaste(self: *const T, data_object_: ?*IDataObject, can_paste_: ?*i16) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).CanPaste(@as(*const IInkDisp, @ptrCast(self)), data_object_, can_paste_);
            }
            pub inline fn clipboardPaste(self: *const T, x_: i32, y_: i32, data_object_: ?*IDataObject, strokes_: ?*?*IInkStrokes) HRESULT {
                return @as(*const IInkDisp.VTable, @ptrCast(self.vtable)).ClipboardPaste(@as(*const IInkDisp, @ptrCast(self)), x_, y_, data_object_, strokes_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID__IInkEvents_Value = Guid.initString("427b1865-ca3f-479a-83a9-0f420f2a0073");
pub const IID__IInkEvents = &IID__IInkEvents_Value;
pub const _IInkEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkRenderer_Value = Guid.initString("e6257a9c-b511-4f4c-a8b0-a7dbc9506b83");
pub const IID_IInkRenderer = &IID_IInkRenderer_Value;
pub const IInkRenderer = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetViewTransform: *const fn (
            self: *const IInkRenderer,
            view_transform: ?*IInkTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewTransform: *const fn (
            self: *const IInkRenderer,
            view_transform: ?*IInkTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectTransform: *const fn (
            self: *const IInkRenderer,
            object_transform: ?*IInkTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetObjectTransform: *const fn (
            self: *const IInkRenderer,
            object_transform: ?*IInkTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Draw: *const fn (
            self: *const IInkRenderer,
            h_d_c: isize,
            strokes: ?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DrawStroke: *const fn (
            self: *const IInkRenderer,
            h_d_c: isize,
            stroke: ?*IInkStrokeDisp,
            drawing_attributes: ?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PixelToInkSpace: *const fn (
            self: *const IInkRenderer,
            h_d_c: isize,
            x: ?*i32,
            y: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InkSpaceToPixel: *const fn (
            self: *const IInkRenderer,
            hdc_display: isize,
            x: ?*i32,
            y: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PixelToInkSpaceFromPoints: *const fn (
            self: *const IInkRenderer,
            h_d_c: isize,
            points: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InkSpaceToPixelFromPoints: *const fn (
            self: *const IInkRenderer,
            h_d_c: isize,
            points: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Measure: *const fn (
            self: *const IInkRenderer,
            strokes: ?*IInkStrokes,
            rectangle: ?*?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MeasureStroke: *const fn (
            self: *const IInkRenderer,
            stroke: ?*IInkStrokeDisp,
            drawing_attributes: ?*IInkDrawingAttributes,
            rectangle: ?*?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Move: *const fn (
            self: *const IInkRenderer,
            horizontal_component: f32,
            vertical_component: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Rotate: *const fn (
            self: *const IInkRenderer,
            degrees: f32,
            x: f32,
            y: f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ScaleTransform: *const fn (
            self: *const IInkRenderer,
            horizontal_multiplier: f32,
            vertical_multiplier: f32,
            apply_on_pen_width: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getViewTransform(self: *const T, view_transform_: ?*IInkTransform) HRESULT {
                return @as(*const IInkRenderer.VTable, @ptrCast(self.vtable)).GetViewTransform(@as(*const IInkRenderer, @ptrCast(self)), view_transform_);
            }
            pub inline fn setViewTransform(self: *const T, view_transform_: ?*IInkTransform) HRESULT {
                return @as(*const IInkRenderer.VTable, @ptrCast(self.vtable)).SetViewTransform(@as(*const IInkRenderer, @ptrCast(self)), view_transform_);
            }
            pub inline fn getObjectTransform(self: *const T, object_transform_: ?*IInkTransform) HRESULT {
                return @as(*const IInkRenderer.VTable, @ptrCast(self.vtable)).GetObjectTransform(@as(*const IInkRenderer, @ptrCast(self)), object_transform_);
            }
            pub inline fn setObjectTransform(self: *const T, object_transform_: ?*IInkTransform) HRESULT {
                return @as(*const IInkRenderer.VTable, @ptrCast(self.vtable)).SetObjectTransform(@as(*const IInkRenderer, @ptrCast(self)), object_transform_);
            }
            pub inline fn draw(self: *const T, h_d_c_: isize, strokes_: ?*IInkStrokes) HRESULT {
                return @as(*const IInkRenderer.VTable, @ptrCast(self.vtable)).Draw(@as(*const IInkRenderer, @ptrCast(self)), h_d_c_, strokes_);
            }
            pub inline fn drawStroke(self: *const T, h_d_c_: isize, stroke_: ?*IInkStrokeDisp, drawing_attributes_: ?*IInkDrawingAttributes) HRESULT {
                return @as(*const IInkRenderer.VTable, @ptrCast(self.vtable)).DrawStroke(@as(*const IInkRenderer, @ptrCast(self)), h_d_c_, stroke_, drawing_attributes_);
            }
            pub inline fn pixelToInkSpace(self: *const T, h_d_c_: isize, x_: ?*i32, y_: ?*i32) HRESULT {
                return @as(*const IInkRenderer.VTable, @ptrCast(self.vtable)).PixelToInkSpace(@as(*const IInkRenderer, @ptrCast(self)), h_d_c_, x_, y_);
            }
            pub inline fn inkSpaceToPixel(self: *const T, hdc_display_: isize, x_: ?*i32, y_: ?*i32) HRESULT {
                return @as(*const IInkRenderer.VTable, @ptrCast(self.vtable)).InkSpaceToPixel(@as(*const IInkRenderer, @ptrCast(self)), hdc_display_, x_, y_);
            }
            pub inline fn pixelToInkSpaceFromPoints(self: *const T, h_d_c_: isize, points_: ?*VARIANT) HRESULT {
                return @as(*const IInkRenderer.VTable, @ptrCast(self.vtable)).PixelToInkSpaceFromPoints(@as(*const IInkRenderer, @ptrCast(self)), h_d_c_, points_);
            }
            pub inline fn inkSpaceToPixelFromPoints(self: *const T, h_d_c_: isize, points_: ?*VARIANT) HRESULT {
                return @as(*const IInkRenderer.VTable, @ptrCast(self.vtable)).InkSpaceToPixelFromPoints(@as(*const IInkRenderer, @ptrCast(self)), h_d_c_, points_);
            }
            pub inline fn measure(self: *const T, strokes_: ?*IInkStrokes, rectangle_: ?*?*IInkRectangle) HRESULT {
                return @as(*const IInkRenderer.VTable, @ptrCast(self.vtable)).Measure(@as(*const IInkRenderer, @ptrCast(self)), strokes_, rectangle_);
            }
            pub inline fn measureStroke(self: *const T, stroke_: ?*IInkStrokeDisp, drawing_attributes_: ?*IInkDrawingAttributes, rectangle_: ?*?*IInkRectangle) HRESULT {
                return @as(*const IInkRenderer.VTable, @ptrCast(self.vtable)).MeasureStroke(@as(*const IInkRenderer, @ptrCast(self)), stroke_, drawing_attributes_, rectangle_);
            }
            pub inline fn move(self: *const T, horizontal_component_: f32, vertical_component_: f32) HRESULT {
                return @as(*const IInkRenderer.VTable, @ptrCast(self.vtable)).Move(@as(*const IInkRenderer, @ptrCast(self)), horizontal_component_, vertical_component_);
            }
            pub inline fn rotate(self: *const T, degrees_: f32, x_: f32, y_: f32) HRESULT {
                return @as(*const IInkRenderer.VTable, @ptrCast(self.vtable)).Rotate(@as(*const IInkRenderer, @ptrCast(self)), degrees_, x_, y_);
            }
            pub inline fn scaleTransform(self: *const T, horizontal_multiplier_: f32, vertical_multiplier_: f32, apply_on_pen_width_: i16) HRESULT {
                return @as(*const IInkRenderer.VTable, @ptrCast(self.vtable)).ScaleTransform(@as(*const IInkRenderer, @ptrCast(self)), horizontal_multiplier_, vertical_multiplier_, apply_on_pen_width_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkCollector_Value = Guid.initString("f0f060b5-8b1f-4a7c-89ec-880692588a4f");
pub const IID_IInkCollector = &IID_IInkCollector_Value;
pub const IInkCollector = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hWnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            current_window: ?*isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_hWnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            new_window: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            collecting: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            collecting: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DefaultDrawingAttributes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            current_attributes: ?*?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_DefaultDrawingAttributes: *const fn (
            self: *const IInkCollector,
            new_attributes: ?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Renderer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            current_ink_renderer: ?*?*IInkRenderer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Renderer: *const fn (
            self: *const IInkCollector,
            new_ink_renderer: ?*IInkRenderer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Ink: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            ink: ?*?*IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Ink: *const fn (
            self: *const IInkCollector,
            new_ink: ?*IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AutoRedraw: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            auto_redraw: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AutoRedraw: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            auto_redraw: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CollectingInk: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            collecting: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CollectionMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            mode: ?*InkCollectionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CollectionMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            mode: InkCollectionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DynamicRendering: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DynamicRendering: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DesiredPacketDescription: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            packet_guids: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DesiredPacketDescription: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            packet_guids: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MouseIcon: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            mouse_icon: ?*?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MouseIcon: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            mouse_icon: ?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_MouseIcon: *const fn (
            self: *const IInkCollector,
            mouse_icon: ?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MousePointer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            mouse_pointer: ?*InkMousePointer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MousePointer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            mouse_pointer: InkMousePointer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Cursors: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            cursors: ?*?*IInkCursors,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MarginX: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            margin_x: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MarginX: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            margin_x: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MarginY: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            margin_y: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MarginY: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            margin_y: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Tablet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            single_tablet: ?*?*IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SupportHighContrastInk: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            support: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SupportHighContrastInk: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkCollector,
            support: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGestureStatus: *const fn (
            self: *const IInkCollector,
            gesture: InkApplicationGesture,
            listen: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGestureStatus: *const fn (
            self: *const IInkCollector,
            gesture: InkApplicationGesture,
            listening: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWindowInputRectangle: *const fn (
            self: *const IInkCollector,
            window_input_rectangle: ?*?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWindowInputRectangle: *const fn (
            self: *const IInkCollector,
            window_input_rectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllTabletsMode: *const fn (
            self: *const IInkCollector,
            use_mouse_for_input: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSingleTabletIntegratedMode: *const fn (
            self: *const IInkCollector,
            tablet: ?*IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventInterest: *const fn (
            self: *const IInkCollector,
            event_id: InkCollectorEventInterest,
            listen: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEventInterest: *const fn (
            self: *const IInkCollector,
            event_id: InkCollectorEventInterest,
            listen: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getHWnd(self: *const T, current_window_: ?*isize) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).get_hWnd(@as(*const IInkCollector, @ptrCast(self)), current_window_);
            }
            pub inline fn putHWnd(self: *const T, new_window_: isize) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).put_hWnd(@as(*const IInkCollector, @ptrCast(self)), new_window_);
            }
            pub inline fn getEnabled(self: *const T, collecting_: ?*i16) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const IInkCollector, @ptrCast(self)), collecting_);
            }
            pub inline fn putEnabled(self: *const T, collecting_: i16) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const IInkCollector, @ptrCast(self)), collecting_);
            }
            pub inline fn getDefaultDrawingAttributes(self: *const T, current_attributes_: ?*?*IInkDrawingAttributes) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).get_DefaultDrawingAttributes(@as(*const IInkCollector, @ptrCast(self)), current_attributes_);
            }
            pub inline fn putrefDefaultDrawingAttributes(self: *const T, new_attributes_: ?*IInkDrawingAttributes) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).putref_DefaultDrawingAttributes(@as(*const IInkCollector, @ptrCast(self)), new_attributes_);
            }
            pub inline fn getRenderer(self: *const T, current_ink_renderer_: ?*?*IInkRenderer) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).get_Renderer(@as(*const IInkCollector, @ptrCast(self)), current_ink_renderer_);
            }
            pub inline fn putrefRenderer(self: *const T, new_ink_renderer_: ?*IInkRenderer) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).putref_Renderer(@as(*const IInkCollector, @ptrCast(self)), new_ink_renderer_);
            }
            pub inline fn getInk(self: *const T, ink_: ?*?*IInkDisp) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).get_Ink(@as(*const IInkCollector, @ptrCast(self)), ink_);
            }
            pub inline fn putrefInk(self: *const T, new_ink_: ?*IInkDisp) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).putref_Ink(@as(*const IInkCollector, @ptrCast(self)), new_ink_);
            }
            pub inline fn getAutoRedraw(self: *const T, auto_redraw_: ?*i16) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).get_AutoRedraw(@as(*const IInkCollector, @ptrCast(self)), auto_redraw_);
            }
            pub inline fn putAutoRedraw(self: *const T, auto_redraw_: i16) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).put_AutoRedraw(@as(*const IInkCollector, @ptrCast(self)), auto_redraw_);
            }
            pub inline fn getCollectingInk(self: *const T, collecting_: ?*i16) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).get_CollectingInk(@as(*const IInkCollector, @ptrCast(self)), collecting_);
            }
            pub inline fn getCollectionMode(self: *const T, mode_: ?*InkCollectionMode) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).get_CollectionMode(@as(*const IInkCollector, @ptrCast(self)), mode_);
            }
            pub inline fn putCollectionMode(self: *const T, mode_: InkCollectionMode) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).put_CollectionMode(@as(*const IInkCollector, @ptrCast(self)), mode_);
            }
            pub inline fn getDynamicRendering(self: *const T, enabled_: ?*i16) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).get_DynamicRendering(@as(*const IInkCollector, @ptrCast(self)), enabled_);
            }
            pub inline fn putDynamicRendering(self: *const T, enabled_: i16) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).put_DynamicRendering(@as(*const IInkCollector, @ptrCast(self)), enabled_);
            }
            pub inline fn getDesiredPacketDescription(self: *const T, packet_guids_: ?*VARIANT) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).get_DesiredPacketDescription(@as(*const IInkCollector, @ptrCast(self)), packet_guids_);
            }
            pub inline fn putDesiredPacketDescription(self: *const T, packet_guids_: VARIANT) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).put_DesiredPacketDescription(@as(*const IInkCollector, @ptrCast(self)), packet_guids_);
            }
            pub inline fn getMouseIcon(self: *const T, mouse_icon_: ?*?*IPictureDisp) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).get_MouseIcon(@as(*const IInkCollector, @ptrCast(self)), mouse_icon_);
            }
            pub inline fn putMouseIcon(self: *const T, mouse_icon_: ?*IPictureDisp) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).put_MouseIcon(@as(*const IInkCollector, @ptrCast(self)), mouse_icon_);
            }
            pub inline fn putrefMouseIcon(self: *const T, mouse_icon_: ?*IPictureDisp) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).putref_MouseIcon(@as(*const IInkCollector, @ptrCast(self)), mouse_icon_);
            }
            pub inline fn getMousePointer(self: *const T, mouse_pointer_: ?*InkMousePointer) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).get_MousePointer(@as(*const IInkCollector, @ptrCast(self)), mouse_pointer_);
            }
            pub inline fn putMousePointer(self: *const T, mouse_pointer_: InkMousePointer) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).put_MousePointer(@as(*const IInkCollector, @ptrCast(self)), mouse_pointer_);
            }
            pub inline fn getCursors(self: *const T, cursors_: ?*?*IInkCursors) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).get_Cursors(@as(*const IInkCollector, @ptrCast(self)), cursors_);
            }
            pub inline fn getMarginX(self: *const T, margin_x_: ?*i32) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).get_MarginX(@as(*const IInkCollector, @ptrCast(self)), margin_x_);
            }
            pub inline fn putMarginX(self: *const T, margin_x_: i32) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).put_MarginX(@as(*const IInkCollector, @ptrCast(self)), margin_x_);
            }
            pub inline fn getMarginY(self: *const T, margin_y_: ?*i32) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).get_MarginY(@as(*const IInkCollector, @ptrCast(self)), margin_y_);
            }
            pub inline fn putMarginY(self: *const T, margin_y_: i32) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).put_MarginY(@as(*const IInkCollector, @ptrCast(self)), margin_y_);
            }
            pub inline fn getTablet(self: *const T, single_tablet_: ?*?*IInkTablet) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).get_Tablet(@as(*const IInkCollector, @ptrCast(self)), single_tablet_);
            }
            pub inline fn getSupportHighContrastInk(self: *const T, support_: ?*i16) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).get_SupportHighContrastInk(@as(*const IInkCollector, @ptrCast(self)), support_);
            }
            pub inline fn putSupportHighContrastInk(self: *const T, support_: i16) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).put_SupportHighContrastInk(@as(*const IInkCollector, @ptrCast(self)), support_);
            }
            pub inline fn setGestureStatus(self: *const T, gesture_: InkApplicationGesture, listen_: i16) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).SetGestureStatus(@as(*const IInkCollector, @ptrCast(self)), gesture_, listen_);
            }
            pub inline fn getGestureStatus(self: *const T, gesture_: InkApplicationGesture, listening_: ?*i16) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).GetGestureStatus(@as(*const IInkCollector, @ptrCast(self)), gesture_, listening_);
            }
            pub inline fn getWindowInputRectangle(self: *const T, window_input_rectangle_: ?*?*IInkRectangle) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).GetWindowInputRectangle(@as(*const IInkCollector, @ptrCast(self)), window_input_rectangle_);
            }
            pub inline fn setWindowInputRectangle(self: *const T, window_input_rectangle_: ?*IInkRectangle) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).SetWindowInputRectangle(@as(*const IInkCollector, @ptrCast(self)), window_input_rectangle_);
            }
            pub inline fn setAllTabletsMode(self: *const T, use_mouse_for_input_: i16) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).SetAllTabletsMode(@as(*const IInkCollector, @ptrCast(self)), use_mouse_for_input_);
            }
            pub inline fn setSingleTabletIntegratedMode(self: *const T, tablet_: ?*IInkTablet) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).SetSingleTabletIntegratedMode(@as(*const IInkCollector, @ptrCast(self)), tablet_);
            }
            pub inline fn getEventInterest(self: *const T, event_id_: InkCollectorEventInterest, listen_: ?*i16) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).GetEventInterest(@as(*const IInkCollector, @ptrCast(self)), event_id_, listen_);
            }
            pub inline fn setEventInterest(self: *const T, event_id_: InkCollectorEventInterest, listen_: i16) HRESULT {
                return @as(*const IInkCollector.VTable, @ptrCast(self.vtable)).SetEventInterest(@as(*const IInkCollector, @ptrCast(self)), event_id_, listen_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID__IInkCollectorEvents_Value = Guid.initString("11a583f2-712d-4fea-abcf-ab4af38ea06b");
pub const IID__IInkCollectorEvents = &IID__IInkCollectorEvents_Value;
pub const _IInkCollectorEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkOverlay_Value = Guid.initString("b82a463b-c1c5-45a3-997c-deab5651b67a");
pub const IID_IInkOverlay = &IID_IInkOverlay_Value;
pub const IInkOverlay = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hWnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            current_window: ?*isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_hWnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            new_window: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            collecting: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            collecting: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DefaultDrawingAttributes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            current_attributes: ?*?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_DefaultDrawingAttributes: *const fn (
            self: *const IInkOverlay,
            new_attributes: ?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Renderer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            current_ink_renderer: ?*?*IInkRenderer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Renderer: *const fn (
            self: *const IInkOverlay,
            new_ink_renderer: ?*IInkRenderer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Ink: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            ink: ?*?*IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Ink: *const fn (
            self: *const IInkOverlay,
            new_ink: ?*IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AutoRedraw: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            auto_redraw: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AutoRedraw: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            auto_redraw: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CollectingInk: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            collecting: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CollectionMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            mode: ?*InkCollectionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CollectionMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            mode: InkCollectionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DynamicRendering: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DynamicRendering: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DesiredPacketDescription: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            packet_guids: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DesiredPacketDescription: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            packet_guids: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MouseIcon: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            mouse_icon: ?*?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MouseIcon: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            mouse_icon: ?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_MouseIcon: *const fn (
            self: *const IInkOverlay,
            mouse_icon: ?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MousePointer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            mouse_pointer: ?*InkMousePointer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MousePointer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            mouse_pointer: InkMousePointer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EditingMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            editing_mode: ?*InkOverlayEditingMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EditingMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            editing_mode: InkOverlayEditingMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Selection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            selection: ?*?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Selection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            selection: ?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EraserMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            eraser_mode: ?*InkOverlayEraserMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EraserMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            eraser_mode: InkOverlayEraserMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EraserWidth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            eraser_width: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EraserWidth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            new_eraser_width: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AttachMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            attach_mode: ?*InkOverlayAttachMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AttachMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            attach_mode: InkOverlayAttachMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Cursors: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            cursors: ?*?*IInkCursors,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MarginX: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            margin_x: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MarginX: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            margin_x: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MarginY: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            margin_y: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MarginY: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            margin_y: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Tablet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            single_tablet: ?*?*IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SupportHighContrastInk: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            support: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SupportHighContrastInk: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            support: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SupportHighContrastSelectionUI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            support: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SupportHighContrastSelectionUI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkOverlay,
            support: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTestSelection: *const fn (
            self: *const IInkOverlay,
            x: i32,
            y: i32,
            sel_area: ?*SelectionHitResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Draw: *const fn (
            self: *const IInkOverlay,
            rect: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGestureStatus: *const fn (
            self: *const IInkOverlay,
            gesture: InkApplicationGesture,
            listen: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGestureStatus: *const fn (
            self: *const IInkOverlay,
            gesture: InkApplicationGesture,
            listening: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWindowInputRectangle: *const fn (
            self: *const IInkOverlay,
            window_input_rectangle: ?*?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWindowInputRectangle: *const fn (
            self: *const IInkOverlay,
            window_input_rectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllTabletsMode: *const fn (
            self: *const IInkOverlay,
            use_mouse_for_input: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSingleTabletIntegratedMode: *const fn (
            self: *const IInkOverlay,
            tablet: ?*IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventInterest: *const fn (
            self: *const IInkOverlay,
            event_id: InkCollectorEventInterest,
            listen: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEventInterest: *const fn (
            self: *const IInkOverlay,
            event_id: InkCollectorEventInterest,
            listen: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getHWnd(self: *const T, current_window_: ?*isize) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_hWnd(@as(*const IInkOverlay, @ptrCast(self)), current_window_);
            }
            pub inline fn putHWnd(self: *const T, new_window_: isize) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).put_hWnd(@as(*const IInkOverlay, @ptrCast(self)), new_window_);
            }
            pub inline fn getEnabled(self: *const T, collecting_: ?*i16) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const IInkOverlay, @ptrCast(self)), collecting_);
            }
            pub inline fn putEnabled(self: *const T, collecting_: i16) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const IInkOverlay, @ptrCast(self)), collecting_);
            }
            pub inline fn getDefaultDrawingAttributes(self: *const T, current_attributes_: ?*?*IInkDrawingAttributes) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_DefaultDrawingAttributes(@as(*const IInkOverlay, @ptrCast(self)), current_attributes_);
            }
            pub inline fn putrefDefaultDrawingAttributes(self: *const T, new_attributes_: ?*IInkDrawingAttributes) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).putref_DefaultDrawingAttributes(@as(*const IInkOverlay, @ptrCast(self)), new_attributes_);
            }
            pub inline fn getRenderer(self: *const T, current_ink_renderer_: ?*?*IInkRenderer) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_Renderer(@as(*const IInkOverlay, @ptrCast(self)), current_ink_renderer_);
            }
            pub inline fn putrefRenderer(self: *const T, new_ink_renderer_: ?*IInkRenderer) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).putref_Renderer(@as(*const IInkOverlay, @ptrCast(self)), new_ink_renderer_);
            }
            pub inline fn getInk(self: *const T, ink_: ?*?*IInkDisp) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_Ink(@as(*const IInkOverlay, @ptrCast(self)), ink_);
            }
            pub inline fn putrefInk(self: *const T, new_ink_: ?*IInkDisp) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).putref_Ink(@as(*const IInkOverlay, @ptrCast(self)), new_ink_);
            }
            pub inline fn getAutoRedraw(self: *const T, auto_redraw_: ?*i16) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_AutoRedraw(@as(*const IInkOverlay, @ptrCast(self)), auto_redraw_);
            }
            pub inline fn putAutoRedraw(self: *const T, auto_redraw_: i16) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).put_AutoRedraw(@as(*const IInkOverlay, @ptrCast(self)), auto_redraw_);
            }
            pub inline fn getCollectingInk(self: *const T, collecting_: ?*i16) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_CollectingInk(@as(*const IInkOverlay, @ptrCast(self)), collecting_);
            }
            pub inline fn getCollectionMode(self: *const T, mode_: ?*InkCollectionMode) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_CollectionMode(@as(*const IInkOverlay, @ptrCast(self)), mode_);
            }
            pub inline fn putCollectionMode(self: *const T, mode_: InkCollectionMode) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).put_CollectionMode(@as(*const IInkOverlay, @ptrCast(self)), mode_);
            }
            pub inline fn getDynamicRendering(self: *const T, enabled_: ?*i16) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_DynamicRendering(@as(*const IInkOverlay, @ptrCast(self)), enabled_);
            }
            pub inline fn putDynamicRendering(self: *const T, enabled_: i16) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).put_DynamicRendering(@as(*const IInkOverlay, @ptrCast(self)), enabled_);
            }
            pub inline fn getDesiredPacketDescription(self: *const T, packet_guids_: ?*VARIANT) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_DesiredPacketDescription(@as(*const IInkOverlay, @ptrCast(self)), packet_guids_);
            }
            pub inline fn putDesiredPacketDescription(self: *const T, packet_guids_: VARIANT) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).put_DesiredPacketDescription(@as(*const IInkOverlay, @ptrCast(self)), packet_guids_);
            }
            pub inline fn getMouseIcon(self: *const T, mouse_icon_: ?*?*IPictureDisp) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_MouseIcon(@as(*const IInkOverlay, @ptrCast(self)), mouse_icon_);
            }
            pub inline fn putMouseIcon(self: *const T, mouse_icon_: ?*IPictureDisp) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).put_MouseIcon(@as(*const IInkOverlay, @ptrCast(self)), mouse_icon_);
            }
            pub inline fn putrefMouseIcon(self: *const T, mouse_icon_: ?*IPictureDisp) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).putref_MouseIcon(@as(*const IInkOverlay, @ptrCast(self)), mouse_icon_);
            }
            pub inline fn getMousePointer(self: *const T, mouse_pointer_: ?*InkMousePointer) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_MousePointer(@as(*const IInkOverlay, @ptrCast(self)), mouse_pointer_);
            }
            pub inline fn putMousePointer(self: *const T, mouse_pointer_: InkMousePointer) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).put_MousePointer(@as(*const IInkOverlay, @ptrCast(self)), mouse_pointer_);
            }
            pub inline fn getEditingMode(self: *const T, editing_mode_: ?*InkOverlayEditingMode) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_EditingMode(@as(*const IInkOverlay, @ptrCast(self)), editing_mode_);
            }
            pub inline fn putEditingMode(self: *const T, editing_mode_: InkOverlayEditingMode) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).put_EditingMode(@as(*const IInkOverlay, @ptrCast(self)), editing_mode_);
            }
            pub inline fn getSelection(self: *const T, selection_: ?*?*IInkStrokes) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_Selection(@as(*const IInkOverlay, @ptrCast(self)), selection_);
            }
            pub inline fn putSelection(self: *const T, selection_: ?*IInkStrokes) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).put_Selection(@as(*const IInkOverlay, @ptrCast(self)), selection_);
            }
            pub inline fn getEraserMode(self: *const T, eraser_mode_: ?*InkOverlayEraserMode) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_EraserMode(@as(*const IInkOverlay, @ptrCast(self)), eraser_mode_);
            }
            pub inline fn putEraserMode(self: *const T, eraser_mode_: InkOverlayEraserMode) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).put_EraserMode(@as(*const IInkOverlay, @ptrCast(self)), eraser_mode_);
            }
            pub inline fn getEraserWidth(self: *const T, eraser_width_: ?*i32) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_EraserWidth(@as(*const IInkOverlay, @ptrCast(self)), eraser_width_);
            }
            pub inline fn putEraserWidth(self: *const T, new_eraser_width_: i32) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).put_EraserWidth(@as(*const IInkOverlay, @ptrCast(self)), new_eraser_width_);
            }
            pub inline fn getAttachMode(self: *const T, attach_mode_: ?*InkOverlayAttachMode) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_AttachMode(@as(*const IInkOverlay, @ptrCast(self)), attach_mode_);
            }
            pub inline fn putAttachMode(self: *const T, attach_mode_: InkOverlayAttachMode) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).put_AttachMode(@as(*const IInkOverlay, @ptrCast(self)), attach_mode_);
            }
            pub inline fn getCursors(self: *const T, cursors_: ?*?*IInkCursors) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_Cursors(@as(*const IInkOverlay, @ptrCast(self)), cursors_);
            }
            pub inline fn getMarginX(self: *const T, margin_x_: ?*i32) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_MarginX(@as(*const IInkOverlay, @ptrCast(self)), margin_x_);
            }
            pub inline fn putMarginX(self: *const T, margin_x_: i32) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).put_MarginX(@as(*const IInkOverlay, @ptrCast(self)), margin_x_);
            }
            pub inline fn getMarginY(self: *const T, margin_y_: ?*i32) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_MarginY(@as(*const IInkOverlay, @ptrCast(self)), margin_y_);
            }
            pub inline fn putMarginY(self: *const T, margin_y_: i32) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).put_MarginY(@as(*const IInkOverlay, @ptrCast(self)), margin_y_);
            }
            pub inline fn getTablet(self: *const T, single_tablet_: ?*?*IInkTablet) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_Tablet(@as(*const IInkOverlay, @ptrCast(self)), single_tablet_);
            }
            pub inline fn getSupportHighContrastInk(self: *const T, support_: ?*i16) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_SupportHighContrastInk(@as(*const IInkOverlay, @ptrCast(self)), support_);
            }
            pub inline fn putSupportHighContrastInk(self: *const T, support_: i16) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).put_SupportHighContrastInk(@as(*const IInkOverlay, @ptrCast(self)), support_);
            }
            pub inline fn getSupportHighContrastSelectionUI(self: *const T, support_: ?*i16) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).get_SupportHighContrastSelectionUI(@as(*const IInkOverlay, @ptrCast(self)), support_);
            }
            pub inline fn putSupportHighContrastSelectionUI(self: *const T, support_: i16) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).put_SupportHighContrastSelectionUI(@as(*const IInkOverlay, @ptrCast(self)), support_);
            }
            pub inline fn hitTestSelection(self: *const T, x_: i32, y_: i32, sel_area_: ?*SelectionHitResult) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).HitTestSelection(@as(*const IInkOverlay, @ptrCast(self)), x_, y_, sel_area_);
            }
            pub inline fn draw(self: *const T, rect_: ?*IInkRectangle) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).Draw(@as(*const IInkOverlay, @ptrCast(self)), rect_);
            }
            pub inline fn setGestureStatus(self: *const T, gesture_: InkApplicationGesture, listen_: i16) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).SetGestureStatus(@as(*const IInkOverlay, @ptrCast(self)), gesture_, listen_);
            }
            pub inline fn getGestureStatus(self: *const T, gesture_: InkApplicationGesture, listening_: ?*i16) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).GetGestureStatus(@as(*const IInkOverlay, @ptrCast(self)), gesture_, listening_);
            }
            pub inline fn getWindowInputRectangle(self: *const T, window_input_rectangle_: ?*?*IInkRectangle) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).GetWindowInputRectangle(@as(*const IInkOverlay, @ptrCast(self)), window_input_rectangle_);
            }
            pub inline fn setWindowInputRectangle(self: *const T, window_input_rectangle_: ?*IInkRectangle) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).SetWindowInputRectangle(@as(*const IInkOverlay, @ptrCast(self)), window_input_rectangle_);
            }
            pub inline fn setAllTabletsMode(self: *const T, use_mouse_for_input_: i16) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).SetAllTabletsMode(@as(*const IInkOverlay, @ptrCast(self)), use_mouse_for_input_);
            }
            pub inline fn setSingleTabletIntegratedMode(self: *const T, tablet_: ?*IInkTablet) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).SetSingleTabletIntegratedMode(@as(*const IInkOverlay, @ptrCast(self)), tablet_);
            }
            pub inline fn getEventInterest(self: *const T, event_id_: InkCollectorEventInterest, listen_: ?*i16) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).GetEventInterest(@as(*const IInkOverlay, @ptrCast(self)), event_id_, listen_);
            }
            pub inline fn setEventInterest(self: *const T, event_id_: InkCollectorEventInterest, listen_: i16) HRESULT {
                return @as(*const IInkOverlay.VTable, @ptrCast(self.vtable)).SetEventInterest(@as(*const IInkOverlay, @ptrCast(self)), event_id_, listen_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID__IInkOverlayEvents_Value = Guid.initString("31179b69-e563-489e-b16f-712f1e8a0651");
pub const IID__IInkOverlayEvents = &IID__IInkOverlayEvents_Value;
pub const _IInkOverlayEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkPicture_Value = Guid.initString("e85662e0-379a-40d7-9b5c-757d233f9923");
pub const IID_IInkPicture = &IID_IInkPicture_Value;
pub const IInkPicture = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_hWnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            current_window: ?*isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DefaultDrawingAttributes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            current_attributes: ?*?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_DefaultDrawingAttributes: *const fn (
            self: *const IInkPicture,
            new_attributes: ?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Renderer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            current_ink_renderer: ?*?*IInkRenderer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Renderer: *const fn (
            self: *const IInkPicture,
            new_ink_renderer: ?*IInkRenderer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Ink: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            ink: ?*?*IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Ink: *const fn (
            self: *const IInkPicture,
            new_ink: ?*IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AutoRedraw: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            auto_redraw: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AutoRedraw: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            auto_redraw: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CollectingInk: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            collecting: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CollectionMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            mode: ?*InkCollectionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CollectionMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            mode: InkCollectionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DynamicRendering: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DynamicRendering: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DesiredPacketDescription: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            packet_guids: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DesiredPacketDescription: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            packet_guids: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MouseIcon: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            mouse_icon: ?*?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MouseIcon: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            mouse_icon: ?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_MouseIcon: *const fn (
            self: *const IInkPicture,
            mouse_icon: ?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MousePointer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            mouse_pointer: ?*InkMousePointer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MousePointer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            mouse_pointer: InkMousePointer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EditingMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            editing_mode: ?*InkOverlayEditingMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EditingMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            editing_mode: InkOverlayEditingMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Selection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            selection: ?*?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Selection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            selection: ?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EraserMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            eraser_mode: ?*InkOverlayEraserMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EraserMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            eraser_mode: InkOverlayEraserMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EraserWidth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            eraser_width: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EraserWidth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            new_eraser_width: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Picture: *const fn (
            self: *const IInkPicture,
            p_picture: ?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Picture: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            p_picture: ?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Picture: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            pp_picture: ?*?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SizeMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            sm_new_size_mode: InkPictureSizeMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SizeMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            sm_size_mode: ?*InkPictureSizeMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BackColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            new_color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            p_color: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Cursors: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            cursors: ?*?*IInkCursors,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MarginX: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            margin_x: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MarginX: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            margin_x: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MarginY: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            margin_y: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MarginY: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            margin_y: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Tablet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            single_tablet: ?*?*IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SupportHighContrastInk: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            support: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SupportHighContrastInk: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            support: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SupportHighContrastSelectionUI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            support: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SupportHighContrastSelectionUI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            support: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTestSelection: *const fn (
            self: *const IInkPicture,
            x: i32,
            y: i32,
            sel_area: ?*SelectionHitResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGestureStatus: *const fn (
            self: *const IInkPicture,
            gesture: InkApplicationGesture,
            listen: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGestureStatus: *const fn (
            self: *const IInkPicture,
            gesture: InkApplicationGesture,
            listening: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWindowInputRectangle: *const fn (
            self: *const IInkPicture,
            window_input_rectangle: ?*?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWindowInputRectangle: *const fn (
            self: *const IInkPicture,
            window_input_rectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllTabletsMode: *const fn (
            self: *const IInkPicture,
            use_mouse_for_input: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSingleTabletIntegratedMode: *const fn (
            self: *const IInkPicture,
            tablet: ?*IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventInterest: *const fn (
            self: *const IInkPicture,
            event_id: InkCollectorEventInterest,
            listen: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEventInterest: *const fn (
            self: *const IInkPicture,
            event_id: InkCollectorEventInterest,
            listen: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InkEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            collecting: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_InkEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            collecting: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            pbool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkPicture,
            vbool: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getHWnd(self: *const T, current_window_: ?*isize) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_hWnd(@as(*const IInkPicture, @ptrCast(self)), current_window_);
            }
            pub inline fn getDefaultDrawingAttributes(self: *const T, current_attributes_: ?*?*IInkDrawingAttributes) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_DefaultDrawingAttributes(@as(*const IInkPicture, @ptrCast(self)), current_attributes_);
            }
            pub inline fn putrefDefaultDrawingAttributes(self: *const T, new_attributes_: ?*IInkDrawingAttributes) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).putref_DefaultDrawingAttributes(@as(*const IInkPicture, @ptrCast(self)), new_attributes_);
            }
            pub inline fn getRenderer(self: *const T, current_ink_renderer_: ?*?*IInkRenderer) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_Renderer(@as(*const IInkPicture, @ptrCast(self)), current_ink_renderer_);
            }
            pub inline fn putrefRenderer(self: *const T, new_ink_renderer_: ?*IInkRenderer) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).putref_Renderer(@as(*const IInkPicture, @ptrCast(self)), new_ink_renderer_);
            }
            pub inline fn getInk(self: *const T, ink_: ?*?*IInkDisp) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_Ink(@as(*const IInkPicture, @ptrCast(self)), ink_);
            }
            pub inline fn putrefInk(self: *const T, new_ink_: ?*IInkDisp) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).putref_Ink(@as(*const IInkPicture, @ptrCast(self)), new_ink_);
            }
            pub inline fn getAutoRedraw(self: *const T, auto_redraw_: ?*i16) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_AutoRedraw(@as(*const IInkPicture, @ptrCast(self)), auto_redraw_);
            }
            pub inline fn putAutoRedraw(self: *const T, auto_redraw_: i16) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).put_AutoRedraw(@as(*const IInkPicture, @ptrCast(self)), auto_redraw_);
            }
            pub inline fn getCollectingInk(self: *const T, collecting_: ?*i16) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_CollectingInk(@as(*const IInkPicture, @ptrCast(self)), collecting_);
            }
            pub inline fn getCollectionMode(self: *const T, mode_: ?*InkCollectionMode) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_CollectionMode(@as(*const IInkPicture, @ptrCast(self)), mode_);
            }
            pub inline fn putCollectionMode(self: *const T, mode_: InkCollectionMode) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).put_CollectionMode(@as(*const IInkPicture, @ptrCast(self)), mode_);
            }
            pub inline fn getDynamicRendering(self: *const T, enabled_: ?*i16) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_DynamicRendering(@as(*const IInkPicture, @ptrCast(self)), enabled_);
            }
            pub inline fn putDynamicRendering(self: *const T, enabled_: i16) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).put_DynamicRendering(@as(*const IInkPicture, @ptrCast(self)), enabled_);
            }
            pub inline fn getDesiredPacketDescription(self: *const T, packet_guids_: ?*VARIANT) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_DesiredPacketDescription(@as(*const IInkPicture, @ptrCast(self)), packet_guids_);
            }
            pub inline fn putDesiredPacketDescription(self: *const T, packet_guids_: VARIANT) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).put_DesiredPacketDescription(@as(*const IInkPicture, @ptrCast(self)), packet_guids_);
            }
            pub inline fn getMouseIcon(self: *const T, mouse_icon_: ?*?*IPictureDisp) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_MouseIcon(@as(*const IInkPicture, @ptrCast(self)), mouse_icon_);
            }
            pub inline fn putMouseIcon(self: *const T, mouse_icon_: ?*IPictureDisp) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).put_MouseIcon(@as(*const IInkPicture, @ptrCast(self)), mouse_icon_);
            }
            pub inline fn putrefMouseIcon(self: *const T, mouse_icon_: ?*IPictureDisp) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).putref_MouseIcon(@as(*const IInkPicture, @ptrCast(self)), mouse_icon_);
            }
            pub inline fn getMousePointer(self: *const T, mouse_pointer_: ?*InkMousePointer) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_MousePointer(@as(*const IInkPicture, @ptrCast(self)), mouse_pointer_);
            }
            pub inline fn putMousePointer(self: *const T, mouse_pointer_: InkMousePointer) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).put_MousePointer(@as(*const IInkPicture, @ptrCast(self)), mouse_pointer_);
            }
            pub inline fn getEditingMode(self: *const T, editing_mode_: ?*InkOverlayEditingMode) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_EditingMode(@as(*const IInkPicture, @ptrCast(self)), editing_mode_);
            }
            pub inline fn putEditingMode(self: *const T, editing_mode_: InkOverlayEditingMode) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).put_EditingMode(@as(*const IInkPicture, @ptrCast(self)), editing_mode_);
            }
            pub inline fn getSelection(self: *const T, selection_: ?*?*IInkStrokes) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_Selection(@as(*const IInkPicture, @ptrCast(self)), selection_);
            }
            pub inline fn putSelection(self: *const T, selection_: ?*IInkStrokes) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).put_Selection(@as(*const IInkPicture, @ptrCast(self)), selection_);
            }
            pub inline fn getEraserMode(self: *const T, eraser_mode_: ?*InkOverlayEraserMode) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_EraserMode(@as(*const IInkPicture, @ptrCast(self)), eraser_mode_);
            }
            pub inline fn putEraserMode(self: *const T, eraser_mode_: InkOverlayEraserMode) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).put_EraserMode(@as(*const IInkPicture, @ptrCast(self)), eraser_mode_);
            }
            pub inline fn getEraserWidth(self: *const T, eraser_width_: ?*i32) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_EraserWidth(@as(*const IInkPicture, @ptrCast(self)), eraser_width_);
            }
            pub inline fn putEraserWidth(self: *const T, new_eraser_width_: i32) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).put_EraserWidth(@as(*const IInkPicture, @ptrCast(self)), new_eraser_width_);
            }
            pub inline fn putrefPicture(self: *const T, p_picture_: ?*IPictureDisp) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).putref_Picture(@as(*const IInkPicture, @ptrCast(self)), p_picture_);
            }
            pub inline fn putPicture(self: *const T, p_picture_: ?*IPictureDisp) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).put_Picture(@as(*const IInkPicture, @ptrCast(self)), p_picture_);
            }
            pub inline fn getPicture(self: *const T, pp_picture_: ?*?*IPictureDisp) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_Picture(@as(*const IInkPicture, @ptrCast(self)), pp_picture_);
            }
            pub inline fn putSizeMode(self: *const T, sm_new_size_mode_: InkPictureSizeMode) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).put_SizeMode(@as(*const IInkPicture, @ptrCast(self)), sm_new_size_mode_);
            }
            pub inline fn getSizeMode(self: *const T, sm_size_mode_: ?*InkPictureSizeMode) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_SizeMode(@as(*const IInkPicture, @ptrCast(self)), sm_size_mode_);
            }
            pub inline fn putBackColor(self: *const T, new_color_: u32) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).put_BackColor(@as(*const IInkPicture, @ptrCast(self)), new_color_);
            }
            pub inline fn getBackColor(self: *const T, p_color_: ?*u32) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_BackColor(@as(*const IInkPicture, @ptrCast(self)), p_color_);
            }
            pub inline fn getCursors(self: *const T, cursors_: ?*?*IInkCursors) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_Cursors(@as(*const IInkPicture, @ptrCast(self)), cursors_);
            }
            pub inline fn getMarginX(self: *const T, margin_x_: ?*i32) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_MarginX(@as(*const IInkPicture, @ptrCast(self)), margin_x_);
            }
            pub inline fn putMarginX(self: *const T, margin_x_: i32) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).put_MarginX(@as(*const IInkPicture, @ptrCast(self)), margin_x_);
            }
            pub inline fn getMarginY(self: *const T, margin_y_: ?*i32) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_MarginY(@as(*const IInkPicture, @ptrCast(self)), margin_y_);
            }
            pub inline fn putMarginY(self: *const T, margin_y_: i32) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).put_MarginY(@as(*const IInkPicture, @ptrCast(self)), margin_y_);
            }
            pub inline fn getTablet(self: *const T, single_tablet_: ?*?*IInkTablet) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_Tablet(@as(*const IInkPicture, @ptrCast(self)), single_tablet_);
            }
            pub inline fn getSupportHighContrastInk(self: *const T, support_: ?*i16) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_SupportHighContrastInk(@as(*const IInkPicture, @ptrCast(self)), support_);
            }
            pub inline fn putSupportHighContrastInk(self: *const T, support_: i16) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).put_SupportHighContrastInk(@as(*const IInkPicture, @ptrCast(self)), support_);
            }
            pub inline fn getSupportHighContrastSelectionUI(self: *const T, support_: ?*i16) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_SupportHighContrastSelectionUI(@as(*const IInkPicture, @ptrCast(self)), support_);
            }
            pub inline fn putSupportHighContrastSelectionUI(self: *const T, support_: i16) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).put_SupportHighContrastSelectionUI(@as(*const IInkPicture, @ptrCast(self)), support_);
            }
            pub inline fn hitTestSelection(self: *const T, x_: i32, y_: i32, sel_area_: ?*SelectionHitResult) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).HitTestSelection(@as(*const IInkPicture, @ptrCast(self)), x_, y_, sel_area_);
            }
            pub inline fn setGestureStatus(self: *const T, gesture_: InkApplicationGesture, listen_: i16) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).SetGestureStatus(@as(*const IInkPicture, @ptrCast(self)), gesture_, listen_);
            }
            pub inline fn getGestureStatus(self: *const T, gesture_: InkApplicationGesture, listening_: ?*i16) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).GetGestureStatus(@as(*const IInkPicture, @ptrCast(self)), gesture_, listening_);
            }
            pub inline fn getWindowInputRectangle(self: *const T, window_input_rectangle_: ?*?*IInkRectangle) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).GetWindowInputRectangle(@as(*const IInkPicture, @ptrCast(self)), window_input_rectangle_);
            }
            pub inline fn setWindowInputRectangle(self: *const T, window_input_rectangle_: ?*IInkRectangle) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).SetWindowInputRectangle(@as(*const IInkPicture, @ptrCast(self)), window_input_rectangle_);
            }
            pub inline fn setAllTabletsMode(self: *const T, use_mouse_for_input_: i16) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).SetAllTabletsMode(@as(*const IInkPicture, @ptrCast(self)), use_mouse_for_input_);
            }
            pub inline fn setSingleTabletIntegratedMode(self: *const T, tablet_: ?*IInkTablet) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).SetSingleTabletIntegratedMode(@as(*const IInkPicture, @ptrCast(self)), tablet_);
            }
            pub inline fn getEventInterest(self: *const T, event_id_: InkCollectorEventInterest, listen_: ?*i16) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).GetEventInterest(@as(*const IInkPicture, @ptrCast(self)), event_id_, listen_);
            }
            pub inline fn setEventInterest(self: *const T, event_id_: InkCollectorEventInterest, listen_: i16) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).SetEventInterest(@as(*const IInkPicture, @ptrCast(self)), event_id_, listen_);
            }
            pub inline fn getInkEnabled(self: *const T, collecting_: ?*i16) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_InkEnabled(@as(*const IInkPicture, @ptrCast(self)), collecting_);
            }
            pub inline fn putInkEnabled(self: *const T, collecting_: i16) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).put_InkEnabled(@as(*const IInkPicture, @ptrCast(self)), collecting_);
            }
            pub inline fn getEnabled(self: *const T, pbool_: ?*i16) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const IInkPicture, @ptrCast(self)), pbool_);
            }
            pub inline fn putEnabled(self: *const T, vbool_: i16) HRESULT {
                return @as(*const IInkPicture.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const IInkPicture, @ptrCast(self)), vbool_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID__IInkPictureEvents_Value = Guid.initString("60ff4fee-22ff-4484-acc1-d308d9cd7ea3");
pub const IID__IInkPictureEvents = &IID__IInkPictureEvents_Value;
pub const _IInkPictureEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkRecognizer_Value = Guid.initString("782bf7cf-034b-4396-8a32-3a1833cf6b56");
pub const IID_IInkRecognizer = &IID_IInkRecognizer_Value;
pub const IInkRecognizer = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizer,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Vendor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizer,
            vendor: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Capabilities: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizer,
            capabilities_flags: ?*InkRecognizerCapabilities,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Languages: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizer,
            languages: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SupportedProperties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizer,
            supported_properties: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PreferredPacketDescription: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizer,
            preferred_packet_description: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateRecognizerContext: *const fn (
            self: *const IInkRecognizer,
            context: ?*?*IInkRecognizerContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IInkRecognizer.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IInkRecognizer, @ptrCast(self)), name_);
            }
            pub inline fn getVendor(self: *const T, vendor_: ?*?BSTR) HRESULT {
                return @as(*const IInkRecognizer.VTable, @ptrCast(self.vtable)).get_Vendor(@as(*const IInkRecognizer, @ptrCast(self)), vendor_);
            }
            pub inline fn getCapabilities(self: *const T, capabilities_flags_: ?*InkRecognizerCapabilities) HRESULT {
                return @as(*const IInkRecognizer.VTable, @ptrCast(self.vtable)).get_Capabilities(@as(*const IInkRecognizer, @ptrCast(self)), capabilities_flags_);
            }
            pub inline fn getLanguages(self: *const T, languages_: ?*VARIANT) HRESULT {
                return @as(*const IInkRecognizer.VTable, @ptrCast(self.vtable)).get_Languages(@as(*const IInkRecognizer, @ptrCast(self)), languages_);
            }
            pub inline fn getSupportedProperties(self: *const T, supported_properties_: ?*VARIANT) HRESULT {
                return @as(*const IInkRecognizer.VTable, @ptrCast(self.vtable)).get_SupportedProperties(@as(*const IInkRecognizer, @ptrCast(self)), supported_properties_);
            }
            pub inline fn getPreferredPacketDescription(self: *const T, preferred_packet_description_: ?*VARIANT) HRESULT {
                return @as(*const IInkRecognizer.VTable, @ptrCast(self.vtable)).get_PreferredPacketDescription(@as(*const IInkRecognizer, @ptrCast(self)), preferred_packet_description_);
            }
            pub inline fn createRecognizerContext(self: *const T, context_: ?*?*IInkRecognizerContext) HRESULT {
                return @as(*const IInkRecognizer.VTable, @ptrCast(self.vtable)).CreateRecognizerContext(@as(*const IInkRecognizer, @ptrCast(self)), context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkRecognizer2_Value = Guid.initString("6110118a-3a75-4ad6-b2aa-04b2b72bbe65");
pub const IID_IInkRecognizer2 = &IID_IInkRecognizer2_Value;
pub const IInkRecognizer2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizer2,
            pbstr_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UnicodeRanges: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizer2,
            unicode_ranges: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getId(self: *const T, pbstr_id_: ?*?BSTR) HRESULT {
                return @as(*const IInkRecognizer2.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IInkRecognizer2, @ptrCast(self)), pbstr_id_);
            }
            pub inline fn getUnicodeRanges(self: *const T, unicode_ranges_: ?*VARIANT) HRESULT {
                return @as(*const IInkRecognizer2.VTable, @ptrCast(self.vtable)).get_UnicodeRanges(@as(*const IInkRecognizer2, @ptrCast(self)), unicode_ranges_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkRecognizers_Value = Guid.initString("9ccc4f12-b0b7-4a8b-bf58-4aeca4e8cefd");
pub const IID_IInkRecognizers = &IID_IInkRecognizers_Value;
pub const IInkRecognizers = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizers,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizers,
            __new_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultRecognizer: *const fn (
            self: *const IInkRecognizers,
            lcid: i32,
            default_recognizer: ?*?*IInkRecognizer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const IInkRecognizers,
            index: i32,
            ink_recognizer: ?*?*IInkRecognizer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const IInkRecognizers.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IInkRecognizers, @ptrCast(self)), count_);
            }
            pub inline fn getNewEnum(self: *const T, __new_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const IInkRecognizers.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IInkRecognizers, @ptrCast(self)), __new_enum_);
            }
            pub inline fn getDefaultRecognizer(self: *const T, lcid_: i32, default_recognizer_: ?*?*IInkRecognizer) HRESULT {
                return @as(*const IInkRecognizers.VTable, @ptrCast(self.vtable)).GetDefaultRecognizer(@as(*const IInkRecognizers, @ptrCast(self)), lcid_, default_recognizer_);
            }
            pub inline fn item(self: *const T, index_: i32, ink_recognizer_: ?*?*IInkRecognizer) HRESULT {
                return @as(*const IInkRecognizers.VTable, @ptrCast(self.vtable)).Item(@as(*const IInkRecognizers, @ptrCast(self)), index_, ink_recognizer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID__IInkRecognitionEvents_Value = Guid.initString("17bce92f-2e21-47fd-9d33-3c6afbfd8c59");
pub const IID__IInkRecognitionEvents = &IID__IInkRecognitionEvents_Value;
pub const _IInkRecognitionEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkRecognizerContext_Value = Guid.initString("c68f52f9-32a3-4625-906c-44fc23b40958");
pub const IID_IInkRecognizerContext = &IID_IInkRecognizerContext_Value;
pub const IInkRecognizerContext = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Strokes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerContext,
            strokes: ?*?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Strokes: *const fn (
            self: *const IInkRecognizerContext,
            strokes: ?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CharacterAutoCompletionMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerContext,
            mode: ?*InkRecognizerCharacterAutoCompletionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CharacterAutoCompletionMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerContext,
            mode: InkRecognizerCharacterAutoCompletionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Factoid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerContext,
            factoid: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Factoid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerContext,
            factoid: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Guide: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerContext,
            recognizer_guide: ?*?*IInkRecognizerGuide,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Guide: *const fn (
            self: *const IInkRecognizerContext,
            recognizer_guide: ?*IInkRecognizerGuide,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrefixText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerContext,
            prefix: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrefixText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerContext,
            prefix: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SuffixText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerContext,
            suffix: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SuffixText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerContext,
            suffix: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RecognitionFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerContext,
            modes: ?*InkRecognitionModes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RecognitionFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerContext,
            modes: InkRecognitionModes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WordList: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerContext,
            word_list: ?*?*IInkWordList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_WordList: *const fn (
            self: *const IInkRecognizerContext,
            word_list: ?*IInkWordList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Recognizer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerContext,
            recognizer: ?*?*IInkRecognizer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Recognize: *const fn (
            self: *const IInkRecognizerContext,
            recognition_status: ?*InkRecognitionStatus,
            recognition_result: ?*?*IInkRecognitionResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopBackgroundRecognition: *const fn (
            self: *const IInkRecognizerContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndInkInput: *const fn (
            self: *const IInkRecognizerContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackgroundRecognize: *const fn (
            self: *const IInkRecognizerContext,
            custom_data: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BackgroundRecognizeWithAlternates: *const fn (
            self: *const IInkRecognizerContext,
            custom_data: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IInkRecognizerContext,
            reco_context: ?*?*IInkRecognizerContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsStringSupported: *const fn (
            self: *const IInkRecognizerContext,
            string: ?BSTR,
            supported: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getStrokes(self: *const T, strokes_: ?*?*IInkStrokes) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).get_Strokes(@as(*const IInkRecognizerContext, @ptrCast(self)), strokes_);
            }
            pub inline fn putrefStrokes(self: *const T, strokes_: ?*IInkStrokes) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).putref_Strokes(@as(*const IInkRecognizerContext, @ptrCast(self)), strokes_);
            }
            pub inline fn getCharacterAutoCompletionMode(self: *const T, mode_: ?*InkRecognizerCharacterAutoCompletionMode) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).get_CharacterAutoCompletionMode(@as(*const IInkRecognizerContext, @ptrCast(self)), mode_);
            }
            pub inline fn putCharacterAutoCompletionMode(self: *const T, mode_: InkRecognizerCharacterAutoCompletionMode) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).put_CharacterAutoCompletionMode(@as(*const IInkRecognizerContext, @ptrCast(self)), mode_);
            }
            pub inline fn getFactoid(self: *const T, factoid_: ?*?BSTR) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).get_Factoid(@as(*const IInkRecognizerContext, @ptrCast(self)), factoid_);
            }
            pub inline fn putFactoid(self: *const T, factoid_: ?BSTR) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).put_Factoid(@as(*const IInkRecognizerContext, @ptrCast(self)), factoid_);
            }
            pub inline fn getGuide(self: *const T, recognizer_guide_: ?*?*IInkRecognizerGuide) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).get_Guide(@as(*const IInkRecognizerContext, @ptrCast(self)), recognizer_guide_);
            }
            pub inline fn putrefGuide(self: *const T, recognizer_guide_: ?*IInkRecognizerGuide) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).putref_Guide(@as(*const IInkRecognizerContext, @ptrCast(self)), recognizer_guide_);
            }
            pub inline fn getPrefixText(self: *const T, prefix_: ?*?BSTR) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).get_PrefixText(@as(*const IInkRecognizerContext, @ptrCast(self)), prefix_);
            }
            pub inline fn putPrefixText(self: *const T, prefix_: ?BSTR) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).put_PrefixText(@as(*const IInkRecognizerContext, @ptrCast(self)), prefix_);
            }
            pub inline fn getSuffixText(self: *const T, suffix_: ?*?BSTR) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).get_SuffixText(@as(*const IInkRecognizerContext, @ptrCast(self)), suffix_);
            }
            pub inline fn putSuffixText(self: *const T, suffix_: ?BSTR) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).put_SuffixText(@as(*const IInkRecognizerContext, @ptrCast(self)), suffix_);
            }
            pub inline fn getRecognitionFlags(self: *const T, modes_: ?*InkRecognitionModes) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).get_RecognitionFlags(@as(*const IInkRecognizerContext, @ptrCast(self)), modes_);
            }
            pub inline fn putRecognitionFlags(self: *const T, modes_: InkRecognitionModes) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).put_RecognitionFlags(@as(*const IInkRecognizerContext, @ptrCast(self)), modes_);
            }
            pub inline fn getWordList(self: *const T, word_list_: ?*?*IInkWordList) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).get_WordList(@as(*const IInkRecognizerContext, @ptrCast(self)), word_list_);
            }
            pub inline fn putrefWordList(self: *const T, word_list_: ?*IInkWordList) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).putref_WordList(@as(*const IInkRecognizerContext, @ptrCast(self)), word_list_);
            }
            pub inline fn getRecognizer(self: *const T, recognizer_: ?*?*IInkRecognizer) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).get_Recognizer(@as(*const IInkRecognizerContext, @ptrCast(self)), recognizer_);
            }
            pub inline fn recognize(self: *const T, recognition_status_: ?*InkRecognitionStatus, recognition_result_: ?*?*IInkRecognitionResult) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).Recognize(@as(*const IInkRecognizerContext, @ptrCast(self)), recognition_status_, recognition_result_);
            }
            pub inline fn stopBackgroundRecognition(self: *const T) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).StopBackgroundRecognition(@as(*const IInkRecognizerContext, @ptrCast(self)));
            }
            pub inline fn endInkInput(self: *const T) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).EndInkInput(@as(*const IInkRecognizerContext, @ptrCast(self)));
            }
            pub inline fn backgroundRecognize(self: *const T, custom_data_: VARIANT) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).BackgroundRecognize(@as(*const IInkRecognizerContext, @ptrCast(self)), custom_data_);
            }
            pub inline fn backgroundRecognizeWithAlternates(self: *const T, custom_data_: VARIANT) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).BackgroundRecognizeWithAlternates(@as(*const IInkRecognizerContext, @ptrCast(self)), custom_data_);
            }
            pub inline fn clone(self: *const T, reco_context_: ?*?*IInkRecognizerContext) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).Clone(@as(*const IInkRecognizerContext, @ptrCast(self)), reco_context_);
            }
            pub inline fn isStringSupported(self: *const T, string_: ?BSTR, supported_: ?*i16) HRESULT {
                return @as(*const IInkRecognizerContext.VTable, @ptrCast(self.vtable)).IsStringSupported(@as(*const IInkRecognizerContext, @ptrCast(self)), string_, supported_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkRecognizerContext2_Value = Guid.initString("d6f0e32f-73d8-408e-8e9f-5fea592c363f");
pub const IID_IInkRecognizerContext2 = &IID_IInkRecognizerContext2_Value;
pub const IInkRecognizerContext2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnabledUnicodeRanges: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerContext2,
            unicode_ranges: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnabledUnicodeRanges: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerContext2,
            unicode_ranges: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getEnabledUnicodeRanges(self: *const T, unicode_ranges_: ?*VARIANT) HRESULT {
                return @as(*const IInkRecognizerContext2.VTable, @ptrCast(self.vtable)).get_EnabledUnicodeRanges(@as(*const IInkRecognizerContext2, @ptrCast(self)), unicode_ranges_);
            }
            pub inline fn putEnabledUnicodeRanges(self: *const T, unicode_ranges_: VARIANT) HRESULT {
                return @as(*const IInkRecognizerContext2.VTable, @ptrCast(self.vtable)).put_EnabledUnicodeRanges(@as(*const IInkRecognizerContext2, @ptrCast(self)), unicode_ranges_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkRecognitionResult_Value = Guid.initString("3bc129a8-86cd-45ad-bde8-e0d32d61c16d");
pub const IID_IInkRecognitionResult = &IID_IInkRecognitionResult_Value;
pub const IInkRecognitionResult = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TopString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognitionResult,
            top_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TopAlternate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognitionResult,
            top_alternate: ?*?*IInkRecognitionAlternate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TopConfidence: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognitionResult,
            top_confidence: ?*InkRecognitionConfidence,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Strokes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognitionResult,
            strokes: ?*?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AlternatesFromSelection: *const fn (
            self: *const IInkRecognitionResult,
            selection_start: i32,
            selection_length: i32,
            maximum_alternates: i32,
            alternates_from_selection: ?*?*IInkRecognitionAlternates,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ModifyTopAlternate: *const fn (
            self: *const IInkRecognitionResult,
            alternate: ?*IInkRecognitionAlternate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetResultOnStrokes: *const fn (
            self: *const IInkRecognitionResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getTopString(self: *const T, top_string_: ?*?BSTR) HRESULT {
                return @as(*const IInkRecognitionResult.VTable, @ptrCast(self.vtable)).get_TopString(@as(*const IInkRecognitionResult, @ptrCast(self)), top_string_);
            }
            pub inline fn getTopAlternate(self: *const T, top_alternate_: ?*?*IInkRecognitionAlternate) HRESULT {
                return @as(*const IInkRecognitionResult.VTable, @ptrCast(self.vtable)).get_TopAlternate(@as(*const IInkRecognitionResult, @ptrCast(self)), top_alternate_);
            }
            pub inline fn getTopConfidence(self: *const T, top_confidence_: ?*InkRecognitionConfidence) HRESULT {
                return @as(*const IInkRecognitionResult.VTable, @ptrCast(self.vtable)).get_TopConfidence(@as(*const IInkRecognitionResult, @ptrCast(self)), top_confidence_);
            }
            pub inline fn getStrokes(self: *const T, strokes_: ?*?*IInkStrokes) HRESULT {
                return @as(*const IInkRecognitionResult.VTable, @ptrCast(self.vtable)).get_Strokes(@as(*const IInkRecognitionResult, @ptrCast(self)), strokes_);
            }
            pub inline fn alternatesFromSelection(self: *const T, selection_start_: i32, selection_length_: i32, maximum_alternates_: i32, alternates_from_selection_: ?*?*IInkRecognitionAlternates) HRESULT {
                return @as(*const IInkRecognitionResult.VTable, @ptrCast(self.vtable)).AlternatesFromSelection(@as(*const IInkRecognitionResult, @ptrCast(self)), selection_start_, selection_length_, maximum_alternates_, alternates_from_selection_);
            }
            pub inline fn modifyTopAlternate(self: *const T, alternate_: ?*IInkRecognitionAlternate) HRESULT {
                return @as(*const IInkRecognitionResult.VTable, @ptrCast(self.vtable)).ModifyTopAlternate(@as(*const IInkRecognitionResult, @ptrCast(self)), alternate_);
            }
            pub inline fn setResultOnStrokes(self: *const T) HRESULT {
                return @as(*const IInkRecognitionResult.VTable, @ptrCast(self.vtable)).SetResultOnStrokes(@as(*const IInkRecognitionResult, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkRecognitionAlternate_Value = Guid.initString("b7e660ad-77e4-429b-adda-873780d1fc4a");
pub const IID_IInkRecognitionAlternate = &IID_IInkRecognitionAlternate_Value;
pub const IInkRecognitionAlternate = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_String: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognitionAlternate,
            reco_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Confidence: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognitionAlternate,
            confidence: ?*InkRecognitionConfidence,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Baseline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognitionAlternate,
            baseline: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Midline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognitionAlternate,
            midline: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Ascender: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognitionAlternate,
            ascender: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Descender: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognitionAlternate,
            descender: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LineNumber: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognitionAlternate,
            line_number: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Strokes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognitionAlternate,
            strokes: ?*?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LineAlternates: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognitionAlternate,
            line_alternates: ?*?*IInkRecognitionAlternates,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ConfidenceAlternates: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognitionAlternate,
            confidence_alternates: ?*?*IInkRecognitionAlternates,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokesFromStrokeRanges: *const fn (
            self: *const IInkRecognitionAlternate,
            strokes: ?*IInkStrokes,
            get_strokes_from_stroke_ranges: ?*?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStrokesFromTextRange: *const fn (
            self: *const IInkRecognitionAlternate,
            selection_start: ?*i32,
            selection_length: ?*i32,
            get_strokes_from_text_range: ?*?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTextRangeFromStrokes: *const fn (
            self: *const IInkRecognitionAlternate,
            strokes: ?*IInkStrokes,
            selection_start: ?*i32,
            selection_length: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AlternatesWithConstantPropertyValues: *const fn (
            self: *const IInkRecognitionAlternate,
            property_type: ?BSTR,
            alternates_with_constant_property_values: ?*?*IInkRecognitionAlternates,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyValue: *const fn (
            self: *const IInkRecognitionAlternate,
            property_type: ?BSTR,
            property_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getString(self: *const T, reco_string_: ?*?BSTR) HRESULT {
                return @as(*const IInkRecognitionAlternate.VTable, @ptrCast(self.vtable)).get_String(@as(*const IInkRecognitionAlternate, @ptrCast(self)), reco_string_);
            }
            pub inline fn getConfidence(self: *const T, confidence_: ?*InkRecognitionConfidence) HRESULT {
                return @as(*const IInkRecognitionAlternate.VTable, @ptrCast(self.vtable)).get_Confidence(@as(*const IInkRecognitionAlternate, @ptrCast(self)), confidence_);
            }
            pub inline fn getBaseline(self: *const T, baseline_: ?*VARIANT) HRESULT {
                return @as(*const IInkRecognitionAlternate.VTable, @ptrCast(self.vtable)).get_Baseline(@as(*const IInkRecognitionAlternate, @ptrCast(self)), baseline_);
            }
            pub inline fn getMidline(self: *const T, midline_: ?*VARIANT) HRESULT {
                return @as(*const IInkRecognitionAlternate.VTable, @ptrCast(self.vtable)).get_Midline(@as(*const IInkRecognitionAlternate, @ptrCast(self)), midline_);
            }
            pub inline fn getAscender(self: *const T, ascender_: ?*VARIANT) HRESULT {
                return @as(*const IInkRecognitionAlternate.VTable, @ptrCast(self.vtable)).get_Ascender(@as(*const IInkRecognitionAlternate, @ptrCast(self)), ascender_);
            }
            pub inline fn getDescender(self: *const T, descender_: ?*VARIANT) HRESULT {
                return @as(*const IInkRecognitionAlternate.VTable, @ptrCast(self.vtable)).get_Descender(@as(*const IInkRecognitionAlternate, @ptrCast(self)), descender_);
            }
            pub inline fn getLineNumber(self: *const T, line_number_: ?*i32) HRESULT {
                return @as(*const IInkRecognitionAlternate.VTable, @ptrCast(self.vtable)).get_LineNumber(@as(*const IInkRecognitionAlternate, @ptrCast(self)), line_number_);
            }
            pub inline fn getStrokes(self: *const T, strokes_: ?*?*IInkStrokes) HRESULT {
                return @as(*const IInkRecognitionAlternate.VTable, @ptrCast(self.vtable)).get_Strokes(@as(*const IInkRecognitionAlternate, @ptrCast(self)), strokes_);
            }
            pub inline fn getLineAlternates(self: *const T, line_alternates_: ?*?*IInkRecognitionAlternates) HRESULT {
                return @as(*const IInkRecognitionAlternate.VTable, @ptrCast(self.vtable)).get_LineAlternates(@as(*const IInkRecognitionAlternate, @ptrCast(self)), line_alternates_);
            }
            pub inline fn getConfidenceAlternates(self: *const T, confidence_alternates_: ?*?*IInkRecognitionAlternates) HRESULT {
                return @as(*const IInkRecognitionAlternate.VTable, @ptrCast(self.vtable)).get_ConfidenceAlternates(@as(*const IInkRecognitionAlternate, @ptrCast(self)), confidence_alternates_);
            }
            pub inline fn getStrokesFromStrokeRanges(self: *const T, strokes_: ?*IInkStrokes, get_strokes_from_stroke_ranges_: ?*?*IInkStrokes) HRESULT {
                return @as(*const IInkRecognitionAlternate.VTable, @ptrCast(self.vtable)).GetStrokesFromStrokeRanges(@as(*const IInkRecognitionAlternate, @ptrCast(self)), strokes_, get_strokes_from_stroke_ranges_);
            }
            pub inline fn getStrokesFromTextRange(self: *const T, selection_start_: ?*i32, selection_length_: ?*i32, get_strokes_from_text_range_: ?*?*IInkStrokes) HRESULT {
                return @as(*const IInkRecognitionAlternate.VTable, @ptrCast(self.vtable)).GetStrokesFromTextRange(@as(*const IInkRecognitionAlternate, @ptrCast(self)), selection_start_, selection_length_, get_strokes_from_text_range_);
            }
            pub inline fn getTextRangeFromStrokes(self: *const T, strokes_: ?*IInkStrokes, selection_start_: ?*i32, selection_length_: ?*i32) HRESULT {
                return @as(*const IInkRecognitionAlternate.VTable, @ptrCast(self.vtable)).GetTextRangeFromStrokes(@as(*const IInkRecognitionAlternate, @ptrCast(self)), strokes_, selection_start_, selection_length_);
            }
            pub inline fn alternatesWithConstantPropertyValues(self: *const T, property_type_: ?BSTR, alternates_with_constant_property_values_: ?*?*IInkRecognitionAlternates) HRESULT {
                return @as(*const IInkRecognitionAlternate.VTable, @ptrCast(self.vtable)).AlternatesWithConstantPropertyValues(@as(*const IInkRecognitionAlternate, @ptrCast(self)), property_type_, alternates_with_constant_property_values_);
            }
            pub inline fn getPropertyValue(self: *const T, property_type_: ?BSTR, property_value_: ?*VARIANT) HRESULT {
                return @as(*const IInkRecognitionAlternate.VTable, @ptrCast(self.vtable)).GetPropertyValue(@as(*const IInkRecognitionAlternate, @ptrCast(self)), property_type_, property_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkRecognitionAlternates_Value = Guid.initString("286a167f-9f19-4c61-9d53-4f07be622b84");
pub const IID_IInkRecognitionAlternates = &IID_IInkRecognitionAlternates_Value;
pub const IInkRecognitionAlternates = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognitionAlternates,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognitionAlternates,
            __new_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Strokes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognitionAlternates,
            strokes: ?*?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const IInkRecognitionAlternates,
            index: i32,
            ink_reco_alternate: ?*?*IInkRecognitionAlternate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const IInkRecognitionAlternates.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IInkRecognitionAlternates, @ptrCast(self)), count_);
            }
            pub inline fn getNewEnum(self: *const T, __new_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const IInkRecognitionAlternates.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IInkRecognitionAlternates, @ptrCast(self)), __new_enum_);
            }
            pub inline fn getStrokes(self: *const T, strokes_: ?*?*IInkStrokes) HRESULT {
                return @as(*const IInkRecognitionAlternates.VTable, @ptrCast(self.vtable)).get_Strokes(@as(*const IInkRecognitionAlternates, @ptrCast(self)), strokes_);
            }
            pub inline fn item(self: *const T, index_: i32, ink_reco_alternate_: ?*?*IInkRecognitionAlternate) HRESULT {
                return @as(*const IInkRecognitionAlternates.VTable, @ptrCast(self.vtable)).Item(@as(*const IInkRecognitionAlternates, @ptrCast(self)), index_, ink_reco_alternate_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkRecognizerGuide_Value = Guid.initString("d934be07-7b84-4208-9136-83c20994e905");
pub const IID_IInkRecognizerGuide = &IID_IInkRecognizerGuide_Value;
pub const IInkRecognizerGuide = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WritingBox: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerGuide,
            rectangle: ?*?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WritingBox: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerGuide,
            rectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DrawnBox: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerGuide,
            rectangle: ?*?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DrawnBox: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerGuide,
            rectangle: ?*IInkRectangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Rows: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerGuide,
            units: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Rows: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerGuide,
            units: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Columns: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerGuide,
            units: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Columns: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerGuide,
            units: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Midline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerGuide,
            units: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Midline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerGuide,
            units: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GuideData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerGuide,
            p_reco_guide: ?*InkRecoGuide,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GuideData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkRecognizerGuide,
            reco_guide: InkRecoGuide,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getWritingBox(self: *const T, rectangle_: ?*?*IInkRectangle) HRESULT {
                return @as(*const IInkRecognizerGuide.VTable, @ptrCast(self.vtable)).get_WritingBox(@as(*const IInkRecognizerGuide, @ptrCast(self)), rectangle_);
            }
            pub inline fn putWritingBox(self: *const T, rectangle_: ?*IInkRectangle) HRESULT {
                return @as(*const IInkRecognizerGuide.VTable, @ptrCast(self.vtable)).put_WritingBox(@as(*const IInkRecognizerGuide, @ptrCast(self)), rectangle_);
            }
            pub inline fn getDrawnBox(self: *const T, rectangle_: ?*?*IInkRectangle) HRESULT {
                return @as(*const IInkRecognizerGuide.VTable, @ptrCast(self.vtable)).get_DrawnBox(@as(*const IInkRecognizerGuide, @ptrCast(self)), rectangle_);
            }
            pub inline fn putDrawnBox(self: *const T, rectangle_: ?*IInkRectangle) HRESULT {
                return @as(*const IInkRecognizerGuide.VTable, @ptrCast(self.vtable)).put_DrawnBox(@as(*const IInkRecognizerGuide, @ptrCast(self)), rectangle_);
            }
            pub inline fn getRows(self: *const T, units_: ?*i32) HRESULT {
                return @as(*const IInkRecognizerGuide.VTable, @ptrCast(self.vtable)).get_Rows(@as(*const IInkRecognizerGuide, @ptrCast(self)), units_);
            }
            pub inline fn putRows(self: *const T, units_: i32) HRESULT {
                return @as(*const IInkRecognizerGuide.VTable, @ptrCast(self.vtable)).put_Rows(@as(*const IInkRecognizerGuide, @ptrCast(self)), units_);
            }
            pub inline fn getColumns(self: *const T, units_: ?*i32) HRESULT {
                return @as(*const IInkRecognizerGuide.VTable, @ptrCast(self.vtable)).get_Columns(@as(*const IInkRecognizerGuide, @ptrCast(self)), units_);
            }
            pub inline fn putColumns(self: *const T, units_: i32) HRESULT {
                return @as(*const IInkRecognizerGuide.VTable, @ptrCast(self.vtable)).put_Columns(@as(*const IInkRecognizerGuide, @ptrCast(self)), units_);
            }
            pub inline fn getMidline(self: *const T, units_: ?*i32) HRESULT {
                return @as(*const IInkRecognizerGuide.VTable, @ptrCast(self.vtable)).get_Midline(@as(*const IInkRecognizerGuide, @ptrCast(self)), units_);
            }
            pub inline fn putMidline(self: *const T, units_: i32) HRESULT {
                return @as(*const IInkRecognizerGuide.VTable, @ptrCast(self.vtable)).put_Midline(@as(*const IInkRecognizerGuide, @ptrCast(self)), units_);
            }
            pub inline fn getGuideData(self: *const T, p_reco_guide_: ?*InkRecoGuide) HRESULT {
                return @as(*const IInkRecognizerGuide.VTable, @ptrCast(self.vtable)).get_GuideData(@as(*const IInkRecognizerGuide, @ptrCast(self)), p_reco_guide_);
            }
            pub inline fn putGuideData(self: *const T, reco_guide_: InkRecoGuide) HRESULT {
                return @as(*const IInkRecognizerGuide.VTable, @ptrCast(self.vtable)).put_GuideData(@as(*const IInkRecognizerGuide, @ptrCast(self)), reco_guide_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IInkWordList_Value = Guid.initString("76ba3491-cb2f-406b-9961-0e0c4cdaaef2");
pub const IID_IInkWordList = &IID_IInkWordList_Value;
pub const IInkWordList = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        AddWord: *const fn (
            self: *const IInkWordList,
            new_word: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveWord: *const fn (
            self: *const IInkWordList,
            remove_word: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Merge: *const fn (
            self: *const IInkWordList,
            merge_word_list: ?*IInkWordList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn addWord(self: *const T, new_word_: ?BSTR) HRESULT {
                return @as(*const IInkWordList.VTable, @ptrCast(self.vtable)).AddWord(@as(*const IInkWordList, @ptrCast(self)), new_word_);
            }
            pub inline fn removeWord(self: *const T, remove_word_: ?BSTR) HRESULT {
                return @as(*const IInkWordList.VTable, @ptrCast(self.vtable)).RemoveWord(@as(*const IInkWordList, @ptrCast(self)), remove_word_);
            }
            pub inline fn merge(self: *const T, merge_word_list_: ?*IInkWordList) HRESULT {
                return @as(*const IInkWordList.VTable, @ptrCast(self.vtable)).Merge(@as(*const IInkWordList, @ptrCast(self)), merge_word_list_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkWordList2_Value = Guid.initString("14542586-11bf-4f5f-b6e7-49d0744aab6e");
pub const IID_IInkWordList2 = &IID_IInkWordList2_Value;
pub const IInkWordList2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        AddWords: *const fn (
            self: *const IInkWordList2,
            new_words: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn addWords(self: *const T, new_words_: ?BSTR) HRESULT {
                return @as(*const IInkWordList2.VTable, @ptrCast(self.vtable)).AddWords(@as(*const IInkWordList2, @ptrCast(self)), new_words_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IInk_Value = Guid.initString("03f8e511-43a1-11d3-8bb6-0080c7d6bad5");
pub const IID_IInk = &IID_IInk_Value;
pub const IInk = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkLineInfo_Value = Guid.initString("9c1c5ad6-f22f-4de4-b453-a2cc482e7c33");
pub const IID_IInkLineInfo = &IID_IInkLineInfo_Value;
pub const IInkLineInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFormat: *const fn (
            self: *const IInkLineInfo,
            pim: ?*INKMETRIC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormat: *const fn (
            self: *const IInkLineInfo,
            pim: ?*INKMETRIC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInkExtent: *const fn (
            self: *const IInkLineInfo,
            pim: ?*INKMETRIC,
            pn_width: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCandidate: *const fn (
            self: *const IInkLineInfo,
            n_candidate_num: u32,
            pwc_recog_word: ?PWSTR,
            pcwc_recog_word: ?*u32,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCandidate: *const fn (
            self: *const IInkLineInfo,
            n_candidate_num: u32,
            str_recog_word: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Recognize: *const fn (
            self: *const IInkLineInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setFormat(self: *const T, pim_: ?*INKMETRIC) HRESULT {
                return @as(*const IInkLineInfo.VTable, @ptrCast(self.vtable)).SetFormat(@as(*const IInkLineInfo, @ptrCast(self)), pim_);
            }
            pub inline fn getFormat(self: *const T, pim_: ?*INKMETRIC) HRESULT {
                return @as(*const IInkLineInfo.VTable, @ptrCast(self.vtable)).GetFormat(@as(*const IInkLineInfo, @ptrCast(self)), pim_);
            }
            pub inline fn getInkExtent(self: *const T, pim_: ?*INKMETRIC, pn_width_: ?*u32) HRESULT {
                return @as(*const IInkLineInfo.VTable, @ptrCast(self.vtable)).GetInkExtent(@as(*const IInkLineInfo, @ptrCast(self)), pim_, pn_width_);
            }
            pub inline fn getCandidate(self: *const T, n_candidate_num_: u32, pwc_recog_word_: ?PWSTR, pcwc_recog_word_: ?*u32, dw_flags_: u32) HRESULT {
                return @as(*const IInkLineInfo.VTable, @ptrCast(self.vtable)).GetCandidate(@as(*const IInkLineInfo, @ptrCast(self)), n_candidate_num_, pwc_recog_word_, pcwc_recog_word_, dw_flags_);
            }
            pub inline fn setCandidate(self: *const T, n_candidate_num_: u32, str_recog_word_: ?PWSTR) HRESULT {
                return @as(*const IInkLineInfo.VTable, @ptrCast(self.vtable)).SetCandidate(@as(*const IInkLineInfo, @ptrCast(self)), n_candidate_num_, str_recog_word_);
            }
            pub inline fn recognize(self: *const T) HRESULT {
                return @as(*const IInkLineInfo.VTable, @ptrCast(self.vtable)).Recognize(@as(*const IInkLineInfo, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ISketchInk_Value = Guid.initString("b4563688-98eb-4646-b279-44da14d45748");
pub const IID_ISketchInk = &IID_ISketchInk_Value;
pub const ISketchInk = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_InkDivider_Value = Guid.initString("8854f6a0-4683-4ae7-9191-752fe64612c3");
pub const CLSID_InkDivider = &CLSID_InkDivider_Value;

pub const InkDivisionType = enum(i32) {
    Segment = 0,
    Line = 1,
    Paragraph = 2,
    Drawing = 3,
};
pub const IDT_Segment = InkDivisionType.Segment;
pub const IDT_Line = InkDivisionType.Line;
pub const IDT_Paragraph = InkDivisionType.Paragraph;
pub const IDT_Drawing = InkDivisionType.Drawing;

pub const DISPID_InkDivider = enum(i32) {
    Strokes = 1,
    RecognizerContext = 2,
    LineHeight = 3,
    Divide = 4,
};
pub const DISPID_IInkDivider_Strokes = DISPID_InkDivider.Strokes;
pub const DISPID_IInkDivider_RecognizerContext = DISPID_InkDivider.RecognizerContext;
pub const DISPID_IInkDivider_LineHeight = DISPID_InkDivider.LineHeight;
pub const DISPID_IInkDivider_Divide = DISPID_InkDivider.Divide;

pub const DISPID_InkDivisionResult = enum(i32) {
    Strokes = 1,
    ResultByType = 2,
};
pub const DISPID_IInkDivisionResult_Strokes = DISPID_InkDivisionResult.Strokes;
pub const DISPID_IInkDivisionResult_ResultByType = DISPID_InkDivisionResult.ResultByType;

pub const DISPID_InkDivisionUnit = enum(i32) {
    Strokes = 1,
    DivisionType = 2,
    RecognizedString = 3,
    RotationTransform = 4,
};
pub const DISPID_IInkDivisionUnit_Strokes = DISPID_InkDivisionUnit.Strokes;
pub const DISPID_IInkDivisionUnit_DivisionType = DISPID_InkDivisionUnit.DivisionType;
pub const DISPID_IInkDivisionUnit_RecognizedString = DISPID_InkDivisionUnit.RecognizedString;
pub const DISPID_IInkDivisionUnit_RotationTransform = DISPID_InkDivisionUnit.RotationTransform;

pub const DISPID_InkDivisionUnits = enum(i32) {
    NewEnum = -4,
    Item = 0,
    Count = 1,
};
pub const DISPID_IInkDivisionUnits_NewEnum = DISPID_InkDivisionUnits.NewEnum;
pub const DISPID_IInkDivisionUnits_Item = DISPID_InkDivisionUnits.Item;
pub const DISPID_IInkDivisionUnits_Count = DISPID_InkDivisionUnits.Count;

const IID_IInkDivider_Value = Guid.initString("5de00405-f9a4-4651-b0c5-c317defd58b9");
pub const IID_IInkDivider = &IID_IInkDivider_Value;
pub const IInkDivider = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Strokes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDivider,
            strokes: ?*?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Strokes: *const fn (
            self: *const IInkDivider,
            strokes: ?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RecognizerContext: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDivider,
            recognizer_context: ?*?*IInkRecognizerContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_RecognizerContext: *const fn (
            self: *const IInkDivider,
            recognizer_context: ?*IInkRecognizerContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LineHeight: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDivider,
            line_height: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LineHeight: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDivider,
            line_height: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Divide: *const fn (
            self: *const IInkDivider,
            ink_division_result: ?*?*IInkDivisionResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getStrokes(self: *const T, strokes_: ?*?*IInkStrokes) HRESULT {
                return @as(*const IInkDivider.VTable, @ptrCast(self.vtable)).get_Strokes(@as(*const IInkDivider, @ptrCast(self)), strokes_);
            }
            pub inline fn putrefStrokes(self: *const T, strokes_: ?*IInkStrokes) HRESULT {
                return @as(*const IInkDivider.VTable, @ptrCast(self.vtable)).putref_Strokes(@as(*const IInkDivider, @ptrCast(self)), strokes_);
            }
            pub inline fn getRecognizerContext(self: *const T, recognizer_context_: ?*?*IInkRecognizerContext) HRESULT {
                return @as(*const IInkDivider.VTable, @ptrCast(self.vtable)).get_RecognizerContext(@as(*const IInkDivider, @ptrCast(self)), recognizer_context_);
            }
            pub inline fn putrefRecognizerContext(self: *const T, recognizer_context_: ?*IInkRecognizerContext) HRESULT {
                return @as(*const IInkDivider.VTable, @ptrCast(self.vtable)).putref_RecognizerContext(@as(*const IInkDivider, @ptrCast(self)), recognizer_context_);
            }
            pub inline fn getLineHeight(self: *const T, line_height_: ?*i32) HRESULT {
                return @as(*const IInkDivider.VTable, @ptrCast(self.vtable)).get_LineHeight(@as(*const IInkDivider, @ptrCast(self)), line_height_);
            }
            pub inline fn putLineHeight(self: *const T, line_height_: i32) HRESULT {
                return @as(*const IInkDivider.VTable, @ptrCast(self.vtable)).put_LineHeight(@as(*const IInkDivider, @ptrCast(self)), line_height_);
            }
            pub inline fn divide(self: *const T, ink_division_result_: ?*?*IInkDivisionResult) HRESULT {
                return @as(*const IInkDivider.VTable, @ptrCast(self.vtable)).Divide(@as(*const IInkDivider, @ptrCast(self)), ink_division_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkDivisionResult_Value = Guid.initString("2dbec0a7-74c7-4b38-81eb-aa8ef0c24900");
pub const IID_IInkDivisionResult = &IID_IInkDivisionResult_Value;
pub const IInkDivisionResult = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Strokes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDivisionResult,
            strokes: ?*?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResultByType: *const fn (
            self: *const IInkDivisionResult,
            division_type: InkDivisionType,
            ink_division_units: ?*?*IInkDivisionUnits,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getStrokes(self: *const T, strokes_: ?*?*IInkStrokes) HRESULT {
                return @as(*const IInkDivisionResult.VTable, @ptrCast(self.vtable)).get_Strokes(@as(*const IInkDivisionResult, @ptrCast(self)), strokes_);
            }
            pub inline fn resultByType(self: *const T, division_type_: InkDivisionType, ink_division_units_: ?*?*IInkDivisionUnits) HRESULT {
                return @as(*const IInkDivisionResult.VTable, @ptrCast(self.vtable)).ResultByType(@as(*const IInkDivisionResult, @ptrCast(self)), division_type_, ink_division_units_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkDivisionUnit_Value = Guid.initString("85aee342-48b0-4244-9dd5-1ed435410fab");
pub const IID_IInkDivisionUnit = &IID_IInkDivisionUnit_Value;
pub const IInkDivisionUnit = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Strokes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDivisionUnit,
            strokes: ?*?*IInkStrokes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DivisionType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDivisionUnit,
            division_type: ?*InkDivisionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RecognizedString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDivisionUnit,
            reco_string: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RotationTransform: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDivisionUnit,
            rotation_transform: ?*?*IInkTransform,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getStrokes(self: *const T, strokes_: ?*?*IInkStrokes) HRESULT {
                return @as(*const IInkDivisionUnit.VTable, @ptrCast(self.vtable)).get_Strokes(@as(*const IInkDivisionUnit, @ptrCast(self)), strokes_);
            }
            pub inline fn getDivisionType(self: *const T, division_type_: ?*InkDivisionType) HRESULT {
                return @as(*const IInkDivisionUnit.VTable, @ptrCast(self.vtable)).get_DivisionType(@as(*const IInkDivisionUnit, @ptrCast(self)), division_type_);
            }
            pub inline fn getRecognizedString(self: *const T, reco_string_: ?*?BSTR) HRESULT {
                return @as(*const IInkDivisionUnit.VTable, @ptrCast(self.vtable)).get_RecognizedString(@as(*const IInkDivisionUnit, @ptrCast(self)), reco_string_);
            }
            pub inline fn getRotationTransform(self: *const T, rotation_transform_: ?*?*IInkTransform) HRESULT {
                return @as(*const IInkDivisionUnit.VTable, @ptrCast(self.vtable)).get_RotationTransform(@as(*const IInkDivisionUnit, @ptrCast(self)), rotation_transform_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInkDivisionUnits_Value = Guid.initString("1bb5ddc2-31cc-4135-ab82-2c66c9f00c41");
pub const IID_IInkDivisionUnits = &IID_IInkDivisionUnits_Value;
pub const IInkDivisionUnits = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDivisionUnits,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkDivisionUnits,
            __new_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const IInkDivisionUnits,
            index: i32,
            ink_division_unit: ?*?*IInkDivisionUnit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const IInkDivisionUnits.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IInkDivisionUnits, @ptrCast(self)), count_);
            }
            pub inline fn getNewEnum(self: *const T, __new_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const IInkDivisionUnits.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IInkDivisionUnits, @ptrCast(self)), __new_enum_);
            }
            pub inline fn item(self: *const T, index_: i32, ink_division_unit_: ?*?*IInkDivisionUnit) HRESULT {
                return @as(*const IInkDivisionUnits.VTable, @ptrCast(self.vtable)).Item(@as(*const IInkDivisionUnits, @ptrCast(self)), index_, ink_division_unit_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_HandwrittenTextInsertion_Value = Guid.initString("9f074ee2-e6e9-4d8a-a047-eb5b5c3c55da");
pub const CLSID_HandwrittenTextInsertion = &CLSID_HandwrittenTextInsertion_Value;

const CLSID_PenInputPanel_Value = Guid.initString("f744e496-1b5a-489e-81dc-fbd7ac6298a8");
pub const CLSID_PenInputPanel = &CLSID_PenInputPanel_Value;

const CLSID_TextInputPanel_Value = Guid.initString("f9b189d7-228b-4f2b-8650-b97f59e02c8c");
pub const CLSID_TextInputPanel = &CLSID_TextInputPanel_Value;

const CLSID_PenInputPanel_Internal_Value = Guid.initString("802b1fb9-056b-4720-b0cc-80d23b71171e");
pub const CLSID_PenInputPanel_Internal = &CLSID_PenInputPanel_Internal_Value;

pub const DISPID_PenInputPanel = enum(i32) {
    AttachedEditWindow = 0,
    Factoid = 1,
    CurrentPanel = 2,
    DefaultPanel = 3,
    Visible = 4,
    Top = 5,
    Left = 6,
    Width = 7,
    Height = 8,
    MoveTo = 9,
    CommitPendingInput = 10,
    Refresh = 11,
    Busy = 12,
    VerticalOffset = 13,
    HorizontalOffset = 14,
    EnableTsf = 15,
    AutoShow = 16,
};
pub const DISPID_PIPAttachedEditWindow = DISPID_PenInputPanel.AttachedEditWindow;
pub const DISPID_PIPFactoid = DISPID_PenInputPanel.Factoid;
pub const DISPID_PIPCurrentPanel = DISPID_PenInputPanel.CurrentPanel;
pub const DISPID_PIPDefaultPanel = DISPID_PenInputPanel.DefaultPanel;
pub const DISPID_PIPVisible = DISPID_PenInputPanel.Visible;
pub const DISPID_PIPTop = DISPID_PenInputPanel.Top;
pub const DISPID_PIPLeft = DISPID_PenInputPanel.Left;
pub const DISPID_PIPWidth = DISPID_PenInputPanel.Width;
pub const DISPID_PIPHeight = DISPID_PenInputPanel.Height;
pub const DISPID_PIPMoveTo = DISPID_PenInputPanel.MoveTo;
pub const DISPID_PIPCommitPendingInput = DISPID_PenInputPanel.CommitPendingInput;
pub const DISPID_PIPRefresh = DISPID_PenInputPanel.Refresh;
pub const DISPID_PIPBusy = DISPID_PenInputPanel.Busy;
pub const DISPID_PIPVerticalOffset = DISPID_PenInputPanel.VerticalOffset;
pub const DISPID_PIPHorizontalOffset = DISPID_PenInputPanel.HorizontalOffset;
pub const DISPID_PIPEnableTsf = DISPID_PenInputPanel.EnableTsf;
pub const DISPID_PIPAutoShow = DISPID_PenInputPanel.AutoShow;

pub const DISPID_PenInputPanelEvents = enum(i32) {
    VisibleChanged = 0,
    PanelChanged = 1,
    InputFailed = 2,
    PanelMoving = 3,
};
pub const DISPID_PIPEVisibleChanged = DISPID_PenInputPanelEvents.VisibleChanged;
pub const DISPID_PIPEPanelChanged = DISPID_PenInputPanelEvents.PanelChanged;
pub const DISPID_PIPEInputFailed = DISPID_PenInputPanelEvents.InputFailed;
pub const DISPID_PIPEPanelMoving = DISPID_PenInputPanelEvents.PanelMoving;

pub const VisualState = enum(i32) {
    InPlace = 0,
    Floating = 1,
    DockedTop = 2,
    DockedBottom = 3,
    Closed = 4,
};
pub const InPlace = VisualState.InPlace;
pub const Floating = VisualState.Floating;
pub const DockedTop = VisualState.DockedTop;
pub const DockedBottom = VisualState.DockedBottom;
pub const Closed = VisualState.Closed;

pub const InteractionMode = enum(i32) {
    InPlace = 0,
    Floating = 1,
    DockedTop = 2,
    DockedBottom = 3,
};
pub const InteractionMode_InPlace = InteractionMode.InPlace;
pub const InteractionMode_Floating = InteractionMode.Floating;
pub const InteractionMode_DockedTop = InteractionMode.DockedTop;
pub const InteractionMode_DockedBottom = InteractionMode.DockedBottom;

pub const InPlaceState = enum(i32) {
    Auto = 0,
    HoverTarget = 1,
    Expanded = 2,
};
pub const InPlaceState_Auto = InPlaceState.Auto;
pub const InPlaceState_HoverTarget = InPlaceState.HoverTarget;
pub const InPlaceState_Expanded = InPlaceState.Expanded;

pub const PanelInputArea = enum(i32) {
    Auto = 0,
    Keyboard = 1,
    WritingPad = 2,
    CharacterPad = 3,
};
pub const PanelInputArea_Auto = PanelInputArea.Auto;
pub const PanelInputArea_Keyboard = PanelInputArea.Keyboard;
pub const PanelInputArea_WritingPad = PanelInputArea.WritingPad;
pub const PanelInputArea_CharacterPad = PanelInputArea.CharacterPad;

pub const CorrectionMode = enum(i32) {
    NotVisible = 0,
    PreInsertion = 1,
    PostInsertionCollapsed = 2,
    PostInsertionExpanded = 3,
};
pub const CorrectionMode_NotVisible = CorrectionMode.NotVisible;
pub const CorrectionMode_PreInsertion = CorrectionMode.PreInsertion;
pub const CorrectionMode_PostInsertionCollapsed = CorrectionMode.PostInsertionCollapsed;
pub const CorrectionMode_PostInsertionExpanded = CorrectionMode.PostInsertionExpanded;

pub const CorrectionPosition = enum(i32) {
    Auto = 0,
    Bottom = 1,
    Top = 2,
};
pub const CorrectionPosition_Auto = CorrectionPosition.Auto;
pub const CorrectionPosition_Bottom = CorrectionPosition.Bottom;
pub const CorrectionPosition_Top = CorrectionPosition.Top;

pub const InPlaceDirection = enum(i32) {
    Auto = 0,
    Bottom = 1,
    Top = 2,
};
pub const InPlaceDirection_Auto = InPlaceDirection.Auto;
pub const InPlaceDirection_Bottom = InPlaceDirection.Bottom;
pub const InPlaceDirection_Top = InPlaceDirection.Top;

pub const EventMask = enum(i32) {
    InPlaceStateChanging = 1,
    InPlaceStateChanged = 2,
    InPlaceSizeChanging = 4,
    InPlaceSizeChanged = 8,
    InputAreaChanging = 16,
    InputAreaChanged = 32,
    CorrectionModeChanging = 64,
    CorrectionModeChanged = 128,
    InPlaceVisibilityChanging = 256,
    InPlaceVisibilityChanged = 512,
    TextInserting = 1024,
    TextInserted = 2048,
    All = 4095,
};
pub const EventMask_InPlaceStateChanging = EventMask.InPlaceStateChanging;
pub const EventMask_InPlaceStateChanged = EventMask.InPlaceStateChanged;
pub const EventMask_InPlaceSizeChanging = EventMask.InPlaceSizeChanging;
pub const EventMask_InPlaceSizeChanged = EventMask.InPlaceSizeChanged;
pub const EventMask_InputAreaChanging = EventMask.InputAreaChanging;
pub const EventMask_InputAreaChanged = EventMask.InputAreaChanged;
pub const EventMask_CorrectionModeChanging = EventMask.CorrectionModeChanging;
pub const EventMask_CorrectionModeChanged = EventMask.CorrectionModeChanged;
pub const EventMask_InPlaceVisibilityChanging = EventMask.InPlaceVisibilityChanging;
pub const EventMask_InPlaceVisibilityChanged = EventMask.InPlaceVisibilityChanged;
pub const EventMask_TextInserting = EventMask.TextInserting;
pub const EventMask_TextInserted = EventMask.TextInserted;
pub const EventMask_All = EventMask.All;

pub const PanelType = enum(i32) {
    Default = 0,
    Inactive = 1,
    Handwriting = 2,
    Keyboard = 3,
};
pub const PT_Default = PanelType.Default;
pub const PT_Inactive = PanelType.Inactive;
pub const PT_Handwriting = PanelType.Handwriting;
pub const PT_Keyboard = PanelType.Keyboard;

const IID_IPenInputPanel_Value = Guid.initString("fa7a4083-5747-4040-a182-0b0e9fd4fac7");
pub const IID_IPenInputPanel = &IID_IPenInputPanel_Value;
pub const IPenInputPanel = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Busy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            busy: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Factoid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            factoid: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Factoid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            factoid: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AttachedEditWindow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            attached_edit_window: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AttachedEditWindow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            attached_edit_window: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentPanel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            current_panel: ?*PanelType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CurrentPanel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            current_panel: PanelType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DefaultPanel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            p_default_panel: ?*PanelType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DefaultPanel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            default_panel: PanelType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Visible: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            visible: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Visible: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            visible: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Top: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            top: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Left: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            left: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Width: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            width: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Height: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            height: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_VerticalOffset: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            vertical_offset: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_VerticalOffset: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            vertical_offset: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HorizontalOffset: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            horizontal_offset: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HorizontalOffset: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            horizontal_offset: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AutoShow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            p_auto_show: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AutoShow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPenInputPanel,
            auto_show: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveTo: *const fn (
            self: *const IPenInputPanel,
            left: i32,
            top: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitPendingInput: *const fn (
            self: *const IPenInputPanel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IPenInputPanel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableTsf: *const fn (
            self: *const IPenInputPanel,
            enable: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getBusy(self: *const T, busy_: ?*i16) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).get_Busy(@as(*const IPenInputPanel, @ptrCast(self)), busy_);
            }
            pub inline fn getFactoid(self: *const T, factoid_: ?*?BSTR) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).get_Factoid(@as(*const IPenInputPanel, @ptrCast(self)), factoid_);
            }
            pub inline fn putFactoid(self: *const T, factoid_: ?BSTR) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).put_Factoid(@as(*const IPenInputPanel, @ptrCast(self)), factoid_);
            }
            pub inline fn getAttachedEditWindow(self: *const T, attached_edit_window_: ?*i32) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).get_AttachedEditWindow(@as(*const IPenInputPanel, @ptrCast(self)), attached_edit_window_);
            }
            pub inline fn putAttachedEditWindow(self: *const T, attached_edit_window_: i32) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).put_AttachedEditWindow(@as(*const IPenInputPanel, @ptrCast(self)), attached_edit_window_);
            }
            pub inline fn getCurrentPanel(self: *const T, current_panel_: ?*PanelType) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).get_CurrentPanel(@as(*const IPenInputPanel, @ptrCast(self)), current_panel_);
            }
            pub inline fn putCurrentPanel(self: *const T, current_panel_: PanelType) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).put_CurrentPanel(@as(*const IPenInputPanel, @ptrCast(self)), current_panel_);
            }
            pub inline fn getDefaultPanel(self: *const T, p_default_panel_: ?*PanelType) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).get_DefaultPanel(@as(*const IPenInputPanel, @ptrCast(self)), p_default_panel_);
            }
            pub inline fn putDefaultPanel(self: *const T, default_panel_: PanelType) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).put_DefaultPanel(@as(*const IPenInputPanel, @ptrCast(self)), default_panel_);
            }
            pub inline fn getVisible(self: *const T, visible_: ?*i16) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).get_Visible(@as(*const IPenInputPanel, @ptrCast(self)), visible_);
            }
            pub inline fn putVisible(self: *const T, visible_: i16) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).put_Visible(@as(*const IPenInputPanel, @ptrCast(self)), visible_);
            }
            pub inline fn getTop(self: *const T, top_: ?*i32) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).get_Top(@as(*const IPenInputPanel, @ptrCast(self)), top_);
            }
            pub inline fn getLeft(self: *const T, left_: ?*i32) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).get_Left(@as(*const IPenInputPanel, @ptrCast(self)), left_);
            }
            pub inline fn getWidth(self: *const T, width_: ?*i32) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).get_Width(@as(*const IPenInputPanel, @ptrCast(self)), width_);
            }
            pub inline fn getHeight(self: *const T, height_: ?*i32) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).get_Height(@as(*const IPenInputPanel, @ptrCast(self)), height_);
            }
            pub inline fn getVerticalOffset(self: *const T, vertical_offset_: ?*i32) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).get_VerticalOffset(@as(*const IPenInputPanel, @ptrCast(self)), vertical_offset_);
            }
            pub inline fn putVerticalOffset(self: *const T, vertical_offset_: i32) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).put_VerticalOffset(@as(*const IPenInputPanel, @ptrCast(self)), vertical_offset_);
            }
            pub inline fn getHorizontalOffset(self: *const T, horizontal_offset_: ?*i32) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).get_HorizontalOffset(@as(*const IPenInputPanel, @ptrCast(self)), horizontal_offset_);
            }
            pub inline fn putHorizontalOffset(self: *const T, horizontal_offset_: i32) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).put_HorizontalOffset(@as(*const IPenInputPanel, @ptrCast(self)), horizontal_offset_);
            }
            pub inline fn getAutoShow(self: *const T, p_auto_show_: ?*i16) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).get_AutoShow(@as(*const IPenInputPanel, @ptrCast(self)), p_auto_show_);
            }
            pub inline fn putAutoShow(self: *const T, auto_show_: i16) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).put_AutoShow(@as(*const IPenInputPanel, @ptrCast(self)), auto_show_);
            }
            pub inline fn moveTo(self: *const T, left_: i32, top_: i32) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).MoveTo(@as(*const IPenInputPanel, @ptrCast(self)), left_, top_);
            }
            pub inline fn commitPendingInput(self: *const T) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).CommitPendingInput(@as(*const IPenInputPanel, @ptrCast(self)));
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IPenInputPanel, @ptrCast(self)));
            }
            pub inline fn enableTsf(self: *const T, enable_: i16) HRESULT {
                return @as(*const IPenInputPanel.VTable, @ptrCast(self.vtable)).EnableTsf(@as(*const IPenInputPanel, @ptrCast(self)), enable_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID__IPenInputPanelEvents_Value = Guid.initString("b7e489da-3719-439f-848f-e7acbd820f17");
pub const IID__IPenInputPanelEvents = &IID__IPenInputPanelEvents_Value;
pub const _IPenInputPanelEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IHandwrittenTextInsertion_Value = Guid.initString("56fdea97-ecd6-43e7-aa3a-816be7785860");
pub const IID_IHandwrittenTextInsertion = &IID_IHandwrittenTextInsertion_Value;
pub const IHandwrittenTextInsertion = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InsertRecognitionResultsArray: *const fn (
            self: *const IHandwrittenTextInsertion,
            psa_alternates: ?*SAFEARRAY,
            locale: u32,
            f_alternate_contains_auto_spacing_information: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertInkRecognitionResult: *const fn (
            self: *const IHandwrittenTextInsertion,
            p_i_ink_reco_result: ?*IInkRecognitionResult,
            locale: u32,
            f_alternate_contains_auto_spacing_information: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn insertRecognitionResultsArray(self: *const T, psa_alternates_: ?*SAFEARRAY, locale_: u32, f_alternate_contains_auto_spacing_information_: BOOL) HRESULT {
                return @as(*const IHandwrittenTextInsertion.VTable, @ptrCast(self.vtable)).InsertRecognitionResultsArray(@as(*const IHandwrittenTextInsertion, @ptrCast(self)), psa_alternates_, locale_, f_alternate_contains_auto_spacing_information_);
            }
            pub inline fn insertInkRecognitionResult(self: *const T, p_i_ink_reco_result_: ?*IInkRecognitionResult, locale_: u32, f_alternate_contains_auto_spacing_information_: BOOL) HRESULT {
                return @as(*const IHandwrittenTextInsertion.VTable, @ptrCast(self.vtable)).InsertInkRecognitionResult(@as(*const IHandwrittenTextInsertion, @ptrCast(self)), p_i_ink_reco_result_, locale_, f_alternate_contains_auto_spacing_information_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ITextInputPanelEventSink_Value = Guid.initString("27560408-8e64-4fe1-804e-421201584b31");
pub const IID_ITextInputPanelEventSink = &IID_ITextInputPanelEventSink_Value;
pub const ITextInputPanelEventSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InPlaceStateChanging: *const fn (
            self: *const ITextInputPanelEventSink,
            old_in_place_state: InPlaceState,
            new_in_place_state: InPlaceState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InPlaceStateChanged: *const fn (
            self: *const ITextInputPanelEventSink,
            old_in_place_state: InPlaceState,
            new_in_place_state: InPlaceState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InPlaceSizeChanging: *const fn (
            self: *const ITextInputPanelEventSink,
            old_bounding_rectangle: RECT,
            new_bounding_rectangle: RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InPlaceSizeChanged: *const fn (
            self: *const ITextInputPanelEventSink,
            old_bounding_rectangle: RECT,
            new_bounding_rectangle: RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InputAreaChanging: *const fn (
            self: *const ITextInputPanelEventSink,
            old_input_area: PanelInputArea,
            new_input_area: PanelInputArea,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InputAreaChanged: *const fn (
            self: *const ITextInputPanelEventSink,
            old_input_area: PanelInputArea,
            new_input_area: PanelInputArea,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CorrectionModeChanging: *const fn (
            self: *const ITextInputPanelEventSink,
            old_correction_mode: CorrectionMode,
            new_correction_mode: CorrectionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CorrectionModeChanged: *const fn (
            self: *const ITextInputPanelEventSink,
            old_correction_mode: CorrectionMode,
            new_correction_mode: CorrectionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InPlaceVisibilityChanging: *const fn (
            self: *const ITextInputPanelEventSink,
            old_visible: BOOL,
            new_visible: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InPlaceVisibilityChanged: *const fn (
            self: *const ITextInputPanelEventSink,
            old_visible: BOOL,
            new_visible: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TextInserting: *const fn (
            self: *const ITextInputPanelEventSink,
            ink: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TextInserted: *const fn (
            self: *const ITextInputPanelEventSink,
            ink: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn inPlaceStateChanging(self: *const T, old_in_place_state_: InPlaceState, new_in_place_state_: InPlaceState) HRESULT {
                return @as(*const ITextInputPanelEventSink.VTable, @ptrCast(self.vtable)).InPlaceStateChanging(@as(*const ITextInputPanelEventSink, @ptrCast(self)), old_in_place_state_, new_in_place_state_);
            }
            pub inline fn inPlaceStateChanged(self: *const T, old_in_place_state_: InPlaceState, new_in_place_state_: InPlaceState) HRESULT {
                return @as(*const ITextInputPanelEventSink.VTable, @ptrCast(self.vtable)).InPlaceStateChanged(@as(*const ITextInputPanelEventSink, @ptrCast(self)), old_in_place_state_, new_in_place_state_);
            }
            pub inline fn inPlaceSizeChanging(self: *const T, old_bounding_rectangle_: RECT, new_bounding_rectangle_: RECT) HRESULT {
                return @as(*const ITextInputPanelEventSink.VTable, @ptrCast(self.vtable)).InPlaceSizeChanging(@as(*const ITextInputPanelEventSink, @ptrCast(self)), old_bounding_rectangle_, new_bounding_rectangle_);
            }
            pub inline fn inPlaceSizeChanged(self: *const T, old_bounding_rectangle_: RECT, new_bounding_rectangle_: RECT) HRESULT {
                return @as(*const ITextInputPanelEventSink.VTable, @ptrCast(self.vtable)).InPlaceSizeChanged(@as(*const ITextInputPanelEventSink, @ptrCast(self)), old_bounding_rectangle_, new_bounding_rectangle_);
            }
            pub inline fn inputAreaChanging(self: *const T, old_input_area_: PanelInputArea, new_input_area_: PanelInputArea) HRESULT {
                return @as(*const ITextInputPanelEventSink.VTable, @ptrCast(self.vtable)).InputAreaChanging(@as(*const ITextInputPanelEventSink, @ptrCast(self)), old_input_area_, new_input_area_);
            }
            pub inline fn inputAreaChanged(self: *const T, old_input_area_: PanelInputArea, new_input_area_: PanelInputArea) HRESULT {
                return @as(*const ITextInputPanelEventSink.VTable, @ptrCast(self.vtable)).InputAreaChanged(@as(*const ITextInputPanelEventSink, @ptrCast(self)), old_input_area_, new_input_area_);
            }
            pub inline fn correctionModeChanging(self: *const T, old_correction_mode_: CorrectionMode, new_correction_mode_: CorrectionMode) HRESULT {
                return @as(*const ITextInputPanelEventSink.VTable, @ptrCast(self.vtable)).CorrectionModeChanging(@as(*const ITextInputPanelEventSink, @ptrCast(self)), old_correction_mode_, new_correction_mode_);
            }
            pub inline fn correctionModeChanged(self: *const T, old_correction_mode_: CorrectionMode, new_correction_mode_: CorrectionMode) HRESULT {
                return @as(*const ITextInputPanelEventSink.VTable, @ptrCast(self.vtable)).CorrectionModeChanged(@as(*const ITextInputPanelEventSink, @ptrCast(self)), old_correction_mode_, new_correction_mode_);
            }
            pub inline fn inPlaceVisibilityChanging(self: *const T, old_visible_: BOOL, new_visible_: BOOL) HRESULT {
                return @as(*const ITextInputPanelEventSink.VTable, @ptrCast(self.vtable)).InPlaceVisibilityChanging(@as(*const ITextInputPanelEventSink, @ptrCast(self)), old_visible_, new_visible_);
            }
            pub inline fn inPlaceVisibilityChanged(self: *const T, old_visible_: BOOL, new_visible_: BOOL) HRESULT {
                return @as(*const ITextInputPanelEventSink.VTable, @ptrCast(self.vtable)).InPlaceVisibilityChanged(@as(*const ITextInputPanelEventSink, @ptrCast(self)), old_visible_, new_visible_);
            }
            pub inline fn textInserting(self: *const T, ink_: ?*SAFEARRAY) HRESULT {
                return @as(*const ITextInputPanelEventSink.VTable, @ptrCast(self.vtable)).TextInserting(@as(*const ITextInputPanelEventSink, @ptrCast(self)), ink_);
            }
            pub inline fn textInserted(self: *const T, ink_: ?*SAFEARRAY) HRESULT {
                return @as(*const ITextInputPanelEventSink.VTable, @ptrCast(self.vtable)).TextInserted(@as(*const ITextInputPanelEventSink, @ptrCast(self)), ink_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ITextInputPanel_Value = Guid.initString("6b6a65a5-6af3-46c2-b6ea-56cd1f80df71");
pub const IID_ITextInputPanel = &IID_ITextInputPanel_Value;
pub const ITextInputPanel = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AttachedEditWindow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITextInputPanel,
            attached_edit_window: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AttachedEditWindow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITextInputPanel,
            attached_edit_window: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentInteractionMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITextInputPanel,
            current_interaction_mode: ?*InteractionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DefaultInPlaceState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITextInputPanel,
            state: ?*InPlaceState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DefaultInPlaceState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITextInputPanel,
            state: InPlaceState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentInPlaceState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITextInputPanel,
            state: ?*InPlaceState,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DefaultInputArea: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITextInputPanel,
            area: ?*PanelInputArea,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DefaultInputArea: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITextInputPanel,
            area: PanelInputArea,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentInputArea: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITextInputPanel,
            area: ?*PanelInputArea,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentCorrectionMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITextInputPanel,
            mode: ?*CorrectionMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PreferredInPlaceDirection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITextInputPanel,
            direction: ?*InPlaceDirection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PreferredInPlaceDirection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITextInputPanel,
            direction: InPlaceDirection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExpandPostInsertionCorrection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITextInputPanel,
            expand: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExpandPostInsertionCorrection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITextInputPanel,
            expand: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InPlaceVisibleOnFocus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITextInputPanel,
            visible: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_InPlaceVisibleOnFocus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITextInputPanel,
            visible: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InPlaceBoundingRectangle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITextInputPanel,
            bounding_rectangle: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PopUpCorrectionHeight: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITextInputPanel,
            height: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PopDownCorrectionHeight: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITextInputPanel,
            height: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitPendingInput: *const fn (
            self: *const ITextInputPanel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInPlaceVisibility: *const fn (
            self: *const ITextInputPanel,
            visible: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInPlacePosition: *const fn (
            self: *const ITextInputPanel,
            x_position: i32,
            y_position: i32,
            position: CorrectionPosition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInPlaceHoverTargetPosition: *const fn (
            self: *const ITextInputPanel,
            x_position: i32,
            y_position: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: *const fn (
            self: *const ITextInputPanel,
            event_sink: ?*ITextInputPanelEventSink,
            event_mask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn (
            self: *const ITextInputPanel,
            event_sink: ?*ITextInputPanelEventSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAttachedEditWindow(self: *const T, attached_edit_window_: ?*?HWND) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).get_AttachedEditWindow(@as(*const ITextInputPanel, @ptrCast(self)), attached_edit_window_);
            }
            pub inline fn putAttachedEditWindow(self: *const T, attached_edit_window_: ?HWND) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).put_AttachedEditWindow(@as(*const ITextInputPanel, @ptrCast(self)), attached_edit_window_);
            }
            pub inline fn getCurrentInteractionMode(self: *const T, current_interaction_mode_: ?*InteractionMode) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).get_CurrentInteractionMode(@as(*const ITextInputPanel, @ptrCast(self)), current_interaction_mode_);
            }
            pub inline fn getDefaultInPlaceState(self: *const T, state_: ?*InPlaceState) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).get_DefaultInPlaceState(@as(*const ITextInputPanel, @ptrCast(self)), state_);
            }
            pub inline fn putDefaultInPlaceState(self: *const T, state_: InPlaceState) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).put_DefaultInPlaceState(@as(*const ITextInputPanel, @ptrCast(self)), state_);
            }
            pub inline fn getCurrentInPlaceState(self: *const T, state_: ?*InPlaceState) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).get_CurrentInPlaceState(@as(*const ITextInputPanel, @ptrCast(self)), state_);
            }
            pub inline fn getDefaultInputArea(self: *const T, area_: ?*PanelInputArea) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).get_DefaultInputArea(@as(*const ITextInputPanel, @ptrCast(self)), area_);
            }
            pub inline fn putDefaultInputArea(self: *const T, area_: PanelInputArea) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).put_DefaultInputArea(@as(*const ITextInputPanel, @ptrCast(self)), area_);
            }
            pub inline fn getCurrentInputArea(self: *const T, area_: ?*PanelInputArea) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).get_CurrentInputArea(@as(*const ITextInputPanel, @ptrCast(self)), area_);
            }
            pub inline fn getCurrentCorrectionMode(self: *const T, mode_: ?*CorrectionMode) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).get_CurrentCorrectionMode(@as(*const ITextInputPanel, @ptrCast(self)), mode_);
            }
            pub inline fn getPreferredInPlaceDirection(self: *const T, direction_: ?*InPlaceDirection) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).get_PreferredInPlaceDirection(@as(*const ITextInputPanel, @ptrCast(self)), direction_);
            }
            pub inline fn putPreferredInPlaceDirection(self: *const T, direction_: InPlaceDirection) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).put_PreferredInPlaceDirection(@as(*const ITextInputPanel, @ptrCast(self)), direction_);
            }
            pub inline fn getExpandPostInsertionCorrection(self: *const T, expand_: ?*BOOL) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).get_ExpandPostInsertionCorrection(@as(*const ITextInputPanel, @ptrCast(self)), expand_);
            }
            pub inline fn putExpandPostInsertionCorrection(self: *const T, expand_: BOOL) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).put_ExpandPostInsertionCorrection(@as(*const ITextInputPanel, @ptrCast(self)), expand_);
            }
            pub inline fn getInPlaceVisibleOnFocus(self: *const T, visible_: ?*BOOL) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).get_InPlaceVisibleOnFocus(@as(*const ITextInputPanel, @ptrCast(self)), visible_);
            }
            pub inline fn putInPlaceVisibleOnFocus(self: *const T, visible_: BOOL) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).put_InPlaceVisibleOnFocus(@as(*const ITextInputPanel, @ptrCast(self)), visible_);
            }
            pub inline fn getInPlaceBoundingRectangle(self: *const T, bounding_rectangle_: ?*RECT) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).get_InPlaceBoundingRectangle(@as(*const ITextInputPanel, @ptrCast(self)), bounding_rectangle_);
            }
            pub inline fn getPopUpCorrectionHeight(self: *const T, height_: ?*i32) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).get_PopUpCorrectionHeight(@as(*const ITextInputPanel, @ptrCast(self)), height_);
            }
            pub inline fn getPopDownCorrectionHeight(self: *const T, height_: ?*i32) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).get_PopDownCorrectionHeight(@as(*const ITextInputPanel, @ptrCast(self)), height_);
            }
            pub inline fn commitPendingInput(self: *const T) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).CommitPendingInput(@as(*const ITextInputPanel, @ptrCast(self)));
            }
            pub inline fn setInPlaceVisibility(self: *const T, visible_: BOOL) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).SetInPlaceVisibility(@as(*const ITextInputPanel, @ptrCast(self)), visible_);
            }
            pub inline fn setInPlacePosition(self: *const T, x_position_: i32, y_position_: i32, position_: CorrectionPosition) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).SetInPlacePosition(@as(*const ITextInputPanel, @ptrCast(self)), x_position_, y_position_, position_);
            }
            pub inline fn setInPlaceHoverTargetPosition(self: *const T, x_position_: i32, y_position_: i32) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).SetInPlaceHoverTargetPosition(@as(*const ITextInputPanel, @ptrCast(self)), x_position_, y_position_);
            }
            pub inline fn advise(self: *const T, event_sink_: ?*ITextInputPanelEventSink, event_mask_: u32) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).Advise(@as(*const ITextInputPanel, @ptrCast(self)), event_sink_, event_mask_);
            }
            pub inline fn unadvise(self: *const T, event_sink_: ?*ITextInputPanelEventSink) HRESULT {
                return @as(*const ITextInputPanel.VTable, @ptrCast(self.vtable)).Unadvise(@as(*const ITextInputPanel, @ptrCast(self)), event_sink_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IInputPanelWindowHandle_Value = Guid.initString("4af81847-fdc4-4fc3-ad0b-422479c1b935");
pub const IID_IInputPanelWindowHandle = &IID_IInputPanelWindowHandle_Value;
pub const IInputPanelWindowHandle = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AttachedEditWindow32: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInputPanelWindowHandle,
            attached_edit_window: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AttachedEditWindow32: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInputPanelWindowHandle,
            attached_edit_window: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AttachedEditWindow64: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInputPanelWindowHandle,
            attached_edit_window: ?*i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AttachedEditWindow64: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInputPanelWindowHandle,
            attached_edit_window: i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAttachedEditWindow32(self: *const T, attached_edit_window_: ?*i32) HRESULT {
                return @as(*const IInputPanelWindowHandle.VTable, @ptrCast(self.vtable)).get_AttachedEditWindow32(@as(*const IInputPanelWindowHandle, @ptrCast(self)), attached_edit_window_);
            }
            pub inline fn putAttachedEditWindow32(self: *const T, attached_edit_window_: i32) HRESULT {
                return @as(*const IInputPanelWindowHandle.VTable, @ptrCast(self.vtable)).put_AttachedEditWindow32(@as(*const IInputPanelWindowHandle, @ptrCast(self)), attached_edit_window_);
            }
            pub inline fn getAttachedEditWindow64(self: *const T, attached_edit_window_: ?*i64) HRESULT {
                return @as(*const IInputPanelWindowHandle.VTable, @ptrCast(self.vtable)).get_AttachedEditWindow64(@as(*const IInputPanelWindowHandle, @ptrCast(self)), attached_edit_window_);
            }
            pub inline fn putAttachedEditWindow64(self: *const T, attached_edit_window_: i64) HRESULT {
                return @as(*const IInputPanelWindowHandle.VTable, @ptrCast(self.vtable)).put_AttachedEditWindow64(@as(*const IInputPanelWindowHandle, @ptrCast(self)), attached_edit_window_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ITextInputPanelRunInfo_Value = Guid.initString("9f424568-1920-48cc-9811-a993cbf5adba");
pub const IID_ITextInputPanelRunInfo = &IID_ITextInputPanelRunInfo_Value;
pub const ITextInputPanelRunInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsTipRunning: *const fn (
            self: *const ITextInputPanelRunInfo,
            pf_running: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isTipRunning(self: *const T, pf_running_: ?*BOOL) HRESULT {
                return @as(*const ITextInputPanelRunInfo.VTable, @ptrCast(self.vtable)).IsTipRunning(@as(*const ITextInputPanelRunInfo, @ptrCast(self)), pf_running_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FLICKDIRECTION = enum(i32) {
    MIN = 0,
    // RIGHT = 0, this enum value conflicts with MIN
    UPRIGHT = 1,
    UP = 2,
    UPLEFT = 3,
    LEFT = 4,
    DOWNLEFT = 5,
    DOWN = 6,
    DOWNRIGHT = 7,
    INVALID = 8,
};
pub const FLICKDIRECTION_MIN = FLICKDIRECTION.MIN;
pub const FLICKDIRECTION_RIGHT = FLICKDIRECTION.MIN;
pub const FLICKDIRECTION_UPRIGHT = FLICKDIRECTION.UPRIGHT;
pub const FLICKDIRECTION_UP = FLICKDIRECTION.UP;
pub const FLICKDIRECTION_UPLEFT = FLICKDIRECTION.UPLEFT;
pub const FLICKDIRECTION_LEFT = FLICKDIRECTION.LEFT;
pub const FLICKDIRECTION_DOWNLEFT = FLICKDIRECTION.DOWNLEFT;
pub const FLICKDIRECTION_DOWN = FLICKDIRECTION.DOWN;
pub const FLICKDIRECTION_DOWNRIGHT = FLICKDIRECTION.DOWNRIGHT;
pub const FLICKDIRECTION_INVALID = FLICKDIRECTION.INVALID;

pub const FLICKMODE = enum(i32) {
    MIN = 0,
    // OFF = 0, this enum value conflicts with MIN
    ON = 1,
    LEARNING = 2,
    // MAX = 2, this enum value conflicts with LEARNING
    // DEFAULT = 1, this enum value conflicts with ON
};
pub const FLICKMODE_MIN = FLICKMODE.MIN;
pub const FLICKMODE_OFF = FLICKMODE.MIN;
pub const FLICKMODE_ON = FLICKMODE.ON;
pub const FLICKMODE_LEARNING = FLICKMODE.LEARNING;
pub const FLICKMODE_MAX = FLICKMODE.LEARNING;
pub const FLICKMODE_DEFAULT = FLICKMODE.ON;

pub const FLICKACTION_COMMANDCODE = enum(i32) {
    NULL = 0,
    SCROLL = 1,
    APPCOMMAND = 2,
    CUSTOMKEY = 3,
    KEYMODIFIER = 4,
};
pub const FLICKACTION_COMMANDCODE_NULL = FLICKACTION_COMMANDCODE.NULL;
pub const FLICKACTION_COMMANDCODE_SCROLL = FLICKACTION_COMMANDCODE.SCROLL;
pub const FLICKACTION_COMMANDCODE_APPCOMMAND = FLICKACTION_COMMANDCODE.APPCOMMAND;
pub const FLICKACTION_COMMANDCODE_CUSTOMKEY = FLICKACTION_COMMANDCODE.CUSTOMKEY;
pub const FLICKACTION_COMMANDCODE_KEYMODIFIER = FLICKACTION_COMMANDCODE.KEYMODIFIER;

pub const FLICK_POINT = extern struct {
    _bitfield: i32,
};

pub const FLICK_DATA = extern struct {
    _bitfield: i32,
};

pub const SCROLLDIRECTION = enum(i32) {
    UP = 0,
    DOWN = 1,
};
pub const SCROLLDIRECTION_UP = SCROLLDIRECTION.UP;
pub const SCROLLDIRECTION_DOWN = SCROLLDIRECTION.DOWN;

pub const KEYMODIFIER = enum(i32) {
    CONTROL = 1,
    MENU = 2,
    SHIFT = 4,
    WIN = 8,
    ALTGR = 16,
    EXT = 32,
};
pub const KEYMODIFIER_CONTROL = KEYMODIFIER.CONTROL;
pub const KEYMODIFIER_MENU = KEYMODIFIER.MENU;
pub const KEYMODIFIER_SHIFT = KEYMODIFIER.SHIFT;
pub const KEYMODIFIER_WIN = KEYMODIFIER.WIN;
pub const KEYMODIFIER_ALTGR = KEYMODIFIER.ALTGR;
pub const KEYMODIFIER_EXT = KEYMODIFIER.EXT;

const CLSID_InkEdit_Value = Guid.initString("e5ca59f5-57c4-4dd8-9bd6-1deeedd27af4");
pub const CLSID_InkEdit = &CLSID_InkEdit_Value;

pub const IEC_STROKEINFO = extern struct {
    nmhdr: NMHDR,
    Cursor: ?*IInkCursor,
    Stroke: ?*IInkStrokeDisp,
};

pub const IEC_GESTUREINFO = extern struct {
    nmhdr: NMHDR,
    Cursor: ?*IInkCursor,
    Strokes: ?*IInkStrokes,
    Gestures: VARIANT,
};

pub const IEC_RECOGNITIONRESULTINFO = extern struct {
    nmhdr: NMHDR,
    RecognitionResult: ?*IInkRecognitionResult,
};

pub const MouseButton = enum(i32) {
    NO_BUTTON = 0,
    LEFT_BUTTON = 1,
    RIGHT_BUTTON = 2,
    MIDDLE_BUTTON = 4,
};
pub const NO_BUTTON = MouseButton.NO_BUTTON;
pub const LEFT_BUTTON = MouseButton.LEFT_BUTTON;
pub const RIGHT_BUTTON = MouseButton.RIGHT_BUTTON;
pub const MIDDLE_BUTTON = MouseButton.MIDDLE_BUTTON;

pub const SelAlignmentConstants = enum(i32) {
    Left = 0,
    Right = 1,
    Center = 2,
};
pub const rtfLeft = SelAlignmentConstants.Left;
pub const rtfRight = SelAlignmentConstants.Right;
pub const rtfCenter = SelAlignmentConstants.Center;

pub const DISPID_InkEdit = enum(i32) {
    Text = 0,
    TextRTF = 1,
    Hwnd = 2,
    DisableNoScroll = 3,
    Locked = 4,
    Enabled = 5,
    MaxLength = 6,
    MultiLine = 7,
    ScrollBars = 8,
    RTSelStart = 9,
    RTSelLength = 10,
    RTSelText = 11,
    SelAlignment = 12,
    SelBold = 13,
    SelCharOffset = 14,
    SelColor = 15,
    SelFontName = 16,
    SelFontSize = 17,
    SelItalic = 18,
    SelRTF = 19,
    SelUnderline = 20,
    DragIcon = 21,
    Status = 22,
    UseMouseForInput = 23,
    InkMode = 24,
    InkInsertMode = 25,
    RecoTimeout = 26,
    DrawAttr = 27,
    Recognizer = 28,
    Factoid = 29,
    SelInk = 30,
    SelInksDisplayMode = 31,
    Recognize = 32,
    GetGestStatus = 33,
    SetGestStatus = 34,
    Refresh = 35,
};
pub const DISPID_Text = DISPID_InkEdit.Text;
pub const DISPID_TextRTF = DISPID_InkEdit.TextRTF;
pub const DISPID_Hwnd = DISPID_InkEdit.Hwnd;
pub const DISPID_DisableNoScroll = DISPID_InkEdit.DisableNoScroll;
pub const DISPID_Locked = DISPID_InkEdit.Locked;
pub const DISPID_Enabled = DISPID_InkEdit.Enabled;
pub const DISPID_MaxLength = DISPID_InkEdit.MaxLength;
pub const DISPID_MultiLine = DISPID_InkEdit.MultiLine;
pub const DISPID_ScrollBars = DISPID_InkEdit.ScrollBars;
pub const DISPID_RTSelStart = DISPID_InkEdit.RTSelStart;
pub const DISPID_RTSelLength = DISPID_InkEdit.RTSelLength;
pub const DISPID_RTSelText = DISPID_InkEdit.RTSelText;
pub const DISPID_SelAlignment = DISPID_InkEdit.SelAlignment;
pub const DISPID_SelBold = DISPID_InkEdit.SelBold;
pub const DISPID_SelCharOffset = DISPID_InkEdit.SelCharOffset;
pub const DISPID_SelColor = DISPID_InkEdit.SelColor;
pub const DISPID_SelFontName = DISPID_InkEdit.SelFontName;
pub const DISPID_SelFontSize = DISPID_InkEdit.SelFontSize;
pub const DISPID_SelItalic = DISPID_InkEdit.SelItalic;
pub const DISPID_SelRTF = DISPID_InkEdit.SelRTF;
pub const DISPID_SelUnderline = DISPID_InkEdit.SelUnderline;
pub const DISPID_DragIcon = DISPID_InkEdit.DragIcon;
pub const DISPID_Status = DISPID_InkEdit.Status;
pub const DISPID_UseMouseForInput = DISPID_InkEdit.UseMouseForInput;
pub const DISPID_InkMode = DISPID_InkEdit.InkMode;
pub const DISPID_InkInsertMode = DISPID_InkEdit.InkInsertMode;
pub const DISPID_RecoTimeout = DISPID_InkEdit.RecoTimeout;
pub const DISPID_DrawAttr = DISPID_InkEdit.DrawAttr;
pub const DISPID_Recognizer = DISPID_InkEdit.Recognizer;
pub const DISPID_Factoid = DISPID_InkEdit.Factoid;
pub const DISPID_SelInk = DISPID_InkEdit.SelInk;
pub const DISPID_SelInksDisplayMode = DISPID_InkEdit.SelInksDisplayMode;
pub const DISPID_Recognize = DISPID_InkEdit.Recognize;
pub const DISPID_GetGestStatus = DISPID_InkEdit.GetGestStatus;
pub const DISPID_SetGestStatus = DISPID_InkEdit.SetGestStatus;
pub const DISPID_Refresh = DISPID_InkEdit.Refresh;

pub const DISPID_InkEditEvents = enum(i32) {
    Change = 1,
    SelChange = 2,
    KeyDown = 3,
    KeyUp = 4,
    MouseUp = 5,
    MouseDown = 6,
    KeyPress = 7,
    DblClick = 8,
    Click = 9,
    MouseMove = 10,
    CursorDown = 21,
    Stroke = 22,
    Gesture = 23,
    RecognitionResult = 24,
};
pub const DISPID_IeeChange = DISPID_InkEditEvents.Change;
pub const DISPID_IeeSelChange = DISPID_InkEditEvents.SelChange;
pub const DISPID_IeeKeyDown = DISPID_InkEditEvents.KeyDown;
pub const DISPID_IeeKeyUp = DISPID_InkEditEvents.KeyUp;
pub const DISPID_IeeMouseUp = DISPID_InkEditEvents.MouseUp;
pub const DISPID_IeeMouseDown = DISPID_InkEditEvents.MouseDown;
pub const DISPID_IeeKeyPress = DISPID_InkEditEvents.KeyPress;
pub const DISPID_IeeDblClick = DISPID_InkEditEvents.DblClick;
pub const DISPID_IeeClick = DISPID_InkEditEvents.Click;
pub const DISPID_IeeMouseMove = DISPID_InkEditEvents.MouseMove;
pub const DISPID_IeeCursorDown = DISPID_InkEditEvents.CursorDown;
pub const DISPID_IeeStroke = DISPID_InkEditEvents.Stroke;
pub const DISPID_IeeGesture = DISPID_InkEditEvents.Gesture;
pub const DISPID_IeeRecognitionResult = DISPID_InkEditEvents.RecognitionResult;

pub const InkMode = enum(i32) {
    Disabled = 0,
    Ink = 1,
    InkAndGesture = 2,
};
pub const IEM_Disabled = InkMode.Disabled;
pub const IEM_Ink = InkMode.Ink;
pub const IEM_InkAndGesture = InkMode.InkAndGesture;

pub const InkInsertMode = enum(i32) {
    Text = 0,
    Ink = 1,
};
pub const IEM_InsertText = InkInsertMode.Text;
pub const IEM_InsertInk = InkInsertMode.Ink;

pub const InkEditStatus = enum(i32) {
    Idle = 0,
    Collecting = 1,
    Recognizing = 2,
};
pub const IES_Idle = InkEditStatus.Idle;
pub const IES_Collecting = InkEditStatus.Collecting;
pub const IES_Recognizing = InkEditStatus.Recognizing;

pub const InkDisplayMode = enum(i32) {
    Ink = 0,
    Text = 1,
};
pub const IDM_Ink = InkDisplayMode.Ink;
pub const IDM_Text = InkDisplayMode.Text;

pub const AppearanceConstants = enum(i32) {
    Flat = 0,
    ThreeD = 1,
};
pub const rtfFlat = AppearanceConstants.Flat;
pub const rtfThreeD = AppearanceConstants.ThreeD;

pub const BorderStyleConstants = enum(i32) {
    NoBorder = 0,
    FixedSingle = 1,
};
pub const rtfNoBorder = BorderStyleConstants.NoBorder;
pub const rtfFixedSingle = BorderStyleConstants.FixedSingle;

pub const ScrollBarsConstants = enum(i32) {
    None = 0,
    Horizontal = 1,
    Vertical = 2,
    Both = 3,
};
pub const rtfNone = ScrollBarsConstants.None;
pub const rtfHorizontal = ScrollBarsConstants.Horizontal;
pub const rtfVertical = ScrollBarsConstants.Vertical;
pub const rtfBoth = ScrollBarsConstants.Both;

const IID_IInkEdit_Value = Guid.initString("f2127a19-fbfb-4aed-8464-3f36d78cfefb");
pub const IID_IInkEdit = &IID_IInkEdit_Value;
pub const IInkEdit = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            p_status: ?*InkEditStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UseMouseForInput: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            p_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UseMouseForInput: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            new_val: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InkMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            p_val: ?*InkMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_InkMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            new_val: InkMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InkInsertMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            p_val: ?*InkInsertMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_InkInsertMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            new_val: InkInsertMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DrawingAttributes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            p_val: ?*?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_DrawingAttributes: *const fn (
            self: *const IInkEdit,
            new_val: ?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RecognitionTimeout: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RecognitionTimeout: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            new_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Recognizer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            p_val: ?*?*IInkRecognizer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Recognizer: *const fn (
            self: *const IInkEdit,
            new_val: ?*IInkRecognizer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Factoid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Factoid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelInks: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            p_sel_ink: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SelInks: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            sel_ink: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelInksDisplayMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            p_ink_display_mode: ?*InkDisplayMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SelInksDisplayMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            ink_display_mode: InkDisplayMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Recognize: *const fn (
            self: *const IInkEdit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGestureStatus: *const fn (
            self: *const IInkEdit,
            gesture: InkApplicationGesture,
            p_listen: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGestureStatus: *const fn (
            self: *const IInkEdit,
            gesture: InkApplicationGesture,
            listen: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BackColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            clr: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BackColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pclr: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Appearance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            p_appearance: ?*AppearanceConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Appearance: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            p_appearance: AppearanceConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BorderStyle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            p_border_style: ?*BorderStyleConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BorderStyle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            p_border_style: BorderStyleConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Hwnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            poh_hwnd: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Font: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pp_font: ?*?*IFontDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Font: *const fn (
            self: *const IInkEdit,
            pp_font: ?*IFontDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Text: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pbstr_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Text: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pbstr_text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MouseIcon: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            mouse_icon: ?*?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MouseIcon: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            mouse_icon: ?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_MouseIcon: *const fn (
            self: *const IInkEdit,
            mouse_icon: ?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MousePointer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            mouse_pointer: ?*InkMousePointer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MousePointer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            mouse_pointer: InkMousePointer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Locked: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            p_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Locked: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            new_val: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            p_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            new_val: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pl_max_length: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            l_max_length: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MultiLine: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            p_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MultiLine: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            new_val: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ScrollBars: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            p_val: ?*ScrollBarsConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ScrollBars: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            new_val: ScrollBarsConstants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisableNoScroll: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            p_val: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisableNoScroll: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            new_val: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelAlignment: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pvar_sel_alignment: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SelAlignment: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pvar_sel_alignment: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelBold: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pvar_sel_bold: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SelBold: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pvar_sel_bold: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelItalic: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pvar_sel_italic: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SelItalic: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pvar_sel_italic: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelUnderline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pvar_sel_underline: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SelUnderline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pvar_sel_underline: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pvar_sel_color: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SelColor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pvar_sel_color: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelFontName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pvar_sel_font_name: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SelFontName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pvar_sel_font_name: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelFontSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pvar_sel_font_size: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SelFontSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pvar_sel_font_size: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelCharOffset: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pvar_sel_char_offset: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SelCharOffset: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pvar_sel_char_offset: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TextRTF: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pbstr_text_r_t_f: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TextRTF: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pbstr_text_r_t_f: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelStart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pl_sel_start: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SelStart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pl_sel_start: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pl_sel_length: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SelLength: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pl_sel_length: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pbstr_sel_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SelText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pbstr_sel_text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelRTF: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pbstr_sel_r_t_f: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SelRTF: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IInkEdit,
            pbstr_sel_r_t_f: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IInkEdit,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getStatus(self: *const T, p_status_: ?*InkEditStatus) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IInkEdit, @ptrCast(self)), p_status_);
            }
            pub inline fn getUseMouseForInput(self: *const T, p_val_: ?*i16) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_UseMouseForInput(@as(*const IInkEdit, @ptrCast(self)), p_val_);
            }
            pub inline fn putUseMouseForInput(self: *const T, new_val_: i16) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_UseMouseForInput(@as(*const IInkEdit, @ptrCast(self)), new_val_);
            }
            pub inline fn getInkMode(self: *const T, p_val_: ?*InkMode) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_InkMode(@as(*const IInkEdit, @ptrCast(self)), p_val_);
            }
            pub inline fn putInkMode(self: *const T, new_val_: InkMode) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_InkMode(@as(*const IInkEdit, @ptrCast(self)), new_val_);
            }
            pub inline fn getInkInsertMode(self: *const T, p_val_: ?*InkInsertMode) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_InkInsertMode(@as(*const IInkEdit, @ptrCast(self)), p_val_);
            }
            pub inline fn putInkInsertMode(self: *const T, new_val_: InkInsertMode) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_InkInsertMode(@as(*const IInkEdit, @ptrCast(self)), new_val_);
            }
            pub inline fn getDrawingAttributes(self: *const T, p_val_: ?*?*IInkDrawingAttributes) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_DrawingAttributes(@as(*const IInkEdit, @ptrCast(self)), p_val_);
            }
            pub inline fn putrefDrawingAttributes(self: *const T, new_val_: ?*IInkDrawingAttributes) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).putref_DrawingAttributes(@as(*const IInkEdit, @ptrCast(self)), new_val_);
            }
            pub inline fn getRecognitionTimeout(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_RecognitionTimeout(@as(*const IInkEdit, @ptrCast(self)), p_val_);
            }
            pub inline fn putRecognitionTimeout(self: *const T, new_val_: i32) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_RecognitionTimeout(@as(*const IInkEdit, @ptrCast(self)), new_val_);
            }
            pub inline fn getRecognizer(self: *const T, p_val_: ?*?*IInkRecognizer) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_Recognizer(@as(*const IInkEdit, @ptrCast(self)), p_val_);
            }
            pub inline fn putrefRecognizer(self: *const T, new_val_: ?*IInkRecognizer) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).putref_Recognizer(@as(*const IInkEdit, @ptrCast(self)), new_val_);
            }
            pub inline fn getFactoid(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_Factoid(@as(*const IInkEdit, @ptrCast(self)), p_val_);
            }
            pub inline fn putFactoid(self: *const T, new_val_: ?BSTR) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_Factoid(@as(*const IInkEdit, @ptrCast(self)), new_val_);
            }
            pub inline fn getSelInks(self: *const T, p_sel_ink_: ?*VARIANT) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_SelInks(@as(*const IInkEdit, @ptrCast(self)), p_sel_ink_);
            }
            pub inline fn putSelInks(self: *const T, sel_ink_: VARIANT) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_SelInks(@as(*const IInkEdit, @ptrCast(self)), sel_ink_);
            }
            pub inline fn getSelInksDisplayMode(self: *const T, p_ink_display_mode_: ?*InkDisplayMode) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_SelInksDisplayMode(@as(*const IInkEdit, @ptrCast(self)), p_ink_display_mode_);
            }
            pub inline fn putSelInksDisplayMode(self: *const T, ink_display_mode_: InkDisplayMode) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_SelInksDisplayMode(@as(*const IInkEdit, @ptrCast(self)), ink_display_mode_);
            }
            pub inline fn recognize(self: *const T) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).Recognize(@as(*const IInkEdit, @ptrCast(self)));
            }
            pub inline fn getGestureStatus(self: *const T, gesture_: InkApplicationGesture, p_listen_: ?*i16) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).GetGestureStatus(@as(*const IInkEdit, @ptrCast(self)), gesture_, p_listen_);
            }
            pub inline fn setGestureStatus(self: *const T, gesture_: InkApplicationGesture, listen_: i16) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).SetGestureStatus(@as(*const IInkEdit, @ptrCast(self)), gesture_, listen_);
            }
            pub inline fn putBackColor(self: *const T, clr_: u32) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_BackColor(@as(*const IInkEdit, @ptrCast(self)), clr_);
            }
            pub inline fn getBackColor(self: *const T, pclr_: ?*u32) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_BackColor(@as(*const IInkEdit, @ptrCast(self)), pclr_);
            }
            pub inline fn getAppearance(self: *const T, p_appearance_: ?*AppearanceConstants) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_Appearance(@as(*const IInkEdit, @ptrCast(self)), p_appearance_);
            }
            pub inline fn putAppearance(self: *const T, p_appearance_: AppearanceConstants) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_Appearance(@as(*const IInkEdit, @ptrCast(self)), p_appearance_);
            }
            pub inline fn getBorderStyle(self: *const T, p_border_style_: ?*BorderStyleConstants) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_BorderStyle(@as(*const IInkEdit, @ptrCast(self)), p_border_style_);
            }
            pub inline fn putBorderStyle(self: *const T, p_border_style_: BorderStyleConstants) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_BorderStyle(@as(*const IInkEdit, @ptrCast(self)), p_border_style_);
            }
            pub inline fn getHwnd(self: *const T, poh_hwnd_: ?*u32) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_Hwnd(@as(*const IInkEdit, @ptrCast(self)), poh_hwnd_);
            }
            pub inline fn getFont(self: *const T, pp_font_: ?*?*IFontDisp) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_Font(@as(*const IInkEdit, @ptrCast(self)), pp_font_);
            }
            pub inline fn putrefFont(self: *const T, pp_font_: ?*IFontDisp) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).putref_Font(@as(*const IInkEdit, @ptrCast(self)), pp_font_);
            }
            pub inline fn getText(self: *const T, pbstr_text_: ?*?BSTR) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_Text(@as(*const IInkEdit, @ptrCast(self)), pbstr_text_);
            }
            pub inline fn putText(self: *const T, pbstr_text_: ?BSTR) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_Text(@as(*const IInkEdit, @ptrCast(self)), pbstr_text_);
            }
            pub inline fn getMouseIcon(self: *const T, mouse_icon_: ?*?*IPictureDisp) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_MouseIcon(@as(*const IInkEdit, @ptrCast(self)), mouse_icon_);
            }
            pub inline fn putMouseIcon(self: *const T, mouse_icon_: ?*IPictureDisp) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_MouseIcon(@as(*const IInkEdit, @ptrCast(self)), mouse_icon_);
            }
            pub inline fn putrefMouseIcon(self: *const T, mouse_icon_: ?*IPictureDisp) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).putref_MouseIcon(@as(*const IInkEdit, @ptrCast(self)), mouse_icon_);
            }
            pub inline fn getMousePointer(self: *const T, mouse_pointer_: ?*InkMousePointer) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_MousePointer(@as(*const IInkEdit, @ptrCast(self)), mouse_pointer_);
            }
            pub inline fn putMousePointer(self: *const T, mouse_pointer_: InkMousePointer) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_MousePointer(@as(*const IInkEdit, @ptrCast(self)), mouse_pointer_);
            }
            pub inline fn getLocked(self: *const T, p_val_: ?*i16) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_Locked(@as(*const IInkEdit, @ptrCast(self)), p_val_);
            }
            pub inline fn putLocked(self: *const T, new_val_: i16) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_Locked(@as(*const IInkEdit, @ptrCast(self)), new_val_);
            }
            pub inline fn getEnabled(self: *const T, p_val_: ?*i16) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const IInkEdit, @ptrCast(self)), p_val_);
            }
            pub inline fn putEnabled(self: *const T, new_val_: i16) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const IInkEdit, @ptrCast(self)), new_val_);
            }
            pub inline fn getMaxLength(self: *const T, pl_max_length_: ?*i32) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_MaxLength(@as(*const IInkEdit, @ptrCast(self)), pl_max_length_);
            }
            pub inline fn putMaxLength(self: *const T, l_max_length_: i32) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_MaxLength(@as(*const IInkEdit, @ptrCast(self)), l_max_length_);
            }
            pub inline fn getMultiLine(self: *const T, p_val_: ?*i16) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_MultiLine(@as(*const IInkEdit, @ptrCast(self)), p_val_);
            }
            pub inline fn putMultiLine(self: *const T, new_val_: i16) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_MultiLine(@as(*const IInkEdit, @ptrCast(self)), new_val_);
            }
            pub inline fn getScrollBars(self: *const T, p_val_: ?*ScrollBarsConstants) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_ScrollBars(@as(*const IInkEdit, @ptrCast(self)), p_val_);
            }
            pub inline fn putScrollBars(self: *const T, new_val_: ScrollBarsConstants) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_ScrollBars(@as(*const IInkEdit, @ptrCast(self)), new_val_);
            }
            pub inline fn getDisableNoScroll(self: *const T, p_val_: ?*i16) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_DisableNoScroll(@as(*const IInkEdit, @ptrCast(self)), p_val_);
            }
            pub inline fn putDisableNoScroll(self: *const T, new_val_: i16) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_DisableNoScroll(@as(*const IInkEdit, @ptrCast(self)), new_val_);
            }
            pub inline fn getSelAlignment(self: *const T, pvar_sel_alignment_: ?*VARIANT) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_SelAlignment(@as(*const IInkEdit, @ptrCast(self)), pvar_sel_alignment_);
            }
            pub inline fn putSelAlignment(self: *const T, pvar_sel_alignment_: VARIANT) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_SelAlignment(@as(*const IInkEdit, @ptrCast(self)), pvar_sel_alignment_);
            }
            pub inline fn getSelBold(self: *const T, pvar_sel_bold_: ?*VARIANT) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_SelBold(@as(*const IInkEdit, @ptrCast(self)), pvar_sel_bold_);
            }
            pub inline fn putSelBold(self: *const T, pvar_sel_bold_: VARIANT) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_SelBold(@as(*const IInkEdit, @ptrCast(self)), pvar_sel_bold_);
            }
            pub inline fn getSelItalic(self: *const T, pvar_sel_italic_: ?*VARIANT) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_SelItalic(@as(*const IInkEdit, @ptrCast(self)), pvar_sel_italic_);
            }
            pub inline fn putSelItalic(self: *const T, pvar_sel_italic_: VARIANT) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_SelItalic(@as(*const IInkEdit, @ptrCast(self)), pvar_sel_italic_);
            }
            pub inline fn getSelUnderline(self: *const T, pvar_sel_underline_: ?*VARIANT) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_SelUnderline(@as(*const IInkEdit, @ptrCast(self)), pvar_sel_underline_);
            }
            pub inline fn putSelUnderline(self: *const T, pvar_sel_underline_: VARIANT) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_SelUnderline(@as(*const IInkEdit, @ptrCast(self)), pvar_sel_underline_);
            }
            pub inline fn getSelColor(self: *const T, pvar_sel_color_: ?*VARIANT) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_SelColor(@as(*const IInkEdit, @ptrCast(self)), pvar_sel_color_);
            }
            pub inline fn putSelColor(self: *const T, pvar_sel_color_: VARIANT) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_SelColor(@as(*const IInkEdit, @ptrCast(self)), pvar_sel_color_);
            }
            pub inline fn getSelFontName(self: *const T, pvar_sel_font_name_: ?*VARIANT) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_SelFontName(@as(*const IInkEdit, @ptrCast(self)), pvar_sel_font_name_);
            }
            pub inline fn putSelFontName(self: *const T, pvar_sel_font_name_: VARIANT) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_SelFontName(@as(*const IInkEdit, @ptrCast(self)), pvar_sel_font_name_);
            }
            pub inline fn getSelFontSize(self: *const T, pvar_sel_font_size_: ?*VARIANT) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_SelFontSize(@as(*const IInkEdit, @ptrCast(self)), pvar_sel_font_size_);
            }
            pub inline fn putSelFontSize(self: *const T, pvar_sel_font_size_: VARIANT) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_SelFontSize(@as(*const IInkEdit, @ptrCast(self)), pvar_sel_font_size_);
            }
            pub inline fn getSelCharOffset(self: *const T, pvar_sel_char_offset_: ?*VARIANT) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_SelCharOffset(@as(*const IInkEdit, @ptrCast(self)), pvar_sel_char_offset_);
            }
            pub inline fn putSelCharOffset(self: *const T, pvar_sel_char_offset_: VARIANT) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_SelCharOffset(@as(*const IInkEdit, @ptrCast(self)), pvar_sel_char_offset_);
            }
            pub inline fn getTextRTF(self: *const T, pbstr_text_r_t_f_: ?*?BSTR) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_TextRTF(@as(*const IInkEdit, @ptrCast(self)), pbstr_text_r_t_f_);
            }
            pub inline fn putTextRTF(self: *const T, pbstr_text_r_t_f_: ?BSTR) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_TextRTF(@as(*const IInkEdit, @ptrCast(self)), pbstr_text_r_t_f_);
            }
            pub inline fn getSelStart(self: *const T, pl_sel_start_: ?*i32) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_SelStart(@as(*const IInkEdit, @ptrCast(self)), pl_sel_start_);
            }
            pub inline fn putSelStart(self: *const T, pl_sel_start_: i32) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_SelStart(@as(*const IInkEdit, @ptrCast(self)), pl_sel_start_);
            }
            pub inline fn getSelLength(self: *const T, pl_sel_length_: ?*i32) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_SelLength(@as(*const IInkEdit, @ptrCast(self)), pl_sel_length_);
            }
            pub inline fn putSelLength(self: *const T, pl_sel_length_: i32) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_SelLength(@as(*const IInkEdit, @ptrCast(self)), pl_sel_length_);
            }
            pub inline fn getSelText(self: *const T, pbstr_sel_text_: ?*?BSTR) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_SelText(@as(*const IInkEdit, @ptrCast(self)), pbstr_sel_text_);
            }
            pub inline fn putSelText(self: *const T, pbstr_sel_text_: ?BSTR) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_SelText(@as(*const IInkEdit, @ptrCast(self)), pbstr_sel_text_);
            }
            pub inline fn getSelRTF(self: *const T, pbstr_sel_r_t_f_: ?*?BSTR) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).get_SelRTF(@as(*const IInkEdit, @ptrCast(self)), pbstr_sel_r_t_f_);
            }
            pub inline fn putSelRTF(self: *const T, pbstr_sel_r_t_f_: ?BSTR) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).put_SelRTF(@as(*const IInkEdit, @ptrCast(self)), pbstr_sel_r_t_f_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IInkEdit.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IInkEdit, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID__IInkEditEvents_Value = Guid.initString("e3b0b797-a72e-46db-a0d7-6c9eba8e9bbc");
pub const IID__IInkEditEvents = &IID__IInkEditEvents_Value;
pub const _IInkEditEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_MathInputControl_Value = Guid.initString("c561816c-14d8-4090-830c-98d994b21c7b");
pub const CLSID_MathInputControl = &CLSID_MathInputControl_Value;

pub const MICUIELEMENT = enum(i32) {
    BUTTON_WRITE = 1,
    BUTTON_ERASE = 2,
    BUTTON_CORRECT = 4,
    BUTTON_CLEAR = 8,
    BUTTON_UNDO = 16,
    BUTTON_REDO = 32,
    BUTTON_INSERT = 64,
    BUTTON_CANCEL = 128,
    INKPANEL_BACKGROUND = 256,
    RESULTPANEL_BACKGROUND = 512,
};
pub const MICUIELEMENT_BUTTON_WRITE = MICUIELEMENT.BUTTON_WRITE;
pub const MICUIELEMENT_BUTTON_ERASE = MICUIELEMENT.BUTTON_ERASE;
pub const MICUIELEMENT_BUTTON_CORRECT = MICUIELEMENT.BUTTON_CORRECT;
pub const MICUIELEMENT_BUTTON_CLEAR = MICUIELEMENT.BUTTON_CLEAR;
pub const MICUIELEMENT_BUTTON_UNDO = MICUIELEMENT.BUTTON_UNDO;
pub const MICUIELEMENT_BUTTON_REDO = MICUIELEMENT.BUTTON_REDO;
pub const MICUIELEMENT_BUTTON_INSERT = MICUIELEMENT.BUTTON_INSERT;
pub const MICUIELEMENT_BUTTON_CANCEL = MICUIELEMENT.BUTTON_CANCEL;
pub const MICUIELEMENT_INKPANEL_BACKGROUND = MICUIELEMENT.INKPANEL_BACKGROUND;
pub const MICUIELEMENT_RESULTPANEL_BACKGROUND = MICUIELEMENT.RESULTPANEL_BACKGROUND;

pub const MICUIELEMENTSTATE = enum(i32) {
    NORMAL = 1,
    HOT = 2,
    PRESSED = 3,
    DISABLED = 4,
};
pub const MICUIELEMENTSTATE_NORMAL = MICUIELEMENTSTATE.NORMAL;
pub const MICUIELEMENTSTATE_HOT = MICUIELEMENTSTATE.HOT;
pub const MICUIELEMENTSTATE_PRESSED = MICUIELEMENTSTATE.PRESSED;
pub const MICUIELEMENTSTATE_DISABLED = MICUIELEMENTSTATE.DISABLED;

pub const DISPID_MathInputControlEvents = enum(i32) {
    Insert = 0,
    Close = 1,
    Paint = 2,
    Clear = 3,
};
pub const DISPID_MICInsert = DISPID_MathInputControlEvents.Insert;
pub const DISPID_MICClose = DISPID_MathInputControlEvents.Close;
pub const DISPID_MICPaint = DISPID_MathInputControlEvents.Paint;
pub const DISPID_MICClear = DISPID_MathInputControlEvents.Clear;

const IID_IMathInputControl_Value = Guid.initString("eba615aa-fac6-4738-ba5f-ff09e9fe473e");
pub const IID_IMathInputControl = &IID_IMathInputControl_Value;
pub const IMathInputControl = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Show: *const fn (
            self: *const IMathInputControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Hide: *const fn (
            self: *const IMathInputControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsVisible: *const fn (
            self: *const IMathInputControl,
            pvb_shown: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPosition: *const fn (
            self: *const IMathInputControl,
            left: ?*i32,
            top: ?*i32,
            right: ?*i32,
            bottom: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPosition: *const fn (
            self: *const IMathInputControl,
            left: i32,
            top: i32,
            right: i32,
            bottom: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IMathInputControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCustomPaint: *const fn (
            self: *const IMathInputControl,
            element: i32,
            paint: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCaptionText: *const fn (
            self: *const IMathInputControl,
            caption_text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadInk: *const fn (
            self: *const IMathInputControl,
            ink: ?*IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOwnerWindow: *const fn (
            self: *const IMathInputControl,
            owner_window: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableExtendedButtons: *const fn (
            self: *const IMathInputControl,
            extended: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPreviewHeight: *const fn (
            self: *const IMathInputControl,
            height: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPreviewHeight: *const fn (
            self: *const IMathInputControl,
            height: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableAutoGrow: *const fn (
            self: *const IMathInputControl,
            auto_grow: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFunctionName: *const fn (
            self: *const IMathInputControl,
            function_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveFunctionName: *const fn (
            self: *const IMathInputControl,
            function_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHoverIcon: *const fn (
            self: *const IMathInputControl,
            hover_image: ?*?*IPictureDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn show(self: *const T) HRESULT {
                return @as(*const IMathInputControl.VTable, @ptrCast(self.vtable)).Show(@as(*const IMathInputControl, @ptrCast(self)));
            }
            pub inline fn hide(self: *const T) HRESULT {
                return @as(*const IMathInputControl.VTable, @ptrCast(self.vtable)).Hide(@as(*const IMathInputControl, @ptrCast(self)));
            }
            pub inline fn isVisible(self: *const T, pvb_shown_: ?*i16) HRESULT {
                return @as(*const IMathInputControl.VTable, @ptrCast(self.vtable)).IsVisible(@as(*const IMathInputControl, @ptrCast(self)), pvb_shown_);
            }
            pub inline fn getPosition(self: *const T, left_: ?*i32, top_: ?*i32, right_: ?*i32, bottom_: ?*i32) HRESULT {
                return @as(*const IMathInputControl.VTable, @ptrCast(self.vtable)).GetPosition(@as(*const IMathInputControl, @ptrCast(self)), left_, top_, right_, bottom_);
            }
            pub inline fn setPosition(self: *const T, left_: i32, top_: i32, right_: i32, bottom_: i32) HRESULT {
                return @as(*const IMathInputControl.VTable, @ptrCast(self.vtable)).SetPosition(@as(*const IMathInputControl, @ptrCast(self)), left_, top_, right_, bottom_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IMathInputControl.VTable, @ptrCast(self.vtable)).Clear(@as(*const IMathInputControl, @ptrCast(self)));
            }
            pub inline fn setCustomPaint(self: *const T, element_: i32, paint_: i16) HRESULT {
                return @as(*const IMathInputControl.VTable, @ptrCast(self.vtable)).SetCustomPaint(@as(*const IMathInputControl, @ptrCast(self)), element_, paint_);
            }
            pub inline fn setCaptionText(self: *const T, caption_text_: ?BSTR) HRESULT {
                return @as(*const IMathInputControl.VTable, @ptrCast(self.vtable)).SetCaptionText(@as(*const IMathInputControl, @ptrCast(self)), caption_text_);
            }
            pub inline fn loadInk(self: *const T, ink_: ?*IInkDisp) HRESULT {
                return @as(*const IMathInputControl.VTable, @ptrCast(self.vtable)).LoadInk(@as(*const IMathInputControl, @ptrCast(self)), ink_);
            }
            pub inline fn setOwnerWindow(self: *const T, owner_window_: isize) HRESULT {
                return @as(*const IMathInputControl.VTable, @ptrCast(self.vtable)).SetOwnerWindow(@as(*const IMathInputControl, @ptrCast(self)), owner_window_);
            }
            pub inline fn enableExtendedButtons(self: *const T, extended_: i16) HRESULT {
                return @as(*const IMathInputControl.VTable, @ptrCast(self.vtable)).EnableExtendedButtons(@as(*const IMathInputControl, @ptrCast(self)), extended_);
            }
            pub inline fn getPreviewHeight(self: *const T, height_: ?*i32) HRESULT {
                return @as(*const IMathInputControl.VTable, @ptrCast(self.vtable)).GetPreviewHeight(@as(*const IMathInputControl, @ptrCast(self)), height_);
            }
            pub inline fn setPreviewHeight(self: *const T, height_: i32) HRESULT {
                return @as(*const IMathInputControl.VTable, @ptrCast(self.vtable)).SetPreviewHeight(@as(*const IMathInputControl, @ptrCast(self)), height_);
            }
            pub inline fn enableAutoGrow(self: *const T, auto_grow_: i16) HRESULT {
                return @as(*const IMathInputControl.VTable, @ptrCast(self.vtable)).EnableAutoGrow(@as(*const IMathInputControl, @ptrCast(self)), auto_grow_);
            }
            pub inline fn addFunctionName(self: *const T, function_name_: ?BSTR) HRESULT {
                return @as(*const IMathInputControl.VTable, @ptrCast(self.vtable)).AddFunctionName(@as(*const IMathInputControl, @ptrCast(self)), function_name_);
            }
            pub inline fn removeFunctionName(self: *const T, function_name_: ?BSTR) HRESULT {
                return @as(*const IMathInputControl.VTable, @ptrCast(self.vtable)).RemoveFunctionName(@as(*const IMathInputControl, @ptrCast(self)), function_name_);
            }
            pub inline fn getHoverIcon(self: *const T, hover_image_: ?*?*IPictureDisp) HRESULT {
                return @as(*const IMathInputControl.VTable, @ptrCast(self.vtable)).GetHoverIcon(@as(*const IMathInputControl, @ptrCast(self)), hover_image_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID__IMathInputControlEvents_Value = Guid.initString("683336b5-a47d-4358-96f9-875a472ae70a");
pub const IID__IMathInputControlEvents = &IID__IMathInputControlEvents_Value;
pub const _IMathInputControlEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_RealTimeStylus_Value = Guid.initString("e26b366d-f998-43ce-836f-cb6d904432b0");
pub const CLSID_RealTimeStylus = &CLSID_RealTimeStylus_Value;

const CLSID_DynamicRenderer_Value = Guid.initString("ecd32aea-746f-4dcb-bf68-082757faff18");
pub const CLSID_DynamicRenderer = &CLSID_DynamicRenderer_Value;

const CLSID_GestureRecognizer_Value = Guid.initString("ea30c654-c62c-441f-ac00-95f9a196782c");
pub const CLSID_GestureRecognizer = &CLSID_GestureRecognizer_Value;

const CLSID_StrokeBuilder_Value = Guid.initString("e810cee7-6e51-4cb0-aa3a-0b985b70daf7");
pub const CLSID_StrokeBuilder = &CLSID_StrokeBuilder_Value;

pub const RealTimeStylusDataInterest = enum(i32) {
    AllData = -1,
    None = 0,
    Error = 1,
    RealTimeStylusEnabled = 2,
    RealTimeStylusDisabled = 4,
    StylusNew = 8,
    StylusInRange = 16,
    InAirPackets = 32,
    StylusOutOfRange = 64,
    StylusDown = 128,
    Packets = 256,
    StylusUp = 512,
    StylusButtonUp = 1024,
    StylusButtonDown = 2048,
    SystemEvents = 4096,
    TabletAdded = 8192,
    TabletRemoved = 16384,
    CustomStylusDataAdded = 32768,
    UpdateMapping = 65536,
    DefaultEvents = 37766,
};
pub const RTSDI_AllData = RealTimeStylusDataInterest.AllData;
pub const RTSDI_None = RealTimeStylusDataInterest.None;
pub const RTSDI_Error = RealTimeStylusDataInterest.Error;
pub const RTSDI_RealTimeStylusEnabled = RealTimeStylusDataInterest.RealTimeStylusEnabled;
pub const RTSDI_RealTimeStylusDisabled = RealTimeStylusDataInterest.RealTimeStylusDisabled;
pub const RTSDI_StylusNew = RealTimeStylusDataInterest.StylusNew;
pub const RTSDI_StylusInRange = RealTimeStylusDataInterest.StylusInRange;
pub const RTSDI_InAirPackets = RealTimeStylusDataInterest.InAirPackets;
pub const RTSDI_StylusOutOfRange = RealTimeStylusDataInterest.StylusOutOfRange;
pub const RTSDI_StylusDown = RealTimeStylusDataInterest.StylusDown;
pub const RTSDI_Packets = RealTimeStylusDataInterest.Packets;
pub const RTSDI_StylusUp = RealTimeStylusDataInterest.StylusUp;
pub const RTSDI_StylusButtonUp = RealTimeStylusDataInterest.StylusButtonUp;
pub const RTSDI_StylusButtonDown = RealTimeStylusDataInterest.StylusButtonDown;
pub const RTSDI_SystemEvents = RealTimeStylusDataInterest.SystemEvents;
pub const RTSDI_TabletAdded = RealTimeStylusDataInterest.TabletAdded;
pub const RTSDI_TabletRemoved = RealTimeStylusDataInterest.TabletRemoved;
pub const RTSDI_CustomStylusDataAdded = RealTimeStylusDataInterest.CustomStylusDataAdded;
pub const RTSDI_UpdateMapping = RealTimeStylusDataInterest.UpdateMapping;
pub const RTSDI_DefaultEvents = RealTimeStylusDataInterest.DefaultEvents;

pub const StylusInfo = extern struct {
    tcid: u32,
    cid: u32,
    bIsInvertedCursor: BOOL,
};

pub const StylusQueue = enum(i32) {
    SyncStylusQueue = 1,
    AsyncStylusQueueImmediate = 2,
    AsyncStylusQueue = 3,
};
pub const SyncStylusQueue = StylusQueue.SyncStylusQueue;
pub const AsyncStylusQueueImmediate = StylusQueue.AsyncStylusQueueImmediate;
pub const AsyncStylusQueue = StylusQueue.AsyncStylusQueue;

pub const RealTimeStylusLockType = enum(i32) {
    ObjLock = 1,
    SyncEventLock = 2,
    AsyncEventLock = 4,
    ExcludeCallback = 8,
    SyncObjLock = 11,
    AsyncObjLock = 13,
};
pub const RTSLT_ObjLock = RealTimeStylusLockType.ObjLock;
pub const RTSLT_SyncEventLock = RealTimeStylusLockType.SyncEventLock;
pub const RTSLT_AsyncEventLock = RealTimeStylusLockType.AsyncEventLock;
pub const RTSLT_ExcludeCallback = RealTimeStylusLockType.ExcludeCallback;
pub const RTSLT_SyncObjLock = RealTimeStylusLockType.SyncObjLock;
pub const RTSLT_AsyncObjLock = RealTimeStylusLockType.AsyncObjLock;

pub const GESTURE_DATA = extern struct {
    gestureId: i32,
    recoConfidence: i32,
    strokeCount: i32,
};

pub const DYNAMIC_RENDERER_CACHED_DATA = extern struct {
    strokeId: i32,
    dynamicRenderer: ?*IDynamicRenderer,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IRealTimeStylus_Value = Guid.initString("a8bb5d22-3144-4a7b-93cd-f34a16be513a");
pub const IID_IRealTimeStylus = &IID_IRealTimeStylus_Value;
pub const IRealTimeStylus = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRealTimeStylus,
            pf_enable: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRealTimeStylus,
            f_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HWND: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRealTimeStylus,
            phwnd: ?*HANDLE_PTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HWND: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRealTimeStylus,
            hwnd: HANDLE_PTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WindowInputRectangle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRealTimeStylus,
            prc_wnd_input_rect: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WindowInputRectangle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRealTimeStylus,
            prc_wnd_input_rect: ?*const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStylusSyncPlugin: *const fn (
            self: *const IRealTimeStylus,
            i_index: u32,
            pi_plugin: ?*IStylusSyncPlugin,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveStylusSyncPlugin: *const fn (
            self: *const IRealTimeStylus,
            i_index: u32,
            ppi_plugin: ?*?*IStylusSyncPlugin,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllStylusSyncPlugins: *const fn (
            self: *const IRealTimeStylus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStylusSyncPlugin: *const fn (
            self: *const IRealTimeStylus,
            i_index: u32,
            ppi_plugin: ?*?*IStylusSyncPlugin,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStylusSyncPluginCount: *const fn (
            self: *const IRealTimeStylus,
            pc_plugins: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStylusAsyncPlugin: *const fn (
            self: *const IRealTimeStylus,
            i_index: u32,
            pi_plugin: ?*IStylusAsyncPlugin,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveStylusAsyncPlugin: *const fn (
            self: *const IRealTimeStylus,
            i_index: u32,
            ppi_plugin: ?*?*IStylusAsyncPlugin,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllStylusAsyncPlugins: *const fn (
            self: *const IRealTimeStylus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStylusAsyncPlugin: *const fn (
            self: *const IRealTimeStylus,
            i_index: u32,
            ppi_plugin: ?*?*IStylusAsyncPlugin,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStylusAsyncPluginCount: *const fn (
            self: *const IRealTimeStylus,
            pc_plugins: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ChildRealTimeStylusPlugin: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRealTimeStylus,
            ppi_r_t_s: ?*?*IRealTimeStylus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_ChildRealTimeStylusPlugin: *const fn (
            self: *const IRealTimeStylus,
            pi_r_t_s: ?*IRealTimeStylus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCustomStylusDataToQueue: *const fn (
            self: *const IRealTimeStylus,
            sq: StylusQueue,
            p_guid_id: ?*const Guid,
            cb_data: u32,
            pb_data: ?[*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearStylusQueues: *const fn (
            self: *const IRealTimeStylus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAllTabletsMode: *const fn (
            self: *const IRealTimeStylus,
            f_use_mouse_for_input: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSingleTabletMode: *const fn (
            self: *const IRealTimeStylus,
            pi_tablet: ?*IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTablet: *const fn (
            self: *const IRealTimeStylus,
            ppi_single_tablet: ?*?*IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTabletContextIdFromTablet: *const fn (
            self: *const IRealTimeStylus,
            pi_tablet: ?*IInkTablet,
            ptcid: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTabletFromTabletContextId: *const fn (
            self: *const IRealTimeStylus,
            tcid: u32,
            ppi_tablet: ?*?*IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAllTabletContextIds: *const fn (
            self: *const IRealTimeStylus,
            pc_tcid_count: ?*u32,
            pp_tcids: [*]?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStyluses: *const fn (
            self: *const IRealTimeStylus,
            ppi_ink_cursors: ?*?*IInkCursors,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStylusForId: *const fn (
            self: *const IRealTimeStylus,
            sid: u32,
            ppi_ink_cursor: ?*?*IInkCursor,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDesiredPacketDescription: *const fn (
            self: *const IRealTimeStylus,
            c_properties: u32,
            p_property_guids: [*]const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDesiredPacketDescription: *const fn (
            self: *const IRealTimeStylus,
            pc_properties: ?*u32,
            pp_property_guids: [*]?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPacketDescriptionData: *const fn (
            self: *const IRealTimeStylus,
            tcid: u32,
            pf_ink_to_device_scale_x: ?*f32,
            pf_ink_to_device_scale_y: ?*f32,
            pc_packet_properties: ?*u32,
            pp_packet_properties: [*]?*PACKET_PROPERTY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getEnabled(self: *const T, pf_enable_: ?*BOOL) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const IRealTimeStylus, @ptrCast(self)), pf_enable_);
            }
            pub inline fn putEnabled(self: *const T, f_enable_: BOOL) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const IRealTimeStylus, @ptrCast(self)), f_enable_);
            }
            pub inline fn getHWND(self: *const T, phwnd_: ?*HANDLE_PTR) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).get_HWND(@as(*const IRealTimeStylus, @ptrCast(self)), phwnd_);
            }
            pub inline fn putHWND(self: *const T, hwnd_: HANDLE_PTR) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).put_HWND(@as(*const IRealTimeStylus, @ptrCast(self)), hwnd_);
            }
            pub inline fn getWindowInputRectangle(self: *const T, prc_wnd_input_rect_: ?*RECT) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).get_WindowInputRectangle(@as(*const IRealTimeStylus, @ptrCast(self)), prc_wnd_input_rect_);
            }
            pub inline fn putWindowInputRectangle(self: *const T, prc_wnd_input_rect_: ?*const RECT) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).put_WindowInputRectangle(@as(*const IRealTimeStylus, @ptrCast(self)), prc_wnd_input_rect_);
            }
            pub inline fn addStylusSyncPlugin(self: *const T, i_index_: u32, pi_plugin_: ?*IStylusSyncPlugin) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).AddStylusSyncPlugin(@as(*const IRealTimeStylus, @ptrCast(self)), i_index_, pi_plugin_);
            }
            pub inline fn removeStylusSyncPlugin(self: *const T, i_index_: u32, ppi_plugin_: ?*?*IStylusSyncPlugin) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).RemoveStylusSyncPlugin(@as(*const IRealTimeStylus, @ptrCast(self)), i_index_, ppi_plugin_);
            }
            pub inline fn removeAllStylusSyncPlugins(self: *const T) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).RemoveAllStylusSyncPlugins(@as(*const IRealTimeStylus, @ptrCast(self)));
            }
            pub inline fn getStylusSyncPlugin(self: *const T, i_index_: u32, ppi_plugin_: ?*?*IStylusSyncPlugin) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).GetStylusSyncPlugin(@as(*const IRealTimeStylus, @ptrCast(self)), i_index_, ppi_plugin_);
            }
            pub inline fn getStylusSyncPluginCount(self: *const T, pc_plugins_: ?*u32) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).GetStylusSyncPluginCount(@as(*const IRealTimeStylus, @ptrCast(self)), pc_plugins_);
            }
            pub inline fn addStylusAsyncPlugin(self: *const T, i_index_: u32, pi_plugin_: ?*IStylusAsyncPlugin) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).AddStylusAsyncPlugin(@as(*const IRealTimeStylus, @ptrCast(self)), i_index_, pi_plugin_);
            }
            pub inline fn removeStylusAsyncPlugin(self: *const T, i_index_: u32, ppi_plugin_: ?*?*IStylusAsyncPlugin) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).RemoveStylusAsyncPlugin(@as(*const IRealTimeStylus, @ptrCast(self)), i_index_, ppi_plugin_);
            }
            pub inline fn removeAllStylusAsyncPlugins(self: *const T) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).RemoveAllStylusAsyncPlugins(@as(*const IRealTimeStylus, @ptrCast(self)));
            }
            pub inline fn getStylusAsyncPlugin(self: *const T, i_index_: u32, ppi_plugin_: ?*?*IStylusAsyncPlugin) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).GetStylusAsyncPlugin(@as(*const IRealTimeStylus, @ptrCast(self)), i_index_, ppi_plugin_);
            }
            pub inline fn getStylusAsyncPluginCount(self: *const T, pc_plugins_: ?*u32) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).GetStylusAsyncPluginCount(@as(*const IRealTimeStylus, @ptrCast(self)), pc_plugins_);
            }
            pub inline fn getChildRealTimeStylusPlugin(self: *const T, ppi_r_t_s_: ?*?*IRealTimeStylus) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).get_ChildRealTimeStylusPlugin(@as(*const IRealTimeStylus, @ptrCast(self)), ppi_r_t_s_);
            }
            pub inline fn putrefChildRealTimeStylusPlugin(self: *const T, pi_r_t_s_: ?*IRealTimeStylus) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).putref_ChildRealTimeStylusPlugin(@as(*const IRealTimeStylus, @ptrCast(self)), pi_r_t_s_);
            }
            pub inline fn addCustomStylusDataToQueue(self: *const T, sq_: StylusQueue, p_guid_id_: ?*const Guid, cb_data_: u32, pb_data_: ?[*:0]u8) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).AddCustomStylusDataToQueue(@as(*const IRealTimeStylus, @ptrCast(self)), sq_, p_guid_id_, cb_data_, pb_data_);
            }
            pub inline fn clearStylusQueues(self: *const T) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).ClearStylusQueues(@as(*const IRealTimeStylus, @ptrCast(self)));
            }
            pub inline fn setAllTabletsMode(self: *const T, f_use_mouse_for_input_: BOOL) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).SetAllTabletsMode(@as(*const IRealTimeStylus, @ptrCast(self)), f_use_mouse_for_input_);
            }
            pub inline fn setSingleTabletMode(self: *const T, pi_tablet_: ?*IInkTablet) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).SetSingleTabletMode(@as(*const IRealTimeStylus, @ptrCast(self)), pi_tablet_);
            }
            pub inline fn getTablet(self: *const T, ppi_single_tablet_: ?*?*IInkTablet) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).GetTablet(@as(*const IRealTimeStylus, @ptrCast(self)), ppi_single_tablet_);
            }
            pub inline fn getTabletContextIdFromTablet(self: *const T, pi_tablet_: ?*IInkTablet, ptcid_: ?*u32) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).GetTabletContextIdFromTablet(@as(*const IRealTimeStylus, @ptrCast(self)), pi_tablet_, ptcid_);
            }
            pub inline fn getTabletFromTabletContextId(self: *const T, tcid_: u32, ppi_tablet_: ?*?*IInkTablet) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).GetTabletFromTabletContextId(@as(*const IRealTimeStylus, @ptrCast(self)), tcid_, ppi_tablet_);
            }
            pub inline fn getAllTabletContextIds(self: *const T, pc_tcid_count_: ?*u32, pp_tcids_: [*]?*u32) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).GetAllTabletContextIds(@as(*const IRealTimeStylus, @ptrCast(self)), pc_tcid_count_, pp_tcids_);
            }
            pub inline fn getStyluses(self: *const T, ppi_ink_cursors_: ?*?*IInkCursors) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).GetStyluses(@as(*const IRealTimeStylus, @ptrCast(self)), ppi_ink_cursors_);
            }
            pub inline fn getStylusForId(self: *const T, sid_: u32, ppi_ink_cursor_: ?*?*IInkCursor) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).GetStylusForId(@as(*const IRealTimeStylus, @ptrCast(self)), sid_, ppi_ink_cursor_);
            }
            pub inline fn setDesiredPacketDescription(self: *const T, c_properties_: u32, p_property_guids_: [*]const Guid) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).SetDesiredPacketDescription(@as(*const IRealTimeStylus, @ptrCast(self)), c_properties_, p_property_guids_);
            }
            pub inline fn getDesiredPacketDescription(self: *const T, pc_properties_: ?*u32, pp_property_guids_: [*]?*Guid) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).GetDesiredPacketDescription(@as(*const IRealTimeStylus, @ptrCast(self)), pc_properties_, pp_property_guids_);
            }
            pub inline fn getPacketDescriptionData(self: *const T, tcid_: u32, pf_ink_to_device_scale_x_: ?*f32, pf_ink_to_device_scale_y_: ?*f32, pc_packet_properties_: ?*u32, pp_packet_properties_: [*]?*PACKET_PROPERTY) HRESULT {
                return @as(*const IRealTimeStylus.VTable, @ptrCast(self.vtable)).GetPacketDescriptionData(@as(*const IRealTimeStylus, @ptrCast(self)), tcid_, pf_ink_to_device_scale_x_, pf_ink_to_device_scale_y_, pc_packet_properties_, pp_packet_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRealTimeStylus2_Value = Guid.initString("b5f2a6cd-3179-4a3e-b9c4-bb5865962be2");
pub const IID_IRealTimeStylus2 = &IID_IRealTimeStylus2_Value;
pub const IRealTimeStylus2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FlicksEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRealTimeStylus2,
            pf_enable: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FlicksEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRealTimeStylus2,
            f_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFlicksEnabled(self: *const T, pf_enable_: ?*BOOL) HRESULT {
                return @as(*const IRealTimeStylus2.VTable, @ptrCast(self.vtable)).get_FlicksEnabled(@as(*const IRealTimeStylus2, @ptrCast(self)), pf_enable_);
            }
            pub inline fn putFlicksEnabled(self: *const T, f_enable_: BOOL) HRESULT {
                return @as(*const IRealTimeStylus2.VTable, @ptrCast(self.vtable)).put_FlicksEnabled(@as(*const IRealTimeStylus2, @ptrCast(self)), f_enable_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IRealTimeStylus3_Value = Guid.initString("d70230a3-6986-4051-b57a-1cf69f4d9db5");
pub const IID_IRealTimeStylus3 = &IID_IRealTimeStylus3_Value;
pub const IRealTimeStylus3 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MultiTouchEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRealTimeStylus3,
            pf_enable: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MultiTouchEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRealTimeStylus3,
            f_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getMultiTouchEnabled(self: *const T, pf_enable_: ?*BOOL) HRESULT {
                return @as(*const IRealTimeStylus3.VTable, @ptrCast(self.vtable)).get_MultiTouchEnabled(@as(*const IRealTimeStylus3, @ptrCast(self)), pf_enable_);
            }
            pub inline fn putMultiTouchEnabled(self: *const T, f_enable_: BOOL) HRESULT {
                return @as(*const IRealTimeStylus3.VTable, @ptrCast(self.vtable)).put_MultiTouchEnabled(@as(*const IRealTimeStylus3, @ptrCast(self)), f_enable_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IRealTimeStylusSynchronization_Value = Guid.initString("aa87eab8-ab4a-4cea-b5cb-46d84c6a2509");
pub const IID_IRealTimeStylusSynchronization = &IID_IRealTimeStylusSynchronization_Value;
pub const IRealTimeStylusSynchronization = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AcquireLock: *const fn (
            self: *const IRealTimeStylusSynchronization,
            lock: RealTimeStylusLockType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseLock: *const fn (
            self: *const IRealTimeStylusSynchronization,
            lock: RealTimeStylusLockType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn acquireLock(self: *const T, lock_: RealTimeStylusLockType) HRESULT {
                return @as(*const IRealTimeStylusSynchronization.VTable, @ptrCast(self.vtable)).AcquireLock(@as(*const IRealTimeStylusSynchronization, @ptrCast(self)), lock_);
            }
            pub inline fn releaseLock(self: *const T, lock_: RealTimeStylusLockType) HRESULT {
                return @as(*const IRealTimeStylusSynchronization.VTable, @ptrCast(self.vtable)).ReleaseLock(@as(*const IRealTimeStylusSynchronization, @ptrCast(self)), lock_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IStrokeBuilder_Value = Guid.initString("a5fd4e2d-c44b-4092-9177-260905eb672b");
pub const IID_IStrokeBuilder = &IID_IStrokeBuilder_Value;
pub const IStrokeBuilder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateStroke: *const fn (
            self: *const IStrokeBuilder,
            c_pkt_buff_length: u32,
            p_packets: [*]const i32,
            c_packet_properties: u32,
            p_packet_properties: [*]const PACKET_PROPERTY,
            f_ink_to_device_scale_x: f32,
            f_ink_to_device_scale_y: f32,
            pp_i_ink_stroke: ?*?*IInkStrokeDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginStroke: *const fn (
            self: *const IStrokeBuilder,
            tcid: u32,
            sid: u32,
            p_packet: ?*const i32,
            c_packet_properties: u32,
            p_packet_properties: [*]PACKET_PROPERTY,
            f_ink_to_device_scale_x: f32,
            f_ink_to_device_scale_y: f32,
            pp_i_ink_stroke: ?*?*IInkStrokeDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendPackets: *const fn (
            self: *const IStrokeBuilder,
            tcid: u32,
            sid: u32,
            c_pkt_buff_length: u32,
            p_packets: [*]const i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndStroke: *const fn (
            self: *const IStrokeBuilder,
            tcid: u32,
            sid: u32,
            pp_i_ink_stroke: ?*?*IInkStrokeDisp,
            p_dirty_rect: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Ink: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IStrokeBuilder,
            ppi_ink_obj: ?*?*IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_Ink: *const fn (
            self: *const IStrokeBuilder,
            pi_ink_obj: ?*IInkDisp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createStroke(self: *const T, c_pkt_buff_length_: u32, p_packets_: [*]const i32, c_packet_properties_: u32, p_packet_properties_: [*]const PACKET_PROPERTY, f_ink_to_device_scale_x_: f32, f_ink_to_device_scale_y_: f32, pp_i_ink_stroke_: ?*?*IInkStrokeDisp) HRESULT {
                return @as(*const IStrokeBuilder.VTable, @ptrCast(self.vtable)).CreateStroke(@as(*const IStrokeBuilder, @ptrCast(self)), c_pkt_buff_length_, p_packets_, c_packet_properties_, p_packet_properties_, f_ink_to_device_scale_x_, f_ink_to_device_scale_y_, pp_i_ink_stroke_);
            }
            pub inline fn beginStroke(self: *const T, tcid_: u32, sid_: u32, p_packet_: ?*const i32, c_packet_properties_: u32, p_packet_properties_: [*]PACKET_PROPERTY, f_ink_to_device_scale_x_: f32, f_ink_to_device_scale_y_: f32, pp_i_ink_stroke_: ?*?*IInkStrokeDisp) HRESULT {
                return @as(*const IStrokeBuilder.VTable, @ptrCast(self.vtable)).BeginStroke(@as(*const IStrokeBuilder, @ptrCast(self)), tcid_, sid_, p_packet_, c_packet_properties_, p_packet_properties_, f_ink_to_device_scale_x_, f_ink_to_device_scale_y_, pp_i_ink_stroke_);
            }
            pub inline fn appendPackets(self: *const T, tcid_: u32, sid_: u32, c_pkt_buff_length_: u32, p_packets_: [*]const i32) HRESULT {
                return @as(*const IStrokeBuilder.VTable, @ptrCast(self.vtable)).AppendPackets(@as(*const IStrokeBuilder, @ptrCast(self)), tcid_, sid_, c_pkt_buff_length_, p_packets_);
            }
            pub inline fn endStroke(self: *const T, tcid_: u32, sid_: u32, pp_i_ink_stroke_: ?*?*IInkStrokeDisp, p_dirty_rect_: ?*RECT) HRESULT {
                return @as(*const IStrokeBuilder.VTable, @ptrCast(self.vtable)).EndStroke(@as(*const IStrokeBuilder, @ptrCast(self)), tcid_, sid_, pp_i_ink_stroke_, p_dirty_rect_);
            }
            pub inline fn getInk(self: *const T, ppi_ink_obj_: ?*?*IInkDisp) HRESULT {
                return @as(*const IStrokeBuilder.VTable, @ptrCast(self.vtable)).get_Ink(@as(*const IStrokeBuilder, @ptrCast(self)), ppi_ink_obj_);
            }
            pub inline fn putrefInk(self: *const T, pi_ink_obj_: ?*IInkDisp) HRESULT {
                return @as(*const IStrokeBuilder.VTable, @ptrCast(self.vtable)).putref_Ink(@as(*const IStrokeBuilder, @ptrCast(self)), pi_ink_obj_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IStylusPlugin_Value = Guid.initString("a81436d8-4757-4fd1-a185-133f97c6c545");
pub const IID_IStylusPlugin = &IID_IStylusPlugin_Value;
pub const IStylusPlugin = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RealTimeStylusEnabled: *const fn (
            self: *const IStylusPlugin,
            pi_rts_src: ?*IRealTimeStylus,
            c_tcid_count: u32,
            p_tcids: [*]const u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RealTimeStylusDisabled: *const fn (
            self: *const IStylusPlugin,
            pi_rts_src: ?*IRealTimeStylus,
            c_tcid_count: u32,
            p_tcids: [*]const u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StylusInRange: *const fn (
            self: *const IStylusPlugin,
            pi_rts_src: ?*IRealTimeStylus,
            tcid: u32,
            sid: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StylusOutOfRange: *const fn (
            self: *const IStylusPlugin,
            pi_rts_src: ?*IRealTimeStylus,
            tcid: u32,
            sid: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StylusDown: *const fn (
            self: *const IStylusPlugin,
            pi_rts_src: ?*IRealTimeStylus,
            p_stylus_info: ?*const StylusInfo,
            c_prop_count_per_pkt: u32,
            p_packet: [*]i32,
            pp_in_out_pkt: ?*?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StylusUp: *const fn (
            self: *const IStylusPlugin,
            pi_rts_src: ?*IRealTimeStylus,
            p_stylus_info: ?*const StylusInfo,
            c_prop_count_per_pkt: u32,
            p_packet: [*]i32,
            pp_in_out_pkt: ?*?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StylusButtonDown: *const fn (
            self: *const IStylusPlugin,
            pi_rts_src: ?*IRealTimeStylus,
            sid: u32,
            p_guid_stylus_button: ?*const Guid,
            p_stylus_pos: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StylusButtonUp: *const fn (
            self: *const IStylusPlugin,
            pi_rts_src: ?*IRealTimeStylus,
            sid: u32,
            p_guid_stylus_button: ?*const Guid,
            p_stylus_pos: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InAirPackets: *const fn (
            self: *const IStylusPlugin,
            pi_rts_src: ?*IRealTimeStylus,
            p_stylus_info: ?*const StylusInfo,
            c_pkt_count: u32,
            c_pkt_buff_length: u32,
            p_packets: [*]i32,
            pc_in_out_pkts: ?*u32,
            pp_in_out_pkts: ?*?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Packets: *const fn (
            self: *const IStylusPlugin,
            pi_rts_src: ?*IRealTimeStylus,
            p_stylus_info: ?*const StylusInfo,
            c_pkt_count: u32,
            c_pkt_buff_length: u32,
            p_packets: [*]i32,
            pc_in_out_pkts: ?*u32,
            pp_in_out_pkts: ?*?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CustomStylusDataAdded: *const fn (
            self: *const IStylusPlugin,
            pi_rts_src: ?*IRealTimeStylus,
            p_guid_id: ?*const Guid,
            cb_data: u32,
            pb_data: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SystemEvent: *const fn (
            self: *const IStylusPlugin,
            pi_rts_src: ?*IRealTimeStylus,
            tcid: u32,
            sid: u32,
            event: u16,
            eventdata: SYSTEM_EVENT_DATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TabletAdded: *const fn (
            self: *const IStylusPlugin,
            pi_rts_src: ?*IRealTimeStylus,
            pi_tablet: ?*IInkTablet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TabletRemoved: *const fn (
            self: *const IStylusPlugin,
            pi_rts_src: ?*IRealTimeStylus,
            i_tablet_index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Error: *const fn (
            self: *const IStylusPlugin,
            pi_rts_src: ?*IRealTimeStylus,
            pi_plugin: ?*IStylusPlugin,
            data_interest: RealTimeStylusDataInterest,
            hr_error_code: HRESULT,
            lptr_key: ?*isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateMapping: *const fn (
            self: *const IStylusPlugin,
            pi_rts_src: ?*IRealTimeStylus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DataInterest: *const fn (
            self: *const IStylusPlugin,
            p_data_interest: ?*RealTimeStylusDataInterest,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn realTimeStylusEnabled(self: *const T, pi_rts_src_: ?*IRealTimeStylus, c_tcid_count_: u32, p_tcids_: [*]const u32) HRESULT {
                return @as(*const IStylusPlugin.VTable, @ptrCast(self.vtable)).RealTimeStylusEnabled(@as(*const IStylusPlugin, @ptrCast(self)), pi_rts_src_, c_tcid_count_, p_tcids_);
            }
            pub inline fn realTimeStylusDisabled(self: *const T, pi_rts_src_: ?*IRealTimeStylus, c_tcid_count_: u32, p_tcids_: [*]const u32) HRESULT {
                return @as(*const IStylusPlugin.VTable, @ptrCast(self.vtable)).RealTimeStylusDisabled(@as(*const IStylusPlugin, @ptrCast(self)), pi_rts_src_, c_tcid_count_, p_tcids_);
            }
            pub inline fn stylusInRange(self: *const T, pi_rts_src_: ?*IRealTimeStylus, tcid_: u32, sid_: u32) HRESULT {
                return @as(*const IStylusPlugin.VTable, @ptrCast(self.vtable)).StylusInRange(@as(*const IStylusPlugin, @ptrCast(self)), pi_rts_src_, tcid_, sid_);
            }
            pub inline fn stylusOutOfRange(self: *const T, pi_rts_src_: ?*IRealTimeStylus, tcid_: u32, sid_: u32) HRESULT {
                return @as(*const IStylusPlugin.VTable, @ptrCast(self.vtable)).StylusOutOfRange(@as(*const IStylusPlugin, @ptrCast(self)), pi_rts_src_, tcid_, sid_);
            }
            pub inline fn stylusDown(self: *const T, pi_rts_src_: ?*IRealTimeStylus, p_stylus_info_: ?*const StylusInfo, c_prop_count_per_pkt_: u32, p_packet_: [*]i32, pp_in_out_pkt_: ?*?*i32) HRESULT {
                return @as(*const IStylusPlugin.VTable, @ptrCast(self.vtable)).StylusDown(@as(*const IStylusPlugin, @ptrCast(self)), pi_rts_src_, p_stylus_info_, c_prop_count_per_pkt_, p_packet_, pp_in_out_pkt_);
            }
            pub inline fn stylusUp(self: *const T, pi_rts_src_: ?*IRealTimeStylus, p_stylus_info_: ?*const StylusInfo, c_prop_count_per_pkt_: u32, p_packet_: [*]i32, pp_in_out_pkt_: ?*?*i32) HRESULT {
                return @as(*const IStylusPlugin.VTable, @ptrCast(self.vtable)).StylusUp(@as(*const IStylusPlugin, @ptrCast(self)), pi_rts_src_, p_stylus_info_, c_prop_count_per_pkt_, p_packet_, pp_in_out_pkt_);
            }
            pub inline fn stylusButtonDown(self: *const T, pi_rts_src_: ?*IRealTimeStylus, sid_: u32, p_guid_stylus_button_: ?*const Guid, p_stylus_pos_: ?*POINT) HRESULT {
                return @as(*const IStylusPlugin.VTable, @ptrCast(self.vtable)).StylusButtonDown(@as(*const IStylusPlugin, @ptrCast(self)), pi_rts_src_, sid_, p_guid_stylus_button_, p_stylus_pos_);
            }
            pub inline fn stylusButtonUp(self: *const T, pi_rts_src_: ?*IRealTimeStylus, sid_: u32, p_guid_stylus_button_: ?*const Guid, p_stylus_pos_: ?*POINT) HRESULT {
                return @as(*const IStylusPlugin.VTable, @ptrCast(self.vtable)).StylusButtonUp(@as(*const IStylusPlugin, @ptrCast(self)), pi_rts_src_, sid_, p_guid_stylus_button_, p_stylus_pos_);
            }
            pub inline fn inAirPackets(self: *const T, pi_rts_src_: ?*IRealTimeStylus, p_stylus_info_: ?*const StylusInfo, c_pkt_count_: u32, c_pkt_buff_length_: u32, p_packets_: [*]i32, pc_in_out_pkts_: ?*u32, pp_in_out_pkts_: ?*?*i32) HRESULT {
                return @as(*const IStylusPlugin.VTable, @ptrCast(self.vtable)).InAirPackets(@as(*const IStylusPlugin, @ptrCast(self)), pi_rts_src_, p_stylus_info_, c_pkt_count_, c_pkt_buff_length_, p_packets_, pc_in_out_pkts_, pp_in_out_pkts_);
            }
            pub inline fn packets(self: *const T, pi_rts_src_: ?*IRealTimeStylus, p_stylus_info_: ?*const StylusInfo, c_pkt_count_: u32, c_pkt_buff_length_: u32, p_packets_: [*]i32, pc_in_out_pkts_: ?*u32, pp_in_out_pkts_: ?*?*i32) HRESULT {
                return @as(*const IStylusPlugin.VTable, @ptrCast(self.vtable)).Packets(@as(*const IStylusPlugin, @ptrCast(self)), pi_rts_src_, p_stylus_info_, c_pkt_count_, c_pkt_buff_length_, p_packets_, pc_in_out_pkts_, pp_in_out_pkts_);
            }
            pub inline fn customStylusDataAdded(self: *const T, pi_rts_src_: ?*IRealTimeStylus, p_guid_id_: ?*const Guid, cb_data_: u32, pb_data_: ?[*:0]const u8) HRESULT {
                return @as(*const IStylusPlugin.VTable, @ptrCast(self.vtable)).CustomStylusDataAdded(@as(*const IStylusPlugin, @ptrCast(self)), pi_rts_src_, p_guid_id_, cb_data_, pb_data_);
            }
            pub inline fn systemEvent(self: *const T, pi_rts_src_: ?*IRealTimeStylus, tcid_: u32, sid_: u32, event_: u16, eventdata_: SYSTEM_EVENT_DATA) HRESULT {
                return @as(*const IStylusPlugin.VTable, @ptrCast(self.vtable)).SystemEvent(@as(*const IStylusPlugin, @ptrCast(self)), pi_rts_src_, tcid_, sid_, event_, eventdata_);
            }
            pub inline fn tabletAdded(self: *const T, pi_rts_src_: ?*IRealTimeStylus, pi_tablet_: ?*IInkTablet) HRESULT {
                return @as(*const IStylusPlugin.VTable, @ptrCast(self.vtable)).TabletAdded(@as(*const IStylusPlugin, @ptrCast(self)), pi_rts_src_, pi_tablet_);
            }
            pub inline fn tabletRemoved(self: *const T, pi_rts_src_: ?*IRealTimeStylus, i_tablet_index_: i32) HRESULT {
                return @as(*const IStylusPlugin.VTable, @ptrCast(self.vtable)).TabletRemoved(@as(*const IStylusPlugin, @ptrCast(self)), pi_rts_src_, i_tablet_index_);
            }
            pub inline fn @"error"(self: *const T, pi_rts_src_: ?*IRealTimeStylus, pi_plugin_: ?*IStylusPlugin, data_interest_: RealTimeStylusDataInterest, hr_error_code_: HRESULT, lptr_key_: ?*isize) HRESULT {
                return @as(*const IStylusPlugin.VTable, @ptrCast(self.vtable)).Error(@as(*const IStylusPlugin, @ptrCast(self)), pi_rts_src_, pi_plugin_, data_interest_, hr_error_code_, lptr_key_);
            }
            pub inline fn updateMapping(self: *const T, pi_rts_src_: ?*IRealTimeStylus) HRESULT {
                return @as(*const IStylusPlugin.VTable, @ptrCast(self.vtable)).UpdateMapping(@as(*const IStylusPlugin, @ptrCast(self)), pi_rts_src_);
            }
            pub inline fn dataInterest(self: *const T, p_data_interest_: ?*RealTimeStylusDataInterest) HRESULT {
                return @as(*const IStylusPlugin.VTable, @ptrCast(self.vtable)).DataInterest(@as(*const IStylusPlugin, @ptrCast(self)), p_data_interest_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IStylusSyncPlugin_Value = Guid.initString("a157b174-482f-4d71-a3f6-3a41ddd11be9");
pub const IID_IStylusSyncPlugin = &IID_IStylusSyncPlugin_Value;
pub const IStylusSyncPlugin = extern struct {
    pub const VTable = extern struct {
        base: IStylusPlugin.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IStylusPlugin.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IStylusAsyncPlugin_Value = Guid.initString("a7cca85a-31bc-4cd2-aadc-3289a3af11c8");
pub const IID_IStylusAsyncPlugin = &IID_IStylusAsyncPlugin_Value;
pub const IStylusAsyncPlugin = extern struct {
    pub const VTable = extern struct {
        base: IStylusPlugin.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IStylusPlugin.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IDynamicRenderer_Value = Guid.initString("a079468e-7165-46f9-b7af-98ad01a93009");
pub const IID_IDynamicRenderer = &IID_IDynamicRenderer_Value;
pub const IDynamicRenderer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicRenderer,
            b_enabled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicRenderer,
            b_enabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HWND: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicRenderer,
            hwnd: ?*HANDLE_PTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HWND: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicRenderer,
            hwnd: HANDLE_PTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClipRectangle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicRenderer,
            prc_clip_rect: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClipRectangle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicRenderer,
            prc_clip_rect: ?*const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClipRegion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicRenderer,
            ph_clip_rgn: ?*HANDLE_PTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClipRegion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicRenderer,
            h_clip_rgn: HANDLE_PTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DrawingAttributes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicRenderer,
            ppi_d_a: ?*?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        putref_DrawingAttributes: *const fn (
            self: *const IDynamicRenderer,
            pi_d_a: ?*IInkDrawingAttributes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DataCacheEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicRenderer,
            pf_cache_data: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DataCacheEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDynamicRenderer,
            f_cache_data: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseCachedData: *const fn (
            self: *const IDynamicRenderer,
            stroke_id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IDynamicRenderer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Draw: *const fn (
            self: *const IDynamicRenderer,
            h_d_c: HANDLE_PTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getEnabled(self: *const T, b_enabled_: ?*BOOL) HRESULT {
                return @as(*const IDynamicRenderer.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const IDynamicRenderer, @ptrCast(self)), b_enabled_);
            }
            pub inline fn putEnabled(self: *const T, b_enabled_: BOOL) HRESULT {
                return @as(*const IDynamicRenderer.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const IDynamicRenderer, @ptrCast(self)), b_enabled_);
            }
            pub inline fn getHWND(self: *const T, hwnd_: ?*HANDLE_PTR) HRESULT {
                return @as(*const IDynamicRenderer.VTable, @ptrCast(self.vtable)).get_HWND(@as(*const IDynamicRenderer, @ptrCast(self)), hwnd_);
            }
            pub inline fn putHWND(self: *const T, hwnd_: HANDLE_PTR) HRESULT {
                return @as(*const IDynamicRenderer.VTable, @ptrCast(self.vtable)).put_HWND(@as(*const IDynamicRenderer, @ptrCast(self)), hwnd_);
            }
            pub inline fn getClipRectangle(self: *const T, prc_clip_rect_: ?*RECT) HRESULT {
                return @as(*const IDynamicRenderer.VTable, @ptrCast(self.vtable)).get_ClipRectangle(@as(*const IDynamicRenderer, @ptrCast(self)), prc_clip_rect_);
            }
            pub inline fn putClipRectangle(self: *const T, prc_clip_rect_: ?*const RECT) HRESULT {
                return @as(*const IDynamicRenderer.VTable, @ptrCast(self.vtable)).put_ClipRectangle(@as(*const IDynamicRenderer, @ptrCast(self)), prc_clip_rect_);
            }
            pub inline fn getClipRegion(self: *const T, ph_clip_rgn_: ?*HANDLE_PTR) HRESULT {
                return @as(*const IDynamicRenderer.VTable, @ptrCast(self.vtable)).get_ClipRegion(@as(*const IDynamicRenderer, @ptrCast(self)), ph_clip_rgn_);
            }
            pub inline fn putClipRegion(self: *const T, h_clip_rgn_: HANDLE_PTR) HRESULT {
                return @as(*const IDynamicRenderer.VTable, @ptrCast(self.vtable)).put_ClipRegion(@as(*const IDynamicRenderer, @ptrCast(self)), h_clip_rgn_);
            }
            pub inline fn getDrawingAttributes(self: *const T, ppi_d_a_: ?*?*IInkDrawingAttributes) HRESULT {
                return @as(*const IDynamicRenderer.VTable, @ptrCast(self.vtable)).get_DrawingAttributes(@as(*const IDynamicRenderer, @ptrCast(self)), ppi_d_a_);
            }
            pub inline fn putrefDrawingAttributes(self: *const T, pi_d_a_: ?*IInkDrawingAttributes) HRESULT {
                return @as(*const IDynamicRenderer.VTable, @ptrCast(self.vtable)).putref_DrawingAttributes(@as(*const IDynamicRenderer, @ptrCast(self)), pi_d_a_);
            }
            pub inline fn getDataCacheEnabled(self: *const T, pf_cache_data_: ?*BOOL) HRESULT {
                return @as(*const IDynamicRenderer.VTable, @ptrCast(self.vtable)).get_DataCacheEnabled(@as(*const IDynamicRenderer, @ptrCast(self)), pf_cache_data_);
            }
            pub inline fn putDataCacheEnabled(self: *const T, f_cache_data_: BOOL) HRESULT {
                return @as(*const IDynamicRenderer.VTable, @ptrCast(self.vtable)).put_DataCacheEnabled(@as(*const IDynamicRenderer, @ptrCast(self)), f_cache_data_);
            }
            pub inline fn releaseCachedData(self: *const T, stroke_id_: u32) HRESULT {
                return @as(*const IDynamicRenderer.VTable, @ptrCast(self.vtable)).ReleaseCachedData(@as(*const IDynamicRenderer, @ptrCast(self)), stroke_id_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IDynamicRenderer.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IDynamicRenderer, @ptrCast(self)));
            }
            pub inline fn draw(self: *const T, h_d_c_: HANDLE_PTR) HRESULT {
                return @as(*const IDynamicRenderer.VTable, @ptrCast(self.vtable)).Draw(@as(*const IDynamicRenderer, @ptrCast(self)), h_d_c_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IGestureRecognizer_Value = Guid.initString("ae9ef86b-7054-45e3-ae22-3174dc8811b7");
pub const IID_IGestureRecognizer = &IID_IGestureRecognizer_Value;
pub const IGestureRecognizer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGestureRecognizer,
            pf_enabled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGestureRecognizer,
            f_enabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxStrokeCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGestureRecognizer,
            pc_strokes: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxStrokeCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IGestureRecognizer,
            c_strokes: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableGestures: *const fn (
            self: *const IGestureRecognizer,
            c_gestures: u32,
            p_gestures: [*]const i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IGestureRecognizer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getEnabled(self: *const T, pf_enabled_: ?*BOOL) HRESULT {
                return @as(*const IGestureRecognizer.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const IGestureRecognizer, @ptrCast(self)), pf_enabled_);
            }
            pub inline fn putEnabled(self: *const T, f_enabled_: BOOL) HRESULT {
                return @as(*const IGestureRecognizer.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const IGestureRecognizer, @ptrCast(self)), f_enabled_);
            }
            pub inline fn getMaxStrokeCount(self: *const T, pc_strokes_: ?*i32) HRESULT {
                return @as(*const IGestureRecognizer.VTable, @ptrCast(self.vtable)).get_MaxStrokeCount(@as(*const IGestureRecognizer, @ptrCast(self)), pc_strokes_);
            }
            pub inline fn putMaxStrokeCount(self: *const T, c_strokes_: i32) HRESULT {
                return @as(*const IGestureRecognizer.VTable, @ptrCast(self.vtable)).put_MaxStrokeCount(@as(*const IGestureRecognizer, @ptrCast(self)), c_strokes_);
            }
            pub inline fn enableGestures(self: *const T, c_gestures_: u32, p_gestures_: [*]const i32) HRESULT {
                return @as(*const IGestureRecognizer.VTable, @ptrCast(self.vtable)).EnableGestures(@as(*const IGestureRecognizer, @ptrCast(self)), c_gestures_, p_gestures_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IGestureRecognizer.VTable, @ptrCast(self.vtable)).Reset(@as(*const IGestureRecognizer, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const RECO_GUIDE = extern struct {
    xOrigin: i32,
    yOrigin: i32,
    cxBox: i32,
    cyBox: i32,
    cxBase: i32,
    cyBase: i32,
    cHorzBox: i32,
    cVertBox: i32,
    cyMid: i32,
};

pub const RECO_ATTRS = extern struct {
    dwRecoCapabilityFlags: u32,
    awcVendorName: [32]u16,
    awcFriendlyName: [64]u16,
    awLanguageId: [64]u16,
};

pub const RECO_RANGE = extern struct {
    iwcBegin: u32,
    cCount: u32,
};

pub const LINE_SEGMENT = extern struct {
    PtA: POINT,
    PtB: POINT,
};

pub const LATTICE_METRICS = extern struct {
    lsBaseline: LINE_SEGMENT,
    iMidlineOffset: i16,
};

pub const LINE_METRICS = enum(i32) {
    BASELINE = 0,
    MIDLINE = 1,
    ASCENDER = 2,
    DESCENDER = 3,
};
pub const LM_BASELINE = LINE_METRICS.BASELINE;
pub const LM_MIDLINE = LINE_METRICS.MIDLINE;
pub const LM_ASCENDER = LINE_METRICS.ASCENDER;
pub const LM_DESCENDER = LINE_METRICS.DESCENDER;

pub const CONFIDENCE_LEVEL = enum(i32) {
    STRONG = 0,
    INTERMEDIATE = 1,
    POOR = 2,
};
pub const CFL_STRONG = CONFIDENCE_LEVEL.STRONG;
pub const CFL_INTERMEDIATE = CONFIDENCE_LEVEL.INTERMEDIATE;
pub const CFL_POOR = CONFIDENCE_LEVEL.POOR;

pub const ALT_BREAKS = enum(i32) {
    SAME = 0,
    UNIQUE = 1,
    FULL = 2,
};
pub const ALT_BREAKS_SAME = ALT_BREAKS.SAME;
pub const ALT_BREAKS_UNIQUE = ALT_BREAKS.UNIQUE;
pub const ALT_BREAKS_FULL = ALT_BREAKS.FULL;

pub const enumRECO_TYPE = enum(i32) {
    STRING = 0,
    CHAR = 1,
};
pub const RECO_TYPE_WSTRING = enumRECO_TYPE.STRING;
pub const RECO_TYPE_WCHAR = enumRECO_TYPE.CHAR;

pub const RECO_LATTICE_PROPERTY = extern struct {
    guidProperty: Guid,
    cbPropertyValue: u16,
    pPropertyValue: ?*u8,
};

pub const RECO_LATTICE_PROPERTIES = extern struct {
    cProperties: u32,
    apProps: ?*?*RECO_LATTICE_PROPERTY,
};

pub const RECO_LATTICE_ELEMENT = extern struct {
    score: i32,
    type: u16,
    pData: ?*u8,
    ulNextColumn: u32,
    ulStrokeNumber: u32,
    epProp: RECO_LATTICE_PROPERTIES,
};

pub const RECO_LATTICE_COLUMN = extern struct {
    key: u32,
    cpProp: RECO_LATTICE_PROPERTIES,
    cStrokes: u32,
    pStrokes: ?*u32,
    cLatticeElements: u32,
    pLatticeElements: ?*RECO_LATTICE_ELEMENT,
};

pub const RECO_LATTICE = extern struct {
    ulColumnCount: u32,
    pLatticeColumns: ?*RECO_LATTICE_COLUMN,
    ulPropertyCount: u32,
    pGuidProperties: ?*Guid,
    ulBestResultColumnCount: u32,
    pulBestResultColumns: ?*u32,
    pulBestResultIndexes: ?*u32,
};

pub const CHARACTER_RANGE = extern struct {
    wcLow: u16,
    cChars: u16,
};

const CLSID_TipAutoCompleteClient_Value = Guid.initString("807c1e6c-1d00-453f-b920-b61bb7cdd997");
pub const CLSID_TipAutoCompleteClient = &CLSID_TipAutoCompleteClient_Value;

const IID_ITipAutoCompleteProvider_Value = Guid.initString("7c6cf46d-8404-46b9-ad33-f5b6036d4007");
pub const IID_ITipAutoCompleteProvider = &IID_ITipAutoCompleteProvider_Value;
pub const ITipAutoCompleteProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        UpdatePendingText: *const fn (
            self: *const ITipAutoCompleteProvider,
            bstr_pending_text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Show: *const fn (
            self: *const ITipAutoCompleteProvider,
            f_show: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn updatePendingText(self: *const T, bstr_pending_text_: ?BSTR) HRESULT {
                return @as(*const ITipAutoCompleteProvider.VTable, @ptrCast(self.vtable)).UpdatePendingText(@as(*const ITipAutoCompleteProvider, @ptrCast(self)), bstr_pending_text_);
            }
            pub inline fn show(self: *const T, f_show_: BOOL) HRESULT {
                return @as(*const ITipAutoCompleteProvider.VTable, @ptrCast(self.vtable)).Show(@as(*const ITipAutoCompleteProvider, @ptrCast(self)), f_show_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITipAutoCompleteClient_Value = Guid.initString("5e078e03-8265-4bbe-9487-d242edbef910");
pub const IID_ITipAutoCompleteClient = &IID_ITipAutoCompleteClient_Value;
pub const ITipAutoCompleteClient = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AdviseProvider: *const fn (
            self: *const ITipAutoCompleteClient,
            h_wnd_field: ?HWND,
            p_i_provider: ?*ITipAutoCompleteProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnadviseProvider: *const fn (
            self: *const ITipAutoCompleteClient,
            h_wnd_field: ?HWND,
            p_i_provider: ?*ITipAutoCompleteProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UserSelection: *const fn (
            self: *const ITipAutoCompleteClient,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreferredRects: *const fn (
            self: *const ITipAutoCompleteClient,
            prc_a_c_list: ?*RECT,
            prc_field: ?*RECT,
            prc_modified_a_c_list: ?*RECT,
            pf_shown_above_tip: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestShowUI: *const fn (
            self: *const ITipAutoCompleteClient,
            h_wnd_list: ?HWND,
            pf_allow_showing: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn adviseProvider(self: *const T, h_wnd_field_: ?HWND, p_i_provider_: ?*ITipAutoCompleteProvider) HRESULT {
                return @as(*const ITipAutoCompleteClient.VTable, @ptrCast(self.vtable)).AdviseProvider(@as(*const ITipAutoCompleteClient, @ptrCast(self)), h_wnd_field_, p_i_provider_);
            }
            pub inline fn unadviseProvider(self: *const T, h_wnd_field_: ?HWND, p_i_provider_: ?*ITipAutoCompleteProvider) HRESULT {
                return @as(*const ITipAutoCompleteClient.VTable, @ptrCast(self.vtable)).UnadviseProvider(@as(*const ITipAutoCompleteClient, @ptrCast(self)), h_wnd_field_, p_i_provider_);
            }
            pub inline fn userSelection(self: *const T) HRESULT {
                return @as(*const ITipAutoCompleteClient.VTable, @ptrCast(self.vtable)).UserSelection(@as(*const ITipAutoCompleteClient, @ptrCast(self)));
            }
            pub inline fn preferredRects(self: *const T, prc_a_c_list_: ?*RECT, prc_field_: ?*RECT, prc_modified_a_c_list_: ?*RECT, pf_shown_above_tip_: ?*BOOL) HRESULT {
                return @as(*const ITipAutoCompleteClient.VTable, @ptrCast(self.vtable)).PreferredRects(@as(*const ITipAutoCompleteClient, @ptrCast(self)), prc_a_c_list_, prc_field_, prc_modified_a_c_list_, pf_shown_above_tip_);
            }
            pub inline fn requestShowUI(self: *const T, h_wnd_list_: ?HWND, pf_allow_showing_: ?*BOOL) HRESULT {
                return @as(*const ITipAutoCompleteClient.VTable, @ptrCast(self.vtable)).RequestShowUI(@as(*const ITipAutoCompleteClient, @ptrCast(self)), h_wnd_list_, pf_allow_showing_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (27)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn CreateRecognizer(
    p_c_l_s_i_d: ?*Guid,
    phrec: ?*?HRECOGNIZER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn DestroyRecognizer(
    hrec: ?HRECOGNIZER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn GetRecoAttributes(
    hrec: ?HRECOGNIZER,
    p_reco_attrs: ?*RECO_ATTRS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn CreateContext(
    hrec: ?HRECOGNIZER,
    phrc: ?*?HRECOCONTEXT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn DestroyContext(
    hrc: ?HRECOCONTEXT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn GetResultPropertyList(
    hrec: ?HRECOGNIZER,
    p_property_count: ?*u32,
    p_property_guid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn GetUnicodeRanges(
    hrec: ?HRECOGNIZER,
    pc_ranges: ?*u32,
    pcr: ?*CHARACTER_RANGE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn AddStroke(
    hrc: ?HRECOCONTEXT,
    p_packet_desc: ?*const PACKET_DESCRIPTION,
    cb_packet: u32,
    p_packet: ?*const u8,
    p_x_form: ?*const XFORM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn GetBestResultString(
    hrc: ?HRECOCONTEXT,
    pc_size: ?*u32,
    pwc_best_result: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn SetGuide(
    hrc: ?HRECOCONTEXT,
    p_guide: ?*const RECO_GUIDE,
    i_index: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn AdviseInkChange(
    hrc: ?HRECOCONTEXT,
    b_new_stroke: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn EndInkInput(
    hrc: ?HRECOCONTEXT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn Process(
    hrc: ?HRECOCONTEXT,
    pb_partial_processing: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn SetFactoid(
    hrc: ?HRECOCONTEXT,
    cwc_factoid: u32,
    pwc_factoid: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn SetFlags(
    hrc: ?HRECOCONTEXT,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn GetLatticePtr(
    hrc: ?HRECOCONTEXT,
    pp_lattice: ?*?*RECO_LATTICE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn SetTextContext(
    hrc: ?HRECOCONTEXT,
    cwc_before: u32,
    pwc_before: [*:0]const u16,
    cwc_after: u32,
    pwc_after: [*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn SetEnabledUnicodeRanges(
    hrc: ?HRECOCONTEXT,
    c_ranges: u32,
    pcr: ?*CHARACTER_RANGE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn IsStringSupported(
    hrc: ?HRECOCONTEXT,
    wc_string: u32,
    pwc_string: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn SetWordList(
    hrc: ?HRECOCONTEXT,
    hwl: ?HRECOWORDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn GetRightSeparator(
    hrc: ?HRECOCONTEXT,
    pc_size: ?*u32,
    pwc_right_separator: [*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn GetLeftSeparator(
    hrc: ?HRECOCONTEXT,
    pc_size: ?*u32,
    pwc_left_separator: [*:0]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn DestroyWordList(
    hwl: ?HRECOWORDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn AddWordsToWordList(
    hwl: ?HRECOWORDLIST,
    pwc_words: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn MakeWordList(
    hrec: ?HRECOGNIZER,
    p_buffer: ?PWSTR,
    phwl: ?*?HRECOWORDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn GetAllRecognizers(
    recognizer_clsids: ?*?*Guid,
    count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "inkobjcore" fn LoadCachedAttributes(
    clsid: Guid,
    p_reco_attributes: ?*RECO_ATTRS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (18)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const HANDLE_PTR = @import("../foundation.zig").HANDLE_PTR;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IDataObject = @import("../system/com.zig").IDataObject;
const IDispatch = @import("../system/com.zig").IDispatch;
const IFontDisp = @import("../system/ole.zig").IFontDisp;
const IPictureDisp = @import("../system/ole.zig").IPictureDisp;
const IUnknown = @import("../system/com.zig").IUnknown;
const NMHDR = @import("../ui/controls.zig").NMHDR;
const POINT = @import("../foundation.zig").POINT;
const PWSTR = @import("../foundation.zig").PWSTR;
const RECT = @import("../foundation.zig").RECT;
const SAFEARRAY = @import("../system/com.zig").SAFEARRAY;
const VARIANT = @import("../system/com.zig").VARIANT;
const XFORM = @import("../graphics/gdi.zig").XFORM;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PfnRecoCallback")) {
        _ = PfnRecoCallback;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
