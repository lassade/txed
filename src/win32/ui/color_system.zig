//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (83)
//--------------------------------------------------------------------------------
pub const CATID_WcsPlugin = Guid.initString("a0b402e0-8240-405f-8a16-8a5b4df2f0dd");
pub const MAX_COLOR_CHANNELS = @as(u32, 8);
pub const INTENT_PERCEPTUAL = @as(u32, 0);
pub const INTENT_RELATIVE_COLORIMETRIC = @as(u32, 1);
pub const INTENT_SATURATION = @as(u32, 2);
pub const INTENT_ABSOLUTE_COLORIMETRIC = @as(u32, 3);
pub const FLAG_EMBEDDEDPROFILE = @as(u32, 1);
pub const FLAG_DEPENDENTONDATA = @as(u32, 2);
pub const FLAG_ENABLE_CHROMATIC_ADAPTATION = @as(u32, 33554432);
pub const ATTRIB_TRANSPARENCY = @as(u32, 1);
pub const ATTRIB_MATTE = @as(u32, 2);
pub const PROFILE_FILENAME = @as(u32, 1);
pub const PROFILE_MEMBUFFER = @as(u32, 2);
pub const PROFILE_READ = @as(u32, 1);
pub const PROFILE_READWRITE = @as(u32, 2);
pub const INDEX_DONT_CARE = @as(u32, 0);
pub const CMM_FROM_PROFILE = @as(u32, 0);
pub const ENUM_TYPE_VERSION = @as(u32, 768);
pub const ET_DEVICENAME = @as(u32, 1);
pub const ET_MEDIATYPE = @as(u32, 2);
pub const ET_DITHERMODE = @as(u32, 4);
pub const ET_RESOLUTION = @as(u32, 8);
pub const ET_CMMTYPE = @as(u32, 16);
pub const ET_CLASS = @as(u32, 32);
pub const ET_DATACOLORSPACE = @as(u32, 64);
pub const ET_CONNECTIONSPACE = @as(u32, 128);
pub const ET_SIGNATURE = @as(u32, 256);
pub const ET_PLATFORM = @as(u32, 512);
pub const ET_PROFILEFLAGS = @as(u32, 1024);
pub const ET_MANUFACTURER = @as(u32, 2048);
pub const ET_MODEL = @as(u32, 4096);
pub const ET_ATTRIBUTES = @as(u32, 8192);
pub const ET_RENDERINGINTENT = @as(u32, 16384);
pub const ET_CREATOR = @as(u32, 32768);
pub const ET_DEVICECLASS = @as(u32, 65536);
pub const ET_STANDARDDISPLAYCOLOR = @as(u32, 131072);
pub const ET_EXTENDEDDISPLAYCOLOR = @as(u32, 262144);
pub const PROOF_MODE = @as(u32, 1);
pub const NORMAL_MODE = @as(u32, 2);
pub const BEST_MODE = @as(u32, 3);
pub const ENABLE_GAMUT_CHECKING = @as(u32, 65536);
pub const USE_RELATIVE_COLORIMETRIC = @as(u32, 131072);
pub const FAST_TRANSLATE = @as(u32, 262144);
pub const PRESERVEBLACK = @as(u32, 1048576);
pub const WCS_ALWAYS = @as(u32, 2097152);
pub const SEQUENTIAL_TRANSFORM = @as(u32, 2155872256);
pub const RESERVED = @as(u32, 2147483648);
pub const CSA_A = @as(u32, 1);
pub const CSA_ABC = @as(u32, 2);
pub const CSA_DEF = @as(u32, 3);
pub const CSA_DEFG = @as(u32, 4);
pub const CSA_GRAY = @as(u32, 5);
pub const CSA_RGB = @as(u32, 6);
pub const CSA_CMYK = @as(u32, 7);
pub const CSA_Lab = @as(u32, 8);
pub const CMM_WIN_VERSION = @as(u32, 0);
pub const CMM_IDENT = @as(u32, 1);
pub const CMM_DRIVER_VERSION = @as(u32, 2);
pub const CMM_DLL_VERSION = @as(u32, 3);
pub const CMM_VERSION = @as(u32, 4);
pub const CMM_DESCRIPTION = @as(u32, 5);
pub const CMM_LOGOICON = @as(u32, 6);
pub const CMS_FORWARD = @as(u32, 0);
pub const CMS_BACKWARD = @as(u32, 1);
pub const COLOR_MATCH_VERSION = @as(u32, 512);
pub const CMS_DISABLEICM = @as(u32, 1);
pub const CMS_ENABLEPROOFING = @as(u32, 2);
pub const CMS_SETRENDERINTENT = @as(u32, 4);
pub const CMS_SETPROOFINTENT = @as(u32, 8);
pub const CMS_SETMONITORPROFILE = @as(u32, 16);
pub const CMS_SETPRINTERPROFILE = @as(u32, 32);
pub const CMS_SETTARGETPROFILE = @as(u32, 64);
pub const CMS_USEHOOK = @as(u32, 128);
pub const CMS_USEAPPLYCALLBACK = @as(u32, 256);
pub const CMS_USEDESCRIPTION = @as(u32, 512);
pub const CMS_DISABLEINTENT = @as(u32, 1024);
pub const CMS_DISABLERENDERINTENT = @as(u32, 2048);
pub const CMS_MONITOROVERFLOW = @as(i32, -2147483648);
pub const CMS_PRINTEROVERFLOW = @as(i32, 1073741824);
pub const CMS_TARGETOVERFLOW = @as(i32, 536870912);
pub const DONT_USE_EMBEDDED_WCS_PROFILES = @as(i32, 1);
pub const WCS_DEFAULT = @as(i32, 0);
pub const WCS_ICCONLY = @as(i32, 65536);

//--------------------------------------------------------------------------------
// Section: Types (50)
//--------------------------------------------------------------------------------
pub const ICM_COMMAND = enum(u32) {
    ADDPROFILE = 1,
    DELETEPROFILE = 2,
    QUERYPROFILE = 3,
    SETDEFAULTPROFILE = 4,
    REGISTERICMATCHER = 5,
    UNREGISTERICMATCHER = 6,
    QUERYMATCH = 7,
};
pub const ICM_ADDPROFILE = ICM_COMMAND.ADDPROFILE;
pub const ICM_DELETEPROFILE = ICM_COMMAND.DELETEPROFILE;
pub const ICM_QUERYPROFILE = ICM_COMMAND.QUERYPROFILE;
pub const ICM_SETDEFAULTPROFILE = ICM_COMMAND.SETDEFAULTPROFILE;
pub const ICM_REGISTERICMATCHER = ICM_COMMAND.REGISTERICMATCHER;
pub const ICM_UNREGISTERICMATCHER = ICM_COMMAND.UNREGISTERICMATCHER;
pub const ICM_QUERYMATCH = ICM_COMMAND.QUERYMATCH;

pub const ICM_MODE = enum(i32) {
    OFF = 1,
    ON = 2,
    QUERY = 3,
    DONE_OUTSIDEDC = 4,
};
pub const ICM_OFF = ICM_MODE.OFF;
pub const ICM_ON = ICM_MODE.ON;
pub const ICM_QUERY = ICM_MODE.QUERY;
pub const ICM_DONE_OUTSIDEDC = ICM_MODE.DONE_OUTSIDEDC;

pub const COLOR_MATCH_TO_TARGET_ACTION = enum(i32) {
    ENABLE = 1,
    DISABLE = 2,
    DELETE_TRANSFORM = 3,
};
pub const CS_ENABLE = COLOR_MATCH_TO_TARGET_ACTION.ENABLE;
pub const CS_DISABLE = COLOR_MATCH_TO_TARGET_ACTION.DISABLE;
pub const CS_DELETE_TRANSFORM = COLOR_MATCH_TO_TARGET_ACTION.DELETE_TRANSFORM;

// TODO: this type has a FreeFunc 'DeleteColorSpace', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HCOLORSPACE = *opaque {};

pub const LOGCOLORSPACEA = extern struct {
    lcsSignature: u32,
    lcsVersion: u32,
    lcsSize: u32,
    lcsCSType: i32,
    lcsIntent: i32,
    lcsEndpoints: CIEXYZTRIPLE,
    lcsGammaRed: u32,
    lcsGammaGreen: u32,
    lcsGammaBlue: u32,
    lcsFilename: [260]CHAR,
};

pub const LOGCOLORSPACEW = extern struct {
    lcsSignature: u32,
    lcsVersion: u32,
    lcsSize: u32,
    lcsCSType: i32,
    lcsIntent: i32,
    lcsEndpoints: CIEXYZTRIPLE,
    lcsGammaRed: u32,
    lcsGammaGreen: u32,
    lcsGammaBlue: u32,
    lcsFilename: [260]u16,
};

pub const ICMENUMPROCA = *const fn (
    param0: ?PSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const ICMENUMPROCW = *const fn (
    param0: ?PWSTR,
    param1: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const EMRCREATECOLORSPACE = extern struct {
    emr: EMR,
    ihCS: u32,
    lcs: LOGCOLORSPACEA,
};

pub const EMRCREATECOLORSPACEW = extern struct {
    emr: EMR,
    ihCS: u32,
    lcs: LOGCOLORSPACEW,
    dwFlags: u32,
    cbData: u32,
    Data: [1]u8,
};

pub const XYZColorF = extern struct {
    X: f32,
    Y: f32,
    Z: f32,
};

pub const JChColorF = extern struct {
    J: f32,
    C: f32,
    h: f32,
};

pub const JabColorF = extern struct {
    J: f32,
    a: f32,
    b: f32,
};

pub const GamutShellTriangle = extern struct {
    aVertexIndex: [3]u32,
};

pub const GamutShell = extern struct {
    JMin: f32,
    JMax: f32,
    cVertices: u32,
    cTriangles: u32,
    pVertices: ?*JabColorF,
    pTriangles: ?*GamutShellTriangle,
};

pub const PrimaryJabColors = extern struct {
    red: JabColorF,
    yellow: JabColorF,
    green: JabColorF,
    cyan: JabColorF,
    blue: JabColorF,
    magenta: JabColorF,
    black: JabColorF,
    white: JabColorF,
};

pub const PrimaryXYZColors = extern struct {
    red: XYZColorF,
    yellow: XYZColorF,
    green: XYZColorF,
    cyan: XYZColorF,
    blue: XYZColorF,
    magenta: XYZColorF,
    black: XYZColorF,
    white: XYZColorF,
};

pub const GamutBoundaryDescription = extern struct {
    pPrimaries: ?*PrimaryJabColors,
    cNeutralSamples: u32,
    pNeutralSamples: ?*JabColorF,
    pReferenceShell: ?*GamutShell,
    pPlausibleShell: ?*GamutShell,
    pPossibleShell: ?*GamutShell,
};

pub const BlackInformation = extern struct {
    fBlackOnly: BOOL,
    blackWeight: f32,
};

const IID_IDeviceModelPlugIn_Value = Guid.initString("1cd63475-07c4-46fe-a903-d655316d11fd");
pub const IID_IDeviceModelPlugIn = &IID_IDeviceModelPlugIn_Value;
pub const IDeviceModelPlugIn = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IDeviceModelPlugIn,
            bstr_xml: ?BSTR,
            c_num_models: u32,
            i_model_position: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumChannels: *const fn (
            self: *const IDeviceModelPlugIn,
            p_num_channels: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeviceToColorimetricColors: *const fn (
            self: *const IDeviceModelPlugIn,
            c_colors: u32,
            c_channels: u32,
            p_device_values: ?*const f32,
            p_x_y_z_colors: [*]XYZColorF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ColorimetricToDeviceColors: *const fn (
            self: *const IDeviceModelPlugIn,
            c_colors: u32,
            c_channels: u32,
            p_x_y_z_colors: [*]const XYZColorF,
            p_device_values: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ColorimetricToDeviceColorsWithBlack: *const fn (
            self: *const IDeviceModelPlugIn,
            c_colors: u32,
            c_channels: u32,
            p_x_y_z_colors: [*]const XYZColorF,
            p_black_information: [*]const BlackInformation,
            p_device_values: ?*f32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTransformDeviceModelInfo: *const fn (
            self: *const IDeviceModelPlugIn,
            i_model_position: u32,
            p_i_device_model_other: ?*IDeviceModelPlugIn,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPrimarySamples: *const fn (
            self: *const IDeviceModelPlugIn,
            p_primary_color: ?*PrimaryXYZColors,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGamutBoundaryMeshSize: *const fn (
            self: *const IDeviceModelPlugIn,
            p_num_vertices: ?*u32,
            p_num_triangles: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGamutBoundaryMesh: *const fn (
            self: *const IDeviceModelPlugIn,
            c_channels: u32,
            c_vertices: u32,
            c_triangles: u32,
            p_vertices: ?*f32,
            p_triangles: [*]GamutShellTriangle,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNeutralAxisSize: *const fn (
            self: *const IDeviceModelPlugIn,
            pc_colors: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNeutralAxis: *const fn (
            self: *const IDeviceModelPlugIn,
            c_colors: u32,
            p_x_y_z_colors: [*]XYZColorF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, bstr_xml_: ?BSTR, c_num_models_: u32, i_model_position_: u32) HRESULT {
                return @as(*const IDeviceModelPlugIn.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IDeviceModelPlugIn, @ptrCast(self)), bstr_xml_, c_num_models_, i_model_position_);
            }
            pub inline fn getNumChannels(self: *const T, p_num_channels_: ?*u32) HRESULT {
                return @as(*const IDeviceModelPlugIn.VTable, @ptrCast(self.vtable)).GetNumChannels(@as(*const IDeviceModelPlugIn, @ptrCast(self)), p_num_channels_);
            }
            pub inline fn deviceToColorimetricColors(self: *const T, c_colors_: u32, c_channels_: u32, p_device_values_: ?*const f32, p_x_y_z_colors_: [*]XYZColorF) HRESULT {
                return @as(*const IDeviceModelPlugIn.VTable, @ptrCast(self.vtable)).DeviceToColorimetricColors(@as(*const IDeviceModelPlugIn, @ptrCast(self)), c_colors_, c_channels_, p_device_values_, p_x_y_z_colors_);
            }
            pub inline fn colorimetricToDeviceColors(self: *const T, c_colors_: u32, c_channels_: u32, p_x_y_z_colors_: [*]const XYZColorF, p_device_values_: ?*f32) HRESULT {
                return @as(*const IDeviceModelPlugIn.VTable, @ptrCast(self.vtable)).ColorimetricToDeviceColors(@as(*const IDeviceModelPlugIn, @ptrCast(self)), c_colors_, c_channels_, p_x_y_z_colors_, p_device_values_);
            }
            pub inline fn colorimetricToDeviceColorsWithBlack(self: *const T, c_colors_: u32, c_channels_: u32, p_x_y_z_colors_: [*]const XYZColorF, p_black_information_: [*]const BlackInformation, p_device_values_: ?*f32) HRESULT {
                return @as(*const IDeviceModelPlugIn.VTable, @ptrCast(self.vtable)).ColorimetricToDeviceColorsWithBlack(@as(*const IDeviceModelPlugIn, @ptrCast(self)), c_colors_, c_channels_, p_x_y_z_colors_, p_black_information_, p_device_values_);
            }
            pub inline fn setTransformDeviceModelInfo(self: *const T, i_model_position_: u32, p_i_device_model_other_: ?*IDeviceModelPlugIn) HRESULT {
                return @as(*const IDeviceModelPlugIn.VTable, @ptrCast(self.vtable)).SetTransformDeviceModelInfo(@as(*const IDeviceModelPlugIn, @ptrCast(self)), i_model_position_, p_i_device_model_other_);
            }
            pub inline fn getPrimarySamples(self: *const T, p_primary_color_: ?*PrimaryXYZColors) HRESULT {
                return @as(*const IDeviceModelPlugIn.VTable, @ptrCast(self.vtable)).GetPrimarySamples(@as(*const IDeviceModelPlugIn, @ptrCast(self)), p_primary_color_);
            }
            pub inline fn getGamutBoundaryMeshSize(self: *const T, p_num_vertices_: ?*u32, p_num_triangles_: ?*u32) HRESULT {
                return @as(*const IDeviceModelPlugIn.VTable, @ptrCast(self.vtable)).GetGamutBoundaryMeshSize(@as(*const IDeviceModelPlugIn, @ptrCast(self)), p_num_vertices_, p_num_triangles_);
            }
            pub inline fn getGamutBoundaryMesh(self: *const T, c_channels_: u32, c_vertices_: u32, c_triangles_: u32, p_vertices_: ?*f32, p_triangles_: [*]GamutShellTriangle) HRESULT {
                return @as(*const IDeviceModelPlugIn.VTable, @ptrCast(self.vtable)).GetGamutBoundaryMesh(@as(*const IDeviceModelPlugIn, @ptrCast(self)), c_channels_, c_vertices_, c_triangles_, p_vertices_, p_triangles_);
            }
            pub inline fn getNeutralAxisSize(self: *const T, pc_colors_: ?*u32) HRESULT {
                return @as(*const IDeviceModelPlugIn.VTable, @ptrCast(self.vtable)).GetNeutralAxisSize(@as(*const IDeviceModelPlugIn, @ptrCast(self)), pc_colors_);
            }
            pub inline fn getNeutralAxis(self: *const T, c_colors_: u32, p_x_y_z_colors_: [*]XYZColorF) HRESULT {
                return @as(*const IDeviceModelPlugIn.VTable, @ptrCast(self.vtable)).GetNeutralAxis(@as(*const IDeviceModelPlugIn, @ptrCast(self)), c_colors_, p_x_y_z_colors_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IGamutMapModelPlugIn_Value = Guid.initString("2dd80115-ad1e-41f6-a219-a4f4b583d1f9");
pub const IID_IGamutMapModelPlugIn = &IID_IGamutMapModelPlugIn_Value;
pub const IGamutMapModelPlugIn = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IGamutMapModelPlugIn,
            bstr_xml: ?BSTR,
            p_src_plug_in: ?*IDeviceModelPlugIn,
            p_dest_plug_in: ?*IDeviceModelPlugIn,
            p_src_g_b_d: ?*GamutBoundaryDescription,
            p_dest_g_b_d: ?*GamutBoundaryDescription,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SourceToDestinationAppearanceColors: *const fn (
            self: *const IGamutMapModelPlugIn,
            c_colors: u32,
            p_input_colors: [*]const JChColorF,
            p_output_colors: [*]JChColorF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, bstr_xml_: ?BSTR, p_src_plug_in_: ?*IDeviceModelPlugIn, p_dest_plug_in_: ?*IDeviceModelPlugIn, p_src_g_b_d_: ?*GamutBoundaryDescription, p_dest_g_b_d_: ?*GamutBoundaryDescription) HRESULT {
                return @as(*const IGamutMapModelPlugIn.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IGamutMapModelPlugIn, @ptrCast(self)), bstr_xml_, p_src_plug_in_, p_dest_plug_in_, p_src_g_b_d_, p_dest_g_b_d_);
            }
            pub inline fn sourceToDestinationAppearanceColors(self: *const T, c_colors_: u32, p_input_colors_: [*]const JChColorF, p_output_colors_: [*]JChColorF) HRESULT {
                return @as(*const IGamutMapModelPlugIn.VTable, @ptrCast(self.vtable)).SourceToDestinationAppearanceColors(@as(*const IGamutMapModelPlugIn, @ptrCast(self)), c_colors_, p_input_colors_, p_output_colors_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const NAMED_PROFILE_INFO = extern struct {
    dwFlags: u32,
    dwCount: u32,
    dwCountDevCoordinates: u32,
    szPrefix: [32]i8,
    szSuffix: [32]i8,
};

pub const GRAYCOLOR = extern struct {
    gray: u16,
};

pub const RGBCOLOR = extern struct {
    red: u16,
    green: u16,
    blue: u16,
};

pub const CMYKCOLOR = extern struct {
    cyan: u16,
    magenta: u16,
    yellow: u16,
    black: u16,
};

pub const XYZCOLOR = extern struct {
    X: u16,
    Y: u16,
    Z: u16,
};

pub const YxyCOLOR = extern struct {
    Y: u16,
    x: u16,
    y: u16,
};

pub const LabCOLOR = extern struct {
    L: u16,
    a: u16,
    b: u16,
};

pub const GENERIC3CHANNEL = extern struct {
    ch1: u16,
    ch2: u16,
    ch3: u16,
};

pub const NAMEDCOLOR = extern struct {
    dwIndex: u32,
};

pub const HiFiCOLOR = extern struct {
    channel: [8]u8,
};

pub const COLOR = extern union {
    gray: GRAYCOLOR,
    rgb: RGBCOLOR,
    cmyk: CMYKCOLOR,
    XYZ: XYZCOLOR,
    Yxy: YxyCOLOR,
    Lab: LabCOLOR,
    gen3ch: GENERIC3CHANNEL,
    named: NAMEDCOLOR,
    hifi: HiFiCOLOR,
    Anonymous: extern struct {
        reserved1: u32,
        reserved2: ?*anyopaque,
    },
};

pub const COLORTYPE = enum(i32) {
    GRAY = 1,
    RGB = 2,
    XYZ = 3,
    Yxy = 4,
    Lab = 5,
    @"3_CHANNEL" = 6,
    CMYK = 7,
    @"5_CHANNEL" = 8,
    @"6_CHANNEL" = 9,
    @"7_CHANNEL" = 10,
    @"8_CHANNEL" = 11,
    NAMED = 12,
};
pub const COLOR_GRAY = COLORTYPE.GRAY;
pub const COLOR_RGB = COLORTYPE.RGB;
pub const COLOR_XYZ = COLORTYPE.XYZ;
pub const COLOR_Yxy = COLORTYPE.Yxy;
pub const COLOR_Lab = COLORTYPE.Lab;
pub const COLOR_3_CHANNEL = COLORTYPE.@"3_CHANNEL";
pub const COLOR_CMYK = COLORTYPE.CMYK;
pub const COLOR_5_CHANNEL = COLORTYPE.@"5_CHANNEL";
pub const COLOR_6_CHANNEL = COLORTYPE.@"6_CHANNEL";
pub const COLOR_7_CHANNEL = COLORTYPE.@"7_CHANNEL";
pub const COLOR_8_CHANNEL = COLORTYPE.@"8_CHANNEL";
pub const COLOR_NAMED = COLORTYPE.NAMED;

pub const COLORPROFILETYPE = enum(i32) {
    ICC = 0,
    DMP = 1,
    CAMP = 2,
    GMMP = 3,
};
pub const CPT_ICC = COLORPROFILETYPE.ICC;
pub const CPT_DMP = COLORPROFILETYPE.DMP;
pub const CPT_CAMP = COLORPROFILETYPE.CAMP;
pub const CPT_GMMP = COLORPROFILETYPE.GMMP;

pub const COLORPROFILESUBTYPE = enum(i32) {
    PERCEPTUAL = 0,
    RELATIVE_COLORIMETRIC = 1,
    SATURATION = 2,
    ABSOLUTE_COLORIMETRIC = 3,
    NONE = 4,
    RGB_WORKING_SPACE = 5,
    CUSTOM_WORKING_SPACE = 6,
    STANDARD_DISPLAY_COLOR_MODE = 7,
    EXTENDED_DISPLAY_COLOR_MODE = 8,
};
pub const CPST_PERCEPTUAL = COLORPROFILESUBTYPE.PERCEPTUAL;
pub const CPST_RELATIVE_COLORIMETRIC = COLORPROFILESUBTYPE.RELATIVE_COLORIMETRIC;
pub const CPST_SATURATION = COLORPROFILESUBTYPE.SATURATION;
pub const CPST_ABSOLUTE_COLORIMETRIC = COLORPROFILESUBTYPE.ABSOLUTE_COLORIMETRIC;
pub const CPST_NONE = COLORPROFILESUBTYPE.NONE;
pub const CPST_RGB_WORKING_SPACE = COLORPROFILESUBTYPE.RGB_WORKING_SPACE;
pub const CPST_CUSTOM_WORKING_SPACE = COLORPROFILESUBTYPE.CUSTOM_WORKING_SPACE;
pub const CPST_STANDARD_DISPLAY_COLOR_MODE = COLORPROFILESUBTYPE.STANDARD_DISPLAY_COLOR_MODE;
pub const CPST_EXTENDED_DISPLAY_COLOR_MODE = COLORPROFILESUBTYPE.EXTENDED_DISPLAY_COLOR_MODE;

pub const COLORDATATYPE = enum(i32) {
    BYTE = 1,
    WORD = 2,
    FLOAT = 3,
    S2DOT13FIXED = 4,
    @"10b_R10G10B10A2" = 5,
    @"10b_R10G10B10A2_XR" = 6,
    FLOAT16 = 7,
};
pub const COLOR_BYTE = COLORDATATYPE.BYTE;
pub const COLOR_WORD = COLORDATATYPE.WORD;
pub const COLOR_FLOAT = COLORDATATYPE.FLOAT;
pub const COLOR_S2DOT13FIXED = COLORDATATYPE.S2DOT13FIXED;
pub const COLOR_10b_R10G10B10A2 = COLORDATATYPE.@"10b_R10G10B10A2";
pub const COLOR_10b_R10G10B10A2_XR = COLORDATATYPE.@"10b_R10G10B10A2_XR";
pub const COLOR_FLOAT16 = COLORDATATYPE.FLOAT16;

pub const BMFORMAT = enum(i32) {
    x555RGB = 0,
    x555XYZ = 257,
    x555Yxy = 258,
    x555Lab = 259,
    x555G3CH = 260,
    RGBTRIPLETS = 2,
    BGRTRIPLETS = 4,
    XYZTRIPLETS = 513,
    YxyTRIPLETS = 514,
    LabTRIPLETS = 515,
    G3CHTRIPLETS = 516,
    @"5CHANNEL" = 517,
    @"6CHANNEL" = 518,
    @"7CHANNEL" = 519,
    @"8CHANNEL" = 520,
    GRAY = 521,
    xRGBQUADS = 8,
    xBGRQUADS = 16,
    xG3CHQUADS = 772,
    KYMCQUADS = 773,
    CMYKQUADS = 32,
    @"10b_RGB" = 9,
    @"10b_XYZ" = 1025,
    @"10b_Yxy" = 1026,
    @"10b_Lab" = 1027,
    @"10b_G3CH" = 1028,
    NAMED_INDEX = 1029,
    @"16b_RGB" = 10,
    @"16b_XYZ" = 1281,
    @"16b_Yxy" = 1282,
    @"16b_Lab" = 1283,
    @"16b_G3CH" = 1284,
    @"16b_GRAY" = 1285,
    @"565RGB" = 1,
    @"32b_scRGB" = 1537,
    @"32b_scARGB" = 1538,
    S2DOT13FIXED_scRGB = 1539,
    S2DOT13FIXED_scARGB = 1540,
    R10G10B10A2 = 1793,
    R10G10B10A2_XR = 1794,
    R16G16B16A16_FLOAT = 1795,
};
pub const BM_x555RGB = BMFORMAT.x555RGB;
pub const BM_x555XYZ = BMFORMAT.x555XYZ;
pub const BM_x555Yxy = BMFORMAT.x555Yxy;
pub const BM_x555Lab = BMFORMAT.x555Lab;
pub const BM_x555G3CH = BMFORMAT.x555G3CH;
pub const BM_RGBTRIPLETS = BMFORMAT.RGBTRIPLETS;
pub const BM_BGRTRIPLETS = BMFORMAT.BGRTRIPLETS;
pub const BM_XYZTRIPLETS = BMFORMAT.XYZTRIPLETS;
pub const BM_YxyTRIPLETS = BMFORMAT.YxyTRIPLETS;
pub const BM_LabTRIPLETS = BMFORMAT.LabTRIPLETS;
pub const BM_G3CHTRIPLETS = BMFORMAT.G3CHTRIPLETS;
pub const BM_5CHANNEL = BMFORMAT.@"5CHANNEL";
pub const BM_6CHANNEL = BMFORMAT.@"6CHANNEL";
pub const BM_7CHANNEL = BMFORMAT.@"7CHANNEL";
pub const BM_8CHANNEL = BMFORMAT.@"8CHANNEL";
pub const BM_GRAY = BMFORMAT.GRAY;
pub const BM_xRGBQUADS = BMFORMAT.xRGBQUADS;
pub const BM_xBGRQUADS = BMFORMAT.xBGRQUADS;
pub const BM_xG3CHQUADS = BMFORMAT.xG3CHQUADS;
pub const BM_KYMCQUADS = BMFORMAT.KYMCQUADS;
pub const BM_CMYKQUADS = BMFORMAT.CMYKQUADS;
pub const BM_10b_RGB = BMFORMAT.@"10b_RGB";
pub const BM_10b_XYZ = BMFORMAT.@"10b_XYZ";
pub const BM_10b_Yxy = BMFORMAT.@"10b_Yxy";
pub const BM_10b_Lab = BMFORMAT.@"10b_Lab";
pub const BM_10b_G3CH = BMFORMAT.@"10b_G3CH";
pub const BM_NAMED_INDEX = BMFORMAT.NAMED_INDEX;
pub const BM_16b_RGB = BMFORMAT.@"16b_RGB";
pub const BM_16b_XYZ = BMFORMAT.@"16b_XYZ";
pub const BM_16b_Yxy = BMFORMAT.@"16b_Yxy";
pub const BM_16b_Lab = BMFORMAT.@"16b_Lab";
pub const BM_16b_G3CH = BMFORMAT.@"16b_G3CH";
pub const BM_16b_GRAY = BMFORMAT.@"16b_GRAY";
pub const BM_565RGB = BMFORMAT.@"565RGB";
pub const BM_32b_scRGB = BMFORMAT.@"32b_scRGB";
pub const BM_32b_scARGB = BMFORMAT.@"32b_scARGB";
pub const BM_S2DOT13FIXED_scRGB = BMFORMAT.S2DOT13FIXED_scRGB;
pub const BM_S2DOT13FIXED_scARGB = BMFORMAT.S2DOT13FIXED_scARGB;
pub const BM_R10G10B10A2 = BMFORMAT.R10G10B10A2;
pub const BM_R10G10B10A2_XR = BMFORMAT.R10G10B10A2_XR;
pub const BM_R16G16B16A16_FLOAT = BMFORMAT.R16G16B16A16_FLOAT;

pub const LPBMCALLBACKFN = *const fn (
    param0: u32,
    param1: u32,
    param2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub const PROFILEHEADER = extern struct {
    phSize: u32,
    phCMMType: u32,
    phVersion: u32,
    phClass: u32,
    phDataColorSpace: u32,
    phConnectionSpace: u32,
    phDateTime: [3]u32,
    phSignature: u32,
    phPlatform: u32,
    phProfileFlags: u32,
    phManufacturer: u32,
    phModel: u32,
    phAttributes: [2]u32,
    phRenderingIntent: u32,
    phIlluminant: CIEXYZ,
    phCreator: u32,
    phReserved: [44]u8,
};

pub const PROFILE = extern struct {
    dwType: u32,
    pProfileData: ?*anyopaque,
    cbDataSize: u32,
};

pub const ENUMTYPEA = extern struct {
    dwSize: u32,
    dwVersion: u32,
    dwFields: u32,
    pDeviceName: ?[*:0]const u8,
    dwMediaType: u32,
    dwDitheringMode: u32,
    dwResolution: [2]u32,
    dwCMMType: u32,
    dwClass: u32,
    dwDataColorSpace: u32,
    dwConnectionSpace: u32,
    dwSignature: u32,
    dwPlatform: u32,
    dwProfileFlags: u32,
    dwManufacturer: u32,
    dwModel: u32,
    dwAttributes: [2]u32,
    dwRenderingIntent: u32,
    dwCreator: u32,
    dwDeviceClass: u32,
};

pub const ENUMTYPEW = extern struct {
    dwSize: u32,
    dwVersion: u32,
    dwFields: u32,
    pDeviceName: ?[*:0]const u16,
    dwMediaType: u32,
    dwDitheringMode: u32,
    dwResolution: [2]u32,
    dwCMMType: u32,
    dwClass: u32,
    dwDataColorSpace: u32,
    dwConnectionSpace: u32,
    dwSignature: u32,
    dwPlatform: u32,
    dwProfileFlags: u32,
    dwManufacturer: u32,
    dwModel: u32,
    dwAttributes: [2]u32,
    dwRenderingIntent: u32,
    dwCreator: u32,
    dwDeviceClass: u32,
};

pub const WCS_PROFILE_MANAGEMENT_SCOPE = enum(i32) {
    SYSTEM_WIDE = 0,
    CURRENT_USER = 1,
};
pub const WCS_PROFILE_MANAGEMENT_SCOPE_SYSTEM_WIDE = WCS_PROFILE_MANAGEMENT_SCOPE.SYSTEM_WIDE;
pub const WCS_PROFILE_MANAGEMENT_SCOPE_CURRENT_USER = WCS_PROFILE_MANAGEMENT_SCOPE.CURRENT_USER;

// TODO: this function pointer causes dependency loop problems, so it's stubbed out
pub const PCMSCALLBACKW = switch (@import("builtin").zig_backend) {
    .stage1 => fn () callconv(@import("std").os.windows.WINAPI) void,
    else => *const fn () callconv(@import("std").os.windows.WINAPI) void,
};

// TODO: this function pointer causes dependency loop problems, so it's stubbed out
pub const PCMSCALLBACKA = switch (@import("builtin").zig_backend) {
    .stage1 => fn () callconv(@import("std").os.windows.WINAPI) void,
    else => *const fn () callconv(@import("std").os.windows.WINAPI) void,
};

pub const COLORMATCHSETUPW = extern struct {
    dwSize: u32,
    dwVersion: u32,
    dwFlags: u32,
    hwndOwner: ?HWND,
    pSourceName: ?[*:0]const u16,
    pDisplayName: ?[*:0]const u16,
    pPrinterName: ?[*:0]const u16,
    dwRenderIntent: u32,
    dwProofingIntent: u32,
    pMonitorProfile: ?PWSTR,
    ccMonitorProfile: u32,
    pPrinterProfile: ?PWSTR,
    ccPrinterProfile: u32,
    pTargetProfile: ?PWSTR,
    ccTargetProfile: u32,
    lpfnHook: ?DLGPROC,
    lParam: LPARAM,
    lpfnApplyCallback: ?PCMSCALLBACKW,
    lParamApplyCallback: LPARAM,
};

pub const COLORMATCHSETUPA = extern struct {
    dwSize: u32,
    dwVersion: u32,
    dwFlags: u32,
    hwndOwner: ?HWND,
    pSourceName: ?[*:0]const u8,
    pDisplayName: ?[*:0]const u8,
    pPrinterName: ?[*:0]const u8,
    dwRenderIntent: u32,
    dwProofingIntent: u32,
    pMonitorProfile: ?PSTR,
    ccMonitorProfile: u32,
    pPrinterProfile: ?PSTR,
    ccPrinterProfile: u32,
    pTargetProfile: ?PSTR,
    ccTargetProfile: u32,
    lpfnHook: ?DLGPROC,
    lParam: LPARAM,
    lpfnApplyCallback: ?PCMSCALLBACKA,
    lParamApplyCallback: LPARAM,
};

pub const WCS_DEVICE_VCGT_CAPABILITIES = extern struct {
    Size: u32,
    SupportsVcgt: BOOL,
};

pub const WCS_DEVICE_MHC2_CAPABILITIES = extern struct {
    Size: u32,
    SupportsMhc2: BOOL,
    RegammaLutEntryCount: u32,
    CscXyzMatrixRows: u32,
    CscXyzMatrixColumns: u32,
};

pub const WCS_DEVICE_CAPABILITIES_TYPE = enum(i32) {
    VideoCardGammaTable = 1,
    MicrosoftHardwareColorV2 = 2,
};
pub const VideoCardGammaTable = WCS_DEVICE_CAPABILITIES_TYPE.VideoCardGammaTable;
pub const MicrosoftHardwareColorV2 = WCS_DEVICE_CAPABILITIES_TYPE.MicrosoftHardwareColorV2;

//--------------------------------------------------------------------------------
// Section: Functions (121)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn SetICMMode(
    hdc: ?HDC,
    mode: ICM_MODE,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn CheckColorsInGamut(
    hdc: ?HDC,
    lp_r_g_b_triple: [*]RGBTRIPLE,
    // TODO: what to do with BytesParamIndex 3?
    dlp_buffer: ?*anyopaque,
    n_count: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn GetColorSpace(
    hdc: ?HDC,
) callconv(@import("std").os.windows.WINAPI) ?HCOLORSPACE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn GetLogColorSpaceA(
    h_color_space: ?HCOLORSPACE,
    // TODO: what to do with BytesParamIndex 2?
    lp_buffer: ?*LOGCOLORSPACEA,
    n_size: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn GetLogColorSpaceW(
    h_color_space: ?HCOLORSPACE,
    // TODO: what to do with BytesParamIndex 2?
    lp_buffer: ?*LOGCOLORSPACEW,
    n_size: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn CreateColorSpaceA(
    lplcs: ?*LOGCOLORSPACEA,
) callconv(@import("std").os.windows.WINAPI) ?HCOLORSPACE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn CreateColorSpaceW(
    lplcs: ?*LOGCOLORSPACEW,
) callconv(@import("std").os.windows.WINAPI) ?HCOLORSPACE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn SetColorSpace(
    hdc: ?HDC,
    hcs: ?HCOLORSPACE,
) callconv(@import("std").os.windows.WINAPI) ?HCOLORSPACE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn DeleteColorSpace(
    hcs: ?HCOLORSPACE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn GetICMProfileA(
    hdc: ?HDC,
    p_buf_size: ?*u32,
    psz_filename: ?[*:0]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn GetICMProfileW(
    hdc: ?HDC,
    p_buf_size: ?*u32,
    psz_filename: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn SetICMProfileA(
    hdc: ?HDC,
    lp_file_name: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn SetICMProfileW(
    hdc: ?HDC,
    lp_file_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn GetDeviceGammaRamp(
    hdc: ?HDC,
    lp_ramp: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn SetDeviceGammaRamp(
    hdc: ?HDC,
    lp_ramp: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn ColorMatchToTarget(
    hdc: ?HDC,
    hdc_target: ?HDC,
    action: COLOR_MATCH_TO_TARGET_ACTION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn EnumICMProfilesA(
    hdc: ?HDC,
    proc: ?ICMENUMPROCA,
    param2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn EnumICMProfilesW(
    hdc: ?HDC,
    proc: ?ICMENUMPROCW,
    param2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn UpdateICMRegKeyA(
    reserved: u32,
    lpsz_c_m_i_d: ?PSTR,
    lpsz_file_name: ?PSTR,
    command: ICM_COMMAND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn UpdateICMRegKeyW(
    reserved: u32,
    lpsz_c_m_i_d: ?PWSTR,
    lpsz_file_name: ?PWSTR,
    command: ICM_COMMAND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "gdi32" fn ColorCorrectPalette(
    hdc: ?HDC,
    h_pal: ?HPALETTE,
    de_first: u32,
    num: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn OpenColorProfileA(
    p_profile: ?*PROFILE,
    dw_desired_access: u32,
    dw_share_mode: u32,
    dw_creation_mode: u32,
) callconv(@import("std").os.windows.WINAPI) isize;

pub extern "mscms" fn OpenColorProfileW(
    p_profile: ?*PROFILE,
    dw_desired_access: u32,
    dw_share_mode: u32,
    dw_creation_mode: u32,
) callconv(@import("std").os.windows.WINAPI) isize;

pub extern "mscms" fn CloseColorProfile(
    h_profile: isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn GetColorProfileFromHandle(
    h_profile: isize,
    // TODO: what to do with BytesParamIndex 2?
    p_profile: ?*u8,
    pcb_profile: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn IsColorProfileValid(
    h_profile: isize,
    pb_valid: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn CreateProfileFromLogColorSpaceA(
    p_log_color_space: ?*LOGCOLORSPACEA,
    p_profile: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn CreateProfileFromLogColorSpaceW(
    p_log_color_space: ?*LOGCOLORSPACEW,
    p_profile: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn GetCountColorProfileElements(
    h_profile: isize,
    pn_element_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn GetColorProfileHeader(
    h_profile: isize,
    p_header: ?*PROFILEHEADER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn GetColorProfileElementTag(
    h_profile: isize,
    dw_index: u32,
    p_tag: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn IsColorProfileTagPresent(
    h_profile: isize,
    tag: u32,
    pb_present: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn GetColorProfileElement(
    h_profile: isize,
    tag: u32,
    dw_offset: u32,
    pcb_element: ?*u32,
    // TODO: what to do with BytesParamIndex 3?
    p_element: ?*anyopaque,
    pb_reference: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn SetColorProfileHeader(
    h_profile: isize,
    p_header: ?*PROFILEHEADER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn SetColorProfileElementSize(
    h_profile: isize,
    tag_type: u32,
    pcb_element: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn SetColorProfileElement(
    h_profile: isize,
    tag: u32,
    dw_offset: u32,
    pcb_element: ?*u32,
    p_element: [*]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn SetColorProfileElementReference(
    h_profile: isize,
    new_tag: u32,
    ref_tag: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn GetPS2ColorSpaceArray(
    h_profile: isize,
    dw_intent: u32,
    dw_c_s_a_type: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_p_s2_color_space_array: ?*u8,
    pcb_p_s2_color_space_array: ?*u32,
    pb_binary: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn GetPS2ColorRenderingIntent(
    h_profile: isize,
    dw_intent: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_buffer: ?*u8,
    pcb_p_s2_color_rendering_intent: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn GetPS2ColorRenderingDictionary(
    h_profile: isize,
    dw_intent: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_p_s2_color_rendering_dictionary: ?*u8,
    pcb_p_s2_color_rendering_dictionary: ?*u32,
    pb_binary: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn GetNamedProfileInfo(
    h_profile: isize,
    p_named_profile_info: ?*NAMED_PROFILE_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn ConvertColorNameToIndex(
    h_profile: isize,
    pa_color_name: [*]?*i8,
    pa_index: [*]u32,
    dw_count: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn ConvertIndexToColorName(
    h_profile: isize,
    pa_index: [*]u32,
    pa_color_name: [*]?*i8,
    dw_count: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn CreateDeviceLinkProfile(
    h_profile: [*]isize,
    n_profiles: u32,
    padw_intent: [*]u32,
    n_intents: u32,
    dw_flags: u32,
    p_profile_data: ?*?*u8,
    index_preferred_c_m_m: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn CreateColorTransformA(
    p_log_color_space: ?*LOGCOLORSPACEA,
    h_dest_profile: isize,
    h_target_profile: isize,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) isize;

pub extern "mscms" fn CreateColorTransformW(
    p_log_color_space: ?*LOGCOLORSPACEW,
    h_dest_profile: isize,
    h_target_profile: isize,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) isize;

pub extern "mscms" fn CreateMultiProfileTransform(
    pah_profiles: [*]isize,
    n_profiles: u32,
    padw_intent: [*]u32,
    n_intents: u32,
    dw_flags: u32,
    index_preferred_c_m_m: u32,
) callconv(@import("std").os.windows.WINAPI) isize;

pub extern "mscms" fn DeleteColorTransform(
    hxform: isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn TranslateBitmapBits(
    h_color_transform: isize,
    p_src_bits: ?*anyopaque,
    bm_input: BMFORMAT,
    dw_width: u32,
    dw_height: u32,
    dw_input_stride: u32,
    p_dest_bits: ?*anyopaque,
    bm_output: BMFORMAT,
    dw_output_stride: u32,
    pfn_call_back: ?LPBMCALLBACKFN,
    ul_callback_data: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn CheckBitmapBits(
    h_color_transform: isize,
    p_src_bits: ?*anyopaque,
    bm_input: BMFORMAT,
    dw_width: u32,
    dw_height: u32,
    dw_stride: u32,
    pa_result: ?*u8,
    pfn_callback: ?LPBMCALLBACKFN,
    lp_callback_data: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn TranslateColors(
    h_color_transform: isize,
    pa_input_colors: [*]COLOR,
    n_colors: u32,
    ct_input: COLORTYPE,
    pa_output_colors: [*]COLOR,
    ct_output: COLORTYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn CheckColors(
    h_color_transform: isize,
    pa_input_colors: [*]COLOR,
    n_colors: u32,
    ct_input: COLORTYPE,
    pa_result: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn GetCMMInfo(
    h_color_transform: isize,
    param1: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "mscms" fn RegisterCMMA(
    p_machine_name: ?[*:0]const u8,
    cmm_i_d: u32,
    p_c_m_mdll: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn RegisterCMMW(
    p_machine_name: ?[*:0]const u16,
    cmm_i_d: u32,
    p_c_m_mdll: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn UnregisterCMMA(
    p_machine_name: ?[*:0]const u8,
    cmm_i_d: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn UnregisterCMMW(
    p_machine_name: ?[*:0]const u16,
    cmm_i_d: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn SelectCMM(
    dw_c_m_m_type: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn GetColorDirectoryA(
    p_machine_name: ?[*:0]const u8,
    // TODO: what to do with BytesParamIndex 2?
    p_buffer: ?PSTR,
    pdw_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn GetColorDirectoryW(
    p_machine_name: ?[*:0]const u16,
    // TODO: what to do with BytesParamIndex 2?
    p_buffer: ?PWSTR,
    pdw_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn InstallColorProfileA(
    p_machine_name: ?[*:0]const u8,
    p_profile_name: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn InstallColorProfileW(
    p_machine_name: ?[*:0]const u16,
    p_profile_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn UninstallColorProfileA(
    p_machine_name: ?[*:0]const u8,
    p_profile_name: ?[*:0]const u8,
    b_delete: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn UninstallColorProfileW(
    p_machine_name: ?[*:0]const u16,
    p_profile_name: ?[*:0]const u16,
    b_delete: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn EnumColorProfilesA(
    p_machine_name: ?[*:0]const u8,
    p_enum_record: ?*ENUMTYPEA,
    // TODO: what to do with BytesParamIndex 3?
    p_enumeration_buffer: ?*u8,
    pdw_size_of_enumeration_buffer: ?*u32,
    pn_profiles: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn EnumColorProfilesW(
    p_machine_name: ?[*:0]const u16,
    p_enum_record: ?*ENUMTYPEW,
    // TODO: what to do with BytesParamIndex 3?
    p_enumeration_buffer: ?*u8,
    pdw_size_of_enumeration_buffer: ?*u32,
    pn_profiles: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn SetStandardColorSpaceProfileA(
    p_machine_name: ?[*:0]const u8,
    dw_profile_i_d: u32,
    p_profilename: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn SetStandardColorSpaceProfileW(
    p_machine_name: ?[*:0]const u16,
    dw_profile_i_d: u32,
    p_profile_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn GetStandardColorSpaceProfileA(
    p_machine_name: ?[*:0]const u8,
    dw_s_c_s: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_buffer: ?PSTR,
    pcb_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn GetStandardColorSpaceProfileW(
    p_machine_name: ?[*:0]const u16,
    dw_s_c_s: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_buffer: ?PWSTR,
    pcb_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn AssociateColorProfileWithDeviceA(
    p_machine_name: ?[*:0]const u8,
    p_profile_name: ?[*:0]const u8,
    p_device_name: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn AssociateColorProfileWithDeviceW(
    p_machine_name: ?[*:0]const u16,
    p_profile_name: ?[*:0]const u16,
    p_device_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn DisassociateColorProfileFromDeviceA(
    p_machine_name: ?[*:0]const u8,
    p_profile_name: ?[*:0]const u8,
    p_device_name: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn DisassociateColorProfileFromDeviceW(
    p_machine_name: ?[*:0]const u16,
    p_profile_name: ?[*:0]const u16,
    p_device_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "icmui" fn SetupColorMatchingW(
    pcms: ?*COLORMATCHSETUPW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "icmui" fn SetupColorMatchingA(
    pcms: ?*COLORMATCHSETUPA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn WcsAssociateColorProfileWithDevice(
    scope: WCS_PROFILE_MANAGEMENT_SCOPE,
    p_profile_name: ?[*:0]const u16,
    p_device_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn WcsDisassociateColorProfileFromDevice(
    scope: WCS_PROFILE_MANAGEMENT_SCOPE,
    p_profile_name: ?[*:0]const u16,
    p_device_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn WcsEnumColorProfilesSize(
    scope: WCS_PROFILE_MANAGEMENT_SCOPE,
    p_enum_record: ?*ENUMTYPEW,
    pdw_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn WcsEnumColorProfiles(
    scope: WCS_PROFILE_MANAGEMENT_SCOPE,
    p_enum_record: ?*ENUMTYPEW,
    // TODO: what to do with BytesParamIndex 3?
    p_buffer: ?*u8,
    dw_size: u32,
    pn_profiles: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn WcsGetDefaultColorProfileSize(
    scope: WCS_PROFILE_MANAGEMENT_SCOPE,
    p_device_name: ?[*:0]const u16,
    cpt_color_profile_type: COLORPROFILETYPE,
    cpst_color_profile_sub_type: COLORPROFILESUBTYPE,
    dw_profile_i_d: u32,
    pcb_profile_name: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn WcsGetDefaultColorProfile(
    scope: WCS_PROFILE_MANAGEMENT_SCOPE,
    p_device_name: ?[*:0]const u16,
    cpt_color_profile_type: COLORPROFILETYPE,
    cpst_color_profile_sub_type: COLORPROFILESUBTYPE,
    dw_profile_i_d: u32,
    cb_profile_name: u32,
    // TODO: what to do with BytesParamIndex 5?
    p_profile_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn WcsSetDefaultColorProfile(
    scope: WCS_PROFILE_MANAGEMENT_SCOPE,
    p_device_name: ?[*:0]const u16,
    cpt_color_profile_type: COLORPROFILETYPE,
    cpst_color_profile_sub_type: COLORPROFILESUBTYPE,
    dw_profile_i_d: u32,
    p_profile_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn WcsSetDefaultRenderingIntent(
    scope: WCS_PROFILE_MANAGEMENT_SCOPE,
    dw_rendering_intent: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn WcsGetDefaultRenderingIntent(
    scope: WCS_PROFILE_MANAGEMENT_SCOPE,
    pdw_rendering_intent: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn WcsGetUsePerUserProfiles(
    p_device_name: ?[*:0]const u16,
    dw_device_class: u32,
    p_use_per_user_profiles: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn WcsSetUsePerUserProfiles(
    p_device_name: ?[*:0]const u16,
    dw_device_class: u32,
    use_per_user_profiles: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn WcsTranslateColors(
    h_color_transform: isize,
    n_colors: u32,
    n_input_channels: u32,
    cdt_input: COLORDATATYPE,
    cb_input: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_input_data: ?*anyopaque,
    n_output_channels: u32,
    cdt_output: COLORDATATYPE,
    cb_output: u32,
    // TODO: what to do with BytesParamIndex 8?
    p_output_data: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn WcsCheckColors(
    h_color_transform: isize,
    n_colors: u32,
    n_input_channels: u32,
    cdt_input: COLORDATATYPE,
    cb_input: u32,
    // TODO: what to do with BytesParamIndex 4?
    p_input_data: ?*anyopaque,
    pa_result: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "icm32" fn CMCheckColors(
    hcm_transform: isize,
    lpa_input_colors: [*]COLOR,
    n_colors: u32,
    ct_input: COLORTYPE,
    lpa_result: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "icm32" fn CMCheckRGBs(
    hcm_transform: isize,
    lp_src_bits: ?*anyopaque,
    bm_input: BMFORMAT,
    dw_width: u32,
    dw_height: u32,
    dw_stride: u32,
    lpa_result: ?*u8,
    pfn_callback: ?LPBMCALLBACKFN,
    ul_callback_data: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "icm32" fn CMConvertColorNameToIndex(
    h_profile: isize,
    pa_color_name: [*]?*i8,
    pa_index: [*]u32,
    dw_count: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "icm32" fn CMConvertIndexToColorName(
    h_profile: isize,
    pa_index: [*]u32,
    pa_color_name: [*]?*i8,
    dw_count: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "icm32" fn CMCreateDeviceLinkProfile(
    pah_profiles: [*]isize,
    n_profiles: u32,
    padw_intents: [*]u32,
    n_intents: u32,
    dw_flags: u32,
    lp_profile_data: ?*?*u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "icm32" fn CMCreateMultiProfileTransform(
    pah_profiles: [*]isize,
    n_profiles: u32,
    padw_intents: [*]u32,
    n_intents: u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) isize;

pub extern "icm32" fn CMCreateProfileW(
    lp_color_space: ?*LOGCOLORSPACEW,
    lp_profile_data: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "icm32" fn CMCreateTransform(
    lp_color_space: ?*LOGCOLORSPACEA,
    lp_dev_character: ?*anyopaque,
    lp_target_dev_character: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) isize;

pub extern "icm32" fn CMCreateTransformW(
    lp_color_space: ?*LOGCOLORSPACEW,
    lp_dev_character: ?*anyopaque,
    lp_target_dev_character: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) isize;

pub extern "icm32" fn CMCreateTransformExt(
    lp_color_space: ?*LOGCOLORSPACEA,
    lp_dev_character: ?*anyopaque,
    lp_target_dev_character: ?*anyopaque,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) isize;

pub extern "icm32" fn CMCheckColorsInGamut(
    hcm_transform: isize,
    lpa_r_g_b_triple: [*]RGBTRIPLE,
    // TODO: what to do with BytesParamIndex 3?
    lpa_result: ?*u8,
    n_count: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "icm32" fn CMCreateProfile(
    lp_color_space: ?*LOGCOLORSPACEA,
    lp_profile_data: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "icm32" fn CMTranslateRGB(
    hcm_transform: isize,
    color_ref: u32,
    lp_color_ref: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "icm32" fn CMTranslateRGBs(
    hcm_transform: isize,
    lp_src_bits: ?*anyopaque,
    bm_input: BMFORMAT,
    dw_width: u32,
    dw_height: u32,
    dw_stride: u32,
    lp_dest_bits: ?*anyopaque,
    bm_output: BMFORMAT,
    dw_translate_direction: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "icm32" fn CMCreateTransformExtW(
    lp_color_space: ?*LOGCOLORSPACEW,
    lp_dev_character: ?*anyopaque,
    lp_target_dev_character: ?*anyopaque,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) isize;

pub extern "icm32" fn CMDeleteTransform(
    hcm_transform: isize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "icm32" fn CMGetInfo(
    dw_info: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "icm32" fn CMGetNamedProfileInfo(
    h_profile: isize,
    p_named_profile_info: ?*NAMED_PROFILE_INFO,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "icm32" fn CMIsProfileValid(
    h_profile: isize,
    lpb_valid: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "icm32" fn CMTranslateColors(
    hcm_transform: isize,
    lpa_input_colors: [*]COLOR,
    n_colors: u32,
    ct_input: COLORTYPE,
    lpa_output_colors: [*]COLOR,
    ct_output: COLORTYPE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "icm32" fn CMTranslateRGBsExt(
    hcm_transform: isize,
    lp_src_bits: ?*anyopaque,
    bm_input: BMFORMAT,
    dw_width: u32,
    dw_height: u32,
    dw_input_stride: u32,
    lp_dest_bits: ?*anyopaque,
    bm_output: BMFORMAT,
    dw_output_stride: u32,
    lpfn_callback: ?LPBMCALLBACKFN,
    ul_callback_data: LPARAM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn WcsOpenColorProfileA(
    p_c_d_m_p_profile: ?*PROFILE,
    p_c_a_m_p_profile: ?*PROFILE,
    p_g_m_m_p_profile: ?*PROFILE,
    dw_desire_access: u32,
    dw_share_mode: u32,
    dw_creation_mode: u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) isize;

pub extern "mscms" fn WcsOpenColorProfileW(
    p_c_d_m_p_profile: ?*PROFILE,
    p_c_a_m_p_profile: ?*PROFILE,
    p_g_m_m_p_profile: ?*PROFILE,
    dw_desire_access: u32,
    dw_share_mode: u32,
    dw_creation_mode: u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) isize;

pub extern "mscms" fn WcsCreateIccProfile(
    h_wcs_profile: isize,
    dw_options: u32,
) callconv(@import("std").os.windows.WINAPI) isize;

pub extern "mscms" fn WcsGetCalibrationManagementState(
    pb_is_enabled: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn WcsSetCalibrationManagementState(
    b_is_enabled: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "mscms" fn ColorProfileAddDisplayAssociation(
    scope: WCS_PROFILE_MANAGEMENT_SCOPE,
    profile_name: ?[*:0]const u16,
    target_adapter_i_d: LUID,
    source_i_d: u32,
    set_as_default: BOOL,
    associate_as_advanced_color: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mscms" fn ColorProfileRemoveDisplayAssociation(
    scope: WCS_PROFILE_MANAGEMENT_SCOPE,
    profile_name: ?[*:0]const u16,
    target_adapter_i_d: LUID,
    source_i_d: u32,
    dissociate_advanced_color: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mscms" fn ColorProfileSetDisplayDefaultAssociation(
    scope: WCS_PROFILE_MANAGEMENT_SCOPE,
    profile_name: ?[*:0]const u16,
    profile_type: COLORPROFILETYPE,
    profile_sub_type: COLORPROFILESUBTYPE,
    target_adapter_i_d: LUID,
    source_i_d: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mscms" fn ColorProfileGetDisplayList(
    scope: WCS_PROFILE_MANAGEMENT_SCOPE,
    target_adapter_i_d: LUID,
    source_i_d: u32,
    profile_list: ?*?*?PWSTR,
    profile_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mscms" fn ColorProfileGetDisplayDefault(
    scope: WCS_PROFILE_MANAGEMENT_SCOPE,
    target_adapter_i_d: LUID,
    source_i_d: u32,
    profile_type: COLORPROFILETYPE,
    profile_sub_type: COLORPROFILESUBTYPE,
    profile_name: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "mscms" fn ColorProfileGetDisplayUserScope(
    target_adapter_i_d: LUID,
    source_i_d: u32,
    scope: ?*WCS_PROFILE_MANAGEMENT_SCOPE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (26)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const LOGCOLORSPACE = thismodule.LOGCOLORSPACEA;
        pub const ICMENUMPROC = thismodule.ICMENUMPROCA;
        pub const ENUMTYPE = thismodule.ENUMTYPEA;
        pub const PCMSCALLBACK = thismodule.PCMSCALLBACKA;
        pub const COLORMATCHSETUP = thismodule.COLORMATCHSETUPA;
        pub const GetLogColorSpace = thismodule.GetLogColorSpaceA;
        pub const CreateColorSpace = thismodule.CreateColorSpaceA;
        pub const GetICMProfile = thismodule.GetICMProfileA;
        pub const SetICMProfile = thismodule.SetICMProfileA;
        pub const EnumICMProfiles = thismodule.EnumICMProfilesA;
        pub const UpdateICMRegKey = thismodule.UpdateICMRegKeyA;
        pub const OpenColorProfile = thismodule.OpenColorProfileA;
        pub const CreateProfileFromLogColorSpace = thismodule.CreateProfileFromLogColorSpaceA;
        pub const CreateColorTransform = thismodule.CreateColorTransformA;
        pub const RegisterCMM = thismodule.RegisterCMMA;
        pub const UnregisterCMM = thismodule.UnregisterCMMA;
        pub const GetColorDirectory = thismodule.GetColorDirectoryA;
        pub const InstallColorProfile = thismodule.InstallColorProfileA;
        pub const UninstallColorProfile = thismodule.UninstallColorProfileA;
        pub const EnumColorProfiles = thismodule.EnumColorProfilesA;
        pub const SetStandardColorSpaceProfile = thismodule.SetStandardColorSpaceProfileA;
        pub const GetStandardColorSpaceProfile = thismodule.GetStandardColorSpaceProfileA;
        pub const AssociateColorProfileWithDevice = thismodule.AssociateColorProfileWithDeviceA;
        pub const DisassociateColorProfileFromDevice = thismodule.DisassociateColorProfileFromDeviceA;
        pub const SetupColorMatching = thismodule.SetupColorMatchingA;
        pub const WcsOpenColorProfile = thismodule.WcsOpenColorProfileA;
    },
    .wide => struct {
        pub const LOGCOLORSPACE = thismodule.LOGCOLORSPACEW;
        pub const ICMENUMPROC = thismodule.ICMENUMPROCW;
        pub const ENUMTYPE = thismodule.ENUMTYPEW;
        pub const PCMSCALLBACK = thismodule.PCMSCALLBACKW;
        pub const COLORMATCHSETUP = thismodule.COLORMATCHSETUPW;
        pub const GetLogColorSpace = thismodule.GetLogColorSpaceW;
        pub const CreateColorSpace = thismodule.CreateColorSpaceW;
        pub const GetICMProfile = thismodule.GetICMProfileW;
        pub const SetICMProfile = thismodule.SetICMProfileW;
        pub const EnumICMProfiles = thismodule.EnumICMProfilesW;
        pub const UpdateICMRegKey = thismodule.UpdateICMRegKeyW;
        pub const OpenColorProfile = thismodule.OpenColorProfileW;
        pub const CreateProfileFromLogColorSpace = thismodule.CreateProfileFromLogColorSpaceW;
        pub const CreateColorTransform = thismodule.CreateColorTransformW;
        pub const RegisterCMM = thismodule.RegisterCMMW;
        pub const UnregisterCMM = thismodule.UnregisterCMMW;
        pub const GetColorDirectory = thismodule.GetColorDirectoryW;
        pub const InstallColorProfile = thismodule.InstallColorProfileW;
        pub const UninstallColorProfile = thismodule.UninstallColorProfileW;
        pub const EnumColorProfiles = thismodule.EnumColorProfilesW;
        pub const SetStandardColorSpaceProfile = thismodule.SetStandardColorSpaceProfileW;
        pub const GetStandardColorSpaceProfile = thismodule.GetStandardColorSpaceProfileW;
        pub const AssociateColorProfileWithDevice = thismodule.AssociateColorProfileWithDeviceW;
        pub const DisassociateColorProfileFromDevice = thismodule.DisassociateColorProfileFromDeviceW;
        pub const SetupColorMatching = thismodule.SetupColorMatchingW;
        pub const WcsOpenColorProfile = thismodule.WcsOpenColorProfileW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const LOGCOLORSPACE = *opaque {};
        pub const ICMENUMPROC = *opaque {};
        pub const ENUMTYPE = *opaque {};
        pub const PCMSCALLBACK = *opaque {};
        pub const COLORMATCHSETUP = *opaque {};
        pub const GetLogColorSpace = *opaque {};
        pub const CreateColorSpace = *opaque {};
        pub const GetICMProfile = *opaque {};
        pub const SetICMProfile = *opaque {};
        pub const EnumICMProfiles = *opaque {};
        pub const UpdateICMRegKey = *opaque {};
        pub const OpenColorProfile = *opaque {};
        pub const CreateProfileFromLogColorSpace = *opaque {};
        pub const CreateColorTransform = *opaque {};
        pub const RegisterCMM = *opaque {};
        pub const UnregisterCMM = *opaque {};
        pub const GetColorDirectory = *opaque {};
        pub const InstallColorProfile = *opaque {};
        pub const UninstallColorProfile = *opaque {};
        pub const EnumColorProfiles = *opaque {};
        pub const SetStandardColorSpaceProfile = *opaque {};
        pub const GetStandardColorSpaceProfile = *opaque {};
        pub const AssociateColorProfileWithDevice = *opaque {};
        pub const DisassociateColorProfileFromDevice = *opaque {};
        pub const SetupColorMatching = *opaque {};
        pub const WcsOpenColorProfile = *opaque {};
    } else struct {
        pub const LOGCOLORSPACE = @compileError("'LOGCOLORSPACE' requires that UNICODE be set to true or false in the root module");
        pub const ICMENUMPROC = @compileError("'ICMENUMPROC' requires that UNICODE be set to true or false in the root module");
        pub const ENUMTYPE = @compileError("'ENUMTYPE' requires that UNICODE be set to true or false in the root module");
        pub const PCMSCALLBACK = @compileError("'PCMSCALLBACK' requires that UNICODE be set to true or false in the root module");
        pub const COLORMATCHSETUP = @compileError("'COLORMATCHSETUP' requires that UNICODE be set to true or false in the root module");
        pub const GetLogColorSpace = @compileError("'GetLogColorSpace' requires that UNICODE be set to true or false in the root module");
        pub const CreateColorSpace = @compileError("'CreateColorSpace' requires that UNICODE be set to true or false in the root module");
        pub const GetICMProfile = @compileError("'GetICMProfile' requires that UNICODE be set to true or false in the root module");
        pub const SetICMProfile = @compileError("'SetICMProfile' requires that UNICODE be set to true or false in the root module");
        pub const EnumICMProfiles = @compileError("'EnumICMProfiles' requires that UNICODE be set to true or false in the root module");
        pub const UpdateICMRegKey = @compileError("'UpdateICMRegKey' requires that UNICODE be set to true or false in the root module");
        pub const OpenColorProfile = @compileError("'OpenColorProfile' requires that UNICODE be set to true or false in the root module");
        pub const CreateProfileFromLogColorSpace = @compileError("'CreateProfileFromLogColorSpace' requires that UNICODE be set to true or false in the root module");
        pub const CreateColorTransform = @compileError("'CreateColorTransform' requires that UNICODE be set to true or false in the root module");
        pub const RegisterCMM = @compileError("'RegisterCMM' requires that UNICODE be set to true or false in the root module");
        pub const UnregisterCMM = @compileError("'UnregisterCMM' requires that UNICODE be set to true or false in the root module");
        pub const GetColorDirectory = @compileError("'GetColorDirectory' requires that UNICODE be set to true or false in the root module");
        pub const InstallColorProfile = @compileError("'InstallColorProfile' requires that UNICODE be set to true or false in the root module");
        pub const UninstallColorProfile = @compileError("'UninstallColorProfile' requires that UNICODE be set to true or false in the root module");
        pub const EnumColorProfiles = @compileError("'EnumColorProfiles' requires that UNICODE be set to true or false in the root module");
        pub const SetStandardColorSpaceProfile = @compileError("'SetStandardColorSpaceProfile' requires that UNICODE be set to true or false in the root module");
        pub const GetStandardColorSpaceProfile = @compileError("'GetStandardColorSpaceProfile' requires that UNICODE be set to true or false in the root module");
        pub const AssociateColorProfileWithDevice = @compileError("'AssociateColorProfileWithDevice' requires that UNICODE be set to true or false in the root module");
        pub const DisassociateColorProfileFromDevice = @compileError("'DisassociateColorProfileFromDevice' requires that UNICODE be set to true or false in the root module");
        pub const SetupColorMatching = @compileError("'SetupColorMatching' requires that UNICODE be set to true or false in the root module");
        pub const WcsOpenColorProfile = @compileError("'WcsOpenColorProfile' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (18)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const CHAR = @import("../foundation.zig").CHAR;
const CIEXYZ = @import("../graphics/gdi.zig").CIEXYZ;
const CIEXYZTRIPLE = @import("../graphics/gdi.zig").CIEXYZTRIPLE;
const DLGPROC = @import("../ui/windows_and_messaging.zig").DLGPROC;
const EMR = @import("../graphics/gdi.zig").EMR;
const HDC = @import("../graphics/gdi.zig").HDC;
const HPALETTE = @import("../graphics/gdi.zig").HPALETTE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IUnknown = @import("../system/com.zig").IUnknown;
const LPARAM = @import("../foundation.zig").LPARAM;
const LUID = @import("../foundation.zig").LUID;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const RGBTRIPLE = @import("../graphics/gdi.zig").RGBTRIPLE;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "ICMENUMPROCA")) {
        _ = ICMENUMPROCA;
    }
    if (@hasDecl(@This(), "ICMENUMPROCW")) {
        _ = ICMENUMPROCW;
    }
    if (@hasDecl(@This(), "LPBMCALLBACKFN")) {
        _ = LPBMCALLBACKFN;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
