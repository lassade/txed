//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (1692)
//--------------------------------------------------------------------------------
pub const HLINK_E_FIRST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221248));
pub const HLINK_S_FIRST = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262400));
pub const WM_CPL_LAUNCH = @as(u32, 2024);
pub const WM_CPL_LAUNCHED = @as(u32, 2025);
pub const CPL_DYNAMIC_RES = @as(u32, 0);
pub const CPL_INIT = @as(u32, 1);
pub const CPL_GETCOUNT = @as(u32, 2);
pub const CPL_INQUIRE = @as(u32, 3);
pub const CPL_SELECT = @as(u32, 4);
pub const CPL_DBLCLK = @as(u32, 5);
pub const CPL_STOP = @as(u32, 6);
pub const CPL_EXIT = @as(u32, 7);
pub const CPL_NEWINQUIRE = @as(u32, 8);
pub const CPL_STARTWPARMSA = @as(u32, 9);
pub const CPL_STARTWPARMSW = @as(u32, 10);
pub const CPL_STARTWPARMS = @as(u32, 10);
pub const CPL_SETUP = @as(u32, 200);
pub const HLINK_S_DONTHIDE = @as(i32, 262400);
pub const FOLDERID_NetworkFolder = Guid.initString("d20beec4-5ca8-4905-ae3b-bf251ea09b53");
pub const FOLDERID_ComputerFolder = Guid.initString("0ac0837c-bbf8-452a-850d-79d08e667ca7");
pub const FOLDERID_InternetFolder = Guid.initString("4d9f7874-4e0c-4904-967b-40b0d20c3e4b");
pub const FOLDERID_ControlPanelFolder = Guid.initString("82a74aeb-aeb4-465c-a014-d097ee346d63");
pub const FOLDERID_PrintersFolder = Guid.initString("76fc4e2d-d6ad-4519-a663-37bd56068185");
pub const FOLDERID_SyncManagerFolder = Guid.initString("43668bf8-c14e-49b2-97c9-747784d784b7");
pub const FOLDERID_SyncSetupFolder = Guid.initString("0f214138-b1d3-4a90-bba9-27cbc0c5389a");
pub const FOLDERID_ConflictFolder = Guid.initString("4bfefb45-347d-4006-a5be-ac0cb0567192");
pub const FOLDERID_SyncResultsFolder = Guid.initString("289a9a43-be44-4057-a41b-587a76d7e7f9");
pub const FOLDERID_RecycleBinFolder = Guid.initString("b7534046-3ecb-4c18-be4e-64cd4cb7d6ac");
pub const FOLDERID_ConnectionsFolder = Guid.initString("6f0cd92b-2e97-45d1-88ff-b0d186b8dedd");
pub const FOLDERID_Fonts = Guid.initString("fd228cb7-ae11-4ae3-864c-16f3910ab8fe");
pub const FOLDERID_Desktop = Guid.initString("b4bfcc3a-db2c-424c-b029-7fe99a87c641");
pub const FOLDERID_Startup = Guid.initString("b97d20bb-f46a-4c97-ba10-5e3608430854");
pub const FOLDERID_Programs = Guid.initString("a77f5d77-2e2b-44c3-a6a2-aba601054a51");
pub const FOLDERID_StartMenu = Guid.initString("625b53c3-ab48-4ec1-ba1f-a1ef4146fc19");
pub const FOLDERID_Recent = Guid.initString("ae50c081-ebd2-438a-8655-8a092e34987a");
pub const FOLDERID_SendTo = Guid.initString("8983036c-27c0-404b-8f08-102d10dcfd74");
pub const FOLDERID_Documents = Guid.initString("fdd39ad0-238f-46af-adb4-6c85480369c7");
pub const FOLDERID_Favorites = Guid.initString("1777f761-68ad-4d8a-87bd-30b759fa33dd");
pub const FOLDERID_NetHood = Guid.initString("c5abbf53-e17f-4121-8900-86626fc2c973");
pub const FOLDERID_PrintHood = Guid.initString("9274bd8d-cfd1-41c3-b35e-b13f55a758f4");
pub const FOLDERID_Templates = Guid.initString("a63293e8-664e-48db-a079-df759e0509f7");
pub const FOLDERID_CommonStartup = Guid.initString("82a5ea35-d9cd-47c5-9629-e15d2f714e6e");
pub const FOLDERID_CommonPrograms = Guid.initString("0139d44e-6afe-49f2-8690-3dafcae6ffb8");
pub const FOLDERID_CommonStartMenu = Guid.initString("a4115719-d62e-491d-aa7c-e74b8be3b067");
pub const FOLDERID_PublicDesktop = Guid.initString("c4aa340d-f20f-4863-afef-f87ef2e6ba25");
pub const FOLDERID_ProgramData = Guid.initString("62ab5d82-fdc1-4dc3-a9dd-070d1d495d97");
pub const FOLDERID_CommonTemplates = Guid.initString("b94237e7-57ac-4347-9151-b08c6c32d1f7");
pub const FOLDERID_PublicDocuments = Guid.initString("ed4824af-dce4-45a8-81e2-fc7965083634");
pub const FOLDERID_RoamingAppData = Guid.initString("3eb685db-65f9-4cf6-a03a-e3ef65729f3d");
pub const FOLDERID_LocalAppData = Guid.initString("f1b32785-6fba-4fcf-9d55-7b8e7f157091");
pub const FOLDERID_LocalAppDataLow = Guid.initString("a520a1a4-1780-4ff6-bd18-167343c5af16");
pub const FOLDERID_InternetCache = Guid.initString("352481e8-33be-4251-ba85-6007caedcf9d");
pub const FOLDERID_Cookies = Guid.initString("2b0f765d-c0e9-4171-908e-08a611b84ff6");
pub const FOLDERID_History = Guid.initString("d9dc8a3b-b784-432e-a781-5a1130a75963");
pub const FOLDERID_System = Guid.initString("1ac14e77-02e7-4e5d-b744-2eb1ae5198b7");
pub const FOLDERID_SystemX86 = Guid.initString("d65231b0-b2f1-4857-a4ce-a8e7c6ea7d27");
pub const FOLDERID_Windows = Guid.initString("f38bf404-1d43-42f2-9305-67de0b28fc23");
pub const FOLDERID_Profile = Guid.initString("5e6c858f-0e22-4760-9afe-ea3317b67173");
pub const FOLDERID_Pictures = Guid.initString("33e28130-4e1e-4676-835a-98395c3bc3bb");
pub const FOLDERID_ProgramFilesX86 = Guid.initString("7c5a40ef-a0fb-4bfc-874a-c0f2e0b9fa8e");
pub const FOLDERID_ProgramFilesCommonX86 = Guid.initString("de974d24-d9c6-4d3e-bf91-f4455120b917");
pub const FOLDERID_ProgramFilesX64 = Guid.initString("6d809377-6af0-444b-8957-a3773f02200e");
pub const FOLDERID_ProgramFilesCommonX64 = Guid.initString("6365d5a7-0f0d-45e5-87f6-0da56b6a4f7d");
pub const FOLDERID_ProgramFiles = Guid.initString("905e63b6-c1bf-494e-b29c-65b732d3d21a");
pub const FOLDERID_ProgramFilesCommon = Guid.initString("f7f1ed05-9f6d-47a2-aaae-29d317c6f066");
pub const FOLDERID_UserProgramFiles = Guid.initString("5cd7aee2-2219-4a67-b85d-6c9ce15660cb");
pub const FOLDERID_UserProgramFilesCommon = Guid.initString("bcbd3057-ca5c-4622-b42d-bc56db0ae516");
pub const FOLDERID_AdminTools = Guid.initString("724ef170-a42d-4fef-9f26-b60e846fba4f");
pub const FOLDERID_CommonAdminTools = Guid.initString("d0384e7d-bac3-4797-8f14-cba229b392b5");
pub const FOLDERID_Music = Guid.initString("4bd8d571-6d19-48d3-be97-422220080e43");
pub const FOLDERID_Videos = Guid.initString("18989b1d-99b5-455b-841c-ab7c74e4ddfc");
pub const FOLDERID_Ringtones = Guid.initString("c870044b-f49e-4126-a9c3-b52a1ff411e8");
pub const FOLDERID_PublicPictures = Guid.initString("b6ebfb86-6907-413c-9af7-4fc2abf07cc5");
pub const FOLDERID_PublicMusic = Guid.initString("3214fab5-9757-4298-bb61-92a9deaa44ff");
pub const FOLDERID_PublicVideos = Guid.initString("2400183a-6185-49fb-a2d8-4a392a602ba3");
pub const FOLDERID_PublicRingtones = Guid.initString("e555ab60-153b-4d17-9f04-a5fe99fc15ec");
pub const FOLDERID_ResourceDir = Guid.initString("8ad10c31-2adb-4296-a8f7-e4701232c972");
pub const FOLDERID_LocalizedResourcesDir = Guid.initString("2a00375e-224c-49de-b8d1-440df7ef3ddc");
pub const FOLDERID_CommonOEMLinks = Guid.initString("c1bae2d0-10df-4334-bedd-7aa20b227a9d");
pub const FOLDERID_CDBurning = Guid.initString("9e52ab10-f80d-49df-acb8-4330f5687855");
pub const FOLDERID_UserProfiles = Guid.initString("0762d272-c50a-4bb0-a382-697dcd729b80");
pub const FOLDERID_Playlists = Guid.initString("de92c1c7-837f-4f69-a3bb-86e631204a23");
pub const FOLDERID_SamplePlaylists = Guid.initString("15ca69b3-30ee-49c1-ace1-6b5ec372afb5");
pub const FOLDERID_SampleMusic = Guid.initString("b250c668-f57d-4ee1-a63c-290ee7d1aa1f");
pub const FOLDERID_SamplePictures = Guid.initString("c4900540-2379-4c75-844b-64e6faf8716b");
pub const FOLDERID_SampleVideos = Guid.initString("859ead94-2e85-48ad-a71a-0969cb56a6cd");
pub const FOLDERID_PhotoAlbums = Guid.initString("69d2cf90-fc33-4fb7-9a0c-ebb0f0fcb43c");
pub const FOLDERID_Public = Guid.initString("dfdf76a2-c82a-4d63-906a-5644ac457385");
pub const FOLDERID_ChangeRemovePrograms = Guid.initString("df7266ac-9274-4867-8d55-3bd661de872d");
pub const FOLDERID_AppUpdates = Guid.initString("a305ce99-f527-492b-8b1a-7e76fa98d6e4");
pub const FOLDERID_AddNewPrograms = Guid.initString("de61d971-5ebc-4f02-a3a9-6c82895e5c04");
pub const FOLDERID_Downloads = Guid.initString("374de290-123f-4565-9164-39c4925e467b");
pub const FOLDERID_PublicDownloads = Guid.initString("3d644c9b-1fb8-4f30-9b45-f670235f79c0");
pub const FOLDERID_SavedSearches = Guid.initString("7d1d3a04-debb-4115-95cf-2f29da2920da");
pub const FOLDERID_QuickLaunch = Guid.initString("52a4f021-7b75-48a9-9f6b-4b87a210bc8f");
pub const FOLDERID_Contacts = Guid.initString("56784854-c6cb-462b-8169-88e350acb882");
pub const FOLDERID_SidebarParts = Guid.initString("a75d362e-50fc-4fb7-ac2c-a8beaa314493");
pub const FOLDERID_SidebarDefaultParts = Guid.initString("7b396e54-9ec5-4300-be0a-2482ebae1a26");
pub const FOLDERID_PublicGameTasks = Guid.initString("debf2536-e1a8-4c59-b6a2-414586476aea");
pub const FOLDERID_GameTasks = Guid.initString("054fae61-4dd8-4787-80b6-090220c4b700");
pub const FOLDERID_SavedGames = Guid.initString("4c5c32ff-bb9d-43b0-b5b4-2d72e54eaaa4");
pub const FOLDERID_Games = Guid.initString("cac52c1a-b53d-4edc-92d7-6b2e8ac19434");
pub const FOLDERID_SEARCH_MAPI = Guid.initString("98ec0e18-2098-4d44-8644-66979315a281");
pub const FOLDERID_SEARCH_CSC = Guid.initString("ee32e446-31ca-4aba-814f-a5ebd2fd6d5e");
pub const FOLDERID_Links = Guid.initString("bfb9d5e0-c6a9-404c-b2b2-ae6db6af4968");
pub const FOLDERID_UsersFiles = Guid.initString("f3ce0f7c-4901-4acc-8648-d5d44b04ef8f");
pub const FOLDERID_UsersLibraries = Guid.initString("a302545d-deff-464b-abe8-61c8648d939b");
pub const FOLDERID_SearchHome = Guid.initString("190337d1-b8ca-4121-a639-6d472d16972a");
pub const FOLDERID_OriginalImages = Guid.initString("2c36c0aa-5812-4b87-bfd0-4cd0dfb19b39");
pub const FOLDERID_DocumentsLibrary = Guid.initString("7b0db17d-9cd2-4a93-9733-46cc89022e7c");
pub const FOLDERID_MusicLibrary = Guid.initString("2112ab0a-c86a-4ffe-a368-0de96e47012e");
pub const FOLDERID_PicturesLibrary = Guid.initString("a990ae9f-a03b-4e80-94bc-9912d7504104");
pub const FOLDERID_VideosLibrary = Guid.initString("491e922f-5643-4af4-a7eb-4e7a138d8174");
pub const FOLDERID_RecordedTVLibrary = Guid.initString("1a6fdba2-f42d-4358-a798-b74d745926c5");
pub const FOLDERID_HomeGroup = Guid.initString("52528a6b-b9e3-4add-b60d-588c2dba842d");
pub const FOLDERID_HomeGroupCurrentUser = Guid.initString("9b74b6a3-0dfd-4f11-9e78-5f7800f2e772");
pub const FOLDERID_DeviceMetadataStore = Guid.initString("5ce4a5e9-e4eb-479d-b89f-130c02886155");
pub const FOLDERID_Libraries = Guid.initString("1b3ea5dc-b587-4786-b4ef-bd1dc332aeae");
pub const FOLDERID_PublicLibraries = Guid.initString("48daf80b-e6cf-4f4e-b800-0e69d84ee384");
pub const FOLDERID_UserPinned = Guid.initString("9e3995ab-1f9c-4f13-b827-48b24b6c7174");
pub const FOLDERID_ImplicitAppShortcuts = Guid.initString("bcb5256f-79f6-4cee-b725-dc34e402fd46");
pub const FOLDERID_AccountPictures = Guid.initString("008ca0b1-55b4-4c56-b8a8-4de4b299d3be");
pub const FOLDERID_PublicUserTiles = Guid.initString("0482af6c-08f1-4c34-8c90-e17ec98b1e17");
pub const FOLDERID_AppsFolder = Guid.initString("1e87508d-89c2-42f0-8a7e-645a0f50ca58");
pub const FOLDERID_StartMenuAllPrograms = Guid.initString("f26305ef-6948-40b9-b255-81453d09c785");
pub const FOLDERID_CommonStartMenuPlaces = Guid.initString("a440879f-87a0-4f7d-b700-0207b966194a");
pub const FOLDERID_ApplicationShortcuts = Guid.initString("a3918781-e5f2-4890-b3d9-a7e54332328c");
pub const FOLDERID_RoamingTiles = Guid.initString("00bcfc5a-ed94-4e48-96a1-3f6217f21990");
pub const FOLDERID_RoamedTileImages = Guid.initString("aaa8d5a5-f1d6-4259-baa8-78e7ef60835e");
pub const FOLDERID_Screenshots = Guid.initString("b7bede81-df94-4682-a7d8-57a52620b86f");
pub const FOLDERID_CameraRoll = Guid.initString("ab5fb87b-7ce2-4f83-915d-550846c9537b");
pub const FOLDERID_SkyDrive = Guid.initString("a52bba46-e9e1-435f-b3d9-28daa648c0f6");
pub const FOLDERID_OneDrive = Guid.initString("a52bba46-e9e1-435f-b3d9-28daa648c0f6");
pub const FOLDERID_SkyDriveDocuments = Guid.initString("24d89e24-2f19-4534-9dde-6a6671fbb8fe");
pub const FOLDERID_SkyDrivePictures = Guid.initString("339719b5-8c47-4894-94c2-d8f77add44a6");
pub const FOLDERID_SkyDriveMusic = Guid.initString("c3f2459e-80d6-45dc-bfef-1f769f2be730");
pub const FOLDERID_SkyDriveCameraRoll = Guid.initString("767e6811-49cb-4273-87c2-20f355e1085b");
pub const FOLDERID_SearchHistory = Guid.initString("0d4c3db6-03a3-462f-a0e6-08924c41b5d4");
pub const FOLDERID_SearchTemplates = Guid.initString("7e636bfe-dfa9-4d5e-b456-d7b39851d8a9");
pub const FOLDERID_CameraRollLibrary = Guid.initString("2b20df75-1eda-4039-8097-38798227d5b7");
pub const FOLDERID_SavedPictures = Guid.initString("3b193882-d3ad-4eab-965a-69829d1fb59f");
pub const FOLDERID_SavedPicturesLibrary = Guid.initString("e25b5812-be88-4bd9-94b0-29233477b6c3");
pub const FOLDERID_RetailDemo = Guid.initString("12d4c69e-24ad-4923-be19-31321c43a767");
pub const FOLDERID_Device = Guid.initString("1c2ac1dc-4358-4b6c-9733-af21156576f0");
pub const FOLDERID_DevelopmentFiles = Guid.initString("dbe8e08e-3053-4bbc-b183-2a7b2b191e59");
pub const FOLDERID_Objects3D = Guid.initString("31c0dd25-9439-4f12-bf41-7ff4eda38722");
pub const FOLDERID_AppCaptures = Guid.initString("edc0fe71-98d8-4f4a-b920-c8dc133cb165");
pub const FOLDERID_LocalDocuments = Guid.initString("f42ee2d3-909f-4907-8871-4c22fc0bf756");
pub const FOLDERID_LocalPictures = Guid.initString("0ddd015d-b06c-45d5-8c4c-f59713854639");
pub const FOLDERID_LocalVideos = Guid.initString("35286a68-3c57-41a1-bbb1-0eae73d76c95");
pub const FOLDERID_LocalMusic = Guid.initString("a0c69a99-21c8-4671-8703-7934162fcf1d");
pub const FOLDERID_LocalDownloads = Guid.initString("7d83ee9b-2244-4e70-b1f5-5393042af1e4");
pub const FOLDERID_RecordedCalls = Guid.initString("2f8b40c2-83ed-48ee-b383-a1f157ec6f9a");
pub const FOLDERID_AllAppMods = Guid.initString("7ad67899-66af-43ba-9156-6aad42e6c596");
pub const FOLDERID_CurrentAppMods = Guid.initString("3db40b20-2a30-4dbe-917e-771dd21dd099");
pub const FOLDERID_AppDataDesktop = Guid.initString("b2c5e279-7add-439f-b28c-c41fe1bbf672");
pub const FOLDERID_AppDataDocuments = Guid.initString("7be16610-1f7f-44ac-bff0-83e15f2ffca1");
pub const FOLDERID_AppDataFavorites = Guid.initString("7cfbefbc-de1f-45aa-b843-a542ac536cc9");
pub const FOLDERID_AppDataProgramData = Guid.initString("559d40a3-a036-40fa-af61-84cb430a4d34");
pub const FOLDERID_LocalStorage = Guid.initString("b3eb08d3-a1f3-496b-865a-42b536cda0ec");
pub const CLSID_InternetShortcut = Guid.initString("fbf23b40-e3f0-101b-8488-00aa003e56f8");
pub const CLSID_NetworkDomain = Guid.initString("46e06680-4bf0-11d1-83ee-00a0c90dc849");
pub const CLSID_NetworkServer = Guid.initString("c0542a90-4bf0-11d1-83ee-00a0c90dc849");
pub const CLSID_NetworkShare = Guid.initString("54a754c0-4bf0-11d1-83ee-00a0c90dc849");
pub const CLSID_MyComputer = Guid.initString("20d04fe0-3aea-1069-a2d8-08002b30309d");
pub const CLSID_Internet = Guid.initString("871c5380-42a0-1069-a2ea-08002b30309d");
pub const CLSID_RecycleBin = Guid.initString("645ff040-5081-101b-9f08-00aa002f954e");
pub const CLSID_ControlPanel = Guid.initString("21ec2020-3aea-1069-a2dd-08002b30309d");
pub const CLSID_Printers = Guid.initString("2227a280-3aea-1069-a2de-08002b30309d");
pub const CLSID_MyDocuments = Guid.initString("450d8fba-ad25-11d0-98a8-0800361b1103");
pub const STR_MYDOCS_CLSID = "{450D8FBA-AD25-11D0-98A8-0800361B1103}";
pub const CATID_BrowsableShellExt = Guid.initString("00021490-0000-0000-c000-000000000046");
pub const CATID_BrowseInPlace = Guid.initString("00021491-0000-0000-c000-000000000046");
pub const CATID_DeskBand = Guid.initString("00021492-0000-0000-c000-000000000046");
pub const CATID_InfoBand = Guid.initString("00021493-0000-0000-c000-000000000046");
pub const CATID_CommBand = Guid.initString("00021494-0000-0000-c000-000000000046");
pub const FMTID_Intshcut = Guid.initString("000214a0-0000-0000-c000-000000000046");
pub const FMTID_InternetSite = Guid.initString("000214a1-0000-0000-c000-000000000046");
pub const CGID_Explorer = Guid.initString("000214d0-0000-0000-c000-000000000046");
pub const CGID_ShellDocView = Guid.initString("000214d1-0000-0000-c000-000000000046");
pub const CGID_ShellServiceObject = Guid.initString("000214d2-0000-0000-c000-000000000046");
pub const CGID_ExplorerBarDoc = Guid.initString("000214d3-0000-0000-c000-000000000046");
pub const CLSID_FolderShortcut = Guid.initString("0afaced1-e828-11d1-9187-b532f1e9575d");
pub const CLSID_CFSIconOverlayManager = Guid.initString("63b51f81-c868-11d0-999c-00c04fd655e1");
pub const CLSID_ShellThumbnailDiskCache = Guid.initString("1ebdcf80-a200-11d0-a3a4-00c04fd706ec");
pub const SID_DefView = Guid.initString("6d12fe80-7911-11cf-9534-0000c05bae0b");
pub const CGID_DefView = Guid.initString("4af07f10-d231-11d0-b942-00a0c90312e1");
pub const CLSID_MenuBand = Guid.initString("5b4dae26-b807-11d0-9815-00c04fd91972");
pub const VID_LargeIcons = Guid.initString("0057d0e0-3573-11cf-ae69-08002b2e1262");
pub const VID_SmallIcons = Guid.initString("089000c0-3573-11cf-ae69-08002b2e1262");
pub const VID_List = Guid.initString("0e1fa5e0-3573-11cf-ae69-08002b2e1262");
pub const VID_Details = Guid.initString("137e7700-3573-11cf-ae69-08002b2e1262");
pub const VID_Tile = Guid.initString("65f125e5-7be1-4810-ba9d-d271c8432ce3");
pub const VID_Content = Guid.initString("30c2c434-0889-4c8d-985d-a9f71830b0a9");
pub const VID_Thumbnails = Guid.initString("8bebb290-52d0-11d0-b7f4-00c04fd706ec");
pub const VID_ThumbStrip = Guid.initString("8eefa624-d1e9-445b-94b7-74fbce2ea11a");
pub const SID_SInPlaceBrowser = Guid.initString("1d2ae02b-3655-46cc-b63a-285988153bca");
pub const SID_SSearchBoxInfo = Guid.initString("142daa61-516b-4713-b49c-fb985ef82998");
pub const SID_CommandsPropertyBag = Guid.initString("6e043250-4416-485c-b143-e62a760d9fe5");
pub const CLSID_CUrlHistory = Guid.initString("3c374a40-bae4-11cf-bf7d-00aa006946ee");
pub const CLSID_CURLSearchHook = Guid.initString("cfbfae00-17a6-11d0-99cb-00c04fd64497");
pub const CLSID_AutoComplete = Guid.initString("00bb2763-6a77-11d0-a535-00c04fd7d062");
pub const CLSID_ACLHistory = Guid.initString("00bb2764-6a77-11d0-a535-00c04fd7d062");
pub const CLSID_ACListISF = Guid.initString("03c036f1-a186-11d0-824a-00aa005b4383");
pub const CLSID_ACLMRU = Guid.initString("6756a641-de71-11d0-831b-00aa005b4383");
pub const CLSID_ACLMulti = Guid.initString("00bb2765-6a77-11d0-a535-00c04fd7d062");
pub const CLSID_ACLCustomMRU = Guid.initString("6935db93-21e8-4ccc-beb9-9fe3c77a297a");
pub const CLSID_ProgressDialog = Guid.initString("f8383852-fcd3-11d1-a6b9-006097df5bd4");
pub const SID_STopLevelBrowser = Guid.initString("4c96be40-915c-11cf-99d3-00aa004ae837");
pub const CLSID_FileTypes = Guid.initString("b091e540-83e3-11cf-a713-0020afd79762");
pub const CLSID_ActiveDesktop = Guid.initString("75048700-ef1f-11d0-9888-006097deacf9");
pub const CLSID_QueryAssociations = Guid.initString("a07034fd-6caa-4954-ac3f-97a27216f98a");
pub const CLSID_LinkColumnProvider = Guid.initString("24f14f02-7b1c-11d1-838f-0000f80461cf");
pub const CGID_ShortCut = Guid.initString("93a68750-951a-11d1-946f-000000000000");
pub const CLSID_InternetButtons = Guid.initString("1e796980-9cc5-11d1-a83f-00c04fc99d61");
pub const CLSID_MSOButtons = Guid.initString("178f34b8-a282-11d2-86c5-00c04f8eea99");
pub const CLSID_ToolbarExtButtons = Guid.initString("2ce4b5d8-a28f-11d2-86c5-00c04f8eea99");
pub const CLSID_DarwinAppPublisher = Guid.initString("cfccc7a0-a282-11d1-9082-006008059382");
pub const CLSID_DocHostUIHandler = Guid.initString("7057e952-bd1b-11d1-8919-00c04fc2c836");
pub const FMTID_ShellDetails = Guid.initString("28636aa6-953d-11d2-b5d6-00c04fd918d0");
pub const PID_FINDDATA = @as(u32, 0);
pub const PID_NETRESOURCE = @as(u32, 1);
pub const PID_DESCRIPTIONID = @as(u32, 2);
pub const PID_WHICHFOLDER = @as(u32, 3);
pub const PID_NETWORKLOCATION = @as(u32, 4);
pub const PID_COMPUTERNAME = @as(u32, 5);
pub const FMTID_Storage = Guid.initString("b725f130-47ef-101a-a5f1-02608c9eebac");
pub const FMTID_ImageProperties = Guid.initString("14b81da1-0135-4d31-96d9-6cbfc9671a99");
pub const FMTID_CustomImageProperties = Guid.initString("7ecd8b0e-c136-4a9b-9411-4ebd6673ccc3");
pub const FMTID_LibraryProperties = Guid.initString("5d76b67f-9b3d-44bb-b6ae-25da4f638a67");
pub const FMTID_Displaced = Guid.initString("9b174b33-40ff-11d2-a27e-00c04fc30871");
pub const PID_DISPLACED_FROM = @as(u32, 2);
pub const PID_DISPLACED_DATE = @as(u32, 3);
pub const FMTID_Briefcase = Guid.initString("328d8b21-7729-4bfc-954c-902b329d56b0");
pub const PID_SYNC_COPY_IN = @as(u32, 2);
pub const FMTID_Misc = Guid.initString("9b174b34-40ff-11d2-a27e-00c04fc30871");
pub const PID_MISC_STATUS = @as(u32, 2);
pub const PID_MISC_ACCESSCOUNT = @as(u32, 3);
pub const PID_MISC_OWNER = @as(u32, 4);
pub const PID_HTMLINFOTIPFILE = @as(u32, 5);
pub const PID_MISC_PICS = @as(u32, 6);
pub const FMTID_WebView = Guid.initString("f2275480-f782-4291-bd94-f13693513aec");
pub const PID_DISPLAY_PROPERTIES = @as(u32, 0);
pub const PID_INTROTEXT = @as(u32, 1);
pub const FMTID_MUSIC = Guid.initString("56a3372e-ce9c-11d2-9f0e-006097c686f6");
pub const PIDSI_ARTIST = @as(u32, 2);
pub const PIDSI_SONGTITLE = @as(u32, 3);
pub const PIDSI_ALBUM = @as(u32, 4);
pub const PIDSI_YEAR = @as(u32, 5);
pub const PIDSI_COMMENT = @as(u32, 6);
pub const PIDSI_TRACK = @as(u32, 7);
pub const PIDSI_GENRE = @as(u32, 11);
pub const PIDSI_LYRICS = @as(u32, 12);
pub const FMTID_DRM = Guid.initString("aeac19e4-89ae-4508-b9b7-bb867abee2ed");
pub const PIDDRSI_PROTECTED = @as(u32, 2);
pub const PIDDRSI_DESCRIPTION = @as(u32, 3);
pub const PIDDRSI_PLAYCOUNT = @as(u32, 4);
pub const PIDDRSI_PLAYSTARTS = @as(u32, 5);
pub const PIDDRSI_PLAYEXPIRES = @as(u32, 6);
pub const PIDVSI_STREAM_NAME = @as(u32, 2);
pub const PIDVSI_FRAME_WIDTH = @as(u32, 3);
pub const PIDVSI_FRAME_HEIGHT = @as(u32, 4);
pub const PIDVSI_TIMELENGTH = @as(u32, 7);
pub const PIDVSI_FRAME_COUNT = @as(u32, 5);
pub const PIDVSI_FRAME_RATE = @as(u32, 6);
pub const PIDVSI_DATA_RATE = @as(u32, 8);
pub const PIDVSI_SAMPLE_SIZE = @as(u32, 9);
pub const PIDVSI_COMPRESSION = @as(u32, 10);
pub const PIDVSI_STREAM_NUMBER = @as(u32, 11);
pub const PIDASI_FORMAT = @as(u32, 2);
pub const PIDASI_TIMELENGTH = @as(u32, 3);
pub const PIDASI_AVG_DATA_RATE = @as(u32, 4);
pub const PIDASI_SAMPLE_RATE = @as(u32, 5);
pub const PIDASI_SAMPLE_SIZE = @as(u32, 6);
pub const PIDASI_CHANNEL_COUNT = @as(u32, 7);
pub const PIDASI_STREAM_NUMBER = @as(u32, 8);
pub const PIDASI_STREAM_NAME = @as(u32, 9);
pub const PIDASI_COMPRESSION = @as(u32, 10);
pub const PID_CONTROLPANEL_CATEGORY = @as(u32, 2);
pub const FMTID_Volume = Guid.initString("9b174b35-40ff-11d2-a27e-00c04fc30871");
pub const PID_VOLUME_FREE = @as(u32, 2);
pub const PID_VOLUME_CAPACITY = @as(u32, 3);
pub const PID_VOLUME_FILESYSTEM = @as(u32, 4);
pub const PID_SHARE_CSC_STATUS = @as(u32, 2);
pub const PID_LINK_TARGET = @as(u32, 2);
pub const PID_LINK_TARGET_TYPE = @as(u32, 3);
pub const FMTID_Query = Guid.initString("49691c90-7e17-101a-a91c-08002b2ecda9");
pub const PID_QUERY_RANK = @as(u32, 2);
pub const CLSID_HWShellExecute = Guid.initString("ffb8655f-81b9-4fce-b89c-9a6ba76d13e7");
pub const CLSID_DragDropHelper = Guid.initString("4657278a-411b-11d2-839a-00c04fd918d0");
pub const CLSID_CAnchorBrowsePropertyPage = Guid.initString("3050f3bb-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CImageBrowsePropertyPage = Guid.initString("3050f3b3-98b5-11cf-bb82-00aa00bdce0b");
pub const CLSID_CDocBrowsePropertyPage = Guid.initString("3050f3b4-98b5-11cf-bb82-00aa00bdce0b");
pub const SID_STopWindow = Guid.initString("49e1b500-4636-11d3-97f7-00c04f45d0b3");
pub const SID_SGetViewFromViewDual = Guid.initString("889a935d-971e-4b12-b90c-24dfc9e1e5e8");
pub const CLSID_FolderItemsMultiLevel = Guid.initString("53c74826-ab99-4d33-aca4-3117f51d3788");
pub const CLSID_NewMenu = Guid.initString("d969a300-e7ff-11d0-a93b-00a0c90f2719");
pub const BHID_SFObject = Guid.initString("3981e224-f559-11d3-8e3a-00c04f6837d5");
pub const BHID_SFUIObject = Guid.initString("3981e225-f559-11d3-8e3a-00c04f6837d5");
pub const BHID_SFViewObject = Guid.initString("3981e226-f559-11d3-8e3a-00c04f6837d5");
pub const BHID_Storage = Guid.initString("3981e227-f559-11d3-8e3a-00c04f6837d5");
pub const BHID_Stream = Guid.initString("1cebb3ab-7c10-499a-a417-92ca16c4cb83");
pub const BHID_RandomAccessStream = Guid.initString("f16fc93b-77ae-4cfe-bda7-a866eea6878d");
pub const BHID_LinkTargetItem = Guid.initString("3981e228-f559-11d3-8e3a-00c04f6837d5");
pub const BHID_StorageEnum = Guid.initString("4621a4e3-f0d6-4773-8a9c-46e77b174840");
pub const BHID_Transfer = Guid.initString("d5e346a1-f753-4932-b403-4574800e2498");
pub const BHID_PropertyStore = Guid.initString("0384e1a4-1523-439c-a4c8-ab911052f586");
pub const BHID_ThumbnailHandler = Guid.initString("7b2e650a-8e20-4f4a-b09e-6597afc72fb0");
pub const BHID_EnumItems = Guid.initString("94f60519-2850-4924-aa5a-d15e84868039");
pub const BHID_DataObject = Guid.initString("b8c0bd9f-ed24-455c-83e6-d5390c4fe8c4");
pub const BHID_AssociationArray = Guid.initString("bea9ef17-82f1-4f60-9284-4f8db75c3be9");
pub const BHID_Filter = Guid.initString("38d08778-f557-4690-9ebf-ba54706ad8f7");
pub const BHID_EnumAssocHandlers = Guid.initString("b8ab0b9c-c2ec-4f7a-918d-314900e6280a");
pub const BHID_StorageItem = Guid.initString("404e2109-77d2-4699-a5a0-4fdf10db9837");
pub const BHID_FilePlaceholder = Guid.initString("8677dceb-aae0-4005-8d3d-547fa852f825");
pub const CATID_FilePlaceholderMergeHandler = Guid.initString("3e9c9a51-d4aa-4870-b47c-7424b491f1cc");
pub const SID_CtxQueryAssociations = Guid.initString("faadfc40-b777-4b69-aa81-77035ef0e6e8");
pub const CLSID_QuickLinks = Guid.initString("0e5cbf21-d15f-11d0-8301-00aa005b4383");
pub const CLSID_ISFBand = Guid.initString("d82be2b0-5764-11d0-a96e-00c04fd705a2");
pub const CLSID_ShellFldSetExt = Guid.initString("6d5313c0-8c62-11d1-b2cd-006097df8c11");
pub const SID_SMenuBandChild = Guid.initString("ed9cc020-08b9-11d1-9823-00c04fd91972");
pub const SID_SMenuBandParent = Guid.initString("8c278eec-3eab-11d1-8cb0-00c04fd918d0");
pub const SID_SMenuPopup = Guid.initString("d1e7afeb-6a2e-11d0-8c78-00c04fd918b4");
pub const SID_SMenuBandBottomSelected = Guid.initString("165ebaf4-6d51-11d2-83ad-00c04fd918d0");
pub const SID_SMenuBandBottom = Guid.initString("743ca664-0deb-11d1-9825-00c04fd91972");
pub const SID_MenuShellFolder = Guid.initString("a6c17eb4-2d65-11d2-838f-00c04fd918d0");
pub const SID_SMenuBandContextMenuModifier = Guid.initString("39545874-7162-465e-b783-2aa1874fef81");
pub const SID_SMenuBandBKContextMenu = Guid.initString("164bbd86-1d0d-4de0-9a3b-d9729647c2b8");
pub const CGID_MENUDESKBAR = Guid.initString("5c9f0a12-959e-11d0-a3a4-00a0c9082636");
pub const SID_SMenuBandTop = Guid.initString("9493a810-ec38-11d0-bc46-00aa006ce2f5");
pub const CLSID_MenuToolbarBase = Guid.initString("40b96610-b522-11d1-b3b4-00aa006efde7");
pub const CLSID_MenuBandSite = Guid.initString("e13ef4e4-d2f2-11d0-9816-00c04fd91972");
pub const SID_SCommDlgBrowser = Guid.initString("80f30233-b7df-11d2-a33b-006097df5bd4");
pub const CPFG_LOGON_USERNAME = Guid.initString("da15bbe8-954d-4fd3-b0f4-1fb5b90b174b");
pub const CPFG_LOGON_PASSWORD = Guid.initString("60624cfa-a477-47b1-8a8e-3a4a19981827");
pub const CPFG_SMARTCARD_USERNAME = Guid.initString("3e1ecf69-568c-4d96-9d59-46444174e2d6");
pub const CPFG_SMARTCARD_PIN = Guid.initString("4fe5263b-9181-46c1-b0a4-9dedd4db7dea");
pub const CPFG_CREDENTIAL_PROVIDER_LOGO = Guid.initString("2d837775-f6cd-464e-a745-482fd0b47493");
pub const CPFG_CREDENTIAL_PROVIDER_LABEL = Guid.initString("286bbff3-bad4-438f-b007-79b7267c3d48");
pub const CPFG_STANDALONE_SUBMIT_BUTTON = Guid.initString("0b7b0ad8-cc36-4d59-802b-82f714fa7022");
pub const CPFG_STYLE_LINK_AS_BUTTON = Guid.initString("088fa508-94a6-4430-a4cb-6fc6e3c0b9e2");
pub const FOLDERTYPEID_Invalid = Guid.initString("57807898-8c4f-4462-bb63-71042380b109");
pub const FOLDERTYPEID_Generic = Guid.initString("5c4f28b5-f869-4e84-8e60-f11db97c5cc7");
pub const FOLDERTYPEID_GenericSearchResults = Guid.initString("7fde1a1e-8b31-49a5-93b8-6be14cfa4943");
pub const FOLDERTYPEID_GenericLibrary = Guid.initString("5f4eab9a-6833-4f61-899d-31cf46979d49");
pub const FOLDERTYPEID_Documents = Guid.initString("7d49d726-3c21-4f05-99aa-fdc2c9474656");
pub const FOLDERTYPEID_Pictures = Guid.initString("b3690e58-e961-423b-b687-386ebfd83239");
pub const FOLDERTYPEID_Music = Guid.initString("94d6ddcc-4a68-4175-a374-bd584a510b78");
pub const FOLDERTYPEID_Videos = Guid.initString("5fa96407-7e77-483c-ac93-691d05850de8");
pub const FOLDERTYPEID_Downloads = Guid.initString("885a186e-a440-4ada-812b-db871b942259");
pub const FOLDERTYPEID_UserFiles = Guid.initString("cd0fc69b-71e2-46e5-9690-5bcd9f57aab3");
pub const FOLDERTYPEID_UsersLibraries = Guid.initString("c4d98f09-6124-4fe0-9942-826416082da9");
pub const FOLDERTYPEID_OtherUsers = Guid.initString("b337fd00-9dd5-4635-a6d4-da33fd102b7a");
pub const FOLDERTYPEID_PublishedItems = Guid.initString("7f2f5b96-ff74-41da-afd8-1c78a5f3aea2");
pub const FOLDERTYPEID_Communications = Guid.initString("91475fe5-586b-4eba-8d75-d17434b8cdf6");
pub const FOLDERTYPEID_Contacts = Guid.initString("de2b70ec-9bf7-4a93-bd3d-243f7881d492");
pub const FOLDERTYPEID_StartMenu = Guid.initString("ef87b4cb-f2ce-4785-8658-4ca6c63e38c6");
pub const FOLDERTYPEID_RecordedTV = Guid.initString("5557a28f-5da6-4f83-8809-c2c98a11a6fa");
pub const FOLDERTYPEID_SavedGames = Guid.initString("d0363307-28cb-4106-9f23-2956e3e5e0e7");
pub const FOLDERTYPEID_OpenSearch = Guid.initString("8faf9629-1980-46ff-8023-9dceab9c3ee3");
pub const FOLDERTYPEID_SearchConnector = Guid.initString("982725ee-6f47-479e-b447-812bfa7d2e8f");
pub const FOLDERTYPEID_AccountPictures = Guid.initString("db2a5d8f-06e6-4007-aba6-af877d526ea6");
pub const FOLDERTYPEID_Games = Guid.initString("b689b0d0-76d3-4cbb-87f7-585d0e0ce070");
pub const FOLDERTYPEID_ControlPanelCategory = Guid.initString("de4f0660-fa10-4b8f-a494-068b20b22307");
pub const FOLDERTYPEID_ControlPanelClassic = Guid.initString("0c3794f3-b545-43aa-a329-c37430c58d2a");
pub const FOLDERTYPEID_Printers = Guid.initString("2c7bbec6-c844-4a0a-91fa-cef6f59cfda1");
pub const FOLDERTYPEID_RecycleBin = Guid.initString("d6d9e004-cd87-442b-9d57-5e0aeb4f6f72");
pub const FOLDERTYPEID_SoftwareExplorer = Guid.initString("d674391b-52d9-4e07-834e-67c98610f39d");
pub const FOLDERTYPEID_CompressedFolder = Guid.initString("80213e82-bcfd-4c4f-8817-bb27601267a9");
pub const FOLDERTYPEID_NetworkExplorer = Guid.initString("25cc242b-9a7c-4f51-80e0-7a2928febe42");
pub const FOLDERTYPEID_Searches = Guid.initString("0b0ba2e3-405f-415e-a6ee-cad625207853");
pub const FOLDERTYPEID_SearchHome = Guid.initString("834d8a44-0974-4ed6-866e-f203d80b3810");
pub const FOLDERTYPEID_StorageProviderGeneric = Guid.initString("4f01ebc5-2385-41f2-a28e-2c5c91fb56e0");
pub const FOLDERTYPEID_StorageProviderDocuments = Guid.initString("dd61bd66-70e8-48dd-9655-65c5e1aac2d1");
pub const FOLDERTYPEID_StorageProviderPictures = Guid.initString("71d642a9-f2b1-42cd-ad92-eb9300c7cc0a");
pub const FOLDERTYPEID_StorageProviderMusic = Guid.initString("672ecd7e-af04-4399-875c-0290845b6247");
pub const FOLDERTYPEID_StorageProviderVideos = Guid.initString("51294da1-d7b1-485b-9e9a-17cffe33e187");
pub const SYNCMGR_OBJECTID_Icon = Guid.initString("6dbc85c3-5d07-4c72-a777-7fec78072c06");
pub const SYNCMGR_OBJECTID_EventStore = Guid.initString("4bef34b9-a786-4075-ba88-0c2b9d89a98f");
pub const SYNCMGR_OBJECTID_ConflictStore = Guid.initString("d78181f4-2389-47e4-a960-60bcc2ed930b");
pub const SYNCMGR_OBJECTID_BrowseContent = Guid.initString("57cbb584-e9b4-47ae-a120-c4df3335dee2");
pub const SYNCMGR_OBJECTID_ShowSchedule = Guid.initString("edc6f3e3-8441-4109-adf3-6c1ca0b7de47");
pub const SYNCMGR_OBJECTID_QueryBeforeActivate = Guid.initString("d882d80b-e7aa-49ed-86b7-e6e1f714cdfe");
pub const SYNCMGR_OBJECTID_QueryBeforeDeactivate = Guid.initString("a0efc282-60e0-460e-9374-ea88513cfc80");
pub const SYNCMGR_OBJECTID_QueryBeforeEnable = Guid.initString("04cbf7f0-5beb-4de1-bc90-908345c480f6");
pub const SYNCMGR_OBJECTID_QueryBeforeDisable = Guid.initString("bb5f64aa-f004-4eb5-8e4d-26751966344c");
pub const SYNCMGR_OBJECTID_QueryBeforeDelete = Guid.initString("f76c3397-afb3-45d7-a59f-5a49e905437e");
pub const SYNCMGR_OBJECTID_EventLinkClick = Guid.initString("2203bdc1-1af1-4082-8c30-28399f41384c");
pub const EP_NavPane = Guid.initString("cb316b22-25f7-42b8-8a09-540d23a43c2f");
pub const EP_Commands = Guid.initString("d9745868-ca5f-4a76-91cd-f5a129fbb076");
pub const EP_Commands_Organize = Guid.initString("72e81700-e3ec-4660-bf24-3c3b7b648806");
pub const EP_Commands_View = Guid.initString("21f7c32d-eeaa-439b-bb51-37b96fd6a943");
pub const EP_DetailsPane = Guid.initString("43abf98b-89b8-472d-b9ce-e69b8229f019");
pub const EP_PreviewPane = Guid.initString("893c63d1-45c8-4d17-be19-223be71be365");
pub const EP_QueryPane = Guid.initString("65bcde4f-4f07-4f27-83a7-1afca4df7ddd");
pub const EP_AdvQueryPane = Guid.initString("b4e9db8b-34ba-4c39-b5cc-16a1bd2c411c");
pub const EP_StatusBar = Guid.initString("65fe56ce-5cfe-4bc4-ad8a-7ae3fe7e8f7c");
pub const EP_Ribbon = Guid.initString("d27524a8-c9f2-4834-a106-df8889fd4f37");
pub const CATID_LocationFactory = Guid.initString("965c4d51-8b76-4e57-80b7-564d2ea4b55e");
pub const CATID_LocationProvider = Guid.initString("1b3ca474-2614-414b-b813-1aceca3e3dd8");
pub const ItemCount_Property_GUID = Guid.initString("abbf5c45-5ccc-47b7-bb4e-87cb87bbd162");
pub const SelectedItemCount_Property_GUID = Guid.initString("8fe316d2-0e52-460a-9c1e-48f273d470a3");
pub const ItemIndex_Property_GUID = Guid.initString("92a053da-2969-4021-bf27-514cfc2e4a69");
pub const CATID_SearchableApplication = Guid.initString("366c292a-d9b3-4dbf-bb70-e62ec3d0bbbf");
pub const IDD_WIZEXTN_FIRST = @as(u32, 20480);
pub const IDD_WIZEXTN_LAST = @as(u32, 20736);
pub const SHPWHF_NORECOMPRESS = @as(u32, 1);
pub const SHPWHF_NONETPLACECREATE = @as(u32, 2);
pub const SHPWHF_NOFILESELECTOR = @as(u32, 4);
pub const SHPWHF_USEMRU = @as(u32, 8);
pub const SHPWHF_ANYLOCATION = @as(u32, 256);
pub const SHPWHF_VALIDATEVIAWEBFOLDERS = @as(u32, 65536);
pub const ACDD_VISIBLE = @as(u32, 1);
pub const PROPSTR_EXTENSIONCOMPLETIONSTATE = "ExtensionCompletionState";
pub const SID_SCommandBarState = Guid.initString("b99eaa5c-3850-4400-bc33-2ce534048bf8");
pub const NSTCDHPOS_ONTOP = @as(i32, -1);
pub const FVSIF_RECT = @as(u32, 1);
pub const FVSIF_PINNED = @as(u32, 2);
pub const FVSIF_NEWFAILED = @as(u32, 134217728);
pub const FVSIF_NEWFILE = @as(u32, 2147483648);
pub const FVSIF_CANVIEWIT = @as(u32, 1073741824);
pub const FCIDM_TOOLBAR = @as(u32, 40960);
pub const FCIDM_STATUS = @as(u32, 40961);
pub const IDC_OFFLINE_HAND = @as(u32, 103);
pub const IDC_PANTOOL_HAND_OPEN = @as(u32, 104);
pub const IDC_PANTOOL_HAND_CLOSED = @as(u32, 105);
pub const PANE_NONE = @as(u32, 4294967295);
pub const PANE_ZONE = @as(u32, 1);
pub const PANE_OFFLINE = @as(u32, 2);
pub const PANE_PRINTER = @as(u32, 3);
pub const PANE_SSL = @as(u32, 4);
pub const PANE_NAVIGATION = @as(u32, 5);
pub const PANE_PROGRESS = @as(u32, 6);
pub const PANE_PRIVACY = @as(u32, 7);
pub const DWFRF_NORMAL = @as(u32, 0);
pub const DWFRF_DELETECONFIGDATA = @as(u32, 1);
pub const DWFAF_HIDDEN = @as(u32, 1);
pub const DWFAF_GROUP1 = @as(u32, 2);
pub const DWFAF_GROUP2 = @as(u32, 4);
pub const DWFAF_AUTOHIDE = @as(u32, 16);
pub const SHIMSTCAPFLAG_LOCKABLE = @as(u32, 1);
pub const SHIMSTCAPFLAG_PURGEABLE = @as(u32, 2);
pub const ISFB_MASK_STATE = @as(u32, 1);
pub const ISFB_MASK_BKCOLOR = @as(u32, 2);
pub const ISFB_MASK_VIEWMODE = @as(u32, 4);
pub const ISFB_MASK_SHELLFOLDER = @as(u32, 8);
pub const ISFB_MASK_IDLIST = @as(u32, 16);
pub const ISFB_MASK_COLORS = @as(u32, 32);
pub const ISFB_STATE_DEFAULT = @as(u32, 0);
pub const ISFB_STATE_DEBOSSED = @as(u32, 1);
pub const ISFB_STATE_ALLOWRENAME = @as(u32, 2);
pub const ISFB_STATE_NOSHOWTEXT = @as(u32, 4);
pub const ISFB_STATE_CHANNELBAR = @as(u32, 16);
pub const ISFB_STATE_QLINKSMODE = @as(u32, 32);
pub const ISFB_STATE_FULLOPEN = @as(u32, 64);
pub const ISFB_STATE_NONAMESORT = @as(u32, 128);
pub const ISFB_STATE_BTNMINSIZE = @as(u32, 256);
pub const ISFBVIEWMODE_SMALLICONS = @as(u32, 1);
pub const ISFBVIEWMODE_LARGEICONS = @as(u32, 2);
pub const ISFBVIEWMODE_LOGOS = @as(u32, 3);
pub const DBC_GS_IDEAL = @as(u32, 0);
pub const DBC_GS_SIZEDOWN = @as(u32, 1);
pub const DBC_HIDE = @as(u32, 0);
pub const DBC_SHOW = @as(u32, 1);
pub const DBC_SHOWOBSCURE = @as(u32, 2);
pub const SSM_CLEAR = @as(u32, 0);
pub const SSM_SET = @as(u32, 1);
pub const SSM_REFRESH = @as(u32, 2);
pub const SSM_UPDATE = @as(u32, 4);
pub const SCHEME_DISPLAY = @as(u32, 1);
pub const SCHEME_EDIT = @as(u32, 2);
pub const SCHEME_LOCAL = @as(u32, 4);
pub const SCHEME_GLOBAL = @as(u32, 8);
pub const SCHEME_REFRESH = @as(u32, 16);
pub const SCHEME_UPDATE = @as(u32, 32);
pub const SCHEME_DONOTUSE = @as(u32, 64);
pub const SCHEME_CREATE = @as(u32, 128);
pub const GADOF_DIRTY = @as(u32, 1);
pub const SHCDF_UPDATEITEM = @as(u32, 1);
pub const PPCF_ADDQUOTES = @as(u32, 1);
pub const PPCF_ADDARGUMENTS = @as(u32, 3);
pub const PPCF_NODIRECTORIES = @as(u32, 16);
pub const PPCF_FORCEQUALIFY = @as(u32, 64);
pub const PPCF_LONGESTPOSSIBLE = @as(u32, 128);
pub const OPENPROPS_NONE = @as(u32, 0);
pub const OPENPROPS_INHIBITPIF = @as(u32, 32768);
pub const GETPROPS_NONE = @as(u32, 0);
pub const SETPROPS_NONE = @as(u32, 0);
pub const CLOSEPROPS_NONE = @as(u32, 0);
pub const CLOSEPROPS_DISCARD = @as(u32, 1);
pub const TBIF_APPEND = @as(u32, 0);
pub const TBIF_PREPEND = @as(u32, 1);
pub const TBIF_REPLACE = @as(u32, 2);
pub const TBIF_DEFAULT = @as(u32, 0);
pub const TBIF_INTERNETBAR = @as(u32, 65536);
pub const TBIF_STANDARDTOOLBAR = @as(u32, 131072);
pub const TBIF_NOTOOLBAR = @as(u32, 196608);
pub const SFVM_REARRANGE = @as(u32, 1);
pub const SFVM_ADDOBJECT = @as(u32, 3);
pub const SFVM_REMOVEOBJECT = @as(u32, 6);
pub const SFVM_UPDATEOBJECT = @as(u32, 7);
pub const SFVM_GETSELECTEDOBJECTS = @as(u32, 9);
pub const SFVM_SETITEMPOS = @as(u32, 14);
pub const SFVM_SETCLIPBOARD = @as(u32, 16);
pub const SFVM_SETPOINTS = @as(u32, 23);
pub const GIL_OPENICON = @as(u32, 1);
pub const GIL_FORSHELL = @as(u32, 2);
pub const GIL_ASYNC = @as(u32, 32);
pub const GIL_DEFAULTICON = @as(u32, 64);
pub const GIL_FORSHORTCUT = @as(u32, 128);
pub const GIL_CHECKSHIELD = @as(u32, 512);
pub const GIL_SIMULATEDOC = @as(u32, 1);
pub const GIL_PERINSTANCE = @as(u32, 2);
pub const GIL_PERCLASS = @as(u32, 4);
pub const GIL_NOTFILENAME = @as(u32, 8);
pub const GIL_DONTCACHE = @as(u32, 16);
pub const GIL_SHIELD = @as(u32, 512);
pub const GIL_FORCENOSHIELD = @as(u32, 1024);
pub const SIOM_OVERLAYINDEX = @as(u32, 1);
pub const SIOM_ICONINDEX = @as(u32, 2);
pub const SIOM_RESERVED_SHARED = @as(u32, 0);
pub const SIOM_RESERVED_LINK = @as(u32, 1);
pub const SIOM_RESERVED_SLOWFILE = @as(u32, 2);
pub const SIOM_RESERVED_DEFAULT = @as(u32, 3);
pub const OI_DEFAULT = @as(u32, 0);
pub const OI_ASYNC = @as(u32, 4294962926);
pub const IDO_SHGIOI_SHARE = @as(u32, 268435455);
pub const IDO_SHGIOI_LINK = @as(u32, 268435454);
pub const IDO_SHGIOI_SLOWFILE = @as(u64, 4294967293);
pub const IDO_SHGIOI_DEFAULT = @as(u64, 4294967292);
pub const NT_CONSOLE_PROPS_SIG = @as(u32, 2684354562);
pub const NT_FE_CONSOLE_PROPS_SIG = @as(u32, 2684354564);
pub const EXP_DARWIN_ID_SIG = @as(u32, 2684354566);
pub const EXP_SPECIAL_FOLDER_SIG = @as(u32, 2684354565);
pub const EXP_SZ_LINK_SIG = @as(u32, 2684354561);
pub const EXP_SZ_ICON_SIG = @as(u32, 2684354567);
pub const EXP_PROPERTYSTORAGE_SIG = @as(u32, 2684354569);
pub const FCIDM_SHVIEWFIRST = @as(u32, 0);
pub const FCIDM_SHVIEWLAST = @as(u32, 32767);
pub const FCIDM_BROWSERFIRST = @as(u32, 40960);
pub const FCIDM_BROWSERLAST = @as(u32, 48896);
pub const FCIDM_GLOBALFIRST = @as(u32, 32768);
pub const FCIDM_GLOBALLAST = @as(u32, 40959);
pub const FCIDM_MENU_FILE = @as(u32, 32768);
pub const FCIDM_MENU_EDIT = @as(u32, 32832);
pub const FCIDM_MENU_VIEW = @as(u32, 32896);
pub const FCIDM_MENU_VIEW_SEP_OPTIONS = @as(u32, 32897);
pub const FCIDM_MENU_TOOLS = @as(u32, 32960);
pub const FCIDM_MENU_TOOLS_SEP_GOTO = @as(u32, 32961);
pub const FCIDM_MENU_HELP = @as(u32, 33024);
pub const FCIDM_MENU_FIND = @as(u32, 33088);
pub const FCIDM_MENU_EXPLORE = @as(u32, 33104);
pub const FCIDM_MENU_FAVORITES = @as(u32, 33136);
pub const OFASI_EDIT = @as(u32, 1);
pub const OFASI_OPENDESKTOP = @as(u32, 2);
pub const CSIDL_DESKTOP = @as(u32, 0);
pub const CSIDL_INTERNET = @as(u32, 1);
pub const CSIDL_PROGRAMS = @as(u32, 2);
pub const CSIDL_CONTROLS = @as(u32, 3);
pub const CSIDL_PRINTERS = @as(u32, 4);
pub const CSIDL_PERSONAL = @as(u32, 5);
pub const CSIDL_FAVORITES = @as(u32, 6);
pub const CSIDL_STARTUP = @as(u32, 7);
pub const CSIDL_RECENT = @as(u32, 8);
pub const CSIDL_SENDTO = @as(u32, 9);
pub const CSIDL_BITBUCKET = @as(u32, 10);
pub const CSIDL_STARTMENU = @as(u32, 11);
pub const CSIDL_MYDOCUMENTS = @as(u32, 5);
pub const CSIDL_MYMUSIC = @as(u32, 13);
pub const CSIDL_MYVIDEO = @as(u32, 14);
pub const CSIDL_DESKTOPDIRECTORY = @as(u32, 16);
pub const CSIDL_DRIVES = @as(u32, 17);
pub const CSIDL_NETWORK = @as(u32, 18);
pub const CSIDL_NETHOOD = @as(u32, 19);
pub const CSIDL_FONTS = @as(u32, 20);
pub const CSIDL_TEMPLATES = @as(u32, 21);
pub const CSIDL_COMMON_STARTMENU = @as(u32, 22);
pub const CSIDL_COMMON_PROGRAMS = @as(u32, 23);
pub const CSIDL_COMMON_STARTUP = @as(u32, 24);
pub const CSIDL_COMMON_DESKTOPDIRECTORY = @as(u32, 25);
pub const CSIDL_APPDATA = @as(u32, 26);
pub const CSIDL_PRINTHOOD = @as(u32, 27);
pub const CSIDL_LOCAL_APPDATA = @as(u32, 28);
pub const CSIDL_ALTSTARTUP = @as(u32, 29);
pub const CSIDL_COMMON_ALTSTARTUP = @as(u32, 30);
pub const CSIDL_COMMON_FAVORITES = @as(u32, 31);
pub const CSIDL_INTERNET_CACHE = @as(u32, 32);
pub const CSIDL_COOKIES = @as(u32, 33);
pub const CSIDL_HISTORY = @as(u32, 34);
pub const CSIDL_COMMON_APPDATA = @as(u32, 35);
pub const CSIDL_WINDOWS = @as(u32, 36);
pub const CSIDL_SYSTEM = @as(u32, 37);
pub const CSIDL_PROGRAM_FILES = @as(u32, 38);
pub const CSIDL_MYPICTURES = @as(u32, 39);
pub const CSIDL_PROFILE = @as(u32, 40);
pub const CSIDL_SYSTEMX86 = @as(u32, 41);
pub const CSIDL_PROGRAM_FILESX86 = @as(u32, 42);
pub const CSIDL_PROGRAM_FILES_COMMON = @as(u32, 43);
pub const CSIDL_PROGRAM_FILES_COMMONX86 = @as(u32, 44);
pub const CSIDL_COMMON_TEMPLATES = @as(u32, 45);
pub const CSIDL_COMMON_DOCUMENTS = @as(u32, 46);
pub const CSIDL_COMMON_ADMINTOOLS = @as(u32, 47);
pub const CSIDL_ADMINTOOLS = @as(u32, 48);
pub const CSIDL_CONNECTIONS = @as(u32, 49);
pub const CSIDL_COMMON_MUSIC = @as(u32, 53);
pub const CSIDL_COMMON_PICTURES = @as(u32, 54);
pub const CSIDL_COMMON_VIDEO = @as(u32, 55);
pub const CSIDL_RESOURCES = @as(u32, 56);
pub const CSIDL_RESOURCES_LOCALIZED = @as(u32, 57);
pub const CSIDL_COMMON_OEM_LINKS = @as(u32, 58);
pub const CSIDL_CDBURN_AREA = @as(u32, 59);
pub const CSIDL_COMPUTERSNEARME = @as(u32, 61);
pub const CSIDL_FLAG_CREATE = @as(u32, 32768);
pub const CSIDL_FLAG_DONT_VERIFY = @as(u32, 16384);
pub const CSIDL_FLAG_DONT_UNEXPAND = @as(u32, 8192);
pub const CSIDL_FLAG_NO_ALIAS = @as(u32, 4096);
pub const CSIDL_FLAG_PER_USER_INIT = @as(u32, 2048);
pub const CSIDL_FLAG_MASK = @as(u32, 65280);
pub const FCS_READ = @as(u32, 1);
pub const FCS_FORCEWRITE = @as(u32, 2);
pub const FCS_FLAG_DRAGDROP = @as(u32, 2);
pub const FCSM_VIEWID = @as(u32, 1);
pub const FCSM_WEBVIEWTEMPLATE = @as(u32, 2);
pub const FCSM_INFOTIP = @as(u32, 4);
pub const FCSM_CLSID = @as(u32, 8);
pub const FCSM_ICONFILE = @as(u32, 16);
pub const FCSM_LOGO = @as(u32, 32);
pub const FCSM_FLAGS = @as(u32, 64);
pub const BIF_RETURNONLYFSDIRS = @as(u32, 1);
pub const BIF_DONTGOBELOWDOMAIN = @as(u32, 2);
pub const BIF_STATUSTEXT = @as(u32, 4);
pub const BIF_RETURNFSANCESTORS = @as(u32, 8);
pub const BIF_EDITBOX = @as(u32, 16);
pub const BIF_VALIDATE = @as(u32, 32);
pub const BIF_NEWDIALOGSTYLE = @as(u32, 64);
pub const BIF_BROWSEINCLUDEURLS = @as(u32, 128);
pub const BIF_UAHINT = @as(u32, 256);
pub const BIF_NONEWFOLDERBUTTON = @as(u32, 512);
pub const BIF_NOTRANSLATETARGETS = @as(u32, 1024);
pub const BIF_BROWSEFORCOMPUTER = @as(u32, 4096);
pub const BIF_BROWSEFORPRINTER = @as(u32, 8192);
pub const BIF_BROWSEINCLUDEFILES = @as(u32, 16384);
pub const BIF_SHAREABLE = @as(u32, 32768);
pub const BIF_BROWSEFILEJUNCTIONS = @as(u32, 65536);
pub const BFFM_INITIALIZED = @as(u32, 1);
pub const BFFM_SELCHANGED = @as(u32, 2);
pub const BFFM_VALIDATEFAILEDA = @as(u32, 3);
pub const BFFM_VALIDATEFAILEDW = @as(u32, 4);
pub const BFFM_IUNKNOWN = @as(u32, 5);
pub const BFFM_SETSTATUSTEXTA = @as(u32, 1124);
pub const BFFM_ENABLEOK = @as(u32, 1125);
pub const BFFM_SETSELECTIONA = @as(u32, 1126);
pub const BFFM_SETSELECTIONW = @as(u32, 1127);
pub const BFFM_SETSTATUSTEXTW = @as(u32, 1128);
pub const BFFM_SETOKTEXT = @as(u32, 1129);
pub const BFFM_SETEXPANDED = @as(u32, 1130);
pub const BFFM_SETSTATUSTEXT = @as(u32, 1128);
pub const BFFM_SETSELECTION = @as(u32, 1127);
pub const BFFM_VALIDATEFAILED = @as(u32, 4);
pub const CMDID_INTSHORTCUTCREATE = @as(i32, 1);
pub const STR_PARSE_WITH_PROPERTIES = "ParseWithProperties";
pub const STR_PARSE_PARTIAL_IDLIST = "ParseOriginalItem";
pub const PROGDLG_NORMAL = @as(u32, 0);
pub const PROGDLG_MODAL = @as(u32, 1);
pub const PROGDLG_AUTOTIME = @as(u32, 2);
pub const PROGDLG_NOTIME = @as(u32, 4);
pub const PROGDLG_NOMINIMIZE = @as(u32, 8);
pub const PROGDLG_NOPROGRESSBAR = @as(u32, 16);
pub const PROGDLG_MARQUEEPROGRESS = @as(u32, 32);
pub const PROGDLG_NOCANCEL = @as(u32, 64);
pub const PDTIMER_RESET = @as(u32, 1);
pub const PDTIMER_PAUSE = @as(u32, 2);
pub const PDTIMER_RESUME = @as(u32, 3);
pub const COMPONENT_TOP = @as(u32, 1073741823);
pub const COMP_TYPE_HTMLDOC = @as(u32, 0);
pub const COMP_TYPE_PICTURE = @as(u32, 1);
pub const COMP_TYPE_WEBSITE = @as(u32, 2);
pub const COMP_TYPE_CONTROL = @as(u32, 3);
pub const COMP_TYPE_CFHTML = @as(u32, 4);
pub const COMP_TYPE_MAX = @as(u32, 4);
pub const IS_NORMAL = @as(u32, 1);
pub const IS_FULLSCREEN = @as(u32, 2);
pub const IS_SPLIT = @as(u32, 4);
pub const AD_APPLY_SAVE = @as(u32, 1);
pub const AD_APPLY_HTMLGEN = @as(u32, 2);
pub const AD_APPLY_REFRESH = @as(u32, 4);
pub const AD_APPLY_FORCE = @as(u32, 8);
pub const AD_APPLY_BUFFERED_REFRESH = @as(u32, 16);
pub const AD_APPLY_DYNAMICREFRESH = @as(u32, 32);
pub const AD_GETWP_BMP = @as(u32, 0);
pub const AD_GETWP_IMAGE = @as(u32, 1);
pub const AD_GETWP_LAST_APPLIED = @as(u32, 2);
pub const WPSTYLE_CENTER = @as(u32, 0);
pub const WPSTYLE_TILE = @as(u32, 1);
pub const WPSTYLE_STRETCH = @as(u32, 2);
pub const WPSTYLE_KEEPASPECT = @as(u32, 3);
pub const WPSTYLE_CROPTOFIT = @as(u32, 4);
pub const WPSTYLE_SPAN = @as(u32, 5);
pub const WPSTYLE_MAX = @as(u32, 6);
pub const COMP_ELEM_TYPE = @as(u32, 1);
pub const COMP_ELEM_CHECKED = @as(u32, 2);
pub const COMP_ELEM_DIRTY = @as(u32, 4);
pub const COMP_ELEM_NOSCROLL = @as(u32, 8);
pub const COMP_ELEM_POS_LEFT = @as(u32, 16);
pub const COMP_ELEM_POS_TOP = @as(u32, 32);
pub const COMP_ELEM_SIZE_WIDTH = @as(u32, 64);
pub const COMP_ELEM_SIZE_HEIGHT = @as(u32, 128);
pub const COMP_ELEM_POS_ZINDEX = @as(u32, 256);
pub const COMP_ELEM_SOURCE = @as(u32, 512);
pub const COMP_ELEM_FRIENDLYNAME = @as(u32, 1024);
pub const COMP_ELEM_SUBSCRIBEDURL = @as(u32, 2048);
pub const COMP_ELEM_ORIGINAL_CSI = @as(u32, 4096);
pub const COMP_ELEM_RESTORED_CSI = @as(u32, 8192);
pub const COMP_ELEM_CURITEMSTATE = @as(u32, 16384);
pub const ADDURL_SILENT = @as(u32, 1);
pub const COMPONENT_DEFAULT_LEFT = @as(u32, 65535);
pub const COMPONENT_DEFAULT_TOP = @as(u32, 65535);
pub const MAX_COLUMN_NAME_LEN = @as(u32, 80);
pub const MAX_COLUMN_DESC_LEN = @as(u32, 128);
pub const CFSTR_SHELLIDLIST = "Shell IDList Array";
pub const CFSTR_SHELLIDLISTOFFSET = "Shell Object Offsets";
pub const CFSTR_NETRESOURCES = "Net Resource";
pub const CFSTR_FILEDESCRIPTORA = "FileGroupDescriptor";
pub const CFSTR_FILEDESCRIPTORW = "FileGroupDescriptorW";
pub const CFSTR_FILECONTENTS = "FileContents";
pub const CFSTR_FILENAMEA = "FileName";
pub const CFSTR_FILENAMEW = "FileNameW";
pub const CFSTR_PRINTERGROUP = "PrinterFriendlyName";
pub const CFSTR_FILENAMEMAPA = "FileNameMap";
pub const CFSTR_FILENAMEMAPW = "FileNameMapW";
pub const CFSTR_SHELLURL = "UniformResourceLocator";
pub const CFSTR_INETURLA = "UniformResourceLocator";
pub const CFSTR_INETURLW = "UniformResourceLocatorW";
pub const CFSTR_PREFERREDDROPEFFECT = "Preferred DropEffect";
pub const CFSTR_PERFORMEDDROPEFFECT = "Performed DropEffect";
pub const CFSTR_PASTESUCCEEDED = "Paste Succeeded";
pub const CFSTR_INDRAGLOOP = "InShellDragLoop";
pub const CFSTR_MOUNTEDVOLUME = "MountedVolume";
pub const CFSTR_PERSISTEDDATAOBJECT = "PersistedDataObject";
pub const CFSTR_TARGETCLSID = "TargetCLSID";
pub const CFSTR_LOGICALPERFORMEDDROPEFFECT = "Logical Performed DropEffect";
pub const CFSTR_AUTOPLAY_SHELLIDLISTS = "Autoplay Enumerated IDList Array";
pub const CFSTR_UNTRUSTEDDRAGDROP = "UntrustedDragDrop";
pub const CFSTR_FILE_ATTRIBUTES_ARRAY = "File Attributes Array";
pub const CFSTR_INVOKECOMMAND_DROPPARAM = "InvokeCommand DropParam";
pub const CFSTR_SHELLDROPHANDLER = "DropHandlerCLSID";
pub const CFSTR_DROPDESCRIPTION = "DropDescription";
pub const CFSTR_ZONEIDENTIFIER = "ZoneIdentifier";
pub const CFSTR_FILEDESCRIPTOR = "FileGroupDescriptorW";
pub const CFSTR_FILENAME = "FileNameW";
pub const CFSTR_FILENAMEMAP = "FileNameMapW";
pub const CFSTR_INETURL = "UniformResourceLocatorW";
pub const DVASPECT_SHORTNAME = @as(u32, 2);
pub const DVASPECT_COPY = @as(u32, 3);
pub const DVASPECT_LINK = @as(u32, 4);
pub const SHCNEE_ORDERCHANGED = @as(i32, 2);
pub const SHCNEE_MSI_CHANGE = @as(i32, 4);
pub const SHCNEE_MSI_UNINSTALL = @as(i32, 5);
pub const NUM_POINTS = @as(u32, 3);
pub const CABINETSTATE_VERSION = @as(u32, 2);
pub const PIFNAMESIZE = @as(u32, 30);
pub const PIFSTARTLOCSIZE = @as(u32, 63);
pub const PIFDEFPATHSIZE = @as(u32, 64);
pub const PIFPARAMSSIZE = @as(u32, 64);
pub const PIFSHPROGSIZE = @as(u32, 64);
pub const PIFSHDATASIZE = @as(u32, 64);
pub const PIFDEFFILESIZE = @as(u32, 80);
pub const PIFMAXFILEPATH = @as(u32, 260);
pub const QCMINFO_PLACE_BEFORE = @as(u32, 0);
pub const QCMINFO_PLACE_AFTER = @as(u32, 1);
pub const SFVSOC_INVALIDATE_ALL = @as(u32, 1);
pub const SFVSOC_NOSCROLL = @as(u32, 2);
pub const SHELLSTATEVERSION_IE4 = @as(u32, 9);
pub const SHELLSTATEVERSION_WIN2K = @as(u32, 10);
pub const SHPPFW_NONE = @as(u32, 0);
pub const SHPPFW_DIRCREATE = @as(u32, 1);
pub const SHPPFW_ASKDIRCREATE = @as(u32, 2);
pub const SHPPFW_IGNOREFILENAME = @as(u32, 4);
pub const SHPPFW_NOWRITECHECK = @as(u32, 8);
pub const SHPPFW_MEDIACHECKONLY = @as(u32, 16);
pub const CMF_NORMAL = @as(u32, 0);
pub const CMF_DEFAULTONLY = @as(u32, 1);
pub const CMF_VERBSONLY = @as(u32, 2);
pub const CMF_EXPLORE = @as(u32, 4);
pub const CMF_NOVERBS = @as(u32, 8);
pub const CMF_CANRENAME = @as(u32, 16);
pub const CMF_NODEFAULT = @as(u32, 32);
pub const CMF_INCLUDESTATIC = @as(u32, 64);
pub const CMF_ITEMMENU = @as(u32, 128);
pub const CMF_EXTENDEDVERBS = @as(u32, 256);
pub const CMF_DISABLEDVERBS = @as(u32, 512);
pub const CMF_ASYNCVERBSTATE = @as(u32, 1024);
pub const CMF_OPTIMIZEFORINVOKE = @as(u32, 2048);
pub const CMF_SYNCCASCADEMENU = @as(u32, 4096);
pub const CMF_DONOTPICKDEFAULT = @as(u32, 8192);
pub const CMF_RESERVED = @as(u32, 4294901760);
pub const GCS_VERBA = @as(u32, 0);
pub const GCS_HELPTEXTA = @as(u32, 1);
pub const GCS_VALIDATEA = @as(u32, 2);
pub const GCS_VERBW = @as(u32, 4);
pub const GCS_HELPTEXTW = @as(u32, 5);
pub const GCS_VALIDATEW = @as(u32, 6);
pub const GCS_VERBICONW = @as(u32, 20);
pub const GCS_UNICODE = @as(u32, 4);
pub const GCS_VERB = @as(u32, 4);
pub const GCS_HELPTEXT = @as(u32, 5);
pub const GCS_VALIDATE = @as(u32, 6);
pub const CMDSTR_NEWFOLDERA = "NewFolder";
pub const CMDSTR_VIEWLISTA = "ViewList";
pub const CMDSTR_VIEWDETAILSA = "ViewDetails";
pub const CMDSTR_NEWFOLDERW = "NewFolder";
pub const CMDSTR_VIEWLISTW = "ViewList";
pub const CMDSTR_VIEWDETAILSW = "ViewDetails";
pub const CMDSTR_NEWFOLDER = "NewFolder";
pub const CMDSTR_VIEWLIST = "ViewList";
pub const CMDSTR_VIEWDETAILS = "ViewDetails";
pub const CMIC_MASK_SHIFT_DOWN = @as(u32, 268435456);
pub const CMIC_MASK_CONTROL_DOWN = @as(u32, 1073741824);
pub const CMIC_MASK_PTINVOKE = @as(u32, 536870912);
pub const IRTIR_TASK_NOT_RUNNING = @as(u32, 0);
pub const IRTIR_TASK_RUNNING = @as(u32, 1);
pub const IRTIR_TASK_SUSPENDED = @as(u32, 2);
pub const IRTIR_TASK_PENDING = @as(u32, 3);
pub const IRTIR_TASK_FINISHED = @as(u32, 4);
pub const ITSAT_DEFAULT_PRIORITY = @as(u32, 268435456);
pub const ITSAT_MAX_PRIORITY = @as(u32, 2147483647);
pub const ITSAT_MIN_PRIORITY = @as(u32, 0);
pub const ITSSFLAG_COMPLETE_ON_DESTROY = @as(u32, 0);
pub const ITSSFLAG_KILL_ON_DESTROY = @as(u32, 1);
pub const ITSSFLAG_FLAGS_MASK = @as(u32, 3);
pub const CSIDL_FLAG_PFTI_TRACKTARGET = @as(u32, 16384);
pub const SHCIDS_ALLFIELDS = @as(i32, -2147483648);
pub const SHCIDS_CANONICALONLY = @as(i32, 268435456);
pub const SHCIDS_BITMASK = @as(i32, -65536);
pub const SHCIDS_COLUMNMASK = @as(i32, 65535);
pub const SFGAO_CANCOPY = @as(u32, 1);
pub const SFGAO_CANMOVE = @as(u32, 2);
pub const SFGAO_CANLINK = @as(u32, 4);
pub const SFGAO_STORAGE = @as(i32, 8);
pub const SFGAO_CANRENAME = @as(i32, 16);
pub const SFGAO_CANDELETE = @as(i32, 32);
pub const SFGAO_HASPROPSHEET = @as(i32, 64);
pub const SFGAO_DROPTARGET = @as(i32, 256);
pub const SFGAO_CAPABILITYMASK = @as(i32, 375);
pub const SFGAO_PLACEHOLDER = @as(i32, 2048);
pub const SFGAO_SYSTEM = @as(i32, 4096);
pub const SFGAO_ENCRYPTED = @as(i32, 8192);
pub const SFGAO_ISSLOW = @as(i32, 16384);
pub const SFGAO_GHOSTED = @as(i32, 32768);
pub const SFGAO_LINK = @as(i32, 65536);
pub const SFGAO_SHARE = @as(i32, 131072);
pub const SFGAO_READONLY = @as(i32, 262144);
pub const SFGAO_HIDDEN = @as(i32, 524288);
pub const SFGAO_DISPLAYATTRMASK = @as(i32, 1032192);
pub const SFGAO_FILESYSANCESTOR = @as(i32, 268435456);
pub const SFGAO_FOLDER = @as(i32, 536870912);
pub const SFGAO_FILESYSTEM = @as(i32, 1073741824);
pub const SFGAO_HASSUBFOLDER = @as(i32, -2147483648);
pub const SFGAO_CONTENTSMASK = @as(i32, -2147483648);
pub const SFGAO_VALIDATE = @as(i32, 16777216);
pub const SFGAO_REMOVABLE = @as(i32, 33554432);
pub const SFGAO_COMPRESSED = @as(i32, 67108864);
pub const SFGAO_BROWSABLE = @as(i32, 134217728);
pub const SFGAO_NONENUMERATED = @as(i32, 1048576);
pub const SFGAO_NEWCONTENT = @as(i32, 2097152);
pub const SFGAO_CANMONIKER = @as(i32, 4194304);
pub const SFGAO_HASSTORAGE = @as(i32, 4194304);
pub const SFGAO_STREAM = @as(i32, 4194304);
pub const SFGAO_STORAGEANCESTOR = @as(i32, 8388608);
pub const SFGAO_STORAGECAPMASK = @as(i32, 1891958792);
pub const SFGAO_PKEYSFGAOMASK = @as(i32, -2130427904);
pub const CONFLICT_RESOLUTION_CLSID_KEY = "ConflictResolutionCLSID";
pub const STR_BIND_FORCE_FOLDER_SHORTCUT_RESOLVE = "Force Folder Shortcut Resolve";
pub const STR_AVOID_DRIVE_RESTRICTION_POLICY = "Avoid Drive Restriction Policy";
pub const STR_SKIP_BINDING_CLSID = "Skip Binding CLSID";
pub const STR_PARSE_PREFER_FOLDER_BROWSING = "Parse Prefer Folder Browsing";
pub const STR_DONT_PARSE_RELATIVE = "Don't Parse Relative";
pub const STR_PARSE_TRANSLATE_ALIASES = "Parse Translate Aliases";
pub const STR_PARSE_SKIP_NET_CACHE = "Skip Net Resource Cache";
pub const STR_PARSE_SHELL_PROTOCOL_TO_FILE_OBJECTS = "Parse Shell Protocol To File Objects";
pub const STR_TRACK_CLSID = "Track the CLSID";
pub const STR_INTERNAL_NAVIGATE = "Internal Navigation";
pub const STR_PARSE_PROPERTYSTORE = "DelegateNamedProperties";
pub const STR_NO_VALIDATE_FILENAME_CHARS = "NoValidateFilenameChars";
pub const STR_BIND_DELEGATE_CREATE_OBJECT = "Delegate Object Creation";
pub const STR_PARSE_ALLOW_INTERNET_SHELL_FOLDERS = "Allow binding to Internet shell folder handlers and negate STR_PARSE_PREFER_WEB_BROWSING";
pub const STR_PARSE_PREFER_WEB_BROWSING = "Do not bind to Internet shell folder handlers";
pub const STR_PARSE_SHOW_NET_DIAGNOSTICS_UI = "Show network diagnostics UI";
pub const STR_PARSE_DONT_REQUIRE_VALIDATED_URLS = "Do not require validated URLs";
pub const STR_INTERNETFOLDER_PARSE_ONLY_URLMON_BINDABLE = "Validate URL";
pub const BIND_INTERRUPTABLE = @as(u32, 4294967295);
pub const STR_BIND_FOLDERS_READ_ONLY = "Folders As Read Only";
pub const STR_BIND_FOLDER_ENUM_MODE = "Folder Enum Mode";
pub const STR_PARSE_WITH_EXPLICIT_PROGID = "ExplicitProgid";
pub const STR_PARSE_WITH_EXPLICIT_ASSOCAPP = "ExplicitAssociationApp";
pub const STR_PARSE_EXPLICIT_ASSOCIATION_SUCCESSFUL = "ExplicitAssociationSuccessful";
pub const STR_PARSE_AND_CREATE_ITEM = "ParseAndCreateItem";
pub const STR_PROPERTYBAG_PARAM = "SHBindCtxPropertyBag";
pub const STR_ENUM_ITEMS_FLAGS = "SHCONTF";
pub const STR_STORAGEITEM_CREATION_FLAGS = "SHGETSTORAGEITEM";
pub const STR_ITEM_CACHE_CONTEXT = "ItemCacheContext";
pub const CDBOSC_SETFOCUS = @as(u32, 0);
pub const CDBOSC_KILLFOCUS = @as(u32, 1);
pub const CDBOSC_SELCHANGE = @as(u32, 2);
pub const CDBOSC_RENAME = @as(u32, 3);
pub const CDBOSC_STATECHANGE = @as(u32, 4);
pub const CDB2N_CONTEXTMENU_DONE = @as(u32, 1);
pub const CDB2N_CONTEXTMENU_START = @as(u32, 2);
pub const CDB2GVF_SHOWALLFILES = @as(u32, 1);
pub const CDB2GVF_ISFILESAVE = @as(u32, 2);
pub const CDB2GVF_ALLOWPREVIEWPANE = @as(u32, 4);
pub const CDB2GVF_NOSELECTVERB = @as(u32, 8);
pub const CDB2GVF_NOINCLUDEITEM = @as(u32, 16);
pub const CDB2GVF_ISFOLDERPICKER = @as(u32, 32);
pub const CDB2GVF_ADDSHIELD = @as(u32, 64);
pub const SBSP_DEFBROWSER = @as(u32, 0);
pub const SBSP_SAMEBROWSER = @as(u32, 1);
pub const SBSP_NEWBROWSER = @as(u32, 2);
pub const SBSP_DEFMODE = @as(u32, 0);
pub const SBSP_OPENMODE = @as(u32, 16);
pub const SBSP_EXPLOREMODE = @as(u32, 32);
pub const SBSP_HELPMODE = @as(u32, 64);
pub const SBSP_NOTRANSFERHIST = @as(u32, 128);
pub const SBSP_ABSOLUTE = @as(u32, 0);
pub const SBSP_RELATIVE = @as(u32, 4096);
pub const SBSP_PARENT = @as(u32, 8192);
pub const SBSP_NAVIGATEBACK = @as(u32, 16384);
pub const SBSP_NAVIGATEFORWARD = @as(u32, 32768);
pub const SBSP_ALLOW_AUTONAVIGATE = @as(u32, 65536);
pub const SBSP_KEEPSAMETEMPLATE = @as(u32, 131072);
pub const SBSP_KEEPWORDWHEELTEXT = @as(u32, 262144);
pub const SBSP_ACTIVATE_NOFOCUS = @as(u32, 524288);
pub const SBSP_CREATENOHISTORY = @as(u32, 1048576);
pub const SBSP_PLAYNOSOUND = @as(u32, 2097152);
pub const SBSP_CALLERUNTRUSTED = @as(u32, 8388608);
pub const SBSP_TRUSTFIRSTDOWNLOAD = @as(u32, 16777216);
pub const SBSP_UNTRUSTEDFORDOWNLOAD = @as(u32, 33554432);
pub const SBSP_NOAUTOSELECT = @as(u32, 67108864);
pub const SBSP_WRITENOHISTORY = @as(u32, 134217728);
pub const SBSP_TRUSTEDFORACTIVEX = @as(u32, 268435456);
pub const SBSP_FEEDNAVIGATION = @as(u32, 536870912);
pub const SBSP_REDIRECT = @as(u32, 1073741824);
pub const SBSP_INITIATEDBYHLINKFRAME = @as(u32, 2147483648);
pub const FCW_STATUS = @as(u32, 1);
pub const FCW_TOOLBAR = @as(u32, 2);
pub const FCW_TREE = @as(u32, 3);
pub const FCW_INTERNETBAR = @as(u32, 6);
pub const FCW_PROGRESS = @as(u32, 8);
pub const FCT_MERGE = @as(u32, 1);
pub const FCT_CONFIGABLE = @as(u32, 2);
pub const FCT_ADDTOEND = @as(u32, 4);
pub const STR_DONT_RESOLVE_LINK = "Don't Resolve Link";
pub const STR_GET_ASYNC_HANDLER = "GetAsyncHandler";
pub const STR_GPS_HANDLERPROPERTIESONLY = "GPS_HANDLERPROPERTIESONLY";
pub const STR_GPS_FASTPROPERTIESONLY = "GPS_FASTPROPERTIESONLY";
pub const STR_GPS_OPENSLOWITEM = "GPS_OPENSLOWITEM";
pub const STR_GPS_DELAYCREATION = "GPS_DELAYCREATION";
pub const STR_GPS_BESTEFFORT = "GPS_BESTEFFORT";
pub const STR_GPS_NO_OPLOCK = "GPS_NO_OPLOCK";
pub const DI_GETDRAGIMAGE = "ShellGetDragImage";
pub const ARCONTENT_AUTORUNINF = @as(u32, 2);
pub const ARCONTENT_AUDIOCD = @as(u32, 4);
pub const ARCONTENT_DVDMOVIE = @as(u32, 8);
pub const ARCONTENT_BLANKCD = @as(u32, 16);
pub const ARCONTENT_BLANKDVD = @as(u32, 32);
pub const ARCONTENT_UNKNOWNCONTENT = @as(u32, 64);
pub const ARCONTENT_AUTOPLAYPIX = @as(u32, 128);
pub const ARCONTENT_AUTOPLAYMUSIC = @as(u32, 256);
pub const ARCONTENT_AUTOPLAYVIDEO = @as(u32, 512);
pub const ARCONTENT_VCD = @as(u32, 1024);
pub const ARCONTENT_SVCD = @as(u32, 2048);
pub const ARCONTENT_DVDAUDIO = @as(u32, 4096);
pub const ARCONTENT_BLANKBD = @as(u32, 8192);
pub const ARCONTENT_BLURAY = @as(u32, 16384);
pub const ARCONTENT_CAMERASTORAGE = @as(u32, 32768);
pub const ARCONTENT_CUSTOMEVENT = @as(u32, 65536);
pub const ARCONTENT_NONE = @as(u32, 0);
pub const ARCONTENT_MASK = @as(u32, 131070);
pub const ARCONTENT_PHASE_UNKNOWN = @as(u32, 0);
pub const ARCONTENT_PHASE_PRESNIFF = @as(u32, 268435456);
pub const ARCONTENT_PHASE_SNIFFING = @as(u32, 536870912);
pub const ARCONTENT_PHASE_FINAL = @as(u32, 1073741824);
pub const ARCONTENT_PHASE_MASK = @as(u32, 1879048192);
pub const IEI_PRIORITY_MAX = @as(u32, 2147483647);
pub const IEI_PRIORITY_MIN = @as(u32, 0);
pub const IEIT_PRIORITY_NORMAL = @as(u32, 268435456);
pub const IEIFLAG_ASYNC = @as(u32, 1);
pub const IEIFLAG_CACHE = @as(u32, 2);
pub const IEIFLAG_ASPECT = @as(u32, 4);
pub const IEIFLAG_OFFLINE = @as(u32, 8);
pub const IEIFLAG_GLEAM = @as(u32, 16);
pub const IEIFLAG_SCREEN = @as(u32, 32);
pub const IEIFLAG_ORIGSIZE = @as(u32, 64);
pub const IEIFLAG_NOSTAMP = @as(u32, 128);
pub const IEIFLAG_NOBORDER = @as(u32, 256);
pub const IEIFLAG_QUALITY = @as(u32, 512);
pub const IEIFLAG_REFRESH = @as(u32, 1024);
pub const DBIM_MINSIZE = @as(u32, 1);
pub const DBIM_MAXSIZE = @as(u32, 2);
pub const DBIM_INTEGRAL = @as(u32, 4);
pub const DBIM_ACTUAL = @as(u32, 8);
pub const DBIM_TITLE = @as(u32, 16);
pub const DBIM_MODEFLAGS = @as(u32, 32);
pub const DBIM_BKCOLOR = @as(u32, 64);
pub const DBIMF_NORMAL = @as(u32, 0);
pub const DBIMF_FIXED = @as(u32, 1);
pub const DBIMF_FIXEDBMP = @as(u32, 4);
pub const DBIMF_VARIABLEHEIGHT = @as(u32, 8);
pub const DBIMF_UNDELETEABLE = @as(u32, 16);
pub const DBIMF_DEBOSSED = @as(u32, 32);
pub const DBIMF_BKCOLOR = @as(u32, 64);
pub const DBIMF_USECHEVRON = @as(u32, 128);
pub const DBIMF_BREAK = @as(u32, 256);
pub const DBIMF_ADDTOFRONT = @as(u32, 512);
pub const DBIMF_TOPALIGN = @as(u32, 1024);
pub const DBIMF_NOGRIPPER = @as(u32, 2048);
pub const DBIMF_ALWAYSGRIPPER = @as(u32, 4096);
pub const DBIMF_NOMARGINS = @as(u32, 8192);
pub const DBIF_VIEWMODE_NORMAL = @as(u32, 0);
pub const DBIF_VIEWMODE_VERTICAL = @as(u32, 1);
pub const DBIF_VIEWMODE_FLOATING = @as(u32, 2);
pub const DBIF_VIEWMODE_TRANSPARENT = @as(u32, 4);
pub const DBPC_SELECTFIRST = @as(u32, 4294967295);
pub const THBN_CLICKED = @as(u32, 6144);
pub const FOFX_NOSKIPJUNCTIONS = @as(u32, 65536);
pub const FOFX_PREFERHARDLINK = @as(u32, 131072);
pub const FOFX_SHOWELEVATIONPROMPT = @as(u32, 262144);
pub const FOFX_RECYCLEONDELETE = @as(u32, 524288);
pub const FOFX_EARLYFAILURE = @as(u32, 1048576);
pub const FOFX_PRESERVEFILEEXTENSIONS = @as(u32, 2097152);
pub const FOFX_KEEPNEWERFILE = @as(u32, 4194304);
pub const FOFX_NOCOPYHOOKS = @as(u32, 8388608);
pub const FOFX_NOMINIMIZEBOX = @as(u32, 16777216);
pub const FOFX_MOVEACLSACROSSVOLUMES = @as(u32, 33554432);
pub const FOFX_DONTDISPLAYSOURCEPATH = @as(u32, 67108864);
pub const FOFX_DONTDISPLAYDESTPATH = @as(u32, 134217728);
pub const FOFX_REQUIREELEVATION = @as(u32, 268435456);
pub const FOFX_ADDUNDORECORD = @as(u32, 536870912);
pub const FOFX_COPYASDOWNLOAD = @as(u32, 1073741824);
pub const FOFX_DONTDISPLAYLOCATIONS = @as(u32, 2147483648);
pub const BSIM_STATE = @as(u32, 1);
pub const BSIM_STYLE = @as(u32, 2);
pub const BSSF_VISIBLE = @as(u32, 1);
pub const BSSF_NOTITLE = @as(u32, 2);
pub const BSSF_UNDELETEABLE = @as(u32, 4096);
pub const BSIS_AUTOGRIPPER = @as(u32, 0);
pub const BSIS_NOGRIPPER = @as(u32, 1);
pub const BSIS_ALWAYSGRIPPER = @as(u32, 2);
pub const BSIS_LEFTALIGN = @as(u32, 4);
pub const BSIS_SINGLECLICK = @as(u32, 8);
pub const BSIS_NOCONTEXTMENU = @as(u32, 16);
pub const BSIS_NODROPTARGET = @as(u32, 32);
pub const BSIS_NOCAPTION = @as(u32, 64);
pub const BSIS_PREFERNOLINEBREAK = @as(u32, 128);
pub const BSIS_LOCKED = @as(u32, 256);
pub const BSIS_PRESERVEORDERDURINGLAYOUT = @as(u32, 512);
pub const BSIS_FIXEDORDER = @as(u32, 1024);
pub const OF_CAP_CANSWITCHTO = @as(u32, 1);
pub const OF_CAP_CANCLOSE = @as(u32, 2);
pub const SMDM_SHELLFOLDER = @as(u32, 1);
pub const SMDM_HMENU = @as(u32, 2);
pub const SMDM_TOOLBAR = @as(u32, 4);
pub const SMC_INITMENU = @as(u32, 1);
pub const SMC_CREATE = @as(u32, 2);
pub const SMC_EXITMENU = @as(u32, 3);
pub const SMC_GETINFO = @as(u32, 5);
pub const SMC_GETSFINFO = @as(u32, 6);
pub const SMC_GETOBJECT = @as(u32, 7);
pub const SMC_GETSFOBJECT = @as(u32, 8);
pub const SMC_SFEXEC = @as(u32, 9);
pub const SMC_SFSELECTITEM = @as(u32, 10);
pub const SMC_REFRESH = @as(u32, 16);
pub const SMC_DEMOTE = @as(u32, 17);
pub const SMC_PROMOTE = @as(u32, 18);
pub const SMC_DEFAULTICON = @as(u32, 22);
pub const SMC_NEWITEM = @as(u32, 23);
pub const SMC_CHEVRONEXPAND = @as(u32, 25);
pub const SMC_DISPLAYCHEVRONTIP = @as(u32, 42);
pub const SMC_SETSFOBJECT = @as(u32, 45);
pub const SMC_SHCHANGENOTIFY = @as(u32, 46);
pub const SMC_CHEVRONGETTIP = @as(u32, 47);
pub const SMC_SFDDRESTRICTED = @as(u32, 48);
pub const SMC_SFEXEC_MIDDLE = @as(u32, 49);
pub const SMC_GETAUTOEXPANDSTATE = @as(u32, 65);
pub const SMC_AUTOEXPANDCHANGE = @as(u32, 66);
pub const SMC_GETCONTEXTMENUMODIFIER = @as(u32, 67);
pub const SMC_GETBKCONTEXTMENU = @as(u32, 68);
pub const SMC_OPEN = @as(u32, 69);
pub const SMAE_EXPANDED = @as(u32, 1);
pub const SMAE_CONTRACTED = @as(u32, 2);
pub const SMAE_USER = @as(u32, 4);
pub const SMAE_VALID = @as(u32, 7);
pub const SMINIT_DEFAULT = @as(u32, 0);
pub const SMINIT_RESTRICT_DRAGDROP = @as(u32, 2);
pub const SMINIT_TOPLEVEL = @as(u32, 4);
pub const SMINIT_CACHED = @as(u32, 16);
pub const SMINIT_AUTOEXPAND = @as(u32, 256);
pub const SMINIT_AUTOTOOLTIP = @as(u32, 512);
pub const SMINIT_DROPONCONTAINER = @as(u32, 1024);
pub const SMINIT_VERTICAL = @as(u32, 268435456);
pub const SMINIT_HORIZONTAL = @as(u32, 536870912);
pub const SMSET_TOP = @as(u32, 268435456);
pub const SMSET_BOTTOM = @as(u32, 536870912);
pub const SMSET_DONTOWN = @as(u32, 1);
pub const SMINV_REFRESH = @as(u32, 1);
pub const SMINV_ID = @as(u32, 8);
pub const E_PREVIEWHANDLER_DRM_FAIL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2042494975));
pub const E_PREVIEWHANDLER_NOAUTH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2042494974));
pub const E_PREVIEWHANDLER_NOTFOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2042494973));
pub const E_PREVIEWHANDLER_CORRUPT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2042494972));
pub const STR_FILE_SYS_BIND_DATA = "File System Bind Data";
pub const STR_FILE_SYS_BIND_DATA_WIN7_FORMAT = "Win7FileSystemIdList";
pub const HOMEGROUP_SECURITY_GROUP_MULTI = "HUG";
pub const HOMEGROUP_SECURITY_GROUP = "HomeUsers";
pub const PROP_CONTRACT_DELEGATE = "ContractDelegate";
pub const SID_URLExecutionContext = Guid.initString("fb5f8ebc-bbb6-4d10-a461-777291a09030");
pub const STR_TAB_REUSE_IDENTIFIER = "Tab Reuse Identifier";
pub const STR_REFERRER_IDENTIFIER = "Referrer Identifier";
pub const SID_LaunchSourceViewSizePreference = Guid.initString("80605492-67d9-414f-af89-a1cdf1242bc1");
pub const SID_LaunchTargetViewSizePreference = Guid.initString("26db2472-b7b7-406b-9702-730a4e20d3bf");
pub const SID_LaunchSourceAppUserModelId = Guid.initString("2ce78010-74db-48bc-9c6a-10f372495723");
pub const SID_ShellExecuteNamedPropertyStore = Guid.initString("eb84ada2-00ff-4992-8324-ed5ce061cb29");
pub const ISIOI_ICONFILE = @as(u32, 1);
pub const ISIOI_ICONINDEX = @as(u32, 2);
pub const ABM_NEW = @as(u32, 0);
pub const ABM_REMOVE = @as(u32, 1);
pub const ABM_QUERYPOS = @as(u32, 2);
pub const ABM_SETPOS = @as(u32, 3);
pub const ABM_GETSTATE = @as(u32, 4);
pub const ABM_GETTASKBARPOS = @as(u32, 5);
pub const ABM_ACTIVATE = @as(u32, 6);
pub const ABM_GETAUTOHIDEBAR = @as(u32, 7);
pub const ABM_SETAUTOHIDEBAR = @as(u32, 8);
pub const ABM_WINDOWPOSCHANGED = @as(u32, 9);
pub const ABM_SETSTATE = @as(u32, 10);
pub const ABM_GETAUTOHIDEBAREX = @as(u32, 11);
pub const ABM_SETAUTOHIDEBAREX = @as(u32, 12);
pub const ABN_STATECHANGE = @as(u32, 0);
pub const ABN_POSCHANGED = @as(u32, 1);
pub const ABN_FULLSCREENAPP = @as(u32, 2);
pub const ABN_WINDOWARRANGE = @as(u32, 3);
pub const ABS_AUTOHIDE = @as(u32, 1);
pub const ABS_ALWAYSONTOP = @as(u32, 2);
pub const ABE_LEFT = @as(u32, 0);
pub const ABE_TOP = @as(u32, 1);
pub const ABE_RIGHT = @as(u32, 2);
pub const ABE_BOTTOM = @as(u32, 3);
pub const FO_MOVE = @as(u32, 1);
pub const FO_COPY = @as(u32, 2);
pub const FO_DELETE = @as(u32, 3);
pub const FO_RENAME = @as(u32, 4);
pub const FOF_MULTIDESTFILES = @as(u32, 1);
pub const FOF_CONFIRMMOUSE = @as(u32, 2);
pub const FOF_SILENT = @as(u32, 4);
pub const FOF_RENAMEONCOLLISION = @as(u32, 8);
pub const FOF_NOCONFIRMATION = @as(u32, 16);
pub const FOF_WANTMAPPINGHANDLE = @as(u32, 32);
pub const FOF_ALLOWUNDO = @as(u32, 64);
pub const FOF_FILESONLY = @as(u32, 128);
pub const FOF_SIMPLEPROGRESS = @as(u32, 256);
pub const FOF_NOCONFIRMMKDIR = @as(u32, 512);
pub const FOF_NOERRORUI = @as(u32, 1024);
pub const FOF_NOCOPYSECURITYATTRIBS = @as(u32, 2048);
pub const FOF_NORECURSION = @as(u32, 4096);
pub const FOF_NO_CONNECTED_ELEMENTS = @as(u32, 8192);
pub const FOF_WANTNUKEWARNING = @as(u32, 16384);
pub const FOF_NORECURSEREPARSE = @as(u32, 32768);
pub const PO_DELETE = @as(u32, 19);
pub const PO_RENAME = @as(u32, 20);
pub const PO_PORTCHANGE = @as(u32, 32);
pub const PO_REN_PORT = @as(u32, 52);
pub const SE_ERR_FNF = @as(u32, 2);
pub const SE_ERR_PNF = @as(u32, 3);
pub const SE_ERR_ACCESSDENIED = @as(u32, 5);
pub const SE_ERR_OOM = @as(u32, 8);
pub const SE_ERR_DLLNOTFOUND = @as(u32, 32);
pub const SE_ERR_SHARE = @as(u32, 26);
pub const SE_ERR_ASSOCINCOMPLETE = @as(u32, 27);
pub const SE_ERR_DDETIMEOUT = @as(u32, 28);
pub const SE_ERR_DDEFAIL = @as(u32, 29);
pub const SE_ERR_DDEBUSY = @as(u32, 30);
pub const SE_ERR_NOASSOC = @as(u32, 31);
pub const SEE_MASK_DEFAULT = @as(u32, 0);
pub const SEE_MASK_CLASSNAME = @as(u32, 1);
pub const SEE_MASK_CLASSKEY = @as(u32, 3);
pub const SEE_MASK_IDLIST = @as(u32, 4);
pub const SEE_MASK_INVOKEIDLIST = @as(u32, 12);
pub const SEE_MASK_ICON = @as(u32, 16);
pub const SEE_MASK_HOTKEY = @as(u32, 32);
pub const SEE_MASK_NOCLOSEPROCESS = @as(u32, 64);
pub const SEE_MASK_CONNECTNETDRV = @as(u32, 128);
pub const SEE_MASK_NOASYNC = @as(u32, 256);
pub const SEE_MASK_FLAG_DDEWAIT = @as(u32, 256);
pub const SEE_MASK_DOENVSUBST = @as(u32, 512);
pub const SEE_MASK_FLAG_NO_UI = @as(u32, 1024);
pub const SEE_MASK_UNICODE = @as(u32, 16384);
pub const SEE_MASK_NO_CONSOLE = @as(u32, 32768);
pub const SEE_MASK_ASYNCOK = @as(u32, 1048576);
pub const SEE_MASK_HMONITOR = @as(u32, 2097152);
pub const SEE_MASK_NOZONECHECKS = @as(u32, 8388608);
pub const SEE_MASK_NOQUERYCLASSSTORE = @as(u32, 16777216);
pub const SEE_MASK_WAITFORINPUTIDLE = @as(u32, 33554432);
pub const SEE_MASK_FLAG_LOG_USAGE = @as(u32, 67108864);
pub const SEE_MASK_FLAG_HINST_IS_SITE = @as(u32, 134217728);
pub const SHERB_NOCONFIRMATION = @as(u32, 1);
pub const SHERB_NOPROGRESSUI = @as(u32, 2);
pub const SHERB_NOSOUND = @as(u32, 4);
pub const NIN_SELECT = @as(u32, 1024);
pub const NINF_KEY = @as(u32, 1);
pub const NIN_BALLOONSHOW = @as(u32, 1026);
pub const NIN_BALLOONHIDE = @as(u32, 1027);
pub const NIN_BALLOONTIMEOUT = @as(u32, 1028);
pub const NIN_BALLOONUSERCLICK = @as(u32, 1029);
pub const NIN_POPUPOPEN = @as(u32, 1030);
pub const NIN_POPUPCLOSE = @as(u32, 1031);
pub const NOTIFYICON_VERSION = @as(u32, 3);
pub const NOTIFYICON_VERSION_4 = @as(u32, 4);
pub const NIS_HIDDEN = @as(u32, 1);
pub const NIS_SHAREDICON = @as(u32, 2);
pub const NIIF_NONE = @as(u32, 0);
pub const NIIF_INFO = @as(u32, 1);
pub const NIIF_WARNING = @as(u32, 2);
pub const NIIF_ERROR = @as(u32, 3);
pub const NIIF_USER = @as(u32, 4);
pub const NIIF_ICON_MASK = @as(u32, 15);
pub const NIIF_NOSOUND = @as(u32, 16);
pub const NIIF_LARGE_ICON = @as(u32, 32);
pub const NIIF_RESPECT_QUIET_TIME = @as(u32, 128);
pub const SHGSI_ICONLOCATION = @as(u32, 0);
pub const SHGNLI_PIDL = @as(u64, 1);
pub const SHGNLI_PREFIXNAME = @as(u64, 2);
pub const SHGNLI_NOUNIQUE = @as(u64, 4);
pub const SHGNLI_NOLNK = @as(u64, 8);
pub const SHGNLI_NOLOCNAME = @as(u64, 16);
pub const SHGNLI_USEURLEXT = @as(u64, 32);
pub const PRINTACTION_OPEN = @as(u32, 0);
pub const PRINTACTION_PROPERTIES = @as(u32, 1);
pub const PRINTACTION_NETINSTALL = @as(u32, 2);
pub const PRINTACTION_NETINSTALLLINK = @as(u32, 3);
pub const PRINTACTION_TESTPAGE = @as(u32, 4);
pub const PRINTACTION_OPENNETPRN = @as(u32, 5);
pub const PRINTACTION_DOCUMENTDEFAULTS = @as(u32, 6);
pub const PRINTACTION_SERVERPROPERTIES = @as(u32, 7);
pub const PRINT_PROP_FORCE_NAME = @as(u32, 1);
pub const OFFLINE_STATUS_LOCAL = @as(u32, 1);
pub const OFFLINE_STATUS_REMOTE = @as(u32, 2);
pub const OFFLINE_STATUS_INCOMPLETE = @as(u32, 4);
pub const SHIL_LARGE = @as(u32, 0);
pub const SHIL_SMALL = @as(u32, 1);
pub const SHIL_EXTRALARGE = @as(u32, 2);
pub const SHIL_SYSSMALL = @as(u32, 3);
pub const SHIL_JUMBO = @as(u32, 4);
pub const SHIL_LAST = @as(u32, 4);
pub const WC_NETADDRESS = "msctls_netaddress";
pub const NCM_GETADDRESS = @as(u32, 1025);
pub const NCM_SETALLOWTYPE = @as(u32, 1026);
pub const NCM_GETALLOWTYPE = @as(u32, 1027);
pub const NCM_DISPLAYERRORTIP = @as(u32, 1028);
pub const CREDENTIAL_PROVIDER_NO_DEFAULT = @as(u32, 4294967295);
pub const Identity_LocalUserProvider = Guid.initString("a198529b-730f-4089-b646-a12557f5665e");
pub const MAX_SYNCMGR_ID = @as(u32, 64);
pub const MAX_SYNCMGR_PROGRESSTEXT = @as(u32, 260);
pub const MAX_SYNCMGR_NAME = @as(u32, 128);
pub const STIF_DEFAULT = @as(i32, 0);
pub const STIF_SUPPORT_HEX = @as(i32, 1);
pub const SZ_CONTENTTYPE_HTMLA = "text/html";
pub const SZ_CONTENTTYPE_HTMLW = "text/html";
pub const SZ_CONTENTTYPE_CDFA = "application/x-cdf";
pub const SZ_CONTENTTYPE_CDFW = "application/x-cdf";
pub const SZ_CONTENTTYPE_HTML = "text/html";
pub const SZ_CONTENTTYPE_CDF = "application/x-cdf";
pub const GCT_INVALID = @as(u32, 0);
pub const GCT_LFNCHAR = @as(u32, 1);
pub const GCT_SHORTCHAR = @as(u32, 2);
pub const GCT_WILD = @as(u32, 4);
pub const GCT_SEPARATOR = @as(u32, 8);
pub const PMSF_NORMAL = @as(u32, 0);
pub const PMSF_MULTIPLE = @as(u32, 1);
pub const PMSF_DONT_STRIP_SPACES = @as(u32, 65536);
pub const URL_UNESCAPE = @as(u32, 268435456);
pub const URL_ESCAPE_UNSAFE = @as(u32, 536870912);
pub const URL_PLUGGABLE_PROTOCOL = @as(u32, 1073741824);
pub const URL_WININET_COMPATIBILITY = @as(u32, 2147483648);
pub const URL_DONT_ESCAPE_EXTRA_INFO = @as(u32, 33554432);
pub const URL_DONT_UNESCAPE_EXTRA_INFO = @as(u32, 33554432);
pub const URL_BROWSER_MODE = @as(u32, 33554432);
pub const URL_ESCAPE_SPACES_ONLY = @as(u32, 67108864);
pub const URL_DONT_SIMPLIFY = @as(u32, 134217728);
pub const URL_NO_META = @as(u32, 134217728);
pub const URL_UNESCAPE_INPLACE = @as(u32, 1048576);
pub const URL_CONVERT_IF_DOSPATH = @as(u32, 2097152);
pub const URL_UNESCAPE_HIGH_ANSI_ONLY = @as(u32, 4194304);
pub const URL_INTERNAL_PATH = @as(u32, 8388608);
pub const URL_FILE_USE_PATHURL = @as(u32, 65536);
pub const URL_DONT_UNESCAPE = @as(u32, 131072);
pub const URL_ESCAPE_AS_UTF8 = @as(u32, 262144);
pub const URL_UNESCAPE_AS_UTF8 = @as(u32, 262144);
pub const URL_ESCAPE_ASCII_URI_COMPONENT = @as(u32, 524288);
pub const URL_UNESCAPE_URI_COMPONENT = @as(u32, 262144);
pub const URL_ESCAPE_PERCENT = @as(u32, 4096);
pub const URL_ESCAPE_SEGMENT_ONLY = @as(u32, 8192);
pub const URL_PARTFLAG_KEEPSCHEME = @as(u32, 1);
pub const URL_APPLY_DEFAULT = @as(u32, 1);
pub const URL_APPLY_GUESSSCHEME = @as(u32, 2);
pub const URL_APPLY_GUESSFILE = @as(u32, 4);
pub const URL_APPLY_FORCEAPPLY = @as(u32, 8);
pub const SRRF_RT_REG_NONE = @as(u32, 1);
pub const SRRF_RT_REG_SZ = @as(u32, 2);
pub const SRRF_RT_REG_EXPAND_SZ = @as(u32, 4);
pub const SRRF_RT_REG_BINARY = @as(u32, 8);
pub const SRRF_RT_REG_DWORD = @as(u32, 16);
pub const SRRF_RT_REG_MULTI_SZ = @as(u32, 32);
pub const SRRF_RT_REG_QWORD = @as(u32, 64);
pub const SRRF_RT_ANY = @as(u32, 65535);
pub const SRRF_RM_ANY = @as(u32, 0);
pub const SRRF_RM_NORMAL = @as(u32, 65536);
pub const SRRF_RM_SAFE = @as(u32, 131072);
pub const SRRF_RM_SAFENETWORK = @as(u32, 262144);
pub const SRRF_NOEXPAND = @as(u32, 268435456);
pub const SRRF_ZEROONFAILURE = @as(u32, 536870912);
pub const SRRF_NOVIRT = @as(u32, 1073741824);
pub const SHREGSET_HKCU = @as(u32, 1);
pub const SHREGSET_FORCE_HKCU = @as(u32, 2);
pub const SHREGSET_HKLM = @as(u32, 4);
pub const SHREGSET_FORCE_HKLM = @as(u32, 8);
pub const SPMODE_SHELL = @as(u32, 1);
pub const SPMODE_DEBUGOUT = @as(u32, 2);
pub const SPMODE_TEST = @as(u32, 4);
pub const SPMODE_BROWSER = @as(u32, 8);
pub const SPMODE_FLUSH = @as(u32, 16);
pub const SPMODE_EVENT = @as(u32, 32);
pub const SPMODE_MSVM = @as(u32, 64);
pub const SPMODE_FORMATTEXT = @as(u32, 128);
pub const SPMODE_PROFILE = @as(u32, 256);
pub const SPMODE_DEBUGBREAK = @as(u32, 512);
pub const SPMODE_MSGTRACE = @as(u32, 1024);
pub const SPMODE_PERFTAGS = @as(u32, 2048);
pub const SPMODE_MEMWATCH = @as(u32, 4096);
pub const SPMODE_DBMON = @as(u32, 8192);
pub const SPMODE_MULTISTOP = @as(u32, 16384);
pub const SPMODE_EVENTTRACE = @as(u32, 32768);
pub const SHGVSPB_PERUSER = @as(u32, 1);
pub const SHGVSPB_ALLUSERS = @as(u32, 2);
pub const SHGVSPB_PERFOLDER = @as(u32, 4);
pub const SHGVSPB_ALLFOLDERS = @as(u32, 8);
pub const SHGVSPB_INHERIT = @as(u32, 16);
pub const SHGVSPB_ROAM = @as(u32, 32);
pub const SHGVSPB_NOAUTODEFAULTS = @as(u32, 2147483648);
pub const FDTF_SHORTTIME = @as(u32, 1);
pub const FDTF_SHORTDATE = @as(u32, 2);
pub const FDTF_LONGDATE = @as(u32, 4);
pub const FDTF_LONGTIME = @as(u32, 8);
pub const FDTF_RELATIVE = @as(u32, 16);
pub const FDTF_LTRDATE = @as(u32, 256);
pub const FDTF_RTLDATE = @as(u32, 512);
pub const FDTF_NOAUTOREADINGORDER = @as(u32, 1024);
pub const PLATFORM_UNKNOWN = @as(u32, 0);
pub const PLATFORM_IE3 = @as(u32, 1);
pub const PLATFORM_BROWSERONLY = @as(u32, 1);
pub const PLATFORM_INTEGRATED = @as(u32, 2);
pub const ILMM_IE4 = @as(u32, 0);
pub const SHACF_DEFAULT = @as(u32, 0);
pub const SHACF_FILESYSTEM = @as(u32, 1);
pub const SHACF_URLHISTORY = @as(u32, 2);
pub const SHACF_URLMRU = @as(u32, 4);
pub const SHACF_USETAB = @as(u32, 8);
pub const SHACF_FILESYS_ONLY = @as(u32, 16);
pub const SHACF_FILESYS_DIRS = @as(u32, 32);
pub const SHACF_VIRTUAL_NAMESPACE = @as(u32, 64);
pub const SHACF_AUTOSUGGEST_FORCE_ON = @as(u32, 268435456);
pub const SHACF_AUTOSUGGEST_FORCE_OFF = @as(u32, 536870912);
pub const SHACF_AUTOAPPEND_FORCE_ON = @as(u32, 1073741824);
pub const SHACF_AUTOAPPEND_FORCE_OFF = @as(u32, 2147483648);
pub const DLLVER_PLATFORM_WINDOWS = @as(u32, 1);
pub const DLLVER_PLATFORM_NT = @as(u32, 2);
pub const DLLVER_MAJOR_MASK = @as(u64, 18446462598732840960);
pub const DLLVER_MINOR_MASK = @as(u64, 281470681743360);
pub const DLLVER_BUILD_MASK = @as(u64, 4294901760);
pub const DLLVER_QFE_MASK = @as(u64, 65535);
pub const WTS_E_FAILEDEXTRACTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147175936));
pub const WTS_E_EXTRACTIONTIMEDOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147175935));
pub const WTS_E_SURROGATEUNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147175934));
pub const WTS_E_FASTEXTRACTIONNOTSUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147175933));
pub const WTS_E_DATAFILEUNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147175932));
pub const WTS_E_EXTRACTIONPENDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147175931));
pub const WTS_E_EXTRACTIONBLOCKED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147175930));
pub const WTS_E_NOSTORAGEPROVIDERTHUMBNAILHANDLER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147175929));
pub const SHIMGKEY_QUALITY = "Compression";
pub const SHIMGKEY_RAWFORMAT = "RawDataFormat";
pub const SHIMGDEC_DEFAULT = @as(u32, 0);
pub const SHIMGDEC_THUMBNAIL = @as(u32, 1);
pub const SHIMGDEC_LOADFULL = @as(u32, 2);
pub const E_NOTVALIDFORANIMATEDIMAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147221503));
pub const S_SYNCMGR_MISSINGITEMS = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262657));
pub const S_SYNCMGR_RETRYSYNC = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262658));
pub const S_SYNCMGR_CANCELITEM = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262659));
pub const S_SYNCMGR_CANCELALL = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262660));
pub const S_SYNCMGR_ITEMDELETED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262672));
pub const S_SYNCMGR_ENUMITEMS = @import("../zig.zig").typedConst(HRESULT, @as(i32, 262673));
pub const SYNCMGRPROGRESSITEM_STATUSTEXT = @as(u32, 1);
pub const SYNCMGRPROGRESSITEM_STATUSTYPE = @as(u32, 2);
pub const SYNCMGRPROGRESSITEM_PROGVALUE = @as(u32, 4);
pub const SYNCMGRPROGRESSITEM_MAXVALUE = @as(u32, 8);
pub const SYNCMGRLOGERROR_ERRORFLAGS = @as(u32, 1);
pub const SYNCMGRLOGERROR_ERRORID = @as(u32, 2);
pub const SYNCMGRLOGERROR_ITEMID = @as(u32, 4);
pub const SYNCMGRITEM_ITEMFLAGMASK = @as(u32, 127);
pub const MAX_SYNCMGRITEMNAME = @as(u32, 128);
pub const SYNCMGRHANDLERFLAG_MASK = @as(u32, 15);
pub const MAX_SYNCMGRHANDLERNAME = @as(u32, 32);
pub const SYNCMGRREGISTERFLAGS_MASK = @as(u32, 7);
pub const TLOG_BACK = @as(i32, -1);
pub const TLOG_CURRENT = @as(u32, 0);
pub const TLOG_FORE = @as(u32, 1);
pub const TLMENUF_INCLUDECURRENT = @as(u32, 1);
pub const TLMENUF_BACK = @as(u32, 16);
pub const TLMENUF_FORE = @as(u32, 32);
pub const BSF_REGISTERASDROPTARGET = @as(u32, 1);
pub const BSF_THEATERMODE = @as(u32, 2);
pub const BSF_NOLOCALFILEWARNING = @as(u32, 16);
pub const BSF_UISETBYAUTOMATION = @as(u32, 256);
pub const BSF_RESIZABLE = @as(u32, 512);
pub const BSF_CANMAXIMIZE = @as(u32, 1024);
pub const BSF_TOPBROWSER = @as(u32, 2048);
pub const BSF_NAVNOHISTORY = @as(u32, 4096);
pub const BSF_HTMLNAVCANCELED = @as(u32, 8192);
pub const BSF_DONTSHOWNAVCANCELPAGE = @as(u32, 16384);
pub const BSF_SETNAVIGATABLECODEPAGE = @as(u32, 32768);
pub const BSF_DELEGATEDNAVIGATION = @as(u32, 65536);
pub const BSF_TRUSTEDFORACTIVEX = @as(u32, 131072);
pub const BSF_MERGEDMENUS = @as(u32, 262144);
pub const BSF_FEEDNAVIGATION = @as(u32, 524288);
pub const BSF_FEEDSUBSCRIBED = @as(u32, 1048576);
pub const HLNF_CALLERUNTRUSTED = @as(u32, 2097152);
pub const HLNF_TRUSTEDFORACTIVEX = @as(u32, 4194304);
pub const HLNF_DISABLEWINDOWRESTRICTIONS = @as(u32, 8388608);
pub const HLNF_TRUSTFIRSTDOWNLOAD = @as(u32, 16777216);
pub const HLNF_UNTRUSTEDFORDOWNLOAD = @as(u32, 33554432);
pub const SHHLNF_NOAUTOSELECT = @as(u32, 67108864);
pub const SHHLNF_WRITENOHISTORY = @as(u32, 134217728);
pub const HLNF_EXTERNALNAVIGATE = @as(u32, 268435456);
pub const HLNF_ALLOW_AUTONAVIGATE = @as(u32, 536870912);
pub const HLNF_NEWWINDOWSMANAGED = @as(u32, 2147483648);
pub const INTERNET_MAX_PATH_LENGTH = @as(u32, 2048);
pub const INTERNET_MAX_SCHEME_LENGTH = @as(u32, 32);
pub const VIEW_PRIORITY_RESTRICTED = @as(u32, 112);
pub const VIEW_PRIORITY_CACHEHIT = @as(u32, 80);
pub const VIEW_PRIORITY_STALECACHEHIT = @as(u32, 69);
pub const VIEW_PRIORITY_USEASDEFAULT = @as(u32, 67);
pub const VIEW_PRIORITY_SHELLEXT = @as(u32, 64);
pub const VIEW_PRIORITY_CACHEMISS = @as(u32, 48);
pub const VIEW_PRIORITY_INHERIT = @as(u32, 32);
pub const VIEW_PRIORITY_SHELLEXT_ASBACKUP = @as(u32, 21);
pub const VIEW_PRIORITY_DESPERATE = @as(u32, 16);
pub const VIEW_PRIORITY_NONE = @as(u32, 0);
pub const VOLUME_PREFIX = "\\\\?\\Volume";
pub const PATHCCH_MAX_CCH = @as(u32, 32768);
pub const IDS_DESCRIPTION = @as(u32, 1);
pub const ID_APP = @as(u32, 100);
pub const DLG_SCRNSAVECONFIGURE = @as(u32, 2003);
pub const idsIsPassword = @as(u32, 1000);
pub const idsIniFile = @as(u32, 1001);
pub const idsScreenSaver = @as(u32, 1002);
pub const idsPassword = @as(u32, 1003);
pub const idsDifferentPW = @as(u32, 1004);
pub const idsChangePW = @as(u32, 1005);
pub const idsBadOldPW = @as(u32, 1006);
pub const idsAppName = @as(u32, 1007);
pub const idsNoHelpMemory = @as(u32, 1008);
pub const idsHelpFile = @as(u32, 1009);
pub const idsDefKeyword = @as(u32, 1010);
pub const MAXFILELEN = @as(u32, 13);
pub const TITLEBARNAMELEN = @as(u32, 40);
pub const APPNAMEBUFFERLEN = @as(u32, 40);
pub const BUFFLEN = @as(u32, 255);
pub const SCRM_VERIFYPW = @as(u32, 32768);
pub const E_FLAGS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147217408));
pub const IS_E_EXEC_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147213310));
pub const URL_E_INVALID_SYNTAX = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147217407));
pub const URL_E_UNREGISTERED_PROTOCOL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2147217406));
pub const CPLPAGE_MOUSE_BUTTONS = @as(u32, 1);
pub const CPLPAGE_MOUSE_PTRMOTION = @as(u32, 2);
pub const CPLPAGE_MOUSE_WHEEL = @as(u32, 3);
pub const CPLPAGE_KEYBOARD_SPEED = @as(u32, 1);
pub const CPLPAGE_DISPLAY_BACKGROUND = @as(u32, 1);
pub const DISPID_SELECTIONCHANGED = @as(u32, 200);
pub const DISPID_FILELISTENUMDONE = @as(u32, 201);
pub const DISPID_VERBINVOKED = @as(u32, 202);
pub const DISPID_DEFAULTVERBINVOKED = @as(u32, 203);
pub const DISPID_BEGINDRAG = @as(u32, 204);
pub const DISPID_VIEWMODECHANGED = @as(u32, 205);
pub const DISPID_NOITEMSTATE_CHANGED = @as(u32, 206);
pub const DISPID_CONTENTSCHANGED = @as(u32, 207);
pub const DISPID_FOCUSCHANGED = @as(u32, 208);
pub const DISPID_CHECKSTATECHANGED = @as(u32, 209);
pub const DISPID_ORDERCHANGED = @as(u32, 210);
pub const DISPID_VIEWPAINTDONE = @as(u32, 211);
pub const DISPID_COLUMNSCHANGED = @as(u32, 212);
pub const DISPID_CTRLMOUSEWHEEL = @as(u32, 213);
pub const DISPID_SORTDONE = @as(u32, 214);
pub const DISPID_ICONSIZECHANGED = @as(u32, 215);
pub const DISPID_FOLDERCHANGED = @as(u32, 217);
pub const DISPID_FILTERINVOKED = @as(u32, 218);
pub const DISPID_WORDWHEELEDITED = @as(u32, 219);
pub const DISPID_SELECTEDITEMCHANGED = @as(u32, 220);
pub const DISPID_EXPLORERWINDOWREADY = @as(u32, 221);
pub const DISPID_UPDATEIMAGE = @as(u32, 222);
pub const DISPID_INITIALENUMERATIONDONE = @as(u32, 223);
pub const DISPID_ENTERPRISEIDCHANGED = @as(u32, 224);
pub const DISPID_ENTERPRESSED = @as(u32, 200);
pub const DISPID_SEARCHCOMMAND_START = @as(u32, 1);
pub const DISPID_SEARCHCOMMAND_COMPLETE = @as(u32, 2);
pub const DISPID_SEARCHCOMMAND_ABORT = @as(u32, 3);
pub const DISPID_SEARCHCOMMAND_UPDATE = @as(u32, 4);
pub const DISPID_SEARCHCOMMAND_PROGRESSTEXT = @as(u32, 5);
pub const DISPID_SEARCHCOMMAND_ERROR = @as(u32, 6);
pub const DISPID_SEARCHCOMMAND_RESTORE = @as(u32, 7);
pub const DISPID_IADCCTL_DIRTY = @as(u32, 256);
pub const DISPID_IADCCTL_PUBCAT = @as(u32, 257);
pub const DISPID_IADCCTL_SORT = @as(u32, 258);
pub const DISPID_IADCCTL_FORCEX86 = @as(u32, 259);
pub const DISPID_IADCCTL_SHOWPOSTSETUP = @as(u32, 260);
pub const DISPID_IADCCTL_ONDOMAIN = @as(u32, 261);
pub const DISPID_IADCCTL_DEFAULTCAT = @as(u32, 262);
pub const COPYENGINE_S_YES = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555905));
pub const COPYENGINE_S_NOT_HANDLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555907));
pub const COPYENGINE_S_USER_RETRY = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555908));
pub const COPYENGINE_S_USER_IGNORED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555909));
pub const COPYENGINE_S_MERGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555910));
pub const COPYENGINE_S_DONT_PROCESS_CHILDREN = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555912));
pub const COPYENGINE_S_ALREADY_DONE = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555914));
pub const COPYENGINE_S_PENDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555915));
pub const COPYENGINE_S_KEEP_BOTH = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555916));
pub const COPYENGINE_S_CLOSE_PROGRAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555917));
pub const COPYENGINE_S_COLLISIONRESOLVED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555918));
pub const COPYENGINE_S_PROGRESS_PAUSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, 2555919));
pub const COPYENGINE_E_USER_CANCELLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927744));
pub const COPYENGINE_E_CANCELLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927743));
pub const COPYENGINE_E_REQUIRES_ELEVATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927742));
pub const COPYENGINE_E_SAME_FILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927741));
pub const COPYENGINE_E_DIFF_DIR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927740));
pub const COPYENGINE_E_MANY_SRC_1_DEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927739));
pub const COPYENGINE_E_DEST_SUBTREE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927735));
pub const COPYENGINE_E_DEST_SAME_TREE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927734));
pub const COPYENGINE_E_FLD_IS_FILE_DEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927733));
pub const COPYENGINE_E_FILE_IS_FLD_DEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927732));
pub const COPYENGINE_E_FILE_TOO_LARGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927731));
pub const COPYENGINE_E_REMOVABLE_FULL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927730));
pub const COPYENGINE_E_DEST_IS_RO_CD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927729));
pub const COPYENGINE_E_DEST_IS_RW_CD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927728));
pub const COPYENGINE_E_DEST_IS_R_CD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927727));
pub const COPYENGINE_E_DEST_IS_RO_DVD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927726));
pub const COPYENGINE_E_DEST_IS_RW_DVD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927725));
pub const COPYENGINE_E_DEST_IS_R_DVD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927724));
pub const COPYENGINE_E_SRC_IS_RO_CD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927723));
pub const COPYENGINE_E_SRC_IS_RW_CD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927722));
pub const COPYENGINE_E_SRC_IS_R_CD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927721));
pub const COPYENGINE_E_SRC_IS_RO_DVD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927720));
pub const COPYENGINE_E_SRC_IS_RW_DVD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927719));
pub const COPYENGINE_E_SRC_IS_R_DVD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927718));
pub const COPYENGINE_E_INVALID_FILES_SRC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927717));
pub const COPYENGINE_E_INVALID_FILES_DEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927716));
pub const COPYENGINE_E_PATH_TOO_DEEP_SRC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927715));
pub const COPYENGINE_E_PATH_TOO_DEEP_DEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927714));
pub const COPYENGINE_E_ROOT_DIR_SRC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927713));
pub const COPYENGINE_E_ROOT_DIR_DEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927712));
pub const COPYENGINE_E_ACCESS_DENIED_SRC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927711));
pub const COPYENGINE_E_ACCESS_DENIED_DEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927710));
pub const COPYENGINE_E_PATH_NOT_FOUND_SRC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927709));
pub const COPYENGINE_E_PATH_NOT_FOUND_DEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927708));
pub const COPYENGINE_E_NET_DISCONNECT_SRC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927707));
pub const COPYENGINE_E_NET_DISCONNECT_DEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927706));
pub const COPYENGINE_E_SHARING_VIOLATION_SRC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927705));
pub const COPYENGINE_E_SHARING_VIOLATION_DEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927704));
pub const COPYENGINE_E_ALREADY_EXISTS_NORMAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927703));
pub const COPYENGINE_E_ALREADY_EXISTS_READONLY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927702));
pub const COPYENGINE_E_ALREADY_EXISTS_SYSTEM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927701));
pub const COPYENGINE_E_ALREADY_EXISTS_FOLDER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927700));
pub const COPYENGINE_E_STREAM_LOSS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927699));
pub const COPYENGINE_E_EA_LOSS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927698));
pub const COPYENGINE_E_PROPERTY_LOSS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927697));
pub const COPYENGINE_E_PROPERTIES_LOSS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927696));
pub const COPYENGINE_E_ENCRYPTION_LOSS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927695));
pub const COPYENGINE_E_DISK_FULL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927694));
pub const COPYENGINE_E_DISK_FULL_CLEAN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927693));
pub const COPYENGINE_E_EA_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927692));
pub const COPYENGINE_E_CANT_REACH_SOURCE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927691));
pub const COPYENGINE_E_RECYCLE_UNKNOWN_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927691));
pub const COPYENGINE_E_RECYCLE_FORCE_NUKE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927690));
pub const COPYENGINE_E_RECYCLE_SIZE_TOO_BIG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927689));
pub const COPYENGINE_E_RECYCLE_PATH_TOO_LONG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927688));
pub const COPYENGINE_E_RECYCLE_BIN_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927686));
pub const COPYENGINE_E_NEWFILE_NAME_TOO_LONG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927685));
pub const COPYENGINE_E_NEWFOLDER_NAME_TOO_LONG = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927684));
pub const COPYENGINE_E_DIR_NOT_EMPTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927683));
pub const COPYENGINE_E_FAT_MAX_IN_ROOT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927682));
pub const COPYENGINE_E_ACCESSDENIED_READONLY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927681));
pub const COPYENGINE_E_REDIRECTED_TO_WEBPAGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927680));
pub const COPYENGINE_E_SERVER_BAD_FILE_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927679));
pub const COPYENGINE_E_INTERNET_ITEM_UNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927678));
pub const COPYENGINE_E_CANNOT_MOVE_FROM_RECYCLE_BIN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927677));
pub const COPYENGINE_E_CANNOT_MOVE_SHARED_FOLDER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927676));
pub const COPYENGINE_E_INTERNET_ITEM_STORAGE_PROVIDER_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927675));
pub const COPYENGINE_E_INTERNET_ITEM_STORAGE_PROVIDER_PAUSED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927674));
pub const COPYENGINE_E_REQUIRES_EDP_CONSENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927673));
pub const COPYENGINE_E_BLOCKED_BY_EDP_POLICY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927672));
pub const COPYENGINE_E_REQUIRES_EDP_CONSENT_FOR_REMOVABLE_DRIVE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927671));
pub const COPYENGINE_E_BLOCKED_BY_EDP_FOR_REMOVABLE_DRIVE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927670));
pub const COPYENGINE_E_RMS_REQUIRES_EDP_CONSENT_FOR_REMOVABLE_DRIVE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927669));
pub const COPYENGINE_E_RMS_BLOCKED_BY_EDP_FOR_REMOVABLE_DRIVE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927668));
pub const COPYENGINE_E_WARNED_BY_DLP_POLICY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927667));
pub const COPYENGINE_E_BLOCKED_BY_DLP_POLICY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927666));
pub const COPYENGINE_E_SILENT_FAIL_BY_DLP_POLICY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927665));
pub const NETCACHE_E_NEGATIVE_CACHE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927488));
pub const EXECUTE_E_LAUNCH_APPLICATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927487));
pub const SHELL_E_WRONG_BITDEPTH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927486));
pub const LINK_E_DELETE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927485));
pub const STORE_E_NEWER_VERSION_AVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927484));
pub const E_FILE_PLACEHOLDER_NOT_INITIALIZED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927472));
pub const E_FILE_PLACEHOLDER_VERSION_MISMATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927471));
pub const E_FILE_PLACEHOLDER_SERVER_TIMED_OUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927470));
pub const E_FILE_PLACEHOLDER_STORAGEPROVIDER_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927469));
pub const CAMERAROLL_E_NO_DOWNSAMPLING_REQUIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927456));
pub const E_ACTIVATIONDENIED_USERCLOSE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927440));
pub const E_ACTIVATIONDENIED_SHELLERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927439));
pub const E_ACTIVATIONDENIED_SHELLRESTART = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927438));
pub const E_ACTIVATIONDENIED_UNEXPECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927437));
pub const E_ACTIVATIONDENIED_SHELLNOTREADY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927436));
pub const LIBRARY_E_NO_SAVE_LOCATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927232));
pub const LIBRARY_E_NO_ACCESSIBLE_LOCATION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927231));
pub const E_USERTILE_UNSUPPORTEDFILETYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927216));
pub const E_USERTILE_CHANGEDISABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927215));
pub const E_USERTILE_LARGEORDYNAMIC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927214));
pub const E_USERTILE_VIDEOFRAMESIZE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927213));
pub const E_USERTILE_FILESIZE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927212));
pub const IMM_ACC_DOCKING_E_INSUFFICIENTHEIGHT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927184));
pub const IMM_ACC_DOCKING_E_DOCKOCCUPIED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927183));
pub const IMSC_E_SHELL_COMPONENT_STARTUP_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927181));
pub const SHC_E_SHELL_COMPONENT_STARTUP_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927180));
pub const E_TILE_NOTIFICATIONS_PLATFORM_FAILURE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144927159));
pub const E_SHELL_EXTENSION_BLOCKED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144926975));
pub const E_IMAGEFEED_CHANGEDISABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2144926960));
pub const GPFIDL_DEFAULT = @as(i32, 0);
pub const GPFIDL_ALTNAME = @as(i32, 1);
pub const GPFIDL_UNCPRINTER = @as(i32, 2);
pub const ISHCUTCMDID_DOWNLOADICON = @as(i32, 0);
pub const ISHCUTCMDID_INTSHORTCUTCREATE = @as(i32, 1);
pub const ISHCUTCMDID_COMMITHISTORY = @as(i32, 2);
pub const ISHCUTCMDID_SETUSERAWURL = @as(i32, 3);
pub const SFBID_PIDLCHANGED = @as(i32, 0);
pub const DBCID_EMPTY = @as(i32, 0);
pub const DBCID_ONDRAG = @as(i32, 1);
pub const DBCID_CLSIDOFBAR = @as(i32, 2);
pub const DBCID_RESIZE = @as(i32, 3);
pub const DBCID_GETBAR = @as(i32, 4);
pub const DBCID_UPDATESIZE = @as(i32, 5);
pub const BMICON_LARGE = @as(i32, 0);
pub const BMICON_SMALL = @as(i32, 1);
pub const ASSOCF_NONE = @as(i32, 0);
pub const ASSOCF_INIT_NOREMAPCLSID = @as(i32, 1);
pub const ASSOCF_INIT_BYEXENAME = @as(i32, 2);
pub const ASSOCF_OPEN_BYEXENAME = @as(i32, 2);
pub const ASSOCF_INIT_DEFAULTTOSTAR = @as(i32, 4);
pub const ASSOCF_INIT_DEFAULTTOFOLDER = @as(i32, 8);
pub const ASSOCF_NOUSERSETTINGS = @as(i32, 16);
pub const ASSOCF_NOTRUNCATE = @as(i32, 32);
pub const ASSOCF_VERIFY = @as(i32, 64);
pub const ASSOCF_REMAPRUNDLL = @as(i32, 128);
pub const ASSOCF_NOFIXUPS = @as(i32, 256);
pub const ASSOCF_IGNOREBASECLASS = @as(i32, 512);
pub const ASSOCF_INIT_IGNOREUNKNOWN = @as(i32, 1024);
pub const ASSOCF_INIT_FIXED_PROGID = @as(i32, 2048);
pub const ASSOCF_IS_PROTOCOL = @as(i32, 4096);
pub const ASSOCF_INIT_FOR_FILE = @as(i32, 8192);
pub const ASSOCF_IS_FULL_URI = @as(i32, 16384);
pub const ASSOCF_PER_MACHINE_ONLY = @as(i32, 32768);
pub const ASSOCF_APP_TO_APP = @as(i32, 65536);
pub const CTF_INSIST = @as(i32, 1);
pub const CTF_THREAD_REF = @as(i32, 2);
pub const CTF_PROCESS_REF = @as(i32, 4);
pub const CTF_COINIT_STA = @as(i32, 8);
pub const CTF_COINIT = @as(i32, 8);
pub const CTF_FREELIBANDEXIT = @as(i32, 16);
pub const CTF_REF_COUNTED = @as(i32, 32);
pub const CTF_WAIT_ALLOWCOM = @as(i32, 64);
pub const CTF_UNUSED = @as(i32, 128);
pub const CTF_INHERITWOW64 = @as(i32, 256);
pub const CTF_WAIT_NO_REENTRANCY = @as(i32, 512);
pub const CTF_KEYBOARD_LOCALE = @as(i32, 1024);
pub const CTF_OLEINITIALIZE = @as(i32, 2048);
pub const CTF_COINIT_MTA = @as(i32, 4096);
pub const CTF_NOADDREFLIB = @as(i32, 8192);

//--------------------------------------------------------------------------------
// Section: Types (966)
//--------------------------------------------------------------------------------
pub const SHGFI_FLAGS = enum(i32) {
    ADDOVERLAYS = 32,
    ATTR_SPECIFIED = 131072,
    ATTRIBUTES = 2048,
    DISPLAYNAME = 512,
    EXETYPE = 8192,
    ICON = 256,
    ICONLOCATION = 4096,
    LARGEICON = 0,
    LINKOVERLAY = 32768,
    OPENICON = 2,
    OVERLAYINDEX = 64,
    PIDL = 8,
    SELECTED = 65536,
    SHELLICONSIZE = 4,
    SMALLICON = 1,
    SYSICONINDEX = 16384,
    TYPENAME = 1024,
    USEFILEATTRIBUTES = 16,
    _,
    pub fn initFlags(o: struct {
        ADDOVERLAYS: u1 = 0,
        ATTR_SPECIFIED: u1 = 0,
        ATTRIBUTES: u1 = 0,
        DISPLAYNAME: u1 = 0,
        EXETYPE: u1 = 0,
        ICON: u1 = 0,
        ICONLOCATION: u1 = 0,
        LARGEICON: u1 = 0,
        LINKOVERLAY: u1 = 0,
        OPENICON: u1 = 0,
        OVERLAYINDEX: u1 = 0,
        PIDL: u1 = 0,
        SELECTED: u1 = 0,
        SHELLICONSIZE: u1 = 0,
        SMALLICON: u1 = 0,
        SYSICONINDEX: u1 = 0,
        TYPENAME: u1 = 0,
        USEFILEATTRIBUTES: u1 = 0,
    }) SHGFI_FLAGS {
        return @as(SHGFI_FLAGS, @enumFromInt((if (o.ADDOVERLAYS == 1) @intFromEnum(SHGFI_FLAGS.ADDOVERLAYS) else 0) | (if (o.ATTR_SPECIFIED == 1) @intFromEnum(SHGFI_FLAGS.ATTR_SPECIFIED) else 0) | (if (o.ATTRIBUTES == 1) @intFromEnum(SHGFI_FLAGS.ATTRIBUTES) else 0) | (if (o.DISPLAYNAME == 1) @intFromEnum(SHGFI_FLAGS.DISPLAYNAME) else 0) | (if (o.EXETYPE == 1) @intFromEnum(SHGFI_FLAGS.EXETYPE) else 0) | (if (o.ICON == 1) @intFromEnum(SHGFI_FLAGS.ICON) else 0) | (if (o.ICONLOCATION == 1) @intFromEnum(SHGFI_FLAGS.ICONLOCATION) else 0) | (if (o.LARGEICON == 1) @intFromEnum(SHGFI_FLAGS.LARGEICON) else 0) | (if (o.LINKOVERLAY == 1) @intFromEnum(SHGFI_FLAGS.LINKOVERLAY) else 0) | (if (o.OPENICON == 1) @intFromEnum(SHGFI_FLAGS.OPENICON) else 0) | (if (o.OVERLAYINDEX == 1) @intFromEnum(SHGFI_FLAGS.OVERLAYINDEX) else 0) | (if (o.PIDL == 1) @intFromEnum(SHGFI_FLAGS.PIDL) else 0) | (if (o.SELECTED == 1) @intFromEnum(SHGFI_FLAGS.SELECTED) else 0) | (if (o.SHELLICONSIZE == 1) @intFromEnum(SHGFI_FLAGS.SHELLICONSIZE) else 0) | (if (o.SMALLICON == 1) @intFromEnum(SHGFI_FLAGS.SMALLICON) else 0) | (if (o.SYSICONINDEX == 1) @intFromEnum(SHGFI_FLAGS.SYSICONINDEX) else 0) | (if (o.TYPENAME == 1) @intFromEnum(SHGFI_FLAGS.TYPENAME) else 0) | (if (o.USEFILEATTRIBUTES == 1) @intFromEnum(SHGFI_FLAGS.USEFILEATTRIBUTES) else 0)));
    }
};
pub const SHGFI_ADDOVERLAYS = SHGFI_FLAGS.ADDOVERLAYS;
pub const SHGFI_ATTR_SPECIFIED = SHGFI_FLAGS.ATTR_SPECIFIED;
pub const SHGFI_ATTRIBUTES = SHGFI_FLAGS.ATTRIBUTES;
pub const SHGFI_DISPLAYNAME = SHGFI_FLAGS.DISPLAYNAME;
pub const SHGFI_EXETYPE = SHGFI_FLAGS.EXETYPE;
pub const SHGFI_ICON = SHGFI_FLAGS.ICON;
pub const SHGFI_ICONLOCATION = SHGFI_FLAGS.ICONLOCATION;
pub const SHGFI_LARGEICON = SHGFI_FLAGS.LARGEICON;
pub const SHGFI_LINKOVERLAY = SHGFI_FLAGS.LINKOVERLAY;
pub const SHGFI_OPENICON = SHGFI_FLAGS.OPENICON;
pub const SHGFI_OVERLAYINDEX = SHGFI_FLAGS.OVERLAYINDEX;
pub const SHGFI_PIDL = SHGFI_FLAGS.PIDL;
pub const SHGFI_SELECTED = SHGFI_FLAGS.SELECTED;
pub const SHGFI_SHELLICONSIZE = SHGFI_FLAGS.SHELLICONSIZE;
pub const SHGFI_SMALLICON = SHGFI_FLAGS.SMALLICON;
pub const SHGFI_SYSICONINDEX = SHGFI_FLAGS.SYSICONINDEX;
pub const SHGFI_TYPENAME = SHGFI_FLAGS.TYPENAME;
pub const SHGFI_USEFILEATTRIBUTES = SHGFI_FLAGS.USEFILEATTRIBUTES;

pub const SHCNE_ID = enum(u32) {
    RENAMEITEM = 1,
    CREATE = 2,
    DELETE = 4,
    MKDIR = 8,
    RMDIR = 16,
    MEDIAINSERTED = 32,
    MEDIAREMOVED = 64,
    DRIVEREMOVED = 128,
    DRIVEADD = 256,
    NETSHARE = 512,
    NETUNSHARE = 1024,
    ATTRIBUTES = 2048,
    UPDATEDIR = 4096,
    UPDATEITEM = 8192,
    SERVERDISCONNECT = 16384,
    UPDATEIMAGE = 32768,
    DRIVEADDGUI = 65536,
    RENAMEFOLDER = 131072,
    FREESPACE = 262144,
    EXTENDED_EVENT = 67108864,
    ASSOCCHANGED = 134217728,
    DISKEVENTS = 145439,
    GLOBALEVENTS = 201687520,
    ALLEVENTS = 2147483647,
    INTERRUPT = 2147483648,
    _,
    pub fn initFlags(o: struct {
        RENAMEITEM: u1 = 0,
        CREATE: u1 = 0,
        DELETE: u1 = 0,
        MKDIR: u1 = 0,
        RMDIR: u1 = 0,
        MEDIAINSERTED: u1 = 0,
        MEDIAREMOVED: u1 = 0,
        DRIVEREMOVED: u1 = 0,
        DRIVEADD: u1 = 0,
        NETSHARE: u1 = 0,
        NETUNSHARE: u1 = 0,
        ATTRIBUTES: u1 = 0,
        UPDATEDIR: u1 = 0,
        UPDATEITEM: u1 = 0,
        SERVERDISCONNECT: u1 = 0,
        UPDATEIMAGE: u1 = 0,
        DRIVEADDGUI: u1 = 0,
        RENAMEFOLDER: u1 = 0,
        FREESPACE: u1 = 0,
        EXTENDED_EVENT: u1 = 0,
        ASSOCCHANGED: u1 = 0,
        DISKEVENTS: u1 = 0,
        GLOBALEVENTS: u1 = 0,
        ALLEVENTS: u1 = 0,
        INTERRUPT: u1 = 0,
    }) SHCNE_ID {
        return @as(SHCNE_ID, @enumFromInt((if (o.RENAMEITEM == 1) @intFromEnum(SHCNE_ID.RENAMEITEM) else 0) | (if (o.CREATE == 1) @intFromEnum(SHCNE_ID.CREATE) else 0) | (if (o.DELETE == 1) @intFromEnum(SHCNE_ID.DELETE) else 0) | (if (o.MKDIR == 1) @intFromEnum(SHCNE_ID.MKDIR) else 0) | (if (o.RMDIR == 1) @intFromEnum(SHCNE_ID.RMDIR) else 0) | (if (o.MEDIAINSERTED == 1) @intFromEnum(SHCNE_ID.MEDIAINSERTED) else 0) | (if (o.MEDIAREMOVED == 1) @intFromEnum(SHCNE_ID.MEDIAREMOVED) else 0) | (if (o.DRIVEREMOVED == 1) @intFromEnum(SHCNE_ID.DRIVEREMOVED) else 0) | (if (o.DRIVEADD == 1) @intFromEnum(SHCNE_ID.DRIVEADD) else 0) | (if (o.NETSHARE == 1) @intFromEnum(SHCNE_ID.NETSHARE) else 0) | (if (o.NETUNSHARE == 1) @intFromEnum(SHCNE_ID.NETUNSHARE) else 0) | (if (o.ATTRIBUTES == 1) @intFromEnum(SHCNE_ID.ATTRIBUTES) else 0) | (if (o.UPDATEDIR == 1) @intFromEnum(SHCNE_ID.UPDATEDIR) else 0) | (if (o.UPDATEITEM == 1) @intFromEnum(SHCNE_ID.UPDATEITEM) else 0) | (if (o.SERVERDISCONNECT == 1) @intFromEnum(SHCNE_ID.SERVERDISCONNECT) else 0) | (if (o.UPDATEIMAGE == 1) @intFromEnum(SHCNE_ID.UPDATEIMAGE) else 0) | (if (o.DRIVEADDGUI == 1) @intFromEnum(SHCNE_ID.DRIVEADDGUI) else 0) | (if (o.RENAMEFOLDER == 1) @intFromEnum(SHCNE_ID.RENAMEFOLDER) else 0) | (if (o.FREESPACE == 1) @intFromEnum(SHCNE_ID.FREESPACE) else 0) | (if (o.EXTENDED_EVENT == 1) @intFromEnum(SHCNE_ID.EXTENDED_EVENT) else 0) | (if (o.ASSOCCHANGED == 1) @intFromEnum(SHCNE_ID.ASSOCCHANGED) else 0) | (if (o.DISKEVENTS == 1) @intFromEnum(SHCNE_ID.DISKEVENTS) else 0) | (if (o.GLOBALEVENTS == 1) @intFromEnum(SHCNE_ID.GLOBALEVENTS) else 0) | (if (o.ALLEVENTS == 1) @intFromEnum(SHCNE_ID.ALLEVENTS) else 0) | (if (o.INTERRUPT == 1) @intFromEnum(SHCNE_ID.INTERRUPT) else 0)));
    }
};
pub const SHCNE_RENAMEITEM = SHCNE_ID.RENAMEITEM;
pub const SHCNE_CREATE = SHCNE_ID.CREATE;
pub const SHCNE_DELETE = SHCNE_ID.DELETE;
pub const SHCNE_MKDIR = SHCNE_ID.MKDIR;
pub const SHCNE_RMDIR = SHCNE_ID.RMDIR;
pub const SHCNE_MEDIAINSERTED = SHCNE_ID.MEDIAINSERTED;
pub const SHCNE_MEDIAREMOVED = SHCNE_ID.MEDIAREMOVED;
pub const SHCNE_DRIVEREMOVED = SHCNE_ID.DRIVEREMOVED;
pub const SHCNE_DRIVEADD = SHCNE_ID.DRIVEADD;
pub const SHCNE_NETSHARE = SHCNE_ID.NETSHARE;
pub const SHCNE_NETUNSHARE = SHCNE_ID.NETUNSHARE;
pub const SHCNE_ATTRIBUTES = SHCNE_ID.ATTRIBUTES;
pub const SHCNE_UPDATEDIR = SHCNE_ID.UPDATEDIR;
pub const SHCNE_UPDATEITEM = SHCNE_ID.UPDATEITEM;
pub const SHCNE_SERVERDISCONNECT = SHCNE_ID.SERVERDISCONNECT;
pub const SHCNE_UPDATEIMAGE = SHCNE_ID.UPDATEIMAGE;
pub const SHCNE_DRIVEADDGUI = SHCNE_ID.DRIVEADDGUI;
pub const SHCNE_RENAMEFOLDER = SHCNE_ID.RENAMEFOLDER;
pub const SHCNE_FREESPACE = SHCNE_ID.FREESPACE;
pub const SHCNE_EXTENDED_EVENT = SHCNE_ID.EXTENDED_EVENT;
pub const SHCNE_ASSOCCHANGED = SHCNE_ID.ASSOCCHANGED;
pub const SHCNE_DISKEVENTS = SHCNE_ID.DISKEVENTS;
pub const SHCNE_GLOBALEVENTS = SHCNE_ID.GLOBALEVENTS;
pub const SHCNE_ALLEVENTS = SHCNE_ID.ALLEVENTS;
pub const SHCNE_INTERRUPT = SHCNE_ID.INTERRUPT;

pub const SHCNRF_SOURCE = enum(i32) {
    InterruptLevel = 1,
    ShellLevel = 2,
    RecursiveInterrupt = 4096,
    NewDelivery = 32768,
    _,
    pub fn initFlags(o: struct {
        InterruptLevel: u1 = 0,
        ShellLevel: u1 = 0,
        RecursiveInterrupt: u1 = 0,
        NewDelivery: u1 = 0,
    }) SHCNRF_SOURCE {
        return @as(SHCNRF_SOURCE, @enumFromInt((if (o.InterruptLevel == 1) @intFromEnum(SHCNRF_SOURCE.InterruptLevel) else 0) | (if (o.ShellLevel == 1) @intFromEnum(SHCNRF_SOURCE.ShellLevel) else 0) | (if (o.RecursiveInterrupt == 1) @intFromEnum(SHCNRF_SOURCE.RecursiveInterrupt) else 0) | (if (o.NewDelivery == 1) @intFromEnum(SHCNRF_SOURCE.NewDelivery) else 0)));
    }
};
pub const SHCNRF_InterruptLevel = SHCNRF_SOURCE.InterruptLevel;
pub const SHCNRF_ShellLevel = SHCNRF_SOURCE.ShellLevel;
pub const SHCNRF_RecursiveInterrupt = SHCNRF_SOURCE.RecursiveInterrupt;
pub const SHCNRF_NewDelivery = SHCNRF_SOURCE.NewDelivery;

pub const SHCNF_FLAGS = enum(u32) {
    IDLIST = 0,
    PATHA = 1,
    PRINTERA = 2,
    DWORD = 3,
    PATHW = 5,
    PRINTERW = 6,
    TYPE = 255,
    FLUSH = 4096,
    FLUSHNOWAIT = 12288,
    NOTIFYRECURSIVE = 65536,
    // PATH = 5, this enum value conflicts with PATHW
    // PRINTER = 6, this enum value conflicts with PRINTERW
    _,
    pub fn initFlags(o: struct {
        IDLIST: u1 = 0,
        PATHA: u1 = 0,
        PRINTERA: u1 = 0,
        DWORD: u1 = 0,
        PATHW: u1 = 0,
        PRINTERW: u1 = 0,
        TYPE: u1 = 0,
        FLUSH: u1 = 0,
        FLUSHNOWAIT: u1 = 0,
        NOTIFYRECURSIVE: u1 = 0,
    }) SHCNF_FLAGS {
        return @as(SHCNF_FLAGS, @enumFromInt((if (o.IDLIST == 1) @intFromEnum(SHCNF_FLAGS.IDLIST) else 0) | (if (o.PATHA == 1) @intFromEnum(SHCNF_FLAGS.PATHA) else 0) | (if (o.PRINTERA == 1) @intFromEnum(SHCNF_FLAGS.PRINTERA) else 0) | (if (o.DWORD == 1) @intFromEnum(SHCNF_FLAGS.DWORD) else 0) | (if (o.PATHW == 1) @intFromEnum(SHCNF_FLAGS.PATHW) else 0) | (if (o.PRINTERW == 1) @intFromEnum(SHCNF_FLAGS.PRINTERW) else 0) | (if (o.TYPE == 1) @intFromEnum(SHCNF_FLAGS.TYPE) else 0) | (if (o.FLUSH == 1) @intFromEnum(SHCNF_FLAGS.FLUSH) else 0) | (if (o.FLUSHNOWAIT == 1) @intFromEnum(SHCNF_FLAGS.FLUSHNOWAIT) else 0) | (if (o.NOTIFYRECURSIVE == 1) @intFromEnum(SHCNF_FLAGS.NOTIFYRECURSIVE) else 0)));
    }
};
pub const SHCNF_IDLIST = SHCNF_FLAGS.IDLIST;
pub const SHCNF_PATHA = SHCNF_FLAGS.PATHA;
pub const SHCNF_PRINTERA = SHCNF_FLAGS.PRINTERA;
pub const SHCNF_DWORD = SHCNF_FLAGS.DWORD;
pub const SHCNF_PATHW = SHCNF_FLAGS.PATHW;
pub const SHCNF_PRINTERW = SHCNF_FLAGS.PRINTERW;
pub const SHCNF_TYPE = SHCNF_FLAGS.TYPE;
pub const SHCNF_FLUSH = SHCNF_FLAGS.FLUSH;
pub const SHCNF_FLUSHNOWAIT = SHCNF_FLAGS.FLUSHNOWAIT;
pub const SHCNF_NOTIFYRECURSIVE = SHCNF_FLAGS.NOTIFYRECURSIVE;
pub const SHCNF_PATH = SHCNF_FLAGS.PATHW;
pub const SHCNF_PRINTER = SHCNF_FLAGS.PRINTERW;

pub const QITIPF_FLAGS = enum(i32) {
    TIPF_DEFAULT = 0,
    TIPF_USENAME = 1,
    TIPF_LINKNOTARGET = 2,
    TIPF_LINKUSETARGET = 4,
    TIPF_USESLOWTIP = 8,
    TIPF_SINGLELINE = 16,
    // F_CACHED = 1, this enum value conflicts with TIPF_USENAME
    // F_DONTEXPANDFOLDER = 2, this enum value conflicts with TIPF_LINKNOTARGET
    _,
    pub fn initFlags(o: struct {
        TIPF_DEFAULT: u1 = 0,
        TIPF_USENAME: u1 = 0,
        TIPF_LINKNOTARGET: u1 = 0,
        TIPF_LINKUSETARGET: u1 = 0,
        TIPF_USESLOWTIP: u1 = 0,
        TIPF_SINGLELINE: u1 = 0,
    }) QITIPF_FLAGS {
        return @as(QITIPF_FLAGS, @enumFromInt((if (o.TIPF_DEFAULT == 1) @intFromEnum(QITIPF_FLAGS.TIPF_DEFAULT) else 0) | (if (o.TIPF_USENAME == 1) @intFromEnum(QITIPF_FLAGS.TIPF_USENAME) else 0) | (if (o.TIPF_LINKNOTARGET == 1) @intFromEnum(QITIPF_FLAGS.TIPF_LINKNOTARGET) else 0) | (if (o.TIPF_LINKUSETARGET == 1) @intFromEnum(QITIPF_FLAGS.TIPF_LINKUSETARGET) else 0) | (if (o.TIPF_USESLOWTIP == 1) @intFromEnum(QITIPF_FLAGS.TIPF_USESLOWTIP) else 0) | (if (o.TIPF_SINGLELINE == 1) @intFromEnum(QITIPF_FLAGS.TIPF_SINGLELINE) else 0)));
    }
};
pub const QITIPF_DEFAULT = QITIPF_FLAGS.TIPF_DEFAULT;
pub const QITIPF_USENAME = QITIPF_FLAGS.TIPF_USENAME;
pub const QITIPF_LINKNOTARGET = QITIPF_FLAGS.TIPF_LINKNOTARGET;
pub const QITIPF_LINKUSETARGET = QITIPF_FLAGS.TIPF_LINKUSETARGET;
pub const QITIPF_USESLOWTIP = QITIPF_FLAGS.TIPF_USESLOWTIP;
pub const QITIPF_SINGLELINE = QITIPF_FLAGS.TIPF_SINGLELINE;
pub const QIF_CACHED = QITIPF_FLAGS.TIPF_USENAME;
pub const QIF_DONTEXPANDFOLDER = QITIPF_FLAGS.TIPF_LINKNOTARGET;

pub const SHDID_ID = enum(i32) {
    ROOT_REGITEM = 1,
    FS_FILE = 2,
    FS_DIRECTORY = 3,
    FS_OTHER = 4,
    COMPUTER_DRIVE35 = 5,
    COMPUTER_DRIVE525 = 6,
    COMPUTER_REMOVABLE = 7,
    COMPUTER_FIXED = 8,
    COMPUTER_NETDRIVE = 9,
    COMPUTER_CDROM = 10,
    COMPUTER_RAMDISK = 11,
    COMPUTER_OTHER = 12,
    NET_DOMAIN = 13,
    NET_SERVER = 14,
    NET_SHARE = 15,
    NET_RESTOFNET = 16,
    NET_OTHER = 17,
    COMPUTER_IMAGING = 18,
    COMPUTER_AUDIO = 19,
    COMPUTER_SHAREDDOCS = 20,
    MOBILE_DEVICE = 21,
    REMOTE_DESKTOP_DRIVE = 22,
};
pub const SHDID_ROOT_REGITEM = SHDID_ID.ROOT_REGITEM;
pub const SHDID_FS_FILE = SHDID_ID.FS_FILE;
pub const SHDID_FS_DIRECTORY = SHDID_ID.FS_DIRECTORY;
pub const SHDID_FS_OTHER = SHDID_ID.FS_OTHER;
pub const SHDID_COMPUTER_DRIVE35 = SHDID_ID.COMPUTER_DRIVE35;
pub const SHDID_COMPUTER_DRIVE525 = SHDID_ID.COMPUTER_DRIVE525;
pub const SHDID_COMPUTER_REMOVABLE = SHDID_ID.COMPUTER_REMOVABLE;
pub const SHDID_COMPUTER_FIXED = SHDID_ID.COMPUTER_FIXED;
pub const SHDID_COMPUTER_NETDRIVE = SHDID_ID.COMPUTER_NETDRIVE;
pub const SHDID_COMPUTER_CDROM = SHDID_ID.COMPUTER_CDROM;
pub const SHDID_COMPUTER_RAMDISK = SHDID_ID.COMPUTER_RAMDISK;
pub const SHDID_COMPUTER_OTHER = SHDID_ID.COMPUTER_OTHER;
pub const SHDID_NET_DOMAIN = SHDID_ID.NET_DOMAIN;
pub const SHDID_NET_SERVER = SHDID_ID.NET_SERVER;
pub const SHDID_NET_SHARE = SHDID_ID.NET_SHARE;
pub const SHDID_NET_RESTOFNET = SHDID_ID.NET_RESTOFNET;
pub const SHDID_NET_OTHER = SHDID_ID.NET_OTHER;
pub const SHDID_COMPUTER_IMAGING = SHDID_ID.COMPUTER_IMAGING;
pub const SHDID_COMPUTER_AUDIO = SHDID_ID.COMPUTER_AUDIO;
pub const SHDID_COMPUTER_SHAREDDOCS = SHDID_ID.COMPUTER_SHAREDDOCS;
pub const SHDID_MOBILE_DEVICE = SHDID_ID.MOBILE_DEVICE;
pub const SHDID_REMOTE_DESKTOP_DRIVE = SHDID_ID.REMOTE_DESKTOP_DRIVE;

pub const SHGDFIL_FORMAT = enum(i32) {
    FINDDATA = 1,
    NETRESOURCE = 2,
    DESCRIPTIONID = 3,
};
pub const SHGDFIL_FINDDATA = SHGDFIL_FORMAT.FINDDATA;
pub const SHGDFIL_NETRESOURCE = SHGDFIL_FORMAT.NETRESOURCE;
pub const SHGDFIL_DESCRIPTIONID = SHGDFIL_FORMAT.DESCRIPTIONID;

pub const PRF_FLAGS = enum(i32) {
    VERIFYEXISTS = 1,
    TRYPROGRAMEXTENSIONS = 3,
    FIRSTDIRDEF = 4,
    DONTFINDLNK = 8,
    REQUIREABSOLUTE = 16,
    _,
    pub fn initFlags(o: struct {
        VERIFYEXISTS: u1 = 0,
        TRYPROGRAMEXTENSIONS: u1 = 0,
        FIRSTDIRDEF: u1 = 0,
        DONTFINDLNK: u1 = 0,
        REQUIREABSOLUTE: u1 = 0,
    }) PRF_FLAGS {
        return @as(PRF_FLAGS, @enumFromInt((if (o.VERIFYEXISTS == 1) @intFromEnum(PRF_FLAGS.VERIFYEXISTS) else 0) | (if (o.TRYPROGRAMEXTENSIONS == 1) @intFromEnum(PRF_FLAGS.TRYPROGRAMEXTENSIONS) else 0) | (if (o.FIRSTDIRDEF == 1) @intFromEnum(PRF_FLAGS.FIRSTDIRDEF) else 0) | (if (o.DONTFINDLNK == 1) @intFromEnum(PRF_FLAGS.DONTFINDLNK) else 0) | (if (o.REQUIREABSOLUTE == 1) @intFromEnum(PRF_FLAGS.REQUIREABSOLUTE) else 0)));
    }
};
pub const PRF_VERIFYEXISTS = PRF_FLAGS.VERIFYEXISTS;
pub const PRF_TRYPROGRAMEXTENSIONS = PRF_FLAGS.TRYPROGRAMEXTENSIONS;
pub const PRF_FIRSTDIRDEF = PRF_FLAGS.FIRSTDIRDEF;
pub const PRF_DONTFINDLNK = PRF_FLAGS.DONTFINDLNK;
pub const PRF_REQUIREABSOLUTE = PRF_FLAGS.REQUIREABSOLUTE;

pub const PCS_RET = enum(u32) {
    FATAL = 2147483648,
    REPLACEDCHAR = 1,
    REMOVEDCHAR = 2,
    TRUNCATED = 4,
    PATHTOOLONG = 8,
    _,
    pub fn initFlags(o: struct {
        FATAL: u1 = 0,
        REPLACEDCHAR: u1 = 0,
        REMOVEDCHAR: u1 = 0,
        TRUNCATED: u1 = 0,
        PATHTOOLONG: u1 = 0,
    }) PCS_RET {
        return @as(PCS_RET, @enumFromInt((if (o.FATAL == 1) @intFromEnum(PCS_RET.FATAL) else 0) | (if (o.REPLACEDCHAR == 1) @intFromEnum(PCS_RET.REPLACEDCHAR) else 0) | (if (o.REMOVEDCHAR == 1) @intFromEnum(PCS_RET.REMOVEDCHAR) else 0) | (if (o.TRUNCATED == 1) @intFromEnum(PCS_RET.TRUNCATED) else 0) | (if (o.PATHTOOLONG == 1) @intFromEnum(PCS_RET.PATHTOOLONG) else 0)));
    }
};
pub const PCS_FATAL = PCS_RET.FATAL;
pub const PCS_REPLACEDCHAR = PCS_RET.REPLACEDCHAR;
pub const PCS_REMOVEDCHAR = PCS_RET.REMOVEDCHAR;
pub const PCS_TRUNCATED = PCS_RET.TRUNCATED;
pub const PCS_PATHTOOLONG = PCS_RET.PATHTOOLONG;

pub const MM_FLAGS = enum(u32) {
    ADDSEPARATOR = 1,
    SUBMENUSHAVEIDS = 2,
    DONTREMOVESEPS = 4,
    _,
    pub fn initFlags(o: struct {
        ADDSEPARATOR: u1 = 0,
        SUBMENUSHAVEIDS: u1 = 0,
        DONTREMOVESEPS: u1 = 0,
    }) MM_FLAGS {
        return @as(MM_FLAGS, @enumFromInt((if (o.ADDSEPARATOR == 1) @intFromEnum(MM_FLAGS.ADDSEPARATOR) else 0) | (if (o.SUBMENUSHAVEIDS == 1) @intFromEnum(MM_FLAGS.SUBMENUSHAVEIDS) else 0) | (if (o.DONTREMOVESEPS == 1) @intFromEnum(MM_FLAGS.DONTREMOVESEPS) else 0)));
    }
};
pub const MM_ADDSEPARATOR = MM_FLAGS.ADDSEPARATOR;
pub const MM_SUBMENUSHAVEIDS = MM_FLAGS.SUBMENUSHAVEIDS;
pub const MM_DONTREMOVESEPS = MM_FLAGS.DONTREMOVESEPS;

pub const SHOP_TYPE = enum(i32) {
    PRINTERNAME = 1,
    FILEPATH = 2,
    VOLUMEGUID = 4,
    _,
    pub fn initFlags(o: struct {
        PRINTERNAME: u1 = 0,
        FILEPATH: u1 = 0,
        VOLUMEGUID: u1 = 0,
    }) SHOP_TYPE {
        return @as(SHOP_TYPE, @enumFromInt((if (o.PRINTERNAME == 1) @intFromEnum(SHOP_TYPE.PRINTERNAME) else 0) | (if (o.FILEPATH == 1) @intFromEnum(SHOP_TYPE.FILEPATH) else 0) | (if (o.VOLUMEGUID == 1) @intFromEnum(SHOP_TYPE.VOLUMEGUID) else 0)));
    }
};
pub const SHOP_PRINTERNAME = SHOP_TYPE.PRINTERNAME;
pub const SHOP_FILEPATH = SHOP_TYPE.FILEPATH;
pub const SHOP_VOLUMEGUID = SHOP_TYPE.VOLUMEGUID;

pub const SHFMT_ID = enum(u32) {
    T = 65535,
};
pub const SHFMT_ID_DEFAULT = SHFMT_ID.T;

pub const SHFMT_OPT = enum(i32) {
    NONE = 0,
    FULL = 1,
    SYSONLY = 2,
    _,
    pub fn initFlags(o: struct {
        NONE: u1 = 0,
        FULL: u1 = 0,
        SYSONLY: u1 = 0,
    }) SHFMT_OPT {
        return @as(SHFMT_OPT, @enumFromInt((if (o.NONE == 1) @intFromEnum(SHFMT_OPT.NONE) else 0) | (if (o.FULL == 1) @intFromEnum(SHFMT_OPT.FULL) else 0) | (if (o.SYSONLY == 1) @intFromEnum(SHFMT_OPT.SYSONLY) else 0)));
    }
};
pub const SHFMT_OPT_NONE = SHFMT_OPT.NONE;
pub const SHFMT_OPT_FULL = SHFMT_OPT.FULL;
pub const SHFMT_OPT_SYSONLY = SHFMT_OPT.SYSONLY;

pub const SHFMT_RET = enum(u32) {
    ERROR = 4294967295,
    CANCEL = 4294967294,
    NOFORMAT = 4294967293,
};
pub const SHFMT_ERROR = SHFMT_RET.ERROR;
pub const SHFMT_CANCEL = SHFMT_RET.CANCEL;
pub const SHFMT_NOFORMAT = SHFMT_RET.NOFORMAT;

pub const VALIDATEUNC_OPTION = enum(i32) {
    CONNECT = 1,
    NOUI = 2,
    PRINT = 4,
    PERSIST = 8,
    VALID = 15,
    _,
    pub fn initFlags(o: struct {
        CONNECT: u1 = 0,
        NOUI: u1 = 0,
        PRINT: u1 = 0,
        PERSIST: u1 = 0,
        VALID: u1 = 0,
    }) VALIDATEUNC_OPTION {
        return @as(VALIDATEUNC_OPTION, @enumFromInt((if (o.CONNECT == 1) @intFromEnum(VALIDATEUNC_OPTION.CONNECT) else 0) | (if (o.NOUI == 1) @intFromEnum(VALIDATEUNC_OPTION.NOUI) else 0) | (if (o.PRINT == 1) @intFromEnum(VALIDATEUNC_OPTION.PRINT) else 0) | (if (o.PERSIST == 1) @intFromEnum(VALIDATEUNC_OPTION.PERSIST) else 0) | (if (o.VALID == 1) @intFromEnum(VALIDATEUNC_OPTION.VALID) else 0)));
    }
};
pub const VALIDATEUNC_CONNECT = VALIDATEUNC_OPTION.CONNECT;
pub const VALIDATEUNC_NOUI = VALIDATEUNC_OPTION.NOUI;
pub const VALIDATEUNC_PRINT = VALIDATEUNC_OPTION.PRINT;
pub const VALIDATEUNC_PERSIST = VALIDATEUNC_OPTION.PERSIST;
pub const VALIDATEUNC_VALID = VALIDATEUNC_OPTION.VALID;

pub const SFVM_MESSAGE_ID = enum(i32) {
    MERGEMENU = 1,
    INVOKECOMMAND = 2,
    GETHELPTEXT = 3,
    GETTOOLTIPTEXT = 4,
    GETBUTTONINFO = 5,
    GETBUTTONS = 6,
    INITMENUPOPUP = 7,
    FSNOTIFY = 14,
    WINDOWCREATED = 15,
    GETDETAILSOF = 23,
    COLUMNCLICK = 24,
    QUERYFSNOTIFY = 25,
    DEFITEMCOUNT = 26,
    DEFVIEWMODE = 27,
    UNMERGEMENU = 28,
    UPDATESTATUSBAR = 31,
    BACKGROUNDENUM = 32,
    DIDDRAGDROP = 36,
    SETISFV = 39,
    THISIDLIST = 41,
    ADDPROPERTYPAGES = 47,
    BACKGROUNDENUMDONE = 48,
    GETNOTIFY = 49,
    GETSORTDEFAULTS = 53,
    SIZE = 57,
    GETZONE = 58,
    GETPANE = 59,
    GETHELPTOPIC = 63,
    GETANIMATION = 68,
};
pub const SFVM_MERGEMENU = SFVM_MESSAGE_ID.MERGEMENU;
pub const SFVM_INVOKECOMMAND = SFVM_MESSAGE_ID.INVOKECOMMAND;
pub const SFVM_GETHELPTEXT = SFVM_MESSAGE_ID.GETHELPTEXT;
pub const SFVM_GETTOOLTIPTEXT = SFVM_MESSAGE_ID.GETTOOLTIPTEXT;
pub const SFVM_GETBUTTONINFO = SFVM_MESSAGE_ID.GETBUTTONINFO;
pub const SFVM_GETBUTTONS = SFVM_MESSAGE_ID.GETBUTTONS;
pub const SFVM_INITMENUPOPUP = SFVM_MESSAGE_ID.INITMENUPOPUP;
pub const SFVM_FSNOTIFY = SFVM_MESSAGE_ID.FSNOTIFY;
pub const SFVM_WINDOWCREATED = SFVM_MESSAGE_ID.WINDOWCREATED;
pub const SFVM_GETDETAILSOF = SFVM_MESSAGE_ID.GETDETAILSOF;
pub const SFVM_COLUMNCLICK = SFVM_MESSAGE_ID.COLUMNCLICK;
pub const SFVM_QUERYFSNOTIFY = SFVM_MESSAGE_ID.QUERYFSNOTIFY;
pub const SFVM_DEFITEMCOUNT = SFVM_MESSAGE_ID.DEFITEMCOUNT;
pub const SFVM_DEFVIEWMODE = SFVM_MESSAGE_ID.DEFVIEWMODE;
pub const SFVM_UNMERGEMENU = SFVM_MESSAGE_ID.UNMERGEMENU;
pub const SFVM_UPDATESTATUSBAR = SFVM_MESSAGE_ID.UPDATESTATUSBAR;
pub const SFVM_BACKGROUNDENUM = SFVM_MESSAGE_ID.BACKGROUNDENUM;
pub const SFVM_DIDDRAGDROP = SFVM_MESSAGE_ID.DIDDRAGDROP;
pub const SFVM_SETISFV = SFVM_MESSAGE_ID.SETISFV;
pub const SFVM_THISIDLIST = SFVM_MESSAGE_ID.THISIDLIST;
pub const SFVM_ADDPROPERTYPAGES = SFVM_MESSAGE_ID.ADDPROPERTYPAGES;
pub const SFVM_BACKGROUNDENUMDONE = SFVM_MESSAGE_ID.BACKGROUNDENUMDONE;
pub const SFVM_GETNOTIFY = SFVM_MESSAGE_ID.GETNOTIFY;
pub const SFVM_GETSORTDEFAULTS = SFVM_MESSAGE_ID.GETSORTDEFAULTS;
pub const SFVM_SIZE = SFVM_MESSAGE_ID.SIZE;
pub const SFVM_GETZONE = SFVM_MESSAGE_ID.GETZONE;
pub const SFVM_GETPANE = SFVM_MESSAGE_ID.GETPANE;
pub const SFVM_GETHELPTOPIC = SFVM_MESSAGE_ID.GETHELPTOPIC;
pub const SFVM_GETANIMATION = SFVM_MESSAGE_ID.GETANIMATION;

pub const SFVS_SELECT = enum(i32) {
    NONE = 0,
    ALLITEMS = 1,
    INVERT = 2,
};
pub const SFVS_SELECT_NONE = SFVS_SELECT.NONE;
pub const SFVS_SELECT_ALLITEMS = SFVS_SELECT.ALLITEMS;
pub const SFVS_SELECT_INVERT = SFVS_SELECT.INVERT;

pub const DFM_MESSAGE_ID = enum(i32) {
    MERGECONTEXTMENU = 1,
    INVOKECOMMAND = 2,
    GETHELPTEXT = 5,
    WM_MEASUREITEM = 6,
    WM_DRAWITEM = 7,
    WM_INITMENUPOPUP = 8,
    VALIDATECMD = 9,
    MERGECONTEXTMENU_TOP = 10,
    GETHELPTEXTW = 11,
    INVOKECOMMANDEX = 12,
    MAPCOMMANDNAME = 13,
    GETDEFSTATICID = 14,
    GETVERBW = 15,
    GETVERBA = 16,
    MERGECONTEXTMENU_BOTTOM = 17,
    MODIFYQCMFLAGS = 18,
};
pub const DFM_MERGECONTEXTMENU = DFM_MESSAGE_ID.MERGECONTEXTMENU;
pub const DFM_INVOKECOMMAND = DFM_MESSAGE_ID.INVOKECOMMAND;
pub const DFM_GETHELPTEXT = DFM_MESSAGE_ID.GETHELPTEXT;
pub const DFM_WM_MEASUREITEM = DFM_MESSAGE_ID.WM_MEASUREITEM;
pub const DFM_WM_DRAWITEM = DFM_MESSAGE_ID.WM_DRAWITEM;
pub const DFM_WM_INITMENUPOPUP = DFM_MESSAGE_ID.WM_INITMENUPOPUP;
pub const DFM_VALIDATECMD = DFM_MESSAGE_ID.VALIDATECMD;
pub const DFM_MERGECONTEXTMENU_TOP = DFM_MESSAGE_ID.MERGECONTEXTMENU_TOP;
pub const DFM_GETHELPTEXTW = DFM_MESSAGE_ID.GETHELPTEXTW;
pub const DFM_INVOKECOMMANDEX = DFM_MESSAGE_ID.INVOKECOMMANDEX;
pub const DFM_MAPCOMMANDNAME = DFM_MESSAGE_ID.MAPCOMMANDNAME;
pub const DFM_GETDEFSTATICID = DFM_MESSAGE_ID.GETDEFSTATICID;
pub const DFM_GETVERBW = DFM_MESSAGE_ID.GETVERBW;
pub const DFM_GETVERBA = DFM_MESSAGE_ID.GETVERBA;
pub const DFM_MERGECONTEXTMENU_BOTTOM = DFM_MESSAGE_ID.MERGECONTEXTMENU_BOTTOM;
pub const DFM_MODIFYQCMFLAGS = DFM_MESSAGE_ID.MODIFYQCMFLAGS;

pub const DFM_CMD = enum(i32) {
    DELETE = -1,
    MOVE = -2,
    COPY = -3,
    LINK = -4,
    PROPERTIES = -5,
    NEWFOLDER = -6,
    PASTE = -7,
    VIEWLIST = -8,
    VIEWDETAILS = -9,
    PASTELINK = -10,
    PASTESPECIAL = -11,
    MODALPROP = -12,
    RENAME = -13,
};
pub const DFM_CMD_DELETE = DFM_CMD.DELETE;
pub const DFM_CMD_MOVE = DFM_CMD.MOVE;
pub const DFM_CMD_COPY = DFM_CMD.COPY;
pub const DFM_CMD_LINK = DFM_CMD.LINK;
pub const DFM_CMD_PROPERTIES = DFM_CMD.PROPERTIES;
pub const DFM_CMD_NEWFOLDER = DFM_CMD.NEWFOLDER;
pub const DFM_CMD_PASTE = DFM_CMD.PASTE;
pub const DFM_CMD_VIEWLIST = DFM_CMD.VIEWLIST;
pub const DFM_CMD_VIEWDETAILS = DFM_CMD.VIEWDETAILS;
pub const DFM_CMD_PASTELINK = DFM_CMD.PASTELINK;
pub const DFM_CMD_PASTESPECIAL = DFM_CMD.PASTESPECIAL;
pub const DFM_CMD_MODALPROP = DFM_CMD.MODALPROP;
pub const DFM_CMD_RENAME = DFM_CMD.RENAME;

pub const PID_IS = enum(i32) {
    URL = 2,
    NAME = 4,
    WORKINGDIR = 5,
    HOTKEY = 6,
    SHOWCMD = 7,
    ICONINDEX = 8,
    ICONFILE = 9,
    WHATSNEW = 10,
    AUTHOR = 11,
    DESCRIPTION = 12,
    COMMENT = 13,
    ROAMED = 15,
};
pub const PID_IS_URL = PID_IS.URL;
pub const PID_IS_NAME = PID_IS.NAME;
pub const PID_IS_WORKINGDIR = PID_IS.WORKINGDIR;
pub const PID_IS_HOTKEY = PID_IS.HOTKEY;
pub const PID_IS_SHOWCMD = PID_IS.SHOWCMD;
pub const PID_IS_ICONINDEX = PID_IS.ICONINDEX;
pub const PID_IS_ICONFILE = PID_IS.ICONFILE;
pub const PID_IS_WHATSNEW = PID_IS.WHATSNEW;
pub const PID_IS_AUTHOR = PID_IS.AUTHOR;
pub const PID_IS_DESCRIPTION = PID_IS.DESCRIPTION;
pub const PID_IS_COMMENT = PID_IS.COMMENT;
pub const PID_IS_ROAMED = PID_IS.ROAMED;

pub const PID_INTSITE = enum(i32) {
    WHATSNEW = 2,
    AUTHOR = 3,
    LASTVISIT = 4,
    LASTMOD = 5,
    VISITCOUNT = 6,
    DESCRIPTION = 7,
    COMMENT = 8,
    FLAGS = 9,
    CONTENTLEN = 10,
    CONTENTCODE = 11,
    RECURSE = 12,
    WATCH = 13,
    SUBSCRIPTION = 14,
    URL = 15,
    TITLE = 16,
    CODEPAGE = 18,
    TRACKING = 19,
    ICONINDEX = 20,
    ICONFILE = 21,
    ROAMED = 34,
};
pub const PID_INTSITE_WHATSNEW = PID_INTSITE.WHATSNEW;
pub const PID_INTSITE_AUTHOR = PID_INTSITE.AUTHOR;
pub const PID_INTSITE_LASTVISIT = PID_INTSITE.LASTVISIT;
pub const PID_INTSITE_LASTMOD = PID_INTSITE.LASTMOD;
pub const PID_INTSITE_VISITCOUNT = PID_INTSITE.VISITCOUNT;
pub const PID_INTSITE_DESCRIPTION = PID_INTSITE.DESCRIPTION;
pub const PID_INTSITE_COMMENT = PID_INTSITE.COMMENT;
pub const PID_INTSITE_FLAGS = PID_INTSITE.FLAGS;
pub const PID_INTSITE_CONTENTLEN = PID_INTSITE.CONTENTLEN;
pub const PID_INTSITE_CONTENTCODE = PID_INTSITE.CONTENTCODE;
pub const PID_INTSITE_RECURSE = PID_INTSITE.RECURSE;
pub const PID_INTSITE_WATCH = PID_INTSITE.WATCH;
pub const PID_INTSITE_SUBSCRIPTION = PID_INTSITE.SUBSCRIPTION;
pub const PID_INTSITE_URL = PID_INTSITE.URL;
pub const PID_INTSITE_TITLE = PID_INTSITE.TITLE;
pub const PID_INTSITE_CODEPAGE = PID_INTSITE.CODEPAGE;
pub const PID_INTSITE_TRACKING = PID_INTSITE.TRACKING;
pub const PID_INTSITE_ICONINDEX = PID_INTSITE.ICONINDEX;
pub const PID_INTSITE_ICONFILE = PID_INTSITE.ICONFILE;
pub const PID_INTSITE_ROAMED = PID_INTSITE.ROAMED;

pub const PIDISF_FLAGS = enum(i32) {
    RECENTLYCHANGED = 1,
    CACHEDSTICKY = 2,
    CACHEIMAGES = 16,
    FOLLOWALLLINKS = 32,
    _,
    pub fn initFlags(o: struct {
        RECENTLYCHANGED: u1 = 0,
        CACHEDSTICKY: u1 = 0,
        CACHEIMAGES: u1 = 0,
        FOLLOWALLLINKS: u1 = 0,
    }) PIDISF_FLAGS {
        return @as(PIDISF_FLAGS, @enumFromInt((if (o.RECENTLYCHANGED == 1) @intFromEnum(PIDISF_FLAGS.RECENTLYCHANGED) else 0) | (if (o.CACHEDSTICKY == 1) @intFromEnum(PIDISF_FLAGS.CACHEDSTICKY) else 0) | (if (o.CACHEIMAGES == 1) @intFromEnum(PIDISF_FLAGS.CACHEIMAGES) else 0) | (if (o.FOLLOWALLLINKS == 1) @intFromEnum(PIDISF_FLAGS.FOLLOWALLLINKS) else 0)));
    }
};
pub const PIDISF_RECENTLYCHANGED = PIDISF_FLAGS.RECENTLYCHANGED;
pub const PIDISF_CACHEDSTICKY = PIDISF_FLAGS.CACHEDSTICKY;
pub const PIDISF_CACHEIMAGES = PIDISF_FLAGS.CACHEIMAGES;
pub const PIDISF_FOLLOWALLLINKS = PIDISF_FLAGS.FOLLOWALLLINKS;

pub const PIDISM_OPTIONS = enum(i32) {
    GLOBAL = 0,
    WATCH = 1,
    DONTWATCH = 2,
};
pub const PIDISM_GLOBAL = PIDISM_OPTIONS.GLOBAL;
pub const PIDISM_WATCH = PIDISM_OPTIONS.WATCH;
pub const PIDISM_DONTWATCH = PIDISM_OPTIONS.DONTWATCH;

pub const PIDISR_INFO = enum(i32) {
    UP_TO_DATE = 0,
    NEEDS_ADD = 1,
    NEEDS_UPDATE = 2,
    NEEDS_DELETE = 3,
};
pub const PIDISR_UP_TO_DATE = PIDISR_INFO.UP_TO_DATE;
pub const PIDISR_NEEDS_ADD = PIDISR_INFO.NEEDS_ADD;
pub const PIDISR_NEEDS_UPDATE = PIDISR_INFO.NEEDS_UPDATE;
pub const PIDISR_NEEDS_DELETE = PIDISR_INFO.NEEDS_DELETE;

pub const SSF_MASK = enum(u32) {
    SHOWALLOBJECTS = 1,
    SHOWEXTENSIONS = 2,
    HIDDENFILEEXTS = 4,
    // SERVERADMINUI = 4, this enum value conflicts with HIDDENFILEEXTS
    SHOWCOMPCOLOR = 8,
    SORTCOLUMNS = 16,
    SHOWSYSFILES = 32,
    DOUBLECLICKINWEBVIEW = 128,
    SHOWATTRIBCOL = 256,
    DESKTOPHTML = 512,
    WIN95CLASSIC = 1024,
    DONTPRETTYPATH = 2048,
    SHOWINFOTIP = 8192,
    MAPNETDRVBUTTON = 4096,
    NOCONFIRMRECYCLE = 32768,
    HIDEICONS = 16384,
    FILTER = 65536,
    WEBVIEW = 131072,
    SHOWSUPERHIDDEN = 262144,
    SEPPROCESS = 524288,
    NONETCRAWLING = 1048576,
    STARTPANELON = 2097152,
    SHOWSTARTPAGE = 4194304,
    AUTOCHECKSELECT = 8388608,
    ICONSONLY = 16777216,
    SHOWTYPEOVERLAY = 33554432,
    SHOWSTATUSBAR = 67108864,
    _,
    pub fn initFlags(o: struct {
        SHOWALLOBJECTS: u1 = 0,
        SHOWEXTENSIONS: u1 = 0,
        HIDDENFILEEXTS: u1 = 0,
        SHOWCOMPCOLOR: u1 = 0,
        SORTCOLUMNS: u1 = 0,
        SHOWSYSFILES: u1 = 0,
        DOUBLECLICKINWEBVIEW: u1 = 0,
        SHOWATTRIBCOL: u1 = 0,
        DESKTOPHTML: u1 = 0,
        WIN95CLASSIC: u1 = 0,
        DONTPRETTYPATH: u1 = 0,
        SHOWINFOTIP: u1 = 0,
        MAPNETDRVBUTTON: u1 = 0,
        NOCONFIRMRECYCLE: u1 = 0,
        HIDEICONS: u1 = 0,
        FILTER: u1 = 0,
        WEBVIEW: u1 = 0,
        SHOWSUPERHIDDEN: u1 = 0,
        SEPPROCESS: u1 = 0,
        NONETCRAWLING: u1 = 0,
        STARTPANELON: u1 = 0,
        SHOWSTARTPAGE: u1 = 0,
        AUTOCHECKSELECT: u1 = 0,
        ICONSONLY: u1 = 0,
        SHOWTYPEOVERLAY: u1 = 0,
        SHOWSTATUSBAR: u1 = 0,
    }) SSF_MASK {
        return @as(SSF_MASK, @enumFromInt((if (o.SHOWALLOBJECTS == 1) @intFromEnum(SSF_MASK.SHOWALLOBJECTS) else 0) | (if (o.SHOWEXTENSIONS == 1) @intFromEnum(SSF_MASK.SHOWEXTENSIONS) else 0) | (if (o.HIDDENFILEEXTS == 1) @intFromEnum(SSF_MASK.HIDDENFILEEXTS) else 0) | (if (o.SHOWCOMPCOLOR == 1) @intFromEnum(SSF_MASK.SHOWCOMPCOLOR) else 0) | (if (o.SORTCOLUMNS == 1) @intFromEnum(SSF_MASK.SORTCOLUMNS) else 0) | (if (o.SHOWSYSFILES == 1) @intFromEnum(SSF_MASK.SHOWSYSFILES) else 0) | (if (o.DOUBLECLICKINWEBVIEW == 1) @intFromEnum(SSF_MASK.DOUBLECLICKINWEBVIEW) else 0) | (if (o.SHOWATTRIBCOL == 1) @intFromEnum(SSF_MASK.SHOWATTRIBCOL) else 0) | (if (o.DESKTOPHTML == 1) @intFromEnum(SSF_MASK.DESKTOPHTML) else 0) | (if (o.WIN95CLASSIC == 1) @intFromEnum(SSF_MASK.WIN95CLASSIC) else 0) | (if (o.DONTPRETTYPATH == 1) @intFromEnum(SSF_MASK.DONTPRETTYPATH) else 0) | (if (o.SHOWINFOTIP == 1) @intFromEnum(SSF_MASK.SHOWINFOTIP) else 0) | (if (o.MAPNETDRVBUTTON == 1) @intFromEnum(SSF_MASK.MAPNETDRVBUTTON) else 0) | (if (o.NOCONFIRMRECYCLE == 1) @intFromEnum(SSF_MASK.NOCONFIRMRECYCLE) else 0) | (if (o.HIDEICONS == 1) @intFromEnum(SSF_MASK.HIDEICONS) else 0) | (if (o.FILTER == 1) @intFromEnum(SSF_MASK.FILTER) else 0) | (if (o.WEBVIEW == 1) @intFromEnum(SSF_MASK.WEBVIEW) else 0) | (if (o.SHOWSUPERHIDDEN == 1) @intFromEnum(SSF_MASK.SHOWSUPERHIDDEN) else 0) | (if (o.SEPPROCESS == 1) @intFromEnum(SSF_MASK.SEPPROCESS) else 0) | (if (o.NONETCRAWLING == 1) @intFromEnum(SSF_MASK.NONETCRAWLING) else 0) | (if (o.STARTPANELON == 1) @intFromEnum(SSF_MASK.STARTPANELON) else 0) | (if (o.SHOWSTARTPAGE == 1) @intFromEnum(SSF_MASK.SHOWSTARTPAGE) else 0) | (if (o.AUTOCHECKSELECT == 1) @intFromEnum(SSF_MASK.AUTOCHECKSELECT) else 0) | (if (o.ICONSONLY == 1) @intFromEnum(SSF_MASK.ICONSONLY) else 0) | (if (o.SHOWTYPEOVERLAY == 1) @intFromEnum(SSF_MASK.SHOWTYPEOVERLAY) else 0) | (if (o.SHOWSTATUSBAR == 1) @intFromEnum(SSF_MASK.SHOWSTATUSBAR) else 0)));
    }
};
pub const SSF_SHOWALLOBJECTS = SSF_MASK.SHOWALLOBJECTS;
pub const SSF_SHOWEXTENSIONS = SSF_MASK.SHOWEXTENSIONS;
pub const SSF_HIDDENFILEEXTS = SSF_MASK.HIDDENFILEEXTS;
pub const SSF_SERVERADMINUI = SSF_MASK.HIDDENFILEEXTS;
pub const SSF_SHOWCOMPCOLOR = SSF_MASK.SHOWCOMPCOLOR;
pub const SSF_SORTCOLUMNS = SSF_MASK.SORTCOLUMNS;
pub const SSF_SHOWSYSFILES = SSF_MASK.SHOWSYSFILES;
pub const SSF_DOUBLECLICKINWEBVIEW = SSF_MASK.DOUBLECLICKINWEBVIEW;
pub const SSF_SHOWATTRIBCOL = SSF_MASK.SHOWATTRIBCOL;
pub const SSF_DESKTOPHTML = SSF_MASK.DESKTOPHTML;
pub const SSF_WIN95CLASSIC = SSF_MASK.WIN95CLASSIC;
pub const SSF_DONTPRETTYPATH = SSF_MASK.DONTPRETTYPATH;
pub const SSF_SHOWINFOTIP = SSF_MASK.SHOWINFOTIP;
pub const SSF_MAPNETDRVBUTTON = SSF_MASK.MAPNETDRVBUTTON;
pub const SSF_NOCONFIRMRECYCLE = SSF_MASK.NOCONFIRMRECYCLE;
pub const SSF_HIDEICONS = SSF_MASK.HIDEICONS;
pub const SSF_FILTER = SSF_MASK.FILTER;
pub const SSF_WEBVIEW = SSF_MASK.WEBVIEW;
pub const SSF_SHOWSUPERHIDDEN = SSF_MASK.SHOWSUPERHIDDEN;
pub const SSF_SEPPROCESS = SSF_MASK.SEPPROCESS;
pub const SSF_NONETCRAWLING = SSF_MASK.NONETCRAWLING;
pub const SSF_STARTPANELON = SSF_MASK.STARTPANELON;
pub const SSF_SHOWSTARTPAGE = SSF_MASK.SHOWSTARTPAGE;
pub const SSF_AUTOCHECKSELECT = SSF_MASK.AUTOCHECKSELECT;
pub const SSF_ICONSONLY = SSF_MASK.ICONSONLY;
pub const SSF_SHOWTYPEOVERLAY = SSF_MASK.SHOWTYPEOVERLAY;
pub const SSF_SHOWSTATUSBAR = SSF_MASK.SHOWSTATUSBAR;

pub const NOTIFY_ICON_MESSAGE = enum(u32) {
    ADD = 0,
    MODIFY = 1,
    DELETE = 2,
    SETFOCUS = 3,
    SETVERSION = 4,
};
pub const NIM_ADD = NOTIFY_ICON_MESSAGE.ADD;
pub const NIM_MODIFY = NOTIFY_ICON_MESSAGE.MODIFY;
pub const NIM_DELETE = NOTIFY_ICON_MESSAGE.DELETE;
pub const NIM_SETFOCUS = NOTIFY_ICON_MESSAGE.SETFOCUS;
pub const NIM_SETVERSION = NOTIFY_ICON_MESSAGE.SETVERSION;

pub const NOTIFY_ICON_DATA_FLAGS = enum(u32) {
    MESSAGE = 1,
    ICON = 2,
    TIP = 4,
    STATE = 8,
    INFO = 16,
    GUID = 32,
    REALTIME = 64,
    SHOWTIP = 128,
    _,
    pub fn initFlags(o: struct {
        MESSAGE: u1 = 0,
        ICON: u1 = 0,
        TIP: u1 = 0,
        STATE: u1 = 0,
        INFO: u1 = 0,
        GUID: u1 = 0,
        REALTIME: u1 = 0,
        SHOWTIP: u1 = 0,
    }) NOTIFY_ICON_DATA_FLAGS {
        return @as(NOTIFY_ICON_DATA_FLAGS, @enumFromInt((if (o.MESSAGE == 1) @intFromEnum(NOTIFY_ICON_DATA_FLAGS.MESSAGE) else 0) | (if (o.ICON == 1) @intFromEnum(NOTIFY_ICON_DATA_FLAGS.ICON) else 0) | (if (o.TIP == 1) @intFromEnum(NOTIFY_ICON_DATA_FLAGS.TIP) else 0) | (if (o.STATE == 1) @intFromEnum(NOTIFY_ICON_DATA_FLAGS.STATE) else 0) | (if (o.INFO == 1) @intFromEnum(NOTIFY_ICON_DATA_FLAGS.INFO) else 0) | (if (o.GUID == 1) @intFromEnum(NOTIFY_ICON_DATA_FLAGS.GUID) else 0) | (if (o.REALTIME == 1) @intFromEnum(NOTIFY_ICON_DATA_FLAGS.REALTIME) else 0) | (if (o.SHOWTIP == 1) @intFromEnum(NOTIFY_ICON_DATA_FLAGS.SHOWTIP) else 0)));
    }
};
pub const NIF_MESSAGE = NOTIFY_ICON_DATA_FLAGS.MESSAGE;
pub const NIF_ICON = NOTIFY_ICON_DATA_FLAGS.ICON;
pub const NIF_TIP = NOTIFY_ICON_DATA_FLAGS.TIP;
pub const NIF_STATE = NOTIFY_ICON_DATA_FLAGS.STATE;
pub const NIF_INFO = NOTIFY_ICON_DATA_FLAGS.INFO;
pub const NIF_GUID = NOTIFY_ICON_DATA_FLAGS.GUID;
pub const NIF_REALTIME = NOTIFY_ICON_DATA_FLAGS.REALTIME;
pub const NIF_SHOWTIP = NOTIFY_ICON_DATA_FLAGS.SHOWTIP;

pub const OS = enum(u32) {
    WINDOWS = 0,
    NT = 1,
    WIN95ORGREATER = 2,
    NT4ORGREATER = 3,
    WIN98ORGREATER = 5,
    WIN98_GOLD = 6,
    WIN2000ORGREATER = 7,
    WIN2000PRO = 8,
    WIN2000SERVER = 9,
    WIN2000ADVSERVER = 10,
    WIN2000DATACENTER = 11,
    WIN2000TERMINAL = 12,
    EMBEDDED = 13,
    TERMINALCLIENT = 14,
    TERMINALREMOTEADMIN = 15,
    WIN95_GOLD = 16,
    MEORGREATER = 17,
    XPORGREATER = 18,
    HOME = 19,
    PROFESSIONAL = 20,
    DATACENTER = 21,
    ADVSERVER = 22,
    SERVER = 23,
    TERMINALSERVER = 24,
    PERSONALTERMINALSERVER = 25,
    FASTUSERSWITCHING = 26,
    WELCOMELOGONUI = 27,
    DOMAINMEMBER = 28,
    ANYSERVER = 29,
    WOW6432 = 30,
    WEBSERVER = 31,
    SMALLBUSINESSSERVER = 32,
    TABLETPC = 33,
    SERVERADMINUI = 34,
    MEDIACENTER = 35,
    APPLIANCE = 36,
};
pub const OS_WINDOWS = OS.WINDOWS;
pub const OS_NT = OS.NT;
pub const OS_WIN95ORGREATER = OS.WIN95ORGREATER;
pub const OS_NT4ORGREATER = OS.NT4ORGREATER;
pub const OS_WIN98ORGREATER = OS.WIN98ORGREATER;
pub const OS_WIN98_GOLD = OS.WIN98_GOLD;
pub const OS_WIN2000ORGREATER = OS.WIN2000ORGREATER;
pub const OS_WIN2000PRO = OS.WIN2000PRO;
pub const OS_WIN2000SERVER = OS.WIN2000SERVER;
pub const OS_WIN2000ADVSERVER = OS.WIN2000ADVSERVER;
pub const OS_WIN2000DATACENTER = OS.WIN2000DATACENTER;
pub const OS_WIN2000TERMINAL = OS.WIN2000TERMINAL;
pub const OS_EMBEDDED = OS.EMBEDDED;
pub const OS_TERMINALCLIENT = OS.TERMINALCLIENT;
pub const OS_TERMINALREMOTEADMIN = OS.TERMINALREMOTEADMIN;
pub const OS_WIN95_GOLD = OS.WIN95_GOLD;
pub const OS_MEORGREATER = OS.MEORGREATER;
pub const OS_XPORGREATER = OS.XPORGREATER;
pub const OS_HOME = OS.HOME;
pub const OS_PROFESSIONAL = OS.PROFESSIONAL;
pub const OS_DATACENTER = OS.DATACENTER;
pub const OS_ADVSERVER = OS.ADVSERVER;
pub const OS_SERVER = OS.SERVER;
pub const OS_TERMINALSERVER = OS.TERMINALSERVER;
pub const OS_PERSONALTERMINALSERVER = OS.PERSONALTERMINALSERVER;
pub const OS_FASTUSERSWITCHING = OS.FASTUSERSWITCHING;
pub const OS_WELCOMELOGONUI = OS.WELCOMELOGONUI;
pub const OS_DOMAINMEMBER = OS.DOMAINMEMBER;
pub const OS_ANYSERVER = OS.ANYSERVER;
pub const OS_WOW6432 = OS.WOW6432;
pub const OS_WEBSERVER = OS.WEBSERVER;
pub const OS_SMALLBUSINESSSERVER = OS.SMALLBUSINESSSERVER;
pub const OS_TABLETPC = OS.TABLETPC;
pub const OS_SERVERADMINUI = OS.SERVERADMINUI;
pub const OS_MEDIACENTER = OS.MEDIACENTER;
pub const OS_APPLIANCE = OS.APPLIANCE;

pub const _APPSTATE_REGISTRATION = extern struct {
    placeholder: usize, // TODO: why is this type empty?
};

pub const _APPCONSTRAIN_REGISTRATION = extern struct {
    placeholder: usize, // TODO: why is this type empty?
};

// TODO: this type has a FreeFunc 'SHChangeNotification_Unlock', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const ShFindChangeNotificationHandle = isize;

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HDROP = *opaque {};

// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HPSXA = *opaque {};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INotifyReplica_Value = Guid.initString("99180163-da16-101a-935c-444553540000");
pub const IID_INotifyReplica = &IID_INotifyReplica_Value;
pub const INotifyReplica = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        YouAreAReplica: *const fn (
            self: *const INotifyReplica,
            ulc_other_replicas: u32,
            rgpmk_other_replicas: [*]?*IMoniker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn youAreAReplica(self: *const T, ulc_other_replicas_: u32, rgpmk_other_replicas_: [*]?*IMoniker) HRESULT {
                return @as(*const INotifyReplica.VTable, @ptrCast(self.vtable)).YouAreAReplica(@as(*const INotifyReplica, @ptrCast(self)), ulc_other_replicas_, rgpmk_other_replicas_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const APPCATEGORYINFO = extern struct {
    Locale: u32,
    pszDescription: ?PWSTR,
    AppCategoryId: Guid,
};

pub const APPCATEGORYINFOLIST = extern struct {
    cCategory: u32,
    pCategoryInfo: ?*APPCATEGORYINFO,
};

pub const SUBCLASSPROC = *const fn (
    h_wnd: ?HWND,
    u_msg: u32,
    w_param: WPARAM,
    l_param: LPARAM,
    u_id_subclass: usize,
    dw_ref_data: usize,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

pub const HELPINFO = extern struct {
    cbSize: u32,
    iContextType: i32,
    iCtrlId: i32,
    hItemHandle: ?HANDLE,
    dwContextId: usize,
    MousePos: POINT,
};

pub const MULTIKEYHELPA = extern struct {
    mkSize: u32,
    mkKeylist: CHAR,
    szKeyphrase: [1]CHAR,
};

pub const MULTIKEYHELPW = extern struct {
    mkSize: u32,
    mkKeylist: u16,
    szKeyphrase: [1]u16,
};

pub const HELPWININFOA = extern struct {
    wStructSize: i32,
    x: i32,
    y: i32,
    dx: i32,
    dy: i32,
    wMax: i32,
    rgchMember: [2]CHAR,
};

pub const HELPWININFOW = extern struct {
    wStructSize: i32,
    x: i32,
    y: i32,
    dx: i32,
    dy: i32,
    wMax: i32,
    rgchMember: [2]u16,
};

const CLSID_QueryCancelAutoPlay_Value = Guid.initString("331f1768-05a9-4ddd-b86e-dae34ddc998a");
pub const CLSID_QueryCancelAutoPlay = &CLSID_QueryCancelAutoPlay_Value;

const CLSID_TimeCategorizer_Value = Guid.initString("3bb4118f-ddfd-4d30-a348-9fb5d6bf1afe");
pub const CLSID_TimeCategorizer = &CLSID_TimeCategorizer_Value;

const CLSID_AlphabeticalCategorizer_Value = Guid.initString("3c2654c6-7372-4f6b-b310-55d6128f49d2");
pub const CLSID_AlphabeticalCategorizer = &CLSID_AlphabeticalCategorizer_Value;

const CLSID_MergedCategorizer_Value = Guid.initString("8e827c11-33e7-4bc1-b242-8cd9a1c2b304");
pub const CLSID_MergedCategorizer = &CLSID_MergedCategorizer_Value;

const CLSID_ImageProperties_Value = Guid.initString("7ab770c7-0e23-4d7a-8aa2-19bfad479829");
pub const CLSID_ImageProperties = &CLSID_ImageProperties_Value;

const CLSID_CDBurn_Value = Guid.initString("fbeb8a05-beee-4442-804e-409d6c4515e9");
pub const CLSID_CDBurn = &CLSID_CDBurn_Value;

const CLSID_StartMenuPin_Value = Guid.initString("a2a9545d-a0c2-42b4-9708-a0b2badd77c8");
pub const CLSID_StartMenuPin = &CLSID_StartMenuPin_Value;

const CLSID_WebWizardHost_Value = Guid.initString("c827f149-55c1-4d28-935e-57e47caed973");
pub const CLSID_WebWizardHost = &CLSID_WebWizardHost_Value;

const CLSID_PublishDropTarget_Value = Guid.initString("cc6eeffb-43f6-46c5-9619-51d571967f7d");
pub const CLSID_PublishDropTarget = &CLSID_PublishDropTarget_Value;

const CLSID_PublishingWizard_Value = Guid.initString("6b33163c-76a5-4b6c-bf21-45de9cd503a1");
pub const CLSID_PublishingWizard = &CLSID_PublishingWizard_Value;

const CLSID_InternetPrintOrdering_Value = Guid.initString("add36aa8-751a-4579-a266-d66f5202ccbb");
pub const CLSID_InternetPrintOrdering = &CLSID_InternetPrintOrdering_Value;

const CLSID_FolderViewHost_Value = Guid.initString("20b1cb23-6968-4eb9-b7d4-a66d00d07cee");
pub const CLSID_FolderViewHost = &CLSID_FolderViewHost_Value;

const CLSID_ExplorerBrowser_Value = Guid.initString("71f96385-ddd6-48d3-a0c1-ae06e8b055fb");
pub const CLSID_ExplorerBrowser = &CLSID_ExplorerBrowser_Value;

const CLSID_ImageRecompress_Value = Guid.initString("6e33091c-d2f8-4740-b55e-2e11d1477a2c");
pub const CLSID_ImageRecompress = &CLSID_ImageRecompress_Value;

const CLSID_TrayBandSiteService_Value = Guid.initString("f60ad0a0-e5e1-45cb-b51a-e15b9f8b2934");
pub const CLSID_TrayBandSiteService = &CLSID_TrayBandSiteService_Value;

const CLSID_TrayDeskBand_Value = Guid.initString("e6442437-6c68-4f52-94dd-2cfed267efb9");
pub const CLSID_TrayDeskBand = &CLSID_TrayDeskBand_Value;

const CLSID_AttachmentServices_Value = Guid.initString("4125dd96-e03a-4103-8f70-e0597d803b9c");
pub const CLSID_AttachmentServices = &CLSID_AttachmentServices_Value;

const CLSID_DocPropShellExtension_Value = Guid.initString("883373c3-bf89-11d1-be35-080036b11a03");
pub const CLSID_DocPropShellExtension = &CLSID_DocPropShellExtension_Value;

const CLSID_FSCopyHandler_Value = Guid.initString("d197380a-0a79-4dc8-a033-ed882c2fa14b");
pub const CLSID_FSCopyHandler = &CLSID_FSCopyHandler_Value;

const CLSID_PreviousVersions_Value = Guid.initString("596ab062-b4d2-4215-9f74-e9109b0a8153");
pub const CLSID_PreviousVersions = &CLSID_PreviousVersions_Value;

const CLSID_NamespaceTreeControl_Value = Guid.initString("ae054212-3535-4430-83ed-d501aa6680e6");
pub const CLSID_NamespaceTreeControl = &CLSID_NamespaceTreeControl_Value;

const CLSID_IENamespaceTreeControl_Value = Guid.initString("ace52d03-e5cd-4b20-82ff-e71b11beae1d");
pub const CLSID_IENamespaceTreeControl = &CLSID_IENamespaceTreeControl_Value;

const CLSID_ApplicationAssociationRegistrationUI_Value = Guid.initString("1968106d-f3b5-44cf-890e-116fcb9ecef1");
pub const CLSID_ApplicationAssociationRegistrationUI = &CLSID_ApplicationAssociationRegistrationUI_Value;

const CLSID_DesktopGadget_Value = Guid.initString("924ccc1b-6562-4c85-8657-d177925222b6");
pub const CLSID_DesktopGadget = &CLSID_DesktopGadget_Value;

const CLSID_AccessibilityDockingService_Value = Guid.initString("29ce1d46-b481-4aa0-a08a-d3ebc8aca402");
pub const CLSID_AccessibilityDockingService = &CLSID_AccessibilityDockingService_Value;

const CLSID_ExecuteFolder_Value = Guid.initString("11dbb47c-a525-400b-9e80-a54615a090c0");
pub const CLSID_ExecuteFolder = &CLSID_ExecuteFolder_Value;

const CLSID_VirtualDesktopManager_Value = Guid.initString("aa509086-5ca9-4c25-8f95-589d3c07b48a");
pub const CLSID_VirtualDesktopManager = &CLSID_VirtualDesktopManager_Value;

const CLSID_StorageProviderBanners_Value = Guid.initString("7ccdf9f4-e576-455a-8bc7-f6ec68d6f063");
pub const CLSID_StorageProviderBanners = &CLSID_StorageProviderBanners_Value;

const CLSID_DesktopWallpaper_Value = Guid.initString("c2cf3110-460e-4fc1-b9d0-8a1c0c9cc4bd");
pub const CLSID_DesktopWallpaper = &CLSID_DesktopWallpaper_Value;

const CLSID_ShellDesktop_Value = Guid.initString("00021400-0000-0000-c000-000000000046");
pub const CLSID_ShellDesktop = &CLSID_ShellDesktop_Value;

const CLSID_ShellFSFolder_Value = Guid.initString("f3364ba0-65b9-11ce-a9ba-00aa004ae837");
pub const CLSID_ShellFSFolder = &CLSID_ShellFSFolder_Value;

const CLSID_NetworkPlaces_Value = Guid.initString("208d2c60-3aea-1069-a2d7-08002b30309d");
pub const CLSID_NetworkPlaces = &CLSID_NetworkPlaces_Value;

const CLSID_ShellLink_Value = Guid.initString("00021401-0000-0000-c000-000000000046");
pub const CLSID_ShellLink = &CLSID_ShellLink_Value;

const CLSID_DriveSizeCategorizer_Value = Guid.initString("94357b53-ca29-4b78-83ae-e8fe7409134f");
pub const CLSID_DriveSizeCategorizer = &CLSID_DriveSizeCategorizer_Value;

const CLSID_DriveTypeCategorizer_Value = Guid.initString("b0a8f3cf-4333-4bab-8873-1ccb1cada48b");
pub const CLSID_DriveTypeCategorizer = &CLSID_DriveTypeCategorizer_Value;

const CLSID_FreeSpaceCategorizer_Value = Guid.initString("b5607793-24ac-44c7-82e2-831726aa6cb7");
pub const CLSID_FreeSpaceCategorizer = &CLSID_FreeSpaceCategorizer_Value;

const CLSID_SizeCategorizer_Value = Guid.initString("55d7b852-f6d1-42f2-aa75-8728a1b2d264");
pub const CLSID_SizeCategorizer = &CLSID_SizeCategorizer_Value;

const CLSID_PropertiesUI_Value = Guid.initString("d912f8cf-0396-4915-884e-fb425d32943b");
pub const CLSID_PropertiesUI = &CLSID_PropertiesUI_Value;

const CLSID_UserNotification_Value = Guid.initString("0010890e-8789-413c-adbc-48f5b511b3af");
pub const CLSID_UserNotification = &CLSID_UserNotification_Value;

const CLSID_TaskbarList_Value = Guid.initString("56fdf344-fd6d-11d0-958a-006097c9a090");
pub const CLSID_TaskbarList = &CLSID_TaskbarList_Value;

const CLSID_ShellItem_Value = Guid.initString("9ac9fbe1-e0a2-4ad6-b4ee-e212013ea917");
pub const CLSID_ShellItem = &CLSID_ShellItem_Value;

const CLSID_NamespaceWalker_Value = Guid.initString("72eb61e0-8672-4303-9175-f2e4c68b2e7c");
pub const CLSID_NamespaceWalker = &CLSID_NamespaceWalker_Value;

const CLSID_FileOperation_Value = Guid.initString("3ad05575-8857-4850-9277-11b85bdb8e09");
pub const CLSID_FileOperation = &CLSID_FileOperation_Value;

const CLSID_FileOpenDialog_Value = Guid.initString("dc1c5a9c-e88a-4dde-a5a1-60f82a20aef7");
pub const CLSID_FileOpenDialog = &CLSID_FileOpenDialog_Value;

const CLSID_FileSaveDialog_Value = Guid.initString("c0b4e2f3-ba21-4773-8dba-335ec946eb8b");
pub const CLSID_FileSaveDialog = &CLSID_FileSaveDialog_Value;

const CLSID_KnownFolderManager_Value = Guid.initString("4df0c730-df9d-4ae3-9153-aa6b82e9795a");
pub const CLSID_KnownFolderManager = &CLSID_KnownFolderManager_Value;

const CLSID_SharingConfigurationManager_Value = Guid.initString("49f371e1-8c5c-4d9c-9a3b-54a6827f513c");
pub const CLSID_SharingConfigurationManager = &CLSID_SharingConfigurationManager_Value;

const CLSID_NetworkConnections_Value = Guid.initString("7007acc7-3202-11d1-aad2-00805fc1270e");
pub const CLSID_NetworkConnections = &CLSID_NetworkConnections_Value;

const CLSID_ScheduledTasks_Value = Guid.initString("d6277990-4c6a-11cf-8d87-00aa0060f5bf");
pub const CLSID_ScheduledTasks = &CLSID_ScheduledTasks_Value;

const CLSID_ApplicationAssociationRegistration_Value = Guid.initString("591209c7-767b-42b2-9fba-44ee4615f2c7");
pub const CLSID_ApplicationAssociationRegistration = &CLSID_ApplicationAssociationRegistration_Value;

const CLSID_SearchFolderItemFactory_Value = Guid.initString("14010e02-bbbd-41f0-88e3-eda371216584");
pub const CLSID_SearchFolderItemFactory = &CLSID_SearchFolderItemFactory_Value;

const CLSID_OpenControlPanel_Value = Guid.initString("06622d85-6856-4460-8de1-a81921b41c4b");
pub const CLSID_OpenControlPanel = &CLSID_OpenControlPanel_Value;

const CLSID_MailRecipient_Value = Guid.initString("9e56be60-c50f-11cf-9a2c-00a0c90a90ce");
pub const CLSID_MailRecipient = &CLSID_MailRecipient_Value;

const CLSID_NetworkExplorerFolder_Value = Guid.initString("f02c1a0d-be21-4350-88b0-7367fc96ef3c");
pub const CLSID_NetworkExplorerFolder = &CLSID_NetworkExplorerFolder_Value;

const CLSID_DestinationList_Value = Guid.initString("77f10cf0-3db5-4966-b520-b7c54fd35ed6");
pub const CLSID_DestinationList = &CLSID_DestinationList_Value;

const CLSID_ApplicationDestinations_Value = Guid.initString("86c14003-4d6b-4ef3-a7b4-0506663b2e68");
pub const CLSID_ApplicationDestinations = &CLSID_ApplicationDestinations_Value;

const CLSID_ApplicationDocumentLists_Value = Guid.initString("86bec222-30f2-47e0-9f25-60d11cd75c28");
pub const CLSID_ApplicationDocumentLists = &CLSID_ApplicationDocumentLists_Value;

const CLSID_HomeGroup_Value = Guid.initString("de77ba04-3c92-4d11-a1a5-42352a53e0e3");
pub const CLSID_HomeGroup = &CLSID_HomeGroup_Value;

const CLSID_ShellLibrary_Value = Guid.initString("d9b3211d-e57f-4426-aaef-30a806add397");
pub const CLSID_ShellLibrary = &CLSID_ShellLibrary_Value;

const CLSID_AppStartupLink_Value = Guid.initString("273eb5e7-88b0-4843-bfef-e2c81d43aae5");
pub const CLSID_AppStartupLink = &CLSID_AppStartupLink_Value;

const CLSID_EnumerableObjectCollection_Value = Guid.initString("2d3468c1-36a7-43b6-ac24-d3f02fd9607a");
pub const CLSID_EnumerableObjectCollection = &CLSID_EnumerableObjectCollection_Value;

const CLSID_FrameworkInputPane_Value = Guid.initString("d5120aa3-46ba-44c5-822d-ca8092c1fc72");
pub const CLSID_FrameworkInputPane = &CLSID_FrameworkInputPane_Value;

const CLSID_DefFolderMenu_Value = Guid.initString("c63382be-7933-48d0-9ac8-85fb46be2fdd");
pub const CLSID_DefFolderMenu = &CLSID_DefFolderMenu_Value;

const CLSID_AppVisibility_Value = Guid.initString("7e5fe3d9-985f-4908-91f9-ee19f9fd1514");
pub const CLSID_AppVisibility = &CLSID_AppVisibility_Value;

const CLSID_AppShellVerbHandler_Value = Guid.initString("4ed3a719-cea8-4bd9-910d-e252f997afc2");
pub const CLSID_AppShellVerbHandler = &CLSID_AppShellVerbHandler_Value;

const CLSID_ExecuteUnknown_Value = Guid.initString("e44e9428-bdbc-4987-a099-40dc8fd255e7");
pub const CLSID_ExecuteUnknown = &CLSID_ExecuteUnknown_Value;

const CLSID_PackageDebugSettings_Value = Guid.initString("b1aec16f-2383-4852-b0e9-8f0b1dc66b4d");
pub const CLSID_PackageDebugSettings = &CLSID_PackageDebugSettings_Value;

const CLSID_SuspensionDependencyManager_Value = Guid.initString("6b273fc5-61fd-4918-95a2-c3b5e9d7f581");
pub const CLSID_SuspensionDependencyManager = &CLSID_SuspensionDependencyManager_Value;

const CLSID_ApplicationActivationManager_Value = Guid.initString("45ba127d-10a8-46ea-8ab7-56ea9078943c");
pub const CLSID_ApplicationActivationManager = &CLSID_ApplicationActivationManager_Value;

const CLSID_ApplicationDesignModeSettings_Value = Guid.initString("958a6fb5-dcb2-4faf-aafd-7fb054ad1a3b");
pub const CLSID_ApplicationDesignModeSettings = &CLSID_ApplicationDesignModeSettings_Value;

pub const CMINVOKECOMMANDINFO = extern struct {
    cbSize: u32,
    fMask: u32,
    hwnd: ?HWND,
    lpVerb: ?[*:0]const u8,
    lpParameters: ?[*:0]const u8,
    lpDirectory: ?[*:0]const u8,
    nShow: i32,
    dwHotKey: u32,
    hIcon: ?HANDLE,
};

pub const CMINVOKECOMMANDINFOEX = extern struct {
    cbSize: u32,
    fMask: u32,
    hwnd: ?HWND,
    lpVerb: ?[*:0]const u8,
    lpParameters: ?[*:0]const u8,
    lpDirectory: ?[*:0]const u8,
    nShow: i32,
    dwHotKey: u32,
    hIcon: ?HANDLE,
    lpTitle: ?[*:0]const u8,
    lpVerbW: ?[*:0]const u16,
    lpParametersW: ?[*:0]const u16,
    lpDirectoryW: ?[*:0]const u16,
    lpTitleW: ?[*:0]const u16,
    ptInvoke: POINT,
};

pub const CMINVOKECOMMANDINFOEX_REMOTE = extern struct {
    cbSize: u32,
    fMask: u32,
    hwnd: ?HWND,
    lpVerbString: ?[*:0]const u8,
    lpParameters: ?[*:0]const u8,
    lpDirectory: ?[*:0]const u8,
    nShow: i32,
    dwHotKey: u32,
    lpTitle: ?[*:0]const u8,
    lpVerbWString: ?[*:0]const u16,
    lpParametersW: ?[*:0]const u16,
    lpDirectoryW: ?[*:0]const u16,
    lpTitleW: ?[*:0]const u16,
    ptInvoke: POINT,
    lpVerbInt: u32,
    lpVerbWInt: u32,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IContextMenu_Value = Guid.initString("000214e4-0000-0000-c000-000000000046");
pub const IID_IContextMenu = &IID_IContextMenu_Value;
pub const IContextMenu = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryContextMenu: *const fn (
            self: *const IContextMenu,
            hmenu: ?HMENU,
            index_menu: u32,
            id_cmd_first: u32,
            id_cmd_last: u32,
            u_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeCommand: *const fn (
            self: *const IContextMenu,
            pici: ?*CMINVOKECOMMANDINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCommandString: *const fn (
            self: *const IContextMenu,
            id_cmd: usize,
            u_type: u32,
            p_reserved: ?*u32,
            psz_name: ?PSTR,
            cch_max: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn queryContextMenu(self: *const T, hmenu_: ?HMENU, index_menu_: u32, id_cmd_first_: u32, id_cmd_last_: u32, u_flags_: u32) HRESULT {
                return @as(*const IContextMenu.VTable, @ptrCast(self.vtable)).QueryContextMenu(@as(*const IContextMenu, @ptrCast(self)), hmenu_, index_menu_, id_cmd_first_, id_cmd_last_, u_flags_);
            }
            pub inline fn invokeCommand(self: *const T, pici_: ?*CMINVOKECOMMANDINFO) HRESULT {
                return @as(*const IContextMenu.VTable, @ptrCast(self.vtable)).InvokeCommand(@as(*const IContextMenu, @ptrCast(self)), pici_);
            }
            pub inline fn getCommandString(self: *const T, id_cmd_: usize, u_type_: u32, p_reserved_: ?*u32, psz_name_: ?PSTR, cch_max_: u32) HRESULT {
                return @as(*const IContextMenu.VTable, @ptrCast(self.vtable)).GetCommandString(@as(*const IContextMenu, @ptrCast(self)), id_cmd_, u_type_, p_reserved_, psz_name_, cch_max_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IContextMenu2_Value = Guid.initString("000214f4-0000-0000-c000-000000000046");
pub const IID_IContextMenu2 = &IID_IContextMenu2_Value;
pub const IContextMenu2 = extern struct {
    pub const VTable = extern struct {
        base: IContextMenu.VTable,
        HandleMenuMsg: *const fn (
            self: *const IContextMenu2,
            u_msg: u32,
            w_param: WPARAM,
            l_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IContextMenu.MethodMixin(T);
            pub inline fn handleMenuMsg(self: *const T, u_msg_: u32, w_param_: WPARAM, l_param_: LPARAM) HRESULT {
                return @as(*const IContextMenu2.VTable, @ptrCast(self.vtable)).HandleMenuMsg(@as(*const IContextMenu2, @ptrCast(self)), u_msg_, w_param_, l_param_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IContextMenu3_Value = Guid.initString("bcfce0a0-ec17-11d0-8d10-00a0c90f2719");
pub const IID_IContextMenu3 = &IID_IContextMenu3_Value;
pub const IContextMenu3 = extern struct {
    pub const VTable = extern struct {
        base: IContextMenu2.VTable,
        HandleMenuMsg2: *const fn (
            self: *const IContextMenu3,
            u_msg: u32,
            w_param: WPARAM,
            l_param: LPARAM,
            pl_result: ?*LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IContextMenu2.MethodMixin(T);
            pub inline fn handleMenuMsg2(self: *const T, u_msg_: u32, w_param_: WPARAM, l_param_: LPARAM, pl_result_: ?*LRESULT) HRESULT {
                return @as(*const IContextMenu3.VTable, @ptrCast(self.vtable)).HandleMenuMsg2(@as(*const IContextMenu3, @ptrCast(self)), u_msg_, w_param_, l_param_, pl_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IExecuteCommand_Value = Guid.initString("7f9185b0-cb92-43c5-80a9-92277a4f7b54");
pub const IID_IExecuteCommand = &IID_IExecuteCommand_Value;
pub const IExecuteCommand = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetKeyState: *const fn (
            self: *const IExecuteCommand,
            grf_key_state: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetParameters: *const fn (
            self: *const IExecuteCommand,
            psz_parameters: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPosition: *const fn (
            self: *const IExecuteCommand,
            pt: POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetShowWindow: *const fn (
            self: *const IExecuteCommand,
            n_show: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNoShowUI: *const fn (
            self: *const IExecuteCommand,
            f_no_show_u_i: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDirectory: *const fn (
            self: *const IExecuteCommand,
            psz_directory: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Execute: *const fn (
            self: *const IExecuteCommand,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setKeyState(self: *const T, grf_key_state_: u32) HRESULT {
                return @as(*const IExecuteCommand.VTable, @ptrCast(self.vtable)).SetKeyState(@as(*const IExecuteCommand, @ptrCast(self)), grf_key_state_);
            }
            pub inline fn setParameters(self: *const T, psz_parameters_: ?[*:0]const u16) HRESULT {
                return @as(*const IExecuteCommand.VTable, @ptrCast(self.vtable)).SetParameters(@as(*const IExecuteCommand, @ptrCast(self)), psz_parameters_);
            }
            pub inline fn setPosition(self: *const T, pt_: POINT) HRESULT {
                return @as(*const IExecuteCommand.VTable, @ptrCast(self.vtable)).SetPosition(@as(*const IExecuteCommand, @ptrCast(self)), pt_);
            }
            pub inline fn setShowWindow(self: *const T, n_show_: i32) HRESULT {
                return @as(*const IExecuteCommand.VTable, @ptrCast(self.vtable)).SetShowWindow(@as(*const IExecuteCommand, @ptrCast(self)), n_show_);
            }
            pub inline fn setNoShowUI(self: *const T, f_no_show_u_i_: BOOL) HRESULT {
                return @as(*const IExecuteCommand.VTable, @ptrCast(self.vtable)).SetNoShowUI(@as(*const IExecuteCommand, @ptrCast(self)), f_no_show_u_i_);
            }
            pub inline fn setDirectory(self: *const T, psz_directory_: ?[*:0]const u16) HRESULT {
                return @as(*const IExecuteCommand.VTable, @ptrCast(self.vtable)).SetDirectory(@as(*const IExecuteCommand, @ptrCast(self)), psz_directory_);
            }
            pub inline fn execute(self: *const T) HRESULT {
                return @as(*const IExecuteCommand.VTable, @ptrCast(self.vtable)).Execute(@as(*const IExecuteCommand, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IPersistFolder_Value = Guid.initString("000214ea-0000-0000-c000-000000000046");
pub const IID_IPersistFolder = &IID_IPersistFolder_Value;
pub const IPersistFolder = extern struct {
    pub const VTable = extern struct {
        base: IPersist.VTable,
        Initialize: *const fn (
            self: *const IPersistFolder,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPersist.MethodMixin(T);
            pub inline fn initialize(self: *const T, pidl_: ?*ITEMIDLIST) HRESULT {
                return @as(*const IPersistFolder.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IPersistFolder, @ptrCast(self)), pidl_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IRunnableTask_Value = Guid.initString("85788d00-6807-11d0-b810-00c04fd706ec");
pub const IID_IRunnableTask = &IID_IRunnableTask_Value;
pub const IRunnableTask = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Run: *const fn (
            self: *const IRunnableTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Kill: *const fn (
            self: *const IRunnableTask,
            b_wait: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Suspend: *const fn (
            self: *const IRunnableTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: *const fn (
            self: *const IRunnableTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRunning: *const fn (
            self: *const IRunnableTask,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn run(self: *const T) HRESULT {
                return @as(*const IRunnableTask.VTable, @ptrCast(self.vtable)).Run(@as(*const IRunnableTask, @ptrCast(self)));
            }
            pub inline fn kill(self: *const T, b_wait_: BOOL) HRESULT {
                return @as(*const IRunnableTask.VTable, @ptrCast(self.vtable)).Kill(@as(*const IRunnableTask, @ptrCast(self)), b_wait_);
            }
            pub inline fn @"suspend"(self: *const T) HRESULT {
                return @as(*const IRunnableTask.VTable, @ptrCast(self.vtable)).Suspend(@as(*const IRunnableTask, @ptrCast(self)));
            }
            pub inline fn @"resume"(self: *const T) HRESULT {
                return @as(*const IRunnableTask.VTable, @ptrCast(self.vtable)).Resume(@as(*const IRunnableTask, @ptrCast(self)));
            }
            pub inline fn isRunning(self: *const T) u32 {
                return @as(*const IRunnableTask.VTable, @ptrCast(self.vtable)).IsRunning(@as(*const IRunnableTask, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellTaskScheduler_Value = Guid.initString("6ccb7be0-6807-11d0-b810-00c04fd706ec");
pub const IID_IShellTaskScheduler = &IID_IShellTaskScheduler_Value;
pub const IShellTaskScheduler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddTask: *const fn (
            self: *const IShellTaskScheduler,
            prt: ?*IRunnableTask,
            rtoid: ?*const Guid,
            l_param: usize,
            dw_priority: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveTasks: *const fn (
            self: *const IShellTaskScheduler,
            rtoid: ?*const Guid,
            l_param: usize,
            b_wait_if_running: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CountTasks: *const fn (
            self: *const IShellTaskScheduler,
            rtoid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        Status: *const fn (
            self: *const IShellTaskScheduler,
            dw_release_status: u32,
            dw_thread_timeout: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addTask(self: *const T, prt_: ?*IRunnableTask, rtoid_: ?*const Guid, l_param_: usize, dw_priority_: u32) HRESULT {
                return @as(*const IShellTaskScheduler.VTable, @ptrCast(self.vtable)).AddTask(@as(*const IShellTaskScheduler, @ptrCast(self)), prt_, rtoid_, l_param_, dw_priority_);
            }
            pub inline fn removeTasks(self: *const T, rtoid_: ?*const Guid, l_param_: usize, b_wait_if_running_: BOOL) HRESULT {
                return @as(*const IShellTaskScheduler.VTable, @ptrCast(self.vtable)).RemoveTasks(@as(*const IShellTaskScheduler, @ptrCast(self)), rtoid_, l_param_, b_wait_if_running_);
            }
            pub inline fn countTasks(self: *const T, rtoid_: ?*const Guid) u32 {
                return @as(*const IShellTaskScheduler.VTable, @ptrCast(self.vtable)).CountTasks(@as(*const IShellTaskScheduler, @ptrCast(self)), rtoid_);
            }
            pub inline fn status(self: *const T, dw_release_status_: u32, dw_thread_timeout_: u32) HRESULT {
                return @as(*const IShellTaskScheduler.VTable, @ptrCast(self.vtable)).Status(@as(*const IShellTaskScheduler, @ptrCast(self)), dw_release_status_, dw_thread_timeout_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IPersistFolder2_Value = Guid.initString("1ac3d9f0-175c-11d1-95be-00609797ea4f");
pub const IID_IPersistFolder2 = &IID_IPersistFolder2_Value;
pub const IPersistFolder2 = extern struct {
    pub const VTable = extern struct {
        base: IPersistFolder.VTable,
        GetCurFolder: *const fn (
            self: *const IPersistFolder2,
            ppidl: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPersistFolder.MethodMixin(T);
            pub inline fn getCurFolder(self: *const T, ppidl_: ?*?*ITEMIDLIST) HRESULT {
                return @as(*const IPersistFolder2.VTable, @ptrCast(self.vtable)).GetCurFolder(@as(*const IPersistFolder2, @ptrCast(self)), ppidl_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PERSIST_FOLDER_TARGET_INFO = extern struct {
    pidlTargetFolder: ?*ITEMIDLIST,
    szTargetParsingName: [260]u16,
    szNetworkProvider: [260]u16,
    dwAttributes: u32,
    csidl: i32,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IPersistFolder3_Value = Guid.initString("cef04fdf-fe72-11d2-87a5-00c04f6837cf");
pub const IID_IPersistFolder3 = &IID_IPersistFolder3_Value;
pub const IPersistFolder3 = extern struct {
    pub const VTable = extern struct {
        base: IPersistFolder2.VTable,
        InitializeEx: *const fn (
            self: *const IPersistFolder3,
            pbc: ?*IBindCtx,
            pidl_root: ?*ITEMIDLIST,
            ppfti: ?*const PERSIST_FOLDER_TARGET_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderTargetInfo: *const fn (
            self: *const IPersistFolder3,
            ppfti: ?*PERSIST_FOLDER_TARGET_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPersistFolder2.MethodMixin(T);
            pub inline fn initializeEx(self: *const T, pbc_: ?*IBindCtx, pidl_root_: ?*ITEMIDLIST, ppfti_: ?*const PERSIST_FOLDER_TARGET_INFO) HRESULT {
                return @as(*const IPersistFolder3.VTable, @ptrCast(self.vtable)).InitializeEx(@as(*const IPersistFolder3, @ptrCast(self)), pbc_, pidl_root_, ppfti_);
            }
            pub inline fn getFolderTargetInfo(self: *const T, ppfti_: ?*PERSIST_FOLDER_TARGET_INFO) HRESULT {
                return @as(*const IPersistFolder3.VTable, @ptrCast(self.vtable)).GetFolderTargetInfo(@as(*const IPersistFolder3, @ptrCast(self)), ppfti_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IPersistIDList_Value = Guid.initString("1079acfc-29bd-11d3-8e0d-00c04f6837d5");
pub const IID_IPersistIDList = &IID_IPersistIDList_Value;
pub const IPersistIDList = extern struct {
    pub const VTable = extern struct {
        base: IPersist.VTable,
        SetIDList: *const fn (
            self: *const IPersistIDList,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDList: *const fn (
            self: *const IPersistIDList,
            ppidl: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPersist.MethodMixin(T);
            pub inline fn setIDList(self: *const T, pidl_: ?*ITEMIDLIST) HRESULT {
                return @as(*const IPersistIDList.VTable, @ptrCast(self.vtable)).SetIDList(@as(*const IPersistIDList, @ptrCast(self)), pidl_);
            }
            pub inline fn getIDList(self: *const T, ppidl_: ?*?*ITEMIDLIST) HRESULT {
                return @as(*const IPersistIDList.VTable, @ptrCast(self.vtable)).GetIDList(@as(*const IPersistIDList, @ptrCast(self)), ppidl_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnumIDList_Value = Guid.initString("000214f2-0000-0000-c000-000000000046");
pub const IID_IEnumIDList = &IID_IEnumIDList_Value;
pub const IEnumIDList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumIDList,
            celt: u32,
            rgelt: [*]?*ITEMIDLIST,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumIDList,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumIDList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumIDList,
            ppenum: ?*?*IEnumIDList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: [*]?*ITEMIDLIST, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumIDList.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumIDList, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumIDList.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumIDList, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumIDList.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumIDList, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumIDList) HRESULT {
                return @as(*const IEnumIDList.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumIDList, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumFullIDList_Value = Guid.initString("d0191542-7954-4908-bc06-b2360bbe45ba");
pub const IID_IEnumFullIDList = &IID_IEnumFullIDList_Value;
pub const IEnumFullIDList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumFullIDList,
            celt: u32,
            rgelt: [*]?*ITEMIDLIST,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumFullIDList,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumFullIDList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumFullIDList,
            ppenum: ?*?*IEnumFullIDList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: [*]?*ITEMIDLIST, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumFullIDList.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumFullIDList, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumFullIDList.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumFullIDList, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumFullIDList.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumFullIDList, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumFullIDList) HRESULT {
                return @as(*const IEnumFullIDList.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumFullIDList, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const _SHGDNF = enum(i32) {
    NORMAL = 0,
    INFOLDER = 1,
    FOREDITING = 4096,
    FORADDRESSBAR = 16384,
    FORPARSING = 32768,
};
pub const SHGDN_NORMAL = _SHGDNF.NORMAL;
pub const SHGDN_INFOLDER = _SHGDNF.INFOLDER;
pub const SHGDN_FOREDITING = _SHGDNF.FOREDITING;
pub const SHGDN_FORADDRESSBAR = _SHGDNF.FORADDRESSBAR;
pub const SHGDN_FORPARSING = _SHGDNF.FORPARSING;

pub const _SHCONTF = enum(i32) {
    CHECKING_FOR_CHILDREN = 16,
    FOLDERS = 32,
    NONFOLDERS = 64,
    INCLUDEHIDDEN = 128,
    INIT_ON_FIRST_NEXT = 256,
    NETPRINTERSRCH = 512,
    SHAREABLE = 1024,
    STORAGE = 2048,
    NAVIGATION_ENUM = 4096,
    FASTITEMS = 8192,
    FLATLIST = 16384,
    ENABLE_ASYNC = 32768,
    INCLUDESUPERHIDDEN = 65536,
};
pub const SHCONTF_CHECKING_FOR_CHILDREN = _SHCONTF.CHECKING_FOR_CHILDREN;
pub const SHCONTF_FOLDERS = _SHCONTF.FOLDERS;
pub const SHCONTF_NONFOLDERS = _SHCONTF.NONFOLDERS;
pub const SHCONTF_INCLUDEHIDDEN = _SHCONTF.INCLUDEHIDDEN;
pub const SHCONTF_INIT_ON_FIRST_NEXT = _SHCONTF.INIT_ON_FIRST_NEXT;
pub const SHCONTF_NETPRINTERSRCH = _SHCONTF.NETPRINTERSRCH;
pub const SHCONTF_SHAREABLE = _SHCONTF.SHAREABLE;
pub const SHCONTF_STORAGE = _SHCONTF.STORAGE;
pub const SHCONTF_NAVIGATION_ENUM = _SHCONTF.NAVIGATION_ENUM;
pub const SHCONTF_FASTITEMS = _SHCONTF.FASTITEMS;
pub const SHCONTF_FLATLIST = _SHCONTF.FLATLIST;
pub const SHCONTF_ENABLE_ASYNC = _SHCONTF.ENABLE_ASYNC;
pub const SHCONTF_INCLUDESUPERHIDDEN = _SHCONTF.INCLUDESUPERHIDDEN;

pub const STORAGE_PROVIDER_FILE_FLAGS = enum(i32) {
    NONE = 0,
    DOWNLOAD_BY_DEFAULT = 1,
    CREATED_ON_THIS_DEVICE = 2,
};
pub const SPFF_NONE = STORAGE_PROVIDER_FILE_FLAGS.NONE;
pub const SPFF_DOWNLOAD_BY_DEFAULT = STORAGE_PROVIDER_FILE_FLAGS.DOWNLOAD_BY_DEFAULT;
pub const SPFF_CREATED_ON_THIS_DEVICE = STORAGE_PROVIDER_FILE_FLAGS.CREATED_ON_THIS_DEVICE;

pub const MERGE_UPDATE_STATUS = enum(i32) {
    COMPLETE = 0,
    USERINPUTNEEDED = 1,
    FAILED = 2,
};
pub const MUS_COMPLETE = MERGE_UPDATE_STATUS.COMPLETE;
pub const MUS_USERINPUTNEEDED = MERGE_UPDATE_STATUS.USERINPUTNEEDED;
pub const MUS_FAILED = MERGE_UPDATE_STATUS.FAILED;

// TODO: this type is limited to platform 'windows8.1'
const IID_IFileSyncMergeHandler_Value = Guid.initString("d97b5aac-c792-433c-975d-35c4eadc7a9d");
pub const IID_IFileSyncMergeHandler = &IID_IFileSyncMergeHandler_Value;
pub const IFileSyncMergeHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Merge: *const fn (
            self: *const IFileSyncMergeHandler,
            local_file_path: ?[*:0]const u16,
            server_file_path: ?[*:0]const u16,
            update_status: ?*MERGE_UPDATE_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowResolveConflictUIAsync: *const fn (
            self: *const IFileSyncMergeHandler,
            local_file_path: ?[*:0]const u16,
            monitor_to_display_on: ?HMONITOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn merge(self: *const T, local_file_path_: ?[*:0]const u16, server_file_path_: ?[*:0]const u16, update_status_: ?*MERGE_UPDATE_STATUS) HRESULT {
                return @as(*const IFileSyncMergeHandler.VTable, @ptrCast(self.vtable)).Merge(@as(*const IFileSyncMergeHandler, @ptrCast(self)), local_file_path_, server_file_path_, update_status_);
            }
            pub inline fn showResolveConflictUIAsync(self: *const T, local_file_path_: ?[*:0]const u16, monitor_to_display_on_: ?HMONITOR) HRESULT {
                return @as(*const IFileSyncMergeHandler.VTable, @ptrCast(self.vtable)).ShowResolveConflictUIAsync(@as(*const IFileSyncMergeHandler, @ptrCast(self)), local_file_path_, monitor_to_display_on_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FOLDER_ENUM_MODE = enum(i32) {
    VIEWRESULT = 0,
    NAVIGATION = 1,
};
pub const FEM_VIEWRESULT = FOLDER_ENUM_MODE.VIEWRESULT;
pub const FEM_NAVIGATION = FOLDER_ENUM_MODE.NAVIGATION;

// TODO: this type is limited to platform 'windows6.1'
const IID_IObjectWithFolderEnumMode_Value = Guid.initString("6a9d9026-0e6e-464c-b000-42ecc07de673");
pub const IID_IObjectWithFolderEnumMode = &IID_IObjectWithFolderEnumMode_Value;
pub const IObjectWithFolderEnumMode = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetMode: *const fn (
            self: *const IObjectWithFolderEnumMode,
            fe_mode: FOLDER_ENUM_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMode: *const fn (
            self: *const IObjectWithFolderEnumMode,
            pfe_mode: ?*FOLDER_ENUM_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setMode(self: *const T, fe_mode_: FOLDER_ENUM_MODE) HRESULT {
                return @as(*const IObjectWithFolderEnumMode.VTable, @ptrCast(self.vtable)).SetMode(@as(*const IObjectWithFolderEnumMode, @ptrCast(self)), fe_mode_);
            }
            pub inline fn getMode(self: *const T, pfe_mode_: ?*FOLDER_ENUM_MODE) HRESULT {
                return @as(*const IObjectWithFolderEnumMode.VTable, @ptrCast(self.vtable)).GetMode(@as(*const IObjectWithFolderEnumMode, @ptrCast(self)), pfe_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IParseAndCreateItem_Value = Guid.initString("67efed0e-e827-4408-b493-78f3982b685c");
pub const IID_IParseAndCreateItem = &IID_IParseAndCreateItem_Value;
pub const IParseAndCreateItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetItem: *const fn (
            self: *const IParseAndCreateItem,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItem: *const fn (
            self: *const IParseAndCreateItem,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setItem(self: *const T, psi_: ?*IShellItem) HRESULT {
                return @as(*const IParseAndCreateItem.VTable, @ptrCast(self.vtable)).SetItem(@as(*const IParseAndCreateItem, @ptrCast(self)), psi_);
            }
            pub inline fn getItem(self: *const T, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IParseAndCreateItem.VTable, @ptrCast(self.vtable)).GetItem(@as(*const IParseAndCreateItem, @ptrCast(self)), riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellFolder_Value = Guid.initString("000214e6-0000-0000-c000-000000000046");
pub const IID_IShellFolder = &IID_IShellFolder_Value;
pub const IShellFolder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ParseDisplayName: *const fn (
            self: *const IShellFolder,
            hwnd: ?HWND,
            pbc: ?*IBindCtx,
            psz_display_name: ?PWSTR,
            pch_eaten: ?*u32,
            ppidl: ?*?*ITEMIDLIST,
            pdw_attributes: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumObjects: *const fn (
            self: *const IShellFolder,
            hwnd: ?HWND,
            grf_flags: u32,
            ppenum_i_d_list: ?*?*IEnumIDList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindToObject: *const fn (
            self: *const IShellFolder,
            pidl: ?*ITEMIDLIST,
            pbc: ?*IBindCtx,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindToStorage: *const fn (
            self: *const IShellFolder,
            pidl: ?*ITEMIDLIST,
            pbc: ?*IBindCtx,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompareIDs: *const fn (
            self: *const IShellFolder,
            l_param: LPARAM,
            pidl1: ?*ITEMIDLIST,
            pidl2: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateViewObject: *const fn (
            self: *const IShellFolder,
            hwnd_owner: ?HWND,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributesOf: *const fn (
            self: *const IShellFolder,
            cidl: u32,
            apidl: [*]?*ITEMIDLIST,
            rgf_in_out: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUIObjectOf: *const fn (
            self: *const IShellFolder,
            hwnd_owner: ?HWND,
            cidl: u32,
            apidl: [*]?*ITEMIDLIST,
            riid: ?*const Guid,
            rgf_reserved: ?*u32,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayNameOf: *const fn (
            self: *const IShellFolder,
            pidl: ?*ITEMIDLIST,
            u_flags: u32,
            p_name: ?*STRRET,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNameOf: *const fn (
            self: *const IShellFolder,
            hwnd: ?HWND,
            pidl: ?*ITEMIDLIST,
            psz_name: ?[*:0]const u16,
            u_flags: u32,
            ppidl_out: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn parseDisplayName(self: *const T, hwnd_: ?HWND, pbc_: ?*IBindCtx, psz_display_name_: ?PWSTR, pch_eaten_: ?*u32, ppidl_: ?*?*ITEMIDLIST, pdw_attributes_: ?*u32) HRESULT {
                return @as(*const IShellFolder.VTable, @ptrCast(self.vtable)).ParseDisplayName(@as(*const IShellFolder, @ptrCast(self)), hwnd_, pbc_, psz_display_name_, pch_eaten_, ppidl_, pdw_attributes_);
            }
            pub inline fn enumObjects(self: *const T, hwnd_: ?HWND, grf_flags_: u32, ppenum_i_d_list_: ?*?*IEnumIDList) HRESULT {
                return @as(*const IShellFolder.VTable, @ptrCast(self.vtable)).EnumObjects(@as(*const IShellFolder, @ptrCast(self)), hwnd_, grf_flags_, ppenum_i_d_list_);
            }
            pub inline fn bindToObject(self: *const T, pidl_: ?*ITEMIDLIST, pbc_: ?*IBindCtx, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IShellFolder.VTable, @ptrCast(self.vtable)).BindToObject(@as(*const IShellFolder, @ptrCast(self)), pidl_, pbc_, riid_, ppv_);
            }
            pub inline fn bindToStorage(self: *const T, pidl_: ?*ITEMIDLIST, pbc_: ?*IBindCtx, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IShellFolder.VTable, @ptrCast(self.vtable)).BindToStorage(@as(*const IShellFolder, @ptrCast(self)), pidl_, pbc_, riid_, ppv_);
            }
            pub inline fn compareIDs(self: *const T, l_param_: LPARAM, pidl1_: ?*ITEMIDLIST, pidl2_: ?*ITEMIDLIST) HRESULT {
                return @as(*const IShellFolder.VTable, @ptrCast(self.vtable)).CompareIDs(@as(*const IShellFolder, @ptrCast(self)), l_param_, pidl1_, pidl2_);
            }
            pub inline fn createViewObject(self: *const T, hwnd_owner_: ?HWND, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IShellFolder.VTable, @ptrCast(self.vtable)).CreateViewObject(@as(*const IShellFolder, @ptrCast(self)), hwnd_owner_, riid_, ppv_);
            }
            pub inline fn getAttributesOf(self: *const T, cidl_: u32, apidl_: [*]?*ITEMIDLIST, rgf_in_out_: ?*u32) HRESULT {
                return @as(*const IShellFolder.VTable, @ptrCast(self.vtable)).GetAttributesOf(@as(*const IShellFolder, @ptrCast(self)), cidl_, apidl_, rgf_in_out_);
            }
            pub inline fn getUIObjectOf(self: *const T, hwnd_owner_: ?HWND, cidl_: u32, apidl_: [*]?*ITEMIDLIST, riid_: ?*const Guid, rgf_reserved_: ?*u32, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IShellFolder.VTable, @ptrCast(self.vtable)).GetUIObjectOf(@as(*const IShellFolder, @ptrCast(self)), hwnd_owner_, cidl_, apidl_, riid_, rgf_reserved_, ppv_);
            }
            pub inline fn getDisplayNameOf(self: *const T, pidl_: ?*ITEMIDLIST, u_flags_: u32, p_name_: ?*STRRET) HRESULT {
                return @as(*const IShellFolder.VTable, @ptrCast(self.vtable)).GetDisplayNameOf(@as(*const IShellFolder, @ptrCast(self)), pidl_, u_flags_, p_name_);
            }
            pub inline fn setNameOf(self: *const T, hwnd_: ?HWND, pidl_: ?*ITEMIDLIST, psz_name_: ?[*:0]const u16, u_flags_: u32, ppidl_out_: ?*?*ITEMIDLIST) HRESULT {
                return @as(*const IShellFolder.VTable, @ptrCast(self.vtable)).SetNameOf(@as(*const IShellFolder, @ptrCast(self)), hwnd_, pidl_, psz_name_, u_flags_, ppidl_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const EXTRASEARCH = extern struct {
    guidSearch: Guid,
    wszFriendlyName: [80]u16,
    wszUrl: [2084]u16,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEnumExtraSearch_Value = Guid.initString("0e700be1-9db6-11d1-a1ce-00c04fd75d13");
pub const IID_IEnumExtraSearch = &IID_IEnumExtraSearch_Value;
pub const IEnumExtraSearch = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumExtraSearch,
            celt: u32,
            rgelt: [*]EXTRASEARCH,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumExtraSearch,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumExtraSearch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumExtraSearch,
            ppenum: ?*?*IEnumExtraSearch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: [*]EXTRASEARCH, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumExtraSearch.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumExtraSearch, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumExtraSearch.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumExtraSearch, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumExtraSearch.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumExtraSearch, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumExtraSearch) HRESULT {
                return @as(*const IEnumExtraSearch.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumExtraSearch, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IShellFolder2_Value = Guid.initString("93f2f68c-1d1b-11d3-a30e-00c04f79abd1");
pub const IID_IShellFolder2 = &IID_IShellFolder2_Value;
pub const IShellFolder2 = extern struct {
    pub const VTable = extern struct {
        base: IShellFolder.VTable,
        GetDefaultSearchGUID: *const fn (
            self: *const IShellFolder2,
            pguid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumSearches: *const fn (
            self: *const IShellFolder2,
            ppenum: ?*?*IEnumExtraSearch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultColumn: *const fn (
            self: *const IShellFolder2,
            dw_res: u32,
            p_sort: ?*u32,
            p_display: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultColumnState: *const fn (
            self: *const IShellFolder2,
            i_column: u32,
            pcs_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDetailsEx: *const fn (
            self: *const IShellFolder2,
            pidl: ?*ITEMIDLIST,
            pscid: ?*const PROPERTYKEY,
            pv: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDetailsOf: *const fn (
            self: *const IShellFolder2,
            pidl: ?*ITEMIDLIST,
            i_column: u32,
            psd: ?*SHELLDETAILS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MapColumnToSCID: *const fn (
            self: *const IShellFolder2,
            i_column: u32,
            pscid: ?*PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellFolder.MethodMixin(T);
            pub inline fn getDefaultSearchGUID(self: *const T, pguid_: ?*Guid) HRESULT {
                return @as(*const IShellFolder2.VTable, @ptrCast(self.vtable)).GetDefaultSearchGUID(@as(*const IShellFolder2, @ptrCast(self)), pguid_);
            }
            pub inline fn enumSearches(self: *const T, ppenum_: ?*?*IEnumExtraSearch) HRESULT {
                return @as(*const IShellFolder2.VTable, @ptrCast(self.vtable)).EnumSearches(@as(*const IShellFolder2, @ptrCast(self)), ppenum_);
            }
            pub inline fn getDefaultColumn(self: *const T, dw_res_: u32, p_sort_: ?*u32, p_display_: ?*u32) HRESULT {
                return @as(*const IShellFolder2.VTable, @ptrCast(self.vtable)).GetDefaultColumn(@as(*const IShellFolder2, @ptrCast(self)), dw_res_, p_sort_, p_display_);
            }
            pub inline fn getDefaultColumnState(self: *const T, i_column_: u32, pcs_flags_: ?*u32) HRESULT {
                return @as(*const IShellFolder2.VTable, @ptrCast(self.vtable)).GetDefaultColumnState(@as(*const IShellFolder2, @ptrCast(self)), i_column_, pcs_flags_);
            }
            pub inline fn getDetailsEx(self: *const T, pidl_: ?*ITEMIDLIST, pscid_: ?*const PROPERTYKEY, pv_: ?*VARIANT) HRESULT {
                return @as(*const IShellFolder2.VTable, @ptrCast(self.vtable)).GetDetailsEx(@as(*const IShellFolder2, @ptrCast(self)), pidl_, pscid_, pv_);
            }
            pub inline fn getDetailsOf(self: *const T, pidl_: ?*ITEMIDLIST, i_column_: u32, psd_: ?*SHELLDETAILS) HRESULT {
                return @as(*const IShellFolder2.VTable, @ptrCast(self.vtable)).GetDetailsOf(@as(*const IShellFolder2, @ptrCast(self)), pidl_, i_column_, psd_);
            }
            pub inline fn mapColumnToSCID(self: *const T, i_column_: u32, pscid_: ?*PROPERTYKEY) HRESULT {
                return @as(*const IShellFolder2.VTable, @ptrCast(self.vtable)).MapColumnToSCID(@as(*const IShellFolder2, @ptrCast(self)), i_column_, pscid_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FOLDERFLAGS = enum(i32) {
    NONE = 0,
    AUTOARRANGE = 1,
    ABBREVIATEDNAMES = 2,
    SNAPTOGRID = 4,
    OWNERDATA = 8,
    BESTFITWINDOW = 16,
    DESKTOP = 32,
    SINGLESEL = 64,
    NOSUBFOLDERS = 128,
    TRANSPARENT = 256,
    NOCLIENTEDGE = 512,
    NOSCROLL = 1024,
    ALIGNLEFT = 2048,
    NOICONS = 4096,
    SHOWSELALWAYS = 8192,
    NOVISIBLE = 16384,
    SINGLECLICKACTIVATE = 32768,
    NOWEBVIEW = 65536,
    HIDEFILENAMES = 131072,
    CHECKSELECT = 262144,
    NOENUMREFRESH = 524288,
    NOGROUPING = 1048576,
    FULLROWSELECT = 2097152,
    NOFILTERS = 4194304,
    NOCOLUMNHEADER = 8388608,
    NOHEADERINALLVIEWS = 16777216,
    EXTENDEDTILES = 33554432,
    TRICHECKSELECT = 67108864,
    AUTOCHECKSELECT = 134217728,
    NOBROWSERVIEWSTATE = 268435456,
    SUBSETGROUPS = 536870912,
    USESEARCHFOLDER = 1073741824,
    ALLOWRTLREADING = -2147483648,
};
pub const FWF_NONE = FOLDERFLAGS.NONE;
pub const FWF_AUTOARRANGE = FOLDERFLAGS.AUTOARRANGE;
pub const FWF_ABBREVIATEDNAMES = FOLDERFLAGS.ABBREVIATEDNAMES;
pub const FWF_SNAPTOGRID = FOLDERFLAGS.SNAPTOGRID;
pub const FWF_OWNERDATA = FOLDERFLAGS.OWNERDATA;
pub const FWF_BESTFITWINDOW = FOLDERFLAGS.BESTFITWINDOW;
pub const FWF_DESKTOP = FOLDERFLAGS.DESKTOP;
pub const FWF_SINGLESEL = FOLDERFLAGS.SINGLESEL;
pub const FWF_NOSUBFOLDERS = FOLDERFLAGS.NOSUBFOLDERS;
pub const FWF_TRANSPARENT = FOLDERFLAGS.TRANSPARENT;
pub const FWF_NOCLIENTEDGE = FOLDERFLAGS.NOCLIENTEDGE;
pub const FWF_NOSCROLL = FOLDERFLAGS.NOSCROLL;
pub const FWF_ALIGNLEFT = FOLDERFLAGS.ALIGNLEFT;
pub const FWF_NOICONS = FOLDERFLAGS.NOICONS;
pub const FWF_SHOWSELALWAYS = FOLDERFLAGS.SHOWSELALWAYS;
pub const FWF_NOVISIBLE = FOLDERFLAGS.NOVISIBLE;
pub const FWF_SINGLECLICKACTIVATE = FOLDERFLAGS.SINGLECLICKACTIVATE;
pub const FWF_NOWEBVIEW = FOLDERFLAGS.NOWEBVIEW;
pub const FWF_HIDEFILENAMES = FOLDERFLAGS.HIDEFILENAMES;
pub const FWF_CHECKSELECT = FOLDERFLAGS.CHECKSELECT;
pub const FWF_NOENUMREFRESH = FOLDERFLAGS.NOENUMREFRESH;
pub const FWF_NOGROUPING = FOLDERFLAGS.NOGROUPING;
pub const FWF_FULLROWSELECT = FOLDERFLAGS.FULLROWSELECT;
pub const FWF_NOFILTERS = FOLDERFLAGS.NOFILTERS;
pub const FWF_NOCOLUMNHEADER = FOLDERFLAGS.NOCOLUMNHEADER;
pub const FWF_NOHEADERINALLVIEWS = FOLDERFLAGS.NOHEADERINALLVIEWS;
pub const FWF_EXTENDEDTILES = FOLDERFLAGS.EXTENDEDTILES;
pub const FWF_TRICHECKSELECT = FOLDERFLAGS.TRICHECKSELECT;
pub const FWF_AUTOCHECKSELECT = FOLDERFLAGS.AUTOCHECKSELECT;
pub const FWF_NOBROWSERVIEWSTATE = FOLDERFLAGS.NOBROWSERVIEWSTATE;
pub const FWF_SUBSETGROUPS = FOLDERFLAGS.SUBSETGROUPS;
pub const FWF_USESEARCHFOLDER = FOLDERFLAGS.USESEARCHFOLDER;
pub const FWF_ALLOWRTLREADING = FOLDERFLAGS.ALLOWRTLREADING;

pub const FOLDERVIEWMODE = enum(i32) {
    AUTO = -1,
    FIRST = 1,
    // ICON = 1, this enum value conflicts with FIRST
    SMALLICON = 2,
    LIST = 3,
    DETAILS = 4,
    THUMBNAIL = 5,
    TILE = 6,
    THUMBSTRIP = 7,
    CONTENT = 8,
    // LAST = 8, this enum value conflicts with CONTENT
};
pub const FVM_AUTO = FOLDERVIEWMODE.AUTO;
pub const FVM_FIRST = FOLDERVIEWMODE.FIRST;
pub const FVM_ICON = FOLDERVIEWMODE.FIRST;
pub const FVM_SMALLICON = FOLDERVIEWMODE.SMALLICON;
pub const FVM_LIST = FOLDERVIEWMODE.LIST;
pub const FVM_DETAILS = FOLDERVIEWMODE.DETAILS;
pub const FVM_THUMBNAIL = FOLDERVIEWMODE.THUMBNAIL;
pub const FVM_TILE = FOLDERVIEWMODE.TILE;
pub const FVM_THUMBSTRIP = FOLDERVIEWMODE.THUMBSTRIP;
pub const FVM_CONTENT = FOLDERVIEWMODE.CONTENT;
pub const FVM_LAST = FOLDERVIEWMODE.CONTENT;

pub const FOLDERLOGICALVIEWMODE = enum(i32) {
    UNSPECIFIED = -1,
    FIRST = 1,
    // DETAILS = 1, this enum value conflicts with FIRST
    TILES = 2,
    ICONS = 3,
    LIST = 4,
    CONTENT = 5,
    // LAST = 5, this enum value conflicts with CONTENT
};
pub const FLVM_UNSPECIFIED = FOLDERLOGICALVIEWMODE.UNSPECIFIED;
pub const FLVM_FIRST = FOLDERLOGICALVIEWMODE.FIRST;
pub const FLVM_DETAILS = FOLDERLOGICALVIEWMODE.FIRST;
pub const FLVM_TILES = FOLDERLOGICALVIEWMODE.TILES;
pub const FLVM_ICONS = FOLDERLOGICALVIEWMODE.ICONS;
pub const FLVM_LIST = FOLDERLOGICALVIEWMODE.LIST;
pub const FLVM_CONTENT = FOLDERLOGICALVIEWMODE.CONTENT;
pub const FLVM_LAST = FOLDERLOGICALVIEWMODE.CONTENT;

pub const FOLDERSETTINGS = extern struct {
    ViewMode: u32,
    fFlags: u32,
};

pub const _SVSIF = enum(i32) {
    DESELECT = 0,
    SELECT = 1,
    EDIT = 3,
    DESELECTOTHERS = 4,
    ENSUREVISIBLE = 8,
    FOCUSED = 16,
    TRANSLATEPT = 32,
    SELECTIONMARK = 64,
    POSITIONITEM = 128,
    CHECK = 256,
    CHECK2 = 512,
    KEYBOARDSELECT = 1025,
    NOTAKEFOCUS = 1073741824,
};
pub const SVSI_DESELECT = _SVSIF.DESELECT;
pub const SVSI_SELECT = _SVSIF.SELECT;
pub const SVSI_EDIT = _SVSIF.EDIT;
pub const SVSI_DESELECTOTHERS = _SVSIF.DESELECTOTHERS;
pub const SVSI_ENSUREVISIBLE = _SVSIF.ENSUREVISIBLE;
pub const SVSI_FOCUSED = _SVSIF.FOCUSED;
pub const SVSI_TRANSLATEPT = _SVSIF.TRANSLATEPT;
pub const SVSI_SELECTIONMARK = _SVSIF.SELECTIONMARK;
pub const SVSI_POSITIONITEM = _SVSIF.POSITIONITEM;
pub const SVSI_CHECK = _SVSIF.CHECK;
pub const SVSI_CHECK2 = _SVSIF.CHECK2;
pub const SVSI_KEYBOARDSELECT = _SVSIF.KEYBOARDSELECT;
pub const SVSI_NOTAKEFOCUS = _SVSIF.NOTAKEFOCUS;

pub const _SVGIO = enum(i32) {
    BACKGROUND = 0,
    SELECTION = 1,
    ALLVIEW = 2,
    CHECKED = 3,
    TYPE_MASK = 15,
    FLAG_VIEWORDER = -2147483648,
};
pub const SVGIO_BACKGROUND = _SVGIO.BACKGROUND;
pub const SVGIO_SELECTION = _SVGIO.SELECTION;
pub const SVGIO_ALLVIEW = _SVGIO.ALLVIEW;
pub const SVGIO_CHECKED = _SVGIO.CHECKED;
pub const SVGIO_TYPE_MASK = _SVGIO.TYPE_MASK;
pub const SVGIO_FLAG_VIEWORDER = _SVGIO.FLAG_VIEWORDER;

pub const SVUIA_STATUS = enum(i32) {
    DEACTIVATE = 0,
    ACTIVATE_NOFOCUS = 1,
    ACTIVATE_FOCUS = 2,
    INPLACEACTIVATE = 3,
};
pub const SVUIA_DEACTIVATE = SVUIA_STATUS.DEACTIVATE;
pub const SVUIA_ACTIVATE_NOFOCUS = SVUIA_STATUS.ACTIVATE_NOFOCUS;
pub const SVUIA_ACTIVATE_FOCUS = SVUIA_STATUS.ACTIVATE_FOCUS;
pub const SVUIA_INPLACEACTIVATE = SVUIA_STATUS.INPLACEACTIVATE;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellView_Value = Guid.initString("000214e3-0000-0000-c000-000000000046");
pub const IID_IShellView = &IID_IShellView_Value;
pub const IShellView = extern struct {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        TranslateAccelerator: *const fn (
            self: *const IShellView,
            pmsg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableModeless: *const fn (
            self: *const IShellView,
            f_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UIActivate: *const fn (
            self: *const IShellView,
            u_state: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateViewWindow: *const fn (
            self: *const IShellView,
            psv_previous: ?*IShellView,
            pfs: ?*FOLDERSETTINGS,
            psb: ?*IShellBrowser,
            prc_view: ?*RECT,
            ph_wnd: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroyViewWindow: *const fn (
            self: *const IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentInfo: *const fn (
            self: *const IShellView,
            pfs: ?*FOLDERSETTINGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPropertySheetPages: *const fn (
            self: *const IShellView,
            dw_reserved: u32,
            pfn: ?LPFNSVADDPROPSHEETPAGE,
            lparam: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveViewState: *const fn (
            self: *const IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectItem: *const fn (
            self: *const IShellView,
            pidl_item: ?*ITEMIDLIST,
            u_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemObject: *const fn (
            self: *const IShellView,
            u_item: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOleWindow.MethodMixin(T);
            pub inline fn translateAccelerator(self: *const T, pmsg_: ?*MSG) HRESULT {
                return @as(*const IShellView.VTable, @ptrCast(self.vtable)).TranslateAccelerator(@as(*const IShellView, @ptrCast(self)), pmsg_);
            }
            pub inline fn enableModeless(self: *const T, f_enable_: BOOL) HRESULT {
                return @as(*const IShellView.VTable, @ptrCast(self.vtable)).EnableModeless(@as(*const IShellView, @ptrCast(self)), f_enable_);
            }
            pub inline fn uiActivate(self: *const T, u_state_: u32) HRESULT {
                return @as(*const IShellView.VTable, @ptrCast(self.vtable)).UIActivate(@as(*const IShellView, @ptrCast(self)), u_state_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IShellView.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IShellView, @ptrCast(self)));
            }
            pub inline fn createViewWindow(self: *const T, psv_previous_: ?*IShellView, pfs_: ?*FOLDERSETTINGS, psb_: ?*IShellBrowser, prc_view_: ?*RECT, ph_wnd_: ?*?HWND) HRESULT {
                return @as(*const IShellView.VTable, @ptrCast(self.vtable)).CreateViewWindow(@as(*const IShellView, @ptrCast(self)), psv_previous_, pfs_, psb_, prc_view_, ph_wnd_);
            }
            pub inline fn destroyViewWindow(self: *const T) HRESULT {
                return @as(*const IShellView.VTable, @ptrCast(self.vtable)).DestroyViewWindow(@as(*const IShellView, @ptrCast(self)));
            }
            pub inline fn getCurrentInfo(self: *const T, pfs_: ?*FOLDERSETTINGS) HRESULT {
                return @as(*const IShellView.VTable, @ptrCast(self.vtable)).GetCurrentInfo(@as(*const IShellView, @ptrCast(self)), pfs_);
            }
            pub inline fn addPropertySheetPages(self: *const T, dw_reserved_: u32, pfn_: ?LPFNSVADDPROPSHEETPAGE, lparam_: LPARAM) HRESULT {
                return @as(*const IShellView.VTable, @ptrCast(self.vtable)).AddPropertySheetPages(@as(*const IShellView, @ptrCast(self)), dw_reserved_, pfn_, lparam_);
            }
            pub inline fn saveViewState(self: *const T) HRESULT {
                return @as(*const IShellView.VTable, @ptrCast(self.vtable)).SaveViewState(@as(*const IShellView, @ptrCast(self)));
            }
            pub inline fn selectItem(self: *const T, pidl_item_: ?*ITEMIDLIST, u_flags_: u32) HRESULT {
                return @as(*const IShellView.VTable, @ptrCast(self.vtable)).SelectItem(@as(*const IShellView, @ptrCast(self)), pidl_item_, u_flags_);
            }
            pub inline fn getItemObject(self: *const T, u_item_: u32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IShellView.VTable, @ptrCast(self.vtable)).GetItemObject(@as(*const IShellView, @ptrCast(self)), u_item_, riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SV2CVW2_PARAMS = extern struct {
    cbSize: u32,
    psvPrev: ?*IShellView,
    pfs: ?*FOLDERSETTINGS,
    psbOwner: ?*IShellBrowser,
    prcView: ?*RECT,
    pvid: ?*const Guid,
    hwndView: ?HWND,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IShellView2_Value = Guid.initString("88e39e80-3578-11cf-ae69-08002b2e1262");
pub const IID_IShellView2 = &IID_IShellView2_Value;
pub const IShellView2 = extern struct {
    pub const VTable = extern struct {
        base: IShellView.VTable,
        GetView: *const fn (
            self: *const IShellView2,
            pvid: ?*Guid,
            u_view: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateViewWindow2: *const fn (
            self: *const IShellView2,
            lp_params: ?*SV2CVW2_PARAMS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleRename: *const fn (
            self: *const IShellView2,
            pidl_new: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectAndPositionItem: *const fn (
            self: *const IShellView2,
            pidl_item: ?*ITEMIDLIST,
            u_flags: u32,
            ppt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellView.MethodMixin(T);
            pub inline fn getView(self: *const T, pvid_: ?*Guid, u_view_: u32) HRESULT {
                return @as(*const IShellView2.VTable, @ptrCast(self.vtable)).GetView(@as(*const IShellView2, @ptrCast(self)), pvid_, u_view_);
            }
            pub inline fn createViewWindow2(self: *const T, lp_params_: ?*SV2CVW2_PARAMS) HRESULT {
                return @as(*const IShellView2.VTable, @ptrCast(self.vtable)).CreateViewWindow2(@as(*const IShellView2, @ptrCast(self)), lp_params_);
            }
            pub inline fn handleRename(self: *const T, pidl_new_: ?*ITEMIDLIST) HRESULT {
                return @as(*const IShellView2.VTable, @ptrCast(self.vtable)).HandleRename(@as(*const IShellView2, @ptrCast(self)), pidl_new_);
            }
            pub inline fn selectAndPositionItem(self: *const T, pidl_item_: ?*ITEMIDLIST, u_flags_: u32, ppt_: ?*POINT) HRESULT {
                return @as(*const IShellView2.VTable, @ptrCast(self.vtable)).SelectAndPositionItem(@as(*const IShellView2, @ptrCast(self)), pidl_item_, u_flags_, ppt_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFolderView_Value = Guid.initString("cde725b0-ccc9-4519-917e-325d72fab4ce");
pub const IID_IFolderView = &IID_IFolderView_Value;
pub const IFolderView = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCurrentViewMode: *const fn (
            self: *const IFolderView,
            p_view_mode: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCurrentViewMode: *const fn (
            self: *const IFolderView,
            view_mode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolder: *const fn (
            self: *const IFolderView,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const IFolderView,
            i_item_index: i32,
            ppidl: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemCount: *const fn (
            self: *const IFolderView,
            u_flags: u32,
            pc_items: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Items: *const fn (
            self: *const IFolderView,
            u_flags: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectionMarkedItem: *const fn (
            self: *const IFolderView,
            pi_item: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFocusedItem: *const fn (
            self: *const IFolderView,
            pi_item: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemPosition: *const fn (
            self: *const IFolderView,
            pidl: ?*ITEMIDLIST,
            ppt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSpacing: *const fn (
            self: *const IFolderView,
            ppt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultSpacing: *const fn (
            self: *const IFolderView,
            ppt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAutoArrange: *const fn (
            self: *const IFolderView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectItem: *const fn (
            self: *const IFolderView,
            i_item: i32,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectAndPositionItems: *const fn (
            self: *const IFolderView,
            cidl: u32,
            apidl: [*]?*ITEMIDLIST,
            apt: ?[*]POINT,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCurrentViewMode(self: *const T, p_view_mode_: ?*u32) HRESULT {
                return @as(*const IFolderView.VTable, @ptrCast(self.vtable)).GetCurrentViewMode(@as(*const IFolderView, @ptrCast(self)), p_view_mode_);
            }
            pub inline fn setCurrentViewMode(self: *const T, view_mode_: u32) HRESULT {
                return @as(*const IFolderView.VTable, @ptrCast(self.vtable)).SetCurrentViewMode(@as(*const IFolderView, @ptrCast(self)), view_mode_);
            }
            pub inline fn getFolder(self: *const T, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IFolderView.VTable, @ptrCast(self.vtable)).GetFolder(@as(*const IFolderView, @ptrCast(self)), riid_, ppv_);
            }
            pub inline fn item(self: *const T, i_item_index_: i32, ppidl_: ?*?*ITEMIDLIST) HRESULT {
                return @as(*const IFolderView.VTable, @ptrCast(self.vtable)).Item(@as(*const IFolderView, @ptrCast(self)), i_item_index_, ppidl_);
            }
            pub inline fn itemCount(self: *const T, u_flags_: u32, pc_items_: ?*i32) HRESULT {
                return @as(*const IFolderView.VTable, @ptrCast(self.vtable)).ItemCount(@as(*const IFolderView, @ptrCast(self)), u_flags_, pc_items_);
            }
            pub inline fn items(self: *const T, u_flags_: u32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IFolderView.VTable, @ptrCast(self.vtable)).Items(@as(*const IFolderView, @ptrCast(self)), u_flags_, riid_, ppv_);
            }
            pub inline fn getSelectionMarkedItem(self: *const T, pi_item_: ?*i32) HRESULT {
                return @as(*const IFolderView.VTable, @ptrCast(self.vtable)).GetSelectionMarkedItem(@as(*const IFolderView, @ptrCast(self)), pi_item_);
            }
            pub inline fn getFocusedItem(self: *const T, pi_item_: ?*i32) HRESULT {
                return @as(*const IFolderView.VTable, @ptrCast(self.vtable)).GetFocusedItem(@as(*const IFolderView, @ptrCast(self)), pi_item_);
            }
            pub inline fn getItemPosition(self: *const T, pidl_: ?*ITEMIDLIST, ppt_: ?*POINT) HRESULT {
                return @as(*const IFolderView.VTable, @ptrCast(self.vtable)).GetItemPosition(@as(*const IFolderView, @ptrCast(self)), pidl_, ppt_);
            }
            pub inline fn getSpacing(self: *const T, ppt_: ?*POINT) HRESULT {
                return @as(*const IFolderView.VTable, @ptrCast(self.vtable)).GetSpacing(@as(*const IFolderView, @ptrCast(self)), ppt_);
            }
            pub inline fn getDefaultSpacing(self: *const T, ppt_: ?*POINT) HRESULT {
                return @as(*const IFolderView.VTable, @ptrCast(self.vtable)).GetDefaultSpacing(@as(*const IFolderView, @ptrCast(self)), ppt_);
            }
            pub inline fn getAutoArrange(self: *const T) HRESULT {
                return @as(*const IFolderView.VTable, @ptrCast(self.vtable)).GetAutoArrange(@as(*const IFolderView, @ptrCast(self)));
            }
            pub inline fn selectItem(self: *const T, i_item_: i32, dw_flags_: u32) HRESULT {
                return @as(*const IFolderView.VTable, @ptrCast(self.vtable)).SelectItem(@as(*const IFolderView, @ptrCast(self)), i_item_, dw_flags_);
            }
            pub inline fn selectAndPositionItems(self: *const T, cidl_: u32, apidl_: [*]?*ITEMIDLIST, apt_: ?[*]POINT, dw_flags_: u32) HRESULT {
                return @as(*const IFolderView.VTable, @ptrCast(self.vtable)).SelectAndPositionItems(@as(*const IFolderView, @ptrCast(self)), cidl_, apidl_, apt_, dw_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SORTDIRECTION = enum(i32) {
    DESCENDING = -1,
    ASCENDING = 1,
};
pub const SORT_DESCENDING = SORTDIRECTION.DESCENDING;
pub const SORT_ASCENDING = SORTDIRECTION.ASCENDING;

pub const SORTCOLUMN = extern struct {
    propkey: PROPERTYKEY,
    direction: SORTDIRECTION,
};

pub const FVTEXTTYPE = enum(i32) {
    T = 0,
};
pub const FVST_EMPTYTEXT = FVTEXTTYPE.T;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFolderView2_Value = Guid.initString("1af3a467-214f-4298-908e-06b03e0b39f9");
pub const IID_IFolderView2 = &IID_IFolderView2_Value;
pub const IFolderView2 = extern struct {
    pub const VTable = extern struct {
        base: IFolderView.VTable,
        SetGroupBy: *const fn (
            self: *const IFolderView2,
            key: ?*const PROPERTYKEY,
            f_ascending: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroupBy: *const fn (
            self: *const IFolderView2,
            pkey: ?*PROPERTYKEY,
            pf_ascending: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewProperty: *const fn (
            self: *const IFolderView2,
            pidl: ?*ITEMIDLIST,
            propkey: ?*const PROPERTYKEY,
            propvar: ?*const PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewProperty: *const fn (
            self: *const IFolderView2,
            pidl: ?*ITEMIDLIST,
            propkey: ?*const PROPERTYKEY,
            ppropvar: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTileViewProperties: *const fn (
            self: *const IFolderView2,
            pidl: ?*ITEMIDLIST,
            psz_prop_list: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetExtendedTileViewProperties: *const fn (
            self: *const IFolderView2,
            pidl: ?*ITEMIDLIST,
            psz_prop_list: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetText: *const fn (
            self: *const IFolderView2,
            i_type: FVTEXTTYPE,
            pwsz_text: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCurrentFolderFlags: *const fn (
            self: *const IFolderView2,
            dw_mask: u32,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentFolderFlags: *const fn (
            self: *const IFolderView2,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSortColumnCount: *const fn (
            self: *const IFolderView2,
            pc_columns: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSortColumns: *const fn (
            self: *const IFolderView2,
            rg_sort_columns: [*]const SORTCOLUMN,
            c_columns: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSortColumns: *const fn (
            self: *const IFolderView2,
            rg_sort_columns: [*]SORTCOLUMN,
            c_columns: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItem: *const fn (
            self: *const IFolderView2,
            i_item: i32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVisibleItem: *const fn (
            self: *const IFolderView2,
            i_start: i32,
            f_previous: BOOL,
            pi_item: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectedItem: *const fn (
            self: *const IFolderView2,
            i_start: i32,
            pi_item: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelection: *const fn (
            self: *const IFolderView2,
            f_none_implies_folder: BOOL,
            ppsia: ?*?*IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectionState: *const fn (
            self: *const IFolderView2,
            pidl: ?*ITEMIDLIST,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeVerbOnSelection: *const fn (
            self: *const IFolderView2,
            psz_verb: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewModeAndIconSize: *const fn (
            self: *const IFolderView2,
            u_view_mode: FOLDERVIEWMODE,
            i_image_size: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewModeAndIconSize: *const fn (
            self: *const IFolderView2,
            pu_view_mode: ?*FOLDERVIEWMODE,
            pi_image_size: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGroupSubsetCount: *const fn (
            self: *const IFolderView2,
            c_visible_rows: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroupSubsetCount: *const fn (
            self: *const IFolderView2,
            pc_visible_rows: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRedraw: *const fn (
            self: *const IFolderView2,
            f_redraw_on: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsMoveInSameFolder: *const fn (
            self: *const IFolderView2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoRename: *const fn (
            self: *const IFolderView2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFolderView.MethodMixin(T);
            pub inline fn setGroupBy(self: *const T, key_: ?*const PROPERTYKEY, f_ascending_: BOOL) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).SetGroupBy(@as(*const IFolderView2, @ptrCast(self)), key_, f_ascending_);
            }
            pub inline fn getGroupBy(self: *const T, pkey_: ?*PROPERTYKEY, pf_ascending_: ?*BOOL) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).GetGroupBy(@as(*const IFolderView2, @ptrCast(self)), pkey_, pf_ascending_);
            }
            pub inline fn setViewProperty(self: *const T, pidl_: ?*ITEMIDLIST, propkey_: ?*const PROPERTYKEY, propvar_: ?*const PROPVARIANT) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).SetViewProperty(@as(*const IFolderView2, @ptrCast(self)), pidl_, propkey_, propvar_);
            }
            pub inline fn getViewProperty(self: *const T, pidl_: ?*ITEMIDLIST, propkey_: ?*const PROPERTYKEY, ppropvar_: ?*PROPVARIANT) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).GetViewProperty(@as(*const IFolderView2, @ptrCast(self)), pidl_, propkey_, ppropvar_);
            }
            pub inline fn setTileViewProperties(self: *const T, pidl_: ?*ITEMIDLIST, psz_prop_list_: ?[*:0]const u16) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).SetTileViewProperties(@as(*const IFolderView2, @ptrCast(self)), pidl_, psz_prop_list_);
            }
            pub inline fn setExtendedTileViewProperties(self: *const T, pidl_: ?*ITEMIDLIST, psz_prop_list_: ?[*:0]const u16) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).SetExtendedTileViewProperties(@as(*const IFolderView2, @ptrCast(self)), pidl_, psz_prop_list_);
            }
            pub inline fn setText(self: *const T, i_type_: FVTEXTTYPE, pwsz_text_: ?[*:0]const u16) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).SetText(@as(*const IFolderView2, @ptrCast(self)), i_type_, pwsz_text_);
            }
            pub inline fn setCurrentFolderFlags(self: *const T, dw_mask_: u32, dw_flags_: u32) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).SetCurrentFolderFlags(@as(*const IFolderView2, @ptrCast(self)), dw_mask_, dw_flags_);
            }
            pub inline fn getCurrentFolderFlags(self: *const T, pdw_flags_: ?*u32) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).GetCurrentFolderFlags(@as(*const IFolderView2, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn getSortColumnCount(self: *const T, pc_columns_: ?*i32) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).GetSortColumnCount(@as(*const IFolderView2, @ptrCast(self)), pc_columns_);
            }
            pub inline fn setSortColumns(self: *const T, rg_sort_columns_: [*]const SORTCOLUMN, c_columns_: i32) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).SetSortColumns(@as(*const IFolderView2, @ptrCast(self)), rg_sort_columns_, c_columns_);
            }
            pub inline fn getSortColumns(self: *const T, rg_sort_columns_: [*]SORTCOLUMN, c_columns_: i32) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).GetSortColumns(@as(*const IFolderView2, @ptrCast(self)), rg_sort_columns_, c_columns_);
            }
            pub inline fn getItem(self: *const T, i_item_: i32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).GetItem(@as(*const IFolderView2, @ptrCast(self)), i_item_, riid_, ppv_);
            }
            pub inline fn getVisibleItem(self: *const T, i_start_: i32, f_previous_: BOOL, pi_item_: ?*i32) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).GetVisibleItem(@as(*const IFolderView2, @ptrCast(self)), i_start_, f_previous_, pi_item_);
            }
            pub inline fn getSelectedItem(self: *const T, i_start_: i32, pi_item_: ?*i32) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).GetSelectedItem(@as(*const IFolderView2, @ptrCast(self)), i_start_, pi_item_);
            }
            pub inline fn getSelection(self: *const T, f_none_implies_folder_: BOOL, ppsia_: ?*?*IShellItemArray) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).GetSelection(@as(*const IFolderView2, @ptrCast(self)), f_none_implies_folder_, ppsia_);
            }
            pub inline fn getSelectionState(self: *const T, pidl_: ?*ITEMIDLIST, pdw_flags_: ?*u32) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).GetSelectionState(@as(*const IFolderView2, @ptrCast(self)), pidl_, pdw_flags_);
            }
            pub inline fn invokeVerbOnSelection(self: *const T, psz_verb_: ?[*:0]const u8) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).InvokeVerbOnSelection(@as(*const IFolderView2, @ptrCast(self)), psz_verb_);
            }
            pub inline fn setViewModeAndIconSize(self: *const T, u_view_mode_: FOLDERVIEWMODE, i_image_size_: i32) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).SetViewModeAndIconSize(@as(*const IFolderView2, @ptrCast(self)), u_view_mode_, i_image_size_);
            }
            pub inline fn getViewModeAndIconSize(self: *const T, pu_view_mode_: ?*FOLDERVIEWMODE, pi_image_size_: ?*i32) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).GetViewModeAndIconSize(@as(*const IFolderView2, @ptrCast(self)), pu_view_mode_, pi_image_size_);
            }
            pub inline fn setGroupSubsetCount(self: *const T, c_visible_rows_: u32) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).SetGroupSubsetCount(@as(*const IFolderView2, @ptrCast(self)), c_visible_rows_);
            }
            pub inline fn getGroupSubsetCount(self: *const T, pc_visible_rows_: ?*u32) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).GetGroupSubsetCount(@as(*const IFolderView2, @ptrCast(self)), pc_visible_rows_);
            }
            pub inline fn setRedraw(self: *const T, f_redraw_on_: BOOL) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).SetRedraw(@as(*const IFolderView2, @ptrCast(self)), f_redraw_on_);
            }
            pub inline fn isMoveInSameFolder(self: *const T) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).IsMoveInSameFolder(@as(*const IFolderView2, @ptrCast(self)));
            }
            pub inline fn doRename(self: *const T) HRESULT {
                return @as(*const IFolderView2.VTable, @ptrCast(self.vtable)).DoRename(@as(*const IFolderView2, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFolderViewSettings_Value = Guid.initString("ae8c987d-8797-4ed3-be72-2a47dd938db0");
pub const IID_IFolderViewSettings = &IID_IFolderViewSettings_Value;
pub const IFolderViewSettings = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetColumnPropertyList: *const fn (
            self: *const IFolderViewSettings,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroupByProperty: *const fn (
            self: *const IFolderViewSettings,
            pkey: ?*PROPERTYKEY,
            pf_group_ascending: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewMode: *const fn (
            self: *const IFolderViewSettings,
            plvm: ?*FOLDERLOGICALVIEWMODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIconSize: *const fn (
            self: *const IFolderViewSettings,
            pu_icon_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderFlags: *const fn (
            self: *const IFolderViewSettings,
            pfolder_mask: ?*FOLDERFLAGS,
            pfolder_flags: ?*FOLDERFLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSortColumns: *const fn (
            self: *const IFolderViewSettings,
            rg_sort_columns: [*]SORTCOLUMN,
            c_columns_in: u32,
            pc_columns_out: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetGroupSubsetCount: *const fn (
            self: *const IFolderViewSettings,
            pc_visible_rows: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getColumnPropertyList(self: *const T, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IFolderViewSettings.VTable, @ptrCast(self.vtable)).GetColumnPropertyList(@as(*const IFolderViewSettings, @ptrCast(self)), riid_, ppv_);
            }
            pub inline fn getGroupByProperty(self: *const T, pkey_: ?*PROPERTYKEY, pf_group_ascending_: ?*BOOL) HRESULT {
                return @as(*const IFolderViewSettings.VTable, @ptrCast(self.vtable)).GetGroupByProperty(@as(*const IFolderViewSettings, @ptrCast(self)), pkey_, pf_group_ascending_);
            }
            pub inline fn getViewMode(self: *const T, plvm_: ?*FOLDERLOGICALVIEWMODE) HRESULT {
                return @as(*const IFolderViewSettings.VTable, @ptrCast(self.vtable)).GetViewMode(@as(*const IFolderViewSettings, @ptrCast(self)), plvm_);
            }
            pub inline fn getIconSize(self: *const T, pu_icon_size_: ?*u32) HRESULT {
                return @as(*const IFolderViewSettings.VTable, @ptrCast(self.vtable)).GetIconSize(@as(*const IFolderViewSettings, @ptrCast(self)), pu_icon_size_);
            }
            pub inline fn getFolderFlags(self: *const T, pfolder_mask_: ?*FOLDERFLAGS, pfolder_flags_: ?*FOLDERFLAGS) HRESULT {
                return @as(*const IFolderViewSettings.VTable, @ptrCast(self.vtable)).GetFolderFlags(@as(*const IFolderViewSettings, @ptrCast(self)), pfolder_mask_, pfolder_flags_);
            }
            pub inline fn getSortColumns(self: *const T, rg_sort_columns_: [*]SORTCOLUMN, c_columns_in_: u32, pc_columns_out_: ?*u32) HRESULT {
                return @as(*const IFolderViewSettings.VTable, @ptrCast(self.vtable)).GetSortColumns(@as(*const IFolderViewSettings, @ptrCast(self)), rg_sort_columns_, c_columns_in_, pc_columns_out_);
            }
            pub inline fn getGroupSubsetCount(self: *const T, pc_visible_rows_: ?*u32) HRESULT {
                return @as(*const IFolderViewSettings.VTable, @ptrCast(self.vtable)).GetGroupSubsetCount(@as(*const IFolderViewSettings, @ptrCast(self)), pc_visible_rows_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IInitializeNetworkFolder_Value = Guid.initString("6e0f9881-42a8-4f2a-97f8-8af4e026d92d");
pub const IID_IInitializeNetworkFolder = &IID_IInitializeNetworkFolder_Value;
pub const IInitializeNetworkFolder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IInitializeNetworkFolder,
            pidl: ?*ITEMIDLIST,
            pidl_target: ?*ITEMIDLIST,
            u_display_type: u32,
            psz_res_name: ?[*:0]const u16,
            psz_provider: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, pidl_: ?*ITEMIDLIST, pidl_target_: ?*ITEMIDLIST, u_display_type_: u32, psz_res_name_: ?[*:0]const u16, psz_provider_: ?[*:0]const u16) HRESULT {
                return @as(*const IInitializeNetworkFolder.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IInitializeNetworkFolder, @ptrCast(self)), pidl_, pidl_target_, u_display_type_, psz_res_name_, psz_provider_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_INetworkFolderInternal_Value = Guid.initString("ceb38218-c971-47bb-a703-f0bc99ccdb81");
pub const IID_INetworkFolderInternal = &IID_INetworkFolderInternal_Value;
pub const INetworkFolderInternal = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetResourceDisplayType: *const fn (
            self: *const INetworkFolderInternal,
            display_type: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDList: *const fn (
            self: *const INetworkFolderInternal,
            id_list: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProvider: *const fn (
            self: *const INetworkFolderInternal,
            item_id_count: u32,
            item_ids: [*]?*ITEMIDLIST,
            provider_max_length: u32,
            provider: [*:0]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getResourceDisplayType(self: *const T, display_type_: ?*u32) HRESULT {
                return @as(*const INetworkFolderInternal.VTable, @ptrCast(self.vtable)).GetResourceDisplayType(@as(*const INetworkFolderInternal, @ptrCast(self)), display_type_);
            }
            pub inline fn getIDList(self: *const T, id_list_: ?*?*ITEMIDLIST) HRESULT {
                return @as(*const INetworkFolderInternal.VTable, @ptrCast(self.vtable)).GetIDList(@as(*const INetworkFolderInternal, @ptrCast(self)), id_list_);
            }
            pub inline fn getProvider(self: *const T, item_id_count_: u32, item_ids_: [*]?*ITEMIDLIST, provider_max_length_: u32, provider_: [*:0]u16) HRESULT {
                return @as(*const INetworkFolderInternal.VTable, @ptrCast(self.vtable)).GetProvider(@as(*const INetworkFolderInternal, @ptrCast(self)), item_id_count_, item_ids_, provider_max_length_, provider_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPreviewHandlerVisuals_Value = Guid.initString("196bf9a5-b346-4ef0-aa1e-5dcdb76768b1");
pub const IID_IPreviewHandlerVisuals = &IID_IPreviewHandlerVisuals_Value;
pub const IPreviewHandlerVisuals = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetBackgroundColor: *const fn (
            self: *const IPreviewHandlerVisuals,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFont: *const fn (
            self: *const IPreviewHandlerVisuals,
            plf: ?*const LOGFONTW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTextColor: *const fn (
            self: *const IPreviewHandlerVisuals,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setBackgroundColor(self: *const T, color_: u32) HRESULT {
                return @as(*const IPreviewHandlerVisuals.VTable, @ptrCast(self.vtable)).SetBackgroundColor(@as(*const IPreviewHandlerVisuals, @ptrCast(self)), color_);
            }
            pub inline fn setFont(self: *const T, plf_: ?*const LOGFONTW) HRESULT {
                return @as(*const IPreviewHandlerVisuals.VTable, @ptrCast(self.vtable)).SetFont(@as(*const IPreviewHandlerVisuals, @ptrCast(self)), plf_);
            }
            pub inline fn setTextColor(self: *const T, color_: u32) HRESULT {
                return @as(*const IPreviewHandlerVisuals.VTable, @ptrCast(self.vtable)).SetTextColor(@as(*const IPreviewHandlerVisuals, @ptrCast(self)), color_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICommDlgBrowser_Value = Guid.initString("000214f1-0000-0000-c000-000000000046");
pub const IID_ICommDlgBrowser = &IID_ICommDlgBrowser_Value;
pub const ICommDlgBrowser = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnDefaultCommand: *const fn (
            self: *const ICommDlgBrowser,
            ppshv: ?*IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnStateChange: *const fn (
            self: *const ICommDlgBrowser,
            ppshv: ?*IShellView,
            u_change: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IncludeObject: *const fn (
            self: *const ICommDlgBrowser,
            ppshv: ?*IShellView,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onDefaultCommand(self: *const T, ppshv_: ?*IShellView) HRESULT {
                return @as(*const ICommDlgBrowser.VTable, @ptrCast(self.vtable)).OnDefaultCommand(@as(*const ICommDlgBrowser, @ptrCast(self)), ppshv_);
            }
            pub inline fn onStateChange(self: *const T, ppshv_: ?*IShellView, u_change_: u32) HRESULT {
                return @as(*const ICommDlgBrowser.VTable, @ptrCast(self.vtable)).OnStateChange(@as(*const ICommDlgBrowser, @ptrCast(self)), ppshv_, u_change_);
            }
            pub inline fn includeObject(self: *const T, ppshv_: ?*IShellView, pidl_: ?*ITEMIDLIST) HRESULT {
                return @as(*const ICommDlgBrowser.VTable, @ptrCast(self.vtable)).IncludeObject(@as(*const ICommDlgBrowser, @ptrCast(self)), ppshv_, pidl_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICommDlgBrowser2_Value = Guid.initString("10339516-2894-11d2-9039-00c04f8eeb3e");
pub const IID_ICommDlgBrowser2 = &IID_ICommDlgBrowser2_Value;
pub const ICommDlgBrowser2 = extern struct {
    pub const VTable = extern struct {
        base: ICommDlgBrowser.VTable,
        Notify: *const fn (
            self: *const ICommDlgBrowser2,
            ppshv: ?*IShellView,
            dw_notify_type: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultMenuText: *const fn (
            self: *const ICommDlgBrowser2,
            ppshv: ?*IShellView,
            psz_text: [*:0]u16,
            cch_max: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewFlags: *const fn (
            self: *const ICommDlgBrowser2,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICommDlgBrowser.MethodMixin(T);
            pub inline fn notify(self: *const T, ppshv_: ?*IShellView, dw_notify_type_: u32) HRESULT {
                return @as(*const ICommDlgBrowser2.VTable, @ptrCast(self.vtable)).Notify(@as(*const ICommDlgBrowser2, @ptrCast(self)), ppshv_, dw_notify_type_);
            }
            pub inline fn getDefaultMenuText(self: *const T, ppshv_: ?*IShellView, psz_text_: [*:0]u16, cch_max_: i32) HRESULT {
                return @as(*const ICommDlgBrowser2.VTable, @ptrCast(self.vtable)).GetDefaultMenuText(@as(*const ICommDlgBrowser2, @ptrCast(self)), ppshv_, psz_text_, cch_max_);
            }
            pub inline fn getViewFlags(self: *const T, pdw_flags_: ?*u32) HRESULT {
                return @as(*const ICommDlgBrowser2.VTable, @ptrCast(self.vtable)).GetViewFlags(@as(*const ICommDlgBrowser2, @ptrCast(self)), pdw_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CM_MASK = enum(i32) {
    WIDTH = 1,
    DEFAULTWIDTH = 2,
    IDEALWIDTH = 4,
    NAME = 8,
    STATE = 16,
};
pub const CM_MASK_WIDTH = CM_MASK.WIDTH;
pub const CM_MASK_DEFAULTWIDTH = CM_MASK.DEFAULTWIDTH;
pub const CM_MASK_IDEALWIDTH = CM_MASK.IDEALWIDTH;
pub const CM_MASK_NAME = CM_MASK.NAME;
pub const CM_MASK_STATE = CM_MASK.STATE;

pub const CM_STATE = enum(i32) {
    NONE = 0,
    VISIBLE = 1,
    FIXEDWIDTH = 2,
    NOSORTBYFOLDERNESS = 4,
    ALWAYSVISIBLE = 8,
};
pub const CM_STATE_NONE = CM_STATE.NONE;
pub const CM_STATE_VISIBLE = CM_STATE.VISIBLE;
pub const CM_STATE_FIXEDWIDTH = CM_STATE.FIXEDWIDTH;
pub const CM_STATE_NOSORTBYFOLDERNESS = CM_STATE.NOSORTBYFOLDERNESS;
pub const CM_STATE_ALWAYSVISIBLE = CM_STATE.ALWAYSVISIBLE;

pub const CM_ENUM_FLAGS = enum(i32) {
    ALL = 1,
    VISIBLE = 2,
};
pub const CM_ENUM_ALL = CM_ENUM_FLAGS.ALL;
pub const CM_ENUM_VISIBLE = CM_ENUM_FLAGS.VISIBLE;

pub const CM_SET_WIDTH_VALUE = enum(i32) {
    USEDEFAULT = -1,
    AUTOSIZE = -2,
};
pub const CM_WIDTH_USEDEFAULT = CM_SET_WIDTH_VALUE.USEDEFAULT;
pub const CM_WIDTH_AUTOSIZE = CM_SET_WIDTH_VALUE.AUTOSIZE;

pub const CM_COLUMNINFO = extern struct {
    cbSize: u32,
    dwMask: u32,
    dwState: u32,
    uWidth: u32,
    uDefaultWidth: u32,
    uIdealWidth: u32,
    wszName: [80]u16,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IColumnManager_Value = Guid.initString("d8ec27bb-3f3b-4042-b10a-4acfd924d453");
pub const IID_IColumnManager = &IID_IColumnManager_Value;
pub const IColumnManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetColumnInfo: *const fn (
            self: *const IColumnManager,
            propkey: ?*const PROPERTYKEY,
            pcmci: ?*const CM_COLUMNINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnInfo: *const fn (
            self: *const IColumnManager,
            propkey: ?*const PROPERTYKEY,
            pcmci: ?*CM_COLUMNINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnCount: *const fn (
            self: *const IColumnManager,
            dw_flags: CM_ENUM_FLAGS,
            pu_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumns: *const fn (
            self: *const IColumnManager,
            dw_flags: CM_ENUM_FLAGS,
            rgkey_order: [*]PROPERTYKEY,
            c_columns: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColumns: *const fn (
            self: *const IColumnManager,
            rgkey_order: [*]const PROPERTYKEY,
            c_visible: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setColumnInfo(self: *const T, propkey_: ?*const PROPERTYKEY, pcmci_: ?*const CM_COLUMNINFO) HRESULT {
                return @as(*const IColumnManager.VTable, @ptrCast(self.vtable)).SetColumnInfo(@as(*const IColumnManager, @ptrCast(self)), propkey_, pcmci_);
            }
            pub inline fn getColumnInfo(self: *const T, propkey_: ?*const PROPERTYKEY, pcmci_: ?*CM_COLUMNINFO) HRESULT {
                return @as(*const IColumnManager.VTable, @ptrCast(self.vtable)).GetColumnInfo(@as(*const IColumnManager, @ptrCast(self)), propkey_, pcmci_);
            }
            pub inline fn getColumnCount(self: *const T, dw_flags_: CM_ENUM_FLAGS, pu_count_: ?*u32) HRESULT {
                return @as(*const IColumnManager.VTable, @ptrCast(self.vtable)).GetColumnCount(@as(*const IColumnManager, @ptrCast(self)), dw_flags_, pu_count_);
            }
            pub inline fn getColumns(self: *const T, dw_flags_: CM_ENUM_FLAGS, rgkey_order_: [*]PROPERTYKEY, c_columns_: u32) HRESULT {
                return @as(*const IColumnManager.VTable, @ptrCast(self.vtable)).GetColumns(@as(*const IColumnManager, @ptrCast(self)), dw_flags_, rgkey_order_, c_columns_);
            }
            pub inline fn setColumns(self: *const T, rgkey_order_: [*]const PROPERTYKEY, c_visible_: u32) HRESULT {
                return @as(*const IColumnManager.VTable, @ptrCast(self.vtable)).SetColumns(@as(*const IColumnManager, @ptrCast(self)), rgkey_order_, c_visible_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFolderFilterSite_Value = Guid.initString("c0a651f5-b48b-11d2-b5ed-006097c686f6");
pub const IID_IFolderFilterSite = &IID_IFolderFilterSite_Value;
pub const IFolderFilterSite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFilter: *const fn (
            self: *const IFolderFilterSite,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setFilter(self: *const T, punk_: ?*IUnknown) HRESULT {
                return @as(*const IFolderFilterSite.VTable, @ptrCast(self.vtable)).SetFilter(@as(*const IFolderFilterSite, @ptrCast(self)), punk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFolderFilter_Value = Guid.initString("9cc22886-dc8e-11d2-b1d0-00c04f8eeb3e");
pub const IID_IFolderFilter = &IID_IFolderFilter_Value;
pub const IFolderFilter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ShouldShow: *const fn (
            self: *const IFolderFilter,
            psf: ?*IShellFolder,
            pidl_folder: ?*ITEMIDLIST,
            pidl_item: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumFlags: *const fn (
            self: *const IFolderFilter,
            psf: ?*IShellFolder,
            pidl_folder: ?*ITEMIDLIST,
            phwnd: ?*?HWND,
            pgrf_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn shouldShow(self: *const T, psf_: ?*IShellFolder, pidl_folder_: ?*ITEMIDLIST, pidl_item_: ?*ITEMIDLIST) HRESULT {
                return @as(*const IFolderFilter.VTable, @ptrCast(self.vtable)).ShouldShow(@as(*const IFolderFilter, @ptrCast(self)), psf_, pidl_folder_, pidl_item_);
            }
            pub inline fn getEnumFlags(self: *const T, psf_: ?*IShellFolder, pidl_folder_: ?*ITEMIDLIST, phwnd_: ?*?HWND, pgrf_flags_: ?*u32) HRESULT {
                return @as(*const IFolderFilter.VTable, @ptrCast(self.vtable)).GetEnumFlags(@as(*const IFolderFilter, @ptrCast(self)), psf_, pidl_folder_, phwnd_, pgrf_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IInputObjectSite_Value = Guid.initString("f1db8392-7331-11d0-8c99-00a0c92dbfe8");
pub const IID_IInputObjectSite = &IID_IInputObjectSite_Value;
pub const IInputObjectSite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnFocusChangeIS: *const fn (
            self: *const IInputObjectSite,
            punk_obj: ?*IUnknown,
            f_set_focus: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onFocusChangeIS(self: *const T, punk_obj_: ?*IUnknown, f_set_focus_: BOOL) HRESULT {
                return @as(*const IInputObjectSite.VTable, @ptrCast(self.vtable)).OnFocusChangeIS(@as(*const IInputObjectSite, @ptrCast(self)), punk_obj_, f_set_focus_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IInputObject_Value = Guid.initString("68284faa-6a48-11d0-8c78-00c04fd918b4");
pub const IID_IInputObject = &IID_IInputObject_Value;
pub const IInputObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        UIActivateIO: *const fn (
            self: *const IInputObject,
            f_activate: BOOL,
            p_msg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasFocusIO: *const fn (
            self: *const IInputObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateAcceleratorIO: *const fn (
            self: *const IInputObject,
            p_msg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn uiActivateIO(self: *const T, f_activate_: BOOL, p_msg_: ?*MSG) HRESULT {
                return @as(*const IInputObject.VTable, @ptrCast(self.vtable)).UIActivateIO(@as(*const IInputObject, @ptrCast(self)), f_activate_, p_msg_);
            }
            pub inline fn hasFocusIO(self: *const T) HRESULT {
                return @as(*const IInputObject.VTable, @ptrCast(self.vtable)).HasFocusIO(@as(*const IInputObject, @ptrCast(self)));
            }
            pub inline fn translateAcceleratorIO(self: *const T, p_msg_: ?*MSG) HRESULT {
                return @as(*const IInputObject.VTable, @ptrCast(self.vtable)).TranslateAcceleratorIO(@as(*const IInputObject, @ptrCast(self)), p_msg_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IInputObject2_Value = Guid.initString("6915c085-510b-44cd-94af-28dfa56cf92b");
pub const IID_IInputObject2 = &IID_IInputObject2_Value;
pub const IInputObject2 = extern struct {
    pub const VTable = extern struct {
        base: IInputObject.VTable,
        TranslateAcceleratorGlobal: *const fn (
            self: *const IInputObject2,
            p_msg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IInputObject.MethodMixin(T);
            pub inline fn translateAcceleratorGlobal(self: *const T, p_msg_: ?*MSG) HRESULT {
                return @as(*const IInputObject2.VTable, @ptrCast(self.vtable)).TranslateAcceleratorGlobal(@as(*const IInputObject2, @ptrCast(self)), p_msg_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellIcon_Value = Guid.initString("000214e5-0000-0000-c000-000000000046");
pub const IID_IShellIcon = &IID_IShellIcon_Value;
pub const IShellIcon = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIconOf: *const fn (
            self: *const IShellIcon,
            pidl: ?*ITEMIDLIST,
            flags: u32,
            p_icon_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getIconOf(self: *const T, pidl_: ?*ITEMIDLIST, flags_: u32, p_icon_index_: ?*i32) HRESULT {
                return @as(*const IShellIcon.VTable, @ptrCast(self.vtable)).GetIconOf(@as(*const IShellIcon, @ptrCast(self)), pidl_, flags_, p_icon_index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellBrowser_Value = Guid.initString("000214e2-0000-0000-c000-000000000046");
pub const IID_IShellBrowser = &IID_IShellBrowser_Value;
pub const IShellBrowser = extern struct {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        InsertMenusSB: *const fn (
            self: *const IShellBrowser,
            hmenu_shared: ?HMENU,
            lp_menu_widths: ?*OleMenuGroupWidths,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMenuSB: *const fn (
            self: *const IShellBrowser,
            hmenu_shared: ?HMENU,
            holemenu_res: isize,
            hwnd_active_object: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveMenusSB: *const fn (
            self: *const IShellBrowser,
            hmenu_shared: ?HMENU,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStatusTextSB: *const fn (
            self: *const IShellBrowser,
            psz_status_text: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableModelessSB: *const fn (
            self: *const IShellBrowser,
            f_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateAcceleratorSB: *const fn (
            self: *const IShellBrowser,
            pmsg: ?*MSG,
            w_i_d: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BrowseObject: *const fn (
            self: *const IShellBrowser,
            pidl: ?*ITEMIDLIST,
            w_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewStateStream: *const fn (
            self: *const IShellBrowser,
            grf_mode: u32,
            pp_strm: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetControlWindow: *const fn (
            self: *const IShellBrowser,
            id: u32,
            phwnd: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendControlMsg: *const fn (
            self: *const IShellBrowser,
            id: u32,
            u_msg: u32,
            w_param: WPARAM,
            l_param: LPARAM,
            pret: ?*LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryActiveShellView: *const fn (
            self: *const IShellBrowser,
            ppshv: ?*?*IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnViewWindowActive: *const fn (
            self: *const IShellBrowser,
            pshv: ?*IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetToolbarItems: *const fn (
            self: *const IShellBrowser,
            lp_buttons: ?[*]TBBUTTON,
            n_buttons: u32,
            u_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOleWindow.MethodMixin(T);
            pub inline fn insertMenusSB(self: *const T, hmenu_shared_: ?HMENU, lp_menu_widths_: ?*OleMenuGroupWidths) HRESULT {
                return @as(*const IShellBrowser.VTable, @ptrCast(self.vtable)).InsertMenusSB(@as(*const IShellBrowser, @ptrCast(self)), hmenu_shared_, lp_menu_widths_);
            }
            pub inline fn setMenuSB(self: *const T, hmenu_shared_: ?HMENU, holemenu_res_: isize, hwnd_active_object_: ?HWND) HRESULT {
                return @as(*const IShellBrowser.VTable, @ptrCast(self.vtable)).SetMenuSB(@as(*const IShellBrowser, @ptrCast(self)), hmenu_shared_, holemenu_res_, hwnd_active_object_);
            }
            pub inline fn removeMenusSB(self: *const T, hmenu_shared_: ?HMENU) HRESULT {
                return @as(*const IShellBrowser.VTable, @ptrCast(self.vtable)).RemoveMenusSB(@as(*const IShellBrowser, @ptrCast(self)), hmenu_shared_);
            }
            pub inline fn setStatusTextSB(self: *const T, psz_status_text_: ?[*:0]const u16) HRESULT {
                return @as(*const IShellBrowser.VTable, @ptrCast(self.vtable)).SetStatusTextSB(@as(*const IShellBrowser, @ptrCast(self)), psz_status_text_);
            }
            pub inline fn enableModelessSB(self: *const T, f_enable_: BOOL) HRESULT {
                return @as(*const IShellBrowser.VTable, @ptrCast(self.vtable)).EnableModelessSB(@as(*const IShellBrowser, @ptrCast(self)), f_enable_);
            }
            pub inline fn translateAcceleratorSB(self: *const T, pmsg_: ?*MSG, w_i_d_: u16) HRESULT {
                return @as(*const IShellBrowser.VTable, @ptrCast(self.vtable)).TranslateAcceleratorSB(@as(*const IShellBrowser, @ptrCast(self)), pmsg_, w_i_d_);
            }
            pub inline fn browseObject(self: *const T, pidl_: ?*ITEMIDLIST, w_flags_: u32) HRESULT {
                return @as(*const IShellBrowser.VTable, @ptrCast(self.vtable)).BrowseObject(@as(*const IShellBrowser, @ptrCast(self)), pidl_, w_flags_);
            }
            pub inline fn getViewStateStream(self: *const T, grf_mode_: u32, pp_strm_: ?*?*IStream) HRESULT {
                return @as(*const IShellBrowser.VTable, @ptrCast(self.vtable)).GetViewStateStream(@as(*const IShellBrowser, @ptrCast(self)), grf_mode_, pp_strm_);
            }
            pub inline fn getControlWindow(self: *const T, id_: u32, phwnd_: ?*?HWND) HRESULT {
                return @as(*const IShellBrowser.VTable, @ptrCast(self.vtable)).GetControlWindow(@as(*const IShellBrowser, @ptrCast(self)), id_, phwnd_);
            }
            pub inline fn sendControlMsg(self: *const T, id_: u32, u_msg_: u32, w_param_: WPARAM, l_param_: LPARAM, pret_: ?*LRESULT) HRESULT {
                return @as(*const IShellBrowser.VTable, @ptrCast(self.vtable)).SendControlMsg(@as(*const IShellBrowser, @ptrCast(self)), id_, u_msg_, w_param_, l_param_, pret_);
            }
            pub inline fn queryActiveShellView(self: *const T, ppshv_: ?*?*IShellView) HRESULT {
                return @as(*const IShellBrowser.VTable, @ptrCast(self.vtable)).QueryActiveShellView(@as(*const IShellBrowser, @ptrCast(self)), ppshv_);
            }
            pub inline fn onViewWindowActive(self: *const T, pshv_: ?*IShellView) HRESULT {
                return @as(*const IShellBrowser.VTable, @ptrCast(self.vtable)).OnViewWindowActive(@as(*const IShellBrowser, @ptrCast(self)), pshv_);
            }
            pub inline fn setToolbarItems(self: *const T, lp_buttons_: ?[*]TBBUTTON, n_buttons_: u32, u_flags_: u32) HRESULT {
                return @as(*const IShellBrowser.VTable, @ptrCast(self.vtable)).SetToolbarItems(@as(*const IShellBrowser, @ptrCast(self)), lp_buttons_, n_buttons_, u_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IProfferService_Value = Guid.initString("cb728b20-f786-11ce-92ad-00aa00a74cd0");
pub const IID_IProfferService = &IID_IProfferService_Value;
pub const IProfferService = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ProfferService: *const fn (
            self: *const IProfferService,
            service_id: ?*const Guid,
            service_provider: ?*IServiceProvider,
            cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RevokeService: *const fn (
            self: *const IProfferService,
            cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn profferService(self: *const T, service_id_: ?*const Guid, service_provider_: ?*IServiceProvider, cookie_: ?*u32) HRESULT {
                return @as(*const IProfferService.VTable, @ptrCast(self.vtable)).ProfferService(@as(*const IProfferService, @ptrCast(self)), service_id_, service_provider_, cookie_);
            }
            pub inline fn revokeService(self: *const T, cookie_: u32) HRESULT {
                return @as(*const IProfferService.VTable, @ptrCast(self.vtable)).RevokeService(@as(*const IProfferService, @ptrCast(self)), cookie_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IGetServiceIds_Value = Guid.initString("4a073526-6103-4e21-b7bc-f519d1524e5d");
pub const IID_IGetServiceIds = &IID_IGetServiceIds_Value;
pub const IGetServiceIds = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetServiceIds: *const fn (
            self: *const IGetServiceIds,
            service_id_count: ?*u32,
            service_ids: [*]?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getServiceIds(self: *const T, service_id_count_: ?*u32, service_ids_: [*]?*Guid) HRESULT {
                return @as(*const IGetServiceIds.VTable, @ptrCast(self.vtable)).GetServiceIds(@as(*const IGetServiceIds, @ptrCast(self)), service_id_count_, service_ids_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SIGDN = enum(i32) {
    NORMALDISPLAY = 0,
    PARENTRELATIVEPARSING = -2147385343,
    DESKTOPABSOLUTEPARSING = -2147319808,
    PARENTRELATIVEEDITING = -2147282943,
    DESKTOPABSOLUTEEDITING = -2147172352,
    FILESYSPATH = -2147123200,
    URL = -2147057664,
    PARENTRELATIVEFORADDRESSBAR = -2146975743,
    PARENTRELATIVE = -2146959359,
    PARENTRELATIVEFORUI = -2146877439,
};
pub const SIGDN_NORMALDISPLAY = SIGDN.NORMALDISPLAY;
pub const SIGDN_PARENTRELATIVEPARSING = SIGDN.PARENTRELATIVEPARSING;
pub const SIGDN_DESKTOPABSOLUTEPARSING = SIGDN.DESKTOPABSOLUTEPARSING;
pub const SIGDN_PARENTRELATIVEEDITING = SIGDN.PARENTRELATIVEEDITING;
pub const SIGDN_DESKTOPABSOLUTEEDITING = SIGDN.DESKTOPABSOLUTEEDITING;
pub const SIGDN_FILESYSPATH = SIGDN.FILESYSPATH;
pub const SIGDN_URL = SIGDN.URL;
pub const SIGDN_PARENTRELATIVEFORADDRESSBAR = SIGDN.PARENTRELATIVEFORADDRESSBAR;
pub const SIGDN_PARENTRELATIVE = SIGDN.PARENTRELATIVE;
pub const SIGDN_PARENTRELATIVEFORUI = SIGDN.PARENTRELATIVEFORUI;

pub const _SICHINTF = enum(i32) {
    DISPLAY = 0,
    ALLFIELDS = -2147483648,
    CANONICAL = 268435456,
    TEST_FILESYSPATH_IF_NOT_EQUAL = 536870912,
};
pub const SICHINT_DISPLAY = _SICHINTF.DISPLAY;
pub const SICHINT_ALLFIELDS = _SICHINTF.ALLFIELDS;
pub const SICHINT_CANONICAL = _SICHINTF.CANONICAL;
pub const SICHINT_TEST_FILESYSPATH_IF_NOT_EQUAL = _SICHINTF.TEST_FILESYSPATH_IF_NOT_EQUAL;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellItem_Value = Guid.initString("43826d1e-e718-42ee-bc55-a1e261c37bfe");
pub const IID_IShellItem = &IID_IShellItem_Value;
pub const IShellItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BindToHandler: *const fn (
            self: *const IShellItem,
            pbc: ?*IBindCtx,
            bhid: ?*const Guid,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParent: *const fn (
            self: *const IShellItem,
            ppsi: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayName: *const fn (
            self: *const IShellItem,
            sigdn_name: SIGDN,
            ppsz_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributes: *const fn (
            self: *const IShellItem,
            sfgao_mask: u32,
            psfgao_attribs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Compare: *const fn (
            self: *const IShellItem,
            psi: ?*IShellItem,
            hint: u32,
            pi_order: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn bindToHandler(self: *const T, pbc_: ?*IBindCtx, bhid_: ?*const Guid, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IShellItem.VTable, @ptrCast(self.vtable)).BindToHandler(@as(*const IShellItem, @ptrCast(self)), pbc_, bhid_, riid_, ppv_);
            }
            pub inline fn getParent(self: *const T, ppsi_: ?*?*IShellItem) HRESULT {
                return @as(*const IShellItem.VTable, @ptrCast(self.vtable)).GetParent(@as(*const IShellItem, @ptrCast(self)), ppsi_);
            }
            pub inline fn getDisplayName(self: *const T, sigdn_name_: SIGDN, ppsz_name_: ?*?PWSTR) HRESULT {
                return @as(*const IShellItem.VTable, @ptrCast(self.vtable)).GetDisplayName(@as(*const IShellItem, @ptrCast(self)), sigdn_name_, ppsz_name_);
            }
            pub inline fn getAttributes(self: *const T, sfgao_mask_: u32, psfgao_attribs_: ?*u32) HRESULT {
                return @as(*const IShellItem.VTable, @ptrCast(self.vtable)).GetAttributes(@as(*const IShellItem, @ptrCast(self)), sfgao_mask_, psfgao_attribs_);
            }
            pub inline fn compare(self: *const T, psi_: ?*IShellItem, hint_: u32, pi_order_: ?*i32) HRESULT {
                return @as(*const IShellItem.VTable, @ptrCast(self.vtable)).Compare(@as(*const IShellItem, @ptrCast(self)), psi_, hint_, pi_order_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DATAOBJ_GET_ITEM_FLAGS = enum(i32) {
    DEFAULT = 0,
    TRAVERSE_LINK = 1,
    NO_HDROP = 2,
    NO_URL = 4,
    ONLY_IF_ONE = 8,
};
pub const DOGIF_DEFAULT = DATAOBJ_GET_ITEM_FLAGS.DEFAULT;
pub const DOGIF_TRAVERSE_LINK = DATAOBJ_GET_ITEM_FLAGS.TRAVERSE_LINK;
pub const DOGIF_NO_HDROP = DATAOBJ_GET_ITEM_FLAGS.NO_HDROP;
pub const DOGIF_NO_URL = DATAOBJ_GET_ITEM_FLAGS.NO_URL;
pub const DOGIF_ONLY_IF_ONE = DATAOBJ_GET_ITEM_FLAGS.ONLY_IF_ONE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IShellItem2_Value = Guid.initString("7e9fb0d3-919f-4307-ab2e-9b1860310c93");
pub const IID_IShellItem2 = &IID_IShellItem2_Value;
pub const IShellItem2 = extern struct {
    pub const VTable = extern struct {
        base: IShellItem.VTable,
        GetPropertyStore: *const fn (
            self: *const IShellItem2,
            flags: GETPROPERTYSTOREFLAGS,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyStoreWithCreateObject: *const fn (
            self: *const IShellItem2,
            flags: GETPROPERTYSTOREFLAGS,
            punk_create_object: ?*IUnknown,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyStoreForKeys: *const fn (
            self: *const IShellItem2,
            rg_keys: [*]const PROPERTYKEY,
            c_keys: u32,
            flags: GETPROPERTYSTOREFLAGS,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyDescriptionList: *const fn (
            self: *const IShellItem2,
            key_type: ?*const PROPERTYKEY,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: *const fn (
            self: *const IShellItem2,
            pbc: ?*IBindCtx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn (
            self: *const IShellItem2,
            key: ?*const PROPERTYKEY,
            ppropvar: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCLSID: *const fn (
            self: *const IShellItem2,
            key: ?*const PROPERTYKEY,
            pclsid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileTime: *const fn (
            self: *const IShellItem2,
            key: ?*const PROPERTYKEY,
            pft: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInt32: *const fn (
            self: *const IShellItem2,
            key: ?*const PROPERTYKEY,
            pi: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetString: *const fn (
            self: *const IShellItem2,
            key: ?*const PROPERTYKEY,
            ppsz: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUInt32: *const fn (
            self: *const IShellItem2,
            key: ?*const PROPERTYKEY,
            pui: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUInt64: *const fn (
            self: *const IShellItem2,
            key: ?*const PROPERTYKEY,
            pull: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBool: *const fn (
            self: *const IShellItem2,
            key: ?*const PROPERTYKEY,
            pf: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellItem.MethodMixin(T);
            pub inline fn getPropertyStore(self: *const T, flags_: GETPROPERTYSTOREFLAGS, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IShellItem2.VTable, @ptrCast(self.vtable)).GetPropertyStore(@as(*const IShellItem2, @ptrCast(self)), flags_, riid_, ppv_);
            }
            pub inline fn getPropertyStoreWithCreateObject(self: *const T, flags_: GETPROPERTYSTOREFLAGS, punk_create_object_: ?*IUnknown, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IShellItem2.VTable, @ptrCast(self.vtable)).GetPropertyStoreWithCreateObject(@as(*const IShellItem2, @ptrCast(self)), flags_, punk_create_object_, riid_, ppv_);
            }
            pub inline fn getPropertyStoreForKeys(self: *const T, rg_keys_: [*]const PROPERTYKEY, c_keys_: u32, flags_: GETPROPERTYSTOREFLAGS, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IShellItem2.VTable, @ptrCast(self.vtable)).GetPropertyStoreForKeys(@as(*const IShellItem2, @ptrCast(self)), rg_keys_, c_keys_, flags_, riid_, ppv_);
            }
            pub inline fn getPropertyDescriptionList(self: *const T, key_type_: ?*const PROPERTYKEY, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IShellItem2.VTable, @ptrCast(self.vtable)).GetPropertyDescriptionList(@as(*const IShellItem2, @ptrCast(self)), key_type_, riid_, ppv_);
            }
            pub inline fn update(self: *const T, pbc_: ?*IBindCtx) HRESULT {
                return @as(*const IShellItem2.VTable, @ptrCast(self.vtable)).Update(@as(*const IShellItem2, @ptrCast(self)), pbc_);
            }
            pub inline fn getProperty(self: *const T, key_: ?*const PROPERTYKEY, ppropvar_: ?*PROPVARIANT) HRESULT {
                return @as(*const IShellItem2.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IShellItem2, @ptrCast(self)), key_, ppropvar_);
            }
            pub inline fn getCLSID(self: *const T, key_: ?*const PROPERTYKEY, pclsid_: ?*Guid) HRESULT {
                return @as(*const IShellItem2.VTable, @ptrCast(self.vtable)).GetCLSID(@as(*const IShellItem2, @ptrCast(self)), key_, pclsid_);
            }
            pub inline fn getFileTime(self: *const T, key_: ?*const PROPERTYKEY, pft_: ?*FILETIME) HRESULT {
                return @as(*const IShellItem2.VTable, @ptrCast(self.vtable)).GetFileTime(@as(*const IShellItem2, @ptrCast(self)), key_, pft_);
            }
            pub inline fn getInt32(self: *const T, key_: ?*const PROPERTYKEY, pi_: ?*i32) HRESULT {
                return @as(*const IShellItem2.VTable, @ptrCast(self.vtable)).GetInt32(@as(*const IShellItem2, @ptrCast(self)), key_, pi_);
            }
            pub inline fn getString(self: *const T, key_: ?*const PROPERTYKEY, ppsz_: ?*?PWSTR) HRESULT {
                return @as(*const IShellItem2.VTable, @ptrCast(self.vtable)).GetString(@as(*const IShellItem2, @ptrCast(self)), key_, ppsz_);
            }
            pub inline fn getUInt32(self: *const T, key_: ?*const PROPERTYKEY, pui_: ?*u32) HRESULT {
                return @as(*const IShellItem2.VTable, @ptrCast(self.vtable)).GetUInt32(@as(*const IShellItem2, @ptrCast(self)), key_, pui_);
            }
            pub inline fn getUInt64(self: *const T, key_: ?*const PROPERTYKEY, pull_: ?*u64) HRESULT {
                return @as(*const IShellItem2.VTable, @ptrCast(self.vtable)).GetUInt64(@as(*const IShellItem2, @ptrCast(self)), key_, pull_);
            }
            pub inline fn getBool(self: *const T, key_: ?*const PROPERTYKEY, pf_: ?*BOOL) HRESULT {
                return @as(*const IShellItem2.VTable, @ptrCast(self.vtable)).GetBool(@as(*const IShellItem2, @ptrCast(self)), key_, pf_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SIIGBF = enum(i32) {
    RESIZETOFIT = 0,
    BIGGERSIZEOK = 1,
    MEMORYONLY = 2,
    ICONONLY = 4,
    THUMBNAILONLY = 8,
    INCACHEONLY = 16,
    CROPTOSQUARE = 32,
    WIDETHUMBNAILS = 64,
    ICONBACKGROUND = 128,
    SCALEUP = 256,
    _,
    pub fn initFlags(o: struct {
        RESIZETOFIT: u1 = 0,
        BIGGERSIZEOK: u1 = 0,
        MEMORYONLY: u1 = 0,
        ICONONLY: u1 = 0,
        THUMBNAILONLY: u1 = 0,
        INCACHEONLY: u1 = 0,
        CROPTOSQUARE: u1 = 0,
        WIDETHUMBNAILS: u1 = 0,
        ICONBACKGROUND: u1 = 0,
        SCALEUP: u1 = 0,
    }) SIIGBF {
        return @as(SIIGBF, @enumFromInt((if (o.RESIZETOFIT == 1) @intFromEnum(SIIGBF.RESIZETOFIT) else 0) | (if (o.BIGGERSIZEOK == 1) @intFromEnum(SIIGBF.BIGGERSIZEOK) else 0) | (if (o.MEMORYONLY == 1) @intFromEnum(SIIGBF.MEMORYONLY) else 0) | (if (o.ICONONLY == 1) @intFromEnum(SIIGBF.ICONONLY) else 0) | (if (o.THUMBNAILONLY == 1) @intFromEnum(SIIGBF.THUMBNAILONLY) else 0) | (if (o.INCACHEONLY == 1) @intFromEnum(SIIGBF.INCACHEONLY) else 0) | (if (o.CROPTOSQUARE == 1) @intFromEnum(SIIGBF.CROPTOSQUARE) else 0) | (if (o.WIDETHUMBNAILS == 1) @intFromEnum(SIIGBF.WIDETHUMBNAILS) else 0) | (if (o.ICONBACKGROUND == 1) @intFromEnum(SIIGBF.ICONBACKGROUND) else 0) | (if (o.SCALEUP == 1) @intFromEnum(SIIGBF.SCALEUP) else 0)));
    }
};
pub const SIIGBF_RESIZETOFIT = SIIGBF.RESIZETOFIT;
pub const SIIGBF_BIGGERSIZEOK = SIIGBF.BIGGERSIZEOK;
pub const SIIGBF_MEMORYONLY = SIIGBF.MEMORYONLY;
pub const SIIGBF_ICONONLY = SIIGBF.ICONONLY;
pub const SIIGBF_THUMBNAILONLY = SIIGBF.THUMBNAILONLY;
pub const SIIGBF_INCACHEONLY = SIIGBF.INCACHEONLY;
pub const SIIGBF_CROPTOSQUARE = SIIGBF.CROPTOSQUARE;
pub const SIIGBF_WIDETHUMBNAILS = SIIGBF.WIDETHUMBNAILS;
pub const SIIGBF_ICONBACKGROUND = SIIGBF.ICONBACKGROUND;
pub const SIIGBF_SCALEUP = SIIGBF.SCALEUP;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IShellItemImageFactory_Value = Guid.initString("bcc18b79-ba16-442f-80c4-8a59c30c463b");
pub const IID_IShellItemImageFactory = &IID_IShellItemImageFactory_Value;
pub const IShellItemImageFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetImage: *const fn (
            self: *const IShellItemImageFactory,
            size: SIZE,
            flags: SIIGBF,
            phbm: ?*?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getImage(self: *const T, size_: SIZE, flags_: SIIGBF, phbm_: ?*?HBITMAP) HRESULT {
                return @as(*const IShellItemImageFactory.VTable, @ptrCast(self.vtable)).GetImage(@as(*const IShellItemImageFactory, @ptrCast(self)), size_, flags_, phbm_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumShellItems_Value = Guid.initString("70629033-e363-4a28-a567-0db78006e6d7");
pub const IID_IEnumShellItems = &IID_IEnumShellItems_Value;
pub const IEnumShellItems = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumShellItems,
            celt: u32,
            rgelt: [*]?*IShellItem,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumShellItems,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumShellItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumShellItems,
            ppenum: ?*?*IEnumShellItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: [*]?*IShellItem, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumShellItems.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumShellItems, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumShellItems.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumShellItems, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumShellItems.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumShellItems, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumShellItems) HRESULT {
                return @as(*const IEnumShellItems.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumShellItems, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const STGOP = enum(i32) {
    MOVE = 1,
    COPY = 2,
    SYNC = 3,
    REMOVE = 5,
    RENAME = 6,
    APPLYPROPERTIES = 8,
    NEW = 10,
};
pub const STGOP_MOVE = STGOP.MOVE;
pub const STGOP_COPY = STGOP.COPY;
pub const STGOP_SYNC = STGOP.SYNC;
pub const STGOP_REMOVE = STGOP.REMOVE;
pub const STGOP_RENAME = STGOP.RENAME;
pub const STGOP_APPLYPROPERTIES = STGOP.APPLYPROPERTIES;
pub const STGOP_NEW = STGOP.NEW;

pub const _TRANSFER_SOURCE_FLAGS = enum(i32) {
    NORMAL = 0,
    // FAIL_EXIST = 0, this enum value conflicts with NORMAL
    RENAME_EXIST = 1,
    OVERWRITE_EXIST = 2,
    ALLOW_DECRYPTION = 4,
    NO_SECURITY = 8,
    COPY_CREATION_TIME = 16,
    COPY_WRITE_TIME = 32,
    USE_FULL_ACCESS = 64,
    DELETE_RECYCLE_IF_POSSIBLE = 128,
    COPY_HARD_LINK = 256,
    COPY_LOCALIZED_NAME = 512,
    MOVE_AS_COPY_DELETE = 1024,
    SUSPEND_SHELLEVENTS = 2048,
};
pub const TSF_NORMAL = _TRANSFER_SOURCE_FLAGS.NORMAL;
pub const TSF_FAIL_EXIST = _TRANSFER_SOURCE_FLAGS.NORMAL;
pub const TSF_RENAME_EXIST = _TRANSFER_SOURCE_FLAGS.RENAME_EXIST;
pub const TSF_OVERWRITE_EXIST = _TRANSFER_SOURCE_FLAGS.OVERWRITE_EXIST;
pub const TSF_ALLOW_DECRYPTION = _TRANSFER_SOURCE_FLAGS.ALLOW_DECRYPTION;
pub const TSF_NO_SECURITY = _TRANSFER_SOURCE_FLAGS.NO_SECURITY;
pub const TSF_COPY_CREATION_TIME = _TRANSFER_SOURCE_FLAGS.COPY_CREATION_TIME;
pub const TSF_COPY_WRITE_TIME = _TRANSFER_SOURCE_FLAGS.COPY_WRITE_TIME;
pub const TSF_USE_FULL_ACCESS = _TRANSFER_SOURCE_FLAGS.USE_FULL_ACCESS;
pub const TSF_DELETE_RECYCLE_IF_POSSIBLE = _TRANSFER_SOURCE_FLAGS.DELETE_RECYCLE_IF_POSSIBLE;
pub const TSF_COPY_HARD_LINK = _TRANSFER_SOURCE_FLAGS.COPY_HARD_LINK;
pub const TSF_COPY_LOCALIZED_NAME = _TRANSFER_SOURCE_FLAGS.COPY_LOCALIZED_NAME;
pub const TSF_MOVE_AS_COPY_DELETE = _TRANSFER_SOURCE_FLAGS.MOVE_AS_COPY_DELETE;
pub const TSF_SUSPEND_SHELLEVENTS = _TRANSFER_SOURCE_FLAGS.SUSPEND_SHELLEVENTS;

pub const _TRANSFER_ADVISE_STATE = enum(i32) {
    NONE = 0,
    PERFORMING = 1,
    PREPARING = 2,
    INDETERMINATE = 4,
};
pub const TS_NONE = _TRANSFER_ADVISE_STATE.NONE;
pub const TS_PERFORMING = _TRANSFER_ADVISE_STATE.PERFORMING;
pub const TS_PREPARING = _TRANSFER_ADVISE_STATE.PREPARING;
pub const TS_INDETERMINATE = _TRANSFER_ADVISE_STATE.INDETERMINATE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITransferAdviseSink_Value = Guid.initString("d594d0d8-8da7-457b-b3b4-ce5dbaac0b88");
pub const IID_ITransferAdviseSink = &IID_ITransferAdviseSink_Value;
pub const ITransferAdviseSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        UpdateProgress: *const fn (
            self: *const ITransferAdviseSink,
            ull_size_current: u64,
            ull_size_total: u64,
            n_files_current: i32,
            n_files_total: i32,
            n_folders_current: i32,
            n_folders_total: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateTransferState: *const fn (
            self: *const ITransferAdviseSink,
            ts: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConfirmOverwrite: *const fn (
            self: *const ITransferAdviseSink,
            psi_source: ?*IShellItem,
            psi_dest_parent: ?*IShellItem,
            psz_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConfirmEncryptionLoss: *const fn (
            self: *const ITransferAdviseSink,
            psi_source: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FileFailure: *const fn (
            self: *const ITransferAdviseSink,
            psi: ?*IShellItem,
            psz_item: ?[*:0]const u16,
            hr_error: HRESULT,
            psz_rename: [*:0]u16,
            cch_rename: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SubStreamFailure: *const fn (
            self: *const ITransferAdviseSink,
            psi: ?*IShellItem,
            psz_stream_name: ?[*:0]const u16,
            hr_error: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PropertyFailure: *const fn (
            self: *const ITransferAdviseSink,
            psi: ?*IShellItem,
            pkey: ?*const PROPERTYKEY,
            hr_error: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn updateProgress(self: *const T, ull_size_current_: u64, ull_size_total_: u64, n_files_current_: i32, n_files_total_: i32, n_folders_current_: i32, n_folders_total_: i32) HRESULT {
                return @as(*const ITransferAdviseSink.VTable, @ptrCast(self.vtable)).UpdateProgress(@as(*const ITransferAdviseSink, @ptrCast(self)), ull_size_current_, ull_size_total_, n_files_current_, n_files_total_, n_folders_current_, n_folders_total_);
            }
            pub inline fn updateTransferState(self: *const T, ts_: u32) HRESULT {
                return @as(*const ITransferAdviseSink.VTable, @ptrCast(self.vtable)).UpdateTransferState(@as(*const ITransferAdviseSink, @ptrCast(self)), ts_);
            }
            pub inline fn confirmOverwrite(self: *const T, psi_source_: ?*IShellItem, psi_dest_parent_: ?*IShellItem, psz_name_: ?[*:0]const u16) HRESULT {
                return @as(*const ITransferAdviseSink.VTable, @ptrCast(self.vtable)).ConfirmOverwrite(@as(*const ITransferAdviseSink, @ptrCast(self)), psi_source_, psi_dest_parent_, psz_name_);
            }
            pub inline fn confirmEncryptionLoss(self: *const T, psi_source_: ?*IShellItem) HRESULT {
                return @as(*const ITransferAdviseSink.VTable, @ptrCast(self.vtable)).ConfirmEncryptionLoss(@as(*const ITransferAdviseSink, @ptrCast(self)), psi_source_);
            }
            pub inline fn fileFailure(self: *const T, psi_: ?*IShellItem, psz_item_: ?[*:0]const u16, hr_error_: HRESULT, psz_rename_: [*:0]u16, cch_rename_: u32) HRESULT {
                return @as(*const ITransferAdviseSink.VTable, @ptrCast(self.vtable)).FileFailure(@as(*const ITransferAdviseSink, @ptrCast(self)), psi_, psz_item_, hr_error_, psz_rename_, cch_rename_);
            }
            pub inline fn subStreamFailure(self: *const T, psi_: ?*IShellItem, psz_stream_name_: ?[*:0]const u16, hr_error_: HRESULT) HRESULT {
                return @as(*const ITransferAdviseSink.VTable, @ptrCast(self.vtable)).SubStreamFailure(@as(*const ITransferAdviseSink, @ptrCast(self)), psi_, psz_stream_name_, hr_error_);
            }
            pub inline fn propertyFailure(self: *const T, psi_: ?*IShellItem, pkey_: ?*const PROPERTYKEY, hr_error_: HRESULT) HRESULT {
                return @as(*const ITransferAdviseSink.VTable, @ptrCast(self.vtable)).PropertyFailure(@as(*const ITransferAdviseSink, @ptrCast(self)), psi_, pkey_, hr_error_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITransferSource_Value = Guid.initString("00adb003-bde9-45c6-8e29-d09f9353e108");
pub const IID_ITransferSource = &IID_ITransferSource_Value;
pub const ITransferSource = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: *const fn (
            self: *const ITransferSource,
            psink: ?*ITransferAdviseSink,
            pdw_cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn (
            self: *const ITransferSource,
            dw_cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperties: *const fn (
            self: *const ITransferSource,
            pproparray: ?*IPropertyChangeArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenItem: *const fn (
            self: *const ITransferSource,
            psi: ?*IShellItem,
            flags: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveItem: *const fn (
            self: *const ITransferSource,
            psi: ?*IShellItem,
            psi_parent_dst: ?*IShellItem,
            psz_name_dst: ?[*:0]const u16,
            flags: u32,
            ppsi_new: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RecycleItem: *const fn (
            self: *const ITransferSource,
            psi_source: ?*IShellItem,
            psi_parent_dest: ?*IShellItem,
            flags: u32,
            ppsi_new_dest: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveItem: *const fn (
            self: *const ITransferSource,
            psi_source: ?*IShellItem,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenameItem: *const fn (
            self: *const ITransferSource,
            psi_source: ?*IShellItem,
            psz_new_name: ?[*:0]const u16,
            flags: u32,
            ppsi_new_dest: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LinkItem: *const fn (
            self: *const ITransferSource,
            psi_source: ?*IShellItem,
            psi_parent_dest: ?*IShellItem,
            psz_new_name: ?[*:0]const u16,
            flags: u32,
            ppsi_new_dest: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ApplyPropertiesToItem: *const fn (
            self: *const ITransferSource,
            psi_source: ?*IShellItem,
            ppsi_new: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultDestinationName: *const fn (
            self: *const ITransferSource,
            psi_source: ?*IShellItem,
            psi_parent_dest: ?*IShellItem,
            ppsz_destination_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnterFolder: *const fn (
            self: *const ITransferSource,
            psi_child_folder_dest: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LeaveFolder: *const fn (
            self: *const ITransferSource,
            psi_child_folder_dest: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn advise(self: *const T, psink_: ?*ITransferAdviseSink, pdw_cookie_: ?*u32) HRESULT {
                return @as(*const ITransferSource.VTable, @ptrCast(self.vtable)).Advise(@as(*const ITransferSource, @ptrCast(self)), psink_, pdw_cookie_);
            }
            pub inline fn unadvise(self: *const T, dw_cookie_: u32) HRESULT {
                return @as(*const ITransferSource.VTable, @ptrCast(self.vtable)).Unadvise(@as(*const ITransferSource, @ptrCast(self)), dw_cookie_);
            }
            pub inline fn setProperties(self: *const T, pproparray_: ?*IPropertyChangeArray) HRESULT {
                return @as(*const ITransferSource.VTable, @ptrCast(self.vtable)).SetProperties(@as(*const ITransferSource, @ptrCast(self)), pproparray_);
            }
            pub inline fn openItem(self: *const T, psi_: ?*IShellItem, flags_: u32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const ITransferSource.VTable, @ptrCast(self.vtable)).OpenItem(@as(*const ITransferSource, @ptrCast(self)), psi_, flags_, riid_, ppv_);
            }
            pub inline fn moveItem(self: *const T, psi_: ?*IShellItem, psi_parent_dst_: ?*IShellItem, psz_name_dst_: ?[*:0]const u16, flags_: u32, ppsi_new_: ?*?*IShellItem) HRESULT {
                return @as(*const ITransferSource.VTable, @ptrCast(self.vtable)).MoveItem(@as(*const ITransferSource, @ptrCast(self)), psi_, psi_parent_dst_, psz_name_dst_, flags_, ppsi_new_);
            }
            pub inline fn recycleItem(self: *const T, psi_source_: ?*IShellItem, psi_parent_dest_: ?*IShellItem, flags_: u32, ppsi_new_dest_: ?*?*IShellItem) HRESULT {
                return @as(*const ITransferSource.VTable, @ptrCast(self.vtable)).RecycleItem(@as(*const ITransferSource, @ptrCast(self)), psi_source_, psi_parent_dest_, flags_, ppsi_new_dest_);
            }
            pub inline fn removeItem(self: *const T, psi_source_: ?*IShellItem, flags_: u32) HRESULT {
                return @as(*const ITransferSource.VTable, @ptrCast(self.vtable)).RemoveItem(@as(*const ITransferSource, @ptrCast(self)), psi_source_, flags_);
            }
            pub inline fn renameItem(self: *const T, psi_source_: ?*IShellItem, psz_new_name_: ?[*:0]const u16, flags_: u32, ppsi_new_dest_: ?*?*IShellItem) HRESULT {
                return @as(*const ITransferSource.VTable, @ptrCast(self.vtable)).RenameItem(@as(*const ITransferSource, @ptrCast(self)), psi_source_, psz_new_name_, flags_, ppsi_new_dest_);
            }
            pub inline fn linkItem(self: *const T, psi_source_: ?*IShellItem, psi_parent_dest_: ?*IShellItem, psz_new_name_: ?[*:0]const u16, flags_: u32, ppsi_new_dest_: ?*?*IShellItem) HRESULT {
                return @as(*const ITransferSource.VTable, @ptrCast(self.vtable)).LinkItem(@as(*const ITransferSource, @ptrCast(self)), psi_source_, psi_parent_dest_, psz_new_name_, flags_, ppsi_new_dest_);
            }
            pub inline fn applyPropertiesToItem(self: *const T, psi_source_: ?*IShellItem, ppsi_new_: ?*?*IShellItem) HRESULT {
                return @as(*const ITransferSource.VTable, @ptrCast(self.vtable)).ApplyPropertiesToItem(@as(*const ITransferSource, @ptrCast(self)), psi_source_, ppsi_new_);
            }
            pub inline fn getDefaultDestinationName(self: *const T, psi_source_: ?*IShellItem, psi_parent_dest_: ?*IShellItem, ppsz_destination_name_: ?*?PWSTR) HRESULT {
                return @as(*const ITransferSource.VTable, @ptrCast(self.vtable)).GetDefaultDestinationName(@as(*const ITransferSource, @ptrCast(self)), psi_source_, psi_parent_dest_, ppsz_destination_name_);
            }
            pub inline fn enterFolder(self: *const T, psi_child_folder_dest_: ?*IShellItem) HRESULT {
                return @as(*const ITransferSource.VTable, @ptrCast(self.vtable)).EnterFolder(@as(*const ITransferSource, @ptrCast(self)), psi_child_folder_dest_);
            }
            pub inline fn leaveFolder(self: *const T, psi_child_folder_dest_: ?*IShellItem) HRESULT {
                return @as(*const ITransferSource.VTable, @ptrCast(self.vtable)).LeaveFolder(@as(*const ITransferSource, @ptrCast(self)), psi_child_folder_dest_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SHELL_ITEM_RESOURCE = extern struct {
    guidType: Guid,
    szName: [260]u16,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumResources_Value = Guid.initString("2dd81fe3-a83c-4da9-a330-47249d345ba1");
pub const IID_IEnumResources = &IID_IEnumResources_Value;
pub const IEnumResources = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumResources,
            celt: u32,
            psir: [*]SHELL_ITEM_RESOURCE,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumResources,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumResources,
            ppenumr: ?*?*IEnumResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, psir_: [*]SHELL_ITEM_RESOURCE, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumResources.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumResources, @ptrCast(self)), celt_, psir_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumResources.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumResources, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumResources.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumResources, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenumr_: ?*?*IEnumResources) HRESULT {
                return @as(*const IEnumResources.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumResources, @ptrCast(self)), ppenumr_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IShellItemResources_Value = Guid.initString("ff5693be-2ce0-4d48-b5c5-40817d1acdb9");
pub const IID_IShellItemResources = &IID_IShellItemResources_Value;
pub const IShellItemResources = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAttributes: *const fn (
            self: *const IShellItemResources,
            pdw_attributes: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSize: *const fn (
            self: *const IShellItemResources,
            pull_size: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTimes: *const fn (
            self: *const IShellItemResources,
            pft_creation: ?*FILETIME,
            pft_write: ?*FILETIME,
            pft_access: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTimes: *const fn (
            self: *const IShellItemResources,
            pft_creation: ?*const FILETIME,
            pft_write: ?*const FILETIME,
            pft_access: ?*const FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResourceDescription: *const fn (
            self: *const IShellItemResources,
            pcsir: ?*const SHELL_ITEM_RESOURCE,
            ppsz_description: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumResources: *const fn (
            self: *const IShellItemResources,
            ppenumr: ?*?*IEnumResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SupportsResource: *const fn (
            self: *const IShellItemResources,
            pcsir: ?*const SHELL_ITEM_RESOURCE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenResource: *const fn (
            self: *const IShellItemResources,
            pcsir: ?*const SHELL_ITEM_RESOURCE,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateResource: *const fn (
            self: *const IShellItemResources,
            pcsir: ?*const SHELL_ITEM_RESOURCE,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MarkForDelete: *const fn (
            self: *const IShellItemResources,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAttributes(self: *const T, pdw_attributes_: ?*u32) HRESULT {
                return @as(*const IShellItemResources.VTable, @ptrCast(self.vtable)).GetAttributes(@as(*const IShellItemResources, @ptrCast(self)), pdw_attributes_);
            }
            pub inline fn getSize(self: *const T, pull_size_: ?*u64) HRESULT {
                return @as(*const IShellItemResources.VTable, @ptrCast(self.vtable)).GetSize(@as(*const IShellItemResources, @ptrCast(self)), pull_size_);
            }
            pub inline fn getTimes(self: *const T, pft_creation_: ?*FILETIME, pft_write_: ?*FILETIME, pft_access_: ?*FILETIME) HRESULT {
                return @as(*const IShellItemResources.VTable, @ptrCast(self.vtable)).GetTimes(@as(*const IShellItemResources, @ptrCast(self)), pft_creation_, pft_write_, pft_access_);
            }
            pub inline fn setTimes(self: *const T, pft_creation_: ?*const FILETIME, pft_write_: ?*const FILETIME, pft_access_: ?*const FILETIME) HRESULT {
                return @as(*const IShellItemResources.VTable, @ptrCast(self.vtable)).SetTimes(@as(*const IShellItemResources, @ptrCast(self)), pft_creation_, pft_write_, pft_access_);
            }
            pub inline fn getResourceDescription(self: *const T, pcsir_: ?*const SHELL_ITEM_RESOURCE, ppsz_description_: ?*?PWSTR) HRESULT {
                return @as(*const IShellItemResources.VTable, @ptrCast(self.vtable)).GetResourceDescription(@as(*const IShellItemResources, @ptrCast(self)), pcsir_, ppsz_description_);
            }
            pub inline fn enumResources(self: *const T, ppenumr_: ?*?*IEnumResources) HRESULT {
                return @as(*const IShellItemResources.VTable, @ptrCast(self.vtable)).EnumResources(@as(*const IShellItemResources, @ptrCast(self)), ppenumr_);
            }
            pub inline fn supportsResource(self: *const T, pcsir_: ?*const SHELL_ITEM_RESOURCE) HRESULT {
                return @as(*const IShellItemResources.VTable, @ptrCast(self.vtable)).SupportsResource(@as(*const IShellItemResources, @ptrCast(self)), pcsir_);
            }
            pub inline fn openResource(self: *const T, pcsir_: ?*const SHELL_ITEM_RESOURCE, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IShellItemResources.VTable, @ptrCast(self.vtable)).OpenResource(@as(*const IShellItemResources, @ptrCast(self)), pcsir_, riid_, ppv_);
            }
            pub inline fn createResource(self: *const T, pcsir_: ?*const SHELL_ITEM_RESOURCE, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IShellItemResources.VTable, @ptrCast(self.vtable)).CreateResource(@as(*const IShellItemResources, @ptrCast(self)), pcsir_, riid_, ppv_);
            }
            pub inline fn markForDelete(self: *const T) HRESULT {
                return @as(*const IShellItemResources.VTable, @ptrCast(self.vtable)).MarkForDelete(@as(*const IShellItemResources, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITransferDestination_Value = Guid.initString("48addd32-3ca5-4124-abe3-b5a72531b207");
pub const IID_ITransferDestination = &IID_ITransferDestination_Value;
pub const ITransferDestination = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: *const fn (
            self: *const ITransferDestination,
            psink: ?*ITransferAdviseSink,
            pdw_cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn (
            self: *const ITransferDestination,
            dw_cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateItem: *const fn (
            self: *const ITransferDestination,
            psz_name: ?[*:0]const u16,
            dw_attributes: u32,
            ull_size: u64,
            flags: u32,
            riid_item: ?*const Guid,
            ppv_item: ?*?*anyopaque,
            riid_resources: ?*const Guid,
            ppv_resources: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn advise(self: *const T, psink_: ?*ITransferAdviseSink, pdw_cookie_: ?*u32) HRESULT {
                return @as(*const ITransferDestination.VTable, @ptrCast(self.vtable)).Advise(@as(*const ITransferDestination, @ptrCast(self)), psink_, pdw_cookie_);
            }
            pub inline fn unadvise(self: *const T, dw_cookie_: u32) HRESULT {
                return @as(*const ITransferDestination.VTable, @ptrCast(self.vtable)).Unadvise(@as(*const ITransferDestination, @ptrCast(self)), dw_cookie_);
            }
            pub inline fn createItem(self: *const T, psz_name_: ?[*:0]const u16, dw_attributes_: u32, ull_size_: u64, flags_: u32, riid_item_: ?*const Guid, ppv_item_: ?*?*anyopaque, riid_resources_: ?*const Guid, ppv_resources_: ?*?*anyopaque) HRESULT {
                return @as(*const ITransferDestination.VTable, @ptrCast(self.vtable)).CreateItem(@as(*const ITransferDestination, @ptrCast(self)), psz_name_, dw_attributes_, ull_size_, flags_, riid_item_, ppv_item_, riid_resources_, ppv_resources_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileOperationProgressSink_Value = Guid.initString("04b0f1a7-9490-44bc-96e1-4296a31252e2");
pub const IID_IFileOperationProgressSink = &IID_IFileOperationProgressSink_Value;
pub const IFileOperationProgressSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartOperations: *const fn (
            self: *const IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FinishOperations: *const fn (
            self: *const IFileOperationProgressSink,
            hr_result: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreRenameItem: *const fn (
            self: *const IFileOperationProgressSink,
            dw_flags: u32,
            psi_item: ?*IShellItem,
            psz_new_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostRenameItem: *const fn (
            self: *const IFileOperationProgressSink,
            dw_flags: u32,
            psi_item: ?*IShellItem,
            psz_new_name: ?[*:0]const u16,
            hr_rename: HRESULT,
            psi_newly_created: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreMoveItem: *const fn (
            self: *const IFileOperationProgressSink,
            dw_flags: u32,
            psi_item: ?*IShellItem,
            psi_destination_folder: ?*IShellItem,
            psz_new_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostMoveItem: *const fn (
            self: *const IFileOperationProgressSink,
            dw_flags: u32,
            psi_item: ?*IShellItem,
            psi_destination_folder: ?*IShellItem,
            psz_new_name: ?[*:0]const u16,
            hr_move: HRESULT,
            psi_newly_created: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreCopyItem: *const fn (
            self: *const IFileOperationProgressSink,
            dw_flags: u32,
            psi_item: ?*IShellItem,
            psi_destination_folder: ?*IShellItem,
            psz_new_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostCopyItem: *const fn (
            self: *const IFileOperationProgressSink,
            dw_flags: u32,
            psi_item: ?*IShellItem,
            psi_destination_folder: ?*IShellItem,
            psz_new_name: ?[*:0]const u16,
            hr_copy: HRESULT,
            psi_newly_created: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreDeleteItem: *const fn (
            self: *const IFileOperationProgressSink,
            dw_flags: u32,
            psi_item: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostDeleteItem: *const fn (
            self: *const IFileOperationProgressSink,
            dw_flags: u32,
            psi_item: ?*IShellItem,
            hr_delete: HRESULT,
            psi_newly_created: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreNewItem: *const fn (
            self: *const IFileOperationProgressSink,
            dw_flags: u32,
            psi_destination_folder: ?*IShellItem,
            psz_new_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostNewItem: *const fn (
            self: *const IFileOperationProgressSink,
            dw_flags: u32,
            psi_destination_folder: ?*IShellItem,
            psz_new_name: ?[*:0]const u16,
            psz_template_name: ?[*:0]const u16,
            dw_file_attributes: u32,
            hr_new: HRESULT,
            psi_new_item: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateProgress: *const fn (
            self: *const IFileOperationProgressSink,
            i_work_total: u32,
            i_work_so_far: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetTimer: *const fn (
            self: *const IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PauseTimer: *const fn (
            self: *const IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResumeTimer: *const fn (
            self: *const IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn startOperations(self: *const T) HRESULT {
                return @as(*const IFileOperationProgressSink.VTable, @ptrCast(self.vtable)).StartOperations(@as(*const IFileOperationProgressSink, @ptrCast(self)));
            }
            pub inline fn finishOperations(self: *const T, hr_result_: HRESULT) HRESULT {
                return @as(*const IFileOperationProgressSink.VTable, @ptrCast(self.vtable)).FinishOperations(@as(*const IFileOperationProgressSink, @ptrCast(self)), hr_result_);
            }
            pub inline fn preRenameItem(self: *const T, dw_flags_: u32, psi_item_: ?*IShellItem, psz_new_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileOperationProgressSink.VTable, @ptrCast(self.vtable)).PreRenameItem(@as(*const IFileOperationProgressSink, @ptrCast(self)), dw_flags_, psi_item_, psz_new_name_);
            }
            pub inline fn postRenameItem(self: *const T, dw_flags_: u32, psi_item_: ?*IShellItem, psz_new_name_: ?[*:0]const u16, hr_rename_: HRESULT, psi_newly_created_: ?*IShellItem) HRESULT {
                return @as(*const IFileOperationProgressSink.VTable, @ptrCast(self.vtable)).PostRenameItem(@as(*const IFileOperationProgressSink, @ptrCast(self)), dw_flags_, psi_item_, psz_new_name_, hr_rename_, psi_newly_created_);
            }
            pub inline fn preMoveItem(self: *const T, dw_flags_: u32, psi_item_: ?*IShellItem, psi_destination_folder_: ?*IShellItem, psz_new_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileOperationProgressSink.VTable, @ptrCast(self.vtable)).PreMoveItem(@as(*const IFileOperationProgressSink, @ptrCast(self)), dw_flags_, psi_item_, psi_destination_folder_, psz_new_name_);
            }
            pub inline fn postMoveItem(self: *const T, dw_flags_: u32, psi_item_: ?*IShellItem, psi_destination_folder_: ?*IShellItem, psz_new_name_: ?[*:0]const u16, hr_move_: HRESULT, psi_newly_created_: ?*IShellItem) HRESULT {
                return @as(*const IFileOperationProgressSink.VTable, @ptrCast(self.vtable)).PostMoveItem(@as(*const IFileOperationProgressSink, @ptrCast(self)), dw_flags_, psi_item_, psi_destination_folder_, psz_new_name_, hr_move_, psi_newly_created_);
            }
            pub inline fn preCopyItem(self: *const T, dw_flags_: u32, psi_item_: ?*IShellItem, psi_destination_folder_: ?*IShellItem, psz_new_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileOperationProgressSink.VTable, @ptrCast(self.vtable)).PreCopyItem(@as(*const IFileOperationProgressSink, @ptrCast(self)), dw_flags_, psi_item_, psi_destination_folder_, psz_new_name_);
            }
            pub inline fn postCopyItem(self: *const T, dw_flags_: u32, psi_item_: ?*IShellItem, psi_destination_folder_: ?*IShellItem, psz_new_name_: ?[*:0]const u16, hr_copy_: HRESULT, psi_newly_created_: ?*IShellItem) HRESULT {
                return @as(*const IFileOperationProgressSink.VTable, @ptrCast(self.vtable)).PostCopyItem(@as(*const IFileOperationProgressSink, @ptrCast(self)), dw_flags_, psi_item_, psi_destination_folder_, psz_new_name_, hr_copy_, psi_newly_created_);
            }
            pub inline fn preDeleteItem(self: *const T, dw_flags_: u32, psi_item_: ?*IShellItem) HRESULT {
                return @as(*const IFileOperationProgressSink.VTable, @ptrCast(self.vtable)).PreDeleteItem(@as(*const IFileOperationProgressSink, @ptrCast(self)), dw_flags_, psi_item_);
            }
            pub inline fn postDeleteItem(self: *const T, dw_flags_: u32, psi_item_: ?*IShellItem, hr_delete_: HRESULT, psi_newly_created_: ?*IShellItem) HRESULT {
                return @as(*const IFileOperationProgressSink.VTable, @ptrCast(self.vtable)).PostDeleteItem(@as(*const IFileOperationProgressSink, @ptrCast(self)), dw_flags_, psi_item_, hr_delete_, psi_newly_created_);
            }
            pub inline fn preNewItem(self: *const T, dw_flags_: u32, psi_destination_folder_: ?*IShellItem, psz_new_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileOperationProgressSink.VTable, @ptrCast(self.vtable)).PreNewItem(@as(*const IFileOperationProgressSink, @ptrCast(self)), dw_flags_, psi_destination_folder_, psz_new_name_);
            }
            pub inline fn postNewItem(self: *const T, dw_flags_: u32, psi_destination_folder_: ?*IShellItem, psz_new_name_: ?[*:0]const u16, psz_template_name_: ?[*:0]const u16, dw_file_attributes_: u32, hr_new_: HRESULT, psi_new_item_: ?*IShellItem) HRESULT {
                return @as(*const IFileOperationProgressSink.VTable, @ptrCast(self.vtable)).PostNewItem(@as(*const IFileOperationProgressSink, @ptrCast(self)), dw_flags_, psi_destination_folder_, psz_new_name_, psz_template_name_, dw_file_attributes_, hr_new_, psi_new_item_);
            }
            pub inline fn updateProgress(self: *const T, i_work_total_: u32, i_work_so_far_: u32) HRESULT {
                return @as(*const IFileOperationProgressSink.VTable, @ptrCast(self.vtable)).UpdateProgress(@as(*const IFileOperationProgressSink, @ptrCast(self)), i_work_total_, i_work_so_far_);
            }
            pub inline fn resetTimer(self: *const T) HRESULT {
                return @as(*const IFileOperationProgressSink.VTable, @ptrCast(self.vtable)).ResetTimer(@as(*const IFileOperationProgressSink, @ptrCast(self)));
            }
            pub inline fn pauseTimer(self: *const T) HRESULT {
                return @as(*const IFileOperationProgressSink.VTable, @ptrCast(self.vtable)).PauseTimer(@as(*const IFileOperationProgressSink, @ptrCast(self)));
            }
            pub inline fn resumeTimer(self: *const T) HRESULT {
                return @as(*const IFileOperationProgressSink.VTable, @ptrCast(self.vtable)).ResumeTimer(@as(*const IFileOperationProgressSink, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SIATTRIBFLAGS = enum(i32) {
    AND = 1,
    OR = 2,
    APPCOMPAT = 3,
    // MASK = 3, this enum value conflicts with APPCOMPAT
    ALLITEMS = 16384,
};
pub const SIATTRIBFLAGS_AND = SIATTRIBFLAGS.AND;
pub const SIATTRIBFLAGS_OR = SIATTRIBFLAGS.OR;
pub const SIATTRIBFLAGS_APPCOMPAT = SIATTRIBFLAGS.APPCOMPAT;
pub const SIATTRIBFLAGS_MASK = SIATTRIBFLAGS.APPCOMPAT;
pub const SIATTRIBFLAGS_ALLITEMS = SIATTRIBFLAGS.ALLITEMS;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IShellItemArray_Value = Guid.initString("b63ea76d-1f85-456f-a19c-48159efa858b");
pub const IID_IShellItemArray = &IID_IShellItemArray_Value;
pub const IShellItemArray = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BindToHandler: *const fn (
            self: *const IShellItemArray,
            pbc: ?*IBindCtx,
            bhid: ?*const Guid,
            riid: ?*const Guid,
            ppv_out: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyStore: *const fn (
            self: *const IShellItemArray,
            flags: GETPROPERTYSTOREFLAGS,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyDescriptionList: *const fn (
            self: *const IShellItemArray,
            key_type: ?*const PROPERTYKEY,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAttributes: *const fn (
            self: *const IShellItemArray,
            attrib_flags: SIATTRIBFLAGS,
            sfgao_mask: u32,
            psfgao_attribs: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn (
            self: *const IShellItemArray,
            pdw_num_items: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemAt: *const fn (
            self: *const IShellItemArray,
            dw_index: u32,
            ppsi: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumItems: *const fn (
            self: *const IShellItemArray,
            ppenum_shell_items: ?*?*IEnumShellItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn bindToHandler(self: *const T, pbc_: ?*IBindCtx, bhid_: ?*const Guid, riid_: ?*const Guid, ppv_out_: ?*?*anyopaque) HRESULT {
                return @as(*const IShellItemArray.VTable, @ptrCast(self.vtable)).BindToHandler(@as(*const IShellItemArray, @ptrCast(self)), pbc_, bhid_, riid_, ppv_out_);
            }
            pub inline fn getPropertyStore(self: *const T, flags_: GETPROPERTYSTOREFLAGS, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IShellItemArray.VTable, @ptrCast(self.vtable)).GetPropertyStore(@as(*const IShellItemArray, @ptrCast(self)), flags_, riid_, ppv_);
            }
            pub inline fn getPropertyDescriptionList(self: *const T, key_type_: ?*const PROPERTYKEY, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IShellItemArray.VTable, @ptrCast(self.vtable)).GetPropertyDescriptionList(@as(*const IShellItemArray, @ptrCast(self)), key_type_, riid_, ppv_);
            }
            pub inline fn getAttributes(self: *const T, attrib_flags_: SIATTRIBFLAGS, sfgao_mask_: u32, psfgao_attribs_: ?*u32) HRESULT {
                return @as(*const IShellItemArray.VTable, @ptrCast(self.vtable)).GetAttributes(@as(*const IShellItemArray, @ptrCast(self)), attrib_flags_, sfgao_mask_, psfgao_attribs_);
            }
            pub inline fn getCount(self: *const T, pdw_num_items_: ?*u32) HRESULT {
                return @as(*const IShellItemArray.VTable, @ptrCast(self.vtable)).GetCount(@as(*const IShellItemArray, @ptrCast(self)), pdw_num_items_);
            }
            pub inline fn getItemAt(self: *const T, dw_index_: u32, ppsi_: ?*?*IShellItem) HRESULT {
                return @as(*const IShellItemArray.VTable, @ptrCast(self.vtable)).GetItemAt(@as(*const IShellItemArray, @ptrCast(self)), dw_index_, ppsi_);
            }
            pub inline fn enumItems(self: *const T, ppenum_shell_items_: ?*?*IEnumShellItems) HRESULT {
                return @as(*const IShellItemArray.VTable, @ptrCast(self.vtable)).EnumItems(@as(*const IShellItemArray, @ptrCast(self)), ppenum_shell_items_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IInitializeWithItem_Value = Guid.initString("7f73be3f-fb79-493c-a6c7-7ee14e245841");
pub const IID_IInitializeWithItem = &IID_IInitializeWithItem_Value;
pub const IInitializeWithItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IInitializeWithItem,
            psi: ?*IShellItem,
            grf_mode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, psi_: ?*IShellItem, grf_mode_: u32) HRESULT {
                return @as(*const IInitializeWithItem.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IInitializeWithItem, @ptrCast(self)), psi_, grf_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IObjectWithSelection_Value = Guid.initString("1c9cd5bb-98e9-4491-a60f-31aacc72b83c");
pub const IID_IObjectWithSelection = &IID_IObjectWithSelection_Value;
pub const IObjectWithSelection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetSelection: *const fn (
            self: *const IObjectWithSelection,
            psia: ?*IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelection: *const fn (
            self: *const IObjectWithSelection,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setSelection(self: *const T, psia_: ?*IShellItemArray) HRESULT {
                return @as(*const IObjectWithSelection.VTable, @ptrCast(self.vtable)).SetSelection(@as(*const IObjectWithSelection, @ptrCast(self)), psia_);
            }
            pub inline fn getSelection(self: *const T, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IObjectWithSelection.VTable, @ptrCast(self.vtable)).GetSelection(@as(*const IObjectWithSelection, @ptrCast(self)), riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IObjectWithBackReferences_Value = Guid.initString("321a6a6a-d61f-4bf3-97ae-14be2986bb36");
pub const IID_IObjectWithBackReferences = &IID_IObjectWithBackReferences_Value;
pub const IObjectWithBackReferences = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RemoveBackReferences: *const fn (
            self: *const IObjectWithBackReferences,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn removeBackReferences(self: *const T) HRESULT {
                return @as(*const IObjectWithBackReferences.VTable, @ptrCast(self.vtable)).RemoveBackReferences(@as(*const IObjectWithBackReferences, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICategoryProvider_Value = Guid.initString("9af64809-5864-4c26-a720-c1f78c086ee3");
pub const IID_ICategoryProvider = &IID_ICategoryProvider_Value;
pub const ICategoryProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CanCategorizeOnSCID: *const fn (
            self: *const ICategoryProvider,
            pscid: ?*const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultCategory: *const fn (
            self: *const ICategoryProvider,
            pguid: ?*Guid,
            pscid: ?*PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategoryForSCID: *const fn (
            self: *const ICategoryProvider,
            pscid: ?*const PROPERTYKEY,
            pguid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumCategories: *const fn (
            self: *const ICategoryProvider,
            penum: ?*?*IEnumGUID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategoryName: *const fn (
            self: *const ICategoryProvider,
            pguid: ?*const Guid,
            psz_name: [*:0]u16,
            cch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateCategory: *const fn (
            self: *const ICategoryProvider,
            pguid: ?*const Guid,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn canCategorizeOnSCID(self: *const T, pscid_: ?*const PROPERTYKEY) HRESULT {
                return @as(*const ICategoryProvider.VTable, @ptrCast(self.vtable)).CanCategorizeOnSCID(@as(*const ICategoryProvider, @ptrCast(self)), pscid_);
            }
            pub inline fn getDefaultCategory(self: *const T, pguid_: ?*Guid, pscid_: ?*PROPERTYKEY) HRESULT {
                return @as(*const ICategoryProvider.VTable, @ptrCast(self.vtable)).GetDefaultCategory(@as(*const ICategoryProvider, @ptrCast(self)), pguid_, pscid_);
            }
            pub inline fn getCategoryForSCID(self: *const T, pscid_: ?*const PROPERTYKEY, pguid_: ?*Guid) HRESULT {
                return @as(*const ICategoryProvider.VTable, @ptrCast(self.vtable)).GetCategoryForSCID(@as(*const ICategoryProvider, @ptrCast(self)), pscid_, pguid_);
            }
            pub inline fn enumCategories(self: *const T, penum_: ?*?*IEnumGUID) HRESULT {
                return @as(*const ICategoryProvider.VTable, @ptrCast(self.vtable)).EnumCategories(@as(*const ICategoryProvider, @ptrCast(self)), penum_);
            }
            pub inline fn getCategoryName(self: *const T, pguid_: ?*const Guid, psz_name_: [*:0]u16, cch_: u32) HRESULT {
                return @as(*const ICategoryProvider.VTable, @ptrCast(self.vtable)).GetCategoryName(@as(*const ICategoryProvider, @ptrCast(self)), pguid_, psz_name_, cch_);
            }
            pub inline fn createCategory(self: *const T, pguid_: ?*const Guid, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const ICategoryProvider.VTable, @ptrCast(self.vtable)).CreateCategory(@as(*const ICategoryProvider, @ptrCast(self)), pguid_, riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CATEGORYINFO_FLAGS = enum(i32) {
    NORMAL = 0,
    COLLAPSED = 1,
    HIDDEN = 2,
    EXPANDED = 4,
    NOHEADER = 8,
    NOTCOLLAPSIBLE = 16,
    NOHEADERCOUNT = 32,
    SUBSETTED = 64,
    SEPARATE_IMAGES = 128,
    SHOWEMPTY = 256,
};
pub const CATINFO_NORMAL = CATEGORYINFO_FLAGS.NORMAL;
pub const CATINFO_COLLAPSED = CATEGORYINFO_FLAGS.COLLAPSED;
pub const CATINFO_HIDDEN = CATEGORYINFO_FLAGS.HIDDEN;
pub const CATINFO_EXPANDED = CATEGORYINFO_FLAGS.EXPANDED;
pub const CATINFO_NOHEADER = CATEGORYINFO_FLAGS.NOHEADER;
pub const CATINFO_NOTCOLLAPSIBLE = CATEGORYINFO_FLAGS.NOTCOLLAPSIBLE;
pub const CATINFO_NOHEADERCOUNT = CATEGORYINFO_FLAGS.NOHEADERCOUNT;
pub const CATINFO_SUBSETTED = CATEGORYINFO_FLAGS.SUBSETTED;
pub const CATINFO_SEPARATE_IMAGES = CATEGORYINFO_FLAGS.SEPARATE_IMAGES;
pub const CATINFO_SHOWEMPTY = CATEGORYINFO_FLAGS.SHOWEMPTY;

pub const CATSORT_FLAGS = enum(i32) {
    DEFAULT = 0,
    NAME = 1,
};
pub const CATSORT_DEFAULT = CATSORT_FLAGS.DEFAULT;
pub const CATSORT_NAME = CATSORT_FLAGS.NAME;

pub const CATEGORY_INFO = extern struct {
    cif: CATEGORYINFO_FLAGS,
    wszName: [260]u16,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICategorizer_Value = Guid.initString("a3b14589-9174-49a8-89a3-06a1ae2b9ba7");
pub const IID_ICategorizer = &IID_ICategorizer_Value;
pub const ICategorizer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDescription: *const fn (
            self: *const ICategorizer,
            psz_desc: [*:0]u16,
            cch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategory: *const fn (
            self: *const ICategorizer,
            cidl: u32,
            apidl: [*]?*ITEMIDLIST,
            rg_category_ids: [*]u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategoryInfo: *const fn (
            self: *const ICategorizer,
            dw_category_id: u32,
            pci: ?*CATEGORY_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompareCategory: *const fn (
            self: *const ICategorizer,
            csf_flags: CATSORT_FLAGS,
            dw_category_id1: u32,
            dw_category_id2: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDescription(self: *const T, psz_desc_: [*:0]u16, cch_: u32) HRESULT {
                return @as(*const ICategorizer.VTable, @ptrCast(self.vtable)).GetDescription(@as(*const ICategorizer, @ptrCast(self)), psz_desc_, cch_);
            }
            pub inline fn getCategory(self: *const T, cidl_: u32, apidl_: [*]?*ITEMIDLIST, rg_category_ids_: [*]u32) HRESULT {
                return @as(*const ICategorizer.VTable, @ptrCast(self.vtable)).GetCategory(@as(*const ICategorizer, @ptrCast(self)), cidl_, apidl_, rg_category_ids_);
            }
            pub inline fn getCategoryInfo(self: *const T, dw_category_id_: u32, pci_: ?*CATEGORY_INFO) HRESULT {
                return @as(*const ICategorizer.VTable, @ptrCast(self.vtable)).GetCategoryInfo(@as(*const ICategorizer, @ptrCast(self)), dw_category_id_, pci_);
            }
            pub inline fn compareCategory(self: *const T, csf_flags_: CATSORT_FLAGS, dw_category_id1_: u32, dw_category_id2_: u32) HRESULT {
                return @as(*const ICategorizer.VTable, @ptrCast(self.vtable)).CompareCategory(@as(*const ICategorizer, @ptrCast(self)), csf_flags_, dw_category_id1_, dw_category_id2_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SHDRAGIMAGE = extern struct {
    sizeDragImage: SIZE,
    ptOffset: POINT,
    hbmpDragImage: ?HBITMAP,
    crColorKey: u32,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IDropTargetHelper_Value = Guid.initString("4657278b-411b-11d2-839a-00c04fd918d0");
pub const IID_IDropTargetHelper = &IID_IDropTargetHelper_Value;
pub const IDropTargetHelper = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DragEnter: *const fn (
            self: *const IDropTargetHelper,
            hwnd_target: ?HWND,
            p_data_object: ?*IDataObject,
            ppt: ?*POINT,
            dw_effect: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DragLeave: *const fn (
            self: *const IDropTargetHelper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DragOver: *const fn (
            self: *const IDropTargetHelper,
            ppt: ?*POINT,
            dw_effect: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Drop: *const fn (
            self: *const IDropTargetHelper,
            p_data_object: ?*IDataObject,
            ppt: ?*POINT,
            dw_effect: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Show: *const fn (
            self: *const IDropTargetHelper,
            f_show: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn dragEnter(self: *const T, hwnd_target_: ?HWND, p_data_object_: ?*IDataObject, ppt_: ?*POINT, dw_effect_: u32) HRESULT {
                return @as(*const IDropTargetHelper.VTable, @ptrCast(self.vtable)).DragEnter(@as(*const IDropTargetHelper, @ptrCast(self)), hwnd_target_, p_data_object_, ppt_, dw_effect_);
            }
            pub inline fn dragLeave(self: *const T) HRESULT {
                return @as(*const IDropTargetHelper.VTable, @ptrCast(self.vtable)).DragLeave(@as(*const IDropTargetHelper, @ptrCast(self)));
            }
            pub inline fn dragOver(self: *const T, ppt_: ?*POINT, dw_effect_: u32) HRESULT {
                return @as(*const IDropTargetHelper.VTable, @ptrCast(self.vtable)).DragOver(@as(*const IDropTargetHelper, @ptrCast(self)), ppt_, dw_effect_);
            }
            pub inline fn drop(self: *const T, p_data_object_: ?*IDataObject, ppt_: ?*POINT, dw_effect_: u32) HRESULT {
                return @as(*const IDropTargetHelper.VTable, @ptrCast(self.vtable)).Drop(@as(*const IDropTargetHelper, @ptrCast(self)), p_data_object_, ppt_, dw_effect_);
            }
            pub inline fn show(self: *const T, f_show_: BOOL) HRESULT {
                return @as(*const IDropTargetHelper.VTable, @ptrCast(self.vtable)).Show(@as(*const IDropTargetHelper, @ptrCast(self)), f_show_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IDragSourceHelper_Value = Guid.initString("de5bf786-477a-11d2-839d-00c04fd918d0");
pub const IID_IDragSourceHelper = &IID_IDragSourceHelper_Value;
pub const IDragSourceHelper = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitializeFromBitmap: *const fn (
            self: *const IDragSourceHelper,
            pshdi: ?*SHDRAGIMAGE,
            p_data_object: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeFromWindow: *const fn (
            self: *const IDragSourceHelper,
            hwnd: ?HWND,
            ppt: ?*POINT,
            p_data_object: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initializeFromBitmap(self: *const T, pshdi_: ?*SHDRAGIMAGE, p_data_object_: ?*IDataObject) HRESULT {
                return @as(*const IDragSourceHelper.VTable, @ptrCast(self.vtable)).InitializeFromBitmap(@as(*const IDragSourceHelper, @ptrCast(self)), pshdi_, p_data_object_);
            }
            pub inline fn initializeFromWindow(self: *const T, hwnd_: ?HWND, ppt_: ?*POINT, p_data_object_: ?*IDataObject) HRESULT {
                return @as(*const IDragSourceHelper.VTable, @ptrCast(self.vtable)).InitializeFromWindow(@as(*const IDragSourceHelper, @ptrCast(self)), hwnd_, ppt_, p_data_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SLR_FLAGS = enum(i32) {
    NONE = 0,
    NO_UI = 1,
    ANY_MATCH = 2,
    UPDATE = 4,
    NOUPDATE = 8,
    NOSEARCH = 16,
    NOTRACK = 32,
    NOLINKINFO = 64,
    INVOKE_MSI = 128,
    NO_UI_WITH_MSG_PUMP = 257,
    OFFER_DELETE_WITHOUT_FILE = 512,
    KNOWNFOLDER = 1024,
    MACHINE_IN_LOCAL_TARGET = 2048,
    UPDATE_MACHINE_AND_SID = 4096,
    NO_OBJECT_ID = 8192,
};
pub const SLR_NONE = SLR_FLAGS.NONE;
pub const SLR_NO_UI = SLR_FLAGS.NO_UI;
pub const SLR_ANY_MATCH = SLR_FLAGS.ANY_MATCH;
pub const SLR_UPDATE = SLR_FLAGS.UPDATE;
pub const SLR_NOUPDATE = SLR_FLAGS.NOUPDATE;
pub const SLR_NOSEARCH = SLR_FLAGS.NOSEARCH;
pub const SLR_NOTRACK = SLR_FLAGS.NOTRACK;
pub const SLR_NOLINKINFO = SLR_FLAGS.NOLINKINFO;
pub const SLR_INVOKE_MSI = SLR_FLAGS.INVOKE_MSI;
pub const SLR_NO_UI_WITH_MSG_PUMP = SLR_FLAGS.NO_UI_WITH_MSG_PUMP;
pub const SLR_OFFER_DELETE_WITHOUT_FILE = SLR_FLAGS.OFFER_DELETE_WITHOUT_FILE;
pub const SLR_KNOWNFOLDER = SLR_FLAGS.KNOWNFOLDER;
pub const SLR_MACHINE_IN_LOCAL_TARGET = SLR_FLAGS.MACHINE_IN_LOCAL_TARGET;
pub const SLR_UPDATE_MACHINE_AND_SID = SLR_FLAGS.UPDATE_MACHINE_AND_SID;
pub const SLR_NO_OBJECT_ID = SLR_FLAGS.NO_OBJECT_ID;

pub const SLGP_FLAGS = enum(i32) {
    SHORTPATH = 1,
    UNCPRIORITY = 2,
    RAWPATH = 4,
    RELATIVEPRIORITY = 8,
};
pub const SLGP_SHORTPATH = SLGP_FLAGS.SHORTPATH;
pub const SLGP_UNCPRIORITY = SLGP_FLAGS.UNCPRIORITY;
pub const SLGP_RAWPATH = SLGP_FLAGS.RAWPATH;
pub const SLGP_RELATIVEPRIORITY = SLGP_FLAGS.RELATIVEPRIORITY;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellLinkA_Value = Guid.initString("000214ee-0000-0000-c000-000000000046");
pub const IID_IShellLinkA = &IID_IShellLinkA_Value;
pub const IShellLinkA = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPath: *const fn (
            self: *const IShellLinkA,
            psz_file: [*:0]u8,
            cch: i32,
            pfd: ?*WIN32_FIND_DATAA,
            f_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDList: *const fn (
            self: *const IShellLinkA,
            ppidl: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIDList: *const fn (
            self: *const IShellLinkA,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: *const fn (
            self: *const IShellLinkA,
            psz_name: [*:0]u8,
            cch: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDescription: *const fn (
            self: *const IShellLinkA,
            psz_name: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWorkingDirectory: *const fn (
            self: *const IShellLinkA,
            psz_dir: [*:0]u8,
            cch: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWorkingDirectory: *const fn (
            self: *const IShellLinkA,
            psz_dir: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetArguments: *const fn (
            self: *const IShellLinkA,
            psz_args: [*:0]u8,
            cch: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetArguments: *const fn (
            self: *const IShellLinkA,
            psz_args: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHotkey: *const fn (
            self: *const IShellLinkA,
            pw_hotkey: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHotkey: *const fn (
            self: *const IShellLinkA,
            w_hotkey: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShowCmd: *const fn (
            self: *const IShellLinkA,
            pi_show_cmd: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetShowCmd: *const fn (
            self: *const IShellLinkA,
            i_show_cmd: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIconLocation: *const fn (
            self: *const IShellLinkA,
            psz_icon_path: [*:0]u8,
            cch: i32,
            pi_icon: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIconLocation: *const fn (
            self: *const IShellLinkA,
            psz_icon_path: ?[*:0]const u8,
            i_icon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRelativePath: *const fn (
            self: *const IShellLinkA,
            psz_path_rel: ?[*:0]const u8,
            dw_reserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resolve: *const fn (
            self: *const IShellLinkA,
            hwnd: ?HWND,
            f_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPath: *const fn (
            self: *const IShellLinkA,
            psz_file: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPath(self: *const T, psz_file_: [*:0]u8, cch_: i32, pfd_: ?*WIN32_FIND_DATAA, f_flags_: u32) HRESULT {
                return @as(*const IShellLinkA.VTable, @ptrCast(self.vtable)).GetPath(@as(*const IShellLinkA, @ptrCast(self)), psz_file_, cch_, pfd_, f_flags_);
            }
            pub inline fn getIDList(self: *const T, ppidl_: ?*?*ITEMIDLIST) HRESULT {
                return @as(*const IShellLinkA.VTable, @ptrCast(self.vtable)).GetIDList(@as(*const IShellLinkA, @ptrCast(self)), ppidl_);
            }
            pub inline fn setIDList(self: *const T, pidl_: ?*ITEMIDLIST) HRESULT {
                return @as(*const IShellLinkA.VTable, @ptrCast(self.vtable)).SetIDList(@as(*const IShellLinkA, @ptrCast(self)), pidl_);
            }
            pub inline fn getDescription(self: *const T, psz_name_: [*:0]u8, cch_: i32) HRESULT {
                return @as(*const IShellLinkA.VTable, @ptrCast(self.vtable)).GetDescription(@as(*const IShellLinkA, @ptrCast(self)), psz_name_, cch_);
            }
            pub inline fn setDescription(self: *const T, psz_name_: ?[*:0]const u8) HRESULT {
                return @as(*const IShellLinkA.VTable, @ptrCast(self.vtable)).SetDescription(@as(*const IShellLinkA, @ptrCast(self)), psz_name_);
            }
            pub inline fn getWorkingDirectory(self: *const T, psz_dir_: [*:0]u8, cch_: i32) HRESULT {
                return @as(*const IShellLinkA.VTable, @ptrCast(self.vtable)).GetWorkingDirectory(@as(*const IShellLinkA, @ptrCast(self)), psz_dir_, cch_);
            }
            pub inline fn setWorkingDirectory(self: *const T, psz_dir_: ?[*:0]const u8) HRESULT {
                return @as(*const IShellLinkA.VTable, @ptrCast(self.vtable)).SetWorkingDirectory(@as(*const IShellLinkA, @ptrCast(self)), psz_dir_);
            }
            pub inline fn getArguments(self: *const T, psz_args_: [*:0]u8, cch_: i32) HRESULT {
                return @as(*const IShellLinkA.VTable, @ptrCast(self.vtable)).GetArguments(@as(*const IShellLinkA, @ptrCast(self)), psz_args_, cch_);
            }
            pub inline fn setArguments(self: *const T, psz_args_: ?[*:0]const u8) HRESULT {
                return @as(*const IShellLinkA.VTable, @ptrCast(self.vtable)).SetArguments(@as(*const IShellLinkA, @ptrCast(self)), psz_args_);
            }
            pub inline fn getHotkey(self: *const T, pw_hotkey_: ?*u16) HRESULT {
                return @as(*const IShellLinkA.VTable, @ptrCast(self.vtable)).GetHotkey(@as(*const IShellLinkA, @ptrCast(self)), pw_hotkey_);
            }
            pub inline fn setHotkey(self: *const T, w_hotkey_: u16) HRESULT {
                return @as(*const IShellLinkA.VTable, @ptrCast(self.vtable)).SetHotkey(@as(*const IShellLinkA, @ptrCast(self)), w_hotkey_);
            }
            pub inline fn getShowCmd(self: *const T, pi_show_cmd_: ?*i32) HRESULT {
                return @as(*const IShellLinkA.VTable, @ptrCast(self.vtable)).GetShowCmd(@as(*const IShellLinkA, @ptrCast(self)), pi_show_cmd_);
            }
            pub inline fn setShowCmd(self: *const T, i_show_cmd_: i32) HRESULT {
                return @as(*const IShellLinkA.VTable, @ptrCast(self.vtable)).SetShowCmd(@as(*const IShellLinkA, @ptrCast(self)), i_show_cmd_);
            }
            pub inline fn getIconLocation(self: *const T, psz_icon_path_: [*:0]u8, cch_: i32, pi_icon_: ?*i32) HRESULT {
                return @as(*const IShellLinkA.VTable, @ptrCast(self.vtable)).GetIconLocation(@as(*const IShellLinkA, @ptrCast(self)), psz_icon_path_, cch_, pi_icon_);
            }
            pub inline fn setIconLocation(self: *const T, psz_icon_path_: ?[*:0]const u8, i_icon_: i32) HRESULT {
                return @as(*const IShellLinkA.VTable, @ptrCast(self.vtable)).SetIconLocation(@as(*const IShellLinkA, @ptrCast(self)), psz_icon_path_, i_icon_);
            }
            pub inline fn setRelativePath(self: *const T, psz_path_rel_: ?[*:0]const u8, dw_reserved_: u32) HRESULT {
                return @as(*const IShellLinkA.VTable, @ptrCast(self.vtable)).SetRelativePath(@as(*const IShellLinkA, @ptrCast(self)), psz_path_rel_, dw_reserved_);
            }
            pub inline fn resolve(self: *const T, hwnd_: ?HWND, f_flags_: u32) HRESULT {
                return @as(*const IShellLinkA.VTable, @ptrCast(self.vtable)).Resolve(@as(*const IShellLinkA, @ptrCast(self)), hwnd_, f_flags_);
            }
            pub inline fn setPath(self: *const T, psz_file_: ?[*:0]const u8) HRESULT {
                return @as(*const IShellLinkA.VTable, @ptrCast(self.vtable)).SetPath(@as(*const IShellLinkA, @ptrCast(self)), psz_file_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellLinkW_Value = Guid.initString("000214f9-0000-0000-c000-000000000046");
pub const IID_IShellLinkW = &IID_IShellLinkW_Value;
pub const IShellLinkW = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPath: *const fn (
            self: *const IShellLinkW,
            psz_file: [*:0]u16,
            cch: i32,
            pfd: ?*WIN32_FIND_DATAW,
            f_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDList: *const fn (
            self: *const IShellLinkW,
            ppidl: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIDList: *const fn (
            self: *const IShellLinkW,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: *const fn (
            self: *const IShellLinkW,
            psz_name: [*:0]u16,
            cch: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDescription: *const fn (
            self: *const IShellLinkW,
            psz_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWorkingDirectory: *const fn (
            self: *const IShellLinkW,
            psz_dir: [*:0]u16,
            cch: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWorkingDirectory: *const fn (
            self: *const IShellLinkW,
            psz_dir: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetArguments: *const fn (
            self: *const IShellLinkW,
            psz_args: [*:0]u16,
            cch: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetArguments: *const fn (
            self: *const IShellLinkW,
            psz_args: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHotkey: *const fn (
            self: *const IShellLinkW,
            pw_hotkey: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHotkey: *const fn (
            self: *const IShellLinkW,
            w_hotkey: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShowCmd: *const fn (
            self: *const IShellLinkW,
            pi_show_cmd: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetShowCmd: *const fn (
            self: *const IShellLinkW,
            i_show_cmd: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIconLocation: *const fn (
            self: *const IShellLinkW,
            psz_icon_path: [*:0]u16,
            cch: i32,
            pi_icon: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIconLocation: *const fn (
            self: *const IShellLinkW,
            psz_icon_path: ?[*:0]const u16,
            i_icon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRelativePath: *const fn (
            self: *const IShellLinkW,
            psz_path_rel: ?[*:0]const u16,
            dw_reserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resolve: *const fn (
            self: *const IShellLinkW,
            hwnd: ?HWND,
            f_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPath: *const fn (
            self: *const IShellLinkW,
            psz_file: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPath(self: *const T, psz_file_: [*:0]u16, cch_: i32, pfd_: ?*WIN32_FIND_DATAW, f_flags_: u32) HRESULT {
                return @as(*const IShellLinkW.VTable, @ptrCast(self.vtable)).GetPath(@as(*const IShellLinkW, @ptrCast(self)), psz_file_, cch_, pfd_, f_flags_);
            }
            pub inline fn getIDList(self: *const T, ppidl_: ?*?*ITEMIDLIST) HRESULT {
                return @as(*const IShellLinkW.VTable, @ptrCast(self.vtable)).GetIDList(@as(*const IShellLinkW, @ptrCast(self)), ppidl_);
            }
            pub inline fn setIDList(self: *const T, pidl_: ?*ITEMIDLIST) HRESULT {
                return @as(*const IShellLinkW.VTable, @ptrCast(self.vtable)).SetIDList(@as(*const IShellLinkW, @ptrCast(self)), pidl_);
            }
            pub inline fn getDescription(self: *const T, psz_name_: [*:0]u16, cch_: i32) HRESULT {
                return @as(*const IShellLinkW.VTable, @ptrCast(self.vtable)).GetDescription(@as(*const IShellLinkW, @ptrCast(self)), psz_name_, cch_);
            }
            pub inline fn setDescription(self: *const T, psz_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IShellLinkW.VTable, @ptrCast(self.vtable)).SetDescription(@as(*const IShellLinkW, @ptrCast(self)), psz_name_);
            }
            pub inline fn getWorkingDirectory(self: *const T, psz_dir_: [*:0]u16, cch_: i32) HRESULT {
                return @as(*const IShellLinkW.VTable, @ptrCast(self.vtable)).GetWorkingDirectory(@as(*const IShellLinkW, @ptrCast(self)), psz_dir_, cch_);
            }
            pub inline fn setWorkingDirectory(self: *const T, psz_dir_: ?[*:0]const u16) HRESULT {
                return @as(*const IShellLinkW.VTable, @ptrCast(self.vtable)).SetWorkingDirectory(@as(*const IShellLinkW, @ptrCast(self)), psz_dir_);
            }
            pub inline fn getArguments(self: *const T, psz_args_: [*:0]u16, cch_: i32) HRESULT {
                return @as(*const IShellLinkW.VTable, @ptrCast(self.vtable)).GetArguments(@as(*const IShellLinkW, @ptrCast(self)), psz_args_, cch_);
            }
            pub inline fn setArguments(self: *const T, psz_args_: ?[*:0]const u16) HRESULT {
                return @as(*const IShellLinkW.VTable, @ptrCast(self.vtable)).SetArguments(@as(*const IShellLinkW, @ptrCast(self)), psz_args_);
            }
            pub inline fn getHotkey(self: *const T, pw_hotkey_: ?*u16) HRESULT {
                return @as(*const IShellLinkW.VTable, @ptrCast(self.vtable)).GetHotkey(@as(*const IShellLinkW, @ptrCast(self)), pw_hotkey_);
            }
            pub inline fn setHotkey(self: *const T, w_hotkey_: u16) HRESULT {
                return @as(*const IShellLinkW.VTable, @ptrCast(self.vtable)).SetHotkey(@as(*const IShellLinkW, @ptrCast(self)), w_hotkey_);
            }
            pub inline fn getShowCmd(self: *const T, pi_show_cmd_: ?*i32) HRESULT {
                return @as(*const IShellLinkW.VTable, @ptrCast(self.vtable)).GetShowCmd(@as(*const IShellLinkW, @ptrCast(self)), pi_show_cmd_);
            }
            pub inline fn setShowCmd(self: *const T, i_show_cmd_: i32) HRESULT {
                return @as(*const IShellLinkW.VTable, @ptrCast(self.vtable)).SetShowCmd(@as(*const IShellLinkW, @ptrCast(self)), i_show_cmd_);
            }
            pub inline fn getIconLocation(self: *const T, psz_icon_path_: [*:0]u16, cch_: i32, pi_icon_: ?*i32) HRESULT {
                return @as(*const IShellLinkW.VTable, @ptrCast(self.vtable)).GetIconLocation(@as(*const IShellLinkW, @ptrCast(self)), psz_icon_path_, cch_, pi_icon_);
            }
            pub inline fn setIconLocation(self: *const T, psz_icon_path_: ?[*:0]const u16, i_icon_: i32) HRESULT {
                return @as(*const IShellLinkW.VTable, @ptrCast(self.vtable)).SetIconLocation(@as(*const IShellLinkW, @ptrCast(self)), psz_icon_path_, i_icon_);
            }
            pub inline fn setRelativePath(self: *const T, psz_path_rel_: ?[*:0]const u16, dw_reserved_: u32) HRESULT {
                return @as(*const IShellLinkW.VTable, @ptrCast(self.vtable)).SetRelativePath(@as(*const IShellLinkW, @ptrCast(self)), psz_path_rel_, dw_reserved_);
            }
            pub inline fn resolve(self: *const T, hwnd_: ?HWND, f_flags_: u32) HRESULT {
                return @as(*const IShellLinkW.VTable, @ptrCast(self.vtable)).Resolve(@as(*const IShellLinkW, @ptrCast(self)), hwnd_, f_flags_);
            }
            pub inline fn setPath(self: *const T, psz_file_: ?[*:0]const u16) HRESULT {
                return @as(*const IShellLinkW.VTable, @ptrCast(self.vtable)).SetPath(@as(*const IShellLinkW, @ptrCast(self)), psz_file_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IShellLinkDataList_Value = Guid.initString("45e2b4ae-b1c3-11d0-b92f-00a0c90312e1");
pub const IID_IShellLinkDataList = &IID_IShellLinkDataList_Value;
pub const IShellLinkDataList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddDataBlock: *const fn (
            self: *const IShellLinkDataList,
            p_data_block: ?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyDataBlock: *const fn (
            self: *const IShellLinkDataList,
            dw_sig: u32,
            pp_data_block: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveDataBlock: *const fn (
            self: *const IShellLinkDataList,
            dw_sig: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn (
            self: *const IShellLinkDataList,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFlags: *const fn (
            self: *const IShellLinkDataList,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addDataBlock(self: *const T, p_data_block_: ?*anyopaque) HRESULT {
                return @as(*const IShellLinkDataList.VTable, @ptrCast(self.vtable)).AddDataBlock(@as(*const IShellLinkDataList, @ptrCast(self)), p_data_block_);
            }
            pub inline fn copyDataBlock(self: *const T, dw_sig_: u32, pp_data_block_: ?*?*anyopaque) HRESULT {
                return @as(*const IShellLinkDataList.VTable, @ptrCast(self.vtable)).CopyDataBlock(@as(*const IShellLinkDataList, @ptrCast(self)), dw_sig_, pp_data_block_);
            }
            pub inline fn removeDataBlock(self: *const T, dw_sig_: u32) HRESULT {
                return @as(*const IShellLinkDataList.VTable, @ptrCast(self.vtable)).RemoveDataBlock(@as(*const IShellLinkDataList, @ptrCast(self)), dw_sig_);
            }
            pub inline fn getFlags(self: *const T, pdw_flags_: ?*u32) HRESULT {
                return @as(*const IShellLinkDataList.VTable, @ptrCast(self.vtable)).GetFlags(@as(*const IShellLinkDataList, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn setFlags(self: *const T, dw_flags_: u32) HRESULT {
                return @as(*const IShellLinkDataList.VTable, @ptrCast(self.vtable)).SetFlags(@as(*const IShellLinkDataList, @ptrCast(self)), dw_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IResolveShellLink_Value = Guid.initString("5cd52983-9449-11d2-963a-00c04f79adf0");
pub const IID_IResolveShellLink = &IID_IResolveShellLink_Value;
pub const IResolveShellLink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ResolveShellLink: *const fn (
            self: *const IResolveShellLink,
            punk_link: ?*IUnknown,
            hwnd: ?HWND,
            f_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn resolveShellLink(self: *const T, punk_link_: ?*IUnknown, hwnd_: ?HWND, f_flags_: u32) HRESULT {
                return @as(*const IResolveShellLink.VTable, @ptrCast(self.vtable)).ResolveShellLink(@as(*const IResolveShellLink, @ptrCast(self)), punk_link_, hwnd_, f_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const _SPINITF = enum(i32) {
    NORMAL = 0,
    MODAL = 1,
    NOMINIMIZE = 8,
};
pub const SPINITF_NORMAL = _SPINITF.NORMAL;
pub const SPINITF_MODAL = _SPINITF.MODAL;
pub const SPINITF_NOMINIMIZE = _SPINITF.NOMINIMIZE;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IActionProgressDialog_Value = Guid.initString("49ff1172-eadc-446d-9285-156453a6431c");
pub const IID_IActionProgressDialog = &IID_IActionProgressDialog_Value;
pub const IActionProgressDialog = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IActionProgressDialog,
            flags: u32,
            psz_title: ?[*:0]const u16,
            psz_cancel: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const IActionProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, flags_: u32, psz_title_: ?[*:0]const u16, psz_cancel_: ?[*:0]const u16) HRESULT {
                return @as(*const IActionProgressDialog.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IActionProgressDialog, @ptrCast(self)), flags_, psz_title_, psz_cancel_);
            }
            pub inline fn stop(self: *const T) HRESULT {
                return @as(*const IActionProgressDialog.VTable, @ptrCast(self.vtable)).Stop(@as(*const IActionProgressDialog, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const _SPBEGINF = enum(i32) {
    NORMAL = 0,
    AUTOTIME = 2,
    NOPROGRESSBAR = 16,
    MARQUEEPROGRESS = 32,
    NOCANCELBUTTON = 64,
};
pub const SPBEGINF_NORMAL = _SPBEGINF.NORMAL;
pub const SPBEGINF_AUTOTIME = _SPBEGINF.AUTOTIME;
pub const SPBEGINF_NOPROGRESSBAR = _SPBEGINF.NOPROGRESSBAR;
pub const SPBEGINF_MARQUEEPROGRESS = _SPBEGINF.MARQUEEPROGRESS;
pub const SPBEGINF_NOCANCELBUTTON = _SPBEGINF.NOCANCELBUTTON;

pub const SPACTION = enum(i32) {
    NONE = 0,
    MOVING = 1,
    COPYING = 2,
    RECYCLING = 3,
    APPLYINGATTRIBS = 4,
    DOWNLOADING = 5,
    SEARCHING_INTERNET = 6,
    CALCULATING = 7,
    UPLOADING = 8,
    SEARCHING_FILES = 9,
    DELETING = 10,
    RENAMING = 11,
    FORMATTING = 12,
    COPY_MOVING = 13,
};
pub const SPACTION_NONE = SPACTION.NONE;
pub const SPACTION_MOVING = SPACTION.MOVING;
pub const SPACTION_COPYING = SPACTION.COPYING;
pub const SPACTION_RECYCLING = SPACTION.RECYCLING;
pub const SPACTION_APPLYINGATTRIBS = SPACTION.APPLYINGATTRIBS;
pub const SPACTION_DOWNLOADING = SPACTION.DOWNLOADING;
pub const SPACTION_SEARCHING_INTERNET = SPACTION.SEARCHING_INTERNET;
pub const SPACTION_CALCULATING = SPACTION.CALCULATING;
pub const SPACTION_UPLOADING = SPACTION.UPLOADING;
pub const SPACTION_SEARCHING_FILES = SPACTION.SEARCHING_FILES;
pub const SPACTION_DELETING = SPACTION.DELETING;
pub const SPACTION_RENAMING = SPACTION.RENAMING;
pub const SPACTION_FORMATTING = SPACTION.FORMATTING;
pub const SPACTION_COPY_MOVING = SPACTION.COPY_MOVING;

pub const SPTEXT = enum(i32) {
    SCRIPTION = 1,
    TAIL = 2,
};
pub const SPTEXT_ACTIONDESCRIPTION = SPTEXT.SCRIPTION;
pub const SPTEXT_ACTIONDETAIL = SPTEXT.TAIL;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IActionProgress_Value = Guid.initString("49ff1173-eadc-446d-9285-156453a6431c");
pub const IID_IActionProgress = &IID_IActionProgress_Value;
pub const IActionProgress = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Begin: *const fn (
            self: *const IActionProgress,
            action: SPACTION,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateProgress: *const fn (
            self: *const IActionProgress,
            ul_completed: u64,
            ul_total: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateText: *const fn (
            self: *const IActionProgress,
            sptext: SPTEXT,
            psz_text: ?[*:0]const u16,
            f_may_compact: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryCancel: *const fn (
            self: *const IActionProgress,
            pf_cancelled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetCancel: *const fn (
            self: *const IActionProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        End: *const fn (
            self: *const IActionProgress,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn begin(self: *const T, action_: SPACTION, flags_: u32) HRESULT {
                return @as(*const IActionProgress.VTable, @ptrCast(self.vtable)).Begin(@as(*const IActionProgress, @ptrCast(self)), action_, flags_);
            }
            pub inline fn updateProgress(self: *const T, ul_completed_: u64, ul_total_: u64) HRESULT {
                return @as(*const IActionProgress.VTable, @ptrCast(self.vtable)).UpdateProgress(@as(*const IActionProgress, @ptrCast(self)), ul_completed_, ul_total_);
            }
            pub inline fn updateText(self: *const T, sptext_: SPTEXT, psz_text_: ?[*:0]const u16, f_may_compact_: BOOL) HRESULT {
                return @as(*const IActionProgress.VTable, @ptrCast(self.vtable)).UpdateText(@as(*const IActionProgress, @ptrCast(self)), sptext_, psz_text_, f_may_compact_);
            }
            pub inline fn queryCancel(self: *const T, pf_cancelled_: ?*BOOL) HRESULT {
                return @as(*const IActionProgress.VTable, @ptrCast(self.vtable)).QueryCancel(@as(*const IActionProgress, @ptrCast(self)), pf_cancelled_);
            }
            pub inline fn resetCancel(self: *const T) HRESULT {
                return @as(*const IActionProgress.VTable, @ptrCast(self.vtable)).ResetCancel(@as(*const IActionProgress, @ptrCast(self)));
            }
            pub inline fn end(self: *const T) HRESULT {
                return @as(*const IActionProgress.VTable, @ptrCast(self.vtable)).End(@as(*const IActionProgress, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellExtInit_Value = Guid.initString("000214e8-0000-0000-c000-000000000046");
pub const IID_IShellExtInit = &IID_IShellExtInit_Value;
pub const IShellExtInit = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IShellExtInit,
            pidl_folder: ?*ITEMIDLIST,
            pdtobj: ?*IDataObject,
            hkey_prog_i_d: ?HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, pidl_folder_: ?*ITEMIDLIST, pdtobj_: ?*IDataObject, hkey_prog_i_d_: ?HKEY) HRESULT {
                return @as(*const IShellExtInit.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IShellExtInit, @ptrCast(self)), pidl_folder_, pdtobj_, hkey_prog_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const _EXPPS = enum(i32) {
    S = 1,
};
pub const EXPPS_FILETYPES = _EXPPS.S;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellPropSheetExt_Value = Guid.initString("000214e9-0000-0000-c000-000000000046");
pub const IID_IShellPropSheetExt = &IID_IShellPropSheetExt_Value;
pub const IShellPropSheetExt = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddPages: *const fn (
            self: *const IShellPropSheetExt,
            pfn_add_page: ?LPFNSVADDPROPSHEETPAGE,
            l_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReplacePage: *const fn (
            self: *const IShellPropSheetExt,
            u_page_i_d: u32,
            pfn_replace_with: ?LPFNSVADDPROPSHEETPAGE,
            l_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addPages(self: *const T, pfn_add_page_: ?LPFNSVADDPROPSHEETPAGE, l_param_: LPARAM) HRESULT {
                return @as(*const IShellPropSheetExt.VTable, @ptrCast(self.vtable)).AddPages(@as(*const IShellPropSheetExt, @ptrCast(self)), pfn_add_page_, l_param_);
            }
            pub inline fn replacePage(self: *const T, u_page_i_d_: u32, pfn_replace_with_: ?LPFNSVADDPROPSHEETPAGE, l_param_: LPARAM) HRESULT {
                return @as(*const IShellPropSheetExt.VTable, @ptrCast(self.vtable)).ReplacePage(@as(*const IShellPropSheetExt, @ptrCast(self)), u_page_i_d_, pfn_replace_with_, l_param_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IRemoteComputer_Value = Guid.initString("000214fe-0000-0000-c000-000000000046");
pub const IID_IRemoteComputer = &IID_IRemoteComputer_Value;
pub const IRemoteComputer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IRemoteComputer,
            psz_machine: ?[*:0]const u16,
            b_enumerating: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, psz_machine_: ?[*:0]const u16, b_enumerating_: BOOL) HRESULT {
                return @as(*const IRemoteComputer.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IRemoteComputer, @ptrCast(self)), psz_machine_, b_enumerating_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IQueryContinue_Value = Guid.initString("7307055c-b24a-486b-9f25-163e597a28a9");
pub const IID_IQueryContinue = &IID_IQueryContinue_Value;
pub const IQueryContinue = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryContinue: *const fn (
            self: *const IQueryContinue,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn queryContinue(self: *const T) HRESULT {
                return @as(*const IQueryContinue.VTable, @ptrCast(self.vtable)).QueryContinue(@as(*const IQueryContinue, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IObjectWithCancelEvent_Value = Guid.initString("f279b885-0ae9-4b85-ac06-ddecf9408941");
pub const IID_IObjectWithCancelEvent = &IID_IObjectWithCancelEvent_Value;
pub const IObjectWithCancelEvent = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCancelEvent: *const fn (
            self: *const IObjectWithCancelEvent,
            ph_event: ?*?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCancelEvent(self: *const T, ph_event_: ?*?HANDLE) HRESULT {
                return @as(*const IObjectWithCancelEvent.VTable, @ptrCast(self.vtable)).GetCancelEvent(@as(*const IObjectWithCancelEvent, @ptrCast(self)), ph_event_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IUserNotification_Value = Guid.initString("ba9711ba-5893-4787-a7e1-41277151550b");
pub const IID_IUserNotification = &IID_IUserNotification_Value;
pub const IUserNotification = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetBalloonInfo: *const fn (
            self: *const IUserNotification,
            psz_title: ?[*:0]const u16,
            psz_text: ?[*:0]const u16,
            dw_info_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBalloonRetry: *const fn (
            self: *const IUserNotification,
            dw_show_time: u32,
            dw_interval: u32,
            c_retry_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIconInfo: *const fn (
            self: *const IUserNotification,
            h_icon: ?HICON,
            psz_tool_tip: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Show: *const fn (
            self: *const IUserNotification,
            pqc: ?*IQueryContinue,
            dw_continue_poll_interval: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PlaySound: *const fn (
            self: *const IUserNotification,
            psz_sound_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setBalloonInfo(self: *const T, psz_title_: ?[*:0]const u16, psz_text_: ?[*:0]const u16, dw_info_flags_: u32) HRESULT {
                return @as(*const IUserNotification.VTable, @ptrCast(self.vtable)).SetBalloonInfo(@as(*const IUserNotification, @ptrCast(self)), psz_title_, psz_text_, dw_info_flags_);
            }
            pub inline fn setBalloonRetry(self: *const T, dw_show_time_: u32, dw_interval_: u32, c_retry_count_: u32) HRESULT {
                return @as(*const IUserNotification.VTable, @ptrCast(self.vtable)).SetBalloonRetry(@as(*const IUserNotification, @ptrCast(self)), dw_show_time_, dw_interval_, c_retry_count_);
            }
            pub inline fn setIconInfo(self: *const T, h_icon_: ?HICON, psz_tool_tip_: ?[*:0]const u16) HRESULT {
                return @as(*const IUserNotification.VTable, @ptrCast(self.vtable)).SetIconInfo(@as(*const IUserNotification, @ptrCast(self)), h_icon_, psz_tool_tip_);
            }
            pub inline fn show(self: *const T, pqc_: ?*IQueryContinue, dw_continue_poll_interval_: u32) HRESULT {
                return @as(*const IUserNotification.VTable, @ptrCast(self.vtable)).Show(@as(*const IUserNotification, @ptrCast(self)), pqc_, dw_continue_poll_interval_);
            }
            pub inline fn playSound(self: *const T, psz_sound_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IUserNotification.VTable, @ptrCast(self.vtable)).PlaySound(@as(*const IUserNotification, @ptrCast(self)), psz_sound_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IItemNameLimits_Value = Guid.initString("1df0d7f1-b267-4d28-8b10-12e23202a5c4");
pub const IID_IItemNameLimits = &IID_IItemNameLimits_Value;
pub const IItemNameLimits = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetValidCharacters: *const fn (
            self: *const IItemNameLimits,
            ppwsz_valid_chars: ?*?PWSTR,
            ppwsz_invalid_chars: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxLength: *const fn (
            self: *const IItemNameLimits,
            psz_name: ?[*:0]const u16,
            pi_max_name_len: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getValidCharacters(self: *const T, ppwsz_valid_chars_: ?*?PWSTR, ppwsz_invalid_chars_: ?*?PWSTR) HRESULT {
                return @as(*const IItemNameLimits.VTable, @ptrCast(self.vtable)).GetValidCharacters(@as(*const IItemNameLimits, @ptrCast(self)), ppwsz_valid_chars_, ppwsz_invalid_chars_);
            }
            pub inline fn getMaxLength(self: *const T, psz_name_: ?[*:0]const u16, pi_max_name_len_: ?*i32) HRESULT {
                return @as(*const IItemNameLimits.VTable, @ptrCast(self.vtable)).GetMaxLength(@as(*const IItemNameLimits, @ptrCast(self)), psz_name_, pi_max_name_len_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISearchFolderItemFactory_Value = Guid.initString("a0ffbc28-5482-4366-be27-3e81e78e06c2");
pub const IID_ISearchFolderItemFactory = &IID_ISearchFolderItemFactory_Value;
pub const ISearchFolderItemFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetDisplayName: *const fn (
            self: *const ISearchFolderItemFactory,
            psz_display_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolderTypeID: *const fn (
            self: *const ISearchFolderItemFactory,
            ftid: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolderLogicalViewMode: *const fn (
            self: *const ISearchFolderItemFactory,
            flvm: FOLDERLOGICALVIEWMODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIconSize: *const fn (
            self: *const ISearchFolderItemFactory,
            i_icon_size: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVisibleColumns: *const fn (
            self: *const ISearchFolderItemFactory,
            c_visible_columns: u32,
            rg_key: [*]const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSortColumns: *const fn (
            self: *const ISearchFolderItemFactory,
            c_sort_columns: u32,
            rg_sort_columns: [*]SORTCOLUMN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetGroupColumn: *const fn (
            self: *const ISearchFolderItemFactory,
            key_group: ?*const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStacks: *const fn (
            self: *const ISearchFolderItemFactory,
            c_stack_keys: u32,
            rg_stack_keys: [*]PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScope: *const fn (
            self: *const ISearchFolderItemFactory,
            psia_scope: ?*IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCondition: *const fn (
            self: *const ISearchFolderItemFactory,
            p_condition: ?*ICondition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShellItem: *const fn (
            self: *const ISearchFolderItemFactory,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDList: *const fn (
            self: *const ISearchFolderItemFactory,
            ppidl: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setDisplayName(self: *const T, psz_display_name_: ?[*:0]const u16) HRESULT {
                return @as(*const ISearchFolderItemFactory.VTable, @ptrCast(self.vtable)).SetDisplayName(@as(*const ISearchFolderItemFactory, @ptrCast(self)), psz_display_name_);
            }
            pub inline fn setFolderTypeID(self: *const T, ftid_: Guid) HRESULT {
                return @as(*const ISearchFolderItemFactory.VTable, @ptrCast(self.vtable)).SetFolderTypeID(@as(*const ISearchFolderItemFactory, @ptrCast(self)), ftid_);
            }
            pub inline fn setFolderLogicalViewMode(self: *const T, flvm_: FOLDERLOGICALVIEWMODE) HRESULT {
                return @as(*const ISearchFolderItemFactory.VTable, @ptrCast(self.vtable)).SetFolderLogicalViewMode(@as(*const ISearchFolderItemFactory, @ptrCast(self)), flvm_);
            }
            pub inline fn setIconSize(self: *const T, i_icon_size_: i32) HRESULT {
                return @as(*const ISearchFolderItemFactory.VTable, @ptrCast(self.vtable)).SetIconSize(@as(*const ISearchFolderItemFactory, @ptrCast(self)), i_icon_size_);
            }
            pub inline fn setVisibleColumns(self: *const T, c_visible_columns_: u32, rg_key_: [*]const PROPERTYKEY) HRESULT {
                return @as(*const ISearchFolderItemFactory.VTable, @ptrCast(self.vtable)).SetVisibleColumns(@as(*const ISearchFolderItemFactory, @ptrCast(self)), c_visible_columns_, rg_key_);
            }
            pub inline fn setSortColumns(self: *const T, c_sort_columns_: u32, rg_sort_columns_: [*]SORTCOLUMN) HRESULT {
                return @as(*const ISearchFolderItemFactory.VTable, @ptrCast(self.vtable)).SetSortColumns(@as(*const ISearchFolderItemFactory, @ptrCast(self)), c_sort_columns_, rg_sort_columns_);
            }
            pub inline fn setGroupColumn(self: *const T, key_group_: ?*const PROPERTYKEY) HRESULT {
                return @as(*const ISearchFolderItemFactory.VTable, @ptrCast(self.vtable)).SetGroupColumn(@as(*const ISearchFolderItemFactory, @ptrCast(self)), key_group_);
            }
            pub inline fn setStacks(self: *const T, c_stack_keys_: u32, rg_stack_keys_: [*]PROPERTYKEY) HRESULT {
                return @as(*const ISearchFolderItemFactory.VTable, @ptrCast(self.vtable)).SetStacks(@as(*const ISearchFolderItemFactory, @ptrCast(self)), c_stack_keys_, rg_stack_keys_);
            }
            pub inline fn setScope(self: *const T, psia_scope_: ?*IShellItemArray) HRESULT {
                return @as(*const ISearchFolderItemFactory.VTable, @ptrCast(self.vtable)).SetScope(@as(*const ISearchFolderItemFactory, @ptrCast(self)), psia_scope_);
            }
            pub inline fn setCondition(self: *const T, p_condition_: ?*ICondition) HRESULT {
                return @as(*const ISearchFolderItemFactory.VTable, @ptrCast(self.vtable)).SetCondition(@as(*const ISearchFolderItemFactory, @ptrCast(self)), p_condition_);
            }
            pub inline fn getShellItem(self: *const T, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const ISearchFolderItemFactory.VTable, @ptrCast(self.vtable)).GetShellItem(@as(*const ISearchFolderItemFactory, @ptrCast(self)), riid_, ppv_);
            }
            pub inline fn getIDList(self: *const T, ppidl_: ?*?*ITEMIDLIST) HRESULT {
                return @as(*const ISearchFolderItemFactory.VTable, @ptrCast(self.vtable)).GetIDList(@as(*const ISearchFolderItemFactory, @ptrCast(self)), ppidl_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IExtractImage_Value = Guid.initString("bb2e617c-0920-11d1-9a0b-00c04fc2d6c1");
pub const IID_IExtractImage = &IID_IExtractImage_Value;
pub const IExtractImage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLocation: *const fn (
            self: *const IExtractImage,
            psz_path_buffer: [*:0]u16,
            cch: u32,
            pdw_priority: ?*u32,
            prg_size: ?*const SIZE,
            dw_rec_clr_depth: u32,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Extract: *const fn (
            self: *const IExtractImage,
            ph_bmp_thumbnail: ?*?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getLocation(self: *const T, psz_path_buffer_: [*:0]u16, cch_: u32, pdw_priority_: ?*u32, prg_size_: ?*const SIZE, dw_rec_clr_depth_: u32, pdw_flags_: ?*u32) HRESULT {
                return @as(*const IExtractImage.VTable, @ptrCast(self.vtable)).GetLocation(@as(*const IExtractImage, @ptrCast(self)), psz_path_buffer_, cch_, pdw_priority_, prg_size_, dw_rec_clr_depth_, pdw_flags_);
            }
            pub inline fn extract(self: *const T, ph_bmp_thumbnail_: ?*?HBITMAP) HRESULT {
                return @as(*const IExtractImage.VTable, @ptrCast(self.vtable)).Extract(@as(*const IExtractImage, @ptrCast(self)), ph_bmp_thumbnail_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IExtractImage2_Value = Guid.initString("953bb1ee-93b4-11d1-98a3-00c04fb687da");
pub const IID_IExtractImage2 = &IID_IExtractImage2_Value;
pub const IExtractImage2 = extern struct {
    pub const VTable = extern struct {
        base: IExtractImage.VTable,
        GetDateStamp: *const fn (
            self: *const IExtractImage2,
            p_date_stamp: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IExtractImage.MethodMixin(T);
            pub inline fn getDateStamp(self: *const T, p_date_stamp_: ?*FILETIME) HRESULT {
                return @as(*const IExtractImage2.VTable, @ptrCast(self.vtable)).GetDateStamp(@as(*const IExtractImage2, @ptrCast(self)), p_date_stamp_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IThumbnailHandlerFactory_Value = Guid.initString("e35b4b2e-00da-4bc1-9f13-38bc11f5d417");
pub const IID_IThumbnailHandlerFactory = &IID_IThumbnailHandlerFactory_Value;
pub const IThumbnailHandlerFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetThumbnailHandler: *const fn (
            self: *const IThumbnailHandlerFactory,
            pidl_child: ?*ITEMIDLIST,
            pbc: ?*IBindCtx,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getThumbnailHandler(self: *const T, pidl_child_: ?*ITEMIDLIST, pbc_: ?*IBindCtx, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IThumbnailHandlerFactory.VTable, @ptrCast(self.vtable)).GetThumbnailHandler(@as(*const IThumbnailHandlerFactory, @ptrCast(self)), pidl_child_, pbc_, riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IParentAndItem_Value = Guid.initString("b3a4b685-b685-4805-99d9-5dead2873236");
pub const IID_IParentAndItem = &IID_IParentAndItem_Value;
pub const IParentAndItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetParentAndItem: *const fn (
            self: *const IParentAndItem,
            pidl_parent: ?*ITEMIDLIST,
            psf: ?*IShellFolder,
            pidl_child: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParentAndItem: *const fn (
            self: *const IParentAndItem,
            ppidl_parent: ?*?*ITEMIDLIST,
            ppsf: ?*?*IShellFolder,
            ppidl_child: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setParentAndItem(self: *const T, pidl_parent_: ?*ITEMIDLIST, psf_: ?*IShellFolder, pidl_child_: ?*ITEMIDLIST) HRESULT {
                return @as(*const IParentAndItem.VTable, @ptrCast(self.vtable)).SetParentAndItem(@as(*const IParentAndItem, @ptrCast(self)), pidl_parent_, psf_, pidl_child_);
            }
            pub inline fn getParentAndItem(self: *const T, ppidl_parent_: ?*?*ITEMIDLIST, ppsf_: ?*?*IShellFolder, ppidl_child_: ?*?*ITEMIDLIST) HRESULT {
                return @as(*const IParentAndItem.VTable, @ptrCast(self.vtable)).GetParentAndItem(@as(*const IParentAndItem, @ptrCast(self)), ppidl_parent_, ppsf_, ppidl_child_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IDockingWindow_Value = Guid.initString("012dd920-7b26-11d0-8ca9-00a0c92dbfe8");
pub const IID_IDockingWindow = &IID_IDockingWindow_Value;
pub const IDockingWindow = extern struct {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        ShowDW: *const fn (
            self: *const IDockingWindow,
            f_show: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseDW: *const fn (
            self: *const IDockingWindow,
            dw_reserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResizeBorderDW: *const fn (
            self: *const IDockingWindow,
            prc_border: ?*RECT,
            punk_toolbar_site: ?*IUnknown,
            f_reserved: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOleWindow.MethodMixin(T);
            pub inline fn showDW(self: *const T, f_show_: BOOL) HRESULT {
                return @as(*const IDockingWindow.VTable, @ptrCast(self.vtable)).ShowDW(@as(*const IDockingWindow, @ptrCast(self)), f_show_);
            }
            pub inline fn closeDW(self: *const T, dw_reserved_: u32) HRESULT {
                return @as(*const IDockingWindow.VTable, @ptrCast(self.vtable)).CloseDW(@as(*const IDockingWindow, @ptrCast(self)), dw_reserved_);
            }
            pub inline fn resizeBorderDW(self: *const T, prc_border_: ?*RECT, punk_toolbar_site_: ?*IUnknown, f_reserved_: BOOL) HRESULT {
                return @as(*const IDockingWindow.VTable, @ptrCast(self.vtable)).ResizeBorderDW(@as(*const IDockingWindow, @ptrCast(self)), prc_border_, punk_toolbar_site_, f_reserved_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DESKBANDINFO = extern struct {
    dwMask: u32,
    ptMinSize: POINTL,
    ptMaxSize: POINTL,
    ptIntegral: POINTL,
    ptActual: POINTL,
    wszTitle: [256]u16,
    dwModeFlags: u32,
    crBkgnd: u32,
};

pub const DESKBANDCID = enum(i32) {
    BANDINFOCHANGED = 0,
    SHOWONLY = 1,
    MAXIMIZEBAND = 2,
    PUSHCHEVRON = 3,
    DELAYINIT = 4,
    FINISHINIT = 5,
    SETWINDOWTHEME = 6,
    PERMITAUTOHIDE = 7,
};
pub const DBID_BANDINFOCHANGED = DESKBANDCID.BANDINFOCHANGED;
pub const DBID_SHOWONLY = DESKBANDCID.SHOWONLY;
pub const DBID_MAXIMIZEBAND = DESKBANDCID.MAXIMIZEBAND;
pub const DBID_PUSHCHEVRON = DESKBANDCID.PUSHCHEVRON;
pub const DBID_DELAYINIT = DESKBANDCID.DELAYINIT;
pub const DBID_FINISHINIT = DESKBANDCID.FINISHINIT;
pub const DBID_SETWINDOWTHEME = DESKBANDCID.SETWINDOWTHEME;
pub const DBID_PERMITAUTOHIDE = DESKBANDCID.PERMITAUTOHIDE;

// TODO: this type is limited to platform 'windows5.0'
const IID_IDeskBand_Value = Guid.initString("eb0fe172-1a3a-11d0-89b3-00a0c90a90ac");
pub const IID_IDeskBand = &IID_IDeskBand_Value;
pub const IDeskBand = extern struct {
    pub const VTable = extern struct {
        base: IDockingWindow.VTable,
        GetBandInfo: *const fn (
            self: *const IDeskBand,
            dw_band_i_d: u32,
            dw_view_mode: u32,
            pdbi: ?*DESKBANDINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDockingWindow.MethodMixin(T);
            pub inline fn getBandInfo(self: *const T, dw_band_i_d_: u32, dw_view_mode_: u32, pdbi_: ?*DESKBANDINFO) HRESULT {
                return @as(*const IDeskBand.VTable, @ptrCast(self.vtable)).GetBandInfo(@as(*const IDeskBand, @ptrCast(self)), dw_band_i_d_, dw_view_mode_, pdbi_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDeskBandInfo_Value = Guid.initString("77e425fc-cbf9-4307-ba6a-bb5727745661");
pub const IID_IDeskBandInfo = &IID_IDeskBandInfo_Value;
pub const IDeskBandInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDefaultBandWidth: *const fn (
            self: *const IDeskBandInfo,
            dw_band_i_d: u32,
            dw_view_mode: u32,
            pn_width: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDefaultBandWidth(self: *const T, dw_band_i_d_: u32, dw_view_mode_: u32, pn_width_: ?*i32) HRESULT {
                return @as(*const IDeskBandInfo.VTable, @ptrCast(self.vtable)).GetDefaultBandWidth(@as(*const IDeskBandInfo, @ptrCast(self)), dw_band_i_d_, dw_view_mode_, pn_width_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ITaskbarList_Value = Guid.initString("56fdf342-fd6d-11d0-958a-006097c9a090");
pub const IID_ITaskbarList = &IID_ITaskbarList_Value;
pub const ITaskbarList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        HrInit: *const fn (
            self: *const ITaskbarList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTab: *const fn (
            self: *const ITaskbarList,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteTab: *const fn (
            self: *const ITaskbarList,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivateTab: *const fn (
            self: *const ITaskbarList,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActiveAlt: *const fn (
            self: *const ITaskbarList,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn hrInit(self: *const T) HRESULT {
                return @as(*const ITaskbarList.VTable, @ptrCast(self.vtable)).HrInit(@as(*const ITaskbarList, @ptrCast(self)));
            }
            pub inline fn addTab(self: *const T, hwnd_: ?HWND) HRESULT {
                return @as(*const ITaskbarList.VTable, @ptrCast(self.vtable)).AddTab(@as(*const ITaskbarList, @ptrCast(self)), hwnd_);
            }
            pub inline fn deleteTab(self: *const T, hwnd_: ?HWND) HRESULT {
                return @as(*const ITaskbarList.VTable, @ptrCast(self.vtable)).DeleteTab(@as(*const ITaskbarList, @ptrCast(self)), hwnd_);
            }
            pub inline fn activateTab(self: *const T, hwnd_: ?HWND) HRESULT {
                return @as(*const ITaskbarList.VTable, @ptrCast(self.vtable)).ActivateTab(@as(*const ITaskbarList, @ptrCast(self)), hwnd_);
            }
            pub inline fn setActiveAlt(self: *const T, hwnd_: ?HWND) HRESULT {
                return @as(*const ITaskbarList.VTable, @ptrCast(self.vtable)).SetActiveAlt(@as(*const ITaskbarList, @ptrCast(self)), hwnd_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ITaskbarList2_Value = Guid.initString("602d4995-b13a-429b-a66e-1935e44f4317");
pub const IID_ITaskbarList2 = &IID_ITaskbarList2_Value;
pub const ITaskbarList2 = extern struct {
    pub const VTable = extern struct {
        base: ITaskbarList.VTable,
        MarkFullscreenWindow: *const fn (
            self: *const ITaskbarList2,
            hwnd: ?HWND,
            f_fullscreen: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITaskbarList.MethodMixin(T);
            pub inline fn markFullscreenWindow(self: *const T, hwnd_: ?HWND, f_fullscreen_: BOOL) HRESULT {
                return @as(*const ITaskbarList2.VTable, @ptrCast(self.vtable)).MarkFullscreenWindow(@as(*const ITaskbarList2, @ptrCast(self)), hwnd_, f_fullscreen_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const THUMBBUTTONFLAGS = enum(i32) {
    ENABLED = 0,
    DISABLED = 1,
    DISMISSONCLICK = 2,
    NOBACKGROUND = 4,
    HIDDEN = 8,
    NONINTERACTIVE = 16,
};
pub const THBF_ENABLED = THUMBBUTTONFLAGS.ENABLED;
pub const THBF_DISABLED = THUMBBUTTONFLAGS.DISABLED;
pub const THBF_DISMISSONCLICK = THUMBBUTTONFLAGS.DISMISSONCLICK;
pub const THBF_NOBACKGROUND = THUMBBUTTONFLAGS.NOBACKGROUND;
pub const THBF_HIDDEN = THUMBBUTTONFLAGS.HIDDEN;
pub const THBF_NONINTERACTIVE = THUMBBUTTONFLAGS.NONINTERACTIVE;

pub const THUMBBUTTONMASK = enum(i32) {
    BITMAP = 1,
    ICON = 2,
    TOOLTIP = 4,
    FLAGS = 8,
};
pub const THB_BITMAP = THUMBBUTTONMASK.BITMAP;
pub const THB_ICON = THUMBBUTTONMASK.ICON;
pub const THB_TOOLTIP = THUMBBUTTONMASK.TOOLTIP;
pub const THB_FLAGS = THUMBBUTTONMASK.FLAGS;

pub const THUMBBUTTON = extern struct {
    dwMask: THUMBBUTTONMASK,
    iId: u32,
    iBitmap: u32,
    hIcon: ?HICON,
    szTip: [260]u16,
    dwFlags: THUMBBUTTONFLAGS,
};

pub const TBPFLAG = enum(i32) {
    NOPROGRESS = 0,
    INDETERMINATE = 1,
    NORMAL = 2,
    ERROR = 4,
    PAUSED = 8,
};
pub const TBPF_NOPROGRESS = TBPFLAG.NOPROGRESS;
pub const TBPF_INDETERMINATE = TBPFLAG.INDETERMINATE;
pub const TBPF_NORMAL = TBPFLAG.NORMAL;
pub const TBPF_ERROR = TBPFLAG.ERROR;
pub const TBPF_PAUSED = TBPFLAG.PAUSED;

// TODO: this type is limited to platform 'windows6.1'
const IID_ITaskbarList3_Value = Guid.initString("ea1afb91-9e28-4b86-90e9-9e9f8a5eefaf");
pub const IID_ITaskbarList3 = &IID_ITaskbarList3_Value;
pub const ITaskbarList3 = extern struct {
    pub const VTable = extern struct {
        base: ITaskbarList2.VTable,
        SetProgressValue: *const fn (
            self: *const ITaskbarList3,
            hwnd: ?HWND,
            ull_completed: u64,
            ull_total: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProgressState: *const fn (
            self: *const ITaskbarList3,
            hwnd: ?HWND,
            tbp_flags: TBPFLAG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterTab: *const fn (
            self: *const ITaskbarList3,
            hwnd_tab: ?HWND,
            hwnd_m_d_i: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterTab: *const fn (
            self: *const ITaskbarList3,
            hwnd_tab: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTabOrder: *const fn (
            self: *const ITaskbarList3,
            hwnd_tab: ?HWND,
            hwnd_insert_before: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTabActive: *const fn (
            self: *const ITaskbarList3,
            hwnd_tab: ?HWND,
            hwnd_m_d_i: ?HWND,
            dw_reserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ThumbBarAddButtons: *const fn (
            self: *const ITaskbarList3,
            hwnd: ?HWND,
            c_buttons: u32,
            p_button: [*]THUMBBUTTON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ThumbBarUpdateButtons: *const fn (
            self: *const ITaskbarList3,
            hwnd: ?HWND,
            c_buttons: u32,
            p_button: [*]THUMBBUTTON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ThumbBarSetImageList: *const fn (
            self: *const ITaskbarList3,
            hwnd: ?HWND,
            himl: ?HIMAGELIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOverlayIcon: *const fn (
            self: *const ITaskbarList3,
            hwnd: ?HWND,
            h_icon: ?HICON,
            psz_description: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThumbnailTooltip: *const fn (
            self: *const ITaskbarList3,
            hwnd: ?HWND,
            psz_tip: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThumbnailClip: *const fn (
            self: *const ITaskbarList3,
            hwnd: ?HWND,
            prc_clip: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITaskbarList2.MethodMixin(T);
            pub inline fn setProgressValue(self: *const T, hwnd_: ?HWND, ull_completed_: u64, ull_total_: u64) HRESULT {
                return @as(*const ITaskbarList3.VTable, @ptrCast(self.vtable)).SetProgressValue(@as(*const ITaskbarList3, @ptrCast(self)), hwnd_, ull_completed_, ull_total_);
            }
            pub inline fn setProgressState(self: *const T, hwnd_: ?HWND, tbp_flags_: TBPFLAG) HRESULT {
                return @as(*const ITaskbarList3.VTable, @ptrCast(self.vtable)).SetProgressState(@as(*const ITaskbarList3, @ptrCast(self)), hwnd_, tbp_flags_);
            }
            pub inline fn registerTab(self: *const T, hwnd_tab_: ?HWND, hwnd_m_d_i_: ?HWND) HRESULT {
                return @as(*const ITaskbarList3.VTable, @ptrCast(self.vtable)).RegisterTab(@as(*const ITaskbarList3, @ptrCast(self)), hwnd_tab_, hwnd_m_d_i_);
            }
            pub inline fn unregisterTab(self: *const T, hwnd_tab_: ?HWND) HRESULT {
                return @as(*const ITaskbarList3.VTable, @ptrCast(self.vtable)).UnregisterTab(@as(*const ITaskbarList3, @ptrCast(self)), hwnd_tab_);
            }
            pub inline fn setTabOrder(self: *const T, hwnd_tab_: ?HWND, hwnd_insert_before_: ?HWND) HRESULT {
                return @as(*const ITaskbarList3.VTable, @ptrCast(self.vtable)).SetTabOrder(@as(*const ITaskbarList3, @ptrCast(self)), hwnd_tab_, hwnd_insert_before_);
            }
            pub inline fn setTabActive(self: *const T, hwnd_tab_: ?HWND, hwnd_m_d_i_: ?HWND, dw_reserved_: u32) HRESULT {
                return @as(*const ITaskbarList3.VTable, @ptrCast(self.vtable)).SetTabActive(@as(*const ITaskbarList3, @ptrCast(self)), hwnd_tab_, hwnd_m_d_i_, dw_reserved_);
            }
            pub inline fn thumbBarAddButtons(self: *const T, hwnd_: ?HWND, c_buttons_: u32, p_button_: [*]THUMBBUTTON) HRESULT {
                return @as(*const ITaskbarList3.VTable, @ptrCast(self.vtable)).ThumbBarAddButtons(@as(*const ITaskbarList3, @ptrCast(self)), hwnd_, c_buttons_, p_button_);
            }
            pub inline fn thumbBarUpdateButtons(self: *const T, hwnd_: ?HWND, c_buttons_: u32, p_button_: [*]THUMBBUTTON) HRESULT {
                return @as(*const ITaskbarList3.VTable, @ptrCast(self.vtable)).ThumbBarUpdateButtons(@as(*const ITaskbarList3, @ptrCast(self)), hwnd_, c_buttons_, p_button_);
            }
            pub inline fn thumbBarSetImageList(self: *const T, hwnd_: ?HWND, himl_: ?HIMAGELIST) HRESULT {
                return @as(*const ITaskbarList3.VTable, @ptrCast(self.vtable)).ThumbBarSetImageList(@as(*const ITaskbarList3, @ptrCast(self)), hwnd_, himl_);
            }
            pub inline fn setOverlayIcon(self: *const T, hwnd_: ?HWND, h_icon_: ?HICON, psz_description_: ?[*:0]const u16) HRESULT {
                return @as(*const ITaskbarList3.VTable, @ptrCast(self.vtable)).SetOverlayIcon(@as(*const ITaskbarList3, @ptrCast(self)), hwnd_, h_icon_, psz_description_);
            }
            pub inline fn setThumbnailTooltip(self: *const T, hwnd_: ?HWND, psz_tip_: ?[*:0]const u16) HRESULT {
                return @as(*const ITaskbarList3.VTable, @ptrCast(self.vtable)).SetThumbnailTooltip(@as(*const ITaskbarList3, @ptrCast(self)), hwnd_, psz_tip_);
            }
            pub inline fn setThumbnailClip(self: *const T, hwnd_: ?HWND, prc_clip_: ?*RECT) HRESULT {
                return @as(*const ITaskbarList3.VTable, @ptrCast(self.vtable)).SetThumbnailClip(@as(*const ITaskbarList3, @ptrCast(self)), hwnd_, prc_clip_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const STPFLAG = enum(i32) {
    NONE = 0,
    USEAPPTHUMBNAILALWAYS = 1,
    USEAPPTHUMBNAILWHENACTIVE = 2,
    USEAPPPEEKALWAYS = 4,
    USEAPPPEEKWHENACTIVE = 8,
};
pub const STPF_NONE = STPFLAG.NONE;
pub const STPF_USEAPPTHUMBNAILALWAYS = STPFLAG.USEAPPTHUMBNAILALWAYS;
pub const STPF_USEAPPTHUMBNAILWHENACTIVE = STPFLAG.USEAPPTHUMBNAILWHENACTIVE;
pub const STPF_USEAPPPEEKALWAYS = STPFLAG.USEAPPPEEKALWAYS;
pub const STPF_USEAPPPEEKWHENACTIVE = STPFLAG.USEAPPPEEKWHENACTIVE;

// TODO: this type is limited to platform 'windows6.1'
const IID_ITaskbarList4_Value = Guid.initString("c43dc798-95d1-4bea-9030-bb99e2983a1a");
pub const IID_ITaskbarList4 = &IID_ITaskbarList4_Value;
pub const ITaskbarList4 = extern struct {
    pub const VTable = extern struct {
        base: ITaskbarList3.VTable,
        SetTabProperties: *const fn (
            self: *const ITaskbarList4,
            hwnd_tab: ?HWND,
            stp_flags: STPFLAG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITaskbarList3.MethodMixin(T);
            pub inline fn setTabProperties(self: *const T, hwnd_tab_: ?HWND, stp_flags_: STPFLAG) HRESULT {
                return @as(*const ITaskbarList4.VTable, @ptrCast(self.vtable)).SetTabProperties(@as(*const ITaskbarList4, @ptrCast(self)), hwnd_tab_, stp_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IExplorerBrowserEvents_Value = Guid.initString("361bbdc7-e6ee-4e13-be58-58e2240c810f");
pub const IID_IExplorerBrowserEvents = &IID_IExplorerBrowserEvents_Value;
pub const IExplorerBrowserEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnNavigationPending: *const fn (
            self: *const IExplorerBrowserEvents,
            pidl_folder: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnViewCreated: *const fn (
            self: *const IExplorerBrowserEvents,
            psv: ?*IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNavigationComplete: *const fn (
            self: *const IExplorerBrowserEvents,
            pidl_folder: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNavigationFailed: *const fn (
            self: *const IExplorerBrowserEvents,
            pidl_folder: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onNavigationPending(self: *const T, pidl_folder_: ?*ITEMIDLIST) HRESULT {
                return @as(*const IExplorerBrowserEvents.VTable, @ptrCast(self.vtable)).OnNavigationPending(@as(*const IExplorerBrowserEvents, @ptrCast(self)), pidl_folder_);
            }
            pub inline fn onViewCreated(self: *const T, psv_: ?*IShellView) HRESULT {
                return @as(*const IExplorerBrowserEvents.VTable, @ptrCast(self.vtable)).OnViewCreated(@as(*const IExplorerBrowserEvents, @ptrCast(self)), psv_);
            }
            pub inline fn onNavigationComplete(self: *const T, pidl_folder_: ?*ITEMIDLIST) HRESULT {
                return @as(*const IExplorerBrowserEvents.VTable, @ptrCast(self.vtable)).OnNavigationComplete(@as(*const IExplorerBrowserEvents, @ptrCast(self)), pidl_folder_);
            }
            pub inline fn onNavigationFailed(self: *const T, pidl_folder_: ?*ITEMIDLIST) HRESULT {
                return @as(*const IExplorerBrowserEvents.VTable, @ptrCast(self.vtable)).OnNavigationFailed(@as(*const IExplorerBrowserEvents, @ptrCast(self)), pidl_folder_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const EXPLORER_BROWSER_OPTIONS = enum(i32) {
    NONE = 0,
    NAVIGATEONCE = 1,
    SHOWFRAMES = 2,
    ALWAYSNAVIGATE = 4,
    NOTRAVELLOG = 8,
    NOWRAPPERWINDOW = 16,
    HTMLSHAREPOINTVIEW = 32,
    NOBORDER = 64,
    NOPERSISTVIEWSTATE = 128,
};
pub const EBO_NONE = EXPLORER_BROWSER_OPTIONS.NONE;
pub const EBO_NAVIGATEONCE = EXPLORER_BROWSER_OPTIONS.NAVIGATEONCE;
pub const EBO_SHOWFRAMES = EXPLORER_BROWSER_OPTIONS.SHOWFRAMES;
pub const EBO_ALWAYSNAVIGATE = EXPLORER_BROWSER_OPTIONS.ALWAYSNAVIGATE;
pub const EBO_NOTRAVELLOG = EXPLORER_BROWSER_OPTIONS.NOTRAVELLOG;
pub const EBO_NOWRAPPERWINDOW = EXPLORER_BROWSER_OPTIONS.NOWRAPPERWINDOW;
pub const EBO_HTMLSHAREPOINTVIEW = EXPLORER_BROWSER_OPTIONS.HTMLSHAREPOINTVIEW;
pub const EBO_NOBORDER = EXPLORER_BROWSER_OPTIONS.NOBORDER;
pub const EBO_NOPERSISTVIEWSTATE = EXPLORER_BROWSER_OPTIONS.NOPERSISTVIEWSTATE;

pub const EXPLORER_BROWSER_FILL_FLAGS = enum(i32) {
    NONE = 0,
    SELECTFROMDATAOBJECT = 256,
    NODROPTARGET = 512,
};
pub const EBF_NONE = EXPLORER_BROWSER_FILL_FLAGS.NONE;
pub const EBF_SELECTFROMDATAOBJECT = EXPLORER_BROWSER_FILL_FLAGS.SELECTFROMDATAOBJECT;
pub const EBF_NODROPTARGET = EXPLORER_BROWSER_FILL_FLAGS.NODROPTARGET;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IExplorerBrowser_Value = Guid.initString("dfd3b6b5-c10c-4be9-85f6-a66969f402f6");
pub const IID_IExplorerBrowser = &IID_IExplorerBrowser_Value;
pub const IExplorerBrowser = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IExplorerBrowser,
            hwnd_parent: ?HWND,
            prc: ?*const RECT,
            pfs: ?*const FOLDERSETTINGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Destroy: *const fn (
            self: *const IExplorerBrowser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRect: *const fn (
            self: *const IExplorerBrowser,
            phdwp: ?*isize,
            rc_browser: RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPropertyBag: *const fn (
            self: *const IExplorerBrowser,
            psz_property_bag: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEmptyText: *const fn (
            self: *const IExplorerBrowser,
            psz_empty_text: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolderSettings: *const fn (
            self: *const IExplorerBrowser,
            pfs: ?*const FOLDERSETTINGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: *const fn (
            self: *const IExplorerBrowser,
            psbe: ?*IExplorerBrowserEvents,
            pdw_cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn (
            self: *const IExplorerBrowser,
            dw_cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOptions: *const fn (
            self: *const IExplorerBrowser,
            dw_flag: EXPLORER_BROWSER_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: *const fn (
            self: *const IExplorerBrowser,
            pdw_flag: ?*EXPLORER_BROWSER_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BrowseToIDList: *const fn (
            self: *const IExplorerBrowser,
            pidl: ?*ITEMIDLIST,
            u_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BrowseToObject: *const fn (
            self: *const IExplorerBrowser,
            punk: ?*IUnknown,
            u_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FillFromObject: *const fn (
            self: *const IExplorerBrowser,
            punk: ?*IUnknown,
            dw_flags: EXPLORER_BROWSER_FILL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAll: *const fn (
            self: *const IExplorerBrowser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentView: *const fn (
            self: *const IExplorerBrowser,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, hwnd_parent_: ?HWND, prc_: ?*const RECT, pfs_: ?*const FOLDERSETTINGS) HRESULT {
                return @as(*const IExplorerBrowser.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IExplorerBrowser, @ptrCast(self)), hwnd_parent_, prc_, pfs_);
            }
            pub inline fn destroy(self: *const T) HRESULT {
                return @as(*const IExplorerBrowser.VTable, @ptrCast(self.vtable)).Destroy(@as(*const IExplorerBrowser, @ptrCast(self)));
            }
            pub inline fn setRect(self: *const T, phdwp_: ?*isize, rc_browser_: RECT) HRESULT {
                return @as(*const IExplorerBrowser.VTable, @ptrCast(self.vtable)).SetRect(@as(*const IExplorerBrowser, @ptrCast(self)), phdwp_, rc_browser_);
            }
            pub inline fn setPropertyBag(self: *const T, psz_property_bag_: ?[*:0]const u16) HRESULT {
                return @as(*const IExplorerBrowser.VTable, @ptrCast(self.vtable)).SetPropertyBag(@as(*const IExplorerBrowser, @ptrCast(self)), psz_property_bag_);
            }
            pub inline fn setEmptyText(self: *const T, psz_empty_text_: ?[*:0]const u16) HRESULT {
                return @as(*const IExplorerBrowser.VTable, @ptrCast(self.vtable)).SetEmptyText(@as(*const IExplorerBrowser, @ptrCast(self)), psz_empty_text_);
            }
            pub inline fn setFolderSettings(self: *const T, pfs_: ?*const FOLDERSETTINGS) HRESULT {
                return @as(*const IExplorerBrowser.VTable, @ptrCast(self.vtable)).SetFolderSettings(@as(*const IExplorerBrowser, @ptrCast(self)), pfs_);
            }
            pub inline fn advise(self: *const T, psbe_: ?*IExplorerBrowserEvents, pdw_cookie_: ?*u32) HRESULT {
                return @as(*const IExplorerBrowser.VTable, @ptrCast(self.vtable)).Advise(@as(*const IExplorerBrowser, @ptrCast(self)), psbe_, pdw_cookie_);
            }
            pub inline fn unadvise(self: *const T, dw_cookie_: u32) HRESULT {
                return @as(*const IExplorerBrowser.VTable, @ptrCast(self.vtable)).Unadvise(@as(*const IExplorerBrowser, @ptrCast(self)), dw_cookie_);
            }
            pub inline fn setOptions(self: *const T, dw_flag_: EXPLORER_BROWSER_OPTIONS) HRESULT {
                return @as(*const IExplorerBrowser.VTable, @ptrCast(self.vtable)).SetOptions(@as(*const IExplorerBrowser, @ptrCast(self)), dw_flag_);
            }
            pub inline fn getOptions(self: *const T, pdw_flag_: ?*EXPLORER_BROWSER_OPTIONS) HRESULT {
                return @as(*const IExplorerBrowser.VTable, @ptrCast(self.vtable)).GetOptions(@as(*const IExplorerBrowser, @ptrCast(self)), pdw_flag_);
            }
            pub inline fn browseToIDList(self: *const T, pidl_: ?*ITEMIDLIST, u_flags_: u32) HRESULT {
                return @as(*const IExplorerBrowser.VTable, @ptrCast(self.vtable)).BrowseToIDList(@as(*const IExplorerBrowser, @ptrCast(self)), pidl_, u_flags_);
            }
            pub inline fn browseToObject(self: *const T, punk_: ?*IUnknown, u_flags_: u32) HRESULT {
                return @as(*const IExplorerBrowser.VTable, @ptrCast(self.vtable)).BrowseToObject(@as(*const IExplorerBrowser, @ptrCast(self)), punk_, u_flags_);
            }
            pub inline fn fillFromObject(self: *const T, punk_: ?*IUnknown, dw_flags_: EXPLORER_BROWSER_FILL_FLAGS) HRESULT {
                return @as(*const IExplorerBrowser.VTable, @ptrCast(self.vtable)).FillFromObject(@as(*const IExplorerBrowser, @ptrCast(self)), punk_, dw_flags_);
            }
            pub inline fn removeAll(self: *const T) HRESULT {
                return @as(*const IExplorerBrowser.VTable, @ptrCast(self.vtable)).RemoveAll(@as(*const IExplorerBrowser, @ptrCast(self)));
            }
            pub inline fn getCurrentView(self: *const T, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IExplorerBrowser.VTable, @ptrCast(self.vtable)).GetCurrentView(@as(*const IExplorerBrowser, @ptrCast(self)), riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumObjects_Value = Guid.initString("2c1c7e2e-2d0e-4059-831e-1e6f82335c2e");
pub const IID_IEnumObjects = &IID_IEnumObjects_Value;
pub const IEnumObjects = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumObjects,
            celt: u32,
            riid: ?*const Guid,
            rgelt: [*]?*anyopaque,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumObjects,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumObjects,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumObjects,
            ppenum: ?*?*IEnumObjects,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, riid_: ?*const Guid, rgelt_: [*]?*anyopaque, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumObjects.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumObjects, @ptrCast(self)), celt_, riid_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumObjects.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumObjects, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumObjects.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumObjects, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumObjects) HRESULT {
                return @as(*const IEnumObjects.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumObjects, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const _OPPROGDLGF = enum(i32) {
    DEFAULT = 0,
    ENABLEPAUSE = 128,
    ALLOWUNDO = 256,
    DONTDISPLAYSOURCEPATH = 512,
    DONTDISPLAYDESTPATH = 1024,
    NOMULTIDAYESTIMATES = 2048,
    DONTDISPLAYLOCATIONS = 4096,
};
pub const OPPROGDLG_DEFAULT = _OPPROGDLGF.DEFAULT;
pub const OPPROGDLG_ENABLEPAUSE = _OPPROGDLGF.ENABLEPAUSE;
pub const OPPROGDLG_ALLOWUNDO = _OPPROGDLGF.ALLOWUNDO;
pub const OPPROGDLG_DONTDISPLAYSOURCEPATH = _OPPROGDLGF.DONTDISPLAYSOURCEPATH;
pub const OPPROGDLG_DONTDISPLAYDESTPATH = _OPPROGDLGF.DONTDISPLAYDESTPATH;
pub const OPPROGDLG_NOMULTIDAYESTIMATES = _OPPROGDLGF.NOMULTIDAYESTIMATES;
pub const OPPROGDLG_DONTDISPLAYLOCATIONS = _OPPROGDLGF.DONTDISPLAYLOCATIONS;

pub const _PDMODE = enum(i32) {
    DEFAULT = 0,
    RUN = 1,
    PREFLIGHT = 2,
    UNDOING = 4,
    ERRORSBLOCKING = 8,
    INDETERMINATE = 16,
};
pub const PDM_DEFAULT = _PDMODE.DEFAULT;
pub const PDM_RUN = _PDMODE.RUN;
pub const PDM_PREFLIGHT = _PDMODE.PREFLIGHT;
pub const PDM_UNDOING = _PDMODE.UNDOING;
pub const PDM_ERRORSBLOCKING = _PDMODE.ERRORSBLOCKING;
pub const PDM_INDETERMINATE = _PDMODE.INDETERMINATE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOperationsProgressDialog_Value = Guid.initString("0c9fb851-e5c9-43eb-a370-f0677b13874c");
pub const IID_IOperationsProgressDialog = &IID_IOperationsProgressDialog_Value;
pub const IOperationsProgressDialog = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartProgressDialog: *const fn (
            self: *const IOperationsProgressDialog,
            hwnd_owner: ?HWND,
            flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopProgressDialog: *const fn (
            self: *const IOperationsProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOperation: *const fn (
            self: *const IOperationsProgressDialog,
            action: SPACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMode: *const fn (
            self: *const IOperationsProgressDialog,
            mode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateProgress: *const fn (
            self: *const IOperationsProgressDialog,
            ull_points_current: u64,
            ull_points_total: u64,
            ull_size_current: u64,
            ull_size_total: u64,
            ull_items_current: u64,
            ull_items_total: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateLocations: *const fn (
            self: *const IOperationsProgressDialog,
            psi_source: ?*IShellItem,
            psi_target: ?*IShellItem,
            psi_item: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetTimer: *const fn (
            self: *const IOperationsProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PauseTimer: *const fn (
            self: *const IOperationsProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResumeTimer: *const fn (
            self: *const IOperationsProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMilliseconds: *const fn (
            self: *const IOperationsProgressDialog,
            pull_elapsed: ?*u64,
            pull_remaining: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOperationStatus: *const fn (
            self: *const IOperationsProgressDialog,
            popstatus: ?*PDOPSTATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn startProgressDialog(self: *const T, hwnd_owner_: ?HWND, flags_: u32) HRESULT {
                return @as(*const IOperationsProgressDialog.VTable, @ptrCast(self.vtable)).StartProgressDialog(@as(*const IOperationsProgressDialog, @ptrCast(self)), hwnd_owner_, flags_);
            }
            pub inline fn stopProgressDialog(self: *const T) HRESULT {
                return @as(*const IOperationsProgressDialog.VTable, @ptrCast(self.vtable)).StopProgressDialog(@as(*const IOperationsProgressDialog, @ptrCast(self)));
            }
            pub inline fn setOperation(self: *const T, action_: SPACTION) HRESULT {
                return @as(*const IOperationsProgressDialog.VTable, @ptrCast(self.vtable)).SetOperation(@as(*const IOperationsProgressDialog, @ptrCast(self)), action_);
            }
            pub inline fn setMode(self: *const T, mode_: u32) HRESULT {
                return @as(*const IOperationsProgressDialog.VTable, @ptrCast(self.vtable)).SetMode(@as(*const IOperationsProgressDialog, @ptrCast(self)), mode_);
            }
            pub inline fn updateProgress(self: *const T, ull_points_current_: u64, ull_points_total_: u64, ull_size_current_: u64, ull_size_total_: u64, ull_items_current_: u64, ull_items_total_: u64) HRESULT {
                return @as(*const IOperationsProgressDialog.VTable, @ptrCast(self.vtable)).UpdateProgress(@as(*const IOperationsProgressDialog, @ptrCast(self)), ull_points_current_, ull_points_total_, ull_size_current_, ull_size_total_, ull_items_current_, ull_items_total_);
            }
            pub inline fn updateLocations(self: *const T, psi_source_: ?*IShellItem, psi_target_: ?*IShellItem, psi_item_: ?*IShellItem) HRESULT {
                return @as(*const IOperationsProgressDialog.VTable, @ptrCast(self.vtable)).UpdateLocations(@as(*const IOperationsProgressDialog, @ptrCast(self)), psi_source_, psi_target_, psi_item_);
            }
            pub inline fn resetTimer(self: *const T) HRESULT {
                return @as(*const IOperationsProgressDialog.VTable, @ptrCast(self.vtable)).ResetTimer(@as(*const IOperationsProgressDialog, @ptrCast(self)));
            }
            pub inline fn pauseTimer(self: *const T) HRESULT {
                return @as(*const IOperationsProgressDialog.VTable, @ptrCast(self.vtable)).PauseTimer(@as(*const IOperationsProgressDialog, @ptrCast(self)));
            }
            pub inline fn resumeTimer(self: *const T) HRESULT {
                return @as(*const IOperationsProgressDialog.VTable, @ptrCast(self.vtable)).ResumeTimer(@as(*const IOperationsProgressDialog, @ptrCast(self)));
            }
            pub inline fn getMilliseconds(self: *const T, pull_elapsed_: ?*u64, pull_remaining_: ?*u64) HRESULT {
                return @as(*const IOperationsProgressDialog.VTable, @ptrCast(self.vtable)).GetMilliseconds(@as(*const IOperationsProgressDialog, @ptrCast(self)), pull_elapsed_, pull_remaining_);
            }
            pub inline fn getOperationStatus(self: *const T, popstatus_: ?*PDOPSTATUS) HRESULT {
                return @as(*const IOperationsProgressDialog.VTable, @ptrCast(self.vtable)).GetOperationStatus(@as(*const IOperationsProgressDialog, @ptrCast(self)), popstatus_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IIOCancelInformation_Value = Guid.initString("f5b0bf81-8cb5-4b1b-9449-1a159e0c733c");
pub const IID_IIOCancelInformation = &IID_IIOCancelInformation_Value;
pub const IIOCancelInformation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetCancelInformation: *const fn (
            self: *const IIOCancelInformation,
            dw_thread_i_d: u32,
            u_msg_cancel: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCancelInformation: *const fn (
            self: *const IIOCancelInformation,
            pdw_thread_i_d: ?*u32,
            pu_msg_cancel: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setCancelInformation(self: *const T, dw_thread_i_d_: u32, u_msg_cancel_: u32) HRESULT {
                return @as(*const IIOCancelInformation.VTable, @ptrCast(self.vtable)).SetCancelInformation(@as(*const IIOCancelInformation, @ptrCast(self)), dw_thread_i_d_, u_msg_cancel_);
            }
            pub inline fn getCancelInformation(self: *const T, pdw_thread_i_d_: ?*u32, pu_msg_cancel_: ?*u32) HRESULT {
                return @as(*const IIOCancelInformation.VTable, @ptrCast(self.vtable)).GetCancelInformation(@as(*const IIOCancelInformation, @ptrCast(self)), pdw_thread_i_d_, pu_msg_cancel_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileOperation_Value = Guid.initString("947aab5f-0a5c-4c13-b4d6-4bf7836fc9f8");
pub const IID_IFileOperation = &IID_IFileOperation_Value;
pub const IFileOperation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: *const fn (
            self: *const IFileOperation,
            pfops: ?*IFileOperationProgressSink,
            pdw_cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn (
            self: *const IFileOperation,
            dw_cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOperationFlags: *const fn (
            self: *const IFileOperation,
            dw_operation_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProgressMessage: *const fn (
            self: *const IFileOperation,
            psz_message: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProgressDialog: *const fn (
            self: *const IFileOperation,
            popd: ?*IOperationsProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperties: *const fn (
            self: *const IFileOperation,
            pproparray: ?*IPropertyChangeArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOwnerWindow: *const fn (
            self: *const IFileOperation,
            hwnd_owner: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ApplyPropertiesToItem: *const fn (
            self: *const IFileOperation,
            psi_item: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ApplyPropertiesToItems: *const fn (
            self: *const IFileOperation,
            punk_items: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenameItem: *const fn (
            self: *const IFileOperation,
            psi_item: ?*IShellItem,
            psz_new_name: ?[*:0]const u16,
            pfops_item: ?*IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenameItems: *const fn (
            self: *const IFileOperation,
            p_unk_items: ?*IUnknown,
            psz_new_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveItem: *const fn (
            self: *const IFileOperation,
            psi_item: ?*IShellItem,
            psi_destination_folder: ?*IShellItem,
            psz_new_name: ?[*:0]const u16,
            pfops_item: ?*IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveItems: *const fn (
            self: *const IFileOperation,
            punk_items: ?*IUnknown,
            psi_destination_folder: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyItem: *const fn (
            self: *const IFileOperation,
            psi_item: ?*IShellItem,
            psi_destination_folder: ?*IShellItem,
            psz_copy_name: ?[*:0]const u16,
            pfops_item: ?*IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyItems: *const fn (
            self: *const IFileOperation,
            punk_items: ?*IUnknown,
            psi_destination_folder: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteItem: *const fn (
            self: *const IFileOperation,
            psi_item: ?*IShellItem,
            pfops_item: ?*IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteItems: *const fn (
            self: *const IFileOperation,
            punk_items: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NewItem: *const fn (
            self: *const IFileOperation,
            psi_destination_folder: ?*IShellItem,
            dw_file_attributes: u32,
            psz_name: ?[*:0]const u16,
            psz_template_name: ?[*:0]const u16,
            pfops_item: ?*IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PerformOperations: *const fn (
            self: *const IFileOperation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAnyOperationsAborted: *const fn (
            self: *const IFileOperation,
            pf_any_operations_aborted: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn advise(self: *const T, pfops_: ?*IFileOperationProgressSink, pdw_cookie_: ?*u32) HRESULT {
                return @as(*const IFileOperation.VTable, @ptrCast(self.vtable)).Advise(@as(*const IFileOperation, @ptrCast(self)), pfops_, pdw_cookie_);
            }
            pub inline fn unadvise(self: *const T, dw_cookie_: u32) HRESULT {
                return @as(*const IFileOperation.VTable, @ptrCast(self.vtable)).Unadvise(@as(*const IFileOperation, @ptrCast(self)), dw_cookie_);
            }
            pub inline fn setOperationFlags(self: *const T, dw_operation_flags_: u32) HRESULT {
                return @as(*const IFileOperation.VTable, @ptrCast(self.vtable)).SetOperationFlags(@as(*const IFileOperation, @ptrCast(self)), dw_operation_flags_);
            }
            pub inline fn setProgressMessage(self: *const T, psz_message_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileOperation.VTable, @ptrCast(self.vtable)).SetProgressMessage(@as(*const IFileOperation, @ptrCast(self)), psz_message_);
            }
            pub inline fn setProgressDialog(self: *const T, popd_: ?*IOperationsProgressDialog) HRESULT {
                return @as(*const IFileOperation.VTable, @ptrCast(self.vtable)).SetProgressDialog(@as(*const IFileOperation, @ptrCast(self)), popd_);
            }
            pub inline fn setProperties(self: *const T, pproparray_: ?*IPropertyChangeArray) HRESULT {
                return @as(*const IFileOperation.VTable, @ptrCast(self.vtable)).SetProperties(@as(*const IFileOperation, @ptrCast(self)), pproparray_);
            }
            pub inline fn setOwnerWindow(self: *const T, hwnd_owner_: ?HWND) HRESULT {
                return @as(*const IFileOperation.VTable, @ptrCast(self.vtable)).SetOwnerWindow(@as(*const IFileOperation, @ptrCast(self)), hwnd_owner_);
            }
            pub inline fn applyPropertiesToItem(self: *const T, psi_item_: ?*IShellItem) HRESULT {
                return @as(*const IFileOperation.VTable, @ptrCast(self.vtable)).ApplyPropertiesToItem(@as(*const IFileOperation, @ptrCast(self)), psi_item_);
            }
            pub inline fn applyPropertiesToItems(self: *const T, punk_items_: ?*IUnknown) HRESULT {
                return @as(*const IFileOperation.VTable, @ptrCast(self.vtable)).ApplyPropertiesToItems(@as(*const IFileOperation, @ptrCast(self)), punk_items_);
            }
            pub inline fn renameItem(self: *const T, psi_item_: ?*IShellItem, psz_new_name_: ?[*:0]const u16, pfops_item_: ?*IFileOperationProgressSink) HRESULT {
                return @as(*const IFileOperation.VTable, @ptrCast(self.vtable)).RenameItem(@as(*const IFileOperation, @ptrCast(self)), psi_item_, psz_new_name_, pfops_item_);
            }
            pub inline fn renameItems(self: *const T, p_unk_items_: ?*IUnknown, psz_new_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileOperation.VTable, @ptrCast(self.vtable)).RenameItems(@as(*const IFileOperation, @ptrCast(self)), p_unk_items_, psz_new_name_);
            }
            pub inline fn moveItem(self: *const T, psi_item_: ?*IShellItem, psi_destination_folder_: ?*IShellItem, psz_new_name_: ?[*:0]const u16, pfops_item_: ?*IFileOperationProgressSink) HRESULT {
                return @as(*const IFileOperation.VTable, @ptrCast(self.vtable)).MoveItem(@as(*const IFileOperation, @ptrCast(self)), psi_item_, psi_destination_folder_, psz_new_name_, pfops_item_);
            }
            pub inline fn moveItems(self: *const T, punk_items_: ?*IUnknown, psi_destination_folder_: ?*IShellItem) HRESULT {
                return @as(*const IFileOperation.VTable, @ptrCast(self.vtable)).MoveItems(@as(*const IFileOperation, @ptrCast(self)), punk_items_, psi_destination_folder_);
            }
            pub inline fn copyItem(self: *const T, psi_item_: ?*IShellItem, psi_destination_folder_: ?*IShellItem, psz_copy_name_: ?[*:0]const u16, pfops_item_: ?*IFileOperationProgressSink) HRESULT {
                return @as(*const IFileOperation.VTable, @ptrCast(self.vtable)).CopyItem(@as(*const IFileOperation, @ptrCast(self)), psi_item_, psi_destination_folder_, psz_copy_name_, pfops_item_);
            }
            pub inline fn copyItems(self: *const T, punk_items_: ?*IUnknown, psi_destination_folder_: ?*IShellItem) HRESULT {
                return @as(*const IFileOperation.VTable, @ptrCast(self.vtable)).CopyItems(@as(*const IFileOperation, @ptrCast(self)), punk_items_, psi_destination_folder_);
            }
            pub inline fn deleteItem(self: *const T, psi_item_: ?*IShellItem, pfops_item_: ?*IFileOperationProgressSink) HRESULT {
                return @as(*const IFileOperation.VTable, @ptrCast(self.vtable)).DeleteItem(@as(*const IFileOperation, @ptrCast(self)), psi_item_, pfops_item_);
            }
            pub inline fn deleteItems(self: *const T, punk_items_: ?*IUnknown) HRESULT {
                return @as(*const IFileOperation.VTable, @ptrCast(self.vtable)).DeleteItems(@as(*const IFileOperation, @ptrCast(self)), punk_items_);
            }
            pub inline fn newItem(self: *const T, psi_destination_folder_: ?*IShellItem, dw_file_attributes_: u32, psz_name_: ?[*:0]const u16, psz_template_name_: ?[*:0]const u16, pfops_item_: ?*IFileOperationProgressSink) HRESULT {
                return @as(*const IFileOperation.VTable, @ptrCast(self.vtable)).NewItem(@as(*const IFileOperation, @ptrCast(self)), psi_destination_folder_, dw_file_attributes_, psz_name_, psz_template_name_, pfops_item_);
            }
            pub inline fn performOperations(self: *const T) HRESULT {
                return @as(*const IFileOperation.VTable, @ptrCast(self.vtable)).PerformOperations(@as(*const IFileOperation, @ptrCast(self)));
            }
            pub inline fn getAnyOperationsAborted(self: *const T, pf_any_operations_aborted_: ?*BOOL) HRESULT {
                return @as(*const IFileOperation.VTable, @ptrCast(self.vtable)).GetAnyOperationsAborted(@as(*const IFileOperation, @ptrCast(self)), pf_any_operations_aborted_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FILE_OPERATION_FLAGS2 = enum(i32) {
    NONE = 0,
    MERGEFOLDERSONCOLLISION = 1,
};
pub const FOF2_NONE = FILE_OPERATION_FLAGS2.NONE;
pub const FOF2_MERGEFOLDERSONCOLLISION = FILE_OPERATION_FLAGS2.MERGEFOLDERSONCOLLISION;

const IID_IFileOperation2_Value = Guid.initString("cd8f23c1-8f61-4916-909d-55bdd0918753");
pub const IID_IFileOperation2 = &IID_IFileOperation2_Value;
pub const IFileOperation2 = extern struct {
    pub const VTable = extern struct {
        base: IFileOperation.VTable,
        SetOperationFlags2: *const fn (
            self: *const IFileOperation2,
            operation_flags2: FILE_OPERATION_FLAGS2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFileOperation.MethodMixin(T);
            pub inline fn setOperationFlags2(self: *const T, operation_flags2_: FILE_OPERATION_FLAGS2) HRESULT {
                return @as(*const IFileOperation2.VTable, @ptrCast(self.vtable)).SetOperationFlags2(@as(*const IFileOperation2, @ptrCast(self)), operation_flags2_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IObjectProvider_Value = Guid.initString("a6087428-3be3-4d73-b308-7c04a540bf1a");
pub const IID_IObjectProvider = &IID_IObjectProvider_Value;
pub const IObjectProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryObject: *const fn (
            self: *const IObjectProvider,
            guid_object: ?*const Guid,
            riid: ?*const Guid,
            ppv_out: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn queryObject(self: *const T, guid_object_: ?*const Guid, riid_: ?*const Guid, ppv_out_: ?*?*anyopaque) HRESULT {
                return @as(*const IObjectProvider.VTable, @ptrCast(self.vtable)).QueryObject(@as(*const IObjectProvider, @ptrCast(self)), guid_object_, riid_, ppv_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INamespaceWalkCB_Value = Guid.initString("d92995f8-cf5e-4a76-bf59-ead39ea2b97e");
pub const IID_INamespaceWalkCB = &IID_INamespaceWalkCB_Value;
pub const INamespaceWalkCB = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FoundItem: *const fn (
            self: *const INamespaceWalkCB,
            psf: ?*IShellFolder,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnterFolder: *const fn (
            self: *const INamespaceWalkCB,
            psf: ?*IShellFolder,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LeaveFolder: *const fn (
            self: *const INamespaceWalkCB,
            psf: ?*IShellFolder,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeProgressDialog: *const fn (
            self: *const INamespaceWalkCB,
            ppsz_title: ?*?PWSTR,
            ppsz_cancel: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn foundItem(self: *const T, psf_: ?*IShellFolder, pidl_: ?*ITEMIDLIST) HRESULT {
                return @as(*const INamespaceWalkCB.VTable, @ptrCast(self.vtable)).FoundItem(@as(*const INamespaceWalkCB, @ptrCast(self)), psf_, pidl_);
            }
            pub inline fn enterFolder(self: *const T, psf_: ?*IShellFolder, pidl_: ?*ITEMIDLIST) HRESULT {
                return @as(*const INamespaceWalkCB.VTable, @ptrCast(self.vtable)).EnterFolder(@as(*const INamespaceWalkCB, @ptrCast(self)), psf_, pidl_);
            }
            pub inline fn leaveFolder(self: *const T, psf_: ?*IShellFolder, pidl_: ?*ITEMIDLIST) HRESULT {
                return @as(*const INamespaceWalkCB.VTable, @ptrCast(self.vtable)).LeaveFolder(@as(*const INamespaceWalkCB, @ptrCast(self)), psf_, pidl_);
            }
            pub inline fn initializeProgressDialog(self: *const T, ppsz_title_: ?*?PWSTR, ppsz_cancel_: ?*?PWSTR) HRESULT {
                return @as(*const INamespaceWalkCB.VTable, @ptrCast(self.vtable)).InitializeProgressDialog(@as(*const INamespaceWalkCB, @ptrCast(self)), ppsz_title_, ppsz_cancel_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INamespaceWalkCB2_Value = Guid.initString("7ac7492b-c38e-438a-87db-68737844ff70");
pub const IID_INamespaceWalkCB2 = &IID_INamespaceWalkCB2_Value;
pub const INamespaceWalkCB2 = extern struct {
    pub const VTable = extern struct {
        base: INamespaceWalkCB.VTable,
        WalkComplete: *const fn (
            self: *const INamespaceWalkCB2,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace INamespaceWalkCB.MethodMixin(T);
            pub inline fn walkComplete(self: *const T, hr_: HRESULT) HRESULT {
                return @as(*const INamespaceWalkCB2.VTable, @ptrCast(self.vtable)).WalkComplete(@as(*const INamespaceWalkCB2, @ptrCast(self)), hr_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const NAMESPACEWALKFLAG = enum(i32) {
    DEFAULT = 0,
    NONE_IMPLIES_ALL = 1,
    ONE_IMPLIES_ALL = 2,
    DONT_TRAVERSE_LINKS = 4,
    DONT_ACCUMULATE_RESULT = 8,
    TRAVERSE_STREAM_JUNCTIONS = 16,
    FILESYSTEM_ONLY = 32,
    SHOW_PROGRESS = 64,
    FLAG_VIEWORDER = 128,
    IGNORE_AUTOPLAY_HIDA = 256,
    ASYNC = 512,
    DONT_RESOLVE_LINKS = 1024,
    ACCUMULATE_FOLDERS = 2048,
    DONT_SORT = 4096,
    USE_TRANSFER_MEDIUM = 8192,
    DONT_TRAVERSE_STREAM_JUNCTIONS = 16384,
    ANY_IMPLIES_ALL = 32768,
};
pub const NSWF_DEFAULT = NAMESPACEWALKFLAG.DEFAULT;
pub const NSWF_NONE_IMPLIES_ALL = NAMESPACEWALKFLAG.NONE_IMPLIES_ALL;
pub const NSWF_ONE_IMPLIES_ALL = NAMESPACEWALKFLAG.ONE_IMPLIES_ALL;
pub const NSWF_DONT_TRAVERSE_LINKS = NAMESPACEWALKFLAG.DONT_TRAVERSE_LINKS;
pub const NSWF_DONT_ACCUMULATE_RESULT = NAMESPACEWALKFLAG.DONT_ACCUMULATE_RESULT;
pub const NSWF_TRAVERSE_STREAM_JUNCTIONS = NAMESPACEWALKFLAG.TRAVERSE_STREAM_JUNCTIONS;
pub const NSWF_FILESYSTEM_ONLY = NAMESPACEWALKFLAG.FILESYSTEM_ONLY;
pub const NSWF_SHOW_PROGRESS = NAMESPACEWALKFLAG.SHOW_PROGRESS;
pub const NSWF_FLAG_VIEWORDER = NAMESPACEWALKFLAG.FLAG_VIEWORDER;
pub const NSWF_IGNORE_AUTOPLAY_HIDA = NAMESPACEWALKFLAG.IGNORE_AUTOPLAY_HIDA;
pub const NSWF_ASYNC = NAMESPACEWALKFLAG.ASYNC;
pub const NSWF_DONT_RESOLVE_LINKS = NAMESPACEWALKFLAG.DONT_RESOLVE_LINKS;
pub const NSWF_ACCUMULATE_FOLDERS = NAMESPACEWALKFLAG.ACCUMULATE_FOLDERS;
pub const NSWF_DONT_SORT = NAMESPACEWALKFLAG.DONT_SORT;
pub const NSWF_USE_TRANSFER_MEDIUM = NAMESPACEWALKFLAG.USE_TRANSFER_MEDIUM;
pub const NSWF_DONT_TRAVERSE_STREAM_JUNCTIONS = NAMESPACEWALKFLAG.DONT_TRAVERSE_STREAM_JUNCTIONS;
pub const NSWF_ANY_IMPLIES_ALL = NAMESPACEWALKFLAG.ANY_IMPLIES_ALL;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INamespaceWalk_Value = Guid.initString("57ced8a7-3f4a-432c-9350-30f24483f74f");
pub const IID_INamespaceWalk = &IID_INamespaceWalk_Value;
pub const INamespaceWalk = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Walk: *const fn (
            self: *const INamespaceWalk,
            punk_to_walk: ?*IUnknown,
            dw_flags: u32,
            c_depth: i32,
            pnswcb: ?*INamespaceWalkCB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDArrayResult: *const fn (
            self: *const INamespaceWalk,
            pc_items: ?*u32,
            prgpidl: [*]?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn walk(self: *const T, punk_to_walk_: ?*IUnknown, dw_flags_: u32, c_depth_: i32, pnswcb_: ?*INamespaceWalkCB) HRESULT {
                return @as(*const INamespaceWalk.VTable, @ptrCast(self.vtable)).Walk(@as(*const INamespaceWalk, @ptrCast(self)), punk_to_walk_, dw_flags_, c_depth_, pnswcb_);
            }
            pub inline fn getIDArrayResult(self: *const T, pc_items_: ?*u32, prgpidl_: [*]?*?*ITEMIDLIST) HRESULT {
                return @as(*const INamespaceWalk.VTable, @ptrCast(self.vtable)).GetIDArrayResult(@as(*const INamespaceWalk, @ptrCast(self)), pc_items_, prgpidl_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const BANDSITEINFO = extern struct {
    dwMask: u32,
    dwState: u32,
    dwStyle: u32,
};

pub const BANDSITECID = enum(i32) {
    ADDED = 0,
    REMOVED = 1,
};
pub const BSID_BANDADDED = BANDSITECID.ADDED;
pub const BSID_BANDREMOVED = BANDSITECID.REMOVED;

// TODO: this type is limited to platform 'windows5.0'
const IID_IBandSite_Value = Guid.initString("4cf504b0-de96-11d0-8b3f-00a0c911e8e5");
pub const IID_IBandSite = &IID_IBandSite_Value;
pub const IBandSite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddBand: *const fn (
            self: *const IBandSite,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumBands: *const fn (
            self: *const IBandSite,
            u_band: u32,
            pdw_band_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryBand: *const fn (
            self: *const IBandSite,
            dw_band_i_d: u32,
            ppstb: ?*?*IDeskBand,
            pdw_state: ?*u32,
            psz_name: ?[*:0]u16,
            cch_name: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBandState: *const fn (
            self: *const IBandSite,
            dw_band_i_d: u32,
            dw_mask: u32,
            dw_state: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveBand: *const fn (
            self: *const IBandSite,
            dw_band_i_d: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBandObject: *const fn (
            self: *const IBandSite,
            dw_band_i_d: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBandSiteInfo: *const fn (
            self: *const IBandSite,
            pbsinfo: ?*const BANDSITEINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBandSiteInfo: *const fn (
            self: *const IBandSite,
            pbsinfo: ?*BANDSITEINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addBand(self: *const T, punk_: ?*IUnknown) HRESULT {
                return @as(*const IBandSite.VTable, @ptrCast(self.vtable)).AddBand(@as(*const IBandSite, @ptrCast(self)), punk_);
            }
            pub inline fn enumBands(self: *const T, u_band_: u32, pdw_band_i_d_: ?*u32) HRESULT {
                return @as(*const IBandSite.VTable, @ptrCast(self.vtable)).EnumBands(@as(*const IBandSite, @ptrCast(self)), u_band_, pdw_band_i_d_);
            }
            pub inline fn queryBand(self: *const T, dw_band_i_d_: u32, ppstb_: ?*?*IDeskBand, pdw_state_: ?*u32, psz_name_: ?[*:0]u16, cch_name_: i32) HRESULT {
                return @as(*const IBandSite.VTable, @ptrCast(self.vtable)).QueryBand(@as(*const IBandSite, @ptrCast(self)), dw_band_i_d_, ppstb_, pdw_state_, psz_name_, cch_name_);
            }
            pub inline fn setBandState(self: *const T, dw_band_i_d_: u32, dw_mask_: u32, dw_state_: u32) HRESULT {
                return @as(*const IBandSite.VTable, @ptrCast(self.vtable)).SetBandState(@as(*const IBandSite, @ptrCast(self)), dw_band_i_d_, dw_mask_, dw_state_);
            }
            pub inline fn removeBand(self: *const T, dw_band_i_d_: u32) HRESULT {
                return @as(*const IBandSite.VTable, @ptrCast(self.vtable)).RemoveBand(@as(*const IBandSite, @ptrCast(self)), dw_band_i_d_);
            }
            pub inline fn getBandObject(self: *const T, dw_band_i_d_: u32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IBandSite.VTable, @ptrCast(self.vtable)).GetBandObject(@as(*const IBandSite, @ptrCast(self)), dw_band_i_d_, riid_, ppv_);
            }
            pub inline fn setBandSiteInfo(self: *const T, pbsinfo_: ?*const BANDSITEINFO) HRESULT {
                return @as(*const IBandSite.VTable, @ptrCast(self.vtable)).SetBandSiteInfo(@as(*const IBandSite, @ptrCast(self)), pbsinfo_);
            }
            pub inline fn getBandSiteInfo(self: *const T, pbsinfo_: ?*BANDSITEINFO) HRESULT {
                return @as(*const IBandSite.VTable, @ptrCast(self.vtable)).GetBandSiteInfo(@as(*const IBandSite, @ptrCast(self)), pbsinfo_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IModalWindow_Value = Guid.initString("b4db1657-70d7-485e-8e3e-6fcb5a5c1802");
pub const IID_IModalWindow = &IID_IModalWindow_Value;
pub const IModalWindow = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Show: *const fn (
            self: *const IModalWindow,
            hwnd_owner: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn show(self: *const T, hwnd_owner_: ?HWND) HRESULT {
                return @as(*const IModalWindow.VTable, @ptrCast(self.vtable)).Show(@as(*const IModalWindow, @ptrCast(self)), hwnd_owner_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IContextMenuSite_Value = Guid.initString("0811aebe-0b87-4c54-9e72-548cf649016b");
pub const IID_IContextMenuSite = &IID_IContextMenuSite_Value;
pub const IContextMenuSite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DoContextMenuPopup: *const fn (
            self: *const IContextMenuSite,
            punk_context_menu: ?*IUnknown,
            f_flags: u32,
            pt: POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn doContextMenuPopup(self: *const T, punk_context_menu_: ?*IUnknown, f_flags_: u32, pt_: POINT) HRESULT {
                return @as(*const IContextMenuSite.VTable, @ptrCast(self.vtable)).DoContextMenuPopup(@as(*const IContextMenuSite, @ptrCast(self)), punk_context_menu_, f_flags_, pt_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const MENUBANDHANDLERCID = enum(i32) {
    T = 0,
};
pub const MBHANDCID_PIDLSELECT = MENUBANDHANDLERCID.T;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMenuBand_Value = Guid.initString("568804cd-cbd7-11d0-9816-00c04fd91972");
pub const IID_IMenuBand = &IID_IMenuBand_Value;
pub const IMenuBand = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsMenuMessage: *const fn (
            self: *const IMenuBand,
            pmsg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateMenuMessage: *const fn (
            self: *const IMenuBand,
            pmsg: ?*MSG,
            pl_ret: ?*LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isMenuMessage(self: *const T, pmsg_: ?*MSG) HRESULT {
                return @as(*const IMenuBand.VTable, @ptrCast(self.vtable)).IsMenuMessage(@as(*const IMenuBand, @ptrCast(self)), pmsg_);
            }
            pub inline fn translateMenuMessage(self: *const T, pmsg_: ?*MSG, pl_ret_: ?*LRESULT) HRESULT {
                return @as(*const IMenuBand.VTable, @ptrCast(self.vtable)).TranslateMenuMessage(@as(*const IMenuBand, @ptrCast(self)), pmsg_, pl_ret_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IRegTreeItem_Value = Guid.initString("a9521922-0812-4d44-9ec3-7fd38c726f3d");
pub const IID_IRegTreeItem = &IID_IRegTreeItem_Value;
pub const IRegTreeItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCheckState: *const fn (
            self: *const IRegTreeItem,
            pb_check: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCheckState: *const fn (
            self: *const IRegTreeItem,
            b_check: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCheckState(self: *const T, pb_check_: ?*BOOL) HRESULT {
                return @as(*const IRegTreeItem.VTable, @ptrCast(self.vtable)).GetCheckState(@as(*const IRegTreeItem, @ptrCast(self)), pb_check_);
            }
            pub inline fn setCheckState(self: *const T, b_check_: BOOL) HRESULT {
                return @as(*const IRegTreeItem.VTable, @ptrCast(self.vtable)).SetCheckState(@as(*const IRegTreeItem, @ptrCast(self)), b_check_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IDeskBar_Value = Guid.initString("eb0fe173-1a3a-11d0-89b3-00a0c90a90ac");
pub const IID_IDeskBar = &IID_IDeskBar_Value;
pub const IDeskBar = extern struct {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        SetClient: *const fn (
            self: *const IDeskBar,
            punk_client: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClient: *const fn (
            self: *const IDeskBar,
            ppunk_client: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnPosRectChangeDB: *const fn (
            self: *const IDeskBar,
            prc: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOleWindow.MethodMixin(T);
            pub inline fn setClient(self: *const T, punk_client_: ?*IUnknown) HRESULT {
                return @as(*const IDeskBar.VTable, @ptrCast(self.vtable)).SetClient(@as(*const IDeskBar, @ptrCast(self)), punk_client_);
            }
            pub inline fn getClient(self: *const T, ppunk_client_: ?*?*IUnknown) HRESULT {
                return @as(*const IDeskBar.VTable, @ptrCast(self.vtable)).GetClient(@as(*const IDeskBar, @ptrCast(self)), ppunk_client_);
            }
            pub inline fn onPosRectChangeDB(self: *const T, prc_: ?*RECT) HRESULT {
                return @as(*const IDeskBar.VTable, @ptrCast(self.vtable)).OnPosRectChangeDB(@as(*const IDeskBar, @ptrCast(self)), prc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const MENUPOPUPSELECT = enum(i32) {
    EXECUTE = 0,
    FULLCANCEL = 1,
    CANCELLEVEL = 2,
    SELECTLEFT = 3,
    SELECTRIGHT = 4,
    CHILDTRACKING = 5,
};
pub const MPOS_EXECUTE = MENUPOPUPSELECT.EXECUTE;
pub const MPOS_FULLCANCEL = MENUPOPUPSELECT.FULLCANCEL;
pub const MPOS_CANCELLEVEL = MENUPOPUPSELECT.CANCELLEVEL;
pub const MPOS_SELECTLEFT = MENUPOPUPSELECT.SELECTLEFT;
pub const MPOS_SELECTRIGHT = MENUPOPUPSELECT.SELECTRIGHT;
pub const MPOS_CHILDTRACKING = MENUPOPUPSELECT.CHILDTRACKING;

pub const MENUPOPUPPOPUPFLAGS = enum(i32) {
    SETFOCUS = 1,
    INITIALSELECT = 2,
    NOANIMATE = 4,
    KEYBOARD = 16,
    REPOSITION = 32,
    FORCEZORDER = 64,
    FINALSELECT = 128,
    TOP = 536870912,
    LEFT = 1073741824,
    RIGHT = 1610612736,
    BOTTOM = -2147483648,
    POS_MASK = -536870912,
    ALIGN_LEFT = 33554432,
    ALIGN_RIGHT = 67108864,
};
pub const MPPF_SETFOCUS = MENUPOPUPPOPUPFLAGS.SETFOCUS;
pub const MPPF_INITIALSELECT = MENUPOPUPPOPUPFLAGS.INITIALSELECT;
pub const MPPF_NOANIMATE = MENUPOPUPPOPUPFLAGS.NOANIMATE;
pub const MPPF_KEYBOARD = MENUPOPUPPOPUPFLAGS.KEYBOARD;
pub const MPPF_REPOSITION = MENUPOPUPPOPUPFLAGS.REPOSITION;
pub const MPPF_FORCEZORDER = MENUPOPUPPOPUPFLAGS.FORCEZORDER;
pub const MPPF_FINALSELECT = MENUPOPUPPOPUPFLAGS.FINALSELECT;
pub const MPPF_TOP = MENUPOPUPPOPUPFLAGS.TOP;
pub const MPPF_LEFT = MENUPOPUPPOPUPFLAGS.LEFT;
pub const MPPF_RIGHT = MENUPOPUPPOPUPFLAGS.RIGHT;
pub const MPPF_BOTTOM = MENUPOPUPPOPUPFLAGS.BOTTOM;
pub const MPPF_POS_MASK = MENUPOPUPPOPUPFLAGS.POS_MASK;
pub const MPPF_ALIGN_LEFT = MENUPOPUPPOPUPFLAGS.ALIGN_LEFT;
pub const MPPF_ALIGN_RIGHT = MENUPOPUPPOPUPFLAGS.ALIGN_RIGHT;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IMenuPopup_Value = Guid.initString("d1e7afeb-6a2e-11d0-8c78-00c04fd918b4");
pub const IID_IMenuPopup = &IID_IMenuPopup_Value;
pub const IMenuPopup = extern struct {
    pub const VTable = extern struct {
        base: IDeskBar.VTable,
        Popup: *const fn (
            self: *const IMenuPopup,
            ppt: ?*POINTL,
            prc_exclude: ?*RECTL,
            dw_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSelect: *const fn (
            self: *const IMenuPopup,
            dw_select_type: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSubMenu: *const fn (
            self: *const IMenuPopup,
            pmp: ?*IMenuPopup,
            f_set: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDeskBar.MethodMixin(T);
            pub inline fn popup(self: *const T, ppt_: ?*POINTL, prc_exclude_: ?*RECTL, dw_flags_: i32) HRESULT {
                return @as(*const IMenuPopup.VTable, @ptrCast(self.vtable)).Popup(@as(*const IMenuPopup, @ptrCast(self)), ppt_, prc_exclude_, dw_flags_);
            }
            pub inline fn onSelect(self: *const T, dw_select_type_: u32) HRESULT {
                return @as(*const IMenuPopup.VTable, @ptrCast(self.vtable)).OnSelect(@as(*const IMenuPopup, @ptrCast(self)), dw_select_type_);
            }
            pub inline fn setSubMenu(self: *const T, pmp_: ?*IMenuPopup, f_set_: BOOL) HRESULT {
                return @as(*const IMenuPopup.VTable, @ptrCast(self.vtable)).SetSubMenu(@as(*const IMenuPopup, @ptrCast(self)), pmp_, f_set_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FILE_USAGE_TYPE = enum(i32) {
    PLAYING = 0,
    EDITING = 1,
    GENERIC = 2,
};
pub const FUT_PLAYING = FILE_USAGE_TYPE.PLAYING;
pub const FUT_EDITING = FILE_USAGE_TYPE.EDITING;
pub const FUT_GENERIC = FILE_USAGE_TYPE.GENERIC;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileIsInUse_Value = Guid.initString("64a1cbf0-3a1a-4461-9158-376969693950");
pub const IID_IFileIsInUse = &IID_IFileIsInUse_Value;
pub const IFileIsInUse = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAppName: *const fn (
            self: *const IFileIsInUse,
            ppsz_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUsage: *const fn (
            self: *const IFileIsInUse,
            pfut: ?*FILE_USAGE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCapabilities: *const fn (
            self: *const IFileIsInUse,
            pdw_cap_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSwitchToHWND: *const fn (
            self: *const IFileIsInUse,
            phwnd: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloseFile: *const fn (
            self: *const IFileIsInUse,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAppName(self: *const T, ppsz_name_: ?*?PWSTR) HRESULT {
                return @as(*const IFileIsInUse.VTable, @ptrCast(self.vtable)).GetAppName(@as(*const IFileIsInUse, @ptrCast(self)), ppsz_name_);
            }
            pub inline fn getUsage(self: *const T, pfut_: ?*FILE_USAGE_TYPE) HRESULT {
                return @as(*const IFileIsInUse.VTable, @ptrCast(self.vtable)).GetUsage(@as(*const IFileIsInUse, @ptrCast(self)), pfut_);
            }
            pub inline fn getCapabilities(self: *const T, pdw_cap_flags_: ?*u32) HRESULT {
                return @as(*const IFileIsInUse.VTable, @ptrCast(self.vtable)).GetCapabilities(@as(*const IFileIsInUse, @ptrCast(self)), pdw_cap_flags_);
            }
            pub inline fn getSwitchToHWND(self: *const T, phwnd_: ?*?HWND) HRESULT {
                return @as(*const IFileIsInUse.VTable, @ptrCast(self.vtable)).GetSwitchToHWND(@as(*const IFileIsInUse, @ptrCast(self)), phwnd_);
            }
            pub inline fn closeFile(self: *const T) HRESULT {
                return @as(*const IFileIsInUse.VTable, @ptrCast(self.vtable)).CloseFile(@as(*const IFileIsInUse, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FDE_OVERWRITE_RESPONSE = enum(i32) {
    DEFAULT = 0,
    ACCEPT = 1,
    REFUSE = 2,
};
pub const FDEOR_DEFAULT = FDE_OVERWRITE_RESPONSE.DEFAULT;
pub const FDEOR_ACCEPT = FDE_OVERWRITE_RESPONSE.ACCEPT;
pub const FDEOR_REFUSE = FDE_OVERWRITE_RESPONSE.REFUSE;

pub const FDE_SHAREVIOLATION_RESPONSE = enum(i32) {
    DEFAULT = 0,
    ACCEPT = 1,
    REFUSE = 2,
};
pub const FDESVR_DEFAULT = FDE_SHAREVIOLATION_RESPONSE.DEFAULT;
pub const FDESVR_ACCEPT = FDE_SHAREVIOLATION_RESPONSE.ACCEPT;
pub const FDESVR_REFUSE = FDE_SHAREVIOLATION_RESPONSE.REFUSE;

pub const FDAP = enum(i32) {
    BOTTOM = 0,
    TOP = 1,
};
pub const FDAP_BOTTOM = FDAP.BOTTOM;
pub const FDAP_TOP = FDAP.TOP;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileDialogEvents_Value = Guid.initString("973510db-7d7f-452b-8975-74a85828d354");
pub const IID_IFileDialogEvents = &IID_IFileDialogEvents_Value;
pub const IFileDialogEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnFileOk: *const fn (
            self: *const IFileDialogEvents,
            pfd: ?*IFileDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnFolderChanging: *const fn (
            self: *const IFileDialogEvents,
            pfd: ?*IFileDialog,
            psi_folder: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnFolderChange: *const fn (
            self: *const IFileDialogEvents,
            pfd: ?*IFileDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSelectionChange: *const fn (
            self: *const IFileDialogEvents,
            pfd: ?*IFileDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnShareViolation: *const fn (
            self: *const IFileDialogEvents,
            pfd: ?*IFileDialog,
            psi: ?*IShellItem,
            p_response: ?*FDE_SHAREVIOLATION_RESPONSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTypeChange: *const fn (
            self: *const IFileDialogEvents,
            pfd: ?*IFileDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnOverwrite: *const fn (
            self: *const IFileDialogEvents,
            pfd: ?*IFileDialog,
            psi: ?*IShellItem,
            p_response: ?*FDE_OVERWRITE_RESPONSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onFileOk(self: *const T, pfd_: ?*IFileDialog) HRESULT {
                return @as(*const IFileDialogEvents.VTable, @ptrCast(self.vtable)).OnFileOk(@as(*const IFileDialogEvents, @ptrCast(self)), pfd_);
            }
            pub inline fn onFolderChanging(self: *const T, pfd_: ?*IFileDialog, psi_folder_: ?*IShellItem) HRESULT {
                return @as(*const IFileDialogEvents.VTable, @ptrCast(self.vtable)).OnFolderChanging(@as(*const IFileDialogEvents, @ptrCast(self)), pfd_, psi_folder_);
            }
            pub inline fn onFolderChange(self: *const T, pfd_: ?*IFileDialog) HRESULT {
                return @as(*const IFileDialogEvents.VTable, @ptrCast(self.vtable)).OnFolderChange(@as(*const IFileDialogEvents, @ptrCast(self)), pfd_);
            }
            pub inline fn onSelectionChange(self: *const T, pfd_: ?*IFileDialog) HRESULT {
                return @as(*const IFileDialogEvents.VTable, @ptrCast(self.vtable)).OnSelectionChange(@as(*const IFileDialogEvents, @ptrCast(self)), pfd_);
            }
            pub inline fn onShareViolation(self: *const T, pfd_: ?*IFileDialog, psi_: ?*IShellItem, p_response_: ?*FDE_SHAREVIOLATION_RESPONSE) HRESULT {
                return @as(*const IFileDialogEvents.VTable, @ptrCast(self.vtable)).OnShareViolation(@as(*const IFileDialogEvents, @ptrCast(self)), pfd_, psi_, p_response_);
            }
            pub inline fn onTypeChange(self: *const T, pfd_: ?*IFileDialog) HRESULT {
                return @as(*const IFileDialogEvents.VTable, @ptrCast(self.vtable)).OnTypeChange(@as(*const IFileDialogEvents, @ptrCast(self)), pfd_);
            }
            pub inline fn onOverwrite(self: *const T, pfd_: ?*IFileDialog, psi_: ?*IShellItem, p_response_: ?*FDE_OVERWRITE_RESPONSE) HRESULT {
                return @as(*const IFileDialogEvents.VTable, @ptrCast(self.vtable)).OnOverwrite(@as(*const IFileDialogEvents, @ptrCast(self)), pfd_, psi_, p_response_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FILEOPENDIALOGOPTIONS = enum(u32) {
    OVERWRITEPROMPT = 2,
    STRICTFILETYPES = 4,
    NOCHANGEDIR = 8,
    PICKFOLDERS = 32,
    FORCEFILESYSTEM = 64,
    ALLNONSTORAGEITEMS = 128,
    NOVALIDATE = 256,
    ALLOWMULTISELECT = 512,
    PATHMUSTEXIST = 2048,
    FILEMUSTEXIST = 4096,
    CREATEPROMPT = 8192,
    SHAREAWARE = 16384,
    NOREADONLYRETURN = 32768,
    NOTESTFILECREATE = 65536,
    HIDEMRUPLACES = 131072,
    HIDEPINNEDPLACES = 262144,
    NODEREFERENCELINKS = 1048576,
    OKBUTTONNEEDSINTERACTION = 2097152,
    DONTADDTORECENT = 33554432,
    FORCESHOWHIDDEN = 268435456,
    DEFAULTNOMINIMODE = 536870912,
    FORCEPREVIEWPANEON = 1073741824,
    SUPPORTSTREAMABLEITEMS = 2147483648,
};
pub const FOS_OVERWRITEPROMPT = FILEOPENDIALOGOPTIONS.OVERWRITEPROMPT;
pub const FOS_STRICTFILETYPES = FILEOPENDIALOGOPTIONS.STRICTFILETYPES;
pub const FOS_NOCHANGEDIR = FILEOPENDIALOGOPTIONS.NOCHANGEDIR;
pub const FOS_PICKFOLDERS = FILEOPENDIALOGOPTIONS.PICKFOLDERS;
pub const FOS_FORCEFILESYSTEM = FILEOPENDIALOGOPTIONS.FORCEFILESYSTEM;
pub const FOS_ALLNONSTORAGEITEMS = FILEOPENDIALOGOPTIONS.ALLNONSTORAGEITEMS;
pub const FOS_NOVALIDATE = FILEOPENDIALOGOPTIONS.NOVALIDATE;
pub const FOS_ALLOWMULTISELECT = FILEOPENDIALOGOPTIONS.ALLOWMULTISELECT;
pub const FOS_PATHMUSTEXIST = FILEOPENDIALOGOPTIONS.PATHMUSTEXIST;
pub const FOS_FILEMUSTEXIST = FILEOPENDIALOGOPTIONS.FILEMUSTEXIST;
pub const FOS_CREATEPROMPT = FILEOPENDIALOGOPTIONS.CREATEPROMPT;
pub const FOS_SHAREAWARE = FILEOPENDIALOGOPTIONS.SHAREAWARE;
pub const FOS_NOREADONLYRETURN = FILEOPENDIALOGOPTIONS.NOREADONLYRETURN;
pub const FOS_NOTESTFILECREATE = FILEOPENDIALOGOPTIONS.NOTESTFILECREATE;
pub const FOS_HIDEMRUPLACES = FILEOPENDIALOGOPTIONS.HIDEMRUPLACES;
pub const FOS_HIDEPINNEDPLACES = FILEOPENDIALOGOPTIONS.HIDEPINNEDPLACES;
pub const FOS_NODEREFERENCELINKS = FILEOPENDIALOGOPTIONS.NODEREFERENCELINKS;
pub const FOS_OKBUTTONNEEDSINTERACTION = FILEOPENDIALOGOPTIONS.OKBUTTONNEEDSINTERACTION;
pub const FOS_DONTADDTORECENT = FILEOPENDIALOGOPTIONS.DONTADDTORECENT;
pub const FOS_FORCESHOWHIDDEN = FILEOPENDIALOGOPTIONS.FORCESHOWHIDDEN;
pub const FOS_DEFAULTNOMINIMODE = FILEOPENDIALOGOPTIONS.DEFAULTNOMINIMODE;
pub const FOS_FORCEPREVIEWPANEON = FILEOPENDIALOGOPTIONS.FORCEPREVIEWPANEON;
pub const FOS_SUPPORTSTREAMABLEITEMS = FILEOPENDIALOGOPTIONS.SUPPORTSTREAMABLEITEMS;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileDialog_Value = Guid.initString("42f85136-db7e-439c-85f1-e4075d135fc8");
pub const IID_IFileDialog = &IID_IFileDialog_Value;
pub const IFileDialog = extern struct {
    pub const VTable = extern struct {
        base: IModalWindow.VTable,
        SetFileTypes: *const fn (
            self: *const IFileDialog,
            c_file_types: u32,
            rg_filter_spec: [*]const COMDLG_FILTERSPEC,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFileTypeIndex: *const fn (
            self: *const IFileDialog,
            i_file_type: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileTypeIndex: *const fn (
            self: *const IFileDialog,
            pi_file_type: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: *const fn (
            self: *const IFileDialog,
            pfde: ?*IFileDialogEvents,
            pdw_cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn (
            self: *const IFileDialog,
            dw_cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOptions: *const fn (
            self: *const IFileDialog,
            fos: FILEOPENDIALOGOPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: *const fn (
            self: *const IFileDialog,
            pfos: ?*FILEOPENDIALOGOPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultFolder: *const fn (
            self: *const IFileDialog,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolder: *const fn (
            self: *const IFileDialog,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolder: *const fn (
            self: *const IFileDialog,
            ppsi: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentSelection: *const fn (
            self: *const IFileDialog,
            ppsi: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFileName: *const fn (
            self: *const IFileDialog,
            psz_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileName: *const fn (
            self: *const IFileDialog,
            psz_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTitle: *const fn (
            self: *const IFileDialog,
            psz_title: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOkButtonLabel: *const fn (
            self: *const IFileDialog,
            psz_text: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFileNameLabel: *const fn (
            self: *const IFileDialog,
            psz_label: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResult: *const fn (
            self: *const IFileDialog,
            ppsi: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPlace: *const fn (
            self: *const IFileDialog,
            psi: ?*IShellItem,
            fdap: FDAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultExtension: *const fn (
            self: *const IFileDialog,
            psz_default_extension: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IFileDialog,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClientGuid: *const fn (
            self: *const IFileDialog,
            guid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearClientData: *const fn (
            self: *const IFileDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFilter: *const fn (
            self: *const IFileDialog,
            p_filter: ?*IShellItemFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IModalWindow.MethodMixin(T);
            pub inline fn setFileTypes(self: *const T, c_file_types_: u32, rg_filter_spec_: [*]const COMDLG_FILTERSPEC) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).SetFileTypes(@as(*const IFileDialog, @ptrCast(self)), c_file_types_, rg_filter_spec_);
            }
            pub inline fn setFileTypeIndex(self: *const T, i_file_type_: u32) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).SetFileTypeIndex(@as(*const IFileDialog, @ptrCast(self)), i_file_type_);
            }
            pub inline fn getFileTypeIndex(self: *const T, pi_file_type_: ?*u32) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).GetFileTypeIndex(@as(*const IFileDialog, @ptrCast(self)), pi_file_type_);
            }
            pub inline fn advise(self: *const T, pfde_: ?*IFileDialogEvents, pdw_cookie_: ?*u32) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).Advise(@as(*const IFileDialog, @ptrCast(self)), pfde_, pdw_cookie_);
            }
            pub inline fn unadvise(self: *const T, dw_cookie_: u32) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).Unadvise(@as(*const IFileDialog, @ptrCast(self)), dw_cookie_);
            }
            pub inline fn setOptions(self: *const T, fos_: FILEOPENDIALOGOPTIONS) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).SetOptions(@as(*const IFileDialog, @ptrCast(self)), fos_);
            }
            pub inline fn getOptions(self: *const T, pfos_: ?*FILEOPENDIALOGOPTIONS) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).GetOptions(@as(*const IFileDialog, @ptrCast(self)), pfos_);
            }
            pub inline fn setDefaultFolder(self: *const T, psi_: ?*IShellItem) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).SetDefaultFolder(@as(*const IFileDialog, @ptrCast(self)), psi_);
            }
            pub inline fn setFolder(self: *const T, psi_: ?*IShellItem) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).SetFolder(@as(*const IFileDialog, @ptrCast(self)), psi_);
            }
            pub inline fn getFolder(self: *const T, ppsi_: ?*?*IShellItem) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).GetFolder(@as(*const IFileDialog, @ptrCast(self)), ppsi_);
            }
            pub inline fn getCurrentSelection(self: *const T, ppsi_: ?*?*IShellItem) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).GetCurrentSelection(@as(*const IFileDialog, @ptrCast(self)), ppsi_);
            }
            pub inline fn setFileName(self: *const T, psz_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).SetFileName(@as(*const IFileDialog, @ptrCast(self)), psz_name_);
            }
            pub inline fn getFileName(self: *const T, psz_name_: ?*?PWSTR) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).GetFileName(@as(*const IFileDialog, @ptrCast(self)), psz_name_);
            }
            pub inline fn setTitle(self: *const T, psz_title_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).SetTitle(@as(*const IFileDialog, @ptrCast(self)), psz_title_);
            }
            pub inline fn setOkButtonLabel(self: *const T, psz_text_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).SetOkButtonLabel(@as(*const IFileDialog, @ptrCast(self)), psz_text_);
            }
            pub inline fn setFileNameLabel(self: *const T, psz_label_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).SetFileNameLabel(@as(*const IFileDialog, @ptrCast(self)), psz_label_);
            }
            pub inline fn getResult(self: *const T, ppsi_: ?*?*IShellItem) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).GetResult(@as(*const IFileDialog, @ptrCast(self)), ppsi_);
            }
            pub inline fn addPlace(self: *const T, psi_: ?*IShellItem, fdap_: FDAP) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).AddPlace(@as(*const IFileDialog, @ptrCast(self)), psi_, fdap_);
            }
            pub inline fn setDefaultExtension(self: *const T, psz_default_extension_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).SetDefaultExtension(@as(*const IFileDialog, @ptrCast(self)), psz_default_extension_);
            }
            pub inline fn close(self: *const T, hr_: HRESULT) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).Close(@as(*const IFileDialog, @ptrCast(self)), hr_);
            }
            pub inline fn setClientGuid(self: *const T, guid_: ?*const Guid) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).SetClientGuid(@as(*const IFileDialog, @ptrCast(self)), guid_);
            }
            pub inline fn clearClientData(self: *const T) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).ClearClientData(@as(*const IFileDialog, @ptrCast(self)));
            }
            pub inline fn setFilter(self: *const T, p_filter_: ?*IShellItemFilter) HRESULT {
                return @as(*const IFileDialog.VTable, @ptrCast(self.vtable)).SetFilter(@as(*const IFileDialog, @ptrCast(self)), p_filter_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileSaveDialog_Value = Guid.initString("84bccd23-5fde-4cdb-aea4-af64b83d78ab");
pub const IID_IFileSaveDialog = &IID_IFileSaveDialog_Value;
pub const IFileSaveDialog = extern struct {
    pub const VTable = extern struct {
        base: IFileDialog.VTable,
        SetSaveAsItem: *const fn (
            self: *const IFileSaveDialog,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProperties: *const fn (
            self: *const IFileSaveDialog,
            p_store: ?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCollectedProperties: *const fn (
            self: *const IFileSaveDialog,
            p_list: ?*IPropertyDescriptionList,
            f_append_default: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperties: *const fn (
            self: *const IFileSaveDialog,
            pp_store: ?*?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ApplyProperties: *const fn (
            self: *const IFileSaveDialog,
            psi: ?*IShellItem,
            p_store: ?*IPropertyStore,
            hwnd: ?HWND,
            p_sink: ?*IFileOperationProgressSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFileDialog.MethodMixin(T);
            pub inline fn setSaveAsItem(self: *const T, psi_: ?*IShellItem) HRESULT {
                return @as(*const IFileSaveDialog.VTable, @ptrCast(self.vtable)).SetSaveAsItem(@as(*const IFileSaveDialog, @ptrCast(self)), psi_);
            }
            pub inline fn setProperties(self: *const T, p_store_: ?*IPropertyStore) HRESULT {
                return @as(*const IFileSaveDialog.VTable, @ptrCast(self.vtable)).SetProperties(@as(*const IFileSaveDialog, @ptrCast(self)), p_store_);
            }
            pub inline fn setCollectedProperties(self: *const T, p_list_: ?*IPropertyDescriptionList, f_append_default_: BOOL) HRESULT {
                return @as(*const IFileSaveDialog.VTable, @ptrCast(self.vtable)).SetCollectedProperties(@as(*const IFileSaveDialog, @ptrCast(self)), p_list_, f_append_default_);
            }
            pub inline fn getProperties(self: *const T, pp_store_: ?*?*IPropertyStore) HRESULT {
                return @as(*const IFileSaveDialog.VTable, @ptrCast(self.vtable)).GetProperties(@as(*const IFileSaveDialog, @ptrCast(self)), pp_store_);
            }
            pub inline fn applyProperties(self: *const T, psi_: ?*IShellItem, p_store_: ?*IPropertyStore, hwnd_: ?HWND, p_sink_: ?*IFileOperationProgressSink) HRESULT {
                return @as(*const IFileSaveDialog.VTable, @ptrCast(self.vtable)).ApplyProperties(@as(*const IFileSaveDialog, @ptrCast(self)), psi_, p_store_, hwnd_, p_sink_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileOpenDialog_Value = Guid.initString("d57c7288-d4ad-4768-be02-9d969532d960");
pub const IID_IFileOpenDialog = &IID_IFileOpenDialog_Value;
pub const IFileOpenDialog = extern struct {
    pub const VTable = extern struct {
        base: IFileDialog.VTable,
        GetResults: *const fn (
            self: *const IFileOpenDialog,
            ppenum: ?*?*IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectedItems: *const fn (
            self: *const IFileOpenDialog,
            ppsai: ?*?*IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFileDialog.MethodMixin(T);
            pub inline fn getResults(self: *const T, ppenum_: ?*?*IShellItemArray) HRESULT {
                return @as(*const IFileOpenDialog.VTable, @ptrCast(self.vtable)).GetResults(@as(*const IFileOpenDialog, @ptrCast(self)), ppenum_);
            }
            pub inline fn getSelectedItems(self: *const T, ppsai_: ?*?*IShellItemArray) HRESULT {
                return @as(*const IFileOpenDialog.VTable, @ptrCast(self.vtable)).GetSelectedItems(@as(*const IFileOpenDialog, @ptrCast(self)), ppsai_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CDCONTROLSTATEF = enum(i32) {
    INACTIVE = 0,
    ENABLED = 1,
    VISIBLE = 2,
    ENABLEDVISIBLE = 3,
};
pub const CDCS_INACTIVE = CDCONTROLSTATEF.INACTIVE;
pub const CDCS_ENABLED = CDCONTROLSTATEF.ENABLED;
pub const CDCS_VISIBLE = CDCONTROLSTATEF.VISIBLE;
pub const CDCS_ENABLEDVISIBLE = CDCONTROLSTATEF.ENABLEDVISIBLE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileDialogCustomize_Value = Guid.initString("e6fdd21a-163f-4975-9c8c-a69f1ba37034");
pub const IID_IFileDialogCustomize = &IID_IFileDialogCustomize_Value;
pub const IFileDialogCustomize = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnableOpenDropDown: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddMenu: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
            psz_label: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPushButton: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
            psz_label: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddComboBox: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRadioButtonList: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCheckButton: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
            psz_label: ?[*:0]const u16,
            b_checked: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddEditBox: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
            psz_text: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddSeparator: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddText: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
            psz_text: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetControlLabel: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
            psz_label: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetControlState: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
            pdw_state: ?*CDCONTROLSTATEF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetControlState: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
            dw_state: CDCONTROLSTATEF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEditBoxText: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
            ppsz_text: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEditBoxText: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
            psz_text: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCheckButtonState: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
            pb_checked: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCheckButtonState: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
            b_checked: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddControlItem: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
            dw_i_d_item: u32,
            psz_label: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveControlItem: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
            dw_i_d_item: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllControlItems: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetControlItemState: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
            dw_i_d_item: u32,
            pdw_state: ?*CDCONTROLSTATEF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetControlItemState: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
            dw_i_d_item: u32,
            dw_state: CDCONTROLSTATEF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectedControlItem: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
            pdw_i_d_item: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSelectedControlItem: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
            dw_i_d_item: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartVisualGroup: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
            psz_label: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndVisualGroup: *const fn (
            self: *const IFileDialogCustomize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MakeProminent: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetControlItemText: *const fn (
            self: *const IFileDialogCustomize,
            dw_i_d_ctl: u32,
            dw_i_d_item: u32,
            psz_label: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn enableOpenDropDown(self: *const T, dw_i_d_ctl_: u32) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).EnableOpenDropDown(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_);
            }
            pub inline fn addMenu(self: *const T, dw_i_d_ctl_: u32, psz_label_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).AddMenu(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_, psz_label_);
            }
            pub inline fn addPushButton(self: *const T, dw_i_d_ctl_: u32, psz_label_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).AddPushButton(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_, psz_label_);
            }
            pub inline fn addComboBox(self: *const T, dw_i_d_ctl_: u32) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).AddComboBox(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_);
            }
            pub inline fn addRadioButtonList(self: *const T, dw_i_d_ctl_: u32) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).AddRadioButtonList(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_);
            }
            pub inline fn addCheckButton(self: *const T, dw_i_d_ctl_: u32, psz_label_: ?[*:0]const u16, b_checked_: BOOL) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).AddCheckButton(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_, psz_label_, b_checked_);
            }
            pub inline fn addEditBox(self: *const T, dw_i_d_ctl_: u32, psz_text_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).AddEditBox(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_, psz_text_);
            }
            pub inline fn addSeparator(self: *const T, dw_i_d_ctl_: u32) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).AddSeparator(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_);
            }
            pub inline fn addText(self: *const T, dw_i_d_ctl_: u32, psz_text_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).AddText(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_, psz_text_);
            }
            pub inline fn setControlLabel(self: *const T, dw_i_d_ctl_: u32, psz_label_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).SetControlLabel(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_, psz_label_);
            }
            pub inline fn getControlState(self: *const T, dw_i_d_ctl_: u32, pdw_state_: ?*CDCONTROLSTATEF) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).GetControlState(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_, pdw_state_);
            }
            pub inline fn setControlState(self: *const T, dw_i_d_ctl_: u32, dw_state_: CDCONTROLSTATEF) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).SetControlState(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_, dw_state_);
            }
            pub inline fn getEditBoxText(self: *const T, dw_i_d_ctl_: u32, ppsz_text_: ?*?*u16) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).GetEditBoxText(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_, ppsz_text_);
            }
            pub inline fn setEditBoxText(self: *const T, dw_i_d_ctl_: u32, psz_text_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).SetEditBoxText(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_, psz_text_);
            }
            pub inline fn getCheckButtonState(self: *const T, dw_i_d_ctl_: u32, pb_checked_: ?*BOOL) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).GetCheckButtonState(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_, pb_checked_);
            }
            pub inline fn setCheckButtonState(self: *const T, dw_i_d_ctl_: u32, b_checked_: BOOL) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).SetCheckButtonState(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_, b_checked_);
            }
            pub inline fn addControlItem(self: *const T, dw_i_d_ctl_: u32, dw_i_d_item_: u32, psz_label_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).AddControlItem(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_, dw_i_d_item_, psz_label_);
            }
            pub inline fn removeControlItem(self: *const T, dw_i_d_ctl_: u32, dw_i_d_item_: u32) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).RemoveControlItem(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_, dw_i_d_item_);
            }
            pub inline fn removeAllControlItems(self: *const T, dw_i_d_ctl_: u32) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).RemoveAllControlItems(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_);
            }
            pub inline fn getControlItemState(self: *const T, dw_i_d_ctl_: u32, dw_i_d_item_: u32, pdw_state_: ?*CDCONTROLSTATEF) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).GetControlItemState(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_, dw_i_d_item_, pdw_state_);
            }
            pub inline fn setControlItemState(self: *const T, dw_i_d_ctl_: u32, dw_i_d_item_: u32, dw_state_: CDCONTROLSTATEF) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).SetControlItemState(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_, dw_i_d_item_, dw_state_);
            }
            pub inline fn getSelectedControlItem(self: *const T, dw_i_d_ctl_: u32, pdw_i_d_item_: ?*u32) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).GetSelectedControlItem(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_, pdw_i_d_item_);
            }
            pub inline fn setSelectedControlItem(self: *const T, dw_i_d_ctl_: u32, dw_i_d_item_: u32) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).SetSelectedControlItem(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_, dw_i_d_item_);
            }
            pub inline fn startVisualGroup(self: *const T, dw_i_d_ctl_: u32, psz_label_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).StartVisualGroup(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_, psz_label_);
            }
            pub inline fn endVisualGroup(self: *const T) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).EndVisualGroup(@as(*const IFileDialogCustomize, @ptrCast(self)));
            }
            pub inline fn makeProminent(self: *const T, dw_i_d_ctl_: u32) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).MakeProminent(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_);
            }
            pub inline fn setControlItemText(self: *const T, dw_i_d_ctl_: u32, dw_i_d_item_: u32, psz_label_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileDialogCustomize.VTable, @ptrCast(self.vtable)).SetControlItemText(@as(*const IFileDialogCustomize, @ptrCast(self)), dw_i_d_ctl_, dw_i_d_item_, psz_label_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const ASSOCIATIONLEVEL = enum(i32) {
    MACHINE = 0,
    EFFECTIVE = 1,
    USER = 2,
};
pub const AL_MACHINE = ASSOCIATIONLEVEL.MACHINE;
pub const AL_EFFECTIVE = ASSOCIATIONLEVEL.EFFECTIVE;
pub const AL_USER = ASSOCIATIONLEVEL.USER;

pub const ASSOCIATIONTYPE = enum(i32) {
    FILEEXTENSION = 0,
    URLPROTOCOL = 1,
    STARTMENUCLIENT = 2,
    MIMETYPE = 3,
};
pub const AT_FILEEXTENSION = ASSOCIATIONTYPE.FILEEXTENSION;
pub const AT_URLPROTOCOL = ASSOCIATIONTYPE.URLPROTOCOL;
pub const AT_STARTMENUCLIENT = ASSOCIATIONTYPE.STARTMENUCLIENT;
pub const AT_MIMETYPE = ASSOCIATIONTYPE.MIMETYPE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IApplicationAssociationRegistration_Value = Guid.initString("4e530b0a-e611-4c77-a3ac-9031d022281b");
pub const IID_IApplicationAssociationRegistration = &IID_IApplicationAssociationRegistration_Value;
pub const IApplicationAssociationRegistration = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryCurrentDefault: *const fn (
            self: *const IApplicationAssociationRegistration,
            psz_query: ?[*:0]const u16,
            at_query_type: ASSOCIATIONTYPE,
            al_query_level: ASSOCIATIONLEVEL,
            ppsz_association: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryAppIsDefault: *const fn (
            self: *const IApplicationAssociationRegistration,
            psz_query: ?[*:0]const u16,
            at_query_type: ASSOCIATIONTYPE,
            al_query_level: ASSOCIATIONLEVEL,
            psz_app_registry_name: ?[*:0]const u16,
            pf_default: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryAppIsDefaultAll: *const fn (
            self: *const IApplicationAssociationRegistration,
            al_query_level: ASSOCIATIONLEVEL,
            psz_app_registry_name: ?[*:0]const u16,
            pf_default: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAppAsDefault: *const fn (
            self: *const IApplicationAssociationRegistration,
            psz_app_registry_name: ?[*:0]const u16,
            psz_set: ?[*:0]const u16,
            at_set_type: ASSOCIATIONTYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAppAsDefaultAll: *const fn (
            self: *const IApplicationAssociationRegistration,
            psz_app_registry_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearUserAssociations: *const fn (
            self: *const IApplicationAssociationRegistration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn queryCurrentDefault(self: *const T, psz_query_: ?[*:0]const u16, at_query_type_: ASSOCIATIONTYPE, al_query_level_: ASSOCIATIONLEVEL, ppsz_association_: ?*?PWSTR) HRESULT {
                return @as(*const IApplicationAssociationRegistration.VTable, @ptrCast(self.vtable)).QueryCurrentDefault(@as(*const IApplicationAssociationRegistration, @ptrCast(self)), psz_query_, at_query_type_, al_query_level_, ppsz_association_);
            }
            pub inline fn queryAppIsDefault(self: *const T, psz_query_: ?[*:0]const u16, at_query_type_: ASSOCIATIONTYPE, al_query_level_: ASSOCIATIONLEVEL, psz_app_registry_name_: ?[*:0]const u16, pf_default_: ?*BOOL) HRESULT {
                return @as(*const IApplicationAssociationRegistration.VTable, @ptrCast(self.vtable)).QueryAppIsDefault(@as(*const IApplicationAssociationRegistration, @ptrCast(self)), psz_query_, at_query_type_, al_query_level_, psz_app_registry_name_, pf_default_);
            }
            pub inline fn queryAppIsDefaultAll(self: *const T, al_query_level_: ASSOCIATIONLEVEL, psz_app_registry_name_: ?[*:0]const u16, pf_default_: ?*BOOL) HRESULT {
                return @as(*const IApplicationAssociationRegistration.VTable, @ptrCast(self.vtable)).QueryAppIsDefaultAll(@as(*const IApplicationAssociationRegistration, @ptrCast(self)), al_query_level_, psz_app_registry_name_, pf_default_);
            }
            pub inline fn setAppAsDefault(self: *const T, psz_app_registry_name_: ?[*:0]const u16, psz_set_: ?[*:0]const u16, at_set_type_: ASSOCIATIONTYPE) HRESULT {
                return @as(*const IApplicationAssociationRegistration.VTable, @ptrCast(self.vtable)).SetAppAsDefault(@as(*const IApplicationAssociationRegistration, @ptrCast(self)), psz_app_registry_name_, psz_set_, at_set_type_);
            }
            pub inline fn setAppAsDefaultAll(self: *const T, psz_app_registry_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IApplicationAssociationRegistration.VTable, @ptrCast(self.vtable)).SetAppAsDefaultAll(@as(*const IApplicationAssociationRegistration, @ptrCast(self)), psz_app_registry_name_);
            }
            pub inline fn clearUserAssociations(self: *const T) HRESULT {
                return @as(*const IApplicationAssociationRegistration.VTable, @ptrCast(self.vtable)).ClearUserAssociations(@as(*const IApplicationAssociationRegistration, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DELEGATEITEMID = extern struct {
    cbSize: u16 align(1),
    wOuter: u16 align(1),
    cbInner: u16 align(1),
    rgb: [1]u8 align(1),
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IDelegateFolder_Value = Guid.initString("add8ba80-002b-11d0-8f0f-00c04fd7d062");
pub const IID_IDelegateFolder = &IID_IDelegateFolder_Value;
pub const IDelegateFolder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetItemAlloc: *const fn (
            self: *const IDelegateFolder,
            pmalloc: ?*IMalloc,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setItemAlloc(self: *const T, pmalloc_: ?*IMalloc) HRESULT {
                return @as(*const IDelegateFolder.VTable, @ptrCast(self.vtable)).SetItemAlloc(@as(*const IDelegateFolder, @ptrCast(self)), pmalloc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const _BROWSERFRAMEOPTIONS = enum(i32) {
    FO_NONE = 0,
    FO_BROWSER_PERSIST_SETTINGS = 1,
    FO_RENAME_FOLDER_OPTIONS_TOINTERNET = 2,
    FO_BOTH_OPTIONS = 4,
    IF_PREFER_INTERNET_SHORTCUT = 8,
    FO_BROWSE_NO_IN_NEW_PROCESS = 16,
    FO_ENABLE_HYPERLINK_TRACKING = 32,
    FO_USE_IE_OFFLINE_SUPPORT = 64,
    FO_SUBSTITUE_INTERNET_START_PAGE = 128,
    FO_USE_IE_LOGOBANDING = 256,
    FO_ADD_IE_TOCAPTIONBAR = 512,
    FO_USE_DIALUP_REF = 1024,
    FO_USE_IE_TOOLBAR = 2048,
    FO_NO_PARENT_FOLDER_SUPPORT = 4096,
    FO_NO_REOPEN_NEXT_RESTART = 8192,
    FO_GO_HOME_PAGE = 16384,
    FO_PREFER_IEPROCESS = 32768,
    FO_SHOW_NAVIGATION_CANCELLED = 65536,
    FO_USE_IE_STATUSBAR = 131072,
    FO_QUERY_ALL = -1,
};
pub const BFO_NONE = _BROWSERFRAMEOPTIONS.FO_NONE;
pub const BFO_BROWSER_PERSIST_SETTINGS = _BROWSERFRAMEOPTIONS.FO_BROWSER_PERSIST_SETTINGS;
pub const BFO_RENAME_FOLDER_OPTIONS_TOINTERNET = _BROWSERFRAMEOPTIONS.FO_RENAME_FOLDER_OPTIONS_TOINTERNET;
pub const BFO_BOTH_OPTIONS = _BROWSERFRAMEOPTIONS.FO_BOTH_OPTIONS;
pub const BIF_PREFER_INTERNET_SHORTCUT = _BROWSERFRAMEOPTIONS.IF_PREFER_INTERNET_SHORTCUT;
pub const BFO_BROWSE_NO_IN_NEW_PROCESS = _BROWSERFRAMEOPTIONS.FO_BROWSE_NO_IN_NEW_PROCESS;
pub const BFO_ENABLE_HYPERLINK_TRACKING = _BROWSERFRAMEOPTIONS.FO_ENABLE_HYPERLINK_TRACKING;
pub const BFO_USE_IE_OFFLINE_SUPPORT = _BROWSERFRAMEOPTIONS.FO_USE_IE_OFFLINE_SUPPORT;
pub const BFO_SUBSTITUE_INTERNET_START_PAGE = _BROWSERFRAMEOPTIONS.FO_SUBSTITUE_INTERNET_START_PAGE;
pub const BFO_USE_IE_LOGOBANDING = _BROWSERFRAMEOPTIONS.FO_USE_IE_LOGOBANDING;
pub const BFO_ADD_IE_TOCAPTIONBAR = _BROWSERFRAMEOPTIONS.FO_ADD_IE_TOCAPTIONBAR;
pub const BFO_USE_DIALUP_REF = _BROWSERFRAMEOPTIONS.FO_USE_DIALUP_REF;
pub const BFO_USE_IE_TOOLBAR = _BROWSERFRAMEOPTIONS.FO_USE_IE_TOOLBAR;
pub const BFO_NO_PARENT_FOLDER_SUPPORT = _BROWSERFRAMEOPTIONS.FO_NO_PARENT_FOLDER_SUPPORT;
pub const BFO_NO_REOPEN_NEXT_RESTART = _BROWSERFRAMEOPTIONS.FO_NO_REOPEN_NEXT_RESTART;
pub const BFO_GO_HOME_PAGE = _BROWSERFRAMEOPTIONS.FO_GO_HOME_PAGE;
pub const BFO_PREFER_IEPROCESS = _BROWSERFRAMEOPTIONS.FO_PREFER_IEPROCESS;
pub const BFO_SHOW_NAVIGATION_CANCELLED = _BROWSERFRAMEOPTIONS.FO_SHOW_NAVIGATION_CANCELLED;
pub const BFO_USE_IE_STATUSBAR = _BROWSERFRAMEOPTIONS.FO_USE_IE_STATUSBAR;
pub const BFO_QUERY_ALL = _BROWSERFRAMEOPTIONS.FO_QUERY_ALL;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IBrowserFrameOptions_Value = Guid.initString("10df43c8-1dbe-11d3-8b34-006097df5bd4");
pub const IID_IBrowserFrameOptions = &IID_IBrowserFrameOptions_Value;
pub const IBrowserFrameOptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFrameOptions: *const fn (
            self: *const IBrowserFrameOptions,
            dw_mask: u32,
            pdw_options: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFrameOptions(self: *const T, dw_mask_: u32, pdw_options_: ?*u32) HRESULT {
                return @as(*const IBrowserFrameOptions.VTable, @ptrCast(self.vtable)).GetFrameOptions(@as(*const IBrowserFrameOptions, @ptrCast(self)), dw_mask_, pdw_options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const NWMF = enum(i32) {
    UNLOADING = 1,
    USERINITED = 2,
    FIRST = 4,
    OVERRIDEKEY = 8,
    SHOWHELP = 16,
    HTMLDIALOG = 32,
    FROMDIALOGCHILD = 64,
    USERREQUESTED = 128,
    USERALLOWED = 256,
    FORCEWINDOW = 65536,
    FORCETAB = 131072,
    SUGGESTWINDOW = 262144,
    SUGGESTTAB = 524288,
    INACTIVETAB = 1048576,
};
pub const NWMF_UNLOADING = NWMF.UNLOADING;
pub const NWMF_USERINITED = NWMF.USERINITED;
pub const NWMF_FIRST = NWMF.FIRST;
pub const NWMF_OVERRIDEKEY = NWMF.OVERRIDEKEY;
pub const NWMF_SHOWHELP = NWMF.SHOWHELP;
pub const NWMF_HTMLDIALOG = NWMF.HTMLDIALOG;
pub const NWMF_FROMDIALOGCHILD = NWMF.FROMDIALOGCHILD;
pub const NWMF_USERREQUESTED = NWMF.USERREQUESTED;
pub const NWMF_USERALLOWED = NWMF.USERALLOWED;
pub const NWMF_FORCEWINDOW = NWMF.FORCEWINDOW;
pub const NWMF_FORCETAB = NWMF.FORCETAB;
pub const NWMF_SUGGESTWINDOW = NWMF.SUGGESTWINDOW;
pub const NWMF_SUGGESTTAB = NWMF.SUGGESTTAB;
pub const NWMF_INACTIVETAB = NWMF.INACTIVETAB;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INewWindowManager_Value = Guid.initString("d2bc4c84-3f72-4a52-a604-7bcbf3982cbb");
pub const IID_INewWindowManager = &IID_INewWindowManager_Value;
pub const INewWindowManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EvaluateNewWindow: *const fn (
            self: *const INewWindowManager,
            psz_url: ?[*:0]const u16,
            psz_name: ?[*:0]const u16,
            psz_url_context: ?[*:0]const u16,
            psz_features: ?[*:0]const u16,
            f_replace: BOOL,
            dw_flags: u32,
            dw_user_action_time: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn evaluateNewWindow(self: *const T, psz_url_: ?[*:0]const u16, psz_name_: ?[*:0]const u16, psz_url_context_: ?[*:0]const u16, psz_features_: ?[*:0]const u16, f_replace_: BOOL, dw_flags_: u32, dw_user_action_time_: u32) HRESULT {
                return @as(*const INewWindowManager.VTable, @ptrCast(self.vtable)).EvaluateNewWindow(@as(*const INewWindowManager, @ptrCast(self)), psz_url_, psz_name_, psz_url_context_, psz_features_, f_replace_, dw_flags_, dw_user_action_time_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const ATTACHMENT_PROMPT = enum(i32) {
    NONE = 0,
    SAVE = 1,
    EXEC = 2,
    EXEC_OR_SAVE = 3,
};
pub const ATTACHMENT_PROMPT_NONE = ATTACHMENT_PROMPT.NONE;
pub const ATTACHMENT_PROMPT_SAVE = ATTACHMENT_PROMPT.SAVE;
pub const ATTACHMENT_PROMPT_EXEC = ATTACHMENT_PROMPT.EXEC;
pub const ATTACHMENT_PROMPT_EXEC_OR_SAVE = ATTACHMENT_PROMPT.EXEC_OR_SAVE;

pub const ATTACHMENT_ACTION = enum(i32) {
    CANCEL = 0,
    SAVE = 1,
    EXEC = 2,
};
pub const ATTACHMENT_ACTION_CANCEL = ATTACHMENT_ACTION.CANCEL;
pub const ATTACHMENT_ACTION_SAVE = ATTACHMENT_ACTION.SAVE;
pub const ATTACHMENT_ACTION_EXEC = ATTACHMENT_ACTION.EXEC;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IAttachmentExecute_Value = Guid.initString("73db1241-1e85-4581-8e4f-a81e1d0f8c57");
pub const IID_IAttachmentExecute = &IID_IAttachmentExecute_Value;
pub const IAttachmentExecute = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetClientTitle: *const fn (
            self: *const IAttachmentExecute,
            psz_title: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClientGuid: *const fn (
            self: *const IAttachmentExecute,
            guid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLocalPath: *const fn (
            self: *const IAttachmentExecute,
            psz_local_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFileName: *const fn (
            self: *const IAttachmentExecute,
            psz_file_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSource: *const fn (
            self: *const IAttachmentExecute,
            psz_source: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReferrer: *const fn (
            self: *const IAttachmentExecute,
            psz_referrer: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CheckPolicy: *const fn (
            self: *const IAttachmentExecute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Prompt: *const fn (
            self: *const IAttachmentExecute,
            hwnd: ?HWND,
            prompt: ATTACHMENT_PROMPT,
            paction: ?*ATTACHMENT_ACTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IAttachmentExecute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Execute: *const fn (
            self: *const IAttachmentExecute,
            hwnd: ?HWND,
            psz_verb: ?[*:0]const u16,
            ph_process: ?*?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveWithUI: *const fn (
            self: *const IAttachmentExecute,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearClientState: *const fn (
            self: *const IAttachmentExecute,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setClientTitle(self: *const T, psz_title_: ?[*:0]const u16) HRESULT {
                return @as(*const IAttachmentExecute.VTable, @ptrCast(self.vtable)).SetClientTitle(@as(*const IAttachmentExecute, @ptrCast(self)), psz_title_);
            }
            pub inline fn setClientGuid(self: *const T, guid_: ?*const Guid) HRESULT {
                return @as(*const IAttachmentExecute.VTable, @ptrCast(self.vtable)).SetClientGuid(@as(*const IAttachmentExecute, @ptrCast(self)), guid_);
            }
            pub inline fn setLocalPath(self: *const T, psz_local_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IAttachmentExecute.VTable, @ptrCast(self.vtable)).SetLocalPath(@as(*const IAttachmentExecute, @ptrCast(self)), psz_local_path_);
            }
            pub inline fn setFileName(self: *const T, psz_file_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IAttachmentExecute.VTable, @ptrCast(self.vtable)).SetFileName(@as(*const IAttachmentExecute, @ptrCast(self)), psz_file_name_);
            }
            pub inline fn setSource(self: *const T, psz_source_: ?[*:0]const u16) HRESULT {
                return @as(*const IAttachmentExecute.VTable, @ptrCast(self.vtable)).SetSource(@as(*const IAttachmentExecute, @ptrCast(self)), psz_source_);
            }
            pub inline fn setReferrer(self: *const T, psz_referrer_: ?[*:0]const u16) HRESULT {
                return @as(*const IAttachmentExecute.VTable, @ptrCast(self.vtable)).SetReferrer(@as(*const IAttachmentExecute, @ptrCast(self)), psz_referrer_);
            }
            pub inline fn checkPolicy(self: *const T) HRESULT {
                return @as(*const IAttachmentExecute.VTable, @ptrCast(self.vtable)).CheckPolicy(@as(*const IAttachmentExecute, @ptrCast(self)));
            }
            pub inline fn prompt(self: *const T, hwnd_: ?HWND, prompt_: ATTACHMENT_PROMPT, paction_: ?*ATTACHMENT_ACTION) HRESULT {
                return @as(*const IAttachmentExecute.VTable, @ptrCast(self.vtable)).Prompt(@as(*const IAttachmentExecute, @ptrCast(self)), hwnd_, prompt_, paction_);
            }
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const IAttachmentExecute.VTable, @ptrCast(self.vtable)).Save(@as(*const IAttachmentExecute, @ptrCast(self)));
            }
            pub inline fn execute(self: *const T, hwnd_: ?HWND, psz_verb_: ?[*:0]const u16, ph_process_: ?*?HANDLE) HRESULT {
                return @as(*const IAttachmentExecute.VTable, @ptrCast(self.vtable)).Execute(@as(*const IAttachmentExecute, @ptrCast(self)), hwnd_, psz_verb_, ph_process_);
            }
            pub inline fn saveWithUI(self: *const T, hwnd_: ?HWND) HRESULT {
                return @as(*const IAttachmentExecute.VTable, @ptrCast(self.vtable)).SaveWithUI(@as(*const IAttachmentExecute, @ptrCast(self)), hwnd_);
            }
            pub inline fn clearClientState(self: *const T) HRESULT {
                return @as(*const IAttachmentExecute.VTable, @ptrCast(self.vtable)).ClearClientState(@as(*const IAttachmentExecute, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SMDATA = extern struct {
    dwMask: u32,
    dwFlags: u32,
    hmenu: ?HMENU,
    hwnd: ?HWND,
    uId: u32,
    uIdParent: u32,
    uIdAncestor: u32,
    punk: ?*IUnknown,
    pidlFolder: ?*ITEMIDLIST,
    pidlItem: ?*ITEMIDLIST,
    psf: ?*IShellFolder,
    pvUserData: ?*anyopaque,
};

pub const SMINFO = extern struct {
    dwMask: u32,
    dwType: u32,
    dwFlags: u32,
    iIcon: i32,
};

pub const SMCSHCHANGENOTIFYSTRUCT = extern struct {
    lEvent: i32,
    pidl1: ?*ITEMIDLIST,
    pidl2: ?*ITEMIDLIST,
};

pub const SMINFOMASK = enum(i32) {
    TYPE = 1,
    FLAGS = 2,
    ICON = 4,
};
pub const SMIM_TYPE = SMINFOMASK.TYPE;
pub const SMIM_FLAGS = SMINFOMASK.FLAGS;
pub const SMIM_ICON = SMINFOMASK.ICON;

pub const SMINFOTYPE = enum(i32) {
    EPARATOR = 1,
    TRING = 2,
};
pub const SMIT_SEPARATOR = SMINFOTYPE.EPARATOR;
pub const SMIT_STRING = SMINFOTYPE.TRING;

pub const SMINFOFLAGS = enum(i32) {
    ICON = 1,
    ACCELERATOR = 2,
    DROPTARGET = 4,
    SUBMENU = 8,
    CHECKED = 32,
    DROPCASCADE = 64,
    HIDDEN = 128,
    DISABLED = 256,
    TRACKPOPUP = 512,
    DEMOTED = 1024,
    ALTSTATE = 2048,
    DRAGNDROP = 4096,
    NEW = 8192,
};
pub const SMIF_ICON = SMINFOFLAGS.ICON;
pub const SMIF_ACCELERATOR = SMINFOFLAGS.ACCELERATOR;
pub const SMIF_DROPTARGET = SMINFOFLAGS.DROPTARGET;
pub const SMIF_SUBMENU = SMINFOFLAGS.SUBMENU;
pub const SMIF_CHECKED = SMINFOFLAGS.CHECKED;
pub const SMIF_DROPCASCADE = SMINFOFLAGS.DROPCASCADE;
pub const SMIF_HIDDEN = SMINFOFLAGS.HIDDEN;
pub const SMIF_DISABLED = SMINFOFLAGS.DISABLED;
pub const SMIF_TRACKPOPUP = SMINFOFLAGS.TRACKPOPUP;
pub const SMIF_DEMOTED = SMINFOFLAGS.DEMOTED;
pub const SMIF_ALTSTATE = SMINFOFLAGS.ALTSTATE;
pub const SMIF_DRAGNDROP = SMINFOFLAGS.DRAGNDROP;
pub const SMIF_NEW = SMINFOFLAGS.NEW;

// TODO: this type is limited to platform 'windows5.0'
const IID_IShellMenuCallback_Value = Guid.initString("4ca300a1-9b8d-11d1-8b22-00c04fd918d0");
pub const IID_IShellMenuCallback = &IID_IShellMenuCallback_Value;
pub const IShellMenuCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CallbackSM: *const fn (
            self: *const IShellMenuCallback,
            psmd: ?*SMDATA,
            u_msg: u32,
            w_param: WPARAM,
            l_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn callbackSM(self: *const T, psmd_: ?*SMDATA, u_msg_: u32, w_param_: WPARAM, l_param_: LPARAM) HRESULT {
                return @as(*const IShellMenuCallback.VTable, @ptrCast(self.vtable)).CallbackSM(@as(*const IShellMenuCallback, @ptrCast(self)), psmd_, u_msg_, w_param_, l_param_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellMenu_Value = Guid.initString("ee1f7637-e138-11d1-8379-00c04fd918d0");
pub const IID_IShellMenu = &IID_IShellMenu_Value;
pub const IShellMenu = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IShellMenu,
            psmc: ?*IShellMenuCallback,
            u_id: u32,
            u_id_ancestor: u32,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMenuInfo: *const fn (
            self: *const IShellMenu,
            ppsmc: ?*?*IShellMenuCallback,
            pu_id: ?*u32,
            pu_id_ancestor: ?*u32,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetShellFolder: *const fn (
            self: *const IShellMenu,
            psf: ?*IShellFolder,
            pidl_folder: ?*ITEMIDLIST,
            h_key: ?HKEY,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShellFolder: *const fn (
            self: *const IShellMenu,
            pdw_flags: ?*u32,
            ppidl: ?*?*ITEMIDLIST,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMenu: *const fn (
            self: *const IShellMenu,
            hmenu: ?HMENU,
            hwnd: ?HWND,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMenu: *const fn (
            self: *const IShellMenu,
            phmenu: ?*?HMENU,
            phwnd: ?*?HWND,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvalidateItem: *const fn (
            self: *const IShellMenu,
            psmd: ?*SMDATA,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetState: *const fn (
            self: *const IShellMenu,
            psmd: ?*SMDATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMenuToolbar: *const fn (
            self: *const IShellMenu,
            punk: ?*IUnknown,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, psmc_: ?*IShellMenuCallback, u_id_: u32, u_id_ancestor_: u32, dw_flags_: u32) HRESULT {
                return @as(*const IShellMenu.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IShellMenu, @ptrCast(self)), psmc_, u_id_, u_id_ancestor_, dw_flags_);
            }
            pub inline fn getMenuInfo(self: *const T, ppsmc_: ?*?*IShellMenuCallback, pu_id_: ?*u32, pu_id_ancestor_: ?*u32, pdw_flags_: ?*u32) HRESULT {
                return @as(*const IShellMenu.VTable, @ptrCast(self.vtable)).GetMenuInfo(@as(*const IShellMenu, @ptrCast(self)), ppsmc_, pu_id_, pu_id_ancestor_, pdw_flags_);
            }
            pub inline fn setShellFolder(self: *const T, psf_: ?*IShellFolder, pidl_folder_: ?*ITEMIDLIST, h_key_: ?HKEY, dw_flags_: u32) HRESULT {
                return @as(*const IShellMenu.VTable, @ptrCast(self.vtable)).SetShellFolder(@as(*const IShellMenu, @ptrCast(self)), psf_, pidl_folder_, h_key_, dw_flags_);
            }
            pub inline fn getShellFolder(self: *const T, pdw_flags_: ?*u32, ppidl_: ?*?*ITEMIDLIST, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IShellMenu.VTable, @ptrCast(self.vtable)).GetShellFolder(@as(*const IShellMenu, @ptrCast(self)), pdw_flags_, ppidl_, riid_, ppv_);
            }
            pub inline fn setMenu(self: *const T, hmenu_: ?HMENU, hwnd_: ?HWND, dw_flags_: u32) HRESULT {
                return @as(*const IShellMenu.VTable, @ptrCast(self.vtable)).SetMenu(@as(*const IShellMenu, @ptrCast(self)), hmenu_, hwnd_, dw_flags_);
            }
            pub inline fn getMenu(self: *const T, phmenu_: ?*?HMENU, phwnd_: ?*?HWND, pdw_flags_: ?*u32) HRESULT {
                return @as(*const IShellMenu.VTable, @ptrCast(self.vtable)).GetMenu(@as(*const IShellMenu, @ptrCast(self)), phmenu_, phwnd_, pdw_flags_);
            }
            pub inline fn invalidateItem(self: *const T, psmd_: ?*SMDATA, dw_flags_: u32) HRESULT {
                return @as(*const IShellMenu.VTable, @ptrCast(self.vtable)).InvalidateItem(@as(*const IShellMenu, @ptrCast(self)), psmd_, dw_flags_);
            }
            pub inline fn getState(self: *const T, psmd_: ?*SMDATA) HRESULT {
                return @as(*const IShellMenu.VTable, @ptrCast(self.vtable)).GetState(@as(*const IShellMenu, @ptrCast(self)), psmd_);
            }
            pub inline fn setMenuToolbar(self: *const T, punk_: ?*IUnknown, dw_flags_: u32) HRESULT {
                return @as(*const IShellMenu.VTable, @ptrCast(self.vtable)).SetMenuToolbar(@as(*const IShellMenu, @ptrCast(self)), punk_, dw_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const KF_CATEGORY = enum(i32) {
    VIRTUAL = 1,
    FIXED = 2,
    COMMON = 3,
    PERUSER = 4,
};
pub const KF_CATEGORY_VIRTUAL = KF_CATEGORY.VIRTUAL;
pub const KF_CATEGORY_FIXED = KF_CATEGORY.FIXED;
pub const KF_CATEGORY_COMMON = KF_CATEGORY.COMMON;
pub const KF_CATEGORY_PERUSER = KF_CATEGORY.PERUSER;

pub const _KF_DEFINITION_FLAGS = enum(i32) {
    LOCAL_REDIRECT_ONLY = 2,
    ROAMABLE = 4,
    PRECREATE = 8,
    STREAM = 16,
    PUBLISHEXPANDEDPATH = 32,
    NO_REDIRECT_UI = 64,
};
pub const KFDF_LOCAL_REDIRECT_ONLY = _KF_DEFINITION_FLAGS.LOCAL_REDIRECT_ONLY;
pub const KFDF_ROAMABLE = _KF_DEFINITION_FLAGS.ROAMABLE;
pub const KFDF_PRECREATE = _KF_DEFINITION_FLAGS.PRECREATE;
pub const KFDF_STREAM = _KF_DEFINITION_FLAGS.STREAM;
pub const KFDF_PUBLISHEXPANDEDPATH = _KF_DEFINITION_FLAGS.PUBLISHEXPANDEDPATH;
pub const KFDF_NO_REDIRECT_UI = _KF_DEFINITION_FLAGS.NO_REDIRECT_UI;

pub const _KF_REDIRECT_FLAGS = enum(i32) {
    USER_EXCLUSIVE = 1,
    COPY_SOURCE_DACL = 2,
    OWNER_USER = 4,
    SET_OWNER_EXPLICIT = 8,
    CHECK_ONLY = 16,
    WITH_UI = 32,
    UNPIN = 64,
    PIN = 128,
    COPY_CONTENTS = 512,
    DEL_SOURCE_CONTENTS = 1024,
    EXCLUDE_ALL_KNOWN_SUBFOLDERS = 2048,
};
pub const KF_REDIRECT_USER_EXCLUSIVE = _KF_REDIRECT_FLAGS.USER_EXCLUSIVE;
pub const KF_REDIRECT_COPY_SOURCE_DACL = _KF_REDIRECT_FLAGS.COPY_SOURCE_DACL;
pub const KF_REDIRECT_OWNER_USER = _KF_REDIRECT_FLAGS.OWNER_USER;
pub const KF_REDIRECT_SET_OWNER_EXPLICIT = _KF_REDIRECT_FLAGS.SET_OWNER_EXPLICIT;
pub const KF_REDIRECT_CHECK_ONLY = _KF_REDIRECT_FLAGS.CHECK_ONLY;
pub const KF_REDIRECT_WITH_UI = _KF_REDIRECT_FLAGS.WITH_UI;
pub const KF_REDIRECT_UNPIN = _KF_REDIRECT_FLAGS.UNPIN;
pub const KF_REDIRECT_PIN = _KF_REDIRECT_FLAGS.PIN;
pub const KF_REDIRECT_COPY_CONTENTS = _KF_REDIRECT_FLAGS.COPY_CONTENTS;
pub const KF_REDIRECT_DEL_SOURCE_CONTENTS = _KF_REDIRECT_FLAGS.DEL_SOURCE_CONTENTS;
pub const KF_REDIRECT_EXCLUDE_ALL_KNOWN_SUBFOLDERS = _KF_REDIRECT_FLAGS.EXCLUDE_ALL_KNOWN_SUBFOLDERS;

pub const _KF_REDIRECTION_CAPABILITIES = enum(i32) {
    ALLOW_ALL = 255,
    REDIRECTABLE = 1,
    DENY_ALL = 1048320,
    DENY_POLICY_REDIRECTED = 256,
    DENY_POLICY = 512,
    DENY_PERMISSIONS = 1024,
};
pub const KF_REDIRECTION_CAPABILITIES_ALLOW_ALL = _KF_REDIRECTION_CAPABILITIES.ALLOW_ALL;
pub const KF_REDIRECTION_CAPABILITIES_REDIRECTABLE = _KF_REDIRECTION_CAPABILITIES.REDIRECTABLE;
pub const KF_REDIRECTION_CAPABILITIES_DENY_ALL = _KF_REDIRECTION_CAPABILITIES.DENY_ALL;
pub const KF_REDIRECTION_CAPABILITIES_DENY_POLICY_REDIRECTED = _KF_REDIRECTION_CAPABILITIES.DENY_POLICY_REDIRECTED;
pub const KF_REDIRECTION_CAPABILITIES_DENY_POLICY = _KF_REDIRECTION_CAPABILITIES.DENY_POLICY;
pub const KF_REDIRECTION_CAPABILITIES_DENY_PERMISSIONS = _KF_REDIRECTION_CAPABILITIES.DENY_PERMISSIONS;

pub const KNOWNFOLDER_DEFINITION = extern struct {
    category: KF_CATEGORY,
    pszName: ?PWSTR,
    pszDescription: ?PWSTR,
    fidParent: Guid,
    pszRelativePath: ?PWSTR,
    pszParsingName: ?PWSTR,
    pszTooltip: ?PWSTR,
    pszLocalizedName: ?PWSTR,
    pszIcon: ?PWSTR,
    pszSecurity: ?PWSTR,
    dwAttributes: u32,
    kfdFlags: u32,
    ftidType: Guid,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IKnownFolder_Value = Guid.initString("3aa7af7e-9b36-420c-a8e3-f77d4674a488");
pub const IID_IKnownFolder = &IID_IKnownFolder_Value;
pub const IKnownFolder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetId: *const fn (
            self: *const IKnownFolder,
            pkfid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategory: *const fn (
            self: *const IKnownFolder,
            p_category: ?*KF_CATEGORY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShellItem: *const fn (
            self: *const IKnownFolder,
            dw_flags: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPath: *const fn (
            self: *const IKnownFolder,
            dw_flags: u32,
            ppsz_path: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPath: *const fn (
            self: *const IKnownFolder,
            dw_flags: u32,
            psz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIDList: *const fn (
            self: *const IKnownFolder,
            dw_flags: u32,
            ppidl: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderType: *const fn (
            self: *const IKnownFolder,
            pftid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRedirectionCapabilities: *const fn (
            self: *const IKnownFolder,
            p_capabilities: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderDefinition: *const fn (
            self: *const IKnownFolder,
            p_k_f_d: ?*KNOWNFOLDER_DEFINITION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getId(self: *const T, pkfid_: ?*Guid) HRESULT {
                return @as(*const IKnownFolder.VTable, @ptrCast(self.vtable)).GetId(@as(*const IKnownFolder, @ptrCast(self)), pkfid_);
            }
            pub inline fn getCategory(self: *const T, p_category_: ?*KF_CATEGORY) HRESULT {
                return @as(*const IKnownFolder.VTable, @ptrCast(self.vtable)).GetCategory(@as(*const IKnownFolder, @ptrCast(self)), p_category_);
            }
            pub inline fn getShellItem(self: *const T, dw_flags_: u32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IKnownFolder.VTable, @ptrCast(self.vtable)).GetShellItem(@as(*const IKnownFolder, @ptrCast(self)), dw_flags_, riid_, ppv_);
            }
            pub inline fn getPath(self: *const T, dw_flags_: u32, ppsz_path_: ?*?PWSTR) HRESULT {
                return @as(*const IKnownFolder.VTable, @ptrCast(self.vtable)).GetPath(@as(*const IKnownFolder, @ptrCast(self)), dw_flags_, ppsz_path_);
            }
            pub inline fn setPath(self: *const T, dw_flags_: u32, psz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IKnownFolder.VTable, @ptrCast(self.vtable)).SetPath(@as(*const IKnownFolder, @ptrCast(self)), dw_flags_, psz_path_);
            }
            pub inline fn getIDList(self: *const T, dw_flags_: u32, ppidl_: ?*?*ITEMIDLIST) HRESULT {
                return @as(*const IKnownFolder.VTable, @ptrCast(self.vtable)).GetIDList(@as(*const IKnownFolder, @ptrCast(self)), dw_flags_, ppidl_);
            }
            pub inline fn getFolderType(self: *const T, pftid_: ?*Guid) HRESULT {
                return @as(*const IKnownFolder.VTable, @ptrCast(self.vtable)).GetFolderType(@as(*const IKnownFolder, @ptrCast(self)), pftid_);
            }
            pub inline fn getRedirectionCapabilities(self: *const T, p_capabilities_: ?*u32) HRESULT {
                return @as(*const IKnownFolder.VTable, @ptrCast(self.vtable)).GetRedirectionCapabilities(@as(*const IKnownFolder, @ptrCast(self)), p_capabilities_);
            }
            pub inline fn getFolderDefinition(self: *const T, p_k_f_d_: ?*KNOWNFOLDER_DEFINITION) HRESULT {
                return @as(*const IKnownFolder.VTable, @ptrCast(self.vtable)).GetFolderDefinition(@as(*const IKnownFolder, @ptrCast(self)), p_k_f_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FFFP_MODE = enum(i32) {
    EXACTMATCH = 0,
    NEARESTPARENTMATCH = 1,
};
pub const FFFP_EXACTMATCH = FFFP_MODE.EXACTMATCH;
pub const FFFP_NEARESTPARENTMATCH = FFFP_MODE.NEARESTPARENTMATCH;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IKnownFolderManager_Value = Guid.initString("8be2d872-86aa-4d47-b776-32cca40c7018");
pub const IID_IKnownFolderManager = &IID_IKnownFolderManager_Value;
pub const IKnownFolderManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FolderIdFromCsidl: *const fn (
            self: *const IKnownFolderManager,
            n_csidl: i32,
            pfid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FolderIdToCsidl: *const fn (
            self: *const IKnownFolderManager,
            rfid: ?*const Guid,
            pn_csidl: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderIds: *const fn (
            self: *const IKnownFolderManager,
            pp_k_f_id: [*]?*Guid,
            p_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolder: *const fn (
            self: *const IKnownFolderManager,
            rfid: ?*const Guid,
            ppkf: ?*?*IKnownFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderByName: *const fn (
            self: *const IKnownFolderManager,
            psz_canonical_name: ?[*:0]const u16,
            ppkf: ?*?*IKnownFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterFolder: *const fn (
            self: *const IKnownFolderManager,
            rfid: ?*const Guid,
            p_k_f_d: ?*const KNOWNFOLDER_DEFINITION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterFolder: *const fn (
            self: *const IKnownFolderManager,
            rfid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFolderFromPath: *const fn (
            self: *const IKnownFolderManager,
            psz_path: ?[*:0]const u16,
            mode: FFFP_MODE,
            ppkf: ?*?*IKnownFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFolderFromIDList: *const fn (
            self: *const IKnownFolderManager,
            pidl: ?*ITEMIDLIST,
            ppkf: ?*?*IKnownFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Redirect: *const fn (
            self: *const IKnownFolderManager,
            rfid: ?*const Guid,
            hwnd: ?HWND,
            flags: u32,
            psz_target_path: ?[*:0]const u16,
            c_folders: u32,
            p_exclusion: ?[*]const Guid,
            ppsz_error: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn folderIdFromCsidl(self: *const T, n_csidl_: i32, pfid_: ?*Guid) HRESULT {
                return @as(*const IKnownFolderManager.VTable, @ptrCast(self.vtable)).FolderIdFromCsidl(@as(*const IKnownFolderManager, @ptrCast(self)), n_csidl_, pfid_);
            }
            pub inline fn folderIdToCsidl(self: *const T, rfid_: ?*const Guid, pn_csidl_: ?*i32) HRESULT {
                return @as(*const IKnownFolderManager.VTable, @ptrCast(self.vtable)).FolderIdToCsidl(@as(*const IKnownFolderManager, @ptrCast(self)), rfid_, pn_csidl_);
            }
            pub inline fn getFolderIds(self: *const T, pp_k_f_id_: [*]?*Guid, p_count_: ?*u32) HRESULT {
                return @as(*const IKnownFolderManager.VTable, @ptrCast(self.vtable)).GetFolderIds(@as(*const IKnownFolderManager, @ptrCast(self)), pp_k_f_id_, p_count_);
            }
            pub inline fn getFolder(self: *const T, rfid_: ?*const Guid, ppkf_: ?*?*IKnownFolder) HRESULT {
                return @as(*const IKnownFolderManager.VTable, @ptrCast(self.vtable)).GetFolder(@as(*const IKnownFolderManager, @ptrCast(self)), rfid_, ppkf_);
            }
            pub inline fn getFolderByName(self: *const T, psz_canonical_name_: ?[*:0]const u16, ppkf_: ?*?*IKnownFolder) HRESULT {
                return @as(*const IKnownFolderManager.VTable, @ptrCast(self.vtable)).GetFolderByName(@as(*const IKnownFolderManager, @ptrCast(self)), psz_canonical_name_, ppkf_);
            }
            pub inline fn registerFolder(self: *const T, rfid_: ?*const Guid, p_k_f_d_: ?*const KNOWNFOLDER_DEFINITION) HRESULT {
                return @as(*const IKnownFolderManager.VTable, @ptrCast(self.vtable)).RegisterFolder(@as(*const IKnownFolderManager, @ptrCast(self)), rfid_, p_k_f_d_);
            }
            pub inline fn unregisterFolder(self: *const T, rfid_: ?*const Guid) HRESULT {
                return @as(*const IKnownFolderManager.VTable, @ptrCast(self.vtable)).UnregisterFolder(@as(*const IKnownFolderManager, @ptrCast(self)), rfid_);
            }
            pub inline fn findFolderFromPath(self: *const T, psz_path_: ?[*:0]const u16, mode_: FFFP_MODE, ppkf_: ?*?*IKnownFolder) HRESULT {
                return @as(*const IKnownFolderManager.VTable, @ptrCast(self.vtable)).FindFolderFromPath(@as(*const IKnownFolderManager, @ptrCast(self)), psz_path_, mode_, ppkf_);
            }
            pub inline fn findFolderFromIDList(self: *const T, pidl_: ?*ITEMIDLIST, ppkf_: ?*?*IKnownFolder) HRESULT {
                return @as(*const IKnownFolderManager.VTable, @ptrCast(self.vtable)).FindFolderFromIDList(@as(*const IKnownFolderManager, @ptrCast(self)), pidl_, ppkf_);
            }
            pub inline fn redirect(self: *const T, rfid_: ?*const Guid, hwnd_: ?HWND, flags_: u32, psz_target_path_: ?[*:0]const u16, c_folders_: u32, p_exclusion_: ?[*]const Guid, ppsz_error_: ?*?PWSTR) HRESULT {
                return @as(*const IKnownFolderManager.VTable, @ptrCast(self.vtable)).Redirect(@as(*const IKnownFolderManager, @ptrCast(self)), rfid_, hwnd_, flags_, psz_target_path_, c_folders_, p_exclusion_, ppsz_error_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SHARE_ROLE = enum(i32) {
    INVALID = -1,
    READER = 0,
    CONTRIBUTOR = 1,
    CO_OWNER = 2,
    OWNER = 3,
    CUSTOM = 4,
    MIXED = 5,
};
pub const SHARE_ROLE_INVALID = SHARE_ROLE.INVALID;
pub const SHARE_ROLE_READER = SHARE_ROLE.READER;
pub const SHARE_ROLE_CONTRIBUTOR = SHARE_ROLE.CONTRIBUTOR;
pub const SHARE_ROLE_CO_OWNER = SHARE_ROLE.CO_OWNER;
pub const SHARE_ROLE_OWNER = SHARE_ROLE.OWNER;
pub const SHARE_ROLE_CUSTOM = SHARE_ROLE.CUSTOM;
pub const SHARE_ROLE_MIXED = SHARE_ROLE.MIXED;

pub const DEF_SHARE_ID = enum(i32) {
    USERS = 1,
    PUBLIC = 2,
};
pub const DEFSHAREID_USERS = DEF_SHARE_ID.USERS;
pub const DEFSHAREID_PUBLIC = DEF_SHARE_ID.PUBLIC;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISharingConfigurationManager_Value = Guid.initString("b4cd448a-9c86-4466-9201-2e62105b87ae");
pub const IID_ISharingConfigurationManager = &IID_ISharingConfigurationManager_Value;
pub const ISharingConfigurationManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateShare: *const fn (
            self: *const ISharingConfigurationManager,
            dsid: DEF_SHARE_ID,
            role: SHARE_ROLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteShare: *const fn (
            self: *const ISharingConfigurationManager,
            dsid: DEF_SHARE_ID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShareExists: *const fn (
            self: *const ISharingConfigurationManager,
            dsid: DEF_SHARE_ID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSharePermissions: *const fn (
            self: *const ISharingConfigurationManager,
            dsid: DEF_SHARE_ID,
            p_role: ?*SHARE_ROLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SharePrinters: *const fn (
            self: *const ISharingConfigurationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopSharingPrinters: *const fn (
            self: *const ISharingConfigurationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ArePrintersShared: *const fn (
            self: *const ISharingConfigurationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createShare(self: *const T, dsid_: DEF_SHARE_ID, role_: SHARE_ROLE) HRESULT {
                return @as(*const ISharingConfigurationManager.VTable, @ptrCast(self.vtable)).CreateShare(@as(*const ISharingConfigurationManager, @ptrCast(self)), dsid_, role_);
            }
            pub inline fn deleteShare(self: *const T, dsid_: DEF_SHARE_ID) HRESULT {
                return @as(*const ISharingConfigurationManager.VTable, @ptrCast(self.vtable)).DeleteShare(@as(*const ISharingConfigurationManager, @ptrCast(self)), dsid_);
            }
            pub inline fn shareExists(self: *const T, dsid_: DEF_SHARE_ID) HRESULT {
                return @as(*const ISharingConfigurationManager.VTable, @ptrCast(self.vtable)).ShareExists(@as(*const ISharingConfigurationManager, @ptrCast(self)), dsid_);
            }
            pub inline fn getSharePermissions(self: *const T, dsid_: DEF_SHARE_ID, p_role_: ?*SHARE_ROLE) HRESULT {
                return @as(*const ISharingConfigurationManager.VTable, @ptrCast(self.vtable)).GetSharePermissions(@as(*const ISharingConfigurationManager, @ptrCast(self)), dsid_, p_role_);
            }
            pub inline fn sharePrinters(self: *const T) HRESULT {
                return @as(*const ISharingConfigurationManager.VTable, @ptrCast(self.vtable)).SharePrinters(@as(*const ISharingConfigurationManager, @ptrCast(self)));
            }
            pub inline fn stopSharingPrinters(self: *const T) HRESULT {
                return @as(*const ISharingConfigurationManager.VTable, @ptrCast(self.vtable)).StopSharingPrinters(@as(*const ISharingConfigurationManager, @ptrCast(self)));
            }
            pub inline fn arePrintersShared(self: *const T) HRESULT {
                return @as(*const ISharingConfigurationManager.VTable, @ptrCast(self.vtable)).ArePrintersShared(@as(*const ISharingConfigurationManager, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRelatedItem_Value = Guid.initString("a73ce67a-8ab1-44f1-8d43-d2fcbf6b1cd0");
pub const IID_IRelatedItem = &IID_IRelatedItem_Value;
pub const IRelatedItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetItemIDList: *const fn (
            self: *const IRelatedItem,
            ppidl: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItem: *const fn (
            self: *const IRelatedItem,
            ppsi: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getItemIDList(self: *const T, ppidl_: ?*?*ITEMIDLIST) HRESULT {
                return @as(*const IRelatedItem.VTable, @ptrCast(self.vtable)).GetItemIDList(@as(*const IRelatedItem, @ptrCast(self)), ppidl_);
            }
            pub inline fn getItem(self: *const T, ppsi_: ?*?*IShellItem) HRESULT {
                return @as(*const IRelatedItem.VTable, @ptrCast(self.vtable)).GetItem(@as(*const IRelatedItem, @ptrCast(self)), ppsi_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IIdentityName_Value = Guid.initString("7d903fca-d6f9-4810-8332-946c0177e247");
pub const IID_IIdentityName = &IID_IIdentityName_Value;
pub const IIdentityName = extern struct {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRelatedItem.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDelegateItem_Value = Guid.initString("3c5a1c94-c951-4cb7-bb6d-3b93f30cce93");
pub const IID_IDelegateItem = &IID_IDelegateItem_Value;
pub const IDelegateItem = extern struct {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRelatedItem.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICurrentItem_Value = Guid.initString("240a7174-d653-4a1d-a6d3-d4943cfbfe3d");
pub const IID_ICurrentItem = &IID_ICurrentItem_Value;
pub const ICurrentItem = extern struct {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRelatedItem.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITransferMediumItem_Value = Guid.initString("77f295d5-2d6f-4e19-b8ae-322f3e721ab5");
pub const IID_ITransferMediumItem = &IID_ITransferMediumItem_Value;
pub const ITransferMediumItem = extern struct {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRelatedItem.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDisplayItem_Value = Guid.initString("c6fd5997-9f6b-4888-8703-94e80e8cde3f");
pub const IID_IDisplayItem = &IID_IDisplayItem_Value;
pub const IDisplayItem = extern struct {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRelatedItem.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IViewStateIdentityItem_Value = Guid.initString("9d264146-a94f-4195-9f9f-3bb12ce0c955");
pub const IID_IViewStateIdentityItem = &IID_IViewStateIdentityItem_Value;
pub const IViewStateIdentityItem = extern struct {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRelatedItem.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IPreviewItem_Value = Guid.initString("36149969-0a8f-49c8-8b00-4aecb20222fb");
pub const IID_IPreviewItem = &IID_IPreviewItem_Value;
pub const IPreviewItem = extern struct {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRelatedItem.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDestinationStreamFactory_Value = Guid.initString("8a87781b-39a7-4a1f-aab3-a39b9c34a7d9");
pub const IID_IDestinationStreamFactory = &IID_IDestinationStreamFactory_Value;
pub const IDestinationStreamFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDestinationStream: *const fn (
            self: *const IDestinationStreamFactory,
            ppstm: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDestinationStream(self: *const T, ppstm_: ?*?*IStream) HRESULT {
                return @as(*const IDestinationStreamFactory.VTable, @ptrCast(self.vtable)).GetDestinationStream(@as(*const IDestinationStreamFactory, @ptrCast(self)), ppstm_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICreateProcessInputs_Value = Guid.initString("f6ef6140-e26f-4d82-bac4-e9ba5fd239a8");
pub const IID_ICreateProcessInputs = &IID_ICreateProcessInputs_Value;
pub const ICreateProcessInputs = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCreateFlags: *const fn (
            self: *const ICreateProcessInputs,
            pdw_creation_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCreateFlags: *const fn (
            self: *const ICreateProcessInputs,
            dw_creation_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddCreateFlags: *const fn (
            self: *const ICreateProcessInputs,
            dw_creation_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHotKey: *const fn (
            self: *const ICreateProcessInputs,
            w_hot_key: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStartupFlags: *const fn (
            self: *const ICreateProcessInputs,
            dw_startup_info_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTitle: *const fn (
            self: *const ICreateProcessInputs,
            psz_title: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnvironmentVariable: *const fn (
            self: *const ICreateProcessInputs,
            psz_name: ?[*:0]const u16,
            psz_value: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCreateFlags(self: *const T, pdw_creation_flags_: ?*u32) HRESULT {
                return @as(*const ICreateProcessInputs.VTable, @ptrCast(self.vtable)).GetCreateFlags(@as(*const ICreateProcessInputs, @ptrCast(self)), pdw_creation_flags_);
            }
            pub inline fn setCreateFlags(self: *const T, dw_creation_flags_: u32) HRESULT {
                return @as(*const ICreateProcessInputs.VTable, @ptrCast(self.vtable)).SetCreateFlags(@as(*const ICreateProcessInputs, @ptrCast(self)), dw_creation_flags_);
            }
            pub inline fn addCreateFlags(self: *const T, dw_creation_flags_: u32) HRESULT {
                return @as(*const ICreateProcessInputs.VTable, @ptrCast(self.vtable)).AddCreateFlags(@as(*const ICreateProcessInputs, @ptrCast(self)), dw_creation_flags_);
            }
            pub inline fn setHotKey(self: *const T, w_hot_key_: u16) HRESULT {
                return @as(*const ICreateProcessInputs.VTable, @ptrCast(self.vtable)).SetHotKey(@as(*const ICreateProcessInputs, @ptrCast(self)), w_hot_key_);
            }
            pub inline fn addStartupFlags(self: *const T, dw_startup_info_flags_: u32) HRESULT {
                return @as(*const ICreateProcessInputs.VTable, @ptrCast(self.vtable)).AddStartupFlags(@as(*const ICreateProcessInputs, @ptrCast(self)), dw_startup_info_flags_);
            }
            pub inline fn setTitle(self: *const T, psz_title_: ?[*:0]const u16) HRESULT {
                return @as(*const ICreateProcessInputs.VTable, @ptrCast(self.vtable)).SetTitle(@as(*const ICreateProcessInputs, @ptrCast(self)), psz_title_);
            }
            pub inline fn setEnvironmentVariable(self: *const T, psz_name_: ?[*:0]const u16, psz_value_: ?[*:0]const u16) HRESULT {
                return @as(*const ICreateProcessInputs.VTable, @ptrCast(self.vtable)).SetEnvironmentVariable(@as(*const ICreateProcessInputs, @ptrCast(self)), psz_name_, psz_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICreatingProcess_Value = Guid.initString("c2b937a9-3110-4398-8a56-f34c6342d244");
pub const IID_ICreatingProcess = &IID_ICreatingProcess_Value;
pub const ICreatingProcess = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnCreating: *const fn (
            self: *const ICreatingProcess,
            pcpi: ?*ICreateProcessInputs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onCreating(self: *const T, pcpi_: ?*ICreateProcessInputs) HRESULT {
                return @as(*const ICreatingProcess.VTable, @ptrCast(self.vtable)).OnCreating(@as(*const ICreatingProcess, @ptrCast(self)), pcpi_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ILaunchUIContext_Value = Guid.initString("1791e8f6-21c7-4340-882a-a6a93e3fd73b");
pub const IID_ILaunchUIContext = &IID_ILaunchUIContext_Value;
pub const ILaunchUIContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAssociatedWindow: *const fn (
            self: *const ILaunchUIContext,
            value: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTabGroupingPreference: *const fn (
            self: *const ILaunchUIContext,
            value: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAssociatedWindow(self: *const T, value_: ?HWND) HRESULT {
                return @as(*const ILaunchUIContext.VTable, @ptrCast(self.vtable)).SetAssociatedWindow(@as(*const ILaunchUIContext, @ptrCast(self)), value_);
            }
            pub inline fn setTabGroupingPreference(self: *const T, value_: u32) HRESULT {
                return @as(*const ILaunchUIContext.VTable, @ptrCast(self.vtable)).SetTabGroupingPreference(@as(*const ILaunchUIContext, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ILaunchUIContextProvider_Value = Guid.initString("0d12c4c8-a3d9-4e24-94c1-0e20c5a956c4");
pub const IID_ILaunchUIContextProvider = &IID_ILaunchUIContextProvider_Value;
pub const ILaunchUIContextProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        UpdateContext: *const fn (
            self: *const ILaunchUIContextProvider,
            context: ?*ILaunchUIContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn updateContext(self: *const T, context_: ?*ILaunchUIContext) HRESULT {
                return @as(*const ILaunchUIContextProvider.VTable, @ptrCast(self.vtable)).UpdateContext(@as(*const ILaunchUIContextProvider, @ptrCast(self)), context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const _NMCII_FLAGS = enum(i32) {
    NONE = 0,
    ITEMS = 1,
    FOLDERS = 2,
};
pub const NMCII_NONE = _NMCII_FLAGS.NONE;
pub const NMCII_ITEMS = _NMCII_FLAGS.ITEMS;
pub const NMCII_FOLDERS = _NMCII_FLAGS.FOLDERS;

pub const _NMCSAEI_FLAGS = enum(i32) {
    SELECT = 0,
    EDIT = 1,
};
pub const NMCSAEI_SELECT = _NMCSAEI_FLAGS.SELECT;
pub const NMCSAEI_EDIT = _NMCSAEI_FLAGS.EDIT;

// TODO: this type is limited to platform 'windows6.1'
const IID_INewMenuClient_Value = Guid.initString("dcb07fdc-3bb5-451c-90be-966644fed7b0");
pub const IID_INewMenuClient = &IID_INewMenuClient_Value;
pub const INewMenuClient = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IncludeItems: *const fn (
            self: *const INewMenuClient,
            pflags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectAndEditItem: *const fn (
            self: *const INewMenuClient,
            pidl_item: ?*ITEMIDLIST,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn includeItems(self: *const T, pflags_: ?*i32) HRESULT {
                return @as(*const INewMenuClient.VTable, @ptrCast(self.vtable)).IncludeItems(@as(*const INewMenuClient, @ptrCast(self)), pflags_);
            }
            pub inline fn selectAndEditItem(self: *const T, pidl_item_: ?*ITEMIDLIST, flags_: i32) HRESULT {
                return @as(*const INewMenuClient.VTable, @ptrCast(self.vtable)).SelectAndEditItem(@as(*const INewMenuClient, @ptrCast(self)), pidl_item_, flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IInitializeWithBindCtx_Value = Guid.initString("71c0d2bc-726d-45cc-a6c0-2e31c1db2159");
pub const IID_IInitializeWithBindCtx = &IID_IInitializeWithBindCtx_Value;
pub const IInitializeWithBindCtx = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IInitializeWithBindCtx,
            pbc: ?*IBindCtx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, pbc_: ?*IBindCtx) HRESULT {
                return @as(*const IInitializeWithBindCtx.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IInitializeWithBindCtx, @ptrCast(self)), pbc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IShellItemFilter_Value = Guid.initString("2659b475-eeb8-48b7-8f07-b378810f48cf");
pub const IID_IShellItemFilter = &IID_IShellItemFilter_Value;
pub const IShellItemFilter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IncludeItem: *const fn (
            self: *const IShellItemFilter,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumFlagsForItem: *const fn (
            self: *const IShellItemFilter,
            psi: ?*IShellItem,
            pgrf_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn includeItem(self: *const T, psi_: ?*IShellItem) HRESULT {
                return @as(*const IShellItemFilter.VTable, @ptrCast(self.vtable)).IncludeItem(@as(*const IShellItemFilter, @ptrCast(self)), psi_);
            }
            pub inline fn getEnumFlagsForItem(self: *const T, psi_: ?*IShellItem, pgrf_flags_: ?*u32) HRESULT {
                return @as(*const IShellItemFilter.VTable, @ptrCast(self.vtable)).GetEnumFlagsForItem(@as(*const IShellItemFilter, @ptrCast(self)), psi_, pgrf_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const _NSTCSTYLE = enum(i32) {
    HASEXPANDOS = 1,
    HASLINES = 2,
    SINGLECLICKEXPAND = 4,
    FULLROWSELECT = 8,
    SPRINGEXPAND = 16,
    HORIZONTALSCROLL = 32,
    ROOTHASEXPANDO = 64,
    SHOWSELECTIONALWAYS = 128,
    NOINFOTIP = 512,
    EVENHEIGHT = 1024,
    NOREPLACEOPEN = 2048,
    DISABLEDRAGDROP = 4096,
    NOORDERSTREAM = 8192,
    RICHTOOLTIP = 16384,
    BORDER = 32768,
    NOEDITLABELS = 65536,
    TABSTOP = 131072,
    FAVORITESMODE = 524288,
    AUTOHSCROLL = 1048576,
    FADEINOUTEXPANDOS = 2097152,
    EMPTYTEXT = 4194304,
    CHECKBOXES = 8388608,
    PARTIALCHECKBOXES = 16777216,
    EXCLUSIONCHECKBOXES = 33554432,
    DIMMEDCHECKBOXES = 67108864,
    NOINDENTCHECKS = 134217728,
    ALLOWJUNCTIONS = 268435456,
    SHOWTABSBUTTON = 536870912,
    SHOWDELETEBUTTON = 1073741824,
    SHOWREFRESHBUTTON = -2147483648,
};
pub const NSTCS_HASEXPANDOS = _NSTCSTYLE.HASEXPANDOS;
pub const NSTCS_HASLINES = _NSTCSTYLE.HASLINES;
pub const NSTCS_SINGLECLICKEXPAND = _NSTCSTYLE.SINGLECLICKEXPAND;
pub const NSTCS_FULLROWSELECT = _NSTCSTYLE.FULLROWSELECT;
pub const NSTCS_SPRINGEXPAND = _NSTCSTYLE.SPRINGEXPAND;
pub const NSTCS_HORIZONTALSCROLL = _NSTCSTYLE.HORIZONTALSCROLL;
pub const NSTCS_ROOTHASEXPANDO = _NSTCSTYLE.ROOTHASEXPANDO;
pub const NSTCS_SHOWSELECTIONALWAYS = _NSTCSTYLE.SHOWSELECTIONALWAYS;
pub const NSTCS_NOINFOTIP = _NSTCSTYLE.NOINFOTIP;
pub const NSTCS_EVENHEIGHT = _NSTCSTYLE.EVENHEIGHT;
pub const NSTCS_NOREPLACEOPEN = _NSTCSTYLE.NOREPLACEOPEN;
pub const NSTCS_DISABLEDRAGDROP = _NSTCSTYLE.DISABLEDRAGDROP;
pub const NSTCS_NOORDERSTREAM = _NSTCSTYLE.NOORDERSTREAM;
pub const NSTCS_RICHTOOLTIP = _NSTCSTYLE.RICHTOOLTIP;
pub const NSTCS_BORDER = _NSTCSTYLE.BORDER;
pub const NSTCS_NOEDITLABELS = _NSTCSTYLE.NOEDITLABELS;
pub const NSTCS_TABSTOP = _NSTCSTYLE.TABSTOP;
pub const NSTCS_FAVORITESMODE = _NSTCSTYLE.FAVORITESMODE;
pub const NSTCS_AUTOHSCROLL = _NSTCSTYLE.AUTOHSCROLL;
pub const NSTCS_FADEINOUTEXPANDOS = _NSTCSTYLE.FADEINOUTEXPANDOS;
pub const NSTCS_EMPTYTEXT = _NSTCSTYLE.EMPTYTEXT;
pub const NSTCS_CHECKBOXES = _NSTCSTYLE.CHECKBOXES;
pub const NSTCS_PARTIALCHECKBOXES = _NSTCSTYLE.PARTIALCHECKBOXES;
pub const NSTCS_EXCLUSIONCHECKBOXES = _NSTCSTYLE.EXCLUSIONCHECKBOXES;
pub const NSTCS_DIMMEDCHECKBOXES = _NSTCSTYLE.DIMMEDCHECKBOXES;
pub const NSTCS_NOINDENTCHECKS = _NSTCSTYLE.NOINDENTCHECKS;
pub const NSTCS_ALLOWJUNCTIONS = _NSTCSTYLE.ALLOWJUNCTIONS;
pub const NSTCS_SHOWTABSBUTTON = _NSTCSTYLE.SHOWTABSBUTTON;
pub const NSTCS_SHOWDELETEBUTTON = _NSTCSTYLE.SHOWDELETEBUTTON;
pub const NSTCS_SHOWREFRESHBUTTON = _NSTCSTYLE.SHOWREFRESHBUTTON;

pub const _NSTCROOTSTYLE = enum(i32) {
    VISIBLE = 0,
    HIDDEN = 1,
    EXPANDED = 2,
};
pub const NSTCRS_VISIBLE = _NSTCROOTSTYLE.VISIBLE;
pub const NSTCRS_HIDDEN = _NSTCROOTSTYLE.HIDDEN;
pub const NSTCRS_EXPANDED = _NSTCROOTSTYLE.EXPANDED;

pub const _NSTCITEMSTATE = enum(i32) {
    NONE = 0,
    SELECTED = 1,
    EXPANDED = 2,
    BOLD = 4,
    DISABLED = 8,
    SELECTEDNOEXPAND = 16,
};
pub const NSTCIS_NONE = _NSTCITEMSTATE.NONE;
pub const NSTCIS_SELECTED = _NSTCITEMSTATE.SELECTED;
pub const NSTCIS_EXPANDED = _NSTCITEMSTATE.EXPANDED;
pub const NSTCIS_BOLD = _NSTCITEMSTATE.BOLD;
pub const NSTCIS_DISABLED = _NSTCITEMSTATE.DISABLED;
pub const NSTCIS_SELECTEDNOEXPAND = _NSTCITEMSTATE.SELECTEDNOEXPAND;

pub const NSTCGNI = enum(i32) {
    NEXT = 0,
    NEXTVISIBLE = 1,
    PREV = 2,
    PREVVISIBLE = 3,
    PARENT = 4,
    CHILD = 5,
    FIRSTVISIBLE = 6,
    LASTVISIBLE = 7,
};
pub const NSTCGNI_NEXT = NSTCGNI.NEXT;
pub const NSTCGNI_NEXTVISIBLE = NSTCGNI.NEXTVISIBLE;
pub const NSTCGNI_PREV = NSTCGNI.PREV;
pub const NSTCGNI_PREVVISIBLE = NSTCGNI.PREVVISIBLE;
pub const NSTCGNI_PARENT = NSTCGNI.PARENT;
pub const NSTCGNI_CHILD = NSTCGNI.CHILD;
pub const NSTCGNI_FIRSTVISIBLE = NSTCGNI.FIRSTVISIBLE;
pub const NSTCGNI_LASTVISIBLE = NSTCGNI.LASTVISIBLE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INameSpaceTreeControl_Value = Guid.initString("028212a3-b627-47e9-8856-c14265554e4f");
pub const IID_INameSpaceTreeControl = &IID_INameSpaceTreeControl_Value;
pub const INameSpaceTreeControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const INameSpaceTreeControl,
            hwnd_parent: ?HWND,
            prc: ?*RECT,
            nscts_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TreeAdvise: *const fn (
            self: *const INameSpaceTreeControl,
            punk: ?*IUnknown,
            pdw_cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TreeUnadvise: *const fn (
            self: *const INameSpaceTreeControl,
            dw_cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendRoot: *const fn (
            self: *const INameSpaceTreeControl,
            psi_root: ?*IShellItem,
            grf_enum_flags: u32,
            grf_root_style: u32,
            pif: ?*IShellItemFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertRoot: *const fn (
            self: *const INameSpaceTreeControl,
            i_index: i32,
            psi_root: ?*IShellItem,
            grf_enum_flags: u32,
            grf_root_style: u32,
            pif: ?*IShellItemFilter,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveRoot: *const fn (
            self: *const INameSpaceTreeControl,
            psi_root: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllRoots: *const fn (
            self: *const INameSpaceTreeControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRootItems: *const fn (
            self: *const INameSpaceTreeControl,
            ppsia_root_items: ?*?*IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItemState: *const fn (
            self: *const INameSpaceTreeControl,
            psi: ?*IShellItem,
            nstcis_mask: u32,
            nstcis_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemState: *const fn (
            self: *const INameSpaceTreeControl,
            psi: ?*IShellItem,
            nstcis_mask: u32,
            pnstcis_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectedItems: *const fn (
            self: *const INameSpaceTreeControl,
            psia_items: ?*?*IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemCustomState: *const fn (
            self: *const INameSpaceTreeControl,
            psi: ?*IShellItem,
            pi_state_number: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItemCustomState: *const fn (
            self: *const INameSpaceTreeControl,
            psi: ?*IShellItem,
            i_state_number: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnsureItemVisible: *const fn (
            self: *const INameSpaceTreeControl,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTheme: *const fn (
            self: *const INameSpaceTreeControl,
            psz_theme: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextItem: *const fn (
            self: *const INameSpaceTreeControl,
            psi: ?*IShellItem,
            nstcgi: NSTCGNI,
            ppsi_next: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HitTest: *const fn (
            self: *const INameSpaceTreeControl,
            ppt: ?*POINT,
            ppsi_out: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemRect: *const fn (
            self: *const INameSpaceTreeControl,
            psi: ?*IShellItem,
            prect: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CollapseAll: *const fn (
            self: *const INameSpaceTreeControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, hwnd_parent_: ?HWND, prc_: ?*RECT, nscts_flags_: u32) HRESULT {
                return @as(*const INameSpaceTreeControl.VTable, @ptrCast(self.vtable)).Initialize(@as(*const INameSpaceTreeControl, @ptrCast(self)), hwnd_parent_, prc_, nscts_flags_);
            }
            pub inline fn treeAdvise(self: *const T, punk_: ?*IUnknown, pdw_cookie_: ?*u32) HRESULT {
                return @as(*const INameSpaceTreeControl.VTable, @ptrCast(self.vtable)).TreeAdvise(@as(*const INameSpaceTreeControl, @ptrCast(self)), punk_, pdw_cookie_);
            }
            pub inline fn treeUnadvise(self: *const T, dw_cookie_: u32) HRESULT {
                return @as(*const INameSpaceTreeControl.VTable, @ptrCast(self.vtable)).TreeUnadvise(@as(*const INameSpaceTreeControl, @ptrCast(self)), dw_cookie_);
            }
            pub inline fn appendRoot(self: *const T, psi_root_: ?*IShellItem, grf_enum_flags_: u32, grf_root_style_: u32, pif_: ?*IShellItemFilter) HRESULT {
                return @as(*const INameSpaceTreeControl.VTable, @ptrCast(self.vtable)).AppendRoot(@as(*const INameSpaceTreeControl, @ptrCast(self)), psi_root_, grf_enum_flags_, grf_root_style_, pif_);
            }
            pub inline fn insertRoot(self: *const T, i_index_: i32, psi_root_: ?*IShellItem, grf_enum_flags_: u32, grf_root_style_: u32, pif_: ?*IShellItemFilter) HRESULT {
                return @as(*const INameSpaceTreeControl.VTable, @ptrCast(self.vtable)).InsertRoot(@as(*const INameSpaceTreeControl, @ptrCast(self)), i_index_, psi_root_, grf_enum_flags_, grf_root_style_, pif_);
            }
            pub inline fn removeRoot(self: *const T, psi_root_: ?*IShellItem) HRESULT {
                return @as(*const INameSpaceTreeControl.VTable, @ptrCast(self.vtable)).RemoveRoot(@as(*const INameSpaceTreeControl, @ptrCast(self)), psi_root_);
            }
            pub inline fn removeAllRoots(self: *const T) HRESULT {
                return @as(*const INameSpaceTreeControl.VTable, @ptrCast(self.vtable)).RemoveAllRoots(@as(*const INameSpaceTreeControl, @ptrCast(self)));
            }
            pub inline fn getRootItems(self: *const T, ppsia_root_items_: ?*?*IShellItemArray) HRESULT {
                return @as(*const INameSpaceTreeControl.VTable, @ptrCast(self.vtable)).GetRootItems(@as(*const INameSpaceTreeControl, @ptrCast(self)), ppsia_root_items_);
            }
            pub inline fn setItemState(self: *const T, psi_: ?*IShellItem, nstcis_mask_: u32, nstcis_flags_: u32) HRESULT {
                return @as(*const INameSpaceTreeControl.VTable, @ptrCast(self.vtable)).SetItemState(@as(*const INameSpaceTreeControl, @ptrCast(self)), psi_, nstcis_mask_, nstcis_flags_);
            }
            pub inline fn getItemState(self: *const T, psi_: ?*IShellItem, nstcis_mask_: u32, pnstcis_flags_: ?*u32) HRESULT {
                return @as(*const INameSpaceTreeControl.VTable, @ptrCast(self.vtable)).GetItemState(@as(*const INameSpaceTreeControl, @ptrCast(self)), psi_, nstcis_mask_, pnstcis_flags_);
            }
            pub inline fn getSelectedItems(self: *const T, psia_items_: ?*?*IShellItemArray) HRESULT {
                return @as(*const INameSpaceTreeControl.VTable, @ptrCast(self.vtable)).GetSelectedItems(@as(*const INameSpaceTreeControl, @ptrCast(self)), psia_items_);
            }
            pub inline fn getItemCustomState(self: *const T, psi_: ?*IShellItem, pi_state_number_: ?*i32) HRESULT {
                return @as(*const INameSpaceTreeControl.VTable, @ptrCast(self.vtable)).GetItemCustomState(@as(*const INameSpaceTreeControl, @ptrCast(self)), psi_, pi_state_number_);
            }
            pub inline fn setItemCustomState(self: *const T, psi_: ?*IShellItem, i_state_number_: i32) HRESULT {
                return @as(*const INameSpaceTreeControl.VTable, @ptrCast(self.vtable)).SetItemCustomState(@as(*const INameSpaceTreeControl, @ptrCast(self)), psi_, i_state_number_);
            }
            pub inline fn ensureItemVisible(self: *const T, psi_: ?*IShellItem) HRESULT {
                return @as(*const INameSpaceTreeControl.VTable, @ptrCast(self.vtable)).EnsureItemVisible(@as(*const INameSpaceTreeControl, @ptrCast(self)), psi_);
            }
            pub inline fn setTheme(self: *const T, psz_theme_: ?[*:0]const u16) HRESULT {
                return @as(*const INameSpaceTreeControl.VTable, @ptrCast(self.vtable)).SetTheme(@as(*const INameSpaceTreeControl, @ptrCast(self)), psz_theme_);
            }
            pub inline fn getNextItem(self: *const T, psi_: ?*IShellItem, nstcgi_: NSTCGNI, ppsi_next_: ?*?*IShellItem) HRESULT {
                return @as(*const INameSpaceTreeControl.VTable, @ptrCast(self.vtable)).GetNextItem(@as(*const INameSpaceTreeControl, @ptrCast(self)), psi_, nstcgi_, ppsi_next_);
            }
            pub inline fn hitTest(self: *const T, ppt_: ?*POINT, ppsi_out_: ?*?*IShellItem) HRESULT {
                return @as(*const INameSpaceTreeControl.VTable, @ptrCast(self.vtable)).HitTest(@as(*const INameSpaceTreeControl, @ptrCast(self)), ppt_, ppsi_out_);
            }
            pub inline fn getItemRect(self: *const T, psi_: ?*IShellItem, prect_: ?*RECT) HRESULT {
                return @as(*const INameSpaceTreeControl.VTable, @ptrCast(self.vtable)).GetItemRect(@as(*const INameSpaceTreeControl, @ptrCast(self)), psi_, prect_);
            }
            pub inline fn collapseAll(self: *const T) HRESULT {
                return @as(*const INameSpaceTreeControl.VTable, @ptrCast(self.vtable)).CollapseAll(@as(*const INameSpaceTreeControl, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const NSTCFOLDERCAPABILITIES = enum(i32) {
    NONE = 0,
    PINNEDITEMFILTERING = 1,
    DELAY_REGISTER_NOTIFY = 2,
};
pub const NSTCFC_NONE = NSTCFOLDERCAPABILITIES.NONE;
pub const NSTCFC_PINNEDITEMFILTERING = NSTCFOLDERCAPABILITIES.PINNEDITEMFILTERING;
pub const NSTCFC_DELAY_REGISTER_NOTIFY = NSTCFOLDERCAPABILITIES.DELAY_REGISTER_NOTIFY;

// TODO: this type is limited to platform 'windows6.1'
const IID_INameSpaceTreeControlFolderCapabilities_Value = Guid.initString("e9701183-e6b3-4ff2-8568-813615fec7be");
pub const IID_INameSpaceTreeControlFolderCapabilities = &IID_INameSpaceTreeControlFolderCapabilities_Value;
pub const INameSpaceTreeControlFolderCapabilities = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFolderCapabilities: *const fn (
            self: *const INameSpaceTreeControlFolderCapabilities,
            nfc_mask: NSTCFOLDERCAPABILITIES,
            pnfc_value: ?*NSTCFOLDERCAPABILITIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFolderCapabilities(self: *const T, nfc_mask_: NSTCFOLDERCAPABILITIES, pnfc_value_: ?*NSTCFOLDERCAPABILITIES) HRESULT {
                return @as(*const INameSpaceTreeControlFolderCapabilities.VTable, @ptrCast(self.vtable)).GetFolderCapabilities(@as(*const INameSpaceTreeControlFolderCapabilities, @ptrCast(self)), nfc_mask_, pnfc_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPreviewHandler_Value = Guid.initString("8895b1c6-b41f-4c1c-a562-0d564250836f");
pub const IID_IPreviewHandler = &IID_IPreviewHandler_Value;
pub const IPreviewHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetWindow: *const fn (
            self: *const IPreviewHandler,
            hwnd: ?HWND,
            prc: ?*const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRect: *const fn (
            self: *const IPreviewHandler,
            prc: ?*const RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoPreview: *const fn (
            self: *const IPreviewHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unload: *const fn (
            self: *const IPreviewHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFocus: *const fn (
            self: *const IPreviewHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryFocus: *const fn (
            self: *const IPreviewHandler,
            phwnd: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateAccelerator: *const fn (
            self: *const IPreviewHandler,
            pmsg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setWindow(self: *const T, hwnd_: ?HWND, prc_: ?*const RECT) HRESULT {
                return @as(*const IPreviewHandler.VTable, @ptrCast(self.vtable)).SetWindow(@as(*const IPreviewHandler, @ptrCast(self)), hwnd_, prc_);
            }
            pub inline fn setRect(self: *const T, prc_: ?*const RECT) HRESULT {
                return @as(*const IPreviewHandler.VTable, @ptrCast(self.vtable)).SetRect(@as(*const IPreviewHandler, @ptrCast(self)), prc_);
            }
            pub inline fn doPreview(self: *const T) HRESULT {
                return @as(*const IPreviewHandler.VTable, @ptrCast(self.vtable)).DoPreview(@as(*const IPreviewHandler, @ptrCast(self)));
            }
            pub inline fn unload(self: *const T) HRESULT {
                return @as(*const IPreviewHandler.VTable, @ptrCast(self.vtable)).Unload(@as(*const IPreviewHandler, @ptrCast(self)));
            }
            pub inline fn setFocus(self: *const T) HRESULT {
                return @as(*const IPreviewHandler.VTable, @ptrCast(self.vtable)).SetFocus(@as(*const IPreviewHandler, @ptrCast(self)));
            }
            pub inline fn queryFocus(self: *const T, phwnd_: ?*?HWND) HRESULT {
                return @as(*const IPreviewHandler.VTable, @ptrCast(self.vtable)).QueryFocus(@as(*const IPreviewHandler, @ptrCast(self)), phwnd_);
            }
            pub inline fn translateAccelerator(self: *const T, pmsg_: ?*MSG) HRESULT {
                return @as(*const IPreviewHandler.VTable, @ptrCast(self.vtable)).TranslateAccelerator(@as(*const IPreviewHandler, @ptrCast(self)), pmsg_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PREVIEWHANDLERFRAMEINFO = extern struct {
    haccel: ?HACCEL,
    cAccelEntries: u32,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPreviewHandlerFrame_Value = Guid.initString("fec87aaf-35f9-447a-adb7-20234491401a");
pub const IID_IPreviewHandlerFrame = &IID_IPreviewHandlerFrame_Value;
pub const IPreviewHandlerFrame = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetWindowContext: *const fn (
            self: *const IPreviewHandlerFrame,
            pinfo: ?*PREVIEWHANDLERFRAMEINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TranslateAccelerator: *const fn (
            self: *const IPreviewHandlerFrame,
            pmsg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getWindowContext(self: *const T, pinfo_: ?*PREVIEWHANDLERFRAMEINFO) HRESULT {
                return @as(*const IPreviewHandlerFrame.VTable, @ptrCast(self.vtable)).GetWindowContext(@as(*const IPreviewHandlerFrame, @ptrCast(self)), pinfo_);
            }
            pub inline fn translateAccelerator(self: *const T, pmsg_: ?*MSG) HRESULT {
                return @as(*const IPreviewHandlerFrame.VTable, @ptrCast(self.vtable)).TranslateAccelerator(@as(*const IPreviewHandlerFrame, @ptrCast(self)), pmsg_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const _EXPLORERPANESTATE = enum(i32) {
    DONTCARE = 0,
    DEFAULT_ON = 1,
    DEFAULT_OFF = 2,
    STATEMASK = 65535,
    INITIALSTATE = 65536,
    FORCE = 131072,
};
pub const EPS_DONTCARE = _EXPLORERPANESTATE.DONTCARE;
pub const EPS_DEFAULT_ON = _EXPLORERPANESTATE.DEFAULT_ON;
pub const EPS_DEFAULT_OFF = _EXPLORERPANESTATE.DEFAULT_OFF;
pub const EPS_STATEMASK = _EXPLORERPANESTATE.STATEMASK;
pub const EPS_INITIALSTATE = _EXPLORERPANESTATE.INITIALSTATE;
pub const EPS_FORCE = _EXPLORERPANESTATE.FORCE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IExplorerPaneVisibility_Value = Guid.initString("e07010ec-bc17-44c0-97b0-46c7c95b9edc");
pub const IID_IExplorerPaneVisibility = &IID_IExplorerPaneVisibility_Value;
pub const IExplorerPaneVisibility = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPaneState: *const fn (
            self: *const IExplorerPaneVisibility,
            ep: ?*const Guid,
            peps: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPaneState(self: *const T, ep_: ?*const Guid, peps_: ?*u32) HRESULT {
                return @as(*const IExplorerPaneVisibility.VTable, @ptrCast(self.vtable)).GetPaneState(@as(*const IExplorerPaneVisibility, @ptrCast(self)), ep_, peps_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IContextMenuCB_Value = Guid.initString("3409e930-5a39-11d1-83fa-00a0c90dc849");
pub const IID_IContextMenuCB = &IID_IContextMenuCB_Value;
pub const IContextMenuCB = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CallBack: *const fn (
            self: *const IContextMenuCB,
            psf: ?*IShellFolder,
            hwnd_owner: ?HWND,
            pdtobj: ?*IDataObject,
            u_msg: u32,
            w_param: WPARAM,
            l_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn callBack(self: *const T, psf_: ?*IShellFolder, hwnd_owner_: ?HWND, pdtobj_: ?*IDataObject, u_msg_: u32, w_param_: WPARAM, l_param_: LPARAM) HRESULT {
                return @as(*const IContextMenuCB.VTable, @ptrCast(self.vtable)).CallBack(@as(*const IContextMenuCB, @ptrCast(self)), psf_, hwnd_owner_, pdtobj_, u_msg_, w_param_, l_param_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDefaultExtractIconInit_Value = Guid.initString("41ded17d-d6b3-4261-997d-88c60e4b1d58");
pub const IID_IDefaultExtractIconInit = &IID_IDefaultExtractIconInit_Value;
pub const IDefaultExtractIconInit = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFlags: *const fn (
            self: *const IDefaultExtractIconInit,
            u_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetKey: *const fn (
            self: *const IDefaultExtractIconInit,
            hkey: ?HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNormalIcon: *const fn (
            self: *const IDefaultExtractIconInit,
            psz_file: ?[*:0]const u16,
            i_icon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOpenIcon: *const fn (
            self: *const IDefaultExtractIconInit,
            psz_file: ?[*:0]const u16,
            i_icon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetShortcutIcon: *const fn (
            self: *const IDefaultExtractIconInit,
            psz_file: ?[*:0]const u16,
            i_icon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultIcon: *const fn (
            self: *const IDefaultExtractIconInit,
            psz_file: ?[*:0]const u16,
            i_icon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setFlags(self: *const T, u_flags_: u32) HRESULT {
                return @as(*const IDefaultExtractIconInit.VTable, @ptrCast(self.vtable)).SetFlags(@as(*const IDefaultExtractIconInit, @ptrCast(self)), u_flags_);
            }
            pub inline fn setKey(self: *const T, hkey_: ?HKEY) HRESULT {
                return @as(*const IDefaultExtractIconInit.VTable, @ptrCast(self.vtable)).SetKey(@as(*const IDefaultExtractIconInit, @ptrCast(self)), hkey_);
            }
            pub inline fn setNormalIcon(self: *const T, psz_file_: ?[*:0]const u16, i_icon_: i32) HRESULT {
                return @as(*const IDefaultExtractIconInit.VTable, @ptrCast(self.vtable)).SetNormalIcon(@as(*const IDefaultExtractIconInit, @ptrCast(self)), psz_file_, i_icon_);
            }
            pub inline fn setOpenIcon(self: *const T, psz_file_: ?[*:0]const u16, i_icon_: i32) HRESULT {
                return @as(*const IDefaultExtractIconInit.VTable, @ptrCast(self.vtable)).SetOpenIcon(@as(*const IDefaultExtractIconInit, @ptrCast(self)), psz_file_, i_icon_);
            }
            pub inline fn setShortcutIcon(self: *const T, psz_file_: ?[*:0]const u16, i_icon_: i32) HRESULT {
                return @as(*const IDefaultExtractIconInit.VTable, @ptrCast(self.vtable)).SetShortcutIcon(@as(*const IDefaultExtractIconInit, @ptrCast(self)), psz_file_, i_icon_);
            }
            pub inline fn setDefaultIcon(self: *const T, psz_file_: ?[*:0]const u16, i_icon_: i32) HRESULT {
                return @as(*const IDefaultExtractIconInit.VTable, @ptrCast(self.vtable)).SetDefaultIcon(@as(*const IDefaultExtractIconInit, @ptrCast(self)), psz_file_, i_icon_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const _EXPCMDSTATE = enum(i32) {
    ENABLED = 0,
    DISABLED = 1,
    HIDDEN = 2,
    CHECKBOX = 4,
    CHECKED = 8,
    RADIOCHECK = 16,
};
pub const ECS_ENABLED = _EXPCMDSTATE.ENABLED;
pub const ECS_DISABLED = _EXPCMDSTATE.DISABLED;
pub const ECS_HIDDEN = _EXPCMDSTATE.HIDDEN;
pub const ECS_CHECKBOX = _EXPCMDSTATE.CHECKBOX;
pub const ECS_CHECKED = _EXPCMDSTATE.CHECKED;
pub const ECS_RADIOCHECK = _EXPCMDSTATE.RADIOCHECK;

pub const _EXPCMDFLAGS = enum(i32) {
    DEFAULT = 0,
    HASSUBCOMMANDS = 1,
    HASSPLITBUTTON = 2,
    HIDELABEL = 4,
    ISSEPARATOR = 8,
    HASLUASHIELD = 16,
    SEPARATORBEFORE = 32,
    SEPARATORAFTER = 64,
    ISDROPDOWN = 128,
    TOGGLEABLE = 256,
    AUTOMENUICONS = 512,
};
pub const ECF_DEFAULT = _EXPCMDFLAGS.DEFAULT;
pub const ECF_HASSUBCOMMANDS = _EXPCMDFLAGS.HASSUBCOMMANDS;
pub const ECF_HASSPLITBUTTON = _EXPCMDFLAGS.HASSPLITBUTTON;
pub const ECF_HIDELABEL = _EXPCMDFLAGS.HIDELABEL;
pub const ECF_ISSEPARATOR = _EXPCMDFLAGS.ISSEPARATOR;
pub const ECF_HASLUASHIELD = _EXPCMDFLAGS.HASLUASHIELD;
pub const ECF_SEPARATORBEFORE = _EXPCMDFLAGS.SEPARATORBEFORE;
pub const ECF_SEPARATORAFTER = _EXPCMDFLAGS.SEPARATORAFTER;
pub const ECF_ISDROPDOWN = _EXPCMDFLAGS.ISDROPDOWN;
pub const ECF_TOGGLEABLE = _EXPCMDFLAGS.TOGGLEABLE;
pub const ECF_AUTOMENUICONS = _EXPCMDFLAGS.AUTOMENUICONS;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IExplorerCommand_Value = Guid.initString("a08ce4d0-fa25-44ab-b57c-c7b1c323e0b9");
pub const IID_IExplorerCommand = &IID_IExplorerCommand_Value;
pub const IExplorerCommand = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTitle: *const fn (
            self: *const IExplorerCommand,
            psi_item_array: ?*IShellItemArray,
            ppsz_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIcon: *const fn (
            self: *const IExplorerCommand,
            psi_item_array: ?*IShellItemArray,
            ppsz_icon: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetToolTip: *const fn (
            self: *const IExplorerCommand,
            psi_item_array: ?*IShellItemArray,
            ppsz_infotip: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCanonicalName: *const fn (
            self: *const IExplorerCommand,
            pguid_command_name: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetState: *const fn (
            self: *const IExplorerCommand,
            psi_item_array: ?*IShellItemArray,
            f_ok_to_be_slow: BOOL,
            p_cmd_state: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Invoke: *const fn (
            self: *const IExplorerCommand,
            psi_item_array: ?*IShellItemArray,
            pbc: ?*IBindCtx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn (
            self: *const IExplorerCommand,
            p_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumSubCommands: *const fn (
            self: *const IExplorerCommand,
            pp_enum: ?*?*IEnumExplorerCommand,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getTitle(self: *const T, psi_item_array_: ?*IShellItemArray, ppsz_name_: ?*?PWSTR) HRESULT {
                return @as(*const IExplorerCommand.VTable, @ptrCast(self.vtable)).GetTitle(@as(*const IExplorerCommand, @ptrCast(self)), psi_item_array_, ppsz_name_);
            }
            pub inline fn getIcon(self: *const T, psi_item_array_: ?*IShellItemArray, ppsz_icon_: ?*?PWSTR) HRESULT {
                return @as(*const IExplorerCommand.VTable, @ptrCast(self.vtable)).GetIcon(@as(*const IExplorerCommand, @ptrCast(self)), psi_item_array_, ppsz_icon_);
            }
            pub inline fn getToolTip(self: *const T, psi_item_array_: ?*IShellItemArray, ppsz_infotip_: ?*?PWSTR) HRESULT {
                return @as(*const IExplorerCommand.VTable, @ptrCast(self.vtable)).GetToolTip(@as(*const IExplorerCommand, @ptrCast(self)), psi_item_array_, ppsz_infotip_);
            }
            pub inline fn getCanonicalName(self: *const T, pguid_command_name_: ?*Guid) HRESULT {
                return @as(*const IExplorerCommand.VTable, @ptrCast(self.vtable)).GetCanonicalName(@as(*const IExplorerCommand, @ptrCast(self)), pguid_command_name_);
            }
            pub inline fn getState(self: *const T, psi_item_array_: ?*IShellItemArray, f_ok_to_be_slow_: BOOL, p_cmd_state_: ?*u32) HRESULT {
                return @as(*const IExplorerCommand.VTable, @ptrCast(self.vtable)).GetState(@as(*const IExplorerCommand, @ptrCast(self)), psi_item_array_, f_ok_to_be_slow_, p_cmd_state_);
            }
            pub inline fn invoke(self: *const T, psi_item_array_: ?*IShellItemArray, pbc_: ?*IBindCtx) HRESULT {
                return @as(*const IExplorerCommand.VTable, @ptrCast(self.vtable)).Invoke(@as(*const IExplorerCommand, @ptrCast(self)), psi_item_array_, pbc_);
            }
            pub inline fn getFlags(self: *const T, p_flags_: ?*u32) HRESULT {
                return @as(*const IExplorerCommand.VTable, @ptrCast(self.vtable)).GetFlags(@as(*const IExplorerCommand, @ptrCast(self)), p_flags_);
            }
            pub inline fn enumSubCommands(self: *const T, pp_enum_: ?*?*IEnumExplorerCommand) HRESULT {
                return @as(*const IExplorerCommand.VTable, @ptrCast(self.vtable)).EnumSubCommands(@as(*const IExplorerCommand, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IExplorerCommandState_Value = Guid.initString("bddacb60-7657-47ae-8445-d23e1acf82ae");
pub const IID_IExplorerCommandState = &IID_IExplorerCommandState_Value;
pub const IExplorerCommandState = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetState: *const fn (
            self: *const IExplorerCommandState,
            psi_item_array: ?*IShellItemArray,
            f_ok_to_be_slow: BOOL,
            p_cmd_state: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getState(self: *const T, psi_item_array_: ?*IShellItemArray, f_ok_to_be_slow_: BOOL, p_cmd_state_: ?*u32) HRESULT {
                return @as(*const IExplorerCommandState.VTable, @ptrCast(self.vtable)).GetState(@as(*const IExplorerCommandState, @ptrCast(self)), psi_item_array_, f_ok_to_be_slow_, p_cmd_state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IInitializeCommand_Value = Guid.initString("85075acf-231f-40ea-9610-d26b7b58f638");
pub const IID_IInitializeCommand = &IID_IInitializeCommand_Value;
pub const IInitializeCommand = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IInitializeCommand,
            psz_command_name: ?[*:0]const u16,
            ppb: ?*IPropertyBag,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, psz_command_name_: ?[*:0]const u16, ppb_: ?*IPropertyBag) HRESULT {
                return @as(*const IInitializeCommand.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IInitializeCommand, @ptrCast(self)), psz_command_name_, ppb_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumExplorerCommand_Value = Guid.initString("a88826f8-186f-4987-aade-ea0cef8fbfe8");
pub const IID_IEnumExplorerCommand = &IID_IEnumExplorerCommand_Value;
pub const IEnumExplorerCommand = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumExplorerCommand,
            celt: u32,
            p_u_i_command: [*]?*IExplorerCommand,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumExplorerCommand,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumExplorerCommand,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumExplorerCommand,
            ppenum: ?*?*IEnumExplorerCommand,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, p_u_i_command_: [*]?*IExplorerCommand, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumExplorerCommand.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumExplorerCommand, @ptrCast(self)), celt_, p_u_i_command_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumExplorerCommand.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumExplorerCommand, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumExplorerCommand.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumExplorerCommand, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumExplorerCommand) HRESULT {
                return @as(*const IEnumExplorerCommand.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumExplorerCommand, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IExplorerCommandProvider_Value = Guid.initString("64961751-0835-43c0-8ffe-d57686530e64");
pub const IID_IExplorerCommandProvider = &IID_IExplorerCommandProvider_Value;
pub const IExplorerCommandProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCommands: *const fn (
            self: *const IExplorerCommandProvider,
            punk_site: ?*IUnknown,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCommand: *const fn (
            self: *const IExplorerCommandProvider,
            rguid_command_id: ?*const Guid,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCommands(self: *const T, punk_site_: ?*IUnknown, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IExplorerCommandProvider.VTable, @ptrCast(self.vtable)).GetCommands(@as(*const IExplorerCommandProvider, @ptrCast(self)), punk_site_, riid_, ppv_);
            }
            pub inline fn getCommand(self: *const T, rguid_command_id_: ?*const Guid, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IExplorerCommandProvider.VTable, @ptrCast(self.vtable)).GetCommand(@as(*const IExplorerCommandProvider, @ptrCast(self)), rguid_command_id_, riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CPVIEW = enum(i32) {
    CLASSIC = 0,
    // ALLITEMS = 0, this enum value conflicts with CLASSIC
    CATEGORY = 1,
    // HOME = 1, this enum value conflicts with CATEGORY
};
pub const CPVIEW_CLASSIC = CPVIEW.CLASSIC;
pub const CPVIEW_ALLITEMS = CPVIEW.CLASSIC;
pub const CPVIEW_CATEGORY = CPVIEW.CATEGORY;
pub const CPVIEW_HOME = CPVIEW.CATEGORY;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IOpenControlPanel_Value = Guid.initString("d11ad862-66de-4df4-bf6c-1f5621996af1");
pub const IID_IOpenControlPanel = &IID_IOpenControlPanel_Value;
pub const IOpenControlPanel = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Open: *const fn (
            self: *const IOpenControlPanel,
            psz_name: ?[*:0]const u16,
            psz_page: ?[*:0]const u16,
            punk_site: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPath: *const fn (
            self: *const IOpenControlPanel,
            psz_name: ?[*:0]const u16,
            psz_path: [*:0]u16,
            cch_path: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentView: *const fn (
            self: *const IOpenControlPanel,
            p_view: ?*CPVIEW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn open(self: *const T, psz_name_: ?[*:0]const u16, psz_page_: ?[*:0]const u16, punk_site_: ?*IUnknown) HRESULT {
                return @as(*const IOpenControlPanel.VTable, @ptrCast(self.vtable)).Open(@as(*const IOpenControlPanel, @ptrCast(self)), psz_name_, psz_page_, punk_site_);
            }
            pub inline fn getPath(self: *const T, psz_name_: ?[*:0]const u16, psz_path_: [*:0]u16, cch_path_: u32) HRESULT {
                return @as(*const IOpenControlPanel.VTable, @ptrCast(self.vtable)).GetPath(@as(*const IOpenControlPanel, @ptrCast(self)), psz_name_, psz_path_, cch_path_);
            }
            pub inline fn getCurrentView(self: *const T, p_view_: ?*CPVIEW) HRESULT {
                return @as(*const IOpenControlPanel.VTable, @ptrCast(self.vtable)).GetCurrentView(@as(*const IOpenControlPanel, @ptrCast(self)), p_view_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IFileSystemBindData_Value = Guid.initString("01e18d10-4d8b-11d2-855d-006008059367");
pub const IID_IFileSystemBindData = &IID_IFileSystemBindData_Value;
pub const IFileSystemBindData = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFindData: *const fn (
            self: *const IFileSystemBindData,
            pfd: ?*const WIN32_FIND_DATAW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFindData: *const fn (
            self: *const IFileSystemBindData,
            pfd: ?*WIN32_FIND_DATAW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setFindData(self: *const T, pfd_: ?*const WIN32_FIND_DATAW) HRESULT {
                return @as(*const IFileSystemBindData.VTable, @ptrCast(self.vtable)).SetFindData(@as(*const IFileSystemBindData, @ptrCast(self)), pfd_);
            }
            pub inline fn getFindData(self: *const T, pfd_: ?*WIN32_FIND_DATAW) HRESULT {
                return @as(*const IFileSystemBindData.VTable, @ptrCast(self.vtable)).GetFindData(@as(*const IFileSystemBindData, @ptrCast(self)), pfd_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileSystemBindData2_Value = Guid.initString("3acf075f-71db-4afa-81f0-3fc4fdf2a5b8");
pub const IID_IFileSystemBindData2 = &IID_IFileSystemBindData2_Value;
pub const IFileSystemBindData2 = extern struct {
    pub const VTable = extern struct {
        base: IFileSystemBindData.VTable,
        SetFileID: *const fn (
            self: *const IFileSystemBindData2,
            li_file_i_d: LARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFileID: *const fn (
            self: *const IFileSystemBindData2,
            pli_file_i_d: ?*LARGE_INTEGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetJunctionCLSID: *const fn (
            self: *const IFileSystemBindData2,
            clsid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetJunctionCLSID: *const fn (
            self: *const IFileSystemBindData2,
            pclsid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFileSystemBindData.MethodMixin(T);
            pub inline fn setFileID(self: *const T, li_file_i_d_: LARGE_INTEGER) HRESULT {
                return @as(*const IFileSystemBindData2.VTable, @ptrCast(self.vtable)).SetFileID(@as(*const IFileSystemBindData2, @ptrCast(self)), li_file_i_d_);
            }
            pub inline fn getFileID(self: *const T, pli_file_i_d_: ?*LARGE_INTEGER) HRESULT {
                return @as(*const IFileSystemBindData2.VTable, @ptrCast(self.vtable)).GetFileID(@as(*const IFileSystemBindData2, @ptrCast(self)), pli_file_i_d_);
            }
            pub inline fn setJunctionCLSID(self: *const T, clsid_: ?*const Guid) HRESULT {
                return @as(*const IFileSystemBindData2.VTable, @ptrCast(self.vtable)).SetJunctionCLSID(@as(*const IFileSystemBindData2, @ptrCast(self)), clsid_);
            }
            pub inline fn getJunctionCLSID(self: *const T, pclsid_: ?*Guid) HRESULT {
                return @as(*const IFileSystemBindData2.VTable, @ptrCast(self.vtable)).GetJunctionCLSID(@as(*const IFileSystemBindData2, @ptrCast(self)), pclsid_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const KNOWNDESTCATEGORY = enum(i32) {
    FREQUENT = 1,
    RECENT = 2,
};
pub const KDC_FREQUENT = KNOWNDESTCATEGORY.FREQUENT;
pub const KDC_RECENT = KNOWNDESTCATEGORY.RECENT;

// TODO: this type is limited to platform 'windows6.1'
const IID_ICustomDestinationList_Value = Guid.initString("6332debf-87b5-4670-90c0-5e57b408a49e");
pub const IID_ICustomDestinationList = &IID_ICustomDestinationList_Value;
pub const ICustomDestinationList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAppID: *const fn (
            self: *const ICustomDestinationList,
            psz_app_i_d: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeginList: *const fn (
            self: *const ICustomDestinationList,
            pc_min_slots: ?*u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendCategory: *const fn (
            self: *const ICustomDestinationList,
            psz_category: ?[*:0]const u16,
            poa: ?*IObjectArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendKnownCategory: *const fn (
            self: *const ICustomDestinationList,
            category: KNOWNDESTCATEGORY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddUserTasks: *const fn (
            self: *const ICustomDestinationList,
            poa: ?*IObjectArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitList: *const fn (
            self: *const ICustomDestinationList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRemovedDestinations: *const fn (
            self: *const ICustomDestinationList,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteList: *const fn (
            self: *const ICustomDestinationList,
            psz_app_i_d: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AbortList: *const fn (
            self: *const ICustomDestinationList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAppID(self: *const T, psz_app_i_d_: ?[*:0]const u16) HRESULT {
                return @as(*const ICustomDestinationList.VTable, @ptrCast(self.vtable)).SetAppID(@as(*const ICustomDestinationList, @ptrCast(self)), psz_app_i_d_);
            }
            pub inline fn beginList(self: *const T, pc_min_slots_: ?*u32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const ICustomDestinationList.VTable, @ptrCast(self.vtable)).BeginList(@as(*const ICustomDestinationList, @ptrCast(self)), pc_min_slots_, riid_, ppv_);
            }
            pub inline fn appendCategory(self: *const T, psz_category_: ?[*:0]const u16, poa_: ?*IObjectArray) HRESULT {
                return @as(*const ICustomDestinationList.VTable, @ptrCast(self.vtable)).AppendCategory(@as(*const ICustomDestinationList, @ptrCast(self)), psz_category_, poa_);
            }
            pub inline fn appendKnownCategory(self: *const T, category_: KNOWNDESTCATEGORY) HRESULT {
                return @as(*const ICustomDestinationList.VTable, @ptrCast(self.vtable)).AppendKnownCategory(@as(*const ICustomDestinationList, @ptrCast(self)), category_);
            }
            pub inline fn addUserTasks(self: *const T, poa_: ?*IObjectArray) HRESULT {
                return @as(*const ICustomDestinationList.VTable, @ptrCast(self.vtable)).AddUserTasks(@as(*const ICustomDestinationList, @ptrCast(self)), poa_);
            }
            pub inline fn commitList(self: *const T) HRESULT {
                return @as(*const ICustomDestinationList.VTable, @ptrCast(self.vtable)).CommitList(@as(*const ICustomDestinationList, @ptrCast(self)));
            }
            pub inline fn getRemovedDestinations(self: *const T, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const ICustomDestinationList.VTable, @ptrCast(self.vtable)).GetRemovedDestinations(@as(*const ICustomDestinationList, @ptrCast(self)), riid_, ppv_);
            }
            pub inline fn deleteList(self: *const T, psz_app_i_d_: ?[*:0]const u16) HRESULT {
                return @as(*const ICustomDestinationList.VTable, @ptrCast(self.vtable)).DeleteList(@as(*const ICustomDestinationList, @ptrCast(self)), psz_app_i_d_);
            }
            pub inline fn abortList(self: *const T) HRESULT {
                return @as(*const ICustomDestinationList.VTable, @ptrCast(self.vtable)).AbortList(@as(*const ICustomDestinationList, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IApplicationDestinations_Value = Guid.initString("12337d35-94c6-48a0-bce7-6a9c69d4d600");
pub const IID_IApplicationDestinations = &IID_IApplicationDestinations_Value;
pub const IApplicationDestinations = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAppID: *const fn (
            self: *const IApplicationDestinations,
            psz_app_i_d: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveDestination: *const fn (
            self: *const IApplicationDestinations,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAllDestinations: *const fn (
            self: *const IApplicationDestinations,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAppID(self: *const T, psz_app_i_d_: ?[*:0]const u16) HRESULT {
                return @as(*const IApplicationDestinations.VTable, @ptrCast(self.vtable)).SetAppID(@as(*const IApplicationDestinations, @ptrCast(self)), psz_app_i_d_);
            }
            pub inline fn removeDestination(self: *const T, punk_: ?*IUnknown) HRESULT {
                return @as(*const IApplicationDestinations.VTable, @ptrCast(self.vtable)).RemoveDestination(@as(*const IApplicationDestinations, @ptrCast(self)), punk_);
            }
            pub inline fn removeAllDestinations(self: *const T) HRESULT {
                return @as(*const IApplicationDestinations.VTable, @ptrCast(self.vtable)).RemoveAllDestinations(@as(*const IApplicationDestinations, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const APPDOCLISTTYPE = enum(i32) {
    RECENT = 0,
    FREQUENT = 1,
};
pub const ADLT_RECENT = APPDOCLISTTYPE.RECENT;
pub const ADLT_FREQUENT = APPDOCLISTTYPE.FREQUENT;

// TODO: this type is limited to platform 'windows6.1'
const IID_IApplicationDocumentLists_Value = Guid.initString("3c594f9f-9f30-47a1-979a-c9e83d3d0a06");
pub const IID_IApplicationDocumentLists = &IID_IApplicationDocumentLists_Value;
pub const IApplicationDocumentLists = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAppID: *const fn (
            self: *const IApplicationDocumentLists,
            psz_app_i_d: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetList: *const fn (
            self: *const IApplicationDocumentLists,
            listtype: APPDOCLISTTYPE,
            c_items_desired: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAppID(self: *const T, psz_app_i_d_: ?[*:0]const u16) HRESULT {
                return @as(*const IApplicationDocumentLists.VTable, @ptrCast(self.vtable)).SetAppID(@as(*const IApplicationDocumentLists, @ptrCast(self)), psz_app_i_d_);
            }
            pub inline fn getList(self: *const T, listtype_: APPDOCLISTTYPE, c_items_desired_: u32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IApplicationDocumentLists.VTable, @ptrCast(self.vtable)).GetList(@as(*const IApplicationDocumentLists, @ptrCast(self)), listtype_, c_items_desired_, riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IObjectWithAppUserModelID_Value = Guid.initString("36db0196-9665-46d1-9ba7-d3709eecf9ed");
pub const IID_IObjectWithAppUserModelID = &IID_IObjectWithAppUserModelID_Value;
pub const IObjectWithAppUserModelID = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAppID: *const fn (
            self: *const IObjectWithAppUserModelID,
            psz_app_i_d: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAppID: *const fn (
            self: *const IObjectWithAppUserModelID,
            ppsz_app_i_d: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAppID(self: *const T, psz_app_i_d_: ?[*:0]const u16) HRESULT {
                return @as(*const IObjectWithAppUserModelID.VTable, @ptrCast(self.vtable)).SetAppID(@as(*const IObjectWithAppUserModelID, @ptrCast(self)), psz_app_i_d_);
            }
            pub inline fn getAppID(self: *const T, ppsz_app_i_d_: ?*?PWSTR) HRESULT {
                return @as(*const IObjectWithAppUserModelID.VTable, @ptrCast(self.vtable)).GetAppID(@as(*const IObjectWithAppUserModelID, @ptrCast(self)), ppsz_app_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IObjectWithProgID_Value = Guid.initString("71e806fb-8dee-46fc-bf8c-7748a8a1ae13");
pub const IID_IObjectWithProgID = &IID_IObjectWithProgID_Value;
pub const IObjectWithProgID = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetProgID: *const fn (
            self: *const IObjectWithProgID,
            psz_prog_i_d: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProgID: *const fn (
            self: *const IObjectWithProgID,
            ppsz_prog_i_d: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setProgID(self: *const T, psz_prog_i_d_: ?[*:0]const u16) HRESULT {
                return @as(*const IObjectWithProgID.VTable, @ptrCast(self.vtable)).SetProgID(@as(*const IObjectWithProgID, @ptrCast(self)), psz_prog_i_d_);
            }
            pub inline fn getProgID(self: *const T, ppsz_prog_i_d_: ?*?PWSTR) HRESULT {
                return @as(*const IObjectWithProgID.VTable, @ptrCast(self.vtable)).GetProgID(@as(*const IObjectWithProgID, @ptrCast(self)), ppsz_prog_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IUpdateIDList_Value = Guid.initString("6589b6d2-5f8d-4b9e-b7e0-23cdd9717d8c");
pub const IID_IUpdateIDList = &IID_IUpdateIDList_Value;
pub const IUpdateIDList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Update: *const fn (
            self: *const IUpdateIDList,
            pbc: ?*IBindCtx,
            pidl_in: ?*ITEMIDLIST,
            ppidl_out: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn update(self: *const T, pbc_: ?*IBindCtx, pidl_in_: ?*ITEMIDLIST, ppidl_out_: ?*?*ITEMIDLIST) HRESULT {
                return @as(*const IUpdateIDList.VTable, @ptrCast(self.vtable)).Update(@as(*const IUpdateIDList, @ptrCast(self)), pbc_, pidl_in_, ppidl_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DESKTOP_SLIDESHOW_OPTIONS = enum(i32) {
    S = 1,
};
pub const DSO_SHUFFLEIMAGES = DESKTOP_SLIDESHOW_OPTIONS.S;

pub const DESKTOP_SLIDESHOW_STATE = enum(i32) {
    ENABLED = 1,
    SLIDESHOW = 2,
    DISABLED_BY_REMOTE_SESSION = 4,
};
pub const DSS_ENABLED = DESKTOP_SLIDESHOW_STATE.ENABLED;
pub const DSS_SLIDESHOW = DESKTOP_SLIDESHOW_STATE.SLIDESHOW;
pub const DSS_DISABLED_BY_REMOTE_SESSION = DESKTOP_SLIDESHOW_STATE.DISABLED_BY_REMOTE_SESSION;

pub const DESKTOP_SLIDESHOW_DIRECTION = enum(i32) {
    FORWARD = 0,
    BACKWARD = 1,
};
pub const DSD_FORWARD = DESKTOP_SLIDESHOW_DIRECTION.FORWARD;
pub const DSD_BACKWARD = DESKTOP_SLIDESHOW_DIRECTION.BACKWARD;

pub const DESKTOP_WALLPAPER_POSITION = enum(i32) {
    CENTER = 0,
    TILE = 1,
    STRETCH = 2,
    FIT = 3,
    FILL = 4,
    SPAN = 5,
};
pub const DWPOS_CENTER = DESKTOP_WALLPAPER_POSITION.CENTER;
pub const DWPOS_TILE = DESKTOP_WALLPAPER_POSITION.TILE;
pub const DWPOS_STRETCH = DESKTOP_WALLPAPER_POSITION.STRETCH;
pub const DWPOS_FIT = DESKTOP_WALLPAPER_POSITION.FIT;
pub const DWPOS_FILL = DESKTOP_WALLPAPER_POSITION.FILL;
pub const DWPOS_SPAN = DESKTOP_WALLPAPER_POSITION.SPAN;

// TODO: this type is limited to platform 'windows8.0'
const IID_IDesktopWallpaper_Value = Guid.initString("b92b56a9-8b55-4e14-9a89-0199bbb6f93b");
pub const IID_IDesktopWallpaper = &IID_IDesktopWallpaper_Value;
pub const IDesktopWallpaper = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetWallpaper: *const fn (
            self: *const IDesktopWallpaper,
            monitor_i_d: ?[*:0]const u16,
            wallpaper: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWallpaper: *const fn (
            self: *const IDesktopWallpaper,
            monitor_i_d: ?[*:0]const u16,
            wallpaper: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMonitorDevicePathAt: *const fn (
            self: *const IDesktopWallpaper,
            monitor_index: u32,
            monitor_i_d: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMonitorDevicePathCount: *const fn (
            self: *const IDesktopWallpaper,
            count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMonitorRECT: *const fn (
            self: *const IDesktopWallpaper,
            monitor_i_d: ?[*:0]const u16,
            display_rect: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBackgroundColor: *const fn (
            self: *const IDesktopWallpaper,
            color: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBackgroundColor: *const fn (
            self: *const IDesktopWallpaper,
            color: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPosition: *const fn (
            self: *const IDesktopWallpaper,
            position: DESKTOP_WALLPAPER_POSITION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPosition: *const fn (
            self: *const IDesktopWallpaper,
            position: ?*DESKTOP_WALLPAPER_POSITION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSlideshow: *const fn (
            self: *const IDesktopWallpaper,
            items: ?*IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSlideshow: *const fn (
            self: *const IDesktopWallpaper,
            items: ?*?*IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSlideshowOptions: *const fn (
            self: *const IDesktopWallpaper,
            options: DESKTOP_SLIDESHOW_OPTIONS,
            slideshow_tick: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSlideshowOptions: *const fn (
            self: *const IDesktopWallpaper,
            options: ?*DESKTOP_SLIDESHOW_OPTIONS,
            slideshow_tick: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AdvanceSlideshow: *const fn (
            self: *const IDesktopWallpaper,
            monitor_i_d: ?[*:0]const u16,
            direction: DESKTOP_SLIDESHOW_DIRECTION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn (
            self: *const IDesktopWallpaper,
            state: ?*DESKTOP_SLIDESHOW_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: *const fn (
            self: *const IDesktopWallpaper,
            enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setWallpaper(self: *const T, monitor_i_d_: ?[*:0]const u16, wallpaper_: ?[*:0]const u16) HRESULT {
                return @as(*const IDesktopWallpaper.VTable, @ptrCast(self.vtable)).SetWallpaper(@as(*const IDesktopWallpaper, @ptrCast(self)), monitor_i_d_, wallpaper_);
            }
            pub inline fn getWallpaper(self: *const T, monitor_i_d_: ?[*:0]const u16, wallpaper_: ?*?PWSTR) HRESULT {
                return @as(*const IDesktopWallpaper.VTable, @ptrCast(self.vtable)).GetWallpaper(@as(*const IDesktopWallpaper, @ptrCast(self)), monitor_i_d_, wallpaper_);
            }
            pub inline fn getMonitorDevicePathAt(self: *const T, monitor_index_: u32, monitor_i_d_: ?*?PWSTR) HRESULT {
                return @as(*const IDesktopWallpaper.VTable, @ptrCast(self.vtable)).GetMonitorDevicePathAt(@as(*const IDesktopWallpaper, @ptrCast(self)), monitor_index_, monitor_i_d_);
            }
            pub inline fn getMonitorDevicePathCount(self: *const T, count_: ?*u32) HRESULT {
                return @as(*const IDesktopWallpaper.VTable, @ptrCast(self.vtable)).GetMonitorDevicePathCount(@as(*const IDesktopWallpaper, @ptrCast(self)), count_);
            }
            pub inline fn getMonitorRECT(self: *const T, monitor_i_d_: ?[*:0]const u16, display_rect_: ?*RECT) HRESULT {
                return @as(*const IDesktopWallpaper.VTable, @ptrCast(self.vtable)).GetMonitorRECT(@as(*const IDesktopWallpaper, @ptrCast(self)), monitor_i_d_, display_rect_);
            }
            pub inline fn setBackgroundColor(self: *const T, color_: u32) HRESULT {
                return @as(*const IDesktopWallpaper.VTable, @ptrCast(self.vtable)).SetBackgroundColor(@as(*const IDesktopWallpaper, @ptrCast(self)), color_);
            }
            pub inline fn getBackgroundColor(self: *const T, color_: ?*u32) HRESULT {
                return @as(*const IDesktopWallpaper.VTable, @ptrCast(self.vtable)).GetBackgroundColor(@as(*const IDesktopWallpaper, @ptrCast(self)), color_);
            }
            pub inline fn setPosition(self: *const T, position_: DESKTOP_WALLPAPER_POSITION) HRESULT {
                return @as(*const IDesktopWallpaper.VTable, @ptrCast(self.vtable)).SetPosition(@as(*const IDesktopWallpaper, @ptrCast(self)), position_);
            }
            pub inline fn getPosition(self: *const T, position_: ?*DESKTOP_WALLPAPER_POSITION) HRESULT {
                return @as(*const IDesktopWallpaper.VTable, @ptrCast(self.vtable)).GetPosition(@as(*const IDesktopWallpaper, @ptrCast(self)), position_);
            }
            pub inline fn setSlideshow(self: *const T, items_: ?*IShellItemArray) HRESULT {
                return @as(*const IDesktopWallpaper.VTable, @ptrCast(self.vtable)).SetSlideshow(@as(*const IDesktopWallpaper, @ptrCast(self)), items_);
            }
            pub inline fn getSlideshow(self: *const T, items_: ?*?*IShellItemArray) HRESULT {
                return @as(*const IDesktopWallpaper.VTable, @ptrCast(self.vtable)).GetSlideshow(@as(*const IDesktopWallpaper, @ptrCast(self)), items_);
            }
            pub inline fn setSlideshowOptions(self: *const T, options_: DESKTOP_SLIDESHOW_OPTIONS, slideshow_tick_: u32) HRESULT {
                return @as(*const IDesktopWallpaper.VTable, @ptrCast(self.vtable)).SetSlideshowOptions(@as(*const IDesktopWallpaper, @ptrCast(self)), options_, slideshow_tick_);
            }
            pub inline fn getSlideshowOptions(self: *const T, options_: ?*DESKTOP_SLIDESHOW_OPTIONS, slideshow_tick_: ?*u32) HRESULT {
                return @as(*const IDesktopWallpaper.VTable, @ptrCast(self.vtable)).GetSlideshowOptions(@as(*const IDesktopWallpaper, @ptrCast(self)), options_, slideshow_tick_);
            }
            pub inline fn advanceSlideshow(self: *const T, monitor_i_d_: ?[*:0]const u16, direction_: DESKTOP_SLIDESHOW_DIRECTION) HRESULT {
                return @as(*const IDesktopWallpaper.VTable, @ptrCast(self.vtable)).AdvanceSlideshow(@as(*const IDesktopWallpaper, @ptrCast(self)), monitor_i_d_, direction_);
            }
            pub inline fn getStatus(self: *const T, state_: ?*DESKTOP_SLIDESHOW_STATE) HRESULT {
                return @as(*const IDesktopWallpaper.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IDesktopWallpaper, @ptrCast(self)), state_);
            }
            pub inline fn enable(self: *const T, enable_: BOOL) HRESULT {
                return @as(*const IDesktopWallpaper.VTable, @ptrCast(self.vtable)).Enable(@as(*const IDesktopWallpaper, @ptrCast(self)), enable_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const HOMEGROUPSHARINGCHOICES = enum(i32) {
    NONE = 0,
    MUSICLIBRARY = 1,
    PICTURESLIBRARY = 2,
    VIDEOSLIBRARY = 4,
    DOCUMENTSLIBRARY = 8,
    PRINTERS = 16,
};
pub const HGSC_NONE = HOMEGROUPSHARINGCHOICES.NONE;
pub const HGSC_MUSICLIBRARY = HOMEGROUPSHARINGCHOICES.MUSICLIBRARY;
pub const HGSC_PICTURESLIBRARY = HOMEGROUPSHARINGCHOICES.PICTURESLIBRARY;
pub const HGSC_VIDEOSLIBRARY = HOMEGROUPSHARINGCHOICES.VIDEOSLIBRARY;
pub const HGSC_DOCUMENTSLIBRARY = HOMEGROUPSHARINGCHOICES.DOCUMENTSLIBRARY;
pub const HGSC_PRINTERS = HOMEGROUPSHARINGCHOICES.PRINTERS;

// TODO: this type is limited to platform 'windows6.1'
const IID_IHomeGroup_Value = Guid.initString("7a3bd1d9-35a9-4fb3-a467-f48cac35e2d0");
pub const IID_IHomeGroup = &IID_IHomeGroup_Value;
pub const IHomeGroup = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsMember: *const fn (
            self: *const IHomeGroup,
            member: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowSharingWizard: *const fn (
            self: *const IHomeGroup,
            owner: ?HWND,
            sharingchoices: ?*HOMEGROUPSHARINGCHOICES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isMember(self: *const T, member_: ?*BOOL) HRESULT {
                return @as(*const IHomeGroup.VTable, @ptrCast(self.vtable)).IsMember(@as(*const IHomeGroup, @ptrCast(self)), member_);
            }
            pub inline fn showSharingWizard(self: *const T, owner_: ?HWND, sharingchoices_: ?*HOMEGROUPSHARINGCHOICES) HRESULT {
                return @as(*const IHomeGroup.VTable, @ptrCast(self.vtable)).ShowSharingWizard(@as(*const IHomeGroup, @ptrCast(self)), owner_, sharingchoices_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IInitializeWithPropertyStore_Value = Guid.initString("c3e12eb5-7d8d-44f8-b6dd-0e77b34d6de4");
pub const IID_IInitializeWithPropertyStore = &IID_IInitializeWithPropertyStore_Value;
pub const IInitializeWithPropertyStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IInitializeWithPropertyStore,
            pps: ?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, pps_: ?*IPropertyStore) HRESULT {
                return @as(*const IInitializeWithPropertyStore.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IInitializeWithPropertyStore, @ptrCast(self)), pps_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IOpenSearchSource_Value = Guid.initString("f0ee7333-e6fc-479b-9f25-a860c234a38e");
pub const IID_IOpenSearchSource = &IID_IOpenSearchSource_Value;
pub const IOpenSearchSource = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetResults: *const fn (
            self: *const IOpenSearchSource,
            hwnd: ?HWND,
            psz_query: ?[*:0]const u16,
            dw_start_index: u32,
            dw_count: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getResults(self: *const T, hwnd_: ?HWND, psz_query_: ?[*:0]const u16, dw_start_index_: u32, dw_count_: u32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IOpenSearchSource.VTable, @ptrCast(self.vtable)).GetResults(@as(*const IOpenSearchSource, @ptrCast(self)), hwnd_, psz_query_, dw_start_index_, dw_count_, riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const LIBRARYFOLDERFILTER = enum(i32) {
    FORCEFILESYSTEM = 1,
    STORAGEITEMS = 2,
    ALLITEMS = 3,
};
pub const LFF_FORCEFILESYSTEM = LIBRARYFOLDERFILTER.FORCEFILESYSTEM;
pub const LFF_STORAGEITEMS = LIBRARYFOLDERFILTER.STORAGEITEMS;
pub const LFF_ALLITEMS = LIBRARYFOLDERFILTER.ALLITEMS;

pub const LIBRARYOPTIONFLAGS = enum(i32) {
    DEFAULT = 0,
    PINNEDTONAVPANE = 1,
    // MASK_ALL = 1, this enum value conflicts with PINNEDTONAVPANE
};
pub const LOF_DEFAULT = LIBRARYOPTIONFLAGS.DEFAULT;
pub const LOF_PINNEDTONAVPANE = LIBRARYOPTIONFLAGS.PINNEDTONAVPANE;
pub const LOF_MASK_ALL = LIBRARYOPTIONFLAGS.PINNEDTONAVPANE;

pub const DEFAULTSAVEFOLDERTYPE = enum(i32) {
    DETECT = 1,
    PRIVATE = 2,
    PUBLIC = 3,
};
pub const DSFT_DETECT = DEFAULTSAVEFOLDERTYPE.DETECT;
pub const DSFT_PRIVATE = DEFAULTSAVEFOLDERTYPE.PRIVATE;
pub const DSFT_PUBLIC = DEFAULTSAVEFOLDERTYPE.PUBLIC;

pub const LIBRARYSAVEFLAGS = enum(i32) {
    FAILIFTHERE = 0,
    OVERRIDEEXISTING = 1,
    MAKEUNIQUENAME = 2,
};
pub const LSF_FAILIFTHERE = LIBRARYSAVEFLAGS.FAILIFTHERE;
pub const LSF_OVERRIDEEXISTING = LIBRARYSAVEFLAGS.OVERRIDEEXISTING;
pub const LSF_MAKEUNIQUENAME = LIBRARYSAVEFLAGS.MAKEUNIQUENAME;

// TODO: this type is limited to platform 'windows6.1'
const IID_IShellLibrary_Value = Guid.initString("11a66efa-382e-451a-9234-1e0e12ef3085");
pub const IID_IShellLibrary = &IID_IShellLibrary_Value;
pub const IShellLibrary = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LoadLibraryFromItem: *const fn (
            self: *const IShellLibrary,
            psi_library: ?*IShellItem,
            grf_mode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadLibraryFromKnownFolder: *const fn (
            self: *const IShellLibrary,
            kfid_library: ?*const Guid,
            grf_mode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFolder: *const fn (
            self: *const IShellLibrary,
            psi_location: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveFolder: *const fn (
            self: *const IShellLibrary,
            psi_location: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolders: *const fn (
            self: *const IShellLibrary,
            lff: LIBRARYFOLDERFILTER,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResolveFolder: *const fn (
            self: *const IShellLibrary,
            psi_folder_to_resolve: ?*IShellItem,
            dw_timeout: u32,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultSaveFolder: *const fn (
            self: *const IShellLibrary,
            dsft: DEFAULTSAVEFOLDERTYPE,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultSaveFolder: *const fn (
            self: *const IShellLibrary,
            dsft: DEFAULTSAVEFOLDERTYPE,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: *const fn (
            self: *const IShellLibrary,
            plof_options: ?*LIBRARYOPTIONFLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOptions: *const fn (
            self: *const IShellLibrary,
            lof_mask: LIBRARYOPTIONFLAGS,
            lof_options: LIBRARYOPTIONFLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderType: *const fn (
            self: *const IShellLibrary,
            pftid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolderType: *const fn (
            self: *const IShellLibrary,
            ftid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIcon: *const fn (
            self: *const IShellLibrary,
            ppsz_icon: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIcon: *const fn (
            self: *const IShellLibrary,
            psz_icon: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Commit: *const fn (
            self: *const IShellLibrary,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IShellLibrary,
            psi_folder_to_save_in: ?*IShellItem,
            psz_library_name: ?[*:0]const u16,
            lsf: LIBRARYSAVEFLAGS,
            ppsi_saved_to: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveInKnownFolder: *const fn (
            self: *const IShellLibrary,
            kfid_to_save_in: ?*const Guid,
            psz_library_name: ?[*:0]const u16,
            lsf: LIBRARYSAVEFLAGS,
            ppsi_saved_to: ?*?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn loadLibraryFromItem(self: *const T, psi_library_: ?*IShellItem, grf_mode_: u32) HRESULT {
                return @as(*const IShellLibrary.VTable, @ptrCast(self.vtable)).LoadLibraryFromItem(@as(*const IShellLibrary, @ptrCast(self)), psi_library_, grf_mode_);
            }
            pub inline fn loadLibraryFromKnownFolder(self: *const T, kfid_library_: ?*const Guid, grf_mode_: u32) HRESULT {
                return @as(*const IShellLibrary.VTable, @ptrCast(self.vtable)).LoadLibraryFromKnownFolder(@as(*const IShellLibrary, @ptrCast(self)), kfid_library_, grf_mode_);
            }
            pub inline fn addFolder(self: *const T, psi_location_: ?*IShellItem) HRESULT {
                return @as(*const IShellLibrary.VTable, @ptrCast(self.vtable)).AddFolder(@as(*const IShellLibrary, @ptrCast(self)), psi_location_);
            }
            pub inline fn removeFolder(self: *const T, psi_location_: ?*IShellItem) HRESULT {
                return @as(*const IShellLibrary.VTable, @ptrCast(self.vtable)).RemoveFolder(@as(*const IShellLibrary, @ptrCast(self)), psi_location_);
            }
            pub inline fn getFolders(self: *const T, lff_: LIBRARYFOLDERFILTER, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IShellLibrary.VTable, @ptrCast(self.vtable)).GetFolders(@as(*const IShellLibrary, @ptrCast(self)), lff_, riid_, ppv_);
            }
            pub inline fn resolveFolder(self: *const T, psi_folder_to_resolve_: ?*IShellItem, dw_timeout_: u32, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IShellLibrary.VTable, @ptrCast(self.vtable)).ResolveFolder(@as(*const IShellLibrary, @ptrCast(self)), psi_folder_to_resolve_, dw_timeout_, riid_, ppv_);
            }
            pub inline fn getDefaultSaveFolder(self: *const T, dsft_: DEFAULTSAVEFOLDERTYPE, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IShellLibrary.VTable, @ptrCast(self.vtable)).GetDefaultSaveFolder(@as(*const IShellLibrary, @ptrCast(self)), dsft_, riid_, ppv_);
            }
            pub inline fn setDefaultSaveFolder(self: *const T, dsft_: DEFAULTSAVEFOLDERTYPE, psi_: ?*IShellItem) HRESULT {
                return @as(*const IShellLibrary.VTable, @ptrCast(self.vtable)).SetDefaultSaveFolder(@as(*const IShellLibrary, @ptrCast(self)), dsft_, psi_);
            }
            pub inline fn getOptions(self: *const T, plof_options_: ?*LIBRARYOPTIONFLAGS) HRESULT {
                return @as(*const IShellLibrary.VTable, @ptrCast(self.vtable)).GetOptions(@as(*const IShellLibrary, @ptrCast(self)), plof_options_);
            }
            pub inline fn setOptions(self: *const T, lof_mask_: LIBRARYOPTIONFLAGS, lof_options_: LIBRARYOPTIONFLAGS) HRESULT {
                return @as(*const IShellLibrary.VTable, @ptrCast(self.vtable)).SetOptions(@as(*const IShellLibrary, @ptrCast(self)), lof_mask_, lof_options_);
            }
            pub inline fn getFolderType(self: *const T, pftid_: ?*Guid) HRESULT {
                return @as(*const IShellLibrary.VTable, @ptrCast(self.vtable)).GetFolderType(@as(*const IShellLibrary, @ptrCast(self)), pftid_);
            }
            pub inline fn setFolderType(self: *const T, ftid_: ?*const Guid) HRESULT {
                return @as(*const IShellLibrary.VTable, @ptrCast(self.vtable)).SetFolderType(@as(*const IShellLibrary, @ptrCast(self)), ftid_);
            }
            pub inline fn getIcon(self: *const T, ppsz_icon_: ?*?PWSTR) HRESULT {
                return @as(*const IShellLibrary.VTable, @ptrCast(self.vtable)).GetIcon(@as(*const IShellLibrary, @ptrCast(self)), ppsz_icon_);
            }
            pub inline fn setIcon(self: *const T, psz_icon_: ?[*:0]const u16) HRESULT {
                return @as(*const IShellLibrary.VTable, @ptrCast(self.vtable)).SetIcon(@as(*const IShellLibrary, @ptrCast(self)), psz_icon_);
            }
            pub inline fn commit(self: *const T) HRESULT {
                return @as(*const IShellLibrary.VTable, @ptrCast(self.vtable)).Commit(@as(*const IShellLibrary, @ptrCast(self)));
            }
            pub inline fn save(self: *const T, psi_folder_to_save_in_: ?*IShellItem, psz_library_name_: ?[*:0]const u16, lsf_: LIBRARYSAVEFLAGS, ppsi_saved_to_: ?*?*IShellItem) HRESULT {
                return @as(*const IShellLibrary.VTable, @ptrCast(self.vtable)).Save(@as(*const IShellLibrary, @ptrCast(self)), psi_folder_to_save_in_, psz_library_name_, lsf_, ppsi_saved_to_);
            }
            pub inline fn saveInKnownFolder(self: *const T, kfid_to_save_in_: ?*const Guid, psz_library_name_: ?[*:0]const u16, lsf_: LIBRARYSAVEFLAGS, ppsi_saved_to_: ?*?*IShellItem) HRESULT {
                return @as(*const IShellLibrary.VTable, @ptrCast(self.vtable)).SaveInKnownFolder(@as(*const IShellLibrary, @ptrCast(self)), kfid_to_save_in_, psz_library_name_, lsf_, ppsi_saved_to_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DEFAULT_FOLDER_MENU_RESTRICTIONS = enum(i32) {
    DEFAULT = 0,
    NO_STATIC_VERBS = 8,
    STATIC_VERBS_ONLY = 16,
    NO_RESOURCE_VERBS = 32,
    OPTIN_HANDLERS_ONLY = 64,
    RESOURCE_AND_FOLDER_VERBS_ONLY = 128,
    USE_SPECIFIED_HANDLERS = 256,
    USE_SPECIFIED_VERBS = 512,
    NO_ASYNC_VERBS = 1024,
    NO_NATIVECPU_VERBS = 2048,
    NO_NONWOW_VERBS = 4096,
};
pub const DFMR_DEFAULT = DEFAULT_FOLDER_MENU_RESTRICTIONS.DEFAULT;
pub const DFMR_NO_STATIC_VERBS = DEFAULT_FOLDER_MENU_RESTRICTIONS.NO_STATIC_VERBS;
pub const DFMR_STATIC_VERBS_ONLY = DEFAULT_FOLDER_MENU_RESTRICTIONS.STATIC_VERBS_ONLY;
pub const DFMR_NO_RESOURCE_VERBS = DEFAULT_FOLDER_MENU_RESTRICTIONS.NO_RESOURCE_VERBS;
pub const DFMR_OPTIN_HANDLERS_ONLY = DEFAULT_FOLDER_MENU_RESTRICTIONS.OPTIN_HANDLERS_ONLY;
pub const DFMR_RESOURCE_AND_FOLDER_VERBS_ONLY = DEFAULT_FOLDER_MENU_RESTRICTIONS.RESOURCE_AND_FOLDER_VERBS_ONLY;
pub const DFMR_USE_SPECIFIED_HANDLERS = DEFAULT_FOLDER_MENU_RESTRICTIONS.USE_SPECIFIED_HANDLERS;
pub const DFMR_USE_SPECIFIED_VERBS = DEFAULT_FOLDER_MENU_RESTRICTIONS.USE_SPECIFIED_VERBS;
pub const DFMR_NO_ASYNC_VERBS = DEFAULT_FOLDER_MENU_RESTRICTIONS.NO_ASYNC_VERBS;
pub const DFMR_NO_NATIVECPU_VERBS = DEFAULT_FOLDER_MENU_RESTRICTIONS.NO_NATIVECPU_VERBS;
pub const DFMR_NO_NONWOW_VERBS = DEFAULT_FOLDER_MENU_RESTRICTIONS.NO_NONWOW_VERBS;

// TODO: this type is limited to platform 'windows8.0'
const IID_IDefaultFolderMenuInitialize_Value = Guid.initString("7690aa79-f8fc-4615-a327-36f7d18f5d91");
pub const IID_IDefaultFolderMenuInitialize = &IID_IDefaultFolderMenuInitialize_Value;
pub const IDefaultFolderMenuInitialize = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IDefaultFolderMenuInitialize,
            hwnd: ?HWND,
            pcmcb: ?*IContextMenuCB,
            pidl_folder: ?*ITEMIDLIST,
            psf: ?*IShellFolder,
            cidl: u32,
            apidl: [*]?*ITEMIDLIST,
            punk_association: ?*IUnknown,
            c_keys: u32,
            a_keys: ?*const ?HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMenuRestrictions: *const fn (
            self: *const IDefaultFolderMenuInitialize,
            dfmr_values: DEFAULT_FOLDER_MENU_RESTRICTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMenuRestrictions: *const fn (
            self: *const IDefaultFolderMenuInitialize,
            dfmr_mask: DEFAULT_FOLDER_MENU_RESTRICTIONS,
            pdfmr_values: ?*DEFAULT_FOLDER_MENU_RESTRICTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHandlerClsid: *const fn (
            self: *const IDefaultFolderMenuInitialize,
            rclsid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, hwnd_: ?HWND, pcmcb_: ?*IContextMenuCB, pidl_folder_: ?*ITEMIDLIST, psf_: ?*IShellFolder, cidl_: u32, apidl_: [*]?*ITEMIDLIST, punk_association_: ?*IUnknown, c_keys_: u32, a_keys_: ?*const ?HKEY) HRESULT {
                return @as(*const IDefaultFolderMenuInitialize.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IDefaultFolderMenuInitialize, @ptrCast(self)), hwnd_, pcmcb_, pidl_folder_, psf_, cidl_, apidl_, punk_association_, c_keys_, a_keys_);
            }
            pub inline fn setMenuRestrictions(self: *const T, dfmr_values_: DEFAULT_FOLDER_MENU_RESTRICTIONS) HRESULT {
                return @as(*const IDefaultFolderMenuInitialize.VTable, @ptrCast(self.vtable)).SetMenuRestrictions(@as(*const IDefaultFolderMenuInitialize, @ptrCast(self)), dfmr_values_);
            }
            pub inline fn getMenuRestrictions(self: *const T, dfmr_mask_: DEFAULT_FOLDER_MENU_RESTRICTIONS, pdfmr_values_: ?*DEFAULT_FOLDER_MENU_RESTRICTIONS) HRESULT {
                return @as(*const IDefaultFolderMenuInitialize.VTable, @ptrCast(self.vtable)).GetMenuRestrictions(@as(*const IDefaultFolderMenuInitialize, @ptrCast(self)), dfmr_mask_, pdfmr_values_);
            }
            pub inline fn setHandlerClsid(self: *const T, rclsid_: ?*const Guid) HRESULT {
                return @as(*const IDefaultFolderMenuInitialize.VTable, @ptrCast(self.vtable)).SetHandlerClsid(@as(*const IDefaultFolderMenuInitialize, @ptrCast(self)), rclsid_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const ACTIVATEOPTIONS = enum(i32) {
    NONE = 0,
    DESIGNMODE = 1,
    NOERRORUI = 2,
    NOSPLASHSCREEN = 4,
    PRELAUNCH = 33554432,
};
pub const AO_NONE = ACTIVATEOPTIONS.NONE;
pub const AO_DESIGNMODE = ACTIVATEOPTIONS.DESIGNMODE;
pub const AO_NOERRORUI = ACTIVATEOPTIONS.NOERRORUI;
pub const AO_NOSPLASHSCREEN = ACTIVATEOPTIONS.NOSPLASHSCREEN;
pub const AO_PRELAUNCH = ACTIVATEOPTIONS.PRELAUNCH;

// TODO: this type is limited to platform 'windows8.0'
const IID_IApplicationActivationManager_Value = Guid.initString("2e941141-7f97-4756-ba1d-9decde894a3d");
pub const IID_IApplicationActivationManager = &IID_IApplicationActivationManager_Value;
pub const IApplicationActivationManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ActivateApplication: *const fn (
            self: *const IApplicationActivationManager,
            app_user_model_id: ?[*:0]const u16,
            arguments: ?[*:0]const u16,
            options: ACTIVATEOPTIONS,
            process_id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivateForFile: *const fn (
            self: *const IApplicationActivationManager,
            app_user_model_id: ?[*:0]const u16,
            item_array: ?*IShellItemArray,
            verb: ?[*:0]const u16,
            process_id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivateForProtocol: *const fn (
            self: *const IApplicationActivationManager,
            app_user_model_id: ?[*:0]const u16,
            item_array: ?*IShellItemArray,
            process_id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn activateApplication(self: *const T, app_user_model_id_: ?[*:0]const u16, arguments_: ?[*:0]const u16, options_: ACTIVATEOPTIONS, process_id_: ?*u32) HRESULT {
                return @as(*const IApplicationActivationManager.VTable, @ptrCast(self.vtable)).ActivateApplication(@as(*const IApplicationActivationManager, @ptrCast(self)), app_user_model_id_, arguments_, options_, process_id_);
            }
            pub inline fn activateForFile(self: *const T, app_user_model_id_: ?[*:0]const u16, item_array_: ?*IShellItemArray, verb_: ?[*:0]const u16, process_id_: ?*u32) HRESULT {
                return @as(*const IApplicationActivationManager.VTable, @ptrCast(self.vtable)).ActivateForFile(@as(*const IApplicationActivationManager, @ptrCast(self)), app_user_model_id_, item_array_, verb_, process_id_);
            }
            pub inline fn activateForProtocol(self: *const T, app_user_model_id_: ?[*:0]const u16, item_array_: ?*IShellItemArray, process_id_: ?*u32) HRESULT {
                return @as(*const IApplicationActivationManager.VTable, @ptrCast(self.vtable)).ActivateForProtocol(@as(*const IApplicationActivationManager, @ptrCast(self)), app_user_model_id_, item_array_, process_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IVirtualDesktopManager_Value = Guid.initString("a5cd92ff-29be-454c-8d04-d82879fb3f1b");
pub const IID_IVirtualDesktopManager = &IID_IVirtualDesktopManager_Value;
pub const IVirtualDesktopManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsWindowOnCurrentVirtualDesktop: *const fn (
            self: *const IVirtualDesktopManager,
            top_level_window: ?HWND,
            on_current_desktop: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWindowDesktopId: *const fn (
            self: *const IVirtualDesktopManager,
            top_level_window: ?HWND,
            desktop_id: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveWindowToDesktop: *const fn (
            self: *const IVirtualDesktopManager,
            top_level_window: ?HWND,
            desktop_id: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isWindowOnCurrentVirtualDesktop(self: *const T, top_level_window_: ?HWND, on_current_desktop_: ?*BOOL) HRESULT {
                return @as(*const IVirtualDesktopManager.VTable, @ptrCast(self.vtable)).IsWindowOnCurrentVirtualDesktop(@as(*const IVirtualDesktopManager, @ptrCast(self)), top_level_window_, on_current_desktop_);
            }
            pub inline fn getWindowDesktopId(self: *const T, top_level_window_: ?HWND, desktop_id_: ?*Guid) HRESULT {
                return @as(*const IVirtualDesktopManager.VTable, @ptrCast(self.vtable)).GetWindowDesktopId(@as(*const IVirtualDesktopManager, @ptrCast(self)), top_level_window_, desktop_id_);
            }
            pub inline fn moveWindowToDesktop(self: *const T, top_level_window_: ?HWND, desktop_id_: ?*const Guid) HRESULT {
                return @as(*const IVirtualDesktopManager.VTable, @ptrCast(self.vtable)).MoveWindowToDesktop(@as(*const IVirtualDesktopManager, @ptrCast(self)), top_level_window_, desktop_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const LIBRARYMANAGEDIALOGOPTIONS = enum(i32) {
    DEFAULT = 0,
    ALLOWUNINDEXABLENETWORKLOCATIONS = 1,
};
pub const LMD_DEFAULT = LIBRARYMANAGEDIALOGOPTIONS.DEFAULT;
pub const LMD_ALLOWUNINDEXABLENETWORKLOCATIONS = LIBRARYMANAGEDIALOGOPTIONS.ALLOWUNINDEXABLENETWORKLOCATIONS;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAssocHandlerInvoker_Value = Guid.initString("92218cab-ecaa-4335-8133-807fd234c2ee");
pub const IID_IAssocHandlerInvoker = &IID_IAssocHandlerInvoker_Value;
pub const IAssocHandlerInvoker = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SupportsSelection: *const fn (
            self: *const IAssocHandlerInvoker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Invoke: *const fn (
            self: *const IAssocHandlerInvoker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn supportsSelection(self: *const T) HRESULT {
                return @as(*const IAssocHandlerInvoker.VTable, @ptrCast(self.vtable)).SupportsSelection(@as(*const IAssocHandlerInvoker, @ptrCast(self)));
            }
            pub inline fn invoke(self: *const T) HRESULT {
                return @as(*const IAssocHandlerInvoker.VTable, @ptrCast(self.vtable)).Invoke(@as(*const IAssocHandlerInvoker, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const AHTYPE = enum(i32) {
    UNDEFINED = 0,
    USER_APPLICATION = 8,
    ANY_APPLICATION = 16,
    MACHINEDEFAULT = 32,
    PROGID = 64,
    APPLICATION = 128,
    CLASS_APPLICATION = 256,
    ANY_PROGID = 512,
};
pub const AHTYPE_UNDEFINED = AHTYPE.UNDEFINED;
pub const AHTYPE_USER_APPLICATION = AHTYPE.USER_APPLICATION;
pub const AHTYPE_ANY_APPLICATION = AHTYPE.ANY_APPLICATION;
pub const AHTYPE_MACHINEDEFAULT = AHTYPE.MACHINEDEFAULT;
pub const AHTYPE_PROGID = AHTYPE.PROGID;
pub const AHTYPE_APPLICATION = AHTYPE.APPLICATION;
pub const AHTYPE_CLASS_APPLICATION = AHTYPE.CLASS_APPLICATION;
pub const AHTYPE_ANY_PROGID = AHTYPE.ANY_PROGID;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAssocHandler_Value = Guid.initString("f04061ac-1659-4a3f-a954-775aa57fc083");
pub const IID_IAssocHandler = &IID_IAssocHandler_Value;
pub const IAssocHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetName: *const fn (
            self: *const IAssocHandler,
            ppsz: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUIName: *const fn (
            self: *const IAssocHandler,
            ppsz: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIconLocation: *const fn (
            self: *const IAssocHandler,
            ppsz_path: ?*?PWSTR,
            p_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRecommended: *const fn (
            self: *const IAssocHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MakeDefault: *const fn (
            self: *const IAssocHandler,
            psz_description: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Invoke: *const fn (
            self: *const IAssocHandler,
            pdo: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateInvoker: *const fn (
            self: *const IAssocHandler,
            pdo: ?*IDataObject,
            pp_invoker: ?*?*IAssocHandlerInvoker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getName(self: *const T, ppsz_: ?*?PWSTR) HRESULT {
                return @as(*const IAssocHandler.VTable, @ptrCast(self.vtable)).GetName(@as(*const IAssocHandler, @ptrCast(self)), ppsz_);
            }
            pub inline fn getUIName(self: *const T, ppsz_: ?*?PWSTR) HRESULT {
                return @as(*const IAssocHandler.VTable, @ptrCast(self.vtable)).GetUIName(@as(*const IAssocHandler, @ptrCast(self)), ppsz_);
            }
            pub inline fn getIconLocation(self: *const T, ppsz_path_: ?*?PWSTR, p_index_: ?*i32) HRESULT {
                return @as(*const IAssocHandler.VTable, @ptrCast(self.vtable)).GetIconLocation(@as(*const IAssocHandler, @ptrCast(self)), ppsz_path_, p_index_);
            }
            pub inline fn isRecommended(self: *const T) HRESULT {
                return @as(*const IAssocHandler.VTable, @ptrCast(self.vtable)).IsRecommended(@as(*const IAssocHandler, @ptrCast(self)));
            }
            pub inline fn makeDefault(self: *const T, psz_description_: ?[*:0]const u16) HRESULT {
                return @as(*const IAssocHandler.VTable, @ptrCast(self.vtable)).MakeDefault(@as(*const IAssocHandler, @ptrCast(self)), psz_description_);
            }
            pub inline fn invoke(self: *const T, pdo_: ?*IDataObject) HRESULT {
                return @as(*const IAssocHandler.VTable, @ptrCast(self.vtable)).Invoke(@as(*const IAssocHandler, @ptrCast(self)), pdo_);
            }
            pub inline fn createInvoker(self: *const T, pdo_: ?*IDataObject, pp_invoker_: ?*?*IAssocHandlerInvoker) HRESULT {
                return @as(*const IAssocHandler.VTable, @ptrCast(self.vtable)).CreateInvoker(@as(*const IAssocHandler, @ptrCast(self)), pdo_, pp_invoker_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumAssocHandlers_Value = Guid.initString("973810ae-9599-4b88-9e4d-6ee98c9552da");
pub const IID_IEnumAssocHandlers = &IID_IEnumAssocHandlers_Value;
pub const IEnumAssocHandlers = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumAssocHandlers,
            celt: u32,
            rgelt: [*]?*IAssocHandler,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: [*]?*IAssocHandler, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumAssocHandlers.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumAssocHandlers, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const ASSOC_FILTER = enum(i32) {
    NONE = 0,
    RECOMMENDED = 1,
};
pub const ASSOC_FILTER_NONE = ASSOC_FILTER.NONE;
pub const ASSOC_FILTER_RECOMMENDED = ASSOC_FILTER.RECOMMENDED;

// TODO: this type is limited to platform 'windows8.0'
const IID_IDataObjectProvider_Value = Guid.initString("3d25f6d6-4b2a-433c-9184-7c33ad35d001");
pub const IID_IDataObjectProvider = &IID_IDataObjectProvider_Value;
pub const IDataObjectProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDataObject: *const fn (
            self: *const IDataObjectProvider,
            data_object: ?*?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDataObject: *const fn (
            self: *const IDataObjectProvider,
            data_object: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDataObject(self: *const T, data_object_: ?*?*IDataObject) HRESULT {
                return @as(*const IDataObjectProvider.VTable, @ptrCast(self.vtable)).GetDataObject(@as(*const IDataObjectProvider, @ptrCast(self)), data_object_);
            }
            pub inline fn setDataObject(self: *const T, data_object_: ?*IDataObject) HRESULT {
                return @as(*const IDataObjectProvider.VTable, @ptrCast(self.vtable)).SetDataObject(@as(*const IDataObjectProvider, @ptrCast(self)), data_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDataTransferManagerInterop_Value = Guid.initString("3a3dcd6c-3eab-43dc-bcde-45671ce800c8");
pub const IID_IDataTransferManagerInterop = &IID_IDataTransferManagerInterop_Value;
pub const IDataTransferManagerInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetForWindow: *const fn (
            self: *const IDataTransferManagerInterop,
            app_window: ?HWND,
            riid: ?*const Guid,
            data_transfer_manager: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowShareUIForWindow: *const fn (
            self: *const IDataTransferManagerInterop,
            app_window: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getForWindow(self: *const T, app_window_: ?HWND, riid_: ?*const Guid, data_transfer_manager_: ?*?*anyopaque) HRESULT {
                return @as(*const IDataTransferManagerInterop.VTable, @ptrCast(self.vtable)).GetForWindow(@as(*const IDataTransferManagerInterop, @ptrCast(self)), app_window_, riid_, data_transfer_manager_);
            }
            pub inline fn showShareUIForWindow(self: *const T, app_window_: ?HWND) HRESULT {
                return @as(*const IDataTransferManagerInterop.VTable, @ptrCast(self.vtable)).ShowShareUIForWindow(@as(*const IDataTransferManagerInterop, @ptrCast(self)), app_window_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IFrameworkInputPaneHandler_Value = Guid.initString("226c537b-1e76-4d9e-a760-33db29922f18");
pub const IID_IFrameworkInputPaneHandler = &IID_IFrameworkInputPaneHandler_Value;
pub const IFrameworkInputPaneHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Showing: *const fn (
            self: *const IFrameworkInputPaneHandler,
            prc_input_pane_screen_location: ?*RECT,
            f_ensure_focused_element_in_view: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Hiding: *const fn (
            self: *const IFrameworkInputPaneHandler,
            f_ensure_focused_element_in_view: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn showing(self: *const T, prc_input_pane_screen_location_: ?*RECT, f_ensure_focused_element_in_view_: BOOL) HRESULT {
                return @as(*const IFrameworkInputPaneHandler.VTable, @ptrCast(self.vtable)).Showing(@as(*const IFrameworkInputPaneHandler, @ptrCast(self)), prc_input_pane_screen_location_, f_ensure_focused_element_in_view_);
            }
            pub inline fn hiding(self: *const T, f_ensure_focused_element_in_view_: BOOL) HRESULT {
                return @as(*const IFrameworkInputPaneHandler.VTable, @ptrCast(self.vtable)).Hiding(@as(*const IFrameworkInputPaneHandler, @ptrCast(self)), f_ensure_focused_element_in_view_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IFrameworkInputPane_Value = Guid.initString("5752238b-24f0-495a-82f1-2fd593056796");
pub const IID_IFrameworkInputPane = &IID_IFrameworkInputPane_Value;
pub const IFrameworkInputPane = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: *const fn (
            self: *const IFrameworkInputPane,
            p_window: ?*IUnknown,
            p_handler: ?*IFrameworkInputPaneHandler,
            pdw_cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AdviseWithHWND: *const fn (
            self: *const IFrameworkInputPane,
            hwnd: ?HWND,
            p_handler: ?*IFrameworkInputPaneHandler,
            pdw_cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn (
            self: *const IFrameworkInputPane,
            dw_cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Location: *const fn (
            self: *const IFrameworkInputPane,
            prc_input_pane_screen_location: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn advise(self: *const T, p_window_: ?*IUnknown, p_handler_: ?*IFrameworkInputPaneHandler, pdw_cookie_: ?*u32) HRESULT {
                return @as(*const IFrameworkInputPane.VTable, @ptrCast(self.vtable)).Advise(@as(*const IFrameworkInputPane, @ptrCast(self)), p_window_, p_handler_, pdw_cookie_);
            }
            pub inline fn adviseWithHWND(self: *const T, hwnd_: ?HWND, p_handler_: ?*IFrameworkInputPaneHandler, pdw_cookie_: ?*u32) HRESULT {
                return @as(*const IFrameworkInputPane.VTable, @ptrCast(self.vtable)).AdviseWithHWND(@as(*const IFrameworkInputPane, @ptrCast(self)), hwnd_, p_handler_, pdw_cookie_);
            }
            pub inline fn unadvise(self: *const T, dw_cookie_: u32) HRESULT {
                return @as(*const IFrameworkInputPane.VTable, @ptrCast(self.vtable)).Unadvise(@as(*const IFrameworkInputPane, @ptrCast(self)), dw_cookie_);
            }
            pub inline fn location(self: *const T, prc_input_pane_screen_location_: ?*RECT) HRESULT {
                return @as(*const IFrameworkInputPane.VTable, @ptrCast(self.vtable)).Location(@as(*const IFrameworkInputPane, @ptrCast(self)), prc_input_pane_screen_location_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const MONITOR_APP_VISIBILITY = enum(i32) {
    UNKNOWN = 0,
    NO_APP_VISIBLE = 1,
    APP_VISIBLE = 2,
};
pub const MAV_UNKNOWN = MONITOR_APP_VISIBILITY.UNKNOWN;
pub const MAV_NO_APP_VISIBLE = MONITOR_APP_VISIBILITY.NO_APP_VISIBLE;
pub const MAV_APP_VISIBLE = MONITOR_APP_VISIBILITY.APP_VISIBLE;

// TODO: this type is limited to platform 'windows8.0'
const IID_IAppVisibilityEvents_Value = Guid.initString("6584ce6b-7d82-49c2-89c9-c6bc02ba8c38");
pub const IID_IAppVisibilityEvents = &IID_IAppVisibilityEvents_Value;
pub const IAppVisibilityEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AppVisibilityOnMonitorChanged: *const fn (
            self: *const IAppVisibilityEvents,
            h_monitor: ?HMONITOR,
            previous_mode: MONITOR_APP_VISIBILITY,
            current_mode: MONITOR_APP_VISIBILITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LauncherVisibilityChange: *const fn (
            self: *const IAppVisibilityEvents,
            current_visible_state: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn appVisibilityOnMonitorChanged(self: *const T, h_monitor_: ?HMONITOR, previous_mode_: MONITOR_APP_VISIBILITY, current_mode_: MONITOR_APP_VISIBILITY) HRESULT {
                return @as(*const IAppVisibilityEvents.VTable, @ptrCast(self.vtable)).AppVisibilityOnMonitorChanged(@as(*const IAppVisibilityEvents, @ptrCast(self)), h_monitor_, previous_mode_, current_mode_);
            }
            pub inline fn launcherVisibilityChange(self: *const T, current_visible_state_: BOOL) HRESULT {
                return @as(*const IAppVisibilityEvents.VTable, @ptrCast(self.vtable)).LauncherVisibilityChange(@as(*const IAppVisibilityEvents, @ptrCast(self)), current_visible_state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IAppVisibility_Value = Guid.initString("2246ea2d-caea-4444-a3c4-6de827e44313");
pub const IID_IAppVisibility = &IID_IAppVisibility_Value;
pub const IAppVisibility = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAppVisibilityOnMonitor: *const fn (
            self: *const IAppVisibility,
            h_monitor: ?HMONITOR,
            p_mode: ?*MONITOR_APP_VISIBILITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsLauncherVisible: *const fn (
            self: *const IAppVisibility,
            pf_visible: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: *const fn (
            self: *const IAppVisibility,
            p_callback: ?*IAppVisibilityEvents,
            pdw_cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unadvise: *const fn (
            self: *const IAppVisibility,
            dw_cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAppVisibilityOnMonitor(self: *const T, h_monitor_: ?HMONITOR, p_mode_: ?*MONITOR_APP_VISIBILITY) HRESULT {
                return @as(*const IAppVisibility.VTable, @ptrCast(self.vtable)).GetAppVisibilityOnMonitor(@as(*const IAppVisibility, @ptrCast(self)), h_monitor_, p_mode_);
            }
            pub inline fn isLauncherVisible(self: *const T, pf_visible_: ?*BOOL) HRESULT {
                return @as(*const IAppVisibility.VTable, @ptrCast(self.vtable)).IsLauncherVisible(@as(*const IAppVisibility, @ptrCast(self)), pf_visible_);
            }
            pub inline fn advise(self: *const T, p_callback_: ?*IAppVisibilityEvents, pdw_cookie_: ?*u32) HRESULT {
                return @as(*const IAppVisibility.VTable, @ptrCast(self.vtable)).Advise(@as(*const IAppVisibility, @ptrCast(self)), p_callback_, pdw_cookie_);
            }
            pub inline fn unadvise(self: *const T, dw_cookie_: u32) HRESULT {
                return @as(*const IAppVisibility.VTable, @ptrCast(self.vtable)).Unadvise(@as(*const IAppVisibility, @ptrCast(self)), dw_cookie_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PACKAGE_EXECUTION_STATE = enum(i32) {
    UNKNOWN = 0,
    RUNNING = 1,
    SUSPENDING = 2,
    SUSPENDED = 3,
    TERMINATED = 4,
};
pub const PES_UNKNOWN = PACKAGE_EXECUTION_STATE.UNKNOWN;
pub const PES_RUNNING = PACKAGE_EXECUTION_STATE.RUNNING;
pub const PES_SUSPENDING = PACKAGE_EXECUTION_STATE.SUSPENDING;
pub const PES_SUSPENDED = PACKAGE_EXECUTION_STATE.SUSPENDED;
pub const PES_TERMINATED = PACKAGE_EXECUTION_STATE.TERMINATED;

// TODO: this type is limited to platform 'windows8.0'
const IID_IPackageExecutionStateChangeNotification_Value = Guid.initString("1bb12a62-2ad8-432b-8ccf-0c2c52afcd5b");
pub const IID_IPackageExecutionStateChangeNotification = &IID_IPackageExecutionStateChangeNotification_Value;
pub const IPackageExecutionStateChangeNotification = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnStateChanged: *const fn (
            self: *const IPackageExecutionStateChangeNotification,
            psz_package_full_name: ?[*:0]const u16,
            pes_new_state: PACKAGE_EXECUTION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onStateChanged(self: *const T, psz_package_full_name_: ?[*:0]const u16, pes_new_state_: PACKAGE_EXECUTION_STATE) HRESULT {
                return @as(*const IPackageExecutionStateChangeNotification.VTable, @ptrCast(self.vtable)).OnStateChanged(@as(*const IPackageExecutionStateChangeNotification, @ptrCast(self)), psz_package_full_name_, pes_new_state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IPackageDebugSettings_Value = Guid.initString("f27c3930-8029-4ad1-94e3-3dba417810c1");
pub const IID_IPackageDebugSettings = &IID_IPackageDebugSettings_Value;
pub const IPackageDebugSettings = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnableDebugging: *const fn (
            self: *const IPackageDebugSettings,
            package_full_name: ?[*:0]const u16,
            debugger_command_line: ?[*:0]const u16,
            environment: ?[*]u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableDebugging: *const fn (
            self: *const IPackageDebugSettings,
            package_full_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Suspend: *const fn (
            self: *const IPackageDebugSettings,
            package_full_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: *const fn (
            self: *const IPackageDebugSettings,
            package_full_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TerminateAllProcesses: *const fn (
            self: *const IPackageDebugSettings,
            package_full_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTargetSessionId: *const fn (
            self: *const IPackageDebugSettings,
            session_id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateBackgroundTasks: *const fn (
            self: *const IPackageDebugSettings,
            package_full_name: ?[*:0]const u16,
            task_count: ?*u32,
            task_ids: ?*?*Guid,
            task_names: ?*?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivateBackgroundTask: *const fn (
            self: *const IPackageDebugSettings,
            task_id: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartServicing: *const fn (
            self: *const IPackageDebugSettings,
            package_full_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopServicing: *const fn (
            self: *const IPackageDebugSettings,
            package_full_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartSessionRedirection: *const fn (
            self: *const IPackageDebugSettings,
            package_full_name: ?[*:0]const u16,
            session_id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopSessionRedirection: *const fn (
            self: *const IPackageDebugSettings,
            package_full_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPackageExecutionState: *const fn (
            self: *const IPackageDebugSettings,
            package_full_name: ?[*:0]const u16,
            package_execution_state: ?*PACKAGE_EXECUTION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterForPackageStateChanges: *const fn (
            self: *const IPackageDebugSettings,
            package_full_name: ?[*:0]const u16,
            p_package_execution_state_change_notification: ?*IPackageExecutionStateChangeNotification,
            pdw_cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterForPackageStateChanges: *const fn (
            self: *const IPackageDebugSettings,
            dw_cookie: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn enableDebugging(self: *const T, package_full_name_: ?[*:0]const u16, debugger_command_line_: ?[*:0]const u16, environment_: ?[*]u16) HRESULT {
                return @as(*const IPackageDebugSettings.VTable, @ptrCast(self.vtable)).EnableDebugging(@as(*const IPackageDebugSettings, @ptrCast(self)), package_full_name_, debugger_command_line_, environment_);
            }
            pub inline fn disableDebugging(self: *const T, package_full_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IPackageDebugSettings.VTable, @ptrCast(self.vtable)).DisableDebugging(@as(*const IPackageDebugSettings, @ptrCast(self)), package_full_name_);
            }
            pub inline fn @"suspend"(self: *const T, package_full_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IPackageDebugSettings.VTable, @ptrCast(self.vtable)).Suspend(@as(*const IPackageDebugSettings, @ptrCast(self)), package_full_name_);
            }
            pub inline fn @"resume"(self: *const T, package_full_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IPackageDebugSettings.VTable, @ptrCast(self.vtable)).Resume(@as(*const IPackageDebugSettings, @ptrCast(self)), package_full_name_);
            }
            pub inline fn terminateAllProcesses(self: *const T, package_full_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IPackageDebugSettings.VTable, @ptrCast(self.vtable)).TerminateAllProcesses(@as(*const IPackageDebugSettings, @ptrCast(self)), package_full_name_);
            }
            pub inline fn setTargetSessionId(self: *const T, session_id_: u32) HRESULT {
                return @as(*const IPackageDebugSettings.VTable, @ptrCast(self.vtable)).SetTargetSessionId(@as(*const IPackageDebugSettings, @ptrCast(self)), session_id_);
            }
            pub inline fn enumerateBackgroundTasks(self: *const T, package_full_name_: ?[*:0]const u16, task_count_: ?*u32, task_ids_: ?*?*Guid, task_names_: ?*?*?PWSTR) HRESULT {
                return @as(*const IPackageDebugSettings.VTable, @ptrCast(self.vtable)).EnumerateBackgroundTasks(@as(*const IPackageDebugSettings, @ptrCast(self)), package_full_name_, task_count_, task_ids_, task_names_);
            }
            pub inline fn activateBackgroundTask(self: *const T, task_id_: ?*const Guid) HRESULT {
                return @as(*const IPackageDebugSettings.VTable, @ptrCast(self.vtable)).ActivateBackgroundTask(@as(*const IPackageDebugSettings, @ptrCast(self)), task_id_);
            }
            pub inline fn startServicing(self: *const T, package_full_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IPackageDebugSettings.VTable, @ptrCast(self.vtable)).StartServicing(@as(*const IPackageDebugSettings, @ptrCast(self)), package_full_name_);
            }
            pub inline fn stopServicing(self: *const T, package_full_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IPackageDebugSettings.VTable, @ptrCast(self.vtable)).StopServicing(@as(*const IPackageDebugSettings, @ptrCast(self)), package_full_name_);
            }
            pub inline fn startSessionRedirection(self: *const T, package_full_name_: ?[*:0]const u16, session_id_: u32) HRESULT {
                return @as(*const IPackageDebugSettings.VTable, @ptrCast(self.vtable)).StartSessionRedirection(@as(*const IPackageDebugSettings, @ptrCast(self)), package_full_name_, session_id_);
            }
            pub inline fn stopSessionRedirection(self: *const T, package_full_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IPackageDebugSettings.VTable, @ptrCast(self.vtable)).StopSessionRedirection(@as(*const IPackageDebugSettings, @ptrCast(self)), package_full_name_);
            }
            pub inline fn getPackageExecutionState(self: *const T, package_full_name_: ?[*:0]const u16, package_execution_state_: ?*PACKAGE_EXECUTION_STATE) HRESULT {
                return @as(*const IPackageDebugSettings.VTable, @ptrCast(self.vtable)).GetPackageExecutionState(@as(*const IPackageDebugSettings, @ptrCast(self)), package_full_name_, package_execution_state_);
            }
            pub inline fn registerForPackageStateChanges(self: *const T, package_full_name_: ?[*:0]const u16, p_package_execution_state_change_notification_: ?*IPackageExecutionStateChangeNotification, pdw_cookie_: ?*u32) HRESULT {
                return @as(*const IPackageDebugSettings.VTable, @ptrCast(self.vtable)).RegisterForPackageStateChanges(@as(*const IPackageDebugSettings, @ptrCast(self)), package_full_name_, p_package_execution_state_change_notification_, pdw_cookie_);
            }
            pub inline fn unregisterForPackageStateChanges(self: *const T, dw_cookie_: u32) HRESULT {
                return @as(*const IPackageDebugSettings.VTable, @ptrCast(self.vtable)).UnregisterForPackageStateChanges(@as(*const IPackageDebugSettings, @ptrCast(self)), dw_cookie_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPackageDebugSettings2_Value = Guid.initString("6e3194bb-ab82-4d22-93f5-fabda40e7b16");
pub const IID_IPackageDebugSettings2 = &IID_IPackageDebugSettings2_Value;
pub const IPackageDebugSettings2 = extern struct {
    pub const VTable = extern struct {
        base: IPackageDebugSettings.VTable,
        EnumerateApps: *const fn (
            self: *const IPackageDebugSettings2,
            package_full_name: ?[*:0]const u16,
            app_count: ?*u32,
            app_user_model_ids: ?*?*?PWSTR,
            app_display_names: ?*?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPackageDebugSettings.MethodMixin(T);
            pub inline fn enumerateApps(self: *const T, package_full_name_: ?[*:0]const u16, app_count_: ?*u32, app_user_model_ids_: ?*?*?PWSTR, app_display_names_: ?*?*?PWSTR) HRESULT {
                return @as(*const IPackageDebugSettings2.VTable, @ptrCast(self.vtable)).EnumerateApps(@as(*const IPackageDebugSettings2, @ptrCast(self)), package_full_name_, app_count_, app_user_model_ids_, app_display_names_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_ISuspensionDependencyManager_Value = Guid.initString("52b83a42-2543-416a-81d9-c0de7969c8b3");
pub const IID_ISuspensionDependencyManager = &IID_ISuspensionDependencyManager_Value;
pub const ISuspensionDependencyManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterAsChild: *const fn (
            self: *const ISuspensionDependencyManager,
            process_handle: ?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GroupChildWithParent: *const fn (
            self: *const ISuspensionDependencyManager,
            child_process_handle: ?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UngroupChildFromParent: *const fn (
            self: *const ISuspensionDependencyManager,
            child_process_handle: ?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn registerAsChild(self: *const T, process_handle_: ?HANDLE) HRESULT {
                return @as(*const ISuspensionDependencyManager.VTable, @ptrCast(self.vtable)).RegisterAsChild(@as(*const ISuspensionDependencyManager, @ptrCast(self)), process_handle_);
            }
            pub inline fn groupChildWithParent(self: *const T, child_process_handle_: ?HANDLE) HRESULT {
                return @as(*const ISuspensionDependencyManager.VTable, @ptrCast(self.vtable)).GroupChildWithParent(@as(*const ISuspensionDependencyManager, @ptrCast(self)), child_process_handle_);
            }
            pub inline fn ungroupChildFromParent(self: *const T, child_process_handle_: ?HANDLE) HRESULT {
                return @as(*const ISuspensionDependencyManager.VTable, @ptrCast(self.vtable)).UngroupChildFromParent(@as(*const ISuspensionDependencyManager, @ptrCast(self)), child_process_handle_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const AHE_TYPE = enum(i32) {
    DESKTOP = 0,
    IMMERSIVE = 1,
};
pub const AHE_DESKTOP = AHE_TYPE.DESKTOP;
pub const AHE_IMMERSIVE = AHE_TYPE.IMMERSIVE;

// TODO: this type is limited to platform 'windows8.0'
const IID_IExecuteCommandApplicationHostEnvironment_Value = Guid.initString("18b21aa9-e184-4ff0-9f5e-f882d03771b3");
pub const IID_IExecuteCommandApplicationHostEnvironment = &IID_IExecuteCommandApplicationHostEnvironment_Value;
pub const IExecuteCommandApplicationHostEnvironment = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetValue: *const fn (
            self: *const IExecuteCommandApplicationHostEnvironment,
            pahe: ?*AHE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getValue(self: *const T, pahe_: ?*AHE_TYPE) HRESULT {
                return @as(*const IExecuteCommandApplicationHostEnvironment.VTable, @ptrCast(self.vtable)).GetValue(@as(*const IExecuteCommandApplicationHostEnvironment, @ptrCast(self)), pahe_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const EC_HOST_UI_MODE = enum(i32) {
    DESKTOP = 0,
    IMMERSIVE = 1,
    SYSTEM_LAUNCHER = 2,
};
pub const ECHUIM_DESKTOP = EC_HOST_UI_MODE.DESKTOP;
pub const ECHUIM_IMMERSIVE = EC_HOST_UI_MODE.IMMERSIVE;
pub const ECHUIM_SYSTEM_LAUNCHER = EC_HOST_UI_MODE.SYSTEM_LAUNCHER;

// TODO: this type is limited to platform 'windows8.0'
const IID_IExecuteCommandHost_Value = Guid.initString("4b6832a2-5f04-4c9d-b89d-727a15d103e7");
pub const IID_IExecuteCommandHost = &IID_IExecuteCommandHost_Value;
pub const IExecuteCommandHost = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetUIMode: *const fn (
            self: *const IExecuteCommandHost,
            p_u_i_mode: ?*EC_HOST_UI_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getUIMode(self: *const T, p_u_i_mode_: ?*EC_HOST_UI_MODE) HRESULT {
                return @as(*const IExecuteCommandHost.VTable, @ptrCast(self.vtable)).GetUIMode(@as(*const IExecuteCommandHost, @ptrCast(self)), p_u_i_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const APPLICATION_VIEW_STATE = enum(i32) {
    FULLSCREEN_LANDSCAPE = 0,
    FILLED = 1,
    SNAPPED = 2,
    FULLSCREEN_PORTRAIT = 3,
};
pub const AVS_FULLSCREEN_LANDSCAPE = APPLICATION_VIEW_STATE.FULLSCREEN_LANDSCAPE;
pub const AVS_FILLED = APPLICATION_VIEW_STATE.FILLED;
pub const AVS_SNAPPED = APPLICATION_VIEW_STATE.SNAPPED;
pub const AVS_FULLSCREEN_PORTRAIT = APPLICATION_VIEW_STATE.FULLSCREEN_PORTRAIT;

pub const EDGE_GESTURE_KIND = enum(i32) {
    TOUCH = 0,
    KEYBOARD = 1,
    MOUSE = 2,
};
pub const EGK_TOUCH = EDGE_GESTURE_KIND.TOUCH;
pub const EGK_KEYBOARD = EDGE_GESTURE_KIND.KEYBOARD;
pub const EGK_MOUSE = EDGE_GESTURE_KIND.MOUSE;

// TODO: this type is limited to platform 'windows8.0'
const IID_IApplicationDesignModeSettings_Value = Guid.initString("2a3dee9a-e31d-46d6-8508-bcc597db3557");
pub const IID_IApplicationDesignModeSettings = &IID_IApplicationDesignModeSettings_Value;
pub const IApplicationDesignModeSettings = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetNativeDisplaySize: *const fn (
            self: *const IApplicationDesignModeSettings,
            native_display_size_pixels: SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetScaleFactor: *const fn (
            self: *const IApplicationDesignModeSettings,
            scale_factor: DEVICE_SCALE_FACTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetApplicationViewState: *const fn (
            self: *const IApplicationDesignModeSettings,
            view_state: APPLICATION_VIEW_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ComputeApplicationSize: *const fn (
            self: *const IApplicationDesignModeSettings,
            application_size_pixels: ?*SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsApplicationViewStateSupported: *const fn (
            self: *const IApplicationDesignModeSettings,
            view_state: APPLICATION_VIEW_STATE,
            native_display_size_pixels: SIZE,
            scale_factor: DEVICE_SCALE_FACTOR,
            supported: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TriggerEdgeGesture: *const fn (
            self: *const IApplicationDesignModeSettings,
            edge_gesture_kind: EDGE_GESTURE_KIND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setNativeDisplaySize(self: *const T, native_display_size_pixels_: SIZE) HRESULT {
                return @as(*const IApplicationDesignModeSettings.VTable, @ptrCast(self.vtable)).SetNativeDisplaySize(@as(*const IApplicationDesignModeSettings, @ptrCast(self)), native_display_size_pixels_);
            }
            pub inline fn setScaleFactor(self: *const T, scale_factor_: DEVICE_SCALE_FACTOR) HRESULT {
                return @as(*const IApplicationDesignModeSettings.VTable, @ptrCast(self.vtable)).SetScaleFactor(@as(*const IApplicationDesignModeSettings, @ptrCast(self)), scale_factor_);
            }
            pub inline fn setApplicationViewState(self: *const T, view_state_: APPLICATION_VIEW_STATE) HRESULT {
                return @as(*const IApplicationDesignModeSettings.VTable, @ptrCast(self.vtable)).SetApplicationViewState(@as(*const IApplicationDesignModeSettings, @ptrCast(self)), view_state_);
            }
            pub inline fn computeApplicationSize(self: *const T, application_size_pixels_: ?*SIZE) HRESULT {
                return @as(*const IApplicationDesignModeSettings.VTable, @ptrCast(self.vtable)).ComputeApplicationSize(@as(*const IApplicationDesignModeSettings, @ptrCast(self)), application_size_pixels_);
            }
            pub inline fn isApplicationViewStateSupported(self: *const T, view_state_: APPLICATION_VIEW_STATE, native_display_size_pixels_: SIZE, scale_factor_: DEVICE_SCALE_FACTOR, supported_: ?*BOOL) HRESULT {
                return @as(*const IApplicationDesignModeSettings.VTable, @ptrCast(self.vtable)).IsApplicationViewStateSupported(@as(*const IApplicationDesignModeSettings, @ptrCast(self)), view_state_, native_display_size_pixels_, scale_factor_, supported_);
            }
            pub inline fn triggerEdgeGesture(self: *const T, edge_gesture_kind_: EDGE_GESTURE_KIND) HRESULT {
                return @as(*const IApplicationDesignModeSettings.VTable, @ptrCast(self.vtable)).TriggerEdgeGesture(@as(*const IApplicationDesignModeSettings, @ptrCast(self)), edge_gesture_kind_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const NATIVE_DISPLAY_ORIENTATION = enum(i32) {
    LANDSCAPE = 0,
    PORTRAIT = 1,
};
pub const NDO_LANDSCAPE = NATIVE_DISPLAY_ORIENTATION.LANDSCAPE;
pub const NDO_PORTRAIT = NATIVE_DISPLAY_ORIENTATION.PORTRAIT;

pub const APPLICATION_VIEW_ORIENTATION = enum(i32) {
    LANDSCAPE = 0,
    PORTRAIT = 1,
};
pub const AVO_LANDSCAPE = APPLICATION_VIEW_ORIENTATION.LANDSCAPE;
pub const AVO_PORTRAIT = APPLICATION_VIEW_ORIENTATION.PORTRAIT;

pub const ADJACENT_DISPLAY_EDGES = enum(i32) {
    NONE = 0,
    LEFT = 1,
    RIGHT = 2,
};
pub const ADE_NONE = ADJACENT_DISPLAY_EDGES.NONE;
pub const ADE_LEFT = ADJACENT_DISPLAY_EDGES.LEFT;
pub const ADE_RIGHT = ADJACENT_DISPLAY_EDGES.RIGHT;

pub const APPLICATION_VIEW_MIN_WIDTH = enum(i32) {
    DEFAULT = 0,
    @"320" = 1,
    @"500" = 2,
};
pub const AVMW_DEFAULT = APPLICATION_VIEW_MIN_WIDTH.DEFAULT;
pub const AVMW_320 = APPLICATION_VIEW_MIN_WIDTH.@"320";
pub const AVMW_500 = APPLICATION_VIEW_MIN_WIDTH.@"500";

// TODO: this type is limited to platform 'windows8.1'
const IID_IApplicationDesignModeSettings2_Value = Guid.initString("490514e1-675a-4d6e-a58d-e54901b4ca2f");
pub const IID_IApplicationDesignModeSettings2 = &IID_IApplicationDesignModeSettings2_Value;
pub const IApplicationDesignModeSettings2 = extern struct {
    pub const VTable = extern struct {
        base: IApplicationDesignModeSettings.VTable,
        SetNativeDisplayOrientation: *const fn (
            self: *const IApplicationDesignModeSettings2,
            native_display_orientation: NATIVE_DISPLAY_ORIENTATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetApplicationViewOrientation: *const fn (
            self: *const IApplicationDesignModeSettings2,
            view_orientation: APPLICATION_VIEW_ORIENTATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAdjacentDisplayEdges: *const fn (
            self: *const IApplicationDesignModeSettings2,
            adjacent_display_edges: ADJACENT_DISPLAY_EDGES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIsOnLockScreen: *const fn (
            self: *const IApplicationDesignModeSettings2,
            is_on_lock_screen: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetApplicationViewMinWidth: *const fn (
            self: *const IApplicationDesignModeSettings2,
            view_min_width: APPLICATION_VIEW_MIN_WIDTH,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationSizeBounds: *const fn (
            self: *const IApplicationDesignModeSettings2,
            min_application_size_pixels: ?*SIZE,
            max_application_size_pixels: ?*SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationViewOrientation: *const fn (
            self: *const IApplicationDesignModeSettings2,
            application_size_pixels: SIZE,
            view_orientation: ?*APPLICATION_VIEW_ORIENTATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IApplicationDesignModeSettings.MethodMixin(T);
            pub inline fn setNativeDisplayOrientation(self: *const T, native_display_orientation_: NATIVE_DISPLAY_ORIENTATION) HRESULT {
                return @as(*const IApplicationDesignModeSettings2.VTable, @ptrCast(self.vtable)).SetNativeDisplayOrientation(@as(*const IApplicationDesignModeSettings2, @ptrCast(self)), native_display_orientation_);
            }
            pub inline fn setApplicationViewOrientation(self: *const T, view_orientation_: APPLICATION_VIEW_ORIENTATION) HRESULT {
                return @as(*const IApplicationDesignModeSettings2.VTable, @ptrCast(self.vtable)).SetApplicationViewOrientation(@as(*const IApplicationDesignModeSettings2, @ptrCast(self)), view_orientation_);
            }
            pub inline fn setAdjacentDisplayEdges(self: *const T, adjacent_display_edges_: ADJACENT_DISPLAY_EDGES) HRESULT {
                return @as(*const IApplicationDesignModeSettings2.VTable, @ptrCast(self.vtable)).SetAdjacentDisplayEdges(@as(*const IApplicationDesignModeSettings2, @ptrCast(self)), adjacent_display_edges_);
            }
            pub inline fn setIsOnLockScreen(self: *const T, is_on_lock_screen_: BOOL) HRESULT {
                return @as(*const IApplicationDesignModeSettings2.VTable, @ptrCast(self.vtable)).SetIsOnLockScreen(@as(*const IApplicationDesignModeSettings2, @ptrCast(self)), is_on_lock_screen_);
            }
            pub inline fn setApplicationViewMinWidth(self: *const T, view_min_width_: APPLICATION_VIEW_MIN_WIDTH) HRESULT {
                return @as(*const IApplicationDesignModeSettings2.VTable, @ptrCast(self.vtable)).SetApplicationViewMinWidth(@as(*const IApplicationDesignModeSettings2, @ptrCast(self)), view_min_width_);
            }
            pub inline fn getApplicationSizeBounds(self: *const T, min_application_size_pixels_: ?*SIZE, max_application_size_pixels_: ?*SIZE) HRESULT {
                return @as(*const IApplicationDesignModeSettings2.VTable, @ptrCast(self.vtable)).GetApplicationSizeBounds(@as(*const IApplicationDesignModeSettings2, @ptrCast(self)), min_application_size_pixels_, max_application_size_pixels_);
            }
            pub inline fn getApplicationViewOrientation(self: *const T, application_size_pixels_: SIZE, view_orientation_: ?*APPLICATION_VIEW_ORIENTATION) HRESULT {
                return @as(*const IApplicationDesignModeSettings2.VTable, @ptrCast(self.vtable)).GetApplicationViewOrientation(@as(*const IApplicationDesignModeSettings2, @ptrCast(self)), application_size_pixels_, view_orientation_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_ILaunchTargetMonitor_Value = Guid.initString("266fbc7e-490d-46ed-a96b-2274db252003");
pub const IID_ILaunchTargetMonitor = &IID_ILaunchTargetMonitor_Value;
pub const ILaunchTargetMonitor = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMonitor: *const fn (
            self: *const ILaunchTargetMonitor,
            monitor: ?*?HMONITOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getMonitor(self: *const T, monitor_: ?*?HMONITOR) HRESULT {
                return @as(*const ILaunchTargetMonitor.VTable, @ptrCast(self.vtable)).GetMonitor(@as(*const ILaunchTargetMonitor, @ptrCast(self)), monitor_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const APPLICATION_VIEW_SIZE_PREFERENCE = enum(i32) {
    DEFAULT = 0,
    USE_LESS = 1,
    USE_HALF = 2,
    USE_MORE = 3,
    USE_MINIMUM = 4,
    USE_NONE = 5,
    CUSTOM = 6,
};
pub const AVSP_DEFAULT = APPLICATION_VIEW_SIZE_PREFERENCE.DEFAULT;
pub const AVSP_USE_LESS = APPLICATION_VIEW_SIZE_PREFERENCE.USE_LESS;
pub const AVSP_USE_HALF = APPLICATION_VIEW_SIZE_PREFERENCE.USE_HALF;
pub const AVSP_USE_MORE = APPLICATION_VIEW_SIZE_PREFERENCE.USE_MORE;
pub const AVSP_USE_MINIMUM = APPLICATION_VIEW_SIZE_PREFERENCE.USE_MINIMUM;
pub const AVSP_USE_NONE = APPLICATION_VIEW_SIZE_PREFERENCE.USE_NONE;
pub const AVSP_CUSTOM = APPLICATION_VIEW_SIZE_PREFERENCE.CUSTOM;

// TODO: this type is limited to platform 'windows8.1'
const IID_ILaunchSourceViewSizePreference_Value = Guid.initString("e5aa01f7-1fb8-4830-8720-4e6734cbd5f3");
pub const IID_ILaunchSourceViewSizePreference = &IID_ILaunchSourceViewSizePreference_Value;
pub const ILaunchSourceViewSizePreference = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSourceViewToPosition: *const fn (
            self: *const ILaunchSourceViewSizePreference,
            hwnd: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSourceViewSizePreference: *const fn (
            self: *const ILaunchSourceViewSizePreference,
            source_size_after_launch: ?*APPLICATION_VIEW_SIZE_PREFERENCE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSourceViewToPosition(self: *const T, hwnd_: ?*?HWND) HRESULT {
                return @as(*const ILaunchSourceViewSizePreference.VTable, @ptrCast(self.vtable)).GetSourceViewToPosition(@as(*const ILaunchSourceViewSizePreference, @ptrCast(self)), hwnd_);
            }
            pub inline fn getSourceViewSizePreference(self: *const T, source_size_after_launch_: ?*APPLICATION_VIEW_SIZE_PREFERENCE) HRESULT {
                return @as(*const ILaunchSourceViewSizePreference.VTable, @ptrCast(self.vtable)).GetSourceViewSizePreference(@as(*const ILaunchSourceViewSizePreference, @ptrCast(self)), source_size_after_launch_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_ILaunchTargetViewSizePreference_Value = Guid.initString("2f0666c6-12f7-4360-b511-a394a0553725");
pub const IID_ILaunchTargetViewSizePreference = &IID_ILaunchTargetViewSizePreference_Value;
pub const ILaunchTargetViewSizePreference = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTargetViewSizePreference: *const fn (
            self: *const ILaunchTargetViewSizePreference,
            target_size_on_launch: ?*APPLICATION_VIEW_SIZE_PREFERENCE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getTargetViewSizePreference(self: *const T, target_size_on_launch_: ?*APPLICATION_VIEW_SIZE_PREFERENCE) HRESULT {
                return @as(*const ILaunchTargetViewSizePreference.VTable, @ptrCast(self.vtable)).GetTargetViewSizePreference(@as(*const ILaunchTargetViewSizePreference, @ptrCast(self)), target_size_on_launch_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_ILaunchSourceAppUserModelId_Value = Guid.initString("989191ac-28ff-4cf0-9584-e0d078bc2396");
pub const IID_ILaunchSourceAppUserModelId = &IID_ILaunchSourceAppUserModelId_Value;
pub const ILaunchSourceAppUserModelId = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAppUserModelId: *const fn (
            self: *const ILaunchSourceAppUserModelId,
            launching_app: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAppUserModelId(self: *const T, launching_app_: ?*?PWSTR) HRESULT {
                return @as(*const ILaunchSourceAppUserModelId.VTable, @ptrCast(self.vtable)).GetAppUserModelId(@as(*const ILaunchSourceAppUserModelId, @ptrCast(self)), launching_app_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IInitializeWithWindow_Value = Guid.initString("3e68d4bd-7135-4d10-8018-9fb6d9f33fa1");
pub const IID_IInitializeWithWindow = &IID_IInitializeWithWindow_Value;
pub const IInitializeWithWindow = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IInitializeWithWindow,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, hwnd_: ?HWND) HRESULT {
                return @as(*const IInitializeWithWindow.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IInitializeWithWindow, @ptrCast(self)), hwnd_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IHandlerInfo_Value = Guid.initString("997706ef-f880-453b-8118-39e1a2d2655a");
pub const IID_IHandlerInfo = &IID_IHandlerInfo_Value;
pub const IHandlerInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetApplicationDisplayName: *const fn (
            self: *const IHandlerInfo,
            value: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationPublisher: *const fn (
            self: *const IHandlerInfo,
            value: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationIconReference: *const fn (
            self: *const IHandlerInfo,
            value: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getApplicationDisplayName(self: *const T, value_: ?*?PWSTR) HRESULT {
                return @as(*const IHandlerInfo.VTable, @ptrCast(self.vtable)).GetApplicationDisplayName(@as(*const IHandlerInfo, @ptrCast(self)), value_);
            }
            pub inline fn getApplicationPublisher(self: *const T, value_: ?*?PWSTR) HRESULT {
                return @as(*const IHandlerInfo.VTable, @ptrCast(self.vtable)).GetApplicationPublisher(@as(*const IHandlerInfo, @ptrCast(self)), value_);
            }
            pub inline fn getApplicationIconReference(self: *const T, value_: ?*?PWSTR) HRESULT {
                return @as(*const IHandlerInfo.VTable, @ptrCast(self.vtable)).GetApplicationIconReference(@as(*const IHandlerInfo, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IHandlerInfo2_Value = Guid.initString("31cca04c-04d3-4ea9-90de-97b15e87a532");
pub const IID_IHandlerInfo2 = &IID_IHandlerInfo2_Value;
pub const IHandlerInfo2 = extern struct {
    pub const VTable = extern struct {
        base: IHandlerInfo.VTable,
        GetApplicationId: *const fn (
            self: *const IHandlerInfo2,
            value: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IHandlerInfo.MethodMixin(T);
            pub inline fn getApplicationId(self: *const T, value_: ?*?PWSTR) HRESULT {
                return @as(*const IHandlerInfo2.VTable, @ptrCast(self.vtable)).GetApplicationId(@as(*const IHandlerInfo2, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IHandlerActivationHost_Value = Guid.initString("35094a87-8bb1-4237-96c6-c417eebdb078");
pub const IID_IHandlerActivationHost = &IID_IHandlerActivationHost_Value;
pub const IHandlerActivationHost = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        BeforeCoCreateInstance: *const fn (
            self: *const IHandlerActivationHost,
            clsid_handler: ?*const Guid,
            items_being_activated: ?*IShellItemArray,
            handler_info: ?*IHandlerInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BeforeCreateProcess: *const fn (
            self: *const IHandlerActivationHost,
            application_path: ?[*:0]const u16,
            command_line: ?[*:0]const u16,
            handler_info: ?*IHandlerInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn beforeCoCreateInstance(self: *const T, clsid_handler_: ?*const Guid, items_being_activated_: ?*IShellItemArray, handler_info_: ?*IHandlerInfo) HRESULT {
                return @as(*const IHandlerActivationHost.VTable, @ptrCast(self.vtable)).BeforeCoCreateInstance(@as(*const IHandlerActivationHost, @ptrCast(self)), clsid_handler_, items_being_activated_, handler_info_);
            }
            pub inline fn beforeCreateProcess(self: *const T, application_path_: ?[*:0]const u16, command_line_: ?[*:0]const u16, handler_info_: ?*IHandlerInfo) HRESULT {
                return @as(*const IHandlerActivationHost.VTable, @ptrCast(self.vtable)).BeforeCreateProcess(@as(*const IHandlerActivationHost, @ptrCast(self)), application_path_, command_line_, handler_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IAppActivationUIInfo_Value = Guid.initString("abad189d-9fa3-4278-b3ca-8ca448a88dcb");
pub const IID_IAppActivationUIInfo = &IID_IAppActivationUIInfo_Value;
pub const IAppActivationUIInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMonitor: *const fn (
            self: *const IAppActivationUIInfo,
            value: ?*?HMONITOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInvokePoint: *const fn (
            self: *const IAppActivationUIInfo,
            value: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShowCommand: *const fn (
            self: *const IAppActivationUIInfo,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShowUI: *const fn (
            self: *const IAppActivationUIInfo,
            value: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyState: *const fn (
            self: *const IAppActivationUIInfo,
            value: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getMonitor(self: *const T, value_: ?*?HMONITOR) HRESULT {
                return @as(*const IAppActivationUIInfo.VTable, @ptrCast(self.vtable)).GetMonitor(@as(*const IAppActivationUIInfo, @ptrCast(self)), value_);
            }
            pub inline fn getInvokePoint(self: *const T, value_: ?*POINT) HRESULT {
                return @as(*const IAppActivationUIInfo.VTable, @ptrCast(self.vtable)).GetInvokePoint(@as(*const IAppActivationUIInfo, @ptrCast(self)), value_);
            }
            pub inline fn getShowCommand(self: *const T, value_: ?*i32) HRESULT {
                return @as(*const IAppActivationUIInfo.VTable, @ptrCast(self.vtable)).GetShowCommand(@as(*const IAppActivationUIInfo, @ptrCast(self)), value_);
            }
            pub inline fn getShowUI(self: *const T, value_: ?*BOOL) HRESULT {
                return @as(*const IAppActivationUIInfo.VTable, @ptrCast(self.vtable)).GetShowUI(@as(*const IAppActivationUIInfo, @ptrCast(self)), value_);
            }
            pub inline fn getKeyState(self: *const T, value_: ?*u32) HRESULT {
                return @as(*const IAppActivationUIInfo.VTable, @ptrCast(self.vtable)).GetKeyState(@as(*const IAppActivationUIInfo, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FLYOUT_PLACEMENT = enum(i32) {
    DEFAULT = 0,
    ABOVE = 1,
    BELOW = 2,
    LEFT = 3,
    RIGHT = 4,
};
pub const FP_DEFAULT = FLYOUT_PLACEMENT.DEFAULT;
pub const FP_ABOVE = FLYOUT_PLACEMENT.ABOVE;
pub const FP_BELOW = FLYOUT_PLACEMENT.BELOW;
pub const FP_LEFT = FLYOUT_PLACEMENT.LEFT;
pub const FP_RIGHT = FLYOUT_PLACEMENT.RIGHT;

// TODO: this type is limited to platform 'windows8.1'
const IID_IContactManagerInterop_Value = Guid.initString("99eacba7-e073-43b6-a896-55afe48a0833");
pub const IID_IContactManagerInterop = &IID_IContactManagerInterop_Value;
pub const IContactManagerInterop = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ShowContactCardForWindow: *const fn (
            self: *const IContactManagerInterop,
            app_window: ?HWND,
            contact: ?*IUnknown,
            selection: ?*const RECT,
            preferred_placement: FLYOUT_PLACEMENT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn showContactCardForWindow(self: *const T, app_window_: ?HWND, contact_: ?*IUnknown, selection_: ?*const RECT, preferred_placement_: FLYOUT_PLACEMENT) HRESULT {
                return @as(*const IContactManagerInterop.VTable, @ptrCast(self.vtable)).ShowContactCardForWindow(@as(*const IContactManagerInterop, @ptrCast(self)), app_window_, contact_, selection_, preferred_placement_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IShellIconOverlayIdentifier_Value = Guid.initString("0c6c4200-c589-11d0-999a-00c04fd655e1");
pub const IID_IShellIconOverlayIdentifier = &IID_IShellIconOverlayIdentifier_Value;
pub const IShellIconOverlayIdentifier = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        IsMemberOf: *const fn (
            self: *const IShellIconOverlayIdentifier,
            pwsz_path: ?[*:0]const u16,
            dw_attrib: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOverlayInfo: *const fn (
            self: *const IShellIconOverlayIdentifier,
            pwsz_icon_file: [*:0]u16,
            cch_max: i32,
            p_index: ?*i32,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPriority: *const fn (
            self: *const IShellIconOverlayIdentifier,
            p_priority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn isMemberOf(self: *const T, pwsz_path_: ?[*:0]const u16, dw_attrib_: u32) HRESULT {
                return @as(*const IShellIconOverlayIdentifier.VTable, @ptrCast(self.vtable)).IsMemberOf(@as(*const IShellIconOverlayIdentifier, @ptrCast(self)), pwsz_path_, dw_attrib_);
            }
            pub inline fn getOverlayInfo(self: *const T, pwsz_icon_file_: [*:0]u16, cch_max_: i32, p_index_: ?*i32, pdw_flags_: ?*u32) HRESULT {
                return @as(*const IShellIconOverlayIdentifier.VTable, @ptrCast(self.vtable)).GetOverlayInfo(@as(*const IShellIconOverlayIdentifier, @ptrCast(self)), pwsz_icon_file_, cch_max_, p_index_, pdw_flags_);
            }
            pub inline fn getPriority(self: *const T, p_priority_: ?*i32) HRESULT {
                return @as(*const IShellIconOverlayIdentifier.VTable, @ptrCast(self.vtable)).GetPriority(@as(*const IShellIconOverlayIdentifier, @ptrCast(self)), p_priority_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const BANNER_NOTIFICATION_EVENT = enum(i32) {
    Rendered = 0,
    Hovered = 1,
    Closed = 2,
    Dismissed = 3,
    Button1Clicked = 4,
    Button2Clicked = 5,
};
pub const BNE_Rendered = BANNER_NOTIFICATION_EVENT.Rendered;
pub const BNE_Hovered = BANNER_NOTIFICATION_EVENT.Hovered;
pub const BNE_Closed = BANNER_NOTIFICATION_EVENT.Closed;
pub const BNE_Dismissed = BANNER_NOTIFICATION_EVENT.Dismissed;
pub const BNE_Button1Clicked = BANNER_NOTIFICATION_EVENT.Button1Clicked;
pub const BNE_Button2Clicked = BANNER_NOTIFICATION_EVENT.Button2Clicked;

pub const BANNER_NOTIFICATION = extern struct {
    event: BANNER_NOTIFICATION_EVENT,
    providerIdentity: ?[*:0]const u16,
    contentId: ?[*:0]const u16,
};

const IID_IBannerNotificationHandler_Value = Guid.initString("8d7b2ba7-db05-46a8-823c-d2b6de08ee91");
pub const IID_IBannerNotificationHandler = &IID_IBannerNotificationHandler_Value;
pub const IBannerNotificationHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnBannerEvent: *const fn (
            self: *const IBannerNotificationHandler,
            notification: ?*const BANNER_NOTIFICATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onBannerEvent(self: *const T, notification_: ?*const BANNER_NOTIFICATION) HRESULT {
                return @as(*const IBannerNotificationHandler.VTable, @ptrCast(self.vtable)).OnBannerEvent(@as(*const IBannerNotificationHandler, @ptrCast(self)), notification_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SORT_ORDER_TYPE = enum(i32) {
    DEFAULT = 0,
    IGNORE_FOLDERNESS = 1,
};
pub const SOT_DEFAULT = SORT_ORDER_TYPE.DEFAULT;
pub const SOT_IGNORE_FOLDERNESS = SORT_ORDER_TYPE.IGNORE_FOLDERNESS;

const IID_ISortColumnArray_Value = Guid.initString("6dfc60fb-f2e9-459b-beb5-288f1a7c7d54");
pub const IID_ISortColumnArray = &IID_ISortColumnArray_Value;
pub const ISortColumnArray = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const ISortColumnArray,
            column_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const ISortColumnArray,
            index: u32,
            sortcolumn: ?*SORTCOLUMN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSortType: *const fn (
            self: *const ISortColumnArray,
            type: ?*SORT_ORDER_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, column_count_: ?*u32) HRESULT {
                return @as(*const ISortColumnArray.VTable, @ptrCast(self.vtable)).GetCount(@as(*const ISortColumnArray, @ptrCast(self)), column_count_);
            }
            pub inline fn getAt(self: *const T, index_: u32, sortcolumn_: ?*SORTCOLUMN) HRESULT {
                return @as(*const ISortColumnArray.VTable, @ptrCast(self.vtable)).GetAt(@as(*const ISortColumnArray, @ptrCast(self)), index_, sortcolumn_);
            }
            pub inline fn getSortType(self: *const T, type_: ?*SORT_ORDER_TYPE) HRESULT {
                return @as(*const ISortColumnArray.VTable, @ptrCast(self.vtable)).GetSortType(@as(*const ISortColumnArray, @ptrCast(self)), type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPropertyKeyStore_Value = Guid.initString("75bd59aa-f23b-4963-aba4-0b355752a91b");
pub const IID_IPropertyKeyStore = &IID_IPropertyKeyStore_Value;
pub const IPropertyKeyStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetKeyCount: *const fn (
            self: *const IPropertyKeyStore,
            key_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKeyAt: *const fn (
            self: *const IPropertyKeyStore,
            index: i32,
            pkey: ?*PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendKey: *const fn (
            self: *const IPropertyKeyStore,
            key: ?*const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteKey: *const fn (
            self: *const IPropertyKeyStore,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsKeyInStore: *const fn (
            self: *const IPropertyKeyStore,
            key: ?*const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveKey: *const fn (
            self: *const IPropertyKeyStore,
            key: ?*const PROPERTYKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getKeyCount(self: *const T, key_count_: ?*i32) HRESULT {
                return @as(*const IPropertyKeyStore.VTable, @ptrCast(self.vtable)).GetKeyCount(@as(*const IPropertyKeyStore, @ptrCast(self)), key_count_);
            }
            pub inline fn getKeyAt(self: *const T, index_: i32, pkey_: ?*PROPERTYKEY) HRESULT {
                return @as(*const IPropertyKeyStore.VTable, @ptrCast(self.vtable)).GetKeyAt(@as(*const IPropertyKeyStore, @ptrCast(self)), index_, pkey_);
            }
            pub inline fn appendKey(self: *const T, key_: ?*const PROPERTYKEY) HRESULT {
                return @as(*const IPropertyKeyStore.VTable, @ptrCast(self.vtable)).AppendKey(@as(*const IPropertyKeyStore, @ptrCast(self)), key_);
            }
            pub inline fn deleteKey(self: *const T, index_: i32) HRESULT {
                return @as(*const IPropertyKeyStore.VTable, @ptrCast(self.vtable)).DeleteKey(@as(*const IPropertyKeyStore, @ptrCast(self)), index_);
            }
            pub inline fn isKeyInStore(self: *const T, key_: ?*const PROPERTYKEY) HRESULT {
                return @as(*const IPropertyKeyStore.VTable, @ptrCast(self.vtable)).IsKeyInStore(@as(*const IPropertyKeyStore, @ptrCast(self)), key_);
            }
            pub inline fn removeKey(self: *const T, key_: ?*const PROPERTYKEY) HRESULT {
                return @as(*const IPropertyKeyStore.VTable, @ptrCast(self.vtable)).RemoveKey(@as(*const IPropertyKeyStore, @ptrCast(self)), key_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IQueryCodePage_Value = Guid.initString("c7b236ce-ee80-11d0-985f-006008059382");
pub const IID_IQueryCodePage = &IID_IQueryCodePage_Value;
pub const IQueryCodePage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCodePage: *const fn (
            self: *const IQueryCodePage,
            pui_code_page: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCodePage: *const fn (
            self: *const IQueryCodePage,
            ui_code_page: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCodePage(self: *const T, pui_code_page_: ?*u32) HRESULT {
                return @as(*const IQueryCodePage.VTable, @ptrCast(self.vtable)).GetCodePage(@as(*const IQueryCodePage, @ptrCast(self)), pui_code_page_);
            }
            pub inline fn setCodePage(self: *const T, ui_code_page_: u32) HRESULT {
                return @as(*const IQueryCodePage.VTable, @ptrCast(self.vtable)).SetCodePage(@as(*const IQueryCodePage, @ptrCast(self)), ui_code_page_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const FOLDERVIEWOPTIONS = enum(i32) {
    DEFAULT = 0,
    VISTALAYOUT = 1,
    CUSTOMPOSITION = 2,
    CUSTOMORDERING = 4,
    SUPPORTHYPERLINKS = 8,
    NOANIMATIONS = 16,
    NOSCROLLTIPS = 32,
};
pub const FVO_DEFAULT = FOLDERVIEWOPTIONS.DEFAULT;
pub const FVO_VISTALAYOUT = FOLDERVIEWOPTIONS.VISTALAYOUT;
pub const FVO_CUSTOMPOSITION = FOLDERVIEWOPTIONS.CUSTOMPOSITION;
pub const FVO_CUSTOMORDERING = FOLDERVIEWOPTIONS.CUSTOMORDERING;
pub const FVO_SUPPORTHYPERLINKS = FOLDERVIEWOPTIONS.SUPPORTHYPERLINKS;
pub const FVO_NOANIMATIONS = FOLDERVIEWOPTIONS.NOANIMATIONS;
pub const FVO_NOSCROLLTIPS = FOLDERVIEWOPTIONS.NOSCROLLTIPS;

// TODO: this type is limited to platform 'windows6.1'
const IID_IFolderViewOptions_Value = Guid.initString("3cc974d2-b302-4d36-ad3e-06d93f695d3f");
pub const IID_IFolderViewOptions = &IID_IFolderViewOptions_Value;
pub const IFolderViewOptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFolderViewOptions: *const fn (
            self: *const IFolderViewOptions,
            fvo_mask: FOLDERVIEWOPTIONS,
            fvo_flags: FOLDERVIEWOPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderViewOptions: *const fn (
            self: *const IFolderViewOptions,
            pfvo_flags: ?*FOLDERVIEWOPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setFolderViewOptions(self: *const T, fvo_mask_: FOLDERVIEWOPTIONS, fvo_flags_: FOLDERVIEWOPTIONS) HRESULT {
                return @as(*const IFolderViewOptions.VTable, @ptrCast(self.vtable)).SetFolderViewOptions(@as(*const IFolderViewOptions, @ptrCast(self)), fvo_mask_, fvo_flags_);
            }
            pub inline fn getFolderViewOptions(self: *const T, pfvo_flags_: ?*FOLDERVIEWOPTIONS) HRESULT {
                return @as(*const IFolderViewOptions.VTable, @ptrCast(self.vtable)).GetFolderViewOptions(@as(*const IFolderViewOptions, @ptrCast(self)), pfvo_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const _SV3CVW3_FLAGS = enum(i32) {
    DEFAULT = 0,
    NONINTERACTIVE = 1,
    FORCEVIEWMODE = 2,
    FORCEFOLDERFLAGS = 4,
};
pub const SV3CVW3_DEFAULT = _SV3CVW3_FLAGS.DEFAULT;
pub const SV3CVW3_NONINTERACTIVE = _SV3CVW3_FLAGS.NONINTERACTIVE;
pub const SV3CVW3_FORCEVIEWMODE = _SV3CVW3_FLAGS.FORCEVIEWMODE;
pub const SV3CVW3_FORCEFOLDERFLAGS = _SV3CVW3_FLAGS.FORCEFOLDERFLAGS;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IShellView3_Value = Guid.initString("ec39fa88-f8af-41c5-8421-38bed28f4673");
pub const IID_IShellView3 = &IID_IShellView3_Value;
pub const IShellView3 = extern struct {
    pub const VTable = extern struct {
        base: IShellView2.VTable,
        CreateViewWindow3: *const fn (
            self: *const IShellView3,
            psb_owner: ?*IShellBrowser,
            psv_prev: ?*IShellView,
            dw_view_flags: u32,
            dw_mask: FOLDERFLAGS,
            dw_flags: FOLDERFLAGS,
            fv_mode: FOLDERVIEWMODE,
            pvid: ?*const Guid,
            prc_view: ?*const RECT,
            phwnd_view: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellView2.MethodMixin(T);
            pub inline fn createViewWindow3(self: *const T, psb_owner_: ?*IShellBrowser, psv_prev_: ?*IShellView, dw_view_flags_: u32, dw_mask_: FOLDERFLAGS, dw_flags_: FOLDERFLAGS, fv_mode_: FOLDERVIEWMODE, pvid_: ?*const Guid, prc_view_: ?*const RECT, phwnd_view_: ?*?HWND) HRESULT {
                return @as(*const IShellView3.VTable, @ptrCast(self.vtable)).CreateViewWindow3(@as(*const IShellView3, @ptrCast(self)), psb_owner_, psv_prev_, dw_view_flags_, dw_mask_, dw_flags_, fv_mode_, pvid_, prc_view_, phwnd_view_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ISearchBoxInfo_Value = Guid.initString("6af6e03f-d664-4ef4-9626-f7e0ed36755e");
pub const IID_ISearchBoxInfo = &IID_ISearchBoxInfo_Value;
pub const ISearchBoxInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCondition: *const fn (
            self: *const ISearchBoxInfo,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetText: *const fn (
            self: *const ISearchBoxInfo,
            ppsz: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCondition(self: *const T, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const ISearchBoxInfo.VTable, @ptrCast(self.vtable)).GetCondition(@as(*const ISearchBoxInfo, @ptrCast(self)), riid_, ppv_);
            }
            pub inline fn getText(self: *const T, ppsz_: ?*?PWSTR) HRESULT {
                return @as(*const ISearchBoxInfo.VTable, @ptrCast(self.vtable)).GetText(@as(*const ISearchBoxInfo, @ptrCast(self)), ppsz_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const VPWATERMARKFLAGS = enum(i32) {
    DEFAULT = 0,
    ALPHABLEND = 1,
};
pub const VPWF_DEFAULT = VPWATERMARKFLAGS.DEFAULT;
pub const VPWF_ALPHABLEND = VPWATERMARKFLAGS.ALPHABLEND;

pub const VPCOLORFLAGS = enum(i32) {
    TEXT = 1,
    BACKGROUND = 2,
    SORTCOLUMN = 3,
    SUBTEXT = 4,
    TEXTBACKGROUND = 5,
};
pub const VPCF_TEXT = VPCOLORFLAGS.TEXT;
pub const VPCF_BACKGROUND = VPCOLORFLAGS.BACKGROUND;
pub const VPCF_SORTCOLUMN = VPCOLORFLAGS.SORTCOLUMN;
pub const VPCF_SUBTEXT = VPCOLORFLAGS.SUBTEXT;
pub const VPCF_TEXTBACKGROUND = VPCOLORFLAGS.TEXTBACKGROUND;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IVisualProperties_Value = Guid.initString("e693cf68-d967-4112-8763-99172aee5e5a");
pub const IID_IVisualProperties = &IID_IVisualProperties_Value;
pub const IVisualProperties = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetWatermark: *const fn (
            self: *const IVisualProperties,
            hbmp: ?HBITMAP,
            vpwf: VPWATERMARKFLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColor: *const fn (
            self: *const IVisualProperties,
            vpcf: VPCOLORFLAGS,
            cr: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColor: *const fn (
            self: *const IVisualProperties,
            vpcf: VPCOLORFLAGS,
            pcr: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItemHeight: *const fn (
            self: *const IVisualProperties,
            cy_item_in_pixels: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemHeight: *const fn (
            self: *const IVisualProperties,
            cy_item_in_pixels: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFont: *const fn (
            self: *const IVisualProperties,
            plf: ?*const LOGFONTW,
            b_redraw: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFont: *const fn (
            self: *const IVisualProperties,
            plf: ?*LOGFONTW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTheme: *const fn (
            self: *const IVisualProperties,
            psz_sub_app_name: ?[*:0]const u16,
            psz_sub_id_list: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setWatermark(self: *const T, hbmp_: ?HBITMAP, vpwf_: VPWATERMARKFLAGS) HRESULT {
                return @as(*const IVisualProperties.VTable, @ptrCast(self.vtable)).SetWatermark(@as(*const IVisualProperties, @ptrCast(self)), hbmp_, vpwf_);
            }
            pub inline fn setColor(self: *const T, vpcf_: VPCOLORFLAGS, cr_: u32) HRESULT {
                return @as(*const IVisualProperties.VTable, @ptrCast(self.vtable)).SetColor(@as(*const IVisualProperties, @ptrCast(self)), vpcf_, cr_);
            }
            pub inline fn getColor(self: *const T, vpcf_: VPCOLORFLAGS, pcr_: ?*u32) HRESULT {
                return @as(*const IVisualProperties.VTable, @ptrCast(self.vtable)).GetColor(@as(*const IVisualProperties, @ptrCast(self)), vpcf_, pcr_);
            }
            pub inline fn setItemHeight(self: *const T, cy_item_in_pixels_: i32) HRESULT {
                return @as(*const IVisualProperties.VTable, @ptrCast(self.vtable)).SetItemHeight(@as(*const IVisualProperties, @ptrCast(self)), cy_item_in_pixels_);
            }
            pub inline fn getItemHeight(self: *const T, cy_item_in_pixels_: ?*i32) HRESULT {
                return @as(*const IVisualProperties.VTable, @ptrCast(self.vtable)).GetItemHeight(@as(*const IVisualProperties, @ptrCast(self)), cy_item_in_pixels_);
            }
            pub inline fn setFont(self: *const T, plf_: ?*const LOGFONTW, b_redraw_: BOOL) HRESULT {
                return @as(*const IVisualProperties.VTable, @ptrCast(self.vtable)).SetFont(@as(*const IVisualProperties, @ptrCast(self)), plf_, b_redraw_);
            }
            pub inline fn getFont(self: *const T, plf_: ?*LOGFONTW) HRESULT {
                return @as(*const IVisualProperties.VTable, @ptrCast(self.vtable)).GetFont(@as(*const IVisualProperties, @ptrCast(self)), plf_);
            }
            pub inline fn setTheme(self: *const T, psz_sub_app_name_: ?[*:0]const u16, psz_sub_id_list_: ?[*:0]const u16) HRESULT {
                return @as(*const IVisualProperties.VTable, @ptrCast(self.vtable)).SetTheme(@as(*const IVisualProperties, @ptrCast(self)), psz_sub_app_name_, psz_sub_id_list_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICommDlgBrowser3_Value = Guid.initString("c8ad25a1-3294-41ee-8165-71174bd01c57");
pub const IID_ICommDlgBrowser3 = &IID_ICommDlgBrowser3_Value;
pub const ICommDlgBrowser3 = extern struct {
    pub const VTable = extern struct {
        base: ICommDlgBrowser2.VTable,
        OnColumnClicked: *const fn (
            self: *const ICommDlgBrowser3,
            ppshv: ?*IShellView,
            i_column: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentFilter: *const fn (
            self: *const ICommDlgBrowser3,
            psz_file_spec: [*:0]u16,
            cch_file_spec: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnPreViewCreated: *const fn (
            self: *const ICommDlgBrowser3,
            ppshv: ?*IShellView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICommDlgBrowser2.MethodMixin(T);
            pub inline fn onColumnClicked(self: *const T, ppshv_: ?*IShellView, i_column_: i32) HRESULT {
                return @as(*const ICommDlgBrowser3.VTable, @ptrCast(self.vtable)).OnColumnClicked(@as(*const ICommDlgBrowser3, @ptrCast(self)), ppshv_, i_column_);
            }
            pub inline fn getCurrentFilter(self: *const T, psz_file_spec_: [*:0]u16, cch_file_spec_: i32) HRESULT {
                return @as(*const ICommDlgBrowser3.VTable, @ptrCast(self.vtable)).GetCurrentFilter(@as(*const ICommDlgBrowser3, @ptrCast(self)), psz_file_spec_, cch_file_spec_);
            }
            pub inline fn onPreViewCreated(self: *const T, ppshv_: ?*IShellView) HRESULT {
                return @as(*const ICommDlgBrowser3.VTable, @ptrCast(self.vtable)).OnPreViewCreated(@as(*const ICommDlgBrowser3, @ptrCast(self)), ppshv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IUserAccountChangeCallback_Value = Guid.initString("a561e69a-b4b8-4113-91a5-64c6bcca3430");
pub const IID_IUserAccountChangeCallback = &IID_IUserAccountChangeCallback_Value;
pub const IUserAccountChangeCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnPictureChange: *const fn (
            self: *const IUserAccountChangeCallback,
            psz_user_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onPictureChange(self: *const T, psz_user_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IUserAccountChangeCallback.VTable, @ptrCast(self.vtable)).OnPictureChange(@as(*const IUserAccountChangeCallback, @ptrCast(self)), psz_user_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IStreamAsync_Value = Guid.initString("fe0b6665-e0ca-49b9-a178-2b5cb48d92a5");
pub const IID_IStreamAsync = &IID_IStreamAsync_Value;
pub const IStreamAsync = extern struct {
    pub const VTable = extern struct {
        base: IStream.VTable,
        ReadAsync: *const fn (
            self: *const IStreamAsync,
            // TODO: what to do with BytesParamIndex 1?
            pv: ?*anyopaque,
            cb: u32,
            pcb_read: ?*u32,
            lp_overlapped: ?*OVERLAPPED,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteAsync: *const fn (
            self: *const IStreamAsync,
            // TODO: what to do with BytesParamIndex 1?
            lp_buffer: ?*const anyopaque,
            cb: u32,
            pcb_written: ?*u32,
            lp_overlapped: ?*OVERLAPPED,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OverlappedResult: *const fn (
            self: *const IStreamAsync,
            lp_overlapped: ?*OVERLAPPED,
            lp_number_of_bytes_transferred: ?*u32,
            b_wait: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelIo: *const fn (
            self: *const IStreamAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IStream.MethodMixin(T);
            pub inline fn readAsync(self: *const T, pv_: ?*anyopaque, cb_: u32, pcb_read_: ?*u32, lp_overlapped_: ?*OVERLAPPED) HRESULT {
                return @as(*const IStreamAsync.VTable, @ptrCast(self.vtable)).ReadAsync(@as(*const IStreamAsync, @ptrCast(self)), pv_, cb_, pcb_read_, lp_overlapped_);
            }
            pub inline fn writeAsync(self: *const T, lp_buffer_: ?*const anyopaque, cb_: u32, pcb_written_: ?*u32, lp_overlapped_: ?*OVERLAPPED) HRESULT {
                return @as(*const IStreamAsync.VTable, @ptrCast(self.vtable)).WriteAsync(@as(*const IStreamAsync, @ptrCast(self)), lp_buffer_, cb_, pcb_written_, lp_overlapped_);
            }
            pub inline fn overlappedResult(self: *const T, lp_overlapped_: ?*OVERLAPPED, lp_number_of_bytes_transferred_: ?*u32, b_wait_: BOOL) HRESULT {
                return @as(*const IStreamAsync.VTable, @ptrCast(self.vtable)).OverlappedResult(@as(*const IStreamAsync, @ptrCast(self)), lp_overlapped_, lp_number_of_bytes_transferred_, b_wait_);
            }
            pub inline fn cancelIo(self: *const T) HRESULT {
                return @as(*const IStreamAsync.VTable, @ptrCast(self.vtable)).CancelIo(@as(*const IStreamAsync, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IStreamUnbufferedInfo_Value = Guid.initString("8a68fdda-1fdc-4c20-8ceb-416643b5a625");
pub const IID_IStreamUnbufferedInfo = &IID_IStreamUnbufferedInfo_Value;
pub const IStreamUnbufferedInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSectorSize: *const fn (
            self: *const IStreamUnbufferedInfo,
            pcb_sector_size: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSectorSize(self: *const T, pcb_sector_size_: ?*u32) HRESULT {
                return @as(*const IStreamUnbufferedInfo.VTable, @ptrCast(self.vtable)).GetSectorSize(@as(*const IStreamUnbufferedInfo, @ptrCast(self)), pcb_sector_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DSH_FLAGS = enum(i32) {
    T = 1,
};
pub const DSH_ALLOWDROPDESCRIPTIONTEXT = DSH_FLAGS.T;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDragSourceHelper2_Value = Guid.initString("83e07d0d-0c5f-4163-bf1a-60b274051e40");
pub const IID_IDragSourceHelper2 = &IID_IDragSourceHelper2_Value;
pub const IDragSourceHelper2 = extern struct {
    pub const VTable = extern struct {
        base: IDragSourceHelper.VTable,
        SetFlags: *const fn (
            self: *const IDragSourceHelper2,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDragSourceHelper.MethodMixin(T);
            pub inline fn setFlags(self: *const T, dw_flags_: u32) HRESULT {
                return @as(*const IDragSourceHelper2.VTable, @ptrCast(self.vtable)).SetFlags(@as(*const IDragSourceHelper2, @ptrCast(self)), dw_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IHWEventHandler_Value = Guid.initString("c1fb73d0-ec3a-4ba2-b512-8cdb9187b6d1");
pub const IID_IHWEventHandler = &IID_IHWEventHandler_Value;
pub const IHWEventHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IHWEventHandler,
            psz_params: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleEvent: *const fn (
            self: *const IHWEventHandler,
            psz_device_i_d: ?[*:0]const u16,
            psz_alt_device_i_d: ?[*:0]const u16,
            psz_event_type: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HandleEventWithContent: *const fn (
            self: *const IHWEventHandler,
            psz_device_i_d: ?[*:0]const u16,
            psz_alt_device_i_d: ?[*:0]const u16,
            psz_event_type: ?[*:0]const u16,
            psz_content_type_handler: ?[*:0]const u16,
            pdataobject: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, psz_params_: ?[*:0]const u16) HRESULT {
                return @as(*const IHWEventHandler.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IHWEventHandler, @ptrCast(self)), psz_params_);
            }
            pub inline fn handleEvent(self: *const T, psz_device_i_d_: ?[*:0]const u16, psz_alt_device_i_d_: ?[*:0]const u16, psz_event_type_: ?[*:0]const u16) HRESULT {
                return @as(*const IHWEventHandler.VTable, @ptrCast(self.vtable)).HandleEvent(@as(*const IHWEventHandler, @ptrCast(self)), psz_device_i_d_, psz_alt_device_i_d_, psz_event_type_);
            }
            pub inline fn handleEventWithContent(self: *const T, psz_device_i_d_: ?[*:0]const u16, psz_alt_device_i_d_: ?[*:0]const u16, psz_event_type_: ?[*:0]const u16, psz_content_type_handler_: ?[*:0]const u16, pdataobject_: ?*IDataObject) HRESULT {
                return @as(*const IHWEventHandler.VTable, @ptrCast(self.vtable)).HandleEventWithContent(@as(*const IHWEventHandler, @ptrCast(self)), psz_device_i_d_, psz_alt_device_i_d_, psz_event_type_, psz_content_type_handler_, pdataobject_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IHWEventHandler2_Value = Guid.initString("cfcc809f-295d-42e8-9ffc-424b33c487e6");
pub const IID_IHWEventHandler2 = &IID_IHWEventHandler2_Value;
pub const IHWEventHandler2 = extern struct {
    pub const VTable = extern struct {
        base: IHWEventHandler.VTable,
        HandleEventWithHWND: *const fn (
            self: *const IHWEventHandler2,
            psz_device_i_d: ?[*:0]const u16,
            psz_alt_device_i_d: ?[*:0]const u16,
            psz_event_type: ?[*:0]const u16,
            hwnd_owner: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IHWEventHandler.MethodMixin(T);
            pub inline fn handleEventWithHWND(self: *const T, psz_device_i_d_: ?[*:0]const u16, psz_alt_device_i_d_: ?[*:0]const u16, psz_event_type_: ?[*:0]const u16, hwnd_owner_: ?HWND) HRESULT {
                return @as(*const IHWEventHandler2.VTable, @ptrCast(self.vtable)).HandleEventWithHWND(@as(*const IHWEventHandler2, @ptrCast(self)), psz_device_i_d_, psz_alt_device_i_d_, psz_event_type_, hwnd_owner_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IQueryCancelAutoPlay_Value = Guid.initString("ddefe873-6997-4e68-be26-39b633adbe12");
pub const IID_IQueryCancelAutoPlay = &IID_IQueryCancelAutoPlay_Value;
pub const IQueryCancelAutoPlay = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AllowAutoPlay: *const fn (
            self: *const IQueryCancelAutoPlay,
            psz_path: ?[*:0]const u16,
            dw_content_type: u32,
            psz_label: ?[*:0]const u16,
            dw_serial_number: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn allowAutoPlay(self: *const T, psz_path_: ?[*:0]const u16, dw_content_type_: u32, psz_label_: ?[*:0]const u16, dw_serial_number_: u32) HRESULT {
                return @as(*const IQueryCancelAutoPlay.VTable, @ptrCast(self.vtable)).AllowAutoPlay(@as(*const IQueryCancelAutoPlay, @ptrCast(self)), psz_path_, dw_content_type_, psz_label_, dw_serial_number_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDynamicHWHandler_Value = Guid.initString("dc2601d7-059e-42fc-a09d-2afd21b6d5f7");
pub const IID_IDynamicHWHandler = &IID_IDynamicHWHandler_Value;
pub const IDynamicHWHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDynamicInfo: *const fn (
            self: *const IDynamicHWHandler,
            psz_device_i_d: ?[*:0]const u16,
            dw_content_type: u32,
            ppsz_action: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDynamicInfo(self: *const T, psz_device_i_d_: ?[*:0]const u16, dw_content_type_: u32, ppsz_action_: ?*?PWSTR) HRESULT {
                return @as(*const IDynamicHWHandler.VTable, @ptrCast(self.vtable)).GetDynamicInfo(@as(*const IDynamicHWHandler, @ptrCast(self)), psz_device_i_d_, dw_content_type_, ppsz_action_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IUserNotificationCallback_Value = Guid.initString("19108294-0441-4aff-8013-fa0a730b0bea");
pub const IID_IUserNotificationCallback = &IID_IUserNotificationCallback_Value;
pub const IUserNotificationCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnBalloonUserClick: *const fn (
            self: *const IUserNotificationCallback,
            pt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnLeftClick: *const fn (
            self: *const IUserNotificationCallback,
            pt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnContextMenu: *const fn (
            self: *const IUserNotificationCallback,
            pt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onBalloonUserClick(self: *const T, pt_: ?*POINT) HRESULT {
                return @as(*const IUserNotificationCallback.VTable, @ptrCast(self.vtable)).OnBalloonUserClick(@as(*const IUserNotificationCallback, @ptrCast(self)), pt_);
            }
            pub inline fn onLeftClick(self: *const T, pt_: ?*POINT) HRESULT {
                return @as(*const IUserNotificationCallback.VTable, @ptrCast(self.vtable)).OnLeftClick(@as(*const IUserNotificationCallback, @ptrCast(self)), pt_);
            }
            pub inline fn onContextMenu(self: *const T, pt_: ?*POINT) HRESULT {
                return @as(*const IUserNotificationCallback.VTable, @ptrCast(self.vtable)).OnContextMenu(@as(*const IUserNotificationCallback, @ptrCast(self)), pt_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IUserNotification2_Value = Guid.initString("215913cc-57eb-4fab-ab5a-e5fa7bea2a6c");
pub const IID_IUserNotification2 = &IID_IUserNotification2_Value;
pub const IUserNotification2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetBalloonInfo: *const fn (
            self: *const IUserNotification2,
            psz_title: ?[*:0]const u16,
            psz_text: ?[*:0]const u16,
            dw_info_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBalloonRetry: *const fn (
            self: *const IUserNotification2,
            dw_show_time: u32,
            dw_interval: u32,
            c_retry_count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIconInfo: *const fn (
            self: *const IUserNotification2,
            h_icon: ?HICON,
            psz_tool_tip: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Show: *const fn (
            self: *const IUserNotification2,
            pqc: ?*IQueryContinue,
            dw_continue_poll_interval: u32,
            p_sink: ?*IUserNotificationCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PlaySound: *const fn (
            self: *const IUserNotification2,
            psz_sound_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setBalloonInfo(self: *const T, psz_title_: ?[*:0]const u16, psz_text_: ?[*:0]const u16, dw_info_flags_: u32) HRESULT {
                return @as(*const IUserNotification2.VTable, @ptrCast(self.vtable)).SetBalloonInfo(@as(*const IUserNotification2, @ptrCast(self)), psz_title_, psz_text_, dw_info_flags_);
            }
            pub inline fn setBalloonRetry(self: *const T, dw_show_time_: u32, dw_interval_: u32, c_retry_count_: u32) HRESULT {
                return @as(*const IUserNotification2.VTable, @ptrCast(self.vtable)).SetBalloonRetry(@as(*const IUserNotification2, @ptrCast(self)), dw_show_time_, dw_interval_, c_retry_count_);
            }
            pub inline fn setIconInfo(self: *const T, h_icon_: ?HICON, psz_tool_tip_: ?[*:0]const u16) HRESULT {
                return @as(*const IUserNotification2.VTable, @ptrCast(self.vtable)).SetIconInfo(@as(*const IUserNotification2, @ptrCast(self)), h_icon_, psz_tool_tip_);
            }
            pub inline fn show(self: *const T, pqc_: ?*IQueryContinue, dw_continue_poll_interval_: u32, p_sink_: ?*IUserNotificationCallback) HRESULT {
                return @as(*const IUserNotification2.VTable, @ptrCast(self.vtable)).Show(@as(*const IUserNotification2, @ptrCast(self)), pqc_, dw_continue_poll_interval_, p_sink_);
            }
            pub inline fn playSound(self: *const T, psz_sound_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IUserNotification2.VTable, @ptrCast(self.vtable)).PlaySound(@as(*const IUserNotification2, @ptrCast(self)), psz_sound_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDeskBand2_Value = Guid.initString("79d16de4-abee-4021-8d9d-9169b261d657");
pub const IID_IDeskBand2 = &IID_IDeskBand2_Value;
pub const IDeskBand2 = extern struct {
    pub const VTable = extern struct {
        base: IDeskBand.VTable,
        CanRenderComposited: *const fn (
            self: *const IDeskBand2,
            pf_can_render_composited: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCompositionState: *const fn (
            self: *const IDeskBand2,
            f_composition_enabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCompositionState: *const fn (
            self: *const IDeskBand2,
            pf_composition_enabled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDeskBand.MethodMixin(T);
            pub inline fn canRenderComposited(self: *const T, pf_can_render_composited_: ?*BOOL) HRESULT {
                return @as(*const IDeskBand2.VTable, @ptrCast(self.vtable)).CanRenderComposited(@as(*const IDeskBand2, @ptrCast(self)), pf_can_render_composited_);
            }
            pub inline fn setCompositionState(self: *const T, f_composition_enabled_: BOOL) HRESULT {
                return @as(*const IDeskBand2.VTable, @ptrCast(self.vtable)).SetCompositionState(@as(*const IDeskBand2, @ptrCast(self)), f_composition_enabled_);
            }
            pub inline fn getCompositionState(self: *const T, pf_composition_enabled_: ?*BOOL) HRESULT {
                return @as(*const IDeskBand2.VTable, @ptrCast(self.vtable)).GetCompositionState(@as(*const IDeskBand2, @ptrCast(self)), pf_composition_enabled_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IStartMenuPinnedList_Value = Guid.initString("4cd19ada-25a5-4a32-b3b7-347bee5be36b");
pub const IID_IStartMenuPinnedList = &IID_IStartMenuPinnedList_Value;
pub const IStartMenuPinnedList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RemoveFromList: *const fn (
            self: *const IStartMenuPinnedList,
            pitem: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn removeFromList(self: *const T, pitem_: ?*IShellItem) HRESULT {
                return @as(*const IStartMenuPinnedList.VTable, @ptrCast(self.vtable)).RemoveFromList(@as(*const IStartMenuPinnedList, @ptrCast(self)), pitem_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICDBurn_Value = Guid.initString("3d73a659-e5d0-4d42-afc0-5121ba425c8d");
pub const IID_ICDBurn = &IID_ICDBurn_Value;
pub const ICDBurn = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetRecorderDriveLetter: *const fn (
            self: *const ICDBurn,
            psz_drive: [*:0]u16,
            cch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Burn: *const fn (
            self: *const ICDBurn,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasRecordableDrive: *const fn (
            self: *const ICDBurn,
            pf_has_recorder: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getRecorderDriveLetter(self: *const T, psz_drive_: [*:0]u16, cch_: u32) HRESULT {
                return @as(*const ICDBurn.VTable, @ptrCast(self.vtable)).GetRecorderDriveLetter(@as(*const ICDBurn, @ptrCast(self)), psz_drive_, cch_);
            }
            pub inline fn burn(self: *const T, hwnd_: ?HWND) HRESULT {
                return @as(*const ICDBurn.VTable, @ptrCast(self.vtable)).Burn(@as(*const ICDBurn, @ptrCast(self)), hwnd_);
            }
            pub inline fn hasRecordableDrive(self: *const T, pf_has_recorder_: ?*BOOL) HRESULT {
                return @as(*const ICDBurn.VTable, @ptrCast(self.vtable)).HasRecordableDrive(@as(*const ICDBurn, @ptrCast(self)), pf_has_recorder_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWizardSite_Value = Guid.initString("88960f5b-422f-4e7b-8013-73415381c3c3");
pub const IID_IWizardSite = &IID_IWizardSite_Value;
pub const IWizardSite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPreviousPage: *const fn (
            self: *const IWizardSite,
            phpage: ?*?HPROPSHEETPAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextPage: *const fn (
            self: *const IWizardSite,
            phpage: ?*?HPROPSHEETPAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCancelledPage: *const fn (
            self: *const IWizardSite,
            phpage: ?*?HPROPSHEETPAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPreviousPage(self: *const T, phpage_: ?*?HPROPSHEETPAGE) HRESULT {
                return @as(*const IWizardSite.VTable, @ptrCast(self.vtable)).GetPreviousPage(@as(*const IWizardSite, @ptrCast(self)), phpage_);
            }
            pub inline fn getNextPage(self: *const T, phpage_: ?*?HPROPSHEETPAGE) HRESULT {
                return @as(*const IWizardSite.VTable, @ptrCast(self.vtable)).GetNextPage(@as(*const IWizardSite, @ptrCast(self)), phpage_);
            }
            pub inline fn getCancelledPage(self: *const T, phpage_: ?*?HPROPSHEETPAGE) HRESULT {
                return @as(*const IWizardSite.VTable, @ptrCast(self.vtable)).GetCancelledPage(@as(*const IWizardSite, @ptrCast(self)), phpage_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWizardExtension_Value = Guid.initString("c02ea696-86cc-491e-9b23-74394a0444a8");
pub const IID_IWizardExtension = &IID_IWizardExtension_Value;
pub const IWizardExtension = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddPages: *const fn (
            self: *const IWizardExtension,
            a_pages: [*]?HPROPSHEETPAGE,
            c_pages: u32,
            pn_pages_added: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFirstPage: *const fn (
            self: *const IWizardExtension,
            phpage: ?*?HPROPSHEETPAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastPage: *const fn (
            self: *const IWizardExtension,
            phpage: ?*?HPROPSHEETPAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addPages(self: *const T, a_pages_: [*]?HPROPSHEETPAGE, c_pages_: u32, pn_pages_added_: ?*u32) HRESULT {
                return @as(*const IWizardExtension.VTable, @ptrCast(self.vtable)).AddPages(@as(*const IWizardExtension, @ptrCast(self)), a_pages_, c_pages_, pn_pages_added_);
            }
            pub inline fn getFirstPage(self: *const T, phpage_: ?*?HPROPSHEETPAGE) HRESULT {
                return @as(*const IWizardExtension.VTable, @ptrCast(self.vtable)).GetFirstPage(@as(*const IWizardExtension, @ptrCast(self)), phpage_);
            }
            pub inline fn getLastPage(self: *const T, phpage_: ?*?HPROPSHEETPAGE) HRESULT {
                return @as(*const IWizardExtension.VTable, @ptrCast(self.vtable)).GetLastPage(@as(*const IWizardExtension, @ptrCast(self)), phpage_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWebWizardExtension_Value = Guid.initString("0e6b3f66-98d1-48c0-a222-fbde74e2fbc5");
pub const IID_IWebWizardExtension = &IID_IWebWizardExtension_Value;
pub const IWebWizardExtension = extern struct {
    pub const VTable = extern struct {
        base: IWizardExtension.VTable,
        SetInitialURL: *const fn (
            self: *const IWebWizardExtension,
            psz_u_r_l: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetErrorURL: *const fn (
            self: *const IWebWizardExtension,
            psz_error_u_r_l: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWizardExtension.MethodMixin(T);
            pub inline fn setInitialURL(self: *const T, psz_u_r_l_: ?[*:0]const u16) HRESULT {
                return @as(*const IWebWizardExtension.VTable, @ptrCast(self.vtable)).SetInitialURL(@as(*const IWebWizardExtension, @ptrCast(self)), psz_u_r_l_);
            }
            pub inline fn setErrorURL(self: *const T, psz_error_u_r_l_: ?[*:0]const u16) HRESULT {
                return @as(*const IWebWizardExtension.VTable, @ptrCast(self.vtable)).SetErrorURL(@as(*const IWebWizardExtension, @ptrCast(self)), psz_error_u_r_l_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IPublishingWizard_Value = Guid.initString("aa9198bb-ccec-472d-beed-19a4f6733f7a");
pub const IID_IPublishingWizard = &IID_IPublishingWizard_Value;
pub const IPublishingWizard = extern struct {
    pub const VTable = extern struct {
        base: IWizardExtension.VTable,
        Initialize: *const fn (
            self: *const IPublishingWizard,
            pdo: ?*IDataObject,
            dw_options: u32,
            psz_service_scope: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTransferManifest: *const fn (
            self: *const IPublishingWizard,
            phr_from_transfer: ?*HRESULT,
            pdoc_manifest: ?*?*IXMLDOMDocument,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWizardExtension.MethodMixin(T);
            pub inline fn initialize(self: *const T, pdo_: ?*IDataObject, dw_options_: u32, psz_service_scope_: ?[*:0]const u16) HRESULT {
                return @as(*const IPublishingWizard.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IPublishingWizard, @ptrCast(self)), pdo_, dw_options_, psz_service_scope_);
            }
            pub inline fn getTransferManifest(self: *const T, phr_from_transfer_: ?*HRESULT, pdoc_manifest_: ?*?*IXMLDOMDocument) HRESULT {
                return @as(*const IPublishingWizard.VTable, @ptrCast(self.vtable)).GetTransferManifest(@as(*const IPublishingWizard, @ptrCast(self)), phr_from_transfer_, pdoc_manifest_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFolderViewHost_Value = Guid.initString("1ea58f02-d55a-411d-b09e-9e65ac21605b");
pub const IID_IFolderViewHost = &IID_IFolderViewHost_Value;
pub const IFolderViewHost = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IFolderViewHost,
            hwnd_parent: ?HWND,
            pdo: ?*IDataObject,
            prc: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, hwnd_parent_: ?HWND, pdo_: ?*IDataObject, prc_: ?*RECT) HRESULT {
                return @as(*const IFolderViewHost.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IFolderViewHost, @ptrCast(self)), hwnd_parent_, pdo_, prc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAccessibleObject_Value = Guid.initString("95a391c5-9ed4-4c28-8401-ab9e06719e11");
pub const IID_IAccessibleObject = &IID_IAccessibleObject_Value;
pub const IAccessibleObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAccessibleName: *const fn (
            self: *const IAccessibleObject,
            psz_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAccessibleName(self: *const T, psz_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IAccessibleObject.VTable, @ptrCast(self.vtable)).SetAccessibleName(@as(*const IAccessibleObject, @ptrCast(self)), psz_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IResultsFolder_Value = Guid.initString("96e5ae6d-6ae1-4b1c-900c-c6480eaa8828");
pub const IID_IResultsFolder = &IID_IResultsFolder_Value;
pub const IResultsFolder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddItem: *const fn (
            self: *const IResultsFolder,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddIDList: *const fn (
            self: *const IResultsFolder,
            pidl: ?*ITEMIDLIST,
            ppidl_added: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveItem: *const fn (
            self: *const IResultsFolder,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveIDList: *const fn (
            self: *const IResultsFolder,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveAll: *const fn (
            self: *const IResultsFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addItem(self: *const T, psi_: ?*IShellItem) HRESULT {
                return @as(*const IResultsFolder.VTable, @ptrCast(self.vtable)).AddItem(@as(*const IResultsFolder, @ptrCast(self)), psi_);
            }
            pub inline fn addIDList(self: *const T, pidl_: ?*ITEMIDLIST, ppidl_added_: ?*?*ITEMIDLIST) HRESULT {
                return @as(*const IResultsFolder.VTable, @ptrCast(self.vtable)).AddIDList(@as(*const IResultsFolder, @ptrCast(self)), pidl_, ppidl_added_);
            }
            pub inline fn removeItem(self: *const T, psi_: ?*IShellItem) HRESULT {
                return @as(*const IResultsFolder.VTable, @ptrCast(self.vtable)).RemoveItem(@as(*const IResultsFolder, @ptrCast(self)), psi_);
            }
            pub inline fn removeIDList(self: *const T, pidl_: ?*ITEMIDLIST) HRESULT {
                return @as(*const IResultsFolder.VTable, @ptrCast(self.vtable)).RemoveIDList(@as(*const IResultsFolder, @ptrCast(self)), pidl_);
            }
            pub inline fn removeAll(self: *const T) HRESULT {
                return @as(*const IResultsFolder.VTable, @ptrCast(self.vtable)).RemoveAll(@as(*const IResultsFolder, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IAutoCompleteDropDown_Value = Guid.initString("3cd141f4-3c6a-11d2-bcaa-00c04fd929db");
pub const IID_IAutoCompleteDropDown = &IID_IAutoCompleteDropDown_Value;
pub const IAutoCompleteDropDown = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDropDownStatus: *const fn (
            self: *const IAutoCompleteDropDown,
            pdw_flags: ?*u32,
            ppwsz_string: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetEnumerator: *const fn (
            self: *const IAutoCompleteDropDown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDropDownStatus(self: *const T, pdw_flags_: ?*u32, ppwsz_string_: ?*?PWSTR) HRESULT {
                return @as(*const IAutoCompleteDropDown.VTable, @ptrCast(self.vtable)).GetDropDownStatus(@as(*const IAutoCompleteDropDown, @ptrCast(self)), pdw_flags_, ppwsz_string_);
            }
            pub inline fn resetEnumerator(self: *const T) HRESULT {
                return @as(*const IAutoCompleteDropDown.VTable, @ptrCast(self.vtable)).ResetEnumerator(@as(*const IAutoCompleteDropDown, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CDBURNINGEXTENSIONRET = enum(i32) {
    DEFAULT = 0,
    DONTRUNOTHEREXTS = 1,
    STOPWIZARD = 2,
};
pub const CDBE_RET_DEFAULT = CDBURNINGEXTENSIONRET.DEFAULT;
pub const CDBE_RET_DONTRUNOTHEREXTS = CDBURNINGEXTENSIONRET.DONTRUNOTHEREXTS;
pub const CDBE_RET_STOPWIZARD = CDBURNINGEXTENSIONRET.STOPWIZARD;

pub const _CDBE_ACTIONS = enum(i32) {
    MUSIC = 1,
    DATA = 2,
    ALL = -1,
};
pub const CDBE_TYPE_MUSIC = _CDBE_ACTIONS.MUSIC;
pub const CDBE_TYPE_DATA = _CDBE_ACTIONS.DATA;
pub const CDBE_TYPE_ALL = _CDBE_ACTIONS.ALL;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ICDBurnExt_Value = Guid.initString("2271dcca-74fc-4414-8fb7-c56b05ace2d7");
pub const IID_ICDBurnExt = &IID_ICDBurnExt_Value;
pub const ICDBurnExt = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSupportedActionTypes: *const fn (
            self: *const ICDBurnExt,
            pdw_actions: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSupportedActionTypes(self: *const T, pdw_actions_: ?*u32) HRESULT {
                return @as(*const ICDBurnExt.VTable, @ptrCast(self.vtable)).GetSupportedActionTypes(@as(*const ICDBurnExt, @ptrCast(self)), pdw_actions_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumReadyCallback_Value = Guid.initString("61e00d45-8fff-4e60-924e-6537b61612dd");
pub const IID_IEnumReadyCallback = &IID_IEnumReadyCallback_Value;
pub const IEnumReadyCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnumReady: *const fn (
            self: *const IEnumReadyCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn enumReady(self: *const T) HRESULT {
                return @as(*const IEnumReadyCallback.VTable, @ptrCast(self.vtable)).EnumReady(@as(*const IEnumReadyCallback, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumerableView_Value = Guid.initString("8c8bf236-1aec-495f-9894-91d57c3c686f");
pub const IID_IEnumerableView = &IID_IEnumerableView_Value;
pub const IEnumerableView = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetEnumReadyCallback: *const fn (
            self: *const IEnumerableView,
            percb: ?*IEnumReadyCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEnumIDListFromContents: *const fn (
            self: *const IEnumerableView,
            pidl_folder: ?*ITEMIDLIST,
            dw_enum_flags: u32,
            pp_enum_i_d_list: ?*?*IEnumIDList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setEnumReadyCallback(self: *const T, percb_: ?*IEnumReadyCallback) HRESULT {
                return @as(*const IEnumerableView.VTable, @ptrCast(self.vtable)).SetEnumReadyCallback(@as(*const IEnumerableView, @ptrCast(self)), percb_);
            }
            pub inline fn createEnumIDListFromContents(self: *const T, pidl_folder_: ?*ITEMIDLIST, dw_enum_flags_: u32, pp_enum_i_d_list_: ?*?*IEnumIDList) HRESULT {
                return @as(*const IEnumerableView.VTable, @ptrCast(self.vtable)).CreateEnumIDListFromContents(@as(*const IEnumerableView, @ptrCast(self)), pidl_folder_, dw_enum_flags_, pp_enum_i_d_list_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IInsertItem_Value = Guid.initString("d2b57227-3d23-4b95-93c0-492bd454c356");
pub const IID_IInsertItem = &IID_IInsertItem_Value;
pub const IInsertItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InsertItem: *const fn (
            self: *const IInsertItem,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn insertItem(self: *const T, pidl_: ?*ITEMIDLIST) HRESULT {
                return @as(*const IInsertItem.VTable, @ptrCast(self.vtable)).InsertItem(@as(*const IInsertItem, @ptrCast(self)), pidl_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IFolderBandPriv_Value = Guid.initString("47c01f95-e185-412c-b5c5-4f27df965aea");
pub const IID_IFolderBandPriv = &IID_IFolderBandPriv_Value;
pub const IFolderBandPriv = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetCascade: *const fn (
            self: *const IFolderBandPriv,
            f_cascade: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAccelerators: *const fn (
            self: *const IFolderBandPriv,
            f_accelerators: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNoIcons: *const fn (
            self: *const IFolderBandPriv,
            f_no_icons: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNoText: *const fn (
            self: *const IFolderBandPriv,
            f_no_text: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setCascade(self: *const T, f_cascade_: BOOL) HRESULT {
                return @as(*const IFolderBandPriv.VTable, @ptrCast(self.vtable)).SetCascade(@as(*const IFolderBandPriv, @ptrCast(self)), f_cascade_);
            }
            pub inline fn setAccelerators(self: *const T, f_accelerators_: BOOL) HRESULT {
                return @as(*const IFolderBandPriv.VTable, @ptrCast(self.vtable)).SetAccelerators(@as(*const IFolderBandPriv, @ptrCast(self)), f_accelerators_);
            }
            pub inline fn setNoIcons(self: *const T, f_no_icons_: BOOL) HRESULT {
                return @as(*const IFolderBandPriv.VTable, @ptrCast(self.vtable)).SetNoIcons(@as(*const IFolderBandPriv, @ptrCast(self)), f_no_icons_);
            }
            pub inline fn setNoText(self: *const T, f_no_text_: BOOL) HRESULT {
                return @as(*const IFolderBandPriv.VTable, @ptrCast(self.vtable)).SetNoText(@as(*const IFolderBandPriv, @ptrCast(self)), f_no_text_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IImageRecompress_Value = Guid.initString("505f1513-6b3e-4892-a272-59f8889a4d3e");
pub const IID_IImageRecompress = &IID_IImageRecompress_Value;
pub const IImageRecompress = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RecompressImage: *const fn (
            self: *const IImageRecompress,
            psi: ?*IShellItem,
            cx: i32,
            cy: i32,
            i_quality: i32,
            pstg: ?*IStorage,
            ppstrm_out: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn recompressImage(self: *const T, psi_: ?*IShellItem, cx_: i32, cy_: i32, i_quality_: i32, pstg_: ?*IStorage, ppstrm_out_: ?*?*IStream) HRESULT {
                return @as(*const IImageRecompress.VTable, @ptrCast(self.vtable)).RecompressImage(@as(*const IImageRecompress, @ptrCast(self)), psi_, cx_, cy_, i_quality_, pstg_, ppstrm_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IFileDialogControlEvents_Value = Guid.initString("36116642-d713-4b97-9b83-7484a9d00433");
pub const IID_IFileDialogControlEvents = &IID_IFileDialogControlEvents_Value;
pub const IFileDialogControlEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnItemSelected: *const fn (
            self: *const IFileDialogControlEvents,
            pfdc: ?*IFileDialogCustomize,
            dw_i_d_ctl: u32,
            dw_i_d_item: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnButtonClicked: *const fn (
            self: *const IFileDialogControlEvents,
            pfdc: ?*IFileDialogCustomize,
            dw_i_d_ctl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCheckButtonToggled: *const fn (
            self: *const IFileDialogControlEvents,
            pfdc: ?*IFileDialogCustomize,
            dw_i_d_ctl: u32,
            b_checked: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnControlActivating: *const fn (
            self: *const IFileDialogControlEvents,
            pfdc: ?*IFileDialogCustomize,
            dw_i_d_ctl: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onItemSelected(self: *const T, pfdc_: ?*IFileDialogCustomize, dw_i_d_ctl_: u32, dw_i_d_item_: u32) HRESULT {
                return @as(*const IFileDialogControlEvents.VTable, @ptrCast(self.vtable)).OnItemSelected(@as(*const IFileDialogControlEvents, @ptrCast(self)), pfdc_, dw_i_d_ctl_, dw_i_d_item_);
            }
            pub inline fn onButtonClicked(self: *const T, pfdc_: ?*IFileDialogCustomize, dw_i_d_ctl_: u32) HRESULT {
                return @as(*const IFileDialogControlEvents.VTable, @ptrCast(self.vtable)).OnButtonClicked(@as(*const IFileDialogControlEvents, @ptrCast(self)), pfdc_, dw_i_d_ctl_);
            }
            pub inline fn onCheckButtonToggled(self: *const T, pfdc_: ?*IFileDialogCustomize, dw_i_d_ctl_: u32, b_checked_: BOOL) HRESULT {
                return @as(*const IFileDialogControlEvents.VTable, @ptrCast(self.vtable)).OnCheckButtonToggled(@as(*const IFileDialogControlEvents, @ptrCast(self)), pfdc_, dw_i_d_ctl_, b_checked_);
            }
            pub inline fn onControlActivating(self: *const T, pfdc_: ?*IFileDialogCustomize, dw_i_d_ctl_: u32) HRESULT {
                return @as(*const IFileDialogControlEvents.VTable, @ptrCast(self.vtable)).OnControlActivating(@as(*const IFileDialogControlEvents, @ptrCast(self)), pfdc_, dw_i_d_ctl_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IFileDialog2_Value = Guid.initString("61744fc7-85b5-4791-a9b0-272276309b13");
pub const IID_IFileDialog2 = &IID_IFileDialog2_Value;
pub const IFileDialog2 = extern struct {
    pub const VTable = extern struct {
        base: IFileDialog.VTable,
        SetCancelButtonLabel: *const fn (
            self: *const IFileDialog2,
            psz_label: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNavigationRoot: *const fn (
            self: *const IFileDialog2,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IFileDialog.MethodMixin(T);
            pub inline fn setCancelButtonLabel(self: *const T, psz_label_: ?[*:0]const u16) HRESULT {
                return @as(*const IFileDialog2.VTable, @ptrCast(self.vtable)).SetCancelButtonLabel(@as(*const IFileDialog2, @ptrCast(self)), psz_label_);
            }
            pub inline fn setNavigationRoot(self: *const T, psi_: ?*IShellItem) HRESULT {
                return @as(*const IFileDialog2.VTable, @ptrCast(self.vtable)).SetNavigationRoot(@as(*const IFileDialog2, @ptrCast(self)), psi_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IApplicationAssociationRegistrationUI_Value = Guid.initString("1f76a169-f994-40ac-8fc8-0959e8874710");
pub const IID_IApplicationAssociationRegistrationUI = &IID_IApplicationAssociationRegistrationUI_Value;
pub const IApplicationAssociationRegistrationUI = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        LaunchAdvancedAssociationUI: *const fn (
            self: *const IApplicationAssociationRegistrationUI,
            psz_app_registry_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn launchAdvancedAssociationUI(self: *const T, psz_app_registry_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IApplicationAssociationRegistrationUI.VTable, @ptrCast(self.vtable)).LaunchAdvancedAssociationUI(@as(*const IApplicationAssociationRegistrationUI, @ptrCast(self)), psz_app_registry_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IShellRunDll_Value = Guid.initString("fce4bde0-4b68-4b80-8e9c-7426315a7388");
pub const IID_IShellRunDll = &IID_IShellRunDll_Value;
pub const IShellRunDll = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Run: *const fn (
            self: *const IShellRunDll,
            psz_args: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn run(self: *const T, psz_args_: ?[*:0]const u16) HRESULT {
                return @as(*const IShellRunDll.VTable, @ptrCast(self.vtable)).Run(@as(*const IShellRunDll, @ptrCast(self)), psz_args_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IPreviousVersionsInfo_Value = Guid.initString("76e54780-ad74-48e3-a695-3ba9a0aff10d");
pub const IID_IPreviousVersionsInfo = &IID_IPreviousVersionsInfo_Value;
pub const IPreviousVersionsInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AreSnapshotsAvailable: *const fn (
            self: *const IPreviousVersionsInfo,
            psz_path: ?[*:0]const u16,
            f_ok_to_be_slow: BOOL,
            pf_available: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn areSnapshotsAvailable(self: *const T, psz_path_: ?[*:0]const u16, f_ok_to_be_slow_: BOOL, pf_available_: ?*BOOL) HRESULT {
                return @as(*const IPreviousVersionsInfo.VTable, @ptrCast(self.vtable)).AreSnapshotsAvailable(@as(*const IPreviousVersionsInfo, @ptrCast(self)), psz_path_, f_ok_to_be_slow_, pf_available_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IUseToBrowseItem_Value = Guid.initString("05edda5c-98a3-4717-8adb-c5e7da991eb1");
pub const IID_IUseToBrowseItem = &IID_IUseToBrowseItem_Value;
pub const IUseToBrowseItem = extern struct {
    pub const VTable = extern struct {
        base: IRelatedItem.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRelatedItem.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const NSTCSTYLE2 = enum(i32) {
    STCS2_DEFAULT = 0,
    STCS2_INTERRUPTNOTIFICATIONS = 1,
    STCS2_SHOWNULLSPACEMENU = 2,
    STCS2_DISPLAYPADDING = 4,
    STCS2_DISPLAYPINNEDONLY = 8,
    TSCS2_NOSINGLETONAUTOEXPAND = 16,
    TSCS2_NEVERINSERTNONENUMERATED = 32,
};
pub const NSTCS2_DEFAULT = NSTCSTYLE2.STCS2_DEFAULT;
pub const NSTCS2_INTERRUPTNOTIFICATIONS = NSTCSTYLE2.STCS2_INTERRUPTNOTIFICATIONS;
pub const NSTCS2_SHOWNULLSPACEMENU = NSTCSTYLE2.STCS2_SHOWNULLSPACEMENU;
pub const NSTCS2_DISPLAYPADDING = NSTCSTYLE2.STCS2_DISPLAYPADDING;
pub const NSTCS2_DISPLAYPINNEDONLY = NSTCSTYLE2.STCS2_DISPLAYPINNEDONLY;
pub const NTSCS2_NOSINGLETONAUTOEXPAND = NSTCSTYLE2.TSCS2_NOSINGLETONAUTOEXPAND;
pub const NTSCS2_NEVERINSERTNONENUMERATED = NSTCSTYLE2.TSCS2_NEVERINSERTNONENUMERATED;

// TODO: this type is limited to platform 'windows6.1'
const IID_INameSpaceTreeControl2_Value = Guid.initString("7cc7aed8-290e-49bc-8945-c1401cc9306c");
pub const IID_INameSpaceTreeControl2 = &IID_INameSpaceTreeControl2_Value;
pub const INameSpaceTreeControl2 = extern struct {
    pub const VTable = extern struct {
        base: INameSpaceTreeControl.VTable,
        SetControlStyle: *const fn (
            self: *const INameSpaceTreeControl2,
            nstcs_mask: u32,
            nstcs_style: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetControlStyle: *const fn (
            self: *const INameSpaceTreeControl2,
            nstcs_mask: u32,
            pnstcs_style: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetControlStyle2: *const fn (
            self: *const INameSpaceTreeControl2,
            nstcs_mask: NSTCSTYLE2,
            nstcs_style: NSTCSTYLE2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetControlStyle2: *const fn (
            self: *const INameSpaceTreeControl2,
            nstcs_mask: NSTCSTYLE2,
            pnstcs_style: ?*NSTCSTYLE2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace INameSpaceTreeControl.MethodMixin(T);
            pub inline fn setControlStyle(self: *const T, nstcs_mask_: u32, nstcs_style_: u32) HRESULT {
                return @as(*const INameSpaceTreeControl2.VTable, @ptrCast(self.vtable)).SetControlStyle(@as(*const INameSpaceTreeControl2, @ptrCast(self)), nstcs_mask_, nstcs_style_);
            }
            pub inline fn getControlStyle(self: *const T, nstcs_mask_: u32, pnstcs_style_: ?*u32) HRESULT {
                return @as(*const INameSpaceTreeControl2.VTable, @ptrCast(self.vtable)).GetControlStyle(@as(*const INameSpaceTreeControl2, @ptrCast(self)), nstcs_mask_, pnstcs_style_);
            }
            pub inline fn setControlStyle2(self: *const T, nstcs_mask_: NSTCSTYLE2, nstcs_style_: NSTCSTYLE2) HRESULT {
                return @as(*const INameSpaceTreeControl2.VTable, @ptrCast(self.vtable)).SetControlStyle2(@as(*const INameSpaceTreeControl2, @ptrCast(self)), nstcs_mask_, nstcs_style_);
            }
            pub inline fn getControlStyle2(self: *const T, nstcs_mask_: NSTCSTYLE2, pnstcs_style_: ?*NSTCSTYLE2) HRESULT {
                return @as(*const INameSpaceTreeControl2.VTable, @ptrCast(self.vtable)).GetControlStyle2(@as(*const INameSpaceTreeControl2, @ptrCast(self)), nstcs_mask_, pnstcs_style_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const _NSTCEHITTEST = enum(i32) {
    NOWHERE = 1,
    ONITEMICON = 2,
    ONITEMLABEL = 4,
    ONITEMINDENT = 8,
    ONITEMBUTTON = 16,
    ONITEMRIGHT = 32,
    ONITEMSTATEICON = 64,
    ONITEM = 70,
    ONITEMTABBUTTON = 4096,
};
pub const NSTCEHT_NOWHERE = _NSTCEHITTEST.NOWHERE;
pub const NSTCEHT_ONITEMICON = _NSTCEHITTEST.ONITEMICON;
pub const NSTCEHT_ONITEMLABEL = _NSTCEHITTEST.ONITEMLABEL;
pub const NSTCEHT_ONITEMINDENT = _NSTCEHITTEST.ONITEMINDENT;
pub const NSTCEHT_ONITEMBUTTON = _NSTCEHITTEST.ONITEMBUTTON;
pub const NSTCEHT_ONITEMRIGHT = _NSTCEHITTEST.ONITEMRIGHT;
pub const NSTCEHT_ONITEMSTATEICON = _NSTCEHITTEST.ONITEMSTATEICON;
pub const NSTCEHT_ONITEM = _NSTCEHITTEST.ONITEM;
pub const NSTCEHT_ONITEMTABBUTTON = _NSTCEHITTEST.ONITEMTABBUTTON;

pub const _NSTCECLICKTYPE = enum(i32) {
    LBUTTON = 1,
    MBUTTON = 2,
    RBUTTON = 3,
    // BUTTON = 3, this enum value conflicts with RBUTTON
    DBLCLICK = 4,
};
pub const NSTCECT_LBUTTON = _NSTCECLICKTYPE.LBUTTON;
pub const NSTCECT_MBUTTON = _NSTCECLICKTYPE.MBUTTON;
pub const NSTCECT_RBUTTON = _NSTCECLICKTYPE.RBUTTON;
pub const NSTCECT_BUTTON = _NSTCECLICKTYPE.RBUTTON;
pub const NSTCECT_DBLCLICK = _NSTCECLICKTYPE.DBLCLICK;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INameSpaceTreeControlEvents_Value = Guid.initString("93d77985-b3d8-4484-8318-672cdda002ce");
pub const IID_INameSpaceTreeControlEvents = &IID_INameSpaceTreeControlEvents_Value;
pub const INameSpaceTreeControlEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnItemClick: *const fn (
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
            nstce_hit_test: u32,
            nstce_click_type: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnPropertyItemCommit: *const fn (
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnItemStateChanging: *const fn (
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
            nstcis_mask: u32,
            nstcis_state: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnItemStateChanged: *const fn (
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
            nstcis_mask: u32,
            nstcis_state: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSelectionChanged: *const fn (
            self: *const INameSpaceTreeControlEvents,
            psia_selection: ?*IShellItemArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnKeyboardInput: *const fn (
            self: *const INameSpaceTreeControlEvents,
            u_msg: u32,
            w_param: WPARAM,
            l_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnBeforeExpand: *const fn (
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAfterExpand: *const fn (
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnBeginLabelEdit: *const fn (
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnEndLabelEdit: *const fn (
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnGetToolTip: *const fn (
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
            psz_tip: [*:0]u16,
            cch_tip: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnBeforeItemDelete: *const fn (
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnItemAdded: *const fn (
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
            f_is_root: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnItemDeleted: *const fn (
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
            f_is_root: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnBeforeContextMenu: *const fn (
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAfterContextMenu: *const fn (
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
            pcm_in: ?*IContextMenu,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnBeforeStateImageChange: *const fn (
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnGetDefaultIconIndex: *const fn (
            self: *const INameSpaceTreeControlEvents,
            psi: ?*IShellItem,
            pi_default_icon: ?*i32,
            pi_open_icon: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onItemClick(self: *const T, psi_: ?*IShellItem, nstce_hit_test_: u32, nstce_click_type_: u32) HRESULT {
                return @as(*const INameSpaceTreeControlEvents.VTable, @ptrCast(self.vtable)).OnItemClick(@as(*const INameSpaceTreeControlEvents, @ptrCast(self)), psi_, nstce_hit_test_, nstce_click_type_);
            }
            pub inline fn onPropertyItemCommit(self: *const T, psi_: ?*IShellItem) HRESULT {
                return @as(*const INameSpaceTreeControlEvents.VTable, @ptrCast(self.vtable)).OnPropertyItemCommit(@as(*const INameSpaceTreeControlEvents, @ptrCast(self)), psi_);
            }
            pub inline fn onItemStateChanging(self: *const T, psi_: ?*IShellItem, nstcis_mask_: u32, nstcis_state_: u32) HRESULT {
                return @as(*const INameSpaceTreeControlEvents.VTable, @ptrCast(self.vtable)).OnItemStateChanging(@as(*const INameSpaceTreeControlEvents, @ptrCast(self)), psi_, nstcis_mask_, nstcis_state_);
            }
            pub inline fn onItemStateChanged(self: *const T, psi_: ?*IShellItem, nstcis_mask_: u32, nstcis_state_: u32) HRESULT {
                return @as(*const INameSpaceTreeControlEvents.VTable, @ptrCast(self.vtable)).OnItemStateChanged(@as(*const INameSpaceTreeControlEvents, @ptrCast(self)), psi_, nstcis_mask_, nstcis_state_);
            }
            pub inline fn onSelectionChanged(self: *const T, psia_selection_: ?*IShellItemArray) HRESULT {
                return @as(*const INameSpaceTreeControlEvents.VTable, @ptrCast(self.vtable)).OnSelectionChanged(@as(*const INameSpaceTreeControlEvents, @ptrCast(self)), psia_selection_);
            }
            pub inline fn onKeyboardInput(self: *const T, u_msg_: u32, w_param_: WPARAM, l_param_: LPARAM) HRESULT {
                return @as(*const INameSpaceTreeControlEvents.VTable, @ptrCast(self.vtable)).OnKeyboardInput(@as(*const INameSpaceTreeControlEvents, @ptrCast(self)), u_msg_, w_param_, l_param_);
            }
            pub inline fn onBeforeExpand(self: *const T, psi_: ?*IShellItem) HRESULT {
                return @as(*const INameSpaceTreeControlEvents.VTable, @ptrCast(self.vtable)).OnBeforeExpand(@as(*const INameSpaceTreeControlEvents, @ptrCast(self)), psi_);
            }
            pub inline fn onAfterExpand(self: *const T, psi_: ?*IShellItem) HRESULT {
                return @as(*const INameSpaceTreeControlEvents.VTable, @ptrCast(self.vtable)).OnAfterExpand(@as(*const INameSpaceTreeControlEvents, @ptrCast(self)), psi_);
            }
            pub inline fn onBeginLabelEdit(self: *const T, psi_: ?*IShellItem) HRESULT {
                return @as(*const INameSpaceTreeControlEvents.VTable, @ptrCast(self.vtable)).OnBeginLabelEdit(@as(*const INameSpaceTreeControlEvents, @ptrCast(self)), psi_);
            }
            pub inline fn onEndLabelEdit(self: *const T, psi_: ?*IShellItem) HRESULT {
                return @as(*const INameSpaceTreeControlEvents.VTable, @ptrCast(self.vtable)).OnEndLabelEdit(@as(*const INameSpaceTreeControlEvents, @ptrCast(self)), psi_);
            }
            pub inline fn onGetToolTip(self: *const T, psi_: ?*IShellItem, psz_tip_: [*:0]u16, cch_tip_: i32) HRESULT {
                return @as(*const INameSpaceTreeControlEvents.VTable, @ptrCast(self.vtable)).OnGetToolTip(@as(*const INameSpaceTreeControlEvents, @ptrCast(self)), psi_, psz_tip_, cch_tip_);
            }
            pub inline fn onBeforeItemDelete(self: *const T, psi_: ?*IShellItem) HRESULT {
                return @as(*const INameSpaceTreeControlEvents.VTable, @ptrCast(self.vtable)).OnBeforeItemDelete(@as(*const INameSpaceTreeControlEvents, @ptrCast(self)), psi_);
            }
            pub inline fn onItemAdded(self: *const T, psi_: ?*IShellItem, f_is_root_: BOOL) HRESULT {
                return @as(*const INameSpaceTreeControlEvents.VTable, @ptrCast(self.vtable)).OnItemAdded(@as(*const INameSpaceTreeControlEvents, @ptrCast(self)), psi_, f_is_root_);
            }
            pub inline fn onItemDeleted(self: *const T, psi_: ?*IShellItem, f_is_root_: BOOL) HRESULT {
                return @as(*const INameSpaceTreeControlEvents.VTable, @ptrCast(self.vtable)).OnItemDeleted(@as(*const INameSpaceTreeControlEvents, @ptrCast(self)), psi_, f_is_root_);
            }
            pub inline fn onBeforeContextMenu(self: *const T, psi_: ?*IShellItem, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const INameSpaceTreeControlEvents.VTable, @ptrCast(self.vtable)).OnBeforeContextMenu(@as(*const INameSpaceTreeControlEvents, @ptrCast(self)), psi_, riid_, ppv_);
            }
            pub inline fn onAfterContextMenu(self: *const T, psi_: ?*IShellItem, pcm_in_: ?*IContextMenu, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const INameSpaceTreeControlEvents.VTable, @ptrCast(self.vtable)).OnAfterContextMenu(@as(*const INameSpaceTreeControlEvents, @ptrCast(self)), psi_, pcm_in_, riid_, ppv_);
            }
            pub inline fn onBeforeStateImageChange(self: *const T, psi_: ?*IShellItem) HRESULT {
                return @as(*const INameSpaceTreeControlEvents.VTable, @ptrCast(self.vtable)).OnBeforeStateImageChange(@as(*const INameSpaceTreeControlEvents, @ptrCast(self)), psi_);
            }
            pub inline fn onGetDefaultIconIndex(self: *const T, psi_: ?*IShellItem, pi_default_icon_: ?*i32, pi_open_icon_: ?*i32) HRESULT {
                return @as(*const INameSpaceTreeControlEvents.VTable, @ptrCast(self.vtable)).OnGetDefaultIconIndex(@as(*const INameSpaceTreeControlEvents, @ptrCast(self)), psi_, pi_default_icon_, pi_open_icon_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INameSpaceTreeControlDropHandler_Value = Guid.initString("f9c665d6-c2f2-4c19-bf33-8322d7352f51");
pub const IID_INameSpaceTreeControlDropHandler = &IID_INameSpaceTreeControlDropHandler_Value;
pub const INameSpaceTreeControlDropHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnDragEnter: *const fn (
            self: *const INameSpaceTreeControlDropHandler,
            psi_over: ?*IShellItem,
            psia_data: ?*IShellItemArray,
            f_outside_source: BOOL,
            grf_key_state: u32,
            pdw_effect: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDragOver: *const fn (
            self: *const INameSpaceTreeControlDropHandler,
            psi_over: ?*IShellItem,
            psia_data: ?*IShellItemArray,
            grf_key_state: u32,
            pdw_effect: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDragPosition: *const fn (
            self: *const INameSpaceTreeControlDropHandler,
            psi_over: ?*IShellItem,
            psia_data: ?*IShellItemArray,
            i_new_position: i32,
            i_old_position: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDrop: *const fn (
            self: *const INameSpaceTreeControlDropHandler,
            psi_over: ?*IShellItem,
            psia_data: ?*IShellItemArray,
            i_position: i32,
            grf_key_state: u32,
            pdw_effect: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDropPosition: *const fn (
            self: *const INameSpaceTreeControlDropHandler,
            psi_over: ?*IShellItem,
            psia_data: ?*IShellItemArray,
            i_new_position: i32,
            i_old_position: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDragLeave: *const fn (
            self: *const INameSpaceTreeControlDropHandler,
            psi_over: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onDragEnter(self: *const T, psi_over_: ?*IShellItem, psia_data_: ?*IShellItemArray, f_outside_source_: BOOL, grf_key_state_: u32, pdw_effect_: ?*u32) HRESULT {
                return @as(*const INameSpaceTreeControlDropHandler.VTable, @ptrCast(self.vtable)).OnDragEnter(@as(*const INameSpaceTreeControlDropHandler, @ptrCast(self)), psi_over_, psia_data_, f_outside_source_, grf_key_state_, pdw_effect_);
            }
            pub inline fn onDragOver(self: *const T, psi_over_: ?*IShellItem, psia_data_: ?*IShellItemArray, grf_key_state_: u32, pdw_effect_: ?*u32) HRESULT {
                return @as(*const INameSpaceTreeControlDropHandler.VTable, @ptrCast(self.vtable)).OnDragOver(@as(*const INameSpaceTreeControlDropHandler, @ptrCast(self)), psi_over_, psia_data_, grf_key_state_, pdw_effect_);
            }
            pub inline fn onDragPosition(self: *const T, psi_over_: ?*IShellItem, psia_data_: ?*IShellItemArray, i_new_position_: i32, i_old_position_: i32) HRESULT {
                return @as(*const INameSpaceTreeControlDropHandler.VTable, @ptrCast(self.vtable)).OnDragPosition(@as(*const INameSpaceTreeControlDropHandler, @ptrCast(self)), psi_over_, psia_data_, i_new_position_, i_old_position_);
            }
            pub inline fn onDrop(self: *const T, psi_over_: ?*IShellItem, psia_data_: ?*IShellItemArray, i_position_: i32, grf_key_state_: u32, pdw_effect_: ?*u32) HRESULT {
                return @as(*const INameSpaceTreeControlDropHandler.VTable, @ptrCast(self.vtable)).OnDrop(@as(*const INameSpaceTreeControlDropHandler, @ptrCast(self)), psi_over_, psia_data_, i_position_, grf_key_state_, pdw_effect_);
            }
            pub inline fn onDropPosition(self: *const T, psi_over_: ?*IShellItem, psia_data_: ?*IShellItemArray, i_new_position_: i32, i_old_position_: i32) HRESULT {
                return @as(*const INameSpaceTreeControlDropHandler.VTable, @ptrCast(self.vtable)).OnDropPosition(@as(*const INameSpaceTreeControlDropHandler, @ptrCast(self)), psi_over_, psia_data_, i_new_position_, i_old_position_);
            }
            pub inline fn onDragLeave(self: *const T, psi_over_: ?*IShellItem) HRESULT {
                return @as(*const INameSpaceTreeControlDropHandler.VTable, @ptrCast(self.vtable)).OnDragLeave(@as(*const INameSpaceTreeControlDropHandler, @ptrCast(self)), psi_over_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INameSpaceTreeAccessible_Value = Guid.initString("71f312de-43ed-4190-8477-e9536b82350b");
pub const IID_INameSpaceTreeAccessible = &IID_INameSpaceTreeAccessible_Value;
pub const INameSpaceTreeAccessible = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnGetDefaultAccessibilityAction: *const fn (
            self: *const INameSpaceTreeAccessible,
            psi: ?*IShellItem,
            pbstr_default_action: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDoDefaultAccessibilityAction: *const fn (
            self: *const INameSpaceTreeAccessible,
            psi: ?*IShellItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnGetAccessibilityRole: *const fn (
            self: *const INameSpaceTreeAccessible,
            psi: ?*IShellItem,
            pvar_role: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onGetDefaultAccessibilityAction(self: *const T, psi_: ?*IShellItem, pbstr_default_action_: ?*?BSTR) HRESULT {
                return @as(*const INameSpaceTreeAccessible.VTable, @ptrCast(self.vtable)).OnGetDefaultAccessibilityAction(@as(*const INameSpaceTreeAccessible, @ptrCast(self)), psi_, pbstr_default_action_);
            }
            pub inline fn onDoDefaultAccessibilityAction(self: *const T, psi_: ?*IShellItem) HRESULT {
                return @as(*const INameSpaceTreeAccessible.VTable, @ptrCast(self.vtable)).OnDoDefaultAccessibilityAction(@as(*const INameSpaceTreeAccessible, @ptrCast(self)), psi_);
            }
            pub inline fn onGetAccessibilityRole(self: *const T, psi_: ?*IShellItem, pvar_role_: ?*VARIANT) HRESULT {
                return @as(*const INameSpaceTreeAccessible.VTable, @ptrCast(self.vtable)).OnGetAccessibilityRole(@as(*const INameSpaceTreeAccessible, @ptrCast(self)), psi_, pvar_role_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const NSTCCUSTOMDRAW = extern struct {
    psi: ?*IShellItem,
    uItemState: u32,
    nstcis: u32,
    pszText: ?[*:0]const u16,
    iImage: i32,
    himl: ?HIMAGELIST,
    iLevel: i32,
    iIndent: i32,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INameSpaceTreeControlCustomDraw_Value = Guid.initString("2d3ba758-33ee-42d5-bb7b-5f3431d86c78");
pub const IID_INameSpaceTreeControlCustomDraw = &IID_INameSpaceTreeControlCustomDraw_Value;
pub const INameSpaceTreeControlCustomDraw = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PrePaint: *const fn (
            self: *const INameSpaceTreeControlCustomDraw,
            hdc: ?HDC,
            prc: ?*RECT,
            plres: ?*LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostPaint: *const fn (
            self: *const INameSpaceTreeControlCustomDraw,
            hdc: ?HDC,
            prc: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemPrePaint: *const fn (
            self: *const INameSpaceTreeControlCustomDraw,
            hdc: ?HDC,
            prc: ?*RECT,
            pnstccd_item: ?*NSTCCUSTOMDRAW,
            pclr_text: ?*u32,
            pclr_text_bk: ?*u32,
            plres: ?*LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ItemPostPaint: *const fn (
            self: *const INameSpaceTreeControlCustomDraw,
            hdc: ?HDC,
            prc: ?*RECT,
            pnstccd_item: ?*NSTCCUSTOMDRAW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn prePaint(self: *const T, hdc_: ?HDC, prc_: ?*RECT, plres_: ?*LRESULT) HRESULT {
                return @as(*const INameSpaceTreeControlCustomDraw.VTable, @ptrCast(self.vtable)).PrePaint(@as(*const INameSpaceTreeControlCustomDraw, @ptrCast(self)), hdc_, prc_, plres_);
            }
            pub inline fn postPaint(self: *const T, hdc_: ?HDC, prc_: ?*RECT) HRESULT {
                return @as(*const INameSpaceTreeControlCustomDraw.VTable, @ptrCast(self.vtable)).PostPaint(@as(*const INameSpaceTreeControlCustomDraw, @ptrCast(self)), hdc_, prc_);
            }
            pub inline fn itemPrePaint(self: *const T, hdc_: ?HDC, prc_: ?*RECT, pnstccd_item_: ?*NSTCCUSTOMDRAW, pclr_text_: ?*u32, pclr_text_bk_: ?*u32, plres_: ?*LRESULT) HRESULT {
                return @as(*const INameSpaceTreeControlCustomDraw.VTable, @ptrCast(self.vtable)).ItemPrePaint(@as(*const INameSpaceTreeControlCustomDraw, @ptrCast(self)), hdc_, prc_, pnstccd_item_, pclr_text_, pclr_text_bk_, plres_);
            }
            pub inline fn itemPostPaint(self: *const T, hdc_: ?HDC, prc_: ?*RECT, pnstccd_item_: ?*NSTCCUSTOMDRAW) HRESULT {
                return @as(*const INameSpaceTreeControlCustomDraw.VTable, @ptrCast(self.vtable)).ItemPostPaint(@as(*const INameSpaceTreeControlCustomDraw, @ptrCast(self)), hdc_, prc_, pnstccd_item_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITrayDeskBand_Value = Guid.initString("6d67e846-5b9c-4db8-9cbc-dde12f4254f1");
pub const IID_ITrayDeskBand = &IID_ITrayDeskBand_Value;
pub const ITrayDeskBand = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ShowDeskBand: *const fn (
            self: *const ITrayDeskBand,
            clsid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HideDeskBand: *const fn (
            self: *const ITrayDeskBand,
            clsid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDeskBandShown: *const fn (
            self: *const ITrayDeskBand,
            clsid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeskBandRegistrationChanged: *const fn (
            self: *const ITrayDeskBand,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn showDeskBand(self: *const T, clsid_: ?*const Guid) HRESULT {
                return @as(*const ITrayDeskBand.VTable, @ptrCast(self.vtable)).ShowDeskBand(@as(*const ITrayDeskBand, @ptrCast(self)), clsid_);
            }
            pub inline fn hideDeskBand(self: *const T, clsid_: ?*const Guid) HRESULT {
                return @as(*const ITrayDeskBand.VTable, @ptrCast(self.vtable)).HideDeskBand(@as(*const ITrayDeskBand, @ptrCast(self)), clsid_);
            }
            pub inline fn isDeskBandShown(self: *const T, clsid_: ?*const Guid) HRESULT {
                return @as(*const ITrayDeskBand.VTable, @ptrCast(self.vtable)).IsDeskBandShown(@as(*const ITrayDeskBand, @ptrCast(self)), clsid_);
            }
            pub inline fn deskBandRegistrationChanged(self: *const T) HRESULT {
                return @as(*const ITrayDeskBand.VTable, @ptrCast(self.vtable)).DeskBandRegistrationChanged(@as(*const ITrayDeskBand, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBandHost_Value = Guid.initString("b9075c7c-d48e-403f-ab99-d6c77a1084ac");
pub const IID_IBandHost = &IID_IBandHost_Value;
pub const IBandHost = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateBand: *const fn (
            self: *const IBandHost,
            rclsid_band: ?*const Guid,
            f_available: BOOL,
            f_visible: BOOL,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBandAvailability: *const fn (
            self: *const IBandHost,
            rclsid_band: ?*const Guid,
            f_available: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DestroyBand: *const fn (
            self: *const IBandHost,
            rclsid_band: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createBand(self: *const T, rclsid_band_: ?*const Guid, f_available_: BOOL, f_visible_: BOOL, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IBandHost.VTable, @ptrCast(self.vtable)).CreateBand(@as(*const IBandHost, @ptrCast(self)), rclsid_band_, f_available_, f_visible_, riid_, ppv_);
            }
            pub inline fn setBandAvailability(self: *const T, rclsid_band_: ?*const Guid, f_available_: BOOL) HRESULT {
                return @as(*const IBandHost.VTable, @ptrCast(self.vtable)).SetBandAvailability(@as(*const IBandHost, @ptrCast(self)), rclsid_band_, f_available_);
            }
            pub inline fn destroyBand(self: *const T, rclsid_band_: ?*const Guid) HRESULT {
                return @as(*const IBandHost.VTable, @ptrCast(self.vtable)).DestroyBand(@as(*const IBandHost, @ptrCast(self)), rclsid_band_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IComputerInfoChangeNotify_Value = Guid.initString("0df60d92-6818-46d6-b358-d66170dde466");
pub const IID_IComputerInfoChangeNotify = &IID_IComputerInfoChangeNotify_Value;
pub const IComputerInfoChangeNotify = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ComputerInfoChanged: *const fn (
            self: *const IComputerInfoChangeNotify,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn computerInfoChanged(self: *const T) HRESULT {
                return @as(*const IComputerInfoChangeNotify.VTable, @ptrCast(self.vtable)).ComputerInfoChanged(@as(*const IComputerInfoChangeNotify, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IDesktopGadget_Value = Guid.initString("c1646bc4-f298-4f91-a204-eb2dd1709d1a");
pub const IID_IDesktopGadget = &IID_IDesktopGadget_Value;
pub const IDesktopGadget = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RunGadget: *const fn (
            self: *const IDesktopGadget,
            gadget_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn runGadget(self: *const T, gadget_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IDesktopGadget.VTable, @ptrCast(self.vtable)).RunGadget(@as(*const IDesktopGadget, @ptrCast(self)), gadget_path_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const UNDOCK_REASON = enum(i32) {
    RESOLUTION_CHANGE = 0,
    MONITOR_DISCONNECT = 1,
};
pub const UR_RESOLUTION_CHANGE = UNDOCK_REASON.RESOLUTION_CHANGE;
pub const UR_MONITOR_DISCONNECT = UNDOCK_REASON.MONITOR_DISCONNECT;

const IID_IAccessibilityDockingServiceCallback_Value = Guid.initString("157733fd-a592-42e5-b594-248468c5a81b");
pub const IID_IAccessibilityDockingServiceCallback = &IID_IAccessibilityDockingServiceCallback_Value;
pub const IAccessibilityDockingServiceCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Undocked: *const fn (
            self: *const IAccessibilityDockingServiceCallback,
            undock_reason: UNDOCK_REASON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn undocked(self: *const T, undock_reason_: UNDOCK_REASON) HRESULT {
                return @as(*const IAccessibilityDockingServiceCallback.VTable, @ptrCast(self.vtable)).Undocked(@as(*const IAccessibilityDockingServiceCallback, @ptrCast(self)), undock_reason_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IAccessibilityDockingService_Value = Guid.initString("8849dc22-cedf-4c95-998d-051419dd3f76");
pub const IID_IAccessibilityDockingService = &IID_IAccessibilityDockingService_Value;
pub const IAccessibilityDockingService = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAvailableSize: *const fn (
            self: *const IAccessibilityDockingService,
            h_monitor: ?HMONITOR,
            pcx_fixed: ?*u32,
            pcy_max: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DockWindow: *const fn (
            self: *const IAccessibilityDockingService,
            hwnd: ?HWND,
            h_monitor: ?HMONITOR,
            cy_requested: u32,
            p_callback: ?*IAccessibilityDockingServiceCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UndockWindow: *const fn (
            self: *const IAccessibilityDockingService,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAvailableSize(self: *const T, h_monitor_: ?HMONITOR, pcx_fixed_: ?*u32, pcy_max_: ?*u32) HRESULT {
                return @as(*const IAccessibilityDockingService.VTable, @ptrCast(self.vtable)).GetAvailableSize(@as(*const IAccessibilityDockingService, @ptrCast(self)), h_monitor_, pcx_fixed_, pcy_max_);
            }
            pub inline fn dockWindow(self: *const T, hwnd_: ?HWND, h_monitor_: ?HMONITOR, cy_requested_: u32, p_callback_: ?*IAccessibilityDockingServiceCallback) HRESULT {
                return @as(*const IAccessibilityDockingService.VTable, @ptrCast(self.vtable)).DockWindow(@as(*const IAccessibilityDockingService, @ptrCast(self)), hwnd_, h_monitor_, cy_requested_, p_callback_);
            }
            pub inline fn undockWindow(self: *const T, hwnd_: ?HWND) HRESULT {
                return @as(*const IAccessibilityDockingService.VTable, @ptrCast(self.vtable)).UndockWindow(@as(*const IAccessibilityDockingService, @ptrCast(self)), hwnd_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IStorageProviderBanners_Value = Guid.initString("5efb46d7-47c0-4b68-acda-ded47c90ec91");
pub const IID_IStorageProviderBanners = &IID_IStorageProviderBanners_Value;
pub const IStorageProviderBanners = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetBanner: *const fn (
            self: *const IStorageProviderBanners,
            provider_identity: ?[*:0]const u16,
            subscription_id: ?[*:0]const u16,
            content_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearBanner: *const fn (
            self: *const IStorageProviderBanners,
            provider_identity: ?[*:0]const u16,
            subscription_id: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearAllBanners: *const fn (
            self: *const IStorageProviderBanners,
            provider_identity: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBanner: *const fn (
            self: *const IStorageProviderBanners,
            provider_identity: ?[*:0]const u16,
            subscription_id: ?[*:0]const u16,
            content_id: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setBanner(self: *const T, provider_identity_: ?[*:0]const u16, subscription_id_: ?[*:0]const u16, content_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IStorageProviderBanners.VTable, @ptrCast(self.vtable)).SetBanner(@as(*const IStorageProviderBanners, @ptrCast(self)), provider_identity_, subscription_id_, content_id_);
            }
            pub inline fn clearBanner(self: *const T, provider_identity_: ?[*:0]const u16, subscription_id_: ?[*:0]const u16) HRESULT {
                return @as(*const IStorageProviderBanners.VTable, @ptrCast(self.vtable)).ClearBanner(@as(*const IStorageProviderBanners, @ptrCast(self)), provider_identity_, subscription_id_);
            }
            pub inline fn clearAllBanners(self: *const T, provider_identity_: ?[*:0]const u16) HRESULT {
                return @as(*const IStorageProviderBanners.VTable, @ptrCast(self.vtable)).ClearAllBanners(@as(*const IStorageProviderBanners, @ptrCast(self)), provider_identity_);
            }
            pub inline fn getBanner(self: *const T, provider_identity_: ?[*:0]const u16, subscription_id_: ?[*:0]const u16, content_id_: ?*?PWSTR) HRESULT {
                return @as(*const IStorageProviderBanners.VTable, @ptrCast(self.vtable)).GetBanner(@as(*const IStorageProviderBanners, @ptrCast(self)), provider_identity_, subscription_id_, content_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IStorageProviderCopyHook_Value = Guid.initString("7bf992a9-af7a-4dba-b2e5-4d080b1ecbc6");
pub const IID_IStorageProviderCopyHook = &IID_IStorageProviderCopyHook_Value;
pub const IStorageProviderCopyHook = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CopyCallback: *const fn (
            self: *const IStorageProviderCopyHook,
            hwnd: ?HWND,
            operation: u32,
            flags: u32,
            src_file: ?[*:0]const u16,
            src_attribs: u32,
            dest_file: ?[*:0]const u16,
            dest_attribs: u32,
            result: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn copyCallback(self: *const T, hwnd_: ?HWND, operation_: u32, flags_: u32, src_file_: ?[*:0]const u16, src_attribs_: u32, dest_file_: ?[*:0]const u16, dest_attribs_: u32, result_: ?*u32) HRESULT {
                return @as(*const IStorageProviderCopyHook.VTable, @ptrCast(self.vtable)).CopyCallback(@as(*const IStorageProviderCopyHook, @ptrCast(self)), hwnd_, operation_, flags_, src_file_, src_attribs_, dest_file_, dest_attribs_, result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_WebBrowser_V1_Value = Guid.initString("eab22ac3-30c1-11cf-a7eb-0000c05bae0b");
pub const CLSID_WebBrowser_V1 = &CLSID_WebBrowser_V1_Value;

const CLSID_WebBrowser_Value = Guid.initString("8856f961-340a-11d0-a96b-00c04fd705a2");
pub const CLSID_WebBrowser = &CLSID_WebBrowser_Value;

const CLSID_InternetExplorer_Value = Guid.initString("0002df01-0000-0000-c000-000000000046");
pub const CLSID_InternetExplorer = &CLSID_InternetExplorer_Value;

const CLSID_InternetExplorerMedium_Value = Guid.initString("d5e8041d-920f-45e9-b8fb-b1deb82c6e5e");
pub const CLSID_InternetExplorerMedium = &CLSID_InternetExplorerMedium_Value;

const CLSID_ShellBrowserWindow_Value = Guid.initString("c08afd90-f2a1-11d1-8455-00a0c91f3880");
pub const CLSID_ShellBrowserWindow = &CLSID_ShellBrowserWindow_Value;

const CLSID_ShellWindows_Value = Guid.initString("9ba05972-f6a8-11cf-a442-00a0c90a8f39");
pub const CLSID_ShellWindows = &CLSID_ShellWindows_Value;

const CLSID_ShellUIHelper_Value = Guid.initString("64ab4bb7-111e-11d1-8f79-00c04fc2fbe1");
pub const CLSID_ShellUIHelper = &CLSID_ShellUIHelper_Value;

const CLSID_ShellNameSpace_Value = Guid.initString("55136805-b2de-11d1-b9f2-00a0c98bc547");
pub const CLSID_ShellNameSpace = &CLSID_ShellNameSpace_Value;

const CLSID_CScriptErrorList_Value = Guid.initString("efd01300-160f-11d2-bb2e-00805ff7efca");
pub const CLSID_CScriptErrorList = &CLSID_CScriptErrorList_Value;

pub const CommandStateChangeConstants = enum(i32) {
    UPDATECOMMANDS = -1,
    NAVIGATEFORWARD = 1,
    NAVIGATEBACK = 2,
};
pub const CSC_UPDATECOMMANDS = CommandStateChangeConstants.UPDATECOMMANDS;
pub const CSC_NAVIGATEFORWARD = CommandStateChangeConstants.NAVIGATEFORWARD;
pub const CSC_NAVIGATEBACK = CommandStateChangeConstants.NAVIGATEBACK;

pub const SecureLockIconConstants = enum(i32) {
    Unsecure = 0,
    Mixed = 1,
    SecureUnknownBits = 2,
    Secure40Bit = 3,
    Secure56Bit = 4,
    SecureFortezza = 5,
    Secure128Bit = 6,
};
pub const secureLockIconUnsecure = SecureLockIconConstants.Unsecure;
pub const secureLockIconMixed = SecureLockIconConstants.Mixed;
pub const secureLockIconSecureUnknownBits = SecureLockIconConstants.SecureUnknownBits;
pub const secureLockIconSecure40Bit = SecureLockIconConstants.Secure40Bit;
pub const secureLockIconSecure56Bit = SecureLockIconConstants.Secure56Bit;
pub const secureLockIconSecureFortezza = SecureLockIconConstants.SecureFortezza;
pub const secureLockIconSecure128Bit = SecureLockIconConstants.Secure128Bit;

pub const NewProcessCauseConstants = enum(i32) {
    t = 1,
};
pub const ProtectedModeRedirect = NewProcessCauseConstants.t;

pub const ShellWindowTypeConstants = enum(i32) {
    EXPLORER = 0,
    BROWSER = 1,
    @"3RDPARTY" = 2,
    CALLBACK = 4,
    DESKTOP = 8,
};
pub const SWC_EXPLORER = ShellWindowTypeConstants.EXPLORER;
pub const SWC_BROWSER = ShellWindowTypeConstants.BROWSER;
pub const SWC_3RDPARTY = ShellWindowTypeConstants.@"3RDPARTY";
pub const SWC_CALLBACK = ShellWindowTypeConstants.CALLBACK;
pub const SWC_DESKTOP = ShellWindowTypeConstants.DESKTOP;

pub const ShellWindowFindWindowOptions = enum(i32) {
    NEEDDISPATCH = 1,
    INCLUDEPENDING = 2,
    COOKIEPASSED = 4,
};
pub const SWFO_NEEDDISPATCH = ShellWindowFindWindowOptions.NEEDDISPATCH;
pub const SWFO_INCLUDEPENDING = ShellWindowFindWindowOptions.INCLUDEPENDING;
pub const SWFO_COOKIEPASSED = ShellWindowFindWindowOptions.COOKIEPASSED;

pub const BrowserNavConstants = enum(i32) {
    OpenInNewWindow = 1,
    NoHistory = 2,
    NoReadFromCache = 4,
    NoWriteToCache = 8,
    AllowAutosearch = 16,
    BrowserBar = 32,
    Hyperlink = 64,
    EnforceRestricted = 128,
    NewWindowsManaged = 256,
    UntrustedForDownload = 512,
    TrustedForActiveX = 1024,
    OpenInNewTab = 2048,
    OpenInBackgroundTab = 4096,
    KeepWordWheelText = 8192,
    VirtualTab = 16384,
    BlockRedirectsXDomain = 32768,
    OpenNewForegroundTab = 65536,
    TravelLogScreenshot = 131072,
    DeferUnload = 262144,
    Speculative = 524288,
    SuggestNewWindow = 1048576,
    SuggestNewTab = 2097152,
    Reserved1 = 4194304,
    HomepageNavigate = 8388608,
    Refresh = 16777216,
    HostNavigation = 33554432,
    Reserved2 = 67108864,
    Reserved3 = 134217728,
    Reserved4 = 268435456,
    Reserved5 = 536870912,
    Reserved6 = 1073741824,
    Reserved7 = -2147483648,
};
pub const navOpenInNewWindow = BrowserNavConstants.OpenInNewWindow;
pub const navNoHistory = BrowserNavConstants.NoHistory;
pub const navNoReadFromCache = BrowserNavConstants.NoReadFromCache;
pub const navNoWriteToCache = BrowserNavConstants.NoWriteToCache;
pub const navAllowAutosearch = BrowserNavConstants.AllowAutosearch;
pub const navBrowserBar = BrowserNavConstants.BrowserBar;
pub const navHyperlink = BrowserNavConstants.Hyperlink;
pub const navEnforceRestricted = BrowserNavConstants.EnforceRestricted;
pub const navNewWindowsManaged = BrowserNavConstants.NewWindowsManaged;
pub const navUntrustedForDownload = BrowserNavConstants.UntrustedForDownload;
pub const navTrustedForActiveX = BrowserNavConstants.TrustedForActiveX;
pub const navOpenInNewTab = BrowserNavConstants.OpenInNewTab;
pub const navOpenInBackgroundTab = BrowserNavConstants.OpenInBackgroundTab;
pub const navKeepWordWheelText = BrowserNavConstants.KeepWordWheelText;
pub const navVirtualTab = BrowserNavConstants.VirtualTab;
pub const navBlockRedirectsXDomain = BrowserNavConstants.BlockRedirectsXDomain;
pub const navOpenNewForegroundTab = BrowserNavConstants.OpenNewForegroundTab;
pub const navTravelLogScreenshot = BrowserNavConstants.TravelLogScreenshot;
pub const navDeferUnload = BrowserNavConstants.DeferUnload;
pub const navSpeculative = BrowserNavConstants.Speculative;
pub const navSuggestNewWindow = BrowserNavConstants.SuggestNewWindow;
pub const navSuggestNewTab = BrowserNavConstants.SuggestNewTab;
pub const navReserved1 = BrowserNavConstants.Reserved1;
pub const navHomepageNavigate = BrowserNavConstants.HomepageNavigate;
pub const navRefresh = BrowserNavConstants.Refresh;
pub const navHostNavigation = BrowserNavConstants.HostNavigation;
pub const navReserved2 = BrowserNavConstants.Reserved2;
pub const navReserved3 = BrowserNavConstants.Reserved3;
pub const navReserved4 = BrowserNavConstants.Reserved4;
pub const navReserved5 = BrowserNavConstants.Reserved5;
pub const navReserved6 = BrowserNavConstants.Reserved6;
pub const navReserved7 = BrowserNavConstants.Reserved7;

pub const RefreshConstants = enum(i32) {
    NORMAL = 0,
    IFEXPIRED = 1,
    COMPLETELY = 3,
};
pub const REFRESH_NORMAL = RefreshConstants.NORMAL;
pub const REFRESH_IFEXPIRED = RefreshConstants.IFEXPIRED;
pub const REFRESH_COMPLETELY = RefreshConstants.COMPLETELY;

const IID_IWebBrowser_Value = Guid.initString("eab22ac1-30c1-11cf-a7eb-0000c05bae0b");
pub const IID_IWebBrowser = &IID_IWebBrowser_Value;
pub const IWebBrowser = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GoBack: *const fn (
            self: *const IWebBrowser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GoForward: *const fn (
            self: *const IWebBrowser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GoHome: *const fn (
            self: *const IWebBrowser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GoSearch: *const fn (
            self: *const IWebBrowser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Navigate: *const fn (
            self: *const IWebBrowser,
            u_r_l: ?BSTR,
            flags: ?*VARIANT,
            target_frame_name: ?*VARIANT,
            post_data: ?*VARIANT,
            headers: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IWebBrowser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh2: *const fn (
            self: *const IWebBrowser,
            level: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const IWebBrowser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Application: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser,
            pp_disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser,
            pp_disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Container: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser,
            pp_disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Document: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser,
            pp_disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TopLevelContainer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser,
            p_bool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser,
            type: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Left: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser,
            pl: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Left: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser,
            left: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Top: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser,
            pl: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Top: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser,
            top: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Width: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser,
            pl: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Width: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser,
            width: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Height: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser,
            pl: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Height: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser,
            height: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocationName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser,
            location_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocationURL: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser,
            location_u_r_l: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Busy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser,
            p_bool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn goBack(self: *const T) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).GoBack(@as(*const IWebBrowser, @ptrCast(self)));
            }
            pub inline fn goForward(self: *const T) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).GoForward(@as(*const IWebBrowser, @ptrCast(self)));
            }
            pub inline fn goHome(self: *const T) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).GoHome(@as(*const IWebBrowser, @ptrCast(self)));
            }
            pub inline fn goSearch(self: *const T) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).GoSearch(@as(*const IWebBrowser, @ptrCast(self)));
            }
            pub inline fn navigate(self: *const T, u_r_l_: ?BSTR, flags_: ?*VARIANT, target_frame_name_: ?*VARIANT, post_data_: ?*VARIANT, headers_: ?*VARIANT) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).Navigate(@as(*const IWebBrowser, @ptrCast(self)), u_r_l_, flags_, target_frame_name_, post_data_, headers_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IWebBrowser, @ptrCast(self)));
            }
            pub inline fn refresh2(self: *const T, level_: ?*VARIANT) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).Refresh2(@as(*const IWebBrowser, @ptrCast(self)), level_);
            }
            pub inline fn stop(self: *const T) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).Stop(@as(*const IWebBrowser, @ptrCast(self)));
            }
            pub inline fn getApplication(self: *const T, pp_disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).get_Application(@as(*const IWebBrowser, @ptrCast(self)), pp_disp_);
            }
            pub inline fn getParent(self: *const T, pp_disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).get_Parent(@as(*const IWebBrowser, @ptrCast(self)), pp_disp_);
            }
            pub inline fn getContainer(self: *const T, pp_disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).get_Container(@as(*const IWebBrowser, @ptrCast(self)), pp_disp_);
            }
            pub inline fn getDocument(self: *const T, pp_disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).get_Document(@as(*const IWebBrowser, @ptrCast(self)), pp_disp_);
            }
            pub inline fn getTopLevelContainer(self: *const T, p_bool_: ?*i16) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).get_TopLevelContainer(@as(*const IWebBrowser, @ptrCast(self)), p_bool_);
            }
            pub inline fn getType(self: *const T, type_: ?*?BSTR) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IWebBrowser, @ptrCast(self)), type_);
            }
            pub inline fn getLeft(self: *const T, pl_: ?*i32) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).get_Left(@as(*const IWebBrowser, @ptrCast(self)), pl_);
            }
            pub inline fn putLeft(self: *const T, left_: i32) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).put_Left(@as(*const IWebBrowser, @ptrCast(self)), left_);
            }
            pub inline fn getTop(self: *const T, pl_: ?*i32) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).get_Top(@as(*const IWebBrowser, @ptrCast(self)), pl_);
            }
            pub inline fn putTop(self: *const T, top_: i32) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).put_Top(@as(*const IWebBrowser, @ptrCast(self)), top_);
            }
            pub inline fn getWidth(self: *const T, pl_: ?*i32) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).get_Width(@as(*const IWebBrowser, @ptrCast(self)), pl_);
            }
            pub inline fn putWidth(self: *const T, width_: i32) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).put_Width(@as(*const IWebBrowser, @ptrCast(self)), width_);
            }
            pub inline fn getHeight(self: *const T, pl_: ?*i32) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).get_Height(@as(*const IWebBrowser, @ptrCast(self)), pl_);
            }
            pub inline fn putHeight(self: *const T, height_: i32) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).put_Height(@as(*const IWebBrowser, @ptrCast(self)), height_);
            }
            pub inline fn getLocationName(self: *const T, location_name_: ?*?BSTR) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).get_LocationName(@as(*const IWebBrowser, @ptrCast(self)), location_name_);
            }
            pub inline fn getLocationURL(self: *const T, location_u_r_l_: ?*?BSTR) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).get_LocationURL(@as(*const IWebBrowser, @ptrCast(self)), location_u_r_l_);
            }
            pub inline fn getBusy(self: *const T, p_bool_: ?*i16) HRESULT {
                return @as(*const IWebBrowser.VTable, @ptrCast(self.vtable)).get_Busy(@as(*const IWebBrowser, @ptrCast(self)), p_bool_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_DWebBrowserEvents_Value = Guid.initString("eab22ac2-30c1-11cf-a7eb-0000c05bae0b");
pub const IID_DWebBrowserEvents = &IID_DWebBrowserEvents_Value;
pub const DWebBrowserEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWebBrowserApp_Value = Guid.initString("0002df05-0000-0000-c000-000000000046");
pub const IID_IWebBrowserApp = &IID_IWebBrowserApp_Value;
pub const IWebBrowserApp = extern struct {
    pub const VTable = extern struct {
        base: IWebBrowser.VTable,
        Quit: *const fn (
            self: *const IWebBrowserApp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClientToWindow: *const fn (
            self: *const IWebBrowserApp,
            pcx: ?*i32,
            pcy: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutProperty: *const fn (
            self: *const IWebBrowserApp,
            property: ?BSTR,
            vt_value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperty: *const fn (
            self: *const IWebBrowserApp,
            property: ?BSTR,
            pvt_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowserApp,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HWND: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowserApp,
            p_h_w_n_d: ?*SHANDLE_PTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FullName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowserApp,
            full_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowserApp,
            path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Visible: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowserApp,
            p_bool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Visible: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowserApp,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusBar: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowserApp,
            p_bool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StatusBar: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowserApp,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowserApp,
            status_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StatusText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowserApp,
            status_text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ToolBar: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowserApp,
            value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ToolBar: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowserApp,
            value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MenuBar: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowserApp,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MenuBar: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowserApp,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FullScreen: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowserApp,
            pb_full_screen: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FullScreen: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowserApp,
            b_full_screen: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWebBrowser.MethodMixin(T);
            pub inline fn quit(self: *const T) HRESULT {
                return @as(*const IWebBrowserApp.VTable, @ptrCast(self.vtable)).Quit(@as(*const IWebBrowserApp, @ptrCast(self)));
            }
            pub inline fn clientToWindow(self: *const T, pcx_: ?*i32, pcy_: ?*i32) HRESULT {
                return @as(*const IWebBrowserApp.VTable, @ptrCast(self.vtable)).ClientToWindow(@as(*const IWebBrowserApp, @ptrCast(self)), pcx_, pcy_);
            }
            pub inline fn putProperty(self: *const T, property_: ?BSTR, vt_value_: VARIANT) HRESULT {
                return @as(*const IWebBrowserApp.VTable, @ptrCast(self.vtable)).PutProperty(@as(*const IWebBrowserApp, @ptrCast(self)), property_, vt_value_);
            }
            pub inline fn getProperty(self: *const T, property_: ?BSTR, pvt_value_: ?*VARIANT) HRESULT {
                return @as(*const IWebBrowserApp.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const IWebBrowserApp, @ptrCast(self)), property_, pvt_value_);
            }
            pub inline fn getName(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const IWebBrowserApp.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IWebBrowserApp, @ptrCast(self)), name_);
            }
            pub inline fn getHWND(self: *const T, p_h_w_n_d_: ?*SHANDLE_PTR) HRESULT {
                return @as(*const IWebBrowserApp.VTable, @ptrCast(self.vtable)).get_HWND(@as(*const IWebBrowserApp, @ptrCast(self)), p_h_w_n_d_);
            }
            pub inline fn getFullName(self: *const T, full_name_: ?*?BSTR) HRESULT {
                return @as(*const IWebBrowserApp.VTable, @ptrCast(self.vtable)).get_FullName(@as(*const IWebBrowserApp, @ptrCast(self)), full_name_);
            }
            pub inline fn getPath(self: *const T, path_: ?*?BSTR) HRESULT {
                return @as(*const IWebBrowserApp.VTable, @ptrCast(self.vtable)).get_Path(@as(*const IWebBrowserApp, @ptrCast(self)), path_);
            }
            pub inline fn getVisible(self: *const T, p_bool_: ?*i16) HRESULT {
                return @as(*const IWebBrowserApp.VTable, @ptrCast(self.vtable)).get_Visible(@as(*const IWebBrowserApp, @ptrCast(self)), p_bool_);
            }
            pub inline fn putVisible(self: *const T, value_: i16) HRESULT {
                return @as(*const IWebBrowserApp.VTable, @ptrCast(self.vtable)).put_Visible(@as(*const IWebBrowserApp, @ptrCast(self)), value_);
            }
            pub inline fn getStatusBar(self: *const T, p_bool_: ?*i16) HRESULT {
                return @as(*const IWebBrowserApp.VTable, @ptrCast(self.vtable)).get_StatusBar(@as(*const IWebBrowserApp, @ptrCast(self)), p_bool_);
            }
            pub inline fn putStatusBar(self: *const T, value_: i16) HRESULT {
                return @as(*const IWebBrowserApp.VTable, @ptrCast(self.vtable)).put_StatusBar(@as(*const IWebBrowserApp, @ptrCast(self)), value_);
            }
            pub inline fn getStatusText(self: *const T, status_text_: ?*?BSTR) HRESULT {
                return @as(*const IWebBrowserApp.VTable, @ptrCast(self.vtable)).get_StatusText(@as(*const IWebBrowserApp, @ptrCast(self)), status_text_);
            }
            pub inline fn putStatusText(self: *const T, status_text_: ?BSTR) HRESULT {
                return @as(*const IWebBrowserApp.VTable, @ptrCast(self.vtable)).put_StatusText(@as(*const IWebBrowserApp, @ptrCast(self)), status_text_);
            }
            pub inline fn getToolBar(self: *const T, value_: ?*i32) HRESULT {
                return @as(*const IWebBrowserApp.VTable, @ptrCast(self.vtable)).get_ToolBar(@as(*const IWebBrowserApp, @ptrCast(self)), value_);
            }
            pub inline fn putToolBar(self: *const T, value_: i32) HRESULT {
                return @as(*const IWebBrowserApp.VTable, @ptrCast(self.vtable)).put_ToolBar(@as(*const IWebBrowserApp, @ptrCast(self)), value_);
            }
            pub inline fn getMenuBar(self: *const T, value_: ?*i16) HRESULT {
                return @as(*const IWebBrowserApp.VTable, @ptrCast(self.vtable)).get_MenuBar(@as(*const IWebBrowserApp, @ptrCast(self)), value_);
            }
            pub inline fn putMenuBar(self: *const T, value_: i16) HRESULT {
                return @as(*const IWebBrowserApp.VTable, @ptrCast(self.vtable)).put_MenuBar(@as(*const IWebBrowserApp, @ptrCast(self)), value_);
            }
            pub inline fn getFullScreen(self: *const T, pb_full_screen_: ?*i16) HRESULT {
                return @as(*const IWebBrowserApp.VTable, @ptrCast(self.vtable)).get_FullScreen(@as(*const IWebBrowserApp, @ptrCast(self)), pb_full_screen_);
            }
            pub inline fn putFullScreen(self: *const T, b_full_screen_: i16) HRESULT {
                return @as(*const IWebBrowserApp.VTable, @ptrCast(self.vtable)).put_FullScreen(@as(*const IWebBrowserApp, @ptrCast(self)), b_full_screen_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IWebBrowser2_Value = Guid.initString("d30c1661-cdaf-11d0-8a3e-00c04fc9e26e");
pub const IID_IWebBrowser2 = &IID_IWebBrowser2_Value;
pub const IWebBrowser2 = extern struct {
    pub const VTable = extern struct {
        base: IWebBrowserApp.VTable,
        Navigate2: *const fn (
            self: *const IWebBrowser2,
            u_r_l: ?*VARIANT,
            flags: ?*VARIANT,
            target_frame_name: ?*VARIANT,
            post_data: ?*VARIANT,
            headers: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryStatusWB: *const fn (
            self: *const IWebBrowser2,
            cmd_i_d: OLECMDID,
            pcmdf: ?*OLECMDF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecWB: *const fn (
            self: *const IWebBrowser2,
            cmd_i_d: OLECMDID,
            cmdexecopt: OLECMDEXECOPT,
            pva_in: ?*VARIANT,
            pva_out: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowBrowserBar: *const fn (
            self: *const IWebBrowser2,
            pva_clsid: ?*VARIANT,
            pvar_show: ?*VARIANT,
            pvar_size: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReadyState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser2,
            pl_ready_state: ?*READYSTATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Offline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser2,
            pb_offline: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Offline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser2,
            b_offline: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Silent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser2,
            pb_silent: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Silent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser2,
            b_silent: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RegisterAsBrowser: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser2,
            pb_register: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RegisterAsBrowser: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser2,
            b_register: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RegisterAsDropTarget: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser2,
            pb_register: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RegisterAsDropTarget: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser2,
            b_register: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TheaterMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser2,
            pb_register: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TheaterMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser2,
            b_register: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AddressBar: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser2,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AddressBar: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser2,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Resizable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser2,
            value: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Resizable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebBrowser2,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWebBrowserApp.MethodMixin(T);
            pub inline fn navigate2(self: *const T, u_r_l_: ?*VARIANT, flags_: ?*VARIANT, target_frame_name_: ?*VARIANT, post_data_: ?*VARIANT, headers_: ?*VARIANT) HRESULT {
                return @as(*const IWebBrowser2.VTable, @ptrCast(self.vtable)).Navigate2(@as(*const IWebBrowser2, @ptrCast(self)), u_r_l_, flags_, target_frame_name_, post_data_, headers_);
            }
            pub inline fn queryStatusWB(self: *const T, cmd_i_d_: OLECMDID, pcmdf_: ?*OLECMDF) HRESULT {
                return @as(*const IWebBrowser2.VTable, @ptrCast(self.vtable)).QueryStatusWB(@as(*const IWebBrowser2, @ptrCast(self)), cmd_i_d_, pcmdf_);
            }
            pub inline fn execWB(self: *const T, cmd_i_d_: OLECMDID, cmdexecopt_: OLECMDEXECOPT, pva_in_: ?*VARIANT, pva_out_: ?*VARIANT) HRESULT {
                return @as(*const IWebBrowser2.VTable, @ptrCast(self.vtable)).ExecWB(@as(*const IWebBrowser2, @ptrCast(self)), cmd_i_d_, cmdexecopt_, pva_in_, pva_out_);
            }
            pub inline fn showBrowserBar(self: *const T, pva_clsid_: ?*VARIANT, pvar_show_: ?*VARIANT, pvar_size_: ?*VARIANT) HRESULT {
                return @as(*const IWebBrowser2.VTable, @ptrCast(self.vtable)).ShowBrowserBar(@as(*const IWebBrowser2, @ptrCast(self)), pva_clsid_, pvar_show_, pvar_size_);
            }
            pub inline fn getReadyState(self: *const T, pl_ready_state_: ?*READYSTATE) HRESULT {
                return @as(*const IWebBrowser2.VTable, @ptrCast(self.vtable)).get_ReadyState(@as(*const IWebBrowser2, @ptrCast(self)), pl_ready_state_);
            }
            pub inline fn getOffline(self: *const T, pb_offline_: ?*i16) HRESULT {
                return @as(*const IWebBrowser2.VTable, @ptrCast(self.vtable)).get_Offline(@as(*const IWebBrowser2, @ptrCast(self)), pb_offline_);
            }
            pub inline fn putOffline(self: *const T, b_offline_: i16) HRESULT {
                return @as(*const IWebBrowser2.VTable, @ptrCast(self.vtable)).put_Offline(@as(*const IWebBrowser2, @ptrCast(self)), b_offline_);
            }
            pub inline fn getSilent(self: *const T, pb_silent_: ?*i16) HRESULT {
                return @as(*const IWebBrowser2.VTable, @ptrCast(self.vtable)).get_Silent(@as(*const IWebBrowser2, @ptrCast(self)), pb_silent_);
            }
            pub inline fn putSilent(self: *const T, b_silent_: i16) HRESULT {
                return @as(*const IWebBrowser2.VTable, @ptrCast(self.vtable)).put_Silent(@as(*const IWebBrowser2, @ptrCast(self)), b_silent_);
            }
            pub inline fn getRegisterAsBrowser(self: *const T, pb_register_: ?*i16) HRESULT {
                return @as(*const IWebBrowser2.VTable, @ptrCast(self.vtable)).get_RegisterAsBrowser(@as(*const IWebBrowser2, @ptrCast(self)), pb_register_);
            }
            pub inline fn putRegisterAsBrowser(self: *const T, b_register_: i16) HRESULT {
                return @as(*const IWebBrowser2.VTable, @ptrCast(self.vtable)).put_RegisterAsBrowser(@as(*const IWebBrowser2, @ptrCast(self)), b_register_);
            }
            pub inline fn getRegisterAsDropTarget(self: *const T, pb_register_: ?*i16) HRESULT {
                return @as(*const IWebBrowser2.VTable, @ptrCast(self.vtable)).get_RegisterAsDropTarget(@as(*const IWebBrowser2, @ptrCast(self)), pb_register_);
            }
            pub inline fn putRegisterAsDropTarget(self: *const T, b_register_: i16) HRESULT {
                return @as(*const IWebBrowser2.VTable, @ptrCast(self.vtable)).put_RegisterAsDropTarget(@as(*const IWebBrowser2, @ptrCast(self)), b_register_);
            }
            pub inline fn getTheaterMode(self: *const T, pb_register_: ?*i16) HRESULT {
                return @as(*const IWebBrowser2.VTable, @ptrCast(self.vtable)).get_TheaterMode(@as(*const IWebBrowser2, @ptrCast(self)), pb_register_);
            }
            pub inline fn putTheaterMode(self: *const T, b_register_: i16) HRESULT {
                return @as(*const IWebBrowser2.VTable, @ptrCast(self.vtable)).put_TheaterMode(@as(*const IWebBrowser2, @ptrCast(self)), b_register_);
            }
            pub inline fn getAddressBar(self: *const T, value_: ?*i16) HRESULT {
                return @as(*const IWebBrowser2.VTable, @ptrCast(self.vtable)).get_AddressBar(@as(*const IWebBrowser2, @ptrCast(self)), value_);
            }
            pub inline fn putAddressBar(self: *const T, value_: i16) HRESULT {
                return @as(*const IWebBrowser2.VTable, @ptrCast(self.vtable)).put_AddressBar(@as(*const IWebBrowser2, @ptrCast(self)), value_);
            }
            pub inline fn getResizable(self: *const T, value_: ?*i16) HRESULT {
                return @as(*const IWebBrowser2.VTable, @ptrCast(self.vtable)).get_Resizable(@as(*const IWebBrowser2, @ptrCast(self)), value_);
            }
            pub inline fn putResizable(self: *const T, value_: i16) HRESULT {
                return @as(*const IWebBrowser2.VTable, @ptrCast(self.vtable)).put_Resizable(@as(*const IWebBrowser2, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_DWebBrowserEvents2_Value = Guid.initString("34a715a0-6587-11d0-924a-0020afc7ac4d");
pub const IID_DWebBrowserEvents2 = &IID_DWebBrowserEvents2_Value;
pub const DWebBrowserEvents2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_DShellWindowsEvents_Value = Guid.initString("fe4106e0-399a-11d0-a48c-00a0c90a8f39");
pub const IID_DShellWindowsEvents = &IID_DShellWindowsEvents_Value;
pub const DShellWindowsEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellWindows_Value = Guid.initString("85cb6900-4d95-11cf-960c-0080c7f4ee85");
pub const IID_IShellWindows = &IID_IShellWindows_Value;
pub const IShellWindows = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellWindows,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const IShellWindows,
            index: VARIANT,
            folder: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _NewEnum: *const fn (
            self: *const IShellWindows,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Register: *const fn (
            self: *const IShellWindows,
            pid: ?*IDispatch,
            hwnd: i32,
            sw_class: i32,
            pl_cookie: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterPending: *const fn (
            self: *const IShellWindows,
            l_thread_id: i32,
            pvarloc: ?*VARIANT,
            pvarloc_root: ?*VARIANT,
            sw_class: i32,
            pl_cookie: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Revoke: *const fn (
            self: *const IShellWindows,
            l_cookie: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNavigate: *const fn (
            self: *const IShellWindows,
            l_cookie: i32,
            pvar_loc: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnActivated: *const fn (
            self: *const IShellWindows,
            l_cookie: i32,
            f_active: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindWindowSW: *const fn (
            self: *const IShellWindows,
            pvar_loc: ?*VARIANT,
            pvar_loc_root: ?*VARIANT,
            sw_class: i32,
            phwnd: ?*i32,
            swfw_options: i32,
            ppdisp_out: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCreated: *const fn (
            self: *const IShellWindows,
            l_cookie: i32,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProcessAttachDetach: *const fn (
            self: *const IShellWindows,
            f_attach: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const IShellWindows.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IShellWindows, @ptrCast(self)), count_);
            }
            pub inline fn item(self: *const T, index_: VARIANT, folder_: ?*?*IDispatch) HRESULT {
                return @as(*const IShellWindows.VTable, @ptrCast(self.vtable)).Item(@as(*const IShellWindows, @ptrCast(self)), index_, folder_);
            }
            pub inline fn newEnum(self: *const T, ppunk_: ?*?*IUnknown) HRESULT {
                return @as(*const IShellWindows.VTable, @ptrCast(self.vtable))._NewEnum(@as(*const IShellWindows, @ptrCast(self)), ppunk_);
            }
            pub inline fn register(self: *const T, pid_: ?*IDispatch, hwnd_: i32, sw_class_: i32, pl_cookie_: ?*i32) HRESULT {
                return @as(*const IShellWindows.VTable, @ptrCast(self.vtable)).Register(@as(*const IShellWindows, @ptrCast(self)), pid_, hwnd_, sw_class_, pl_cookie_);
            }
            pub inline fn registerPending(self: *const T, l_thread_id_: i32, pvarloc_: ?*VARIANT, pvarloc_root_: ?*VARIANT, sw_class_: i32, pl_cookie_: ?*i32) HRESULT {
                return @as(*const IShellWindows.VTable, @ptrCast(self.vtable)).RegisterPending(@as(*const IShellWindows, @ptrCast(self)), l_thread_id_, pvarloc_, pvarloc_root_, sw_class_, pl_cookie_);
            }
            pub inline fn revoke(self: *const T, l_cookie_: i32) HRESULT {
                return @as(*const IShellWindows.VTable, @ptrCast(self.vtable)).Revoke(@as(*const IShellWindows, @ptrCast(self)), l_cookie_);
            }
            pub inline fn onNavigate(self: *const T, l_cookie_: i32, pvar_loc_: ?*VARIANT) HRESULT {
                return @as(*const IShellWindows.VTable, @ptrCast(self.vtable)).OnNavigate(@as(*const IShellWindows, @ptrCast(self)), l_cookie_, pvar_loc_);
            }
            pub inline fn onActivated(self: *const T, l_cookie_: i32, f_active_: i16) HRESULT {
                return @as(*const IShellWindows.VTable, @ptrCast(self.vtable)).OnActivated(@as(*const IShellWindows, @ptrCast(self)), l_cookie_, f_active_);
            }
            pub inline fn findWindowSW(self: *const T, pvar_loc_: ?*VARIANT, pvar_loc_root_: ?*VARIANT, sw_class_: i32, phwnd_: ?*i32, swfw_options_: i32, ppdisp_out_: ?*?*IDispatch) HRESULT {
                return @as(*const IShellWindows.VTable, @ptrCast(self.vtable)).FindWindowSW(@as(*const IShellWindows, @ptrCast(self)), pvar_loc_, pvar_loc_root_, sw_class_, phwnd_, swfw_options_, ppdisp_out_);
            }
            pub inline fn onCreated(self: *const T, l_cookie_: i32, punk_: ?*IUnknown) HRESULT {
                return @as(*const IShellWindows.VTable, @ptrCast(self.vtable)).OnCreated(@as(*const IShellWindows, @ptrCast(self)), l_cookie_, punk_);
            }
            pub inline fn processAttachDetach(self: *const T, f_attach_: i16) HRESULT {
                return @as(*const IShellWindows.VTable, @ptrCast(self.vtable)).ProcessAttachDetach(@as(*const IShellWindows, @ptrCast(self)), f_attach_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellUIHelper_Value = Guid.initString("729fe2f8-1ea8-11d1-8f85-00c04fc2fbe1");
pub const IID_IShellUIHelper = &IID_IShellUIHelper_Value;
pub const IShellUIHelper = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        ResetFirstBootMode: *const fn (
            self: *const IShellUIHelper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetSafeMode: *const fn (
            self: *const IShellUIHelper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshOfflineDesktop: *const fn (
            self: *const IShellUIHelper,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddFavorite: *const fn (
            self: *const IShellUIHelper,
            u_r_l: ?BSTR,
            title: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddChannel: *const fn (
            self: *const IShellUIHelper,
            u_r_l: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddDesktopComponent: *const fn (
            self: *const IShellUIHelper,
            u_r_l: ?BSTR,
            type: ?BSTR,
            left: ?*VARIANT,
            top: ?*VARIANT,
            width: ?*VARIANT,
            height: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSubscribed: *const fn (
            self: *const IShellUIHelper,
            u_r_l: ?BSTR,
            p_bool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NavigateAndFind: *const fn (
            self: *const IShellUIHelper,
            u_r_l: ?BSTR,
            str_query: ?BSTR,
            var_target_frame: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportExportFavorites: *const fn (
            self: *const IShellUIHelper,
            f_import: i16,
            str_imp_exp_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AutoCompleteSaveForm: *const fn (
            self: *const IShellUIHelper,
            form: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AutoScan: *const fn (
            self: *const IShellUIHelper,
            str_search: ?BSTR,
            str_failure_url: ?BSTR,
            pvar_target_frame: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AutoCompleteAttach: *const fn (
            self: *const IShellUIHelper,
            reserved: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowBrowserUI: *const fn (
            self: *const IShellUIHelper,
            bstr_name: ?BSTR,
            pvar_in: ?*VARIANT,
            pvar_out: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn resetFirstBootMode(self: *const T) HRESULT {
                return @as(*const IShellUIHelper.VTable, @ptrCast(self.vtable)).ResetFirstBootMode(@as(*const IShellUIHelper, @ptrCast(self)));
            }
            pub inline fn resetSafeMode(self: *const T) HRESULT {
                return @as(*const IShellUIHelper.VTable, @ptrCast(self.vtable)).ResetSafeMode(@as(*const IShellUIHelper, @ptrCast(self)));
            }
            pub inline fn refreshOfflineDesktop(self: *const T) HRESULT {
                return @as(*const IShellUIHelper.VTable, @ptrCast(self.vtable)).RefreshOfflineDesktop(@as(*const IShellUIHelper, @ptrCast(self)));
            }
            pub inline fn addFavorite(self: *const T, u_r_l_: ?BSTR, title_: ?*VARIANT) HRESULT {
                return @as(*const IShellUIHelper.VTable, @ptrCast(self.vtable)).AddFavorite(@as(*const IShellUIHelper, @ptrCast(self)), u_r_l_, title_);
            }
            pub inline fn addChannel(self: *const T, u_r_l_: ?BSTR) HRESULT {
                return @as(*const IShellUIHelper.VTable, @ptrCast(self.vtable)).AddChannel(@as(*const IShellUIHelper, @ptrCast(self)), u_r_l_);
            }
            pub inline fn addDesktopComponent(self: *const T, u_r_l_: ?BSTR, type_: ?BSTR, left_: ?*VARIANT, top_: ?*VARIANT, width_: ?*VARIANT, height_: ?*VARIANT) HRESULT {
                return @as(*const IShellUIHelper.VTable, @ptrCast(self.vtable)).AddDesktopComponent(@as(*const IShellUIHelper, @ptrCast(self)), u_r_l_, type_, left_, top_, width_, height_);
            }
            pub inline fn isSubscribed(self: *const T, u_r_l_: ?BSTR, p_bool_: ?*i16) HRESULT {
                return @as(*const IShellUIHelper.VTable, @ptrCast(self.vtable)).IsSubscribed(@as(*const IShellUIHelper, @ptrCast(self)), u_r_l_, p_bool_);
            }
            pub inline fn navigateAndFind(self: *const T, u_r_l_: ?BSTR, str_query_: ?BSTR, var_target_frame_: ?*VARIANT) HRESULT {
                return @as(*const IShellUIHelper.VTable, @ptrCast(self.vtable)).NavigateAndFind(@as(*const IShellUIHelper, @ptrCast(self)), u_r_l_, str_query_, var_target_frame_);
            }
            pub inline fn importExportFavorites(self: *const T, f_import_: i16, str_imp_exp_path_: ?BSTR) HRESULT {
                return @as(*const IShellUIHelper.VTable, @ptrCast(self.vtable)).ImportExportFavorites(@as(*const IShellUIHelper, @ptrCast(self)), f_import_, str_imp_exp_path_);
            }
            pub inline fn autoCompleteSaveForm(self: *const T, form_: ?*VARIANT) HRESULT {
                return @as(*const IShellUIHelper.VTable, @ptrCast(self.vtable)).AutoCompleteSaveForm(@as(*const IShellUIHelper, @ptrCast(self)), form_);
            }
            pub inline fn autoScan(self: *const T, str_search_: ?BSTR, str_failure_url_: ?BSTR, pvar_target_frame_: ?*VARIANT) HRESULT {
                return @as(*const IShellUIHelper.VTable, @ptrCast(self.vtable)).AutoScan(@as(*const IShellUIHelper, @ptrCast(self)), str_search_, str_failure_url_, pvar_target_frame_);
            }
            pub inline fn autoCompleteAttach(self: *const T, reserved_: ?*VARIANT) HRESULT {
                return @as(*const IShellUIHelper.VTable, @ptrCast(self.vtable)).AutoCompleteAttach(@as(*const IShellUIHelper, @ptrCast(self)), reserved_);
            }
            pub inline fn showBrowserUI(self: *const T, bstr_name_: ?BSTR, pvar_in_: ?*VARIANT, pvar_out_: ?*VARIANT) HRESULT {
                return @as(*const IShellUIHelper.VTable, @ptrCast(self.vtable)).ShowBrowserUI(@as(*const IShellUIHelper, @ptrCast(self)), bstr_name_, pvar_in_, pvar_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellUIHelper2_Value = Guid.initString("a7fe6eda-1932-4281-b881-87b31b8bc52c");
pub const IID_IShellUIHelper2 = &IID_IShellUIHelper2_Value;
pub const IShellUIHelper2 = extern struct {
    pub const VTable = extern struct {
        base: IShellUIHelper.VTable,
        AddSearchProvider: *const fn (
            self: *const IShellUIHelper2,
            u_r_l: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunOnceShown: *const fn (
            self: *const IShellUIHelper2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SkipRunOnce: *const fn (
            self: *const IShellUIHelper2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CustomizeSettings: *const fn (
            self: *const IShellUIHelper2,
            f_s_q_m: i16,
            f_phishing: i16,
            bstr_locale: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SqmEnabled: *const fn (
            self: *const IShellUIHelper2,
            pf_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PhishingEnabled: *const fn (
            self: *const IShellUIHelper2,
            pf_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BrandImageUri: *const fn (
            self: *const IShellUIHelper2,
            pbstr_uri: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SkipTabsWelcome: *const fn (
            self: *const IShellUIHelper2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DiagnoseConnection: *const fn (
            self: *const IShellUIHelper2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CustomizeClearType: *const fn (
            self: *const IShellUIHelper2,
            f_set: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSearchProviderInstalled: *const fn (
            self: *const IShellUIHelper2,
            u_r_l: ?BSTR,
            pdw_result: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSearchMigrated: *const fn (
            self: *const IShellUIHelper2,
            pf_migrated: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DefaultSearchProvider: *const fn (
            self: *const IShellUIHelper2,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunOnceRequiredSettingsComplete: *const fn (
            self: *const IShellUIHelper2,
            f_complete: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunOnceHasShown: *const fn (
            self: *const IShellUIHelper2,
            pf_shown: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SearchGuideUrl: *const fn (
            self: *const IShellUIHelper2,
            pbstr_url: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellUIHelper.MethodMixin(T);
            pub inline fn addSearchProvider(self: *const T, u_r_l_: ?BSTR) HRESULT {
                return @as(*const IShellUIHelper2.VTable, @ptrCast(self.vtable)).AddSearchProvider(@as(*const IShellUIHelper2, @ptrCast(self)), u_r_l_);
            }
            pub inline fn runOnceShown(self: *const T) HRESULT {
                return @as(*const IShellUIHelper2.VTable, @ptrCast(self.vtable)).RunOnceShown(@as(*const IShellUIHelper2, @ptrCast(self)));
            }
            pub inline fn skipRunOnce(self: *const T) HRESULT {
                return @as(*const IShellUIHelper2.VTable, @ptrCast(self.vtable)).SkipRunOnce(@as(*const IShellUIHelper2, @ptrCast(self)));
            }
            pub inline fn customizeSettings(self: *const T, f_s_q_m_: i16, f_phishing_: i16, bstr_locale_: ?BSTR) HRESULT {
                return @as(*const IShellUIHelper2.VTable, @ptrCast(self.vtable)).CustomizeSettings(@as(*const IShellUIHelper2, @ptrCast(self)), f_s_q_m_, f_phishing_, bstr_locale_);
            }
            pub inline fn sqmEnabled(self: *const T, pf_enabled_: ?*i16) HRESULT {
                return @as(*const IShellUIHelper2.VTable, @ptrCast(self.vtable)).SqmEnabled(@as(*const IShellUIHelper2, @ptrCast(self)), pf_enabled_);
            }
            pub inline fn phishingEnabled(self: *const T, pf_enabled_: ?*i16) HRESULT {
                return @as(*const IShellUIHelper2.VTable, @ptrCast(self.vtable)).PhishingEnabled(@as(*const IShellUIHelper2, @ptrCast(self)), pf_enabled_);
            }
            pub inline fn brandImageUri(self: *const T, pbstr_uri_: ?*?BSTR) HRESULT {
                return @as(*const IShellUIHelper2.VTable, @ptrCast(self.vtable)).BrandImageUri(@as(*const IShellUIHelper2, @ptrCast(self)), pbstr_uri_);
            }
            pub inline fn skipTabsWelcome(self: *const T) HRESULT {
                return @as(*const IShellUIHelper2.VTable, @ptrCast(self.vtable)).SkipTabsWelcome(@as(*const IShellUIHelper2, @ptrCast(self)));
            }
            pub inline fn diagnoseConnection(self: *const T) HRESULT {
                return @as(*const IShellUIHelper2.VTable, @ptrCast(self.vtable)).DiagnoseConnection(@as(*const IShellUIHelper2, @ptrCast(self)));
            }
            pub inline fn customizeClearType(self: *const T, f_set_: i16) HRESULT {
                return @as(*const IShellUIHelper2.VTable, @ptrCast(self.vtable)).CustomizeClearType(@as(*const IShellUIHelper2, @ptrCast(self)), f_set_);
            }
            pub inline fn isSearchProviderInstalled(self: *const T, u_r_l_: ?BSTR, pdw_result_: ?*u32) HRESULT {
                return @as(*const IShellUIHelper2.VTable, @ptrCast(self.vtable)).IsSearchProviderInstalled(@as(*const IShellUIHelper2, @ptrCast(self)), u_r_l_, pdw_result_);
            }
            pub inline fn isSearchMigrated(self: *const T, pf_migrated_: ?*i16) HRESULT {
                return @as(*const IShellUIHelper2.VTable, @ptrCast(self.vtable)).IsSearchMigrated(@as(*const IShellUIHelper2, @ptrCast(self)), pf_migrated_);
            }
            pub inline fn defaultSearchProvider(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IShellUIHelper2.VTable, @ptrCast(self.vtable)).DefaultSearchProvider(@as(*const IShellUIHelper2, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn runOnceRequiredSettingsComplete(self: *const T, f_complete_: i16) HRESULT {
                return @as(*const IShellUIHelper2.VTable, @ptrCast(self.vtable)).RunOnceRequiredSettingsComplete(@as(*const IShellUIHelper2, @ptrCast(self)), f_complete_);
            }
            pub inline fn runOnceHasShown(self: *const T, pf_shown_: ?*i16) HRESULT {
                return @as(*const IShellUIHelper2.VTable, @ptrCast(self.vtable)).RunOnceHasShown(@as(*const IShellUIHelper2, @ptrCast(self)), pf_shown_);
            }
            pub inline fn searchGuideUrl(self: *const T, pbstr_url_: ?*?BSTR) HRESULT {
                return @as(*const IShellUIHelper2.VTable, @ptrCast(self.vtable)).SearchGuideUrl(@as(*const IShellUIHelper2, @ptrCast(self)), pbstr_url_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellUIHelper3_Value = Guid.initString("528df2ec-d419-40bc-9b6d-dcdbf9c1b25d");
pub const IID_IShellUIHelper3 = &IID_IShellUIHelper3_Value;
pub const IShellUIHelper3 = extern struct {
    pub const VTable = extern struct {
        base: IShellUIHelper2.VTable,
        AddService: *const fn (
            self: *const IShellUIHelper3,
            u_r_l: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsServiceInstalled: *const fn (
            self: *const IShellUIHelper3,
            u_r_l: ?BSTR,
            verb: ?BSTR,
            pdw_result: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InPrivateFilteringEnabled: *const fn (
            self: *const IShellUIHelper3,
            pf_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddToFavoritesBar: *const fn (
            self: *const IShellUIHelper3,
            u_r_l: ?BSTR,
            title: ?BSTR,
            type: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BuildNewTabPage: *const fn (
            self: *const IShellUIHelper3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRecentlyClosedVisible: *const fn (
            self: *const IShellUIHelper3,
            f_visible: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActivitiesVisible: *const fn (
            self: *const IShellUIHelper3,
            f_visible: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ContentDiscoveryReset: *const fn (
            self: *const IShellUIHelper3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSuggestedSitesEnabled: *const fn (
            self: *const IShellUIHelper3,
            pf_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableSuggestedSites: *const fn (
            self: *const IShellUIHelper3,
            f_enable: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NavigateToSuggestedSites: *const fn (
            self: *const IShellUIHelper3,
            bstr_relative_url: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowTabsHelp: *const fn (
            self: *const IShellUIHelper3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowInPrivateHelp: *const fn (
            self: *const IShellUIHelper3,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellUIHelper2.MethodMixin(T);
            pub inline fn addService(self: *const T, u_r_l_: ?BSTR) HRESULT {
                return @as(*const IShellUIHelper3.VTable, @ptrCast(self.vtable)).AddService(@as(*const IShellUIHelper3, @ptrCast(self)), u_r_l_);
            }
            pub inline fn isServiceInstalled(self: *const T, u_r_l_: ?BSTR, verb_: ?BSTR, pdw_result_: ?*u32) HRESULT {
                return @as(*const IShellUIHelper3.VTable, @ptrCast(self.vtable)).IsServiceInstalled(@as(*const IShellUIHelper3, @ptrCast(self)), u_r_l_, verb_, pdw_result_);
            }
            pub inline fn inPrivateFilteringEnabled(self: *const T, pf_enabled_: ?*i16) HRESULT {
                return @as(*const IShellUIHelper3.VTable, @ptrCast(self.vtable)).InPrivateFilteringEnabled(@as(*const IShellUIHelper3, @ptrCast(self)), pf_enabled_);
            }
            pub inline fn addToFavoritesBar(self: *const T, u_r_l_: ?BSTR, title_: ?BSTR, type_: ?*VARIANT) HRESULT {
                return @as(*const IShellUIHelper3.VTable, @ptrCast(self.vtable)).AddToFavoritesBar(@as(*const IShellUIHelper3, @ptrCast(self)), u_r_l_, title_, type_);
            }
            pub inline fn buildNewTabPage(self: *const T) HRESULT {
                return @as(*const IShellUIHelper3.VTable, @ptrCast(self.vtable)).BuildNewTabPage(@as(*const IShellUIHelper3, @ptrCast(self)));
            }
            pub inline fn setRecentlyClosedVisible(self: *const T, f_visible_: i16) HRESULT {
                return @as(*const IShellUIHelper3.VTable, @ptrCast(self.vtable)).SetRecentlyClosedVisible(@as(*const IShellUIHelper3, @ptrCast(self)), f_visible_);
            }
            pub inline fn setActivitiesVisible(self: *const T, f_visible_: i16) HRESULT {
                return @as(*const IShellUIHelper3.VTable, @ptrCast(self.vtable)).SetActivitiesVisible(@as(*const IShellUIHelper3, @ptrCast(self)), f_visible_);
            }
            pub inline fn contentDiscoveryReset(self: *const T) HRESULT {
                return @as(*const IShellUIHelper3.VTable, @ptrCast(self.vtable)).ContentDiscoveryReset(@as(*const IShellUIHelper3, @ptrCast(self)));
            }
            pub inline fn isSuggestedSitesEnabled(self: *const T, pf_enabled_: ?*i16) HRESULT {
                return @as(*const IShellUIHelper3.VTable, @ptrCast(self.vtable)).IsSuggestedSitesEnabled(@as(*const IShellUIHelper3, @ptrCast(self)), pf_enabled_);
            }
            pub inline fn enableSuggestedSites(self: *const T, f_enable_: i16) HRESULT {
                return @as(*const IShellUIHelper3.VTable, @ptrCast(self.vtable)).EnableSuggestedSites(@as(*const IShellUIHelper3, @ptrCast(self)), f_enable_);
            }
            pub inline fn navigateToSuggestedSites(self: *const T, bstr_relative_url_: ?BSTR) HRESULT {
                return @as(*const IShellUIHelper3.VTable, @ptrCast(self.vtable)).NavigateToSuggestedSites(@as(*const IShellUIHelper3, @ptrCast(self)), bstr_relative_url_);
            }
            pub inline fn showTabsHelp(self: *const T) HRESULT {
                return @as(*const IShellUIHelper3.VTable, @ptrCast(self.vtable)).ShowTabsHelp(@as(*const IShellUIHelper3, @ptrCast(self)));
            }
            pub inline fn showInPrivateHelp(self: *const T) HRESULT {
                return @as(*const IShellUIHelper3.VTable, @ptrCast(self.vtable)).ShowInPrivateHelp(@as(*const IShellUIHelper3, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellUIHelper4_Value = Guid.initString("b36e6a53-8073-499e-824c-d776330a333e");
pub const IID_IShellUIHelper4 = &IID_IShellUIHelper4_Value;
pub const IShellUIHelper4 = extern struct {
    pub const VTable = extern struct {
        base: IShellUIHelper3.VTable,
        msIsSiteMode: *const fn (
            self: *const IShellUIHelper4,
            pf_site_mode: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeShowThumbBar: *const fn (
            self: *const IShellUIHelper4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeAddThumbBarButton: *const fn (
            self: *const IShellUIHelper4,
            bstr_icon_u_r_l: ?BSTR,
            bstr_tooltip: ?BSTR,
            pvar_button_i_d: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeUpdateThumbBarButton: *const fn (
            self: *const IShellUIHelper4,
            button_i_d: VARIANT,
            f_enabled: i16,
            f_visible: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeSetIconOverlay: *const fn (
            self: *const IShellUIHelper4,
            icon_url: ?BSTR,
            pvar_description: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeClearIconOverlay: *const fn (
            self: *const IShellUIHelper4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msAddSiteMode: *const fn (
            self: *const IShellUIHelper4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeCreateJumpList: *const fn (
            self: *const IShellUIHelper4,
            bstr_header: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeAddJumpListItem: *const fn (
            self: *const IShellUIHelper4,
            bstr_name: ?BSTR,
            bstr_action_uri: ?BSTR,
            bstr_icon_uri: ?BSTR,
            pvar_window_type: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeClearJumpList: *const fn (
            self: *const IShellUIHelper4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeShowJumpList: *const fn (
            self: *const IShellUIHelper4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeAddButtonStyle: *const fn (
            self: *const IShellUIHelper4,
            ui_button_i_d: VARIANT,
            bstr_icon_url: ?BSTR,
            bstr_tooltip: ?BSTR,
            pvar_style_i_d: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeShowButtonStyle: *const fn (
            self: *const IShellUIHelper4,
            ui_button_i_d: VARIANT,
            ui_style_i_d: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeActivate: *const fn (
            self: *const IShellUIHelper4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msIsSiteModeFirstRun: *const fn (
            self: *const IShellUIHelper4,
            f_preserve_state: i16,
            pui_first_run: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msAddTrackingProtectionList: *const fn (
            self: *const IShellUIHelper4,
            u_r_l: ?BSTR,
            bstr_filter_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msTrackingProtectionEnabled: *const fn (
            self: *const IShellUIHelper4,
            pf_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msActiveXFilteringEnabled: *const fn (
            self: *const IShellUIHelper4,
            pf_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellUIHelper3.MethodMixin(T);
            pub inline fn msIsSiteMode(self: *const T, pf_site_mode_: ?*i16) HRESULT {
                return @as(*const IShellUIHelper4.VTable, @ptrCast(self.vtable)).msIsSiteMode(@as(*const IShellUIHelper4, @ptrCast(self)), pf_site_mode_);
            }
            pub inline fn msSiteModeShowThumbBar(self: *const T) HRESULT {
                return @as(*const IShellUIHelper4.VTable, @ptrCast(self.vtable)).msSiteModeShowThumbBar(@as(*const IShellUIHelper4, @ptrCast(self)));
            }
            pub inline fn msSiteModeAddThumbBarButton(self: *const T, bstr_icon_u_r_l_: ?BSTR, bstr_tooltip_: ?BSTR, pvar_button_i_d_: ?*VARIANT) HRESULT {
                return @as(*const IShellUIHelper4.VTable, @ptrCast(self.vtable)).msSiteModeAddThumbBarButton(@as(*const IShellUIHelper4, @ptrCast(self)), bstr_icon_u_r_l_, bstr_tooltip_, pvar_button_i_d_);
            }
            pub inline fn msSiteModeUpdateThumbBarButton(self: *const T, button_i_d_: VARIANT, f_enabled_: i16, f_visible_: i16) HRESULT {
                return @as(*const IShellUIHelper4.VTable, @ptrCast(self.vtable)).msSiteModeUpdateThumbBarButton(@as(*const IShellUIHelper4, @ptrCast(self)), button_i_d_, f_enabled_, f_visible_);
            }
            pub inline fn msSiteModeSetIconOverlay(self: *const T, icon_url_: ?BSTR, pvar_description_: ?*VARIANT) HRESULT {
                return @as(*const IShellUIHelper4.VTable, @ptrCast(self.vtable)).msSiteModeSetIconOverlay(@as(*const IShellUIHelper4, @ptrCast(self)), icon_url_, pvar_description_);
            }
            pub inline fn msSiteModeClearIconOverlay(self: *const T) HRESULT {
                return @as(*const IShellUIHelper4.VTable, @ptrCast(self.vtable)).msSiteModeClearIconOverlay(@as(*const IShellUIHelper4, @ptrCast(self)));
            }
            pub inline fn msAddSiteMode(self: *const T) HRESULT {
                return @as(*const IShellUIHelper4.VTable, @ptrCast(self.vtable)).msAddSiteMode(@as(*const IShellUIHelper4, @ptrCast(self)));
            }
            pub inline fn msSiteModeCreateJumpList(self: *const T, bstr_header_: ?BSTR) HRESULT {
                return @as(*const IShellUIHelper4.VTable, @ptrCast(self.vtable)).msSiteModeCreateJumpList(@as(*const IShellUIHelper4, @ptrCast(self)), bstr_header_);
            }
            pub inline fn msSiteModeAddJumpListItem(self: *const T, bstr_name_: ?BSTR, bstr_action_uri_: ?BSTR, bstr_icon_uri_: ?BSTR, pvar_window_type_: ?*VARIANT) HRESULT {
                return @as(*const IShellUIHelper4.VTable, @ptrCast(self.vtable)).msSiteModeAddJumpListItem(@as(*const IShellUIHelper4, @ptrCast(self)), bstr_name_, bstr_action_uri_, bstr_icon_uri_, pvar_window_type_);
            }
            pub inline fn msSiteModeClearJumpList(self: *const T) HRESULT {
                return @as(*const IShellUIHelper4.VTable, @ptrCast(self.vtable)).msSiteModeClearJumpList(@as(*const IShellUIHelper4, @ptrCast(self)));
            }
            pub inline fn msSiteModeShowJumpList(self: *const T) HRESULT {
                return @as(*const IShellUIHelper4.VTable, @ptrCast(self.vtable)).msSiteModeShowJumpList(@as(*const IShellUIHelper4, @ptrCast(self)));
            }
            pub inline fn msSiteModeAddButtonStyle(self: *const T, ui_button_i_d_: VARIANT, bstr_icon_url_: ?BSTR, bstr_tooltip_: ?BSTR, pvar_style_i_d_: ?*VARIANT) HRESULT {
                return @as(*const IShellUIHelper4.VTable, @ptrCast(self.vtable)).msSiteModeAddButtonStyle(@as(*const IShellUIHelper4, @ptrCast(self)), ui_button_i_d_, bstr_icon_url_, bstr_tooltip_, pvar_style_i_d_);
            }
            pub inline fn msSiteModeShowButtonStyle(self: *const T, ui_button_i_d_: VARIANT, ui_style_i_d_: VARIANT) HRESULT {
                return @as(*const IShellUIHelper4.VTable, @ptrCast(self.vtable)).msSiteModeShowButtonStyle(@as(*const IShellUIHelper4, @ptrCast(self)), ui_button_i_d_, ui_style_i_d_);
            }
            pub inline fn msSiteModeActivate(self: *const T) HRESULT {
                return @as(*const IShellUIHelper4.VTable, @ptrCast(self.vtable)).msSiteModeActivate(@as(*const IShellUIHelper4, @ptrCast(self)));
            }
            pub inline fn msIsSiteModeFirstRun(self: *const T, f_preserve_state_: i16, pui_first_run_: ?*VARIANT) HRESULT {
                return @as(*const IShellUIHelper4.VTable, @ptrCast(self.vtable)).msIsSiteModeFirstRun(@as(*const IShellUIHelper4, @ptrCast(self)), f_preserve_state_, pui_first_run_);
            }
            pub inline fn msAddTrackingProtectionList(self: *const T, u_r_l_: ?BSTR, bstr_filter_name_: ?BSTR) HRESULT {
                return @as(*const IShellUIHelper4.VTable, @ptrCast(self.vtable)).msAddTrackingProtectionList(@as(*const IShellUIHelper4, @ptrCast(self)), u_r_l_, bstr_filter_name_);
            }
            pub inline fn msTrackingProtectionEnabled(self: *const T, pf_enabled_: ?*i16) HRESULT {
                return @as(*const IShellUIHelper4.VTable, @ptrCast(self.vtable)).msTrackingProtectionEnabled(@as(*const IShellUIHelper4, @ptrCast(self)), pf_enabled_);
            }
            pub inline fn msActiveXFilteringEnabled(self: *const T, pf_enabled_: ?*i16) HRESULT {
                return @as(*const IShellUIHelper4.VTable, @ptrCast(self.vtable)).msActiveXFilteringEnabled(@as(*const IShellUIHelper4, @ptrCast(self)), pf_enabled_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellUIHelper5_Value = Guid.initString("a2a08b09-103d-4d3f-b91c-ea455ca82efa");
pub const IID_IShellUIHelper5 = &IID_IShellUIHelper5_Value;
pub const IShellUIHelper5 = extern struct {
    pub const VTable = extern struct {
        base: IShellUIHelper4.VTable,
        msProvisionNetworks: *const fn (
            self: *const IShellUIHelper5,
            bstr_provisioning_xml: ?BSTR,
            pui_result: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msReportSafeUrl: *const fn (
            self: *const IShellUIHelper5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeRefreshBadge: *const fn (
            self: *const IShellUIHelper5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msSiteModeClearBadge: *const fn (
            self: *const IShellUIHelper5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msDiagnoseConnectionUILess: *const fn (
            self: *const IShellUIHelper5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msLaunchNetworkClientHelp: *const fn (
            self: *const IShellUIHelper5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msChangeDefaultBrowser: *const fn (
            self: *const IShellUIHelper5,
            f_change: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellUIHelper4.MethodMixin(T);
            pub inline fn msProvisionNetworks(self: *const T, bstr_provisioning_xml_: ?BSTR, pui_result_: ?*VARIANT) HRESULT {
                return @as(*const IShellUIHelper5.VTable, @ptrCast(self.vtable)).msProvisionNetworks(@as(*const IShellUIHelper5, @ptrCast(self)), bstr_provisioning_xml_, pui_result_);
            }
            pub inline fn msReportSafeUrl(self: *const T) HRESULT {
                return @as(*const IShellUIHelper5.VTable, @ptrCast(self.vtable)).msReportSafeUrl(@as(*const IShellUIHelper5, @ptrCast(self)));
            }
            pub inline fn msSiteModeRefreshBadge(self: *const T) HRESULT {
                return @as(*const IShellUIHelper5.VTable, @ptrCast(self.vtable)).msSiteModeRefreshBadge(@as(*const IShellUIHelper5, @ptrCast(self)));
            }
            pub inline fn msSiteModeClearBadge(self: *const T) HRESULT {
                return @as(*const IShellUIHelper5.VTable, @ptrCast(self.vtable)).msSiteModeClearBadge(@as(*const IShellUIHelper5, @ptrCast(self)));
            }
            pub inline fn msDiagnoseConnectionUILess(self: *const T) HRESULT {
                return @as(*const IShellUIHelper5.VTable, @ptrCast(self.vtable)).msDiagnoseConnectionUILess(@as(*const IShellUIHelper5, @ptrCast(self)));
            }
            pub inline fn msLaunchNetworkClientHelp(self: *const T) HRESULT {
                return @as(*const IShellUIHelper5.VTable, @ptrCast(self.vtable)).msLaunchNetworkClientHelp(@as(*const IShellUIHelper5, @ptrCast(self)));
            }
            pub inline fn msChangeDefaultBrowser(self: *const T, f_change_: i16) HRESULT {
                return @as(*const IShellUIHelper5.VTable, @ptrCast(self.vtable)).msChangeDefaultBrowser(@as(*const IShellUIHelper5, @ptrCast(self)), f_change_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellUIHelper6_Value = Guid.initString("987a573e-46ee-4e89-96ab-ddf7f8fdc98c");
pub const IID_IShellUIHelper6 = &IID_IShellUIHelper6_Value;
pub const IShellUIHelper6 = extern struct {
    pub const VTable = extern struct {
        base: IShellUIHelper5.VTable,
        msStopPeriodicTileUpdate: *const fn (
            self: *const IShellUIHelper6,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msStartPeriodicTileUpdate: *const fn (
            self: *const IShellUIHelper6,
            polling_uris: VARIANT,
            start_time: VARIANT,
            ui_update_recurrence: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msStartPeriodicTileUpdateBatch: *const fn (
            self: *const IShellUIHelper6,
            polling_uris: VARIANT,
            start_time: VARIANT,
            ui_update_recurrence: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msClearTile: *const fn (
            self: *const IShellUIHelper6,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msEnableTileNotificationQueue: *const fn (
            self: *const IShellUIHelper6,
            f_change: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msPinnedSiteState: *const fn (
            self: *const IShellUIHelper6,
            pvar_site_state: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msEnableTileNotificationQueueForSquare150x150: *const fn (
            self: *const IShellUIHelper6,
            f_change: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msEnableTileNotificationQueueForWide310x150: *const fn (
            self: *const IShellUIHelper6,
            f_change: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msEnableTileNotificationQueueForSquare310x310: *const fn (
            self: *const IShellUIHelper6,
            f_change: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msScheduledTileNotification: *const fn (
            self: *const IShellUIHelper6,
            bstr_notification_xml: ?BSTR,
            bstr_notification_id: ?BSTR,
            bstr_notification_tag: ?BSTR,
            start_time: VARIANT,
            expiration_time: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msRemoveScheduledTileNotification: *const fn (
            self: *const IShellUIHelper6,
            bstr_notification_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msStartPeriodicBadgeUpdate: *const fn (
            self: *const IShellUIHelper6,
            polling_uri: ?BSTR,
            start_time: VARIANT,
            ui_update_recurrence: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msStopPeriodicBadgeUpdate: *const fn (
            self: *const IShellUIHelper6,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        msLaunchInternetOptions: *const fn (
            self: *const IShellUIHelper6,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellUIHelper5.MethodMixin(T);
            pub inline fn msStopPeriodicTileUpdate(self: *const T) HRESULT {
                return @as(*const IShellUIHelper6.VTable, @ptrCast(self.vtable)).msStopPeriodicTileUpdate(@as(*const IShellUIHelper6, @ptrCast(self)));
            }
            pub inline fn msStartPeriodicTileUpdate(self: *const T, polling_uris_: VARIANT, start_time_: VARIANT, ui_update_recurrence_: VARIANT) HRESULT {
                return @as(*const IShellUIHelper6.VTable, @ptrCast(self.vtable)).msStartPeriodicTileUpdate(@as(*const IShellUIHelper6, @ptrCast(self)), polling_uris_, start_time_, ui_update_recurrence_);
            }
            pub inline fn msStartPeriodicTileUpdateBatch(self: *const T, polling_uris_: VARIANT, start_time_: VARIANT, ui_update_recurrence_: VARIANT) HRESULT {
                return @as(*const IShellUIHelper6.VTable, @ptrCast(self.vtable)).msStartPeriodicTileUpdateBatch(@as(*const IShellUIHelper6, @ptrCast(self)), polling_uris_, start_time_, ui_update_recurrence_);
            }
            pub inline fn msClearTile(self: *const T) HRESULT {
                return @as(*const IShellUIHelper6.VTable, @ptrCast(self.vtable)).msClearTile(@as(*const IShellUIHelper6, @ptrCast(self)));
            }
            pub inline fn msEnableTileNotificationQueue(self: *const T, f_change_: i16) HRESULT {
                return @as(*const IShellUIHelper6.VTable, @ptrCast(self.vtable)).msEnableTileNotificationQueue(@as(*const IShellUIHelper6, @ptrCast(self)), f_change_);
            }
            pub inline fn msPinnedSiteState(self: *const T, pvar_site_state_: ?*VARIANT) HRESULT {
                return @as(*const IShellUIHelper6.VTable, @ptrCast(self.vtable)).msPinnedSiteState(@as(*const IShellUIHelper6, @ptrCast(self)), pvar_site_state_);
            }
            pub inline fn msEnableTileNotificationQueueForSquare150x150(self: *const T, f_change_: i16) HRESULT {
                return @as(*const IShellUIHelper6.VTable, @ptrCast(self.vtable)).msEnableTileNotificationQueueForSquare150x150(@as(*const IShellUIHelper6, @ptrCast(self)), f_change_);
            }
            pub inline fn msEnableTileNotificationQueueForWide310x150(self: *const T, f_change_: i16) HRESULT {
                return @as(*const IShellUIHelper6.VTable, @ptrCast(self.vtable)).msEnableTileNotificationQueueForWide310x150(@as(*const IShellUIHelper6, @ptrCast(self)), f_change_);
            }
            pub inline fn msEnableTileNotificationQueueForSquare310x310(self: *const T, f_change_: i16) HRESULT {
                return @as(*const IShellUIHelper6.VTable, @ptrCast(self.vtable)).msEnableTileNotificationQueueForSquare310x310(@as(*const IShellUIHelper6, @ptrCast(self)), f_change_);
            }
            pub inline fn msScheduledTileNotification(self: *const T, bstr_notification_xml_: ?BSTR, bstr_notification_id_: ?BSTR, bstr_notification_tag_: ?BSTR, start_time_: VARIANT, expiration_time_: VARIANT) HRESULT {
                return @as(*const IShellUIHelper6.VTable, @ptrCast(self.vtable)).msScheduledTileNotification(@as(*const IShellUIHelper6, @ptrCast(self)), bstr_notification_xml_, bstr_notification_id_, bstr_notification_tag_, start_time_, expiration_time_);
            }
            pub inline fn msRemoveScheduledTileNotification(self: *const T, bstr_notification_id_: ?BSTR) HRESULT {
                return @as(*const IShellUIHelper6.VTable, @ptrCast(self.vtable)).msRemoveScheduledTileNotification(@as(*const IShellUIHelper6, @ptrCast(self)), bstr_notification_id_);
            }
            pub inline fn msStartPeriodicBadgeUpdate(self: *const T, polling_uri_: ?BSTR, start_time_: VARIANT, ui_update_recurrence_: VARIANT) HRESULT {
                return @as(*const IShellUIHelper6.VTable, @ptrCast(self.vtable)).msStartPeriodicBadgeUpdate(@as(*const IShellUIHelper6, @ptrCast(self)), polling_uri_, start_time_, ui_update_recurrence_);
            }
            pub inline fn msStopPeriodicBadgeUpdate(self: *const T) HRESULT {
                return @as(*const IShellUIHelper6.VTable, @ptrCast(self.vtable)).msStopPeriodicBadgeUpdate(@as(*const IShellUIHelper6, @ptrCast(self)));
            }
            pub inline fn msLaunchInternetOptions(self: *const T) HRESULT {
                return @as(*const IShellUIHelper6.VTable, @ptrCast(self.vtable)).msLaunchInternetOptions(@as(*const IShellUIHelper6, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellUIHelper7_Value = Guid.initString("60e567c8-9573-4ab2-a264-637c6c161cb1");
pub const IID_IShellUIHelper7 = &IID_IShellUIHelper7_Value;
pub const IShellUIHelper7 = extern struct {
    pub const VTable = extern struct {
        base: IShellUIHelper6.VTable,
        SetExperimentalFlag: *const fn (
            self: *const IShellUIHelper7,
            bstr_flag_string: ?BSTR,
            vf_flag: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExperimentalFlag: *const fn (
            self: *const IShellUIHelper7,
            bstr_flag_string: ?BSTR,
            vf_flag: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetExperimentalValue: *const fn (
            self: *const IShellUIHelper7,
            bstr_value_string: ?BSTR,
            dw_value: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExperimentalValue: *const fn (
            self: *const IShellUIHelper7,
            bstr_value_string: ?BSTR,
            pdw_value: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetAllExperimentalFlagsAndValues: *const fn (
            self: *const IShellUIHelper7,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNeedIEAutoLaunchFlag: *const fn (
            self: *const IShellUIHelper7,
            bstr_url: ?BSTR,
            flag: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNeedIEAutoLaunchFlag: *const fn (
            self: *const IShellUIHelper7,
            bstr_url: ?BSTR,
            flag: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasNeedIEAutoLaunchFlag: *const fn (
            self: *const IShellUIHelper7,
            bstr_url: ?BSTR,
            exists: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LaunchIE: *const fn (
            self: *const IShellUIHelper7,
            bstr_url: ?BSTR,
            automated: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellUIHelper6.MethodMixin(T);
            pub inline fn setExperimentalFlag(self: *const T, bstr_flag_string_: ?BSTR, vf_flag_: i16) HRESULT {
                return @as(*const IShellUIHelper7.VTable, @ptrCast(self.vtable)).SetExperimentalFlag(@as(*const IShellUIHelper7, @ptrCast(self)), bstr_flag_string_, vf_flag_);
            }
            pub inline fn getExperimentalFlag(self: *const T, bstr_flag_string_: ?BSTR, vf_flag_: ?*i16) HRESULT {
                return @as(*const IShellUIHelper7.VTable, @ptrCast(self.vtable)).GetExperimentalFlag(@as(*const IShellUIHelper7, @ptrCast(self)), bstr_flag_string_, vf_flag_);
            }
            pub inline fn setExperimentalValue(self: *const T, bstr_value_string_: ?BSTR, dw_value_: u32) HRESULT {
                return @as(*const IShellUIHelper7.VTable, @ptrCast(self.vtable)).SetExperimentalValue(@as(*const IShellUIHelper7, @ptrCast(self)), bstr_value_string_, dw_value_);
            }
            pub inline fn getExperimentalValue(self: *const T, bstr_value_string_: ?BSTR, pdw_value_: ?*u32) HRESULT {
                return @as(*const IShellUIHelper7.VTable, @ptrCast(self.vtable)).GetExperimentalValue(@as(*const IShellUIHelper7, @ptrCast(self)), bstr_value_string_, pdw_value_);
            }
            pub inline fn resetAllExperimentalFlagsAndValues(self: *const T) HRESULT {
                return @as(*const IShellUIHelper7.VTable, @ptrCast(self.vtable)).ResetAllExperimentalFlagsAndValues(@as(*const IShellUIHelper7, @ptrCast(self)));
            }
            pub inline fn getNeedIEAutoLaunchFlag(self: *const T, bstr_url_: ?BSTR, flag_: ?*i16) HRESULT {
                return @as(*const IShellUIHelper7.VTable, @ptrCast(self.vtable)).GetNeedIEAutoLaunchFlag(@as(*const IShellUIHelper7, @ptrCast(self)), bstr_url_, flag_);
            }
            pub inline fn setNeedIEAutoLaunchFlag(self: *const T, bstr_url_: ?BSTR, flag_: i16) HRESULT {
                return @as(*const IShellUIHelper7.VTable, @ptrCast(self.vtable)).SetNeedIEAutoLaunchFlag(@as(*const IShellUIHelper7, @ptrCast(self)), bstr_url_, flag_);
            }
            pub inline fn hasNeedIEAutoLaunchFlag(self: *const T, bstr_url_: ?BSTR, exists_: ?*i16) HRESULT {
                return @as(*const IShellUIHelper7.VTable, @ptrCast(self.vtable)).HasNeedIEAutoLaunchFlag(@as(*const IShellUIHelper7, @ptrCast(self)), bstr_url_, exists_);
            }
            pub inline fn launchIE(self: *const T, bstr_url_: ?BSTR, automated_: i16) HRESULT {
                return @as(*const IShellUIHelper7.VTable, @ptrCast(self.vtable)).LaunchIE(@as(*const IShellUIHelper7, @ptrCast(self)), bstr_url_, automated_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellUIHelper8_Value = Guid.initString("66debcf2-05b0-4f07-b49b-b96241a65db2");
pub const IID_IShellUIHelper8 = &IID_IShellUIHelper8_Value;
pub const IShellUIHelper8 = extern struct {
    pub const VTable = extern struct {
        base: IShellUIHelper7.VTable,
        GetCVListData: *const fn (
            self: *const IShellUIHelper8,
            pbstr_result: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCVListLocalData: *const fn (
            self: *const IShellUIHelper8,
            pbstr_result: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEMIEListData: *const fn (
            self: *const IShellUIHelper8,
            pbstr_result: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEMIEListLocalData: *const fn (
            self: *const IShellUIHelper8,
            pbstr_result: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenFavoritesPane: *const fn (
            self: *const IShellUIHelper8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenFavoritesSettings: *const fn (
            self: *const IShellUIHelper8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LaunchInHVSI: *const fn (
            self: *const IShellUIHelper8,
            bstr_url: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellUIHelper7.MethodMixin(T);
            pub inline fn getCVListData(self: *const T, pbstr_result_: ?*?BSTR) HRESULT {
                return @as(*const IShellUIHelper8.VTable, @ptrCast(self.vtable)).GetCVListData(@as(*const IShellUIHelper8, @ptrCast(self)), pbstr_result_);
            }
            pub inline fn getCVListLocalData(self: *const T, pbstr_result_: ?*?BSTR) HRESULT {
                return @as(*const IShellUIHelper8.VTable, @ptrCast(self.vtable)).GetCVListLocalData(@as(*const IShellUIHelper8, @ptrCast(self)), pbstr_result_);
            }
            pub inline fn getEMIEListData(self: *const T, pbstr_result_: ?*?BSTR) HRESULT {
                return @as(*const IShellUIHelper8.VTable, @ptrCast(self.vtable)).GetEMIEListData(@as(*const IShellUIHelper8, @ptrCast(self)), pbstr_result_);
            }
            pub inline fn getEMIEListLocalData(self: *const T, pbstr_result_: ?*?BSTR) HRESULT {
                return @as(*const IShellUIHelper8.VTable, @ptrCast(self.vtable)).GetEMIEListLocalData(@as(*const IShellUIHelper8, @ptrCast(self)), pbstr_result_);
            }
            pub inline fn openFavoritesPane(self: *const T) HRESULT {
                return @as(*const IShellUIHelper8.VTable, @ptrCast(self.vtable)).OpenFavoritesPane(@as(*const IShellUIHelper8, @ptrCast(self)));
            }
            pub inline fn openFavoritesSettings(self: *const T) HRESULT {
                return @as(*const IShellUIHelper8.VTable, @ptrCast(self.vtable)).OpenFavoritesSettings(@as(*const IShellUIHelper8, @ptrCast(self)));
            }
            pub inline fn launchInHVSI(self: *const T, bstr_url_: ?BSTR) HRESULT {
                return @as(*const IShellUIHelper8.VTable, @ptrCast(self.vtable)).LaunchInHVSI(@as(*const IShellUIHelper8, @ptrCast(self)), bstr_url_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellUIHelper9_Value = Guid.initString("6cdf73b0-7f2f-451f-bc0f-63e0f3284e54");
pub const IID_IShellUIHelper9 = &IID_IShellUIHelper9_Value;
pub const IShellUIHelper9 = extern struct {
    pub const VTable = extern struct {
        base: IShellUIHelper8.VTable,
        GetOSSku: *const fn (
            self: *const IShellUIHelper9,
            pdw_result: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellUIHelper8.MethodMixin(T);
            pub inline fn getOSSku(self: *const T, pdw_result_: ?*u32) HRESULT {
                return @as(*const IShellUIHelper9.VTable, @ptrCast(self.vtable)).GetOSSku(@as(*const IShellUIHelper9, @ptrCast(self)), pdw_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_DShellNameSpaceEvents_Value = Guid.initString("55136806-b2de-11d1-b9f2-00a0c98bc547");
pub const IID_DShellNameSpaceEvents = &IID_DShellNameSpaceEvents_Value;
pub const DShellNameSpaceEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellFavoritesNameSpace_Value = Guid.initString("55136804-b2de-11d1-b9f2-00a0c98bc547");
pub const IID_IShellFavoritesNameSpace = &IID_IShellFavoritesNameSpace_Value;
pub const IShellFavoritesNameSpace = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        MoveSelectionUp: *const fn (
            self: *const IShellFavoritesNameSpace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveSelectionDown: *const fn (
            self: *const IShellFavoritesNameSpace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetSort: *const fn (
            self: *const IShellFavoritesNameSpace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NewFolder: *const fn (
            self: *const IShellFavoritesNameSpace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Synchronize: *const fn (
            self: *const IShellFavoritesNameSpace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Import: *const fn (
            self: *const IShellFavoritesNameSpace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Export: *const fn (
            self: *const IShellFavoritesNameSpace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeContextMenuCommand: *const fn (
            self: *const IShellFavoritesNameSpace,
            str_command: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveSelectionTo: *const fn (
            self: *const IShellFavoritesNameSpace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubscriptionsEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellFavoritesNameSpace,
            p_bool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSubscriptionForSelection: *const fn (
            self: *const IShellFavoritesNameSpace,
            p_bool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteSubscriptionForSelection: *const fn (
            self: *const IShellFavoritesNameSpace,
            p_bool: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRoot: *const fn (
            self: *const IShellFavoritesNameSpace,
            bstr_full_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn moveSelectionUp(self: *const T) HRESULT {
                return @as(*const IShellFavoritesNameSpace.VTable, @ptrCast(self.vtable)).MoveSelectionUp(@as(*const IShellFavoritesNameSpace, @ptrCast(self)));
            }
            pub inline fn moveSelectionDown(self: *const T) HRESULT {
                return @as(*const IShellFavoritesNameSpace.VTable, @ptrCast(self.vtable)).MoveSelectionDown(@as(*const IShellFavoritesNameSpace, @ptrCast(self)));
            }
            pub inline fn resetSort(self: *const T) HRESULT {
                return @as(*const IShellFavoritesNameSpace.VTable, @ptrCast(self.vtable)).ResetSort(@as(*const IShellFavoritesNameSpace, @ptrCast(self)));
            }
            pub inline fn newFolder(self: *const T) HRESULT {
                return @as(*const IShellFavoritesNameSpace.VTable, @ptrCast(self.vtable)).NewFolder(@as(*const IShellFavoritesNameSpace, @ptrCast(self)));
            }
            pub inline fn synchronize(self: *const T) HRESULT {
                return @as(*const IShellFavoritesNameSpace.VTable, @ptrCast(self.vtable)).Synchronize(@as(*const IShellFavoritesNameSpace, @ptrCast(self)));
            }
            pub inline fn import(self: *const T) HRESULT {
                return @as(*const IShellFavoritesNameSpace.VTable, @ptrCast(self.vtable)).Import(@as(*const IShellFavoritesNameSpace, @ptrCast(self)));
            }
            pub inline fn @"export"(self: *const T) HRESULT {
                return @as(*const IShellFavoritesNameSpace.VTable, @ptrCast(self.vtable)).Export(@as(*const IShellFavoritesNameSpace, @ptrCast(self)));
            }
            pub inline fn invokeContextMenuCommand(self: *const T, str_command_: ?BSTR) HRESULT {
                return @as(*const IShellFavoritesNameSpace.VTable, @ptrCast(self.vtable)).InvokeContextMenuCommand(@as(*const IShellFavoritesNameSpace, @ptrCast(self)), str_command_);
            }
            pub inline fn moveSelectionTo(self: *const T) HRESULT {
                return @as(*const IShellFavoritesNameSpace.VTable, @ptrCast(self.vtable)).MoveSelectionTo(@as(*const IShellFavoritesNameSpace, @ptrCast(self)));
            }
            pub inline fn getSubscriptionsEnabled(self: *const T, p_bool_: ?*i16) HRESULT {
                return @as(*const IShellFavoritesNameSpace.VTable, @ptrCast(self.vtable)).get_SubscriptionsEnabled(@as(*const IShellFavoritesNameSpace, @ptrCast(self)), p_bool_);
            }
            pub inline fn createSubscriptionForSelection(self: *const T, p_bool_: ?*i16) HRESULT {
                return @as(*const IShellFavoritesNameSpace.VTable, @ptrCast(self.vtable)).CreateSubscriptionForSelection(@as(*const IShellFavoritesNameSpace, @ptrCast(self)), p_bool_);
            }
            pub inline fn deleteSubscriptionForSelection(self: *const T, p_bool_: ?*i16) HRESULT {
                return @as(*const IShellFavoritesNameSpace.VTable, @ptrCast(self.vtable)).DeleteSubscriptionForSelection(@as(*const IShellFavoritesNameSpace, @ptrCast(self)), p_bool_);
            }
            pub inline fn setRoot(self: *const T, bstr_full_path_: ?BSTR) HRESULT {
                return @as(*const IShellFavoritesNameSpace.VTable, @ptrCast(self.vtable)).SetRoot(@as(*const IShellFavoritesNameSpace, @ptrCast(self)), bstr_full_path_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellNameSpace_Value = Guid.initString("e572d3c9-37be-4ae2-825d-d521763e3108");
pub const IID_IShellNameSpace = &IID_IShellNameSpace_Value;
pub const IShellNameSpace = extern struct {
    pub const VTable = extern struct {
        base: IShellFavoritesNameSpace.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnumOptions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellNameSpace,
            pgrf_enum_flags: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnumOptions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellNameSpace,
            l_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelectedItem: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellNameSpace,
            p_item: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SelectedItem: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellNameSpace,
            p_item: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Root: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellNameSpace,
            pvar: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Root: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellNameSpace,
            @"var": VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Depth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellNameSpace,
            pi_depth: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Depth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellNameSpace,
            i_depth: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Mode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellNameSpace,
            pu_mode: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Mode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellNameSpace,
            u_mode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Flags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellNameSpace,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Flags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellNameSpace,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TVFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellNameSpace,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TVFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellNameSpace,
            dw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Columns: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellNameSpace,
            bstr_columns: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Columns: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellNameSpace,
            bstr_columns: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CountViewTypes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellNameSpace,
            pi_types: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewType: *const fn (
            self: *const IShellNameSpace,
            i_type: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectedItems: *const fn (
            self: *const IShellNameSpace,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Expand: *const fn (
            self: *const IShellNameSpace,
            @"var": VARIANT,
            i_depth: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnselectAll: *const fn (
            self: *const IShellNameSpace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellFavoritesNameSpace.MethodMixin(T);
            pub inline fn getEnumOptions(self: *const T, pgrf_enum_flags_: ?*i32) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).get_EnumOptions(@as(*const IShellNameSpace, @ptrCast(self)), pgrf_enum_flags_);
            }
            pub inline fn putEnumOptions(self: *const T, l_val_: i32) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).put_EnumOptions(@as(*const IShellNameSpace, @ptrCast(self)), l_val_);
            }
            pub inline fn getSelectedItem(self: *const T, p_item_: ?*?*IDispatch) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).get_SelectedItem(@as(*const IShellNameSpace, @ptrCast(self)), p_item_);
            }
            pub inline fn putSelectedItem(self: *const T, p_item_: ?*IDispatch) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).put_SelectedItem(@as(*const IShellNameSpace, @ptrCast(self)), p_item_);
            }
            pub inline fn getRoot(self: *const T, pvar_: ?*VARIANT) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).get_Root(@as(*const IShellNameSpace, @ptrCast(self)), pvar_);
            }
            pub inline fn putRoot(self: *const T, var_: VARIANT) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).put_Root(@as(*const IShellNameSpace, @ptrCast(self)), var_);
            }
            pub inline fn getDepth(self: *const T, pi_depth_: ?*i32) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).get_Depth(@as(*const IShellNameSpace, @ptrCast(self)), pi_depth_);
            }
            pub inline fn putDepth(self: *const T, i_depth_: i32) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).put_Depth(@as(*const IShellNameSpace, @ptrCast(self)), i_depth_);
            }
            pub inline fn getMode(self: *const T, pu_mode_: ?*u32) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).get_Mode(@as(*const IShellNameSpace, @ptrCast(self)), pu_mode_);
            }
            pub inline fn putMode(self: *const T, u_mode_: u32) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).put_Mode(@as(*const IShellNameSpace, @ptrCast(self)), u_mode_);
            }
            pub inline fn getFlags(self: *const T, pdw_flags_: ?*u32) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).get_Flags(@as(*const IShellNameSpace, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn putFlags(self: *const T, dw_flags_: u32) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).put_Flags(@as(*const IShellNameSpace, @ptrCast(self)), dw_flags_);
            }
            pub inline fn putTVFlags(self: *const T, dw_flags_: u32) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).put_TVFlags(@as(*const IShellNameSpace, @ptrCast(self)), dw_flags_);
            }
            pub inline fn getTVFlags(self: *const T, dw_flags_: ?*u32) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).get_TVFlags(@as(*const IShellNameSpace, @ptrCast(self)), dw_flags_);
            }
            pub inline fn getColumns(self: *const T, bstr_columns_: ?*?BSTR) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).get_Columns(@as(*const IShellNameSpace, @ptrCast(self)), bstr_columns_);
            }
            pub inline fn putColumns(self: *const T, bstr_columns_: ?BSTR) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).put_Columns(@as(*const IShellNameSpace, @ptrCast(self)), bstr_columns_);
            }
            pub inline fn getCountViewTypes(self: *const T, pi_types_: ?*i32) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).get_CountViewTypes(@as(*const IShellNameSpace, @ptrCast(self)), pi_types_);
            }
            pub inline fn setViewType(self: *const T, i_type_: i32) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).SetViewType(@as(*const IShellNameSpace, @ptrCast(self)), i_type_);
            }
            pub inline fn selectedItems(self: *const T, ppid_: ?*?*IDispatch) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).SelectedItems(@as(*const IShellNameSpace, @ptrCast(self)), ppid_);
            }
            pub inline fn expand(self: *const T, var_: VARIANT, i_depth_: i32) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).Expand(@as(*const IShellNameSpace, @ptrCast(self)), var_, i_depth_);
            }
            pub inline fn unselectAll(self: *const T) HRESULT {
                return @as(*const IShellNameSpace.VTable, @ptrCast(self.vtable)).UnselectAll(@as(*const IShellNameSpace, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IScriptErrorList_Value = Guid.initString("f3470f24-15fd-11d2-bb2e-00805ff7efca");
pub const IID_IScriptErrorList = &IID_IScriptErrorList_Value;
pub const IScriptErrorList = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        advanceError: *const fn (
            self: *const IScriptErrorList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        retreatError: *const fn (
            self: *const IScriptErrorList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        canAdvanceError: *const fn (
            self: *const IScriptErrorList,
            pf_can_advance: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        canRetreatError: *const fn (
            self: *const IScriptErrorList,
            pf_can_retreat: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getErrorLine: *const fn (
            self: *const IScriptErrorList,
            pl_line: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getErrorChar: *const fn (
            self: *const IScriptErrorList,
            pl_char: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getErrorCode: *const fn (
            self: *const IScriptErrorList,
            pl_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getErrorMsg: *const fn (
            self: *const IScriptErrorList,
            pstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getErrorUrl: *const fn (
            self: *const IScriptErrorList,
            pstr: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getAlwaysShowLockState: *const fn (
            self: *const IScriptErrorList,
            pf_always_show_locked: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getDetailsPaneOpen: *const fn (
            self: *const IScriptErrorList,
            pf_details_pane_open: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setDetailsPaneOpen: *const fn (
            self: *const IScriptErrorList,
            f_details_pane_open: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        getPerErrorDisplay: *const fn (
            self: *const IScriptErrorList,
            pf_per_error_display: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        setPerErrorDisplay: *const fn (
            self: *const IScriptErrorList,
            f_per_error_display: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn advanceError(self: *const T) HRESULT {
                return @as(*const IScriptErrorList.VTable, @ptrCast(self.vtable)).advanceError(@as(*const IScriptErrorList, @ptrCast(self)));
            }
            pub inline fn retreatError(self: *const T) HRESULT {
                return @as(*const IScriptErrorList.VTable, @ptrCast(self.vtable)).retreatError(@as(*const IScriptErrorList, @ptrCast(self)));
            }
            pub inline fn canAdvanceError(self: *const T, pf_can_advance_: ?*BOOL) HRESULT {
                return @as(*const IScriptErrorList.VTable, @ptrCast(self.vtable)).canAdvanceError(@as(*const IScriptErrorList, @ptrCast(self)), pf_can_advance_);
            }
            pub inline fn canRetreatError(self: *const T, pf_can_retreat_: ?*BOOL) HRESULT {
                return @as(*const IScriptErrorList.VTable, @ptrCast(self.vtable)).canRetreatError(@as(*const IScriptErrorList, @ptrCast(self)), pf_can_retreat_);
            }
            pub inline fn getErrorLine(self: *const T, pl_line_: ?*i32) HRESULT {
                return @as(*const IScriptErrorList.VTable, @ptrCast(self.vtable)).getErrorLine(@as(*const IScriptErrorList, @ptrCast(self)), pl_line_);
            }
            pub inline fn getErrorChar(self: *const T, pl_char_: ?*i32) HRESULT {
                return @as(*const IScriptErrorList.VTable, @ptrCast(self.vtable)).getErrorChar(@as(*const IScriptErrorList, @ptrCast(self)), pl_char_);
            }
            pub inline fn getErrorCode(self: *const T, pl_code_: ?*i32) HRESULT {
                return @as(*const IScriptErrorList.VTable, @ptrCast(self.vtable)).getErrorCode(@as(*const IScriptErrorList, @ptrCast(self)), pl_code_);
            }
            pub inline fn getErrorMsg(self: *const T, pstr_: ?*?BSTR) HRESULT {
                return @as(*const IScriptErrorList.VTable, @ptrCast(self.vtable)).getErrorMsg(@as(*const IScriptErrorList, @ptrCast(self)), pstr_);
            }
            pub inline fn getErrorUrl(self: *const T, pstr_: ?*?BSTR) HRESULT {
                return @as(*const IScriptErrorList.VTable, @ptrCast(self.vtable)).getErrorUrl(@as(*const IScriptErrorList, @ptrCast(self)), pstr_);
            }
            pub inline fn getAlwaysShowLockState(self: *const T, pf_always_show_locked_: ?*BOOL) HRESULT {
                return @as(*const IScriptErrorList.VTable, @ptrCast(self.vtable)).getAlwaysShowLockState(@as(*const IScriptErrorList, @ptrCast(self)), pf_always_show_locked_);
            }
            pub inline fn getDetailsPaneOpen(self: *const T, pf_details_pane_open_: ?*BOOL) HRESULT {
                return @as(*const IScriptErrorList.VTable, @ptrCast(self.vtable)).getDetailsPaneOpen(@as(*const IScriptErrorList, @ptrCast(self)), pf_details_pane_open_);
            }
            pub inline fn setDetailsPaneOpen(self: *const T, f_details_pane_open_: BOOL) HRESULT {
                return @as(*const IScriptErrorList.VTable, @ptrCast(self.vtable)).setDetailsPaneOpen(@as(*const IScriptErrorList, @ptrCast(self)), f_details_pane_open_);
            }
            pub inline fn getPerErrorDisplay(self: *const T, pf_per_error_display_: ?*BOOL) HRESULT {
                return @as(*const IScriptErrorList.VTable, @ptrCast(self.vtable)).getPerErrorDisplay(@as(*const IScriptErrorList, @ptrCast(self)), pf_per_error_display_);
            }
            pub inline fn setPerErrorDisplay(self: *const T, f_per_error_display_: BOOL) HRESULT {
                return @as(*const IScriptErrorList.VTable, @ptrCast(self.vtable)).setPerErrorDisplay(@as(*const IScriptErrorList, @ptrCast(self)), f_per_error_display_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_ShellFolderViewOC_Value = Guid.initString("9ba05971-f6a8-11cf-a442-00a0c90a8f39");
pub const CLSID_ShellFolderViewOC = &CLSID_ShellFolderViewOC_Value;

const CLSID_ShellFolderItem_Value = Guid.initString("2fe352ea-fd1f-11d2-b1f4-00c04f8eeb3e");
pub const CLSID_ShellFolderItem = &CLSID_ShellFolderItem_Value;

const CLSID_ShellLinkObject_Value = Guid.initString("11219420-1768-11d1-95be-00609797ea4f");
pub const CLSID_ShellLinkObject = &CLSID_ShellLinkObject_Value;

const CLSID_ShellFolderView_Value = Guid.initString("62112aa1-ebe4-11cf-a5fb-0020afe7292d");
pub const CLSID_ShellFolderView = &CLSID_ShellFolderView_Value;

const CLSID_Shell_Value = Guid.initString("13709620-c279-11ce-a49e-444553540000");
pub const CLSID_Shell = &CLSID_Shell_Value;

const CLSID_ShellDispatchInproc_Value = Guid.initString("0a89a860-d7b1-11ce-8350-444553540000");
pub const CLSID_ShellDispatchInproc = &CLSID_ShellDispatchInproc_Value;

const CLSID_FileSearchBand_Value = Guid.initString("c4ee31f3-4768-11d2-be5c-00a0c9a83da1");
pub const CLSID_FileSearchBand = &CLSID_FileSearchBand_Value;

pub const OfflineFolderStatus = enum(i32) {
    INACTIVE = -1,
    ONLINE = 0,
    OFFLINE = 1,
    SERVERBACK = 2,
    DIRTYCACHE = 3,
};
pub const OFS_INACTIVE = OfflineFolderStatus.INACTIVE;
pub const OFS_ONLINE = OfflineFolderStatus.ONLINE;
pub const OFS_OFFLINE = OfflineFolderStatus.OFFLINE;
pub const OFS_SERVERBACK = OfflineFolderStatus.SERVERBACK;
pub const OFS_DIRTYCACHE = OfflineFolderStatus.DIRTYCACHE;

pub const ShellFolderViewOptions = enum(i32) {
    SHOWALLOBJECTS = 1,
    SHOWEXTENSIONS = 2,
    SHOWCOMPCOLOR = 8,
    SHOWSYSFILES = 32,
    WIN95CLASSIC = 64,
    DOUBLECLICKINWEBVIEW = 128,
    DESKTOPHTML = 512,
};
pub const SFVVO_SHOWALLOBJECTS = ShellFolderViewOptions.SHOWALLOBJECTS;
pub const SFVVO_SHOWEXTENSIONS = ShellFolderViewOptions.SHOWEXTENSIONS;
pub const SFVVO_SHOWCOMPCOLOR = ShellFolderViewOptions.SHOWCOMPCOLOR;
pub const SFVVO_SHOWSYSFILES = ShellFolderViewOptions.SHOWSYSFILES;
pub const SFVVO_WIN95CLASSIC = ShellFolderViewOptions.WIN95CLASSIC;
pub const SFVVO_DOUBLECLICKINWEBVIEW = ShellFolderViewOptions.DOUBLECLICKINWEBVIEW;
pub const SFVVO_DESKTOPHTML = ShellFolderViewOptions.DESKTOPHTML;

pub const ShellSpecialFolderConstants = enum(i32) {
    DESKTOP = 0,
    PROGRAMS = 2,
    CONTROLS = 3,
    PRINTERS = 4,
    PERSONAL = 5,
    FAVORITES = 6,
    STARTUP = 7,
    RECENT = 8,
    SENDTO = 9,
    BITBUCKET = 10,
    STARTMENU = 11,
    DESKTOPDIRECTORY = 16,
    DRIVES = 17,
    NETWORK = 18,
    NETHOOD = 19,
    FONTS = 20,
    TEMPLATES = 21,
    COMMONSTARTMENU = 22,
    COMMONPROGRAMS = 23,
    COMMONSTARTUP = 24,
    COMMONDESKTOPDIR = 25,
    APPDATA = 26,
    PRINTHOOD = 27,
    LOCALAPPDATA = 28,
    ALTSTARTUP = 29,
    COMMONALTSTARTUP = 30,
    COMMONFAVORITES = 31,
    INTERNETCACHE = 32,
    COOKIES = 33,
    HISTORY = 34,
    COMMONAPPDATA = 35,
    WINDOWS = 36,
    SYSTEM = 37,
    PROGRAMFILES = 38,
    MYPICTURES = 39,
    PROFILE = 40,
    SYSTEMx86 = 41,
    PROGRAMFILESx86 = 48,
};
pub const ssfDESKTOP = ShellSpecialFolderConstants.DESKTOP;
pub const ssfPROGRAMS = ShellSpecialFolderConstants.PROGRAMS;
pub const ssfCONTROLS = ShellSpecialFolderConstants.CONTROLS;
pub const ssfPRINTERS = ShellSpecialFolderConstants.PRINTERS;
pub const ssfPERSONAL = ShellSpecialFolderConstants.PERSONAL;
pub const ssfFAVORITES = ShellSpecialFolderConstants.FAVORITES;
pub const ssfSTARTUP = ShellSpecialFolderConstants.STARTUP;
pub const ssfRECENT = ShellSpecialFolderConstants.RECENT;
pub const ssfSENDTO = ShellSpecialFolderConstants.SENDTO;
pub const ssfBITBUCKET = ShellSpecialFolderConstants.BITBUCKET;
pub const ssfSTARTMENU = ShellSpecialFolderConstants.STARTMENU;
pub const ssfDESKTOPDIRECTORY = ShellSpecialFolderConstants.DESKTOPDIRECTORY;
pub const ssfDRIVES = ShellSpecialFolderConstants.DRIVES;
pub const ssfNETWORK = ShellSpecialFolderConstants.NETWORK;
pub const ssfNETHOOD = ShellSpecialFolderConstants.NETHOOD;
pub const ssfFONTS = ShellSpecialFolderConstants.FONTS;
pub const ssfTEMPLATES = ShellSpecialFolderConstants.TEMPLATES;
pub const ssfCOMMONSTARTMENU = ShellSpecialFolderConstants.COMMONSTARTMENU;
pub const ssfCOMMONPROGRAMS = ShellSpecialFolderConstants.COMMONPROGRAMS;
pub const ssfCOMMONSTARTUP = ShellSpecialFolderConstants.COMMONSTARTUP;
pub const ssfCOMMONDESKTOPDIR = ShellSpecialFolderConstants.COMMONDESKTOPDIR;
pub const ssfAPPDATA = ShellSpecialFolderConstants.APPDATA;
pub const ssfPRINTHOOD = ShellSpecialFolderConstants.PRINTHOOD;
pub const ssfLOCALAPPDATA = ShellSpecialFolderConstants.LOCALAPPDATA;
pub const ssfALTSTARTUP = ShellSpecialFolderConstants.ALTSTARTUP;
pub const ssfCOMMONALTSTARTUP = ShellSpecialFolderConstants.COMMONALTSTARTUP;
pub const ssfCOMMONFAVORITES = ShellSpecialFolderConstants.COMMONFAVORITES;
pub const ssfINTERNETCACHE = ShellSpecialFolderConstants.INTERNETCACHE;
pub const ssfCOOKIES = ShellSpecialFolderConstants.COOKIES;
pub const ssfHISTORY = ShellSpecialFolderConstants.HISTORY;
pub const ssfCOMMONAPPDATA = ShellSpecialFolderConstants.COMMONAPPDATA;
pub const ssfWINDOWS = ShellSpecialFolderConstants.WINDOWS;
pub const ssfSYSTEM = ShellSpecialFolderConstants.SYSTEM;
pub const ssfPROGRAMFILES = ShellSpecialFolderConstants.PROGRAMFILES;
pub const ssfMYPICTURES = ShellSpecialFolderConstants.MYPICTURES;
pub const ssfPROFILE = ShellSpecialFolderConstants.PROFILE;
pub const ssfSYSTEMx86 = ShellSpecialFolderConstants.SYSTEMx86;
pub const ssfPROGRAMFILESx86 = ShellSpecialFolderConstants.PROGRAMFILESx86;

const IID_IFolderViewOC_Value = Guid.initString("9ba05970-f6a8-11cf-a442-00a0c90a8f39");
pub const IID_IFolderViewOC = &IID_IFolderViewOC_Value;
pub const IFolderViewOC = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        SetFolderView: *const fn (
            self: *const IFolderViewOC,
            pdisp: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn setFolderView(self: *const T, pdisp_: ?*IDispatch) HRESULT {
                return @as(*const IFolderViewOC.VTable, @ptrCast(self.vtable)).SetFolderView(@as(*const IFolderViewOC, @ptrCast(self)), pdisp_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_DShellFolderViewEvents_Value = Guid.initString("62112aa2-ebe4-11cf-a5fb-0020afe7292d");
pub const IID_DShellFolderViewEvents = &IID_DShellFolderViewEvents_Value;
pub const DShellFolderViewEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_DFConstraint_Value = Guid.initString("4a3df050-23bd-11d2-939f-00a0c91eedba");
pub const IID_DFConstraint = &IID_DFConstraint_Value;
pub const DFConstraint = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const DFConstraint,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const DFConstraint,
            pv: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, pbs_: ?*?BSTR) HRESULT {
                return @as(*const DFConstraint.VTable, @ptrCast(self.vtable)).get_Name(@as(*const DFConstraint, @ptrCast(self)), pbs_);
            }
            pub inline fn getValue(self: *const T, pv_: ?*VARIANT) HRESULT {
                return @as(*const DFConstraint.VTable, @ptrCast(self.vtable)).get_Value(@as(*const DFConstraint, @ptrCast(self)), pv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_FolderItem_Value = Guid.initString("fac32c80-cbe4-11ce-8350-444553540000");
pub const IID_FolderItem = &IID_FolderItem_Value;
pub const FolderItem = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Application: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItem,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItem,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItem,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItem,
            bs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItem,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GetLink: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItem,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GetFolder: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItem,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsLink: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItem,
            pb: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsFolder: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItem,
            pb: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsFileSystem: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItem,
            pb: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsBrowsable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItem,
            pb: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ModifyDate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItem,
            pdt: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ModifyDate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItem,
            dt: f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Size: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItem,
            pul: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItem,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Verbs: *const fn (
            self: *const FolderItem,
            ppfic: ?*?*FolderItemVerbs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeVerb: *const fn (
            self: *const FolderItem,
            v_verb: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getApplication(self: *const T, ppid_: ?*?*IDispatch) HRESULT {
                return @as(*const FolderItem.VTable, @ptrCast(self.vtable)).get_Application(@as(*const FolderItem, @ptrCast(self)), ppid_);
            }
            pub inline fn getParent(self: *const T, ppid_: ?*?*IDispatch) HRESULT {
                return @as(*const FolderItem.VTable, @ptrCast(self.vtable)).get_Parent(@as(*const FolderItem, @ptrCast(self)), ppid_);
            }
            pub inline fn getName(self: *const T, pbs_: ?*?BSTR) HRESULT {
                return @as(*const FolderItem.VTable, @ptrCast(self.vtable)).get_Name(@as(*const FolderItem, @ptrCast(self)), pbs_);
            }
            pub inline fn putName(self: *const T, bs_: ?BSTR) HRESULT {
                return @as(*const FolderItem.VTable, @ptrCast(self.vtable)).put_Name(@as(*const FolderItem, @ptrCast(self)), bs_);
            }
            pub inline fn getPath(self: *const T, pbs_: ?*?BSTR) HRESULT {
                return @as(*const FolderItem.VTable, @ptrCast(self.vtable)).get_Path(@as(*const FolderItem, @ptrCast(self)), pbs_);
            }
            pub inline fn getGetLink(self: *const T, ppid_: ?*?*IDispatch) HRESULT {
                return @as(*const FolderItem.VTable, @ptrCast(self.vtable)).get_GetLink(@as(*const FolderItem, @ptrCast(self)), ppid_);
            }
            pub inline fn getGetFolder(self: *const T, ppid_: ?*?*IDispatch) HRESULT {
                return @as(*const FolderItem.VTable, @ptrCast(self.vtable)).get_GetFolder(@as(*const FolderItem, @ptrCast(self)), ppid_);
            }
            pub inline fn getIsLink(self: *const T, pb_: ?*i16) HRESULT {
                return @as(*const FolderItem.VTable, @ptrCast(self.vtable)).get_IsLink(@as(*const FolderItem, @ptrCast(self)), pb_);
            }
            pub inline fn getIsFolder(self: *const T, pb_: ?*i16) HRESULT {
                return @as(*const FolderItem.VTable, @ptrCast(self.vtable)).get_IsFolder(@as(*const FolderItem, @ptrCast(self)), pb_);
            }
            pub inline fn getIsFileSystem(self: *const T, pb_: ?*i16) HRESULT {
                return @as(*const FolderItem.VTable, @ptrCast(self.vtable)).get_IsFileSystem(@as(*const FolderItem, @ptrCast(self)), pb_);
            }
            pub inline fn getIsBrowsable(self: *const T, pb_: ?*i16) HRESULT {
                return @as(*const FolderItem.VTable, @ptrCast(self.vtable)).get_IsBrowsable(@as(*const FolderItem, @ptrCast(self)), pb_);
            }
            pub inline fn getModifyDate(self: *const T, pdt_: ?*f64) HRESULT {
                return @as(*const FolderItem.VTable, @ptrCast(self.vtable)).get_ModifyDate(@as(*const FolderItem, @ptrCast(self)), pdt_);
            }
            pub inline fn putModifyDate(self: *const T, dt_: f64) HRESULT {
                return @as(*const FolderItem.VTable, @ptrCast(self.vtable)).put_ModifyDate(@as(*const FolderItem, @ptrCast(self)), dt_);
            }
            pub inline fn getSize(self: *const T, pul_: ?*i32) HRESULT {
                return @as(*const FolderItem.VTable, @ptrCast(self.vtable)).get_Size(@as(*const FolderItem, @ptrCast(self)), pul_);
            }
            pub inline fn getType(self: *const T, pbs_: ?*?BSTR) HRESULT {
                return @as(*const FolderItem.VTable, @ptrCast(self.vtable)).get_Type(@as(*const FolderItem, @ptrCast(self)), pbs_);
            }
            pub inline fn verbs(self: *const T, ppfic_: ?*?*FolderItemVerbs) HRESULT {
                return @as(*const FolderItem.VTable, @ptrCast(self.vtable)).Verbs(@as(*const FolderItem, @ptrCast(self)), ppfic_);
            }
            pub inline fn invokeVerb(self: *const T, v_verb_: VARIANT) HRESULT {
                return @as(*const FolderItem.VTable, @ptrCast(self.vtable)).InvokeVerb(@as(*const FolderItem, @ptrCast(self)), v_verb_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_FolderItems_Value = Guid.initString("744129e0-cbe5-11ce-8350-444553540000");
pub const IID_FolderItems = &IID_FolderItems_Value;
pub const FolderItems = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItems,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Application: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItems,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItems,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const FolderItems,
            index: VARIANT,
            ppid: ?*?*FolderItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _NewEnum: *const fn (
            self: *const FolderItems,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const FolderItems.VTable, @ptrCast(self.vtable)).get_Count(@as(*const FolderItems, @ptrCast(self)), pl_count_);
            }
            pub inline fn getApplication(self: *const T, ppid_: ?*?*IDispatch) HRESULT {
                return @as(*const FolderItems.VTable, @ptrCast(self.vtable)).get_Application(@as(*const FolderItems, @ptrCast(self)), ppid_);
            }
            pub inline fn getParent(self: *const T, ppid_: ?*?*IDispatch) HRESULT {
                return @as(*const FolderItems.VTable, @ptrCast(self.vtable)).get_Parent(@as(*const FolderItems, @ptrCast(self)), ppid_);
            }
            pub inline fn item(self: *const T, index_: VARIANT, ppid_: ?*?*FolderItem) HRESULT {
                return @as(*const FolderItems.VTable, @ptrCast(self.vtable)).Item(@as(*const FolderItems, @ptrCast(self)), index_, ppid_);
            }
            pub inline fn newEnum(self: *const T, ppunk_: ?*?*IUnknown) HRESULT {
                return @as(*const FolderItems.VTable, @ptrCast(self.vtable))._NewEnum(@as(*const FolderItems, @ptrCast(self)), ppunk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_FolderItemVerb_Value = Guid.initString("08ec3e00-50b0-11cf-960c-0080c7f4ee85");
pub const IID_FolderItemVerb = &IID_FolderItemVerb_Value;
pub const FolderItemVerb = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Application: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItemVerb,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItemVerb,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItemVerb,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoIt: *const fn (
            self: *const FolderItemVerb,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getApplication(self: *const T, ppid_: ?*?*IDispatch) HRESULT {
                return @as(*const FolderItemVerb.VTable, @ptrCast(self.vtable)).get_Application(@as(*const FolderItemVerb, @ptrCast(self)), ppid_);
            }
            pub inline fn getParent(self: *const T, ppid_: ?*?*IDispatch) HRESULT {
                return @as(*const FolderItemVerb.VTable, @ptrCast(self.vtable)).get_Parent(@as(*const FolderItemVerb, @ptrCast(self)), ppid_);
            }
            pub inline fn getName(self: *const T, pbs_: ?*?BSTR) HRESULT {
                return @as(*const FolderItemVerb.VTable, @ptrCast(self.vtable)).get_Name(@as(*const FolderItemVerb, @ptrCast(self)), pbs_);
            }
            pub inline fn doIt(self: *const T) HRESULT {
                return @as(*const FolderItemVerb.VTable, @ptrCast(self.vtable)).DoIt(@as(*const FolderItemVerb, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_FolderItemVerbs_Value = Guid.initString("1f8352c0-50b0-11cf-960c-0080c7f4ee85");
pub const IID_FolderItemVerbs = &IID_FolderItemVerbs_Value;
pub const FolderItemVerbs = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItemVerbs,
            pl_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Application: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItemVerbs,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItemVerbs,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const FolderItemVerbs,
            index: VARIANT,
            ppid: ?*?*FolderItemVerb,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _NewEnum: *const fn (
            self: *const FolderItemVerbs,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, pl_count_: ?*i32) HRESULT {
                return @as(*const FolderItemVerbs.VTable, @ptrCast(self.vtable)).get_Count(@as(*const FolderItemVerbs, @ptrCast(self)), pl_count_);
            }
            pub inline fn getApplication(self: *const T, ppid_: ?*?*IDispatch) HRESULT {
                return @as(*const FolderItemVerbs.VTable, @ptrCast(self.vtable)).get_Application(@as(*const FolderItemVerbs, @ptrCast(self)), ppid_);
            }
            pub inline fn getParent(self: *const T, ppid_: ?*?*IDispatch) HRESULT {
                return @as(*const FolderItemVerbs.VTable, @ptrCast(self.vtable)).get_Parent(@as(*const FolderItemVerbs, @ptrCast(self)), ppid_);
            }
            pub inline fn item(self: *const T, index_: VARIANT, ppid_: ?*?*FolderItemVerb) HRESULT {
                return @as(*const FolderItemVerbs.VTable, @ptrCast(self.vtable)).Item(@as(*const FolderItemVerbs, @ptrCast(self)), index_, ppid_);
            }
            pub inline fn newEnum(self: *const T, ppunk_: ?*?*IUnknown) HRESULT {
                return @as(*const FolderItemVerbs.VTable, @ptrCast(self.vtable))._NewEnum(@as(*const FolderItemVerbs, @ptrCast(self)), ppunk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_Folder_Value = Guid.initString("bbcbde60-c3ff-11ce-8350-444553540000");
pub const IID_Folder = &IID_Folder_Value;
pub const Folder = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Title: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Folder,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Application: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Folder,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Folder,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ParentFolder: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Folder,
            ppsf: ?*?*Folder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Items: *const fn (
            self: *const Folder,
            ppid: ?*?*FolderItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ParseName: *const fn (
            self: *const Folder,
            b_name: ?BSTR,
            ppid: ?*?*FolderItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NewFolder: *const fn (
            self: *const Folder,
            b_name: ?BSTR,
            v_options: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveHere: *const fn (
            self: *const Folder,
            v_item: VARIANT,
            v_options: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyHere: *const fn (
            self: *const Folder,
            v_item: VARIANT,
            v_options: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDetailsOf: *const fn (
            self: *const Folder,
            v_item: VARIANT,
            i_column: i32,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getTitle(self: *const T, pbs_: ?*?BSTR) HRESULT {
                return @as(*const Folder.VTable, @ptrCast(self.vtable)).get_Title(@as(*const Folder, @ptrCast(self)), pbs_);
            }
            pub inline fn getApplication(self: *const T, ppid_: ?*?*IDispatch) HRESULT {
                return @as(*const Folder.VTable, @ptrCast(self.vtable)).get_Application(@as(*const Folder, @ptrCast(self)), ppid_);
            }
            pub inline fn getParent(self: *const T, ppid_: ?*?*IDispatch) HRESULT {
                return @as(*const Folder.VTable, @ptrCast(self.vtable)).get_Parent(@as(*const Folder, @ptrCast(self)), ppid_);
            }
            pub inline fn getParentFolder(self: *const T, ppsf_: ?*?*Folder) HRESULT {
                return @as(*const Folder.VTable, @ptrCast(self.vtable)).get_ParentFolder(@as(*const Folder, @ptrCast(self)), ppsf_);
            }
            pub inline fn items(self: *const T, ppid_: ?*?*FolderItems) HRESULT {
                return @as(*const Folder.VTable, @ptrCast(self.vtable)).Items(@as(*const Folder, @ptrCast(self)), ppid_);
            }
            pub inline fn parseName(self: *const T, b_name_: ?BSTR, ppid_: ?*?*FolderItem) HRESULT {
                return @as(*const Folder.VTable, @ptrCast(self.vtable)).ParseName(@as(*const Folder, @ptrCast(self)), b_name_, ppid_);
            }
            pub inline fn newFolder(self: *const T, b_name_: ?BSTR, v_options_: VARIANT) HRESULT {
                return @as(*const Folder.VTable, @ptrCast(self.vtable)).NewFolder(@as(*const Folder, @ptrCast(self)), b_name_, v_options_);
            }
            pub inline fn moveHere(self: *const T, v_item_: VARIANT, v_options_: VARIANT) HRESULT {
                return @as(*const Folder.VTable, @ptrCast(self.vtable)).MoveHere(@as(*const Folder, @ptrCast(self)), v_item_, v_options_);
            }
            pub inline fn copyHere(self: *const T, v_item_: VARIANT, v_options_: VARIANT) HRESULT {
                return @as(*const Folder.VTable, @ptrCast(self.vtable)).CopyHere(@as(*const Folder, @ptrCast(self)), v_item_, v_options_);
            }
            pub inline fn getDetailsOf(self: *const T, v_item_: VARIANT, i_column_: i32, pbs_: ?*?BSTR) HRESULT {
                return @as(*const Folder.VTable, @ptrCast(self.vtable)).GetDetailsOf(@as(*const Folder, @ptrCast(self)), v_item_, i_column_, pbs_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_Folder2_Value = Guid.initString("f0d2d8ef-3890-11d2-bf8b-00c04fb93661");
pub const IID_Folder2 = &IID_Folder2_Value;
pub const Folder2 = extern struct {
    pub const VTable = extern struct {
        base: Folder.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Self: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Folder2,
            ppfi: ?*?*FolderItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OfflineStatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Folder2,
            pul: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Synchronize: *const fn (
            self: *const Folder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HaveToShowWebViewBarricade: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Folder2,
            pb_have_to_show_web_view_barricade: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DismissedWebViewBarricade: *const fn (
            self: *const Folder2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace Folder.MethodMixin(T);
            pub inline fn getSelf(self: *const T, ppfi_: ?*?*FolderItem) HRESULT {
                return @as(*const Folder2.VTable, @ptrCast(self.vtable)).get_Self(@as(*const Folder2, @ptrCast(self)), ppfi_);
            }
            pub inline fn getOfflineStatus(self: *const T, pul_: ?*i32) HRESULT {
                return @as(*const Folder2.VTable, @ptrCast(self.vtable)).get_OfflineStatus(@as(*const Folder2, @ptrCast(self)), pul_);
            }
            pub inline fn synchronize(self: *const T) HRESULT {
                return @as(*const Folder2.VTable, @ptrCast(self.vtable)).Synchronize(@as(*const Folder2, @ptrCast(self)));
            }
            pub inline fn getHaveToShowWebViewBarricade(self: *const T, pb_have_to_show_web_view_barricade_: ?*i16) HRESULT {
                return @as(*const Folder2.VTable, @ptrCast(self.vtable)).get_HaveToShowWebViewBarricade(@as(*const Folder2, @ptrCast(self)), pb_have_to_show_web_view_barricade_);
            }
            pub inline fn dismissedWebViewBarricade(self: *const T) HRESULT {
                return @as(*const Folder2.VTable, @ptrCast(self.vtable)).DismissedWebViewBarricade(@as(*const Folder2, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_Folder3_Value = Guid.initString("a7ae5f64-c4d7-4d7f-9307-4d24ee54b841");
pub const IID_Folder3 = &IID_Folder3_Value;
pub const Folder3 = extern struct {
    pub const VTable = extern struct {
        base: Folder2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowWebViewBarricade: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Folder3,
            pb_show_web_view_barricade: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowWebViewBarricade: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Folder3,
            b_show_web_view_barricade: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace Folder2.MethodMixin(T);
            pub inline fn getShowWebViewBarricade(self: *const T, pb_show_web_view_barricade_: ?*i16) HRESULT {
                return @as(*const Folder3.VTable, @ptrCast(self.vtable)).get_ShowWebViewBarricade(@as(*const Folder3, @ptrCast(self)), pb_show_web_view_barricade_);
            }
            pub inline fn putShowWebViewBarricade(self: *const T, b_show_web_view_barricade_: i16) HRESULT {
                return @as(*const Folder3.VTable, @ptrCast(self.vtable)).put_ShowWebViewBarricade(@as(*const Folder3, @ptrCast(self)), b_show_web_view_barricade_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_FolderItem2_Value = Guid.initString("edc817aa-92b8-11d1-b075-00c04fc33aa5");
pub const IID_FolderItem2 = &IID_FolderItem2_Value;
pub const FolderItem2 = extern struct {
    pub const VTable = extern struct {
        base: FolderItem.VTable,
        InvokeVerbEx: *const fn (
            self: *const FolderItem2,
            v_verb: VARIANT,
            v_args: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExtendedProperty: *const fn (
            self: *const FolderItem2,
            bstr_prop_name: ?BSTR,
            pv_ret: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace FolderItem.MethodMixin(T);
            pub inline fn invokeVerbEx(self: *const T, v_verb_: VARIANT, v_args_: VARIANT) HRESULT {
                return @as(*const FolderItem2.VTable, @ptrCast(self.vtable)).InvokeVerbEx(@as(*const FolderItem2, @ptrCast(self)), v_verb_, v_args_);
            }
            pub inline fn extendedProperty(self: *const T, bstr_prop_name_: ?BSTR, pv_ret_: ?*VARIANT) HRESULT {
                return @as(*const FolderItem2.VTable, @ptrCast(self.vtable)).ExtendedProperty(@as(*const FolderItem2, @ptrCast(self)), bstr_prop_name_, pv_ret_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_FolderItems2_Value = Guid.initString("c94f0ad0-f363-11d2-a327-00c04f8eec7f");
pub const IID_FolderItems2 = &IID_FolderItems2_Value;
pub const FolderItems2 = extern struct {
    pub const VTable = extern struct {
        base: FolderItems.VTable,
        InvokeVerbEx: *const fn (
            self: *const FolderItems2,
            v_verb: VARIANT,
            v_args: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace FolderItems.MethodMixin(T);
            pub inline fn invokeVerbEx(self: *const T, v_verb_: VARIANT, v_args_: VARIANT) HRESULT {
                return @as(*const FolderItems2.VTable, @ptrCast(self.vtable)).InvokeVerbEx(@as(*const FolderItems2, @ptrCast(self)), v_verb_, v_args_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_FolderItems3_Value = Guid.initString("eaa7c309-bbec-49d5-821d-64d966cb667f");
pub const IID_FolderItems3 = &IID_FolderItems3_Value;
pub const FolderItems3 = extern struct {
    pub const VTable = extern struct {
        base: FolderItems2.VTable,
        Filter: *const fn (
            self: *const FolderItems3,
            grf_flags: i32,
            bstr_file_spec: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Verbs: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const FolderItems3,
            ppfic: ?*?*FolderItemVerbs,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace FolderItems2.MethodMixin(T);
            pub inline fn filter(self: *const T, grf_flags_: i32, bstr_file_spec_: ?BSTR) HRESULT {
                return @as(*const FolderItems3.VTable, @ptrCast(self.vtable)).Filter(@as(*const FolderItems3, @ptrCast(self)), grf_flags_, bstr_file_spec_);
            }
            pub inline fn getVerbs(self: *const T, ppfic_: ?*?*FolderItemVerbs) HRESULT {
                return @as(*const FolderItems3.VTable, @ptrCast(self.vtable)).get_Verbs(@as(*const FolderItems3, @ptrCast(self)), ppfic_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellLinkDual_Value = Guid.initString("88a05c00-f000-11ce-8350-444553540000");
pub const IID_IShellLinkDual = &IID_IShellLinkDual_Value;
pub const IShellLinkDual = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellLinkDual,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellLinkDual,
            bs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellLinkDual,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellLinkDual,
            bs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WorkingDirectory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellLinkDual,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WorkingDirectory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellLinkDual,
            bs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Arguments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellLinkDual,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Arguments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellLinkDual,
            bs: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Hotkey: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellLinkDual,
            pi_h_k: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Hotkey: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellLinkDual,
            i_h_k: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ShowCommand: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellLinkDual,
            pi_show_command: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ShowCommand: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellLinkDual,
            i_show_command: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resolve: *const fn (
            self: *const IShellLinkDual,
            f_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIconLocation: *const fn (
            self: *const IShellLinkDual,
            pbs: ?*?BSTR,
            pi_icon: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIconLocation: *const fn (
            self: *const IShellLinkDual,
            bs: ?BSTR,
            i_icon: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn (
            self: *const IShellLinkDual,
            v_where: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getPath(self: *const T, pbs_: ?*?BSTR) HRESULT {
                return @as(*const IShellLinkDual.VTable, @ptrCast(self.vtable)).get_Path(@as(*const IShellLinkDual, @ptrCast(self)), pbs_);
            }
            pub inline fn putPath(self: *const T, bs_: ?BSTR) HRESULT {
                return @as(*const IShellLinkDual.VTable, @ptrCast(self.vtable)).put_Path(@as(*const IShellLinkDual, @ptrCast(self)), bs_);
            }
            pub inline fn getDescription(self: *const T, pbs_: ?*?BSTR) HRESULT {
                return @as(*const IShellLinkDual.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IShellLinkDual, @ptrCast(self)), pbs_);
            }
            pub inline fn putDescription(self: *const T, bs_: ?BSTR) HRESULT {
                return @as(*const IShellLinkDual.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IShellLinkDual, @ptrCast(self)), bs_);
            }
            pub inline fn getWorkingDirectory(self: *const T, pbs_: ?*?BSTR) HRESULT {
                return @as(*const IShellLinkDual.VTable, @ptrCast(self.vtable)).get_WorkingDirectory(@as(*const IShellLinkDual, @ptrCast(self)), pbs_);
            }
            pub inline fn putWorkingDirectory(self: *const T, bs_: ?BSTR) HRESULT {
                return @as(*const IShellLinkDual.VTable, @ptrCast(self.vtable)).put_WorkingDirectory(@as(*const IShellLinkDual, @ptrCast(self)), bs_);
            }
            pub inline fn getArguments(self: *const T, pbs_: ?*?BSTR) HRESULT {
                return @as(*const IShellLinkDual.VTable, @ptrCast(self.vtable)).get_Arguments(@as(*const IShellLinkDual, @ptrCast(self)), pbs_);
            }
            pub inline fn putArguments(self: *const T, bs_: ?BSTR) HRESULT {
                return @as(*const IShellLinkDual.VTable, @ptrCast(self.vtable)).put_Arguments(@as(*const IShellLinkDual, @ptrCast(self)), bs_);
            }
            pub inline fn getHotkey(self: *const T, pi_h_k_: ?*i32) HRESULT {
                return @as(*const IShellLinkDual.VTable, @ptrCast(self.vtable)).get_Hotkey(@as(*const IShellLinkDual, @ptrCast(self)), pi_h_k_);
            }
            pub inline fn putHotkey(self: *const T, i_h_k_: i32) HRESULT {
                return @as(*const IShellLinkDual.VTable, @ptrCast(self.vtable)).put_Hotkey(@as(*const IShellLinkDual, @ptrCast(self)), i_h_k_);
            }
            pub inline fn getShowCommand(self: *const T, pi_show_command_: ?*i32) HRESULT {
                return @as(*const IShellLinkDual.VTable, @ptrCast(self.vtable)).get_ShowCommand(@as(*const IShellLinkDual, @ptrCast(self)), pi_show_command_);
            }
            pub inline fn putShowCommand(self: *const T, i_show_command_: i32) HRESULT {
                return @as(*const IShellLinkDual.VTable, @ptrCast(self.vtable)).put_ShowCommand(@as(*const IShellLinkDual, @ptrCast(self)), i_show_command_);
            }
            pub inline fn resolve(self: *const T, f_flags_: i32) HRESULT {
                return @as(*const IShellLinkDual.VTable, @ptrCast(self.vtable)).Resolve(@as(*const IShellLinkDual, @ptrCast(self)), f_flags_);
            }
            pub inline fn getIconLocation(self: *const T, pbs_: ?*?BSTR, pi_icon_: ?*i32) HRESULT {
                return @as(*const IShellLinkDual.VTable, @ptrCast(self.vtable)).GetIconLocation(@as(*const IShellLinkDual, @ptrCast(self)), pbs_, pi_icon_);
            }
            pub inline fn setIconLocation(self: *const T, bs_: ?BSTR, i_icon_: i32) HRESULT {
                return @as(*const IShellLinkDual.VTable, @ptrCast(self.vtable)).SetIconLocation(@as(*const IShellLinkDual, @ptrCast(self)), bs_, i_icon_);
            }
            pub inline fn save(self: *const T, v_where_: VARIANT) HRESULT {
                return @as(*const IShellLinkDual.VTable, @ptrCast(self.vtable)).Save(@as(*const IShellLinkDual, @ptrCast(self)), v_where_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellLinkDual2_Value = Guid.initString("317ee249-f12e-11d2-b1e4-00c04f8eeb3e");
pub const IID_IShellLinkDual2 = &IID_IShellLinkDual2_Value;
pub const IShellLinkDual2 = extern struct {
    pub const VTable = extern struct {
        base: IShellLinkDual.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Target: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellLinkDual2,
            ppfi: ?*?*FolderItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellLinkDual.MethodMixin(T);
            pub inline fn getTarget(self: *const T, ppfi_: ?*?*FolderItem) HRESULT {
                return @as(*const IShellLinkDual2.VTable, @ptrCast(self.vtable)).get_Target(@as(*const IShellLinkDual2, @ptrCast(self)), ppfi_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellFolderViewDual_Value = Guid.initString("e7a1af80-4d96-11cf-960c-0080c7f4ee85");
pub const IID_IShellFolderViewDual = &IID_IShellFolderViewDual_Value;
pub const IShellFolderViewDual = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Application: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellFolderViewDual,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellFolderViewDual,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Folder: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellFolderViewDual,
            ppid: ?*?*Folder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectedItems: *const fn (
            self: *const IShellFolderViewDual,
            ppid: ?*?*FolderItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FocusedItem: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellFolderViewDual,
            ppid: ?*?*FolderItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectItem: *const fn (
            self: *const IShellFolderViewDual,
            pvfi: ?*VARIANT,
            dw_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PopupItemMenu: *const fn (
            self: *const IShellFolderViewDual,
            pfi: ?*FolderItem,
            vx: VARIANT,
            vy: VARIANT,
            pbs: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Script: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellFolderViewDual,
            pp_disp: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ViewOptions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellFolderViewDual,
            pl_view_options: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getApplication(self: *const T, ppid_: ?*?*IDispatch) HRESULT {
                return @as(*const IShellFolderViewDual.VTable, @ptrCast(self.vtable)).get_Application(@as(*const IShellFolderViewDual, @ptrCast(self)), ppid_);
            }
            pub inline fn getParent(self: *const T, ppid_: ?*?*IDispatch) HRESULT {
                return @as(*const IShellFolderViewDual.VTable, @ptrCast(self.vtable)).get_Parent(@as(*const IShellFolderViewDual, @ptrCast(self)), ppid_);
            }
            pub inline fn getFolder(self: *const T, ppid_: ?*?*Folder) HRESULT {
                return @as(*const IShellFolderViewDual.VTable, @ptrCast(self.vtable)).get_Folder(@as(*const IShellFolderViewDual, @ptrCast(self)), ppid_);
            }
            pub inline fn selectedItems(self: *const T, ppid_: ?*?*FolderItems) HRESULT {
                return @as(*const IShellFolderViewDual.VTable, @ptrCast(self.vtable)).SelectedItems(@as(*const IShellFolderViewDual, @ptrCast(self)), ppid_);
            }
            pub inline fn getFocusedItem(self: *const T, ppid_: ?*?*FolderItem) HRESULT {
                return @as(*const IShellFolderViewDual.VTable, @ptrCast(self.vtable)).get_FocusedItem(@as(*const IShellFolderViewDual, @ptrCast(self)), ppid_);
            }
            pub inline fn selectItem(self: *const T, pvfi_: ?*VARIANT, dw_flags_: i32) HRESULT {
                return @as(*const IShellFolderViewDual.VTable, @ptrCast(self.vtable)).SelectItem(@as(*const IShellFolderViewDual, @ptrCast(self)), pvfi_, dw_flags_);
            }
            pub inline fn popupItemMenu(self: *const T, pfi_: ?*FolderItem, vx_: VARIANT, vy_: VARIANT, pbs_: ?*?BSTR) HRESULT {
                return @as(*const IShellFolderViewDual.VTable, @ptrCast(self.vtable)).PopupItemMenu(@as(*const IShellFolderViewDual, @ptrCast(self)), pfi_, vx_, vy_, pbs_);
            }
            pub inline fn getScript(self: *const T, pp_disp_: ?*?*IDispatch) HRESULT {
                return @as(*const IShellFolderViewDual.VTable, @ptrCast(self.vtable)).get_Script(@as(*const IShellFolderViewDual, @ptrCast(self)), pp_disp_);
            }
            pub inline fn getViewOptions(self: *const T, pl_view_options_: ?*i32) HRESULT {
                return @as(*const IShellFolderViewDual.VTable, @ptrCast(self.vtable)).get_ViewOptions(@as(*const IShellFolderViewDual, @ptrCast(self)), pl_view_options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellFolderViewDual2_Value = Guid.initString("31c147b6-0ade-4a3c-b514-ddf932ef6d17");
pub const IID_IShellFolderViewDual2 = &IID_IShellFolderViewDual2_Value;
pub const IShellFolderViewDual2 = extern struct {
    pub const VTable = extern struct {
        base: IShellFolderViewDual.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentViewMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellFolderViewDual2,
            p_view_mode: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CurrentViewMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellFolderViewDual2,
            view_mode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectItemRelative: *const fn (
            self: *const IShellFolderViewDual2,
            i_relative: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellFolderViewDual.MethodMixin(T);
            pub inline fn getCurrentViewMode(self: *const T, p_view_mode_: ?*u32) HRESULT {
                return @as(*const IShellFolderViewDual2.VTable, @ptrCast(self.vtable)).get_CurrentViewMode(@as(*const IShellFolderViewDual2, @ptrCast(self)), p_view_mode_);
            }
            pub inline fn putCurrentViewMode(self: *const T, view_mode_: u32) HRESULT {
                return @as(*const IShellFolderViewDual2.VTable, @ptrCast(self.vtable)).put_CurrentViewMode(@as(*const IShellFolderViewDual2, @ptrCast(self)), view_mode_);
            }
            pub inline fn selectItemRelative(self: *const T, i_relative_: i32) HRESULT {
                return @as(*const IShellFolderViewDual2.VTable, @ptrCast(self.vtable)).SelectItemRelative(@as(*const IShellFolderViewDual2, @ptrCast(self)), i_relative_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IShellFolderViewDual3_Value = Guid.initString("29ec8e6c-46d3-411f-baaa-611a6c9cac66");
pub const IID_IShellFolderViewDual3 = &IID_IShellFolderViewDual3_Value;
pub const IShellFolderViewDual3 = extern struct {
    pub const VTable = extern struct {
        base: IShellFolderViewDual2.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GroupBy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellFolderViewDual3,
            pbstr_group_by: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GroupBy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellFolderViewDual3,
            bstr_group_by: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FolderFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellFolderViewDual3,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FolderFlags: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellFolderViewDual3,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SortColumns: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellFolderViewDual3,
            pbstr_sort_columns: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SortColumns: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellFolderViewDual3,
            bstr_sort_columns: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IconSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellFolderViewDual3,
            i_icon_size: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IconSize: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellFolderViewDual3,
            pi_icon_size: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FilterView: *const fn (
            self: *const IShellFolderViewDual3,
            bstr_filter_text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellFolderViewDual2.MethodMixin(T);
            pub inline fn getGroupBy(self: *const T, pbstr_group_by_: ?*?BSTR) HRESULT {
                return @as(*const IShellFolderViewDual3.VTable, @ptrCast(self.vtable)).get_GroupBy(@as(*const IShellFolderViewDual3, @ptrCast(self)), pbstr_group_by_);
            }
            pub inline fn putGroupBy(self: *const T, bstr_group_by_: ?BSTR) HRESULT {
                return @as(*const IShellFolderViewDual3.VTable, @ptrCast(self.vtable)).put_GroupBy(@as(*const IShellFolderViewDual3, @ptrCast(self)), bstr_group_by_);
            }
            pub inline fn getFolderFlags(self: *const T, pdw_flags_: ?*u32) HRESULT {
                return @as(*const IShellFolderViewDual3.VTable, @ptrCast(self.vtable)).get_FolderFlags(@as(*const IShellFolderViewDual3, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn putFolderFlags(self: *const T, dw_flags_: u32) HRESULT {
                return @as(*const IShellFolderViewDual3.VTable, @ptrCast(self.vtable)).put_FolderFlags(@as(*const IShellFolderViewDual3, @ptrCast(self)), dw_flags_);
            }
            pub inline fn getSortColumns(self: *const T, pbstr_sort_columns_: ?*?BSTR) HRESULT {
                return @as(*const IShellFolderViewDual3.VTable, @ptrCast(self.vtable)).get_SortColumns(@as(*const IShellFolderViewDual3, @ptrCast(self)), pbstr_sort_columns_);
            }
            pub inline fn putSortColumns(self: *const T, bstr_sort_columns_: ?BSTR) HRESULT {
                return @as(*const IShellFolderViewDual3.VTable, @ptrCast(self.vtable)).put_SortColumns(@as(*const IShellFolderViewDual3, @ptrCast(self)), bstr_sort_columns_);
            }
            pub inline fn putIconSize(self: *const T, i_icon_size_: i32) HRESULT {
                return @as(*const IShellFolderViewDual3.VTable, @ptrCast(self.vtable)).put_IconSize(@as(*const IShellFolderViewDual3, @ptrCast(self)), i_icon_size_);
            }
            pub inline fn getIconSize(self: *const T, pi_icon_size_: ?*i32) HRESULT {
                return @as(*const IShellFolderViewDual3.VTable, @ptrCast(self.vtable)).get_IconSize(@as(*const IShellFolderViewDual3, @ptrCast(self)), pi_icon_size_);
            }
            pub inline fn filterView(self: *const T, bstr_filter_text_: ?BSTR) HRESULT {
                return @as(*const IShellFolderViewDual3.VTable, @ptrCast(self.vtable)).FilterView(@as(*const IShellFolderViewDual3, @ptrCast(self)), bstr_filter_text_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellDispatch_Value = Guid.initString("d8f015c0-c278-11ce-a49e-444553540000");
pub const IID_IShellDispatch = &IID_IShellDispatch_Value;
pub const IShellDispatch = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Application: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellDispatch,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Parent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShellDispatch,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NameSpace: *const fn (
            self: *const IShellDispatch,
            v_dir: VARIANT,
            ppsdf: ?*?*Folder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BrowseForFolder: *const fn (
            self: *const IShellDispatch,
            hwnd: i32,
            title: ?BSTR,
            options: i32,
            root_folder: VARIANT,
            ppsdf: ?*?*Folder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Windows: *const fn (
            self: *const IShellDispatch,
            ppid: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: *const fn (
            self: *const IShellDispatch,
            v_dir: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Explore: *const fn (
            self: *const IShellDispatch,
            v_dir: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MinimizeAll: *const fn (
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UndoMinimizeALL: *const fn (
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FileRun: *const fn (
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CascadeWindows: *const fn (
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TileVertically: *const fn (
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TileHorizontally: *const fn (
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShutdownWindows: *const fn (
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Suspend: *const fn (
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EjectPC: *const fn (
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTime: *const fn (
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TrayProperties: *const fn (
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Help: *const fn (
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFiles: *const fn (
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindComputer: *const fn (
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshMenu: *const fn (
            self: *const IShellDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ControlPanelItem: *const fn (
            self: *const IShellDispatch,
            bstr_dir: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getApplication(self: *const T, ppid_: ?*?*IDispatch) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).get_Application(@as(*const IShellDispatch, @ptrCast(self)), ppid_);
            }
            pub inline fn getParent(self: *const T, ppid_: ?*?*IDispatch) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).get_Parent(@as(*const IShellDispatch, @ptrCast(self)), ppid_);
            }
            pub inline fn nameSpace(self: *const T, v_dir_: VARIANT, ppsdf_: ?*?*Folder) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).NameSpace(@as(*const IShellDispatch, @ptrCast(self)), v_dir_, ppsdf_);
            }
            pub inline fn browseForFolder(self: *const T, hwnd_: i32, title_: ?BSTR, options_: i32, root_folder_: VARIANT, ppsdf_: ?*?*Folder) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).BrowseForFolder(@as(*const IShellDispatch, @ptrCast(self)), hwnd_, title_, options_, root_folder_, ppsdf_);
            }
            pub inline fn windows(self: *const T, ppid_: ?*?*IDispatch) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).Windows(@as(*const IShellDispatch, @ptrCast(self)), ppid_);
            }
            pub inline fn open(self: *const T, v_dir_: VARIANT) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).Open(@as(*const IShellDispatch, @ptrCast(self)), v_dir_);
            }
            pub inline fn explore(self: *const T, v_dir_: VARIANT) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).Explore(@as(*const IShellDispatch, @ptrCast(self)), v_dir_);
            }
            pub inline fn minimizeAll(self: *const T) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).MinimizeAll(@as(*const IShellDispatch, @ptrCast(self)));
            }
            pub inline fn undoMinimizeALL(self: *const T) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).UndoMinimizeALL(@as(*const IShellDispatch, @ptrCast(self)));
            }
            pub inline fn fileRun(self: *const T) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).FileRun(@as(*const IShellDispatch, @ptrCast(self)));
            }
            pub inline fn cascadeWindows(self: *const T) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).CascadeWindows(@as(*const IShellDispatch, @ptrCast(self)));
            }
            pub inline fn tileVertically(self: *const T) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).TileVertically(@as(*const IShellDispatch, @ptrCast(self)));
            }
            pub inline fn tileHorizontally(self: *const T) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).TileHorizontally(@as(*const IShellDispatch, @ptrCast(self)));
            }
            pub inline fn shutdownWindows(self: *const T) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).ShutdownWindows(@as(*const IShellDispatch, @ptrCast(self)));
            }
            pub inline fn @"suspend"(self: *const T) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).Suspend(@as(*const IShellDispatch, @ptrCast(self)));
            }
            pub inline fn ejectPC(self: *const T) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).EjectPC(@as(*const IShellDispatch, @ptrCast(self)));
            }
            pub inline fn setTime(self: *const T) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).SetTime(@as(*const IShellDispatch, @ptrCast(self)));
            }
            pub inline fn trayProperties(self: *const T) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).TrayProperties(@as(*const IShellDispatch, @ptrCast(self)));
            }
            pub inline fn help(self: *const T) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).Help(@as(*const IShellDispatch, @ptrCast(self)));
            }
            pub inline fn findFiles(self: *const T) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).FindFiles(@as(*const IShellDispatch, @ptrCast(self)));
            }
            pub inline fn findComputer(self: *const T) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).FindComputer(@as(*const IShellDispatch, @ptrCast(self)));
            }
            pub inline fn refreshMenu(self: *const T) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).RefreshMenu(@as(*const IShellDispatch, @ptrCast(self)));
            }
            pub inline fn controlPanelItem(self: *const T, bstr_dir_: ?BSTR) HRESULT {
                return @as(*const IShellDispatch.VTable, @ptrCast(self.vtable)).ControlPanelItem(@as(*const IShellDispatch, @ptrCast(self)), bstr_dir_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellDispatch2_Value = Guid.initString("a4c6892c-3ba9-11d2-9dea-00c04fb16162");
pub const IID_IShellDispatch2 = &IID_IShellDispatch2_Value;
pub const IShellDispatch2 = extern struct {
    pub const VTable = extern struct {
        base: IShellDispatch.VTable,
        IsRestricted: *const fn (
            self: *const IShellDispatch2,
            group: ?BSTR,
            restriction: ?BSTR,
            pl_restrict_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShellExecute: *const fn (
            self: *const IShellDispatch2,
            file: ?BSTR,
            v_args: VARIANT,
            v_dir: VARIANT,
            v_operation: VARIANT,
            v_show: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindPrinter: *const fn (
            self: *const IShellDispatch2,
            name: ?BSTR,
            location: ?BSTR,
            model: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSystemInformation: *const fn (
            self: *const IShellDispatch2,
            name: ?BSTR,
            pv: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ServiceStart: *const fn (
            self: *const IShellDispatch2,
            service_name: ?BSTR,
            persistent: VARIANT,
            p_success: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ServiceStop: *const fn (
            self: *const IShellDispatch2,
            service_name: ?BSTR,
            persistent: VARIANT,
            p_success: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsServiceRunning: *const fn (
            self: *const IShellDispatch2,
            service_name: ?BSTR,
            p_running: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanStartStopService: *const fn (
            self: *const IShellDispatch2,
            service_name: ?BSTR,
            p_can_start_stop: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowBrowserBar: *const fn (
            self: *const IShellDispatch2,
            bstr_clsid: ?BSTR,
            b_show: VARIANT,
            p_success: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellDispatch.MethodMixin(T);
            pub inline fn isRestricted(self: *const T, group_: ?BSTR, restriction_: ?BSTR, pl_restrict_value_: ?*i32) HRESULT {
                return @as(*const IShellDispatch2.VTable, @ptrCast(self.vtable)).IsRestricted(@as(*const IShellDispatch2, @ptrCast(self)), group_, restriction_, pl_restrict_value_);
            }
            pub inline fn shellExecute(self: *const T, file_: ?BSTR, v_args_: VARIANT, v_dir_: VARIANT, v_operation_: VARIANT, v_show_: VARIANT) HRESULT {
                return @as(*const IShellDispatch2.VTable, @ptrCast(self.vtable)).ShellExecute(@as(*const IShellDispatch2, @ptrCast(self)), file_, v_args_, v_dir_, v_operation_, v_show_);
            }
            pub inline fn findPrinter(self: *const T, name_: ?BSTR, location_: ?BSTR, model_: ?BSTR) HRESULT {
                return @as(*const IShellDispatch2.VTable, @ptrCast(self.vtable)).FindPrinter(@as(*const IShellDispatch2, @ptrCast(self)), name_, location_, model_);
            }
            pub inline fn getSystemInformation(self: *const T, name_: ?BSTR, pv_: ?*VARIANT) HRESULT {
                return @as(*const IShellDispatch2.VTable, @ptrCast(self.vtable)).GetSystemInformation(@as(*const IShellDispatch2, @ptrCast(self)), name_, pv_);
            }
            pub inline fn serviceStart(self: *const T, service_name_: ?BSTR, persistent_: VARIANT, p_success_: ?*VARIANT) HRESULT {
                return @as(*const IShellDispatch2.VTable, @ptrCast(self.vtable)).ServiceStart(@as(*const IShellDispatch2, @ptrCast(self)), service_name_, persistent_, p_success_);
            }
            pub inline fn serviceStop(self: *const T, service_name_: ?BSTR, persistent_: VARIANT, p_success_: ?*VARIANT) HRESULT {
                return @as(*const IShellDispatch2.VTable, @ptrCast(self.vtable)).ServiceStop(@as(*const IShellDispatch2, @ptrCast(self)), service_name_, persistent_, p_success_);
            }
            pub inline fn isServiceRunning(self: *const T, service_name_: ?BSTR, p_running_: ?*VARIANT) HRESULT {
                return @as(*const IShellDispatch2.VTable, @ptrCast(self.vtable)).IsServiceRunning(@as(*const IShellDispatch2, @ptrCast(self)), service_name_, p_running_);
            }
            pub inline fn canStartStopService(self: *const T, service_name_: ?BSTR, p_can_start_stop_: ?*VARIANT) HRESULT {
                return @as(*const IShellDispatch2.VTable, @ptrCast(self.vtable)).CanStartStopService(@as(*const IShellDispatch2, @ptrCast(self)), service_name_, p_can_start_stop_);
            }
            pub inline fn showBrowserBar(self: *const T, bstr_clsid_: ?BSTR, b_show_: VARIANT, p_success_: ?*VARIANT) HRESULT {
                return @as(*const IShellDispatch2.VTable, @ptrCast(self.vtable)).ShowBrowserBar(@as(*const IShellDispatch2, @ptrCast(self)), bstr_clsid_, b_show_, p_success_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellDispatch3_Value = Guid.initString("177160ca-bb5a-411c-841d-bd38facdeaa0");
pub const IID_IShellDispatch3 = &IID_IShellDispatch3_Value;
pub const IShellDispatch3 = extern struct {
    pub const VTable = extern struct {
        base: IShellDispatch2.VTable,
        AddToRecent: *const fn (
            self: *const IShellDispatch3,
            var_file: VARIANT,
            bstr_category: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellDispatch2.MethodMixin(T);
            pub inline fn addToRecent(self: *const T, var_file_: VARIANT, bstr_category_: ?BSTR) HRESULT {
                return @as(*const IShellDispatch3.VTable, @ptrCast(self.vtable)).AddToRecent(@as(*const IShellDispatch3, @ptrCast(self)), var_file_, bstr_category_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellDispatch4_Value = Guid.initString("efd84b2d-4bcf-4298-be25-eb542a59fbda");
pub const IID_IShellDispatch4 = &IID_IShellDispatch4_Value;
pub const IShellDispatch4 = extern struct {
    pub const VTable = extern struct {
        base: IShellDispatch3.VTable,
        WindowsSecurity: *const fn (
            self: *const IShellDispatch4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ToggleDesktop: *const fn (
            self: *const IShellDispatch4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExplorerPolicy: *const fn (
            self: *const IShellDispatch4,
            bstr_policy_name: ?BSTR,
            p_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSetting: *const fn (
            self: *const IShellDispatch4,
            l_setting: i32,
            p_result: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellDispatch3.MethodMixin(T);
            pub inline fn windowsSecurity(self: *const T) HRESULT {
                return @as(*const IShellDispatch4.VTable, @ptrCast(self.vtable)).WindowsSecurity(@as(*const IShellDispatch4, @ptrCast(self)));
            }
            pub inline fn toggleDesktop(self: *const T) HRESULT {
                return @as(*const IShellDispatch4.VTable, @ptrCast(self.vtable)).ToggleDesktop(@as(*const IShellDispatch4, @ptrCast(self)));
            }
            pub inline fn explorerPolicy(self: *const T, bstr_policy_name_: ?BSTR, p_value_: ?*VARIANT) HRESULT {
                return @as(*const IShellDispatch4.VTable, @ptrCast(self.vtable)).ExplorerPolicy(@as(*const IShellDispatch4, @ptrCast(self)), bstr_policy_name_, p_value_);
            }
            pub inline fn getSetting(self: *const T, l_setting_: i32, p_result_: ?*i16) HRESULT {
                return @as(*const IShellDispatch4.VTable, @ptrCast(self.vtable)).GetSetting(@as(*const IShellDispatch4, @ptrCast(self)), l_setting_, p_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellDispatch5_Value = Guid.initString("866738b9-6cf2-4de8-8767-f794ebe74f4e");
pub const IID_IShellDispatch5 = &IID_IShellDispatch5_Value;
pub const IShellDispatch5 = extern struct {
    pub const VTable = extern struct {
        base: IShellDispatch4.VTable,
        WindowSwitcher: *const fn (
            self: *const IShellDispatch5,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellDispatch4.MethodMixin(T);
            pub inline fn windowSwitcher(self: *const T) HRESULT {
                return @as(*const IShellDispatch5.VTable, @ptrCast(self.vtable)).WindowSwitcher(@as(*const IShellDispatch5, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellDispatch6_Value = Guid.initString("286e6f1b-7113-4355-9562-96b7e9d64c54");
pub const IID_IShellDispatch6 = &IID_IShellDispatch6_Value;
pub const IShellDispatch6 = extern struct {
    pub const VTable = extern struct {
        base: IShellDispatch5.VTable,
        SearchCommand: *const fn (
            self: *const IShellDispatch6,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellDispatch5.MethodMixin(T);
            pub inline fn searchCommand(self: *const T) HRESULT {
                return @as(*const IShellDispatch6.VTable, @ptrCast(self.vtable)).SearchCommand(@as(*const IShellDispatch6, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IFileSearchBand_Value = Guid.initString("2d91eea1-9932-11d2-be86-00a0c9a83da1");
pub const IID_IFileSearchBand = &IID_IFileSearchBand_Value;
pub const IFileSearchBand = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        SetFocus: *const fn (
            self: *const IFileSearchBand,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSearchParameters: *const fn (
            self: *const IFileSearchBand,
            pbstr_search_i_d: ?*?BSTR,
            b_nav_to_results: i16,
            pvar_scope: ?*VARIANT,
            pvar_query_file: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFileSearchBand,
            pbstr_search_i_d: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Scope: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFileSearchBand,
            pvar_scope: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_QueryFile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IFileSearchBand,
            pvar_file: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn setFocus(self: *const T) HRESULT {
                return @as(*const IFileSearchBand.VTable, @ptrCast(self.vtable)).SetFocus(@as(*const IFileSearchBand, @ptrCast(self)));
            }
            pub inline fn setSearchParameters(self: *const T, pbstr_search_i_d_: ?*?BSTR, b_nav_to_results_: i16, pvar_scope_: ?*VARIANT, pvar_query_file_: ?*VARIANT) HRESULT {
                return @as(*const IFileSearchBand.VTable, @ptrCast(self.vtable)).SetSearchParameters(@as(*const IFileSearchBand, @ptrCast(self)), pbstr_search_i_d_, b_nav_to_results_, pvar_scope_, pvar_query_file_);
            }
            pub inline fn getSearchID(self: *const T, pbstr_search_i_d_: ?*?BSTR) HRESULT {
                return @as(*const IFileSearchBand.VTable, @ptrCast(self.vtable)).get_SearchID(@as(*const IFileSearchBand, @ptrCast(self)), pbstr_search_i_d_);
            }
            pub inline fn getScope(self: *const T, pvar_scope_: ?*VARIANT) HRESULT {
                return @as(*const IFileSearchBand.VTable, @ptrCast(self.vtable)).get_Scope(@as(*const IFileSearchBand, @ptrCast(self)), pvar_scope_);
            }
            pub inline fn getQueryFile(self: *const T, pvar_file_: ?*VARIANT) HRESULT {
                return @as(*const IFileSearchBand.VTable, @ptrCast(self.vtable)).get_QueryFile(@as(*const IFileSearchBand, @ptrCast(self)), pvar_file_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWebWizardHost_Value = Guid.initString("18bcc359-4990-4bfb-b951-3c83702be5f9");
pub const IID_IWebWizardHost = &IID_IWebWizardHost_Value;
pub const IWebWizardHost = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        FinalBack: *const fn (
            self: *const IWebWizardHost,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FinalNext: *const fn (
            self: *const IWebWizardHost,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Cancel: *const fn (
            self: *const IWebWizardHost,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Caption: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebWizardHost,
            bstr_caption: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Caption: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebWizardHost,
            pbstr_caption: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Property: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebWizardHost,
            bstr_property_name: ?BSTR,
            pv_property: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Property: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWebWizardHost,
            bstr_property_name: ?BSTR,
            pv_property: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWizardButtons: *const fn (
            self: *const IWebWizardHost,
            vf_enable_back: i16,
            vf_enable_next: i16,
            vf_last_page: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHeaderText: *const fn (
            self: *const IWebWizardHost,
            bstr_header_title: ?BSTR,
            bstr_header_subtitle: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn finalBack(self: *const T) HRESULT {
                return @as(*const IWebWizardHost.VTable, @ptrCast(self.vtable)).FinalBack(@as(*const IWebWizardHost, @ptrCast(self)));
            }
            pub inline fn finalNext(self: *const T) HRESULT {
                return @as(*const IWebWizardHost.VTable, @ptrCast(self.vtable)).FinalNext(@as(*const IWebWizardHost, @ptrCast(self)));
            }
            pub inline fn cancel(self: *const T) HRESULT {
                return @as(*const IWebWizardHost.VTable, @ptrCast(self.vtable)).Cancel(@as(*const IWebWizardHost, @ptrCast(self)));
            }
            pub inline fn putCaption(self: *const T, bstr_caption_: ?BSTR) HRESULT {
                return @as(*const IWebWizardHost.VTable, @ptrCast(self.vtable)).put_Caption(@as(*const IWebWizardHost, @ptrCast(self)), bstr_caption_);
            }
            pub inline fn getCaption(self: *const T, pbstr_caption_: ?*?BSTR) HRESULT {
                return @as(*const IWebWizardHost.VTable, @ptrCast(self.vtable)).get_Caption(@as(*const IWebWizardHost, @ptrCast(self)), pbstr_caption_);
            }
            pub inline fn putProperty(self: *const T, bstr_property_name_: ?BSTR, pv_property_: ?*VARIANT) HRESULT {
                return @as(*const IWebWizardHost.VTable, @ptrCast(self.vtable)).put_Property(@as(*const IWebWizardHost, @ptrCast(self)), bstr_property_name_, pv_property_);
            }
            pub inline fn getProperty(self: *const T, bstr_property_name_: ?BSTR, pv_property_: ?*VARIANT) HRESULT {
                return @as(*const IWebWizardHost.VTable, @ptrCast(self.vtable)).get_Property(@as(*const IWebWizardHost, @ptrCast(self)), bstr_property_name_, pv_property_);
            }
            pub inline fn setWizardButtons(self: *const T, vf_enable_back_: i16, vf_enable_next_: i16, vf_last_page_: i16) HRESULT {
                return @as(*const IWebWizardHost.VTable, @ptrCast(self.vtable)).SetWizardButtons(@as(*const IWebWizardHost, @ptrCast(self)), vf_enable_back_, vf_enable_next_, vf_last_page_);
            }
            pub inline fn setHeaderText(self: *const T, bstr_header_title_: ?BSTR, bstr_header_subtitle_: ?BSTR) HRESULT {
                return @as(*const IWebWizardHost.VTable, @ptrCast(self.vtable)).SetHeaderText(@as(*const IWebWizardHost, @ptrCast(self)), bstr_header_title_, bstr_header_subtitle_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWebWizardHost2_Value = Guid.initString("f9c013dc-3c23-4041-8e39-cfb402f7ea59");
pub const IID_IWebWizardHost2 = &IID_IWebWizardHost2_Value;
pub const IWebWizardHost2 = extern struct {
    pub const VTable = extern struct {
        base: IWebWizardHost.VTable,
        SignString: *const fn (
            self: *const IWebWizardHost2,
            value: ?BSTR,
            signed_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWebWizardHost.MethodMixin(T);
            pub inline fn signString(self: *const T, value_: ?BSTR, signed_value_: ?*?BSTR) HRESULT {
                return @as(*const IWebWizardHost2.VTable, @ptrCast(self.vtable)).SignString(@as(*const IWebWizardHost2, @ptrCast(self)), value_, signed_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_INewWDEvents_Value = Guid.initString("0751c551-7568-41c9-8e5b-e22e38919236");
pub const IID_INewWDEvents = &IID_INewWDEvents_Value;
pub const INewWDEvents = extern struct {
    pub const VTable = extern struct {
        base: IWebWizardHost.VTable,
        PassportAuthenticate: *const fn (
            self: *const INewWDEvents,
            bstr_sign_in_url: ?BSTR,
            pvf_authenitcated: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWebWizardHost.MethodMixin(T);
            pub inline fn passportAuthenticate(self: *const T, bstr_sign_in_url_: ?BSTR, pvf_authenitcated_: ?*i16) HRESULT {
                return @as(*const INewWDEvents.VTable, @ptrCast(self.vtable)).PassportAuthenticate(@as(*const INewWDEvents, @ptrCast(self)), bstr_sign_in_url_, pvf_authenitcated_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IAutoComplete_Value = Guid.initString("00bb2762-6a77-11d0-a535-00c04fd7d062");
pub const IID_IAutoComplete = &IID_IAutoComplete_Value;
pub const IAutoComplete = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Init: *const fn (
            self: *const IAutoComplete,
            hwnd_edit: ?HWND,
            punk_a_c_l: ?*IUnknown,
            pwsz_reg_key_path: ?[*:0]const u16,
            pwsz_quick_complete: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: *const fn (
            self: *const IAutoComplete,
            f_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn init(self: *const T, hwnd_edit_: ?HWND, punk_a_c_l_: ?*IUnknown, pwsz_reg_key_path_: ?[*:0]const u16, pwsz_quick_complete_: ?[*:0]const u16) HRESULT {
                return @as(*const IAutoComplete.VTable, @ptrCast(self.vtable)).Init(@as(*const IAutoComplete, @ptrCast(self)), hwnd_edit_, punk_a_c_l_, pwsz_reg_key_path_, pwsz_quick_complete_);
            }
            pub inline fn enable(self: *const T, f_enable_: BOOL) HRESULT {
                return @as(*const IAutoComplete.VTable, @ptrCast(self.vtable)).Enable(@as(*const IAutoComplete, @ptrCast(self)), f_enable_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const AUTOCOMPLETEOPTIONS = enum(i32) {
    NONE = 0,
    AUTOSUGGEST = 1,
    AUTOAPPEND = 2,
    SEARCH = 4,
    FILTERPREFIXES = 8,
    USETAB = 16,
    UPDOWNKEYDROPSLIST = 32,
    RTLREADING = 64,
    WORD_FILTER = 128,
    NOPREFIXFILTERING = 256,
};
pub const ACO_NONE = AUTOCOMPLETEOPTIONS.NONE;
pub const ACO_AUTOSUGGEST = AUTOCOMPLETEOPTIONS.AUTOSUGGEST;
pub const ACO_AUTOAPPEND = AUTOCOMPLETEOPTIONS.AUTOAPPEND;
pub const ACO_SEARCH = AUTOCOMPLETEOPTIONS.SEARCH;
pub const ACO_FILTERPREFIXES = AUTOCOMPLETEOPTIONS.FILTERPREFIXES;
pub const ACO_USETAB = AUTOCOMPLETEOPTIONS.USETAB;
pub const ACO_UPDOWNKEYDROPSLIST = AUTOCOMPLETEOPTIONS.UPDOWNKEYDROPSLIST;
pub const ACO_RTLREADING = AUTOCOMPLETEOPTIONS.RTLREADING;
pub const ACO_WORD_FILTER = AUTOCOMPLETEOPTIONS.WORD_FILTER;
pub const ACO_NOPREFIXFILTERING = AUTOCOMPLETEOPTIONS.NOPREFIXFILTERING;

// TODO: this type is limited to platform 'windows5.0'
const IID_IAutoComplete2_Value = Guid.initString("eac04bc0-3791-11d2-bb95-0060977b464c");
pub const IID_IAutoComplete2 = &IID_IAutoComplete2_Value;
pub const IAutoComplete2 = extern struct {
    pub const VTable = extern struct {
        base: IAutoComplete.VTable,
        SetOptions: *const fn (
            self: *const IAutoComplete2,
            dw_flag: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: *const fn (
            self: *const IAutoComplete2,
            pdw_flag: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IAutoComplete.MethodMixin(T);
            pub inline fn setOptions(self: *const T, dw_flag_: u32) HRESULT {
                return @as(*const IAutoComplete2.VTable, @ptrCast(self.vtable)).SetOptions(@as(*const IAutoComplete2, @ptrCast(self)), dw_flag_);
            }
            pub inline fn getOptions(self: *const T, pdw_flag_: ?*u32) HRESULT {
                return @as(*const IAutoComplete2.VTable, @ptrCast(self.vtable)).GetOptions(@as(*const IAutoComplete2, @ptrCast(self)), pdw_flag_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const ACENUMOPTION = enum(i32) {
    NONE = 0,
    MOSTRECENTFIRST = 1,
    FIRSTUNUSED = 65536,
};
pub const ACEO_NONE = ACENUMOPTION.NONE;
pub const ACEO_MOSTRECENTFIRST = ACENUMOPTION.MOSTRECENTFIRST;
pub const ACEO_FIRSTUNUSED = ACENUMOPTION.FIRSTUNUSED;

const IID_IEnumACString_Value = Guid.initString("8e74c210-cf9d-4eaf-a403-7356428f0a5a");
pub const IID_IEnumACString = &IID_IEnumACString_Value;
pub const IEnumACString = extern struct {
    pub const VTable = extern struct {
        base: IEnumString.VTable,
        NextItem: *const fn (
            self: *const IEnumACString,
            psz_url: ?[*:0]u16,
            cch_max: u32,
            pul_sort_index: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnumOptions: *const fn (
            self: *const IEnumACString,
            dw_options: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnumOptions: *const fn (
            self: *const IEnumACString,
            pdw_options: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IEnumString.MethodMixin(T);
            pub inline fn nextItem(self: *const T, psz_url_: ?[*:0]u16, cch_max_: u32, pul_sort_index_: ?*u32) HRESULT {
                return @as(*const IEnumACString.VTable, @ptrCast(self.vtable)).NextItem(@as(*const IEnumACString, @ptrCast(self)), psz_url_, cch_max_, pul_sort_index_);
            }
            pub inline fn setEnumOptions(self: *const T, dw_options_: u32) HRESULT {
                return @as(*const IEnumACString.VTable, @ptrCast(self.vtable)).SetEnumOptions(@as(*const IEnumACString, @ptrCast(self)), dw_options_);
            }
            pub inline fn getEnumOptions(self: *const T, pdw_options_: ?*u32) HRESULT {
                return @as(*const IEnumACString.VTable, @ptrCast(self.vtable)).GetEnumOptions(@as(*const IEnumACString, @ptrCast(self)), pdw_options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IDataObjectAsyncCapability_Value = Guid.initString("3d8b0590-f691-11d2-8ea9-006097df5bd4");
pub const IID_IDataObjectAsyncCapability = &IID_IDataObjectAsyncCapability_Value;
pub const IDataObjectAsyncCapability = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAsyncMode: *const fn (
            self: *const IDataObjectAsyncCapability,
            f_do_op_async: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAsyncMode: *const fn (
            self: *const IDataObjectAsyncCapability,
            pf_is_op_async: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartOperation: *const fn (
            self: *const IDataObjectAsyncCapability,
            pbc_reserved: ?*IBindCtx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InOperation: *const fn (
            self: *const IDataObjectAsyncCapability,
            pf_in_async_op: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndOperation: *const fn (
            self: *const IDataObjectAsyncCapability,
            h_result: HRESULT,
            pbc_reserved: ?*IBindCtx,
            dw_effects: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAsyncMode(self: *const T, f_do_op_async_: BOOL) HRESULT {
                return @as(*const IDataObjectAsyncCapability.VTable, @ptrCast(self.vtable)).SetAsyncMode(@as(*const IDataObjectAsyncCapability, @ptrCast(self)), f_do_op_async_);
            }
            pub inline fn getAsyncMode(self: *const T, pf_is_op_async_: ?*BOOL) HRESULT {
                return @as(*const IDataObjectAsyncCapability.VTable, @ptrCast(self.vtable)).GetAsyncMode(@as(*const IDataObjectAsyncCapability, @ptrCast(self)), pf_is_op_async_);
            }
            pub inline fn startOperation(self: *const T, pbc_reserved_: ?*IBindCtx) HRESULT {
                return @as(*const IDataObjectAsyncCapability.VTable, @ptrCast(self.vtable)).StartOperation(@as(*const IDataObjectAsyncCapability, @ptrCast(self)), pbc_reserved_);
            }
            pub inline fn inOperation(self: *const T, pf_in_async_op_: ?*BOOL) HRESULT {
                return @as(*const IDataObjectAsyncCapability.VTable, @ptrCast(self.vtable)).InOperation(@as(*const IDataObjectAsyncCapability, @ptrCast(self)), pf_in_async_op_);
            }
            pub inline fn endOperation(self: *const T, h_result_: HRESULT, pbc_reserved_: ?*IBindCtx, dw_effects_: u32) HRESULT {
                return @as(*const IDataObjectAsyncCapability.VTable, @ptrCast(self.vtable)).EndOperation(@as(*const IDataObjectAsyncCapability, @ptrCast(self)), h_result_, pbc_reserved_, dw_effects_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IExtractIconA_Value = Guid.initString("000214eb-0000-0000-c000-000000000046");
pub const IID_IExtractIconA = &IID_IExtractIconA_Value;
pub const IExtractIconA = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIconLocation: *const fn (
            self: *const IExtractIconA,
            u_flags: u32,
            psz_icon_file: [*:0]u8,
            cch_max: u32,
            pi_index: ?*i32,
            pw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Extract: *const fn (
            self: *const IExtractIconA,
            psz_file: ?[*:0]const u8,
            n_icon_index: u32,
            phicon_large: ?*?HICON,
            phicon_small: ?*?HICON,
            n_icon_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getIconLocation(self: *const T, u_flags_: u32, psz_icon_file_: [*:0]u8, cch_max_: u32, pi_index_: ?*i32, pw_flags_: ?*u32) HRESULT {
                return @as(*const IExtractIconA.VTable, @ptrCast(self.vtable)).GetIconLocation(@as(*const IExtractIconA, @ptrCast(self)), u_flags_, psz_icon_file_, cch_max_, pi_index_, pw_flags_);
            }
            pub inline fn extract(self: *const T, psz_file_: ?[*:0]const u8, n_icon_index_: u32, phicon_large_: ?*?HICON, phicon_small_: ?*?HICON, n_icon_size_: u32) HRESULT {
                return @as(*const IExtractIconA.VTable, @ptrCast(self.vtable)).Extract(@as(*const IExtractIconA, @ptrCast(self)), psz_file_, n_icon_index_, phicon_large_, phicon_small_, n_icon_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IExtractIconW_Value = Guid.initString("000214fa-0000-0000-c000-000000000046");
pub const IID_IExtractIconW = &IID_IExtractIconW_Value;
pub const IExtractIconW = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIconLocation: *const fn (
            self: *const IExtractIconW,
            u_flags: u32,
            psz_icon_file: [*:0]u16,
            cch_max: u32,
            pi_index: ?*i32,
            pw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Extract: *const fn (
            self: *const IExtractIconW,
            psz_file: ?[*:0]const u16,
            n_icon_index: u32,
            phicon_large: ?*?HICON,
            phicon_small: ?*?HICON,
            n_icon_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getIconLocation(self: *const T, u_flags_: u32, psz_icon_file_: [*:0]u16, cch_max_: u32, pi_index_: ?*i32, pw_flags_: ?*u32) HRESULT {
                return @as(*const IExtractIconW.VTable, @ptrCast(self.vtable)).GetIconLocation(@as(*const IExtractIconW, @ptrCast(self)), u_flags_, psz_icon_file_, cch_max_, pi_index_, pw_flags_);
            }
            pub inline fn extract(self: *const T, psz_file_: ?[*:0]const u16, n_icon_index_: u32, phicon_large_: ?*?HICON, phicon_small_: ?*?HICON, n_icon_size_: u32) HRESULT {
                return @as(*const IExtractIconW.VTable, @ptrCast(self.vtable)).Extract(@as(*const IExtractIconW, @ptrCast(self)), psz_file_, n_icon_index_, phicon_large_, phicon_small_, n_icon_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellIconOverlayManager_Value = Guid.initString("f10b5e34-dd3b-42a7-aa7d-2f4ec54bb09b");
pub const IID_IShellIconOverlayManager = &IID_IShellIconOverlayManager_Value;
pub const IShellIconOverlayManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFileOverlayInfo: *const fn (
            self: *const IShellIconOverlayManager,
            pwsz_path: ?[*:0]const u16,
            dw_attrib: u32,
            p_index: ?*i32,
            dwflags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReservedOverlayInfo: *const fn (
            self: *const IShellIconOverlayManager,
            pwsz_path: ?[*:0]const u16,
            dw_attrib: u32,
            p_index: ?*i32,
            dwflags: u32,
            i_reserved_i_d: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshOverlayImages: *const fn (
            self: *const IShellIconOverlayManager,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadNonloadedOverlayIdentifiers: *const fn (
            self: *const IShellIconOverlayManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OverlayIndexFromImageIndex: *const fn (
            self: *const IShellIconOverlayManager,
            i_image: i32,
            pi_index: ?*i32,
            f_add: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFileOverlayInfo(self: *const T, pwsz_path_: ?[*:0]const u16, dw_attrib_: u32, p_index_: ?*i32, dwflags_: u32) HRESULT {
                return @as(*const IShellIconOverlayManager.VTable, @ptrCast(self.vtable)).GetFileOverlayInfo(@as(*const IShellIconOverlayManager, @ptrCast(self)), pwsz_path_, dw_attrib_, p_index_, dwflags_);
            }
            pub inline fn getReservedOverlayInfo(self: *const T, pwsz_path_: ?[*:0]const u16, dw_attrib_: u32, p_index_: ?*i32, dwflags_: u32, i_reserved_i_d_: i32) HRESULT {
                return @as(*const IShellIconOverlayManager.VTable, @ptrCast(self.vtable)).GetReservedOverlayInfo(@as(*const IShellIconOverlayManager, @ptrCast(self)), pwsz_path_, dw_attrib_, p_index_, dwflags_, i_reserved_i_d_);
            }
            pub inline fn refreshOverlayImages(self: *const T, dw_flags_: u32) HRESULT {
                return @as(*const IShellIconOverlayManager.VTable, @ptrCast(self.vtable)).RefreshOverlayImages(@as(*const IShellIconOverlayManager, @ptrCast(self)), dw_flags_);
            }
            pub inline fn loadNonloadedOverlayIdentifiers(self: *const T) HRESULT {
                return @as(*const IShellIconOverlayManager.VTable, @ptrCast(self.vtable)).LoadNonloadedOverlayIdentifiers(@as(*const IShellIconOverlayManager, @ptrCast(self)));
            }
            pub inline fn overlayIndexFromImageIndex(self: *const T, i_image_: i32, pi_index_: ?*i32, f_add_: BOOL) HRESULT {
                return @as(*const IShellIconOverlayManager.VTable, @ptrCast(self.vtable)).OverlayIndexFromImageIndex(@as(*const IShellIconOverlayManager, @ptrCast(self)), i_image_, pi_index_, f_add_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IShellIconOverlay_Value = Guid.initString("7d688a70-c613-11d0-999b-00c04fd655e1");
pub const IID_IShellIconOverlay = &IID_IShellIconOverlay_Value;
pub const IShellIconOverlay = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOverlayIndex: *const fn (
            self: *const IShellIconOverlay,
            pidl: ?*ITEMIDLIST,
            p_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOverlayIconIndex: *const fn (
            self: *const IShellIconOverlay,
            pidl: ?*ITEMIDLIST,
            p_icon_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getOverlayIndex(self: *const T, pidl_: ?*ITEMIDLIST, p_index_: ?*i32) HRESULT {
                return @as(*const IShellIconOverlay.VTable, @ptrCast(self.vtable)).GetOverlayIndex(@as(*const IShellIconOverlay, @ptrCast(self)), pidl_, p_index_);
            }
            pub inline fn getOverlayIconIndex(self: *const T, pidl_: ?*ITEMIDLIST, p_icon_index_: ?*i32) HRESULT {
                return @as(*const IShellIconOverlay.VTable, @ptrCast(self.vtable)).GetOverlayIconIndex(@as(*const IShellIconOverlay, @ptrCast(self)), pidl_, p_icon_index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SHELL_LINK_DATA_FLAGS = enum(i32) {
    DEFAULT = 0,
    HAS_ID_LIST = 1,
    HAS_LINK_INFO = 2,
    HAS_NAME = 4,
    HAS_RELPATH = 8,
    HAS_WORKINGDIR = 16,
    HAS_ARGS = 32,
    HAS_ICONLOCATION = 64,
    UNICODE = 128,
    FORCE_NO_LINKINFO = 256,
    HAS_EXP_SZ = 512,
    RUN_IN_SEPARATE = 1024,
    HAS_DARWINID = 4096,
    RUNAS_USER = 8192,
    HAS_EXP_ICON_SZ = 16384,
    NO_PIDL_ALIAS = 32768,
    FORCE_UNCNAME = 65536,
    RUN_WITH_SHIMLAYER = 131072,
    FORCE_NO_LINKTRACK = 262144,
    ENABLE_TARGET_METADATA = 524288,
    DISABLE_LINK_PATH_TRACKING = 1048576,
    DISABLE_KNOWNFOLDER_RELATIVE_TRACKING = 2097152,
    NO_KF_ALIAS = 4194304,
    ALLOW_LINK_TO_LINK = 8388608,
    UNALIAS_ON_SAVE = 16777216,
    PREFER_ENVIRONMENT_PATH = 33554432,
    KEEP_LOCAL_IDLIST_FOR_UNC_TARGET = 67108864,
    PERSIST_VOLUME_ID_RELATIVE = 134217728,
    VALID = 268433407,
    RESERVED = -2147483648,
};
pub const SLDF_DEFAULT = SHELL_LINK_DATA_FLAGS.DEFAULT;
pub const SLDF_HAS_ID_LIST = SHELL_LINK_DATA_FLAGS.HAS_ID_LIST;
pub const SLDF_HAS_LINK_INFO = SHELL_LINK_DATA_FLAGS.HAS_LINK_INFO;
pub const SLDF_HAS_NAME = SHELL_LINK_DATA_FLAGS.HAS_NAME;
pub const SLDF_HAS_RELPATH = SHELL_LINK_DATA_FLAGS.HAS_RELPATH;
pub const SLDF_HAS_WORKINGDIR = SHELL_LINK_DATA_FLAGS.HAS_WORKINGDIR;
pub const SLDF_HAS_ARGS = SHELL_LINK_DATA_FLAGS.HAS_ARGS;
pub const SLDF_HAS_ICONLOCATION = SHELL_LINK_DATA_FLAGS.HAS_ICONLOCATION;
pub const SLDF_UNICODE = SHELL_LINK_DATA_FLAGS.UNICODE;
pub const SLDF_FORCE_NO_LINKINFO = SHELL_LINK_DATA_FLAGS.FORCE_NO_LINKINFO;
pub const SLDF_HAS_EXP_SZ = SHELL_LINK_DATA_FLAGS.HAS_EXP_SZ;
pub const SLDF_RUN_IN_SEPARATE = SHELL_LINK_DATA_FLAGS.RUN_IN_SEPARATE;
pub const SLDF_HAS_DARWINID = SHELL_LINK_DATA_FLAGS.HAS_DARWINID;
pub const SLDF_RUNAS_USER = SHELL_LINK_DATA_FLAGS.RUNAS_USER;
pub const SLDF_HAS_EXP_ICON_SZ = SHELL_LINK_DATA_FLAGS.HAS_EXP_ICON_SZ;
pub const SLDF_NO_PIDL_ALIAS = SHELL_LINK_DATA_FLAGS.NO_PIDL_ALIAS;
pub const SLDF_FORCE_UNCNAME = SHELL_LINK_DATA_FLAGS.FORCE_UNCNAME;
pub const SLDF_RUN_WITH_SHIMLAYER = SHELL_LINK_DATA_FLAGS.RUN_WITH_SHIMLAYER;
pub const SLDF_FORCE_NO_LINKTRACK = SHELL_LINK_DATA_FLAGS.FORCE_NO_LINKTRACK;
pub const SLDF_ENABLE_TARGET_METADATA = SHELL_LINK_DATA_FLAGS.ENABLE_TARGET_METADATA;
pub const SLDF_DISABLE_LINK_PATH_TRACKING = SHELL_LINK_DATA_FLAGS.DISABLE_LINK_PATH_TRACKING;
pub const SLDF_DISABLE_KNOWNFOLDER_RELATIVE_TRACKING = SHELL_LINK_DATA_FLAGS.DISABLE_KNOWNFOLDER_RELATIVE_TRACKING;
pub const SLDF_NO_KF_ALIAS = SHELL_LINK_DATA_FLAGS.NO_KF_ALIAS;
pub const SLDF_ALLOW_LINK_TO_LINK = SHELL_LINK_DATA_FLAGS.ALLOW_LINK_TO_LINK;
pub const SLDF_UNALIAS_ON_SAVE = SHELL_LINK_DATA_FLAGS.UNALIAS_ON_SAVE;
pub const SLDF_PREFER_ENVIRONMENT_PATH = SHELL_LINK_DATA_FLAGS.PREFER_ENVIRONMENT_PATH;
pub const SLDF_KEEP_LOCAL_IDLIST_FOR_UNC_TARGET = SHELL_LINK_DATA_FLAGS.KEEP_LOCAL_IDLIST_FOR_UNC_TARGET;
pub const SLDF_PERSIST_VOLUME_ID_RELATIVE = SHELL_LINK_DATA_FLAGS.PERSIST_VOLUME_ID_RELATIVE;
pub const SLDF_VALID = SHELL_LINK_DATA_FLAGS.VALID;
pub const SLDF_RESERVED = SHELL_LINK_DATA_FLAGS.RESERVED;

pub const DATABLOCK_HEADER = extern struct {
    cbSize: u32 align(1),
    dwSignature: u32 align(1),
};

pub const NT_CONSOLE_PROPS = extern struct {
    dbh: DATABLOCK_HEADER align(1),
    wFillAttribute: u16 align(1),
    wPopupFillAttribute: u16 align(1),
    dwScreenBufferSize: COORD align(1),
    dwWindowSize: COORD align(1),
    dwWindowOrigin: COORD align(1),
    nFont: u32 align(1),
    nInputBufferSize: u32 align(1),
    dwFontSize: COORD align(1),
    uFontFamily: u32 align(1),
    uFontWeight: u32 align(1),
    FaceName: [32]u16 align(1),
    uCursorSize: u32 align(1),
    bFullScreen: BOOL align(1),
    bQuickEdit: BOOL align(1),
    bInsertMode: BOOL align(1),
    bAutoPosition: BOOL align(1),
    uHistoryBufferSize: u32 align(1),
    uNumberOfHistoryBuffers: u32 align(1),
    bHistoryNoDup: BOOL align(1),
    ColorTable: [16]u32 align(1),
};

pub const NT_FE_CONSOLE_PROPS = extern struct {
    dbh: DATABLOCK_HEADER align(1),
    uCodePage: u32 align(1),
};

pub const EXP_DARWIN_LINK = extern struct {
    dbh: DATABLOCK_HEADER align(1),
    szDarwinID: [260]CHAR align(1),
    szwDarwinID: [260]u16 align(1),
};

pub const EXP_SPECIAL_FOLDER = extern struct {
    cbSize: u32 align(1),
    dwSignature: u32 align(1),
    idSpecialFolder: u32 align(1),
    cbOffset: u32 align(1),
};

pub const EXP_SZ_LINK = extern struct {
    cbSize: u32 align(1),
    dwSignature: u32 align(1),
    szTarget: [260]CHAR align(1),
    swzTarget: [260]u16 align(1),
};

pub const EXP_PROPERTYSTORAGE = extern struct {
    cbSize: u32 align(1),
    dwSignature: u32 align(1),
    abPropertyStorage: [1]u8 align(1),
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IURLSearchHook_Value = Guid.initString("ac60f6a0-0fd9-11d0-99cb-00c04fd64497");
pub const IID_IURLSearchHook = &IID_IURLSearchHook_Value;
pub const IURLSearchHook = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Translate: *const fn (
            self: *const IURLSearchHook,
            pwsz_search_u_r_l: [*:0]u16,
            cch_buffer_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn translate(self: *const T, pwsz_search_u_r_l_: [*:0]u16, cch_buffer_size_: u32) HRESULT {
                return @as(*const IURLSearchHook.VTable, @ptrCast(self.vtable)).Translate(@as(*const IURLSearchHook, @ptrCast(self)), pwsz_search_u_r_l_, cch_buffer_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_ISearchContext_Value = Guid.initString("09f656a2-41af-480c-88f7-16cc0d164615");
pub const IID_ISearchContext = &IID_ISearchContext_Value;
pub const ISearchContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSearchUrl: *const fn (
            self: *const ISearchContext,
            pbstr_search_url: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSearchText: *const fn (
            self: *const ISearchContext,
            pbstr_search_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSearchStyle: *const fn (
            self: *const ISearchContext,
            pdw_search_style: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSearchUrl(self: *const T, pbstr_search_url_: ?*?BSTR) HRESULT {
                return @as(*const ISearchContext.VTable, @ptrCast(self.vtable)).GetSearchUrl(@as(*const ISearchContext, @ptrCast(self)), pbstr_search_url_);
            }
            pub inline fn getSearchText(self: *const T, pbstr_search_text_: ?*?BSTR) HRESULT {
                return @as(*const ISearchContext.VTable, @ptrCast(self.vtable)).GetSearchText(@as(*const ISearchContext, @ptrCast(self)), pbstr_search_text_);
            }
            pub inline fn getSearchStyle(self: *const T, pdw_search_style_: ?*u32) HRESULT {
                return @as(*const ISearchContext.VTable, @ptrCast(self.vtable)).GetSearchStyle(@as(*const ISearchContext, @ptrCast(self)), pdw_search_style_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IURLSearchHook2_Value = Guid.initString("5ee44da4-6d32-46e3-86bc-07540dedd0e0");
pub const IID_IURLSearchHook2 = &IID_IURLSearchHook2_Value;
pub const IURLSearchHook2 = extern struct {
    pub const VTable = extern struct {
        base: IURLSearchHook.VTable,
        TranslateWithSearchContext: *const fn (
            self: *const IURLSearchHook2,
            pwsz_search_u_r_l: [*:0]u16,
            cch_buffer_size: u32,
            p_search_context: ?*ISearchContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IURLSearchHook.MethodMixin(T);
            pub inline fn translateWithSearchContext(self: *const T, pwsz_search_u_r_l_: [*:0]u16, cch_buffer_size_: u32, p_search_context_: ?*ISearchContext) HRESULT {
                return @as(*const IURLSearchHook2.VTable, @ptrCast(self.vtable)).TranslateWithSearchContext(@as(*const IURLSearchHook2, @ptrCast(self)), pwsz_search_u_r_l_, cch_buffer_size_, p_search_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SHGFP_TYPE = enum(i32) {
    CURRENT = 0,
    DEFAULT = 1,
};
pub const SHGFP_TYPE_CURRENT = SHGFP_TYPE.CURRENT;
pub const SHGFP_TYPE_DEFAULT = SHGFP_TYPE.DEFAULT;

pub const KNOWN_FOLDER_FLAG = enum(i32) {
    DEFAULT = 0,
    FORCE_APP_DATA_REDIRECTION = 524288,
    RETURN_FILTER_REDIRECTION_TARGET = 262144,
    FORCE_PACKAGE_REDIRECTION = 131072,
    NO_PACKAGE_REDIRECTION = 65536,
    // FORCE_APPCONTAINER_REDIRECTION = 131072, this enum value conflicts with FORCE_PACKAGE_REDIRECTION
    // NO_APPCONTAINER_REDIRECTION = 65536, this enum value conflicts with NO_PACKAGE_REDIRECTION
    CREATE = 32768,
    DONT_VERIFY = 16384,
    DONT_UNEXPAND = 8192,
    NO_ALIAS = 4096,
    INIT = 2048,
    DEFAULT_PATH = 1024,
    NOT_PARENT_RELATIVE = 512,
    SIMPLE_IDLIST = 256,
    ALIAS_ONLY = -2147483648,
};
pub const KF_FLAG_DEFAULT = KNOWN_FOLDER_FLAG.DEFAULT;
pub const KF_FLAG_FORCE_APP_DATA_REDIRECTION = KNOWN_FOLDER_FLAG.FORCE_APP_DATA_REDIRECTION;
pub const KF_FLAG_RETURN_FILTER_REDIRECTION_TARGET = KNOWN_FOLDER_FLAG.RETURN_FILTER_REDIRECTION_TARGET;
pub const KF_FLAG_FORCE_PACKAGE_REDIRECTION = KNOWN_FOLDER_FLAG.FORCE_PACKAGE_REDIRECTION;
pub const KF_FLAG_NO_PACKAGE_REDIRECTION = KNOWN_FOLDER_FLAG.NO_PACKAGE_REDIRECTION;
pub const KF_FLAG_FORCE_APPCONTAINER_REDIRECTION = KNOWN_FOLDER_FLAG.FORCE_PACKAGE_REDIRECTION;
pub const KF_FLAG_NO_APPCONTAINER_REDIRECTION = KNOWN_FOLDER_FLAG.NO_PACKAGE_REDIRECTION;
pub const KF_FLAG_CREATE = KNOWN_FOLDER_FLAG.CREATE;
pub const KF_FLAG_DONT_VERIFY = KNOWN_FOLDER_FLAG.DONT_VERIFY;
pub const KF_FLAG_DONT_UNEXPAND = KNOWN_FOLDER_FLAG.DONT_UNEXPAND;
pub const KF_FLAG_NO_ALIAS = KNOWN_FOLDER_FLAG.NO_ALIAS;
pub const KF_FLAG_INIT = KNOWN_FOLDER_FLAG.INIT;
pub const KF_FLAG_DEFAULT_PATH = KNOWN_FOLDER_FLAG.DEFAULT_PATH;
pub const KF_FLAG_NOT_PARENT_RELATIVE = KNOWN_FOLDER_FLAG.NOT_PARENT_RELATIVE;
pub const KF_FLAG_SIMPLE_IDLIST = KNOWN_FOLDER_FLAG.SIMPLE_IDLIST;
pub const KF_FLAG_ALIAS_ONLY = KNOWN_FOLDER_FLAG.ALIAS_ONLY;

pub const SHFOLDERCUSTOMSETTINGS = extern struct {
    dwSize: u32,
    dwMask: u32,
    pvid: ?*Guid,
    pszWebViewTemplate: ?PWSTR,
    cchWebViewTemplate: u32,
    pszWebViewTemplateVersion: ?PWSTR,
    pszInfoTip: ?PWSTR,
    cchInfoTip: u32,
    pclsid: ?*Guid,
    dwFlags: u32,
    pszIconFile: ?PWSTR,
    cchIconFile: u32,
    iIconIndex: i32,
    pszLogo: ?PWSTR,
    cchLogo: u32,
};

pub const BFFCALLBACK = *const fn (
    hwnd: ?HWND,
    u_msg: u32,
    l_param: LPARAM,
    lp_data: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const BROWSEINFOA = extern struct {
    hwndOwner: ?HWND,
    pidlRoot: ?*ITEMIDLIST,
    pszDisplayName: ?PSTR,
    lpszTitle: ?[*:0]const u8,
    ulFlags: u32,
    lpfn: ?BFFCALLBACK,
    lParam: LPARAM,
    iImage: i32,
};

pub const BROWSEINFOW = extern struct {
    hwndOwner: ?HWND,
    pidlRoot: ?*ITEMIDLIST,
    pszDisplayName: ?PWSTR,
    lpszTitle: ?[*:0]const u16,
    ulFlags: u32,
    lpfn: ?BFFCALLBACK,
    lParam: LPARAM,
    iImage: i32,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IShellDetails_Value = Guid.initString("000214ec-0000-0000-c000-000000000046");
pub const IID_IShellDetails = &IID_IShellDetails_Value;
pub const IShellDetails = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDetailsOf: *const fn (
            self: *const IShellDetails,
            pidl: ?*ITEMIDLIST,
            i_column: u32,
            p_details: ?*SHELLDETAILS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ColumnClick: *const fn (
            self: *const IShellDetails,
            i_column: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDetailsOf(self: *const T, pidl_: ?*ITEMIDLIST, i_column_: u32, p_details_: ?*SHELLDETAILS) HRESULT {
                return @as(*const IShellDetails.VTable, @ptrCast(self.vtable)).GetDetailsOf(@as(*const IShellDetails, @ptrCast(self)), pidl_, i_column_, p_details_);
            }
            pub inline fn columnClick(self: *const T, i_column_: u32) HRESULT {
                return @as(*const IShellDetails.VTable, @ptrCast(self.vtable)).ColumnClick(@as(*const IShellDetails, @ptrCast(self)), i_column_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IObjMgr_Value = Guid.initString("00bb2761-6a77-11d0-a535-00c04fd7d062");
pub const IID_IObjMgr = &IID_IObjMgr_Value;
pub const IObjMgr = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Append: *const fn (
            self: *const IObjMgr,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IObjMgr,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn append(self: *const T, punk_: ?*IUnknown) HRESULT {
                return @as(*const IObjMgr.VTable, @ptrCast(self.vtable)).Append(@as(*const IObjMgr, @ptrCast(self)), punk_);
            }
            pub inline fn remove(self: *const T, punk_: ?*IUnknown) HRESULT {
                return @as(*const IObjMgr.VTable, @ptrCast(self.vtable)).Remove(@as(*const IObjMgr, @ptrCast(self)), punk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IACList_Value = Guid.initString("77a130b0-94fd-11d0-a544-00c04fd7d062");
pub const IID_IACList = &IID_IACList_Value;
pub const IACList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Expand: *const fn (
            self: *const IACList,
            psz_expand: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn expand(self: *const T, psz_expand_: ?[*:0]const u16) HRESULT {
                return @as(*const IACList.VTable, @ptrCast(self.vtable)).Expand(@as(*const IACList, @ptrCast(self)), psz_expand_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const AUTOCOMPLETELISTOPTIONS = enum(i32) {
    NONE = 0,
    CURRENTDIR = 1,
    MYCOMPUTER = 2,
    DESKTOP = 4,
    FAVORITES = 8,
    FILESYSONLY = 16,
    FILESYSDIRS = 32,
    VIRTUALNAMESPACE = 64,
};
pub const ACLO_NONE = AUTOCOMPLETELISTOPTIONS.NONE;
pub const ACLO_CURRENTDIR = AUTOCOMPLETELISTOPTIONS.CURRENTDIR;
pub const ACLO_MYCOMPUTER = AUTOCOMPLETELISTOPTIONS.MYCOMPUTER;
pub const ACLO_DESKTOP = AUTOCOMPLETELISTOPTIONS.DESKTOP;
pub const ACLO_FAVORITES = AUTOCOMPLETELISTOPTIONS.FAVORITES;
pub const ACLO_FILESYSONLY = AUTOCOMPLETELISTOPTIONS.FILESYSONLY;
pub const ACLO_FILESYSDIRS = AUTOCOMPLETELISTOPTIONS.FILESYSDIRS;
pub const ACLO_VIRTUALNAMESPACE = AUTOCOMPLETELISTOPTIONS.VIRTUALNAMESPACE;

// TODO: this type is limited to platform 'windows5.0'
const IID_IACList2_Value = Guid.initString("470141a0-5186-11d2-bbb6-0060977b464c");
pub const IID_IACList2 = &IID_IACList2_Value;
pub const IACList2 = extern struct {
    pub const VTable = extern struct {
        base: IACList.VTable,
        SetOptions: *const fn (
            self: *const IACList2,
            dw_flag: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOptions: *const fn (
            self: *const IACList2,
            pdw_flag: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IACList.MethodMixin(T);
            pub inline fn setOptions(self: *const T, dw_flag_: u32) HRESULT {
                return @as(*const IACList2.VTable, @ptrCast(self.vtable)).SetOptions(@as(*const IACList2, @ptrCast(self)), dw_flag_);
            }
            pub inline fn getOptions(self: *const T, pdw_flag_: ?*u32) HRESULT {
                return @as(*const IACList2.VTable, @ptrCast(self.vtable)).GetOptions(@as(*const IACList2, @ptrCast(self)), pdw_flag_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IProgressDialog_Value = Guid.initString("ebbc7c04-315e-11d2-b62f-006097df5bd4");
pub const IID_IProgressDialog = &IID_IProgressDialog_Value;
pub const IProgressDialog = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartProgressDialog: *const fn (
            self: *const IProgressDialog,
            hwnd_parent: ?HWND,
            punk_enable_modless: ?*IUnknown,
            dw_flags: u32,
            pv_resevered: ?*const anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopProgressDialog: *const fn (
            self: *const IProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTitle: *const fn (
            self: *const IProgressDialog,
            pwz_title: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAnimation: *const fn (
            self: *const IProgressDialog,
            h_inst_animation: ?HINSTANCE,
            id_animation: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        HasUserCancelled: *const fn (
            self: *const IProgressDialog,
        ) callconv(@import("std").os.windows.WINAPI) BOOL,
        SetProgress: *const fn (
            self: *const IProgressDialog,
            dw_completed: u32,
            dw_total: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProgress64: *const fn (
            self: *const IProgressDialog,
            ull_completed: u64,
            ull_total: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLine: *const fn (
            self: *const IProgressDialog,
            dw_line_num: u32,
            pwz_string: ?[*:0]const u16,
            f_compact_path: BOOL,
            pv_resevered: ?*const anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCancelMsg: *const fn (
            self: *const IProgressDialog,
            pwz_cancel_msg: ?[*:0]const u16,
            pv_resevered: ?*const anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Timer: *const fn (
            self: *const IProgressDialog,
            dw_timer_action: u32,
            pv_resevered: ?*const anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn startProgressDialog(self: *const T, hwnd_parent_: ?HWND, punk_enable_modless_: ?*IUnknown, dw_flags_: u32, pv_resevered_: ?*const anyopaque) HRESULT {
                return @as(*const IProgressDialog.VTable, @ptrCast(self.vtable)).StartProgressDialog(@as(*const IProgressDialog, @ptrCast(self)), hwnd_parent_, punk_enable_modless_, dw_flags_, pv_resevered_);
            }
            pub inline fn stopProgressDialog(self: *const T) HRESULT {
                return @as(*const IProgressDialog.VTable, @ptrCast(self.vtable)).StopProgressDialog(@as(*const IProgressDialog, @ptrCast(self)));
            }
            pub inline fn setTitle(self: *const T, pwz_title_: ?[*:0]const u16) HRESULT {
                return @as(*const IProgressDialog.VTable, @ptrCast(self.vtable)).SetTitle(@as(*const IProgressDialog, @ptrCast(self)), pwz_title_);
            }
            pub inline fn setAnimation(self: *const T, h_inst_animation_: ?HINSTANCE, id_animation_: u32) HRESULT {
                return @as(*const IProgressDialog.VTable, @ptrCast(self.vtable)).SetAnimation(@as(*const IProgressDialog, @ptrCast(self)), h_inst_animation_, id_animation_);
            }
            pub inline fn hasUserCancelled(self: *const T) BOOL {
                return @as(*const IProgressDialog.VTable, @ptrCast(self.vtable)).HasUserCancelled(@as(*const IProgressDialog, @ptrCast(self)));
            }
            pub inline fn setProgress(self: *const T, dw_completed_: u32, dw_total_: u32) HRESULT {
                return @as(*const IProgressDialog.VTable, @ptrCast(self.vtable)).SetProgress(@as(*const IProgressDialog, @ptrCast(self)), dw_completed_, dw_total_);
            }
            pub inline fn setProgress64(self: *const T, ull_completed_: u64, ull_total_: u64) HRESULT {
                return @as(*const IProgressDialog.VTable, @ptrCast(self.vtable)).SetProgress64(@as(*const IProgressDialog, @ptrCast(self)), ull_completed_, ull_total_);
            }
            pub inline fn setLine(self: *const T, dw_line_num_: u32, pwz_string_: ?[*:0]const u16, f_compact_path_: BOOL, pv_resevered_: ?*const anyopaque) HRESULT {
                return @as(*const IProgressDialog.VTable, @ptrCast(self.vtable)).SetLine(@as(*const IProgressDialog, @ptrCast(self)), dw_line_num_, pwz_string_, f_compact_path_, pv_resevered_);
            }
            pub inline fn setCancelMsg(self: *const T, pwz_cancel_msg_: ?[*:0]const u16, pv_resevered_: ?*const anyopaque) HRESULT {
                return @as(*const IProgressDialog.VTable, @ptrCast(self.vtable)).SetCancelMsg(@as(*const IProgressDialog, @ptrCast(self)), pwz_cancel_msg_, pv_resevered_);
            }
            pub inline fn timer(self: *const T, dw_timer_action_: u32, pv_resevered_: ?*const anyopaque) HRESULT {
                return @as(*const IProgressDialog.VTable, @ptrCast(self.vtable)).Timer(@as(*const IProgressDialog, @ptrCast(self)), dw_timer_action_, pv_resevered_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IDockingWindowSite_Value = Guid.initString("2a342fc2-7b26-11d0-8ca9-00a0c92dbfe8");
pub const IID_IDockingWindowSite = &IID_IDockingWindowSite_Value;
pub const IDockingWindowSite = extern struct {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        GetBorderDW: *const fn (
            self: *const IDockingWindowSite,
            punk_obj: ?*IUnknown,
            prc_border: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestBorderSpaceDW: *const fn (
            self: *const IDockingWindowSite,
            punk_obj: ?*IUnknown,
            pbw: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBorderSpaceDW: *const fn (
            self: *const IDockingWindowSite,
            punk_obj: ?*IUnknown,
            pbw: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOleWindow.MethodMixin(T);
            pub inline fn getBorderDW(self: *const T, punk_obj_: ?*IUnknown, prc_border_: ?*RECT) HRESULT {
                return @as(*const IDockingWindowSite.VTable, @ptrCast(self.vtable)).GetBorderDW(@as(*const IDockingWindowSite, @ptrCast(self)), punk_obj_, prc_border_);
            }
            pub inline fn requestBorderSpaceDW(self: *const T, punk_obj_: ?*IUnknown, pbw_: ?*RECT) HRESULT {
                return @as(*const IDockingWindowSite.VTable, @ptrCast(self.vtable)).RequestBorderSpaceDW(@as(*const IDockingWindowSite, @ptrCast(self)), punk_obj_, pbw_);
            }
            pub inline fn setBorderSpaceDW(self: *const T, punk_obj_: ?*IUnknown, pbw_: ?*RECT) HRESULT {
                return @as(*const IDockingWindowSite.VTable, @ptrCast(self.vtable)).SetBorderSpaceDW(@as(*const IDockingWindowSite, @ptrCast(self)), punk_obj_, pbw_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const NRESARRAY = extern struct {
    cItems: u32,
    nr: [1]NETRESOURCEA,
};

pub const CIDA = extern struct {
    cidl: u32 align(1),
    aoffset: [1]u32 align(1),
};

pub const FD_FLAGS = enum(i32) {
    CLSID = 1,
    SIZEPOINT = 2,
    ATTRIBUTES = 4,
    CREATETIME = 8,
    ACCESSTIME = 16,
    WRITESTIME = 32,
    FILESIZE = 64,
    PROGRESSUI = 16384,
    LINKUI = 32768,
    UNICODE = -2147483648,
};
pub const FD_CLSID = FD_FLAGS.CLSID;
pub const FD_SIZEPOINT = FD_FLAGS.SIZEPOINT;
pub const FD_ATTRIBUTES = FD_FLAGS.ATTRIBUTES;
pub const FD_CREATETIME = FD_FLAGS.CREATETIME;
pub const FD_ACCESSTIME = FD_FLAGS.ACCESSTIME;
pub const FD_WRITESTIME = FD_FLAGS.WRITESTIME;
pub const FD_FILESIZE = FD_FLAGS.FILESIZE;
pub const FD_PROGRESSUI = FD_FLAGS.PROGRESSUI;
pub const FD_LINKUI = FD_FLAGS.LINKUI;
pub const FD_UNICODE = FD_FLAGS.UNICODE;

pub const FILEDESCRIPTORA = extern struct {
    dwFlags: u32 align(1),
    clsid: Guid align(1),
    sizel: SIZE align(1),
    pointl: POINTL align(1),
    dwFileAttributes: u32 align(1),
    ftCreationTime: FILETIME align(1),
    ftLastAccessTime: FILETIME align(1),
    ftLastWriteTime: FILETIME align(1),
    nFileSizeHigh: u32 align(1),
    nFileSizeLow: u32 align(1),
    cFileName: [260]CHAR align(1),
};

pub const FILEDESCRIPTORW = extern struct {
    dwFlags: u32 align(1),
    clsid: Guid align(1),
    sizel: SIZE align(1),
    pointl: POINTL align(1),
    dwFileAttributes: u32 align(1),
    ftCreationTime: FILETIME align(1),
    ftLastAccessTime: FILETIME align(1),
    ftLastWriteTime: FILETIME align(1),
    nFileSizeHigh: u32 align(1),
    nFileSizeLow: u32 align(1),
    cFileName: [260]u16 align(1),
};

// TODO: not generating this type because array of 'win32.ui.shell.FILEDESCRIPTORA' not allowed in packed struct due to padding bits
pub const FILEGROUPDESCRIPTORA = usize;

pub const FILEGROUPDESCRIPTORW = extern struct {
    cItems: u32 align(1),
    fgd: [1]FILEDESCRIPTORW align(1),
};

pub const DROPFILES = extern struct {
    pFiles: u32 align(1),
    pt: POINT align(1),
    fNC: BOOL align(1),
    fWide: BOOL align(1),
};

pub const FILE_ATTRIBUTES_ARRAY = extern struct {
    cItems: u32 align(1),
    dwSumFileAttributes: u32 align(1),
    dwProductFileAttributes: u32 align(1),
    rgdwFileAttributes: [1]u32 align(1),
};

pub const DROPIMAGETYPE = enum(i32) {
    INVALID = -1,
    NONE = 0,
    COPY = 1,
    MOVE = 2,
    LINK = 4,
    LABEL = 6,
    WARNING = 7,
    NOIMAGE = 8,
};
pub const DROPIMAGE_INVALID = DROPIMAGETYPE.INVALID;
pub const DROPIMAGE_NONE = DROPIMAGETYPE.NONE;
pub const DROPIMAGE_COPY = DROPIMAGETYPE.COPY;
pub const DROPIMAGE_MOVE = DROPIMAGETYPE.MOVE;
pub const DROPIMAGE_LINK = DROPIMAGETYPE.LINK;
pub const DROPIMAGE_LABEL = DROPIMAGETYPE.LABEL;
pub const DROPIMAGE_WARNING = DROPIMAGETYPE.WARNING;
pub const DROPIMAGE_NOIMAGE = DROPIMAGETYPE.NOIMAGE;

pub const DROPDESCRIPTION = extern struct {
    type: DROPIMAGETYPE align(1),
    szMessage: [260]u16 align(1),
    szInsert: [260]u16 align(1),
};

pub const SHChangeNotifyEntry = extern struct {
    pidl: ?*ITEMIDLIST align(1),
    fRecursive: BOOL align(1),
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IShellChangeNotify_Value = Guid.initString("d82be2b1-5764-11d0-a96e-00c04fd705a2");
pub const IID_IShellChangeNotify = &IID_IShellChangeNotify_Value;
pub const IShellChangeNotify = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnChange: *const fn (
            self: *const IShellChangeNotify,
            l_event: i32,
            pidl1: ?*ITEMIDLIST,
            pidl2: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onChange(self: *const T, l_event_: i32, pidl1_: ?*ITEMIDLIST, pidl2_: ?*ITEMIDLIST) HRESULT {
                return @as(*const IShellChangeNotify.VTable, @ptrCast(self.vtable)).OnChange(@as(*const IShellChangeNotify, @ptrCast(self)), l_event_, pidl1_, pidl2_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IQueryInfo_Value = Guid.initString("00021500-0000-0000-c000-000000000046");
pub const IID_IQueryInfo = &IID_IQueryInfo_Value;
pub const IQueryInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInfoTip: *const fn (
            self: *const IQueryInfo,
            dw_flags: QITIPF_FLAGS,
            ppwsz_tip: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInfoFlags: *const fn (
            self: *const IQueryInfo,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getInfoTip(self: *const T, dw_flags_: QITIPF_FLAGS, ppwsz_tip_: ?*?PWSTR) HRESULT {
                return @as(*const IQueryInfo.VTable, @ptrCast(self.vtable)).GetInfoTip(@as(*const IQueryInfo, @ptrCast(self)), dw_flags_, ppwsz_tip_);
            }
            pub inline fn getInfoFlags(self: *const T, pdw_flags_: ?*u32) HRESULT {
                return @as(*const IQueryInfo.VTable, @ptrCast(self.vtable)).GetInfoFlags(@as(*const IQueryInfo, @ptrCast(self)), pdw_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SHARD = enum(i32) {
    PIDL = 1,
    PATHA = 2,
    PATHW = 3,
    APPIDINFO = 4,
    APPIDINFOIDLIST = 5,
    LINK = 6,
    APPIDINFOLINK = 7,
    SHELLITEM = 8,
};
pub const SHARD_PIDL = SHARD.PIDL;
pub const SHARD_PATHA = SHARD.PATHA;
pub const SHARD_PATHW = SHARD.PATHW;
pub const SHARD_APPIDINFO = SHARD.APPIDINFO;
pub const SHARD_APPIDINFOIDLIST = SHARD.APPIDINFOIDLIST;
pub const SHARD_LINK = SHARD.LINK;
pub const SHARD_APPIDINFOLINK = SHARD.APPIDINFOLINK;
pub const SHARD_SHELLITEM = SHARD.SHELLITEM;

pub const SHARDAPPIDINFO = extern struct {
    psi: ?*IShellItem align(1),
    pszAppID: ?[*:0]const u16 align(1),
};

pub const SHARDAPPIDINFOIDLIST = extern struct {
    pidl: ?*ITEMIDLIST align(1),
    pszAppID: ?[*:0]const u16 align(1),
};

pub const SHARDAPPIDINFOLINK = extern struct {
    psl: ?*IShellLinkA align(1),
    pszAppID: ?[*:0]const u16 align(1),
};

pub const SHChangeDWORDAsIDList = extern struct {
    cb: u16 align(1),
    dwItem1: u32 align(1),
    dwItem2: u32 align(1),
    cbZero: u16 align(1),
};

pub const SHChangeUpdateImageIDList = extern struct {
    cb: u16 align(1),
    iIconIndex: i32 align(1),
    iCurIndex: i32 align(1),
    uFlags: u32 align(1),
    dwProcessID: u32 align(1),
    szName: [260]u16 align(1),
    cbZero: u16 align(1),
};

pub const SCNRT_STATUS = enum(i32) {
    ENABLE = 0,
    DISABLE = 1,
};
pub const SCNRT_ENABLE = SCNRT_STATUS.ENABLE;
pub const SCNRT_DISABLE = SCNRT_STATUS.DISABLE;

pub const SHDESCRIPTIONID = extern struct {
    dwDescriptionId: SHDID_ID,
    clsid: Guid,
};

pub const AUTO_SCROLL_DATA = extern struct {
    iNextSample: i32 align(1),
    dwLastScroll: u32 align(1),
    bFull: BOOL align(1),
    pts: [3]POINT align(1),
    dwTimes: [3]u32 align(1),
};

pub const CABINETSTATE = extern struct {
    cLength: u16 align(1),
    nVersion: u16 align(1),
    _bitfield: i32 align(1),
    fMenuEnumFilter: u32 align(1),
};

pub const RESTRICTIONS = enum(i32) {
    NONE = 0,
    NORUN = 1,
    NOCLOSE = 2,
    NOSAVESET = 4,
    NOFILEMENU = 8,
    NOSETFOLDERS = 16,
    NOSETTASKBAR = 32,
    NODESKTOP = 64,
    NOFIND = 128,
    NODRIVES = 256,
    NODRIVEAUTORUN = 512,
    NODRIVETYPEAUTORUN = 1024,
    NONETHOOD = 2048,
    STARTBANNER = 4096,
    RESTRICTRUN = 8192,
    NOPRINTERTABS = 16384,
    NOPRINTERDELETE = 32768,
    NOPRINTERADD = 65536,
    NOSTARTMENUSUBFOLDERS = 131072,
    MYDOCSONNET = 262144,
    NOEXITTODOS = 524288,
    ENFORCESHELLEXTSECURITY = 1048576,
    LINKRESOLVEIGNORELINKINFO = 2097152,
    NOCOMMONGROUPS = 4194304,
    SEPARATEDESKTOPPROCESS = 8388608,
    NOWEB = 16777216,
    NOTRAYCONTEXTMENU = 33554432,
    NOVIEWCONTEXTMENU = 67108864,
    NONETCONNECTDISCONNECT = 134217728,
    STARTMENULOGOFF = 268435456,
    NOSETTINGSASSIST = 536870912,
    NOINTERNETICON = 1073741825,
    NORECENTDOCSHISTORY = 1073741826,
    NORECENTDOCSMENU = 1073741827,
    NOACTIVEDESKTOP = 1073741828,
    NOACTIVEDESKTOPCHANGES = 1073741829,
    NOFAVORITESMENU = 1073741830,
    CLEARRECENTDOCSONEXIT = 1073741831,
    CLASSICSHELL = 1073741832,
    NOCUSTOMIZEWEBVIEW = 1073741833,
    NOHTMLWALLPAPER = 1073741840,
    NOCHANGINGWALLPAPER = 1073741841,
    NODESKCOMP = 1073741842,
    NOADDDESKCOMP = 1073741843,
    NODELDESKCOMP = 1073741844,
    NOCLOSEDESKCOMP = 1073741845,
    NOCLOSE_DRAGDROPBAND = 1073741846,
    NOMOVINGBAND = 1073741847,
    NOEDITDESKCOMP = 1073741848,
    NORESOLVESEARCH = 1073741849,
    NORESOLVETRACK = 1073741850,
    FORCECOPYACLWITHFILE = 1073741851,
    NOFORGETSOFTWAREUPDATE = 1073741853,
    NOSETACTIVEDESKTOP = 1073741854,
    NOUPDATEWINDOWS = 1073741855,
    NOCHANGESTARMENU = 1073741856,
    NOFOLDEROPTIONS = 1073741857,
    HASFINDCOMPUTERS = 1073741858,
    INTELLIMENUS = 1073741859,
    RUNDLGMEMCHECKBOX = 1073741860,
    ARP_ShowPostSetup = 1073741861,
    NOCSC = 1073741862,
    NOCONTROLPANEL = 1073741863,
    ENUMWORKGROUP = 1073741864,
    ARP_NOARP = 1073741865,
    ARP_NOREMOVEPAGE = 1073741866,
    ARP_NOADDPAGE = 1073741867,
    ARP_NOWINSETUPPAGE = 1073741868,
    GREYMSIADS = 1073741869,
    NOCHANGEMAPPEDDRIVELABEL = 1073741870,
    NOCHANGEMAPPEDDRIVECOMMENT = 1073741871,
    MaxRecentDocs = 1073741872,
    NONETWORKCONNECTIONS = 1073741873,
    FORCESTARTMENULOGOFF = 1073741874,
    NOWEBVIEW = 1073741875,
    NOCUSTOMIZETHISFOLDER = 1073741876,
    NOENCRYPTION = 1073741877,
    DONTSHOWSUPERHIDDEN = 1073741879,
    NOSHELLSEARCHBUTTON = 1073741880,
    NOHARDWARETAB = 1073741881,
    NORUNASINSTALLPROMPT = 1073741882,
    PROMPTRUNASINSTALLNETPATH = 1073741883,
    NOMANAGEMYCOMPUTERVERB = 1073741884,
    DISALLOWRUN = 1073741886,
    NOWELCOMESCREEN = 1073741887,
    RESTRICTCPL = 1073741888,
    DISALLOWCPL = 1073741889,
    NOSMBALLOONTIP = 1073741890,
    NOSMHELP = 1073741891,
    NOWINKEYS = 1073741892,
    NOENCRYPTONMOVE = 1073741893,
    NOLOCALMACHINERUN = 1073741894,
    NOCURRENTUSERRUN = 1073741895,
    NOLOCALMACHINERUNONCE = 1073741896,
    NOCURRENTUSERRUNONCE = 1073741897,
    FORCEACTIVEDESKTOPON = 1073741898,
    NOVIEWONDRIVE = 1073741900,
    NONETCRAWL = 1073741901,
    NOSHAREDDOCUMENTS = 1073741902,
    NOSMMYDOCS = 1073741903,
    NOSMMYPICS = 1073741904,
    ALLOWBITBUCKDRIVES = 1073741905,
    NONLEGACYSHELLMODE = 1073741906,
    NOCONTROLPANELBARRICADE = 1073741907,
    NOSTARTPAGE = 1073741908,
    NOAUTOTRAYNOTIFY = 1073741909,
    NOTASKGROUPING = 1073741910,
    NOCDBURNING = 1073741911,
    MYCOMPNOPROP = 1073741912,
    MYDOCSNOPROP = 1073741913,
    NOSTARTPANEL = 1073741914,
    NODISPLAYAPPEARANCEPAGE = 1073741915,
    NOTHEMESTAB = 1073741916,
    NOVISUALSTYLECHOICE = 1073741917,
    NOSIZECHOICE = 1073741918,
    NOCOLORCHOICE = 1073741919,
    SETVISUALSTYLE = 1073741920,
    STARTRUNNOHOMEPATH = 1073741921,
    NOUSERNAMEINSTARTPANEL = 1073741922,
    NOMYCOMPUTERICON = 1073741923,
    NOSMNETWORKPLACES = 1073741924,
    NOSMPINNEDLIST = 1073741925,
    NOSMMYMUSIC = 1073741926,
    NOSMEJECTPC = 1073741927,
    NOSMMOREPROGRAMS = 1073741928,
    NOSMMFUPROGRAMS = 1073741929,
    NOTRAYITEMSDISPLAY = 1073741930,
    NOTOOLBARSONTASKBAR = 1073741931,
    NOSMCONFIGUREPROGRAMS = 1073741935,
    HIDECLOCK = 1073741936,
    NOLOWDISKSPACECHECKS = 1073741937,
    NOENTIRENETWORK = 1073741938,
    NODESKTOPCLEANUP = 1073741939,
    BITBUCKNUKEONDELETE = 1073741940,
    BITBUCKCONFIRMDELETE = 1073741941,
    BITBUCKNOPROP = 1073741942,
    NODISPBACKGROUND = 1073741943,
    NODISPSCREENSAVEPG = 1073741944,
    NODISPSETTINGSPG = 1073741945,
    NODISPSCREENSAVEPREVIEW = 1073741946,
    NODISPLAYCPL = 1073741947,
    HIDERUNASVERB = 1073741948,
    NOTHUMBNAILCACHE = 1073741949,
    NOSTRCMPLOGICAL = 1073741950,
    NOPUBLISHWIZARD = 1073741951,
    NOONLINEPRINTSWIZARD = 1073741952,
    NOWEBSERVICES = 1073741953,
    ALLOWUNHASHEDWEBVIEW = 1073741954,
    ALLOWLEGACYWEBVIEW = 1073741955,
    REVERTWEBVIEWSECURITY = 1073741956,
    INHERITCONSOLEHANDLES = 1073741958,
    NOREMOTERECURSIVEEVENTS = 1073741961,
    NOREMOTECHANGENOTIFY = 1073741969,
    NOENUMENTIRENETWORK = 1073741971,
    NOINTERNETOPENWITH = 1073741973,
    DONTRETRYBADNETNAME = 1073741979,
    ALLOWFILECLSIDJUNCTIONS = 1073741980,
    NOUPNPINSTALL = 1073741981,
    ARP_DONTGROUPPATCHES = 1073741996,
    ARP_NOCHOOSEPROGRAMSPAGE = 1073741997,
    NODISCONNECT = 1090519041,
    NOSECURITY = 1090519042,
    NOFILEASSOCIATE = 1090519043,
    ALLOWCOMMENTTOGGLE = 1090519044,
};
pub const REST_NONE = RESTRICTIONS.NONE;
pub const REST_NORUN = RESTRICTIONS.NORUN;
pub const REST_NOCLOSE = RESTRICTIONS.NOCLOSE;
pub const REST_NOSAVESET = RESTRICTIONS.NOSAVESET;
pub const REST_NOFILEMENU = RESTRICTIONS.NOFILEMENU;
pub const REST_NOSETFOLDERS = RESTRICTIONS.NOSETFOLDERS;
pub const REST_NOSETTASKBAR = RESTRICTIONS.NOSETTASKBAR;
pub const REST_NODESKTOP = RESTRICTIONS.NODESKTOP;
pub const REST_NOFIND = RESTRICTIONS.NOFIND;
pub const REST_NODRIVES = RESTRICTIONS.NODRIVES;
pub const REST_NODRIVEAUTORUN = RESTRICTIONS.NODRIVEAUTORUN;
pub const REST_NODRIVETYPEAUTORUN = RESTRICTIONS.NODRIVETYPEAUTORUN;
pub const REST_NONETHOOD = RESTRICTIONS.NONETHOOD;
pub const REST_STARTBANNER = RESTRICTIONS.STARTBANNER;
pub const REST_RESTRICTRUN = RESTRICTIONS.RESTRICTRUN;
pub const REST_NOPRINTERTABS = RESTRICTIONS.NOPRINTERTABS;
pub const REST_NOPRINTERDELETE = RESTRICTIONS.NOPRINTERDELETE;
pub const REST_NOPRINTERADD = RESTRICTIONS.NOPRINTERADD;
pub const REST_NOSTARTMENUSUBFOLDERS = RESTRICTIONS.NOSTARTMENUSUBFOLDERS;
pub const REST_MYDOCSONNET = RESTRICTIONS.MYDOCSONNET;
pub const REST_NOEXITTODOS = RESTRICTIONS.NOEXITTODOS;
pub const REST_ENFORCESHELLEXTSECURITY = RESTRICTIONS.ENFORCESHELLEXTSECURITY;
pub const REST_LINKRESOLVEIGNORELINKINFO = RESTRICTIONS.LINKRESOLVEIGNORELINKINFO;
pub const REST_NOCOMMONGROUPS = RESTRICTIONS.NOCOMMONGROUPS;
pub const REST_SEPARATEDESKTOPPROCESS = RESTRICTIONS.SEPARATEDESKTOPPROCESS;
pub const REST_NOWEB = RESTRICTIONS.NOWEB;
pub const REST_NOTRAYCONTEXTMENU = RESTRICTIONS.NOTRAYCONTEXTMENU;
pub const REST_NOVIEWCONTEXTMENU = RESTRICTIONS.NOVIEWCONTEXTMENU;
pub const REST_NONETCONNECTDISCONNECT = RESTRICTIONS.NONETCONNECTDISCONNECT;
pub const REST_STARTMENULOGOFF = RESTRICTIONS.STARTMENULOGOFF;
pub const REST_NOSETTINGSASSIST = RESTRICTIONS.NOSETTINGSASSIST;
pub const REST_NOINTERNETICON = RESTRICTIONS.NOINTERNETICON;
pub const REST_NORECENTDOCSHISTORY = RESTRICTIONS.NORECENTDOCSHISTORY;
pub const REST_NORECENTDOCSMENU = RESTRICTIONS.NORECENTDOCSMENU;
pub const REST_NOACTIVEDESKTOP = RESTRICTIONS.NOACTIVEDESKTOP;
pub const REST_NOACTIVEDESKTOPCHANGES = RESTRICTIONS.NOACTIVEDESKTOPCHANGES;
pub const REST_NOFAVORITESMENU = RESTRICTIONS.NOFAVORITESMENU;
pub const REST_CLEARRECENTDOCSONEXIT = RESTRICTIONS.CLEARRECENTDOCSONEXIT;
pub const REST_CLASSICSHELL = RESTRICTIONS.CLASSICSHELL;
pub const REST_NOCUSTOMIZEWEBVIEW = RESTRICTIONS.NOCUSTOMIZEWEBVIEW;
pub const REST_NOHTMLWALLPAPER = RESTRICTIONS.NOHTMLWALLPAPER;
pub const REST_NOCHANGINGWALLPAPER = RESTRICTIONS.NOCHANGINGWALLPAPER;
pub const REST_NODESKCOMP = RESTRICTIONS.NODESKCOMP;
pub const REST_NOADDDESKCOMP = RESTRICTIONS.NOADDDESKCOMP;
pub const REST_NODELDESKCOMP = RESTRICTIONS.NODELDESKCOMP;
pub const REST_NOCLOSEDESKCOMP = RESTRICTIONS.NOCLOSEDESKCOMP;
pub const REST_NOCLOSE_DRAGDROPBAND = RESTRICTIONS.NOCLOSE_DRAGDROPBAND;
pub const REST_NOMOVINGBAND = RESTRICTIONS.NOMOVINGBAND;
pub const REST_NOEDITDESKCOMP = RESTRICTIONS.NOEDITDESKCOMP;
pub const REST_NORESOLVESEARCH = RESTRICTIONS.NORESOLVESEARCH;
pub const REST_NORESOLVETRACK = RESTRICTIONS.NORESOLVETRACK;
pub const REST_FORCECOPYACLWITHFILE = RESTRICTIONS.FORCECOPYACLWITHFILE;
pub const REST_NOFORGETSOFTWAREUPDATE = RESTRICTIONS.NOFORGETSOFTWAREUPDATE;
pub const REST_NOSETACTIVEDESKTOP = RESTRICTIONS.NOSETACTIVEDESKTOP;
pub const REST_NOUPDATEWINDOWS = RESTRICTIONS.NOUPDATEWINDOWS;
pub const REST_NOCHANGESTARMENU = RESTRICTIONS.NOCHANGESTARMENU;
pub const REST_NOFOLDEROPTIONS = RESTRICTIONS.NOFOLDEROPTIONS;
pub const REST_HASFINDCOMPUTERS = RESTRICTIONS.HASFINDCOMPUTERS;
pub const REST_INTELLIMENUS = RESTRICTIONS.INTELLIMENUS;
pub const REST_RUNDLGMEMCHECKBOX = RESTRICTIONS.RUNDLGMEMCHECKBOX;
pub const REST_ARP_ShowPostSetup = RESTRICTIONS.ARP_ShowPostSetup;
pub const REST_NOCSC = RESTRICTIONS.NOCSC;
pub const REST_NOCONTROLPANEL = RESTRICTIONS.NOCONTROLPANEL;
pub const REST_ENUMWORKGROUP = RESTRICTIONS.ENUMWORKGROUP;
pub const REST_ARP_NOARP = RESTRICTIONS.ARP_NOARP;
pub const REST_ARP_NOREMOVEPAGE = RESTRICTIONS.ARP_NOREMOVEPAGE;
pub const REST_ARP_NOADDPAGE = RESTRICTIONS.ARP_NOADDPAGE;
pub const REST_ARP_NOWINSETUPPAGE = RESTRICTIONS.ARP_NOWINSETUPPAGE;
pub const REST_GREYMSIADS = RESTRICTIONS.GREYMSIADS;
pub const REST_NOCHANGEMAPPEDDRIVELABEL = RESTRICTIONS.NOCHANGEMAPPEDDRIVELABEL;
pub const REST_NOCHANGEMAPPEDDRIVECOMMENT = RESTRICTIONS.NOCHANGEMAPPEDDRIVECOMMENT;
pub const REST_MaxRecentDocs = RESTRICTIONS.MaxRecentDocs;
pub const REST_NONETWORKCONNECTIONS = RESTRICTIONS.NONETWORKCONNECTIONS;
pub const REST_FORCESTARTMENULOGOFF = RESTRICTIONS.FORCESTARTMENULOGOFF;
pub const REST_NOWEBVIEW = RESTRICTIONS.NOWEBVIEW;
pub const REST_NOCUSTOMIZETHISFOLDER = RESTRICTIONS.NOCUSTOMIZETHISFOLDER;
pub const REST_NOENCRYPTION = RESTRICTIONS.NOENCRYPTION;
pub const REST_DONTSHOWSUPERHIDDEN = RESTRICTIONS.DONTSHOWSUPERHIDDEN;
pub const REST_NOSHELLSEARCHBUTTON = RESTRICTIONS.NOSHELLSEARCHBUTTON;
pub const REST_NOHARDWARETAB = RESTRICTIONS.NOHARDWARETAB;
pub const REST_NORUNASINSTALLPROMPT = RESTRICTIONS.NORUNASINSTALLPROMPT;
pub const REST_PROMPTRUNASINSTALLNETPATH = RESTRICTIONS.PROMPTRUNASINSTALLNETPATH;
pub const REST_NOMANAGEMYCOMPUTERVERB = RESTRICTIONS.NOMANAGEMYCOMPUTERVERB;
pub const REST_DISALLOWRUN = RESTRICTIONS.DISALLOWRUN;
pub const REST_NOWELCOMESCREEN = RESTRICTIONS.NOWELCOMESCREEN;
pub const REST_RESTRICTCPL = RESTRICTIONS.RESTRICTCPL;
pub const REST_DISALLOWCPL = RESTRICTIONS.DISALLOWCPL;
pub const REST_NOSMBALLOONTIP = RESTRICTIONS.NOSMBALLOONTIP;
pub const REST_NOSMHELP = RESTRICTIONS.NOSMHELP;
pub const REST_NOWINKEYS = RESTRICTIONS.NOWINKEYS;
pub const REST_NOENCRYPTONMOVE = RESTRICTIONS.NOENCRYPTONMOVE;
pub const REST_NOLOCALMACHINERUN = RESTRICTIONS.NOLOCALMACHINERUN;
pub const REST_NOCURRENTUSERRUN = RESTRICTIONS.NOCURRENTUSERRUN;
pub const REST_NOLOCALMACHINERUNONCE = RESTRICTIONS.NOLOCALMACHINERUNONCE;
pub const REST_NOCURRENTUSERRUNONCE = RESTRICTIONS.NOCURRENTUSERRUNONCE;
pub const REST_FORCEACTIVEDESKTOPON = RESTRICTIONS.FORCEACTIVEDESKTOPON;
pub const REST_NOVIEWONDRIVE = RESTRICTIONS.NOVIEWONDRIVE;
pub const REST_NONETCRAWL = RESTRICTIONS.NONETCRAWL;
pub const REST_NOSHAREDDOCUMENTS = RESTRICTIONS.NOSHAREDDOCUMENTS;
pub const REST_NOSMMYDOCS = RESTRICTIONS.NOSMMYDOCS;
pub const REST_NOSMMYPICS = RESTRICTIONS.NOSMMYPICS;
pub const REST_ALLOWBITBUCKDRIVES = RESTRICTIONS.ALLOWBITBUCKDRIVES;
pub const REST_NONLEGACYSHELLMODE = RESTRICTIONS.NONLEGACYSHELLMODE;
pub const REST_NOCONTROLPANELBARRICADE = RESTRICTIONS.NOCONTROLPANELBARRICADE;
pub const REST_NOSTARTPAGE = RESTRICTIONS.NOSTARTPAGE;
pub const REST_NOAUTOTRAYNOTIFY = RESTRICTIONS.NOAUTOTRAYNOTIFY;
pub const REST_NOTASKGROUPING = RESTRICTIONS.NOTASKGROUPING;
pub const REST_NOCDBURNING = RESTRICTIONS.NOCDBURNING;
pub const REST_MYCOMPNOPROP = RESTRICTIONS.MYCOMPNOPROP;
pub const REST_MYDOCSNOPROP = RESTRICTIONS.MYDOCSNOPROP;
pub const REST_NOSTARTPANEL = RESTRICTIONS.NOSTARTPANEL;
pub const REST_NODISPLAYAPPEARANCEPAGE = RESTRICTIONS.NODISPLAYAPPEARANCEPAGE;
pub const REST_NOTHEMESTAB = RESTRICTIONS.NOTHEMESTAB;
pub const REST_NOVISUALSTYLECHOICE = RESTRICTIONS.NOVISUALSTYLECHOICE;
pub const REST_NOSIZECHOICE = RESTRICTIONS.NOSIZECHOICE;
pub const REST_NOCOLORCHOICE = RESTRICTIONS.NOCOLORCHOICE;
pub const REST_SETVISUALSTYLE = RESTRICTIONS.SETVISUALSTYLE;
pub const REST_STARTRUNNOHOMEPATH = RESTRICTIONS.STARTRUNNOHOMEPATH;
pub const REST_NOUSERNAMEINSTARTPANEL = RESTRICTIONS.NOUSERNAMEINSTARTPANEL;
pub const REST_NOMYCOMPUTERICON = RESTRICTIONS.NOMYCOMPUTERICON;
pub const REST_NOSMNETWORKPLACES = RESTRICTIONS.NOSMNETWORKPLACES;
pub const REST_NOSMPINNEDLIST = RESTRICTIONS.NOSMPINNEDLIST;
pub const REST_NOSMMYMUSIC = RESTRICTIONS.NOSMMYMUSIC;
pub const REST_NOSMEJECTPC = RESTRICTIONS.NOSMEJECTPC;
pub const REST_NOSMMOREPROGRAMS = RESTRICTIONS.NOSMMOREPROGRAMS;
pub const REST_NOSMMFUPROGRAMS = RESTRICTIONS.NOSMMFUPROGRAMS;
pub const REST_NOTRAYITEMSDISPLAY = RESTRICTIONS.NOTRAYITEMSDISPLAY;
pub const REST_NOTOOLBARSONTASKBAR = RESTRICTIONS.NOTOOLBARSONTASKBAR;
pub const REST_NOSMCONFIGUREPROGRAMS = RESTRICTIONS.NOSMCONFIGUREPROGRAMS;
pub const REST_HIDECLOCK = RESTRICTIONS.HIDECLOCK;
pub const REST_NOLOWDISKSPACECHECKS = RESTRICTIONS.NOLOWDISKSPACECHECKS;
pub const REST_NOENTIRENETWORK = RESTRICTIONS.NOENTIRENETWORK;
pub const REST_NODESKTOPCLEANUP = RESTRICTIONS.NODESKTOPCLEANUP;
pub const REST_BITBUCKNUKEONDELETE = RESTRICTIONS.BITBUCKNUKEONDELETE;
pub const REST_BITBUCKCONFIRMDELETE = RESTRICTIONS.BITBUCKCONFIRMDELETE;
pub const REST_BITBUCKNOPROP = RESTRICTIONS.BITBUCKNOPROP;
pub const REST_NODISPBACKGROUND = RESTRICTIONS.NODISPBACKGROUND;
pub const REST_NODISPSCREENSAVEPG = RESTRICTIONS.NODISPSCREENSAVEPG;
pub const REST_NODISPSETTINGSPG = RESTRICTIONS.NODISPSETTINGSPG;
pub const REST_NODISPSCREENSAVEPREVIEW = RESTRICTIONS.NODISPSCREENSAVEPREVIEW;
pub const REST_NODISPLAYCPL = RESTRICTIONS.NODISPLAYCPL;
pub const REST_HIDERUNASVERB = RESTRICTIONS.HIDERUNASVERB;
pub const REST_NOTHUMBNAILCACHE = RESTRICTIONS.NOTHUMBNAILCACHE;
pub const REST_NOSTRCMPLOGICAL = RESTRICTIONS.NOSTRCMPLOGICAL;
pub const REST_NOPUBLISHWIZARD = RESTRICTIONS.NOPUBLISHWIZARD;
pub const REST_NOONLINEPRINTSWIZARD = RESTRICTIONS.NOONLINEPRINTSWIZARD;
pub const REST_NOWEBSERVICES = RESTRICTIONS.NOWEBSERVICES;
pub const REST_ALLOWUNHASHEDWEBVIEW = RESTRICTIONS.ALLOWUNHASHEDWEBVIEW;
pub const REST_ALLOWLEGACYWEBVIEW = RESTRICTIONS.ALLOWLEGACYWEBVIEW;
pub const REST_REVERTWEBVIEWSECURITY = RESTRICTIONS.REVERTWEBVIEWSECURITY;
pub const REST_INHERITCONSOLEHANDLES = RESTRICTIONS.INHERITCONSOLEHANDLES;
pub const REST_NOREMOTERECURSIVEEVENTS = RESTRICTIONS.NOREMOTERECURSIVEEVENTS;
pub const REST_NOREMOTECHANGENOTIFY = RESTRICTIONS.NOREMOTECHANGENOTIFY;
pub const REST_NOENUMENTIRENETWORK = RESTRICTIONS.NOENUMENTIRENETWORK;
pub const REST_NOINTERNETOPENWITH = RESTRICTIONS.NOINTERNETOPENWITH;
pub const REST_DONTRETRYBADNETNAME = RESTRICTIONS.DONTRETRYBADNETNAME;
pub const REST_ALLOWFILECLSIDJUNCTIONS = RESTRICTIONS.ALLOWFILECLSIDJUNCTIONS;
pub const REST_NOUPNPINSTALL = RESTRICTIONS.NOUPNPINSTALL;
pub const REST_ARP_DONTGROUPPATCHES = RESTRICTIONS.ARP_DONTGROUPPATCHES;
pub const REST_ARP_NOCHOOSEPROGRAMSPAGE = RESTRICTIONS.ARP_NOCHOOSEPROGRAMSPAGE;
pub const REST_NODISCONNECT = RESTRICTIONS.NODISCONNECT;
pub const REST_NOSECURITY = RESTRICTIONS.NOSECURITY;
pub const REST_NOFILEASSOCIATE = RESTRICTIONS.NOFILEASSOCIATE;
pub const REST_ALLOWCOMMENTTOGGLE = RESTRICTIONS.ALLOWCOMMENTTOGGLE;

pub const OPEN_AS_INFO_FLAGS = enum(u32) {
    ALLOW_REGISTRATION = 1,
    REGISTER_EXT = 2,
    EXEC = 4,
    FORCE_REGISTRATION = 8,
    HIDE_REGISTRATION = 32,
    URL_PROTOCOL = 64,
    FILE_IS_URI = 128,
    _,
    pub fn initFlags(o: struct {
        ALLOW_REGISTRATION: u1 = 0,
        REGISTER_EXT: u1 = 0,
        EXEC: u1 = 0,
        FORCE_REGISTRATION: u1 = 0,
        HIDE_REGISTRATION: u1 = 0,
        URL_PROTOCOL: u1 = 0,
        FILE_IS_URI: u1 = 0,
    }) OPEN_AS_INFO_FLAGS {
        return @as(OPEN_AS_INFO_FLAGS, @enumFromInt((if (o.ALLOW_REGISTRATION == 1) @intFromEnum(OPEN_AS_INFO_FLAGS.ALLOW_REGISTRATION) else 0) | (if (o.REGISTER_EXT == 1) @intFromEnum(OPEN_AS_INFO_FLAGS.REGISTER_EXT) else 0) | (if (o.EXEC == 1) @intFromEnum(OPEN_AS_INFO_FLAGS.EXEC) else 0) | (if (o.FORCE_REGISTRATION == 1) @intFromEnum(OPEN_AS_INFO_FLAGS.FORCE_REGISTRATION) else 0) | (if (o.HIDE_REGISTRATION == 1) @intFromEnum(OPEN_AS_INFO_FLAGS.HIDE_REGISTRATION) else 0) | (if (o.URL_PROTOCOL == 1) @intFromEnum(OPEN_AS_INFO_FLAGS.URL_PROTOCOL) else 0) | (if (o.FILE_IS_URI == 1) @intFromEnum(OPEN_AS_INFO_FLAGS.FILE_IS_URI) else 0)));
    }
};
pub const OAIF_ALLOW_REGISTRATION = OPEN_AS_INFO_FLAGS.ALLOW_REGISTRATION;
pub const OAIF_REGISTER_EXT = OPEN_AS_INFO_FLAGS.REGISTER_EXT;
pub const OAIF_EXEC = OPEN_AS_INFO_FLAGS.EXEC;
pub const OAIF_FORCE_REGISTRATION = OPEN_AS_INFO_FLAGS.FORCE_REGISTRATION;
pub const OAIF_HIDE_REGISTRATION = OPEN_AS_INFO_FLAGS.HIDE_REGISTRATION;
pub const OAIF_URL_PROTOCOL = OPEN_AS_INFO_FLAGS.URL_PROTOCOL;
pub const OAIF_FILE_IS_URI = OPEN_AS_INFO_FLAGS.FILE_IS_URI;

pub const OPENASINFO = extern struct {
    pcszFile: ?[*:0]const u16,
    pcszClass: ?[*:0]const u16,
    oaifInFlags: OPEN_AS_INFO_FLAGS,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IShellFolderViewCB_Value = Guid.initString("2047e320-f2a9-11ce-ae65-08002b2e1262");
pub const IID_IShellFolderViewCB = &IID_IShellFolderViewCB_Value;
pub const IShellFolderViewCB = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        MessageSFVCB: *const fn (
            self: *const IShellFolderViewCB,
            u_msg: SFVM_MESSAGE_ID,
            w_param: WPARAM,
            l_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn messageSFVCB(self: *const T, u_msg_: SFVM_MESSAGE_ID, w_param_: WPARAM, l_param_: LPARAM) HRESULT {
                return @as(*const IShellFolderViewCB.VTable, @ptrCast(self.vtable)).MessageSFVCB(@as(*const IShellFolderViewCB, @ptrCast(self)), u_msg_, w_param_, l_param_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const QCMINFO_IDMAP_PLACEMENT = extern struct {
    id: u32,
    fFlags: u32,
};

pub const QCMINFO_IDMAP = extern struct {
    nMaxIds: u32,
    pIdList: [1]QCMINFO_IDMAP_PLACEMENT,
};

pub const QCMINFO = extern struct {
    hmenu: ?HMENU,
    indexMenu: u32,
    idCmdFirst: u32,
    idCmdLast: u32,
    pIdMap: ?*const QCMINFO_IDMAP,
};

pub const DETAILSINFO = extern struct {
    pidl: ?*ITEMIDLIST,
    fmt: i32,
    cxChar: i32,
    str: STRRET,
    iImage: i32,
};

pub const SFVM_PROPPAGE_DATA = extern struct {
    dwReserved: u32,
    pfn: ?LPFNSVADDPROPSHEETPAGE,
    lParam: LPARAM,
};

pub const SFVM_HELPTOPIC_DATA = extern struct {
    wszHelpFile: [260]u16,
    wszHelpTopic: [260]u16,
};

pub const ITEMSPACING = extern struct {
    cxSmall: i32,
    cySmall: i32,
    cxLarge: i32,
    cyLarge: i32,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellFolderView_Value = Guid.initString("37a378c0-f82d-11ce-ae65-08002b2e1262");
pub const IID_IShellFolderView = &IID_IShellFolderView_Value;
pub const IShellFolderView = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Rearrange: *const fn (
            self: *const IShellFolderView,
            l_param_sort: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetArrangeParam: *const fn (
            self: *const IShellFolderView,
            pl_param_sort: ?*LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ArrangeGrid: *const fn (
            self: *const IShellFolderView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AutoArrange: *const fn (
            self: *const IShellFolderView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAutoArrange: *const fn (
            self: *const IShellFolderView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddObject: *const fn (
            self: *const IShellFolderView,
            pidl: ?*ITEMIDLIST,
            pu_item: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObject: *const fn (
            self: *const IShellFolderView,
            ppidl: ?*?*ITEMIDLIST,
            u_item: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveObject: *const fn (
            self: *const IShellFolderView,
            pidl: ?*ITEMIDLIST,
            pu_item: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObjectCount: *const fn (
            self: *const IShellFolderView,
            pu_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetObjectCount: *const fn (
            self: *const IShellFolderView,
            u_count: u32,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateObject: *const fn (
            self: *const IShellFolderView,
            pidl_old: ?*ITEMIDLIST,
            pidl_new: ?*ITEMIDLIST,
            pu_item: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshObject: *const fn (
            self: *const IShellFolderView,
            pidl: ?*ITEMIDLIST,
            pu_item: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRedraw: *const fn (
            self: *const IShellFolderView,
            b_redraw: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectedCount: *const fn (
            self: *const IShellFolderView,
            pu_selected: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSelectedObjects: *const fn (
            self: *const IShellFolderView,
            pppidl: ?*?*?*ITEMIDLIST,
            pu_items: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDropOnSource: *const fn (
            self: *const IShellFolderView,
            p_drop_target: ?*IDropTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDragPoint: *const fn (
            self: *const IShellFolderView,
            ppt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDropPoint: *const fn (
            self: *const IShellFolderView,
            ppt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveIcons: *const fn (
            self: *const IShellFolderView,
            p_data_object: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItemPos: *const fn (
            self: *const IShellFolderView,
            pidl: ?*ITEMIDLIST,
            ppt: ?*POINT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsBkDropTarget: *const fn (
            self: *const IShellFolderView,
            p_drop_target: ?*IDropTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClipboard: *const fn (
            self: *const IShellFolderView,
            b_move: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPoints: *const fn (
            self: *const IShellFolderView,
            p_data_object: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemSpacing: *const fn (
            self: *const IShellFolderView,
            p_spacing: ?*ITEMSPACING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCallback: *const fn (
            self: *const IShellFolderView,
            p_new_c_b: ?*IShellFolderViewCB,
            pp_old_c_b: ?*?*IShellFolderViewCB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Select: *const fn (
            self: *const IShellFolderView,
            dw_flags: SFVS_SELECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QuerySupport: *const fn (
            self: *const IShellFolderView,
            pdw_support: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAutomationObject: *const fn (
            self: *const IShellFolderView,
            pdisp: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn rearrange(self: *const T, l_param_sort_: LPARAM) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).Rearrange(@as(*const IShellFolderView, @ptrCast(self)), l_param_sort_);
            }
            pub inline fn getArrangeParam(self: *const T, pl_param_sort_: ?*LPARAM) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).GetArrangeParam(@as(*const IShellFolderView, @ptrCast(self)), pl_param_sort_);
            }
            pub inline fn arrangeGrid(self: *const T) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).ArrangeGrid(@as(*const IShellFolderView, @ptrCast(self)));
            }
            pub inline fn autoArrange(self: *const T) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).AutoArrange(@as(*const IShellFolderView, @ptrCast(self)));
            }
            pub inline fn getAutoArrange(self: *const T) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).GetAutoArrange(@as(*const IShellFolderView, @ptrCast(self)));
            }
            pub inline fn addObject(self: *const T, pidl_: ?*ITEMIDLIST, pu_item_: ?*u32) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).AddObject(@as(*const IShellFolderView, @ptrCast(self)), pidl_, pu_item_);
            }
            pub inline fn getObject(self: *const T, ppidl_: ?*?*ITEMIDLIST, u_item_: u32) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).GetObject(@as(*const IShellFolderView, @ptrCast(self)), ppidl_, u_item_);
            }
            pub inline fn removeObject(self: *const T, pidl_: ?*ITEMIDLIST, pu_item_: ?*u32) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).RemoveObject(@as(*const IShellFolderView, @ptrCast(self)), pidl_, pu_item_);
            }
            pub inline fn getObjectCount(self: *const T, pu_count_: ?*u32) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).GetObjectCount(@as(*const IShellFolderView, @ptrCast(self)), pu_count_);
            }
            pub inline fn setObjectCount(self: *const T, u_count_: u32, dw_flags_: u32) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).SetObjectCount(@as(*const IShellFolderView, @ptrCast(self)), u_count_, dw_flags_);
            }
            pub inline fn updateObject(self: *const T, pidl_old_: ?*ITEMIDLIST, pidl_new_: ?*ITEMIDLIST, pu_item_: ?*u32) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).UpdateObject(@as(*const IShellFolderView, @ptrCast(self)), pidl_old_, pidl_new_, pu_item_);
            }
            pub inline fn refreshObject(self: *const T, pidl_: ?*ITEMIDLIST, pu_item_: ?*u32) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).RefreshObject(@as(*const IShellFolderView, @ptrCast(self)), pidl_, pu_item_);
            }
            pub inline fn setRedraw(self: *const T, b_redraw_: BOOL) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).SetRedraw(@as(*const IShellFolderView, @ptrCast(self)), b_redraw_);
            }
            pub inline fn getSelectedCount(self: *const T, pu_selected_: ?*u32) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).GetSelectedCount(@as(*const IShellFolderView, @ptrCast(self)), pu_selected_);
            }
            pub inline fn getSelectedObjects(self: *const T, pppidl_: ?*?*?*ITEMIDLIST, pu_items_: ?*u32) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).GetSelectedObjects(@as(*const IShellFolderView, @ptrCast(self)), pppidl_, pu_items_);
            }
            pub inline fn isDropOnSource(self: *const T, p_drop_target_: ?*IDropTarget) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).IsDropOnSource(@as(*const IShellFolderView, @ptrCast(self)), p_drop_target_);
            }
            pub inline fn getDragPoint(self: *const T, ppt_: ?*POINT) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).GetDragPoint(@as(*const IShellFolderView, @ptrCast(self)), ppt_);
            }
            pub inline fn getDropPoint(self: *const T, ppt_: ?*POINT) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).GetDropPoint(@as(*const IShellFolderView, @ptrCast(self)), ppt_);
            }
            pub inline fn moveIcons(self: *const T, p_data_object_: ?*IDataObject) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).MoveIcons(@as(*const IShellFolderView, @ptrCast(self)), p_data_object_);
            }
            pub inline fn setItemPos(self: *const T, pidl_: ?*ITEMIDLIST, ppt_: ?*POINT) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).SetItemPos(@as(*const IShellFolderView, @ptrCast(self)), pidl_, ppt_);
            }
            pub inline fn isBkDropTarget(self: *const T, p_drop_target_: ?*IDropTarget) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).IsBkDropTarget(@as(*const IShellFolderView, @ptrCast(self)), p_drop_target_);
            }
            pub inline fn setClipboard(self: *const T, b_move_: BOOL) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).SetClipboard(@as(*const IShellFolderView, @ptrCast(self)), b_move_);
            }
            pub inline fn setPoints(self: *const T, p_data_object_: ?*IDataObject) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).SetPoints(@as(*const IShellFolderView, @ptrCast(self)), p_data_object_);
            }
            pub inline fn getItemSpacing(self: *const T, p_spacing_: ?*ITEMSPACING) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).GetItemSpacing(@as(*const IShellFolderView, @ptrCast(self)), p_spacing_);
            }
            pub inline fn setCallback(self: *const T, p_new_c_b_: ?*IShellFolderViewCB, pp_old_c_b_: ?*?*IShellFolderViewCB) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).SetCallback(@as(*const IShellFolderView, @ptrCast(self)), p_new_c_b_, pp_old_c_b_);
            }
            pub inline fn select(self: *const T, dw_flags_: SFVS_SELECT) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).Select(@as(*const IShellFolderView, @ptrCast(self)), dw_flags_);
            }
            pub inline fn querySupport(self: *const T, pdw_support_: ?*u32) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).QuerySupport(@as(*const IShellFolderView, @ptrCast(self)), pdw_support_);
            }
            pub inline fn setAutomationObject(self: *const T, pdisp_: ?*IDispatch) HRESULT {
                return @as(*const IShellFolderView.VTable, @ptrCast(self.vtable)).SetAutomationObject(@as(*const IShellFolderView, @ptrCast(self)), pdisp_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SFV_CREATE = extern struct {
    cbSize: u32,
    pshf: ?*IShellFolder,
    psvOuter: ?*IShellView,
    psfvcb: ?*IShellFolderViewCB,
};

pub const LPFNDFMCALLBACK = *const fn (
    psf: ?*IShellFolder,
    hwnd: ?HWND,
    pdtobj: ?*IDataObject,
    u_msg: u32,
    w_param: WPARAM,
    l_param: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const DEFCONTEXTMENU = extern struct {
    hwnd: ?HWND,
    pcmcb: ?*IContextMenuCB,
    pidlFolder: ?*ITEMIDLIST,
    psf: ?*IShellFolder,
    cidl: u32,
    apidl: ?*?*ITEMIDLIST,
    punkAssociationInfo: ?*IUnknown,
    cKeys: u32,
    aKeys: ?*const ?HKEY,
};

pub const DFMICS = extern struct {
    cbSize: u32,
    fMask: u32,
    lParam: LPARAM,
    idCmdFirst: u32,
    idDefMax: u32,
    pici: ?*CMINVOKECOMMANDINFO,
    punkSite: ?*IUnknown,
};

pub const LPFNVIEWCALLBACK = *const fn (
    psv_outer: ?*IShellView,
    psf: ?*IShellFolder,
    hwnd_main: ?HWND,
    u_msg: u32,
    w_param: WPARAM,
    l_param: LPARAM,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const CSFV = extern struct {
    cbSize: u32,
    pshf: ?*IShellFolder,
    psvOuter: ?*IShellView,
    pidl: ?*ITEMIDLIST,
    lEvents: i32,
    pfnCallback: ?LPFNVIEWCALLBACK,
    fvm: FOLDERVIEWMODE,
};

pub const SHELLSTATEA = extern struct {
    _bitfield1: i32 align(1),
    dwWin95Unused: u32 align(1),
    uWin95Unused: u32 align(1),
    lParamSort: i32 align(1),
    iSortDirection: i32 align(1),
    version: u32 align(1),
    uNotUsed: u32 align(1),
    _bitfield2: i32 align(1),
};

pub const SHELLSTATEW = extern struct {
    _bitfield1: i32 align(1),
    dwWin95Unused: u32 align(1),
    uWin95Unused: u32 align(1),
    lParamSort: i32 align(1),
    iSortDirection: i32 align(1),
    version: u32 align(1),
    uNotUsed: u32 align(1),
    _bitfield2: i32 align(1),
};

pub const SHELLFLAGSTATE = extern struct {
    _bitfield: i32 align(1),
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INamedPropertyBag_Value = Guid.initString("fb700430-952c-11d1-946f-000000000000");
pub const IID_INamedPropertyBag = &IID_INamedPropertyBag_Value;
pub const INamedPropertyBag = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReadPropertyNPB: *const fn (
            self: *const INamedPropertyBag,
            psz_bagname: ?[*:0]const u16,
            psz_prop_name: ?[*:0]const u16,
            p_var: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WritePropertyNPB: *const fn (
            self: *const INamedPropertyBag,
            psz_bagname: ?[*:0]const u16,
            psz_prop_name: ?[*:0]const u16,
            p_var: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemovePropertyNPB: *const fn (
            self: *const INamedPropertyBag,
            psz_bagname: ?[*:0]const u16,
            psz_prop_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn readPropertyNPB(self: *const T, psz_bagname_: ?[*:0]const u16, psz_prop_name_: ?[*:0]const u16, p_var_: ?*PROPVARIANT) HRESULT {
                return @as(*const INamedPropertyBag.VTable, @ptrCast(self.vtable)).ReadPropertyNPB(@as(*const INamedPropertyBag, @ptrCast(self)), psz_bagname_, psz_prop_name_, p_var_);
            }
            pub inline fn writePropertyNPB(self: *const T, psz_bagname_: ?[*:0]const u16, psz_prop_name_: ?[*:0]const u16, p_var_: ?*PROPVARIANT) HRESULT {
                return @as(*const INamedPropertyBag.VTable, @ptrCast(self.vtable)).WritePropertyNPB(@as(*const INamedPropertyBag, @ptrCast(self)), psz_bagname_, psz_prop_name_, p_var_);
            }
            pub inline fn removePropertyNPB(self: *const T, psz_bagname_: ?[*:0]const u16, psz_prop_name_: ?[*:0]const u16) HRESULT {
                return @as(*const INamedPropertyBag.VTable, @ptrCast(self.vtable)).RemovePropertyNPB(@as(*const INamedPropertyBag, @ptrCast(self)), psz_bagname_, psz_prop_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const IESHORTCUTFLAGS = enum(i32) {
    NEWBROWSER = 1,
    OPENNEWTAB = 2,
    FORCENAVIGATE = 4,
    BACKGROUNDTAB = 8,
};
pub const IESHORTCUT_NEWBROWSER = IESHORTCUTFLAGS.NEWBROWSER;
pub const IESHORTCUT_OPENNEWTAB = IESHORTCUTFLAGS.OPENNEWTAB;
pub const IESHORTCUT_FORCENAVIGATE = IESHORTCUTFLAGS.FORCENAVIGATE;
pub const IESHORTCUT_BACKGROUNDTAB = IESHORTCUTFLAGS.BACKGROUNDTAB;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INewShortcutHookA_Value = Guid.initString("000214e1-0000-0000-c000-000000000046");
pub const IID_INewShortcutHookA = &IID_INewShortcutHookA_Value;
pub const INewShortcutHookA = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetReferent: *const fn (
            self: *const INewShortcutHookA,
            pcsz_referent: ?[*:0]const u8,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReferent: *const fn (
            self: *const INewShortcutHookA,
            psz_referent: [*:0]u8,
            cch_referent: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolder: *const fn (
            self: *const INewShortcutHookA,
            pcsz_folder: ?[*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolder: *const fn (
            self: *const INewShortcutHookA,
            psz_folder: [*:0]u8,
            cch_folder: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn (
            self: *const INewShortcutHookA,
            psz_name: [*:0]u8,
            cch_name: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExtension: *const fn (
            self: *const INewShortcutHookA,
            psz_extension: [*:0]u8,
            cch_extension: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setReferent(self: *const T, pcsz_referent_: ?[*:0]const u8, hwnd_: ?HWND) HRESULT {
                return @as(*const INewShortcutHookA.VTable, @ptrCast(self.vtable)).SetReferent(@as(*const INewShortcutHookA, @ptrCast(self)), pcsz_referent_, hwnd_);
            }
            pub inline fn getReferent(self: *const T, psz_referent_: [*:0]u8, cch_referent_: i32) HRESULT {
                return @as(*const INewShortcutHookA.VTable, @ptrCast(self.vtable)).GetReferent(@as(*const INewShortcutHookA, @ptrCast(self)), psz_referent_, cch_referent_);
            }
            pub inline fn setFolder(self: *const T, pcsz_folder_: ?[*:0]const u8) HRESULT {
                return @as(*const INewShortcutHookA.VTable, @ptrCast(self.vtable)).SetFolder(@as(*const INewShortcutHookA, @ptrCast(self)), pcsz_folder_);
            }
            pub inline fn getFolder(self: *const T, psz_folder_: [*:0]u8, cch_folder_: i32) HRESULT {
                return @as(*const INewShortcutHookA.VTable, @ptrCast(self.vtable)).GetFolder(@as(*const INewShortcutHookA, @ptrCast(self)), psz_folder_, cch_folder_);
            }
            pub inline fn getName(self: *const T, psz_name_: [*:0]u8, cch_name_: i32) HRESULT {
                return @as(*const INewShortcutHookA.VTable, @ptrCast(self.vtable)).GetName(@as(*const INewShortcutHookA, @ptrCast(self)), psz_name_, cch_name_);
            }
            pub inline fn getExtension(self: *const T, psz_extension_: [*:0]u8, cch_extension_: i32) HRESULT {
                return @as(*const INewShortcutHookA.VTable, @ptrCast(self.vtable)).GetExtension(@as(*const INewShortcutHookA, @ptrCast(self)), psz_extension_, cch_extension_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_INewShortcutHookW_Value = Guid.initString("000214f7-0000-0000-c000-000000000046");
pub const IID_INewShortcutHookW = &IID_INewShortcutHookW_Value;
pub const INewShortcutHookW = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetReferent: *const fn (
            self: *const INewShortcutHookW,
            pcsz_referent: ?[*:0]const u16,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetReferent: *const fn (
            self: *const INewShortcutHookW,
            psz_referent: [*:0]u16,
            cch_referent: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFolder: *const fn (
            self: *const INewShortcutHookW,
            pcsz_folder: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolder: *const fn (
            self: *const INewShortcutHookW,
            psz_folder: [*:0]u16,
            cch_folder: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn (
            self: *const INewShortcutHookW,
            psz_name: [*:0]u16,
            cch_name: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExtension: *const fn (
            self: *const INewShortcutHookW,
            psz_extension: [*:0]u16,
            cch_extension: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setReferent(self: *const T, pcsz_referent_: ?[*:0]const u16, hwnd_: ?HWND) HRESULT {
                return @as(*const INewShortcutHookW.VTable, @ptrCast(self.vtable)).SetReferent(@as(*const INewShortcutHookW, @ptrCast(self)), pcsz_referent_, hwnd_);
            }
            pub inline fn getReferent(self: *const T, psz_referent_: [*:0]u16, cch_referent_: i32) HRESULT {
                return @as(*const INewShortcutHookW.VTable, @ptrCast(self.vtable)).GetReferent(@as(*const INewShortcutHookW, @ptrCast(self)), psz_referent_, cch_referent_);
            }
            pub inline fn setFolder(self: *const T, pcsz_folder_: ?[*:0]const u16) HRESULT {
                return @as(*const INewShortcutHookW.VTable, @ptrCast(self.vtable)).SetFolder(@as(*const INewShortcutHookW, @ptrCast(self)), pcsz_folder_);
            }
            pub inline fn getFolder(self: *const T, psz_folder_: [*:0]u16, cch_folder_: i32) HRESULT {
                return @as(*const INewShortcutHookW.VTable, @ptrCast(self.vtable)).GetFolder(@as(*const INewShortcutHookW, @ptrCast(self)), psz_folder_, cch_folder_);
            }
            pub inline fn getName(self: *const T, psz_name_: [*:0]u16, cch_name_: i32) HRESULT {
                return @as(*const INewShortcutHookW.VTable, @ptrCast(self.vtable)).GetName(@as(*const INewShortcutHookW, @ptrCast(self)), psz_name_, cch_name_);
            }
            pub inline fn getExtension(self: *const T, psz_extension_: [*:0]u16, cch_extension_: i32) HRESULT {
                return @as(*const INewShortcutHookW.VTable, @ptrCast(self.vtable)).GetExtension(@as(*const INewShortcutHookW, @ptrCast(self)), psz_extension_, cch_extension_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICopyHookA_Value = Guid.initString("000214ef-0000-0000-c000-000000000046");
pub const IID_ICopyHookA = &IID_ICopyHookA_Value;
pub const ICopyHookA = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CopyCallback: *const fn (
            self: *const ICopyHookA,
            hwnd: ?HWND,
            w_func: u32,
            w_flags: u32,
            psz_src_file: ?[*:0]const u8,
            dw_src_attribs: u32,
            psz_dest_file: ?[*:0]const u8,
            dw_dest_attribs: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn copyCallback(self: *const T, hwnd_: ?HWND, w_func_: u32, w_flags_: u32, psz_src_file_: ?[*:0]const u8, dw_src_attribs_: u32, psz_dest_file_: ?[*:0]const u8, dw_dest_attribs_: u32) u32 {
                return @as(*const ICopyHookA.VTable, @ptrCast(self.vtable)).CopyCallback(@as(*const ICopyHookA, @ptrCast(self)), hwnd_, w_func_, w_flags_, psz_src_file_, dw_src_attribs_, psz_dest_file_, dw_dest_attribs_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ICopyHookW_Value = Guid.initString("000214fc-0000-0000-c000-000000000046");
pub const IID_ICopyHookW = &IID_ICopyHookW_Value;
pub const ICopyHookW = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CopyCallback: *const fn (
            self: *const ICopyHookW,
            hwnd: ?HWND,
            w_func: u32,
            w_flags: u32,
            psz_src_file: ?[*:0]const u16,
            dw_src_attribs: u32,
            psz_dest_file: ?[*:0]const u16,
            dw_dest_attribs: u32,
        ) callconv(@import("std").os.windows.WINAPI) u32,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn copyCallback(self: *const T, hwnd_: ?HWND, w_func_: u32, w_flags_: u32, psz_src_file_: ?[*:0]const u16, dw_src_attribs_: u32, psz_dest_file_: ?[*:0]const u16, dw_dest_attribs_: u32) u32 {
                return @as(*const ICopyHookW.VTable, @ptrCast(self.vtable)).CopyCallback(@as(*const ICopyHookW, @ptrCast(self)), hwnd_, w_func_, w_flags_, psz_src_file_, dw_src_attribs_, psz_dest_file_, dw_dest_attribs_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ICurrentWorkingDirectory_Value = Guid.initString("91956d21-9276-11d1-921a-006097df5bd4");
pub const IID_ICurrentWorkingDirectory = &IID_ICurrentWorkingDirectory_Value;
pub const ICurrentWorkingDirectory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetDirectory: *const fn (
            self: *const ICurrentWorkingDirectory,
            pwz_path: [*:0]u16,
            cch_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDirectory: *const fn (
            self: *const ICurrentWorkingDirectory,
            pwz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getDirectory(self: *const T, pwz_path_: [*:0]u16, cch_size_: u32) HRESULT {
                return @as(*const ICurrentWorkingDirectory.VTable, @ptrCast(self.vtable)).GetDirectory(@as(*const ICurrentWorkingDirectory, @ptrCast(self)), pwz_path_, cch_size_);
            }
            pub inline fn setDirectory(self: *const T, pwz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const ICurrentWorkingDirectory.VTable, @ptrCast(self.vtable)).SetDirectory(@as(*const ICurrentWorkingDirectory, @ptrCast(self)), pwz_path_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IDockingWindowFrame_Value = Guid.initString("47d2657a-7b27-11d0-8ca9-00a0c92dbfe8");
pub const IID_IDockingWindowFrame = &IID_IDockingWindowFrame_Value;
pub const IDockingWindowFrame = extern struct {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        AddToolbar: *const fn (
            self: *const IDockingWindowFrame,
            punk_src: ?*IUnknown,
            pwsz_item: ?[*:0]const u16,
            dw_add_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveToolbar: *const fn (
            self: *const IDockingWindowFrame,
            punk_src: ?*IUnknown,
            dw_remove_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindToolbar: *const fn (
            self: *const IDockingWindowFrame,
            pwsz_item: ?[*:0]const u16,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOleWindow.MethodMixin(T);
            pub inline fn addToolbar(self: *const T, punk_src_: ?*IUnknown, pwsz_item_: ?[*:0]const u16, dw_add_flags_: u32) HRESULT {
                return @as(*const IDockingWindowFrame.VTable, @ptrCast(self.vtable)).AddToolbar(@as(*const IDockingWindowFrame, @ptrCast(self)), punk_src_, pwsz_item_, dw_add_flags_);
            }
            pub inline fn removeToolbar(self: *const T, punk_src_: ?*IUnknown, dw_remove_flags_: u32) HRESULT {
                return @as(*const IDockingWindowFrame.VTable, @ptrCast(self.vtable)).RemoveToolbar(@as(*const IDockingWindowFrame, @ptrCast(self)), punk_src_, dw_remove_flags_);
            }
            pub inline fn findToolbar(self: *const T, pwsz_item_: ?[*:0]const u16, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IDockingWindowFrame.VTable, @ptrCast(self.vtable)).FindToolbar(@as(*const IDockingWindowFrame, @ptrCast(self)), pwsz_item_, riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IThumbnailCapture_Value = Guid.initString("4ea39266-7211-409f-b622-f63dbd16c533");
pub const IID_IThumbnailCapture = &IID_IThumbnailCapture_Value;
pub const IThumbnailCapture = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CaptureThumbnail: *const fn (
            self: *const IThumbnailCapture,
            p_max_size: ?*const SIZE,
            p_h_t_m_l_doc2: ?*IUnknown,
            phbm_thumbnail: ?*?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn captureThumbnail(self: *const T, p_max_size_: ?*const SIZE, p_h_t_m_l_doc2_: ?*IUnknown, phbm_thumbnail_: ?*?HBITMAP) HRESULT {
                return @as(*const IThumbnailCapture.VTable, @ptrCast(self.vtable)).CaptureThumbnail(@as(*const IThumbnailCapture, @ptrCast(self)), p_max_size_, p_h_t_m_l_doc2_, phbm_thumbnail_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const BANDINFOSFB = extern struct {
    dwMask: u32,
    dwStateMask: u32,
    dwState: u32,
    crBkgnd: u32,
    crBtnLt: u32,
    crBtnDk: u32,
    wViewMode: u16,
    wAlign: u16,
    psf: ?*IShellFolder,
    pidl: ?*ITEMIDLIST,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellFolderBand_Value = Guid.initString("7fe80cc8-c247-11d0-b93a-00a0c90312e1");
pub const IID_IShellFolderBand = &IID_IShellFolderBand_Value;
pub const IShellFolderBand = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InitializeSFB: *const fn (
            self: *const IShellFolderBand,
            psf: ?*IShellFolder,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBandInfoSFB: *const fn (
            self: *const IShellFolderBand,
            pbi: ?*BANDINFOSFB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBandInfoSFB: *const fn (
            self: *const IShellFolderBand,
            pbi: ?*BANDINFOSFB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initializeSFB(self: *const T, psf_: ?*IShellFolder, pidl_: ?*ITEMIDLIST) HRESULT {
                return @as(*const IShellFolderBand.VTable, @ptrCast(self.vtable)).InitializeSFB(@as(*const IShellFolderBand, @ptrCast(self)), psf_, pidl_);
            }
            pub inline fn setBandInfoSFB(self: *const T, pbi_: ?*BANDINFOSFB) HRESULT {
                return @as(*const IShellFolderBand.VTable, @ptrCast(self.vtable)).SetBandInfoSFB(@as(*const IShellFolderBand, @ptrCast(self)), pbi_);
            }
            pub inline fn getBandInfoSFB(self: *const T, pbi_: ?*BANDINFOSFB) HRESULT {
                return @as(*const IShellFolderBand.VTable, @ptrCast(self.vtable)).GetBandInfoSFB(@as(*const IShellFolderBand, @ptrCast(self)), pbi_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IDeskBarClient_Value = Guid.initString("eb0fe175-1a3a-11d0-89b3-00a0c90a90ac");
pub const IID_IDeskBarClient = &IID_IDeskBarClient_Value;
pub const IDeskBarClient = extern struct {
    pub const VTable = extern struct {
        base: IOleWindow.VTable,
        SetDeskBarSite: *const fn (
            self: *const IDeskBarClient,
            punk_site: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetModeDBC: *const fn (
            self: *const IDeskBarClient,
            dw_mode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UIActivateDBC: *const fn (
            self: *const IDeskBarClient,
            dw_state: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSize: *const fn (
            self: *const IDeskBarClient,
            dw_which: u32,
            prc: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IOleWindow.MethodMixin(T);
            pub inline fn setDeskBarSite(self: *const T, punk_site_: ?*IUnknown) HRESULT {
                return @as(*const IDeskBarClient.VTable, @ptrCast(self.vtable)).SetDeskBarSite(@as(*const IDeskBarClient, @ptrCast(self)), punk_site_);
            }
            pub inline fn setModeDBC(self: *const T, dw_mode_: u32) HRESULT {
                return @as(*const IDeskBarClient.VTable, @ptrCast(self.vtable)).SetModeDBC(@as(*const IDeskBarClient, @ptrCast(self)), dw_mode_);
            }
            pub inline fn uiActivateDBC(self: *const T, dw_state_: u32) HRESULT {
                return @as(*const IDeskBarClient.VTable, @ptrCast(self.vtable)).UIActivateDBC(@as(*const IDeskBarClient, @ptrCast(self)), dw_state_);
            }
            pub inline fn getSize(self: *const T, dw_which_: u32, prc_: ?*RECT) HRESULT {
                return @as(*const IDeskBarClient.VTable, @ptrCast(self.vtable)).GetSize(@as(*const IDeskBarClient, @ptrCast(self)), dw_which_, prc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SHCOLUMNINFO = extern struct {
    scid: PROPERTYKEY align(1),
    vt: u16 align(1),
    fmt: u32 align(1),
    cChars: u32 align(1),
    csFlags: u32 align(1),
    wszTitle: [80]u16 align(1),
    wszDescription: [128]u16 align(1),
};

pub const SHCOLUMNINIT = extern struct {
    dwFlags: u32,
    dwReserved: u32,
    wszFolder: [260]u16,
};

pub const SHCOLUMNDATA = extern struct {
    dwFlags: u32,
    dwFileAttributes: u32,
    dwReserved: u32,
    pwszExt: ?PWSTR,
    wszFile: [260]u16,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IColumnProvider_Value = Guid.initString("e8025004-1c42-11d2-be2c-00a0c9a83da1");
pub const IID_IColumnProvider = &IID_IColumnProvider_Value;
pub const IColumnProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IColumnProvider,
            psci: ?*SHCOLUMNINIT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnInfo: *const fn (
            self: *const IColumnProvider,
            dw_index: u32,
            psci: ?*SHCOLUMNINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemData: *const fn (
            self: *const IColumnProvider,
            pscid: ?*PROPERTYKEY,
            pscd: ?*SHCOLUMNDATA,
            pvar_data: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, psci_: ?*SHCOLUMNINIT) HRESULT {
                return @as(*const IColumnProvider.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IColumnProvider, @ptrCast(self)), psci_);
            }
            pub inline fn getColumnInfo(self: *const T, dw_index_: u32, psci_: ?*SHCOLUMNINFO) HRESULT {
                return @as(*const IColumnProvider.VTable, @ptrCast(self.vtable)).GetColumnInfo(@as(*const IColumnProvider, @ptrCast(self)), dw_index_, psci_);
            }
            pub inline fn getItemData(self: *const T, pscid_: ?*PROPERTYKEY, pscd_: ?*SHCOLUMNDATA, pvar_data_: ?*VARIANT) HRESULT {
                return @as(*const IColumnProvider.VTable, @ptrCast(self.vtable)).GetItemData(@as(*const IColumnProvider, @ptrCast(self)), pscid_, pscd_, pvar_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SHChangeProductKeyAsIDList = extern struct {
    cb: u16 align(1),
    wszProductKey: [39]u16 align(1),
    cbZero: u16 align(1),
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IDocViewSite_Value = Guid.initString("87d605e0-c511-11cf-89a9-00a0c9054129");
pub const IID_IDocViewSite = &IID_IDocViewSite_Value;
pub const IDocViewSite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnSetTitle: *const fn (
            self: *const IDocViewSite,
            pv_title: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onSetTitle(self: *const T, pv_title_: ?*VARIANT) HRESULT {
                return @as(*const IDocViewSite.VTable, @ptrCast(self.vtable)).OnSetTitle(@as(*const IDocViewSite, @ptrCast(self)), pv_title_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IInitializeObject_Value = Guid.initString("4622ad16-ff23-11d0-8d34-00a0c90f2719");
pub const IID_IInitializeObject = &IID_IInitializeObject_Value;
pub const IInitializeObject = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IInitializeObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T) HRESULT {
                return @as(*const IInitializeObject.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IInitializeObject, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IBanneredBar_Value = Guid.initString("596a9a94-013e-11d1-8d34-00a0c90f2719");
pub const IID_IBanneredBar = &IID_IBanneredBar_Value;
pub const IBanneredBar = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetIconSize: *const fn (
            self: *const IBanneredBar,
            i_icon: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIconSize: *const fn (
            self: *const IBanneredBar,
            pi_icon: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBitmap: *const fn (
            self: *const IBanneredBar,
            h_bitmap: ?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitmap: *const fn (
            self: *const IBanneredBar,
            ph_bitmap: ?*?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setIconSize(self: *const T, i_icon_: u32) HRESULT {
                return @as(*const IBanneredBar.VTable, @ptrCast(self.vtable)).SetIconSize(@as(*const IBanneredBar, @ptrCast(self)), i_icon_);
            }
            pub inline fn getIconSize(self: *const T, pi_icon_: ?*u32) HRESULT {
                return @as(*const IBanneredBar.VTable, @ptrCast(self.vtable)).GetIconSize(@as(*const IBanneredBar, @ptrCast(self)), pi_icon_);
            }
            pub inline fn setBitmap(self: *const T, h_bitmap_: ?HBITMAP) HRESULT {
                return @as(*const IBanneredBar.VTable, @ptrCast(self.vtable)).SetBitmap(@as(*const IBanneredBar, @ptrCast(self)), h_bitmap_);
            }
            pub inline fn getBitmap(self: *const T, ph_bitmap_: ?*?HBITMAP) HRESULT {
                return @as(*const IBanneredBar.VTable, @ptrCast(self.vtable)).GetBitmap(@as(*const IBanneredBar, @ptrCast(self)), ph_bitmap_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const TBINFO = extern struct {
    cbuttons: u32,
    uFlags: u32,
};

pub const SFV_SETITEMPOS = extern struct {
    pidl: ?*ITEMIDLIST,
    pt: POINT,
};

pub const AASHELLMENUFILENAME = extern struct {
    cbTotal: i16,
    rgbReserved: [12]u8,
    szFileName: [1]u16,
};

pub const AASHELLMENUITEM = extern struct {
    lpReserved1: ?*anyopaque,
    iReserved: i32,
    uiReserved: u32,
    lpName: ?*AASHELLMENUFILENAME,
    psz: ?PWSTR,
};

pub const DISPLAY_DEVICE_TYPE = enum(i32) {
    PRIMARY = 0,
    IMMERSIVE = 1,
};
pub const DEVICE_PRIMARY = DISPLAY_DEVICE_TYPE.PRIMARY;
pub const DEVICE_IMMERSIVE = DISPLAY_DEVICE_TYPE.IMMERSIVE;

pub const SCALE_CHANGE_FLAGS = enum(u32) {
    VALUE_NONE = 0,
    SCALE = 1,
    PHYSICAL = 2,
    _,
    pub fn initFlags(o: struct {
        VALUE_NONE: u1 = 0,
        SCALE: u1 = 0,
        PHYSICAL: u1 = 0,
    }) SCALE_CHANGE_FLAGS {
        return @as(SCALE_CHANGE_FLAGS, @enumFromInt((if (o.VALUE_NONE == 1) @intFromEnum(SCALE_CHANGE_FLAGS.VALUE_NONE) else 0) | (if (o.SCALE == 1) @intFromEnum(SCALE_CHANGE_FLAGS.SCALE) else 0) | (if (o.PHYSICAL == 1) @intFromEnum(SCALE_CHANGE_FLAGS.PHYSICAL) else 0)));
    }
};
pub const SCF_VALUE_NONE = SCALE_CHANGE_FLAGS.VALUE_NONE;
pub const SCF_SCALE = SCALE_CHANGE_FLAGS.SCALE;
pub const SCF_PHYSICAL = SCALE_CHANGE_FLAGS.PHYSICAL;

pub const SHELL_UI_COMPONENT = enum(i32) {
    TASKBARS = 0,
    NOTIFICATIONAREA = 1,
    DESKBAND = 2,
};
pub const SHELL_UI_COMPONENT_TASKBARS = SHELL_UI_COMPONENT.TASKBARS;
pub const SHELL_UI_COMPONENT_NOTIFICATIONAREA = SHELL_UI_COMPONENT.NOTIFICATIONAREA;
pub const SHELL_UI_COMPONENT_DESKBAND = SHELL_UI_COMPONENT.DESKBAND;

pub const ASSOCCLASS = enum(i32) {
    SHELL_KEY = 0,
    PROGID_KEY = 1,
    PROGID_STR = 2,
    CLSID_KEY = 3,
    CLSID_STR = 4,
    APP_KEY = 5,
    APP_STR = 6,
    SYSTEM_STR = 7,
    FOLDER = 8,
    STAR = 9,
    FIXED_PROGID_STR = 10,
    PROTOCOL_STR = 11,
};
pub const ASSOCCLASS_SHELL_KEY = ASSOCCLASS.SHELL_KEY;
pub const ASSOCCLASS_PROGID_KEY = ASSOCCLASS.PROGID_KEY;
pub const ASSOCCLASS_PROGID_STR = ASSOCCLASS.PROGID_STR;
pub const ASSOCCLASS_CLSID_KEY = ASSOCCLASS.CLSID_KEY;
pub const ASSOCCLASS_CLSID_STR = ASSOCCLASS.CLSID_STR;
pub const ASSOCCLASS_APP_KEY = ASSOCCLASS.APP_KEY;
pub const ASSOCCLASS_APP_STR = ASSOCCLASS.APP_STR;
pub const ASSOCCLASS_SYSTEM_STR = ASSOCCLASS.SYSTEM_STR;
pub const ASSOCCLASS_FOLDER = ASSOCCLASS.FOLDER;
pub const ASSOCCLASS_STAR = ASSOCCLASS.STAR;
pub const ASSOCCLASS_FIXED_PROGID_STR = ASSOCCLASS.FIXED_PROGID_STR;
pub const ASSOCCLASS_PROTOCOL_STR = ASSOCCLASS.PROTOCOL_STR;

pub const QUERY_USER_NOTIFICATION_STATE = enum(i32) {
    NOT_PRESENT = 1,
    BUSY = 2,
    RUNNING_D3D_FULL_SCREEN = 3,
    PRESENTATION_MODE = 4,
    ACCEPTS_NOTIFICATIONS = 5,
    QUIET_TIME = 6,
    APP = 7,
};
pub const QUNS_NOT_PRESENT = QUERY_USER_NOTIFICATION_STATE.NOT_PRESENT;
pub const QUNS_BUSY = QUERY_USER_NOTIFICATION_STATE.BUSY;
pub const QUNS_RUNNING_D3D_FULL_SCREEN = QUERY_USER_NOTIFICATION_STATE.RUNNING_D3D_FULL_SCREEN;
pub const QUNS_PRESENTATION_MODE = QUERY_USER_NOTIFICATION_STATE.PRESENTATION_MODE;
pub const QUNS_ACCEPTS_NOTIFICATIONS = QUERY_USER_NOTIFICATION_STATE.ACCEPTS_NOTIFICATIONS;
pub const QUNS_QUIET_TIME = QUERY_USER_NOTIFICATION_STATE.QUIET_TIME;
pub const QUNS_APP = QUERY_USER_NOTIFICATION_STATE.APP;

pub const SHSTOCKICONID = enum(i32) {
    DOCNOASSOC = 0,
    DOCASSOC = 1,
    APPLICATION = 2,
    FOLDER = 3,
    FOLDEROPEN = 4,
    DRIVE525 = 5,
    DRIVE35 = 6,
    DRIVEREMOVE = 7,
    DRIVEFIXED = 8,
    DRIVENET = 9,
    DRIVENETDISABLED = 10,
    DRIVECD = 11,
    DRIVERAM = 12,
    WORLD = 13,
    SERVER = 15,
    PRINTER = 16,
    MYNETWORK = 17,
    FIND = 22,
    HELP = 23,
    SHARE = 28,
    LINK = 29,
    SLOWFILE = 30,
    RECYCLER = 31,
    RECYCLERFULL = 32,
    MEDIACDAUDIO = 40,
    LOCK = 47,
    AUTOLIST = 49,
    PRINTERNET = 50,
    SERVERSHARE = 51,
    PRINTERFAX = 52,
    PRINTERFAXNET = 53,
    PRINTERFILE = 54,
    STACK = 55,
    MEDIASVCD = 56,
    STUFFEDFOLDER = 57,
    DRIVEUNKNOWN = 58,
    DRIVEDVD = 59,
    MEDIADVD = 60,
    MEDIADVDRAM = 61,
    MEDIADVDRW = 62,
    MEDIADVDR = 63,
    MEDIADVDROM = 64,
    MEDIACDAUDIOPLUS = 65,
    MEDIACDRW = 66,
    MEDIACDR = 67,
    MEDIACDBURN = 68,
    MEDIABLANKCD = 69,
    MEDIACDROM = 70,
    AUDIOFILES = 71,
    IMAGEFILES = 72,
    VIDEOFILES = 73,
    MIXEDFILES = 74,
    FOLDERBACK = 75,
    FOLDERFRONT = 76,
    SHIELD = 77,
    WARNING = 78,
    INFO = 79,
    ERROR = 80,
    KEY = 81,
    SOFTWARE = 82,
    RENAME = 83,
    DELETE = 84,
    MEDIAAUDIODVD = 85,
    MEDIAMOVIEDVD = 86,
    MEDIAENHANCEDCD = 87,
    MEDIAENHANCEDDVD = 88,
    MEDIAHDDVD = 89,
    MEDIABLURAY = 90,
    MEDIAVCD = 91,
    MEDIADVDPLUSR = 92,
    MEDIADVDPLUSRW = 93,
    DESKTOPPC = 94,
    MOBILEPC = 95,
    USERS = 96,
    MEDIASMARTMEDIA = 97,
    MEDIACOMPACTFLASH = 98,
    DEVICECELLPHONE = 99,
    DEVICECAMERA = 100,
    DEVICEVIDEOCAMERA = 101,
    DEVICEAUDIOPLAYER = 102,
    NETWORKCONNECT = 103,
    INTERNET = 104,
    ZIPFILE = 105,
    SETTINGS = 106,
    DRIVEHDDVD = 132,
    DRIVEBD = 133,
    MEDIAHDDVDROM = 134,
    MEDIAHDDVDR = 135,
    MEDIAHDDVDRAM = 136,
    MEDIABDROM = 137,
    MEDIABDR = 138,
    MEDIABDRE = 139,
    CLUSTEREDDRIVE = 140,
    MAX_ICONS = 181,
};
pub const SIID_DOCNOASSOC = SHSTOCKICONID.DOCNOASSOC;
pub const SIID_DOCASSOC = SHSTOCKICONID.DOCASSOC;
pub const SIID_APPLICATION = SHSTOCKICONID.APPLICATION;
pub const SIID_FOLDER = SHSTOCKICONID.FOLDER;
pub const SIID_FOLDEROPEN = SHSTOCKICONID.FOLDEROPEN;
pub const SIID_DRIVE525 = SHSTOCKICONID.DRIVE525;
pub const SIID_DRIVE35 = SHSTOCKICONID.DRIVE35;
pub const SIID_DRIVEREMOVE = SHSTOCKICONID.DRIVEREMOVE;
pub const SIID_DRIVEFIXED = SHSTOCKICONID.DRIVEFIXED;
pub const SIID_DRIVENET = SHSTOCKICONID.DRIVENET;
pub const SIID_DRIVENETDISABLED = SHSTOCKICONID.DRIVENETDISABLED;
pub const SIID_DRIVECD = SHSTOCKICONID.DRIVECD;
pub const SIID_DRIVERAM = SHSTOCKICONID.DRIVERAM;
pub const SIID_WORLD = SHSTOCKICONID.WORLD;
pub const SIID_SERVER = SHSTOCKICONID.SERVER;
pub const SIID_PRINTER = SHSTOCKICONID.PRINTER;
pub const SIID_MYNETWORK = SHSTOCKICONID.MYNETWORK;
pub const SIID_FIND = SHSTOCKICONID.FIND;
pub const SIID_HELP = SHSTOCKICONID.HELP;
pub const SIID_SHARE = SHSTOCKICONID.SHARE;
pub const SIID_LINK = SHSTOCKICONID.LINK;
pub const SIID_SLOWFILE = SHSTOCKICONID.SLOWFILE;
pub const SIID_RECYCLER = SHSTOCKICONID.RECYCLER;
pub const SIID_RECYCLERFULL = SHSTOCKICONID.RECYCLERFULL;
pub const SIID_MEDIACDAUDIO = SHSTOCKICONID.MEDIACDAUDIO;
pub const SIID_LOCK = SHSTOCKICONID.LOCK;
pub const SIID_AUTOLIST = SHSTOCKICONID.AUTOLIST;
pub const SIID_PRINTERNET = SHSTOCKICONID.PRINTERNET;
pub const SIID_SERVERSHARE = SHSTOCKICONID.SERVERSHARE;
pub const SIID_PRINTERFAX = SHSTOCKICONID.PRINTERFAX;
pub const SIID_PRINTERFAXNET = SHSTOCKICONID.PRINTERFAXNET;
pub const SIID_PRINTERFILE = SHSTOCKICONID.PRINTERFILE;
pub const SIID_STACK = SHSTOCKICONID.STACK;
pub const SIID_MEDIASVCD = SHSTOCKICONID.MEDIASVCD;
pub const SIID_STUFFEDFOLDER = SHSTOCKICONID.STUFFEDFOLDER;
pub const SIID_DRIVEUNKNOWN = SHSTOCKICONID.DRIVEUNKNOWN;
pub const SIID_DRIVEDVD = SHSTOCKICONID.DRIVEDVD;
pub const SIID_MEDIADVD = SHSTOCKICONID.MEDIADVD;
pub const SIID_MEDIADVDRAM = SHSTOCKICONID.MEDIADVDRAM;
pub const SIID_MEDIADVDRW = SHSTOCKICONID.MEDIADVDRW;
pub const SIID_MEDIADVDR = SHSTOCKICONID.MEDIADVDR;
pub const SIID_MEDIADVDROM = SHSTOCKICONID.MEDIADVDROM;
pub const SIID_MEDIACDAUDIOPLUS = SHSTOCKICONID.MEDIACDAUDIOPLUS;
pub const SIID_MEDIACDRW = SHSTOCKICONID.MEDIACDRW;
pub const SIID_MEDIACDR = SHSTOCKICONID.MEDIACDR;
pub const SIID_MEDIACDBURN = SHSTOCKICONID.MEDIACDBURN;
pub const SIID_MEDIABLANKCD = SHSTOCKICONID.MEDIABLANKCD;
pub const SIID_MEDIACDROM = SHSTOCKICONID.MEDIACDROM;
pub const SIID_AUDIOFILES = SHSTOCKICONID.AUDIOFILES;
pub const SIID_IMAGEFILES = SHSTOCKICONID.IMAGEFILES;
pub const SIID_VIDEOFILES = SHSTOCKICONID.VIDEOFILES;
pub const SIID_MIXEDFILES = SHSTOCKICONID.MIXEDFILES;
pub const SIID_FOLDERBACK = SHSTOCKICONID.FOLDERBACK;
pub const SIID_FOLDERFRONT = SHSTOCKICONID.FOLDERFRONT;
pub const SIID_SHIELD = SHSTOCKICONID.SHIELD;
pub const SIID_WARNING = SHSTOCKICONID.WARNING;
pub const SIID_INFO = SHSTOCKICONID.INFO;
pub const SIID_ERROR = SHSTOCKICONID.ERROR;
pub const SIID_KEY = SHSTOCKICONID.KEY;
pub const SIID_SOFTWARE = SHSTOCKICONID.SOFTWARE;
pub const SIID_RENAME = SHSTOCKICONID.RENAME;
pub const SIID_DELETE = SHSTOCKICONID.DELETE;
pub const SIID_MEDIAAUDIODVD = SHSTOCKICONID.MEDIAAUDIODVD;
pub const SIID_MEDIAMOVIEDVD = SHSTOCKICONID.MEDIAMOVIEDVD;
pub const SIID_MEDIAENHANCEDCD = SHSTOCKICONID.MEDIAENHANCEDCD;
pub const SIID_MEDIAENHANCEDDVD = SHSTOCKICONID.MEDIAENHANCEDDVD;
pub const SIID_MEDIAHDDVD = SHSTOCKICONID.MEDIAHDDVD;
pub const SIID_MEDIABLURAY = SHSTOCKICONID.MEDIABLURAY;
pub const SIID_MEDIAVCD = SHSTOCKICONID.MEDIAVCD;
pub const SIID_MEDIADVDPLUSR = SHSTOCKICONID.MEDIADVDPLUSR;
pub const SIID_MEDIADVDPLUSRW = SHSTOCKICONID.MEDIADVDPLUSRW;
pub const SIID_DESKTOPPC = SHSTOCKICONID.DESKTOPPC;
pub const SIID_MOBILEPC = SHSTOCKICONID.MOBILEPC;
pub const SIID_USERS = SHSTOCKICONID.USERS;
pub const SIID_MEDIASMARTMEDIA = SHSTOCKICONID.MEDIASMARTMEDIA;
pub const SIID_MEDIACOMPACTFLASH = SHSTOCKICONID.MEDIACOMPACTFLASH;
pub const SIID_DEVICECELLPHONE = SHSTOCKICONID.DEVICECELLPHONE;
pub const SIID_DEVICECAMERA = SHSTOCKICONID.DEVICECAMERA;
pub const SIID_DEVICEVIDEOCAMERA = SHSTOCKICONID.DEVICEVIDEOCAMERA;
pub const SIID_DEVICEAUDIOPLAYER = SHSTOCKICONID.DEVICEAUDIOPLAYER;
pub const SIID_NETWORKCONNECT = SHSTOCKICONID.NETWORKCONNECT;
pub const SIID_INTERNET = SHSTOCKICONID.INTERNET;
pub const SIID_ZIPFILE = SHSTOCKICONID.ZIPFILE;
pub const SIID_SETTINGS = SHSTOCKICONID.SETTINGS;
pub const SIID_DRIVEHDDVD = SHSTOCKICONID.DRIVEHDDVD;
pub const SIID_DRIVEBD = SHSTOCKICONID.DRIVEBD;
pub const SIID_MEDIAHDDVDROM = SHSTOCKICONID.MEDIAHDDVDROM;
pub const SIID_MEDIAHDDVDR = SHSTOCKICONID.MEDIAHDDVDR;
pub const SIID_MEDIAHDDVDRAM = SHSTOCKICONID.MEDIAHDDVDRAM;
pub const SIID_MEDIABDROM = SHSTOCKICONID.MEDIABDROM;
pub const SIID_MEDIABDR = SHSTOCKICONID.MEDIABDR;
pub const SIID_MEDIABDRE = SHSTOCKICONID.MEDIABDRE;
pub const SIID_CLUSTEREDDRIVE = SHSTOCKICONID.CLUSTEREDDRIVE;
pub const SIID_MAX_ICONS = SHSTOCKICONID.MAX_ICONS;

pub const PFNCANSHAREFOLDERW = *const fn (
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const PFNSHOWSHAREFOLDERUIW = *const fn (
    hwnd_parent: ?HWND,
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const NC_ADDRESS = extern struct {
    pub const NET_ADDRESS_INFO = extern struct {
        placeholder: usize, // TODO: why is this type empty?
    };
    pAddrInfo: ?*NET_ADDRESS_INFO,
    PortNumber: u16,
    PrefixLength: u8,
};

pub const SFBS_FLAGS = enum(i32) {
    ROUND_TO_NEAREST_DISPLAYED_DIGIT = 1,
    TRUNCATE_UNDISPLAYED_DECIMAL_DIGITS = 2,
};
pub const SFBS_FLAGS_ROUND_TO_NEAREST_DISPLAYED_DIGIT = SFBS_FLAGS.ROUND_TO_NEAREST_DISPLAYED_DIGIT;
pub const SFBS_FLAGS_TRUNCATE_UNDISPLAYED_DECIMAL_DIGITS = SFBS_FLAGS.TRUNCATE_UNDISPLAYED_DECIMAL_DIGITS;

pub const URL_SCHEME = enum(i32) {
    INVALID = -1,
    UNKNOWN = 0,
    FTP = 1,
    HTTP = 2,
    GOPHER = 3,
    MAILTO = 4,
    NEWS = 5,
    NNTP = 6,
    TELNET = 7,
    WAIS = 8,
    FILE = 9,
    MK = 10,
    HTTPS = 11,
    SHELL = 12,
    SNEWS = 13,
    LOCAL = 14,
    JAVASCRIPT = 15,
    VBSCRIPT = 16,
    ABOUT = 17,
    RES = 18,
    MSSHELLROOTED = 19,
    MSSHELLIDLIST = 20,
    MSHELP = 21,
    MSSHELLDEVICE = 22,
    WILDCARD = 23,
    SEARCH_MS = 24,
    SEARCH = 25,
    KNOWNFOLDER = 26,
    MAXVALUE = 27,
};
pub const URL_SCHEME_INVALID = URL_SCHEME.INVALID;
pub const URL_SCHEME_UNKNOWN = URL_SCHEME.UNKNOWN;
pub const URL_SCHEME_FTP = URL_SCHEME.FTP;
pub const URL_SCHEME_HTTP = URL_SCHEME.HTTP;
pub const URL_SCHEME_GOPHER = URL_SCHEME.GOPHER;
pub const URL_SCHEME_MAILTO = URL_SCHEME.MAILTO;
pub const URL_SCHEME_NEWS = URL_SCHEME.NEWS;
pub const URL_SCHEME_NNTP = URL_SCHEME.NNTP;
pub const URL_SCHEME_TELNET = URL_SCHEME.TELNET;
pub const URL_SCHEME_WAIS = URL_SCHEME.WAIS;
pub const URL_SCHEME_FILE = URL_SCHEME.FILE;
pub const URL_SCHEME_MK = URL_SCHEME.MK;
pub const URL_SCHEME_HTTPS = URL_SCHEME.HTTPS;
pub const URL_SCHEME_SHELL = URL_SCHEME.SHELL;
pub const URL_SCHEME_SNEWS = URL_SCHEME.SNEWS;
pub const URL_SCHEME_LOCAL = URL_SCHEME.LOCAL;
pub const URL_SCHEME_JAVASCRIPT = URL_SCHEME.JAVASCRIPT;
pub const URL_SCHEME_VBSCRIPT = URL_SCHEME.VBSCRIPT;
pub const URL_SCHEME_ABOUT = URL_SCHEME.ABOUT;
pub const URL_SCHEME_RES = URL_SCHEME.RES;
pub const URL_SCHEME_MSSHELLROOTED = URL_SCHEME.MSSHELLROOTED;
pub const URL_SCHEME_MSSHELLIDLIST = URL_SCHEME.MSSHELLIDLIST;
pub const URL_SCHEME_MSHELP = URL_SCHEME.MSHELP;
pub const URL_SCHEME_MSSHELLDEVICE = URL_SCHEME.MSSHELLDEVICE;
pub const URL_SCHEME_WILDCARD = URL_SCHEME.WILDCARD;
pub const URL_SCHEME_SEARCH_MS = URL_SCHEME.SEARCH_MS;
pub const URL_SCHEME_SEARCH = URL_SCHEME.SEARCH;
pub const URL_SCHEME_KNOWNFOLDER = URL_SCHEME.KNOWNFOLDER;
pub const URL_SCHEME_MAXVALUE = URL_SCHEME.MAXVALUE;

pub const URL_PART = enum(i32) {
    NONE = 0,
    SCHEME = 1,
    HOSTNAME = 2,
    USERNAME = 3,
    PASSWORD = 4,
    PORT = 5,
    QUERY = 6,
};
pub const URL_PART_NONE = URL_PART.NONE;
pub const URL_PART_SCHEME = URL_PART.SCHEME;
pub const URL_PART_HOSTNAME = URL_PART.HOSTNAME;
pub const URL_PART_USERNAME = URL_PART.USERNAME;
pub const URL_PART_PASSWORD = URL_PART.PASSWORD;
pub const URL_PART_PORT = URL_PART.PORT;
pub const URL_PART_QUERY = URL_PART.QUERY;

pub const URLIS = enum(i32) {
    URL = 0,
    OPAQUE = 1,
    NOHISTORY = 2,
    FILEURL = 3,
    APPLIABLE = 4,
    DIRECTORY = 5,
    HASQUERY = 6,
};
pub const URLIS_URL = URLIS.URL;
pub const URLIS_OPAQUE = URLIS.OPAQUE;
pub const URLIS_NOHISTORY = URLIS.NOHISTORY;
pub const URLIS_FILEURL = URLIS.FILEURL;
pub const URLIS_APPLIABLE = URLIS.APPLIABLE;
pub const URLIS_DIRECTORY = URLIS.DIRECTORY;
pub const URLIS_HASQUERY = URLIS.HASQUERY;

pub const PARSEDURLA = extern struct {
    cbSize: u32,
    pszProtocol: ?[*:0]const u8,
    cchProtocol: u32,
    pszSuffix: ?[*:0]const u8,
    cchSuffix: u32,
    nScheme: u32,
};

pub const PARSEDURLW = extern struct {
    cbSize: u32,
    pszProtocol: ?[*:0]const u16,
    cchProtocol: u32,
    pszSuffix: ?[*:0]const u16,
    cchSuffix: u32,
    nScheme: u32,
};

pub const SHREGDEL_FLAGS = enum(i32) {
    DEFAULT = 0,
    HKCU = 1,
    HKLM = 16,
    BOTH = 17,
};
pub const SHREGDEL_DEFAULT = SHREGDEL_FLAGS.DEFAULT;
pub const SHREGDEL_HKCU = SHREGDEL_FLAGS.HKCU;
pub const SHREGDEL_HKLM = SHREGDEL_FLAGS.HKLM;
pub const SHREGDEL_BOTH = SHREGDEL_FLAGS.BOTH;

pub const SHREGENUM_FLAGS = enum(i32) {
    DEFAULT = 0,
    HKCU = 1,
    HKLM = 16,
    BOTH = 17,
};
pub const SHREGENUM_DEFAULT = SHREGENUM_FLAGS.DEFAULT;
pub const SHREGENUM_HKCU = SHREGENUM_FLAGS.HKCU;
pub const SHREGENUM_HKLM = SHREGENUM_FLAGS.HKLM;
pub const SHREGENUM_BOTH = SHREGENUM_FLAGS.BOTH;

pub const ASSOCSTR = enum(i32) {
    COMMAND = 1,
    EXECUTABLE = 2,
    FRIENDLYDOCNAME = 3,
    FRIENDLYAPPNAME = 4,
    NOOPEN = 5,
    SHELLNEWVALUE = 6,
    DDECOMMAND = 7,
    DDEIFEXEC = 8,
    DDEAPPLICATION = 9,
    DDETOPIC = 10,
    INFOTIP = 11,
    QUICKTIP = 12,
    TILEINFO = 13,
    CONTENTTYPE = 14,
    DEFAULTICON = 15,
    SHELLEXTENSION = 16,
    DROPTARGET = 17,
    DELEGATEEXECUTE = 18,
    SUPPORTED_URI_PROTOCOLS = 19,
    PROGID = 20,
    APPID = 21,
    APPPUBLISHER = 22,
    APPICONREFERENCE = 23,
    MAX = 24,
};
pub const ASSOCSTR_COMMAND = ASSOCSTR.COMMAND;
pub const ASSOCSTR_EXECUTABLE = ASSOCSTR.EXECUTABLE;
pub const ASSOCSTR_FRIENDLYDOCNAME = ASSOCSTR.FRIENDLYDOCNAME;
pub const ASSOCSTR_FRIENDLYAPPNAME = ASSOCSTR.FRIENDLYAPPNAME;
pub const ASSOCSTR_NOOPEN = ASSOCSTR.NOOPEN;
pub const ASSOCSTR_SHELLNEWVALUE = ASSOCSTR.SHELLNEWVALUE;
pub const ASSOCSTR_DDECOMMAND = ASSOCSTR.DDECOMMAND;
pub const ASSOCSTR_DDEIFEXEC = ASSOCSTR.DDEIFEXEC;
pub const ASSOCSTR_DDEAPPLICATION = ASSOCSTR.DDEAPPLICATION;
pub const ASSOCSTR_DDETOPIC = ASSOCSTR.DDETOPIC;
pub const ASSOCSTR_INFOTIP = ASSOCSTR.INFOTIP;
pub const ASSOCSTR_QUICKTIP = ASSOCSTR.QUICKTIP;
pub const ASSOCSTR_TILEINFO = ASSOCSTR.TILEINFO;
pub const ASSOCSTR_CONTENTTYPE = ASSOCSTR.CONTENTTYPE;
pub const ASSOCSTR_DEFAULTICON = ASSOCSTR.DEFAULTICON;
pub const ASSOCSTR_SHELLEXTENSION = ASSOCSTR.SHELLEXTENSION;
pub const ASSOCSTR_DROPTARGET = ASSOCSTR.DROPTARGET;
pub const ASSOCSTR_DELEGATEEXECUTE = ASSOCSTR.DELEGATEEXECUTE;
pub const ASSOCSTR_SUPPORTED_URI_PROTOCOLS = ASSOCSTR.SUPPORTED_URI_PROTOCOLS;
pub const ASSOCSTR_PROGID = ASSOCSTR.PROGID;
pub const ASSOCSTR_APPID = ASSOCSTR.APPID;
pub const ASSOCSTR_APPPUBLISHER = ASSOCSTR.APPPUBLISHER;
pub const ASSOCSTR_APPICONREFERENCE = ASSOCSTR.APPICONREFERENCE;
pub const ASSOCSTR_MAX = ASSOCSTR.MAX;

pub const ASSOCKEY = enum(i32) {
    SHELLEXECCLASS = 1,
    APP = 2,
    CLASS = 3,
    BASECLASS = 4,
    MAX = 5,
};
pub const ASSOCKEY_SHELLEXECCLASS = ASSOCKEY.SHELLEXECCLASS;
pub const ASSOCKEY_APP = ASSOCKEY.APP;
pub const ASSOCKEY_CLASS = ASSOCKEY.CLASS;
pub const ASSOCKEY_BASECLASS = ASSOCKEY.BASECLASS;
pub const ASSOCKEY_MAX = ASSOCKEY.MAX;

pub const ASSOCDATA = enum(i32) {
    MSIDESCRIPTOR = 1,
    NOACTIVATEHANDLER = 2,
    UNUSED1 = 3,
    HASPERUSERASSOC = 4,
    EDITFLAGS = 5,
    VALUE = 6,
    MAX = 7,
};
pub const ASSOCDATA_MSIDESCRIPTOR = ASSOCDATA.MSIDESCRIPTOR;
pub const ASSOCDATA_NOACTIVATEHANDLER = ASSOCDATA.NOACTIVATEHANDLER;
pub const ASSOCDATA_UNUSED1 = ASSOCDATA.UNUSED1;
pub const ASSOCDATA_HASPERUSERASSOC = ASSOCDATA.HASPERUSERASSOC;
pub const ASSOCDATA_EDITFLAGS = ASSOCDATA.EDITFLAGS;
pub const ASSOCDATA_VALUE = ASSOCDATA.VALUE;
pub const ASSOCDATA_MAX = ASSOCDATA.MAX;

pub const ASSOCENUM = enum(i32) {
    E = 0,
};
pub const ASSOCENUM_NONE = ASSOCENUM.E;

pub const FILETYPEATTRIBUTEFLAGS = enum(i32) {
    None = 0,
    Exclude = 1,
    Show = 2,
    HasExtension = 4,
    NoEdit = 8,
    NoRemove = 16,
    NoNewVerb = 32,
    NoEditVerb = 64,
    NoRemoveVerb = 128,
    NoEditDesc = 256,
    NoEditIcon = 512,
    NoEditDflt = 1024,
    NoEditVerbCmd = 2048,
    NoEditVerbExe = 4096,
    NoDDE = 8192,
    NoEditMIME = 32768,
    OpenIsSafe = 65536,
    AlwaysUnsafe = 131072,
    NoRecentDocs = 1048576,
    SafeForElevation = 2097152,
    AlwaysUseDirectInvoke = 4194304,
};
pub const FTA_None = FILETYPEATTRIBUTEFLAGS.None;
pub const FTA_Exclude = FILETYPEATTRIBUTEFLAGS.Exclude;
pub const FTA_Show = FILETYPEATTRIBUTEFLAGS.Show;
pub const FTA_HasExtension = FILETYPEATTRIBUTEFLAGS.HasExtension;
pub const FTA_NoEdit = FILETYPEATTRIBUTEFLAGS.NoEdit;
pub const FTA_NoRemove = FILETYPEATTRIBUTEFLAGS.NoRemove;
pub const FTA_NoNewVerb = FILETYPEATTRIBUTEFLAGS.NoNewVerb;
pub const FTA_NoEditVerb = FILETYPEATTRIBUTEFLAGS.NoEditVerb;
pub const FTA_NoRemoveVerb = FILETYPEATTRIBUTEFLAGS.NoRemoveVerb;
pub const FTA_NoEditDesc = FILETYPEATTRIBUTEFLAGS.NoEditDesc;
pub const FTA_NoEditIcon = FILETYPEATTRIBUTEFLAGS.NoEditIcon;
pub const FTA_NoEditDflt = FILETYPEATTRIBUTEFLAGS.NoEditDflt;
pub const FTA_NoEditVerbCmd = FILETYPEATTRIBUTEFLAGS.NoEditVerbCmd;
pub const FTA_NoEditVerbExe = FILETYPEATTRIBUTEFLAGS.NoEditVerbExe;
pub const FTA_NoDDE = FILETYPEATTRIBUTEFLAGS.NoDDE;
pub const FTA_NoEditMIME = FILETYPEATTRIBUTEFLAGS.NoEditMIME;
pub const FTA_OpenIsSafe = FILETYPEATTRIBUTEFLAGS.OpenIsSafe;
pub const FTA_AlwaysUnsafe = FILETYPEATTRIBUTEFLAGS.AlwaysUnsafe;
pub const FTA_NoRecentDocs = FILETYPEATTRIBUTEFLAGS.NoRecentDocs;
pub const FTA_SafeForElevation = FILETYPEATTRIBUTEFLAGS.SafeForElevation;
pub const FTA_AlwaysUseDirectInvoke = FILETYPEATTRIBUTEFLAGS.AlwaysUseDirectInvoke;

// TODO: this type is limited to platform 'windows5.0'
const IID_IQueryAssociations_Value = Guid.initString("c46ca590-3c3f-11d2-bee6-0000f805ca57");
pub const IID_IQueryAssociations = &IID_IQueryAssociations_Value;
pub const IQueryAssociations = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Init: *const fn (
            self: *const IQueryAssociations,
            flags: u32,
            psz_assoc: ?[*:0]const u16,
            hk_progid: ?HKEY,
            hwnd: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetString: *const fn (
            self: *const IQueryAssociations,
            flags: u32,
            str: ASSOCSTR,
            psz_extra: ?[*:0]const u16,
            psz_out: ?[*:0]u16,
            pcch_out: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetKey: *const fn (
            self: *const IQueryAssociations,
            flags: u32,
            key: ASSOCKEY,
            psz_extra: ?[*:0]const u16,
            phkey_out: ?*?HKEY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetData: *const fn (
            self: *const IQueryAssociations,
            flags: u32,
            data: ASSOCDATA,
            psz_extra: ?[*:0]const u16,
            // TODO: what to do with BytesParamIndex 4?
            pv_out: ?*anyopaque,
            pcb_out: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEnum: *const fn (
            self: *const IQueryAssociations,
            flags: u32,
            assocenum: ASSOCENUM,
            psz_extra: ?[*:0]const u16,
            riid: ?*const Guid,
            ppv_out: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn init(self: *const T, flags_: u32, psz_assoc_: ?[*:0]const u16, hk_progid_: ?HKEY, hwnd_: ?HWND) HRESULT {
                return @as(*const IQueryAssociations.VTable, @ptrCast(self.vtable)).Init(@as(*const IQueryAssociations, @ptrCast(self)), flags_, psz_assoc_, hk_progid_, hwnd_);
            }
            pub inline fn getString(self: *const T, flags_: u32, str_: ASSOCSTR, psz_extra_: ?[*:0]const u16, psz_out_: ?[*:0]u16, pcch_out_: ?*u32) HRESULT {
                return @as(*const IQueryAssociations.VTable, @ptrCast(self.vtable)).GetString(@as(*const IQueryAssociations, @ptrCast(self)), flags_, str_, psz_extra_, psz_out_, pcch_out_);
            }
            pub inline fn getKey(self: *const T, flags_: u32, key_: ASSOCKEY, psz_extra_: ?[*:0]const u16, phkey_out_: ?*?HKEY) HRESULT {
                return @as(*const IQueryAssociations.VTable, @ptrCast(self.vtable)).GetKey(@as(*const IQueryAssociations, @ptrCast(self)), flags_, key_, psz_extra_, phkey_out_);
            }
            pub inline fn getData(self: *const T, flags_: u32, data_: ASSOCDATA, psz_extra_: ?[*:0]const u16, pv_out_: ?*anyopaque, pcb_out_: ?*u32) HRESULT {
                return @as(*const IQueryAssociations.VTable, @ptrCast(self.vtable)).GetData(@as(*const IQueryAssociations, @ptrCast(self)), flags_, data_, psz_extra_, pv_out_, pcb_out_);
            }
            pub inline fn getEnum(self: *const T, flags_: u32, assocenum_: ASSOCENUM, psz_extra_: ?[*:0]const u16, riid_: ?*const Guid, ppv_out_: ?*?*anyopaque) HRESULT {
                return @as(*const IQueryAssociations.VTable, @ptrCast(self.vtable)).GetEnum(@as(*const IQueryAssociations, @ptrCast(self)), flags_, assocenum_, psz_extra_, riid_, ppv_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SHGLOBALCOUNTER = enum(i32) {
    GLOBALCOUNTER_SEARCHMANAGER = 0,
    GLOBALCOUNTER_SEARCHOPTIONS = 1,
    GLOBALCOUNTER_FOLDERSETTINGSCHANGE = 2,
    GLOBALCOUNTER_RATINGS = 3,
    GLOBALCOUNTER_APPROVEDSITES = 4,
    GLOBALCOUNTER_RESTRICTIONS = 5,
    GLOBALCOUNTER_SHELLSETTINGSCHANGED = 6,
    GLOBALCOUNTER_SYSTEMPIDLCHANGE = 7,
    GLOBALCOUNTER_OVERLAYMANAGER = 8,
    GLOBALCOUNTER_QUERYASSOCIATIONS = 9,
    GLOBALCOUNTER_IESESSIONS = 10,
    GLOBALCOUNTER_IEONLY_SESSIONS = 11,
    GLOBALCOUNTER_APPLICATION_DESTINATIONS = 12,
    __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_CSCSYNCINPROGRESS = 13,
    GLOBALCOUNTER_BITBUCKETNUMDELETERS = 14,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SHARES = 15,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_A = 16,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_B = 17,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_C = 18,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_D = 19,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_E = 20,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_F = 21,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_G = 22,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_H = 23,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_I = 24,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_J = 25,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_K = 26,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_L = 27,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_M = 28,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_N = 29,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_O = 30,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_P = 31,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Q = 32,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_R = 33,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_S = 34,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_T = 35,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_U = 36,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_V = 37,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_W = 38,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_X = 39,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Y = 40,
    GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Z = 41,
    __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SERVERDRIVE = 42,
    __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEGLOBALDIRTYCOUNT = 43,
    GLOBALCOUNTER_RECYCLEBINENUM = 44,
    GLOBALCOUNTER_RECYCLEBINCORRUPTED = 45,
    GLOBALCOUNTER_RATINGS_STATECOUNTER = 46,
    GLOBALCOUNTER_PRIVATE_PROFILE_CACHE = 47,
    GLOBALCOUNTER_INTERNETTOOLBAR_LAYOUT = 48,
    GLOBALCOUNTER_FOLDERDEFINITION_CACHE = 49,
    GLOBALCOUNTER_COMMONPLACES_LIST_CACHE = 50,
    GLOBALCOUNTER_PRIVATE_PROFILE_CACHE_MACHINEWIDE = 51,
    GLOBALCOUNTER_ASSOCCHANGED = 52,
    GLOBALCOUNTER_APP_ITEMS_STATE_STORE_CACHE = 53,
    GLOBALCOUNTER_SETTINGSYNC_ENABLED = 54,
    GLOBALCOUNTER_APPSFOLDER_FILETYPEASSOCIATION_COUNTER = 55,
    GLOBALCOUNTER_USERINFOCHANGED = 56,
    GLOBALCOUNTER_SYNC_ENGINE_INFORMATION_CACHE_MACHINEWIDE = 57,
    GLOBALCOUNTER_BANNERS_DATAMODEL_CACHE_MACHINEWIDE = 58,
    GLOBALCOUNTER_MAXIMUMVALUE = 59,
};
pub const GLOBALCOUNTER_SEARCHMANAGER = SHGLOBALCOUNTER.GLOBALCOUNTER_SEARCHMANAGER;
pub const GLOBALCOUNTER_SEARCHOPTIONS = SHGLOBALCOUNTER.GLOBALCOUNTER_SEARCHOPTIONS;
pub const GLOBALCOUNTER_FOLDERSETTINGSCHANGE = SHGLOBALCOUNTER.GLOBALCOUNTER_FOLDERSETTINGSCHANGE;
pub const GLOBALCOUNTER_RATINGS = SHGLOBALCOUNTER.GLOBALCOUNTER_RATINGS;
pub const GLOBALCOUNTER_APPROVEDSITES = SHGLOBALCOUNTER.GLOBALCOUNTER_APPROVEDSITES;
pub const GLOBALCOUNTER_RESTRICTIONS = SHGLOBALCOUNTER.GLOBALCOUNTER_RESTRICTIONS;
pub const GLOBALCOUNTER_SHELLSETTINGSCHANGED = SHGLOBALCOUNTER.GLOBALCOUNTER_SHELLSETTINGSCHANGED;
pub const GLOBALCOUNTER_SYSTEMPIDLCHANGE = SHGLOBALCOUNTER.GLOBALCOUNTER_SYSTEMPIDLCHANGE;
pub const GLOBALCOUNTER_OVERLAYMANAGER = SHGLOBALCOUNTER.GLOBALCOUNTER_OVERLAYMANAGER;
pub const GLOBALCOUNTER_QUERYASSOCIATIONS = SHGLOBALCOUNTER.GLOBALCOUNTER_QUERYASSOCIATIONS;
pub const GLOBALCOUNTER_IESESSIONS = SHGLOBALCOUNTER.GLOBALCOUNTER_IESESSIONS;
pub const GLOBALCOUNTER_IEONLY_SESSIONS = SHGLOBALCOUNTER.GLOBALCOUNTER_IEONLY_SESSIONS;
pub const GLOBALCOUNTER_APPLICATION_DESTINATIONS = SHGLOBALCOUNTER.GLOBALCOUNTER_APPLICATION_DESTINATIONS;
pub const __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_CSCSYNCINPROGRESS = SHGLOBALCOUNTER.__UNUSED_RECYCLE_WAS_GLOBALCOUNTER_CSCSYNCINPROGRESS;
pub const GLOBALCOUNTER_BITBUCKETNUMDELETERS = SHGLOBALCOUNTER.GLOBALCOUNTER_BITBUCKETNUMDELETERS;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SHARES = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SHARES;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_A = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_A;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_B = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_B;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_C = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_C;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_D = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_D;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_E = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_E;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_F = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_F;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_G = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_G;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_H = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_H;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_I = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_I;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_J = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_J;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_K = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_K;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_L = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_L;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_M = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_M;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_N = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_N;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_O = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_O;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_P = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_P;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Q = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Q;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_R = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_R;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_S = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_S;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_T = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_T;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_U = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_U;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_V = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_V;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_W = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_W;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_X = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_X;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Y = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Y;
pub const GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Z = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEDIRTYCOUNT_DRIVE_Z;
pub const __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SERVERDRIVE = SHGLOBALCOUNTER.__UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEDIRTYCOUNT_SERVERDRIVE;
pub const __UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEGLOBALDIRTYCOUNT = SHGLOBALCOUNTER.__UNUSED_RECYCLE_WAS_GLOBALCOUNTER_RECYCLEGLOBALDIRTYCOUNT;
pub const GLOBALCOUNTER_RECYCLEBINENUM = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEBINENUM;
pub const GLOBALCOUNTER_RECYCLEBINCORRUPTED = SHGLOBALCOUNTER.GLOBALCOUNTER_RECYCLEBINCORRUPTED;
pub const GLOBALCOUNTER_RATINGS_STATECOUNTER = SHGLOBALCOUNTER.GLOBALCOUNTER_RATINGS_STATECOUNTER;
pub const GLOBALCOUNTER_PRIVATE_PROFILE_CACHE = SHGLOBALCOUNTER.GLOBALCOUNTER_PRIVATE_PROFILE_CACHE;
pub const GLOBALCOUNTER_INTERNETTOOLBAR_LAYOUT = SHGLOBALCOUNTER.GLOBALCOUNTER_INTERNETTOOLBAR_LAYOUT;
pub const GLOBALCOUNTER_FOLDERDEFINITION_CACHE = SHGLOBALCOUNTER.GLOBALCOUNTER_FOLDERDEFINITION_CACHE;
pub const GLOBALCOUNTER_COMMONPLACES_LIST_CACHE = SHGLOBALCOUNTER.GLOBALCOUNTER_COMMONPLACES_LIST_CACHE;
pub const GLOBALCOUNTER_PRIVATE_PROFILE_CACHE_MACHINEWIDE = SHGLOBALCOUNTER.GLOBALCOUNTER_PRIVATE_PROFILE_CACHE_MACHINEWIDE;
pub const GLOBALCOUNTER_ASSOCCHANGED = SHGLOBALCOUNTER.GLOBALCOUNTER_ASSOCCHANGED;
pub const GLOBALCOUNTER_APP_ITEMS_STATE_STORE_CACHE = SHGLOBALCOUNTER.GLOBALCOUNTER_APP_ITEMS_STATE_STORE_CACHE;
pub const GLOBALCOUNTER_SETTINGSYNC_ENABLED = SHGLOBALCOUNTER.GLOBALCOUNTER_SETTINGSYNC_ENABLED;
pub const GLOBALCOUNTER_APPSFOLDER_FILETYPEASSOCIATION_COUNTER = SHGLOBALCOUNTER.GLOBALCOUNTER_APPSFOLDER_FILETYPEASSOCIATION_COUNTER;
pub const GLOBALCOUNTER_USERINFOCHANGED = SHGLOBALCOUNTER.GLOBALCOUNTER_USERINFOCHANGED;
pub const GLOBALCOUNTER_SYNC_ENGINE_INFORMATION_CACHE_MACHINEWIDE = SHGLOBALCOUNTER.GLOBALCOUNTER_SYNC_ENGINE_INFORMATION_CACHE_MACHINEWIDE;
pub const GLOBALCOUNTER_BANNERS_DATAMODEL_CACHE_MACHINEWIDE = SHGLOBALCOUNTER.GLOBALCOUNTER_BANNERS_DATAMODEL_CACHE_MACHINEWIDE;
pub const GLOBALCOUNTER_MAXIMUMVALUE = SHGLOBALCOUNTER.GLOBALCOUNTER_MAXIMUMVALUE;

pub const QITAB = extern struct {
    piid: ?*const Guid,
    dwOffset: u32,
};

pub const DLLVERSIONINFO = extern struct {
    cbSize: u32,
    dwMajorVersion: u32,
    dwMinorVersion: u32,
    dwBuildNumber: u32,
    dwPlatformID: u32,
};

pub const DLLVERSIONINFO2 = extern struct {
    info1: DLLVERSIONINFO,
    dwFlags: u32,
    ullVersion: u64,
};

pub const DLLGETVERSIONPROC = *const fn (
    param0: ?*DLLVERSIONINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub const APPINFODATAFLAGS = enum(i32) {
    DISPLAYNAME = 1,
    VERSION = 2,
    PUBLISHER = 4,
    PRODUCTID = 8,
    REGISTEREDOWNER = 16,
    REGISTEREDCOMPANY = 32,
    LANGUAGE = 64,
    SUPPORTURL = 128,
    SUPPORTTELEPHONE = 256,
    HELPLINK = 512,
    INSTALLLOCATION = 1024,
    INSTALLSOURCE = 2048,
    INSTALLDATE = 4096,
    CONTACT = 16384,
    COMMENTS = 32768,
    IMAGE = 131072,
    READMEURL = 262144,
    UPDATEINFOURL = 524288,
};
pub const AIM_DISPLAYNAME = APPINFODATAFLAGS.DISPLAYNAME;
pub const AIM_VERSION = APPINFODATAFLAGS.VERSION;
pub const AIM_PUBLISHER = APPINFODATAFLAGS.PUBLISHER;
pub const AIM_PRODUCTID = APPINFODATAFLAGS.PRODUCTID;
pub const AIM_REGISTEREDOWNER = APPINFODATAFLAGS.REGISTEREDOWNER;
pub const AIM_REGISTEREDCOMPANY = APPINFODATAFLAGS.REGISTEREDCOMPANY;
pub const AIM_LANGUAGE = APPINFODATAFLAGS.LANGUAGE;
pub const AIM_SUPPORTURL = APPINFODATAFLAGS.SUPPORTURL;
pub const AIM_SUPPORTTELEPHONE = APPINFODATAFLAGS.SUPPORTTELEPHONE;
pub const AIM_HELPLINK = APPINFODATAFLAGS.HELPLINK;
pub const AIM_INSTALLLOCATION = APPINFODATAFLAGS.INSTALLLOCATION;
pub const AIM_INSTALLSOURCE = APPINFODATAFLAGS.INSTALLSOURCE;
pub const AIM_INSTALLDATE = APPINFODATAFLAGS.INSTALLDATE;
pub const AIM_CONTACT = APPINFODATAFLAGS.CONTACT;
pub const AIM_COMMENTS = APPINFODATAFLAGS.COMMENTS;
pub const AIM_IMAGE = APPINFODATAFLAGS.IMAGE;
pub const AIM_READMEURL = APPINFODATAFLAGS.READMEURL;
pub const AIM_UPDATEINFOURL = APPINFODATAFLAGS.UPDATEINFOURL;

pub const APPINFODATA = extern struct {
    cbSize: u32,
    dwMask: u32,
    pszDisplayName: ?PWSTR,
    pszVersion: ?PWSTR,
    pszPublisher: ?PWSTR,
    pszProductID: ?PWSTR,
    pszRegisteredOwner: ?PWSTR,
    pszRegisteredCompany: ?PWSTR,
    pszLanguage: ?PWSTR,
    pszSupportUrl: ?PWSTR,
    pszSupportTelephone: ?PWSTR,
    pszHelpLink: ?PWSTR,
    pszInstallLocation: ?PWSTR,
    pszInstallSource: ?PWSTR,
    pszInstallDate: ?PWSTR,
    pszContact: ?PWSTR,
    pszComments: ?PWSTR,
    pszImage: ?PWSTR,
    pszReadmeUrl: ?PWSTR,
    pszUpdateInfoUrl: ?PWSTR,
};

pub const APPACTIONFLAGS = enum(i32) {
    INSTALL = 1,
    UNINSTALL = 2,
    MODIFY = 4,
    REPAIR = 8,
    UPGRADE = 16,
    CANGETSIZE = 32,
    MODIFYREMOVE = 128,
    ADDLATER = 256,
    UNSCHEDULE = 512,
};
pub const APPACTION_INSTALL = APPACTIONFLAGS.INSTALL;
pub const APPACTION_UNINSTALL = APPACTIONFLAGS.UNINSTALL;
pub const APPACTION_MODIFY = APPACTIONFLAGS.MODIFY;
pub const APPACTION_REPAIR = APPACTIONFLAGS.REPAIR;
pub const APPACTION_UPGRADE = APPACTIONFLAGS.UPGRADE;
pub const APPACTION_CANGETSIZE = APPACTIONFLAGS.CANGETSIZE;
pub const APPACTION_MODIFYREMOVE = APPACTIONFLAGS.MODIFYREMOVE;
pub const APPACTION_ADDLATER = APPACTIONFLAGS.ADDLATER;
pub const APPACTION_UNSCHEDULE = APPACTIONFLAGS.UNSCHEDULE;

pub const SLOWAPPINFO = extern struct {
    ullSize: u64,
    ftLastUsed: FILETIME,
    iTimesUsed: i32,
    pszImage: ?PWSTR,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellApp_Value = Guid.initString("a3e14960-935f-11d1-b8b8-006008059382");
pub const IID_IShellApp = &IID_IShellApp_Value;
pub const IShellApp = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAppInfo: *const fn (
            self: *const IShellApp,
            pai: ?*APPINFODATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPossibleActions: *const fn (
            self: *const IShellApp,
            pdw_actions: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSlowAppInfo: *const fn (
            self: *const IShellApp,
            psaid: ?*SLOWAPPINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCachedSlowAppInfo: *const fn (
            self: *const IShellApp,
            psaid: ?*SLOWAPPINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsInstalled: *const fn (
            self: *const IShellApp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAppInfo(self: *const T, pai_: ?*APPINFODATA) HRESULT {
                return @as(*const IShellApp.VTable, @ptrCast(self.vtable)).GetAppInfo(@as(*const IShellApp, @ptrCast(self)), pai_);
            }
            pub inline fn getPossibleActions(self: *const T, pdw_actions_: ?*u32) HRESULT {
                return @as(*const IShellApp.VTable, @ptrCast(self.vtable)).GetPossibleActions(@as(*const IShellApp, @ptrCast(self)), pdw_actions_);
            }
            pub inline fn getSlowAppInfo(self: *const T, psaid_: ?*SLOWAPPINFO) HRESULT {
                return @as(*const IShellApp.VTable, @ptrCast(self.vtable)).GetSlowAppInfo(@as(*const IShellApp, @ptrCast(self)), psaid_);
            }
            pub inline fn getCachedSlowAppInfo(self: *const T, psaid_: ?*SLOWAPPINFO) HRESULT {
                return @as(*const IShellApp.VTable, @ptrCast(self.vtable)).GetCachedSlowAppInfo(@as(*const IShellApp, @ptrCast(self)), psaid_);
            }
            pub inline fn isInstalled(self: *const T) HRESULT {
                return @as(*const IShellApp.VTable, @ptrCast(self.vtable)).IsInstalled(@as(*const IShellApp, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PUBAPPINFOFLAGS = enum(i32) {
    SOURCE = 1,
    ASSIGNEDTIME = 2,
    PUBLISHEDTIME = 4,
    SCHEDULEDTIME = 8,
    EXPIRETIME = 16,
};
pub const PAI_SOURCE = PUBAPPINFOFLAGS.SOURCE;
pub const PAI_ASSIGNEDTIME = PUBAPPINFOFLAGS.ASSIGNEDTIME;
pub const PAI_PUBLISHEDTIME = PUBAPPINFOFLAGS.PUBLISHEDTIME;
pub const PAI_SCHEDULEDTIME = PUBAPPINFOFLAGS.SCHEDULEDTIME;
pub const PAI_EXPIRETIME = PUBAPPINFOFLAGS.EXPIRETIME;

pub const PUBAPPINFO = extern struct {
    cbSize: u32,
    dwMask: u32,
    pszSource: ?PWSTR,
    stAssigned: SYSTEMTIME,
    stPublished: SYSTEMTIME,
    stScheduled: SYSTEMTIME,
    stExpire: SYSTEMTIME,
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IPublishedApp_Value = Guid.initString("1bc752e0-9046-11d1-b8b3-006008059382");
pub const IID_IPublishedApp = &IID_IPublishedApp_Value;
pub const IPublishedApp = extern struct {
    pub const VTable = extern struct {
        base: IShellApp.VTable,
        Install: *const fn (
            self: *const IPublishedApp,
            pst_install: ?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPublishedAppInfo: *const fn (
            self: *const IPublishedApp,
            ppai: ?*PUBAPPINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unschedule: *const fn (
            self: *const IPublishedApp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellApp.MethodMixin(T);
            pub inline fn install(self: *const T, pst_install_: ?*SYSTEMTIME) HRESULT {
                return @as(*const IPublishedApp.VTable, @ptrCast(self.vtable)).Install(@as(*const IPublishedApp, @ptrCast(self)), pst_install_);
            }
            pub inline fn getPublishedAppInfo(self: *const T, ppai_: ?*PUBAPPINFO) HRESULT {
                return @as(*const IPublishedApp.VTable, @ptrCast(self.vtable)).GetPublishedAppInfo(@as(*const IPublishedApp, @ptrCast(self)), ppai_);
            }
            pub inline fn unschedule(self: *const T) HRESULT {
                return @as(*const IPublishedApp.VTable, @ptrCast(self.vtable)).Unschedule(@as(*const IPublishedApp, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPublishedApp2_Value = Guid.initString("12b81347-1b3a-4a04-aa61-3f768b67fd7e");
pub const IID_IPublishedApp2 = &IID_IPublishedApp2_Value;
pub const IPublishedApp2 = extern struct {
    pub const VTable = extern struct {
        base: IPublishedApp.VTable,
        Install2: *const fn (
            self: *const IPublishedApp2,
            pst_install: ?*SYSTEMTIME,
            hwnd_parent: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPublishedApp.MethodMixin(T);
            pub inline fn install2(self: *const T, pst_install_: ?*SYSTEMTIME, hwnd_parent_: ?HWND) HRESULT {
                return @as(*const IPublishedApp2.VTable, @ptrCast(self.vtable)).Install2(@as(*const IPublishedApp2, @ptrCast(self)), pst_install_, hwnd_parent_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IEnumPublishedApps_Value = Guid.initString("0b124f8c-91f0-11d1-b8b5-006008059382");
pub const IID_IEnumPublishedApps = &IID_IEnumPublishedApps_Value;
pub const IEnumPublishedApps = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumPublishedApps,
            pia: ?*?*IPublishedApp,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumPublishedApps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, pia_: ?*?*IPublishedApp) HRESULT {
                return @as(*const IEnumPublishedApps.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumPublishedApps, @ptrCast(self)), pia_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumPublishedApps.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumPublishedApps, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IAppPublisher_Value = Guid.initString("07250a10-9cf9-11d1-9076-006008059382");
pub const IID_IAppPublisher = &IID_IAppPublisher_Value;
pub const IAppPublisher = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetNumberOfCategories: *const fn (
            self: *const IAppPublisher,
            pdw_cat: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCategories: *const fn (
            self: *const IAppPublisher,
            p_app_category_list: ?*APPCATEGORYINFOLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNumberOfApps: *const fn (
            self: *const IAppPublisher,
            pdw_apps: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumApps: *const fn (
            self: *const IAppPublisher,
            p_app_category_id: ?*Guid,
            ppepa: ?*?*IEnumPublishedApps,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getNumberOfCategories(self: *const T, pdw_cat_: ?*u32) HRESULT {
                return @as(*const IAppPublisher.VTable, @ptrCast(self.vtable)).GetNumberOfCategories(@as(*const IAppPublisher, @ptrCast(self)), pdw_cat_);
            }
            pub inline fn getCategories(self: *const T, p_app_category_list_: ?*APPCATEGORYINFOLIST) HRESULT {
                return @as(*const IAppPublisher.VTable, @ptrCast(self.vtable)).GetCategories(@as(*const IAppPublisher, @ptrCast(self)), p_app_category_list_);
            }
            pub inline fn getNumberOfApps(self: *const T, pdw_apps_: ?*u32) HRESULT {
                return @as(*const IAppPublisher.VTable, @ptrCast(self.vtable)).GetNumberOfApps(@as(*const IAppPublisher, @ptrCast(self)), pdw_apps_);
            }
            pub inline fn enumApps(self: *const T, p_app_category_id_: ?*Guid, ppepa_: ?*?*IEnumPublishedApps) HRESULT {
                return @as(*const IAppPublisher.VTable, @ptrCast(self.vtable)).EnumApps(@as(*const IAppPublisher, @ptrCast(self)), p_app_category_id_, ppepa_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_PasswordCredentialProvider_Value = Guid.initString("60b78e88-ead8-445c-9cfd-0b87f74ea6cd");
pub const CLSID_PasswordCredentialProvider = &CLSID_PasswordCredentialProvider_Value;

const CLSID_V1PasswordCredentialProvider_Value = Guid.initString("6f45dc1e-5384-457a-bc13-2cd81b0d28ed");
pub const CLSID_V1PasswordCredentialProvider = &CLSID_V1PasswordCredentialProvider_Value;

const CLSID_PINLogonCredentialProvider_Value = Guid.initString("cb82ea12-9f71-446d-89e1-8d0924e1256e");
pub const CLSID_PINLogonCredentialProvider = &CLSID_PINLogonCredentialProvider_Value;

const CLSID_NPCredentialProvider_Value = Guid.initString("3dd6bec0-8193-4ffe-ae25-e08e39ea4063");
pub const CLSID_NPCredentialProvider = &CLSID_NPCredentialProvider_Value;

const CLSID_SmartcardCredentialProvider_Value = Guid.initString("8fd7e19c-3bf7-489b-a72c-846ab3678c96");
pub const CLSID_SmartcardCredentialProvider = &CLSID_SmartcardCredentialProvider_Value;

const CLSID_V1SmartcardCredentialProvider_Value = Guid.initString("8bf9a910-a8ff-457f-999f-a5ca10b4a885");
pub const CLSID_V1SmartcardCredentialProvider = &CLSID_V1SmartcardCredentialProvider_Value;

const CLSID_SmartcardPinProvider_Value = Guid.initString("94596c7e-3744-41ce-893e-bbf09122f76a");
pub const CLSID_SmartcardPinProvider = &CLSID_SmartcardPinProvider_Value;

const CLSID_SmartcardReaderSelectionProvider_Value = Guid.initString("1b283861-754f-4022-ad47-a5eaaa618894");
pub const CLSID_SmartcardReaderSelectionProvider = &CLSID_SmartcardReaderSelectionProvider_Value;

const CLSID_SmartcardWinRTProvider_Value = Guid.initString("1ee7337f-85ac-45e2-a23c-37c753209769");
pub const CLSID_SmartcardWinRTProvider = &CLSID_SmartcardWinRTProvider_Value;

const CLSID_GenericCredentialProvider_Value = Guid.initString("25cbb996-92ed-457e-b28c-4774084bd562");
pub const CLSID_GenericCredentialProvider = &CLSID_GenericCredentialProvider_Value;

const CLSID_RASProvider_Value = Guid.initString("5537e283-b1e7-4ef8-9c6e-7ab0afe5056d");
pub const CLSID_RASProvider = &CLSID_RASProvider_Value;

const CLSID_OnexCredentialProvider_Value = Guid.initString("07aa0886-cc8d-4e19-a410-1c75af686e62");
pub const CLSID_OnexCredentialProvider = &CLSID_OnexCredentialProvider_Value;

const CLSID_OnexPlapSmartcardCredentialProvider_Value = Guid.initString("33c86cd6-705f-4ba1-9adb-67070b837775");
pub const CLSID_OnexPlapSmartcardCredentialProvider = &CLSID_OnexPlapSmartcardCredentialProvider_Value;

const CLSID_VaultProvider_Value = Guid.initString("503739d0-4c5e-4cfd-b3ba-d881334f0df2");
pub const CLSID_VaultProvider = &CLSID_VaultProvider_Value;

const CLSID_WinBioCredentialProvider_Value = Guid.initString("bec09223-b018-416d-a0ac-523971b639f5");
pub const CLSID_WinBioCredentialProvider = &CLSID_WinBioCredentialProvider_Value;

const CLSID_V1WinBioCredentialProvider_Value = Guid.initString("ac3ac249-e820-4343-a65b-377ac634dc09");
pub const CLSID_V1WinBioCredentialProvider = &CLSID_V1WinBioCredentialProvider_Value;

pub const CREDENTIAL_PROVIDER_USAGE_SCENARIO = enum(i32) {
    INVALID = 0,
    LOGON = 1,
    UNLOCK_WORKSTATION = 2,
    CHANGE_PASSWORD = 3,
    CREDUI = 4,
    PLAP = 5,
};
pub const CPUS_INVALID = CREDENTIAL_PROVIDER_USAGE_SCENARIO.INVALID;
pub const CPUS_LOGON = CREDENTIAL_PROVIDER_USAGE_SCENARIO.LOGON;
pub const CPUS_UNLOCK_WORKSTATION = CREDENTIAL_PROVIDER_USAGE_SCENARIO.UNLOCK_WORKSTATION;
pub const CPUS_CHANGE_PASSWORD = CREDENTIAL_PROVIDER_USAGE_SCENARIO.CHANGE_PASSWORD;
pub const CPUS_CREDUI = CREDENTIAL_PROVIDER_USAGE_SCENARIO.CREDUI;
pub const CPUS_PLAP = CREDENTIAL_PROVIDER_USAGE_SCENARIO.PLAP;

pub const CREDENTIAL_PROVIDER_FIELD_TYPE = enum(i32) {
    INVALID = 0,
    LARGE_TEXT = 1,
    SMALL_TEXT = 2,
    COMMAND_LINK = 3,
    EDIT_TEXT = 4,
    PASSWORD_TEXT = 5,
    TILE_IMAGE = 6,
    CHECKBOX = 7,
    COMBOBOX = 8,
    SUBMIT_BUTTON = 9,
};
pub const CPFT_INVALID = CREDENTIAL_PROVIDER_FIELD_TYPE.INVALID;
pub const CPFT_LARGE_TEXT = CREDENTIAL_PROVIDER_FIELD_TYPE.LARGE_TEXT;
pub const CPFT_SMALL_TEXT = CREDENTIAL_PROVIDER_FIELD_TYPE.SMALL_TEXT;
pub const CPFT_COMMAND_LINK = CREDENTIAL_PROVIDER_FIELD_TYPE.COMMAND_LINK;
pub const CPFT_EDIT_TEXT = CREDENTIAL_PROVIDER_FIELD_TYPE.EDIT_TEXT;
pub const CPFT_PASSWORD_TEXT = CREDENTIAL_PROVIDER_FIELD_TYPE.PASSWORD_TEXT;
pub const CPFT_TILE_IMAGE = CREDENTIAL_PROVIDER_FIELD_TYPE.TILE_IMAGE;
pub const CPFT_CHECKBOX = CREDENTIAL_PROVIDER_FIELD_TYPE.CHECKBOX;
pub const CPFT_COMBOBOX = CREDENTIAL_PROVIDER_FIELD_TYPE.COMBOBOX;
pub const CPFT_SUBMIT_BUTTON = CREDENTIAL_PROVIDER_FIELD_TYPE.SUBMIT_BUTTON;

pub const CREDENTIAL_PROVIDER_FIELD_STATE = enum(i32) {
    HIDDEN = 0,
    DISPLAY_IN_SELECTED_TILE = 1,
    DISPLAY_IN_DESELECTED_TILE = 2,
    DISPLAY_IN_BOTH = 3,
};
pub const CPFS_HIDDEN = CREDENTIAL_PROVIDER_FIELD_STATE.HIDDEN;
pub const CPFS_DISPLAY_IN_SELECTED_TILE = CREDENTIAL_PROVIDER_FIELD_STATE.DISPLAY_IN_SELECTED_TILE;
pub const CPFS_DISPLAY_IN_DESELECTED_TILE = CREDENTIAL_PROVIDER_FIELD_STATE.DISPLAY_IN_DESELECTED_TILE;
pub const CPFS_DISPLAY_IN_BOTH = CREDENTIAL_PROVIDER_FIELD_STATE.DISPLAY_IN_BOTH;

pub const CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE = enum(i32) {
    NONE = 0,
    READONLY = 1,
    DISABLED = 2,
    FOCUSED = 3,
};
pub const CPFIS_NONE = CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE.NONE;
pub const CPFIS_READONLY = CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE.READONLY;
pub const CPFIS_DISABLED = CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE.DISABLED;
pub const CPFIS_FOCUSED = CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE.FOCUSED;

pub const CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR = extern struct {
    dwFieldID: u32,
    cpft: CREDENTIAL_PROVIDER_FIELD_TYPE,
    pszLabel: ?PWSTR,
    guidFieldType: Guid,
};

pub const CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE = enum(i32) {
    NO_CREDENTIAL_NOT_FINISHED = 0,
    NO_CREDENTIAL_FINISHED = 1,
    RETURN_CREDENTIAL_FINISHED = 2,
    RETURN_NO_CREDENTIAL_FINISHED = 3,
};
pub const CPGSR_NO_CREDENTIAL_NOT_FINISHED = CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE.NO_CREDENTIAL_NOT_FINISHED;
pub const CPGSR_NO_CREDENTIAL_FINISHED = CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE.NO_CREDENTIAL_FINISHED;
pub const CPGSR_RETURN_CREDENTIAL_FINISHED = CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE.RETURN_CREDENTIAL_FINISHED;
pub const CPGSR_RETURN_NO_CREDENTIAL_FINISHED = CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE.RETURN_NO_CREDENTIAL_FINISHED;

pub const CREDENTIAL_PROVIDER_STATUS_ICON = enum(i32) {
    NONE = 0,
    ERROR = 1,
    WARNING = 2,
    SUCCESS = 3,
};
pub const CPSI_NONE = CREDENTIAL_PROVIDER_STATUS_ICON.NONE;
pub const CPSI_ERROR = CREDENTIAL_PROVIDER_STATUS_ICON.ERROR;
pub const CPSI_WARNING = CREDENTIAL_PROVIDER_STATUS_ICON.WARNING;
pub const CPSI_SUCCESS = CREDENTIAL_PROVIDER_STATUS_ICON.SUCCESS;

pub const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION = extern struct {
    ulAuthenticationPackage: u32,
    clsidCredentialProvider: Guid,
    cbSerialization: u32,
    rgbSerialization: ?*u8,
};

pub const CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS = enum(i32) {
    NONE = 0,
    EMPTY_LOCAL = 1,
    EMPTY_CONNECTED = 2,
};
pub const CPAO_NONE = CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS.NONE;
pub const CPAO_EMPTY_LOCAL = CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS.EMPTY_LOCAL;
pub const CPAO_EMPTY_CONNECTED = CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS.EMPTY_CONNECTED;

pub const CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS = enum(i32) {
    NONE = 0,
    ENABLE_PASSWORD_REVEAL = 1,
    IS_EMAIL_ADDRESS = 2,
    ENABLE_TOUCH_KEYBOARD_AUTO_INVOKE = 4,
    NUMBERS_ONLY = 8,
    SHOW_ENGLISH_KEYBOARD = 16,
};
pub const CPCFO_NONE = CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS.NONE;
pub const CPCFO_ENABLE_PASSWORD_REVEAL = CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS.ENABLE_PASSWORD_REVEAL;
pub const CPCFO_IS_EMAIL_ADDRESS = CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS.IS_EMAIL_ADDRESS;
pub const CPCFO_ENABLE_TOUCH_KEYBOARD_AUTO_INVOKE = CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS.ENABLE_TOUCH_KEYBOARD_AUTO_INVOKE;
pub const CPCFO_NUMBERS_ONLY = CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS.NUMBERS_ONLY;
pub const CPCFO_SHOW_ENGLISH_KEYBOARD = CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS.SHOW_ENGLISH_KEYBOARD;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICredentialProviderCredential_Value = Guid.initString("63913a93-40c1-481a-818d-4072ff8c70cc");
pub const IID_ICredentialProviderCredential = &IID_ICredentialProviderCredential_Value;
pub const ICredentialProviderCredential = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Advise: *const fn (
            self: *const ICredentialProviderCredential,
            pcpce: ?*ICredentialProviderCredentialEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnAdvise: *const fn (
            self: *const ICredentialProviderCredential,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSelected: *const fn (
            self: *const ICredentialProviderCredential,
            pb_auto_logon: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDeselected: *const fn (
            self: *const ICredentialProviderCredential,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFieldState: *const fn (
            self: *const ICredentialProviderCredential,
            dw_field_i_d: u32,
            pcpfs: ?*CREDENTIAL_PROVIDER_FIELD_STATE,
            pcpfis: ?*CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringValue: *const fn (
            self: *const ICredentialProviderCredential,
            dw_field_i_d: u32,
            ppsz: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBitmapValue: *const fn (
            self: *const ICredentialProviderCredential,
            dw_field_i_d: u32,
            phbmp: ?*?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCheckboxValue: *const fn (
            self: *const ICredentialProviderCredential,
            dw_field_i_d: u32,
            pb_checked: ?*BOOL,
            ppsz_label: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSubmitButtonValue: *const fn (
            self: *const ICredentialProviderCredential,
            dw_field_i_d: u32,
            pdw_adjacent_to: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComboBoxValueCount: *const fn (
            self: *const ICredentialProviderCredential,
            dw_field_i_d: u32,
            pc_items: ?*u32,
            pdw_selected_item: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComboBoxValueAt: *const fn (
            self: *const ICredentialProviderCredential,
            dw_field_i_d: u32,
            dw_item: u32,
            ppsz_item: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStringValue: *const fn (
            self: *const ICredentialProviderCredential,
            dw_field_i_d: u32,
            psz: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCheckboxValue: *const fn (
            self: *const ICredentialProviderCredential,
            dw_field_i_d: u32,
            b_checked: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetComboBoxSelectedValue: *const fn (
            self: *const ICredentialProviderCredential,
            dw_field_i_d: u32,
            dw_selected_item: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommandLinkClicked: *const fn (
            self: *const ICredentialProviderCredential,
            dw_field_i_d: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSerialization: *const fn (
            self: *const ICredentialProviderCredential,
            pcpgsr: ?*CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE,
            pcpcs: ?*CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION,
            ppsz_optional_status_text: ?*?PWSTR,
            pcpsi_optional_status_icon: ?*CREDENTIAL_PROVIDER_STATUS_ICON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReportResult: *const fn (
            self: *const ICredentialProviderCredential,
            nts_status: NTSTATUS,
            nts_substatus: NTSTATUS,
            ppsz_optional_status_text: ?*?PWSTR,
            pcpsi_optional_status_icon: ?*CREDENTIAL_PROVIDER_STATUS_ICON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn advise(self: *const T, pcpce_: ?*ICredentialProviderCredentialEvents) HRESULT {
                return @as(*const ICredentialProviderCredential.VTable, @ptrCast(self.vtable)).Advise(@as(*const ICredentialProviderCredential, @ptrCast(self)), pcpce_);
            }
            pub inline fn unAdvise(self: *const T) HRESULT {
                return @as(*const ICredentialProviderCredential.VTable, @ptrCast(self.vtable)).UnAdvise(@as(*const ICredentialProviderCredential, @ptrCast(self)));
            }
            pub inline fn setSelected(self: *const T, pb_auto_logon_: ?*BOOL) HRESULT {
                return @as(*const ICredentialProviderCredential.VTable, @ptrCast(self.vtable)).SetSelected(@as(*const ICredentialProviderCredential, @ptrCast(self)), pb_auto_logon_);
            }
            pub inline fn setDeselected(self: *const T) HRESULT {
                return @as(*const ICredentialProviderCredential.VTable, @ptrCast(self.vtable)).SetDeselected(@as(*const ICredentialProviderCredential, @ptrCast(self)));
            }
            pub inline fn getFieldState(self: *const T, dw_field_i_d_: u32, pcpfs_: ?*CREDENTIAL_PROVIDER_FIELD_STATE, pcpfis_: ?*CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE) HRESULT {
                return @as(*const ICredentialProviderCredential.VTable, @ptrCast(self.vtable)).GetFieldState(@as(*const ICredentialProviderCredential, @ptrCast(self)), dw_field_i_d_, pcpfs_, pcpfis_);
            }
            pub inline fn getStringValue(self: *const T, dw_field_i_d_: u32, ppsz_: ?*?PWSTR) HRESULT {
                return @as(*const ICredentialProviderCredential.VTable, @ptrCast(self.vtable)).GetStringValue(@as(*const ICredentialProviderCredential, @ptrCast(self)), dw_field_i_d_, ppsz_);
            }
            pub inline fn getBitmapValue(self: *const T, dw_field_i_d_: u32, phbmp_: ?*?HBITMAP) HRESULT {
                return @as(*const ICredentialProviderCredential.VTable, @ptrCast(self.vtable)).GetBitmapValue(@as(*const ICredentialProviderCredential, @ptrCast(self)), dw_field_i_d_, phbmp_);
            }
            pub inline fn getCheckboxValue(self: *const T, dw_field_i_d_: u32, pb_checked_: ?*BOOL, ppsz_label_: ?*?PWSTR) HRESULT {
                return @as(*const ICredentialProviderCredential.VTable, @ptrCast(self.vtable)).GetCheckboxValue(@as(*const ICredentialProviderCredential, @ptrCast(self)), dw_field_i_d_, pb_checked_, ppsz_label_);
            }
            pub inline fn getSubmitButtonValue(self: *const T, dw_field_i_d_: u32, pdw_adjacent_to_: ?*u32) HRESULT {
                return @as(*const ICredentialProviderCredential.VTable, @ptrCast(self.vtable)).GetSubmitButtonValue(@as(*const ICredentialProviderCredential, @ptrCast(self)), dw_field_i_d_, pdw_adjacent_to_);
            }
            pub inline fn getComboBoxValueCount(self: *const T, dw_field_i_d_: u32, pc_items_: ?*u32, pdw_selected_item_: ?*u32) HRESULT {
                return @as(*const ICredentialProviderCredential.VTable, @ptrCast(self.vtable)).GetComboBoxValueCount(@as(*const ICredentialProviderCredential, @ptrCast(self)), dw_field_i_d_, pc_items_, pdw_selected_item_);
            }
            pub inline fn getComboBoxValueAt(self: *const T, dw_field_i_d_: u32, dw_item_: u32, ppsz_item_: ?*?PWSTR) HRESULT {
                return @as(*const ICredentialProviderCredential.VTable, @ptrCast(self.vtable)).GetComboBoxValueAt(@as(*const ICredentialProviderCredential, @ptrCast(self)), dw_field_i_d_, dw_item_, ppsz_item_);
            }
            pub inline fn setStringValue(self: *const T, dw_field_i_d_: u32, psz_: ?[*:0]const u16) HRESULT {
                return @as(*const ICredentialProviderCredential.VTable, @ptrCast(self.vtable)).SetStringValue(@as(*const ICredentialProviderCredential, @ptrCast(self)), dw_field_i_d_, psz_);
            }
            pub inline fn setCheckboxValue(self: *const T, dw_field_i_d_: u32, b_checked_: BOOL) HRESULT {
                return @as(*const ICredentialProviderCredential.VTable, @ptrCast(self.vtable)).SetCheckboxValue(@as(*const ICredentialProviderCredential, @ptrCast(self)), dw_field_i_d_, b_checked_);
            }
            pub inline fn setComboBoxSelectedValue(self: *const T, dw_field_i_d_: u32, dw_selected_item_: u32) HRESULT {
                return @as(*const ICredentialProviderCredential.VTable, @ptrCast(self.vtable)).SetComboBoxSelectedValue(@as(*const ICredentialProviderCredential, @ptrCast(self)), dw_field_i_d_, dw_selected_item_);
            }
            pub inline fn commandLinkClicked(self: *const T, dw_field_i_d_: u32) HRESULT {
                return @as(*const ICredentialProviderCredential.VTable, @ptrCast(self.vtable)).CommandLinkClicked(@as(*const ICredentialProviderCredential, @ptrCast(self)), dw_field_i_d_);
            }
            pub inline fn getSerialization(self: *const T, pcpgsr_: ?*CREDENTIAL_PROVIDER_GET_SERIALIZATION_RESPONSE, pcpcs_: ?*CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION, ppsz_optional_status_text_: ?*?PWSTR, pcpsi_optional_status_icon_: ?*CREDENTIAL_PROVIDER_STATUS_ICON) HRESULT {
                return @as(*const ICredentialProviderCredential.VTable, @ptrCast(self.vtable)).GetSerialization(@as(*const ICredentialProviderCredential, @ptrCast(self)), pcpgsr_, pcpcs_, ppsz_optional_status_text_, pcpsi_optional_status_icon_);
            }
            pub inline fn reportResult(self: *const T, nts_status_: NTSTATUS, nts_substatus_: NTSTATUS, ppsz_optional_status_text_: ?*?PWSTR, pcpsi_optional_status_icon_: ?*CREDENTIAL_PROVIDER_STATUS_ICON) HRESULT {
                return @as(*const ICredentialProviderCredential.VTable, @ptrCast(self.vtable)).ReportResult(@as(*const ICredentialProviderCredential, @ptrCast(self)), nts_status_, nts_substatus_, ppsz_optional_status_text_, pcpsi_optional_status_icon_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IQueryContinueWithStatus_Value = Guid.initString("9090be5b-502b-41fb-bccc-0049a6c7254b");
pub const IID_IQueryContinueWithStatus = &IID_IQueryContinueWithStatus_Value;
pub const IQueryContinueWithStatus = extern struct {
    pub const VTable = extern struct {
        base: IQueryContinue.VTable,
        SetStatusMessage: *const fn (
            self: *const IQueryContinueWithStatus,
            psz: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IQueryContinue.MethodMixin(T);
            pub inline fn setStatusMessage(self: *const T, psz_: ?[*:0]const u16) HRESULT {
                return @as(*const IQueryContinueWithStatus.VTable, @ptrCast(self.vtable)).SetStatusMessage(@as(*const IQueryContinueWithStatus, @ptrCast(self)), psz_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IConnectableCredentialProviderCredential_Value = Guid.initString("9387928b-ac75-4bf9-8ab2-2b93c4a55290");
pub const IID_IConnectableCredentialProviderCredential = &IID_IConnectableCredentialProviderCredential_Value;
pub const IConnectableCredentialProviderCredential = extern struct {
    pub const VTable = extern struct {
        base: ICredentialProviderCredential.VTable,
        Connect: *const fn (
            self: *const IConnectableCredentialProviderCredential,
            pqcws: ?*IQueryContinueWithStatus,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: *const fn (
            self: *const IConnectableCredentialProviderCredential,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICredentialProviderCredential.MethodMixin(T);
            pub inline fn connect(self: *const T, pqcws_: ?*IQueryContinueWithStatus) HRESULT {
                return @as(*const IConnectableCredentialProviderCredential.VTable, @ptrCast(self.vtable)).Connect(@as(*const IConnectableCredentialProviderCredential, @ptrCast(self)), pqcws_);
            }
            pub inline fn disconnect(self: *const T) HRESULT {
                return @as(*const IConnectableCredentialProviderCredential.VTable, @ptrCast(self.vtable)).Disconnect(@as(*const IConnectableCredentialProviderCredential, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICredentialProviderCredentialEvents_Value = Guid.initString("fa6fa76b-66b7-4b11-95f1-86171118e816");
pub const IID_ICredentialProviderCredentialEvents = &IID_ICredentialProviderCredentialEvents_Value;
pub const ICredentialProviderCredentialEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetFieldState: *const fn (
            self: *const ICredentialProviderCredentialEvents,
            pcpc: ?*ICredentialProviderCredential,
            dw_field_i_d: u32,
            cpfs: CREDENTIAL_PROVIDER_FIELD_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldInteractiveState: *const fn (
            self: *const ICredentialProviderCredentialEvents,
            pcpc: ?*ICredentialProviderCredential,
            dw_field_i_d: u32,
            cpfis: CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldString: *const fn (
            self: *const ICredentialProviderCredentialEvents,
            pcpc: ?*ICredentialProviderCredential,
            dw_field_i_d: u32,
            psz: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldCheckbox: *const fn (
            self: *const ICredentialProviderCredentialEvents,
            pcpc: ?*ICredentialProviderCredential,
            dw_field_i_d: u32,
            b_checked: BOOL,
            psz_label: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldBitmap: *const fn (
            self: *const ICredentialProviderCredentialEvents,
            pcpc: ?*ICredentialProviderCredential,
            dw_field_i_d: u32,
            hbmp: ?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldComboBoxSelectedItem: *const fn (
            self: *const ICredentialProviderCredentialEvents,
            pcpc: ?*ICredentialProviderCredential,
            dw_field_i_d: u32,
            dw_selected_item: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteFieldComboBoxItem: *const fn (
            self: *const ICredentialProviderCredentialEvents,
            pcpc: ?*ICredentialProviderCredential,
            dw_field_i_d: u32,
            dw_item: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AppendFieldComboBoxItem: *const fn (
            self: *const ICredentialProviderCredentialEvents,
            pcpc: ?*ICredentialProviderCredential,
            dw_field_i_d: u32,
            psz_item: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldSubmitButton: *const fn (
            self: *const ICredentialProviderCredentialEvents,
            pcpc: ?*ICredentialProviderCredential,
            dw_field_i_d: u32,
            dw_adjacent_to: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCreatingWindow: *const fn (
            self: *const ICredentialProviderCredentialEvents,
            phwnd_owner: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setFieldState(self: *const T, pcpc_: ?*ICredentialProviderCredential, dw_field_i_d_: u32, cpfs_: CREDENTIAL_PROVIDER_FIELD_STATE) HRESULT {
                return @as(*const ICredentialProviderCredentialEvents.VTable, @ptrCast(self.vtable)).SetFieldState(@as(*const ICredentialProviderCredentialEvents, @ptrCast(self)), pcpc_, dw_field_i_d_, cpfs_);
            }
            pub inline fn setFieldInteractiveState(self: *const T, pcpc_: ?*ICredentialProviderCredential, dw_field_i_d_: u32, cpfis_: CREDENTIAL_PROVIDER_FIELD_INTERACTIVE_STATE) HRESULT {
                return @as(*const ICredentialProviderCredentialEvents.VTable, @ptrCast(self.vtable)).SetFieldInteractiveState(@as(*const ICredentialProviderCredentialEvents, @ptrCast(self)), pcpc_, dw_field_i_d_, cpfis_);
            }
            pub inline fn setFieldString(self: *const T, pcpc_: ?*ICredentialProviderCredential, dw_field_i_d_: u32, psz_: ?[*:0]const u16) HRESULT {
                return @as(*const ICredentialProviderCredentialEvents.VTable, @ptrCast(self.vtable)).SetFieldString(@as(*const ICredentialProviderCredentialEvents, @ptrCast(self)), pcpc_, dw_field_i_d_, psz_);
            }
            pub inline fn setFieldCheckbox(self: *const T, pcpc_: ?*ICredentialProviderCredential, dw_field_i_d_: u32, b_checked_: BOOL, psz_label_: ?[*:0]const u16) HRESULT {
                return @as(*const ICredentialProviderCredentialEvents.VTable, @ptrCast(self.vtable)).SetFieldCheckbox(@as(*const ICredentialProviderCredentialEvents, @ptrCast(self)), pcpc_, dw_field_i_d_, b_checked_, psz_label_);
            }
            pub inline fn setFieldBitmap(self: *const T, pcpc_: ?*ICredentialProviderCredential, dw_field_i_d_: u32, hbmp_: ?HBITMAP) HRESULT {
                return @as(*const ICredentialProviderCredentialEvents.VTable, @ptrCast(self.vtable)).SetFieldBitmap(@as(*const ICredentialProviderCredentialEvents, @ptrCast(self)), pcpc_, dw_field_i_d_, hbmp_);
            }
            pub inline fn setFieldComboBoxSelectedItem(self: *const T, pcpc_: ?*ICredentialProviderCredential, dw_field_i_d_: u32, dw_selected_item_: u32) HRESULT {
                return @as(*const ICredentialProviderCredentialEvents.VTable, @ptrCast(self.vtable)).SetFieldComboBoxSelectedItem(@as(*const ICredentialProviderCredentialEvents, @ptrCast(self)), pcpc_, dw_field_i_d_, dw_selected_item_);
            }
            pub inline fn deleteFieldComboBoxItem(self: *const T, pcpc_: ?*ICredentialProviderCredential, dw_field_i_d_: u32, dw_item_: u32) HRESULT {
                return @as(*const ICredentialProviderCredentialEvents.VTable, @ptrCast(self.vtable)).DeleteFieldComboBoxItem(@as(*const ICredentialProviderCredentialEvents, @ptrCast(self)), pcpc_, dw_field_i_d_, dw_item_);
            }
            pub inline fn appendFieldComboBoxItem(self: *const T, pcpc_: ?*ICredentialProviderCredential, dw_field_i_d_: u32, psz_item_: ?[*:0]const u16) HRESULT {
                return @as(*const ICredentialProviderCredentialEvents.VTable, @ptrCast(self.vtable)).AppendFieldComboBoxItem(@as(*const ICredentialProviderCredentialEvents, @ptrCast(self)), pcpc_, dw_field_i_d_, psz_item_);
            }
            pub inline fn setFieldSubmitButton(self: *const T, pcpc_: ?*ICredentialProviderCredential, dw_field_i_d_: u32, dw_adjacent_to_: u32) HRESULT {
                return @as(*const ICredentialProviderCredentialEvents.VTable, @ptrCast(self.vtable)).SetFieldSubmitButton(@as(*const ICredentialProviderCredentialEvents, @ptrCast(self)), pcpc_, dw_field_i_d_, dw_adjacent_to_);
            }
            pub inline fn onCreatingWindow(self: *const T, phwnd_owner_: ?*?HWND) HRESULT {
                return @as(*const ICredentialProviderCredentialEvents.VTable, @ptrCast(self.vtable)).OnCreatingWindow(@as(*const ICredentialProviderCredentialEvents, @ptrCast(self)), phwnd_owner_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICredentialProvider_Value = Guid.initString("d27c3481-5a1c-45b2-8aaa-c20ebbe8229e");
pub const IID_ICredentialProvider = &IID_ICredentialProvider_Value;
pub const ICredentialProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetUsageScenario: *const fn (
            self: *const ICredentialProvider,
            cpus: CREDENTIAL_PROVIDER_USAGE_SCENARIO,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSerialization: *const fn (
            self: *const ICredentialProvider,
            pcpcs: ?*const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Advise: *const fn (
            self: *const ICredentialProvider,
            pcpe: ?*ICredentialProviderEvents,
            up_advise_context: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnAdvise: *const fn (
            self: *const ICredentialProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFieldDescriptorCount: *const fn (
            self: *const ICredentialProvider,
            pdw_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFieldDescriptorAt: *const fn (
            self: *const ICredentialProvider,
            dw_index: u32,
            ppcpfd: ?*?*CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCredentialCount: *const fn (
            self: *const ICredentialProvider,
            pdw_count: ?*u32,
            pdw_default: ?*u32,
            pb_auto_logon_with_default: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCredentialAt: *const fn (
            self: *const ICredentialProvider,
            dw_index: u32,
            ppcpc: ?*?*ICredentialProviderCredential,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setUsageScenario(self: *const T, cpus_: CREDENTIAL_PROVIDER_USAGE_SCENARIO, dw_flags_: u32) HRESULT {
                return @as(*const ICredentialProvider.VTable, @ptrCast(self.vtable)).SetUsageScenario(@as(*const ICredentialProvider, @ptrCast(self)), cpus_, dw_flags_);
            }
            pub inline fn setSerialization(self: *const T, pcpcs_: ?*const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION) HRESULT {
                return @as(*const ICredentialProvider.VTable, @ptrCast(self.vtable)).SetSerialization(@as(*const ICredentialProvider, @ptrCast(self)), pcpcs_);
            }
            pub inline fn advise(self: *const T, pcpe_: ?*ICredentialProviderEvents, up_advise_context_: usize) HRESULT {
                return @as(*const ICredentialProvider.VTable, @ptrCast(self.vtable)).Advise(@as(*const ICredentialProvider, @ptrCast(self)), pcpe_, up_advise_context_);
            }
            pub inline fn unAdvise(self: *const T) HRESULT {
                return @as(*const ICredentialProvider.VTable, @ptrCast(self.vtable)).UnAdvise(@as(*const ICredentialProvider, @ptrCast(self)));
            }
            pub inline fn getFieldDescriptorCount(self: *const T, pdw_count_: ?*u32) HRESULT {
                return @as(*const ICredentialProvider.VTable, @ptrCast(self.vtable)).GetFieldDescriptorCount(@as(*const ICredentialProvider, @ptrCast(self)), pdw_count_);
            }
            pub inline fn getFieldDescriptorAt(self: *const T, dw_index_: u32, ppcpfd_: ?*?*CREDENTIAL_PROVIDER_FIELD_DESCRIPTOR) HRESULT {
                return @as(*const ICredentialProvider.VTable, @ptrCast(self.vtable)).GetFieldDescriptorAt(@as(*const ICredentialProvider, @ptrCast(self)), dw_index_, ppcpfd_);
            }
            pub inline fn getCredentialCount(self: *const T, pdw_count_: ?*u32, pdw_default_: ?*u32, pb_auto_logon_with_default_: ?*BOOL) HRESULT {
                return @as(*const ICredentialProvider.VTable, @ptrCast(self.vtable)).GetCredentialCount(@as(*const ICredentialProvider, @ptrCast(self)), pdw_count_, pdw_default_, pb_auto_logon_with_default_);
            }
            pub inline fn getCredentialAt(self: *const T, dw_index_: u32, ppcpc_: ?*?*ICredentialProviderCredential) HRESULT {
                return @as(*const ICredentialProvider.VTable, @ptrCast(self.vtable)).GetCredentialAt(@as(*const ICredentialProvider, @ptrCast(self)), dw_index_, ppcpc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICredentialProviderEvents_Value = Guid.initString("34201e5a-a787-41a3-a5a4-bd6dcf2a854e");
pub const IID_ICredentialProviderEvents = &IID_ICredentialProviderEvents_Value;
pub const ICredentialProviderEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CredentialsChanged: *const fn (
            self: *const ICredentialProviderEvents,
            up_advise_context: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn credentialsChanged(self: *const T, up_advise_context_: usize) HRESULT {
                return @as(*const ICredentialProviderEvents.VTable, @ptrCast(self.vtable)).CredentialsChanged(@as(*const ICredentialProviderEvents, @ptrCast(self)), up_advise_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ICredentialProviderFilter_Value = Guid.initString("a5da53f9-d475-4080-a120-910c4a739880");
pub const IID_ICredentialProviderFilter = &IID_ICredentialProviderFilter_Value;
pub const ICredentialProviderFilter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Filter: *const fn (
            self: *const ICredentialProviderFilter,
            cpus: CREDENTIAL_PROVIDER_USAGE_SCENARIO,
            dw_flags: u32,
            rgclsid_providers: [*]Guid,
            rgb_allow: [*]BOOL,
            c_providers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateRemoteCredential: *const fn (
            self: *const ICredentialProviderFilter,
            pcpcs_in: ?*const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION,
            pcpcs_out: ?*CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn filter(self: *const T, cpus_: CREDENTIAL_PROVIDER_USAGE_SCENARIO, dw_flags_: u32, rgclsid_providers_: [*]Guid, rgb_allow_: [*]BOOL, c_providers_: u32) HRESULT {
                return @as(*const ICredentialProviderFilter.VTable, @ptrCast(self.vtable)).Filter(@as(*const ICredentialProviderFilter, @ptrCast(self)), cpus_, dw_flags_, rgclsid_providers_, rgb_allow_, c_providers_);
            }
            pub inline fn updateRemoteCredential(self: *const T, pcpcs_in_: ?*const CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION, pcpcs_out_: ?*CREDENTIAL_PROVIDER_CREDENTIAL_SERIALIZATION) HRESULT {
                return @as(*const ICredentialProviderFilter.VTable, @ptrCast(self.vtable)).UpdateRemoteCredential(@as(*const ICredentialProviderFilter, @ptrCast(self)), pcpcs_in_, pcpcs_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ICredentialProviderCredential2_Value = Guid.initString("fd672c54-40ea-4d6e-9b49-cfb1a7507bd7");
pub const IID_ICredentialProviderCredential2 = &IID_ICredentialProviderCredential2_Value;
pub const ICredentialProviderCredential2 = extern struct {
    pub const VTable = extern struct {
        base: ICredentialProviderCredential.VTable,
        GetUserSid: *const fn (
            self: *const ICredentialProviderCredential2,
            sid: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICredentialProviderCredential.MethodMixin(T);
            pub inline fn getUserSid(self: *const T, sid_: ?*?PWSTR) HRESULT {
                return @as(*const ICredentialProviderCredential2.VTable, @ptrCast(self.vtable)).GetUserSid(@as(*const ICredentialProviderCredential2, @ptrCast(self)), sid_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ICredentialProviderCredentialWithFieldOptions_Value = Guid.initString("dbc6fb30-c843-49e3-a645-573e6f39446a");
pub const IID_ICredentialProviderCredentialWithFieldOptions = &IID_ICredentialProviderCredentialWithFieldOptions_Value;
pub const ICredentialProviderCredentialWithFieldOptions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFieldOptions: *const fn (
            self: *const ICredentialProviderCredentialWithFieldOptions,
            field_i_d: u32,
            options: ?*CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFieldOptions(self: *const T, field_i_d_: u32, options_: ?*CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS) HRESULT {
                return @as(*const ICredentialProviderCredentialWithFieldOptions.VTable, @ptrCast(self.vtable)).GetFieldOptions(@as(*const ICredentialProviderCredentialWithFieldOptions, @ptrCast(self)), field_i_d_, options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ICredentialProviderCredentialEvents2_Value = Guid.initString("b53c00b6-9922-4b78-b1f4-ddfe774dc39b");
pub const IID_ICredentialProviderCredentialEvents2 = &IID_ICredentialProviderCredentialEvents2_Value;
pub const ICredentialProviderCredentialEvents2 = extern struct {
    pub const VTable = extern struct {
        base: ICredentialProviderCredentialEvents.VTable,
        BeginFieldUpdates: *const fn (
            self: *const ICredentialProviderCredentialEvents2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EndFieldUpdates: *const fn (
            self: *const ICredentialProviderCredentialEvents2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFieldOptions: *const fn (
            self: *const ICredentialProviderCredentialEvents2,
            credential: ?*ICredentialProviderCredential,
            field_i_d: u32,
            options: CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ICredentialProviderCredentialEvents.MethodMixin(T);
            pub inline fn beginFieldUpdates(self: *const T) HRESULT {
                return @as(*const ICredentialProviderCredentialEvents2.VTable, @ptrCast(self.vtable)).BeginFieldUpdates(@as(*const ICredentialProviderCredentialEvents2, @ptrCast(self)));
            }
            pub inline fn endFieldUpdates(self: *const T) HRESULT {
                return @as(*const ICredentialProviderCredentialEvents2.VTable, @ptrCast(self.vtable)).EndFieldUpdates(@as(*const ICredentialProviderCredentialEvents2, @ptrCast(self)));
            }
            pub inline fn setFieldOptions(self: *const T, credential_: ?*ICredentialProviderCredential, field_i_d_: u32, options_: CREDENTIAL_PROVIDER_CREDENTIAL_FIELD_OPTIONS) HRESULT {
                return @as(*const ICredentialProviderCredentialEvents2.VTable, @ptrCast(self.vtable)).SetFieldOptions(@as(*const ICredentialProviderCredentialEvents2, @ptrCast(self)), credential_, field_i_d_, options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ICredentialProviderUser_Value = Guid.initString("13793285-3ea6-40fd-b420-15f47da41fbb");
pub const IID_ICredentialProviderUser = &IID_ICredentialProviderUser_Value;
pub const ICredentialProviderUser = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSid: *const fn (
            self: *const ICredentialProviderUser,
            sid: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProviderID: *const fn (
            self: *const ICredentialProviderUser,
            provider_i_d: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringValue: *const fn (
            self: *const ICredentialProviderUser,
            key: ?*const PROPERTYKEY,
            string_value: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetValue: *const fn (
            self: *const ICredentialProviderUser,
            key: ?*const PROPERTYKEY,
            value: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSid(self: *const T, sid_: ?*?PWSTR) HRESULT {
                return @as(*const ICredentialProviderUser.VTable, @ptrCast(self.vtable)).GetSid(@as(*const ICredentialProviderUser, @ptrCast(self)), sid_);
            }
            pub inline fn getProviderID(self: *const T, provider_i_d_: ?*Guid) HRESULT {
                return @as(*const ICredentialProviderUser.VTable, @ptrCast(self.vtable)).GetProviderID(@as(*const ICredentialProviderUser, @ptrCast(self)), provider_i_d_);
            }
            pub inline fn getStringValue(self: *const T, key_: ?*const PROPERTYKEY, string_value_: ?*?PWSTR) HRESULT {
                return @as(*const ICredentialProviderUser.VTable, @ptrCast(self.vtable)).GetStringValue(@as(*const ICredentialProviderUser, @ptrCast(self)), key_, string_value_);
            }
            pub inline fn getValue(self: *const T, key_: ?*const PROPERTYKEY, value_: ?*PROPVARIANT) HRESULT {
                return @as(*const ICredentialProviderUser.VTable, @ptrCast(self.vtable)).GetValue(@as(*const ICredentialProviderUser, @ptrCast(self)), key_, value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ICredentialProviderUserArray_Value = Guid.initString("90c119ae-0f18-4520-a1f1-114366a40fe8");
pub const IID_ICredentialProviderUserArray = &IID_ICredentialProviderUserArray_Value;
pub const ICredentialProviderUserArray = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetProviderFilter: *const fn (
            self: *const ICredentialProviderUserArray,
            guid_provider_to_filter_to: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAccountOptions: *const fn (
            self: *const ICredentialProviderUserArray,
            credential_provider_account_options: ?*CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn (
            self: *const ICredentialProviderUserArray,
            user_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAt: *const fn (
            self: *const ICredentialProviderUserArray,
            user_index: u32,
            user: ?*?*ICredentialProviderUser,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setProviderFilter(self: *const T, guid_provider_to_filter_to_: ?*const Guid) HRESULT {
                return @as(*const ICredentialProviderUserArray.VTable, @ptrCast(self.vtable)).SetProviderFilter(@as(*const ICredentialProviderUserArray, @ptrCast(self)), guid_provider_to_filter_to_);
            }
            pub inline fn getAccountOptions(self: *const T, credential_provider_account_options_: ?*CREDENTIAL_PROVIDER_ACCOUNT_OPTIONS) HRESULT {
                return @as(*const ICredentialProviderUserArray.VTable, @ptrCast(self.vtable)).GetAccountOptions(@as(*const ICredentialProviderUserArray, @ptrCast(self)), credential_provider_account_options_);
            }
            pub inline fn getCount(self: *const T, user_count_: ?*u32) HRESULT {
                return @as(*const ICredentialProviderUserArray.VTable, @ptrCast(self.vtable)).GetCount(@as(*const ICredentialProviderUserArray, @ptrCast(self)), user_count_);
            }
            pub inline fn getAt(self: *const T, user_index_: u32, user_: ?*?*ICredentialProviderUser) HRESULT {
                return @as(*const ICredentialProviderUserArray.VTable, @ptrCast(self.vtable)).GetAt(@as(*const ICredentialProviderUserArray, @ptrCast(self)), user_index_, user_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_ICredentialProviderSetUserArray_Value = Guid.initString("095c1484-1c0c-4388-9c6d-500e61bf84bd");
pub const IID_ICredentialProviderSetUserArray = &IID_ICredentialProviderSetUserArray_Value;
pub const ICredentialProviderSetUserArray = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetUserArray: *const fn (
            self: *const ICredentialProviderSetUserArray,
            users: ?*ICredentialProviderUserArray,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setUserArray(self: *const T, users_: ?*ICredentialProviderUserArray) HRESULT {
                return @as(*const ICredentialProviderSetUserArray.VTable, @ptrCast(self.vtable)).SetUserArray(@as(*const ICredentialProviderSetUserArray, @ptrCast(self)), users_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_SyncMgrClient_Value = Guid.initString("1202db60-1dac-42c5-aed5-1abdd432248e");
pub const CLSID_SyncMgrClient = &CLSID_SyncMgrClient_Value;

const CLSID_SyncMgrControl_Value = Guid.initString("1a1f4206-0688-4e7f-be03-d82ec69df9a5");
pub const CLSID_SyncMgrControl = &CLSID_SyncMgrControl_Value;

const CLSID_SyncMgrScheduleWizard_Value = Guid.initString("8d8b8e30-c451-421b-8553-d2976afa648c");
pub const CLSID_SyncMgrScheduleWizard = &CLSID_SyncMgrScheduleWizard_Value;

const CLSID_SyncMgrFolder_Value = Guid.initString("9c73f5e5-7ae7-4e32-a8e8-8d23b85255bf");
pub const CLSID_SyncMgrFolder = &CLSID_SyncMgrFolder_Value;

const CLSID_SyncSetupFolder_Value = Guid.initString("2e9e59c0-b437-4981-a647-9c34b9b90891");
pub const CLSID_SyncSetupFolder = &CLSID_SyncSetupFolder_Value;

const CLSID_ConflictFolder_Value = Guid.initString("289978ac-a101-4341-a817-21eba7fd046d");
pub const CLSID_ConflictFolder = &CLSID_ConflictFolder_Value;

const CLSID_SyncResultsFolder_Value = Guid.initString("71d99464-3b6b-475c-b241-e15883207529");
pub const CLSID_SyncResultsFolder = &CLSID_SyncResultsFolder_Value;

const CLSID_SimpleConflictPresenter_Value = Guid.initString("7a0f6ab7-ed84-46b6-b47e-02aa159a152b");
pub const CLSID_SimpleConflictPresenter = &CLSID_SimpleConflictPresenter_Value;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrHandlerCollection_Value = Guid.initString("a7f337a3-d20b-45cb-9ed7-87d094ca5045");
pub const IID_ISyncMgrHandlerCollection = &IID_ISyncMgrHandlerCollection_Value;
pub const ISyncMgrHandlerCollection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetHandlerEnumerator: *const fn (
            self: *const ISyncMgrHandlerCollection,
            ppenum: ?*?*IEnumString,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindToHandler: *const fn (
            self: *const ISyncMgrHandlerCollection,
            psz_handler_i_d: ?[*:0]const u16,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getHandlerEnumerator(self: *const T, ppenum_: ?*?*IEnumString) HRESULT {
                return @as(*const ISyncMgrHandlerCollection.VTable, @ptrCast(self.vtable)).GetHandlerEnumerator(@as(*const ISyncMgrHandlerCollection, @ptrCast(self)), ppenum_);
            }
            pub inline fn bindToHandler(self: *const T, psz_handler_i_d_: ?[*:0]const u16, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const ISyncMgrHandlerCollection.VTable, @ptrCast(self.vtable)).BindToHandler(@as(*const ISyncMgrHandlerCollection, @ptrCast(self)), psz_handler_i_d_, riid_, ppv_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGR_HANDLER_CAPABILITIES = enum(i32) {
    NONE = 0,
    PROVIDES_ICON = 1,
    EVENT_STORE = 2,
    CONFLICT_STORE = 4,
    SUPPORTS_CONCURRENT_SESSIONS = 16,
    CAN_BROWSE_CONTENT = 65536,
    CAN_SHOW_SCHEDULE = 131072,
    QUERY_BEFORE_ACTIVATE = 1048576,
    QUERY_BEFORE_DEACTIVATE = 2097152,
    QUERY_BEFORE_ENABLE = 4194304,
    QUERY_BEFORE_DISABLE = 8388608,
    VALID_MASK = 15925271,
};
pub const SYNCMGR_HCM_NONE = SYNCMGR_HANDLER_CAPABILITIES.NONE;
pub const SYNCMGR_HCM_PROVIDES_ICON = SYNCMGR_HANDLER_CAPABILITIES.PROVIDES_ICON;
pub const SYNCMGR_HCM_EVENT_STORE = SYNCMGR_HANDLER_CAPABILITIES.EVENT_STORE;
pub const SYNCMGR_HCM_CONFLICT_STORE = SYNCMGR_HANDLER_CAPABILITIES.CONFLICT_STORE;
pub const SYNCMGR_HCM_SUPPORTS_CONCURRENT_SESSIONS = SYNCMGR_HANDLER_CAPABILITIES.SUPPORTS_CONCURRENT_SESSIONS;
pub const SYNCMGR_HCM_CAN_BROWSE_CONTENT = SYNCMGR_HANDLER_CAPABILITIES.CAN_BROWSE_CONTENT;
pub const SYNCMGR_HCM_CAN_SHOW_SCHEDULE = SYNCMGR_HANDLER_CAPABILITIES.CAN_SHOW_SCHEDULE;
pub const SYNCMGR_HCM_QUERY_BEFORE_ACTIVATE = SYNCMGR_HANDLER_CAPABILITIES.QUERY_BEFORE_ACTIVATE;
pub const SYNCMGR_HCM_QUERY_BEFORE_DEACTIVATE = SYNCMGR_HANDLER_CAPABILITIES.QUERY_BEFORE_DEACTIVATE;
pub const SYNCMGR_HCM_QUERY_BEFORE_ENABLE = SYNCMGR_HANDLER_CAPABILITIES.QUERY_BEFORE_ENABLE;
pub const SYNCMGR_HCM_QUERY_BEFORE_DISABLE = SYNCMGR_HANDLER_CAPABILITIES.QUERY_BEFORE_DISABLE;
pub const SYNCMGR_HCM_VALID_MASK = SYNCMGR_HANDLER_CAPABILITIES.VALID_MASK;

pub const SYNCMGR_HANDLER_POLICIES = enum(i32) {
    NONE = 0,
    PREVENT_ACTIVATE = 1,
    PREVENT_DEACTIVATE = 2,
    PREVENT_ENABLE = 4,
    PREVENT_DISABLE = 8,
    PREVENT_START_SYNC = 16,
    PREVENT_STOP_SYNC = 32,
    DISABLE_ENABLE = 256,
    DISABLE_DISABLE = 512,
    DISABLE_START_SYNC = 1024,
    DISABLE_STOP_SYNC = 2048,
    DISABLE_BROWSE = 4096,
    DISABLE_SCHEDULE = 8192,
    HIDDEN_BY_DEFAULT = 65536,
    BACKGROUND_SYNC_ONLY = 48,
    VALID_MASK = 77631,
};
pub const SYNCMGR_HPM_NONE = SYNCMGR_HANDLER_POLICIES.NONE;
pub const SYNCMGR_HPM_PREVENT_ACTIVATE = SYNCMGR_HANDLER_POLICIES.PREVENT_ACTIVATE;
pub const SYNCMGR_HPM_PREVENT_DEACTIVATE = SYNCMGR_HANDLER_POLICIES.PREVENT_DEACTIVATE;
pub const SYNCMGR_HPM_PREVENT_ENABLE = SYNCMGR_HANDLER_POLICIES.PREVENT_ENABLE;
pub const SYNCMGR_HPM_PREVENT_DISABLE = SYNCMGR_HANDLER_POLICIES.PREVENT_DISABLE;
pub const SYNCMGR_HPM_PREVENT_START_SYNC = SYNCMGR_HANDLER_POLICIES.PREVENT_START_SYNC;
pub const SYNCMGR_HPM_PREVENT_STOP_SYNC = SYNCMGR_HANDLER_POLICIES.PREVENT_STOP_SYNC;
pub const SYNCMGR_HPM_DISABLE_ENABLE = SYNCMGR_HANDLER_POLICIES.DISABLE_ENABLE;
pub const SYNCMGR_HPM_DISABLE_DISABLE = SYNCMGR_HANDLER_POLICIES.DISABLE_DISABLE;
pub const SYNCMGR_HPM_DISABLE_START_SYNC = SYNCMGR_HANDLER_POLICIES.DISABLE_START_SYNC;
pub const SYNCMGR_HPM_DISABLE_STOP_SYNC = SYNCMGR_HANDLER_POLICIES.DISABLE_STOP_SYNC;
pub const SYNCMGR_HPM_DISABLE_BROWSE = SYNCMGR_HANDLER_POLICIES.DISABLE_BROWSE;
pub const SYNCMGR_HPM_DISABLE_SCHEDULE = SYNCMGR_HANDLER_POLICIES.DISABLE_SCHEDULE;
pub const SYNCMGR_HPM_HIDDEN_BY_DEFAULT = SYNCMGR_HANDLER_POLICIES.HIDDEN_BY_DEFAULT;
pub const SYNCMGR_HPM_BACKGROUND_SYNC_ONLY = SYNCMGR_HANDLER_POLICIES.BACKGROUND_SYNC_ONLY;
pub const SYNCMGR_HPM_VALID_MASK = SYNCMGR_HANDLER_POLICIES.VALID_MASK;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrHandler_Value = Guid.initString("04ec2e43-ac77-49f9-9b98-0307ef7a72a2");
pub const IID_ISyncMgrHandler = &IID_ISyncMgrHandler_Value;
pub const ISyncMgrHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetName: *const fn (
            self: *const ISyncMgrHandler,
            ppsz_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHandlerInfo: *const fn (
            self: *const ISyncMgrHandler,
            pp_handler_info: ?*?*ISyncMgrHandlerInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObject: *const fn (
            self: *const ISyncMgrHandler,
            rguid_object_i_d: ?*const Guid,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCapabilities: *const fn (
            self: *const ISyncMgrHandler,
            pm_capabilities: ?*SYNCMGR_HANDLER_CAPABILITIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicies: *const fn (
            self: *const ISyncMgrHandler,
            pm_policies: ?*SYNCMGR_HANDLER_POLICIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Activate: *const fn (
            self: *const ISyncMgrHandler,
            f_activate: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: *const fn (
            self: *const ISyncMgrHandler,
            f_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Synchronize: *const fn (
            self: *const ISyncMgrHandler,
            ppsz_item_i_ds: [*]?PWSTR,
            c_items: u32,
            hwnd_owner: ?HWND,
            p_session_creator: ?*ISyncMgrSessionCreator,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getName(self: *const T, ppsz_name_: ?*?PWSTR) HRESULT {
                return @as(*const ISyncMgrHandler.VTable, @ptrCast(self.vtable)).GetName(@as(*const ISyncMgrHandler, @ptrCast(self)), ppsz_name_);
            }
            pub inline fn getHandlerInfo(self: *const T, pp_handler_info_: ?*?*ISyncMgrHandlerInfo) HRESULT {
                return @as(*const ISyncMgrHandler.VTable, @ptrCast(self.vtable)).GetHandlerInfo(@as(*const ISyncMgrHandler, @ptrCast(self)), pp_handler_info_);
            }
            pub inline fn getObject(self: *const T, rguid_object_i_d_: ?*const Guid, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const ISyncMgrHandler.VTable, @ptrCast(self.vtable)).GetObject(@as(*const ISyncMgrHandler, @ptrCast(self)), rguid_object_i_d_, riid_, ppv_);
            }
            pub inline fn getCapabilities(self: *const T, pm_capabilities_: ?*SYNCMGR_HANDLER_CAPABILITIES) HRESULT {
                return @as(*const ISyncMgrHandler.VTable, @ptrCast(self.vtable)).GetCapabilities(@as(*const ISyncMgrHandler, @ptrCast(self)), pm_capabilities_);
            }
            pub inline fn getPolicies(self: *const T, pm_policies_: ?*SYNCMGR_HANDLER_POLICIES) HRESULT {
                return @as(*const ISyncMgrHandler.VTable, @ptrCast(self.vtable)).GetPolicies(@as(*const ISyncMgrHandler, @ptrCast(self)), pm_policies_);
            }
            pub inline fn activate(self: *const T, f_activate_: BOOL) HRESULT {
                return @as(*const ISyncMgrHandler.VTable, @ptrCast(self.vtable)).Activate(@as(*const ISyncMgrHandler, @ptrCast(self)), f_activate_);
            }
            pub inline fn enable(self: *const T, f_enable_: BOOL) HRESULT {
                return @as(*const ISyncMgrHandler.VTable, @ptrCast(self.vtable)).Enable(@as(*const ISyncMgrHandler, @ptrCast(self)), f_enable_);
            }
            pub inline fn synchronize(self: *const T, ppsz_item_i_ds_: [*]?PWSTR, c_items_: u32, hwnd_owner_: ?HWND, p_session_creator_: ?*ISyncMgrSessionCreator, punk_: ?*IUnknown) HRESULT {
                return @as(*const ISyncMgrHandler.VTable, @ptrCast(self.vtable)).Synchronize(@as(*const ISyncMgrHandler, @ptrCast(self)), ppsz_item_i_ds_, c_items_, hwnd_owner_, p_session_creator_, punk_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGR_HANDLER_TYPE = enum(i32) {
    UNSPECIFIED = 0,
    APPLICATION = 1,
    DEVICE = 2,
    FOLDER = 3,
    SERVICE = 4,
    COMPUTER = 5,
    // MIN = 0, this enum value conflicts with UNSPECIFIED
    // MAX = 5, this enum value conflicts with COMPUTER
};
pub const SYNCMGR_HT_UNSPECIFIED = SYNCMGR_HANDLER_TYPE.UNSPECIFIED;
pub const SYNCMGR_HT_APPLICATION = SYNCMGR_HANDLER_TYPE.APPLICATION;
pub const SYNCMGR_HT_DEVICE = SYNCMGR_HANDLER_TYPE.DEVICE;
pub const SYNCMGR_HT_FOLDER = SYNCMGR_HANDLER_TYPE.FOLDER;
pub const SYNCMGR_HT_SERVICE = SYNCMGR_HANDLER_TYPE.SERVICE;
pub const SYNCMGR_HT_COMPUTER = SYNCMGR_HANDLER_TYPE.COMPUTER;
pub const SYNCMGR_HT_MIN = SYNCMGR_HANDLER_TYPE.UNSPECIFIED;
pub const SYNCMGR_HT_MAX = SYNCMGR_HANDLER_TYPE.COMPUTER;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrHandlerInfo_Value = Guid.initString("4ff1d798-ecf7-4524-aa81-1e362a0aef3a");
pub const IID_ISyncMgrHandlerInfo = &IID_ISyncMgrHandlerInfo_Value;
pub const ISyncMgrHandlerInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetType: *const fn (
            self: *const ISyncMgrHandlerInfo,
            pn_type: ?*SYNCMGR_HANDLER_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTypeLabel: *const fn (
            self: *const ISyncMgrHandlerInfo,
            ppsz_type_label: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComment: *const fn (
            self: *const ISyncMgrHandlerInfo,
            ppsz_comment: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastSyncTime: *const fn (
            self: *const ISyncMgrHandlerInfo,
            pft_last_sync: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsActive: *const fn (
            self: *const ISyncMgrHandlerInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEnabled: *const fn (
            self: *const ISyncMgrHandlerInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsConnected: *const fn (
            self: *const ISyncMgrHandlerInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getType(self: *const T, pn_type_: ?*SYNCMGR_HANDLER_TYPE) HRESULT {
                return @as(*const ISyncMgrHandlerInfo.VTable, @ptrCast(self.vtable)).GetType(@as(*const ISyncMgrHandlerInfo, @ptrCast(self)), pn_type_);
            }
            pub inline fn getTypeLabel(self: *const T, ppsz_type_label_: ?*?PWSTR) HRESULT {
                return @as(*const ISyncMgrHandlerInfo.VTable, @ptrCast(self.vtable)).GetTypeLabel(@as(*const ISyncMgrHandlerInfo, @ptrCast(self)), ppsz_type_label_);
            }
            pub inline fn getComment(self: *const T, ppsz_comment_: ?*?PWSTR) HRESULT {
                return @as(*const ISyncMgrHandlerInfo.VTable, @ptrCast(self.vtable)).GetComment(@as(*const ISyncMgrHandlerInfo, @ptrCast(self)), ppsz_comment_);
            }
            pub inline fn getLastSyncTime(self: *const T, pft_last_sync_: ?*FILETIME) HRESULT {
                return @as(*const ISyncMgrHandlerInfo.VTable, @ptrCast(self.vtable)).GetLastSyncTime(@as(*const ISyncMgrHandlerInfo, @ptrCast(self)), pft_last_sync_);
            }
            pub inline fn isActive(self: *const T) HRESULT {
                return @as(*const ISyncMgrHandlerInfo.VTable, @ptrCast(self.vtable)).IsActive(@as(*const ISyncMgrHandlerInfo, @ptrCast(self)));
            }
            pub inline fn isEnabled(self: *const T) HRESULT {
                return @as(*const ISyncMgrHandlerInfo.VTable, @ptrCast(self.vtable)).IsEnabled(@as(*const ISyncMgrHandlerInfo, @ptrCast(self)));
            }
            pub inline fn isConnected(self: *const T) HRESULT {
                return @as(*const ISyncMgrHandlerInfo.VTable, @ptrCast(self.vtable)).IsConnected(@as(*const ISyncMgrHandlerInfo, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrSyncItemContainer_Value = Guid.initString("90701133-be32-4129-a65c-99e616cafff4");
pub const IID_ISyncMgrSyncItemContainer = &IID_ISyncMgrSyncItemContainer_Value;
pub const ISyncMgrSyncItemContainer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSyncItem: *const fn (
            self: *const ISyncMgrSyncItemContainer,
            psz_item_i_d: ?[*:0]const u16,
            pp_item: ?*?*ISyncMgrSyncItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncItemEnumerator: *const fn (
            self: *const ISyncMgrSyncItemContainer,
            ppenum: ?*?*IEnumSyncMgrSyncItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSyncItemCount: *const fn (
            self: *const ISyncMgrSyncItemContainer,
            pc_items: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSyncItem(self: *const T, psz_item_i_d_: ?[*:0]const u16, pp_item_: ?*?*ISyncMgrSyncItem) HRESULT {
                return @as(*const ISyncMgrSyncItemContainer.VTable, @ptrCast(self.vtable)).GetSyncItem(@as(*const ISyncMgrSyncItemContainer, @ptrCast(self)), psz_item_i_d_, pp_item_);
            }
            pub inline fn getSyncItemEnumerator(self: *const T, ppenum_: ?*?*IEnumSyncMgrSyncItems) HRESULT {
                return @as(*const ISyncMgrSyncItemContainer.VTable, @ptrCast(self.vtable)).GetSyncItemEnumerator(@as(*const ISyncMgrSyncItemContainer, @ptrCast(self)), ppenum_);
            }
            pub inline fn getSyncItemCount(self: *const T, pc_items_: ?*u32) HRESULT {
                return @as(*const ISyncMgrSyncItemContainer.VTable, @ptrCast(self.vtable)).GetSyncItemCount(@as(*const ISyncMgrSyncItemContainer, @ptrCast(self)), pc_items_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGR_ITEM_CAPABILITIES = enum(i32) {
    NONE = 0,
    PROVIDES_ICON = 1,
    EVENT_STORE = 2,
    CONFLICT_STORE = 4,
    CAN_DELETE = 16,
    CAN_BROWSE_CONTENT = 65536,
    QUERY_BEFORE_ENABLE = 1048576,
    QUERY_BEFORE_DISABLE = 2097152,
    QUERY_BEFORE_DELETE = 4194304,
    VALID_MASK = 7405591,
};
pub const SYNCMGR_ICM_NONE = SYNCMGR_ITEM_CAPABILITIES.NONE;
pub const SYNCMGR_ICM_PROVIDES_ICON = SYNCMGR_ITEM_CAPABILITIES.PROVIDES_ICON;
pub const SYNCMGR_ICM_EVENT_STORE = SYNCMGR_ITEM_CAPABILITIES.EVENT_STORE;
pub const SYNCMGR_ICM_CONFLICT_STORE = SYNCMGR_ITEM_CAPABILITIES.CONFLICT_STORE;
pub const SYNCMGR_ICM_CAN_DELETE = SYNCMGR_ITEM_CAPABILITIES.CAN_DELETE;
pub const SYNCMGR_ICM_CAN_BROWSE_CONTENT = SYNCMGR_ITEM_CAPABILITIES.CAN_BROWSE_CONTENT;
pub const SYNCMGR_ICM_QUERY_BEFORE_ENABLE = SYNCMGR_ITEM_CAPABILITIES.QUERY_BEFORE_ENABLE;
pub const SYNCMGR_ICM_QUERY_BEFORE_DISABLE = SYNCMGR_ITEM_CAPABILITIES.QUERY_BEFORE_DISABLE;
pub const SYNCMGR_ICM_QUERY_BEFORE_DELETE = SYNCMGR_ITEM_CAPABILITIES.QUERY_BEFORE_DELETE;
pub const SYNCMGR_ICM_VALID_MASK = SYNCMGR_ITEM_CAPABILITIES.VALID_MASK;

pub const SYNCMGR_ITEM_POLICIES = enum(i32) {
    NONE = 0,
    PREVENT_ENABLE = 1,
    PREVENT_DISABLE = 2,
    PREVENT_START_SYNC = 4,
    PREVENT_STOP_SYNC = 8,
    DISABLE_ENABLE = 16,
    DISABLE_DISABLE = 32,
    DISABLE_START_SYNC = 64,
    DISABLE_STOP_SYNC = 128,
    DISABLE_BROWSE = 256,
    DISABLE_DELETE = 512,
    HIDDEN_BY_DEFAULT = 65536,
    VALID_MASK = 66303,
};
pub const SYNCMGR_IPM_NONE = SYNCMGR_ITEM_POLICIES.NONE;
pub const SYNCMGR_IPM_PREVENT_ENABLE = SYNCMGR_ITEM_POLICIES.PREVENT_ENABLE;
pub const SYNCMGR_IPM_PREVENT_DISABLE = SYNCMGR_ITEM_POLICIES.PREVENT_DISABLE;
pub const SYNCMGR_IPM_PREVENT_START_SYNC = SYNCMGR_ITEM_POLICIES.PREVENT_START_SYNC;
pub const SYNCMGR_IPM_PREVENT_STOP_SYNC = SYNCMGR_ITEM_POLICIES.PREVENT_STOP_SYNC;
pub const SYNCMGR_IPM_DISABLE_ENABLE = SYNCMGR_ITEM_POLICIES.DISABLE_ENABLE;
pub const SYNCMGR_IPM_DISABLE_DISABLE = SYNCMGR_ITEM_POLICIES.DISABLE_DISABLE;
pub const SYNCMGR_IPM_DISABLE_START_SYNC = SYNCMGR_ITEM_POLICIES.DISABLE_START_SYNC;
pub const SYNCMGR_IPM_DISABLE_STOP_SYNC = SYNCMGR_ITEM_POLICIES.DISABLE_STOP_SYNC;
pub const SYNCMGR_IPM_DISABLE_BROWSE = SYNCMGR_ITEM_POLICIES.DISABLE_BROWSE;
pub const SYNCMGR_IPM_DISABLE_DELETE = SYNCMGR_ITEM_POLICIES.DISABLE_DELETE;
pub const SYNCMGR_IPM_HIDDEN_BY_DEFAULT = SYNCMGR_ITEM_POLICIES.HIDDEN_BY_DEFAULT;
pub const SYNCMGR_IPM_VALID_MASK = SYNCMGR_ITEM_POLICIES.VALID_MASK;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrSyncItem_Value = Guid.initString("b20b24ce-2593-4f04-bd8b-7ad6c45051cd");
pub const IID_ISyncMgrSyncItem = &IID_ISyncMgrSyncItem_Value;
pub const ISyncMgrSyncItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetItemID: *const fn (
            self: *const ISyncMgrSyncItem,
            ppsz_item_i_d: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn (
            self: *const ISyncMgrSyncItem,
            ppsz_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemInfo: *const fn (
            self: *const ISyncMgrSyncItem,
            pp_item_info: ?*?*ISyncMgrSyncItemInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObject: *const fn (
            self: *const ISyncMgrSyncItem,
            rguid_object_i_d: ?*const Guid,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCapabilities: *const fn (
            self: *const ISyncMgrSyncItem,
            pm_capabilities: ?*SYNCMGR_ITEM_CAPABILITIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPolicies: *const fn (
            self: *const ISyncMgrSyncItem,
            pm_policies: ?*SYNCMGR_ITEM_POLICIES,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: *const fn (
            self: *const ISyncMgrSyncItem,
            f_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const ISyncMgrSyncItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getItemID(self: *const T, ppsz_item_i_d_: ?*?PWSTR) HRESULT {
                return @as(*const ISyncMgrSyncItem.VTable, @ptrCast(self.vtable)).GetItemID(@as(*const ISyncMgrSyncItem, @ptrCast(self)), ppsz_item_i_d_);
            }
            pub inline fn getName(self: *const T, ppsz_name_: ?*?PWSTR) HRESULT {
                return @as(*const ISyncMgrSyncItem.VTable, @ptrCast(self.vtable)).GetName(@as(*const ISyncMgrSyncItem, @ptrCast(self)), ppsz_name_);
            }
            pub inline fn getItemInfo(self: *const T, pp_item_info_: ?*?*ISyncMgrSyncItemInfo) HRESULT {
                return @as(*const ISyncMgrSyncItem.VTable, @ptrCast(self.vtable)).GetItemInfo(@as(*const ISyncMgrSyncItem, @ptrCast(self)), pp_item_info_);
            }
            pub inline fn getObject(self: *const T, rguid_object_i_d_: ?*const Guid, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const ISyncMgrSyncItem.VTable, @ptrCast(self.vtable)).GetObject(@as(*const ISyncMgrSyncItem, @ptrCast(self)), rguid_object_i_d_, riid_, ppv_);
            }
            pub inline fn getCapabilities(self: *const T, pm_capabilities_: ?*SYNCMGR_ITEM_CAPABILITIES) HRESULT {
                return @as(*const ISyncMgrSyncItem.VTable, @ptrCast(self.vtable)).GetCapabilities(@as(*const ISyncMgrSyncItem, @ptrCast(self)), pm_capabilities_);
            }
            pub inline fn getPolicies(self: *const T, pm_policies_: ?*SYNCMGR_ITEM_POLICIES) HRESULT {
                return @as(*const ISyncMgrSyncItem.VTable, @ptrCast(self.vtable)).GetPolicies(@as(*const ISyncMgrSyncItem, @ptrCast(self)), pm_policies_);
            }
            pub inline fn enable(self: *const T, f_enable_: BOOL) HRESULT {
                return @as(*const ISyncMgrSyncItem.VTable, @ptrCast(self.vtable)).Enable(@as(*const ISyncMgrSyncItem, @ptrCast(self)), f_enable_);
            }
            pub inline fn delete(self: *const T) HRESULT {
                return @as(*const ISyncMgrSyncItem.VTable, @ptrCast(self.vtable)).Delete(@as(*const ISyncMgrSyncItem, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrSyncItemInfo_Value = Guid.initString("e7fd9502-be0c-4464-90a1-2b5277031232");
pub const IID_ISyncMgrSyncItemInfo = &IID_ISyncMgrSyncItemInfo_Value;
pub const ISyncMgrSyncItemInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTypeLabel: *const fn (
            self: *const ISyncMgrSyncItemInfo,
            ppsz_type_label: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComment: *const fn (
            self: *const ISyncMgrSyncItemInfo,
            ppsz_comment: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastSyncTime: *const fn (
            self: *const ISyncMgrSyncItemInfo,
            pft_last_sync: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEnabled: *const fn (
            self: *const ISyncMgrSyncItemInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsConnected: *const fn (
            self: *const ISyncMgrSyncItemInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getTypeLabel(self: *const T, ppsz_type_label_: ?*?PWSTR) HRESULT {
                return @as(*const ISyncMgrSyncItemInfo.VTable, @ptrCast(self.vtable)).GetTypeLabel(@as(*const ISyncMgrSyncItemInfo, @ptrCast(self)), ppsz_type_label_);
            }
            pub inline fn getComment(self: *const T, ppsz_comment_: ?*?PWSTR) HRESULT {
                return @as(*const ISyncMgrSyncItemInfo.VTable, @ptrCast(self.vtable)).GetComment(@as(*const ISyncMgrSyncItemInfo, @ptrCast(self)), ppsz_comment_);
            }
            pub inline fn getLastSyncTime(self: *const T, pft_last_sync_: ?*FILETIME) HRESULT {
                return @as(*const ISyncMgrSyncItemInfo.VTable, @ptrCast(self.vtable)).GetLastSyncTime(@as(*const ISyncMgrSyncItemInfo, @ptrCast(self)), pft_last_sync_);
            }
            pub inline fn isEnabled(self: *const T) HRESULT {
                return @as(*const ISyncMgrSyncItemInfo.VTable, @ptrCast(self.vtable)).IsEnabled(@as(*const ISyncMgrSyncItemInfo, @ptrCast(self)));
            }
            pub inline fn isConnected(self: *const T) HRESULT {
                return @as(*const ISyncMgrSyncItemInfo.VTable, @ptrCast(self.vtable)).IsConnected(@as(*const ISyncMgrSyncItemInfo, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumSyncMgrSyncItems_Value = Guid.initString("54b3abf3-f085-4181-b546-e29c403c726b");
pub const IID_IEnumSyncMgrSyncItems = &IID_IEnumSyncMgrSyncItems_Value;
pub const IEnumSyncMgrSyncItems = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumSyncMgrSyncItems,
            celt: u32,
            rgelt: [*]?*ISyncMgrSyncItem,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumSyncMgrSyncItems,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumSyncMgrSyncItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumSyncMgrSyncItems,
            ppenum: ?*?*IEnumSyncMgrSyncItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: [*]?*ISyncMgrSyncItem, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumSyncMgrSyncItems.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumSyncMgrSyncItems, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumSyncMgrSyncItems.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumSyncMgrSyncItems, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumSyncMgrSyncItems.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumSyncMgrSyncItems, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumSyncMgrSyncItems) HRESULT {
                return @as(*const IEnumSyncMgrSyncItems.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumSyncMgrSyncItems, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGR_PROGRESS_STATUS = enum(i32) {
    UPDATING = 1,
    UPDATING_INDETERMINATE = 2,
    SUCCEEDED = 3,
    FAILED = 4,
    CANCELED = 5,
    DISCONNECTED = 6,
    // MAX = 6, this enum value conflicts with DISCONNECTED
};
pub const SYNCMGR_PS_UPDATING = SYNCMGR_PROGRESS_STATUS.UPDATING;
pub const SYNCMGR_PS_UPDATING_INDETERMINATE = SYNCMGR_PROGRESS_STATUS.UPDATING_INDETERMINATE;
pub const SYNCMGR_PS_SUCCEEDED = SYNCMGR_PROGRESS_STATUS.SUCCEEDED;
pub const SYNCMGR_PS_FAILED = SYNCMGR_PROGRESS_STATUS.FAILED;
pub const SYNCMGR_PS_CANCELED = SYNCMGR_PROGRESS_STATUS.CANCELED;
pub const SYNCMGR_PS_DISCONNECTED = SYNCMGR_PROGRESS_STATUS.DISCONNECTED;
pub const SYNCMGR_PS_MAX = SYNCMGR_PROGRESS_STATUS.DISCONNECTED;

pub const SYNCMGR_CANCEL_REQUEST = enum(i32) {
    NONE = 0,
    CANCEL_ITEM = 1,
    CANCEL_ALL = 2,
    // MAX = 2, this enum value conflicts with CANCEL_ALL
};
pub const SYNCMGR_CR_NONE = SYNCMGR_CANCEL_REQUEST.NONE;
pub const SYNCMGR_CR_CANCEL_ITEM = SYNCMGR_CANCEL_REQUEST.CANCEL_ITEM;
pub const SYNCMGR_CR_CANCEL_ALL = SYNCMGR_CANCEL_REQUEST.CANCEL_ALL;
pub const SYNCMGR_CR_MAX = SYNCMGR_CANCEL_REQUEST.CANCEL_ALL;

pub const SYNCMGR_EVENT_LEVEL = enum(i32) {
    INFORMATION = 1,
    WARNING = 2,
    ERROR = 3,
    // MAX = 3, this enum value conflicts with ERROR
};
pub const SYNCMGR_EL_INFORMATION = SYNCMGR_EVENT_LEVEL.INFORMATION;
pub const SYNCMGR_EL_WARNING = SYNCMGR_EVENT_LEVEL.WARNING;
pub const SYNCMGR_EL_ERROR = SYNCMGR_EVENT_LEVEL.ERROR;
pub const SYNCMGR_EL_MAX = SYNCMGR_EVENT_LEVEL.ERROR;

pub const SYNCMGR_EVENT_FLAGS = enum(i32) {
    NONE = 0,
    // VALID = 0, this enum value conflicts with NONE
};
pub const SYNCMGR_EF_NONE = SYNCMGR_EVENT_FLAGS.NONE;
pub const SYNCMGR_EF_VALID = SYNCMGR_EVENT_FLAGS.NONE;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrSessionCreator_Value = Guid.initString("17f48517-f305-4321-a08d-b25a834918fd");
pub const IID_ISyncMgrSessionCreator = &IID_ISyncMgrSessionCreator_Value;
pub const ISyncMgrSessionCreator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateSession: *const fn (
            self: *const ISyncMgrSessionCreator,
            psz_handler_i_d: ?[*:0]const u16,
            ppsz_item_i_ds: [*]?PWSTR,
            c_items: u32,
            pp_callback: ?*?*ISyncMgrSyncCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createSession(self: *const T, psz_handler_i_d_: ?[*:0]const u16, ppsz_item_i_ds_: [*]?PWSTR, c_items_: u32, pp_callback_: ?*?*ISyncMgrSyncCallback) HRESULT {
                return @as(*const ISyncMgrSessionCreator.VTable, @ptrCast(self.vtable)).CreateSession(@as(*const ISyncMgrSessionCreator, @ptrCast(self)), psz_handler_i_d_, ppsz_item_i_ds_, c_items_, pp_callback_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrSyncCallback_Value = Guid.initString("884ccd87-b139-4937-a4ba-4f8e19513fbe");
pub const IID_ISyncMgrSyncCallback = &IID_ISyncMgrSyncCallback_Value;
pub const ISyncMgrSyncCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ReportProgress: *const fn (
            self: *const ISyncMgrSyncCallback,
            psz_item_i_d: ?[*:0]const u16,
            psz_progress_text: ?[*:0]const u16,
            n_status: SYNCMGR_PROGRESS_STATUS,
            u_current_step: u32,
            u_max_step: u32,
            pn_cancel_request: ?*SYNCMGR_CANCEL_REQUEST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHandlerProgressText: *const fn (
            self: *const ISyncMgrSyncCallback,
            psz_progress_text: ?[*:0]const u16,
            pn_cancel_request: ?*SYNCMGR_CANCEL_REQUEST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReportEvent: *const fn (
            self: *const ISyncMgrSyncCallback,
            psz_item_i_d: ?[*:0]const u16,
            n_level: SYNCMGR_EVENT_LEVEL,
            n_flags: SYNCMGR_EVENT_FLAGS,
            psz_name: ?[*:0]const u16,
            psz_description: ?[*:0]const u16,
            psz_link_text: ?[*:0]const u16,
            psz_link_reference: ?[*:0]const u16,
            psz_context: ?[*:0]const u16,
            pguid_event_i_d: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanContinue: *const fn (
            self: *const ISyncMgrSyncCallback,
            psz_item_i_d: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryForAdditionalItems: *const fn (
            self: *const ISyncMgrSyncCallback,
            ppenum_item_i_ds: ?*?*IEnumString,
            ppenum_punks: ?*?*IEnumUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddItemToSession: *const fn (
            self: *const ISyncMgrSyncCallback,
            psz_item_i_d: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddIUnknownToSession: *const fn (
            self: *const ISyncMgrSyncCallback,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProposeItem: *const fn (
            self: *const ISyncMgrSyncCallback,
            p_new_item: ?*ISyncMgrSyncItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitItem: *const fn (
            self: *const ISyncMgrSyncCallback,
            psz_item_i_d: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReportManualSync: *const fn (
            self: *const ISyncMgrSyncCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn reportProgress(self: *const T, psz_item_i_d_: ?[*:0]const u16, psz_progress_text_: ?[*:0]const u16, n_status_: SYNCMGR_PROGRESS_STATUS, u_current_step_: u32, u_max_step_: u32, pn_cancel_request_: ?*SYNCMGR_CANCEL_REQUEST) HRESULT {
                return @as(*const ISyncMgrSyncCallback.VTable, @ptrCast(self.vtable)).ReportProgress(@as(*const ISyncMgrSyncCallback, @ptrCast(self)), psz_item_i_d_, psz_progress_text_, n_status_, u_current_step_, u_max_step_, pn_cancel_request_);
            }
            pub inline fn setHandlerProgressText(self: *const T, psz_progress_text_: ?[*:0]const u16, pn_cancel_request_: ?*SYNCMGR_CANCEL_REQUEST) HRESULT {
                return @as(*const ISyncMgrSyncCallback.VTable, @ptrCast(self.vtable)).SetHandlerProgressText(@as(*const ISyncMgrSyncCallback, @ptrCast(self)), psz_progress_text_, pn_cancel_request_);
            }
            pub inline fn reportEvent(self: *const T, psz_item_i_d_: ?[*:0]const u16, n_level_: SYNCMGR_EVENT_LEVEL, n_flags_: SYNCMGR_EVENT_FLAGS, psz_name_: ?[*:0]const u16, psz_description_: ?[*:0]const u16, psz_link_text_: ?[*:0]const u16, psz_link_reference_: ?[*:0]const u16, psz_context_: ?[*:0]const u16, pguid_event_i_d_: ?*Guid) HRESULT {
                return @as(*const ISyncMgrSyncCallback.VTable, @ptrCast(self.vtable)).ReportEvent(@as(*const ISyncMgrSyncCallback, @ptrCast(self)), psz_item_i_d_, n_level_, n_flags_, psz_name_, psz_description_, psz_link_text_, psz_link_reference_, psz_context_, pguid_event_i_d_);
            }
            pub inline fn canContinue(self: *const T, psz_item_i_d_: ?[*:0]const u16) HRESULT {
                return @as(*const ISyncMgrSyncCallback.VTable, @ptrCast(self.vtable)).CanContinue(@as(*const ISyncMgrSyncCallback, @ptrCast(self)), psz_item_i_d_);
            }
            pub inline fn queryForAdditionalItems(self: *const T, ppenum_item_i_ds_: ?*?*IEnumString, ppenum_punks_: ?*?*IEnumUnknown) HRESULT {
                return @as(*const ISyncMgrSyncCallback.VTable, @ptrCast(self.vtable)).QueryForAdditionalItems(@as(*const ISyncMgrSyncCallback, @ptrCast(self)), ppenum_item_i_ds_, ppenum_punks_);
            }
            pub inline fn addItemToSession(self: *const T, psz_item_i_d_: ?[*:0]const u16) HRESULT {
                return @as(*const ISyncMgrSyncCallback.VTable, @ptrCast(self.vtable)).AddItemToSession(@as(*const ISyncMgrSyncCallback, @ptrCast(self)), psz_item_i_d_);
            }
            pub inline fn addIUnknownToSession(self: *const T, punk_: ?*IUnknown) HRESULT {
                return @as(*const ISyncMgrSyncCallback.VTable, @ptrCast(self.vtable)).AddIUnknownToSession(@as(*const ISyncMgrSyncCallback, @ptrCast(self)), punk_);
            }
            pub inline fn proposeItem(self: *const T, p_new_item_: ?*ISyncMgrSyncItem) HRESULT {
                return @as(*const ISyncMgrSyncCallback.VTable, @ptrCast(self.vtable)).ProposeItem(@as(*const ISyncMgrSyncCallback, @ptrCast(self)), p_new_item_);
            }
            pub inline fn commitItem(self: *const T, psz_item_i_d_: ?[*:0]const u16) HRESULT {
                return @as(*const ISyncMgrSyncCallback.VTable, @ptrCast(self.vtable)).CommitItem(@as(*const ISyncMgrSyncCallback, @ptrCast(self)), psz_item_i_d_);
            }
            pub inline fn reportManualSync(self: *const T) HRESULT {
                return @as(*const ISyncMgrSyncCallback.VTable, @ptrCast(self.vtable)).ReportManualSync(@as(*const ISyncMgrSyncCallback, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrUIOperation_Value = Guid.initString("fc7cfa47-dfe1-45b5-a049-8cfd82bec271");
pub const IID_ISyncMgrUIOperation = &IID_ISyncMgrUIOperation_Value;
pub const ISyncMgrUIOperation = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Run: *const fn (
            self: *const ISyncMgrUIOperation,
            hwnd_owner: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn run(self: *const T, hwnd_owner_: ?HWND) HRESULT {
                return @as(*const ISyncMgrUIOperation.VTable, @ptrCast(self.vtable)).Run(@as(*const ISyncMgrUIOperation, @ptrCast(self)), hwnd_owner_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrEventLinkUIOperation_Value = Guid.initString("64522e52-848b-4015-89ce-5a36f00b94ff");
pub const IID_ISyncMgrEventLinkUIOperation = &IID_ISyncMgrEventLinkUIOperation_Value;
pub const ISyncMgrEventLinkUIOperation = extern struct {
    pub const VTable = extern struct {
        base: ISyncMgrUIOperation.VTable,
        Init: *const fn (
            self: *const ISyncMgrEventLinkUIOperation,
            rguid_event_i_d: ?*const Guid,
            p_event: ?*ISyncMgrEvent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISyncMgrUIOperation.MethodMixin(T);
            pub inline fn init(self: *const T, rguid_event_i_d_: ?*const Guid, p_event_: ?*ISyncMgrEvent) HRESULT {
                return @as(*const ISyncMgrEventLinkUIOperation.VTable, @ptrCast(self.vtable)).Init(@as(*const ISyncMgrEventLinkUIOperation, @ptrCast(self)), rguid_event_i_d_, p_event_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrScheduleWizardUIOperation_Value = Guid.initString("459a6c84-21d2-4ddc-8a53-f023a46066f2");
pub const IID_ISyncMgrScheduleWizardUIOperation = &IID_ISyncMgrScheduleWizardUIOperation_Value;
pub const ISyncMgrScheduleWizardUIOperation = extern struct {
    pub const VTable = extern struct {
        base: ISyncMgrUIOperation.VTable,
        InitWizard: *const fn (
            self: *const ISyncMgrScheduleWizardUIOperation,
            psz_handler_i_d: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISyncMgrUIOperation.MethodMixin(T);
            pub inline fn initWizard(self: *const T, psz_handler_i_d_: ?[*:0]const u16) HRESULT {
                return @as(*const ISyncMgrScheduleWizardUIOperation.VTable, @ptrCast(self.vtable)).InitWizard(@as(*const ISyncMgrScheduleWizardUIOperation, @ptrCast(self)), psz_handler_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrSyncResult_Value = Guid.initString("2b90f17e-5a3e-4b33-bb7f-1bc48056b94d");
pub const IID_ISyncMgrSyncResult = &IID_ISyncMgrSyncResult_Value;
pub const ISyncMgrSyncResult = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Result: *const fn (
            self: *const ISyncMgrSyncResult,
            n_status: SYNCMGR_PROGRESS_STATUS,
            c_error: u32,
            c_conflicts: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn result(self: *const T, n_status_: SYNCMGR_PROGRESS_STATUS, c_error_: u32, c_conflicts_: u32) HRESULT {
                return @as(*const ISyncMgrSyncResult.VTable, @ptrCast(self.vtable)).Result(@as(*const ISyncMgrSyncResult, @ptrCast(self)), n_status_, c_error_, c_conflicts_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGR_CONTROL_FLAGS = enum(i32) {
    NONE = 0,
    // NOWAIT = 0, this enum value conflicts with NONE
    WAIT = 1,
    NOUI = 2,
    VALID = 3,
};
pub const SYNCMGR_CF_NONE = SYNCMGR_CONTROL_FLAGS.NONE;
pub const SYNCMGR_CF_NOWAIT = SYNCMGR_CONTROL_FLAGS.NONE;
pub const SYNCMGR_CF_WAIT = SYNCMGR_CONTROL_FLAGS.WAIT;
pub const SYNCMGR_CF_NOUI = SYNCMGR_CONTROL_FLAGS.NOUI;
pub const SYNCMGR_CF_VALID = SYNCMGR_CONTROL_FLAGS.VALID;

pub const SYNCMGR_SYNC_CONTROL_FLAGS = enum(i32) {
    NONE = 0,
    IGNORE_IF_ALREADY_SYNCING = 1,
    // VALID = 1, this enum value conflicts with IGNORE_IF_ALREADY_SYNCING
};
pub const SYNCMGR_SCF_NONE = SYNCMGR_SYNC_CONTROL_FLAGS.NONE;
pub const SYNCMGR_SCF_IGNORE_IF_ALREADY_SYNCING = SYNCMGR_SYNC_CONTROL_FLAGS.IGNORE_IF_ALREADY_SYNCING;
pub const SYNCMGR_SCF_VALID = SYNCMGR_SYNC_CONTROL_FLAGS.IGNORE_IF_ALREADY_SYNCING;

pub const SYNCMGR_UPDATE_REASON = enum(i32) {
    ADDED = 0,
    CHANGED = 1,
    REMOVED = 2,
    // MAX = 2, this enum value conflicts with REMOVED
};
pub const SYNCMGR_UR_ADDED = SYNCMGR_UPDATE_REASON.ADDED;
pub const SYNCMGR_UR_CHANGED = SYNCMGR_UPDATE_REASON.CHANGED;
pub const SYNCMGR_UR_REMOVED = SYNCMGR_UPDATE_REASON.REMOVED;
pub const SYNCMGR_UR_MAX = SYNCMGR_UPDATE_REASON.REMOVED;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrControl_Value = Guid.initString("9b63616c-36b2-46bc-959f-c1593952d19b");
pub const IID_ISyncMgrControl = &IID_ISyncMgrControl_Value;
pub const ISyncMgrControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartHandlerSync: *const fn (
            self: *const ISyncMgrControl,
            psz_handler_i_d: ?[*:0]const u16,
            hwnd_owner: ?HWND,
            punk: ?*IUnknown,
            n_sync_control_flags: SYNCMGR_SYNC_CONTROL_FLAGS,
            p_result: ?*ISyncMgrSyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartItemSync: *const fn (
            self: *const ISyncMgrControl,
            psz_handler_i_d: ?[*:0]const u16,
            ppsz_item_i_ds: [*]?PWSTR,
            c_items: u32,
            hwnd_owner: ?HWND,
            punk: ?*IUnknown,
            n_sync_control_flags: SYNCMGR_SYNC_CONTROL_FLAGS,
            p_result: ?*ISyncMgrSyncResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartSyncAll: *const fn (
            self: *const ISyncMgrControl,
            hwnd_owner: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopHandlerSync: *const fn (
            self: *const ISyncMgrControl,
            psz_handler_i_d: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopItemSync: *const fn (
            self: *const ISyncMgrControl,
            psz_handler_i_d: ?[*:0]const u16,
            ppsz_item_i_ds: [*]?PWSTR,
            c_items: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopSyncAll: *const fn (
            self: *const ISyncMgrControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateHandlerCollection: *const fn (
            self: *const ISyncMgrControl,
            rclsid_collection_i_d: ?*const Guid,
            n_control_flags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateHandler: *const fn (
            self: *const ISyncMgrControl,
            psz_handler_i_d: ?[*:0]const u16,
            n_control_flags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateItem: *const fn (
            self: *const ISyncMgrControl,
            psz_handler_i_d: ?[*:0]const u16,
            psz_item_i_d: ?[*:0]const u16,
            n_control_flags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateEvents: *const fn (
            self: *const ISyncMgrControl,
            psz_handler_i_d: ?[*:0]const u16,
            psz_item_i_d: ?[*:0]const u16,
            n_control_flags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateConflict: *const fn (
            self: *const ISyncMgrControl,
            psz_handler_i_d: ?[*:0]const u16,
            psz_item_i_d: ?[*:0]const u16,
            p_conflict: ?*ISyncMgrConflict,
            n_reason: SYNCMGR_UPDATE_REASON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateConflicts: *const fn (
            self: *const ISyncMgrControl,
            psz_handler_i_d: ?[*:0]const u16,
            psz_item_i_d: ?[*:0]const u16,
            n_control_flags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivateHandler: *const fn (
            self: *const ISyncMgrControl,
            f_activate: BOOL,
            psz_handler_i_d: ?[*:0]const u16,
            hwnd_owner: ?HWND,
            n_control_flags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableHandler: *const fn (
            self: *const ISyncMgrControl,
            f_enable: BOOL,
            psz_handler_i_d: ?[*:0]const u16,
            hwnd_owner: ?HWND,
            n_control_flags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableItem: *const fn (
            self: *const ISyncMgrControl,
            f_enable: BOOL,
            psz_handler_i_d: ?[*:0]const u16,
            psz_item_i_d: ?[*:0]const u16,
            hwnd_owner: ?HWND,
            n_control_flags: SYNCMGR_CONTROL_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn startHandlerSync(self: *const T, psz_handler_i_d_: ?[*:0]const u16, hwnd_owner_: ?HWND, punk_: ?*IUnknown, n_sync_control_flags_: SYNCMGR_SYNC_CONTROL_FLAGS, p_result_: ?*ISyncMgrSyncResult) HRESULT {
                return @as(*const ISyncMgrControl.VTable, @ptrCast(self.vtable)).StartHandlerSync(@as(*const ISyncMgrControl, @ptrCast(self)), psz_handler_i_d_, hwnd_owner_, punk_, n_sync_control_flags_, p_result_);
            }
            pub inline fn startItemSync(self: *const T, psz_handler_i_d_: ?[*:0]const u16, ppsz_item_i_ds_: [*]?PWSTR, c_items_: u32, hwnd_owner_: ?HWND, punk_: ?*IUnknown, n_sync_control_flags_: SYNCMGR_SYNC_CONTROL_FLAGS, p_result_: ?*ISyncMgrSyncResult) HRESULT {
                return @as(*const ISyncMgrControl.VTable, @ptrCast(self.vtable)).StartItemSync(@as(*const ISyncMgrControl, @ptrCast(self)), psz_handler_i_d_, ppsz_item_i_ds_, c_items_, hwnd_owner_, punk_, n_sync_control_flags_, p_result_);
            }
            pub inline fn startSyncAll(self: *const T, hwnd_owner_: ?HWND) HRESULT {
                return @as(*const ISyncMgrControl.VTable, @ptrCast(self.vtable)).StartSyncAll(@as(*const ISyncMgrControl, @ptrCast(self)), hwnd_owner_);
            }
            pub inline fn stopHandlerSync(self: *const T, psz_handler_i_d_: ?[*:0]const u16) HRESULT {
                return @as(*const ISyncMgrControl.VTable, @ptrCast(self.vtable)).StopHandlerSync(@as(*const ISyncMgrControl, @ptrCast(self)), psz_handler_i_d_);
            }
            pub inline fn stopItemSync(self: *const T, psz_handler_i_d_: ?[*:0]const u16, ppsz_item_i_ds_: [*]?PWSTR, c_items_: u32) HRESULT {
                return @as(*const ISyncMgrControl.VTable, @ptrCast(self.vtable)).StopItemSync(@as(*const ISyncMgrControl, @ptrCast(self)), psz_handler_i_d_, ppsz_item_i_ds_, c_items_);
            }
            pub inline fn stopSyncAll(self: *const T) HRESULT {
                return @as(*const ISyncMgrControl.VTable, @ptrCast(self.vtable)).StopSyncAll(@as(*const ISyncMgrControl, @ptrCast(self)));
            }
            pub inline fn updateHandlerCollection(self: *const T, rclsid_collection_i_d_: ?*const Guid, n_control_flags_: SYNCMGR_CONTROL_FLAGS) HRESULT {
                return @as(*const ISyncMgrControl.VTable, @ptrCast(self.vtable)).UpdateHandlerCollection(@as(*const ISyncMgrControl, @ptrCast(self)), rclsid_collection_i_d_, n_control_flags_);
            }
            pub inline fn updateHandler(self: *const T, psz_handler_i_d_: ?[*:0]const u16, n_control_flags_: SYNCMGR_CONTROL_FLAGS) HRESULT {
                return @as(*const ISyncMgrControl.VTable, @ptrCast(self.vtable)).UpdateHandler(@as(*const ISyncMgrControl, @ptrCast(self)), psz_handler_i_d_, n_control_flags_);
            }
            pub inline fn updateItem(self: *const T, psz_handler_i_d_: ?[*:0]const u16, psz_item_i_d_: ?[*:0]const u16, n_control_flags_: SYNCMGR_CONTROL_FLAGS) HRESULT {
                return @as(*const ISyncMgrControl.VTable, @ptrCast(self.vtable)).UpdateItem(@as(*const ISyncMgrControl, @ptrCast(self)), psz_handler_i_d_, psz_item_i_d_, n_control_flags_);
            }
            pub inline fn updateEvents(self: *const T, psz_handler_i_d_: ?[*:0]const u16, psz_item_i_d_: ?[*:0]const u16, n_control_flags_: SYNCMGR_CONTROL_FLAGS) HRESULT {
                return @as(*const ISyncMgrControl.VTable, @ptrCast(self.vtable)).UpdateEvents(@as(*const ISyncMgrControl, @ptrCast(self)), psz_handler_i_d_, psz_item_i_d_, n_control_flags_);
            }
            pub inline fn updateConflict(self: *const T, psz_handler_i_d_: ?[*:0]const u16, psz_item_i_d_: ?[*:0]const u16, p_conflict_: ?*ISyncMgrConflict, n_reason_: SYNCMGR_UPDATE_REASON) HRESULT {
                return @as(*const ISyncMgrControl.VTable, @ptrCast(self.vtable)).UpdateConflict(@as(*const ISyncMgrControl, @ptrCast(self)), psz_handler_i_d_, psz_item_i_d_, p_conflict_, n_reason_);
            }
            pub inline fn updateConflicts(self: *const T, psz_handler_i_d_: ?[*:0]const u16, psz_item_i_d_: ?[*:0]const u16, n_control_flags_: SYNCMGR_CONTROL_FLAGS) HRESULT {
                return @as(*const ISyncMgrControl.VTable, @ptrCast(self.vtable)).UpdateConflicts(@as(*const ISyncMgrControl, @ptrCast(self)), psz_handler_i_d_, psz_item_i_d_, n_control_flags_);
            }
            pub inline fn activateHandler(self: *const T, f_activate_: BOOL, psz_handler_i_d_: ?[*:0]const u16, hwnd_owner_: ?HWND, n_control_flags_: SYNCMGR_CONTROL_FLAGS) HRESULT {
                return @as(*const ISyncMgrControl.VTable, @ptrCast(self.vtable)).ActivateHandler(@as(*const ISyncMgrControl, @ptrCast(self)), f_activate_, psz_handler_i_d_, hwnd_owner_, n_control_flags_);
            }
            pub inline fn enableHandler(self: *const T, f_enable_: BOOL, psz_handler_i_d_: ?[*:0]const u16, hwnd_owner_: ?HWND, n_control_flags_: SYNCMGR_CONTROL_FLAGS) HRESULT {
                return @as(*const ISyncMgrControl.VTable, @ptrCast(self.vtable)).EnableHandler(@as(*const ISyncMgrControl, @ptrCast(self)), f_enable_, psz_handler_i_d_, hwnd_owner_, n_control_flags_);
            }
            pub inline fn enableItem(self: *const T, f_enable_: BOOL, psz_handler_i_d_: ?[*:0]const u16, psz_item_i_d_: ?[*:0]const u16, hwnd_owner_: ?HWND, n_control_flags_: SYNCMGR_CONTROL_FLAGS) HRESULT {
                return @as(*const ISyncMgrControl.VTable, @ptrCast(self.vtable)).EnableItem(@as(*const ISyncMgrControl, @ptrCast(self)), f_enable_, psz_handler_i_d_, psz_item_i_d_, hwnd_owner_, n_control_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrEventStore_Value = Guid.initString("37e412f9-016e-44c2-81ff-db3add774266");
pub const IID_ISyncMgrEventStore = &IID_ISyncMgrEventStore_Value;
pub const ISyncMgrEventStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetEventEnumerator: *const fn (
            self: *const ISyncMgrEventStore,
            ppenum: ?*?*IEnumSyncMgrEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventCount: *const fn (
            self: *const ISyncMgrEventStore,
            pc_events: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEvent: *const fn (
            self: *const ISyncMgrEventStore,
            rguid_event_i_d: ?*const Guid,
            pp_event: ?*?*ISyncMgrEvent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveEvent: *const fn (
            self: *const ISyncMgrEventStore,
            pguid_event_i_ds: [*]Guid,
            c_events: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getEventEnumerator(self: *const T, ppenum_: ?*?*IEnumSyncMgrEvents) HRESULT {
                return @as(*const ISyncMgrEventStore.VTable, @ptrCast(self.vtable)).GetEventEnumerator(@as(*const ISyncMgrEventStore, @ptrCast(self)), ppenum_);
            }
            pub inline fn getEventCount(self: *const T, pc_events_: ?*u32) HRESULT {
                return @as(*const ISyncMgrEventStore.VTable, @ptrCast(self.vtable)).GetEventCount(@as(*const ISyncMgrEventStore, @ptrCast(self)), pc_events_);
            }
            pub inline fn getEvent(self: *const T, rguid_event_i_d_: ?*const Guid, pp_event_: ?*?*ISyncMgrEvent) HRESULT {
                return @as(*const ISyncMgrEventStore.VTable, @ptrCast(self.vtable)).GetEvent(@as(*const ISyncMgrEventStore, @ptrCast(self)), rguid_event_i_d_, pp_event_);
            }
            pub inline fn removeEvent(self: *const T, pguid_event_i_ds_: [*]Guid, c_events_: u32) HRESULT {
                return @as(*const ISyncMgrEventStore.VTable, @ptrCast(self.vtable)).RemoveEvent(@as(*const ISyncMgrEventStore, @ptrCast(self)), pguid_event_i_ds_, c_events_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrEvent_Value = Guid.initString("fee0ef8b-46bd-4db4-b7e6-ff2c687313bc");
pub const IID_ISyncMgrEvent = &IID_ISyncMgrEvent_Value;
pub const ISyncMgrEvent = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetEventID: *const fn (
            self: *const ISyncMgrEvent,
            pguid_event_i_d: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHandlerID: *const fn (
            self: *const ISyncMgrEvent,
            ppsz_handler_i_d: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemID: *const fn (
            self: *const ISyncMgrEvent,
            ppsz_item_i_d: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLevel: *const fn (
            self: *const ISyncMgrEvent,
            pn_level: ?*SYNCMGR_EVENT_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn (
            self: *const ISyncMgrEvent,
            pn_flags: ?*SYNCMGR_EVENT_FLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTime: *const fn (
            self: *const ISyncMgrEvent,
            pf_creation_time: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetName: *const fn (
            self: *const ISyncMgrEvent,
            ppsz_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescription: *const fn (
            self: *const ISyncMgrEvent,
            ppsz_description: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLinkText: *const fn (
            self: *const ISyncMgrEvent,
            ppsz_link_text: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLinkReference: *const fn (
            self: *const ISyncMgrEvent,
            ppsz_link_reference: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContext: *const fn (
            self: *const ISyncMgrEvent,
            ppsz_context: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getEventID(self: *const T, pguid_event_i_d_: ?*Guid) HRESULT {
                return @as(*const ISyncMgrEvent.VTable, @ptrCast(self.vtable)).GetEventID(@as(*const ISyncMgrEvent, @ptrCast(self)), pguid_event_i_d_);
            }
            pub inline fn getHandlerID(self: *const T, ppsz_handler_i_d_: ?*?PWSTR) HRESULT {
                return @as(*const ISyncMgrEvent.VTable, @ptrCast(self.vtable)).GetHandlerID(@as(*const ISyncMgrEvent, @ptrCast(self)), ppsz_handler_i_d_);
            }
            pub inline fn getItemID(self: *const T, ppsz_item_i_d_: ?*?PWSTR) HRESULT {
                return @as(*const ISyncMgrEvent.VTable, @ptrCast(self.vtable)).GetItemID(@as(*const ISyncMgrEvent, @ptrCast(self)), ppsz_item_i_d_);
            }
            pub inline fn getLevel(self: *const T, pn_level_: ?*SYNCMGR_EVENT_LEVEL) HRESULT {
                return @as(*const ISyncMgrEvent.VTable, @ptrCast(self.vtable)).GetLevel(@as(*const ISyncMgrEvent, @ptrCast(self)), pn_level_);
            }
            pub inline fn getFlags(self: *const T, pn_flags_: ?*SYNCMGR_EVENT_FLAGS) HRESULT {
                return @as(*const ISyncMgrEvent.VTable, @ptrCast(self.vtable)).GetFlags(@as(*const ISyncMgrEvent, @ptrCast(self)), pn_flags_);
            }
            pub inline fn getTime(self: *const T, pf_creation_time_: ?*FILETIME) HRESULT {
                return @as(*const ISyncMgrEvent.VTable, @ptrCast(self.vtable)).GetTime(@as(*const ISyncMgrEvent, @ptrCast(self)), pf_creation_time_);
            }
            pub inline fn getName(self: *const T, ppsz_name_: ?*?PWSTR) HRESULT {
                return @as(*const ISyncMgrEvent.VTable, @ptrCast(self.vtable)).GetName(@as(*const ISyncMgrEvent, @ptrCast(self)), ppsz_name_);
            }
            pub inline fn getDescription(self: *const T, ppsz_description_: ?*?PWSTR) HRESULT {
                return @as(*const ISyncMgrEvent.VTable, @ptrCast(self.vtable)).GetDescription(@as(*const ISyncMgrEvent, @ptrCast(self)), ppsz_description_);
            }
            pub inline fn getLinkText(self: *const T, ppsz_link_text_: ?*?PWSTR) HRESULT {
                return @as(*const ISyncMgrEvent.VTable, @ptrCast(self.vtable)).GetLinkText(@as(*const ISyncMgrEvent, @ptrCast(self)), ppsz_link_text_);
            }
            pub inline fn getLinkReference(self: *const T, ppsz_link_reference_: ?*?PWSTR) HRESULT {
                return @as(*const ISyncMgrEvent.VTable, @ptrCast(self.vtable)).GetLinkReference(@as(*const ISyncMgrEvent, @ptrCast(self)), ppsz_link_reference_);
            }
            pub inline fn getContext(self: *const T, ppsz_context_: ?*?PWSTR) HRESULT {
                return @as(*const ISyncMgrEvent.VTable, @ptrCast(self.vtable)).GetContext(@as(*const ISyncMgrEvent, @ptrCast(self)), ppsz_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumSyncMgrEvents_Value = Guid.initString("c81a1d4e-8cf7-4683-80e0-bcae88d677b6");
pub const IID_IEnumSyncMgrEvents = &IID_IEnumSyncMgrEvents_Value;
pub const IEnumSyncMgrEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumSyncMgrEvents,
            celt: u32,
            rgelt: [*]?*ISyncMgrEvent,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumSyncMgrEvents,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumSyncMgrEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumSyncMgrEvents,
            ppenum: ?*?*IEnumSyncMgrEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: [*]?*ISyncMgrEvent, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumSyncMgrEvents.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumSyncMgrEvents, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumSyncMgrEvents.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumSyncMgrEvents, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumSyncMgrEvents.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumSyncMgrEvents, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumSyncMgrEvents) HRESULT {
                return @as(*const IEnumSyncMgrEvents.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumSyncMgrEvents, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGR_CONFLICT_ID_INFO = extern struct {
    pblobID: ?*BYTE_BLOB,
    pblobExtra: ?*BYTE_BLOB,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrConflictStore_Value = Guid.initString("cf8fc579-c396-4774-85f1-d908a831156e");
pub const IID_ISyncMgrConflictStore = &IID_ISyncMgrConflictStore_Value;
pub const ISyncMgrConflictStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnumConflicts: *const fn (
            self: *const ISyncMgrConflictStore,
            psz_handler_i_d: ?[*:0]const u16,
            psz_item_i_d: ?[*:0]const u16,
            pp_enum: ?*?*IEnumSyncMgrConflict,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BindToConflict: *const fn (
            self: *const ISyncMgrConflictStore,
            p_conflict_id_info: ?*const SYNCMGR_CONFLICT_ID_INFO,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveConflicts: *const fn (
            self: *const ISyncMgrConflictStore,
            rg_conflict_id_info: [*]const SYNCMGR_CONFLICT_ID_INFO,
            c_conflicts: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn (
            self: *const ISyncMgrConflictStore,
            psz_handler_i_d: ?[*:0]const u16,
            psz_item_i_d: ?[*:0]const u16,
            pn_conflicts: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn enumConflicts(self: *const T, psz_handler_i_d_: ?[*:0]const u16, psz_item_i_d_: ?[*:0]const u16, pp_enum_: ?*?*IEnumSyncMgrConflict) HRESULT {
                return @as(*const ISyncMgrConflictStore.VTable, @ptrCast(self.vtable)).EnumConflicts(@as(*const ISyncMgrConflictStore, @ptrCast(self)), psz_handler_i_d_, psz_item_i_d_, pp_enum_);
            }
            pub inline fn bindToConflict(self: *const T, p_conflict_id_info_: ?*const SYNCMGR_CONFLICT_ID_INFO, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const ISyncMgrConflictStore.VTable, @ptrCast(self.vtable)).BindToConflict(@as(*const ISyncMgrConflictStore, @ptrCast(self)), p_conflict_id_info_, riid_, ppv_);
            }
            pub inline fn removeConflicts(self: *const T, rg_conflict_id_info_: [*]const SYNCMGR_CONFLICT_ID_INFO, c_conflicts_: u32) HRESULT {
                return @as(*const ISyncMgrConflictStore.VTable, @ptrCast(self.vtable)).RemoveConflicts(@as(*const ISyncMgrConflictStore, @ptrCast(self)), rg_conflict_id_info_, c_conflicts_);
            }
            pub inline fn getCount(self: *const T, psz_handler_i_d_: ?[*:0]const u16, psz_item_i_d_: ?[*:0]const u16, pn_conflicts_: ?*u32) HRESULT {
                return @as(*const ISyncMgrConflictStore.VTable, @ptrCast(self.vtable)).GetCount(@as(*const ISyncMgrConflictStore, @ptrCast(self)), psz_handler_i_d_, psz_item_i_d_, pn_conflicts_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumSyncMgrConflict_Value = Guid.initString("82705914-dda3-4893-ba99-49de6c8c8036");
pub const IID_IEnumSyncMgrConflict = &IID_IEnumSyncMgrConflict_Value;
pub const IEnumSyncMgrConflict = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumSyncMgrConflict,
            celt: u32,
            rgelt: [*]?*ISyncMgrConflict,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumSyncMgrConflict,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumSyncMgrConflict,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumSyncMgrConflict,
            ppenum: ?*?*IEnumSyncMgrConflict,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: [*]?*ISyncMgrConflict, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumSyncMgrConflict.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumSyncMgrConflict, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumSyncMgrConflict.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumSyncMgrConflict, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumSyncMgrConflict.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumSyncMgrConflict, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumSyncMgrConflict) HRESULT {
                return @as(*const IEnumSyncMgrConflict.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumSyncMgrConflict, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGR_CONFLICT_ITEM_TYPE = enum(i32) {
    UPDATED = 1,
    DELETED = 2,
};
pub const SYNCMGR_CIT_UPDATED = SYNCMGR_CONFLICT_ITEM_TYPE.UPDATED;
pub const SYNCMGR_CIT_DELETED = SYNCMGR_CONFLICT_ITEM_TYPE.DELETED;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrConflict_Value = Guid.initString("9c204249-c443-4ba4-85ed-c972681db137");
pub const IID_ISyncMgrConflict = &IID_ISyncMgrConflict_Value;
pub const ISyncMgrConflict = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetProperty: *const fn (
            self: *const ISyncMgrConflict,
            propkey: ?*const PROPERTYKEY,
            ppropvar: ?*PROPVARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConflictIdInfo: *const fn (
            self: *const ISyncMgrConflict,
            p_conflict_id_info: ?*SYNCMGR_CONFLICT_ID_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemsArray: *const fn (
            self: *const ISyncMgrConflict,
            pp_array: ?*?*ISyncMgrConflictItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resolve: *const fn (
            self: *const ISyncMgrConflict,
            p_resolve_info: ?*ISyncMgrConflictResolveInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResolutionHandler: *const fn (
            self: *const ISyncMgrConflict,
            riid: ?*const Guid,
            ppv_resolution_handler: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getProperty(self: *const T, propkey_: ?*const PROPERTYKEY, ppropvar_: ?*PROPVARIANT) HRESULT {
                return @as(*const ISyncMgrConflict.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const ISyncMgrConflict, @ptrCast(self)), propkey_, ppropvar_);
            }
            pub inline fn getConflictIdInfo(self: *const T, p_conflict_id_info_: ?*SYNCMGR_CONFLICT_ID_INFO) HRESULT {
                return @as(*const ISyncMgrConflict.VTable, @ptrCast(self.vtable)).GetConflictIdInfo(@as(*const ISyncMgrConflict, @ptrCast(self)), p_conflict_id_info_);
            }
            pub inline fn getItemsArray(self: *const T, pp_array_: ?*?*ISyncMgrConflictItems) HRESULT {
                return @as(*const ISyncMgrConflict.VTable, @ptrCast(self.vtable)).GetItemsArray(@as(*const ISyncMgrConflict, @ptrCast(self)), pp_array_);
            }
            pub inline fn resolve(self: *const T, p_resolve_info_: ?*ISyncMgrConflictResolveInfo) HRESULT {
                return @as(*const ISyncMgrConflict.VTable, @ptrCast(self.vtable)).Resolve(@as(*const ISyncMgrConflict, @ptrCast(self)), p_resolve_info_);
            }
            pub inline fn getResolutionHandler(self: *const T, riid_: ?*const Guid, ppv_resolution_handler_: ?*?*anyopaque) HRESULT {
                return @as(*const ISyncMgrConflict.VTable, @ptrCast(self.vtable)).GetResolutionHandler(@as(*const ISyncMgrConflict, @ptrCast(self)), riid_, ppv_resolution_handler_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGR_RESOLUTION_ABILITIES = enum(i32) {
    KEEPOTHER = 1,
    KEEPRECENT = 2,
    REMOVEFROMSYNCSET = 4,
    KEEP_SINGLE = 8,
    KEEP_MULTIPLE = 16,
    VALID = 31,
};
pub const SYNCMGR_RA_KEEPOTHER = SYNCMGR_RESOLUTION_ABILITIES.KEEPOTHER;
pub const SYNCMGR_RA_KEEPRECENT = SYNCMGR_RESOLUTION_ABILITIES.KEEPRECENT;
pub const SYNCMGR_RA_REMOVEFROMSYNCSET = SYNCMGR_RESOLUTION_ABILITIES.REMOVEFROMSYNCSET;
pub const SYNCMGR_RA_KEEP_SINGLE = SYNCMGR_RESOLUTION_ABILITIES.KEEP_SINGLE;
pub const SYNCMGR_RA_KEEP_MULTIPLE = SYNCMGR_RESOLUTION_ABILITIES.KEEP_MULTIPLE;
pub const SYNCMGR_RA_VALID = SYNCMGR_RESOLUTION_ABILITIES.VALID;

pub const SYNCMGR_RESOLUTION_FEEDBACK = enum(i32) {
    CONTINUE = 0,
    REFRESH = 1,
    CANCEL = 2,
};
pub const SYNCMGR_RF_CONTINUE = SYNCMGR_RESOLUTION_FEEDBACK.CONTINUE;
pub const SYNCMGR_RF_REFRESH = SYNCMGR_RESOLUTION_FEEDBACK.REFRESH;
pub const SYNCMGR_RF_CANCEL = SYNCMGR_RESOLUTION_FEEDBACK.CANCEL;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrResolutionHandler_Value = Guid.initString("40a3d052-8bff-4c4b-a338-d4a395700de9");
pub const IID_ISyncMgrResolutionHandler = &IID_ISyncMgrResolutionHandler_Value;
pub const ISyncMgrResolutionHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryAbilities: *const fn (
            self: *const ISyncMgrResolutionHandler,
            pdw_abilities: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        KeepOther: *const fn (
            self: *const ISyncMgrResolutionHandler,
            psi_other: ?*IShellItem,
            p_feedback: ?*SYNCMGR_RESOLUTION_FEEDBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        KeepRecent: *const fn (
            self: *const ISyncMgrResolutionHandler,
            p_feedback: ?*SYNCMGR_RESOLUTION_FEEDBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveFromSyncSet: *const fn (
            self: *const ISyncMgrResolutionHandler,
            p_feedback: ?*SYNCMGR_RESOLUTION_FEEDBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        KeepItems: *const fn (
            self: *const ISyncMgrResolutionHandler,
            p_array: ?*ISyncMgrConflictResolutionItems,
            p_feedback: ?*SYNCMGR_RESOLUTION_FEEDBACK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn queryAbilities(self: *const T, pdw_abilities_: ?*u32) HRESULT {
                return @as(*const ISyncMgrResolutionHandler.VTable, @ptrCast(self.vtable)).QueryAbilities(@as(*const ISyncMgrResolutionHandler, @ptrCast(self)), pdw_abilities_);
            }
            pub inline fn keepOther(self: *const T, psi_other_: ?*IShellItem, p_feedback_: ?*SYNCMGR_RESOLUTION_FEEDBACK) HRESULT {
                return @as(*const ISyncMgrResolutionHandler.VTable, @ptrCast(self.vtable)).KeepOther(@as(*const ISyncMgrResolutionHandler, @ptrCast(self)), psi_other_, p_feedback_);
            }
            pub inline fn keepRecent(self: *const T, p_feedback_: ?*SYNCMGR_RESOLUTION_FEEDBACK) HRESULT {
                return @as(*const ISyncMgrResolutionHandler.VTable, @ptrCast(self.vtable)).KeepRecent(@as(*const ISyncMgrResolutionHandler, @ptrCast(self)), p_feedback_);
            }
            pub inline fn removeFromSyncSet(self: *const T, p_feedback_: ?*SYNCMGR_RESOLUTION_FEEDBACK) HRESULT {
                return @as(*const ISyncMgrResolutionHandler.VTable, @ptrCast(self.vtable)).RemoveFromSyncSet(@as(*const ISyncMgrResolutionHandler, @ptrCast(self)), p_feedback_);
            }
            pub inline fn keepItems(self: *const T, p_array_: ?*ISyncMgrConflictResolutionItems, p_feedback_: ?*SYNCMGR_RESOLUTION_FEEDBACK) HRESULT {
                return @as(*const ISyncMgrResolutionHandler.VTable, @ptrCast(self.vtable)).KeepItems(@as(*const ISyncMgrResolutionHandler, @ptrCast(self)), p_array_, p_feedback_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrConflictPresenter_Value = Guid.initString("0b4f5353-fd2b-42cd-8763-4779f2d508a3");
pub const IID_ISyncMgrConflictPresenter = &IID_ISyncMgrConflictPresenter_Value;
pub const ISyncMgrConflictPresenter = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PresentConflict: *const fn (
            self: *const ISyncMgrConflictPresenter,
            p_conflict: ?*ISyncMgrConflict,
            p_resolve_info: ?*ISyncMgrConflictResolveInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn presentConflict(self: *const T, p_conflict_: ?*ISyncMgrConflict, p_resolve_info_: ?*ISyncMgrConflictResolveInfo) HRESULT {
                return @as(*const ISyncMgrConflictPresenter.VTable, @ptrCast(self.vtable)).PresentConflict(@as(*const ISyncMgrConflictPresenter, @ptrCast(self)), p_conflict_, p_resolve_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGR_PRESENTER_NEXT_STEP = enum(i32) {
    CONTINUE = 0,
    DEFAULT = 1,
    CANCEL = 2,
};
pub const SYNCMGR_PNS_CONTINUE = SYNCMGR_PRESENTER_NEXT_STEP.CONTINUE;
pub const SYNCMGR_PNS_DEFAULT = SYNCMGR_PRESENTER_NEXT_STEP.DEFAULT;
pub const SYNCMGR_PNS_CANCEL = SYNCMGR_PRESENTER_NEXT_STEP.CANCEL;

pub const SYNCMGR_PRESENTER_CHOICE = enum(i32) {
    NO_CHOICE = 0,
    KEEP_ONE = 1,
    KEEP_MULTIPLE = 2,
    KEEP_RECENT = 3,
    REMOVE_FROM_SYNC_SET = 4,
    SKIP = 5,
};
pub const SYNCMGR_PC_NO_CHOICE = SYNCMGR_PRESENTER_CHOICE.NO_CHOICE;
pub const SYNCMGR_PC_KEEP_ONE = SYNCMGR_PRESENTER_CHOICE.KEEP_ONE;
pub const SYNCMGR_PC_KEEP_MULTIPLE = SYNCMGR_PRESENTER_CHOICE.KEEP_MULTIPLE;
pub const SYNCMGR_PC_KEEP_RECENT = SYNCMGR_PRESENTER_CHOICE.KEEP_RECENT;
pub const SYNCMGR_PC_REMOVE_FROM_SYNC_SET = SYNCMGR_PRESENTER_CHOICE.REMOVE_FROM_SYNC_SET;
pub const SYNCMGR_PC_SKIP = SYNCMGR_PRESENTER_CHOICE.SKIP;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrConflictResolveInfo_Value = Guid.initString("c405a219-25a2-442e-8743-b845a2cee93f");
pub const IID_ISyncMgrConflictResolveInfo = &IID_ISyncMgrConflictResolveInfo_Value;
pub const ISyncMgrConflictResolveInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetIterationInfo: *const fn (
            self: *const ISyncMgrConflictResolveInfo,
            pn_current_conflict: ?*u32,
            pc_conflicts: ?*u32,
            pc_remaining_for_apply_to_all: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPresenterNextStep: *const fn (
            self: *const ISyncMgrConflictResolveInfo,
            pn_presenter_next_step: ?*SYNCMGR_PRESENTER_NEXT_STEP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPresenterChoice: *const fn (
            self: *const ISyncMgrConflictResolveInfo,
            pn_presenter_choice: ?*SYNCMGR_PRESENTER_CHOICE,
            pf_apply_to_all: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemChoiceCount: *const fn (
            self: *const ISyncMgrConflictResolveInfo,
            pc_choices: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemChoice: *const fn (
            self: *const ISyncMgrConflictResolveInfo,
            i_choice: u32,
            pi_choice_index: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPresenterNextStep: *const fn (
            self: *const ISyncMgrConflictResolveInfo,
            n_presenter_next_step: SYNCMGR_PRESENTER_NEXT_STEP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPresenterChoice: *const fn (
            self: *const ISyncMgrConflictResolveInfo,
            n_presenter_choice: SYNCMGR_PRESENTER_CHOICE,
            f_apply_to_all: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItemChoices: *const fn (
            self: *const ISyncMgrConflictResolveInfo,
            prgi_conflict_item_indexes: ?*u32,
            c_choices: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getIterationInfo(self: *const T, pn_current_conflict_: ?*u32, pc_conflicts_: ?*u32, pc_remaining_for_apply_to_all_: ?*u32) HRESULT {
                return @as(*const ISyncMgrConflictResolveInfo.VTable, @ptrCast(self.vtable)).GetIterationInfo(@as(*const ISyncMgrConflictResolveInfo, @ptrCast(self)), pn_current_conflict_, pc_conflicts_, pc_remaining_for_apply_to_all_);
            }
            pub inline fn getPresenterNextStep(self: *const T, pn_presenter_next_step_: ?*SYNCMGR_PRESENTER_NEXT_STEP) HRESULT {
                return @as(*const ISyncMgrConflictResolveInfo.VTable, @ptrCast(self.vtable)).GetPresenterNextStep(@as(*const ISyncMgrConflictResolveInfo, @ptrCast(self)), pn_presenter_next_step_);
            }
            pub inline fn getPresenterChoice(self: *const T, pn_presenter_choice_: ?*SYNCMGR_PRESENTER_CHOICE, pf_apply_to_all_: ?*BOOL) HRESULT {
                return @as(*const ISyncMgrConflictResolveInfo.VTable, @ptrCast(self.vtable)).GetPresenterChoice(@as(*const ISyncMgrConflictResolveInfo, @ptrCast(self)), pn_presenter_choice_, pf_apply_to_all_);
            }
            pub inline fn getItemChoiceCount(self: *const T, pc_choices_: ?*u32) HRESULT {
                return @as(*const ISyncMgrConflictResolveInfo.VTable, @ptrCast(self.vtable)).GetItemChoiceCount(@as(*const ISyncMgrConflictResolveInfo, @ptrCast(self)), pc_choices_);
            }
            pub inline fn getItemChoice(self: *const T, i_choice_: u32, pi_choice_index_: ?*u32) HRESULT {
                return @as(*const ISyncMgrConflictResolveInfo.VTable, @ptrCast(self.vtable)).GetItemChoice(@as(*const ISyncMgrConflictResolveInfo, @ptrCast(self)), i_choice_, pi_choice_index_);
            }
            pub inline fn setPresenterNextStep(self: *const T, n_presenter_next_step_: SYNCMGR_PRESENTER_NEXT_STEP) HRESULT {
                return @as(*const ISyncMgrConflictResolveInfo.VTable, @ptrCast(self.vtable)).SetPresenterNextStep(@as(*const ISyncMgrConflictResolveInfo, @ptrCast(self)), n_presenter_next_step_);
            }
            pub inline fn setPresenterChoice(self: *const T, n_presenter_choice_: SYNCMGR_PRESENTER_CHOICE, f_apply_to_all_: BOOL) HRESULT {
                return @as(*const ISyncMgrConflictResolveInfo.VTable, @ptrCast(self.vtable)).SetPresenterChoice(@as(*const ISyncMgrConflictResolveInfo, @ptrCast(self)), n_presenter_choice_, f_apply_to_all_);
            }
            pub inline fn setItemChoices(self: *const T, prgi_conflict_item_indexes_: ?*u32, c_choices_: u32) HRESULT {
                return @as(*const ISyncMgrConflictResolveInfo.VTable, @ptrCast(self.vtable)).SetItemChoices(@as(*const ISyncMgrConflictResolveInfo, @ptrCast(self)), prgi_conflict_item_indexes_, c_choices_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrConflictFolder_Value = Guid.initString("59287f5e-bc81-4fca-a7f1-e5a8ecdb1d69");
pub const IID_ISyncMgrConflictFolder = &IID_ISyncMgrConflictFolder_Value;
pub const ISyncMgrConflictFolder = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetConflictIDList: *const fn (
            self: *const ISyncMgrConflictFolder,
            p_conflict: ?*ISyncMgrConflict,
            ppidl_conflict: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getConflictIDList(self: *const T, p_conflict_: ?*ISyncMgrConflict, ppidl_conflict_: ?*?*ITEMIDLIST) HRESULT {
                return @as(*const ISyncMgrConflictFolder.VTable, @ptrCast(self.vtable)).GetConflictIDList(@as(*const ISyncMgrConflictFolder, @ptrCast(self)), p_conflict_, ppidl_conflict_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CONFIRM_CONFLICT_ITEM = extern struct {
    pShellItem: ?*IShellItem2,
    pszOriginalName: ?PWSTR,
    pszAlternateName: ?PWSTR,
    pszLocationShort: ?PWSTR,
    pszLocationFull: ?PWSTR,
    nType: SYNCMGR_CONFLICT_ITEM_TYPE,
};

pub const CONFIRM_CONFLICT_RESULT_INFO = extern struct {
    pszNewName: ?PWSTR,
    iItemIndex: u32,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrConflictItems_Value = Guid.initString("9c7ead52-8023-4936-a4db-d2a9a99e436a");
pub const IID_ISyncMgrConflictItems = &IID_ISyncMgrConflictItems_Value;
pub const ISyncMgrConflictItems = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const ISyncMgrConflictItems,
            p_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItem: *const fn (
            self: *const ISyncMgrConflictItems,
            i_index: u32,
            p_item_info: ?*CONFIRM_CONFLICT_ITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_count_: ?*u32) HRESULT {
                return @as(*const ISyncMgrConflictItems.VTable, @ptrCast(self.vtable)).GetCount(@as(*const ISyncMgrConflictItems, @ptrCast(self)), p_count_);
            }
            pub inline fn getItem(self: *const T, i_index_: u32, p_item_info_: ?*CONFIRM_CONFLICT_ITEM) HRESULT {
                return @as(*const ISyncMgrConflictItems.VTable, @ptrCast(self.vtable)).GetItem(@as(*const ISyncMgrConflictItems, @ptrCast(self)), i_index_, p_item_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISyncMgrConflictResolutionItems_Value = Guid.initString("458725b9-129d-4135-a998-9ceafec27007");
pub const IID_ISyncMgrConflictResolutionItems = &IID_ISyncMgrConflictResolutionItems_Value;
pub const ISyncMgrConflictResolutionItems = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCount: *const fn (
            self: *const ISyncMgrConflictResolutionItems,
            p_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItem: *const fn (
            self: *const ISyncMgrConflictResolutionItems,
            i_index: u32,
            p_item_info: ?*CONFIRM_CONFLICT_RESULT_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_count_: ?*u32) HRESULT {
                return @as(*const ISyncMgrConflictResolutionItems.VTable, @ptrCast(self.vtable)).GetCount(@as(*const ISyncMgrConflictResolutionItems, @ptrCast(self)), p_count_);
            }
            pub inline fn getItem(self: *const T, i_index_: u32, p_item_info_: ?*CONFIRM_CONFLICT_RESULT_INFO) HRESULT {
                return @as(*const ISyncMgrConflictResolutionItems.VTable, @ptrCast(self.vtable)).GetItem(@as(*const ISyncMgrConflictResolutionItems, @ptrCast(self)), i_index_, p_item_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_InputPanelConfiguration_Value = Guid.initString("2853add3-f096-4c63-a78f-7fa3ea837fb7");
pub const CLSID_InputPanelConfiguration = &CLSID_InputPanelConfiguration_Value;

// TODO: this type is limited to platform 'windows8.0'
const IID_IInputPanelConfiguration_Value = Guid.initString("41c81592-514c-48bd-a22e-e6af638521a6");
pub const IID_IInputPanelConfiguration = &IID_IInputPanelConfiguration_Value;
pub const IInputPanelConfiguration = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnableFocusTracking: *const fn (
            self: *const IInputPanelConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn enableFocusTracking(self: *const T) HRESULT {
                return @as(*const IInputPanelConfiguration.VTable, @ptrCast(self.vtable)).EnableFocusTracking(@as(*const IInputPanelConfiguration, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IInputPanelInvocationConfiguration_Value = Guid.initString("a213f136-3b45-4362-a332-efb6547cd432");
pub const IID_IInputPanelInvocationConfiguration = &IID_IInputPanelInvocationConfiguration_Value;
pub const IInputPanelInvocationConfiguration = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RequireTouchInEditControl: *const fn (
            self: *const IInputPanelInvocationConfiguration,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn requireTouchInEditControl(self: *const T) HRESULT {
                return @as(*const IInputPanelInvocationConfiguration.VTable, @ptrCast(self.vtable)).RequireTouchInEditControl(@as(*const IInputPanelInvocationConfiguration, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_LocalThumbnailCache_Value = Guid.initString("50ef4544-ac9f-4a8e-b21b-8a26180db13f");
pub const CLSID_LocalThumbnailCache = &CLSID_LocalThumbnailCache_Value;

const CLSID_SharedBitmap_Value = Guid.initString("4db26476-6787-4046-b836-e8412a9e8a27");
pub const CLSID_SharedBitmap = &CLSID_SharedBitmap_Value;

pub const WTS_FLAGS = enum(i32) {
    NONE = 0,
    // EXTRACT = 0, this enum value conflicts with NONE
    INCACHEONLY = 1,
    FASTEXTRACT = 2,
    FORCEEXTRACTION = 4,
    SLOWRECLAIM = 8,
    EXTRACTDONOTCACHE = 32,
    SCALETOREQUESTEDSIZE = 64,
    SKIPFASTEXTRACT = 128,
    EXTRACTINPROC = 256,
    CROPTOSQUARE = 512,
    INSTANCESURROGATE = 1024,
    REQUIRESURROGATE = 2048,
    APPSTYLE = 8192,
    WIDETHUMBNAILS = 16384,
    IDEALCACHESIZEONLY = 32768,
    SCALEUP = 65536,
};
pub const WTS_NONE = WTS_FLAGS.NONE;
pub const WTS_EXTRACT = WTS_FLAGS.NONE;
pub const WTS_INCACHEONLY = WTS_FLAGS.INCACHEONLY;
pub const WTS_FASTEXTRACT = WTS_FLAGS.FASTEXTRACT;
pub const WTS_FORCEEXTRACTION = WTS_FLAGS.FORCEEXTRACTION;
pub const WTS_SLOWRECLAIM = WTS_FLAGS.SLOWRECLAIM;
pub const WTS_EXTRACTDONOTCACHE = WTS_FLAGS.EXTRACTDONOTCACHE;
pub const WTS_SCALETOREQUESTEDSIZE = WTS_FLAGS.SCALETOREQUESTEDSIZE;
pub const WTS_SKIPFASTEXTRACT = WTS_FLAGS.SKIPFASTEXTRACT;
pub const WTS_EXTRACTINPROC = WTS_FLAGS.EXTRACTINPROC;
pub const WTS_CROPTOSQUARE = WTS_FLAGS.CROPTOSQUARE;
pub const WTS_INSTANCESURROGATE = WTS_FLAGS.INSTANCESURROGATE;
pub const WTS_REQUIRESURROGATE = WTS_FLAGS.REQUIRESURROGATE;
pub const WTS_APPSTYLE = WTS_FLAGS.APPSTYLE;
pub const WTS_WIDETHUMBNAILS = WTS_FLAGS.WIDETHUMBNAILS;
pub const WTS_IDEALCACHESIZEONLY = WTS_FLAGS.IDEALCACHESIZEONLY;
pub const WTS_SCALEUP = WTS_FLAGS.SCALEUP;

pub const WTS_CACHEFLAGS = enum(i32) {
    DEFAULT = 0,
    LOWQUALITY = 1,
    CACHED = 2,
};
pub const WTS_DEFAULT = WTS_CACHEFLAGS.DEFAULT;
pub const WTS_LOWQUALITY = WTS_CACHEFLAGS.LOWQUALITY;
pub const WTS_CACHED = WTS_CACHEFLAGS.CACHED;

pub const WTS_CONTEXTFLAGS = enum(i32) {
    DEFAULT = 0,
    APPSTYLE = 1,
    SQUARE = 2,
    WIDE = 4,
    FAST = 8,
};
pub const WTSCF_DEFAULT = WTS_CONTEXTFLAGS.DEFAULT;
pub const WTSCF_APPSTYLE = WTS_CONTEXTFLAGS.APPSTYLE;
pub const WTSCF_SQUARE = WTS_CONTEXTFLAGS.SQUARE;
pub const WTSCF_WIDE = WTS_CONTEXTFLAGS.WIDE;
pub const WTSCF_FAST = WTS_CONTEXTFLAGS.FAST;

pub const WTS_ALPHATYPE = enum(i32) {
    UNKNOWN = 0,
    RGB = 1,
    ARGB = 2,
};
pub const WTSAT_UNKNOWN = WTS_ALPHATYPE.UNKNOWN;
pub const WTSAT_RGB = WTS_ALPHATYPE.RGB;
pub const WTSAT_ARGB = WTS_ALPHATYPE.ARGB;

pub const WTS_THUMBNAILID = extern struct {
    rgbKey: [16]u8,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISharedBitmap_Value = Guid.initString("091162a4-bc96-411f-aae8-c5122cd03363");
pub const IID_ISharedBitmap = &IID_ISharedBitmap_Value;
pub const ISharedBitmap = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSharedBitmap: *const fn (
            self: *const ISharedBitmap,
            phbm: ?*?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSize: *const fn (
            self: *const ISharedBitmap,
            p_size: ?*SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFormat: *const fn (
            self: *const ISharedBitmap,
            pat: ?*WTS_ALPHATYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeBitmap: *const fn (
            self: *const ISharedBitmap,
            hbm: ?HBITMAP,
            wts_a_t: WTS_ALPHATYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Detach: *const fn (
            self: *const ISharedBitmap,
            phbm: ?*?HBITMAP,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSharedBitmap(self: *const T, phbm_: ?*?HBITMAP) HRESULT {
                return @as(*const ISharedBitmap.VTable, @ptrCast(self.vtable)).GetSharedBitmap(@as(*const ISharedBitmap, @ptrCast(self)), phbm_);
            }
            pub inline fn getSize(self: *const T, p_size_: ?*SIZE) HRESULT {
                return @as(*const ISharedBitmap.VTable, @ptrCast(self.vtable)).GetSize(@as(*const ISharedBitmap, @ptrCast(self)), p_size_);
            }
            pub inline fn getFormat(self: *const T, pat_: ?*WTS_ALPHATYPE) HRESULT {
                return @as(*const ISharedBitmap.VTable, @ptrCast(self.vtable)).GetFormat(@as(*const ISharedBitmap, @ptrCast(self)), pat_);
            }
            pub inline fn initializeBitmap(self: *const T, hbm_: ?HBITMAP, wts_a_t_: WTS_ALPHATYPE) HRESULT {
                return @as(*const ISharedBitmap.VTable, @ptrCast(self.vtable)).InitializeBitmap(@as(*const ISharedBitmap, @ptrCast(self)), hbm_, wts_a_t_);
            }
            pub inline fn detach(self: *const T, phbm_: ?*?HBITMAP) HRESULT {
                return @as(*const ISharedBitmap.VTable, @ptrCast(self.vtable)).Detach(@as(*const ISharedBitmap, @ptrCast(self)), phbm_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IThumbnailCache_Value = Guid.initString("f676c15d-596a-4ce2-8234-33996f445db1");
pub const IID_IThumbnailCache = &IID_IThumbnailCache_Value;
pub const IThumbnailCache = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetThumbnail: *const fn (
            self: *const IThumbnailCache,
            p_shell_item: ?*IShellItem,
            cxy_requested_thumb_size: u32,
            flags: WTS_FLAGS,
            ppv_thumb: ?*?*ISharedBitmap,
            p_out_flags: ?*WTS_CACHEFLAGS,
            p_thumbnail_i_d: ?*WTS_THUMBNAILID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetThumbnailByID: *const fn (
            self: *const IThumbnailCache,
            thumbnail_i_d: WTS_THUMBNAILID,
            cxy_requested_thumb_size: u32,
            ppv_thumb: ?*?*ISharedBitmap,
            p_out_flags: ?*WTS_CACHEFLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getThumbnail(self: *const T, p_shell_item_: ?*IShellItem, cxy_requested_thumb_size_: u32, flags_: WTS_FLAGS, ppv_thumb_: ?*?*ISharedBitmap, p_out_flags_: ?*WTS_CACHEFLAGS, p_thumbnail_i_d_: ?*WTS_THUMBNAILID) HRESULT {
                return @as(*const IThumbnailCache.VTable, @ptrCast(self.vtable)).GetThumbnail(@as(*const IThumbnailCache, @ptrCast(self)), p_shell_item_, cxy_requested_thumb_size_, flags_, ppv_thumb_, p_out_flags_, p_thumbnail_i_d_);
            }
            pub inline fn getThumbnailByID(self: *const T, thumbnail_i_d_: WTS_THUMBNAILID, cxy_requested_thumb_size_: u32, ppv_thumb_: ?*?*ISharedBitmap, p_out_flags_: ?*WTS_CACHEFLAGS) HRESULT {
                return @as(*const IThumbnailCache.VTable, @ptrCast(self.vtable)).GetThumbnailByID(@as(*const IThumbnailCache, @ptrCast(self)), thumbnail_i_d_, cxy_requested_thumb_size_, ppv_thumb_, p_out_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IThumbnailProvider_Value = Guid.initString("e357fccd-a995-4576-b01f-234630154e96");
pub const IID_IThumbnailProvider = &IID_IThumbnailProvider_Value;
pub const IThumbnailProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetThumbnail: *const fn (
            self: *const IThumbnailProvider,
            cx: u32,
            phbmp: ?*?HBITMAP,
            pdw_alpha: ?*WTS_ALPHATYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getThumbnail(self: *const T, cx_: u32, phbmp_: ?*?HBITMAP, pdw_alpha_: ?*WTS_ALPHATYPE) HRESULT {
                return @as(*const IThumbnailProvider.VTable, @ptrCast(self.vtable)).GetThumbnail(@as(*const IThumbnailProvider, @ptrCast(self)), cx_, phbmp_, pdw_alpha_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IThumbnailSettings_Value = Guid.initString("f4376f00-bef5-4d45-80f3-1e023bbf1209");
pub const IID_IThumbnailSettings = &IID_IThumbnailSettings_Value;
pub const IThumbnailSettings = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetContext: *const fn (
            self: *const IThumbnailSettings,
            dw_context: WTS_CONTEXTFLAGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setContext(self: *const T, dw_context_: WTS_CONTEXTFLAGS) HRESULT {
                return @as(*const IThumbnailSettings.VTable, @ptrCast(self.vtable)).SetContext(@as(*const IThumbnailSettings, @ptrCast(self)), dw_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IThumbnailCachePrimer_Value = Guid.initString("0f03f8fe-2b26-46f0-965a-212aa8d66b76");
pub const IID_IThumbnailCachePrimer = &IID_IThumbnailCachePrimer_Value;
pub const IThumbnailCachePrimer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PageInThumbnail: *const fn (
            self: *const IThumbnailCachePrimer,
            psi: ?*IShellItem,
            wts_flags: WTS_FLAGS,
            cxy_requested_thumb_size: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn pageInThumbnail(self: *const T, psi_: ?*IShellItem, wts_flags_: WTS_FLAGS, cxy_requested_thumb_size_: u32) HRESULT {
                return @as(*const IThumbnailCachePrimer.VTable, @ptrCast(self.vtable)).PageInThumbnail(@as(*const IThumbnailCachePrimer, @ptrCast(self)), psi_, wts_flags_, cxy_requested_thumb_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_ShellImageDataFactory_Value = Guid.initString("66e4e4fb-f385-4dd0-8d74-a2efd1bc6178");
pub const CLSID_ShellImageDataFactory = &CLSID_ShellImageDataFactory_Value;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellImageDataFactory_Value = Guid.initString("9be8ed5c-edab-4d75-90f3-bd5bdbb21c82");
pub const IID_IShellImageDataFactory = &IID_IShellImageDataFactory_Value;
pub const IShellImageDataFactory = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateIShellImageData: *const fn (
            self: *const IShellImageDataFactory,
            ppshimg: ?*?*IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateImageFromFile: *const fn (
            self: *const IShellImageDataFactory,
            psz_path: ?[*:0]const u16,
            ppshimg: ?*?*IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateImageFromStream: *const fn (
            self: *const IShellImageDataFactory,
            p_stream: ?*IStream,
            ppshimg: ?*?*IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDataFormatFromPath: *const fn (
            self: *const IShellImageDataFactory,
            psz_path: ?[*:0]const u16,
            p_data_format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createIShellImageData(self: *const T, ppshimg_: ?*?*IShellImageData) HRESULT {
                return @as(*const IShellImageDataFactory.VTable, @ptrCast(self.vtable)).CreateIShellImageData(@as(*const IShellImageDataFactory, @ptrCast(self)), ppshimg_);
            }
            pub inline fn createImageFromFile(self: *const T, psz_path_: ?[*:0]const u16, ppshimg_: ?*?*IShellImageData) HRESULT {
                return @as(*const IShellImageDataFactory.VTable, @ptrCast(self.vtable)).CreateImageFromFile(@as(*const IShellImageDataFactory, @ptrCast(self)), psz_path_, ppshimg_);
            }
            pub inline fn createImageFromStream(self: *const T, p_stream_: ?*IStream, ppshimg_: ?*?*IShellImageData) HRESULT {
                return @as(*const IShellImageDataFactory.VTable, @ptrCast(self.vtable)).CreateImageFromStream(@as(*const IShellImageDataFactory, @ptrCast(self)), p_stream_, ppshimg_);
            }
            pub inline fn getDataFormatFromPath(self: *const T, psz_path_: ?[*:0]const u16, p_data_format_: ?*Guid) HRESULT {
                return @as(*const IShellImageDataFactory.VTable, @ptrCast(self.vtable)).GetDataFormatFromPath(@as(*const IShellImageDataFactory, @ptrCast(self)), psz_path_, p_data_format_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellImageData_Value = Guid.initString("bfdeec12-8040-4403-a5ea-9e07dafcf530");
pub const IID_IShellImageData = &IID_IShellImageData_Value;
pub const IShellImageData = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Decode: *const fn (
            self: *const IShellImageData,
            dw_flags: u32,
            cx_desired: u32,
            cy_desired: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Draw: *const fn (
            self: *const IShellImageData,
            hdc: ?HDC,
            prc_dest: ?*RECT,
            prc_src: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NextFrame: *const fn (
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NextPage: *const fn (
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrevPage: *const fn (
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsTransparent: *const fn (
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsAnimated: *const fn (
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsVector: *const fn (
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsMultipage: *const fn (
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsEditable: *const fn (
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsPrintable: *const fn (
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsDecoded: *const fn (
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrentPage: *const fn (
            self: *const IShellImageData,
            pn_page: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPageCount: *const fn (
            self: *const IShellImageData,
            pc_pages: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectPage: *const fn (
            self: *const IShellImageData,
            i_page: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSize: *const fn (
            self: *const IShellImageData,
            p_size: ?*SIZE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRawDataFormat: *const fn (
            self: *const IShellImageData,
            p_data_format: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPixelFormat: *const fn (
            self: *const IShellImageData,
            p_format: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDelay: *const fn (
            self: *const IShellImageData,
            pdw_delay: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProperties: *const fn (
            self: *const IShellImageData,
            dw_mode: u32,
            pp_prop_set: ?*?*IPropertySetStorage,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Rotate: *const fn (
            self: *const IShellImageData,
            dw_angle: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Scale: *const fn (
            self: *const IShellImageData,
            cx: u32,
            cy: u32,
            hints: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DiscardEdit: *const fn (
            self: *const IShellImageData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEncoderParams: *const fn (
            self: *const IShellImageData,
            pbag_enc: ?*IPropertyBag,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisplayName: *const fn (
            self: *const IShellImageData,
            wsz_name: ?PWSTR,
            cch: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResolution: *const fn (
            self: *const IShellImageData,
            pu_resolution_x: ?*u32,
            pu_resolution_y: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEncoderParams: *const fn (
            self: *const IShellImageData,
            pguid_fmt: ?*Guid,
            pp_enc_params: ?*?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterAbort: *const fn (
            self: *const IShellImageData,
            p_abort: ?*IShellImageDataAbort,
            pp_abort_prev: ?*?*IShellImageDataAbort,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CloneFrame: *const fn (
            self: *const IShellImageData,
            pp_img: ?*?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReplaceFrame: *const fn (
            self: *const IShellImageData,
            p_img: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn decode(self: *const T, dw_flags_: u32, cx_desired_: u32, cy_desired_: u32) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).Decode(@as(*const IShellImageData, @ptrCast(self)), dw_flags_, cx_desired_, cy_desired_);
            }
            pub inline fn draw(self: *const T, hdc_: ?HDC, prc_dest_: ?*RECT, prc_src_: ?*RECT) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).Draw(@as(*const IShellImageData, @ptrCast(self)), hdc_, prc_dest_, prc_src_);
            }
            pub inline fn nextFrame(self: *const T) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).NextFrame(@as(*const IShellImageData, @ptrCast(self)));
            }
            pub inline fn nextPage(self: *const T) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).NextPage(@as(*const IShellImageData, @ptrCast(self)));
            }
            pub inline fn prevPage(self: *const T) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).PrevPage(@as(*const IShellImageData, @ptrCast(self)));
            }
            pub inline fn isTransparent(self: *const T) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).IsTransparent(@as(*const IShellImageData, @ptrCast(self)));
            }
            pub inline fn isAnimated(self: *const T) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).IsAnimated(@as(*const IShellImageData, @ptrCast(self)));
            }
            pub inline fn isVector(self: *const T) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).IsVector(@as(*const IShellImageData, @ptrCast(self)));
            }
            pub inline fn isMultipage(self: *const T) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).IsMultipage(@as(*const IShellImageData, @ptrCast(self)));
            }
            pub inline fn isEditable(self: *const T) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).IsEditable(@as(*const IShellImageData, @ptrCast(self)));
            }
            pub inline fn isPrintable(self: *const T) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).IsPrintable(@as(*const IShellImageData, @ptrCast(self)));
            }
            pub inline fn isDecoded(self: *const T) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).IsDecoded(@as(*const IShellImageData, @ptrCast(self)));
            }
            pub inline fn getCurrentPage(self: *const T, pn_page_: ?*u32) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).GetCurrentPage(@as(*const IShellImageData, @ptrCast(self)), pn_page_);
            }
            pub inline fn getPageCount(self: *const T, pc_pages_: ?*u32) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).GetPageCount(@as(*const IShellImageData, @ptrCast(self)), pc_pages_);
            }
            pub inline fn selectPage(self: *const T, i_page_: u32) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).SelectPage(@as(*const IShellImageData, @ptrCast(self)), i_page_);
            }
            pub inline fn getSize(self: *const T, p_size_: ?*SIZE) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).GetSize(@as(*const IShellImageData, @ptrCast(self)), p_size_);
            }
            pub inline fn getRawDataFormat(self: *const T, p_data_format_: ?*Guid) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).GetRawDataFormat(@as(*const IShellImageData, @ptrCast(self)), p_data_format_);
            }
            pub inline fn getPixelFormat(self: *const T, p_format_: ?*u32) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).GetPixelFormat(@as(*const IShellImageData, @ptrCast(self)), p_format_);
            }
            pub inline fn getDelay(self: *const T, pdw_delay_: ?*u32) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).GetDelay(@as(*const IShellImageData, @ptrCast(self)), pdw_delay_);
            }
            pub inline fn getProperties(self: *const T, dw_mode_: u32, pp_prop_set_: ?*?*IPropertySetStorage) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).GetProperties(@as(*const IShellImageData, @ptrCast(self)), dw_mode_, pp_prop_set_);
            }
            pub inline fn rotate(self: *const T, dw_angle_: u32) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).Rotate(@as(*const IShellImageData, @ptrCast(self)), dw_angle_);
            }
            pub inline fn scale(self: *const T, cx_: u32, cy_: u32, hints_: u32) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).Scale(@as(*const IShellImageData, @ptrCast(self)), cx_, cy_, hints_);
            }
            pub inline fn discardEdit(self: *const T) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).DiscardEdit(@as(*const IShellImageData, @ptrCast(self)));
            }
            pub inline fn setEncoderParams(self: *const T, pbag_enc_: ?*IPropertyBag) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).SetEncoderParams(@as(*const IShellImageData, @ptrCast(self)), pbag_enc_);
            }
            pub inline fn displayName(self: *const T, wsz_name_: ?PWSTR, cch_: u32) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).DisplayName(@as(*const IShellImageData, @ptrCast(self)), wsz_name_, cch_);
            }
            pub inline fn getResolution(self: *const T, pu_resolution_x_: ?*u32, pu_resolution_y_: ?*u32) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).GetResolution(@as(*const IShellImageData, @ptrCast(self)), pu_resolution_x_, pu_resolution_y_);
            }
            pub inline fn getEncoderParams(self: *const T, pguid_fmt_: ?*Guid, pp_enc_params_: ?*?*u8) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).GetEncoderParams(@as(*const IShellImageData, @ptrCast(self)), pguid_fmt_, pp_enc_params_);
            }
            pub inline fn registerAbort(self: *const T, p_abort_: ?*IShellImageDataAbort, pp_abort_prev_: ?*?*IShellImageDataAbort) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).RegisterAbort(@as(*const IShellImageData, @ptrCast(self)), p_abort_, pp_abort_prev_);
            }
            pub inline fn cloneFrame(self: *const T, pp_img_: ?*?*u8) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).CloneFrame(@as(*const IShellImageData, @ptrCast(self)), pp_img_);
            }
            pub inline fn replaceFrame(self: *const T, p_img_: ?*u8) HRESULT {
                return @as(*const IShellImageData.VTable, @ptrCast(self.vtable)).ReplaceFrame(@as(*const IShellImageData, @ptrCast(self)), p_img_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IShellImageDataAbort_Value = Guid.initString("53fb8e58-50c0-4003-b4aa-0c8df28e7f3a");
pub const IID_IShellImageDataAbort = &IID_IShellImageDataAbort_Value;
pub const IShellImageDataAbort = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryAbort: *const fn (
            self: *const IShellImageDataAbort,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn queryAbort(self: *const T) HRESULT {
                return @as(*const IShellImageDataAbort.VTable, @ptrCast(self.vtable)).QueryAbort(@as(*const IShellImageDataAbort, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IStorageProviderPropertyHandler_Value = Guid.initString("301dfbe5-524c-4b0f-8b2d-21c40b3a2988");
pub const IID_IStorageProviderPropertyHandler = &IID_IStorageProviderPropertyHandler_Value;
pub const IStorageProviderPropertyHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RetrieveProperties: *const fn (
            self: *const IStorageProviderPropertyHandler,
            properties_to_retrieve: [*]const PROPERTYKEY,
            properties_to_retrieve_count: u32,
            retrieved_properties: ?*?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveProperties: *const fn (
            self: *const IStorageProviderPropertyHandler,
            properties_to_save: ?*IPropertyStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn retrieveProperties(self: *const T, properties_to_retrieve_: [*]const PROPERTYKEY, properties_to_retrieve_count_: u32, retrieved_properties_: ?*?*IPropertyStore) HRESULT {
                return @as(*const IStorageProviderPropertyHandler.VTable, @ptrCast(self.vtable)).RetrieveProperties(@as(*const IStorageProviderPropertyHandler, @ptrCast(self)), properties_to_retrieve_, properties_to_retrieve_count_, retrieved_properties_);
            }
            pub inline fn saveProperties(self: *const T, properties_to_save_: ?*IPropertyStore) HRESULT {
                return @as(*const IStorageProviderPropertyHandler.VTable, @ptrCast(self.vtable)).SaveProperties(@as(*const IStorageProviderPropertyHandler, @ptrCast(self)), properties_to_save_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IStorageProviderHandler_Value = Guid.initString("162c6fb5-44d3-435b-903d-e613fa093fb5");
pub const IID_IStorageProviderHandler = &IID_IStorageProviderHandler_Value;
pub const IStorageProviderHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPropertyHandlerFromPath: *const fn (
            self: *const IStorageProviderHandler,
            path: ?[*:0]const u16,
            property_handler: ?*?*IStorageProviderPropertyHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyHandlerFromUri: *const fn (
            self: *const IStorageProviderHandler,
            uri: ?[*:0]const u16,
            property_handler: ?*?*IStorageProviderPropertyHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyHandlerFromFileId: *const fn (
            self: *const IStorageProviderHandler,
            file_id: ?[*:0]const u16,
            property_handler: ?*?*IStorageProviderPropertyHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPropertyHandlerFromPath(self: *const T, path_: ?[*:0]const u16, property_handler_: ?*?*IStorageProviderPropertyHandler) HRESULT {
                return @as(*const IStorageProviderHandler.VTable, @ptrCast(self.vtable)).GetPropertyHandlerFromPath(@as(*const IStorageProviderHandler, @ptrCast(self)), path_, property_handler_);
            }
            pub inline fn getPropertyHandlerFromUri(self: *const T, uri_: ?[*:0]const u16, property_handler_: ?*?*IStorageProviderPropertyHandler) HRESULT {
                return @as(*const IStorageProviderHandler.VTable, @ptrCast(self.vtable)).GetPropertyHandlerFromUri(@as(*const IStorageProviderHandler, @ptrCast(self)), uri_, property_handler_);
            }
            pub inline fn getPropertyHandlerFromFileId(self: *const T, file_id_: ?[*:0]const u16, property_handler_: ?*?*IStorageProviderPropertyHandler) HRESULT {
                return @as(*const IStorageProviderHandler.VTable, @ptrCast(self.vtable)).GetPropertyHandlerFromFileId(@as(*const IStorageProviderHandler, @ptrCast(self)), file_id_, property_handler_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_SyncMgr_Value = Guid.initString("6295df27-35ee-11d1-8707-00c04fd93327");
pub const CLSID_SyncMgr = &CLSID_SyncMgr_Value;

pub const SYNCMGRSTATUS = enum(i32) {
    STOPPED = 0,
    SKIPPED = 1,
    PENDING = 2,
    UPDATING = 3,
    SUCCEEDED = 4,
    FAILED = 5,
    PAUSED = 6,
    RESUMING = 7,
    UPDATING_INDETERMINATE = 8,
    DELETED = 256,
};
pub const SYNCMGRSTATUS_STOPPED = SYNCMGRSTATUS.STOPPED;
pub const SYNCMGRSTATUS_SKIPPED = SYNCMGRSTATUS.SKIPPED;
pub const SYNCMGRSTATUS_PENDING = SYNCMGRSTATUS.PENDING;
pub const SYNCMGRSTATUS_UPDATING = SYNCMGRSTATUS.UPDATING;
pub const SYNCMGRSTATUS_SUCCEEDED = SYNCMGRSTATUS.SUCCEEDED;
pub const SYNCMGRSTATUS_FAILED = SYNCMGRSTATUS.FAILED;
pub const SYNCMGRSTATUS_PAUSED = SYNCMGRSTATUS.PAUSED;
pub const SYNCMGRSTATUS_RESUMING = SYNCMGRSTATUS.RESUMING;
pub const SYNCMGRSTATUS_UPDATING_INDETERMINATE = SYNCMGRSTATUS.UPDATING_INDETERMINATE;
pub const SYNCMGRSTATUS_DELETED = SYNCMGRSTATUS.DELETED;

pub const SYNCMGRPROGRESSITEM = extern struct {
    cbSize: u32,
    mask: u32,
    lpcStatusText: ?[*:0]const u16,
    dwStatusType: u32,
    iProgValue: i32,
    iMaxValue: i32,
};

pub const SYNCMGRLOGLEVEL = enum(i32) {
    INFORMATION = 1,
    WARNING = 2,
    ERROR = 3,
    // LOGLEVELMAX = 3, this enum value conflicts with ERROR
};
pub const SYNCMGRLOGLEVEL_INFORMATION = SYNCMGRLOGLEVEL.INFORMATION;
pub const SYNCMGRLOGLEVEL_WARNING = SYNCMGRLOGLEVEL.WARNING;
pub const SYNCMGRLOGLEVEL_ERROR = SYNCMGRLOGLEVEL.ERROR;
pub const SYNCMGRLOGLEVEL_LOGLEVELMAX = SYNCMGRLOGLEVEL.ERROR;

pub const SYNCMGRERRORFLAGS = enum(i32) {
    T = 1,
};
pub const SYNCMGRERRORFLAG_ENABLEJUMPTEXT = SYNCMGRERRORFLAGS.T;

pub const SYNCMGRLOGERRORINFO = extern struct {
    cbSize: u32,
    mask: u32,
    dwSyncMgrErrorFlags: u32,
    ErrorID: Guid,
    ItemID: Guid,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ISyncMgrSynchronizeCallback_Value = Guid.initString("6295df41-35ee-11d1-8707-00c04fd93327");
pub const IID_ISyncMgrSynchronizeCallback = &IID_ISyncMgrSynchronizeCallback_Value;
pub const ISyncMgrSynchronizeCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ShowPropertiesCompleted: *const fn (
            self: *const ISyncMgrSynchronizeCallback,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrepareForSyncCompleted: *const fn (
            self: *const ISyncMgrSynchronizeCallback,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SynchronizeCompleted: *const fn (
            self: *const ISyncMgrSynchronizeCallback,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowErrorCompleted: *const fn (
            self: *const ISyncMgrSynchronizeCallback,
            hr: HRESULT,
            c_items: u32,
            p_item_i_ds: [*]const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableModeless: *const fn (
            self: *const ISyncMgrSynchronizeCallback,
            f_enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Progress: *const fn (
            self: *const ISyncMgrSynchronizeCallback,
            item_i_d: ?*const Guid,
            p_sync_progress_item: ?*const SYNCMGRPROGRESSITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LogError: *const fn (
            self: *const ISyncMgrSynchronizeCallback,
            dw_error_level: u32,
            psz_error_text: ?[*:0]const u16,
            p_sync_log_error: ?*const SYNCMGRLOGERRORINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteLogError: *const fn (
            self: *const ISyncMgrSynchronizeCallback,
            error_i_d: ?*const Guid,
            dw_reserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EstablishConnection: *const fn (
            self: *const ISyncMgrSynchronizeCallback,
            pwsz_connection: ?[*:0]const u16,
            dw_reserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn showPropertiesCompleted(self: *const T, hr_: HRESULT) HRESULT {
                return @as(*const ISyncMgrSynchronizeCallback.VTable, @ptrCast(self.vtable)).ShowPropertiesCompleted(@as(*const ISyncMgrSynchronizeCallback, @ptrCast(self)), hr_);
            }
            pub inline fn prepareForSyncCompleted(self: *const T, hr_: HRESULT) HRESULT {
                return @as(*const ISyncMgrSynchronizeCallback.VTable, @ptrCast(self.vtable)).PrepareForSyncCompleted(@as(*const ISyncMgrSynchronizeCallback, @ptrCast(self)), hr_);
            }
            pub inline fn synchronizeCompleted(self: *const T, hr_: HRESULT) HRESULT {
                return @as(*const ISyncMgrSynchronizeCallback.VTable, @ptrCast(self.vtable)).SynchronizeCompleted(@as(*const ISyncMgrSynchronizeCallback, @ptrCast(self)), hr_);
            }
            pub inline fn showErrorCompleted(self: *const T, hr_: HRESULT, c_items_: u32, p_item_i_ds_: [*]const Guid) HRESULT {
                return @as(*const ISyncMgrSynchronizeCallback.VTable, @ptrCast(self.vtable)).ShowErrorCompleted(@as(*const ISyncMgrSynchronizeCallback, @ptrCast(self)), hr_, c_items_, p_item_i_ds_);
            }
            pub inline fn enableModeless(self: *const T, f_enable_: BOOL) HRESULT {
                return @as(*const ISyncMgrSynchronizeCallback.VTable, @ptrCast(self.vtable)).EnableModeless(@as(*const ISyncMgrSynchronizeCallback, @ptrCast(self)), f_enable_);
            }
            pub inline fn progress(self: *const T, item_i_d_: ?*const Guid, p_sync_progress_item_: ?*const SYNCMGRPROGRESSITEM) HRESULT {
                return @as(*const ISyncMgrSynchronizeCallback.VTable, @ptrCast(self.vtable)).Progress(@as(*const ISyncMgrSynchronizeCallback, @ptrCast(self)), item_i_d_, p_sync_progress_item_);
            }
            pub inline fn logError(self: *const T, dw_error_level_: u32, psz_error_text_: ?[*:0]const u16, p_sync_log_error_: ?*const SYNCMGRLOGERRORINFO) HRESULT {
                return @as(*const ISyncMgrSynchronizeCallback.VTable, @ptrCast(self.vtable)).LogError(@as(*const ISyncMgrSynchronizeCallback, @ptrCast(self)), dw_error_level_, psz_error_text_, p_sync_log_error_);
            }
            pub inline fn deleteLogError(self: *const T, error_i_d_: ?*const Guid, dw_reserved_: u32) HRESULT {
                return @as(*const ISyncMgrSynchronizeCallback.VTable, @ptrCast(self.vtable)).DeleteLogError(@as(*const ISyncMgrSynchronizeCallback, @ptrCast(self)), error_i_d_, dw_reserved_);
            }
            pub inline fn establishConnection(self: *const T, pwsz_connection_: ?[*:0]const u16, dw_reserved_: u32) HRESULT {
                return @as(*const ISyncMgrSynchronizeCallback.VTable, @ptrCast(self.vtable)).EstablishConnection(@as(*const ISyncMgrSynchronizeCallback, @ptrCast(self)), pwsz_connection_, dw_reserved_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGRITEMFLAGS = enum(i32) {
    HASPROPERTIES = 1,
    TEMPORARY = 2,
    ROAMINGUSER = 4,
    LASTUPDATETIME = 8,
    MAYDELETEITEM = 16,
    HIDDEN = 32,
};
pub const SYNCMGRITEM_HASPROPERTIES = SYNCMGRITEMFLAGS.HASPROPERTIES;
pub const SYNCMGRITEM_TEMPORARY = SYNCMGRITEMFLAGS.TEMPORARY;
pub const SYNCMGRITEM_ROAMINGUSER = SYNCMGRITEMFLAGS.ROAMINGUSER;
pub const SYNCMGRITEM_LASTUPDATETIME = SYNCMGRITEMFLAGS.LASTUPDATETIME;
pub const SYNCMGRITEM_MAYDELETEITEM = SYNCMGRITEMFLAGS.MAYDELETEITEM;
pub const SYNCMGRITEM_HIDDEN = SYNCMGRITEMFLAGS.HIDDEN;

pub const SYNCMGRITEM = extern struct {
    cbSize: u32,
    dwFlags: u32,
    ItemID: Guid,
    dwItemState: u32,
    hIcon: ?HICON,
    wszItemName: [128]u16,
    ftLastUpdate: FILETIME,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ISyncMgrEnumItems_Value = Guid.initString("6295df2a-35ee-11d1-8707-00c04fd93327");
pub const IID_ISyncMgrEnumItems = &IID_ISyncMgrEnumItems_Value;
pub const ISyncMgrEnumItems = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const ISyncMgrEnumItems,
            celt: u32,
            rgelt: [*]SYNCMGRITEM,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const ISyncMgrEnumItems,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const ISyncMgrEnumItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const ISyncMgrEnumItems,
            ppenum: ?*?*ISyncMgrEnumItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: [*]SYNCMGRITEM, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const ISyncMgrEnumItems.VTable, @ptrCast(self.vtable)).Next(@as(*const ISyncMgrEnumItems, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const ISyncMgrEnumItems.VTable, @ptrCast(self.vtable)).Skip(@as(*const ISyncMgrEnumItems, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const ISyncMgrEnumItems.VTable, @ptrCast(self.vtable)).Reset(@as(*const ISyncMgrEnumItems, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*ISyncMgrEnumItems) HRESULT {
                return @as(*const ISyncMgrEnumItems.VTable, @ptrCast(self.vtable)).Clone(@as(*const ISyncMgrEnumItems, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGRFLAG = enum(i32) {
    CONNECT = 1,
    PENDINGDISCONNECT = 2,
    MANUAL = 3,
    IDLE = 4,
    INVOKE = 5,
    SCHEDULED = 6,
    EVENTMASK = 255,
    SETTINGS = 256,
    MAYBOTHERUSER = 512,
};
pub const SYNCMGRFLAG_CONNECT = SYNCMGRFLAG.CONNECT;
pub const SYNCMGRFLAG_PENDINGDISCONNECT = SYNCMGRFLAG.PENDINGDISCONNECT;
pub const SYNCMGRFLAG_MANUAL = SYNCMGRFLAG.MANUAL;
pub const SYNCMGRFLAG_IDLE = SYNCMGRFLAG.IDLE;
pub const SYNCMGRFLAG_INVOKE = SYNCMGRFLAG.INVOKE;
pub const SYNCMGRFLAG_SCHEDULED = SYNCMGRFLAG.SCHEDULED;
pub const SYNCMGRFLAG_EVENTMASK = SYNCMGRFLAG.EVENTMASK;
pub const SYNCMGRFLAG_SETTINGS = SYNCMGRFLAG.SETTINGS;
pub const SYNCMGRFLAG_MAYBOTHERUSER = SYNCMGRFLAG.MAYBOTHERUSER;

pub const SYNCMGRHANDLERFLAGS = enum(i32) {
    HASPROPERTIES = 1,
    MAYESTABLISHCONNECTION = 2,
    ALWAYSLISTHANDLER = 4,
    HIDDEN = 8,
};
pub const SYNCMGRHANDLER_HASPROPERTIES = SYNCMGRHANDLERFLAGS.HASPROPERTIES;
pub const SYNCMGRHANDLER_MAYESTABLISHCONNECTION = SYNCMGRHANDLERFLAGS.MAYESTABLISHCONNECTION;
pub const SYNCMGRHANDLER_ALWAYSLISTHANDLER = SYNCMGRHANDLERFLAGS.ALWAYSLISTHANDLER;
pub const SYNCMGRHANDLER_HIDDEN = SYNCMGRHANDLERFLAGS.HIDDEN;

pub const SYNCMGRHANDLERINFO = extern struct {
    cbSize: u32,
    hIcon: ?HICON,
    SyncMgrHandlerFlags: u32,
    wszHandlerName: [32]u16,
};

pub const SYNCMGRITEMSTATE = enum(i32) {
    UNCHECKED = 0,
    CHECKED = 1,
};
pub const SYNCMGRITEMSTATE_UNCHECKED = SYNCMGRITEMSTATE.UNCHECKED;
pub const SYNCMGRITEMSTATE_CHECKED = SYNCMGRITEMSTATE.CHECKED;

// TODO: this type is limited to platform 'windows5.0'
const IID_ISyncMgrSynchronize_Value = Guid.initString("6295df40-35ee-11d1-8707-00c04fd93327");
pub const IID_ISyncMgrSynchronize = &IID_ISyncMgrSynchronize_Value;
pub const ISyncMgrSynchronize = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const ISyncMgrSynchronize,
            dw_reserved: u32,
            dw_sync_mgr_flags: u32,
            cb_cookie: u32,
            lp_cookie: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHandlerInfo: *const fn (
            self: *const ISyncMgrSynchronize,
            pp_sync_mgr_handler_info: ?*?*SYNCMGRHANDLERINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumSyncMgrItems: *const fn (
            self: *const ISyncMgrSynchronize,
            pp_sync_mgr_enum_items: ?*?*ISyncMgrEnumItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItemObject: *const fn (
            self: *const ISyncMgrSynchronize,
            item_i_d: ?*const Guid,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowProperties: *const fn (
            self: *const ISyncMgrSynchronize,
            h_wnd_parent: ?HWND,
            item_i_d: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetProgressCallback: *const fn (
            self: *const ISyncMgrSynchronize,
            lp_call_back: ?*ISyncMgrSynchronizeCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrepareForSync: *const fn (
            self: *const ISyncMgrSynchronize,
            cb_num_items: u32,
            p_item_i_ds: [*]Guid,
            h_wnd_parent: ?HWND,
            dw_reserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Synchronize: *const fn (
            self: *const ISyncMgrSynchronize,
            h_wnd_parent: ?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItemStatus: *const fn (
            self: *const ISyncMgrSynchronize,
            p_item_i_d: ?*const Guid,
            dw_sync_mgr_status: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowError: *const fn (
            self: *const ISyncMgrSynchronize,
            h_wnd_parent: ?HWND,
            error_i_d: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, dw_reserved_: u32, dw_sync_mgr_flags_: u32, cb_cookie_: u32, lp_cookie_: [*:0]const u8) HRESULT {
                return @as(*const ISyncMgrSynchronize.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ISyncMgrSynchronize, @ptrCast(self)), dw_reserved_, dw_sync_mgr_flags_, cb_cookie_, lp_cookie_);
            }
            pub inline fn getHandlerInfo(self: *const T, pp_sync_mgr_handler_info_: ?*?*SYNCMGRHANDLERINFO) HRESULT {
                return @as(*const ISyncMgrSynchronize.VTable, @ptrCast(self.vtable)).GetHandlerInfo(@as(*const ISyncMgrSynchronize, @ptrCast(self)), pp_sync_mgr_handler_info_);
            }
            pub inline fn enumSyncMgrItems(self: *const T, pp_sync_mgr_enum_items_: ?*?*ISyncMgrEnumItems) HRESULT {
                return @as(*const ISyncMgrSynchronize.VTable, @ptrCast(self.vtable)).EnumSyncMgrItems(@as(*const ISyncMgrSynchronize, @ptrCast(self)), pp_sync_mgr_enum_items_);
            }
            pub inline fn getItemObject(self: *const T, item_i_d_: ?*const Guid, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const ISyncMgrSynchronize.VTable, @ptrCast(self.vtable)).GetItemObject(@as(*const ISyncMgrSynchronize, @ptrCast(self)), item_i_d_, riid_, ppv_);
            }
            pub inline fn showProperties(self: *const T, h_wnd_parent_: ?HWND, item_i_d_: ?*const Guid) HRESULT {
                return @as(*const ISyncMgrSynchronize.VTable, @ptrCast(self.vtable)).ShowProperties(@as(*const ISyncMgrSynchronize, @ptrCast(self)), h_wnd_parent_, item_i_d_);
            }
            pub inline fn setProgressCallback(self: *const T, lp_call_back_: ?*ISyncMgrSynchronizeCallback) HRESULT {
                return @as(*const ISyncMgrSynchronize.VTable, @ptrCast(self.vtable)).SetProgressCallback(@as(*const ISyncMgrSynchronize, @ptrCast(self)), lp_call_back_);
            }
            pub inline fn prepareForSync(self: *const T, cb_num_items_: u32, p_item_i_ds_: [*]Guid, h_wnd_parent_: ?HWND, dw_reserved_: u32) HRESULT {
                return @as(*const ISyncMgrSynchronize.VTable, @ptrCast(self.vtable)).PrepareForSync(@as(*const ISyncMgrSynchronize, @ptrCast(self)), cb_num_items_, p_item_i_ds_, h_wnd_parent_, dw_reserved_);
            }
            pub inline fn synchronize(self: *const T, h_wnd_parent_: ?HWND) HRESULT {
                return @as(*const ISyncMgrSynchronize.VTable, @ptrCast(self.vtable)).Synchronize(@as(*const ISyncMgrSynchronize, @ptrCast(self)), h_wnd_parent_);
            }
            pub inline fn setItemStatus(self: *const T, p_item_i_d_: ?*const Guid, dw_sync_mgr_status_: u32) HRESULT {
                return @as(*const ISyncMgrSynchronize.VTable, @ptrCast(self.vtable)).SetItemStatus(@as(*const ISyncMgrSynchronize, @ptrCast(self)), p_item_i_d_, dw_sync_mgr_status_);
            }
            pub inline fn showError(self: *const T, h_wnd_parent_: ?HWND, error_i_d_: ?*const Guid) HRESULT {
                return @as(*const ISyncMgrSynchronize.VTable, @ptrCast(self.vtable)).ShowError(@as(*const ISyncMgrSynchronize, @ptrCast(self)), h_wnd_parent_, error_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGRINVOKEFLAGS = enum(i32) {
    STARTSYNC = 2,
    MINIMIZED = 4,
};
pub const SYNCMGRINVOKE_STARTSYNC = SYNCMGRINVOKEFLAGS.STARTSYNC;
pub const SYNCMGRINVOKE_MINIMIZED = SYNCMGRINVOKEFLAGS.MINIMIZED;

// TODO: this type is limited to platform 'windows5.0'
const IID_ISyncMgrSynchronizeInvoke_Value = Guid.initString("6295df2c-35ee-11d1-8707-00c04fd93327");
pub const IID_ISyncMgrSynchronizeInvoke = &IID_ISyncMgrSynchronizeInvoke_Value;
pub const ISyncMgrSynchronizeInvoke = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        UpdateItems: *const fn (
            self: *const ISyncMgrSynchronizeInvoke,
            dw_invoke_flags: u32,
            clsid: ?*const Guid,
            cb_cookie: u32,
            p_cookie: [*:0]const u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateAll: *const fn (
            self: *const ISyncMgrSynchronizeInvoke,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn updateItems(self: *const T, dw_invoke_flags_: u32, clsid_: ?*const Guid, cb_cookie_: u32, p_cookie_: [*:0]const u8) HRESULT {
                return @as(*const ISyncMgrSynchronizeInvoke.VTable, @ptrCast(self.vtable)).UpdateItems(@as(*const ISyncMgrSynchronizeInvoke, @ptrCast(self)), dw_invoke_flags_, clsid_, cb_cookie_, p_cookie_);
            }
            pub inline fn updateAll(self: *const T) HRESULT {
                return @as(*const ISyncMgrSynchronizeInvoke.VTable, @ptrCast(self.vtable)).UpdateAll(@as(*const ISyncMgrSynchronizeInvoke, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SYNCMGRREGISTERFLAGS = enum(i32) {
    CONNECT = 1,
    PENDINGDISCONNECT = 2,
    IDLE = 4,
};
pub const SYNCMGRREGISTERFLAG_CONNECT = SYNCMGRREGISTERFLAGS.CONNECT;
pub const SYNCMGRREGISTERFLAG_PENDINGDISCONNECT = SYNCMGRREGISTERFLAGS.PENDINGDISCONNECT;
pub const SYNCMGRREGISTERFLAG_IDLE = SYNCMGRREGISTERFLAGS.IDLE;

// TODO: this type is limited to platform 'windows5.0'
const IID_ISyncMgrRegister_Value = Guid.initString("6295df42-35ee-11d1-8707-00c04fd93327");
pub const IID_ISyncMgrRegister = &IID_ISyncMgrRegister_Value;
pub const ISyncMgrRegister = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterSyncMgrHandler: *const fn (
            self: *const ISyncMgrRegister,
            clsid_handler: ?*const Guid,
            pwsz_description: ?[*:0]const u16,
            dw_sync_mgr_register_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnregisterSyncMgrHandler: *const fn (
            self: *const ISyncMgrRegister,
            clsid_handler: ?*const Guid,
            dw_reserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHandlerRegistrationInfo: *const fn (
            self: *const ISyncMgrRegister,
            clsid_handler: ?*const Guid,
            pdw_sync_mgr_register_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn registerSyncMgrHandler(self: *const T, clsid_handler_: ?*const Guid, pwsz_description_: ?[*:0]const u16, dw_sync_mgr_register_flags_: u32) HRESULT {
                return @as(*const ISyncMgrRegister.VTable, @ptrCast(self.vtable)).RegisterSyncMgrHandler(@as(*const ISyncMgrRegister, @ptrCast(self)), clsid_handler_, pwsz_description_, dw_sync_mgr_register_flags_);
            }
            pub inline fn unregisterSyncMgrHandler(self: *const T, clsid_handler_: ?*const Guid, dw_reserved_: u32) HRESULT {
                return @as(*const ISyncMgrRegister.VTable, @ptrCast(self.vtable)).UnregisterSyncMgrHandler(@as(*const ISyncMgrRegister, @ptrCast(self)), clsid_handler_, dw_reserved_);
            }
            pub inline fn getHandlerRegistrationInfo(self: *const T, clsid_handler_: ?*const Guid, pdw_sync_mgr_register_flags_: ?*u32) HRESULT {
                return @as(*const ISyncMgrRegister.VTable, @ptrCast(self.vtable)).GetHandlerRegistrationInfo(@as(*const ISyncMgrRegister, @ptrCast(self)), clsid_handler_, pdw_sync_mgr_register_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_ThumbnailStreamCache_Value = Guid.initString("cbe0fed3-4b91-4e90-8354-8a8c84ec6872");
pub const CLSID_ThumbnailStreamCache = &CLSID_ThumbnailStreamCache_Value;

pub const ThumbnailStreamCacheOptions = enum(i32) {
    ExtractIfNotCached = 0,
    ReturnOnlyIfCached = 1,
    ResizeThumbnail = 2,
    AllowSmallerSize = 4,
};
pub const ExtractIfNotCached = ThumbnailStreamCacheOptions.ExtractIfNotCached;
pub const ReturnOnlyIfCached = ThumbnailStreamCacheOptions.ReturnOnlyIfCached;
pub const ResizeThumbnail = ThumbnailStreamCacheOptions.ResizeThumbnail;
pub const AllowSmallerSize = ThumbnailStreamCacheOptions.AllowSmallerSize;

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IThumbnailStreamCache_Value = Guid.initString("90e11430-9569-41d8-ae75-6d4d2ae7cca0");
pub const IID_IThumbnailStreamCache = &IID_IThumbnailStreamCache_Value;
pub const IThumbnailStreamCache = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetThumbnailStream: *const fn (
            self: *const IThumbnailStreamCache,
            path: ?[*:0]const u16,
            cache_id: u64,
            options: ThumbnailStreamCacheOptions,
            requested_thumbnail_size: u32,
            thumbnail_size: ?*SIZE,
            thumbnail_stream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetThumbnailStream: *const fn (
            self: *const IThumbnailStreamCache,
            path: ?[*:0]const u16,
            cache_id: u64,
            thumbnail_size: SIZE,
            thumbnail_stream: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getThumbnailStream(self: *const T, path_: ?[*:0]const u16, cache_id_: u64, options_: ThumbnailStreamCacheOptions, requested_thumbnail_size_: u32, thumbnail_size_: ?*SIZE, thumbnail_stream_: ?*?*IStream) HRESULT {
                return @as(*const IThumbnailStreamCache.VTable, @ptrCast(self.vtable)).GetThumbnailStream(@as(*const IThumbnailStreamCache, @ptrCast(self)), path_, cache_id_, options_, requested_thumbnail_size_, thumbnail_size_, thumbnail_stream_);
            }
            pub inline fn setThumbnailStream(self: *const T, path_: ?[*:0]const u16, cache_id_: u64, thumbnail_size_: SIZE, thumbnail_stream_: ?*IStream) HRESULT {
                return @as(*const IThumbnailStreamCache.VTable, @ptrCast(self.vtable)).SetThumbnailStream(@as(*const IThumbnailStreamCache, @ptrCast(self)), path_, cache_id_, thumbnail_size_, thumbnail_stream_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_TrackShellMenu_Value = Guid.initString("8278f931-2a3e-11d2-838f-00c04fd918d0");
pub const CLSID_TrackShellMenu = &CLSID_TrackShellMenu_Value;

pub const WINDOWDATA = extern struct {
    dwWindowID: u32,
    uiCP: u32,
    pidl: ?*ITEMIDLIST,
    lpszUrl: ?PWSTR,
    lpszUrlLocation: ?PWSTR,
    lpszTitle: ?PWSTR,
};

const IID_ITravelLogEntry_Value = Guid.initString("7ebfdd87-ad18-11d3-a4c5-00c04f72d6b8");
pub const IID_ITravelLogEntry = &IID_ITravelLogEntry_Value;
pub const ITravelLogEntry = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetTitle: *const fn (
            self: *const ITravelLogEntry,
            ppsz_title: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetURL: *const fn (
            self: *const ITravelLogEntry,
            ppsz_u_r_l: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getTitle(self: *const T, ppsz_title_: ?*?PWSTR) HRESULT {
                return @as(*const ITravelLogEntry.VTable, @ptrCast(self.vtable)).GetTitle(@as(*const ITravelLogEntry, @ptrCast(self)), ppsz_title_);
            }
            pub inline fn getURL(self: *const T, ppsz_u_r_l_: ?*?PWSTR) HRESULT {
                return @as(*const ITravelLogEntry.VTable, @ptrCast(self.vtable)).GetURL(@as(*const ITravelLogEntry, @ptrCast(self)), ppsz_u_r_l_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITravelLogClient_Value = Guid.initString("241c033e-e659-43da-aa4d-4086dbc4758d");
pub const IID_ITravelLogClient = &IID_ITravelLogClient_Value;
pub const ITravelLogClient = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindWindowByIndex: *const fn (
            self: *const ITravelLogClient,
            dw_i_d: u32,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWindowData: *const fn (
            self: *const ITravelLogClient,
            p_stream: ?*IStream,
            p_win_data: ?*WINDOWDATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LoadHistoryPosition: *const fn (
            self: *const ITravelLogClient,
            psz_url_location: ?PWSTR,
            dw_position: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn findWindowByIndex(self: *const T, dw_i_d_: u32, ppunk_: ?*?*IUnknown) HRESULT {
                return @as(*const ITravelLogClient.VTable, @ptrCast(self.vtable)).FindWindowByIndex(@as(*const ITravelLogClient, @ptrCast(self)), dw_i_d_, ppunk_);
            }
            pub inline fn getWindowData(self: *const T, p_stream_: ?*IStream, p_win_data_: ?*WINDOWDATA) HRESULT {
                return @as(*const ITravelLogClient.VTable, @ptrCast(self.vtable)).GetWindowData(@as(*const ITravelLogClient, @ptrCast(self)), p_stream_, p_win_data_);
            }
            pub inline fn loadHistoryPosition(self: *const T, psz_url_location_: ?PWSTR, dw_position_: u32) HRESULT {
                return @as(*const ITravelLogClient.VTable, @ptrCast(self.vtable)).LoadHistoryPosition(@as(*const ITravelLogClient, @ptrCast(self)), psz_url_location_, dw_position_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IEnumTravelLogEntry_Value = Guid.initString("7ebfdd85-ad18-11d3-a4c5-00c04f72d6b8");
pub const IID_IEnumTravelLogEntry = &IID_IEnumTravelLogEntry_Value;
pub const IEnumTravelLogEntry = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumTravelLogEntry,
            c_elt: u32,
            rg_elt: [*]?*ITravelLogEntry,
            pc_elt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumTravelLogEntry,
            c_elt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumTravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumTravelLogEntry,
            pp_enum: ?*?*IEnumTravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, c_elt_: u32, rg_elt_: [*]?*ITravelLogEntry, pc_elt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumTravelLogEntry.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumTravelLogEntry, @ptrCast(self)), c_elt_, rg_elt_, pc_elt_fetched_);
            }
            pub inline fn skip(self: *const T, c_elt_: u32) HRESULT {
                return @as(*const IEnumTravelLogEntry.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumTravelLogEntry, @ptrCast(self)), c_elt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumTravelLogEntry.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumTravelLogEntry, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IEnumTravelLogEntry) HRESULT {
                return @as(*const IEnumTravelLogEntry.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumTravelLogEntry, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const TLENUMF = enum(i32) {
    RELATIVE_INCLUDE_CURRENT = 1,
    RELATIVE_BACK = 16,
    RELATIVE_FORE = 32,
    INCLUDE_UNINVOKEABLE = 64,
    ABSOLUTE = 49,
    EXCLUDE_SUBFRAME_ENTRIES = 128,
    EXCLUDE_ABOUT_PAGES = 256,
};
pub const TLEF_RELATIVE_INCLUDE_CURRENT = TLENUMF.RELATIVE_INCLUDE_CURRENT;
pub const TLEF_RELATIVE_BACK = TLENUMF.RELATIVE_BACK;
pub const TLEF_RELATIVE_FORE = TLENUMF.RELATIVE_FORE;
pub const TLEF_INCLUDE_UNINVOKEABLE = TLENUMF.INCLUDE_UNINVOKEABLE;
pub const TLEF_ABSOLUTE = TLENUMF.ABSOLUTE;
pub const TLEF_EXCLUDE_SUBFRAME_ENTRIES = TLENUMF.EXCLUDE_SUBFRAME_ENTRIES;
pub const TLEF_EXCLUDE_ABOUT_PAGES = TLENUMF.EXCLUDE_ABOUT_PAGES;

const IID_ITravelLogStg_Value = Guid.initString("7ebfdd80-ad18-11d3-a4c5-00c04f72d6b8");
pub const IID_ITravelLogStg = &IID_ITravelLogStg_Value;
pub const ITravelLogStg = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateEntry: *const fn (
            self: *const ITravelLogStg,
            psz_url: ?[*:0]const u16,
            psz_title: ?[*:0]const u16,
            ptle_relative_to: ?*ITravelLogEntry,
            f_prepend: BOOL,
            pptle: ?*?*ITravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TravelTo: *const fn (
            self: *const ITravelLogStg,
            ptle: ?*ITravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumEntries: *const fn (
            self: *const ITravelLogStg,
            flags: TLENUMF,
            ppenum: ?*?*IEnumTravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindEntries: *const fn (
            self: *const ITravelLogStg,
            flags: TLENUMF,
            psz_url: ?[*:0]const u16,
            ppenum: ?*?*IEnumTravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCount: *const fn (
            self: *const ITravelLogStg,
            flags: TLENUMF,
            pc_entries: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveEntry: *const fn (
            self: *const ITravelLogStg,
            ptle: ?*ITravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRelativeEntry: *const fn (
            self: *const ITravelLogStg,
            i_offset: i32,
            ptle: ?*?*ITravelLogEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createEntry(self: *const T, psz_url_: ?[*:0]const u16, psz_title_: ?[*:0]const u16, ptle_relative_to_: ?*ITravelLogEntry, f_prepend_: BOOL, pptle_: ?*?*ITravelLogEntry) HRESULT {
                return @as(*const ITravelLogStg.VTable, @ptrCast(self.vtable)).CreateEntry(@as(*const ITravelLogStg, @ptrCast(self)), psz_url_, psz_title_, ptle_relative_to_, f_prepend_, pptle_);
            }
            pub inline fn travelTo(self: *const T, ptle_: ?*ITravelLogEntry) HRESULT {
                return @as(*const ITravelLogStg.VTable, @ptrCast(self.vtable)).TravelTo(@as(*const ITravelLogStg, @ptrCast(self)), ptle_);
            }
            pub inline fn enumEntries(self: *const T, flags_: TLENUMF, ppenum_: ?*?*IEnumTravelLogEntry) HRESULT {
                return @as(*const ITravelLogStg.VTable, @ptrCast(self.vtable)).EnumEntries(@as(*const ITravelLogStg, @ptrCast(self)), flags_, ppenum_);
            }
            pub inline fn findEntries(self: *const T, flags_: TLENUMF, psz_url_: ?[*:0]const u16, ppenum_: ?*?*IEnumTravelLogEntry) HRESULT {
                return @as(*const ITravelLogStg.VTable, @ptrCast(self.vtable)).FindEntries(@as(*const ITravelLogStg, @ptrCast(self)), flags_, psz_url_, ppenum_);
            }
            pub inline fn getCount(self: *const T, flags_: TLENUMF, pc_entries_: ?*u32) HRESULT {
                return @as(*const ITravelLogStg.VTable, @ptrCast(self.vtable)).GetCount(@as(*const ITravelLogStg, @ptrCast(self)), flags_, pc_entries_);
            }
            pub inline fn removeEntry(self: *const T, ptle_: ?*ITravelLogEntry) HRESULT {
                return @as(*const ITravelLogStg.VTable, @ptrCast(self.vtable)).RemoveEntry(@as(*const ITravelLogStg, @ptrCast(self)), ptle_);
            }
            pub inline fn getRelativeEntry(self: *const T, i_offset_: i32, ptle_: ?*?*ITravelLogEntry) HRESULT {
                return @as(*const ITravelLogStg.VTable, @ptrCast(self.vtable)).GetRelativeEntry(@as(*const ITravelLogStg, @ptrCast(self)), i_offset_, ptle_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const _HLSR_NOREDEF10 = enum(i32) {
    HOME = 0,
    SEARCHPAGE = 1,
    HISTORYFOLDER = 2,
};
pub const HLSR_HOME = _HLSR_NOREDEF10.HOME;
pub const HLSR_SEARCHPAGE = _HLSR_NOREDEF10.SEARCHPAGE;
pub const HLSR_HISTORYFOLDER = _HLSR_NOREDEF10.HISTORYFOLDER;

pub const _HLSHORTCUTF__NOREDEF10 = enum(i32) {
    DEFAULT = 0,
    DONTACTUALLYCREATE = 1,
    USEFILENAMEFROMFRIENDLYNAME = 2,
    USEUNIQUEFILENAME = 4,
    MAYUSEEXISTINGSHORTCUT = 8,
};
pub const HLSHORTCUTF_DEFAULT = _HLSHORTCUTF__NOREDEF10.DEFAULT;
pub const HLSHORTCUTF_DONTACTUALLYCREATE = _HLSHORTCUTF__NOREDEF10.DONTACTUALLYCREATE;
pub const HLSHORTCUTF_USEFILENAMEFROMFRIENDLYNAME = _HLSHORTCUTF__NOREDEF10.USEFILENAMEFROMFRIENDLYNAME;
pub const HLSHORTCUTF_USEUNIQUEFILENAME = _HLSHORTCUTF__NOREDEF10.USEUNIQUEFILENAME;
pub const HLSHORTCUTF_MAYUSEEXISTINGSHORTCUT = _HLSHORTCUTF__NOREDEF10.MAYUSEEXISTINGSHORTCUT;

pub const _HLTRANSLATEF_NOREDEF10 = enum(i32) {
    EFAULT = 0,
    ONTAPPLYDEFAULTPREFIX = 1,
};
pub const HLTRANSLATEF_DEFAULT = _HLTRANSLATEF_NOREDEF10.EFAULT;
pub const HLTRANSLATEF_DONTAPPLYDEFAULTPREFIX = _HLTRANSLATEF_NOREDEF10.ONTAPPLYDEFAULTPREFIX;

pub const HLNF = enum(u32) {
    INTERNALJUMP = 1,
    OPENINNEWWINDOW = 2,
    NAVIGATINGBACK = 4,
    NAVIGATINGFORWARD = 8,
    NAVIGATINGTOSTACKITEM = 16,
    CREATENOHISTORY = 32,
    _,
    pub fn initFlags(o: struct {
        INTERNALJUMP: u1 = 0,
        OPENINNEWWINDOW: u1 = 0,
        NAVIGATINGBACK: u1 = 0,
        NAVIGATINGFORWARD: u1 = 0,
        NAVIGATINGTOSTACKITEM: u1 = 0,
        CREATENOHISTORY: u1 = 0,
    }) HLNF {
        return @as(HLNF, @enumFromInt((if (o.INTERNALJUMP == 1) @intFromEnum(HLNF.INTERNALJUMP) else 0) | (if (o.OPENINNEWWINDOW == 1) @intFromEnum(HLNF.OPENINNEWWINDOW) else 0) | (if (o.NAVIGATINGBACK == 1) @intFromEnum(HLNF.NAVIGATINGBACK) else 0) | (if (o.NAVIGATINGFORWARD == 1) @intFromEnum(HLNF.NAVIGATINGFORWARD) else 0) | (if (o.NAVIGATINGTOSTACKITEM == 1) @intFromEnum(HLNF.NAVIGATINGTOSTACKITEM) else 0) | (if (o.CREATENOHISTORY == 1) @intFromEnum(HLNF.CREATENOHISTORY) else 0)));
    }
};
pub const HLNF_INTERNALJUMP = HLNF.INTERNALJUMP;
pub const HLNF_OPENINNEWWINDOW = HLNF.OPENINNEWWINDOW;
pub const HLNF_NAVIGATINGBACK = HLNF.NAVIGATINGBACK;
pub const HLNF_NAVIGATINGFORWARD = HLNF.NAVIGATINGFORWARD;
pub const HLNF_NAVIGATINGTOSTACKITEM = HLNF.NAVIGATINGTOSTACKITEM;
pub const HLNF_CREATENOHISTORY = HLNF.CREATENOHISTORY;

pub const HLINKGETREF = enum(i32) {
    DEFAULT = 0,
    ABSOLUTE = 1,
    RELATIVE = 2,
};
pub const HLINKGETREF_DEFAULT = HLINKGETREF.DEFAULT;
pub const HLINKGETREF_ABSOLUTE = HLINKGETREF.ABSOLUTE;
pub const HLINKGETREF_RELATIVE = HLINKGETREF.RELATIVE;

pub const HLFNAMEF = enum(u32) {
    DEFAULT = 0,
    TRYCACHE = 1,
    TRYPRETTYTARGET = 2,
    TRYFULLTARGET = 4,
    TRYWIN95SHORTCUT = 8,
    _,
    pub fn initFlags(o: struct {
        DEFAULT: u1 = 0,
        TRYCACHE: u1 = 0,
        TRYPRETTYTARGET: u1 = 0,
        TRYFULLTARGET: u1 = 0,
        TRYWIN95SHORTCUT: u1 = 0,
    }) HLFNAMEF {
        return @as(HLFNAMEF, @enumFromInt((if (o.DEFAULT == 1) @intFromEnum(HLFNAMEF.DEFAULT) else 0) | (if (o.TRYCACHE == 1) @intFromEnum(HLFNAMEF.TRYCACHE) else 0) | (if (o.TRYPRETTYTARGET == 1) @intFromEnum(HLFNAMEF.TRYPRETTYTARGET) else 0) | (if (o.TRYFULLTARGET == 1) @intFromEnum(HLFNAMEF.TRYFULLTARGET) else 0) | (if (o.TRYWIN95SHORTCUT == 1) @intFromEnum(HLFNAMEF.TRYWIN95SHORTCUT) else 0)));
    }
};
pub const HLFNAMEF_DEFAULT = HLFNAMEF.DEFAULT;
pub const HLFNAMEF_TRYCACHE = HLFNAMEF.TRYCACHE;
pub const HLFNAMEF_TRYPRETTYTARGET = HLFNAMEF.TRYPRETTYTARGET;
pub const HLFNAMEF_TRYFULLTARGET = HLFNAMEF.TRYFULLTARGET;
pub const HLFNAMEF_TRYWIN95SHORTCUT = HLFNAMEF.TRYWIN95SHORTCUT;

pub const HLINKMISC = enum(i32) {
    E = 1,
};
pub const HLINKMISC_RELATIVE = HLINKMISC.E;

pub const HLINKSETF = enum(i32) {
    TARGET = 1,
    LOCATION = 2,
};
pub const HLINKSETF_TARGET = HLINKSETF.TARGET;
pub const HLINKSETF_LOCATION = HLINKSETF.LOCATION;

const IID_IHlink_Value = Guid.initString("79eac9c3-baf9-11ce-8c82-00aa004ba90b");
pub const IID_IHlink = &IID_IHlink_Value;
pub const IHlink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetHlinkSite: *const fn (
            self: *const IHlink,
            pihl_site: ?*IHlinkSite,
            dw_site_data: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHlinkSite: *const fn (
            self: *const IHlink,
            ppihl_site: ?*?*IHlinkSite,
            pdw_site_data: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMonikerReference: *const fn (
            self: *const IHlink,
            grf_h_l_s_e_t_f: u32,
            pimk_target: ?*IMoniker,
            pwz_location: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMonikerReference: *const fn (
            self: *const IHlink,
            dw_which_ref: u32,
            ppimk_target: ?*?*IMoniker,
            ppwz_location: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStringReference: *const fn (
            self: *const IHlink,
            grf_h_l_s_e_t_f: u32,
            pwz_target: ?[*:0]const u16,
            pwz_location: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringReference: *const fn (
            self: *const IHlink,
            dw_which_ref: u32,
            ppwz_target: ?*?PWSTR,
            ppwz_location: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFriendlyName: *const fn (
            self: *const IHlink,
            pwz_friendly_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFriendlyName: *const fn (
            self: *const IHlink,
            grf_h_l_f_n_a_m_e_f: u32,
            ppwz_friendly_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTargetFrameName: *const fn (
            self: *const IHlink,
            pwz_target_frame_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTargetFrameName: *const fn (
            self: *const IHlink,
            ppwz_target_frame_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMiscStatus: *const fn (
            self: *const IHlink,
            pdw_status: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Navigate: *const fn (
            self: *const IHlink,
            grf_h_l_n_f: u32,
            pibc: ?*IBindCtx,
            pibsc: ?*IBindStatusCallback,
            pihlbc: ?*IHlinkBrowseContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAdditionalParams: *const fn (
            self: *const IHlink,
            pwz_additional_params: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAdditionalParams: *const fn (
            self: *const IHlink,
            ppwz_additional_params: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setHlinkSite(self: *const T, pihl_site_: ?*IHlinkSite, dw_site_data_: u32) HRESULT {
                return @as(*const IHlink.VTable, @ptrCast(self.vtable)).SetHlinkSite(@as(*const IHlink, @ptrCast(self)), pihl_site_, dw_site_data_);
            }
            pub inline fn getHlinkSite(self: *const T, ppihl_site_: ?*?*IHlinkSite, pdw_site_data_: ?*u32) HRESULT {
                return @as(*const IHlink.VTable, @ptrCast(self.vtable)).GetHlinkSite(@as(*const IHlink, @ptrCast(self)), ppihl_site_, pdw_site_data_);
            }
            pub inline fn setMonikerReference(self: *const T, grf_h_l_s_e_t_f_: u32, pimk_target_: ?*IMoniker, pwz_location_: ?[*:0]const u16) HRESULT {
                return @as(*const IHlink.VTable, @ptrCast(self.vtable)).SetMonikerReference(@as(*const IHlink, @ptrCast(self)), grf_h_l_s_e_t_f_, pimk_target_, pwz_location_);
            }
            pub inline fn getMonikerReference(self: *const T, dw_which_ref_: u32, ppimk_target_: ?*?*IMoniker, ppwz_location_: ?*?PWSTR) HRESULT {
                return @as(*const IHlink.VTable, @ptrCast(self.vtable)).GetMonikerReference(@as(*const IHlink, @ptrCast(self)), dw_which_ref_, ppimk_target_, ppwz_location_);
            }
            pub inline fn setStringReference(self: *const T, grf_h_l_s_e_t_f_: u32, pwz_target_: ?[*:0]const u16, pwz_location_: ?[*:0]const u16) HRESULT {
                return @as(*const IHlink.VTable, @ptrCast(self.vtable)).SetStringReference(@as(*const IHlink, @ptrCast(self)), grf_h_l_s_e_t_f_, pwz_target_, pwz_location_);
            }
            pub inline fn getStringReference(self: *const T, dw_which_ref_: u32, ppwz_target_: ?*?PWSTR, ppwz_location_: ?*?PWSTR) HRESULT {
                return @as(*const IHlink.VTable, @ptrCast(self.vtable)).GetStringReference(@as(*const IHlink, @ptrCast(self)), dw_which_ref_, ppwz_target_, ppwz_location_);
            }
            pub inline fn setFriendlyName(self: *const T, pwz_friendly_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IHlink.VTable, @ptrCast(self.vtable)).SetFriendlyName(@as(*const IHlink, @ptrCast(self)), pwz_friendly_name_);
            }
            pub inline fn getFriendlyName(self: *const T, grf_h_l_f_n_a_m_e_f_: u32, ppwz_friendly_name_: ?*?PWSTR) HRESULT {
                return @as(*const IHlink.VTable, @ptrCast(self.vtable)).GetFriendlyName(@as(*const IHlink, @ptrCast(self)), grf_h_l_f_n_a_m_e_f_, ppwz_friendly_name_);
            }
            pub inline fn setTargetFrameName(self: *const T, pwz_target_frame_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IHlink.VTable, @ptrCast(self.vtable)).SetTargetFrameName(@as(*const IHlink, @ptrCast(self)), pwz_target_frame_name_);
            }
            pub inline fn getTargetFrameName(self: *const T, ppwz_target_frame_name_: ?*?PWSTR) HRESULT {
                return @as(*const IHlink.VTable, @ptrCast(self.vtable)).GetTargetFrameName(@as(*const IHlink, @ptrCast(self)), ppwz_target_frame_name_);
            }
            pub inline fn getMiscStatus(self: *const T, pdw_status_: ?*u32) HRESULT {
                return @as(*const IHlink.VTable, @ptrCast(self.vtable)).GetMiscStatus(@as(*const IHlink, @ptrCast(self)), pdw_status_);
            }
            pub inline fn navigate(self: *const T, grf_h_l_n_f_: u32, pibc_: ?*IBindCtx, pibsc_: ?*IBindStatusCallback, pihlbc_: ?*IHlinkBrowseContext) HRESULT {
                return @as(*const IHlink.VTable, @ptrCast(self.vtable)).Navigate(@as(*const IHlink, @ptrCast(self)), grf_h_l_n_f_, pibc_, pibsc_, pihlbc_);
            }
            pub inline fn setAdditionalParams(self: *const T, pwz_additional_params_: ?[*:0]const u16) HRESULT {
                return @as(*const IHlink.VTable, @ptrCast(self.vtable)).SetAdditionalParams(@as(*const IHlink, @ptrCast(self)), pwz_additional_params_);
            }
            pub inline fn getAdditionalParams(self: *const T, ppwz_additional_params_: ?*?PWSTR) HRESULT {
                return @as(*const IHlink.VTable, @ptrCast(self.vtable)).GetAdditionalParams(@as(*const IHlink, @ptrCast(self)), ppwz_additional_params_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const HLINKWHICHMK = enum(i32) {
    CONTAINER = 1,
    BASE = 2,
};
pub const HLINKWHICHMK_CONTAINER = HLINKWHICHMK.CONTAINER;
pub const HLINKWHICHMK_BASE = HLINKWHICHMK.BASE;

const IID_IHlinkSite_Value = Guid.initString("79eac9c2-baf9-11ce-8c82-00aa004ba90b");
pub const IID_IHlinkSite = &IID_IHlinkSite_Value;
pub const IHlinkSite = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryService: *const fn (
            self: *const IHlinkSite,
            dw_site_data: u32,
            guid_service: ?*const Guid,
            riid: ?*const Guid,
            ppiunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMoniker: *const fn (
            self: *const IHlinkSite,
            dw_site_data: u32,
            dw_assign: u32,
            dw_which: u32,
            ppimk: ?*?*IMoniker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReadyToNavigate: *const fn (
            self: *const IHlinkSite,
            dw_site_data: u32,
            dw_reserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNavigationComplete: *const fn (
            self: *const IHlinkSite,
            dw_site_data: u32,
            dwreserved: u32,
            hr_error: HRESULT,
            pwz_error: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn queryService(self: *const T, dw_site_data_: u32, guid_service_: ?*const Guid, riid_: ?*const Guid, ppiunk_: ?*?*IUnknown) HRESULT {
                return @as(*const IHlinkSite.VTable, @ptrCast(self.vtable)).QueryService(@as(*const IHlinkSite, @ptrCast(self)), dw_site_data_, guid_service_, riid_, ppiunk_);
            }
            pub inline fn getMoniker(self: *const T, dw_site_data_: u32, dw_assign_: u32, dw_which_: u32, ppimk_: ?*?*IMoniker) HRESULT {
                return @as(*const IHlinkSite.VTable, @ptrCast(self.vtable)).GetMoniker(@as(*const IHlinkSite, @ptrCast(self)), dw_site_data_, dw_assign_, dw_which_, ppimk_);
            }
            pub inline fn readyToNavigate(self: *const T, dw_site_data_: u32, dw_reserved_: u32) HRESULT {
                return @as(*const IHlinkSite.VTable, @ptrCast(self.vtable)).ReadyToNavigate(@as(*const IHlinkSite, @ptrCast(self)), dw_site_data_, dw_reserved_);
            }
            pub inline fn onNavigationComplete(self: *const T, dw_site_data_: u32, dwreserved_: u32, hr_error_: HRESULT, pwz_error_: ?[*:0]const u16) HRESULT {
                return @as(*const IHlinkSite.VTable, @ptrCast(self.vtable)).OnNavigationComplete(@as(*const IHlinkSite, @ptrCast(self)), dw_site_data_, dwreserved_, hr_error_, pwz_error_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IHlinkTarget_Value = Guid.initString("79eac9c4-baf9-11ce-8c82-00aa004ba90b");
pub const IID_IHlinkTarget = &IID_IHlinkTarget_Value;
pub const IHlinkTarget = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetBrowseContext: *const fn (
            self: *const IHlinkTarget,
            pihlbc: ?*IHlinkBrowseContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBrowseContext: *const fn (
            self: *const IHlinkTarget,
            ppihlbc: ?*?*IHlinkBrowseContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Navigate: *const fn (
            self: *const IHlinkTarget,
            grf_h_l_n_f: u32,
            pwz_jump_location: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMoniker: *const fn (
            self: *const IHlinkTarget,
            pwz_location: ?[*:0]const u16,
            dw_assign: u32,
            ppimk_location: ?*?*IMoniker,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFriendlyName: *const fn (
            self: *const IHlinkTarget,
            pwz_location: ?[*:0]const u16,
            ppwz_friendly_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setBrowseContext(self: *const T, pihlbc_: ?*IHlinkBrowseContext) HRESULT {
                return @as(*const IHlinkTarget.VTable, @ptrCast(self.vtable)).SetBrowseContext(@as(*const IHlinkTarget, @ptrCast(self)), pihlbc_);
            }
            pub inline fn getBrowseContext(self: *const T, ppihlbc_: ?*?*IHlinkBrowseContext) HRESULT {
                return @as(*const IHlinkTarget.VTable, @ptrCast(self.vtable)).GetBrowseContext(@as(*const IHlinkTarget, @ptrCast(self)), ppihlbc_);
            }
            pub inline fn navigate(self: *const T, grf_h_l_n_f_: u32, pwz_jump_location_: ?[*:0]const u16) HRESULT {
                return @as(*const IHlinkTarget.VTable, @ptrCast(self.vtable)).Navigate(@as(*const IHlinkTarget, @ptrCast(self)), grf_h_l_n_f_, pwz_jump_location_);
            }
            pub inline fn getMoniker(self: *const T, pwz_location_: ?[*:0]const u16, dw_assign_: u32, ppimk_location_: ?*?*IMoniker) HRESULT {
                return @as(*const IHlinkTarget.VTable, @ptrCast(self.vtable)).GetMoniker(@as(*const IHlinkTarget, @ptrCast(self)), pwz_location_, dw_assign_, ppimk_location_);
            }
            pub inline fn getFriendlyName(self: *const T, pwz_location_: ?[*:0]const u16, ppwz_friendly_name_: ?*?PWSTR) HRESULT {
                return @as(*const IHlinkTarget.VTable, @ptrCast(self.vtable)).GetFriendlyName(@as(*const IHlinkTarget, @ptrCast(self)), pwz_location_, ppwz_friendly_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IHlinkFrame_Value = Guid.initString("79eac9c5-baf9-11ce-8c82-00aa004ba90b");
pub const IID_IHlinkFrame = &IID_IHlinkFrame_Value;
pub const IHlinkFrame = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetBrowseContext: *const fn (
            self: *const IHlinkFrame,
            pihlbc: ?*IHlinkBrowseContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBrowseContext: *const fn (
            self: *const IHlinkFrame,
            ppihlbc: ?*?*IHlinkBrowseContext,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Navigate: *const fn (
            self: *const IHlinkFrame,
            grf_h_l_n_f: u32,
            pbc: ?*IBindCtx,
            pibsc: ?*IBindStatusCallback,
            pihl_navigate: ?*IHlink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNavigate: *const fn (
            self: *const IHlinkFrame,
            grf_h_l_n_f: u32,
            pimk_target: ?*IMoniker,
            pwz_location: ?[*:0]const u16,
            pwz_friendly_name: ?[*:0]const u16,
            dwreserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateHlink: *const fn (
            self: *const IHlinkFrame,
            u_h_l_i_d: u32,
            pimk_target: ?*IMoniker,
            pwz_location: ?[*:0]const u16,
            pwz_friendly_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setBrowseContext(self: *const T, pihlbc_: ?*IHlinkBrowseContext) HRESULT {
                return @as(*const IHlinkFrame.VTable, @ptrCast(self.vtable)).SetBrowseContext(@as(*const IHlinkFrame, @ptrCast(self)), pihlbc_);
            }
            pub inline fn getBrowseContext(self: *const T, ppihlbc_: ?*?*IHlinkBrowseContext) HRESULT {
                return @as(*const IHlinkFrame.VTable, @ptrCast(self.vtable)).GetBrowseContext(@as(*const IHlinkFrame, @ptrCast(self)), ppihlbc_);
            }
            pub inline fn navigate(self: *const T, grf_h_l_n_f_: u32, pbc_: ?*IBindCtx, pibsc_: ?*IBindStatusCallback, pihl_navigate_: ?*IHlink) HRESULT {
                return @as(*const IHlinkFrame.VTable, @ptrCast(self.vtable)).Navigate(@as(*const IHlinkFrame, @ptrCast(self)), grf_h_l_n_f_, pbc_, pibsc_, pihl_navigate_);
            }
            pub inline fn onNavigate(self: *const T, grf_h_l_n_f_: u32, pimk_target_: ?*IMoniker, pwz_location_: ?[*:0]const u16, pwz_friendly_name_: ?[*:0]const u16, dwreserved_: u32) HRESULT {
                return @as(*const IHlinkFrame.VTable, @ptrCast(self.vtable)).OnNavigate(@as(*const IHlinkFrame, @ptrCast(self)), grf_h_l_n_f_, pimk_target_, pwz_location_, pwz_friendly_name_, dwreserved_);
            }
            pub inline fn updateHlink(self: *const T, u_h_l_i_d_: u32, pimk_target_: ?*IMoniker, pwz_location_: ?[*:0]const u16, pwz_friendly_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IHlinkFrame.VTable, @ptrCast(self.vtable)).UpdateHlink(@as(*const IHlinkFrame, @ptrCast(self)), u_h_l_i_d_, pimk_target_, pwz_location_, pwz_friendly_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const HLITEM = extern struct {
    uHLID: u32,
    pwzFriendlyName: ?PWSTR,
};

const IID_IEnumHLITEM_Value = Guid.initString("79eac9c6-baf9-11ce-8c82-00aa004ba90b");
pub const IID_IEnumHLITEM = &IID_IEnumHLITEM_Value;
pub const IEnumHLITEM = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumHLITEM,
            celt: u32,
            rgelt: ?*HLITEM,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumHLITEM,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumHLITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumHLITEM,
            ppienumhlitem: ?*?*IEnumHLITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: ?*HLITEM, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumHLITEM.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumHLITEM, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumHLITEM.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumHLITEM, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumHLITEM.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumHLITEM, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppienumhlitem_: ?*?*IEnumHLITEM) HRESULT {
                return @as(*const IEnumHLITEM.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumHLITEM, @ptrCast(self)), ppienumhlitem_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const HLTB_INFO = enum(i32) {
    DOCKEDLEFT = 0,
    DOCKEDTOP = 1,
    DOCKEDRIGHT = 2,
    DOCKEDBOTTOM = 3,
    FLOATING = 4,
};
pub const HLTB_DOCKEDLEFT = HLTB_INFO.DOCKEDLEFT;
pub const HLTB_DOCKEDTOP = HLTB_INFO.DOCKEDTOP;
pub const HLTB_DOCKEDRIGHT = HLTB_INFO.DOCKEDRIGHT;
pub const HLTB_DOCKEDBOTTOM = HLTB_INFO.DOCKEDBOTTOM;
pub const HLTB_FLOATING = HLTB_INFO.FLOATING;

pub const HLTBINFO = extern struct {
    uDockType: u32,
    rcTbPos: RECT,
};

pub const HLBWIF_FLAGS = enum(u32) {
    HASFRAMEWNDINFO = 1,
    HASDOCWNDINFO = 2,
    FRAMEWNDMAXIMIZED = 4,
    DOCWNDMAXIMIZED = 8,
    HASWEBTOOLBARINFO = 16,
    WEBTOOLBARHIDDEN = 32,
    _,
    pub fn initFlags(o: struct {
        HASFRAMEWNDINFO: u1 = 0,
        HASDOCWNDINFO: u1 = 0,
        FRAMEWNDMAXIMIZED: u1 = 0,
        DOCWNDMAXIMIZED: u1 = 0,
        HASWEBTOOLBARINFO: u1 = 0,
        WEBTOOLBARHIDDEN: u1 = 0,
    }) HLBWIF_FLAGS {
        return @as(HLBWIF_FLAGS, @enumFromInt((if (o.HASFRAMEWNDINFO == 1) @intFromEnum(HLBWIF_FLAGS.HASFRAMEWNDINFO) else 0) | (if (o.HASDOCWNDINFO == 1) @intFromEnum(HLBWIF_FLAGS.HASDOCWNDINFO) else 0) | (if (o.FRAMEWNDMAXIMIZED == 1) @intFromEnum(HLBWIF_FLAGS.FRAMEWNDMAXIMIZED) else 0) | (if (o.DOCWNDMAXIMIZED == 1) @intFromEnum(HLBWIF_FLAGS.DOCWNDMAXIMIZED) else 0) | (if (o.HASWEBTOOLBARINFO == 1) @intFromEnum(HLBWIF_FLAGS.HASWEBTOOLBARINFO) else 0) | (if (o.WEBTOOLBARHIDDEN == 1) @intFromEnum(HLBWIF_FLAGS.WEBTOOLBARHIDDEN) else 0)));
    }
};
pub const HLBWIF_HASFRAMEWNDINFO = HLBWIF_FLAGS.HASFRAMEWNDINFO;
pub const HLBWIF_HASDOCWNDINFO = HLBWIF_FLAGS.HASDOCWNDINFO;
pub const HLBWIF_FRAMEWNDMAXIMIZED = HLBWIF_FLAGS.FRAMEWNDMAXIMIZED;
pub const HLBWIF_DOCWNDMAXIMIZED = HLBWIF_FLAGS.DOCWNDMAXIMIZED;
pub const HLBWIF_HASWEBTOOLBARINFO = HLBWIF_FLAGS.HASWEBTOOLBARINFO;
pub const HLBWIF_WEBTOOLBARHIDDEN = HLBWIF_FLAGS.WEBTOOLBARHIDDEN;

pub const HLBWINFO = extern struct {
    cbSize: u32,
    grfHLBWIF: u32,
    rcFramePos: RECT,
    rcDocPos: RECT,
    hltbinfo: HLTBINFO,
};

pub const HLID_INFO = enum(u32) {
    INVALID = 0,
    PREVIOUS = 4294967295,
    NEXT = 4294967294,
    CURRENT = 4294967293,
    STACKBOTTOM = 4294967292,
    STACKTOP = 4294967291,
};
pub const HLID_INVALID = HLID_INFO.INVALID;
pub const HLID_PREVIOUS = HLID_INFO.PREVIOUS;
pub const HLID_NEXT = HLID_INFO.NEXT;
pub const HLID_CURRENT = HLID_INFO.CURRENT;
pub const HLID_STACKBOTTOM = HLID_INFO.STACKBOTTOM;
pub const HLID_STACKTOP = HLID_INFO.STACKTOP;

pub const HLQF_INFO = enum(i32) {
    VALID = 1,
    CURRENT = 2,
};
pub const HLQF_ISVALID = HLQF_INFO.VALID;
pub const HLQF_ISCURRENT = HLQF_INFO.CURRENT;

const IID_IHlinkBrowseContext_Value = Guid.initString("79eac9c7-baf9-11ce-8c82-00aa004ba90b");
pub const IID_IHlinkBrowseContext = &IID_IHlinkBrowseContext_Value;
pub const IHlinkBrowseContext = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Register: *const fn (
            self: *const IHlinkBrowseContext,
            reserved: u32,
            piunk: ?*IUnknown,
            pimk: ?*IMoniker,
            pdw_register: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetObject: *const fn (
            self: *const IHlinkBrowseContext,
            pimk: ?*IMoniker,
            f_bind_if_root_registered: BOOL,
            ppiunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Revoke: *const fn (
            self: *const IHlinkBrowseContext,
            dw_register: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBrowseWindowInfo: *const fn (
            self: *const IHlinkBrowseContext,
            phlbwi: ?*HLBWINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBrowseWindowInfo: *const fn (
            self: *const IHlinkBrowseContext,
            phlbwi: ?*HLBWINFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetInitialHlink: *const fn (
            self: *const IHlinkBrowseContext,
            pimk_target: ?*IMoniker,
            pwz_location: ?[*:0]const u16,
            pwz_friendly_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNavigateHlink: *const fn (
            self: *const IHlinkBrowseContext,
            grf_h_l_n_f: u32,
            pimk_target: ?*IMoniker,
            pwz_location: ?[*:0]const u16,
            pwz_friendly_name: ?[*:0]const u16,
            pu_h_l_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateHlink: *const fn (
            self: *const IHlinkBrowseContext,
            u_h_l_i_d: u32,
            pimk_target: ?*IMoniker,
            pwz_location: ?[*:0]const u16,
            pwz_friendly_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumNavigationStack: *const fn (
            self: *const IHlinkBrowseContext,
            dw_reserved: u32,
            grf_h_l_f_n_a_m_e_f: u32,
            ppienumhlitem: ?*?*IEnumHLITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryHlink: *const fn (
            self: *const IHlinkBrowseContext,
            grf_h_l_q_f: u32,
            u_h_l_i_d: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHlink: *const fn (
            self: *const IHlinkBrowseContext,
            u_h_l_i_d: u32,
            ppihl: ?*?*IHlink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCurrentHlink: *const fn (
            self: *const IHlinkBrowseContext,
            u_h_l_i_d: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IHlinkBrowseContext,
            piunk_outer: ?*IUnknown,
            riid: ?*const Guid,
            ppiunk_obj: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IHlinkBrowseContext,
            reserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn register(self: *const T, reserved_: u32, piunk_: ?*IUnknown, pimk_: ?*IMoniker, pdw_register_: ?*u32) HRESULT {
                return @as(*const IHlinkBrowseContext.VTable, @ptrCast(self.vtable)).Register(@as(*const IHlinkBrowseContext, @ptrCast(self)), reserved_, piunk_, pimk_, pdw_register_);
            }
            pub inline fn getObject(self: *const T, pimk_: ?*IMoniker, f_bind_if_root_registered_: BOOL, ppiunk_: ?*?*IUnknown) HRESULT {
                return @as(*const IHlinkBrowseContext.VTable, @ptrCast(self.vtable)).GetObject(@as(*const IHlinkBrowseContext, @ptrCast(self)), pimk_, f_bind_if_root_registered_, ppiunk_);
            }
            pub inline fn revoke(self: *const T, dw_register_: u32) HRESULT {
                return @as(*const IHlinkBrowseContext.VTable, @ptrCast(self.vtable)).Revoke(@as(*const IHlinkBrowseContext, @ptrCast(self)), dw_register_);
            }
            pub inline fn setBrowseWindowInfo(self: *const T, phlbwi_: ?*HLBWINFO) HRESULT {
                return @as(*const IHlinkBrowseContext.VTable, @ptrCast(self.vtable)).SetBrowseWindowInfo(@as(*const IHlinkBrowseContext, @ptrCast(self)), phlbwi_);
            }
            pub inline fn getBrowseWindowInfo(self: *const T, phlbwi_: ?*HLBWINFO) HRESULT {
                return @as(*const IHlinkBrowseContext.VTable, @ptrCast(self.vtable)).GetBrowseWindowInfo(@as(*const IHlinkBrowseContext, @ptrCast(self)), phlbwi_);
            }
            pub inline fn setInitialHlink(self: *const T, pimk_target_: ?*IMoniker, pwz_location_: ?[*:0]const u16, pwz_friendly_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IHlinkBrowseContext.VTable, @ptrCast(self.vtable)).SetInitialHlink(@as(*const IHlinkBrowseContext, @ptrCast(self)), pimk_target_, pwz_location_, pwz_friendly_name_);
            }
            pub inline fn onNavigateHlink(self: *const T, grf_h_l_n_f_: u32, pimk_target_: ?*IMoniker, pwz_location_: ?[*:0]const u16, pwz_friendly_name_: ?[*:0]const u16, pu_h_l_i_d_: ?*u32) HRESULT {
                return @as(*const IHlinkBrowseContext.VTable, @ptrCast(self.vtable)).OnNavigateHlink(@as(*const IHlinkBrowseContext, @ptrCast(self)), grf_h_l_n_f_, pimk_target_, pwz_location_, pwz_friendly_name_, pu_h_l_i_d_);
            }
            pub inline fn updateHlink(self: *const T, u_h_l_i_d_: u32, pimk_target_: ?*IMoniker, pwz_location_: ?[*:0]const u16, pwz_friendly_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IHlinkBrowseContext.VTable, @ptrCast(self.vtable)).UpdateHlink(@as(*const IHlinkBrowseContext, @ptrCast(self)), u_h_l_i_d_, pimk_target_, pwz_location_, pwz_friendly_name_);
            }
            pub inline fn enumNavigationStack(self: *const T, dw_reserved_: u32, grf_h_l_f_n_a_m_e_f_: u32, ppienumhlitem_: ?*?*IEnumHLITEM) HRESULT {
                return @as(*const IHlinkBrowseContext.VTable, @ptrCast(self.vtable)).EnumNavigationStack(@as(*const IHlinkBrowseContext, @ptrCast(self)), dw_reserved_, grf_h_l_f_n_a_m_e_f_, ppienumhlitem_);
            }
            pub inline fn queryHlink(self: *const T, grf_h_l_q_f_: u32, u_h_l_i_d_: u32) HRESULT {
                return @as(*const IHlinkBrowseContext.VTable, @ptrCast(self.vtable)).QueryHlink(@as(*const IHlinkBrowseContext, @ptrCast(self)), grf_h_l_q_f_, u_h_l_i_d_);
            }
            pub inline fn getHlink(self: *const T, u_h_l_i_d_: u32, ppihl_: ?*?*IHlink) HRESULT {
                return @as(*const IHlinkBrowseContext.VTable, @ptrCast(self.vtable)).GetHlink(@as(*const IHlinkBrowseContext, @ptrCast(self)), u_h_l_i_d_, ppihl_);
            }
            pub inline fn setCurrentHlink(self: *const T, u_h_l_i_d_: u32) HRESULT {
                return @as(*const IHlinkBrowseContext.VTable, @ptrCast(self.vtable)).SetCurrentHlink(@as(*const IHlinkBrowseContext, @ptrCast(self)), u_h_l_i_d_);
            }
            pub inline fn clone(self: *const T, piunk_outer_: ?*IUnknown, riid_: ?*const Guid, ppiunk_obj_: ?*?*IUnknown) HRESULT {
                return @as(*const IHlinkBrowseContext.VTable, @ptrCast(self.vtable)).Clone(@as(*const IHlinkBrowseContext, @ptrCast(self)), piunk_outer_, riid_, ppiunk_obj_);
            }
            pub inline fn close(self: *const T, reserved_: u32) HRESULT {
                return @as(*const IHlinkBrowseContext.VTable, @ptrCast(self.vtable)).Close(@as(*const IHlinkBrowseContext, @ptrCast(self)), reserved_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IExtensionServices_Value = Guid.initString("79eac9cb-baf9-11ce-8c82-00aa004ba90b");
pub const IID_IExtensionServices = &IID_IExtensionServices_Value;
pub const IExtensionServices = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetAdditionalHeaders: *const fn (
            self: *const IExtensionServices,
            pwz_additional_headers: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAuthenticateData: *const fn (
            self: *const IExtensionServices,
            phwnd: ?HWND,
            pwz_username: ?[*:0]const u16,
            pwz_password: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setAdditionalHeaders(self: *const T, pwz_additional_headers_: ?[*:0]const u16) HRESULT {
                return @as(*const IExtensionServices.VTable, @ptrCast(self.vtable)).SetAdditionalHeaders(@as(*const IExtensionServices, @ptrCast(self)), pwz_additional_headers_);
            }
            pub inline fn setAuthenticateData(self: *const T, phwnd_: ?HWND, pwz_username_: ?[*:0]const u16, pwz_password_: ?[*:0]const u16) HRESULT {
                return @as(*const IExtensionServices.VTable, @ptrCast(self.vtable)).SetAuthenticateData(@as(*const IExtensionServices, @ptrCast(self)), phwnd_, pwz_username_, pwz_password_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITravelEntry_Value = Guid.initString("f46edb3b-bc2f-11d0-9412-00aa00a3ebd3");
pub const IID_ITravelEntry = &IID_ITravelEntry_Value;
pub const ITravelEntry = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Invoke: *const fn (
            self: *const ITravelEntry,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Update: *const fn (
            self: *const ITravelEntry,
            punk: ?*IUnknown,
            f_is_local_anchor: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPidl: *const fn (
            self: *const ITravelEntry,
            ppidl: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn invoke(self: *const T, punk_: ?*IUnknown) HRESULT {
                return @as(*const ITravelEntry.VTable, @ptrCast(self.vtable)).Invoke(@as(*const ITravelEntry, @ptrCast(self)), punk_);
            }
            pub inline fn update(self: *const T, punk_: ?*IUnknown, f_is_local_anchor_: BOOL) HRESULT {
                return @as(*const ITravelEntry.VTable, @ptrCast(self.vtable)).Update(@as(*const ITravelEntry, @ptrCast(self)), punk_, f_is_local_anchor_);
            }
            pub inline fn getPidl(self: *const T, ppidl_: ?*?*ITEMIDLIST) HRESULT {
                return @as(*const ITravelEntry.VTable, @ptrCast(self.vtable)).GetPidl(@as(*const ITravelEntry, @ptrCast(self)), ppidl_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITravelLog_Value = Guid.initString("66a9cb08-4802-11d2-a561-00a0c92dbfe8");
pub const IID_ITravelLog = &IID_ITravelLog_Value;
pub const ITravelLog = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddEntry: *const fn (
            self: *const ITravelLog,
            punk: ?*IUnknown,
            f_is_local_anchor: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateEntry: *const fn (
            self: *const ITravelLog,
            punk: ?*IUnknown,
            f_is_local_anchor: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateExternal: *const fn (
            self: *const ITravelLog,
            punk: ?*IUnknown,
            punk_h_l_browse_context: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Travel: *const fn (
            self: *const ITravelLog,
            punk: ?*IUnknown,
            i_offset: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTravelEntry: *const fn (
            self: *const ITravelLog,
            punk: ?*IUnknown,
            i_offset: i32,
            ppte: ?*?*ITravelEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindTravelEntry: *const fn (
            self: *const ITravelLog,
            punk: ?*IUnknown,
            pidl: ?*ITEMIDLIST,
            ppte: ?*?*ITravelEntry,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetToolTipText: *const fn (
            self: *const ITravelLog,
            punk: ?*IUnknown,
            i_offset: i32,
            ids_template: i32,
            pwz_text: [*:0]u16,
            cch_text: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertMenuEntries: *const fn (
            self: *const ITravelLog,
            punk: ?*IUnknown,
            hmenu: ?HMENU,
            n_pos: i32,
            id_first: i32,
            id_last: i32,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const ITravelLog,
            pptl: ?*?*ITravelLog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CountEntries: *const fn (
            self: *const ITravelLog,
            punk: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        Revert: *const fn (
            self: *const ITravelLog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addEntry(self: *const T, punk_: ?*IUnknown, f_is_local_anchor_: BOOL) HRESULT {
                return @as(*const ITravelLog.VTable, @ptrCast(self.vtable)).AddEntry(@as(*const ITravelLog, @ptrCast(self)), punk_, f_is_local_anchor_);
            }
            pub inline fn updateEntry(self: *const T, punk_: ?*IUnknown, f_is_local_anchor_: BOOL) HRESULT {
                return @as(*const ITravelLog.VTable, @ptrCast(self.vtable)).UpdateEntry(@as(*const ITravelLog, @ptrCast(self)), punk_, f_is_local_anchor_);
            }
            pub inline fn updateExternal(self: *const T, punk_: ?*IUnknown, punk_h_l_browse_context_: ?*IUnknown) HRESULT {
                return @as(*const ITravelLog.VTable, @ptrCast(self.vtable)).UpdateExternal(@as(*const ITravelLog, @ptrCast(self)), punk_, punk_h_l_browse_context_);
            }
            pub inline fn travel(self: *const T, punk_: ?*IUnknown, i_offset_: i32) HRESULT {
                return @as(*const ITravelLog.VTable, @ptrCast(self.vtable)).Travel(@as(*const ITravelLog, @ptrCast(self)), punk_, i_offset_);
            }
            pub inline fn getTravelEntry(self: *const T, punk_: ?*IUnknown, i_offset_: i32, ppte_: ?*?*ITravelEntry) HRESULT {
                return @as(*const ITravelLog.VTable, @ptrCast(self.vtable)).GetTravelEntry(@as(*const ITravelLog, @ptrCast(self)), punk_, i_offset_, ppte_);
            }
            pub inline fn findTravelEntry(self: *const T, punk_: ?*IUnknown, pidl_: ?*ITEMIDLIST, ppte_: ?*?*ITravelEntry) HRESULT {
                return @as(*const ITravelLog.VTable, @ptrCast(self.vtable)).FindTravelEntry(@as(*const ITravelLog, @ptrCast(self)), punk_, pidl_, ppte_);
            }
            pub inline fn getToolTipText(self: *const T, punk_: ?*IUnknown, i_offset_: i32, ids_template_: i32, pwz_text_: [*:0]u16, cch_text_: u32) HRESULT {
                return @as(*const ITravelLog.VTable, @ptrCast(self.vtable)).GetToolTipText(@as(*const ITravelLog, @ptrCast(self)), punk_, i_offset_, ids_template_, pwz_text_, cch_text_);
            }
            pub inline fn insertMenuEntries(self: *const T, punk_: ?*IUnknown, hmenu_: ?HMENU, n_pos_: i32, id_first_: i32, id_last_: i32, dw_flags_: u32) HRESULT {
                return @as(*const ITravelLog.VTable, @ptrCast(self.vtable)).InsertMenuEntries(@as(*const ITravelLog, @ptrCast(self)), punk_, hmenu_, n_pos_, id_first_, id_last_, dw_flags_);
            }
            pub inline fn clone(self: *const T, pptl_: ?*?*ITravelLog) HRESULT {
                return @as(*const ITravelLog.VTable, @ptrCast(self.vtable)).Clone(@as(*const ITravelLog, @ptrCast(self)), pptl_);
            }
            pub inline fn countEntries(self: *const T, punk_: ?*IUnknown) u32 {
                return @as(*const ITravelLog.VTable, @ptrCast(self.vtable)).CountEntries(@as(*const ITravelLog, @ptrCast(self)), punk_);
            }
            pub inline fn revert(self: *const T) HRESULT {
                return @as(*const ITravelLog.VTable, @ptrCast(self.vtable)).Revert(@as(*const ITravelLog, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CIE4ConnectionPoint = extern struct {
    pub const VTable = extern struct {
        base: IConnectionPoint.VTable,
        DoInvokeIE4: *const fn (
            self: *const CIE4ConnectionPoint,
            pf: ?*BOOL,
            ppv: ?*?*anyopaque,
            dispid: i32,
            pdispparams: ?*DISPPARAMS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoInvokePIDLIE4: *const fn (
            self: *const CIE4ConnectionPoint,
            dispid: i32,
            pidl: ?*ITEMIDLIST,
            f_can_cancel: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IConnectionPoint.MethodMixin(T);
            pub inline fn doInvokeIE4(self: *const T, pf_: ?*BOOL, ppv_: ?*?*anyopaque, dispid_: i32, pdispparams_: ?*DISPPARAMS) HRESULT {
                return @as(*const CIE4ConnectionPoint.VTable, @ptrCast(self.vtable)).DoInvokeIE4(@as(*const CIE4ConnectionPoint, @ptrCast(self)), pf_, ppv_, dispid_, pdispparams_);
            }
            pub inline fn doInvokePIDLIE4(self: *const T, dispid_: i32, pidl_: ?*ITEMIDLIST, f_can_cancel_: BOOL) HRESULT {
                return @as(*const CIE4ConnectionPoint.VTable, @ptrCast(self.vtable)).DoInvokePIDLIE4(@as(*const CIE4ConnectionPoint, @ptrCast(self)), dispid_, pidl_, f_can_cancel_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IExpDispSupportXP_Value = Guid.initString("2f0dd58c-f789-4f14-99fb-9293b3c9c212");
pub const IID_IExpDispSupportXP = &IID_IExpDispSupportXP_Value;
pub const IExpDispSupportXP = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindCIE4ConnectionPoint: *const fn (
            self: *const IExpDispSupportXP,
            riid: ?*const Guid,
            ppccp: ?*?*CIE4ConnectionPoint,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTranslateAccelerator: *const fn (
            self: *const IExpDispSupportXP,
            p_msg: ?*MSG,
            grf_modifiers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnInvoke: *const fn (
            self: *const IExpDispSupportXP,
            dispid_member: i32,
            iid: ?*const Guid,
            lcid: u32,
            w_flags: u16,
            pdispparams: ?*DISPPARAMS,
            p_var_result: ?*VARIANT,
            pexcepinfo: ?*EXCEPINFO,
            pu_arg_err: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn findCIE4ConnectionPoint(self: *const T, riid_: ?*const Guid, ppccp_: ?*?*CIE4ConnectionPoint) HRESULT {
                return @as(*const IExpDispSupportXP.VTable, @ptrCast(self.vtable)).FindCIE4ConnectionPoint(@as(*const IExpDispSupportXP, @ptrCast(self)), riid_, ppccp_);
            }
            pub inline fn onTranslateAccelerator(self: *const T, p_msg_: ?*MSG, grf_modifiers_: u32) HRESULT {
                return @as(*const IExpDispSupportXP.VTable, @ptrCast(self.vtable)).OnTranslateAccelerator(@as(*const IExpDispSupportXP, @ptrCast(self)), p_msg_, grf_modifiers_);
            }
            pub inline fn onInvoke(self: *const T, dispid_member_: i32, iid_: ?*const Guid, lcid_: u32, w_flags_: u16, pdispparams_: ?*DISPPARAMS, p_var_result_: ?*VARIANT, pexcepinfo_: ?*EXCEPINFO, pu_arg_err_: ?*u32) HRESULT {
                return @as(*const IExpDispSupportXP.VTable, @ptrCast(self.vtable)).OnInvoke(@as(*const IExpDispSupportXP, @ptrCast(self)), dispid_member_, iid_, lcid_, w_flags_, pdispparams_, p_var_result_, pexcepinfo_, pu_arg_err_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IExpDispSupport_Value = Guid.initString("0d7d1d00-6fc0-11d0-a974-00c04fd705a2");
pub const IID_IExpDispSupport = &IID_IExpDispSupport_Value;
pub const IExpDispSupport = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindConnectionPoint: *const fn (
            self: *const IExpDispSupport,
            riid: ?*const Guid,
            ppccp: ?*?*IConnectionPoint,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTranslateAccelerator: *const fn (
            self: *const IExpDispSupport,
            p_msg: ?*MSG,
            grf_modifiers: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnInvoke: *const fn (
            self: *const IExpDispSupport,
            dispid_member: i32,
            iid: ?*const Guid,
            lcid: u32,
            w_flags: u16,
            pdispparams: ?*DISPPARAMS,
            p_var_result: ?*VARIANT,
            pexcepinfo: ?*EXCEPINFO,
            pu_arg_err: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn findConnectionPoint(self: *const T, riid_: ?*const Guid, ppccp_: ?*?*IConnectionPoint) HRESULT {
                return @as(*const IExpDispSupport.VTable, @ptrCast(self.vtable)).FindConnectionPoint(@as(*const IExpDispSupport, @ptrCast(self)), riid_, ppccp_);
            }
            pub inline fn onTranslateAccelerator(self: *const T, p_msg_: ?*MSG, grf_modifiers_: u32) HRESULT {
                return @as(*const IExpDispSupport.VTable, @ptrCast(self.vtable)).OnTranslateAccelerator(@as(*const IExpDispSupport, @ptrCast(self)), p_msg_, grf_modifiers_);
            }
            pub inline fn onInvoke(self: *const T, dispid_member_: i32, iid_: ?*const Guid, lcid_: u32, w_flags_: u16, pdispparams_: ?*DISPPARAMS, p_var_result_: ?*VARIANT, pexcepinfo_: ?*EXCEPINFO, pu_arg_err_: ?*u32) HRESULT {
                return @as(*const IExpDispSupport.VTable, @ptrCast(self.vtable)).OnInvoke(@as(*const IExpDispSupport, @ptrCast(self)), dispid_member_, iid_, lcid_, w_flags_, pdispparams_, p_var_result_, pexcepinfo_, pu_arg_err_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const BNSTATE = enum(i32) {
    NORMAL = 0,
    BEGIN_NAVIGATE = 1,
    NAVIGATE = 2,
};
pub const BNS_NORMAL = BNSTATE.NORMAL;
pub const BNS_BEGIN_NAVIGATE = BNSTATE.BEGIN_NAVIGATE;
pub const BNS_NAVIGATE = BNSTATE.NAVIGATE;

pub const SHELLBROWSERSHOWCONTROL = enum(i32) {
    HIDE = 0,
    SHOW = 1,
    TOGGLE = 2,
    QUERY = 3,
};
pub const SBSC_HIDE = SHELLBROWSERSHOWCONTROL.HIDE;
pub const SBSC_SHOW = SHELLBROWSERSHOWCONTROL.SHOW;
pub const SBSC_TOGGLE = SHELLBROWSERSHOWCONTROL.TOGGLE;
pub const SBSC_QUERY = SHELLBROWSERSHOWCONTROL.QUERY;

const IID_IBrowserService_Value = Guid.initString("02ba3b52-0547-11d1-b833-00c04fc9b31f");
pub const IID_IBrowserService = &IID_IBrowserService_Value;
pub const IBrowserService = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetParentSite: *const fn (
            self: *const IBrowserService,
            ppipsite: ?*?*IOleInPlaceSite,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTitle: *const fn (
            self: *const IBrowserService,
            psv: ?*IShellView,
            psz_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTitle: *const fn (
            self: *const IBrowserService,
            psv: ?*IShellView,
            psz_name: [*:0]u16,
            cch_name: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetOleObject: *const fn (
            self: *const IBrowserService,
            ppobjv: ?*?*IOleObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTravelLog: *const fn (
            self: *const IBrowserService,
            pptl: ?*?*ITravelLog,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowControlWindow: *const fn (
            self: *const IBrowserService,
            id: u32,
            f_show: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsControlWindowShown: *const fn (
            self: *const IBrowserService,
            id: u32,
            pf_shown: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IEGetDisplayName: *const fn (
            self: *const IBrowserService,
            pidl: ?*ITEMIDLIST,
            pwsz_name: ?PWSTR,
            u_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IEParseDisplayName: *const fn (
            self: *const IBrowserService,
            ui_c_p: u32,
            pwsz_path: ?[*:0]const u16,
            ppidl_out: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisplayParseError: *const fn (
            self: *const IBrowserService,
            hres: HRESULT,
            pwsz_path: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NavigateToPidl: *const fn (
            self: *const IBrowserService,
            pidl: ?*ITEMIDLIST,
            grf_h_l_n_f: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetNavigateState: *const fn (
            self: *const IBrowserService,
            bnstate: BNSTATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNavigateState: *const fn (
            self: *const IBrowserService,
            pbnstate: ?*BNSTATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyRedirect: *const fn (
            self: *const IBrowserService,
            psv: ?*IShellView,
            pidl: ?*ITEMIDLIST,
            pf_did_browse: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateWindowList: *const fn (
            self: *const IBrowserService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateBackForwardState: *const fn (
            self: *const IBrowserService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFlags: *const fn (
            self: *const IBrowserService,
            dw_flags: u32,
            dw_flag_mask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn (
            self: *const IBrowserService,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CanNavigateNow: *const fn (
            self: *const IBrowserService,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPidl: *const fn (
            self: *const IBrowserService,
            ppidl: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReferrer: *const fn (
            self: *const IBrowserService,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBrowserIndex: *const fn (
            self: *const IBrowserService,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        GetBrowserByIndex: *const fn (
            self: *const IBrowserService,
            dw_i_d: u32,
            ppunk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetHistoryObject: *const fn (
            self: *const IBrowserService,
            ppole: ?*?*IOleObject,
            pstm: ?*?*IStream,
            ppbc: ?*?*IBindCtx,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetHistoryObject: *const fn (
            self: *const IBrowserService,
            pole: ?*IOleObject,
            f_is_local_anchor: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CacheOLEServer: *const fn (
            self: *const IBrowserService,
            pole: ?*IOleObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSetCodePage: *const fn (
            self: *const IBrowserService,
            pvar_in: ?*VARIANT,
            pvar_out: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnHttpEquiv: *const fn (
            self: *const IBrowserService,
            psv: ?*IShellView,
            f_done: BOOL,
            pvararg_in: ?*VARIANT,
            pvararg_out: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPalette: *const fn (
            self: *const IBrowserService,
            hpal: ?*?HPALETTE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterWindow: *const fn (
            self: *const IBrowserService,
            f_force_register: BOOL,
            swc: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getParentSite(self: *const T, ppipsite_: ?*?*IOleInPlaceSite) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).GetParentSite(@as(*const IBrowserService, @ptrCast(self)), ppipsite_);
            }
            pub inline fn setTitle(self: *const T, psv_: ?*IShellView, psz_name_: ?[*:0]const u16) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).SetTitle(@as(*const IBrowserService, @ptrCast(self)), psv_, psz_name_);
            }
            pub inline fn getTitle(self: *const T, psv_: ?*IShellView, psz_name_: [*:0]u16, cch_name_: u32) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).GetTitle(@as(*const IBrowserService, @ptrCast(self)), psv_, psz_name_, cch_name_);
            }
            pub inline fn getOleObject(self: *const T, ppobjv_: ?*?*IOleObject) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).GetOleObject(@as(*const IBrowserService, @ptrCast(self)), ppobjv_);
            }
            pub inline fn getTravelLog(self: *const T, pptl_: ?*?*ITravelLog) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).GetTravelLog(@as(*const IBrowserService, @ptrCast(self)), pptl_);
            }
            pub inline fn showControlWindow(self: *const T, id_: u32, f_show_: BOOL) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).ShowControlWindow(@as(*const IBrowserService, @ptrCast(self)), id_, f_show_);
            }
            pub inline fn isControlWindowShown(self: *const T, id_: u32, pf_shown_: ?*BOOL) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).IsControlWindowShown(@as(*const IBrowserService, @ptrCast(self)), id_, pf_shown_);
            }
            pub inline fn ieGetDisplayName(self: *const T, pidl_: ?*ITEMIDLIST, pwsz_name_: ?PWSTR, u_flags_: u32) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).IEGetDisplayName(@as(*const IBrowserService, @ptrCast(self)), pidl_, pwsz_name_, u_flags_);
            }
            pub inline fn ieParseDisplayName(self: *const T, ui_c_p_: u32, pwsz_path_: ?[*:0]const u16, ppidl_out_: ?*?*ITEMIDLIST) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).IEParseDisplayName(@as(*const IBrowserService, @ptrCast(self)), ui_c_p_, pwsz_path_, ppidl_out_);
            }
            pub inline fn displayParseError(self: *const T, hres_: HRESULT, pwsz_path_: ?[*:0]const u16) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).DisplayParseError(@as(*const IBrowserService, @ptrCast(self)), hres_, pwsz_path_);
            }
            pub inline fn navigateToPidl(self: *const T, pidl_: ?*ITEMIDLIST, grf_h_l_n_f_: u32) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).NavigateToPidl(@as(*const IBrowserService, @ptrCast(self)), pidl_, grf_h_l_n_f_);
            }
            pub inline fn setNavigateState(self: *const T, bnstate_: BNSTATE) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).SetNavigateState(@as(*const IBrowserService, @ptrCast(self)), bnstate_);
            }
            pub inline fn getNavigateState(self: *const T, pbnstate_: ?*BNSTATE) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).GetNavigateState(@as(*const IBrowserService, @ptrCast(self)), pbnstate_);
            }
            pub inline fn notifyRedirect(self: *const T, psv_: ?*IShellView, pidl_: ?*ITEMIDLIST, pf_did_browse_: ?*BOOL) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).NotifyRedirect(@as(*const IBrowserService, @ptrCast(self)), psv_, pidl_, pf_did_browse_);
            }
            pub inline fn updateWindowList(self: *const T) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).UpdateWindowList(@as(*const IBrowserService, @ptrCast(self)));
            }
            pub inline fn updateBackForwardState(self: *const T) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).UpdateBackForwardState(@as(*const IBrowserService, @ptrCast(self)));
            }
            pub inline fn setFlags(self: *const T, dw_flags_: u32, dw_flag_mask_: u32) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).SetFlags(@as(*const IBrowserService, @ptrCast(self)), dw_flags_, dw_flag_mask_);
            }
            pub inline fn getFlags(self: *const T, pdw_flags_: ?*u32) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).GetFlags(@as(*const IBrowserService, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn canNavigateNow(self: *const T) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).CanNavigateNow(@as(*const IBrowserService, @ptrCast(self)));
            }
            pub inline fn getPidl(self: *const T, ppidl_: ?*?*ITEMIDLIST) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).GetPidl(@as(*const IBrowserService, @ptrCast(self)), ppidl_);
            }
            pub inline fn setReferrer(self: *const T, pidl_: ?*ITEMIDLIST) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).SetReferrer(@as(*const IBrowserService, @ptrCast(self)), pidl_);
            }
            pub inline fn getBrowserIndex(self: *const T) u32 {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).GetBrowserIndex(@as(*const IBrowserService, @ptrCast(self)));
            }
            pub inline fn getBrowserByIndex(self: *const T, dw_i_d_: u32, ppunk_: ?*?*IUnknown) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).GetBrowserByIndex(@as(*const IBrowserService, @ptrCast(self)), dw_i_d_, ppunk_);
            }
            pub inline fn getHistoryObject(self: *const T, ppole_: ?*?*IOleObject, pstm_: ?*?*IStream, ppbc_: ?*?*IBindCtx) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).GetHistoryObject(@as(*const IBrowserService, @ptrCast(self)), ppole_, pstm_, ppbc_);
            }
            pub inline fn setHistoryObject(self: *const T, pole_: ?*IOleObject, f_is_local_anchor_: BOOL) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).SetHistoryObject(@as(*const IBrowserService, @ptrCast(self)), pole_, f_is_local_anchor_);
            }
            pub inline fn cacheOLEServer(self: *const T, pole_: ?*IOleObject) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).CacheOLEServer(@as(*const IBrowserService, @ptrCast(self)), pole_);
            }
            pub inline fn getSetCodePage(self: *const T, pvar_in_: ?*VARIANT, pvar_out_: ?*VARIANT) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).GetSetCodePage(@as(*const IBrowserService, @ptrCast(self)), pvar_in_, pvar_out_);
            }
            pub inline fn onHttpEquiv(self: *const T, psv_: ?*IShellView, f_done_: BOOL, pvararg_in_: ?*VARIANT, pvararg_out_: ?*VARIANT) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).OnHttpEquiv(@as(*const IBrowserService, @ptrCast(self)), psv_, f_done_, pvararg_in_, pvararg_out_);
            }
            pub inline fn getPalette(self: *const T, hpal_: ?*?HPALETTE) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).GetPalette(@as(*const IBrowserService, @ptrCast(self)), hpal_);
            }
            pub inline fn registerWindow(self: *const T, f_force_register_: BOOL, swc_: i32) HRESULT {
                return @as(*const IBrowserService.VTable, @ptrCast(self.vtable)).RegisterWindow(@as(*const IBrowserService, @ptrCast(self)), f_force_register_, swc_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IShellService_Value = Guid.initString("5836fb00-8187-11cf-a12b-00aa004ae837");
pub const IID_IShellService = &IID_IShellService_Value;
pub const IShellService = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetOwner: *const fn (
            self: *const IShellService,
            punk_owner: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setOwner(self: *const T, punk_owner_: ?*IUnknown) HRESULT {
                return @as(*const IShellService.VTable, @ptrCast(self.vtable)).SetOwner(@as(*const IShellService, @ptrCast(self)), punk_owner_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const SECURELOCKCODE = enum(i32) {
    NOCHANGE = -1,
    SET_UNSECURE = 0,
    SET_MIXED = 1,
    SET_SECUREUNKNOWNBIT = 2,
    SET_SECURE40BIT = 3,
    SET_SECURE56BIT = 4,
    SET_FORTEZZA = 5,
    SET_SECURE128BIT = 6,
    FIRSTSUGGEST = 7,
    // SUGGEST_UNSECURE = 7, this enum value conflicts with FIRSTSUGGEST
    SUGGEST_MIXED = 8,
    SUGGEST_SECUREUNKNOWNBIT = 9,
    SUGGEST_SECURE40BIT = 10,
    SUGGEST_SECURE56BIT = 11,
    SUGGEST_FORTEZZA = 12,
    SUGGEST_SECURE128BIT = 13,
};
pub const SECURELOCK_NOCHANGE = SECURELOCKCODE.NOCHANGE;
pub const SECURELOCK_SET_UNSECURE = SECURELOCKCODE.SET_UNSECURE;
pub const SECURELOCK_SET_MIXED = SECURELOCKCODE.SET_MIXED;
pub const SECURELOCK_SET_SECUREUNKNOWNBIT = SECURELOCKCODE.SET_SECUREUNKNOWNBIT;
pub const SECURELOCK_SET_SECURE40BIT = SECURELOCKCODE.SET_SECURE40BIT;
pub const SECURELOCK_SET_SECURE56BIT = SECURELOCKCODE.SET_SECURE56BIT;
pub const SECURELOCK_SET_FORTEZZA = SECURELOCKCODE.SET_FORTEZZA;
pub const SECURELOCK_SET_SECURE128BIT = SECURELOCKCODE.SET_SECURE128BIT;
pub const SECURELOCK_FIRSTSUGGEST = SECURELOCKCODE.FIRSTSUGGEST;
pub const SECURELOCK_SUGGEST_UNSECURE = SECURELOCKCODE.FIRSTSUGGEST;
pub const SECURELOCK_SUGGEST_MIXED = SECURELOCKCODE.SUGGEST_MIXED;
pub const SECURELOCK_SUGGEST_SECUREUNKNOWNBIT = SECURELOCKCODE.SUGGEST_SECUREUNKNOWNBIT;
pub const SECURELOCK_SUGGEST_SECURE40BIT = SECURELOCKCODE.SUGGEST_SECURE40BIT;
pub const SECURELOCK_SUGGEST_SECURE56BIT = SECURELOCKCODE.SUGGEST_SECURE56BIT;
pub const SECURELOCK_SUGGEST_FORTEZZA = SECURELOCKCODE.SUGGEST_FORTEZZA;
pub const SECURELOCK_SUGGEST_SECURE128BIT = SECURELOCKCODE.SUGGEST_SECURE128BIT;

pub const BASEBROWSERDATAXP = extern struct {
    _hwnd: ?HWND,
    _ptl: ?*ITravelLog,
    _phlf: ?*IHlinkFrame,
    _pautoWB2: ?*IWebBrowser2,
    _pautoEDS: ?*IExpDispSupportXP,
    _pautoSS: ?*IShellService,
    _eSecureLockIcon: i32,
    _bitfield: u32,
    _uActivateState: u32,
    _pidlViewState: ?*ITEMIDLIST,
    _pctView: ?*IOleCommandTarget,
    _pidlCur: ?*ITEMIDLIST,
    _psv: ?*IShellView,
    _psf: ?*IShellFolder,
    _hwndView: ?HWND,
    _pszTitleCur: ?PWSTR,
    _pidlPending: ?*ITEMIDLIST,
    _psvPending: ?*IShellView,
    _psfPending: ?*IShellFolder,
    _hwndViewPending: ?HWND,
    _pszTitlePending: ?PWSTR,
    _fIsViewMSHTML: BOOL,
    _fPrivacyImpacted: BOOL,
    _clsidView: Guid,
    _clsidViewPending: Guid,
    _hwndFrame: ?HWND,
};

pub const BASEBROWSERDATALH = extern struct {
    _hwnd: ?HWND,
    _ptl: ?*ITravelLog,
    _phlf: ?*IHlinkFrame,
    _pautoWB2: ?*IWebBrowser2,
    _pautoEDS: ?*IExpDispSupport,
    _pautoSS: ?*IShellService,
    _eSecureLockIcon: i32,
    _bitfield: u32,
    _uActivateState: u32,
    _pidlViewState: ?*ITEMIDLIST,
    _pctView: ?*IOleCommandTarget,
    _pidlCur: ?*ITEMIDLIST,
    _psv: ?*IShellView,
    _psf: ?*IShellFolder,
    _hwndView: ?HWND,
    _pszTitleCur: ?PWSTR,
    _pidlPending: ?*ITEMIDLIST,
    _psvPending: ?*IShellView,
    _psfPending: ?*IShellFolder,
    _hwndViewPending: ?HWND,
    _pszTitlePending: ?PWSTR,
    _fIsViewMSHTML: BOOL,
    _fPrivacyImpacted: BOOL,
    _clsidView: Guid,
    _clsidViewPending: Guid,
    _hwndFrame: ?HWND,
    _lPhishingFilterStatus: i32,
};

pub const FOLDERSETDATA = extern struct {
    _fs: FOLDERSETTINGS,
    _vidRestore: Guid,
    _dwViewPriority: u32,
};

pub const TOOLBARITEM = extern struct {
    ptbar: ?*IDockingWindow,
    rcBorderTool: RECT,
    pwszItem: ?PWSTR,
    fShow: BOOL,
    hMon: ?HMONITOR,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IBrowserService2_Value = Guid.initString("68bd21cc-438b-11d2-a560-00a0c92dbfe8");
pub const IID_IBrowserService2 = &IID_IBrowserService2_Value;
pub const IBrowserService2 = extern struct {
    pub const VTable = extern struct {
        base: IBrowserService.VTable,
        WndProcBS: *const fn (
            self: *const IBrowserService2,
            hwnd: ?HWND,
            u_msg: u32,
            w_param: WPARAM,
            l_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) LRESULT,
        SetAsDefFolderSettings: *const fn (
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewRect: *const fn (
            self: *const IBrowserService2,
            prc: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSize: *const fn (
            self: *const IBrowserService2,
            w_param: WPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCreate: *const fn (
            self: *const IBrowserService2,
            pcs: ?*CREATESTRUCTW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnCommand: *const fn (
            self: *const IBrowserService2,
            w_param: WPARAM,
            l_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) LRESULT,
        OnDestroy: *const fn (
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNotify: *const fn (
            self: *const IBrowserService2,
            pnm: ?*NMHDR,
        ) callconv(@import("std").os.windows.WINAPI) LRESULT,
        OnSetFocus: *const fn (
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnFrameWindowActivateBS: *const fn (
            self: *const IBrowserService2,
            f_active: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseShellView: *const fn (
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ActivatePendingView: *const fn (
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateViewWindow: *const fn (
            self: *const IBrowserService2,
            psv_new: ?*IShellView,
            psv_old: ?*IShellView,
            prc_view: ?*RECT,
            phwnd: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateBrowserPropSheetExt: *const fn (
            self: *const IBrowserService2,
            riid: ?*const Guid,
            ppv: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewWindow: *const fn (
            self: *const IBrowserService2,
            phwnd_view: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBaseBrowserData: *const fn (
            self: *const IBrowserService2,
            pbbd: ?*?*BASEBROWSERDATALH,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutBaseBrowserData: *const fn (
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) ?*BASEBROWSERDATALH,
        InitializeTravelLog: *const fn (
            self: *const IBrowserService2,
            ptl: ?*ITravelLog,
            dw: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTopBrowser: *const fn (
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Offline: *const fn (
            self: *const IBrowserService2,
            i_cmd: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AllowViewResize: *const fn (
            self: *const IBrowserService2,
            f: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetActivateState: *const fn (
            self: *const IBrowserService2,
            u: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateSecureLockIcon: *const fn (
            self: *const IBrowserService2,
            e_secure_lock: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeDownloadManager: *const fn (
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeTransitionSite: *const fn (
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _Initialize: *const fn (
            self: *const IBrowserService2,
            hwnd: ?HWND,
            pauto: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _CancelPendingNavigationAsync: *const fn (
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _CancelPendingView: *const fn (
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _MaySaveChanges: *const fn (
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _PauseOrResumeView: *const fn (
            self: *const IBrowserService2,
            f_paused: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _DisableModeless: *const fn (
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _NavigateToPidl2: *const fn (
            self: *const IBrowserService2,
            pidl: ?*ITEMIDLIST,
            grf_h_l_n_f: u32,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _TryShell2Rename: *const fn (
            self: *const IBrowserService2,
            psv: ?*IShellView,
            pidl_new: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _SwitchActivationNow: *const fn (
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _ExecChildren: *const fn (
            self: *const IBrowserService2,
            punk_bar: ?*IUnknown,
            f_broadcast: BOOL,
            pguid_cmd_group: ?*const Guid,
            n_cmd_i_d: u32,
            n_cmdexecopt: u32,
            pvararg_in: ?*VARIANT,
            pvararg_out: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _SendChildren: *const fn (
            self: *const IBrowserService2,
            hwnd_bar: ?HWND,
            f_broadcast: BOOL,
            u_msg: u32,
            w_param: WPARAM,
            l_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolderSetData: *const fn (
            self: *const IBrowserService2,
            pfsd: ?*FOLDERSETDATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _OnFocusChange: *const fn (
            self: *const IBrowserService2,
            itb: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        v_ShowHideChildWindows: *const fn (
            self: *const IBrowserService2,
            f_child_only: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _get_itbLastFocus: *const fn (
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        _put_itbLastFocus: *const fn (
            self: *const IBrowserService2,
            itb_last_focus: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _UIActivateView: *const fn (
            self: *const IBrowserService2,
            u_state: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _GetViewBorderRect: *const fn (
            self: *const IBrowserService2,
            prc: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _UpdateViewRectSize: *const fn (
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _ResizeNextBorder: *const fn (
            self: *const IBrowserService2,
            itb: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _ResizeView: *const fn (
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _GetEffectiveClientArea: *const fn (
            self: *const IBrowserService2,
            lprect_border: ?*RECT,
            hmon: ?HMONITOR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        v_GetViewStream: *const fn (
            self: *const IBrowserService2,
            pidl: ?*ITEMIDLIST,
            grf_mode: u32,
            pwsz_name: ?[*:0]const u16,
            retval: *?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) void,
        ForwardViewMsg: *const fn (
            self: *const IBrowserService2,
            u_msg: u32,
            w_param: WPARAM,
            l_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) LRESULT,
        SetAcceleratorMenu: *const fn (
            self: *const IBrowserService2,
            hacc: ?HACCEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _GetToolbarCount: *const fn (
            self: *const IBrowserService2,
        ) callconv(@import("std").os.windows.WINAPI) i32,
        _GetToolbarItem: *const fn (
            self: *const IBrowserService2,
            itb: i32,
        ) callconv(@import("std").os.windows.WINAPI) ?*TOOLBARITEM,
        _SaveToolbars: *const fn (
            self: *const IBrowserService2,
            pstm: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _LoadToolbars: *const fn (
            self: *const IBrowserService2,
            pstm: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _CloseAndReleaseToolbars: *const fn (
            self: *const IBrowserService2,
            f_close: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        v_MayGetNextToolbarFocus: *const fn (
            self: *const IBrowserService2,
            lp_msg: ?*MSG,
            itb_next: u32,
            citb: i32,
            pptbi: ?*?*TOOLBARITEM,
            phwnd: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _ResizeNextBorderHelper: *const fn (
            self: *const IBrowserService2,
            itb: u32,
            b_use_hmonitor: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _FindTBar: *const fn (
            self: *const IBrowserService2,
            punk_src: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) u32,
        _SetFocus: *const fn (
            self: *const IBrowserService2,
            ptbi: ?*TOOLBARITEM,
            hwnd: ?HWND,
            lp_msg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        v_MayTranslateAccelerator: *const fn (
            self: *const IBrowserService2,
            pmsg: ?*MSG,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _GetBorderDWHelper: *const fn (
            self: *const IBrowserService2,
            punk_src: ?*IUnknown,
            lprect_border: ?*RECT,
            b_use_hmonitor: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        v_CheckZoneCrossing: *const fn (
            self: *const IBrowserService2,
            pidl: ?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IBrowserService.MethodMixin(T);
            pub inline fn wndProcBS(self: *const T, hwnd_: ?HWND, u_msg_: u32, w_param_: WPARAM, l_param_: LPARAM) LRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).WndProcBS(@as(*const IBrowserService2, @ptrCast(self)), hwnd_, u_msg_, w_param_, l_param_);
            }
            pub inline fn setAsDefFolderSettings(self: *const T) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).SetAsDefFolderSettings(@as(*const IBrowserService2, @ptrCast(self)));
            }
            pub inline fn getViewRect(self: *const T, prc_: ?*RECT) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).GetViewRect(@as(*const IBrowserService2, @ptrCast(self)), prc_);
            }
            pub inline fn onSize(self: *const T, w_param_: WPARAM) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).OnSize(@as(*const IBrowserService2, @ptrCast(self)), w_param_);
            }
            pub inline fn onCreate(self: *const T, pcs_: ?*CREATESTRUCTW) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).OnCreate(@as(*const IBrowserService2, @ptrCast(self)), pcs_);
            }
            pub inline fn onCommand(self: *const T, w_param_: WPARAM, l_param_: LPARAM) LRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).OnCommand(@as(*const IBrowserService2, @ptrCast(self)), w_param_, l_param_);
            }
            pub inline fn onDestroy(self: *const T) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).OnDestroy(@as(*const IBrowserService2, @ptrCast(self)));
            }
            pub inline fn onNotify(self: *const T, pnm_: ?*NMHDR) LRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).OnNotify(@as(*const IBrowserService2, @ptrCast(self)), pnm_);
            }
            pub inline fn onSetFocus(self: *const T) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).OnSetFocus(@as(*const IBrowserService2, @ptrCast(self)));
            }
            pub inline fn onFrameWindowActivateBS(self: *const T, f_active_: BOOL) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).OnFrameWindowActivateBS(@as(*const IBrowserService2, @ptrCast(self)), f_active_);
            }
            pub inline fn releaseShellView(self: *const T) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).ReleaseShellView(@as(*const IBrowserService2, @ptrCast(self)));
            }
            pub inline fn activatePendingView(self: *const T) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).ActivatePendingView(@as(*const IBrowserService2, @ptrCast(self)));
            }
            pub inline fn createViewWindow(self: *const T, psv_new_: ?*IShellView, psv_old_: ?*IShellView, prc_view_: ?*RECT, phwnd_: ?*?HWND) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).CreateViewWindow(@as(*const IBrowserService2, @ptrCast(self)), psv_new_, psv_old_, prc_view_, phwnd_);
            }
            pub inline fn createBrowserPropSheetExt(self: *const T, riid_: ?*const Guid, ppv_: ?*?*anyopaque) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).CreateBrowserPropSheetExt(@as(*const IBrowserService2, @ptrCast(self)), riid_, ppv_);
            }
            pub inline fn getViewWindow(self: *const T, phwnd_view_: ?*?HWND) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).GetViewWindow(@as(*const IBrowserService2, @ptrCast(self)), phwnd_view_);
            }
            pub inline fn getBaseBrowserData(self: *const T, pbbd_: ?*?*BASEBROWSERDATALH) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).GetBaseBrowserData(@as(*const IBrowserService2, @ptrCast(self)), pbbd_);
            }
            pub inline fn putBaseBrowserData(self: *const T) ?*BASEBROWSERDATALH {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).PutBaseBrowserData(@as(*const IBrowserService2, @ptrCast(self)));
            }
            pub inline fn initializeTravelLog(self: *const T, ptl_: ?*ITravelLog, dw_: u32) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).InitializeTravelLog(@as(*const IBrowserService2, @ptrCast(self)), ptl_, dw_);
            }
            pub inline fn setTopBrowser(self: *const T) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).SetTopBrowser(@as(*const IBrowserService2, @ptrCast(self)));
            }
            pub inline fn offline(self: *const T, i_cmd_: i32) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).Offline(@as(*const IBrowserService2, @ptrCast(self)), i_cmd_);
            }
            pub inline fn allowViewResize(self: *const T, f_: BOOL) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).AllowViewResize(@as(*const IBrowserService2, @ptrCast(self)), f_);
            }
            pub inline fn setActivateState(self: *const T, u_: u32) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).SetActivateState(@as(*const IBrowserService2, @ptrCast(self)), u_);
            }
            pub inline fn updateSecureLockIcon(self: *const T, e_secure_lock_: i32) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).UpdateSecureLockIcon(@as(*const IBrowserService2, @ptrCast(self)), e_secure_lock_);
            }
            pub inline fn initializeDownloadManager(self: *const T) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).InitializeDownloadManager(@as(*const IBrowserService2, @ptrCast(self)));
            }
            pub inline fn initializeTransitionSite(self: *const T) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).InitializeTransitionSite(@as(*const IBrowserService2, @ptrCast(self)));
            }
            pub inline fn initialize(self: *const T, hwnd_: ?HWND, pauto_: ?*IUnknown) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._Initialize(@as(*const IBrowserService2, @ptrCast(self)), hwnd_, pauto_);
            }
            pub inline fn cancelPendingNavigationAsync(self: *const T) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._CancelPendingNavigationAsync(@as(*const IBrowserService2, @ptrCast(self)));
            }
            pub inline fn cancelPendingView(self: *const T) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._CancelPendingView(@as(*const IBrowserService2, @ptrCast(self)));
            }
            pub inline fn maySaveChanges(self: *const T) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._MaySaveChanges(@as(*const IBrowserService2, @ptrCast(self)));
            }
            pub inline fn pauseOrResumeView(self: *const T, f_paused_: BOOL) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._PauseOrResumeView(@as(*const IBrowserService2, @ptrCast(self)), f_paused_);
            }
            pub inline fn disableModeless(self: *const T) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._DisableModeless(@as(*const IBrowserService2, @ptrCast(self)));
            }
            pub inline fn navigateToPidl2(self: *const T, pidl_: ?*ITEMIDLIST, grf_h_l_n_f_: u32, dw_flags_: u32) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._NavigateToPidl2(@as(*const IBrowserService2, @ptrCast(self)), pidl_, grf_h_l_n_f_, dw_flags_);
            }
            pub inline fn tryShell2Rename(self: *const T, psv_: ?*IShellView, pidl_new_: ?*ITEMIDLIST) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._TryShell2Rename(@as(*const IBrowserService2, @ptrCast(self)), psv_, pidl_new_);
            }
            pub inline fn switchActivationNow(self: *const T) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._SwitchActivationNow(@as(*const IBrowserService2, @ptrCast(self)));
            }
            pub inline fn execChildren(self: *const T, punk_bar_: ?*IUnknown, f_broadcast_: BOOL, pguid_cmd_group_: ?*const Guid, n_cmd_i_d_: u32, n_cmdexecopt_: u32, pvararg_in_: ?*VARIANT, pvararg_out_: ?*VARIANT) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._ExecChildren(@as(*const IBrowserService2, @ptrCast(self)), punk_bar_, f_broadcast_, pguid_cmd_group_, n_cmd_i_d_, n_cmdexecopt_, pvararg_in_, pvararg_out_);
            }
            pub inline fn sendChildren(self: *const T, hwnd_bar_: ?HWND, f_broadcast_: BOOL, u_msg_: u32, w_param_: WPARAM, l_param_: LPARAM) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._SendChildren(@as(*const IBrowserService2, @ptrCast(self)), hwnd_bar_, f_broadcast_, u_msg_, w_param_, l_param_);
            }
            pub inline fn getFolderSetData(self: *const T, pfsd_: ?*FOLDERSETDATA) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).GetFolderSetData(@as(*const IBrowserService2, @ptrCast(self)), pfsd_);
            }
            pub inline fn onFocusChange(self: *const T, itb_: u32) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._OnFocusChange(@as(*const IBrowserService2, @ptrCast(self)), itb_);
            }
            pub inline fn vShowHideChildWindows(self: *const T, f_child_only_: BOOL) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).v_ShowHideChildWindows(@as(*const IBrowserService2, @ptrCast(self)), f_child_only_);
            }
            pub inline fn getItbLastFocus(self: *const T) u32 {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._get_itbLastFocus(@as(*const IBrowserService2, @ptrCast(self)));
            }
            pub inline fn putItbLastFocus(self: *const T, itb_last_focus_: u32) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._put_itbLastFocus(@as(*const IBrowserService2, @ptrCast(self)), itb_last_focus_);
            }
            pub inline fn uiActivateView(self: *const T, u_state_: u32) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._UIActivateView(@as(*const IBrowserService2, @ptrCast(self)), u_state_);
            }
            pub inline fn getViewBorderRect(self: *const T, prc_: ?*RECT) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._GetViewBorderRect(@as(*const IBrowserService2, @ptrCast(self)), prc_);
            }
            pub inline fn updateViewRectSize(self: *const T) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._UpdateViewRectSize(@as(*const IBrowserService2, @ptrCast(self)));
            }
            pub inline fn resizeNextBorder(self: *const T, itb_: u32) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._ResizeNextBorder(@as(*const IBrowserService2, @ptrCast(self)), itb_);
            }
            pub inline fn resizeView(self: *const T) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._ResizeView(@as(*const IBrowserService2, @ptrCast(self)));
            }
            pub inline fn getEffectiveClientArea(self: *const T, lprect_border_: ?*RECT, hmon_: ?HMONITOR) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._GetEffectiveClientArea(@as(*const IBrowserService2, @ptrCast(self)), lprect_border_, hmon_);
            }
            pub inline fn vGetViewStream(self: *const T, pidl_: ?*ITEMIDLIST, grf_mode_: u32, pwsz_name_: ?[*:0]const u16) ?*IStream {
                var retval: ?*IStream = undefined;
                @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).v_GetViewStream(@as(*const IBrowserService2, @ptrCast(self)), pidl_, grf_mode_, pwsz_name_, &retval);
                return retval;
            }
            pub inline fn forwardViewMsg(self: *const T, u_msg_: u32, w_param_: WPARAM, l_param_: LPARAM) LRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).ForwardViewMsg(@as(*const IBrowserService2, @ptrCast(self)), u_msg_, w_param_, l_param_);
            }
            pub inline fn setAcceleratorMenu(self: *const T, hacc_: ?HACCEL) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).SetAcceleratorMenu(@as(*const IBrowserService2, @ptrCast(self)), hacc_);
            }
            pub inline fn getToolbarCount(self: *const T) i32 {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._GetToolbarCount(@as(*const IBrowserService2, @ptrCast(self)));
            }
            pub inline fn getToolbarItem(self: *const T, itb_: i32) ?*TOOLBARITEM {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._GetToolbarItem(@as(*const IBrowserService2, @ptrCast(self)), itb_);
            }
            pub inline fn saveToolbars(self: *const T, pstm_: ?*IStream) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._SaveToolbars(@as(*const IBrowserService2, @ptrCast(self)), pstm_);
            }
            pub inline fn loadToolbars(self: *const T, pstm_: ?*IStream) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._LoadToolbars(@as(*const IBrowserService2, @ptrCast(self)), pstm_);
            }
            pub inline fn closeAndReleaseToolbars(self: *const T, f_close_: BOOL) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._CloseAndReleaseToolbars(@as(*const IBrowserService2, @ptrCast(self)), f_close_);
            }
            pub inline fn vMayGetNextToolbarFocus(self: *const T, lp_msg_: ?*MSG, itb_next_: u32, citb_: i32, pptbi_: ?*?*TOOLBARITEM, phwnd_: ?*?HWND) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).v_MayGetNextToolbarFocus(@as(*const IBrowserService2, @ptrCast(self)), lp_msg_, itb_next_, citb_, pptbi_, phwnd_);
            }
            pub inline fn resizeNextBorderHelper(self: *const T, itb_: u32, b_use_hmonitor_: BOOL) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._ResizeNextBorderHelper(@as(*const IBrowserService2, @ptrCast(self)), itb_, b_use_hmonitor_);
            }
            pub inline fn findTBar(self: *const T, punk_src_: ?*IUnknown) u32 {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._FindTBar(@as(*const IBrowserService2, @ptrCast(self)), punk_src_);
            }
            pub inline fn setFocus(self: *const T, ptbi_: ?*TOOLBARITEM, hwnd_: ?HWND, lp_msg_: ?*MSG) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._SetFocus(@as(*const IBrowserService2, @ptrCast(self)), ptbi_, hwnd_, lp_msg_);
            }
            pub inline fn vMayTranslateAccelerator(self: *const T, pmsg_: ?*MSG) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).v_MayTranslateAccelerator(@as(*const IBrowserService2, @ptrCast(self)), pmsg_);
            }
            pub inline fn getBorderDWHelper(self: *const T, punk_src_: ?*IUnknown, lprect_border_: ?*RECT, b_use_hmonitor_: BOOL) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable))._GetBorderDWHelper(@as(*const IBrowserService2, @ptrCast(self)), punk_src_, lprect_border_, b_use_hmonitor_);
            }
            pub inline fn vCheckZoneCrossing(self: *const T, pidl_: ?*ITEMIDLIST) HRESULT {
                return @as(*const IBrowserService2.VTable, @ptrCast(self.vtable)).v_CheckZoneCrossing(@as(*const IBrowserService2, @ptrCast(self)), pidl_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const IEPDNFLAGS = enum(i32) {
    I = 1,
};
pub const IEPDN_BINDINGUI = IEPDNFLAGS.I;

// TODO: this type is limited to platform 'windows5.1.2600'
const IID_IBrowserService3_Value = Guid.initString("27d7ce21-762d-48f3-86f3-40e2fd3749c4");
pub const IID_IBrowserService3 = &IID_IBrowserService3_Value;
pub const IBrowserService3 = extern struct {
    pub const VTable = extern struct {
        base: IBrowserService2.VTable,
        _PositionViewWindow: *const fn (
            self: *const IBrowserService3,
            hwnd: ?HWND,
            prc: ?*RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IEParseDisplayNameEx: *const fn (
            self: *const IBrowserService3,
            ui_c_p: u32,
            pwsz_path: ?[*:0]const u16,
            dw_flags: u32,
            ppidl_out: ?*?*ITEMIDLIST,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IBrowserService2.MethodMixin(T);
            pub inline fn positionViewWindow(self: *const T, hwnd_: ?HWND, prc_: ?*RECT) HRESULT {
                return @as(*const IBrowserService3.VTable, @ptrCast(self.vtable))._PositionViewWindow(@as(*const IBrowserService3, @ptrCast(self)), hwnd_, prc_);
            }
            pub inline fn ieParseDisplayNameEx(self: *const T, ui_c_p_: u32, pwsz_path_: ?[*:0]const u16, dw_flags_: u32, ppidl_out_: ?*?*ITEMIDLIST) HRESULT {
                return @as(*const IBrowserService3.VTable, @ptrCast(self.vtable)).IEParseDisplayNameEx(@as(*const IBrowserService3, @ptrCast(self)), ui_c_p_, pwsz_path_, dw_flags_, ppidl_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBrowserService4_Value = Guid.initString("639f1bff-e135-4096-abd8-e0f504d649a4");
pub const IID_IBrowserService4 = &IID_IBrowserService4_Value;
pub const IBrowserService4 = extern struct {
    pub const VTable = extern struct {
        base: IBrowserService3.VTable,
        ActivateView: *const fn (
            self: *const IBrowserService4,
            f_pending_view: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveViewState: *const fn (
            self: *const IBrowserService4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        _ResizeAllBorders: *const fn (
            self: *const IBrowserService4,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IBrowserService3.MethodMixin(T);
            pub inline fn activateView(self: *const T, f_pending_view_: BOOL) HRESULT {
                return @as(*const IBrowserService4.VTable, @ptrCast(self.vtable)).ActivateView(@as(*const IBrowserService4, @ptrCast(self)), f_pending_view_);
            }
            pub inline fn saveViewState(self: *const T) HRESULT {
                return @as(*const IBrowserService4.VTable, @ptrCast(self.vtable)).SaveViewState(@as(*const IBrowserService4, @ptrCast(self)));
            }
            pub inline fn resizeAllBorders(self: *const T) HRESULT {
                return @as(*const IBrowserService4.VTable, @ptrCast(self.vtable))._ResizeAllBorders(@as(*const IBrowserService4, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITrackShellMenu_Value = Guid.initString("8278f932-2a3e-11d2-838f-00c04fd918d0");
pub const IID_ITrackShellMenu = &IID_ITrackShellMenu_Value;
pub const ITrackShellMenu = extern struct {
    pub const VTable = extern struct {
        base: IShellMenu.VTable,
        SetObscured: *const fn (
            self: *const ITrackShellMenu,
            hwnd_t_b: ?HWND,
            punk_band: ?*IUnknown,
            dw_s_m_set_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Popup: *const fn (
            self: *const ITrackShellMenu,
            hwnd: ?HWND,
            ppt: ?*POINTL,
            prc_exclude: ?*RECTL,
            dw_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IShellMenu.MethodMixin(T);
            pub inline fn setObscured(self: *const T, hwnd_t_b_: ?HWND, punk_band_: ?*IUnknown, dw_s_m_set_flags_: u32) HRESULT {
                return @as(*const ITrackShellMenu.VTable, @ptrCast(self.vtable)).SetObscured(@as(*const ITrackShellMenu, @ptrCast(self)), hwnd_t_b_, punk_band_, dw_s_m_set_flags_);
            }
            pub inline fn popup(self: *const T, hwnd_: ?HWND, ppt_: ?*POINTL, prc_exclude_: ?*RECTL, dw_flags_: i32) HRESULT {
                return @as(*const ITrackShellMenu.VTable, @ptrCast(self.vtable)).Popup(@as(*const ITrackShellMenu, @ptrCast(self)), hwnd_, ppt_, prc_exclude_, dw_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_ImageTranscode_Value = Guid.initString("17b75166-928f-417d-9685-64aa135565c1");
pub const CLSID_ImageTranscode = &CLSID_ImageTranscode_Value;

pub const TI_FLAGS = enum(i32) {
    BITMAP = 1,
    JPEG = 2,
};
pub const TI_BITMAP = TI_FLAGS.BITMAP;
pub const TI_JPEG = TI_FLAGS.JPEG;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITranscodeImage_Value = Guid.initString("bae86ddd-dc11-421c-b7ab-cc55d1d65c44");
pub const IID_ITranscodeImage = &IID_ITranscodeImage_Value;
pub const ITranscodeImage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TranscodeImage: *const fn (
            self: *const ITranscodeImage,
            p_shell_item: ?*IShellItem,
            ui_max_width: u32,
            ui_max_height: u32,
            flags: u32,
            pv_image: ?*IStream,
            pui_width: ?*u32,
            pui_height: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn transcodeImage(self: *const T, p_shell_item_: ?*IShellItem, ui_max_width_: u32, ui_max_height_: u32, flags_: u32, pv_image_: ?*IStream, pui_width_: ?*u32, pui_height_: ?*u32) HRESULT {
                return @as(*const ITranscodeImage.VTable, @ptrCast(self.vtable)).TranscodeImage(@as(*const ITranscodeImage, @ptrCast(self)), p_shell_item_, ui_max_width_, ui_max_height_, flags_, pv_image_, pui_width_, pui_height_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PATHCCH_OPTIONS = enum(i32) {
    NONE = 0,
    ALLOW_LONG_PATHS = 1,
    FORCE_ENABLE_LONG_NAME_PROCESS = 2,
    FORCE_DISABLE_LONG_NAME_PROCESS = 4,
    DO_NOT_NORMALIZE_SEGMENTS = 8,
    ENSURE_IS_EXTENDED_LENGTH_PATH = 16,
    ENSURE_TRAILING_SLASH = 32,
    CANONICALIZE_SLASHES = 64,
};
pub const PATHCCH_NONE = PATHCCH_OPTIONS.NONE;
pub const PATHCCH_ALLOW_LONG_PATHS = PATHCCH_OPTIONS.ALLOW_LONG_PATHS;
pub const PATHCCH_FORCE_ENABLE_LONG_NAME_PROCESS = PATHCCH_OPTIONS.FORCE_ENABLE_LONG_NAME_PROCESS;
pub const PATHCCH_FORCE_DISABLE_LONG_NAME_PROCESS = PATHCCH_OPTIONS.FORCE_DISABLE_LONG_NAME_PROCESS;
pub const PATHCCH_DO_NOT_NORMALIZE_SEGMENTS = PATHCCH_OPTIONS.DO_NOT_NORMALIZE_SEGMENTS;
pub const PATHCCH_ENSURE_IS_EXTENDED_LENGTH_PATH = PATHCCH_OPTIONS.ENSURE_IS_EXTENDED_LENGTH_PATH;
pub const PATHCCH_ENSURE_TRAILING_SLASH = PATHCCH_OPTIONS.ENSURE_TRAILING_SLASH;
pub const PATHCCH_CANONICALIZE_SLASHES = PATHCCH_OPTIONS.CANONICALIZE_SLASHES;

pub const APPLET_PROC = *const fn (
    hwnd_cpl: ?HWND,
    msg: u32,
    l_param1: LPARAM,
    l_param2: LPARAM,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const CPLINFO = extern struct {
    idIcon: i32 align(1),
    idName: i32 align(1),
    idInfo: i32 align(1),
    lData: isize align(1),
};

pub const NEWCPLINFOA = extern struct {
    dwSize: u32 align(1),
    dwFlags: u32 align(1),
    dwHelpContext: u32 align(1),
    lData: isize align(1),
    hIcon: ?HICON align(1),
    szName: [32]CHAR align(1),
    szInfo: [64]CHAR align(1),
    szHelpFile: [128]CHAR align(1),
};

pub const NEWCPLINFOW = extern struct {
    dwSize: u32 align(1),
    dwFlags: u32 align(1),
    dwHelpContext: u32 align(1),
    lData: isize align(1),
    hIcon: ?HICON align(1),
    szName: [32]u16 align(1),
    szInfo: [64]u16 align(1),
    szHelpFile: [128]u16 align(1),
};

pub const PROFILEINFOA = extern struct {
    dwSize: u32,
    dwFlags: u32,
    lpUserName: ?PSTR,
    lpProfilePath: ?PSTR,
    lpDefaultPath: ?PSTR,
    lpServerName: ?PSTR,
    lpPolicyPath: ?PSTR,
    hProfile: ?HANDLE,
};

pub const PROFILEINFOW = extern struct {
    dwSize: u32,
    dwFlags: u32,
    lpUserName: ?PWSTR,
    lpProfilePath: ?PWSTR,
    lpDefaultPath: ?PWSTR,
    lpServerName: ?PWSTR,
    lpPolicyPath: ?PWSTR,
    hProfile: ?HANDLE,
};

pub const iurl_seturl_flags = enum(i32) {
    GUESS_PROTOCOL = 1,
    USE_DEFAULT_PROTOCOL = 2,
};
pub const IURL_SETURL_FL_GUESS_PROTOCOL = iurl_seturl_flags.GUESS_PROTOCOL;
pub const IURL_SETURL_FL_USE_DEFAULT_PROTOCOL = iurl_seturl_flags.USE_DEFAULT_PROTOCOL;

pub const iurl_invokecommand_flags = enum(i32) {
    ALLOW_UI = 1,
    USE_DEFAULT_VERB = 2,
    DDEWAIT = 4,
    ASYNCOK = 8,
    LOG_USAGE = 16,
};
pub const IURL_INVOKECOMMAND_FL_ALLOW_UI = iurl_invokecommand_flags.ALLOW_UI;
pub const IURL_INVOKECOMMAND_FL_USE_DEFAULT_VERB = iurl_invokecommand_flags.USE_DEFAULT_VERB;
pub const IURL_INVOKECOMMAND_FL_DDEWAIT = iurl_invokecommand_flags.DDEWAIT;
pub const IURL_INVOKECOMMAND_FL_ASYNCOK = iurl_invokecommand_flags.ASYNCOK;
pub const IURL_INVOKECOMMAND_FL_LOG_USAGE = iurl_invokecommand_flags.LOG_USAGE;

pub const urlinvokecommandinfoA = extern struct {
    dwcbSize: u32,
    dwFlags: u32,
    hwndParent: ?HWND,
    pcszVerb: ?[*:0]const u8,
};

pub const urlinvokecommandinfoW = extern struct {
    dwcbSize: u32,
    dwFlags: u32,
    hwndParent: ?HWND,
    pcszVerb: ?[*:0]const u16,
};

const IID_IUniformResourceLocatorA_Value = Guid.initString("fbf23b80-e3f0-101b-8488-00aa003e56f8");
pub const IID_IUniformResourceLocatorA = &IID_IUniformResourceLocatorA_Value;
pub const IUniformResourceLocatorA = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetURL: *const fn (
            self: *const IUniformResourceLocatorA,
            pcsz_u_r_l: ?[*:0]const u8,
            dw_in_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetURL: *const fn (
            self: *const IUniformResourceLocatorA,
            ppsz_u_r_l: ?*?PSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeCommand: *const fn (
            self: *const IUniformResourceLocatorA,
            purlici: ?*urlinvokecommandinfoA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setURL(self: *const T, pcsz_u_r_l_: ?[*:0]const u8, dw_in_flags_: u32) HRESULT {
                return @as(*const IUniformResourceLocatorA.VTable, @ptrCast(self.vtable)).SetURL(@as(*const IUniformResourceLocatorA, @ptrCast(self)), pcsz_u_r_l_, dw_in_flags_);
            }
            pub inline fn getURL(self: *const T, ppsz_u_r_l_: ?*?PSTR) HRESULT {
                return @as(*const IUniformResourceLocatorA.VTable, @ptrCast(self.vtable)).GetURL(@as(*const IUniformResourceLocatorA, @ptrCast(self)), ppsz_u_r_l_);
            }
            pub inline fn invokeCommand(self: *const T, purlici_: ?*urlinvokecommandinfoA) HRESULT {
                return @as(*const IUniformResourceLocatorA.VTable, @ptrCast(self.vtable)).InvokeCommand(@as(*const IUniformResourceLocatorA, @ptrCast(self)), purlici_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IUniformResourceLocatorW_Value = Guid.initString("cabb0da0-da57-11cf-9974-0020afd79762");
pub const IID_IUniformResourceLocatorW = &IID_IUniformResourceLocatorW_Value;
pub const IUniformResourceLocatorW = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetURL: *const fn (
            self: *const IUniformResourceLocatorW,
            pcsz_u_r_l: ?[*:0]const u16,
            dw_in_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetURL: *const fn (
            self: *const IUniformResourceLocatorW,
            ppsz_u_r_l: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeCommand: *const fn (
            self: *const IUniformResourceLocatorW,
            purlici: ?*urlinvokecommandinfoW,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setURL(self: *const T, pcsz_u_r_l_: ?[*:0]const u16, dw_in_flags_: u32) HRESULT {
                return @as(*const IUniformResourceLocatorW.VTable, @ptrCast(self.vtable)).SetURL(@as(*const IUniformResourceLocatorW, @ptrCast(self)), pcsz_u_r_l_, dw_in_flags_);
            }
            pub inline fn getURL(self: *const T, ppsz_u_r_l_: ?*?PWSTR) HRESULT {
                return @as(*const IUniformResourceLocatorW.VTable, @ptrCast(self.vtable)).GetURL(@as(*const IUniformResourceLocatorW, @ptrCast(self)), ppsz_u_r_l_);
            }
            pub inline fn invokeCommand(self: *const T, purlici_: ?*urlinvokecommandinfoW) HRESULT {
                return @as(*const IUniformResourceLocatorW.VTable, @ptrCast(self.vtable)).InvokeCommand(@as(*const IUniformResourceLocatorW, @ptrCast(self)), purlici_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const translateurl_in_flags = enum(i32) {
    GUESS_PROTOCOL = 1,
    USE_DEFAULT_PROTOCOL = 2,
};
pub const TRANSLATEURL_FL_GUESS_PROTOCOL = translateurl_in_flags.GUESS_PROTOCOL;
pub const TRANSLATEURL_FL_USE_DEFAULT_PROTOCOL = translateurl_in_flags.USE_DEFAULT_PROTOCOL;

pub const urlassociationdialog_in_flags = enum(i32) {
    USE_DEFAULT_NAME = 1,
    REGISTER_ASSOC = 2,
};
pub const URLASSOCDLG_FL_USE_DEFAULT_NAME = urlassociationdialog_in_flags.USE_DEFAULT_NAME;
pub const URLASSOCDLG_FL_REGISTER_ASSOC = urlassociationdialog_in_flags.REGISTER_ASSOC;

pub const mimeassociationdialog_in_flags = enum(i32) {
    C = 1,
};
pub const MIMEASSOCDLG_FL_REGISTER_ASSOC = mimeassociationdialog_in_flags.C;

pub const PAPPSTATE_CHANGE_ROUTINE = *const fn (
    quiesced: BOOLEAN,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PAPPCONSTRAIN_CHANGE_ROUTINE = *const fn (
    constrained: BOOLEAN,
    context: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

const CLSID_ShowInputPaneAnimationCoordinator_Value = Guid.initString("1f046abf-3202-4dc1-8cb5-3c67617ce1fa");
pub const CLSID_ShowInputPaneAnimationCoordinator = &CLSID_ShowInputPaneAnimationCoordinator_Value;

const CLSID_HideInputPaneAnimationCoordinator_Value = Guid.initString("384742b1-2a77-4cb3-8cf8-1136f5e17e59");
pub const CLSID_HideInputPaneAnimationCoordinator = &CLSID_HideInputPaneAnimationCoordinator_Value;

const IID_IInputPaneAnimationCoordinator_Value = Guid.initString("2af16ba9-2de5-4b75-82d9-01372afbffb4");
pub const IID_IInputPaneAnimationCoordinator = &IID_IInputPaneAnimationCoordinator_Value;
pub const IInputPaneAnimationCoordinator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddAnimation: *const fn (
            self: *const IInputPaneAnimationCoordinator,
            device: ?*IUnknown,
            animation: ?*IDCompositionAnimation,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addAnimation(self: *const T, device_: ?*IUnknown, animation_: ?*IDCompositionAnimation) HRESULT {
                return @as(*const IInputPaneAnimationCoordinator.VTable, @ptrCast(self.vtable)).AddAnimation(@as(*const IInputPaneAnimationCoordinator, @ptrCast(self)), device_, animation_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const DRAGINFOA = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        uSize: u32,
        pt: POINT,
        fNC: BOOL,
        lpFileList: ?[*]u8,
        grfKeyState: u32,
    },
    .X86 => extern struct {
        uSize: u32 align(1),
        pt: POINT align(1),
        fNC: BOOL align(1),
        lpFileList: ?[*]u8 align(1),
        grfKeyState: u32 align(1),
    },
};
pub const DRAGINFOW = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        uSize: u32,
        pt: POINT,
        fNC: BOOL,
        lpFileList: ?[*]u16,
        grfKeyState: u32,
    },
    .X86 => extern struct {
        uSize: u32 align(1),
        pt: POINT align(1),
        fNC: BOOL align(1),
        lpFileList: ?[*]u16 align(1),
        grfKeyState: u32 align(1),
    },
};
pub const APPBARDATA = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        cbSize: u32,
        hWnd: ?HWND,
        uCallbackMessage: u32,
        uEdge: u32,
        rc: RECT,
        lParam: LPARAM,
    },
    .X86 => extern struct {
        cbSize: u32 align(1),
        hWnd: ?HWND align(1),
        uCallbackMessage: u32 align(1),
        uEdge: u32 align(1),
        rc: RECT align(1),
        lParam: LPARAM align(1),
    },
};
pub const SHFILEOPSTRUCTA = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        hwnd: ?HWND,
        wFunc: u32,
        pFrom: ?*i8,
        pTo: ?*i8,
        fFlags: u16,
        fAnyOperationsAborted: BOOL,
        hNameMappings: ?*anyopaque,
        lpszProgressTitle: ?[*:0]const u8,
    },
    .X86 => extern struct {
        hwnd: ?HWND align(1),
        wFunc: u32 align(1),
        pFrom: ?*i8 align(1),
        pTo: ?*i8 align(1),
        fFlags: u16 align(1),
        fAnyOperationsAborted: BOOL align(1),
        hNameMappings: ?*anyopaque align(1),
        lpszProgressTitle: ?[*:0]const u8 align(1),
    },
};
pub const SHFILEOPSTRUCTW = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        hwnd: ?HWND,
        wFunc: u32,
        pFrom: ?[*]const u16,
        pTo: ?[*]const u16,
        fFlags: u16,
        fAnyOperationsAborted: BOOL,
        hNameMappings: ?*anyopaque,
        lpszProgressTitle: ?[*:0]const u16,
    },
    .X86 => extern struct {
        hwnd: ?HWND align(1),
        wFunc: u32 align(1),
        pFrom: ?[*]const u16 align(1),
        pTo: ?[*]const u16 align(1),
        fFlags: u16 align(1),
        fAnyOperationsAborted: BOOL align(1),
        hNameMappings: ?*anyopaque align(1),
        lpszProgressTitle: ?[*:0]const u16 align(1),
    },
};
pub const SHNAMEMAPPINGA = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        pszOldPath: ?PSTR,
        pszNewPath: ?PSTR,
        cchOldPath: i32,
        cchNewPath: i32,
    },
    .X86 => extern struct {
        pszOldPath: ?PSTR align(1),
        pszNewPath: ?PSTR align(1),
        cchOldPath: i32 align(1),
        cchNewPath: i32 align(1),
    },
};
pub const SHNAMEMAPPINGW = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        pszOldPath: ?PWSTR,
        pszNewPath: ?PWSTR,
        cchOldPath: i32,
        cchNewPath: i32,
    },
    .X86 => extern struct {
        pszOldPath: ?PWSTR align(1),
        pszNewPath: ?PWSTR align(1),
        cchOldPath: i32 align(1),
        cchNewPath: i32 align(1),
    },
};
pub const SHELLEXECUTEINFOA = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        cbSize: u32,
        fMask: u32,
        hwnd: ?HWND,
        lpVerb: ?[*:0]const u8,
        lpFile: ?[*:0]const u8,
        lpParameters: ?[*:0]const u8,
        lpDirectory: ?[*:0]const u8,
        nShow: i32,
        hInstApp: ?HINSTANCE,
        lpIDList: ?*anyopaque,
        lpClass: ?[*:0]const u8,
        hkeyClass: ?HKEY,
        dwHotKey: u32,
        Anonymous: extern union {
            hIcon: ?HANDLE,
            hMonitor: ?HANDLE,
        },
        hProcess: ?HANDLE,
    },
    .X86 => extern struct {
        cbSize: u32 align(1),
        fMask: u32 align(1),
        hwnd: ?HWND align(1),
        lpVerb: ?[*:0]const u8 align(1),
        lpFile: ?[*:0]const u8 align(1),
        lpParameters: ?[*:0]const u8 align(1),
        lpDirectory: ?[*:0]const u8 align(1),
        nShow: i32 align(1),
        hInstApp: ?HINSTANCE align(1),
        lpIDList: ?*anyopaque align(1),
        lpClass: ?[*:0]const u8 align(1),
        hkeyClass: ?HKEY align(1),
        dwHotKey: u32 align(1),
        Anonymous: extern union {
            hIcon: ?HANDLE align(1),
            hMonitor: ?HANDLE align(1),
        } align(1),
        hProcess: ?HANDLE align(1),
    },
};
pub const SHELLEXECUTEINFOW = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        cbSize: u32,
        fMask: u32,
        hwnd: ?HWND,
        lpVerb: ?[*:0]const u16,
        lpFile: ?[*:0]const u16,
        lpParameters: ?[*:0]const u16,
        lpDirectory: ?[*:0]const u16,
        nShow: i32,
        hInstApp: ?HINSTANCE,
        lpIDList: ?*anyopaque,
        lpClass: ?[*:0]const u16,
        hkeyClass: ?HKEY,
        dwHotKey: u32,
        Anonymous: extern union {
            hIcon: ?HANDLE,
            hMonitor: ?HANDLE,
        },
        hProcess: ?HANDLE,
    },
    .X86 => extern struct {
        cbSize: u32 align(1),
        fMask: u32 align(1),
        hwnd: ?HWND align(1),
        lpVerb: ?[*:0]const u16 align(1),
        lpFile: ?[*:0]const u16 align(1),
        lpParameters: ?[*:0]const u16 align(1),
        lpDirectory: ?[*:0]const u16 align(1),
        nShow: i32 align(1),
        hInstApp: ?HINSTANCE align(1),
        lpIDList: ?*anyopaque align(1),
        lpClass: ?[*:0]const u16 align(1),
        hkeyClass: ?HKEY align(1),
        dwHotKey: u32 align(1),
        Anonymous: extern union {
            hIcon: ?HANDLE align(1),
            hMonitor: ?HANDLE align(1),
        } align(1),
        hProcess: ?HANDLE align(1),
    },
};
pub const SHCREATEPROCESSINFOW = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        cbSize: u32,
        fMask: u32,
        hwnd: ?HWND,
        pszFile: ?[*:0]const u16,
        pszParameters: ?[*:0]const u16,
        pszCurrentDirectory: ?[*:0]const u16,
        hUserToken: ?HANDLE,
        lpProcessAttributes: ?*SECURITY_ATTRIBUTES,
        lpThreadAttributes: ?*SECURITY_ATTRIBUTES,
        bInheritHandles: BOOL,
        dwCreationFlags: u32,
        lpStartupInfo: ?*STARTUPINFOW,
        lpProcessInformation: ?*PROCESS_INFORMATION,
    },
    .X86 => extern struct {
        cbSize: u32 align(1),
        fMask: u32 align(1),
        hwnd: ?HWND align(1),
        pszFile: ?[*:0]const u16 align(1),
        pszParameters: ?[*:0]const u16 align(1),
        pszCurrentDirectory: ?[*:0]const u16 align(1),
        hUserToken: ?HANDLE align(1),
        lpProcessAttributes: ?*SECURITY_ATTRIBUTES align(1),
        lpThreadAttributes: ?*SECURITY_ATTRIBUTES align(1),
        bInheritHandles: BOOL align(1),
        dwCreationFlags: u32 align(1),
        lpStartupInfo: ?*STARTUPINFOW align(1),
        lpProcessInformation: ?*PROCESS_INFORMATION align(1),
    },
};
pub const ASSOCIATIONELEMENT = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        ac: ASSOCCLASS,
        hkClass: ?HKEY,
        pszClass: ?[*:0]const u16,
    },
    .X86 => extern struct {
        ac: ASSOCCLASS align(1),
        hkClass: ?HKEY align(1),
        pszClass: ?[*:0]const u16 align(1),
    },
};
pub const SHQUERYRBINFO = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        cbSize: u32,
        i64Size: i64,
        i64NumItems: i64,
    },
    .X86 => extern struct {
        cbSize: u32 align(1),
        i64Size: i64 align(1),
        i64NumItems: i64 align(1),
    },
};
pub const NOTIFYICONDATAA = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        cbSize: u32,
        hWnd: ?HWND,
        uID: u32,
        uFlags: NOTIFY_ICON_DATA_FLAGS,
        uCallbackMessage: u32,
        hIcon: ?HICON,
        szTip: [128]CHAR,
        dwState: u32,
        dwStateMask: u32,
        szInfo: [256]CHAR,
        Anonymous: extern union {
            uTimeout: u32,
            uVersion: u32,
        },
        szInfoTitle: [64]CHAR,
        dwInfoFlags: u32,
        guidItem: Guid,
        hBalloonIcon: ?HICON,
    },
    .X86 => extern struct {
        cbSize: u32 align(1),
        hWnd: ?HWND align(1),
        uID: u32 align(1),
        uFlags: NOTIFY_ICON_DATA_FLAGS align(1),
        uCallbackMessage: u32 align(1),
        hIcon: ?HICON align(1),
        szTip: [128]CHAR align(1),
        dwState: u32 align(1),
        dwStateMask: u32 align(1),
        szInfo: [256]CHAR align(1),
        Anonymous: extern union {
            uTimeout: u32 align(1),
            uVersion: u32 align(1),
        } align(1),
        szInfoTitle: [64]CHAR align(1),
        dwInfoFlags: u32 align(1),
        guidItem: Guid align(1),
        hBalloonIcon: ?HICON align(1),
    },
};
pub const NOTIFYICONDATAW = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        cbSize: u32,
        hWnd: ?HWND,
        uID: u32,
        uFlags: NOTIFY_ICON_DATA_FLAGS,
        uCallbackMessage: u32,
        hIcon: ?HICON,
        szTip: [128]u16,
        dwState: u32,
        dwStateMask: u32,
        szInfo: [256]u16,
        Anonymous: extern union {
            uTimeout: u32,
            uVersion: u32,
        },
        szInfoTitle: [64]u16,
        dwInfoFlags: u32,
        guidItem: Guid,
        hBalloonIcon: ?HICON,
    },
    .X86 => extern struct {
        cbSize: u32 align(1),
        hWnd: ?HWND align(1),
        uID: u32 align(1),
        uFlags: NOTIFY_ICON_DATA_FLAGS align(1),
        uCallbackMessage: u32 align(1),
        hIcon: ?HICON align(1),
        szTip: [128]u16 align(1),
        dwState: u32 align(1),
        dwStateMask: u32 align(1),
        szInfo: [256]u16 align(1),
        Anonymous: extern union {
            uTimeout: u32 align(1),
            uVersion: u32 align(1),
        } align(1),
        szInfoTitle: [64]u16 align(1),
        dwInfoFlags: u32 align(1),
        guidItem: Guid align(1),
        hBalloonIcon: ?HICON align(1),
    },
};
pub const NOTIFYICONIDENTIFIER = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        cbSize: u32,
        hWnd: ?HWND,
        uID: u32,
        guidItem: Guid,
    },
    .X86 => extern struct {
        cbSize: u32 align(1),
        hWnd: ?HWND align(1),
        uID: u32 align(1),
        guidItem: Guid align(1),
    },
};
pub const SHFILEINFOA = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        hIcon: ?HICON,
        iIcon: i32,
        dwAttributes: u32,
        szDisplayName: [260]CHAR,
        szTypeName: [80]CHAR,
    },
    .X86 => extern struct {
        hIcon: ?HICON align(1),
        iIcon: i32 align(1),
        dwAttributes: u32 align(1),
        szDisplayName: [260]CHAR align(1),
        szTypeName: [80]CHAR align(1),
    },
};
pub const SHFILEINFOW = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        hIcon: ?HICON,
        iIcon: i32,
        dwAttributes: u32,
        szDisplayName: [260]u16,
        szTypeName: [80]u16,
    },
    .X86 => extern struct {
        hIcon: ?HICON align(1),
        iIcon: i32 align(1),
        dwAttributes: u32 align(1),
        szDisplayName: [260]u16 align(1),
        szTypeName: [80]u16 align(1),
    },
};
pub const SHSTOCKICONINFO = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        cbSize: u32,
        hIcon: ?HICON,
        iSysImageIndex: i32,
        iIcon: i32,
        szPath: [260]u16,
    },
    .X86 => extern struct {
        cbSize: u32 align(1),
        hIcon: ?HICON align(1),
        iSysImageIndex: i32 align(1),
        iIcon: i32 align(1),
        szPath: [260]u16 align(1),
    },
};
pub const OPEN_PRINTER_PROPS_INFOA = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        dwSize: u32,
        pszSheetName: ?PSTR,
        uSheetIndex: u32,
        dwFlags: u32,
        bModal: BOOL,
    },
    .X86 => extern struct {
        dwSize: u32 align(1),
        pszSheetName: ?PSTR align(1),
        uSheetIndex: u32 align(1),
        dwFlags: u32 align(1),
        bModal: BOOL align(1),
    },
};
pub const OPEN_PRINTER_PROPS_INFOW = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => extern struct {
        dwSize: u32,
        pszSheetName: ?PWSTR,
        uSheetIndex: u32,
        dwFlags: u32,
        bModal: BOOL,
    },
    .X86 => extern struct {
        dwSize: u32 align(1),
        pszSheetName: ?PWSTR align(1),
        uSheetIndex: u32 align(1),
        dwFlags: u32 align(1),
        bModal: BOOL align(1),
    },
};

//--------------------------------------------------------------------------------
// Section: Functions (688)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn LoadUserProfileA(
    h_token: ?HANDLE,
    lp_profile_info: ?*PROFILEINFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn LoadUserProfileW(
    h_token: ?HANDLE,
    lp_profile_info: ?*PROFILEINFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn UnloadUserProfile(
    h_token: ?HANDLE,
    h_profile: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn GetProfilesDirectoryA(
    lp_profile_dir: ?[*:0]u8,
    lpcch_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn GetProfilesDirectoryW(
    lp_profile_dir: ?[*:0]u16,
    lpcch_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn GetProfileType(
    dw_flags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn DeleteProfileA(
    lp_sid_string: ?[*:0]const u8,
    lp_profile_path: ?[*:0]const u8,
    lp_computer_name: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn DeleteProfileW(
    lp_sid_string: ?[*:0]const u16,
    lp_profile_path: ?[*:0]const u16,
    lp_computer_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "userenv" fn CreateProfile(
    psz_user_sid: ?[*:0]const u16,
    psz_user_name: ?[*:0]const u16,
    psz_profile_path: [*:0]u16,
    cch_profile_path: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn GetDefaultUserProfileDirectoryA(
    lp_profile_dir: ?[*:0]u8,
    lpcch_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn GetDefaultUserProfileDirectoryW(
    lp_profile_dir: ?[*:0]u16,
    lpcch_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn GetAllUsersProfileDirectoryA(
    lp_profile_dir: ?[*:0]u8,
    lpcch_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn GetAllUsersProfileDirectoryW(
    lp_profile_dir: ?[*:0]u16,
    lpcch_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn GetUserProfileDirectoryA(
    h_token: ?HANDLE,
    lp_profile_dir: ?[*:0]u8,
    lpcch_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn GetUserProfileDirectoryW(
    h_token: ?HANDLE,
    lp_profile_dir: ?[*:0]u16,
    lpcch_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "comctl32" fn SetWindowSubclass(
    h_wnd: ?HWND,
    pfn_subclass: ?SUBCLASSPROC,
    u_id_subclass: usize,
    dw_ref_data: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "comctl32" fn GetWindowSubclass(
    h_wnd: ?HWND,
    pfn_subclass: ?SUBCLASSPROC,
    u_id_subclass: usize,
    pdw_ref_data: ?*usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "comctl32" fn RemoveWindowSubclass(
    h_wnd: ?HWND,
    pfn_subclass: ?SUBCLASSPROC,
    u_id_subclass: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "comctl32" fn DefSubclassProc(
    h_wnd: ?HWND,
    u_msg: u32,
    w_param: WPARAM,
    l_param: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn SetWindowContextHelpId(
    param0: ?HWND,
    param1: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn GetWindowContextHelpId(
    param0: ?HWND,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn SetMenuContextHelpId(
    param0: ?HMENU,
    param1: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn GetMenuContextHelpId(
    param0: ?HMENU,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn WinHelpA(
    h_wnd_main: ?HWND,
    lpsz_help: ?[*:0]const u8,
    u_command: u32,
    dw_data: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "user32" fn WinHelpW(
    h_wnd_main: ?HWND,
    lpsz_help: ?[*:0]const u16,
    u_command: u32,
    dw_data: usize,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHSimpleIDListFromPath(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateItemFromIDList(
    pidl: ?*ITEMIDLIST,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateItemFromParsingName(
    psz_path: ?[*:0]const u16,
    pbc: ?*IBindCtx,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateItemWithParent(
    pidl_parent: ?*ITEMIDLIST,
    psf_parent: ?*IShellFolder,
    pidl: ?*ITEMIDLIST,
    riid: ?*const Guid,
    ppv_item: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateItemFromRelativeName(
    psi_parent: ?*IShellItem,
    psz_name: ?[*:0]const u16,
    pbc: ?*IBindCtx,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateItemInKnownFolder(
    kfid: ?*const Guid,
    dw_k_f_flags: u32,
    psz_item: ?[*:0]const u16,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHGetIDListFromObject(
    punk: ?*IUnknown,
    ppidl: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn SHGetItemFromObject(
    punk: ?*IUnknown,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHGetNameFromIDList(
    pidl: ?*ITEMIDLIST,
    sigdn_name: SIGDN,
    ppsz_name: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn SHGetItemFromDataObject(
    pdtobj: ?*IDataObject,
    dw_flags: DATAOBJ_GET_ITEM_FLAGS,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateShellItemArray(
    pidl_parent: ?*ITEMIDLIST,
    psf: ?*IShellFolder,
    cidl: u32,
    ppidl: ?[*]?*ITEMIDLIST,
    ppsi_item_array: ?*?*IShellItemArray,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateShellItemArrayFromDataObject(
    pdo: ?*IDataObject,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateShellItemArrayFromIDLists(
    cidl: u32,
    rgpidl: [*]?*ITEMIDLIST,
    ppsi_item_array: ?*?*IShellItemArray,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateShellItemArrayFromShellItem(
    psi: ?*IShellItem,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateAssociationRegistration(
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateDefaultExtractIcon(
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn SetCurrentProcessExplicitAppUserModelID(
    app_i_d: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn GetCurrentProcessExplicitAppUserModelID(
    app_i_d: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHGetTemporaryPropertyForItem(
    psi: ?*IShellItem,
    propkey: ?*const PROPERTYKEY,
    ppropvar: ?*PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHSetTemporaryPropertyForItem(
    psi: ?*IShellItem,
    propkey: ?*const PROPERTYKEY,
    propvar: ?*const PROPVARIANT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn SHShowManageLibraryUI(
    psi_library: ?*IShellItem,
    hwnd_owner: ?HWND,
    psz_title: ?[*:0]const u16,
    psz_instruction: ?[*:0]const u16,
    lmd_options: LIBRARYMANAGEDIALOGOPTIONS,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn SHResolveLibrary(
    psi_library: ?*IShellItem,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHAssocEnumHandlers(
    psz_extra: ?[*:0]const u16,
    af_filter: ASSOC_FILTER,
    pp_enum_handler: ?*?*IEnumAssocHandlers,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn SHAssocEnumHandlersForProtocolByApplication(
    protocol: ?[*:0]const u16,
    riid: ?*const Guid,
    enum_handlers: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "ole32" fn HMONITOR_UserSize(
    param0: ?*u32,
    param1: u32,
    param2: ?*?HMONITOR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ole32" fn HMONITOR_UserMarshal(
    param0: ?*u32,
    param1: ?*u8,
    param2: ?*?HMONITOR,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

pub extern "ole32" fn HMONITOR_UserUnmarshal(
    param0: ?*u32,
    param1: [*:0]u8,
    param2: ?*?HMONITOR,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

pub extern "ole32" fn HMONITOR_UserFree(
    param0: ?*u32,
    param1: ?*?HMONITOR,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "ole32" fn HMONITOR_UserSize64(
    param0: ?*u32,
    param1: u32,
    param2: ?*?HMONITOR,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "ole32" fn HMONITOR_UserMarshal64(
    param0: ?*u32,
    param1: ?*u8,
    param2: ?*?HMONITOR,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

pub extern "ole32" fn HMONITOR_UserUnmarshal64(
    param0: ?*u32,
    param1: [*:0]u8,
    param2: ?*?HMONITOR,
) callconv(@import("std").os.windows.WINAPI) ?*u8;

pub extern "ole32" fn HMONITOR_UserFree64(
    param0: ?*u32,
    param1: ?*?HMONITOR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateDefaultPropertiesOp(
    psi: ?*IShellItem,
    pp_file_op: ?*?*IFileOperation,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHSetDefaultProperties(
    hwnd: ?HWND,
    psi: ?*IShellItem,
    dw_file_op_flags: u32,
    pfops: ?*IFileOperationProgressSink,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetMalloc(
    pp_malloc: ?*?*IMalloc,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHAlloc(
    cb: usize,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHFree(
    pv: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetIconOverlayIndexA(
    psz_icon_path: ?[*:0]const u8,
    i_icon_index: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetIconOverlayIndexW(
    psz_icon_path: ?[*:0]const u16,
    i_icon_index: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILClone(
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILCloneFirst(
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILCombine(
    pidl1: ?*ITEMIDLIST,
    pidl2: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILFree(
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILGetNext(
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILGetSize(
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILFindChild(
    pidl_parent: ?*ITEMIDLIST,
    pidl_child: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILFindLastID(
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILRemoveLastID(
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILIsEqual(
    pidl1: ?*ITEMIDLIST,
    pidl2: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILIsParent(
    pidl1: ?*ITEMIDLIST,
    pidl2: ?*ITEMIDLIST,
    f_immediate: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILSaveToStream(
    pstm: ?*IStream,
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn ILLoadFromStreamEx(
    pstm: ?*IStream,
    pidl: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILCreateFromPathA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILCreateFromPathW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHILCreateFromPath(
    psz_path: ?[*:0]const u16,
    ppidl: ?*?*ITEMIDLIST,
    rgf_in_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ILAppendID(
    pidl: ?*ITEMIDLIST,
    pmkid: ?*SHITEMID,
    f_append: BOOL,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHGetPathFromIDListEx(
    pidl: ?*ITEMIDLIST,
    psz_path: [*:0]u16,
    cch_path: u32,
    u_opts: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetPathFromIDListA(
    pidl: ?*ITEMIDLIST,
    psz_path: *[260]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetPathFromIDListW(
    pidl: ?*ITEMIDLIST,
    psz_path: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHCreateDirectory(
    hwnd: ?HWND,
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHCreateDirectoryExA(
    hwnd: ?HWND,
    psz_path: ?[*:0]const u8,
    psa: ?*const SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHCreateDirectoryExW(
    hwnd: ?HWND,
    psz_path: ?[*:0]const u16,
    psa: ?*const SECURITY_ATTRIBUTES,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHOpenFolderAndSelectItems(
    pidl_folder: ?*ITEMIDLIST,
    cidl: u32,
    apidl: ?[*]?*ITEMIDLIST,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHCreateShellItem(
    pidl_parent: ?*ITEMIDLIST,
    psf_parent: ?*IShellFolder,
    pidl: ?*ITEMIDLIST,
    ppsi: ?*?*IShellItem,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetSpecialFolderLocation(
    hwnd: ?HWND,
    csidl: i32,
    ppidl: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHCloneSpecialIDList(
    hwnd: ?HWND,
    csidl: i32,
    f_create: BOOL,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetSpecialFolderPathA(
    hwnd: ?HWND,
    psz_path: *[260]u8,
    csidl: i32,
    f_create: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetSpecialFolderPathW(
    hwnd: ?HWND,
    psz_path: *[260]u16,
    csidl: i32,
    f_create: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHFlushSFCache() callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetFolderPathA(
    hwnd: ?HWND,
    csidl: i32,
    h_token: ?HANDLE,
    dw_flags: u32,
    psz_path: *[260]u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetFolderPathW(
    hwnd: ?HWND,
    csidl: i32,
    h_token: ?HANDLE,
    dw_flags: u32,
    psz_path: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetFolderLocation(
    hwnd: ?HWND,
    csidl: i32,
    h_token: ?HANDLE,
    dw_flags: u32,
    ppidl: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHSetFolderPathA(
    csidl: i32,
    h_token: ?HANDLE,
    dw_flags: u32,
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHSetFolderPathW(
    csidl: i32,
    h_token: ?HANDLE,
    dw_flags: u32,
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetFolderPathAndSubDirA(
    hwnd: ?HWND,
    csidl: i32,
    h_token: ?HANDLE,
    dw_flags: u32,
    psz_sub_dir: ?[*:0]const u8,
    psz_path: *[260]u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetFolderPathAndSubDirW(
    hwnd: ?HWND,
    csidl: i32,
    h_token: ?HANDLE,
    dw_flags: u32,
    psz_sub_dir: ?[*:0]const u16,
    psz_path: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHGetKnownFolderIDList(
    rfid: ?*const Guid,
    dw_flags: u32,
    h_token: ?HANDLE,
    ppidl: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHSetKnownFolderPath(
    rfid: ?*const Guid,
    dw_flags: u32,
    h_token: ?HANDLE,
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHGetKnownFolderPath(
    rfid: ?*const Guid,
    dw_flags: u32,
    h_token: ?HANDLE,
    ppsz_path: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn SHGetKnownFolderItem(
    rfid: ?*const Guid,
    flags: KNOWN_FOLDER_FLAG,
    h_token: ?HANDLE,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetSetFolderCustomSettings(
    pfcs: ?*SHFOLDERCUSTOMSETTINGS,
    psz_path: ?[*:0]const u16,
    dw_read_write: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHBrowseForFolderA(
    lpbi: ?*BROWSEINFOA,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHBrowseForFolderW(
    lpbi: ?*BROWSEINFOW,
) callconv(@import("std").os.windows.WINAPI) ?*ITEMIDLIST;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHLoadInProc(
    rclsid: ?*const Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetDesktopFolder(
    ppshf: ?*?*IShellFolder,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHChangeNotify(
    w_event_id: SHCNE_ID,
    u_flags: SHCNF_FLAGS,
    dw_item1: ?*const anyopaque,
    dw_item2: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHAddToRecentDocs(
    u_flags: u32,
    pv: ?*const anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHHandleUpdateImage(
    pidl_extra: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHUpdateImageA(
    psz_hash_item: ?[*:0]const u8,
    i_index: i32,
    u_flags: u32,
    i_image_index: i32,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHUpdateImageW(
    psz_hash_item: ?[*:0]const u16,
    i_index: i32,
    u_flags: u32,
    i_image_index: i32,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHChangeNotifyRegister(
    hwnd: ?HWND,
    f_sources: SHCNRF_SOURCE,
    f_events: i32,
    w_msg: u32,
    c_entries: i32,
    pshcne: ?*const SHChangeNotifyEntry,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHChangeNotifyDeregister(
    ul_i_d: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHChangeNotification_Lock(
    h_change: ?HANDLE,
    dw_proc_id: u32,
    pppidl: ?*?*?*ITEMIDLIST,
    pl_event: ?*i32,
) callconv(@import("std").os.windows.WINAPI) ShFindChangeNotificationHandle;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHChangeNotification_Unlock(
    h_lock: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetRealIDL(
    psf: ?*IShellFolder,
    pidl_simple: ?*ITEMIDLIST,
    ppidl_real: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetInstanceExplorer(
    ppunk: ?*?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetDataFromIDListA(
    psf: ?*IShellFolder,
    pidl: ?*ITEMIDLIST,
    n_format: SHGDFIL_FORMAT,
    // TODO: what to do with BytesParamIndex 4?
    pv: ?*anyopaque,
    cb: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetDataFromIDListW(
    psf: ?*IShellFolder,
    pidl: ?*ITEMIDLIST,
    n_format: SHGDFIL_FORMAT,
    // TODO: what to do with BytesParamIndex 4?
    pv: ?*anyopaque,
    cb: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn RestartDialog(
    hwnd: ?HWND,
    psz_prompt: ?[*:0]const u16,
    dw_return: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn RestartDialogEx(
    hwnd: ?HWND,
    psz_prompt: ?[*:0]const u16,
    dw_return: u32,
    dw_reason_code: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHCoCreateInstance(
    psz_c_l_s_i_d: ?[*:0]const u16,
    pclsid: ?*const Guid,
    p_unk_outer: ?*IUnknown,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateDataObject(
    pidl_folder: ?*ITEMIDLIST,
    cidl: u32,
    apidl: ?[*]?*ITEMIDLIST,
    pdt_inner: ?*IDataObject,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn CIDLData_CreateFromIDArray(
    pidl_folder: ?*ITEMIDLIST,
    cidl: u32,
    apidl: ?[*]?*ITEMIDLIST,
    ppdtobj: ?*?*IDataObject,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHCreateStdEnumFmtEtc(
    cfmt: u32,
    afmt: [*]const FORMATETC,
    ppenum_format_etc: ?*?*IEnumFORMATETC,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHDoDragDrop(
    hwnd: ?HWND,
    pdata: ?*IDataObject,
    pdsrc: ?*IDropSource,
    dw_effect: u32,
    pdw_effect: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn DAD_SetDragImage(
    him: ?HIMAGELIST,
    ppt_offset: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn DAD_DragEnterEx(
    hwnd_target: ?HWND,
    pt_start: POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn DAD_DragEnterEx2(
    hwnd_target: ?HWND,
    pt_start: POINT,
    pdt_object: ?*IDataObject,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn DAD_ShowDragImage(
    f_show: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn DAD_DragMove(
    pt: POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn DAD_DragLeave() callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn DAD_AutoScroll(
    hwnd: ?HWND,
    pad: ?*AUTO_SCROLL_DATA,
    ppt_now: ?*const POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ReadCabinetState(
    // TODO: what to do with BytesParamIndex 1?
    pcs: ?*CABINETSTATE,
    c_length: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn WriteCabinetState(
    pcs: ?*CABINETSTATE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn PathMakeUniqueName(
    psz_unique_name: [*:0]u16,
    cch_max: u32,
    psz_template: ?[*:0]const u16,
    psz_long_plate: ?[*:0]const u16,
    psz_dir: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn PathIsExe(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn PathCleanupSpec(
    psz_dir: ?[*:0]const u16,
    psz_spec: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) PCS_RET;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn PathResolve(
    psz_path: *[260]u16,
    dirs: ?*?*u16,
    f_flags: PRF_FLAGS,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn GetFileNameFromBrowse(
    hwnd: ?HWND,
    psz_file_path: [*:0]u16,
    cch_file_path: u32,
    psz_working_dir: ?[*:0]const u16,
    psz_def_ext: ?[*:0]const u16,
    psz_filters: ?[*:0]const u16,
    psz_title: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn DriveType(
    i_drive: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn RealDriveType(
    i_drive: i32,
    f_o_k_to_hit_net: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn IsNetDrive(
    i_drive: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn Shell_MergeMenus(
    hm_dst: ?HMENU,
    hm_src: ?HMENU,
    u_insert: u32,
    u_i_d_adjust: u32,
    u_i_d_adjust_max: u32,
    u_flags: MM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHObjectProperties(
    hwnd: ?HWND,
    shop_object_type: SHOP_TYPE,
    psz_object_name: ?[*:0]const u16,
    psz_property_page: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHFormatDrive(
    hwnd: ?HWND,
    drive: u32,
    fmt_i_d: SHFMT_ID,
    options: SHFMT_OPT,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHDestroyPropSheetExtArray(
    hpsxa: ?HPSXA,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHAddFromPropSheetExtArray(
    hpsxa: ?HPSXA,
    lpfn_add_page: ?LPFNSVADDPROPSHEETPAGE,
    l_param: LPARAM,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHReplaceFromPropSheetExtArray(
    hpsxa: ?HPSXA,
    u_page_i_d: u32,
    lpfn_replace_with: ?LPFNSVADDPROPSHEETPAGE,
    l_param: LPARAM,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn OpenRegStream(
    hkey: ?HKEY,
    psz_subkey: ?[*:0]const u16,
    psz_value: ?[*:0]const u16,
    grf_mode: u32,
    retval: *?*IStream,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHFindFiles(
    pidl_folder: ?*ITEMIDLIST,
    pidl_save_file: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn PathGetShortPath(
    psz_long_path: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn PathYetAnotherMakeUniqueName(
    psz_unique_name: *[260]u16,
    psz_path: ?[*:0]const u16,
    psz_short: ?[*:0]const u16,
    psz_file_spec: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn Win32DeleteFile(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHRestricted(
    rest: RESTRICTIONS,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SignalFileOpen(
    pidl: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn AssocGetDetailsOfPropKey(
    psf: ?*IShellFolder,
    pidl: ?*ITEMIDLIST,
    pkey: ?*const PROPERTYKEY,
    pv: ?*VARIANT,
    pf_found_prop_key: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHStartNetConnectionDialogW(
    hwnd: ?HWND,
    psz_remote_name: ?[*:0]const u16,
    dw_type: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHDefExtractIconA(
    psz_icon_file: ?[*:0]const u8,
    i_index: i32,
    u_flags: u32,
    phicon_large: ?*?HICON,
    phicon_small: ?*?HICON,
    n_icon_size: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHDefExtractIconW(
    psz_icon_file: ?[*:0]const u16,
    i_index: i32,
    u_flags: u32,
    phicon_large: ?*?HICON,
    phicon_small: ?*?HICON,
    n_icon_size: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHOpenWithDialog(
    hwnd_parent: ?HWND,
    poainfo: ?*const OPENASINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn Shell_GetImageLists(
    phiml: ?*?HIMAGELIST,
    phiml_small: ?*?HIMAGELIST,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn Shell_GetCachedImageIndex(
    pwsz_icon_path: ?[*:0]const u16,
    i_icon_index: i32,
    u_icon_flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn Shell_GetCachedImageIndexA(
    psz_icon_path: ?[*:0]const u8,
    i_icon_index: i32,
    u_icon_flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn Shell_GetCachedImageIndexW(
    psz_icon_path: ?[*:0]const u16,
    i_icon_index: i32,
    u_icon_flags: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHValidateUNC(
    hwnd_owner: ?HWND,
    psz_file: ?PWSTR,
    f_connect: VALIDATEUNC_OPTION,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHSetInstanceExplorer(
    punk: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn IsUserAnAdmin() callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHShellFolderView_Message(
    hwnd_main: ?HWND,
    u_msg: u32,
    l_param: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHCreateShellFolderView(
    pcsfv: ?*const SFV_CREATE,
    ppsv: ?*?*IShellView,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn CDefFolderMenu_Create2(
    pidl_folder: ?*ITEMIDLIST,
    hwnd: ?HWND,
    cidl: u32,
    apidl: ?[*]?*ITEMIDLIST,
    psf: ?*IShellFolder,
    pfn: ?LPFNDFMCALLBACK,
    n_keys: u32,
    ahkeys: ?[*]const ?HKEY,
    ppcm: ?*?*IContextMenu,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHCreateDefaultContextMenu(
    pdcm: ?*const DEFCONTEXTMENU,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHFind_InitMenuPopup(
    hmenu: ?HMENU,
    hwnd_owner: ?HWND,
    id_cmd_first: u32,
    id_cmd_last: u32,
    retval: *?*IContextMenu,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHCreateShellFolderViewEx(
    pcsfv: ?*CSFV,
    ppsv: ?*?*IShellView,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetSetSettings(
    lpss: ?*SHELLSTATEA,
    dw_mask: SSF_MASK,
    b_set: BOOL,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetSettings(
    psfs: ?*SHELLFLAGSTATE,
    dw_mask: u32,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHBindToParent(
    pidl: ?*ITEMIDLIST,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
    ppidl_last: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHBindToFolderIDListParent(
    psf_root: ?*IShellFolder,
    pidl: ?*ITEMIDLIST,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
    ppidl_last: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHBindToFolderIDListParentEx(
    psf_root: ?*IShellFolder,
    pidl: ?*ITEMIDLIST,
    ppbc: ?*IBindCtx,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
    ppidl_last: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHBindToObject(
    psf: ?*IShellFolder,
    pidl: ?*ITEMIDLIST,
    pbc: ?*IBindCtx,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHParseDisplayName(
    psz_name: ?[*:0]const u16,
    pbc: ?*IBindCtx,
    ppidl: ?*?*ITEMIDLIST,
    sfgao_in: u32,
    psfgao_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHPathPrepareForWriteA(
    hwnd: ?HWND,
    punk_enable_modless: ?*IUnknown,
    psz_path: ?[*:0]const u8,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHPathPrepareForWriteW(
    hwnd: ?HWND,
    punk_enable_modless: ?*IUnknown,
    psz_path: ?[*:0]const u16,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHCreateFileExtractIconW(
    psz_file: ?[*:0]const u16,
    dw_file_attributes: u32,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHLimitInputEdit(
    hwnd_edit: ?HWND,
    psf: ?*IShellFolder,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetAttributesFromDataObject(
    pdo: ?*IDataObject,
    dw_attribute_mask: u32,
    pdw_attributes: ?*u32,
    pc_items: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHMapPIDLToSystemImageListIndex(
    pshf: ?*IShellFolder,
    pidl: ?*ITEMIDLIST,
    pi_index_sel: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHCLSIDFromString(
    psz: ?[*:0]const u16,
    pclsid: ?*Guid,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn PickIconDlg(
    hwnd: ?HWND,
    psz_icon_path: [*:0]u16,
    cch_icon_path: u32,
    pi_icon_index: ?*i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn StgMakeUniqueName(
    pstg_parent: ?*IStorage,
    psz_file_spec: ?[*:0]const u16,
    grf_mode: u32,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHChangeNotifyRegisterThread(
    status: SCNRT_STATUS,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "shell32" fn PathQualify(
    psz: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn PathIsSlowA(
    psz_file: ?[*:0]const u8,
    dw_attr: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn PathIsSlowW(
    psz_file: ?[*:0]const u16,
    dw_attr: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHCreatePropSheetExtArray(
    h_key: ?HKEY,
    psz_sub_key: ?[*:0]const u16,
    max_iface: u32,
) callconv(@import("std").os.windows.WINAPI) ?HPSXA;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHOpenPropSheetW(
    psz_caption: ?[*:0]const u16,
    ahkeys: ?[*]?HKEY,
    ckeys: u32,
    pclsid_default: ?*const Guid,
    pdtobj: ?*IDataObject,
    psb: ?*IShellBrowser,
    p_start_page: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shdocvw" fn SoftwareUpdateMessageBox(
    h_wnd: ?HWND,
    psz_dist_unit: ?[*:0]const u16,
    dw_flags: u32,
    psdi: ?*SOFTDISTINFO,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHMultiFileProperties(
    pdtobj: ?*IDataObject,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHCreateQueryCancelAutoPlayMoniker(
    ppmoniker: ?*?*IMoniker,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "shdocvw" fn ImportPrivacySettings(
    psz_filename: ?[*:0]const u16,
    pf_parse_privacy_preferences: ?*BOOL,
    pf_parse_per_site_rules: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-shcore-scaling-l1-1-0" fn GetScaleFactorForDevice(
    device_type: DISPLAY_DEVICE_TYPE,
) callconv(@import("std").os.windows.WINAPI) DEVICE_SCALE_FACTOR;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-shcore-scaling-l1-1-0" fn RegisterScaleChangeNotifications(
    display_device: DISPLAY_DEVICE_TYPE,
    hwnd_notify: ?HWND,
    u_msg_notify: u32,
    pdw_cookie: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-shcore-scaling-l1-1-0" fn RevokeScaleChangeNotifications(
    display_device: DISPLAY_DEVICE_TYPE,
    dw_cookie: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "api-ms-win-shcore-scaling-l1-1-1" fn GetScaleFactorForMonitor(
    h_mon: ?HMONITOR,
    p_scale: ?*DEVICE_SCALE_FACTOR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "api-ms-win-shcore-scaling-l1-1-1" fn RegisterScaleChangeEvent(
    h_event: ?HANDLE,
    pdw_cookie: ?*usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "api-ms-win-shcore-scaling-l1-1-1" fn UnregisterScaleChangeEvent(
    dw_cookie: usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.1'
pub extern "api-ms-win-shcore-scaling-l1-1-2" fn GetDpiForShellUIComponent(
    param0: SHELL_UI_COMPONENT,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn CommandLineToArgvW(
    lp_cmd_line: ?[*:0]const u16,
    p_num_args: ?*i32,
) callconv(@import("std").os.windows.WINAPI) ?*?PWSTR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn DragQueryFileA(
    h_drop: ?HDROP,
    i_file: u32,
    lpsz_file: ?[*:0]u8,
    cch: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn DragQueryFileW(
    h_drop: ?HDROP,
    i_file: u32,
    lpsz_file: ?[*:0]u16,
    cch: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn DragQueryPoint(
    h_drop: ?HDROP,
    ppt: ?*POINT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn DragFinish(
    h_drop: ?HDROP,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn DragAcceptFiles(
    h_wnd: ?HWND,
    f_accept: BOOL,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ShellExecuteA(
    hwnd: ?HWND,
    lp_operation: ?[*:0]const u8,
    lp_file: ?[*:0]const u8,
    lp_parameters: ?[*:0]const u8,
    lp_directory: ?[*:0]const u8,
    n_show_cmd: i32,
) callconv(@import("std").os.windows.WINAPI) ?HINSTANCE;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ShellExecuteW(
    hwnd: ?HWND,
    lp_operation: ?[*:0]const u16,
    lp_file: ?[*:0]const u16,
    lp_parameters: ?[*:0]const u16,
    lp_directory: ?[*:0]const u16,
    n_show_cmd: i32,
) callconv(@import("std").os.windows.WINAPI) ?HINSTANCE;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn FindExecutableA(
    lp_file: ?[*:0]const u8,
    lp_directory: ?[*:0]const u8,
    lp_result: *[260]u8,
) callconv(@import("std").os.windows.WINAPI) ?HINSTANCE;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn FindExecutableW(
    lp_file: ?[*:0]const u16,
    lp_directory: ?[*:0]const u16,
    lp_result: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) ?HINSTANCE;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ShellAboutA(
    h_wnd: ?HWND,
    sz_app: ?[*:0]const u8,
    sz_other_stuff: ?[*:0]const u8,
    h_icon: ?HICON,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ShellAboutW(
    h_wnd: ?HWND,
    sz_app: ?[*:0]const u16,
    sz_other_stuff: ?[*:0]const u16,
    h_icon: ?HICON,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn DuplicateIcon(
    h_inst: ?HINSTANCE,
    h_icon: ?HICON,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ExtractAssociatedIconA(
    h_inst: ?HINSTANCE,
    psz_icon_path: *[128]u8,
    pi_icon: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ExtractAssociatedIconW(
    h_inst: ?HINSTANCE,
    psz_icon_path: *[128]u16,
    pi_icon: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ExtractAssociatedIconExA(
    h_inst: ?HINSTANCE,
    psz_icon_path: *[128]u8,
    pi_icon_index: ?*u16,
    pi_icon_id: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ExtractAssociatedIconExW(
    h_inst: ?HINSTANCE,
    psz_icon_path: *[128]u16,
    pi_icon_index: ?*u16,
    pi_icon_id: ?*u16,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ExtractIconA(
    h_inst: ?HINSTANCE,
    psz_exe_file_name: ?[*:0]const u8,
    n_icon_index: u32,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ExtractIconW(
    h_inst: ?HINSTANCE,
    psz_exe_file_name: ?[*:0]const u16,
    n_icon_index: u32,
) callconv(@import("std").os.windows.WINAPI) ?HICON;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHAppBarMessage(
    dw_message: u32,
    p_data: ?*APPBARDATA,
) callconv(@import("std").os.windows.WINAPI) usize;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn DoEnvironmentSubstA(
    psz_src: [*:0]u8,
    cch_src: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn DoEnvironmentSubstW(
    psz_src: [*:0]u16,
    cch_src: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ExtractIconExA(
    lpsz_file: ?[*:0]const u8,
    n_icon_index: i32,
    phicon_large: ?[*]?HICON,
    phicon_small: ?[*]?HICON,
    n_icons: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ExtractIconExW(
    lpsz_file: ?[*:0]const u16,
    n_icon_index: i32,
    phicon_large: ?[*]?HICON,
    phicon_small: ?[*]?HICON,
    n_icons: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHFileOperationA(
    lp_file_op: ?*SHFILEOPSTRUCTA,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHFileOperationW(
    lp_file_op: ?*SHFILEOPSTRUCTW,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHFreeNameMappings(
    h_name_mappings: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ShellExecuteExA(
    p_exec_info: ?*SHELLEXECUTEINFOA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn ShellExecuteExW(
    p_exec_info: ?*SHELLEXECUTEINFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHCreateProcessAsUserW(
    pscpi: ?*SHCREATEPROCESSINFOW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHEvaluateSystemCommandTemplate(
    psz_cmd_template: ?[*:0]const u16,
    ppsz_application: ?*?PWSTR,
    ppsz_command_line: ?*?PWSTR,
    ppsz_parameters: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn AssocCreateForClasses(
    rg_classes: [*]const ASSOCIATIONELEMENT,
    c_classes: u32,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHQueryRecycleBinA(
    psz_root_path: ?[*:0]const u8,
    p_s_h_query_r_b_info: ?*SHQUERYRBINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHQueryRecycleBinW(
    psz_root_path: ?[*:0]const u16,
    p_s_h_query_r_b_info: ?*SHQUERYRBINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHEmptyRecycleBinA(
    hwnd: ?HWND,
    psz_root_path: ?[*:0]const u8,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHEmptyRecycleBinW(
    hwnd: ?HWND,
    psz_root_path: ?[*:0]const u16,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHQueryUserNotificationState(
    pquns: ?*QUERY_USER_NOTIFICATION_STATE,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn Shell_NotifyIconA(
    dw_message: NOTIFY_ICON_MESSAGE,
    lp_data: ?*NOTIFYICONDATAA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn Shell_NotifyIconW(
    dw_message: NOTIFY_ICON_MESSAGE,
    lp_data: ?*NOTIFYICONDATAW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shell32" fn Shell_NotifyIconGetRect(
    identifier: ?*const NOTIFYICONIDENTIFIER,
    icon_location: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetFileInfoA(
    psz_path: ?[*:0]const u8,
    dw_file_attributes: FILE_FLAGS_AND_ATTRIBUTES,
    // TODO: what to do with BytesParamIndex 3?
    psfi: ?*SHFILEINFOA,
    cb_file_info: u32,
    u_flags: SHGFI_FLAGS,
) callconv(@import("std").os.windows.WINAPI) usize;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetFileInfoW(
    psz_path: ?[*:0]const u16,
    dw_file_attributes: FILE_FLAGS_AND_ATTRIBUTES,
    // TODO: what to do with BytesParamIndex 3?
    psfi: ?*SHFILEINFOW,
    cb_file_info: u32,
    u_flags: SHGFI_FLAGS,
) callconv(@import("std").os.windows.WINAPI) usize;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHGetStockIconInfo(
    siid: SHSTOCKICONID,
    u_flags: u32,
    psii: ?*SHSTOCKICONINFO,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetDiskFreeSpaceExA(
    psz_directory_name: ?[*:0]const u8,
    pul_free_bytes_available_to_caller: ?*ULARGE_INTEGER,
    pul_total_number_of_bytes: ?*ULARGE_INTEGER,
    pul_total_number_of_free_bytes: ?*ULARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetDiskFreeSpaceExW(
    psz_directory_name: ?[*:0]const u16,
    pul_free_bytes_available_to_caller: ?*ULARGE_INTEGER,
    pul_total_number_of_bytes: ?*ULARGE_INTEGER,
    pul_total_number_of_free_bytes: ?*ULARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetNewLinkInfoA(
    psz_link_to: ?[*:0]const u8,
    psz_dir: ?[*:0]const u8,
    psz_name: *[260]u8,
    pf_must_copy: ?*BOOL,
    u_flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHGetNewLinkInfoW(
    psz_link_to: ?[*:0]const u16,
    psz_dir: ?[*:0]const u16,
    psz_name: *[260]u16,
    pf_must_copy: ?*BOOL,
    u_flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHInvokePrinterCommandA(
    hwnd: ?HWND,
    u_action: u32,
    lp_buf1: ?[*:0]const u8,
    lp_buf2: ?[*:0]const u8,
    f_modal: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHInvokePrinterCommandW(
    hwnd: ?HWND,
    u_action: u32,
    lp_buf1: ?[*:0]const u16,
    lp_buf2: ?[*:0]const u16,
    f_modal: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHLoadNonloadedIconOverlayIdentifiers() callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shell32" fn SHIsFileAvailableOffline(
    pwsz_path: ?[*:0]const u16,
    pdw_status: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHSetLocalizedName(
    psz_path: ?[*:0]const u16,
    psz_res_module: ?[*:0]const u16,
    ids_res: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHRemoveLocalizedName(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHGetLocalizedName(
    psz_path: ?[*:0]const u16,
    psz_res_module: [*:0]u16,
    cch: u32,
    pids_res: ?*i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn ShellMessageBoxA(
    h_app_inst: ?HINSTANCE,
    h_wnd: ?HWND,
    lpc_text: ?[*:0]const u8,
    lpc_title: ?[*:0]const u8,
    fu_style: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn ShellMessageBoxW(
    h_app_inst: ?HINSTANCE,
    h_wnd: ?HWND,
    lpc_text: ?[*:0]const u16,
    lpc_title: ?[*:0]const u16,
    fu_style: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub extern "shell32" fn IsLFNDriveA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "shell32" fn IsLFNDriveW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHEnumerateUnreadMailAccountsW(
    h_key_user: ?HKEY,
    dw_index: u32,
    psz_mail_address: [*:0]u16,
    cch_mail_address: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetUnreadMailCountW(
    h_key_user: ?HKEY,
    psz_mail_address: ?[*:0]const u16,
    pdw_count: ?*u32,
    p_file_time: ?*FILETIME,
    psz_shell_execute_command: ?[*:0]u16,
    cch_shell_execute_command: i32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHSetUnreadMailCountW(
    psz_mail_address: ?[*:0]const u16,
    dw_count: u32,
    psz_shell_execute_command: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHTestTokenMembership(
    h_token: ?HANDLE,
    ul_r_i_d: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shell32" fn SHGetImageList(
    i_image_list: i32,
    riid: ?*const Guid,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn InitNetworkAddressControl() callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shell32" fn SHGetDriveMedia(
    psz_drive: ?[*:0]const u16,
    pdw_media_content: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrChrA(
    psz_start: ?[*:0]const u8,
    w_match: u16,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrChrW(
    psz_start: ?[*:0]const u16,
    w_match: u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrChrIA(
    psz_start: ?[*:0]const u8,
    w_match: u16,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrChrIW(
    psz_start: ?[*:0]const u16,
    w_match: u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn StrChrNW(
    psz_start: ?[*:0]const u16,
    w_match: u16,
    cch_max: u32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn StrChrNIW(
    psz_start: ?[*:0]const u16,
    w_match: u16,
    cch_max: u32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpNA(
    psz1: ?[*:0]const u8,
    psz2: ?[*:0]const u8,
    n_char: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpNW(
    psz1: ?[*:0]const u16,
    psz2: ?[*:0]const u16,
    n_char: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpNIA(
    psz1: ?[*:0]const u8,
    psz2: ?[*:0]const u8,
    n_char: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpNIW(
    psz1: ?[*:0]const u16,
    psz2: ?[*:0]const u16,
    n_char: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCSpnA(
    psz_str: ?[*:0]const u8,
    psz_set: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCSpnW(
    psz_str: ?[*:0]const u16,
    psz_set: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCSpnIA(
    psz_str: ?[*:0]const u8,
    psz_set: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCSpnIW(
    psz_str: ?[*:0]const u16,
    psz_set: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrDupA(
    psz_srch: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrDupW(
    psz_srch: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn StrFormatByteSizeEx(
    ull: u64,
    flags: SFBS_FLAGS,
    psz_buf: [*:0]u16,
    cch_buf: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrFormatByteSizeA(
    dw: u32,
    psz_buf: [*:0]u8,
    cch_buf: u32,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrFormatByteSize64A(
    qdw: i64,
    psz_buf: [*:0]u8,
    cch_buf: u32,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrFormatByteSizeW(
    qdw: i64,
    psz_buf: [*:0]u16,
    cch_buf: u32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrFormatKBSizeW(
    qdw: i64,
    psz_buf: [*:0]u16,
    cch_buf: u32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrFormatKBSizeA(
    qdw: i64,
    psz_buf: [*:0]u8,
    cch_buf: u32,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrFromTimeIntervalA(
    psz_out: [*:0]u8,
    cch_max: u32,
    dw_time_m_s: u32,
    digits: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrFromTimeIntervalW(
    psz_out: [*:0]u16,
    cch_max: u32,
    dw_time_m_s: u32,
    digits: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrIsIntlEqualA(
    f_case_sens: BOOL,
    psz_string1: ?[*:0]const u8,
    psz_string2: ?[*:0]const u8,
    n_char: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrIsIntlEqualW(
    f_case_sens: BOOL,
    psz_string1: ?[*:0]const u16,
    psz_string2: ?[*:0]const u16,
    n_char: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrNCatA(
    psz1: [*:0]u8,
    psz2: ?[*:0]const u8,
    cch_max: i32,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrNCatW(
    psz1: [*:0]u16,
    psz2: ?[*:0]const u16,
    cch_max: i32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrPBrkA(
    psz: ?[*:0]const u8,
    psz_set: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrPBrkW(
    psz: ?[*:0]const u16,
    psz_set: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrRChrA(
    psz_start: ?[*:0]const u8,
    psz_end: ?[*:0]const u8,
    w_match: u16,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrRChrW(
    psz_start: ?[*:0]const u16,
    psz_end: ?[*:0]const u16,
    w_match: u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrRChrIA(
    psz_start: ?[*:0]const u8,
    psz_end: ?[*:0]const u8,
    w_match: u16,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrRChrIW(
    psz_start: ?[*:0]const u16,
    psz_end: ?[*:0]const u16,
    w_match: u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrRStrIA(
    psz_source: ?[*:0]const u8,
    psz_last: ?[*:0]const u8,
    psz_srch: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrRStrIW(
    psz_source: ?[*:0]const u16,
    psz_last: ?[*:0]const u16,
    psz_srch: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrSpnA(
    psz: ?[*:0]const u8,
    psz_set: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrSpnW(
    psz: ?[*:0]const u16,
    psz_set: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrStrA(
    psz_first: ?[*:0]const u8,
    psz_srch: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrStrW(
    psz_first: ?[*:0]const u16,
    psz_srch: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrStrIA(
    psz_first: ?[*:0]const u8,
    psz_srch: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrStrIW(
    psz_first: ?[*:0]const u16,
    psz_srch: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn StrStrNW(
    psz_first: ?[*:0]const u16,
    psz_srch: ?[*:0]const u16,
    cch_max: u32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn StrStrNIW(
    psz_first: ?[*:0]const u16,
    psz_srch: ?[*:0]const u16,
    cch_max: u32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrToIntA(
    psz_src: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrToIntW(
    psz_src: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrToIntExA(
    psz_string: ?[*:0]const u8,
    dw_flags: i32,
    pi_ret: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrToIntExW(
    psz_string: ?[*:0]const u16,
    dw_flags: i32,
    pi_ret: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrToInt64ExA(
    psz_string: ?[*:0]const u8,
    dw_flags: i32,
    pll_ret: ?*i64,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrToInt64ExW(
    psz_string: ?[*:0]const u16,
    dw_flags: i32,
    pll_ret: ?*i64,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrTrimA(
    psz: ?PSTR,
    psz_trim_chars: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrTrimW(
    psz: ?PWSTR,
    psz_trim_chars: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCatW(
    psz1: ?PWSTR,
    psz2: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpW(
    psz1: ?[*:0]const u16,
    psz2: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpIW(
    psz1: ?[*:0]const u16,
    psz2: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCpyW(
    psz1: ?PWSTR,
    psz2: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCpyNW(
    psz_dst: [*:0]u16,
    psz_src: ?[*:0]const u16,
    cch_max: i32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCatBuffW(
    psz_dest: [*:0]u16,
    psz_src: ?[*:0]const u16,
    cch_dest_buff_size: i32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCatBuffA(
    psz_dest: [*:0]u8,
    psz_src: ?[*:0]const u8,
    cch_dest_buff_size: i32,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn ChrCmpIA(
    w1: u16,
    w2: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn ChrCmpIW(
    w1: u16,
    w2: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn wvnsprintfA(
    psz_dest: [*:0]u8,
    cch_dest: i32,
    psz_fmt: ?[*:0]const u8,
    arglist: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn wvnsprintfW(
    psz_dest: [*:0]u16,
    cch_dest: i32,
    psz_fmt: ?[*:0]const u16,
    arglist: ?*i8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn wnsprintfA(
    psz_dest: [*:0]u8,
    cch_dest: i32,
    psz_fmt: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn wnsprintfW(
    psz_dest: [*:0]u16,
    cch_dest: i32,
    psz_fmt: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrRetToStrA(
    pstr: ?*STRRET,
    pidl: ?*ITEMIDLIST,
    ppsz: ?*?PSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrRetToStrW(
    pstr: ?*STRRET,
    pidl: ?*ITEMIDLIST,
    ppsz: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrRetToBufA(
    pstr: ?*STRRET,
    pidl: ?*ITEMIDLIST,
    psz_buf: [*:0]u8,
    cch_buf: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrRetToBufW(
    pstr: ?*STRRET,
    pidl: ?*ITEMIDLIST,
    psz_buf: [*:0]u16,
    cch_buf: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHStrDupA(
    psz: ?[*:0]const u8,
    ppwsz: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHStrDupW(
    psz: ?[*:0]const u16,
    ppwsz: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn StrCmpLogicalW(
    psz1: ?[*:0]const u16,
    psz2: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn StrCatChainW(
    psz_dst: [*:0]u16,
    cch_dst: u32,
    ich_at: u32,
    psz_src: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn StrRetToBSTR(
    pstr: ?*STRRET,
    pidl: ?*ITEMIDLIST,
    pbstr: ?*?BSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHLoadIndirectString(
    psz_source: ?[*:0]const u16,
    psz_out_buf: [*:0]u16,
    cch_out_buf: u32,
    ppv_reserved: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IsCharSpaceA(
    wch: CHAR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IsCharSpaceW(
    wch: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpCA(
    psz_str1: ?[*:0]const u8,
    psz_str2: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpCW(
    psz_str1: ?[*:0]const u16,
    psz_str2: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpICA(
    psz_str1: ?[*:0]const u8,
    psz_str2: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpICW(
    psz_str1: ?[*:0]const u16,
    psz_str2: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpNCA(
    psz_str1: ?[*:0]const u8,
    psz_str2: ?[*:0]const u8,
    n_char: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpNCW(
    psz_str1: ?[*:0]const u16,
    psz_str2: ?[*:0]const u16,
    n_char: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpNICA(
    psz_str1: ?[*:0]const u8,
    psz_str2: ?[*:0]const u8,
    n_char: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn StrCmpNICW(
    psz_str1: ?[*:0]const u16,
    psz_str2: ?[*:0]const u16,
    n_char: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IntlStrEqWorkerA(
    f_case_sens: BOOL,
    lp_string1: [*:0]const u8,
    lp_string2: [*:0]const u8,
    n_char: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IntlStrEqWorkerW(
    f_case_sens: BOOL,
    lp_string1: [*:0]const u16,
    lp_string2: [*:0]const u16,
    n_char: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathAddBackslashA(
    psz_path: *[260]u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathAddBackslashW(
    psz_path: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathAddExtensionA(
    psz_path: *[260]u8,
    psz_ext: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathAddExtensionW(
    psz_path: *[260]u16,
    psz_ext: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathAppendA(
    psz_path: *[260]u8,
    psz_more: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathAppendW(
    psz_path: *[260]u16,
    psz_more: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathBuildRootA(
    psz_root: *[4]u8,
    i_drive: i32,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathBuildRootW(
    psz_root: *[4]u16,
    i_drive: i32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCanonicalizeA(
    psz_buf: *[260]u8,
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCanonicalizeW(
    psz_buf: *[260]u16,
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCombineA(
    psz_dest: *[260]u8,
    psz_dir: ?[*:0]const u8,
    psz_file: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCombineW(
    psz_dest: *[260]u16,
    psz_dir: ?[*:0]const u16,
    psz_file: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCompactPathA(
    h_d_c: ?HDC,
    psz_path: *[260]u8,
    dx: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCompactPathW(
    h_d_c: ?HDC,
    psz_path: *[260]u16,
    dx: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCompactPathExA(
    psz_out: [*:0]u8,
    psz_src: ?[*:0]const u8,
    cch_max: u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCompactPathExW(
    psz_out: [*:0]u16,
    psz_src: ?[*:0]const u16,
    cch_max: u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCommonPrefixA(
    psz_file1: ?[*:0]const u8,
    psz_file2: ?[*:0]const u8,
    ach_path: ?*[260]u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCommonPrefixW(
    psz_file1: ?[*:0]const u16,
    psz_file2: ?[*:0]const u16,
    ach_path: ?*[260]u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFileExistsA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFileExistsW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFindExtensionA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFindExtensionW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFindFileNameA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFindFileNameW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFindNextComponentA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFindNextComponentW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFindOnPathA(
    psz_path: *[260]u8,
    ppsz_other_dirs: ?*?*i8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFindOnPathW(
    psz_path: *[260]u16,
    ppsz_other_dirs: ?*?*u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFindSuffixArrayA(
    psz_path: ?[*:0]const u8,
    apsz_suffix: [*]const ?[*:0]const u8,
    i_array_size: i32,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathFindSuffixArrayW(
    psz_path: ?[*:0]const u16,
    apsz_suffix: [*]const ?[*:0]const u16,
    i_array_size: i32,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathGetArgsA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathGetArgsW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsLFNFileSpecA(
    psz_name: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsLFNFileSpecW(
    psz_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathGetCharTypeA(
    ch: u8,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathGetCharTypeW(
    ch: u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathGetDriveNumberA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathGetDriveNumberW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsDirectoryA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsDirectoryW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsDirectoryEmptyA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsDirectoryEmptyW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsFileSpecA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsFileSpecW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsPrefixA(
    psz_prefix: ?[*:0]const u8,
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsPrefixW(
    psz_prefix: ?[*:0]const u16,
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsRelativeA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsRelativeW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsRootA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsRootW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsSameRootA(
    psz_path1: ?[*:0]const u8,
    psz_path2: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsSameRootW(
    psz_path1: ?[*:0]const u16,
    psz_path2: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsUNCA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsUNCW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsNetworkPathA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsNetworkPathW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsUNCServerA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsUNCServerW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsUNCServerShareA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsUNCServerShareW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsContentTypeA(
    psz_path: ?[*:0]const u8,
    psz_content_type: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsContentTypeW(
    psz_path: ?[*:0]const u16,
    psz_content_type: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsURLA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsURLW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathMakePrettyA(
    psz_path: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathMakePrettyW(
    psz_path: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathMatchSpecA(
    psz_file: ?[*:0]const u8,
    psz_spec: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathMatchSpecW(
    psz_file: ?[*:0]const u16,
    psz_spec: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn PathMatchSpecExA(
    psz_file: ?[*:0]const u8,
    psz_spec: ?[*:0]const u8,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn PathMatchSpecExW(
    psz_file: ?[*:0]const u16,
    psz_spec: ?[*:0]const u16,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathParseIconLocationA(
    psz_icon_file: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathParseIconLocationW(
    psz_icon_file: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathQuoteSpacesA(
    lpsz: *[260]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathQuoteSpacesW(
    lpsz: *[260]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRelativePathToA(
    psz_path: *[260]u8,
    psz_from: ?[*:0]const u8,
    dw_attr_from: u32,
    psz_to: ?[*:0]const u8,
    dw_attr_to: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRelativePathToW(
    psz_path: *[260]u16,
    psz_from: ?[*:0]const u16,
    dw_attr_from: u32,
    psz_to: ?[*:0]const u16,
    dw_attr_to: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRemoveArgsA(
    psz_path: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRemoveArgsW(
    psz_path: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRemoveBackslashA(
    psz_path: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRemoveBackslashW(
    psz_path: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRemoveBlanksA(
    psz_path: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRemoveBlanksW(
    psz_path: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRemoveExtensionA(
    psz_path: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRemoveExtensionW(
    psz_path: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRemoveFileSpecA(
    psz_path: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRemoveFileSpecW(
    psz_path: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRenameExtensionA(
    psz_path: *[260]u8,
    psz_ext: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathRenameExtensionW(
    psz_path: *[260]u16,
    psz_ext: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathSearchAndQualifyA(
    psz_path: ?[*:0]const u8,
    psz_buf: [*:0]u8,
    cch_buf: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathSearchAndQualifyW(
    psz_path: ?[*:0]const u16,
    psz_buf: [*:0]u16,
    cch_buf: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathSetDlgItemPathA(
    h_dlg: ?HWND,
    id: i32,
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathSetDlgItemPathW(
    h_dlg: ?HWND,
    id: i32,
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathSkipRootA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathSkipRootW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathStripPathA(
    psz_path: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathStripPathW(
    psz_path: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathStripToRootA(
    psz_path: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathStripToRootW(
    psz_path: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathUnquoteSpacesA(
    lpsz: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathUnquoteSpacesW(
    lpsz: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathMakeSystemFolderA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathMakeSystemFolderW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathUnmakeSystemFolderA(
    psz_path: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathUnmakeSystemFolderW(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsSystemFolderA(
    psz_path: ?[*:0]const u8,
    dw_attrb: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathIsSystemFolderW(
    psz_path: ?[*:0]const u16,
    dw_attrb: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathUndecorateA(
    psz_path: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathUndecorateW(
    psz_path: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathUnExpandEnvStringsA(
    psz_path: ?[*:0]const u8,
    psz_buf: [*:0]u8,
    cch_buf: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathUnExpandEnvStringsW(
    psz_path: ?[*:0]const u16,
    psz_buf: [*:0]u16,
    cch_buf: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlCompareA(
    psz1: ?[*:0]const u8,
    psz2: ?[*:0]const u8,
    f_ignore_slash: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlCompareW(
    psz1: ?[*:0]const u16,
    psz2: ?[*:0]const u16,
    f_ignore_slash: BOOL,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlCombineA(
    psz_base: ?[*:0]const u8,
    psz_relative: ?[*:0]const u8,
    psz_combined: ?[*:0]u8,
    pcch_combined: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlCombineW(
    psz_base: ?[*:0]const u16,
    psz_relative: ?[*:0]const u16,
    psz_combined: ?[*:0]u16,
    pcch_combined: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlCanonicalizeA(
    psz_url: ?[*:0]const u8,
    psz_canonicalized: [*:0]u8,
    pcch_canonicalized: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlCanonicalizeW(
    psz_url: ?[*:0]const u16,
    psz_canonicalized: [*:0]u16,
    pcch_canonicalized: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlIsOpaqueA(
    psz_u_r_l: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlIsOpaqueW(
    psz_u_r_l: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlIsNoHistoryA(
    psz_u_r_l: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlIsNoHistoryW(
    psz_u_r_l: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlIsA(
    psz_url: ?[*:0]const u8,
    url_is: URLIS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlIsW(
    psz_url: ?[*:0]const u16,
    url_is: URLIS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlGetLocationA(
    psz_u_r_l: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlGetLocationW(
    psz_u_r_l: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlUnescapeA(
    psz_url: ?PSTR,
    psz_unescaped: ?[*:0]u8,
    pcch_unescaped: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlUnescapeW(
    psz_url: ?PWSTR,
    psz_unescaped: ?[*:0]u16,
    pcch_unescaped: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlEscapeA(
    psz_url: ?[*:0]const u8,
    psz_escaped: [*:0]u8,
    pcch_escaped: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlEscapeW(
    psz_url: ?[*:0]const u16,
    psz_escaped: [*:0]u16,
    pcch_escaped: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlCreateFromPathA(
    psz_path: ?[*:0]const u8,
    psz_url: [*:0]u8,
    pcch_url: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlCreateFromPathW(
    psz_path: ?[*:0]const u16,
    psz_url: [*:0]u16,
    pcch_url: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCreateFromUrlA(
    psz_url: ?[*:0]const u8,
    psz_path: [*:0]u8,
    pcch_path: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn PathCreateFromUrlW(
    psz_url: ?[*:0]const u16,
    psz_path: [*:0]u16,
    pcch_path: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn PathCreateFromUrlAlloc(
    psz_in: ?[*:0]const u16,
    ppsz_out: ?*?PWSTR,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlHashA(
    psz_url: ?[*:0]const u8,
    // TODO: what to do with BytesParamIndex 2?
    pb_hash: ?*u8,
    cb_hash: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlHashW(
    psz_url: ?[*:0]const u16,
    // TODO: what to do with BytesParamIndex 2?
    pb_hash: ?*u8,
    cb_hash: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlGetPartW(
    psz_in: ?[*:0]const u16,
    psz_out: [*:0]u16,
    pcch_out: ?*u32,
    dw_part: u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlGetPartA(
    psz_in: ?[*:0]const u8,
    psz_out: [*:0]u8,
    pcch_out: ?*u32,
    dw_part: u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlApplySchemeA(
    psz_in: ?[*:0]const u8,
    psz_out: [*:0]u8,
    pcch_out: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn UrlApplySchemeW(
    psz_in: ?[*:0]const u16,
    psz_out: [*:0]u16,
    pcch_out: ?*u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn HashData(
    // TODO: what to do with BytesParamIndex 1?
    pb_data: ?*u8,
    cb_data: u32,
    // TODO: what to do with BytesParamIndex 3?
    pb_hash: ?*u8,
    cb_hash: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn UrlFixupW(
    pcsz_url: ?[*:0]const u16,
    psz_translated_url: [*:0]u16,
    cch_max: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn ParseURLA(
    pcsz_u_r_l: ?[*:0]const u8,
    ppu: ?*PARSEDURLA,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn ParseURLW(
    pcsz_u_r_l: ?[*:0]const u16,
    ppu: ?*PARSEDURLW,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHDeleteEmptyKeyA(
    hkey: ?HKEY,
    psz_sub_key: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHDeleteEmptyKeyW(
    hkey: ?HKEY,
    psz_sub_key: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHDeleteKeyA(
    hkey: ?HKEY,
    psz_sub_key: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHDeleteKeyW(
    hkey: ?HKEY,
    psz_sub_key: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegDuplicateHKey(
    hkey: ?HKEY,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHDeleteValueA(
    hkey: ?HKEY,
    psz_sub_key: ?[*:0]const u8,
    psz_value: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHDeleteValueW(
    hkey: ?HKEY,
    psz_sub_key: ?[*:0]const u16,
    psz_value: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHGetValueA(
    hkey: ?HKEY,
    psz_sub_key: ?[*:0]const u8,
    psz_value: ?[*:0]const u8,
    pdw_type: ?*u32,
    // TODO: what to do with BytesParamIndex 5?
    pv_data: ?*anyopaque,
    pcb_data: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHGetValueW(
    hkey: ?HKEY,
    psz_sub_key: ?[*:0]const u16,
    psz_value: ?[*:0]const u16,
    pdw_type: ?*u32,
    // TODO: what to do with BytesParamIndex 5?
    pv_data: ?*anyopaque,
    pcb_data: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHSetValueA(
    hkey: ?HKEY,
    psz_sub_key: ?[*:0]const u8,
    psz_value: ?[*:0]const u8,
    dw_type: u32,
    // TODO: what to do with BytesParamIndex 5?
    pv_data: ?*const anyopaque,
    cb_data: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHSetValueW(
    hkey: ?HKEY,
    psz_sub_key: ?[*:0]const u16,
    psz_value: ?[*:0]const u16,
    dw_type: u32,
    // TODO: what to do with BytesParamIndex 5?
    pv_data: ?*const anyopaque,
    cb_data: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHRegGetValueA(
    hkey: ?HKEY,
    psz_sub_key: ?[*:0]const u8,
    psz_value: ?[*:0]const u8,
    srrf_flags: i32,
    pdw_type: ?*u32,
    // TODO: what to do with BytesParamIndex 6?
    pv_data: ?*anyopaque,
    pcb_data: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHRegGetValueW(
    hkey: ?HKEY,
    psz_sub_key: ?[*:0]const u16,
    psz_value: ?[*:0]const u16,
    srrf_flags: i32,
    pdw_type: ?*u32,
    // TODO: what to do with BytesParamIndex 6?
    pv_data: ?*anyopaque,
    pcb_data: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn SHRegGetValueFromHKCUHKLM(
    pwsz_key: ?[*:0]const u16,
    pwsz_value: ?[*:0]const u16,
    srrf_flags: i32,
    pdw_type: ?*u32,
    // TODO: what to do with BytesParamIndex 5?
    pv_data: ?*anyopaque,
    pcb_data: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHQueryValueExA(
    hkey: ?HKEY,
    psz_value: ?[*:0]const u8,
    pdw_reserved: ?*u32,
    pdw_type: ?*u32,
    // TODO: what to do with BytesParamIndex 5?
    pv_data: ?*anyopaque,
    pcb_data: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHQueryValueExW(
    hkey: ?HKEY,
    psz_value: ?[*:0]const u16,
    pdw_reserved: ?*u32,
    pdw_type: ?*u32,
    // TODO: what to do with BytesParamIndex 5?
    pv_data: ?*anyopaque,
    pcb_data: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHEnumKeyExA(
    hkey: ?HKEY,
    dw_index: u32,
    psz_name: [*:0]u8,
    pcch_name: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHEnumKeyExW(
    hkey: ?HKEY,
    dw_index: u32,
    psz_name: [*:0]u16,
    pcch_name: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHEnumValueA(
    hkey: ?HKEY,
    dw_index: u32,
    psz_value_name: ?[*:0]u8,
    pcch_value_name: ?*u32,
    pdw_type: ?*u32,
    // TODO: what to do with BytesParamIndex 6?
    pv_data: ?*anyopaque,
    pcb_data: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHEnumValueW(
    hkey: ?HKEY,
    dw_index: u32,
    psz_value_name: ?[*:0]u16,
    pcch_value_name: ?*u32,
    pdw_type: ?*u32,
    // TODO: what to do with BytesParamIndex 6?
    pv_data: ?*anyopaque,
    pcb_data: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHQueryInfoKeyA(
    hkey: ?HKEY,
    pc_sub_keys: ?*u32,
    pcch_max_sub_key_len: ?*u32,
    pc_values: ?*u32,
    pcch_max_value_name_len: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHQueryInfoKeyW(
    hkey: ?HKEY,
    pc_sub_keys: ?*u32,
    pcch_max_sub_key_len: ?*u32,
    pc_values: ?*u32,
    pcch_max_value_name_len: ?*u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHCopyKeyA(
    hkey_src: ?HKEY,
    psz_src_sub_key: ?[*:0]const u8,
    hkey_dest: ?HKEY,
    f_reserved: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHCopyKeyW(
    hkey_src: ?HKEY,
    psz_src_sub_key: ?[*:0]const u16,
    hkey_dest: ?HKEY,
    f_reserved: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegGetPathA(
    h_key: ?HKEY,
    pcsz_sub_key: ?[*:0]const u8,
    pcsz_value: ?[*:0]const u8,
    psz_path: *[260]u8,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegGetPathW(
    h_key: ?HKEY,
    pcsz_sub_key: ?[*:0]const u16,
    pcsz_value: ?[*:0]const u16,
    psz_path: *[260]u16,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegSetPathA(
    h_key: ?HKEY,
    pcsz_sub_key: ?[*:0]const u8,
    pcsz_value: ?[*:0]const u8,
    pcsz_path: ?[*:0]const u8,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegSetPathW(
    h_key: ?HKEY,
    pcsz_sub_key: ?[*:0]const u16,
    pcsz_value: ?[*:0]const u16,
    pcsz_path: ?[*:0]const u16,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegCreateUSKeyA(
    psz_path: ?[*:0]const u8,
    sam_desired: u32,
    h_relative_u_s_key: isize,
    ph_new_u_s_key: ?*isize,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegCreateUSKeyW(
    pwz_path: ?[*:0]const u16,
    sam_desired: u32,
    h_relative_u_s_key: isize,
    ph_new_u_s_key: ?*isize,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegOpenUSKeyA(
    psz_path: ?[*:0]const u8,
    sam_desired: u32,
    h_relative_u_s_key: isize,
    ph_new_u_s_key: ?*isize,
    f_ignore_h_k_c_u: BOOL,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegOpenUSKeyW(
    pwz_path: ?[*:0]const u16,
    sam_desired: u32,
    h_relative_u_s_key: isize,
    ph_new_u_s_key: ?*isize,
    f_ignore_h_k_c_u: BOOL,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegQueryUSValueA(
    h_u_s_key: isize,
    psz_value: ?[*:0]const u8,
    pdw_type: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    pv_data: ?*anyopaque,
    pcb_data: ?*u32,
    f_ignore_h_k_c_u: BOOL,
    // TODO: what to do with BytesParamIndex 7?
    pv_default_data: ?*anyopaque,
    dw_default_data_size: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegQueryUSValueW(
    h_u_s_key: isize,
    psz_value: ?[*:0]const u16,
    pdw_type: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    pv_data: ?*anyopaque,
    pcb_data: ?*u32,
    f_ignore_h_k_c_u: BOOL,
    // TODO: what to do with BytesParamIndex 7?
    pv_default_data: ?*anyopaque,
    dw_default_data_size: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegWriteUSValueA(
    h_u_s_key: isize,
    psz_value: ?[*:0]const u8,
    dw_type: u32,
    // TODO: what to do with BytesParamIndex 4?
    pv_data: ?*const anyopaque,
    cb_data: u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegWriteUSValueW(
    h_u_s_key: isize,
    pwz_value: ?[*:0]const u16,
    dw_type: u32,
    // TODO: what to do with BytesParamIndex 4?
    pv_data: ?*const anyopaque,
    cb_data: u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegDeleteUSValueA(
    h_u_s_key: isize,
    psz_value: ?[*:0]const u8,
    del_reg_flags: SHREGDEL_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegDeleteUSValueW(
    h_u_s_key: isize,
    pwz_value: ?[*:0]const u16,
    del_reg_flags: SHREGDEL_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegDeleteEmptyUSKeyW(
    h_u_s_key: isize,
    pwz_sub_key: ?[*:0]const u16,
    del_reg_flags: SHREGDEL_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegDeleteEmptyUSKeyA(
    h_u_s_key: isize,
    psz_sub_key: ?[*:0]const u8,
    del_reg_flags: SHREGDEL_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegEnumUSKeyA(
    h_u_s_key: isize,
    dw_index: u32,
    psz_name: [*:0]u8,
    pcch_name: ?*u32,
    enum_reg_flags: SHREGENUM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegEnumUSKeyW(
    h_u_s_key: isize,
    dw_index: u32,
    pwz_name: [*:0]u16,
    pcch_name: ?*u32,
    enum_reg_flags: SHREGENUM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegEnumUSValueA(
    h_u_skey: isize,
    dw_index: u32,
    psz_value_name: [*:0]u8,
    pcch_value_name: ?*u32,
    pdw_type: ?*u32,
    // TODO: what to do with BytesParamIndex 6?
    pv_data: ?*anyopaque,
    pcb_data: ?*u32,
    enum_reg_flags: SHREGENUM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegEnumUSValueW(
    h_u_skey: isize,
    dw_index: u32,
    psz_value_name: [*:0]u16,
    pcch_value_name: ?*u32,
    pdw_type: ?*u32,
    // TODO: what to do with BytesParamIndex 6?
    pv_data: ?*anyopaque,
    pcb_data: ?*u32,
    enum_reg_flags: SHREGENUM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegQueryInfoUSKeyA(
    h_u_s_key: isize,
    pc_sub_keys: ?*u32,
    pcch_max_sub_key_len: ?*u32,
    pc_values: ?*u32,
    pcch_max_value_name_len: ?*u32,
    enum_reg_flags: SHREGENUM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegQueryInfoUSKeyW(
    h_u_s_key: isize,
    pc_sub_keys: ?*u32,
    pcch_max_sub_key_len: ?*u32,
    pc_values: ?*u32,
    pcch_max_value_name_len: ?*u32,
    enum_reg_flags: SHREGENUM_FLAGS,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegCloseUSKey(
    h_u_s_key: isize,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegGetUSValueA(
    psz_sub_key: ?[*:0]const u8,
    psz_value: ?[*:0]const u8,
    pdw_type: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    pv_data: ?*anyopaque,
    pcb_data: ?*u32,
    f_ignore_h_k_c_u: BOOL,
    // TODO: what to do with BytesParamIndex 7?
    pv_default_data: ?*anyopaque,
    dw_default_data_size: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegGetUSValueW(
    psz_sub_key: ?[*:0]const u16,
    psz_value: ?[*:0]const u16,
    pdw_type: ?*u32,
    // TODO: what to do with BytesParamIndex 4?
    pv_data: ?*anyopaque,
    pcb_data: ?*u32,
    f_ignore_h_k_c_u: BOOL,
    // TODO: what to do with BytesParamIndex 7?
    pv_default_data: ?*anyopaque,
    dw_default_data_size: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegSetUSValueA(
    psz_sub_key: ?[*:0]const u8,
    psz_value: ?[*:0]const u8,
    dw_type: u32,
    // TODO: what to do with BytesParamIndex 4?
    pv_data: ?*const anyopaque,
    cb_data: u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegSetUSValueW(
    pwz_sub_key: ?[*:0]const u16,
    pwz_value: ?[*:0]const u16,
    dw_type: u32,
    // TODO: what to do with BytesParamIndex 4?
    pv_data: ?*const anyopaque,
    cb_data: u32,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegGetIntW(
    hk: ?HKEY,
    pwz_key: ?[*:0]const u16,
    i_default: i32,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegGetBoolUSValueA(
    psz_sub_key: ?[*:0]const u8,
    psz_value: ?[*:0]const u8,
    f_ignore_h_k_c_u: BOOL,
    f_default: BOOL,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHRegGetBoolUSValueW(
    psz_sub_key: ?[*:0]const u16,
    psz_value: ?[*:0]const u16,
    f_ignore_h_k_c_u: BOOL,
    f_default: BOOL,
) callconv(@import("std").os.windows.WINAPI) WIN32_ERROR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn AssocCreate(
    clsid: Guid,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn AssocQueryStringA(
    flags: u32,
    str: ASSOCSTR,
    psz_assoc: ?[*:0]const u8,
    psz_extra: ?[*:0]const u8,
    psz_out: ?[*:0]u8,
    pcch_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn AssocQueryStringW(
    flags: u32,
    str: ASSOCSTR,
    psz_assoc: ?[*:0]const u16,
    psz_extra: ?[*:0]const u16,
    psz_out: ?[*:0]u16,
    pcch_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn AssocQueryStringByKeyA(
    flags: u32,
    str: ASSOCSTR,
    hk_assoc: ?HKEY,
    psz_extra: ?[*:0]const u8,
    psz_out: ?[*:0]u8,
    pcch_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn AssocQueryStringByKeyW(
    flags: u32,
    str: ASSOCSTR,
    hk_assoc: ?HKEY,
    psz_extra: ?[*:0]const u16,
    psz_out: ?[*:0]u16,
    pcch_out: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn AssocQueryKeyA(
    flags: u32,
    key: ASSOCKEY,
    psz_assoc: ?[*:0]const u8,
    psz_extra: ?[*:0]const u8,
    phkey_out: ?*?HKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn AssocQueryKeyW(
    flags: u32,
    key: ASSOCKEY,
    psz_assoc: ?[*:0]const u16,
    psz_extra: ?[*:0]const u16,
    phkey_out: ?*?HKEY,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn AssocIsDangerous(
    psz_assoc: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn AssocGetPerceivedType(
    psz_ext: ?[*:0]const u16,
    ptype: ?*PERCEIVED,
    pflag: ?*u32,
    ppsz_type: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHOpenRegStreamA(
    hkey: ?HKEY,
    psz_subkey: ?[*:0]const u8,
    psz_value: ?[*:0]const u8,
    grf_mode: u32,
    retval: *?*IStream,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHOpenRegStreamW(
    hkey: ?HKEY,
    psz_subkey: ?[*:0]const u16,
    psz_value: ?[*:0]const u16,
    grf_mode: u32,
    retval: *?*IStream,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHOpenRegStream2A(
    hkey: ?HKEY,
    psz_subkey: ?[*:0]const u8,
    psz_value: ?[*:0]const u8,
    grf_mode: u32,
    retval: *?*IStream,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHOpenRegStream2W(
    hkey: ?HKEY,
    psz_subkey: ?[*:0]const u16,
    psz_value: ?[*:0]const u16,
    grf_mode: u32,
    retval: *?*IStream,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHCreateStreamOnFileA(
    psz_file: ?[*:0]const u8,
    grf_mode: u32,
    ppstm: ?*?*IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHCreateStreamOnFileW(
    psz_file: ?[*:0]const u16,
    grf_mode: u32,
    ppstm: ?*?*IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHCreateStreamOnFileEx(
    psz_file: ?[*:0]const u16,
    grf_mode: u32,
    dw_attributes: u32,
    f_create: BOOL,
    pstm_template: ?*IStream,
    ppstm: ?*?*IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHCreateMemStream(
    // TODO: what to do with BytesParamIndex 1?
    p_init: ?*const u8,
    cb_init: u32,
    retval: *?*IStream,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn GetAcceptLanguagesA(
    psz_languages: [*:0]u8,
    pcch_languages: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn GetAcceptLanguagesW(
    psz_languages: [*:0]u16,
    pcch_languages: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IUnknown_Set(
    ppunk: ?*?*IUnknown,
    punk: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IUnknown_AtomicRelease(
    ppunk: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IUnknown_GetWindow(
    punk: ?*IUnknown,
    phwnd: ?*?HWND,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IUnknown_SetSite(
    punk: ?*IUnknown,
    punk_site: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IUnknown_GetSite(
    punk: ?*IUnknown,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IUnknown_QueryService(
    punk: ?*IUnknown,
    guid_service: ?*const Guid,
    riid: ?*const Guid,
    ppv_out: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IStream_Read(
    pstm: ?*IStream,
    pv: ?*anyopaque,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn IStream_Write(
    pstm: ?*IStream,
    // TODO: what to do with BytesParamIndex 2?
    pv: ?*const anyopaque,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IStream_Reset(
    pstm: ?*IStream,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IStream_Size(
    pstm: ?*IStream,
    pui: ?*ULARGE_INTEGER,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn ConnectToConnectionPoint(
    punk: ?*IUnknown,
    riid_event: ?*const Guid,
    f_connect: BOOL,
    punk_target: ?*IUnknown,
    pdw_cookie: ?*u32,
    ppcp_out: ?*?*IConnectionPoint,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn IStream_ReadPidl(
    pstm: ?*IStream,
    ppidl_out: ?*?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn IStream_WritePidl(
    pstm: ?*IStream,
    pidl_write: ?*ITEMIDLIST,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn IStream_ReadStr(
    pstm: ?*IStream,
    ppsz: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn IStream_WriteStr(
    pstm: ?*IStream,
    psz: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn IStream_Copy(
    pstm_from: ?*IStream,
    pstm_to: ?*IStream,
    cb: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHGetViewStatePropertyBag(
    pidl: ?*ITEMIDLIST,
    psz_bag_name: ?[*:0]const u16,
    dw_flags: u32,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHFormatDateTimeA(
    pft: ?*const FILETIME,
    pdw_flags: ?*u32,
    psz_buf: [*:0]u8,
    cch_buf: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHFormatDateTimeW(
    pft: ?*const FILETIME,
    pdw_flags: ?*u32,
    psz_buf: [*:0]u16,
    cch_buf: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHAnsiToUnicode(
    psz_src: ?[*:0]const u8,
    pwsz_dst: [*:0]u16,
    cwch_buf: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHAnsiToAnsi(
    psz_src: ?[*:0]const u8,
    psz_dst: [*:0]u8,
    cch_buf: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHUnicodeToAnsi(
    pwsz_src: ?[*:0]const u16,
    psz_dst: [*:0]u8,
    cch_buf: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHUnicodeToUnicode(
    pwz_src: ?[*:0]const u16,
    pwz_dst: [*:0]u16,
    cwch_buf: i32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHMessageBoxCheckA(
    hwnd: ?HWND,
    psz_text: ?[*:0]const u8,
    psz_caption: ?[*:0]const u8,
    u_type: u32,
    i_default: i32,
    psz_reg_val: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHMessageBoxCheckW(
    hwnd: ?HWND,
    psz_text: ?[*:0]const u16,
    psz_caption: ?[*:0]const u16,
    u_type: u32,
    i_default: i32,
    psz_reg_val: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHSendMessageBroadcastA(
    u_msg: u32,
    w_param: WPARAM,
    l_param: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHSendMessageBroadcastW(
    u_msg: u32,
    w_param: WPARAM,
    l_param: LPARAM,
) callconv(@import("std").os.windows.WINAPI) LRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHStripMneumonicA(
    psz_menu: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) CHAR;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHStripMneumonicW(
    psz_menu: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) u16;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn IsOS(
    dw_o_s: OS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shlwapi" fn SHGlobalCounterGetValue(
    id: SHGLOBALCOUNTER,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shlwapi" fn SHGlobalCounterIncrement(
    id: SHGLOBALCOUNTER,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.1'
pub extern "shlwapi" fn SHGlobalCounterDecrement(
    id: SHGLOBALCOUNTER,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHAllocShared(
    // TODO: what to do with BytesParamIndex 1?
    pv_data: ?*const anyopaque,
    dw_size: u32,
    dw_process_id: u32,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHFreeShared(
    h_data: ?HANDLE,
    dw_process_id: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHLockShared(
    h_data: ?HANDLE,
    dw_process_id: u32,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHUnlockShared(
    pv_data: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn WhichPlatform() callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn QISearch(
    that: ?*anyopaque,
    pqit: ?*QITAB,
    riid: ?*const Guid,
    ppv: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHIsLowMemoryMachine(
    dw_type: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn GetMenuPosFromID(
    hmenu: ?HMENU,
    id: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHGetInverseCMAP(
    // TODO: what to do with BytesParamIndex 1?
    pb_map: ?*u8,
    cb_map: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHAutoComplete(
    hwnd_edit: ?HWND,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHCreateThreadRef(
    pc_ref: ?*i32,
    ppunk: ?*?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHSetThreadRef(
    punk: ?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHGetThreadRef(
    ppunk: ?*?*IUnknown,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHSkipJunction(
    pbc: ?*IBindCtx,
    pclsid: ?*const Guid,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHCreateThread(
    pfn_thread_proc: ?LPTHREAD_START_ROUTINE,
    p_data: ?*anyopaque,
    flags: u32,
    pfn_callback: ?LPTHREAD_START_ROUTINE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "shlwapi" fn SHCreateThreadWithHandle(
    pfn_thread_proc: ?LPTHREAD_START_ROUTINE,
    p_data: ?*anyopaque,
    flags: u32,
    pfn_callback: ?LPTHREAD_START_ROUTINE,
    p_handle: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn SHReleaseThreadRef() callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn SHCreateShellPalette(
    hdc: ?HDC,
) callconv(@import("std").os.windows.WINAPI) ?HPALETTE;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn ColorRGBToHLS(
    clr_r_g_b: u32,
    pw_hue: ?*u16,
    pw_luminance: ?*u16,
    pw_saturation: ?*u16,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn ColorHLSToRGB(
    w_hue: u16,
    w_luminance: u16,
    w_saturation: u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "shlwapi" fn ColorAdjustLuma(
    clr_r_g_b: u32,
    n: i32,
    f_scale: BOOL,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "shlwapi" fn IsInternetESCEnabled() callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "hlink" fn HlinkCreateFromMoniker(
    pimk_trgt: ?*IMoniker,
    pwz_location: ?[*:0]const u16,
    pwz_friendly_name: ?[*:0]const u16,
    pihlsite: ?*IHlinkSite,
    dw_site_data: u32,
    piunk_outer: ?*IUnknown,
    riid: ?*const Guid,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateFromString(
    pwz_target: ?[*:0]const u16,
    pwz_location: ?[*:0]const u16,
    pwz_friendly_name: ?[*:0]const u16,
    pihlsite: ?*IHlinkSite,
    dw_site_data: u32,
    piunk_outer: ?*IUnknown,
    riid: ?*const Guid,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateFromData(
    pi_data_obj: ?*IDataObject,
    pihlsite: ?*IHlinkSite,
    dw_site_data: u32,
    piunk_outer: ?*IUnknown,
    riid: ?*const Guid,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkQueryCreateFromData(
    pi_data_obj: ?*IDataObject,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkClone(
    pihl: ?*IHlink,
    riid: ?*const Guid,
    pihlsite_for_clone: ?*IHlinkSite,
    dw_site_data: u32,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateBrowseContext(
    piunk_outer: ?*IUnknown,
    riid: ?*const Guid,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkNavigateToStringReference(
    pwz_target: ?[*:0]const u16,
    pwz_location: ?[*:0]const u16,
    pihlsite: ?*IHlinkSite,
    dw_site_data: u32,
    pihlframe: ?*IHlinkFrame,
    grf_h_l_n_f: u32,
    pibc: ?*IBindCtx,
    pibsc: ?*IBindStatusCallback,
    pihlbc: ?*IHlinkBrowseContext,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkNavigate(
    pihl: ?*IHlink,
    pihlframe: ?*IHlinkFrame,
    grf_h_l_n_f: u32,
    pbc: ?*IBindCtx,
    pibsc: ?*IBindStatusCallback,
    pihlbc: ?*IHlinkBrowseContext,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkOnNavigate(
    pihlframe: ?*IHlinkFrame,
    pihlbc: ?*IHlinkBrowseContext,
    grf_h_l_n_f: u32,
    pimk_target: ?*IMoniker,
    pwz_location: ?[*:0]const u16,
    pwz_friendly_name: ?[*:0]const u16,
    pu_h_l_i_d: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkUpdateStackItem(
    pihlframe: ?*IHlinkFrame,
    pihlbc: ?*IHlinkBrowseContext,
    u_h_l_i_d: u32,
    pimk_trgt: ?*IMoniker,
    pwz_location: ?[*:0]const u16,
    pwz_friendly_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkOnRenameDocument(
    dw_reserved: u32,
    pihlbc: ?*IHlinkBrowseContext,
    pimk_old: ?*IMoniker,
    pimk_new: ?*IMoniker,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkResolveMonikerForData(
    pimk_reference: ?*IMoniker,
    reserved: u32,
    pibc: ?*IBindCtx,
    c_fmtetc: u32,
    rg_fmtetc: ?*FORMATETC,
    pibsc: ?*IBindStatusCallback,
    pimk_base: ?*IMoniker,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkResolveStringForData(
    pwz_reference: ?[*:0]const u16,
    reserved: u32,
    pibc: ?*IBindCtx,
    c_fmtetc: u32,
    rg_fmtetc: ?*FORMATETC,
    pibsc: ?*IBindStatusCallback,
    pimk_base: ?*IMoniker,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkParseDisplayName(
    pibc: ?*IBindCtx,
    pwz_display_name: ?[*:0]const u16,
    f_no_force_abs: BOOL,
    pcch_eaten: ?*u32,
    ppimk: ?*?*IMoniker,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateExtensionServices(
    pwz_additional_headers: ?[*:0]const u16,
    phwnd: ?HWND,
    psz_username: ?[*:0]const u16,
    psz_password: ?[*:0]const u16,
    piunk_outer: ?*IUnknown,
    riid: ?*const Guid,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkPreprocessMoniker(
    pibc: ?*IBindCtx,
    pimk_in: ?*IMoniker,
    ppimk_out: ?*?*IMoniker,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn OleSaveToStreamEx(
    piunk: ?*IUnknown,
    pistm: ?*IStream,
    f_clear_dirty: BOOL,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkSetSpecialReference(
    u_reference: u32,
    pwz_reference: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkGetSpecialReference(
    u_reference: u32,
    ppwz_reference: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateShortcut(
    grf_h_l_s_h_o_r_t_c_u_t_f: u32,
    pihl: ?*IHlink,
    pwz_dir: ?[*:0]const u16,
    pwz_file_name: ?[*:0]const u16,
    ppwz_shortcut_file: ?*?PWSTR,
    dw_reserved: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateShortcutFromMoniker(
    grf_h_l_s_h_o_r_t_c_u_t_f: u32,
    pimk_target: ?*IMoniker,
    pwz_location: ?[*:0]const u16,
    pwz_dir: ?[*:0]const u16,
    pwz_file_name: ?[*:0]const u16,
    ppwz_shortcut_file: ?*?PWSTR,
    dw_reserved: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkCreateShortcutFromString(
    grf_h_l_s_h_o_r_t_c_u_t_f: u32,
    pwz_target: ?[*:0]const u16,
    pwz_location: ?[*:0]const u16,
    pwz_dir: ?[*:0]const u16,
    pwz_file_name: ?[*:0]const u16,
    ppwz_shortcut_file: ?*?PWSTR,
    dw_reserved: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkResolveShortcut(
    pwz_shortcut_file_name: ?[*:0]const u16,
    pihlsite: ?*IHlinkSite,
    dw_site_data: u32,
    piunk_outer: ?*IUnknown,
    riid: ?*const Guid,
    ppv_obj: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkResolveShortcutToMoniker(
    pwz_shortcut_file_name: ?[*:0]const u16,
    ppimk_target: ?*?*IMoniker,
    ppwz_location: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkResolveShortcutToString(
    pwz_shortcut_file_name: ?[*:0]const u16,
    ppwz_target: ?*?PWSTR,
    ppwz_location: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkIsShortcut(
    pwz_file_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkGetValueFromParams(
    pwz_params: ?[*:0]const u16,
    pwz_name: ?[*:0]const u16,
    ppwz_value: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "hlink" fn HlinkTranslateURL(
    pwz_u_r_l: ?[*:0]const u16,
    grf_flags: u32,
    ppwz_translated_u_r_l: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathIsUNCEx(
    psz_path: ?[*:0]const u16,
    ppsz_server: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchIsRoot(
    psz_path: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchAddBackslashEx(
    psz_path: [*:0]u16,
    cch_path: usize,
    ppsz_end: ?*?PWSTR,
    pcch_remaining: ?*usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchAddBackslash(
    psz_path: [*:0]u16,
    cch_path: usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchRemoveBackslashEx(
    psz_path: ?PWSTR,
    cch_path: usize,
    ppsz_end: ?*?PWSTR,
    pcch_remaining: ?*usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchRemoveBackslash(
    psz_path: [*:0]u16,
    cch_path: usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchSkipRoot(
    psz_path: ?[*:0]const u16,
    ppsz_root_end: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchStripToRoot(
    psz_path: ?PWSTR,
    cch_path: usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchRemoveFileSpec(
    psz_path: ?PWSTR,
    cch_path: usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchFindExtension(
    psz_path: ?[*:0]const u16,
    cch_path: usize,
    ppsz_ext: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchAddExtension(
    psz_path: [*:0]u16,
    cch_path: usize,
    psz_ext: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchRenameExtension(
    psz_path: [*:0]u16,
    cch_path: usize,
    psz_ext: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchRemoveExtension(
    psz_path: ?PWSTR,
    cch_path: usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchCanonicalizeEx(
    psz_path_out: [*:0]u16,
    cch_path_out: usize,
    psz_path_in: ?[*:0]const u16,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchCanonicalize(
    psz_path_out: [*:0]u16,
    cch_path_out: usize,
    psz_path_in: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchCombineEx(
    psz_path_out: [*:0]u16,
    cch_path_out: usize,
    psz_path_in: ?[*:0]const u16,
    psz_more: ?[*:0]const u16,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchCombine(
    psz_path_out: [*:0]u16,
    cch_path_out: usize,
    psz_path_in: ?[*:0]const u16,
    psz_more: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchAppendEx(
    psz_path: [*:0]u16,
    cch_path: usize,
    psz_more: ?[*:0]const u16,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchAppend(
    psz_path: [*:0]u16,
    cch_path: usize,
    psz_more: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathCchStripPrefix(
    psz_path: [*:0]u16,
    cch_path: usize,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathAllocCombine(
    psz_path_in: ?[*:0]const u16,
    psz_more: ?[*:0]const u16,
    dw_flags: u32,
    ppsz_path_out: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows8.0'
pub extern "api-ms-win-core-path-l1-1-0" fn PathAllocCanonicalize(
    psz_path_in: ?[*:0]const u16,
    dw_flags: u32,
    ppsz_path_out: ?*?PWSTR,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

pub extern "api-ms-win-core-psm-appnotify-l1-1-0" fn RegisterAppStateChangeNotification(
    routine: ?PAPPSTATE_CHANGE_ROUTINE,
    context: ?*anyopaque,
    registration: ?*?*_APPSTATE_REGISTRATION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "api-ms-win-core-psm-appnotify-l1-1-0" fn UnregisterAppStateChangeNotification(
    registration: ?*_APPSTATE_REGISTRATION,
) callconv(@import("std").os.windows.WINAPI) void;

pub extern "api-ms-win-core-psm-appnotify-l1-1-1" fn RegisterAppConstrainedChangeNotification(
    routine: ?PAPPCONSTRAIN_CHANGE_ROUTINE,
    context: ?*anyopaque,
    registration: ?*?*_APPCONSTRAIN_REGISTRATION,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "api-ms-win-core-psm-appnotify-l1-1-1" fn UnregisterAppConstrainedChangeNotification(
    registration: ?*_APPCONSTRAIN_REGISTRATION,
) callconv(@import("std").os.windows.WINAPI) void;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (205)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const MULTIKEYHELP = thismodule.MULTIKEYHELPA;
        pub const HELPWININFO = thismodule.HELPWININFOA;
        pub const IShellLink = thismodule.IShellLinkA;
        pub const IExtractIcon = thismodule.IExtractIconA;
        pub const BROWSEINFO = thismodule.BROWSEINFOA;
        pub const FILEDESCRIPTOR = thismodule.FILEDESCRIPTORA;
        pub const FILEGROUPDESCRIPTOR = thismodule.FILEGROUPDESCRIPTORA;
        pub const SHELLSTATE = thismodule.SHELLSTATEA;
        pub const INewShortcutHook = thismodule.INewShortcutHookA;
        pub const ICopyHook = thismodule.ICopyHookA;
        pub const DRAGINFO = thismodule.DRAGINFOA;
        pub const SHFILEOPSTRUCT = thismodule.SHFILEOPSTRUCTA;
        pub const SHNAMEMAPPING = thismodule.SHNAMEMAPPINGA;
        pub const SHELLEXECUTEINFO = thismodule.SHELLEXECUTEINFOA;
        pub const NOTIFYICONDATA = thismodule.NOTIFYICONDATAA;
        pub const SHFILEINFO = thismodule.SHFILEINFOA;
        pub const OPEN_PRINTER_PROPS_INFO = thismodule.OPEN_PRINTER_PROPS_INFOA;
        pub const PARSEDURL = thismodule.PARSEDURLA;
        pub const NEWCPLINFO = thismodule.NEWCPLINFOA;
        pub const PROFILEINFO = thismodule.PROFILEINFOA;
        pub const urlinvokecommandinfo = thismodule.urlinvokecommandinfoA;
        pub const IUniformResourceLocator = thismodule.IUniformResourceLocatorA;
        pub const LoadUserProfile = thismodule.LoadUserProfileA;
        pub const GetProfilesDirectory = thismodule.GetProfilesDirectoryA;
        pub const DeleteProfile = thismodule.DeleteProfileA;
        pub const GetDefaultUserProfileDirectory = thismodule.GetDefaultUserProfileDirectoryA;
        pub const GetAllUsersProfileDirectory = thismodule.GetAllUsersProfileDirectoryA;
        pub const GetUserProfileDirectory = thismodule.GetUserProfileDirectoryA;
        pub const WinHelp = thismodule.WinHelpA;
        pub const SHGetIconOverlayIndex = thismodule.SHGetIconOverlayIndexA;
        pub const ILCreateFromPath = thismodule.ILCreateFromPathA;
        pub const SHGetPathFromIDList = thismodule.SHGetPathFromIDListA;
        pub const SHCreateDirectoryEx = thismodule.SHCreateDirectoryExA;
        pub const SHGetSpecialFolderPath = thismodule.SHGetSpecialFolderPathA;
        pub const SHGetFolderPath = thismodule.SHGetFolderPathA;
        pub const SHSetFolderPath = thismodule.SHSetFolderPathA;
        pub const SHGetFolderPathAndSubDir = thismodule.SHGetFolderPathAndSubDirA;
        pub const SHBrowseForFolder = thismodule.SHBrowseForFolderA;
        pub const SHUpdateImage = thismodule.SHUpdateImageA;
        pub const SHGetDataFromIDList = thismodule.SHGetDataFromIDListA;
        pub const SHDefExtractIcon = thismodule.SHDefExtractIconA;
        pub const SHPathPrepareForWrite = thismodule.SHPathPrepareForWriteA;
        pub const PathIsSlow = thismodule.PathIsSlowA;
        pub const DragQueryFile = thismodule.DragQueryFileA;
        pub const ShellExecute = thismodule.ShellExecuteA;
        pub const FindExecutable = thismodule.FindExecutableA;
        pub const ShellAbout = thismodule.ShellAboutA;
        pub const ExtractAssociatedIcon = thismodule.ExtractAssociatedIconA;
        pub const ExtractAssociatedIconEx = thismodule.ExtractAssociatedIconExA;
        pub const ExtractIcon = thismodule.ExtractIconA;
        pub const DoEnvironmentSubst = thismodule.DoEnvironmentSubstA;
        pub const ExtractIconEx = thismodule.ExtractIconExA;
        pub const SHFileOperation = thismodule.SHFileOperationA;
        pub const ShellExecuteEx = thismodule.ShellExecuteExA;
        pub const SHQueryRecycleBin = thismodule.SHQueryRecycleBinA;
        pub const SHEmptyRecycleBin = thismodule.SHEmptyRecycleBinA;
        pub const Shell_NotifyIcon = thismodule.Shell_NotifyIconA;
        pub const SHGetFileInfo = thismodule.SHGetFileInfoA;
        pub const SHGetDiskFreeSpaceEx = thismodule.SHGetDiskFreeSpaceExA;
        pub const SHGetNewLinkInfo = thismodule.SHGetNewLinkInfoA;
        pub const SHInvokePrinterCommand = thismodule.SHInvokePrinterCommandA;
        pub const ShellMessageBox = thismodule.ShellMessageBoxA;
        pub const IsLFNDrive = thismodule.IsLFNDriveA;
        pub const StrChr = thismodule.StrChrA;
        pub const StrChrI = thismodule.StrChrIA;
        pub const StrCmpN = thismodule.StrCmpNA;
        pub const StrCmpNI = thismodule.StrCmpNIA;
        pub const StrCSpn = thismodule.StrCSpnA;
        pub const StrCSpnI = thismodule.StrCSpnIA;
        pub const StrDup = thismodule.StrDupA;
        pub const StrFormatByteSize = thismodule.StrFormatByteSizeA;
        pub const StrFormatKBSize = thismodule.StrFormatKBSizeA;
        pub const StrFromTimeInterval = thismodule.StrFromTimeIntervalA;
        pub const StrIsIntlEqual = thismodule.StrIsIntlEqualA;
        pub const StrNCat = thismodule.StrNCatA;
        pub const StrPBrk = thismodule.StrPBrkA;
        pub const StrRChr = thismodule.StrRChrA;
        pub const StrRChrI = thismodule.StrRChrIA;
        pub const StrRStrI = thismodule.StrRStrIA;
        pub const StrSpn = thismodule.StrSpnA;
        pub const StrStr = thismodule.StrStrA;
        pub const StrStrI = thismodule.StrStrIA;
        pub const StrToInt = thismodule.StrToIntA;
        pub const StrToIntEx = thismodule.StrToIntExA;
        pub const StrToInt64Ex = thismodule.StrToInt64ExA;
        pub const StrTrim = thismodule.StrTrimA;
        pub const StrCatBuff = thismodule.StrCatBuffA;
        pub const ChrCmpI = thismodule.ChrCmpIA;
        pub const wvnsprintf = thismodule.wvnsprintfA;
        pub const wnsprintf = thismodule.wnsprintfA;
        pub const StrRetToStr = thismodule.StrRetToStrA;
        pub const StrRetToBuf = thismodule.StrRetToBufA;
        pub const SHStrDup = thismodule.SHStrDupA;
        pub const IsCharSpace = thismodule.IsCharSpaceA;
        pub const StrCmpC = thismodule.StrCmpCA;
        pub const StrCmpIC = thismodule.StrCmpICA;
        pub const StrCmpNC = thismodule.StrCmpNCA;
        pub const StrCmpNIC = thismodule.StrCmpNICA;
        pub const IntlStrEqWorker = thismodule.IntlStrEqWorkerA;
        pub const PathAddBackslash = thismodule.PathAddBackslashA;
        pub const PathAddExtension = thismodule.PathAddExtensionA;
        pub const PathAppend = thismodule.PathAppendA;
        pub const PathBuildRoot = thismodule.PathBuildRootA;
        pub const PathCanonicalize = thismodule.PathCanonicalizeA;
        pub const PathCombine = thismodule.PathCombineA;
        pub const PathCompactPath = thismodule.PathCompactPathA;
        pub const PathCompactPathEx = thismodule.PathCompactPathExA;
        pub const PathCommonPrefix = thismodule.PathCommonPrefixA;
        pub const PathFileExists = thismodule.PathFileExistsA;
        pub const PathFindExtension = thismodule.PathFindExtensionA;
        pub const PathFindFileName = thismodule.PathFindFileNameA;
        pub const PathFindNextComponent = thismodule.PathFindNextComponentA;
        pub const PathFindOnPath = thismodule.PathFindOnPathA;
        pub const PathFindSuffixArray = thismodule.PathFindSuffixArrayA;
        pub const PathGetArgs = thismodule.PathGetArgsA;
        pub const PathIsLFNFileSpec = thismodule.PathIsLFNFileSpecA;
        pub const PathGetCharType = thismodule.PathGetCharTypeA;
        pub const PathGetDriveNumber = thismodule.PathGetDriveNumberA;
        pub const PathIsDirectory = thismodule.PathIsDirectoryA;
        pub const PathIsDirectoryEmpty = thismodule.PathIsDirectoryEmptyA;
        pub const PathIsFileSpec = thismodule.PathIsFileSpecA;
        pub const PathIsPrefix = thismodule.PathIsPrefixA;
        pub const PathIsRelative = thismodule.PathIsRelativeA;
        pub const PathIsRoot = thismodule.PathIsRootA;
        pub const PathIsSameRoot = thismodule.PathIsSameRootA;
        pub const PathIsUNC = thismodule.PathIsUNCA;
        pub const PathIsNetworkPath = thismodule.PathIsNetworkPathA;
        pub const PathIsUNCServer = thismodule.PathIsUNCServerA;
        pub const PathIsUNCServerShare = thismodule.PathIsUNCServerShareA;
        pub const PathIsContentType = thismodule.PathIsContentTypeA;
        pub const PathIsURL = thismodule.PathIsURLA;
        pub const PathMakePretty = thismodule.PathMakePrettyA;
        pub const PathMatchSpec = thismodule.PathMatchSpecA;
        pub const PathMatchSpecEx = thismodule.PathMatchSpecExA;
        pub const PathParseIconLocation = thismodule.PathParseIconLocationA;
        pub const PathQuoteSpaces = thismodule.PathQuoteSpacesA;
        pub const PathRelativePathTo = thismodule.PathRelativePathToA;
        pub const PathRemoveArgs = thismodule.PathRemoveArgsA;
        pub const PathRemoveBackslash = thismodule.PathRemoveBackslashA;
        pub const PathRemoveBlanks = thismodule.PathRemoveBlanksA;
        pub const PathRemoveExtension = thismodule.PathRemoveExtensionA;
        pub const PathRemoveFileSpec = thismodule.PathRemoveFileSpecA;
        pub const PathRenameExtension = thismodule.PathRenameExtensionA;
        pub const PathSearchAndQualify = thismodule.PathSearchAndQualifyA;
        pub const PathSetDlgItemPath = thismodule.PathSetDlgItemPathA;
        pub const PathSkipRoot = thismodule.PathSkipRootA;
        pub const PathStripPath = thismodule.PathStripPathA;
        pub const PathStripToRoot = thismodule.PathStripToRootA;
        pub const PathUnquoteSpaces = thismodule.PathUnquoteSpacesA;
        pub const PathMakeSystemFolder = thismodule.PathMakeSystemFolderA;
        pub const PathUnmakeSystemFolder = thismodule.PathUnmakeSystemFolderA;
        pub const PathIsSystemFolder = thismodule.PathIsSystemFolderA;
        pub const PathUndecorate = thismodule.PathUndecorateA;
        pub const PathUnExpandEnvStrings = thismodule.PathUnExpandEnvStringsA;
        pub const UrlCompare = thismodule.UrlCompareA;
        pub const UrlCombine = thismodule.UrlCombineA;
        pub const UrlCanonicalize = thismodule.UrlCanonicalizeA;
        pub const UrlIsOpaque = thismodule.UrlIsOpaqueA;
        pub const UrlIsNoHistory = thismodule.UrlIsNoHistoryA;
        pub const UrlIs = thismodule.UrlIsA;
        pub const UrlGetLocation = thismodule.UrlGetLocationA;
        pub const UrlUnescape = thismodule.UrlUnescapeA;
        pub const UrlEscape = thismodule.UrlEscapeA;
        pub const UrlCreateFromPath = thismodule.UrlCreateFromPathA;
        pub const PathCreateFromUrl = thismodule.PathCreateFromUrlA;
        pub const UrlHash = thismodule.UrlHashA;
        pub const UrlGetPart = thismodule.UrlGetPartA;
        pub const UrlApplyScheme = thismodule.UrlApplySchemeA;
        pub const ParseURL = thismodule.ParseURLA;
        pub const SHDeleteEmptyKey = thismodule.SHDeleteEmptyKeyA;
        pub const SHDeleteKey = thismodule.SHDeleteKeyA;
        pub const SHDeleteValue = thismodule.SHDeleteValueA;
        pub const SHGetValue = thismodule.SHGetValueA;
        pub const SHSetValue = thismodule.SHSetValueA;
        pub const SHRegGetValue = thismodule.SHRegGetValueA;
        pub const SHQueryValueEx = thismodule.SHQueryValueExA;
        pub const SHEnumKeyEx = thismodule.SHEnumKeyExA;
        pub const SHEnumValue = thismodule.SHEnumValueA;
        pub const SHQueryInfoKey = thismodule.SHQueryInfoKeyA;
        pub const SHCopyKey = thismodule.SHCopyKeyA;
        pub const SHRegGetPath = thismodule.SHRegGetPathA;
        pub const SHRegSetPath = thismodule.SHRegSetPathA;
        pub const SHRegCreateUSKey = thismodule.SHRegCreateUSKeyA;
        pub const SHRegOpenUSKey = thismodule.SHRegOpenUSKeyA;
        pub const SHRegQueryUSValue = thismodule.SHRegQueryUSValueA;
        pub const SHRegWriteUSValue = thismodule.SHRegWriteUSValueA;
        pub const SHRegDeleteUSValue = thismodule.SHRegDeleteUSValueA;
        pub const SHRegDeleteEmptyUSKey = thismodule.SHRegDeleteEmptyUSKeyA;
        pub const SHRegEnumUSKey = thismodule.SHRegEnumUSKeyA;
        pub const SHRegEnumUSValue = thismodule.SHRegEnumUSValueA;
        pub const SHRegQueryInfoUSKey = thismodule.SHRegQueryInfoUSKeyA;
        pub const SHRegGetUSValue = thismodule.SHRegGetUSValueA;
        pub const SHRegSetUSValue = thismodule.SHRegSetUSValueA;
        pub const SHRegGetBoolUSValue = thismodule.SHRegGetBoolUSValueA;
        pub const AssocQueryString = thismodule.AssocQueryStringA;
        pub const AssocQueryStringByKey = thismodule.AssocQueryStringByKeyA;
        pub const AssocQueryKey = thismodule.AssocQueryKeyA;
        pub const SHOpenRegStream = thismodule.SHOpenRegStreamA;
        pub const SHOpenRegStream2 = thismodule.SHOpenRegStream2A;
        pub const SHCreateStreamOnFile = thismodule.SHCreateStreamOnFileA;
        pub const GetAcceptLanguages = thismodule.GetAcceptLanguagesA;
        pub const SHFormatDateTime = thismodule.SHFormatDateTimeA;
        pub const SHMessageBoxCheck = thismodule.SHMessageBoxCheckA;
        pub const SHSendMessageBroadcast = thismodule.SHSendMessageBroadcastA;
        pub const SHStripMneumonic = thismodule.SHStripMneumonicA;
    },
    .wide => struct {
        pub const MULTIKEYHELP = thismodule.MULTIKEYHELPW;
        pub const HELPWININFO = thismodule.HELPWININFOW;
        pub const IShellLink = thismodule.IShellLinkW;
        pub const IExtractIcon = thismodule.IExtractIconW;
        pub const BROWSEINFO = thismodule.BROWSEINFOW;
        pub const FILEDESCRIPTOR = thismodule.FILEDESCRIPTORW;
        pub const FILEGROUPDESCRIPTOR = thismodule.FILEGROUPDESCRIPTORW;
        pub const SHELLSTATE = thismodule.SHELLSTATEW;
        pub const INewShortcutHook = thismodule.INewShortcutHookW;
        pub const ICopyHook = thismodule.ICopyHookW;
        pub const DRAGINFO = thismodule.DRAGINFOW;
        pub const SHFILEOPSTRUCT = thismodule.SHFILEOPSTRUCTW;
        pub const SHNAMEMAPPING = thismodule.SHNAMEMAPPINGW;
        pub const SHELLEXECUTEINFO = thismodule.SHELLEXECUTEINFOW;
        pub const NOTIFYICONDATA = thismodule.NOTIFYICONDATAW;
        pub const SHFILEINFO = thismodule.SHFILEINFOW;
        pub const OPEN_PRINTER_PROPS_INFO = thismodule.OPEN_PRINTER_PROPS_INFOW;
        pub const PARSEDURL = thismodule.PARSEDURLW;
        pub const NEWCPLINFO = thismodule.NEWCPLINFOW;
        pub const PROFILEINFO = thismodule.PROFILEINFOW;
        pub const urlinvokecommandinfo = thismodule.urlinvokecommandinfoW;
        pub const IUniformResourceLocator = thismodule.IUniformResourceLocatorW;
        pub const LoadUserProfile = thismodule.LoadUserProfileW;
        pub const GetProfilesDirectory = thismodule.GetProfilesDirectoryW;
        pub const DeleteProfile = thismodule.DeleteProfileW;
        pub const GetDefaultUserProfileDirectory = thismodule.GetDefaultUserProfileDirectoryW;
        pub const GetAllUsersProfileDirectory = thismodule.GetAllUsersProfileDirectoryW;
        pub const GetUserProfileDirectory = thismodule.GetUserProfileDirectoryW;
        pub const WinHelp = thismodule.WinHelpW;
        pub const SHGetIconOverlayIndex = thismodule.SHGetIconOverlayIndexW;
        pub const ILCreateFromPath = thismodule.ILCreateFromPathW;
        pub const SHGetPathFromIDList = thismodule.SHGetPathFromIDListW;
        pub const SHCreateDirectoryEx = thismodule.SHCreateDirectoryExW;
        pub const SHGetSpecialFolderPath = thismodule.SHGetSpecialFolderPathW;
        pub const SHGetFolderPath = thismodule.SHGetFolderPathW;
        pub const SHSetFolderPath = thismodule.SHSetFolderPathW;
        pub const SHGetFolderPathAndSubDir = thismodule.SHGetFolderPathAndSubDirW;
        pub const SHBrowseForFolder = thismodule.SHBrowseForFolderW;
        pub const SHUpdateImage = thismodule.SHUpdateImageW;
        pub const SHGetDataFromIDList = thismodule.SHGetDataFromIDListW;
        pub const SHDefExtractIcon = thismodule.SHDefExtractIconW;
        pub const SHPathPrepareForWrite = thismodule.SHPathPrepareForWriteW;
        pub const PathIsSlow = thismodule.PathIsSlowW;
        pub const DragQueryFile = thismodule.DragQueryFileW;
        pub const ShellExecute = thismodule.ShellExecuteW;
        pub const FindExecutable = thismodule.FindExecutableW;
        pub const ShellAbout = thismodule.ShellAboutW;
        pub const ExtractAssociatedIcon = thismodule.ExtractAssociatedIconW;
        pub const ExtractAssociatedIconEx = thismodule.ExtractAssociatedIconExW;
        pub const ExtractIcon = thismodule.ExtractIconW;
        pub const DoEnvironmentSubst = thismodule.DoEnvironmentSubstW;
        pub const ExtractIconEx = thismodule.ExtractIconExW;
        pub const SHFileOperation = thismodule.SHFileOperationW;
        pub const ShellExecuteEx = thismodule.ShellExecuteExW;
        pub const SHQueryRecycleBin = thismodule.SHQueryRecycleBinW;
        pub const SHEmptyRecycleBin = thismodule.SHEmptyRecycleBinW;
        pub const Shell_NotifyIcon = thismodule.Shell_NotifyIconW;
        pub const SHGetFileInfo = thismodule.SHGetFileInfoW;
        pub const SHGetDiskFreeSpaceEx = thismodule.SHGetDiskFreeSpaceExW;
        pub const SHGetNewLinkInfo = thismodule.SHGetNewLinkInfoW;
        pub const SHInvokePrinterCommand = thismodule.SHInvokePrinterCommandW;
        pub const ShellMessageBox = thismodule.ShellMessageBoxW;
        pub const IsLFNDrive = thismodule.IsLFNDriveW;
        pub const StrChr = thismodule.StrChrW;
        pub const StrChrI = thismodule.StrChrIW;
        pub const StrCmpN = thismodule.StrCmpNW;
        pub const StrCmpNI = thismodule.StrCmpNIW;
        pub const StrCSpn = thismodule.StrCSpnW;
        pub const StrCSpnI = thismodule.StrCSpnIW;
        pub const StrDup = thismodule.StrDupW;
        pub const StrFormatByteSize = thismodule.StrFormatByteSizeW;
        pub const StrFormatKBSize = thismodule.StrFormatKBSizeW;
        pub const StrFromTimeInterval = thismodule.StrFromTimeIntervalW;
        pub const StrIsIntlEqual = thismodule.StrIsIntlEqualW;
        pub const StrNCat = thismodule.StrNCatW;
        pub const StrPBrk = thismodule.StrPBrkW;
        pub const StrRChr = thismodule.StrRChrW;
        pub const StrRChrI = thismodule.StrRChrIW;
        pub const StrRStrI = thismodule.StrRStrIW;
        pub const StrSpn = thismodule.StrSpnW;
        pub const StrStr = thismodule.StrStrW;
        pub const StrStrI = thismodule.StrStrIW;
        pub const StrToInt = thismodule.StrToIntW;
        pub const StrToIntEx = thismodule.StrToIntExW;
        pub const StrToInt64Ex = thismodule.StrToInt64ExW;
        pub const StrTrim = thismodule.StrTrimW;
        pub const StrCatBuff = thismodule.StrCatBuffW;
        pub const ChrCmpI = thismodule.ChrCmpIW;
        pub const wvnsprintf = thismodule.wvnsprintfW;
        pub const wnsprintf = thismodule.wnsprintfW;
        pub const StrRetToStr = thismodule.StrRetToStrW;
        pub const StrRetToBuf = thismodule.StrRetToBufW;
        pub const SHStrDup = thismodule.SHStrDupW;
        pub const IsCharSpace = thismodule.IsCharSpaceW;
        pub const StrCmpC = thismodule.StrCmpCW;
        pub const StrCmpIC = thismodule.StrCmpICW;
        pub const StrCmpNC = thismodule.StrCmpNCW;
        pub const StrCmpNIC = thismodule.StrCmpNICW;
        pub const IntlStrEqWorker = thismodule.IntlStrEqWorkerW;
        pub const PathAddBackslash = thismodule.PathAddBackslashW;
        pub const PathAddExtension = thismodule.PathAddExtensionW;
        pub const PathAppend = thismodule.PathAppendW;
        pub const PathBuildRoot = thismodule.PathBuildRootW;
        pub const PathCanonicalize = thismodule.PathCanonicalizeW;
        pub const PathCombine = thismodule.PathCombineW;
        pub const PathCompactPath = thismodule.PathCompactPathW;
        pub const PathCompactPathEx = thismodule.PathCompactPathExW;
        pub const PathCommonPrefix = thismodule.PathCommonPrefixW;
        pub const PathFileExists = thismodule.PathFileExistsW;
        pub const PathFindExtension = thismodule.PathFindExtensionW;
        pub const PathFindFileName = thismodule.PathFindFileNameW;
        pub const PathFindNextComponent = thismodule.PathFindNextComponentW;
        pub const PathFindOnPath = thismodule.PathFindOnPathW;
        pub const PathFindSuffixArray = thismodule.PathFindSuffixArrayW;
        pub const PathGetArgs = thismodule.PathGetArgsW;
        pub const PathIsLFNFileSpec = thismodule.PathIsLFNFileSpecW;
        pub const PathGetCharType = thismodule.PathGetCharTypeW;
        pub const PathGetDriveNumber = thismodule.PathGetDriveNumberW;
        pub const PathIsDirectory = thismodule.PathIsDirectoryW;
        pub const PathIsDirectoryEmpty = thismodule.PathIsDirectoryEmptyW;
        pub const PathIsFileSpec = thismodule.PathIsFileSpecW;
        pub const PathIsPrefix = thismodule.PathIsPrefixW;
        pub const PathIsRelative = thismodule.PathIsRelativeW;
        pub const PathIsRoot = thismodule.PathIsRootW;
        pub const PathIsSameRoot = thismodule.PathIsSameRootW;
        pub const PathIsUNC = thismodule.PathIsUNCW;
        pub const PathIsNetworkPath = thismodule.PathIsNetworkPathW;
        pub const PathIsUNCServer = thismodule.PathIsUNCServerW;
        pub const PathIsUNCServerShare = thismodule.PathIsUNCServerShareW;
        pub const PathIsContentType = thismodule.PathIsContentTypeW;
        pub const PathIsURL = thismodule.PathIsURLW;
        pub const PathMakePretty = thismodule.PathMakePrettyW;
        pub const PathMatchSpec = thismodule.PathMatchSpecW;
        pub const PathMatchSpecEx = thismodule.PathMatchSpecExW;
        pub const PathParseIconLocation = thismodule.PathParseIconLocationW;
        pub const PathQuoteSpaces = thismodule.PathQuoteSpacesW;
        pub const PathRelativePathTo = thismodule.PathRelativePathToW;
        pub const PathRemoveArgs = thismodule.PathRemoveArgsW;
        pub const PathRemoveBackslash = thismodule.PathRemoveBackslashW;
        pub const PathRemoveBlanks = thismodule.PathRemoveBlanksW;
        pub const PathRemoveExtension = thismodule.PathRemoveExtensionW;
        pub const PathRemoveFileSpec = thismodule.PathRemoveFileSpecW;
        pub const PathRenameExtension = thismodule.PathRenameExtensionW;
        pub const PathSearchAndQualify = thismodule.PathSearchAndQualifyW;
        pub const PathSetDlgItemPath = thismodule.PathSetDlgItemPathW;
        pub const PathSkipRoot = thismodule.PathSkipRootW;
        pub const PathStripPath = thismodule.PathStripPathW;
        pub const PathStripToRoot = thismodule.PathStripToRootW;
        pub const PathUnquoteSpaces = thismodule.PathUnquoteSpacesW;
        pub const PathMakeSystemFolder = thismodule.PathMakeSystemFolderW;
        pub const PathUnmakeSystemFolder = thismodule.PathUnmakeSystemFolderW;
        pub const PathIsSystemFolder = thismodule.PathIsSystemFolderW;
        pub const PathUndecorate = thismodule.PathUndecorateW;
        pub const PathUnExpandEnvStrings = thismodule.PathUnExpandEnvStringsW;
        pub const UrlCompare = thismodule.UrlCompareW;
        pub const UrlCombine = thismodule.UrlCombineW;
        pub const UrlCanonicalize = thismodule.UrlCanonicalizeW;
        pub const UrlIsOpaque = thismodule.UrlIsOpaqueW;
        pub const UrlIsNoHistory = thismodule.UrlIsNoHistoryW;
        pub const UrlIs = thismodule.UrlIsW;
        pub const UrlGetLocation = thismodule.UrlGetLocationW;
        pub const UrlUnescape = thismodule.UrlUnescapeW;
        pub const UrlEscape = thismodule.UrlEscapeW;
        pub const UrlCreateFromPath = thismodule.UrlCreateFromPathW;
        pub const PathCreateFromUrl = thismodule.PathCreateFromUrlW;
        pub const UrlHash = thismodule.UrlHashW;
        pub const UrlGetPart = thismodule.UrlGetPartW;
        pub const UrlApplyScheme = thismodule.UrlApplySchemeW;
        pub const ParseURL = thismodule.ParseURLW;
        pub const SHDeleteEmptyKey = thismodule.SHDeleteEmptyKeyW;
        pub const SHDeleteKey = thismodule.SHDeleteKeyW;
        pub const SHDeleteValue = thismodule.SHDeleteValueW;
        pub const SHGetValue = thismodule.SHGetValueW;
        pub const SHSetValue = thismodule.SHSetValueW;
        pub const SHRegGetValue = thismodule.SHRegGetValueW;
        pub const SHQueryValueEx = thismodule.SHQueryValueExW;
        pub const SHEnumKeyEx = thismodule.SHEnumKeyExW;
        pub const SHEnumValue = thismodule.SHEnumValueW;
        pub const SHQueryInfoKey = thismodule.SHQueryInfoKeyW;
        pub const SHCopyKey = thismodule.SHCopyKeyW;
        pub const SHRegGetPath = thismodule.SHRegGetPathW;
        pub const SHRegSetPath = thismodule.SHRegSetPathW;
        pub const SHRegCreateUSKey = thismodule.SHRegCreateUSKeyW;
        pub const SHRegOpenUSKey = thismodule.SHRegOpenUSKeyW;
        pub const SHRegQueryUSValue = thismodule.SHRegQueryUSValueW;
        pub const SHRegWriteUSValue = thismodule.SHRegWriteUSValueW;
        pub const SHRegDeleteUSValue = thismodule.SHRegDeleteUSValueW;
        pub const SHRegDeleteEmptyUSKey = thismodule.SHRegDeleteEmptyUSKeyW;
        pub const SHRegEnumUSKey = thismodule.SHRegEnumUSKeyW;
        pub const SHRegEnumUSValue = thismodule.SHRegEnumUSValueW;
        pub const SHRegQueryInfoUSKey = thismodule.SHRegQueryInfoUSKeyW;
        pub const SHRegGetUSValue = thismodule.SHRegGetUSValueW;
        pub const SHRegSetUSValue = thismodule.SHRegSetUSValueW;
        pub const SHRegGetBoolUSValue = thismodule.SHRegGetBoolUSValueW;
        pub const AssocQueryString = thismodule.AssocQueryStringW;
        pub const AssocQueryStringByKey = thismodule.AssocQueryStringByKeyW;
        pub const AssocQueryKey = thismodule.AssocQueryKeyW;
        pub const SHOpenRegStream = thismodule.SHOpenRegStreamW;
        pub const SHOpenRegStream2 = thismodule.SHOpenRegStream2W;
        pub const SHCreateStreamOnFile = thismodule.SHCreateStreamOnFileW;
        pub const GetAcceptLanguages = thismodule.GetAcceptLanguagesW;
        pub const SHFormatDateTime = thismodule.SHFormatDateTimeW;
        pub const SHMessageBoxCheck = thismodule.SHMessageBoxCheckW;
        pub const SHSendMessageBroadcast = thismodule.SHSendMessageBroadcastW;
        pub const SHStripMneumonic = thismodule.SHStripMneumonicW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const MULTIKEYHELP = *opaque {};
        pub const HELPWININFO = *opaque {};
        pub const IShellLink = *opaque {};
        pub const IExtractIcon = *opaque {};
        pub const BROWSEINFO = *opaque {};
        pub const FILEDESCRIPTOR = *opaque {};
        pub const FILEGROUPDESCRIPTOR = *opaque {};
        pub const SHELLSTATE = *opaque {};
        pub const INewShortcutHook = *opaque {};
        pub const ICopyHook = *opaque {};
        pub const DRAGINFO = *opaque {};
        pub const SHFILEOPSTRUCT = *opaque {};
        pub const SHNAMEMAPPING = *opaque {};
        pub const SHELLEXECUTEINFO = *opaque {};
        pub const NOTIFYICONDATA = *opaque {};
        pub const SHFILEINFO = *opaque {};
        pub const OPEN_PRINTER_PROPS_INFO = *opaque {};
        pub const PARSEDURL = *opaque {};
        pub const NEWCPLINFO = *opaque {};
        pub const PROFILEINFO = *opaque {};
        pub const urlinvokecommandinfo = *opaque {};
        pub const IUniformResourceLocator = *opaque {};
        pub const LoadUserProfile = *opaque {};
        pub const GetProfilesDirectory = *opaque {};
        pub const DeleteProfile = *opaque {};
        pub const GetDefaultUserProfileDirectory = *opaque {};
        pub const GetAllUsersProfileDirectory = *opaque {};
        pub const GetUserProfileDirectory = *opaque {};
        pub const WinHelp = *opaque {};
        pub const SHGetIconOverlayIndex = *opaque {};
        pub const ILCreateFromPath = *opaque {};
        pub const SHGetPathFromIDList = *opaque {};
        pub const SHCreateDirectoryEx = *opaque {};
        pub const SHGetSpecialFolderPath = *opaque {};
        pub const SHGetFolderPath = *opaque {};
        pub const SHSetFolderPath = *opaque {};
        pub const SHGetFolderPathAndSubDir = *opaque {};
        pub const SHBrowseForFolder = *opaque {};
        pub const SHUpdateImage = *opaque {};
        pub const SHGetDataFromIDList = *opaque {};
        pub const SHDefExtractIcon = *opaque {};
        pub const SHPathPrepareForWrite = *opaque {};
        pub const PathIsSlow = *opaque {};
        pub const DragQueryFile = *opaque {};
        pub const ShellExecute = *opaque {};
        pub const FindExecutable = *opaque {};
        pub const ShellAbout = *opaque {};
        pub const ExtractAssociatedIcon = *opaque {};
        pub const ExtractAssociatedIconEx = *opaque {};
        pub const ExtractIcon = *opaque {};
        pub const DoEnvironmentSubst = *opaque {};
        pub const ExtractIconEx = *opaque {};
        pub const SHFileOperation = *opaque {};
        pub const ShellExecuteEx = *opaque {};
        pub const SHQueryRecycleBin = *opaque {};
        pub const SHEmptyRecycleBin = *opaque {};
        pub const Shell_NotifyIcon = *opaque {};
        pub const SHGetFileInfo = *opaque {};
        pub const SHGetDiskFreeSpaceEx = *opaque {};
        pub const SHGetNewLinkInfo = *opaque {};
        pub const SHInvokePrinterCommand = *opaque {};
        pub const ShellMessageBox = *opaque {};
        pub const IsLFNDrive = *opaque {};
        pub const StrChr = *opaque {};
        pub const StrChrI = *opaque {};
        pub const StrCmpN = *opaque {};
        pub const StrCmpNI = *opaque {};
        pub const StrCSpn = *opaque {};
        pub const StrCSpnI = *opaque {};
        pub const StrDup = *opaque {};
        pub const StrFormatByteSize = *opaque {};
        pub const StrFormatKBSize = *opaque {};
        pub const StrFromTimeInterval = *opaque {};
        pub const StrIsIntlEqual = *opaque {};
        pub const StrNCat = *opaque {};
        pub const StrPBrk = *opaque {};
        pub const StrRChr = *opaque {};
        pub const StrRChrI = *opaque {};
        pub const StrRStrI = *opaque {};
        pub const StrSpn = *opaque {};
        pub const StrStr = *opaque {};
        pub const StrStrI = *opaque {};
        pub const StrToInt = *opaque {};
        pub const StrToIntEx = *opaque {};
        pub const StrToInt64Ex = *opaque {};
        pub const StrTrim = *opaque {};
        pub const StrCatBuff = *opaque {};
        pub const ChrCmpI = *opaque {};
        pub const wvnsprintf = *opaque {};
        pub const wnsprintf = *opaque {};
        pub const StrRetToStr = *opaque {};
        pub const StrRetToBuf = *opaque {};
        pub const SHStrDup = *opaque {};
        pub const IsCharSpace = *opaque {};
        pub const StrCmpC = *opaque {};
        pub const StrCmpIC = *opaque {};
        pub const StrCmpNC = *opaque {};
        pub const StrCmpNIC = *opaque {};
        pub const IntlStrEqWorker = *opaque {};
        pub const PathAddBackslash = *opaque {};
        pub const PathAddExtension = *opaque {};
        pub const PathAppend = *opaque {};
        pub const PathBuildRoot = *opaque {};
        pub const PathCanonicalize = *opaque {};
        pub const PathCombine = *opaque {};
        pub const PathCompactPath = *opaque {};
        pub const PathCompactPathEx = *opaque {};
        pub const PathCommonPrefix = *opaque {};
        pub const PathFileExists = *opaque {};
        pub const PathFindExtension = *opaque {};
        pub const PathFindFileName = *opaque {};
        pub const PathFindNextComponent = *opaque {};
        pub const PathFindOnPath = *opaque {};
        pub const PathFindSuffixArray = *opaque {};
        pub const PathGetArgs = *opaque {};
        pub const PathIsLFNFileSpec = *opaque {};
        pub const PathGetCharType = *opaque {};
        pub const PathGetDriveNumber = *opaque {};
        pub const PathIsDirectory = *opaque {};
        pub const PathIsDirectoryEmpty = *opaque {};
        pub const PathIsFileSpec = *opaque {};
        pub const PathIsPrefix = *opaque {};
        pub const PathIsRelative = *opaque {};
        pub const PathIsRoot = *opaque {};
        pub const PathIsSameRoot = *opaque {};
        pub const PathIsUNC = *opaque {};
        pub const PathIsNetworkPath = *opaque {};
        pub const PathIsUNCServer = *opaque {};
        pub const PathIsUNCServerShare = *opaque {};
        pub const PathIsContentType = *opaque {};
        pub const PathIsURL = *opaque {};
        pub const PathMakePretty = *opaque {};
        pub const PathMatchSpec = *opaque {};
        pub const PathMatchSpecEx = *opaque {};
        pub const PathParseIconLocation = *opaque {};
        pub const PathQuoteSpaces = *opaque {};
        pub const PathRelativePathTo = *opaque {};
        pub const PathRemoveArgs = *opaque {};
        pub const PathRemoveBackslash = *opaque {};
        pub const PathRemoveBlanks = *opaque {};
        pub const PathRemoveExtension = *opaque {};
        pub const PathRemoveFileSpec = *opaque {};
        pub const PathRenameExtension = *opaque {};
        pub const PathSearchAndQualify = *opaque {};
        pub const PathSetDlgItemPath = *opaque {};
        pub const PathSkipRoot = *opaque {};
        pub const PathStripPath = *opaque {};
        pub const PathStripToRoot = *opaque {};
        pub const PathUnquoteSpaces = *opaque {};
        pub const PathMakeSystemFolder = *opaque {};
        pub const PathUnmakeSystemFolder = *opaque {};
        pub const PathIsSystemFolder = *opaque {};
        pub const PathUndecorate = *opaque {};
        pub const PathUnExpandEnvStrings = *opaque {};
        pub const UrlCompare = *opaque {};
        pub const UrlCombine = *opaque {};
        pub const UrlCanonicalize = *opaque {};
        pub const UrlIsOpaque = *opaque {};
        pub const UrlIsNoHistory = *opaque {};
        pub const UrlIs = *opaque {};
        pub const UrlGetLocation = *opaque {};
        pub const UrlUnescape = *opaque {};
        pub const UrlEscape = *opaque {};
        pub const UrlCreateFromPath = *opaque {};
        pub const PathCreateFromUrl = *opaque {};
        pub const UrlHash = *opaque {};
        pub const UrlGetPart = *opaque {};
        pub const UrlApplyScheme = *opaque {};
        pub const ParseURL = *opaque {};
        pub const SHDeleteEmptyKey = *opaque {};
        pub const SHDeleteKey = *opaque {};
        pub const SHDeleteValue = *opaque {};
        pub const SHGetValue = *opaque {};
        pub const SHSetValue = *opaque {};
        pub const SHRegGetValue = *opaque {};
        pub const SHQueryValueEx = *opaque {};
        pub const SHEnumKeyEx = *opaque {};
        pub const SHEnumValue = *opaque {};
        pub const SHQueryInfoKey = *opaque {};
        pub const SHCopyKey = *opaque {};
        pub const SHRegGetPath = *opaque {};
        pub const SHRegSetPath = *opaque {};
        pub const SHRegCreateUSKey = *opaque {};
        pub const SHRegOpenUSKey = *opaque {};
        pub const SHRegQueryUSValue = *opaque {};
        pub const SHRegWriteUSValue = *opaque {};
        pub const SHRegDeleteUSValue = *opaque {};
        pub const SHRegDeleteEmptyUSKey = *opaque {};
        pub const SHRegEnumUSKey = *opaque {};
        pub const SHRegEnumUSValue = *opaque {};
        pub const SHRegQueryInfoUSKey = *opaque {};
        pub const SHRegGetUSValue = *opaque {};
        pub const SHRegSetUSValue = *opaque {};
        pub const SHRegGetBoolUSValue = *opaque {};
        pub const AssocQueryString = *opaque {};
        pub const AssocQueryStringByKey = *opaque {};
        pub const AssocQueryKey = *opaque {};
        pub const SHOpenRegStream = *opaque {};
        pub const SHOpenRegStream2 = *opaque {};
        pub const SHCreateStreamOnFile = *opaque {};
        pub const GetAcceptLanguages = *opaque {};
        pub const SHFormatDateTime = *opaque {};
        pub const SHMessageBoxCheck = *opaque {};
        pub const SHSendMessageBroadcast = *opaque {};
        pub const SHStripMneumonic = *opaque {};
    } else struct {
        pub const MULTIKEYHELP = @compileError("'MULTIKEYHELP' requires that UNICODE be set to true or false in the root module");
        pub const HELPWININFO = @compileError("'HELPWININFO' requires that UNICODE be set to true or false in the root module");
        pub const IShellLink = @compileError("'IShellLink' requires that UNICODE be set to true or false in the root module");
        pub const IExtractIcon = @compileError("'IExtractIcon' requires that UNICODE be set to true or false in the root module");
        pub const BROWSEINFO = @compileError("'BROWSEINFO' requires that UNICODE be set to true or false in the root module");
        pub const FILEDESCRIPTOR = @compileError("'FILEDESCRIPTOR' requires that UNICODE be set to true or false in the root module");
        pub const FILEGROUPDESCRIPTOR = @compileError("'FILEGROUPDESCRIPTOR' requires that UNICODE be set to true or false in the root module");
        pub const SHELLSTATE = @compileError("'SHELLSTATE' requires that UNICODE be set to true or false in the root module");
        pub const INewShortcutHook = @compileError("'INewShortcutHook' requires that UNICODE be set to true or false in the root module");
        pub const ICopyHook = @compileError("'ICopyHook' requires that UNICODE be set to true or false in the root module");
        pub const DRAGINFO = @compileError("'DRAGINFO' requires that UNICODE be set to true or false in the root module");
        pub const SHFILEOPSTRUCT = @compileError("'SHFILEOPSTRUCT' requires that UNICODE be set to true or false in the root module");
        pub const SHNAMEMAPPING = @compileError("'SHNAMEMAPPING' requires that UNICODE be set to true or false in the root module");
        pub const SHELLEXECUTEINFO = @compileError("'SHELLEXECUTEINFO' requires that UNICODE be set to true or false in the root module");
        pub const NOTIFYICONDATA = @compileError("'NOTIFYICONDATA' requires that UNICODE be set to true or false in the root module");
        pub const SHFILEINFO = @compileError("'SHFILEINFO' requires that UNICODE be set to true or false in the root module");
        pub const OPEN_PRINTER_PROPS_INFO = @compileError("'OPEN_PRINTER_PROPS_INFO' requires that UNICODE be set to true or false in the root module");
        pub const PARSEDURL = @compileError("'PARSEDURL' requires that UNICODE be set to true or false in the root module");
        pub const NEWCPLINFO = @compileError("'NEWCPLINFO' requires that UNICODE be set to true or false in the root module");
        pub const PROFILEINFO = @compileError("'PROFILEINFO' requires that UNICODE be set to true or false in the root module");
        pub const urlinvokecommandinfo = @compileError("'urlinvokecommandinfo' requires that UNICODE be set to true or false in the root module");
        pub const IUniformResourceLocator = @compileError("'IUniformResourceLocator' requires that UNICODE be set to true or false in the root module");
        pub const LoadUserProfile = @compileError("'LoadUserProfile' requires that UNICODE be set to true or false in the root module");
        pub const GetProfilesDirectory = @compileError("'GetProfilesDirectory' requires that UNICODE be set to true or false in the root module");
        pub const DeleteProfile = @compileError("'DeleteProfile' requires that UNICODE be set to true or false in the root module");
        pub const GetDefaultUserProfileDirectory = @compileError("'GetDefaultUserProfileDirectory' requires that UNICODE be set to true or false in the root module");
        pub const GetAllUsersProfileDirectory = @compileError("'GetAllUsersProfileDirectory' requires that UNICODE be set to true or false in the root module");
        pub const GetUserProfileDirectory = @compileError("'GetUserProfileDirectory' requires that UNICODE be set to true or false in the root module");
        pub const WinHelp = @compileError("'WinHelp' requires that UNICODE be set to true or false in the root module");
        pub const SHGetIconOverlayIndex = @compileError("'SHGetIconOverlayIndex' requires that UNICODE be set to true or false in the root module");
        pub const ILCreateFromPath = @compileError("'ILCreateFromPath' requires that UNICODE be set to true or false in the root module");
        pub const SHGetPathFromIDList = @compileError("'SHGetPathFromIDList' requires that UNICODE be set to true or false in the root module");
        pub const SHCreateDirectoryEx = @compileError("'SHCreateDirectoryEx' requires that UNICODE be set to true or false in the root module");
        pub const SHGetSpecialFolderPath = @compileError("'SHGetSpecialFolderPath' requires that UNICODE be set to true or false in the root module");
        pub const SHGetFolderPath = @compileError("'SHGetFolderPath' requires that UNICODE be set to true or false in the root module");
        pub const SHSetFolderPath = @compileError("'SHSetFolderPath' requires that UNICODE be set to true or false in the root module");
        pub const SHGetFolderPathAndSubDir = @compileError("'SHGetFolderPathAndSubDir' requires that UNICODE be set to true or false in the root module");
        pub const SHBrowseForFolder = @compileError("'SHBrowseForFolder' requires that UNICODE be set to true or false in the root module");
        pub const SHUpdateImage = @compileError("'SHUpdateImage' requires that UNICODE be set to true or false in the root module");
        pub const SHGetDataFromIDList = @compileError("'SHGetDataFromIDList' requires that UNICODE be set to true or false in the root module");
        pub const SHDefExtractIcon = @compileError("'SHDefExtractIcon' requires that UNICODE be set to true or false in the root module");
        pub const SHPathPrepareForWrite = @compileError("'SHPathPrepareForWrite' requires that UNICODE be set to true or false in the root module");
        pub const PathIsSlow = @compileError("'PathIsSlow' requires that UNICODE be set to true or false in the root module");
        pub const DragQueryFile = @compileError("'DragQueryFile' requires that UNICODE be set to true or false in the root module");
        pub const ShellExecute = @compileError("'ShellExecute' requires that UNICODE be set to true or false in the root module");
        pub const FindExecutable = @compileError("'FindExecutable' requires that UNICODE be set to true or false in the root module");
        pub const ShellAbout = @compileError("'ShellAbout' requires that UNICODE be set to true or false in the root module");
        pub const ExtractAssociatedIcon = @compileError("'ExtractAssociatedIcon' requires that UNICODE be set to true or false in the root module");
        pub const ExtractAssociatedIconEx = @compileError("'ExtractAssociatedIconEx' requires that UNICODE be set to true or false in the root module");
        pub const ExtractIcon = @compileError("'ExtractIcon' requires that UNICODE be set to true or false in the root module");
        pub const DoEnvironmentSubst = @compileError("'DoEnvironmentSubst' requires that UNICODE be set to true or false in the root module");
        pub const ExtractIconEx = @compileError("'ExtractIconEx' requires that UNICODE be set to true or false in the root module");
        pub const SHFileOperation = @compileError("'SHFileOperation' requires that UNICODE be set to true or false in the root module");
        pub const ShellExecuteEx = @compileError("'ShellExecuteEx' requires that UNICODE be set to true or false in the root module");
        pub const SHQueryRecycleBin = @compileError("'SHQueryRecycleBin' requires that UNICODE be set to true or false in the root module");
        pub const SHEmptyRecycleBin = @compileError("'SHEmptyRecycleBin' requires that UNICODE be set to true or false in the root module");
        pub const Shell_NotifyIcon = @compileError("'Shell_NotifyIcon' requires that UNICODE be set to true or false in the root module");
        pub const SHGetFileInfo = @compileError("'SHGetFileInfo' requires that UNICODE be set to true or false in the root module");
        pub const SHGetDiskFreeSpaceEx = @compileError("'SHGetDiskFreeSpaceEx' requires that UNICODE be set to true or false in the root module");
        pub const SHGetNewLinkInfo = @compileError("'SHGetNewLinkInfo' requires that UNICODE be set to true or false in the root module");
        pub const SHInvokePrinterCommand = @compileError("'SHInvokePrinterCommand' requires that UNICODE be set to true or false in the root module");
        pub const ShellMessageBox = @compileError("'ShellMessageBox' requires that UNICODE be set to true or false in the root module");
        pub const IsLFNDrive = @compileError("'IsLFNDrive' requires that UNICODE be set to true or false in the root module");
        pub const StrChr = @compileError("'StrChr' requires that UNICODE be set to true or false in the root module");
        pub const StrChrI = @compileError("'StrChrI' requires that UNICODE be set to true or false in the root module");
        pub const StrCmpN = @compileError("'StrCmpN' requires that UNICODE be set to true or false in the root module");
        pub const StrCmpNI = @compileError("'StrCmpNI' requires that UNICODE be set to true or false in the root module");
        pub const StrCSpn = @compileError("'StrCSpn' requires that UNICODE be set to true or false in the root module");
        pub const StrCSpnI = @compileError("'StrCSpnI' requires that UNICODE be set to true or false in the root module");
        pub const StrDup = @compileError("'StrDup' requires that UNICODE be set to true or false in the root module");
        pub const StrFormatByteSize = @compileError("'StrFormatByteSize' requires that UNICODE be set to true or false in the root module");
        pub const StrFormatKBSize = @compileError("'StrFormatKBSize' requires that UNICODE be set to true or false in the root module");
        pub const StrFromTimeInterval = @compileError("'StrFromTimeInterval' requires that UNICODE be set to true or false in the root module");
        pub const StrIsIntlEqual = @compileError("'StrIsIntlEqual' requires that UNICODE be set to true or false in the root module");
        pub const StrNCat = @compileError("'StrNCat' requires that UNICODE be set to true or false in the root module");
        pub const StrPBrk = @compileError("'StrPBrk' requires that UNICODE be set to true or false in the root module");
        pub const StrRChr = @compileError("'StrRChr' requires that UNICODE be set to true or false in the root module");
        pub const StrRChrI = @compileError("'StrRChrI' requires that UNICODE be set to true or false in the root module");
        pub const StrRStrI = @compileError("'StrRStrI' requires that UNICODE be set to true or false in the root module");
        pub const StrSpn = @compileError("'StrSpn' requires that UNICODE be set to true or false in the root module");
        pub const StrStr = @compileError("'StrStr' requires that UNICODE be set to true or false in the root module");
        pub const StrStrI = @compileError("'StrStrI' requires that UNICODE be set to true or false in the root module");
        pub const StrToInt = @compileError("'StrToInt' requires that UNICODE be set to true or false in the root module");
        pub const StrToIntEx = @compileError("'StrToIntEx' requires that UNICODE be set to true or false in the root module");
        pub const StrToInt64Ex = @compileError("'StrToInt64Ex' requires that UNICODE be set to true or false in the root module");
        pub const StrTrim = @compileError("'StrTrim' requires that UNICODE be set to true or false in the root module");
        pub const StrCatBuff = @compileError("'StrCatBuff' requires that UNICODE be set to true or false in the root module");
        pub const ChrCmpI = @compileError("'ChrCmpI' requires that UNICODE be set to true or false in the root module");
        pub const wvnsprintf = @compileError("'wvnsprintf' requires that UNICODE be set to true or false in the root module");
        pub const wnsprintf = @compileError("'wnsprintf' requires that UNICODE be set to true or false in the root module");
        pub const StrRetToStr = @compileError("'StrRetToStr' requires that UNICODE be set to true or false in the root module");
        pub const StrRetToBuf = @compileError("'StrRetToBuf' requires that UNICODE be set to true or false in the root module");
        pub const SHStrDup = @compileError("'SHStrDup' requires that UNICODE be set to true or false in the root module");
        pub const IsCharSpace = @compileError("'IsCharSpace' requires that UNICODE be set to true or false in the root module");
        pub const StrCmpC = @compileError("'StrCmpC' requires that UNICODE be set to true or false in the root module");
        pub const StrCmpIC = @compileError("'StrCmpIC' requires that UNICODE be set to true or false in the root module");
        pub const StrCmpNC = @compileError("'StrCmpNC' requires that UNICODE be set to true or false in the root module");
        pub const StrCmpNIC = @compileError("'StrCmpNIC' requires that UNICODE be set to true or false in the root module");
        pub const IntlStrEqWorker = @compileError("'IntlStrEqWorker' requires that UNICODE be set to true or false in the root module");
        pub const PathAddBackslash = @compileError("'PathAddBackslash' requires that UNICODE be set to true or false in the root module");
        pub const PathAddExtension = @compileError("'PathAddExtension' requires that UNICODE be set to true or false in the root module");
        pub const PathAppend = @compileError("'PathAppend' requires that UNICODE be set to true or false in the root module");
        pub const PathBuildRoot = @compileError("'PathBuildRoot' requires that UNICODE be set to true or false in the root module");
        pub const PathCanonicalize = @compileError("'PathCanonicalize' requires that UNICODE be set to true or false in the root module");
        pub const PathCombine = @compileError("'PathCombine' requires that UNICODE be set to true or false in the root module");
        pub const PathCompactPath = @compileError("'PathCompactPath' requires that UNICODE be set to true or false in the root module");
        pub const PathCompactPathEx = @compileError("'PathCompactPathEx' requires that UNICODE be set to true or false in the root module");
        pub const PathCommonPrefix = @compileError("'PathCommonPrefix' requires that UNICODE be set to true or false in the root module");
        pub const PathFileExists = @compileError("'PathFileExists' requires that UNICODE be set to true or false in the root module");
        pub const PathFindExtension = @compileError("'PathFindExtension' requires that UNICODE be set to true or false in the root module");
        pub const PathFindFileName = @compileError("'PathFindFileName' requires that UNICODE be set to true or false in the root module");
        pub const PathFindNextComponent = @compileError("'PathFindNextComponent' requires that UNICODE be set to true or false in the root module");
        pub const PathFindOnPath = @compileError("'PathFindOnPath' requires that UNICODE be set to true or false in the root module");
        pub const PathFindSuffixArray = @compileError("'PathFindSuffixArray' requires that UNICODE be set to true or false in the root module");
        pub const PathGetArgs = @compileError("'PathGetArgs' requires that UNICODE be set to true or false in the root module");
        pub const PathIsLFNFileSpec = @compileError("'PathIsLFNFileSpec' requires that UNICODE be set to true or false in the root module");
        pub const PathGetCharType = @compileError("'PathGetCharType' requires that UNICODE be set to true or false in the root module");
        pub const PathGetDriveNumber = @compileError("'PathGetDriveNumber' requires that UNICODE be set to true or false in the root module");
        pub const PathIsDirectory = @compileError("'PathIsDirectory' requires that UNICODE be set to true or false in the root module");
        pub const PathIsDirectoryEmpty = @compileError("'PathIsDirectoryEmpty' requires that UNICODE be set to true or false in the root module");
        pub const PathIsFileSpec = @compileError("'PathIsFileSpec' requires that UNICODE be set to true or false in the root module");
        pub const PathIsPrefix = @compileError("'PathIsPrefix' requires that UNICODE be set to true or false in the root module");
        pub const PathIsRelative = @compileError("'PathIsRelative' requires that UNICODE be set to true or false in the root module");
        pub const PathIsRoot = @compileError("'PathIsRoot' requires that UNICODE be set to true or false in the root module");
        pub const PathIsSameRoot = @compileError("'PathIsSameRoot' requires that UNICODE be set to true or false in the root module");
        pub const PathIsUNC = @compileError("'PathIsUNC' requires that UNICODE be set to true or false in the root module");
        pub const PathIsNetworkPath = @compileError("'PathIsNetworkPath' requires that UNICODE be set to true or false in the root module");
        pub const PathIsUNCServer = @compileError("'PathIsUNCServer' requires that UNICODE be set to true or false in the root module");
        pub const PathIsUNCServerShare = @compileError("'PathIsUNCServerShare' requires that UNICODE be set to true or false in the root module");
        pub const PathIsContentType = @compileError("'PathIsContentType' requires that UNICODE be set to true or false in the root module");
        pub const PathIsURL = @compileError("'PathIsURL' requires that UNICODE be set to true or false in the root module");
        pub const PathMakePretty = @compileError("'PathMakePretty' requires that UNICODE be set to true or false in the root module");
        pub const PathMatchSpec = @compileError("'PathMatchSpec' requires that UNICODE be set to true or false in the root module");
        pub const PathMatchSpecEx = @compileError("'PathMatchSpecEx' requires that UNICODE be set to true or false in the root module");
        pub const PathParseIconLocation = @compileError("'PathParseIconLocation' requires that UNICODE be set to true or false in the root module");
        pub const PathQuoteSpaces = @compileError("'PathQuoteSpaces' requires that UNICODE be set to true or false in the root module");
        pub const PathRelativePathTo = @compileError("'PathRelativePathTo' requires that UNICODE be set to true or false in the root module");
        pub const PathRemoveArgs = @compileError("'PathRemoveArgs' requires that UNICODE be set to true or false in the root module");
        pub const PathRemoveBackslash = @compileError("'PathRemoveBackslash' requires that UNICODE be set to true or false in the root module");
        pub const PathRemoveBlanks = @compileError("'PathRemoveBlanks' requires that UNICODE be set to true or false in the root module");
        pub const PathRemoveExtension = @compileError("'PathRemoveExtension' requires that UNICODE be set to true or false in the root module");
        pub const PathRemoveFileSpec = @compileError("'PathRemoveFileSpec' requires that UNICODE be set to true or false in the root module");
        pub const PathRenameExtension = @compileError("'PathRenameExtension' requires that UNICODE be set to true or false in the root module");
        pub const PathSearchAndQualify = @compileError("'PathSearchAndQualify' requires that UNICODE be set to true or false in the root module");
        pub const PathSetDlgItemPath = @compileError("'PathSetDlgItemPath' requires that UNICODE be set to true or false in the root module");
        pub const PathSkipRoot = @compileError("'PathSkipRoot' requires that UNICODE be set to true or false in the root module");
        pub const PathStripPath = @compileError("'PathStripPath' requires that UNICODE be set to true or false in the root module");
        pub const PathStripToRoot = @compileError("'PathStripToRoot' requires that UNICODE be set to true or false in the root module");
        pub const PathUnquoteSpaces = @compileError("'PathUnquoteSpaces' requires that UNICODE be set to true or false in the root module");
        pub const PathMakeSystemFolder = @compileError("'PathMakeSystemFolder' requires that UNICODE be set to true or false in the root module");
        pub const PathUnmakeSystemFolder = @compileError("'PathUnmakeSystemFolder' requires that UNICODE be set to true or false in the root module");
        pub const PathIsSystemFolder = @compileError("'PathIsSystemFolder' requires that UNICODE be set to true or false in the root module");
        pub const PathUndecorate = @compileError("'PathUndecorate' requires that UNICODE be set to true or false in the root module");
        pub const PathUnExpandEnvStrings = @compileError("'PathUnExpandEnvStrings' requires that UNICODE be set to true or false in the root module");
        pub const UrlCompare = @compileError("'UrlCompare' requires that UNICODE be set to true or false in the root module");
        pub const UrlCombine = @compileError("'UrlCombine' requires that UNICODE be set to true or false in the root module");
        pub const UrlCanonicalize = @compileError("'UrlCanonicalize' requires that UNICODE be set to true or false in the root module");
        pub const UrlIsOpaque = @compileError("'UrlIsOpaque' requires that UNICODE be set to true or false in the root module");
        pub const UrlIsNoHistory = @compileError("'UrlIsNoHistory' requires that UNICODE be set to true or false in the root module");
        pub const UrlIs = @compileError("'UrlIs' requires that UNICODE be set to true or false in the root module");
        pub const UrlGetLocation = @compileError("'UrlGetLocation' requires that UNICODE be set to true or false in the root module");
        pub const UrlUnescape = @compileError("'UrlUnescape' requires that UNICODE be set to true or false in the root module");
        pub const UrlEscape = @compileError("'UrlEscape' requires that UNICODE be set to true or false in the root module");
        pub const UrlCreateFromPath = @compileError("'UrlCreateFromPath' requires that UNICODE be set to true or false in the root module");
        pub const PathCreateFromUrl = @compileError("'PathCreateFromUrl' requires that UNICODE be set to true or false in the root module");
        pub const UrlHash = @compileError("'UrlHash' requires that UNICODE be set to true or false in the root module");
        pub const UrlGetPart = @compileError("'UrlGetPart' requires that UNICODE be set to true or false in the root module");
        pub const UrlApplyScheme = @compileError("'UrlApplyScheme' requires that UNICODE be set to true or false in the root module");
        pub const ParseURL = @compileError("'ParseURL' requires that UNICODE be set to true or false in the root module");
        pub const SHDeleteEmptyKey = @compileError("'SHDeleteEmptyKey' requires that UNICODE be set to true or false in the root module");
        pub const SHDeleteKey = @compileError("'SHDeleteKey' requires that UNICODE be set to true or false in the root module");
        pub const SHDeleteValue = @compileError("'SHDeleteValue' requires that UNICODE be set to true or false in the root module");
        pub const SHGetValue = @compileError("'SHGetValue' requires that UNICODE be set to true or false in the root module");
        pub const SHSetValue = @compileError("'SHSetValue' requires that UNICODE be set to true or false in the root module");
        pub const SHRegGetValue = @compileError("'SHRegGetValue' requires that UNICODE be set to true or false in the root module");
        pub const SHQueryValueEx = @compileError("'SHQueryValueEx' requires that UNICODE be set to true or false in the root module");
        pub const SHEnumKeyEx = @compileError("'SHEnumKeyEx' requires that UNICODE be set to true or false in the root module");
        pub const SHEnumValue = @compileError("'SHEnumValue' requires that UNICODE be set to true or false in the root module");
        pub const SHQueryInfoKey = @compileError("'SHQueryInfoKey' requires that UNICODE be set to true or false in the root module");
        pub const SHCopyKey = @compileError("'SHCopyKey' requires that UNICODE be set to true or false in the root module");
        pub const SHRegGetPath = @compileError("'SHRegGetPath' requires that UNICODE be set to true or false in the root module");
        pub const SHRegSetPath = @compileError("'SHRegSetPath' requires that UNICODE be set to true or false in the root module");
        pub const SHRegCreateUSKey = @compileError("'SHRegCreateUSKey' requires that UNICODE be set to true or false in the root module");
        pub const SHRegOpenUSKey = @compileError("'SHRegOpenUSKey' requires that UNICODE be set to true or false in the root module");
        pub const SHRegQueryUSValue = @compileError("'SHRegQueryUSValue' requires that UNICODE be set to true or false in the root module");
        pub const SHRegWriteUSValue = @compileError("'SHRegWriteUSValue' requires that UNICODE be set to true or false in the root module");
        pub const SHRegDeleteUSValue = @compileError("'SHRegDeleteUSValue' requires that UNICODE be set to true or false in the root module");
        pub const SHRegDeleteEmptyUSKey = @compileError("'SHRegDeleteEmptyUSKey' requires that UNICODE be set to true or false in the root module");
        pub const SHRegEnumUSKey = @compileError("'SHRegEnumUSKey' requires that UNICODE be set to true or false in the root module");
        pub const SHRegEnumUSValue = @compileError("'SHRegEnumUSValue' requires that UNICODE be set to true or false in the root module");
        pub const SHRegQueryInfoUSKey = @compileError("'SHRegQueryInfoUSKey' requires that UNICODE be set to true or false in the root module");
        pub const SHRegGetUSValue = @compileError("'SHRegGetUSValue' requires that UNICODE be set to true or false in the root module");
        pub const SHRegSetUSValue = @compileError("'SHRegSetUSValue' requires that UNICODE be set to true or false in the root module");
        pub const SHRegGetBoolUSValue = @compileError("'SHRegGetBoolUSValue' requires that UNICODE be set to true or false in the root module");
        pub const AssocQueryString = @compileError("'AssocQueryString' requires that UNICODE be set to true or false in the root module");
        pub const AssocQueryStringByKey = @compileError("'AssocQueryStringByKey' requires that UNICODE be set to true or false in the root module");
        pub const AssocQueryKey = @compileError("'AssocQueryKey' requires that UNICODE be set to true or false in the root module");
        pub const SHOpenRegStream = @compileError("'SHOpenRegStream' requires that UNICODE be set to true or false in the root module");
        pub const SHOpenRegStream2 = @compileError("'SHOpenRegStream2' requires that UNICODE be set to true or false in the root module");
        pub const SHCreateStreamOnFile = @compileError("'SHCreateStreamOnFile' requires that UNICODE be set to true or false in the root module");
        pub const GetAcceptLanguages = @compileError("'GetAcceptLanguages' requires that UNICODE be set to true or false in the root module");
        pub const SHFormatDateTime = @compileError("'SHFormatDateTime' requires that UNICODE be set to true or false in the root module");
        pub const SHMessageBoxCheck = @compileError("'SHMessageBoxCheck' requires that UNICODE be set to true or false in the root module");
        pub const SHSendMessageBroadcast = @compileError("'SHSendMessageBroadcast' requires that UNICODE be set to true or false in the root module");
        pub const SHStripMneumonic = @compileError("'SHStripMneumonic' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (105)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BOOLEAN = @import("../foundation.zig").BOOLEAN;
const BSTR = @import("../foundation.zig").BSTR;
const BYTE_BLOB = @import("../system/com.zig").BYTE_BLOB;
const CHAR = @import("../foundation.zig").CHAR;
const COMDLG_FILTERSPEC = @import("../ui/shell/common.zig").COMDLG_FILTERSPEC;
const COORD = @import("../system/console.zig").COORD;
const CREATESTRUCTW = @import("../ui/windows_and_messaging.zig").CREATESTRUCTW;
const DEVICE_SCALE_FACTOR = @import("../ui/shell/common.zig").DEVICE_SCALE_FACTOR;
const DISPPARAMS = @import("../system/com.zig").DISPPARAMS;
const EXCEPINFO = @import("../system/com.zig").EXCEPINFO;
const FILE_FLAGS_AND_ATTRIBUTES = @import("../storage/file_system.zig").FILE_FLAGS_AND_ATTRIBUTES;
const FILETIME = @import("../foundation.zig").FILETIME;
const FORMATETC = @import("../system/com.zig").FORMATETC;
const GETPROPERTYSTOREFLAGS = @import("../ui/shell/properties_system.zig").GETPROPERTYSTOREFLAGS;
const HACCEL = @import("../ui/windows_and_messaging.zig").HACCEL;
const HANDLE = @import("../foundation.zig").HANDLE;
const HBITMAP = @import("../graphics/gdi.zig").HBITMAP;
const HDC = @import("../graphics/gdi.zig").HDC;
const HICON = @import("../ui/windows_and_messaging.zig").HICON;
const HIMAGELIST = @import("../ui/controls.zig").HIMAGELIST;
const HINSTANCE = @import("../foundation.zig").HINSTANCE;
const HKEY = @import("../system/registry.zig").HKEY;
const HMENU = @import("../ui/windows_and_messaging.zig").HMENU;
const HMONITOR = @import("../graphics/gdi.zig").HMONITOR;
const HPALETTE = @import("../graphics/gdi.zig").HPALETTE;
const HPROPSHEETPAGE = @import("../ui/controls.zig").HPROPSHEETPAGE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IBindCtx = @import("../system/com.zig").IBindCtx;
const IBindStatusCallback = @import("../system/com.zig").IBindStatusCallback;
const ICondition = @import("../system/search.zig").ICondition;
const IConnectionPoint = @import("../system/com.zig").IConnectionPoint;
const IDataObject = @import("../system/com.zig").IDataObject;
const IDCompositionAnimation = @import("../graphics/direct_composition.zig").IDCompositionAnimation;
const IDispatch = @import("../system/com.zig").IDispatch;
const IDropSource = @import("../system/ole.zig").IDropSource;
const IDropTarget = @import("../system/ole.zig").IDropTarget;
const IEnumFORMATETC = @import("../system/com.zig").IEnumFORMATETC;
const IEnumGUID = @import("../system/com.zig").IEnumGUID;
const IEnumString = @import("../system/com.zig").IEnumString;
const IEnumUnknown = @import("../system/com.zig").IEnumUnknown;
const IMalloc = @import("../system/com.zig").IMalloc;
const IMoniker = @import("../system/com.zig").IMoniker;
const IObjectArray = @import("../ui/shell/common.zig").IObjectArray;
const IOleCommandTarget = @import("../system/ole.zig").IOleCommandTarget;
const IOleInPlaceSite = @import("../system/ole.zig").IOleInPlaceSite;
const IOleObject = @import("../system/ole.zig").IOleObject;
const IOleWindow = @import("../system/ole.zig").IOleWindow;
const IPersist = @import("../system/com.zig").IPersist;
const IPropertyBag = @import("../system/com/structured_storage.zig").IPropertyBag;
const IPropertyChangeArray = @import("../ui/shell/properties_system.zig").IPropertyChangeArray;
const IPropertyDescriptionList = @import("../ui/shell/properties_system.zig").IPropertyDescriptionList;
const IPropertySetStorage = @import("../system/com/structured_storage.zig").IPropertySetStorage;
const IPropertyStore = @import("../ui/shell/properties_system.zig").IPropertyStore;
const IServiceProvider = @import("../system/com.zig").IServiceProvider;
const IStorage = @import("../system/com/structured_storage.zig").IStorage;
const IStream = @import("../system/com.zig").IStream;
const ITEMIDLIST = @import("../ui/shell/common.zig").ITEMIDLIST;
const IUnknown = @import("../system/com.zig").IUnknown;
const IXMLDOMDocument = @import("../data/xml/ms_xml.zig").IXMLDOMDocument;
const LARGE_INTEGER = @import("../foundation.zig").LARGE_INTEGER;
const LOGFONTW = @import("../graphics/gdi.zig").LOGFONTW;
const LPARAM = @import("../foundation.zig").LPARAM;
const LPFNSVADDPROPSHEETPAGE = @import("../ui/controls.zig").LPFNSVADDPROPSHEETPAGE;
const LPTHREAD_START_ROUTINE = @import("../system/threading.zig").LPTHREAD_START_ROUTINE;
const LRESULT = @import("../foundation.zig").LRESULT;
const MSG = @import("../ui/windows_and_messaging.zig").MSG;
const NETRESOURCEA = @import("../network_management/wnet.zig").NETRESOURCEA;
const NMHDR = @import("../ui/controls.zig").NMHDR;
const NTSTATUS = @import("../foundation.zig").NTSTATUS;
const OLECMDEXECOPT = @import("../system/ole.zig").OLECMDEXECOPT;
const OLECMDF = @import("../system/ole.zig").OLECMDF;
const OLECMDID = @import("../system/ole.zig").OLECMDID;
const OleMenuGroupWidths = @import("../system/ole.zig").OleMenuGroupWidths;
const OVERLAPPED = @import("../system/io.zig").OVERLAPPED;
const PDOPSTATUS = @import("../ui/shell/properties_system.zig").PDOPSTATUS;
const PERCEIVED = @import("../ui/shell/common.zig").PERCEIVED;
const POINT = @import("../foundation.zig").POINT;
const POINTL = @import("../foundation.zig").POINTL;
const PROCESS_INFORMATION = @import("../system/threading.zig").PROCESS_INFORMATION;
const PROPERTYKEY = @import("../ui/shell/properties_system.zig").PROPERTYKEY;
const PROPVARIANT = @import("../system/com/structured_storage.zig").PROPVARIANT;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const READYSTATE = @import("../system/ole.zig").READYSTATE;
const RECT = @import("../foundation.zig").RECT;
const RECTL = @import("../foundation.zig").RECTL;
const SECURITY_ATTRIBUTES = @import("../security.zig").SECURITY_ATTRIBUTES;
const SHANDLE_PTR = @import("../foundation.zig").SHANDLE_PTR;
const SHELLDETAILS = @import("../ui/shell/common.zig").SHELLDETAILS;
const SHITEMID = @import("../ui/shell/common.zig").SHITEMID;
const SIZE = @import("../foundation.zig").SIZE;
const SOFTDISTINFO = @import("../system/com/urlmon.zig").SOFTDISTINFO;
const STARTUPINFOW = @import("../system/threading.zig").STARTUPINFOW;
const STRRET = @import("../ui/shell/common.zig").STRRET;
const SYSTEMTIME = @import("../foundation.zig").SYSTEMTIME;
const TBBUTTON = @import("../ui/controls.zig").TBBUTTON;
const ULARGE_INTEGER = @import("../foundation.zig").ULARGE_INTEGER;
const VARIANT = @import("../system/com.zig").VARIANT;
const WIN32_ERROR = @import("../foundation.zig").WIN32_ERROR;
const WIN32_FIND_DATAA = @import("../storage/file_system.zig").WIN32_FIND_DATAA;
const WIN32_FIND_DATAW = @import("../storage/file_system.zig").WIN32_FIND_DATAW;
const WPARAM = @import("../foundation.zig").WPARAM;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "SUBCLASSPROC")) {
        _ = SUBCLASSPROC;
    }
    if (@hasDecl(@This(), "BFFCALLBACK")) {
        _ = BFFCALLBACK;
    }
    if (@hasDecl(@This(), "LPFNDFMCALLBACK")) {
        _ = LPFNDFMCALLBACK;
    }
    if (@hasDecl(@This(), "LPFNVIEWCALLBACK")) {
        _ = LPFNVIEWCALLBACK;
    }
    if (@hasDecl(@This(), "PFNCANSHAREFOLDERW")) {
        _ = PFNCANSHAREFOLDERW;
    }
    if (@hasDecl(@This(), "PFNSHOWSHAREFOLDERUIW")) {
        _ = PFNSHOWSHAREFOLDERUIW;
    }
    if (@hasDecl(@This(), "DLLGETVERSIONPROC")) {
        _ = DLLGETVERSIONPROC;
    }
    if (@hasDecl(@This(), "APPLET_PROC")) {
        _ = APPLET_PROC;
    }
    if (@hasDecl(@This(), "PAPPSTATE_CHANGE_ROUTINE")) {
        _ = PAPPSTATE_CHANGE_ROUTINE;
    }
    if (@hasDecl(@This(), "PAPPCONSTRAIN_CHANGE_ROUTINE")) {
        _ = PAPPCONSTRAIN_CHANGE_ROUTINE;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
//--------------------------------------------------------------------------------
// Section: SubModules (2)
//--------------------------------------------------------------------------------
pub const common = @import("shell/common.zig");
pub const properties_system = @import("shell/properties_system.zig");
