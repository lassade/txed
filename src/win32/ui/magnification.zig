//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (8)
//--------------------------------------------------------------------------------
pub const WC_MAGNIFIERA = "Magnifier";
pub const WC_MAGNIFIERW = "Magnifier";
pub const WC_MAGNIFIER = "Magnifier";
pub const MS_SHOWMAGNIFIEDCURSOR = @as(i32, 1);
pub const MS_CLIPAROUNDCURSOR = @as(i32, 2);
pub const MS_INVERTCOLORS = @as(i32, 4);
pub const MW_FILTERMODE_EXCLUDE = @as(u32, 0);
pub const MW_FILTERMODE_INCLUDE = @as(u32, 1);

//--------------------------------------------------------------------------------
// Section: Types (4)
//--------------------------------------------------------------------------------
pub const MAGTRANSFORM = extern struct {
    v: [9]f32,
};

pub const MAGIMAGEHEADER = extern struct {
    width: u32,
    height: u32,
    format: Guid,
    stride: u32,
    offset: u32,
    cbSize: usize,
};

pub const MAGCOLOREFFECT = extern struct {
    transform: [25]f32,
};

pub const MagImageScalingCallback = *const fn (
    hwnd: ?HWND,
    srcdata: ?*anyopaque,
    srcheader: MAGIMAGEHEADER,
    destdata: ?*anyopaque,
    destheader: MAGIMAGEHEADER,
    unclipped: RECT,
    clipped: RECT,
    dirty: ?HRGN,
) callconv(@import("std").os.windows.WINAPI) BOOL;

//--------------------------------------------------------------------------------
// Section: Functions (19)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "magnification" fn MagInitialize() callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "magnification" fn MagUninitialize() callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "magnification" fn MagSetWindowSource(
    hwnd: ?HWND,
    rect: RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "magnification" fn MagGetWindowSource(
    hwnd: ?HWND,
    p_rect: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "magnification" fn MagSetWindowTransform(
    hwnd: ?HWND,
    p_transform: ?*MAGTRANSFORM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "magnification" fn MagGetWindowTransform(
    hwnd: ?HWND,
    p_transform: ?*MAGTRANSFORM,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "magnification" fn MagSetWindowFilterList(
    hwnd: ?HWND,
    dw_filter_mode: u32,
    count: i32,
    p_h_w_n_d: ?*?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "magnification" fn MagGetWindowFilterList(
    hwnd: ?HWND,
    pdw_filter_mode: ?*u32,
    count: i32,
    p_h_w_n_d: ?*?HWND,
) callconv(@import("std").os.windows.WINAPI) i32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "magnification" fn MagSetImageScalingCallback(
    hwnd: ?HWND,
    callback: ?MagImageScalingCallback,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "magnification" fn MagGetImageScalingCallback(
    hwnd: ?HWND,
    retval: *?MagImageScalingCallback,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "magnification" fn MagSetColorEffect(
    hwnd: ?HWND,
    p_effect: ?*MAGCOLOREFFECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "magnification" fn MagGetColorEffect(
    hwnd: ?HWND,
    p_effect: ?*MAGCOLOREFFECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "magnification" fn MagSetFullscreenTransform(
    mag_level: f32,
    x_offset: i32,
    y_offset: i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "magnification" fn MagGetFullscreenTransform(
    p_mag_level: ?*f32,
    px_offset: ?*i32,
    py_offset: ?*i32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "magnification" fn MagSetFullscreenColorEffect(
    p_effect: ?*MAGCOLOREFFECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "magnification" fn MagGetFullscreenColorEffect(
    p_effect: ?*MAGCOLOREFFECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "magnification" fn MagSetInputTransform(
    f_enabled: BOOL,
    p_rect_source: ?*const RECT,
    p_rect_dest: ?*const RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "magnification" fn MagGetInputTransform(
    pf_enabled: ?*BOOL,
    p_rect_source: ?*RECT,
    p_rect_dest: ?*RECT,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "magnification" fn MagShowSystemCursor(
    f_show_cursor: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (5)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const HRGN = @import("../graphics/gdi.zig").HRGN;
const HWND = @import("../foundation.zig").HWND;
const RECT = @import("../foundation.zig").RECT;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "MagImageScalingCallback")) {
        _ = MagImageScalingCallback;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
