//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (43)
//--------------------------------------------------------------------------------
pub const TASK_SUNDAY = @as(u32, 1);
pub const TASK_MONDAY = @as(u32, 2);
pub const TASK_TUESDAY = @as(u32, 4);
pub const TASK_WEDNESDAY = @as(u32, 8);
pub const TASK_THURSDAY = @as(u32, 16);
pub const TASK_FRIDAY = @as(u32, 32);
pub const TASK_SATURDAY = @as(u32, 64);
pub const TASK_FIRST_WEEK = @as(u32, 1);
pub const TASK_SECOND_WEEK = @as(u32, 2);
pub const TASK_THIRD_WEEK = @as(u32, 3);
pub const TASK_FOURTH_WEEK = @as(u32, 4);
pub const TASK_LAST_WEEK = @as(u32, 5);
pub const TASK_JANUARY = @as(u32, 1);
pub const TASK_FEBRUARY = @as(u32, 2);
pub const TASK_MARCH = @as(u32, 4);
pub const TASK_APRIL = @as(u32, 8);
pub const TASK_MAY = @as(u32, 16);
pub const TASK_JUNE = @as(u32, 32);
pub const TASK_JULY = @as(u32, 64);
pub const TASK_AUGUST = @as(u32, 128);
pub const TASK_SEPTEMBER = @as(u32, 256);
pub const TASK_OCTOBER = @as(u32, 512);
pub const TASK_NOVEMBER = @as(u32, 1024);
pub const TASK_DECEMBER = @as(u32, 2048);
pub const TASK_FLAG_INTERACTIVE = @as(u32, 1);
pub const TASK_FLAG_DELETE_WHEN_DONE = @as(u32, 2);
pub const TASK_FLAG_DISABLED = @as(u32, 4);
pub const TASK_FLAG_START_ONLY_IF_IDLE = @as(u32, 16);
pub const TASK_FLAG_KILL_ON_IDLE_END = @as(u32, 32);
pub const TASK_FLAG_DONT_START_IF_ON_BATTERIES = @as(u32, 64);
pub const TASK_FLAG_KILL_IF_GOING_ON_BATTERIES = @as(u32, 128);
pub const TASK_FLAG_RUN_ONLY_IF_DOCKED = @as(u32, 256);
pub const TASK_FLAG_HIDDEN = @as(u32, 512);
pub const TASK_FLAG_RUN_IF_CONNECTED_TO_INTERNET = @as(u32, 1024);
pub const TASK_FLAG_RESTART_ON_IDLE_RESUME = @as(u32, 2048);
pub const TASK_FLAG_SYSTEM_REQUIRED = @as(u32, 4096);
pub const TASK_FLAG_RUN_ONLY_IF_LOGGED_ON = @as(u32, 8192);
pub const TASK_TRIGGER_FLAG_HAS_END_DATE = @as(u32, 1);
pub const TASK_TRIGGER_FLAG_KILL_AT_DURATION_END = @as(u32, 2);
pub const TASK_TRIGGER_FLAG_DISABLED = @as(u32, 4);
pub const TASK_MAX_RUN_TIMES = @as(u32, 1440);
pub const CLSID_CTask = Guid.initString("148bd520-a2ab-11ce-b11f-00aa00530503");
pub const CLSID_CTaskScheduler = Guid.initString("148bd52a-a2ab-11ce-b11f-00aa00530503");

//--------------------------------------------------------------------------------
// Section: Types (72)
//--------------------------------------------------------------------------------
pub const TASK_TRIGGER_TYPE = enum(i32) {
    TIME_TRIGGER_ONCE = 0,
    TIME_TRIGGER_DAILY = 1,
    TIME_TRIGGER_WEEKLY = 2,
    TIME_TRIGGER_MONTHLYDATE = 3,
    TIME_TRIGGER_MONTHLYDOW = 4,
    EVENT_TRIGGER_ON_IDLE = 5,
    EVENT_TRIGGER_AT_SYSTEMSTART = 6,
    EVENT_TRIGGER_AT_LOGON = 7,
};
pub const TASK_TIME_TRIGGER_ONCE = TASK_TRIGGER_TYPE.TIME_TRIGGER_ONCE;
pub const TASK_TIME_TRIGGER_DAILY = TASK_TRIGGER_TYPE.TIME_TRIGGER_DAILY;
pub const TASK_TIME_TRIGGER_WEEKLY = TASK_TRIGGER_TYPE.TIME_TRIGGER_WEEKLY;
pub const TASK_TIME_TRIGGER_MONTHLYDATE = TASK_TRIGGER_TYPE.TIME_TRIGGER_MONTHLYDATE;
pub const TASK_TIME_TRIGGER_MONTHLYDOW = TASK_TRIGGER_TYPE.TIME_TRIGGER_MONTHLYDOW;
pub const TASK_EVENT_TRIGGER_ON_IDLE = TASK_TRIGGER_TYPE.EVENT_TRIGGER_ON_IDLE;
pub const TASK_EVENT_TRIGGER_AT_SYSTEMSTART = TASK_TRIGGER_TYPE.EVENT_TRIGGER_AT_SYSTEMSTART;
pub const TASK_EVENT_TRIGGER_AT_LOGON = TASK_TRIGGER_TYPE.EVENT_TRIGGER_AT_LOGON;

pub const DAILY = extern struct {
    DaysInterval: u16,
};

pub const WEEKLY = extern struct {
    WeeksInterval: u16,
    rgfDaysOfTheWeek: u16,
};

pub const MONTHLYDATE = extern struct {
    rgfDays: u32,
    rgfMonths: u16,
};

pub const MONTHLYDOW = extern struct {
    wWhichWeek: u16,
    rgfDaysOfTheWeek: u16,
    rgfMonths: u16,
};

pub const TRIGGER_TYPE_UNION = extern union {
    Daily: DAILY,
    Weekly: WEEKLY,
    MonthlyDate: MONTHLYDATE,
    MonthlyDOW: MONTHLYDOW,
};

pub const TASK_TRIGGER = extern struct {
    cbTriggerSize: u16,
    Reserved1: u16,
    wBeginYear: u16,
    wBeginMonth: u16,
    wBeginDay: u16,
    wEndYear: u16,
    wEndMonth: u16,
    wEndDay: u16,
    wStartHour: u16,
    wStartMinute: u16,
    MinutesDuration: u32,
    MinutesInterval: u32,
    rgFlags: u32,
    TriggerType: TASK_TRIGGER_TYPE,
    Type: TRIGGER_TYPE_UNION,
    Reserved2: u16,
    wRandomMinutesInterval: u16,
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ITaskTrigger_Value = Guid.initString("148bd52b-a2ab-11ce-b11f-00aa00530503");
pub const IID_ITaskTrigger = &IID_ITaskTrigger_Value;
pub const ITaskTrigger = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetTrigger: *const fn (
            self: *const ITaskTrigger,
            p_trigger: ?*const TASK_TRIGGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTrigger: *const fn (
            self: *const ITaskTrigger,
            p_trigger: ?*TASK_TRIGGER,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTriggerString: *const fn (
            self: *const ITaskTrigger,
            ppwsz_trigger: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setTrigger(self: *const T, p_trigger_: ?*const TASK_TRIGGER) HRESULT {
                return @as(*const ITaskTrigger.VTable, @ptrCast(self.vtable)).SetTrigger(@as(*const ITaskTrigger, @ptrCast(self)), p_trigger_);
            }
            pub inline fn getTrigger(self: *const T, p_trigger_: ?*TASK_TRIGGER) HRESULT {
                return @as(*const ITaskTrigger.VTable, @ptrCast(self.vtable)).GetTrigger(@as(*const ITaskTrigger, @ptrCast(self)), p_trigger_);
            }
            pub inline fn getTriggerString(self: *const T, ppwsz_trigger_: ?*?PWSTR) HRESULT {
                return @as(*const ITaskTrigger.VTable, @ptrCast(self.vtable)).GetTriggerString(@as(*const ITaskTrigger, @ptrCast(self)), ppwsz_trigger_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IScheduledWorkItem_Value = Guid.initString("a6b952f0-a4b1-11d0-997d-00aa006887ec");
pub const IID_IScheduledWorkItem = &IID_IScheduledWorkItem_Value;
pub const IScheduledWorkItem = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateTrigger: *const fn (
            self: *const IScheduledWorkItem,
            pi_new_trigger: ?*u16,
            pp_trigger: ?*?*ITaskTrigger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteTrigger: *const fn (
            self: *const IScheduledWorkItem,
            i_trigger: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTriggerCount: *const fn (
            self: *const IScheduledWorkItem,
            pw_count: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTrigger: *const fn (
            self: *const IScheduledWorkItem,
            i_trigger: u16,
            pp_trigger: ?*?*ITaskTrigger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTriggerString: *const fn (
            self: *const IScheduledWorkItem,
            i_trigger: u16,
            ppwsz_trigger: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRunTimes: *const fn (
            self: *const IScheduledWorkItem,
            pst_begin: ?*const SYSTEMTIME,
            pst_end: ?*const SYSTEMTIME,
            p_count: ?*u16,
            rgst_task_times: ?*?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextRunTime: *const fn (
            self: *const IScheduledWorkItem,
            pst_next_run: ?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIdleWait: *const fn (
            self: *const IScheduledWorkItem,
            w_idle_minutes: u16,
            w_deadline_minutes: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetIdleWait: *const fn (
            self: *const IScheduledWorkItem,
            pw_idle_minutes: ?*u16,
            pw_deadline_minutes: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Run: *const fn (
            self: *const IScheduledWorkItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Terminate: *const fn (
            self: *const IScheduledWorkItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EditWorkItem: *const fn (
            self: *const IScheduledWorkItem,
            h_parent: ?HWND,
            dw_reserved: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMostRecentRunTime: *const fn (
            self: *const IScheduledWorkItem,
            pst_last_run: ?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStatus: *const fn (
            self: *const IScheduledWorkItem,
            phr_status: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetExitCode: *const fn (
            self: *const IScheduledWorkItem,
            pdw_exit_code: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetComment: *const fn (
            self: *const IScheduledWorkItem,
            pwsz_comment: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComment: *const fn (
            self: *const IScheduledWorkItem,
            ppwsz_comment: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCreator: *const fn (
            self: *const IScheduledWorkItem,
            pwsz_creator: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCreator: *const fn (
            self: *const IScheduledWorkItem,
            ppwsz_creator: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWorkItemData: *const fn (
            self: *const IScheduledWorkItem,
            cb_data: u16,
            rgb_data: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWorkItemData: *const fn (
            self: *const IScheduledWorkItem,
            pcb_data: ?*u16,
            prgb_data: ?*?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetErrorRetryCount: *const fn (
            self: *const IScheduledWorkItem,
            w_retry_count: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorRetryCount: *const fn (
            self: *const IScheduledWorkItem,
            pw_retry_count: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetErrorRetryInterval: *const fn (
            self: *const IScheduledWorkItem,
            w_retry_interval: u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetErrorRetryInterval: *const fn (
            self: *const IScheduledWorkItem,
            pw_retry_interval: ?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetFlags: *const fn (
            self: *const IScheduledWorkItem,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFlags: *const fn (
            self: *const IScheduledWorkItem,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAccountInformation: *const fn (
            self: *const IScheduledWorkItem,
            pwsz_account_name: ?[*:0]const u16,
            pwsz_password: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetAccountInformation: *const fn (
            self: *const IScheduledWorkItem,
            ppwsz_account_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createTrigger(self: *const T, pi_new_trigger_: ?*u16, pp_trigger_: ?*?*ITaskTrigger) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).CreateTrigger(@as(*const IScheduledWorkItem, @ptrCast(self)), pi_new_trigger_, pp_trigger_);
            }
            pub inline fn deleteTrigger(self: *const T, i_trigger_: u16) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).DeleteTrigger(@as(*const IScheduledWorkItem, @ptrCast(self)), i_trigger_);
            }
            pub inline fn getTriggerCount(self: *const T, pw_count_: ?*u16) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).GetTriggerCount(@as(*const IScheduledWorkItem, @ptrCast(self)), pw_count_);
            }
            pub inline fn getTrigger(self: *const T, i_trigger_: u16, pp_trigger_: ?*?*ITaskTrigger) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).GetTrigger(@as(*const IScheduledWorkItem, @ptrCast(self)), i_trigger_, pp_trigger_);
            }
            pub inline fn getTriggerString(self: *const T, i_trigger_: u16, ppwsz_trigger_: ?*?PWSTR) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).GetTriggerString(@as(*const IScheduledWorkItem, @ptrCast(self)), i_trigger_, ppwsz_trigger_);
            }
            pub inline fn getRunTimes(self: *const T, pst_begin_: ?*const SYSTEMTIME, pst_end_: ?*const SYSTEMTIME, p_count_: ?*u16, rgst_task_times_: ?*?*SYSTEMTIME) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).GetRunTimes(@as(*const IScheduledWorkItem, @ptrCast(self)), pst_begin_, pst_end_, p_count_, rgst_task_times_);
            }
            pub inline fn getNextRunTime(self: *const T, pst_next_run_: ?*SYSTEMTIME) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).GetNextRunTime(@as(*const IScheduledWorkItem, @ptrCast(self)), pst_next_run_);
            }
            pub inline fn setIdleWait(self: *const T, w_idle_minutes_: u16, w_deadline_minutes_: u16) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).SetIdleWait(@as(*const IScheduledWorkItem, @ptrCast(self)), w_idle_minutes_, w_deadline_minutes_);
            }
            pub inline fn getIdleWait(self: *const T, pw_idle_minutes_: ?*u16, pw_deadline_minutes_: ?*u16) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).GetIdleWait(@as(*const IScheduledWorkItem, @ptrCast(self)), pw_idle_minutes_, pw_deadline_minutes_);
            }
            pub inline fn run(self: *const T) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).Run(@as(*const IScheduledWorkItem, @ptrCast(self)));
            }
            pub inline fn terminate(self: *const T) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).Terminate(@as(*const IScheduledWorkItem, @ptrCast(self)));
            }
            pub inline fn editWorkItem(self: *const T, h_parent_: ?HWND, dw_reserved_: u32) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).EditWorkItem(@as(*const IScheduledWorkItem, @ptrCast(self)), h_parent_, dw_reserved_);
            }
            pub inline fn getMostRecentRunTime(self: *const T, pst_last_run_: ?*SYSTEMTIME) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).GetMostRecentRunTime(@as(*const IScheduledWorkItem, @ptrCast(self)), pst_last_run_);
            }
            pub inline fn getStatus(self: *const T, phr_status_: ?*HRESULT) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).GetStatus(@as(*const IScheduledWorkItem, @ptrCast(self)), phr_status_);
            }
            pub inline fn getExitCode(self: *const T, pdw_exit_code_: ?*u32) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).GetExitCode(@as(*const IScheduledWorkItem, @ptrCast(self)), pdw_exit_code_);
            }
            pub inline fn setComment(self: *const T, pwsz_comment_: ?[*:0]const u16) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).SetComment(@as(*const IScheduledWorkItem, @ptrCast(self)), pwsz_comment_);
            }
            pub inline fn getComment(self: *const T, ppwsz_comment_: ?*?PWSTR) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).GetComment(@as(*const IScheduledWorkItem, @ptrCast(self)), ppwsz_comment_);
            }
            pub inline fn setCreator(self: *const T, pwsz_creator_: ?[*:0]const u16) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).SetCreator(@as(*const IScheduledWorkItem, @ptrCast(self)), pwsz_creator_);
            }
            pub inline fn getCreator(self: *const T, ppwsz_creator_: ?*?PWSTR) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).GetCreator(@as(*const IScheduledWorkItem, @ptrCast(self)), ppwsz_creator_);
            }
            pub inline fn setWorkItemData(self: *const T, cb_data_: u16, rgb_data_: ?*u8) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).SetWorkItemData(@as(*const IScheduledWorkItem, @ptrCast(self)), cb_data_, rgb_data_);
            }
            pub inline fn getWorkItemData(self: *const T, pcb_data_: ?*u16, prgb_data_: ?*?*u8) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).GetWorkItemData(@as(*const IScheduledWorkItem, @ptrCast(self)), pcb_data_, prgb_data_);
            }
            pub inline fn setErrorRetryCount(self: *const T, w_retry_count_: u16) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).SetErrorRetryCount(@as(*const IScheduledWorkItem, @ptrCast(self)), w_retry_count_);
            }
            pub inline fn getErrorRetryCount(self: *const T, pw_retry_count_: ?*u16) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).GetErrorRetryCount(@as(*const IScheduledWorkItem, @ptrCast(self)), pw_retry_count_);
            }
            pub inline fn setErrorRetryInterval(self: *const T, w_retry_interval_: u16) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).SetErrorRetryInterval(@as(*const IScheduledWorkItem, @ptrCast(self)), w_retry_interval_);
            }
            pub inline fn getErrorRetryInterval(self: *const T, pw_retry_interval_: ?*u16) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).GetErrorRetryInterval(@as(*const IScheduledWorkItem, @ptrCast(self)), pw_retry_interval_);
            }
            pub inline fn setFlags(self: *const T, dw_flags_: u32) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).SetFlags(@as(*const IScheduledWorkItem, @ptrCast(self)), dw_flags_);
            }
            pub inline fn getFlags(self: *const T, pdw_flags_: ?*u32) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).GetFlags(@as(*const IScheduledWorkItem, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn setAccountInformation(self: *const T, pwsz_account_name_: ?[*:0]const u16, pwsz_password_: ?[*:0]const u16) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).SetAccountInformation(@as(*const IScheduledWorkItem, @ptrCast(self)), pwsz_account_name_, pwsz_password_);
            }
            pub inline fn getAccountInformation(self: *const T, ppwsz_account_name_: ?*?PWSTR) HRESULT {
                return @as(*const IScheduledWorkItem.VTable, @ptrCast(self.vtable)).GetAccountInformation(@as(*const IScheduledWorkItem, @ptrCast(self)), ppwsz_account_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ITask_Value = Guid.initString("148bd524-a2ab-11ce-b11f-00aa00530503");
pub const IID_ITask = &IID_ITask_Value;
pub const ITask = extern struct {
    pub const VTable = extern struct {
        base: IScheduledWorkItem.VTable,
        SetApplicationName: *const fn (
            self: *const ITask,
            pwsz_application_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetApplicationName: *const fn (
            self: *const ITask,
            ppwsz_application_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetParameters: *const fn (
            self: *const ITask,
            pwsz_parameters: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParameters: *const fn (
            self: *const ITask,
            ppwsz_parameters: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetWorkingDirectory: *const fn (
            self: *const ITask,
            pwsz_working_directory: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWorkingDirectory: *const fn (
            self: *const ITask,
            ppwsz_working_directory: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPriority: *const fn (
            self: *const ITask,
            dw_priority: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPriority: *const fn (
            self: *const ITask,
            pdw_priority: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTaskFlags: *const fn (
            self: *const ITask,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTaskFlags: *const fn (
            self: *const ITask,
            pdw_flags: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMaxRunTime: *const fn (
            self: *const ITask,
            dw_max_run_time_m_s: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMaxRunTime: *const fn (
            self: *const ITask,
            pdw_max_run_time_m_s: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IScheduledWorkItem.MethodMixin(T);
            pub inline fn setApplicationName(self: *const T, pwsz_application_name_: ?[*:0]const u16) HRESULT {
                return @as(*const ITask.VTable, @ptrCast(self.vtable)).SetApplicationName(@as(*const ITask, @ptrCast(self)), pwsz_application_name_);
            }
            pub inline fn getApplicationName(self: *const T, ppwsz_application_name_: ?*?PWSTR) HRESULT {
                return @as(*const ITask.VTable, @ptrCast(self.vtable)).GetApplicationName(@as(*const ITask, @ptrCast(self)), ppwsz_application_name_);
            }
            pub inline fn setParameters(self: *const T, pwsz_parameters_: ?[*:0]const u16) HRESULT {
                return @as(*const ITask.VTable, @ptrCast(self.vtable)).SetParameters(@as(*const ITask, @ptrCast(self)), pwsz_parameters_);
            }
            pub inline fn getParameters(self: *const T, ppwsz_parameters_: ?*?PWSTR) HRESULT {
                return @as(*const ITask.VTable, @ptrCast(self.vtable)).GetParameters(@as(*const ITask, @ptrCast(self)), ppwsz_parameters_);
            }
            pub inline fn setWorkingDirectory(self: *const T, pwsz_working_directory_: ?[*:0]const u16) HRESULT {
                return @as(*const ITask.VTable, @ptrCast(self.vtable)).SetWorkingDirectory(@as(*const ITask, @ptrCast(self)), pwsz_working_directory_);
            }
            pub inline fn getWorkingDirectory(self: *const T, ppwsz_working_directory_: ?*?PWSTR) HRESULT {
                return @as(*const ITask.VTable, @ptrCast(self.vtable)).GetWorkingDirectory(@as(*const ITask, @ptrCast(self)), ppwsz_working_directory_);
            }
            pub inline fn setPriority(self: *const T, dw_priority_: u32) HRESULT {
                return @as(*const ITask.VTable, @ptrCast(self.vtable)).SetPriority(@as(*const ITask, @ptrCast(self)), dw_priority_);
            }
            pub inline fn getPriority(self: *const T, pdw_priority_: ?*u32) HRESULT {
                return @as(*const ITask.VTable, @ptrCast(self.vtable)).GetPriority(@as(*const ITask, @ptrCast(self)), pdw_priority_);
            }
            pub inline fn setTaskFlags(self: *const T, dw_flags_: u32) HRESULT {
                return @as(*const ITask.VTable, @ptrCast(self.vtable)).SetTaskFlags(@as(*const ITask, @ptrCast(self)), dw_flags_);
            }
            pub inline fn getTaskFlags(self: *const T, pdw_flags_: ?*u32) HRESULT {
                return @as(*const ITask.VTable, @ptrCast(self.vtable)).GetTaskFlags(@as(*const ITask, @ptrCast(self)), pdw_flags_);
            }
            pub inline fn setMaxRunTime(self: *const T, dw_max_run_time_m_s_: u32) HRESULT {
                return @as(*const ITask.VTable, @ptrCast(self.vtable)).SetMaxRunTime(@as(*const ITask, @ptrCast(self)), dw_max_run_time_m_s_);
            }
            pub inline fn getMaxRunTime(self: *const T, pdw_max_run_time_m_s_: ?*u32) HRESULT {
                return @as(*const ITask.VTable, @ptrCast(self.vtable)).GetMaxRunTime(@as(*const ITask, @ptrCast(self)), pdw_max_run_time_m_s_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_IEnumWorkItems_Value = Guid.initString("148bd528-a2ab-11ce-b11f-00aa00530503");
pub const IID_IEnumWorkItems = &IID_IEnumWorkItems_Value;
pub const IEnumWorkItems = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumWorkItems,
            celt: u32,
            rgpwsz_names: ?*?*?PWSTR,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumWorkItems,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumWorkItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumWorkItems,
            pp_enum_work_items: ?*?*IEnumWorkItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgpwsz_names_: ?*?*?PWSTR, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumWorkItems.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumWorkItems, @ptrCast(self)), celt_, rgpwsz_names_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumWorkItems.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumWorkItems, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumWorkItems.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumWorkItems, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, pp_enum_work_items_: ?*?*IEnumWorkItems) HRESULT {
                return @as(*const IEnumWorkItems.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumWorkItems, @ptrCast(self)), pp_enum_work_items_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows5.0'
const IID_ITaskScheduler_Value = Guid.initString("148bd527-a2ab-11ce-b11f-00aa00530503");
pub const IID_ITaskScheduler = &IID_ITaskScheduler_Value;
pub const ITaskScheduler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetTargetComputer: *const fn (
            self: *const ITaskScheduler,
            pwsz_computer: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTargetComputer: *const fn (
            self: *const ITaskScheduler,
            ppwsz_computer: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enum: *const fn (
            self: *const ITaskScheduler,
            pp_enum_work_items: ?*?*IEnumWorkItems,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Activate: *const fn (
            self: *const ITaskScheduler,
            pwsz_name: ?[*:0]const u16,
            riid: ?*const Guid,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Delete: *const fn (
            self: *const ITaskScheduler,
            pwsz_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NewWorkItem: *const fn (
            self: *const ITaskScheduler,
            pwsz_task_name: ?[*:0]const u16,
            rclsid: ?*const Guid,
            riid: ?*const Guid,
            pp_unk: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddWorkItem: *const fn (
            self: *const ITaskScheduler,
            pwsz_task_name: ?[*:0]const u16,
            p_work_item: ?*IScheduledWorkItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsOfType: *const fn (
            self: *const ITaskScheduler,
            pwsz_name: ?[*:0]const u16,
            riid: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setTargetComputer(self: *const T, pwsz_computer_: ?[*:0]const u16) HRESULT {
                return @as(*const ITaskScheduler.VTable, @ptrCast(self.vtable)).SetTargetComputer(@as(*const ITaskScheduler, @ptrCast(self)), pwsz_computer_);
            }
            pub inline fn getTargetComputer(self: *const T, ppwsz_computer_: ?*?PWSTR) HRESULT {
                return @as(*const ITaskScheduler.VTable, @ptrCast(self.vtable)).GetTargetComputer(@as(*const ITaskScheduler, @ptrCast(self)), ppwsz_computer_);
            }
            pub inline fn @"enum"(self: *const T, pp_enum_work_items_: ?*?*IEnumWorkItems) HRESULT {
                return @as(*const ITaskScheduler.VTable, @ptrCast(self.vtable)).Enum(@as(*const ITaskScheduler, @ptrCast(self)), pp_enum_work_items_);
            }
            pub inline fn activate(self: *const T, pwsz_name_: ?[*:0]const u16, riid_: ?*const Guid, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const ITaskScheduler.VTable, @ptrCast(self.vtable)).Activate(@as(*const ITaskScheduler, @ptrCast(self)), pwsz_name_, riid_, pp_unk_);
            }
            pub inline fn delete(self: *const T, pwsz_name_: ?[*:0]const u16) HRESULT {
                return @as(*const ITaskScheduler.VTable, @ptrCast(self.vtable)).Delete(@as(*const ITaskScheduler, @ptrCast(self)), pwsz_name_);
            }
            pub inline fn newWorkItem(self: *const T, pwsz_task_name_: ?[*:0]const u16, rclsid_: ?*const Guid, riid_: ?*const Guid, pp_unk_: ?*?*IUnknown) HRESULT {
                return @as(*const ITaskScheduler.VTable, @ptrCast(self.vtable)).NewWorkItem(@as(*const ITaskScheduler, @ptrCast(self)), pwsz_task_name_, rclsid_, riid_, pp_unk_);
            }
            pub inline fn addWorkItem(self: *const T, pwsz_task_name_: ?[*:0]const u16, p_work_item_: ?*IScheduledWorkItem) HRESULT {
                return @as(*const ITaskScheduler.VTable, @ptrCast(self.vtable)).AddWorkItem(@as(*const ITaskScheduler, @ptrCast(self)), pwsz_task_name_, p_work_item_);
            }
            pub inline fn isOfType(self: *const T, pwsz_name_: ?[*:0]const u16, riid_: ?*const Guid) HRESULT {
                return @as(*const ITaskScheduler.VTable, @ptrCast(self.vtable)).IsOfType(@as(*const ITaskScheduler, @ptrCast(self)), pwsz_name_, riid_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const TASKPAGE = enum(i32) {
    TASK = 0,
    SCHEDULE = 1,
    SETTINGS = 2,
};
pub const TASKPAGE_TASK = TASKPAGE.TASK;
pub const TASKPAGE_SCHEDULE = TASKPAGE.SCHEDULE;
pub const TASKPAGE_SETTINGS = TASKPAGE.SETTINGS;

// TODO: this type is limited to platform 'windows5.0'
const IID_IProvideTaskPage_Value = Guid.initString("4086658a-cbbb-11cf-b604-00c04fd8d565");
pub const IID_IProvideTaskPage = &IID_IProvideTaskPage_Value;
pub const IProvideTaskPage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetPage: *const fn (
            self: *const IProvideTaskPage,
            tp_type: TASKPAGE,
            f_persist_changes: BOOL,
            ph_page: ?*?HPROPSHEETPAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPage(self: *const T, tp_type_: TASKPAGE, f_persist_changes_: BOOL, ph_page_: ?*?HPROPSHEETPAGE) HRESULT {
                return @as(*const IProvideTaskPage.VTable, @ptrCast(self.vtable)).GetPage(@as(*const IProvideTaskPage, @ptrCast(self)), tp_type_, f_persist_changes_, ph_page_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_TaskScheduler_Value = Guid.initString("0f87369f-a4e5-4cfc-bd3e-73e6154572dd");
pub const CLSID_TaskScheduler = &CLSID_TaskScheduler_Value;

const CLSID_TaskHandlerPS_Value = Guid.initString("f2a69db7-da2c-4352-9066-86fee6dacac9");
pub const CLSID_TaskHandlerPS = &CLSID_TaskHandlerPS_Value;

const CLSID_TaskHandlerStatusPS_Value = Guid.initString("9f15266d-d7ba-48f0-93c1-e6895f6fe5ac");
pub const CLSID_TaskHandlerStatusPS = &CLSID_TaskHandlerStatusPS_Value;

pub const TASK_RUN_FLAGS = enum(i32) {
    NO_FLAGS = 0,
    AS_SELF = 1,
    IGNORE_CONSTRAINTS = 2,
    USE_SESSION_ID = 4,
    USER_SID = 8,
};
pub const TASK_RUN_NO_FLAGS = TASK_RUN_FLAGS.NO_FLAGS;
pub const TASK_RUN_AS_SELF = TASK_RUN_FLAGS.AS_SELF;
pub const TASK_RUN_IGNORE_CONSTRAINTS = TASK_RUN_FLAGS.IGNORE_CONSTRAINTS;
pub const TASK_RUN_USE_SESSION_ID = TASK_RUN_FLAGS.USE_SESSION_ID;
pub const TASK_RUN_USER_SID = TASK_RUN_FLAGS.USER_SID;

pub const TASK_ENUM_FLAGS = enum(i32) {
    N = 1,
};
pub const TASK_ENUM_HIDDEN = TASK_ENUM_FLAGS.N;

pub const TASK_LOGON_TYPE = enum(i32) {
    NONE = 0,
    PASSWORD = 1,
    S4U = 2,
    INTERACTIVE_TOKEN = 3,
    GROUP = 4,
    SERVICE_ACCOUNT = 5,
    INTERACTIVE_TOKEN_OR_PASSWORD = 6,
};
pub const TASK_LOGON_NONE = TASK_LOGON_TYPE.NONE;
pub const TASK_LOGON_PASSWORD = TASK_LOGON_TYPE.PASSWORD;
pub const TASK_LOGON_S4U = TASK_LOGON_TYPE.S4U;
pub const TASK_LOGON_INTERACTIVE_TOKEN = TASK_LOGON_TYPE.INTERACTIVE_TOKEN;
pub const TASK_LOGON_GROUP = TASK_LOGON_TYPE.GROUP;
pub const TASK_LOGON_SERVICE_ACCOUNT = TASK_LOGON_TYPE.SERVICE_ACCOUNT;
pub const TASK_LOGON_INTERACTIVE_TOKEN_OR_PASSWORD = TASK_LOGON_TYPE.INTERACTIVE_TOKEN_OR_PASSWORD;

pub const TASK_RUNLEVEL_TYPE = enum(i32) {
    LUA = 0,
    HIGHEST = 1,
};
pub const TASK_RUNLEVEL_LUA = TASK_RUNLEVEL_TYPE.LUA;
pub const TASK_RUNLEVEL_HIGHEST = TASK_RUNLEVEL_TYPE.HIGHEST;

pub const TASK_PROCESSTOKENSID_TYPE = enum(i32) {
    NONE = 0,
    UNRESTRICTED = 1,
    DEFAULT = 2,
};
pub const TASK_PROCESSTOKENSID_NONE = TASK_PROCESSTOKENSID_TYPE.NONE;
pub const TASK_PROCESSTOKENSID_UNRESTRICTED = TASK_PROCESSTOKENSID_TYPE.UNRESTRICTED;
pub const TASK_PROCESSTOKENSID_DEFAULT = TASK_PROCESSTOKENSID_TYPE.DEFAULT;

pub const TASK_STATE = enum(i32) {
    UNKNOWN = 0,
    DISABLED = 1,
    QUEUED = 2,
    READY = 3,
    RUNNING = 4,
};
pub const TASK_STATE_UNKNOWN = TASK_STATE.UNKNOWN;
pub const TASK_STATE_DISABLED = TASK_STATE.DISABLED;
pub const TASK_STATE_QUEUED = TASK_STATE.QUEUED;
pub const TASK_STATE_READY = TASK_STATE.READY;
pub const TASK_STATE_RUNNING = TASK_STATE.RUNNING;

pub const TASK_CREATION = enum(i32) {
    VALIDATE_ONLY = 1,
    CREATE = 2,
    UPDATE = 4,
    CREATE_OR_UPDATE = 6,
    DISABLE = 8,
    DONT_ADD_PRINCIPAL_ACE = 16,
    IGNORE_REGISTRATION_TRIGGERS = 32,
};
pub const TASK_VALIDATE_ONLY = TASK_CREATION.VALIDATE_ONLY;
pub const TASK_CREATE = TASK_CREATION.CREATE;
pub const TASK_UPDATE = TASK_CREATION.UPDATE;
pub const TASK_CREATE_OR_UPDATE = TASK_CREATION.CREATE_OR_UPDATE;
pub const TASK_DISABLE = TASK_CREATION.DISABLE;
pub const TASK_DONT_ADD_PRINCIPAL_ACE = TASK_CREATION.DONT_ADD_PRINCIPAL_ACE;
pub const TASK_IGNORE_REGISTRATION_TRIGGERS = TASK_CREATION.IGNORE_REGISTRATION_TRIGGERS;

pub const TASK_TRIGGER_TYPE2 = enum(i32) {
    EVENT = 0,
    TIME = 1,
    DAILY = 2,
    WEEKLY = 3,
    MONTHLY = 4,
    MONTHLYDOW = 5,
    IDLE = 6,
    REGISTRATION = 7,
    BOOT = 8,
    LOGON = 9,
    SESSION_STATE_CHANGE = 11,
    CUSTOM_TRIGGER_01 = 12,
};
pub const TASK_TRIGGER_EVENT = TASK_TRIGGER_TYPE2.EVENT;
pub const TASK_TRIGGER_TIME = TASK_TRIGGER_TYPE2.TIME;
pub const TASK_TRIGGER_DAILY = TASK_TRIGGER_TYPE2.DAILY;
pub const TASK_TRIGGER_WEEKLY = TASK_TRIGGER_TYPE2.WEEKLY;
pub const TASK_TRIGGER_MONTHLY = TASK_TRIGGER_TYPE2.MONTHLY;
pub const TASK_TRIGGER_MONTHLYDOW = TASK_TRIGGER_TYPE2.MONTHLYDOW;
pub const TASK_TRIGGER_IDLE = TASK_TRIGGER_TYPE2.IDLE;
pub const TASK_TRIGGER_REGISTRATION = TASK_TRIGGER_TYPE2.REGISTRATION;
pub const TASK_TRIGGER_BOOT = TASK_TRIGGER_TYPE2.BOOT;
pub const TASK_TRIGGER_LOGON = TASK_TRIGGER_TYPE2.LOGON;
pub const TASK_TRIGGER_SESSION_STATE_CHANGE = TASK_TRIGGER_TYPE2.SESSION_STATE_CHANGE;
pub const TASK_TRIGGER_CUSTOM_TRIGGER_01 = TASK_TRIGGER_TYPE2.CUSTOM_TRIGGER_01;

pub const TASK_SESSION_STATE_CHANGE_TYPE = enum(i32) {
    CONSOLE_CONNECT = 1,
    CONSOLE_DISCONNECT = 2,
    REMOTE_CONNECT = 3,
    REMOTE_DISCONNECT = 4,
    SESSION_LOCK = 7,
    SESSION_UNLOCK = 8,
};
pub const TASK_CONSOLE_CONNECT = TASK_SESSION_STATE_CHANGE_TYPE.CONSOLE_CONNECT;
pub const TASK_CONSOLE_DISCONNECT = TASK_SESSION_STATE_CHANGE_TYPE.CONSOLE_DISCONNECT;
pub const TASK_REMOTE_CONNECT = TASK_SESSION_STATE_CHANGE_TYPE.REMOTE_CONNECT;
pub const TASK_REMOTE_DISCONNECT = TASK_SESSION_STATE_CHANGE_TYPE.REMOTE_DISCONNECT;
pub const TASK_SESSION_LOCK = TASK_SESSION_STATE_CHANGE_TYPE.SESSION_LOCK;
pub const TASK_SESSION_UNLOCK = TASK_SESSION_STATE_CHANGE_TYPE.SESSION_UNLOCK;

pub const TASK_ACTION_TYPE = enum(i32) {
    EXEC = 0,
    COM_HANDLER = 5,
    SEND_EMAIL = 6,
    SHOW_MESSAGE = 7,
};
pub const TASK_ACTION_EXEC = TASK_ACTION_TYPE.EXEC;
pub const TASK_ACTION_COM_HANDLER = TASK_ACTION_TYPE.COM_HANDLER;
pub const TASK_ACTION_SEND_EMAIL = TASK_ACTION_TYPE.SEND_EMAIL;
pub const TASK_ACTION_SHOW_MESSAGE = TASK_ACTION_TYPE.SHOW_MESSAGE;

pub const TASK_INSTANCES_POLICY = enum(i32) {
    PARALLEL = 0,
    QUEUE = 1,
    IGNORE_NEW = 2,
    STOP_EXISTING = 3,
};
pub const TASK_INSTANCES_PARALLEL = TASK_INSTANCES_POLICY.PARALLEL;
pub const TASK_INSTANCES_QUEUE = TASK_INSTANCES_POLICY.QUEUE;
pub const TASK_INSTANCES_IGNORE_NEW = TASK_INSTANCES_POLICY.IGNORE_NEW;
pub const TASK_INSTANCES_STOP_EXISTING = TASK_INSTANCES_POLICY.STOP_EXISTING;

pub const TASK_COMPATIBILITY = enum(i32) {
    AT = 0,
    V1 = 1,
    V2 = 2,
    V2_1 = 3,
    V2_2 = 4,
    V2_3 = 5,
    V2_4 = 6,
};
pub const TASK_COMPATIBILITY_AT = TASK_COMPATIBILITY.AT;
pub const TASK_COMPATIBILITY_V1 = TASK_COMPATIBILITY.V1;
pub const TASK_COMPATIBILITY_V2 = TASK_COMPATIBILITY.V2;
pub const TASK_COMPATIBILITY_V2_1 = TASK_COMPATIBILITY.V2_1;
pub const TASK_COMPATIBILITY_V2_2 = TASK_COMPATIBILITY.V2_2;
pub const TASK_COMPATIBILITY_V2_3 = TASK_COMPATIBILITY.V2_3;
pub const TASK_COMPATIBILITY_V2_4 = TASK_COMPATIBILITY.V2_4;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITaskFolderCollection_Value = Guid.initString("79184a66-8664-423f-97f1-637356a5d812");
pub const IID_ITaskFolderCollection = &IID_ITaskFolderCollection_Value;
pub const ITaskFolderCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskFolderCollection,
            p_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskFolderCollection,
            index: VARIANT,
            pp_folder: ?*?*ITaskFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskFolderCollection,
            pp_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_count_: ?*i32) HRESULT {
                return @as(*const ITaskFolderCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ITaskFolderCollection, @ptrCast(self)), p_count_);
            }
            pub inline fn getItem(self: *const T, index_: VARIANT, pp_folder_: ?*?*ITaskFolder) HRESULT {
                return @as(*const ITaskFolderCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const ITaskFolderCollection, @ptrCast(self)), index_, pp_folder_);
            }
            pub inline fn getNewEnum(self: *const T, pp_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const ITaskFolderCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ITaskFolderCollection, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITaskService_Value = Guid.initString("2faba4c7-4da9-4013-9697-20cc3fd40f85");
pub const IID_ITaskService = &IID_ITaskService_Value;
pub const ITaskService = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetFolder: *const fn (
            self: *const ITaskService,
            path: ?BSTR,
            pp_folder: ?*?*ITaskFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRunningTasks: *const fn (
            self: *const ITaskService,
            flags: i32,
            pp_running_tasks: ?*?*IRunningTaskCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NewTask: *const fn (
            self: *const ITaskService,
            flags: u32,
            pp_definition: ?*?*ITaskDefinition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Connect: *const fn (
            self: *const ITaskService,
            server_name: VARIANT,
            user: VARIANT,
            domain: VARIANT,
            password: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Connected: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskService,
            p_connected: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TargetServer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskService,
            p_server: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ConnectedUser: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskService,
            p_user: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ConnectedDomain: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskService,
            p_domain: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HighestVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskService,
            p_version: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getFolder(self: *const T, path_: ?BSTR, pp_folder_: ?*?*ITaskFolder) HRESULT {
                return @as(*const ITaskService.VTable, @ptrCast(self.vtable)).GetFolder(@as(*const ITaskService, @ptrCast(self)), path_, pp_folder_);
            }
            pub inline fn getRunningTasks(self: *const T, flags_: i32, pp_running_tasks_: ?*?*IRunningTaskCollection) HRESULT {
                return @as(*const ITaskService.VTable, @ptrCast(self.vtable)).GetRunningTasks(@as(*const ITaskService, @ptrCast(self)), flags_, pp_running_tasks_);
            }
            pub inline fn newTask(self: *const T, flags_: u32, pp_definition_: ?*?*ITaskDefinition) HRESULT {
                return @as(*const ITaskService.VTable, @ptrCast(self.vtable)).NewTask(@as(*const ITaskService, @ptrCast(self)), flags_, pp_definition_);
            }
            pub inline fn connect(self: *const T, server_name_: VARIANT, user_: VARIANT, domain_: VARIANT, password_: VARIANT) HRESULT {
                return @as(*const ITaskService.VTable, @ptrCast(self.vtable)).Connect(@as(*const ITaskService, @ptrCast(self)), server_name_, user_, domain_, password_);
            }
            pub inline fn getConnected(self: *const T, p_connected_: ?*i16) HRESULT {
                return @as(*const ITaskService.VTable, @ptrCast(self.vtable)).get_Connected(@as(*const ITaskService, @ptrCast(self)), p_connected_);
            }
            pub inline fn getTargetServer(self: *const T, p_server_: ?*?BSTR) HRESULT {
                return @as(*const ITaskService.VTable, @ptrCast(self.vtable)).get_TargetServer(@as(*const ITaskService, @ptrCast(self)), p_server_);
            }
            pub inline fn getConnectedUser(self: *const T, p_user_: ?*?BSTR) HRESULT {
                return @as(*const ITaskService.VTable, @ptrCast(self.vtable)).get_ConnectedUser(@as(*const ITaskService, @ptrCast(self)), p_user_);
            }
            pub inline fn getConnectedDomain(self: *const T, p_domain_: ?*?BSTR) HRESULT {
                return @as(*const ITaskService.VTable, @ptrCast(self.vtable)).get_ConnectedDomain(@as(*const ITaskService, @ptrCast(self)), p_domain_);
            }
            pub inline fn getHighestVersion(self: *const T, p_version_: ?*u32) HRESULT {
                return @as(*const ITaskService.VTable, @ptrCast(self.vtable)).get_HighestVersion(@as(*const ITaskService, @ptrCast(self)), p_version_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITaskHandler_Value = Guid.initString("839d7762-5121-4009-9234-4f0d19394f04");
pub const IID_ITaskHandler = &IID_ITaskHandler_Value;
pub const ITaskHandler = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Start: *const fn (
            self: *const ITaskHandler,
            p_handler_services: ?*IUnknown,
            data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const ITaskHandler,
            p_ret_code: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Pause: *const fn (
            self: *const ITaskHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Resume: *const fn (
            self: *const ITaskHandler,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn start(self: *const T, p_handler_services_: ?*IUnknown, data_: ?BSTR) HRESULT {
                return @as(*const ITaskHandler.VTable, @ptrCast(self.vtable)).Start(@as(*const ITaskHandler, @ptrCast(self)), p_handler_services_, data_);
            }
            pub inline fn stop(self: *const T, p_ret_code_: ?*HRESULT) HRESULT {
                return @as(*const ITaskHandler.VTable, @ptrCast(self.vtable)).Stop(@as(*const ITaskHandler, @ptrCast(self)), p_ret_code_);
            }
            pub inline fn pause(self: *const T) HRESULT {
                return @as(*const ITaskHandler.VTable, @ptrCast(self.vtable)).Pause(@as(*const ITaskHandler, @ptrCast(self)));
            }
            pub inline fn @"resume"(self: *const T) HRESULT {
                return @as(*const ITaskHandler.VTable, @ptrCast(self.vtable)).Resume(@as(*const ITaskHandler, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITaskHandlerStatus_Value = Guid.initString("eaec7a8f-27a0-4ddc-8675-14726a01a38a");
pub const IID_ITaskHandlerStatus = &IID_ITaskHandlerStatus_Value;
pub const ITaskHandlerStatus = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        UpdateStatus: *const fn (
            self: *const ITaskHandlerStatus,
            percent_complete: i16,
            status_message: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TaskCompleted: *const fn (
            self: *const ITaskHandlerStatus,
            task_err_code: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn updateStatus(self: *const T, percent_complete_: i16, status_message_: ?BSTR) HRESULT {
                return @as(*const ITaskHandlerStatus.VTable, @ptrCast(self.vtable)).UpdateStatus(@as(*const ITaskHandlerStatus, @ptrCast(self)), percent_complete_, status_message_);
            }
            pub inline fn taskCompleted(self: *const T, task_err_code_: HRESULT) HRESULT {
                return @as(*const ITaskHandlerStatus.VTable, @ptrCast(self.vtable)).TaskCompleted(@as(*const ITaskHandlerStatus, @ptrCast(self)), task_err_code_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITaskVariables_Value = Guid.initString("3e4c9351-d966-4b8b-bb87-ceba68bb0107");
pub const IID_ITaskVariables = &IID_ITaskVariables_Value;
pub const ITaskVariables = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInput: *const fn (
            self: *const ITaskVariables,
            p_input: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetOutput: *const fn (
            self: *const ITaskVariables,
            input: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContext: *const fn (
            self: *const ITaskVariables,
            p_context: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getInput(self: *const T, p_input_: ?*?BSTR) HRESULT {
                return @as(*const ITaskVariables.VTable, @ptrCast(self.vtable)).GetInput(@as(*const ITaskVariables, @ptrCast(self)), p_input_);
            }
            pub inline fn setOutput(self: *const T, input_: ?BSTR) HRESULT {
                return @as(*const ITaskVariables.VTable, @ptrCast(self.vtable)).SetOutput(@as(*const ITaskVariables, @ptrCast(self)), input_);
            }
            pub inline fn getContext(self: *const T, p_context_: ?*?BSTR) HRESULT {
                return @as(*const ITaskVariables.VTable, @ptrCast(self.vtable)).GetContext(@as(*const ITaskVariables, @ptrCast(self)), p_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITaskNamedValuePair_Value = Guid.initString("39038068-2b46-4afd-8662-7bb6f868d221");
pub const IID_ITaskNamedValuePair = &IID_ITaskNamedValuePair_Value;
pub const ITaskNamedValuePair = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskNamedValuePair,
            p_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskNamedValuePair,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskNamedValuePair,
            p_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskNamedValuePair,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, p_name_: ?*?BSTR) HRESULT {
                return @as(*const ITaskNamedValuePair.VTable, @ptrCast(self.vtable)).get_Name(@as(*const ITaskNamedValuePair, @ptrCast(self)), p_name_);
            }
            pub inline fn putName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const ITaskNamedValuePair.VTable, @ptrCast(self.vtable)).put_Name(@as(*const ITaskNamedValuePair, @ptrCast(self)), name_);
            }
            pub inline fn getValue(self: *const T, p_value_: ?*?BSTR) HRESULT {
                return @as(*const ITaskNamedValuePair.VTable, @ptrCast(self.vtable)).get_Value(@as(*const ITaskNamedValuePair, @ptrCast(self)), p_value_);
            }
            pub inline fn putValue(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const ITaskNamedValuePair.VTable, @ptrCast(self.vtable)).put_Value(@as(*const ITaskNamedValuePair, @ptrCast(self)), value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITaskNamedValueCollection_Value = Guid.initString("b4ef826b-63c3-46e4-a504-ef69e4f7ea4d");
pub const IID_ITaskNamedValueCollection = &IID_ITaskNamedValueCollection_Value;
pub const ITaskNamedValueCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskNamedValueCollection,
            p_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskNamedValueCollection,
            index: i32,
            pp_pair: ?*?*ITaskNamedValuePair,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskNamedValueCollection,
            pp_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn (
            self: *const ITaskNamedValueCollection,
            name: ?BSTR,
            value: ?BSTR,
            pp_pair: ?*?*ITaskNamedValuePair,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ITaskNamedValueCollection,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const ITaskNamedValueCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_count_: ?*i32) HRESULT {
                return @as(*const ITaskNamedValueCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ITaskNamedValueCollection, @ptrCast(self)), p_count_);
            }
            pub inline fn getItem(self: *const T, index_: i32, pp_pair_: ?*?*ITaskNamedValuePair) HRESULT {
                return @as(*const ITaskNamedValueCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const ITaskNamedValueCollection, @ptrCast(self)), index_, pp_pair_);
            }
            pub inline fn getNewEnum(self: *const T, pp_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const ITaskNamedValueCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ITaskNamedValueCollection, @ptrCast(self)), pp_enum_);
            }
            pub inline fn create(self: *const T, name_: ?BSTR, value_: ?BSTR, pp_pair_: ?*?*ITaskNamedValuePair) HRESULT {
                return @as(*const ITaskNamedValueCollection.VTable, @ptrCast(self.vtable)).Create(@as(*const ITaskNamedValueCollection, @ptrCast(self)), name_, value_, pp_pair_);
            }
            pub inline fn remove(self: *const T, index_: i32) HRESULT {
                return @as(*const ITaskNamedValueCollection.VTable, @ptrCast(self.vtable)).Remove(@as(*const ITaskNamedValueCollection, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const ITaskNamedValueCollection.VTable, @ptrCast(self.vtable)).Clear(@as(*const ITaskNamedValueCollection, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRunningTask_Value = Guid.initString("653758fb-7b9a-4f1e-a471-beeb8e9b834e");
pub const IID_IRunningTask = &IID_IRunningTask_Value;
pub const IRunningTask = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRunningTask,
            p_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InstanceGuid: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRunningTask,
            p_guid: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRunningTask,
            p_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRunningTask,
            p_state: ?*TASK_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentAction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRunningTask,
            p_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const IRunningTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IRunningTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnginePID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRunningTask,
            p_p_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, p_name_: ?*?BSTR) HRESULT {
                return @as(*const IRunningTask.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IRunningTask, @ptrCast(self)), p_name_);
            }
            pub inline fn getInstanceGuid(self: *const T, p_guid_: ?*?BSTR) HRESULT {
                return @as(*const IRunningTask.VTable, @ptrCast(self.vtable)).get_InstanceGuid(@as(*const IRunningTask, @ptrCast(self)), p_guid_);
            }
            pub inline fn getPath(self: *const T, p_path_: ?*?BSTR) HRESULT {
                return @as(*const IRunningTask.VTable, @ptrCast(self.vtable)).get_Path(@as(*const IRunningTask, @ptrCast(self)), p_path_);
            }
            pub inline fn getState(self: *const T, p_state_: ?*TASK_STATE) HRESULT {
                return @as(*const IRunningTask.VTable, @ptrCast(self.vtable)).get_State(@as(*const IRunningTask, @ptrCast(self)), p_state_);
            }
            pub inline fn getCurrentAction(self: *const T, p_name_: ?*?BSTR) HRESULT {
                return @as(*const IRunningTask.VTable, @ptrCast(self.vtable)).get_CurrentAction(@as(*const IRunningTask, @ptrCast(self)), p_name_);
            }
            pub inline fn stop(self: *const T) HRESULT {
                return @as(*const IRunningTask.VTable, @ptrCast(self.vtable)).Stop(@as(*const IRunningTask, @ptrCast(self)));
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IRunningTask.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IRunningTask, @ptrCast(self)));
            }
            pub inline fn getEnginePID(self: *const T, p_p_i_d_: ?*u32) HRESULT {
                return @as(*const IRunningTask.VTable, @ptrCast(self.vtable)).get_EnginePID(@as(*const IRunningTask, @ptrCast(self)), p_p_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRunningTaskCollection_Value = Guid.initString("6a67614b-6828-4fec-aa54-6d52e8f1f2db");
pub const IID_IRunningTaskCollection = &IID_IRunningTaskCollection_Value;
pub const IRunningTaskCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRunningTaskCollection,
            p_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRunningTaskCollection,
            index: VARIANT,
            pp_running_task: ?*?*IRunningTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRunningTaskCollection,
            pp_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_count_: ?*i32) HRESULT {
                return @as(*const IRunningTaskCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IRunningTaskCollection, @ptrCast(self)), p_count_);
            }
            pub inline fn getItem(self: *const T, index_: VARIANT, pp_running_task_: ?*?*IRunningTask) HRESULT {
                return @as(*const IRunningTaskCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IRunningTaskCollection, @ptrCast(self)), index_, pp_running_task_);
            }
            pub inline fn getNewEnum(self: *const T, pp_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const IRunningTaskCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IRunningTaskCollection, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRegisteredTask_Value = Guid.initString("9c86f320-dee3-4dd1-b972-a303f26b061e");
pub const IID_IRegisteredTask = &IID_IRegisteredTask_Value;
pub const IRegisteredTask = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegisteredTask,
            p_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegisteredTask,
            p_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegisteredTask,
            p_state: ?*TASK_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegisteredTask,
            p_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegisteredTask,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Run: *const fn (
            self: *const IRegisteredTask,
            params: VARIANT,
            pp_running_task: ?*?*IRunningTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RunEx: *const fn (
            self: *const IRegisteredTask,
            params: VARIANT,
            flags: i32,
            session_i_d: i32,
            user: ?BSTR,
            pp_running_task: ?*?*IRunningTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInstances: *const fn (
            self: *const IRegisteredTask,
            flags: i32,
            pp_running_tasks: ?*?*IRunningTaskCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastRunTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegisteredTask,
            p_last_run_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LastTaskResult: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegisteredTask,
            p_last_task_result: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NumberOfMissedRuns: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegisteredTask,
            p_number_of_missed_runs: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NextRunTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegisteredTask,
            p_next_run_time: ?*f64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Definition: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegisteredTask,
            pp_definition: ?*?*ITaskDefinition,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Xml: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegisteredTask,
            p_xml: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSecurityDescriptor: *const fn (
            self: *const IRegisteredTask,
            security_information: i32,
            p_sddl: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSecurityDescriptor: *const fn (
            self: *const IRegisteredTask,
            sddl: ?BSTR,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const IRegisteredTask,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRunTimes: *const fn (
            self: *const IRegisteredTask,
            pst_start: ?*const SYSTEMTIME,
            pst_end: ?*const SYSTEMTIME,
            p_count: ?*u32,
            p_run_times: ?*?*SYSTEMTIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, p_name_: ?*?BSTR) HRESULT {
                return @as(*const IRegisteredTask.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IRegisteredTask, @ptrCast(self)), p_name_);
            }
            pub inline fn getPath(self: *const T, p_path_: ?*?BSTR) HRESULT {
                return @as(*const IRegisteredTask.VTable, @ptrCast(self.vtable)).get_Path(@as(*const IRegisteredTask, @ptrCast(self)), p_path_);
            }
            pub inline fn getState(self: *const T, p_state_: ?*TASK_STATE) HRESULT {
                return @as(*const IRegisteredTask.VTable, @ptrCast(self.vtable)).get_State(@as(*const IRegisteredTask, @ptrCast(self)), p_state_);
            }
            pub inline fn getEnabled(self: *const T, p_enabled_: ?*i16) HRESULT {
                return @as(*const IRegisteredTask.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const IRegisteredTask, @ptrCast(self)), p_enabled_);
            }
            pub inline fn putEnabled(self: *const T, enabled_: i16) HRESULT {
                return @as(*const IRegisteredTask.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const IRegisteredTask, @ptrCast(self)), enabled_);
            }
            pub inline fn run(self: *const T, params_: VARIANT, pp_running_task_: ?*?*IRunningTask) HRESULT {
                return @as(*const IRegisteredTask.VTable, @ptrCast(self.vtable)).Run(@as(*const IRegisteredTask, @ptrCast(self)), params_, pp_running_task_);
            }
            pub inline fn runEx(self: *const T, params_: VARIANT, flags_: i32, session_i_d_: i32, user_: ?BSTR, pp_running_task_: ?*?*IRunningTask) HRESULT {
                return @as(*const IRegisteredTask.VTable, @ptrCast(self.vtable)).RunEx(@as(*const IRegisteredTask, @ptrCast(self)), params_, flags_, session_i_d_, user_, pp_running_task_);
            }
            pub inline fn getInstances(self: *const T, flags_: i32, pp_running_tasks_: ?*?*IRunningTaskCollection) HRESULT {
                return @as(*const IRegisteredTask.VTable, @ptrCast(self.vtable)).GetInstances(@as(*const IRegisteredTask, @ptrCast(self)), flags_, pp_running_tasks_);
            }
            pub inline fn getLastRunTime(self: *const T, p_last_run_time_: ?*f64) HRESULT {
                return @as(*const IRegisteredTask.VTable, @ptrCast(self.vtable)).get_LastRunTime(@as(*const IRegisteredTask, @ptrCast(self)), p_last_run_time_);
            }
            pub inline fn getLastTaskResult(self: *const T, p_last_task_result_: ?*i32) HRESULT {
                return @as(*const IRegisteredTask.VTable, @ptrCast(self.vtable)).get_LastTaskResult(@as(*const IRegisteredTask, @ptrCast(self)), p_last_task_result_);
            }
            pub inline fn getNumberOfMissedRuns(self: *const T, p_number_of_missed_runs_: ?*i32) HRESULT {
                return @as(*const IRegisteredTask.VTable, @ptrCast(self.vtable)).get_NumberOfMissedRuns(@as(*const IRegisteredTask, @ptrCast(self)), p_number_of_missed_runs_);
            }
            pub inline fn getNextRunTime(self: *const T, p_next_run_time_: ?*f64) HRESULT {
                return @as(*const IRegisteredTask.VTable, @ptrCast(self.vtable)).get_NextRunTime(@as(*const IRegisteredTask, @ptrCast(self)), p_next_run_time_);
            }
            pub inline fn getDefinition(self: *const T, pp_definition_: ?*?*ITaskDefinition) HRESULT {
                return @as(*const IRegisteredTask.VTable, @ptrCast(self.vtable)).get_Definition(@as(*const IRegisteredTask, @ptrCast(self)), pp_definition_);
            }
            pub inline fn getXml(self: *const T, p_xml_: ?*?BSTR) HRESULT {
                return @as(*const IRegisteredTask.VTable, @ptrCast(self.vtable)).get_Xml(@as(*const IRegisteredTask, @ptrCast(self)), p_xml_);
            }
            pub inline fn getSecurityDescriptor(self: *const T, security_information_: i32, p_sddl_: ?*?BSTR) HRESULT {
                return @as(*const IRegisteredTask.VTable, @ptrCast(self.vtable)).GetSecurityDescriptor(@as(*const IRegisteredTask, @ptrCast(self)), security_information_, p_sddl_);
            }
            pub inline fn setSecurityDescriptor(self: *const T, sddl_: ?BSTR, flags_: i32) HRESULT {
                return @as(*const IRegisteredTask.VTable, @ptrCast(self.vtable)).SetSecurityDescriptor(@as(*const IRegisteredTask, @ptrCast(self)), sddl_, flags_);
            }
            pub inline fn stop(self: *const T, flags_: i32) HRESULT {
                return @as(*const IRegisteredTask.VTable, @ptrCast(self.vtable)).Stop(@as(*const IRegisteredTask, @ptrCast(self)), flags_);
            }
            pub inline fn getRunTimes(self: *const T, pst_start_: ?*const SYSTEMTIME, pst_end_: ?*const SYSTEMTIME, p_count_: ?*u32, p_run_times_: ?*?*SYSTEMTIME) HRESULT {
                return @as(*const IRegisteredTask.VTable, @ptrCast(self.vtable)).GetRunTimes(@as(*const IRegisteredTask, @ptrCast(self)), pst_start_, pst_end_, p_count_, p_run_times_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITrigger_Value = Guid.initString("09941815-ea89-4b5b-89e0-2a773801fac3");
pub const IID_ITrigger = &IID_ITrigger_Value;
pub const ITrigger = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITrigger,
            p_type: ?*TASK_TRIGGER_TYPE2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITrigger,
            p_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITrigger,
            id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Repetition: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITrigger,
            pp_repeat: ?*?*IRepetitionPattern,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Repetition: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITrigger,
            p_repeat: ?*IRepetitionPattern,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExecutionTimeLimit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITrigger,
            p_time_limit: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExecutionTimeLimit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITrigger,
            timelimit: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartBoundary: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITrigger,
            p_start: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StartBoundary: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITrigger,
            start: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EndBoundary: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITrigger,
            p_end: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EndBoundary: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITrigger,
            end: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITrigger,
            p_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITrigger,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getType(self: *const T, p_type_: ?*TASK_TRIGGER_TYPE2) HRESULT {
                return @as(*const ITrigger.VTable, @ptrCast(self.vtable)).get_Type(@as(*const ITrigger, @ptrCast(self)), p_type_);
            }
            pub inline fn getId(self: *const T, p_id_: ?*?BSTR) HRESULT {
                return @as(*const ITrigger.VTable, @ptrCast(self.vtable)).get_Id(@as(*const ITrigger, @ptrCast(self)), p_id_);
            }
            pub inline fn putId(self: *const T, id_: ?BSTR) HRESULT {
                return @as(*const ITrigger.VTable, @ptrCast(self.vtable)).put_Id(@as(*const ITrigger, @ptrCast(self)), id_);
            }
            pub inline fn getRepetition(self: *const T, pp_repeat_: ?*?*IRepetitionPattern) HRESULT {
                return @as(*const ITrigger.VTable, @ptrCast(self.vtable)).get_Repetition(@as(*const ITrigger, @ptrCast(self)), pp_repeat_);
            }
            pub inline fn putRepetition(self: *const T, p_repeat_: ?*IRepetitionPattern) HRESULT {
                return @as(*const ITrigger.VTable, @ptrCast(self.vtable)).put_Repetition(@as(*const ITrigger, @ptrCast(self)), p_repeat_);
            }
            pub inline fn getExecutionTimeLimit(self: *const T, p_time_limit_: ?*?BSTR) HRESULT {
                return @as(*const ITrigger.VTable, @ptrCast(self.vtable)).get_ExecutionTimeLimit(@as(*const ITrigger, @ptrCast(self)), p_time_limit_);
            }
            pub inline fn putExecutionTimeLimit(self: *const T, timelimit_: ?BSTR) HRESULT {
                return @as(*const ITrigger.VTable, @ptrCast(self.vtable)).put_ExecutionTimeLimit(@as(*const ITrigger, @ptrCast(self)), timelimit_);
            }
            pub inline fn getStartBoundary(self: *const T, p_start_: ?*?BSTR) HRESULT {
                return @as(*const ITrigger.VTable, @ptrCast(self.vtable)).get_StartBoundary(@as(*const ITrigger, @ptrCast(self)), p_start_);
            }
            pub inline fn putStartBoundary(self: *const T, start_: ?BSTR) HRESULT {
                return @as(*const ITrigger.VTable, @ptrCast(self.vtable)).put_StartBoundary(@as(*const ITrigger, @ptrCast(self)), start_);
            }
            pub inline fn getEndBoundary(self: *const T, p_end_: ?*?BSTR) HRESULT {
                return @as(*const ITrigger.VTable, @ptrCast(self.vtable)).get_EndBoundary(@as(*const ITrigger, @ptrCast(self)), p_end_);
            }
            pub inline fn putEndBoundary(self: *const T, end_: ?BSTR) HRESULT {
                return @as(*const ITrigger.VTable, @ptrCast(self.vtable)).put_EndBoundary(@as(*const ITrigger, @ptrCast(self)), end_);
            }
            pub inline fn getEnabled(self: *const T, p_enabled_: ?*i16) HRESULT {
                return @as(*const ITrigger.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const ITrigger, @ptrCast(self)), p_enabled_);
            }
            pub inline fn putEnabled(self: *const T, enabled_: i16) HRESULT {
                return @as(*const ITrigger.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const ITrigger, @ptrCast(self)), enabled_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IIdleTrigger_Value = Guid.initString("d537d2b0-9fb3-4d34-9739-1ff5ce7b1ef3");
pub const IID_IIdleTrigger = &IID_IIdleTrigger_Value;
pub const IIdleTrigger = extern struct {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITrigger.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ILogonTrigger_Value = Guid.initString("72dade38-fae4-4b3e-baf4-5d009af02b1c");
pub const IID_ILogonTrigger = &IID_ILogonTrigger_Value;
pub const ILogonTrigger = extern struct {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Delay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ILogonTrigger,
            p_delay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Delay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ILogonTrigger,
            delay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ILogonTrigger,
            p_user: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UserId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ILogonTrigger,
            user: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITrigger.MethodMixin(T);
            pub inline fn getDelay(self: *const T, p_delay_: ?*?BSTR) HRESULT {
                return @as(*const ILogonTrigger.VTable, @ptrCast(self.vtable)).get_Delay(@as(*const ILogonTrigger, @ptrCast(self)), p_delay_);
            }
            pub inline fn putDelay(self: *const T, delay_: ?BSTR) HRESULT {
                return @as(*const ILogonTrigger.VTable, @ptrCast(self.vtable)).put_Delay(@as(*const ILogonTrigger, @ptrCast(self)), delay_);
            }
            pub inline fn getUserId(self: *const T, p_user_: ?*?BSTR) HRESULT {
                return @as(*const ILogonTrigger.VTable, @ptrCast(self.vtable)).get_UserId(@as(*const ILogonTrigger, @ptrCast(self)), p_user_);
            }
            pub inline fn putUserId(self: *const T, user_: ?BSTR) HRESULT {
                return @as(*const ILogonTrigger.VTable, @ptrCast(self.vtable)).put_UserId(@as(*const ILogonTrigger, @ptrCast(self)), user_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISessionStateChangeTrigger_Value = Guid.initString("754da71b-4385-4475-9dd9-598294fa3641");
pub const IID_ISessionStateChangeTrigger = &IID_ISessionStateChangeTrigger_Value;
pub const ISessionStateChangeTrigger = extern struct {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Delay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISessionStateChangeTrigger,
            p_delay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Delay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISessionStateChangeTrigger,
            delay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISessionStateChangeTrigger,
            p_user: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UserId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISessionStateChangeTrigger,
            user: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StateChange: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISessionStateChangeTrigger,
            p_type: ?*TASK_SESSION_STATE_CHANGE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StateChange: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ISessionStateChangeTrigger,
            type: TASK_SESSION_STATE_CHANGE_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITrigger.MethodMixin(T);
            pub inline fn getDelay(self: *const T, p_delay_: ?*?BSTR) HRESULT {
                return @as(*const ISessionStateChangeTrigger.VTable, @ptrCast(self.vtable)).get_Delay(@as(*const ISessionStateChangeTrigger, @ptrCast(self)), p_delay_);
            }
            pub inline fn putDelay(self: *const T, delay_: ?BSTR) HRESULT {
                return @as(*const ISessionStateChangeTrigger.VTable, @ptrCast(self.vtable)).put_Delay(@as(*const ISessionStateChangeTrigger, @ptrCast(self)), delay_);
            }
            pub inline fn getUserId(self: *const T, p_user_: ?*?BSTR) HRESULT {
                return @as(*const ISessionStateChangeTrigger.VTable, @ptrCast(self.vtable)).get_UserId(@as(*const ISessionStateChangeTrigger, @ptrCast(self)), p_user_);
            }
            pub inline fn putUserId(self: *const T, user_: ?BSTR) HRESULT {
                return @as(*const ISessionStateChangeTrigger.VTable, @ptrCast(self.vtable)).put_UserId(@as(*const ISessionStateChangeTrigger, @ptrCast(self)), user_);
            }
            pub inline fn getStateChange(self: *const T, p_type_: ?*TASK_SESSION_STATE_CHANGE_TYPE) HRESULT {
                return @as(*const ISessionStateChangeTrigger.VTable, @ptrCast(self.vtable)).get_StateChange(@as(*const ISessionStateChangeTrigger, @ptrCast(self)), p_type_);
            }
            pub inline fn putStateChange(self: *const T, type_: TASK_SESSION_STATE_CHANGE_TYPE) HRESULT {
                return @as(*const ISessionStateChangeTrigger.VTable, @ptrCast(self.vtable)).put_StateChange(@as(*const ISessionStateChangeTrigger, @ptrCast(self)), type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEventTrigger_Value = Guid.initString("d45b0167-9653-4eef-b94f-0732ca7af251");
pub const IID_IEventTrigger = &IID_IEventTrigger_Value;
pub const IEventTrigger = extern struct {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Subscription: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventTrigger,
            p_query: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Subscription: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventTrigger,
            query: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Delay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventTrigger,
            p_delay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Delay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventTrigger,
            delay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ValueQueries: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventTrigger,
            pp_named_x_paths: ?*?*ITaskNamedValueCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ValueQueries: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEventTrigger,
            p_named_x_paths: ?*ITaskNamedValueCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITrigger.MethodMixin(T);
            pub inline fn getSubscription(self: *const T, p_query_: ?*?BSTR) HRESULT {
                return @as(*const IEventTrigger.VTable, @ptrCast(self.vtable)).get_Subscription(@as(*const IEventTrigger, @ptrCast(self)), p_query_);
            }
            pub inline fn putSubscription(self: *const T, query_: ?BSTR) HRESULT {
                return @as(*const IEventTrigger.VTable, @ptrCast(self.vtable)).put_Subscription(@as(*const IEventTrigger, @ptrCast(self)), query_);
            }
            pub inline fn getDelay(self: *const T, p_delay_: ?*?BSTR) HRESULT {
                return @as(*const IEventTrigger.VTable, @ptrCast(self.vtable)).get_Delay(@as(*const IEventTrigger, @ptrCast(self)), p_delay_);
            }
            pub inline fn putDelay(self: *const T, delay_: ?BSTR) HRESULT {
                return @as(*const IEventTrigger.VTable, @ptrCast(self.vtable)).put_Delay(@as(*const IEventTrigger, @ptrCast(self)), delay_);
            }
            pub inline fn getValueQueries(self: *const T, pp_named_x_paths_: ?*?*ITaskNamedValueCollection) HRESULT {
                return @as(*const IEventTrigger.VTable, @ptrCast(self.vtable)).get_ValueQueries(@as(*const IEventTrigger, @ptrCast(self)), pp_named_x_paths_);
            }
            pub inline fn putValueQueries(self: *const T, p_named_x_paths_: ?*ITaskNamedValueCollection) HRESULT {
                return @as(*const IEventTrigger.VTable, @ptrCast(self.vtable)).put_ValueQueries(@as(*const IEventTrigger, @ptrCast(self)), p_named_x_paths_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITimeTrigger_Value = Guid.initString("b45747e0-eba7-4276-9f29-85c5bb300006");
pub const IID_ITimeTrigger = &IID_ITimeTrigger_Value;
pub const ITimeTrigger = extern struct {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RandomDelay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITimeTrigger,
            p_random_delay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RandomDelay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITimeTrigger,
            random_delay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITrigger.MethodMixin(T);
            pub inline fn getRandomDelay(self: *const T, p_random_delay_: ?*?BSTR) HRESULT {
                return @as(*const ITimeTrigger.VTable, @ptrCast(self.vtable)).get_RandomDelay(@as(*const ITimeTrigger, @ptrCast(self)), p_random_delay_);
            }
            pub inline fn putRandomDelay(self: *const T, random_delay_: ?BSTR) HRESULT {
                return @as(*const ITimeTrigger.VTable, @ptrCast(self.vtable)).put_RandomDelay(@as(*const ITimeTrigger, @ptrCast(self)), random_delay_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDailyTrigger_Value = Guid.initString("126c5cd8-b288-41d5-8dbf-e491446adc5c");
pub const IID_IDailyTrigger = &IID_IDailyTrigger_Value;
pub const IDailyTrigger = extern struct {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DaysInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDailyTrigger,
            p_days: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DaysInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDailyTrigger,
            days: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RandomDelay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDailyTrigger,
            p_random_delay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RandomDelay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IDailyTrigger,
            random_delay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITrigger.MethodMixin(T);
            pub inline fn getDaysInterval(self: *const T, p_days_: ?*i16) HRESULT {
                return @as(*const IDailyTrigger.VTable, @ptrCast(self.vtable)).get_DaysInterval(@as(*const IDailyTrigger, @ptrCast(self)), p_days_);
            }
            pub inline fn putDaysInterval(self: *const T, days_: i16) HRESULT {
                return @as(*const IDailyTrigger.VTable, @ptrCast(self.vtable)).put_DaysInterval(@as(*const IDailyTrigger, @ptrCast(self)), days_);
            }
            pub inline fn getRandomDelay(self: *const T, p_random_delay_: ?*?BSTR) HRESULT {
                return @as(*const IDailyTrigger.VTable, @ptrCast(self.vtable)).get_RandomDelay(@as(*const IDailyTrigger, @ptrCast(self)), p_random_delay_);
            }
            pub inline fn putRandomDelay(self: *const T, random_delay_: ?BSTR) HRESULT {
                return @as(*const IDailyTrigger.VTable, @ptrCast(self.vtable)).put_RandomDelay(@as(*const IDailyTrigger, @ptrCast(self)), random_delay_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWeeklyTrigger_Value = Guid.initString("5038fc98-82ff-436d-8728-a512a57c9dc1");
pub const IID_IWeeklyTrigger = &IID_IWeeklyTrigger_Value;
pub const IWeeklyTrigger = extern struct {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DaysOfWeek: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWeeklyTrigger,
            p_days: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DaysOfWeek: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWeeklyTrigger,
            days: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WeeksInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWeeklyTrigger,
            p_weeks: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WeeksInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWeeklyTrigger,
            weeks: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RandomDelay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWeeklyTrigger,
            p_random_delay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RandomDelay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IWeeklyTrigger,
            random_delay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITrigger.MethodMixin(T);
            pub inline fn getDaysOfWeek(self: *const T, p_days_: ?*i16) HRESULT {
                return @as(*const IWeeklyTrigger.VTable, @ptrCast(self.vtable)).get_DaysOfWeek(@as(*const IWeeklyTrigger, @ptrCast(self)), p_days_);
            }
            pub inline fn putDaysOfWeek(self: *const T, days_: i16) HRESULT {
                return @as(*const IWeeklyTrigger.VTable, @ptrCast(self.vtable)).put_DaysOfWeek(@as(*const IWeeklyTrigger, @ptrCast(self)), days_);
            }
            pub inline fn getWeeksInterval(self: *const T, p_weeks_: ?*i16) HRESULT {
                return @as(*const IWeeklyTrigger.VTable, @ptrCast(self.vtable)).get_WeeksInterval(@as(*const IWeeklyTrigger, @ptrCast(self)), p_weeks_);
            }
            pub inline fn putWeeksInterval(self: *const T, weeks_: i16) HRESULT {
                return @as(*const IWeeklyTrigger.VTable, @ptrCast(self.vtable)).put_WeeksInterval(@as(*const IWeeklyTrigger, @ptrCast(self)), weeks_);
            }
            pub inline fn getRandomDelay(self: *const T, p_random_delay_: ?*?BSTR) HRESULT {
                return @as(*const IWeeklyTrigger.VTable, @ptrCast(self.vtable)).get_RandomDelay(@as(*const IWeeklyTrigger, @ptrCast(self)), p_random_delay_);
            }
            pub inline fn putRandomDelay(self: *const T, random_delay_: ?BSTR) HRESULT {
                return @as(*const IWeeklyTrigger.VTable, @ptrCast(self.vtable)).put_RandomDelay(@as(*const IWeeklyTrigger, @ptrCast(self)), random_delay_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IMonthlyTrigger_Value = Guid.initString("97c45ef1-6b02-4a1a-9c0e-1ebfba1500ac");
pub const IID_IMonthlyTrigger = &IID_IMonthlyTrigger_Value;
pub const IMonthlyTrigger = extern struct {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DaysOfMonth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMonthlyTrigger,
            p_days: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DaysOfMonth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMonthlyTrigger,
            days: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MonthsOfYear: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMonthlyTrigger,
            p_months: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MonthsOfYear: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMonthlyTrigger,
            months: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RunOnLastDayOfMonth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMonthlyTrigger,
            p_last_day: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RunOnLastDayOfMonth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMonthlyTrigger,
            last_day: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RandomDelay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMonthlyTrigger,
            p_random_delay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RandomDelay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMonthlyTrigger,
            random_delay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITrigger.MethodMixin(T);
            pub inline fn getDaysOfMonth(self: *const T, p_days_: ?*i32) HRESULT {
                return @as(*const IMonthlyTrigger.VTable, @ptrCast(self.vtable)).get_DaysOfMonth(@as(*const IMonthlyTrigger, @ptrCast(self)), p_days_);
            }
            pub inline fn putDaysOfMonth(self: *const T, days_: i32) HRESULT {
                return @as(*const IMonthlyTrigger.VTable, @ptrCast(self.vtable)).put_DaysOfMonth(@as(*const IMonthlyTrigger, @ptrCast(self)), days_);
            }
            pub inline fn getMonthsOfYear(self: *const T, p_months_: ?*i16) HRESULT {
                return @as(*const IMonthlyTrigger.VTable, @ptrCast(self.vtable)).get_MonthsOfYear(@as(*const IMonthlyTrigger, @ptrCast(self)), p_months_);
            }
            pub inline fn putMonthsOfYear(self: *const T, months_: i16) HRESULT {
                return @as(*const IMonthlyTrigger.VTable, @ptrCast(self.vtable)).put_MonthsOfYear(@as(*const IMonthlyTrigger, @ptrCast(self)), months_);
            }
            pub inline fn getRunOnLastDayOfMonth(self: *const T, p_last_day_: ?*i16) HRESULT {
                return @as(*const IMonthlyTrigger.VTable, @ptrCast(self.vtable)).get_RunOnLastDayOfMonth(@as(*const IMonthlyTrigger, @ptrCast(self)), p_last_day_);
            }
            pub inline fn putRunOnLastDayOfMonth(self: *const T, last_day_: i16) HRESULT {
                return @as(*const IMonthlyTrigger.VTable, @ptrCast(self.vtable)).put_RunOnLastDayOfMonth(@as(*const IMonthlyTrigger, @ptrCast(self)), last_day_);
            }
            pub inline fn getRandomDelay(self: *const T, p_random_delay_: ?*?BSTR) HRESULT {
                return @as(*const IMonthlyTrigger.VTable, @ptrCast(self.vtable)).get_RandomDelay(@as(*const IMonthlyTrigger, @ptrCast(self)), p_random_delay_);
            }
            pub inline fn putRandomDelay(self: *const T, random_delay_: ?BSTR) HRESULT {
                return @as(*const IMonthlyTrigger.VTable, @ptrCast(self.vtable)).put_RandomDelay(@as(*const IMonthlyTrigger, @ptrCast(self)), random_delay_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IMonthlyDOWTrigger_Value = Guid.initString("77d025a3-90fa-43aa-b52e-cda5499b946a");
pub const IID_IMonthlyDOWTrigger = &IID_IMonthlyDOWTrigger_Value;
pub const IMonthlyDOWTrigger = extern struct {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DaysOfWeek: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMonthlyDOWTrigger,
            p_days: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DaysOfWeek: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMonthlyDOWTrigger,
            days: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WeeksOfMonth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMonthlyDOWTrigger,
            p_weeks: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WeeksOfMonth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMonthlyDOWTrigger,
            weeks: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MonthsOfYear: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMonthlyDOWTrigger,
            p_months: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MonthsOfYear: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMonthlyDOWTrigger,
            months: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RunOnLastWeekOfMonth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMonthlyDOWTrigger,
            p_last_week: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RunOnLastWeekOfMonth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMonthlyDOWTrigger,
            last_week: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RandomDelay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMonthlyDOWTrigger,
            p_random_delay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RandomDelay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMonthlyDOWTrigger,
            random_delay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITrigger.MethodMixin(T);
            pub inline fn getDaysOfWeek(self: *const T, p_days_: ?*i16) HRESULT {
                return @as(*const IMonthlyDOWTrigger.VTable, @ptrCast(self.vtable)).get_DaysOfWeek(@as(*const IMonthlyDOWTrigger, @ptrCast(self)), p_days_);
            }
            pub inline fn putDaysOfWeek(self: *const T, days_: i16) HRESULT {
                return @as(*const IMonthlyDOWTrigger.VTable, @ptrCast(self.vtable)).put_DaysOfWeek(@as(*const IMonthlyDOWTrigger, @ptrCast(self)), days_);
            }
            pub inline fn getWeeksOfMonth(self: *const T, p_weeks_: ?*i16) HRESULT {
                return @as(*const IMonthlyDOWTrigger.VTable, @ptrCast(self.vtable)).get_WeeksOfMonth(@as(*const IMonthlyDOWTrigger, @ptrCast(self)), p_weeks_);
            }
            pub inline fn putWeeksOfMonth(self: *const T, weeks_: i16) HRESULT {
                return @as(*const IMonthlyDOWTrigger.VTable, @ptrCast(self.vtable)).put_WeeksOfMonth(@as(*const IMonthlyDOWTrigger, @ptrCast(self)), weeks_);
            }
            pub inline fn getMonthsOfYear(self: *const T, p_months_: ?*i16) HRESULT {
                return @as(*const IMonthlyDOWTrigger.VTable, @ptrCast(self.vtable)).get_MonthsOfYear(@as(*const IMonthlyDOWTrigger, @ptrCast(self)), p_months_);
            }
            pub inline fn putMonthsOfYear(self: *const T, months_: i16) HRESULT {
                return @as(*const IMonthlyDOWTrigger.VTable, @ptrCast(self.vtable)).put_MonthsOfYear(@as(*const IMonthlyDOWTrigger, @ptrCast(self)), months_);
            }
            pub inline fn getRunOnLastWeekOfMonth(self: *const T, p_last_week_: ?*i16) HRESULT {
                return @as(*const IMonthlyDOWTrigger.VTable, @ptrCast(self.vtable)).get_RunOnLastWeekOfMonth(@as(*const IMonthlyDOWTrigger, @ptrCast(self)), p_last_week_);
            }
            pub inline fn putRunOnLastWeekOfMonth(self: *const T, last_week_: i16) HRESULT {
                return @as(*const IMonthlyDOWTrigger.VTable, @ptrCast(self.vtable)).put_RunOnLastWeekOfMonth(@as(*const IMonthlyDOWTrigger, @ptrCast(self)), last_week_);
            }
            pub inline fn getRandomDelay(self: *const T, p_random_delay_: ?*?BSTR) HRESULT {
                return @as(*const IMonthlyDOWTrigger.VTable, @ptrCast(self.vtable)).get_RandomDelay(@as(*const IMonthlyDOWTrigger, @ptrCast(self)), p_random_delay_);
            }
            pub inline fn putRandomDelay(self: *const T, random_delay_: ?BSTR) HRESULT {
                return @as(*const IMonthlyDOWTrigger.VTable, @ptrCast(self.vtable)).put_RandomDelay(@as(*const IMonthlyDOWTrigger, @ptrCast(self)), random_delay_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IBootTrigger_Value = Guid.initString("2a9c35da-d357-41f4-bbc1-207ac1b1f3cb");
pub const IID_IBootTrigger = &IID_IBootTrigger_Value;
pub const IBootTrigger = extern struct {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Delay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IBootTrigger,
            p_delay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Delay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IBootTrigger,
            delay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITrigger.MethodMixin(T);
            pub inline fn getDelay(self: *const T, p_delay_: ?*?BSTR) HRESULT {
                return @as(*const IBootTrigger.VTable, @ptrCast(self.vtable)).get_Delay(@as(*const IBootTrigger, @ptrCast(self)), p_delay_);
            }
            pub inline fn putDelay(self: *const T, delay_: ?BSTR) HRESULT {
                return @as(*const IBootTrigger.VTable, @ptrCast(self.vtable)).put_Delay(@as(*const IBootTrigger, @ptrCast(self)), delay_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRegistrationTrigger_Value = Guid.initString("4c8fec3a-c218-4e0c-b23d-629024db91a2");
pub const IID_IRegistrationTrigger = &IID_IRegistrationTrigger_Value;
pub const IRegistrationTrigger = extern struct {
    pub const VTable = extern struct {
        base: ITrigger.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Delay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegistrationTrigger,
            p_delay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Delay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegistrationTrigger,
            delay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITrigger.MethodMixin(T);
            pub inline fn getDelay(self: *const T, p_delay_: ?*?BSTR) HRESULT {
                return @as(*const IRegistrationTrigger.VTable, @ptrCast(self.vtable)).get_Delay(@as(*const IRegistrationTrigger, @ptrCast(self)), p_delay_);
            }
            pub inline fn putDelay(self: *const T, delay_: ?BSTR) HRESULT {
                return @as(*const IRegistrationTrigger.VTable, @ptrCast(self.vtable)).put_Delay(@as(*const IRegistrationTrigger, @ptrCast(self)), delay_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IAction_Value = Guid.initString("bae54997-48b1-4cbe-9965-d6be263ebea4");
pub const IID_IAction = &IID_IAction_Value;
pub const IAction = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAction,
            p_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAction,
            id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IAction,
            p_type: ?*TASK_ACTION_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getId(self: *const T, p_id_: ?*?BSTR) HRESULT {
                return @as(*const IAction.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IAction, @ptrCast(self)), p_id_);
            }
            pub inline fn putId(self: *const T, id_: ?BSTR) HRESULT {
                return @as(*const IAction.VTable, @ptrCast(self.vtable)).put_Id(@as(*const IAction, @ptrCast(self)), id_);
            }
            pub inline fn getType(self: *const T, p_type_: ?*TASK_ACTION_TYPE) HRESULT {
                return @as(*const IAction.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IAction, @ptrCast(self)), p_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IExecAction_Value = Guid.initString("4c3d624d-fd6b-49a3-b9b7-09cb3cd3f047");
pub const IID_IExecAction = &IID_IExecAction_Value;
pub const IExecAction = extern struct {
    pub const VTable = extern struct {
        base: IAction.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IExecAction,
            p_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IExecAction,
            path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Arguments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IExecAction,
            p_argument: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Arguments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IExecAction,
            argument: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WorkingDirectory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IExecAction,
            p_working_directory: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WorkingDirectory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IExecAction,
            working_directory: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IAction.MethodMixin(T);
            pub inline fn getPath(self: *const T, p_path_: ?*?BSTR) HRESULT {
                return @as(*const IExecAction.VTable, @ptrCast(self.vtable)).get_Path(@as(*const IExecAction, @ptrCast(self)), p_path_);
            }
            pub inline fn putPath(self: *const T, path_: ?BSTR) HRESULT {
                return @as(*const IExecAction.VTable, @ptrCast(self.vtable)).put_Path(@as(*const IExecAction, @ptrCast(self)), path_);
            }
            pub inline fn getArguments(self: *const T, p_argument_: ?*?BSTR) HRESULT {
                return @as(*const IExecAction.VTable, @ptrCast(self.vtable)).get_Arguments(@as(*const IExecAction, @ptrCast(self)), p_argument_);
            }
            pub inline fn putArguments(self: *const T, argument_: ?BSTR) HRESULT {
                return @as(*const IExecAction.VTable, @ptrCast(self.vtable)).put_Arguments(@as(*const IExecAction, @ptrCast(self)), argument_);
            }
            pub inline fn getWorkingDirectory(self: *const T, p_working_directory_: ?*?BSTR) HRESULT {
                return @as(*const IExecAction.VTable, @ptrCast(self.vtable)).get_WorkingDirectory(@as(*const IExecAction, @ptrCast(self)), p_working_directory_);
            }
            pub inline fn putWorkingDirectory(self: *const T, working_directory_: ?BSTR) HRESULT {
                return @as(*const IExecAction.VTable, @ptrCast(self.vtable)).put_WorkingDirectory(@as(*const IExecAction, @ptrCast(self)), working_directory_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IExecAction2_Value = Guid.initString("f2a82542-bda5-4e6b-9143-e2bf4f8987b6");
pub const IID_IExecAction2 = &IID_IExecAction2_Value;
pub const IExecAction2 = extern struct {
    pub const VTable = extern struct {
        base: IExecAction.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HideAppWindow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IExecAction2,
            p_hide_app_window: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HideAppWindow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IExecAction2,
            hide_app_window: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IExecAction.MethodMixin(T);
            pub inline fn getHideAppWindow(self: *const T, p_hide_app_window_: ?*i16) HRESULT {
                return @as(*const IExecAction2.VTable, @ptrCast(self.vtable)).get_HideAppWindow(@as(*const IExecAction2, @ptrCast(self)), p_hide_app_window_);
            }
            pub inline fn putHideAppWindow(self: *const T, hide_app_window_: i16) HRESULT {
                return @as(*const IExecAction2.VTable, @ptrCast(self.vtable)).put_HideAppWindow(@as(*const IExecAction2, @ptrCast(self)), hide_app_window_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IShowMessageAction_Value = Guid.initString("505e9e68-af89-46b8-a30f-56162a83d537");
pub const IID_IShowMessageAction = &IID_IShowMessageAction_Value;
pub const IShowMessageAction = extern struct {
    pub const VTable = extern struct {
        base: IAction.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Title: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShowMessageAction,
            p_title: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Title: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShowMessageAction,
            title: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MessageBody: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShowMessageAction,
            p_message_body: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MessageBody: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IShowMessageAction,
            message_body: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IAction.MethodMixin(T);
            pub inline fn getTitle(self: *const T, p_title_: ?*?BSTR) HRESULT {
                return @as(*const IShowMessageAction.VTable, @ptrCast(self.vtable)).get_Title(@as(*const IShowMessageAction, @ptrCast(self)), p_title_);
            }
            pub inline fn putTitle(self: *const T, title_: ?BSTR) HRESULT {
                return @as(*const IShowMessageAction.VTable, @ptrCast(self.vtable)).put_Title(@as(*const IShowMessageAction, @ptrCast(self)), title_);
            }
            pub inline fn getMessageBody(self: *const T, p_message_body_: ?*?BSTR) HRESULT {
                return @as(*const IShowMessageAction.VTable, @ptrCast(self.vtable)).get_MessageBody(@as(*const IShowMessageAction, @ptrCast(self)), p_message_body_);
            }
            pub inline fn putMessageBody(self: *const T, message_body_: ?BSTR) HRESULT {
                return @as(*const IShowMessageAction.VTable, @ptrCast(self.vtable)).put_MessageBody(@as(*const IShowMessageAction, @ptrCast(self)), message_body_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IComHandlerAction_Value = Guid.initString("6d2fd252-75c5-4f66-90ba-2a7d8cc3039f");
pub const IID_IComHandlerAction = &IID_IComHandlerAction_Value;
pub const IComHandlerAction = extern struct {
    pub const VTable = extern struct {
        base: IAction.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClassId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IComHandlerAction,
            p_clsid: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClassId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IComHandlerAction,
            clsid: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Data: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IComHandlerAction,
            p_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Data: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IComHandlerAction,
            data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IAction.MethodMixin(T);
            pub inline fn getClassId(self: *const T, p_clsid_: ?*?BSTR) HRESULT {
                return @as(*const IComHandlerAction.VTable, @ptrCast(self.vtable)).get_ClassId(@as(*const IComHandlerAction, @ptrCast(self)), p_clsid_);
            }
            pub inline fn putClassId(self: *const T, clsid_: ?BSTR) HRESULT {
                return @as(*const IComHandlerAction.VTable, @ptrCast(self.vtable)).put_ClassId(@as(*const IComHandlerAction, @ptrCast(self)), clsid_);
            }
            pub inline fn getData(self: *const T, p_data_: ?*?BSTR) HRESULT {
                return @as(*const IComHandlerAction.VTable, @ptrCast(self.vtable)).get_Data(@as(*const IComHandlerAction, @ptrCast(self)), p_data_);
            }
            pub inline fn putData(self: *const T, data_: ?BSTR) HRESULT {
                return @as(*const IComHandlerAction.VTable, @ptrCast(self.vtable)).put_Data(@as(*const IComHandlerAction, @ptrCast(self)), data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEmailAction_Value = Guid.initString("10f62c64-7e16-4314-a0c2-0c3683f99d40");
pub const IID_IEmailAction = &IID_IEmailAction_Value;
pub const IEmailAction = extern struct {
    pub const VTable = extern struct {
        base: IAction.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Server: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEmailAction,
            p_server: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Server: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEmailAction,
            server: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Subject: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEmailAction,
            p_subject: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Subject: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEmailAction,
            subject: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_To: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEmailAction,
            p_to: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_To: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEmailAction,
            to: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Cc: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEmailAction,
            p_cc: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Cc: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEmailAction,
            cc: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Bcc: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEmailAction,
            p_bcc: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Bcc: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEmailAction,
            bcc: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReplyTo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEmailAction,
            p_reply_to: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReplyTo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEmailAction,
            reply_to: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_From: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEmailAction,
            p_from: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_From: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEmailAction,
            from: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_HeaderFields: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEmailAction,
            pp_header_fields: ?*?*ITaskNamedValueCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_HeaderFields: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEmailAction,
            p_header_fields: ?*ITaskNamedValueCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Body: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEmailAction,
            p_body: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Body: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEmailAction,
            body: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Attachments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEmailAction,
            p_attachements: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Attachments: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IEmailAction,
            p_attachements: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IAction.MethodMixin(T);
            pub inline fn getServer(self: *const T, p_server_: ?*?BSTR) HRESULT {
                return @as(*const IEmailAction.VTable, @ptrCast(self.vtable)).get_Server(@as(*const IEmailAction, @ptrCast(self)), p_server_);
            }
            pub inline fn putServer(self: *const T, server_: ?BSTR) HRESULT {
                return @as(*const IEmailAction.VTable, @ptrCast(self.vtable)).put_Server(@as(*const IEmailAction, @ptrCast(self)), server_);
            }
            pub inline fn getSubject(self: *const T, p_subject_: ?*?BSTR) HRESULT {
                return @as(*const IEmailAction.VTable, @ptrCast(self.vtable)).get_Subject(@as(*const IEmailAction, @ptrCast(self)), p_subject_);
            }
            pub inline fn putSubject(self: *const T, subject_: ?BSTR) HRESULT {
                return @as(*const IEmailAction.VTable, @ptrCast(self.vtable)).put_Subject(@as(*const IEmailAction, @ptrCast(self)), subject_);
            }
            pub inline fn getTo(self: *const T, p_to_: ?*?BSTR) HRESULT {
                return @as(*const IEmailAction.VTable, @ptrCast(self.vtable)).get_To(@as(*const IEmailAction, @ptrCast(self)), p_to_);
            }
            pub inline fn putTo(self: *const T, to_: ?BSTR) HRESULT {
                return @as(*const IEmailAction.VTable, @ptrCast(self.vtable)).put_To(@as(*const IEmailAction, @ptrCast(self)), to_);
            }
            pub inline fn getCc(self: *const T, p_cc_: ?*?BSTR) HRESULT {
                return @as(*const IEmailAction.VTable, @ptrCast(self.vtable)).get_Cc(@as(*const IEmailAction, @ptrCast(self)), p_cc_);
            }
            pub inline fn putCc(self: *const T, cc_: ?BSTR) HRESULT {
                return @as(*const IEmailAction.VTable, @ptrCast(self.vtable)).put_Cc(@as(*const IEmailAction, @ptrCast(self)), cc_);
            }
            pub inline fn getBcc(self: *const T, p_bcc_: ?*?BSTR) HRESULT {
                return @as(*const IEmailAction.VTable, @ptrCast(self.vtable)).get_Bcc(@as(*const IEmailAction, @ptrCast(self)), p_bcc_);
            }
            pub inline fn putBcc(self: *const T, bcc_: ?BSTR) HRESULT {
                return @as(*const IEmailAction.VTable, @ptrCast(self.vtable)).put_Bcc(@as(*const IEmailAction, @ptrCast(self)), bcc_);
            }
            pub inline fn getReplyTo(self: *const T, p_reply_to_: ?*?BSTR) HRESULT {
                return @as(*const IEmailAction.VTable, @ptrCast(self.vtable)).get_ReplyTo(@as(*const IEmailAction, @ptrCast(self)), p_reply_to_);
            }
            pub inline fn putReplyTo(self: *const T, reply_to_: ?BSTR) HRESULT {
                return @as(*const IEmailAction.VTable, @ptrCast(self.vtable)).put_ReplyTo(@as(*const IEmailAction, @ptrCast(self)), reply_to_);
            }
            pub inline fn getFrom(self: *const T, p_from_: ?*?BSTR) HRESULT {
                return @as(*const IEmailAction.VTable, @ptrCast(self.vtable)).get_From(@as(*const IEmailAction, @ptrCast(self)), p_from_);
            }
            pub inline fn putFrom(self: *const T, from_: ?BSTR) HRESULT {
                return @as(*const IEmailAction.VTable, @ptrCast(self.vtable)).put_From(@as(*const IEmailAction, @ptrCast(self)), from_);
            }
            pub inline fn getHeaderFields(self: *const T, pp_header_fields_: ?*?*ITaskNamedValueCollection) HRESULT {
                return @as(*const IEmailAction.VTable, @ptrCast(self.vtable)).get_HeaderFields(@as(*const IEmailAction, @ptrCast(self)), pp_header_fields_);
            }
            pub inline fn putHeaderFields(self: *const T, p_header_fields_: ?*ITaskNamedValueCollection) HRESULT {
                return @as(*const IEmailAction.VTable, @ptrCast(self.vtable)).put_HeaderFields(@as(*const IEmailAction, @ptrCast(self)), p_header_fields_);
            }
            pub inline fn getBody(self: *const T, p_body_: ?*?BSTR) HRESULT {
                return @as(*const IEmailAction.VTable, @ptrCast(self.vtable)).get_Body(@as(*const IEmailAction, @ptrCast(self)), p_body_);
            }
            pub inline fn putBody(self: *const T, body_: ?BSTR) HRESULT {
                return @as(*const IEmailAction.VTable, @ptrCast(self.vtable)).put_Body(@as(*const IEmailAction, @ptrCast(self)), body_);
            }
            pub inline fn getAttachments(self: *const T, p_attachements_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IEmailAction.VTable, @ptrCast(self.vtable)).get_Attachments(@as(*const IEmailAction, @ptrCast(self)), p_attachements_);
            }
            pub inline fn putAttachments(self: *const T, p_attachements_: ?*SAFEARRAY) HRESULT {
                return @as(*const IEmailAction.VTable, @ptrCast(self.vtable)).put_Attachments(@as(*const IEmailAction, @ptrCast(self)), p_attachements_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITriggerCollection_Value = Guid.initString("85df5081-1b24-4f32-878a-d9d14df4cb77");
pub const IID_ITriggerCollection = &IID_ITriggerCollection_Value;
pub const ITriggerCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITriggerCollection,
            p_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITriggerCollection,
            index: i32,
            pp_trigger: ?*?*ITrigger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITriggerCollection,
            pp_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn (
            self: *const ITriggerCollection,
            type: TASK_TRIGGER_TYPE2,
            pp_trigger: ?*?*ITrigger,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const ITriggerCollection,
            index: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const ITriggerCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_count_: ?*i32) HRESULT {
                return @as(*const ITriggerCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ITriggerCollection, @ptrCast(self)), p_count_);
            }
            pub inline fn getItem(self: *const T, index_: i32, pp_trigger_: ?*?*ITrigger) HRESULT {
                return @as(*const ITriggerCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const ITriggerCollection, @ptrCast(self)), index_, pp_trigger_);
            }
            pub inline fn getNewEnum(self: *const T, pp_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const ITriggerCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ITriggerCollection, @ptrCast(self)), pp_enum_);
            }
            pub inline fn create(self: *const T, type_: TASK_TRIGGER_TYPE2, pp_trigger_: ?*?*ITrigger) HRESULT {
                return @as(*const ITriggerCollection.VTable, @ptrCast(self.vtable)).Create(@as(*const ITriggerCollection, @ptrCast(self)), type_, pp_trigger_);
            }
            pub inline fn remove(self: *const T, index_: VARIANT) HRESULT {
                return @as(*const ITriggerCollection.VTable, @ptrCast(self.vtable)).Remove(@as(*const ITriggerCollection, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const ITriggerCollection.VTable, @ptrCast(self.vtable)).Clear(@as(*const ITriggerCollection, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IActionCollection_Value = Guid.initString("02820e19-7b98-4ed2-b2e8-fdccceff619b");
pub const IID_IActionCollection = &IID_IActionCollection_Value;
pub const IActionCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IActionCollection,
            p_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IActionCollection,
            index: i32,
            pp_action: ?*?*IAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IActionCollection,
            pp_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_XmlText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IActionCollection,
            p_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_XmlText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IActionCollection,
            text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Create: *const fn (
            self: *const IActionCollection,
            type: TASK_ACTION_TYPE,
            pp_action: ?*?*IAction,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const IActionCollection,
            index: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IActionCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Context: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IActionCollection,
            p_context: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Context: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IActionCollection,
            context: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_count_: ?*i32) HRESULT {
                return @as(*const IActionCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IActionCollection, @ptrCast(self)), p_count_);
            }
            pub inline fn getItem(self: *const T, index_: i32, pp_action_: ?*?*IAction) HRESULT {
                return @as(*const IActionCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IActionCollection, @ptrCast(self)), index_, pp_action_);
            }
            pub inline fn getNewEnum(self: *const T, pp_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const IActionCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IActionCollection, @ptrCast(self)), pp_enum_);
            }
            pub inline fn getXmlText(self: *const T, p_text_: ?*?BSTR) HRESULT {
                return @as(*const IActionCollection.VTable, @ptrCast(self.vtable)).get_XmlText(@as(*const IActionCollection, @ptrCast(self)), p_text_);
            }
            pub inline fn putXmlText(self: *const T, text_: ?BSTR) HRESULT {
                return @as(*const IActionCollection.VTable, @ptrCast(self.vtable)).put_XmlText(@as(*const IActionCollection, @ptrCast(self)), text_);
            }
            pub inline fn create(self: *const T, type_: TASK_ACTION_TYPE, pp_action_: ?*?*IAction) HRESULT {
                return @as(*const IActionCollection.VTable, @ptrCast(self.vtable)).Create(@as(*const IActionCollection, @ptrCast(self)), type_, pp_action_);
            }
            pub inline fn remove(self: *const T, index_: VARIANT) HRESULT {
                return @as(*const IActionCollection.VTable, @ptrCast(self.vtable)).Remove(@as(*const IActionCollection, @ptrCast(self)), index_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IActionCollection.VTable, @ptrCast(self.vtable)).Clear(@as(*const IActionCollection, @ptrCast(self)));
            }
            pub inline fn getContext(self: *const T, p_context_: ?*?BSTR) HRESULT {
                return @as(*const IActionCollection.VTable, @ptrCast(self.vtable)).get_Context(@as(*const IActionCollection, @ptrCast(self)), p_context_);
            }
            pub inline fn putContext(self: *const T, context_: ?BSTR) HRESULT {
                return @as(*const IActionCollection.VTable, @ptrCast(self.vtable)).put_Context(@as(*const IActionCollection, @ptrCast(self)), context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPrincipal_Value = Guid.initString("d98d51e5-c9b4-496a-a9c1-18980261cf0f");
pub const IID_IPrincipal = &IID_IPrincipal_Value;
pub const IPrincipal = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrincipal,
            p_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrincipal,
            id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrincipal,
            p_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrincipal,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrincipal,
            p_user: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UserId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrincipal,
            user: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LogonType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrincipal,
            p_logon: ?*TASK_LOGON_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LogonType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrincipal,
            logon: TASK_LOGON_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GroupId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrincipal,
            p_group: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GroupId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrincipal,
            group: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RunLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrincipal,
            p_run_level: ?*TASK_RUNLEVEL_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RunLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrincipal,
            run_level: TASK_RUNLEVEL_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getId(self: *const T, p_id_: ?*?BSTR) HRESULT {
                return @as(*const IPrincipal.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IPrincipal, @ptrCast(self)), p_id_);
            }
            pub inline fn putId(self: *const T, id_: ?BSTR) HRESULT {
                return @as(*const IPrincipal.VTable, @ptrCast(self.vtable)).put_Id(@as(*const IPrincipal, @ptrCast(self)), id_);
            }
            pub inline fn getDisplayName(self: *const T, p_name_: ?*?BSTR) HRESULT {
                return @as(*const IPrincipal.VTable, @ptrCast(self.vtable)).get_DisplayName(@as(*const IPrincipal, @ptrCast(self)), p_name_);
            }
            pub inline fn putDisplayName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const IPrincipal.VTable, @ptrCast(self.vtable)).put_DisplayName(@as(*const IPrincipal, @ptrCast(self)), name_);
            }
            pub inline fn getUserId(self: *const T, p_user_: ?*?BSTR) HRESULT {
                return @as(*const IPrincipal.VTable, @ptrCast(self.vtable)).get_UserId(@as(*const IPrincipal, @ptrCast(self)), p_user_);
            }
            pub inline fn putUserId(self: *const T, user_: ?BSTR) HRESULT {
                return @as(*const IPrincipal.VTable, @ptrCast(self.vtable)).put_UserId(@as(*const IPrincipal, @ptrCast(self)), user_);
            }
            pub inline fn getLogonType(self: *const T, p_logon_: ?*TASK_LOGON_TYPE) HRESULT {
                return @as(*const IPrincipal.VTable, @ptrCast(self.vtable)).get_LogonType(@as(*const IPrincipal, @ptrCast(self)), p_logon_);
            }
            pub inline fn putLogonType(self: *const T, logon_: TASK_LOGON_TYPE) HRESULT {
                return @as(*const IPrincipal.VTable, @ptrCast(self.vtable)).put_LogonType(@as(*const IPrincipal, @ptrCast(self)), logon_);
            }
            pub inline fn getGroupId(self: *const T, p_group_: ?*?BSTR) HRESULT {
                return @as(*const IPrincipal.VTable, @ptrCast(self.vtable)).get_GroupId(@as(*const IPrincipal, @ptrCast(self)), p_group_);
            }
            pub inline fn putGroupId(self: *const T, group_: ?BSTR) HRESULT {
                return @as(*const IPrincipal.VTable, @ptrCast(self.vtable)).put_GroupId(@as(*const IPrincipal, @ptrCast(self)), group_);
            }
            pub inline fn getRunLevel(self: *const T, p_run_level_: ?*TASK_RUNLEVEL_TYPE) HRESULT {
                return @as(*const IPrincipal.VTable, @ptrCast(self.vtable)).get_RunLevel(@as(*const IPrincipal, @ptrCast(self)), p_run_level_);
            }
            pub inline fn putRunLevel(self: *const T, run_level_: TASK_RUNLEVEL_TYPE) HRESULT {
                return @as(*const IPrincipal.VTable, @ptrCast(self.vtable)).put_RunLevel(@as(*const IPrincipal, @ptrCast(self)), run_level_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IPrincipal2_Value = Guid.initString("248919ae-e345-4a6d-8aeb-e0d3165c904e");
pub const IID_IPrincipal2 = &IID_IPrincipal2_Value;
pub const IPrincipal2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProcessTokenSidType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrincipal2,
            p_process_token_sid_type: ?*TASK_PROCESSTOKENSID_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProcessTokenSidType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrincipal2,
            process_token_sid_type: TASK_PROCESSTOKENSID_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequiredPrivilegeCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrincipal2,
            p_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RequiredPrivilege: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IPrincipal2,
            index: i32,
            p_privilege: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddRequiredPrivilege: *const fn (
            self: *const IPrincipal2,
            privilege: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getProcessTokenSidType(self: *const T, p_process_token_sid_type_: ?*TASK_PROCESSTOKENSID_TYPE) HRESULT {
                return @as(*const IPrincipal2.VTable, @ptrCast(self.vtable)).get_ProcessTokenSidType(@as(*const IPrincipal2, @ptrCast(self)), p_process_token_sid_type_);
            }
            pub inline fn putProcessTokenSidType(self: *const T, process_token_sid_type_: TASK_PROCESSTOKENSID_TYPE) HRESULT {
                return @as(*const IPrincipal2.VTable, @ptrCast(self.vtable)).put_ProcessTokenSidType(@as(*const IPrincipal2, @ptrCast(self)), process_token_sid_type_);
            }
            pub inline fn getRequiredPrivilegeCount(self: *const T, p_count_: ?*i32) HRESULT {
                return @as(*const IPrincipal2.VTable, @ptrCast(self.vtable)).get_RequiredPrivilegeCount(@as(*const IPrincipal2, @ptrCast(self)), p_count_);
            }
            pub inline fn getRequiredPrivilege(self: *const T, index_: i32, p_privilege_: ?*?BSTR) HRESULT {
                return @as(*const IPrincipal2.VTable, @ptrCast(self.vtable)).get_RequiredPrivilege(@as(*const IPrincipal2, @ptrCast(self)), index_, p_privilege_);
            }
            pub inline fn addRequiredPrivilege(self: *const T, privilege_: ?BSTR) HRESULT {
                return @as(*const IPrincipal2.VTable, @ptrCast(self.vtable)).AddRequiredPrivilege(@as(*const IPrincipal2, @ptrCast(self)), privilege_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRegistrationInfo_Value = Guid.initString("416d8b73-cb41-4ea1-805c-9be9a5ac4a74");
pub const IID_IRegistrationInfo = &IID_IRegistrationInfo_Value;
pub const IRegistrationInfo = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegistrationInfo,
            p_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Description: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegistrationInfo,
            description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Author: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegistrationInfo,
            p_author: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Author: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegistrationInfo,
            author: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Version: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegistrationInfo,
            p_version: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Version: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegistrationInfo,
            version: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Date: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegistrationInfo,
            p_date: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Date: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegistrationInfo,
            date: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Documentation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegistrationInfo,
            p_documentation: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Documentation: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegistrationInfo,
            documentation: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_XmlText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegistrationInfo,
            p_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_XmlText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegistrationInfo,
            text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_URI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegistrationInfo,
            p_uri: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_URI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegistrationInfo,
            uri: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SecurityDescriptor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegistrationInfo,
            p_sddl: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SecurityDescriptor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegistrationInfo,
            sddl: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Source: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegistrationInfo,
            p_source: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Source: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegistrationInfo,
            source: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDescription(self: *const T, p_description_: ?*?BSTR) HRESULT {
                return @as(*const IRegistrationInfo.VTable, @ptrCast(self.vtable)).get_Description(@as(*const IRegistrationInfo, @ptrCast(self)), p_description_);
            }
            pub inline fn putDescription(self: *const T, description_: ?BSTR) HRESULT {
                return @as(*const IRegistrationInfo.VTable, @ptrCast(self.vtable)).put_Description(@as(*const IRegistrationInfo, @ptrCast(self)), description_);
            }
            pub inline fn getAuthor(self: *const T, p_author_: ?*?BSTR) HRESULT {
                return @as(*const IRegistrationInfo.VTable, @ptrCast(self.vtable)).get_Author(@as(*const IRegistrationInfo, @ptrCast(self)), p_author_);
            }
            pub inline fn putAuthor(self: *const T, author_: ?BSTR) HRESULT {
                return @as(*const IRegistrationInfo.VTable, @ptrCast(self.vtable)).put_Author(@as(*const IRegistrationInfo, @ptrCast(self)), author_);
            }
            pub inline fn getVersion(self: *const T, p_version_: ?*?BSTR) HRESULT {
                return @as(*const IRegistrationInfo.VTable, @ptrCast(self.vtable)).get_Version(@as(*const IRegistrationInfo, @ptrCast(self)), p_version_);
            }
            pub inline fn putVersion(self: *const T, version_: ?BSTR) HRESULT {
                return @as(*const IRegistrationInfo.VTable, @ptrCast(self.vtable)).put_Version(@as(*const IRegistrationInfo, @ptrCast(self)), version_);
            }
            pub inline fn getDate(self: *const T, p_date_: ?*?BSTR) HRESULT {
                return @as(*const IRegistrationInfo.VTable, @ptrCast(self.vtable)).get_Date(@as(*const IRegistrationInfo, @ptrCast(self)), p_date_);
            }
            pub inline fn putDate(self: *const T, date_: ?BSTR) HRESULT {
                return @as(*const IRegistrationInfo.VTable, @ptrCast(self.vtable)).put_Date(@as(*const IRegistrationInfo, @ptrCast(self)), date_);
            }
            pub inline fn getDocumentation(self: *const T, p_documentation_: ?*?BSTR) HRESULT {
                return @as(*const IRegistrationInfo.VTable, @ptrCast(self.vtable)).get_Documentation(@as(*const IRegistrationInfo, @ptrCast(self)), p_documentation_);
            }
            pub inline fn putDocumentation(self: *const T, documentation_: ?BSTR) HRESULT {
                return @as(*const IRegistrationInfo.VTable, @ptrCast(self.vtable)).put_Documentation(@as(*const IRegistrationInfo, @ptrCast(self)), documentation_);
            }
            pub inline fn getXmlText(self: *const T, p_text_: ?*?BSTR) HRESULT {
                return @as(*const IRegistrationInfo.VTable, @ptrCast(self.vtable)).get_XmlText(@as(*const IRegistrationInfo, @ptrCast(self)), p_text_);
            }
            pub inline fn putXmlText(self: *const T, text_: ?BSTR) HRESULT {
                return @as(*const IRegistrationInfo.VTable, @ptrCast(self.vtable)).put_XmlText(@as(*const IRegistrationInfo, @ptrCast(self)), text_);
            }
            pub inline fn getURI(self: *const T, p_uri_: ?*?BSTR) HRESULT {
                return @as(*const IRegistrationInfo.VTable, @ptrCast(self.vtable)).get_URI(@as(*const IRegistrationInfo, @ptrCast(self)), p_uri_);
            }
            pub inline fn putURI(self: *const T, uri_: ?BSTR) HRESULT {
                return @as(*const IRegistrationInfo.VTable, @ptrCast(self.vtable)).put_URI(@as(*const IRegistrationInfo, @ptrCast(self)), uri_);
            }
            pub inline fn getSecurityDescriptor(self: *const T, p_sddl_: ?*VARIANT) HRESULT {
                return @as(*const IRegistrationInfo.VTable, @ptrCast(self.vtable)).get_SecurityDescriptor(@as(*const IRegistrationInfo, @ptrCast(self)), p_sddl_);
            }
            pub inline fn putSecurityDescriptor(self: *const T, sddl_: VARIANT) HRESULT {
                return @as(*const IRegistrationInfo.VTable, @ptrCast(self.vtable)).put_SecurityDescriptor(@as(*const IRegistrationInfo, @ptrCast(self)), sddl_);
            }
            pub inline fn getSource(self: *const T, p_source_: ?*?BSTR) HRESULT {
                return @as(*const IRegistrationInfo.VTable, @ptrCast(self.vtable)).get_Source(@as(*const IRegistrationInfo, @ptrCast(self)), p_source_);
            }
            pub inline fn putSource(self: *const T, source_: ?BSTR) HRESULT {
                return @as(*const IRegistrationInfo.VTable, @ptrCast(self.vtable)).put_Source(@as(*const IRegistrationInfo, @ptrCast(self)), source_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITaskDefinition_Value = Guid.initString("f5bc8fc5-536d-4f77-b852-fbc1356fdeb6");
pub const IID_ITaskDefinition = &IID_ITaskDefinition_Value;
pub const ITaskDefinition = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RegistrationInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskDefinition,
            pp_registration_info: ?*?*IRegistrationInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RegistrationInfo: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskDefinition,
            p_registration_info: ?*IRegistrationInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Triggers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskDefinition,
            pp_triggers: ?*?*ITriggerCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Triggers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskDefinition,
            p_triggers: ?*ITriggerCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Settings: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskDefinition,
            pp_settings: ?*?*ITaskSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Settings: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskDefinition,
            p_settings: ?*ITaskSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Data: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskDefinition,
            p_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Data: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskDefinition,
            data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Principal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskDefinition,
            pp_principal: ?*?*IPrincipal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Principal: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskDefinition,
            p_principal: ?*IPrincipal,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Actions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskDefinition,
            pp_actions: ?*?*IActionCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Actions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskDefinition,
            p_actions: ?*IActionCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_XmlText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskDefinition,
            p_xml: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_XmlText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskDefinition,
            xml: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getRegistrationInfo(self: *const T, pp_registration_info_: ?*?*IRegistrationInfo) HRESULT {
                return @as(*const ITaskDefinition.VTable, @ptrCast(self.vtable)).get_RegistrationInfo(@as(*const ITaskDefinition, @ptrCast(self)), pp_registration_info_);
            }
            pub inline fn putRegistrationInfo(self: *const T, p_registration_info_: ?*IRegistrationInfo) HRESULT {
                return @as(*const ITaskDefinition.VTable, @ptrCast(self.vtable)).put_RegistrationInfo(@as(*const ITaskDefinition, @ptrCast(self)), p_registration_info_);
            }
            pub inline fn getTriggers(self: *const T, pp_triggers_: ?*?*ITriggerCollection) HRESULT {
                return @as(*const ITaskDefinition.VTable, @ptrCast(self.vtable)).get_Triggers(@as(*const ITaskDefinition, @ptrCast(self)), pp_triggers_);
            }
            pub inline fn putTriggers(self: *const T, p_triggers_: ?*ITriggerCollection) HRESULT {
                return @as(*const ITaskDefinition.VTable, @ptrCast(self.vtable)).put_Triggers(@as(*const ITaskDefinition, @ptrCast(self)), p_triggers_);
            }
            pub inline fn getSettings(self: *const T, pp_settings_: ?*?*ITaskSettings) HRESULT {
                return @as(*const ITaskDefinition.VTable, @ptrCast(self.vtable)).get_Settings(@as(*const ITaskDefinition, @ptrCast(self)), pp_settings_);
            }
            pub inline fn putSettings(self: *const T, p_settings_: ?*ITaskSettings) HRESULT {
                return @as(*const ITaskDefinition.VTable, @ptrCast(self.vtable)).put_Settings(@as(*const ITaskDefinition, @ptrCast(self)), p_settings_);
            }
            pub inline fn getData(self: *const T, p_data_: ?*?BSTR) HRESULT {
                return @as(*const ITaskDefinition.VTable, @ptrCast(self.vtable)).get_Data(@as(*const ITaskDefinition, @ptrCast(self)), p_data_);
            }
            pub inline fn putData(self: *const T, data_: ?BSTR) HRESULT {
                return @as(*const ITaskDefinition.VTable, @ptrCast(self.vtable)).put_Data(@as(*const ITaskDefinition, @ptrCast(self)), data_);
            }
            pub inline fn getPrincipal(self: *const T, pp_principal_: ?*?*IPrincipal) HRESULT {
                return @as(*const ITaskDefinition.VTable, @ptrCast(self.vtable)).get_Principal(@as(*const ITaskDefinition, @ptrCast(self)), pp_principal_);
            }
            pub inline fn putPrincipal(self: *const T, p_principal_: ?*IPrincipal) HRESULT {
                return @as(*const ITaskDefinition.VTable, @ptrCast(self.vtable)).put_Principal(@as(*const ITaskDefinition, @ptrCast(self)), p_principal_);
            }
            pub inline fn getActions(self: *const T, pp_actions_: ?*?*IActionCollection) HRESULT {
                return @as(*const ITaskDefinition.VTable, @ptrCast(self.vtable)).get_Actions(@as(*const ITaskDefinition, @ptrCast(self)), pp_actions_);
            }
            pub inline fn putActions(self: *const T, p_actions_: ?*IActionCollection) HRESULT {
                return @as(*const ITaskDefinition.VTable, @ptrCast(self.vtable)).put_Actions(@as(*const ITaskDefinition, @ptrCast(self)), p_actions_);
            }
            pub inline fn getXmlText(self: *const T, p_xml_: ?*?BSTR) HRESULT {
                return @as(*const ITaskDefinition.VTable, @ptrCast(self.vtable)).get_XmlText(@as(*const ITaskDefinition, @ptrCast(self)), p_xml_);
            }
            pub inline fn putXmlText(self: *const T, xml_: ?BSTR) HRESULT {
                return @as(*const ITaskDefinition.VTable, @ptrCast(self.vtable)).put_XmlText(@as(*const ITaskDefinition, @ptrCast(self)), xml_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITaskSettings_Value = Guid.initString("8fd4711d-2d02-4c8c-87e3-eff699de127e");
pub const IID_ITaskSettings = &IID_ITaskSettings_Value;
pub const ITaskSettings = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowDemandStart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            p_allow_demand_start: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowDemandStart: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            allow_demand_start: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RestartInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            p_restart_interval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RestartInterval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            restart_interval: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RestartCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            p_restart_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RestartCount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            restart_count: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MultipleInstances: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            p_policy: ?*TASK_INSTANCES_POLICY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MultipleInstances: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            policy: TASK_INSTANCES_POLICY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StopIfGoingOnBatteries: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            p_stop_if_on_batteries: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StopIfGoingOnBatteries: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            stop_if_on_batteries: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisallowStartIfOnBatteries: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            p_disallow_start: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisallowStartIfOnBatteries: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            disallow_start: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowHardTerminate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            p_allow_hard_terminate: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowHardTerminate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            allow_hard_terminate: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartWhenAvailable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            p_start_when_available: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StartWhenAvailable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            start_when_available: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_XmlText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            p_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_XmlText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RunOnlyIfNetworkAvailable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            p_run_only_if_network_available: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RunOnlyIfNetworkAvailable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            run_only_if_network_available: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ExecutionTimeLimit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            p_execution_time_limit: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ExecutionTimeLimit: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            execution_time_limit: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            p_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DeleteExpiredTaskAfter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            p_expiration_delay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DeleteExpiredTaskAfter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            expiration_delay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            p_priority: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Priority: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            priority: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Compatibility: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            p_compat_level: ?*TASK_COMPATIBILITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Compatibility: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            compat_level: TASK_COMPATIBILITY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Hidden: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            p_hidden: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Hidden: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            hidden: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IdleSettings: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            pp_idle_settings: ?*?*IIdleSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IdleSettings: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            p_idle_settings: ?*IIdleSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RunOnlyIfIdle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            p_run_only_if_idle: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RunOnlyIfIdle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            run_only_if_idle: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WakeToRun: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            p_wake: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WakeToRun: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            wake: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NetworkSettings: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            pp_network_settings: ?*?*INetworkSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NetworkSettings: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings,
            p_network_settings: ?*INetworkSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getAllowDemandStart(self: *const T, p_allow_demand_start_: ?*i16) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).get_AllowDemandStart(@as(*const ITaskSettings, @ptrCast(self)), p_allow_demand_start_);
            }
            pub inline fn putAllowDemandStart(self: *const T, allow_demand_start_: i16) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).put_AllowDemandStart(@as(*const ITaskSettings, @ptrCast(self)), allow_demand_start_);
            }
            pub inline fn getRestartInterval(self: *const T, p_restart_interval_: ?*?BSTR) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).get_RestartInterval(@as(*const ITaskSettings, @ptrCast(self)), p_restart_interval_);
            }
            pub inline fn putRestartInterval(self: *const T, restart_interval_: ?BSTR) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).put_RestartInterval(@as(*const ITaskSettings, @ptrCast(self)), restart_interval_);
            }
            pub inline fn getRestartCount(self: *const T, p_restart_count_: ?*i32) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).get_RestartCount(@as(*const ITaskSettings, @ptrCast(self)), p_restart_count_);
            }
            pub inline fn putRestartCount(self: *const T, restart_count_: i32) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).put_RestartCount(@as(*const ITaskSettings, @ptrCast(self)), restart_count_);
            }
            pub inline fn getMultipleInstances(self: *const T, p_policy_: ?*TASK_INSTANCES_POLICY) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).get_MultipleInstances(@as(*const ITaskSettings, @ptrCast(self)), p_policy_);
            }
            pub inline fn putMultipleInstances(self: *const T, policy_: TASK_INSTANCES_POLICY) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).put_MultipleInstances(@as(*const ITaskSettings, @ptrCast(self)), policy_);
            }
            pub inline fn getStopIfGoingOnBatteries(self: *const T, p_stop_if_on_batteries_: ?*i16) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).get_StopIfGoingOnBatteries(@as(*const ITaskSettings, @ptrCast(self)), p_stop_if_on_batteries_);
            }
            pub inline fn putStopIfGoingOnBatteries(self: *const T, stop_if_on_batteries_: i16) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).put_StopIfGoingOnBatteries(@as(*const ITaskSettings, @ptrCast(self)), stop_if_on_batteries_);
            }
            pub inline fn getDisallowStartIfOnBatteries(self: *const T, p_disallow_start_: ?*i16) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).get_DisallowStartIfOnBatteries(@as(*const ITaskSettings, @ptrCast(self)), p_disallow_start_);
            }
            pub inline fn putDisallowStartIfOnBatteries(self: *const T, disallow_start_: i16) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).put_DisallowStartIfOnBatteries(@as(*const ITaskSettings, @ptrCast(self)), disallow_start_);
            }
            pub inline fn getAllowHardTerminate(self: *const T, p_allow_hard_terminate_: ?*i16) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).get_AllowHardTerminate(@as(*const ITaskSettings, @ptrCast(self)), p_allow_hard_terminate_);
            }
            pub inline fn putAllowHardTerminate(self: *const T, allow_hard_terminate_: i16) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).put_AllowHardTerminate(@as(*const ITaskSettings, @ptrCast(self)), allow_hard_terminate_);
            }
            pub inline fn getStartWhenAvailable(self: *const T, p_start_when_available_: ?*i16) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).get_StartWhenAvailable(@as(*const ITaskSettings, @ptrCast(self)), p_start_when_available_);
            }
            pub inline fn putStartWhenAvailable(self: *const T, start_when_available_: i16) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).put_StartWhenAvailable(@as(*const ITaskSettings, @ptrCast(self)), start_when_available_);
            }
            pub inline fn getXmlText(self: *const T, p_text_: ?*?BSTR) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).get_XmlText(@as(*const ITaskSettings, @ptrCast(self)), p_text_);
            }
            pub inline fn putXmlText(self: *const T, text_: ?BSTR) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).put_XmlText(@as(*const ITaskSettings, @ptrCast(self)), text_);
            }
            pub inline fn getRunOnlyIfNetworkAvailable(self: *const T, p_run_only_if_network_available_: ?*i16) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).get_RunOnlyIfNetworkAvailable(@as(*const ITaskSettings, @ptrCast(self)), p_run_only_if_network_available_);
            }
            pub inline fn putRunOnlyIfNetworkAvailable(self: *const T, run_only_if_network_available_: i16) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).put_RunOnlyIfNetworkAvailable(@as(*const ITaskSettings, @ptrCast(self)), run_only_if_network_available_);
            }
            pub inline fn getExecutionTimeLimit(self: *const T, p_execution_time_limit_: ?*?BSTR) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).get_ExecutionTimeLimit(@as(*const ITaskSettings, @ptrCast(self)), p_execution_time_limit_);
            }
            pub inline fn putExecutionTimeLimit(self: *const T, execution_time_limit_: ?BSTR) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).put_ExecutionTimeLimit(@as(*const ITaskSettings, @ptrCast(self)), execution_time_limit_);
            }
            pub inline fn getEnabled(self: *const T, p_enabled_: ?*i16) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const ITaskSettings, @ptrCast(self)), p_enabled_);
            }
            pub inline fn putEnabled(self: *const T, enabled_: i16) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const ITaskSettings, @ptrCast(self)), enabled_);
            }
            pub inline fn getDeleteExpiredTaskAfter(self: *const T, p_expiration_delay_: ?*?BSTR) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).get_DeleteExpiredTaskAfter(@as(*const ITaskSettings, @ptrCast(self)), p_expiration_delay_);
            }
            pub inline fn putDeleteExpiredTaskAfter(self: *const T, expiration_delay_: ?BSTR) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).put_DeleteExpiredTaskAfter(@as(*const ITaskSettings, @ptrCast(self)), expiration_delay_);
            }
            pub inline fn getPriority(self: *const T, p_priority_: ?*i32) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).get_Priority(@as(*const ITaskSettings, @ptrCast(self)), p_priority_);
            }
            pub inline fn putPriority(self: *const T, priority_: i32) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).put_Priority(@as(*const ITaskSettings, @ptrCast(self)), priority_);
            }
            pub inline fn getCompatibility(self: *const T, p_compat_level_: ?*TASK_COMPATIBILITY) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).get_Compatibility(@as(*const ITaskSettings, @ptrCast(self)), p_compat_level_);
            }
            pub inline fn putCompatibility(self: *const T, compat_level_: TASK_COMPATIBILITY) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).put_Compatibility(@as(*const ITaskSettings, @ptrCast(self)), compat_level_);
            }
            pub inline fn getHidden(self: *const T, p_hidden_: ?*i16) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).get_Hidden(@as(*const ITaskSettings, @ptrCast(self)), p_hidden_);
            }
            pub inline fn putHidden(self: *const T, hidden_: i16) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).put_Hidden(@as(*const ITaskSettings, @ptrCast(self)), hidden_);
            }
            pub inline fn getIdleSettings(self: *const T, pp_idle_settings_: ?*?*IIdleSettings) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).get_IdleSettings(@as(*const ITaskSettings, @ptrCast(self)), pp_idle_settings_);
            }
            pub inline fn putIdleSettings(self: *const T, p_idle_settings_: ?*IIdleSettings) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).put_IdleSettings(@as(*const ITaskSettings, @ptrCast(self)), p_idle_settings_);
            }
            pub inline fn getRunOnlyIfIdle(self: *const T, p_run_only_if_idle_: ?*i16) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).get_RunOnlyIfIdle(@as(*const ITaskSettings, @ptrCast(self)), p_run_only_if_idle_);
            }
            pub inline fn putRunOnlyIfIdle(self: *const T, run_only_if_idle_: i16) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).put_RunOnlyIfIdle(@as(*const ITaskSettings, @ptrCast(self)), run_only_if_idle_);
            }
            pub inline fn getWakeToRun(self: *const T, p_wake_: ?*i16) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).get_WakeToRun(@as(*const ITaskSettings, @ptrCast(self)), p_wake_);
            }
            pub inline fn putWakeToRun(self: *const T, wake_: i16) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).put_WakeToRun(@as(*const ITaskSettings, @ptrCast(self)), wake_);
            }
            pub inline fn getNetworkSettings(self: *const T, pp_network_settings_: ?*?*INetworkSettings) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).get_NetworkSettings(@as(*const ITaskSettings, @ptrCast(self)), pp_network_settings_);
            }
            pub inline fn putNetworkSettings(self: *const T, p_network_settings_: ?*INetworkSettings) HRESULT {
                return @as(*const ITaskSettings.VTable, @ptrCast(self.vtable)).put_NetworkSettings(@as(*const ITaskSettings, @ptrCast(self)), p_network_settings_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ITaskSettings2_Value = Guid.initString("2c05c3f0-6eed-4c05-a15f-ed7d7a98a369");
pub const IID_ITaskSettings2 = &IID_ITaskSettings2_Value;
pub const ITaskSettings2 = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisallowStartOnRemoteAppSession: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings2,
            p_disallow_start: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisallowStartOnRemoteAppSession: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings2,
            disallow_start: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UseUnifiedSchedulingEngine: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings2,
            p_use_unified_engine: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UseUnifiedSchedulingEngine: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings2,
            use_unified_engine: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDisallowStartOnRemoteAppSession(self: *const T, p_disallow_start_: ?*i16) HRESULT {
                return @as(*const ITaskSettings2.VTable, @ptrCast(self.vtable)).get_DisallowStartOnRemoteAppSession(@as(*const ITaskSettings2, @ptrCast(self)), p_disallow_start_);
            }
            pub inline fn putDisallowStartOnRemoteAppSession(self: *const T, disallow_start_: i16) HRESULT {
                return @as(*const ITaskSettings2.VTable, @ptrCast(self.vtable)).put_DisallowStartOnRemoteAppSession(@as(*const ITaskSettings2, @ptrCast(self)), disallow_start_);
            }
            pub inline fn getUseUnifiedSchedulingEngine(self: *const T, p_use_unified_engine_: ?*i16) HRESULT {
                return @as(*const ITaskSettings2.VTable, @ptrCast(self.vtable)).get_UseUnifiedSchedulingEngine(@as(*const ITaskSettings2, @ptrCast(self)), p_use_unified_engine_);
            }
            pub inline fn putUseUnifiedSchedulingEngine(self: *const T, use_unified_engine_: i16) HRESULT {
                return @as(*const ITaskSettings2.VTable, @ptrCast(self.vtable)).put_UseUnifiedSchedulingEngine(@as(*const ITaskSettings2, @ptrCast(self)), use_unified_engine_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ITaskSettings3_Value = Guid.initString("0ad9d0d7-0c7f-4ebb-9a5f-d1c648dca528");
pub const IID_ITaskSettings3 = &IID_ITaskSettings3_Value;
pub const ITaskSettings3 = extern struct {
    pub const VTable = extern struct {
        base: ITaskSettings.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisallowStartOnRemoteAppSession: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings3,
            p_disallow_start: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisallowStartOnRemoteAppSession: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings3,
            disallow_start: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UseUnifiedSchedulingEngine: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings3,
            p_use_unified_engine: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UseUnifiedSchedulingEngine: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings3,
            use_unified_engine: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaintenanceSettings: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings3,
            pp_maintenance_settings: ?*?*IMaintenanceSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaintenanceSettings: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings3,
            p_maintenance_settings: ?*IMaintenanceSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateMaintenanceSettings: *const fn (
            self: *const ITaskSettings3,
            pp_maintenance_settings: ?*?*IMaintenanceSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Volatile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings3,
            p_volatile: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Volatile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskSettings3,
            @"volatile": i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITaskSettings.MethodMixin(T);
            pub inline fn getDisallowStartOnRemoteAppSession(self: *const T, p_disallow_start_: ?*i16) HRESULT {
                return @as(*const ITaskSettings3.VTable, @ptrCast(self.vtable)).get_DisallowStartOnRemoteAppSession(@as(*const ITaskSettings3, @ptrCast(self)), p_disallow_start_);
            }
            pub inline fn putDisallowStartOnRemoteAppSession(self: *const T, disallow_start_: i16) HRESULT {
                return @as(*const ITaskSettings3.VTable, @ptrCast(self.vtable)).put_DisallowStartOnRemoteAppSession(@as(*const ITaskSettings3, @ptrCast(self)), disallow_start_);
            }
            pub inline fn getUseUnifiedSchedulingEngine(self: *const T, p_use_unified_engine_: ?*i16) HRESULT {
                return @as(*const ITaskSettings3.VTable, @ptrCast(self.vtable)).get_UseUnifiedSchedulingEngine(@as(*const ITaskSettings3, @ptrCast(self)), p_use_unified_engine_);
            }
            pub inline fn putUseUnifiedSchedulingEngine(self: *const T, use_unified_engine_: i16) HRESULT {
                return @as(*const ITaskSettings3.VTable, @ptrCast(self.vtable)).put_UseUnifiedSchedulingEngine(@as(*const ITaskSettings3, @ptrCast(self)), use_unified_engine_);
            }
            pub inline fn getMaintenanceSettings(self: *const T, pp_maintenance_settings_: ?*?*IMaintenanceSettings) HRESULT {
                return @as(*const ITaskSettings3.VTable, @ptrCast(self.vtable)).get_MaintenanceSettings(@as(*const ITaskSettings3, @ptrCast(self)), pp_maintenance_settings_);
            }
            pub inline fn putMaintenanceSettings(self: *const T, p_maintenance_settings_: ?*IMaintenanceSettings) HRESULT {
                return @as(*const ITaskSettings3.VTable, @ptrCast(self.vtable)).put_MaintenanceSettings(@as(*const ITaskSettings3, @ptrCast(self)), p_maintenance_settings_);
            }
            pub inline fn createMaintenanceSettings(self: *const T, pp_maintenance_settings_: ?*?*IMaintenanceSettings) HRESULT {
                return @as(*const ITaskSettings3.VTable, @ptrCast(self.vtable)).CreateMaintenanceSettings(@as(*const ITaskSettings3, @ptrCast(self)), pp_maintenance_settings_);
            }
            pub inline fn getVolatile(self: *const T, p_volatile_: ?*i16) HRESULT {
                return @as(*const ITaskSettings3.VTable, @ptrCast(self.vtable)).get_Volatile(@as(*const ITaskSettings3, @ptrCast(self)), p_volatile_);
            }
            pub inline fn putVolatile(self: *const T, volatile_: i16) HRESULT {
                return @as(*const ITaskSettings3.VTable, @ptrCast(self.vtable)).put_Volatile(@as(*const ITaskSettings3, @ptrCast(self)), volatile_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IMaintenanceSettings_Value = Guid.initString("a6024fa8-9652-4adb-a6bf-5cfcd877a7ba");
pub const IID_IMaintenanceSettings = &IID_IMaintenanceSettings_Value;
pub const IMaintenanceSettings = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Period: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMaintenanceSettings,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Period: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMaintenanceSettings,
            target: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Deadline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMaintenanceSettings,
            value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Deadline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMaintenanceSettings,
            target: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Exclusive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMaintenanceSettings,
            value: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Exclusive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IMaintenanceSettings,
            target: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn putPeriod(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IMaintenanceSettings.VTable, @ptrCast(self.vtable)).put_Period(@as(*const IMaintenanceSettings, @ptrCast(self)), value_);
            }
            pub inline fn getPeriod(self: *const T, target_: ?*?BSTR) HRESULT {
                return @as(*const IMaintenanceSettings.VTable, @ptrCast(self.vtable)).get_Period(@as(*const IMaintenanceSettings, @ptrCast(self)), target_);
            }
            pub inline fn putDeadline(self: *const T, value_: ?BSTR) HRESULT {
                return @as(*const IMaintenanceSettings.VTable, @ptrCast(self.vtable)).put_Deadline(@as(*const IMaintenanceSettings, @ptrCast(self)), value_);
            }
            pub inline fn getDeadline(self: *const T, target_: ?*?BSTR) HRESULT {
                return @as(*const IMaintenanceSettings.VTable, @ptrCast(self.vtable)).get_Deadline(@as(*const IMaintenanceSettings, @ptrCast(self)), target_);
            }
            pub inline fn putExclusive(self: *const T, value_: i16) HRESULT {
                return @as(*const IMaintenanceSettings.VTable, @ptrCast(self.vtable)).put_Exclusive(@as(*const IMaintenanceSettings, @ptrCast(self)), value_);
            }
            pub inline fn getExclusive(self: *const T, target_: ?*i16) HRESULT {
                return @as(*const IMaintenanceSettings.VTable, @ptrCast(self.vtable)).get_Exclusive(@as(*const IMaintenanceSettings, @ptrCast(self)), target_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRegisteredTaskCollection_Value = Guid.initString("86627eb4-42a7-41e4-a4d9-ac33a72f2d52");
pub const IID_IRegisteredTaskCollection = &IID_IRegisteredTaskCollection_Value;
pub const IRegisteredTaskCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegisteredTaskCollection,
            p_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegisteredTaskCollection,
            index: VARIANT,
            pp_registered_task: ?*?*IRegisteredTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRegisteredTaskCollection,
            pp_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, p_count_: ?*i32) HRESULT {
                return @as(*const IRegisteredTaskCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IRegisteredTaskCollection, @ptrCast(self)), p_count_);
            }
            pub inline fn getItem(self: *const T, index_: VARIANT, pp_registered_task_: ?*?*IRegisteredTask) HRESULT {
                return @as(*const IRegisteredTaskCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IRegisteredTaskCollection, @ptrCast(self)), index_, pp_registered_task_);
            }
            pub inline fn getNewEnum(self: *const T, pp_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const IRegisteredTaskCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IRegisteredTaskCollection, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ITaskFolder_Value = Guid.initString("8cfac062-a080-4c15-9a88-aa7c2af80dfc");
pub const IID_ITaskFolder = &IID_ITaskFolder_Value;
pub const ITaskFolder = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskFolder,
            p_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITaskFolder,
            p_path: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolder: *const fn (
            self: *const ITaskFolder,
            path: ?BSTR,
            pp_folder: ?*?*ITaskFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFolders: *const fn (
            self: *const ITaskFolder,
            flags: i32,
            pp_folders: ?*?*ITaskFolderCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateFolder: *const fn (
            self: *const ITaskFolder,
            sub_folder_name: ?BSTR,
            sddl: VARIANT,
            pp_folder: ?*?*ITaskFolder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteFolder: *const fn (
            self: *const ITaskFolder,
            sub_folder_name: ?BSTR,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTask: *const fn (
            self: *const ITaskFolder,
            path: ?BSTR,
            pp_task: ?*?*IRegisteredTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTasks: *const fn (
            self: *const ITaskFolder,
            flags: i32,
            pp_tasks: ?*?*IRegisteredTaskCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteTask: *const fn (
            self: *const ITaskFolder,
            name: ?BSTR,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterTask: *const fn (
            self: *const ITaskFolder,
            path: ?BSTR,
            xml_text: ?BSTR,
            flags: i32,
            user_id: VARIANT,
            password: VARIANT,
            logon_type: TASK_LOGON_TYPE,
            sddl: VARIANT,
            pp_task: ?*?*IRegisteredTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterTaskDefinition: *const fn (
            self: *const ITaskFolder,
            path: ?BSTR,
            p_definition: ?*ITaskDefinition,
            flags: i32,
            user_id: VARIANT,
            password: VARIANT,
            logon_type: TASK_LOGON_TYPE,
            sddl: VARIANT,
            pp_task: ?*?*IRegisteredTask,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSecurityDescriptor: *const fn (
            self: *const ITaskFolder,
            security_information: i32,
            p_sddl: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSecurityDescriptor: *const fn (
            self: *const ITaskFolder,
            sddl: ?BSTR,
            flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, p_name_: ?*?BSTR) HRESULT {
                return @as(*const ITaskFolder.VTable, @ptrCast(self.vtable)).get_Name(@as(*const ITaskFolder, @ptrCast(self)), p_name_);
            }
            pub inline fn getPath(self: *const T, p_path_: ?*?BSTR) HRESULT {
                return @as(*const ITaskFolder.VTable, @ptrCast(self.vtable)).get_Path(@as(*const ITaskFolder, @ptrCast(self)), p_path_);
            }
            pub inline fn getFolder(self: *const T, path_: ?BSTR, pp_folder_: ?*?*ITaskFolder) HRESULT {
                return @as(*const ITaskFolder.VTable, @ptrCast(self.vtable)).GetFolder(@as(*const ITaskFolder, @ptrCast(self)), path_, pp_folder_);
            }
            pub inline fn getFolders(self: *const T, flags_: i32, pp_folders_: ?*?*ITaskFolderCollection) HRESULT {
                return @as(*const ITaskFolder.VTable, @ptrCast(self.vtable)).GetFolders(@as(*const ITaskFolder, @ptrCast(self)), flags_, pp_folders_);
            }
            pub inline fn createFolder(self: *const T, sub_folder_name_: ?BSTR, sddl_: VARIANT, pp_folder_: ?*?*ITaskFolder) HRESULT {
                return @as(*const ITaskFolder.VTable, @ptrCast(self.vtable)).CreateFolder(@as(*const ITaskFolder, @ptrCast(self)), sub_folder_name_, sddl_, pp_folder_);
            }
            pub inline fn deleteFolder(self: *const T, sub_folder_name_: ?BSTR, flags_: i32) HRESULT {
                return @as(*const ITaskFolder.VTable, @ptrCast(self.vtable)).DeleteFolder(@as(*const ITaskFolder, @ptrCast(self)), sub_folder_name_, flags_);
            }
            pub inline fn getTask(self: *const T, path_: ?BSTR, pp_task_: ?*?*IRegisteredTask) HRESULT {
                return @as(*const ITaskFolder.VTable, @ptrCast(self.vtable)).GetTask(@as(*const ITaskFolder, @ptrCast(self)), path_, pp_task_);
            }
            pub inline fn getTasks(self: *const T, flags_: i32, pp_tasks_: ?*?*IRegisteredTaskCollection) HRESULT {
                return @as(*const ITaskFolder.VTable, @ptrCast(self.vtable)).GetTasks(@as(*const ITaskFolder, @ptrCast(self)), flags_, pp_tasks_);
            }
            pub inline fn deleteTask(self: *const T, name_: ?BSTR, flags_: i32) HRESULT {
                return @as(*const ITaskFolder.VTable, @ptrCast(self.vtable)).DeleteTask(@as(*const ITaskFolder, @ptrCast(self)), name_, flags_);
            }
            pub inline fn registerTask(self: *const T, path_: ?BSTR, xml_text_: ?BSTR, flags_: i32, user_id_: VARIANT, password_: VARIANT, logon_type_: TASK_LOGON_TYPE, sddl_: VARIANT, pp_task_: ?*?*IRegisteredTask) HRESULT {
                return @as(*const ITaskFolder.VTable, @ptrCast(self.vtable)).RegisterTask(@as(*const ITaskFolder, @ptrCast(self)), path_, xml_text_, flags_, user_id_, password_, logon_type_, sddl_, pp_task_);
            }
            pub inline fn registerTaskDefinition(self: *const T, path_: ?BSTR, p_definition_: ?*ITaskDefinition, flags_: i32, user_id_: VARIANT, password_: VARIANT, logon_type_: TASK_LOGON_TYPE, sddl_: VARIANT, pp_task_: ?*?*IRegisteredTask) HRESULT {
                return @as(*const ITaskFolder.VTable, @ptrCast(self.vtable)).RegisterTaskDefinition(@as(*const ITaskFolder, @ptrCast(self)), path_, p_definition_, flags_, user_id_, password_, logon_type_, sddl_, pp_task_);
            }
            pub inline fn getSecurityDescriptor(self: *const T, security_information_: i32, p_sddl_: ?*?BSTR) HRESULT {
                return @as(*const ITaskFolder.VTable, @ptrCast(self.vtable)).GetSecurityDescriptor(@as(*const ITaskFolder, @ptrCast(self)), security_information_, p_sddl_);
            }
            pub inline fn setSecurityDescriptor(self: *const T, sddl_: ?BSTR, flags_: i32) HRESULT {
                return @as(*const ITaskFolder.VTable, @ptrCast(self.vtable)).SetSecurityDescriptor(@as(*const ITaskFolder, @ptrCast(self)), sddl_, flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IIdleSettings_Value = Guid.initString("84594461-0053-4342-a8fd-088fabf11f32");
pub const IID_IIdleSettings = &IID_IIdleSettings_Value;
pub const IIdleSettings = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IdleDuration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IIdleSettings,
            p_delay: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IdleDuration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IIdleSettings,
            delay: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WaitTimeout: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IIdleSettings,
            p_timeout: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_WaitTimeout: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IIdleSettings,
            timeout: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StopOnIdleEnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IIdleSettings,
            p_stop: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StopOnIdleEnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IIdleSettings,
            stop: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RestartOnIdle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IIdleSettings,
            p_restart: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RestartOnIdle: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IIdleSettings,
            restart: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getIdleDuration(self: *const T, p_delay_: ?*?BSTR) HRESULT {
                return @as(*const IIdleSettings.VTable, @ptrCast(self.vtable)).get_IdleDuration(@as(*const IIdleSettings, @ptrCast(self)), p_delay_);
            }
            pub inline fn putIdleDuration(self: *const T, delay_: ?BSTR) HRESULT {
                return @as(*const IIdleSettings.VTable, @ptrCast(self.vtable)).put_IdleDuration(@as(*const IIdleSettings, @ptrCast(self)), delay_);
            }
            pub inline fn getWaitTimeout(self: *const T, p_timeout_: ?*?BSTR) HRESULT {
                return @as(*const IIdleSettings.VTable, @ptrCast(self.vtable)).get_WaitTimeout(@as(*const IIdleSettings, @ptrCast(self)), p_timeout_);
            }
            pub inline fn putWaitTimeout(self: *const T, timeout_: ?BSTR) HRESULT {
                return @as(*const IIdleSettings.VTable, @ptrCast(self.vtable)).put_WaitTimeout(@as(*const IIdleSettings, @ptrCast(self)), timeout_);
            }
            pub inline fn getStopOnIdleEnd(self: *const T, p_stop_: ?*i16) HRESULT {
                return @as(*const IIdleSettings.VTable, @ptrCast(self.vtable)).get_StopOnIdleEnd(@as(*const IIdleSettings, @ptrCast(self)), p_stop_);
            }
            pub inline fn putStopOnIdleEnd(self: *const T, stop_: i16) HRESULT {
                return @as(*const IIdleSettings.VTable, @ptrCast(self.vtable)).put_StopOnIdleEnd(@as(*const IIdleSettings, @ptrCast(self)), stop_);
            }
            pub inline fn getRestartOnIdle(self: *const T, p_restart_: ?*i16) HRESULT {
                return @as(*const IIdleSettings.VTable, @ptrCast(self.vtable)).get_RestartOnIdle(@as(*const IIdleSettings, @ptrCast(self)), p_restart_);
            }
            pub inline fn putRestartOnIdle(self: *const T, restart_: i16) HRESULT {
                return @as(*const IIdleSettings.VTable, @ptrCast(self.vtable)).put_RestartOnIdle(@as(*const IIdleSettings, @ptrCast(self)), restart_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INetworkSettings_Value = Guid.initString("9f7dea84-c30b-4245-80b6-00e9f646f1b4");
pub const IID_INetworkSettings = &IID_INetworkSettings_Value;
pub const INetworkSettings = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetworkSettings,
            p_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetworkSettings,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetworkSettings,
            p_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Id: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const INetworkSettings,
            id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, p_name_: ?*?BSTR) HRESULT {
                return @as(*const INetworkSettings.VTable, @ptrCast(self.vtable)).get_Name(@as(*const INetworkSettings, @ptrCast(self)), p_name_);
            }
            pub inline fn putName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const INetworkSettings.VTable, @ptrCast(self.vtable)).put_Name(@as(*const INetworkSettings, @ptrCast(self)), name_);
            }
            pub inline fn getId(self: *const T, p_id_: ?*?BSTR) HRESULT {
                return @as(*const INetworkSettings.VTable, @ptrCast(self.vtable)).get_Id(@as(*const INetworkSettings, @ptrCast(self)), p_id_);
            }
            pub inline fn putId(self: *const T, id_: ?BSTR) HRESULT {
                return @as(*const INetworkSettings.VTable, @ptrCast(self.vtable)).put_Id(@as(*const INetworkSettings, @ptrCast(self)), id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRepetitionPattern_Value = Guid.initString("7fb9acf1-26be-400e-85b5-294b9c75dfd6");
pub const IID_IRepetitionPattern = &IID_IRepetitionPattern_Value;
pub const IRepetitionPattern = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Interval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRepetitionPattern,
            p_interval: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Interval: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRepetitionPattern,
            interval: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Duration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRepetitionPattern,
            p_duration: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Duration: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRepetitionPattern,
            duration: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StopAtDurationEnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRepetitionPattern,
            p_stop: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StopAtDurationEnd: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRepetitionPattern,
            stop: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getInterval(self: *const T, p_interval_: ?*?BSTR) HRESULT {
                return @as(*const IRepetitionPattern.VTable, @ptrCast(self.vtable)).get_Interval(@as(*const IRepetitionPattern, @ptrCast(self)), p_interval_);
            }
            pub inline fn putInterval(self: *const T, interval_: ?BSTR) HRESULT {
                return @as(*const IRepetitionPattern.VTable, @ptrCast(self.vtable)).put_Interval(@as(*const IRepetitionPattern, @ptrCast(self)), interval_);
            }
            pub inline fn getDuration(self: *const T, p_duration_: ?*?BSTR) HRESULT {
                return @as(*const IRepetitionPattern.VTable, @ptrCast(self.vtable)).get_Duration(@as(*const IRepetitionPattern, @ptrCast(self)), p_duration_);
            }
            pub inline fn putDuration(self: *const T, duration_: ?BSTR) HRESULT {
                return @as(*const IRepetitionPattern.VTable, @ptrCast(self.vtable)).put_Duration(@as(*const IRepetitionPattern, @ptrCast(self)), duration_);
            }
            pub inline fn getStopAtDurationEnd(self: *const T, p_stop_: ?*i16) HRESULT {
                return @as(*const IRepetitionPattern.VTable, @ptrCast(self.vtable)).get_StopAtDurationEnd(@as(*const IRepetitionPattern, @ptrCast(self)), p_stop_);
            }
            pub inline fn putStopAtDurationEnd(self: *const T, stop_: i16) HRESULT {
                return @as(*const IRepetitionPattern.VTable, @ptrCast(self.vtable)).put_StopAtDurationEnd(@as(*const IRepetitionPattern, @ptrCast(self)), stop_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (12)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const HPROPSHEETPAGE = @import("../ui/controls.zig").HPROPSHEETPAGE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IDispatch = @import("../system/com.zig").IDispatch;
const IUnknown = @import("../system/com.zig").IUnknown;
const PWSTR = @import("../foundation.zig").PWSTR;
const SAFEARRAY = @import("../system/com.zig").SAFEARRAY;
const SYSTEMTIME = @import("../foundation.zig").SYSTEMTIME;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
