//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (16)
//--------------------------------------------------------------------------------
pub const ENCLAVE_RUNTIME_POLICY_ALLOW_FULL_DEBUG = @as(u32, 1);
pub const ENCLAVE_RUNTIME_POLICY_ALLOW_DYNAMIC_DEBUG = @as(u32, 2);
pub const ENCLAVE_UNSEAL_FLAG_STALE_KEY = @as(u32, 1);
pub const ENCLAVE_FLAG_FULL_DEBUG_ENABLED = @as(u32, 1);
pub const ENCLAVE_FLAG_DYNAMIC_DEBUG_ENABLED = @as(u32, 2);
pub const ENCLAVE_FLAG_DYNAMIC_DEBUG_ACTIVE = @as(u32, 4);
pub const VBS_ENCLAVE_REPORT_PKG_HEADER_VERSION_CURRENT = @as(u32, 1);
pub const VBS_ENCLAVE_REPORT_SIGNATURE_SCHEME_SHA256_RSA_PSS_SHA256 = @as(u32, 1);
pub const VBS_ENCLAVE_REPORT_VERSION_CURRENT = @as(u32, 1);
pub const ENCLAVE_REPORT_DATA_LENGTH = @as(u32, 64);
pub const VBS_ENCLAVE_VARDATA_INVALID = @as(u32, 0);
pub const VBS_ENCLAVE_VARDATA_MODULE = @as(u32, 1);
pub const ENCLAVE_VBS_BASIC_KEY_FLAG_MEASUREMENT = @as(u32, 1);
pub const ENCLAVE_VBS_BASIC_KEY_FLAG_FAMILY_ID = @as(u32, 2);
pub const ENCLAVE_VBS_BASIC_KEY_FLAG_IMAGE_ID = @as(u32, 4);
pub const ENCLAVE_VBS_BASIC_KEY_FLAG_DEBUG_KEY = @as(u32, 8);

//--------------------------------------------------------------------------------
// Section: Types (29)
//--------------------------------------------------------------------------------
pub const ENCLAVE_SEALING_IDENTITY_POLICY = enum(i32) {
    INVALID = 0,
    EXACT_CODE = 1,
    SAME_PRIMARY_CODE = 2,
    SAME_IMAGE = 3,
    SAME_FAMILY = 4,
    SAME_AUTHOR = 5,
};
pub const ENCLAVE_IDENTITY_POLICY_SEAL_INVALID = ENCLAVE_SEALING_IDENTITY_POLICY.INVALID;
pub const ENCLAVE_IDENTITY_POLICY_SEAL_EXACT_CODE = ENCLAVE_SEALING_IDENTITY_POLICY.EXACT_CODE;
pub const ENCLAVE_IDENTITY_POLICY_SEAL_SAME_PRIMARY_CODE = ENCLAVE_SEALING_IDENTITY_POLICY.SAME_PRIMARY_CODE;
pub const ENCLAVE_IDENTITY_POLICY_SEAL_SAME_IMAGE = ENCLAVE_SEALING_IDENTITY_POLICY.SAME_IMAGE;
pub const ENCLAVE_IDENTITY_POLICY_SEAL_SAME_FAMILY = ENCLAVE_SEALING_IDENTITY_POLICY.SAME_FAMILY;
pub const ENCLAVE_IDENTITY_POLICY_SEAL_SAME_AUTHOR = ENCLAVE_SEALING_IDENTITY_POLICY.SAME_AUTHOR;

pub const ENCLAVE_IDENTITY = extern struct {
    OwnerId: [32]u8 align(1),
    UniqueId: [32]u8 align(1),
    AuthorId: [32]u8 align(1),
    FamilyId: [16]u8 align(1),
    ImageId: [16]u8 align(1),
    EnclaveSvn: u32 align(1),
    SecureKernelSvn: u32 align(1),
    PlatformSvn: u32 align(1),
    Flags: u32 align(1),
    SigningLevel: u32 align(1),
    EnclaveType: u32 align(1),
};

pub const VBS_ENCLAVE_REPORT_PKG_HEADER = extern struct {
    PackageSize: u32 align(1),
    Version: u32 align(1),
    SignatureScheme: u32 align(1),
    SignedStatementSize: u32 align(1),
    SignatureSize: u32 align(1),
    Reserved: u32 align(1),
};

pub const VBS_ENCLAVE_REPORT = extern struct {
    ReportSize: u32 align(1),
    ReportVersion: u32 align(1),
    EnclaveData: [64]u8 align(1),
    EnclaveIdentity: ENCLAVE_IDENTITY align(1),
};

pub const VBS_ENCLAVE_REPORT_VARDATA_HEADER = extern struct {
    DataType: u32 align(1),
    Size: u32 align(1),
};

pub const VBS_ENCLAVE_REPORT_MODULE = extern struct {
    Header: VBS_ENCLAVE_REPORT_VARDATA_HEADER align(1),
    UniqueId: [32]u8 align(1),
    AuthorId: [32]u8 align(1),
    FamilyId: [16]u8 align(1),
    ImageId: [16]u8 align(1),
    Svn: u32 align(1),
    ModuleName: [1]u16 align(1),
};

pub const ENCLAVE_INFORMATION = extern struct {
    EnclaveType: u32,
    Reserved: u32,
    BaseAddress: ?*anyopaque,
    Size: usize,
    Identity: ENCLAVE_IDENTITY,
};

pub const VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR32 = extern struct {
    ThreadContext: [4]u32,
    EntryPoint: u32,
    StackPointer: u32,
    ExceptionEntryPoint: u32,
    ExceptionStack: u32,
    ExceptionActive: u32,
};

pub const VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR64 = extern struct {
    ThreadContext: [4]u64,
    EntryPoint: u64,
    StackPointer: u64,
    ExceptionEntryPoint: u64,
    ExceptionStack: u64,
    ExceptionActive: u32,
};

pub const VBS_BASIC_ENCLAVE_EXCEPTION_AMD64 = extern struct {
    ExceptionCode: u32,
    NumberParameters: u32,
    ExceptionInformation: [3]usize,
    ExceptionRAX: usize,
    ExceptionRCX: usize,
    ExceptionRIP: usize,
    ExceptionRFLAGS: usize,
    ExceptionRSP: usize,
};

pub const VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_ENCLAVE = *const fn (
    return_value: usize,
) callconv(@import("std").os.windows.WINAPI) void;

pub const VBS_BASIC_ENCLAVE_BASIC_CALL_COMMIT_PAGES = *const fn (
    enclave_address: ?*anyopaque,
    number_of_bytes: usize,
    source_address: ?*anyopaque,
    page_protection: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const VBS_BASIC_ENCLAVE_BASIC_CALL_DECOMMIT_PAGES = *const fn (
    enclave_address: ?*anyopaque,
    number_of_bytes: usize,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const VBS_BASIC_ENCLAVE_BASIC_CALL_PROTECT_PAGES = *const fn (
    enclave_address: ?*anyopaque,
    number_ofytes: usize,
    page_protection: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const VBS_BASIC_ENCLAVE_BASIC_CALL_GET_ENCLAVE_INFORMATION = *const fn (
    enclave_info: ?*ENCLAVE_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const ENCLAVE_VBS_BASIC_KEY_REQUEST = extern struct {
    RequestSize: u32,
    Flags: u32,
    EnclaveSVN: u32,
    SystemKeyID: u32,
    CurrentSystemKeyID: u32,
};

pub const VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_KEY = *const fn (
    key_request: ?*ENCLAVE_VBS_BASIC_KEY_REQUEST,
    requested_key_size: u32,
    returned_key: [*:0]u8,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_REPORT = *const fn (
    enclave_data: ?*const u8,
    // TODO: what to do with BytesParamIndex 2?
    report: ?*anyopaque,
    buffer_size: u32,
    output_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const VBS_BASIC_ENCLAVE_BASIC_CALL_VERIFY_REPORT = *const fn (
    // TODO: what to do with BytesParamIndex 1?
    report: ?*const anyopaque,
    report_size: u32,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_RANDOM_DATA = *const fn (
    // TODO: what to do with BytesParamIndex 1?
    buffer: ?*u8,
    number_of_bytes: u32,
    generation: ?*u64,
) callconv(@import("std").os.windows.WINAPI) i32;

pub const VBS_BASIC_ENCLAVE_SYSCALL_PAGE = extern struct {
    ReturnFromEnclave: ?VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_ENCLAVE,
    ReturnFromException: ?VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_EXCEPTION,
    TerminateThread: ?VBS_BASIC_ENCLAVE_BASIC_CALL_TERMINATE_THREAD,
    InterruptThread: ?VBS_BASIC_ENCLAVE_BASIC_CALL_INTERRUPT_THREAD,
    CommitPages: ?VBS_BASIC_ENCLAVE_BASIC_CALL_COMMIT_PAGES,
    DecommitPages: ?VBS_BASIC_ENCLAVE_BASIC_CALL_DECOMMIT_PAGES,
    ProtectPages: ?VBS_BASIC_ENCLAVE_BASIC_CALL_PROTECT_PAGES,
    CreateThread: ?VBS_BASIC_ENCLAVE_BASIC_CALL_CREATE_THREAD,
    GetEnclaveInformation: ?VBS_BASIC_ENCLAVE_BASIC_CALL_GET_ENCLAVE_INFORMATION,
    GenerateKey: ?VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_KEY,
    GenerateReport: ?VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_REPORT,
    VerifyReport: ?VBS_BASIC_ENCLAVE_BASIC_CALL_VERIFY_REPORT,
    GenerateRandomData: ?VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_RANDOM_DATA,
};

pub const VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_EXCEPTION = switch (@import("../zig.zig").arch) {
    .X64 => *const fn (
        exception_record: ?*VBS_BASIC_ENCLAVE_EXCEPTION_AMD64,
    ) callconv(@import("std").os.windows.WINAPI) i32,
    .X86, .Arm64 => *const fn (
        exception_record: ?*anyopaque,
    ) callconv(@import("std").os.windows.WINAPI) i32,
};
pub const VBS_BASIC_ENCLAVE_BASIC_CALL_TERMINATE_THREAD = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => *const fn (
        thread_descriptor: ?*VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR64,
    ) callconv(@import("std").os.windows.WINAPI) i32,
    .X86 => *const fn (
        thread_descriptor: ?*VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR32,
    ) callconv(@import("std").os.windows.WINAPI) i32,
};
pub const VBS_BASIC_ENCLAVE_BASIC_CALL_INTERRUPT_THREAD = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => *const fn (
        thread_descriptor: ?*VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR64,
    ) callconv(@import("std").os.windows.WINAPI) i32,
    .X86 => *const fn (
        thread_descriptor: ?*VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR32,
    ) callconv(@import("std").os.windows.WINAPI) i32,
};
pub const VBS_BASIC_ENCLAVE_BASIC_CALL_CREATE_THREAD = switch (@import("../zig.zig").arch) {
    .X64, .Arm64 => *const fn (
        thread_descriptor: ?*VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR64,
    ) callconv(@import("std").os.windows.WINAPI) i32,
    .X86 => *const fn (
        thread_descriptor: ?*VBS_BASIC_ENCLAVE_THREAD_DESCRIPTOR32,
    ) callconv(@import("std").os.windows.WINAPI) i32,
};

//--------------------------------------------------------------------------------
// Section: Functions (37)
//--------------------------------------------------------------------------------
pub extern "kernel32" fn SetEnvironmentStringsW(
    new_environment: ?[*]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn GetCommandLineA() callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn GetCommandLineW() callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn GetEnvironmentStrings() callconv(@import("std").os.windows.WINAPI) ?PSTR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn GetEnvironmentStringsW() callconv(@import("std").os.windows.WINAPI) ?PWSTR;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn FreeEnvironmentStringsA(
    penv: ?[*]u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn FreeEnvironmentStringsW(
    penv: ?[*]u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn GetEnvironmentVariableA(
    lp_name: ?[*:0]const u8,
    lp_buffer: ?[*:0]u8,
    n_size: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn GetEnvironmentVariableW(
    lp_name: ?[*:0]const u16,
    lp_buffer: ?[*:0]u16,
    n_size: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn SetEnvironmentVariableA(
    lp_name: ?[*:0]const u8,
    lp_value: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.1.2600'
pub extern "kernel32" fn SetEnvironmentVariableW(
    lp_name: ?[*:0]const u16,
    lp_value: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn ExpandEnvironmentStringsA(
    lp_src: ?[*:0]const u8,
    lp_dst: ?[*:0]u8,
    n_size: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows5.0'
pub extern "kernel32" fn ExpandEnvironmentStringsW(
    lp_src: ?[*:0]const u16,
    lp_dst: ?[*:0]u16,
    n_size: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "kernel32" fn SetCurrentDirectoryA(
    lp_path_name: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "kernel32" fn SetCurrentDirectoryW(
    lp_path_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "kernel32" fn GetCurrentDirectoryA(
    n_buffer_length: u32,
    lp_buffer: ?[*:0]u8,
) callconv(@import("std").os.windows.WINAPI) u32;

pub extern "kernel32" fn GetCurrentDirectoryW(
    n_buffer_length: u32,
    lp_buffer: ?[*:0]u16,
) callconv(@import("std").os.windows.WINAPI) u32;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "kernel32" fn NeedCurrentDirectoryForExePathA(
    exe_name: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "kernel32" fn NeedCurrentDirectoryForExePathW(
    exe_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn CreateEnvironmentBlock(
    lp_environment: ?*?*anyopaque,
    h_token: ?HANDLE,
    b_inherit: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn DestroyEnvironmentBlock(
    lp_environment: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn ExpandEnvironmentStringsForUserA(
    h_token: ?HANDLE,
    lp_src: ?[*:0]const u8,
    lp_dest: [*:0]u8,
    dw_size: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows5.0'
pub extern "userenv" fn ExpandEnvironmentStringsForUserW(
    h_token: ?HANDLE,
    lp_src: ?[*:0]const u16,
    lp_dest: [*:0]u16,
    dw_size: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "kernel32" fn IsEnclaveTypeSupported(
    fl_enclave_type: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "kernel32" fn CreateEnclave(
    h_process: ?HANDLE,
    lp_address: ?*anyopaque,
    dw_size: usize,
    dw_initial_commitment: usize,
    fl_enclave_type: u32,
    // TODO: what to do with BytesParamIndex 6?
    lp_enclave_information: ?*const anyopaque,
    dw_info_length: u32,
    lp_enclave_error: ?*u32,
) callconv(@import("std").os.windows.WINAPI) ?*anyopaque;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "kernel32" fn LoadEnclaveData(
    h_process: ?HANDLE,
    lp_address: ?*anyopaque,
    // TODO: what to do with BytesParamIndex 3?
    lp_buffer: ?*const anyopaque,
    n_size: usize,
    fl_protect: u32,
    // TODO: what to do with BytesParamIndex 6?
    lp_page_information: ?*const anyopaque,
    dw_info_length: u32,
    lp_number_of_bytes_written: ?*usize,
    lp_enclave_error: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows10.0.10240'
pub extern "kernel32" fn InitializeEnclave(
    h_process: ?HANDLE,
    lp_address: ?*anyopaque,
    // TODO: what to do with BytesParamIndex 3?
    lp_enclave_information: ?*const anyopaque,
    dw_info_length: u32,
    lp_enclave_error: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

pub extern "api-ms-win-core-enclave-l1-1-1" fn LoadEnclaveImageA(
    lp_enclave_address: ?*anyopaque,
    lp_image_name: ?[*:0]const u8,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows10.0.16299'
pub extern "api-ms-win-core-enclave-l1-1-1" fn LoadEnclaveImageW(
    lp_enclave_address: ?*anyopaque,
    lp_image_name: ?[*:0]const u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows10.0.16299'
pub extern "vertdll" fn CallEnclave(
    lp_routine: isize,
    lp_parameter: ?*anyopaque,
    f_wait_for_thread: BOOL,
    lp_return_value: ?*?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows10.0.16299'
pub extern "vertdll" fn TerminateEnclave(
    lp_address: ?*anyopaque,
    f_wait: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows10.0.16299'
pub extern "api-ms-win-core-enclave-l1-1-1" fn DeleteEnclave(
    lp_address: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows10.0.16299'
pub extern "vertdll" fn EnclaveGetAttestationReport(
    enclave_data: ?*const u8,
    // TODO: what to do with BytesParamIndex 2?
    report: ?*anyopaque,
    buffer_size: u32,
    output_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.16299'
pub extern "vertdll" fn EnclaveVerifyAttestationReport(
    enclave_type: u32,
    // TODO: what to do with BytesParamIndex 2?
    report: ?*const anyopaque,
    report_size: u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.16299'
pub extern "vertdll" fn EnclaveSealData(
    // TODO: what to do with BytesParamIndex 1?
    data_to_encrypt: ?*const anyopaque,
    data_to_encrypt_size: u32,
    identity_policy: ENCLAVE_SEALING_IDENTITY_POLICY,
    runtime_policy: u32,
    // TODO: what to do with BytesParamIndex 5?
    protected_blob: ?*anyopaque,
    buffer_size: u32,
    protected_blob_size: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.16299'
pub extern "vertdll" fn EnclaveUnsealData(
    // TODO: what to do with BytesParamIndex 1?
    protected_blob: ?*const anyopaque,
    protected_blob_size: u32,
    // TODO: what to do with BytesParamIndex 3?
    decrypted_data: ?*anyopaque,
    buffer_size: u32,
    decrypted_data_size: ?*u32,
    sealing_identity: ?*ENCLAVE_IDENTITY,
    unsealing_flags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows10.0.16299'
pub extern "vertdll" fn EnclaveGetEnclaveInformation(
    information_size: u32,
    // TODO: what to do with BytesParamIndex 0?
    enclave_information: ?*ENCLAVE_INFORMATION,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (10)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const GetCommandLine = thismodule.GetCommandLineA;
        pub const FreeEnvironmentStrings = thismodule.FreeEnvironmentStringsA;
        pub const GetEnvironmentVariable = thismodule.GetEnvironmentVariableA;
        pub const SetEnvironmentVariable = thismodule.SetEnvironmentVariableA;
        pub const ExpandEnvironmentStrings = thismodule.ExpandEnvironmentStringsA;
        pub const SetCurrentDirectory = thismodule.SetCurrentDirectoryA;
        pub const GetCurrentDirectory = thismodule.GetCurrentDirectoryA;
        pub const NeedCurrentDirectoryForExePath = thismodule.NeedCurrentDirectoryForExePathA;
        pub const ExpandEnvironmentStringsForUser = thismodule.ExpandEnvironmentStringsForUserA;
        pub const LoadEnclaveImage = thismodule.LoadEnclaveImageA;
    },
    .wide => struct {
        pub const GetCommandLine = thismodule.GetCommandLineW;
        pub const FreeEnvironmentStrings = thismodule.FreeEnvironmentStringsW;
        pub const GetEnvironmentVariable = thismodule.GetEnvironmentVariableW;
        pub const SetEnvironmentVariable = thismodule.SetEnvironmentVariableW;
        pub const ExpandEnvironmentStrings = thismodule.ExpandEnvironmentStringsW;
        pub const SetCurrentDirectory = thismodule.SetCurrentDirectoryW;
        pub const GetCurrentDirectory = thismodule.GetCurrentDirectoryW;
        pub const NeedCurrentDirectoryForExePath = thismodule.NeedCurrentDirectoryForExePathW;
        pub const ExpandEnvironmentStringsForUser = thismodule.ExpandEnvironmentStringsForUserW;
        pub const LoadEnclaveImage = thismodule.LoadEnclaveImageW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const GetCommandLine = *opaque {};
        pub const FreeEnvironmentStrings = *opaque {};
        pub const GetEnvironmentVariable = *opaque {};
        pub const SetEnvironmentVariable = *opaque {};
        pub const ExpandEnvironmentStrings = *opaque {};
        pub const SetCurrentDirectory = *opaque {};
        pub const GetCurrentDirectory = *opaque {};
        pub const NeedCurrentDirectoryForExePath = *opaque {};
        pub const ExpandEnvironmentStringsForUser = *opaque {};
        pub const LoadEnclaveImage = *opaque {};
    } else struct {
        pub const GetCommandLine = @compileError("'GetCommandLine' requires that UNICODE be set to true or false in the root module");
        pub const FreeEnvironmentStrings = @compileError("'FreeEnvironmentStrings' requires that UNICODE be set to true or false in the root module");
        pub const GetEnvironmentVariable = @compileError("'GetEnvironmentVariable' requires that UNICODE be set to true or false in the root module");
        pub const SetEnvironmentVariable = @compileError("'SetEnvironmentVariable' requires that UNICODE be set to true or false in the root module");
        pub const ExpandEnvironmentStrings = @compileError("'ExpandEnvironmentStrings' requires that UNICODE be set to true or false in the root module");
        pub const SetCurrentDirectory = @compileError("'SetCurrentDirectory' requires that UNICODE be set to true or false in the root module");
        pub const GetCurrentDirectory = @compileError("'GetCurrentDirectory' requires that UNICODE be set to true or false in the root module");
        pub const NeedCurrentDirectoryForExePath = @compileError("'NeedCurrentDirectoryForExePath' requires that UNICODE be set to true or false in the root module");
        pub const ExpandEnvironmentStringsForUser = @compileError("'ExpandEnvironmentStringsForUser' requires that UNICODE be set to true or false in the root module");
        pub const LoadEnclaveImage = @compileError("'LoadEnclaveImage' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (5)
//--------------------------------------------------------------------------------
const BOOL = @import("../foundation.zig").BOOL;
const HANDLE = @import("../foundation.zig").HANDLE;
const HRESULT = @import("../foundation.zig").HRESULT;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_ENCLAVE")) {
        _ = VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_ENCLAVE;
    }
    if (@hasDecl(@This(), "VBS_BASIC_ENCLAVE_BASIC_CALL_COMMIT_PAGES")) {
        _ = VBS_BASIC_ENCLAVE_BASIC_CALL_COMMIT_PAGES;
    }
    if (@hasDecl(@This(), "VBS_BASIC_ENCLAVE_BASIC_CALL_DECOMMIT_PAGES")) {
        _ = VBS_BASIC_ENCLAVE_BASIC_CALL_DECOMMIT_PAGES;
    }
    if (@hasDecl(@This(), "VBS_BASIC_ENCLAVE_BASIC_CALL_PROTECT_PAGES")) {
        _ = VBS_BASIC_ENCLAVE_BASIC_CALL_PROTECT_PAGES;
    }
    if (@hasDecl(@This(), "VBS_BASIC_ENCLAVE_BASIC_CALL_GET_ENCLAVE_INFORMATION")) {
        _ = VBS_BASIC_ENCLAVE_BASIC_CALL_GET_ENCLAVE_INFORMATION;
    }
    if (@hasDecl(@This(), "VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_KEY")) {
        _ = VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_KEY;
    }
    if (@hasDecl(@This(), "VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_REPORT")) {
        _ = VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_REPORT;
    }
    if (@hasDecl(@This(), "VBS_BASIC_ENCLAVE_BASIC_CALL_VERIFY_REPORT")) {
        _ = VBS_BASIC_ENCLAVE_BASIC_CALL_VERIFY_REPORT;
    }
    if (@hasDecl(@This(), "VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_RANDOM_DATA")) {
        _ = VBS_BASIC_ENCLAVE_BASIC_CALL_GENERATE_RANDOM_DATA;
    }
    if (@hasDecl(@This(), "VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_EXCEPTION")) {
        _ = VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_EXCEPTION;
    }
    if (@hasDecl(@This(), "VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_EXCEPTION")) {
        _ = VBS_BASIC_ENCLAVE_BASIC_CALL_RETURN_FROM_EXCEPTION;
    }
    if (@hasDecl(@This(), "VBS_BASIC_ENCLAVE_BASIC_CALL_TERMINATE_THREAD")) {
        _ = VBS_BASIC_ENCLAVE_BASIC_CALL_TERMINATE_THREAD;
    }
    if (@hasDecl(@This(), "VBS_BASIC_ENCLAVE_BASIC_CALL_TERMINATE_THREAD")) {
        _ = VBS_BASIC_ENCLAVE_BASIC_CALL_TERMINATE_THREAD;
    }
    if (@hasDecl(@This(), "VBS_BASIC_ENCLAVE_BASIC_CALL_INTERRUPT_THREAD")) {
        _ = VBS_BASIC_ENCLAVE_BASIC_CALL_INTERRUPT_THREAD;
    }
    if (@hasDecl(@This(), "VBS_BASIC_ENCLAVE_BASIC_CALL_INTERRUPT_THREAD")) {
        _ = VBS_BASIC_ENCLAVE_BASIC_CALL_INTERRUPT_THREAD;
    }
    if (@hasDecl(@This(), "VBS_BASIC_ENCLAVE_BASIC_CALL_CREATE_THREAD")) {
        _ = VBS_BASIC_ENCLAVE_BASIC_CALL_CREATE_THREAD;
    }
    if (@hasDecl(@This(), "VBS_BASIC_ENCLAVE_BASIC_CALL_CREATE_THREAD")) {
        _ = VBS_BASIC_ENCLAVE_BASIC_CALL_CREATE_THREAD;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
