//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (3)
//--------------------------------------------------------------------------------
pub const WSB_MAX_OB_STATUS_VALUE_TYPE_PAIR = @as(u32, 5);
pub const WSB_MAX_OB_STATUS_ENTRY = @as(u32, 5);
pub const WSBAPP_ASYNC_IN_PROGRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, 7995396));

//--------------------------------------------------------------------------------
// Section: Types (8)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWsbApplicationBackupSupport_Value = Guid.initString("1eff3510-4a27-46ad-b9e0-08332f0f4f6d");
pub const IID_IWsbApplicationBackupSupport = &IID_IWsbApplicationBackupSupport_Value;
pub const IWsbApplicationBackupSupport = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CheckConsistency: *const fn (
            self: *const IWsbApplicationBackupSupport,
            wsz_writer_metadata: ?PWSTR,
            wsz_component_name: ?PWSTR,
            wsz_component_logical_path: ?PWSTR,
            c_volumes: u32,
            rgwsz_source_volume_path: [*]?PWSTR,
            rgwsz_snapshot_volume_path: [*]?PWSTR,
            pp_async: ?*?*IWsbApplicationAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn checkConsistency(self: *const T, wsz_writer_metadata_: ?PWSTR, wsz_component_name_: ?PWSTR, wsz_component_logical_path_: ?PWSTR, c_volumes_: u32, rgwsz_source_volume_path_: [*]?PWSTR, rgwsz_snapshot_volume_path_: [*]?PWSTR, pp_async_: ?*?*IWsbApplicationAsync) HRESULT {
                return @as(*const IWsbApplicationBackupSupport.VTable, @ptrCast(self.vtable)).CheckConsistency(@as(*const IWsbApplicationBackupSupport, @ptrCast(self)), wsz_writer_metadata_, wsz_component_name_, wsz_component_logical_path_, c_volumes_, rgwsz_source_volume_path_, rgwsz_snapshot_volume_path_, pp_async_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWsbApplicationRestoreSupport_Value = Guid.initString("8d3bdb38-4ee8-4718-85f9-c7dbc4ab77aa");
pub const IID_IWsbApplicationRestoreSupport = &IID_IWsbApplicationRestoreSupport_Value;
pub const IWsbApplicationRestoreSupport = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        PreRestore: *const fn (
            self: *const IWsbApplicationRestoreSupport,
            wsz_writer_metadata: ?PWSTR,
            wsz_component_name: ?PWSTR,
            wsz_component_logical_path: ?PWSTR,
            b_no_roll_forward: BOOLEAN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PostRestore: *const fn (
            self: *const IWsbApplicationRestoreSupport,
            wsz_writer_metadata: ?PWSTR,
            wsz_component_name: ?PWSTR,
            wsz_component_logical_path: ?PWSTR,
            b_no_roll_forward: BOOLEAN,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OrderComponents: *const fn (
            self: *const IWsbApplicationRestoreSupport,
            c_components: u32,
            rg_component_name: [*]?PWSTR,
            rg_component_logical_paths: [*]?PWSTR,
            prg_component_name: [*]?*?PWSTR,
            prg_component_logical_path: [*]?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsRollForwardSupported: *const fn (
            self: *const IWsbApplicationRestoreSupport,
            pb_roll_forward_supported: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn preRestore(self: *const T, wsz_writer_metadata_: ?PWSTR, wsz_component_name_: ?PWSTR, wsz_component_logical_path_: ?PWSTR, b_no_roll_forward_: BOOLEAN) HRESULT {
                return @as(*const IWsbApplicationRestoreSupport.VTable, @ptrCast(self.vtable)).PreRestore(@as(*const IWsbApplicationRestoreSupport, @ptrCast(self)), wsz_writer_metadata_, wsz_component_name_, wsz_component_logical_path_, b_no_roll_forward_);
            }
            pub inline fn postRestore(self: *const T, wsz_writer_metadata_: ?PWSTR, wsz_component_name_: ?PWSTR, wsz_component_logical_path_: ?PWSTR, b_no_roll_forward_: BOOLEAN) HRESULT {
                return @as(*const IWsbApplicationRestoreSupport.VTable, @ptrCast(self.vtable)).PostRestore(@as(*const IWsbApplicationRestoreSupport, @ptrCast(self)), wsz_writer_metadata_, wsz_component_name_, wsz_component_logical_path_, b_no_roll_forward_);
            }
            pub inline fn orderComponents(self: *const T, c_components_: u32, rg_component_name_: [*]?PWSTR, rg_component_logical_paths_: [*]?PWSTR, prg_component_name_: [*]?*?PWSTR, prg_component_logical_path_: [*]?*?PWSTR) HRESULT {
                return @as(*const IWsbApplicationRestoreSupport.VTable, @ptrCast(self.vtable)).OrderComponents(@as(*const IWsbApplicationRestoreSupport, @ptrCast(self)), c_components_, rg_component_name_, rg_component_logical_paths_, prg_component_name_, prg_component_logical_path_);
            }
            pub inline fn isRollForwardSupported(self: *const T, pb_roll_forward_supported_: ?*u8) HRESULT {
                return @as(*const IWsbApplicationRestoreSupport.VTable, @ptrCast(self.vtable)).IsRollForwardSupported(@as(*const IWsbApplicationRestoreSupport, @ptrCast(self)), pb_roll_forward_supported_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWsbApplicationAsync_Value = Guid.initString("0843f6f7-895c-44a6-b0c2-05a5022aa3a1");
pub const IID_IWsbApplicationAsync = &IID_IWsbApplicationAsync_Value;
pub const IWsbApplicationAsync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryStatus: *const fn (
            self: *const IWsbApplicationAsync,
            phr_result: ?*HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Abort: *const fn (
            self: *const IWsbApplicationAsync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn queryStatus(self: *const T, phr_result_: ?*HRESULT) HRESULT {
                return @as(*const IWsbApplicationAsync.VTable, @ptrCast(self.vtable)).QueryStatus(@as(*const IWsbApplicationAsync, @ptrCast(self)), phr_result_);
            }
            pub inline fn abort(self: *const T) HRESULT {
                return @as(*const IWsbApplicationAsync.VTable, @ptrCast(self.vtable)).Abort(@as(*const IWsbApplicationAsync, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WSB_OB_STATUS_ENTRY_PAIR_TYPE = enum(i32) {
    UNDEFINED = 0,
    STRING = 1,
    NUMBER = 2,
    DATETIME = 3,
    TIME = 4,
    SIZE = 5,
    MAX = 6,
};
pub const WSB_OB_ET_UNDEFINED = WSB_OB_STATUS_ENTRY_PAIR_TYPE.UNDEFINED;
pub const WSB_OB_ET_STRING = WSB_OB_STATUS_ENTRY_PAIR_TYPE.STRING;
pub const WSB_OB_ET_NUMBER = WSB_OB_STATUS_ENTRY_PAIR_TYPE.NUMBER;
pub const WSB_OB_ET_DATETIME = WSB_OB_STATUS_ENTRY_PAIR_TYPE.DATETIME;
pub const WSB_OB_ET_TIME = WSB_OB_STATUS_ENTRY_PAIR_TYPE.TIME;
pub const WSB_OB_ET_SIZE = WSB_OB_STATUS_ENTRY_PAIR_TYPE.SIZE;
pub const WSB_OB_ET_MAX = WSB_OB_STATUS_ENTRY_PAIR_TYPE.MAX;

pub const WSB_OB_STATUS_ENTRY_VALUE_TYPE_PAIR = extern struct {
    m_wszObStatusEntryPairValue: ?PWSTR,
    m_ObStatusEntryPairType: WSB_OB_STATUS_ENTRY_PAIR_TYPE,
};

pub const WSB_OB_STATUS_ENTRY = extern struct {
    m_dwIcon: u32,
    m_dwStatusEntryName: u32,
    m_dwStatusEntryValue: u32,
    m_cValueTypePair: u32,
    m_rgValueTypePair: ?*WSB_OB_STATUS_ENTRY_VALUE_TYPE_PAIR,
};

pub const WSB_OB_STATUS_INFO = extern struct {
    m_guidSnapinId: Guid,
    m_cStatusEntry: u32,
    m_rgStatusEntry: ?*WSB_OB_STATUS_ENTRY,
};

pub const WSB_OB_REGISTRATION_INFO = extern struct {
    m_wszResourceDLL: ?PWSTR,
    m_guidSnapinId: Guid,
    m_dwProviderName: u32,
    m_dwProviderIcon: u32,
    m_bSupportsRemoting: BOOLEAN,
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (5)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOLEAN = @import("../foundation.zig").BOOLEAN;
const HRESULT = @import("../foundation.zig").HRESULT;
const IUnknown = @import("../system/com.zig").IUnknown;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
