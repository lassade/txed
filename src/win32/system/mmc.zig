//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (88)
//--------------------------------------------------------------------------------
pub const MMC_VER = @as(u32, 512);
pub const MMC_PROP_CHANGEAFFECTSUI = @as(u32, 1);
pub const MMC_PROP_MODIFIABLE = @as(u32, 2);
pub const MMC_PROP_REMOVABLE = @as(u32, 4);
pub const MMC_PROP_PERSIST = @as(u32, 8);
pub const MMCLV_AUTO = @as(i32, -1);
pub const MMCLV_NOPARAM = @as(i32, -2);
pub const MMCLV_NOICON = @as(i32, -1);
pub const MMCLV_VIEWSTYLE_ICON = @as(u32, 0);
pub const MMCLV_VIEWSTYLE_SMALLICON = @as(u32, 2);
pub const MMCLV_VIEWSTYLE_LIST = @as(u32, 3);
pub const MMCLV_VIEWSTYLE_REPORT = @as(u32, 1);
pub const MMCLV_VIEWSTYLE_FILTERED = @as(u32, 4);
pub const MMCLV_NOPTR = @as(u32, 0);
pub const MMCLV_UPDATE_NOINVALIDATEALL = @as(u32, 1);
pub const MMCLV_UPDATE_NOSCROLL = @as(u32, 2);
pub const MMC_IMAGECALLBACK = @as(i32, -1);
pub const RDI_STR = @as(u32, 2);
pub const RDI_IMAGE = @as(u32, 4);
pub const RDI_STATE = @as(u32, 8);
pub const RDI_PARAM = @as(u32, 16);
pub const RDI_INDEX = @as(u32, 32);
pub const RDI_INDENT = @as(u32, 64);
pub const MMC_VIEW_OPTIONS_NONE = @as(u32, 0);
pub const MMC_VIEW_OPTIONS_NOLISTVIEWS = @as(u32, 1);
pub const MMC_VIEW_OPTIONS_MULTISELECT = @as(u32, 2);
pub const MMC_VIEW_OPTIONS_OWNERDATALIST = @as(u32, 4);
pub const MMC_VIEW_OPTIONS_FILTERED = @as(u32, 8);
pub const MMC_VIEW_OPTIONS_CREATENEW = @as(u32, 16);
pub const MMC_VIEW_OPTIONS_USEFONTLINKING = @as(u32, 32);
pub const MMC_VIEW_OPTIONS_EXCLUDE_SCOPE_ITEMS_FROM_LIST = @as(u32, 64);
pub const MMC_VIEW_OPTIONS_LEXICAL_SORT = @as(u32, 128);
pub const MMC_PSO_NOAPPLYNOW = @as(u32, 1);
pub const MMC_PSO_HASHELP = @as(u32, 2);
pub const MMC_PSO_NEWWIZARDTYPE = @as(u32, 4);
pub const MMC_PSO_NO_PROPTITLE = @as(u32, 8);
pub const RFI_PARTIAL = @as(u32, 1);
pub const RFI_WRAP = @as(u32, 2);
pub const RSI_DESCENDING = @as(u32, 1);
pub const RSI_NOSORTICON = @as(u32, 2);
pub const SDI_STR = @as(u32, 2);
pub const SDI_IMAGE = @as(u32, 4);
pub const SDI_OPENIMAGE = @as(u32, 8);
pub const SDI_STATE = @as(u32, 16);
pub const SDI_PARAM = @as(u32, 32);
pub const SDI_CHILDREN = @as(u32, 64);
pub const SDI_PARENT = @as(u32, 0);
pub const SDI_PREVIOUS = @as(u32, 268435456);
pub const SDI_NEXT = @as(u32, 536870912);
pub const SDI_FIRST = @as(u32, 134217728);
pub const MMC_MULTI_SELECT_COOKIE = @as(i32, -2);
pub const MMC_WINDOW_COOKIE = @as(i32, -3);
pub const SPECIAL_COOKIE_MIN = @as(i32, -10);
pub const SPECIAL_COOKIE_MAX = @as(i32, -1);
pub const MMC_NW_OPTION_NONE = @as(u32, 0);
pub const MMC_NW_OPTION_NOSCOPEPANE = @as(u32, 1);
pub const MMC_NW_OPTION_NOTOOLBARS = @as(u32, 2);
pub const MMC_NW_OPTION_SHORTTITLE = @as(u32, 4);
pub const MMC_NW_OPTION_CUSTOMTITLE = @as(u32, 8);
pub const MMC_NW_OPTION_NOPERSIST = @as(u32, 16);
pub const MMC_NW_OPTION_NOACTIONPANE = @as(u32, 32);
pub const MMC_NODEID_SLOW_RETRIEVAL = @as(u32, 1);
pub const SPECIAL_DOBJ_MIN = @as(i32, -10);
pub const SPECIAL_DOBJ_MAX = @as(u32, 0);
pub const AUTO_WIDTH = @as(i32, -1);
pub const HIDE_COLUMN = @as(i32, -4);
pub const ILSIF_LEAVE_LARGE_ICON = @as(u32, 1073741824);
pub const ILSIF_LEAVE_SMALL_ICON = @as(u32, 536870912);
pub const HDI_HIDDEN = @as(u32, 1);
pub const RDCI_ScopeItem = @as(u32, 2147483648);
pub const RVTI_MISC_OPTIONS_NOLISTVIEWS = @as(u32, 1);
pub const RVTI_LIST_OPTIONS_NONE = @as(u32, 0);
pub const RVTI_LIST_OPTIONS_OWNERDATALIST = @as(u32, 2);
pub const RVTI_LIST_OPTIONS_MULTISELECT = @as(u32, 4);
pub const RVTI_LIST_OPTIONS_FILTERED = @as(u32, 8);
pub const RVTI_LIST_OPTIONS_USEFONTLINKING = @as(u32, 32);
pub const RVTI_LIST_OPTIONS_EXCLUDE_SCOPE_ITEMS_FROM_LIST = @as(u32, 64);
pub const RVTI_LIST_OPTIONS_LEXICAL_SORT = @as(u32, 128);
pub const RVTI_LIST_OPTIONS_ALLOWPASTE = @as(u32, 256);
pub const RVTI_HTML_OPTIONS_NONE = @as(u32, 0);
pub const RVTI_HTML_OPTIONS_NOLISTVIEW = @as(u32, 1);
pub const RVTI_OCX_OPTIONS_NONE = @as(u32, 0);
pub const RVTI_OCX_OPTIONS_NOLISTVIEW = @as(u32, 1);
pub const RVTI_OCX_OPTIONS_CACHE_OCX = @as(u32, 2);
pub const MMC_DEFAULT_OPERATION_COPY = @as(u32, 1);
pub const MMC_ITEM_OVERLAY_STATE_MASK = @as(u32, 3840);
pub const MMC_ITEM_OVERLAY_STATE_SHIFT = @as(u32, 8);
pub const MMC_ITEM_STATE_MASK = @as(u32, 255);

//--------------------------------------------------------------------------------
// Section: Types (127)
//--------------------------------------------------------------------------------
const CLSID_Application_Value = Guid.initString("49b2791a-b1ae-4c90-9b8e-e860ba07f889");
pub const CLSID_Application = &CLSID_Application_Value;

const CLSID_AppEventsDHTMLConnector_Value = Guid.initString("ade6444b-c91f-4e37-92a4-5bb430a33340");
pub const CLSID_AppEventsDHTMLConnector = &CLSID_AppEventsDHTMLConnector_Value;

pub const MMC_PROPERTY_ACTION = enum(i32) {
    DELETING = 1,
    CHANGING = 2,
    INITIALIZED = 3,
};
pub const MMC_PROPACT_DELETING = MMC_PROPERTY_ACTION.DELETING;
pub const MMC_PROPACT_CHANGING = MMC_PROPERTY_ACTION.CHANGING;
pub const MMC_PROPACT_INITIALIZED = MMC_PROPERTY_ACTION.INITIALIZED;

pub const MMC_SNAPIN_PROPERTY = extern struct {
    pszPropName: ?[*:0]const u16,
    varValue: VARIANT,
    eAction: MMC_PROPERTY_ACTION,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISnapinProperties_Value = Guid.initString("f7889da9-4a02-4837-bf89-1a6f2a021010");
pub const IID_ISnapinProperties = &IID_ISnapinProperties_Value;
pub const ISnapinProperties = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const ISnapinProperties,
            p_properties: ?*Properties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryPropertyNames: *const fn (
            self: *const ISnapinProperties,
            p_callback: ?*ISnapinPropertiesCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PropertiesChanged: *const fn (
            self: *const ISnapinProperties,
            c_properties: i32,
            p_properties: [*]MMC_SNAPIN_PROPERTY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_properties_: ?*Properties) HRESULT {
                return @as(*const ISnapinProperties.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ISnapinProperties, @ptrCast(self)), p_properties_);
            }
            pub inline fn queryPropertyNames(self: *const T, p_callback_: ?*ISnapinPropertiesCallback) HRESULT {
                return @as(*const ISnapinProperties.VTable, @ptrCast(self.vtable)).QueryPropertyNames(@as(*const ISnapinProperties, @ptrCast(self)), p_callback_);
            }
            pub inline fn propertiesChanged(self: *const T, c_properties_: i32, p_properties_: [*]MMC_SNAPIN_PROPERTY) HRESULT {
                return @as(*const ISnapinProperties.VTable, @ptrCast(self.vtable)).PropertiesChanged(@as(*const ISnapinProperties, @ptrCast(self)), c_properties_, p_properties_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISnapinPropertiesCallback_Value = Guid.initString("a50fa2e5-7e61-45eb-a8d4-9a07b3e851a8");
pub const IID_ISnapinPropertiesCallback = &IID_ISnapinPropertiesCallback_Value;
pub const ISnapinPropertiesCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddPropertyName: *const fn (
            self: *const ISnapinPropertiesCallback,
            psz_prop_name: ?[*:0]const u16,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addPropertyName(self: *const T, psz_prop_name_: ?[*:0]const u16, dw_flags_: u32) HRESULT {
                return @as(*const ISnapinPropertiesCallback.VTable, @ptrCast(self.vtable)).AddPropertyName(@as(*const ISnapinPropertiesCallback, @ptrCast(self)), psz_prop_name_, dw_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const _DocumentMode = enum(i32) {
    Author = 0,
    User = 1,
    User_MDI = 2,
    User_SDI = 3,
};
pub const DocumentMode_Author = _DocumentMode.Author;
pub const DocumentMode_User = _DocumentMode.User;
pub const DocumentMode_User_MDI = _DocumentMode.User_MDI;
pub const DocumentMode_User_SDI = _DocumentMode.User_SDI;

pub const _ListViewMode = enum(i32) {
    Small_Icons = 0,
    Large_Icons = 1,
    List = 2,
    Detail = 3,
    Filtered = 4,
};
pub const ListMode_Small_Icons = _ListViewMode.Small_Icons;
pub const ListMode_Large_Icons = _ListViewMode.Large_Icons;
pub const ListMode_List = _ListViewMode.List;
pub const ListMode_Detail = _ListViewMode.Detail;
pub const ListMode_Filtered = _ListViewMode.Filtered;

pub const _ViewOptions = enum(i32) {
    Default = 0,
    ScopeTreeHidden = 1,
    NoToolBars = 2,
    NotPersistable = 4,
    ActionPaneHidden = 8,
};
pub const ViewOption_Default = _ViewOptions.Default;
pub const ViewOption_ScopeTreeHidden = _ViewOptions.ScopeTreeHidden;
pub const ViewOption_NoToolBars = _ViewOptions.NoToolBars;
pub const ViewOption_NotPersistable = _ViewOptions.NotPersistable;
pub const ViewOption_ActionPaneHidden = _ViewOptions.ActionPaneHidden;

pub const _ExportListOptions = enum(i32) {
    Default = 0,
    Unicode = 1,
    TabDelimited = 2,
    SelectedItemsOnly = 4,
};
pub const ExportListOptions_Default = _ExportListOptions.Default;
pub const ExportListOptions_Unicode = _ExportListOptions.Unicode;
pub const ExportListOptions_TabDelimited = _ExportListOptions.TabDelimited;
pub const ExportListOptions_SelectedItemsOnly = _ExportListOptions.SelectedItemsOnly;

const IID__Application_Value = Guid.initString("a3afb9cc-b653-4741-86ab-f0470ec1384c");
pub const IID__Application = &IID__Application_Value;
pub const _Application = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Help: *const fn (
            self: *const _Application,
        ) callconv(@import("std").os.windows.WINAPI) void,
        Quit: *const fn (
            self: *const _Application,
        ) callconv(@import("std").os.windows.WINAPI) void,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Document: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _Application,
            document: ?*?*Document,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Load: *const fn (
            self: *const _Application,
            filename: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Frame: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _Application,
            frame: ?*?*Frame,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Visible: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _Application,
            visible: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Show: *const fn (
            self: *const _Application,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Hide: *const fn (
            self: *const _Application,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserControl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _Application,
            user_control: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_UserControl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _Application,
            user_control: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_VersionMajor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _Application,
            version_major: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_VersionMinor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const _Application,
            version_minor: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn help(self: *const T) void {
                return @as(*const _Application.VTable, @ptrCast(self.vtable)).Help(@as(*const _Application, @ptrCast(self)));
            }
            pub inline fn quit(self: *const T) void {
                return @as(*const _Application.VTable, @ptrCast(self.vtable)).Quit(@as(*const _Application, @ptrCast(self)));
            }
            pub inline fn getDocument(self: *const T, document_: ?*?*Document) HRESULT {
                return @as(*const _Application.VTable, @ptrCast(self.vtable)).get_Document(@as(*const _Application, @ptrCast(self)), document_);
            }
            pub inline fn load(self: *const T, filename_: ?BSTR) HRESULT {
                return @as(*const _Application.VTable, @ptrCast(self.vtable)).Load(@as(*const _Application, @ptrCast(self)), filename_);
            }
            pub inline fn getFrame(self: *const T, frame_: ?*?*Frame) HRESULT {
                return @as(*const _Application.VTable, @ptrCast(self.vtable)).get_Frame(@as(*const _Application, @ptrCast(self)), frame_);
            }
            pub inline fn getVisible(self: *const T, visible_: ?*BOOL) HRESULT {
                return @as(*const _Application.VTable, @ptrCast(self.vtable)).get_Visible(@as(*const _Application, @ptrCast(self)), visible_);
            }
            pub inline fn show(self: *const T) HRESULT {
                return @as(*const _Application.VTable, @ptrCast(self.vtable)).Show(@as(*const _Application, @ptrCast(self)));
            }
            pub inline fn hide(self: *const T) HRESULT {
                return @as(*const _Application.VTable, @ptrCast(self.vtable)).Hide(@as(*const _Application, @ptrCast(self)));
            }
            pub inline fn getUserControl(self: *const T, user_control_: ?*BOOL) HRESULT {
                return @as(*const _Application.VTable, @ptrCast(self.vtable)).get_UserControl(@as(*const _Application, @ptrCast(self)), user_control_);
            }
            pub inline fn putUserControl(self: *const T, user_control_: BOOL) HRESULT {
                return @as(*const _Application.VTable, @ptrCast(self.vtable)).put_UserControl(@as(*const _Application, @ptrCast(self)), user_control_);
            }
            pub inline fn getVersionMajor(self: *const T, version_major_: ?*i32) HRESULT {
                return @as(*const _Application.VTable, @ptrCast(self.vtable)).get_VersionMajor(@as(*const _Application, @ptrCast(self)), version_major_);
            }
            pub inline fn getVersionMinor(self: *const T, version_minor_: ?*i32) HRESULT {
                return @as(*const _Application.VTable, @ptrCast(self.vtable)).get_VersionMinor(@as(*const _Application, @ptrCast(self)), version_minor_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID__AppEvents_Value = Guid.initString("de46cbdd-53f5-4635-af54-4fe71e923d3f");
pub const IID__AppEvents = &IID__AppEvents_Value;
pub const _AppEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        OnQuit: *const fn (
            self: *const _AppEvents,
            application: ?*_Application,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDocumentOpen: *const fn (
            self: *const _AppEvents,
            document: ?*Document,
            new: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDocumentClose: *const fn (
            self: *const _AppEvents,
            document: ?*Document,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSnapInAdded: *const fn (
            self: *const _AppEvents,
            document: ?*Document,
            snap_in: ?*SnapIn,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSnapInRemoved: *const fn (
            self: *const _AppEvents,
            document: ?*Document,
            snap_in: ?*SnapIn,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnNewView: *const fn (
            self: *const _AppEvents,
            view: ?*View,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnViewClose: *const fn (
            self: *const _AppEvents,
            view: ?*View,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnViewChange: *const fn (
            self: *const _AppEvents,
            view: ?*View,
            new_owner_node: ?*Node,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnSelectionChange: *const fn (
            self: *const _AppEvents,
            view: ?*View,
            new_nodes: ?*Nodes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnContextMenuExecuted: *const fn (
            self: *const _AppEvents,
            menu_item: ?*MenuItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnToolbarButtonClicked: *const fn (
            self: *const _AppEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnListUpdated: *const fn (
            self: *const _AppEvents,
            view: ?*View,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn onQuit(self: *const T, application_: ?*_Application) HRESULT {
                return @as(*const _AppEvents.VTable, @ptrCast(self.vtable)).OnQuit(@as(*const _AppEvents, @ptrCast(self)), application_);
            }
            pub inline fn onDocumentOpen(self: *const T, document_: ?*Document, new_: BOOL) HRESULT {
                return @as(*const _AppEvents.VTable, @ptrCast(self.vtable)).OnDocumentOpen(@as(*const _AppEvents, @ptrCast(self)), document_, new_);
            }
            pub inline fn onDocumentClose(self: *const T, document_: ?*Document) HRESULT {
                return @as(*const _AppEvents.VTable, @ptrCast(self.vtable)).OnDocumentClose(@as(*const _AppEvents, @ptrCast(self)), document_);
            }
            pub inline fn onSnapInAdded(self: *const T, document_: ?*Document, snap_in_: ?*SnapIn) HRESULT {
                return @as(*const _AppEvents.VTable, @ptrCast(self.vtable)).OnSnapInAdded(@as(*const _AppEvents, @ptrCast(self)), document_, snap_in_);
            }
            pub inline fn onSnapInRemoved(self: *const T, document_: ?*Document, snap_in_: ?*SnapIn) HRESULT {
                return @as(*const _AppEvents.VTable, @ptrCast(self.vtable)).OnSnapInRemoved(@as(*const _AppEvents, @ptrCast(self)), document_, snap_in_);
            }
            pub inline fn onNewView(self: *const T, view_: ?*View) HRESULT {
                return @as(*const _AppEvents.VTable, @ptrCast(self.vtable)).OnNewView(@as(*const _AppEvents, @ptrCast(self)), view_);
            }
            pub inline fn onViewClose(self: *const T, view_: ?*View) HRESULT {
                return @as(*const _AppEvents.VTable, @ptrCast(self.vtable)).OnViewClose(@as(*const _AppEvents, @ptrCast(self)), view_);
            }
            pub inline fn onViewChange(self: *const T, view_: ?*View, new_owner_node_: ?*Node) HRESULT {
                return @as(*const _AppEvents.VTable, @ptrCast(self.vtable)).OnViewChange(@as(*const _AppEvents, @ptrCast(self)), view_, new_owner_node_);
            }
            pub inline fn onSelectionChange(self: *const T, view_: ?*View, new_nodes_: ?*Nodes) HRESULT {
                return @as(*const _AppEvents.VTable, @ptrCast(self.vtable)).OnSelectionChange(@as(*const _AppEvents, @ptrCast(self)), view_, new_nodes_);
            }
            pub inline fn onContextMenuExecuted(self: *const T, menu_item_: ?*MenuItem) HRESULT {
                return @as(*const _AppEvents.VTable, @ptrCast(self.vtable)).OnContextMenuExecuted(@as(*const _AppEvents, @ptrCast(self)), menu_item_);
            }
            pub inline fn onToolbarButtonClicked(self: *const T) HRESULT {
                return @as(*const _AppEvents.VTable, @ptrCast(self.vtable)).OnToolbarButtonClicked(@as(*const _AppEvents, @ptrCast(self)));
            }
            pub inline fn onListUpdated(self: *const T, view_: ?*View) HRESULT {
                return @as(*const _AppEvents.VTable, @ptrCast(self.vtable)).OnListUpdated(@as(*const _AppEvents, @ptrCast(self)), view_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_AppEvents_Value = Guid.initString("fc7a4252-78ac-4532-8c5a-563cfe138863");
pub const IID_AppEvents = &IID_AppEvents_Value;
pub const AppEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID__EventConnector_Value = Guid.initString("c0bccd30-de44-4528-8403-a05a6a1cc8ea");
pub const IID__EventConnector = &IID__EventConnector_Value;
pub const _EventConnector = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        ConnectTo: *const fn (
            self: *const _EventConnector,
            application: ?*_Application,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: *const fn (
            self: *const _EventConnector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn connectTo(self: *const T, application_: ?*_Application) HRESULT {
                return @as(*const _EventConnector.VTable, @ptrCast(self.vtable)).ConnectTo(@as(*const _EventConnector, @ptrCast(self)), application_);
            }
            pub inline fn disconnect(self: *const T) HRESULT {
                return @as(*const _EventConnector.VTable, @ptrCast(self.vtable)).Disconnect(@as(*const _EventConnector, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_Frame_Value = Guid.initString("e5e2d970-5bb3-4306-8804-b0968a31c8e6");
pub const IID_Frame = &IID_Frame_Value;
pub const Frame = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Maximize: *const fn (
            self: *const Frame,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Minimize: *const fn (
            self: *const Frame,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Restore: *const fn (
            self: *const Frame,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Top: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Frame,
            top: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Top: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Frame,
            top: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Bottom: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Frame,
            bottom: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Bottom: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Frame,
            bottom: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Left: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Frame,
            left: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Left: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Frame,
            left: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Right: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Frame,
            right: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Right: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Frame,
            right: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn maximize(self: *const T) HRESULT {
                return @as(*const Frame.VTable, @ptrCast(self.vtable)).Maximize(@as(*const Frame, @ptrCast(self)));
            }
            pub inline fn minimize(self: *const T) HRESULT {
                return @as(*const Frame.VTable, @ptrCast(self.vtable)).Minimize(@as(*const Frame, @ptrCast(self)));
            }
            pub inline fn restore(self: *const T) HRESULT {
                return @as(*const Frame.VTable, @ptrCast(self.vtable)).Restore(@as(*const Frame, @ptrCast(self)));
            }
            pub inline fn getTop(self: *const T, top_: ?*i32) HRESULT {
                return @as(*const Frame.VTable, @ptrCast(self.vtable)).get_Top(@as(*const Frame, @ptrCast(self)), top_);
            }
            pub inline fn putTop(self: *const T, top_: i32) HRESULT {
                return @as(*const Frame.VTable, @ptrCast(self.vtable)).put_Top(@as(*const Frame, @ptrCast(self)), top_);
            }
            pub inline fn getBottom(self: *const T, bottom_: ?*i32) HRESULT {
                return @as(*const Frame.VTable, @ptrCast(self.vtable)).get_Bottom(@as(*const Frame, @ptrCast(self)), bottom_);
            }
            pub inline fn putBottom(self: *const T, bottom_: i32) HRESULT {
                return @as(*const Frame.VTable, @ptrCast(self.vtable)).put_Bottom(@as(*const Frame, @ptrCast(self)), bottom_);
            }
            pub inline fn getLeft(self: *const T, left_: ?*i32) HRESULT {
                return @as(*const Frame.VTable, @ptrCast(self.vtable)).get_Left(@as(*const Frame, @ptrCast(self)), left_);
            }
            pub inline fn putLeft(self: *const T, left_: i32) HRESULT {
                return @as(*const Frame.VTable, @ptrCast(self.vtable)).put_Left(@as(*const Frame, @ptrCast(self)), left_);
            }
            pub inline fn getRight(self: *const T, right_: ?*i32) HRESULT {
                return @as(*const Frame.VTable, @ptrCast(self.vtable)).get_Right(@as(*const Frame, @ptrCast(self)), right_);
            }
            pub inline fn putRight(self: *const T, right_: i32) HRESULT {
                return @as(*const Frame.VTable, @ptrCast(self.vtable)).put_Right(@as(*const Frame, @ptrCast(self)), right_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_Node_Value = Guid.initString("f81ed800-7839-4447-945d-8e15da59ca55");
pub const IID_Node = &IID_Node_Value;
pub const Node = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Node,
            name: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Property: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Node,
            property_name: ?BSTR,
            property_value: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Bookmark: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Node,
            bookmark: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsScopeNode: *const fn (
            self: *const Node,
            is_scope_node: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Nodetype: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Node,
            nodetype: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?*u16) HRESULT {
                return @as(*const Node.VTable, @ptrCast(self.vtable)).get_Name(@as(*const Node, @ptrCast(self)), name_);
            }
            pub inline fn getProperty(self: *const T, property_name_: ?BSTR, property_value_: ?*?*u16) HRESULT {
                return @as(*const Node.VTable, @ptrCast(self.vtable)).get_Property(@as(*const Node, @ptrCast(self)), property_name_, property_value_);
            }
            pub inline fn getBookmark(self: *const T, bookmark_: ?*?*u16) HRESULT {
                return @as(*const Node.VTable, @ptrCast(self.vtable)).get_Bookmark(@as(*const Node, @ptrCast(self)), bookmark_);
            }
            pub inline fn isScopeNode(self: *const T, is_scope_node_: ?*BOOL) HRESULT {
                return @as(*const Node.VTable, @ptrCast(self.vtable)).IsScopeNode(@as(*const Node, @ptrCast(self)), is_scope_node_);
            }
            pub inline fn getNodetype(self: *const T, nodetype_: ?*?*u16) HRESULT {
                return @as(*const Node.VTable, @ptrCast(self.vtable)).get_Nodetype(@as(*const Node, @ptrCast(self)), nodetype_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ScopeNamespace_Value = Guid.initString("ebbb48dc-1a3b-4d86-b786-c21b28389012");
pub const IID_ScopeNamespace = &IID_ScopeNamespace_Value;
pub const ScopeNamespace = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetParent: *const fn (
            self: *const ScopeNamespace,
            node: ?*Node,
            parent: ?*?*Node,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChild: *const fn (
            self: *const ScopeNamespace,
            node: ?*Node,
            child: ?*?*Node,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNext: *const fn (
            self: *const ScopeNamespace,
            node: ?*Node,
            next: ?*?*Node,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRoot: *const fn (
            self: *const ScopeNamespace,
            root: ?*?*Node,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Expand: *const fn (
            self: *const ScopeNamespace,
            node: ?*Node,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getParent(self: *const T, node_: ?*Node, parent_: ?*?*Node) HRESULT {
                return @as(*const ScopeNamespace.VTable, @ptrCast(self.vtable)).GetParent(@as(*const ScopeNamespace, @ptrCast(self)), node_, parent_);
            }
            pub inline fn getChild(self: *const T, node_: ?*Node, child_: ?*?*Node) HRESULT {
                return @as(*const ScopeNamespace.VTable, @ptrCast(self.vtable)).GetChild(@as(*const ScopeNamespace, @ptrCast(self)), node_, child_);
            }
            pub inline fn getNext(self: *const T, node_: ?*Node, next_: ?*?*Node) HRESULT {
                return @as(*const ScopeNamespace.VTable, @ptrCast(self.vtable)).GetNext(@as(*const ScopeNamespace, @ptrCast(self)), node_, next_);
            }
            pub inline fn getRoot(self: *const T, root_: ?*?*Node) HRESULT {
                return @as(*const ScopeNamespace.VTable, @ptrCast(self.vtable)).GetRoot(@as(*const ScopeNamespace, @ptrCast(self)), root_);
            }
            pub inline fn expand(self: *const T, node_: ?*Node) HRESULT {
                return @as(*const ScopeNamespace.VTable, @ptrCast(self.vtable)).Expand(@as(*const ScopeNamespace, @ptrCast(self)), node_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_Document_Value = Guid.initString("225120d6-1e0f-40a3-93fe-1079e6a8017b");
pub const IID_Document = &IID_Document_Value;
pub const Document = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Save: *const fn (
            self: *const Document,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveAs: *const fn (
            self: *const Document,
            filename: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const Document,
            save_changes: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Views: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Document,
            views: ?*?*Views,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SnapIns: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Document,
            snap_ins: ?*?*SnapIns,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ActiveView: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Document,
            view: ?*?*View,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Document,
            name: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Document,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Location: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Document,
            location: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsSaved: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Document,
            is_saved: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Mode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Document,
            mode: ?*_DocumentMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Mode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Document,
            mode: _DocumentMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RootNode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Document,
            node: ?*?*Node,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ScopeNamespace: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Document,
            scope_namespace: ?*?*ScopeNamespace,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateProperties: *const fn (
            self: *const Document,
            properties: ?*?*Properties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Application: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Document,
            application: ?*?*_Application,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn save(self: *const T) HRESULT {
                return @as(*const Document.VTable, @ptrCast(self.vtable)).Save(@as(*const Document, @ptrCast(self)));
            }
            pub inline fn saveAs(self: *const T, filename_: ?BSTR) HRESULT {
                return @as(*const Document.VTable, @ptrCast(self.vtable)).SaveAs(@as(*const Document, @ptrCast(self)), filename_);
            }
            pub inline fn close(self: *const T, save_changes_: BOOL) HRESULT {
                return @as(*const Document.VTable, @ptrCast(self.vtable)).Close(@as(*const Document, @ptrCast(self)), save_changes_);
            }
            pub inline fn getViews(self: *const T, views_: ?*?*Views) HRESULT {
                return @as(*const Document.VTable, @ptrCast(self.vtable)).get_Views(@as(*const Document, @ptrCast(self)), views_);
            }
            pub inline fn getSnapIns(self: *const T, snap_ins_: ?*?*SnapIns) HRESULT {
                return @as(*const Document.VTable, @ptrCast(self.vtable)).get_SnapIns(@as(*const Document, @ptrCast(self)), snap_ins_);
            }
            pub inline fn getActiveView(self: *const T, view_: ?*?*View) HRESULT {
                return @as(*const Document.VTable, @ptrCast(self.vtable)).get_ActiveView(@as(*const Document, @ptrCast(self)), view_);
            }
            pub inline fn getName(self: *const T, name_: ?*?*u16) HRESULT {
                return @as(*const Document.VTable, @ptrCast(self.vtable)).get_Name(@as(*const Document, @ptrCast(self)), name_);
            }
            pub inline fn putName(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const Document.VTable, @ptrCast(self.vtable)).put_Name(@as(*const Document, @ptrCast(self)), name_);
            }
            pub inline fn getLocation(self: *const T, location_: ?*?*u16) HRESULT {
                return @as(*const Document.VTable, @ptrCast(self.vtable)).get_Location(@as(*const Document, @ptrCast(self)), location_);
            }
            pub inline fn getIsSaved(self: *const T, is_saved_: ?*BOOL) HRESULT {
                return @as(*const Document.VTable, @ptrCast(self.vtable)).get_IsSaved(@as(*const Document, @ptrCast(self)), is_saved_);
            }
            pub inline fn getMode(self: *const T, mode_: ?*_DocumentMode) HRESULT {
                return @as(*const Document.VTable, @ptrCast(self.vtable)).get_Mode(@as(*const Document, @ptrCast(self)), mode_);
            }
            pub inline fn putMode(self: *const T, mode_: _DocumentMode) HRESULT {
                return @as(*const Document.VTable, @ptrCast(self.vtable)).put_Mode(@as(*const Document, @ptrCast(self)), mode_);
            }
            pub inline fn getRootNode(self: *const T, node_: ?*?*Node) HRESULT {
                return @as(*const Document.VTable, @ptrCast(self.vtable)).get_RootNode(@as(*const Document, @ptrCast(self)), node_);
            }
            pub inline fn getScopeNamespace(self: *const T, scope_namespace_: ?*?*ScopeNamespace) HRESULT {
                return @as(*const Document.VTable, @ptrCast(self.vtable)).get_ScopeNamespace(@as(*const Document, @ptrCast(self)), scope_namespace_);
            }
            pub inline fn createProperties(self: *const T, properties_: ?*?*Properties) HRESULT {
                return @as(*const Document.VTable, @ptrCast(self.vtable)).CreateProperties(@as(*const Document, @ptrCast(self)), properties_);
            }
            pub inline fn getApplication(self: *const T, application_: ?*?*_Application) HRESULT {
                return @as(*const Document.VTable, @ptrCast(self.vtable)).get_Application(@as(*const Document, @ptrCast(self)), application_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_SnapIn_Value = Guid.initString("3be910f6-3459-49c6-a1bb-41e6be9df3ea");
pub const IID_SnapIn = &IID_SnapIn_Value;
pub const SnapIn = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const SnapIn,
            name: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Vendor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const SnapIn,
            vendor: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Version: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const SnapIn,
            version: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Extensions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const SnapIn,
            extensions: ?*?*Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SnapinCLSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const SnapIn,
            snapin_c_l_s_i_d: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Properties: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const SnapIn,
            properties: ?*?*Properties,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableAllExtensions: *const fn (
            self: *const SnapIn,
            enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?*u16) HRESULT {
                return @as(*const SnapIn.VTable, @ptrCast(self.vtable)).get_Name(@as(*const SnapIn, @ptrCast(self)), name_);
            }
            pub inline fn getVendor(self: *const T, vendor_: ?*?*u16) HRESULT {
                return @as(*const SnapIn.VTable, @ptrCast(self.vtable)).get_Vendor(@as(*const SnapIn, @ptrCast(self)), vendor_);
            }
            pub inline fn getVersion(self: *const T, version_: ?*?*u16) HRESULT {
                return @as(*const SnapIn.VTable, @ptrCast(self.vtable)).get_Version(@as(*const SnapIn, @ptrCast(self)), version_);
            }
            pub inline fn getExtensions(self: *const T, extensions_: ?*?*Extensions) HRESULT {
                return @as(*const SnapIn.VTable, @ptrCast(self.vtable)).get_Extensions(@as(*const SnapIn, @ptrCast(self)), extensions_);
            }
            pub inline fn getSnapinCLSID(self: *const T, snapin_c_l_s_i_d_: ?*?*u16) HRESULT {
                return @as(*const SnapIn.VTable, @ptrCast(self.vtable)).get_SnapinCLSID(@as(*const SnapIn, @ptrCast(self)), snapin_c_l_s_i_d_);
            }
            pub inline fn getProperties(self: *const T, properties_: ?*?*Properties) HRESULT {
                return @as(*const SnapIn.VTable, @ptrCast(self.vtable)).get_Properties(@as(*const SnapIn, @ptrCast(self)), properties_);
            }
            pub inline fn enableAllExtensions(self: *const T, enable_: BOOL) HRESULT {
                return @as(*const SnapIn.VTable, @ptrCast(self.vtable)).EnableAllExtensions(@as(*const SnapIn, @ptrCast(self)), enable_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_SnapIns_Value = Guid.initString("2ef3de1d-b12a-49d1-92c5-0b00798768f1");
pub const IID_SnapIns = &IID_SnapIns_Value;
pub const SnapIns = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const SnapIns,
            retval: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const SnapIns,
            index: i32,
            snap_in: ?*?*SnapIn,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const SnapIns,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const SnapIns,
            snapin_name_or_c_l_s_i_d: ?BSTR,
            parent_snapin: VARIANT,
            properties: VARIANT,
            snap_in: ?*?*SnapIn,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const SnapIns,
            snap_in: ?*SnapIn,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, retval_: ?*?*IUnknown) HRESULT {
                return @as(*const SnapIns.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const SnapIns, @ptrCast(self)), retval_);
            }
            pub inline fn item(self: *const T, index_: i32, snap_in_: ?*?*SnapIn) HRESULT {
                return @as(*const SnapIns.VTable, @ptrCast(self.vtable)).Item(@as(*const SnapIns, @ptrCast(self)), index_, snap_in_);
            }
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const SnapIns.VTable, @ptrCast(self.vtable)).get_Count(@as(*const SnapIns, @ptrCast(self)), count_);
            }
            pub inline fn add(self: *const T, snapin_name_or_c_l_s_i_d_: ?BSTR, parent_snapin_: VARIANT, properties_: VARIANT, snap_in_: ?*?*SnapIn) HRESULT {
                return @as(*const SnapIns.VTable, @ptrCast(self.vtable)).Add(@as(*const SnapIns, @ptrCast(self)), snapin_name_or_c_l_s_i_d_, parent_snapin_, properties_, snap_in_);
            }
            pub inline fn remove(self: *const T, snap_in_: ?*SnapIn) HRESULT {
                return @as(*const SnapIns.VTable, @ptrCast(self.vtable)).Remove(@as(*const SnapIns, @ptrCast(self)), snap_in_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_Extension_Value = Guid.initString("ad4d6ca6-912f-409b-a26e-7fd234aef542");
pub const IID_Extension = &IID_Extension_Value;
pub const Extension = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Extension,
            name: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Vendor: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Extension,
            vendor: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Version: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Extension,
            version: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Extensions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Extension,
            extensions: ?*?*Extensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SnapinCLSID: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Extension,
            snapin_c_l_s_i_d: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableAllExtensions: *const fn (
            self: *const Extension,
            enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enable: *const fn (
            self: *const Extension,
            enable: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getName(self: *const T, name_: ?*?*u16) HRESULT {
                return @as(*const Extension.VTable, @ptrCast(self.vtable)).get_Name(@as(*const Extension, @ptrCast(self)), name_);
            }
            pub inline fn getVendor(self: *const T, vendor_: ?*?*u16) HRESULT {
                return @as(*const Extension.VTable, @ptrCast(self.vtable)).get_Vendor(@as(*const Extension, @ptrCast(self)), vendor_);
            }
            pub inline fn getVersion(self: *const T, version_: ?*?*u16) HRESULT {
                return @as(*const Extension.VTable, @ptrCast(self.vtable)).get_Version(@as(*const Extension, @ptrCast(self)), version_);
            }
            pub inline fn getExtensions(self: *const T, extensions_: ?*?*Extensions) HRESULT {
                return @as(*const Extension.VTable, @ptrCast(self.vtable)).get_Extensions(@as(*const Extension, @ptrCast(self)), extensions_);
            }
            pub inline fn getSnapinCLSID(self: *const T, snapin_c_l_s_i_d_: ?*?*u16) HRESULT {
                return @as(*const Extension.VTable, @ptrCast(self.vtable)).get_SnapinCLSID(@as(*const Extension, @ptrCast(self)), snapin_c_l_s_i_d_);
            }
            pub inline fn enableAllExtensions(self: *const T, enable_: BOOL) HRESULT {
                return @as(*const Extension.VTable, @ptrCast(self.vtable)).EnableAllExtensions(@as(*const Extension, @ptrCast(self)), enable_);
            }
            pub inline fn enable(self: *const T, enable_: BOOL) HRESULT {
                return @as(*const Extension.VTable, @ptrCast(self.vtable)).Enable(@as(*const Extension, @ptrCast(self)), enable_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_Extensions_Value = Guid.initString("82dbea43-8ca4-44bc-a2ca-d18741059ec8");
pub const IID_Extensions = &IID_Extensions_Value;
pub const Extensions = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Extensions,
            retval: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const Extensions,
            index: i32,
            extension: ?*?*Extension,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Extensions,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, retval_: ?*?*IUnknown) HRESULT {
                return @as(*const Extensions.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const Extensions, @ptrCast(self)), retval_);
            }
            pub inline fn item(self: *const T, index_: i32, extension_: ?*?*Extension) HRESULT {
                return @as(*const Extensions.VTable, @ptrCast(self.vtable)).Item(@as(*const Extensions, @ptrCast(self)), index_, extension_);
            }
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const Extensions.VTable, @ptrCast(self.vtable)).get_Count(@as(*const Extensions, @ptrCast(self)), count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_Columns_Value = Guid.initString("383d4d97-fc44-478b-b139-6323dc48611c");
pub const IID_Columns = &IID_Columns_Value;
pub const Columns = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Item: *const fn (
            self: *const Columns,
            index: i32,
            column: ?*?*Column,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Columns,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Columns,
            retval: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn item(self: *const T, index_: i32, column_: ?*?*Column) HRESULT {
                return @as(*const Columns.VTable, @ptrCast(self.vtable)).Item(@as(*const Columns, @ptrCast(self)), index_, column_);
            }
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const Columns.VTable, @ptrCast(self.vtable)).get_Count(@as(*const Columns, @ptrCast(self)), count_);
            }
            pub inline fn getNewEnum(self: *const T, retval_: ?*?*IUnknown) HRESULT {
                return @as(*const Columns.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const Columns, @ptrCast(self)), retval_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const _ColumnSortOrder = enum(i32) {
    Ascending = 0,
    Descending = 1,
};
pub const SortOrder_Ascending = _ColumnSortOrder.Ascending;
pub const SortOrder_Descending = _ColumnSortOrder.Descending;

const IID_Column_Value = Guid.initString("fd1c5f63-2b16-4d06-9ab3-f45350b940ab");
pub const IID_Column = &IID_Column_Value;
pub const Column = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Name: *const fn (
            self: *const Column,
            name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Width: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Column,
            width: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Width: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Column,
            width: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayPosition: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Column,
            display_position: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisplayPosition: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Column,
            index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Hidden: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Column,
            hidden: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Hidden: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Column,
            hidden: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetAsSortColumn: *const fn (
            self: *const Column,
            sort_order: _ColumnSortOrder,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSortColumn: *const fn (
            self: *const Column,
            is_sort_column: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn name(self: *const T, name_: ?*?BSTR) HRESULT {
                return @as(*const Column.VTable, @ptrCast(self.vtable)).Name(@as(*const Column, @ptrCast(self)), name_);
            }
            pub inline fn getWidth(self: *const T, width_: ?*i32) HRESULT {
                return @as(*const Column.VTable, @ptrCast(self.vtable)).get_Width(@as(*const Column, @ptrCast(self)), width_);
            }
            pub inline fn putWidth(self: *const T, width_: i32) HRESULT {
                return @as(*const Column.VTable, @ptrCast(self.vtable)).put_Width(@as(*const Column, @ptrCast(self)), width_);
            }
            pub inline fn getDisplayPosition(self: *const T, display_position_: ?*i32) HRESULT {
                return @as(*const Column.VTable, @ptrCast(self.vtable)).get_DisplayPosition(@as(*const Column, @ptrCast(self)), display_position_);
            }
            pub inline fn putDisplayPosition(self: *const T, index_: i32) HRESULT {
                return @as(*const Column.VTable, @ptrCast(self.vtable)).put_DisplayPosition(@as(*const Column, @ptrCast(self)), index_);
            }
            pub inline fn getHidden(self: *const T, hidden_: ?*BOOL) HRESULT {
                return @as(*const Column.VTable, @ptrCast(self.vtable)).get_Hidden(@as(*const Column, @ptrCast(self)), hidden_);
            }
            pub inline fn putHidden(self: *const T, hidden_: BOOL) HRESULT {
                return @as(*const Column.VTable, @ptrCast(self.vtable)).put_Hidden(@as(*const Column, @ptrCast(self)), hidden_);
            }
            pub inline fn setAsSortColumn(self: *const T, sort_order_: _ColumnSortOrder) HRESULT {
                return @as(*const Column.VTable, @ptrCast(self.vtable)).SetAsSortColumn(@as(*const Column, @ptrCast(self)), sort_order_);
            }
            pub inline fn isSortColumn(self: *const T, is_sort_column_: ?*BOOL) HRESULT {
                return @as(*const Column.VTable, @ptrCast(self.vtable)).IsSortColumn(@as(*const Column, @ptrCast(self)), is_sort_column_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_Views_Value = Guid.initString("d6b8c29d-a1ff-4d72-aab0-e381e9b9338d");
pub const IID_Views = &IID_Views_Value;
pub const Views = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Item: *const fn (
            self: *const Views,
            index: i32,
            view: ?*?*View,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Views,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn (
            self: *const Views,
            node: ?*Node,
            view_options: _ViewOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Views,
            retval: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn item(self: *const T, index_: i32, view_: ?*?*View) HRESULT {
                return @as(*const Views.VTable, @ptrCast(self.vtable)).Item(@as(*const Views, @ptrCast(self)), index_, view_);
            }
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const Views.VTable, @ptrCast(self.vtable)).get_Count(@as(*const Views, @ptrCast(self)), count_);
            }
            pub inline fn add(self: *const T, node_: ?*Node, view_options_: _ViewOptions) HRESULT {
                return @as(*const Views.VTable, @ptrCast(self.vtable)).Add(@as(*const Views, @ptrCast(self)), node_, view_options_);
            }
            pub inline fn getNewEnum(self: *const T, retval_: ?*?*IUnknown) HRESULT {
                return @as(*const Views.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const Views, @ptrCast(self)), retval_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_View_Value = Guid.initString("6efc2da2-b38c-457e-9abb-ed2d189b8c38");
pub const IID_View = &IID_View_Value;
pub const View = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ActiveScopeNode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const View,
            node: ?*?*Node,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ActiveScopeNode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const View,
            node: ?*Node,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Selection: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const View,
            nodes: ?*?*Nodes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ListItems: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const View,
            nodes: ?*?*Nodes,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SnapinScopeObject: *const fn (
            self: *const View,
            scope_node: VARIANT,
            scope_node_object: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SnapinSelectionObject: *const fn (
            self: *const View,
            selection_object: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Is: *const fn (
            self: *const View,
            view: ?*View,
            the_same: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Document: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const View,
            document: ?*?*Document,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectAll: *const fn (
            self: *const View,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Select: *const fn (
            self: *const View,
            node: ?*Node,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Deselect: *const fn (
            self: *const View,
            node: ?*Node,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSelected: *const fn (
            self: *const View,
            node: ?*Node,
            is_selected: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisplayScopeNodePropertySheet: *const fn (
            self: *const View,
            scope_node: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisplaySelectionPropertySheet: *const fn (
            self: *const View,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopyScopeNode: *const fn (
            self: *const View,
            scope_node: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CopySelection: *const fn (
            self: *const View,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteScopeNode: *const fn (
            self: *const View,
            scope_node: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteSelection: *const fn (
            self: *const View,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenameScopeNode: *const fn (
            self: *const View,
            new_name: ?BSTR,
            scope_node: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RenameSelectedItem: *const fn (
            self: *const View,
            new_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ScopeNodeContextMenu: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const View,
            scope_node: VARIANT,
            context_menu: ?*?*ContextMenu,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SelectionContextMenu: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const View,
            context_menu: ?*?*ContextMenu,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshScopeNode: *const fn (
            self: *const View,
            scope_node: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RefreshSelection: *const fn (
            self: *const View,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecuteSelectionMenuItem: *const fn (
            self: *const View,
            menu_item_path: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecuteScopeNodeMenuItem: *const fn (
            self: *const View,
            menu_item_path: ?BSTR,
            scope_node: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecuteShellCommand: *const fn (
            self: *const View,
            command: ?BSTR,
            directory: ?BSTR,
            parameters: ?BSTR,
            window_state: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Frame: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const View,
            frame: ?*?*Frame,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const View,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ScopeTreeVisible: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const View,
            visible: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ScopeTreeVisible: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const View,
            visible: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Back: *const fn (
            self: *const View,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Forward: *const fn (
            self: *const View,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_StatusBarText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const View,
            status_bar_text: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Memento: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const View,
            memento: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ViewMemento: *const fn (
            self: *const View,
            memento: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Columns: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const View,
            columns: ?*?*Columns,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CellContents: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const View,
            node: ?*Node,
            column: i32,
            cell_contents: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExportList: *const fn (
            self: *const View,
            file: ?BSTR,
            exportoptions: _ExportListOptions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ListViewMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const View,
            mode: ?*_ListViewMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ListViewMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const View,
            mode: _ListViewMode,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ControlObject: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const View,
            control: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getActiveScopeNode(self: *const T, node_: ?*?*Node) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).get_ActiveScopeNode(@as(*const View, @ptrCast(self)), node_);
            }
            pub inline fn putActiveScopeNode(self: *const T, node_: ?*Node) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).put_ActiveScopeNode(@as(*const View, @ptrCast(self)), node_);
            }
            pub inline fn getSelection(self: *const T, nodes_: ?*?*Nodes) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).get_Selection(@as(*const View, @ptrCast(self)), nodes_);
            }
            pub inline fn getListItems(self: *const T, nodes_: ?*?*Nodes) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).get_ListItems(@as(*const View, @ptrCast(self)), nodes_);
            }
            pub inline fn snapinScopeObject(self: *const T, scope_node_: VARIANT, scope_node_object_: ?*?*IDispatch) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).SnapinScopeObject(@as(*const View, @ptrCast(self)), scope_node_, scope_node_object_);
            }
            pub inline fn snapinSelectionObject(self: *const T, selection_object_: ?*?*IDispatch) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).SnapinSelectionObject(@as(*const View, @ptrCast(self)), selection_object_);
            }
            pub inline fn is(self: *const T, view_: ?*View, the_same_: ?*i16) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).Is(@as(*const View, @ptrCast(self)), view_, the_same_);
            }
            pub inline fn getDocument(self: *const T, document_: ?*?*Document) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).get_Document(@as(*const View, @ptrCast(self)), document_);
            }
            pub inline fn selectAll(self: *const T) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).SelectAll(@as(*const View, @ptrCast(self)));
            }
            pub inline fn select(self: *const T, node_: ?*Node) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).Select(@as(*const View, @ptrCast(self)), node_);
            }
            pub inline fn deselect(self: *const T, node_: ?*Node) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).Deselect(@as(*const View, @ptrCast(self)), node_);
            }
            pub inline fn isSelected(self: *const T, node_: ?*Node, is_selected_: ?*BOOL) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).IsSelected(@as(*const View, @ptrCast(self)), node_, is_selected_);
            }
            pub inline fn displayScopeNodePropertySheet(self: *const T, scope_node_: VARIANT) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).DisplayScopeNodePropertySheet(@as(*const View, @ptrCast(self)), scope_node_);
            }
            pub inline fn displaySelectionPropertySheet(self: *const T) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).DisplaySelectionPropertySheet(@as(*const View, @ptrCast(self)));
            }
            pub inline fn copyScopeNode(self: *const T, scope_node_: VARIANT) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).CopyScopeNode(@as(*const View, @ptrCast(self)), scope_node_);
            }
            pub inline fn copySelection(self: *const T) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).CopySelection(@as(*const View, @ptrCast(self)));
            }
            pub inline fn deleteScopeNode(self: *const T, scope_node_: VARIANT) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).DeleteScopeNode(@as(*const View, @ptrCast(self)), scope_node_);
            }
            pub inline fn deleteSelection(self: *const T) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).DeleteSelection(@as(*const View, @ptrCast(self)));
            }
            pub inline fn renameScopeNode(self: *const T, new_name_: ?BSTR, scope_node_: VARIANT) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).RenameScopeNode(@as(*const View, @ptrCast(self)), new_name_, scope_node_);
            }
            pub inline fn renameSelectedItem(self: *const T, new_name_: ?BSTR) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).RenameSelectedItem(@as(*const View, @ptrCast(self)), new_name_);
            }
            pub inline fn getScopeNodeContextMenu(self: *const T, scope_node_: VARIANT, context_menu_: ?*?*ContextMenu) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).get_ScopeNodeContextMenu(@as(*const View, @ptrCast(self)), scope_node_, context_menu_);
            }
            pub inline fn getSelectionContextMenu(self: *const T, context_menu_: ?*?*ContextMenu) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).get_SelectionContextMenu(@as(*const View, @ptrCast(self)), context_menu_);
            }
            pub inline fn refreshScopeNode(self: *const T, scope_node_: VARIANT) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).RefreshScopeNode(@as(*const View, @ptrCast(self)), scope_node_);
            }
            pub inline fn refreshSelection(self: *const T) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).RefreshSelection(@as(*const View, @ptrCast(self)));
            }
            pub inline fn executeSelectionMenuItem(self: *const T, menu_item_path_: ?BSTR) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).ExecuteSelectionMenuItem(@as(*const View, @ptrCast(self)), menu_item_path_);
            }
            pub inline fn executeScopeNodeMenuItem(self: *const T, menu_item_path_: ?BSTR, scope_node_: VARIANT) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).ExecuteScopeNodeMenuItem(@as(*const View, @ptrCast(self)), menu_item_path_, scope_node_);
            }
            pub inline fn executeShellCommand(self: *const T, command_: ?BSTR, directory_: ?BSTR, parameters_: ?BSTR, window_state_: ?BSTR) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).ExecuteShellCommand(@as(*const View, @ptrCast(self)), command_, directory_, parameters_, window_state_);
            }
            pub inline fn getFrame(self: *const T, frame_: ?*?*Frame) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).get_Frame(@as(*const View, @ptrCast(self)), frame_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).Close(@as(*const View, @ptrCast(self)));
            }
            pub inline fn getScopeTreeVisible(self: *const T, visible_: ?*BOOL) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).get_ScopeTreeVisible(@as(*const View, @ptrCast(self)), visible_);
            }
            pub inline fn putScopeTreeVisible(self: *const T, visible_: BOOL) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).put_ScopeTreeVisible(@as(*const View, @ptrCast(self)), visible_);
            }
            pub inline fn back(self: *const T) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).Back(@as(*const View, @ptrCast(self)));
            }
            pub inline fn forward(self: *const T) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).Forward(@as(*const View, @ptrCast(self)));
            }
            pub inline fn putStatusBarText(self: *const T, status_bar_text_: ?BSTR) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).put_StatusBarText(@as(*const View, @ptrCast(self)), status_bar_text_);
            }
            pub inline fn getMemento(self: *const T, memento_: ?*?*u16) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).get_Memento(@as(*const View, @ptrCast(self)), memento_);
            }
            pub inline fn viewMemento(self: *const T, memento_: ?BSTR) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).ViewMemento(@as(*const View, @ptrCast(self)), memento_);
            }
            pub inline fn getColumns(self: *const T, columns_: ?*?*Columns) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).get_Columns(@as(*const View, @ptrCast(self)), columns_);
            }
            pub inline fn getCellContents(self: *const T, node_: ?*Node, column_: i32, cell_contents_: ?*?*u16) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).get_CellContents(@as(*const View, @ptrCast(self)), node_, column_, cell_contents_);
            }
            pub inline fn exportList(self: *const T, file_: ?BSTR, exportoptions_: _ExportListOptions) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).ExportList(@as(*const View, @ptrCast(self)), file_, exportoptions_);
            }
            pub inline fn getListViewMode(self: *const T, mode_: ?*_ListViewMode) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).get_ListViewMode(@as(*const View, @ptrCast(self)), mode_);
            }
            pub inline fn putListViewMode(self: *const T, mode_: _ListViewMode) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).put_ListViewMode(@as(*const View, @ptrCast(self)), mode_);
            }
            pub inline fn getControlObject(self: *const T, control_: ?*?*IDispatch) HRESULT {
                return @as(*const View.VTable, @ptrCast(self.vtable)).get_ControlObject(@as(*const View, @ptrCast(self)), control_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_Nodes_Value = Guid.initString("313b01df-b22f-4d42-b1b8-483cdcf51d35");
pub const IID_Nodes = &IID_Nodes_Value;
pub const Nodes = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Nodes,
            retval: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const Nodes,
            index: i32,
            node: ?*?*Node,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Nodes,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, retval_: ?*?*IUnknown) HRESULT {
                return @as(*const Nodes.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const Nodes, @ptrCast(self)), retval_);
            }
            pub inline fn item(self: *const T, index_: i32, node_: ?*?*Node) HRESULT {
                return @as(*const Nodes.VTable, @ptrCast(self.vtable)).Item(@as(*const Nodes, @ptrCast(self)), index_, node_);
            }
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const Nodes.VTable, @ptrCast(self.vtable)).get_Count(@as(*const Nodes, @ptrCast(self)), count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_ContextMenu_Value = Guid.initString("dab39ce0-25e6-4e07-8362-ba9c95706545");
pub const IID_ContextMenu = &IID_ContextMenu_Value;
pub const ContextMenu = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ContextMenu,
            retval: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ContextMenu,
            index_or_path: VARIANT,
            menu_item: ?*?*MenuItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ContextMenu,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, retval_: ?*?*IUnknown) HRESULT {
                return @as(*const ContextMenu.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const ContextMenu, @ptrCast(self)), retval_);
            }
            pub inline fn getItem(self: *const T, index_or_path_: VARIANT, menu_item_: ?*?*MenuItem) HRESULT {
                return @as(*const ContextMenu.VTable, @ptrCast(self.vtable)).get_Item(@as(*const ContextMenu, @ptrCast(self)), index_or_path_, menu_item_);
            }
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const ContextMenu.VTable, @ptrCast(self.vtable)).get_Count(@as(*const ContextMenu, @ptrCast(self)), count_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_MenuItem_Value = Guid.initString("0178fad1-b361-4b27-96ad-67c57ebf2e1d");
pub const IID_MenuItem = &IID_MenuItem_Value;
pub const MenuItem = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisplayName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const MenuItem,
            display_name: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LanguageIndependentName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const MenuItem,
            language_independent_name: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Path: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const MenuItem,
            path: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LanguageIndependentPath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const MenuItem,
            language_independent_path: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Execute: *const fn (
            self: *const MenuItem,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const MenuItem,
            enabled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getDisplayName(self: *const T, display_name_: ?*?*u16) HRESULT {
                return @as(*const MenuItem.VTable, @ptrCast(self.vtable)).get_DisplayName(@as(*const MenuItem, @ptrCast(self)), display_name_);
            }
            pub inline fn getLanguageIndependentName(self: *const T, language_independent_name_: ?*?*u16) HRESULT {
                return @as(*const MenuItem.VTable, @ptrCast(self.vtable)).get_LanguageIndependentName(@as(*const MenuItem, @ptrCast(self)), language_independent_name_);
            }
            pub inline fn getPath(self: *const T, path_: ?*?*u16) HRESULT {
                return @as(*const MenuItem.VTable, @ptrCast(self.vtable)).get_Path(@as(*const MenuItem, @ptrCast(self)), path_);
            }
            pub inline fn getLanguageIndependentPath(self: *const T, language_independent_path_: ?*?*u16) HRESULT {
                return @as(*const MenuItem.VTable, @ptrCast(self.vtable)).get_LanguageIndependentPath(@as(*const MenuItem, @ptrCast(self)), language_independent_path_);
            }
            pub inline fn execute(self: *const T) HRESULT {
                return @as(*const MenuItem.VTable, @ptrCast(self.vtable)).Execute(@as(*const MenuItem, @ptrCast(self)));
            }
            pub inline fn getEnabled(self: *const T, enabled_: ?*BOOL) HRESULT {
                return @as(*const MenuItem.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const MenuItem, @ptrCast(self)), enabled_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_Properties_Value = Guid.initString("2886abc2-a425-42b2-91c6-e25c0e04581c");
pub const IID_Properties = &IID_Properties_Value;
pub const Properties = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Properties,
            retval: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Item: *const fn (
            self: *const Properties,
            name: ?BSTR,
            property: ?*?*Property,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Properties,
            count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn (
            self: *const Properties,
            name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getNewEnum(self: *const T, retval_: ?*?*IUnknown) HRESULT {
                return @as(*const Properties.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const Properties, @ptrCast(self)), retval_);
            }
            pub inline fn item(self: *const T, name_: ?BSTR, property_: ?*?*Property) HRESULT {
                return @as(*const Properties.VTable, @ptrCast(self.vtable)).Item(@as(*const Properties, @ptrCast(self)), name_, property_);
            }
            pub inline fn getCount(self: *const T, count_: ?*i32) HRESULT {
                return @as(*const Properties.VTable, @ptrCast(self.vtable)).get_Count(@as(*const Properties, @ptrCast(self)), count_);
            }
            pub inline fn remove(self: *const T, name_: ?BSTR) HRESULT {
                return @as(*const Properties.VTable, @ptrCast(self.vtable)).Remove(@as(*const Properties, @ptrCast(self)), name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_Property_Value = Guid.initString("4600c3a5-e301-41d8-b6d0-ef2e4212e0ca");
pub const IID_Property = &IID_Property_Value;
pub const Property = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Property,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Property,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const Property,
            name: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getValue(self: *const T, value_: ?*VARIANT) HRESULT {
                return @as(*const Property.VTable, @ptrCast(self.vtable)).get_Value(@as(*const Property, @ptrCast(self)), value_);
            }
            pub inline fn putValue(self: *const T, value_: VARIANT) HRESULT {
                return @as(*const Property.VTable, @ptrCast(self.vtable)).put_Value(@as(*const Property, @ptrCast(self)), value_);
            }
            pub inline fn getName(self: *const T, name_: ?*?*u16) HRESULT {
                return @as(*const Property.VTable, @ptrCast(self.vtable)).get_Name(@as(*const Property, @ptrCast(self)), name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const CLSID_MMCVersionInfo_Value = Guid.initString("d6fedb1d-cf21-4bd9-af3b-c5468e9c6684");
pub const CLSID_MMCVersionInfo = &CLSID_MMCVersionInfo_Value;

const CLSID_ConsolePower_Value = Guid.initString("f0285374-dff1-11d3-b433-00c04f8ecd78");
pub const CLSID_ConsolePower = &CLSID_ConsolePower_Value;

pub const MMC_RESULT_VIEW_STYLE = enum(i32) {
    SINGLESEL = 1,
    SHOWSELALWAYS = 2,
    NOSORTHEADER = 4,
    ENSUREFOCUSVISIBLE = 8,
};
pub const MMC_SINGLESEL = MMC_RESULT_VIEW_STYLE.SINGLESEL;
pub const MMC_SHOWSELALWAYS = MMC_RESULT_VIEW_STYLE.SHOWSELALWAYS;
pub const MMC_NOSORTHEADER = MMC_RESULT_VIEW_STYLE.NOSORTHEADER;
pub const MMC_ENSUREFOCUSVISIBLE = MMC_RESULT_VIEW_STYLE.ENSUREFOCUSVISIBLE;

pub const MMC_CONTROL_TYPE = enum(i32) {
    TOOLBAR = 0,
    MENUBUTTON = 1,
    COMBOBOXBAR = 2,
};
pub const TOOLBAR = MMC_CONTROL_TYPE.TOOLBAR;
pub const MENUBUTTON = MMC_CONTROL_TYPE.MENUBUTTON;
pub const COMBOBOXBAR = MMC_CONTROL_TYPE.COMBOBOXBAR;

pub const MMC_CONSOLE_VERB = enum(i32) {
    NONE = 0,
    OPEN = 32768,
    COPY = 32769,
    PASTE = 32770,
    DELETE = 32771,
    PROPERTIES = 32772,
    RENAME = 32773,
    REFRESH = 32774,
    PRINT = 32775,
    CUT = 32776,
    MAX = 32777,
    // FIRST = 32768, this enum value conflicts with OPEN
    // LAST = 32776, this enum value conflicts with CUT
};
pub const MMC_VERB_NONE = MMC_CONSOLE_VERB.NONE;
pub const MMC_VERB_OPEN = MMC_CONSOLE_VERB.OPEN;
pub const MMC_VERB_COPY = MMC_CONSOLE_VERB.COPY;
pub const MMC_VERB_PASTE = MMC_CONSOLE_VERB.PASTE;
pub const MMC_VERB_DELETE = MMC_CONSOLE_VERB.DELETE;
pub const MMC_VERB_PROPERTIES = MMC_CONSOLE_VERB.PROPERTIES;
pub const MMC_VERB_RENAME = MMC_CONSOLE_VERB.RENAME;
pub const MMC_VERB_REFRESH = MMC_CONSOLE_VERB.REFRESH;
pub const MMC_VERB_PRINT = MMC_CONSOLE_VERB.PRINT;
pub const MMC_VERB_CUT = MMC_CONSOLE_VERB.CUT;
pub const MMC_VERB_MAX = MMC_CONSOLE_VERB.MAX;
pub const MMC_VERB_FIRST = MMC_CONSOLE_VERB.OPEN;
pub const MMC_VERB_LAST = MMC_CONSOLE_VERB.CUT;

pub const MMCBUTTON = extern struct {
    nBitmap: i32,
    idCommand: i32,
    fsState: u8,
    fsType: u8,
    lpButtonText: ?PWSTR,
    lpTooltipText: ?PWSTR,
};

pub const MMC_BUTTON_STATE = enum(i32) {
    ENABLED = 1,
    CHECKED = 2,
    HIDDEN = 4,
    INDETERMINATE = 8,
    BUTTONPRESSED = 16,
};
pub const ENABLED = MMC_BUTTON_STATE.ENABLED;
pub const CHECKED = MMC_BUTTON_STATE.CHECKED;
pub const HIDDEN = MMC_BUTTON_STATE.HIDDEN;
pub const INDETERMINATE = MMC_BUTTON_STATE.INDETERMINATE;
pub const BUTTONPRESSED = MMC_BUTTON_STATE.BUTTONPRESSED;

pub const RESULTDATAITEM = extern struct {
    mask: u32,
    bScopeItem: BOOL,
    itemID: isize,
    nIndex: i32,
    nCol: i32,
    str: ?PWSTR,
    nImage: i32,
    nState: u32,
    lParam: LPARAM,
    iIndent: i32,
};

pub const RESULTFINDINFO = extern struct {
    psz: ?PWSTR,
    nStart: i32,
    dwOptions: u32,
};

pub const SCOPEDATAITEM = extern struct {
    mask: u32,
    displayname: ?PWSTR,
    nImage: i32,
    nOpenImage: i32,
    nState: u32,
    cChildren: i32,
    lParam: LPARAM,
    relativeID: isize,
    ID: isize,
};

pub const MMC_SCOPE_ITEM_STATE = enum(i32) {
    NORMAL = 1,
    BOLD = 2,
    EXPANDEDONCE = 3,
};
pub const MMC_SCOPE_ITEM_STATE_NORMAL = MMC_SCOPE_ITEM_STATE.NORMAL;
pub const MMC_SCOPE_ITEM_STATE_BOLD = MMC_SCOPE_ITEM_STATE.BOLD;
pub const MMC_SCOPE_ITEM_STATE_EXPANDEDONCE = MMC_SCOPE_ITEM_STATE.EXPANDEDONCE;

pub const CONTEXTMENUITEM = extern struct {
    strName: ?PWSTR,
    strStatusBarText: ?PWSTR,
    lCommandID: i32,
    lInsertionPointID: i32,
    fFlags: i32,
    fSpecialFlags: i32,
};

pub const MMC_MENU_COMMAND_IDS = enum(i32) {
    T = -1,
};
pub const MMCC_STANDARD_VIEW_SELECT = MMC_MENU_COMMAND_IDS.T;

pub const MENUBUTTONDATA = extern struct {
    idCommand: i32,
    x: i32,
    y: i32,
};

pub const MMC_FILTER_TYPE = enum(i32) {
    STRING_FILTER = 0,
    INT_FILTER = 1,
    FILTER_NOVALUE = 32768,
};
pub const MMC_STRING_FILTER = MMC_FILTER_TYPE.STRING_FILTER;
pub const MMC_INT_FILTER = MMC_FILTER_TYPE.INT_FILTER;
pub const MMC_FILTER_NOVALUE = MMC_FILTER_TYPE.FILTER_NOVALUE;

pub const MMC_FILTERDATA = extern struct {
    pszText: ?PWSTR,
    cchTextMax: i32,
    lValue: i32,
};

pub const MMC_FILTER_CHANGE_CODE = enum(i32) {
    DISABLE = 0,
    ENABLE = 1,
    VALUE_CHANGE = 2,
};
pub const MFCC_DISABLE = MMC_FILTER_CHANGE_CODE.DISABLE;
pub const MFCC_ENABLE = MMC_FILTER_CHANGE_CODE.ENABLE;
pub const MFCC_VALUE_CHANGE = MMC_FILTER_CHANGE_CODE.VALUE_CHANGE;

pub const MMC_RESTORE_VIEW = extern struct {
    dwSize: u32,
    cookie: isize,
    pViewType: ?PWSTR,
    lViewOptions: i32,
};

pub const MMC_EXPANDSYNC_STRUCT = extern struct {
    bHandled: BOOL,
    bExpanding: BOOL,
    hItem: isize,
};

pub const MMC_VISIBLE_COLUMNS = extern struct {
    nVisibleColumns: i32,
    rgVisibleCols: [1]i32,
};

pub const MMC_NOTIFY_TYPE = enum(i32) {
    ACTIVATE = 32769,
    ADD_IMAGES = 32770,
    BTN_CLICK = 32771,
    CLICK = 32772,
    COLUMN_CLICK = 32773,
    CONTEXTMENU = 32774,
    CUTORMOVE = 32775,
    DBLCLICK = 32776,
    DELETE = 32777,
    DESELECT_ALL = 32778,
    EXPAND = 32779,
    HELP = 32780,
    MENU_BTNCLICK = 32781,
    MINIMIZED = 32782,
    PASTE = 32783,
    PROPERTY_CHANGE = 32784,
    QUERY_PASTE = 32785,
    REFRESH = 32786,
    REMOVE_CHILDREN = 32787,
    RENAME = 32788,
    SELECT = 32789,
    SHOW = 32790,
    VIEW_CHANGE = 32791,
    SNAPINHELP = 32792,
    CONTEXTHELP = 32793,
    INITOCX = 32794,
    FILTER_CHANGE = 32795,
    FILTERBTN_CLICK = 32796,
    RESTORE_VIEW = 32797,
    PRINT = 32798,
    PRELOAD = 32799,
    LISTPAD = 32800,
    EXPANDSYNC = 32801,
    COLUMNS_CHANGED = 32802,
    CANPASTE_OUTOFPROC = 32803,
};
pub const MMCN_ACTIVATE = MMC_NOTIFY_TYPE.ACTIVATE;
pub const MMCN_ADD_IMAGES = MMC_NOTIFY_TYPE.ADD_IMAGES;
pub const MMCN_BTN_CLICK = MMC_NOTIFY_TYPE.BTN_CLICK;
pub const MMCN_CLICK = MMC_NOTIFY_TYPE.CLICK;
pub const MMCN_COLUMN_CLICK = MMC_NOTIFY_TYPE.COLUMN_CLICK;
pub const MMCN_CONTEXTMENU = MMC_NOTIFY_TYPE.CONTEXTMENU;
pub const MMCN_CUTORMOVE = MMC_NOTIFY_TYPE.CUTORMOVE;
pub const MMCN_DBLCLICK = MMC_NOTIFY_TYPE.DBLCLICK;
pub const MMCN_DELETE = MMC_NOTIFY_TYPE.DELETE;
pub const MMCN_DESELECT_ALL = MMC_NOTIFY_TYPE.DESELECT_ALL;
pub const MMCN_EXPAND = MMC_NOTIFY_TYPE.EXPAND;
pub const MMCN_HELP = MMC_NOTIFY_TYPE.HELP;
pub const MMCN_MENU_BTNCLICK = MMC_NOTIFY_TYPE.MENU_BTNCLICK;
pub const MMCN_MINIMIZED = MMC_NOTIFY_TYPE.MINIMIZED;
pub const MMCN_PASTE = MMC_NOTIFY_TYPE.PASTE;
pub const MMCN_PROPERTY_CHANGE = MMC_NOTIFY_TYPE.PROPERTY_CHANGE;
pub const MMCN_QUERY_PASTE = MMC_NOTIFY_TYPE.QUERY_PASTE;
pub const MMCN_REFRESH = MMC_NOTIFY_TYPE.REFRESH;
pub const MMCN_REMOVE_CHILDREN = MMC_NOTIFY_TYPE.REMOVE_CHILDREN;
pub const MMCN_RENAME = MMC_NOTIFY_TYPE.RENAME;
pub const MMCN_SELECT = MMC_NOTIFY_TYPE.SELECT;
pub const MMCN_SHOW = MMC_NOTIFY_TYPE.SHOW;
pub const MMCN_VIEW_CHANGE = MMC_NOTIFY_TYPE.VIEW_CHANGE;
pub const MMCN_SNAPINHELP = MMC_NOTIFY_TYPE.SNAPINHELP;
pub const MMCN_CONTEXTHELP = MMC_NOTIFY_TYPE.CONTEXTHELP;
pub const MMCN_INITOCX = MMC_NOTIFY_TYPE.INITOCX;
pub const MMCN_FILTER_CHANGE = MMC_NOTIFY_TYPE.FILTER_CHANGE;
pub const MMCN_FILTERBTN_CLICK = MMC_NOTIFY_TYPE.FILTERBTN_CLICK;
pub const MMCN_RESTORE_VIEW = MMC_NOTIFY_TYPE.RESTORE_VIEW;
pub const MMCN_PRINT = MMC_NOTIFY_TYPE.PRINT;
pub const MMCN_PRELOAD = MMC_NOTIFY_TYPE.PRELOAD;
pub const MMCN_LISTPAD = MMC_NOTIFY_TYPE.LISTPAD;
pub const MMCN_EXPANDSYNC = MMC_NOTIFY_TYPE.EXPANDSYNC;
pub const MMCN_COLUMNS_CHANGED = MMC_NOTIFY_TYPE.COLUMNS_CHANGED;
pub const MMCN_CANPASTE_OUTOFPROC = MMC_NOTIFY_TYPE.CANPASTE_OUTOFPROC;

pub const DATA_OBJECT_TYPES = enum(i32) {
    SCOPE = 32768,
    RESULT = 32769,
    SNAPIN_MANAGER = 32770,
    UNINITIALIZED = 65535,
};
pub const CCT_SCOPE = DATA_OBJECT_TYPES.SCOPE;
pub const CCT_RESULT = DATA_OBJECT_TYPES.RESULT;
pub const CCT_SNAPIN_MANAGER = DATA_OBJECT_TYPES.SNAPIN_MANAGER;
pub const CCT_UNINITIALIZED = DATA_OBJECT_TYPES.UNINITIALIZED;

pub const SMMCDataObjects = extern struct {
    count: u32,
    lpDataObject: [1]?*IDataObject,
};

pub const SMMCObjectTypes = extern struct {
    count: u32,
    guid: [1]Guid,
};

pub const SNodeID = extern struct {
    cBytes: u32,
    id: [1]u8,
};

pub const SNodeID2 = extern struct {
    dwFlags: u32,
    cBytes: u32,
    id: [1]u8,
};

pub const SColumnSetID = extern struct {
    dwFlags: u32,
    cBytes: u32,
    id: [1]u8,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IComponentData_Value = Guid.initString("955ab28a-5218-11d0-a985-00c04fd8d565");
pub const IID_IComponentData = &IID_IComponentData_Value;
pub const IComponentData = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IComponentData,
            p_unknown: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateComponent: *const fn (
            self: *const IComponentData,
            pp_component: ?*?*IComponent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Notify: *const fn (
            self: *const IComponentData,
            lp_data_object: ?*IDataObject,
            event: MMC_NOTIFY_TYPE,
            arg: LPARAM,
            param3: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Destroy: *const fn (
            self: *const IComponentData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryDataObject: *const fn (
            self: *const IComponentData,
            cookie: isize,
            type: DATA_OBJECT_TYPES,
            pp_data_object: ?*?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayInfo: *const fn (
            self: *const IComponentData,
            p_scope_data_item: ?*SCOPEDATAITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompareObjects: *const fn (
            self: *const IComponentData,
            lp_data_object_a: ?*IDataObject,
            lp_data_object_b: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_unknown_: ?*IUnknown) HRESULT {
                return @as(*const IComponentData.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IComponentData, @ptrCast(self)), p_unknown_);
            }
            pub inline fn createComponent(self: *const T, pp_component_: ?*?*IComponent) HRESULT {
                return @as(*const IComponentData.VTable, @ptrCast(self.vtable)).CreateComponent(@as(*const IComponentData, @ptrCast(self)), pp_component_);
            }
            pub inline fn notify(self: *const T, lp_data_object_: ?*IDataObject, event_: MMC_NOTIFY_TYPE, arg_: LPARAM, param3_: LPARAM) HRESULT {
                return @as(*const IComponentData.VTable, @ptrCast(self.vtable)).Notify(@as(*const IComponentData, @ptrCast(self)), lp_data_object_, event_, arg_, param3_);
            }
            pub inline fn destroy(self: *const T) HRESULT {
                return @as(*const IComponentData.VTable, @ptrCast(self.vtable)).Destroy(@as(*const IComponentData, @ptrCast(self)));
            }
            pub inline fn queryDataObject(self: *const T, cookie_: isize, type_: DATA_OBJECT_TYPES, pp_data_object_: ?*?*IDataObject) HRESULT {
                return @as(*const IComponentData.VTable, @ptrCast(self.vtable)).QueryDataObject(@as(*const IComponentData, @ptrCast(self)), cookie_, type_, pp_data_object_);
            }
            pub inline fn getDisplayInfo(self: *const T, p_scope_data_item_: ?*SCOPEDATAITEM) HRESULT {
                return @as(*const IComponentData.VTable, @ptrCast(self.vtable)).GetDisplayInfo(@as(*const IComponentData, @ptrCast(self)), p_scope_data_item_);
            }
            pub inline fn compareObjects(self: *const T, lp_data_object_a_: ?*IDataObject, lp_data_object_b_: ?*IDataObject) HRESULT {
                return @as(*const IComponentData.VTable, @ptrCast(self.vtable)).CompareObjects(@as(*const IComponentData, @ptrCast(self)), lp_data_object_a_, lp_data_object_b_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IComponent_Value = Guid.initString("43136eb2-d36c-11cf-adbc-00aa00a80033");
pub const IID_IComponent = &IID_IComponent_Value;
pub const IComponent = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IComponent,
            lp_console: ?*IConsole,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Notify: *const fn (
            self: *const IComponent,
            lp_data_object: ?*IDataObject,
            event: MMC_NOTIFY_TYPE,
            arg: LPARAM,
            param3: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Destroy: *const fn (
            self: *const IComponent,
            cookie: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryDataObject: *const fn (
            self: *const IComponent,
            cookie: isize,
            type: DATA_OBJECT_TYPES,
            pp_data_object: ?*?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResultViewType: *const fn (
            self: *const IComponent,
            cookie: isize,
            pp_view_type: ?*?PWSTR,
            p_view_options: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisplayInfo: *const fn (
            self: *const IComponent,
            p_result_data_item: ?*RESULTDATAITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CompareObjects: *const fn (
            self: *const IComponent,
            lp_data_object_a: ?*IDataObject,
            lp_data_object_b: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, lp_console_: ?*IConsole) HRESULT {
                return @as(*const IComponent.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IComponent, @ptrCast(self)), lp_console_);
            }
            pub inline fn notify(self: *const T, lp_data_object_: ?*IDataObject, event_: MMC_NOTIFY_TYPE, arg_: LPARAM, param3_: LPARAM) HRESULT {
                return @as(*const IComponent.VTable, @ptrCast(self.vtable)).Notify(@as(*const IComponent, @ptrCast(self)), lp_data_object_, event_, arg_, param3_);
            }
            pub inline fn destroy(self: *const T, cookie_: isize) HRESULT {
                return @as(*const IComponent.VTable, @ptrCast(self.vtable)).Destroy(@as(*const IComponent, @ptrCast(self)), cookie_);
            }
            pub inline fn queryDataObject(self: *const T, cookie_: isize, type_: DATA_OBJECT_TYPES, pp_data_object_: ?*?*IDataObject) HRESULT {
                return @as(*const IComponent.VTable, @ptrCast(self.vtable)).QueryDataObject(@as(*const IComponent, @ptrCast(self)), cookie_, type_, pp_data_object_);
            }
            pub inline fn getResultViewType(self: *const T, cookie_: isize, pp_view_type_: ?*?PWSTR, p_view_options_: ?*i32) HRESULT {
                return @as(*const IComponent.VTable, @ptrCast(self.vtable)).GetResultViewType(@as(*const IComponent, @ptrCast(self)), cookie_, pp_view_type_, p_view_options_);
            }
            pub inline fn getDisplayInfo(self: *const T, p_result_data_item_: ?*RESULTDATAITEM) HRESULT {
                return @as(*const IComponent.VTable, @ptrCast(self.vtable)).GetDisplayInfo(@as(*const IComponent, @ptrCast(self)), p_result_data_item_);
            }
            pub inline fn compareObjects(self: *const T, lp_data_object_a_: ?*IDataObject, lp_data_object_b_: ?*IDataObject) HRESULT {
                return @as(*const IComponent.VTable, @ptrCast(self.vtable)).CompareObjects(@as(*const IComponent, @ptrCast(self)), lp_data_object_a_, lp_data_object_b_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IResultDataCompare_Value = Guid.initString("e8315a52-7a1a-11d0-a2d2-00c04fd909dd");
pub const IID_IResultDataCompare = &IID_IResultDataCompare_Value;
pub const IResultDataCompare = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Compare: *const fn (
            self: *const IResultDataCompare,
            l_user_param: LPARAM,
            cookie_a: isize,
            cookie_b: isize,
            pn_result: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn compare(self: *const T, l_user_param_: LPARAM, cookie_a_: isize, cookie_b_: isize, pn_result_: ?*i32) HRESULT {
                return @as(*const IResultDataCompare.VTable, @ptrCast(self.vtable)).Compare(@as(*const IResultDataCompare, @ptrCast(self)), l_user_param_, cookie_a_, cookie_b_, pn_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IResultOwnerData_Value = Guid.initString("9cb396d8-ea83-11d0-aef1-00c04fb6dd2c");
pub const IID_IResultOwnerData = &IID_IResultOwnerData_Value;
pub const IResultOwnerData = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindItem: *const fn (
            self: *const IResultOwnerData,
            p_find_info: ?*RESULTFINDINFO,
            pn_found_index: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CacheHint: *const fn (
            self: *const IResultOwnerData,
            n_start_index: i32,
            n_end_index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SortItems: *const fn (
            self: *const IResultOwnerData,
            n_column: i32,
            dw_sort_options: u32,
            l_user_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn findItem(self: *const T, p_find_info_: ?*RESULTFINDINFO, pn_found_index_: ?*i32) HRESULT {
                return @as(*const IResultOwnerData.VTable, @ptrCast(self.vtable)).FindItem(@as(*const IResultOwnerData, @ptrCast(self)), p_find_info_, pn_found_index_);
            }
            pub inline fn cacheHint(self: *const T, n_start_index_: i32, n_end_index_: i32) HRESULT {
                return @as(*const IResultOwnerData.VTable, @ptrCast(self.vtable)).CacheHint(@as(*const IResultOwnerData, @ptrCast(self)), n_start_index_, n_end_index_);
            }
            pub inline fn sortItems(self: *const T, n_column_: i32, dw_sort_options_: u32, l_user_param_: LPARAM) HRESULT {
                return @as(*const IResultOwnerData.VTable, @ptrCast(self.vtable)).SortItems(@as(*const IResultOwnerData, @ptrCast(self)), n_column_, dw_sort_options_, l_user_param_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IConsole_Value = Guid.initString("43136eb1-d36c-11cf-adbc-00aa00a80033");
pub const IID_IConsole = &IID_IConsole_Value;
pub const IConsole = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetHeader: *const fn (
            self: *const IConsole,
            p_header: ?*IHeaderCtrl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetToolbar: *const fn (
            self: *const IConsole,
            p_toolbar: ?*IToolbar,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryResultView: *const fn (
            self: *const IConsole,
            p_unknown: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryScopeImageList: *const fn (
            self: *const IConsole,
            pp_image_list: ?*?*IImageList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryResultImageList: *const fn (
            self: *const IConsole,
            pp_image_list: ?*?*IImageList,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateAllViews: *const fn (
            self: *const IConsole,
            lp_data_object: ?*IDataObject,
            data: LPARAM,
            hint: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MessageBox: *const fn (
            self: *const IConsole,
            lpsz_text: ?[*:0]const u16,
            lpsz_title: ?[*:0]const u16,
            fu_style: u32,
            pi_retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryConsoleVerb: *const fn (
            self: *const IConsole,
            pp_console_verb: ?*?*IConsoleVerb,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SelectScopeItem: *const fn (
            self: *const IConsole,
            h_scope_item: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMainWindow: *const fn (
            self: *const IConsole,
            phwnd: ?*?HWND,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NewWindow: *const fn (
            self: *const IConsole,
            h_scope_item: isize,
            l_options: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setHeader(self: *const T, p_header_: ?*IHeaderCtrl) HRESULT {
                return @as(*const IConsole.VTable, @ptrCast(self.vtable)).SetHeader(@as(*const IConsole, @ptrCast(self)), p_header_);
            }
            pub inline fn setToolbar(self: *const T, p_toolbar_: ?*IToolbar) HRESULT {
                return @as(*const IConsole.VTable, @ptrCast(self.vtable)).SetToolbar(@as(*const IConsole, @ptrCast(self)), p_toolbar_);
            }
            pub inline fn queryResultView(self: *const T, p_unknown_: ?*?*IUnknown) HRESULT {
                return @as(*const IConsole.VTable, @ptrCast(self.vtable)).QueryResultView(@as(*const IConsole, @ptrCast(self)), p_unknown_);
            }
            pub inline fn queryScopeImageList(self: *const T, pp_image_list_: ?*?*IImageList) HRESULT {
                return @as(*const IConsole.VTable, @ptrCast(self.vtable)).QueryScopeImageList(@as(*const IConsole, @ptrCast(self)), pp_image_list_);
            }
            pub inline fn queryResultImageList(self: *const T, pp_image_list_: ?*?*IImageList) HRESULT {
                return @as(*const IConsole.VTable, @ptrCast(self.vtable)).QueryResultImageList(@as(*const IConsole, @ptrCast(self)), pp_image_list_);
            }
            pub inline fn updateAllViews(self: *const T, lp_data_object_: ?*IDataObject, data_: LPARAM, hint_: isize) HRESULT {
                return @as(*const IConsole.VTable, @ptrCast(self.vtable)).UpdateAllViews(@as(*const IConsole, @ptrCast(self)), lp_data_object_, data_, hint_);
            }
            pub inline fn messageBox(self: *const T, lpsz_text_: ?[*:0]const u16, lpsz_title_: ?[*:0]const u16, fu_style_: u32, pi_retval_: ?*i32) HRESULT {
                return @as(*const IConsole.VTable, @ptrCast(self.vtable)).MessageBox(@as(*const IConsole, @ptrCast(self)), lpsz_text_, lpsz_title_, fu_style_, pi_retval_);
            }
            pub inline fn queryConsoleVerb(self: *const T, pp_console_verb_: ?*?*IConsoleVerb) HRESULT {
                return @as(*const IConsole.VTable, @ptrCast(self.vtable)).QueryConsoleVerb(@as(*const IConsole, @ptrCast(self)), pp_console_verb_);
            }
            pub inline fn selectScopeItem(self: *const T, h_scope_item_: isize) HRESULT {
                return @as(*const IConsole.VTable, @ptrCast(self.vtable)).SelectScopeItem(@as(*const IConsole, @ptrCast(self)), h_scope_item_);
            }
            pub inline fn getMainWindow(self: *const T, phwnd_: ?*?HWND) HRESULT {
                return @as(*const IConsole.VTable, @ptrCast(self.vtable)).GetMainWindow(@as(*const IConsole, @ptrCast(self)), phwnd_);
            }
            pub inline fn newWindow(self: *const T, h_scope_item_: isize, l_options_: u32) HRESULT {
                return @as(*const IConsole.VTable, @ptrCast(self.vtable)).NewWindow(@as(*const IConsole, @ptrCast(self)), h_scope_item_, l_options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IHeaderCtrl_Value = Guid.initString("43136eb3-d36c-11cf-adbc-00aa00a80033");
pub const IID_IHeaderCtrl = &IID_IHeaderCtrl_Value;
pub const IHeaderCtrl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InsertColumn: *const fn (
            self: *const IHeaderCtrl,
            n_col: i32,
            title: ?[*:0]const u16,
            n_format: i32,
            n_width: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteColumn: *const fn (
            self: *const IHeaderCtrl,
            n_col: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColumnText: *const fn (
            self: *const IHeaderCtrl,
            n_col: i32,
            title: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnText: *const fn (
            self: *const IHeaderCtrl,
            n_col: i32,
            p_text: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColumnWidth: *const fn (
            self: *const IHeaderCtrl,
            n_col: i32,
            n_width: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnWidth: *const fn (
            self: *const IHeaderCtrl,
            n_col: i32,
            p_width: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn insertColumn(self: *const T, n_col_: i32, title_: ?[*:0]const u16, n_format_: i32, n_width_: i32) HRESULT {
                return @as(*const IHeaderCtrl.VTable, @ptrCast(self.vtable)).InsertColumn(@as(*const IHeaderCtrl, @ptrCast(self)), n_col_, title_, n_format_, n_width_);
            }
            pub inline fn deleteColumn(self: *const T, n_col_: i32) HRESULT {
                return @as(*const IHeaderCtrl.VTable, @ptrCast(self.vtable)).DeleteColumn(@as(*const IHeaderCtrl, @ptrCast(self)), n_col_);
            }
            pub inline fn setColumnText(self: *const T, n_col_: i32, title_: ?[*:0]const u16) HRESULT {
                return @as(*const IHeaderCtrl.VTable, @ptrCast(self.vtable)).SetColumnText(@as(*const IHeaderCtrl, @ptrCast(self)), n_col_, title_);
            }
            pub inline fn getColumnText(self: *const T, n_col_: i32, p_text_: ?*?PWSTR) HRESULT {
                return @as(*const IHeaderCtrl.VTable, @ptrCast(self.vtable)).GetColumnText(@as(*const IHeaderCtrl, @ptrCast(self)), n_col_, p_text_);
            }
            pub inline fn setColumnWidth(self: *const T, n_col_: i32, n_width_: i32) HRESULT {
                return @as(*const IHeaderCtrl.VTable, @ptrCast(self.vtable)).SetColumnWidth(@as(*const IHeaderCtrl, @ptrCast(self)), n_col_, n_width_);
            }
            pub inline fn getColumnWidth(self: *const T, n_col_: i32, p_width_: ?*i32) HRESULT {
                return @as(*const IHeaderCtrl.VTable, @ptrCast(self.vtable)).GetColumnWidth(@as(*const IHeaderCtrl, @ptrCast(self)), n_col_, p_width_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CCM_INSERTIONPOINTID = enum(i32) {
    MASK_SPECIAL = -65536,
    MASK_SHARED = -2147483648,
    MASK_CREATE_PRIMARY = 1073741824,
    MASK_ADD_PRIMARY = 536870912,
    MASK_ADD_3RDPARTY = 268435456,
    MASK_RESERVED = 268369920,
    MASK_FLAGINDEX = 31,
    PRIMARY_TOP = -1610612736,
    PRIMARY_NEW = -1610612735,
    PRIMARY_TASK = -1610612734,
    PRIMARY_VIEW = -1610612733,
    PRIMARY_HELP = -1610612732,
    @"3RDPARTY_NEW" = -1879048191,
    @"3RDPARTY_TASK" = -1879048190,
    // ROOT_MENU = -2147483648, this enum value conflicts with MASK_SHARED
};
pub const CCM_INSERTIONPOINTID_MASK_SPECIAL = CCM_INSERTIONPOINTID.MASK_SPECIAL;
pub const CCM_INSERTIONPOINTID_MASK_SHARED = CCM_INSERTIONPOINTID.MASK_SHARED;
pub const CCM_INSERTIONPOINTID_MASK_CREATE_PRIMARY = CCM_INSERTIONPOINTID.MASK_CREATE_PRIMARY;
pub const CCM_INSERTIONPOINTID_MASK_ADD_PRIMARY = CCM_INSERTIONPOINTID.MASK_ADD_PRIMARY;
pub const CCM_INSERTIONPOINTID_MASK_ADD_3RDPARTY = CCM_INSERTIONPOINTID.MASK_ADD_3RDPARTY;
pub const CCM_INSERTIONPOINTID_MASK_RESERVED = CCM_INSERTIONPOINTID.MASK_RESERVED;
pub const CCM_INSERTIONPOINTID_MASK_FLAGINDEX = CCM_INSERTIONPOINTID.MASK_FLAGINDEX;
pub const CCM_INSERTIONPOINTID_PRIMARY_TOP = CCM_INSERTIONPOINTID.PRIMARY_TOP;
pub const CCM_INSERTIONPOINTID_PRIMARY_NEW = CCM_INSERTIONPOINTID.PRIMARY_NEW;
pub const CCM_INSERTIONPOINTID_PRIMARY_TASK = CCM_INSERTIONPOINTID.PRIMARY_TASK;
pub const CCM_INSERTIONPOINTID_PRIMARY_VIEW = CCM_INSERTIONPOINTID.PRIMARY_VIEW;
pub const CCM_INSERTIONPOINTID_PRIMARY_HELP = CCM_INSERTIONPOINTID.PRIMARY_HELP;
pub const CCM_INSERTIONPOINTID_3RDPARTY_NEW = CCM_INSERTIONPOINTID.@"3RDPARTY_NEW";
pub const CCM_INSERTIONPOINTID_3RDPARTY_TASK = CCM_INSERTIONPOINTID.@"3RDPARTY_TASK";
pub const CCM_INSERTIONPOINTID_ROOT_MENU = CCM_INSERTIONPOINTID.MASK_SHARED;

pub const CCM_INSERTIONALLOWED = enum(i32) {
    TOP = 1,
    NEW = 2,
    TASK = 4,
    VIEW = 8,
};
pub const CCM_INSERTIONALLOWED_TOP = CCM_INSERTIONALLOWED.TOP;
pub const CCM_INSERTIONALLOWED_NEW = CCM_INSERTIONALLOWED.NEW;
pub const CCM_INSERTIONALLOWED_TASK = CCM_INSERTIONALLOWED.TASK;
pub const CCM_INSERTIONALLOWED_VIEW = CCM_INSERTIONALLOWED.VIEW;

pub const CCM_COMMANDID_MASK_CONSTANTS = enum(u32) {
    D = 4294901760,
};
pub const CCM_COMMANDID_MASK_RESERVED = CCM_COMMANDID_MASK_CONSTANTS.D;

pub const CCM_SPECIAL = enum(i32) {
    SEPARATOR = 1,
    SUBMENU = 2,
    DEFAULT_ITEM = 4,
    INSERTION_POINT = 8,
    TESTONLY = 16,
};
pub const CCM_SPECIAL_SEPARATOR = CCM_SPECIAL.SEPARATOR;
pub const CCM_SPECIAL_SUBMENU = CCM_SPECIAL.SUBMENU;
pub const CCM_SPECIAL_DEFAULT_ITEM = CCM_SPECIAL.DEFAULT_ITEM;
pub const CCM_SPECIAL_INSERTION_POINT = CCM_SPECIAL.INSERTION_POINT;
pub const CCM_SPECIAL_TESTONLY = CCM_SPECIAL.TESTONLY;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IContextMenuCallback_Value = Guid.initString("43136eb7-d36c-11cf-adbc-00aa00a80033");
pub const IID_IContextMenuCallback = &IID_IContextMenuCallback_Value;
pub const IContextMenuCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddItem: *const fn (
            self: *const IContextMenuCallback,
            p_item: ?*CONTEXTMENUITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addItem(self: *const T, p_item_: ?*CONTEXTMENUITEM) HRESULT {
                return @as(*const IContextMenuCallback.VTable, @ptrCast(self.vtable)).AddItem(@as(*const IContextMenuCallback, @ptrCast(self)), p_item_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IContextMenuProvider_Value = Guid.initString("43136eb6-d36c-11cf-adbc-00aa00a80033");
pub const IID_IContextMenuProvider = &IID_IContextMenuProvider_Value;
pub const IContextMenuProvider = extern struct {
    pub const VTable = extern struct {
        base: IContextMenuCallback.VTable,
        EmptyMenuList: *const fn (
            self: *const IContextMenuProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPrimaryExtensionItems: *const fn (
            self: *const IContextMenuProvider,
            pi_extension: ?*IUnknown,
            pi_data_object: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddThirdPartyExtensionItems: *const fn (
            self: *const IContextMenuProvider,
            pi_data_object: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShowContextMenu: *const fn (
            self: *const IContextMenuProvider,
            hwnd_parent: ?HWND,
            x_pos: i32,
            y_pos: i32,
            pl_selected: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IContextMenuCallback.MethodMixin(T);
            pub inline fn emptyMenuList(self: *const T) HRESULT {
                return @as(*const IContextMenuProvider.VTable, @ptrCast(self.vtable)).EmptyMenuList(@as(*const IContextMenuProvider, @ptrCast(self)));
            }
            pub inline fn addPrimaryExtensionItems(self: *const T, pi_extension_: ?*IUnknown, pi_data_object_: ?*IDataObject) HRESULT {
                return @as(*const IContextMenuProvider.VTable, @ptrCast(self.vtable)).AddPrimaryExtensionItems(@as(*const IContextMenuProvider, @ptrCast(self)), pi_extension_, pi_data_object_);
            }
            pub inline fn addThirdPartyExtensionItems(self: *const T, pi_data_object_: ?*IDataObject) HRESULT {
                return @as(*const IContextMenuProvider.VTable, @ptrCast(self.vtable)).AddThirdPartyExtensionItems(@as(*const IContextMenuProvider, @ptrCast(self)), pi_data_object_);
            }
            pub inline fn showContextMenu(self: *const T, hwnd_parent_: ?HWND, x_pos_: i32, y_pos_: i32, pl_selected_: ?*i32) HRESULT {
                return @as(*const IContextMenuProvider.VTable, @ptrCast(self.vtable)).ShowContextMenu(@as(*const IContextMenuProvider, @ptrCast(self)), hwnd_parent_, x_pos_, y_pos_, pl_selected_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IExtendContextMenu_Value = Guid.initString("4f3b7a4f-cfac-11cf-b8e3-00c04fd8d5b0");
pub const IID_IExtendContextMenu = &IID_IExtendContextMenu_Value;
pub const IExtendContextMenu = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddMenuItems: *const fn (
            self: *const IExtendContextMenu,
            pi_data_object: ?*IDataObject,
            pi_callback: ?*IContextMenuCallback,
            p_insertion_allowed: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Command: *const fn (
            self: *const IExtendContextMenu,
            l_command_i_d: i32,
            pi_data_object: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addMenuItems(self: *const T, pi_data_object_: ?*IDataObject, pi_callback_: ?*IContextMenuCallback, p_insertion_allowed_: ?*i32) HRESULT {
                return @as(*const IExtendContextMenu.VTable, @ptrCast(self.vtable)).AddMenuItems(@as(*const IExtendContextMenu, @ptrCast(self)), pi_data_object_, pi_callback_, p_insertion_allowed_);
            }
            pub inline fn command(self: *const T, l_command_i_d_: i32, pi_data_object_: ?*IDataObject) HRESULT {
                return @as(*const IExtendContextMenu.VTable, @ptrCast(self.vtable)).Command(@as(*const IExtendContextMenu, @ptrCast(self)), l_command_i_d_, pi_data_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IImageList_Value = Guid.initString("43136eb8-d36c-11cf-adbc-00aa00a80033");
pub const IID_IImageList = &IID_IImageList_Value;
pub const IImageList = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ImageListSetIcon: *const fn (
            self: *const IImageList,
            p_icon: ?*isize,
            n_loc: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImageListSetStrip: *const fn (
            self: *const IImageList,
            p_b_map_sm: ?*isize,
            p_b_map_lg: ?*isize,
            n_start_loc: i32,
            c_mask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn imageListSetIcon(self: *const T, p_icon_: ?*isize, n_loc_: i32) HRESULT {
                return @as(*const IImageList.VTable, @ptrCast(self.vtable)).ImageListSetIcon(@as(*const IImageList, @ptrCast(self)), p_icon_, n_loc_);
            }
            pub inline fn imageListSetStrip(self: *const T, p_b_map_sm_: ?*isize, p_b_map_lg_: ?*isize, n_start_loc_: i32, c_mask_: u32) HRESULT {
                return @as(*const IImageList.VTable, @ptrCast(self.vtable)).ImageListSetStrip(@as(*const IImageList, @ptrCast(self)), p_b_map_sm_, p_b_map_lg_, n_start_loc_, c_mask_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IResultData_Value = Guid.initString("31da5fa0-e0eb-11cf-9f21-00aa003ca9f6");
pub const IID_IResultData = &IID_IResultData_Value;
pub const IResultData = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InsertItem: *const fn (
            self: *const IResultData,
            item: ?*RESULTDATAITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteItem: *const fn (
            self: *const IResultData,
            item_i_d: isize,
            n_col: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindItemByLParam: *const fn (
            self: *const IResultData,
            l_param: LPARAM,
            p_item_i_d: ?*isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAllRsltItems: *const fn (
            self: *const IResultData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItem: *const fn (
            self: *const IResultData,
            item: ?*RESULTDATAITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItem: *const fn (
            self: *const IResultData,
            item: ?*RESULTDATAITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextItem: *const fn (
            self: *const IResultData,
            item: ?*RESULTDATAITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ModifyItemState: *const fn (
            self: *const IResultData,
            n_index: i32,
            item_i_d: isize,
            u_add: u32,
            u_remove: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ModifyViewStyle: *const fn (
            self: *const IResultData,
            add: MMC_RESULT_VIEW_STYLE,
            remove: MMC_RESULT_VIEW_STYLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetViewMode: *const fn (
            self: *const IResultData,
            l_view_mode: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetViewMode: *const fn (
            self: *const IResultData,
            l_view_mode: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateItem: *const fn (
            self: *const IResultData,
            item_i_d: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Sort: *const fn (
            self: *const IResultData,
            n_column: i32,
            dw_sort_options: u32,
            l_user_param: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDescBarText: *const fn (
            self: *const IResultData,
            desc_text: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItemCount: *const fn (
            self: *const IResultData,
            n_item_count: i32,
            dw_options: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn insertItem(self: *const T, item_: ?*RESULTDATAITEM) HRESULT {
                return @as(*const IResultData.VTable, @ptrCast(self.vtable)).InsertItem(@as(*const IResultData, @ptrCast(self)), item_);
            }
            pub inline fn deleteItem(self: *const T, item_i_d_: isize, n_col_: i32) HRESULT {
                return @as(*const IResultData.VTable, @ptrCast(self.vtable)).DeleteItem(@as(*const IResultData, @ptrCast(self)), item_i_d_, n_col_);
            }
            pub inline fn findItemByLParam(self: *const T, l_param_: LPARAM, p_item_i_d_: ?*isize) HRESULT {
                return @as(*const IResultData.VTable, @ptrCast(self.vtable)).FindItemByLParam(@as(*const IResultData, @ptrCast(self)), l_param_, p_item_i_d_);
            }
            pub inline fn deleteAllRsltItems(self: *const T) HRESULT {
                return @as(*const IResultData.VTable, @ptrCast(self.vtable)).DeleteAllRsltItems(@as(*const IResultData, @ptrCast(self)));
            }
            pub inline fn setItem(self: *const T, item_: ?*RESULTDATAITEM) HRESULT {
                return @as(*const IResultData.VTable, @ptrCast(self.vtable)).SetItem(@as(*const IResultData, @ptrCast(self)), item_);
            }
            pub inline fn getItem(self: *const T, item_: ?*RESULTDATAITEM) HRESULT {
                return @as(*const IResultData.VTable, @ptrCast(self.vtable)).GetItem(@as(*const IResultData, @ptrCast(self)), item_);
            }
            pub inline fn getNextItem(self: *const T, item_: ?*RESULTDATAITEM) HRESULT {
                return @as(*const IResultData.VTable, @ptrCast(self.vtable)).GetNextItem(@as(*const IResultData, @ptrCast(self)), item_);
            }
            pub inline fn modifyItemState(self: *const T, n_index_: i32, item_i_d_: isize, u_add_: u32, u_remove_: u32) HRESULT {
                return @as(*const IResultData.VTable, @ptrCast(self.vtable)).ModifyItemState(@as(*const IResultData, @ptrCast(self)), n_index_, item_i_d_, u_add_, u_remove_);
            }
            pub inline fn modifyViewStyle(self: *const T, add_: MMC_RESULT_VIEW_STYLE, remove_: MMC_RESULT_VIEW_STYLE) HRESULT {
                return @as(*const IResultData.VTable, @ptrCast(self.vtable)).ModifyViewStyle(@as(*const IResultData, @ptrCast(self)), add_, remove_);
            }
            pub inline fn setViewMode(self: *const T, l_view_mode_: i32) HRESULT {
                return @as(*const IResultData.VTable, @ptrCast(self.vtable)).SetViewMode(@as(*const IResultData, @ptrCast(self)), l_view_mode_);
            }
            pub inline fn getViewMode(self: *const T, l_view_mode_: ?*i32) HRESULT {
                return @as(*const IResultData.VTable, @ptrCast(self.vtable)).GetViewMode(@as(*const IResultData, @ptrCast(self)), l_view_mode_);
            }
            pub inline fn updateItem(self: *const T, item_i_d_: isize) HRESULT {
                return @as(*const IResultData.VTable, @ptrCast(self.vtable)).UpdateItem(@as(*const IResultData, @ptrCast(self)), item_i_d_);
            }
            pub inline fn sort(self: *const T, n_column_: i32, dw_sort_options_: u32, l_user_param_: LPARAM) HRESULT {
                return @as(*const IResultData.VTable, @ptrCast(self.vtable)).Sort(@as(*const IResultData, @ptrCast(self)), n_column_, dw_sort_options_, l_user_param_);
            }
            pub inline fn setDescBarText(self: *const T, desc_text_: ?PWSTR) HRESULT {
                return @as(*const IResultData.VTable, @ptrCast(self.vtable)).SetDescBarText(@as(*const IResultData, @ptrCast(self)), desc_text_);
            }
            pub inline fn setItemCount(self: *const T, n_item_count_: i32, dw_options_: u32) HRESULT {
                return @as(*const IResultData.VTable, @ptrCast(self.vtable)).SetItemCount(@as(*const IResultData, @ptrCast(self)), n_item_count_, dw_options_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IConsoleNameSpace_Value = Guid.initString("bedeb620-f24d-11cf-8afc-00aa003ca9f6");
pub const IID_IConsoleNameSpace = &IID_IConsoleNameSpace_Value;
pub const IConsoleNameSpace = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        InsertItem: *const fn (
            self: *const IConsoleNameSpace,
            item: ?*SCOPEDATAITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteItem: *const fn (
            self: *const IConsoleNameSpace,
            h_item: isize,
            f_delete_this: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetItem: *const fn (
            self: *const IConsoleNameSpace,
            item: ?*SCOPEDATAITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetItem: *const fn (
            self: *const IConsoleNameSpace,
            item: ?*SCOPEDATAITEM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetChildItem: *const fn (
            self: *const IConsoleNameSpace,
            item: isize,
            p_item_child: ?*isize,
            p_cookie: ?*isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextItem: *const fn (
            self: *const IConsoleNameSpace,
            item: isize,
            p_item_next: ?*isize,
            p_cookie: ?*isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetParentItem: *const fn (
            self: *const IConsoleNameSpace,
            item: isize,
            p_item_parent: ?*isize,
            p_cookie: ?*isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn insertItem(self: *const T, item_: ?*SCOPEDATAITEM) HRESULT {
                return @as(*const IConsoleNameSpace.VTable, @ptrCast(self.vtable)).InsertItem(@as(*const IConsoleNameSpace, @ptrCast(self)), item_);
            }
            pub inline fn deleteItem(self: *const T, h_item_: isize, f_delete_this_: i32) HRESULT {
                return @as(*const IConsoleNameSpace.VTable, @ptrCast(self.vtable)).DeleteItem(@as(*const IConsoleNameSpace, @ptrCast(self)), h_item_, f_delete_this_);
            }
            pub inline fn setItem(self: *const T, item_: ?*SCOPEDATAITEM) HRESULT {
                return @as(*const IConsoleNameSpace.VTable, @ptrCast(self.vtable)).SetItem(@as(*const IConsoleNameSpace, @ptrCast(self)), item_);
            }
            pub inline fn getItem(self: *const T, item_: ?*SCOPEDATAITEM) HRESULT {
                return @as(*const IConsoleNameSpace.VTable, @ptrCast(self.vtable)).GetItem(@as(*const IConsoleNameSpace, @ptrCast(self)), item_);
            }
            pub inline fn getChildItem(self: *const T, item_: isize, p_item_child_: ?*isize, p_cookie_: ?*isize) HRESULT {
                return @as(*const IConsoleNameSpace.VTable, @ptrCast(self.vtable)).GetChildItem(@as(*const IConsoleNameSpace, @ptrCast(self)), item_, p_item_child_, p_cookie_);
            }
            pub inline fn getNextItem(self: *const T, item_: isize, p_item_next_: ?*isize, p_cookie_: ?*isize) HRESULT {
                return @as(*const IConsoleNameSpace.VTable, @ptrCast(self.vtable)).GetNextItem(@as(*const IConsoleNameSpace, @ptrCast(self)), item_, p_item_next_, p_cookie_);
            }
            pub inline fn getParentItem(self: *const T, item_: isize, p_item_parent_: ?*isize, p_cookie_: ?*isize) HRESULT {
                return @as(*const IConsoleNameSpace.VTable, @ptrCast(self.vtable)).GetParentItem(@as(*const IConsoleNameSpace, @ptrCast(self)), item_, p_item_parent_, p_cookie_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IConsoleNameSpace2_Value = Guid.initString("255f18cc-65db-11d1-a7dc-00c04fd8d565");
pub const IID_IConsoleNameSpace2 = &IID_IConsoleNameSpace2_Value;
pub const IConsoleNameSpace2 = extern struct {
    pub const VTable = extern struct {
        base: IConsoleNameSpace.VTable,
        Expand: *const fn (
            self: *const IConsoleNameSpace2,
            h_item: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddExtension: *const fn (
            self: *const IConsoleNameSpace2,
            h_item: isize,
            lp_clsid: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IConsoleNameSpace.MethodMixin(T);
            pub inline fn expand(self: *const T, h_item_: isize) HRESULT {
                return @as(*const IConsoleNameSpace2.VTable, @ptrCast(self.vtable)).Expand(@as(*const IConsoleNameSpace2, @ptrCast(self)), h_item_);
            }
            pub inline fn addExtension(self: *const T, h_item_: isize, lp_clsid_: ?*Guid) HRESULT {
                return @as(*const IConsoleNameSpace2.VTable, @ptrCast(self.vtable)).AddExtension(@as(*const IConsoleNameSpace2, @ptrCast(self)), h_item_, lp_clsid_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertySheetCallback_Value = Guid.initString("85de64dd-ef21-11cf-a285-00c04fd8dbe6");
pub const IID_IPropertySheetCallback = &IID_IPropertySheetCallback_Value;
pub const IPropertySheetCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddPage: *const fn (
            self: *const IPropertySheetCallback,
            h_page: ?HPROPSHEETPAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemovePage: *const fn (
            self: *const IPropertySheetCallback,
            h_page: ?HPROPSHEETPAGE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addPage(self: *const T, h_page_: ?HPROPSHEETPAGE) HRESULT {
                return @as(*const IPropertySheetCallback.VTable, @ptrCast(self.vtable)).AddPage(@as(*const IPropertySheetCallback, @ptrCast(self)), h_page_);
            }
            pub inline fn removePage(self: *const T, h_page_: ?HPROPSHEETPAGE) HRESULT {
                return @as(*const IPropertySheetCallback.VTable, @ptrCast(self.vtable)).RemovePage(@as(*const IPropertySheetCallback, @ptrCast(self)), h_page_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IPropertySheetProvider_Value = Guid.initString("85de64de-ef21-11cf-a285-00c04fd8dbe6");
pub const IID_IPropertySheetProvider = &IID_IPropertySheetProvider_Value;
pub const IPropertySheetProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreatePropertySheet: *const fn (
            self: *const IPropertySheetProvider,
            title: ?[*:0]const u16,
            type: u8,
            cookie: isize,
            p_i_data_objectm: ?*IDataObject,
            dw_options: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindPropertySheet: *const fn (
            self: *const IPropertySheetProvider,
            h_item: isize,
            lp_component: ?*IComponent,
            lp_data_object: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddPrimaryPages: *const fn (
            self: *const IPropertySheetProvider,
            lp_unknown: ?*IUnknown,
            b_create_handle: BOOL,
            h_notify_window: ?HWND,
            b_scope_pane: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddExtensionPages: *const fn (
            self: *const IPropertySheetProvider,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Show: *const fn (
            self: *const IPropertySheetProvider,
            window: isize,
            page: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createPropertySheet(self: *const T, title_: ?[*:0]const u16, type_: u8, cookie_: isize, p_i_data_objectm_: ?*IDataObject, dw_options_: u32) HRESULT {
                return @as(*const IPropertySheetProvider.VTable, @ptrCast(self.vtable)).CreatePropertySheet(@as(*const IPropertySheetProvider, @ptrCast(self)), title_, type_, cookie_, p_i_data_objectm_, dw_options_);
            }
            pub inline fn findPropertySheet(self: *const T, h_item_: isize, lp_component_: ?*IComponent, lp_data_object_: ?*IDataObject) HRESULT {
                return @as(*const IPropertySheetProvider.VTable, @ptrCast(self.vtable)).FindPropertySheet(@as(*const IPropertySheetProvider, @ptrCast(self)), h_item_, lp_component_, lp_data_object_);
            }
            pub inline fn addPrimaryPages(self: *const T, lp_unknown_: ?*IUnknown, b_create_handle_: BOOL, h_notify_window_: ?HWND, b_scope_pane_: BOOL) HRESULT {
                return @as(*const IPropertySheetProvider.VTable, @ptrCast(self.vtable)).AddPrimaryPages(@as(*const IPropertySheetProvider, @ptrCast(self)), lp_unknown_, b_create_handle_, h_notify_window_, b_scope_pane_);
            }
            pub inline fn addExtensionPages(self: *const T) HRESULT {
                return @as(*const IPropertySheetProvider.VTable, @ptrCast(self.vtable)).AddExtensionPages(@as(*const IPropertySheetProvider, @ptrCast(self)));
            }
            pub inline fn show(self: *const T, window_: isize, page_: i32) HRESULT {
                return @as(*const IPropertySheetProvider.VTable, @ptrCast(self.vtable)).Show(@as(*const IPropertySheetProvider, @ptrCast(self)), window_, page_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IExtendPropertySheet_Value = Guid.initString("85de64dc-ef21-11cf-a285-00c04fd8dbe6");
pub const IID_IExtendPropertySheet = &IID_IExtendPropertySheet_Value;
pub const IExtendPropertySheet = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreatePropertyPages: *const fn (
            self: *const IExtendPropertySheet,
            lp_provider: ?*IPropertySheetCallback,
            handle: isize,
            lp_i_data_object: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryPagesFor: *const fn (
            self: *const IExtendPropertySheet,
            lp_data_object: ?*IDataObject,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createPropertyPages(self: *const T, lp_provider_: ?*IPropertySheetCallback, handle_: isize, lp_i_data_object_: ?*IDataObject) HRESULT {
                return @as(*const IExtendPropertySheet.VTable, @ptrCast(self.vtable)).CreatePropertyPages(@as(*const IExtendPropertySheet, @ptrCast(self)), lp_provider_, handle_, lp_i_data_object_);
            }
            pub inline fn queryPagesFor(self: *const T, lp_data_object_: ?*IDataObject) HRESULT {
                return @as(*const IExtendPropertySheet.VTable, @ptrCast(self.vtable)).QueryPagesFor(@as(*const IExtendPropertySheet, @ptrCast(self)), lp_data_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IControlbar_Value = Guid.initString("69fb811e-6c1c-11d0-a2cb-00c04fd909dd");
pub const IID_IControlbar = &IID_IControlbar_Value;
pub const IControlbar = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Create: *const fn (
            self: *const IControlbar,
            n_type: MMC_CONTROL_TYPE,
            p_extend_controlbar: ?*IExtendControlbar,
            pp_unknown: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Attach: *const fn (
            self: *const IControlbar,
            n_type: MMC_CONTROL_TYPE,
            lp_unknown: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Detach: *const fn (
            self: *const IControlbar,
            lp_unknown: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn create(self: *const T, n_type_: MMC_CONTROL_TYPE, p_extend_controlbar_: ?*IExtendControlbar, pp_unknown_: ?*?*IUnknown) HRESULT {
                return @as(*const IControlbar.VTable, @ptrCast(self.vtable)).Create(@as(*const IControlbar, @ptrCast(self)), n_type_, p_extend_controlbar_, pp_unknown_);
            }
            pub inline fn attach(self: *const T, n_type_: MMC_CONTROL_TYPE, lp_unknown_: ?*IUnknown) HRESULT {
                return @as(*const IControlbar.VTable, @ptrCast(self.vtable)).Attach(@as(*const IControlbar, @ptrCast(self)), n_type_, lp_unknown_);
            }
            pub inline fn detach(self: *const T, lp_unknown_: ?*IUnknown) HRESULT {
                return @as(*const IControlbar.VTable, @ptrCast(self.vtable)).Detach(@as(*const IControlbar, @ptrCast(self)), lp_unknown_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IExtendControlbar_Value = Guid.initString("49506520-6f40-11d0-a98b-00c04fd8d565");
pub const IID_IExtendControlbar = &IID_IExtendControlbar_Value;
pub const IExtendControlbar = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetControlbar: *const fn (
            self: *const IExtendControlbar,
            p_controlbar: ?*IControlbar,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ControlbarNotify: *const fn (
            self: *const IExtendControlbar,
            event: MMC_NOTIFY_TYPE,
            arg: LPARAM,
            param2: LPARAM,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setControlbar(self: *const T, p_controlbar_: ?*IControlbar) HRESULT {
                return @as(*const IExtendControlbar.VTable, @ptrCast(self.vtable)).SetControlbar(@as(*const IExtendControlbar, @ptrCast(self)), p_controlbar_);
            }
            pub inline fn controlbarNotify(self: *const T, event_: MMC_NOTIFY_TYPE, arg_: LPARAM, param2_: LPARAM) HRESULT {
                return @as(*const IExtendControlbar.VTable, @ptrCast(self.vtable)).ControlbarNotify(@as(*const IExtendControlbar, @ptrCast(self)), event_, arg_, param2_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IToolbar_Value = Guid.initString("43136eb9-d36c-11cf-adbc-00aa00a80033");
pub const IID_IToolbar = &IID_IToolbar_Value;
pub const IToolbar = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddBitmap: *const fn (
            self: *const IToolbar,
            n_images: i32,
            hbmp: ?HBITMAP,
            cx_size: i32,
            cy_size: i32,
            cr_mask: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddButtons: *const fn (
            self: *const IToolbar,
            n_buttons: i32,
            lp_buttons: ?*MMCBUTTON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InsertButton: *const fn (
            self: *const IToolbar,
            n_index: i32,
            lp_button: ?*MMCBUTTON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteButton: *const fn (
            self: *const IToolbar,
            n_index: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetButtonState: *const fn (
            self: *const IToolbar,
            id_command: i32,
            n_state: MMC_BUTTON_STATE,
            p_state: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetButtonState: *const fn (
            self: *const IToolbar,
            id_command: i32,
            n_state: MMC_BUTTON_STATE,
            b_state: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addBitmap(self: *const T, n_images_: i32, hbmp_: ?HBITMAP, cx_size_: i32, cy_size_: i32, cr_mask_: u32) HRESULT {
                return @as(*const IToolbar.VTable, @ptrCast(self.vtable)).AddBitmap(@as(*const IToolbar, @ptrCast(self)), n_images_, hbmp_, cx_size_, cy_size_, cr_mask_);
            }
            pub inline fn addButtons(self: *const T, n_buttons_: i32, lp_buttons_: ?*MMCBUTTON) HRESULT {
                return @as(*const IToolbar.VTable, @ptrCast(self.vtable)).AddButtons(@as(*const IToolbar, @ptrCast(self)), n_buttons_, lp_buttons_);
            }
            pub inline fn insertButton(self: *const T, n_index_: i32, lp_button_: ?*MMCBUTTON) HRESULT {
                return @as(*const IToolbar.VTable, @ptrCast(self.vtable)).InsertButton(@as(*const IToolbar, @ptrCast(self)), n_index_, lp_button_);
            }
            pub inline fn deleteButton(self: *const T, n_index_: i32) HRESULT {
                return @as(*const IToolbar.VTable, @ptrCast(self.vtable)).DeleteButton(@as(*const IToolbar, @ptrCast(self)), n_index_);
            }
            pub inline fn getButtonState(self: *const T, id_command_: i32, n_state_: MMC_BUTTON_STATE, p_state_: ?*BOOL) HRESULT {
                return @as(*const IToolbar.VTable, @ptrCast(self.vtable)).GetButtonState(@as(*const IToolbar, @ptrCast(self)), id_command_, n_state_, p_state_);
            }
            pub inline fn setButtonState(self: *const T, id_command_: i32, n_state_: MMC_BUTTON_STATE, b_state_: BOOL) HRESULT {
                return @as(*const IToolbar.VTable, @ptrCast(self.vtable)).SetButtonState(@as(*const IToolbar, @ptrCast(self)), id_command_, n_state_, b_state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IConsoleVerb_Value = Guid.initString("e49f7a60-74af-11d0-a286-00c04fd8fe93");
pub const IID_IConsoleVerb = &IID_IConsoleVerb_Value;
pub const IConsoleVerb = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetVerbState: *const fn (
            self: *const IConsoleVerb,
            e_cmd_i_d: MMC_CONSOLE_VERB,
            n_state: MMC_BUTTON_STATE,
            p_state: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetVerbState: *const fn (
            self: *const IConsoleVerb,
            e_cmd_i_d: MMC_CONSOLE_VERB,
            n_state: MMC_BUTTON_STATE,
            b_state: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDefaultVerb: *const fn (
            self: *const IConsoleVerb,
            e_cmd_i_d: MMC_CONSOLE_VERB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDefaultVerb: *const fn (
            self: *const IConsoleVerb,
            pe_cmd_i_d: ?*MMC_CONSOLE_VERB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getVerbState(self: *const T, e_cmd_i_d_: MMC_CONSOLE_VERB, n_state_: MMC_BUTTON_STATE, p_state_: ?*BOOL) HRESULT {
                return @as(*const IConsoleVerb.VTable, @ptrCast(self.vtable)).GetVerbState(@as(*const IConsoleVerb, @ptrCast(self)), e_cmd_i_d_, n_state_, p_state_);
            }
            pub inline fn setVerbState(self: *const T, e_cmd_i_d_: MMC_CONSOLE_VERB, n_state_: MMC_BUTTON_STATE, b_state_: BOOL) HRESULT {
                return @as(*const IConsoleVerb.VTable, @ptrCast(self.vtable)).SetVerbState(@as(*const IConsoleVerb, @ptrCast(self)), e_cmd_i_d_, n_state_, b_state_);
            }
            pub inline fn setDefaultVerb(self: *const T, e_cmd_i_d_: MMC_CONSOLE_VERB) HRESULT {
                return @as(*const IConsoleVerb.VTable, @ptrCast(self.vtable)).SetDefaultVerb(@as(*const IConsoleVerb, @ptrCast(self)), e_cmd_i_d_);
            }
            pub inline fn getDefaultVerb(self: *const T, pe_cmd_i_d_: ?*MMC_CONSOLE_VERB) HRESULT {
                return @as(*const IConsoleVerb.VTable, @ptrCast(self.vtable)).GetDefaultVerb(@as(*const IConsoleVerb, @ptrCast(self)), pe_cmd_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISnapinAbout_Value = Guid.initString("1245208c-a151-11d0-a7d7-00c04fd909dd");
pub const IID_ISnapinAbout = &IID_ISnapinAbout_Value;
pub const ISnapinAbout = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSnapinDescription: *const fn (
            self: *const ISnapinAbout,
            lp_description: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProvider: *const fn (
            self: *const ISnapinAbout,
            lp_name: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSnapinVersion: *const fn (
            self: *const ISnapinAbout,
            lp_version: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSnapinImage: *const fn (
            self: *const ISnapinAbout,
            h_app_icon: ?*?HICON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStaticFolderImage: *const fn (
            self: *const ISnapinAbout,
            h_small_image: ?*?HBITMAP,
            h_small_image_open: ?*?HBITMAP,
            h_large_image: ?*?HBITMAP,
            c_mask: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSnapinDescription(self: *const T, lp_description_: ?*?PWSTR) HRESULT {
                return @as(*const ISnapinAbout.VTable, @ptrCast(self.vtable)).GetSnapinDescription(@as(*const ISnapinAbout, @ptrCast(self)), lp_description_);
            }
            pub inline fn getProvider(self: *const T, lp_name_: ?*?PWSTR) HRESULT {
                return @as(*const ISnapinAbout.VTable, @ptrCast(self.vtable)).GetProvider(@as(*const ISnapinAbout, @ptrCast(self)), lp_name_);
            }
            pub inline fn getSnapinVersion(self: *const T, lp_version_: ?*?PWSTR) HRESULT {
                return @as(*const ISnapinAbout.VTable, @ptrCast(self.vtable)).GetSnapinVersion(@as(*const ISnapinAbout, @ptrCast(self)), lp_version_);
            }
            pub inline fn getSnapinImage(self: *const T, h_app_icon_: ?*?HICON) HRESULT {
                return @as(*const ISnapinAbout.VTable, @ptrCast(self.vtable)).GetSnapinImage(@as(*const ISnapinAbout, @ptrCast(self)), h_app_icon_);
            }
            pub inline fn getStaticFolderImage(self: *const T, h_small_image_: ?*?HBITMAP, h_small_image_open_: ?*?HBITMAP, h_large_image_: ?*?HBITMAP, c_mask_: ?*u32) HRESULT {
                return @as(*const ISnapinAbout.VTable, @ptrCast(self.vtable)).GetStaticFolderImage(@as(*const ISnapinAbout, @ptrCast(self)), h_small_image_, h_small_image_open_, h_large_image_, c_mask_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IMenuButton_Value = Guid.initString("951ed750-d080-11d0-b197-000000000000");
pub const IID_IMenuButton = &IID_IMenuButton_Value;
pub const IMenuButton = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddButton: *const fn (
            self: *const IMenuButton,
            id_command: i32,
            lp_button_text: ?PWSTR,
            lp_tooltip_text: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetButton: *const fn (
            self: *const IMenuButton,
            id_command: i32,
            lp_button_text: ?PWSTR,
            lp_tooltip_text: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetButtonState: *const fn (
            self: *const IMenuButton,
            id_command: i32,
            n_state: MMC_BUTTON_STATE,
            b_state: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addButton(self: *const T, id_command_: i32, lp_button_text_: ?PWSTR, lp_tooltip_text_: ?PWSTR) HRESULT {
                return @as(*const IMenuButton.VTable, @ptrCast(self.vtable)).AddButton(@as(*const IMenuButton, @ptrCast(self)), id_command_, lp_button_text_, lp_tooltip_text_);
            }
            pub inline fn setButton(self: *const T, id_command_: i32, lp_button_text_: ?PWSTR, lp_tooltip_text_: ?PWSTR) HRESULT {
                return @as(*const IMenuButton.VTable, @ptrCast(self.vtable)).SetButton(@as(*const IMenuButton, @ptrCast(self)), id_command_, lp_button_text_, lp_tooltip_text_);
            }
            pub inline fn setButtonState(self: *const T, id_command_: i32, n_state_: MMC_BUTTON_STATE, b_state_: BOOL) HRESULT {
                return @as(*const IMenuButton.VTable, @ptrCast(self.vtable)).SetButtonState(@as(*const IMenuButton, @ptrCast(self)), id_command_, n_state_, b_state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISnapinHelp_Value = Guid.initString("a6b15ace-df59-11d0-a7dd-00c04fd909dd");
pub const IID_ISnapinHelp = &IID_ISnapinHelp_Value;
pub const ISnapinHelp = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetHelpTopic: *const fn (
            self: *const ISnapinHelp,
            lp_compiled_help_file: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getHelpTopic(self: *const T, lp_compiled_help_file_: ?*?PWSTR) HRESULT {
                return @as(*const ISnapinHelp.VTable, @ptrCast(self.vtable)).GetHelpTopic(@as(*const ISnapinHelp, @ptrCast(self)), lp_compiled_help_file_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IExtendPropertySheet2_Value = Guid.initString("b7a87232-4a51-11d1-a7ea-00c04fd909dd");
pub const IID_IExtendPropertySheet2 = &IID_IExtendPropertySheet2_Value;
pub const IExtendPropertySheet2 = extern struct {
    pub const VTable = extern struct {
        base: IExtendPropertySheet.VTable,
        GetWatermarks: *const fn (
            self: *const IExtendPropertySheet2,
            lp_i_data_object: ?*IDataObject,
            lph_watermark: ?*?HBITMAP,
            lph_header: ?*?HBITMAP,
            lph_palette: ?*?HPALETTE,
            b_stretch: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IExtendPropertySheet.MethodMixin(T);
            pub inline fn getWatermarks(self: *const T, lp_i_data_object_: ?*IDataObject, lph_watermark_: ?*?HBITMAP, lph_header_: ?*?HBITMAP, lph_palette_: ?*?HPALETTE, b_stretch_: ?*BOOL) HRESULT {
                return @as(*const IExtendPropertySheet2.VTable, @ptrCast(self.vtable)).GetWatermarks(@as(*const IExtendPropertySheet2, @ptrCast(self)), lp_i_data_object_, lph_watermark_, lph_header_, lph_palette_, b_stretch_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IHeaderCtrl2_Value = Guid.initString("9757abb8-1b32-11d1-a7ce-00c04fd8d565");
pub const IID_IHeaderCtrl2 = &IID_IHeaderCtrl2_Value;
pub const IHeaderCtrl2 = extern struct {
    pub const VTable = extern struct {
        base: IHeaderCtrl.VTable,
        SetChangeTimeOut: *const fn (
            self: *const IHeaderCtrl2,
            u_timeout: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColumnFilter: *const fn (
            self: *const IHeaderCtrl2,
            n_column: u32,
            dw_type: u32,
            p_filter_data: ?*MMC_FILTERDATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnFilter: *const fn (
            self: *const IHeaderCtrl2,
            n_column: u32,
            pdw_type: ?*u32,
            p_filter_data: ?*MMC_FILTERDATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IHeaderCtrl.MethodMixin(T);
            pub inline fn setChangeTimeOut(self: *const T, u_timeout_: u32) HRESULT {
                return @as(*const IHeaderCtrl2.VTable, @ptrCast(self.vtable)).SetChangeTimeOut(@as(*const IHeaderCtrl2, @ptrCast(self)), u_timeout_);
            }
            pub inline fn setColumnFilter(self: *const T, n_column_: u32, dw_type_: u32, p_filter_data_: ?*MMC_FILTERDATA) HRESULT {
                return @as(*const IHeaderCtrl2.VTable, @ptrCast(self.vtable)).SetColumnFilter(@as(*const IHeaderCtrl2, @ptrCast(self)), n_column_, dw_type_, p_filter_data_);
            }
            pub inline fn getColumnFilter(self: *const T, n_column_: u32, pdw_type_: ?*u32, p_filter_data_: ?*MMC_FILTERDATA) HRESULT {
                return @as(*const IHeaderCtrl2.VTable, @ptrCast(self.vtable)).GetColumnFilter(@as(*const IHeaderCtrl2, @ptrCast(self)), n_column_, pdw_type_, p_filter_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_ISnapinHelp2_Value = Guid.initString("4861a010-20f9-11d2-a510-00c04fb6dd2c");
pub const IID_ISnapinHelp2 = &IID_ISnapinHelp2_Value;
pub const ISnapinHelp2 = extern struct {
    pub const VTable = extern struct {
        base: ISnapinHelp.VTable,
        GetLinkedTopics: *const fn (
            self: *const ISnapinHelp2,
            lp_compiled_help_files: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ISnapinHelp.MethodMixin(T);
            pub inline fn getLinkedTopics(self: *const T, lp_compiled_help_files_: ?*?PWSTR) HRESULT {
                return @as(*const ISnapinHelp2.VTable, @ptrCast(self.vtable)).GetLinkedTopics(@as(*const ISnapinHelp2, @ptrCast(self)), lp_compiled_help_files_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const MMC_TASK_DISPLAY_TYPE = enum(i32) {
    UNINITIALIZED = 0,
    TYPE_SYMBOL = 1,
    TYPE_VANILLA_GIF = 2,
    TYPE_CHOCOLATE_GIF = 3,
    TYPE_BITMAP = 4,
};
pub const MMC_TASK_DISPLAY_UNINITIALIZED = MMC_TASK_DISPLAY_TYPE.UNINITIALIZED;
pub const MMC_TASK_DISPLAY_TYPE_SYMBOL = MMC_TASK_DISPLAY_TYPE.TYPE_SYMBOL;
pub const MMC_TASK_DISPLAY_TYPE_VANILLA_GIF = MMC_TASK_DISPLAY_TYPE.TYPE_VANILLA_GIF;
pub const MMC_TASK_DISPLAY_TYPE_CHOCOLATE_GIF = MMC_TASK_DISPLAY_TYPE.TYPE_CHOCOLATE_GIF;
pub const MMC_TASK_DISPLAY_TYPE_BITMAP = MMC_TASK_DISPLAY_TYPE.TYPE_BITMAP;

pub const MMC_TASK_DISPLAY_SYMBOL = extern struct {
    szFontFamilyName: ?PWSTR,
    szURLtoEOT: ?PWSTR,
    szSymbolString: ?PWSTR,
};

pub const MMC_TASK_DISPLAY_BITMAP = extern struct {
    szMouseOverBitmap: ?PWSTR,
    szMouseOffBitmap: ?PWSTR,
};

pub const MMC_TASK_DISPLAY_OBJECT = extern struct {
    eDisplayType: MMC_TASK_DISPLAY_TYPE,
    Anonymous: extern union {
        uBitmap: MMC_TASK_DISPLAY_BITMAP,
        uSymbol: MMC_TASK_DISPLAY_SYMBOL,
    },
};

pub const MMC_ACTION_TYPE = enum(i32) {
    UNINITIALIZED = -1,
    ID = 0,
    LINK = 1,
    SCRIPT = 2,
};
pub const MMC_ACTION_UNINITIALIZED = MMC_ACTION_TYPE.UNINITIALIZED;
pub const MMC_ACTION_ID = MMC_ACTION_TYPE.ID;
pub const MMC_ACTION_LINK = MMC_ACTION_TYPE.LINK;
pub const MMC_ACTION_SCRIPT = MMC_ACTION_TYPE.SCRIPT;

pub const MMC_TASK = extern struct {
    sDisplayObject: MMC_TASK_DISPLAY_OBJECT,
    szText: ?PWSTR,
    szHelpString: ?PWSTR,
    eActionType: MMC_ACTION_TYPE,
    Anonymous: extern union {
        nCommandID: isize,
        szActionURL: ?PWSTR,
        szScript: ?PWSTR,
    },
};

pub const MMC_LISTPAD_INFO = extern struct {
    szTitle: ?PWSTR,
    szButtonText: ?PWSTR,
    nCommandID: isize,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IEnumTASK_Value = Guid.initString("338698b1-5a02-11d1-9fec-00600832db4a");
pub const IID_IEnumTASK = &IID_IEnumTASK_Value;
pub const IEnumTASK = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IEnumTASK,
            celt: u32,
            rgelt: [*]MMC_TASK,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IEnumTASK,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IEnumTASK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IEnumTASK,
            ppenum: ?*?*IEnumTASK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, rgelt_: [*]MMC_TASK, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IEnumTASK.VTable, @ptrCast(self.vtable)).Next(@as(*const IEnumTASK, @ptrCast(self)), celt_, rgelt_, pcelt_fetched_);
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IEnumTASK.VTable, @ptrCast(self.vtable)).Skip(@as(*const IEnumTASK, @ptrCast(self)), celt_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IEnumTASK.VTable, @ptrCast(self.vtable)).Reset(@as(*const IEnumTASK, @ptrCast(self)));
            }
            pub inline fn clone(self: *const T, ppenum_: ?*?*IEnumTASK) HRESULT {
                return @as(*const IEnumTASK.VTable, @ptrCast(self.vtable)).Clone(@as(*const IEnumTASK, @ptrCast(self)), ppenum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IExtendTaskPad_Value = Guid.initString("8dee6511-554d-11d1-9fea-00600832db4a");
pub const IID_IExtendTaskPad = &IID_IExtendTaskPad_Value;
pub const IExtendTaskPad = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        TaskNotify: *const fn (
            self: *const IExtendTaskPad,
            pdo: ?*IDataObject,
            arg: ?*VARIANT,
            param2: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumTasks: *const fn (
            self: *const IExtendTaskPad,
            pdo: ?*IDataObject,
            sz_task_group: ?PWSTR,
            pp_enum_t_a_s_k: ?*?*IEnumTASK,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetTitle: *const fn (
            self: *const IExtendTaskPad,
            psz_group: ?PWSTR,
            psz_title: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDescriptiveText: *const fn (
            self: *const IExtendTaskPad,
            psz_group: ?PWSTR,
            psz_descriptive_text: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBackground: *const fn (
            self: *const IExtendTaskPad,
            psz_group: ?PWSTR,
            p_t_d_o: ?*MMC_TASK_DISPLAY_OBJECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetListPadInfo: *const fn (
            self: *const IExtendTaskPad,
            psz_group: ?PWSTR,
            lp_list_pad_info: ?*MMC_LISTPAD_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn taskNotify(self: *const T, pdo_: ?*IDataObject, arg_: ?*VARIANT, param2_: ?*VARIANT) HRESULT {
                return @as(*const IExtendTaskPad.VTable, @ptrCast(self.vtable)).TaskNotify(@as(*const IExtendTaskPad, @ptrCast(self)), pdo_, arg_, param2_);
            }
            pub inline fn enumTasks(self: *const T, pdo_: ?*IDataObject, sz_task_group_: ?PWSTR, pp_enum_t_a_s_k_: ?*?*IEnumTASK) HRESULT {
                return @as(*const IExtendTaskPad.VTable, @ptrCast(self.vtable)).EnumTasks(@as(*const IExtendTaskPad, @ptrCast(self)), pdo_, sz_task_group_, pp_enum_t_a_s_k_);
            }
            pub inline fn getTitle(self: *const T, psz_group_: ?PWSTR, psz_title_: ?*?PWSTR) HRESULT {
                return @as(*const IExtendTaskPad.VTable, @ptrCast(self.vtable)).GetTitle(@as(*const IExtendTaskPad, @ptrCast(self)), psz_group_, psz_title_);
            }
            pub inline fn getDescriptiveText(self: *const T, psz_group_: ?PWSTR, psz_descriptive_text_: ?*?PWSTR) HRESULT {
                return @as(*const IExtendTaskPad.VTable, @ptrCast(self.vtable)).GetDescriptiveText(@as(*const IExtendTaskPad, @ptrCast(self)), psz_group_, psz_descriptive_text_);
            }
            pub inline fn getBackground(self: *const T, psz_group_: ?PWSTR, p_t_d_o_: ?*MMC_TASK_DISPLAY_OBJECT) HRESULT {
                return @as(*const IExtendTaskPad.VTable, @ptrCast(self.vtable)).GetBackground(@as(*const IExtendTaskPad, @ptrCast(self)), psz_group_, p_t_d_o_);
            }
            pub inline fn getListPadInfo(self: *const T, psz_group_: ?PWSTR, lp_list_pad_info_: ?*MMC_LISTPAD_INFO) HRESULT {
                return @as(*const IExtendTaskPad.VTable, @ptrCast(self.vtable)).GetListPadInfo(@as(*const IExtendTaskPad, @ptrCast(self)), psz_group_, lp_list_pad_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IConsole2_Value = Guid.initString("103d842a-aa63-11d1-a7e1-00c04fd8d565");
pub const IID_IConsole2 = &IID_IConsole2_Value;
pub const IConsole2 = extern struct {
    pub const VTable = extern struct {
        base: IConsole.VTable,
        Expand: *const fn (
            self: *const IConsole2,
            h_item: isize,
            b_expand: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsTaskpadViewPreferred: *const fn (
            self: *const IConsole2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStatusText: *const fn (
            self: *const IConsole2,
            psz_status_text: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IConsole.MethodMixin(T);
            pub inline fn expand(self: *const T, h_item_: isize, b_expand_: BOOL) HRESULT {
                return @as(*const IConsole2.VTable, @ptrCast(self.vtable)).Expand(@as(*const IConsole2, @ptrCast(self)), h_item_, b_expand_);
            }
            pub inline fn isTaskpadViewPreferred(self: *const T) HRESULT {
                return @as(*const IConsole2.VTable, @ptrCast(self.vtable)).IsTaskpadViewPreferred(@as(*const IConsole2, @ptrCast(self)));
            }
            pub inline fn setStatusText(self: *const T, psz_status_text_: ?PWSTR) HRESULT {
                return @as(*const IConsole2.VTable, @ptrCast(self.vtable)).SetStatusText(@as(*const IConsole2, @ptrCast(self)), psz_status_text_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IDisplayHelp_Value = Guid.initString("cc593830-b926-11d1-8063-0000f875a9ce");
pub const IID_IDisplayHelp = &IID_IDisplayHelp_Value;
pub const IDisplayHelp = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ShowTopic: *const fn (
            self: *const IDisplayHelp,
            psz_help_topic: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn showTopic(self: *const T, psz_help_topic_: ?PWSTR) HRESULT {
                return @as(*const IDisplayHelp.VTable, @ptrCast(self.vtable)).ShowTopic(@as(*const IDisplayHelp, @ptrCast(self)), psz_help_topic_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IRequiredExtensions_Value = Guid.initString("72782d7a-a4a0-11d1-af0f-00c04fb6dd2c");
pub const IID_IRequiredExtensions = &IID_IRequiredExtensions_Value;
pub const IRequiredExtensions = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnableAllExtensions: *const fn (
            self: *const IRequiredExtensions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFirstExtension: *const fn (
            self: *const IRequiredExtensions,
            p_ext_c_l_s_i_d: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetNextExtension: *const fn (
            self: *const IRequiredExtensions,
            p_ext_c_l_s_i_d: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn enableAllExtensions(self: *const T) HRESULT {
                return @as(*const IRequiredExtensions.VTable, @ptrCast(self.vtable)).EnableAllExtensions(@as(*const IRequiredExtensions, @ptrCast(self)));
            }
            pub inline fn getFirstExtension(self: *const T, p_ext_c_l_s_i_d_: ?*Guid) HRESULT {
                return @as(*const IRequiredExtensions.VTable, @ptrCast(self.vtable)).GetFirstExtension(@as(*const IRequiredExtensions, @ptrCast(self)), p_ext_c_l_s_i_d_);
            }
            pub inline fn getNextExtension(self: *const T, p_ext_c_l_s_i_d_: ?*Guid) HRESULT {
                return @as(*const IRequiredExtensions.VTable, @ptrCast(self.vtable)).GetNextExtension(@as(*const IRequiredExtensions, @ptrCast(self)), p_ext_c_l_s_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IStringTable_Value = Guid.initString("de40b7a4-0f65-11d2-8e25-00c04f8ecd78");
pub const IID_IStringTable = &IID_IStringTable_Value;
pub const IStringTable = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddString: *const fn (
            self: *const IStringTable,
            psz_add: ?[*:0]const u16,
            p_string_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetString: *const fn (
            self: *const IStringTable,
            string_i_d: u32,
            cch_buffer: u32,
            lp_buffer: [*:0]u16,
            pcch_out: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetStringLength: *const fn (
            self: *const IStringTable,
            string_i_d: u32,
            pcch_string: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteString: *const fn (
            self: *const IStringTable,
            string_i_d: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteAllStrings: *const fn (
            self: *const IStringTable,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindString: *const fn (
            self: *const IStringTable,
            psz_find: ?[*:0]const u16,
            p_string_i_d: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Enumerate: *const fn (
            self: *const IStringTable,
            pp_enum: ?*?*IEnumString,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addString(self: *const T, psz_add_: ?[*:0]const u16, p_string_i_d_: ?*u32) HRESULT {
                return @as(*const IStringTable.VTable, @ptrCast(self.vtable)).AddString(@as(*const IStringTable, @ptrCast(self)), psz_add_, p_string_i_d_);
            }
            pub inline fn getString(self: *const T, string_i_d_: u32, cch_buffer_: u32, lp_buffer_: [*:0]u16, pcch_out_: ?*u32) HRESULT {
                return @as(*const IStringTable.VTable, @ptrCast(self.vtable)).GetString(@as(*const IStringTable, @ptrCast(self)), string_i_d_, cch_buffer_, lp_buffer_, pcch_out_);
            }
            pub inline fn getStringLength(self: *const T, string_i_d_: u32, pcch_string_: ?*u32) HRESULT {
                return @as(*const IStringTable.VTable, @ptrCast(self.vtable)).GetStringLength(@as(*const IStringTable, @ptrCast(self)), string_i_d_, pcch_string_);
            }
            pub inline fn deleteString(self: *const T, string_i_d_: u32) HRESULT {
                return @as(*const IStringTable.VTable, @ptrCast(self.vtable)).DeleteString(@as(*const IStringTable, @ptrCast(self)), string_i_d_);
            }
            pub inline fn deleteAllStrings(self: *const T) HRESULT {
                return @as(*const IStringTable.VTable, @ptrCast(self.vtable)).DeleteAllStrings(@as(*const IStringTable, @ptrCast(self)));
            }
            pub inline fn findString(self: *const T, psz_find_: ?[*:0]const u16, p_string_i_d_: ?*u32) HRESULT {
                return @as(*const IStringTable.VTable, @ptrCast(self.vtable)).FindString(@as(*const IStringTable, @ptrCast(self)), psz_find_, p_string_i_d_);
            }
            pub inline fn enumerate(self: *const T, pp_enum_: ?*?*IEnumString) HRESULT {
                return @as(*const IStringTable.VTable, @ptrCast(self.vtable)).Enumerate(@as(*const IStringTable, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const MMC_COLUMN_DATA = extern struct {
    nColIndex: i32,
    dwFlags: u32,
    nWidth: i32,
    ulReserved: usize,
};

pub const MMC_COLUMN_SET_DATA = extern struct {
    cbSize: i32,
    nNumCols: i32,
    pColData: ?*MMC_COLUMN_DATA,
};

pub const MMC_SORT_DATA = extern struct {
    nColIndex: i32,
    dwSortOptions: u32,
    ulReserved: usize,
};

pub const MMC_SORT_SET_DATA = extern struct {
    cbSize: i32,
    nNumItems: i32,
    pSortData: ?*MMC_SORT_DATA,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IColumnData_Value = Guid.initString("547c1354-024d-11d3-a707-00c04f8ef4cb");
pub const IID_IColumnData = &IID_IColumnData_Value;
pub const IColumnData = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetColumnConfigData: *const fn (
            self: *const IColumnData,
            p_col_i_d: ?*SColumnSetID,
            p_col_set_data: ?*MMC_COLUMN_SET_DATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnConfigData: *const fn (
            self: *const IColumnData,
            p_col_i_d: ?*SColumnSetID,
            pp_col_set_data: ?*?*MMC_COLUMN_SET_DATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetColumnSortData: *const fn (
            self: *const IColumnData,
            p_col_i_d: ?*SColumnSetID,
            p_col_sort_data: ?*MMC_SORT_SET_DATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetColumnSortData: *const fn (
            self: *const IColumnData,
            p_col_i_d: ?*SColumnSetID,
            pp_col_sort_data: ?*?*MMC_SORT_SET_DATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setColumnConfigData(self: *const T, p_col_i_d_: ?*SColumnSetID, p_col_set_data_: ?*MMC_COLUMN_SET_DATA) HRESULT {
                return @as(*const IColumnData.VTable, @ptrCast(self.vtable)).SetColumnConfigData(@as(*const IColumnData, @ptrCast(self)), p_col_i_d_, p_col_set_data_);
            }
            pub inline fn getColumnConfigData(self: *const T, p_col_i_d_: ?*SColumnSetID, pp_col_set_data_: ?*?*MMC_COLUMN_SET_DATA) HRESULT {
                return @as(*const IColumnData.VTable, @ptrCast(self.vtable)).GetColumnConfigData(@as(*const IColumnData, @ptrCast(self)), p_col_i_d_, pp_col_set_data_);
            }
            pub inline fn setColumnSortData(self: *const T, p_col_i_d_: ?*SColumnSetID, p_col_sort_data_: ?*MMC_SORT_SET_DATA) HRESULT {
                return @as(*const IColumnData.VTable, @ptrCast(self.vtable)).SetColumnSortData(@as(*const IColumnData, @ptrCast(self)), p_col_i_d_, p_col_sort_data_);
            }
            pub inline fn getColumnSortData(self: *const T, p_col_i_d_: ?*SColumnSetID, pp_col_sort_data_: ?*?*MMC_SORT_SET_DATA) HRESULT {
                return @as(*const IColumnData.VTable, @ptrCast(self.vtable)).GetColumnSortData(@as(*const IColumnData, @ptrCast(self)), p_col_i_d_, pp_col_sort_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const IconIdentifier = enum(i32) {
    None = 0,
    Error = 32513,
    Question = 32514,
    Warning = 32515,
    Information = 32516,
    // First = 32513, this enum value conflicts with Error
    // Last = 32516, this enum value conflicts with Information
};
pub const Icon_None = IconIdentifier.None;
pub const Icon_Error = IconIdentifier.Error;
pub const Icon_Question = IconIdentifier.Question;
pub const Icon_Warning = IconIdentifier.Warning;
pub const Icon_Information = IconIdentifier.Information;
pub const Icon_First = IconIdentifier.Error;
pub const Icon_Last = IconIdentifier.Information;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IMessageView_Value = Guid.initString("80f94174-fccc-11d2-b991-00c04f8ecd78");
pub const IID_IMessageView = &IID_IMessageView_Value;
pub const IMessageView = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetTitleText: *const fn (
            self: *const IMessageView,
            psz_title_text: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBodyText: *const fn (
            self: *const IMessageView,
            psz_body_text: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetIcon: *const fn (
            self: *const IMessageView,
            id: IconIdentifier,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clear: *const fn (
            self: *const IMessageView,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setTitleText(self: *const T, psz_title_text_: ?[*:0]const u16) HRESULT {
                return @as(*const IMessageView.VTable, @ptrCast(self.vtable)).SetTitleText(@as(*const IMessageView, @ptrCast(self)), psz_title_text_);
            }
            pub inline fn setBodyText(self: *const T, psz_body_text_: ?[*:0]const u16) HRESULT {
                return @as(*const IMessageView.VTable, @ptrCast(self.vtable)).SetBodyText(@as(*const IMessageView, @ptrCast(self)), psz_body_text_);
            }
            pub inline fn setIcon(self: *const T, id_: IconIdentifier) HRESULT {
                return @as(*const IMessageView.VTable, @ptrCast(self.vtable)).SetIcon(@as(*const IMessageView, @ptrCast(self)), id_);
            }
            pub inline fn clear(self: *const T) HRESULT {
                return @as(*const IMessageView.VTable, @ptrCast(self.vtable)).Clear(@as(*const IMessageView, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const RDITEMHDR = extern struct {
    dwFlags: u32,
    cookie: isize,
    lpReserved: LPARAM,
};

pub const RDCOMPARE = extern struct {
    cbSize: u32,
    dwFlags: u32,
    nColumn: i32,
    lUserParam: LPARAM,
    prdch1: ?*RDITEMHDR,
    prdch2: ?*RDITEMHDR,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IResultDataCompareEx_Value = Guid.initString("96933476-0251-11d3-aeb0-00c04f8ecd78");
pub const IID_IResultDataCompareEx = &IID_IResultDataCompareEx_Value;
pub const IResultDataCompareEx = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Compare: *const fn (
            self: *const IResultDataCompareEx,
            prdc: ?*RDCOMPARE,
            pn_result: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn compare(self: *const T, prdc_: ?*RDCOMPARE, pn_result_: ?*i32) HRESULT {
                return @as(*const IResultDataCompareEx.VTable, @ptrCast(self.vtable)).Compare(@as(*const IResultDataCompareEx, @ptrCast(self)), prdc_, pn_result_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const MMC_VIEW_TYPE = enum(i32) {
    LIST = 0,
    HTML = 1,
    OCX = 2,
};
pub const MMC_VIEW_TYPE_LIST = MMC_VIEW_TYPE.LIST;
pub const MMC_VIEW_TYPE_HTML = MMC_VIEW_TYPE.HTML;
pub const MMC_VIEW_TYPE_OCX = MMC_VIEW_TYPE.OCX;

pub const RESULT_VIEW_TYPE_INFO = extern struct {
    pstrPersistableViewDescription: ?PWSTR,
    eViewType: MMC_VIEW_TYPE,
    dwMiscOptions: u32,
    Anonymous: extern union {
        dwListOptions: u32,
        Anonymous1: extern struct {
            dwHTMLOptions: u32,
            pstrURL: ?PWSTR,
        },
        Anonymous2: extern struct {
            dwOCXOptions: u32,
            pUnkControl: ?*IUnknown,
        },
    },
};

pub const CONTEXTMENUITEM2 = extern struct {
    strName: ?PWSTR,
    strStatusBarText: ?PWSTR,
    lCommandID: i32,
    lInsertionPointID: i32,
    fFlags: i32,
    fSpecialFlags: i32,
    strLanguageIndependentName: ?PWSTR,
};

pub const MMC_EXT_VIEW_DATA = extern struct {
    viewID: Guid,
    pszURL: ?[*:0]const u16,
    pszViewTitle: ?[*:0]const u16,
    pszTooltipText: ?[*:0]const u16,
    bReplacesDefaultView: BOOL,
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IComponentData2_Value = Guid.initString("cca0f2d2-82de-41b5-bf47-3b2076273d5c");
pub const IID_IComponentData2 = &IID_IComponentData2_Value;
pub const IComponentData2 = extern struct {
    pub const VTable = extern struct {
        base: IComponentData.VTable,
        QueryDispatch: *const fn (
            self: *const IComponentData2,
            cookie: isize,
            type: DATA_OBJECT_TYPES,
            pp_dispatch: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IComponentData.MethodMixin(T);
            pub inline fn queryDispatch(self: *const T, cookie_: isize, type_: DATA_OBJECT_TYPES, pp_dispatch_: ?*?*IDispatch) HRESULT {
                return @as(*const IComponentData2.VTable, @ptrCast(self.vtable)).QueryDispatch(@as(*const IComponentData2, @ptrCast(self)), cookie_, type_, pp_dispatch_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IComponent2_Value = Guid.initString("79a2d615-4a10-4ed4-8c65-8633f9335095");
pub const IID_IComponent2 = &IID_IComponent2_Value;
pub const IComponent2 = extern struct {
    pub const VTable = extern struct {
        base: IComponent.VTable,
        QueryDispatch: *const fn (
            self: *const IComponent2,
            cookie: isize,
            type: DATA_OBJECT_TYPES,
            pp_dispatch: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResultViewType2: *const fn (
            self: *const IComponent2,
            cookie: isize,
            p_result_view_type: ?*RESULT_VIEW_TYPE_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RestoreResultView: *const fn (
            self: *const IComponent2,
            cookie: isize,
            p_result_view_type: ?*RESULT_VIEW_TYPE_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IComponent.MethodMixin(T);
            pub inline fn queryDispatch(self: *const T, cookie_: isize, type_: DATA_OBJECT_TYPES, pp_dispatch_: ?*?*IDispatch) HRESULT {
                return @as(*const IComponent2.VTable, @ptrCast(self.vtable)).QueryDispatch(@as(*const IComponent2, @ptrCast(self)), cookie_, type_, pp_dispatch_);
            }
            pub inline fn getResultViewType2(self: *const T, cookie_: isize, p_result_view_type_: ?*RESULT_VIEW_TYPE_INFO) HRESULT {
                return @as(*const IComponent2.VTable, @ptrCast(self.vtable)).GetResultViewType2(@as(*const IComponent2, @ptrCast(self)), cookie_, p_result_view_type_);
            }
            pub inline fn restoreResultView(self: *const T, cookie_: isize, p_result_view_type_: ?*RESULT_VIEW_TYPE_INFO) HRESULT {
                return @as(*const IComponent2.VTable, @ptrCast(self.vtable)).RestoreResultView(@as(*const IComponent2, @ptrCast(self)), cookie_, p_result_view_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IContextMenuCallback2_Value = Guid.initString("e178bc0e-2ed0-4b5e-8097-42c9087e8b33");
pub const IID_IContextMenuCallback2 = &IID_IContextMenuCallback2_Value;
pub const IContextMenuCallback2 = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddItem: *const fn (
            self: *const IContextMenuCallback2,
            p_item: ?*CONTEXTMENUITEM2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addItem(self: *const T, p_item_: ?*CONTEXTMENUITEM2) HRESULT {
                return @as(*const IContextMenuCallback2.VTable, @ptrCast(self.vtable)).AddItem(@as(*const IContextMenuCallback2, @ptrCast(self)), p_item_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IMMCVersionInfo_Value = Guid.initString("a8d2c5fe-cdcb-4b9d-bde5-a27343ff54bc");
pub const IID_IMMCVersionInfo = &IID_IMMCVersionInfo_Value;
pub const IMMCVersionInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMMCVersion: *const fn (
            self: *const IMMCVersionInfo,
            p_version_major: ?*i32,
            p_version_minor: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getMMCVersion(self: *const T, p_version_major_: ?*i32, p_version_minor_: ?*i32) HRESULT {
                return @as(*const IMMCVersionInfo.VTable, @ptrCast(self.vtable)).GetMMCVersion(@as(*const IMMCVersionInfo, @ptrCast(self)), p_version_major_, p_version_minor_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IExtendView_Value = Guid.initString("89995cee-d2ed-4c0e-ae5e-df7e76f3fa53");
pub const IID_IExtendView = &IID_IExtendView_Value;
pub const IExtendView = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetViews: *const fn (
            self: *const IExtendView,
            p_data_object: ?*IDataObject,
            p_view_extension_callback: ?*IViewExtensionCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getViews(self: *const T, p_data_object_: ?*IDataObject, p_view_extension_callback_: ?*IViewExtensionCallback) HRESULT {
                return @as(*const IExtendView.VTable, @ptrCast(self.vtable)).GetViews(@as(*const IExtendView, @ptrCast(self)), p_data_object_, p_view_extension_callback_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IViewExtensionCallback_Value = Guid.initString("34dd928a-7599-41e5-9f5e-d6bc3062c2da");
pub const IID_IViewExtensionCallback = &IID_IViewExtensionCallback_Value;
pub const IViewExtensionCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddView: *const fn (
            self: *const IViewExtensionCallback,
            p_ext_view_data: ?*MMC_EXT_VIEW_DATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addView(self: *const T, p_ext_view_data_: ?*MMC_EXT_VIEW_DATA) HRESULT {
                return @as(*const IViewExtensionCallback.VTable, @ptrCast(self.vtable)).AddView(@as(*const IViewExtensionCallback, @ptrCast(self)), p_ext_view_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IConsolePower_Value = Guid.initString("1cfbdd0e-62ca-49ce-a3af-dbb2de61b068");
pub const IID_IConsolePower = &IID_IConsolePower_Value;
pub const IConsolePower = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetExecutionState: *const fn (
            self: *const IConsolePower,
            dw_add: u32,
            dw_remove: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResetIdleTimer: *const fn (
            self: *const IConsolePower,
            dw_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setExecutionState(self: *const T, dw_add_: u32, dw_remove_: u32) HRESULT {
                return @as(*const IConsolePower.VTable, @ptrCast(self.vtable)).SetExecutionState(@as(*const IConsolePower, @ptrCast(self)), dw_add_, dw_remove_);
            }
            pub inline fn resetIdleTimer(self: *const T, dw_flags_: u32) HRESULT {
                return @as(*const IConsolePower.VTable, @ptrCast(self.vtable)).ResetIdleTimer(@as(*const IConsolePower, @ptrCast(self)), dw_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IConsolePowerSink_Value = Guid.initString("3333759f-fe4f-4975-b143-fec0a5dd6d65");
pub const IID_IConsolePowerSink = &IID_IConsolePowerSink_Value;
pub const IConsolePowerSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnPowerBroadcast: *const fn (
            self: *const IConsolePowerSink,
            n_event: u32,
            l_param: LPARAM,
            pl_return: ?*LRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onPowerBroadcast(self: *const T, n_event_: u32, l_param_: LPARAM, pl_return_: ?*LRESULT) HRESULT {
                return @as(*const IConsolePowerSink.VTable, @ptrCast(self.vtable)).OnPowerBroadcast(@as(*const IConsolePowerSink, @ptrCast(self)), n_event_, l_param_, pl_return_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_INodeProperties_Value = Guid.initString("15bc4d24-a522-4406-aa55-0749537a6865");
pub const IID_INodeProperties = &IID_INodeProperties_Value;
pub const INodeProperties = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetProperty: *const fn (
            self: *const INodeProperties,
            p_data_object: ?*IDataObject,
            sz_property_name: ?BSTR,
            pbstr_property: ?*?*u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getProperty(self: *const T, p_data_object_: ?*IDataObject, sz_property_name_: ?BSTR, pbstr_property_: ?*?*u16) HRESULT {
                return @as(*const INodeProperties.VTable, @ptrCast(self.vtable)).GetProperty(@as(*const INodeProperties, @ptrCast(self)), p_data_object_, sz_property_name_, pbstr_property_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IConsole3_Value = Guid.initString("4f85efdb-d0e1-498c-8d4a-d010dfdd404f");
pub const IID_IConsole3 = &IID_IConsole3_Value;
pub const IConsole3 = extern struct {
    pub const VTable = extern struct {
        base: IConsole2.VTable,
        RenameScopeItem: *const fn (
            self: *const IConsole3,
            h_scope_item: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IConsole2.MethodMixin(T);
            pub inline fn renameScopeItem(self: *const T, h_scope_item_: isize) HRESULT {
                return @as(*const IConsole3.VTable, @ptrCast(self.vtable)).RenameScopeItem(@as(*const IConsole3, @ptrCast(self)), h_scope_item_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IResultData2_Value = Guid.initString("0f36e0eb-a7f1-4a81-be5a-9247f7de4b1b");
pub const IID_IResultData2 = &IID_IResultData2_Value;
pub const IResultData2 = extern struct {
    pub const VTable = extern struct {
        base: IResultData.VTable,
        RenameResultItem: *const fn (
            self: *const IResultData2,
            item_i_d: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IResultData.MethodMixin(T);
            pub inline fn renameResultItem(self: *const T, item_i_d_: isize) HRESULT {
                return @as(*const IResultData2.VTable, @ptrCast(self.vtable)).RenameResultItem(@as(*const IResultData2, @ptrCast(self)), item_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (17)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const BSTR = @import("../foundation.zig").BSTR;
const HBITMAP = @import("../graphics/gdi.zig").HBITMAP;
const HICON = @import("../ui/windows_and_messaging.zig").HICON;
const HPALETTE = @import("../graphics/gdi.zig").HPALETTE;
const HPROPSHEETPAGE = @import("../ui/controls.zig").HPROPSHEETPAGE;
const HRESULT = @import("../foundation.zig").HRESULT;
const HWND = @import("../foundation.zig").HWND;
const IDataObject = @import("../system/com.zig").IDataObject;
const IDispatch = @import("../system/com.zig").IDispatch;
const IEnumString = @import("../system/com.zig").IEnumString;
const IUnknown = @import("../system/com.zig").IUnknown;
const LPARAM = @import("../foundation.zig").LPARAM;
const LRESULT = @import("../foundation.zig").LRESULT;
const PWSTR = @import("../foundation.zig").PWSTR;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
