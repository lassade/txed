//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (260)
//--------------------------------------------------------------------------------
pub const WTS_DOMAIN_LENGTH = @as(u32, 255);
pub const WTS_USERNAME_LENGTH = @as(u32, 255);
pub const WTS_PASSWORD_LENGTH = @as(u32, 255);
pub const WTS_DIRECTORY_LENGTH = @as(u32, 256);
pub const WTS_INITIALPROGRAM_LENGTH = @as(u32, 256);
pub const WTS_PROTOCOL_NAME_LENGTH = @as(u32, 8);
pub const WTS_DRIVER_NAME_LENGTH = @as(u32, 8);
pub const WTS_DEVICE_NAME_LENGTH = @as(u32, 19);
pub const WTS_IMEFILENAME_LENGTH = @as(u32, 32);
pub const WTS_CLIENTNAME_LENGTH = @as(u32, 20);
pub const WTS_CLIENTADDRESS_LENGTH = @as(u32, 30);
pub const WTS_CLIENT_PRODUCT_ID_LENGTH = @as(u32, 32);
pub const WTS_MAX_PROTOCOL_CACHE = @as(u32, 4);
pub const WTS_MAX_CACHE_RESERVED = @as(u32, 20);
pub const WTS_MAX_RESERVED = @as(u32, 100);
pub const WTS_MAX_COUNTERS = @as(u32, 100);
pub const WTS_MAX_DISPLAY_IOCTL_DATA = @as(u32, 256);
pub const WTS_PERF_DISABLE_NOTHING = @as(u32, 0);
pub const WTS_PERF_DISABLE_WALLPAPER = @as(u32, 1);
pub const WTS_PERF_DISABLE_FULLWINDOWDRAG = @as(u32, 2);
pub const WTS_PERF_DISABLE_MENUANIMATIONS = @as(u32, 4);
pub const WTS_PERF_DISABLE_THEMING = @as(u32, 8);
pub const WTS_PERF_ENABLE_ENHANCED_GRAPHICS = @as(u32, 16);
pub const WTS_PERF_DISABLE_CURSOR_SHADOW = @as(u32, 32);
pub const WTS_PERF_DISABLE_CURSORSETTINGS = @as(u32, 64);
pub const WTS_PERF_ENABLE_FONT_SMOOTHING = @as(u32, 128);
pub const WTS_PERF_ENABLE_DESKTOP_COMPOSITION = @as(u32, 256);
pub const WTS_VALUE_TYPE_ULONG = @as(u32, 1);
pub const WTS_VALUE_TYPE_STRING = @as(u32, 2);
pub const WTS_VALUE_TYPE_BINARY = @as(u32, 3);
pub const WTS_VALUE_TYPE_GUID = @as(u32, 4);
pub const WTS_KEY_EXCHANGE_ALG_RSA = @as(u32, 1);
pub const WTS_KEY_EXCHANGE_ALG_DH = @as(u32, 2);
pub const WTS_LICENSE_PROTOCOL_VERSION = @as(u32, 65536);
pub const WTS_LICENSE_PREAMBLE_VERSION = @as(u32, 3);
pub const WRDS_DOMAIN_LENGTH = @as(u32, 255);
pub const WRDS_USERNAME_LENGTH = @as(u32, 255);
pub const WRDS_PASSWORD_LENGTH = @as(u32, 255);
pub const WRDS_DIRECTORY_LENGTH = @as(u32, 256);
pub const WRDS_INITIALPROGRAM_LENGTH = @as(u32, 256);
pub const WRDS_PROTOCOL_NAME_LENGTH = @as(u32, 8);
pub const WRDS_DRIVER_NAME_LENGTH = @as(u32, 8);
pub const WRDS_DEVICE_NAME_LENGTH = @as(u32, 19);
pub const WRDS_IMEFILENAME_LENGTH = @as(u32, 32);
pub const WRDS_CLIENTNAME_LENGTH = @as(u32, 20);
pub const WRDS_CLIENTADDRESS_LENGTH = @as(u32, 30);
pub const WRDS_CLIENT_PRODUCT_ID_LENGTH = @as(u32, 32);
pub const WRDS_MAX_PROTOCOL_CACHE = @as(u32, 4);
pub const WRDS_MAX_CACHE_RESERVED = @as(u32, 20);
pub const WRDS_MAX_RESERVED = @as(u32, 100);
pub const WRDS_MAX_COUNTERS = @as(u32, 100);
pub const WRDS_MAX_DISPLAY_IOCTL_DATA = @as(u32, 256);
pub const WRDS_PERF_DISABLE_NOTHING = @as(u32, 0);
pub const WRDS_PERF_DISABLE_WALLPAPER = @as(u32, 1);
pub const WRDS_PERF_DISABLE_FULLWINDOWDRAG = @as(u32, 2);
pub const WRDS_PERF_DISABLE_MENUANIMATIONS = @as(u32, 4);
pub const WRDS_PERF_DISABLE_THEMING = @as(u32, 8);
pub const WRDS_PERF_ENABLE_ENHANCED_GRAPHICS = @as(u32, 16);
pub const WRDS_PERF_DISABLE_CURSOR_SHADOW = @as(u32, 32);
pub const WRDS_PERF_DISABLE_CURSORSETTINGS = @as(u32, 64);
pub const WRDS_PERF_ENABLE_FONT_SMOOTHING = @as(u32, 128);
pub const WRDS_PERF_ENABLE_DESKTOP_COMPOSITION = @as(u32, 256);
pub const WRDS_VALUE_TYPE_ULONG = @as(u32, 1);
pub const WRDS_VALUE_TYPE_STRING = @as(u32, 2);
pub const WRDS_VALUE_TYPE_BINARY = @as(u32, 3);
pub const WRDS_VALUE_TYPE_GUID = @as(u32, 4);
pub const WRDS_KEY_EXCHANGE_ALG_RSA = @as(u32, 1);
pub const WRDS_KEY_EXCHANGE_ALG_DH = @as(u32, 2);
pub const WRDS_LICENSE_PROTOCOL_VERSION = @as(u32, 65536);
pub const WRDS_LICENSE_PREAMBLE_VERSION = @as(u32, 3);
pub const SINGLE_SESSION = @as(u32, 1);
pub const FORCE_REJOIN = @as(u32, 2);
pub const FORCE_REJOIN_IN_CLUSTERMODE = @as(u32, 3);
pub const RESERVED_FOR_LEGACY = @as(u32, 4);
pub const KEEP_EXISTING_SESSIONS = @as(u32, 8);
pub const CHANNEL_EVENT_INITIALIZED = @as(u32, 0);
pub const CHANNEL_EVENT_CONNECTED = @as(u32, 1);
pub const CHANNEL_EVENT_V1_CONNECTED = @as(u32, 2);
pub const CHANNEL_EVENT_DISCONNECTED = @as(u32, 3);
pub const CHANNEL_EVENT_TERMINATED = @as(u32, 4);
pub const CHANNEL_EVENT_DATA_RECEIVED = @as(u32, 10);
pub const CHANNEL_EVENT_WRITE_COMPLETE = @as(u32, 11);
pub const CHANNEL_EVENT_WRITE_CANCELLED = @as(u32, 12);
pub const CHANNEL_RC_OK = @as(u32, 0);
pub const CHANNEL_RC_ALREADY_INITIALIZED = @as(u32, 1);
pub const CHANNEL_RC_NOT_INITIALIZED = @as(u32, 2);
pub const CHANNEL_RC_ALREADY_CONNECTED = @as(u32, 3);
pub const CHANNEL_RC_NOT_CONNECTED = @as(u32, 4);
pub const CHANNEL_RC_TOO_MANY_CHANNELS = @as(u32, 5);
pub const CHANNEL_RC_BAD_CHANNEL = @as(u32, 6);
pub const CHANNEL_RC_BAD_CHANNEL_HANDLE = @as(u32, 7);
pub const CHANNEL_RC_NO_BUFFER = @as(u32, 8);
pub const CHANNEL_RC_BAD_INIT_HANDLE = @as(u32, 9);
pub const CHANNEL_RC_NOT_OPEN = @as(u32, 10);
pub const CHANNEL_RC_BAD_PROC = @as(u32, 11);
pub const CHANNEL_RC_NO_MEMORY = @as(u32, 12);
pub const CHANNEL_RC_UNKNOWN_CHANNEL_NAME = @as(u32, 13);
pub const CHANNEL_RC_ALREADY_OPEN = @as(u32, 14);
pub const CHANNEL_RC_NOT_IN_VIRTUALCHANNELENTRY = @as(u32, 15);
pub const CHANNEL_RC_NULL_DATA = @as(u32, 16);
pub const CHANNEL_RC_ZERO_LENGTH = @as(u32, 17);
pub const CHANNEL_RC_INVALID_INSTANCE = @as(u32, 18);
pub const CHANNEL_RC_UNSUPPORTED_VERSION = @as(u32, 19);
pub const CHANNEL_RC_INITIALIZATION_ERROR = @as(u32, 20);
pub const VIRTUAL_CHANNEL_VERSION_WIN2000 = @as(u32, 1);
pub const CHANNEL_CHUNK_LENGTH = @as(u32, 1600);
pub const CHANNEL_BUFFER_SIZE = @as(u32, 65535);
pub const CHANNEL_FLAG_FIRST = @as(u32, 1);
pub const CHANNEL_FLAG_LAST = @as(u32, 2);
pub const CHANNEL_FLAG_MIDDLE = @as(u32, 0);
pub const CHANNEL_FLAG_FAIL = @as(u32, 256);
pub const CHANNEL_OPTION_INITIALIZED = @as(u32, 2147483648);
pub const CHANNEL_OPTION_ENCRYPT_RDP = @as(u32, 1073741824);
pub const CHANNEL_OPTION_ENCRYPT_SC = @as(u32, 536870912);
pub const CHANNEL_OPTION_ENCRYPT_CS = @as(u32, 268435456);
pub const CHANNEL_OPTION_PRI_HIGH = @as(u32, 134217728);
pub const CHANNEL_OPTION_PRI_MED = @as(u32, 67108864);
pub const CHANNEL_OPTION_PRI_LOW = @as(u32, 33554432);
pub const CHANNEL_OPTION_COMPRESS_RDP = @as(u32, 8388608);
pub const CHANNEL_OPTION_COMPRESS = @as(u32, 4194304);
pub const CHANNEL_OPTION_SHOW_PROTOCOL = @as(u32, 2097152);
pub const CHANNEL_OPTION_REMOTE_CONTROL_PERSISTENT = @as(u32, 1048576);
pub const CHANNEL_MAX_COUNT = @as(u32, 30);
pub const CHANNEL_NAME_LEN = @as(u32, 7);
pub const MAX_POLICY_ATTRIBUTES = @as(u32, 20);
pub const WTS_CURRENT_SESSION = @as(u32, 4294967295);
pub const USERNAME_LENGTH = @as(u32, 20);
pub const CLIENTNAME_LENGTH = @as(u32, 20);
pub const CLIENTADDRESS_LENGTH = @as(u32, 30);
pub const WTS_WSD_LOGOFF = @as(u32, 1);
pub const WTS_WSD_SHUTDOWN = @as(u32, 2);
pub const WTS_WSD_REBOOT = @as(u32, 4);
pub const WTS_WSD_POWEROFF = @as(u32, 8);
pub const WTS_WSD_FASTREBOOT = @as(u32, 16);
pub const MAX_ELAPSED_TIME_LENGTH = @as(u32, 15);
pub const MAX_DATE_TIME_LENGTH = @as(u32, 56);
pub const WINSTATIONNAME_LENGTH = @as(u32, 32);
pub const DOMAIN_LENGTH = @as(u32, 17);
pub const WTS_DRIVE_LENGTH = @as(u32, 3);
pub const WTS_LISTENER_NAME_LENGTH = @as(u32, 32);
pub const WTS_COMMENT_LENGTH = @as(u32, 60);
pub const WTS_LISTENER_CREATE = @as(u32, 1);
pub const WTS_LISTENER_UPDATE = @as(u32, 16);
pub const WTS_SECURITY_QUERY_INFORMATION = @as(u32, 1);
pub const WTS_SECURITY_SET_INFORMATION = @as(u32, 2);
pub const WTS_SECURITY_RESET = @as(u32, 4);
pub const WTS_SECURITY_VIRTUAL_CHANNELS = @as(u32, 8);
pub const WTS_SECURITY_REMOTE_CONTROL = @as(u32, 16);
pub const WTS_SECURITY_LOGON = @as(u32, 32);
pub const WTS_SECURITY_LOGOFF = @as(u32, 64);
pub const WTS_SECURITY_MESSAGE = @as(u32, 128);
pub const WTS_SECURITY_CONNECT = @as(u32, 256);
pub const WTS_SECURITY_DISCONNECT = @as(u32, 512);
pub const WTS_SECURITY_GUEST_ACCESS = @as(u32, 32);
pub const WTS_PROTOCOL_TYPE_CONSOLE = @as(u32, 0);
pub const WTS_PROTOCOL_TYPE_ICA = @as(u32, 1);
pub const WTS_PROTOCOL_TYPE_RDP = @as(u32, 2);
pub const WTS_SESSIONSTATE_UNKNOWN = @as(u32, 4294967295);
pub const WTS_SESSIONSTATE_LOCK = @as(u32, 0);
pub const WTS_SESSIONSTATE_UNLOCK = @as(u32, 1);
pub const PRODUCTINFO_COMPANYNAME_LENGTH = @as(u32, 256);
pub const PRODUCTINFO_PRODUCTID_LENGTH = @as(u32, 4);
pub const VALIDATIONINFORMATION_LICENSE_LENGTH = @as(u32, 16384);
pub const VALIDATIONINFORMATION_HARDWAREID_LENGTH = @as(u32, 20);
pub const WTS_EVENT_NONE = @as(u32, 0);
pub const WTS_EVENT_CREATE = @as(u32, 1);
pub const WTS_EVENT_DELETE = @as(u32, 2);
pub const WTS_EVENT_RENAME = @as(u32, 4);
pub const WTS_EVENT_CONNECT = @as(u32, 8);
pub const WTS_EVENT_DISCONNECT = @as(u32, 16);
pub const WTS_EVENT_LOGON = @as(u32, 32);
pub const WTS_EVENT_LOGOFF = @as(u32, 64);
pub const WTS_EVENT_STATECHANGE = @as(u32, 128);
pub const WTS_EVENT_LICENSE = @as(u32, 256);
pub const WTS_EVENT_ALL = @as(u32, 2147483647);
pub const WTS_EVENT_FLUSH = @as(u32, 2147483648);
pub const REMOTECONTROL_KBDSHIFT_HOTKEY = @as(u32, 1);
pub const REMOTECONTROL_KBDCTRL_HOTKEY = @as(u32, 2);
pub const REMOTECONTROL_KBDALT_HOTKEY = @as(u32, 4);
pub const WTS_CHANNEL_OPTION_DYNAMIC = @as(u32, 1);
pub const WTS_CHANNEL_OPTION_DYNAMIC_PRI_LOW = @as(u32, 0);
pub const WTS_CHANNEL_OPTION_DYNAMIC_PRI_MED = @as(u32, 2);
pub const WTS_CHANNEL_OPTION_DYNAMIC_PRI_HIGH = @as(u32, 4);
pub const WTS_CHANNEL_OPTION_DYNAMIC_PRI_REAL = @as(u32, 6);
pub const WTS_CHANNEL_OPTION_DYNAMIC_NO_COMPRESS = @as(u32, 8);
pub const NOTIFY_FOR_ALL_SESSIONS = @as(u32, 1);
pub const NOTIFY_FOR_THIS_SESSION = @as(u32, 0);
pub const WTS_PROCESS_INFO_LEVEL_0 = @as(u32, 0);
pub const WTS_PROCESS_INFO_LEVEL_1 = @as(u32, 1);
pub const PLUGIN_CAPABILITY_EXTERNAL_REDIRECTION = @as(u32, 1);
pub const MaxFQDN_Len = @as(u32, 256);
pub const MaxNetBiosName_Len = @as(u32, 16);
pub const MaxNumOfExposed_IPs = @as(u32, 12);
pub const MaxUserName_Len = @as(u32, 104);
pub const MaxDomainName_Len = @as(u32, 256);
pub const MaxFarm_Len = @as(u32, 256);
pub const MaxAppName_Len = @as(u32, 256);
pub const WKS_FLAG_CLEAR_CREDS_ON_LAST_RESOURCE = @as(u32, 1);
pub const WKS_FLAG_PASSWORD_ENCRYPTED = @as(u32, 2);
pub const WKS_FLAG_CREDS_AUTHENTICATED = @as(u32, 4);
pub const SB_SYNCH_CONFLICT_MAX_WRITE_ATTEMPTS = @as(u32, 100);
pub const ACQUIRE_TARGET_LOCK_TIMEOUT = @as(u32, 300000);
pub const RENDER_HINT_CLEAR = @as(u32, 0);
pub const RENDER_HINT_VIDEO = @as(u32, 1);
pub const RENDER_HINT_MAPPEDWINDOW = @as(u32, 2);
pub const WTS_PROPERTY_DEFAULT_CONFIG = "DefaultConfig";
pub const TS_VC_LISTENER_STATIC_CHANNEL = @as(u32, 1);
pub const WRdsGraphicsChannels_LossyChannelMaxMessageSize = @as(u32, 988);
pub const RFX_RDP_MSG_PREFIX = @as(u32, 0);
pub const RFX_GFX_MSG_PREFIX = @as(u32, 48);
pub const RFX_GFX_MSG_PREFIX_MASK = @as(u32, 48);
pub const RFX_GFX_MAX_SUPPORTED_MONITORS = @as(u32, 16);
pub const RFX_CLIENT_ID_LENGTH = @as(u32, 32);
pub const DISPID_METHOD_REMOTEDESKTOPCLIENT_CONNECT = @as(u32, 701);
pub const DISPID_METHOD_REMOTEDESKTOPCLIENT_DISCONNECT = @as(u32, 702);
pub const DISPID_METHOD_REMOTEDESKTOPCLIENT_RECONNECT = @as(u32, 703);
pub const DISPID_METHOD_REMOTEDESKTOPCLIENT_DELETE_SAVED_CREDENTIALS = @as(u32, 704);
pub const DISPID_METHOD_REMOTEDESKTOPCLIENT_UPDATE_SESSION_DISPLAYSETTINGS = @as(u32, 705);
pub const DISPID_METHOD_REMOTEDESKTOPCLIENT_ATTACH_EVENT = @as(u32, 706);
pub const DISPID_METHOD_REMOTEDESKTOPCLIENT_DETACH_EVENT = @as(u32, 707);
pub const DISPID_PROP_REMOTEDESKTOPCLIENT_SETTINGS = @as(u32, 710);
pub const DISPID_PROP_REMOTEDESKTOPCLIENT_ACTIONS = @as(u32, 711);
pub const DISPID_PROP_REMOTEDESKTOPCLIENT_TOUCH_POINTER = @as(u32, 712);
pub const DISPID_METHOD_REMOTEDESKTOPCLIENT_SET_RDPPROPERTY = @as(u32, 720);
pub const DISPID_METHOD_REMOTEDESKTOPCLIENT_GET_RDPPROPERTY = @as(u32, 721);
pub const DISPID_METHOD_REMOTEDESKTOPCLIENT_APPLY_SETTINGS = @as(u32, 722);
pub const DISPID_METHOD_REMOTEDESKTOPCLIENT_RETRIEVE_SETTINGS = @as(u32, 723);
pub const DISPID_METHOD_REMOTEDESKTOPCLIENT_SUSPEND_SCREEN_UPDATES = @as(u32, 730);
pub const DISPID_METHOD_REMOTEDESKTOPCLIENT_RESUME_SCREEN_UPDATES = @as(u32, 731);
pub const DISPID_METHOD_REMOTEDESKTOPCLIENT_EXECUTE_REMOTE_ACTION = @as(u32, 732);
pub const DISPID_METHOD_REMOTEDESKTOPCLIENT_GET_SNAPSHOT = @as(u32, 733);
pub const DISPID_PROP_REMOTEDESKTOPCLIENT_TOUCHPOINTER_ENABLED = @as(u32, 740);
pub const DISPID_PROP_REMOTEDESKTOPCLIENT_TOUCHPOINTER_EVENTSENABLED = @as(u32, 741);
pub const DISPID_PROP_REMOTEDESKTOPCLIENT_TOUCHPOINTER_POINTERSPEED = @as(u32, 742);
pub const DISPID_AX_CONNECTING = @as(u32, 750);
pub const DISPID_AX_CONNECTED = @as(u32, 751);
pub const DISPID_AX_LOGINCOMPLETED = @as(u32, 752);
pub const DISPID_AX_DISCONNECTED = @as(u32, 753);
pub const DISPID_AX_STATUSCHANGED = @as(u32, 754);
pub const DISPID_AX_AUTORECONNECTING = @as(u32, 755);
pub const DISPID_AX_AUTORECONNECTED = @as(u32, 756);
pub const DISPID_AX_DIALOGDISPLAYING = @as(u32, 757);
pub const DISPID_AX_DIALOGDISMISSED = @as(u32, 758);
pub const DISPID_AX_NETWORKSTATUSCHANGED = @as(u32, 759);
pub const DISPID_AX_ADMINMESSAGERECEIVED = @as(u32, 760);
pub const DISPID_AX_KEYCOMBINATIONPRESSED = @as(u32, 761);
pub const DISPID_AX_REMOTEDESKTOPSIZECHANGED = @as(u32, 762);
pub const DISPID_AX_TOUCHPOINTERCURSORMOVED = @as(u32, 800);
pub const RDCLIENT_BITMAP_RENDER_SERVICE = Guid.initString("e4cc08cb-942e-4b19-8504-bd5a89a747f5");
pub const WTS_QUERY_ALLOWED_INITIAL_APP = Guid.initString("c77d1b30-5be1-4c6b-a0e1-bd6d2e5c9fcc");
pub const WTS_QUERY_LOGON_SCREEN_SIZE = Guid.initString("8b8e0fe7-0804-4a0e-b279-8660b1df0049");
pub const WTS_QUERY_AUDIOENUM_DLL = Guid.initString("9bf4fa97-c883-4c2a-80ab-5a39c9af00db");
pub const WTS_QUERY_MF_FORMAT_SUPPORT = Guid.initString("41869ad0-6332-4dc8-95d5-db749e2f1d94");
pub const WRDS_SERVICE_ID_GRAPHICS_GUID = Guid.initString("d2993f4d-02cf-4280-8c48-1624b44f8706");
pub const PROPERTY_DYNAMIC_TIME_ZONE_INFORMATION = Guid.initString("0cdfd28e-d0b9-4c1f-a5eb-6d1f6c6535b9");
pub const PROPERTY_TYPE_GET_FAST_RECONNECT = Guid.initString("6212d757-0043-4862-99c3-9f3059ac2a3b");
pub const PROPERTY_TYPE_GET_FAST_RECONNECT_USER_SID = Guid.initString("197c427a-0135-4b6d-9c5e-e6579a0ab625");
pub const PROPERTY_TYPE_ENABLE_UNIVERSAL_APPS_FOR_CUSTOM_SHELL = Guid.initString("ed2c3fda-338d-4d3f-81a3-e767310d908e");
pub const CONNECTION_PROPERTY_IDLE_TIME_WARNING = Guid.initString("693f7ff5-0c4e-4d17-b8e0-1f70325e5d58");
pub const CONNECTION_PROPERTY_CURSOR_BLINK_DISABLED = Guid.initString("4b150580-fea4-4d3c-9de4-7433a66618f7");

//--------------------------------------------------------------------------------
// Section: Types (254)
//--------------------------------------------------------------------------------
pub const AE_POSITION_FLAGS = enum(i32) {
    INVALID = 0,
    DISCONTINUOUS = 1,
    CONTINUOUS = 2,
    QPC_ERROR = 4,
};
pub const POSITION_INVALID = AE_POSITION_FLAGS.INVALID;
pub const POSITION_DISCONTINUOUS = AE_POSITION_FLAGS.DISCONTINUOUS;
pub const POSITION_CONTINUOUS = AE_POSITION_FLAGS.CONTINUOUS;
pub const POSITION_QPC_ERROR = AE_POSITION_FLAGS.QPC_ERROR;

pub const AE_CURRENT_POSITION = extern struct {
    u64DevicePosition: u64,
    u64StreamPosition: u64,
    u64PaddingFrames: u64,
    hnsQPCPosition: i64,
    f32FramesPerSecond: f32,
    Flag: AE_POSITION_FLAGS,
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IAudioEndpoint_Value = Guid.initString("30a99515-1527-4451-af9f-00c5f0234daf");
pub const IID_IAudioEndpoint = &IID_IAudioEndpoint_Value;
pub const IAudioEndpoint = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetFrameFormat: *const fn (
            self: *const IAudioEndpoint,
            pp_format: ?*?*WAVEFORMATEX,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFramesPerPacket: *const fn (
            self: *const IAudioEndpoint,
            p_frames_per_packet: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLatency: *const fn (
            self: *const IAudioEndpoint,
            p_latency: ?*i64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetStreamFlags: *const fn (
            self: *const IAudioEndpoint,
            stream_flags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEventHandle: *const fn (
            self: *const IAudioEndpoint,
            event_handle: ?HANDLE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getFrameFormat(self: *const T, pp_format_: ?*?*WAVEFORMATEX) HRESULT {
                return @as(*const IAudioEndpoint.VTable, @ptrCast(self.vtable)).GetFrameFormat(@as(*const IAudioEndpoint, @ptrCast(self)), pp_format_);
            }
            pub inline fn getFramesPerPacket(self: *const T, p_frames_per_packet_: ?*u32) HRESULT {
                return @as(*const IAudioEndpoint.VTable, @ptrCast(self.vtable)).GetFramesPerPacket(@as(*const IAudioEndpoint, @ptrCast(self)), p_frames_per_packet_);
            }
            pub inline fn getLatency(self: *const T, p_latency_: ?*i64) HRESULT {
                return @as(*const IAudioEndpoint.VTable, @ptrCast(self.vtable)).GetLatency(@as(*const IAudioEndpoint, @ptrCast(self)), p_latency_);
            }
            pub inline fn setStreamFlags(self: *const T, stream_flags_: u32) HRESULT {
                return @as(*const IAudioEndpoint.VTable, @ptrCast(self.vtable)).SetStreamFlags(@as(*const IAudioEndpoint, @ptrCast(self)), stream_flags_);
            }
            pub inline fn setEventHandle(self: *const T, event_handle_: ?HANDLE) HRESULT {
                return @as(*const IAudioEndpoint.VTable, @ptrCast(self.vtable)).SetEventHandle(@as(*const IAudioEndpoint, @ptrCast(self)), event_handle_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IAudioEndpointRT_Value = Guid.initString("dfd2005f-a6e5-4d39-a265-939ada9fbb4d");
pub const IID_IAudioEndpointRT = &IID_IAudioEndpointRT_Value;
pub const IAudioEndpointRT = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetCurrentPadding: *const fn (
            self: *const IAudioEndpointRT,
            p_padding: ?*i64,
            p_ae_current_position: ?*AE_CURRENT_POSITION,
        ) callconv(@import("std").os.windows.WINAPI) void,
        ProcessingComplete: *const fn (
            self: *const IAudioEndpointRT,
        ) callconv(@import("std").os.windows.WINAPI) void,
        SetPinInactive: *const fn (
            self: *const IAudioEndpointRT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPinActive: *const fn (
            self: *const IAudioEndpointRT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getCurrentPadding(self: *const T, p_padding_: ?*i64, p_ae_current_position_: ?*AE_CURRENT_POSITION) void {
                return @as(*const IAudioEndpointRT.VTable, @ptrCast(self.vtable)).GetCurrentPadding(@as(*const IAudioEndpointRT, @ptrCast(self)), p_padding_, p_ae_current_position_);
            }
            pub inline fn processingComplete(self: *const T) void {
                return @as(*const IAudioEndpointRT.VTable, @ptrCast(self.vtable)).ProcessingComplete(@as(*const IAudioEndpointRT, @ptrCast(self)));
            }
            pub inline fn setPinInactive(self: *const T) HRESULT {
                return @as(*const IAudioEndpointRT.VTable, @ptrCast(self.vtable)).SetPinInactive(@as(*const IAudioEndpointRT, @ptrCast(self)));
            }
            pub inline fn setPinActive(self: *const T) HRESULT {
                return @as(*const IAudioEndpointRT.VTable, @ptrCast(self.vtable)).SetPinActive(@as(*const IAudioEndpointRT, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IAudioInputEndpointRT_Value = Guid.initString("8026ab61-92b2-43c1-a1df-5c37ebd08d82");
pub const IID_IAudioInputEndpointRT = &IID_IAudioInputEndpointRT_Value;
pub const IAudioInputEndpointRT = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetInputDataPointer: *const fn (
            self: *const IAudioInputEndpointRT,
            p_connection_property: ?*APO_CONNECTION_PROPERTY,
            p_ae_time_stamp: ?*AE_CURRENT_POSITION,
        ) callconv(@import("std").os.windows.WINAPI) void,
        ReleaseInputDataPointer: *const fn (
            self: *const IAudioInputEndpointRT,
            u32_frame_count: u32,
            p_data_pointer: usize,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PulseEndpoint: *const fn (
            self: *const IAudioInputEndpointRT,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getInputDataPointer(self: *const T, p_connection_property_: ?*APO_CONNECTION_PROPERTY, p_ae_time_stamp_: ?*AE_CURRENT_POSITION) void {
                return @as(*const IAudioInputEndpointRT.VTable, @ptrCast(self.vtable)).GetInputDataPointer(@as(*const IAudioInputEndpointRT, @ptrCast(self)), p_connection_property_, p_ae_time_stamp_);
            }
            pub inline fn releaseInputDataPointer(self: *const T, u32_frame_count_: u32, p_data_pointer_: usize) void {
                return @as(*const IAudioInputEndpointRT.VTable, @ptrCast(self.vtable)).ReleaseInputDataPointer(@as(*const IAudioInputEndpointRT, @ptrCast(self)), u32_frame_count_, p_data_pointer_);
            }
            pub inline fn pulseEndpoint(self: *const T) void {
                return @as(*const IAudioInputEndpointRT.VTable, @ptrCast(self.vtable)).PulseEndpoint(@as(*const IAudioInputEndpointRT, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IAudioOutputEndpointRT_Value = Guid.initString("8fa906e4-c31c-4e31-932e-19a66385e9aa");
pub const IID_IAudioOutputEndpointRT = &IID_IAudioOutputEndpointRT_Value;
pub const IAudioOutputEndpointRT = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetOutputDataPointer: *const fn (
            self: *const IAudioOutputEndpointRT,
            u32_frame_count: u32,
            p_ae_time_stamp: ?*AE_CURRENT_POSITION,
        ) callconv(@import("std").os.windows.WINAPI) usize,
        ReleaseOutputDataPointer: *const fn (
            self: *const IAudioOutputEndpointRT,
            p_connection_property: ?*const APO_CONNECTION_PROPERTY,
        ) callconv(@import("std").os.windows.WINAPI) void,
        PulseEndpoint: *const fn (
            self: *const IAudioOutputEndpointRT,
        ) callconv(@import("std").os.windows.WINAPI) void,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getOutputDataPointer(self: *const T, u32_frame_count_: u32, p_ae_time_stamp_: ?*AE_CURRENT_POSITION) usize {
                return @as(*const IAudioOutputEndpointRT.VTable, @ptrCast(self.vtable)).GetOutputDataPointer(@as(*const IAudioOutputEndpointRT, @ptrCast(self)), u32_frame_count_, p_ae_time_stamp_);
            }
            pub inline fn releaseOutputDataPointer(self: *const T, p_connection_property_: ?*const APO_CONNECTION_PROPERTY) void {
                return @as(*const IAudioOutputEndpointRT.VTable, @ptrCast(self.vtable)).ReleaseOutputDataPointer(@as(*const IAudioOutputEndpointRT, @ptrCast(self)), p_connection_property_);
            }
            pub inline fn pulseEndpoint(self: *const T) void {
                return @as(*const IAudioOutputEndpointRT.VTable, @ptrCast(self.vtable)).PulseEndpoint(@as(*const IAudioOutputEndpointRT, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IAudioDeviceEndpoint_Value = Guid.initString("d4952f5a-a0b2-4cc4-8b82-9358488dd8ac");
pub const IID_IAudioDeviceEndpoint = &IID_IAudioDeviceEndpoint_Value;
pub const IAudioDeviceEndpoint = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetBuffer: *const fn (
            self: *const IAudioDeviceEndpoint,
            max_period: i64,
            u32_latency_coefficient: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRTCaps: *const fn (
            self: *const IAudioDeviceEndpoint,
            pb_is_r_t_capable: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetEventDrivenCapable: *const fn (
            self: *const IAudioDeviceEndpoint,
            pbis_event_capable: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WriteExclusiveModeParametersToSharedMemory: *const fn (
            self: *const IAudioDeviceEndpoint,
            h_target_process: usize,
            hns_period: i64,
            hns_buffer_duration: i64,
            u32_latency_coefficient: u32,
            pu32_shared_memory_size: ?*u32,
            ph_shared_memory: ?*usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setBuffer(self: *const T, max_period_: i64, u32_latency_coefficient_: u32) HRESULT {
                return @as(*const IAudioDeviceEndpoint.VTable, @ptrCast(self.vtable)).SetBuffer(@as(*const IAudioDeviceEndpoint, @ptrCast(self)), max_period_, u32_latency_coefficient_);
            }
            pub inline fn getRTCaps(self: *const T, pb_is_r_t_capable_: ?*BOOL) HRESULT {
                return @as(*const IAudioDeviceEndpoint.VTable, @ptrCast(self.vtable)).GetRTCaps(@as(*const IAudioDeviceEndpoint, @ptrCast(self)), pb_is_r_t_capable_);
            }
            pub inline fn getEventDrivenCapable(self: *const T, pbis_event_capable_: ?*BOOL) HRESULT {
                return @as(*const IAudioDeviceEndpoint.VTable, @ptrCast(self.vtable)).GetEventDrivenCapable(@as(*const IAudioDeviceEndpoint, @ptrCast(self)), pbis_event_capable_);
            }
            pub inline fn writeExclusiveModeParametersToSharedMemory(self: *const T, h_target_process_: usize, hns_period_: i64, hns_buffer_duration_: i64, u32_latency_coefficient_: u32, pu32_shared_memory_size_: ?*u32, ph_shared_memory_: ?*usize) HRESULT {
                return @as(*const IAudioDeviceEndpoint.VTable, @ptrCast(self.vtable)).WriteExclusiveModeParametersToSharedMemory(@as(*const IAudioDeviceEndpoint, @ptrCast(self)), h_target_process_, hns_period_, hns_buffer_duration_, u32_latency_coefficient_, pu32_shared_memory_size_, ph_shared_memory_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IAudioEndpointControl_Value = Guid.initString("c684b72a-6df4-4774-bdf9-76b77509b653");
pub const IID_IAudioEndpointControl = &IID_IAudioEndpointControl_Value;
pub const IAudioEndpointControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Start: *const fn (
            self: *const IAudioEndpointControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IAudioEndpointControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const IAudioEndpointControl,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn start(self: *const T) HRESULT {
                return @as(*const IAudioEndpointControl.VTable, @ptrCast(self.vtable)).Start(@as(*const IAudioEndpointControl, @ptrCast(self)));
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IAudioEndpointControl.VTable, @ptrCast(self.vtable)).Reset(@as(*const IAudioEndpointControl, @ptrCast(self)));
            }
            pub inline fn stop(self: *const T) HRESULT {
                return @as(*const IAudioEndpointControl.VTable, @ptrCast(self.vtable)).Stop(@as(*const IAudioEndpointControl, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type has a FreeFunc 'WTSVirtualChannelClose', what can Zig do with this information?
// TODO: this type has an InvalidHandleValue of '0', what can Zig do with this information?
pub const HwtsVirtualChannelHandle = isize;

const CLSID_TSUserExInterfaces_Value = Guid.initString("0910dd01-df8c-11d1-ae27-00c04fa35813");
pub const CLSID_TSUserExInterfaces = &CLSID_TSUserExInterfaces_Value;

const CLSID_ADsTSUserEx_Value = Guid.initString("e2e9cae6-1e7b-4b8e-babd-e9bf6292ac29");
pub const CLSID_ADsTSUserEx = &CLSID_ADsTSUserEx_Value;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IADsTSUserEx_Value = Guid.initString("c4930e79-2989-4462-8a60-2fcf2f2955ef");
pub const IID_IADsTSUserEx = &IID_IADsTSUserEx_Value;
pub const IADsTSUserEx = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TerminalServicesProfilePath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TerminalServicesProfilePath: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            p_new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TerminalServicesHomeDirectory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TerminalServicesHomeDirectory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            p_new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TerminalServicesHomeDrive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TerminalServicesHomeDrive: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            p_new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowLogon: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowLogon: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            new_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnableRemoteControl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnableRemoteControl: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            new_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxDisconnectionTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxDisconnectionTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            new_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxConnectionTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxConnectionTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            new_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxIdleTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxIdleTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            new_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReconnectionAction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            p_new_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReconnectionAction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            new_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_BrokenConnectionAction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            p_new_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_BrokenConnectionAction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            new_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ConnectClientDrivesAtLogon: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            p_new_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ConnectClientDrivesAtLogon: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            new_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ConnectClientPrintersAtLogon: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ConnectClientPrintersAtLogon: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            new_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DefaultToMainPrinter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            p_val: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DefaultToMainPrinter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            new_val: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TerminalServicesWorkDirectory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TerminalServicesWorkDirectory: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            p_new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TerminalServicesInitialProgram: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TerminalServicesInitialProgram: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IADsTSUserEx,
            p_new_val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getTerminalServicesProfilePath(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).get_TerminalServicesProfilePath(@as(*const IADsTSUserEx, @ptrCast(self)), p_val_);
            }
            pub inline fn putTerminalServicesProfilePath(self: *const T, p_new_val_: ?BSTR) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).put_TerminalServicesProfilePath(@as(*const IADsTSUserEx, @ptrCast(self)), p_new_val_);
            }
            pub inline fn getTerminalServicesHomeDirectory(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).get_TerminalServicesHomeDirectory(@as(*const IADsTSUserEx, @ptrCast(self)), p_val_);
            }
            pub inline fn putTerminalServicesHomeDirectory(self: *const T, p_new_val_: ?BSTR) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).put_TerminalServicesHomeDirectory(@as(*const IADsTSUserEx, @ptrCast(self)), p_new_val_);
            }
            pub inline fn getTerminalServicesHomeDrive(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).get_TerminalServicesHomeDrive(@as(*const IADsTSUserEx, @ptrCast(self)), p_val_);
            }
            pub inline fn putTerminalServicesHomeDrive(self: *const T, p_new_val_: ?BSTR) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).put_TerminalServicesHomeDrive(@as(*const IADsTSUserEx, @ptrCast(self)), p_new_val_);
            }
            pub inline fn getAllowLogon(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).get_AllowLogon(@as(*const IADsTSUserEx, @ptrCast(self)), p_val_);
            }
            pub inline fn putAllowLogon(self: *const T, new_val_: i32) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).put_AllowLogon(@as(*const IADsTSUserEx, @ptrCast(self)), new_val_);
            }
            pub inline fn getEnableRemoteControl(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).get_EnableRemoteControl(@as(*const IADsTSUserEx, @ptrCast(self)), p_val_);
            }
            pub inline fn putEnableRemoteControl(self: *const T, new_val_: i32) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).put_EnableRemoteControl(@as(*const IADsTSUserEx, @ptrCast(self)), new_val_);
            }
            pub inline fn getMaxDisconnectionTime(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).get_MaxDisconnectionTime(@as(*const IADsTSUserEx, @ptrCast(self)), p_val_);
            }
            pub inline fn putMaxDisconnectionTime(self: *const T, new_val_: i32) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).put_MaxDisconnectionTime(@as(*const IADsTSUserEx, @ptrCast(self)), new_val_);
            }
            pub inline fn getMaxConnectionTime(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).get_MaxConnectionTime(@as(*const IADsTSUserEx, @ptrCast(self)), p_val_);
            }
            pub inline fn putMaxConnectionTime(self: *const T, new_val_: i32) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).put_MaxConnectionTime(@as(*const IADsTSUserEx, @ptrCast(self)), new_val_);
            }
            pub inline fn getMaxIdleTime(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).get_MaxIdleTime(@as(*const IADsTSUserEx, @ptrCast(self)), p_val_);
            }
            pub inline fn putMaxIdleTime(self: *const T, new_val_: i32) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).put_MaxIdleTime(@as(*const IADsTSUserEx, @ptrCast(self)), new_val_);
            }
            pub inline fn getReconnectionAction(self: *const T, p_new_val_: ?*i32) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).get_ReconnectionAction(@as(*const IADsTSUserEx, @ptrCast(self)), p_new_val_);
            }
            pub inline fn putReconnectionAction(self: *const T, new_val_: i32) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).put_ReconnectionAction(@as(*const IADsTSUserEx, @ptrCast(self)), new_val_);
            }
            pub inline fn getBrokenConnectionAction(self: *const T, p_new_val_: ?*i32) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).get_BrokenConnectionAction(@as(*const IADsTSUserEx, @ptrCast(self)), p_new_val_);
            }
            pub inline fn putBrokenConnectionAction(self: *const T, new_val_: i32) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).put_BrokenConnectionAction(@as(*const IADsTSUserEx, @ptrCast(self)), new_val_);
            }
            pub inline fn getConnectClientDrivesAtLogon(self: *const T, p_new_val_: ?*i32) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).get_ConnectClientDrivesAtLogon(@as(*const IADsTSUserEx, @ptrCast(self)), p_new_val_);
            }
            pub inline fn putConnectClientDrivesAtLogon(self: *const T, new_val_: i32) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).put_ConnectClientDrivesAtLogon(@as(*const IADsTSUserEx, @ptrCast(self)), new_val_);
            }
            pub inline fn getConnectClientPrintersAtLogon(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).get_ConnectClientPrintersAtLogon(@as(*const IADsTSUserEx, @ptrCast(self)), p_val_);
            }
            pub inline fn putConnectClientPrintersAtLogon(self: *const T, new_val_: i32) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).put_ConnectClientPrintersAtLogon(@as(*const IADsTSUserEx, @ptrCast(self)), new_val_);
            }
            pub inline fn getDefaultToMainPrinter(self: *const T, p_val_: ?*i32) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).get_DefaultToMainPrinter(@as(*const IADsTSUserEx, @ptrCast(self)), p_val_);
            }
            pub inline fn putDefaultToMainPrinter(self: *const T, new_val_: i32) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).put_DefaultToMainPrinter(@as(*const IADsTSUserEx, @ptrCast(self)), new_val_);
            }
            pub inline fn getTerminalServicesWorkDirectory(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).get_TerminalServicesWorkDirectory(@as(*const IADsTSUserEx, @ptrCast(self)), p_val_);
            }
            pub inline fn putTerminalServicesWorkDirectory(self: *const T, p_new_val_: ?BSTR) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).put_TerminalServicesWorkDirectory(@as(*const IADsTSUserEx, @ptrCast(self)), p_new_val_);
            }
            pub inline fn getTerminalServicesInitialProgram(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).get_TerminalServicesInitialProgram(@as(*const IADsTSUserEx, @ptrCast(self)), p_val_);
            }
            pub inline fn putTerminalServicesInitialProgram(self: *const T, p_new_val_: ?BSTR) HRESULT {
                return @as(*const IADsTSUserEx.VTable, @ptrCast(self.vtable)).put_TerminalServicesInitialProgram(@as(*const IADsTSUserEx, @ptrCast(self)), p_new_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const AAAuthSchemes = enum(i32) {
    MIN = 0,
    BASIC = 1,
    NTLM = 2,
    SC = 3,
    LOGGEDONCREDENTIALS = 4,
    NEGOTIATE = 5,
    ANY = 6,
    COOKIE = 7,
    DIGEST = 8,
    ORGID = 9,
    CONID = 10,
    SSPI_NTLM = 11,
    MAX = 12,
};
pub const AA_AUTH_MIN = AAAuthSchemes.MIN;
pub const AA_AUTH_BASIC = AAAuthSchemes.BASIC;
pub const AA_AUTH_NTLM = AAAuthSchemes.NTLM;
pub const AA_AUTH_SC = AAAuthSchemes.SC;
pub const AA_AUTH_LOGGEDONCREDENTIALS = AAAuthSchemes.LOGGEDONCREDENTIALS;
pub const AA_AUTH_NEGOTIATE = AAAuthSchemes.NEGOTIATE;
pub const AA_AUTH_ANY = AAAuthSchemes.ANY;
pub const AA_AUTH_COOKIE = AAAuthSchemes.COOKIE;
pub const AA_AUTH_DIGEST = AAAuthSchemes.DIGEST;
pub const AA_AUTH_ORGID = AAAuthSchemes.ORGID;
pub const AA_AUTH_CONID = AAAuthSchemes.CONID;
pub const AA_AUTH_SSPI_NTLM = AAAuthSchemes.SSPI_NTLM;
pub const AA_AUTH_MAX = AAAuthSchemes.MAX;

pub const AAAccountingDataType = enum(i32) {
    MAIN_SESSION_CREATION = 0,
    SUB_SESSION_CREATION = 1,
    SUB_SESSION_CLOSED = 2,
    MAIN_SESSION_CLOSED = 3,
};
pub const AA_MAIN_SESSION_CREATION = AAAccountingDataType.MAIN_SESSION_CREATION;
pub const AA_SUB_SESSION_CREATION = AAAccountingDataType.SUB_SESSION_CREATION;
pub const AA_SUB_SESSION_CLOSED = AAAccountingDataType.SUB_SESSION_CLOSED;
pub const AA_MAIN_SESSION_CLOSED = AAAccountingDataType.MAIN_SESSION_CLOSED;

pub const AAAccountingData = extern struct {
    userName: ?BSTR,
    clientName: ?BSTR,
    authType: AAAuthSchemes,
    resourceName: ?BSTR,
    portNumber: i32,
    protocolName: ?BSTR,
    numberOfBytesReceived: i32,
    numberOfBytesTransfered: i32,
    reasonForDisconnect: ?BSTR,
    mainSessionId: Guid,
    subSessionId: i32,
};

pub const SESSION_TIMEOUT_ACTION_TYPE = enum(i32) {
    DISCONNECT = 0,
    SILENT_REAUTH = 1,
};
pub const SESSION_TIMEOUT_ACTION_DISCONNECT = SESSION_TIMEOUT_ACTION_TYPE.DISCONNECT;
pub const SESSION_TIMEOUT_ACTION_SILENT_REAUTH = SESSION_TIMEOUT_ACTION_TYPE.SILENT_REAUTH;

pub const PolicyAttributeType = enum(i32) {
    EnableAllRedirections = 0,
    DisableAllRedirections = 1,
    DriveRedirectionDisabled = 2,
    PrinterRedirectionDisabled = 3,
    PortRedirectionDisabled = 4,
    ClipboardRedirectionDisabled = 5,
    PnpRedirectionDisabled = 6,
    AllowOnlySDRServers = 7,
};
pub const EnableAllRedirections = PolicyAttributeType.EnableAllRedirections;
pub const DisableAllRedirections = PolicyAttributeType.DisableAllRedirections;
pub const DriveRedirectionDisabled = PolicyAttributeType.DriveRedirectionDisabled;
pub const PrinterRedirectionDisabled = PolicyAttributeType.PrinterRedirectionDisabled;
pub const PortRedirectionDisabled = PolicyAttributeType.PortRedirectionDisabled;
pub const ClipboardRedirectionDisabled = PolicyAttributeType.ClipboardRedirectionDisabled;
pub const PnpRedirectionDisabled = PolicyAttributeType.PnpRedirectionDisabled;
pub const AllowOnlySDRServers = PolicyAttributeType.AllowOnlySDRServers;

pub const AATrustClassID = enum(i32) {
    UNTRUSTED = 0,
    TRUSTEDUSER_UNTRUSTEDCLIENT = 1,
    TRUSTEDUSER_TRUSTEDCLIENT = 2,
};
pub const AA_UNTRUSTED = AATrustClassID.UNTRUSTED;
pub const AA_TRUSTEDUSER_UNTRUSTEDCLIENT = AATrustClassID.TRUSTEDUSER_UNTRUSTEDCLIENT;
pub const AA_TRUSTEDUSER_TRUSTEDCLIENT = AATrustClassID.TRUSTEDUSER_TRUSTEDCLIENT;

// TODO: this type is limited to platform 'windows6.1'
const IID_ITSGAuthorizeConnectionSink_Value = Guid.initString("c27ece33-7781-4318-98ef-1cf2da7b7005");
pub const IID_ITSGAuthorizeConnectionSink = &IID_ITSGAuthorizeConnectionSink_Value;
pub const ITSGAuthorizeConnectionSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnConnectionAuthorized: *const fn (
            self: *const ITSGAuthorizeConnectionSink,
            hr_in: HRESULT,
            main_session_id: Guid,
            cb_so_h_response: u32,
            pb_so_h_response: [*:0]u8,
            idle_timeout: u32,
            session_timeout: u32,
            session_timeout_action: SESSION_TIMEOUT_ACTION_TYPE,
            trust_class: AATrustClassID,
            policy_attributes: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onConnectionAuthorized(self: *const T, hr_in_: HRESULT, main_session_id_: Guid, cb_so_h_response_: u32, pb_so_h_response_: [*:0]u8, idle_timeout_: u32, session_timeout_: u32, session_timeout_action_: SESSION_TIMEOUT_ACTION_TYPE, trust_class_: AATrustClassID, policy_attributes_: ?*u32) HRESULT {
                return @as(*const ITSGAuthorizeConnectionSink.VTable, @ptrCast(self.vtable)).OnConnectionAuthorized(@as(*const ITSGAuthorizeConnectionSink, @ptrCast(self)), hr_in_, main_session_id_, cb_so_h_response_, pb_so_h_response_, idle_timeout_, session_timeout_, session_timeout_action_, trust_class_, policy_attributes_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ITSGAuthorizeResourceSink_Value = Guid.initString("feddfcd4-fa12-4435-ae55-7ad1a9779af7");
pub const IID_ITSGAuthorizeResourceSink = &IID_ITSGAuthorizeResourceSink_Value;
pub const ITSGAuthorizeResourceSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnChannelAuthorized: *const fn (
            self: *const ITSGAuthorizeResourceSink,
            hr_in: HRESULT,
            main_session_id: Guid,
            sub_session_id: i32,
            allowed_resource_names: [*]?BSTR,
            num_allowed_resource_names: u32,
            failed_resource_names: [*]?BSTR,
            num_failed_resource_names: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onChannelAuthorized(self: *const T, hr_in_: HRESULT, main_session_id_: Guid, sub_session_id_: i32, allowed_resource_names_: [*]?BSTR, num_allowed_resource_names_: u32, failed_resource_names_: [*]?BSTR, num_failed_resource_names_: u32) HRESULT {
                return @as(*const ITSGAuthorizeResourceSink.VTable, @ptrCast(self.vtable)).OnChannelAuthorized(@as(*const ITSGAuthorizeResourceSink, @ptrCast(self)), hr_in_, main_session_id_, sub_session_id_, allowed_resource_names_, num_allowed_resource_names_, failed_resource_names_, num_failed_resource_names_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ITSGPolicyEngine_Value = Guid.initString("8bc24f08-6223-42f4-a5b4-8e37cd135bbd");
pub const IID_ITSGPolicyEngine = &IID_ITSGPolicyEngine_Value;
pub const ITSGPolicyEngine = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AuthorizeConnection: *const fn (
            self: *const ITSGPolicyEngine,
            main_session_id: Guid,
            username: ?BSTR,
            auth_type: AAAuthSchemes,
            client_machine_i_p: ?BSTR,
            client_machine_name: ?BSTR,
            soh_data: [*:0]u8,
            num_s_o_h_bytes: u32,
            cookie_data: [*:0]u8,
            num_cookie_bytes: u32,
            user_token: HANDLE_PTR,
            p_sink: ?*ITSGAuthorizeConnectionSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AuthorizeResource: *const fn (
            self: *const ITSGPolicyEngine,
            main_session_id: Guid,
            sub_session_id: i32,
            username: ?BSTR,
            resource_names: [*]?BSTR,
            num_resources: u32,
            alternate_resource_names: [*]?BSTR,
            num_alternate_resource_name: u32,
            port_number: u32,
            operation: ?BSTR,
            cookie: [*:0]u8,
            num_bytes_in_cookie: u32,
            p_sink: ?*ITSGAuthorizeResourceSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const ITSGPolicyEngine,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsQuarantineEnabled: *const fn (
            self: *const ITSGPolicyEngine,
            quarantine_enabled: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn authorizeConnection(self: *const T, main_session_id_: Guid, username_: ?BSTR, auth_type_: AAAuthSchemes, client_machine_i_p_: ?BSTR, client_machine_name_: ?BSTR, soh_data_: [*:0]u8, num_s_o_h_bytes_: u32, cookie_data_: [*:0]u8, num_cookie_bytes_: u32, user_token_: HANDLE_PTR, p_sink_: ?*ITSGAuthorizeConnectionSink) HRESULT {
                return @as(*const ITSGPolicyEngine.VTable, @ptrCast(self.vtable)).AuthorizeConnection(@as(*const ITSGPolicyEngine, @ptrCast(self)), main_session_id_, username_, auth_type_, client_machine_i_p_, client_machine_name_, soh_data_, num_s_o_h_bytes_, cookie_data_, num_cookie_bytes_, user_token_, p_sink_);
            }
            pub inline fn authorizeResource(self: *const T, main_session_id_: Guid, sub_session_id_: i32, username_: ?BSTR, resource_names_: [*]?BSTR, num_resources_: u32, alternate_resource_names_: [*]?BSTR, num_alternate_resource_name_: u32, port_number_: u32, operation_: ?BSTR, cookie_: [*:0]u8, num_bytes_in_cookie_: u32, p_sink_: ?*ITSGAuthorizeResourceSink) HRESULT {
                return @as(*const ITSGPolicyEngine.VTable, @ptrCast(self.vtable)).AuthorizeResource(@as(*const ITSGPolicyEngine, @ptrCast(self)), main_session_id_, sub_session_id_, username_, resource_names_, num_resources_, alternate_resource_names_, num_alternate_resource_name_, port_number_, operation_, cookie_, num_bytes_in_cookie_, p_sink_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const ITSGPolicyEngine.VTable, @ptrCast(self.vtable)).Refresh(@as(*const ITSGPolicyEngine, @ptrCast(self)));
            }
            pub inline fn isQuarantineEnabled(self: *const T, quarantine_enabled_: ?*BOOL) HRESULT {
                return @as(*const ITSGPolicyEngine.VTable, @ptrCast(self.vtable)).IsQuarantineEnabled(@as(*const ITSGPolicyEngine, @ptrCast(self)), quarantine_enabled_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ITSGAccountingEngine_Value = Guid.initString("4ce2a0c9-e874-4f1a-86f4-06bbb9115338");
pub const IID_ITSGAccountingEngine = &IID_ITSGAccountingEngine_Value;
pub const ITSGAccountingEngine = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        DoAccounting: *const fn (
            self: *const ITSGAccountingEngine,
            accounting_data_type: AAAccountingDataType,
            accounting_data: AAAccountingData,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn doAccounting(self: *const T, accounting_data_type_: AAAccountingDataType, accounting_data_: AAAccountingData) HRESULT {
                return @as(*const ITSGAccountingEngine.VTable, @ptrCast(self.vtable)).DoAccounting(@as(*const ITSGAccountingEngine, @ptrCast(self)), accounting_data_type_, accounting_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ITSGAuthenticateUserSink_Value = Guid.initString("2c3e2e73-a782-47f9-8dfb-77ee1ed27a03");
pub const IID_ITSGAuthenticateUserSink = &IID_ITSGAuthenticateUserSink_Value;
pub const ITSGAuthenticateUserSink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnUserAuthenticated: *const fn (
            self: *const ITSGAuthenticateUserSink,
            user_name: ?BSTR,
            user_domain: ?BSTR,
            context: usize,
            user_token: HANDLE_PTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnUserAuthenticationFailed: *const fn (
            self: *const ITSGAuthenticateUserSink,
            context: usize,
            generic_error_code: HRESULT,
            specific_error_code: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReauthenticateUser: *const fn (
            self: *const ITSGAuthenticateUserSink,
            context: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisconnectUser: *const fn (
            self: *const ITSGAuthenticateUserSink,
            context: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onUserAuthenticated(self: *const T, user_name_: ?BSTR, user_domain_: ?BSTR, context_: usize, user_token_: HANDLE_PTR) HRESULT {
                return @as(*const ITSGAuthenticateUserSink.VTable, @ptrCast(self.vtable)).OnUserAuthenticated(@as(*const ITSGAuthenticateUserSink, @ptrCast(self)), user_name_, user_domain_, context_, user_token_);
            }
            pub inline fn onUserAuthenticationFailed(self: *const T, context_: usize, generic_error_code_: HRESULT, specific_error_code_: HRESULT) HRESULT {
                return @as(*const ITSGAuthenticateUserSink.VTable, @ptrCast(self.vtable)).OnUserAuthenticationFailed(@as(*const ITSGAuthenticateUserSink, @ptrCast(self)), context_, generic_error_code_, specific_error_code_);
            }
            pub inline fn reauthenticateUser(self: *const T, context_: usize) HRESULT {
                return @as(*const ITSGAuthenticateUserSink.VTable, @ptrCast(self.vtable)).ReauthenticateUser(@as(*const ITSGAuthenticateUserSink, @ptrCast(self)), context_);
            }
            pub inline fn disconnectUser(self: *const T, context_: usize) HRESULT {
                return @as(*const ITSGAuthenticateUserSink.VTable, @ptrCast(self.vtable)).DisconnectUser(@as(*const ITSGAuthenticateUserSink, @ptrCast(self)), context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_ITSGAuthenticationEngine_Value = Guid.initString("9ee3e5bf-04ab-4691-998c-d7f622321a56");
pub const IID_ITSGAuthenticationEngine = &IID_ITSGAuthenticationEngine_Value;
pub const ITSGAuthenticationEngine = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AuthenticateUser: *const fn (
            self: *const ITSGAuthenticationEngine,
            main_session_id: Guid,
            cookie_data: ?*u8,
            num_cookie_bytes: u32,
            context: usize,
            p_sink: ?*ITSGAuthenticateUserSink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelAuthentication: *const fn (
            self: *const ITSGAuthenticationEngine,
            main_session_id: Guid,
            context: usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn authenticateUser(self: *const T, main_session_id_: Guid, cookie_data_: ?*u8, num_cookie_bytes_: u32, context_: usize, p_sink_: ?*ITSGAuthenticateUserSink) HRESULT {
                return @as(*const ITSGAuthenticationEngine.VTable, @ptrCast(self.vtable)).AuthenticateUser(@as(*const ITSGAuthenticationEngine, @ptrCast(self)), main_session_id_, cookie_data_, num_cookie_bytes_, context_, p_sink_);
            }
            pub inline fn cancelAuthentication(self: *const T, main_session_id_: Guid, context_: usize) HRESULT {
                return @as(*const ITSGAuthenticationEngine.VTable, @ptrCast(self.vtable)).CancelAuthentication(@as(*const ITSGAuthenticationEngine, @ptrCast(self)), main_session_id_, context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WTS_CONNECTSTATE_CLASS = enum(i32) {
    Active = 0,
    Connected = 1,
    ConnectQuery = 2,
    Shadow = 3,
    Disconnected = 4,
    Idle = 5,
    Listen = 6,
    Reset = 7,
    Down = 8,
    Init = 9,
};
pub const WTSActive = WTS_CONNECTSTATE_CLASS.Active;
pub const WTSConnected = WTS_CONNECTSTATE_CLASS.Connected;
pub const WTSConnectQuery = WTS_CONNECTSTATE_CLASS.ConnectQuery;
pub const WTSShadow = WTS_CONNECTSTATE_CLASS.Shadow;
pub const WTSDisconnected = WTS_CONNECTSTATE_CLASS.Disconnected;
pub const WTSIdle = WTS_CONNECTSTATE_CLASS.Idle;
pub const WTSListen = WTS_CONNECTSTATE_CLASS.Listen;
pub const WTSReset = WTS_CONNECTSTATE_CLASS.Reset;
pub const WTSDown = WTS_CONNECTSTATE_CLASS.Down;
pub const WTSInit = WTS_CONNECTSTATE_CLASS.Init;

pub const WTS_SERVER_INFOW = extern struct {
    pServerName: ?PWSTR,
};

pub const WTS_SERVER_INFOA = extern struct {
    pServerName: ?PSTR,
};

pub const WTS_SESSION_INFOW = extern struct {
    SessionId: u32,
    pWinStationName: ?PWSTR,
    State: WTS_CONNECTSTATE_CLASS,
};

pub const WTS_SESSION_INFOA = extern struct {
    SessionId: u32,
    pWinStationName: ?PSTR,
    State: WTS_CONNECTSTATE_CLASS,
};

pub const WTS_SESSION_INFO_1W = extern struct {
    ExecEnvId: u32,
    State: WTS_CONNECTSTATE_CLASS,
    SessionId: u32,
    pSessionName: ?PWSTR,
    pHostName: ?PWSTR,
    pUserName: ?PWSTR,
    pDomainName: ?PWSTR,
    pFarmName: ?PWSTR,
};

pub const WTS_SESSION_INFO_1A = extern struct {
    ExecEnvId: u32,
    State: WTS_CONNECTSTATE_CLASS,
    SessionId: u32,
    pSessionName: ?PSTR,
    pHostName: ?PSTR,
    pUserName: ?PSTR,
    pDomainName: ?PSTR,
    pFarmName: ?PSTR,
};

pub const WTS_PROCESS_INFOW = extern struct {
    SessionId: u32,
    ProcessId: u32,
    pProcessName: ?PWSTR,
    pUserSid: ?PSID,
};

pub const WTS_PROCESS_INFOA = extern struct {
    SessionId: u32,
    ProcessId: u32,
    pProcessName: ?PSTR,
    pUserSid: ?PSID,
};

pub const WTS_INFO_CLASS = enum(i32) {
    InitialProgram = 0,
    ApplicationName = 1,
    WorkingDirectory = 2,
    OEMId = 3,
    SessionId = 4,
    UserName = 5,
    WinStationName = 6,
    DomainName = 7,
    ConnectState = 8,
    ClientBuildNumber = 9,
    ClientName = 10,
    ClientDirectory = 11,
    ClientProductId = 12,
    ClientHardwareId = 13,
    ClientAddress = 14,
    ClientDisplay = 15,
    ClientProtocolType = 16,
    IdleTime = 17,
    LogonTime = 18,
    IncomingBytes = 19,
    OutgoingBytes = 20,
    IncomingFrames = 21,
    OutgoingFrames = 22,
    ClientInfo = 23,
    SessionInfo = 24,
    SessionInfoEx = 25,
    ConfigInfo = 26,
    ValidationInfo = 27,
    SessionAddressV4 = 28,
    IsRemoteSession = 29,
};
pub const WTSInitialProgram = WTS_INFO_CLASS.InitialProgram;
pub const WTSApplicationName = WTS_INFO_CLASS.ApplicationName;
pub const WTSWorkingDirectory = WTS_INFO_CLASS.WorkingDirectory;
pub const WTSOEMId = WTS_INFO_CLASS.OEMId;
pub const WTSSessionId = WTS_INFO_CLASS.SessionId;
pub const WTSUserName = WTS_INFO_CLASS.UserName;
pub const WTSWinStationName = WTS_INFO_CLASS.WinStationName;
pub const WTSDomainName = WTS_INFO_CLASS.DomainName;
pub const WTSConnectState = WTS_INFO_CLASS.ConnectState;
pub const WTSClientBuildNumber = WTS_INFO_CLASS.ClientBuildNumber;
pub const WTSClientName = WTS_INFO_CLASS.ClientName;
pub const WTSClientDirectory = WTS_INFO_CLASS.ClientDirectory;
pub const WTSClientProductId = WTS_INFO_CLASS.ClientProductId;
pub const WTSClientHardwareId = WTS_INFO_CLASS.ClientHardwareId;
pub const WTSClientAddress = WTS_INFO_CLASS.ClientAddress;
pub const WTSClientDisplay = WTS_INFO_CLASS.ClientDisplay;
pub const WTSClientProtocolType = WTS_INFO_CLASS.ClientProtocolType;
pub const WTSIdleTime = WTS_INFO_CLASS.IdleTime;
pub const WTSLogonTime = WTS_INFO_CLASS.LogonTime;
pub const WTSIncomingBytes = WTS_INFO_CLASS.IncomingBytes;
pub const WTSOutgoingBytes = WTS_INFO_CLASS.OutgoingBytes;
pub const WTSIncomingFrames = WTS_INFO_CLASS.IncomingFrames;
pub const WTSOutgoingFrames = WTS_INFO_CLASS.OutgoingFrames;
pub const WTSClientInfo = WTS_INFO_CLASS.ClientInfo;
pub const WTSSessionInfo = WTS_INFO_CLASS.SessionInfo;
pub const WTSSessionInfoEx = WTS_INFO_CLASS.SessionInfoEx;
pub const WTSConfigInfo = WTS_INFO_CLASS.ConfigInfo;
pub const WTSValidationInfo = WTS_INFO_CLASS.ValidationInfo;
pub const WTSSessionAddressV4 = WTS_INFO_CLASS.SessionAddressV4;
pub const WTSIsRemoteSession = WTS_INFO_CLASS.IsRemoteSession;

pub const WTSCONFIGINFOW = extern struct {
    version: u32,
    fConnectClientDrivesAtLogon: u32,
    fConnectPrinterAtLogon: u32,
    fDisablePrinterRedirection: u32,
    fDisableDefaultMainClientPrinter: u32,
    ShadowSettings: u32,
    LogonUserName: [21]u16,
    LogonDomain: [18]u16,
    WorkDirectory: [261]u16,
    InitialProgram: [261]u16,
    ApplicationName: [261]u16,
};

pub const WTSCONFIGINFOA = extern struct {
    version: u32,
    fConnectClientDrivesAtLogon: u32,
    fConnectPrinterAtLogon: u32,
    fDisablePrinterRedirection: u32,
    fDisableDefaultMainClientPrinter: u32,
    ShadowSettings: u32,
    LogonUserName: [21]CHAR,
    LogonDomain: [18]CHAR,
    WorkDirectory: [261]CHAR,
    InitialProgram: [261]CHAR,
    ApplicationName: [261]CHAR,
};

pub const WTSINFOW = extern struct {
    State: WTS_CONNECTSTATE_CLASS,
    SessionId: u32,
    IncomingBytes: u32,
    OutgoingBytes: u32,
    IncomingFrames: u32,
    OutgoingFrames: u32,
    IncomingCompressedBytes: u32,
    OutgoingCompressedBytes: u32,
    WinStationName: [32]u16,
    Domain: [17]u16,
    UserName: [21]u16,
    ConnectTime: LARGE_INTEGER,
    DisconnectTime: LARGE_INTEGER,
    LastInputTime: LARGE_INTEGER,
    LogonTime: LARGE_INTEGER,
    CurrentTime: LARGE_INTEGER,
};

pub const WTSINFOA = extern struct {
    State: WTS_CONNECTSTATE_CLASS,
    SessionId: u32,
    IncomingBytes: u32,
    OutgoingBytes: u32,
    IncomingFrames: u32,
    OutgoingFrames: u32,
    IncomingCompressedBytes: u32,
    OutgoingCompressedBy: u32,
    WinStationName: [32]CHAR,
    Domain: [17]CHAR,
    UserName: [21]CHAR,
    ConnectTime: LARGE_INTEGER,
    DisconnectTime: LARGE_INTEGER,
    LastInputTime: LARGE_INTEGER,
    LogonTime: LARGE_INTEGER,
    CurrentTime: LARGE_INTEGER,
};

pub const WTSINFOEX_LEVEL1_W = extern struct {
    SessionId: u32,
    SessionState: WTS_CONNECTSTATE_CLASS,
    SessionFlags: i32,
    WinStationName: [33]u16,
    UserName: [21]u16,
    DomainName: [18]u16,
    LogonTime: LARGE_INTEGER,
    ConnectTime: LARGE_INTEGER,
    DisconnectTime: LARGE_INTEGER,
    LastInputTime: LARGE_INTEGER,
    CurrentTime: LARGE_INTEGER,
    IncomingBytes: u32,
    OutgoingBytes: u32,
    IncomingFrames: u32,
    OutgoingFrames: u32,
    IncomingCompressedBytes: u32,
    OutgoingCompressedBytes: u32,
};

pub const WTSINFOEX_LEVEL1_A = extern struct {
    SessionId: u32,
    SessionState: WTS_CONNECTSTATE_CLASS,
    SessionFlags: i32,
    WinStationName: [33]CHAR,
    UserName: [21]CHAR,
    DomainName: [18]CHAR,
    LogonTime: LARGE_INTEGER,
    ConnectTime: LARGE_INTEGER,
    DisconnectTime: LARGE_INTEGER,
    LastInputTime: LARGE_INTEGER,
    CurrentTime: LARGE_INTEGER,
    IncomingBytes: u32,
    OutgoingBytes: u32,
    IncomingFrames: u32,
    OutgoingFrames: u32,
    IncomingCompressedBytes: u32,
    OutgoingCompressedBytes: u32,
};

pub const WTSINFOEX_LEVEL_W = extern union {
    WTSInfoExLevel1: WTSINFOEX_LEVEL1_W,
};

pub const WTSINFOEX_LEVEL_A = extern union {
    WTSInfoExLevel1: WTSINFOEX_LEVEL1_A,
};

pub const WTSINFOEXW = extern struct {
    Level: u32,
    Data: WTSINFOEX_LEVEL_W,
};

pub const WTSINFOEXA = extern struct {
    Level: u32,
    Data: WTSINFOEX_LEVEL_A,
};

pub const WTSCLIENTW = extern struct {
    ClientName: [21]u16,
    Domain: [18]u16,
    UserName: [21]u16,
    WorkDirectory: [261]u16,
    InitialProgram: [261]u16,
    EncryptionLevel: u8,
    ClientAddressFamily: u32,
    ClientAddress: [31]u16,
    HRes: u16,
    VRes: u16,
    ColorDepth: u16,
    ClientDirectory: [261]u16,
    ClientBuildNumber: u32,
    ClientHardwareId: u32,
    ClientProductId: u16,
    OutBufCountHost: u16,
    OutBufCountClient: u16,
    OutBufLength: u16,
    DeviceId: [261]u16,
};

pub const WTSCLIENTA = extern struct {
    ClientName: [21]CHAR,
    Domain: [18]CHAR,
    UserName: [21]CHAR,
    WorkDirectory: [261]CHAR,
    InitialProgram: [261]CHAR,
    EncryptionLevel: u8,
    ClientAddressFamily: u32,
    ClientAddress: [31]u16,
    HRes: u16,
    VRes: u16,
    ColorDepth: u16,
    ClientDirectory: [261]CHAR,
    ClientBuildNumber: u32,
    ClientHardwareId: u32,
    ClientProductId: u16,
    OutBufCountHost: u16,
    OutBufCountClient: u16,
    OutBufLength: u16,
    DeviceId: [261]CHAR,
};

pub const _WTS_PRODUCT_INFOA = extern struct {
    CompanyName: [256]CHAR,
    ProductID: [4]CHAR,
};

pub const _WTS_PRODUCT_INFOW = extern struct {
    CompanyName: [256]u16,
    ProductID: [4]u16,
};

pub const WTS_VALIDATION_INFORMATIONA = extern struct {
    ProductInfo: _WTS_PRODUCT_INFOA,
    License: [16384]u8,
    LicenseLength: u32,
    HardwareID: [20]u8,
    HardwareIDLength: u32,
};

pub const WTS_VALIDATION_INFORMATIONW = extern struct {
    ProductInfo: _WTS_PRODUCT_INFOW,
    License: [16384]u8,
    LicenseLength: u32,
    HardwareID: [20]u8,
    HardwareIDLength: u32,
};

pub const WTS_CLIENT_ADDRESS = extern struct {
    AddressFamily: u32,
    Address: [20]u8,
};

pub const WTS_CLIENT_DISPLAY = extern struct {
    HorizontalResolution: u32,
    VerticalResolution: u32,
    ColorDepth: u32,
};

pub const WTS_CONFIG_CLASS = enum(i32) {
    InitialProgram = 0,
    WorkingDirectory = 1,
    fInheritInitialProgram = 2,
    fAllowLogonTerminalServer = 3,
    TimeoutSettingsConnections = 4,
    TimeoutSettingsDisconnections = 5,
    TimeoutSettingsIdle = 6,
    fDeviceClientDrives = 7,
    fDeviceClientPrinters = 8,
    fDeviceClientDefaultPrinter = 9,
    BrokenTimeoutSettings = 10,
    ReconnectSettings = 11,
    ModemCallbackSettings = 12,
    ModemCallbackPhoneNumber = 13,
    ShadowingSettings = 14,
    TerminalServerProfilePath = 15,
    TerminalServerHomeDir = 16,
    TerminalServerHomeDirDrive = 17,
    fTerminalServerRemoteHomeDir = 18,
    User = 19,
};
pub const WTSUserConfigInitialProgram = WTS_CONFIG_CLASS.InitialProgram;
pub const WTSUserConfigWorkingDirectory = WTS_CONFIG_CLASS.WorkingDirectory;
pub const WTSUserConfigfInheritInitialProgram = WTS_CONFIG_CLASS.fInheritInitialProgram;
pub const WTSUserConfigfAllowLogonTerminalServer = WTS_CONFIG_CLASS.fAllowLogonTerminalServer;
pub const WTSUserConfigTimeoutSettingsConnections = WTS_CONFIG_CLASS.TimeoutSettingsConnections;
pub const WTSUserConfigTimeoutSettingsDisconnections = WTS_CONFIG_CLASS.TimeoutSettingsDisconnections;
pub const WTSUserConfigTimeoutSettingsIdle = WTS_CONFIG_CLASS.TimeoutSettingsIdle;
pub const WTSUserConfigfDeviceClientDrives = WTS_CONFIG_CLASS.fDeviceClientDrives;
pub const WTSUserConfigfDeviceClientPrinters = WTS_CONFIG_CLASS.fDeviceClientPrinters;
pub const WTSUserConfigfDeviceClientDefaultPrinter = WTS_CONFIG_CLASS.fDeviceClientDefaultPrinter;
pub const WTSUserConfigBrokenTimeoutSettings = WTS_CONFIG_CLASS.BrokenTimeoutSettings;
pub const WTSUserConfigReconnectSettings = WTS_CONFIG_CLASS.ReconnectSettings;
pub const WTSUserConfigModemCallbackSettings = WTS_CONFIG_CLASS.ModemCallbackSettings;
pub const WTSUserConfigModemCallbackPhoneNumber = WTS_CONFIG_CLASS.ModemCallbackPhoneNumber;
pub const WTSUserConfigShadowingSettings = WTS_CONFIG_CLASS.ShadowingSettings;
pub const WTSUserConfigTerminalServerProfilePath = WTS_CONFIG_CLASS.TerminalServerProfilePath;
pub const WTSUserConfigTerminalServerHomeDir = WTS_CONFIG_CLASS.TerminalServerHomeDir;
pub const WTSUserConfigTerminalServerHomeDirDrive = WTS_CONFIG_CLASS.TerminalServerHomeDirDrive;
pub const WTSUserConfigfTerminalServerRemoteHomeDir = WTS_CONFIG_CLASS.fTerminalServerRemoteHomeDir;
pub const WTSUserConfigUser = WTS_CONFIG_CLASS.User;

pub const WTS_CONFIG_SOURCE = enum(i32) {
    M = 0,
};
pub const WTSUserConfigSourceSAM = WTS_CONFIG_SOURCE.M;

pub const WTSUSERCONFIGA = extern struct {
    Source: u32,
    InheritInitialProgram: u32,
    AllowLogonTerminalServer: u32,
    TimeoutSettingsConnections: u32,
    TimeoutSettingsDisconnections: u32,
    TimeoutSettingsIdle: u32,
    DeviceClientDrives: u32,
    DeviceClientPrinters: u32,
    ClientDefaultPrinter: u32,
    BrokenTimeoutSettings: u32,
    ReconnectSettings: u32,
    ShadowingSettings: u32,
    TerminalServerRemoteHomeDir: u32,
    InitialProgram: [261]CHAR,
    WorkDirectory: [261]CHAR,
    TerminalServerProfilePath: [261]CHAR,
    TerminalServerHomeDir: [261]CHAR,
    TerminalServerHomeDirDrive: [4]CHAR,
};

pub const WTSUSERCONFIGW = extern struct {
    Source: u32,
    InheritInitialProgram: u32,
    AllowLogonTerminalServer: u32,
    TimeoutSettingsConnections: u32,
    TimeoutSettingsDisconnections: u32,
    TimeoutSettingsIdle: u32,
    DeviceClientDrives: u32,
    DeviceClientPrinters: u32,
    ClientDefaultPrinter: u32,
    BrokenTimeoutSettings: u32,
    ReconnectSettings: u32,
    ShadowingSettings: u32,
    TerminalServerRemoteHomeDir: u32,
    InitialProgram: [261]u16,
    WorkDirectory: [261]u16,
    TerminalServerProfilePath: [261]u16,
    TerminalServerHomeDir: [261]u16,
    TerminalServerHomeDirDrive: [4]u16,
};

pub const WTS_VIRTUAL_CLASS = enum(i32) {
    ClientData = 0,
    FileHandle = 1,
};
pub const WTSVirtualClientData = WTS_VIRTUAL_CLASS.ClientData;
pub const WTSVirtualFileHandle = WTS_VIRTUAL_CLASS.FileHandle;

pub const WTS_SESSION_ADDRESS = extern struct {
    AddressFamily: u32,
    Address: [20]u8,
};

pub const WTS_PROCESS_INFO_EXW = extern struct {
    SessionId: u32,
    ProcessId: u32,
    pProcessName: ?PWSTR,
    pUserSid: ?PSID,
    NumberOfThreads: u32,
    HandleCount: u32,
    PagefileUsage: u32,
    PeakPagefileUsage: u32,
    WorkingSetSize: u32,
    PeakWorkingSetSize: u32,
    UserTime: LARGE_INTEGER,
    KernelTime: LARGE_INTEGER,
};

pub const WTS_PROCESS_INFO_EXA = extern struct {
    SessionId: u32,
    ProcessId: u32,
    pProcessName: ?PSTR,
    pUserSid: ?PSID,
    NumberOfThreads: u32,
    HandleCount: u32,
    PagefileUsage: u32,
    PeakPagefileUsage: u32,
    WorkingSetSize: u32,
    PeakWorkingSetSize: u32,
    UserTime: LARGE_INTEGER,
    KernelTime: LARGE_INTEGER,
};

pub const WTS_TYPE_CLASS = enum(i32) {
    ProcessInfoLevel0 = 0,
    ProcessInfoLevel1 = 1,
    SessionInfoLevel1 = 2,
};
pub const WTSTypeProcessInfoLevel0 = WTS_TYPE_CLASS.ProcessInfoLevel0;
pub const WTSTypeProcessInfoLevel1 = WTS_TYPE_CLASS.ProcessInfoLevel1;
pub const WTSTypeSessionInfoLevel1 = WTS_TYPE_CLASS.SessionInfoLevel1;

pub const WTSLISTENERCONFIGW = extern struct {
    version: u32,
    fEnableListener: u32,
    MaxConnectionCount: u32,
    fPromptForPassword: u32,
    fInheritColorDepth: u32,
    ColorDepth: u32,
    fInheritBrokenTimeoutSettings: u32,
    BrokenTimeoutSettings: u32,
    fDisablePrinterRedirection: u32,
    fDisableDriveRedirection: u32,
    fDisableComPortRedirection: u32,
    fDisableLPTPortRedirection: u32,
    fDisableClipboardRedirection: u32,
    fDisableAudioRedirection: u32,
    fDisablePNPRedirection: u32,
    fDisableDefaultMainClientPrinter: u32,
    LanAdapter: u32,
    PortNumber: u32,
    fInheritShadowSettings: u32,
    ShadowSettings: u32,
    TimeoutSettingsConnection: u32,
    TimeoutSettingsDisconnection: u32,
    TimeoutSettingsIdle: u32,
    SecurityLayer: u32,
    MinEncryptionLevel: u32,
    UserAuthentication: u32,
    Comment: [61]u16,
    LogonUserName: [21]u16,
    LogonDomain: [18]u16,
    WorkDirectory: [261]u16,
    InitialProgram: [261]u16,
};

pub const WTSLISTENERCONFIGA = extern struct {
    version: u32,
    fEnableListener: u32,
    MaxConnectionCount: u32,
    fPromptForPassword: u32,
    fInheritColorDepth: u32,
    ColorDepth: u32,
    fInheritBrokenTimeoutSettings: u32,
    BrokenTimeoutSettings: u32,
    fDisablePrinterRedirection: u32,
    fDisableDriveRedirection: u32,
    fDisableComPortRedirection: u32,
    fDisableLPTPortRedirection: u32,
    fDisableClipboardRedirection: u32,
    fDisableAudioRedirection: u32,
    fDisablePNPRedirection: u32,
    fDisableDefaultMainClientPrinter: u32,
    LanAdapter: u32,
    PortNumber: u32,
    fInheritShadowSettings: u32,
    ShadowSettings: u32,
    TimeoutSettingsConnection: u32,
    TimeoutSettingsDisconnection: u32,
    TimeoutSettingsIdle: u32,
    SecurityLayer: u32,
    MinEncryptionLevel: u32,
    UserAuthentication: u32,
    Comment: [61]CHAR,
    LogonUserName: [21]CHAR,
    LogonDomain: [18]CHAR,
    WorkDirectory: [261]CHAR,
    InitialProgram: [261]CHAR,
};

pub const WTSSBX_MACHINE_DRAIN = enum(i32) {
    UNSPEC = 0,
    OFF = 1,
    ON = 2,
};
pub const WTSSBX_MACHINE_DRAIN_UNSPEC = WTSSBX_MACHINE_DRAIN.UNSPEC;
pub const WTSSBX_MACHINE_DRAIN_OFF = WTSSBX_MACHINE_DRAIN.OFF;
pub const WTSSBX_MACHINE_DRAIN_ON = WTSSBX_MACHINE_DRAIN.ON;

pub const WTSSBX_MACHINE_SESSION_MODE = enum(i32) {
    UNSPEC = 0,
    SINGLE = 1,
    MULTIPLE = 2,
};
pub const WTSSBX_MACHINE_SESSION_MODE_UNSPEC = WTSSBX_MACHINE_SESSION_MODE.UNSPEC;
pub const WTSSBX_MACHINE_SESSION_MODE_SINGLE = WTSSBX_MACHINE_SESSION_MODE.SINGLE;
pub const WTSSBX_MACHINE_SESSION_MODE_MULTIPLE = WTSSBX_MACHINE_SESSION_MODE.MULTIPLE;

pub const WTSSBX_ADDRESS_FAMILY = enum(i32) {
    UNSPEC = 0,
    INET = 1,
    INET6 = 2,
    IPX = 3,
    NETBIOS = 4,
};
pub const WTSSBX_ADDRESS_FAMILY_AF_UNSPEC = WTSSBX_ADDRESS_FAMILY.UNSPEC;
pub const WTSSBX_ADDRESS_FAMILY_AF_INET = WTSSBX_ADDRESS_FAMILY.INET;
pub const WTSSBX_ADDRESS_FAMILY_AF_INET6 = WTSSBX_ADDRESS_FAMILY.INET6;
pub const WTSSBX_ADDRESS_FAMILY_AF_IPX = WTSSBX_ADDRESS_FAMILY.IPX;
pub const WTSSBX_ADDRESS_FAMILY_AF_NETBIOS = WTSSBX_ADDRESS_FAMILY.NETBIOS;

pub const WTSSBX_IP_ADDRESS = extern struct {
    AddressFamily: WTSSBX_ADDRESS_FAMILY,
    Address: [16]u8,
    PortNumber: u16,
    dwScope: u32,
};

pub const WTSSBX_MACHINE_STATE = enum(i32) {
    UNSPEC = 0,
    READY = 1,
    SYNCHRONIZING = 2,
};
pub const WTSSBX_MACHINE_STATE_UNSPEC = WTSSBX_MACHINE_STATE.UNSPEC;
pub const WTSSBX_MACHINE_STATE_READY = WTSSBX_MACHINE_STATE.READY;
pub const WTSSBX_MACHINE_STATE_SYNCHRONIZING = WTSSBX_MACHINE_STATE.SYNCHRONIZING;

pub const WTSSBX_MACHINE_CONNECT_INFO = extern struct {
    wczMachineFQDN: [257]u16,
    wczMachineNetBiosName: [17]u16,
    dwNumOfIPAddr: u32,
    IPaddr: [12]WTSSBX_IP_ADDRESS,
};

pub const WTSSBX_MACHINE_INFO = extern struct {
    ClientConnectInfo: WTSSBX_MACHINE_CONNECT_INFO,
    wczFarmName: [257]u16,
    InternalIPAddress: WTSSBX_IP_ADDRESS,
    dwMaxSessionsLimit: u32,
    ServerWeight: u32,
    SingleSessionMode: WTSSBX_MACHINE_SESSION_MODE,
    InDrain: WTSSBX_MACHINE_DRAIN,
    MachineState: WTSSBX_MACHINE_STATE,
};

pub const WTSSBX_SESSION_STATE = enum(i32) {
    UNSPEC = 0,
    ACTIVE = 1,
    DISCONNECTED = 2,
};
pub const WTSSBX_SESSION_STATE_UNSPEC = WTSSBX_SESSION_STATE.UNSPEC;
pub const WTSSBX_SESSION_STATE_ACTIVE = WTSSBX_SESSION_STATE.ACTIVE;
pub const WTSSBX_SESSION_STATE_DISCONNECTED = WTSSBX_SESSION_STATE.DISCONNECTED;

pub const WTSSBX_SESSION_INFO = extern struct {
    wszUserName: [105]u16,
    wszDomainName: [257]u16,
    ApplicationType: [257]u16,
    dwSessionId: u32,
    CreateTime: FILETIME,
    DisconnectTime: FILETIME,
    SessionState: WTSSBX_SESSION_STATE,
};

pub const WTSSBX_NOTIFICATION_TYPE = enum(i32) {
    REMOVED = 1,
    CHANGED = 2,
    ADDED = 4,
    RESYNC = 8,
};
pub const WTSSBX_NOTIFICATION_REMOVED = WTSSBX_NOTIFICATION_TYPE.REMOVED;
pub const WTSSBX_NOTIFICATION_CHANGED = WTSSBX_NOTIFICATION_TYPE.CHANGED;
pub const WTSSBX_NOTIFICATION_ADDED = WTSSBX_NOTIFICATION_TYPE.ADDED;
pub const WTSSBX_NOTIFICATION_RESYNC = WTSSBX_NOTIFICATION_TYPE.RESYNC;

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWTSSBPlugin_Value = Guid.initString("dc44be78-b18d-4399-b210-641bf67a002c");
pub const IID_IWTSSBPlugin = &IID_IWTSSBPlugin_Value;
pub const IWTSSBPlugin = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IWTSSBPlugin,
            plugin_capabilities: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WTSSBX_MachineChangeNotification: *const fn (
            self: *const IWTSSBPlugin,
            notification_type: WTSSBX_NOTIFICATION_TYPE,
            machine_id: i32,
            p_machine_info: ?*WTSSBX_MACHINE_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WTSSBX_SessionChangeNotification: *const fn (
            self: *const IWTSSBPlugin,
            notification_type: WTSSBX_NOTIFICATION_TYPE,
            machine_id: i32,
            num_of_sessions: u32,
            session_info: [*]WTSSBX_SESSION_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WTSSBX_GetMostSuitableServer: *const fn (
            self: *const IWTSSBPlugin,
            user_name: ?PWSTR,
            domain_name: ?PWSTR,
            application_type: ?PWSTR,
            farm_name: ?PWSTR,
            p_machine_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Terminated: *const fn (
            self: *const IWTSSBPlugin,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        WTSSBX_GetUserExternalSession: *const fn (
            self: *const IWTSSBPlugin,
            user_name: ?PWSTR,
            domain_name: ?PWSTR,
            application_type: ?PWSTR,
            redirector_internal_i_p: ?*WTSSBX_IP_ADDRESS,
            p_session_id: ?*u32,
            p_machine_connect_info: ?*WTSSBX_MACHINE_CONNECT_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, plugin_capabilities_: ?*u32) HRESULT {
                return @as(*const IWTSSBPlugin.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IWTSSBPlugin, @ptrCast(self)), plugin_capabilities_);
            }
            pub inline fn wtssbxMachineChangeNotification(self: *const T, notification_type_: WTSSBX_NOTIFICATION_TYPE, machine_id_: i32, p_machine_info_: ?*WTSSBX_MACHINE_INFO) HRESULT {
                return @as(*const IWTSSBPlugin.VTable, @ptrCast(self.vtable)).WTSSBX_MachineChangeNotification(@as(*const IWTSSBPlugin, @ptrCast(self)), notification_type_, machine_id_, p_machine_info_);
            }
            pub inline fn wtssbxSessionChangeNotification(self: *const T, notification_type_: WTSSBX_NOTIFICATION_TYPE, machine_id_: i32, num_of_sessions_: u32, session_info_: [*]WTSSBX_SESSION_INFO) HRESULT {
                return @as(*const IWTSSBPlugin.VTable, @ptrCast(self.vtable)).WTSSBX_SessionChangeNotification(@as(*const IWTSSBPlugin, @ptrCast(self)), notification_type_, machine_id_, num_of_sessions_, session_info_);
            }
            pub inline fn wtssbxGetMostSuitableServer(self: *const T, user_name_: ?PWSTR, domain_name_: ?PWSTR, application_type_: ?PWSTR, farm_name_: ?PWSTR, p_machine_id_: ?*i32) HRESULT {
                return @as(*const IWTSSBPlugin.VTable, @ptrCast(self.vtable)).WTSSBX_GetMostSuitableServer(@as(*const IWTSSBPlugin, @ptrCast(self)), user_name_, domain_name_, application_type_, farm_name_, p_machine_id_);
            }
            pub inline fn terminated(self: *const T) HRESULT {
                return @as(*const IWTSSBPlugin.VTable, @ptrCast(self.vtable)).Terminated(@as(*const IWTSSBPlugin, @ptrCast(self)));
            }
            pub inline fn wtssbxGetUserExternalSession(self: *const T, user_name_: ?PWSTR, domain_name_: ?PWSTR, application_type_: ?PWSTR, redirector_internal_i_p_: ?*WTSSBX_IP_ADDRESS, p_session_id_: ?*u32, p_machine_connect_info_: ?*WTSSBX_MACHINE_CONNECT_INFO) HRESULT {
                return @as(*const IWTSSBPlugin.VTable, @ptrCast(self.vtable)).WTSSBX_GetUserExternalSession(@as(*const IWTSSBPlugin, @ptrCast(self)), user_name_, domain_name_, application_type_, redirector_internal_i_p_, p_session_id_, p_machine_connect_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const CHANNEL_DEF = extern struct {
    name: [8]CHAR align(1),
    options: u32 align(1),
};

pub const CHANNEL_PDU_HEADER = extern struct {
    length: u32,
    flags: u32,
};

pub const PCHANNEL_INIT_EVENT_FN = *const fn (
    p_init_handle: ?*anyopaque,
    event: u32,
    p_data: ?*anyopaque,
    data_length: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PCHANNEL_OPEN_EVENT_FN = *const fn (
    open_handle: u32,
    event: u32,
    p_data: ?*anyopaque,
    data_length: u32,
    total_length: u32,
    data_flags: u32,
) callconv(@import("std").os.windows.WINAPI) void;

pub const PVIRTUALCHANNELINIT = *const fn (
    pp_init_handle: ?*?*anyopaque,
    p_channel: ?*CHANNEL_DEF,
    channel_count: i32,
    version_requested: u32,
    p_channel_init_event_proc: ?PCHANNEL_INIT_EVENT_FN,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PVIRTUALCHANNELOPEN = *const fn (
    p_init_handle: ?*anyopaque,
    p_open_handle: ?*u32,
    p_channel_name: ?[*]u8,
    p_channel_open_event_proc: ?PCHANNEL_OPEN_EVENT_FN,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PVIRTUALCHANNELCLOSE = *const fn (
    open_handle: u32,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const PVIRTUALCHANNELWRITE = *const fn (
    open_handle: u32,
    p_data: ?*anyopaque,
    data_length: u32,
    p_user_data: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) u32;

pub const CHANNEL_ENTRY_POINTS = extern struct {
    cbSize: u32,
    protocolVersion: u32,
    pVirtualChannelInit: ?PVIRTUALCHANNELINIT,
    pVirtualChannelOpen: ?PVIRTUALCHANNELOPEN,
    pVirtualChannelClose: ?PVIRTUALCHANNELCLOSE,
    pVirtualChannelWrite: ?PVIRTUALCHANNELWRITE,
};

pub const PVIRTUALCHANNELENTRY = *const fn (
    p_entry_points: ?*CHANNEL_ENTRY_POINTS,
) callconv(@import("std").os.windows.WINAPI) BOOL;

const CLSID_Workspace_Value = Guid.initString("4f1dfca6-3aad-48e1-8406-4bc21a501d7c");
pub const CLSID_Workspace = &CLSID_Workspace_Value;

// TODO: this type is limited to platform 'windows6.1'
const IID_IWorkspaceClientExt_Value = Guid.initString("12b952f4-41ca-4f21-a829-a6d07d9a16e5");
pub const IID_IWorkspaceClientExt = &IID_IWorkspaceClientExt_Value;
pub const IWorkspaceClientExt = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetResourceId: *const fn (
            self: *const IWorkspaceClientExt,
            bstr_workspace_id: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResourceDisplayName: *const fn (
            self: *const IWorkspaceClientExt,
            bstr_workspace_display_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IssueDisconnect: *const fn (
            self: *const IWorkspaceClientExt,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getResourceId(self: *const T, bstr_workspace_id_: ?*?BSTR) HRESULT {
                return @as(*const IWorkspaceClientExt.VTable, @ptrCast(self.vtable)).GetResourceId(@as(*const IWorkspaceClientExt, @ptrCast(self)), bstr_workspace_id_);
            }
            pub inline fn getResourceDisplayName(self: *const T, bstr_workspace_display_name_: ?*?BSTR) HRESULT {
                return @as(*const IWorkspaceClientExt.VTable, @ptrCast(self.vtable)).GetResourceDisplayName(@as(*const IWorkspaceClientExt, @ptrCast(self)), bstr_workspace_display_name_);
            }
            pub inline fn issueDisconnect(self: *const T) HRESULT {
                return @as(*const IWorkspaceClientExt.VTable, @ptrCast(self.vtable)).IssueDisconnect(@as(*const IWorkspaceClientExt, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IWorkspace_Value = Guid.initString("b922bbb8-4c55-4fea-8496-beb0b44285e5");
pub const IID_IWorkspace = &IID_IWorkspace_Value;
pub const IWorkspace = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetWorkspaceNames: *const fn (
            self: *const IWorkspace,
            psa_wksp_names: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartRemoteApplication: *const fn (
            self: *const IWorkspace,
            bstr_workspace_id: ?BSTR,
            psa_params: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProcessId: *const fn (
            self: *const IWorkspace,
            pul_process_id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getWorkspaceNames(self: *const T, psa_wksp_names_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IWorkspace.VTable, @ptrCast(self.vtable)).GetWorkspaceNames(@as(*const IWorkspace, @ptrCast(self)), psa_wksp_names_);
            }
            pub inline fn startRemoteApplication(self: *const T, bstr_workspace_id_: ?BSTR, psa_params_: ?*SAFEARRAY) HRESULT {
                return @as(*const IWorkspace.VTable, @ptrCast(self.vtable)).StartRemoteApplication(@as(*const IWorkspace, @ptrCast(self)), bstr_workspace_id_, psa_params_);
            }
            pub inline fn getProcessId(self: *const T, pul_process_id_: ?*u32) HRESULT {
                return @as(*const IWorkspace.VTable, @ptrCast(self.vtable)).GetProcessId(@as(*const IWorkspace, @ptrCast(self)), pul_process_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IWorkspace2_Value = Guid.initString("96d8d7cf-783e-4286-834c-ebc0e95f783c");
pub const IID_IWorkspace2 = &IID_IWorkspace2_Value;
pub const IWorkspace2 = extern struct {
    pub const VTable = extern struct {
        base: IWorkspace.VTable,
        StartRemoteApplicationEx: *const fn (
            self: *const IWorkspace2,
            bstr_workspace_id: ?BSTR,
            bstr_requesting_app_id: ?BSTR,
            bstr_requesting_app_family_name: ?BSTR,
            b_launch_into_immersive_client: i16,
            bstr_immersive_client_activation_context: ?BSTR,
            psa_params: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWorkspace.MethodMixin(T);
            pub inline fn startRemoteApplicationEx(self: *const T, bstr_workspace_id_: ?BSTR, bstr_requesting_app_id_: ?BSTR, bstr_requesting_app_family_name_: ?BSTR, b_launch_into_immersive_client_: i16, bstr_immersive_client_activation_context_: ?BSTR, psa_params_: ?*SAFEARRAY) HRESULT {
                return @as(*const IWorkspace2.VTable, @ptrCast(self.vtable)).StartRemoteApplicationEx(@as(*const IWorkspace2, @ptrCast(self)), bstr_workspace_id_, bstr_requesting_app_id_, bstr_requesting_app_family_name_, b_launch_into_immersive_client_, bstr_immersive_client_activation_context_, psa_params_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows10.0.10240'
const IID_IWorkspace3_Value = Guid.initString("1becbe4a-d654-423b-afeb-be8d532c13c6");
pub const IID_IWorkspace3 = &IID_IWorkspace3_Value;
pub const IWorkspace3 = extern struct {
    pub const VTable = extern struct {
        base: IWorkspace2.VTable,
        GetClaimsToken2: *const fn (
            self: *const IWorkspace3,
            bstr_claims_hint: ?BSTR,
            bstr_user_hint: ?BSTR,
            claim_cookie: u32,
            hwnd_cred_ui_parent: u32,
            rect_cred_ui_parent: RECT,
            pbstr_access_token: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetClaimsToken: *const fn (
            self: *const IWorkspace3,
            bstr_access_token: ?BSTR,
            ull_access_token_expiration: u64,
            bstr_refresh_token: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWorkspace2.MethodMixin(T);
            pub inline fn getClaimsToken2(self: *const T, bstr_claims_hint_: ?BSTR, bstr_user_hint_: ?BSTR, claim_cookie_: u32, hwnd_cred_ui_parent_: u32, rect_cred_ui_parent_: RECT, pbstr_access_token_: ?*?BSTR) HRESULT {
                return @as(*const IWorkspace3.VTable, @ptrCast(self.vtable)).GetClaimsToken2(@as(*const IWorkspace3, @ptrCast(self)), bstr_claims_hint_, bstr_user_hint_, claim_cookie_, hwnd_cred_ui_parent_, rect_cred_ui_parent_, pbstr_access_token_);
            }
            pub inline fn setClaimsToken(self: *const T, bstr_access_token_: ?BSTR, ull_access_token_expiration_: u64, bstr_refresh_token_: ?BSTR) HRESULT {
                return @as(*const IWorkspace3.VTable, @ptrCast(self.vtable)).SetClaimsToken(@as(*const IWorkspace3, @ptrCast(self)), bstr_access_token_, ull_access_token_expiration_, bstr_refresh_token_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IWorkspaceRegistration_Value = Guid.initString("b922bbb8-4c55-4fea-8496-beb0b44285e6");
pub const IID_IWorkspaceRegistration = &IID_IWorkspaceRegistration_Value;
pub const IWorkspaceRegistration = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        AddResource: *const fn (
            self: *const IWorkspaceRegistration,
            p_unk: ?*IWorkspaceClientExt,
            pdw_cookie: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveResource: *const fn (
            self: *const IWorkspaceRegistration,
            dw_cookie_connection: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn addResource(self: *const T, p_unk_: ?*IWorkspaceClientExt, pdw_cookie_: ?*u32) HRESULT {
                return @as(*const IWorkspaceRegistration.VTable, @ptrCast(self.vtable)).AddResource(@as(*const IWorkspaceRegistration, @ptrCast(self)), p_unk_, pdw_cookie_);
            }
            pub inline fn removeResource(self: *const T, dw_cookie_connection_: u32) HRESULT {
                return @as(*const IWorkspaceRegistration.VTable, @ptrCast(self.vtable)).RemoveResource(@as(*const IWorkspaceRegistration, @ptrCast(self)), dw_cookie_connection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IWorkspaceRegistration2_Value = Guid.initString("cf59f654-39bb-44d8-94d0-4635728957e9");
pub const IID_IWorkspaceRegistration2 = &IID_IWorkspaceRegistration2_Value;
pub const IWorkspaceRegistration2 = extern struct {
    pub const VTable = extern struct {
        base: IWorkspaceRegistration.VTable,
        AddResourceEx: *const fn (
            self: *const IWorkspaceRegistration2,
            p_unk: ?*IWorkspaceClientExt,
            bstr_event_log_upload_address: ?BSTR,
            pdw_cookie: ?*u32,
            correlation_id: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveResourceEx: *const fn (
            self: *const IWorkspaceRegistration2,
            dw_cookie_connection: u32,
            correlation_id: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWorkspaceRegistration.MethodMixin(T);
            pub inline fn addResourceEx(self: *const T, p_unk_: ?*IWorkspaceClientExt, bstr_event_log_upload_address_: ?BSTR, pdw_cookie_: ?*u32, correlation_id_: Guid) HRESULT {
                return @as(*const IWorkspaceRegistration2.VTable, @ptrCast(self.vtable)).AddResourceEx(@as(*const IWorkspaceRegistration2, @ptrCast(self)), p_unk_, bstr_event_log_upload_address_, pdw_cookie_, correlation_id_);
            }
            pub inline fn removeResourceEx(self: *const T, dw_cookie_connection_: u32, correlation_id_: Guid) HRESULT {
                return @as(*const IWorkspaceRegistration2.VTable, @ptrCast(self.vtable)).RemoveResourceEx(@as(*const IWorkspaceRegistration2, @ptrCast(self)), dw_cookie_connection_, correlation_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IWorkspaceScriptable_Value = Guid.initString("efea49a2-dda5-429d-8f42-b23b92c4c347");
pub const IID_IWorkspaceScriptable = &IID_IWorkspaceScriptable_Value;
pub const IWorkspaceScriptable = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        DisconnectWorkspace: *const fn (
            self: *const IWorkspaceScriptable,
            bstr_workspace_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartWorkspace: *const fn (
            self: *const IWorkspaceScriptable,
            bstr_workspace_id: ?BSTR,
            bstr_user_name: ?BSTR,
            bstr_password: ?BSTR,
            bstr_workspace_params: ?BSTR,
            l_timeout: i32,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsWorkspaceCredentialSpecified: *const fn (
            self: *const IWorkspaceScriptable,
            bstr_workspace_id: ?BSTR,
            b_count_unauthenticated_credentials: i16,
            pb_cred_exist: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsWorkspaceSSOEnabled: *const fn (
            self: *const IWorkspaceScriptable,
            pb_s_s_o_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ClearWorkspaceCredential: *const fn (
            self: *const IWorkspaceScriptable,
            bstr_workspace_id: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnAuthenticated: *const fn (
            self: *const IWorkspaceScriptable,
            bstr_workspace_id: ?BSTR,
            bstr_user_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisconnectWorkspaceByFriendlyName: *const fn (
            self: *const IWorkspaceScriptable,
            bstr_workspace_friendly_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn disconnectWorkspace(self: *const T, bstr_workspace_id_: ?BSTR) HRESULT {
                return @as(*const IWorkspaceScriptable.VTable, @ptrCast(self.vtable)).DisconnectWorkspace(@as(*const IWorkspaceScriptable, @ptrCast(self)), bstr_workspace_id_);
            }
            pub inline fn startWorkspace(self: *const T, bstr_workspace_id_: ?BSTR, bstr_user_name_: ?BSTR, bstr_password_: ?BSTR, bstr_workspace_params_: ?BSTR, l_timeout_: i32, l_flags_: i32) HRESULT {
                return @as(*const IWorkspaceScriptable.VTable, @ptrCast(self.vtable)).StartWorkspace(@as(*const IWorkspaceScriptable, @ptrCast(self)), bstr_workspace_id_, bstr_user_name_, bstr_password_, bstr_workspace_params_, l_timeout_, l_flags_);
            }
            pub inline fn isWorkspaceCredentialSpecified(self: *const T, bstr_workspace_id_: ?BSTR, b_count_unauthenticated_credentials_: i16, pb_cred_exist_: ?*i16) HRESULT {
                return @as(*const IWorkspaceScriptable.VTable, @ptrCast(self.vtable)).IsWorkspaceCredentialSpecified(@as(*const IWorkspaceScriptable, @ptrCast(self)), bstr_workspace_id_, b_count_unauthenticated_credentials_, pb_cred_exist_);
            }
            pub inline fn isWorkspaceSSOEnabled(self: *const T, pb_s_s_o_enabled_: ?*i16) HRESULT {
                return @as(*const IWorkspaceScriptable.VTable, @ptrCast(self.vtable)).IsWorkspaceSSOEnabled(@as(*const IWorkspaceScriptable, @ptrCast(self)), pb_s_s_o_enabled_);
            }
            pub inline fn clearWorkspaceCredential(self: *const T, bstr_workspace_id_: ?BSTR) HRESULT {
                return @as(*const IWorkspaceScriptable.VTable, @ptrCast(self.vtable)).ClearWorkspaceCredential(@as(*const IWorkspaceScriptable, @ptrCast(self)), bstr_workspace_id_);
            }
            pub inline fn onAuthenticated(self: *const T, bstr_workspace_id_: ?BSTR, bstr_user_name_: ?BSTR) HRESULT {
                return @as(*const IWorkspaceScriptable.VTable, @ptrCast(self.vtable)).OnAuthenticated(@as(*const IWorkspaceScriptable, @ptrCast(self)), bstr_workspace_id_, bstr_user_name_);
            }
            pub inline fn disconnectWorkspaceByFriendlyName(self: *const T, bstr_workspace_friendly_name_: ?BSTR) HRESULT {
                return @as(*const IWorkspaceScriptable.VTable, @ptrCast(self.vtable)).DisconnectWorkspaceByFriendlyName(@as(*const IWorkspaceScriptable, @ptrCast(self)), bstr_workspace_friendly_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IWorkspaceScriptable2_Value = Guid.initString("efea49a2-dda5-429d-8f42-b33ba2c4c348");
pub const IID_IWorkspaceScriptable2 = &IID_IWorkspaceScriptable2_Value;
pub const IWorkspaceScriptable2 = extern struct {
    pub const VTable = extern struct {
        base: IWorkspaceScriptable.VTable,
        StartWorkspaceEx: *const fn (
            self: *const IWorkspaceScriptable2,
            bstr_workspace_id: ?BSTR,
            bstr_workspace_friendly_name: ?BSTR,
            bstr_redirector_name: ?BSTR,
            bstr_user_name: ?BSTR,
            bstr_password: ?BSTR,
            bstr_app_container: ?BSTR,
            bstr_workspace_params: ?BSTR,
            l_timeout: i32,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResourceDismissed: *const fn (
            self: *const IWorkspaceScriptable2,
            bstr_workspace_id: ?BSTR,
            bstr_workspace_friendly_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWorkspaceScriptable.MethodMixin(T);
            pub inline fn startWorkspaceEx(self: *const T, bstr_workspace_id_: ?BSTR, bstr_workspace_friendly_name_: ?BSTR, bstr_redirector_name_: ?BSTR, bstr_user_name_: ?BSTR, bstr_password_: ?BSTR, bstr_app_container_: ?BSTR, bstr_workspace_params_: ?BSTR, l_timeout_: i32, l_flags_: i32) HRESULT {
                return @as(*const IWorkspaceScriptable2.VTable, @ptrCast(self.vtable)).StartWorkspaceEx(@as(*const IWorkspaceScriptable2, @ptrCast(self)), bstr_workspace_id_, bstr_workspace_friendly_name_, bstr_redirector_name_, bstr_user_name_, bstr_password_, bstr_app_container_, bstr_workspace_params_, l_timeout_, l_flags_);
            }
            pub inline fn resourceDismissed(self: *const T, bstr_workspace_id_: ?BSTR, bstr_workspace_friendly_name_: ?BSTR) HRESULT {
                return @as(*const IWorkspaceScriptable2.VTable, @ptrCast(self.vtable)).ResourceDismissed(@as(*const IWorkspaceScriptable2, @ptrCast(self)), bstr_workspace_id_, bstr_workspace_friendly_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.1'
const IID_IWorkspaceScriptable3_Value = Guid.initString("531e6512-2cbf-4bd2-80a5-d90a71636a9a");
pub const IID_IWorkspaceScriptable3 = &IID_IWorkspaceScriptable3_Value;
pub const IWorkspaceScriptable3 = extern struct {
    pub const VTable = extern struct {
        base: IWorkspaceScriptable2.VTable,
        StartWorkspaceEx2: *const fn (
            self: *const IWorkspaceScriptable3,
            bstr_workspace_id: ?BSTR,
            bstr_workspace_friendly_name: ?BSTR,
            bstr_redirector_name: ?BSTR,
            bstr_user_name: ?BSTR,
            bstr_password: ?BSTR,
            bstr_app_container: ?BSTR,
            bstr_workspace_params: ?BSTR,
            l_timeout: i32,
            l_flags: i32,
            bstr_event_log_upload_address: ?BSTR,
            correlation_id: Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IWorkspaceScriptable2.MethodMixin(T);
            pub inline fn startWorkspaceEx2(self: *const T, bstr_workspace_id_: ?BSTR, bstr_workspace_friendly_name_: ?BSTR, bstr_redirector_name_: ?BSTR, bstr_user_name_: ?BSTR, bstr_password_: ?BSTR, bstr_app_container_: ?BSTR, bstr_workspace_params_: ?BSTR, l_timeout_: i32, l_flags_: i32, bstr_event_log_upload_address_: ?BSTR, correlation_id_: Guid) HRESULT {
                return @as(*const IWorkspaceScriptable3.VTable, @ptrCast(self.vtable)).StartWorkspaceEx2(@as(*const IWorkspaceScriptable3, @ptrCast(self)), bstr_workspace_id_, bstr_workspace_friendly_name_, bstr_redirector_name_, bstr_user_name_, bstr_password_, bstr_app_container_, bstr_workspace_params_, l_timeout_, l_flags_, bstr_event_log_upload_address_, correlation_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IWorkspaceReportMessage_Value = Guid.initString("a7c06739-500f-4e8c-99a8-2bd6955899eb");
pub const IID_IWorkspaceReportMessage = &IID_IWorkspaceReportMessage_Value;
pub const IWorkspaceReportMessage = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RegisterErrorLogMessage: *const fn (
            self: *const IWorkspaceReportMessage,
            bstr_message: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsErrorMessageRegistered: *const fn (
            self: *const IWorkspaceReportMessage,
            bstr_wksp_id: ?BSTR,
            dw_error_type: u32,
            bstr_error_message_type: ?BSTR,
            dw_error_code: u32,
            pf_error_exist: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterErrorEvent: *const fn (
            self: *const IWorkspaceReportMessage,
            bstr_wksp_id: ?BSTR,
            dw_error_type: u32,
            bstr_error_message_type: ?BSTR,
            dw_error_code: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn registerErrorLogMessage(self: *const T, bstr_message_: ?BSTR) HRESULT {
                return @as(*const IWorkspaceReportMessage.VTable, @ptrCast(self.vtable)).RegisterErrorLogMessage(@as(*const IWorkspaceReportMessage, @ptrCast(self)), bstr_message_);
            }
            pub inline fn isErrorMessageRegistered(self: *const T, bstr_wksp_id_: ?BSTR, dw_error_type_: u32, bstr_error_message_type_: ?BSTR, dw_error_code_: u32, pf_error_exist_: ?*i16) HRESULT {
                return @as(*const IWorkspaceReportMessage.VTable, @ptrCast(self.vtable)).IsErrorMessageRegistered(@as(*const IWorkspaceReportMessage, @ptrCast(self)), bstr_wksp_id_, dw_error_type_, bstr_error_message_type_, dw_error_code_, pf_error_exist_);
            }
            pub inline fn registerErrorEvent(self: *const T, bstr_wksp_id_: ?BSTR, dw_error_type_: u32, bstr_error_message_type_: ?BSTR, dw_error_code_: u32) HRESULT {
                return @as(*const IWorkspaceReportMessage.VTable, @ptrCast(self.vtable)).RegisterErrorEvent(@as(*const IWorkspaceReportMessage, @ptrCast(self)), bstr_wksp_id_, dw_error_type_, bstr_error_message_type_, dw_error_code_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID__ITSWkspEvents_Value = Guid.initString("b922bbb8-4c55-4fea-8496-beb0b44285e9");
pub const IID__ITSWkspEvents = &IID__ITSWkspEvents_Value;
pub const _ITSWkspEvents = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const TSSD_AddrV46Type = enum(i32) {
    UNDEFINED = 0,
    IPv4 = 4,
    IPv6 = 6,
};
pub const TSSD_ADDR_UNDEFINED = TSSD_AddrV46Type.UNDEFINED;
pub const TSSD_ADDR_IPv4 = TSSD_AddrV46Type.IPv4;
pub const TSSD_ADDR_IPv6 = TSSD_AddrV46Type.IPv6;

pub const TSSB_NOTIFICATION_TYPE = enum(i32) {
    INVALID = 0,
    TARGET_CHANGE = 1,
    SESSION_CHANGE = 2,
    CONNECTION_REQUEST_CHANGE = 4,
};
pub const TSSB_NOTIFY_INVALID = TSSB_NOTIFICATION_TYPE.INVALID;
pub const TSSB_NOTIFY_TARGET_CHANGE = TSSB_NOTIFICATION_TYPE.TARGET_CHANGE;
pub const TSSB_NOTIFY_SESSION_CHANGE = TSSB_NOTIFICATION_TYPE.SESSION_CHANGE;
pub const TSSB_NOTIFY_CONNECTION_REQUEST_CHANGE = TSSB_NOTIFICATION_TYPE.CONNECTION_REQUEST_CHANGE;

pub const TARGET_STATE = enum(i32) {
    UNKNOWN = 1,
    INITIALIZING = 2,
    RUNNING = 3,
    DOWN = 4,
    HIBERNATED = 5,
    CHECKED_OUT = 6,
    STOPPED = 7,
    INVALID = 8,
    STARTING = 9,
    STOPPING = 10,
    MAXSTATE = 11,
};
pub const TARGET_UNKNOWN = TARGET_STATE.UNKNOWN;
pub const TARGET_INITIALIZING = TARGET_STATE.INITIALIZING;
pub const TARGET_RUNNING = TARGET_STATE.RUNNING;
pub const TARGET_DOWN = TARGET_STATE.DOWN;
pub const TARGET_HIBERNATED = TARGET_STATE.HIBERNATED;
pub const TARGET_CHECKED_OUT = TARGET_STATE.CHECKED_OUT;
pub const TARGET_STOPPED = TARGET_STATE.STOPPED;
pub const TARGET_INVALID = TARGET_STATE.INVALID;
pub const TARGET_STARTING = TARGET_STATE.STARTING;
pub const TARGET_STOPPING = TARGET_STATE.STOPPING;
pub const TARGET_MAXSTATE = TARGET_STATE.MAXSTATE;

pub const TARGET_CHANGE_TYPE = enum(i32) {
    CHANGE_UNSPEC = 1,
    EXTERNALIP_CHANGED = 2,
    INTERNALIP_CHANGED = 4,
    JOINED = 8,
    REMOVED = 16,
    STATE_CHANGED = 32,
    IDLE = 64,
    PENDING = 128,
    INUSE = 256,
    PATCH_STATE_CHANGED = 512,
    FARM_MEMBERSHIP_CHANGED = 1024,
};
pub const TARGET_CHANGE_UNSPEC = TARGET_CHANGE_TYPE.CHANGE_UNSPEC;
pub const TARGET_EXTERNALIP_CHANGED = TARGET_CHANGE_TYPE.EXTERNALIP_CHANGED;
pub const TARGET_INTERNALIP_CHANGED = TARGET_CHANGE_TYPE.INTERNALIP_CHANGED;
pub const TARGET_JOINED = TARGET_CHANGE_TYPE.JOINED;
pub const TARGET_REMOVED = TARGET_CHANGE_TYPE.REMOVED;
pub const TARGET_STATE_CHANGED = TARGET_CHANGE_TYPE.STATE_CHANGED;
pub const TARGET_IDLE = TARGET_CHANGE_TYPE.IDLE;
pub const TARGET_PENDING = TARGET_CHANGE_TYPE.PENDING;
pub const TARGET_INUSE = TARGET_CHANGE_TYPE.INUSE;
pub const TARGET_PATCH_STATE_CHANGED = TARGET_CHANGE_TYPE.PATCH_STATE_CHANGED;
pub const TARGET_FARM_MEMBERSHIP_CHANGED = TARGET_CHANGE_TYPE.FARM_MEMBERSHIP_CHANGED;

pub const TARGET_TYPE = enum(i32) {
    UNKNOWN = 0,
    FARM = 1,
    NONFARM = 2,
};
pub const UNKNOWN = TARGET_TYPE.UNKNOWN;
pub const FARM = TARGET_TYPE.FARM;
pub const NONFARM = TARGET_TYPE.NONFARM;

pub const TARGET_PATCH_STATE = enum(i32) {
    UNKNOWN = 0,
    NOT_STARTED = 1,
    IN_PROGRESS = 2,
    COMPLETED = 3,
    FAILED = 4,
};
pub const TARGET_PATCH_UNKNOWN = TARGET_PATCH_STATE.UNKNOWN;
pub const TARGET_PATCH_NOT_STARTED = TARGET_PATCH_STATE.NOT_STARTED;
pub const TARGET_PATCH_IN_PROGRESS = TARGET_PATCH_STATE.IN_PROGRESS;
pub const TARGET_PATCH_COMPLETED = TARGET_PATCH_STATE.COMPLETED;
pub const TARGET_PATCH_FAILED = TARGET_PATCH_STATE.FAILED;

pub const CLIENT_MESSAGE_TYPE = enum(i32) {
    INVALID = 0,
    STATUS = 1,
    ERROR = 2,
};
pub const CLIENT_MESSAGE_CONNECTION_INVALID = CLIENT_MESSAGE_TYPE.INVALID;
pub const CLIENT_MESSAGE_CONNECTION_STATUS = CLIENT_MESSAGE_TYPE.STATUS;
pub const CLIENT_MESSAGE_CONNECTION_ERROR = CLIENT_MESSAGE_TYPE.ERROR;

pub const CONNECTION_CHANGE_NOTIFICATION = enum(i32) {
    INVALID = 0,
    PENDING = 1,
    FAILED = 2,
    TIMEDOUT = 3,
    SUCCEEDED = 4,
    CANCELLED = 5,
    LB_COMPLETED = 6,
    QUERY_PL_COMPLETED = 7,
    ORCH_COMPLETED = 8,
};
pub const CONNECTION_REQUEST_INVALID = CONNECTION_CHANGE_NOTIFICATION.INVALID;
pub const CONNECTION_REQUEST_PENDING = CONNECTION_CHANGE_NOTIFICATION.PENDING;
pub const CONNECTION_REQUEST_FAILED = CONNECTION_CHANGE_NOTIFICATION.FAILED;
pub const CONNECTION_REQUEST_TIMEDOUT = CONNECTION_CHANGE_NOTIFICATION.TIMEDOUT;
pub const CONNECTION_REQUEST_SUCCEEDED = CONNECTION_CHANGE_NOTIFICATION.SUCCEEDED;
pub const CONNECTION_REQUEST_CANCELLED = CONNECTION_CHANGE_NOTIFICATION.CANCELLED;
pub const CONNECTION_REQUEST_LB_COMPLETED = CONNECTION_CHANGE_NOTIFICATION.LB_COMPLETED;
pub const CONNECTION_REQUEST_QUERY_PL_COMPLETED = CONNECTION_CHANGE_NOTIFICATION.QUERY_PL_COMPLETED;
pub const CONNECTION_REQUEST_ORCH_COMPLETED = CONNECTION_CHANGE_NOTIFICATION.ORCH_COMPLETED;

pub const RD_FARM_TYPE = enum(i32) {
    RDSH = 0,
    TEMP_VM = 1,
    MANUAL_PERSONAL_VM = 2,
    AUTO_PERSONAL_VM = 3,
    MANUAL_PERSONAL_RDSH = 4,
    AUTO_PERSONAL_RDSH = 5,
    TYPE_UNKNOWN = -1,
};
pub const RD_FARM_RDSH = RD_FARM_TYPE.RDSH;
pub const RD_FARM_TEMP_VM = RD_FARM_TYPE.TEMP_VM;
pub const RD_FARM_MANUAL_PERSONAL_VM = RD_FARM_TYPE.MANUAL_PERSONAL_VM;
pub const RD_FARM_AUTO_PERSONAL_VM = RD_FARM_TYPE.AUTO_PERSONAL_VM;
pub const RD_FARM_MANUAL_PERSONAL_RDSH = RD_FARM_TYPE.MANUAL_PERSONAL_RDSH;
pub const RD_FARM_AUTO_PERSONAL_RDSH = RD_FARM_TYPE.AUTO_PERSONAL_RDSH;
pub const RD_FARM_TYPE_UNKNOWN = RD_FARM_TYPE.TYPE_UNKNOWN;

pub const PLUGIN_TYPE = enum(i32) {
    UNKNOWN_PLUGIN = 0,
    POLICY_PLUGIN = 1,
    RESOURCE_PLUGIN = 2,
    LOAD_BALANCING_PLUGIN = 4,
    PLACEMENT_PLUGIN = 8,
    ORCHESTRATION_PLUGIN = 16,
    PROVISIONING_PLUGIN = 32,
    TASK_PLUGIN = 64,
};
pub const UNKNOWN_PLUGIN = PLUGIN_TYPE.UNKNOWN_PLUGIN;
pub const POLICY_PLUGIN = PLUGIN_TYPE.POLICY_PLUGIN;
pub const RESOURCE_PLUGIN = PLUGIN_TYPE.RESOURCE_PLUGIN;
pub const LOAD_BALANCING_PLUGIN = PLUGIN_TYPE.LOAD_BALANCING_PLUGIN;
pub const PLACEMENT_PLUGIN = PLUGIN_TYPE.PLACEMENT_PLUGIN;
pub const ORCHESTRATION_PLUGIN = PLUGIN_TYPE.ORCHESTRATION_PLUGIN;
pub const PROVISIONING_PLUGIN = PLUGIN_TYPE.PROVISIONING_PLUGIN;
pub const TASK_PLUGIN = PLUGIN_TYPE.TASK_PLUGIN;

pub const TSSESSION_STATE = enum(i32) {
    INVALID = -1,
    ACTIVE = 0,
    CONNECTED = 1,
    CONNECTQUERY = 2,
    SHADOW = 3,
    DISCONNECTED = 4,
    IDLE = 5,
    LISTEN = 6,
    RESET = 7,
    DOWN = 8,
    INIT = 9,
    MAX = 10,
};
pub const STATE_INVALID = TSSESSION_STATE.INVALID;
pub const STATE_ACTIVE = TSSESSION_STATE.ACTIVE;
pub const STATE_CONNECTED = TSSESSION_STATE.CONNECTED;
pub const STATE_CONNECTQUERY = TSSESSION_STATE.CONNECTQUERY;
pub const STATE_SHADOW = TSSESSION_STATE.SHADOW;
pub const STATE_DISCONNECTED = TSSESSION_STATE.DISCONNECTED;
pub const STATE_IDLE = TSSESSION_STATE.IDLE;
pub const STATE_LISTEN = TSSESSION_STATE.LISTEN;
pub const STATE_RESET = TSSESSION_STATE.RESET;
pub const STATE_DOWN = TSSESSION_STATE.DOWN;
pub const STATE_INIT = TSSESSION_STATE.INIT;
pub const STATE_MAX = TSSESSION_STATE.MAX;

pub const TARGET_OWNER = enum(i32) {
    UNKNOWN = 0,
    MS_TS_PLUGIN = 1,
    MS_VM_PLUGIN = 2,
};
pub const OWNER_UNKNOWN = TARGET_OWNER.UNKNOWN;
pub const OWNER_MS_TS_PLUGIN = TARGET_OWNER.MS_TS_PLUGIN;
pub const OWNER_MS_VM_PLUGIN = TARGET_OWNER.MS_VM_PLUGIN;

pub const CLIENT_DISPLAY = extern struct {
    HorizontalResolution: u32,
    VerticalResolution: u32,
    ColorDepth: u32,
};

pub const TSSD_ConnectionPoint = extern struct {
    ServerAddressB: [16]u8,
    AddressType: TSSD_AddrV46Type,
    PortNumber: u16,
    AddressScope: u32,
};

pub const VM_NOTIFY_STATUS = enum(i32) {
    PENDING = 0,
    IN_PROGRESS = 1,
    COMPLETE = 2,
    FAILED = 3,
    CANCELED = 4,
};
pub const VM_NOTIFY_STATUS_PENDING = VM_NOTIFY_STATUS.PENDING;
pub const VM_NOTIFY_STATUS_IN_PROGRESS = VM_NOTIFY_STATUS.IN_PROGRESS;
pub const VM_NOTIFY_STATUS_COMPLETE = VM_NOTIFY_STATUS.COMPLETE;
pub const VM_NOTIFY_STATUS_FAILED = VM_NOTIFY_STATUS.FAILED;
pub const VM_NOTIFY_STATUS_CANCELED = VM_NOTIFY_STATUS.CANCELED;

pub const VM_NOTIFY_ENTRY = extern struct {
    VmName: [128]u16,
    VmHost: [128]u16,
};

pub const VM_PATCH_INFO = extern struct {
    dwNumEntries: u32,
    pVmNames: ?*?PWSTR,
};

pub const VM_NOTIFY_INFO = extern struct {
    dwNumEntries: u32,
    ppVmEntries: ?*?*VM_NOTIFY_ENTRY,
};

pub const VM_HOST_NOTIFY_STATUS = enum(i32) {
    PENDING = 0,
    IN_PROGRESS = 1,
    COMPLETE = 2,
    FAILED = 3,
};
pub const VM_HOST_STATUS_INIT_PENDING = VM_HOST_NOTIFY_STATUS.PENDING;
pub const VM_HOST_STATUS_INIT_IN_PROGRESS = VM_HOST_NOTIFY_STATUS.IN_PROGRESS;
pub const VM_HOST_STATUS_INIT_COMPLETE = VM_HOST_NOTIFY_STATUS.COMPLETE;
pub const VM_HOST_STATUS_INIT_FAILED = VM_HOST_NOTIFY_STATUS.FAILED;

pub const RDV_TASK_STATUS = enum(i32) {
    UNKNOWN = 0,
    SEARCHING = 1,
    DOWNLOADING = 2,
    APPLYING = 3,
    REBOOTING = 4,
    REBOOTED = 5,
    SUCCESS = 6,
    FAILED = 7,
    TIMEOUT = 8,
};
pub const RDV_TASK_STATUS_UNKNOWN = RDV_TASK_STATUS.UNKNOWN;
pub const RDV_TASK_STATUS_SEARCHING = RDV_TASK_STATUS.SEARCHING;
pub const RDV_TASK_STATUS_DOWNLOADING = RDV_TASK_STATUS.DOWNLOADING;
pub const RDV_TASK_STATUS_APPLYING = RDV_TASK_STATUS.APPLYING;
pub const RDV_TASK_STATUS_REBOOTING = RDV_TASK_STATUS.REBOOTING;
pub const RDV_TASK_STATUS_REBOOTED = RDV_TASK_STATUS.REBOOTED;
pub const RDV_TASK_STATUS_SUCCESS = RDV_TASK_STATUS.SUCCESS;
pub const RDV_TASK_STATUS_FAILED = RDV_TASK_STATUS.FAILED;
pub const RDV_TASK_STATUS_TIMEOUT = RDV_TASK_STATUS.TIMEOUT;

pub const TS_SB_SORT_BY = enum(i32) {
    NONE = 0,
    NAME = 1,
    PROP = 2,
};
pub const TS_SB_SORT_BY_NONE = TS_SB_SORT_BY.NONE;
pub const TS_SB_SORT_BY_NAME = TS_SB_SORT_BY.NAME;
pub const TS_SB_SORT_BY_PROP = TS_SB_SORT_BY.PROP;

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbPlugin_Value = Guid.initString("48cd7406-caab-465f-a5d6-baa863b9ea4f");
pub const IID_ITsSbPlugin = &IID_ITsSbPlugin_Value;
pub const ITsSbPlugin = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const ITsSbPlugin,
            p_provider: ?*ITsSbProvider,
            p_notify_sink: ?*ITsSbPluginNotifySink,
            p_property_set: ?*ITsSbPluginPropertySet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Terminate: *const fn (
            self: *const ITsSbPlugin,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_provider_: ?*ITsSbProvider, p_notify_sink_: ?*ITsSbPluginNotifySink, p_property_set_: ?*ITsSbPluginPropertySet) HRESULT {
                return @as(*const ITsSbPlugin.VTable, @ptrCast(self.vtable)).Initialize(@as(*const ITsSbPlugin, @ptrCast(self)), p_provider_, p_notify_sink_, p_property_set_);
            }
            pub inline fn terminate(self: *const T, hr_: HRESULT) HRESULT {
                return @as(*const ITsSbPlugin.VTable, @ptrCast(self.vtable)).Terminate(@as(*const ITsSbPlugin, @ptrCast(self)), hr_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbResourcePlugin_Value = Guid.initString("ea8db42c-98ed-4535-a88b-2a164f35490f");
pub const IID_ITsSbResourcePlugin = &IID_ITsSbResourcePlugin_Value;
pub const ITsSbResourcePlugin = extern struct {
    pub const VTable = extern struct {
        base: ITsSbPlugin.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITsSbPlugin.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbServiceNotification_Value = Guid.initString("86cb68ae-86e0-4f57-8a64-bb7406bc5550");
pub const IID_ITsSbServiceNotification = &IID_ITsSbServiceNotification_Value;
pub const ITsSbServiceNotification = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NotifyServiceFailure: *const fn (
            self: *const ITsSbServiceNotification,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyServiceSuccess: *const fn (
            self: *const ITsSbServiceNotification,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn notifyServiceFailure(self: *const T) HRESULT {
                return @as(*const ITsSbServiceNotification.VTable, @ptrCast(self.vtable)).NotifyServiceFailure(@as(*const ITsSbServiceNotification, @ptrCast(self)));
            }
            pub inline fn notifyServiceSuccess(self: *const T) HRESULT {
                return @as(*const ITsSbServiceNotification.VTable, @ptrCast(self.vtable)).NotifyServiceSuccess(@as(*const ITsSbServiceNotification, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbLoadBalancing_Value = Guid.initString("24329274-9eb7-11dc-ae98-f2b456d89593");
pub const IID_ITsSbLoadBalancing = &IID_ITsSbLoadBalancing_Value;
pub const ITsSbLoadBalancing = extern struct {
    pub const VTable = extern struct {
        base: ITsSbPlugin.VTable,
        GetMostSuitableTarget: *const fn (
            self: *const ITsSbLoadBalancing,
            p_connection: ?*ITsSbClientConnection,
            p_l_b_sink: ?*ITsSbLoadBalancingNotifySink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITsSbPlugin.MethodMixin(T);
            pub inline fn getMostSuitableTarget(self: *const T, p_connection_: ?*ITsSbClientConnection, p_l_b_sink_: ?*ITsSbLoadBalancingNotifySink) HRESULT {
                return @as(*const ITsSbLoadBalancing.VTable, @ptrCast(self.vtable)).GetMostSuitableTarget(@as(*const ITsSbLoadBalancing, @ptrCast(self)), p_connection_, p_l_b_sink_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbPlacement_Value = Guid.initString("daadee5f-6d32-480e-9e36-ddab2329f06d");
pub const IID_ITsSbPlacement = &IID_ITsSbPlacement_Value;
pub const ITsSbPlacement = extern struct {
    pub const VTable = extern struct {
        base: ITsSbPlugin.VTable,
        QueryEnvironmentForTarget: *const fn (
            self: *const ITsSbPlacement,
            p_connection: ?*ITsSbClientConnection,
            p_placement_sink: ?*ITsSbPlacementNotifySink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITsSbPlugin.MethodMixin(T);
            pub inline fn queryEnvironmentForTarget(self: *const T, p_connection_: ?*ITsSbClientConnection, p_placement_sink_: ?*ITsSbPlacementNotifySink) HRESULT {
                return @as(*const ITsSbPlacement.VTable, @ptrCast(self.vtable)).QueryEnvironmentForTarget(@as(*const ITsSbPlacement, @ptrCast(self)), p_connection_, p_placement_sink_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbOrchestration_Value = Guid.initString("64fc1172-9eb7-11dc-8b00-3aba56d89593");
pub const IID_ITsSbOrchestration = &IID_ITsSbOrchestration_Value;
pub const ITsSbOrchestration = extern struct {
    pub const VTable = extern struct {
        base: ITsSbPlugin.VTable,
        PrepareTargetForConnect: *const fn (
            self: *const ITsSbOrchestration,
            p_connection: ?*ITsSbClientConnection,
            p_orchestration_notify_sink: ?*ITsSbOrchestrationNotifySink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITsSbPlugin.MethodMixin(T);
            pub inline fn prepareTargetForConnect(self: *const T, p_connection_: ?*ITsSbClientConnection, p_orchestration_notify_sink_: ?*ITsSbOrchestrationNotifySink) HRESULT {
                return @as(*const ITsSbOrchestration.VTable, @ptrCast(self.vtable)).PrepareTargetForConnect(@as(*const ITsSbOrchestration, @ptrCast(self)), p_connection_, p_orchestration_notify_sink_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbEnvironment_Value = Guid.initString("8c87f7f7-bf51-4a5c-87bf-8e94fb6e2256");
pub const IID_ITsSbEnvironment = &IID_ITsSbEnvironment_Value;
pub const ITsSbEnvironment = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbEnvironment,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServerWeight: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbEnvironment,
            p_val: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnvironmentPropertySet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbEnvironment,
            pp_property_set: ?*?*ITsSbEnvironmentPropertySet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnvironmentPropertySet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbEnvironment,
            p_val: ?*ITsSbEnvironmentPropertySet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const ITsSbEnvironment.VTable, @ptrCast(self.vtable)).get_Name(@as(*const ITsSbEnvironment, @ptrCast(self)), p_val_);
            }
            pub inline fn getServerWeight(self: *const T, p_val_: ?*u32) HRESULT {
                return @as(*const ITsSbEnvironment.VTable, @ptrCast(self.vtable)).get_ServerWeight(@as(*const ITsSbEnvironment, @ptrCast(self)), p_val_);
            }
            pub inline fn getEnvironmentPropertySet(self: *const T, pp_property_set_: ?*?*ITsSbEnvironmentPropertySet) HRESULT {
                return @as(*const ITsSbEnvironment.VTable, @ptrCast(self.vtable)).get_EnvironmentPropertySet(@as(*const ITsSbEnvironment, @ptrCast(self)), pp_property_set_);
            }
            pub inline fn putEnvironmentPropertySet(self: *const T, p_val_: ?*ITsSbEnvironmentPropertySet) HRESULT {
                return @as(*const ITsSbEnvironment.VTable, @ptrCast(self.vtable)).put_EnvironmentPropertySet(@as(*const ITsSbEnvironment, @ptrCast(self)), p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbLoadBalanceResult_Value = Guid.initString("24fdb7ac-fea6-11dc-9672-9a8956d89593");
pub const IID_ITsSbLoadBalanceResult = &IID_ITsSbLoadBalanceResult_Value;
pub const ITsSbLoadBalanceResult = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TargetName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbLoadBalanceResult,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getTargetName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const ITsSbLoadBalanceResult.VTable, @ptrCast(self.vtable)).get_TargetName(@as(*const ITsSbLoadBalanceResult, @ptrCast(self)), p_val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbTarget_Value = Guid.initString("16616ecc-272d-411d-b324-126893033856");
pub const IID_ITsSbTarget = &IID_ITsSbTarget_Value;
pub const ITsSbTarget = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TargetName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTarget,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TargetName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTarget,
            val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FarmName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTarget,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FarmName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTarget,
            val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TargetFQDN: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTarget,
            target_fqdn_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TargetFQDN: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTarget,
            val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TargetNetbios: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTarget,
            target_netbios_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TargetNetbios: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTarget,
            val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IpAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTarget,
            s_o_c_k_a_d_d_r: [*]TSSD_ConnectionPoint,
            num_addresses: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IpAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTarget,
            s_o_c_k_a_d_d_r: [*]TSSD_ConnectionPoint,
            num_addresses: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TargetState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTarget,
            p_state: ?*TARGET_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TargetState: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTarget,
            state: TARGET_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TargetPropertySet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTarget,
            pp_property_set: ?*?*ITsSbTargetPropertySet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TargetPropertySet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTarget,
            p_val: ?*ITsSbTargetPropertySet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EnvironmentName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTarget,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EnvironmentName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTarget,
            val: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NumSessions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTarget,
            p_num_sessions: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NumPendingConnections: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTarget,
            p_num_pending_connections: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TargetLoad: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTarget,
            p_target_load: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getTargetName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const ITsSbTarget.VTable, @ptrCast(self.vtable)).get_TargetName(@as(*const ITsSbTarget, @ptrCast(self)), p_val_);
            }
            pub inline fn putTargetName(self: *const T, val_: ?BSTR) HRESULT {
                return @as(*const ITsSbTarget.VTable, @ptrCast(self.vtable)).put_TargetName(@as(*const ITsSbTarget, @ptrCast(self)), val_);
            }
            pub inline fn getFarmName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const ITsSbTarget.VTable, @ptrCast(self.vtable)).get_FarmName(@as(*const ITsSbTarget, @ptrCast(self)), p_val_);
            }
            pub inline fn putFarmName(self: *const T, val_: ?BSTR) HRESULT {
                return @as(*const ITsSbTarget.VTable, @ptrCast(self.vtable)).put_FarmName(@as(*const ITsSbTarget, @ptrCast(self)), val_);
            }
            pub inline fn getTargetFQDN(self: *const T, target_fqdn_name_: ?*?BSTR) HRESULT {
                return @as(*const ITsSbTarget.VTable, @ptrCast(self.vtable)).get_TargetFQDN(@as(*const ITsSbTarget, @ptrCast(self)), target_fqdn_name_);
            }
            pub inline fn putTargetFQDN(self: *const T, val_: ?BSTR) HRESULT {
                return @as(*const ITsSbTarget.VTable, @ptrCast(self.vtable)).put_TargetFQDN(@as(*const ITsSbTarget, @ptrCast(self)), val_);
            }
            pub inline fn getTargetNetbios(self: *const T, target_netbios_name_: ?*?BSTR) HRESULT {
                return @as(*const ITsSbTarget.VTable, @ptrCast(self.vtable)).get_TargetNetbios(@as(*const ITsSbTarget, @ptrCast(self)), target_netbios_name_);
            }
            pub inline fn putTargetNetbios(self: *const T, val_: ?BSTR) HRESULT {
                return @as(*const ITsSbTarget.VTable, @ptrCast(self.vtable)).put_TargetNetbios(@as(*const ITsSbTarget, @ptrCast(self)), val_);
            }
            pub inline fn getIpAddresses(self: *const T, s_o_c_k_a_d_d_r_: [*]TSSD_ConnectionPoint, num_addresses_: ?*u32) HRESULT {
                return @as(*const ITsSbTarget.VTable, @ptrCast(self.vtable)).get_IpAddresses(@as(*const ITsSbTarget, @ptrCast(self)), s_o_c_k_a_d_d_r_, num_addresses_);
            }
            pub inline fn putIpAddresses(self: *const T, s_o_c_k_a_d_d_r_: [*]TSSD_ConnectionPoint, num_addresses_: u32) HRESULT {
                return @as(*const ITsSbTarget.VTable, @ptrCast(self.vtable)).put_IpAddresses(@as(*const ITsSbTarget, @ptrCast(self)), s_o_c_k_a_d_d_r_, num_addresses_);
            }
            pub inline fn getTargetState(self: *const T, p_state_: ?*TARGET_STATE) HRESULT {
                return @as(*const ITsSbTarget.VTable, @ptrCast(self.vtable)).get_TargetState(@as(*const ITsSbTarget, @ptrCast(self)), p_state_);
            }
            pub inline fn putTargetState(self: *const T, state_: TARGET_STATE) HRESULT {
                return @as(*const ITsSbTarget.VTable, @ptrCast(self.vtable)).put_TargetState(@as(*const ITsSbTarget, @ptrCast(self)), state_);
            }
            pub inline fn getTargetPropertySet(self: *const T, pp_property_set_: ?*?*ITsSbTargetPropertySet) HRESULT {
                return @as(*const ITsSbTarget.VTable, @ptrCast(self.vtable)).get_TargetPropertySet(@as(*const ITsSbTarget, @ptrCast(self)), pp_property_set_);
            }
            pub inline fn putTargetPropertySet(self: *const T, p_val_: ?*ITsSbTargetPropertySet) HRESULT {
                return @as(*const ITsSbTarget.VTable, @ptrCast(self.vtable)).put_TargetPropertySet(@as(*const ITsSbTarget, @ptrCast(self)), p_val_);
            }
            pub inline fn getEnvironmentName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const ITsSbTarget.VTable, @ptrCast(self.vtable)).get_EnvironmentName(@as(*const ITsSbTarget, @ptrCast(self)), p_val_);
            }
            pub inline fn putEnvironmentName(self: *const T, val_: ?BSTR) HRESULT {
                return @as(*const ITsSbTarget.VTable, @ptrCast(self.vtable)).put_EnvironmentName(@as(*const ITsSbTarget, @ptrCast(self)), val_);
            }
            pub inline fn getNumSessions(self: *const T, p_num_sessions_: ?*u32) HRESULT {
                return @as(*const ITsSbTarget.VTable, @ptrCast(self.vtable)).get_NumSessions(@as(*const ITsSbTarget, @ptrCast(self)), p_num_sessions_);
            }
            pub inline fn getNumPendingConnections(self: *const T, p_num_pending_connections_: ?*u32) HRESULT {
                return @as(*const ITsSbTarget.VTable, @ptrCast(self.vtable)).get_NumPendingConnections(@as(*const ITsSbTarget, @ptrCast(self)), p_num_pending_connections_);
            }
            pub inline fn getTargetLoad(self: *const T, p_target_load_: ?*u32) HRESULT {
                return @as(*const ITsSbTarget.VTable, @ptrCast(self.vtable)).get_TargetLoad(@as(*const ITsSbTarget, @ptrCast(self)), p_target_load_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbSession_Value = Guid.initString("d453aac7-b1d8-4c5e-ba34-9afb4c8c5510");
pub const IID_ITsSbSession = &IID_ITsSbSession_Value;
pub const ITsSbSession = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SessionId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbSession,
            p_val: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TargetName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbSession,
            target_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TargetName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbSession,
            target_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Username: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbSession,
            user_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Domain: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbSession,
            domain: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbSession,
            p_state: ?*TSSESSION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbSession,
            state: TSSESSION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CreateTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbSession,
            p_time: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_CreateTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbSession,
            time: FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_DisconnectTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbSession,
            p_time: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_DisconnectTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbSession,
            time: FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InitialProgram: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbSession,
            app: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_InitialProgram: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbSession,
            application: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClientDisplay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbSession,
            p_client_display: ?*CLIENT_DISPLAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClientDisplay: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbSession,
            p_client_display: CLIENT_DISPLAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProtocolType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbSession,
            p_val: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ProtocolType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbSession,
            val: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSessionId(self: *const T, p_val_: ?*u32) HRESULT {
                return @as(*const ITsSbSession.VTable, @ptrCast(self.vtable)).get_SessionId(@as(*const ITsSbSession, @ptrCast(self)), p_val_);
            }
            pub inline fn getTargetName(self: *const T, target_name_: ?*?BSTR) HRESULT {
                return @as(*const ITsSbSession.VTable, @ptrCast(self.vtable)).get_TargetName(@as(*const ITsSbSession, @ptrCast(self)), target_name_);
            }
            pub inline fn putTargetName(self: *const T, target_name_: ?BSTR) HRESULT {
                return @as(*const ITsSbSession.VTable, @ptrCast(self.vtable)).put_TargetName(@as(*const ITsSbSession, @ptrCast(self)), target_name_);
            }
            pub inline fn getUsername(self: *const T, user_name_: ?*?BSTR) HRESULT {
                return @as(*const ITsSbSession.VTable, @ptrCast(self.vtable)).get_Username(@as(*const ITsSbSession, @ptrCast(self)), user_name_);
            }
            pub inline fn getDomain(self: *const T, domain_: ?*?BSTR) HRESULT {
                return @as(*const ITsSbSession.VTable, @ptrCast(self.vtable)).get_Domain(@as(*const ITsSbSession, @ptrCast(self)), domain_);
            }
            pub inline fn getState(self: *const T, p_state_: ?*TSSESSION_STATE) HRESULT {
                return @as(*const ITsSbSession.VTable, @ptrCast(self.vtable)).get_State(@as(*const ITsSbSession, @ptrCast(self)), p_state_);
            }
            pub inline fn putState(self: *const T, state_: TSSESSION_STATE) HRESULT {
                return @as(*const ITsSbSession.VTable, @ptrCast(self.vtable)).put_State(@as(*const ITsSbSession, @ptrCast(self)), state_);
            }
            pub inline fn getCreateTime(self: *const T, p_time_: ?*FILETIME) HRESULT {
                return @as(*const ITsSbSession.VTable, @ptrCast(self.vtable)).get_CreateTime(@as(*const ITsSbSession, @ptrCast(self)), p_time_);
            }
            pub inline fn putCreateTime(self: *const T, time_: FILETIME) HRESULT {
                return @as(*const ITsSbSession.VTable, @ptrCast(self.vtable)).put_CreateTime(@as(*const ITsSbSession, @ptrCast(self)), time_);
            }
            pub inline fn getDisconnectTime(self: *const T, p_time_: ?*FILETIME) HRESULT {
                return @as(*const ITsSbSession.VTable, @ptrCast(self.vtable)).get_DisconnectTime(@as(*const ITsSbSession, @ptrCast(self)), p_time_);
            }
            pub inline fn putDisconnectTime(self: *const T, time_: FILETIME) HRESULT {
                return @as(*const ITsSbSession.VTable, @ptrCast(self.vtable)).put_DisconnectTime(@as(*const ITsSbSession, @ptrCast(self)), time_);
            }
            pub inline fn getInitialProgram(self: *const T, app_: ?*?BSTR) HRESULT {
                return @as(*const ITsSbSession.VTable, @ptrCast(self.vtable)).get_InitialProgram(@as(*const ITsSbSession, @ptrCast(self)), app_);
            }
            pub inline fn putInitialProgram(self: *const T, application_: ?BSTR) HRESULT {
                return @as(*const ITsSbSession.VTable, @ptrCast(self.vtable)).put_InitialProgram(@as(*const ITsSbSession, @ptrCast(self)), application_);
            }
            pub inline fn getClientDisplay(self: *const T, p_client_display_: ?*CLIENT_DISPLAY) HRESULT {
                return @as(*const ITsSbSession.VTable, @ptrCast(self.vtable)).get_ClientDisplay(@as(*const ITsSbSession, @ptrCast(self)), p_client_display_);
            }
            pub inline fn putClientDisplay(self: *const T, p_client_display_: CLIENT_DISPLAY) HRESULT {
                return @as(*const ITsSbSession.VTable, @ptrCast(self.vtable)).put_ClientDisplay(@as(*const ITsSbSession, @ptrCast(self)), p_client_display_);
            }
            pub inline fn getProtocolType(self: *const T, p_val_: ?*u32) HRESULT {
                return @as(*const ITsSbSession.VTable, @ptrCast(self.vtable)).get_ProtocolType(@as(*const ITsSbSession, @ptrCast(self)), p_val_);
            }
            pub inline fn putProtocolType(self: *const T, val_: u32) HRESULT {
                return @as(*const ITsSbSession.VTable, @ptrCast(self.vtable)).put_ProtocolType(@as(*const ITsSbSession, @ptrCast(self)), val_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbResourceNotification_Value = Guid.initString("65d3e85a-c39b-11dc-b92d-3cd255d89593");
pub const IID_ITsSbResourceNotification = &IID_ITsSbResourceNotification_Value;
pub const ITsSbResourceNotification = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NotifySessionChange: *const fn (
            self: *const ITsSbResourceNotification,
            change_type: TSSESSION_STATE,
            p_session: ?*ITsSbSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyTargetChange: *const fn (
            self: *const ITsSbResourceNotification,
            target_change_type: u32,
            p_target: ?*ITsSbTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyClientConnectionStateChange: *const fn (
            self: *const ITsSbResourceNotification,
            change_type: CONNECTION_CHANGE_NOTIFICATION,
            p_connection: ?*ITsSbClientConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn notifySessionChange(self: *const T, change_type_: TSSESSION_STATE, p_session_: ?*ITsSbSession) HRESULT {
                return @as(*const ITsSbResourceNotification.VTable, @ptrCast(self.vtable)).NotifySessionChange(@as(*const ITsSbResourceNotification, @ptrCast(self)), change_type_, p_session_);
            }
            pub inline fn notifyTargetChange(self: *const T, target_change_type_: u32, p_target_: ?*ITsSbTarget) HRESULT {
                return @as(*const ITsSbResourceNotification.VTable, @ptrCast(self.vtable)).NotifyTargetChange(@as(*const ITsSbResourceNotification, @ptrCast(self)), target_change_type_, p_target_);
            }
            pub inline fn notifyClientConnectionStateChange(self: *const T, change_type_: CONNECTION_CHANGE_NOTIFICATION, p_connection_: ?*ITsSbClientConnection) HRESULT {
                return @as(*const ITsSbResourceNotification.VTable, @ptrCast(self.vtable)).NotifyClientConnectionStateChange(@as(*const ITsSbResourceNotification, @ptrCast(self)), change_type_, p_connection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbResourceNotificationEx_Value = Guid.initString("a8a47fde-ca91-44d2-b897-3aa28a43b2b7");
pub const IID_ITsSbResourceNotificationEx = &IID_ITsSbResourceNotificationEx_Value;
pub const ITsSbResourceNotificationEx = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        NotifySessionChangeEx: *const fn (
            self: *const ITsSbResourceNotificationEx,
            target_name: ?BSTR,
            user_name: ?BSTR,
            domain: ?BSTR,
            session_id: u32,
            session_state: TSSESSION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyTargetChangeEx: *const fn (
            self: *const ITsSbResourceNotificationEx,
            target_name: ?BSTR,
            target_change_type: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyClientConnectionStateChangeEx: *const fn (
            self: *const ITsSbResourceNotificationEx,
            user_name: ?BSTR,
            domain: ?BSTR,
            initial_program: ?BSTR,
            pool_name: ?BSTR,
            target_name: ?BSTR,
            connection_change_type: CONNECTION_CHANGE_NOTIFICATION,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn notifySessionChangeEx(self: *const T, target_name_: ?BSTR, user_name_: ?BSTR, domain_: ?BSTR, session_id_: u32, session_state_: TSSESSION_STATE) HRESULT {
                return @as(*const ITsSbResourceNotificationEx.VTable, @ptrCast(self.vtable)).NotifySessionChangeEx(@as(*const ITsSbResourceNotificationEx, @ptrCast(self)), target_name_, user_name_, domain_, session_id_, session_state_);
            }
            pub inline fn notifyTargetChangeEx(self: *const T, target_name_: ?BSTR, target_change_type_: u32) HRESULT {
                return @as(*const ITsSbResourceNotificationEx.VTable, @ptrCast(self.vtable)).NotifyTargetChangeEx(@as(*const ITsSbResourceNotificationEx, @ptrCast(self)), target_name_, target_change_type_);
            }
            pub inline fn notifyClientConnectionStateChangeEx(self: *const T, user_name_: ?BSTR, domain_: ?BSTR, initial_program_: ?BSTR, pool_name_: ?BSTR, target_name_: ?BSTR, connection_change_type_: CONNECTION_CHANGE_NOTIFICATION) HRESULT {
                return @as(*const ITsSbResourceNotificationEx.VTable, @ptrCast(self.vtable)).NotifyClientConnectionStateChangeEx(@as(*const ITsSbResourceNotificationEx, @ptrCast(self)), user_name_, domain_, initial_program_, pool_name_, target_name_, connection_change_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbTaskInfo_Value = Guid.initString("523d1083-89be-48dd-99ea-04e82ffa7265");
pub const IID_ITsSbTaskInfo = &IID_ITsSbTaskInfo_Value;
pub const ITsSbTaskInfo = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TargetId: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTaskInfo,
            p_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StartTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTaskInfo,
            p_start_time: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EndTime: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTaskInfo,
            p_end_time: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Deadline: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTaskInfo,
            p_deadline: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Identifier: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTaskInfo,
            p_identifier: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Label: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTaskInfo,
            p_label: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Context: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTaskInfo,
            p_context: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Plugin: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTaskInfo,
            p_plugin: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbTaskInfo,
            p_status: ?*RDV_TASK_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getTargetId(self: *const T, p_name_: ?*?BSTR) HRESULT {
                return @as(*const ITsSbTaskInfo.VTable, @ptrCast(self.vtable)).get_TargetId(@as(*const ITsSbTaskInfo, @ptrCast(self)), p_name_);
            }
            pub inline fn getStartTime(self: *const T, p_start_time_: ?*FILETIME) HRESULT {
                return @as(*const ITsSbTaskInfo.VTable, @ptrCast(self.vtable)).get_StartTime(@as(*const ITsSbTaskInfo, @ptrCast(self)), p_start_time_);
            }
            pub inline fn getEndTime(self: *const T, p_end_time_: ?*FILETIME) HRESULT {
                return @as(*const ITsSbTaskInfo.VTable, @ptrCast(self.vtable)).get_EndTime(@as(*const ITsSbTaskInfo, @ptrCast(self)), p_end_time_);
            }
            pub inline fn getDeadline(self: *const T, p_deadline_: ?*FILETIME) HRESULT {
                return @as(*const ITsSbTaskInfo.VTable, @ptrCast(self.vtable)).get_Deadline(@as(*const ITsSbTaskInfo, @ptrCast(self)), p_deadline_);
            }
            pub inline fn getIdentifier(self: *const T, p_identifier_: ?*?BSTR) HRESULT {
                return @as(*const ITsSbTaskInfo.VTable, @ptrCast(self.vtable)).get_Identifier(@as(*const ITsSbTaskInfo, @ptrCast(self)), p_identifier_);
            }
            pub inline fn getLabel(self: *const T, p_label_: ?*?BSTR) HRESULT {
                return @as(*const ITsSbTaskInfo.VTable, @ptrCast(self.vtable)).get_Label(@as(*const ITsSbTaskInfo, @ptrCast(self)), p_label_);
            }
            pub inline fn getContext(self: *const T, p_context_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const ITsSbTaskInfo.VTable, @ptrCast(self.vtable)).get_Context(@as(*const ITsSbTaskInfo, @ptrCast(self)), p_context_);
            }
            pub inline fn getPlugin(self: *const T, p_plugin_: ?*?BSTR) HRESULT {
                return @as(*const ITsSbTaskInfo.VTable, @ptrCast(self.vtable)).get_Plugin(@as(*const ITsSbTaskInfo, @ptrCast(self)), p_plugin_);
            }
            pub inline fn getStatus(self: *const T, p_status_: ?*RDV_TASK_STATUS) HRESULT {
                return @as(*const ITsSbTaskInfo.VTable, @ptrCast(self.vtable)).get_Status(@as(*const ITsSbTaskInfo, @ptrCast(self)), p_status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbTaskPlugin_Value = Guid.initString("fa22ef0f-8705-41be-93bc-44bdbcf1c9c4");
pub const IID_ITsSbTaskPlugin = &IID_ITsSbTaskPlugin_Value;
pub const ITsSbTaskPlugin = extern struct {
    pub const VTable = extern struct {
        base: ITsSbPlugin.VTable,
        InitializeTaskPlugin: *const fn (
            self: *const ITsSbTaskPlugin,
            p_i_ts_sb_task_plugin_notify_sink: ?*ITsSbTaskPluginNotifySink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTaskQueue: *const fn (
            self: *const ITsSbTaskPlugin,
            psz_host_name: ?BSTR,
            sb_task_info_size: u32,
            p_i_ts_sb_task_info: [*]?*ITsSbTaskInfo,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITsSbPlugin.MethodMixin(T);
            pub inline fn initializeTaskPlugin(self: *const T, p_i_ts_sb_task_plugin_notify_sink_: ?*ITsSbTaskPluginNotifySink) HRESULT {
                return @as(*const ITsSbTaskPlugin.VTable, @ptrCast(self.vtable)).InitializeTaskPlugin(@as(*const ITsSbTaskPlugin, @ptrCast(self)), p_i_ts_sb_task_plugin_notify_sink_);
            }
            pub inline fn setTaskQueue(self: *const T, psz_host_name_: ?BSTR, sb_task_info_size_: u32, p_i_ts_sb_task_info_: [*]?*ITsSbTaskInfo) HRESULT {
                return @as(*const ITsSbTaskPlugin.VTable, @ptrCast(self.vtable)).SetTaskQueue(@as(*const ITsSbTaskPlugin, @ptrCast(self)), psz_host_name_, sb_task_info_size_, p_i_ts_sb_task_info_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbPropertySet_Value = Guid.initString("5c025171-bb1e-4baf-a212-6d5e9774b33b");
pub const IID_ITsSbPropertySet = &IID_ITsSbPropertySet_Value;
pub const ITsSbPropertySet = extern struct {
    pub const VTable = extern struct {
        base: IPropertyBag.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IPropertyBag.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbPluginPropertySet_Value = Guid.initString("95006e34-7eff-4b6c-bb40-49a4fda7cea6");
pub const IID_ITsSbPluginPropertySet = &IID_ITsSbPluginPropertySet_Value;
pub const ITsSbPluginPropertySet = extern struct {
    pub const VTable = extern struct {
        base: ITsSbPropertySet.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITsSbPropertySet.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbClientConnectionPropertySet_Value = Guid.initString("e51995b0-46d6-11dd-aa21-cedc55d89593");
pub const IID_ITsSbClientConnectionPropertySet = &IID_ITsSbClientConnectionPropertySet_Value;
pub const ITsSbClientConnectionPropertySet = extern struct {
    pub const VTable = extern struct {
        base: ITsSbPropertySet.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITsSbPropertySet.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbTargetPropertySet_Value = Guid.initString("f7bda5d6-994c-4e11-a079-2763b61830ac");
pub const IID_ITsSbTargetPropertySet = &IID_ITsSbTargetPropertySet_Value;
pub const ITsSbTargetPropertySet = extern struct {
    pub const VTable = extern struct {
        base: ITsSbPropertySet.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITsSbPropertySet.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbEnvironmentPropertySet_Value = Guid.initString("d0d1bf7e-7acf-11dd-a243-e51156d89593");
pub const IID_ITsSbEnvironmentPropertySet = &IID_ITsSbEnvironmentPropertySet_Value;
pub const ITsSbEnvironmentPropertySet = extern struct {
    pub const VTable = extern struct {
        base: ITsSbPropertySet.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITsSbPropertySet.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbBaseNotifySink_Value = Guid.initString("808a6537-1282-4989-9e09-f43938b71722");
pub const IID_ITsSbBaseNotifySink = &IID_ITsSbBaseNotifySink_Value;
pub const ITsSbBaseNotifySink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnError: *const fn (
            self: *const ITsSbBaseNotifySink,
            hr_error: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnReportStatus: *const fn (
            self: *const ITsSbBaseNotifySink,
            message_type: CLIENT_MESSAGE_TYPE,
            message_i_d: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onError(self: *const T, hr_error_: HRESULT) HRESULT {
                return @as(*const ITsSbBaseNotifySink.VTable, @ptrCast(self.vtable)).OnError(@as(*const ITsSbBaseNotifySink, @ptrCast(self)), hr_error_);
            }
            pub inline fn onReportStatus(self: *const T, message_type_: CLIENT_MESSAGE_TYPE, message_i_d_: u32) HRESULT {
                return @as(*const ITsSbBaseNotifySink.VTable, @ptrCast(self.vtable)).OnReportStatus(@as(*const ITsSbBaseNotifySink, @ptrCast(self)), message_type_, message_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbPluginNotifySink_Value = Guid.initString("44dfe30b-c3be-40f5-bf82-7a95bb795adf");
pub const IID_ITsSbPluginNotifySink = &IID_ITsSbPluginNotifySink_Value;
pub const ITsSbPluginNotifySink = extern struct {
    pub const VTable = extern struct {
        base: ITsSbBaseNotifySink.VTable,
        OnInitialized: *const fn (
            self: *const ITsSbPluginNotifySink,
            hr: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnTerminated: *const fn (
            self: *const ITsSbPluginNotifySink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITsSbBaseNotifySink.MethodMixin(T);
            pub inline fn onInitialized(self: *const T, hr_: HRESULT) HRESULT {
                return @as(*const ITsSbPluginNotifySink.VTable, @ptrCast(self.vtable)).OnInitialized(@as(*const ITsSbPluginNotifySink, @ptrCast(self)), hr_);
            }
            pub inline fn onTerminated(self: *const T) HRESULT {
                return @as(*const ITsSbPluginNotifySink.VTable, @ptrCast(self.vtable)).OnTerminated(@as(*const ITsSbPluginNotifySink, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbLoadBalancingNotifySink_Value = Guid.initString("5f8a8297-3244-4e6a-958a-27c822c1e141");
pub const IID_ITsSbLoadBalancingNotifySink = &IID_ITsSbLoadBalancingNotifySink_Value;
pub const ITsSbLoadBalancingNotifySink = extern struct {
    pub const VTable = extern struct {
        base: ITsSbBaseNotifySink.VTable,
        OnGetMostSuitableTarget: *const fn (
            self: *const ITsSbLoadBalancingNotifySink,
            p_l_b_result: ?*ITsSbLoadBalanceResult,
            f_is_new_connection: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITsSbBaseNotifySink.MethodMixin(T);
            pub inline fn onGetMostSuitableTarget(self: *const T, p_l_b_result_: ?*ITsSbLoadBalanceResult, f_is_new_connection_: BOOL) HRESULT {
                return @as(*const ITsSbLoadBalancingNotifySink.VTable, @ptrCast(self.vtable)).OnGetMostSuitableTarget(@as(*const ITsSbLoadBalancingNotifySink, @ptrCast(self)), p_l_b_result_, f_is_new_connection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbPlacementNotifySink_Value = Guid.initString("68a0c487-2b4f-46c2-94a1-6ce685183634");
pub const IID_ITsSbPlacementNotifySink = &IID_ITsSbPlacementNotifySink_Value;
pub const ITsSbPlacementNotifySink = extern struct {
    pub const VTable = extern struct {
        base: ITsSbBaseNotifySink.VTable,
        OnQueryEnvironmentCompleted: *const fn (
            self: *const ITsSbPlacementNotifySink,
            p_environment: ?*ITsSbEnvironment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITsSbBaseNotifySink.MethodMixin(T);
            pub inline fn onQueryEnvironmentCompleted(self: *const T, p_environment_: ?*ITsSbEnvironment) HRESULT {
                return @as(*const ITsSbPlacementNotifySink.VTable, @ptrCast(self.vtable)).OnQueryEnvironmentCompleted(@as(*const ITsSbPlacementNotifySink, @ptrCast(self)), p_environment_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbOrchestrationNotifySink_Value = Guid.initString("36c37d61-926b-442f-bca5-118c6d50dcf2");
pub const IID_ITsSbOrchestrationNotifySink = &IID_ITsSbOrchestrationNotifySink_Value;
pub const ITsSbOrchestrationNotifySink = extern struct {
    pub const VTable = extern struct {
        base: ITsSbBaseNotifySink.VTable,
        OnReadyToConnect: *const fn (
            self: *const ITsSbOrchestrationNotifySink,
            p_target: ?*ITsSbTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITsSbBaseNotifySink.MethodMixin(T);
            pub inline fn onReadyToConnect(self: *const T, p_target_: ?*ITsSbTarget) HRESULT {
                return @as(*const ITsSbOrchestrationNotifySink.VTable, @ptrCast(self.vtable)).OnReadyToConnect(@as(*const ITsSbOrchestrationNotifySink, @ptrCast(self)), p_target_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbTaskPluginNotifySink_Value = Guid.initString("6aaf899e-c2ec-45ee-aa37-45e60895261a");
pub const IID_ITsSbTaskPluginNotifySink = &IID_ITsSbTaskPluginNotifySink_Value;
pub const ITsSbTaskPluginNotifySink = extern struct {
    pub const VTable = extern struct {
        base: ITsSbBaseNotifySink.VTable,
        OnSetTaskTime: *const fn (
            self: *const ITsSbTaskPluginNotifySink,
            sz_target_name: ?BSTR,
            task_start_time: FILETIME,
            task_end_time: FILETIME,
            task_deadline: FILETIME,
            sz_task_label: ?BSTR,
            sz_task_identifier: ?BSTR,
            sz_task_plugin: ?BSTR,
            dw_task_status: u32,
            sa_context: ?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDeleteTaskTime: *const fn (
            self: *const ITsSbTaskPluginNotifySink,
            sz_target_name: ?BSTR,
            sz_task_identifier: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnUpdateTaskStatus: *const fn (
            self: *const ITsSbTaskPluginNotifySink,
            sz_target_name: ?BSTR,
            task_identifier: ?BSTR,
            task_status: RDV_TASK_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnReportTasks: *const fn (
            self: *const ITsSbTaskPluginNotifySink,
            sz_host_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITsSbBaseNotifySink.MethodMixin(T);
            pub inline fn onSetTaskTime(self: *const T, sz_target_name_: ?BSTR, task_start_time_: FILETIME, task_end_time_: FILETIME, task_deadline_: FILETIME, sz_task_label_: ?BSTR, sz_task_identifier_: ?BSTR, sz_task_plugin_: ?BSTR, dw_task_status_: u32, sa_context_: ?*SAFEARRAY) HRESULT {
                return @as(*const ITsSbTaskPluginNotifySink.VTable, @ptrCast(self.vtable)).OnSetTaskTime(@as(*const ITsSbTaskPluginNotifySink, @ptrCast(self)), sz_target_name_, task_start_time_, task_end_time_, task_deadline_, sz_task_label_, sz_task_identifier_, sz_task_plugin_, dw_task_status_, sa_context_);
            }
            pub inline fn onDeleteTaskTime(self: *const T, sz_target_name_: ?BSTR, sz_task_identifier_: ?BSTR) HRESULT {
                return @as(*const ITsSbTaskPluginNotifySink.VTable, @ptrCast(self.vtable)).OnDeleteTaskTime(@as(*const ITsSbTaskPluginNotifySink, @ptrCast(self)), sz_target_name_, sz_task_identifier_);
            }
            pub inline fn onUpdateTaskStatus(self: *const T, sz_target_name_: ?BSTR, task_identifier_: ?BSTR, task_status_: RDV_TASK_STATUS) HRESULT {
                return @as(*const ITsSbTaskPluginNotifySink.VTable, @ptrCast(self.vtable)).OnUpdateTaskStatus(@as(*const ITsSbTaskPluginNotifySink, @ptrCast(self)), sz_target_name_, task_identifier_, task_status_);
            }
            pub inline fn onReportTasks(self: *const T, sz_host_name_: ?BSTR) HRESULT {
                return @as(*const ITsSbTaskPluginNotifySink.VTable, @ptrCast(self.vtable)).OnReportTasks(@as(*const ITsSbTaskPluginNotifySink, @ptrCast(self)), sz_host_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbClientConnection_Value = Guid.initString("18857499-ad61-4b1b-b7df-cbcd41fb8338");
pub const IID_ITsSbClientConnection = &IID_ITsSbClientConnection_Value;
pub const ITsSbClientConnection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbClientConnection,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Domain: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbClientConnection,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InitialProgram: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbClientConnection,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LoadBalanceResult: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbClientConnection,
            pp_val: ?*?*ITsSbLoadBalanceResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FarmName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbClientConnection,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PutContext: *const fn (
            self: *const ITsSbClientConnection,
            context_id: ?BSTR,
            context: VARIANT,
            existing_context: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContext: *const fn (
            self: *const ITsSbClientConnection,
            context_id: ?BSTR,
            context: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Environment: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbClientConnection,
            pp_environment: ?*?*ITsSbEnvironment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ConnectionError: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbClientConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SamUserAccount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbClientConnection,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClientConnectionPropertySet: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbClientConnection,
            pp_property_set: ?*?*ITsSbClientConnectionPropertySet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsFirstAssignment: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbClientConnection,
            pp_val: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RdFarmType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbClientConnection,
            p_rd_farm_type: ?*RD_FARM_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserSidString: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ITsSbClientConnection,
            psz_user_sid_string: ?*?*i8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDisconnectedSession: *const fn (
            self: *const ITsSbClientConnection,
            pp_session: ?*?*ITsSbSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getUserName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const ITsSbClientConnection.VTable, @ptrCast(self.vtable)).get_UserName(@as(*const ITsSbClientConnection, @ptrCast(self)), p_val_);
            }
            pub inline fn getDomain(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const ITsSbClientConnection.VTable, @ptrCast(self.vtable)).get_Domain(@as(*const ITsSbClientConnection, @ptrCast(self)), p_val_);
            }
            pub inline fn getInitialProgram(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const ITsSbClientConnection.VTable, @ptrCast(self.vtable)).get_InitialProgram(@as(*const ITsSbClientConnection, @ptrCast(self)), p_val_);
            }
            pub inline fn getLoadBalanceResult(self: *const T, pp_val_: ?*?*ITsSbLoadBalanceResult) HRESULT {
                return @as(*const ITsSbClientConnection.VTable, @ptrCast(self.vtable)).get_LoadBalanceResult(@as(*const ITsSbClientConnection, @ptrCast(self)), pp_val_);
            }
            pub inline fn getFarmName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const ITsSbClientConnection.VTable, @ptrCast(self.vtable)).get_FarmName(@as(*const ITsSbClientConnection, @ptrCast(self)), p_val_);
            }
            pub inline fn putContext(self: *const T, context_id_: ?BSTR, context_: VARIANT, existing_context_: ?*VARIANT) HRESULT {
                return @as(*const ITsSbClientConnection.VTable, @ptrCast(self.vtable)).PutContext(@as(*const ITsSbClientConnection, @ptrCast(self)), context_id_, context_, existing_context_);
            }
            pub inline fn getContext(self: *const T, context_id_: ?BSTR, context_: ?*VARIANT) HRESULT {
                return @as(*const ITsSbClientConnection.VTable, @ptrCast(self.vtable)).GetContext(@as(*const ITsSbClientConnection, @ptrCast(self)), context_id_, context_);
            }
            pub inline fn getEnvironment(self: *const T, pp_environment_: ?*?*ITsSbEnvironment) HRESULT {
                return @as(*const ITsSbClientConnection.VTable, @ptrCast(self.vtable)).get_Environment(@as(*const ITsSbClientConnection, @ptrCast(self)), pp_environment_);
            }
            pub inline fn getConnectionError(self: *const T) HRESULT {
                return @as(*const ITsSbClientConnection.VTable, @ptrCast(self.vtable)).get_ConnectionError(@as(*const ITsSbClientConnection, @ptrCast(self)));
            }
            pub inline fn getSamUserAccount(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const ITsSbClientConnection.VTable, @ptrCast(self.vtable)).get_SamUserAccount(@as(*const ITsSbClientConnection, @ptrCast(self)), p_val_);
            }
            pub inline fn getClientConnectionPropertySet(self: *const T, pp_property_set_: ?*?*ITsSbClientConnectionPropertySet) HRESULT {
                return @as(*const ITsSbClientConnection.VTable, @ptrCast(self.vtable)).get_ClientConnectionPropertySet(@as(*const ITsSbClientConnection, @ptrCast(self)), pp_property_set_);
            }
            pub inline fn getIsFirstAssignment(self: *const T, pp_val_: ?*BOOL) HRESULT {
                return @as(*const ITsSbClientConnection.VTable, @ptrCast(self.vtable)).get_IsFirstAssignment(@as(*const ITsSbClientConnection, @ptrCast(self)), pp_val_);
            }
            pub inline fn getRdFarmType(self: *const T, p_rd_farm_type_: ?*RD_FARM_TYPE) HRESULT {
                return @as(*const ITsSbClientConnection.VTable, @ptrCast(self.vtable)).get_RdFarmType(@as(*const ITsSbClientConnection, @ptrCast(self)), p_rd_farm_type_);
            }
            pub inline fn getUserSidString(self: *const T, psz_user_sid_string_: ?*?*i8) HRESULT {
                return @as(*const ITsSbClientConnection.VTable, @ptrCast(self.vtable)).get_UserSidString(@as(*const ITsSbClientConnection, @ptrCast(self)), psz_user_sid_string_);
            }
            pub inline fn getDisconnectedSession(self: *const T, pp_session_: ?*?*ITsSbSession) HRESULT {
                return @as(*const ITsSbClientConnection.VTable, @ptrCast(self.vtable)).GetDisconnectedSession(@as(*const ITsSbClientConnection, @ptrCast(self)), pp_session_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbProvider_Value = Guid.initString("87a4098f-6d7b-44dd-bc17-8ce44e370d52");
pub const IID_ITsSbProvider = &IID_ITsSbProvider_Value;
pub const ITsSbProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateTargetObject: *const fn (
            self: *const ITsSbProvider,
            target_name: ?BSTR,
            environment_name: ?BSTR,
            pp_target: ?*?*ITsSbTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateLoadBalanceResultObject: *const fn (
            self: *const ITsSbProvider,
            target_name: ?BSTR,
            pp_l_b_result: ?*?*ITsSbLoadBalanceResult,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSessionObject: *const fn (
            self: *const ITsSbProvider,
            target_name: ?BSTR,
            user_name: ?BSTR,
            domain: ?BSTR,
            session_id: u32,
            pp_session: ?*?*ITsSbSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreatePluginPropertySet: *const fn (
            self: *const ITsSbProvider,
            pp_property_set: ?*?*ITsSbPluginPropertySet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateTargetPropertySetObject: *const fn (
            self: *const ITsSbProvider,
            pp_property_set: ?*?*ITsSbTargetPropertySet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEnvironmentObject: *const fn (
            self: *const ITsSbProvider,
            name: ?BSTR,
            server_weight: u32,
            pp_environment: ?*?*ITsSbEnvironment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResourcePluginStore: *const fn (
            self: *const ITsSbProvider,
            pp_store: ?*?*ITsSbResourcePluginStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFilterPluginStore: *const fn (
            self: *const ITsSbProvider,
            pp_store: ?*?*ITsSbFilterPluginStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RegisterForNotification: *const fn (
            self: *const ITsSbProvider,
            notification_type: u32,
            resource_to_monitor: ?BSTR,
            p_plugin_notification: ?*ITsSbResourceNotification,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnRegisterForNotification: *const fn (
            self: *const ITsSbProvider,
            notification_type: u32,
            resource_to_monitor: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInstanceOfGlobalStore: *const fn (
            self: *const ITsSbProvider,
            pp_global_store: ?*?*ITsSbGlobalStore,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateEnvironmentPropertySetObject: *const fn (
            self: *const ITsSbProvider,
            pp_property_set: ?*?*ITsSbEnvironmentPropertySet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createTargetObject(self: *const T, target_name_: ?BSTR, environment_name_: ?BSTR, pp_target_: ?*?*ITsSbTarget) HRESULT {
                return @as(*const ITsSbProvider.VTable, @ptrCast(self.vtable)).CreateTargetObject(@as(*const ITsSbProvider, @ptrCast(self)), target_name_, environment_name_, pp_target_);
            }
            pub inline fn createLoadBalanceResultObject(self: *const T, target_name_: ?BSTR, pp_l_b_result_: ?*?*ITsSbLoadBalanceResult) HRESULT {
                return @as(*const ITsSbProvider.VTable, @ptrCast(self.vtable)).CreateLoadBalanceResultObject(@as(*const ITsSbProvider, @ptrCast(self)), target_name_, pp_l_b_result_);
            }
            pub inline fn createSessionObject(self: *const T, target_name_: ?BSTR, user_name_: ?BSTR, domain_: ?BSTR, session_id_: u32, pp_session_: ?*?*ITsSbSession) HRESULT {
                return @as(*const ITsSbProvider.VTable, @ptrCast(self.vtable)).CreateSessionObject(@as(*const ITsSbProvider, @ptrCast(self)), target_name_, user_name_, domain_, session_id_, pp_session_);
            }
            pub inline fn createPluginPropertySet(self: *const T, pp_property_set_: ?*?*ITsSbPluginPropertySet) HRESULT {
                return @as(*const ITsSbProvider.VTable, @ptrCast(self.vtable)).CreatePluginPropertySet(@as(*const ITsSbProvider, @ptrCast(self)), pp_property_set_);
            }
            pub inline fn createTargetPropertySetObject(self: *const T, pp_property_set_: ?*?*ITsSbTargetPropertySet) HRESULT {
                return @as(*const ITsSbProvider.VTable, @ptrCast(self.vtable)).CreateTargetPropertySetObject(@as(*const ITsSbProvider, @ptrCast(self)), pp_property_set_);
            }
            pub inline fn createEnvironmentObject(self: *const T, name_: ?BSTR, server_weight_: u32, pp_environment_: ?*?*ITsSbEnvironment) HRESULT {
                return @as(*const ITsSbProvider.VTable, @ptrCast(self.vtable)).CreateEnvironmentObject(@as(*const ITsSbProvider, @ptrCast(self)), name_, server_weight_, pp_environment_);
            }
            pub inline fn getResourcePluginStore(self: *const T, pp_store_: ?*?*ITsSbResourcePluginStore) HRESULT {
                return @as(*const ITsSbProvider.VTable, @ptrCast(self.vtable)).GetResourcePluginStore(@as(*const ITsSbProvider, @ptrCast(self)), pp_store_);
            }
            pub inline fn getFilterPluginStore(self: *const T, pp_store_: ?*?*ITsSbFilterPluginStore) HRESULT {
                return @as(*const ITsSbProvider.VTable, @ptrCast(self.vtable)).GetFilterPluginStore(@as(*const ITsSbProvider, @ptrCast(self)), pp_store_);
            }
            pub inline fn registerForNotification(self: *const T, notification_type_: u32, resource_to_monitor_: ?BSTR, p_plugin_notification_: ?*ITsSbResourceNotification) HRESULT {
                return @as(*const ITsSbProvider.VTable, @ptrCast(self.vtable)).RegisterForNotification(@as(*const ITsSbProvider, @ptrCast(self)), notification_type_, resource_to_monitor_, p_plugin_notification_);
            }
            pub inline fn unRegisterForNotification(self: *const T, notification_type_: u32, resource_to_monitor_: ?BSTR) HRESULT {
                return @as(*const ITsSbProvider.VTable, @ptrCast(self.vtable)).UnRegisterForNotification(@as(*const ITsSbProvider, @ptrCast(self)), notification_type_, resource_to_monitor_);
            }
            pub inline fn getInstanceOfGlobalStore(self: *const T, pp_global_store_: ?*?*ITsSbGlobalStore) HRESULT {
                return @as(*const ITsSbProvider.VTable, @ptrCast(self.vtable)).GetInstanceOfGlobalStore(@as(*const ITsSbProvider, @ptrCast(self)), pp_global_store_);
            }
            pub inline fn createEnvironmentPropertySetObject(self: *const T, pp_property_set_: ?*?*ITsSbEnvironmentPropertySet) HRESULT {
                return @as(*const ITsSbProvider.VTable, @ptrCast(self.vtable)).CreateEnvironmentPropertySetObject(@as(*const ITsSbProvider, @ptrCast(self)), pp_property_set_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbResourcePluginStore_Value = Guid.initString("5c38f65f-bcf1-4036-a6bf-9e3cccae0b63");
pub const IID_ITsSbResourcePluginStore = &IID_ITsSbResourcePluginStore_Value;
pub const ITsSbResourcePluginStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryTarget: *const fn (
            self: *const ITsSbResourcePluginStore,
            target_name: ?BSTR,
            farm_name: ?BSTR,
            pp_target: ?*?*ITsSbTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QuerySessionBySessionId: *const fn (
            self: *const ITsSbResourcePluginStore,
            dw_session_id: u32,
            target_name: ?BSTR,
            pp_session: ?*?*ITsSbSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddTargetToStore: *const fn (
            self: *const ITsSbResourcePluginStore,
            p_target: ?*ITsSbTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddSessionToStore: *const fn (
            self: *const ITsSbResourcePluginStore,
            p_session: ?*ITsSbSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddEnvironmentToStore: *const fn (
            self: *const ITsSbResourcePluginStore,
            p_environment: ?*ITsSbEnvironment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveEnvironmentFromStore: *const fn (
            self: *const ITsSbResourcePluginStore,
            environment_name: ?BSTR,
            b_ignore_owner: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateFarms: *const fn (
            self: *const ITsSbResourcePluginStore,
            pdw_count: ?*u32,
            p_val: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryEnvironment: *const fn (
            self: *const ITsSbResourcePluginStore,
            environment_name: ?BSTR,
            pp_environment: ?*?*ITsSbEnvironment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateEnvironments: *const fn (
            self: *const ITsSbResourcePluginStore,
            pdw_count: ?*u32,
            p_val: [*]?*?*ITsSbEnvironment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveTarget: *const fn (
            self: *const ITsSbResourcePluginStore,
            p_target: ?*ITsSbTarget,
            b_force_write: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveEnvironment: *const fn (
            self: *const ITsSbResourcePluginStore,
            p_environment: ?*ITsSbEnvironment,
            b_force_write: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SaveSession: *const fn (
            self: *const ITsSbResourcePluginStore,
            p_session: ?*ITsSbSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTargetProperty: *const fn (
            self: *const ITsSbResourcePluginStore,
            target_name: ?BSTR,
            property_name: ?BSTR,
            p_property: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnvironmentProperty: *const fn (
            self: *const ITsSbResourcePluginStore,
            environment_name: ?BSTR,
            property_name: ?BSTR,
            p_property: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTargetState: *const fn (
            self: *const ITsSbResourcePluginStore,
            target_name: ?BSTR,
            new_state: TARGET_STATE,
            p_old_state: ?*TARGET_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSessionState: *const fn (
            self: *const ITsSbResourcePluginStore,
            sb_session: ?*ITsSbSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateTargets: *const fn (
            self: *const ITsSbResourcePluginStore,
            farm_name: ?BSTR,
            env_name: ?BSTR,
            sort_by_field_id: TS_SB_SORT_BY,
            sorty_by_prop_name: ?BSTR,
            pdw_count: ?*u32,
            p_val: [*]?*?*ITsSbTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateSessions: *const fn (
            self: *const ITsSbResourcePluginStore,
            target_name: ?BSTR,
            user_name: ?BSTR,
            user_domain: ?BSTR,
            pool_name: ?BSTR,
            initial_program: ?BSTR,
            p_session_state: ?*TSSESSION_STATE,
            pdw_count: ?*u32,
            pp_val: [*]?*?*ITsSbSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFarmProperty: *const fn (
            self: *const ITsSbResourcePluginStore,
            farm_name: ?BSTR,
            property_name: ?BSTR,
            p_var_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteTarget: *const fn (
            self: *const ITsSbResourcePluginStore,
            target_name: ?BSTR,
            host_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetTargetPropertyWithVersionCheck: *const fn (
            self: *const ITsSbResourcePluginStore,
            p_target: ?*ITsSbTarget,
            property_name: ?BSTR,
            p_property: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetEnvironmentPropertyWithVersionCheck: *const fn (
            self: *const ITsSbResourcePluginStore,
            p_environment: ?*ITsSbEnvironment,
            property_name: ?BSTR,
            p_property: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AcquireTargetLock: *const fn (
            self: *const ITsSbResourcePluginStore,
            target_name: ?BSTR,
            dw_timeout: u32,
            pp_context: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseTargetLock: *const fn (
            self: *const ITsSbResourcePluginStore,
            p_context: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        TestAndSetServerState: *const fn (
            self: *const ITsSbResourcePluginStore,
            pool_name: ?BSTR,
            server_f_q_d_n: ?BSTR,
            new_state: TARGET_STATE,
            test_state: TARGET_STATE,
            p_init_state: ?*TARGET_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetServerWaitingToStart: *const fn (
            self: *const ITsSbResourcePluginStore,
            pool_name: ?BSTR,
            server_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetServerState: *const fn (
            self: *const ITsSbResourcePluginStore,
            pool_name: ?BSTR,
            server_f_q_d_n: ?BSTR,
            p_state: ?*TARGET_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetServerDrainMode: *const fn (
            self: *const ITsSbResourcePluginStore,
            server_f_q_d_n: ?BSTR,
            drain_mode: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn queryTarget(self: *const T, target_name_: ?BSTR, farm_name_: ?BSTR, pp_target_: ?*?*ITsSbTarget) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).QueryTarget(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), target_name_, farm_name_, pp_target_);
            }
            pub inline fn querySessionBySessionId(self: *const T, dw_session_id_: u32, target_name_: ?BSTR, pp_session_: ?*?*ITsSbSession) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).QuerySessionBySessionId(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), dw_session_id_, target_name_, pp_session_);
            }
            pub inline fn addTargetToStore(self: *const T, p_target_: ?*ITsSbTarget) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).AddTargetToStore(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), p_target_);
            }
            pub inline fn addSessionToStore(self: *const T, p_session_: ?*ITsSbSession) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).AddSessionToStore(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), p_session_);
            }
            pub inline fn addEnvironmentToStore(self: *const T, p_environment_: ?*ITsSbEnvironment) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).AddEnvironmentToStore(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), p_environment_);
            }
            pub inline fn removeEnvironmentFromStore(self: *const T, environment_name_: ?BSTR, b_ignore_owner_: BOOL) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).RemoveEnvironmentFromStore(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), environment_name_, b_ignore_owner_);
            }
            pub inline fn enumerateFarms(self: *const T, pdw_count_: ?*u32, p_val_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).EnumerateFarms(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), pdw_count_, p_val_);
            }
            pub inline fn queryEnvironment(self: *const T, environment_name_: ?BSTR, pp_environment_: ?*?*ITsSbEnvironment) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).QueryEnvironment(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), environment_name_, pp_environment_);
            }
            pub inline fn enumerateEnvironments(self: *const T, pdw_count_: ?*u32, p_val_: [*]?*?*ITsSbEnvironment) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).EnumerateEnvironments(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), pdw_count_, p_val_);
            }
            pub inline fn saveTarget(self: *const T, p_target_: ?*ITsSbTarget, b_force_write_: BOOL) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).SaveTarget(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), p_target_, b_force_write_);
            }
            pub inline fn saveEnvironment(self: *const T, p_environment_: ?*ITsSbEnvironment, b_force_write_: BOOL) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).SaveEnvironment(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), p_environment_, b_force_write_);
            }
            pub inline fn saveSession(self: *const T, p_session_: ?*ITsSbSession) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).SaveSession(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), p_session_);
            }
            pub inline fn setTargetProperty(self: *const T, target_name_: ?BSTR, property_name_: ?BSTR, p_property_: ?*VARIANT) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).SetTargetProperty(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), target_name_, property_name_, p_property_);
            }
            pub inline fn setEnvironmentProperty(self: *const T, environment_name_: ?BSTR, property_name_: ?BSTR, p_property_: ?*VARIANT) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).SetEnvironmentProperty(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), environment_name_, property_name_, p_property_);
            }
            pub inline fn setTargetState(self: *const T, target_name_: ?BSTR, new_state_: TARGET_STATE, p_old_state_: ?*TARGET_STATE) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).SetTargetState(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), target_name_, new_state_, p_old_state_);
            }
            pub inline fn setSessionState(self: *const T, sb_session_: ?*ITsSbSession) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).SetSessionState(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), sb_session_);
            }
            pub inline fn enumerateTargets(self: *const T, farm_name_: ?BSTR, env_name_: ?BSTR, sort_by_field_id_: TS_SB_SORT_BY, sorty_by_prop_name_: ?BSTR, pdw_count_: ?*u32, p_val_: [*]?*?*ITsSbTarget) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).EnumerateTargets(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), farm_name_, env_name_, sort_by_field_id_, sorty_by_prop_name_, pdw_count_, p_val_);
            }
            pub inline fn enumerateSessions(self: *const T, target_name_: ?BSTR, user_name_: ?BSTR, user_domain_: ?BSTR, pool_name_: ?BSTR, initial_program_: ?BSTR, p_session_state_: ?*TSSESSION_STATE, pdw_count_: ?*u32, pp_val_: [*]?*?*ITsSbSession) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).EnumerateSessions(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), target_name_, user_name_, user_domain_, pool_name_, initial_program_, p_session_state_, pdw_count_, pp_val_);
            }
            pub inline fn getFarmProperty(self: *const T, farm_name_: ?BSTR, property_name_: ?BSTR, p_var_value_: ?*VARIANT) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).GetFarmProperty(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), farm_name_, property_name_, p_var_value_);
            }
            pub inline fn deleteTarget(self: *const T, target_name_: ?BSTR, host_name_: ?BSTR) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).DeleteTarget(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), target_name_, host_name_);
            }
            pub inline fn setTargetPropertyWithVersionCheck(self: *const T, p_target_: ?*ITsSbTarget, property_name_: ?BSTR, p_property_: ?*VARIANT) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).SetTargetPropertyWithVersionCheck(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), p_target_, property_name_, p_property_);
            }
            pub inline fn setEnvironmentPropertyWithVersionCheck(self: *const T, p_environment_: ?*ITsSbEnvironment, property_name_: ?BSTR, p_property_: ?*VARIANT) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).SetEnvironmentPropertyWithVersionCheck(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), p_environment_, property_name_, p_property_);
            }
            pub inline fn acquireTargetLock(self: *const T, target_name_: ?BSTR, dw_timeout_: u32, pp_context_: ?*?*IUnknown) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).AcquireTargetLock(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), target_name_, dw_timeout_, pp_context_);
            }
            pub inline fn releaseTargetLock(self: *const T, p_context_: ?*IUnknown) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).ReleaseTargetLock(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), p_context_);
            }
            pub inline fn testAndSetServerState(self: *const T, pool_name_: ?BSTR, server_f_q_d_n_: ?BSTR, new_state_: TARGET_STATE, test_state_: TARGET_STATE, p_init_state_: ?*TARGET_STATE) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).TestAndSetServerState(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), pool_name_, server_f_q_d_n_, new_state_, test_state_, p_init_state_);
            }
            pub inline fn setServerWaitingToStart(self: *const T, pool_name_: ?BSTR, server_name_: ?BSTR) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).SetServerWaitingToStart(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), pool_name_, server_name_);
            }
            pub inline fn getServerState(self: *const T, pool_name_: ?BSTR, server_f_q_d_n_: ?BSTR, p_state_: ?*TARGET_STATE) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).GetServerState(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), pool_name_, server_f_q_d_n_, p_state_);
            }
            pub inline fn setServerDrainMode(self: *const T, server_f_q_d_n_: ?BSTR, drain_mode_: u32) HRESULT {
                return @as(*const ITsSbResourcePluginStore.VTable, @ptrCast(self.vtable)).SetServerDrainMode(@as(*const ITsSbResourcePluginStore, @ptrCast(self)), server_f_q_d_n_, drain_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbFilterPluginStore_Value = Guid.initString("85b44b0f-ed78-413f-9702-fa6d3b5ee755");
pub const IID_ITsSbFilterPluginStore = &IID_ITsSbFilterPluginStore_Value;
pub const ITsSbFilterPluginStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SaveProperties: *const fn (
            self: *const ITsSbFilterPluginStore,
            p_property_set: ?*ITsSbPropertySet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateProperties: *const fn (
            self: *const ITsSbFilterPluginStore,
            pp_property_set: ?*?*ITsSbPropertySet,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteProperties: *const fn (
            self: *const ITsSbFilterPluginStore,
            property_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn saveProperties(self: *const T, p_property_set_: ?*ITsSbPropertySet) HRESULT {
                return @as(*const ITsSbFilterPluginStore.VTable, @ptrCast(self.vtable)).SaveProperties(@as(*const ITsSbFilterPluginStore, @ptrCast(self)), p_property_set_);
            }
            pub inline fn enumerateProperties(self: *const T, pp_property_set_: ?*?*ITsSbPropertySet) HRESULT {
                return @as(*const ITsSbFilterPluginStore.VTable, @ptrCast(self.vtable)).EnumerateProperties(@as(*const ITsSbFilterPluginStore, @ptrCast(self)), pp_property_set_);
            }
            pub inline fn deleteProperties(self: *const T, property_name_: ?BSTR) HRESULT {
                return @as(*const ITsSbFilterPluginStore.VTable, @ptrCast(self.vtable)).DeleteProperties(@as(*const ITsSbFilterPluginStore, @ptrCast(self)), property_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbGlobalStore_Value = Guid.initString("9ab60f7b-bd72-4d9f-8a3a-a0ea5574e635");
pub const IID_ITsSbGlobalStore = &IID_ITsSbGlobalStore_Value;
pub const ITsSbGlobalStore = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        QueryTarget: *const fn (
            self: *const ITsSbGlobalStore,
            provider_name: ?BSTR,
            target_name: ?BSTR,
            farm_name: ?BSTR,
            pp_target: ?*?*ITsSbTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QuerySessionBySessionId: *const fn (
            self: *const ITsSbGlobalStore,
            provider_name: ?BSTR,
            dw_session_id: u32,
            target_name: ?BSTR,
            pp_session: ?*?*ITsSbSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateFarms: *const fn (
            self: *const ITsSbGlobalStore,
            provider_name: ?BSTR,
            pdw_count: ?*u32,
            p_val: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateTargets: *const fn (
            self: *const ITsSbGlobalStore,
            provider_name: ?BSTR,
            farm_name: ?BSTR,
            env_name: ?BSTR,
            pdw_count: ?*u32,
            p_val: [*]?*?*ITsSbTarget,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateEnvironmentsByProvider: *const fn (
            self: *const ITsSbGlobalStore,
            provider_name: ?BSTR,
            pdw_count: ?*u32,
            pp_val: [*]?*?*ITsSbEnvironment,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateSessions: *const fn (
            self: *const ITsSbGlobalStore,
            provider_name: ?BSTR,
            target_name: ?BSTR,
            user_name: ?BSTR,
            user_domain: ?BSTR,
            pool_name: ?BSTR,
            initial_program: ?BSTR,
            p_session_state: ?*TSSESSION_STATE,
            pdw_count: ?*u32,
            pp_val: [*]?*?*ITsSbSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetFarmProperty: *const fn (
            self: *const ITsSbGlobalStore,
            farm_name: ?BSTR,
            property_name: ?BSTR,
            p_var_value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn queryTarget(self: *const T, provider_name_: ?BSTR, target_name_: ?BSTR, farm_name_: ?BSTR, pp_target_: ?*?*ITsSbTarget) HRESULT {
                return @as(*const ITsSbGlobalStore.VTable, @ptrCast(self.vtable)).QueryTarget(@as(*const ITsSbGlobalStore, @ptrCast(self)), provider_name_, target_name_, farm_name_, pp_target_);
            }
            pub inline fn querySessionBySessionId(self: *const T, provider_name_: ?BSTR, dw_session_id_: u32, target_name_: ?BSTR, pp_session_: ?*?*ITsSbSession) HRESULT {
                return @as(*const ITsSbGlobalStore.VTable, @ptrCast(self.vtable)).QuerySessionBySessionId(@as(*const ITsSbGlobalStore, @ptrCast(self)), provider_name_, dw_session_id_, target_name_, pp_session_);
            }
            pub inline fn enumerateFarms(self: *const T, provider_name_: ?BSTR, pdw_count_: ?*u32, p_val_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const ITsSbGlobalStore.VTable, @ptrCast(self.vtable)).EnumerateFarms(@as(*const ITsSbGlobalStore, @ptrCast(self)), provider_name_, pdw_count_, p_val_);
            }
            pub inline fn enumerateTargets(self: *const T, provider_name_: ?BSTR, farm_name_: ?BSTR, env_name_: ?BSTR, pdw_count_: ?*u32, p_val_: [*]?*?*ITsSbTarget) HRESULT {
                return @as(*const ITsSbGlobalStore.VTable, @ptrCast(self.vtable)).EnumerateTargets(@as(*const ITsSbGlobalStore, @ptrCast(self)), provider_name_, farm_name_, env_name_, pdw_count_, p_val_);
            }
            pub inline fn enumerateEnvironmentsByProvider(self: *const T, provider_name_: ?BSTR, pdw_count_: ?*u32, pp_val_: [*]?*?*ITsSbEnvironment) HRESULT {
                return @as(*const ITsSbGlobalStore.VTable, @ptrCast(self.vtable)).EnumerateEnvironmentsByProvider(@as(*const ITsSbGlobalStore, @ptrCast(self)), provider_name_, pdw_count_, pp_val_);
            }
            pub inline fn enumerateSessions(self: *const T, provider_name_: ?BSTR, target_name_: ?BSTR, user_name_: ?BSTR, user_domain_: ?BSTR, pool_name_: ?BSTR, initial_program_: ?BSTR, p_session_state_: ?*TSSESSION_STATE, pdw_count_: ?*u32, pp_val_: [*]?*?*ITsSbSession) HRESULT {
                return @as(*const ITsSbGlobalStore.VTable, @ptrCast(self.vtable)).EnumerateSessions(@as(*const ITsSbGlobalStore, @ptrCast(self)), provider_name_, target_name_, user_name_, user_domain_, pool_name_, initial_program_, p_session_state_, pdw_count_, pp_val_);
            }
            pub inline fn getFarmProperty(self: *const T, farm_name_: ?BSTR, property_name_: ?BSTR, p_var_value_: ?*VARIANT) HRESULT {
                return @as(*const ITsSbGlobalStore.VTable, @ptrCast(self.vtable)).GetFarmProperty(@as(*const ITsSbGlobalStore, @ptrCast(self)), farm_name_, property_name_, p_var_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbProvisioningPluginNotifySink_Value = Guid.initString("aca87a8e-818b-4581-a032-49c3dfb9c701");
pub const IID_ITsSbProvisioningPluginNotifySink = &IID_ITsSbProvisioningPluginNotifySink_Value;
pub const ITsSbProvisioningPluginNotifySink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnJobCreated: *const fn (
            self: *const ITsSbProvisioningPluginNotifySink,
            p_vm_notify_info: ?*VM_NOTIFY_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnVirtualMachineStatusChanged: *const fn (
            self: *const ITsSbProvisioningPluginNotifySink,
            p_vm_notify_entry: ?*VM_NOTIFY_ENTRY,
            vm_notify_status: VM_NOTIFY_STATUS,
            error_code: HRESULT,
            error_descr: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnJobCompleted: *const fn (
            self: *const ITsSbProvisioningPluginNotifySink,
            result_code: HRESULT,
            result_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnJobCancelled: *const fn (
            self: *const ITsSbProvisioningPluginNotifySink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LockVirtualMachine: *const fn (
            self: *const ITsSbProvisioningPluginNotifySink,
            p_vm_notify_entry: ?*VM_NOTIFY_ENTRY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnVirtualMachineHostStatusChanged: *const fn (
            self: *const ITsSbProvisioningPluginNotifySink,
            vm_host: ?BSTR,
            vm_host_notify_status: VM_HOST_NOTIFY_STATUS,
            error_code: HRESULT,
            error_descr: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onJobCreated(self: *const T, p_vm_notify_info_: ?*VM_NOTIFY_INFO) HRESULT {
                return @as(*const ITsSbProvisioningPluginNotifySink.VTable, @ptrCast(self.vtable)).OnJobCreated(@as(*const ITsSbProvisioningPluginNotifySink, @ptrCast(self)), p_vm_notify_info_);
            }
            pub inline fn onVirtualMachineStatusChanged(self: *const T, p_vm_notify_entry_: ?*VM_NOTIFY_ENTRY, vm_notify_status_: VM_NOTIFY_STATUS, error_code_: HRESULT, error_descr_: ?BSTR) HRESULT {
                return @as(*const ITsSbProvisioningPluginNotifySink.VTable, @ptrCast(self.vtable)).OnVirtualMachineStatusChanged(@as(*const ITsSbProvisioningPluginNotifySink, @ptrCast(self)), p_vm_notify_entry_, vm_notify_status_, error_code_, error_descr_);
            }
            pub inline fn onJobCompleted(self: *const T, result_code_: HRESULT, result_description_: ?BSTR) HRESULT {
                return @as(*const ITsSbProvisioningPluginNotifySink.VTable, @ptrCast(self.vtable)).OnJobCompleted(@as(*const ITsSbProvisioningPluginNotifySink, @ptrCast(self)), result_code_, result_description_);
            }
            pub inline fn onJobCancelled(self: *const T) HRESULT {
                return @as(*const ITsSbProvisioningPluginNotifySink.VTable, @ptrCast(self.vtable)).OnJobCancelled(@as(*const ITsSbProvisioningPluginNotifySink, @ptrCast(self)));
            }
            pub inline fn lockVirtualMachine(self: *const T, p_vm_notify_entry_: ?*VM_NOTIFY_ENTRY) HRESULT {
                return @as(*const ITsSbProvisioningPluginNotifySink.VTable, @ptrCast(self.vtable)).LockVirtualMachine(@as(*const ITsSbProvisioningPluginNotifySink, @ptrCast(self)), p_vm_notify_entry_);
            }
            pub inline fn onVirtualMachineHostStatusChanged(self: *const T, vm_host_: ?BSTR, vm_host_notify_status_: VM_HOST_NOTIFY_STATUS, error_code_: HRESULT, error_descr_: ?BSTR) HRESULT {
                return @as(*const ITsSbProvisioningPluginNotifySink.VTable, @ptrCast(self.vtable)).OnVirtualMachineHostStatusChanged(@as(*const ITsSbProvisioningPluginNotifySink, @ptrCast(self)), vm_host_, vm_host_notify_status_, error_code_, error_descr_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_ITsSbProvisioning_Value = Guid.initString("2f6f0dbb-9e4f-462b-9c3f-fccc3dcb6232");
pub const IID_ITsSbProvisioning = &IID_ITsSbProvisioning_Value;
pub const ITsSbProvisioning = extern struct {
    pub const VTable = extern struct {
        base: ITsSbPlugin.VTable,
        CreateVirtualMachines: *const fn (
            self: *const ITsSbProvisioning,
            job_xml_string: ?BSTR,
            job_guid: ?BSTR,
            p_sink: ?*ITsSbProvisioningPluginNotifySink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PatchVirtualMachines: *const fn (
            self: *const ITsSbProvisioning,
            job_xml_string: ?BSTR,
            job_guid: ?BSTR,
            p_sink: ?*ITsSbProvisioningPluginNotifySink,
            p_v_m_patch_info: ?*VM_PATCH_INFO,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteVirtualMachines: *const fn (
            self: *const ITsSbProvisioning,
            job_xml_string: ?BSTR,
            job_guid: ?BSTR,
            p_sink: ?*ITsSbProvisioningPluginNotifySink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CancelJob: *const fn (
            self: *const ITsSbProvisioning,
            job_guid: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ITsSbPlugin.MethodMixin(T);
            pub inline fn createVirtualMachines(self: *const T, job_xml_string_: ?BSTR, job_guid_: ?BSTR, p_sink_: ?*ITsSbProvisioningPluginNotifySink) HRESULT {
                return @as(*const ITsSbProvisioning.VTable, @ptrCast(self.vtable)).CreateVirtualMachines(@as(*const ITsSbProvisioning, @ptrCast(self)), job_xml_string_, job_guid_, p_sink_);
            }
            pub inline fn patchVirtualMachines(self: *const T, job_xml_string_: ?BSTR, job_guid_: ?BSTR, p_sink_: ?*ITsSbProvisioningPluginNotifySink, p_v_m_patch_info_: ?*VM_PATCH_INFO) HRESULT {
                return @as(*const ITsSbProvisioning.VTable, @ptrCast(self.vtable)).PatchVirtualMachines(@as(*const ITsSbProvisioning, @ptrCast(self)), job_xml_string_, job_guid_, p_sink_, p_v_m_patch_info_);
            }
            pub inline fn deleteVirtualMachines(self: *const T, job_xml_string_: ?BSTR, job_guid_: ?BSTR, p_sink_: ?*ITsSbProvisioningPluginNotifySink) HRESULT {
                return @as(*const ITsSbProvisioning.VTable, @ptrCast(self.vtable)).DeleteVirtualMachines(@as(*const ITsSbProvisioning, @ptrCast(self)), job_xml_string_, job_guid_, p_sink_);
            }
            pub inline fn cancelJob(self: *const T, job_guid_: ?BSTR) HRESULT {
                return @as(*const ITsSbProvisioning.VTable, @ptrCast(self.vtable)).CancelJob(@as(*const ITsSbProvisioning, @ptrCast(self)), job_guid_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2016'
const IID_ITsSbGenericNotifySink_Value = Guid.initString("4c4c8c4f-300b-46ad-9164-8468a7e7568c");
pub const IID_ITsSbGenericNotifySink = &IID_ITsSbGenericNotifySink_Value;
pub const ITsSbGenericNotifySink = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnCompleted: *const fn (
            self: *const ITsSbGenericNotifySink,
            status: HRESULT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetWaitTimeout: *const fn (
            self: *const ITsSbGenericNotifySink,
            pft_timeout: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onCompleted(self: *const T, status_: HRESULT) HRESULT {
                return @as(*const ITsSbGenericNotifySink.VTable, @ptrCast(self.vtable)).OnCompleted(@as(*const ITsSbGenericNotifySink, @ptrCast(self)), status_);
            }
            pub inline fn getWaitTimeout(self: *const T, pft_timeout_: ?*FILETIME) HRESULT {
                return @as(*const ITsSbGenericNotifySink.VTable, @ptrCast(self.vtable)).GetWaitTimeout(@as(*const ITsSbGenericNotifySink, @ptrCast(self)), pft_timeout_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const pluginResource = extern struct {
    alias: [256]u16,
    name: [256]u16,
    resourceFileContents: ?PWSTR,
    fileExtension: [256]u16,
    resourcePluginType: [256]u16,
    isDiscoverable: u8,
    resourceType: i32,
    pceIconSize: u32,
    iconContents: ?*u8,
    pcePluginBlobSize: u32,
    blobContents: ?*u8,
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_ItsPubPlugin_Value = Guid.initString("70c04b05-f347-412b-822f-36c99c54ca45");
pub const IID_ItsPubPlugin = &IID_ItsPubPlugin_Value;
pub const ItsPubPlugin = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetResourceList: *const fn (
            self: *const ItsPubPlugin,
            user_i_d: ?[*:0]const u16,
            pce_app_list_size: ?*i32,
            resource_list: ?*?*pluginResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResource: *const fn (
            self: *const ItsPubPlugin,
            alias: ?[*:0]const u16,
            flags: i32,
            resource: ?*pluginResource,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCacheLastUpdateTime: *const fn (
            self: *const ItsPubPlugin,
            last_update_time: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pluginName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ItsPubPlugin,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_pluginVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ItsPubPlugin,
            p_val: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResolveResource: *const fn (
            self: *const ItsPubPlugin,
            resource_type: ?*u32,
            resource_location: ?PWSTR,
            end_point_name: ?PWSTR,
            user_i_d: ?PWSTR,
            alias: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getResourceList(self: *const T, user_i_d_: ?[*:0]const u16, pce_app_list_size_: ?*i32, resource_list_: ?*?*pluginResource) HRESULT {
                return @as(*const ItsPubPlugin.VTable, @ptrCast(self.vtable)).GetResourceList(@as(*const ItsPubPlugin, @ptrCast(self)), user_i_d_, pce_app_list_size_, resource_list_);
            }
            pub inline fn getResource(self: *const T, alias_: ?[*:0]const u16, flags_: i32, resource_: ?*pluginResource) HRESULT {
                return @as(*const ItsPubPlugin.VTable, @ptrCast(self.vtable)).GetResource(@as(*const ItsPubPlugin, @ptrCast(self)), alias_, flags_, resource_);
            }
            pub inline fn getCacheLastUpdateTime(self: *const T, last_update_time_: ?*u64) HRESULT {
                return @as(*const ItsPubPlugin.VTable, @ptrCast(self.vtable)).GetCacheLastUpdateTime(@as(*const ItsPubPlugin, @ptrCast(self)), last_update_time_);
            }
            pub inline fn getPluginName(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const ItsPubPlugin.VTable, @ptrCast(self.vtable)).get_pluginName(@as(*const ItsPubPlugin, @ptrCast(self)), p_val_);
            }
            pub inline fn getPluginVersion(self: *const T, p_val_: ?*?BSTR) HRESULT {
                return @as(*const ItsPubPlugin.VTable, @ptrCast(self.vtable)).get_pluginVersion(@as(*const ItsPubPlugin, @ptrCast(self)), p_val_);
            }
            pub inline fn resolveResource(self: *const T, resource_type_: ?*u32, resource_location_: ?PWSTR, end_point_name_: ?PWSTR, user_i_d_: ?PWSTR, alias_: ?PWSTR) HRESULT {
                return @as(*const ItsPubPlugin.VTable, @ptrCast(self.vtable)).ResolveResource(@as(*const ItsPubPlugin, @ptrCast(self)), resource_type_, resource_location_, end_point_name_, user_i_d_, alias_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const pluginResource2FileAssociation = extern struct {
    extName: [256]u16,
    primaryHandler: u8,
    pceIconSize: u32,
    iconContents: ?*u8,
};

pub const pluginResource2 = extern struct {
    resourceV1: pluginResource,
    pceFileAssocListSize: u32,
    fileAssocList: ?*pluginResource2FileAssociation,
    securityDescriptor: ?PWSTR,
    pceFolderListSize: u32,
    folderList: ?*?*u16,
};

pub const TSPUB_PLUGIN_PD_RESOLUTION_TYPE = enum(i32) {
    OR_CREATE = 0,
    EXISTING = 1,
};
pub const TSPUB_PLUGIN_PD_QUERY_OR_CREATE = TSPUB_PLUGIN_PD_RESOLUTION_TYPE.OR_CREATE;
pub const TSPUB_PLUGIN_PD_QUERY_EXISTING = TSPUB_PLUGIN_PD_RESOLUTION_TYPE.EXISTING;

pub const TSPUB_PLUGIN_PD_ASSIGNMENT_TYPE = enum(i32) {
    NEW = 0,
    EXISTING = 1,
};
pub const TSPUB_PLUGIN_PD_ASSIGNMENT_NEW = TSPUB_PLUGIN_PD_ASSIGNMENT_TYPE.NEW;
pub const TSPUB_PLUGIN_PD_ASSIGNMENT_EXISTING = TSPUB_PLUGIN_PD_ASSIGNMENT_TYPE.EXISTING;

// TODO: this type is limited to platform 'windows8.0'
const IID_ItsPubPlugin2_Value = Guid.initString("fa4ce418-aad7-4ec6-bad1-0a321ba465d5");
pub const IID_ItsPubPlugin2 = &IID_ItsPubPlugin2_Value;
pub const ItsPubPlugin2 = extern struct {
    pub const VTable = extern struct {
        base: ItsPubPlugin.VTable,
        GetResource2List: *const fn (
            self: *const ItsPubPlugin2,
            user_i_d: ?[*:0]const u16,
            pce_app_list_size: ?*i32,
            resource_list: ?*?*pluginResource2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResource2: *const fn (
            self: *const ItsPubPlugin2,
            alias: ?[*:0]const u16,
            flags: i32,
            resource: ?*pluginResource2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResolvePersonalDesktop: *const fn (
            self: *const ItsPubPlugin2,
            user_id: ?[*:0]const u16,
            pool_id: ?[*:0]const u16,
            e_pd_resolution_type: TSPUB_PLUGIN_PD_RESOLUTION_TYPE,
            p_pd_assignment_type: ?*TSPUB_PLUGIN_PD_ASSIGNMENT_TYPE,
            end_point_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeletePersonalDesktopAssignment: *const fn (
            self: *const ItsPubPlugin2,
            user_id: ?[*:0]const u16,
            pool_id: ?[*:0]const u16,
            endpoint_name: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace ItsPubPlugin.MethodMixin(T);
            pub inline fn getResource2List(self: *const T, user_i_d_: ?[*:0]const u16, pce_app_list_size_: ?*i32, resource_list_: ?*?*pluginResource2) HRESULT {
                return @as(*const ItsPubPlugin2.VTable, @ptrCast(self.vtable)).GetResource2List(@as(*const ItsPubPlugin2, @ptrCast(self)), user_i_d_, pce_app_list_size_, resource_list_);
            }
            pub inline fn getResource2(self: *const T, alias_: ?[*:0]const u16, flags_: i32, resource_: ?*pluginResource2) HRESULT {
                return @as(*const ItsPubPlugin2.VTable, @ptrCast(self.vtable)).GetResource2(@as(*const ItsPubPlugin2, @ptrCast(self)), alias_, flags_, resource_);
            }
            pub inline fn resolvePersonalDesktop(self: *const T, user_id_: ?[*:0]const u16, pool_id_: ?[*:0]const u16, e_pd_resolution_type_: TSPUB_PLUGIN_PD_RESOLUTION_TYPE, p_pd_assignment_type_: ?*TSPUB_PLUGIN_PD_ASSIGNMENT_TYPE, end_point_name_: ?PWSTR) HRESULT {
                return @as(*const ItsPubPlugin2.VTable, @ptrCast(self.vtable)).ResolvePersonalDesktop(@as(*const ItsPubPlugin2, @ptrCast(self)), user_id_, pool_id_, e_pd_resolution_type_, p_pd_assignment_type_, end_point_name_);
            }
            pub inline fn deletePersonalDesktopAssignment(self: *const T, user_id_: ?[*:0]const u16, pool_id_: ?[*:0]const u16, endpoint_name_: ?[*:0]const u16) HRESULT {
                return @as(*const ItsPubPlugin2.VTable, @ptrCast(self.vtable)).DeletePersonalDesktopAssignment(@as(*const ItsPubPlugin2, @ptrCast(self)), user_id_, pool_id_, endpoint_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.1'
const IID_IWorkspaceResTypeRegistry_Value = Guid.initString("1d428c79-6e2e-4351-a361-c0401a03a0ba");
pub const IID_IWorkspaceResTypeRegistry = &IID_IWorkspaceResTypeRegistry_Value;
pub const IWorkspaceResTypeRegistry = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        AddResourceType: *const fn (
            self: *const IWorkspaceResTypeRegistry,
            f_machine_wide: i16,
            bstr_file_extension: ?BSTR,
            bstr_launcher: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteResourceType: *const fn (
            self: *const IWorkspaceResTypeRegistry,
            f_machine_wide: i16,
            bstr_file_extension: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRegisteredFileExtensions: *const fn (
            self: *const IWorkspaceResTypeRegistry,
            f_machine_wide: i16,
            psa_file_extensions: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetResourceTypeInfo: *const fn (
            self: *const IWorkspaceResTypeRegistry,
            f_machine_wide: i16,
            bstr_file_extension: ?BSTR,
            pbstr_launcher: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ModifyResourceType: *const fn (
            self: *const IWorkspaceResTypeRegistry,
            f_machine_wide: i16,
            bstr_file_extension: ?BSTR,
            bstr_launcher: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn addResourceType(self: *const T, f_machine_wide_: i16, bstr_file_extension_: ?BSTR, bstr_launcher_: ?BSTR) HRESULT {
                return @as(*const IWorkspaceResTypeRegistry.VTable, @ptrCast(self.vtable)).AddResourceType(@as(*const IWorkspaceResTypeRegistry, @ptrCast(self)), f_machine_wide_, bstr_file_extension_, bstr_launcher_);
            }
            pub inline fn deleteResourceType(self: *const T, f_machine_wide_: i16, bstr_file_extension_: ?BSTR) HRESULT {
                return @as(*const IWorkspaceResTypeRegistry.VTable, @ptrCast(self.vtable)).DeleteResourceType(@as(*const IWorkspaceResTypeRegistry, @ptrCast(self)), f_machine_wide_, bstr_file_extension_);
            }
            pub inline fn getRegisteredFileExtensions(self: *const T, f_machine_wide_: i16, psa_file_extensions_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IWorkspaceResTypeRegistry.VTable, @ptrCast(self.vtable)).GetRegisteredFileExtensions(@as(*const IWorkspaceResTypeRegistry, @ptrCast(self)), f_machine_wide_, psa_file_extensions_);
            }
            pub inline fn getResourceTypeInfo(self: *const T, f_machine_wide_: i16, bstr_file_extension_: ?BSTR, pbstr_launcher_: ?*?BSTR) HRESULT {
                return @as(*const IWorkspaceResTypeRegistry.VTable, @ptrCast(self.vtable)).GetResourceTypeInfo(@as(*const IWorkspaceResTypeRegistry, @ptrCast(self)), f_machine_wide_, bstr_file_extension_, pbstr_launcher_);
            }
            pub inline fn modifyResourceType(self: *const T, f_machine_wide_: i16, bstr_file_extension_: ?BSTR, bstr_launcher_: ?BSTR) HRESULT {
                return @as(*const IWorkspaceResTypeRegistry.VTable, @ptrCast(self.vtable)).ModifyResourceType(@as(*const IWorkspaceResTypeRegistry, @ptrCast(self)), f_machine_wide_, bstr_file_extension_, bstr_launcher_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWTSPlugin_Value = Guid.initString("a1230201-1439-4e62-a414-190d0ac3d40e");
pub const IID_IWTSPlugin = &IID_IWTSPlugin_Value;
pub const IWTSPlugin = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IWTSPlugin,
            p_channel_mgr: ?*IWTSVirtualChannelManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Connected: *const fn (
            self: *const IWTSPlugin,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnected: *const fn (
            self: *const IWTSPlugin,
            dw_disconnect_code: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Terminated: *const fn (
            self: *const IWTSPlugin,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_channel_mgr_: ?*IWTSVirtualChannelManager) HRESULT {
                return @as(*const IWTSPlugin.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IWTSPlugin, @ptrCast(self)), p_channel_mgr_);
            }
            pub inline fn connected(self: *const T) HRESULT {
                return @as(*const IWTSPlugin.VTable, @ptrCast(self.vtable)).Connected(@as(*const IWTSPlugin, @ptrCast(self)));
            }
            pub inline fn disconnected(self: *const T, dw_disconnect_code_: u32) HRESULT {
                return @as(*const IWTSPlugin.VTable, @ptrCast(self.vtable)).Disconnected(@as(*const IWTSPlugin, @ptrCast(self)), dw_disconnect_code_);
            }
            pub inline fn terminated(self: *const T) HRESULT {
                return @as(*const IWTSPlugin.VTable, @ptrCast(self.vtable)).Terminated(@as(*const IWTSPlugin, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWTSListener_Value = Guid.initString("a1230206-9a39-4d58-8674-cdb4dff4e73b");
pub const IID_IWTSListener = &IID_IWTSListener_Value;
pub const IWTSListener = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetConfiguration: *const fn (
            self: *const IWTSListener,
            pp_property_bag: ?*?*IPropertyBag,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getConfiguration(self: *const T, pp_property_bag_: ?*?*IPropertyBag) HRESULT {
                return @as(*const IWTSListener.VTable, @ptrCast(self.vtable)).GetConfiguration(@as(*const IWTSListener, @ptrCast(self)), pp_property_bag_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWTSListenerCallback_Value = Guid.initString("a1230203-d6a7-11d8-b9fd-000bdbd1f198");
pub const IID_IWTSListenerCallback = &IID_IWTSListenerCallback_Value;
pub const IWTSListenerCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnNewChannelConnection: *const fn (
            self: *const IWTSListenerCallback,
            p_channel: ?*IWTSVirtualChannel,
            data: ?BSTR,
            pb_accept: ?*BOOL,
            pp_callback: ?*?*IWTSVirtualChannelCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onNewChannelConnection(self: *const T, p_channel_: ?*IWTSVirtualChannel, data_: ?BSTR, pb_accept_: ?*BOOL, pp_callback_: ?*?*IWTSVirtualChannelCallback) HRESULT {
                return @as(*const IWTSListenerCallback.VTable, @ptrCast(self.vtable)).OnNewChannelConnection(@as(*const IWTSListenerCallback, @ptrCast(self)), p_channel_, data_, pb_accept_, pp_callback_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWTSVirtualChannelCallback_Value = Guid.initString("a1230204-d6a7-11d8-b9fd-000bdbd1f198");
pub const IID_IWTSVirtualChannelCallback = &IID_IWTSVirtualChannelCallback_Value;
pub const IWTSVirtualChannelCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnDataReceived: *const fn (
            self: *const IWTSVirtualChannelCallback,
            cb_size: u32,
            p_buffer: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnClose: *const fn (
            self: *const IWTSVirtualChannelCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onDataReceived(self: *const T, cb_size_: u32, p_buffer_: [*:0]u8) HRESULT {
                return @as(*const IWTSVirtualChannelCallback.VTable, @ptrCast(self.vtable)).OnDataReceived(@as(*const IWTSVirtualChannelCallback, @ptrCast(self)), cb_size_, p_buffer_);
            }
            pub inline fn onClose(self: *const T) HRESULT {
                return @as(*const IWTSVirtualChannelCallback.VTable, @ptrCast(self.vtable)).OnClose(@as(*const IWTSVirtualChannelCallback, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWTSVirtualChannelManager_Value = Guid.initString("a1230205-d6a7-11d8-b9fd-000bdbd1f198");
pub const IID_IWTSVirtualChannelManager = &IID_IWTSVirtualChannelManager_Value;
pub const IWTSVirtualChannelManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateListener: *const fn (
            self: *const IWTSVirtualChannelManager,
            psz_channel_name: ?*const u8,
            u_flags: u32,
            p_listener_callback: ?*IWTSListenerCallback,
            pp_listener: ?*?*IWTSListener,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createListener(self: *const T, psz_channel_name_: ?*const u8, u_flags_: u32, p_listener_callback_: ?*IWTSListenerCallback, pp_listener_: ?*?*IWTSListener) HRESULT {
                return @as(*const IWTSVirtualChannelManager.VTable, @ptrCast(self.vtable)).CreateListener(@as(*const IWTSVirtualChannelManager, @ptrCast(self)), psz_channel_name_, u_flags_, p_listener_callback_, pp_listener_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IWTSVirtualChannel_Value = Guid.initString("a1230207-d6a7-11d8-b9fd-000bdbd1f198");
pub const IID_IWTSVirtualChannel = &IID_IWTSVirtualChannel_Value;
pub const IWTSVirtualChannel = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Write: *const fn (
            self: *const IWTSVirtualChannel,
            cb_size: u32,
            p_buffer: [*:0]u8,
            p_reserved: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IWTSVirtualChannel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn write(self: *const T, cb_size_: u32, p_buffer_: [*:0]u8, p_reserved_: ?*IUnknown) HRESULT {
                return @as(*const IWTSVirtualChannel.VTable, @ptrCast(self.vtable)).Write(@as(*const IWTSVirtualChannel, @ptrCast(self)), cb_size_, p_buffer_, p_reserved_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IWTSVirtualChannel.VTable, @ptrCast(self.vtable)).Close(@as(*const IWTSVirtualChannel, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IWTSPluginServiceProvider_Value = Guid.initString("d3e07363-087c-476c-86a7-dbb15f46ddb4");
pub const IID_IWTSPluginServiceProvider = &IID_IWTSPluginServiceProvider_Value;
pub const IWTSPluginServiceProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetService: *const fn (
            self: *const IWTSPluginServiceProvider,
            service_id: Guid,
            ppunk_object: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getService(self: *const T, service_id_: Guid, ppunk_object_: ?*?*IUnknown) HRESULT {
                return @as(*const IWTSPluginServiceProvider.VTable, @ptrCast(self.vtable)).GetService(@as(*const IWTSPluginServiceProvider, @ptrCast(self)), service_id_, ppunk_object_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const BITMAP_RENDERER_STATISTICS = extern struct {
    dwFramesDelivered: u32,
    dwFramesDropped: u32,
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IWTSBitmapRenderer_Value = Guid.initString("5b7acc97-f3c9-46f7-8c5b-fa685d3441b1");
pub const IID_IWTSBitmapRenderer = &IID_IWTSBitmapRenderer_Value;
pub const IWTSBitmapRenderer = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Render: *const fn (
            self: *const IWTSBitmapRenderer,
            image_format: Guid,
            dw_width: u32,
            dw_height: u32,
            cb_stride: i32,
            cb_image_buffer: u32,
            p_image_buffer: [*:0]u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRendererStatistics: *const fn (
            self: *const IWTSBitmapRenderer,
            p_statistics: ?*BITMAP_RENDERER_STATISTICS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveMapping: *const fn (
            self: *const IWTSBitmapRenderer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn render(self: *const T, image_format_: Guid, dw_width_: u32, dw_height_: u32, cb_stride_: i32, cb_image_buffer_: u32, p_image_buffer_: [*:0]u8) HRESULT {
                return @as(*const IWTSBitmapRenderer.VTable, @ptrCast(self.vtable)).Render(@as(*const IWTSBitmapRenderer, @ptrCast(self)), image_format_, dw_width_, dw_height_, cb_stride_, cb_image_buffer_, p_image_buffer_);
            }
            pub inline fn getRendererStatistics(self: *const T, p_statistics_: ?*BITMAP_RENDERER_STATISTICS) HRESULT {
                return @as(*const IWTSBitmapRenderer.VTable, @ptrCast(self.vtable)).GetRendererStatistics(@as(*const IWTSBitmapRenderer, @ptrCast(self)), p_statistics_);
            }
            pub inline fn removeMapping(self: *const T) HRESULT {
                return @as(*const IWTSBitmapRenderer.VTable, @ptrCast(self.vtable)).RemoveMapping(@as(*const IWTSBitmapRenderer, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IWTSBitmapRendererCallback_Value = Guid.initString("d782928e-fe4e-4e77-ae90-9cd0b3e3b353");
pub const IID_IWTSBitmapRendererCallback = &IID_IWTSBitmapRendererCallback_Value;
pub const IWTSBitmapRendererCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnTargetSizeChanged: *const fn (
            self: *const IWTSBitmapRendererCallback,
            rc_new_size: RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onTargetSizeChanged(self: *const T, rc_new_size_: RECT) HRESULT {
                return @as(*const IWTSBitmapRendererCallback.VTable, @ptrCast(self.vtable)).OnTargetSizeChanged(@as(*const IWTSBitmapRendererCallback, @ptrCast(self)), rc_new_size_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IWTSBitmapRenderService_Value = Guid.initString("ea326091-05fe-40c1-b49c-3d2ef4626a0e");
pub const IID_IWTSBitmapRenderService = &IID_IWTSBitmapRenderService_Value;
pub const IWTSBitmapRenderService = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMappedRenderer: *const fn (
            self: *const IWTSBitmapRenderService,
            mapping_id: u64,
            p_mapped_renderer_callback: ?*IWTSBitmapRendererCallback,
            pp_mapped_renderer: ?*?*IWTSBitmapRenderer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getMappedRenderer(self: *const T, mapping_id_: u64, p_mapped_renderer_callback_: ?*IWTSBitmapRendererCallback, pp_mapped_renderer_: ?*?*IWTSBitmapRenderer) HRESULT {
                return @as(*const IWTSBitmapRenderService.VTable, @ptrCast(self.vtable)).GetMappedRenderer(@as(*const IWTSBitmapRenderService, @ptrCast(self)), mapping_id_, p_mapped_renderer_callback_, pp_mapped_renderer_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IWRdsGraphicsChannelEvents_Value = Guid.initString("67f2368c-d674-4fae-66a5-d20628a640d2");
pub const IID_IWRdsGraphicsChannelEvents = &IID_IWRdsGraphicsChannelEvents_Value;
pub const IWRdsGraphicsChannelEvents = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnDataReceived: *const fn (
            self: *const IWRdsGraphicsChannelEvents,
            cb_size: u32,
            p_buffer: ?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnClose: *const fn (
            self: *const IWRdsGraphicsChannelEvents,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnChannelOpened: *const fn (
            self: *const IWRdsGraphicsChannelEvents,
            open_result: HRESULT,
            p_open_context: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDataSent: *const fn (
            self: *const IWRdsGraphicsChannelEvents,
            p_write_context: ?*IUnknown,
            b_cancelled: BOOL,
            p_buffer: ?*u8,
            cb_buffer: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnMetricsUpdate: *const fn (
            self: *const IWRdsGraphicsChannelEvents,
            bandwidth: u32,
            r_t_t: u32,
            last_sent_byte_index: u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onDataReceived(self: *const T, cb_size_: u32, p_buffer_: ?*u8) HRESULT {
                return @as(*const IWRdsGraphicsChannelEvents.VTable, @ptrCast(self.vtable)).OnDataReceived(@as(*const IWRdsGraphicsChannelEvents, @ptrCast(self)), cb_size_, p_buffer_);
            }
            pub inline fn onClose(self: *const T) HRESULT {
                return @as(*const IWRdsGraphicsChannelEvents.VTable, @ptrCast(self.vtable)).OnClose(@as(*const IWRdsGraphicsChannelEvents, @ptrCast(self)));
            }
            pub inline fn onChannelOpened(self: *const T, open_result_: HRESULT, p_open_context_: ?*IUnknown) HRESULT {
                return @as(*const IWRdsGraphicsChannelEvents.VTable, @ptrCast(self.vtable)).OnChannelOpened(@as(*const IWRdsGraphicsChannelEvents, @ptrCast(self)), open_result_, p_open_context_);
            }
            pub inline fn onDataSent(self: *const T, p_write_context_: ?*IUnknown, b_cancelled_: BOOL, p_buffer_: ?*u8, cb_buffer_: u32) HRESULT {
                return @as(*const IWRdsGraphicsChannelEvents.VTable, @ptrCast(self.vtable)).OnDataSent(@as(*const IWRdsGraphicsChannelEvents, @ptrCast(self)), p_write_context_, b_cancelled_, p_buffer_, cb_buffer_);
            }
            pub inline fn onMetricsUpdate(self: *const T, bandwidth_: u32, r_t_t_: u32, last_sent_byte_index_: u64) HRESULT {
                return @as(*const IWRdsGraphicsChannelEvents.VTable, @ptrCast(self.vtable)).OnMetricsUpdate(@as(*const IWRdsGraphicsChannelEvents, @ptrCast(self)), bandwidth_, r_t_t_, last_sent_byte_index_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IWRdsGraphicsChannel_Value = Guid.initString("684b7a0b-edff-43ad-d5a2-4a8d5388f401");
pub const IID_IWRdsGraphicsChannel = &IID_IWRdsGraphicsChannel_Value;
pub const IWRdsGraphicsChannel = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Write: *const fn (
            self: *const IWRdsGraphicsChannel,
            cb_size: u32,
            p_buffer: ?*u8,
            p_context: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IWRdsGraphicsChannel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Open: *const fn (
            self: *const IWRdsGraphicsChannel,
            p_channel_events: ?*IWRdsGraphicsChannelEvents,
            p_open_context: ?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn write(self: *const T, cb_size_: u32, p_buffer_: ?*u8, p_context_: ?*IUnknown) HRESULT {
                return @as(*const IWRdsGraphicsChannel.VTable, @ptrCast(self.vtable)).Write(@as(*const IWRdsGraphicsChannel, @ptrCast(self)), cb_size_, p_buffer_, p_context_);
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IWRdsGraphicsChannel.VTable, @ptrCast(self.vtable)).Close(@as(*const IWRdsGraphicsChannel, @ptrCast(self)));
            }
            pub inline fn open(self: *const T, p_channel_events_: ?*IWRdsGraphicsChannelEvents, p_open_context_: ?*IUnknown) HRESULT {
                return @as(*const IWRdsGraphicsChannel.VTable, @ptrCast(self.vtable)).Open(@as(*const IWRdsGraphicsChannel, @ptrCast(self)), p_channel_events_, p_open_context_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WRdsGraphicsChannelType = enum(i32) {
    GuaranteedDelivery = 0,
    BestEffortDelivery = 1,
};
pub const WRdsGraphicsChannelType_GuaranteedDelivery = WRdsGraphicsChannelType.GuaranteedDelivery;
pub const WRdsGraphicsChannelType_BestEffortDelivery = WRdsGraphicsChannelType.BestEffortDelivery;

// TODO: this type is limited to platform 'windows8.0'
const IID_IWRdsGraphicsChannelManager_Value = Guid.initString("0fd57159-e83e-476a-a8b9-4a7976e71e18");
pub const IID_IWRdsGraphicsChannelManager = &IID_IWRdsGraphicsChannelManager_Value;
pub const IWRdsGraphicsChannelManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateChannel: *const fn (
            self: *const IWRdsGraphicsChannelManager,
            psz_channel_name: ?*const u8,
            channel_type: WRdsGraphicsChannelType,
            pp_virtual_channel: ?*?*IWRdsGraphicsChannel,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createChannel(self: *const T, psz_channel_name_: ?*const u8, channel_type_: WRdsGraphicsChannelType, pp_virtual_channel_: ?*?*IWRdsGraphicsChannel) HRESULT {
                return @as(*const IWRdsGraphicsChannelManager.VTable, @ptrCast(self.vtable)).CreateChannel(@as(*const IWRdsGraphicsChannelManager, @ptrCast(self)), psz_channel_name_, channel_type_, pp_virtual_channel_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const RFX_GFX_RECT = extern struct {
    left: i32 align(1),
    top: i32 align(1),
    right: i32 align(1),
    bottom: i32 align(1),
};

pub const RFX_GFX_MSG_HEADER = extern struct {
    uMSGType: u16 align(1),
    cbSize: u16 align(1),
};

pub const RFX_GFX_MONITOR_INFO = extern struct {
    left: i32 align(1),
    top: i32 align(1),
    right: i32 align(1),
    bottom: i32 align(1),
    physicalWidth: u32 align(1),
    physicalHeight: u32 align(1),
    orientation: u32 align(1),
    primary: BOOL align(1),
};

pub const RFX_GFX_MSG_CLIENT_DESKTOP_INFO_REQUEST = extern struct {
    channelHdr: RFX_GFX_MSG_HEADER,
};

pub const RFX_GFX_MSG_CLIENT_DESKTOP_INFO_RESPONSE = extern struct {
    channelHdr: RFX_GFX_MSG_HEADER align(1),
    reserved: u32 align(1),
    monitorCount: u32 align(1),
    MonitorData: [16]RFX_GFX_MONITOR_INFO align(1),
    clientUniqueId: [32]u16 align(1),
};

pub const RFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_NOTIFY = extern struct {
    channelHdr: RFX_GFX_MSG_HEADER align(1),
    ulWidth: u32 align(1),
    ulHeight: u32 align(1),
    ulBpp: u32 align(1),
    Reserved: u32 align(1),
};

pub const RFX_GFX_MSG_DESKTOP_CONFIG_CHANGE_CONFIRM = extern struct {
    channelHdr: RFX_GFX_MSG_HEADER,
};

pub const RFX_GFX_MSG_DESKTOP_INPUT_RESET = extern struct {
    channelHdr: RFX_GFX_MSG_HEADER align(1),
    ulWidth: u32 align(1),
    ulHeight: u32 align(1),
};

pub const RFX_GFX_MSG_DISCONNECT_NOTIFY = extern struct {
    channelHdr: RFX_GFX_MSG_HEADER align(1),
    DisconnectReason: u32 align(1),
};

pub const RFX_GFX_MSG_DESKTOP_RESEND_REQUEST = extern struct {
    channelHdr: RFX_GFX_MSG_HEADER,
    RedrawRect: RFX_GFX_RECT,
};

pub const RFX_GFX_MSG_RDP_DATA = extern struct {
    channelHdr: RFX_GFX_MSG_HEADER,
    rdpData: [1]u8,
};

pub const WTS_SOCKADDR = extern struct {
    sin_family: u16,
    u: extern union {
        ipv4: extern struct {
            sin_port: u16,
            IN_ADDR: u32,
            sin_zero: [8]u8,
        },
        ipv6: extern struct {
            sin6_port: u16,
            sin6_flowinfo: u32,
            sin6_addr: [8]u16,
            sin6_scope_id: u32,
        },
    },
};

pub const WTS_SMALL_RECT = extern struct {
    Left: i16,
    Top: i16,
    Right: i16,
    Bottom: i16,
};

pub const WTS_RCM_SERVICE_STATE = enum(i32) {
    NONE = 0,
    START = 1,
    STOP = 2,
};
pub const WTS_SERVICE_NONE = WTS_RCM_SERVICE_STATE.NONE;
pub const WTS_SERVICE_START = WTS_RCM_SERVICE_STATE.START;
pub const WTS_SERVICE_STOP = WTS_RCM_SERVICE_STATE.STOP;

pub const WTS_RCM_DRAIN_STATE = enum(i32) {
    STATE_NONE = 0,
    IN_DRAIN = 1,
    NOT_IN_DRAIN = 2,
};
pub const WTS_DRAIN_STATE_NONE = WTS_RCM_DRAIN_STATE.STATE_NONE;
pub const WTS_DRAIN_IN_DRAIN = WTS_RCM_DRAIN_STATE.IN_DRAIN;
pub const WTS_DRAIN_NOT_IN_DRAIN = WTS_RCM_DRAIN_STATE.NOT_IN_DRAIN;

pub const WTS_SERVICE_STATE = extern struct {
    RcmServiceState: WTS_RCM_SERVICE_STATE,
    RcmDrainState: WTS_RCM_DRAIN_STATE,
};

pub const WTS_SESSION_ID = extern struct {
    SessionUniqueGuid: Guid,
    SessionId: u32,
};

pub const WTS_USER_CREDENTIAL = extern struct {
    UserName: [256]u16,
    Password: [256]u16,
    Domain: [256]u16,
};

pub const WTS_SYSTEMTIME = extern struct {
    wYear: u16,
    wMonth: u16,
    wDayOfWeek: u16,
    wDay: u16,
    wHour: u16,
    wMinute: u16,
    wSecond: u16,
    wMilliseconds: u16,
};

pub const WTS_TIME_ZONE_INFORMATION = extern struct {
    Bias: i32,
    StandardName: [32]u16,
    StandardDate: WTS_SYSTEMTIME,
    StandardBias: i32,
    DaylightName: [32]u16,
    DaylightDate: WTS_SYSTEMTIME,
    DaylightBias: i32,
};

pub const WRDS_DYNAMIC_TIME_ZONE_INFORMATION = extern struct {
    Bias: i32,
    StandardName: [32]u16,
    StandardDate: WTS_SYSTEMTIME,
    StandardBias: i32,
    DaylightName: [32]u16,
    DaylightDate: WTS_SYSTEMTIME,
    DaylightBias: i32,
    TimeZoneKeyName: [128]u16,
    DynamicDaylightTimeDisabled: u16,
};

pub const WTS_CLIENT_DATA = extern struct {
    fDisableCtrlAltDel: BOOLEAN,
    fDoubleClickDetect: BOOLEAN,
    fEnableWindowsKey: BOOLEAN,
    fHideTitleBar: BOOLEAN,
    fInheritAutoLogon: BOOL,
    fPromptForPassword: BOOLEAN,
    fUsingSavedCreds: BOOLEAN,
    Domain: [256]u16,
    UserName: [256]u16,
    Password: [256]u16,
    fPasswordIsScPin: BOOLEAN,
    fInheritInitialProgram: BOOL,
    WorkDirectory: [257]u16,
    InitialProgram: [257]u16,
    fMaximizeShell: BOOLEAN,
    EncryptionLevel: u8,
    PerformanceFlags: u32,
    ProtocolName: [9]u16,
    ProtocolType: u16,
    fInheritColorDepth: BOOL,
    HRes: u16,
    VRes: u16,
    ColorDepth: u16,
    DisplayDriverName: [9]u16,
    DisplayDeviceName: [20]u16,
    fMouse: BOOLEAN,
    KeyboardLayout: u32,
    KeyboardType: u32,
    KeyboardSubType: u32,
    KeyboardFunctionKey: u32,
    imeFileName: [33]u16,
    ActiveInputLocale: u32,
    fNoAudioPlayback: BOOLEAN,
    fRemoteConsoleAudio: BOOLEAN,
    AudioDriverName: [9]u16,
    ClientTimeZone: WTS_TIME_ZONE_INFORMATION,
    ClientName: [21]u16,
    SerialNumber: u32,
    ClientAddressFamily: u32,
    ClientAddress: [31]u16,
    ClientSockAddress: WTS_SOCKADDR,
    ClientDirectory: [257]u16,
    ClientBuildNumber: u32,
    ClientProductId: u16,
    OutBufCountHost: u16,
    OutBufCountClient: u16,
    OutBufLength: u16,
    ClientSessionId: u32,
    ClientDigProductId: [33]u16,
    fDisableCpm: BOOLEAN,
    fDisableCdm: BOOLEAN,
    fDisableCcm: BOOLEAN,
    fDisableLPT: BOOLEAN,
    fDisableClip: BOOLEAN,
    fDisablePNP: BOOLEAN,
};

pub const WTS_USER_DATA = extern struct {
    WorkDirectory: [257]u16,
    InitialProgram: [257]u16,
    UserTimeZone: WTS_TIME_ZONE_INFORMATION,
};

pub const WTS_POLICY_DATA = extern struct {
    fDisableEncryption: BOOLEAN,
    fDisableAutoReconnect: BOOLEAN,
    ColorDepth: u32,
    MinEncryptionLevel: u8,
    fDisableCpm: BOOLEAN,
    fDisableCdm: BOOLEAN,
    fDisableCcm: BOOLEAN,
    fDisableLPT: BOOLEAN,
    fDisableClip: BOOLEAN,
    fDisablePNPRedir: BOOLEAN,
};

pub const WTS_PROTOCOL_CACHE = extern struct {
    CacheReads: u32,
    CacheHits: u32,
};

pub const WTS_CACHE_STATS_UN = extern union {
    ProtocolCache: [4]WTS_PROTOCOL_CACHE,
    TShareCacheStats: u32,
    Reserved: [20]u32,
};

pub const WTS_CACHE_STATS = extern struct {
    Specific: u32,
    Data: WTS_CACHE_STATS_UN,
    ProtocolType: u16,
    Length: u16,
};

pub const WTS_PROTOCOL_COUNTERS = extern struct {
    WdBytes: u32,
    WdFrames: u32,
    WaitForOutBuf: u32,
    Frames: u32,
    Bytes: u32,
    CompressedBytes: u32,
    CompressFlushes: u32,
    Errors: u32,
    Timeouts: u32,
    AsyncFramingError: u32,
    AsyncOverrunError: u32,
    AsyncOverflowError: u32,
    AsyncParityError: u32,
    TdErrors: u32,
    ProtocolType: u16,
    Length: u16,
    Specific: u16,
    Reserved: [100]u32,
};

pub const WTS_PROTOCOL_STATUS = extern struct {
    Output: WTS_PROTOCOL_COUNTERS,
    Input: WTS_PROTOCOL_COUNTERS,
    Cache: WTS_CACHE_STATS,
    AsyncSignal: u32,
    AsyncSignalMask: u32,
    Counters: [100]LARGE_INTEGER,
};

pub const WTS_DISPLAY_IOCTL = extern struct {
    pDisplayIOCtlData: [256]u8,
    cbDisplayIOCtlData: u32,
};

pub const WTS_LOGON_ERROR_REDIRECTOR_RESPONSE = enum(i32) {
    INVALID = 0,
    NOT_HANDLED = 1,
    HANDLED_SHOW = 2,
    HANDLED_DONT_SHOW = 3,
    HANDLED_DONT_SHOW_START_OVER = 4,
};
pub const WTS_LOGON_ERR_INVALID = WTS_LOGON_ERROR_REDIRECTOR_RESPONSE.INVALID;
pub const WTS_LOGON_ERR_NOT_HANDLED = WTS_LOGON_ERROR_REDIRECTOR_RESPONSE.NOT_HANDLED;
pub const WTS_LOGON_ERR_HANDLED_SHOW = WTS_LOGON_ERROR_REDIRECTOR_RESPONSE.HANDLED_SHOW;
pub const WTS_LOGON_ERR_HANDLED_DONT_SHOW = WTS_LOGON_ERROR_REDIRECTOR_RESPONSE.HANDLED_DONT_SHOW;
pub const WTS_LOGON_ERR_HANDLED_DONT_SHOW_START_OVER = WTS_LOGON_ERROR_REDIRECTOR_RESPONSE.HANDLED_DONT_SHOW_START_OVER;

pub const WTS_PROPERTY_VALUE = extern struct {
    Type: u16,
    u: extern union {
        ulVal: u32,
        strVal: extern struct {
            size: u32,
            pstrVal: ?PWSTR,
        },
        bVal: extern struct {
            size: u32,
            pbVal: ?PSTR,
        },
        guidVal: Guid,
    },
};

pub const WTS_CERT_TYPE = enum(i32) {
    INVALID = 0,
    PROPRIETORY = 1,
    X509 = 2,
};
pub const WTS_CERT_TYPE_INVALID = WTS_CERT_TYPE.INVALID;
pub const WTS_CERT_TYPE_PROPRIETORY = WTS_CERT_TYPE.PROPRIETORY;
pub const WTS_CERT_TYPE_X509 = WTS_CERT_TYPE.X509;

pub const WTS_LICENSE_CAPABILITIES = extern struct {
    KeyExchangeAlg: u32,
    ProtocolVer: u32,
    fAuthenticateServer: BOOL,
    CertType: WTS_CERT_TYPE,
    cbClientName: u32,
    rgbClientName: [42]u8,
};

pub const WRDS_CONNECTION_SETTING_LEVEL = enum(i32) {
    INVALID = 0,
    @"1" = 1,
};
pub const WRDS_CONNECTION_SETTING_LEVEL_INVALID = WRDS_CONNECTION_SETTING_LEVEL.INVALID;
pub const WRDS_CONNECTION_SETTING_LEVEL_1 = WRDS_CONNECTION_SETTING_LEVEL.@"1";

pub const WRDS_LISTENER_SETTING_LEVEL = enum(i32) {
    INVALID = 0,
    @"1" = 1,
};
pub const WRDS_LISTENER_SETTING_LEVEL_INVALID = WRDS_LISTENER_SETTING_LEVEL.INVALID;
pub const WRDS_LISTENER_SETTING_LEVEL_1 = WRDS_LISTENER_SETTING_LEVEL.@"1";

pub const WRDS_SETTING_TYPE = enum(i32) {
    INVALID = 0,
    MACHINE = 1,
    USER = 2,
    SAM = 3,
};
pub const WRDS_SETTING_TYPE_INVALID = WRDS_SETTING_TYPE.INVALID;
pub const WRDS_SETTING_TYPE_MACHINE = WRDS_SETTING_TYPE.MACHINE;
pub const WRDS_SETTING_TYPE_USER = WRDS_SETTING_TYPE.USER;
pub const WRDS_SETTING_TYPE_SAM = WRDS_SETTING_TYPE.SAM;

pub const WRDS_SETTING_STATUS = enum(i32) {
    NOTAPPLICABLE = -1,
    DISABLED = 0,
    ENABLED = 1,
    NOTCONFIGURED = 2,
};
pub const WRDS_SETTING_STATUS_NOTAPPLICABLE = WRDS_SETTING_STATUS.NOTAPPLICABLE;
pub const WRDS_SETTING_STATUS_DISABLED = WRDS_SETTING_STATUS.DISABLED;
pub const WRDS_SETTING_STATUS_ENABLED = WRDS_SETTING_STATUS.ENABLED;
pub const WRDS_SETTING_STATUS_NOTCONFIGURED = WRDS_SETTING_STATUS.NOTCONFIGURED;

pub const WRDS_SETTING_LEVEL = enum(i32) {
    INVALID = 0,
    @"1" = 1,
};
pub const WRDS_SETTING_LEVEL_INVALID = WRDS_SETTING_LEVEL.INVALID;
pub const WRDS_SETTING_LEVEL_1 = WRDS_SETTING_LEVEL.@"1";

pub const WRDS_LISTENER_SETTINGS_1 = extern struct {
    MaxProtocolListenerConnectionCount: u32,
    SecurityDescriptorSize: u32,
    pSecurityDescriptor: ?*u8,
};

pub const WRDS_LISTENER_SETTING = extern union {
    WRdsListenerSettings1: WRDS_LISTENER_SETTINGS_1,
};

pub const WRDS_LISTENER_SETTINGS = extern struct {
    WRdsListenerSettingLevel: WRDS_LISTENER_SETTING_LEVEL,
    WRdsListenerSetting: WRDS_LISTENER_SETTING,
};

pub const WRDS_CONNECTION_SETTINGS_1 = extern struct {
    fInheritInitialProgram: BOOLEAN,
    fInheritColorDepth: BOOLEAN,
    fHideTitleBar: BOOLEAN,
    fInheritAutoLogon: BOOLEAN,
    fMaximizeShell: BOOLEAN,
    fDisablePNP: BOOLEAN,
    fPasswordIsScPin: BOOLEAN,
    fPromptForPassword: BOOLEAN,
    fDisableCpm: BOOLEAN,
    fDisableCdm: BOOLEAN,
    fDisableCcm: BOOLEAN,
    fDisableLPT: BOOLEAN,
    fDisableClip: BOOLEAN,
    fResetBroken: BOOLEAN,
    fDisableEncryption: BOOLEAN,
    fDisableAutoReconnect: BOOLEAN,
    fDisableCtrlAltDel: BOOLEAN,
    fDoubleClickDetect: BOOLEAN,
    fEnableWindowsKey: BOOLEAN,
    fUsingSavedCreds: BOOLEAN,
    fMouse: BOOLEAN,
    fNoAudioPlayback: BOOLEAN,
    fRemoteConsoleAudio: BOOLEAN,
    EncryptionLevel: u8,
    ColorDepth: u16,
    ProtocolType: u16,
    HRes: u16,
    VRes: u16,
    ClientProductId: u16,
    OutBufCountHost: u16,
    OutBufCountClient: u16,
    OutBufLength: u16,
    KeyboardLayout: u32,
    MaxConnectionTime: u32,
    MaxDisconnectionTime: u32,
    MaxIdleTime: u32,
    PerformanceFlags: u32,
    KeyboardType: u32,
    KeyboardSubType: u32,
    KeyboardFunctionKey: u32,
    ActiveInputLocale: u32,
    SerialNumber: u32,
    ClientAddressFamily: u32,
    ClientBuildNumber: u32,
    ClientSessionId: u32,
    WorkDirectory: [257]u16,
    InitialProgram: [257]u16,
    UserName: [256]u16,
    Domain: [256]u16,
    Password: [256]u16,
    ProtocolName: [9]u16,
    DisplayDriverName: [9]u16,
    DisplayDeviceName: [20]u16,
    imeFileName: [33]u16,
    AudioDriverName: [9]u16,
    ClientName: [21]u16,
    ClientAddress: [31]u16,
    ClientDirectory: [257]u16,
    ClientDigProductId: [33]u16,
    ClientSockAddress: WTS_SOCKADDR,
    ClientTimeZone: WTS_TIME_ZONE_INFORMATION,
    WRdsListenerSettings: WRDS_LISTENER_SETTINGS,
    EventLogActivityId: Guid,
    ContextSize: u32,
    ContextData: ?*u8,
};

pub const WRDS_SETTINGS_1 = extern struct {
    WRdsDisableClipStatus: WRDS_SETTING_STATUS,
    WRdsDisableClipValue: u32,
    WRdsDisableLPTStatus: WRDS_SETTING_STATUS,
    WRdsDisableLPTValue: u32,
    WRdsDisableCcmStatus: WRDS_SETTING_STATUS,
    WRdsDisableCcmValue: u32,
    WRdsDisableCdmStatus: WRDS_SETTING_STATUS,
    WRdsDisableCdmValue: u32,
    WRdsDisableCpmStatus: WRDS_SETTING_STATUS,
    WRdsDisableCpmValue: u32,
    WRdsDisablePnpStatus: WRDS_SETTING_STATUS,
    WRdsDisablePnpValue: u32,
    WRdsEncryptionLevelStatus: WRDS_SETTING_STATUS,
    WRdsEncryptionValue: u32,
    WRdsColorDepthStatus: WRDS_SETTING_STATUS,
    WRdsColorDepthValue: u32,
    WRdsDisableAutoReconnecetStatus: WRDS_SETTING_STATUS,
    WRdsDisableAutoReconnecetValue: u32,
    WRdsDisableEncryptionStatus: WRDS_SETTING_STATUS,
    WRdsDisableEncryptionValue: u32,
    WRdsResetBrokenStatus: WRDS_SETTING_STATUS,
    WRdsResetBrokenValue: u32,
    WRdsMaxIdleTimeStatus: WRDS_SETTING_STATUS,
    WRdsMaxIdleTimeValue: u32,
    WRdsMaxDisconnectTimeStatus: WRDS_SETTING_STATUS,
    WRdsMaxDisconnectTimeValue: u32,
    WRdsMaxConnectTimeStatus: WRDS_SETTING_STATUS,
    WRdsMaxConnectTimeValue: u32,
    WRdsKeepAliveStatus: WRDS_SETTING_STATUS,
    WRdsKeepAliveStartValue: BOOLEAN,
    WRdsKeepAliveIntervalValue: u32,
};

pub const WRDS_CONNECTION_SETTING = extern union {
    WRdsConnectionSettings1: WRDS_CONNECTION_SETTINGS_1,
};

pub const WRDS_CONNECTION_SETTINGS = extern struct {
    WRdsConnectionSettingLevel: WRDS_CONNECTION_SETTING_LEVEL,
    WRdsConnectionSetting: WRDS_CONNECTION_SETTING,
};

pub const WRDS_SETTING = extern union {
    WRdsSettings1: WRDS_SETTINGS_1,
};

pub const WRDS_SETTINGS = extern struct {
    WRdsSettingType: WRDS_SETTING_TYPE,
    WRdsSettingLevel: WRDS_SETTING_LEVEL,
    WRdsSetting: WRDS_SETTING,
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWTSProtocolManager_Value = Guid.initString("f9eaf6cc-ed79-4f01-821d-1f881b9f66cc");
pub const IID_IWTSProtocolManager = &IID_IWTSProtocolManager_Value;
pub const IWTSProtocolManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateListener: *const fn (
            self: *const IWTSProtocolManager,
            wsz_listener_name: ?PWSTR,
            p_protocol_listener: ?*?*IWTSProtocolListener,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyServiceStateChange: *const fn (
            self: *const IWTSProtocolManager,
            p_t_s_service_state_change: ?*WTS_SERVICE_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifySessionOfServiceStart: *const fn (
            self: *const IWTSProtocolManager,
            session_id: ?*WTS_SESSION_ID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifySessionOfServiceStop: *const fn (
            self: *const IWTSProtocolManager,
            session_id: ?*WTS_SESSION_ID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifySessionStateChange: *const fn (
            self: *const IWTSProtocolManager,
            session_id: ?*WTS_SESSION_ID,
            event_id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createListener(self: *const T, wsz_listener_name_: ?PWSTR, p_protocol_listener_: ?*?*IWTSProtocolListener) HRESULT {
                return @as(*const IWTSProtocolManager.VTable, @ptrCast(self.vtable)).CreateListener(@as(*const IWTSProtocolManager, @ptrCast(self)), wsz_listener_name_, p_protocol_listener_);
            }
            pub inline fn notifyServiceStateChange(self: *const T, p_t_s_service_state_change_: ?*WTS_SERVICE_STATE) HRESULT {
                return @as(*const IWTSProtocolManager.VTable, @ptrCast(self.vtable)).NotifyServiceStateChange(@as(*const IWTSProtocolManager, @ptrCast(self)), p_t_s_service_state_change_);
            }
            pub inline fn notifySessionOfServiceStart(self: *const T, session_id_: ?*WTS_SESSION_ID) HRESULT {
                return @as(*const IWTSProtocolManager.VTable, @ptrCast(self.vtable)).NotifySessionOfServiceStart(@as(*const IWTSProtocolManager, @ptrCast(self)), session_id_);
            }
            pub inline fn notifySessionOfServiceStop(self: *const T, session_id_: ?*WTS_SESSION_ID) HRESULT {
                return @as(*const IWTSProtocolManager.VTable, @ptrCast(self.vtable)).NotifySessionOfServiceStop(@as(*const IWTSProtocolManager, @ptrCast(self)), session_id_);
            }
            pub inline fn notifySessionStateChange(self: *const T, session_id_: ?*WTS_SESSION_ID, event_id_: u32) HRESULT {
                return @as(*const IWTSProtocolManager.VTable, @ptrCast(self.vtable)).NotifySessionStateChange(@as(*const IWTSProtocolManager, @ptrCast(self)), session_id_, event_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWTSProtocolListener_Value = Guid.initString("23083765-45f0-4394-8f69-32b2bc0ef4ca");
pub const IID_IWTSProtocolListener = &IID_IWTSProtocolListener_Value;
pub const IWTSProtocolListener = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartListen: *const fn (
            self: *const IWTSProtocolListener,
            p_callback: ?*IWTSProtocolListenerCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopListen: *const fn (
            self: *const IWTSProtocolListener,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn startListen(self: *const T, p_callback_: ?*IWTSProtocolListenerCallback) HRESULT {
                return @as(*const IWTSProtocolListener.VTable, @ptrCast(self.vtable)).StartListen(@as(*const IWTSProtocolListener, @ptrCast(self)), p_callback_);
            }
            pub inline fn stopListen(self: *const T) HRESULT {
                return @as(*const IWTSProtocolListener.VTable, @ptrCast(self.vtable)).StopListen(@as(*const IWTSProtocolListener, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWTSProtocolListenerCallback_Value = Guid.initString("23083765-1a2d-4de2-97de-4a35f260f0b3");
pub const IID_IWTSProtocolListenerCallback = &IID_IWTSProtocolListenerCallback_Value;
pub const IWTSProtocolListenerCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnConnected: *const fn (
            self: *const IWTSProtocolListenerCallback,
            p_connection: ?*IWTSProtocolConnection,
            p_callback: ?*?*IWTSProtocolConnectionCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onConnected(self: *const T, p_connection_: ?*IWTSProtocolConnection, p_callback_: ?*?*IWTSProtocolConnectionCallback) HRESULT {
                return @as(*const IWTSProtocolListenerCallback.VTable, @ptrCast(self.vtable)).OnConnected(@as(*const IWTSProtocolListenerCallback, @ptrCast(self)), p_connection_, p_callback_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWTSProtocolConnection_Value = Guid.initString("23083765-9095-4648-98bf-ef81c914032d");
pub const IID_IWTSProtocolConnection = &IID_IWTSProtocolConnection_Value;
pub const IWTSProtocolConnection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLogonErrorRedirector: *const fn (
            self: *const IWTSProtocolConnection,
            pp_logon_error_redir: ?*?*IWTSProtocolLogonErrorRedirector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendPolicyData: *const fn (
            self: *const IWTSProtocolConnection,
            p_policy_data: ?*WTS_POLICY_DATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AcceptConnection: *const fn (
            self: *const IWTSProtocolConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClientData: *const fn (
            self: *const IWTSProtocolConnection,
            p_client_data: ?*WTS_CLIENT_DATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserCredentials: *const fn (
            self: *const IWTSProtocolConnection,
            p_user_creds: ?*WTS_USER_CREDENTIAL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLicenseConnection: *const fn (
            self: *const IWTSProtocolConnection,
            pp_license_connection: ?*?*IWTSProtocolLicenseConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AuthenticateClientToSession: *const fn (
            self: *const IWTSProtocolConnection,
            session_id: ?*WTS_SESSION_ID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifySessionId: *const fn (
            self: *const IWTSProtocolConnection,
            session_id: ?*WTS_SESSION_ID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProtocolHandles: *const fn (
            self: *const IWTSProtocolConnection,
            p_keyboard_handle: ?*HANDLE_PTR,
            p_mouse_handle: ?*HANDLE_PTR,
            p_beep_handle: ?*HANDLE_PTR,
            p_video_handle: ?*HANDLE_PTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConnectNotify: *const fn (
            self: *const IWTSProtocolConnection,
            session_id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsUserAllowedToLogon: *const fn (
            self: *const IWTSProtocolConnection,
            session_id: u32,
            user_token: HANDLE_PTR,
            p_domain_name: ?PWSTR,
            p_user_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SessionArbitrationEnumeration: *const fn (
            self: *const IWTSProtocolConnection,
            h_user_token: HANDLE_PTR,
            b_single_session_per_user_enabled: BOOL,
            p_session_id_array: [*]u32,
            pdw_session_identifier_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LogonNotify: *const fn (
            self: *const IWTSProtocolConnection,
            h_client_token: HANDLE_PTR,
            wsz_user_name: ?PWSTR,
            wsz_domain_name: ?PWSTR,
            session_id: ?*WTS_SESSION_ID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserData: *const fn (
            self: *const IWTSProtocolConnection,
            p_policy_data: ?*WTS_POLICY_DATA,
            p_client_data: ?*WTS_USER_DATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisconnectNotify: *const fn (
            self: *const IWTSProtocolConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IWTSProtocolConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProtocolStatus: *const fn (
            self: *const IWTSProtocolConnection,
            p_protocol_status: ?*WTS_PROTOCOL_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastInputTime: *const fn (
            self: *const IWTSProtocolConnection,
            p_last_input_time: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetErrorInfo: *const fn (
            self: *const IWTSProtocolConnection,
            ul_error: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendBeep: *const fn (
            self: *const IWTSProtocolConnection,
            frequency: u32,
            duration: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVirtualChannel: *const fn (
            self: *const IWTSProtocolConnection,
            sz_endpoint_name: ?PSTR,
            b_static: BOOL,
            requested_priority: u32,
            ph_channel: ?*usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryProperty: *const fn (
            self: *const IWTSProtocolConnection,
            query_type: Guid,
            ul_num_entries_in: u32,
            ul_num_entries_out: u32,
            p_property_entries_in: [*]WTS_PROPERTY_VALUE,
            p_property_entries_out: [*]WTS_PROPERTY_VALUE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShadowConnection: *const fn (
            self: *const IWTSProtocolConnection,
            pp_shadow_connection: ?*?*IWTSProtocolShadowConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getLogonErrorRedirector(self: *const T, pp_logon_error_redir_: ?*?*IWTSProtocolLogonErrorRedirector) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).GetLogonErrorRedirector(@as(*const IWTSProtocolConnection, @ptrCast(self)), pp_logon_error_redir_);
            }
            pub inline fn sendPolicyData(self: *const T, p_policy_data_: ?*WTS_POLICY_DATA) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).SendPolicyData(@as(*const IWTSProtocolConnection, @ptrCast(self)), p_policy_data_);
            }
            pub inline fn acceptConnection(self: *const T) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).AcceptConnection(@as(*const IWTSProtocolConnection, @ptrCast(self)));
            }
            pub inline fn getClientData(self: *const T, p_client_data_: ?*WTS_CLIENT_DATA) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).GetClientData(@as(*const IWTSProtocolConnection, @ptrCast(self)), p_client_data_);
            }
            pub inline fn getUserCredentials(self: *const T, p_user_creds_: ?*WTS_USER_CREDENTIAL) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).GetUserCredentials(@as(*const IWTSProtocolConnection, @ptrCast(self)), p_user_creds_);
            }
            pub inline fn getLicenseConnection(self: *const T, pp_license_connection_: ?*?*IWTSProtocolLicenseConnection) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).GetLicenseConnection(@as(*const IWTSProtocolConnection, @ptrCast(self)), pp_license_connection_);
            }
            pub inline fn authenticateClientToSession(self: *const T, session_id_: ?*WTS_SESSION_ID) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).AuthenticateClientToSession(@as(*const IWTSProtocolConnection, @ptrCast(self)), session_id_);
            }
            pub inline fn notifySessionId(self: *const T, session_id_: ?*WTS_SESSION_ID) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).NotifySessionId(@as(*const IWTSProtocolConnection, @ptrCast(self)), session_id_);
            }
            pub inline fn getProtocolHandles(self: *const T, p_keyboard_handle_: ?*HANDLE_PTR, p_mouse_handle_: ?*HANDLE_PTR, p_beep_handle_: ?*HANDLE_PTR, p_video_handle_: ?*HANDLE_PTR) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).GetProtocolHandles(@as(*const IWTSProtocolConnection, @ptrCast(self)), p_keyboard_handle_, p_mouse_handle_, p_beep_handle_, p_video_handle_);
            }
            pub inline fn connectNotify(self: *const T, session_id_: u32) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).ConnectNotify(@as(*const IWTSProtocolConnection, @ptrCast(self)), session_id_);
            }
            pub inline fn isUserAllowedToLogon(self: *const T, session_id_: u32, user_token_: HANDLE_PTR, p_domain_name_: ?PWSTR, p_user_name_: ?PWSTR) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).IsUserAllowedToLogon(@as(*const IWTSProtocolConnection, @ptrCast(self)), session_id_, user_token_, p_domain_name_, p_user_name_);
            }
            pub inline fn sessionArbitrationEnumeration(self: *const T, h_user_token_: HANDLE_PTR, b_single_session_per_user_enabled_: BOOL, p_session_id_array_: [*]u32, pdw_session_identifier_count_: ?*u32) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).SessionArbitrationEnumeration(@as(*const IWTSProtocolConnection, @ptrCast(self)), h_user_token_, b_single_session_per_user_enabled_, p_session_id_array_, pdw_session_identifier_count_);
            }
            pub inline fn logonNotify(self: *const T, h_client_token_: HANDLE_PTR, wsz_user_name_: ?PWSTR, wsz_domain_name_: ?PWSTR, session_id_: ?*WTS_SESSION_ID) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).LogonNotify(@as(*const IWTSProtocolConnection, @ptrCast(self)), h_client_token_, wsz_user_name_, wsz_domain_name_, session_id_);
            }
            pub inline fn getUserData(self: *const T, p_policy_data_: ?*WTS_POLICY_DATA, p_client_data_: ?*WTS_USER_DATA) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).GetUserData(@as(*const IWTSProtocolConnection, @ptrCast(self)), p_policy_data_, p_client_data_);
            }
            pub inline fn disconnectNotify(self: *const T) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).DisconnectNotify(@as(*const IWTSProtocolConnection, @ptrCast(self)));
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).Close(@as(*const IWTSProtocolConnection, @ptrCast(self)));
            }
            pub inline fn getProtocolStatus(self: *const T, p_protocol_status_: ?*WTS_PROTOCOL_STATUS) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).GetProtocolStatus(@as(*const IWTSProtocolConnection, @ptrCast(self)), p_protocol_status_);
            }
            pub inline fn getLastInputTime(self: *const T, p_last_input_time_: ?*u64) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).GetLastInputTime(@as(*const IWTSProtocolConnection, @ptrCast(self)), p_last_input_time_);
            }
            pub inline fn setErrorInfo(self: *const T, ul_error_: u32) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).SetErrorInfo(@as(*const IWTSProtocolConnection, @ptrCast(self)), ul_error_);
            }
            pub inline fn sendBeep(self: *const T, frequency_: u32, duration_: u32) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).SendBeep(@as(*const IWTSProtocolConnection, @ptrCast(self)), frequency_, duration_);
            }
            pub inline fn createVirtualChannel(self: *const T, sz_endpoint_name_: ?PSTR, b_static_: BOOL, requested_priority_: u32, ph_channel_: ?*usize) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).CreateVirtualChannel(@as(*const IWTSProtocolConnection, @ptrCast(self)), sz_endpoint_name_, b_static_, requested_priority_, ph_channel_);
            }
            pub inline fn queryProperty(self: *const T, query_type_: Guid, ul_num_entries_in_: u32, ul_num_entries_out_: u32, p_property_entries_in_: [*]WTS_PROPERTY_VALUE, p_property_entries_out_: [*]WTS_PROPERTY_VALUE) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).QueryProperty(@as(*const IWTSProtocolConnection, @ptrCast(self)), query_type_, ul_num_entries_in_, ul_num_entries_out_, p_property_entries_in_, p_property_entries_out_);
            }
            pub inline fn getShadowConnection(self: *const T, pp_shadow_connection_: ?*?*IWTSProtocolShadowConnection) HRESULT {
                return @as(*const IWTSProtocolConnection.VTable, @ptrCast(self.vtable)).GetShadowConnection(@as(*const IWTSProtocolConnection, @ptrCast(self)), pp_shadow_connection_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWTSProtocolConnectionCallback_Value = Guid.initString("23083765-75eb-41fe-b4fb-e086242afa0f");
pub const IID_IWTSProtocolConnectionCallback = &IID_IWTSProtocolConnectionCallback_Value;
pub const IWTSProtocolConnectionCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnReady: *const fn (
            self: *const IWTSProtocolConnectionCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BrokenConnection: *const fn (
            self: *const IWTSProtocolConnectionCallback,
            reason: u32,
            source: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopScreenUpdates: *const fn (
            self: *const IWTSProtocolConnectionCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RedrawWindow: *const fn (
            self: *const IWTSProtocolConnectionCallback,
            rect: ?*WTS_SMALL_RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisplayIOCtl: *const fn (
            self: *const IWTSProtocolConnectionCallback,
            display_i_o_ctl: ?*WTS_DISPLAY_IOCTL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onReady(self: *const T) HRESULT {
                return @as(*const IWTSProtocolConnectionCallback.VTable, @ptrCast(self.vtable)).OnReady(@as(*const IWTSProtocolConnectionCallback, @ptrCast(self)));
            }
            pub inline fn brokenConnection(self: *const T, reason_: u32, source_: u32) HRESULT {
                return @as(*const IWTSProtocolConnectionCallback.VTable, @ptrCast(self.vtable)).BrokenConnection(@as(*const IWTSProtocolConnectionCallback, @ptrCast(self)), reason_, source_);
            }
            pub inline fn stopScreenUpdates(self: *const T) HRESULT {
                return @as(*const IWTSProtocolConnectionCallback.VTable, @ptrCast(self.vtable)).StopScreenUpdates(@as(*const IWTSProtocolConnectionCallback, @ptrCast(self)));
            }
            pub inline fn redrawWindow(self: *const T, rect_: ?*WTS_SMALL_RECT) HRESULT {
                return @as(*const IWTSProtocolConnectionCallback.VTable, @ptrCast(self.vtable)).RedrawWindow(@as(*const IWTSProtocolConnectionCallback, @ptrCast(self)), rect_);
            }
            pub inline fn displayIOCtl(self: *const T, display_i_o_ctl_: ?*WTS_DISPLAY_IOCTL) HRESULT {
                return @as(*const IWTSProtocolConnectionCallback.VTable, @ptrCast(self.vtable)).DisplayIOCtl(@as(*const IWTSProtocolConnectionCallback, @ptrCast(self)), display_i_o_ctl_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWTSProtocolShadowConnection_Value = Guid.initString("ee3b0c14-37fb-456b-bab3-6d6cd51e13bf");
pub const IID_IWTSProtocolShadowConnection = &IID_IWTSProtocolShadowConnection_Value;
pub const IWTSProtocolShadowConnection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Start: *const fn (
            self: *const IWTSProtocolShadowConnection,
            p_target_server_name: ?PWSTR,
            target_session_id: u32,
            hot_key_vk: u8,
            hotkey_modifiers: u16,
            p_shadow_callback: ?*IWTSProtocolShadowCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const IWTSProtocolShadowConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoTarget: *const fn (
            self: *const IWTSProtocolShadowConnection,
            p_param1: [*:0]u8,
            param1_size: u32,
            p_param2: [*:0]u8,
            param2_size: u32,
            p_param3: [*:0]u8,
            param3_size: u32,
            p_param4: [*:0]u8,
            param4_size: u32,
            p_client_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn start(self: *const T, p_target_server_name_: ?PWSTR, target_session_id_: u32, hot_key_vk_: u8, hotkey_modifiers_: u16, p_shadow_callback_: ?*IWTSProtocolShadowCallback) HRESULT {
                return @as(*const IWTSProtocolShadowConnection.VTable, @ptrCast(self.vtable)).Start(@as(*const IWTSProtocolShadowConnection, @ptrCast(self)), p_target_server_name_, target_session_id_, hot_key_vk_, hotkey_modifiers_, p_shadow_callback_);
            }
            pub inline fn stop(self: *const T) HRESULT {
                return @as(*const IWTSProtocolShadowConnection.VTable, @ptrCast(self.vtable)).Stop(@as(*const IWTSProtocolShadowConnection, @ptrCast(self)));
            }
            pub inline fn doTarget(self: *const T, p_param1_: [*:0]u8, param1_size_: u32, p_param2_: [*:0]u8, param2_size_: u32, p_param3_: [*:0]u8, param3_size_: u32, p_param4_: [*:0]u8, param4_size_: u32, p_client_name_: ?PWSTR) HRESULT {
                return @as(*const IWTSProtocolShadowConnection.VTable, @ptrCast(self.vtable)).DoTarget(@as(*const IWTSProtocolShadowConnection, @ptrCast(self)), p_param1_, param1_size_, p_param2_, param2_size_, p_param3_, param3_size_, p_param4_, param4_size_, p_client_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWTSProtocolShadowCallback_Value = Guid.initString("503a2504-aae5-4ab1-93e0-6d1c4bc6f71a");
pub const IID_IWTSProtocolShadowCallback = &IID_IWTSProtocolShadowCallback_Value;
pub const IWTSProtocolShadowCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StopShadow: *const fn (
            self: *const IWTSProtocolShadowCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeTargetShadow: *const fn (
            self: *const IWTSProtocolShadowCallback,
            p_target_server_name: ?PWSTR,
            target_session_id: u32,
            p_param1: [*:0]u8,
            param1_size: u32,
            p_param2: [*:0]u8,
            param2_size: u32,
            p_param3: [*:0]u8,
            param3_size: u32,
            p_param4: [*:0]u8,
            param4_size: u32,
            p_client_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn stopShadow(self: *const T) HRESULT {
                return @as(*const IWTSProtocolShadowCallback.VTable, @ptrCast(self.vtable)).StopShadow(@as(*const IWTSProtocolShadowCallback, @ptrCast(self)));
            }
            pub inline fn invokeTargetShadow(self: *const T, p_target_server_name_: ?PWSTR, target_session_id_: u32, p_param1_: [*:0]u8, param1_size_: u32, p_param2_: [*:0]u8, param2_size_: u32, p_param3_: [*:0]u8, param3_size_: u32, p_param4_: [*:0]u8, param4_size_: u32, p_client_name_: ?PWSTR) HRESULT {
                return @as(*const IWTSProtocolShadowCallback.VTable, @ptrCast(self.vtable)).InvokeTargetShadow(@as(*const IWTSProtocolShadowCallback, @ptrCast(self)), p_target_server_name_, target_session_id_, p_param1_, param1_size_, p_param2_, param2_size_, p_param3_, param3_size_, p_param4_, param4_size_, p_client_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWTSProtocolLicenseConnection_Value = Guid.initString("23083765-178c-4079-8e4a-fea6496a4d70");
pub const IID_IWTSProtocolLicenseConnection = &IID_IWTSProtocolLicenseConnection_Value;
pub const IWTSProtocolLicenseConnection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RequestLicensingCapabilities: *const fn (
            self: *const IWTSProtocolLicenseConnection,
            pp_license_capabilities: ?*WTS_LICENSE_CAPABILITIES,
            pcb_license_capabilities: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendClientLicense: *const fn (
            self: *const IWTSProtocolLicenseConnection,
            p_client_license: [*:0]u8,
            cb_client_license: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestClientLicense: *const fn (
            self: *const IWTSProtocolLicenseConnection,
            reserve1: [*:0]u8,
            reserve2: u32,
            pp_client_license: [*:0]u8,
            pcb_client_license: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProtocolComplete: *const fn (
            self: *const IWTSProtocolLicenseConnection,
            ul_complete: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn requestLicensingCapabilities(self: *const T, pp_license_capabilities_: ?*WTS_LICENSE_CAPABILITIES, pcb_license_capabilities_: ?*u32) HRESULT {
                return @as(*const IWTSProtocolLicenseConnection.VTable, @ptrCast(self.vtable)).RequestLicensingCapabilities(@as(*const IWTSProtocolLicenseConnection, @ptrCast(self)), pp_license_capabilities_, pcb_license_capabilities_);
            }
            pub inline fn sendClientLicense(self: *const T, p_client_license_: [*:0]u8, cb_client_license_: u32) HRESULT {
                return @as(*const IWTSProtocolLicenseConnection.VTable, @ptrCast(self.vtable)).SendClientLicense(@as(*const IWTSProtocolLicenseConnection, @ptrCast(self)), p_client_license_, cb_client_license_);
            }
            pub inline fn requestClientLicense(self: *const T, reserve1_: [*:0]u8, reserve2_: u32, pp_client_license_: [*:0]u8, pcb_client_license_: ?*u32) HRESULT {
                return @as(*const IWTSProtocolLicenseConnection.VTable, @ptrCast(self.vtable)).RequestClientLicense(@as(*const IWTSProtocolLicenseConnection, @ptrCast(self)), reserve1_, reserve2_, pp_client_license_, pcb_client_license_);
            }
            pub inline fn protocolComplete(self: *const T, ul_complete_: u32) HRESULT {
                return @as(*const IWTSProtocolLicenseConnection.VTable, @ptrCast(self.vtable)).ProtocolComplete(@as(*const IWTSProtocolLicenseConnection, @ptrCast(self)), ul_complete_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2008'
const IID_IWTSProtocolLogonErrorRedirector_Value = Guid.initString("fd9b61a7-2916-4627-8dee-4328711ad6cb");
pub const IID_IWTSProtocolLogonErrorRedirector = &IID_IWTSProtocolLogonErrorRedirector_Value;
pub const IWTSProtocolLogonErrorRedirector = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnBeginPainting: *const fn (
            self: *const IWTSProtocolLogonErrorRedirector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RedirectStatus: *const fn (
            self: *const IWTSProtocolLogonErrorRedirector,
            psz_message: ?[*:0]const u16,
            p_response: ?*WTS_LOGON_ERROR_REDIRECTOR_RESPONSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RedirectMessage: *const fn (
            self: *const IWTSProtocolLogonErrorRedirector,
            psz_caption: ?[*:0]const u16,
            psz_message: ?[*:0]const u16,
            u_type: u32,
            p_response: ?*WTS_LOGON_ERROR_REDIRECTOR_RESPONSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RedirectLogonError: *const fn (
            self: *const IWTSProtocolLogonErrorRedirector,
            nts_status: i32,
            nts_substatus: i32,
            psz_caption: ?[*:0]const u16,
            psz_message: ?[*:0]const u16,
            u_type: u32,
            p_response: ?*WTS_LOGON_ERROR_REDIRECTOR_RESPONSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onBeginPainting(self: *const T) HRESULT {
                return @as(*const IWTSProtocolLogonErrorRedirector.VTable, @ptrCast(self.vtable)).OnBeginPainting(@as(*const IWTSProtocolLogonErrorRedirector, @ptrCast(self)));
            }
            pub inline fn redirectStatus(self: *const T, psz_message_: ?[*:0]const u16, p_response_: ?*WTS_LOGON_ERROR_REDIRECTOR_RESPONSE) HRESULT {
                return @as(*const IWTSProtocolLogonErrorRedirector.VTable, @ptrCast(self.vtable)).RedirectStatus(@as(*const IWTSProtocolLogonErrorRedirector, @ptrCast(self)), psz_message_, p_response_);
            }
            pub inline fn redirectMessage(self: *const T, psz_caption_: ?[*:0]const u16, psz_message_: ?[*:0]const u16, u_type_: u32, p_response_: ?*WTS_LOGON_ERROR_REDIRECTOR_RESPONSE) HRESULT {
                return @as(*const IWTSProtocolLogonErrorRedirector.VTable, @ptrCast(self.vtable)).RedirectMessage(@as(*const IWTSProtocolLogonErrorRedirector, @ptrCast(self)), psz_caption_, psz_message_, u_type_, p_response_);
            }
            pub inline fn redirectLogonError(self: *const T, nts_status_: i32, nts_substatus_: i32, psz_caption_: ?[*:0]const u16, psz_message_: ?[*:0]const u16, u_type_: u32, p_response_: ?*WTS_LOGON_ERROR_REDIRECTOR_RESPONSE) HRESULT {
                return @as(*const IWTSProtocolLogonErrorRedirector.VTable, @ptrCast(self.vtable)).RedirectLogonError(@as(*const IWTSProtocolLogonErrorRedirector, @ptrCast(self)), nts_status_, nts_substatus_, psz_caption_, psz_message_, u_type_, p_response_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IWRdsProtocolSettings_Value = Guid.initString("654a5a6a-2550-47eb-b6f7-ebd637475265");
pub const IID_IWRdsProtocolSettings = &IID_IWRdsProtocolSettings_Value;
pub const IWRdsProtocolSettings = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSettings: *const fn (
            self: *const IWRdsProtocolSettings,
            w_rds_setting_type: WRDS_SETTING_TYPE,
            w_rds_setting_level: WRDS_SETTING_LEVEL,
            p_w_rds_settings: ?*WRDS_SETTINGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MergeSettings: *const fn (
            self: *const IWRdsProtocolSettings,
            p_w_rds_settings: ?*WRDS_SETTINGS,
            w_rds_connection_setting_level: WRDS_CONNECTION_SETTING_LEVEL,
            p_w_rds_connection_settings: ?*WRDS_CONNECTION_SETTINGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSettings(self: *const T, w_rds_setting_type_: WRDS_SETTING_TYPE, w_rds_setting_level_: WRDS_SETTING_LEVEL, p_w_rds_settings_: ?*WRDS_SETTINGS) HRESULT {
                return @as(*const IWRdsProtocolSettings.VTable, @ptrCast(self.vtable)).GetSettings(@as(*const IWRdsProtocolSettings, @ptrCast(self)), w_rds_setting_type_, w_rds_setting_level_, p_w_rds_settings_);
            }
            pub inline fn mergeSettings(self: *const T, p_w_rds_settings_: ?*WRDS_SETTINGS, w_rds_connection_setting_level_: WRDS_CONNECTION_SETTING_LEVEL, p_w_rds_connection_settings_: ?*WRDS_CONNECTION_SETTINGS) HRESULT {
                return @as(*const IWRdsProtocolSettings.VTable, @ptrCast(self.vtable)).MergeSettings(@as(*const IWRdsProtocolSettings, @ptrCast(self)), p_w_rds_settings_, w_rds_connection_setting_level_, p_w_rds_connection_settings_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IWRdsProtocolManager_Value = Guid.initString("dc796967-3abb-40cd-a446-105276b58950");
pub const IID_IWRdsProtocolManager = &IID_IWRdsProtocolManager_Value;
pub const IWRdsProtocolManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IWRdsProtocolManager,
            p_i_w_rds_settings: ?*IWRdsProtocolSettings,
            p_w_rds_settings: ?*WRDS_SETTINGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateListener: *const fn (
            self: *const IWRdsProtocolManager,
            wsz_listener_name: ?PWSTR,
            p_protocol_listener: ?*?*IWRdsProtocolListener,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyServiceStateChange: *const fn (
            self: *const IWRdsProtocolManager,
            p_t_s_service_state_change: ?*WTS_SERVICE_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifySessionOfServiceStart: *const fn (
            self: *const IWRdsProtocolManager,
            session_id: ?*WTS_SESSION_ID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifySessionOfServiceStop: *const fn (
            self: *const IWRdsProtocolManager,
            session_id: ?*WTS_SESSION_ID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifySessionStateChange: *const fn (
            self: *const IWRdsProtocolManager,
            session_id: ?*WTS_SESSION_ID,
            event_id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifySettingsChange: *const fn (
            self: *const IWRdsProtocolManager,
            p_w_rds_settings: ?*WRDS_SETTINGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Uninitialize: *const fn (
            self: *const IWRdsProtocolManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T, p_i_w_rds_settings_: ?*IWRdsProtocolSettings, p_w_rds_settings_: ?*WRDS_SETTINGS) HRESULT {
                return @as(*const IWRdsProtocolManager.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IWRdsProtocolManager, @ptrCast(self)), p_i_w_rds_settings_, p_w_rds_settings_);
            }
            pub inline fn createListener(self: *const T, wsz_listener_name_: ?PWSTR, p_protocol_listener_: ?*?*IWRdsProtocolListener) HRESULT {
                return @as(*const IWRdsProtocolManager.VTable, @ptrCast(self.vtable)).CreateListener(@as(*const IWRdsProtocolManager, @ptrCast(self)), wsz_listener_name_, p_protocol_listener_);
            }
            pub inline fn notifyServiceStateChange(self: *const T, p_t_s_service_state_change_: ?*WTS_SERVICE_STATE) HRESULT {
                return @as(*const IWRdsProtocolManager.VTable, @ptrCast(self.vtable)).NotifyServiceStateChange(@as(*const IWRdsProtocolManager, @ptrCast(self)), p_t_s_service_state_change_);
            }
            pub inline fn notifySessionOfServiceStart(self: *const T, session_id_: ?*WTS_SESSION_ID) HRESULT {
                return @as(*const IWRdsProtocolManager.VTable, @ptrCast(self.vtable)).NotifySessionOfServiceStart(@as(*const IWRdsProtocolManager, @ptrCast(self)), session_id_);
            }
            pub inline fn notifySessionOfServiceStop(self: *const T, session_id_: ?*WTS_SESSION_ID) HRESULT {
                return @as(*const IWRdsProtocolManager.VTable, @ptrCast(self.vtable)).NotifySessionOfServiceStop(@as(*const IWRdsProtocolManager, @ptrCast(self)), session_id_);
            }
            pub inline fn notifySessionStateChange(self: *const T, session_id_: ?*WTS_SESSION_ID, event_id_: u32) HRESULT {
                return @as(*const IWRdsProtocolManager.VTable, @ptrCast(self.vtable)).NotifySessionStateChange(@as(*const IWRdsProtocolManager, @ptrCast(self)), session_id_, event_id_);
            }
            pub inline fn notifySettingsChange(self: *const T, p_w_rds_settings_: ?*WRDS_SETTINGS) HRESULT {
                return @as(*const IWRdsProtocolManager.VTable, @ptrCast(self.vtable)).NotifySettingsChange(@as(*const IWRdsProtocolManager, @ptrCast(self)), p_w_rds_settings_);
            }
            pub inline fn uninitialize(self: *const T) HRESULT {
                return @as(*const IWRdsProtocolManager.VTable, @ptrCast(self.vtable)).Uninitialize(@as(*const IWRdsProtocolManager, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IWRdsProtocolListener_Value = Guid.initString("fcbc131b-c686-451d-a773-e279e230f540");
pub const IID_IWRdsProtocolListener = &IID_IWRdsProtocolListener_Value;
pub const IWRdsProtocolListener = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSettings: *const fn (
            self: *const IWRdsProtocolListener,
            w_rds_listener_setting_level: WRDS_LISTENER_SETTING_LEVEL,
            p_w_rds_listener_settings: ?*WRDS_LISTENER_SETTINGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartListen: *const fn (
            self: *const IWRdsProtocolListener,
            p_callback: ?*IWRdsProtocolListenerCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopListen: *const fn (
            self: *const IWRdsProtocolListener,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSettings(self: *const T, w_rds_listener_setting_level_: WRDS_LISTENER_SETTING_LEVEL, p_w_rds_listener_settings_: ?*WRDS_LISTENER_SETTINGS) HRESULT {
                return @as(*const IWRdsProtocolListener.VTable, @ptrCast(self.vtable)).GetSettings(@as(*const IWRdsProtocolListener, @ptrCast(self)), w_rds_listener_setting_level_, p_w_rds_listener_settings_);
            }
            pub inline fn startListen(self: *const T, p_callback_: ?*IWRdsProtocolListenerCallback) HRESULT {
                return @as(*const IWRdsProtocolListener.VTable, @ptrCast(self.vtable)).StartListen(@as(*const IWRdsProtocolListener, @ptrCast(self)), p_callback_);
            }
            pub inline fn stopListen(self: *const T) HRESULT {
                return @as(*const IWRdsProtocolListener.VTable, @ptrCast(self.vtable)).StopListen(@as(*const IWRdsProtocolListener, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IWRdsProtocolListenerCallback_Value = Guid.initString("3ab27e5b-4449-4dc1-b74a-91621d4fe984");
pub const IID_IWRdsProtocolListenerCallback = &IID_IWRdsProtocolListenerCallback_Value;
pub const IWRdsProtocolListenerCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnConnected: *const fn (
            self: *const IWRdsProtocolListenerCallback,
            p_connection: ?*IWRdsProtocolConnection,
            p_w_rds_connection_settings: ?*WRDS_CONNECTION_SETTINGS,
            p_callback: ?*?*IWRdsProtocolConnectionCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onConnected(self: *const T, p_connection_: ?*IWRdsProtocolConnection, p_w_rds_connection_settings_: ?*WRDS_CONNECTION_SETTINGS, p_callback_: ?*?*IWRdsProtocolConnectionCallback) HRESULT {
                return @as(*const IWRdsProtocolListenerCallback.VTable, @ptrCast(self.vtable)).OnConnected(@as(*const IWRdsProtocolListenerCallback, @ptrCast(self)), p_connection_, p_w_rds_connection_settings_, p_callback_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IWRdsProtocolConnection_Value = Guid.initString("324ed94f-fdaf-4ff6-81a8-42abe755830b");
pub const IID_IWRdsProtocolConnection = &IID_IWRdsProtocolConnection_Value;
pub const IWRdsProtocolConnection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetLogonErrorRedirector: *const fn (
            self: *const IWRdsProtocolConnection,
            pp_logon_error_redir: ?*?*IWRdsProtocolLogonErrorRedirector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AcceptConnection: *const fn (
            self: *const IWRdsProtocolConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClientData: *const fn (
            self: *const IWRdsProtocolConnection,
            p_client_data: ?*WTS_CLIENT_DATA,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetClientMonitorData: *const fn (
            self: *const IWRdsProtocolConnection,
            p_num_monitors: ?*u32,
            p_primary_monitor: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetUserCredentials: *const fn (
            self: *const IWRdsProtocolConnection,
            p_user_creds: ?*WTS_USER_CREDENTIAL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLicenseConnection: *const fn (
            self: *const IWRdsProtocolConnection,
            pp_license_connection: ?*?*IWRdsProtocolLicenseConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AuthenticateClientToSession: *const fn (
            self: *const IWRdsProtocolConnection,
            session_id: ?*WTS_SESSION_ID,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifySessionId: *const fn (
            self: *const IWRdsProtocolConnection,
            session_id: ?*WTS_SESSION_ID,
            session_handle: HANDLE_PTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetInputHandles: *const fn (
            self: *const IWRdsProtocolConnection,
            p_keyboard_handle: ?*HANDLE_PTR,
            p_mouse_handle: ?*HANDLE_PTR,
            p_beep_handle: ?*HANDLE_PTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetVideoHandle: *const fn (
            self: *const IWRdsProtocolConnection,
            p_video_handle: ?*HANDLE_PTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ConnectNotify: *const fn (
            self: *const IWRdsProtocolConnection,
            session_id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsUserAllowedToLogon: *const fn (
            self: *const IWRdsProtocolConnection,
            session_id: u32,
            user_token: HANDLE_PTR,
            p_domain_name: ?PWSTR,
            p_user_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SessionArbitrationEnumeration: *const fn (
            self: *const IWRdsProtocolConnection,
            h_user_token: HANDLE_PTR,
            b_single_session_per_user_enabled: BOOL,
            p_session_id_array: [*]u32,
            pdw_session_identifier_count: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        LogonNotify: *const fn (
            self: *const IWRdsProtocolConnection,
            h_client_token: HANDLE_PTR,
            wsz_user_name: ?PWSTR,
            wsz_domain_name: ?PWSTR,
            session_id: ?*WTS_SESSION_ID,
            p_w_rds_connection_settings: ?*WRDS_CONNECTION_SETTINGS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PreDisconnect: *const fn (
            self: *const IWRdsProtocolConnection,
            disconnect_reason: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisconnectNotify: *const fn (
            self: *const IWRdsProtocolConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Close: *const fn (
            self: *const IWRdsProtocolConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProtocolStatus: *const fn (
            self: *const IWRdsProtocolConnection,
            p_protocol_status: ?*WTS_PROTOCOL_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLastInputTime: *const fn (
            self: *const IWRdsProtocolConnection,
            p_last_input_time: ?*u64,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetErrorInfo: *const fn (
            self: *const IWRdsProtocolConnection,
            ul_error: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateVirtualChannel: *const fn (
            self: *const IWRdsProtocolConnection,
            sz_endpoint_name: ?PSTR,
            b_static: BOOL,
            requested_priority: u32,
            ph_channel: ?*usize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QueryProperty: *const fn (
            self: *const IWRdsProtocolConnection,
            query_type: Guid,
            ul_num_entries_in: u32,
            ul_num_entries_out: u32,
            p_property_entries_in: [*]WTS_PROPERTY_VALUE,
            p_property_entries_out: [*]WTS_PROPERTY_VALUE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetShadowConnection: *const fn (
            self: *const IWRdsProtocolConnection,
            pp_shadow_connection: ?*?*IWRdsProtocolShadowConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NotifyCommandProcessCreated: *const fn (
            self: *const IWRdsProtocolConnection,
            session_id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getLogonErrorRedirector(self: *const T, pp_logon_error_redir_: ?*?*IWRdsProtocolLogonErrorRedirector) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).GetLogonErrorRedirector(@as(*const IWRdsProtocolConnection, @ptrCast(self)), pp_logon_error_redir_);
            }
            pub inline fn acceptConnection(self: *const T) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).AcceptConnection(@as(*const IWRdsProtocolConnection, @ptrCast(self)));
            }
            pub inline fn getClientData(self: *const T, p_client_data_: ?*WTS_CLIENT_DATA) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).GetClientData(@as(*const IWRdsProtocolConnection, @ptrCast(self)), p_client_data_);
            }
            pub inline fn getClientMonitorData(self: *const T, p_num_monitors_: ?*u32, p_primary_monitor_: ?*u32) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).GetClientMonitorData(@as(*const IWRdsProtocolConnection, @ptrCast(self)), p_num_monitors_, p_primary_monitor_);
            }
            pub inline fn getUserCredentials(self: *const T, p_user_creds_: ?*WTS_USER_CREDENTIAL) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).GetUserCredentials(@as(*const IWRdsProtocolConnection, @ptrCast(self)), p_user_creds_);
            }
            pub inline fn getLicenseConnection(self: *const T, pp_license_connection_: ?*?*IWRdsProtocolLicenseConnection) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).GetLicenseConnection(@as(*const IWRdsProtocolConnection, @ptrCast(self)), pp_license_connection_);
            }
            pub inline fn authenticateClientToSession(self: *const T, session_id_: ?*WTS_SESSION_ID) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).AuthenticateClientToSession(@as(*const IWRdsProtocolConnection, @ptrCast(self)), session_id_);
            }
            pub inline fn notifySessionId(self: *const T, session_id_: ?*WTS_SESSION_ID, session_handle_: HANDLE_PTR) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).NotifySessionId(@as(*const IWRdsProtocolConnection, @ptrCast(self)), session_id_, session_handle_);
            }
            pub inline fn getInputHandles(self: *const T, p_keyboard_handle_: ?*HANDLE_PTR, p_mouse_handle_: ?*HANDLE_PTR, p_beep_handle_: ?*HANDLE_PTR) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).GetInputHandles(@as(*const IWRdsProtocolConnection, @ptrCast(self)), p_keyboard_handle_, p_mouse_handle_, p_beep_handle_);
            }
            pub inline fn getVideoHandle(self: *const T, p_video_handle_: ?*HANDLE_PTR) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).GetVideoHandle(@as(*const IWRdsProtocolConnection, @ptrCast(self)), p_video_handle_);
            }
            pub inline fn connectNotify(self: *const T, session_id_: u32) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).ConnectNotify(@as(*const IWRdsProtocolConnection, @ptrCast(self)), session_id_);
            }
            pub inline fn isUserAllowedToLogon(self: *const T, session_id_: u32, user_token_: HANDLE_PTR, p_domain_name_: ?PWSTR, p_user_name_: ?PWSTR) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).IsUserAllowedToLogon(@as(*const IWRdsProtocolConnection, @ptrCast(self)), session_id_, user_token_, p_domain_name_, p_user_name_);
            }
            pub inline fn sessionArbitrationEnumeration(self: *const T, h_user_token_: HANDLE_PTR, b_single_session_per_user_enabled_: BOOL, p_session_id_array_: [*]u32, pdw_session_identifier_count_: ?*u32) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).SessionArbitrationEnumeration(@as(*const IWRdsProtocolConnection, @ptrCast(self)), h_user_token_, b_single_session_per_user_enabled_, p_session_id_array_, pdw_session_identifier_count_);
            }
            pub inline fn logonNotify(self: *const T, h_client_token_: HANDLE_PTR, wsz_user_name_: ?PWSTR, wsz_domain_name_: ?PWSTR, session_id_: ?*WTS_SESSION_ID, p_w_rds_connection_settings_: ?*WRDS_CONNECTION_SETTINGS) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).LogonNotify(@as(*const IWRdsProtocolConnection, @ptrCast(self)), h_client_token_, wsz_user_name_, wsz_domain_name_, session_id_, p_w_rds_connection_settings_);
            }
            pub inline fn preDisconnect(self: *const T, disconnect_reason_: u32) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).PreDisconnect(@as(*const IWRdsProtocolConnection, @ptrCast(self)), disconnect_reason_);
            }
            pub inline fn disconnectNotify(self: *const T) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).DisconnectNotify(@as(*const IWRdsProtocolConnection, @ptrCast(self)));
            }
            pub inline fn close(self: *const T) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).Close(@as(*const IWRdsProtocolConnection, @ptrCast(self)));
            }
            pub inline fn getProtocolStatus(self: *const T, p_protocol_status_: ?*WTS_PROTOCOL_STATUS) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).GetProtocolStatus(@as(*const IWRdsProtocolConnection, @ptrCast(self)), p_protocol_status_);
            }
            pub inline fn getLastInputTime(self: *const T, p_last_input_time_: ?*u64) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).GetLastInputTime(@as(*const IWRdsProtocolConnection, @ptrCast(self)), p_last_input_time_);
            }
            pub inline fn setErrorInfo(self: *const T, ul_error_: u32) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).SetErrorInfo(@as(*const IWRdsProtocolConnection, @ptrCast(self)), ul_error_);
            }
            pub inline fn createVirtualChannel(self: *const T, sz_endpoint_name_: ?PSTR, b_static_: BOOL, requested_priority_: u32, ph_channel_: ?*usize) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).CreateVirtualChannel(@as(*const IWRdsProtocolConnection, @ptrCast(self)), sz_endpoint_name_, b_static_, requested_priority_, ph_channel_);
            }
            pub inline fn queryProperty(self: *const T, query_type_: Guid, ul_num_entries_in_: u32, ul_num_entries_out_: u32, p_property_entries_in_: [*]WTS_PROPERTY_VALUE, p_property_entries_out_: [*]WTS_PROPERTY_VALUE) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).QueryProperty(@as(*const IWRdsProtocolConnection, @ptrCast(self)), query_type_, ul_num_entries_in_, ul_num_entries_out_, p_property_entries_in_, p_property_entries_out_);
            }
            pub inline fn getShadowConnection(self: *const T, pp_shadow_connection_: ?*?*IWRdsProtocolShadowConnection) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).GetShadowConnection(@as(*const IWRdsProtocolConnection, @ptrCast(self)), pp_shadow_connection_);
            }
            pub inline fn notifyCommandProcessCreated(self: *const T, session_id_: u32) HRESULT {
                return @as(*const IWRdsProtocolConnection.VTable, @ptrCast(self.vtable)).NotifyCommandProcessCreated(@as(*const IWRdsProtocolConnection, @ptrCast(self)), session_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IWRdsProtocolConnectionCallback_Value = Guid.initString("f1d70332-d070-4ef1-a088-78313536c2d6");
pub const IID_IWRdsProtocolConnectionCallback = &IID_IWRdsProtocolConnectionCallback_Value;
pub const IWRdsProtocolConnectionCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnReady: *const fn (
            self: *const IWRdsProtocolConnectionCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        BrokenConnection: *const fn (
            self: *const IWRdsProtocolConnectionCallback,
            reason: u32,
            source: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopScreenUpdates: *const fn (
            self: *const IWRdsProtocolConnectionCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RedrawWindow: *const fn (
            self: *const IWRdsProtocolConnectionCallback,
            rect: ?*WTS_SMALL_RECT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnectionId: *const fn (
            self: *const IWRdsProtocolConnectionCallback,
            p_connection_id: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onReady(self: *const T) HRESULT {
                return @as(*const IWRdsProtocolConnectionCallback.VTable, @ptrCast(self.vtable)).OnReady(@as(*const IWRdsProtocolConnectionCallback, @ptrCast(self)));
            }
            pub inline fn brokenConnection(self: *const T, reason_: u32, source_: u32) HRESULT {
                return @as(*const IWRdsProtocolConnectionCallback.VTable, @ptrCast(self.vtable)).BrokenConnection(@as(*const IWRdsProtocolConnectionCallback, @ptrCast(self)), reason_, source_);
            }
            pub inline fn stopScreenUpdates(self: *const T) HRESULT {
                return @as(*const IWRdsProtocolConnectionCallback.VTable, @ptrCast(self.vtable)).StopScreenUpdates(@as(*const IWRdsProtocolConnectionCallback, @ptrCast(self)));
            }
            pub inline fn redrawWindow(self: *const T, rect_: ?*WTS_SMALL_RECT) HRESULT {
                return @as(*const IWRdsProtocolConnectionCallback.VTable, @ptrCast(self.vtable)).RedrawWindow(@as(*const IWRdsProtocolConnectionCallback, @ptrCast(self)), rect_);
            }
            pub inline fn getConnectionId(self: *const T, p_connection_id_: ?*u32) HRESULT {
                return @as(*const IWRdsProtocolConnectionCallback.VTable, @ptrCast(self.vtable)).GetConnectionId(@as(*const IWRdsProtocolConnectionCallback, @ptrCast(self)), p_connection_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IWRdsProtocolShadowConnection_Value = Guid.initString("9ae85ce6-cade-4548-8feb-99016597f60a");
pub const IID_IWRdsProtocolShadowConnection = &IID_IWRdsProtocolShadowConnection_Value;
pub const IWRdsProtocolShadowConnection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Start: *const fn (
            self: *const IWRdsProtocolShadowConnection,
            p_target_server_name: ?PWSTR,
            target_session_id: u32,
            hot_key_vk: u8,
            hotkey_modifiers: u16,
            p_shadow_callback: ?*IWRdsProtocolShadowCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Stop: *const fn (
            self: *const IWRdsProtocolShadowConnection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DoTarget: *const fn (
            self: *const IWRdsProtocolShadowConnection,
            p_param1: [*:0]u8,
            param1_size: u32,
            p_param2: [*:0]u8,
            param2_size: u32,
            p_param3: [*:0]u8,
            param3_size: u32,
            p_param4: [*:0]u8,
            param4_size: u32,
            p_client_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn start(self: *const T, p_target_server_name_: ?PWSTR, target_session_id_: u32, hot_key_vk_: u8, hotkey_modifiers_: u16, p_shadow_callback_: ?*IWRdsProtocolShadowCallback) HRESULT {
                return @as(*const IWRdsProtocolShadowConnection.VTable, @ptrCast(self.vtable)).Start(@as(*const IWRdsProtocolShadowConnection, @ptrCast(self)), p_target_server_name_, target_session_id_, hot_key_vk_, hotkey_modifiers_, p_shadow_callback_);
            }
            pub inline fn stop(self: *const T) HRESULT {
                return @as(*const IWRdsProtocolShadowConnection.VTable, @ptrCast(self.vtable)).Stop(@as(*const IWRdsProtocolShadowConnection, @ptrCast(self)));
            }
            pub inline fn doTarget(self: *const T, p_param1_: [*:0]u8, param1_size_: u32, p_param2_: [*:0]u8, param2_size_: u32, p_param3_: [*:0]u8, param3_size_: u32, p_param4_: [*:0]u8, param4_size_: u32, p_client_name_: ?PWSTR) HRESULT {
                return @as(*const IWRdsProtocolShadowConnection.VTable, @ptrCast(self.vtable)).DoTarget(@as(*const IWRdsProtocolShadowConnection, @ptrCast(self)), p_param1_, param1_size_, p_param2_, param2_size_, p_param3_, param3_size_, p_param4_, param4_size_, p_client_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IWRdsProtocolShadowCallback_Value = Guid.initString("e0667ce0-0372-40d6-adb2-a0f3322674d6");
pub const IID_IWRdsProtocolShadowCallback = &IID_IWRdsProtocolShadowCallback_Value;
pub const IWRdsProtocolShadowCallback = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StopShadow: *const fn (
            self: *const IWRdsProtocolShadowCallback,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeTargetShadow: *const fn (
            self: *const IWRdsProtocolShadowCallback,
            p_target_server_name: ?PWSTR,
            target_session_id: u32,
            p_param1: [*:0]u8,
            param1_size: u32,
            p_param2: [*:0]u8,
            param2_size: u32,
            p_param3: [*:0]u8,
            param3_size: u32,
            p_param4: [*:0]u8,
            param4_size: u32,
            p_client_name: ?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn stopShadow(self: *const T) HRESULT {
                return @as(*const IWRdsProtocolShadowCallback.VTable, @ptrCast(self.vtable)).StopShadow(@as(*const IWRdsProtocolShadowCallback, @ptrCast(self)));
            }
            pub inline fn invokeTargetShadow(self: *const T, p_target_server_name_: ?PWSTR, target_session_id_: u32, p_param1_: [*:0]u8, param1_size_: u32, p_param2_: [*:0]u8, param2_size_: u32, p_param3_: [*:0]u8, param3_size_: u32, p_param4_: [*:0]u8, param4_size_: u32, p_client_name_: ?PWSTR) HRESULT {
                return @as(*const IWRdsProtocolShadowCallback.VTable, @ptrCast(self.vtable)).InvokeTargetShadow(@as(*const IWRdsProtocolShadowCallback, @ptrCast(self)), p_target_server_name_, target_session_id_, p_param1_, param1_size_, p_param2_, param2_size_, p_param3_, param3_size_, p_param4_, param4_size_, p_client_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IWRdsProtocolLicenseConnection_Value = Guid.initString("1d6a145f-d095-4424-957a-407fae822d84");
pub const IID_IWRdsProtocolLicenseConnection = &IID_IWRdsProtocolLicenseConnection_Value;
pub const IWRdsProtocolLicenseConnection = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        RequestLicensingCapabilities: *const fn (
            self: *const IWRdsProtocolLicenseConnection,
            pp_license_capabilities: ?*WTS_LICENSE_CAPABILITIES,
            pcb_license_capabilities: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendClientLicense: *const fn (
            self: *const IWRdsProtocolLicenseConnection,
            p_client_license: [*:0]u8,
            cb_client_license: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RequestClientLicense: *const fn (
            self: *const IWRdsProtocolLicenseConnection,
            reserve1: [*:0]u8,
            reserve2: u32,
            pp_client_license: [*:0]u8,
            pcb_client_license: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ProtocolComplete: *const fn (
            self: *const IWRdsProtocolLicenseConnection,
            ul_complete: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn requestLicensingCapabilities(self: *const T, pp_license_capabilities_: ?*WTS_LICENSE_CAPABILITIES, pcb_license_capabilities_: ?*u32) HRESULT {
                return @as(*const IWRdsProtocolLicenseConnection.VTable, @ptrCast(self.vtable)).RequestLicensingCapabilities(@as(*const IWRdsProtocolLicenseConnection, @ptrCast(self)), pp_license_capabilities_, pcb_license_capabilities_);
            }
            pub inline fn sendClientLicense(self: *const T, p_client_license_: [*:0]u8, cb_client_license_: u32) HRESULT {
                return @as(*const IWRdsProtocolLicenseConnection.VTable, @ptrCast(self.vtable)).SendClientLicense(@as(*const IWRdsProtocolLicenseConnection, @ptrCast(self)), p_client_license_, cb_client_license_);
            }
            pub inline fn requestClientLicense(self: *const T, reserve1_: [*:0]u8, reserve2_: u32, pp_client_license_: [*:0]u8, pcb_client_license_: ?*u32) HRESULT {
                return @as(*const IWRdsProtocolLicenseConnection.VTable, @ptrCast(self.vtable)).RequestClientLicense(@as(*const IWRdsProtocolLicenseConnection, @ptrCast(self)), reserve1_, reserve2_, pp_client_license_, pcb_client_license_);
            }
            pub inline fn protocolComplete(self: *const T, ul_complete_: u32) HRESULT {
                return @as(*const IWRdsProtocolLicenseConnection.VTable, @ptrCast(self.vtable)).ProtocolComplete(@as(*const IWRdsProtocolLicenseConnection, @ptrCast(self)), ul_complete_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windowsServer2012'
const IID_IWRdsProtocolLogonErrorRedirector_Value = Guid.initString("519fe83b-142a-4120-a3d5-a405d315281a");
pub const IID_IWRdsProtocolLogonErrorRedirector = &IID_IWRdsProtocolLogonErrorRedirector_Value;
pub const IWRdsProtocolLogonErrorRedirector = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        OnBeginPainting: *const fn (
            self: *const IWRdsProtocolLogonErrorRedirector,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RedirectStatus: *const fn (
            self: *const IWRdsProtocolLogonErrorRedirector,
            psz_message: ?[*:0]const u16,
            p_response: ?*WTS_LOGON_ERROR_REDIRECTOR_RESPONSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RedirectMessage: *const fn (
            self: *const IWRdsProtocolLogonErrorRedirector,
            psz_caption: ?[*:0]const u16,
            psz_message: ?[*:0]const u16,
            u_type: u32,
            p_response: ?*WTS_LOGON_ERROR_REDIRECTOR_RESPONSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RedirectLogonError: *const fn (
            self: *const IWRdsProtocolLogonErrorRedirector,
            nts_status: i32,
            nts_substatus: i32,
            psz_caption: ?[*:0]const u16,
            psz_message: ?[*:0]const u16,
            u_type: u32,
            p_response: ?*WTS_LOGON_ERROR_REDIRECTOR_RESPONSE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn onBeginPainting(self: *const T) HRESULT {
                return @as(*const IWRdsProtocolLogonErrorRedirector.VTable, @ptrCast(self.vtable)).OnBeginPainting(@as(*const IWRdsProtocolLogonErrorRedirector, @ptrCast(self)));
            }
            pub inline fn redirectStatus(self: *const T, psz_message_: ?[*:0]const u16, p_response_: ?*WTS_LOGON_ERROR_REDIRECTOR_RESPONSE) HRESULT {
                return @as(*const IWRdsProtocolLogonErrorRedirector.VTable, @ptrCast(self.vtable)).RedirectStatus(@as(*const IWRdsProtocolLogonErrorRedirector, @ptrCast(self)), psz_message_, p_response_);
            }
            pub inline fn redirectMessage(self: *const T, psz_caption_: ?[*:0]const u16, psz_message_: ?[*:0]const u16, u_type_: u32, p_response_: ?*WTS_LOGON_ERROR_REDIRECTOR_RESPONSE) HRESULT {
                return @as(*const IWRdsProtocolLogonErrorRedirector.VTable, @ptrCast(self.vtable)).RedirectMessage(@as(*const IWRdsProtocolLogonErrorRedirector, @ptrCast(self)), psz_caption_, psz_message_, u_type_, p_response_);
            }
            pub inline fn redirectLogonError(self: *const T, nts_status_: i32, nts_substatus_: i32, psz_caption_: ?[*:0]const u16, psz_message_: ?[*:0]const u16, u_type_: u32, p_response_: ?*WTS_LOGON_ERROR_REDIRECTOR_RESPONSE) HRESULT {
                return @as(*const IWRdsProtocolLogonErrorRedirector.VTable, @ptrCast(self.vtable)).RedirectLogonError(@as(*const IWRdsProtocolLogonErrorRedirector, @ptrCast(self)), nts_status_, nts_substatus_, psz_caption_, psz_message_, u_type_, p_response_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWRdsWddmIddProps_Value = Guid.initString("1382df4d-a289-43d1-a184-144726f9af90");
pub const IID_IWRdsWddmIddProps = &IID_IWRdsWddmIddProps_Value;
pub const IWRdsWddmIddProps = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetHardwareId: *const fn (
            self: *const IWRdsWddmIddProps,
            p_display_driver_hardware_id: [*:0]u16,
            count: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDriverLoad: *const fn (
            self: *const IWRdsWddmIddProps,
            session_id: u32,
            driver_handle: HANDLE_PTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OnDriverUnload: *const fn (
            self: *const IWRdsWddmIddProps,
            session_id: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableWddmIdd: *const fn (
            self: *const IWRdsWddmIddProps,
            enabled: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getHardwareId(self: *const T, p_display_driver_hardware_id_: [*:0]u16, count_: u32) HRESULT {
                return @as(*const IWRdsWddmIddProps.VTable, @ptrCast(self.vtable)).GetHardwareId(@as(*const IWRdsWddmIddProps, @ptrCast(self)), p_display_driver_hardware_id_, count_);
            }
            pub inline fn onDriverLoad(self: *const T, session_id_: u32, driver_handle_: HANDLE_PTR) HRESULT {
                return @as(*const IWRdsWddmIddProps.VTable, @ptrCast(self.vtable)).OnDriverLoad(@as(*const IWRdsWddmIddProps, @ptrCast(self)), session_id_, driver_handle_);
            }
            pub inline fn onDriverUnload(self: *const T, session_id_: u32) HRESULT {
                return @as(*const IWRdsWddmIddProps.VTable, @ptrCast(self.vtable)).OnDriverUnload(@as(*const IWRdsWddmIddProps, @ptrCast(self)), session_id_);
            }
            pub inline fn enableWddmIdd(self: *const T, enabled_: BOOL) HRESULT {
                return @as(*const IWRdsWddmIddProps.VTable, @ptrCast(self.vtable)).EnableWddmIdd(@as(*const IWRdsWddmIddProps, @ptrCast(self)), enabled_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWRdsProtocolConnectionSettings_Value = Guid.initString("83fcf5d3-f6f4-ea94-9cd2-32f280e1e510");
pub const IID_IWRdsProtocolConnectionSettings = &IID_IWRdsProtocolConnectionSettings_Value;
pub const IWRdsProtocolConnectionSettings = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetConnectionSetting: *const fn (
            self: *const IWRdsProtocolConnectionSettings,
            property_i_d: Guid,
            p_property_entries_in: ?*WTS_PROPERTY_VALUE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetConnectionSetting: *const fn (
            self: *const IWRdsProtocolConnectionSettings,
            property_i_d: Guid,
            p_property_entries_out: ?*WTS_PROPERTY_VALUE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setConnectionSetting(self: *const T, property_i_d_: Guid, p_property_entries_in_: ?*WTS_PROPERTY_VALUE) HRESULT {
                return @as(*const IWRdsProtocolConnectionSettings.VTable, @ptrCast(self.vtable)).SetConnectionSetting(@as(*const IWRdsProtocolConnectionSettings, @ptrCast(self)), property_i_d_, p_property_entries_in_);
            }
            pub inline fn getConnectionSetting(self: *const T, property_i_d_: Guid, p_property_entries_out_: ?*WTS_PROPERTY_VALUE) HRESULT {
                return @as(*const IWRdsProtocolConnectionSettings.VTable, @ptrCast(self.vtable)).GetConnectionSetting(@as(*const IWRdsProtocolConnectionSettings, @ptrCast(self)), property_i_d_, p_property_entries_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IWRdsEnhancedFastReconnectArbitrator_Value = Guid.initString("5718ae9b-47f2-499f-b634-d8175bd51131");
pub const IID_IWRdsEnhancedFastReconnectArbitrator = &IID_IWRdsEnhancedFastReconnectArbitrator_Value;
pub const IWRdsEnhancedFastReconnectArbitrator = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetSessionForEnhancedFastReconnect: *const fn (
            self: *const IWRdsEnhancedFastReconnectArbitrator,
            p_session_id_array: ?*i32,
            dw_session_count: u32,
            p_result_session_id: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getSessionForEnhancedFastReconnect(self: *const T, p_session_id_array_: ?*i32, dw_session_count_: u32, p_result_session_id_: ?*i32) HRESULT {
                return @as(*const IWRdsEnhancedFastReconnectArbitrator.VTable, @ptrCast(self.vtable)).GetSessionForEnhancedFastReconnect(@as(*const IWRdsEnhancedFastReconnectArbitrator, @ptrCast(self)), p_session_id_array_, dw_session_count_, p_result_session_id_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const PasswordEncodingType = enum(i32) {
    @"8" = 0,
    @"16LE" = 1,
    @"16BE" = 2,
};
pub const PasswordEncodingUTF8 = PasswordEncodingType.@"8";
pub const PasswordEncodingUTF16LE = PasswordEncodingType.@"16LE";
pub const PasswordEncodingUTF16BE = PasswordEncodingType.@"16BE";

// TODO: this type is limited to platform 'windows8.0'
const IID_IRemoteDesktopClientSettings_Value = Guid.initString("48a0f2a7-2713-431f-bbac-6f4558e7d64d");
pub const IID_IRemoteDesktopClientSettings = &IID_IRemoteDesktopClientSettings_Value;
pub const IRemoteDesktopClientSettings = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        ApplySettings: *const fn (
            self: *const IRemoteDesktopClientSettings,
            rdp_file_contents: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RetrieveSettings: *const fn (
            self: *const IRemoteDesktopClientSettings,
            rdp_file_contents: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRdpProperty: *const fn (
            self: *const IRemoteDesktopClientSettings,
            property_name: ?BSTR,
            value: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetRdpProperty: *const fn (
            self: *const IRemoteDesktopClientSettings,
            property_name: ?BSTR,
            value: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn applySettings(self: *const T, rdp_file_contents_: ?BSTR) HRESULT {
                return @as(*const IRemoteDesktopClientSettings.VTable, @ptrCast(self.vtable)).ApplySettings(@as(*const IRemoteDesktopClientSettings, @ptrCast(self)), rdp_file_contents_);
            }
            pub inline fn retrieveSettings(self: *const T, rdp_file_contents_: ?*?BSTR) HRESULT {
                return @as(*const IRemoteDesktopClientSettings.VTable, @ptrCast(self.vtable)).RetrieveSettings(@as(*const IRemoteDesktopClientSettings, @ptrCast(self)), rdp_file_contents_);
            }
            pub inline fn getRdpProperty(self: *const T, property_name_: ?BSTR, value_: ?*VARIANT) HRESULT {
                return @as(*const IRemoteDesktopClientSettings.VTable, @ptrCast(self.vtable)).GetRdpProperty(@as(*const IRemoteDesktopClientSettings, @ptrCast(self)), property_name_, value_);
            }
            pub inline fn setRdpProperty(self: *const T, property_name_: ?BSTR, value_: VARIANT) HRESULT {
                return @as(*const IRemoteDesktopClientSettings.VTable, @ptrCast(self.vtable)).SetRdpProperty(@as(*const IRemoteDesktopClientSettings, @ptrCast(self)), property_name_, value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const RemoteActionType = enum(i32) {
    Charms = 0,
    Appbar = 1,
    Snap = 2,
    StartScreen = 3,
    AppSwitch = 4,
};
pub const RemoteActionCharms = RemoteActionType.Charms;
pub const RemoteActionAppbar = RemoteActionType.Appbar;
pub const RemoteActionSnap = RemoteActionType.Snap;
pub const RemoteActionStartScreen = RemoteActionType.StartScreen;
pub const RemoteActionAppSwitch = RemoteActionType.AppSwitch;

pub const SnapshotEncodingType = enum(i32) {
    i = 0,
};
pub const SnapshotEncodingDataUri = SnapshotEncodingType.i;

pub const SnapshotFormatType = enum(i32) {
    Png = 0,
    Jpeg = 1,
    Bmp = 2,
};
pub const SnapshotFormatPng = SnapshotFormatType.Png;
pub const SnapshotFormatJpeg = SnapshotFormatType.Jpeg;
pub const SnapshotFormatBmp = SnapshotFormatType.Bmp;

// TODO: this type is limited to platform 'windows8.0'
const IID_IRemoteDesktopClientActions_Value = Guid.initString("7d54bc4e-1028-45d4-8b0a-b9b6bffba176");
pub const IID_IRemoteDesktopClientActions = &IID_IRemoteDesktopClientActions_Value;
pub const IRemoteDesktopClientActions = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        SuspendScreenUpdates: *const fn (
            self: *const IRemoteDesktopClientActions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ResumeScreenUpdates: *const fn (
            self: *const IRemoteDesktopClientActions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecuteRemoteAction: *const fn (
            self: *const IRemoteDesktopClientActions,
            remote_action: RemoteActionType,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetSnapshot: *const fn (
            self: *const IRemoteDesktopClientActions,
            snapshot_encoding: SnapshotEncodingType,
            snapshot_format: SnapshotFormatType,
            snapshot_width: u32,
            snapshot_height: u32,
            snapshot_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn suspendScreenUpdates(self: *const T) HRESULT {
                return @as(*const IRemoteDesktopClientActions.VTable, @ptrCast(self.vtable)).SuspendScreenUpdates(@as(*const IRemoteDesktopClientActions, @ptrCast(self)));
            }
            pub inline fn resumeScreenUpdates(self: *const T) HRESULT {
                return @as(*const IRemoteDesktopClientActions.VTable, @ptrCast(self.vtable)).ResumeScreenUpdates(@as(*const IRemoteDesktopClientActions, @ptrCast(self)));
            }
            pub inline fn executeRemoteAction(self: *const T, remote_action_: RemoteActionType) HRESULT {
                return @as(*const IRemoteDesktopClientActions.VTable, @ptrCast(self.vtable)).ExecuteRemoteAction(@as(*const IRemoteDesktopClientActions, @ptrCast(self)), remote_action_);
            }
            pub inline fn getSnapshot(self: *const T, snapshot_encoding_: SnapshotEncodingType, snapshot_format_: SnapshotFormatType, snapshot_width_: u32, snapshot_height_: u32, snapshot_data_: ?*?BSTR) HRESULT {
                return @as(*const IRemoteDesktopClientActions.VTable, @ptrCast(self.vtable)).GetSnapshot(@as(*const IRemoteDesktopClientActions, @ptrCast(self)), snapshot_encoding_, snapshot_format_, snapshot_width_, snapshot_height_, snapshot_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

// TODO: this type is limited to platform 'windows8.0'
const IID_IRemoteDesktopClientTouchPointer_Value = Guid.initString("260ec22d-8cbc-44b5-9e88-2a37f6c93ae9");
pub const IID_IRemoteDesktopClientTouchPointer = &IID_IRemoteDesktopClientTouchPointer_Value;
pub const IRemoteDesktopClientTouchPointer = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRemoteDesktopClientTouchPointer,
            enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Enabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRemoteDesktopClientTouchPointer,
            enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EventsEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRemoteDesktopClientTouchPointer,
            events_enabled: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventsEnabled: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRemoteDesktopClientTouchPointer,
            events_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PointerSpeed: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRemoteDesktopClientTouchPointer,
            pointer_speed: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PointerSpeed: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRemoteDesktopClientTouchPointer,
            pointer_speed: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn putEnabled(self: *const T, enabled_: i16) HRESULT {
                return @as(*const IRemoteDesktopClientTouchPointer.VTable, @ptrCast(self.vtable)).put_Enabled(@as(*const IRemoteDesktopClientTouchPointer, @ptrCast(self)), enabled_);
            }
            pub inline fn getEnabled(self: *const T, enabled_: ?*i16) HRESULT {
                return @as(*const IRemoteDesktopClientTouchPointer.VTable, @ptrCast(self.vtable)).get_Enabled(@as(*const IRemoteDesktopClientTouchPointer, @ptrCast(self)), enabled_);
            }
            pub inline fn putEventsEnabled(self: *const T, events_enabled_: i16) HRESULT {
                return @as(*const IRemoteDesktopClientTouchPointer.VTable, @ptrCast(self.vtable)).put_EventsEnabled(@as(*const IRemoteDesktopClientTouchPointer, @ptrCast(self)), events_enabled_);
            }
            pub inline fn getEventsEnabled(self: *const T, events_enabled_: ?*i16) HRESULT {
                return @as(*const IRemoteDesktopClientTouchPointer.VTable, @ptrCast(self.vtable)).get_EventsEnabled(@as(*const IRemoteDesktopClientTouchPointer, @ptrCast(self)), events_enabled_);
            }
            pub inline fn putPointerSpeed(self: *const T, pointer_speed_: u32) HRESULT {
                return @as(*const IRemoteDesktopClientTouchPointer.VTable, @ptrCast(self.vtable)).put_PointerSpeed(@as(*const IRemoteDesktopClientTouchPointer, @ptrCast(self)), pointer_speed_);
            }
            pub inline fn getPointerSpeed(self: *const T, pointer_speed_: ?*u32) HRESULT {
                return @as(*const IRemoteDesktopClientTouchPointer.VTable, @ptrCast(self.vtable)).get_PointerSpeed(@as(*const IRemoteDesktopClientTouchPointer, @ptrCast(self)), pointer_speed_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const KeyCombinationType = enum(i32) {
    Home = 0,
    Left = 1,
    Up = 2,
    Right = 3,
    Down = 4,
    Scroll = 5,
};
pub const KeyCombinationHome = KeyCombinationType.Home;
pub const KeyCombinationLeft = KeyCombinationType.Left;
pub const KeyCombinationUp = KeyCombinationType.Up;
pub const KeyCombinationRight = KeyCombinationType.Right;
pub const KeyCombinationDown = KeyCombinationType.Down;
pub const KeyCombinationScroll = KeyCombinationType.Scroll;

// TODO: this type is limited to platform 'windows8.0'
const IID_IRemoteDesktopClient_Value = Guid.initString("57d25668-625a-4905-be4e-304caa13f89c");
pub const IID_IRemoteDesktopClient = &IID_IRemoteDesktopClient_Value;
pub const IRemoteDesktopClient = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        Connect: *const fn (
            self: *const IRemoteDesktopClient,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Disconnect: *const fn (
            self: *const IRemoteDesktopClient,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reconnect: *const fn (
            self: *const IRemoteDesktopClient,
            width: u32,
            height: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Settings: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRemoteDesktopClient,
            settings: ?*?*IRemoteDesktopClientSettings,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Actions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRemoteDesktopClient,
            actions: ?*?*IRemoteDesktopClientActions,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TouchPointer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRemoteDesktopClient,
            touch_pointer: ?*?*IRemoteDesktopClientTouchPointer,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteSavedCredentials: *const fn (
            self: *const IRemoteDesktopClient,
            server_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateSessionDisplaySettings: *const fn (
            self: *const IRemoteDesktopClient,
            width: u32,
            height: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        attachEvent: *const fn (
            self: *const IRemoteDesktopClient,
            event_name: ?BSTR,
            callback: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        detachEvent: *const fn (
            self: *const IRemoteDesktopClient,
            event_name: ?BSTR,
            callback: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn connect(self: *const T) HRESULT {
                return @as(*const IRemoteDesktopClient.VTable, @ptrCast(self.vtable)).Connect(@as(*const IRemoteDesktopClient, @ptrCast(self)));
            }
            pub inline fn disconnect(self: *const T) HRESULT {
                return @as(*const IRemoteDesktopClient.VTable, @ptrCast(self.vtable)).Disconnect(@as(*const IRemoteDesktopClient, @ptrCast(self)));
            }
            pub inline fn reconnect(self: *const T, width_: u32, height_: u32) HRESULT {
                return @as(*const IRemoteDesktopClient.VTable, @ptrCast(self.vtable)).Reconnect(@as(*const IRemoteDesktopClient, @ptrCast(self)), width_, height_);
            }
            pub inline fn getSettings(self: *const T, settings_: ?*?*IRemoteDesktopClientSettings) HRESULT {
                return @as(*const IRemoteDesktopClient.VTable, @ptrCast(self.vtable)).get_Settings(@as(*const IRemoteDesktopClient, @ptrCast(self)), settings_);
            }
            pub inline fn getActions(self: *const T, actions_: ?*?*IRemoteDesktopClientActions) HRESULT {
                return @as(*const IRemoteDesktopClient.VTable, @ptrCast(self.vtable)).get_Actions(@as(*const IRemoteDesktopClient, @ptrCast(self)), actions_);
            }
            pub inline fn getTouchPointer(self: *const T, touch_pointer_: ?*?*IRemoteDesktopClientTouchPointer) HRESULT {
                return @as(*const IRemoteDesktopClient.VTable, @ptrCast(self.vtable)).get_TouchPointer(@as(*const IRemoteDesktopClient, @ptrCast(self)), touch_pointer_);
            }
            pub inline fn deleteSavedCredentials(self: *const T, server_name_: ?BSTR) HRESULT {
                return @as(*const IRemoteDesktopClient.VTable, @ptrCast(self.vtable)).DeleteSavedCredentials(@as(*const IRemoteDesktopClient, @ptrCast(self)), server_name_);
            }
            pub inline fn updateSessionDisplaySettings(self: *const T, width_: u32, height_: u32) HRESULT {
                return @as(*const IRemoteDesktopClient.VTable, @ptrCast(self.vtable)).UpdateSessionDisplaySettings(@as(*const IRemoteDesktopClient, @ptrCast(self)), width_, height_);
            }
            pub inline fn attachEvent(self: *const T, event_name_: ?BSTR, callback_: ?*IDispatch) HRESULT {
                return @as(*const IRemoteDesktopClient.VTable, @ptrCast(self.vtable)).attachEvent(@as(*const IRemoteDesktopClient, @ptrCast(self)), event_name_, callback_);
            }
            pub inline fn detachEvent(self: *const T, event_name_: ?BSTR, callback_: ?*IDispatch) HRESULT {
                return @as(*const IRemoteDesktopClient.VTable, @ptrCast(self.vtable)).detachEvent(@as(*const IRemoteDesktopClient, @ptrCast(self)), event_name_, callback_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRemoteSystemAdditionalInfoProvider_Value = Guid.initString("eeaa3d5f-ec63-4d27-af38-e86b1d7292cb");
pub const IID_IRemoteSystemAdditionalInfoProvider = &IID_IRemoteSystemAdditionalInfoProvider_Value;
pub const IRemoteSystemAdditionalInfoProvider = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetAdditionalInfo: *const fn (
            self: *const IRemoteSystemAdditionalInfoProvider,
            deduplication_id: ?*?HSTRING,
            riid: ?*const Guid,
            map_view: ?*?*anyopaque,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getAdditionalInfo(self: *const T, deduplication_id_: ?*?HSTRING, riid_: ?*const Guid, map_view_: ?*?*anyopaque) HRESULT {
                return @as(*const IRemoteSystemAdditionalInfoProvider.VTable, @ptrCast(self.vtable)).GetAdditionalInfo(@as(*const IRemoteSystemAdditionalInfoProvider, @ptrCast(self)), deduplication_id_, riid_, map_view_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const WTSSESSION_NOTIFICATION = extern struct {
    cbSize: u32,
    dwSessionId: u32,
};

//--------------------------------------------------------------------------------
// Section: Functions (65)
//--------------------------------------------------------------------------------
// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSStopRemoteControlSession(
    logon_id: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSStartRemoteControlSessionW(
    p_target_server_name: ?PWSTR,
    target_logon_id: u32,
    hotkey_vk: u8,
    hotkey_modifiers: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSStartRemoteControlSessionA(
    p_target_server_name: ?PSTR,
    target_logon_id: u32,
    hotkey_vk: u8,
    hotkey_modifiers: u16,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSConnectSessionA(
    logon_id: u32,
    target_logon_id: u32,
    p_password: ?PSTR,
    b_wait: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSConnectSessionW(
    logon_id: u32,
    target_logon_id: u32,
    p_password: ?PWSTR,
    b_wait: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSEnumerateServersW(
    p_domain_name: ?PWSTR,
    reserved: u32,
    version: u32,
    pp_server_info: ?*?*WTS_SERVER_INFOW,
    p_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSEnumerateServersA(
    p_domain_name: ?PSTR,
    reserved: u32,
    version: u32,
    pp_server_info: ?*?*WTS_SERVER_INFOA,
    p_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSOpenServerW(
    p_server_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSOpenServerA(
    p_server_name: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wtsapi32" fn WTSOpenServerExW(
    p_server_name: ?PWSTR,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wtsapi32" fn WTSOpenServerExA(
    p_server_name: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) ?HANDLE;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSCloseServer(
    h_server: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSEnumerateSessionsW(
    h_server: ?HANDLE,
    reserved: u32,
    version: u32,
    pp_session_info: ?*?*WTS_SESSION_INFOW,
    p_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSEnumerateSessionsA(
    h_server: ?HANDLE,
    reserved: u32,
    version: u32,
    pp_session_info: ?*?*WTS_SESSION_INFOA,
    p_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wtsapi32" fn WTSEnumerateSessionsExW(
    h_server: ?HANDLE,
    p_level: ?*u32,
    filter: u32,
    pp_session_info: ?*?*WTS_SESSION_INFO_1W,
    p_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wtsapi32" fn WTSEnumerateSessionsExA(
    h_server: ?HANDLE,
    p_level: ?*u32,
    filter: u32,
    pp_session_info: ?*?*WTS_SESSION_INFO_1A,
    p_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSEnumerateProcessesW(
    h_server: ?HANDLE,
    reserved: u32,
    version: u32,
    pp_process_info: ?*?*WTS_PROCESS_INFOW,
    p_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSEnumerateProcessesA(
    h_server: ?HANDLE,
    reserved: u32,
    version: u32,
    pp_process_info: ?*?*WTS_PROCESS_INFOA,
    p_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSTerminateProcess(
    h_server: ?HANDLE,
    process_id: u32,
    exit_code: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSQuerySessionInformationW(
    h_server: ?HANDLE,
    session_id: u32,
    w_t_s_info_class: WTS_INFO_CLASS,
    pp_buffer: ?*?PWSTR,
    p_bytes_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSQuerySessionInformationA(
    h_server: ?HANDLE,
    session_id: u32,
    w_t_s_info_class: WTS_INFO_CLASS,
    pp_buffer: ?*?PSTR,
    p_bytes_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSQueryUserConfigW(
    p_server_name: ?PWSTR,
    p_user_name: ?PWSTR,
    w_t_s_config_class: WTS_CONFIG_CLASS,
    pp_buffer: ?*?PWSTR,
    p_bytes_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSQueryUserConfigA(
    p_server_name: ?PSTR,
    p_user_name: ?PSTR,
    w_t_s_config_class: WTS_CONFIG_CLASS,
    pp_buffer: ?*?PSTR,
    p_bytes_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSSetUserConfigW(
    p_server_name: ?PWSTR,
    p_user_name: ?PWSTR,
    w_t_s_config_class: WTS_CONFIG_CLASS,
    // TODO: what to do with BytesParamIndex 4?
    p_buffer: ?PWSTR,
    data_length: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSSetUserConfigA(
    p_server_name: ?PSTR,
    p_user_name: ?PSTR,
    w_t_s_config_class: WTS_CONFIG_CLASS,
    // TODO: what to do with BytesParamIndex 4?
    p_buffer: ?PSTR,
    data_length: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSSendMessageW(
    h_server: ?HANDLE,
    session_id: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_title: ?PWSTR,
    title_length: u32,
    // TODO: what to do with BytesParamIndex 5?
    p_message: ?PWSTR,
    message_length: u32,
    style: MESSAGEBOX_STYLE,
    timeout: u32,
    p_response: ?*MESSAGEBOX_RESULT,
    b_wait: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSSendMessageA(
    h_server: ?HANDLE,
    session_id: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_title: ?PSTR,
    title_length: u32,
    // TODO: what to do with BytesParamIndex 5?
    p_message: ?PSTR,
    message_length: u32,
    style: MESSAGEBOX_STYLE,
    timeout: u32,
    p_response: ?*MESSAGEBOX_RESULT,
    b_wait: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSDisconnectSession(
    h_server: ?HANDLE,
    session_id: u32,
    b_wait: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSLogoffSession(
    h_server: ?HANDLE,
    session_id: u32,
    b_wait: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSShutdownSystem(
    h_server: ?HANDLE,
    shutdown_flag: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSWaitSystemEvent(
    h_server: ?HANDLE,
    event_mask: u32,
    p_event_flags: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSVirtualChannelOpen(
    h_server: ?HANDLE,
    session_id: u32,
    p_virtual_name: ?PSTR,
) callconv(@import("std").os.windows.WINAPI) HwtsVirtualChannelHandle;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSVirtualChannelOpenEx(
    session_id: u32,
    p_virtual_name: ?PSTR,
    flags: u32,
) callconv(@import("std").os.windows.WINAPI) HwtsVirtualChannelHandle;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSVirtualChannelClose(
    h_channel_handle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSVirtualChannelRead(
    h_channel_handle: ?HANDLE,
    time_out: u32,
    // TODO: what to do with BytesParamIndex 3?
    buffer: ?[*]u8,
    buffer_size: u32,
    p_bytes_read: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSVirtualChannelWrite(
    h_channel_handle: ?HANDLE,
    // TODO: what to do with BytesParamIndex 2?
    buffer: ?[*]u8,
    length: u32,
    p_bytes_written: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSVirtualChannelPurgeInput(
    h_channel_handle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSVirtualChannelPurgeOutput(
    h_channel_handle: ?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSVirtualChannelQuery(
    h_channel_handle: ?HANDLE,
    param1: WTS_VIRTUAL_CLASS,
    pp_buffer: ?*?*anyopaque,
    p_bytes_returned: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSFreeMemory(
    p_memory: ?*anyopaque,
) callconv(@import("std").os.windows.WINAPI) void;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSRegisterSessionNotification(
    h_wnd: ?HWND,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSUnRegisterSessionNotification(
    h_wnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSRegisterSessionNotificationEx(
    h_server: ?HANDLE,
    h_wnd: ?HWND,
    dw_flags: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSUnRegisterSessionNotificationEx(
    h_server: ?HANDLE,
    h_wnd: ?HWND,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "wtsapi32" fn WTSQueryUserToken(
    session_id: u32,
    ph_token: ?*?HANDLE,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wtsapi32" fn WTSFreeMemoryExW(
    w_t_s_type_class: WTS_TYPE_CLASS,
    p_memory: ?*anyopaque,
    number_of_entries: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wtsapi32" fn WTSFreeMemoryExA(
    w_t_s_type_class: WTS_TYPE_CLASS,
    p_memory: ?*anyopaque,
    number_of_entries: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wtsapi32" fn WTSEnumerateProcessesExW(
    h_server: ?HANDLE,
    p_level: ?*u32,
    session_id: u32,
    pp_process_info: ?*?PWSTR,
    p_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wtsapi32" fn WTSEnumerateProcessesExA(
    h_server: ?HANDLE,
    p_level: ?*u32,
    session_id: u32,
    pp_process_info: ?*?PSTR,
    p_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wtsapi32" fn WTSEnumerateListenersW(
    h_server: ?HANDLE,
    p_reserved: ?*anyopaque,
    reserved: u32,
    p_listeners: ?[*]?*u16,
    p_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wtsapi32" fn WTSEnumerateListenersA(
    h_server: ?HANDLE,
    p_reserved: ?*anyopaque,
    reserved: u32,
    p_listeners: ?[*]?*i8,
    p_count: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wtsapi32" fn WTSQueryListenerConfigW(
    h_server: ?HANDLE,
    p_reserved: ?*anyopaque,
    reserved: u32,
    p_listener_name: ?PWSTR,
    p_buffer: ?*WTSLISTENERCONFIGW,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wtsapi32" fn WTSQueryListenerConfigA(
    h_server: ?HANDLE,
    p_reserved: ?*anyopaque,
    reserved: u32,
    p_listener_name: ?PSTR,
    p_buffer: ?*WTSLISTENERCONFIGA,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wtsapi32" fn WTSCreateListenerW(
    h_server: ?HANDLE,
    p_reserved: ?*anyopaque,
    reserved: u32,
    p_listener_name: ?PWSTR,
    p_buffer: ?*WTSLISTENERCONFIGW,
    flag: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wtsapi32" fn WTSCreateListenerA(
    h_server: ?HANDLE,
    p_reserved: ?*anyopaque,
    reserved: u32,
    p_listener_name: ?PSTR,
    p_buffer: ?*WTSLISTENERCONFIGA,
    flag: u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wtsapi32" fn WTSSetListenerSecurityW(
    h_server: ?HANDLE,
    p_reserved: ?*anyopaque,
    reserved: u32,
    p_listener_name: ?PWSTR,
    security_information: u32,
    p_security_descriptor: ?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wtsapi32" fn WTSSetListenerSecurityA(
    h_server: ?HANDLE,
    p_reserved: ?*anyopaque,
    reserved: u32,
    p_listener_name: ?PSTR,
    security_information: u32,
    p_security_descriptor: ?PSECURITY_DESCRIPTOR,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wtsapi32" fn WTSGetListenerSecurityW(
    h_server: ?HANDLE,
    p_reserved: ?*anyopaque,
    reserved: u32,
    p_listener_name: ?PWSTR,
    security_information: u32,
    p_security_descriptor: ?PSECURITY_DESCRIPTOR,
    n_length: u32,
    lpn_length_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.1'
pub extern "wtsapi32" fn WTSGetListenerSecurityA(
    h_server: ?HANDLE,
    p_reserved: ?*anyopaque,
    reserved: u32,
    p_listener_name: ?PSTR,
    security_information: u32,
    p_security_descriptor: ?PSECURITY_DESCRIPTOR,
    n_length: u32,
    lpn_length_needed: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wtsapi32" fn WTSEnableChildSessions(
    b_enable: BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wtsapi32" fn WTSIsChildSessionsEnabled(
    pb_enabled: ?*BOOL,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wtsapi32" fn WTSGetChildSessionId(
    p_session_id: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows8.0'
pub extern "wtsapi32" fn WTSSetRenderHint(
    p_render_hint_i_d: ?*u64,
    hwnd_owner: ?HWND,
    render_hint_type: u32,
    cb_hint_data_length: u32,
    // TODO: what to do with BytesParamIndex 3?
    p_hint_data: ?*u8,
) callconv(@import("std").os.windows.WINAPI) HRESULT;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "kernel32" fn ProcessIdToSessionId(
    dw_process_id: u32,
    p_session_id: ?*u32,
) callconv(@import("std").os.windows.WINAPI) BOOL;

// TODO: this type is limited to platform 'windows6.0.6000'
pub extern "kernel32" fn WTSGetActiveConsoleSessionId() callconv(@import("std").os.windows.WINAPI) u32;

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (34)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
        pub const WTS_SERVER_INFO = thismodule.WTS_SERVER_INFOA;
        pub const WTS_SESSION_INFO = thismodule.WTS_SESSION_INFOA;
        pub const WTS_SESSION_INFO_1 = thismodule.WTS_SESSION_INFO_1A;
        pub const WTS_PROCESS_INFO = thismodule.WTS_PROCESS_INFOA;
        pub const WTSCONFIGINFO = thismodule.WTSCONFIGINFOA;
        pub const WTSINFO = thismodule.WTSINFOA;
        pub const WTSINFOEX_LEVEL1_ = thismodule.WTSINFOEX_LEVEL1_A;
        pub const WTSINFOEX_LEVEL_ = thismodule.WTSINFOEX_LEVEL_A;
        pub const WTSINFOEX = thismodule.WTSINFOEXA;
        pub const WTSCLIENT = thismodule.WTSCLIENTA;
        pub const _WTS_PRODUCT_INFO = thismodule._WTS_PRODUCT_INFOA;
        pub const WTS_VALIDATION_INFORMATION = thismodule.WTS_VALIDATION_INFORMATIONA;
        pub const WTSUSERCONFIG = thismodule.WTSUSERCONFIGA;
        pub const WTS_PROCESS_INFO_EX = thismodule.WTS_PROCESS_INFO_EXA;
        pub const WTSLISTENERCONFIG = thismodule.WTSLISTENERCONFIGA;
        pub const WTSStartRemoteControlSession = thismodule.WTSStartRemoteControlSessionA;
        pub const WTSConnectSession = thismodule.WTSConnectSessionA;
        pub const WTSEnumerateServers = thismodule.WTSEnumerateServersA;
        pub const WTSOpenServer = thismodule.WTSOpenServerA;
        pub const WTSOpenServerEx = thismodule.WTSOpenServerExA;
        pub const WTSEnumerateSessions = thismodule.WTSEnumerateSessionsA;
        pub const WTSEnumerateSessionsEx = thismodule.WTSEnumerateSessionsExA;
        pub const WTSEnumerateProcesses = thismodule.WTSEnumerateProcessesA;
        pub const WTSQuerySessionInformation = thismodule.WTSQuerySessionInformationA;
        pub const WTSQueryUserConfig = thismodule.WTSQueryUserConfigA;
        pub const WTSSetUserConfig = thismodule.WTSSetUserConfigA;
        pub const WTSSendMessage = thismodule.WTSSendMessageA;
        pub const WTSFreeMemoryEx = thismodule.WTSFreeMemoryExA;
        pub const WTSEnumerateProcessesEx = thismodule.WTSEnumerateProcessesExA;
        pub const WTSEnumerateListeners = thismodule.WTSEnumerateListenersA;
        pub const WTSQueryListenerConfig = thismodule.WTSQueryListenerConfigA;
        pub const WTSCreateListener = thismodule.WTSCreateListenerA;
        pub const WTSSetListenerSecurity = thismodule.WTSSetListenerSecurityA;
        pub const WTSGetListenerSecurity = thismodule.WTSGetListenerSecurityA;
    },
    .wide => struct {
        pub const WTS_SERVER_INFO = thismodule.WTS_SERVER_INFOW;
        pub const WTS_SESSION_INFO = thismodule.WTS_SESSION_INFOW;
        pub const WTS_SESSION_INFO_1 = thismodule.WTS_SESSION_INFO_1W;
        pub const WTS_PROCESS_INFO = thismodule.WTS_PROCESS_INFOW;
        pub const WTSCONFIGINFO = thismodule.WTSCONFIGINFOW;
        pub const WTSINFO = thismodule.WTSINFOW;
        pub const WTSINFOEX_LEVEL1_ = thismodule.WTSINFOEX_LEVEL1_W;
        pub const WTSINFOEX_LEVEL_ = thismodule.WTSINFOEX_LEVEL_W;
        pub const WTSINFOEX = thismodule.WTSINFOEXW;
        pub const WTSCLIENT = thismodule.WTSCLIENTW;
        pub const _WTS_PRODUCT_INFO = thismodule._WTS_PRODUCT_INFOW;
        pub const WTS_VALIDATION_INFORMATION = thismodule.WTS_VALIDATION_INFORMATIONW;
        pub const WTSUSERCONFIG = thismodule.WTSUSERCONFIGW;
        pub const WTS_PROCESS_INFO_EX = thismodule.WTS_PROCESS_INFO_EXW;
        pub const WTSLISTENERCONFIG = thismodule.WTSLISTENERCONFIGW;
        pub const WTSStartRemoteControlSession = thismodule.WTSStartRemoteControlSessionW;
        pub const WTSConnectSession = thismodule.WTSConnectSessionW;
        pub const WTSEnumerateServers = thismodule.WTSEnumerateServersW;
        pub const WTSOpenServer = thismodule.WTSOpenServerW;
        pub const WTSOpenServerEx = thismodule.WTSOpenServerExW;
        pub const WTSEnumerateSessions = thismodule.WTSEnumerateSessionsW;
        pub const WTSEnumerateSessionsEx = thismodule.WTSEnumerateSessionsExW;
        pub const WTSEnumerateProcesses = thismodule.WTSEnumerateProcessesW;
        pub const WTSQuerySessionInformation = thismodule.WTSQuerySessionInformationW;
        pub const WTSQueryUserConfig = thismodule.WTSQueryUserConfigW;
        pub const WTSSetUserConfig = thismodule.WTSSetUserConfigW;
        pub const WTSSendMessage = thismodule.WTSSendMessageW;
        pub const WTSFreeMemoryEx = thismodule.WTSFreeMemoryExW;
        pub const WTSEnumerateProcessesEx = thismodule.WTSEnumerateProcessesExW;
        pub const WTSEnumerateListeners = thismodule.WTSEnumerateListenersW;
        pub const WTSQueryListenerConfig = thismodule.WTSQueryListenerConfigW;
        pub const WTSCreateListener = thismodule.WTSCreateListenerW;
        pub const WTSSetListenerSecurity = thismodule.WTSSetListenerSecurityW;
        pub const WTSGetListenerSecurity = thismodule.WTSGetListenerSecurityW;
    },
    .unspecified => if (@import("builtin").is_test) struct {
        pub const WTS_SERVER_INFO = *opaque {};
        pub const WTS_SESSION_INFO = *opaque {};
        pub const WTS_SESSION_INFO_1 = *opaque {};
        pub const WTS_PROCESS_INFO = *opaque {};
        pub const WTSCONFIGINFO = *opaque {};
        pub const WTSINFO = *opaque {};
        pub const WTSINFOEX_LEVEL1_ = *opaque {};
        pub const WTSINFOEX_LEVEL_ = *opaque {};
        pub const WTSINFOEX = *opaque {};
        pub const WTSCLIENT = *opaque {};
        pub const _WTS_PRODUCT_INFO = *opaque {};
        pub const WTS_VALIDATION_INFORMATION = *opaque {};
        pub const WTSUSERCONFIG = *opaque {};
        pub const WTS_PROCESS_INFO_EX = *opaque {};
        pub const WTSLISTENERCONFIG = *opaque {};
        pub const WTSStartRemoteControlSession = *opaque {};
        pub const WTSConnectSession = *opaque {};
        pub const WTSEnumerateServers = *opaque {};
        pub const WTSOpenServer = *opaque {};
        pub const WTSOpenServerEx = *opaque {};
        pub const WTSEnumerateSessions = *opaque {};
        pub const WTSEnumerateSessionsEx = *opaque {};
        pub const WTSEnumerateProcesses = *opaque {};
        pub const WTSQuerySessionInformation = *opaque {};
        pub const WTSQueryUserConfig = *opaque {};
        pub const WTSSetUserConfig = *opaque {};
        pub const WTSSendMessage = *opaque {};
        pub const WTSFreeMemoryEx = *opaque {};
        pub const WTSEnumerateProcessesEx = *opaque {};
        pub const WTSEnumerateListeners = *opaque {};
        pub const WTSQueryListenerConfig = *opaque {};
        pub const WTSCreateListener = *opaque {};
        pub const WTSSetListenerSecurity = *opaque {};
        pub const WTSGetListenerSecurity = *opaque {};
    } else struct {
        pub const WTS_SERVER_INFO = @compileError("'WTS_SERVER_INFO' requires that UNICODE be set to true or false in the root module");
        pub const WTS_SESSION_INFO = @compileError("'WTS_SESSION_INFO' requires that UNICODE be set to true or false in the root module");
        pub const WTS_SESSION_INFO_1 = @compileError("'WTS_SESSION_INFO_1' requires that UNICODE be set to true or false in the root module");
        pub const WTS_PROCESS_INFO = @compileError("'WTS_PROCESS_INFO' requires that UNICODE be set to true or false in the root module");
        pub const WTSCONFIGINFO = @compileError("'WTSCONFIGINFO' requires that UNICODE be set to true or false in the root module");
        pub const WTSINFO = @compileError("'WTSINFO' requires that UNICODE be set to true or false in the root module");
        pub const WTSINFOEX_LEVEL1_ = @compileError("'WTSINFOEX_LEVEL1_' requires that UNICODE be set to true or false in the root module");
        pub const WTSINFOEX_LEVEL_ = @compileError("'WTSINFOEX_LEVEL_' requires that UNICODE be set to true or false in the root module");
        pub const WTSINFOEX = @compileError("'WTSINFOEX' requires that UNICODE be set to true or false in the root module");
        pub const WTSCLIENT = @compileError("'WTSCLIENT' requires that UNICODE be set to true or false in the root module");
        pub const _WTS_PRODUCT_INFO = @compileError("'_WTS_PRODUCT_INFO' requires that UNICODE be set to true or false in the root module");
        pub const WTS_VALIDATION_INFORMATION = @compileError("'WTS_VALIDATION_INFORMATION' requires that UNICODE be set to true or false in the root module");
        pub const WTSUSERCONFIG = @compileError("'WTSUSERCONFIG' requires that UNICODE be set to true or false in the root module");
        pub const WTS_PROCESS_INFO_EX = @compileError("'WTS_PROCESS_INFO_EX' requires that UNICODE be set to true or false in the root module");
        pub const WTSLISTENERCONFIG = @compileError("'WTSLISTENERCONFIG' requires that UNICODE be set to true or false in the root module");
        pub const WTSStartRemoteControlSession = @compileError("'WTSStartRemoteControlSession' requires that UNICODE be set to true or false in the root module");
        pub const WTSConnectSession = @compileError("'WTSConnectSession' requires that UNICODE be set to true or false in the root module");
        pub const WTSEnumerateServers = @compileError("'WTSEnumerateServers' requires that UNICODE be set to true or false in the root module");
        pub const WTSOpenServer = @compileError("'WTSOpenServer' requires that UNICODE be set to true or false in the root module");
        pub const WTSOpenServerEx = @compileError("'WTSOpenServerEx' requires that UNICODE be set to true or false in the root module");
        pub const WTSEnumerateSessions = @compileError("'WTSEnumerateSessions' requires that UNICODE be set to true or false in the root module");
        pub const WTSEnumerateSessionsEx = @compileError("'WTSEnumerateSessionsEx' requires that UNICODE be set to true or false in the root module");
        pub const WTSEnumerateProcesses = @compileError("'WTSEnumerateProcesses' requires that UNICODE be set to true or false in the root module");
        pub const WTSQuerySessionInformation = @compileError("'WTSQuerySessionInformation' requires that UNICODE be set to true or false in the root module");
        pub const WTSQueryUserConfig = @compileError("'WTSQueryUserConfig' requires that UNICODE be set to true or false in the root module");
        pub const WTSSetUserConfig = @compileError("'WTSSetUserConfig' requires that UNICODE be set to true or false in the root module");
        pub const WTSSendMessage = @compileError("'WTSSendMessage' requires that UNICODE be set to true or false in the root module");
        pub const WTSFreeMemoryEx = @compileError("'WTSFreeMemoryEx' requires that UNICODE be set to true or false in the root module");
        pub const WTSEnumerateProcessesEx = @compileError("'WTSEnumerateProcessesEx' requires that UNICODE be set to true or false in the root module");
        pub const WTSEnumerateListeners = @compileError("'WTSEnumerateListeners' requires that UNICODE be set to true or false in the root module");
        pub const WTSQueryListenerConfig = @compileError("'WTSQueryListenerConfig' requires that UNICODE be set to true or false in the root module");
        pub const WTSCreateListener = @compileError("'WTSCreateListener' requires that UNICODE be set to true or false in the root module");
        pub const WTSSetListenerSecurity = @compileError("'WTSSetListenerSecurity' requires that UNICODE be set to true or false in the root module");
        pub const WTSGetListenerSecurity = @compileError("'WTSGetListenerSecurity' requires that UNICODE be set to true or false in the root module");
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (26)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const APO_CONNECTION_PROPERTY = @import("../media/audio/apo.zig").APO_CONNECTION_PROPERTY;
const BOOL = @import("../foundation.zig").BOOL;
const BOOLEAN = @import("../foundation.zig").BOOLEAN;
const BSTR = @import("../foundation.zig").BSTR;
const CHAR = @import("../foundation.zig").CHAR;
const FILETIME = @import("../foundation.zig").FILETIME;
const HANDLE = @import("../foundation.zig").HANDLE;
const HANDLE_PTR = @import("../foundation.zig").HANDLE_PTR;
const HRESULT = @import("../foundation.zig").HRESULT;
const HSTRING = @import("../system/win_rt.zig").HSTRING;
const HWND = @import("../foundation.zig").HWND;
const IDispatch = @import("../system/com.zig").IDispatch;
const IPropertyBag = @import("../system/com/structured_storage.zig").IPropertyBag;
const IUnknown = @import("../system/com.zig").IUnknown;
const LARGE_INTEGER = @import("../foundation.zig").LARGE_INTEGER;
const MESSAGEBOX_RESULT = @import("../ui/windows_and_messaging.zig").MESSAGEBOX_RESULT;
const MESSAGEBOX_STYLE = @import("../ui/windows_and_messaging.zig").MESSAGEBOX_STYLE;
const PSECURITY_DESCRIPTOR = @import("../security.zig").PSECURITY_DESCRIPTOR;
const PSID = @import("../foundation.zig").PSID;
const PSTR = @import("../foundation.zig").PSTR;
const PWSTR = @import("../foundation.zig").PWSTR;
const RECT = @import("../foundation.zig").RECT;
const SAFEARRAY = @import("../system/com.zig").SAFEARRAY;
const VARIANT = @import("../system/com.zig").VARIANT;
const WAVEFORMATEX = @import("../media/audio.zig").WAVEFORMATEX;

test {
    // The following '_ = <FuncPtrType>' lines are a workaround for https://github.com/ziglang/zig/issues/4476
    if (@hasDecl(@This(), "PCHANNEL_INIT_EVENT_FN")) {
        _ = PCHANNEL_INIT_EVENT_FN;
    }
    if (@hasDecl(@This(), "PCHANNEL_OPEN_EVENT_FN")) {
        _ = PCHANNEL_OPEN_EVENT_FN;
    }
    if (@hasDecl(@This(), "PVIRTUALCHANNELINIT")) {
        _ = PVIRTUALCHANNELINIT;
    }
    if (@hasDecl(@This(), "PVIRTUALCHANNELOPEN")) {
        _ = PVIRTUALCHANNELOPEN;
    }
    if (@hasDecl(@This(), "PVIRTUALCHANNELCLOSE")) {
        _ = PVIRTUALCHANNELCLOSE;
    }
    if (@hasDecl(@This(), "PVIRTUALCHANNELWRITE")) {
        _ = PVIRTUALCHANNELWRITE;
    }
    if (@hasDecl(@This(), "PVIRTUALCHANNELENTRY")) {
        _ = PVIRTUALCHANNELENTRY;
    }

    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
