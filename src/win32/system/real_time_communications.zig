//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (252)
//--------------------------------------------------------------------------------
pub const RTCCS_FORCE_PROFILE = @as(u32, 1);
pub const RTCCS_FAIL_ON_REDIRECT = @as(u32, 2);
pub const RTCMT_AUDIO_SEND = @as(u32, 1);
pub const RTCMT_AUDIO_RECEIVE = @as(u32, 2);
pub const RTCMT_VIDEO_SEND = @as(u32, 4);
pub const RTCMT_VIDEO_RECEIVE = @as(u32, 8);
pub const RTCMT_T120_SENDRECV = @as(u32, 16);
pub const RTCSI_PC_TO_PC = @as(u32, 1);
pub const RTCSI_PC_TO_PHONE = @as(u32, 2);
pub const RTCSI_PHONE_TO_PHONE = @as(u32, 4);
pub const RTCSI_IM = @as(u32, 8);
pub const RTCSI_MULTIPARTY_IM = @as(u32, 16);
pub const RTCSI_APPLICATION = @as(u32, 32);
pub const RTCTR_UDP = @as(u32, 1);
pub const RTCTR_TCP = @as(u32, 2);
pub const RTCTR_TLS = @as(u32, 4);
pub const RTCAU_BASIC = @as(u32, 1);
pub const RTCAU_DIGEST = @as(u32, 2);
pub const RTCAU_NTLM = @as(u32, 4);
pub const RTCAU_KERBEROS = @as(u32, 8);
pub const RTCAU_USE_LOGON_CRED = @as(u32, 65536);
pub const RTCRF_REGISTER_INVITE_SESSIONS = @as(u32, 1);
pub const RTCRF_REGISTER_MESSAGE_SESSIONS = @as(u32, 2);
pub const RTCRF_REGISTER_PRESENCE = @as(u32, 4);
pub const RTCRF_REGISTER_NOTIFY = @as(u32, 8);
pub const RTCRF_REGISTER_ALL = @as(u32, 15);
pub const RTCRMF_BUDDY_ROAMING = @as(u32, 1);
pub const RTCRMF_WATCHER_ROAMING = @as(u32, 2);
pub const RTCRMF_PRESENCE_ROAMING = @as(u32, 4);
pub const RTCRMF_PROFILE_ROAMING = @as(u32, 8);
pub const RTCRMF_ALL_ROAMING = @as(u32, 15);
pub const RTCEF_CLIENT = @as(u32, 1);
pub const RTCEF_REGISTRATION_STATE_CHANGE = @as(u32, 2);
pub const RTCEF_SESSION_STATE_CHANGE = @as(u32, 4);
pub const RTCEF_SESSION_OPERATION_COMPLETE = @as(u32, 8);
pub const RTCEF_PARTICIPANT_STATE_CHANGE = @as(u32, 16);
pub const RTCEF_MEDIA = @as(u32, 32);
pub const RTCEF_INTENSITY = @as(u32, 64);
pub const RTCEF_MESSAGING = @as(u32, 128);
pub const RTCEF_BUDDY = @as(u32, 256);
pub const RTCEF_WATCHER = @as(u32, 512);
pub const RTCEF_PROFILE = @as(u32, 1024);
pub const RTCEF_USERSEARCH = @as(u32, 2048);
pub const RTCEF_INFO = @as(u32, 4096);
pub const RTCEF_GROUP = @as(u32, 8192);
pub const RTCEF_MEDIA_REQUEST = @as(u32, 16384);
pub const RTCEF_ROAMING = @as(u32, 65536);
pub const RTCEF_PRESENCE_PROPERTY = @as(u32, 131072);
pub const RTCEF_BUDDY2 = @as(u32, 262144);
pub const RTCEF_WATCHER2 = @as(u32, 524288);
pub const RTCEF_SESSION_REFER_STATUS = @as(u32, 1048576);
pub const RTCEF_SESSION_REFERRED = @as(u32, 2097152);
pub const RTCEF_REINVITE = @as(u32, 4194304);
pub const RTCEF_PRESENCE_DATA = @as(u32, 8388608);
pub const RTCEF_PRESENCE_STATUS = @as(u32, 16777216);
pub const RTCEF_ALL = @as(u32, 33554431);
pub const RTCIF_DISABLE_MEDIA = @as(u32, 1);
pub const RTCIF_DISABLE_UPNP = @as(u32, 2);
pub const RTCIF_ENABLE_SERVER_CLASS = @as(u32, 4);
pub const RTCIF_DISABLE_STRICT_DNS = @as(u32, 8);
pub const FACILITY_RTC_INTERFACE = @as(u32, 238);
pub const FACILITY_SIP_STATUS_CODE = @as(u32, 239);
pub const FACILITY_PINT_STATUS_CODE = @as(u32, 240);
pub const STATUS_SEVERITY_RTC_ERROR = @as(u32, 2);
pub const RTC_E_SIP_CODECS_DO_NOT_MATCH = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886080));
pub const RTC_E_SIP_STREAM_PRESENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886079));
pub const RTC_E_SIP_STREAM_NOT_PRESENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886078));
pub const RTC_E_SIP_NO_STREAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886077));
pub const RTC_E_SIP_PARSE_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886076));
pub const RTC_E_SIP_HEADER_NOT_PRESENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886075));
pub const RTC_E_SDP_NOT_PRESENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886074));
pub const RTC_E_SDP_PARSE_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886073));
pub const RTC_E_SDP_UPDATE_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886072));
pub const RTC_E_SDP_MULTICAST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886071));
pub const RTC_E_SDP_CONNECTION_ADDR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886070));
pub const RTC_E_SDP_NO_MEDIA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886069));
pub const RTC_E_SIP_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886068));
pub const RTC_E_SDP_FAILED_TO_BUILD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886067));
pub const RTC_E_SIP_INVITE_TRANSACTION_PENDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886066));
pub const RTC_E_SIP_AUTH_HEADER_SENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886065));
pub const RTC_E_SIP_AUTH_TYPE_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886064));
pub const RTC_E_SIP_AUTH_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886063));
pub const RTC_E_INVALID_SIP_URL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886062));
pub const RTC_E_DESTINATION_ADDRESS_LOCAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886061));
pub const RTC_E_INVALID_ADDRESS_LOCAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886060));
pub const RTC_E_DESTINATION_ADDRESS_MULTICAST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886059));
pub const RTC_E_INVALID_PROXY_ADDRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886058));
pub const RTC_E_SIP_TRANSPORT_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886057));
pub const RTC_E_SIP_NEED_MORE_DATA = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886056));
pub const RTC_E_SIP_CALL_DISCONNECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886055));
pub const RTC_E_SIP_REQUEST_DESTINATION_ADDR_NOT_PRESENT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886054));
pub const RTC_E_SIP_UDP_SIZE_EXCEEDED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886053));
pub const RTC_E_SIP_SSL_TUNNEL_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886052));
pub const RTC_E_SIP_SSL_NEGOTIATION_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886051));
pub const RTC_E_SIP_STACK_SHUTDOWN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886050));
pub const RTC_E_MEDIA_CONTROLLER_STATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886049));
pub const RTC_E_MEDIA_NEED_TERMINAL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886048));
pub const RTC_E_MEDIA_AUDIO_DEVICE_NOT_AVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886047));
pub const RTC_E_MEDIA_VIDEO_DEVICE_NOT_AVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886046));
pub const RTC_E_START_STREAM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886045));
pub const RTC_E_MEDIA_AEC = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886044));
pub const RTC_E_CLIENT_NOT_INITIALIZED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886043));
pub const RTC_E_CLIENT_ALREADY_INITIALIZED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886042));
pub const RTC_E_CLIENT_ALREADY_SHUT_DOWN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886041));
pub const RTC_E_PRESENCE_NOT_ENABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886040));
pub const RTC_E_INVALID_SESSION_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886039));
pub const RTC_E_INVALID_SESSION_STATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886038));
pub const RTC_E_NO_PROFILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886037));
pub const RTC_E_LOCAL_PHONE_NEEDED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886036));
pub const RTC_E_NO_DEVICE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886035));
pub const RTC_E_INVALID_PROFILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886034));
pub const RTC_E_PROFILE_NO_PROVISION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886033));
pub const RTC_E_PROFILE_NO_KEY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886032));
pub const RTC_E_PROFILE_NO_NAME = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886031));
pub const RTC_E_PROFILE_NO_USER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886030));
pub const RTC_E_PROFILE_NO_USER_URI = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886029));
pub const RTC_E_PROFILE_NO_SERVER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886028));
pub const RTC_E_PROFILE_NO_SERVER_ADDRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886027));
pub const RTC_E_PROFILE_NO_SERVER_PROTOCOL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886026));
pub const RTC_E_PROFILE_INVALID_SERVER_PROTOCOL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886025));
pub const RTC_E_PROFILE_INVALID_SERVER_AUTHMETHOD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886024));
pub const RTC_E_PROFILE_INVALID_SERVER_ROLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886023));
pub const RTC_E_PROFILE_MULTIPLE_REGISTRARS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886022));
pub const RTC_E_PROFILE_INVALID_SESSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886021));
pub const RTC_E_PROFILE_INVALID_SESSION_PARTY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886020));
pub const RTC_E_PROFILE_INVALID_SESSION_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886019));
pub const RTC_E_OPERATION_WITH_TOO_MANY_PARTICIPANTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886018));
pub const RTC_E_BASIC_AUTH_SET_TLS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886017));
pub const RTC_E_SIP_HIGH_SECURITY_SET_TLS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886016));
pub const RTC_S_ROAMING_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 15597633));
pub const RTC_E_PROFILE_SERVER_UNAUTHORIZED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886014));
pub const RTC_E_DUPLICATE_REALM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886013));
pub const RTC_E_POLICY_NOT_ALLOW = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886012));
pub const RTC_E_PORT_MAPPING_UNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886011));
pub const RTC_E_PORT_MAPPING_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886010));
pub const RTC_E_SECURITY_LEVEL_NOT_COMPATIBLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886009));
pub const RTC_E_SECURITY_LEVEL_NOT_DEFINED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886008));
pub const RTC_E_SECURITY_LEVEL_NOT_SUPPORTED_BY_PARTICIPANT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886007));
pub const RTC_E_DUPLICATE_BUDDY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886006));
pub const RTC_E_DUPLICATE_WATCHER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886005));
pub const RTC_E_MALFORMED_XML = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886004));
pub const RTC_E_ROAMING_OPERATION_INTERRUPTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886003));
pub const RTC_E_ROAMING_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886002));
pub const RTC_E_INVALID_BUDDY_LIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886001));
pub const RTC_E_INVALID_ACL_LIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131886000));
pub const RTC_E_NO_GROUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885999));
pub const RTC_E_DUPLICATE_GROUP = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885998));
pub const RTC_E_TOO_MANY_GROUPS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885997));
pub const RTC_E_NO_BUDDY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885996));
pub const RTC_E_NO_WATCHER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885995));
pub const RTC_E_NO_REALM = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885994));
pub const RTC_E_NO_TRANSPORT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885993));
pub const RTC_E_NOT_EXIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885992));
pub const RTC_E_INVALID_PREFERENCE_LIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885991));
pub const RTC_E_MAX_PENDING_OPERATIONS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885990));
pub const RTC_E_TOO_MANY_RETRIES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885989));
pub const RTC_E_INVALID_PORTRANGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885988));
pub const RTC_E_SIP_CALL_CONNECTION_NOT_ESTABLISHED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885987));
pub const RTC_E_SIP_ADDITIONAL_PARTY_IN_TWO_PARTY_SESSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885986));
pub const RTC_E_SIP_PARTY_ALREADY_IN_SESSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885985));
pub const RTC_E_SIP_OTHER_PARTY_JOIN_IN_PROGRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885984));
pub const RTC_E_INVALID_OBJECT_STATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885983));
pub const RTC_E_PRESENCE_ENABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885982));
pub const RTC_E_ROAMING_ENABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885981));
pub const RTC_E_SIP_TLS_INCOMPATIBLE_ENCRYPTION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885980));
pub const RTC_E_SIP_INVALID_CERTIFICATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885979));
pub const RTC_E_SIP_DNS_FAIL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885978));
pub const RTC_E_SIP_TCP_FAIL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885977));
pub const RTC_E_TOO_SMALL_EXPIRES_VALUE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885976));
pub const RTC_E_SIP_TLS_FAIL = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885975));
pub const RTC_E_NOT_PRESENCE_PROFILE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885974));
pub const RTC_E_SIP_INVITEE_PARTY_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885973));
pub const RTC_E_SIP_AUTH_TIME_SKEW = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885972));
pub const RTC_E_INVALID_REGISTRATION_STATE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885971));
pub const RTC_E_MEDIA_DISABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885970));
pub const RTC_E_MEDIA_ENABLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885969));
pub const RTC_E_REFER_NOT_ACCEPTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885968));
pub const RTC_E_REFER_NOT_ALLOWED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885967));
pub const RTC_E_REFER_NOT_EXIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885966));
pub const RTC_E_SIP_HOLD_OPERATION_PENDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885965));
pub const RTC_E_SIP_UNHOLD_OPERATION_PENDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885964));
pub const RTC_E_MEDIA_SESSION_NOT_EXIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885963));
pub const RTC_E_MEDIA_SESSION_IN_HOLD = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885962));
pub const RTC_E_ANOTHER_MEDIA_SESSION_ACTIVE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885961));
pub const RTC_E_MAX_REDIRECTS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885960));
pub const RTC_E_REDIRECT_PROCESSING_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885959));
pub const RTC_E_LISTENING_SOCKET_NOT_EXIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885958));
pub const RTC_E_INVALID_LISTEN_SOCKET = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885957));
pub const RTC_E_PORT_MANAGER_ALREADY_SET = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885956));
pub const RTC_E_SECURITY_LEVEL_ALREADY_SET = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885955));
pub const RTC_E_UDP_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885954));
pub const RTC_E_SIP_REFER_OPERATION_PENDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885953));
pub const RTC_E_PLATFORM_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885952));
pub const RTC_E_SIP_PEER_PARTICIPANT_IN_MULTIPARTY_SESSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885951));
pub const RTC_E_NOT_ALLOWED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885950));
pub const RTC_E_REGISTRATION_DEACTIVATED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885949));
pub const RTC_E_REGISTRATION_REJECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885948));
pub const RTC_E_REGISTRATION_UNREGISTERED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131885947));
pub const RTC_E_STATUS_INFO_TRYING = @import("../zig.zig").typedConst(HRESULT, @as(i32, 15663204));
pub const RTC_E_STATUS_INFO_RINGING = @import("../zig.zig").typedConst(HRESULT, @as(i32, 15663284));
pub const RTC_E_STATUS_INFO_CALL_FORWARDING = @import("../zig.zig").typedConst(HRESULT, @as(i32, 15663285));
pub const RTC_E_STATUS_INFO_QUEUED = @import("../zig.zig").typedConst(HRESULT, @as(i32, 15663286));
pub const RTC_E_STATUS_SESSION_PROGRESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, 15663287));
pub const RTC_E_STATUS_SUCCESS = @import("../zig.zig").typedConst(HRESULT, @as(i32, 15663304));
pub const RTC_E_STATUS_REDIRECT_MULTIPLE_CHOICES = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820244));
pub const RTC_E_STATUS_REDIRECT_MOVED_PERMANENTLY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820243));
pub const RTC_E_STATUS_REDIRECT_MOVED_TEMPORARILY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820242));
pub const RTC_E_STATUS_REDIRECT_SEE_OTHER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820241));
pub const RTC_E_STATUS_REDIRECT_USE_PROXY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820239));
pub const RTC_E_STATUS_REDIRECT_ALTERNATIVE_SERVICE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820164));
pub const RTC_E_STATUS_CLIENT_BAD_REQUEST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820144));
pub const RTC_E_STATUS_CLIENT_UNAUTHORIZED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820143));
pub const RTC_E_STATUS_CLIENT_PAYMENT_REQUIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820142));
pub const RTC_E_STATUS_CLIENT_FORBIDDEN = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820141));
pub const RTC_E_STATUS_CLIENT_NOT_FOUND = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820140));
pub const RTC_E_STATUS_CLIENT_METHOD_NOT_ALLOWED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820139));
pub const RTC_E_STATUS_CLIENT_NOT_ACCEPTABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820138));
pub const RTC_E_STATUS_CLIENT_PROXY_AUTHENTICATION_REQUIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820137));
pub const RTC_E_STATUS_CLIENT_REQUEST_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820136));
pub const RTC_E_STATUS_CLIENT_CONFLICT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820135));
pub const RTC_E_STATUS_CLIENT_GONE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820134));
pub const RTC_E_STATUS_CLIENT_LENGTH_REQUIRED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820133));
pub const RTC_E_STATUS_CLIENT_REQUEST_ENTITY_TOO_LARGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820131));
pub const RTC_E_STATUS_CLIENT_REQUEST_URI_TOO_LARGE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820130));
pub const RTC_E_STATUS_CLIENT_UNSUPPORTED_MEDIA_TYPE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820129));
pub const RTC_E_STATUS_CLIENT_BAD_EXTENSION = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820124));
pub const RTC_E_STATUS_CLIENT_TEMPORARILY_NOT_AVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820064));
pub const RTC_E_STATUS_CLIENT_TRANSACTION_DOES_NOT_EXIST = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820063));
pub const RTC_E_STATUS_CLIENT_LOOP_DETECTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820062));
pub const RTC_E_STATUS_CLIENT_TOO_MANY_HOPS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820061));
pub const RTC_E_STATUS_CLIENT_ADDRESS_INCOMPLETE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820060));
pub const RTC_E_STATUS_CLIENT_AMBIGUOUS = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820059));
pub const RTC_E_STATUS_CLIENT_BUSY_HERE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820058));
pub const RTC_E_STATUS_REQUEST_TERMINATED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820057));
pub const RTC_E_STATUS_NOT_ACCEPTABLE_HERE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820056));
pub const RTC_E_STATUS_SERVER_INTERNAL_ERROR = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820044));
pub const RTC_E_STATUS_SERVER_NOT_IMPLEMENTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820043));
pub const RTC_E_STATUS_SERVER_BAD_GATEWAY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820042));
pub const RTC_E_STATUS_SERVER_SERVICE_UNAVAILABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820041));
pub const RTC_E_STATUS_SERVER_SERVER_TIMEOUT = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820040));
pub const RTC_E_STATUS_SERVER_VERSION_NOT_SUPPORTED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131820039));
pub const RTC_E_STATUS_GLOBAL_BUSY_EVERYWHERE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131819944));
pub const RTC_E_STATUS_GLOBAL_DECLINE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131819941));
pub const RTC_E_STATUS_GLOBAL_DOES_NOT_EXIST_ANYWHERE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131819940));
pub const RTC_E_STATUS_GLOBAL_NOT_ACCEPTABLE = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131819938));
pub const RTC_E_PINT_STATUS_REJECTED_BUSY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131755003));
pub const RTC_E_PINT_STATUS_REJECTED_NO_ANSWER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131755002));
pub const RTC_E_PINT_STATUS_REJECTED_ALL_BUSY = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131755001));
pub const RTC_E_PINT_STATUS_REJECTED_PL_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131755000));
pub const RTC_E_PINT_STATUS_REJECTED_SW_FAILED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131754999));
pub const RTC_E_PINT_STATUS_REJECTED_CANCELLED = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131754998));
pub const RTC_E_PINT_STATUS_REJECTED_BADNUMBER = @import("../zig.zig").typedConst(HRESULT, @as(i32, -2131754997));

//--------------------------------------------------------------------------------
// Section: Types (107)
//--------------------------------------------------------------------------------
const CLSID_RTCClient_Value = Guid.initString("7a42ea29-a2b7-40c4-b091-f6f024aa89be");
pub const CLSID_RTCClient = &CLSID_RTCClient_Value;

pub const RTC_AUDIO_DEVICE = enum(i32) {
    SPEAKER = 0,
    MICROPHONE = 1,
};
pub const RTCAD_SPEAKER = RTC_AUDIO_DEVICE.SPEAKER;
pub const RTCAD_MICROPHONE = RTC_AUDIO_DEVICE.MICROPHONE;

pub const RTC_VIDEO_DEVICE = enum(i32) {
    RECEIVE = 0,
    PREVIEW = 1,
};
pub const RTCVD_RECEIVE = RTC_VIDEO_DEVICE.RECEIVE;
pub const RTCVD_PREVIEW = RTC_VIDEO_DEVICE.PREVIEW;

pub const RTC_EVENT = enum(i32) {
    CLIENT = 0,
    REGISTRATION_STATE_CHANGE = 1,
    SESSION_STATE_CHANGE = 2,
    SESSION_OPERATION_COMPLETE = 3,
    PARTICIPANT_STATE_CHANGE = 4,
    MEDIA = 5,
    INTENSITY = 6,
    MESSAGING = 7,
    BUDDY = 8,
    WATCHER = 9,
    PROFILE = 10,
    USERSEARCH = 11,
    INFO = 12,
    GROUP = 13,
    MEDIA_REQUEST = 14,
    ROAMING = 15,
    PRESENCE_PROPERTY = 16,
    PRESENCE_DATA = 17,
    PRESENCE_STATUS = 18,
    SESSION_REFER_STATUS = 19,
    SESSION_REFERRED = 20,
    REINVITE = 21,
};
pub const RTCE_CLIENT = RTC_EVENT.CLIENT;
pub const RTCE_REGISTRATION_STATE_CHANGE = RTC_EVENT.REGISTRATION_STATE_CHANGE;
pub const RTCE_SESSION_STATE_CHANGE = RTC_EVENT.SESSION_STATE_CHANGE;
pub const RTCE_SESSION_OPERATION_COMPLETE = RTC_EVENT.SESSION_OPERATION_COMPLETE;
pub const RTCE_PARTICIPANT_STATE_CHANGE = RTC_EVENT.PARTICIPANT_STATE_CHANGE;
pub const RTCE_MEDIA = RTC_EVENT.MEDIA;
pub const RTCE_INTENSITY = RTC_EVENT.INTENSITY;
pub const RTCE_MESSAGING = RTC_EVENT.MESSAGING;
pub const RTCE_BUDDY = RTC_EVENT.BUDDY;
pub const RTCE_WATCHER = RTC_EVENT.WATCHER;
pub const RTCE_PROFILE = RTC_EVENT.PROFILE;
pub const RTCE_USERSEARCH = RTC_EVENT.USERSEARCH;
pub const RTCE_INFO = RTC_EVENT.INFO;
pub const RTCE_GROUP = RTC_EVENT.GROUP;
pub const RTCE_MEDIA_REQUEST = RTC_EVENT.MEDIA_REQUEST;
pub const RTCE_ROAMING = RTC_EVENT.ROAMING;
pub const RTCE_PRESENCE_PROPERTY = RTC_EVENT.PRESENCE_PROPERTY;
pub const RTCE_PRESENCE_DATA = RTC_EVENT.PRESENCE_DATA;
pub const RTCE_PRESENCE_STATUS = RTC_EVENT.PRESENCE_STATUS;
pub const RTCE_SESSION_REFER_STATUS = RTC_EVENT.SESSION_REFER_STATUS;
pub const RTCE_SESSION_REFERRED = RTC_EVENT.SESSION_REFERRED;
pub const RTCE_REINVITE = RTC_EVENT.REINVITE;

pub const RTC_LISTEN_MODE = enum(i32) {
    NONE = 0,
    DYNAMIC = 1,
    BOTH = 2,
};
pub const RTCLM_NONE = RTC_LISTEN_MODE.NONE;
pub const RTCLM_DYNAMIC = RTC_LISTEN_MODE.DYNAMIC;
pub const RTCLM_BOTH = RTC_LISTEN_MODE.BOTH;

pub const RTC_CLIENT_EVENT_TYPE = enum(i32) {
    VOLUME_CHANGE = 0,
    DEVICE_CHANGE = 1,
    NETWORK_QUALITY_CHANGE = 2,
    ASYNC_CLEANUP_DONE = 3,
};
pub const RTCCET_VOLUME_CHANGE = RTC_CLIENT_EVENT_TYPE.VOLUME_CHANGE;
pub const RTCCET_DEVICE_CHANGE = RTC_CLIENT_EVENT_TYPE.DEVICE_CHANGE;
pub const RTCCET_NETWORK_QUALITY_CHANGE = RTC_CLIENT_EVENT_TYPE.NETWORK_QUALITY_CHANGE;
pub const RTCCET_ASYNC_CLEANUP_DONE = RTC_CLIENT_EVENT_TYPE.ASYNC_CLEANUP_DONE;

pub const RTC_BUDDY_EVENT_TYPE = enum(i32) {
    ADD = 0,
    REMOVE = 1,
    UPDATE = 2,
    STATE_CHANGE = 3,
    ROAMED = 4,
    SUBSCRIBED = 5,
};
pub const RTCBET_BUDDY_ADD = RTC_BUDDY_EVENT_TYPE.ADD;
pub const RTCBET_BUDDY_REMOVE = RTC_BUDDY_EVENT_TYPE.REMOVE;
pub const RTCBET_BUDDY_UPDATE = RTC_BUDDY_EVENT_TYPE.UPDATE;
pub const RTCBET_BUDDY_STATE_CHANGE = RTC_BUDDY_EVENT_TYPE.STATE_CHANGE;
pub const RTCBET_BUDDY_ROAMED = RTC_BUDDY_EVENT_TYPE.ROAMED;
pub const RTCBET_BUDDY_SUBSCRIBED = RTC_BUDDY_EVENT_TYPE.SUBSCRIBED;

pub const RTC_WATCHER_EVENT_TYPE = enum(i32) {
    ADD = 0,
    REMOVE = 1,
    UPDATE = 2,
    OFFERING = 3,
    ROAMED = 4,
};
pub const RTCWET_WATCHER_ADD = RTC_WATCHER_EVENT_TYPE.ADD;
pub const RTCWET_WATCHER_REMOVE = RTC_WATCHER_EVENT_TYPE.REMOVE;
pub const RTCWET_WATCHER_UPDATE = RTC_WATCHER_EVENT_TYPE.UPDATE;
pub const RTCWET_WATCHER_OFFERING = RTC_WATCHER_EVENT_TYPE.OFFERING;
pub const RTCWET_WATCHER_ROAMED = RTC_WATCHER_EVENT_TYPE.ROAMED;

pub const RTC_GROUP_EVENT_TYPE = enum(i32) {
    ADD = 0,
    REMOVE = 1,
    UPDATE = 2,
    BUDDY_ADD = 3,
    BUDDY_REMOVE = 4,
    ROAMED = 5,
};
pub const RTCGET_GROUP_ADD = RTC_GROUP_EVENT_TYPE.ADD;
pub const RTCGET_GROUP_REMOVE = RTC_GROUP_EVENT_TYPE.REMOVE;
pub const RTCGET_GROUP_UPDATE = RTC_GROUP_EVENT_TYPE.UPDATE;
pub const RTCGET_GROUP_BUDDY_ADD = RTC_GROUP_EVENT_TYPE.BUDDY_ADD;
pub const RTCGET_GROUP_BUDDY_REMOVE = RTC_GROUP_EVENT_TYPE.BUDDY_REMOVE;
pub const RTCGET_GROUP_ROAMED = RTC_GROUP_EVENT_TYPE.ROAMED;

pub const RTC_TERMINATE_REASON = enum(i32) {
    NORMAL = 0,
    DND = 1,
    BUSY = 2,
    REJECT = 3,
    TIMEOUT = 4,
    SHUTDOWN = 5,
    INSUFFICIENT_SECURITY_LEVEL = 6,
    NOT_SUPPORTED = 7,
};
pub const RTCTR_NORMAL = RTC_TERMINATE_REASON.NORMAL;
pub const RTCTR_DND = RTC_TERMINATE_REASON.DND;
pub const RTCTR_BUSY = RTC_TERMINATE_REASON.BUSY;
pub const RTCTR_REJECT = RTC_TERMINATE_REASON.REJECT;
pub const RTCTR_TIMEOUT = RTC_TERMINATE_REASON.TIMEOUT;
pub const RTCTR_SHUTDOWN = RTC_TERMINATE_REASON.SHUTDOWN;
pub const RTCTR_INSUFFICIENT_SECURITY_LEVEL = RTC_TERMINATE_REASON.INSUFFICIENT_SECURITY_LEVEL;
pub const RTCTR_NOT_SUPPORTED = RTC_TERMINATE_REASON.NOT_SUPPORTED;

pub const RTC_REGISTRATION_STATE = enum(i32) {
    NOT_REGISTERED = 0,
    REGISTERING = 1,
    REGISTERED = 2,
    REJECTED = 3,
    UNREGISTERING = 4,
    ERROR = 5,
    LOGGED_OFF = 6,
    LOCAL_PA_LOGGED_OFF = 7,
    REMOTE_PA_LOGGED_OFF = 8,
};
pub const RTCRS_NOT_REGISTERED = RTC_REGISTRATION_STATE.NOT_REGISTERED;
pub const RTCRS_REGISTERING = RTC_REGISTRATION_STATE.REGISTERING;
pub const RTCRS_REGISTERED = RTC_REGISTRATION_STATE.REGISTERED;
pub const RTCRS_REJECTED = RTC_REGISTRATION_STATE.REJECTED;
pub const RTCRS_UNREGISTERING = RTC_REGISTRATION_STATE.UNREGISTERING;
pub const RTCRS_ERROR = RTC_REGISTRATION_STATE.ERROR;
pub const RTCRS_LOGGED_OFF = RTC_REGISTRATION_STATE.LOGGED_OFF;
pub const RTCRS_LOCAL_PA_LOGGED_OFF = RTC_REGISTRATION_STATE.LOCAL_PA_LOGGED_OFF;
pub const RTCRS_REMOTE_PA_LOGGED_OFF = RTC_REGISTRATION_STATE.REMOTE_PA_LOGGED_OFF;

pub const RTC_SESSION_STATE = enum(i32) {
    IDLE = 0,
    INCOMING = 1,
    ANSWERING = 2,
    INPROGRESS = 3,
    CONNECTED = 4,
    DISCONNECTED = 5,
    HOLD = 6,
    REFER = 7,
};
pub const RTCSS_IDLE = RTC_SESSION_STATE.IDLE;
pub const RTCSS_INCOMING = RTC_SESSION_STATE.INCOMING;
pub const RTCSS_ANSWERING = RTC_SESSION_STATE.ANSWERING;
pub const RTCSS_INPROGRESS = RTC_SESSION_STATE.INPROGRESS;
pub const RTCSS_CONNECTED = RTC_SESSION_STATE.CONNECTED;
pub const RTCSS_DISCONNECTED = RTC_SESSION_STATE.DISCONNECTED;
pub const RTCSS_HOLD = RTC_SESSION_STATE.HOLD;
pub const RTCSS_REFER = RTC_SESSION_STATE.REFER;

pub const RTC_PARTICIPANT_STATE = enum(i32) {
    IDLE = 0,
    PENDING = 1,
    INCOMING = 2,
    ANSWERING = 3,
    INPROGRESS = 4,
    ALERTING = 5,
    CONNECTED = 6,
    DISCONNECTING = 7,
    DISCONNECTED = 8,
};
pub const RTCPS_IDLE = RTC_PARTICIPANT_STATE.IDLE;
pub const RTCPS_PENDING = RTC_PARTICIPANT_STATE.PENDING;
pub const RTCPS_INCOMING = RTC_PARTICIPANT_STATE.INCOMING;
pub const RTCPS_ANSWERING = RTC_PARTICIPANT_STATE.ANSWERING;
pub const RTCPS_INPROGRESS = RTC_PARTICIPANT_STATE.INPROGRESS;
pub const RTCPS_ALERTING = RTC_PARTICIPANT_STATE.ALERTING;
pub const RTCPS_CONNECTED = RTC_PARTICIPANT_STATE.CONNECTED;
pub const RTCPS_DISCONNECTING = RTC_PARTICIPANT_STATE.DISCONNECTING;
pub const RTCPS_DISCONNECTED = RTC_PARTICIPANT_STATE.DISCONNECTED;

pub const RTC_WATCHER_STATE = enum(i32) {
    UNKNOWN = 0,
    OFFERING = 1,
    ALLOWED = 2,
    BLOCKED = 3,
    DENIED = 4,
    PROMPT = 5,
};
pub const RTCWS_UNKNOWN = RTC_WATCHER_STATE.UNKNOWN;
pub const RTCWS_OFFERING = RTC_WATCHER_STATE.OFFERING;
pub const RTCWS_ALLOWED = RTC_WATCHER_STATE.ALLOWED;
pub const RTCWS_BLOCKED = RTC_WATCHER_STATE.BLOCKED;
pub const RTCWS_DENIED = RTC_WATCHER_STATE.DENIED;
pub const RTCWS_PROMPT = RTC_WATCHER_STATE.PROMPT;

pub const RTC_ACE_SCOPE = enum(i32) {
    USER = 0,
    DOMAIN = 1,
    ALL = 2,
};
pub const RTCAS_SCOPE_USER = RTC_ACE_SCOPE.USER;
pub const RTCAS_SCOPE_DOMAIN = RTC_ACE_SCOPE.DOMAIN;
pub const RTCAS_SCOPE_ALL = RTC_ACE_SCOPE.ALL;

pub const RTC_OFFER_WATCHER_MODE = enum(i32) {
    OFFER_WATCHER_EVENT = 0,
    AUTOMATICALLY_ADD_WATCHER = 1,
};
pub const RTCOWM_OFFER_WATCHER_EVENT = RTC_OFFER_WATCHER_MODE.OFFER_WATCHER_EVENT;
pub const RTCOWM_AUTOMATICALLY_ADD_WATCHER = RTC_OFFER_WATCHER_MODE.AUTOMATICALLY_ADD_WATCHER;

pub const RTC_WATCHER_MATCH_MODE = enum(i32) {
    EXACT_MATCH = 0,
    BEST_ACE_MATCH = 1,
};
pub const RTCWMM_EXACT_MATCH = RTC_WATCHER_MATCH_MODE.EXACT_MATCH;
pub const RTCWMM_BEST_ACE_MATCH = RTC_WATCHER_MATCH_MODE.BEST_ACE_MATCH;

pub const RTC_PRIVACY_MODE = enum(i32) {
    BLOCK_LIST_EXCLUDED = 0,
    ALLOW_LIST_ONLY = 1,
};
pub const RTCPM_BLOCK_LIST_EXCLUDED = RTC_PRIVACY_MODE.BLOCK_LIST_EXCLUDED;
pub const RTCPM_ALLOW_LIST_ONLY = RTC_PRIVACY_MODE.ALLOW_LIST_ONLY;

pub const RTC_SESSION_TYPE = enum(i32) {
    PC_TO_PC = 0,
    PC_TO_PHONE = 1,
    PHONE_TO_PHONE = 2,
    IM = 3,
    MULTIPARTY_IM = 4,
    APPLICATION = 5,
};
pub const RTCST_PC_TO_PC = RTC_SESSION_TYPE.PC_TO_PC;
pub const RTCST_PC_TO_PHONE = RTC_SESSION_TYPE.PC_TO_PHONE;
pub const RTCST_PHONE_TO_PHONE = RTC_SESSION_TYPE.PHONE_TO_PHONE;
pub const RTCST_IM = RTC_SESSION_TYPE.IM;
pub const RTCST_MULTIPARTY_IM = RTC_SESSION_TYPE.MULTIPARTY_IM;
pub const RTCST_APPLICATION = RTC_SESSION_TYPE.APPLICATION;

pub const RTC_PRESENCE_STATUS = enum(i32) {
    OFFLINE = 0,
    ONLINE = 1,
    AWAY = 2,
    IDLE = 3,
    BUSY = 4,
    BE_RIGHT_BACK = 5,
    ON_THE_PHONE = 6,
    OUT_TO_LUNCH = 7,
};
pub const RTCXS_PRESENCE_OFFLINE = RTC_PRESENCE_STATUS.OFFLINE;
pub const RTCXS_PRESENCE_ONLINE = RTC_PRESENCE_STATUS.ONLINE;
pub const RTCXS_PRESENCE_AWAY = RTC_PRESENCE_STATUS.AWAY;
pub const RTCXS_PRESENCE_IDLE = RTC_PRESENCE_STATUS.IDLE;
pub const RTCXS_PRESENCE_BUSY = RTC_PRESENCE_STATUS.BUSY;
pub const RTCXS_PRESENCE_BE_RIGHT_BACK = RTC_PRESENCE_STATUS.BE_RIGHT_BACK;
pub const RTCXS_PRESENCE_ON_THE_PHONE = RTC_PRESENCE_STATUS.ON_THE_PHONE;
pub const RTCXS_PRESENCE_OUT_TO_LUNCH = RTC_PRESENCE_STATUS.OUT_TO_LUNCH;

pub const RTC_BUDDY_SUBSCRIPTION_TYPE = enum(i32) {
    SUBSCRIBED = 0,
    ALWAYS_OFFLINE = 1,
    ALWAYS_ONLINE = 2,
    POLL = 3,
};
pub const RTCBT_SUBSCRIBED = RTC_BUDDY_SUBSCRIPTION_TYPE.SUBSCRIBED;
pub const RTCBT_ALWAYS_OFFLINE = RTC_BUDDY_SUBSCRIPTION_TYPE.ALWAYS_OFFLINE;
pub const RTCBT_ALWAYS_ONLINE = RTC_BUDDY_SUBSCRIPTION_TYPE.ALWAYS_ONLINE;
pub const RTCBT_POLL = RTC_BUDDY_SUBSCRIPTION_TYPE.POLL;

pub const RTC_MEDIA_EVENT_TYPE = enum(i32) {
    STOPPED = 0,
    STARTED = 1,
    FAILED = 2,
};
pub const RTCMET_STOPPED = RTC_MEDIA_EVENT_TYPE.STOPPED;
pub const RTCMET_STARTED = RTC_MEDIA_EVENT_TYPE.STARTED;
pub const RTCMET_FAILED = RTC_MEDIA_EVENT_TYPE.FAILED;

pub const RTC_MEDIA_EVENT_REASON = enum(i32) {
    NORMAL = 0,
    HOLD = 1,
    TIMEOUT = 2,
    BAD_DEVICE = 3,
    NO_PORT = 4,
    PORT_MAPPING_FAILED = 5,
    REMOTE_REQUEST = 6,
};
pub const RTCMER_NORMAL = RTC_MEDIA_EVENT_REASON.NORMAL;
pub const RTCMER_HOLD = RTC_MEDIA_EVENT_REASON.HOLD;
pub const RTCMER_TIMEOUT = RTC_MEDIA_EVENT_REASON.TIMEOUT;
pub const RTCMER_BAD_DEVICE = RTC_MEDIA_EVENT_REASON.BAD_DEVICE;
pub const RTCMER_NO_PORT = RTC_MEDIA_EVENT_REASON.NO_PORT;
pub const RTCMER_PORT_MAPPING_FAILED = RTC_MEDIA_EVENT_REASON.PORT_MAPPING_FAILED;
pub const RTCMER_REMOTE_REQUEST = RTC_MEDIA_EVENT_REASON.REMOTE_REQUEST;

pub const RTC_MESSAGING_EVENT_TYPE = enum(i32) {
    MESSAGE = 0,
    STATUS = 1,
};
pub const RTCMSET_MESSAGE = RTC_MESSAGING_EVENT_TYPE.MESSAGE;
pub const RTCMSET_STATUS = RTC_MESSAGING_EVENT_TYPE.STATUS;

pub const RTC_MESSAGING_USER_STATUS = enum(i32) {
    IDLE = 0,
    TYPING = 1,
};
pub const RTCMUS_IDLE = RTC_MESSAGING_USER_STATUS.IDLE;
pub const RTCMUS_TYPING = RTC_MESSAGING_USER_STATUS.TYPING;

pub const RTC_DTMF = enum(i32) {
    @"0" = 0,
    @"1" = 1,
    @"2" = 2,
    @"3" = 3,
    @"4" = 4,
    @"5" = 5,
    @"6" = 6,
    @"7" = 7,
    @"8" = 8,
    @"9" = 9,
    STAR = 10,
    POUND = 11,
    A = 12,
    B = 13,
    C = 14,
    D = 15,
    FLASH = 16,
};
pub const RTC_DTMF_0 = RTC_DTMF.@"0";
pub const RTC_DTMF_1 = RTC_DTMF.@"1";
pub const RTC_DTMF_2 = RTC_DTMF.@"2";
pub const RTC_DTMF_3 = RTC_DTMF.@"3";
pub const RTC_DTMF_4 = RTC_DTMF.@"4";
pub const RTC_DTMF_5 = RTC_DTMF.@"5";
pub const RTC_DTMF_6 = RTC_DTMF.@"6";
pub const RTC_DTMF_7 = RTC_DTMF.@"7";
pub const RTC_DTMF_8 = RTC_DTMF.@"8";
pub const RTC_DTMF_9 = RTC_DTMF.@"9";
pub const RTC_DTMF_STAR = RTC_DTMF.STAR;
pub const RTC_DTMF_POUND = RTC_DTMF.POUND;
pub const RTC_DTMF_A = RTC_DTMF.A;
pub const RTC_DTMF_B = RTC_DTMF.B;
pub const RTC_DTMF_C = RTC_DTMF.C;
pub const RTC_DTMF_D = RTC_DTMF.D;
pub const RTC_DTMF_FLASH = RTC_DTMF.FLASH;

pub const RTC_PROVIDER_URI = enum(i32) {
    HOMEPAGE = 0,
    HELPDESK = 1,
    PERSONALACCOUNT = 2,
    DISPLAYDURINGCALL = 3,
    DISPLAYDURINGIDLE = 4,
};
pub const RTCPU_URIHOMEPAGE = RTC_PROVIDER_URI.HOMEPAGE;
pub const RTCPU_URIHELPDESK = RTC_PROVIDER_URI.HELPDESK;
pub const RTCPU_URIPERSONALACCOUNT = RTC_PROVIDER_URI.PERSONALACCOUNT;
pub const RTCPU_URIDISPLAYDURINGCALL = RTC_PROVIDER_URI.DISPLAYDURINGCALL;
pub const RTCPU_URIDISPLAYDURINGIDLE = RTC_PROVIDER_URI.DISPLAYDURINGIDLE;

pub const RTC_RING_TYPE = enum(i32) {
    PHONE = 0,
    MESSAGE = 1,
    RINGBACK = 2,
};
pub const RTCRT_PHONE = RTC_RING_TYPE.PHONE;
pub const RTCRT_MESSAGE = RTC_RING_TYPE.MESSAGE;
pub const RTCRT_RINGBACK = RTC_RING_TYPE.RINGBACK;

pub const RTC_T120_APPLET = enum(i32) {
    WHITEBOARD = 0,
    APPSHARING = 1,
};
pub const RTCTA_WHITEBOARD = RTC_T120_APPLET.WHITEBOARD;
pub const RTCTA_APPSHARING = RTC_T120_APPLET.APPSHARING;

pub const RTC_PORT_TYPE = enum(i32) {
    AUDIO_RTP = 0,
    AUDIO_RTCP = 1,
    VIDEO_RTP = 2,
    VIDEO_RTCP = 3,
    SIP = 4,
};
pub const RTCPT_AUDIO_RTP = RTC_PORT_TYPE.AUDIO_RTP;
pub const RTCPT_AUDIO_RTCP = RTC_PORT_TYPE.AUDIO_RTCP;
pub const RTCPT_VIDEO_RTP = RTC_PORT_TYPE.VIDEO_RTP;
pub const RTCPT_VIDEO_RTCP = RTC_PORT_TYPE.VIDEO_RTCP;
pub const RTCPT_SIP = RTC_PORT_TYPE.SIP;

pub const RTC_USER_SEARCH_COLUMN = enum(i32) {
    URI = 0,
    DISPLAYNAME = 1,
    TITLE = 2,
    OFFICE = 3,
    PHONE = 4,
    COMPANY = 5,
    CITY = 6,
    STATE = 7,
    COUNTRY = 8,
    EMAIL = 9,
};
pub const RTCUSC_URI = RTC_USER_SEARCH_COLUMN.URI;
pub const RTCUSC_DISPLAYNAME = RTC_USER_SEARCH_COLUMN.DISPLAYNAME;
pub const RTCUSC_TITLE = RTC_USER_SEARCH_COLUMN.TITLE;
pub const RTCUSC_OFFICE = RTC_USER_SEARCH_COLUMN.OFFICE;
pub const RTCUSC_PHONE = RTC_USER_SEARCH_COLUMN.PHONE;
pub const RTCUSC_COMPANY = RTC_USER_SEARCH_COLUMN.COMPANY;
pub const RTCUSC_CITY = RTC_USER_SEARCH_COLUMN.CITY;
pub const RTCUSC_STATE = RTC_USER_SEARCH_COLUMN.STATE;
pub const RTCUSC_COUNTRY = RTC_USER_SEARCH_COLUMN.COUNTRY;
pub const RTCUSC_EMAIL = RTC_USER_SEARCH_COLUMN.EMAIL;

pub const RTC_USER_SEARCH_PREFERENCE = enum(i32) {
    MAX_MATCHES = 0,
    TIME_LIMIT = 1,
};
pub const RTCUSP_MAX_MATCHES = RTC_USER_SEARCH_PREFERENCE.MAX_MATCHES;
pub const RTCUSP_TIME_LIMIT = RTC_USER_SEARCH_PREFERENCE.TIME_LIMIT;

pub const RTC_ROAMING_EVENT_TYPE = enum(i32) {
    BUDDY_ROAMING = 0,
    WATCHER_ROAMING = 1,
    PRESENCE_ROAMING = 2,
    PROFILE_ROAMING = 3,
    WPENDING_ROAMING = 4,
};
pub const RTCRET_BUDDY_ROAMING = RTC_ROAMING_EVENT_TYPE.BUDDY_ROAMING;
pub const RTCRET_WATCHER_ROAMING = RTC_ROAMING_EVENT_TYPE.WATCHER_ROAMING;
pub const RTCRET_PRESENCE_ROAMING = RTC_ROAMING_EVENT_TYPE.PRESENCE_ROAMING;
pub const RTCRET_PROFILE_ROAMING = RTC_ROAMING_EVENT_TYPE.PROFILE_ROAMING;
pub const RTCRET_WPENDING_ROAMING = RTC_ROAMING_EVENT_TYPE.WPENDING_ROAMING;

pub const RTC_PROFILE_EVENT_TYPE = enum(i32) {
    GET = 0,
    UPDATE = 1,
};
pub const RTCPFET_PROFILE_GET = RTC_PROFILE_EVENT_TYPE.GET;
pub const RTCPFET_PROFILE_UPDATE = RTC_PROFILE_EVENT_TYPE.UPDATE;

pub const RTC_ANSWER_MODE = enum(i32) {
    OFFER_SESSION_EVENT = 0,
    AUTOMATICALLY_ACCEPT = 1,
    AUTOMATICALLY_REJECT = 2,
    NOT_SUPPORTED = 3,
};
pub const RTCAM_OFFER_SESSION_EVENT = RTC_ANSWER_MODE.OFFER_SESSION_EVENT;
pub const RTCAM_AUTOMATICALLY_ACCEPT = RTC_ANSWER_MODE.AUTOMATICALLY_ACCEPT;
pub const RTCAM_AUTOMATICALLY_REJECT = RTC_ANSWER_MODE.AUTOMATICALLY_REJECT;
pub const RTCAM_NOT_SUPPORTED = RTC_ANSWER_MODE.NOT_SUPPORTED;

pub const RTC_SESSION_REFER_STATUS = enum(i32) {
    REFERRING = 0,
    ACCEPTED = 1,
    ERROR = 2,
    REJECTED = 3,
    DROPPED = 4,
    DONE = 5,
};
pub const RTCSRS_REFERRING = RTC_SESSION_REFER_STATUS.REFERRING;
pub const RTCSRS_ACCEPTED = RTC_SESSION_REFER_STATUS.ACCEPTED;
pub const RTCSRS_ERROR = RTC_SESSION_REFER_STATUS.ERROR;
pub const RTCSRS_REJECTED = RTC_SESSION_REFER_STATUS.REJECTED;
pub const RTCSRS_DROPPED = RTC_SESSION_REFER_STATUS.DROPPED;
pub const RTCSRS_DONE = RTC_SESSION_REFER_STATUS.DONE;

pub const RTC_PRESENCE_PROPERTY = enum(i32) {
    PHONENUMBER = 0,
    DISPLAYNAME = 1,
    EMAIL = 2,
    DEVICE_NAME = 3,
    MULTIPLE = 4,
};
pub const RTCPP_PHONENUMBER = RTC_PRESENCE_PROPERTY.PHONENUMBER;
pub const RTCPP_DISPLAYNAME = RTC_PRESENCE_PROPERTY.DISPLAYNAME;
pub const RTCPP_EMAIL = RTC_PRESENCE_PROPERTY.EMAIL;
pub const RTCPP_DEVICE_NAME = RTC_PRESENCE_PROPERTY.DEVICE_NAME;
pub const RTCPP_MULTIPLE = RTC_PRESENCE_PROPERTY.MULTIPLE;

pub const RTC_SECURITY_TYPE = enum(i32) {
    AUDIO_VIDEO_MEDIA_ENCRYPTION = 0,
    T120_MEDIA_ENCRYPTION = 1,
};
pub const RTCSECT_AUDIO_VIDEO_MEDIA_ENCRYPTION = RTC_SECURITY_TYPE.AUDIO_VIDEO_MEDIA_ENCRYPTION;
pub const RTCSECT_T120_MEDIA_ENCRYPTION = RTC_SECURITY_TYPE.T120_MEDIA_ENCRYPTION;

pub const RTC_SECURITY_LEVEL = enum(i32) {
    UNSUPPORTED = 1,
    SUPPORTED = 2,
    REQUIRED = 3,
};
pub const RTCSECL_UNSUPPORTED = RTC_SECURITY_LEVEL.UNSUPPORTED;
pub const RTCSECL_SUPPORTED = RTC_SECURITY_LEVEL.SUPPORTED;
pub const RTCSECL_REQUIRED = RTC_SECURITY_LEVEL.REQUIRED;

pub const RTC_REINVITE_STATE = enum(i32) {
    INCOMING = 0,
    SUCCEEDED = 1,
    FAIL = 2,
};
pub const RTCRIN_INCOMING = RTC_REINVITE_STATE.INCOMING;
pub const RTCRIN_SUCCEEDED = RTC_REINVITE_STATE.SUCCEEDED;
pub const RTCRIN_FAIL = RTC_REINVITE_STATE.FAIL;

const IID_IRTCClient_Value = Guid.initString("07829e45-9a34-408e-a011-bddf13487cd1");
pub const IID_IRTCClient = &IID_IRTCClient_Value;
pub const IRTCClient = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn (
            self: *const IRTCClient,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Shutdown: *const fn (
            self: *const IRTCClient,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PrepareForShutdown: *const fn (
            self: *const IRTCClient,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EventFilter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            l_filter: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventFilter: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            pl_filter: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPreferredMediaTypes: *const fn (
            self: *const IRTCClient,
            l_media_types: i32,
            f_persistent: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PreferredMediaTypes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            pl_media_types: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MediaCapabilities: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            pl_media_types: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSession: *const fn (
            self: *const IRTCClient,
            en_type: RTC_SESSION_TYPE,
            bstr_local_phone_u_r_i: ?BSTR,
            p_profile: ?*IRTCProfile,
            l_flags: i32,
            pp_session: ?*?*IRTCSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ListenForIncomingSessions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            en_listen: RTC_LISTEN_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ListenForIncomingSessions: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            pen_listen: ?*RTC_LISTEN_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NetworkAddresses: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            f_t_c_p: i16,
            f_external: i16,
            pv_addresses: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Volume: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            en_device: RTC_AUDIO_DEVICE,
            l_volume: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Volume: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            en_device: RTC_AUDIO_DEVICE,
            pl_volume: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AudioMuted: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            en_device: RTC_AUDIO_DEVICE,
            f_muted: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AudioMuted: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            en_device: RTC_AUDIO_DEVICE,
            pf_muted: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IVideoWindow: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            en_device: RTC_VIDEO_DEVICE,
            pp_i_video_window: ?*?*IVideoWindow,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PreferredAudioDevice: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            en_device: RTC_AUDIO_DEVICE,
            bstr_device_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PreferredAudioDevice: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            en_device: RTC_AUDIO_DEVICE,
            pbstr_device_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PreferredVolume: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            en_device: RTC_AUDIO_DEVICE,
            l_volume: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PreferredVolume: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            en_device: RTC_AUDIO_DEVICE,
            pl_volume: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PreferredAEC: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            b_enable: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PreferredAEC: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            pb_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PreferredVideoDevice: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            bstr_device_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PreferredVideoDevice: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            pbstr_device_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ActiveMedia: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            pl_media_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_MaxBitrate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            l_max_bitrate: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MaxBitrate: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            pl_max_bitrate: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_TemporalSpatialTradeOff: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            l_value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_TemporalSpatialTradeOff: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            pl_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NetworkQuality: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            pl_network_quality: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StartT120Applet: *const fn (
            self: *const IRTCClient,
            en_applet: RTC_T120_APPLET,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopT120Applets: *const fn (
            self: *const IRTCClient,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsT120AppletRunning: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            en_applet: RTC_T120_APPLET,
            pf_running: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalUserURI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            pbstr_user_u_r_i: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LocalUserURI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            bstr_user_u_r_i: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LocalUserName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            pbstr_user_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LocalUserName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            bstr_user_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        PlayRing: *const fn (
            self: *const IRTCClient,
            en_type: RTC_RING_TYPE,
            b_play: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendDTMF: *const fn (
            self: *const IRTCClient,
            en_d_t_m_f: RTC_DTMF,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeTuningWizard: *const fn (
            self: *const IRTCClient,
            hwnd_parent: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsTuned: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient,
            pf_tuned: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn initialize(self: *const T) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IRTCClient, @ptrCast(self)));
            }
            pub inline fn shutdown(self: *const T) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).Shutdown(@as(*const IRTCClient, @ptrCast(self)));
            }
            pub inline fn prepareForShutdown(self: *const T) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).PrepareForShutdown(@as(*const IRTCClient, @ptrCast(self)));
            }
            pub inline fn putEventFilter(self: *const T, l_filter_: i32) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).put_EventFilter(@as(*const IRTCClient, @ptrCast(self)), l_filter_);
            }
            pub inline fn getEventFilter(self: *const T, pl_filter_: ?*i32) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).get_EventFilter(@as(*const IRTCClient, @ptrCast(self)), pl_filter_);
            }
            pub inline fn setPreferredMediaTypes(self: *const T, l_media_types_: i32, f_persistent_: i16) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).SetPreferredMediaTypes(@as(*const IRTCClient, @ptrCast(self)), l_media_types_, f_persistent_);
            }
            pub inline fn getPreferredMediaTypes(self: *const T, pl_media_types_: ?*i32) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).get_PreferredMediaTypes(@as(*const IRTCClient, @ptrCast(self)), pl_media_types_);
            }
            pub inline fn getMediaCapabilities(self: *const T, pl_media_types_: ?*i32) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).get_MediaCapabilities(@as(*const IRTCClient, @ptrCast(self)), pl_media_types_);
            }
            pub inline fn createSession(self: *const T, en_type_: RTC_SESSION_TYPE, bstr_local_phone_u_r_i_: ?BSTR, p_profile_: ?*IRTCProfile, l_flags_: i32, pp_session_: ?*?*IRTCSession) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).CreateSession(@as(*const IRTCClient, @ptrCast(self)), en_type_, bstr_local_phone_u_r_i_, p_profile_, l_flags_, pp_session_);
            }
            pub inline fn putListenForIncomingSessions(self: *const T, en_listen_: RTC_LISTEN_MODE) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).put_ListenForIncomingSessions(@as(*const IRTCClient, @ptrCast(self)), en_listen_);
            }
            pub inline fn getListenForIncomingSessions(self: *const T, pen_listen_: ?*RTC_LISTEN_MODE) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).get_ListenForIncomingSessions(@as(*const IRTCClient, @ptrCast(self)), pen_listen_);
            }
            pub inline fn getNetworkAddresses(self: *const T, f_t_c_p_: i16, f_external_: i16, pv_addresses_: ?*VARIANT) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).get_NetworkAddresses(@as(*const IRTCClient, @ptrCast(self)), f_t_c_p_, f_external_, pv_addresses_);
            }
            pub inline fn putVolume(self: *const T, en_device_: RTC_AUDIO_DEVICE, l_volume_: i32) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).put_Volume(@as(*const IRTCClient, @ptrCast(self)), en_device_, l_volume_);
            }
            pub inline fn getVolume(self: *const T, en_device_: RTC_AUDIO_DEVICE, pl_volume_: ?*i32) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).get_Volume(@as(*const IRTCClient, @ptrCast(self)), en_device_, pl_volume_);
            }
            pub inline fn putAudioMuted(self: *const T, en_device_: RTC_AUDIO_DEVICE, f_muted_: i16) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).put_AudioMuted(@as(*const IRTCClient, @ptrCast(self)), en_device_, f_muted_);
            }
            pub inline fn getAudioMuted(self: *const T, en_device_: RTC_AUDIO_DEVICE, pf_muted_: ?*i16) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).get_AudioMuted(@as(*const IRTCClient, @ptrCast(self)), en_device_, pf_muted_);
            }
            pub inline fn getIVideoWindow(self: *const T, en_device_: RTC_VIDEO_DEVICE, pp_i_video_window_: ?*?*IVideoWindow) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).get_IVideoWindow(@as(*const IRTCClient, @ptrCast(self)), en_device_, pp_i_video_window_);
            }
            pub inline fn putPreferredAudioDevice(self: *const T, en_device_: RTC_AUDIO_DEVICE, bstr_device_name_: ?BSTR) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).put_PreferredAudioDevice(@as(*const IRTCClient, @ptrCast(self)), en_device_, bstr_device_name_);
            }
            pub inline fn getPreferredAudioDevice(self: *const T, en_device_: RTC_AUDIO_DEVICE, pbstr_device_name_: ?*?BSTR) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).get_PreferredAudioDevice(@as(*const IRTCClient, @ptrCast(self)), en_device_, pbstr_device_name_);
            }
            pub inline fn putPreferredVolume(self: *const T, en_device_: RTC_AUDIO_DEVICE, l_volume_: i32) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).put_PreferredVolume(@as(*const IRTCClient, @ptrCast(self)), en_device_, l_volume_);
            }
            pub inline fn getPreferredVolume(self: *const T, en_device_: RTC_AUDIO_DEVICE, pl_volume_: ?*i32) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).get_PreferredVolume(@as(*const IRTCClient, @ptrCast(self)), en_device_, pl_volume_);
            }
            pub inline fn putPreferredAEC(self: *const T, b_enable_: i16) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).put_PreferredAEC(@as(*const IRTCClient, @ptrCast(self)), b_enable_);
            }
            pub inline fn getPreferredAEC(self: *const T, pb_enabled_: ?*i16) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).get_PreferredAEC(@as(*const IRTCClient, @ptrCast(self)), pb_enabled_);
            }
            pub inline fn putPreferredVideoDevice(self: *const T, bstr_device_name_: ?BSTR) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).put_PreferredVideoDevice(@as(*const IRTCClient, @ptrCast(self)), bstr_device_name_);
            }
            pub inline fn getPreferredVideoDevice(self: *const T, pbstr_device_name_: ?*?BSTR) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).get_PreferredVideoDevice(@as(*const IRTCClient, @ptrCast(self)), pbstr_device_name_);
            }
            pub inline fn getActiveMedia(self: *const T, pl_media_type_: ?*i32) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).get_ActiveMedia(@as(*const IRTCClient, @ptrCast(self)), pl_media_type_);
            }
            pub inline fn putMaxBitrate(self: *const T, l_max_bitrate_: i32) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).put_MaxBitrate(@as(*const IRTCClient, @ptrCast(self)), l_max_bitrate_);
            }
            pub inline fn getMaxBitrate(self: *const T, pl_max_bitrate_: ?*i32) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).get_MaxBitrate(@as(*const IRTCClient, @ptrCast(self)), pl_max_bitrate_);
            }
            pub inline fn putTemporalSpatialTradeOff(self: *const T, l_value_: i32) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).put_TemporalSpatialTradeOff(@as(*const IRTCClient, @ptrCast(self)), l_value_);
            }
            pub inline fn getTemporalSpatialTradeOff(self: *const T, pl_value_: ?*i32) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).get_TemporalSpatialTradeOff(@as(*const IRTCClient, @ptrCast(self)), pl_value_);
            }
            pub inline fn getNetworkQuality(self: *const T, pl_network_quality_: ?*i32) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).get_NetworkQuality(@as(*const IRTCClient, @ptrCast(self)), pl_network_quality_);
            }
            pub inline fn startT120Applet(self: *const T, en_applet_: RTC_T120_APPLET) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).StartT120Applet(@as(*const IRTCClient, @ptrCast(self)), en_applet_);
            }
            pub inline fn stopT120Applets(self: *const T) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).StopT120Applets(@as(*const IRTCClient, @ptrCast(self)));
            }
            pub inline fn getIsT120AppletRunning(self: *const T, en_applet_: RTC_T120_APPLET, pf_running_: ?*i16) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).get_IsT120AppletRunning(@as(*const IRTCClient, @ptrCast(self)), en_applet_, pf_running_);
            }
            pub inline fn getLocalUserURI(self: *const T, pbstr_user_u_r_i_: ?*?BSTR) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).get_LocalUserURI(@as(*const IRTCClient, @ptrCast(self)), pbstr_user_u_r_i_);
            }
            pub inline fn putLocalUserURI(self: *const T, bstr_user_u_r_i_: ?BSTR) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).put_LocalUserURI(@as(*const IRTCClient, @ptrCast(self)), bstr_user_u_r_i_);
            }
            pub inline fn getLocalUserName(self: *const T, pbstr_user_name_: ?*?BSTR) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).get_LocalUserName(@as(*const IRTCClient, @ptrCast(self)), pbstr_user_name_);
            }
            pub inline fn putLocalUserName(self: *const T, bstr_user_name_: ?BSTR) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).put_LocalUserName(@as(*const IRTCClient, @ptrCast(self)), bstr_user_name_);
            }
            pub inline fn playRing(self: *const T, en_type_: RTC_RING_TYPE, b_play_: i16) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).PlayRing(@as(*const IRTCClient, @ptrCast(self)), en_type_, b_play_);
            }
            pub inline fn sendDTMF(self: *const T, en_d_t_m_f_: RTC_DTMF) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).SendDTMF(@as(*const IRTCClient, @ptrCast(self)), en_d_t_m_f_);
            }
            pub inline fn invokeTuningWizard(self: *const T, hwnd_parent_: isize) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).InvokeTuningWizard(@as(*const IRTCClient, @ptrCast(self)), hwnd_parent_);
            }
            pub inline fn getIsTuned(self: *const T, pf_tuned_: ?*i16) HRESULT {
                return @as(*const IRTCClient.VTable, @ptrCast(self.vtable)).get_IsTuned(@as(*const IRTCClient, @ptrCast(self)), pf_tuned_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCClient2_Value = Guid.initString("0c91d71d-1064-42da-bfa5-572beb8eea84");
pub const IID_IRTCClient2 = &IID_IRTCClient2_Value;
pub const IRTCClient2 = extern struct {
    pub const VTable = extern struct {
        base: IRTCClient.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AnswerMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient2,
            en_type: RTC_SESSION_TYPE,
            en_mode: RTC_ANSWER_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AnswerMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient2,
            en_type: RTC_SESSION_TYPE,
            pen_mode: ?*RTC_ANSWER_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InvokeTuningWizardEx: *const fn (
            self: *const IRTCClient2,
            hwnd_parent: isize,
            f_allow_audio: i16,
            f_allow_video: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Version: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient2,
            pl_version: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClientName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient2,
            bstr_client_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ClientCurVer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient2,
            bstr_client_cur_ver: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InitializeEx: *const fn (
            self: *const IRTCClient2,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateSessionWithDescription: *const fn (
            self: *const IRTCClient2,
            bstr_content_type: ?BSTR,
            bstr_session_description: ?BSTR,
            p_profile: ?*IRTCProfile,
            l_flags: i32,
            pp_session2: ?*?*IRTCSession2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetSessionDescriptionManager: *const fn (
            self: *const IRTCClient2,
            p_session_description_manager: ?*IRTCSessionDescriptionManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PreferredSecurityLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient2,
            en_security_type: RTC_SECURITY_TYPE,
            en_security_level: RTC_SECURITY_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PreferredSecurityLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient2,
            en_security_type: RTC_SECURITY_TYPE,
            pen_security_level: ?*RTC_SECURITY_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowedPorts: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient2,
            l_transport: i32,
            en_listen_mode: RTC_LISTEN_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowedPorts: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClient2,
            l_transport: i32,
            pen_listen_mode: ?*RTC_LISTEN_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRTCClient.MethodMixin(T);
            pub inline fn putAnswerMode(self: *const T, en_type_: RTC_SESSION_TYPE, en_mode_: RTC_ANSWER_MODE) HRESULT {
                return @as(*const IRTCClient2.VTable, @ptrCast(self.vtable)).put_AnswerMode(@as(*const IRTCClient2, @ptrCast(self)), en_type_, en_mode_);
            }
            pub inline fn getAnswerMode(self: *const T, en_type_: RTC_SESSION_TYPE, pen_mode_: ?*RTC_ANSWER_MODE) HRESULT {
                return @as(*const IRTCClient2.VTable, @ptrCast(self.vtable)).get_AnswerMode(@as(*const IRTCClient2, @ptrCast(self)), en_type_, pen_mode_);
            }
            pub inline fn invokeTuningWizardEx(self: *const T, hwnd_parent_: isize, f_allow_audio_: i16, f_allow_video_: i16) HRESULT {
                return @as(*const IRTCClient2.VTable, @ptrCast(self.vtable)).InvokeTuningWizardEx(@as(*const IRTCClient2, @ptrCast(self)), hwnd_parent_, f_allow_audio_, f_allow_video_);
            }
            pub inline fn getVersion(self: *const T, pl_version_: ?*i32) HRESULT {
                return @as(*const IRTCClient2.VTable, @ptrCast(self.vtable)).get_Version(@as(*const IRTCClient2, @ptrCast(self)), pl_version_);
            }
            pub inline fn putClientName(self: *const T, bstr_client_name_: ?BSTR) HRESULT {
                return @as(*const IRTCClient2.VTable, @ptrCast(self.vtable)).put_ClientName(@as(*const IRTCClient2, @ptrCast(self)), bstr_client_name_);
            }
            pub inline fn putClientCurVer(self: *const T, bstr_client_cur_ver_: ?BSTR) HRESULT {
                return @as(*const IRTCClient2.VTable, @ptrCast(self.vtable)).put_ClientCurVer(@as(*const IRTCClient2, @ptrCast(self)), bstr_client_cur_ver_);
            }
            pub inline fn initializeEx(self: *const T, l_flags_: i32) HRESULT {
                return @as(*const IRTCClient2.VTable, @ptrCast(self.vtable)).InitializeEx(@as(*const IRTCClient2, @ptrCast(self)), l_flags_);
            }
            pub inline fn createSessionWithDescription(self: *const T, bstr_content_type_: ?BSTR, bstr_session_description_: ?BSTR, p_profile_: ?*IRTCProfile, l_flags_: i32, pp_session2_: ?*?*IRTCSession2) HRESULT {
                return @as(*const IRTCClient2.VTable, @ptrCast(self.vtable)).CreateSessionWithDescription(@as(*const IRTCClient2, @ptrCast(self)), bstr_content_type_, bstr_session_description_, p_profile_, l_flags_, pp_session2_);
            }
            pub inline fn setSessionDescriptionManager(self: *const T, p_session_description_manager_: ?*IRTCSessionDescriptionManager) HRESULT {
                return @as(*const IRTCClient2.VTable, @ptrCast(self.vtable)).SetSessionDescriptionManager(@as(*const IRTCClient2, @ptrCast(self)), p_session_description_manager_);
            }
            pub inline fn putPreferredSecurityLevel(self: *const T, en_security_type_: RTC_SECURITY_TYPE, en_security_level_: RTC_SECURITY_LEVEL) HRESULT {
                return @as(*const IRTCClient2.VTable, @ptrCast(self.vtable)).put_PreferredSecurityLevel(@as(*const IRTCClient2, @ptrCast(self)), en_security_type_, en_security_level_);
            }
            pub inline fn getPreferredSecurityLevel(self: *const T, en_security_type_: RTC_SECURITY_TYPE, pen_security_level_: ?*RTC_SECURITY_LEVEL) HRESULT {
                return @as(*const IRTCClient2.VTable, @ptrCast(self.vtable)).get_PreferredSecurityLevel(@as(*const IRTCClient2, @ptrCast(self)), en_security_type_, pen_security_level_);
            }
            pub inline fn putAllowedPorts(self: *const T, l_transport_: i32, en_listen_mode_: RTC_LISTEN_MODE) HRESULT {
                return @as(*const IRTCClient2.VTable, @ptrCast(self.vtable)).put_AllowedPorts(@as(*const IRTCClient2, @ptrCast(self)), l_transport_, en_listen_mode_);
            }
            pub inline fn getAllowedPorts(self: *const T, l_transport_: i32, pen_listen_mode_: ?*RTC_LISTEN_MODE) HRESULT {
                return @as(*const IRTCClient2.VTable, @ptrCast(self.vtable)).get_AllowedPorts(@as(*const IRTCClient2, @ptrCast(self)), l_transport_, pen_listen_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCClientPresence_Value = Guid.initString("11c3cbcc-0744-42d1-968a-51aa1bb274c6");
pub const IID_IRTCClientPresence = &IID_IRTCClientPresence_Value;
pub const IRTCClientPresence = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EnablePresence: *const fn (
            self: *const IRTCClientPresence,
            f_use_storage: i16,
            var_storage: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Export: *const fn (
            self: *const IRTCClientPresence,
            var_storage: VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Import: *const fn (
            self: *const IRTCClientPresence,
            var_storage: VARIANT,
            f_replace_all: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateBuddies: *const fn (
            self: *const IRTCClientPresence,
            pp_enum: ?*?*IRTCEnumBuddies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Buddies: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClientPresence,
            pp_collection: ?*?*IRTCCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Buddy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClientPresence,
            bstr_presentity_u_r_i: ?BSTR,
            pp_buddy: ?*?*IRTCBuddy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddBuddy: *const fn (
            self: *const IRTCClientPresence,
            bstr_presentity_u_r_i: ?BSTR,
            bstr_user_name: ?BSTR,
            bstr_data: ?BSTR,
            f_persistent: i16,
            p_profile: ?*IRTCProfile,
            l_flags: i32,
            pp_buddy: ?*?*IRTCBuddy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveBuddy: *const fn (
            self: *const IRTCClientPresence,
            p_buddy: ?*IRTCBuddy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateWatchers: *const fn (
            self: *const IRTCClientPresence,
            pp_enum: ?*?*IRTCEnumWatchers,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Watchers: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClientPresence,
            pp_collection: ?*?*IRTCCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Watcher: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClientPresence,
            bstr_presentity_u_r_i: ?BSTR,
            pp_watcher: ?*?*IRTCWatcher,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddWatcher: *const fn (
            self: *const IRTCClientPresence,
            bstr_presentity_u_r_i: ?BSTR,
            bstr_user_name: ?BSTR,
            bstr_data: ?BSTR,
            f_blocked: i16,
            f_persistent: i16,
            pp_watcher: ?*?*IRTCWatcher,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveWatcher: *const fn (
            self: *const IRTCClientPresence,
            p_watcher: ?*IRTCWatcher,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLocalPresenceInfo: *const fn (
            self: *const IRTCClientPresence,
            en_status: RTC_PRESENCE_STATUS,
            bstr_notes: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_OfferWatcherMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClientPresence,
            pen_mode: ?*RTC_OFFER_WATCHER_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_OfferWatcherMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClientPresence,
            en_mode: RTC_OFFER_WATCHER_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PrivacyMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClientPresence,
            pen_mode: ?*RTC_PRIVACY_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PrivacyMode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClientPresence,
            en_mode: RTC_PRIVACY_MODE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn enablePresence(self: *const T, f_use_storage_: i16, var_storage_: VARIANT) HRESULT {
                return @as(*const IRTCClientPresence.VTable, @ptrCast(self.vtable)).EnablePresence(@as(*const IRTCClientPresence, @ptrCast(self)), f_use_storage_, var_storage_);
            }
            pub inline fn @"export"(self: *const T, var_storage_: VARIANT) HRESULT {
                return @as(*const IRTCClientPresence.VTable, @ptrCast(self.vtable)).Export(@as(*const IRTCClientPresence, @ptrCast(self)), var_storage_);
            }
            pub inline fn import(self: *const T, var_storage_: VARIANT, f_replace_all_: i16) HRESULT {
                return @as(*const IRTCClientPresence.VTable, @ptrCast(self.vtable)).Import(@as(*const IRTCClientPresence, @ptrCast(self)), var_storage_, f_replace_all_);
            }
            pub inline fn enumerateBuddies(self: *const T, pp_enum_: ?*?*IRTCEnumBuddies) HRESULT {
                return @as(*const IRTCClientPresence.VTable, @ptrCast(self.vtable)).EnumerateBuddies(@as(*const IRTCClientPresence, @ptrCast(self)), pp_enum_);
            }
            pub inline fn getBuddies(self: *const T, pp_collection_: ?*?*IRTCCollection) HRESULT {
                return @as(*const IRTCClientPresence.VTable, @ptrCast(self.vtable)).get_Buddies(@as(*const IRTCClientPresence, @ptrCast(self)), pp_collection_);
            }
            pub inline fn getBuddy(self: *const T, bstr_presentity_u_r_i_: ?BSTR, pp_buddy_: ?*?*IRTCBuddy) HRESULT {
                return @as(*const IRTCClientPresence.VTable, @ptrCast(self.vtable)).get_Buddy(@as(*const IRTCClientPresence, @ptrCast(self)), bstr_presentity_u_r_i_, pp_buddy_);
            }
            pub inline fn addBuddy(self: *const T, bstr_presentity_u_r_i_: ?BSTR, bstr_user_name_: ?BSTR, bstr_data_: ?BSTR, f_persistent_: i16, p_profile_: ?*IRTCProfile, l_flags_: i32, pp_buddy_: ?*?*IRTCBuddy) HRESULT {
                return @as(*const IRTCClientPresence.VTable, @ptrCast(self.vtable)).AddBuddy(@as(*const IRTCClientPresence, @ptrCast(self)), bstr_presentity_u_r_i_, bstr_user_name_, bstr_data_, f_persistent_, p_profile_, l_flags_, pp_buddy_);
            }
            pub inline fn removeBuddy(self: *const T, p_buddy_: ?*IRTCBuddy) HRESULT {
                return @as(*const IRTCClientPresence.VTable, @ptrCast(self.vtable)).RemoveBuddy(@as(*const IRTCClientPresence, @ptrCast(self)), p_buddy_);
            }
            pub inline fn enumerateWatchers(self: *const T, pp_enum_: ?*?*IRTCEnumWatchers) HRESULT {
                return @as(*const IRTCClientPresence.VTable, @ptrCast(self.vtable)).EnumerateWatchers(@as(*const IRTCClientPresence, @ptrCast(self)), pp_enum_);
            }
            pub inline fn getWatchers(self: *const T, pp_collection_: ?*?*IRTCCollection) HRESULT {
                return @as(*const IRTCClientPresence.VTable, @ptrCast(self.vtable)).get_Watchers(@as(*const IRTCClientPresence, @ptrCast(self)), pp_collection_);
            }
            pub inline fn getWatcher(self: *const T, bstr_presentity_u_r_i_: ?BSTR, pp_watcher_: ?*?*IRTCWatcher) HRESULT {
                return @as(*const IRTCClientPresence.VTable, @ptrCast(self.vtable)).get_Watcher(@as(*const IRTCClientPresence, @ptrCast(self)), bstr_presentity_u_r_i_, pp_watcher_);
            }
            pub inline fn addWatcher(self: *const T, bstr_presentity_u_r_i_: ?BSTR, bstr_user_name_: ?BSTR, bstr_data_: ?BSTR, f_blocked_: i16, f_persistent_: i16, pp_watcher_: ?*?*IRTCWatcher) HRESULT {
                return @as(*const IRTCClientPresence.VTable, @ptrCast(self.vtable)).AddWatcher(@as(*const IRTCClientPresence, @ptrCast(self)), bstr_presentity_u_r_i_, bstr_user_name_, bstr_data_, f_blocked_, f_persistent_, pp_watcher_);
            }
            pub inline fn removeWatcher(self: *const T, p_watcher_: ?*IRTCWatcher) HRESULT {
                return @as(*const IRTCClientPresence.VTable, @ptrCast(self.vtable)).RemoveWatcher(@as(*const IRTCClientPresence, @ptrCast(self)), p_watcher_);
            }
            pub inline fn setLocalPresenceInfo(self: *const T, en_status_: RTC_PRESENCE_STATUS, bstr_notes_: ?BSTR) HRESULT {
                return @as(*const IRTCClientPresence.VTable, @ptrCast(self.vtable)).SetLocalPresenceInfo(@as(*const IRTCClientPresence, @ptrCast(self)), en_status_, bstr_notes_);
            }
            pub inline fn getOfferWatcherMode(self: *const T, pen_mode_: ?*RTC_OFFER_WATCHER_MODE) HRESULT {
                return @as(*const IRTCClientPresence.VTable, @ptrCast(self.vtable)).get_OfferWatcherMode(@as(*const IRTCClientPresence, @ptrCast(self)), pen_mode_);
            }
            pub inline fn putOfferWatcherMode(self: *const T, en_mode_: RTC_OFFER_WATCHER_MODE) HRESULT {
                return @as(*const IRTCClientPresence.VTable, @ptrCast(self.vtable)).put_OfferWatcherMode(@as(*const IRTCClientPresence, @ptrCast(self)), en_mode_);
            }
            pub inline fn getPrivacyMode(self: *const T, pen_mode_: ?*RTC_PRIVACY_MODE) HRESULT {
                return @as(*const IRTCClientPresence.VTable, @ptrCast(self.vtable)).get_PrivacyMode(@as(*const IRTCClientPresence, @ptrCast(self)), pen_mode_);
            }
            pub inline fn putPrivacyMode(self: *const T, en_mode_: RTC_PRIVACY_MODE) HRESULT {
                return @as(*const IRTCClientPresence.VTable, @ptrCast(self.vtable)).put_PrivacyMode(@as(*const IRTCClientPresence, @ptrCast(self)), en_mode_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCClientPresence2_Value = Guid.initString("ad1809e8-62f7-4783-909a-29c9d2cb1d34");
pub const IID_IRTCClientPresence2 = &IID_IRTCClientPresence2_Value;
pub const IRTCClientPresence2 = extern struct {
    pub const VTable = extern struct {
        base: IRTCClientPresence.VTable,
        EnablePresenceEx: *const fn (
            self: *const IRTCClientPresence2,
            p_profile: ?*IRTCProfile,
            var_storage: VARIANT,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisablePresence: *const fn (
            self: *const IRTCClientPresence2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddGroup: *const fn (
            self: *const IRTCClientPresence2,
            bstr_group_name: ?BSTR,
            bstr_data: ?BSTR,
            p_profile: ?*IRTCProfile,
            l_flags: i32,
            pp_group: ?*?*IRTCBuddyGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveGroup: *const fn (
            self: *const IRTCClientPresence2,
            p_group: ?*IRTCBuddyGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateGroups: *const fn (
            self: *const IRTCClientPresence2,
            pp_enum: ?*?*IRTCEnumGroups,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Groups: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClientPresence2,
            pp_collection: ?*?*IRTCCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Group: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClientPresence2,
            bstr_group_name: ?BSTR,
            pp_group: ?*?*IRTCBuddyGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddWatcherEx: *const fn (
            self: *const IRTCClientPresence2,
            bstr_presentity_u_r_i: ?BSTR,
            bstr_user_name: ?BSTR,
            bstr_data: ?BSTR,
            en_state: RTC_WATCHER_STATE,
            f_persistent: i16,
            en_scope: RTC_ACE_SCOPE,
            p_profile: ?*IRTCProfile,
            l_flags: i32,
            pp_watcher: ?*?*IRTCWatcher2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_WatcherEx: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClientPresence2,
            en_mode: RTC_WATCHER_MATCH_MODE,
            bstr_presentity_u_r_i: ?BSTR,
            pp_watcher: ?*?*IRTCWatcher2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PresenceProperty: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClientPresence2,
            en_property: RTC_PRESENCE_PROPERTY,
            bstr_property: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PresenceProperty: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClientPresence2,
            en_property: RTC_PRESENCE_PROPERTY,
            pbstr_property: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetPresenceData: *const fn (
            self: *const IRTCClientPresence2,
            bstr_namespace: ?BSTR,
            bstr_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPresenceData: *const fn (
            self: *const IRTCClientPresence2,
            pbstr_namespace: ?*?BSTR,
            pbstr_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocalPresenceInfo: *const fn (
            self: *const IRTCClientPresence2,
            pen_status: ?*RTC_PRESENCE_STATUS,
            pbstr_notes: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddBuddyEx: *const fn (
            self: *const IRTCClientPresence2,
            bstr_presentity_u_r_i: ?BSTR,
            bstr_user_name: ?BSTR,
            bstr_data: ?BSTR,
            f_persistent: i16,
            en_subscription_type: RTC_BUDDY_SUBSCRIPTION_TYPE,
            p_profile: ?*IRTCProfile,
            l_flags: i32,
            pp_buddy: ?*?*IRTCBuddy2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRTCClientPresence.MethodMixin(T);
            pub inline fn enablePresenceEx(self: *const T, p_profile_: ?*IRTCProfile, var_storage_: VARIANT, l_flags_: i32) HRESULT {
                return @as(*const IRTCClientPresence2.VTable, @ptrCast(self.vtable)).EnablePresenceEx(@as(*const IRTCClientPresence2, @ptrCast(self)), p_profile_, var_storage_, l_flags_);
            }
            pub inline fn disablePresence(self: *const T) HRESULT {
                return @as(*const IRTCClientPresence2.VTable, @ptrCast(self.vtable)).DisablePresence(@as(*const IRTCClientPresence2, @ptrCast(self)));
            }
            pub inline fn addGroup(self: *const T, bstr_group_name_: ?BSTR, bstr_data_: ?BSTR, p_profile_: ?*IRTCProfile, l_flags_: i32, pp_group_: ?*?*IRTCBuddyGroup) HRESULT {
                return @as(*const IRTCClientPresence2.VTable, @ptrCast(self.vtable)).AddGroup(@as(*const IRTCClientPresence2, @ptrCast(self)), bstr_group_name_, bstr_data_, p_profile_, l_flags_, pp_group_);
            }
            pub inline fn removeGroup(self: *const T, p_group_: ?*IRTCBuddyGroup) HRESULT {
                return @as(*const IRTCClientPresence2.VTable, @ptrCast(self.vtable)).RemoveGroup(@as(*const IRTCClientPresence2, @ptrCast(self)), p_group_);
            }
            pub inline fn enumerateGroups(self: *const T, pp_enum_: ?*?*IRTCEnumGroups) HRESULT {
                return @as(*const IRTCClientPresence2.VTable, @ptrCast(self.vtable)).EnumerateGroups(@as(*const IRTCClientPresence2, @ptrCast(self)), pp_enum_);
            }
            pub inline fn getGroups(self: *const T, pp_collection_: ?*?*IRTCCollection) HRESULT {
                return @as(*const IRTCClientPresence2.VTable, @ptrCast(self.vtable)).get_Groups(@as(*const IRTCClientPresence2, @ptrCast(self)), pp_collection_);
            }
            pub inline fn getGroup(self: *const T, bstr_group_name_: ?BSTR, pp_group_: ?*?*IRTCBuddyGroup) HRESULT {
                return @as(*const IRTCClientPresence2.VTable, @ptrCast(self.vtable)).get_Group(@as(*const IRTCClientPresence2, @ptrCast(self)), bstr_group_name_, pp_group_);
            }
            pub inline fn addWatcherEx(self: *const T, bstr_presentity_u_r_i_: ?BSTR, bstr_user_name_: ?BSTR, bstr_data_: ?BSTR, en_state_: RTC_WATCHER_STATE, f_persistent_: i16, en_scope_: RTC_ACE_SCOPE, p_profile_: ?*IRTCProfile, l_flags_: i32, pp_watcher_: ?*?*IRTCWatcher2) HRESULT {
                return @as(*const IRTCClientPresence2.VTable, @ptrCast(self.vtable)).AddWatcherEx(@as(*const IRTCClientPresence2, @ptrCast(self)), bstr_presentity_u_r_i_, bstr_user_name_, bstr_data_, en_state_, f_persistent_, en_scope_, p_profile_, l_flags_, pp_watcher_);
            }
            pub inline fn getWatcherEx(self: *const T, en_mode_: RTC_WATCHER_MATCH_MODE, bstr_presentity_u_r_i_: ?BSTR, pp_watcher_: ?*?*IRTCWatcher2) HRESULT {
                return @as(*const IRTCClientPresence2.VTable, @ptrCast(self.vtable)).get_WatcherEx(@as(*const IRTCClientPresence2, @ptrCast(self)), en_mode_, bstr_presentity_u_r_i_, pp_watcher_);
            }
            pub inline fn putPresenceProperty(self: *const T, en_property_: RTC_PRESENCE_PROPERTY, bstr_property_: ?BSTR) HRESULT {
                return @as(*const IRTCClientPresence2.VTable, @ptrCast(self.vtable)).put_PresenceProperty(@as(*const IRTCClientPresence2, @ptrCast(self)), en_property_, bstr_property_);
            }
            pub inline fn getPresenceProperty(self: *const T, en_property_: RTC_PRESENCE_PROPERTY, pbstr_property_: ?*?BSTR) HRESULT {
                return @as(*const IRTCClientPresence2.VTable, @ptrCast(self.vtable)).get_PresenceProperty(@as(*const IRTCClientPresence2, @ptrCast(self)), en_property_, pbstr_property_);
            }
            pub inline fn setPresenceData(self: *const T, bstr_namespace_: ?BSTR, bstr_data_: ?BSTR) HRESULT {
                return @as(*const IRTCClientPresence2.VTable, @ptrCast(self.vtable)).SetPresenceData(@as(*const IRTCClientPresence2, @ptrCast(self)), bstr_namespace_, bstr_data_);
            }
            pub inline fn getPresenceData(self: *const T, pbstr_namespace_: ?*?BSTR, pbstr_data_: ?*?BSTR) HRESULT {
                return @as(*const IRTCClientPresence2.VTable, @ptrCast(self.vtable)).GetPresenceData(@as(*const IRTCClientPresence2, @ptrCast(self)), pbstr_namespace_, pbstr_data_);
            }
            pub inline fn getLocalPresenceInfo(self: *const T, pen_status_: ?*RTC_PRESENCE_STATUS, pbstr_notes_: ?*?BSTR) HRESULT {
                return @as(*const IRTCClientPresence2.VTable, @ptrCast(self.vtable)).GetLocalPresenceInfo(@as(*const IRTCClientPresence2, @ptrCast(self)), pen_status_, pbstr_notes_);
            }
            pub inline fn addBuddyEx(self: *const T, bstr_presentity_u_r_i_: ?BSTR, bstr_user_name_: ?BSTR, bstr_data_: ?BSTR, f_persistent_: i16, en_subscription_type_: RTC_BUDDY_SUBSCRIPTION_TYPE, p_profile_: ?*IRTCProfile, l_flags_: i32, pp_buddy_: ?*?*IRTCBuddy2) HRESULT {
                return @as(*const IRTCClientPresence2.VTable, @ptrCast(self.vtable)).AddBuddyEx(@as(*const IRTCClientPresence2, @ptrCast(self)), bstr_presentity_u_r_i_, bstr_user_name_, bstr_data_, f_persistent_, en_subscription_type_, p_profile_, l_flags_, pp_buddy_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCClientProvisioning_Value = Guid.initString("b9f5cf06-65b9-4a80-a0e6-73cae3ef3822");
pub const IID_IRTCClientProvisioning = &IID_IRTCClientProvisioning_Value;
pub const IRTCClientProvisioning = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateProfile: *const fn (
            self: *const IRTCClientProvisioning,
            bstr_profile_x_m_l: ?BSTR,
            pp_profile: ?*?*IRTCProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnableProfile: *const fn (
            self: *const IRTCClientProvisioning,
            p_profile: ?*IRTCProfile,
            l_register_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DisableProfile: *const fn (
            self: *const IRTCClientProvisioning,
            p_profile: ?*IRTCProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateProfiles: *const fn (
            self: *const IRTCClientProvisioning,
            pp_enum: ?*?*IRTCEnumProfiles,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Profiles: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClientProvisioning,
            pp_collection: ?*?*IRTCCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetProfile: *const fn (
            self: *const IRTCClientProvisioning,
            bstr_user_account: ?BSTR,
            bstr_user_password: ?BSTR,
            bstr_user_u_r_i: ?BSTR,
            bstr_server: ?BSTR,
            l_transport: i32,
            l_cookie: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SessionCapabilities: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClientProvisioning,
            pl_supported_sessions: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createProfile(self: *const T, bstr_profile_x_m_l_: ?BSTR, pp_profile_: ?*?*IRTCProfile) HRESULT {
                return @as(*const IRTCClientProvisioning.VTable, @ptrCast(self.vtable)).CreateProfile(@as(*const IRTCClientProvisioning, @ptrCast(self)), bstr_profile_x_m_l_, pp_profile_);
            }
            pub inline fn enableProfile(self: *const T, p_profile_: ?*IRTCProfile, l_register_flags_: i32) HRESULT {
                return @as(*const IRTCClientProvisioning.VTable, @ptrCast(self.vtable)).EnableProfile(@as(*const IRTCClientProvisioning, @ptrCast(self)), p_profile_, l_register_flags_);
            }
            pub inline fn disableProfile(self: *const T, p_profile_: ?*IRTCProfile) HRESULT {
                return @as(*const IRTCClientProvisioning.VTable, @ptrCast(self.vtable)).DisableProfile(@as(*const IRTCClientProvisioning, @ptrCast(self)), p_profile_);
            }
            pub inline fn enumerateProfiles(self: *const T, pp_enum_: ?*?*IRTCEnumProfiles) HRESULT {
                return @as(*const IRTCClientProvisioning.VTable, @ptrCast(self.vtable)).EnumerateProfiles(@as(*const IRTCClientProvisioning, @ptrCast(self)), pp_enum_);
            }
            pub inline fn getProfiles(self: *const T, pp_collection_: ?*?*IRTCCollection) HRESULT {
                return @as(*const IRTCClientProvisioning.VTable, @ptrCast(self.vtable)).get_Profiles(@as(*const IRTCClientProvisioning, @ptrCast(self)), pp_collection_);
            }
            pub inline fn getProfile(self: *const T, bstr_user_account_: ?BSTR, bstr_user_password_: ?BSTR, bstr_user_u_r_i_: ?BSTR, bstr_server_: ?BSTR, l_transport_: i32, l_cookie_: isize) HRESULT {
                return @as(*const IRTCClientProvisioning.VTable, @ptrCast(self.vtable)).GetProfile(@as(*const IRTCClientProvisioning, @ptrCast(self)), bstr_user_account_, bstr_user_password_, bstr_user_u_r_i_, bstr_server_, l_transport_, l_cookie_);
            }
            pub inline fn getSessionCapabilities(self: *const T, pl_supported_sessions_: ?*i32) HRESULT {
                return @as(*const IRTCClientProvisioning.VTable, @ptrCast(self.vtable)).get_SessionCapabilities(@as(*const IRTCClientProvisioning, @ptrCast(self)), pl_supported_sessions_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCClientProvisioning2_Value = Guid.initString("a70909b5-f40e-4587-bb75-e6bc0845023e");
pub const IID_IRTCClientProvisioning2 = &IID_IRTCClientProvisioning2_Value;
pub const IRTCClientProvisioning2 = extern struct {
    pub const VTable = extern struct {
        base: IRTCClientProvisioning.VTable,
        EnableProfileEx: *const fn (
            self: *const IRTCClientProvisioning2,
            p_profile: ?*IRTCProfile,
            l_register_flags: i32,
            l_roaming_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRTCClientProvisioning.MethodMixin(T);
            pub inline fn enableProfileEx(self: *const T, p_profile_: ?*IRTCProfile, l_register_flags_: i32, l_roaming_flags_: i32) HRESULT {
                return @as(*const IRTCClientProvisioning2.VTable, @ptrCast(self.vtable)).EnableProfileEx(@as(*const IRTCClientProvisioning2, @ptrCast(self)), p_profile_, l_register_flags_, l_roaming_flags_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCProfile_Value = Guid.initString("d07eca9e-4062-4dd4-9e7d-722a49ba7303");
pub const IID_IRTCProfile = &IID_IRTCProfile_Value;
pub const IRTCProfile = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Key: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile,
            pbstr_key: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_XML: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile,
            pbstr_x_m_l: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderURI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile,
            en_u_r_i: RTC_PROVIDER_URI,
            pbstr_u_r_i: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProviderData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile,
            pbstr_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClientName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClientBanner: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile,
            pf_banner: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClientMinVer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile,
            pbstr_min_ver: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClientCurVer: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile,
            pbstr_cur_ver: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClientUpdateURI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile,
            pbstr_update_u_r_i: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ClientData: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile,
            pbstr_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserURI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile,
            pbstr_user_u_r_i: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile,
            pbstr_user_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserAccount: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile,
            pbstr_user_account: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetCredentials: *const fn (
            self: *const IRTCProfile,
            bstr_user_u_r_i: ?BSTR,
            bstr_user_account: ?BSTR,
            bstr_password: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SessionCapabilities: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile,
            pl_supported_sessions: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile,
            pen_state: ?*RTC_REGISTRATION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getKey(self: *const T, pbstr_key_: ?*?BSTR) HRESULT {
                return @as(*const IRTCProfile.VTable, @ptrCast(self.vtable)).get_Key(@as(*const IRTCProfile, @ptrCast(self)), pbstr_key_);
            }
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IRTCProfile.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IRTCProfile, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn getXML(self: *const T, pbstr_x_m_l_: ?*?BSTR) HRESULT {
                return @as(*const IRTCProfile.VTable, @ptrCast(self.vtable)).get_XML(@as(*const IRTCProfile, @ptrCast(self)), pbstr_x_m_l_);
            }
            pub inline fn getProviderName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IRTCProfile.VTable, @ptrCast(self.vtable)).get_ProviderName(@as(*const IRTCProfile, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn getProviderURI(self: *const T, en_u_r_i_: RTC_PROVIDER_URI, pbstr_u_r_i_: ?*?BSTR) HRESULT {
                return @as(*const IRTCProfile.VTable, @ptrCast(self.vtable)).get_ProviderURI(@as(*const IRTCProfile, @ptrCast(self)), en_u_r_i_, pbstr_u_r_i_);
            }
            pub inline fn getProviderData(self: *const T, pbstr_data_: ?*?BSTR) HRESULT {
                return @as(*const IRTCProfile.VTable, @ptrCast(self.vtable)).get_ProviderData(@as(*const IRTCProfile, @ptrCast(self)), pbstr_data_);
            }
            pub inline fn getClientName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IRTCProfile.VTable, @ptrCast(self.vtable)).get_ClientName(@as(*const IRTCProfile, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn getClientBanner(self: *const T, pf_banner_: ?*i16) HRESULT {
                return @as(*const IRTCProfile.VTable, @ptrCast(self.vtable)).get_ClientBanner(@as(*const IRTCProfile, @ptrCast(self)), pf_banner_);
            }
            pub inline fn getClientMinVer(self: *const T, pbstr_min_ver_: ?*?BSTR) HRESULT {
                return @as(*const IRTCProfile.VTable, @ptrCast(self.vtable)).get_ClientMinVer(@as(*const IRTCProfile, @ptrCast(self)), pbstr_min_ver_);
            }
            pub inline fn getClientCurVer(self: *const T, pbstr_cur_ver_: ?*?BSTR) HRESULT {
                return @as(*const IRTCProfile.VTable, @ptrCast(self.vtable)).get_ClientCurVer(@as(*const IRTCProfile, @ptrCast(self)), pbstr_cur_ver_);
            }
            pub inline fn getClientUpdateURI(self: *const T, pbstr_update_u_r_i_: ?*?BSTR) HRESULT {
                return @as(*const IRTCProfile.VTable, @ptrCast(self.vtable)).get_ClientUpdateURI(@as(*const IRTCProfile, @ptrCast(self)), pbstr_update_u_r_i_);
            }
            pub inline fn getClientData(self: *const T, pbstr_data_: ?*?BSTR) HRESULT {
                return @as(*const IRTCProfile.VTable, @ptrCast(self.vtable)).get_ClientData(@as(*const IRTCProfile, @ptrCast(self)), pbstr_data_);
            }
            pub inline fn getUserURI(self: *const T, pbstr_user_u_r_i_: ?*?BSTR) HRESULT {
                return @as(*const IRTCProfile.VTable, @ptrCast(self.vtable)).get_UserURI(@as(*const IRTCProfile, @ptrCast(self)), pbstr_user_u_r_i_);
            }
            pub inline fn getUserName(self: *const T, pbstr_user_name_: ?*?BSTR) HRESULT {
                return @as(*const IRTCProfile.VTable, @ptrCast(self.vtable)).get_UserName(@as(*const IRTCProfile, @ptrCast(self)), pbstr_user_name_);
            }
            pub inline fn getUserAccount(self: *const T, pbstr_user_account_: ?*?BSTR) HRESULT {
                return @as(*const IRTCProfile.VTable, @ptrCast(self.vtable)).get_UserAccount(@as(*const IRTCProfile, @ptrCast(self)), pbstr_user_account_);
            }
            pub inline fn setCredentials(self: *const T, bstr_user_u_r_i_: ?BSTR, bstr_user_account_: ?BSTR, bstr_password_: ?BSTR) HRESULT {
                return @as(*const IRTCProfile.VTable, @ptrCast(self.vtable)).SetCredentials(@as(*const IRTCProfile, @ptrCast(self)), bstr_user_u_r_i_, bstr_user_account_, bstr_password_);
            }
            pub inline fn getSessionCapabilities(self: *const T, pl_supported_sessions_: ?*i32) HRESULT {
                return @as(*const IRTCProfile.VTable, @ptrCast(self.vtable)).get_SessionCapabilities(@as(*const IRTCProfile, @ptrCast(self)), pl_supported_sessions_);
            }
            pub inline fn getState(self: *const T, pen_state_: ?*RTC_REGISTRATION_STATE) HRESULT {
                return @as(*const IRTCProfile.VTable, @ptrCast(self.vtable)).get_State(@as(*const IRTCProfile, @ptrCast(self)), pen_state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCProfile2_Value = Guid.initString("4b81f84e-bdc7-4184-9154-3cb2dd7917fb");
pub const IID_IRTCProfile2 = &IID_IRTCProfile2_Value;
pub const IRTCProfile2 = extern struct {
    pub const VTable = extern struct {
        base: IRTCProfile.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Realm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile2,
            pbstr_realm: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Realm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile2,
            bstr_realm: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AllowedAuth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile2,
            pl_allowed_auth: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AllowedAuth: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfile2,
            l_allowed_auth: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRTCProfile.MethodMixin(T);
            pub inline fn getRealm(self: *const T, pbstr_realm_: ?*?BSTR) HRESULT {
                return @as(*const IRTCProfile2.VTable, @ptrCast(self.vtable)).get_Realm(@as(*const IRTCProfile2, @ptrCast(self)), pbstr_realm_);
            }
            pub inline fn putRealm(self: *const T, bstr_realm_: ?BSTR) HRESULT {
                return @as(*const IRTCProfile2.VTable, @ptrCast(self.vtable)).put_Realm(@as(*const IRTCProfile2, @ptrCast(self)), bstr_realm_);
            }
            pub inline fn getAllowedAuth(self: *const T, pl_allowed_auth_: ?*i32) HRESULT {
                return @as(*const IRTCProfile2.VTable, @ptrCast(self.vtable)).get_AllowedAuth(@as(*const IRTCProfile2, @ptrCast(self)), pl_allowed_auth_);
            }
            pub inline fn putAllowedAuth(self: *const T, l_allowed_auth_: i32) HRESULT {
                return @as(*const IRTCProfile2.VTable, @ptrCast(self.vtable)).put_AllowedAuth(@as(*const IRTCProfile2, @ptrCast(self)), l_allowed_auth_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCSession_Value = Guid.initString("387c8086-99be-42fb-9973-7c0fc0ca9fa8");
pub const IID_IRTCSession = &IID_IRTCSession_Value;
pub const IRTCSession = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Client: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSession,
            pp_client: ?*?*IRTCClient,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSession,
            pen_state: ?*RTC_SESSION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Type: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSession,
            pen_type: ?*RTC_SESSION_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Profile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSession,
            pp_profile: ?*?*IRTCProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Participants: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSession,
            pp_collection: ?*?*IRTCCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Answer: *const fn (
            self: *const IRTCSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Terminate: *const fn (
            self: *const IRTCSession,
            en_reason: RTC_TERMINATE_REASON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Redirect: *const fn (
            self: *const IRTCSession,
            en_type: RTC_SESSION_TYPE,
            bstr_local_phone_u_r_i: ?BSTR,
            p_profile: ?*IRTCProfile,
            l_flags: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddParticipant: *const fn (
            self: *const IRTCSession,
            bstr_address: ?BSTR,
            bstr_name: ?BSTR,
            pp_participant: ?*?*IRTCParticipant,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveParticipant: *const fn (
            self: *const IRTCSession,
            p_participant: ?*IRTCParticipant,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateParticipants: *const fn (
            self: *const IRTCSession,
            pp_enum: ?*?*IRTCEnumParticipants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CanAddParticipants: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSession,
            pf_can_add: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RedirectedUserURI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSession,
            pbstr_user_u_r_i: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RedirectedUserName: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSession,
            pbstr_user_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        NextRedirectedUser: *const fn (
            self: *const IRTCSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendMessage: *const fn (
            self: *const IRTCSession,
            bstr_message_header: ?BSTR,
            bstr_message: ?BSTR,
            l_cookie: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SendMessageStatus: *const fn (
            self: *const IRTCSession,
            en_user_status: RTC_MESSAGING_USER_STATUS,
            l_cookie: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddStream: *const fn (
            self: *const IRTCSession,
            l_media_type: i32,
            l_cookie: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveStream: *const fn (
            self: *const IRTCSession,
            l_media_type: i32,
            l_cookie: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_EncryptionKey: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSession,
            l_media_type: i32,
            encryption_key: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getClient(self: *const T, pp_client_: ?*?*IRTCClient) HRESULT {
                return @as(*const IRTCSession.VTable, @ptrCast(self.vtable)).get_Client(@as(*const IRTCSession, @ptrCast(self)), pp_client_);
            }
            pub inline fn getState(self: *const T, pen_state_: ?*RTC_SESSION_STATE) HRESULT {
                return @as(*const IRTCSession.VTable, @ptrCast(self.vtable)).get_State(@as(*const IRTCSession, @ptrCast(self)), pen_state_);
            }
            pub inline fn getType(self: *const T, pen_type_: ?*RTC_SESSION_TYPE) HRESULT {
                return @as(*const IRTCSession.VTable, @ptrCast(self.vtable)).get_Type(@as(*const IRTCSession, @ptrCast(self)), pen_type_);
            }
            pub inline fn getProfile(self: *const T, pp_profile_: ?*?*IRTCProfile) HRESULT {
                return @as(*const IRTCSession.VTable, @ptrCast(self.vtable)).get_Profile(@as(*const IRTCSession, @ptrCast(self)), pp_profile_);
            }
            pub inline fn getParticipants(self: *const T, pp_collection_: ?*?*IRTCCollection) HRESULT {
                return @as(*const IRTCSession.VTable, @ptrCast(self.vtable)).get_Participants(@as(*const IRTCSession, @ptrCast(self)), pp_collection_);
            }
            pub inline fn answer(self: *const T) HRESULT {
                return @as(*const IRTCSession.VTable, @ptrCast(self.vtable)).Answer(@as(*const IRTCSession, @ptrCast(self)));
            }
            pub inline fn terminate(self: *const T, en_reason_: RTC_TERMINATE_REASON) HRESULT {
                return @as(*const IRTCSession.VTable, @ptrCast(self.vtable)).Terminate(@as(*const IRTCSession, @ptrCast(self)), en_reason_);
            }
            pub inline fn redirect(self: *const T, en_type_: RTC_SESSION_TYPE, bstr_local_phone_u_r_i_: ?BSTR, p_profile_: ?*IRTCProfile, l_flags_: i32) HRESULT {
                return @as(*const IRTCSession.VTable, @ptrCast(self.vtable)).Redirect(@as(*const IRTCSession, @ptrCast(self)), en_type_, bstr_local_phone_u_r_i_, p_profile_, l_flags_);
            }
            pub inline fn addParticipant(self: *const T, bstr_address_: ?BSTR, bstr_name_: ?BSTR, pp_participant_: ?*?*IRTCParticipant) HRESULT {
                return @as(*const IRTCSession.VTable, @ptrCast(self.vtable)).AddParticipant(@as(*const IRTCSession, @ptrCast(self)), bstr_address_, bstr_name_, pp_participant_);
            }
            pub inline fn removeParticipant(self: *const T, p_participant_: ?*IRTCParticipant) HRESULT {
                return @as(*const IRTCSession.VTable, @ptrCast(self.vtable)).RemoveParticipant(@as(*const IRTCSession, @ptrCast(self)), p_participant_);
            }
            pub inline fn enumerateParticipants(self: *const T, pp_enum_: ?*?*IRTCEnumParticipants) HRESULT {
                return @as(*const IRTCSession.VTable, @ptrCast(self.vtable)).EnumerateParticipants(@as(*const IRTCSession, @ptrCast(self)), pp_enum_);
            }
            pub inline fn getCanAddParticipants(self: *const T, pf_can_add_: ?*i16) HRESULT {
                return @as(*const IRTCSession.VTable, @ptrCast(self.vtable)).get_CanAddParticipants(@as(*const IRTCSession, @ptrCast(self)), pf_can_add_);
            }
            pub inline fn getRedirectedUserURI(self: *const T, pbstr_user_u_r_i_: ?*?BSTR) HRESULT {
                return @as(*const IRTCSession.VTable, @ptrCast(self.vtable)).get_RedirectedUserURI(@as(*const IRTCSession, @ptrCast(self)), pbstr_user_u_r_i_);
            }
            pub inline fn getRedirectedUserName(self: *const T, pbstr_user_name_: ?*?BSTR) HRESULT {
                return @as(*const IRTCSession.VTable, @ptrCast(self.vtable)).get_RedirectedUserName(@as(*const IRTCSession, @ptrCast(self)), pbstr_user_name_);
            }
            pub inline fn nextRedirectedUser(self: *const T) HRESULT {
                return @as(*const IRTCSession.VTable, @ptrCast(self.vtable)).NextRedirectedUser(@as(*const IRTCSession, @ptrCast(self)));
            }
            pub inline fn sendMessage(self: *const T, bstr_message_header_: ?BSTR, bstr_message_: ?BSTR, l_cookie_: isize) HRESULT {
                return @as(*const IRTCSession.VTable, @ptrCast(self.vtable)).SendMessage(@as(*const IRTCSession, @ptrCast(self)), bstr_message_header_, bstr_message_, l_cookie_);
            }
            pub inline fn sendMessageStatus(self: *const T, en_user_status_: RTC_MESSAGING_USER_STATUS, l_cookie_: isize) HRESULT {
                return @as(*const IRTCSession.VTable, @ptrCast(self.vtable)).SendMessageStatus(@as(*const IRTCSession, @ptrCast(self)), en_user_status_, l_cookie_);
            }
            pub inline fn addStream(self: *const T, l_media_type_: i32, l_cookie_: isize) HRESULT {
                return @as(*const IRTCSession.VTable, @ptrCast(self.vtable)).AddStream(@as(*const IRTCSession, @ptrCast(self)), l_media_type_, l_cookie_);
            }
            pub inline fn removeStream(self: *const T, l_media_type_: i32, l_cookie_: isize) HRESULT {
                return @as(*const IRTCSession.VTable, @ptrCast(self.vtable)).RemoveStream(@as(*const IRTCSession, @ptrCast(self)), l_media_type_, l_cookie_);
            }
            pub inline fn putEncryptionKey(self: *const T, l_media_type_: i32, encryption_key_: ?BSTR) HRESULT {
                return @as(*const IRTCSession.VTable, @ptrCast(self.vtable)).put_EncryptionKey(@as(*const IRTCSession, @ptrCast(self)), l_media_type_, encryption_key_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCSession2_Value = Guid.initString("17d7cdfc-b007-484c-99d2-86a8a820991d");
pub const IID_IRTCSession2 = &IID_IRTCSession2_Value;
pub const IRTCSession2 = extern struct {
    pub const VTable = extern struct {
        base: IRTCSession.VTable,
        SendInfo: *const fn (
            self: *const IRTCSession2,
            bstr_info_header: ?BSTR,
            bstr_info: ?BSTR,
            l_cookie: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PreferredSecurityLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSession2,
            en_security_type: RTC_SECURITY_TYPE,
            en_security_level: RTC_SECURITY_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PreferredSecurityLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSession2,
            en_security_type: RTC_SECURITY_TYPE,
            pen_security_level: ?*RTC_SECURITY_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        IsSecurityEnabled: *const fn (
            self: *const IRTCSession2,
            en_security_type: RTC_SECURITY_TYPE,
            pf_security_enabled: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AnswerWithSessionDescription: *const fn (
            self: *const IRTCSession2,
            bstr_content_type: ?BSTR,
            bstr_session_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReInviteWithSessionDescription: *const fn (
            self: *const IRTCSession2,
            bstr_content_type: ?BSTR,
            bstr_session_description: ?BSTR,
            l_cookie: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRTCSession.MethodMixin(T);
            pub inline fn sendInfo(self: *const T, bstr_info_header_: ?BSTR, bstr_info_: ?BSTR, l_cookie_: isize) HRESULT {
                return @as(*const IRTCSession2.VTable, @ptrCast(self.vtable)).SendInfo(@as(*const IRTCSession2, @ptrCast(self)), bstr_info_header_, bstr_info_, l_cookie_);
            }
            pub inline fn putPreferredSecurityLevel(self: *const T, en_security_type_: RTC_SECURITY_TYPE, en_security_level_: RTC_SECURITY_LEVEL) HRESULT {
                return @as(*const IRTCSession2.VTable, @ptrCast(self.vtable)).put_PreferredSecurityLevel(@as(*const IRTCSession2, @ptrCast(self)), en_security_type_, en_security_level_);
            }
            pub inline fn getPreferredSecurityLevel(self: *const T, en_security_type_: RTC_SECURITY_TYPE, pen_security_level_: ?*RTC_SECURITY_LEVEL) HRESULT {
                return @as(*const IRTCSession2.VTable, @ptrCast(self.vtable)).get_PreferredSecurityLevel(@as(*const IRTCSession2, @ptrCast(self)), en_security_type_, pen_security_level_);
            }
            pub inline fn isSecurityEnabled(self: *const T, en_security_type_: RTC_SECURITY_TYPE, pf_security_enabled_: ?*i16) HRESULT {
                return @as(*const IRTCSession2.VTable, @ptrCast(self.vtable)).IsSecurityEnabled(@as(*const IRTCSession2, @ptrCast(self)), en_security_type_, pf_security_enabled_);
            }
            pub inline fn answerWithSessionDescription(self: *const T, bstr_content_type_: ?BSTR, bstr_session_description_: ?BSTR) HRESULT {
                return @as(*const IRTCSession2.VTable, @ptrCast(self.vtable)).AnswerWithSessionDescription(@as(*const IRTCSession2, @ptrCast(self)), bstr_content_type_, bstr_session_description_);
            }
            pub inline fn reInviteWithSessionDescription(self: *const T, bstr_content_type_: ?BSTR, bstr_session_description_: ?BSTR, l_cookie_: isize) HRESULT {
                return @as(*const IRTCSession2.VTable, @ptrCast(self.vtable)).ReInviteWithSessionDescription(@as(*const IRTCSession2, @ptrCast(self)), bstr_content_type_, bstr_session_description_, l_cookie_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCSessionCallControl_Value = Guid.initString("e9a50d94-190b-4f82-9530-3b8ebf60758a");
pub const IID_IRTCSessionCallControl = &IID_IRTCSessionCallControl_Value;
pub const IRTCSessionCallControl = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Hold: *const fn (
            self: *const IRTCSessionCallControl,
            l_cookie: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UnHold: *const fn (
            self: *const IRTCSessionCallControl,
            l_cookie: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Forward: *const fn (
            self: *const IRTCSessionCallControl,
            bstr_forward_to_u_r_i: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refer: *const fn (
            self: *const IRTCSessionCallControl,
            bstr_refer_to_u_r_i: ?BSTR,
            bstr_refer_cookie: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReferredByURI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionCallControl,
            bstr_referred_by_u_r_i: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReferredByURI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionCallControl,
            pbstr_referred_by_u_r_i: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ReferCookie: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionCallControl,
            bstr_refer_cookie: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReferCookie: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionCallControl,
            pbstr_refer_cookie: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsReferred: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionCallControl,
            pf_is_referred: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn hold(self: *const T, l_cookie_: isize) HRESULT {
                return @as(*const IRTCSessionCallControl.VTable, @ptrCast(self.vtable)).Hold(@as(*const IRTCSessionCallControl, @ptrCast(self)), l_cookie_);
            }
            pub inline fn unHold(self: *const T, l_cookie_: isize) HRESULT {
                return @as(*const IRTCSessionCallControl.VTable, @ptrCast(self.vtable)).UnHold(@as(*const IRTCSessionCallControl, @ptrCast(self)), l_cookie_);
            }
            pub inline fn forward(self: *const T, bstr_forward_to_u_r_i_: ?BSTR) HRESULT {
                return @as(*const IRTCSessionCallControl.VTable, @ptrCast(self.vtable)).Forward(@as(*const IRTCSessionCallControl, @ptrCast(self)), bstr_forward_to_u_r_i_);
            }
            pub inline fn refer(self: *const T, bstr_refer_to_u_r_i_: ?BSTR, bstr_refer_cookie_: ?BSTR) HRESULT {
                return @as(*const IRTCSessionCallControl.VTable, @ptrCast(self.vtable)).Refer(@as(*const IRTCSessionCallControl, @ptrCast(self)), bstr_refer_to_u_r_i_, bstr_refer_cookie_);
            }
            pub inline fn putReferredByURI(self: *const T, bstr_referred_by_u_r_i_: ?BSTR) HRESULT {
                return @as(*const IRTCSessionCallControl.VTable, @ptrCast(self.vtable)).put_ReferredByURI(@as(*const IRTCSessionCallControl, @ptrCast(self)), bstr_referred_by_u_r_i_);
            }
            pub inline fn getReferredByURI(self: *const T, pbstr_referred_by_u_r_i_: ?*?BSTR) HRESULT {
                return @as(*const IRTCSessionCallControl.VTable, @ptrCast(self.vtable)).get_ReferredByURI(@as(*const IRTCSessionCallControl, @ptrCast(self)), pbstr_referred_by_u_r_i_);
            }
            pub inline fn putReferCookie(self: *const T, bstr_refer_cookie_: ?BSTR) HRESULT {
                return @as(*const IRTCSessionCallControl.VTable, @ptrCast(self.vtable)).put_ReferCookie(@as(*const IRTCSessionCallControl, @ptrCast(self)), bstr_refer_cookie_);
            }
            pub inline fn getReferCookie(self: *const T, pbstr_refer_cookie_: ?*?BSTR) HRESULT {
                return @as(*const IRTCSessionCallControl.VTable, @ptrCast(self.vtable)).get_ReferCookie(@as(*const IRTCSessionCallControl, @ptrCast(self)), pbstr_refer_cookie_);
            }
            pub inline fn getIsReferred(self: *const T, pf_is_referred_: ?*i16) HRESULT {
                return @as(*const IRTCSessionCallControl.VTable, @ptrCast(self.vtable)).get_IsReferred(@as(*const IRTCSessionCallControl, @ptrCast(self)), pf_is_referred_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCParticipant_Value = Guid.initString("ae86add5-26b1-4414-af1d-b94cd938d739");
pub const IID_IRTCParticipant = &IID_IRTCParticipant_Value;
pub const IRTCParticipant = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserURI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCParticipant,
            pbstr_user_u_r_i: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCParticipant,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Removable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCParticipant,
            pf_removable: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCParticipant,
            pen_state: ?*RTC_PARTICIPANT_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Session: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCParticipant,
            pp_session: ?*?*IRTCSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getUserURI(self: *const T, pbstr_user_u_r_i_: ?*?BSTR) HRESULT {
                return @as(*const IRTCParticipant.VTable, @ptrCast(self.vtable)).get_UserURI(@as(*const IRTCParticipant, @ptrCast(self)), pbstr_user_u_r_i_);
            }
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IRTCParticipant.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IRTCParticipant, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn getRemovable(self: *const T, pf_removable_: ?*i16) HRESULT {
                return @as(*const IRTCParticipant.VTable, @ptrCast(self.vtable)).get_Removable(@as(*const IRTCParticipant, @ptrCast(self)), pf_removable_);
            }
            pub inline fn getState(self: *const T, pen_state_: ?*RTC_PARTICIPANT_STATE) HRESULT {
                return @as(*const IRTCParticipant.VTable, @ptrCast(self.vtable)).get_State(@as(*const IRTCParticipant, @ptrCast(self)), pen_state_);
            }
            pub inline fn getSession(self: *const T, pp_session_: ?*?*IRTCSession) HRESULT {
                return @as(*const IRTCParticipant.VTable, @ptrCast(self.vtable)).get_Session(@as(*const IRTCParticipant, @ptrCast(self)), pp_session_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCRoamingEvent_Value = Guid.initString("79960a6b-0cb1-4dc8-a805-7318e99902e8");
pub const IID_IRTCRoamingEvent = &IID_IRTCRoamingEvent_Value;
pub const IRTCRoamingEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCRoamingEvent,
            p_event_type: ?*RTC_ROAMING_EVENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Profile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCRoamingEvent,
            pp_profile: ?*?*IRTCProfile2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCRoamingEvent,
            pl_status_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCRoamingEvent,
            pbstr_status_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getEventType(self: *const T, p_event_type_: ?*RTC_ROAMING_EVENT_TYPE) HRESULT {
                return @as(*const IRTCRoamingEvent.VTable, @ptrCast(self.vtable)).get_EventType(@as(*const IRTCRoamingEvent, @ptrCast(self)), p_event_type_);
            }
            pub inline fn getProfile(self: *const T, pp_profile_: ?*?*IRTCProfile2) HRESULT {
                return @as(*const IRTCRoamingEvent.VTable, @ptrCast(self.vtable)).get_Profile(@as(*const IRTCRoamingEvent, @ptrCast(self)), pp_profile_);
            }
            pub inline fn getStatusCode(self: *const T, pl_status_code_: ?*i32) HRESULT {
                return @as(*const IRTCRoamingEvent.VTable, @ptrCast(self.vtable)).get_StatusCode(@as(*const IRTCRoamingEvent, @ptrCast(self)), pl_status_code_);
            }
            pub inline fn getStatusText(self: *const T, pbstr_status_text_: ?*?BSTR) HRESULT {
                return @as(*const IRTCRoamingEvent.VTable, @ptrCast(self.vtable)).get_StatusText(@as(*const IRTCRoamingEvent, @ptrCast(self)), pbstr_status_text_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCProfileEvent_Value = Guid.initString("d6d5ab3b-770e-43e8-800a-79b062395fca");
pub const IID_IRTCProfileEvent = &IID_IRTCProfileEvent_Value;
pub const IRTCProfileEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Profile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfileEvent,
            pp_profile: ?*?*IRTCProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Cookie: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfileEvent,
            pl_cookie: ?*isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfileEvent,
            pl_status_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getProfile(self: *const T, pp_profile_: ?*?*IRTCProfile) HRESULT {
                return @as(*const IRTCProfileEvent.VTable, @ptrCast(self.vtable)).get_Profile(@as(*const IRTCProfileEvent, @ptrCast(self)), pp_profile_);
            }
            pub inline fn getCookie(self: *const T, pl_cookie_: ?*isize) HRESULT {
                return @as(*const IRTCProfileEvent.VTable, @ptrCast(self.vtable)).get_Cookie(@as(*const IRTCProfileEvent, @ptrCast(self)), pl_cookie_);
            }
            pub inline fn getStatusCode(self: *const T, pl_status_code_: ?*i32) HRESULT {
                return @as(*const IRTCProfileEvent.VTable, @ptrCast(self.vtable)).get_StatusCode(@as(*const IRTCProfileEvent, @ptrCast(self)), pl_status_code_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCProfileEvent2_Value = Guid.initString("62e56edc-03fa-4121-94fb-23493fd0ae64");
pub const IID_IRTCProfileEvent2 = &IID_IRTCProfileEvent2_Value;
pub const IRTCProfileEvent2 = extern struct {
    pub const VTable = extern struct {
        base: IRTCProfileEvent.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCProfileEvent2,
            p_event_type: ?*RTC_PROFILE_EVENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRTCProfileEvent.MethodMixin(T);
            pub inline fn getEventType(self: *const T, p_event_type_: ?*RTC_PROFILE_EVENT_TYPE) HRESULT {
                return @as(*const IRTCProfileEvent2.VTable, @ptrCast(self.vtable)).get_EventType(@as(*const IRTCProfileEvent2, @ptrCast(self)), p_event_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCClientEvent_Value = Guid.initString("2b493b7a-3cba-4170-9c8b-76a9dacdd644");
pub const IID_IRTCClientEvent = &IID_IRTCClientEvent_Value;
pub const IRTCClientEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClientEvent,
            pen_event_type: ?*RTC_CLIENT_EVENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Client: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCClientEvent,
            pp_client: ?*?*IRTCClient,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getEventType(self: *const T, pen_event_type_: ?*RTC_CLIENT_EVENT_TYPE) HRESULT {
                return @as(*const IRTCClientEvent.VTable, @ptrCast(self.vtable)).get_EventType(@as(*const IRTCClientEvent, @ptrCast(self)), pen_event_type_);
            }
            pub inline fn getClient(self: *const T, pp_client_: ?*?*IRTCClient) HRESULT {
                return @as(*const IRTCClientEvent.VTable, @ptrCast(self.vtable)).get_Client(@as(*const IRTCClientEvent, @ptrCast(self)), pp_client_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCRegistrationStateChangeEvent_Value = Guid.initString("62d0991b-50ab-4f02-b948-ca94f26f8f95");
pub const IID_IRTCRegistrationStateChangeEvent = &IID_IRTCRegistrationStateChangeEvent_Value;
pub const IRTCRegistrationStateChangeEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Profile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCRegistrationStateChangeEvent,
            pp_profile: ?*?*IRTCProfile,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCRegistrationStateChangeEvent,
            pen_state: ?*RTC_REGISTRATION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCRegistrationStateChangeEvent,
            pl_status_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCRegistrationStateChangeEvent,
            pbstr_status_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getProfile(self: *const T, pp_profile_: ?*?*IRTCProfile) HRESULT {
                return @as(*const IRTCRegistrationStateChangeEvent.VTable, @ptrCast(self.vtable)).get_Profile(@as(*const IRTCRegistrationStateChangeEvent, @ptrCast(self)), pp_profile_);
            }
            pub inline fn getState(self: *const T, pen_state_: ?*RTC_REGISTRATION_STATE) HRESULT {
                return @as(*const IRTCRegistrationStateChangeEvent.VTable, @ptrCast(self.vtable)).get_State(@as(*const IRTCRegistrationStateChangeEvent, @ptrCast(self)), pen_state_);
            }
            pub inline fn getStatusCode(self: *const T, pl_status_code_: ?*i32) HRESULT {
                return @as(*const IRTCRegistrationStateChangeEvent.VTable, @ptrCast(self.vtable)).get_StatusCode(@as(*const IRTCRegistrationStateChangeEvent, @ptrCast(self)), pl_status_code_);
            }
            pub inline fn getStatusText(self: *const T, pbstr_status_text_: ?*?BSTR) HRESULT {
                return @as(*const IRTCRegistrationStateChangeEvent.VTable, @ptrCast(self.vtable)).get_StatusText(@as(*const IRTCRegistrationStateChangeEvent, @ptrCast(self)), pbstr_status_text_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCSessionStateChangeEvent_Value = Guid.initString("b5bad703-5952-48b3-9321-7f4500521506");
pub const IID_IRTCSessionStateChangeEvent = &IID_IRTCSessionStateChangeEvent_Value;
pub const IRTCSessionStateChangeEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Session: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionStateChangeEvent,
            pp_session: ?*?*IRTCSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionStateChangeEvent,
            pen_state: ?*RTC_SESSION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionStateChangeEvent,
            pl_status_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionStateChangeEvent,
            pbstr_status_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSession(self: *const T, pp_session_: ?*?*IRTCSession) HRESULT {
                return @as(*const IRTCSessionStateChangeEvent.VTable, @ptrCast(self.vtable)).get_Session(@as(*const IRTCSessionStateChangeEvent, @ptrCast(self)), pp_session_);
            }
            pub inline fn getState(self: *const T, pen_state_: ?*RTC_SESSION_STATE) HRESULT {
                return @as(*const IRTCSessionStateChangeEvent.VTable, @ptrCast(self.vtable)).get_State(@as(*const IRTCSessionStateChangeEvent, @ptrCast(self)), pen_state_);
            }
            pub inline fn getStatusCode(self: *const T, pl_status_code_: ?*i32) HRESULT {
                return @as(*const IRTCSessionStateChangeEvent.VTable, @ptrCast(self.vtable)).get_StatusCode(@as(*const IRTCSessionStateChangeEvent, @ptrCast(self)), pl_status_code_);
            }
            pub inline fn getStatusText(self: *const T, pbstr_status_text_: ?*?BSTR) HRESULT {
                return @as(*const IRTCSessionStateChangeEvent.VTable, @ptrCast(self.vtable)).get_StatusText(@as(*const IRTCSessionStateChangeEvent, @ptrCast(self)), pbstr_status_text_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCSessionStateChangeEvent2_Value = Guid.initString("4f933171-6f95-4880-80d9-2ec8d495d261");
pub const IID_IRTCSessionStateChangeEvent2 = &IID_IRTCSessionStateChangeEvent2_Value;
pub const IRTCSessionStateChangeEvent2 = extern struct {
    pub const VTable = extern struct {
        base: IRTCSessionStateChangeEvent.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MediaTypes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionStateChangeEvent2,
            p_media_types: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemotePreferredSecurityLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionStateChangeEvent2,
            en_security_type: RTC_SECURITY_TYPE,
            pen_security_level: ?*RTC_SECURITY_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsForked: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionStateChangeEvent2,
            pf_is_forked: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRemoteSessionDescription: *const fn (
            self: *const IRTCSessionStateChangeEvent2,
            pbstr_content_type: ?*?BSTR,
            pbstr_session_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRTCSessionStateChangeEvent.MethodMixin(T);
            pub inline fn getMediaTypes(self: *const T, p_media_types_: ?*i32) HRESULT {
                return @as(*const IRTCSessionStateChangeEvent2.VTable, @ptrCast(self.vtable)).get_MediaTypes(@as(*const IRTCSessionStateChangeEvent2, @ptrCast(self)), p_media_types_);
            }
            pub inline fn getRemotePreferredSecurityLevel(self: *const T, en_security_type_: RTC_SECURITY_TYPE, pen_security_level_: ?*RTC_SECURITY_LEVEL) HRESULT {
                return @as(*const IRTCSessionStateChangeEvent2.VTable, @ptrCast(self.vtable)).get_RemotePreferredSecurityLevel(@as(*const IRTCSessionStateChangeEvent2, @ptrCast(self)), en_security_type_, pen_security_level_);
            }
            pub inline fn getIsForked(self: *const T, pf_is_forked_: ?*i16) HRESULT {
                return @as(*const IRTCSessionStateChangeEvent2.VTable, @ptrCast(self.vtable)).get_IsForked(@as(*const IRTCSessionStateChangeEvent2, @ptrCast(self)), pf_is_forked_);
            }
            pub inline fn getRemoteSessionDescription(self: *const T, pbstr_content_type_: ?*?BSTR, pbstr_session_description_: ?*?BSTR) HRESULT {
                return @as(*const IRTCSessionStateChangeEvent2.VTable, @ptrCast(self.vtable)).GetRemoteSessionDescription(@as(*const IRTCSessionStateChangeEvent2, @ptrCast(self)), pbstr_content_type_, pbstr_session_description_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCSessionOperationCompleteEvent_Value = Guid.initString("a6bff4c0-f7c8-4d3c-9a41-3550f78a95b0");
pub const IID_IRTCSessionOperationCompleteEvent = &IID_IRTCSessionOperationCompleteEvent_Value;
pub const IRTCSessionOperationCompleteEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Session: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionOperationCompleteEvent,
            pp_session: ?*?*IRTCSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Cookie: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionOperationCompleteEvent,
            pl_cookie: ?*isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionOperationCompleteEvent,
            pl_status_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionOperationCompleteEvent,
            pbstr_status_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSession(self: *const T, pp_session_: ?*?*IRTCSession) HRESULT {
                return @as(*const IRTCSessionOperationCompleteEvent.VTable, @ptrCast(self.vtable)).get_Session(@as(*const IRTCSessionOperationCompleteEvent, @ptrCast(self)), pp_session_);
            }
            pub inline fn getCookie(self: *const T, pl_cookie_: ?*isize) HRESULT {
                return @as(*const IRTCSessionOperationCompleteEvent.VTable, @ptrCast(self.vtable)).get_Cookie(@as(*const IRTCSessionOperationCompleteEvent, @ptrCast(self)), pl_cookie_);
            }
            pub inline fn getStatusCode(self: *const T, pl_status_code_: ?*i32) HRESULT {
                return @as(*const IRTCSessionOperationCompleteEvent.VTable, @ptrCast(self.vtable)).get_StatusCode(@as(*const IRTCSessionOperationCompleteEvent, @ptrCast(self)), pl_status_code_);
            }
            pub inline fn getStatusText(self: *const T, pbstr_status_text_: ?*?BSTR) HRESULT {
                return @as(*const IRTCSessionOperationCompleteEvent.VTable, @ptrCast(self.vtable)).get_StatusText(@as(*const IRTCSessionOperationCompleteEvent, @ptrCast(self)), pbstr_status_text_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCSessionOperationCompleteEvent2_Value = Guid.initString("f6fc2a9b-d5bc-4241-b436-1b8460c13832");
pub const IID_IRTCSessionOperationCompleteEvent2 = &IID_IRTCSessionOperationCompleteEvent2_Value;
pub const IRTCSessionOperationCompleteEvent2 = extern struct {
    pub const VTable = extern struct {
        base: IRTCSessionOperationCompleteEvent.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Participant: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionOperationCompleteEvent2,
            pp_participant: ?*?*IRTCParticipant,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRemoteSessionDescription: *const fn (
            self: *const IRTCSessionOperationCompleteEvent2,
            pbstr_content_type: ?*?BSTR,
            pbstr_session_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRTCSessionOperationCompleteEvent.MethodMixin(T);
            pub inline fn getParticipant(self: *const T, pp_participant_: ?*?*IRTCParticipant) HRESULT {
                return @as(*const IRTCSessionOperationCompleteEvent2.VTable, @ptrCast(self.vtable)).get_Participant(@as(*const IRTCSessionOperationCompleteEvent2, @ptrCast(self)), pp_participant_);
            }
            pub inline fn getRemoteSessionDescription(self: *const T, pbstr_content_type_: ?*?BSTR, pbstr_session_description_: ?*?BSTR) HRESULT {
                return @as(*const IRTCSessionOperationCompleteEvent2.VTable, @ptrCast(self.vtable)).GetRemoteSessionDescription(@as(*const IRTCSessionOperationCompleteEvent2, @ptrCast(self)), pbstr_content_type_, pbstr_session_description_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCParticipantStateChangeEvent_Value = Guid.initString("09bcb597-f0fa-48f9-b420-468cea7fde04");
pub const IID_IRTCParticipantStateChangeEvent = &IID_IRTCParticipantStateChangeEvent_Value;
pub const IRTCParticipantStateChangeEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Participant: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCParticipantStateChangeEvent,
            pp_participant: ?*?*IRTCParticipant,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCParticipantStateChangeEvent,
            pen_state: ?*RTC_PARTICIPANT_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCParticipantStateChangeEvent,
            pl_status_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getParticipant(self: *const T, pp_participant_: ?*?*IRTCParticipant) HRESULT {
                return @as(*const IRTCParticipantStateChangeEvent.VTable, @ptrCast(self.vtable)).get_Participant(@as(*const IRTCParticipantStateChangeEvent, @ptrCast(self)), pp_participant_);
            }
            pub inline fn getState(self: *const T, pen_state_: ?*RTC_PARTICIPANT_STATE) HRESULT {
                return @as(*const IRTCParticipantStateChangeEvent.VTable, @ptrCast(self.vtable)).get_State(@as(*const IRTCParticipantStateChangeEvent, @ptrCast(self)), pen_state_);
            }
            pub inline fn getStatusCode(self: *const T, pl_status_code_: ?*i32) HRESULT {
                return @as(*const IRTCParticipantStateChangeEvent.VTable, @ptrCast(self.vtable)).get_StatusCode(@as(*const IRTCParticipantStateChangeEvent, @ptrCast(self)), pl_status_code_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCMediaEvent_Value = Guid.initString("099944fb-bcda-453e-8c41-e13da2adf7f3");
pub const IID_IRTCMediaEvent = &IID_IRTCMediaEvent_Value;
pub const IRTCMediaEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MediaType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCMediaEvent,
            p_media_type: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCMediaEvent,
            pen_event_type: ?*RTC_MEDIA_EVENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventReason: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCMediaEvent,
            pen_event_reason: ?*RTC_MEDIA_EVENT_REASON,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getMediaType(self: *const T, p_media_type_: ?*i32) HRESULT {
                return @as(*const IRTCMediaEvent.VTable, @ptrCast(self.vtable)).get_MediaType(@as(*const IRTCMediaEvent, @ptrCast(self)), p_media_type_);
            }
            pub inline fn getEventType(self: *const T, pen_event_type_: ?*RTC_MEDIA_EVENT_TYPE) HRESULT {
                return @as(*const IRTCMediaEvent.VTable, @ptrCast(self.vtable)).get_EventType(@as(*const IRTCMediaEvent, @ptrCast(self)), pen_event_type_);
            }
            pub inline fn getEventReason(self: *const T, pen_event_reason_: ?*RTC_MEDIA_EVENT_REASON) HRESULT {
                return @as(*const IRTCMediaEvent.VTable, @ptrCast(self.vtable)).get_EventReason(@as(*const IRTCMediaEvent, @ptrCast(self)), pen_event_reason_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCIntensityEvent_Value = Guid.initString("4c23bf51-390c-4992-a41d-41eec05b2a4b");
pub const IID_IRTCIntensityEvent = &IID_IRTCIntensityEvent_Value;
pub const IRTCIntensityEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Level: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCIntensityEvent,
            pl_level: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Min: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCIntensityEvent,
            pl_min: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Max: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCIntensityEvent,
            pl_max: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Direction: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCIntensityEvent,
            pen_direction: ?*RTC_AUDIO_DEVICE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getLevel(self: *const T, pl_level_: ?*i32) HRESULT {
                return @as(*const IRTCIntensityEvent.VTable, @ptrCast(self.vtable)).get_Level(@as(*const IRTCIntensityEvent, @ptrCast(self)), pl_level_);
            }
            pub inline fn getMin(self: *const T, pl_min_: ?*i32) HRESULT {
                return @as(*const IRTCIntensityEvent.VTable, @ptrCast(self.vtable)).get_Min(@as(*const IRTCIntensityEvent, @ptrCast(self)), pl_min_);
            }
            pub inline fn getMax(self: *const T, pl_max_: ?*i32) HRESULT {
                return @as(*const IRTCIntensityEvent.VTable, @ptrCast(self.vtable)).get_Max(@as(*const IRTCIntensityEvent, @ptrCast(self)), pl_max_);
            }
            pub inline fn getDirection(self: *const T, pen_direction_: ?*RTC_AUDIO_DEVICE) HRESULT {
                return @as(*const IRTCIntensityEvent.VTable, @ptrCast(self.vtable)).get_Direction(@as(*const IRTCIntensityEvent, @ptrCast(self)), pen_direction_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCMessagingEvent_Value = Guid.initString("d3609541-1b29-4de5-a4ad-5aebaf319512");
pub const IID_IRTCMessagingEvent = &IID_IRTCMessagingEvent_Value;
pub const IRTCMessagingEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Session: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCMessagingEvent,
            pp_session: ?*?*IRTCSession,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Participant: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCMessagingEvent,
            pp_participant: ?*?*IRTCParticipant,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCMessagingEvent,
            pen_event_type: ?*RTC_MESSAGING_EVENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Message: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCMessagingEvent,
            pbstr_message: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MessageHeader: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCMessagingEvent,
            pbstr_message_header: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_UserStatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCMessagingEvent,
            pen_user_status: ?*RTC_MESSAGING_USER_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSession(self: *const T, pp_session_: ?*?*IRTCSession) HRESULT {
                return @as(*const IRTCMessagingEvent.VTable, @ptrCast(self.vtable)).get_Session(@as(*const IRTCMessagingEvent, @ptrCast(self)), pp_session_);
            }
            pub inline fn getParticipant(self: *const T, pp_participant_: ?*?*IRTCParticipant) HRESULT {
                return @as(*const IRTCMessagingEvent.VTable, @ptrCast(self.vtable)).get_Participant(@as(*const IRTCMessagingEvent, @ptrCast(self)), pp_participant_);
            }
            pub inline fn getEventType(self: *const T, pen_event_type_: ?*RTC_MESSAGING_EVENT_TYPE) HRESULT {
                return @as(*const IRTCMessagingEvent.VTable, @ptrCast(self.vtable)).get_EventType(@as(*const IRTCMessagingEvent, @ptrCast(self)), pen_event_type_);
            }
            pub inline fn getMessage(self: *const T, pbstr_message_: ?*?BSTR) HRESULT {
                return @as(*const IRTCMessagingEvent.VTable, @ptrCast(self.vtable)).get_Message(@as(*const IRTCMessagingEvent, @ptrCast(self)), pbstr_message_);
            }
            pub inline fn getMessageHeader(self: *const T, pbstr_message_header_: ?*?BSTR) HRESULT {
                return @as(*const IRTCMessagingEvent.VTable, @ptrCast(self.vtable)).get_MessageHeader(@as(*const IRTCMessagingEvent, @ptrCast(self)), pbstr_message_header_);
            }
            pub inline fn getUserStatus(self: *const T, pen_user_status_: ?*RTC_MESSAGING_USER_STATUS) HRESULT {
                return @as(*const IRTCMessagingEvent.VTable, @ptrCast(self.vtable)).get_UserStatus(@as(*const IRTCMessagingEvent, @ptrCast(self)), pen_user_status_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCBuddyEvent_Value = Guid.initString("f36d755d-17e6-404e-954f-0fc07574c78d");
pub const IID_IRTCBuddyEvent = &IID_IRTCBuddyEvent_Value;
pub const IRTCBuddyEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Buddy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddyEvent,
            pp_buddy: ?*?*IRTCBuddy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getBuddy(self: *const T, pp_buddy_: ?*?*IRTCBuddy) HRESULT {
                return @as(*const IRTCBuddyEvent.VTable, @ptrCast(self.vtable)).get_Buddy(@as(*const IRTCBuddyEvent, @ptrCast(self)), pp_buddy_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCBuddyEvent2_Value = Guid.initString("484a7f1e-73f0-4990-bfc2-60bc3978a720");
pub const IID_IRTCBuddyEvent2 = &IID_IRTCBuddyEvent2_Value;
pub const IRTCBuddyEvent2 = extern struct {
    pub const VTable = extern struct {
        base: IRTCBuddyEvent.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddyEvent2,
            p_event_type: ?*RTC_BUDDY_EVENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddyEvent2,
            pl_status_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddyEvent2,
            pbstr_status_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRTCBuddyEvent.MethodMixin(T);
            pub inline fn getEventType(self: *const T, p_event_type_: ?*RTC_BUDDY_EVENT_TYPE) HRESULT {
                return @as(*const IRTCBuddyEvent2.VTable, @ptrCast(self.vtable)).get_EventType(@as(*const IRTCBuddyEvent2, @ptrCast(self)), p_event_type_);
            }
            pub inline fn getStatusCode(self: *const T, pl_status_code_: ?*i32) HRESULT {
                return @as(*const IRTCBuddyEvent2.VTable, @ptrCast(self.vtable)).get_StatusCode(@as(*const IRTCBuddyEvent2, @ptrCast(self)), pl_status_code_);
            }
            pub inline fn getStatusText(self: *const T, pbstr_status_text_: ?*?BSTR) HRESULT {
                return @as(*const IRTCBuddyEvent2.VTable, @ptrCast(self.vtable)).get_StatusText(@as(*const IRTCBuddyEvent2, @ptrCast(self)), pbstr_status_text_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCWatcherEvent_Value = Guid.initString("f30d7261-587a-424f-822c-312788f43548");
pub const IID_IRTCWatcherEvent = &IID_IRTCWatcherEvent_Value;
pub const IRTCWatcherEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Watcher: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCWatcherEvent,
            pp_watcher: ?*?*IRTCWatcher,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getWatcher(self: *const T, pp_watcher_: ?*?*IRTCWatcher) HRESULT {
                return @as(*const IRTCWatcherEvent.VTable, @ptrCast(self.vtable)).get_Watcher(@as(*const IRTCWatcherEvent, @ptrCast(self)), pp_watcher_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCWatcherEvent2_Value = Guid.initString("e52891e8-188c-49af-b005-98ed13f83f9c");
pub const IID_IRTCWatcherEvent2 = &IID_IRTCWatcherEvent2_Value;
pub const IRTCWatcherEvent2 = extern struct {
    pub const VTable = extern struct {
        base: IRTCWatcherEvent.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCWatcherEvent2,
            p_event_type: ?*RTC_WATCHER_EVENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCWatcherEvent2,
            pl_status_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRTCWatcherEvent.MethodMixin(T);
            pub inline fn getEventType(self: *const T, p_event_type_: ?*RTC_WATCHER_EVENT_TYPE) HRESULT {
                return @as(*const IRTCWatcherEvent2.VTable, @ptrCast(self.vtable)).get_EventType(@as(*const IRTCWatcherEvent2, @ptrCast(self)), p_event_type_);
            }
            pub inline fn getStatusCode(self: *const T, pl_status_code_: ?*i32) HRESULT {
                return @as(*const IRTCWatcherEvent2.VTable, @ptrCast(self.vtable)).get_StatusCode(@as(*const IRTCWatcherEvent2, @ptrCast(self)), pl_status_code_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCBuddyGroupEvent_Value = Guid.initString("3a79e1d1-b736-4414-96f8-bbc7f08863e4");
pub const IID_IRTCBuddyGroupEvent = &IID_IRTCBuddyGroupEvent_Value;
pub const IRTCBuddyGroupEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_EventType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddyGroupEvent,
            p_event_type: ?*RTC_GROUP_EVENT_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Group: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddyGroupEvent,
            pp_group: ?*?*IRTCBuddyGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Buddy: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddyGroupEvent,
            pp_buddy: ?*?*IRTCBuddy2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddyGroupEvent,
            pl_status_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getEventType(self: *const T, p_event_type_: ?*RTC_GROUP_EVENT_TYPE) HRESULT {
                return @as(*const IRTCBuddyGroupEvent.VTable, @ptrCast(self.vtable)).get_EventType(@as(*const IRTCBuddyGroupEvent, @ptrCast(self)), p_event_type_);
            }
            pub inline fn getGroup(self: *const T, pp_group_: ?*?*IRTCBuddyGroup) HRESULT {
                return @as(*const IRTCBuddyGroupEvent.VTable, @ptrCast(self.vtable)).get_Group(@as(*const IRTCBuddyGroupEvent, @ptrCast(self)), pp_group_);
            }
            pub inline fn getBuddy(self: *const T, pp_buddy_: ?*?*IRTCBuddy2) HRESULT {
                return @as(*const IRTCBuddyGroupEvent.VTable, @ptrCast(self.vtable)).get_Buddy(@as(*const IRTCBuddyGroupEvent, @ptrCast(self)), pp_buddy_);
            }
            pub inline fn getStatusCode(self: *const T, pl_status_code_: ?*i32) HRESULT {
                return @as(*const IRTCBuddyGroupEvent.VTable, @ptrCast(self.vtable)).get_StatusCode(@as(*const IRTCBuddyGroupEvent, @ptrCast(self)), pl_status_code_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCInfoEvent_Value = Guid.initString("4e1d68ae-1912-4f49-b2c3-594fadfd425f");
pub const IID_IRTCInfoEvent = &IID_IRTCInfoEvent_Value;
pub const IRTCInfoEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Session: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCInfoEvent,
            pp_session: ?*?*IRTCSession2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Participant: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCInfoEvent,
            pp_participant: ?*?*IRTCParticipant,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Info: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCInfoEvent,
            pbstr_info: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_InfoHeader: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCInfoEvent,
            pbstr_info_header: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSession(self: *const T, pp_session_: ?*?*IRTCSession2) HRESULT {
                return @as(*const IRTCInfoEvent.VTable, @ptrCast(self.vtable)).get_Session(@as(*const IRTCInfoEvent, @ptrCast(self)), pp_session_);
            }
            pub inline fn getParticipant(self: *const T, pp_participant_: ?*?*IRTCParticipant) HRESULT {
                return @as(*const IRTCInfoEvent.VTable, @ptrCast(self.vtable)).get_Participant(@as(*const IRTCInfoEvent, @ptrCast(self)), pp_participant_);
            }
            pub inline fn getInfo(self: *const T, pbstr_info_: ?*?BSTR) HRESULT {
                return @as(*const IRTCInfoEvent.VTable, @ptrCast(self.vtable)).get_Info(@as(*const IRTCInfoEvent, @ptrCast(self)), pbstr_info_);
            }
            pub inline fn getInfoHeader(self: *const T, pbstr_info_header_: ?*?BSTR) HRESULT {
                return @as(*const IRTCInfoEvent.VTable, @ptrCast(self.vtable)).get_InfoHeader(@as(*const IRTCInfoEvent, @ptrCast(self)), pbstr_info_header_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCMediaRequestEvent_Value = Guid.initString("52572d15-148c-4d97-a36c-2da55c289d63");
pub const IID_IRTCMediaRequestEvent = &IID_IRTCMediaRequestEvent_Value;
pub const IRTCMediaRequestEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Session: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCMediaRequestEvent,
            pp_session: ?*?*IRTCSession2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ProposedMedia: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCMediaRequestEvent,
            pl_media_types: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_CurrentMedia: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCMediaRequestEvent,
            pl_media_types: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Accept: *const fn (
            self: *const IRTCMediaRequestEvent,
            l_media_types: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemotePreferredSecurityLevel: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCMediaRequestEvent,
            en_security_type: RTC_SECURITY_TYPE,
            pen_security_level: ?*RTC_SECURITY_LEVEL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reject: *const fn (
            self: *const IRTCMediaRequestEvent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCMediaRequestEvent,
            p_state: ?*RTC_REINVITE_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSession(self: *const T, pp_session_: ?*?*IRTCSession2) HRESULT {
                return @as(*const IRTCMediaRequestEvent.VTable, @ptrCast(self.vtable)).get_Session(@as(*const IRTCMediaRequestEvent, @ptrCast(self)), pp_session_);
            }
            pub inline fn getProposedMedia(self: *const T, pl_media_types_: ?*i32) HRESULT {
                return @as(*const IRTCMediaRequestEvent.VTable, @ptrCast(self.vtable)).get_ProposedMedia(@as(*const IRTCMediaRequestEvent, @ptrCast(self)), pl_media_types_);
            }
            pub inline fn getCurrentMedia(self: *const T, pl_media_types_: ?*i32) HRESULT {
                return @as(*const IRTCMediaRequestEvent.VTable, @ptrCast(self.vtable)).get_CurrentMedia(@as(*const IRTCMediaRequestEvent, @ptrCast(self)), pl_media_types_);
            }
            pub inline fn accept(self: *const T, l_media_types_: i32) HRESULT {
                return @as(*const IRTCMediaRequestEvent.VTable, @ptrCast(self.vtable)).Accept(@as(*const IRTCMediaRequestEvent, @ptrCast(self)), l_media_types_);
            }
            pub inline fn getRemotePreferredSecurityLevel(self: *const T, en_security_type_: RTC_SECURITY_TYPE, pen_security_level_: ?*RTC_SECURITY_LEVEL) HRESULT {
                return @as(*const IRTCMediaRequestEvent.VTable, @ptrCast(self.vtable)).get_RemotePreferredSecurityLevel(@as(*const IRTCMediaRequestEvent, @ptrCast(self)), en_security_type_, pen_security_level_);
            }
            pub inline fn reject(self: *const T) HRESULT {
                return @as(*const IRTCMediaRequestEvent.VTable, @ptrCast(self.vtable)).Reject(@as(*const IRTCMediaRequestEvent, @ptrCast(self)));
            }
            pub inline fn getState(self: *const T, p_state_: ?*RTC_REINVITE_STATE) HRESULT {
                return @as(*const IRTCMediaRequestEvent.VTable, @ptrCast(self.vtable)).get_State(@as(*const IRTCMediaRequestEvent, @ptrCast(self)), p_state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCReInviteEvent_Value = Guid.initString("11558d84-204c-43e7-99b0-2034e9417f7d");
pub const IID_IRTCReInviteEvent = &IID_IRTCReInviteEvent_Value;
pub const IRTCReInviteEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Session: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCReInviteEvent,
            pp_session2: ?*?*IRTCSession2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Accept: *const fn (
            self: *const IRTCReInviteEvent,
            bstr_content_type: ?BSTR,
            bstr_session_description: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reject: *const fn (
            self: *const IRTCReInviteEvent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCReInviteEvent,
            p_state: ?*RTC_REINVITE_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetRemoteSessionDescription: *const fn (
            self: *const IRTCReInviteEvent,
            pbstr_content_type: ?*?BSTR,
            pbstr_session_description: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSession(self: *const T, pp_session2_: ?*?*IRTCSession2) HRESULT {
                return @as(*const IRTCReInviteEvent.VTable, @ptrCast(self.vtable)).get_Session(@as(*const IRTCReInviteEvent, @ptrCast(self)), pp_session2_);
            }
            pub inline fn accept(self: *const T, bstr_content_type_: ?BSTR, bstr_session_description_: ?BSTR) HRESULT {
                return @as(*const IRTCReInviteEvent.VTable, @ptrCast(self.vtable)).Accept(@as(*const IRTCReInviteEvent, @ptrCast(self)), bstr_content_type_, bstr_session_description_);
            }
            pub inline fn reject(self: *const T) HRESULT {
                return @as(*const IRTCReInviteEvent.VTable, @ptrCast(self.vtable)).Reject(@as(*const IRTCReInviteEvent, @ptrCast(self)));
            }
            pub inline fn getState(self: *const T, p_state_: ?*RTC_REINVITE_STATE) HRESULT {
                return @as(*const IRTCReInviteEvent.VTable, @ptrCast(self.vtable)).get_State(@as(*const IRTCReInviteEvent, @ptrCast(self)), p_state_);
            }
            pub inline fn getRemoteSessionDescription(self: *const T, pbstr_content_type_: ?*?BSTR, pbstr_session_description_: ?*?BSTR) HRESULT {
                return @as(*const IRTCReInviteEvent.VTable, @ptrCast(self.vtable)).GetRemoteSessionDescription(@as(*const IRTCReInviteEvent, @ptrCast(self)), pbstr_content_type_, pbstr_session_description_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCPresencePropertyEvent_Value = Guid.initString("f777f570-a820-49d5-86bd-e099493f1518");
pub const IID_IRTCPresencePropertyEvent = &IID_IRTCPresencePropertyEvent_Value;
pub const IRTCPresencePropertyEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCPresencePropertyEvent,
            pl_status_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCPresencePropertyEvent,
            pbstr_status_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PresenceProperty: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCPresencePropertyEvent,
            pen_pres_prop: ?*RTC_PRESENCE_PROPERTY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCPresencePropertyEvent,
            pbstr_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getStatusCode(self: *const T, pl_status_code_: ?*i32) HRESULT {
                return @as(*const IRTCPresencePropertyEvent.VTable, @ptrCast(self.vtable)).get_StatusCode(@as(*const IRTCPresencePropertyEvent, @ptrCast(self)), pl_status_code_);
            }
            pub inline fn getStatusText(self: *const T, pbstr_status_text_: ?*?BSTR) HRESULT {
                return @as(*const IRTCPresencePropertyEvent.VTable, @ptrCast(self.vtable)).get_StatusText(@as(*const IRTCPresencePropertyEvent, @ptrCast(self)), pbstr_status_text_);
            }
            pub inline fn getPresenceProperty(self: *const T, pen_pres_prop_: ?*RTC_PRESENCE_PROPERTY) HRESULT {
                return @as(*const IRTCPresencePropertyEvent.VTable, @ptrCast(self.vtable)).get_PresenceProperty(@as(*const IRTCPresencePropertyEvent, @ptrCast(self)), pen_pres_prop_);
            }
            pub inline fn getValue(self: *const T, pbstr_value_: ?*?BSTR) HRESULT {
                return @as(*const IRTCPresencePropertyEvent.VTable, @ptrCast(self.vtable)).get_Value(@as(*const IRTCPresencePropertyEvent, @ptrCast(self)), pbstr_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCPresenceDataEvent_Value = Guid.initString("38f0e78c-8b87-4c04-a82d-aedd83c909bb");
pub const IID_IRTCPresenceDataEvent = &IID_IRTCPresenceDataEvent_Value;
pub const IRTCPresenceDataEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCPresenceDataEvent,
            pl_status_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCPresenceDataEvent,
            pbstr_status_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPresenceData: *const fn (
            self: *const IRTCPresenceDataEvent,
            pbstr_namespace: ?*?BSTR,
            pbstr_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getStatusCode(self: *const T, pl_status_code_: ?*i32) HRESULT {
                return @as(*const IRTCPresenceDataEvent.VTable, @ptrCast(self.vtable)).get_StatusCode(@as(*const IRTCPresenceDataEvent, @ptrCast(self)), pl_status_code_);
            }
            pub inline fn getStatusText(self: *const T, pbstr_status_text_: ?*?BSTR) HRESULT {
                return @as(*const IRTCPresenceDataEvent.VTable, @ptrCast(self.vtable)).get_StatusText(@as(*const IRTCPresenceDataEvent, @ptrCast(self)), pbstr_status_text_);
            }
            pub inline fn getPresenceData(self: *const T, pbstr_namespace_: ?*?BSTR, pbstr_data_: ?*?BSTR) HRESULT {
                return @as(*const IRTCPresenceDataEvent.VTable, @ptrCast(self.vtable)).GetPresenceData(@as(*const IRTCPresenceDataEvent, @ptrCast(self)), pbstr_namespace_, pbstr_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCPresenceStatusEvent_Value = Guid.initString("78673f32-4a0f-462c-89aa-ee7706707678");
pub const IID_IRTCPresenceStatusEvent = &IID_IRTCPresenceStatusEvent_Value;
pub const IRTCPresenceStatusEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCPresenceStatusEvent,
            pl_status_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCPresenceStatusEvent,
            pbstr_status_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLocalPresenceInfo: *const fn (
            self: *const IRTCPresenceStatusEvent,
            pen_status: ?*RTC_PRESENCE_STATUS,
            pbstr_notes: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getStatusCode(self: *const T, pl_status_code_: ?*i32) HRESULT {
                return @as(*const IRTCPresenceStatusEvent.VTable, @ptrCast(self.vtable)).get_StatusCode(@as(*const IRTCPresenceStatusEvent, @ptrCast(self)), pl_status_code_);
            }
            pub inline fn getStatusText(self: *const T, pbstr_status_text_: ?*?BSTR) HRESULT {
                return @as(*const IRTCPresenceStatusEvent.VTable, @ptrCast(self.vtable)).get_StatusText(@as(*const IRTCPresenceStatusEvent, @ptrCast(self)), pbstr_status_text_);
            }
            pub inline fn getLocalPresenceInfo(self: *const T, pen_status_: ?*RTC_PRESENCE_STATUS, pbstr_notes_: ?*?BSTR) HRESULT {
                return @as(*const IRTCPresenceStatusEvent.VTable, @ptrCast(self.vtable)).GetLocalPresenceInfo(@as(*const IRTCPresenceStatusEvent, @ptrCast(self)), pen_status_, pbstr_notes_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCCollection_Value = Guid.initString("ec7c8096-b918-4044-94f1-e4fba0361d5c");
pub const IID_IRTCCollection = &IID_IRTCCollection_Value;
pub const IRTCCollection = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCCollection,
            l_count: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Item: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCCollection,
            index: i32,
            p_variant: ?*VARIANT,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get__NewEnum: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCCollection,
            pp_new_enum: ?*?*IUnknown,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCount(self: *const T, l_count_: ?*i32) HRESULT {
                return @as(*const IRTCCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IRTCCollection, @ptrCast(self)), l_count_);
            }
            pub inline fn getItem(self: *const T, index_: i32, p_variant_: ?*VARIANT) HRESULT {
                return @as(*const IRTCCollection.VTable, @ptrCast(self.vtable)).get_Item(@as(*const IRTCCollection, @ptrCast(self)), index_, p_variant_);
            }
            pub inline fn getNewEnum(self: *const T, pp_new_enum_: ?*?*IUnknown) HRESULT {
                return @as(*const IRTCCollection.VTable, @ptrCast(self.vtable)).get__NewEnum(@as(*const IRTCCollection, @ptrCast(self)), pp_new_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCEnumParticipants_Value = Guid.initString("fcd56f29-4a4f-41b2-ba5c-f5bccc060bf6");
pub const IID_IRTCEnumParticipants = &IID_IRTCEnumParticipants_Value;
pub const IRTCEnumParticipants = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IRTCEnumParticipants,
            celt: u32,
            pp_elements: [*]?*IRTCParticipant,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IRTCEnumParticipants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IRTCEnumParticipants,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IRTCEnumParticipants,
            pp_enum: ?*?*IRTCEnumParticipants,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: [*]?*IRTCParticipant, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IRTCEnumParticipants.VTable, @ptrCast(self.vtable)).Next(@as(*const IRTCEnumParticipants, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IRTCEnumParticipants.VTable, @ptrCast(self.vtable)).Reset(@as(*const IRTCEnumParticipants, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IRTCEnumParticipants.VTable, @ptrCast(self.vtable)).Skip(@as(*const IRTCEnumParticipants, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IRTCEnumParticipants) HRESULT {
                return @as(*const IRTCEnumParticipants.VTable, @ptrCast(self.vtable)).Clone(@as(*const IRTCEnumParticipants, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCEnumProfiles_Value = Guid.initString("29b7c41c-ed82-4bca-84ad-39d5101b58e3");
pub const IID_IRTCEnumProfiles = &IID_IRTCEnumProfiles_Value;
pub const IRTCEnumProfiles = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IRTCEnumProfiles,
            celt: u32,
            pp_elements: [*]?*IRTCProfile,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IRTCEnumProfiles,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IRTCEnumProfiles,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IRTCEnumProfiles,
            pp_enum: ?*?*IRTCEnumProfiles,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: [*]?*IRTCProfile, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IRTCEnumProfiles.VTable, @ptrCast(self.vtable)).Next(@as(*const IRTCEnumProfiles, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IRTCEnumProfiles.VTable, @ptrCast(self.vtable)).Reset(@as(*const IRTCEnumProfiles, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IRTCEnumProfiles.VTable, @ptrCast(self.vtable)).Skip(@as(*const IRTCEnumProfiles, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IRTCEnumProfiles) HRESULT {
                return @as(*const IRTCEnumProfiles.VTable, @ptrCast(self.vtable)).Clone(@as(*const IRTCEnumProfiles, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCEnumBuddies_Value = Guid.initString("f7296917-5569-4b3b-b3af-98d1144b2b87");
pub const IID_IRTCEnumBuddies = &IID_IRTCEnumBuddies_Value;
pub const IRTCEnumBuddies = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IRTCEnumBuddies,
            celt: u32,
            pp_elements: [*]?*IRTCBuddy,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IRTCEnumBuddies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IRTCEnumBuddies,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IRTCEnumBuddies,
            pp_enum: ?*?*IRTCEnumBuddies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: [*]?*IRTCBuddy, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IRTCEnumBuddies.VTable, @ptrCast(self.vtable)).Next(@as(*const IRTCEnumBuddies, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IRTCEnumBuddies.VTable, @ptrCast(self.vtable)).Reset(@as(*const IRTCEnumBuddies, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IRTCEnumBuddies.VTable, @ptrCast(self.vtable)).Skip(@as(*const IRTCEnumBuddies, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IRTCEnumBuddies) HRESULT {
                return @as(*const IRTCEnumBuddies.VTable, @ptrCast(self.vtable)).Clone(@as(*const IRTCEnumBuddies, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCEnumWatchers_Value = Guid.initString("a87d55d7-db74-4ed1-9ca4-77a0e41b413e");
pub const IID_IRTCEnumWatchers = &IID_IRTCEnumWatchers_Value;
pub const IRTCEnumWatchers = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IRTCEnumWatchers,
            celt: u32,
            pp_elements: [*]?*IRTCWatcher,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IRTCEnumWatchers,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IRTCEnumWatchers,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IRTCEnumWatchers,
            pp_enum: ?*?*IRTCEnumWatchers,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: [*]?*IRTCWatcher, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IRTCEnumWatchers.VTable, @ptrCast(self.vtable)).Next(@as(*const IRTCEnumWatchers, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IRTCEnumWatchers.VTable, @ptrCast(self.vtable)).Reset(@as(*const IRTCEnumWatchers, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IRTCEnumWatchers.VTable, @ptrCast(self.vtable)).Skip(@as(*const IRTCEnumWatchers, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IRTCEnumWatchers) HRESULT {
                return @as(*const IRTCEnumWatchers.VTable, @ptrCast(self.vtable)).Clone(@as(*const IRTCEnumWatchers, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCEnumGroups_Value = Guid.initString("742378d6-a141-4415-8f27-35d99076cf5d");
pub const IID_IRTCEnumGroups = &IID_IRTCEnumGroups_Value;
pub const IRTCEnumGroups = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IRTCEnumGroups,
            celt: u32,
            pp_elements: [*]?*IRTCBuddyGroup,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IRTCEnumGroups,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IRTCEnumGroups,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IRTCEnumGroups,
            pp_enum: ?*?*IRTCEnumGroups,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: [*]?*IRTCBuddyGroup, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IRTCEnumGroups.VTable, @ptrCast(self.vtable)).Next(@as(*const IRTCEnumGroups, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IRTCEnumGroups.VTable, @ptrCast(self.vtable)).Reset(@as(*const IRTCEnumGroups, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IRTCEnumGroups.VTable, @ptrCast(self.vtable)).Skip(@as(*const IRTCEnumGroups, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IRTCEnumGroups) HRESULT {
                return @as(*const IRTCEnumGroups.VTable, @ptrCast(self.vtable)).Clone(@as(*const IRTCEnumGroups, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCPresenceContact_Value = Guid.initString("8b22f92c-cd90-42db-a733-212205c3e3df");
pub const IID_IRTCPresenceContact = &IID_IRTCPresenceContact_Value;
pub const IRTCPresenceContact = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PresentityURI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCPresenceContact,
            pbstr_presentity_u_r_i: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_PresentityURI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCPresenceContact,
            bstr_presentity_u_r_i: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCPresenceContact,
            pbstr_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCPresenceContact,
            bstr_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Data: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCPresenceContact,
            pbstr_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Data: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCPresenceContact,
            bstr_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Persistent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCPresenceContact,
            pf_persistent: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Persistent: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCPresenceContact,
            f_persistent: i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getPresentityURI(self: *const T, pbstr_presentity_u_r_i_: ?*?BSTR) HRESULT {
                return @as(*const IRTCPresenceContact.VTable, @ptrCast(self.vtable)).get_PresentityURI(@as(*const IRTCPresenceContact, @ptrCast(self)), pbstr_presentity_u_r_i_);
            }
            pub inline fn putPresentityURI(self: *const T, bstr_presentity_u_r_i_: ?BSTR) HRESULT {
                return @as(*const IRTCPresenceContact.VTable, @ptrCast(self.vtable)).put_PresentityURI(@as(*const IRTCPresenceContact, @ptrCast(self)), bstr_presentity_u_r_i_);
            }
            pub inline fn getName(self: *const T, pbstr_name_: ?*?BSTR) HRESULT {
                return @as(*const IRTCPresenceContact.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IRTCPresenceContact, @ptrCast(self)), pbstr_name_);
            }
            pub inline fn putName(self: *const T, bstr_name_: ?BSTR) HRESULT {
                return @as(*const IRTCPresenceContact.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IRTCPresenceContact, @ptrCast(self)), bstr_name_);
            }
            pub inline fn getData(self: *const T, pbstr_data_: ?*?BSTR) HRESULT {
                return @as(*const IRTCPresenceContact.VTable, @ptrCast(self.vtable)).get_Data(@as(*const IRTCPresenceContact, @ptrCast(self)), pbstr_data_);
            }
            pub inline fn putData(self: *const T, bstr_data_: ?BSTR) HRESULT {
                return @as(*const IRTCPresenceContact.VTable, @ptrCast(self.vtable)).put_Data(@as(*const IRTCPresenceContact, @ptrCast(self)), bstr_data_);
            }
            pub inline fn getPersistent(self: *const T, pf_persistent_: ?*i16) HRESULT {
                return @as(*const IRTCPresenceContact.VTable, @ptrCast(self.vtable)).get_Persistent(@as(*const IRTCPresenceContact, @ptrCast(self)), pf_persistent_);
            }
            pub inline fn putPersistent(self: *const T, f_persistent_: i16) HRESULT {
                return @as(*const IRTCPresenceContact.VTable, @ptrCast(self.vtable)).put_Persistent(@as(*const IRTCPresenceContact, @ptrCast(self)), f_persistent_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCBuddy_Value = Guid.initString("fcb136c8-7b90-4e0c-befe-56edf0ba6f1c");
pub const IID_IRTCBuddy = &IID_IRTCBuddy_Value;
pub const IRTCBuddy = extern struct {
    pub const VTable = extern struct {
        base: IRTCPresenceContact.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddy,
            pen_status: ?*RTC_PRESENCE_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Notes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddy,
            pbstr_notes: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRTCPresenceContact.MethodMixin(T);
            pub inline fn getStatus(self: *const T, pen_status_: ?*RTC_PRESENCE_STATUS) HRESULT {
                return @as(*const IRTCBuddy.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IRTCBuddy, @ptrCast(self)), pen_status_);
            }
            pub inline fn getNotes(self: *const T, pbstr_notes_: ?*?BSTR) HRESULT {
                return @as(*const IRTCBuddy.VTable, @ptrCast(self.vtable)).get_Notes(@as(*const IRTCBuddy, @ptrCast(self)), pbstr_notes_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCBuddy2_Value = Guid.initString("102f9588-23e7-40e3-954d-cd7a1d5c0361");
pub const IID_IRTCBuddy2 = &IID_IRTCBuddy2_Value;
pub const IRTCBuddy2 = extern struct {
    pub const VTable = extern struct {
        base: IRTCBuddy.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Profile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddy2,
            pp_profile: ?*?*IRTCProfile2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Refresh: *const fn (
            self: *const IRTCBuddy2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateGroups: *const fn (
            self: *const IRTCBuddy2,
            pp_enum: ?*?*IRTCEnumGroups,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Groups: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddy2,
            pp_collection: ?*?*IRTCCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PresenceProperty: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddy2,
            en_property: RTC_PRESENCE_PROPERTY,
            pbstr_property: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumeratePresenceDevices: *const fn (
            self: *const IRTCBuddy2,
            pp_enum_devices: ?*?*IRTCEnumPresenceDevices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PresenceDevices: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddy2,
            pp_devices_collection: ?*?*IRTCCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SubscriptionType: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddy2,
            pen_subscription_type: ?*RTC_BUDDY_SUBSCRIPTION_TYPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRTCBuddy.MethodMixin(T);
            pub inline fn getProfile(self: *const T, pp_profile_: ?*?*IRTCProfile2) HRESULT {
                return @as(*const IRTCBuddy2.VTable, @ptrCast(self.vtable)).get_Profile(@as(*const IRTCBuddy2, @ptrCast(self)), pp_profile_);
            }
            pub inline fn refresh(self: *const T) HRESULT {
                return @as(*const IRTCBuddy2.VTable, @ptrCast(self.vtable)).Refresh(@as(*const IRTCBuddy2, @ptrCast(self)));
            }
            pub inline fn enumerateGroups(self: *const T, pp_enum_: ?*?*IRTCEnumGroups) HRESULT {
                return @as(*const IRTCBuddy2.VTable, @ptrCast(self.vtable)).EnumerateGroups(@as(*const IRTCBuddy2, @ptrCast(self)), pp_enum_);
            }
            pub inline fn getGroups(self: *const T, pp_collection_: ?*?*IRTCCollection) HRESULT {
                return @as(*const IRTCBuddy2.VTable, @ptrCast(self.vtable)).get_Groups(@as(*const IRTCBuddy2, @ptrCast(self)), pp_collection_);
            }
            pub inline fn getPresenceProperty(self: *const T, en_property_: RTC_PRESENCE_PROPERTY, pbstr_property_: ?*?BSTR) HRESULT {
                return @as(*const IRTCBuddy2.VTable, @ptrCast(self.vtable)).get_PresenceProperty(@as(*const IRTCBuddy2, @ptrCast(self)), en_property_, pbstr_property_);
            }
            pub inline fn enumeratePresenceDevices(self: *const T, pp_enum_devices_: ?*?*IRTCEnumPresenceDevices) HRESULT {
                return @as(*const IRTCBuddy2.VTable, @ptrCast(self.vtable)).EnumeratePresenceDevices(@as(*const IRTCBuddy2, @ptrCast(self)), pp_enum_devices_);
            }
            pub inline fn getPresenceDevices(self: *const T, pp_devices_collection_: ?*?*IRTCCollection) HRESULT {
                return @as(*const IRTCBuddy2.VTable, @ptrCast(self.vtable)).get_PresenceDevices(@as(*const IRTCBuddy2, @ptrCast(self)), pp_devices_collection_);
            }
            pub inline fn getSubscriptionType(self: *const T, pen_subscription_type_: ?*RTC_BUDDY_SUBSCRIPTION_TYPE) HRESULT {
                return @as(*const IRTCBuddy2.VTable, @ptrCast(self.vtable)).get_SubscriptionType(@as(*const IRTCBuddy2, @ptrCast(self)), pen_subscription_type_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCWatcher_Value = Guid.initString("c7cedad8-346b-4d1b-ac02-a2088df9be4f");
pub const IID_IRTCWatcher = &IID_IRTCWatcher_Value;
pub const IRTCWatcher = extern struct {
    pub const VTable = extern struct {
        base: IRTCPresenceContact.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCWatcher,
            pen_state: ?*RTC_WATCHER_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_State: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCWatcher,
            en_state: RTC_WATCHER_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRTCPresenceContact.MethodMixin(T);
            pub inline fn getState(self: *const T, pen_state_: ?*RTC_WATCHER_STATE) HRESULT {
                return @as(*const IRTCWatcher.VTable, @ptrCast(self.vtable)).get_State(@as(*const IRTCWatcher, @ptrCast(self)), pen_state_);
            }
            pub inline fn putState(self: *const T, en_state_: RTC_WATCHER_STATE) HRESULT {
                return @as(*const IRTCWatcher.VTable, @ptrCast(self.vtable)).put_State(@as(*const IRTCWatcher, @ptrCast(self)), en_state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCWatcher2_Value = Guid.initString("d4d9967f-d011-4b1d-91e3-aba78f96393d");
pub const IID_IRTCWatcher2 = &IID_IRTCWatcher2_Value;
pub const IRTCWatcher2 = extern struct {
    pub const VTable = extern struct {
        base: IRTCWatcher.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Profile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCWatcher2,
            pp_profile: ?*?*IRTCProfile2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Scope: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCWatcher2,
            pen_scope: ?*RTC_ACE_SCOPE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IRTCWatcher.MethodMixin(T);
            pub inline fn getProfile(self: *const T, pp_profile_: ?*?*IRTCProfile2) HRESULT {
                return @as(*const IRTCWatcher2.VTable, @ptrCast(self.vtable)).get_Profile(@as(*const IRTCWatcher2, @ptrCast(self)), pp_profile_);
            }
            pub inline fn getScope(self: *const T, pen_scope_: ?*RTC_ACE_SCOPE) HRESULT {
                return @as(*const IRTCWatcher2.VTable, @ptrCast(self.vtable)).get_Scope(@as(*const IRTCWatcher2, @ptrCast(self)), pen_scope_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCBuddyGroup_Value = Guid.initString("60361e68-9164-4389-a4c6-d0b3925bda5e");
pub const IID_IRTCBuddyGroup = &IID_IRTCBuddyGroup_Value;
pub const IRTCBuddyGroup = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddyGroup,
            pbstr_group_name: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddyGroup,
            bstr_group_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AddBuddy: *const fn (
            self: *const IRTCBuddyGroup,
            p_buddy: ?*IRTCBuddy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        RemoveBuddy: *const fn (
            self: *const IRTCBuddyGroup,
            p_buddy: ?*IRTCBuddy,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        EnumerateBuddies: *const fn (
            self: *const IRTCBuddyGroup,
            pp_enum: ?*?*IRTCEnumBuddies,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Buddies: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddyGroup,
            pp_collection: ?*?*IRTCCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Data: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddyGroup,
            pbstr_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Data: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddyGroup,
            bstr_data: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Profile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCBuddyGroup,
            pp_profile: ?*?*IRTCProfile2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getName(self: *const T, pbstr_group_name_: ?*?BSTR) HRESULT {
                return @as(*const IRTCBuddyGroup.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IRTCBuddyGroup, @ptrCast(self)), pbstr_group_name_);
            }
            pub inline fn putName(self: *const T, bstr_group_name_: ?BSTR) HRESULT {
                return @as(*const IRTCBuddyGroup.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IRTCBuddyGroup, @ptrCast(self)), bstr_group_name_);
            }
            pub inline fn addBuddy(self: *const T, p_buddy_: ?*IRTCBuddy) HRESULT {
                return @as(*const IRTCBuddyGroup.VTable, @ptrCast(self.vtable)).AddBuddy(@as(*const IRTCBuddyGroup, @ptrCast(self)), p_buddy_);
            }
            pub inline fn removeBuddy(self: *const T, p_buddy_: ?*IRTCBuddy) HRESULT {
                return @as(*const IRTCBuddyGroup.VTable, @ptrCast(self.vtable)).RemoveBuddy(@as(*const IRTCBuddyGroup, @ptrCast(self)), p_buddy_);
            }
            pub inline fn enumerateBuddies(self: *const T, pp_enum_: ?*?*IRTCEnumBuddies) HRESULT {
                return @as(*const IRTCBuddyGroup.VTable, @ptrCast(self.vtable)).EnumerateBuddies(@as(*const IRTCBuddyGroup, @ptrCast(self)), pp_enum_);
            }
            pub inline fn getBuddies(self: *const T, pp_collection_: ?*?*IRTCCollection) HRESULT {
                return @as(*const IRTCBuddyGroup.VTable, @ptrCast(self.vtable)).get_Buddies(@as(*const IRTCBuddyGroup, @ptrCast(self)), pp_collection_);
            }
            pub inline fn getData(self: *const T, pbstr_data_: ?*?BSTR) HRESULT {
                return @as(*const IRTCBuddyGroup.VTable, @ptrCast(self.vtable)).get_Data(@as(*const IRTCBuddyGroup, @ptrCast(self)), pbstr_data_);
            }
            pub inline fn putData(self: *const T, bstr_data_: ?BSTR) HRESULT {
                return @as(*const IRTCBuddyGroup.VTable, @ptrCast(self.vtable)).put_Data(@as(*const IRTCBuddyGroup, @ptrCast(self)), bstr_data_);
            }
            pub inline fn getProfile(self: *const T, pp_profile_: ?*?*IRTCProfile2) HRESULT {
                return @as(*const IRTCBuddyGroup.VTable, @ptrCast(self.vtable)).get_Profile(@as(*const IRTCBuddyGroup, @ptrCast(self)), pp_profile_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCEventNotification_Value = Guid.initString("13fa24c7-5748-4b21-91f5-7397609ce747");
pub const IID_IRTCEventNotification = &IID_IRTCEventNotification_Value;
pub const IRTCEventNotification = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Event: *const fn (
            self: *const IRTCEventNotification,
            r_t_c_event: RTC_EVENT,
            p_event: ?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn event(self: *const T, r_t_c_event_: RTC_EVENT, p_event_: ?*IDispatch) HRESULT {
                return @as(*const IRTCEventNotification.VTable, @ptrCast(self.vtable)).Event(@as(*const IRTCEventNotification, @ptrCast(self)), r_t_c_event_, p_event_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCPortManager_Value = Guid.initString("da77c14b-6208-43ca-8ddf-5b60a0a69fac");
pub const IID_IRTCPortManager = &IID_IRTCPortManager_Value;
pub const IRTCPortManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetMapping: *const fn (
            self: *const IRTCPortManager,
            bstr_remote_address: ?BSTR,
            en_port_type: RTC_PORT_TYPE,
            pbstr_internal_local_address: ?*?BSTR,
            pl_internal_local_port: ?*i32,
            pbstr_external_local_address: ?*?BSTR,
            pl_external_local_port: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        UpdateRemoteAddress: *const fn (
            self: *const IRTCPortManager,
            bstr_remote_address: ?BSTR,
            bstr_internal_local_address: ?BSTR,
            l_internal_local_port: i32,
            bstr_external_local_address: ?BSTR,
            l_external_local_port: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ReleaseMapping: *const fn (
            self: *const IRTCPortManager,
            bstr_internal_local_address: ?BSTR,
            l_internal_local_port: i32,
            bstr_external_local_address: ?BSTR,
            l_external_local_address: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getMapping(self: *const T, bstr_remote_address_: ?BSTR, en_port_type_: RTC_PORT_TYPE, pbstr_internal_local_address_: ?*?BSTR, pl_internal_local_port_: ?*i32, pbstr_external_local_address_: ?*?BSTR, pl_external_local_port_: ?*i32) HRESULT {
                return @as(*const IRTCPortManager.VTable, @ptrCast(self.vtable)).GetMapping(@as(*const IRTCPortManager, @ptrCast(self)), bstr_remote_address_, en_port_type_, pbstr_internal_local_address_, pl_internal_local_port_, pbstr_external_local_address_, pl_external_local_port_);
            }
            pub inline fn updateRemoteAddress(self: *const T, bstr_remote_address_: ?BSTR, bstr_internal_local_address_: ?BSTR, l_internal_local_port_: i32, bstr_external_local_address_: ?BSTR, l_external_local_port_: i32) HRESULT {
                return @as(*const IRTCPortManager.VTable, @ptrCast(self.vtable)).UpdateRemoteAddress(@as(*const IRTCPortManager, @ptrCast(self)), bstr_remote_address_, bstr_internal_local_address_, l_internal_local_port_, bstr_external_local_address_, l_external_local_port_);
            }
            pub inline fn releaseMapping(self: *const T, bstr_internal_local_address_: ?BSTR, l_internal_local_port_: i32, bstr_external_local_address_: ?BSTR, l_external_local_address_: i32) HRESULT {
                return @as(*const IRTCPortManager.VTable, @ptrCast(self.vtable)).ReleaseMapping(@as(*const IRTCPortManager, @ptrCast(self)), bstr_internal_local_address_, l_internal_local_port_, bstr_external_local_address_, l_external_local_address_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCSessionPortManagement_Value = Guid.initString("a072f1d6-0286-4e1f-85f2-17a2948456ec");
pub const IID_IRTCSessionPortManagement = &IID_IRTCSessionPortManagement_Value;
pub const IRTCSessionPortManagement = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        SetPortManager: *const fn (
            self: *const IRTCSessionPortManagement,
            p_port_manager: ?*IRTCPortManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn setPortManager(self: *const T, p_port_manager_: ?*IRTCPortManager) HRESULT {
                return @as(*const IRTCSessionPortManagement.VTable, @ptrCast(self.vtable)).SetPortManager(@as(*const IRTCSessionPortManagement, @ptrCast(self)), p_port_manager_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCClientPortManagement_Value = Guid.initString("d5df3f03-4bde-4417-aefe-71177bdaea66");
pub const IID_IRTCClientPortManagement = &IID_IRTCClientPortManagement_Value;
pub const IRTCClientPortManagement = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        StartListenAddressAndPort: *const fn (
            self: *const IRTCClientPortManagement,
            bstr_internal_local_address: ?BSTR,
            l_internal_local_port: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        StopListenAddressAndPort: *const fn (
            self: *const IRTCClientPortManagement,
            bstr_internal_local_address: ?BSTR,
            l_internal_local_port: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPortRange: *const fn (
            self: *const IRTCClientPortManagement,
            en_port_type: RTC_PORT_TYPE,
            pl_min_value: ?*i32,
            pl_max_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn startListenAddressAndPort(self: *const T, bstr_internal_local_address_: ?BSTR, l_internal_local_port_: i32) HRESULT {
                return @as(*const IRTCClientPortManagement.VTable, @ptrCast(self.vtable)).StartListenAddressAndPort(@as(*const IRTCClientPortManagement, @ptrCast(self)), bstr_internal_local_address_, l_internal_local_port_);
            }
            pub inline fn stopListenAddressAndPort(self: *const T, bstr_internal_local_address_: ?BSTR, l_internal_local_port_: i32) HRESULT {
                return @as(*const IRTCClientPortManagement.VTable, @ptrCast(self.vtable)).StopListenAddressAndPort(@as(*const IRTCClientPortManagement, @ptrCast(self)), bstr_internal_local_address_, l_internal_local_port_);
            }
            pub inline fn getPortRange(self: *const T, en_port_type_: RTC_PORT_TYPE, pl_min_value_: ?*i32, pl_max_value_: ?*i32) HRESULT {
                return @as(*const IRTCClientPortManagement.VTable, @ptrCast(self.vtable)).GetPortRange(@as(*const IRTCClientPortManagement, @ptrCast(self)), en_port_type_, pl_min_value_, pl_max_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCUserSearch_Value = Guid.initString("b619882b-860c-4db4-be1b-693b6505bbe5");
pub const IID_IRTCUserSearch = &IID_IRTCUserSearch_Value;
pub const IRTCUserSearch = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CreateQuery: *const fn (
            self: *const IRTCUserSearch,
            pp_query: ?*?*IRTCUserSearchQuery,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExecuteSearch: *const fn (
            self: *const IRTCUserSearch,
            p_query: ?*IRTCUserSearchQuery,
            p_profile: ?*IRTCProfile,
            l_cookie: isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn createQuery(self: *const T, pp_query_: ?*?*IRTCUserSearchQuery) HRESULT {
                return @as(*const IRTCUserSearch.VTable, @ptrCast(self.vtable)).CreateQuery(@as(*const IRTCUserSearch, @ptrCast(self)), pp_query_);
            }
            pub inline fn executeSearch(self: *const T, p_query_: ?*IRTCUserSearchQuery, p_profile_: ?*IRTCProfile, l_cookie_: isize) HRESULT {
                return @as(*const IRTCUserSearch.VTable, @ptrCast(self.vtable)).ExecuteSearch(@as(*const IRTCUserSearch, @ptrCast(self)), p_query_, p_profile_, l_cookie_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCUserSearchQuery_Value = Guid.initString("288300f5-d23a-4365-9a73-9985c98c2881");
pub const IID_IRTCUserSearchQuery = &IID_IRTCUserSearchQuery_Value;
pub const IRTCUserSearchQuery = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SearchTerm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCUserSearchQuery,
            bstr_name: ?BSTR,
            bstr_value: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchTerm: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCUserSearchQuery,
            bstr_name: ?BSTR,
            pbstr_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchTerms: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCUserSearchQuery,
            pbstr_names: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SearchPreference: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCUserSearchQuery,
            en_preference: RTC_USER_SEARCH_PREFERENCE,
            l_value: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchPreference: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCUserSearchQuery,
            en_preference: RTC_USER_SEARCH_PREFERENCE,
            pl_value: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SearchDomain: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCUserSearchQuery,
            bstr_domain: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SearchDomain: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCUserSearchQuery,
            pbstr_domain: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn putSearchTerm(self: *const T, bstr_name_: ?BSTR, bstr_value_: ?BSTR) HRESULT {
                return @as(*const IRTCUserSearchQuery.VTable, @ptrCast(self.vtable)).put_SearchTerm(@as(*const IRTCUserSearchQuery, @ptrCast(self)), bstr_name_, bstr_value_);
            }
            pub inline fn getSearchTerm(self: *const T, bstr_name_: ?BSTR, pbstr_value_: ?*?BSTR) HRESULT {
                return @as(*const IRTCUserSearchQuery.VTable, @ptrCast(self.vtable)).get_SearchTerm(@as(*const IRTCUserSearchQuery, @ptrCast(self)), bstr_name_, pbstr_value_);
            }
            pub inline fn getSearchTerms(self: *const T, pbstr_names_: ?*?BSTR) HRESULT {
                return @as(*const IRTCUserSearchQuery.VTable, @ptrCast(self.vtable)).get_SearchTerms(@as(*const IRTCUserSearchQuery, @ptrCast(self)), pbstr_names_);
            }
            pub inline fn putSearchPreference(self: *const T, en_preference_: RTC_USER_SEARCH_PREFERENCE, l_value_: i32) HRESULT {
                return @as(*const IRTCUserSearchQuery.VTable, @ptrCast(self.vtable)).put_SearchPreference(@as(*const IRTCUserSearchQuery, @ptrCast(self)), en_preference_, l_value_);
            }
            pub inline fn getSearchPreference(self: *const T, en_preference_: RTC_USER_SEARCH_PREFERENCE, pl_value_: ?*i32) HRESULT {
                return @as(*const IRTCUserSearchQuery.VTable, @ptrCast(self.vtable)).get_SearchPreference(@as(*const IRTCUserSearchQuery, @ptrCast(self)), en_preference_, pl_value_);
            }
            pub inline fn putSearchDomain(self: *const T, bstr_domain_: ?BSTR) HRESULT {
                return @as(*const IRTCUserSearchQuery.VTable, @ptrCast(self.vtable)).put_SearchDomain(@as(*const IRTCUserSearchQuery, @ptrCast(self)), bstr_domain_);
            }
            pub inline fn getSearchDomain(self: *const T, pbstr_domain_: ?*?BSTR) HRESULT {
                return @as(*const IRTCUserSearchQuery.VTable, @ptrCast(self.vtable)).get_SearchDomain(@as(*const IRTCUserSearchQuery, @ptrCast(self)), pbstr_domain_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCUserSearchResult_Value = Guid.initString("851278b2-9592-480f-8db5-2de86b26b54d");
pub const IID_IRTCUserSearchResult = &IID_IRTCUserSearchResult_Value;
pub const IRTCUserSearchResult = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Value: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCUserSearchResult,
            en_column: RTC_USER_SEARCH_COLUMN,
            pbstr_value: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getValue(self: *const T, en_column_: RTC_USER_SEARCH_COLUMN, pbstr_value_: ?*?BSTR) HRESULT {
                return @as(*const IRTCUserSearchResult.VTable, @ptrCast(self.vtable)).get_Value(@as(*const IRTCUserSearchResult, @ptrCast(self)), en_column_, pbstr_value_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCEnumUserSearchResults_Value = Guid.initString("83d4d877-aa5d-4a5b-8d0e-002a8067e0e8");
pub const IID_IRTCEnumUserSearchResults = &IID_IRTCEnumUserSearchResults_Value;
pub const IRTCEnumUserSearchResults = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IRTCEnumUserSearchResults,
            celt: u32,
            pp_elements: [*]?*IRTCUserSearchResult,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IRTCEnumUserSearchResults,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IRTCEnumUserSearchResults,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IRTCEnumUserSearchResults,
            pp_enum: ?*?*IRTCEnumUserSearchResults,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: [*]?*IRTCUserSearchResult, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IRTCEnumUserSearchResults.VTable, @ptrCast(self.vtable)).Next(@as(*const IRTCEnumUserSearchResults, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IRTCEnumUserSearchResults.VTable, @ptrCast(self.vtable)).Reset(@as(*const IRTCEnumUserSearchResults, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IRTCEnumUserSearchResults.VTable, @ptrCast(self.vtable)).Skip(@as(*const IRTCEnumUserSearchResults, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IRTCEnumUserSearchResults) HRESULT {
                return @as(*const IRTCEnumUserSearchResults.VTable, @ptrCast(self.vtable)).Clone(@as(*const IRTCEnumUserSearchResults, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCUserSearchResultsEvent_Value = Guid.initString("d8c8c3cd-7fac-4088-81c5-c24cbc0938e3");
pub const IID_IRTCUserSearchResultsEvent = &IID_IRTCUserSearchResultsEvent_Value;
pub const IRTCUserSearchResultsEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        EnumerateResults: *const fn (
            self: *const IRTCUserSearchResultsEvent,
            pp_enum: ?*?*IRTCEnumUserSearchResults,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Results: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCUserSearchResultsEvent,
            pp_collection: ?*?*IRTCCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Profile: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCUserSearchResultsEvent,
            pp_profile: ?*?*IRTCProfile2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Query: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCUserSearchResultsEvent,
            pp_query: ?*?*IRTCUserSearchQuery,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Cookie: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCUserSearchResultsEvent,
            pl_cookie: ?*isize,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCUserSearchResultsEvent,
            pl_status_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MoreAvailable: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCUserSearchResultsEvent,
            pf_more_available: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn enumerateResults(self: *const T, pp_enum_: ?*?*IRTCEnumUserSearchResults) HRESULT {
                return @as(*const IRTCUserSearchResultsEvent.VTable, @ptrCast(self.vtable)).EnumerateResults(@as(*const IRTCUserSearchResultsEvent, @ptrCast(self)), pp_enum_);
            }
            pub inline fn getResults(self: *const T, pp_collection_: ?*?*IRTCCollection) HRESULT {
                return @as(*const IRTCUserSearchResultsEvent.VTable, @ptrCast(self.vtable)).get_Results(@as(*const IRTCUserSearchResultsEvent, @ptrCast(self)), pp_collection_);
            }
            pub inline fn getProfile(self: *const T, pp_profile_: ?*?*IRTCProfile2) HRESULT {
                return @as(*const IRTCUserSearchResultsEvent.VTable, @ptrCast(self.vtable)).get_Profile(@as(*const IRTCUserSearchResultsEvent, @ptrCast(self)), pp_profile_);
            }
            pub inline fn getQuery(self: *const T, pp_query_: ?*?*IRTCUserSearchQuery) HRESULT {
                return @as(*const IRTCUserSearchResultsEvent.VTable, @ptrCast(self.vtable)).get_Query(@as(*const IRTCUserSearchResultsEvent, @ptrCast(self)), pp_query_);
            }
            pub inline fn getCookie(self: *const T, pl_cookie_: ?*isize) HRESULT {
                return @as(*const IRTCUserSearchResultsEvent.VTable, @ptrCast(self.vtable)).get_Cookie(@as(*const IRTCUserSearchResultsEvent, @ptrCast(self)), pl_cookie_);
            }
            pub inline fn getStatusCode(self: *const T, pl_status_code_: ?*i32) HRESULT {
                return @as(*const IRTCUserSearchResultsEvent.VTable, @ptrCast(self.vtable)).get_StatusCode(@as(*const IRTCUserSearchResultsEvent, @ptrCast(self)), pl_status_code_);
            }
            pub inline fn getMoreAvailable(self: *const T, pf_more_available_: ?*i16) HRESULT {
                return @as(*const IRTCUserSearchResultsEvent.VTable, @ptrCast(self.vtable)).get_MoreAvailable(@as(*const IRTCUserSearchResultsEvent, @ptrCast(self)), pf_more_available_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCSessionReferStatusEvent_Value = Guid.initString("3d8fc2cd-5d76-44ab-bb68-2a80353b34a2");
pub const IID_IRTCSessionReferStatusEvent = &IID_IRTCSessionReferStatusEvent_Value;
pub const IRTCSessionReferStatusEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Session: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionReferStatusEvent,
            pp_session: ?*?*IRTCSession2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReferStatus: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionReferStatusEvent,
            pen_refer_status: ?*RTC_SESSION_REFER_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusCode: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionReferStatusEvent,
            pl_status_code: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_StatusText: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionReferStatusEvent,
            pbstr_status_text: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSession(self: *const T, pp_session_: ?*?*IRTCSession2) HRESULT {
                return @as(*const IRTCSessionReferStatusEvent.VTable, @ptrCast(self.vtable)).get_Session(@as(*const IRTCSessionReferStatusEvent, @ptrCast(self)), pp_session_);
            }
            pub inline fn getReferStatus(self: *const T, pen_refer_status_: ?*RTC_SESSION_REFER_STATUS) HRESULT {
                return @as(*const IRTCSessionReferStatusEvent.VTable, @ptrCast(self.vtable)).get_ReferStatus(@as(*const IRTCSessionReferStatusEvent, @ptrCast(self)), pen_refer_status_);
            }
            pub inline fn getStatusCode(self: *const T, pl_status_code_: ?*i32) HRESULT {
                return @as(*const IRTCSessionReferStatusEvent.VTable, @ptrCast(self.vtable)).get_StatusCode(@as(*const IRTCSessionReferStatusEvent, @ptrCast(self)), pl_status_code_);
            }
            pub inline fn getStatusText(self: *const T, pbstr_status_text_: ?*?BSTR) HRESULT {
                return @as(*const IRTCSessionReferStatusEvent.VTable, @ptrCast(self.vtable)).get_StatusText(@as(*const IRTCSessionReferStatusEvent, @ptrCast(self)), pbstr_status_text_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCSessionReferredEvent_Value = Guid.initString("176a6828-4fcc-4f28-a862-04597a6cf1c4");
pub const IID_IRTCSessionReferredEvent = &IID_IRTCSessionReferredEvent_Value;
pub const IRTCSessionReferredEvent = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Session: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionReferredEvent,
            pp_session: ?*?*IRTCSession2,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReferredByURI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionReferredEvent,
            pbstr_referred_by_u_r_i: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReferToURI: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionReferredEvent,
            pbstr_refero_u_r_i: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ReferCookie: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCSessionReferredEvent,
            pbstr_refer_cookie: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Accept: *const fn (
            self: *const IRTCSessionReferredEvent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reject: *const fn (
            self: *const IRTCSessionReferredEvent,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetReferredSessionState: *const fn (
            self: *const IRTCSessionReferredEvent,
            en_state: RTC_SESSION_STATE,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getSession(self: *const T, pp_session_: ?*?*IRTCSession2) HRESULT {
                return @as(*const IRTCSessionReferredEvent.VTable, @ptrCast(self.vtable)).get_Session(@as(*const IRTCSessionReferredEvent, @ptrCast(self)), pp_session_);
            }
            pub inline fn getReferredByURI(self: *const T, pbstr_referred_by_u_r_i_: ?*?BSTR) HRESULT {
                return @as(*const IRTCSessionReferredEvent.VTable, @ptrCast(self.vtable)).get_ReferredByURI(@as(*const IRTCSessionReferredEvent, @ptrCast(self)), pbstr_referred_by_u_r_i_);
            }
            pub inline fn getReferToURI(self: *const T, pbstr_refero_u_r_i_: ?*?BSTR) HRESULT {
                return @as(*const IRTCSessionReferredEvent.VTable, @ptrCast(self.vtable)).get_ReferToURI(@as(*const IRTCSessionReferredEvent, @ptrCast(self)), pbstr_refero_u_r_i_);
            }
            pub inline fn getReferCookie(self: *const T, pbstr_refer_cookie_: ?*?BSTR) HRESULT {
                return @as(*const IRTCSessionReferredEvent.VTable, @ptrCast(self.vtable)).get_ReferCookie(@as(*const IRTCSessionReferredEvent, @ptrCast(self)), pbstr_refer_cookie_);
            }
            pub inline fn accept(self: *const T) HRESULT {
                return @as(*const IRTCSessionReferredEvent.VTable, @ptrCast(self.vtable)).Accept(@as(*const IRTCSessionReferredEvent, @ptrCast(self)));
            }
            pub inline fn reject(self: *const T) HRESULT {
                return @as(*const IRTCSessionReferredEvent.VTable, @ptrCast(self.vtable)).Reject(@as(*const IRTCSessionReferredEvent, @ptrCast(self)));
            }
            pub inline fn setReferredSessionState(self: *const T, en_state_: RTC_SESSION_STATE) HRESULT {
                return @as(*const IRTCSessionReferredEvent.VTable, @ptrCast(self.vtable)).SetReferredSessionState(@as(*const IRTCSessionReferredEvent, @ptrCast(self)), en_state_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCSessionDescriptionManager_Value = Guid.initString("ba7f518e-d336-4070-93a6-865395c843f9");
pub const IID_IRTCSessionDescriptionManager = &IID_IRTCSessionDescriptionManager_Value;
pub const IRTCSessionDescriptionManager = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        EvaluateSessionDescription: *const fn (
            self: *const IRTCSessionDescriptionManager,
            bstr_content_type: ?BSTR,
            bstr_session_description: ?BSTR,
            pf_application_session: ?*i16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn evaluateSessionDescription(self: *const T, bstr_content_type_: ?BSTR, bstr_session_description_: ?BSTR, pf_application_session_: ?*i16) HRESULT {
                return @as(*const IRTCSessionDescriptionManager.VTable, @ptrCast(self.vtable)).EvaluateSessionDescription(@as(*const IRTCSessionDescriptionManager, @ptrCast(self)), bstr_content_type_, bstr_session_description_, pf_application_session_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCEnumPresenceDevices_Value = Guid.initString("708c2ab7-8bf8-42f8-8c7d-635197ad5539");
pub const IID_IRTCEnumPresenceDevices = &IID_IRTCEnumPresenceDevices_Value;
pub const IRTCEnumPresenceDevices = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Next: *const fn (
            self: *const IRTCEnumPresenceDevices,
            celt: u32,
            pp_elements: [*]?*IRTCPresenceDevice,
            pcelt_fetched: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Reset: *const fn (
            self: *const IRTCEnumPresenceDevices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Skip: *const fn (
            self: *const IRTCEnumPresenceDevices,
            celt: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Clone: *const fn (
            self: *const IRTCEnumPresenceDevices,
            pp_enum: ?*?*IRTCEnumPresenceDevices,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn next(self: *const T, celt_: u32, pp_elements_: [*]?*IRTCPresenceDevice, pcelt_fetched_: ?*u32) HRESULT {
                return @as(*const IRTCEnumPresenceDevices.VTable, @ptrCast(self.vtable)).Next(@as(*const IRTCEnumPresenceDevices, @ptrCast(self)), celt_, pp_elements_, pcelt_fetched_);
            }
            pub inline fn reset(self: *const T) HRESULT {
                return @as(*const IRTCEnumPresenceDevices.VTable, @ptrCast(self.vtable)).Reset(@as(*const IRTCEnumPresenceDevices, @ptrCast(self)));
            }
            pub inline fn skip(self: *const T, celt_: u32) HRESULT {
                return @as(*const IRTCEnumPresenceDevices.VTable, @ptrCast(self.vtable)).Skip(@as(*const IRTCEnumPresenceDevices, @ptrCast(self)), celt_);
            }
            pub inline fn clone(self: *const T, pp_enum_: ?*?*IRTCEnumPresenceDevices) HRESULT {
                return @as(*const IRTCEnumPresenceDevices.VTable, @ptrCast(self.vtable)).Clone(@as(*const IRTCEnumPresenceDevices, @ptrCast(self)), pp_enum_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCPresenceDevice_Value = Guid.initString("bc6a90dd-ad9a-48da-9b0c-2515e38521ad");
pub const IID_IRTCPresenceDevice = &IID_IRTCPresenceDevice_Value;
pub const IRTCPresenceDevice = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Status: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCPresenceDevice,
            pen_status: ?*RTC_PRESENCE_STATUS,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Notes: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCPresenceDevice,
            pbstr_notes: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_PresenceProperty: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const IRTCPresenceDevice,
            en_property: RTC_PRESENCE_PROPERTY,
            pbstr_property: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPresenceData: *const fn (
            self: *const IRTCPresenceDevice,
            pbstr_namespace: ?*?BSTR,
            pbstr_data: ?*?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn getStatus(self: *const T, pen_status_: ?*RTC_PRESENCE_STATUS) HRESULT {
                return @as(*const IRTCPresenceDevice.VTable, @ptrCast(self.vtable)).get_Status(@as(*const IRTCPresenceDevice, @ptrCast(self)), pen_status_);
            }
            pub inline fn getNotes(self: *const T, pbstr_notes_: ?*?BSTR) HRESULT {
                return @as(*const IRTCPresenceDevice.VTable, @ptrCast(self.vtable)).get_Notes(@as(*const IRTCPresenceDevice, @ptrCast(self)), pbstr_notes_);
            }
            pub inline fn getPresenceProperty(self: *const T, en_property_: RTC_PRESENCE_PROPERTY, pbstr_property_: ?*?BSTR) HRESULT {
                return @as(*const IRTCPresenceDevice.VTable, @ptrCast(self.vtable)).get_PresenceProperty(@as(*const IRTCPresenceDevice, @ptrCast(self)), en_property_, pbstr_property_);
            }
            pub inline fn getPresenceData(self: *const T, pbstr_namespace_: ?*?BSTR, pbstr_data_: ?*?BSTR) HRESULT {
                return @as(*const IRTCPresenceDevice.VTable, @ptrCast(self.vtable)).GetPresenceData(@as(*const IRTCPresenceDevice, @ptrCast(self)), pbstr_namespace_, pbstr_data_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRTCDispatchEventNotification_Value = Guid.initString("176ddfbe-fec0-4d55-bc87-84cff1ef7f91");
pub const IID_IRTCDispatchEventNotification = &IID_IRTCDispatchEventNotification_Value;
pub const IRTCDispatchEventNotification = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const TRANSPORT_SETTING = extern struct {
    SettingId: TRANSPORT_SETTING_ID,
    Length: ?*u32,
    Value: ?*u8,
};

const IID_ITransportSettingsInternal_Value = Guid.initString("5123e076-29e3-4bfd-84fe-0192d411e3e8");
pub const IID_ITransportSettingsInternal = &IID_ITransportSettingsInternal_Value;
pub const ITransportSettingsInternal = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ApplySetting: *const fn (
            self: *const ITransportSettingsInternal,
            setting: ?*TRANSPORT_SETTING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QuerySetting: *const fn (
            self: *const ITransportSettingsInternal,
            setting: ?*TRANSPORT_SETTING,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn applySetting(self: *const T, setting_: ?*TRANSPORT_SETTING) HRESULT {
                return @as(*const ITransportSettingsInternal.VTable, @ptrCast(self.vtable)).ApplySetting(@as(*const ITransportSettingsInternal, @ptrCast(self)), setting_);
            }
            pub inline fn querySetting(self: *const T, setting_: ?*TRANSPORT_SETTING) HRESULT {
                return @as(*const ITransportSettingsInternal.VTable, @ptrCast(self.vtable)).QuerySetting(@as(*const ITransportSettingsInternal, @ptrCast(self)), setting_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_INetworkTransportSettings_Value = Guid.initString("5e7abb2c-f2c1-4a61-bd35-deb7a08ab0f1");
pub const IID_INetworkTransportSettings = &IID_INetworkTransportSettings_Value;
pub const INetworkTransportSettings = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        ApplySetting: *const fn (
            self: *const INetworkTransportSettings,
            setting_id: ?*const TRANSPORT_SETTING_ID,
            length_in: u32,
            value_in: [*:0]const u8,
            length_out: ?*u32,
            value_out: [*]?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        QuerySetting: *const fn (
            self: *const INetworkTransportSettings,
            setting_id: ?*const TRANSPORT_SETTING_ID,
            length_in: u32,
            value_in: [*:0]const u8,
            length_out: ?*u32,
            value_out: [*]?*u8,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn applySetting(self: *const T, setting_id_: ?*const TRANSPORT_SETTING_ID, length_in_: u32, value_in_: [*:0]const u8, length_out_: ?*u32, value_out_: [*]?*u8) HRESULT {
                return @as(*const INetworkTransportSettings.VTable, @ptrCast(self.vtable)).ApplySetting(@as(*const INetworkTransportSettings, @ptrCast(self)), setting_id_, length_in_, value_in_, length_out_, value_out_);
            }
            pub inline fn querySetting(self: *const T, setting_id_: ?*const TRANSPORT_SETTING_ID, length_in_: u32, value_in_: [*:0]const u8, length_out_: ?*u32, value_out_: [*]?*u8) HRESULT {
                return @as(*const INetworkTransportSettings.VTable, @ptrCast(self.vtable)).QuerySetting(@as(*const INetworkTransportSettings, @ptrCast(self)), setting_id_, length_in_, value_in_, length_out_, value_out_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_INotificationTransportSync_Value = Guid.initString("79eb1402-0ab8-49c0-9e14-a1ae4ba93058");
pub const IID_INotificationTransportSync = &IID_INotificationTransportSync_Value;
pub const INotificationTransportSync = extern struct {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        CompleteDelivery: *const fn (
            self: *const INotificationTransportSync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Flush: *const fn (
            self: *const INotificationTransportSync,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IUnknown.MethodMixin(T);
            pub inline fn completeDelivery(self: *const T) HRESULT {
                return @as(*const INotificationTransportSync.VTable, @ptrCast(self.vtable)).CompleteDelivery(@as(*const INotificationTransportSync, @ptrCast(self)));
            }
            pub inline fn flush(self: *const T) HRESULT {
                return @as(*const INotificationTransportSync.VTable, @ptrCast(self.vtable)).Flush(@as(*const INotificationTransportSync, @ptrCast(self)));
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (8)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BSTR = @import("../foundation.zig").BSTR;
const HRESULT = @import("../foundation.zig").HRESULT;
const IDispatch = @import("../system/com.zig").IDispatch;
const IUnknown = @import("../system/com.zig").IUnknown;
const IVideoWindow = @import("../media/direct_show.zig").IVideoWindow;
const TRANSPORT_SETTING_ID = @import("../networking/win_sock.zig").TRANSPORT_SETTING_ID;
const VARIANT = @import("../system/com.zig").VARIANT;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
