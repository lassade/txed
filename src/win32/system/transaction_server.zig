//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Types (15)
//--------------------------------------------------------------------------------
const CLSID_Catalog_Value = Guid.initString("6eb22881-8a19-11d0-81b6-00a0c9231c29");
pub const CLSID_Catalog = &CLSID_Catalog_Value;

const CLSID_CatalogObject_Value = Guid.initString("6eb22882-8a19-11d0-81b6-00a0c9231c29");
pub const CLSID_CatalogObject = &CLSID_CatalogObject_Value;

const CLSID_CatalogCollection_Value = Guid.initString("6eb22883-8a19-11d0-81b6-00a0c9231c29");
pub const CLSID_CatalogCollection = &CLSID_CatalogCollection_Value;

const CLSID_ComponentUtil_Value = Guid.initString("6eb22884-8a19-11d0-81b6-00a0c9231c29");
pub const CLSID_ComponentUtil = &CLSID_ComponentUtil_Value;

const CLSID_PackageUtil_Value = Guid.initString("6eb22885-8a19-11d0-81b6-00a0c9231c29");
pub const CLSID_PackageUtil = &CLSID_PackageUtil_Value;

const CLSID_RemoteComponentUtil_Value = Guid.initString("6eb22886-8a19-11d0-81b6-00a0c9231c29");
pub const CLSID_RemoteComponentUtil = &CLSID_RemoteComponentUtil_Value;

const CLSID_RoleAssociationUtil_Value = Guid.initString("6eb22887-8a19-11d0-81b6-00a0c9231c29");
pub const CLSID_RoleAssociationUtil = &CLSID_RoleAssociationUtil_Value;

const IID_ICatalog_Value = Guid.initString("6eb22870-8a19-11d0-81b6-00a0c9231c29");
pub const IID_ICatalog = &IID_ICatalog_Value;
pub const ICatalog = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        GetCollection: *const fn (
            self: *const ICatalog,
            bstr_coll_name: ?BSTR,
            pp_catalog_collection: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Connect: *const fn (
            self: *const ICatalog,
            bstr_connect_string: ?BSTR,
            pp_catalog_collection: ?*?*IDispatch,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MajorVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICatalog,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_MinorVersion: *const fn (
            // TODO: this function has a "SpecialName", should Zig do anything with this?
            self: *const ICatalog,
            retval: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn getCollection(self: *const T, bstr_coll_name_: ?BSTR, pp_catalog_collection_: ?*?*IDispatch) HRESULT {
                return @as(*const ICatalog.VTable, @ptrCast(self.vtable)).GetCollection(@as(*const ICatalog, @ptrCast(self)), bstr_coll_name_, pp_catalog_collection_);
            }
            pub inline fn connect(self: *const T, bstr_connect_string_: ?BSTR, pp_catalog_collection_: ?*?*IDispatch) HRESULT {
                return @as(*const ICatalog.VTable, @ptrCast(self.vtable)).Connect(@as(*const ICatalog, @ptrCast(self)), bstr_connect_string_, pp_catalog_collection_);
            }
            pub inline fn getMajorVersion(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const ICatalog.VTable, @ptrCast(self.vtable)).get_MajorVersion(@as(*const ICatalog, @ptrCast(self)), retval_);
            }
            pub inline fn getMinorVersion(self: *const T, retval_: ?*i32) HRESULT {
                return @as(*const ICatalog.VTable, @ptrCast(self.vtable)).get_MinorVersion(@as(*const ICatalog, @ptrCast(self)), retval_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IComponentUtil_Value = Guid.initString("6eb22873-8a19-11d0-81b6-00a0c9231c29");
pub const IID_IComponentUtil = &IID_IComponentUtil_Value;
pub const IComponentUtil = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InstallComponent: *const fn (
            self: *const IComponentUtil,
            bstr_d_l_l_file: ?BSTR,
            bstr_typelib_file: ?BSTR,
            bstr_proxy_stub_d_l_l_file: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportComponent: *const fn (
            self: *const IComponentUtil,
            bstr_c_l_s_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ImportComponentByName: *const fn (
            self: *const IComponentUtil,
            bstr_prog_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCLSIDs: *const fn (
            self: *const IComponentUtil,
            bstr_d_l_l_file: ?BSTR,
            bstr_typelib_file: ?BSTR,
            a_c_l_s_i_ds: ?*?*SAFEARRAY,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn installComponent(self: *const T, bstr_d_l_l_file_: ?BSTR, bstr_typelib_file_: ?BSTR, bstr_proxy_stub_d_l_l_file_: ?BSTR) HRESULT {
                return @as(*const IComponentUtil.VTable, @ptrCast(self.vtable)).InstallComponent(@as(*const IComponentUtil, @ptrCast(self)), bstr_d_l_l_file_, bstr_typelib_file_, bstr_proxy_stub_d_l_l_file_);
            }
            pub inline fn importComponent(self: *const T, bstr_c_l_s_i_d_: ?BSTR) HRESULT {
                return @as(*const IComponentUtil.VTable, @ptrCast(self.vtable)).ImportComponent(@as(*const IComponentUtil, @ptrCast(self)), bstr_c_l_s_i_d_);
            }
            pub inline fn importComponentByName(self: *const T, bstr_prog_i_d_: ?BSTR) HRESULT {
                return @as(*const IComponentUtil.VTable, @ptrCast(self.vtable)).ImportComponentByName(@as(*const IComponentUtil, @ptrCast(self)), bstr_prog_i_d_);
            }
            pub inline fn getCLSIDs(self: *const T, bstr_d_l_l_file_: ?BSTR, bstr_typelib_file_: ?BSTR, a_c_l_s_i_ds_: ?*?*SAFEARRAY) HRESULT {
                return @as(*const IComponentUtil.VTable, @ptrCast(self.vtable)).GetCLSIDs(@as(*const IComponentUtil, @ptrCast(self)), bstr_d_l_l_file_, bstr_typelib_file_, a_c_l_s_i_ds_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IPackageUtil_Value = Guid.initString("6eb22874-8a19-11d0-81b6-00a0c9231c29");
pub const IID_IPackageUtil = &IID_IPackageUtil_Value;
pub const IPackageUtil = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InstallPackage: *const fn (
            self: *const IPackageUtil,
            bstr_package_file: ?BSTR,
            bstr_install_path: ?BSTR,
            l_options: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ExportPackage: *const fn (
            self: *const IPackageUtil,
            bstr_package_i_d: ?BSTR,
            bstr_package_file: ?BSTR,
            l_options: i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        ShutdownPackage: *const fn (
            self: *const IPackageUtil,
            bstr_package_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn installPackage(self: *const T, bstr_package_file_: ?BSTR, bstr_install_path_: ?BSTR, l_options_: i32) HRESULT {
                return @as(*const IPackageUtil.VTable, @ptrCast(self.vtable)).InstallPackage(@as(*const IPackageUtil, @ptrCast(self)), bstr_package_file_, bstr_install_path_, l_options_);
            }
            pub inline fn exportPackage(self: *const T, bstr_package_i_d_: ?BSTR, bstr_package_file_: ?BSTR, l_options_: i32) HRESULT {
                return @as(*const IPackageUtil.VTable, @ptrCast(self.vtable)).ExportPackage(@as(*const IPackageUtil, @ptrCast(self)), bstr_package_i_d_, bstr_package_file_, l_options_);
            }
            pub inline fn shutdownPackage(self: *const T, bstr_package_i_d_: ?BSTR) HRESULT {
                return @as(*const IPackageUtil.VTable, @ptrCast(self.vtable)).ShutdownPackage(@as(*const IPackageUtil, @ptrCast(self)), bstr_package_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRemoteComponentUtil_Value = Guid.initString("6eb22875-8a19-11d0-81b6-00a0c9231c29");
pub const IID_IRemoteComponentUtil = &IID_IRemoteComponentUtil_Value;
pub const IRemoteComponentUtil = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        InstallRemoteComponent: *const fn (
            self: *const IRemoteComponentUtil,
            bstr_server: ?BSTR,
            bstr_package_i_d: ?BSTR,
            bstr_c_l_s_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        InstallRemoteComponentByName: *const fn (
            self: *const IRemoteComponentUtil,
            bstr_server: ?BSTR,
            bstr_package_name: ?BSTR,
            bstr_prog_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn installRemoteComponent(self: *const T, bstr_server_: ?BSTR, bstr_package_i_d_: ?BSTR, bstr_c_l_s_i_d_: ?BSTR) HRESULT {
                return @as(*const IRemoteComponentUtil.VTable, @ptrCast(self.vtable)).InstallRemoteComponent(@as(*const IRemoteComponentUtil, @ptrCast(self)), bstr_server_, bstr_package_i_d_, bstr_c_l_s_i_d_);
            }
            pub inline fn installRemoteComponentByName(self: *const T, bstr_server_: ?BSTR, bstr_package_name_: ?BSTR, bstr_prog_i_d_: ?BSTR) HRESULT {
                return @as(*const IRemoteComponentUtil.VTable, @ptrCast(self.vtable)).InstallRemoteComponentByName(@as(*const IRemoteComponentUtil, @ptrCast(self)), bstr_server_, bstr_package_name_, bstr_prog_i_d_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

const IID_IRoleAssociationUtil_Value = Guid.initString("6eb22876-8a19-11d0-81b6-00a0c9231c29");
pub const IID_IRoleAssociationUtil = &IID_IRoleAssociationUtil_Value;
pub const IRoleAssociationUtil = extern struct {
    pub const VTable = extern struct {
        base: IDispatch.VTable,
        AssociateRole: *const fn (
            self: *const IRoleAssociationUtil,
            bstr_role_i_d: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        AssociateRoleByName: *const fn (
            self: *const IRoleAssociationUtil,
            bstr_role_name: ?BSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    pub fn MethodMixin(comptime T: type) type {
        return struct {
            pub usingnamespace IDispatch.MethodMixin(T);
            pub inline fn associateRole(self: *const T, bstr_role_i_d_: ?BSTR) HRESULT {
                return @as(*const IRoleAssociationUtil.VTable, @ptrCast(self.vtable)).AssociateRole(@as(*const IRoleAssociationUtil, @ptrCast(self)), bstr_role_i_d_);
            }
            pub inline fn associateRoleByName(self: *const T, bstr_role_name_: ?BSTR) HRESULT {
                return @as(*const IRoleAssociationUtil.VTable, @ptrCast(self.vtable)).AssociateRoleByName(@as(*const IRoleAssociationUtil, @ptrCast(self)), bstr_role_name_);
            }
        };
    }
    pub usingnamespace MethodMixin(@This());
};

pub const __MIDL___MIDL_itf_mtxadmin_0107_0001 = enum(i32) {
    s = 1,
};
pub const mtsInstallUsers = __MIDL___MIDL_itf_mtxadmin_0107_0001.s;

pub const __MIDL___MIDL_itf_mtxadmin_0107_0002 = enum(i32) {
    s = 1,
};
pub const mtsExportUsers = __MIDL___MIDL_itf_mtxadmin_0107_0002.s;

pub const __MIDL___MIDL_itf_mtxadmin_0107_0003 = enum(i32) {
    ObjectErrors = -2146368511,
    ObjectInvalid = -2146368510,
    KeyMissing = -2146368509,
    AlreadyInstalled = -2146368508,
    DownloadFailed = -2146368507,
    PDFWriteFail = -2146368505,
    PDFReadFail = -2146368504,
    PDFVersion = -2146368503,
    CoReqCompInstalled = -2146368496,
    BadPath = -2146368502,
    PackageExists = -2146368501,
    RoleExists = -2146368500,
    CantCopyFile = -2146368499,
    NoTypeLib = -2146368498,
    NoUser = -2146368497,
    // InvalidUserids = -2146368496, this enum value conflicts with CoReqCompInstalled
    NoRegistryCLSID = -2146368495,
    BadRegistryProgID = -2146368494,
    AuthenticationLevel = -2146368493,
    UserPasswdNotValid = -2146368492,
    NoRegistryRead = -2146368491,
    NoRegistryWrite = -2146368490,
    NoRegistryRepair = -2146368489,
    CLSIDOrIIDMismatch = -2146368488,
    RemoteInterface = -2146368487,
    DllRegisterServer = -2146368486,
    NoServerShare = -2146368485,
    NoAccessToUNC = -2146368484,
    DllLoadFailed = -2146368483,
    BadRegistryLibID = -2146368482,
    PackDirNotFound = -2146368481,
    TreatAs = -2146368480,
    BadForward = -2146368479,
    BadIID = -2146368478,
    RegistrarFailed = -2146368477,
    CompFileDoesNotExist = -2146368476,
    CompFileLoadDLLFail = -2146368475,
    CompFileGetClassObj = -2146368474,
    CompFileClassNotAvail = -2146368473,
    CompFileBadTLB = -2146368472,
    CompFileNotInstallable = -2146368471,
    NotChangeable = -2146368470,
    NotDeletable = -2146368469,
    Session = -2146368468,
    CompFileNoRegistrar = -2146368460,
};
pub const mtsErrObjectErrors = __MIDL___MIDL_itf_mtxadmin_0107_0003.ObjectErrors;
pub const mtsErrObjectInvalid = __MIDL___MIDL_itf_mtxadmin_0107_0003.ObjectInvalid;
pub const mtsErrKeyMissing = __MIDL___MIDL_itf_mtxadmin_0107_0003.KeyMissing;
pub const mtsErrAlreadyInstalled = __MIDL___MIDL_itf_mtxadmin_0107_0003.AlreadyInstalled;
pub const mtsErrDownloadFailed = __MIDL___MIDL_itf_mtxadmin_0107_0003.DownloadFailed;
pub const mtsErrPDFWriteFail = __MIDL___MIDL_itf_mtxadmin_0107_0003.PDFWriteFail;
pub const mtsErrPDFReadFail = __MIDL___MIDL_itf_mtxadmin_0107_0003.PDFReadFail;
pub const mtsErrPDFVersion = __MIDL___MIDL_itf_mtxadmin_0107_0003.PDFVersion;
pub const mtsErrCoReqCompInstalled = __MIDL___MIDL_itf_mtxadmin_0107_0003.CoReqCompInstalled;
pub const mtsErrBadPath = __MIDL___MIDL_itf_mtxadmin_0107_0003.BadPath;
pub const mtsErrPackageExists = __MIDL___MIDL_itf_mtxadmin_0107_0003.PackageExists;
pub const mtsErrRoleExists = __MIDL___MIDL_itf_mtxadmin_0107_0003.RoleExists;
pub const mtsErrCantCopyFile = __MIDL___MIDL_itf_mtxadmin_0107_0003.CantCopyFile;
pub const mtsErrNoTypeLib = __MIDL___MIDL_itf_mtxadmin_0107_0003.NoTypeLib;
pub const mtsErrNoUser = __MIDL___MIDL_itf_mtxadmin_0107_0003.NoUser;
pub const mtsErrInvalidUserids = __MIDL___MIDL_itf_mtxadmin_0107_0003.CoReqCompInstalled;
pub const mtsErrNoRegistryCLSID = __MIDL___MIDL_itf_mtxadmin_0107_0003.NoRegistryCLSID;
pub const mtsErrBadRegistryProgID = __MIDL___MIDL_itf_mtxadmin_0107_0003.BadRegistryProgID;
pub const mtsErrAuthenticationLevel = __MIDL___MIDL_itf_mtxadmin_0107_0003.AuthenticationLevel;
pub const mtsErrUserPasswdNotValid = __MIDL___MIDL_itf_mtxadmin_0107_0003.UserPasswdNotValid;
pub const mtsErrNoRegistryRead = __MIDL___MIDL_itf_mtxadmin_0107_0003.NoRegistryRead;
pub const mtsErrNoRegistryWrite = __MIDL___MIDL_itf_mtxadmin_0107_0003.NoRegistryWrite;
pub const mtsErrNoRegistryRepair = __MIDL___MIDL_itf_mtxadmin_0107_0003.NoRegistryRepair;
pub const mtsErrCLSIDOrIIDMismatch = __MIDL___MIDL_itf_mtxadmin_0107_0003.CLSIDOrIIDMismatch;
pub const mtsErrRemoteInterface = __MIDL___MIDL_itf_mtxadmin_0107_0003.RemoteInterface;
pub const mtsErrDllRegisterServer = __MIDL___MIDL_itf_mtxadmin_0107_0003.DllRegisterServer;
pub const mtsErrNoServerShare = __MIDL___MIDL_itf_mtxadmin_0107_0003.NoServerShare;
pub const mtsErrNoAccessToUNC = __MIDL___MIDL_itf_mtxadmin_0107_0003.NoAccessToUNC;
pub const mtsErrDllLoadFailed = __MIDL___MIDL_itf_mtxadmin_0107_0003.DllLoadFailed;
pub const mtsErrBadRegistryLibID = __MIDL___MIDL_itf_mtxadmin_0107_0003.BadRegistryLibID;
pub const mtsErrPackDirNotFound = __MIDL___MIDL_itf_mtxadmin_0107_0003.PackDirNotFound;
pub const mtsErrTreatAs = __MIDL___MIDL_itf_mtxadmin_0107_0003.TreatAs;
pub const mtsErrBadForward = __MIDL___MIDL_itf_mtxadmin_0107_0003.BadForward;
pub const mtsErrBadIID = __MIDL___MIDL_itf_mtxadmin_0107_0003.BadIID;
pub const mtsErrRegistrarFailed = __MIDL___MIDL_itf_mtxadmin_0107_0003.RegistrarFailed;
pub const mtsErrCompFileDoesNotExist = __MIDL___MIDL_itf_mtxadmin_0107_0003.CompFileDoesNotExist;
pub const mtsErrCompFileLoadDLLFail = __MIDL___MIDL_itf_mtxadmin_0107_0003.CompFileLoadDLLFail;
pub const mtsErrCompFileGetClassObj = __MIDL___MIDL_itf_mtxadmin_0107_0003.CompFileGetClassObj;
pub const mtsErrCompFileClassNotAvail = __MIDL___MIDL_itf_mtxadmin_0107_0003.CompFileClassNotAvail;
pub const mtsErrCompFileBadTLB = __MIDL___MIDL_itf_mtxadmin_0107_0003.CompFileBadTLB;
pub const mtsErrCompFileNotInstallable = __MIDL___MIDL_itf_mtxadmin_0107_0003.CompFileNotInstallable;
pub const mtsErrNotChangeable = __MIDL___MIDL_itf_mtxadmin_0107_0003.NotChangeable;
pub const mtsErrNotDeletable = __MIDL___MIDL_itf_mtxadmin_0107_0003.NotDeletable;
pub const mtsErrSession = __MIDL___MIDL_itf_mtxadmin_0107_0003.Session;
pub const mtsErrCompFileNoRegistrar = __MIDL___MIDL_itf_mtxadmin_0107_0003.CompFileNoRegistrar;

//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {},
    .wide => struct {},
    .unspecified => if (@import("builtin").is_test) struct {} else struct {},
};
//--------------------------------------------------------------------------------
// Section: Imports (5)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BSTR = @import("../foundation.zig").BSTR;
const HRESULT = @import("../foundation.zig").HRESULT;
const IDispatch = @import("../system/com.zig").IDispatch;
const SAFEARRAY = @import("../system/com.zig").SAFEARRAY;

test {
    @setEvalBranchQuota(comptime @import("std").meta.declarations(@This()).len * 3);

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
